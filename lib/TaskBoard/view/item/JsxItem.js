import TaskItem from './TaskItem.js';
/**
 * @module TaskBoard/view/item/JsxItem
 */

/**
 * Item displaying content generated by a React (JSX) component
 *
 * {@note}JsxItem can only be used in React applications.{/@note}
 *
 * @extends TaskBoard/view/item/TaskItem
 * @classtype jsx
 */

export default class JsxItem extends TaskItem {
    static $name = 'JsxItem';

    static type = 'jsx';

    /**
     * Function used to generate JSX item content.
     *
     * Return a React Element (JSX) from the function:
     *
     * ```javascript
     * import MyJsxItem from './MyJsxItem.js';
     *
     * const taskBoard = new TaskBoard({
     *    bodyItems : {
     *        prio : {
     *          type : 'jsx',
     *          jsx  : ({ taskRecord }) => <MyJsxItem taskRecord={taskRecord} />
     *        }
     *    }
     * });
     * ```
     *
     * @config {Function} jsx
     * @param {TaskBoard.model.TaskModel} taskRecord Task record
     * @param {JsxItemConfig} config Item config
     * @param {Object} value Value of the configured field
     * @returns React Element (JSX)
     * @category Common
     */

    /**
     * Widget type or config to use as the editor for this item. Used in the inline task editor.
     *
     * JsxItems are un-editable by default.
     *
     * @config {String|Object} editor
     * @default null
     * @category Common
     */
    static defaultEditor = null;

    static render({ domConfig, config, taskRecord, value }) {
        domConfig.retainChildren = true;
        domConfig.children = [config.jsx({ value, taskRecord, config })];
    }
}

JsxItem.initClass();
