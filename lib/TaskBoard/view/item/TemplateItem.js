import ObjectHelper from '../../../Core/helper/ObjectHelper.js';
import TaskItem from './TaskItem.js';

/**
 * @module TaskBoard/view/item/TemplateItem
 */

/**
 * Item displaying content generated by a template function, see {@link #config-template}
 *
 * {@inlineexample TaskBoard/view/item/TemplateItem.js}
 *
 * @extends TaskBoard/view/item/TaskItem
 * @classtype template
 */
export default class TemplateItem extends TaskItem {
    static $name = 'TemplateItem';

    static type = 'template';

    /**
     * Template function used to generate task content.
     *
     * Return an HTML string or a DomConfig object from the function:
     *
     * ```javascript
     * const taskBoard = new TaskBoard({
     *    bodyItems : {
     *        prio : {
     *          type     : 'template',
     *          template : ({ taskRecord }) => `<i class="b-fa b-fa-tarffic-light"></i> ${taskRecord.prio}`
     *        }
     *    }
     * });
     * ```
     *
     * @config {Function} template
     * @param {TaskBoard.model.TaskModel} taskRecord Task record
     * @param {TemplateItemConfig} config Item config
     * @param {Object} value Value of the configured field
     * @returns {String|DomConfig|DomConfig[]} HTML string, DomConfig or DomConfig array
     * @category Common
     */

    /**
     * Widget type or config to use as the editor for this item. Used in the inline task editor.
     *
     * TemplateItems are un-editable by default.
     *
     * @config {String|Object} editor
     * @default null
     * @category Common
     */

    /**
     * Specify as `true` to render the template item even if the backing field's value is `null` or `undefined`. Useful
     * for example to display some custom string for null values ("Empty", "Unset" etc).
     *
     * ```javascript
     * const taskBoard = new TaskBoard({
     *    footerItems : {
     *        category : {
     *          type       : 'template',
     *          renderNull : true,
     *          template   : ({ value }) => value ? value : 'Empty'
     *        }
     *    }
     * });
     * ```
     *
     * @config {Boolean} renderNull
     * @default false
     * @category Common
     */

    static defaultEditor = null;

    static render({ domConfig, value, config, taskRecord }) {
        const html = config.template({ taskRecord, config, value });

        if (typeof html === 'string') {
            domConfig.html = html;
        }
        else if (ObjectHelper.isObject(html)) {
            ObjectHelper.merge(domConfig, html);
        }
        else if (Array.isArray(html)) {
            domConfig.children = html;
        }
    }
}

TemplateItem.initClass();
