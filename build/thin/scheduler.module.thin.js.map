{
  "version": 3,
  "sources": ["../../../Scheduler/lib/Scheduler/column/EventColorColumn.js", "../../../Scheduler/lib/Scheduler/column/ResourceCollapseColumn.js", "../../../Scheduler/lib/Scheduler/feature/EventDragSelect.js", "../../../Scheduler/lib/Scheduler/feature/EventNonWorkingTime.js", "../../../Scheduler/lib/Scheduler/feature/GroupSummary.js", "../../../Scheduler/lib/Scheduler/feature/HeaderZoom.js", "../../../Scheduler/lib/Scheduler/feature/Pan.js", "../../../Scheduler/lib/Scheduler/feature/ResourceMenu.js", "../../../Scheduler/lib/Scheduler/feature/ResourceTimeRanges.js", "../../../Scheduler/lib/Scheduler/feature/RowResize.js", "../../../Scheduler/lib/Scheduler/feature/SimpleEventEdit.js", "../../../Scheduler/lib/Scheduler/feature/Split.js", "../../../Scheduler/lib/Scheduler/feature/Summary.js", "../../../Scheduler/lib/Scheduler/feature/TimeSelection.js", "../../../Scheduler/lib/Scheduler/feature/export/Print.js", "../../../Scheduler/lib/Scheduler/util/ScheduleTableExporter.js", "../../../Scheduler/lib/Scheduler/feature/experimental/ExcelExporter.js", "../../../Scheduler/lib/Scheduler/view/Scheduler.js", "../../../Scheduler/lib/Scheduler/widget/UndoRedo.js", "../../../Scheduler/lib/Scheduler/widget/ViewPresetCombo.js", "../../../Scheduler/bundle/entry.thin.js"],
  "sourcesContent": ["import ColorColumn from '../../Grid/column/ColorColumn.js';\nimport '../widget/EventColorPicker.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\n/**\n * @module Scheduler/column/EventColorColumn\n */\n/**\n * A column that displays Event's `eventColor` values (built-in color classes or CSS colors) as a colored element\n * similar to the {@link Scheduler.widget.EventColorField}. When the user clicks the element, a\n * {@link Scheduler.widget.EventColorPicker} lets the user select from a\n * {@link Scheduler.view.mixin.TimelineEventRendering#config-eventColor range of colors}.\n *\n * ```javascript\n * new Scheduler({\n *    columns : [\n *       {\n *          type : 'eventcolor',\n *          text : 'EventColor'\n *       }\n *    ]\n * });\n * ```\n *\n * {@inlineexample Scheduler/column/EventColorColumn.js}\n *\n * @extends Grid/column/ColorColumn\n * @classtype eventcolor\n * @column\n */\nexport default class EventColorColumn extends ColorColumn {\n    static $name = 'EventColorColumn';\n    static type = 'eventcolor';\n    static defaults = {\n        colorEditorType : 'eventcolorpicker',\n        field           : 'eventColor'\n    };\n}\nColumnStore.registerColumnType(EventColorColumn);\nEventColorColumn._$name = 'EventColorColumn';", "import Column from '../../Grid/column/Column.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\n/**\n * @module Scheduler/column/ResourceCollapseColumn\n */\n/**\n * A column toggling the resource {@link Scheduler.model.ResourceModel#field-eventLayout} between `none` and `stack`.\n *\n * {@inlineexample Scheduler/column/ResourceCollapseColumn.js}\n *\n * @extends Grid/column/Column\n * @classtype resourceCollapse\n * @column\n */\nexport default class ResourceCollapseColumn extends Column {\n    static get $name() {\n        return 'ResourceCollapseColumn';\n    }\n    static get type() {\n        return 'resourceCollapse';\n    }\n    static get defaults() {\n        return {\n            /** @hideconfigs renderer */\n            width     : '3em',\n            align     : 'center',\n            sortable  : false,\n            groupable : false,\n            editor    : false,\n            minWidth  : 0,\n            cellCls   : 'b-resourcecollapse-cell',\n            renderer  : ({ record }) => ({\n                tag   : 'i',\n                class : {\n                    'b-icon'                 : 1,\n                    'b-icon-expand-resource' : 1,\n                    'b-flip'                 : record.eventLayout !== 'none'\n                }\n            })\n        };\n    }\n    onCellClick({ record, event }) {\n        // Prevent native scrolling on space key press\n        event.preventDefault();\n        record.eventLayout = record.eventLayout !== 'none' ? 'none' : 'stack';\n    }\n}\nColumnStore.registerColumnType(ResourceCollapseColumn);\nResourceCollapseColumn._$name = 'ResourceCollapseColumn';", "import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport EventHelper from '../../Core/helper/EventHelper.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\n/**\n * @module Scheduler/feature/EventDragSelect\n */\n/**\n * Enables users to click and drag to select events (or assignments in multi assignment mode) inside the Scheduler's\n * timeline. Press CTRL/CMD-key to extend an existing selection.\n *\n * The selection rectangle element is styled using the CSS class name `b-dragselect-rect`. You may use application CSS\n * to change its appearance from the default.\n *\n * {@inlineexample Scheduler/feature/EventDragSelect.js}\n *\n * This feature is **disabled** by default.\n * For info on enabling it, see {@link Grid.view.mixin.GridFeatures}.\n *\n * **NOTE:** Incompatible with the {@link Scheduler.feature.EventDragCreate} and the {@link Scheduler.feature.Pan} features.\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *   features : {\n *     eventDragSelect : true,\n *     eventDragCreate : false\n *   }\n * });\n * ```\n *\n * @demo Scheduler/dragselection\n * @extends Core/mixin/InstancePlugin\n * @mixes Core/mixin/Delayable\n * @classtype eventDragSelect\n * @feature\n */\nexport default class EventDragSelect extends Delayable(InstancePlugin) {\n    // region Events\n    /**\n     * Fires on the owning Scheduler before drag selection starts. Return false to prevent the operation.\n     * @event beforeEventDragSelect\n     * @preventable\n     * @on-owner\n     * @param {Event} event The native browser DOM event\n     */\n    //endregion\n    // region Init\n    static $name = 'EventDragSelect';\n    targetSelector = '.b-sch-timeaxis-cell, .b-timeaxissubgrid';\n    construct(client, config) {\n        client.multiEventSelect = true;\n        super.construct(client, config);\n    }\n    //endregion\n    //region Plugin config\n    // Plugin configuration. This plugin chains some of the functions in Scheduler.\n    static pluginConfig = {\n        chain : ['onElementMouseDown', 'onElementMouseMove']\n    };\n    //endregion\n    onElementMouseDown(event) {\n        const\n            me                                            = this,\n            { client }                                    = me,\n            { foregroundCanvas }                          = client,\n            { target, button, touches, clientX, clientY } = event,\n            canvasRect                                    = Rectangle.from(foregroundCanvas, true);\n        // only react to mouse input, and left button\n        // only react to mousedown directly on grid cell or subgrid element\n        if (touches || button !== 0 || me.disabled || !target.matches(me.targetSelector) || client.trigger('beforeEventDragSelect', { event }) === false) {\n            return;\n        }\n        // Prevent grid dragselection (reset by GridSelection)\n        client.preventDragSelect = true;\n        me.startX  = clientX - canvasRect.x;\n        me.startY  = clientY - canvasRect.y;\n        me.element = DomHelper.createElement({\n            tag           : 'div',\n            className     : 'b-dragselect-rect',\n            parent        : client.foregroundCanvas,\n            retainElement : true,\n            style         : {\n                transform : `translate(${me.startX}px, ${me.startY}px)`\n            }\n        });\n        client.navigator.disabled = true;\n        me.mouseUpDetacher = EventHelper.on({\n            element : document,\n            mouseup : 'onDocumentMouseUp',\n            thisObj : me\n        });\n    }\n    get eventRectangles() {\n        const\n            { client }    = this,\n            // When using nested events, only drag select parents\n            eventElements = Array.from(client.foregroundCanvas.children).filter(node => node.matches(`${client.eventSelector}, .b-nested-events-container`));\n        return eventElements.map(el => {\n            const record = client.resolveAssignmentRecord(el);\n            return {\n                rectangle : Rectangle.from(el, true),\n                record,\n                selected  : client.selectedAssignments.includes(record)\n            };\n        });\n    }\n    onElementMouseMove(event) {\n        const\n            me         = this,\n            { client } = me;\n        if (typeof me.startX === 'number') {\n            const\n                canvasRect = me.rectangle = Rectangle.from(me.client.foregroundCanvas, true),\n                x          = Math.min(Math.max(event.clientX - canvasRect.x, 0), canvasRect.width + 1),\n                y          = Math.min(Math.max(event.clientY - canvasRect.y, 0), canvasRect.height + 1),\n                rect       = new Rectangle(me.startX, me.startY, x - me.startX, y - me.startY);\n            DomHelper.setTranslateXY(me.element, rect.x, rect.y);\n            me.element.style.width  = `${rect.width}px`;\n            me.element.style.height = `${rect.height}px`;\n            if (!me.dragging) {\n                client.element.classList.add('b-dragselecting');\n                if (!event.ctrlKey && !event.metaKey) {\n                    client.clearEventSelection();\n                }\n                me.originalSelection  = client.selectedAssignments.slice();\n                me.subGridElementRect = Rectangle.from(client.timeAxisSubGridElement, true);\n                // No key processing during drag selection\n                client.navigator.disabled = true;\n                client.enableScrollingCloseToEdges(client.timeAxisSubGrid);\n                me.dragging = true;\n            }\n            me.updateSelection();\n        }\n    }\n    onDocumentMouseUp(event) {\n        const\n            me                                 = this,\n            { client }                         = me,\n            { selectedAssignments, navigator } = client;\n        client.disableScrollingCloseToEdges(client.timeAxisSubGrid);\n        if (!me.dragging && client.deselectAllOnScheduleClick) {\n            client.clearEventSelection();\n        }\n        me.element?.remove();\n        client.element.classList.remove('b-dragselecting');\n        me.startX = me.startY = null;\n        // Navigator will react to the 'click' event which clears selection, bypass this\n        navigator.skipNextClick = client.timeAxisSubGridElement.contains(event.target);\n        navigator.disabled      = false;\n        me.dragging = false;\n        // If we selected something, focus last selected event so keyboard navigation works\n        if (selectedAssignments.length) {\n            navigator.skipScrollIntoView = true;\n            client.activeAssignment      = selectedAssignments[selectedAssignments.length - 1];\n            navigator.activeItem?.focus();\n            navigator.skipScrollIntoView = false;\n        }\n        me.mouseUpDetacher();\n    }\n    updateSelection() {\n        const\n            me            = this,\n            selectionRect = me.rectangle = Rectangle.from(me.element, true),\n            {\n                eventRectangles,\n                client\n            }             = me,\n            // If any currently selected assignments have had their DOM representation\n            // released due to being scrolled out of view, they must remain selected.\n            // Collect assignments which have no DOM representation as the initial\n            // selection.\n            selection     = client.selectedAssignments.reduce((r, a) => {\n                if (!client.getElementFromAssignmentRecord(a)) {\n                    r.push(a);\n                }\n                return r;\n            }, []);\n        for (const assignmentData of eventRectangles) {\n            if (selectionRect.intersect(assignmentData.rectangle, true)) {\n                assignmentData.selected = true;\n                selection.push(assignmentData.record);\n            }\n        }\n        selection.push(...me.originalSelection);\n        client.selectedAssignments = selection;\n    }\n}\nEventDragSelect._$name = 'EventDragSelect'; GridFeatureManager.registerFeature(EventDragSelect, false, 'Scheduler');\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport AttachToProjectMixin from '../data/mixin/AttachToProjectMixin.js';\nimport NonWorkingTimeMixin from './mixin/NonWorkingTimeMixin.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\n/**\n * @module Scheduler/feature/EventNonWorkingTime\n */\n/**\n * Feature that allows rendering non-working time ranges into event bars (weekends for Scheduler, effective calendar for\n * SchedulerPro):\n *\n * {@inlineexample Scheduler/feature/EventNonWorkingTime.js}\n *\n * Please note that to not clutter the view (and have a large negative effect on performance) the feature bails out of\n * rendering ranges for very zoomed out views (see {@link #config-maxTimeAxisUnit} for details).\n *\n * This feature is **disabled** by default.\n * For info on enabling it, see {@link Grid/view/mixin/GridFeatures}.\n *\n * @extends Scheduler/feature/AbstractTimeRanges\n * @extends Core/mixin/InstancePlugin\n * @classtype eventNonWorkingTime\n * @mixes Scheduler/feature/mixin/NonWorkingTimeMixin\n * @feature\n */\nexport default class EventNonWorkingTime extends InstancePlugin.mixin(AttachToProjectMixin, NonWorkingTimeMixin) {\n    static $name = 'EventNonWorkingTime';\n    static pluginConfig = {\n        chain : [\n            'onTimeAxisViewModelUpdate',\n            'updateLocalization',\n            'onEventDataGenerated'\n        ]\n    };\n    // Cannot use `static properties = {}`, new Map would pollute the prototype\n    static get properties() {\n        return {\n            calendarRangeCache : new Map()\n        };\n    }\n    doDisable(disable) {\n        this.client.refresh();\n        super.doDisable(disable);\n    }\n    attachToCalendarManagerStore(store) {\n        super.attachToCalendarManagerStore(store);\n        const me = this;\n        store.ion({\n            name    : 'calendarManagerStore',\n            change  : 'onCalendarChange',\n            thisObj : me\n        });\n        // Schedulers calendar is not part of the calendar manager store\n        if (me.client.isScheduler) {\n            me.project.effectiveCalendar.intervals.ion({\n                name    : 'calendarManagerStore',\n                change  : 'onCalendarChange',\n                thisObj : me\n            });\n        }\n        me.setupDefaultCalendar();\n    }\n    onCalendarChange() {\n        this.calendarRangeCache.clear();\n    }\n    onTimeAxisViewModelUpdate() {\n        this.calendarRangeCache.clear();\n    }\n    //region Draw\n    getRangeDomConfig(timeRange, minDate, maxDate, relativeTo) {\n        const\n            me         = this,\n            { client } = me,\n            { rtl }    = client,\n            startPos   = client.getCoordinateFromDate(DateHelper.max(timeRange.startDate, minDate)) - relativeTo,\n            endPos     = timeRange.endDate ? client.getCoordinateFromDate(DateHelper.min(timeRange.endDate, maxDate)) - relativeTo : startPos,\n            size       = Math.abs(endPos - startPos),\n            isRange    = size > 0,\n            translateX = rtl ? `calc(${startPos}px - 100%)` : `${startPos}px`;\n        return {\n            className : {\n                // Borrow styling from time ranges\n                'b-sch-timerange'      : 1,\n                'b-sch-range'          : 1,\n                'b-sch-nonworkingtime' : 1,\n                [timeRange.cls]        : timeRange.cls,\n                'b-rtl'                : rtl\n            },\n            dataset : {\n                id : timeRange.id\n            },\n            elementData : {\n                timeRange\n            },\n            style : client.isVertical\n                ? `transform: translateY(${translateX}); ${isRange ? `height:${size}px` : ''};`\n                : `transform: translateX(${translateX}); ${isRange ? `width:${size}px` : ''};`\n        };\n    }\n    getCalendarTimeRanges(calendar) {\n        let cached = this.calendarRangeCache.get(calendar);\n        if (!cached) {\n            cached = super.getCalendarTimeRanges(calendar, true);\n            this.calendarRangeCache.set(calendar, cached);\n        }\n        return cached;\n    }\n    // Render ranges into event bars\n    onEventDataGenerated({ eventRecord, endMS, startMS, start, end, left, top, children }) {\n        if (this.enabled) {\n            const\n                { isVertical } = this.client,\n                // Use combined calendar for Pro & Gantt, project calendar for Scheduler\n                calendar       = eventRecord.effectiveCalendarsCombination ?? this.client.project.calendar;\n            for (const timeRange of this.getCalendarTimeRanges(calendar)) {\n                // Only care about ranges inside the event bar\n                if (timeRange.startDateMS < endMS && timeRange.endDateMS > startMS) {\n                    const domConfig = this.getRangeDomConfig(timeRange, start, end, isVertical ? top : left);\n                    children.push(domConfig);\n                }\n            }\n        }\n    }\n    //endregion\n}\nEventNonWorkingTime._$name = 'EventNonWorkingTime'; GridFeatureManager.registerFeature(EventNonWorkingTime, false, 'Scheduler');\n", "import GridGroupSummary from '../../Grid/feature/GroupSummary.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport Tooltip from '../../Core/widget/Tooltip.js';\n// Actions that trigger rerendering of group summary rows\nconst\n    eventStoreRefreshActions      = {\n        update : 1,\n        filter : 1\n    },\n    assignmentStoreRefreshActions = {\n        add       : 1,\n        remove    : 1,\n        update    : 1,\n        removeAll : 1,\n        filter    : 1\n    };\n/**\n * @module Scheduler/feature/GroupSummary\n */\n// noinspection JSClosureCompilerSyntax\n/**\n * A special version of the Grid GroupSummary feature that enables summaries within scheduler. To use a single summary\n * it is easiest to configure {@link #config-renderer}, for multiple summaries see {@link #config-summaries}.\n *\n * This feature is <strong>disabled</strong> by default. It is **not** supported in vertical mode.\n *\n * {@inlineexample Scheduler/feature/GroupSummary.js}\n *\n * @demo Scheduler/groupsummary\n *\n * @extends Grid/feature/GroupSummary\n * @classtype groupSummary\n * @feature\n *\n * @typings Grid.feature.GroupSummary -> Grid.feature.GridGroupSummary\n */\nexport default class GroupSummary extends GridGroupSummary {\n    //region Config\n    static get $name() {\n        return 'GroupSummary';\n    }\n    static get defaultConfig() {\n        return {\n            /**\n             * Show tooltip containing summary values and labels\n             * @config {Boolean}\n             * @default\n             */\n            showTooltip : true,\n            /**\n             * Array of summary configs which consists of a label and a {@link #config-renderer} function\n             * ```\n             *  summaries : [\n             *      {\n             *         label : 'Label',\n             *         renderer : ({ startDate, endDate, eventStore, resourceStore, events, resources, groupRecord, groupField, groupValue }) => {\n             *             // return display value\n             *             returns '<div>Renderer output</div>';\n             *         }\n             *      }\n             *  ]\n             *  ```\n             * @config {SchedulerSummaryOptions[]}\n             */\n            summaries : null,\n            /**\n             * Renderer function for a single time axis tick in a group summary row.\n             * Should calculate a sum and return HTML as a result.\n             *\n             * ```javascript\n             * new Scheduler({\n             *     features : {\n             *         groupSummary : {\n             *             renderer : ({ startDate, endDate, eventStore, resourceStore, events, resources, groupRecord, groupField, groupValue }) => {\n             *                 // return display value\n             *                 returns '<div>Renderer output</div>';\n             *             }\n             *         }\n             *     }\n             * });\n             * ```\n             *\n             * @param {Object} context Rendering context object\n             * @param {Date} context.startDate Tick start date\n             * @param {Date} context.endDate Tick end date\n             * @param {Scheduler.model.EventModel[]} context.events Events which belong to the group\n             * @param {Scheduler.model.ResourceModel[]} context.resources Resources which belong to the group\n             * @param {Scheduler.data.EventStore} context.eventStore Event store\n             * @param {Scheduler.data.ResourceStore} context.resourceStore Resource store\n             * @param {Core.data.Model} context.groupRecord Current groups header row record\n             * @param {String} context.groupField Current groups field name\n             * @param {String} context.groupValue Current groups value\n             * @returns {String} Html content\n             * @config {Function}\n             */\n            renderer : null\n        };\n    }\n    static get properties() {\n        return {\n            footersToUpdate : new Set()\n        };\n    }\n    static get pluginConfig() {\n        return {\n            chain : ['render']\n        };\n    }\n    //endregion\n    //region Init\n    construct(scheduler, config) {\n        const me = this;\n        if (scheduler.isVertical) {\n            throw new Error('GroupSummary feature is not supported in vertical mode');\n        }\n        me.scheduler = scheduler;\n        super.construct(scheduler, config);\n        if (!me.summaries && me.renderer) {\n            me.summaries = [{ renderer : me.renderer }];\n        }\n        if (scheduler.isSchedulerBase) {\n            scheduler.eventStore.ion({\n                changePreCommit : me.onEventStoreChange,\n                thisObj         : me\n            });\n            scheduler.assignmentStore.ion({\n                changePreCommit : me.onAssignmentStoreChange,\n                thisObj         : me\n            });\n            scheduler.ion({\n                timeAxisViewModelUpdate : me.onTimeAxisChange,\n                thisObj                 : me\n            });\n            scheduler.project.ion({\n                dataReady : me.onProjectDataReady,\n                thisObj   : me\n            });\n        }\n    }\n    doDestroy() {\n        this._tip?.destroy();\n        super.doDestroy();\n    }\n    //endregion\n    //region Events\n    onTimeAxisChange() {\n        this.scheduler.rowManager.forEach(row => {\n            if (row.isGroupFooter) {\n                row.render();\n            }\n        });\n    }\n    onEventStoreChange({ action, records, changes }) {\n        // Scheduler does minimal update on event changes, it will not rerender the summary rows.\n        // Need to handle that here\n        if (eventStoreRefreshActions[action]) {\n            const resources = new Set();\n            records.forEach(eventRecord => eventRecord.resources.forEach(r => resources.add(r)));\n            this.afterChange(resources);\n        }\n    }\n    onAssignmentStoreChange({ action, records, changes }) {\n        if (assignmentStoreRefreshActions[action]) {\n            const resources = new Set();\n            records.forEach(assignment => assignment.resource && resources.add(assignment.resource));\n            // Include old resource on reassign\n            if (changes?.resourceId?.oldValue != null) {\n                const oldResource = this.scheduler.resourceStore.getById(changes.resourceId.oldValue);\n                oldResource && resources.add(oldResource);\n            }\n            this.afterChange(resources);\n        }\n    }\n    afterChange(affectedResources) {\n        const { resourceStore } = this.scheduler;\n        // Collect footers to update\n        for (const resourceRecord of affectedResources) {\n            let record = resourceRecord;\n            // Resource might not match a row (out of view, filtered out etc.)\n            // Move up/down until footer is found, or we run out of rows (in case footer is below the buffer)\n            if (this.target === 'header') {\n                while (record && !record.isGroupHeader) {\n                    record = resourceStore.getPrev(record);\n                }\n            }\n            else {\n                while (record && !record.isGroupFooter) {\n                    record = resourceStore.getNext(record);\n                }\n            }\n            const row = this.scheduler.rowManager.getRowFor(record);\n            if (record && row) {\n                this.footersToUpdate.add(row);\n            }\n        }\n    }\n    onProjectDataReady() {\n        const\n            {\n                footersToUpdate,\n                client\n            } = this;\n        // Only update the UI immediately if we are visible\n        if (client.isVisible) {\n            // Re-render only affected footers, once\n            if (footersToUpdate.size) {\n                for (const footer of footersToUpdate) {\n                    // Things happen async, footer might have been destroyed\n                    footer.render?.();\n                }\n                footersToUpdate.clear();\n            }\n        }\n        else {\n            client.whenVisible('refresh', client, [true]);\n        }\n    }\n    //endregion\n    //region Render\n    /**\n     * Called before rendering row contents, used to reset rows no longer used as group summary rows\n     * @private\n     */\n    onBeforeRenderRow({ row, record }) {\n        if (row.isGroupFooter && !record.meta.hasOwnProperty('groupFooterFor')) {\n            const timeaxisCell = row.elements.normal.querySelector('.b-sch-timeaxis-cell');\n            // remove summary cells if exist\n            if (timeaxisCell) {\n                timeaxisCell.innerHTML = '';\n            }\n        }\n        super.onBeforeRenderRow(...arguments);\n    }\n    /**\n     * Called by parent class to fill timeaxis with summary contents. Generates tick \"cells\" and populates them with\n     * summaries.\n     * ```\n     * <div class=\"b-timeaxis-group-summary\">\n     *     <div class=\"b-timeaxis-tick\">\n     *         <div class=\"b-timeaxix-summary-value\">x</div>\n     *         ...\n     *     </div>\n     *     ...\n     * </div>\n     * ```\n     * @private\n     */\n    generateHtml(column, records, cls, groupRecord, groupField, groupValue) {\n        if (column.type === 'timeAxis') {\n            const\n                me             = this,\n                { scheduler }  = me,\n                { eventStore } = scheduler,\n                colCfg         = scheduler.timeAxisViewModel.columnConfig;\n            let html = '';\n            // group events by ticks info once here to avoid performance lags\n            // should be inside `scheduler.isEngineReady` check to make sure all events were calculated\n            // https://github.com/bryntum/support/issues/2977\n            const eventsByTick = scheduler.getResourcesEventsPerTick(records, ({ event }) => {\n                return event.resources.some(resource => records.includes(resource)) && (!eventStore.isFiltered || eventStore.records.includes(event));\n            });\n            scheduler.timeAxis.forEach((tick, idx) => {\n                const\n                    groupEvents = eventsByTick[idx] || [],\n                    sumHtml     = me.summaries.map(config => {\n                        // summary renderer used to calculate and format value\n                        const value = config.renderer({\n                            startDate     : tick.startDate,\n                            endDate       : tick.endDate,\n                            resourceStore : scheduler.resourceStore,\n                            events        : groupEvents,\n                            resources     : records,\n                            eventStore,\n                            groupRecord,\n                            groupField,\n                            groupValue\n                        });\n                        return `<div class=\"b-timeaxis-summary-value\">${value}</div>`;\n                    }).join('');\n                // get width on column index from the last header config\n                html += `<div class=\"b-timeaxis-tick\" style=\"width: ${colCfg[colCfg.length - 1][idx].width}px\">${sumHtml}</div>`;\n            });\n            return `<div class=\"b-timeaxis-group-summary\">${html}</div>`;\n        }\n        return super.generateHtml(column, records, cls, groupRecord, groupField, groupValue);\n    }\n    /**\n     * Overrides parents function to return correct summary count, used when sizing row\n     * @private\n     */\n    updateSummaryHtml(cellElement, column, records) {\n        const count = super.updateSummaryHtml(cellElement, column, records);\n        if (column.type === 'timeAxis') {\n            const result = {\n                count  : 0,\n                height : 0\n            };\n            this.summaries.forEach(config => {\n                if (config.height) {\n                    result.height += config.height;\n                }\n                else {\n                    result.count++;\n                }\n            });\n            return result;\n        }\n        return count;\n    }\n    /**\n     * Generates tooltip contents for hovered summary tick\n     * @private\n     */\n    getTipHtml({ activeTarget }) {\n        const\n            me    = this,\n            index = Array.from(activeTarget.parentElement.children).indexOf(activeTarget),\n            tick  = me.scheduler.timeAxis.getAt(index);\n        let tipHtml = `<header>${me.L('L{Summary.Summary for}', me.scheduler.getFormattedDate(tick.startDate))}</header>`,\n            showTip = false;\n        DomHelper.forEachSelector(activeTarget, '.b-timeaxis-summary-value', (element, i) => {\n            const\n                label = me._labels[i],\n                text  = element.innerText.trim();\n            tipHtml += `<label>${label || ''}</label><div class=\"b-timeaxis-summary-value\">${text}</div>`;\n            if (element.innerHTML) {\n                showTip = true;\n            }\n        });\n        return showTip ? tipHtml : null;\n    }\n    /**\n     * Initialize tooltip on render\n     * @private\n     */\n    render() {\n        const\n            me            = this,\n            { scheduler } = me;\n        if (scheduler.isSchedulerBase) {\n            // if any sum config has a label, init tooltip\n            if (me.summaries?.some(config => config.label) && me.showTooltip && !me._tip) {\n                me._labels = me.summaries.map(config => config.label || '');\n                me._tip = new Tooltip({\n                    id             : `${scheduler.id}-groupsummary-tip`,\n                    cls            : 'b-timeaxis-summary-tip',\n                    hoverDelay     : 0,\n                    hideDelay      : 0,\n                    forElement     : scheduler.timeAxisSubGridElement,\n                    anchorToTarget : true,\n                    forSelector    : '.b-timeaxis-group-summary .b-timeaxis-tick',\n                    getHtml        : me.getTipHtml.bind(me)\n                });\n            }\n        }\n    }\n    //endregion\n    removeSummaryElements(rowEl) {\n        const summaryElement = rowEl.querySelector('.b-timeaxis-group-summary');\n        summaryElement?.remove();\n        super.removeSummaryElements();\n    }\n    hasSummary(column) {\n        return super.hasSummary(column) || column.isTimeAxisColumn;\n    }\n}\n// Override Grids GroupSummary with this improved version\nGroupSummary._$name = 'GroupSummary'; GridFeatureManager.registerFeature(GroupSummary, false, 'Scheduler');\n", "import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport EventHelper from '../../Core/helper/EventHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\n/**\n * @module Scheduler/feature/HeaderZoom\n */\n/**\n * Enables users to click and drag to zoom to a date range in Scheduler's header time axis. Only supported in horizontal\n * mode.\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *   features : {\n *     headerZoom : true\n *   }\n * });\n * ```\n *\n * {@inlineexample Scheduler/feature/HeaderZoom.js}\n *\n * <div class=\"note\">Not compatible with the {@link Scheduler/feature/TimeSelection} feature.</div>\n *\n * This feature is **disabled** by default.\n * For info on enabling it, see {@link Grid.view.mixin.GridFeatures}.\n *\n * @extends Core/mixin/InstancePlugin\n * @classtype headerZoom\n * @feature\n */\nexport default class HeaderZoom extends InstancePlugin {\n    static $name = 'HeaderZoom';\n    static get pluginConfig() {\n        return {\n            chain : ['onElementMouseDown', 'onElementMouseMove']\n        };\n    }\n    onElementMouseDown(event) {\n        const me = this;\n        // only react to mouse input, and left button\n        if (event.touches || event.button !== 0 || me.disabled) {\n            return;\n        }\n        // only react to mousedown directly on timeaxis cell\n        if (event.target.closest('.b-sch-header-timeaxis-cell')) {\n            const headerEl = me.client.subGrids.normal.header.headersElement;\n            me.startX = event.clientX;\n            me.element = DomHelper.createElement({\n                parent    : headerEl,\n                tag       : 'div',\n                className : 'b-headerzoom-rect'\n            });\n            me.headerElementRect = Rectangle.from(headerEl);\n            EventHelper.on({\n                element : document,\n                mouseup : 'onMouseUp',\n                thisObj : me,\n                once    : true\n            });\n        }\n    }\n    onElementMouseMove(event) {\n        const me = this;\n        if (typeof me.startX === 'number') {\n            const\n                x     = Math.max(event.clientX, me.headerElementRect.left),\n                left  = Math.min(me.startX, x),\n                width = Math.abs(me.startX - x),\n                rect  = new Rectangle(left - me.headerElementRect.x + me.client.scrollLeft, 0, width, me.headerElementRect.height);\n            DomHelper.setTranslateX(me.element, rect.left);\n            me.element.style.width = rect.width + 'px';\n        }\n    }\n    onMouseUp() {\n        const me = this;\n        if (typeof me.startX === 'number') {\n            const\n                { client } = me,\n                rect       = Rectangle.from(me.element),\n                startDate  = client.getDateFromCoordinate(rect.left, 'round', false),\n                endDate    = client.getDateFromCoordinate(rect.right, 'round', false);\n            me.element.remove();\n            me.startX = null;\n            client.zoomToSpan({\n                startDate,\n                endDate\n            });\n        }\n    }\n}\nHeaderZoom._$name = 'HeaderZoom'; GridFeatureManager.registerFeature(HeaderZoom, false, 'Scheduler');\n", "import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport EventHelper from '../../Core/helper/EventHelper.js';\n/**\n * @module Scheduler/feature/Pan\n */\n/**\n * Makes the scheduler's timeline pannable by dragging with the mouse. Try it out in the demo below.\n *\n * {@inlineexample Scheduler/feature/Pan.js}\n *\n * ```javascript\n * // Enable Pan\n * const scheduler = new Scheduler({\n *   features : {\n *     pan : true,\n *     eventDragCreate : false\n *   }\n * });\n * ```\n *\n * This feature is **disabled** by default.\n * For info on enabling it, see {@link Grid.view.mixin.GridFeatures}.\n *\n * <div class=\"note\">Incompatible with the {@link Scheduler.feature.EventDragCreate} and the\n * {@link Scheduler.feature.EventDragSelect} features.</div>\n *\n * @extends Core/mixin/InstancePlugin\n * @classtype pan\n * @feature\n */\nexport default class Pan extends InstancePlugin {\n    // region Init\n    static $name = 'Pan';\n    static configurable = {\n        /**\n         * Set to `false` to not pan horizontally\n         * @prp {Boolean}\n         * @default\n         */\n        horizontal : true,\n        /**\n         * Set to `false` to not pan vertically\n         * @prp {Boolean}\n         * @default\n         */\n        vertical : true,\n        /**\n         * Set to `false` to not pan horizontally when dragging in the time axis header\n         * @prp {Boolean}\n         * @default\n         */\n        enableInHeader : true\n    };\n    get targetSelector() {\n        return `.b-sch-timeaxis-cell,.b-timeline-subgrid${this.enableInHeader ? ',.b-sch-header-timeaxis-cell,.b-sch-header-text' : ''}`;\n    }\n    //endregion\n    //region Plugin config\n    static get pluginConfig() {\n        return {\n            chain : ['onElementMouseDown']\n        };\n    }\n    //endregion\n    // region Events\n    /**\n     * Fires on the owning Scheduler or Gantt widget before pan starts. Return `false` to prevent the operation.\n     * @event beforePan\n     * @preventable\n     * @on-owner\n     * @param {Event} event The native browser DOM event\n     */\n    //endregion\n    onElementMouseDown(event) {\n        const\n            me                                            = this,\n            { client }                                    = me,\n            { button, touches, target, clientX, clientY } = event,\n            dragFeature                                   = client.features.taskDrag || client.features.eventDrag,\n            enablePanOnEvents                             = client.readOnly || !dragFeature?.enabled;\n        // only react to mouse input, and left button\n        if (touches || button !== 0 || me.disabled || client.trigger('beforePan', { event }) === false) {\n            return;\n        }\n        // only react to mousedown directly on grid cell, subgrid element or if drag is disabled - the events too\n        if (target.matches(me.targetSelector) || (enablePanOnEvents && target.closest(client.eventSelector))) {\n            me.mouseX   = clientX;\n            me.mouseY   = clientY;\n            me.onHeader = me.enableInHeader && target.closest('.b-sch-header-timeaxis-cell');\n            me.mouseDetacher = EventHelper.on({\n                element   : document,\n                mousemove : 'onMouseMove',\n                mouseup   : 'onMouseUp',\n                thisObj   : me\n            });\n        }\n    }\n    onMouseMove(event) {\n        const\n            me         = this,\n            { client } = me,\n            xScroller  = client.timeAxisSubGrid.scrollable,\n            yScroller  = client.scrollable,\n            x          = event.clientX,\n            y          = event.clientY;\n        event.preventDefault();\n        if (me.vertical && (client.isVertical || !me.onHeader)) {\n            yScroller.scrollBy(0, me.mouseY - y);\n        }\n        if (me.horizontal && (client.isHorizontal || !me.onHeader)) {\n            xScroller.scrollBy(me.mouseX - x);\n        }\n        me.mouseX = x;\n        me.mouseY = y;\n    }\n    onMouseUp() {\n        this.mouseDetacher();\n        this.mouseDetacher = null;\n    }\n    /**\n     * Yields `true` if a pan gesture is in process.\n     * @property {Boolean}\n     * @readonly\n     */\n    get isActive() {\n        return Boolean(this.mouseDetacher);\n    }\n    //endregion\n}\nPan._$name = 'Pan'; GridFeatureManager.registerFeature(Pan, false, ['Scheduler', 'Gantt']);\n", "import ContextMenuBase from '../../Core/feature/base/ContextMenuBase.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\n/**\n * @module Scheduler/feature/ResourceMenu\n */\n/**\n * Applicable only for Scheduler in `vertical` mode. Right click resource header cells to display a context menu.\n *\n * To invoke the menu in a keyboard-accessible manner, use the `SPACE` key when a resource cell is focused.\n *\n * {@inlineexample Scheduler/feature/ResourceMenu.js}\n *\n * ### Default menu items\n *\n * The ResourceMenu feature provides only one item by default:\n *\n * | Reference              | Text   | Weight | Description         |\n * |------------------------|--------|--------|---------------------|\n * | `remove`               | Delete | 100    | Delete the resource |\n *\n * ### Customizing the menu items\n *\n * The menu items in the resource menu can be customized, existing items can be changed or removed,\n * and new items can be added. This is handled using the `items` config of the feature.\n *\n * Add extra items for all columns:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     mode     : 'vertical',\n *     features : {\n *         resourceMenu : {\n *             items : {\n *                 extraItem : {\n *                     text   : 'My cell item',\n *                     icon   : 'fa fa-bus',\n *                     weight : 200,\n *                     onItem : () => ...\n *                 }\n *             }\n *         }\n *     }\n * });\n *\n * Remove an existing item:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     mode     : 'vertical',\n *     features : {\n *         resourceMenu : {\n *             items : {\n *                 remove : null\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * Customize existing item:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     mode     : 'vertical',\n *     features : {\n *         resourceMenu : {\n *             items : {\n *                 remove : {\n *                     text : 'Remove',\n *                     icon : 'b-fa b-fa-dumpster'\n *                 }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * It is also possible to manipulate the default items and add new items in the processing function:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     mode     : 'vertical',\n *     features : {\n *         resourceMenu : {\n *             processItems({items, record}) {\n *                 if (record.cost > 5000) {\n *                     items.myItem = { text : 'Split cost' };\n *                 }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * <div class=\"note\">The `processItems` implementation my be an `async` function which `awaits` a result to\n * mutate the `items` object.</div>\n *\n * This feature is **disabled** by default.\n *\n * @extends Core/feature/base/ContextMenuBase\n * @demo Scheduler/vertical\n * @classtype resourceMenu\n * @feature\n */\nexport default class ResourceMenu extends ContextMenuBase {\n    //region Config\n    static $name = 'ResourceMenu';\n    static configurable = {\n        /**\n         * A function called before displaying the menu that allows manipulations of its items.\n         * Returning `false` from this function prevents the menu being shown.\n         *\n         * ```javascript\n         * features : {\n         *     resourceMenu : {\n         *         processItems({ items, record, column }) {\n         *             // Add or hide existing items here as needed\n         *             items.myAction = {\n         *                 text   : 'Cool action',\n         *                 icon   : 'b-fa b-fa-fw b-fa-ban',\n         *                 onItem : () => console.log(`Clicked ${record.name}`),\n         *                 weight : 1000 // Move to end\n         *             };\n         *\n         *             if (!record.allowDelete) {\n         *                 items.remove.hidden = true;\n         *             }\n         *         }\n         *     }\n         * },\n         * ```\n         *\n         * @config {Function}\n         * @param {Object} context An object with information about the menu being shown\n         * @param {Scheduler.model.ResourceModel} context.resourceRecord The record representing the current resource\n         * @param {Object<String,MenuItemConfig|Boolean|null>} context.items An object containing the\n         * {@link Core.widget.MenuItem menu item} configs keyed by their id\n         * @param {Event} context.event The DOM event object that triggered the show\n         * @returns {Boolean|null} Returning `false` from this function prevents the menu being shown\n         *\n         * @preventable\n         */\n        processItems : null,\n        /**\n         * {@link Core.widget.Menu} items object containing named child menu items to apply to the feature's\n         * provided context menu.\n         *\n         * This may add extra items as below, but you can also configure, or remove any of the default items by\n         * configuring the name of the item as `null`\n         *\n         * ```javascript\n         * features : {\n         *     resourceMenu : {\n         *         // This object is applied to the Feature's predefined default items\n         *         items : {\n         *             switchToDog : {\n         *                 text : 'Dog',\n         *                 icon : 'b-fa b-fa-fw b-fa-dog',\n         *                 onItem({record}) {\n         *                     record.dog = true;\n         *                     record.cat = false;\n         *                 },\n         *                 weight : 500     // Make this second from end\n         *             },\n         *             switchToCat : {\n         *                 text : 'Cat',\n         *                 icon : 'b-fa b-fa-fw b-fa-cat',\n         *                 onItem({record}) {\n         *                     record.dog = false;\n         *                     record.cat = true;\n         *                 },\n         *                 weight : 510     // Make this sink to end\n         *             },\n         *             remove : {\n         *                 // Change icon for the delete item\n         *                 icon : 'b-fa b-fa-times'\n         *             }\n         *         }\n         *     }\n         * },\n         * ```\n         *\n         * @config {Object<String,MenuItemConfig|Boolean|null>}\n         */\n        items : null,\n        type : 'resource'\n    };\n    static get pluginConfig() {\n        const config = super.pluginConfig;\n        config.chain.push('populateResourceMenu');\n        return config;\n    }\n    //endregion\n    //region Events\n    /**\n     * This event fires on the owning scheduler before the context menu is shown for a resource.\n     * Allows manipulation of the items to show in the same way as in the {@link #config-processItems}.\n     *\n     * Returning `false` from a listener prevents the menu from being shown.\n     *\n     * @event resourceMenuBeforeShow\n     * @preventable\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source The grid\n     * @param {Core.widget.Menu} menu The menu\n     * @param {Object<String,MenuItemConfig>} items Menu item configs\n     * @param {Grid.column.Column} column Column\n     * @param {Scheduler.model.ResourceModel} resourceRecord Record\n     */\n    /**\n     * This event fires on the owning scheduler after the context menu is shown for a resource.\n     * @event resourceMenuShow\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source The grid\n     * @param {Core.widget.Menu} menu The menu\n     * @param {Object<String,MenuItemConfig>} items Menu item configs\n     * @param {Scheduler.model.ResourceModel} record Record\n     */\n    /**\n     * This event fires on the owning scheduler when an item is selected in the context menu.\n     * @event resourceMenuItem\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source The grid\n     * @param {Core.widget.Menu} menu The menu\n     * @param {Core.widget.MenuItem} item Selected menu item\n     * @param {Scheduler.model.ResourceModel} record Record\n     */\n    /**\n     * This event fires on the owning grid when a check item is toggled in the context menu.\n     * @event resourceMenuToggleItem\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source The grid\n     * @param {Core.widget.Menu} menu The menu\n     * @param {Core.widget.MenuItem} item Selected menu item\n     * @param {Scheduler.model.ResourceModel} resourceRecord Record\n     * @param {Boolean} checked Checked or not\n     */\n    //endregion\n    //region Menu handlers\n    getDataFromEvent(event) {\n        const\n            cellElement = event.target.closest('.b-resourceheader-cell'),\n            resourceId  = cellElement?.dataset.resourceId;\n        // Only yield data to show a menu if we are on a cell\n        if (resourceId) {\n            const resourceRecord = this.client.resourceStore.getById(resourceId);\n            return {\n                cellElement,\n                resourceRecord\n            };\n        }\n    }\n    //endregion\n    //region Getters/Setters\n    populateResourceMenu({ items, resourceRecord }) {\n        const { client } = this;\n        if (!client.readOnly) {\n            items.remove = {\n                text        : 'L{CellMenu.removeRow}',\n                localeClass : this,\n                icon        : 'b-fw-icon b-icon-trash',\n                cls         : 'b-separator',\n                weight      : 100,\n                disabled    : resourceRecord.readOnly,\n                onItem      : () => client.resourceStore.remove(resourceRecord)\n            };\n        }\n    }\n    get showMenu() {\n        return true;\n    }\n    //endregion\n}\nResourceMenu.featureClass = '';\nResourceMenu._$name = 'ResourceMenu'; GridFeatureManager.registerFeature(ResourceMenu, false, ['Scheduler']);\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport ResourceTimeRangesBase from './base/ResourceTimeRangesBase.js';\nimport ResourceTimeRangeStore from '../data/ResourceTimeRangeStore.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\n/**\n * @module Scheduler/feature/ResourceTimeRanges\n */\n/**\n * Feature that draws resource time ranges, shaded areas displayed behind events. These zones are similar to events in\n * that they have a start and end date but different in that they do not take part in the event layout, and they always\n * occupy full row height.\n *\n * {@inlineexample Scheduler/feature/ResourceTimeRanges.js}\n *\n * Each time range is represented by an instances of {@link Scheduler.model.ResourceTimeRangeModel}, held in a\n * {@link Scheduler.data.ResourceTimeRangeStore}. Currently they are readonly UI-wise, but can be manipulated on\n * the data level. To style the rendered elements, use the {@link Scheduler.model.TimeSpan#field-cls} field or use the\n * {@link Scheduler.model.ResourceTimeRangeModel#field-timeRangeColor} field.\n *\n * Data can be provided either using the {@link Scheduler.view.Scheduler#config-resourceTimeRanges} config on the\n * Scheduler config object:\n *\n * ```javascript\n * new Scheduler({\n *     ...\n *    features :  {\n *        resourceTimeRanges : true\n *    },\n *\n *    // Data specified directly on the Scheduler instance\n *    resourceTimeRanges : [\n *        // Either specify startDate & endDate or startDate & duration when defining a range\n *        { startDate : new Date(2019,0,1), endDate : new Date(2019,0,3), name : 'Occupied', timeRangeColor : 'red' },\n *        { startDate : new Date(2019,0,3), duration : 2, durationUnit : 'd', name : 'Available' },\n *    ]\n * })\n * ```\n *\n * Or the {@link Scheduler/view/Scheduler#config-resourceTimeRangeStore} config on the Scheduler config object:\n *\n * ```javascript\n * new Scheduler({\n *     ...\n *     features :  {\n *         resourceTimeRanges : true\n *     },\n *     resourceTimeRangeStore : new ResourceTimeRangeStore({\n *         readUrl : './resourceTimeRanges/'\n *     })\n * })\n * ```\n *\n * Or on the project, using the {@link Scheduler/model/mixin/ProjectModelMixin#config-resourceTimeRangesData} config.\n *\n * This feature is **disabled** by default.\n * For info on enabling it, see {@link Grid/view/mixin/GridFeatures}.\n *\n * ## Recurring ranges support\n *\n * Resource time ranges can also be recurring, as seen in the example below:\n *\n * ```js\n * const resourceTimeRangeStore = new ResourceTimeRangeStore({\n *     data : [{\n *         id             : 1,\n *         resourceId     : 'r1',\n *         startDate      : '2019-01-01T11:00',\n *         endDate        : '2019-01-01T13:00',\n *         name           : 'Lunch',\n *         // this time range will repeat every day\n *         recurrenceRule : 'FREQ=DAILY'\n *     }]\n * });\n *\n * ```\n *\n * ## Rendering custom HTML markup\n *\n * Sometimes it is handy to be able to output custom HTML into the range elements. This can be done using the\n * {@link Scheduler/view/Scheduler#function-resourceTimeRangeRenderer} method.\n *\n * ```javascript\n * // You can use a custom renderer method to output the contents of the range elements. The return value should\n * // be a string or a DOMConfig object defining the markup to generate\n * new Scheduler({\n *     resourceTimeRangeRenderer{ resourceTimeRangeRecord, resourceRecord, renderData }) {\n *         if (resourceTimeRangeRecord.important) {\n *             // Add a CSS class to the range element\n *             renderData.cls.important = 1;\n *\n *             return [\n *                 {\n *                     tag   : 'i',\n *                     class : 'b-fa b-fa-warning'\n *                 },\n *                 {\n *                     tag  : 'strong',\n *                     text : resourceTimeRangeRecord.name\n *                 }\n *             ];\n *         }\n *         return resourceTimeRangeRecord.name;\n *     }\n * })\n * ```\n *\n * @extends Scheduler/feature/base/ResourceTimeRangesBase\n * @demo Scheduler/resourcetimeranges\n * @classtype resourceTimeRanges\n * @feature\n */\nexport default class ResourceTimeRanges extends ResourceTimeRangesBase {\n    //region Config\n    static $name = 'ResourceTimeRanges';\n    static configurable = {\n        rangeCls : 'b-sch-resourcetimerange',\n        /**\n         * Set to `true` to allow mouse interactions with the rendered range elements. By default, the range elements\n         * are not reachable with the mouse, and only serve as a static background.\n         * @prp {Boolean}\n         * @default\n         */\n        enableMouseEvents : false,\n        /**\n         * Specify value to use for the tabIndex attribute of resource time range elements\n         * @config {Number}\n         * @default\n         */\n        tabIndex : 0,\n        entityName : 'resourceTimeRange'\n    };\n    static get pluginConfig() {\n        const superConfig = super.pluginConfig;\n        return {\n            ...superConfig,\n            assign : ['resolveResourceTimeRangeRecord', 'getElementFromResourceTimeRangeRecord']\n        };\n    }\n    //endregion\n    //region Init\n    attachToProject(project) {\n        const\n            me                     = this,\n            { client : scheduler } = me;\n        super.attachToProject(project);\n        if (!project.resourceTimeRangeStore) {\n            project.resourceTimeRangeStore = scheduler.resourceTimeRangeStore || new ResourceTimeRangeStore({\n                owner : me\n            });\n            const { crudManager } = scheduler;\n            if (crudManager && !crudManager.resourceTimeRangeStore) {\n                crudManager.resourceTimeRangeStore = project.resourceTimeRangeStore;\n            }\n        }\n        const store = project.resourceTimeRangeStore;\n        if (!me.exposedOnScheduler) {\n            // ResourceZones can be set on scheduler or feature, for convenience\n            if (scheduler.resourceTimeRanges) {\n                store.add(scheduler.resourceTimeRanges);\n                delete scheduler.resourceTimeRanges;\n            }\n            // expose getter/setter for resourceTimeRanges on scheduler\n            Object.defineProperty(scheduler, 'resourceTimeRanges', {\n                get : () => store.records,\n                set : resourceTimeRanges => store.data = resourceTimeRanges\n            });\n            me.exposedOnScheduler = true;\n        }\n        // Link to projects resourceStore if not already linked to one\n        if (!store.resourceStore) {\n            store.resourceStore = project.resourceStore;\n        }\n        me.detachListeners('store');\n        store.ion({\n            name    : 'store',\n            change  : me.onStoreChange,\n            thisObj : me\n        });\n    }\n    // Called by ProjectConsumer after a new store is assigned at runtime\n    attachToResourceTimeRangeStore(store) {\n        this.attachToProject(this.project);\n        this.client.refresh();\n    }\n    get store() {\n        return this.project.resourceTimeRangeStore;\n    }\n    //endregion\n    //region Events\n    /**\n     * Triggered for mouse down ona resource time range. Only triggered if the ResourceTimeRange feature is configured\n     * with `enableMouseEvents: true`.\n     * @event resourceTimeRangeMouseDown\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Scheduler.feature.ResourceTimeRanges} feature The ResourceTimeRange feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n    /**\n     * Triggered for mouse up ona resource time range. Only triggered if the ResourceTimeRange feature is configured\n     * with `enableMouseEvents: true`.\n     * @event resourceTimeRangeMouseUp\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Scheduler.feature.ResourceTimeRanges} feature The ResourceTimeRange feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n    /**\n     * Triggered for click on a resource time range. Only triggered if the ResourceTimeRange feature is configured with\n     * `enableMouseEvents: true`.\n     * @event resourceTimeRangeClick\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Scheduler.feature.ResourceTimeRanges} feature The ResourceTimeRange feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n    /**\n     * Triggered for double-click on a resource time range. Only triggered if the ResourceTimeRange feature is configured\n     * with `enableMouseEvents: true`.\n     * @event resourceTimeRangeDblClick\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Scheduler.feature.ResourceTimeRanges} feature The ResourceTimeRange feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n    /**\n     * Triggered for right-click on a resource time range. Only triggered if the ResourceTimeRange feature is configured\n     * with `enableMouseEvents: true`.\n     * @event resourceTimeRangeContextMenu\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Scheduler.feature.ResourceTimeRanges} feature The ResourceTimeRange feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n    /**\n     * Triggered for mouse over on a resource time range. Only triggered if the ResourceTimeRange feature is configured\n     * with `enableMouseEvents: true`.\n     * @event resourceTimeRangeMouseOver\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Scheduler.feature.ResourceTimeRanges} feature The ResourceTimeRange feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n    /**\n     * Triggered for mouse out of a resource time range. Only triggered if the ResourceTimeRange feature is configured\n     * with `enableMouseEvents: true`.\n     * @event resourceTimeRangeMouseOut\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Scheduler.feature.ResourceTimeRanges} feature The ResourceTimeRange feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n    //endregion\n    /**\n     * Returns a resource time range record from the passed element\n     * @param {HTMLElement} rangeElement\n     * @returns {Scheduler.model.ResourceTimeRangeModel}\n     * @on-owner\n     * @function resolveResourceTimeRangeRecord\n     * @category DOM\n     */\n    /**\n     * Returns the element for the passed resource time range record, if rendered into DOM.\n     * @param {Scheduler.model.ResourceTimeRangeModel} record\n     * @returns {HTMLElement}\n     * @on-owner\n     * @function getElementFromResourceTimeRangeRecord\n     * @category DOM\n     */\n    // Called on render of resources events to get events to render. Add any ranges\n    // (chained function from Scheduler)\n    getEventsToRender(resource, events) {\n        if (!this.disabled) {\n            const { timeRanges } = resource.$original;\n            // if we have ranges and the feature is enabled\n            if (timeRanges?.length) {\n                const { startDate, endDate } = this.client;\n                timeRanges.forEach(timeRange => {\n                    // if this a recurring event let's include its visible occurrences\n                    if (timeRange.isRecurring) {\n                        events.push(...timeRange.getOccurrencesForDateRange(startDate, endDate));\n                    }\n                    else {\n                        events.push(timeRange);\n                    }\n                });\n            }\n        }\n        return events;\n    }\n    /**\n     * An empty function by default, but provided so that you can override it. This function is called each time\n     * a resource time range is rendered into the schedule. It's called with `resourceTimeRangeRecord`, `resourceRecord`,\n     * and `renderData` params.\n     *\n     * **IMPORTANT:** You should never modify any data on the ResourceTimeRangeModel inside this method.\n     *\n     * By default, the DOM markup of a resource time range bar includes placeholders for 'cls' and 'style'. The cls\n     * property is a {@link Core.helper.util.DomClassList} which will be added to the main element. The style property\n     * is an inline style declaration for the main element.\n     *\n     * **IMPORTANT:** When returning content, be sure to consider how that content should be encoded to avoid XSS\n     * (Cross-Site Scripting) attacks. This is especially important when including user-controlled data such as\n     * the event's `name`. The function {@link Core.helper.StringHelper#function-encodeHtml-static} as well as\n     * {@link Core.helper.StringHelper#function-xss-static} can be helpful in these cases.\n     *\n     * ```javascript\n     * resourceTimeRangeRenderer({ resourceTimeRangeRecord, resourceRecord, renderData }) {\n     *     renderData.style = 'color:white'; // You can use inline styles too.\n     *\n     *     // Property names with truthy values are added to the resulting elements CSS class.\n     *     renderData.cls.isModified = resourceTimeRangeRecord.isModified;\n     *\n     *     // Or, you can treat it as a string, but this is less efficient, especially\n     *     // if your renderer wants to *remove* classes that may be there.\n     *     renderData.cls += ' extra-class';\n     *\n     *     return StringHelper.xss`${DateHelper.format(resourceTimeRangeRecord.startDate, 'YYYY-MM-DD')}:\n     *     ${resourceTimeRangeRecord.name}`;\n     * }\n     * ```\n     * @method resourceTimeRangeRenderer\n     * @param {Object} detail An object containing the information needed to render a ResourceTimeRangeModel.\n     * @param {Scheduler.model.ResourceTimeRangeModel} detail.resourceTimeRangeRecord The resource time range record.\n     * @param {Scheduler.model.ResourceModel} detail.resourceRecord The resource record.\n     * @param {Object} detail.renderData An object containing details about the event rendering.\n     * @returns {String|DomConfig|DomConfig[]} A simple string, or a DomConfig object describing the markup\n     * @on-owner\n     */\n    shouldInclude(eventRecord) {\n        return eventRecord.isResourceTimeRange && !eventRecord.isNonWorking && !eventRecord.isCalendarHighlightModel;\n    }\n    renderContent(eventRecord, renderData) {\n        const\n            { client }       = this,\n            { eventContent } = renderData;\n        // Add label or call renderer method\n        if (client.resourceTimeRangeRenderer) {\n            // User has specified a renderer fn, either to return a simple string, or an object intended for the eventBodyTemplate\n            const\n                value = client.resourceTimeRangeRenderer({\n                    resourceTimeRangeRecord : eventRecord,\n                    resourceRecord          : renderData.resourceRecord,\n                    renderData\n                });\n            // Array, assumed to contain DOM configs for eventContent children (or milestone label)\n            if (Array.isArray(value)) {\n                eventContent.children = value;\n            }\n            // Likely HTML content\n            else if (StringHelper.isHtml(value)) {\n                eventContent.children = null;\n                eventContent.html     = value;\n            }\n            // DOM config or plain string can be used as is\n            else if (typeof value === 'string' || typeof value === 'object') {\n                eventContent.children = [value];\n            }\n            // Other, use string\n            else if (value != null) {\n                eventContent.text = value;\n            }\n        }\n        else {\n            super.renderContent(...arguments);\n        }\n    }\n    doDestroy() {\n        if (this.store?.owner === this) {\n            this.store.destroy();\n        }\n        super.doDestroy();\n    }\n}\n// No feature based styling needed, do not add a cls to Scheduler\nResourceTimeRanges.featureClass = '';\nResourceTimeRanges._$name = 'ResourceTimeRanges'; GridFeatureManager.registerFeature(ResourceTimeRanges, false, 'Scheduler');\n", "import GridRowResize from '../../Grid/feature/RowResize.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\n/**\n * @module Scheduler/feature/RowResize\n */\n/**\n * Enables user to change row height by dragging the bottom row border. After a resize operation, the {@link Grid/data/GridRowModel#field-rowHeight}\n * field of the record is updated (when {@link #config-applyToAllRows} is `false`) and the {@link Scheduler/model/ResourceModel#field-eventLayout} of the dragged resource\n * row will be switched to `pack` as a result (only applies when `stack` is used by default).\n * `barMargin` and `resourceMargin` will also be shrunk as you reduce the height of a row.\n *\n * Try hovering the bottom row border in the scheduler below and use drag-drop to change the row height.\n *\n * {@inlineexample Scheduler/feature/RowResize.js}\n *\n * This feature is **disabled** by default.\n * For info on enabling it, see {@link Grid/view/mixin/GridFeatures}.\n *\n * @extends Grid/feature/RowResize\n * @classtype rowResize\n * @feature\n * @demo Scheduler/rowheight\n * @typings Grid.feature.RowResize -> Grid.feature.GridRowResize\n */\nexport default class RowResize extends GridRowResize {\n    static $name = 'RowResize';\n    onResizeStart({ context }) {\n        super.onResizeStart(...arguments);\n        const\n            { client } = this,\n            { record } = context;\n        if (client.isTimelineBase) {\n            client.suspendAnimations();\n            client.crudManager?.suspendAutoSync?.();\n            if (client.features.eventDragCreate) {\n                this._oldDragCreateDisabled = client.features.eventDragCreate.disabled;\n                client.features.eventDragCreate.disabled = true;\n            }\n        }\n        if (client.isSchedulerBase) {\n            if (client.getEventLayout?.(record).type === 'stack') {\n                context.oldEventLayout = record.eventLayout;\n                record.eventLayout     = 'pack';\n                record.rowHeight       = context.elementHeight;\n            }\n            context.originalBarMargin = client.getBarMargin(record);\n            context.originalResourceMarginObject = client.getResourceMarginObject(record);\n            context.originalRecordResourceMargin = record.resourceMargin;\n        }\n    }\n    onResizing({ context }) {\n        const { record, newHeight, elementHeight, originalBarMargin, originalResourceMarginObject } = context;\n        super.onResizing(...arguments);\n        if (!this.applyToAllRows && !this.client.fixedRowHeight && context.valid) {\n            record.beginBatch();\n            record.rowHeight = newHeight;\n            // Reduce barMargin + resourceMargin when shrinking\n            if (newHeight < elementHeight) {\n                const percentage = newHeight / elementHeight;\n                // Shrink barMargin + resourceMargin as well\n                record.barMargin = originalBarMargin * percentage;\n                if (originalResourceMarginObject.start === originalResourceMarginObject.end) {\n                    record.resourceMargin = originalResourceMarginObject.start * percentage;\n                }\n            }\n            record.endBatch();\n        }\n    }\n    onCancel({ context }) {\n        context.record.eventLayout = context.oldEventLayout;\n        context.record.resourceMargin = context.originalRecordResourceMargin;\n        context.record.barMargin = context.originalBarMargin;\n        super.onCancel(...arguments);\n    }\n    cleanup() {\n        const { client } = this;\n        if (client.isTimelineBase) {\n            client.resumeAnimations();\n            client.crudManager?.resumeAutoSync?.();\n            if (client.features.eventDragCreate) {\n                client.features.eventDragCreate.disabled = this._oldDragCreateDisabled;\n            }\n        }\n        super.cleanup();\n    }\n}\nRowResize._$name = 'RowResize'; GridFeatureManager.registerFeature(RowResize, false);\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport Editor from '../../Core/widget/Editor.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport TaskEditStm from './mixin/TaskEditStm.js';\n/**\n * @module Scheduler/feature/SimpleEventEdit\n */\n/**\n * Feature that displays a text field to edit the event name. You can control the flow of this by listening to the events relayed by this class from the underlying {@link Core.widget.Editor}.\n * To use this feature, you also need to disable the built-in default editing feature:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     features : {\n *         eventEdit       : false,\n *         simpleEventEdit : true\n *     }\n * });\n * ```\n *\n * This feature is **disabled** by default.\n * For info on enabling it, see {@link Grid.view.mixin.GridFeatures}.\n *\n * {@inlineexample Scheduler/feature/SimpleEventEdit.js}\n *\n * @demo Scheduler/simpleeditor\n *\n * @extends Core/mixin/InstancePlugin\n * @classtype simpleEventEdit\n * @feature\n */\nexport default class SimpleEventEdit extends InstancePlugin.mixin(TaskEditStm) {\n    // region Events\n    /**\n     * Fired before the editor is shown to start an edit operation. Returning `false` from a handler vetoes the edit operation.\n     * @event beforeStart\n     * @param {Object} value The value to be edited.\n     * @param {Core.widget.Editor} source The Editor that triggered the event.\n     * @preventable\n     */\n    /**\n     * Fired when an edit operation has begun.\n     * @event start\n     * @param {Object} value The starting value of the field.\n     * @param {Core.widget.Editor} source The Editor that triggered the event.\n     */\n    /**\n     * Fired when an edit completion has been requested, either by `ENTER`, or focus loss (if configured to complete on blur).\n     * The completion may be vetoed, in which case, focus is moved back into the editor.\n     * @event beforeComplete\n     * @param {Object} oldValue The original value.\n     * @param {Object} value The new value.\n     * @param {Core.widget.Editor} source The Editor that triggered the event.\n     * @preventable\n     */\n    /**\n     * Edit has been completed, and any associated record or element has been updated.\n     * @event complete\n     * @param {Object} oldValue The original value.\n     * @param {Object} value The new value.\n     * @param {Core.widget.Editor} source The Editor that triggered the event.\n     */\n    /**\n     * Fired when cancellation has been requested, either by `ESC`, or focus loss (if configured to cancel on blur).\n     * The cancellation may be vetoed, in which case, focus is moved back into the editor.\n     * @event beforeCancel\n     * @param {Object} oldValue The original value.\n     * @param {Object} value The new value.\n     * @param {Core.widget.Editor} source The Editor that triggered the event.\n     * @preventable\n     */\n    /**\n     * Edit has been canceled without updating the associated record or element.\n     * @event cancel\n     * @param {Object} oldValue The original value.\n     * @param {Object} value The value of the field.\n     * @param {Core.widget.Editor} source The Editor that triggered the event.\n     */\n    // endregion\n    //region Config\n    static get $name() {\n        return 'SimpleEventEdit';\n    }\n    static get defaultConfig() {\n        return {\n            /**\n             * The event that shall trigger showing the editor. Defaults to `eventdblclick`, set to `''` or null to\n             * disable editing of existing events.\n             * @config {String}\n             * @default\n             * @category Editor\n             */\n            triggerEvent : 'eventdblclick',\n            /**\n             * The current {@link Scheduler.model.EventModel} record, which is being edited by the event editor.\n             * @property {Scheduler.model.EventModel}\n             * @readonly\n             */\n            eventRecord : null,\n            /**\n             * The {@link Scheduler.model.EventModel} field to edit\n             * @config {String}\n             * @category Editor\n             */\n            field : 'name',\n            /**\n             * The editor configuration, where you can control which widget to show\n             * @config {EditorConfig}\n             * @category Editor\n             */\n            editorConfig : null\n        };\n    }\n    static get pluginConfig() {\n        return {\n            chain : ['onEventEnterKey', 'editEvent']\n        };\n    }\n    //endregion\n    //region Editing\n    construct(scheduler, config) {\n        const me = this;\n        me.scheduler = scheduler;\n        scheduler.eventEdit = me;\n        super.construct(scheduler, config);\n        me.clientListenersDetacher = scheduler.ion({\n            [me.triggerEvent] : ({ eventRecord, eventElement }) => me.editEvent(eventRecord, eventRecord.resource, eventElement),\n            dragcreateend     : me.onDragCreateEnd,\n            thisObj           : me\n        });\n    }\n    doDestroy() {\n        this.clientListenersDetacher();\n        this.editor?.destroy();\n        super.doDestroy();\n    }\n    get eventStore() {\n        return this.scheduler.eventStore;\n    }\n    get project() {\n        return this.client.project;\n    }\n    // region Editor\n    /**\n     * Opens an Editor for the passed event. This function is exposed on Scheduler and can be called as\n     * `scheduler.editEvent()`.\n     * @param {Scheduler.model.EventModel} eventRecord The Event to edit\n     * @param {Scheduler.model.ResourceModel} [resourceRecord] The Resource record for the event.\n     * @on-owner\n     * @async\n     */\n    async editEvent(eventRecord, resourceRecord, element, stmCapture) {\n        const\n            me            = this,\n            { scheduler } = me,\n            { eventEdit } = me.client.features;\n        // If event edit feature also exists, we use simple edit for new events and eventEdit it for already created events\n        if (scheduler.readOnly || me.disabled || eventRecord.readOnly || (eventEdit && !eventEdit.disabled && !eventRecord.isCreating)) {\n            return;\n        }\n        let { editor } = me;\n        // Want to put editor in inner element (b-sch-event) to get correct font size, but when drag creating the proxy\n        // has no inner element\n        element = DomHelper.down(element, scheduler.eventInnerSelector) || element;\n        eventRecord = eventRecord.isAssignment ? eventRecord.event : eventRecord;\n        me.resource = resourceRecord;\n        me.event    = eventRecord;\n        me.element  = element;\n        scheduler.element.classList.add('b-eventeditor-editing');\n        if (editor) {\n            // Positioned editors remove themselves so that their appendTo element\n            // may have its content updated unobstructed.\n            editor.render(scheduler.timeAxisSubGridElement);\n        }\n        else {\n            // Editor is contained in, and owned by the TimeAxisSubGrid to avoid focus flipping out and in.\n            // The editor is an owned descendant of the SubGrid.\n            me.editor = editor = Editor.new({\n                owner        : scheduler.timeAxisSubGrid,\n                appendTo     : scheduler.timeAxisSubGridElement,\n                scrollAction : 'realign',\n                maxHeight    : 40,\n                align        : {\n                    align : scheduler.isHorizontal ? 'c-c' : 't-t'\n                },\n                cls               : 'b-simpleeventeditor',\n                internalListeners : {\n                    complete : 'onEditorComplete',\n                    cancel   : 'onEditorCancel',\n                    thisObj  : me\n                },\n                // Keys must not propagate into the scheduler\n                onInternalKeyDown : keyEvent => keyEvent.stopPropagation()\n            }, me.editorConfig);\n            me.relayEvents(me.editor, ['beforestart', 'start', 'beforecomplete', 'complete', 'beforecancel', 'cancel']);\n        }\n        if (stmCapture) {\n            me.stmInitiallyAutoRecord = stmCapture.stmInitiallyAutoRecord;\n            me.stmInitiallyDisabled = stmCapture.stmInitiallyDisabled;\n            me.hasStmCapture = true;\n            // indicate that editor has been opened, and is now managing the \"stm capture\"\n            stmCapture.transferred = true;\n        }\n        // it is set to `false` by calendar, to ignore the STM mechanism\n        else if (stmCapture !== false && !me.hasStmCapture) {\n            me.captureStm(true);\n        }\n        // Drag-created records get a \"New event\" name for cosmetic purposes.\n        // Remove just before editing.\n        if (eventRecord.isCreating) {\n            eventRecord.name = '';\n        }\n        await editor.startEdit({\n            target : element,\n            record : eventRecord,\n            field  : me.field\n        });\n        // If text label is not visible, scroll it into view\n        if (scheduler.isVertical && eventRecord.startDate < scheduler.visibleDateRange.startDate) {\n            editor.element.scrollIntoView();\n        }\n        // No key navigation during editing\n        scheduler.navigator.disabled = true;\n    }\n    onEditorComplete() {\n        // Promote event to being permanent so that it is syncable to the server as a new event\n        this.event.isCreating = false;\n        this.reset();\n        this.freeStm(true);\n    }\n    onEditorCancel() {\n        // Remove the transient event\n        if (this.event.isCreating) {\n            this.event.remove();\n        }\n        this.reset();\n        this.freeStm(false);\n    }\n    reset() {\n        this.scheduler.element.classList.remove('b-eventeditor-editing');\n        // Restore key navigation after editing\n        this.scheduler.navigator.disabled = false;\n        this.event                        = null;\n        this.resource                     = null;\n    }\n    //endregion\n    // chained from EventNavigation\n    onEventEnterKey({ assignmentRecord, eventRecord }) {\n        const\n            element        = assignmentRecord ? this.scheduler.getElementFromAssignmentRecord(assignmentRecord) : this.scheduler.getElementFromEventRecord(eventRecord),\n            resourceRecord = (assignmentRecord || eventRecord).resource;\n        this.editEvent(eventRecord, resourceRecord, element);\n    }\n    //endregion\n    onDragCreateEnd({ eventRecord, resourceRecord, eventElement, stmCapture }) {\n        this.element = eventElement;\n        this.editEvent(eventRecord, resourceRecord, eventElement, stmCapture);\n    }\n}\nSimpleEventEdit._$name = 'SimpleEventEdit'; GridFeatureManager.registerFeature(SimpleEventEdit, false, 'Scheduler');\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport GridSplit from '../../Grid/feature/Split.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\n/**\n * @module Scheduler/feature/Split\n */\nconst\n    startScrollOptions = Object.freeze({\n        animate : false,\n        block   : 'start'\n    }),\n    endScrollOptions = Object.freeze({\n        animate : false,\n        block   : 'end'\n    });\n/**\n * This feature allows splitting the Scheduler into multiple views, either by using the cell context menu, or\n * programmatically by calling {@link #function-split split()}.\n *\n * {@inlineexample Scheduler/feature/Split.js}\n *\n * See {@link Grid/feature/Split} for more details.\n *\n * ## Scheduler specifics\n *\n * - Scheduler allows splitting by dates, either programmatically or by using the context menu.\n * - Scheduler prevents splitting in the grid part using the context menu.\n * - The `eventDrag` feature will automatically be configured to allow dragging between the clones (by setting\n *   `constrainDragToTimeline` to `false`).\n * - Splitting is not supported in vertical mode.\n *\n * {@note}\n * Note that although Gantt is related to Scheduler, splitting is not supported in Gantt.\n * {/@note}\n *\n * This feature is **disabled** by default.\n * For info on enabling it, see {@link Grid/view/mixin/GridFeatures}.\n *\n * @classtype split\n * @feature\n * @extends Grid/feature/Split\n *\n * @typings Grid.feature.Split -> Grid.feature.GridSplit\n */\nexport default class Split extends GridSplit {\n    static $name = 'Split';\n    static configurable = {\n        /**\n         * Properties whose changes should be relayed to sub-views at runtime.\n         *\n         * Supply an object with property names as keys, and a truthy value to relay the change, or a falsy value to not\n         * relay it. The object will be merged with the default values.\n         *\n         * In addition to the properties relayed by Grid, Scheduler also relays these:\n         * * {@link Scheduler/view/Scheduler#property-barMargin}\n         * * {@link Scheduler/view/Scheduler#property-eventColor}\n         * * {@link Scheduler/view/Scheduler#property-eventStyle}\n         * * {@link Scheduler/view/Scheduler#property-eventLayout}\n         * * {@link Scheduler/view/Scheduler#property-fillTicks}\n         * * {@link Scheduler/view/Scheduler#property-resourceMargin}\n         * * {@link Scheduler/view/Scheduler#property-snap}\n         * * {@link Scheduler/view/Scheduler#property-tickSize}\n         *\n         * Example of supplying a custom set of properties to relay:\n         * ```javascript\n         * const scheduler = new Scheduler({\n         *     features : {\n         *         split : {\n         *             relayProperties : {\n         *                 barMargin : false, // Do not relay barMargin changes\n         *                 myConfig : true   // Relay changes to the myConfig property\n         *             }\n         *         }\n         *     }\n         * }\n         * ```\n         * @config {Object<String,Boolean>}\n         */\n        relayProperties : {\n            value : {\n                barMargin      : 1,\n                eventColor     : 1,\n                eventStyle     : 1,\n                eventLayout    : 1,\n                fillTicks      : 1,\n                resourceMargin : 1,\n                snap           : 1,\n                tickSize       : 1\n            },\n            $config : {\n                merge : 'merge'\n            }\n        }\n    };\n    static pluginConfig = {\n        chain  : ['populateCellMenu', 'populateScheduleMenu', 'afterConfigChange', 'afterAddListener', 'afterRemoveListener'],\n        assign : ['split', 'unsplit', 'subViews', 'syncSplits']\n    };\n    getClientConfig(appendTo, order, options, config) {\n        const\n            { client }   = this,\n            clientConfig = super.getClientConfig(appendTo, order, options, config);\n        // Grid demo in Schedulers docs\n        if (!client.isSchedulerBase && !client.isSchedulerProBase && !client.isGanttBase) {\n            return clientConfig;\n        }\n        // Use project instead of store / inline data\n        delete clientConfig.store;\n        delete clientConfig.events;\n        delete clientConfig.resources;\n        delete clientConfig.assignments;\n        delete clientConfig.dependencies;\n        delete clientConfig.resourceTimeRanges;\n        delete clientConfig.timeRanges;\n        clientConfig.project = client.project;\n        clientConfig.assignmentStore = clientConfig.project.assignmentStore;\n        clientConfig.crudManager = client.crudManager;\n        clientConfig.viewPreset = client.viewPreset;\n        clientConfig.startDate = client.startDate;\n        clientConfig.endDate = client.endDate;\n        clientConfig.selectedCollection = client.selectedCollection;\n        clientConfig.useInitialAnimation = false;\n        // Allow dragging between the clones, unless drag is explicitly turned off\n        if (clientConfig.features?.eventDrag !== false) {\n            ObjectHelper.setPath(clientConfig, 'features.eventDrag.constrainDragToTimeline', false);\n            client.features.eventDrag.constrainDragToTimeline = false;\n        }\n        return clientConfig;\n    }\n    unsplitCleanup(options) {\n        // Force time axis to get correct width\n        this.client.timeAxisSubGrid.onElementResize();\n    }\n    /**\n     * Fired when splitting the Scheduler.\n     * @event split\n     * @param {Scheduler.view.SchedulerBase[]} subViews The sub views created by the split\n     * @param {Object} options The options passed to the split call\n     * @param {'horizontal'|'vertical'|'both'} options.direction The direction of the split\n     * @param {Grid.column.Column} options.atColumn The column to split at\n     * @param {Core.data.Model} options.atRecord The record to split at\n     * @param {Date} options.atDate The date to split at\n     * @on-owner\n     */\n    processOptions(options) {\n        const { client } = this;\n        let { atDate, atRecord } = options;\n        // Check if center is a date if not given a specific split point\n        if (options.direction !== 'horizontal' && !options.atColumn && !options.atRecord && !atDate) {\n            const\n                bounds = Rectangle.from(client.element),\n                date   = client.getDateFromCoordinate(bounds.center.x, 'round', false);\n            // If it is a date, split at it\n            if (date) {\n                options.atDate = atDate = date;\n                options.atColumn = client.timeAxisColumn;\n            }\n        }\n        // Asked to split at a date, determine split sizes\n        if (atDate) {\n            if (!options.direction) {\n                options.direction = atRecord ? 'both' : 'vertical';\n            }\n            options.splitX = client.getCoordinateFromDate(atDate, { ignoreRTL : true }) - client.timeAxisSubGrid.scrollable.x;\n            if (client.rtl) {\n                options.splitX += client._bodyRectangle.width - Rectangle.from(client.timeAxisSubGridElement).right + DomHelper.scrollBarWidth;\n            }\n            else {\n                options.splitX += Rectangle.from(client.timeAxisSubGridElement, client.bodyContainer).left;\n            }\n            options.remainingWidth = Rectangle.from(client.element).width - options.splitX;\n        }\n        return super.processOptions(options);\n    }\n    /**\n     * Split the scheduler into two or four parts.\n     *\n     * - Splits into two when passed `direction : 'vertical'`, `direction : 'horizontal'` or `atColumn`, `atRecord` or\n     *   `atDate`.\n     * - Splits into four when passed `direction : 'both'` or `atColumn`/`atDate` and `atRecord`.\n     *\n     * ```javascript\n     * // Split horizontally (at the row in the center of the scheduler)\n     * await scheduler.split({ direction : 'horizontal' });\n     *\n     * // Split both ways by a specific date and resource\n     * await schedule.split({\n     *    atRecord : scheduler.resourceStore.getById(10),\n     *    atDate   : new Date(2023, 5, 8)\n     * });\n     * ```\n     *\n     * To return to a single scheduler, call {@link #function-unsplit}.\n     *\n     * Note that this function is callable directly on the scheduler instance.\n     *\n     * @param {Object} [options] Split options\n     * @param {'vertical'|'horizontal'|'both'} [options.direction] Split direction, 'vertical', 'horizontal' or 'both'.\n     * Not needed when passing `atColumn` or `atRecord`.\n     * @param {Date} [options.atDate] Date to split at. Has to be within the time axis\n     * @param {Grid.column.Column} [options.atColumn] Column to split at\n     * @param {Core.data.Model} [options.atRecord] Record to split at\n     * @returns {Promise} Resolves when split is complete, and subviews are scrolled to the correct position.\n     * @async\n     * @on-owner\n     */\n    async split(options = {}) {\n        const { client } = this;\n        if (client.isVertical) {\n            throw new Error('Splitting is not supported in vertical mode');\n        }\n        const result = await super.split(options);\n        if (result && options.atDate) {\n            await Promise.all([\n                // Scroll prev tick into view on left side\n                result[0].scrollToDate(DateHelper.add(options.atDate, -1, client.timeAxis.unit), endScrollOptions),\n                // And current tick into view on right side\n                result[1].scrollToDate(options.atDate, startScrollOptions)\n            ]);\n        }\n        // For whatever reason, the above scroll does not always refresh the timeaxis correctly, have not been able\n        // to track it down so triggering a refresh manually\n        client.timeAxisSubGrid.scrollable.x += 0.5;\n        return result;\n    }\n    //region Context menu\n    // Overwritten to prevent splitting in locked region\n    populateCellMenu() {}\n    populateScheduleMenu({ items, date, record }) {\n        const\n            me            = this,\n            { isSplit }   = me,\n            { splitFrom } = me.client;\n        // Splitting not supported in vertical mode\n        if (!me.disabled && me.client.isHorizontal) {\n            items.splitSchedule = {\n                text        : 'L{split}',\n                localeClass : me,\n                icon        : 'b-icon b-icon-split-vertical',\n                weight      : 500,\n                separator   : true,\n                hidden      : isSplit || splitFrom,\n                menu : {\n                    splitHorizontally : {\n                        text        : 'L{horizontally}',\n                        icon        : 'b-icon b-icon-split-horizontal',\n                        localeClass : me,\n                        weight      : 100,\n                        onItem() {\n                            me.split({ atRecord : record, direction : 'horizontal' }).then();\n                        }\n                    },\n                    splitVertically : {\n                        text        : 'L{vertically}',\n                        icon        : 'b-icon b-icon-split-vertical',\n                        localeClass : me,\n                        weight      : 200,\n                        onItem() {\n                            me.split({ atDate : date }).then();\n                        }\n                    },\n                    splitBoth : {\n                        text        : 'L{both}',\n                        icon        : 'b-icon b-icon-split-both',\n                        localeClass : me,\n                        weight      : 300,\n                        onItem() {\n                            me.split({ atDate : date, atRecord : record, direction : 'both' }).then();\n                        }\n                    }\n                }\n            };\n            items.unsplitSchedule = {\n                text        : 'L{unsplit}',\n                localeClass : me,\n                icon        : 'b-icon b-icon-clear',\n                hidden      : !(isSplit || splitFrom),\n                weight      : 550,\n                onItem() {\n                    (splitFrom || me).unsplit();\n                }\n            };\n        }\n    }\n    //endregion\n}\nSplit._$name = 'Split'; GridFeatureManager.registerFeature(Split, false, 'Scheduler');\n", "import TimelineSummary from './TimelineSummary.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\n/**\n * @module Scheduler/feature/Summary\n */\n/**\n * Defines a summary, used by the Summary and GroupSummary features.\n * @typedef SchedulerSummaryOptions\n * @property {String} label Label for the summary\n * @property {Function} renderer Function to calculate and render the summary value\n * @property {Date} renderer.startDate\n * @property {Date} renderer.endDate\n * @property {Scheduler.data.EventStore} renderer.eventStore\n * @property {Scheduler.data.ResourceStore} renderer.resourceStore\n * @property {Scheduler.model.EventModel[]} events\n * @property {Scheduler.model.ResourceModel[]} resources\n * @property {Core.data.Model} groupRecord\n * @property {String} groupField\n * @property {Object} groupValue\n */\n// noinspection JSClosureCompilerSyntax\n/**\n * A special version of the Grid Summary feature. This feature displays a summary row in the grid footer.\n * For regular columns in the locked section - specify type of summary on columns, available types are:\n * <dl class=\"wide\">\n * <dt>sum <dd>Sum of all values in the column\n * <dt>add <dd>Alias for sum\n * <dt>count <dd>Number of rows\n * <dt>countNotEmpty <dd>Number of rows containing a value\n * <dt>average <dd>Average of all values in the column\n * <dt>function <dd>A custom function, used with store.reduce. Should take arguments (sum, record)\n * </dl>\n * Columns can also specify a summaryRender to format the calculated sum.\n *\n * To summarize events, either provide a {@link #config-renderer} or use {@link #config-summaries}\n *\n * This feature is <strong>disabled</strong> by default.\n *\n * {@inlineexample Scheduler/feature/Summary.js}\n *\n * @demo Scheduler/summary\n *\n * @extends Scheduler/feature/TimelineSummary\n * @classtype summary\n * @feature\n *\n * @typings Grid.feature.Summary -> Grid.feature.GridSummary\n */\nexport default class Summary extends TimelineSummary {\n    //region Config\n    static get $name() {\n        return 'Summary';\n    }\n    static get configurable() {\n        return {\n            /**\n             * Array of summary configs which consists of a label and a {@link #config-renderer} function\n             *\n             * ```javascript\n             * new Scheduler({\n             *     features : {\n             *         summary : {\n             *             summaries : [\n             *                 {\n             *                     label : 'Label',\n             *                     renderer : ({ startDate, endDate, eventStore, resourceStore, events, element }) => {\n             *                         // return display value\n             *                         returns '<div>Renderer output</div>';\n             *                     }\n             *                 }\n             *             ]\n             *         }\n             *     }\n             * });\n             * ```\n             *\n             * @config {SchedulerSummaryOptions[]}\n             */\n            summaries : null,\n            /**\n             * Renderer function for a single time axis tick. Should calculate a sum and return HTML as a result.\n             *\n             * ```javascript\n             * new Scheduler({\n             *     features : {\n             *         summary : {\n             *             renderer : ({ startDate, endDate, eventStore, resourceStore, events, element }) => {\n             *                 // return display value\n             *                 returns '<div>Renderer output</div>';\n             *             }\n             *         }\n             *     }\n             * });\n             * ```\n             *\n             * @param {Object} context Rendering context object\n             * @param {Date} context.startDate Tick start date\n             * @param {Date} context.endDate Tick end date\n             * @param {Scheduler.model.EventModel[]} context.events Events which belong to the group\n             * @param {Scheduler.data.EventStore} context.eventStore Event store\n             * @param {Scheduler.data.ResourceStore} context.resourceStore Resource store\n             * @param {HTMLElement} context.element Summary tick container\n             * @returns {String} Html content\n             * @config {Function}\n             */\n            renderer : null,\n            /**\n             * A config object for the {@link Grid.column.Column} used to contain the summary bar.\n             * @config {GridColumnConfig}\n             */\n            verticalSummaryColumnConfig : null\n        };\n    }\n    // Plugin configuration. This plugin chains some of the functions in Grid.\n    static get pluginConfig() {\n        const config = super.pluginConfig;\n        config.chain.push('bindStore', 'updateEventStore', 'updateResourceStore');\n        return config;\n    }\n    //endregion\n    //region Init\n    construct(scheduler, config) {\n        const me = this;\n        me.scheduler = scheduler;\n        if (scheduler.isVertical) {\n            scheduler.timeAxisSubGrid.resizable = false;\n            config.hideFooters = true;\n            scheduler.add(scheduler.createSubGrid('right'));\n            me.summaryColumn = scheduler.columns.add(ObjectHelper.assign({\n                filterable              : null,\n                region                  : 'right',\n                cellCls                 : 'b-grid-footer b-sch-summarybar',\n                align                   : 'center',\n                sortable                : false,\n                editor                  : false,\n                groupable               : false,\n                htmlEncode              : false,\n                cellMenuItems           : false,\n                enableHeaderContextMenu : false,\n                hidden                  : me.disabled\n            }, me.verticalSummaryColumnConfig))[0];\n        }\n        super.construct(scheduler, config);\n        // Feature might be run from Grid (in docs), should not crash\n        // https://app.assembla.com/spaces/bryntum/tickets/6801/details\n        if (scheduler.isSchedulerBase) {\n            me.updateEventStore(scheduler.eventStore);\n            me.updateResourceStore(scheduler.resourceStore);\n        }\n    }\n    //endregion\n    //region Render\n    updateEventStore(eventStore) {\n        this.detachListeners('summaryEventStore');\n        eventStore.ion({\n            name    : 'summaryEventStore',\n            filter  : 'updateTimelineSummaries',\n            thisObj : this\n        });\n    }\n    updateResourceStore(resourceStore) {\n        this.detachListeners('summaryResourceStore');\n        resourceStore.ion({\n            name    : 'summaryResourceStore',\n            filter  : 'updateTimelineSummaries',\n            thisObj : this\n        });\n    }\n    /**\n     * Updates summaries.\n     * @private\n     */\n    updateTimelineSummaries() {\n        const\n            me                       = this,\n            { client : timeline }    = me,\n            { eventStore, timeAxis } = timeline,\n            summaryContainer         = me.summaryBarElement,\n            forResources             = (me.selectedOnly && timeline.selectedRecords.length)\n                ? timeline.selectedRecords : timeline.resourceStore.records;\n        if (summaryContainer && timeline.isEngineReady) {\n            // group events by ticks info once here to avoid performance lags\n            // should be inside `scheduler.isEngineReady` check to make sure all events were calculated\n            // https://github.com/bryntum/support/issues/2977\n            const eventsByTick = timeline.getResourcesEventsPerTick(forResources, ({ event }) => {\n                return !eventStore.isFiltered || eventStore.records.includes(event);\n            });\n            Array.from(summaryContainer.children).forEach((element, i) => {\n                const\n                    tick   = timeAxis.getAt(i),\n                    events = eventsByTick[i] || [];\n                let html    = '',\n                    tipHtml = `<header>${me.L('L{Summary for}', timeline.getFormattedDate(tick.startDate))}</header>`;\n                me.summaries.forEach(config => {\n                    const value     = config.renderer({\n                            startDate     : tick.startDate,\n                            endDate       : tick.endDate,\n                            resourceStore : timeline.resourceStore,\n                            eventStore,\n                            events,\n                            element\n                        }),\n                        valueHtml = value ? `<div class=\"b-timeaxis-summary-value\">${value}</div>` : '';\n                    if (me.summaries.length > 1 || value) {\n                        html += valueHtml;\n                    }\n                    tipHtml += valueHtml ? (`<label>${config.label || ''}</label>` + valueHtml) : '';\n                });\n                element.innerHTML = html;\n                // Only show tooltips for summary cells with content\n                element._tipHtml  = html ? tipHtml : '';\n            });\n        }\n    }\n}\n// Override Grids Summary with this improved version\nSummary._$name = 'Summary'; GridFeatureManager.registerFeature(Summary, false, 'Scheduler');\n", "import AbstractTimeRanges from './AbstractTimeRanges.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\n/**\n * @module Scheduler/feature/TimeSelection\n */\n/**\n * Feature that allows selection of a time span in the time axis header. When a time span is selected in the header,\n * a {@link #event-timeSelectionChange} event is fired.\n *\n * {@inlineexample Scheduler/feature/TimeSelection.js}\n *\n * ## Configuration\n *\n * You can configure the content of the header element using the {@link #config-headerRenderer} function.\n *\n * <div class=\"note\">Not compatible with the {@link Scheduler/feature/HeaderZoom} feature.</div>\n *\n * This feature is **disabled** by default.\n * For info on enabling it, see {@link Grid/view/mixin/GridFeatures}.\n *\n * @extends Scheduler/feature/AbstractTimeRanges\n * @demo Scheduler/time-selection\n * @classtype timeSelection\n * @feature\n */\nexport default class TimeSelection extends AbstractTimeRanges {\n    //region Default config\n    static $name = 'TimeSelection';\n    /** @hideconfigs enableResizing, showTooltip, dragTipTemplate, cls, showHeaderElements */\n    /** @hideproperties showHeaderElements, timeRanges */\n    /** @hidefunctions getTipHtml, shouldRenderRange */\n    static get configurable() {\n        return {\n            enableResizing   : true,\n            showTooltip      : false,\n            dragTipTemplate  : null,\n            cls              : 'b-selected-time-span',\n            dragHelperConfig : {\n                // Data will be updated on drag, no need for DragHelper to touch the element\n                skipUpdatingElement : true\n            },\n            resizeHelperConfig : {\n                // Data will be updated on resize, no need for ResizeHelper to touch the element\n                skipUpdatingElement : true\n            },\n            /**\n             * Template used to generate the tooltip contents when hovering the time selection header element.\n             *\n             * ```javascript\n             * const scheduler = new Scheduler({\n             *   features : {\n             *     timeSelection : {\n             *       tooltipTemplate({ startDate, endDate }) {\n             *           const count = this.client.getAvailableResources(startDate, endDate).length;\n             *           return `${count || 'No'} available resource(s)`;\n             *       }\n             *     }\n             *   }\n             * });\n             * ```\n             *\n             * @config {Function} tooltipTemplate\n             * @param {Object} data Tooltip data\n             * @param {Date} data.startDate\n             * @param {Date} data.endDate\n             * @returns {String} String representing the HTML markup\n             * @category Common\n             */\n            /**\n             * Function used to generate the HTML content for the selected time span's header element.\n             *\n             * If you want to include an icon or similar to clear the selection on click, make sure to set\n             * `date-ref=\"closeButton\"` on it.\n             *\n             * ```javascript\n             * const scheduler = new Scheduler({\n             *     features : {\n             *         timeSelection : {\n             *             headerRenderer({ timeRange }) {\n             *                 return `\n             *                     ${DateHelper.format(timeRange.startDate, 'LL')}\n             *                     <div class=\"close\" data-ref=\"closeButton></div>\n             *                 `;\n             *             }\n             *         }\n             *     }\n             * });\n             * ```\n             * @config {Function} headerRenderer\n             * @param {Object} data Render data\n             * @param {Object} data.timeRange\n             * @param {Date} data.timeRange.startDate\n             * @param {Date} data.timeRange.endDate\n             * @returns {String}\n             * @category Common\n             */\n            headerRenderer({ timeRange }) {\n                const { dateFormat } = this.client.timeAxisViewModel.bottomHeader;\n                return `<span class=\"b-selection-start\">${DateHelper.format(timeRange.startDate, dateFormat)}</span>\n                        <span class=\"b-selection-end\">${DateHelper.format(timeRange.endDate, dateFormat)}</span>\n                        <i class='b-icon b-icon-close' data-ref=\"closeButton\" data-btip=\"L{Popup.close}\"></i>`;\n            },\n            /**\n             * The selected time span, which can be set using simple `startDate` and `endDate` properties\n             * @prp {Object} selectedTimeSpan\n             * @param {Date} selectedTimeSpan.startDate The start date of the selected time span\n             * @param {Date} selectedTimeSpan.endDate The end date of the selected time span\n             */\n            selectedTimeSpan : null\n        };\n    }\n    //endregion\n    //region Init & destroy\n    onUIReady() {\n        const me = this;\n        super.onUIReady();\n        if (me.hoverTooltip) {\n            me.hoverTooltip.getHtml = () => {\n                return me.tooltipTemplate({ ...me.selectedTimeSpan });\n            };\n        }\n        me.client.ion({\n            timeAxisHeaderMouseDown : 'onTimeAxisHeaderMouseDown',\n            thisObj                 : me\n        });\n    }\n    onTimeAxisHeaderMouseDown({ startDate, endDate }) {\n        if (!this.disabled) {\n            this.selectedTimeSpan = {\n                startDate,\n                endDate\n            };\n        }\n    }\n    onTimeRangeClick(event) {\n        super.onTimeRangeClick(event);\n        const me = this;\n        if (!me.disabled && event.target.closest('.b-selected-time-span')) {\n            if (event.target.matches('[data-ref=\"closeButton\"]')) {\n                me.selectedTimeSpan = null;\n            }\n            else {\n                /**\n                 * Triggered when clicking the time selection header element\n                 * @event timeSelectionElementClick\n                 * @on-owner\n                 * @param {Scheduler.view.Scheduler} source The scheduler\n                 * @param {Date} startDate The selected range start date\n                 * @param {Date} endDate The selected range end date\n                 * @param {Event} domEvent The raw DOM event\n                 */\n                me.client.trigger('timeSelectionElementClick', {\n                    ...me.selectedTimeSpan,\n                    domEvent : event\n                });\n            }\n        }\n    }\n    updateFromCoords(x, y, width, height) {\n        const\n            { client } = this,\n            size       = client.isHorizontal ? width : height;\n        let start = client.isHorizontal ? x : y;\n        if (client.rtl && client.isHorizontal) {\n            start = Math.max(client.timeAxisViewModel.totalSize - start - size, 0);\n        }\n        const\n            startDate = client.getDateFromCoord({ coord : start, roundingMethod : 'round', ignoreRTL : true }),\n            endDate   = client.getDateFromCoord({ coord : start + size, roundingMethod : 'round', ignoreRTL : true });\n        this.selectedTimeSpan = {\n            startDate : DateHelper.max(startDate, client.startDate),\n            endDate   : DateHelper.min(endDate, client.endDate)\n        };\n    }\n    onResizeStart({ source }) {\n        const\n            {\n                timeAxisViewModel,\n                timeResolution\n            }                    = this.client,\n            resolutionDurationMS = DateHelper.asMilliseconds(timeResolution.increment, timeResolution.unit);\n        // Prevent resizing smaller than one resolution increment\n        this.resize.minWidth = timeAxisViewModel.getDistanceForDuration(resolutionDurationMS);\n    }\n    onResizeDrag({ context }) {\n        this.updateFromCoords(\n            context.newX,\n            context.newY,\n            context.newWidth ?? context.elementWidth,\n            context.newHeight ?? context.elementHeight\n        );\n    }\n    onDragStart(event) {\n        super.onDragStart(event);\n        const { context } = event;\n        context.elementWidth = context.element.offsetWidth;\n        context.elementHeight = context.element.offsetHeight;\n    }\n    onDrag({ context }) {\n        this.updateFromCoords(\n            context.newX,\n            context.newY,\n            context.elementWidth,\n            context.elementHeight\n        );\n    }\n    onDrop() {\n        this.client.element.classList.remove('b-dragging-timerange');\n    }\n    onDragReset() {\n        this.refresh();\n    }\n    get timeRanges() {\n        return this.selectedTimeSpan ? [this.selectedTimeSpan] : [];\n    }\n    // Always render the selection\n    shouldRenderRange() {\n        return true;\n    }\n    changeSelectedTimeSpan(timeSpan) {\n        if (timeSpan) {\n            timeSpan.id = 'time-selection';\n        }\n        return timeSpan;\n    }\n    updateSelectedTimeSpan(timeSpan) {\n        if (!this.isConfiguring) {\n            this.refresh();\n        }\n        /**\n         * Triggered when time selection changes\n         * @event timeSelectionChange\n         * @on-owner\n         * @param {Scheduler.view.Scheduler} source The scheduler\n         * @param {Date} startDate The selected range start date, or `undefined`\n         * @param {Date} endDate The selected range end date, or `undefined`\n         */\n        this.client.trigger('timeSelectionChange', {\n            ...timeSpan ?? {}\n        });\n    }\n}\nTimeSelection._$name = 'TimeSelection'; GridFeatureManager.registerFeature(TimeSelection, false, 'Scheduler');\n", "import GridFeatureManager from '../../../Grid/feature/GridFeatureManager.js';\nimport PrintMixin from '../../../Grid/feature/export/mixin/PrintMixin.js';\nimport PdfExport from './PdfExport.js';\n/**\n * @module Scheduler/feature/export/Print\n */\n/**\n * Allows printing Scheduler contents using browser print dialog.\n *\n * This feature is based on {@link Scheduler.feature.export.PdfExport} with only difference that instead of sending\n * request to a backend it renders content to an IFrame element and requests print dialog for it. For more details about\n * preparing HTML for printing, please refer to the {@link Scheduler.feature.export.PdfExport} docs.\n *\n * ## Usage\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     features : {\n *         print : true\n *     }\n * })\n *\n * // Opens popup allowing to customize print settings\n * scheduler.features.print.showPrintDialog();\n *\n * // Simple print\n * scheduler.features.print.print({\n *     columns : scheduler.columns.map(c => c.id)\n * });\n * ```\n *\n * This feature is **disabled** by default.\n * For info on enabling it, see {@link Grid/view/mixin/GridFeatures}.\n *\n * @extends Scheduler/feature/export/PdfExport\n * @mixes Grid/feature/export/mixin/PrintMixin\n *\n * @demo Scheduler/print\n * @classtype print\n * @feature\n *\n * @typings Grid.feature.export.Print -> Grid.feature.export.GridPrint\n */\nexport default class Print extends PrintMixin(PdfExport) {\n    /**\n     * @hideConfigs clientURL, exportServer, fetchOptions, fileFormat, fileName, openAfterExport, openInNewTab, sendAsBinary\n     */\n    /**\n     * @hideFunctions processExportContent, receiveExportContent, showExportDialog\n     */\n    static $name = 'Print';\n};\nPrint._$name = 'Print'; GridFeatureManager.registerFeature(Print, false, 'Scheduler');\n", "import Localizable from '../../Core/localization/Localizable.js';\nimport GridTableExporter from '../../Grid/util/TableExporter.js';\nimport SchedulerBase from '../view/SchedulerBase.js';\n/**\n * @module Scheduler/util/ScheduleTableExporter\n */\n/**\n * This class transforms scheduler component into two arrays: rows and columns. Columns array contains objects with\n * meta information about column: field name, column name, width and type of the rendered value, rows array contains\n * arrays of cell values.\n *\n * ```javascript\n * const exporter = new ScheduleTableExporter({ target : scheduler });\n * exporter.export()\n *\n * // Output\n * {\n *     columns : [\n *         { field : 'name',      value : 'First name', type : 'string',  width : 100 },\n *         { field : 'name',      value : 'Task',       type : 'string',  width : 100, eventColumn : true },\n *         { field : 'startDate', value : 'Starts',     type : 'date',    width : 100, eventColumn : true },\n *         { field : 'endDate',   value : 'Ends',       type : 'date',    width : 100, eventColumn : true }\n *     ],\n *     rows : [\n *         ['Michael', 'Hand out dundies',      Date, Date],\n *         ['Michael', 'Buy condo',             Date, Date],\n *         ['Jim',     'Close sale to library', Date, Date]\n *     ]\n * }\n * ```\n *\n * ## How data is exported\n *\n * Data is exported as in the base class with minor addition: every event is exported on a separate row, like\n * demonstrated above.\n *\n * In case there are unassigned events, by default they will be exported as well\n *\n * ```javascript\n * // output\n * {\n *     rows : [\n *         ['Michael', 'Hand out dundies',      Date, Date],\n *         ['Michael', 'Buy condo',             Date, Date],\n *         ['Jim',     'Close sale to library', Date, Date],\n *         ['',        'No resource assigned'],\n *         ['',        'Halloween prep',        Date, Date],\n *         ['',        'New year prep',         Date, Date]\n *     ]\n * }\n * ```\n *\n * @extends Grid/util/TableExporter\n * @mixes Core/localization/Localizable\n */\nexport default class ScheduleTableExporter extends Localizable(GridTableExporter) {\n    static get defaultConfig() {\n        return {\n            /**\n             * Set to `false` to not include unassigned events in the export. `true` by default.\n             * @config {Boolean} includeUnassigned\n             * @default\n             */\n            includeUnassigned : true,\n            /**\n             * An array of Event columns configuration used to specify columns width, headers name, and column fields to\n             * get the data from.\n             * 'field' config is required. If 'text' is missing, the 'field' config will be used instead.\n             *\n             * For example:\n             * ```javascript\n             * eventColumns    : [\n             *     { text : 'Task', field : 'name' },\n             *     { text : 'Starts', field : 'startDate', width : 140 },\n             *     { text : 'Ends', field : 'endDate', width : 140 }\n             * ]\n             * ```\n             *\n             * @config {String[]|Object[]} eventColumns\n             * @default\n             */\n            eventColumns : [\n                { text : 'Task', field : 'name' },\n                { text : 'Starts', field : 'startDate', width : 140 },\n                { text : 'Ends', field : 'endDate', width : 140 }\n            ],\n            /**\n             * Function to sort events for each resource. By default events are sorted in the order of appending to the\n             * store.\n             * For example:\n             * ```javascript\n             * // Sorting by start date\n             * eventSortFn : (a, b) => a.startDate - b.startDate\n             * ```\n             * @config {Function}\n             * @internal\n             */\n            eventSortFn : null\n        };\n    }\n    construct(config = {}, ...args) {\n        super.construct(config, ...args);\n        if (!this.eventSortFn) {\n            this.eventSortFn = (a, b) => a.internalId - b.internalId;\n        }\n    }\n    normalizeColumns(config) {\n        super.normalizeColumns(config);\n        config.eventColumns = config.eventColumns.map(col => {\n            if (typeof col === 'string') {\n                return { field : col };\n            }\n            else {\n                return col;\n            }\n        });\n    }\n    generateExportData(config) {\n        const\n            me                 = this,\n            isScheduler        = this.target instanceof SchedulerBase,\n            resourceColumns    = me.generateColumns(config),\n            eventColumns       = isScheduler ? me.generateEventColumns(config) : [],\n            columns            = resourceColumns.concat(eventColumns),\n            rows               = me.generateRows(config);\n        return { columns, rows };\n    }\n    generateEventColumns(config) {\n        return config.eventColumns.map(column => this.processEventColumn(column, config));\n    }\n    processEventColumn(column, config) {\n        const\n            { width, minWidth }    = column,\n            { defaultColumnWidth } = config;\n        return {\n            field       : column.field,\n            value       : column.text,\n            width       : Math.max(width || defaultColumnWidth, minWidth || defaultColumnWidth),\n            eventColumn : true,\n            type        : this.getColumnType(column, this.target.eventStore)\n        };\n    }\n    generateRows(config) {\n        const\n            me         = this,\n            { target } = me;\n        let result;\n        if (!(target instanceof SchedulerBase)) {\n            result = super.generateRows(config);\n        }\n        else {\n            result = [];\n            // forEach skips group records, summary records etc\n            target.resourceStore.map(resourceRecord => {\n                // Get all events for resource (including assignment store)\n                const events = resourceRecord.events || [];\n                // Events order is not guaranteed, sort by internalId, that is guaranteed to grow with every new record\n                events.sort(me.eventSortFn);\n                // Set dummy event to have resource info printed without events\n                if (!events.length) {\n                    events.push('');\n                }\n                events.forEach(eventRecord => {\n                    if (eventRecord === '' || target.eventStore.isAvailable(eventRecord)) {\n                        result.push(me.getRowData(config, resourceRecord, eventRecord));\n                    }\n                });\n            });\n            if (config.includeUnassigned && config.eventColumns.length) {\n                const notAssignedEvents = target.eventStore.query(eventRecord => !eventRecord.resources.length);\n                if (notAssignedEvents.length) {\n                    // Use offset to match first event column\n                    const cells = new Array(config.columns.length).fill('');\n                    cells.push(me.L('L{ExcelExporter.No resource assigned}'));\n                    result.push(cells);\n                    // Set dummy resource to have event info printed without resource\n                    notAssignedEvents.forEach(eventRecord => result.push(me.getRowData(config, null, eventRecord)));\n                }\n            }\n            // filter out empty rows\n            result = result.filter(cells => cells.length);\n        }\n        return result;\n    }\n    getRowData(config, resource, event) {\n        const\n            {\n                columns,\n                eventColumns\n            }             = config,\n            cells         = [],\n            resourceCells = this.processRecord(resource, columns, config);\n        // No cells from group footers (or from group headers if configured to not show them)\n        resourceCells && cells.push(...resourceCells);\n        if (!resource || !resource.isSpecialRow) {\n            const eventCells = this.processRecord(event, eventColumns, config);\n            // No cells from group footers (or from group headers if configured to not show them)\n            eventCells && cells.push(...eventCells);\n        }\n        return cells;\n    }\n}\nScheduleTableExporter._$name = 'ScheduleTableExporter';", "/*eslint no-undef: \"error\"*/\nimport GridFeatureManager from '../../../Grid/feature/GridFeatureManager.js';\nimport GridExcelExporter from '../../../Grid/feature/experimental/ExcelExporter.js';\nimport ScheduleTableExporter from '../../util/ScheduleTableExporter.js';\n/**\n * @module Scheduler/feature/experimental/ExcelExporter\n */\n/**\n * **NOTE**: This class requires a 3rd party library to operate.\n *\n * A plugin that allows exporting Scheduler data to Excel without involving the server. It uses {@link Scheduler.util.ScheduleTableExporter}\n * class as data provider, [zipcelx library](https://www.npmjs.com/package/zipcelx)\n * forked and adjusted to support [column width config](https://github.com/bryntum/zipcelx/tree/column-width-build)\n * and [Microsoft XML specification](https://msdn.microsoft.com/en-us/library/office/documentformat.openxml.spreadsheet.aspx).\n * Zipcelx should be either in global scope (window) or can be provided with {@link #config-zipcelx} config.\n *\n * ```html\n * // Global scope\n * <script src=\"zipcelx.js\"></script>\n * ```\n *\n * ```javascript\n * // importing from package\n * import zipcelx from 'zipcelx';\n *\n * const grid = new Grid({\n *     features : {\n *         excelExporter : {\n *             zipcelx\n *         }\n *     }\n * })\n * ```\n *\n * Here is an example of how to add the feature:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     features : {\n *         excelExporter : {\n *             // Choose the date format for date fields\n *             dateFormat : 'YYYY-MM-DD HH:mm',\n *             exporterConfig : {\n *                 // Choose the Resource fields to include in the exported file\n *                 columns : [{ text : 'Staff', field : 'name' }],\n *\n *                 // Choose the Event fields to include in the exported file\n *                 eventColumns    : [\n *                     { text : 'Task', field : 'name' },\n *                     { text : 'Starts', field : 'startDate', width : 140 },\n *                     { text : 'Ends', field : 'endDate', width : 140 }\n *                 ]\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * And how to call it:\n *\n * ```javascript\n * scheduler.features.excelExporter.export({\n *     filename : 'Export',\n *     exporterConfig : {\n *         columns : [{ text : 'Staff', field : 'name' }]\n *     }\n * })\n * ```\n *\n * This feature is **disabled** by default.\n * For info on enabling it, see {@link Grid/view/mixin/GridFeatures}.\n *\n * @extends Grid/feature/experimental/ExcelExporter\n * @classtype excelExporter\n * @feature\n * @demo Scheduler/exporttoexcel\n *\n * @typings Grid.feature.experimental.ExcelExporter -> Grid.feature.experimental.GridExcelExporter\n */\nexport default class ExcelExporter extends GridExcelExporter {\n    static get $name() {\n        return 'ExcelExporter';\n    }\n    static get defaultConfig() {\n        return {\n            /**\n             * Exporter class. Must subclass {@link Scheduler.util.ScheduleTableExporter}\n             * @config {Scheduler.util.ScheduleTableExporter}\n             * @typings {typeof ScheduleTableExporter}\n             * @default\n             */\n            exporterClass : ScheduleTableExporter,\n            /**\n             * Configuration object for {@link #config-exporterClass exporter class}.\n             * @config {Object}\n             */\n            exporterConfig : null\n        };\n    }\n}\nExcelExporter._$name = 'ExcelExporter'; GridFeatureManager.registerFeature(ExcelExporter, false, 'Scheduler');\n", "import SchedulerBase from './SchedulerBase.js';\nimport '../localization/En.js';\n// default features\nimport '../feature/ColumnLines.js';\nimport '../feature/EventCopyPaste.js';\nimport '../feature/EventDrag.js';\nimport '../feature/EventDragCreate.js';\nimport '../feature/EventEdit.js';\nimport '../feature/EventFilter.js';\nimport '../feature/EventMenu.js';\nimport '../feature/EventResize.js';\nimport '../feature/EventTooltip.js';\nimport '../feature/ScheduleContext.js';\nimport '../feature/ScheduleMenu.js';\nimport '../feature/ScheduleTooltip.js';\nimport '../feature/StickyEvents.js';\nimport '../feature/TimeAxisHeaderMenu.js';\n// Since Scheduler is based on SchedulerBase + GridBase, Grids default features needs to be pulled in here also\nimport '../../Grid/feature/CellEdit.js';\nimport '../../Grid/feature/CellMenu.js';\nimport '../../Grid/feature/ColumnDragToolbar.js';\nimport '../../Grid/feature/ColumnPicker.js';\nimport '../../Grid/feature/ColumnReorder.js';\nimport '../../Grid/feature/ColumnResize.js';\nimport '../../Grid/feature/Filter.js';\nimport '../../Grid/feature/FilterBar.js';\nimport '../../Grid/feature/Group.js';\nimport '../../Grid/feature/HeaderMenu.js';\nimport '../../Grid/feature/Sort.js';\nimport '../../Grid/feature/Stripe.js';\nimport '../../Grid/column/CheckColumn.js'; // For checkbox selection mode\n/**\n * @module Scheduler/view/Scheduler\n */\n/**\n * The Scheduler widget is a very powerful and performant UI component that displays an arbitrary number of \"locked\"\n * columns with a schedule occupying the remaining space. The schedule has a time axis at the top, one row per resource\n * and any number of events per resource.\n *\n * ## Intro\n * The Scheduler widget has a wide range of features and a large API to allow users to work with it efficiently in the\n * browser.\n *\n * The timeaxis displayed at the top of the Scheduler is configured using a {@link #config-startDate},\n * {@link #config-endDate} and a {@link #config-viewPreset}. The dates determine the outer limits of the range shown in\n * the timeaxis while the {@link Scheduler.preset.ViewPreset} decides the appearance and which dates are actually shown.\n * The Scheduler ships with a selection of predefined view presets, which can be found in\n * {@link Scheduler.preset.PresetManager}. If you want to specify view presets for a specific scheduler only, please see\n * {@link #config-presets} config.\n *\n * <div class=\"note\">Note that if you want to use infinite scroll along the time axis, configure\n * {@link #config-infiniteScroll} and {@link #config-visibleDate} instead of <code>startDate</code> and\n * <code>endDate</code></div>\n *\n * The Scheduler uses a {@link Scheduler.data.ResourceStore} to hold resources and an {@link Scheduler.data.EventStore}\n * to hold events. You can use inline data or load data using ajax, see the \"Working with data\" guides for more\n * information.\n *\n * The simplest schedule configured with inline data would look like this:\n *\n *      let scheduler = new Scheduler({\n *          appendTo : document.body,\n *\n *          startDate  : new Date(2018,4,6),\n *          endDate    : new Date(2018,4,12),\n *          viewPreset : 'dayAndWeek',\n *\n *           columns : [\n *              { field : 'name', text : 'Name', width: 100 }\n *          ],\n *\n *          resources : [\n *              { id : 1, name : 'Bernard' },\n *              { id : 2, name : 'Bianca' }\n *          ],\n *\n *          events : [\n *              { id : 1, resourceId : 1, name : 'Interview', startDate : '2018-05-06', endDate : '2018-05-07' },\n *              { id : 2, resourceId : 1, name : 'Press conference', startDate : '2018-05-08', endDate : '2018-05-09' },\n *              { id : 3, resourceId : 2, name : 'Audition', startDate : '2018-05-06', endDate : '2018-05-08' },\n *              { id : 4, resourceId : 2, name : 'Script deadline', startDate : '2018-05-11', endDate : '2018-05-11' }\n *          ]\n *      });\n *\n * {@inlineexample Scheduler/view/Simplest.js}\n *\n * ## Inheriting from Bryntum Grid\n * Bryntum Scheduler inherits from Bryntum Grid, meaning that most features available in the grid are also available\n * for the scheduler. Common features include columns, cell editing, context menus, row grouping, sorting and more.\n * Note: If you want to use the Grid component standalone, e.g. to use drag-from-grid functionality, you need a separate\n * license for the Grid component.\n *\n * For more information on configuring columns, filtering, search etc. please see the {@link Grid.view.Grid Grid API docs}.\n * {@region Loading data}\n * As mentioned above Bryntum Scheduler uses an {@link Scheduler.data.EventStore} and a {@link Scheduler.data.ResourceStore}\n * to hold its data. Data is expected to be in JSON format and can be assigned inline (from memory) using the\n * {@link #config-events} and {@link #config-resources} shortcuts:\n *\n * ```javascript\n * let scheduler = new Scheduler({\n *    events : myArrayOfEventData,\n *    resources : myArrayOfResourceData\n * });\n * ```\n *\n * If you need to give additional store configuration, you can also specify store configs or instances:\n *\n * ```javascript\n * let resourceStore = new ResourceStore({\n *   // ResourceStore config object\n * })\n *\n * let scheduler = new Scheduler({\n *    // EventStore config object\n *    eventStore : {\n *       ...\n *    },\n *\n *    // Already existing ResourceStore instance\n *    resourceStore\n * });\n * ```\n *\n * To use Ajax to fetch data from a server, specify {@link Core.data.AjaxStore#config-readUrl}:\n *\n * ```javascript\n * let scheduler = new Scheduler({\n *    eventStore : {\n *        readUrl  : 'backend/read_events.php',\n *        autoLoad : true\n *    }\n * });\n * // If you do not specify autoLoad, trigger loading manually:\n * scheduler.eventStore.load();\n * ```\n *\n * For more information, see the \"Working with data\" guides.\n * {@endregion}\n * {@region Event styling}\n * Bryntum Schedulers appearance can be affected in a few different ways:\n *\n * * Switching themes\n * * Choosing event styles and colors\n * * Using renderer functions\n *\n * ### Switching themes\n *\n * Scheduler ships with five different themes, simply include the css file for the theme you would like to use on your\n * page. The themes are located in the `/build` folder. For example to include the material theme:\n *\n * ```html\n * <link rel=\"stylesheet\" href=\"build/scheduler.material.css\" data-bryntum-theme>\n * ```\n *\n * Included themes are (from left to right) classic-light, classic, classic-dark, stockholm and material:\n *\n * <img src=\"Scheduler/basic/thumb.classic-light.png\" alt=\"Classic-Light theme\" width=\"300\" style=\"margin-right: .5rem\">\n * <img src=\"Scheduler/basic/thumb.classic.png\" alt=\"Classic theme\" width=\"300\" style=\"margin-right: .5rem\">\n * <img src=\"Scheduler/basic/thumb.classic-dark.png\" alt=\"Classic-Dark theme\" width=\"300\" style=\"margin-right: .5rem\">\n * <img src=\"Scheduler/basic/thumb.stockholm.png\" alt=\"Stockholm theme\" width=\"300\" style=\"margin-right: .5rem\">\n * <img src=\"Scheduler/basic/thumb.material.png\" alt=\"Material theme\" width=\"300\">\n *\n * ### Choosing event styles and colors\n * The style and color of each event can be changed by assigning to the `eventStyle` and `eventColor` configs. These\n * configs are available at 3 different levels:\n *\n * * Scheduler level, affects all events (see {@link Scheduler.view.mixin.TimelineEventRendering#config-eventStyle} and\n *   {@link Scheduler.view.mixin.TimelineEventRendering#config-eventColor}).\n * * Resource level, affects all events assigned to that resource (see {@link Scheduler.model.mixin.ResourceModelMixin#field-eventStyle}\n *   and {@link Scheduler.model.mixin.ResourceModelMixin#field-eventColor}).\n * * Event level, affects that event (see {@link Scheduler/model/mixin/EventModelMixin#field-eventStyle} and\n *   {@link Scheduler/model/mixin/EventModelMixin#field-eventColor}).\n *\n * {@inlineexample Scheduler/view/Styles.js}\n *\n * For available styles, see {@link Scheduler.view.mixin/TimelineEventRendering#config-eventStyle}. For colors,\n * {@link Scheduler.view.mixin/TimelineEventRendering#config-eventColor}. Also take a look at the\n * <a href=\"../examples/eventstyles/\" target=\"_blank\">eventstyles demo</a>.\n *\n * ### Sorting overlapping events\n *\n * The order of overlapping events rendered in a horizontal scheduler can be customized by overriding\n * {@link Scheduler.view.mixin.SchedulerEventRendering#config-horizontalEventSorterFn} function on the scheduler.\n * For example:\n *\n * ```javascript\n * let scheduler = new Scheduler({\n *     horizontalEventSorterFn(a, b) {\n *         return b.startDate.getTime() - a.startDate.getTime();\n *     },\n *     ...\n * });\n * ```\n *\n * {@inlineexample Scheduler/view/SortingOverlappingEvents.js}\n *\n * ### Using render functions\n * Render function can be used to manipulate the rendering of rows (resources) and events. For information on row\n * renderers, see {@link Grid.column.Column#config-renderer}.\n *\n * Event rendering can be manipulated by specifying an {@link Scheduler.view.mixin/SchedulerEventRendering#config-eventRenderer} function. The function is called\n * for each event before it is rendered to DOM. By using its arguments you can add CSS classes, modify styling and\n * determine the contents of the event:\n *\n * ```javascript\n * let scheduler = new Scheduler({\n *\n *   events    : [...],\n *   resources : [...],\n *\n *   ...,\n *\n *   eventRenderer({resourceRecord, eventRecord, renderData}) {\n *      // add css class to the event\n *      renderData.cls.add('my-css-class');\n *\n *      // use an icon\n *      renderData.iconCls = 'b-fa b-fa-some-nice-icon';\n *\n *      // return value is used as events text\n *      return `${resourceRecord.name}: ${eventRecord.name}`;\n *   }\n * });\n * ```\n *\n * {@endregion}\n * {@region Event manipulation}\n * You can programmatically manipulate the events using data operations, see the \"Working with data\" guides for more\n * information. Events are reactive, changes reflect on the UI automatically. A small example on manipulating events:\n *\n * ```javascript\n * // change startDate of first event\n * scheduler.eventStore.first.startDate = new Date(2018,5,10);\n *\n * // remove last event\n * scheduler.eventStore.last.remove();\n *\n * // reassign an event\n * scheduler.eventStore.getById(10).resourceId = 2;\n * ```\n *\n * You can also allow your users to manipulate the events using the following features:\n *\n * * {@link Scheduler.feature.EventDrag}, drag and drop events within the schedule\n * * {@link Scheduler.feature.EventDragCreate}, create new events by click-dragging an empty area\n * * {@link Scheduler.feature.EventEdit}, show an event editing form\n * * {@link Scheduler.feature.SimpleEventEdit}, edit the event name easily\n * * {@link Scheduler.feature.EventResize}, resize events by dragging resize handles\n *\n * All of the features mentioned above are enabled by default.\n * {@endregion}\n * {@region Default configs}\n * There is a myriad of configs and features available for Scheduler (browse the API docs to find them), some of them on\n * by default and some of them requiring extra configuration. The code below tries to illustrate the major things that\n * are used by default:\n *\n * ```javascript\n * let scheduler = new Scheduler({\n *    // The following features are enabled by default:\n *    features : {\n *        cellEdit            : true, // Cell editing in the columns part\n *        columnLines         : true, // Column lines in the schedule part\n *        columnPicker        : true, // Header context menu item to toggle visible columns\n *        columnReorder       : true, // Reorder columns in grid part using drag and drop\n *        columnResize        : true, // Resize columns in grid part using the mouse\n *        cellMenu            : true, // Context menu for cells in the grid part\n *        eventMenu           : true, // Context menu for events\n *        eventDrag           : true, // Dragging events\n *        eventDragCreate     : true, // Drag creating events\n *        eventEdit           : true, // Event editor dialog\n *        eventFilter         : true, // Filtering events using header context menu\n *        eventCopyPaste      : true, // Allow using [Ctrl/CMD + C/X] and [Ctrl/CMD + V] to copy/cut and paste events\n *        eventResize         : true, // Resizing events using the mouse\n *        eventTooltip        : true, // Tooltips for events\n *        group               : true, // Row grouping\n *        headerMenu          : true, // Context menu for headers in the grid part\n *        timeAxisHeaderMenu  : true, // Header context menu for schedule part\n *        scheduleMenu        : true, // Context menu for empty parts of the schedule\n *        scheduleTooltip     : true, // Tooltip for empty parts of the schedule\n *        sort                : true  // Row sorting\n *    },\n *\n *    // From Grid\n *    animateRemovingRows       : false, // Rows will not slide out on removal\n *    autoHeight                : false, // Grid needs to have a height supplied through CSS (strongly recommended) or by specifying `height\n *    columnLines               : true,  // Grid part, themes might override it to hide lines anyway\n *    emptyText                 : 'No rows to display',\n *    enableTextSelection       : false, // Not allowed to select text in cells by default,\n *    fillLastColumn            : true,  // By default the last column is stretched to fill the grid\n *    fullRowRefresh            : true,  // Refreshes entire row when a cell value changes\n *    loadMask                  : 'Loading...',\n *    resizeToFitIncludesHeader : true,  // Also measure header when auto resizing columns\n *    responsiveLevels : {\n *      small : 400,\n *      medium : 600,\n *      large : '*'\n *    },\n *    rowHeight                  : 60,    // Scheduler specifies a default rowHeight in pixels\n *    showDirty                  : false, // No indicator for changed cells\n *\n *    // Scheduler specific\n *    autoAdjustTimeAxis             : true,      // startDate & endDate will be adjusted to display a suitable range\n *    allowOverlap                   : true,      // Events are allowed to overlap (overlays, stacks or packs depending on eventLayout)\n *    barMargin                      : 10,        // Space above + below each event\n *    createEventOnDblClick          : true,      // Allow creating new events by double clicking empty space\n *    enableDeleteKey                : true,      // Allow deleting events with delete / backspace keys\n *    enableEventAnimations          : true,      // Animate event changes\n *    eventBarTextField              : 'name',    // Field on EventModel to display in events\n *    eventColor                     : 'green',   // Use green as default color for events\n *    eventLayout                    : 'stack',   // Stack overlapping events by default\n *    eventStyle                     : 'plain',   // Use plain as default style for events\n *    managedEventSizing             : true,      // Calculate event sizes based on rowHeight & barMargin\n *    milestoneCharWidth             : 10,\n *    milestoneLayoutMode            : 'default',\n *    useInitialAnimation            : true,      // Fade in events initially\n *    viewPreset                     : 'weekAndDayLetter',\n *    zoomOnMouseWheel               : true,\n *    zoomOnTimeAxisDoubleClick      : true\n * });\n * ```\n *\n * {@endregion}\n * {@region Keyboard shortcuts}\n * Scheduler does not currently provide any keyboard shortcuts on its own. However, the following Scheduler features has\n * their own keyboard shortcuts. Follow the links for details.\n * * {@link Scheduler.feature.EventCopyPaste#keyboard-shortcuts EventCopyPaste}\n *\n * As Scheduler is a subclass of Grid, many of Grid's {@link Grid.view.Grid#keyboard-shortcuts keyboard-shortcuts}\n * works for Scheduler as well.\n *\n * For more information on how to customize keyboard shortcuts, please see\n * [our guide](#Scheduler/guides/customization/keymap.md)\n * {@endregion}\n * {@region Performance}\n * To make scheduler performance as good as possible it only renders the events and resources that are within view (plus\n * an additional buffer). Since adding to and removing from DOM comes with a performance penalty the elements are\n * instead repositioned and reused as you scroll. A side effect of this is that you cannot do direct DOM element\n * manipulation in a reliable way, instead you should use row and event renderer functions to achieve what you want (see\n * the section on event styling above).\n *\n * To put the scheduler to the test, try our <a href=\"../examples/bigdataset/\" target=\"_blank\">bigdataset demo</a>.\n * {@endregion}\n *\n * {@region Recurring Events}\n * From 4.0.0, there is no `RecurringEvents` Feature. There is an\n * {@link Scheduler/view/mixin/RecurringEvents#config-enableRecurringEvents} boolean config on the Scheduler.\n * Occurrences of recurring events are provided on a \"just in time\" basis by a new EventStore API which must now be used\n * when interrogating an EventStore.\n *\n * {@link Scheduler/data/mixin/GetEventsMixin#function-getEvents} is a multipurpose event gathering method which can be\n * asked to return events which match a set of criteria including a date range and a resource. By default, if the\n * requested date range contains occurrences of a recurring event, those occurrences are returned in the result array.\n *\n * ```javascript\n * myEventStore.getEvents({\n *     resourceRecord : myResourceRecord,\n *     startDate      : myScheduler.startDate,\n *     endDate        : myScheduler.endDate\n * });\n * ```\n *\n * Occurrences are *not* present in the store's data collection.\n *\n * To directly access occurrences of a recurring event which *intersect* a date range, use:\n *\n * ```js\n * recurringEvent.getOccurrencesForDateRange(startDate, endDate);\n * ```\n *\n * The `endDate` argument is optional if the occurrence for one date is required. This method always\n * returns an array. Note that it may be empty if no occurrences intersect the date range.\n *\n * ### Convert an occurrence to an exception\n * To programmatically convert an occurrence to be a single exception to its owner's sequence use:\n *\n * ```javascript\n * myOccurrence.beginBatch();\n * myOccurrence.startDate = DateHelper.add(myOccurrence.startDate, 1, 'day');\n * myOccurrence.name = 'Postponed to next day';\n * myOccurrence.recurrence = null; // This means it does NOT become a new recurring base event.\n * myOccurrence.endBatch();\n * ```\n *\n * That will cause that event to be inserted into the store as a concrete event definition, firing\n * an `add` event as would be expected, and will add an `exceptionDates` to its owning recurring event.\n *\n * When syncing this change back to the server, the `exceptionDates` array for the modified\n * recurring event now contains the exception dates correctly serialized into string form using\n * the `dateFormat` of the field. The system-supplied default value for this is\n * `'YYYY-MM-DDTHH:mm:ssZ'`\n *\n * ### Convert an occurrence to a new recurring event sequence.\n * To programmatically convert an occurrence to be the start of a new recurring sequence, use:\n *\n * ```javascript\n * myOccurrence.beginBatch();\n * myOccurrence.startDate = DateHelper.set(myOccurrence.startDate, 'hour', 14);\n * myOccurrence.name = 'Moved to 2pm from here on';\n * myOccurrence.endBatch();\n * ```\n *\n * That will cause that event to be inserted into the store as a concrete *recurring* event\n * definition, firing an `add` event as would be expected, and will terminate the previous\n * recurring owner of that occurrence on the day before the new event.\n * {@endregion}\n *\n * @extends Scheduler/view/SchedulerBase\n * @classtype scheduler\n * @widget\n */\nexport default class Scheduler extends SchedulerBase {\n    static get $name() {\n        return 'Scheduler';\n    }\n    // Factoryable type name\n    static get type() {\n        return 'scheduler';\n    }\n}\n// Register this widget type with its Factory\nScheduler.initClass();\nScheduler._$name = 'Scheduler';", "import UndoRedoBase from '../../Core/widget/base/UndoRedoBase.js';\nimport '../../Core/widget/Combo.js';\n/**\n * @module Scheduler/widget/UndoRedo\n */\nconst isProjectConsumer = w => w.isProjectConsumer;\n/**\n * A widget which encapsulates undo/redo functionality for the {@link Scheduler.model.ProjectModel project}\n * of a scheduling widget (`Scheduler`, `Gantt` or `Calendar`).\n *\n * To make use of this, the project must be configured with a\n * {@link Scheduler.model.mixin.ProjectModelMixin#config-stm State Tracking Manager}.\n *\n * If inserted into a scheduling widget (such as into a `tbar`, or `bbar`, or as an item in a context menu),\n * the project of the encapsulating scheduling widget will be used.\n *\n * If this widget is to be used \"standalone\" (rendered into the DOM outside of a scheduling widget),\n * this must be configured with a reference to the project, or the scheduling widget which is\n * using the project.\n *\n * There are three child widgets encapsulated which may be referenced through the {@link Core.widget.Container#property-widgetMap}:\n *\n * - `undoBtn` - The button which operates the undo operation (CTRL+Z, or CMD+Z in Mac OS)\n * - `transactionsCombo` - A combobox into which is pushed the list of transactions,\n * - `redoBtn` - The button which operates the redo operation (CTRL+SHIFT+Z, + CMD+SHIFT+Z in Mac OS)\n *\n * To disable keyboard shortcuts for undo/redo, set {@link Scheduler.view.Scheduler#config-enableUndoRedoKeys} to false.\n *\n * The transactionsCombo may be configured away if only the buttons are required:\n *\n * ```javascript\n * {\n *     type      : 'undoredo',\n *     items     : {\n *         transactionsCombo : null\n *     }\n * }\n * ```\n *\n * The example below illustrated how to embed an `undoredo` widget in the top toolbar of a Scheduler.\n *\n * {@inlineexample Scheduler/widget/UndoRedo.js}\n *\n * @demo Scheduler/undoredo\n *\n * @extends Core/widget/base/UndoRedoBase\n * @classtype undoredo\n * @widget\n */\nexport default class UndoRedo extends UndoRedoBase {\n    static get $name() {\n        return 'UndoRedo';\n    }\n    static get type() {\n        return 'undoredo';\n    }\n    static get configurable() {\n        return {\n            /**\n             * The Scheduling Widget (or its `id`) whose transaction to track.\n             *\n             * This may be a `Scheduler`, a `Gantt` or a `Calendar`.\n             *\n             * ```javascript\n             *     {\n             *         type      : 'undoredo',\n             *         scheduler : myCalendar\n             *     }\n             * ```\n             * @config {Core.widget.Widget|String}\n             */\n            scheduler : null,\n            /**\n             * Get/set ProjectModel instance, containing the data visualized by the SchedulerPro.\n             * @member {Scheduler.model.ProjectModel} project\n             * @category Data\n             */\n            /**\n             * The Scheduling {@link Scheduler.model.ProjectModel project}'s whose\n             * transaction to track.\n             *\n             * ```javascript\n             *     {\n             *         type    : 'undoredo',\n             *         project : scheduler.project\n             *     }\n             * ```\n             * @config {Scheduler.model.ProjectModel|ProjectModelConfig}\n             * @category Data\n             */\n            project : null\n        };\n    }\n    construct() {\n        super.construct(...arguments);\n        // Look up a Project owner in our ancestors.\n        if (!this.stm) {\n            this.scheduler = this.up(isProjectConsumer);\n        }\n    }\n    changeScheduler(scheduler) {\n        return scheduler.isProjectConsumer ? scheduler : UndoRedo.getById(scheduler);\n    }\n    updateScheduler(scheduler) {\n        const { crudManager } = scheduler;\n        scheduler.ion({\n            projectChange : 'onProjectChanged',\n            thisObj       : this\n        });\n        if (crudManager) {\n            this.setupLoadListener(crudManager);\n        }\n        // No CrudManager, so it must be inline data, so we can start immediately\n        else {\n            this.onLoad();\n        }\n        this.stm = scheduler.project.stm;\n    }\n    setupLoadListener(source) {\n        source.detachListeners('load');\n        source.ion({\n            name    : 'load',\n            load    : 'onLoad',\n            thisObj : this\n        });\n    }\n    async onLoad() {\n        // Do not want normalization changes to be tracked by STM, wait until they are finished before enabling\n        await this.scheduler.project.commitAsync();\n        // Widget could be destroyed during async project commit\n        if (!this.isDestroyed) {\n            this.stm.enable();\n            this.fillUndoRedoCombo();\n        }\n    }\n    onProjectChanged({ project }) {\n        this.project = project;\n    }\n    updateProject(project) {\n        super.updateProject(...arguments);\n        // The original condition `(project && !this.scheduler?.isConfiguring)` is not\n        // correctly transpiled by angular webpack leading to https://github.com/bryntum/support/issues/3789\n        // The following syntax fixes the above bug\n        if (project && this.scheduler && !this.scheduler.isConfiguring) {\n            this.setupLoadListener(project);\n        }\n    }\n}\nUndoRedo.initClass();\nUndoRedo._$name = 'UndoRedo';", "import Combo from '../../Core/widget/Combo.js';\nimport Widget from '../../Core/widget/Widget.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\n/**\n * @module Scheduler/widget/ViewPresetCombo\n */\n/**\n * A combo for selecting {@link Scheduler.preset.ViewPreset} for Scheduler and Gantt. Lets the user select\n * between specified {@link #config-presets} available.\n *\n * {@inlineexample Scheduler/widget/ViewPresetCombo.js}\n *\n * {@note}By default, a preset change by the ViewPresetCombo will result in that the `startDate` will be calculated to\n * the beginning of the {@link Scheduler.preset.ViewPreset#field-mainUnit} of the\n * {@link Scheduler.view.mixin.TimelineDateMapper#property-viewportCenterDate}. If the ViewPreset has a\n * {@link Scheduler.preset.ViewPreset#field-start} configured, this will be added to the calculation. The\n * `endDate` will then be calculated by adding the ViewPreset's\n * {@link Scheduler.preset.ViewPreset#field-defaultSpan} to the `startDate`. Set {@link #config-useFixedDuration} to\n * `false` to prevent this behaviour.{@/note}\n *\n * Add it to the component's toolbar to connect it automatically:\n * ```javascript\n * new Scheduler({\n *    tbar : {\n *        viewPresetCombo: {\n *            type: 'viewpresetcombo',\n *            width: '7em'\n *        }\n *    }\n * });\n * ```\n *\n * Or specify which Scheduler, SchedulerPro or Gantt component instance it should connect to the {@link #config-client}\n * config:\n * ```javascript\n * const scheduler = new Scheduler({ ... });\n * const viewPresetCombo = new ViewPresetCombo({\n *     appendTo : 'someElementClassName',\n *     client   : scheduler\n * });\n * ```\n *\n * By default, the following presets are shown in the combo:\n * * {@link Scheduler.preset.PresetManager hourAndDay}\n * * {@link Scheduler.preset.PresetManager weekAndDay}\n * * {@link Scheduler.preset.PresetManager dayAndMonth}\n *\n * ## Changing selectable presets\n * To change the default selectable presets specify an array of preset ids. The presets specified must be available to\n * the client.\n *\n * ```javascript\n * viewPresetCombo: {\n *    presets: ['weekAndDay', 'dayAndMonth', 'myCustomPreset']\n * }\n * ```\n *\n * NOTE: The selectable presets will be arranged in the order provided in the {@link #config-presets} config.\n * @extends Core/widget/Combo\n * @classtype viewpresetcombo\n * @widget\n */\nexport default class ViewPresetCombo extends Combo {\n    static $name = 'ViewPresetCombo';\n    static type = 'viewpresetcombo';\n    static configurable = {\n        /**\n         * An array containing string {@link Scheduler.preset.ViewPreset} ids available for selection. The specified\n         * presets must be {@link Scheduler.view.mixin.TimelineViewPresets#config-presets available} for the\n         * {@link #config-client} (Scheduler, SchedulerPro or Gantt) for it to work properly. The selectable presets\n         * will be arranged in the order provided here.\n         * @config {Array}\n         */\n        presets : ['hourAndDay', 'weekAndDay', 'dayAndMonth'],\n        /**\n         * If not added to a toolbar, provide a Scheduler, SchedulerPro or Gantt component instance to which the\n         * ViewPresetCombo should be connected.\n         * @config {Scheduler.view.TimelineBase}\n         * @default\n         */\n        client : null,\n        /**\n         * As default, a preset change by the ViewPresetCombo will result in that the `startDate` will be calculated to\n         * the beginning of the {@link Scheduler.preset.ViewPreset#field-mainUnit} of the\n         * {@link Scheduler.view.mixin.TimelineDateMapper#property-viewportCenterDate}. If the ViewPreset has a\n         * {@link Scheduler.preset.ViewPreset#field-start} configured, this will be added to the calculation. The\n         * `endDate` will then be calculated by adding the ViewPreset's\n         * {@link Scheduler.preset.ViewPreset#field-defaultSpan} to the `startDate`.\n         *\n         * If this is set to `false`, the preset change will result in a call to\n         * {@link Scheduler.view.mixin.TimelineZoomable#function-zoomToLevel} without any options. The default behaviour\n         * of zoom functionality is to keep the timespan about the same width. If you want to change ViewPreset/Zoom\n         * without any changes to the visible timespan, you can set the\n         * {@link Scheduler.view.mixin.TimelineZoomable#config-zoomKeepsOriginalTimespan} config to `true`.\n         * @config {Boolean}\n         */\n        useFixedDuration : true,\n        /**\n         * @hideconfigs caseSensitive,chipView,clearTextOnPickerHide,createOnUnmatched,displayField,displayValueRenderer,emptyText,encodeFilterParams,filterOnEnter,filterOperator,filterParamName,filterSelected,hideTrigger,inlinePicker,items,keyStrokeFilterDelay,minChars,multiSelect,multiValueSeparator,primaryFilter,store,triggerAction,validateFilter,value,valueField,containValues,container,inline,adopt,dataset,title,autoSelect,clearable,highlightExternalChange,keyStrokeChangeDelay,maxLength,minLength,placeholder,required,revertOnEscape,triggers,autoComplete,inputType,spellCheck,validateOnInput,tooltip,autoClose,autoExpand,picker,pickerAlignElement\n         */\n        /**\n         * @hideproperties filterOperator,isEmpty,queryLast,records,store,valueCollection,content,contentElement,dataset,html,overflowElement,errorTip,isEmptyInput,isValid,triggers,scrollable,cellInfo,tab\n         */\n        /**\n         * @hidefunctions clear,clearError,getErrors,select,setError,contains,exitFullscreen,requestFullscreen,owns,query,queryAll\n         */\n        /**\n         * @hideevents input\n         */\n        editable     : false,\n        valueField   : 'id',\n        displayField : 'name',\n        placeholder  : 'Select view'\n    };\n    construct() {\n        super.construct(...arguments);\n        this.scheduler.ion({\n            presetchange : this.onClientPresetChange,\n            thisObj      : this\n        });\n    }\n    // Returns current client (Scheduler, SchedulerPro or Gantt)\n    get scheduler() {\n        return this.client || this.up(widget => widget.isTimelineBase) || Widget.query(widget => widget.isTimelineBase);\n    }\n    changeValue(value, oldValue) {\n        // Set up items before applying value, to prevent an empty store from being created and then replaced,\n        // which in turn leads to preset changing (caused by https://github.com/bryntum/support/issues/5732)\n        this.getConfig('presets');\n        return super.changeValue(value, oldValue);\n    }\n    // Creates a chained store of the clients presets store filtered and sorted by the presets config\n    updatePresets(presets) {\n        this.store = this.scheduler.presets.chain(r => presets.includes(r.id));\n        this.store.sort((a, b) => presets.indexOf(a.id) - presets.indexOf(b.id));\n    }\n    // When client preset is changed from somewhere else, zooming for example.\n    onClientPresetChange({ preset }) {\n        const me = this;\n        if (!me._isSelecting) {\n            me.isSettingValue = true;\n            // Select preset in combo if it exists\n            if (me.store.includes(preset.id)) {\n                me.value = preset;\n            }\n            // Clear combo otherwise\n            else {\n                me.clear();\n            }\n            me.isSettingValue = false;\n        }\n    }\n    onSelect({ record }) {\n        if (!this.isSettingValue) {\n            const\n                { scheduler }                    = this,\n                { mainUnit, start, defaultSpan } = record,\n                options                          = {};\n            if (mainUnit && defaultSpan && this.useFixedDuration) {\n                let beginningOf = mainUnit;\n                if (start && typeof start === 'string') {\n                    beginningOf = DateHelper.parseTimeUnit(start) ?? start;\n                }\n                options.startDate = DateHelper.startOf(scheduler.viewportCenterDate, beginningOf);\n                if (typeof start === 'number') {\n                    options.startDate = DateHelper.add(options.startDate, start, mainUnit);\n                }\n                options.endDate = DateHelper.add(options.startDate, defaultSpan, mainUnit);\n            }\n            scheduler.zoomToLevel(record, options);\n        }\n    }\n    // If underlying store localizes, we need to sync the input field value\n    updateLocalization() {\n        super.updateLocalization();\n        this.syncInputFieldValue();\n    }\n}\n// Register this widget type with its Factory\nViewPresetCombo.initClass();\nViewPresetCombo._$name = 'ViewPresetCombo';", "//endregion\n// columns\nexport { default as DurationColumn } from '../lib/Scheduler/column/DurationColumn.js';\nexport { default as EventColorColumn } from '../lib/Scheduler/column/EventColorColumn.js';\nexport { default as ResourceCollapseColumn } from '../lib/Scheduler/column/ResourceCollapseColumn.js';\nexport { default as ResourceInfoColumn } from '../lib/Scheduler/column/ResourceInfoColumn.js';\nexport { default as ScaleColumn } from '../lib/Scheduler/column/ScaleColumn.js';\nexport { default as TimeAxisColumn } from '../lib/Scheduler/column/TimeAxisColumn.js';\nexport { default as VerticalTimeAxisColumn } from '../lib/Scheduler/column/VerticalTimeAxisColumn.js';\n// crud\nexport { default as AbstractCrudManager } from '../lib/Scheduler/crud/AbstractCrudManager.js';\nexport { default as AbstractCrudManagerMixin } from '../lib/Scheduler/crud/AbstractCrudManagerMixin.js';\nexport { default as AbstractCrudManagerValidation } from '../lib/Scheduler/crud/mixin/AbstractCrudManagerValidation.js';\nexport { default as AjaxTransport } from '../lib/Scheduler/crud/transport/AjaxTransport.js';\nexport { default as JsonEncoder } from '../lib/Scheduler/crud/encoder/JsonEncoder.js';\n// crud mixin\nexport { default as CrudManagerView } from '../lib/Scheduler/crud/mixin/CrudManagerView.js';\n// data\nexport { default as AssignmentStore } from '../lib/Scheduler/data/AssignmentStore.js';\nexport { default as CrudManager } from '../lib/Scheduler/data/CrudManager.js';\nexport { default as DependencyStore } from '../lib/Scheduler/data/DependencyStore.js';\nexport { default as EventStore } from '../lib/Scheduler/data/EventStore.js';\nexport { default as ResourceStore } from '../lib/Scheduler/data/ResourceStore.js';\nexport { default as ResourceTimeRangeStore } from '../lib/Scheduler/data/ResourceTimeRangeStore.js';\nexport { default as TimeAxis } from '../lib/Scheduler/data/TimeAxis.js';\nexport { default as TimeRangeStore } from '../lib/Scheduler/data/TimeRangeStore.js';\n// data util\nexport { default as AbstractRecurrenceIterator } from '../lib/Scheduler/data/util/recurrence/AbstractRecurrenceIterator.js';\nexport { default as DailyRecurrenceIterator } from '../lib/Scheduler/data/util/recurrence/DailyRecurrenceIterator.js';\nexport { default as EventDayIndex } from '../lib/Scheduler/data/util/EventDayIndex.js';\nexport { default as MonthlyRecurrenceIterator } from '../lib/Scheduler/data/util/recurrence/MonthlyRecurrenceIterator.js';\nexport { default as RecurrenceDayRuleEncoder } from '../lib/Scheduler/data/util/recurrence/RecurrenceDayRuleEncoder.js';\nexport { default as RecurrenceLegend } from '../lib/Scheduler/data/util/recurrence/RecurrenceLegend.js';\nexport { default as WeeklyRecurrenceIterator } from '../lib/Scheduler/data/util/recurrence/WeeklyRecurrenceIterator.js';\nexport { default as YearlyRecurrenceIterator } from '../lib/Scheduler/data/util/recurrence/YearlyRecurrenceIterator.js';\n// data mixin\nexport { default as AssignmentStoreMixin } from '../lib/Scheduler/data/mixin/AssignmentStoreMixin.js';\nexport { default as AttachToProjectMixin } from '../lib/Scheduler/data/mixin/AttachToProjectMixin.js';\nexport { default as DependencyStoreMixin } from '../lib/Scheduler/data/mixin/DependencyStoreMixin.js';\nexport { default as EventStoreMixin } from '../lib/Scheduler/data/mixin/EventStoreMixin.js';\nexport { default as GetEventsMixin } from '../lib/Scheduler/data/mixin/GetEventsMixin.js';\nexport { default as PartOfBaseProject } from '../lib/Scheduler/data/mixin/PartOfBaseProject.js';\nexport { default as PartOfProject } from '../lib/Scheduler/data/mixin/PartOfProject.js';\nexport { default as ProjectConsumer } from '../lib/Scheduler/data/mixin/ProjectConsumer.js';\nexport { default as ProjectCrudManager } from '../lib/Scheduler/data/mixin/ProjectCrudManager.js';\nexport { default as RecurringEventsMixin } from '../lib/Scheduler/data/mixin/RecurringEventsMixin.js';\nexport { default as RecurringTimeSpansMixin } from '../lib/Scheduler/data/mixin/RecurringTimeSpansMixin.js';\nexport { default as ResourceStoreMixin } from '../lib/Scheduler/data/mixin/ResourceStoreMixin.js';\n// data plugin\nexport { default as StoreTimeZonePlugin } from '../lib/Scheduler/data/plugin/StoreTimeZonePlugin.js';\n// eventlayout\nexport { default as HorizontalLayoutPack } from '../lib/Scheduler/eventlayout/HorizontalLayoutPack.js';\nexport { default as HorizontalLayoutStack } from '../lib/Scheduler/eventlayout/HorizontalLayoutStack.js';\nexport { default as PackMixin } from '../lib/Scheduler/eventlayout/PackMixin.js';\n// feature base\nexport { default as DragBase } from '../lib/Scheduler/feature/base/DragBase.js';\nexport { default as DragCreateBase } from '../lib/Scheduler/feature/base/DragCreateBase.js';\nexport { default as EditBase } from '../lib/Scheduler/feature/base/EditBase.js';\nexport { default as ResourceTimeRangesBase } from '../lib/Scheduler/feature/base/ResourceTimeRangesBase.js';\nexport { default as TimeSpanMenuBase } from '../lib/Scheduler/feature/base/TimeSpanMenuBase.js';\nexport { default as TooltipBase } from '../lib/Scheduler/feature/base/TooltipBase.js';\n// feature\nexport { default as AbstractTimeRanges } from '../lib/Scheduler/feature/AbstractTimeRanges.js';\nexport { default as ColumnLines } from '../lib/Scheduler/feature/ColumnLines.js';\nexport { default as Dependencies } from '../lib/Scheduler/feature/Dependencies.js';\nexport { default as DependencyEdit } from '../lib/Scheduler/feature/DependencyEdit.js';\nexport { default as EventCopyPaste } from '../lib/Scheduler/feature/EventCopyPaste.js';\nexport { default as EventDrag } from '../lib/Scheduler/feature/EventDrag.js';\nexport { default as EventDragCreate } from '../lib/Scheduler/feature/EventDragCreate.js';\nexport { default as EventDragSelect } from '../lib/Scheduler/feature/EventDragSelect.js';\nexport { default as EventEdit } from '../lib/Scheduler/feature/EventEdit.js';\nexport { default as EventFilter } from '../lib/Scheduler/feature/EventFilter.js';\nexport { default as EventMenu } from '../lib/Scheduler/feature/EventMenu.js';\nexport { default as EventNonWorkingTime } from '../lib/Scheduler/feature/EventNonWorkingTime.js';\nexport { default as EventResize } from '../lib/Scheduler/feature/EventResize.js';\nexport { default as EventTooltip } from '../lib/Scheduler/feature/EventTooltip.js';\nexport { default as GroupSummary } from '../lib/Scheduler/feature/GroupSummary.js';\nexport { default as HeaderZoom } from '../lib/Scheduler/feature/HeaderZoom.js';\nexport { default as Labels } from '../lib/Scheduler/feature/Labels.js';\nexport { default as NonWorkingTime } from '../lib/Scheduler/feature/NonWorkingTime.js';\nexport { default as Pan } from '../lib/Scheduler/feature/Pan.js';\nexport { default as ResourceMenu } from '../lib/Scheduler/feature/ResourceMenu.js';\nexport { default as ResourceTimeRanges } from '../lib/Scheduler/feature/ResourceTimeRanges.js';\nexport { default as RowReorder } from '../lib/Scheduler/feature/RowReorder.js';\nexport { default as RowResize } from '../lib/Scheduler/feature/RowResize.js';\nexport { default as ScheduleContext } from '../lib/Scheduler/feature/ScheduleContext.js';\nexport { default as ScheduleMenu } from '../lib/Scheduler/feature/ScheduleMenu.js';\nexport { default as ScheduleTooltip } from '../lib/Scheduler/feature/ScheduleTooltip.js';\nexport { default as SimpleEventEdit } from '../lib/Scheduler/feature/SimpleEventEdit.js';\nexport { default as Split } from '../lib/Scheduler/feature/Split.js';\nexport { default as StickyEvents } from '../lib/Scheduler/feature/StickyEvents.js';\nexport { default as Summary } from '../lib/Scheduler/feature/Summary.js';\nexport { default as TimeAxisHeaderMenu } from '../lib/Scheduler/feature/TimeAxisHeaderMenu.js';\nexport { default as TimelineSummary } from '../lib/Scheduler/feature/TimelineSummary.js';\nexport { default as TimeRanges } from '../lib/Scheduler/feature/TimeRanges.js';\nexport { default as TimeSelection } from '../lib/Scheduler/feature/TimeSelection.js';\n// feature mixin\nexport { default as DependencyCreation } from '../lib/Scheduler/feature/mixin/DependencyCreation.js';\nexport { default as DependencyTooltip } from '../lib/Scheduler/feature/mixin/DependencyTooltip.js';\nexport { default as NonWorkingTimeMixin } from '../lib/Scheduler/feature/mixin/NonWorkingTimeMixin.js';\nexport { default as RecurringEventEdit } from '../lib/Scheduler/feature/mixin/RecurringEventEdit.js';\nexport { default as TaskEditStm } from '../lib/Scheduler/feature/mixin/TaskEditStm.js';\nexport { default as TaskEditTransactional } from '../lib/Scheduler/feature/mixin/TaskEditTransactional.js';\nexport { default as TransactionalFeature } from '../lib/Scheduler/feature/mixin/TransactionalFeature.js';\n// export\nexport { default as MultiPageExporter } from '../lib/Scheduler/feature/export/exporter/MultiPageExporter.js';\nexport { default as MultiPageVerticalExporter } from '../lib/Scheduler/feature/export/exporter/MultiPageVerticalExporter.js';\nexport { default as PdfExport } from '../lib/Scheduler/feature/export/PdfExport.js';\nexport { default as Print } from '../lib/Scheduler/feature/export/Print.js';\nexport { default as ScheduleRangeCombo } from '../lib/Scheduler/view/export/field/ScheduleRangeCombo.js';\nexport { default as SchedulerExportDialog } from '../lib/Scheduler/view/export/SchedulerExportDialog.js';\nexport { default as SinglePageExporter } from '../lib/Scheduler/feature/export/exporter/SinglePageExporter.js';\nexport { ScheduleRange } from '../lib/Scheduler/feature/export/Utils.js';\n// features experimental\nexport { default as ExcelExporter } from '../lib/Scheduler/feature/experimental/ExcelExporter.js';\n// model\nexport { default as AssignmentModel } from '../lib/Scheduler/model/AssignmentModel.js';\nexport { default as DependencyBaseModel } from '../lib/Scheduler/model/DependencyBaseModel.js';\nexport { default as DependencyModel } from '../lib/Scheduler/model/DependencyModel.js';\nexport { default as EventModel } from '../lib/Scheduler/model/EventModel.js';\nexport { default as ProjectModel } from '../lib/Scheduler/model/ProjectModel.js';\nexport { default as RecurrenceModel } from '../lib/Scheduler/model/RecurrenceModel.js';\nexport { default as ResourceModel } from '../lib/Scheduler/model/ResourceModel.js';\nexport { default as ResourceTimeRangeModel } from '../lib/Scheduler/model/ResourceTimeRangeModel.js';\nexport { default as TimeRangeModel } from '../lib/Scheduler/model/TimeRangeModel.js';\nexport { default as TimeSpan } from '../lib/Scheduler/model/TimeSpan.js';\n// model mixin\nexport { default as AssignmentModelMixin } from '../lib/Scheduler/model/mixin/AssignmentModelMixin.js';\nexport { default as EventModelMixin } from '../lib/Scheduler/model/mixin/EventModelMixin.js';\nexport { default as ProjectModelCommon } from '../lib/Scheduler/model/mixin/ProjectModelCommon.js';\nexport { default as ProjectModelMixin } from '../lib/Scheduler/model/mixin/ProjectModelMixin.js';\nexport { default as ProjectModelTimeZoneMixin } from '../lib/Scheduler/model/mixin/ProjectModelTimeZoneMixin.js';\nexport { default as RecurringTimeSpan } from '../lib/Scheduler/model/mixin/RecurringTimeSpan.js';\nexport { default as ResourceModelMixin } from '../lib/Scheduler/model/mixin/ResourceModelMixin.js';\nexport { default as TimeZonedDatesMixin } from '../lib/Scheduler/model/mixin/TimeZonedDatesMixin.js';\n// preset\nexport { default as PresetManager } from '../lib/Scheduler/preset/PresetManager.js';\nexport { default as PresetStore } from '../lib/Scheduler/preset/PresetStore.js';\nexport { default as ViewPreset } from '../lib/Scheduler/preset/ViewPreset.js';\n// tooltip\nexport { default as ClockTemplate } from '../lib/Scheduler/tooltip/ClockTemplate.js';\n// util\nexport { default as RectangularPathFinder } from '../lib/Scheduler/util/RectangularPathFinder.js';\nexport { default as ScheduleTableExporter } from '../lib/Scheduler/util/ScheduleTableExporter.js';\n//view\nexport { default as HorizontalTimeAxis } from '../lib/Scheduler/view/HorizontalTimeAxis.js';\nexport { default as TimeAxisSubGrid } from '../lib/Scheduler/view/TimeAxisSubGrid.js';\nexport { default as Scheduler } from '../lib/Scheduler/view/Scheduler.js';\nexport { default as SchedulerBase } from '../lib/Scheduler/view/SchedulerBase.js';\nexport { default as EventEditor } from '../lib/Scheduler/view/EventEditor.js';\nexport { default as TimeAxisViewModel } from '../lib/Scheduler/view/model/TimeAxisViewModel.js';\nexport { default as TimelineBase } from '../lib/Scheduler/view/TimelineBase.js';\nexport { default as ResourceHeader } from '../lib/Scheduler/view/ResourceHeader.js';\nexport { default as TimelineHistogramBase } from '../lib/Scheduler/view/TimelineHistogramBase.js';\nexport { default as TimelineHistogram } from '../lib/Scheduler/view/TimelineHistogram.js';\n//view mixin\nexport { default as DelayedRecordsRendering } from '../lib/Scheduler/view/mixin/DelayedRecordsRendering.js';\nexport { default as Describable } from '../lib/Scheduler/view/mixin/Describable.js';\nexport { default as EventNavigation } from '../lib/Scheduler/view/mixin/EventNavigation.js';\nexport { default as EventSelection } from '../lib/Scheduler/view/mixin/EventSelection.js';\nexport { default as RecurringEvents } from '../lib/Scheduler/view/mixin/RecurringEvents.js';\nexport { default as SchedulerDom } from '../lib/Scheduler/view/mixin/SchedulerDom.js';\nexport { default as SchedulerDomEvents } from '../lib/Scheduler/view/mixin/SchedulerDomEvents.js';\nexport { default as SchedulerEventRendering } from '../lib/Scheduler/view/mixin/SchedulerEventRendering.js';\nexport { default as SchedulerRegions } from '../lib/Scheduler/view/mixin/SchedulerRegions.js';\nexport { default as SchedulerResourceRendering } from '../lib/Scheduler/view/mixin/SchedulerResourceRendering.js';\nexport { default as SchedulerScroll } from '../lib/Scheduler/view/mixin/SchedulerScroll.js';\nexport { default as SchedulerState } from '../lib/Scheduler/view/mixin/SchedulerState.js';\nexport { default as SchedulerStores } from '../lib/Scheduler/view/mixin/SchedulerStores.js';\nexport { default as TimelineDateMapper } from '../lib/Scheduler/view/mixin/TimelineDateMapper.js';\nexport { default as TimelineDomEvents } from '../lib/Scheduler/view/mixin/TimelineDomEvents.js';\nexport { default as TimelineEventRendering } from '../lib/Scheduler/view/mixin/TimelineEventRendering.js';\nexport { default as TimelineHistogramGrouping } from '../lib/Scheduler/view/mixin/TimelineHistogramGrouping.js';\nexport { default as TimelineHistogramScaleColumn } from '../lib/Scheduler/view/mixin/TimelineHistogramScaleColumn.js';\nexport { default as TimelineScroll } from '../lib/Scheduler/view/mixin/TimelineScroll.js';\nexport { default as TimelineState } from '../lib/Scheduler/view/mixin/TimelineState.js';\nexport { default as TimelineViewPresets } from '../lib/Scheduler/view/mixin/TimelineViewPresets.js';\nexport { default as TimelineZoomable } from '../lib/Scheduler/view/mixin/TimelineZoomable.js';\nexport { default as TransactionalFeatureMixin } from '../lib/Scheduler/view/mixin/TransactionalFeatureMixin.js';\n// view orientation\nexport { default as HorizontalRendering } from '../lib/Scheduler/view/orientation/HorizontalRendering.js';\nexport { default as VerticalRendering } from '../lib/Scheduler/view/orientation/VerticalRendering.js';\n//view recurrence\nexport { default as RecurrenceCombo } from '../lib/Scheduler/view/recurrence/field/RecurrenceCombo.js';\nexport { default as RecurrenceConfirmationPopup } from '../lib/Scheduler/view/recurrence/RecurrenceConfirmationPopup.js';\nexport { default as RecurrenceDaysButtonGroup } from '../lib/Scheduler/view/recurrence/field/RecurrenceDaysButtonGroup.js';\nexport { default as RecurrenceDaysCombo } from '../lib/Scheduler/view/recurrence/field/RecurrenceDaysCombo.js';\nexport { default as RecurrenceEditor } from '../lib/Scheduler/view/recurrence/RecurrenceEditor.js';\nexport { default as RecurrenceEditorPanel } from '../lib/Scheduler/view/recurrence/RecurrenceEditorPanel.js';\nexport { default as RecurrenceFrequencyCombo } from '../lib/Scheduler/view/recurrence/field/RecurrenceFrequencyCombo.js';\nexport { default as RecurrenceLegendButton } from '../lib/Scheduler/view/recurrence/RecurrenceLegendButton.js';\nexport { default as RecurrenceMonthDaysButtonGroup } from '../lib/Scheduler/view/recurrence/field/RecurrenceMonthDaysButtonGroup.js';\nexport { default as RecurrenceMonthsButtonGroup } from '../lib/Scheduler/view/recurrence/field/RecurrenceMonthsButtonGroup.js';\nexport { default as RecurrencePositionsCombo } from '../lib/Scheduler/view/recurrence/field/RecurrencePositionsCombo.js';\nexport { default as RecurrenceStopConditionCombo } from '../lib/Scheduler/view/recurrence/field/RecurrenceStopConditionCombo.js';\n// widget\nexport { default as EventColorPicker } from '../lib/Scheduler/widget/EventColorPicker.js';\nexport { default as EventColorField } from '../lib/Scheduler/widget/EventColorField.js';\nexport { default as ProjectCombo } from '../lib/Scheduler/widget/ProjectCombo.js';\nexport { default as ResourceCombo } from '../lib/Scheduler/widget/ResourceCombo.js';\nexport { default as ResourceFilter } from '../lib/Scheduler/widget/ResourceFilter.js';\nexport { default as SchedulerDatePicker } from '../lib/Scheduler/widget/SchedulerDatePicker.js';\nexport { default as UndoRedo } from '../lib/Scheduler/widget/UndoRedo.js';\nexport { default as ViewPresetCombo } from '../lib/Scheduler/widget/ViewPresetCombo.js';\n\n\nimport GlobalEvents from '../lib/Core/GlobalEvents.js';\nimport BrowserHelper from '../lib/Core/helper/BrowserHelper.js';\nimport VersionHelper from '../lib/Core/helper/VersionHelper.js';\nimport Widget from '../lib/Core/widget/Widget.js';\nimport Toast from '../lib/Core/widget/Toast.js';\nimport Override from '../lib/Core/mixin/Override.js';\nimport DomHelper from '../lib/Core/helper/DomHelper.js';\nimport SchedulerBase from '../lib/Scheduler/view/SchedulerBase.js';\nimport HorizontalRendering from '../lib/Scheduler/view/orientation/HorizontalRendering.js';\nimport VerticalRendering from '../lib/Scheduler/view/orientation/VerticalRendering.js';\nimport Dependencies from '../lib/Scheduler/feature/Dependencies.js';\n(() => {\n    //region Common\n    const\n        HOSTS            = [\n            'bryntum.com',\n            'cdpn.io',\n            'react-gantt.com',\n            'vue-gantt.com',\n            'vue-scheduler.com',\n            'react-scheduler.com',\n            'angular-scheduler.com',\n            'angular-calendar.com',\n            'vue-calendar.com',\n            'react-calendar.com',\n            'lmctfy.net',\n            'bryntum-dev-ed.develop.lightning.force.com'\n        ],\n        ONE_DAY          = 1000 * 60 * 60 * 24,\n        EXPIRING_CLASSES = [],\n        location = (globalThis || self).location;\n    if (!VersionHelper.isTestEnv && (HOSTS.some(host => location.host.includes(host)) || /\\/docs/.test(location.href))) {\n        return;\n    }\n    let initialized;\n    function initExpiryHelper(owner, baseClass) {\n        if (!initialized) {\n            initialized = true;\n            ExpiryHelper.construct({\n                widget : owner\n            });\n        }\n        // do not remove this line (used to distinguish trial bundles by regexp)\n        owner.__foo = 'THISISTRIAL';\n    }\n    //endregion\n    //region ExpiryHelper\n    class ExpiryHelper {\n        static construct(config) {\n            const\n                me            = this,\n                product       = 'taskboard',\n                productName   = 'TaskBoard',\n                version       = VersionHelper.getVersion(product),\n                callHomeDelay = VersionHelper.isTestEnv ? 3000 : 1000 * 60,\n                blockUrl      = BrowserHelper.queryString.blockUrl;\n            Object.assign(me, {\n                version,\n                product,\n                Product          : productName,\n                verifyUrl        : VersionHelper.isTestEnv ? blockUrl : 'https://bryntum.com/verify/',\n                blocked          : false,\n                lastVersionCheck : 0,\n                trialKey         : `b-${product}-trial-start`,\n                versionCheckKey  : `b-${product}-verify-date`\n            }, config);\n            if (!VersionHelper.isTestEnv) {\n                console.log(`Bryntum ${productName} Trial Version`);\n            }\n            me.cacheTrialStartTime();\n            if (me.isExpired) {\n                if (document.readyState === 'complete') {\n                    me.onTrialExpired();\n                }\n                else {\n                    document.addEventListener('readystatechange', () => {\n                        if (document.readyState === 'complete') {\n                            me.onTrialExpired();\n                        }\n                    });\n                }\n            }\n            // Call home to log trial usage, assuming localStorage access works reliably\n            // 1 min delay to be less easily detected\n            setTimeout(() => {\n                me.updateBlockedStatus();\n            }, callHomeDelay);\n        }\n        static cacheTrialStartTime() {\n            const\n                me         = this,\n                timeString = BrowserHelper.getLocalStorageItem(me.trialKey),\n                time       = Number(timeString);\n            if (time && !isNaN(time)) {\n                me.trialStartTime = time;\n            }\n            me.trialStartTime = me.trialStartTime || Date.now();\n            // First trial access, or no localstorage (no local storage meaning our expiration mechanism won't work. Only remote blocking will end the trial)\n            BrowserHelper.setLocalStorageItem(me.trialKey, me.trialStartTime);\n        }\n        static get isExpired() {\n            return this.blocked || (Date.now() - this.trialStartTime > ONE_DAY * 45) || window.bryntum?.[this.product]?.expired;\n        }\n        static updateBlockedStatus() {\n            const\n                me                  = this,\n                saveVersionCheckKey = () => BrowserHelper.setLocalStorageItem(me.versionCheckKey, Date.now());\n            me.lastVersionCheck = me.lastVersionCheck || BrowserHelper.getLocalStorageItem(me.versionCheckKey) || 0;\n            // Max 1 version check per session / day\n            if (me.lastVersionCheck && Date.now() - me.lastVersionCheck < ONE_DAY) {\n                return;\n            }\n            if (me.verifyUrl) {\n                const\n                    url    = encodeURIComponent(location.href),\n                    logUrl = `${me.verifyUrl}?id=${window.bryntum.license}&url=${url}`,\n                    img    = new Image();\n                img.onload = () => {\n                    // 2x2 image means trial is blocked due to violation\n                    if (img.naturalWidth === 2) {\n                        me.blockTrial();\n                    }\n                    else {\n                        // Just in case\n                        saveVersionCheckKey();\n                    }\n                };\n                img.onerror = () => {\n                    saveVersionCheckKey();\n                };\n                img.src = logUrl;\n            }\n            else {\n                saveVersionCheckKey();\n            }\n        }\n        static onTrialExpired() {\n            const rootEl = this.widget.rootElement;\n            if (!this.expirationShown) {\n                this.expirationShown = true;\n                if (!VersionHelper.isTestEnv) {\n                    console.warn(`Bryntum ${this.Product} trial version expired. Purchase a license at https://bryntum.com/store or contact us at https://bryntum.com/contact/ for licensing options.`);\n                }\n                rootEl.floatRoot && Toast.show({\n                    html        : `Psst! Your Bryntum ${this.Product} trial has expired. Please see <a href=\"https://bryntum.com/store\">our store</a> for licensing options`,\n                    timeout     : 20000,\n                    rootElement : rootEl\n                });\n            }\n            DomHelper.removeEachSelector(rootEl, '.b-sch-dependency');\n            DomHelper.forEachSelector(rootEl, '.b-container', element => {\n                const widget = Widget.fromElement(element, 'widget');\n                if (EXPIRING_CLASSES.some(cls => widget instanceof cls)) {\n                    this.maskExpiredWidget(widget);\n                }\n            });\n        }\n        static blockTrial() {\n            this.blocked = true;\n            // Get rid of version check timestamp\n            BrowserHelper.removeLocalStorageItem(this.versionCheckKey);\n            // To force expired state: Set a fake early trial timestamp\n            BrowserHelper.setLocalStorageItem(this.trialKey, 1);\n            this.onTrialExpired();\n        }\n        static maskExpiredWidget(widget) {\n            widget.mask({\n                text  : '<h3 style=\"margin:0\">Trial expired, <a href=\"https://bryntum.com/store\" style=\"margin:0 3px; color:inherit\">click here</a> to buy a license.</h3>',\n                icon  : 'b-fa b-fa-frown',\n                type  : 'trial',\n                cover : 'target'\n            });\n        }\n        static setWaterMark(element, {\n            darkColor = 'rgba(255, 255, 255, 0.03)',\n            lightColor = 'rgba(240, 240, 240, 0.54)'\n        } = {}) {\n            // Used for thumbnails\n            if (BrowserHelper.queryString.thumb != null) {\n                return;\n            }\n            const\n                color     = DomHelper.themeInfo?.name?.toLowerCase().endsWith('-dark') ? darkColor : lightColor,\n                svgString = `\n                   <svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"100%\" height=\"100%\" style=\"font-family:sans-serif;font-weight:900;fill:${color}\">\n                    <defs>\n                        <pattern id=\"company\" patternUnits=\"userSpaceOnUse\" width=\"400\" height=\"200\">\n                            <text y=\"30\" font-size=\"40\" id=\"name\">Bryntum</text>\n                            <text y=\"120\" x=\"200\" font-size=\"24\" id=\"trial\">Trial Version</text>\n                        </pattern>\n                        <pattern id=\"pattern\" xlink:href=\"#company\" patternTransform=\"rotate(-45)\">\n                            <use xlink:href=\"#name\" /><use xlink:href=\"#trial\" />\n                        </pattern>\n                    </defs>\n                    <rect width=\"100%\" height=\"100%\" fill=\"url(#pattern)\" />\n                </svg>`;\n            element.style.backgroundImage = `url('data:image/svg+xml;base64,${window.btoa(svgString)}')`;\n        };\n    }\n    //endregion\n    //region Common override\n    const applyBaseOverride = baseClass => {\n        EXPIRING_CLASSES.push(baseClass);\n        Override.apply(class {\n            static get target() {\n                return {\n                    class : baseClass\n                };\n            }\n            onPaintOverride() {\n                const\n                    me            = this,\n                    setWatermarks = () => {\n                        const targets = me.subGrids ? Object.values(me.subGrids) : [me];\n                        for (const target of targets) {\n                            if (target.element) {\n                                ExpiryHelper.setWaterMark(target.element);\n                            }\n                        }\n                    };\n                initExpiryHelper(me, baseClass);\n                setWatermarks();\n                // React to theme changes\n                GlobalEvents.on('theme', () => {\n                    setWatermarks();\n                });\n                if (ExpiryHelper.isExpired) {\n                    ExpiryHelper.maskExpiredWidget(me);\n                }\n            }\n        });\n    };\n    //endregion\n    if (typeof SchedulerBase !== 'undefined') {\n        applyBaseOverride(SchedulerBase);\n        // Disable rendering dependencies\n        Override.apply(class {\n            static get target() {\n                return {\n                    class : Dependencies\n                };\n            }\n            domSync() {\n                if (!ExpiryHelper.isExpired) {\n                    return this._overridden.domSync.apply(this, arguments);\n                }\n            }\n        });\n        Override.apply(class {\n            static get target() {\n                return {\n                    class : HorizontalRendering\n                };\n            }\n            onRenderDone() {\n                if (!ExpiryHelper.isExpired || this.scheduler?.isSchedulerPro) {\n                    return this._overridden.onRenderDone.apply(this, arguments);\n                }\n            }\n        });\n        Override.apply(class {\n            static get target() {\n                return {\n                    class : VerticalRendering\n                };\n            }\n            onRenderDone() {\n                if (!ExpiryHelper.isExpired || this.scheduler?.isSchedulerPro) {\n                    return this._overridden.onRenderDone.apply(this, arguments);\n                }\n            }\n        });\n    }\n})();\n(() => {\n    // do not load analytics code for specific domains\n    const ignoreDomainRe = /(.force.com|.lightning.com|.salesforce.com|lmctfy.net|qa.bryntum.com|qa2.bryntum.com)/;\n    // document location might be null in firefox in salesforce\n    if (!document.location || ignoreDomainRe.test(document.location.href) || window.top !== window) {\n        return;\n    }\n    let id;\n    const websiteUrls = [\n        'bryntum.com',\n        'cdpn.io'\n    ];\n    const\n        products   = ['calendar', 'grid', 'gantt', 'scheduler', 'schedulerpro', 'taskboard'],\n        frameworks = ['angular', 'react', 'vue', 'ionic'];\n    websiteUrls.splice(0, 0, ...products.map(prod => frameworks.map(framework => `${framework}-${prod}`)).concat('bryntum.com').flat());\n    if (document.location.host.match(websiteUrls.join('|'))) {\n        id = 'G-1VY6776VJP';\n    }\n    else {\n        id = 'G-H465KZDH8S';\n    }\n    const newScript = document.createElement('script');\n    newScript.onload = function() {\n        window.dataLayer = window.dataLayer || [];\n        function gtag() {\n            window.dataLayer.push(arguments);\n        }\n        gtag('js', new Date());\n        gtag('config', id);\n    };\n    document.head.appendChild(newScript);\n    newScript.src = 'https://www.googletagmanager.com/gtag/js?id=' + id;\n})();\n"],
  "mappings": "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",
  "names": ["GroupSummary", "RowResize", "Split", "ExcelExporter"]
}
