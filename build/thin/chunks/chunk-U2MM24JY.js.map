{
  "version": 3,
  "sources": ["../../../../Grid/lib/Grid/column/NumberColumn.js", "../../../../Grid/lib/Grid/column/TreeColumn.js", "../../../../Grid/lib/Grid/feature/Tree.js"],
  "sourcesContent": ["import Column from './Column.js';\nimport ColumnStore from '../data/ColumnStore.js';\nimport NumberFormat from '../../Core/helper/util/NumberFormat.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\n/**\n * @module Grid/column/NumberColumn\n */\n/**\n * A column for showing/editing numbers.\n *\n * Default editor is a {@link Core.widget.NumberField NumberField}.\n *\n * ```javascript\n * new Grid({\n *     appendTo : document.body,\n *     columns : [\n *         { type: 'number', min: 0, max : 100, field: 'score' }\n *     ]\n * });\n * ```\n *\n * Provide a {@link Core/helper/util/NumberFormat} config as {@link #config-format} to be able to show currency. For\n * example:\n * ```javascript\n * new Grid({\n *     appendTo : document.body,\n *     columns : [\n *         {\n *             type   : 'number',\n *             format : {\n *                style    : 'currency',\n *                currency : 'USD'\n *             }\n *         }\n *     ]\n * });\n * ```\n *\n * {@inlineexample Grid/column/NumberColumn.js}\n *\n * @extends Grid/column/Column\n * @classtype number\n * @column\n */\nexport default class NumberColumn extends Column {\n    //region Config\n    static type = 'number';\n    // Type to use when auto adding field\n    static fieldType = 'number';\n    static fields = [\n        'format',\n        /**\n         * The minimum value for the field used during editing.\n         * @config {Number} min\n         * @category Common\n         */\n        'min',\n        /**\n         * The maximum value for the field used during editing.\n         * @config {Number} max\n         * @category Common\n         */\n        'max',\n        /**\n         * Step size for the field used during editing.\n         * @config {Number} step\n         * @category Common\n         */\n        'step',\n        /**\n         * Large step size for the field used during editing. In effect for `SHIFT + click/arrows`\n         * @config {Number} largeStep\n         * @category Common\n         */\n        'largeStep',\n        /**\n         * Unit to append to displayed value.\n         * @config {String} unit\n         * @category Common\n         */\n        'unit'\n    ];\n    static get defaults() {\n        return {\n            filterType : 'number',\n            /**\n             * The format to use for rendering numbers.\n             *\n             * By default, the locale's default number formatter is used. For `en-US`, the\n             * locale default is a maximum of 3 decimal digits, using thousands-based grouping.\n             * This would render the number `1234567.98765` as `'1,234,567.988'`.\n             *\n             * @config {String|NumberFormatConfig}\n             */\n            format : ''\n        };\n    }\n    //endregion\n    //region Init\n    get defaultEditor() {\n        const { format, name, max, min, step, largeStep, align } = this;\n        // Remove any undefined configs, to allow config system to use default values instead\n        return ObjectHelper.cleanupProperties({\n            type      : 'numberfield',\n            format,\n            name,\n            max,\n            min,\n            step,\n            largeStep,\n            textAlign : align\n        });\n    }\n    get formatter() {\n        const\n            me         = this,\n            { format } = me;\n        let formatter = me._formatter;\n        if (!formatter || me._lastFormat !== format) {\n            me._formatter = formatter = NumberFormat.get(me._lastFormat = format);\n        }\n        return formatter;\n    }\n    formatValue(value) {\n        if (value != null) {\n            value = this.formatter.format(value);\n            if (this.unit) {\n                value = `${value}${this.unit}`;\n            }\n        }\n        return value ?? '';\n    }\n    /**\n     * Renderer that displays a formatted number in the cell. If you create a custom renderer, and want to include the\n     * formatted number you can call `defaultRenderer` from it.\n     *\n     * ```javascript\n     * new Grid({\n     *     columns: [\n     *         {\n     *             type   : 'number',\n     *             text   : 'Total cost',\n     *             field  : 'totalCost',\n     *             format : {\n     *                 style    : 'currency',\n     *                 currency : 'USD'\n     *             },\n     *             renderer({ value }) {\n     *                  return `Total cost: ${this.defaultRenderer({ value })}`;\n     *             }\n     *         }\n     *     ]\n     * }\n     * ```\n     *\n     * @param {Object} rendererData The data object passed to the renderer\n     * @param {Number} rendererData.value The value to display\n     * @returns {String} Formatted number\n     */\n    defaultRenderer({ value }) {\n        return this.formatValue(value);\n    }\n}\nColumnStore.registerColumnType(NumberColumn, true);\nNumberColumn.exposeProperties();\nNumberColumn._$name = 'NumberColumn';", "import Column from './Column.js';\nimport ColumnStore from '../data/ColumnStore.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\n/**\n * @module Grid/column/TreeColumn\n */\nlet currentParentHasIcon = false;\n/**\n * A column that displays a tree structure when using the {@link Grid.feature.Tree tree} feature.\n *\n * Default editor is a {@link Core.widget.TextField TextField}.\n *\n * TreeColumn provides configs to define icons for {@link #config-expandIconCls expanded} /\n * {@link #config-collapseIconCls collapsed} nodes, {@link #config-expandedFolderIconCls expanded folder} /\n * {@link #config-collapsedFolderIconCls collapsed folder} nodes and {@link #config-leafIconCls leaf} nodes.\n *\n * When the TreeColumn renders its cells, it will look for two special fields {@link Grid.data.GridRowModel#field-href}\n * and {@link Grid.data.GridRowModel#field-target}. Specifying `href` will produce a link for the TreeNode,\n * and `target` will have the same meaning as in an A tag:\n *\n * ```javascript\n * {\n *    id        : 1,\n *    name      : 'Some external link'\n *    href      : '//www.website.com\",\n *    target    : '_blank\"\n * }\n * ```\n *\n * ## Snippet\n * ```javascript\n * new TreeGrid({\n *     appendTo : document.body,\n *\n *     columns : [\n *          { type: 'tree', field: 'name' }\n *     ]\n * });\n * ```\n *\n * {@inlineexample Grid/column/TreeColumn.js}\n *\n * ## Cell renderers\n *\n * You can affect the contents and styling of cells in this column using a\n * {@link Grid.column.TreeColumn#config-renderer} function.\n *\n * ```javascript\n * const grid = new Grid({\n *   columns : [{\n *       type       : 'tree',\n *       field      : 'name',\n *       text       : 'Name',\n *       renderer({ value, record }) {\n *         return `${value} (${record.childLevel})`\n *       }\n *     }]\n * });\n * ```\n *\n * @classtype tree\n * @extends Grid/column/Column\n * @column\n */\nexport default class TreeColumn extends Column {\n    static $name = 'TreeColumn';\n    static type = 'tree';\n    static get defaults() {\n        return {\n            tree     : true,\n            hideable : false,\n            minWidth : 150\n        };\n    }\n    static get fields() {\n        return [\n            /**\n             * The icon to use for the collapse icon in collapsed state\n             * @config {String|null} expandIconCls\n             */\n            { name : 'expandIconCls', defaultValue : 'b-icon b-icon-tree-expand' },\n            /**\n             * The icon to use for the collapse icon in expanded state\n             * @config {String|null} collapseIconCls\n             */\n            { name : 'collapseIconCls', defaultValue : 'b-icon b-icon-tree-collapse' },\n            /**\n             * The icon to use for the collapse icon in expanded state\n             * @config {String|null} collapsedFolderIconCls\n             */\n            { name : 'collapsedFolderIconCls' },\n            /**\n             * The icon to use for the collapse icon in expanded state\n             * @config {String|null} expandedFolderIconCls\n             */\n            { name : 'expandedFolderIconCls' },\n            /**\n             * Size of the child indent in em. Resulting indent is indentSize multiplied by child level.\n             * @config {Number} indentSize\n             * @default 1.7\n             */\n            { name : 'indentSize', defaultValue : 1.7 },\n            /**\n             * The icon to use for the leaf nodes in the tree\n             * @config {String|null} leafIconCls\n             */\n            { name : 'leafIconCls', defaultValue : 'b-icon b-icon-tree-leaf' },\n            { name : 'editTargetSelector', defaultValue : '.b-tree-cell-value' },\n            /**\n             * Renderer function, used to format and style the content displayed in the cell. Return the cell text you\n             * want to display. Can also affect other aspects of the cell, such as styling.\n             *\n             * <div class=\"note\">\n             * As the TreeColumn adds its own cell content to the column, there is a limit to what is supported in the\n             * renderer function in comparison with an ordinary\n             * {@link Grid.column.Column#config-renderer Column renderer}. Most notably is that changing `cellElement`\n             * content can yield unexpected results as it will be updated later in the rendering process.\n             * </div>\n             *\n             * You can also return a {@link Core.helper.DomHelper#typedef-DomConfig} object describing the markup\n             * ```javascript\n             * new Grid({\n             *     columns : [\n             *         {\n             *              type  : 'tree',\n             *              field : 'name'\n             *              text  : 'Name',\n             *              renderer : ({ record }) => {\n             *                  return {\n             *                      class : 'myClass',\n             *                      children : [\n             *                          {\n             *                              tag : 'i',\n             *                              class : 'fa fa-pen'\n             *                          },\n             *                          {\n             *                              tag : 'span',\n             *                              html : record.name\n             *                          }\n             *                      ]\n             *                  };\n             *              }\n             *         }\n             *     ]\n             * });\n             * ```\n             *\n             * You can modify the row element too from inside a renderer to add custom CSS classes:\n             *\n             * ```javascript\n             * new Grid({\n             *     columns : [\n             *         {\n             *             type     : 'tree',\n             *             field    : 'name',\n             *             text     : 'Name',\n             *             renderer : ({ record, row }) => {\n             *                // Add special CSS class to new rows that have not yet been saved\n             *               row.cls.newRow = record.isPhantom;\n             *\n             *               return record.name;\n             *         }\n             *     ]\n             * });\n             * ```\n             *\n             * @config {Function} renderer\n             * @param {Object} renderData Object containing renderer parameters\n             * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc. Can be `null` in case of export\n             * @param {*} renderData.value Value to be displayed in the cell\n             * @param {Core.data.Model} renderData.record Record for the row\n             * @param {Grid.column.Column} renderData.column This column\n             * @param {Grid.view.Grid} renderData.grid This grid\n             * @param {Grid.row.Row} renderData.row Row object. Can be null in case of export. Use the\n             *   {@link Grid.row.Row#function-assignCls row's API} to manipulate CSS class names.\n             * @param {Object} renderData.size Set `size.height` to specify the desired row height for the current row.\n             *   Largest specified height is used, falling back to configured {@link Grid/view/Grid#config-rowHeight}\n             *   in case none is specified. Can be null in case of export\n             * @param {Number} renderData.size.height Set this to request a certain row height\n             * @param {Number} renderData.size.configuredHeight Row height that will be used if none is requested\n             * @param {Boolean} renderData.isExport True if record is being exported to allow special handling during export.\n             * @param {Boolean} renderData.isMeasuring True if the column is being measured for a `resizeToFitContent` call.\n             *   In which case an advanced renderer might need to take different actions.\n             * @returns {String|DomConfig|null}\n             *\n             * @category Rendering\n             */\n            'renderer'\n        ];\n    }\n    constructor(config, store) {\n        super(...arguments);\n        const me = this;\n        // We handle htmlEncoding in this class rather than relying on the generic Row DOM manipulation\n        // since this class requires quite a lot of DOM infrastructure around the actual rendered content\n        me.shouldHtmlEncode = me.htmlEncode;\n        me.setData('htmlEncode', false);\n        // add tree renderer (which calls original renderer internally)\n        if (me.renderer) {\n            me.originalRenderer = me.renderer;\n        }\n        me.renderer = me.treeRenderer.bind(me);\n    }\n    /**\n     * A column renderer that is automatically added to the column with { tree: true }. It adds padding and node icons\n     * to the cell to make the grid appear to be a tree. The original renderer is called in the process.\n     * @private\n     */\n    treeRenderer(renderData) {\n        const\n            me       = this,\n            {\n                grid,\n                cellElement,\n                row,\n                record,\n                isExport\n            }           = renderData,\n            gridMeta    = record.instanceMeta(grid.store),\n            isCollapsed = !record.isLeaf && gridMeta.collapsed,\n            innerConfig = {\n                className : 'b-tree-cell-value'\n            },\n            children    = [innerConfig],\n            result      = {\n                className : {\n                    'b-tree-cell-inner' : 1\n                },\n                tag    : record.href ? 'a' : 'div',\n                href   : record.href,\n                target : record.target,\n                children\n            };\n        let outputIsObject, iconCls, { value } = renderData,\n            renderingColumn = me;\n        const parentRenderer = grid.isTreeGrouped && !record.isLeaf && grid.features.treeGroup.parentRenderer;\n        if (me.originalRenderer || parentRenderer) {\n            let rendererHtml;\n            if (parentRenderer) {\n                if (record.field) {\n                    renderingColumn = grid.columns.get(record.field);\n                    value = renderingColumn.isWidgetColumn ? value\n                        : (renderingColumn.renderer || renderingColumn.defaultRenderer)?.call(\n                            renderingColumn,\n                            {\n                                ...renderData,\n                                column      : renderingColumn,\n                                value       : record.name,\n                                isTreeGroup : true\n                            }) ?? record.name;\n                }\n                rendererHtml = grid.features.treeGroup.parentRenderer({\n                    field  : record.field,\n                    value,\n                    column : renderingColumn,\n                    record : record.firstGroupChild,\n                    grid\n                });\n            }\n            else {\n                rendererHtml         = me.originalRenderer(renderData);\n            }\n            // Check if the cell content is going to be rendered by framework\n            const hasFrameworkRenderer = grid.hasFrameworkRenderer?.({\n                cellContent : rendererHtml,\n                renderingColumn\n            });\n            outputIsObject = typeof rendererHtml === 'object' && !hasFrameworkRenderer;\n            // Reset the value when framework is responsible for the cell content\n            value = hasFrameworkRenderer ? '' : (rendererHtml === false ? cellElement.innerHTML : rendererHtml);\n            // Save content to the `rendererHtml` to be used in processCellContent implemented by framework\n            renderData.rendererHtml = rendererHtml;\n        }\n        if (!outputIsObject) {\n            value = String(value ?? '');\n        }\n        if (isExport) {\n            return value;\n        }\n        if (!record.isLeaf) {\n            const\n                isCollapsed     = !record.isExpanded(grid.store),\n                expanderIconCls = isCollapsed ? me.expandIconCls : me.collapseIconCls,\n                folderIconCls   = isCollapsed ? me.collapsedFolderIconCls : me.expandedFolderIconCls;\n            cellElement.classList.add('b-tree-parent-cell');\n            children.unshift({\n                tag       : 'i',\n                className : {\n                    'b-tree-expander' : 1,\n                    [expanderIconCls] : 1,\n                    'b-empty-parent'  : !gridMeta.isLoadingChildren && (record.children !== true && !record.children?.length)\n                }\n            });\n            // Allow user to customize tree icon or opt out entirely\n            currentParentHasIcon = iconCls = renderData.iconCls || record.iconCls || folderIconCls;\n        }\n        else {\n            cellElement.classList.add('b-tree-leaf-cell');\n            // Allow user to customize tree icon or opt out entirely\n            iconCls = renderData.iconCls || record.iconCls || me.leafIconCls;\n        }\n        if (iconCls) {\n            children.splice(children.length - 1, 0, {\n                tag       : 'i',\n                className : {\n                    'b-tree-icon' : 1,\n                    [iconCls]     : 1\n                }\n            });\n        }\n        // Row can be just a dummy object for example when the renderer is called from Column#resizeToFitContent.\n        // Add/remove the various tree node classes.\n        // Keep row's aria state up to date\n        if (row.isRow && !record.isLeaf) {\n            row.setAttribute('aria-expanded', !isCollapsed);\n            if (isCollapsed) {\n                row.removeAttribute('aria-owns');\n            }\n            else {\n                for (const region in grid.subGrids) {\n                    const el = row.elements[region];\n                    // A branch node may be configured expanded, but yet have no children.\n                    // They may be added dynamically.\n                    DomHelper.setAttributes(el, {\n                        'aria-owns' : record.children?.length ? record.children?.map(r => `${grid.id}-${region}-${r.id}`).join(' ') : null\n                    });\n                }\n            }\n        }\n        // Array of DomConfigs\n        if (Array.isArray(value)) {\n            innerConfig.children = value;\n        }\n        // Single DomConfig\n        else if (outputIsObject) {\n            Object.assign(innerConfig, value);\n        }\n        // If we are encoding HTML, or there's no raw HTML, we can use the text property\n        // as the raw value, and DomSync will create a TextNode from that.\n        else if (renderingColumn.shouldHtmlEncode || !value.includes('<')) {\n            result.className['b-text-value'] = 1;\n            innerConfig.text = value;\n        }\n        // If we are accepting HTML without encoding it, and there is HTML we must use html property\n        else {\n            innerConfig.html = value;\n        }\n        const padding = (record.childLevel * me.indentSize + (record.isLeaf ? (currentParentHasIcon ? 2.0 : (iconCls ? 0.5 : 0.4)) : 0));\n        result.style = `padding-inline-start:${padding}em`;\n        return result;\n    }\n    // This function is not meant to be called by any code other than Base#getCurrentConfig().\n    // It extracts the current configs (fields) for the column, with special handling for the renderer\n    getCurrentConfig(options) {\n        const result = super.getCurrentConfig(options);\n        // Use app renderer\n        result.renderer = this.originalRenderer;\n        return result;\n    }\n}\nColumnStore.registerColumnType(TreeColumn, true);\nTreeColumn.exposeProperties();\nTreeColumn._$name = 'TreeColumn';", "import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\nimport '../column/TreeColumn.js';\n/**\n * @module Grid/feature/Tree\n */\nconst immediatePromise = Promise.resolve();\n/**\n * Feature that makes the grid work more like a tree. Included by default in {@link Grid.view.TreeGrid}. Requires\n * exactly one {@link Grid.column.TreeColumn} among grids columns. That column will have its renderer replaced with a\n * tree renderer that adds padding and icon to give the appearance of a tree. The original renderer is preserved and\n * also called.\n *\n * {@inlineexample Grid/feature/Tree.js}\n *\n * This feature is <strong>disabled</strong> by default. When enabled, the feature cannot be disabled during runtime.\n *\n * ## Keyboard shortcuts\n * This feature has the following default keyboard shortcuts:\n *\n * | Keys                 | Action                   | Action description                                                   |\n * |----------------------|--------------------------|----------------------------------------------------------------------|\n * | `Space`              | *toggleCollapseByKey*    | When focus on a parent node, this expands or collapses it's children |\n * | `ArrowRight`         | *expandIfSingleColumn*   | Expands a focused parent node if grid consist of one column only     |\n * | `Shift`+`ArrowRight` | *expandByKey*            | Expands a focused parent node                                        |\n * | `ArrowLeft`          | *collapseIfSingleColumn* | Collapses a focused parent node if grid consist of one column only   |\n * | `Shift`+`ArrowLeft`  | *collapseByKey*          | Collapses a focused parent node                                      |\n *\n * <div class=\"note\">Please note that <code>Ctrl</code> is the equivalent to <code>Command</code> and <code>Alt</code>\n * is the equivalent to <code>Option</code> for Mac users</div>\n *\n * For more information on how to customize keyboard shortcuts, please see\n * [our guide](#Grid/guides/customization/keymap.md)\n *\n * @extends Core/mixin/InstancePlugin\n *\n * @demo Grid/tree\n * @classtype tree\n * @feature\n */\nexport default class Tree extends InstancePlugin.mixin(Delayable) {\n    //region Config\n    static $name = 'Tree';\n    static configurable = {\n        /**\n         * Expand parent nodes when clicking on their cell\n         * @prp {Boolean}\n         * @default\n         */\n        expandOnCellClick : false,\n        /**\n         * See {@link #keyboard-shortcuts Keyboard shortcuts} for details\n         * @config {Object<String,String>}\n         */\n        keyMap : {\n            ' '                : 'toggleCollapseByKey',\n            ArrowRight         : 'expandIfSingleColumn',\n            'Shift+ArrowRight' : 'expandByKey',\n            ArrowLeft          : 'collapseIfSingleColumn',\n            'Shift+ArrowLeft'  : 'collapseByKey'\n        }\n    };\n    // Plugin configuration. This plugin chains some functions in Grid.\n    static get pluginConfig() {\n        return {\n            assign : ['collapseAll', 'expandAll', 'collapse', 'expand', 'expandTo', 'toggleCollapse'],\n            chain  : ['onElementPointerUp', 'onElementClick', 'bindStore', 'beforeRenderRow']\n        };\n    }\n    //endregion\n    //region Init\n    construct(client, config) {\n        super.construct(client, config);\n        // find column\n        if (!this.treeColumn) {\n            console.info('To use the tree feature, one column should be configured with `type: \\'tree\\'`');\n        }\n        client.store && this.bindStore(client.store);\n    }\n    doDisable(disable) {\n        if (disable) {\n            throw new Error('Tree feature cannot be disabled');\n        }\n    }\n    get store() {\n        return this.client.store;\n    }\n    get treeColumn() {\n        const\n            me          = this,\n            { columns } = me.client;\n        if (!me._treeColumn || !columns.includes(me._treeColumn)) {\n            me._treeColumn = columns.find(column => column.isTreeColumn);\n        }\n        return me._treeColumn;\n    }\n    bindStore(store) {\n        this.detachListeners('store');\n        store.ion({\n            name                  : 'store',\n            beforeLoadChildren    : 'onBeforeLoadChildren',\n            loadChildren          : 'onLoadChildren',\n            loadChildrenException : 'onLoadChildrenException',\n            beforeToggleNode      : 'onBeforeToggleNode',\n            thisObj               : this\n        });\n    }\n    //endregion\n    //region Expand & collapse\n    /**\n     * Collapse an expanded node or expand a collapsed. Optionally forcing a certain state.\n     * This function is exposed on Grid and can thus be called as `grid.toggleCollapse()`\n     * @param {String|Number|Core.data.Model} idOrRecord Record (the node itself) or id of a node to toggle\n     * @param {Boolean} [collapse] Force collapse (true) or expand (false)\n     * @on-owner\n     * @category Tree\n     */\n    async toggleCollapse(idOrRecord, collapse) {\n        if (idOrRecord == null) {\n            throw new Error('Tree#toggleCollapse must be passed a record');\n        }\n        const\n            me                = this,\n            { store, client } = me,\n            { rowManager }    = client,\n            record            = store.getById(idOrRecord),\n            meta              = record.instanceMeta(store);\n        // Record generation is incremented to force React/Vue wrappers to recreate UI elements\n        record.generation++;\n        if (await store.toggleCollapse(record, collapse)) {\n            const row = rowManager.getRowFor(record);\n            if (row && record.ancestorsExpanded()) {\n                // The row carries the expanded / collapsed classes, so we need to refresh it\n                row.render(null, null, false);\n            }\n            // Add a temporary cls, used by Scheduler & Gantt to prevent transitions on events/tasks\n            // Block multiple applications in the case of a recursive collapseAll operation\n            if (!me.isTogglingNode) {\n                client.element.classList.add('b-toggling-node');\n                me.isTogglingNode = true;\n                me.requestAnimationFrame(() => {\n                    client.element.classList.remove('b-toggling-node');\n                    me.isTogglingNode = false;\n                });\n            }\n            /**\n             * Fired before a parent node record is collapsed.\n             * @event collapseNode\n             * @param {Grid.view.Grid} source The firing Grid instance.\n             * @param {Core.data.Model} record The record which has been collapsed.\n             * @on-owner\n             */\n            /**\n             * Fired after a parent node record is expanded.\n             * @event expandNode\n             * @param {Grid.view.Grid} source The firing Grid instance.\n             * @param {Core.data.Model} record The record which has been expanded.\n             * @on-owner\n             */\n            client.trigger(meta.collapsed ? 'collapseNode' : 'expandNode', { record });\n            /**\n             * Fired after a parent node record toggles its collapsed state.\n             * @event toggleNode\n             * @param {Core.data.Model} record The record being toggled.\n             * @param {Boolean} collapse `true` if the node is being collapsed.\n             * @on-owner\n             */\n            client.trigger('toggleNode', { record, collapse : meta.collapsed });\n        }\n    }\n    /**\n     * Collapse a single node.\n     * This function is exposed on Grid and can thus be called as `grid.collapse()`\n     * @param {String|Number|Core.data.Model} idOrRecord Record (the node itself) or id of a node to collapse\n     * @on-owner\n     * @category Tree\n     */\n    async collapse(idOrRecord) {\n        return this.toggleCollapse(idOrRecord, true);\n    }\n    /**\n     * Expand a single node.\n     * This function is exposed on Grid and can thus be called as `grid.expand()`\n     * @param {String|Number|Core.data.Model} idOrRecord Record (the node itself) or id of a node to expand\n     * @on-owner\n     * @category Tree\n     */\n    async expand(idOrRecord) {\n        return this.toggleCollapse(idOrRecord, false);\n    }\n    onBeforeToggleNode({ record, collapse }) {\n        /**\n         * Fired before a parent node record toggles its collapsed state.\n         * @event beforeToggleNode\n         * @param {Grid.view.Grid} source The firing Grid instance.\n         * @param {Core.data.Model} record The record being toggled.\n         * @param {Boolean} collapse `true` if the node is being collapsed.\n         * @on-owner\n         */\n        this.client.trigger('beforeToggleNode', { record, collapse });\n    }\n    onBeforeLoadChildren({ source : store, params }) {\n        const\n            parent = store.getById(params[store.modelClass.idField]),\n            row    = this.client.rowManager.getRowFor(parent);\n        row?.addCls('b-loading-children');\n    }\n    onLoadChildren({ source : store, params }) {\n        const\n            parent = store.getById(params[store.modelClass.idField]),\n            row    = this.client.rowManager.getRowFor(parent);\n        row?.removeCls('b-loading-children');\n    }\n    onLoadChildrenException({ record }) {\n        const row = this.client.rowManager.getRowFor(record);\n        row?.removeCls('b-loading-children');\n    }\n    /**\n     * Expand or collapse all nodes, as specified by param, starting at the passed node (which defaults to the root node)\n     * @param {Boolean} [collapse] Set to true to collapse, false to expand (defaults to true)\n     * @param {Core.data.Model} [topNode] The topmost node from which to cascade a collapse.\n     * Defaults to the {@link Core.data.Store#property-rootNode}. Not included in the cascade if\n     * the root node is being used.\n     * @category Tree\n     */\n    async expandOrCollapseAll(collapse = true, topNode = this.store.rootNode) {\n        const\n            { client, store }         = this,\n            { animateTreeNodeToggle } = client,\n            promises                  = [],\n            childRecords              = [];\n        client.trigger('beforeToggleAllNodes', { collapse });\n        client.animateTreeNodeToggle = false;\n        // Each collapse/expand will trigger events on store, avoid that by suspending\n        store.suspendEvents();\n        store.traverse(record => {\n            const gridMeta = record.instanceMeta(store);\n            if (!record.isLeaf) {\n                if (collapse && !gridMeta.collapsed) {\n                    this.toggleCollapse(record, true);\n                    childRecords.push(...record.children);\n                }\n                else if (!collapse && gridMeta.collapsed) {\n                    if (Array.isArray(record.children)) {\n                        childRecords.push(...record.children);\n                    }\n                    promises.push(this.toggleCollapse(record, false));\n                }\n            }\n        }, topNode, topNode === store.rootNode);\n        store.resumeEvents();\n        return (collapse ? immediatePromise : Promise.all(promises)).then(() => {\n            // Return to top when collapsing all\n            client.refreshRows(collapse);\n            if (childRecords.length) {\n                if (collapse) {\n                    store.trigger('remove', { records : childRecords, isCollapse : true, isCollapseAll : true });\n                }\n                else {\n                    store.trigger('add', { records : childRecords, isExpand : true, isExpandAll : true });\n                }\n            }\n            client.trigger('toggleAllNodes', { collapse });\n            client.animateTreeNodeToggle = animateTreeNodeToggle;\n        });\n    }\n    /**\n     * Collapse all nodes.\n     * This function is exposed on Grid and can thus be called as `grid.collapseAll()`\n     * @on-owner\n     * @category Tree\n     */\n    async collapseAll() {\n        return this.expandOrCollapseAll(true);\n    }\n    /**\n     * Expand all nodes.\n     * This function is exposed on Grid and can thus be called as `grid.expandAll()`\n     * @on-owner\n     * @category Tree\n     */\n    async expandAll() {\n        return this.expandOrCollapseAll(false);\n    }\n    /**\n     * Expands parent nodes to make this node \"visible\".\n     * This function is exposed on Grid and can thus be called as `grid.expandTo()`\n     * @param {String|Number|Core.data.Model|String[]|Number[]|Core.data.Model[]} idOrRecord Record (the node itself),\n     * or id of a node. Also accepts arrays of the same types.\n     * @param {Boolean} [scrollIntoView=true] A flag letting you control whether to scroll the record into view\n     * @on-owner\n     * @async\n     * @category Tree\n     */\n    async expandTo(idOrRecord, scrollIntoView = true) {\n        const\n            me                        = this,\n            { store, client }         = me,\n            { animateTreeNodeToggle } = client;\n        if (Array.isArray(idOrRecord)) {\n            if (idOrRecord.length > 0) {\n                client.suspendRefresh();\n                for (let i = idOrRecord.length - 1; i >= 0; i--) {\n                    const record = store.getById(idOrRecord[i]);\n                    if (i === 0) {\n                        client.resumeRefresh?.();\n                        // Ensure all parents are rendered\n                        client.rowManager.refresh();\n                    }\n                    await me.expandTo?.(record, i === 0);\n                }\n            }\n            return;\n        }\n        const record = store.getById(idOrRecord);\n        // Hidden because it's in a collapsed Group: abort\n        if (record.instanceMeta(me.store).hiddenByCollapse === false) {\n            return;\n        }\n        client.animateTreeNodeToggle = false;\n        // Expand any parents that need to be expanded to allow the record to be rendered.\n        if (!record.ancestorsExpanded()) {\n            const parents = [];\n            // Collect parents which need expanding\n            for (let parent = record.parent; parent && !parent.isRoot; parent = parent.parent) {\n                if (!parent.isExpanded(store)) {\n                    parents.unshift(parent);\n                }\n            }\n            client.suspendRefresh();\n            // Expand them from the top-down\n            for (const parent of parents) {\n                if (!me.isDestroyed) {\n                    await me.toggleCollapse(parent, false);\n                }\n            }\n            client.resumeRefresh?.();\n            // Refreshing on expand was inhibited in toggleCollapse calls\n            client.refreshRows?.();\n        }\n        client.animateTreeNodeToggle = animateTreeNodeToggle;\n        if (!me.isDestroyed && scrollIntoView) {\n            await client.scrollRowIntoView(record);\n        }\n    }\n    //endregion\n    //region Events\n    /**\n     * Called when user clicks somewhere in the grid. Expand/collapse node on icon click.\n     * @private\n     */\n    onElementPointerUp(event) {\n        const\n            me              = this,\n            target          = event.target,\n            cellData        = me.client.getCellDataFromEvent(event),\n            clickedExpander = target.closest('.b-tree-expander');\n        // Checks if click is on node expander icon, then toggles expand/collapse. Also toggles on entire cell if expandOnCellClick is true\n        if (clickedExpander || (me.expandOnCellClick && cellData?.record.isParent)) {\n            me.toggleCollapse(cellData.record);\n        }\n    }\n    onElementClick(event) {\n        // Prevent default to avoid triggering navigation if the tree node is a link\n        if (event.target.closest('.b-tree-expander')) {\n            event.preventDefault();\n        }\n    }\n    /**\n     * Called on key down in grid. Expand/collapse node on [space]\n     * @private\n     */\n    toggleCollapseByKey() {\n        const { focusedCell } = this.client;\n        // Only catch space on grid cell element, not in header, editors etc...\n        if (focusedCell?.rowIndex > -1 && !focusedCell.isActionable) {\n            this.toggleCollapse(focusedCell.id);\n            return true;\n        }\n        return false;\n    }\n    //endregion\n    //region Rendering\n    beforeRenderRow({ record, cls }) {\n        if (!record.isLeaf) {\n            const isCollapsed = !record.isExpanded(this.client.store);\n            cls['b-tree-parent-row']  = 1;\n            cls['b-tree-collapsed']   = isCollapsed;\n            cls['b-tree-expanded']    = !isCollapsed;\n            cls['b-loading-children'] = record.instanceMeta(this.client).isLoadingChildren;\n        }\n        else {\n            cls['b-tree-parent-row'] = 0;\n            cls['b-tree-collapsed'] = 0;\n            cls['b-tree-expanded'] = 0;\n            cls['b-loading-children'] = 0;\n        }\n    }\n    //endregion\n    // Expands tree if single column.\n    // Called by default on ArrowRight\n    expandIfSingleColumn() {\n        if (this.client.columns.count === 1) {\n            return this.expandByKey();\n        }\n        // Tells keymap to continue with other actions\n        return false;\n    }\n    // Expands tree on Shift+ArrowRight by default.\n    expandByKey() {\n        const\n            me              = this,\n            { client }      = me,\n            { focusedCell } = client,\n            record          = focusedCell?.record;\n        // shift triggers tree navigation behaviour, also used by default for single column which is tree\n        if (record && focusedCell?.column.tree && record.isParent && record.instanceMeta(client.store).collapsed) {\n            me.expand(record);\n            return true;\n        }\n        // Tells keymap to continue with other actions\n        return false;\n    }\n    collapseIfSingleColumn() {\n        if (this.client.columns.count === 1) {\n            return this.collapseByKey();\n        }\n        // Tells keymap to continue with other actions\n        return false;\n    }\n    collapseByKey() {\n        const\n            me              = this,\n            { client }      = me,\n            { focusedCell } = client,\n            record          = focusedCell?.record;\n        // shift triggers tree navigation behaviour, also used by default for single column which is tree\n        if (focusedCell?.column.tree && record) {\n            // on expanded parent, collapse\n            if (record.isParent && !record.instanceMeta(client.store).collapsed) {\n                me.collapse(record);\n                return true;\n            }\n            // otherwise go to parent\n            if (record.parent && !record.parent.isRoot) {\n                // Deselect everything before doing this.\n                // Causes strange selection ranges otherwise\n                client.deselectAll();\n                client.focusCell({\n                    record : record.parent,\n                    column : focusedCell.column\n                });\n                return true;\n            }\n        }\n        // Tells keymap to continue with other actions\n        return false;\n    }\n}\nTree.featureClass = 'b-tree';\nTree._$name = 'Tree'; GridFeatureManager.registerFeature(Tree, false, 'Grid');\nGridFeatureManager.registerFeature(Tree, true, 'TreeGrid');\n"],
  "mappings": "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",
  "names": ["isCollapsed", "record"]
}
