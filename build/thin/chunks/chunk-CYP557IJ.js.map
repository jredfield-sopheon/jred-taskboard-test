{
  "version": 3,
  "sources": ["../../../../Core/lib/Core/widget/Slider.js"],
  "sourcesContent": ["import Widget from './Widget.js';\nimport Tooltip from './Tooltip.js';\nimport Rectangle from '../helper/util/Rectangle.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\n/**\n * @module Core/widget/Slider\n */\nconst arrowKeys = {\n    ArrowUp    : 1,\n    ArrowDown  : 1,\n    ArrowLeft  : 1,\n    ArrowRight : 1\n};\n/**\n * Wraps native &lt;input type=\"range\"&gt;\n *\n * ```javascript\n * let slider = new Slider({\n *   text: 'Choose value'\n * });\n * ```\n *\n * {@inlineexample Core/widget/Slider.js}\n *\n * @extends Core/widget/Widget\n * @classtype slider\n * @widget\n */\nexport default class Slider extends Widget {\n    //region Config\n    static $name = 'Slider';\n    static type = 'slider';\n    static get configurable() {\n        return {\n            /**\n             * Get input element.\n             * @readonly\n             * @member {HTMLInputElement} input\n             */\n            /**\n             * Get/set text. Appends value if Slider.showValue is true\n             * @member {String} text\n             */\n            /**\n             * Slider label text\n             * @config {String}\n             */\n            text : null,\n            /**\n             * Show value in label (appends in () if text is set)\n             * @config {Boolean}\n             * @default\n             */\n            showValue : true,\n            /**\n             * Show the slider value in a tooltip\n             * @config {Boolean}\n             * @default\n             */\n            showTooltip : false,\n            /**\n             * Get/set min value\n             * @member {Number} min\n             */\n            /**\n             * Minimum value\n             * @config {Number}\n             * @default\n             */\n            min : 0,\n            /**\n             * Get/set max value\n             * @member {Number} max\n             */\n            /**\n             * Maximum value\n             * @config {Number}\n             * @default\n             */\n            max : 100,\n            /**\n             * Get/set step size\n             * @member {Number} step\n             */\n            /**\n             * Step size\n             * @config {Number}\n             * @default\n             */\n            step : 1,\n            /**\n             * Get/set value\n             * @member {Number} value\n             */\n            /**\n             * Initial value\n             * @config {Number}\n             */\n            value : 50,\n            /**\n             * Unit to display next to the value, when configured with `showValue : true`\n             * @config {String}\n             * @default\n             */\n            unit : null,\n            // The value is set in the Light theme. The Material theme will have different value.\n            thumbSize : 20,\n            /**\n             * A config object for the tooltip to show while hovering the slider.\n             * @config {TooltipConfig}\n             */\n            tooltip : {\n                $config : ['lazy', 'nullify'],\n                value   : {\n                    type     : 'tooltip',\n                    align    : 'b-t',\n                    anchor   : false, // No anchor displayed since thumbSize is different for different themes\n                    axisLock : true\n                }\n            },\n            localizableProperties : ['text'],\n            /**\n             * By default, the {@link #event-change} event is fired when a change gesture is completed, ie: on\n             * the mouse up gesture of a drag.\n             *\n             * Configure this as `true` to fire the {@link #event-change} event as the value changes *during* a drag.\n             * @prp {Boolean}\n             */\n            triggerChangeOnInput : null,\n            defaultBindProperty : 'value'\n        };\n    }\n    //endregion\n    //region Init\n    compose() {\n        const\n            { id, min, max, showValue, step, text, value, unit = '', disabled } = this,\n            inputId = `${id}-input`,\n            hasText = Boolean(text || showValue);\n        return {\n            class : {\n                'b-has-label' : hasText,\n                'b-text'      : hasText,\n                'b-disabled'  : disabled\n            },\n            children : {\n                input : {\n                    tag                          : 'input',\n                    type                         : 'range',\n                    id                           : inputId,\n                    reference                    : 'input',\n                    [disabled ? 'disabled' : ''] : disabled,\n                    min,\n                    max,\n                    step,\n                    value,\n                    // eslint-disable-next-line bryntum/no-listeners-in-lib\n                    listeners : {\n                        input     : 'onInternalInput',\n                        change    : 'onInternalChange',\n                        mouseover : 'onInternalMouseOver',\n                        mouseout  : 'onInternalMouseOut'\n                    }\n                },\n                label : {\n                    tag  : 'label',\n                    for  : inputId,\n                    html : showValue ? (text ? `${text} (${value}${unit})` : value + unit) : text\n                }\n            }\n        };\n    }\n    get focusElement() {\n        return this.input;\n    }\n    get percentProgress() {\n        return (this.value - this.min) / (this.max - this.min) * 100;\n    }\n    //endregion\n    //region Events\n    /**\n     * Fired while slider thumb is being dragged.\n     * @event input\n     * @param {Core.widget.Slider} source The slider\n     * @param {Number} value The value\n     */\n    /**\n     * Fired after the slider value changes (on mouse up following slider interaction).\n     * @event change\n     * @param {Number} value The value\n     * @param {Boolean} userAction Triggered by user taking an action (`true`) or by setting a value (`false`)\n     * @param {Core.widget.Slider} source The slider\n     */\n    /* break from doc comment */\n    onInternalKeyDown(e) {\n        // Contain arrow keys to be processed by the <input type=\"range\">, do not allow them to bubble\n        // up to by any owning container.\n        if (!this.readOnly && arrowKeys[e.key]) {\n            e.stopImmediatePropagation();\n        }\n    }\n    onInternalChange() {\n        this.updateUI();\n        this.triggerChange(true);\n        this.trigger('action', { value : this.value });\n    }\n    onInternalInput() {\n        const me = this;\n        if (me.readOnly) {\n            // Undo the change if we are readOnly.\n            // readOnly input attribute will not work for non-text fields: https://github.com/w3c/html/issues/89\n            me.input.value = me.value;\n            return;\n        }\n        me.value = parseInt(me.input.value, 10);\n        me.trigger('input', { value : me.value });\n        if (me.triggerChangeOnInput) {\n            me.triggerChange(me);\n        }\n    }\n    onInternalMouseOver() {\n        const\n            me            = this,\n            thumbPosition = me.rtl ? 100 - me.percentProgress : me.percentProgress;\n        me.tooltip?.showBy({\n            target : Rectangle.from(me.input).inflate(me.thumbSize / 2, -me.thumbSize / 2),\n            align  : `b-t${Math.round(thumbPosition)}`\n        });\n    }\n    onInternalMouseOut() {\n        this.tooltip?.hide();\n    }\n    triggerChange(userAction) {\n        this.triggerFieldChange({\n            value : this.value,\n            valid : true,\n            userAction\n        });\n    }\n    //endregion\n    //region Config Handling\n    // max\n    updateMax(max) {\n        const me = this;\n        if (me.input && me._value > max) {\n            me.value = max;\n            me.trigger('input', { value : me.value });\n        }\n    }\n    // min\n    updateMin(min) {\n        const me = this;\n        if (me.input && me._value < min) {\n            me.value = min;\n            me.trigger('input', { value : me.value });\n        }\n    }\n    // tooltip\n    changeTooltip(config, existingTooltip) {\n        if (config) {\n            config.owner = this;\n        }\n        return this.showTooltip ? Tooltip.reconfigure(existingTooltip, config, {\n            owner    : this,\n            defaults : {\n                forElement : this.input,\n                html       : String(this.value) + (this.unit ?? '')\n            }\n        }) : null;\n    }\n    changeValue(value) {\n        const\n            me            = this,\n            { min, step } = me;\n        value = Math.min(Math.max(value, min), me.max);\n        // Round the passed value so that it is in sync with our steps.\n        // For example, if our min is 10, and our step is 3, then\n        // passing 12 should get 13. Rounding the value directly to the closest\n        // step would fail this requirement.\n        if (value > min) {\n            return min + ObjectHelper.roundTo(value - min, step);\n        }\n        return ObjectHelper.roundTo(value, step);\n    }\n    updateValue(value) {\n        const\n            me = this,\n            { input, _tooltip } = me;\n        if (_tooltip) {\n            _tooltip.html = me.value + (me.unit ?? '');\n        }\n        if (input && input.value !== String(value)) {\n            input.value = value;\n            me.triggerChange(false);\n        }\n        me.updateUI();\n    }\n    //endregion\n    //region Util\n    updateUI() {\n        const me = this;\n        // Don't measure the UI unless we need to\n        me._tooltip?.isVisible && me._tooltip?.alignTo({\n            target : Rectangle.from(me.input).inflate(me.thumbSize / 2, -me.thumbSize / 2),\n            align  : `b-t${Math.round(me.percentProgress)}`\n        });\n    }\n    //endregion\n}\n// Register this widget type with its Factory\nSlider.initClass();\nSlider._$name = 'Slider';"],
  "mappings": "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",
  "names": []
}
