{
  "version": 3,
  "sources": ["../../../../Grid/lib/Grid/column/DateColumn.js"],
  "sourcesContent": ["import Column from './Column.js';\nimport ColumnStore from '../data/ColumnStore.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\n/**\n * @module Grid/column/DateColumn\n */\n/**\n * A column that displays a date in the specified {@link #config-format}. By default `L` format is used, which\n * contains the following info: full year, 2-digit month, and 2-digit day. Depending on the browser locale,\n * the formatted date might look different. [Intl.DateTimeFormat API](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat)\n * is used to format the date. Here is an example of possible outputs depending on the browser locale:\n *\n * ```javascript\n * // These options represent `L` format\n * const options = { year : 'numeric', month : '2-digit', day : '2-digit' };\n *\n * new Intl.DateTimeFormat('en-US', options).format(new Date(2021, 6, 1)); // \"07/01/2021\"\n * new Intl.DateTimeFormat('ru-RU', options).format(new Date(2021, 6, 1)); // \"01.07.2021\"\n *\n * // Formatting using Bryntum API\n * LocaleManager.applyLocale('En');\n * DateHelper.format(new Date(2021, 6, 1), 'L'); // \"07/01/2021\"\n * LocaleManager.applyLocale('Ru');\n * DateHelper.format(new Date(2021, 6, 1), 'L'); // \"01.07.2021\"\n * ```\n *\n * To learn more about available formats check out {@link Core.helper.DateHelper} docs.\n *\n * The {@link Core.data.field.DateDataField field} this column reads data from should be a type of date.\n *\n * Default editor is a {@link Core.widget.DateField}.\n *\n * ```javascript\n * new Grid({\n *     columns : [\n *          { type: 'date', text: 'Start date', format: 'YYYY-MM-DD', field: 'start' }\n *     ]\n * });\n * ```\n *\n * {@inlineexample Grid/column/DateColumn.js}\n *\n * @extends Grid/column/Column\n * @classtype date\n * @column\n */\nexport default class DateColumn extends Column {\n    //region Config\n    static $name = 'DateColumn';\n    static type  = 'date';\n    // Type to use when auto adding field\n    static fieldType = 'date';\n    static fields = ['format', 'pickerFormat', 'step', 'min', 'max'];\n    static get defaults() {\n        return {\n            /**\n             * Min value for the cell editor\n             * @config {String|Date} min\n             */\n            /**\n             * Max value for the cell editor\n             * @config {String|Date} max\n             */\n            /**\n             * The {@link Core.data.field.DateDataField#config-name} of the data model date field to read data from.\n             * @config {String} field\n             * @category Common\n             */\n            /**\n             * Date format to convert a given date object into a string to display. By default `L` format is used, which\n             * contains the following info: full year, 2-digit month, and 2-digit day. Depending on the browser locale,\n             * the formatted date might look different. [Intl.DateTimeFormat API](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat)\n             * is used to format the date. Here is an example of possible outputs depending on the browser locale:\n             *\n             * ```javascript\n             * // These options represent `L` format\n             * const options = { year : 'numeric', month : '2-digit', day : '2-digit' };\n             *\n             * new Intl.DateTimeFormat('en-US', options).format(new Date(2021, 6, 1)); // \"07/01/2021\"\n             * new Intl.DateTimeFormat('ru-RU', options).format(new Date(2021, 6, 1)); // \"01.07.2021\"\n             *\n             * // Formatting using Bryntum API\n             * LocaleManager.applyLocale('En');\n             * DateHelper.format(new Date(2021, 6, 1), 'L'); // \"07/01/2021\"\n             * LocaleManager.applyLocale('Ru');\n             * DateHelper.format(new Date(2021, 6, 1), 'L'); // \"01.07.2021\"\n             * ```\n             *\n             * To learn more about available formats check out {@link Core.helper.DateHelper} docs.\n             *\n             * Note, the {@link Core.data.field.DateDataField field} this column reads data from should be a type of date.\n             * @config {String}\n             * @default\n             * @category Common\n             */\n            format : 'L',\n            /**\n             * Time increment duration value to apply when clicking the left / right trigger icons. See\n             * {@link Core.widget.DateField#config-step} for more information\n             * Set to `null` to hide the step triggers.\n             * @config {String|Number|DurationConfig}\n             * @default\n             * @category Common\n             */\n            step : 1,\n            minWidth : 85,\n            filterType : 'date'\n        };\n    }\n    //endregion\n    //region Display\n    /**\n     * Renderer that displays the date with the specified format. Also adds cls 'date-cell' to the cell.\n     * @private\n     */\n    defaultRenderer({ value }) {\n        return value ? this.formatValue(value) : '';\n    }\n    /**\n     * Group renderer that displays the date with the specified format.\n     * @private\n     */\n    groupRenderer({ cellElement, groupRowFor }) {\n        cellElement.innerHTML = this.formatValue(groupRowFor);\n    }\n    //endregion\n    //region Formatter\n    /**\n     * Used by both renderer and groupRenderer to do the actual formatting of the date\n     * @private\n     * @param value\n     * @returns {String}\n     */\n    formatValue(value) {\n        // Ideally we should be served a date, but if not make it easier for the user by parsing\n        if (typeof value === 'string') {\n            value = DateHelper.parse(value, this.format || undefined); // null does not use default format\n        }\n        return DateHelper.format(value, this.format || undefined);\n    }\n    //endregion\n    //region Getters/setters\n    /**\n     * Get/Set format for date displayed in cell and editor (see {@link Core.helper.DateHelper#function-format-static} for formatting options)\n     * @property {String}\n     */\n    set format(value) {\n        const { editor } = this.data;\n        this.set('format', value);\n        if (editor) {\n            editor.format = value;\n        }\n    }\n    get format() {\n        return this.get('format');\n    }\n    get defaultEditor() {\n        const\n            me                         = this,\n            { min, max, step, format } = me;\n        return {\n            name                 : me.field,\n            type                 : 'date',\n            calendarContainerCls : 'b-grid-cell-editor-related',\n            weekStartDay         : me.grid.weekStartDay,\n            format,\n            max,\n            min,\n            step\n        };\n    }\n    //endregion\n}\nColumnStore.registerColumnType(DateColumn, true);\nDateColumn.exposeProperties();\nDateColumn._$name = 'DateColumn';"],
  "mappings": ";;;;;;;;;;AA8CA,IAAqB,aAArB,cAAwC,OAAO;AAAA,EAO3C,WAAW,WAAW;AAClB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAyCH,QAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAST,MAAO;AAAA,MACP,UAAW;AAAA,MACX,YAAa;AAAA,IACjB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,gBAAgB,EAAE,MAAM,GAAG;AACvB,WAAO,QAAQ,KAAK,YAAY,KAAK,IAAI;AAAA,EAC7C;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,cAAc,EAAE,aAAa,YAAY,GAAG;AACxC,gBAAY,YAAY,KAAK,YAAY,WAAW;AAAA,EACxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,YAAY,OAAO;AAEf,QAAI,OAAO,UAAU,UAAU;AAC3B,cAAQ,WAAW,MAAM,OAAO,KAAK,UAAU,MAAS;AAAA,IAC5D;AACA,WAAO,WAAW,OAAO,OAAO,KAAK,UAAU,MAAS;AAAA,EAC5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,OAAO,OAAO;AACd,UAAM,EAAE,OAAO,IAAI,KAAK;AACxB,SAAK,IAAI,UAAU,KAAK;AACxB,QAAI,QAAQ;AACR,aAAO,SAAS;AAAA,IACpB;AAAA,EACJ;AAAA,EACA,IAAI,SAAS;AACT,WAAO,KAAK,IAAI,QAAQ;AAAA,EAC5B;AAAA,EACA,IAAI,gBAAgB;AAChB,UACI,KAA6B,MAC7B,EAAE,KAAK,KAAK,MAAM,OAAO,IAAI;AACjC,WAAO;AAAA,MACH,MAAuB,GAAG;AAAA,MAC1B,MAAuB;AAAA,MACvB,sBAAuB;AAAA,MACvB,cAAuB,GAAG,KAAK;AAAA,MAC/B;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AAAA;AAEJ;AAAA;AA5HI,cAFiB,YAEV,SAAQ;AACf,cAHiB,YAGV,QAAQ;AAAA;AAEf,cALiB,YAKV,aAAY;AACnB,cANiB,YAMV,UAAS,CAAC,UAAU,gBAAgB,QAAQ,OAAO,KAAK;AAyHnE,YAAY,mBAAmB,YAAY,IAAI;AAC/C,WAAW,iBAAiB;AAC5B,WAAW,SAAS;",
  "names": []
}
