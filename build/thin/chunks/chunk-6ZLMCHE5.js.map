{
  "version": 3,
  "sources": ["../../../../Core/lib/Core/helper/mixin/DragHelperContainer.js", "../../../../Core/lib/Core/helper/mixin/DragHelperTranslate.js", "../../../../Core/lib/Core/helper/DragHelper.js", "../../../../Core/lib/Core/helper/ResizeHelper.js", "../../../../Core/lib/Core/widget/Toast.js", "../../../../Core/lib/Core/helper/WidgetHelper.js", "../../../../Core/lib/Core/helper/util/Formatter.js", "../../../../Core/lib/Core/helper/util/NumberFormat.js", "../../../../Core/lib/Core/mixin/Clipboardable.js", "../../../../Core/lib/Core/mixin/Override.js", "../../../../Core/lib/Core/util/Month.js", "../../../../Core/lib/Core/widget/ButtonGroup.js", "../../../../Core/lib/Core/widget/CalendarPanel.js", "../../../../Core/lib/Core/widget/YearPicker.js", "../../../../Core/lib/Core/widget/DisplayField.js", "../../../../Core/lib/Core/widget/DatePicker.js", "../../../../Core/lib/Core/widget/DateField.js", "../../../../Core/lib/Core/widget/NumberField.js", "../../../../Core/lib/Core/widget/TimePicker.js", "../../../../Core/lib/Core/widget/TimeField.js", "../../../../Core/lib/Core/widget/DurationField.js", "../../../../Core/lib/Core/widget/FieldFilterPicker.js", "../../../../Core/lib/Core/widget/Label.js", "../../../../Core/lib/Core/widget/FieldFilterPickerGroup.js", "../../../../Core/lib/Core/widget/MessageDialog.js"],
  "sourcesContent": ["import Base from '../../Base.js';\nimport GlobalEvents from '../../GlobalEvents.js';\nimport DomHelper from '../../helper/DomHelper.js';\nimport Rectangle from '../../helper/util/Rectangle.js';\n/**\n * @module Core/helper/mixin/DragHelperContainer\n */\n/**\n * Mixin for DragHelper that handles dragging elements between containers (or rearranging within)\n *\n * @mixin\n * @private\n */\nexport default Target => class DragHelperContainer extends (Target || Base) {\n    static get $name() {\n        return 'DragHelperContainer';\n    }\n    //region Init\n    /**\n     * Initialize container drag mode.\n     * @private\n     */\n    initContainerDrag() {\n        const me = this;\n        //use container drag as default mode\n        if (!me.mode) {\n            me.mode = 'container';\n        }\n        if (me.mode === 'container' && !me.containers) {\n            throw new Error('Container drag mode must specify containers');\n        }\n    }\n    //endregion\n    //region Grab, update, finish\n    /**\n     * Grab an element which can be dragged between containers.\n     * @private\n     * @param event\n     * @returns {Boolean}\n     */\n    grabContainerDrag(event) {\n        const me = this;\n        // allow specified selectors to prevent drag\n        if (!me.ignoreSelector || !event.target.closest(me.ignoreSelector)) {\n            // go up from \"handle\" to draggable element\n            const element = DomHelper.getAncestor(event.target, me.containers, me.outerElement);\n            if (element) {\n                const box = element.getBoundingClientRect();\n                me.context = {\n                    element,\n                    valid            : true,\n                    action           : 'container',\n                    offsetX          : event.pageX - box.left,\n                    offsetY          : event.pageY - box.top,\n                    originalPosition : {\n                        parent : element.parentElement,\n                        prev   : element.previousElementSibling,\n                        next   : element.nextElementSibling\n                    }\n                };\n            }\n            return true;\n        }\n        return false;\n    }\n    startContainerDrag(event) {\n        const\n            me                          = this,\n            { context, floatRootOwner } = me,\n            { element : dragElement }   = context,\n            clonedNode                  = dragElement.cloneNode(true),\n            outerWidgetEl               = floatRootOwner?.element.closest('.b-outer');\n        // init drag proxy\n        clonedNode.classList.add(me.dragProxyCls, me.draggingCls);\n        // Append drag proxy to float root, fall back to root context node\n        (floatRootOwner?.floatRoot || DomHelper.getRootElement(dragElement)).appendChild(clonedNode);\n        context.dragProxy = clonedNode;\n        // style dragged element\n        context.dragging = dragElement;\n        dragElement.classList.add(me.dropPlaceholderCls);\n        // If element being dragged is also a child of the float root, add +1 to the cloned node z-index\n        if (outerWidgetEl?.parentElement?.matches('.b-float-root')) {\n            clonedNode.style.zIndex = floatRootOwner.floatRootMaxZIndex + 1;\n        }\n    }\n    onContainerDragStarted(event) {\n        const\n            me                                   = this,\n            { context }                          = me,\n            { element : dragElement, dragProxy } = context,\n            box                                  = dragElement.getBoundingClientRect();\n        // Always set the proxy element width manually, drag target could be sized with flex or % width\n        if (me.autoSizeClonedTarget) {\n            dragProxy.style.width  = box.width + 'px';\n            dragProxy.style.height = box.height + 'px';\n            DomHelper.setTranslateXY(context.dragProxy, box.left, box.top);\n        }\n        else {\n            const proxyBox = dragProxy.getBoundingClientRect();\n            Object.assign(context, {\n                offsetX : proxyBox.width / 2,\n                offsetY : proxyBox.height / 2\n            });\n            DomHelper.setTranslateXY(dragProxy, event.clientX, event.clientY);\n        }\n    }\n    /**\n     * Move the placeholder element into its new position on valid drag.\n     * @private\n     * @param event\n     */\n    updateContainerDrag(event) {\n        const\n            me          = this,\n            { context } = me;\n        if (!context.started || !context.targetElement) {\n            return;\n        }\n        const\n            containerElement = DomHelper.getAncestor(context.targetElement, me.containers, 'b-gridbase'),\n            willLoseFocus    = context.dragging?.contains(DomHelper.getActiveElement(context.dragging));\n        if (containerElement && DomHelper.isDescendant(context.element, containerElement)) {\n            // dragging over part of self, do nothing\n            return;\n        }\n        // The dragging element contains focus, and moving it within the DOM\n        // will cause focus loss which might affect an encapsulating autoClose Popup.\n        // Prevent focus loss handling during the DOM move.\n        if (willLoseFocus) {\n            GlobalEvents.suspendFocusEvents();\n        }\n        if (containerElement && context.valid) {\n            me.moveNextTo(containerElement, event);\n        }\n        else {\n            // dragged outside of containers, revert position\n            me.revertPosition();\n        }\n        if (willLoseFocus) {\n            GlobalEvents.resumeFocusEvents();\n        }\n        event.preventDefault();\n    }\n    /**\n     * Finalize drag, fire drop.\n     * @private\n     * @param event\n     * @fires drop\n     */\n    finishContainerDrag(event) {\n        const\n            me          = this,\n            { context } = me,\n            // extracting variables to make code more readable\n            { dragging, dragProxy, valid, draggedTo, insertBefore, originalPosition } = context;\n        if (dragging) {\n            // needs to have a valid target\n            context.valid = Boolean(valid && (draggedTo || me.externalDropTargetSelector && event.target.closest(me.externalDropTargetSelector))  &&\n                    // no drop on self or parent\n                    (dragging !== insertBefore || originalPosition.parent !== draggedTo));\n            context.finalize = (valid = context.valid) => {\n                // revert if invalid (and context still exists, might have been aborted from outside)\n                if (!valid && me.context) {\n                    me.revertPosition();\n                }\n                dragging.classList.remove(me.dropPlaceholderCls);\n                dragProxy.remove();\n                me.reset();\n            };\n            // allow async finalization by setting async to true on context in drop handler,\n            // requires implementer to call context.finalize later to finish the drop\n            context.async = false;\n            me.trigger('drop', { context, event });\n            if (!context.async) {\n                // finalize immediately\n                context.finalize();\n            }\n        }\n    }\n    /**\n     * Aborts a drag operation.\n     * @private\n     * @param {Boolean} [invalid]\n     * @param {Object} [event]\n     * @param {Boolean} [silent]\n     */\n    abortContainerDrag(invalid = false, event = null, silent = false) {\n        const\n            me          = this,\n            { context } = me;\n        if (context.dragging) {\n            context.dragging.classList.remove(me.dropPlaceholderCls);\n            context.dragProxy.remove();\n            me.revertPosition();\n        }\n        if (!silent) {\n            me.trigger(invalid ? 'drop' : 'abort', { context, event });\n        }\n        me.reset();\n    }\n    //endregion\n    //region Helpers\n    /**\n     * Updates the drag proxy position.\n     * @private\n     * @param event\n     */\n    updateContainerProxy(event) {\n        const\n            me          = this,\n            { context } = me,\n            proxy       = context.dragProxy;\n        let newX = event.pageX - context.offsetX,\n            newY = event.pageY - context.offsetY;\n        if (typeof me.minX === 'number') {\n            newX = Math.max(me.minX, newX);\n        }\n        if (typeof me.maxX === 'number') {\n            newX = Math.min(me.maxX - proxy.offsetWidth, newX);\n        }\n        if (typeof me.minY === 'number') {\n            newY = Math.max(me.minY, newY);\n        }\n        if (typeof me.maxY === 'number') {\n            newY = Math.min(me.maxY  - proxy.offsetHeight, newY);\n        }\n        if (me.lockX) {\n            DomHelper.setTranslateY(proxy, newY);\n        }\n        else if (me.lockY) {\n            DomHelper.setTranslateX(proxy, newX);\n        }\n        else {\n            DomHelper.setTranslateXY(proxy, newX, newY);\n        }\n        let targetElement;\n        if (event.type === 'touchmove') {\n            const touch = event.changedTouches[0];\n            targetElement = DomHelper.elementFromPoint(touch.clientX, touch.clientY);\n        }\n        else {\n            targetElement = event.target;\n        }\n        context.targetElement = targetElement;\n    }\n    /**\n     * Positions element being dragged in relation to targetElement.\n     * @private\n     * @param targetElement\n     * @param event\n     */\n    moveNextTo(targetElement, event) {\n        const\n            { context } = this,\n            dragElement = context.dragging,\n            parent      = targetElement.parentElement;\n        if (targetElement !== dragElement) {\n            // dragged over a container and not over self, calculate where to insert\n            const centerX = Rectangle.from(targetElement).center.x;\n            if ((this.isRTL && event.pageX > centerX) || (!this.isRTL && event.pageX < centerX)) {\n                // dragged left of target center, insert before\n                parent.insertBefore(dragElement, targetElement);\n                context.insertBefore = targetElement;\n            }\n            else {\n                // dragged right of target center, insert after\n                if (targetElement.nextElementSibling) {\n                    // check that not dragged to the immediate left of self. in such case, position should not change\n                    if (targetElement.nextElementSibling !== dragElement) {\n                        context.insertBefore = targetElement.nextElementSibling;\n                        parent.insertBefore(dragElement, targetElement.nextElementSibling);\n                    }\n                    else if (!context.insertBefore && dragElement.parentElement.lastElementChild !== dragElement) {\n                        // dragged left initially, should stay in place (checked in finishContainerDrag)\n                        context.insertBefore = targetElement.nextElementSibling;\n                    }\n                }\n                else {\n                    parent.appendChild(dragElement);\n                    context.insertBefore = null;\n                }\n            }\n            context.draggedTo = parent;\n        }\n    }\n    /**\n     * Moves element being dragged back to its original position.\n     * @private\n     */\n    revertPosition() {\n        const\n            { context }      = this,\n            { dragging }     = context,\n            { parent, next } = context.originalPosition;\n        // revert to correct location\n        if (next) {\n            const isNoop = next.previousSibling === dragging || (!next && dragging === parent.lastChild);\n            if (!isNoop) {\n                parent.insertBefore(dragging, next);\n            }\n        }\n        else {\n            parent.appendChild(dragging);\n        }\n        // no target container\n        context.draggedTo = null;\n    }\n    //endregion\n};\n", "import Base from '../../Base.js';\nimport DomHelper from '../DomHelper.js';\nimport EventHelper from '../EventHelper.js';\nimport Delayable from '../../mixin/Delayable.js';\nimport Rectangle from '../util/Rectangle.js';\n/**\n * @module Core/helper/mixin/DragHelperTranslate\n */\nconst noScroll = { pageXOffset : 0, pageYOffset : 0 };\n/**\n * Mixin for DragHelper that handles repositioning (translating) an element within its container\n *\n * @mixin\n * @private\n */\nexport default Target => class DragHelperTranslate extends Delayable(Target || Base) {\n    static get $name() {\n        return 'DragHelperTranslate';\n    }\n    static get configurable() {\n        return {\n            positioning : null,\n            // Private config that disables updating elements position, for when data is live updated during drag,\n            // leading to element being redrawn\n            skipUpdatingElement : null\n        };\n    }\n    //region Init\n    /**\n     * Initialize translation drag mode.\n     * @private\n     */\n    initTranslateDrag() {\n        const me = this;\n        if (!me.isElementDraggable && me.targetSelector) {\n            me.isElementDraggable = element => element.closest(me.targetSelector);\n        }\n    }\n    //endregion\n    //region Grab, update, finish\n    /**\n     * Grab an element which can be moved using translation.\n     * @private\n     * @param event\n     * @returns {Boolean}\n     */\n    grabTranslateDrag(event) {\n        const element = this.getTarget(event);\n        if (element) {\n            this.context = {\n                valid : true,\n                element,\n                startPageX   : event.pageX,\n                startPageY   : event.pageY,\n                startClientX : event.clientX,\n                startClientY : event.clientY\n            };\n            return true;\n        }\n        return false;\n    }\n    getTarget(event) {\n        return event.target.closest(this.targetSelector);\n    }\n    getX(element) {\n        if (this.positioning === 'absolute') {\n            // Read left style rather than offsetLeft as it is impacted by margin-left style (Gantt milestones)\n            return parseFloat(element.style.left, 10);\n        }\n        else {\n            return DomHelper.getTranslateX(element);\n        }\n    }\n    getY(element) {\n        if (this.positioning === 'absolute') {\n            return parseFloat(element.style.top, 10);\n        }\n        else {\n            return DomHelper.getTranslateY(element);\n        }\n    }\n    getXY(element) {\n        if (this.positioning === 'absolute') {\n            return [element.offsetLeft, element.offsetTop];\n        }\n        else {\n            return DomHelper.getTranslateXY(element);\n        }\n    }\n    setXY(element, x, y) {\n        if (this.skipUpdatingElement) {\n            return;\n        }\n        if (this.positioning === 'absolute') {\n            element.style.left = x + 'px';\n            element.style.top  = y + 'px';\n        }\n        else {\n            DomHelper.setTranslateXY(element, x, y);\n        }\n    }\n    /**\n     * Start translating, called on first mouse move after dragging\n     * @private\n     * @param event\n     */\n    startTranslateDrag(event) {\n        const\n            me                                       = this,\n            { context, outerElement, proxySelector } = me,\n            // When cloning an element to be dragged, we place it in BODY by default\n            dragWithin                               = me.dragWithin = me.dragWithin || (me.cloneTarget && document.body);\n        let element = context.dragProxy || context.element;\n        const\n            grabbed       = element,\n            grabbedParent = element.parentElement;\n        if (me.cloneTarget) {\n            const\n                elementToClone                            = proxySelector ? element.querySelector(proxySelector) : element,\n                { width, height, x : proxyX, y : proxyY } = Rectangle.from(elementToClone, Rectangle.outer(dragWithin));\n            element = me.createProxy(element);\n            let x = proxyX, y = proxyY;\n            // Match the grabbed element's size and position.\n            if (me.autoSizeClonedTarget) {\n                element.style.width  = `${width}px`;\n                element.style.height = `${height}px`;\n            }\n            element.classList.add(me.dragProxyCls, me.draggingCls);\n            // Remove some irrelevant CSS classes\n            element.classList.remove('b-hover', 'b-selected', 'b-focused');\n            dragWithin.appendChild(element);\n            if (!me.autoSizeClonedTarget || proxySelector) {\n                const\n                    // Center proxy at cursor position, we assume app is applying styles to the element (inline or CSS)\n                    proxyRect                            = element.getBoundingClientRect(),\n                    { x : dragWithinX, y : dragWithinY } = dragWithin.getBoundingClientRect(),\n                    localX                               = event.clientX - dragWithinX,\n                    // Body may have a non-zero top\n                    localY                               = event.clientY - dragWithinY + (dragWithin !== document.body ? document.body.getBoundingClientRect().y : 0);\n                x = localX - (proxyRect.width / 2);\n                y = localY - (proxyRect.height / 2);\n                // When proxy is centered, update to not use original mousedown coordinates, but the first mouse move triggering the drag\n                context.startPageX = event.pageX;\n                context.startPageY = event.pageY;\n            }\n            me.setXY(element, x, y);\n            grabbed.classList.add('b-drag-original');\n            if (me.hideOriginalElement) {\n                grabbed.classList.add('b-hidden');\n            }\n        }\n        element.classList.add(me.draggingCls);\n        Object.assign(context, {\n            // The element which we're moving, could be a cloned version of grabbed, or the grabbed element itself\n            element,\n            // The original element upon which the mousedown event triggered a drag operation\n            grabbed,\n            // The parent of the original element where the pointerdown was detected - to be able to restore after an invalid drop\n            grabbedParent,\n            // The next sibling of the original element where the pointerdown was detected - to be able to restore after an invalid drop\n            grabbedNextSibling : element.nextElementSibling,\n            // elements position within parent element\n            elementStartX : me.getX(element),\n            elementStartY : me.getY(element),\n            elementX      : DomHelper.getOffsetX(element, dragWithin || outerElement),\n            elementY      : DomHelper.getOffsetY(element, dragWithin || outerElement),\n            scrollX : 0,\n            scrollY : 0,\n            scrollManagerElementContainsDragProxy : !me.cloneTarget || dragWithin === outerElement\n        });\n        if (dragWithin) {\n            context.parentElement = element.parentElement;\n            if (dragWithin !== element.parentElement) {\n                dragWithin.appendChild(element);\n            }\n            me.updateTranslateProxy(event);\n        }\n    }\n    // When drag has started, create proxy versions (if applicable) and store original positions of all related elements\n    // to be able to animate back to these positions in case of an aborted drag\n    onTranslateDragStarted() {\n        const\n            me          = this,\n            { context } = me;\n        let { relatedElements } = context;\n        // For unified proxy mode - add a CSS class to the 'main' dragging element to be able to have it be on top of related elements with z-index\n        if (me.unifiedProxy) {\n            context.element.classList.add('b-drag-main', 'b-drag-unified-proxy');\n        }\n        if (relatedElements?.length > 0) {\n            context.relatedElStartPos    = [];\n            context.relatedElDragFromPos = [];\n            const { proxySelector } = me;\n            let [elementStartX, elementStartY] = [context.elementStartX, context.elementStartY];\n            // Store reference to original elements (may need cleanup to remove CSS classes after drop)\n            context.originalRelatedElements = relatedElements;\n            // Create clone proxy elements of all related elements\n            relatedElements                 = context.relatedElements = relatedElements.map((relatedEl, i) => {\n                const\n                    proxyTemplateElement    = proxySelector ? relatedEl.querySelector(proxySelector) : relatedEl,\n                    { x, y, width, height } = Rectangle.from(proxyTemplateElement, me.dragWithin),\n                    relatedElementToDrag    = me.cloneTarget ? me.createProxy(relatedEl) : relatedEl;\n                relatedElementToDrag.classList.add(me.draggingCls);\n                // Remove some irrelevant CSS classes\n                relatedElementToDrag.classList.remove('b-hover', 'b-selected', 'b-focused');\n                if (me.cloneTarget) {\n                    // Match the original related element's position.\n                    me.setXY(relatedElementToDrag, x, y);\n                    me.dragWithin.appendChild(relatedElementToDrag);\n                    relatedElementToDrag.classList.add(me.dragProxyCls);\n                    // Optionally also match the original related element's size\n                    if (me.autoSizeClonedTarget) {\n                        relatedElementToDrag.style.width  = `${width}px`;\n                        relatedElementToDrag.style.height = `${height}px`;\n                    }\n                    if (me.hideOriginalElement) {\n                        relatedEl.classList.add('b-hidden');\n                    }\n                    relatedEl.classList.add('b-drag-original');\n                }\n                context.relatedElStartPos[i] = context.relatedElDragFromPos[i] = me.getXY(relatedElementToDrag);\n                if (me.unifiedProxy) {\n                    relatedElementToDrag.classList.add('b-drag-unified-animation', 'b-drag-unified-proxy');\n                    // Move into cascade and cache the dragFrom pos\n                    elementStartX += me.unifiedOffset;\n                    elementStartY += me.unifiedOffset;\n                    me.setXY(relatedElementToDrag, elementStartX, elementStartY);\n                    context.relatedElDragFromPos[i]   = [elementStartX, elementStartY];\n                    relatedElementToDrag.style.zIndex = 100 - i;\n                }\n                return relatedElementToDrag;\n            });\n            // Move the selected events into a unified cascade.\n            if (me.unifiedProxy && relatedElements && relatedElements.length > 0) {\n                // Animate related elements should into the position\n                EventHelper.onTransitionEnd({\n                    element  : relatedElements[0],\n                    property : 'transform',\n                    handler() {\n                        relatedElements.forEach(el => el.classList.remove('b-drag-unified-animation'));\n                    },\n                    thisObj : me,\n                    once    : true\n                });\n            }\n        }\n    }\n    /**\n     * Limit translation to outer bounds and specified constraints\n     * @private\n     * @param element\n     * @param x\n     * @param y\n     * @returns {{constrainedX: *, constrainedY: *}}\n     */\n    applyConstraints(element, x, y) {\n        const\n            me                           = this,\n            { constrain, dragWithin }    = me,\n            { pageXOffset, pageYOffset } = dragWithin === document.body ? globalThis : noScroll;\n        // limit to outer elements edges\n        if (dragWithin && constrain) {\n            if (x < 0) {\n                x = 0;\n            }\n            if (x + element.offsetWidth > dragWithin.scrollWidth) {\n                x = dragWithin.scrollWidth - element.offsetWidth;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (y + element.offsetHeight > dragWithin.scrollHeight) {\n                y = dragWithin.scrollHeight - element.offsetHeight;\n            }\n        }\n        // limit horizontally\n        if (typeof me.minX === 'number') {\n            x = Math.max(me.minX + pageXOffset, x);\n        }\n        if (typeof me.maxX === 'number') {\n            x = Math.min(me.maxX + pageXOffset, x);\n        }\n        // limit vertically\n        if (typeof me.minY === 'number') {\n            y = Math.max(me.minY + pageYOffset, y);\n        }\n        if (typeof me.maxY === 'number') {\n            y = Math.min(me.maxY + pageYOffset, y);\n        }\n        return { constrainedX : x, constrainedY : y };\n    }\n    /**\n     * Update elements translation on mouse move.\n     * @private\n     * @param {MouseEvent} event\n     * @param {Object} scrollManagerConfig\n     */\n    updateTranslateProxy(event, scrollManagerConfig) {\n        const\n            me                                        = this,\n            { lockX, lockY, context }                 = me,\n            element                                   = context.dragProxy || context.element,\n            { relatedElements, relatedElDragFromPos } = context;\n        // If we are cloning the dragged element outside of the element(s) monitored by the ScrollManager, then no need\n        // to take the scrollManager scroll values into account since it is only relevant when dragProxy is inside\n        // the Grid (where scroll manager operates).\n        if (context.scrollManagerElementContainsDragProxy && scrollManagerConfig) {\n            context.scrollX = scrollManagerConfig.getRelativeLeftScroll(element);\n            context.scrollY = scrollManagerConfig.getRelativeTopScroll(element);\n        }\n        context.pageX   = event.pageX;\n        context.pageY   = event.pageY;\n        context.clientX = event.clientX;\n        context.clientY = event.clientY;\n        let\n            newX = context.elementStartX + event.pageX - context.startPageX + context.scrollX,\n            newY = context.elementStartY + event.pageY - context.startPageY + context.scrollY;\n        // First let outside world apply snapping\n        if (me.snapCoordinates) {\n            const snapped = me.snapCoordinates({ element, newX, newY });\n            newX = snapped.x;\n            newY = snapped.y;\n        }\n        // Now constrain coordinates\n        const { constrainedX, constrainedY } = me.applyConstraints(element, newX, newY);\n        if (context.started || constrainedX !== newX || constrainedY !== newY) {\n            me.setXY(element, lockX ? undefined : constrainedX, lockY ? undefined : constrainedY);\n        }\n        if (relatedElements) {\n            const\n                deltaX = lockX ? 0 : constrainedX - context.elementStartX,\n                deltaY = lockY ? 0 : constrainedY - context.elementStartY;\n            relatedElements.forEach((r, i) => {\n                const [x, y] = relatedElDragFromPos[i];\n                me.setXY(r, x + deltaX, y + deltaY);\n            });\n        }\n        context.newX = constrainedX;\n        context.newY = constrainedY;\n    }\n    /**\n     * Finalize drag, fire drop.\n     * @private\n     * @param event\n     * @fires drop\n     */\n    async finishTranslateDrag(event) {\n        const\n            me                  = this,\n            context             = me.context,\n            { target }          = event,\n            xChanged            = !me.lockX && Math.round(context.newX) !== Math.round(context.elementStartX),\n            yChanged            = !me.lockY && Math.round(context.newY) !== Math.round(context.elementStartY),\n            element             = context.dragProxy || context.element,\n            { relatedElements } = context;\n        if (!me.ignoreSamePositionDrop || xChanged || yChanged) {\n            if (context.valid === false) {\n                await me.abortTranslateDrag(true, event);\n            }\n            else  {\n                const targetRect = !me.allowDropOutside && Rectangle.from(me.dragWithin || me.outerElement);\n                if (targetRect && ((typeof me.minX !== 'number' && me.minX !== true && (event.pageX < targetRect.left)) ||\n                    (typeof me.maxX !== 'number' && me.maxX !== true && (event.pageX > targetRect.right)) ||\n                    (typeof me.minY !== 'number' && me.minY !== true && (event.pageY < targetRect.top)) ||\n                    (typeof me.maxY !== 'number' && me.maxY !== true && (event.pageY > targetRect.bottom)))) {\n                    // revert location when dropped outside allowed element\n                    await me.abortTranslateDrag(true, event);\n                }\n                else {\n                    context.finalize = async(valid = context.valid) => {\n                        // In case someone tries to finalize twice\n                        if (context.finalized) {\n                            console.warn('DragHelper: Finalizing already finalized drag');\n                            return;\n                        }\n                        context.finalized = true;\n                        // abort if invalid (and context still exists, might have been aborted from outside)\n                        if (!valid && me.context) {\n                            // abort if flagged as invalid, without triggering abort or drop again\n                            await me.abortTranslateDrag(true, null, true);\n                        }\n                        if (!me.isDestroyed) {\n                            me.trigger('dropFinalized', { context, event, target });\n                            me.reset();\n                        }\n                        if (!me.cloneTarget && element.parentElement !== context.grabbedParent) {\n                            // If the dragged element was moved to another parent element, remove the transform style\n                            [element, ...(relatedElements || [])].forEach(el => el.style.transform = '');\n                        }\n                    };\n                    // allow async finalization by setting async to true on context in drop handler,\n                    // requires implementer to call context.finalize later to finish the drop\n                    context.async = false;\n                    await me.trigger('drop', { context, event, target });\n                    if (!context.async) {\n                        // finalize immediately\n                        await context.finalize();\n                    }\n                }\n            }\n        }\n        else {\n            // no change, abort\n            me.abortTranslateDrag(false, event);\n        }\n    }\n    /**\n     * Abort translation\n     * @private\n     * @param invalid\n     * @fires abort\n     */\n    async abortTranslateDrag(invalid = false, event = null, silent = false) {\n        const\n            me                                              = this,\n            {\n                cloneTarget,\n                context,\n                proxySelector,\n                dragWithin,\n                draggingCls\n            }                                               = me,\n            { relatedElements, relatedElStartPos, grabbed } = context,\n            element                                         = context.dragProxy || context.element;\n        context.valid = false;\n        me.scrollManager?.stopMonitoring();\n        if (context.aborted) {\n            console.warn('DragHelper: Aborting already aborted drag');\n            return;\n        }\n        let { elementStartX, elementStartY } = context;\n        const proxyMoved = elementStartX !== me.getX(element) ||\n                elementStartY !== me.getY(element);\n        if (element && context.started) {\n            // Put the dragged element back where it was\n            if (!cloneTarget && dragWithin && dragWithin !== context.grabbedParent) {\n                context.grabbedParent.insertBefore(element, context.grabbedNextSibling);\n            }\n            // Align the now visible grabbed element with the clone, so that it looks like it's\n            // sliding back into place when the clone is removed\n            if (cloneTarget) {\n                if (proxySelector) {\n                    const\n                        animateTo = grabbed.querySelector(proxySelector) || grabbed,\n                        { x, y }  = Rectangle.from(animateTo);\n                    elementStartX = x;\n                    elementStartY = y;\n                }\n            }\n            // animated restore of position.\n            element.classList.add('b-aborting');\n            // Move the main element back to its original position.\n            me.setXY(element, elementStartX, elementStartY);\n            // Move any related elements back to their original positions.\n            relatedElements?.forEach((element, i) => {\n                element.classList.remove(draggingCls);\n                element.classList.add('b-aborting');\n                me.setXY(element, relatedElStartPos[i][0], relatedElStartPos[i][1]);\n            });\n            if (!silent) {\n                me.trigger(invalid ? 'drop' : 'abort', { context, event });\n            }\n            // Element may have been scrolled out of view, or otherwise removed while dragging\n            if (element.isConnected && !me.isDestroying && proxyMoved) {\n                await EventHelper.waitForTransitionEnd({\n                    element,\n                    property     : DomHelper.getPropertyTransitionDuration(element, 'transform') ? 'transform' : 'all',\n                    thisObj      : me,\n                    once         : true,\n                    runOnDestroy : true\n                });\n            }\n            if (!me.isDestroyed) {\n                // Trigger event after transition has completed for UIs to redraw with stable DOM\n                me.trigger('abortFinalized', { context, event });\n            }\n        }\n        if (me.context?.started) {\n            me.reset();\n        }\n    }\n    // Restore state of all mutated elements\n    cleanUp() {\n        const\n            me                                                    = this,\n            { context, cloneTarget, draggingCls, dragProxyCls }   = me,\n            element                                               = context.dragProxy || context.element,\n            { relatedElements, originalRelatedElements, grabbed } = context,\n            removeClonedProxies                                   = cloneTarget && (me.removeProxyAfterDrop || !context.valid),\n            cssClassesToRemove                                    = [draggingCls, 'b-aborting', dragProxyCls, 'b-drag-main', 'b-drag-unified-proxy'];\n        element.classList.remove(...cssClassesToRemove);\n        if (removeClonedProxies) {\n            element.remove();\n        }\n        relatedElements?.forEach(element => {\n            if (removeClonedProxies) {\n                element.remove();\n            }\n            else {\n                element.classList.remove(...cssClassesToRemove);\n            }\n        });\n        // Restore originallly grabbed elements\n        grabbed.classList.remove('b-drag-original', 'b-hidden');\n        originalRelatedElements?.forEach(element => element.classList.remove('b-hidden', 'b-drag-original'));\n    }\n    //endregion\n};\n", "import Base from '../Base.js';\nimport Events from '../mixin/Events.js';\nimport DragHelperContainer from './mixin/DragHelperContainer.js';\nimport DragHelperTranslate from './mixin/DragHelperTranslate.js';\nimport DomHelper from './DomHelper.js';\nimport EventHelper from './EventHelper.js';\nimport ObjectHelper from './ObjectHelper.js';\nimport Rectangle from './util/Rectangle.js';\n/**\n * @module Core/helper/DragHelper\n */\nconst rootElementListeners = {\n    move       : 'onMouseMove',\n    up         : 'onMouseUp',\n    docclick   : 'onDocumentClick',\n    touchstart : 'onTouchStart',\n    touchmove  : 'onTouchMove',\n    touchend   : 'onTouchEnd',\n    keydown    : 'onKeyDown'\n};\n/**\n * ## Intro\n * A drag drop helper class which lets you move elements in page. It supports:\n *\n *  * Dragging the actual element\n *  * Dragging a cloned version of the element\n *  * Dragging extra `relatedElements` along with the main element\n *  * Firing useful events {@link #event-beforeDragStart}, {@link #event-dragStart}, {@link #event-drag}, {@link #event-drop}, {@link #event-abort}\n *  * Validation by setting a `valid` Boolean on the drag context object provided to event listeners\n *  * Aborting drag with ESCAPE key\n *  * Constraining drag to be only horizontal or vertical using {@link #config-lockX} and {@link #config-lockY}\n *  * Defining X / Y boundaries using {@link #config-minX}, {@link #config-maxX} and {@link #config-minY}, {@link #config-maxY}\n *  * Async finalization (e.g. to show confirmation prompts)\n *  * Animated final transition after mouse up of a valid drop (see {@link #function-animateProxyTo})\n *  * Animated abort transition after an invalid or aborted drop\n *\n * {@inlineexample Core/helper/DragHelper.js}\n *\n * ## Two modes\n *\n * DragHelper supports two {@link #config-mode modes}:\n *\n * * `container` - moving / rearranging elements within and between specified containers\n * * `translateXY` - freely repositioning an element, either using the element or a cloned version of it - a \"drag proxy\" (default mode)\n *\n * ## Container drag mode\n *\n * Container drag should be used when moving or rearranging child elements within and between specified containers\n *\n * Example:\n * ```javascript\n * // dragging element between containers\n * let dragHelper = new DragHelper({\n *   mode       : 'container',\n *   containers : [ container1, container2 ]\n * });\n *```\n *\n * ## Translate drag mode\n *\n * Use translate drag to reposition an element within its container using transform CSS.\n *\n * Example:\n * ```javascript\n * // dragging element within container\n * let dragHelper = new DragHelper({\n *   mode           : 'translateXY',\n *   targetSelector : 'div.movable'\n * });\n * ```\n *\n * ## Observable events\n * In the various events fired by the DragHelper, you will have access to the raw DOM event and some useful `context` about the drag operation:\n *\n * ```javascript\n *  myDrag.on({\n *      drag : ({event , context}) {\n *            // The element which we're moving, could be a cloned version of grabbed, or the grabbed element itself\n *           const element = context.element;\n *\n *           // The original mousedown element upon which triggered the drag operation\n *           const grabbed = context.grabbed;\n *\n *           // The target under the current mouse / pointer / touch position\n *           const target = context.target;\n *       }\n *  });\n * ```\n *\n * ## Simple drag helper subclass with a drop target specified:\n * ```javascript\n * export default class MyDrag extends DragHelper {\n *      static get defaultConfig() {\n *          return {\n *              // Don't drag the actual cell element, clone it\n *              cloneTarget        : true,\n *              mode               : 'translateXY',\n *              // Only allow drops on DOM elements with 'yourDropTarget' CSS class specified\n *              dropTargetSelector : '.yourDropTarget',\n *\n *              // Only allow dragging elements with the 'draggable' CSS class\n *              targetSelector : '.draggable'\n *          };\n *      }\n *\n *      construct(config) {\n *          const me = this;\n *\n *          super.construct(config);\n *\n *          me.on({\n *              dragstart : me.onDragStart\n *          });\n *      }\n *\n *      onDragStart({ event, context }) {\n *          const target = context.target;\n *\n *          // Here you identify what you are dragging (an image of a user, grid row in an order table etc) and map it to something in your\n *          // data model. You can store your data on the context object which is available to you in all drag-related events\n *          context.userId = target.dataset.userId;\n *      }\n *\n *      onEquipmentDrop({ context, event }) {\n *          const me = this;\n *\n *          if (context.valid) {\n *              const userId   = context.userId,\n *                    droppedOnTarget = context.target;\n *\n *              console.log(`You dropped user ${userStore.getById(userId).name} on ${droppedOnTarget}`, droppedOnTarget);\n *\n *              // Dropped on a scheduled event, display toast\n *              Toast.show(`You dropped user ${userStore.getById(userId).name} on ${droppedOnTarget}`);\n *          }\n *      }\n *  };\n * ```\n *\n * ## Dragging multiple elements\n *\n * You can tell the DragHelper to also move additional `relatedElements` when a drag operation is starting. Simply\n * provide an array of elements on the context object:\n *\n * ```javascript\n * new DragHelper ({\n *     callOnFunctions : true,\n *\n *     onDragStart({ context }) {\n *          // Let drag helper know about extra elements to drag\n *          context.relatedElements = Array.from(element.querySelectorAll('.b-resource-avatar'));\n *     }\n * });\n * ```\n *\n * ## Creating a custom drag proxy\n *\n * Using the {@link #function-createProxy} you can create any markup structure to use when dragging cloned targets.\n *\n * ```javascript\n * new DragHelper ({\n *    callOnFunctions      : true,\n *    // Don't drag the actual cell element, clone it\n *    cloneTarget          : true,\n *    // We size the cloned element using CSS\n *    autoSizeClonedTarget : false,\n *\n *    mode               : 'translateXY',\n *    // Only allow drops on certain DOM nodes\n *    dropTargetSelector : '.myDropTarget',\n *    // Only allow dragging cell elements in a Bryntum Grid\n *    targetSelector     : '.b-grid-row:not(.b-group-row) .b-grid-cell'\n *\n *    // Here we receive the element where the drag originated and we can choose to return just a child element of it\n *    // to use for the drag proxy (such as an icon)\n *    createProxy(element) {\n *        return element.querySelector('i').cloneNode();\n *    }\n * });\n * ```\n *\n * ## Animating a cloned drag proxy to a point before finalizing\n *\n * To provide users with the optimal user experience, you can set a `transitionTo` object (with `target` element and\n * `align` spec) on the DragHelper\u00B4s `context` object inside a {@link #event-drop} listener (only applies to translate\n * {@link #config-mode mode} operations). This will trigger a final animation of the drag proxy which should represent\n * the change of data state that will be triggered by the drop.\n *\n * You can see this in action in Gantt\u00B4s `drag-resource-from-grid` demo.\n *\n * ```javascript\n * new DragHelper ({\n *    callOnFunctions      : true,\n *    // Don't drag the actual cell element, clone it\n *    cloneTarget          : true,\n *    // We size the cloned element using CSS\n *    autoSizeClonedTarget : false,\n *\n *    mode               : 'translateXY',\n *    // Only allow drops on certain DOM nodes\n *    dropTargetSelector : '.myDropTarget',\n *    // Only allow dragging cell elements in a Bryntum Grid\n *    targetSelector     : '.b-grid-row:not(.b-group-row) .b-grid-cell'\n *\n *    // Here we receive the element where the drag originated and we can choose to return just a child element of it\n *    // to use for the drag proxy (such as an icon)\n *    createProxy(element) {\n *        return element.querySelector('i').cloneNode();\n *    },\n *\n *    async onDrop({ context, event }) {\n *       // If it's a valid drop, provide a point to animate the proxy to before finishing the operation\n *      if (context.valid) {\n *          await this.animateProxyTo(someElement, {\n *               // align left side of drag proxy to right side of the someElement\n *               align  : 'l0-r0'\n *          });\n *      }\n *      else {\n *          Toast.show(`You cannot drop here`);\n *      }\n *   }\n * });\n * ```\n *\n * @mixes Core/mixin/Events\n * @extends Core/Base\n */\nexport default class DragHelper extends Base.mixin(Events, DragHelperContainer, DragHelperTranslate) {\n    //region Config\n    static get defaultConfig() {\n        return {\n            /**\n             * Drag proxy CSS class\n             * @config {String}\n             * @default\n             * @private\n             */\n            dragProxyCls : 'b-drag-proxy',\n            /**\n             * CSS class added when drag is invalid\n             * @config {String}\n             * @default\n             */\n            invalidCls : 'b-drag-invalid',\n            /**\n             * CSS class added to the source element in Container drag\n             * @config {String}\n             * @default\n             * @private\n             */\n            draggingCls : 'b-dragging',\n            /**\n             * CSS class added to the source element in Container drag\n             * @config {String}\n             * @default\n             * @private\n             */\n            dropPlaceholderCls : 'b-drop-placeholder',\n            /**\n             * The amount of pixels to move mouse before it counts as a drag operation\n             * @config {Number}\n             * @default\n             */\n            dragThreshold : 5,\n            /**\n             * The outer element where the drag helper will operate (attach events to it and use as outer limit when looking for ancestors)\n             * @config {HTMLElement}\n             * @default\n             */\n            outerElement : document.body,\n            /**\n             * Outer element that limits where element can be dragged\n             * @config {HTMLElement}\n             */\n            dragWithin : null,\n            /**\n             * Set to true to stack any related dragged elements below the main drag proxy element. Only applicable when\n             * using translate {@link #config-mode} with {@link #config-cloneTarget}\n             * @config {Boolean}\n             */\n            unifiedProxy : null,\n            monitoringConfig : null,\n            /**\n             * Constrain translate drag to dragWithin elements bounds (set to false to allow it to \"overlap\" edges)\n             * @config {Boolean}\n             * @default\n             */\n            constrain : true,\n            /**\n             * Smallest allowed x when dragging horizontally.\n             * @config {Number}\n             */\n            minX : null,\n            /**\n             * Largest allowed x when dragging horizontally.\n             * @config {Number}\n             */\n            maxX : null,\n            /**\n             * Smallest allowed y when dragging horizontally.\n             * @config {Number}\n             */\n            minY : null,\n            /**\n             * Largest allowed y when dragging horizontally.\n             * @config {Number}\n             */\n            maxY : null,\n            /**\n             * Enabled dragging, specify mode:\n             * <table>\n             * <tr><td>container<td>Allows reordering elements within one and/or between multiple containers\n             * <tr><td>translateXY<td>Allows dragging within a parent container\n             * </table>\n             * @config {'container'|'translateXY'}\n             * @default\n             */\n            mode : 'translateXY',\n            /**\n             * A function that determines if dragging an element is allowed. Gets called with the element as argument,\n             * return `true` to allow dragging or `false` to prevent.\n             * @config {Function}\n             * @param {HTMLElement} element\n             * @returns {Boolean}\n             */\n            isElementDraggable : null,\n            /**\n             * A CSS selector used to determine if dragging an element is allowed.\n             * @config {String}\n             */\n            targetSelector : null,\n            /**\n             * A CSS selector used to determine if a drop is allowed at the current position.\n             * @config {String}\n             */\n            dropTargetSelector : null,\n            /**\n             * A CSS selector added to each drop target element while dragging.\n             * @config {String}\n             */\n            dropTargetCls : null,\n            /**\n             * A CSS selector used to target a child element of the mouse down element, to use as the drag proxy element.\n             * Applies to translate {@link #config-mode mode} when using {@link #config-cloneTarget}.\n             * @config {String}\n             */\n            proxySelector : null,\n            /**\n             * Set to `true` to clone the dragged target, and not move the actual target DOM node.\n             * @config {Boolean}\n             * @default\n             */\n            cloneTarget : false,\n            /**\n             * Set to `false` to not apply width/height of cloned drag proxy elements.\n             * @config {Boolean}\n             * @default\n             */\n            autoSizeClonedTarget : true,\n            /**\n             * Set to true to hide the original element while dragging (applicable when `cloneTarget` is true).\n             * @config {Boolean}\n             * @default\n             */\n            hideOriginalElement : false,\n            /**\n             * Containers whose elements can be rearranged (and moved between the containers). Used when\n             * mode is set to \"container\".\n             * @config {HTMLElement[]}\n             */\n            containers : null,\n            /**\n             * A CSS selector used to exclude elements when using container mode\n             * @config {String}\n             */\n            ignoreSelector : null,\n            startEvent : null,\n            /**\n             * Configure as `true` to disallow dragging in the `X` axis. The dragged element will only move vertically.\n             * @config {Boolean}\n             * @default\n             */\n            lockX : false,\n            /**\n             * Configure as `true` to disallow dragging in the `Y` axis. The dragged element will only move horizontally.\n             * @config {Boolean}\n             * @default\n             */\n            lockY : false,\n            /**\n             * The amount of milliseconds to wait after a touchstart, before a drag gesture will be allowed to start.\n             * @config {Number}\n             * @default\n             */\n            touchStartDelay : 300,\n            /**\n             * Scroll manager of the target. If specified, scrolling while dragging is supported.\n             * @config {Core.util.ScrollManager}\n             */\n            scrollManager : null,\n            /**\n             * A method provided to snap coordinates to fixed points as you drag\n             * @config {Function}\n             * @internal\n             */\n            snapCoordinates : null,\n            /**\n             * When using {@link #config-unifiedProxy}, use this amount of pixels to offset each extra element when dragging multiple items\n             * @config {Number}\n             * @default\n             */\n            unifiedOffset : 5,\n            /**\n             * Configure as `false` to take ownership of the proxy element after a valid drop (advanced usage).\n             * @config {Boolean}\n             * @default\n             */\n            removeProxyAfterDrop : true,\n            clickSwallowDuration : 50,\n            ignoreSamePositionDrop : true,\n            // true to allow drops outside the dragWithin element\n            allowDropOutside : null,\n            // for container mode\n            floatRootOwner   : null,\n            mouseMoveListenerElement   : document,\n            externalDropTargetSelector : null,\n            testConfig : {\n                transitionDuration   : 10,\n                clickSwallowDuration : 50,\n                touchStartDelay      : 100\n            },\n            rtlSource : null,\n            /**\n             * Creates the proxy element to be dragged, when using {@link #config-cloneTarget}. Clones the original element by default.\n             * Provide your custom {@link #function-createProxy} function to be used for creating drag proxy.\n             * @param {HTMLElement} element The element from which the drag operation originated\n             * @config {Function}\n             * @returns {HTMLElement}\n             */\n            createProxy : null\n        };\n    }\n    //endregion\n    //region Events\n    /**\n     * Fired before dragging starts, return `false` to prevent the drag operation.\n     * @preventable\n     * @event beforeDragStart\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {HTMLElement} context.element The original element upon which the mousedown event triggered a drag operation\n     * @param {MouseEvent|TouchEvent} event\n     */\n    /**\n     * Fired when dragging starts. The event includes a `context` object. If you want to drag additional elements you can\n     * provide these as an array of elements assigned to the `relatedElements` property of the context object.\n     * @event dragStart\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {HTMLElement} context.element The element which we're moving, could be a cloned version of grabbed, or the grabbed element itself\n     * @param {HTMLElement} context.grabbed The original element upon which the mousedown event triggered a drag operation\n     * @param {HTMLElement[]} context.relatedElements Array of extra elements to include in the drag.\n     * @param {MouseEvent|TouchEvent} event\n     */\n    /**\n     * Fired while dragging, you can signal that the drop is valid or invalid by setting `context.valid = false;`\n     * @event drag\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {HTMLElement} context.element The element which we are moving, could be a cloned version of grabbed, or the grabbed element itself\n     * @param {HTMLElement} context.target The target element below the cursor\n     * @param {HTMLElement} context.grabbed The original element upon which the mousedown event triggered a drag operation\n     * @param {HTMLElement[]} context.relatedElements An array of extra elements dragged with the main dragged element\n     * @param {Boolean} context.valid Set this to true or false to indicate whether the drop position is valid.\n     * @param {MouseEvent} event\n     */\n    /**\n     * Fired after a drop at an invalid position\n     * @event abort\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {HTMLElement} context.element The element which we are moving, could be a cloned version of grabbed, or the grabbed element itself\n     * @param {HTMLElement} context.target The target element below the cursor\n     * @param {HTMLElement} context.grabbed The original element upon which the mousedown event triggered a drag operation\n     * @param {HTMLElement[]} context.relatedElements An array of extra elements dragged with the main dragged element\n     * @param {MouseEvent} event\n     */\n    /**\n     * Fires after {@link #event-abort} and after drag proxy has animated back to its original position\n     * @private\n     * @event abortFinalized\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {HTMLElement} context.element The element which we are moving, could be a cloned version of grabbed, or the grabbed element itself\n     * @param {HTMLElement} context.target The target element below the cursor\n     * @param {HTMLElement} context.grabbed The original element upon which the mousedown event triggered a drag operation\n     * @param {MouseEvent} event\n     */\n    //endregion\n    //region Init\n    /**\n     * Initializes a new DragHelper.\n     * @param {DragHelperConfig} config Configuration object, accepts options specified under Configs above\n     *\n     * ```javascript\n     * new DragHelper({\n     *   containers: [div1, div2],\n     *   isElementDraggable: element => element.className.contains('handle'),\n     *   outerElement: topParent,\n     *   listeners: {\n     *     drop: onDrop,\n     *     thisObj: this\n     *   }\n     * });\n     * ```\n     *\n     * @function constructor\n     */\n    construct(config) {\n        const me = this;\n        super.construct(config);\n        me.initListeners();\n        if (me.isContainerDrag) {\n            me.initContainerDrag();\n        }\n        else {\n            me.initTranslateDrag();\n        }\n        me.onScrollManagerScrollCallback = me.onScrollManagerScrollCallback.bind(me);\n    }\n    doDestroy() {\n        this.reset(true);\n        super.doDestroy();\n    }\n    /**\n     * Initialize listener\n     * @private\n     */\n    initListeners() {\n        const\n            me                 = this,\n            { outerElement }   = me,\n            dragStartListeners = {\n                element     : outerElement,\n                pointerdown : 'onPointerDown',\n                thisObj     : me\n            };\n        me.mouseMoveListenerElement = me.getMouseMoveListenerTarget(outerElement);\n        // These will be autoDetached upon destroy\n        EventHelper.on(dragStartListeners);\n    }\n    // Salesforce hook: we override this method to move listener from the body (which is default root node) to element\n    // inside of LWC\n    getMouseMoveListenerTarget(element) {\n        const root = element.getRootNode();\n        let result = this.mouseMoveListenerElement;\n        // If we are inside a closed shadow root and we are a child of a Widget, listen to mouse moves only inside outermost el\n        if (root.nodeType === Node.DOCUMENT_FRAGMENT_NODE && root.mode === 'closed') {\n            result = element.closest('.b-outer') || result;\n        }\n        return result;\n    }\n    get isRTL() {\n        return Boolean(this.rtlSource?.rtl);\n    }\n    //endregion\n    //region Events\n    /**\n     * Fires after drop. For valid drops, it exposes `context.async` which you can set to true to signal that additional\n     * processing is needed before finalizing the drop (such as showing some dialog). When that operation is done, call\n     * `context.finalize(true/false)` with a boolean that determines the outcome of the drop.\n     *\n     * You can signal that the drop is valid or invalid by setting `context.valid = false;`\n     *\n     * For translate type drags with {@link #config-cloneTarget}, you can also set `transitionTo` if you want to animate\n     * the dragged proxy to a position before finalizing the operation. See class intro text for example usage.\n     *\n     * @event drop\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {HTMLElement} context.element The element which we are moving, could be a cloned version of grabbed, or the grabbed element itself\n     * @param {HTMLElement} context.target The target element below the cursor\n     * @param {HTMLElement} context.grabbed The original element upon which the mousedown event triggered a drag operation\n     * @param {HTMLElement[]} context.relatedElements An array of extra elements dragged with the main dragged element\n     * @param {Boolean} context.valid true if the drop position is valid\n     */\n    /**\n     * Fires after {@link #event-drop} and after drag proxy has animated to its final position (if setting `transitionTo`\n     * on the drag context object).\n     * @private\n     * @event dropFinalized\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {HTMLElement} context.element The element which we are moving, could be a cloned version of grabbed, or the grabbed element itself\n     * @param {HTMLElement} context.target The target element below the cursor\n     * @param {HTMLElement} context.grabbed The original element upon which the mousedown event triggered a drag operation\n     */\n    onPointerDown(event) {\n        const me = this;\n        if (\n            // Left button or touch allowed\n            event.button !== 0 ||\n            // If a drag is ongoing already, finalize it and don't proceed with new drag (happens if pointerup happened\n            // when current window wasn't focused - tab switch or window switch). Also handles the edge case of trying to\n            // start a new drag while previous is awaiting finalization, in which case it just bails out.\n            me.context\n        ) {\n            return;\n        }\n        // Check that element is draggable\n        if (me.isElementDraggable && !me.isElementDraggable(event.target, event)) {\n            return;\n        }\n        me.startEvent = event;\n        const handled = me.isContainerDrag ? me.grabContainerDrag(event) : me.grabTranslateDrag(event);\n        if (handled) {\n            me.blurDetacher = EventHelper.on({\n                element : globalThis,\n                blur    : me.onWindowBlur,\n                thisObj : me\n            });\n            const dragListeners = {\n                element : me.mouseMoveListenerElement,\n                thisObj : me,\n                capture : true,\n                keydown : rootElementListeners.keydown\n            };\n            if (event.pointerType === 'touch') {\n                me.touchStartTimer = me.setTimeout(() => me.touchStartTimer = null, me.touchStartDelay, 'touchStartDelay');\n                dragListeners.touchmove = {\n                    handler : rootElementListeners.touchmove,\n                    passive : false // We need to be able to preventDefault on the touchmove\n                };\n                // Touch desktops don't fire touchend event when touch has ended, instead pointerup is fired\n                // iOS do fire touchend\n                dragListeners.touchend = dragListeners.pointerup = rootElementListeners.touchend;\n            }\n            else {\n                dragListeners.pointermove = rootElementListeners.move;\n                dragListeners.pointerup = rootElementListeners.up;\n            }\n            // A listener detacher is returned;\n            me.dragListenersDetacher = EventHelper.on(dragListeners);\n            if (me.dragWithin && me.dragWithin !== me.outerElement && me.outerElement.contains(me.dragWithin)) {\n                const\n                    box = Rectangle.from(me.dragWithin, me.outerElement);\n                me.minY = box.top;\n                me.maxY = box.bottom;\n                me.minX = box.left;\n                me.maxX = box.right;\n            }\n        }\n    }\n    async internalMove(event) {\n        // Ignore events used to mimic pointer movement on scroll, those should not affect dragging\n        if (event.scrollInitiated) {\n            return;\n        }\n        const\n            me             = this,\n            { context }    = me,\n            distance       = EventHelper.getDistanceBetween(me.startEvent, event),\n            abortTouchDrag = me.touchStartTimer && distance > me.dragThreshold;\n        if (abortTouchDrag) {\n            me.abort(true);\n            return;\n        }\n        if (\n            !me.touchStartTimer && context?.element && (context.started || distance >= me.dragThreshold) &&\n            // Ignore text nodes\n            event.target?.nodeType === Node.ELEMENT_NODE\n        ) {\n            if (!context.started) {\n                if (me.trigger('beforeDragStart', { context, event }) === false) {\n                    return me.abort();\n                }\n                if (me.isContainerDrag) {\n                    me.startContainerDrag(event);\n                }\n                else {\n                    me.startTranslateDrag(event);\n                }\n                context.started = true;\n                // Now that the drag drop is confirmed to be starting, activate the configured scrollManager if present\n                me.scrollManager?.startMonitoring(ObjectHelper.merge({\n                    scrollables : [\n                        {\n                            element : me.dragWithin || me.outerElement\n                        }\n                    ],\n                    callback : me.onScrollManagerScrollCallback\n                }, me.monitoringConfig));\n                // Global informational class for when DragHelper is dragging\n                context.outermostEl = DomHelper.getOutermostElement(event.target);\n                context.outermostEl.classList.add('b-draghelper-active');\n                if (me.dropTargetSelector && me.dropTargetCls) {\n                    DomHelper.getRootElement(me.outerElement).querySelectorAll(me.dropTargetSelector).forEach(\n                        el => el.classList.add(me.dropTargetCls)\n                    );\n                }\n                // This event signals that the drag is started, observers could then provide relatedElements that should\n                // be dragged along with the mousedowned element\n                const result = me.trigger('dragStart', { context, event });\n                // Try to keep the drag flow synchronous unless listener returns a promise\n                if (ObjectHelper.isPromise(result)) {\n                    await result;\n                }\n                context.moveUnblocked = true;\n                if (me.isContainerDrag) {\n                    me.onContainerDragStarted(event);\n                }\n                else {\n                    me.onTranslateDragStarted(event);\n                }\n                // This event is used to set visibility of the original events in case drag is started\n                // in copy mode\n                me.trigger('afterDragStart', { context, event });\n            }\n            // Drag is started asynchronously, meaning this code path may be invoked several times before flag is set.\n            // We queue move events to trigger them afterwards. Used by `PercentBar` feature in SchedulerPro. Normal usage\n            // should not be affected because microtasks won't appear unless there is asynchronous handler.\n            if (context.moveUnblocked) {\n                // Use cached event, if there was one\n                if (me._cachedMouseEvent) {\n                    // some tests expect 2+ events\n                    me.update(event);\n                    me.update(me._cachedMouseEvent);\n                    delete me._cachedMouseEvent;\n                }\n                else {\n                    me.update(event);\n                }\n            }\n            else {\n                // Save last triggered event while we were waiting for promise to resolve\n                me._cachedMouseEvent = event;\n            }\n            // to prevent view drag (scroll) on ipad\n            if (event.type === 'touchmove') {\n                event.preventDefault();\n                event.stopImmediatePropagation();\n            }\n        }\n    }\n    onScrollManagerScrollCallback(config) {\n        const { lastMouseMoveEvent } = this;\n        if (this.context?.element && lastMouseMoveEvent) {\n            // Indicate that this is a 'fake' mousemove event as a result of the scrolling\n            lastMouseMoveEvent.isScroll = true;\n            this.update(lastMouseMoveEvent, config);\n        }\n    }\n    onTouchMove(event) {\n        this.internalMove(event);\n    }\n    /**\n     * Move drag element with mouse.\n     * @param event\n     * @fires beforeDragStart\n     * @fires dragStart\n     * @private\n     */\n    onMouseMove(event) {\n        this.internalMove(event);\n    }\n    /**\n     * Updates drag, called when an element is grabbed and mouse moves\n     * @private\n     * @fires drag\n     */\n    update(event, scrollManagerConfig) {\n        const\n            me                   = this,\n            { context }          = me,\n            scrollingPageElement = document.scrollingElement || document.body; // two different modes used\n        // In case of scrolling need to update target element based on [X, Y] of the mouse event\n        // Salesforce workaround: we're listening on the document body and salesforce won't report correct target, so\n        // we try to get it from composed path\n        let target = me.getMouseMoveEventTarget(event);\n        // \"pointer-events:none\" touchmove has no effect for the touchmove event target, meaning we cannot know\n        // what's under the cursor as easily in touch devices\n        if (event.type === 'touchmove') {\n            const touch = event.changedTouches[0];\n            target = DomHelper.elementFromPoint(touch.clientX + scrollingPageElement.scrollLeft, touch.clientY + scrollingPageElement.scrollTop);\n        }\n        context.target = target;\n        let internallyValid = me.allowDropOutside || !me.dragWithin || me.dragWithin.contains(event.target);\n        if (internallyValid && me.dropTargetSelector) {\n            internallyValid = internallyValid && Boolean(target?.closest(me.dropTargetSelector));\n        }\n        // Move the drag proxy or dragged element before triggering the drag event\n        if (me.isContainerDrag) {\n            me.updateContainerProxy(event, scrollManagerConfig);\n        }\n        else {\n            // Note, if you drag an element from Container A to Container B which is scrollable (handled by ScrollManager),\n            // and you notice that the proxy element follows the scroll and goes away from the cursor,\n            // make sure you set `outerElement` to the container of the source element (Container A)\n            // and set `constrain` to `false`.\n            me.updateTranslateProxy(event, scrollManagerConfig);\n        }\n        context.valid = internallyValid;\n        // Allow external code to validate the context before updating a container drag\n        me.trigger('drag', { context, event });\n        // Move the placeholder element into its new place.\n        // This will see the new state of context if mutated by a drag listener.\n        if (me.isContainerDrag) {\n            me.updateContainerDrag(event, scrollManagerConfig);\n        }\n        context.valid = context.valid && internallyValid;\n        for (const element of me.draggedElements) {\n            element.classList.toggle(me.invalidCls, !context.valid);\n        }\n        if (event) {\n            me.lastMouseMoveEvent = event;\n        }\n    }\n    get draggedElements() {\n        const { context } = this;\n        return [context.dragProxy || context.element, ...(context.relatedElements ?? [])];\n    }\n    /**\n     * Abort dragging\n     * @fires abort\n     */\n    async abort(silent = false) {\n        const\n            me          = this,\n            { context } = me;\n        me.scrollManager?.stopMonitoring?.();\n        me.removeListeners();\n        if (context?.started && !context.aborted) {\n            // Force a synchronous layout so that transitions from this point will work.\n            context.element.getBoundingClientRect();\n            // Aborted drag not considered valid\n            context.valid = false;\n            if (me.isContainerDrag) {\n                me.abortContainerDrag(undefined, undefined, silent);\n            }\n            else {\n                me.abortTranslateDrag(undefined, undefined, silent);\n            }\n            context.aborted = true;\n        }\n        else {\n            me.reset(true);\n        }\n    }\n    // Empty class implementation. If listeners *are* added, the detacher is added\n    // as an instance property. So this is always callable.\n    removeListeners() {\n        this.dragListenersDetacher?.();\n        this.blurDetacher?.();\n    }\n    // Called when a drag operation is completed, or aborted\n    // Removes DOM listeners and resets context\n    reset(silent) {\n        const\n            me          = this,\n            { context } = me;\n        if (context?.started) {\n            for (const element of me.draggedElements) {\n                element.classList.remove(me.invalidCls);\n            }\n            context.outermostEl.classList.remove('b-draghelper-active');\n            if (me.isContainerDrag) {\n                context.dragProxy.remove();\n            }\n            else {\n                me.cleanUp();\n            }\n            if (me.dropTargetSelector && me.dropTargetCls) {\n                DomHelper.getRootElement(me.outerElement).querySelectorAll(me.dropTargetSelector).forEach(\n                    el => el.classList.remove(me.dropTargetCls)\n                );\n            }\n        }\n        me.removeListeners();\n        /**\n         * Fired after a drag operation is completed or aborted\n         * @event reset\n         * @private\n         * @param {Core.helper.DragHelper} dragHelper\n         */\n        if (!silent) {\n            me.trigger('reset');\n        }\n        me.context = me.lastMouseMoveEvent = null;\n    }\n    onTouchEnd(event) {\n        this.onMouseUp(event);\n    }\n    /**\n     * This is a capture listener, only added during drag, which prevents a click gesture\n     * propagating from the terminating mouseup gesture\n     * @param {MouseEvent} event\n     * @private\n     */\n    onDocumentClick(event) {\n        event.stopPropagation();\n    }\n    /**\n     * Drop on mouse up (if dropped on valid target).\n     * @param event\n     * @private\n     */\n    onMouseUp(event) {\n        const\n            me          = this,\n            { context } = me;\n        me.removeListeners();\n        if (context) {\n            me.scrollManager?.stopMonitoring();\n            if (context.started) {\n                if (context.moveUnblocked) {\n                    // Nobody else must get to process the pointerup event of a drag.\n                    // We are using capture : true, so we see it first\n                    event.stopPropagation();\n                    context.finalizing = true;\n                    if (me.isContainerDrag) {\n                        me.finishContainerDrag(event);\n                    }\n                    else {\n                        me.finishTranslateDrag(event);\n                    }\n                    // Prevent the impending document click from the mouseup event from propagating\n                    // into a click on our element.\n                    EventHelper.on({\n                        element : document,\n                        thisObj : me,\n                        click   : rootElementListeners.docclick,\n                        capture : true,\n                        expires : me.clickSwallowDuration, // In case a click did not ensue, remove the listener\n                        once    : true\n                    });\n                }\n                // If move has not yet started (due to async listener) and we've received a mouseup event, we need to\n                // listen to the next `drag` event to handle mouseup at the correct app state\n                else {\n                    me.ion({\n                        drag() {\n                            me.onMouseUp(event);\n                        },\n                        once : true\n                    });\n                }\n            }\n            else {\n                me.reset(true);\n            }\n        }\n    }\n    /**\n     * Cancel on ESC key\n     * @param event\n     * @private\n     */\n    onKeyDown(event) {\n        if (this.context?.started && event.key === 'Escape') {\n            // Nobody else must get to process the ESCAPE key event of a drag.\n            // We are using capture : true, so we see it first\n            event.stopImmediatePropagation();\n            this.abort();\n        }\n    }\n    onWindowBlur() {\n        // If window blur occurs while we are dragging (tab is switched, another window steals focus from browser)\n        // pointer might be released and current window will not know about that. Thus allowing to pointerdown again\n        // when focus comes back. In this case we want to let drag helper know that next pointerdown should be ignored.\n        if (this.context && !this.context.finalizing) {\n            this.abort();\n        }\n    }\n    /**\n     * Creates the proxy element to be dragged, when using {@link #config-cloneTarget}. Clones the original element by default.\n     * Override it to provide your own custom HTML element structure to be used as the drag proxy.\n     * @param {HTMLElement} element The element from which the drag operation originated\n     * @returns {HTMLElement}\n     */\n    createProxy(element) {\n        if (this.proxySelector) {\n            element = element.querySelector(this.proxySelector) || element;\n        }\n        const proxy = element.cloneNode(true);\n        proxy.removeAttribute('id');\n        return proxy;\n    }\n    //endregion\n    get isContainerDrag() {\n        return this.mode === 'container';\n    }\n    /**\n     * Animated the proxy element to be aligned with the passed element. Returns a Promise which resolves after the\n     * DOM transition completes. Only applies to 'translateXY' mode.\n     * @param {HTMLElement|Core.helper.util.Rectangle} element The target element or a Rectangle\n     * @param {AlignSpec} [alignSpec] An object describing how to the align drag proxy to the target element\n     * to offset the aligned widget further from the target. May be configured as -ve to move the aligned widget\n     * towards the target - for example producing the effect of the anchor pointer piercing the target.\n     */\n    async animateProxyTo(targetElement, alignSpec = { align : 'c-c' }) {\n        const\n            { context, draggedElements } = this,\n            { element }                  = context,\n            targetRect                   = targetElement.isRectangle ? targetElement : Rectangle.from(targetElement);\n        draggedElements.forEach(el => {\n            el.classList.add('b-drag-final-transition');\n            DomHelper.alignTo(el, targetRect, alignSpec);\n        });\n        await EventHelper.waitForTransitionEnd({\n            element,\n            property : 'all',\n            thisObj  : this,\n            once     : true\n        });\n        draggedElements.forEach(el => el.classList.remove('b-drag-final-transition'));\n    }\n    /**\n     * Returns true if a drag operation is active\n     * @property {Boolean}\n     * @readonly\n     */\n    get isDragging() {\n        return Boolean(this.context?.started);\n    }\n    //#region Salesforce hooks\n    getMouseMoveEventTarget(event) {\n        return !event.isScroll ? event.target : DomHelper.elementFromPoint(event.clientX, event.clientY);\n    }\n    //#endregion\n}\nDragHelper._$name = 'DragHelper';", "import Base from '../Base.js';\nimport Events from '../mixin/Events.js';\nimport BrowserHelper from './BrowserHelper.js';\nimport EventHelper from './EventHelper.js';\nimport DomHelper from './DomHelper.js';\nimport ObjectHelper from './ObjectHelper.js';\nimport Rectangle from './util/Rectangle.js';\nconst documentListeners = {\n    down       : 'onMouseDown',\n    move       : 'onMouseMove',\n    up         : 'onMouseUp',\n    docclick   : 'onDocumentClick',\n    touchstart : {\n        handler : 'onTouchStart',\n        // We preventDefault touchstart so as not to scroll. Must not be passive.\n        // https://developers.google.com/web/updates/2017/01/scrolling-intervention\n        passive : false\n    },\n    touchmove : 'onTouchMove',\n    touchend  : 'onTouchEnd',\n    keydown   : 'onKeyDown'\n};\n/**\n * @module Core/helper/ResizeHelper\n */\n/**\n * Contextual information available during a resize.\n *\n * @typedef {Object} ResizeContext\n * @property {HTMLElement} element Element being resized\n * @property {'top'|'right'|'bottom'|'left'} edge Edge being dragged\n * @property {Boolean} valid `true` if the resize is valid, `false` if it is not\n * @property {Boolean} async Set to `true` in a `resize` listener to allow asynchronous finalization of the resize\n * @property {Function} finalize Call this function to finalize the resize, required if it was flagged as `async` in a\n * `resize` listener\n * @property {Number} newWidth New width of the element\n * @property {Number} newHeight New height of the element\n * @property {Number} newX New x coordinate of the element, when dragging left edge\n * @property {Number} newY New y coordinate of the element, when dragging top edge\n */\n/**\n * Handles resizing of elements using handles. Handles can be actual elements or virtual handles specified as a border\n * area on elements left and right edges.\n *\n * ```javascript\n * // enable resizing all elements with class 'resizable'\n * let resizer = new ResizeHelper({\n *   targetSelector: '.resizable'\n * });\n * ```\n *\n * @mixes Core/mixin/Events\n * @internal\n */\nexport default class ResizeHelper extends Events(Base) {\n    //region Config\n    static get defaultConfig() {\n        return {\n            /**\n             * CSS class added when resizing\n             * @config {String}\n             * @default\n             */\n            resizingCls : 'b-resizing',\n            /**\n             * The amount of pixels to move mouse before it counts as a drag operation\n             * @config {Number}\n             * @default\n             */\n            dragThreshold : 5,\n            /**\n             * Resizing handle size\n             * @config {Number}\n             * @default\n             */\n            handleSize : 10,\n            /**\n             * Automatically shrink virtual handles when available space < handleSize. The virtual handles will\n             * decrease towards width/height 1, reserving space between opposite handles to for example leave room for\n             * dragging. To configure reserved space, see {@link #config-reservedSpace}.\n             * @config {Boolean}\n             * @default false\n             */\n            dynamicHandleSize : null,\n            //\n            /**\n             * Room in px to leave unoccupied by handles when shrinking them dynamically (see\n             * {@link #config-dynamicHandleSize}).\n             * @config {Number}\n             * @default\n             */\n            reservedSpace : 10,\n            /**\n             * Resizing handle size on touch devices\n             * @config {Number}\n             * @default\n             */\n            touchHandleSize : 30,\n            /**\n             * Minimum width when resizing\n             * @config {Number}\n             * @default\n             */\n            minWidth : 1,\n            /**\n             * Max width when resizing.\n             * @config {Number}\n             * @default\n             */\n            maxWidth : 0,\n            /**\n             * Minimum height when resizing\n             * @config {Number}\n             * @default\n             */\n            minHeight : 1,\n            /**\n             * Max height when resizing\n             * @config {Number}\n             * @default\n             */\n            maxHeight : 0,\n            // outerElement, attach events to it and use as outer limit when looking for ancestors\n            outerElement : document.body,\n            /**\n             * Optional scroller used to read scroll position. If unspecified, the outer element will be used.\n             * @config {Core.helper.util.Scroller}\n             */\n            scroller : null,\n            /**\n             * Assign a function to determine if a hovered element can be resized or not.\n             * Return `true` to allow resizing or `false` to prevent.\n             * @config {Function}\n             * @param {HTMLElement} element\n             * @returns {Boolean}\n             * @default\n             */\n            allowResize : null,\n            /**\n             * Outer element that limits where element can be dragged\n             * @config {HTMLElement}\n             * @default\n             */\n            dragWithin : null,\n            /**\n             * A function that determines if dragging an element is allowed. Gets called with the element as argument,\n             * return `true` to allow dragging or `false` to prevent.\n             * @config {Function}\n             * @param {HTMLElement} element\n             * @returns {Boolean}\n             * @default\n             */\n            isElementResizable : null,\n            /**\n             * A CSS selector used to determine if resizing an element is allowed.\n             * @config {String}\n             * @default\n             */\n            targetSelector : null,\n            /**\n             * Use left handle when resizing. Only applies when `direction` is 'horizontal'\n             * @config {Boolean}\n             * @default\n             */\n            leftHandle : true,\n            /**\n             * Use right handle when resizing. Only applies when `direction` is 'horizontal'\n             * @config {Boolean}\n             * @default\n             */\n            rightHandle : true,\n            /**\n             * Use top handle when resizing. Only applies when `direction` is 'vertical'\n             * @config {Boolean}\n             * @default\n             */\n            topHandle : true,\n            /**\n             * Use bottom handle when resizing. Only applies when `direction` is 'vertical'\n             * @config {Boolean}\n             * @default\n             */\n            bottomHandle : true,\n            /**\n             * A CSS selector used to determine where handles should be \"displayed\" when resizing. Defaults to\n             * targetSelector if unspecified\n             * @config {String}\n             */\n            handleSelector : null,\n            /**\n             * A CSS selector used to determine which inner element contains handles.\n             * @config {String}\n             */\n            handleContainerSelector : null,\n            startEvent : null,\n            /*\n             * Optional config object, used by EventResize feature: it appends proxy and has to start resizing immediately\n             * @config {Object}\n             * @private\n             */\n            grab : null,\n            /**\n             * CSS class added when the resize state is invalid\n             * @config {String}\n             * @default\n             */\n            invalidCls : 'b-resize-invalid',\n            // A number that controls whether or not the element is wide enough for it to make sense to show resize handles\n            // e.g. handle width is 10px, so doesn't make sense to show them unless handles on both sides fit\n            handleVisibilityThreshold : null,\n            // Private config that disables translation when resizing left edge. Useful for example in cases when element\n            // being resized is part of a flex layout\n            skipTranslate : false,\n            /**\n             * Direction to resize in, either 'horizontal' or 'vertical'\n             * @config {'horizontal'|'vertical'}\n             * @default\n             */\n            direction : 'horizontal',\n            clickSwallowDuration : 50,\n            rtlSource : null\n        };\n    }\n    static configurable = {\n        // Private config that disables updating elements width and position, for when data is live updated during\n        // resize, leading to element being redrawn\n        skipUpdatingElement : null\n    };\n    //endregion\n    //region Events\n    /**\n     * Fired while dragging\n     * @event resizing\n     * @param {Core.helper.ResizeHelper} source\n     * @param {ResizeContext} context Resize context\n     * @param {MouseEvent} event Browser event\n     */\n    /**\n     * Fired when dragging starts.\n     * @event resizeStart\n     * @param {Core.helper.ResizeHelper} source\n     * @param {ResizeContext} context Resize context\n     * @param {MouseEvent|TouchEvent} event Browser event\n     */\n    /**\n     * Fires after resize, and allows for asynchronous finalization by setting 'async' to `true` on the context object.\n     * @event resize\n     * @param {Core.helper.ResizeHelper} source\n     * @param {ResizeContext} context Context about the resize operation. Set 'async' to `true` to indicate asynchronous\n     * validation of the resize flow (for showing a confirmation dialog etc)\n     */\n    /**\n     * Fires when a resize is canceled (width & height are reverted)\n     * @event cancel\n     * @param {Core.helper.ResizeHelper} source\n     * @param {ResizeContext} context Resize context\n     * @param {MouseEvent|TouchEvent} event Browser event\n     */\n    //endregion\n    //region Init\n    construct(config) {\n        const me = this;\n        super.construct(config);\n        // Larger draggable zones on pure touch devices with no mouse\n        if (!me.handleSelector && !BrowserHelper.isHoverableDevice) {\n            me.handleSize = me.touchHandleSize;\n        }\n        me.handleVisibilityThreshold = me.handleVisibilityThreshold || 2 * me.handleSize;\n        me.initListeners();\n        me.initResize();\n    }\n    doDestroy() {\n        this.abort(true);\n        super.doDestroy();\n    }\n    updateSkipUpdatingElement(skip) {\n        if (skip) {\n            this.skipTranslate = true;\n        }\n    }\n    /**\n     * Initializes resizing\n     * @private\n     */\n    initResize() {\n        const me = this;\n        if (!me.isElementResizable && me.targetSelector) {\n            me.isElementResizable = element => element.closest(me.targetSelector);\n        }\n        if (me.grab) {\n            const { edge, element, event } = me.grab;\n            me.startEvent = event;\n            const cursorOffset = me.getCursorOffsetToElementEdge(event, element, edge);\n            // emulates mousedown & grabResize\n            me.context = {\n                element,\n                edge,\n                valid         : true,\n                async         : false,\n                elementStartX : DomHelper.getTranslateX(element) || element.offsetLeft, // extract x from translate\n                elementStartY : DomHelper.getTranslateY(element) || element.offsetTop, // extract x from translate\n                newX          : DomHelper.getTranslateX(element) || element.offsetLeft, // No change yet on start, but info must be present\n                newY          : DomHelper.getTranslateY(element) || element.offsetTop, // No change yet on start, but info must be present\n                elementWidth  : element.offsetWidth,\n                elementHeight : element.offsetHeight,\n                cursorOffset,\n                startX        : event.clientX + cursorOffset.x + me.scrollLeft,\n                startY        : event.clientY + cursorOffset.y + me.scrollTop,\n                finalize      : () => me.reset?.()\n            };\n            element.classList.add(me.resizingCls);\n            me.internalStartResize(me.isTouch);\n        }\n    }\n    /**\n     * Initialize listeners\n     * @private\n     */\n    initListeners() {\n        const\n            me                 = this,\n            dragStartListeners = {\n                element    : me.outerElement,\n                mousedown  : documentListeners.down,\n                touchstart : documentListeners.touchstart,\n                thisObj    : me\n            };\n        if (!me.handleSelector && BrowserHelper.isHoverableDevice) {\n            dragStartListeners.mousemove = {\n                handler : documentListeners.move,\n                // Filter events for checkResizeHandles so we only get called if the mouse\n                // is over one of our targets.\n                delegate : me.targetSelector\n            };\n            // We need to clean up when we exit one of our targets\n            dragStartListeners.mouseleave = {\n                handler  : 'onMouseLeaveTarget',\n                delegate : me.targetSelector,\n                capture  : true\n            };\n        }\n        // These will be autoDetached upon destroy\n        EventHelper.on(dragStartListeners);\n    }\n    get isRTL() {\n        return Boolean(this.rtlSource?.rtl);\n    }\n    //endregion\n    //region Scroll helpers\n    get scrollLeft() {\n        if (this.scroller) {\n            return this.scroller.x;\n        }\n        return this.outerElement.scrollLeft;\n    }\n    get scrollTop() {\n        if (this.scroller) {\n            return this.scroller.y;\n        }\n        return this.outerElement.scrollTop;\n    }\n    //endregion\n    //region Events\n    internalStartResize(isTouch) {\n        const dragListeners = {\n            element : document,\n            keydown : documentListeners.keydown,\n            thisObj : this\n        };\n        if (isTouch) {\n            dragListeners.touchmove = documentListeners.touchmove;\n            // Touch desktops don't fire touchend event when touch has ended, instead pointerup is fired\n            // iOS do fire touchend\n            dragListeners.touchend = dragListeners.pointerup = documentListeners.touchend;\n        }\n        else {\n            dragListeners.mousemove = documentListeners.move;\n            dragListeners.mouseup   = documentListeners.up;\n        }\n        // A listener detacher is returned\n        this.removeDragListeners = EventHelper.on(dragListeners);\n        this.onResizeHandlePointerDown?.(this.startEvent);\n    }\n    // Empty class implementation. If listeners *are* added, the detacher is added\n    // as an instance property. So this is always callable.\n    removeDragListeners() {}\n    reset() {\n        this.removeDragListeners?.();\n        this.context = null;\n        this.trigger('reset');\n    }\n    canResize(element, event) {\n        return !this.isElementResizable || this.isElementResizable(element, event);\n    }\n    onPointerDown(isTouch, event) {\n        const me = this;\n        me.startEvent = event;\n        if (me.canResize(event.target, event) && me.grabResizeHandle(isTouch, event)) {\n            // Stop event if resize handle was grabbed (resize started)\n            event.stopImmediatePropagation();\n            if (event.type === 'touchstart') {\n                event.preventDefault();\n            }\n            me.internalStartResize(isTouch);\n        }\n    }\n    onTouchStart(event) {\n        // only allowing one finger for now...\n        if (event.touches.length > 1) {\n            return;\n        }\n        this.onPointerDown(true, event);\n    }\n    /**\n     * Grab draggable element on mouse down.\n     * @private\n     * @param {MouseEvent|PointerEvent} event\n     */\n    onMouseDown(event) {\n        // only dragging with left mouse button\n        if (event.button !== 0) {\n            return;\n        }\n        this.onPointerDown(false, event);\n    }\n    internalMove(isTouch, event) {\n        const\n            me                     = this,\n            { context, direction } = me;\n        if (context?.element && (context.started || EventHelper.getDistanceBetween(me.startEvent, event) >= me.dragThreshold)) {\n            if (!context.started) {\n                me.scrollManager?.startMonitoring(ObjectHelper.merge({\n                    scrollables : [\n                        {\n                            element : me.dragWithin || me.outerElement,\n                            direction\n                        }\n                    ],\n                    callback : config => me.context?.element && me.lastMouseMoveEvent && me.update(me.lastMouseMoveEvent, config)\n                }, me.monitoringConfig));\n                me.trigger('resizeStart', { context, event });\n                context.started = true;\n            }\n            me.update(event);\n        }\n        // If a mousemove, and we are using zones, and not handles, we have to\n        // programmatically check whether we are over a handle, and add/remove\n        // classes to change the mouse cursor to resize.\n        // If we are using handles, their CSS will set the mouse cursor.\n        else if (!isTouch && !me.handleSelector) {\n            me.checkResizeHandles(event);\n        }\n    }\n    onTouchMove(event) {\n        this.internalMove(true, event);\n    }\n    /**\n     * Move grabbed element with mouse.\n     * @param {MouseEvent|PointerEvent} event\n     * @fires resizestart\n     * @private\n     */\n    onMouseMove(event) {\n        this.internalMove(false, event);\n    }\n    onPointerUp(isTouch, event) {\n        const\n            me      = this,\n            context = me.context;\n        me.removeDragListeners?.();\n        if (context) {\n            me.scrollManager?.stopMonitoring();\n            if (context.started) {\n                // Prevent the impending document click from the mouseup event from propagating\n                // into a click on our element.\n                EventHelper.on({\n                    element : document,\n                    thisObj : me,\n                    click   : documentListeners.docclick,\n                    expires : me.clickSwallowDuration, // In case a click did not ensue, remove the listener\n                    capture : true,\n                    once    : true\n                });\n            }\n            me.finishResize(event);\n        }\n        else {\n            me.reset?.();\n        }\n    }\n    onTouchEnd(event) {\n        this.onPointerUp(true, event);\n    }\n    /**\n     * Drop on mouse up (if dropped on valid target).\n     * @param {MouseEvent|PointerEvent} event\n     * @private\n     */\n    onMouseUp(event) {\n        this.onPointerUp(false, event);\n    }\n    /**\n     * This is a capture listener, only added during drag, which prevents a click gesture\n     * propagating from the terminating mouseup gesture\n     * @param {MouseEvent} event\n     * @private\n     */\n    onDocumentClick(event) {\n        event.stopPropagation();\n    }\n    /**\n     * Cancel on ESC key\n     * @param {KeyboardEvent} event\n     * @private\n     */\n    onKeyDown(event) {\n        if (event.key === 'Escape') {\n            this.abort();\n        }\n    }\n    //endregion\n    //region Grab, update, finish\n    /**\n     * Updates resize, called when an element is grabbed and mouse moves\n     * @private\n     * @fires resizing\n     */\n    update(event) {\n        const\n            me              = this,\n            context         = me.context,\n            { element }     = context,\n            parentRectangle = Rectangle.from(me.outerElement);\n        // Calculate the current pointer X. Do not allow overflowing either edge\n        context.currentX = Math.max(Math.min(event.clientX + context.cursorOffset.x, parentRectangle.right), parentRectangle.x) + me.scrollLeft;\n        context.currentY = Math.max(Math.min(event.clientY + context.cursorOffset.y, parentRectangle.bottom), parentRectangle.y) + me.scrollTop;\n        element.classList.add(me.resizingCls);\n        if (event) {\n            if (me.updateResize(event)) {\n                me.trigger('resizing', { context, event });\n                element.classList.toggle(me.invalidCls, context.valid === false);\n            }\n            me.lastMouseMoveEvent = event;\n        }\n    }\n    /**\n     * Abort dragging\n     */\n    abort(silent = false) {\n        const me = this;\n        me.scrollManager?.stopMonitoring?.();\n        if (me.context) {\n            me.abortResize(null, silent);\n        }\n        else if (!me.isDestroyed) {\n            me.reset();\n        }\n    }\n    /**\n     * Starts resizing, updates ResizeHelper#context with relevant info.\n     * @private\n     * @param {Boolean} isTouch\n     * @param {MouseEvent} event\n     * @returns {Boolean} True if handled, false if not\n     */\n    grabResizeHandle(isTouch, event) {\n        const me = this;\n        if (me.allowResize && !me.allowResize(event.target, event)) {\n            return false;\n        }\n        const\n            handleSelector = me.handleSelector,\n            coordsFrom     = event.type === 'touchstart' ? event.changedTouches[0] : event,\n            clientX        = coordsFrom.clientX,\n            clientY        = coordsFrom.clientY;\n        // go up from \"handle\" to resizable element\n        let element = me.targetSelector ? event.target.closest(me.targetSelector) : event.target;\n        if (element) {\n            let edge;\n            // Calculate which edge to resize\n            // If there's a handle selector, see if it's anchored on the left or the right\n            if (handleSelector) {\n                if (event.target.matches(handleSelector)) {\n                    if (me.direction === 'horizontal') {\n                        if (event.pageX < DomHelper.getPageX(element) + element.offsetWidth / 2) {\n                            edge = me.isRTL ? 'right' : 'left';\n                        }\n                        else {\n                            edge = me.isRTL ? 'left' : 'right';\n                        }\n                    }\n                    else {\n                        if (event.pageY < DomHelper.getPageY(element) + element.offsetHeight / 2) {\n                            edge = 'top';\n                        }\n                        else {\n                            edge = 'bottom';\n                        }\n                    }\n                }\n                else {\n                    return false;\n                }\n            }\n            // If we're not using handles, but just active zones\n            // then test whether the event position is in an active resize zone.\n            else {\n                if (me.direction === 'horizontal') {\n                    if (me.overLeftHandle(event, element)) {\n                        edge = me.isRTL ? 'right' : 'left';\n                    }\n                    else if (me.overRightHandle(event, element)) {\n                        edge = me.isRTL ? 'left' : 'right';\n                    }\n                }\n                else {\n                    if (me.overTopHandle(event, element)) {\n                        edge = 'top';\n                    }\n                    else if (me.overBottomHandle(event, element)) {\n                        edge = 'bottom';\n                    }\n                }\n                if (!edge) {\n                    me.context = null;\n                    // not over an edge, abort\n                    return false;\n                }\n            }\n            // If resizing is initiated by a touch, we must preventDefault on the touchstart\n            // so that scrolling is not invoked when dragging. This is in lieu of a functioning\n            // touch-action style on iOS Safari. When that's fixed, this will not be needed.\n            if (event.type === 'touchstart') {\n                event.preventDefault();\n            }\n            const\n                cursorOffset   = me.getCursorOffsetToElementEdge(coordsFrom, element, edge),\n                mutatedContext = me.internalBeforeStart?.({ element, edge });\n            // Allow outside world to flip edges (to make a top-edge interaction apply to the bottom-edge instead)\n            if (mutatedContext) {\n                element = mutatedContext.element;\n                edge    = mutatedContext.edge;\n            }\n            if (me.trigger('beforeResizeStart', { element, event }) !== false) {\n                // store initial size\n                me.context = {\n                    element,\n                    edge,\n                    isTouch,\n                    valid         : true,\n                    async         : false,\n                    direction     : me.direction,\n                    elementStartX : DomHelper.getTranslateX(element) || element.offsetLeft, // extract x from translate\n                    elementStartY : DomHelper.getTranslateY(element) || element.offsetTop, // extract y from translate\n                    newX          : DomHelper.getTranslateX(element) || element.offsetLeft, // No change yet on start, but info must be present\n                    newY          : DomHelper.getTranslateY(element) || element.offsetTop, // No change yet on start, but info must be present\n                    elementWidth  : element.offsetWidth,\n                    elementHeight : element.offsetHeight,\n                    cursorOffset,\n                    startX        : clientX + cursorOffset.x + me.scrollLeft,\n                    startY        : clientY + cursorOffset.y + me.scrollTop,\n                    finalize      : () => me.reset?.()\n                };\n                element.classList.add(me.resizingCls);\n                return true;\n            }\n        }\n        return false;\n    }\n    getCursorOffsetToElementEdge(event, element, edge) {\n        const rectEl = Rectangle.from(element);\n        let x = 0,\n            y = 0;\n        switch (edge) {\n            case 'left':\n                x = rectEl.x - (this.isRTL ? rectEl.width : 0) - event.clientX; // negative\n                break;\n            case 'right':\n                x = rectEl.x + (this.isRTL ? 0 : rectEl.width) - event.clientX; // positive\n                break;\n            case 'top':\n                y = rectEl.y - event.clientY; // negative\n                break;\n            case 'bottom':\n                y = rectEl.y + rectEl.height - event.clientY; // positive\n                break;\n        }\n        return { x, y };\n    }\n    /**\n     * Check if mouse is over a resize handle (virtual). If so, highlight.\n     * @private\n     * @param {MouseEvent} event\n     */\n    checkResizeHandles(event) {\n        const\n            me     = this,\n            target = me.targetSelector ? event.target.closest(me.targetSelector) : event.target;\n        // mouse over a target element and allowed to resize?\n        if (target && (!me.allowResize || me.allowResize(event.target, event))) {\n            me.currentElement = me.handleContainerSelector ? event.target.closest(me.handleContainerSelector) : event.target;\n            if (me.currentElement) {\n                let over;\n                if (me.direction === 'horizontal') {\n                    over = me.overLeftHandle(event, target) || me.overRightHandle(event, target);\n                }\n                else {\n                    over = me.overTopHandle(event, target) || me.overBottomHandle(event, target);\n                }\n                if (over) {\n                    me.highlightHandle(); // over handle\n                }\n                else {\n                    me.unHighlightHandle(); // not over handle\n                }\n            }\n        }\n        else if (me.currentElement) {\n            me.unHighlightHandle(); // outside element\n        }\n    }\n    onMouseLeaveTarget(event) {\n        const me = this;\n        me.currentElement = me.handleContainerSelector ? event.target.closest(me.handleContainerSelector) : event.target;\n        if (me.currentElement) {\n            me.unHighlightHandle();\n        }\n    }\n    /**\n     * Updates size of target (on mouse move).\n     * @private\n     * @param {MouseEvent|PointerEvent} event\n     */\n    updateResize(event) {\n        const\n            me = this,\n            {\n                context,\n                allowEdgeSwitch,\n                skipTranslate,\n                skipUpdatingElement\n            }  = me;\n        let updated;\n        // flip which edge is being dragged depending on whether we're to the right or left of the mousedown\n        if (allowEdgeSwitch) {\n            if (me.direction === 'horizontal') {\n                context.edge = context.currentX > context.startX ? 'right' : 'left';\n            }\n            else {\n                context.edge = context.currentY > context.startY ? 'bottom' : 'top';\n            }\n        }\n        const\n            {\n                element,\n                elementStartX,\n                elementStartY,\n                elementWidth,\n                elementHeight,\n                edge\n            }         = context,\n            { style } = element,\n            // limit to outerElement if set\n            deltaX    = context.currentX - context.startX,\n            deltaY    = context.currentY - context.startY,\n            minWidth  = DomHelper.getExtremalSizePX(element, 'minWidth') || me.minWidth,\n            maxWidth  = DomHelper.getExtremalSizePX(element, 'maxWidth') || me.maxWidth,\n            minHeight = DomHelper.getExtremalSizePX(element, 'minHeight') || me.minHeight,\n            maxHeight = DomHelper.getExtremalSizePX(element, 'maxHeight') || me.maxHeight,\n            // dragging the right edge right increases the width, dragging left edge right decreases width\n            sign      = (edge === 'right' && !me.isRTL) || edge === 'bottom' ? 1 : -1,\n            // new width, not allowed to go below minWidth\n            newWidth  = elementWidth + deltaX * sign,\n            newHeight = elementHeight + deltaY * sign;\n        let\n            width  = Math.max(minWidth, newWidth),\n            height = Math.max(minHeight, newHeight);\n        if (maxWidth > 0) {\n            width = Math.min(width, maxWidth);\n        }\n        if (maxHeight > 0) {\n            height = Math.min(height, maxHeight);\n        }\n        // remove flex when resizing\n        if (style.flex) {\n            style.flex = '';\n        }\n        if (me.direction === 'horizontal' && elementWidth !== width) {\n            if (!skipUpdatingElement) {\n                style.width = Math.abs(width) + 'px';\n            }\n            context.newWidth = width;\n            // when dragging left edge, also update position (so that right edge remains in place)\n            if (edge === 'left' || width < 0) {\n                const newX = Math.max(Math.min(elementStartX + elementWidth - me.minWidth, elementStartX + deltaX), 0);\n                if (!skipTranslate) {\n                    DomHelper.setTranslateX(element, Math.round(newX));\n                }\n                context.newX = newX;\n            }\n            // When dragging the right edge and we're allowed to flip the drag from left to right\n            // through the start point (eg drag event creation) the element must be at its initial X position\n            else if (edge === 'right' && allowEdgeSwitch && !skipTranslate) {\n                DomHelper.setTranslateX(element, elementStartX);\n            }\n            updated = true;\n        }\n        else if (me.direction === 'vertical' && elementHeight !== newHeight) {\n            if (!skipUpdatingElement) {\n                style.height = Math.abs(height) + 'px';\n            }\n            context.newHeight = height;\n            // when dragging top edge, also update position (so that bottom edge remains in place)\n            if (edge === 'top' || height < 0) {\n                context.newY = Math.max(Math.min(elementStartY + elementHeight - me.minHeight, elementStartY + deltaY), 0);\n                if (!skipTranslate) {\n                    DomHelper.setTranslateY(element, context.newY);\n                }\n            }\n            // When dragging the bottom edge and we're allowed to flip the drag from top to bottom\n            // through the start point (eg drag event creation) the element must be at its initial Y position\n            else if (edge === 'bottom' && allowEdgeSwitch && !skipTranslate) {\n                DomHelper.setTranslateY(element, elementStartY);\n            }\n            updated = true;\n        }\n        return updated;\n    }\n    /**\n     * Finalizes resize, fires drop.\n     * @private\n     * @param {MouseEvent|PointerEvent} event\n     * @fires resize\n     * @fires cancel\n     */\n    finishResize(event) {\n        const\n            me          = this,\n            context     = me.context,\n            eventObject = { context, event };\n        context.element.classList.remove(me.resizingCls);\n        if (context.started) {\n            let changed = false;\n            if (me.direction === 'horizontal') {\n                changed = context.newWidth && context.newWidth !== context.elementWidth;\n            }\n            else {\n                changed = context.newHeight && context.newHeight !== context.elementHeight;\n            }\n            me.trigger(changed ? 'resize' : 'cancel', eventObject);\n            if (!context.async) {\n                context.finalize();\n            }\n        }\n        else {\n            me.reset?.();\n        }\n    }\n    /**\n     * Abort resizing\n     * @private\n     * @fires cancel\n     */\n    abortResize(event = null, silent = false) {\n        const\n            me      = this,\n            context = me.context;\n        context.element.classList.remove(me.resizingCls);\n        if (me.direction === 'horizontal') {\n            // With these statements, no x pos is changed when resizing. Should therefor not reset it when cancelling\n            if (context.edge === 'left' || (context.allowEdgeSwitch && !context.skipTranslate)) {\n                DomHelper.setTranslateX(context.element, context.elementStartX);\n            }\n            context.element.style.width = context.elementWidth + 'px';\n        }\n        else {\n            DomHelper.setTranslateY(context.element, context.elementStartY);\n            context.element.style.height = context.elementHeight + 'px';\n        }\n        !silent && me.trigger('cancel', { context, event });\n        if (!me.isDestroyed) {\n            me.reset();\n        }\n    }\n    //endregion\n    //region Handles\n    // /**\n    //  * Constrain resize to outerElements bounds\n    //  * @private\n    //  * @param x\n    //  * @returns {*}\n    //  */\n    // constrainResize(x) {\n    //     const me = this;\n    //\n    //     if (me.outerElement) {\n    //         const box = me.outerElement.getBoundingClientRect();\n    //         if (x < box.left) x = box.left;\n    //         if (x > box.right) x = box.right;\n    //     }\n    //\n    //     return x;\n    // }\n    /**\n     * Highlights handles (applies css that changes cursor).\n     * @private\n     */\n    highlightHandle() {\n        const\n            me     = this,\n            target = me.targetSelector ? me.currentElement.closest(me.targetSelector) : me.currentElement;\n        // over a handle, add cls to change cursor\n        me.currentElement.classList.add('b-resize-handle');\n        target.classList.add('b-over-resize-handle');\n    }\n    /**\n     * Unhighlight handles (removes css).\n     * @private\n     */\n    unHighlightHandle() {\n        const\n            me     = this,\n            target = me.targetSelector ? me.currentElement.closest(me.targetSelector) : me.currentElement;\n        target && target.classList.remove('b-over-resize-handle');\n        me.currentElement.classList.remove('b-resize-handle');\n        me.currentElement = null;\n    }\n    overAnyHandle(event, target) {\n        return this.overStartHandle(event, target) || this.overEndHandle(event, target);\n    }\n    overStartHandle(event, target) {\n        return this.direction === 'horizontal' ? this.overLeftHandle(event, target) : this.overTopHandle(event, target);\n    }\n    overEndHandle(event, target) {\n        return this.direction === 'horizontal' ? this.overRightHandle(event, target) : this.overBottomHandle(event, target);\n    }\n    getDynamicHandleSize(opposite, offsetWidth) {\n        const\n            handleCount    = opposite ? 2 : 1,\n            { handleSize } = this;\n        // Shrink handle size when configured to do so, preserving reserved space between handles\n        if (this.dynamicHandleSize && handleSize * handleCount > offsetWidth - this.reservedSpace) {\n            return Math.max(Math.floor((offsetWidth - this.reservedSpace) / handleCount), 0);\n        }\n        return handleSize;\n    }\n    /**\n     * Check if over left handle (virtual).\n     * @private\n     * @param {MouseEvent} event MouseEvent\n     * @param {HTMLElement} target The current target element\n     * @returns {Boolean} Returns true if mouse is over left handle, otherwise false\n     */\n    overLeftHandle(event, target) {\n        const\n            me              = this,\n            { offsetWidth } = target;\n        if (me.leftHandle && me.canResize(target, event) && (offsetWidth >= me.handleVisibilityThreshold || me.dynamicHandleSize)) {\n            const leftHandle = Rectangle.from(target);\n            leftHandle.width = me.getDynamicHandleSize(me.rightHandle, offsetWidth);\n            return leftHandle.width > 0 && leftHandle.contains(EventHelper.getPagePoint(event));\n        }\n        return false;\n    }\n    /**\n     * Check if over right handle (virtual).\n     * @private\n     * @param {MouseEvent} event MouseEvent\n     * @param {HTMLElement} target The current target element\n     * @returns {Boolean} Returns true if mouse is over left handle, otherwise false\n     */\n    overRightHandle(event, target) {\n        const\n            me              = this,\n            { offsetWidth } = target;\n        if (me.rightHandle && me.canResize(target, event) && (offsetWidth >= me.handleVisibilityThreshold || me.dynamicHandleSize)) {\n            const rightHandle = Rectangle.from(target);\n            rightHandle.x = rightHandle.right - me.getDynamicHandleSize(me.leftHandle, offsetWidth);\n            return rightHandle.width > 0 && rightHandle.contains(EventHelper.getPagePoint(event));\n        }\n        return false;\n    }\n    /**\n     * Check if over top handle (virtual).\n     * @private\n     * @param {MouseEvent} event MouseEvent\n     * @param {HTMLElement} target The current target element\n     * @returns {Boolean} Returns true if mouse is over top handle, otherwise false\n     */\n    overTopHandle(event, target) {\n        const\n            me               = this,\n            { offsetHeight } = target;\n        if (me.topHandle && me.canResize(target, event) && (offsetHeight >= me.handleVisibilityThreshold || me.dynamicHandleSize)) {\n            const topHandle = Rectangle.from(target);\n            topHandle.height = me.getDynamicHandleSize(me.bottomHandle, offsetHeight);\n            return topHandle.height > 0 && topHandle.contains(EventHelper.getPagePoint(event));\n        }\n        return false;\n    }\n    /**\n     * Check if over bottom handle (virtual).\n     * @private\n     * @param {MouseEvent} event MouseEvent\n     * @param {HTMLElement} target The current target element\n     * @returns {Boolean} Returns true if mouse is over bottom handle, otherwise false\n     */\n    overBottomHandle(event, target) {\n        const\n            me               = this,\n            { offsetHeight } = target;\n        if (me.bottomHandle && me.canResize(target, event) && (offsetHeight >= me.handleVisibilityThreshold || me.dynamicHandleSize)) {\n            const bottomHandle = Rectangle.from(target);\n            bottomHandle.y = bottomHandle.bottom - me.getDynamicHandleSize(me.bottomHandle, offsetHeight);\n            return bottomHandle.height > 0 && bottomHandle.contains(EventHelper.getPagePoint(event));\n        }\n        return false;\n    }\n    //endregion\n}\nResizeHelper._$name = 'ResizeHelper';", "import Widget from './Widget.js';\nimport DomClassList from '../helper/util/DomClassList.js';\n/**\n * @module Core/widget/Toast\n */\n/**\n * Basic toast. Toasts are stacked on top of each other\n *\n * ```javascript\n * // simplest possible\n * Toast.show('Just toasting');\n *\n * // with config\n * Toast.show({\n *   html: 'Well toasted',\n *   showProgress: false\n * });\n *\n * // as instance (instance is also returned from Toast.show()\n * let toast = new Toast({\n *   html: 'Not going away',\n *   timeout: 0\n * });\n *\n * toast.show();\n * ```\n *\n * {@inlineexample Core/widget/Toast.js}\n *\n * @extends Core/widget/Widget\n * @classtype toast\n */\nexport default class Toast extends Widget {\n    static $name = 'Toast';\n    static type = 'toast';\n    static get configurable() {\n        return {\n            testConfig : {\n                destroyTimeout : 1,\n                timeout        : 1000\n            },\n            floating : true,\n            /**\n             * Timeout (in ms) until the toast is automatically dismissed. Set to 0 to never hide.\n             * @config {Number}\n             * @default\n             */\n            timeout : 2500,\n            autoDestroy : null,\n            // How long to wait after hide before destruction\n            destroyTimeout : 200,\n            /**\n             * Show a progress bar indicating the time remaining until the toast is dismissed.\n             * @config {Boolean}\n             * @default\n             */\n            showProgress : true,\n            /**\n             * Toast color (should have match in toast.scss or your custom styling).\n             * Valid values in Bryntum themes are:\n             * * b-amber\n             * * b-blue\n             * * b-dark-gray\n             * * b-deep-orange\n             * * b-gray\n             * * b-green\n             * * b-indigo\n             * * b-lime\n             * * b-light-gray\n             * * b-light-green\n             * * b-orange\n             * * b-purple\n             * * b-red\n             * * b-teal\n             * * b-white\n             * * b-yellow\n             *\n             * ```\n             * new Toast({\n             *    color : 'b-blue'\n             * });\n             * ```\n             *\n             * @config {String}\n             */\n            color : null,\n            bottomMargin : 20\n        };\n    }\n    compose() {\n        const { appendTo, color, html, showProgress, style, timeout } = this;\n        return {\n            parent : appendTo || this.floatRoot,\n            class  : {\n                ...DomClassList.normalize(color, 'object'),\n                'b-toast-hide' : 1  // toasts start hidden so we can animate them into view\n            },\n            html,\n            style,\n            children : {\n                progressElement : showProgress && {\n                    style : `animation-duration:${timeout / 1000}s;`,\n                    class : {\n                        'b-toast-progress' : 1\n                    }\n                }\n            },\n            // eslint-disable-next-line bryntum/no-listeners-in-lib\n            listeners : {\n                click : 'hide'\n            }\n        };\n    }\n    doDestroy() {\n        this.untoast();\n        super.doDestroy();\n    }\n    get nextBottom() {\n        const { bottomMargin, element } = this;\n        return parseInt(element.style.bottom, 10) + element.offsetHeight + bottomMargin;\n    }\n    /**\n     * Show the toast\n     */\n    async show() {\n        await super.show(...arguments);\n        const\n            me = this,\n            { element } = me,\n            { toasts } = Toast;\n        if (!toasts.includes(me)) {\n            element.style.bottom = (toasts[0]?.nextBottom ?? me.bottomMargin) + 'px';\n            toasts.unshift(me);\n            element.getBoundingClientRect();  // force layout so that removing b-toast-hide runs our transition\n            element.classList.remove('b-toast-hide');\n            if (me.timeout > 0) {\n                me.hideTimeout = me.setTimeout('hide', me.timeout);\n            }\n        }\n    }\n    /**\n     * Hide the toast\n     */\n    async hide() {\n        const me = this;\n        me.untoast();\n        me.element.classList.add('b-toast-hide');\n        if (me.autoDestroy && !me.destroyTimer) {\n            me.destroyTimer = me.setTimeout('destroy', me.destroyTimeout);\n        }\n    }\n    untoast() {\n        const { toasts } = Toast;\n        if (toasts.includes(this)) {\n            toasts.splice(toasts.indexOf(this), 1);\n        }\n    }\n    /**\n     * Hide all visible toasts\n     */\n    static hideAll() {\n        Toast.toasts.slice().reverse().forEach(toast => toast.hide());\n    }\n    /**\n     * Easiest way to show a toast\n     *\n     * ```javascript\n     * Toast.show('Hi');\n     *\n     * Toast.show({\n     *   html   : 'Read quickly, please',\n     *   timeout: 1000\n     * });\n     * ```\n     *\n     * @param {String|ToastConfig} config Message or toast config object\n     * @returns {Core.widget.Toast}\n     */\n    static show(config) {\n        const toast = Toast.new({\n            autoDestroy : true,\n            rootElement : document.body\n        }, (typeof config === 'string') ? { html : config } : config);\n        toast.show();\n        return toast;\n    }\n}\nToast.toasts = [];\n// Register this widget type with its Factory\nToast.initClass();\nToast._$name = 'Toast';", "import ObjectHelper from './ObjectHelper.js';\nimport Widget from '../widget/Widget.js';\nimport Toast from '../widget/Toast.js';\nimport Mask from '../widget/Mask.js';\nimport { Point } from './util/Rectangle.js';\n/**\n * @module Core/helper/WidgetHelper\n */\n/**\n * Helper for creating widgets.\n */\nexport default class WidgetHelper {\n    //region Querying\n    /**\n     * Returns the widget with the specified id.\n     * @param {String} id Id of widget to find\n     * @returns {Core.widget.Widget} The widget if any\n     * @category Querying\n     */\n    static getById(id) {\n        return Widget.getById(id);\n    }\n    /**\n     * Returns the Widget which owns the passed element (or event).\n     * @param {HTMLElement|Event} element The element or event to start from\n     * @param {String|Function} [type] The type of Widget to scan upwards for. The lowercase\n     * class name. Or a filter function which returns `true` for the required Widget.\n     * @param {HTMLElement|Number} [limit] The number of components to traverse upwards to find a\n     * match of the type parameter, or the element to stop at.\n     * @returns {Core.widget.Widget} The found Widget or null.\n     * @category Querying\n     */\n    static fromElement(element, type, limit) {\n        return Widget.fromElement(element, type, limit);\n    }\n    //endregion\n    //region Widgets\n    /**\n     * Create a widget.\n     *\n     * ```javascript\n     * WidgetHelper.createWidget({\n     *   type: 'button',\n     *   icon: 'user',\n     *   text: 'Edit user'\n     * });\n     * ```\n     *\n     * @param {ContainerItemConfig} config Widget config\n     * @returns {Core.widget.Widget} The widget\n     * @category Widgets\n     */\n    static createWidget(config = {}) {\n        return config.isWidget ? config : Widget.create(config);\n    }\n    /**\n     * Appends a widget (array of widgets) to the DOM tree. If config is empty, widgets are appended to the DOM. To\n     * append widget to certain position you can pass HTMLElement or its id as config, or as a config, that will be\n     * applied to all passed widgets.\n     *\n     * Usage:\n     *\n     * ```javascript\n     * // Will append button as last item to element with id 'container'\n     * let [button] = WidgetHelper.append({ type : 'button' }, 'container');\n     *\n     * // Same as above, but will add two buttons\n     * let [button1, button2] = WidgetHelper.append([\n     *     { type : 'button' },\n     *     { type : 'button' }\n     *     ], { appendTo : 'container' });\n     *\n     * // Will append two buttons before element with id 'someElement'. Order will be preserved and all widgets will have\n     * // additional class 'my-cls'\n     * let [button1, button2] = WidgetHelper.append([\n     *     { type : 'button' },\n     *     { type : 'button' }\n     *     ], {\n     *         insertBefore : 'someElement',\n     *         cls          : 'my-cls'\n     *     });\n     * ```\n     *\n     * @param {ContainerItemConfig|ContainerItemConfig[]} widget Widget config or array of such configs\n     * @param {HTMLElement|String|Object} [config] Element (or element id) to which to append the widget or config to\n     * apply to all passed widgets\n     * @returns {Core.widget.Widget[]} Array or widgets\n     * @category Widgets\n     */\n    static append(widget, config) {\n        widget = Array.isArray(widget) && widget || [widget];\n        if (config instanceof HTMLElement || typeof config === 'string') {\n            config = {\n                appendTo : config\n            };\n        }\n        // We want to fix position to insert into to keep order of passed widgets\n        if (config.insertFirst) {\n            const target = typeof config.insertFirst === 'string' ? document.getElementById(config.insertFirst) : config.insertFirst;\n            if (target.firstChild) {\n                config.insertBefore = target.firstChild;\n            }\n            else {\n                config.appendTo = target;\n            }\n        }\n        return widget.map(item => Widget.create(ObjectHelper.assign({}, config || {}, item)));\n    }\n    //endregion\n    //region Popups\n    /**\n     * Shows a popup (~tooltip) containing widgets connected to specified element.\n     *\n     * ```javascript\n     * WidgetHelper.openPopup(element, {\n     *   position: 'bottom center',\n     *   items: [\n     *      { widgetConfig }\n     *   ]\n     * });\n     * ```\n     *\n     * @param {HTMLElement} element Element to connect popup to\n     * @param {PopupConfig} config Config object, or string to use as html in popup\n     * @returns {*|{close, widgets}}\n     * @category Popups\n     */\n    static openPopup(element, config) {\n        return Widget.create(ObjectHelper.assign({\n            forElement : element\n        }, typeof config === 'string' ? {\n            html : config\n        } : config), 'popup');\n    }\n    /**\n     * Shows a context menu connected to the specified element.\n     *\n     * ```javascript\n     * WidgetHelper.showContextMenu(element, {\n     *   items: [\n     *      { id: 'addItem', icon: 'add', text: 'Add' },\n     *      ...\n     *   ],\n     *   onItem: item => alert('Clicked ' + item.text)\n     * });\n     * ```\n     *\n     * @param {HTMLElement|Number[]} element Element (or a coordinate) to show the context menu for\n     * @param {MenuItemConfig} config Context menu config, see example\n     * @returns {Core.widget.Menu}\n     * @category Popups\n     */\n    static showContextMenu(element, config) {\n        const me = this;\n        if (me.currentContextMenu) {\n            me.currentContextMenu.destroy();\n        }\n        if (element instanceof HTMLElement) {\n            config.forElement = element;\n        }\n        else {\n            config.forElement = document.body;\n            if (Array.isArray(element)) {\n                element = new Point(...element);\n            }\n            if (element instanceof Point) {\n                config.align = {\n                    position : element\n                };\n            }\n        }\n        config.internalListeners = { destroy : me.currentContextMenu = null };\n        return me.currentContextMenu = Widget.create(config, 'menu');\n    }\n    /**\n     * Attached a tooltip to the specified element.\n     *\n     * ```javascript\n     * WidgetHelper.attachTooltip(element, {\n     *   text: 'Useful information goes here'\n     * });\n     * ```\n     *\n     * @param {HTMLElement} element Element to attach tooltip for\n     * @param {String|TooltipConfig} configOrText Tooltip config or tooltip string, see example and source\n     * @returns {HTMLElement} The passed element\n     * @category Popups\n     */\n    static attachTooltip(element, configOrText) {\n        return Widget.attachTooltip(element, configOrText);\n    }\n    /**\n     * Checks if element has tooltip attached\n     *\n     * @param {HTMLElement} element Element to check\n     * @returns {Boolean}\n     * @category Popups\n     */\n    static hasTooltipAttached(element) {\n        return Widget.resolveType('tooltip').hasTooltipAttached(element);\n    }\n    /**\n     * Destroys any tooltip attached to an element, removes it from the DOM and unregisters any tip related listeners\n     * on the element.\n     *\n     * @param {HTMLElement} element Element to remove tooltip from\n     * @category Popups\n     */\n    static destroyTooltipAttached(element) {\n        return Widget.resolveType('tooltip').destroyTooltipAttached(element);\n    }\n    //endregion\n    //region Mask\n    /**\n     * Masks the specified element, showing a message in the mask.\n     * @param {HTMLElement} element Element to mask\n     * @param {String} msg Message to show in the mask\n     * @returns {Core.widget.Mask}\n     * @category Mask\n     */\n    static mask(element, msg = 'Loading') {\n        if (element) {\n            // Config object normalization\n            if (element instanceof HTMLElement) {\n                element = {\n                    target : element,\n                    text   : msg\n                };\n            }\n            return Mask.mask(element, element.target);\n        }\n    }\n    /**\n     * Unmask the specified element.\n     * @param {HTMLElement} element\n     * @category Mask\n     */\n    static unmask(element, close = true) {\n        if (element.mask) {\n            if (close) {\n                element.mask.close();\n            }\n            else {\n                element.mask.hide();\n            }\n        }\n    }\n    //endregion\n    //region Toast\n    /**\n     * Show a toast\n     * @param {String} msg message to show in the toast\n     * @category Mask\n     */\n    static toast(msg) {\n        return Toast.show(msg);\n    }\n    //endregion\n}\nWidgetHelper._$name = 'WidgetHelper';", "const hasOwn = Object.hasOwn || ((obj, key) => Object.prototype.hasOwnProperty.call(obj, key));\nlet cacheKey = null;\nfunction setParser(me, parser) {\n    Object.defineProperty(me, 'parser', {\n        value : parser\n    });\n    return parser;\n}\nclass Default {\n    constructor(formatter) {\n        this.formatter = formatter;\n    }\n    format(value) {\n        return this.formatter.defaultFormat(value);\n    }\n    parse(value, strict) {\n        return this.formatter.defaultParse(value, strict);\n    }\n    resolvedOptions() {\n        return null;\n    }\n}\n// This class does not extend Core.Base because instances are not reconfigurable (making\n// setConfig harmful) nor destroyable. Instead, they get frozen and cached according to\n// their \"config\" definition.\n/**\n * Abstract base class for formatters.\n * @private\n */\nexport default class Formatter {\n    static standardOptions = Object.freeze([]);\n    static get(format) {\n        if (format == null) {\n            return this.NULL;\n        }\n        if (format instanceof this) {\n            return format;\n        }\n        const\n            key = (typeof format === 'string') ? format : JSON.stringify(format),\n            cache = this.cache;\n        let fmt = cache.get(key);\n        if (!fmt) {\n            cacheKey = key;  // this is grabbed by our constructor below...\n            fmt = new this(format);\n            cache.set(key, fmt);\n        }\n        return fmt;\n    }\n    static get cache() {\n        return (hasOwn(this, '_cache') && this._cache) || (this._cache = new Map());\n    }\n    static get NULL() {\n        return hasOwn(this, '_null') ? this._null : (this._null = new this(null));\n    }\n    constructor(config) {\n        const\n            me = this,\n            { standardOptions } = me.constructor;\n        // This is done in a funny way so as not to complicate the derived constructor's\n        // desire to maintain a single argument signature, as well as it's calling of\n        // Object.freeze() to ensure immutability in dev mode.\n        me.cacheKey = cacheKey;\n        cacheKey = null;\n        me.initialize();\n        if (config === null) {\n            me.formatter = new Default(me);\n        }\n        else {\n            me.configure(config);\n            // Bring locale and other defaulted options back onto this object:\n            for (const [key, value] of Object.entries(me.resolvedOptions())) {\n                // For some reason (locale-specific perhaps), resolvedOptions returns\n                // with 'undefined' in some keys (e.g., min/maximumFractionDigits) when\n                // we specified 0.\n                //\n                // The second check is to only bring back values that we understand.\n                if (value != null && standardOptions.includes(key)) {\n                    me[key] = value;\n                }\n            }\n        }\n    }\n    get parser() {\n        // Replace this property w/the actual instance:\n        return setParser(this, new this.constructor.Parser(this));\n    }\n    defaultFormat(value) {\n        return (value == null) ? value : String(value);\n    }\n    defaultParse(value) {\n        return value;\n    }\n    format(value) {\n        return (value == null) ? value : this.formatter.format(value);\n    }\n    parse(value, strict) {\n        return (value == null) ? value : this.parser.parse(value, strict);\n    }\n    parseStrict(value) {\n        return this.parse(value, true);\n    }\n    resolvedOptions() {\n        return this.formatter.resolvedOptions();\n    }\n}\nFormatter._$name = 'Formatter';", "import Formatter from './Formatter.js';\nimport StringHelper from '../StringHelper.js';\nimport LocaleManager from '../../localization/LocaleManager.js';\nimport '../../localization/En.js';\n/**\n * @module Core/helper/util/NumberFormat\n */\nconst\n    escapeRegExp = StringHelper.escapeRegExp,\n    digitsRe = /[\\d+-]/g,\n    // We cannot pass locale=null:\n    newFormatter = (locale, config) => new Intl.NumberFormat(locale || undefined, config),\n    numFormatRe = /^(?:([$])\\s*)?(?:(\\d+)>)?\\d+(,\\d+)?(?:\\.((\\d*)(?:#*)|[*]))?(?:\\s*([%])?)?$/,\n    unicodeMinus = '\\u2212';\nclass NumberParser {\n    constructor(formatter) {\n        const\n            me = this,\n            locale = formatter.locale,\n            // We need a formatter for this locale that has decimals and grouping:\n            numFmt = newFormatter(locale, {\n                maximumFractionDigits : 3\n            }),\n            currency = formatter.is.currency ? me._decodeStyle(locale, {\n                style           : 'currency',\n                currency        : formatter.currency,\n                currencyDisplay : formatter.currencyDisplay\n            }) : null,\n            percent = formatter.is.percent ? me._decodeStyle(locale, {\n                style : 'percent'\n            }) : null,\n            decimal = numFmt.format(1.2).replace(digitsRe, '')[0],\n            grouper = numFmt.format(1e9).replace(digitsRe, '')[0] || '';\n        Object.assign(me, { currency, decimal, formatter, grouper, percent });\n        me.decimal = decimal;\n        me.decimalRe = escapeRegExp(decimal, 'g');\n        me.grouper = grouper;\n        // The stripRe removes whitespace, currency text, percent text and grouping chars:\n        me.stripRe = new RegExp(\n            `(?:\\\\s+|${escapeRegExp(grouper)})` +\n            (currency ? `|(?:${escapeRegExp(currency.text)})` : '') +\n            (percent ? `|(?:${escapeRegExp(percent.text)})` : ''),\n            'g');\n    }\n    decimalPlaces(value) {\n        value = value.replace(this.stripRe, '');\n        const dot = value.indexOf(this.decimal) + 1;\n        return dot && (value.length - dot);\n    }\n    parse(value, strict) {\n        if (typeof value === 'string') {\n            value = value.replace(this.stripRe, '').replace(this.decimalRe, '.').replace(unicodeMinus, '-');\n            value = strict ? Number(value) : parseFloat(value);\n            if (this.formatter.is.percent) {\n                value /= 100;\n            }\n        }\n        // else, a number is already parsed but could be null...\n        return value;\n    }\n    _decodeStyle(locale, fmtDef) {\n        const\n            fmt = newFormatter(locale, fmtDef),\n            decFmt = newFormatter(locale, Object.assign(\n                fmt.resolvedOptions(),\n                { style : 'decimal' }\n            )),\n            zero = fmt.format(0),  // = '0%' or '$0.00' in en-US\n            zeroDec = decFmt.format(0);  // = '0' or '0.00' in en-US\n        return {\n            suffix : zero.startsWith(zeroDec),\n            text   : zero.replace(zeroDec, '').trim()\n        };\n    }\n}\n/**\n * This class is an enhancement to `Intl.NumberFormat` that has a more flexible\n * constructor as well as other features such as `parse()`.\n *\n * All constructor forms take a single argument. The most common is to pass a format\n * {@link #config-template} string:\n *```\n *  const formatter = new NumberFormat('9,999.99##');\n *```\n * The above is equivalent to:\n *```\n *  const formatter = new Intl.NumberFormat({\n *      useGrouping           : true,\n *      minimumFractionDigits : 2,\n *      maximumFractionDigits : 4\n *  });\n *```\n * The `formatter` created above is used as follows (in the `en-US` locale):\n *```\n *  console.log(formatter.format(12345.54321));\n *  console.log(formatter.format(42));\n *\n *  // 12,345.5432\n *  // 42.00\n *```\n * When a format template is insufficient, a config object can be provided, similar to\n * `Intl.NumberFormat`'s `options` parameter. While all options from `Intl.NumberFormat`\n * are valid properties for this class's config object, additional properties are\n * supported.\n *\n * For example:\n *```\n *  new NumberFormat({\n *      locale      : 'en-US',\n *      template    : '$9,999',\n *      currency    : 'USD',\n *      significant : 5\n *  });\n *```\n * The `locale` option takes the place of the first positional parameter to the\n * `Intl.NumberFormat` constructor. The `template` config is the same string that can be\n * passed by itself.\n *\n * The shorthand properties `fraction`, `integer`, and `significant` set the standard\n * options `minimumFractionDigits`, `maximumFractionDigits`, `minimumIntegerDigits`,\n * `minimumSignificantDigits`, and `maximumSignificantDigits`.\n *\n * NOTE: Instances of `NumberFormat` are immutable after construction.\n *\n * For details about `Intl.NumberFormat` see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat).\n */\nexport default class NumberFormat extends Formatter {\n    static get $name() {\n        return 'NumberFormat';\n    }\n    // This object holds only those properties that Intl.NumberFormat accepts in its\n    // \"options\" parameter. Only these options will be copied from the NumberFormat\n    // and passed to the Intl.NumberFormat constructor and only these will be copied\n    // back from its resolvedOptions:\n    static standardOptions = [\n        'currency',\n        'currencyDisplay',\n        'locale',\n        'maximumFractionDigits',\n        'minimumFractionDigits',\n        'minimumIntegerDigits',\n        'maximumSignificantDigits',\n        'minimumSignificantDigits',\n        'style',\n        'useGrouping'\n    ];\n    initialize() {\n        this._as = {\n            // cacheKey : cachedInstance\n        };\n        this.is = {\n            decimal  : false,\n            currency : false,\n            percent  : false,\n            null     : true,\n            from     : null\n        };\n    }\n    get truncator() {\n        const\n            scale  = this.maximumFractionDigits,\n            digits = Math.min(20, scale + 1);\n        return (scale == null)\n            ? null\n            : this.as({ style : 'decimal', maximumFractionDigits : digits, minimumFractionDigits : digits }, 'truncator');\n    }\n    configure(options) {\n        if (typeof options !== 'string') {\n            Object.assign(this, options);\n        }\n        else {\n            this.template = options;\n        }\n        const\n            me                  = this,\n            config              = {},\n            loc                 = me.locale ? LocaleManager.locales[me.locale] : LocaleManager.locale,\n            localeDefaults      = loc?.NumberFormat,\n            { template }        = me,\n            { standardOptions } = me.constructor;\n        if (localeDefaults) {\n            for (const key in localeDefaults) {\n                if (me[key] == null && typeof localeDefaults[key] !== 'function') {\n                    me[key] = localeDefaults[key];\n                }\n            }\n        }\n        if (template) {\n            const\n                match = numFormatRe.exec(template),\n                m2 = match[2],\n                m4 = match[4];\n            me.useGrouping = !!match[3];\n            me.style = match[1] ? 'currency' : (match[6] ? 'percent' : 'decimal');\n            if (m2) {\n                me.integer = +m2;\n            }\n            if (m4 === '*') {\n                me.fraction = [0, 20];\n            }\n            else if (m4 != null) {\n                me.fraction = [match[5].length, m4.length];\n            }\n        }\n        me._minMax('fraction', true, true);\n        me._minMax('integer', true, false);\n        me._minMax('significant', false, true);\n        for (const key of standardOptions) {\n            if (me[key] != null) {\n                config[key] = me[key];\n            }\n        }\n        me.is.from = me.from && me.from.is;\n        me.is[me.style] = !(me.is.null = false);\n        me.formatter = newFormatter(me.locale, config);\n    }\n    /**\n     * Creates a derived `NumberFormat` from this instance, with a different `style`. This is useful for processing\n     * currency and percentage styles without the symbols being injected in the formatting.\n     *\n     * @param {String|Object} change The new style (if a string) or a set of properties to update.\n     * @param {String} [cacheAs] A key by which to cache this derived formatter.\n     * @returns {Core.helper.util.NumberFormat}\n     */\n    as(change, cacheAs = null) {\n        const\n            config = this.resolvedOptions() || { template : '9.*' },\n            cache = this._as;\n        let ret = cacheAs && cache[cacheAs];\n        if (!ret) {\n            if (typeof change === 'string') {\n                config.style = change;\n            }\n            else {\n                Object.assign(config, change);\n            }\n            config.from = this;\n            ret = new NumberFormat(config);\n        }\n        if (cacheAs) {\n            cache[cacheAs] = ret;\n        }\n        return ret;\n    }\n    defaultParse(value, strict) {\n        return (value == null) ? value : (strict ? Number(value) : parseFloat(value));\n    }\n    /**\n     * Returns the given `value` formatted in accordance with the specified locale and\n     * formatting options.\n     *\n     * @param {Number} value\n     * @returns {String}\n     */\n    format(value) {\n        if (typeof value === 'string') {\n            const v = Number(value);\n            value = isNaN(v) ? this.parse(value) : v;\n        }\n        return super.format(value);\n    }\n    // The parse() method is inherited but the base class implementation\n    // cannot properly document the parameter and return types:\n    /**\n     * Returns a `Number` parsed from the given, formatted `value`, in accordance with the\n     * specified locale and formatting options.\n     *\n     * If the `value` cannot be parsed, `NaN` is returned.\n     *\n     * Pass `strict` as `true` to require all text to convert. In essence, the default is\n     * in line with JavaScript's `parseFloat` while `strict=true` behaves like the `Number`\n     * constructor:\n     *```\n     *  parseFloat('1.2xx');  // = 1.2\n     *  Number('1.2xx')       // = NaN\n     *```\n     * @method parse\n     * @param {String} value\n     * @param {Boolean} [strict=false]\n     * @returns {Number}\n     */\n    /**\n     * Returns a `Number` parsed from the given, formatted `value`, in accordance with the\n     * specified locale and formatting options.\n     *\n     * If the `value` cannot be parsed, `NaN` is returned.\n     *\n     * This method simply passes the `value` to `parse()` and passes `true` for the second\n     * argument.\n     *\n     * @method parseStrict\n     * @param {String} value\n     * @returns {Number}\n     */\n    /**\n     * Returns the given `Number` rounded in accordance with the specified locale and\n     * formatting options.\n     *\n     * @param {Number|String} value\n     * @returns {Number}\n     */\n    round(value) {\n        return this.parse(this.format(value));\n    }\n    /**\n     * Returns the given `Number` truncated to the `maximumFractionDigits` in accordance\n     * with the specified locale and formatting options.\n     *\n     * @param {Number|String} value\n     * @returns {Number}\n     */\n    truncate(value) {\n        const\n            me = this,\n            scale = me.maximumFractionDigits,\n            { truncator } = me;\n        let v = me.parse(value),\n            dot;\n        if (truncator) {\n            v = truncator.format(v);\n            dot = v.indexOf(truncator.parser.decimal);\n            if (dot > -1 && v.length - dot  - 1 > scale) {\n                v = v.slice(0, dot + scale + 1);\n            }\n            v = truncator.parse(v);\n        }\n        return v;\n    }\n    resolvedOptions() {\n        const options = super.resolvedOptions();\n        for (const key in options) {\n            // For some reason, on TeamCity, tests get undefined for some properties...\n            // maybe a locale issue?\n            if (options[key] === undefined) {\n                options[key] = this[key];\n            }\n        }\n        return options;\n    }\n    /**\n     * Expands the provided shorthand into the \"minimum*Digits\" and \"maximum*Digits\".\n     * @param {String} name\n     * @param {Boolean} setMin\n     * @param {Boolean} setMax\n     * @private\n     */\n    _minMax(name, setMin, setMax) {\n        const\n            me = this,\n            value = me[name];\n        if (value != null) {\n            const\n                capName = StringHelper.capitalize(name),\n                max = `maximum${capName}Digits`,\n                min = `minimum${capName}Digits`;\n            if (typeof value === 'number') {\n                if (setMin) {\n                    me[min] = value;\n                }\n                if (setMax) {\n                    me[max] = value;\n                }\n            }\n            else {\n                me[min] = value[0];\n                me[max] = value[1];\n            }\n        }\n    }\n}\nNumberFormat.Parser = NumberParser;\nObject.assign(NumberFormat.prototype, {\n    /**\n     * The currency to use when using `style: 'currency'`. For example, `'USD'` (US dollar)\n     * or `'EUR'` for the euro.\n     *\n     * If not provided, the {@link Core.localization.LocaleManager} default will be used.\n     * @config {String}\n     */\n    currency : null,\n    /**\n     * The format in which to display the currency value when using `style: 'currency'`.\n     *\n     * Valid values are: `'symbol'` (the default), `'code'`, and `'name'`.\n     * @config {'symbol'|'code'|'name'}\n     * @default\n     */\n    currencyDisplay : 'symbol',\n    /**\n     * Specifies the `minimumFractionDigits` and `minimumFractionDigits` in a compact\n     * way. If this value is a `Number`, it sets both the minimum and maximum to that\n     * value. If this value is an array, `[0]` sets the minimum and `[1]` sets the\n     * maximum.\n     * @config {Number|Number[]}\n     */\n    fraction : null,\n    from : null,\n    /**\n     * An alias for `minimumIntegerDigits`.\n     * @config {Number}\n     */\n    integer : null,\n    /**\n     * The name of the locale. For example, `'en-US'`. This config is the same as the\n     * first argument to the `Intl.NumberFormat` constructor.\n     *\n     * Defaults to the browser's default locale.\n     * @config {String}\n     */\n    locale : null,\n    /**\n     * The maximum number of digits following the decimal.\n     *\n     * This is more convenient to specify using the {@link #config-fraction} config.\n     * @config {Number}\n     */\n    maximumFractionDigits : null,\n    /**\n     * The minimum number of digits following the decimal.\n     *\n     * This is more convenient to specify using the {@link #config-fraction} config.\n     * @config {Number}\n     */\n    minimumFractionDigits : null,\n    /**\n     * The minimum number of digits preceding the decimal.\n     *\n     * This is more convenient to specify using the {@link #config-integer} config.\n     * @config {Number}\n     */\n    minimumIntegerDigits : null,\n    /**\n     * The maximum number of significant digits.\n     *\n     * This is more convenient to specify using the {@link #config-significant} config.\n     * @config {Number}\n     */\n    maximumSignificantDigits : null,\n    /**\n     * The minimum number of significant digits.\n     *\n     * This is more convenient to specify using the {@link #config-significant} config.\n     * @config {Number}\n     */\n    minimumSignificantDigits : null,\n    /**\n     * Specifies the `minimumSignificantDigits` and `minimumSignificantDigits` in a compact\n     * format. If this value is a `Number`, it sets only the maximum to that value. If this\n     * value is an array, `[0]` sets the minimum and `[1]` sets the maximum.\n     *\n     * If this value (or `minimumSignificantDigits` or `minimumSignificantDigits`) is set,\n     * `integer` (and `minimumIntegerDigits`) and `fraction` (and `minimumFractionDigits`\n     * and `minimumFractionDigits`) are ignored.\n     *\n     * @config {Number|Number[]}\n     */\n    significant : null,\n    /**\n     * The formatting style.\n     *\n     * Valid values are: `'decimal'` (the default), `'currency'`, and `'percent'`.\n     * @config {'decimal'|'currency'|'percent'}\n     * @default\n     */\n    style : 'decimal',\n    /**\n     * A format template consisting of the following parts:\n     *```\n     *  [$] [\\d+:] \\d+ [,\\d+] [.\\d* [#*] | *] [%]\n     *```\n     * If the template begins with a `'$'`, the formatter's `style` option is set to\n     * `'currency'`. If the template ends with `'%'`, `style` is set to `'percent'`.\n     * It is invalid to include both characters. When using `'$'`, the `currency` symbol\n     * defaults to what is provided by the {@link Core.localization.LocaleManager}.\n     *\n     * To set the `minimumIntegerDigits`, the desired minimum comes before the first\n     * digits in the template and is followed by a `'>'` (greater-than). For example:\n     *```\n     *  5>9,999.00\n     *```\n     * The above sets `minimumIntegerDigits` to 5.\n     *\n     * The `useGrouping` option is enabled if there is a `','` (comma) present and is\n     * disabled otherwise.\n     *\n     * If there is a `'.'` (decimal) present, it may be followed by either of:\n     *\n     *  - Zero or more digits which may then be followed by zero or more `'#'` characters.\n     *    The number of digits determines the `minimumFractionDigits`, while the total\n     *    number of digits and `'#'`s determines the `maximumFractionDigits`.\n     *  - A single `'*'` (asterisk) indicating any number of fractional digits (no minimum\n     *    or maximum).\n     *\n     * @config {String}\n     */\n    template : null,\n    /**\n     * Specify `false` to disable thousands separators.\n     * @config {Boolean}\n     * @default\n     */\n    useGrouping : true\n});\nFormatter.number = (format, value) => NumberFormat.get(format).format(value);\nNumberFormat._$name = 'NumberFormat';", "import Base from '../Base.js';\nimport StringHelper from '../helper/StringHelper.js';\nimport Events from './Events.js';\nimport ArrayHelper from '../helper/ArrayHelper.js';\n/**\n * @module Core/mixin/Clipboardable\n */\n/**\n * This class is used internally in Clipboardable to create a shared clipboard that can be used from multiple instances\n * of different widgets.\n *\n * Can read and write to native Clipboard API if allowed, but always holds a local `clipboard` as a fallback.\n * @extends Core/Base\n * @mixes Core/mixin/Events\n * @private\n */\nclass Clipboard extends Base.mixin(Events) {\n    // Defaults to true, so to set this lazy on first read/write\n    hasNativeAccess = true;\n    _content = null;\n    /**\n     * Write to the native Clipboard API or a local clipboard as a fallback.\n     * @param {String} text Only allows string values\n     * @param {Boolean} allowNative `true` will try writing to the Clipboard API once\n     * @private\n     */\n    async writeText(text, allowNative) {\n        const\n            me           = this,\n            { _content } = me;\n        if (allowNative && me.hasNativeAccess) {\n            try {\n                await navigator.clipboard.writeText(text);\n            }\n            catch (e) {\n                me.hasNativeAccess = false;\n            }\n        }\n        if (_content !== text) {\n            // Always writes to local clipboard\n            me._content = text;\n            me.triggerContentChange(_content, false, true);\n        }\n    }\n    /**\n     * Reads from the native Clipboard API or a local clipboard as a fallback.\n     * @param {Boolean} allowNative `true` will try reading from the Clipboard API once\n     * @private\n     */\n    async readText(allowNative) {\n        const\n            me           = this,\n            { _content } = me;\n        if (allowNative && me.hasNativeAccess) {\n            try {\n                const text = await navigator.clipboard.readText();\n                if (_content !== text) {\n                    me._content = text;\n                    me.triggerContentChange(_content, true);\n                }\n                return text;\n            }\n            catch (e) {\n                me.hasNativeAccess = false;\n            }\n        }\n        return _content;\n    }\n    /**\n     * Call this to let other instances know that data has been pasted\n     * @param {Object} source\n     */\n    triggerPaste(source) {\n        this.trigger('paste', { source, text : this._content });\n    }\n    triggerContentChange(oldText, fromRead = false, fromWrite = false) {\n        this.trigger('contentChange', { fromRead, fromWrite, oldText, newText : this._content });\n    }\n    async clear(allowNative) {\n        await this.writeText('', allowNative);\n    }\n}\n/**\n * Mixin for handling clipboard data.\n * @mixin\n */\nexport default Target => class Clipboardable extends (Target || Base) {\n    static $name = 'Clipboardable';\n    static configurable = {\n        /**\n         * Set this to `true` to use native Clipboard API if it is available\n         * @config {Boolean}\n         * @default\n         * @private\n         */\n        useNativeClipboard : false\n    };\n    construct(...args) {\n        super.construct(...args);\n        if (!globalThis.bryntum.clipboard) {\n            globalThis.bryntum.clipboard = new Clipboard();\n        }\n        globalThis.bryntum.clipboard.ion({\n            paste         : 'onClipboardPaste',\n            contentChange : 'onClipboardContentChange',\n            thisObj       : this\n        });\n    }\n    /**\n     * Gets the current shared Clipboard instance\n     * @private\n     */\n    get clipboard() {\n        return globalThis.bryntum.clipboard;\n    }\n    // Called when someone triggers a paste event on the shared Clipboard\n    onClipboardPaste({ text, source }) {\n        const\n            me                       = this,\n            { clipboardText, isCut } = me,\n            isOwn                    = me.compareClipboardText(clipboardText, text);\n        // If \"my\" data has been pasted somewhere\n        if (isOwn && isCut) {\n            // Hook to be able to handle data that has been cut out. Remove for example.\n            me.handleCutData?.({ text, source });\n            me.isCut = false;\n            me.cutData = null;\n        }\n        // If any data other data has been pasted, clear \"my\" clipboard\n        else if (!isOwn) {\n            me.clearClipboard(false);\n        }\n    }\n    // Calls when the shared clipboard writes or reads a new string value\n    onClipboardContentChange({ newText }) {\n        // If clipboard has new data, clear \"my\" clipboard\n        if (!this.compareClipboardText(this.clipboardText, newText)) {\n            this.clearClipboard(false);\n        }\n    }\n    // When a cut is done, or a cut is deactivated\n    set cutData(data) {\n        const me = this;\n        // Call hook for each current item in data\n        me._cutData?.forEach(r => me.setIsCut(r, false));\n        // Set and call again for new data\n        me._cutData = ArrayHelper.asArray(data);\n        me._cutData?.forEach(r => me.setIsCut(r, true));\n    }\n    get cutData() {\n        return this._cutData;\n    }\n    setIsCut() {}\n    /**\n     * Writes string data to the shared/native clipboard. Also saves a local copy of the string and the unconverted\n     * data.\n     *\n     * But firstly, it will call beforeCopy function and wait for a response. If false, the copy will be prevented.\n     *\n     * @param {Object} data\n     * @param {Boolean} isCut\n     * @param {Object} [params] Will be passed to beforeCopy function\n     * @returns {String} String data that was written to the clipboard\n     * @private\n     */\n    async writeToClipboard(data, isCut, params = {}) {\n        // Hook to be able to send event for example\n        if (await this.beforeCopy({ data, isCut, ...params }) === false) {\n            return;\n        }\n        const\n            me         = this,\n            isString   = typeof data === 'string',\n            stringData = isString\n                // If data is string, use that\n                ? data\n                // If not, and there is a stringConverter, use that. Otherwise, just encode it as JSON\n                : (me.stringConverter ? me.stringConverter(data) : StringHelper.safeJsonStringify(data));\n        // This must be before calling the clipboard, as to be able to ignore this change in onClipboardContentChange\n        me.clipboardText = stringData;\n        await me.clipboard.writeText(stringData, me.useNativeClipboard);\n        // Saves a local copy of the original data\n        me.clipboardData = data;\n        me.isCut = isCut;\n        // Saves a local copy of cut out original data\n        me.cutData = isCut && !isString ? data : null;\n        return stringData;\n    }\n    /**\n     * Reads string data from the shared/native clipboard. If string matches current instance local clipboard data, a\n     * non-modified version will be return. Otherwise, a stringParser function will be called.\n     *\n     * But firstly, it will call beforePaste function and wait for a response. If false, the paste will be prevented.\n     *\n     * This function will also trigger a paste event on the clipboard instance.\n     *\n     * @param {Object} [params] Will be passed to beforePaste function\n     * @param {Boolean} [skipPasteTrigger] Set to `true` not trigger a paste when paste completes\n     * @returns {Object}\n     * @private\n     */\n    async readFromClipboard(params = {}, skipPasteTrigger = false) {\n        const\n            me              = this,\n            { clipboard }   = me,\n            text            = await clipboard.readText(me.useNativeClipboard),\n            { isOwn, data } = me.transformClipboardText(text),\n            isCut           = text && isOwn && me.isCut;\n        if (data == null || (Array.isArray(data) && data.length == 0) ||\n            // Hook to trigger event or something like that\n            await me.beforePaste?.({ data, text, ...params, isCut }) === false\n        ) {\n            return;\n        }\n        if (!isOwn) {\n            // If we got something from outside, clear our internal data\n            me.clearClipboard(false);\n        }\n        // Trigger a paste event on the shared clipboard, for other instances to listen to\n        skipPasteTrigger || clipboard.triggerPaste(me);\n        return data;\n    }\n    /**\n     * Clears the clipboard data\n     * @privateparam {Boolean} [clearShared] Set to `false` not to clear the internally shared and native clipboard\n     * @category Common\n     */\n    async clearClipboard(clearShared = true) {\n        const me = this;\n        me.clipboardData = me.clipboardText = me.cutData = null;\n        me.isCut = false;\n        if (clearShared) {\n            await me.clipboard.clear(me.useNativeClipboard);\n        }\n    }\n    compareClipboardText(a, b) {\n        const regex = /\\r\\n|(?!\\r\\n)[\\n-\\r\\x85\\u2028\\u2029]/g;\n        return a?.replace(regex, '\\n') === b?.replace(regex, '\\n');\n    }\n    /**\n     * Takes a clipboard text and returns an object with an `isOwn` property and the parsed `data`\n     * @param {String} text The text string that was read from the clipboard\n     * @returns {Object}\n     * @private\n     */\n    transformClipboardText(text) {\n        const\n            me    = this,\n            isOwn = me.compareClipboardText(me.clipboardText, text), // Does the clipboard content originate from this instance\n            // Read from original data if isOwn, otherwise use the stringParser if it exists.\n            data  = isOwn ? me.clipboardData : (me.stringParser && text ? me.stringParser(text) : text);\n        return {\n            isOwn,\n            data\n        };\n    }\n    /**\n     * Checks local clipboard if there is clipboard data present. If native clipboard API is available, this function\n     * will return `undefined`\n     * @returns {Object}\n     * @private\n     */\n    hasClipboardData() {\n        const\n            { clipboard } = this,\n            { _content }  = clipboard;\n        if (this.useNativeClipboard && clipboard.hasNativeAccess) {\n            // In this case, we have no clue what's inside the clipboard\n            return;\n        }\n        return Boolean(_content && this.transformClipboardText(_content).data);\n    }\n};\n", "import VersionHelper from '../helper/VersionHelper.js';\n/**\n * @module Core/mixin/Override\n */\nconst excludedPropNames = {\n    constructor : 1,\n    prototype   : 1,\n    name        : 1,\n    length      : 1,\n    arguments   : 1,\n    caller      : 1,\n    callee      : 1,\n    __proto__   : 1\n};\n/**\n * Simplifies overriding class methods by allowing methods from another class to be used as overrides.\n * Overrides are defined as own classes. They must at a minimum contain a static getter named targetClass, which\n * should return the class to override. Apply the override by calling {@link #function-apply-static apply()}.\n *\n * ```javascript\n * class TemplateColumnOverride {\n *     static get target() {\n *         return {\n *             class      : TemplateColumn,\n *             product    : 'grid',\n *             minVersion : '1.0',\n *             maxVersion : '1.5'\n *         }\n *     }\n *\n *     renderer(renderData) {\n *         // call overridden function (optional)\n *         const value = this._overridden.renderer.call(this, renderData);\n *\n *         return 'HELLO' + value;\n *     }\n * }\n * Override.apply(TemplateColumnOverride);\n * ```\n *\n * @non-mixin\n */\nexport default class Override {\n    /**\n     * Apply override. We strongly suggest that you at least specify a maxVersion for your overrides.\n     * ```\n     * class OriginalOverride {\n     *     static get target() {\n     *         return {\n     *             class      : Original,\n     *             product    : 'grid',\n     *             minVersion : '1.0',\n     *             maxVersion : '1.5'\n     *         }\n     *     }\n     * }\n     * ```\n     * @param {Object} override An override class definition\n     */\n    static apply(override) {\n        if (!override.target) throw new Error('Override must specify what it overrides, using static getter target');\n        if (!override.target.class) throw new Error('Override must specify which class it overrides, using target.class');\n        if (!this.shouldApplyOverride(override)) return false;\n        const staticKeys   = Object.getOwnPropertyNames(override),\n            instanceKeys = Object.getOwnPropertyNames(override.prototype);\n        staticKeys.splice(staticKeys.indexOf('target'), 1);\n        this.internalOverrideAll(override.target.class, staticKeys, override);\n        this.internalOverrideAll(override.target.class.prototype, instanceKeys, override.prototype);\n        return true;\n    }\n    static internalOverrideAll(targetClass, properties, overrideDefinition) {\n        Reflect.ownKeys(overrideDefinition).forEach(key => {\n            if (properties.includes(key) && !excludedPropNames[key]) {\n                const desc = Object.getOwnPropertyDescriptor(overrideDefinition, key);\n                let currentTargetClass = targetClass;\n                let targetProperty = null;\n                // Walk up the prototype chain to find fn, needed for mixin overrides applied to class that has them\n                // mixed in\n                while (!targetProperty && currentTargetClass) {\n                    targetProperty = Object.getOwnPropertyDescriptor(currentTargetClass, key);\n                    if (!targetProperty) {\n                        currentTargetClass = Object.getPrototypeOf(currentTargetClass);\n                    }\n                }\n                if (targetProperty) {\n                    this.internalOverride(currentTargetClass, key, desc, targetProperty);\n                }\n            }\n        });\n    }\n    static internalOverride(target, key, desc, targetDesc) {\n        const overrides = target._overridden = target._overridden || {};\n        overrides[key] = target[key];\n        if (targetDesc.get) {\n            Object.defineProperty(target, key, {\n                enumerable   : false,\n                configurable : true,\n                get          : desc.get\n            });\n        }\n        else {\n            target[key] = desc.value;\n        }\n    }\n    /**\n     * Checks versions if an override should be applied. Specify version in your overrides target config\n     *\n     * ```javascript\n     * class OriginalOverride {\n     *     static get target() {\n     *         return {\n     *             class      : Original,\n     *             product    : 'grid',\n     *             minVersion : '1.0',\n     *             maxVersion : '1.5'\n     *         }\n     *     }\n     * }\n     * ```\n     *\n     * @param override\n     * @returns {Boolean}\n     * @private\n     */\n    static shouldApplyOverride(override) {\n        const config = override.target;\n        // not using versioning, allow override\n        if (!config.maxVersion && !config.minVersion) return true;\n        // must specify product to be able to lookup versions\n        if (!config.product) throw new Error('Override must specify product when using versioning');\n        // override is for older version, disallow\n        if (config.maxVersion && VersionHelper[config.product].isNewerThan(config.maxVersion)) {\n            return false;\n        }\n        // override is for newer version, disallow\n        if (config.minVersion && VersionHelper[config.product].isOlderThan(config.minVersion)) {\n            return false;\n        }\n        // override is for current version, allow\n        return true;\n    }\n}\nOverride._$name = 'Override';", "import Base from '../Base.js';\nimport DayTime from './DayTime.js';\nimport Events from '../mixin/Events.js';\nimport DH from '../helper/DateHelper.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\n/**\n * @module Core/util/Month\n */\n/**\n * A class which encapsulates a calendar view of a month, and offers information about\n * the weeks and days within that calendar view.\n *\n * ```javascript\n *   // December 2018 using Monday as week start\n *   const m = new Month({\n *       date         : '2018-12-01',\n *       weekStartDay : 1\n *   });\n *\n *   m.eachWeek((week, dates) => console.log(dates.map(d => d.getDate())))\n * ```\n */\nexport default class Month  extends Events(Base) {\n    static $name = 'Month';\n    static get configurable() {\n        return {\n            /**\n             * The date which the month should encapsulate. May be a `Date` object, or a\n             * `YYYY-MM-DD` format string.\n             *\n             * Mutating a passed `Date` after initializing a `Month` object has no effect on\n             * the `Month` object.\n             * @config {Date|String}\n             */\n            date : {\n                $config : {\n                    equal : 'date'\n                },\n                value : DH.clearTime(new Date())\n            },\n            month : null,\n            year : null,\n            /**\n             * The week start day, 0 meaning Sunday, 6 meaning Saturday.\n             * Defaults to {@link Core.helper.DateHelper#property-weekStartDay-static}.\n             * @config {Number}\n             */\n            weekStartDay : null,\n            /**\n             * Configure as `true` to have the visibleDayColumnIndex and visibleColumnCount properties\n             * respect the configured {@link #config-nonWorkingDays}.\n             * @config {Boolean}\n             */\n            hideNonWorkingDays : null,\n            /**\n             * Non-working days as an object where keys are day indices, 0-6 (Sunday-Saturday), and the value is `true`.\n             * Defaults to {@link Core.helper.DateHelper#property-nonWorkingDays-static}.\n             * @config {Object<String,Boolean>}\n             */\n            nonWorkingDays : null,\n            /**\n             * Configure as `true` to always have the month encapsulate six weeks.\n             * This is useful for UIs which must be a fixed height.\n             * @prp {Boolean}\n             */\n            sixWeeks : null\n        };\n    }\n    //region events\n    /**\n     * Fired when setting the {@link #config-date} property causes the encapsulated date to change\n     * in **any** way, date, week, month or year.\n     * @event dateChange\n     * @param {Core.util.Month} source The Month which triggered the event.\n     * @param {Date} newDate The new encapsulated date value.\n     * @param {Date} oldDate The previous encapsulated date value.\n     * @param {Number} changes An object which contains properties which indicate what part of the date changed.\n     * @param {Boolean} changes.d True if the date changed in any way.\n     * @param {Boolean} changes.w True if the week changed (including same week in a different year).\n     * @param {Boolean} changes.m True if the month changed (including same month in a different year).\n     * @param {Boolean} changes.y True if the year changed.\n     * @param {Boolean} changes.r True if the row count (with respect to the {@link #config-sixWeeks} setting) changed.\n     */\n    /**\n     * Fired when setting the {@link #config-date} property causes a change of week. Note that\n     * weeks are calculated in the ISO standard form such that if there are fewer than four\n     * days in the first week of a year, then that week is owned by the previous year.\n     *\n     * The {@link #config-weekStartDay} is honoured when making this calculation and this is a\n     * locale-specific value which defaults to the ISO standard of 1 (Monday) in provided European\n     * locales and 0 (Sunday) in the provided US English locale.\n     * @event weekChange\n     * @param {Core.util.Month} source The Month which triggered the event.\n     * @param {Date} newDate The new encapsulated date value.\n     * @param {Date} oldDate The previous encapsulated date value.\n     * @param {Number} changes An object which contains properties which indicate what part of the date changed.\n     * @param {Boolean} changes.d True if the date changed in any way.\n     * @param {Boolean} changes.w True if the week changed (including same week in a different year).\n     * @param {Boolean} changes.m True if the month changed (including same month in a different year).\n     * @param {Boolean} changes.y True if the year changed.\n     * @param {Boolean} changes.r True if the row count (with respect to the {@link #config-sixWeeks} setting) changed.\n     */\n    /**\n     * Fired when setting the {@link #config-date} property causes a change of month. This\n     * will fire when changing to the same month in a different year.\n     * @event monthChange\n     * @param {Core.util.Month} source The Month which triggered the event.\n     * @param {Date} newDate The new encapsulated date value.\n     * @param {Date} oldDate The previous encapsulated date value.\n     * @param {Number} changes An object which contains properties which indicate what part of the date changed.\n     * @param {Boolean} changes.d True if the date changed in any way.\n     * @param {Boolean} changes.w True if the week changed (including same week in a different year).\n     * @param {Boolean} changes.m True if the month changed (including same month in a different year).\n     * @param {Boolean} changes.y True if the year changed.\n     * @param {Boolean} changes.r True if the row count (with respect to the {@link #config-sixWeeks} setting) changed.\n     */\n    /**\n     * Fired when setting the {@link #config-date} property causes a change of year.\n     * @event yearChange\n     * @param {Core.util.Month} source The Month which triggered the event.\n     * @param {Date} newDate The new encapsulated date value.\n     * @param {Date} oldDate The previous encapsulated date value.\n     * @param {Number} changes An object which contains properties which indicate what part of the date changed.\n     * @param {Boolean} changes.d True if the date changed in any way.\n     * @param {Boolean} changes.w True if the week changed (including same week in a different year).\n     * @param {Boolean} changes.m True if the month changed (including same month in a different year).\n     * @param {Boolean} changes.y True if the year changed.\n     * @param {Boolean} changes.r True if the row count (with respect to the {@link #config-sixWeeks} setting) changed.\n     */\n    //endRegion\n    /**\n     * For use when this Month's `weekStartDay` is non-zero.\n     *\n     * An array to map the days of the week 0-6 of this Calendar to the canonical day numbers\n     * used by the Javascript [Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object.\n     * @member {Number[]} canonicalDayNumbers\n     * @readonly\n     */\n    /**\n     * An array to map a canonical day number to a *visible* column index.\n     * For example, if we have `weekStartDay` as Monday which is 1, and non working days as\n     * Wednesday, and `hideNonWorkingDays : true`, then the calendar would look like\n     *\n     *```\n     * \u250C\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2510\n     * | Mo | Tu | Th | Fr | Sa | Su |\n     * \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518\n     *```\n     *\n     * So we'd need this array: `[ 5, 0, 1, undefined, 2, 3, 4]`\n     * @member {Number[]} visibleDayColumnIndex\n     * @readonly\n     */\n    /**\n     * An array to map a canonical day number to a 0-6 column index.\n     * For example, if we have `weekStartDay` as Monday which is 1, then the calendar would look like\n     *\n     *```\n     * \u250C\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2510\n     * | Mo | Tu | We | Th | Fr | Sa | Su |\n     * \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518\n     *```\n     *\n     * So we'd need this array: `[ 6, 0, 1, 2, 3, 4, 5]`\n     * @member {Number[]} dayColumnIndex\n     * @readonly\n     */\n    /**\n     * The number of visible days in the week as defined by the `nonWorkingDays` and\n     * `hideNonWorkingDays` options.\n     * @member {Number} weekLength\n     * @readonly\n     */\n    configure(config) {\n        super.configure(config);\n        this.updateDayNumbers();\n        // The set is rejected during configuration because everything else has to be set up.\n        if (config.date) {\n            this.date = config.date;\n        }\n        this.generation = 0;\n    }\n    changeDate(date) {\n        // Date has to be set after we know everything else\n        if (this.isConfiguring) {\n            return;\n        }\n        date = typeof date === 'string' ? DH.parse(date, 'YYYY-MM-DD') : new Date(date);\n        if (isNaN(date)) {\n            throw new Error('Month date ingestion must be passed a Date, or a valid YYYY-MM-DD date string');\n        }\n        return date;\n    }\n    updateDate(newDate, oldDate) {\n        const\n            me            = this,\n            {\n                dayColumnIndex,\n                weekCount\n            }             = me,\n            monthStart    = DH.getFirstDateOfMonth(newDate),\n            monthEnd      = DH.getLastDateOfMonth(monthStart),\n            startWeekDay  = dayColumnIndex[monthStart.getDay()],\n            endWeekDay    = dayColumnIndex[monthEnd.getDay()],\n            yearChanged   = !oldDate || (newDate.getFullYear() !== oldDate.getFullYear()),\n            monthChanged  = !oldDate || (newDate.getMonth() !== oldDate.getMonth()),\n            // Collect changes as bitwise flags if we have any listeners:\n            // 0001 = date has changed.\n            // 0010 = week has changed.\n            // 0100 = month has changed.\n            // 1000 = year has changed.\n            // We need this because 10/1/2010 -> 10/1/2011 must fire a dateChange\n            // and a monthChange in addition to the yearChange.\n            // And 10/1/2010 -> 10/2/2010 must fire a dateChange in addition to the monthChange.\n            changes = me.eventListeners && (oldDate ? (newDate.getDate() !== oldDate.getDate()) |\n            (me.getWeekId(newDate) !== me.getWeekId(oldDate)) << 1 |\n            monthChanged << 2 |\n            yearChanged << 3 : 15);\n        // Keep our properties in sync with reality.\n        // Access the private properties directly to avoid recursion.\n        me._year = newDate.getFullYear();\n        me._month = newDate.getMonth();\n        // These comments assume ISO standard of Monday as week start day.\n        //\n        // This is the date of month that is the beginning of the first week row.\n        // So this may be -ve. Eg: for Dec 2018, Monday 26th Nov is the first\n        // cell on the calendar which is the -4th of December. Note that the 0th\n        // of December was 31st of November, so needs -4 to get back to the 26th.\n        me.startDayOfMonth = 1 - startWeekDay;\n        // This is the date of month that is the end of the last week row.\n        // So this may be > month end. Eg: for Dec 2018, Sunday 6th Jan is the last\n        // cell on the calendar which is the 37th of December.\n        me.endDayOfMonth = monthEnd.getDate() + (6 - endWeekDay);\n        if (me.sixWeeks) {\n            me.endDayOfMonth += (6 - me.weekCount) * 7;\n        }\n        // Calculate the start point of where we calculate weeks from if we need to.\n        // It's either the first \"weekStartDay\" in this year if this year's\n        // first week is last year's, and so should work out as zero,\n        // or the \"weekStartDay\" of the week before, so that dates in the first week\n        // the Math.floor(DH.diff(weekBase, date, 'day') / 7) calculates as 1.\n        if (!me.weekBase || yearChanged) {\n            me.calculateWeekBase();\n        }\n        // Allow calling code to detect whether a set date operation resulted in a change\n        // of month.\n        if (monthChanged || yearChanged) {\n            me.generation++;\n        }\n        if (changes) {\n            const event = {\n                newDate,\n                oldDate,\n                changes : {\n                    d : true,\n                    w : Boolean(changes & 2),\n                    m : Boolean(changes & 12),\n                    y : Boolean(changes & 8),\n                    r : me.weekCount !== weekCount\n                }\n            };\n            // If either date, month or year changes, we fire a dateChange\n            me.trigger('dateChange', event);\n            // If the week has changed, fire a weekChange\n            if (changes & 2) {\n                me.trigger('weekChange', event);\n            }\n            // If month or year changed, we fire a monthChange\n            if (changes & 12) {\n                me.trigger('monthChange', event);\n            }\n            // If the year has changed, fire a yearChange\n            if (changes & 8) {\n                me.trigger('yearChange', event);\n            }\n        }\n    }\n    calculateWeekBase() {\n        const\n            me      = this,\n            {\n                dayColumnIndex\n            }       = me,\n            jan1    = new Date(me.year, 0, 1),\n            dec31   = new Date(me.year, 11, 31),\n            january = me.month ? me.getOtherMonth(jan1) : me;\n        // First 7 days are in last week of previous year if the year\n        // starts after our 4th day of week.\n        if (me.dayColumnIndex[jan1.getDay()] > 3) {\n            // Week base is calculated from the year start\n            me.weekBase = january.startDate;\n        }\n        // First 7 days are in week 1 of this year\n        else {\n            // Week base is the start of week before\n            me.weekBase = new Date(me.year, 0, january.startDayOfMonth - 7);\n        }\n        const dec31Week = Math.floor(DH.diff(me.weekBase, dec31, 'day') / 7);\n        // Our year only has a 53rd week if 53rd week ends after our week's 3rd day\n        me.has53weeks = dec31Week === 53 && dayColumnIndex[dec31.getDay()] > 2;\n    }\n    /**\n     * Returns the week start date, based on the configured {@link #config-weekStartDay} of the\n     * passed week.\n     * @param {Number| Number[]} week The week number in the current year, or an array containing\n     * `[year, weekOfYear]` for any year.\n     *\n     * Week numbers greater than the number of weeks in the year just wrap into the following year.\n     */\n    getWeekStart(week) {\n        // Week number n of current year\n        if (typeof week === 'number') {\n            return DH.add(this.weekBase, Math.max(week, 1) * 7, 'day');\n        }\n        // Week n of year nnnn\n        const\n            me = this,\n            [year, weekOfYear] = week;\n        // nnnn is our year, so we know it\n        if (year === me.year) {\n            return me.getWeekStart(weekOfYear);\n        }\n        return me.getOtherMonth(new Date(year, 0, 1)).getWeekStart(weekOfYear);\n    }\n    getOtherMonth(date) {\n        const\n            me     = this,\n            result = (me === otherMonth) ? new Month(null) : otherMonth;\n        result.configure({\n            weekBase           : null,\n            weekStartDay       : me.weekStartDay,\n            nonWorkingDays     : me.nonWorkingDays,\n            hideNonWorkingDays : me.hideNonWorkingDays,\n            sixWeeks           : me.sixWeeks,\n            date               : new Date(date.getFullYear(), 0, 1) // Make it easy to calculate its own weekBase\n        });\n        result.date = date;\n        // in this case, the date config ignores changes w/=== getTime so we have to force the update because we\n        // also cleared weekBase above\n        result.updateDate(result.date, result.date);\n        return result;\n    }\n    changeYear(year) {\n        const newDate = new Date(this.date);\n        newDate.setFullYear(year);\n        // changeDate rejects non-changes, otherwise a change event will be emitted\n        this.date = newDate;\n    }\n    changeMonth(month) {\n        const newDate = new Date(this.date);\n        newDate.setMonth(month);\n        // changeDate rejects non-changes, otherwise a change event will be emitted\n        this.date = newDate;\n    }\n    get weekStartDay() {\n        // This trick allows our weekStartDay to float w/the locale even if the locale changes\n        return typeof this._weekStartDay === 'number' ? this._weekStartDay : DH.weekStartDay;\n    }\n    updateWeekStartDay() {\n        const me = this;\n        me.updateDayNumbers();\n        if (!me.isConfiguring && me.date) {\n            me.weekBase = null;  // force a calculateWeekBase\n            me.updateDate(me.date, me.date);\n        }\n        // else date will be set soon and weekBase is null so calculateWeekBase will be called by updateDate\n    }\n    get nonWorkingDays() {\n        return this._nonWorkingDays || DH.nonWorkingDays;\n    }\n    changeNonWorkingDays(nonWorkingDays) {\n        return ObjectHelper.assign({}, nonWorkingDays);\n    }\n    updateNonWorkingDays() {\n        this.updateDayNumbers();\n    }\n    updateHideNonWorkingDays() {\n        this.updateDayNumbers();\n    }\n    updateSixWeeks() {\n        if (!this.isConfiguring) {\n            this.updateDate(this.date, this.date);\n        }\n    }\n    /**\n     * The number of days in the calendar for this month. This will always be\n     * a multiple of 7, because this represents the number of calendar cells\n     * occupied by this month.\n     * @property {Number}\n     * @readonly\n     */\n    get dayCount() {\n        // So for the example month, Dec 2018 has 42 days, from Mon 26th Nov (-4th Dec) 2018\n        // to Sun 6th Jan (37th Dec) 2019\n        return (this.endDayOfMonth + 1) - this.startDayOfMonth;\n    }\n    /**\n     * The number of weeks in the calendar for this month.\n     * @property {Number}\n     * @readonly\n     */\n    get weekCount() {\n        return this.dayCount / 7;\n    }\n    /**\n     * The date of the first cell in the calendar view of this month.\n     * @property {Date}\n     * @readonly\n     */\n    get startDate() {\n        const me = this;\n        if (me.year != null && me.month != null && me.startDayOfMonth != null) {\n            return new Date(me.year, me.month, me.startDayOfMonth);\n        }\n    }\n    /**\n     * The date of the last cell in the calendar view of this month.\n     * @property {Date}\n     * @readonly\n     */\n    get endDate() {\n        const me = this;\n        if (me.year != null && me.month != null && me.startDayOfMonth != null) {\n            return new Date(me.year, me.month, me.endDayOfMonth);\n        }\n    }\n    /**\n     * Iterates through all calendar cells in this month, calling the passed function for each date.\n     * @param {Function} fn The function to call.\n     * @param {Date} fn.date The date for the cell.\n     */\n    eachDay(fn) {\n        for (let dayOfMonth = this.startDayOfMonth; dayOfMonth <= this.endDayOfMonth; dayOfMonth++) {\n            fn(new Date(this.year, this.month, dayOfMonth));\n        }\n    }\n    /**\n     * Iterates through all weeks in this month, calling the passed function\n     * for each week.\n     * @param {Function} fn The function to call.\n     * @param {Number[]} fn.week An array containing `[year, weekNumber]`\n     * @param {Date[]} fn.dates The dates for the week.\n     */\n    eachWeek(fn) {\n        const me = this,\n            { weekCount } = me;\n        for (let dayOfMonth = me.startDayOfMonth, week = 0; week < weekCount; week++) {\n            const weekDates  = [],\n                weekOfYear = me.getWeekNumber(new Date(me.year, me.month, dayOfMonth));\n            for (let day = 0; day < 7; day++, dayOfMonth++) {\n                weekDates.push(new Date(me.year, me.month, dayOfMonth));\n            }\n            fn(weekOfYear, weekDates);\n        }\n    }\n    /**\n     * Returns the week of the year for the passed date. This returns an array containing *two* values,\n     * the year **and** the week number are returned.\n     *\n     * The week number is calculated according to ISO rules, meaning that if the first week of the year\n     * contains less than four days, it is considered to be the last week of the preceding year.\n     *\n     * The configured {@link #config-weekStartDay} is honoured in this calculation. So if the weekStartDay\n     * is **NOT** the ISO standard of `1`, (Monday), then the weeks do not coincide with ISO weeks.\n     * @param {Date} date The date to calculate the week for.\n     * @returns {Number[]} A numeric array: `[year, week]`\n     */\n    getWeekNumber(date) {\n        const me = this;\n        date = DH.clearTime(date);\n        // If it's a date in another year, use our otherMonth to find the answer.\n        if (date.getFullYear() !== me.year) {\n            return me.getOtherMonth(new Date(date.getFullYear(), 0, 1)).getWeekNumber(date);\n        }\n        let weekNo = Math.floor(DH.diff(me.weekBase, date, 'day') / 7),\n            year = date.getFullYear();\n        // No week 0. It's the last week of last year\n        if (!weekNo) {\n            // Week is the week of last year's 31st Dec\n            return me.getOtherMonth(new Date(me.year - 1, 0, 1)).getWeekNumber(new Date(me.year, 0, 0));\n        }\n        // Only week 53 if year ends before our week's 5th day\n        else if (weekNo === 53 && !me.has53weeks) {\n            weekNo = 1;\n            year++;\n        }\n        // 54 wraps round to 2 of next year\n        else if (weekNo > 53) {\n            weekNo = weekNo % 52;\n        }\n        // Return array of year and week number\n        return [year, weekNo];\n    }\n    getWeekId(date) {\n        const week = this.getWeekNumber(date);\n        return week[0] * 100 + week[1];\n    }\n    getCellData(date, ownerMonth, dayTime = DayTime.MIDNIGHT) {\n        const\n            me                 = this,\n            day                = date.getDay(),\n            visibleColumnIndex = me.visibleDayColumnIndex[day],\n            isNonWorking       = me.nonWorkingDays[day],\n            isHiddenDay        = me.hideNonWorkingDays && isNonWorking;\n        // Automatically move to required month\n        if (date < me.startDate || date > me.endDate) {\n            me.month = date.getMonth();\n        }\n        return  {\n            day,\n            dayTime,\n            visibleColumnIndex,\n            isNonWorking,\n            week        : me.getOtherMonth(date).getWeekNumber(date),\n            key         : DH.format(date, 'YYYY-MM-DD'),\n            columnIndex : me.dayColumnIndex[day],\n            date        : new Date(date),\n            dayEnd      : dayTime.duration('s'),\n            tomorrow    : dayTime.dayOfDate(DH.add(date, 1, 'day')),\n            // These two properties are only significant when used by a CalendarPanel which encapsulates\n            // a single month.\n            isOtherMonth : Math.sign((date.getMonth() + date.getFullYear() * 12) - (ownerMonth.month + ownerMonth.year * 12)),\n            visible      : !isHiddenDay && (date >= ownerMonth.startDate && date < DH.add(ownerMonth.endDate, 1, 'day')),\n            isRowStart   : visibleColumnIndex === 0,\n            isRowEnd     : visibleColumnIndex === me.visibleColumnCount - 1\n        };\n    }\n    updateDayNumbers() {\n        const\n            me                    = this,\n            {\n                weekStartDay,\n                nonWorkingDays,\n                hideNonWorkingDays\n            }                     = me,\n            dayColumnIndex        = me.dayColumnIndex = [],\n            canonicalDayNumbers   = me.canonicalDayNumbers = [],\n            visibleDayColumnIndex = me.visibleDayColumnIndex = [];\n        // So, if they set weekStartDay to 1 meaning Monday which is ISO standard, we will\n        // have mapping of internal day number to canonical day number (as used by Date class)\n        // and to abbreviated day name like this:\n        // canonicalDayNumbers = [1, 2, 3, 4, 5, 6, 0] // Use for translation from our day number to Date class's day number\n        //\n        // Also, we need a map from canonical day number to *visible* cell index.\n        // for example, if we have weekStartDay as Monday which is 1, and non working days as\n        // Wednesday, and hideNonWorkingDays:true, then the calendar would look like\n        // +----+----+----+----+----+----+\n        // | Mo | Tu | Th | Fr | Sa | Su |\n        // +----+----+----+----+----+----+\n        //\n        // So we'd need this array\n        // [ 5, 0, 1, undefined, 2, 3, 4]\n        // Or think of it as this map:\n        // {\n        //      1 : 0,\n        //      2 : 1,\n        //      4 : 2,\n        //      5 : 3,\n        //      6 : 4,\n        //      0 : 5\n        // }\n        // To be able to ascertain the cell index directly from the canonical day number.\n        //\n        // We also need a logical column map which would be\n        // +----+----+----+----+----+----+----+\n        // | Mo | Tu | We | Th | Fr | Sa | Su |\n        // +----+----+----+----+----+----+----+\n        //\n        // So we'd need this array\n        // [ 6, 0, 1, 2, 3, 4, 5]\n        // Or think of it as this map:\n        // {\n        //      1 : 0,\n        //      2 : 1,\n        //      3 : 2\n        //      4 : 3,\n        //      5 : 4,\n        //      6 : 5,\n        //      0 : 6\n        // }\n        // We use this to cache the number of visible columns so that cell renderers can tell whether\n        // they are on the last visible column.\n        let visibleColumnIndex = 0;\n        for (let columnIndex = 0; columnIndex < 7; columnIndex++) {\n            const canonicalDay = (weekStartDay + columnIndex) % 7;\n            canonicalDayNumbers[columnIndex] = canonicalDay;\n            dayColumnIndex[canonicalDay] = columnIndex;\n            // If this day is going to have visible representation, we need to\n            // map it to a columnIndex;\n            if (!hideNonWorkingDays || !nonWorkingDays[canonicalDay]) {\n                visibleDayColumnIndex[canonicalDay] = visibleColumnIndex++;\n            }\n        }\n        me.visibleColumnCount = visibleColumnIndex;\n        me.weekLength = hideNonWorkingDays ? 7 - ObjectHelper.keys(nonWorkingDays).length : 7;\n    }\n}\n// Instance needed for internal tasks\nconst otherMonth = new Month(null);\nMonth._$name = 'Month';", "import Container from './Container.js';\nimport Rotatable from './mixin/Rotatable.js';\nimport './Button.js';\n/**\n * @module Core/widget/ButtonGroup\n */\n/**\n * A specialized container that holds buttons, displaying them in a horizontal group with borders adjusted to make them\n * stick together.\n *\n * Trying to add other widgets than buttons will throw an exception.\n *\n * ```javascript\n * new ButtonGroup({\n *     items : [\n *         { icon : 'b-fa b-fa-kiwi-bird' },\n *         { icon : 'b-fa b-fa-kiwi-otter' },\n *         { icon : 'b-fa b-fa-kiwi-rabbit' },\n *         ...\n *     ]\n * });\n * ```\n *\n * {@inlineexample Core/widget/ButtonGroup.js}\n *\n * @extends Core/widget/Container\n * @classtype buttonGroup\n * @widget\n */\nexport default class ButtonGroup extends Container.mixin(Rotatable) {\n    /**\n     * Fires when a button in the group is clicked\n     * @event click\n     * @param {Core.widget.Button} source Clicked button\n     * @param {Event} event DOM event\n     */\n    /**\n     * Fires when the default action is performed on a button in the group (the button is clicked)\n     * @event action\n     * @param {Core.widget.Button} source Clicked button\n     * @param {Event} event DOM event\n     */\n    /**\n     * Fires when a button in the group is toggled (the {@link Core.widget.Button#property-pressed} state is changed).\n     * If you need to process the pressed button only, consider using {@link #event-click} event or {@link #event-action} event.\n     * @event toggle\n     * @param {Core.widget.Button} source Toggled button\n     * @param {Boolean} pressed New pressed state\n     * @param {Event} event DOM event\n     */\n    static $name = 'ButtonGroup';\n    static type = 'buttongroup';\n    static configurable = {\n        defaultType : 'button',\n        /**\n         * Custom CSS class to add to element. When using raised buttons (cls 'b-raised' on the buttons), the group\n         * will look nicer if you also set that cls on the group.\n         *\n         * ```\n         * new ButtonGroup({\n         *   cls : 'b-raised,\n         *   items : [\n         *       { icon : 'b-fa b-fa-unicorn', cls : 'b-raised' },\n         *       ...\n         *   ]\n         * });\n         * ```\n         *\n         * @config {String}\n         * @category CSS\n         */\n        cls : null,\n        /**\n         * An array of Buttons or typed Button config objects.\n         * @config {ButtonConfig[]|Core.widget.Button[]}\n         */\n        items : null,\n        /**\n         * Default color to apply to all contained buttons, see {@link Core.widget.Button#config-color Button#color}.\n         * Individual buttons can override the default.\n         * @config {String}\n         */\n        color : null,\n        /**\n         * Set to `true` to turn the ButtonGroup into a toggle group, assigning a generated value to each contained\n         * buttons {@link Core.widget.Button#config-toggleGroup toggleGroup config}. Individual buttons can\n         * override the default.\n         * @config {Boolean}\n         */\n        toggleGroup : null,\n        valueSeparator : ',',\n        columns : null,\n        hideWhenEmpty : true,\n        defaultBindProperty : 'value'\n    };\n    onChildAdd(item) {\n        super.onChildAdd(item);\n        item.ion({\n            click   : 'resetValueCache',\n            toggle  : 'onItemToggle',\n            thisObj : this,\n            // This needs to run before the 'click' event is relayed by this button group, in such listener\n            // the `value` must already be updated\n            prio    : 10000\n        });\n    }\n    onChildRemove(item) {\n        item.un({\n            toggle  : 'resetValueCache',\n            click   : 'resetValueCache',\n            thisObj : this\n        });\n        super.onChildRemove(item);\n    }\n    onItemToggle(event) {\n        const me = this;\n        me.resetValueCache();\n        if (!me.isSettingValue && (!me.toggleGroup || event.pressed)) {\n            me.triggerFieldChange({ value : me.value, userAction : true, event });\n        }\n    }\n    resetValueCache() {\n        // reset cached value to revalidate next time it's requested\n        this._value = null;\n    }\n    createWidget(widget) {\n        const\n            me   = this,\n            type = me.constructor.resolveType(widget.type || 'button');\n        if (type.isButton) {\n            if (me.color && !widget.color) {\n                widget.color = me.color;\n            }\n            if (me.toggleGroup && !widget.toggleGroup) {\n                if (typeof me.toggleGroup === 'boolean') {\n                    me.toggleGroup = ButtonGroup.generateId('toggleGroup');\n                }\n                widget.toggleGroup = me.toggleGroup;\n            }\n        }\n        if (me.columns) {\n            widget.width = `${100 / me.columns}%`;\n        }\n        widget = super.createWidget(widget);\n        me.relayEvents(widget, ['click', 'action', 'toggle']);\n        return widget;\n    }\n    updateRotate(rotate) {\n        this.eachWidget(btn => {\n            if (btn.rotate !== false) {\n                btn.rotate = rotate;\n            }\n        });\n    }\n    get value() {\n        // if we don't have cached value\n        // let's calculate it based on item values\n        if (!this._value) {\n            const values = [];\n            // collect pressed item values\n            this.items.forEach(w => {\n                if (w.pressed && w.value !== undefined) {\n                    values.push(w.value);\n                }\n            });\n            // build a string\n            this._value = values.join(this.valueSeparator);\n        }\n        return this._value;\n    }\n    set value(value) {\n        const\n            me       = this,\n            oldValue = me.value;\n        if (!Array.isArray(value)) {\n            if (value === undefined || value === null) {\n                value = [];\n            }\n            else if (typeof value == 'string') {\n                value = value.split(me.valueSeparator);\n            }\n            else {\n                value = [value];\n            }\n        }\n        me._value = value.join(me.valueSeparator);\n        me.isSettingValue = true;\n        // Reflect value on items\n        me.items.forEach(w => {\n            if (w.value !== undefined) {\n                w.pressed = value.includes(w.value);\n            }\n        });\n        me.isSettingValue = false;\n        if (!me.isConfiguring && oldValue !== me.value) {\n            me.triggerFieldChange({ value : me.value, userAction : false });\n        }\n    }\n    updateDisabled(disabled) {\n        this.items.forEach(button => button.disabled = disabled || (!button.ignoreParentReadOnly && this.readOnly));\n    }\n    updateReadOnly(readOnly) {\n        super.updateReadOnly(readOnly);\n        this.updateDisabled(this.disabled);\n    }\n    get widgetClassList() {\n        const classList = super.widgetClassList;\n        // if the buttons should be shown in rows\n        this.columns && classList.push('b-columned');\n        return classList;\n    }\n}\n// Register this widget type with its Factory\nButtonGroup.initClass();\nButtonGroup._$name = 'ButtonGroup';", "import Panel from './Panel.js';\nimport ArrayHelper from '../helper/ArrayHelper.js';\nimport DateHelper from '../helper/DateHelper.js';\nimport TimeZoneHelper from '../helper/TimeZoneHelper.js';\nimport Month from '../util/Month.js';\nimport Tooltip from './Tooltip.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\nimport DomHelper from '../helper/DomHelper.js';\n/**\n * @module Core/widget/CalendarPanel\n */\n// Should not have @classtype, since it should not be created directly\n/**\n * A Panel which displays a month of date cells.\n *\n * This is a base class for UI widgets like {@link Core.widget.DatePicker} which need to display a calendar layout\n * and should not be used directly.\n *\n * @extends Core/widget/Panel\n */\nexport default class CalendarPanel extends Panel {\n    static $name = 'CalendarPanel';\n    static type = 'calendarpanel';\n    static get configurable() {\n        return {\n            layout : 'vbox',\n            textContent : false,\n            /**\n             * Gets or sets the date that orientates the panel to display a particular month.\n             * Changing this causes the content to be refreshed.\n             * @member {Date} date\n             */\n            /**\n             * The date which this CalendarPanel encapsulates.\n             * @config {Date|String}\n             */\n            date : {\n                $config : {\n                    equal : 'date'\n                },\n                value : null\n            },\n            /**\n             * A {@link Core.util.Month} Month utility object which encapsulates this Panel's month\n             * and provides contextual information and navigation services.\n             * @config {Core.util.Month|MonthConfig}\n             */\n            month : {},\n            year : null,\n            /**\n             * The week start day, 0 meaning Sunday, 6 meaning Saturday.\n             * Defaults to {@link Core.helper.DateHelper#property-weekStartDay-static}.\n             * @config {Number}\n             */\n            weekStartDay : null,\n            /**\n             * Configure as `true` to always show a six week calendar.\n             * @config {Boolean}\n             * @default\n             */\n            sixWeeks : true,\n            /**\n             * Configure as `true` to show a week number column at the start of the calendar block.\n             * @deprecated Since 4.0.0. Use {@link #config-showWeekColumn} instead.\n             * @config {Boolean}\n             */\n            showWeekNumber : null,\n            /**\n             * Configure as `true` to show a week number column at the start of the calendar block.\n             * @config {Boolean}\n             */\n            showWeekColumn : null,\n            /**\n             * Either an array of `Date` objects which are to be disabled, or\n             * a function (or the name of a function), which, when passed a `Date` returns `true` if the\n             * date is disabled.\n             * @config {Function|Date[]|String}\n             * @param {Date} date Date to check\n             * @returns {Boolean} Returns `true` if the provided date is disabled\n             */\n            disabledDates : null,\n            /**\n             * A function (or the name of a function) which creates content in, and may mutate a day header element.\n             *\n             * @config {Function|String}\n             * @param {Object} renderData\n             * @param {HTMLElement} renderData.cell The header element\n             * @param {Number} renderData.day The day number conforming to the specified {@link #config-weekStartDay}. Will be in the range `0` to `6`\n             * @param {Number} renderData.weekDay The canonical day number where Monday is 0 and Sunday is\n             * @returns {String|DomConfig|null}\n             */\n            headerRenderer : null,\n            /**\n             * A function (or the name of a function) which creates content in, and may mutate the week cell element at the start of a week row.\n             *\n             * @config {Function|String}\n             * @param {Object} renderData\n             * @param {HTMLElement} renderData.cell The header element\n             * @param {Number[]} renderData.week An array containing `[year, weekNumber]`\n             * @returns {String|DomConfig|null}\n             */\n            weekRenderer : null,\n            /**\n             * A function (or the name of a function) which creates content in, and may mutate a day cell element.\n             *\n             * @config {Function|String}\n             * @param {Object} renderData\n             * @param {HTMLElement} renderData.cell The header element\n             * @param {Date} renderData.date The date for the cell\n             * @param {Number} renderData.day The day for the cell (`0` to `6` for Sunday to Saturday)\n             * @param {Number[]} renderData.rowIndex The row index, 0 to month row count (6 if {@link #config-sixWeeks} is `true`)\n             * @param {HTMLElement} renderData.row The row element encapsulating the week which the cell is a part of\n             * @param {Number[]} renderData.cellIndex The cell index in the whole panel. May be from `0` to up to `42`\n             * @param {Number[]} renderData.columnIndex The column index, `0` to `6`\n             * @param {Number[]} renderData.visibleColumnIndex The visible column index taking hidden non working days into account\n             * @returns {String|DomConfig|null}\n             */\n            cellRenderer : null,\n            /**\n             * Configure as `true` to render weekends as {@link #config-disabledDates}.\n             * @config {Boolean}\n             */\n            disableWeekends : null,\n            hideNonWorkingDays : null,\n            hideNonWorkingDaysCls : 'b-hide-nonworking-days',\n            /**\n             * Non-working days as an object where keys are day indices, 0-6 (Sunday-Saturday), and the value is `true`.\n             * Defaults to {@link Core.helper.DateHelper#property-nonWorkingDays-static}.\n             * @config {Object<Number,Boolean>}\n             */\n            nonWorkingDays : null,\n            /**\n             * A config object to create a tooltip which will show on hover of a date cell including disabled, weekend,\n             * and \"other month\" cells.\n             *\n             * It is the developer's responsibility to hook the `beforeshow` event to either veto the show by returning\n             * `false` or provide contextual content for the date.\n             *\n             * The tip instance will be primed with a `date` property.\n             * @config {TooltipConfig}\n             */\n            tip : null,\n            dayCellCls   : 'b-calendar-cell',\n            dayHeaderCls : 'b-calendar-day-header',\n            /**\n             * The class name to add to disabled calendar cells.\n             * @config {String}\n             * @private\n             */\n            disabledCls : 'b-disabled-date',\n            /**\n             * The class name to add to calendar cells which are in the previous or next month.\n             * @config {String}\n             * @private\n             */\n            otherMonthCls : 'b-other-month',\n            /**\n             * The class name to add to calendar cells which are weekend dates.\n             * @config {String}\n             * @private\n             */\n            weekendCls : 'b-weekend',\n            /**\n             * The class name to add to the calendar cell which contains today's date.\n             * @config {String}\n             * @private\n             */\n            todayCls : 'b-today',\n            /**\n             * The class name to add to calendar cells which are {@link #config-nonWorkingDays}.\n             * @config {String}\n             * @private\n             */\n            nonWorkingDayCls : 'b-nonworking-day',\n            /**\n             * The {@link Core.helper.DateHelper} format string to format the day names\n             * in the header row above the calendar cells.\n             * @config {String}\n             * @default\n             */\n            dayNameFormat : 'ddd',\n            /**\n             * By default, week rows flex to share available Panel height equally.\n             *\n             * Set this config if the available height is too small, and the cell height needs\n             * to be larger to show events.\n             *\n             * Setting this config causes the month grid to become scrollable in the `Y` axis.\n             *\n             * May be specified as a number in which case it will be taken to mean pixels,\n             * or a length in standard CSS units.\n             * @config {Number|String}\n             */\n            minRowHeight : {\n                $config : ['lazy'],\n                value   : null\n            },\n            /**\n             * By default, day cells flex to share available Panel width equally.\n             *\n             * Set this config if the available width is too small, and the cell width needs\n             * to be larger to show events.\n             *\n             * Setting this config causes the month grid to become scrollable in the `X` axis.\n             * @config {Number}\n             */\n            minColumnWidth : {\n                $config : ['lazy'],\n                value   : null\n            },\n            /**\n             * Configure this as true to disable pointer interaction with cells which are outside the\n             * range of the current month.\n             * @config {Boolean}\n             */\n            disableOtherMonthCells : null,\n            disableOtherMonthCellsCls : 'b-disable-othermonth-cells',\n            /**\n             * Configure this as `true` to hide cells which are outside the range of the current month.\n             * @config {Boolean}\n             */\n            hideOtherMonthCells : null,\n            hideOtherMonthCellsCls : 'b-hide-othermonth-cells',\n            /**\n             * By default, when navigating through time, the next time\n             * block will be animated in from the appropriate direction.\n             *\n             * Configure this as `false` to disable this.\n             * @prp {Boolean} animateTimeShift\n             * @default\n             */\n            animateTimeShift : true\n        };\n    }\n    construct(config) {\n        super.construct(config);\n        if (!this.refreshCount) {\n            this.refresh();\n        }\n    }\n    onInternalPaint({ firstPaint }) {\n        super.onInternalPaint?.(...arguments);\n        // Invoke the lazy configs when we first hit the visible DOM\n        if (firstPaint) {\n            // The cell structure must exist for the configs to apply to.\n            if (!this.refreshCount) {\n                this.refresh();\n            }\n            this.getConfig('minColumnWidth');\n            this.getConfig('minRowHeight');\n        }\n    }\n    get overflowElement() {\n        return this.weeksElement;\n    }\n    doDestroy() {\n        this.tip?.destroy();\n        super.doDestroy();\n    }\n    updateMinRowHeight(minRowHeight) {\n        this.element.style.setProperty('--min-row-height', DomHelper.setLength(minRowHeight));\n        this.scrollable = {\n            overflowY : minRowHeight ? 'auto' : false\n        };\n    }\n    updateMinColumnWidth(minColumnWidth) {\n        const me = this;\n        me.element.style.setProperty('--min-column-width', DomHelper.setLength(minColumnWidth));\n        me.scrollable = {\n            overflowX : minColumnWidth ? 'auto' : false\n        };\n        me.overflowElement.classList[minColumnWidth ? 'add' : 'remove']('b-min-columnwidth');\n    }\n    getDateFromDomEvent(domEvent) {\n        const element = (domEvent.nodeType === Element.ELEMENT_NODE ? domEvent : domEvent.target).closest(`#${this.id} [data-date]`);\n        if (element) {\n            return DateHelper.parseKey(element.dataset.date);\n        }\n    }\n    changeTip(tip, existingTip) {\n        const me = this;\n        return Tooltip.reconfigure(existingTip, tip, {\n            owner    : me,\n            defaults : {\n                type        : 'tooltip',\n                owner       : me,\n                id          : `${me.id}-cell-tip`,\n                forElement  : me.bodyElement,\n                forSelector : `.${me.dayCellCls}`\n            }\n        });\n    }\n    updateTip(tip) {\n        this.detachListeners('tip');\n        tip?.ion({\n            pointerOver : 'onTipOverCell',\n            name    : 'tip',\n            thisObj : this\n        });\n    }\n    updateElement(element, was) {\n        const me = this;\n        super.updateElement(element, was);\n        me.updateHideNonWorkingDays(me.hideNonWorkingDays);\n        me.weekdayCells = Array.from(element.querySelectorAll('.b-calendar-day-header'));\n        me.weekElements = Array.from(element.querySelectorAll('.b-calendar-week'));\n        me.weekDayElements = Array.from(element.querySelectorAll('.b-calendar-days'));\n        me.cellElements = [];\n        for (let i = 0, { length } = me.weekDayElements; i < length; i++) {\n            me.cellElements.push(me.weekDayElements[i].previousSibling, ...me.weekDayElements[i].children);\n        }\n    }\n    changeDate(date) {\n        date = typeof date === 'string' ? DateHelper.parse(date) : new Date(date);\n        if (isNaN(date)) {\n            throw new Error('CalendarPanel date ingestion must be passed a Date, or a YYYY-MM-DD date string');\n        }\n        return DateHelper.clearTime(date);\n    }\n    /**\n     * The date which this CalendarPanel encapsulates. Setting this causes the\n     * content to be refreshed.\n     * @property {Date}\n     */\n    updateDate(value) {\n        // We respond to Month change events to update the UI\n        this.month.date = value;\n    }\n    updateDayNameFormat() {\n        // 4th June 2000 was a Sunday\n        const d = new Date('2000-06-04T12:00:00');\n        this.shortDayNames = [];\n        // Collect local shortDayNames in default order.\n        for (let date = 4; date < 11; date++) {\n            d.setDate(date);\n            this.shortDayNames.push(DateHelper.format(d, this.dayNameFormat));\n        }\n    }\n    get weekStartDay() {\n        // This trick allows our weekStartDay to float w/the locale even if the locale changes\n        return typeof this._weekStartDay === 'number' ? this._weekStartDay : DateHelper.weekStartDay;\n    }\n    /**\n     * Set to 0 for Sunday (the default), 1 for Monday etc.\n     *\n     * Set to `null` to use the default value from {@link Core/helper/DateHelper}.\n     */\n    updateWeekStartDay(weekStartDay) {\n        const me = this;\n        if (me._month) {\n            me.month.weekStartDay = weekStartDay;\n            me.dayNames = [];\n            // So, if they set weekStartDay to 1 meaning Monday which is ISO standard, we will\n            // dayNames = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n            for (let i = 0; i < 7; i++) {\n                me.dayNames[i] = me.shortDayNames[me.canonicalDayNumbers[i]];\n            }\n            if (me.refreshCount) {\n                me.refresh();\n            }\n        }\n    }\n    updateHideNonWorkingDays(hideNonWorkingDays) {\n        // Undefined must be cast to Boolean, otherwise it will toggle the class *on*.\n        this.contentElement.classList.toggle(this.hideNonWorkingDaysCls, Boolean(hideNonWorkingDays));\n        this.scrollable?.syncOverflowState();\n        if (this._month) {\n            this.month.hideNonWorkingDays = hideNonWorkingDays;\n        }\n        // First/last visible cell might change\n        if (!this.isConfiguring) {\n            this.refresh();\n        }\n    }\n    updateHideOtherMonthCells(hideOtherMonthCells) {\n        // Undefined must be cast to Boolean, otherwise it will toggle the class *on*.\n        this.element.classList.toggle(this.hideOtherMonthCellsCls, Boolean(hideOtherMonthCells));\n        this.scrollable?.syncOverflowState();\n    }\n    updateDisableOtherMonthCells(disableOtherMonthCells) {\n        // Undefined must be cast to Boolean, otherwise it will toggle the class *on*.\n        this.element.classList.toggle(this.disableOtherMonthCellsCls, Boolean(disableOtherMonthCells));\n        this.scrollable?.syncOverflowState();\n    }\n    get nonWorkingDays() {\n        // If we were not configured with non working days, ask the locale for them. Once.\n        // The cached value is cleared on locale change.\n        return this._nonWorkingDays || (this._localeNonWorkingDays || (this._localeNonWorkingDays = DateHelper.nonWorkingDays));\n    }\n    get weekends() {\n        // Ask the DateHelper which days are weekend days only once.\n        // The cached value is cleared on locale change.\n        return this._localeWeekends || (this._localeWeekends = DateHelper.weekends);\n    }\n    changeNonWorkingDays(nonWorkingDays) {\n        return ObjectHelper.assign({}, nonWorkingDays);\n    }\n    updateNonWorkingDays(nonWorkingDays) {\n        if (this._month) {\n            this.month.nonWorkingDays = nonWorkingDays;\n            this.refresh();\n            this.scrollable?.syncOverflowState();\n        }\n    }\n    get visibleDayColumnIndex() {\n        return this.month.visibleDayColumnIndex;\n    }\n    get dayColumnIndex() {\n        return this.month.dayColumnIndex;\n    }\n    get canonicalDayNumbers() {\n        return this.month.canonicalDayNumbers;\n    }\n    get visibleColumnCount() {\n        return this.month.visibleColumnCount;\n    }\n    get weekLength() {\n        return this.month.weekLength;\n    }\n    /**\n     * The date of the first day cell in this panel.\n     * Note that this may *not* be the first of this panel's current month.\n     * @property {Date}\n     * @readonly\n     */\n    get startDate() {\n        return this.month.startDate;\n    }\n    get duration() {\n        // The endDate is \"exclusive\" because it means 00:00:00 of that day.\n        return DateHelper.diff(this.month.startDate, this.month.endDate, 'day') + 1;\n    }\n    /**\n     * The end date of this view. Note that in terms of full days, this is exclusive,\n     * ie: 2020-01-012 to 2020-01-08 is *seven* days. The end is 00:00:00 on the 8th.\n     *\n     * Note that this may *not* be the last date of this panel's current month.\n     * @property {Date}\n     * @readonly\n     */\n    get endDate() {\n        const { endDate } = this.month;\n        if (endDate) {\n            return DateHelper.add(endDate, 1, 'day');\n        }\n    }\n    changeMonth(month, currentMonth) {\n        const me = this;\n        if (!(month instanceof Month)) {\n            // Setting month to a number when we already have a Month means\n            // just updating the month number of our Month\n            if (typeof month === 'number') {\n                if (currentMonth) {\n                    currentMonth.month = month;\n                    return;\n                }\n                const date = me.date || DateHelper.clearTime(new Date());\n                date.setMonth(month);\n                month = {\n                    date\n                };\n            }\n            month = Month.new({\n                weekStartDay       : me.weekStartDay,\n                nonWorkingDays     : me.nonWorkingDays,\n                hideNonWorkingDays : me.hideNonWorkingDays,\n                sixWeeks           : me.sixWeeks\n            }, month);\n        }\n        month.ion({\n            dateChange : 'onMonthDateChange',\n            thisObj    : me\n        });\n        return month;\n    }\n    onMonthDateChange({ source : month, newDate, oldDate, changes }) {\n        const me = this;\n        // Ensure we're always in sync with the data our Month holds\n        me.year = month.year;\n        if (!me.isConfiguring) {\n            // Only refresh if we don't contain a cell for the new date\n            // or if, internally, the Month we are mapping to the UI is different.\n            if (!me.getCell(newDate) || (changes.m || changes.y)) {\n                // Interrogate DOM *before* mutating it with a refresh.\n                const { isVisible } = me;\n                me.refresh();\n                if (me.animateTimeShift && isVisible) {\n                    DomHelper.slideIn(me.contentElement, newDate > oldDate ? 1 : -1);\n                }\n            }\n            /**\n             * Fires when the date of this CalendarPanel is set.\n             * @event dateChange\n             * @param {Date} value The new date.\n             * @param {Date} oldValue The old date.\n             * @param {Object} changes An object which contains properties which indicate what part of the date changed.\n             * @param {Boolean} changes.d True if the date changed in any way.\n             * @param {Boolean} changes.w True if the week changed (including same week in a different year).\n             * @param {Boolean} changes.m True if the month changed (including same month in a different year).\n             * @param {Boolean} changes.y True if the year changed.\n             */\n            me.trigger('dateChange', {\n                changes,\n                value    : newDate,\n                oldValue : oldDate\n            });\n        }\n    }\n    updateYear(year) {\n        this.month.year = year;\n    }\n    updateShowWeekNumber(showWeekNumber) {\n        this.updateShowWeekColumn(showWeekNumber);\n    }\n    updateShowWeekColumn(showWeekColumn) {\n        const me = this;\n        me.element.classList[showWeekColumn ? 'add' : 'remove']('b-show-week-column');\n        if (me.floating) {\n            // Must realign because content change might change dimensions\n            if (!me.isAligning) {\n                me.realign();\n            }\n        }\n    }\n    updateSixWeeks(sixWeeks) {\n        if (this.month) {\n            this.month.sixWeeks = sixWeeks;\n            this.refresh();\n        }\n    }\n    /**\n     * Refreshes the UI after changing a config that would affect the UI.\n     */\n    refresh() {\n        // This method may be overridden by subclasses to add things like refresh scheduling.\n        this.doRefresh();\n    }\n    /**\n     * Implementation of the UI refresh.\n     * @private\n     */\n    doRefresh() {\n        // Ensure sub elements are all present\n        this.getConfig('element');\n        const\n            me       = this,\n            timeZone = me.timeZone != null ? me.timeZone : me.project?.timeZone,\n            today    = timeZone != null ? TimeZoneHelper.toTimeZone(new Date(), timeZone) : new Date(),\n            {\n                weekElements,\n                weekDayElements,\n                date,\n                month,\n                dayCellCls,\n                dayHeaderCls,\n                disabledCls,\n                otherMonthCls,\n                weekendCls,\n                todayCls,\n                nonWorkingDayCls,\n                nonWorkingDays,\n                canonicalDayNumbers,\n                sixWeeks\n            } = me;\n        today.setHours(0, 0, 0, 0);\n        // If we have not been initialized with a current date, use today\n        if (!date) {\n            me.date = today;\n            return;\n        }\n        // Useful value for CSS to know. Must be set before refresh.\n        me.element.style.setProperty('--visible-week-count', month.weekCount);\n        /**\n         * Fires before this CalendarPanel refreshes in response to changes in its month.\n         * @event beforeRefresh\n         * @param {Core.widget.DatePicker} source This DatePicker.\n         */\n        me.trigger('beforeRefresh');\n        // Make sure we've calculated our shortDayNames\n        me.getConfig('dayNameFormat');\n        for (let columnIndex = 0; columnIndex < 7; columnIndex++) {\n            const\n                cell          = me.weekdayCells[columnIndex],\n                cellDay       = me.canonicalDayNumbers[columnIndex],\n                cellClassList = {\n                    [dayHeaderCls]     : 1,\n                    [weekendCls]       : DateHelper.weekends[cellDay],\n                    [nonWorkingDayCls] : nonWorkingDays[cellDay]\n                };\n            if (me.headerRenderer) {\n                cell.innerHTML = '';\n                me.callback(me.headerRenderer, me, [cell, columnIndex, cellDay]);\n            }\n            else {\n                DomHelper.setInnerText(cell, me.shortDayNames[cellDay]);\n            }\n            // Sync day name cell classes with its calculated status\n            DomHelper.syncClassList(cell, cellClassList);\n            cell.dataset.columnIndex = columnIndex;\n            cell.dataset.cellDay = cellDay;\n        }\n        // Create cell content\n        let rowIndex = 0,\n            cellIndex = 0,\n            lastWorkingColumn = 6;\n        // Which column is the last working day so it can be tagged with an identifying class\n        for (let columnIndex = 6; columnIndex >= 0; columnIndex--) {\n            if (!nonWorkingDays[canonicalDayNumbers[columnIndex]]) {\n                lastWorkingColumn = columnIndex;\n                break;\n            }\n        }\n        // Hide or show the \"other month\" week row depending on our sixWeeks setting\n        weekElements[4].classList.toggle('b-hide-display', month.weekCount < 5 && !sixWeeks);\n        weekElements[5].classList.toggle('b-hide-display', month.weekCount < 6 && !sixWeeks);\n        month.eachWeek((week, dates) => {\n            const\n                weekDayElement = weekDayElements[rowIndex],\n                weekCells = [weekDayElement.previousSibling, ...weekDayElement.children];\n            // Stamp week into week row's dataset\n            weekElements[rowIndex].dataset.week = `${week[0]},${week[1]}`;\n            if (me.weekRenderer) {\n                me.callback(me.weekRenderer, me, [weekCells[0], week]);\n            }\n            else {\n                weekCells[0].innerText = week[1];\n            }\n            for (let columnIndex = 0; columnIndex < 7; columnIndex++) {\n                const\n                    date          = dates[columnIndex],\n                    day           = date.getDay(),\n                    key           = DateHelper.makeKey(date),\n                    isNonWorking  = nonWorkingDays[day],\n                    cell          = weekCells[columnIndex + 1],\n                    cellClassList = {\n                        [dayCellCls]             : 1,\n                        [disabledCls]            : me.isDisabledDate(date),\n                        [otherMonthCls]          : date.getMonth() !== month.month,\n                        [weekendCls]             : DateHelper.weekends[day],\n                        [todayCls]               : date.getTime() === today.getTime(),\n                        [nonWorkingDayCls]       : isNonWorking,\n                        'b-last-working-day'     : columnIndex === lastWorkingColumn,\n                        'b-first-visible-cell'   : !(date - (me.firstVisibleDate || -1)),\n                        'b-last-visible-cell'    : !(date - (me.lastVisibleDate || -1)),\n                        [`b-day-of-week-${day}`] : 1\n                    };\n                // Sync day cell classes with its calculated status\n                DomHelper.syncClassList(cell, cellClassList);\n                cell.dataset.date = key;\n                cell.dataset.cellIndex = cellIndex;\n                cell.dataset.columnIndex = columnIndex;\n                // Since we manipulate the classList/Name directly, we need to trick DomSync's config comparison logic or it\n                // may think the class has not changed.\n                if (cell.lastDomConfig) {\n                    delete cell.lastDomConfig.class;\n                    delete cell.lastDomConfig.className;\n                }\n                if (me.cellRenderer) {\n                    me.callback(me.cellRenderer, me, [{\n                        cell,\n                        date,\n                        day,\n                        row                : weekElements[rowIndex],\n                        rowIndex,\n                        cellIndex,\n                        columnIndex,\n                        visibleColumnIndex : me.visibleDayColumnIndex[day],\n                        week,\n                        key\n                    }]);\n                }\n                else {\n                    cell.innerHTML = date.getDate();\n                }\n                cellIndex++;\n            }\n            rowIndex++;\n        });\n        /**\n         * The number of rows displayed in this month. If {@link #config-sixWeeks} is not set,\n         * this may be from 4 to 6.\n         * @member {Number} visibleWeekCount\n         * @readonly\n         */\n        me.visibleWeekCount = rowIndex;\n        if (me.floating) {\n            // Must realign because content change might change dimensions\n            if (!me.isAligning) {\n                me.realign();\n            }\n        }\n        me.refreshCount = (me.refreshCount || 0) + 1;\n        /**\n         * Fires when this CalendarPanel refreshes.\n         * @event refresh\n         */\n        me.trigger('refresh');\n    }\n    isDisabledDate(date) {\n        const\n            day = date.getDay(),\n            {\n                disabledDates,\n                nonWorkingDays\n            }   = this;\n        if (this.disableWeekends && nonWorkingDays[day]) {\n            return true;\n        }\n        if (disabledDates) {\n            if (Array.isArray(disabledDates)) {\n                date = DateHelper.clearTime(date, true);\n                return disabledDates.some(d => !(DateHelper.clearTime(d, true) - date));\n            }\n            else {\n                return this.callback(this.disabledDates, this, [date]);\n            }\n        }\n    }\n    get bodyConfig() {\n        const\n            result = super.bodyConfig,\n            weeksContainerChildren = [];\n        result.children = [{\n            tag       : 'div',\n            className : 'b-calendar-row b-calendar-weekdays',\n            reference : 'weekdaysHeader',\n            children  : [\n                { class : 'b-week-number-cell' },\n                ...ArrayHelper.fill(7, { class : this.dayHeaderCls }),\n                DomHelper.scrollBarPadElement\n            ]\n        }, {\n            // `notranslate` prevents google translate messing up the DOM, https://github.com/facebook/react/issues/11538\n            className : 'b-weeks-container notranslate',\n            reference : 'weeksElement',\n            children  : weeksContainerChildren\n        }];\n        for (let i = 0; i < 6; i++) {\n            const weekRow = {\n                className : 'b-calendar-row b-calendar-week',\n                dataset   : {\n                    rowIndex : i\n                },\n                children : [{\n                    className : 'b-week-number-cell'\n                }, {\n                    className   : 'b-calendar-days',\n                    children    : [{}, {}, {}, {}, {}, {}, {}],\n                    syncOptions : {\n                        ignoreRefs : true,\n                        strict     : false  // allow complete replacement of classes w/o matching lastDomConfig\n                    }\n                }]\n            };\n            weeksContainerChildren.push(weekRow);\n        }\n        return result;\n    }\n    get firstVisibleDate() {\n        if (this.hideOtherMonthCells) {\n            const { year, month } = this.month;\n            return new Date(year, month, 1);\n        }\n        for (const me = this, date = me.month.startDate; ; date.setDate(date.getDate() + 1)) {\n            if (!me.hideNonWorkingDays || !me.nonWorkingDays[date.getDay()]) {\n                return date;\n            }\n        }\n    }\n    get lastVisibleDate() {\n        const lastDate = DateHelper.add(this.endDate, -1, 'd');\n        if (this.hideOtherMonthCells) {\n            return lastDate;\n        }\n        for (const me = this, date = lastDate; ; date.setDate(date.getDate() - 1)) {\n            if (!me.hideNonWorkingDays || !me.nonWorkingDays[date.getDay()]) {\n                return date;\n            }\n        }\n    }\n    /**\n     * Returns the cell associated with the passed date.\n     *\n     * To exclude dates which are outside of the panel's current month, pass the `strict` parameter as `true`\n     * @param {Date|String} date The date to find the element for or a key in the format `YYYY-MM-DD`\n     * @param {Boolean} strict Only return the element if this view *owns* the date.\n     * @returns {HTMLElement} The cell for the passed date if it exists\n     */\n    getCell(date, strict) {\n        if (!(typeof date === 'string')) {\n            date = DateHelper.makeKey(date);\n        }\n        const cell = this.weeksElement.querySelector(`[data-date=\"${date}\"]`);\n        if (cell && (!strict || !cell.classList.contains(this.otherMonthCls))) {\n            return cell;\n        }\n    }\n    onTipOverCell({ source : tip, target }) {\n        tip.date = DateHelper.parseKey(target.dataset.date);\n    }\n    updateLocalization() {\n        // Uncache the cached locale data\n        this._localeNonWorkingDays = this._localeWeekends = null;\n        this.updateDayNameFormat();\n        this.updateWeekStartDay(this.weekStartDay);\n        super.updateLocalization();\n    }\n}\n// Register this widget type with its Factory\nCalendarPanel.initClass();\nCalendarPanel._$name = 'CalendarPanel';", "import Panel from './Panel.js';\nimport EventHelper from '../helper/EventHelper.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\nimport DomHelper from '../helper/DomHelper.js';\n/**\n * @module Core/widget/YearPicker\n */\n/**\n * A Panel subclass which allows a year to be selected from a range of 12 displayed years.\n *\n * The panel can be configured with {@link #config-startYear} to specify the first year in the\n * displayed range.\n *\n * The {@link #property-year} indicates and sets the currently selected year.\n *\n * The {@link #event-select} event is fired when a new year is selected.\n *\n * {@inlineexample Core/widget/YearPicker.js}\n *\n * @extends Core/widget/Panel\n * @classtype yearpicker\n * @widget\n */\nexport default class YearPicker extends Panel {\n    static $name = 'YearPicker';\n    static type = 'yearpicker';\n    static configurable = {\n        textContent : false,\n        /**\n         * The definition of the top toolbar which displays the title and \"previous\" and\n         * \"next\" buttons.\n         *\n         * This contains the following predefined `items` which may be reconfigured by\n         * application code:\n         *\n         * - `title` A widget which displays the visible year range. Weight 100.\n         * - `previous` A button which navigates to the previous block. Weight 200.\n         * - `next` A button which navigates to the next block. Weight 300.\n         *\n         * These may be reordered:\n         *\n         * ```javascript\n         * new YearPicker({\n         *     appendTo : targetElement,\n         *     tbar     : {\n         *         items : {\n         *             // Move title to centre\n         *             title : {\n         *                 weight : 250\n         *             }\n         *         }\n         *     },\n         *     width    : '24em'\n         * });\n         * ```\n         * @config {ToolbarConfig}\n         */\n        tbar : {\n            overflow : null,\n            items    : {\n                previous : {\n                    type     : 'tool',\n                    cls      : 'b-icon b-icon-previous',\n                    onAction : 'up.previous',\n                    weight   : 100\n                },\n                title : {\n                    type     : 'button',\n                    cls      : 'b-yearpicker-title',\n                    weight   : 200,\n                    onAction : 'up.handleTitleClick'\n                },\n                next : {\n                    type     : 'tool',\n                    cls      : 'b-icon b-icon-next',\n                    onAction : 'up.next',\n                    weight   : 300\n                }\n            }\n        },\n        itemCls : 'b-year-container',\n        /**\n         * The number of clickable year buttons to display in the widget.\n         *\n         * It may be useful to change this if a non-standard shape or size is used.\n         * @config {Number}\n         * @default\n         */\n        yearButtonCount : 12,\n        /**\n         * The currently selected year.\n         * @member {Number} year\n         */\n        /**\n         * The year to use as the selected year. Defaults to the current year.\n         * @config {Number}\n         */\n        year : null,\n        /**\n         * The lowest year to allow.\n         * @config {Number}\n         */\n        minYear : null,\n        /**\n         * The highest year to allow.\n         * @config {Number}\n         */\n        maxYear : null,\n        /**\n         * The starting year displayed in the widget.\n         * @member {Number} startYear\n         */\n        /**\n         * The year to show at the start of the widget\n         * @config {Number}\n         */\n        startYear : null\n    };\n    construct(config) {\n        super.construct({\n            year : new Date().getFullYear(),\n            ...config\n        });\n        EventHelper.on({\n            element  : this.contentElement,\n            click    : 'onYearClick',\n            delegate : '.b-yearpicker-year',\n            thisObj  : this\n        });\n    }\n    get focusElement() {\n        return this.getYearButton(this.year) || this.getYearButton(this.startYear);\n    }\n    getYearButton(y) {\n        return this.contentElement.querySelector(`.b-yearpicker-year[data-year=\"${y}\"]`);\n    }\n    /**\n     * The currently selected year.\n     * @member {Number} value\n     */\n    get value() {\n        return this.year;\n    }\n    set value(year) {\n        this.year = year;\n    }\n    onYearClick({ target }) {\n        const clickedYear = Math.min(Math.max(parseInt(target.innerText), this.minYear || 1), this.maxYear || 9999);\n        // The updater won't run, so fire the select event here.\n        if (this.year === clickedYear) {\n            this.trigger('select', { oldValue : clickedYear, value : clickedYear });\n        }\n        else {\n            this.year = clickedYear;\n        }\n    }\n    handleTitleClick(e) {\n        this.trigger('titleClick', e);\n    }\n    previous() {\n        this.startYear = this.startYear - this.yearButtonCount;\n    }\n    next() {\n        this.startYear = this.endYear + 1;\n    }\n    ingestYear(year) {\n        if (!isNaN(year)) {\n            return ObjectHelper.isDate(year) ? year.getFullYear() : year;\n        }\n    }\n    changeYear(year) {\n        // ingestYear returns undefined if invalid input\n        if ((year = this.ingestYear(year))) {\n            return Math.min(Math.max(year, this.minYear || 1), this.maxYear || 9999);\n        }\n    }\n    updateYear(year, oldValue) {\n        const me = this;\n        if (!me.startYear || year > me.endYear) {\n            me.startYear = year;\n        }\n        else if (year < me.startYear) {\n            me.startYear = year - (me.yearButtonCount - 1);\n        }\n        if (!me.isConfiguring) {\n            /**\n             * Fired when a year is selected.\n             * @event select\n             * @param {Number} value The previously selected year.\n             * @param {Core.widget.YearPicker} source This YearPicker\n             */\n            me.trigger('select', { oldValue, value : year });\n        }\n    }\n    /**\n     * The ending year displayed in the widget.\n     * @member {Number} endYear\n     * @readonly\n     */\n    get endYear() {\n        return this.startYear + this.yearButtonCount - 1;\n    }\n    changeStartYear(startYear) {\n        // ingestYear returns undefined if invalid input\n        if ((startYear = this.ingestYear(startYear))) {\n            startYear = this.minYear ? Math.max(startYear, this.minYear) : startYear;\n            return this.maxYear ? Math.min(startYear, this.maxYear - (this.yearButtonCount - 1)) : startYear;\n        }\n    }\n    async updateStartYear(startYear, oldStartYear) {\n        if (this.isVisible) {\n            DomHelper.slideIn(this.contentElement, Math.sign(startYear - oldStartYear));\n        }\n    }\n    composeBody() {\n        // Must be ingested before first compose.\n        this.getConfig('year');\n        const\n            { startYear } = this,\n            result        = super.composeBody(),\n            children      = result.children[this.tbar ? 1 : 0].children = [];\n        this.widgetMap.title.text = `${`000${startYear}`.slice(-4)} - ${`000${this.endYear}`.slice(-4)}`;\n        for (let i = 0, y = startYear; i < this.yearButtonCount; i++, y++) {\n            children.push({\n                tag     : 'button',\n                dataset : {\n                    year : y\n                },\n                class : {\n                    'b-yearpicker-year' : 1,\n                    'b-selected'        : y === this.year\n                },\n                text : `000${y}`.slice(-4)\n            });\n        }\n        return result;\n    }\n}\n// Register this widget type with its Factory\nYearPicker.initClass();\nYearPicker._$name = 'YearPicker';", "import TextField from './TextField.js';\nimport StringHelper from '../helper/StringHelper.js';\n/**\n * @module Core/widget/DisplayField\n */\n/**\n * A widget used to show a read only value. Can also use a {@link #config-template template string} to show custom\n * markup inside a Container.\n *\n * ```javascript\n * let displayField = new DisplayField({\n *   appendTo : document.body,\n *   label: 'name',\n *   value : 'John Doe',\n *   // or use a template\n *   // template : name => `${name} is the name`\n * });\n * ```\n *\n * {@inlineexample Core/widget/DisplayField.js}\n *\n * @extends Core/widget/Field\n * @classtype displayField\n * @classtypealias display\n * @widget\n * @inputfield\n */\nexport default class DisplayField extends TextField {\n    static $name = 'DisplayField';\n    static type = 'displayfield';\n    static alias = 'display';\n    static get configurable() {\n        return {\n            readOnly : true,\n            editable : false,\n            cls      : 'b-display-field',\n            /**\n             * A template string used to render the value of this field. Please note you are responsible for encoding\n             * any strings protecting against XSS.\n             *\n             * ```javascript\n             * new DisplayField({\n             *     appendTo : document.body,\n             *     name     : 'age',\n             *     label    : 'Age',\n             *     template : data => `${data.value} years old`\n             * })\n             * ```\n             * @config {Function}\n             * @param {ContainerItemConfig} fieldConfig Configuration object for the field\n             * @returns {DomConfig|String|null}\n             */\n            template : null,\n            ariaElement : 'displayElement'\n        };\n    }\n    get focusElement() {\n        // we're not focusable.\n    }\n    changeReadOnly() {\n        return true;\n    }\n    changeEditable() {\n        return false;\n    }\n    get inputElement() {\n        return {\n            tag       : 'span',\n            id        : `${this.id}-input`,\n            reference : 'displayElement',\n            html      : this.template ? this.template(this.value) : StringHelper.encodeHtml(this.value)\n        };\n    }\n}\n// Register this widget type with its Factory\nDisplayField.initClass();\nDisplayField._$name = 'DisplayField';", "import CalendarPanel from './CalendarPanel.js';\nimport YearPicker from './YearPicker.js';\nimport DateHelper from '../helper/DateHelper.js';\nimport EventHelper from '../helper/EventHelper.js';\nimport Combo from './Combo.js';\nimport DomHelper from '../helper/DomHelper.js';\nimport './DisplayField.js';\nconst\n    generateMonthNames = () => DateHelper.getMonthNames().map((m, i) => [i, m]),\n    dateSort           = (lhs, rhs) => lhs.valueOf() - rhs.valueOf(),\n    emptyArray         = Object.freeze([]);\nclass ReadOnlyCombo extends Combo {\n    static get $name() {\n        return 'ReadOnlyCombo';\n    }\n    static get type() {\n        return 'readonlycombo';\n    }\n    static get configurable() {\n        return {\n            editable        : false,\n            inputAttributes : {\n                tag      : 'div',\n                tabIndex : -1\n            },\n            inputValueAttr          : 'innerHTML',\n            highlightExternalChange : false,\n            monitorResize           : false,\n            triggers                : {\n                expand : false\n            },\n            picker : {\n                align : {\n                    align     : 't-b',\n                    axisLock  : true,\n                    matchSize : false\n                },\n                cls        : 'b-readonly-combo-list',\n                scrollable : {\n                    overflowX : false\n                }\n            }\n        };\n    }\n}\nReadOnlyCombo.initClass();\n/**\n * @module Core/widget/DatePicker\n */\n/**\n * A Panel which can display a month of date cells, which navigates between the cells, fires events upon user selection\n * actions, optionally navigates to other months in response to UI gestures, and optionally displays information about\n * each date cell.\n *\n * A date is selected (meaning a single value is selected if {@link #config-multiSelect} is not set, or\n * added to the {@link #property-selection} if {@link #config-multiSelect if set}) by clicking a cell\n * or by pressing `ENTER` when focused on a cell.\n *\n * The `SHIFT` and `CTRL` keys modify selection behaviour depending on the value of {@link #config-multiSelect}.\n *\n * This class is used as a {@link Core.widget.DateField#config-picker} by the {@link Core.widget.DateField} class.\n *\n * {@inlineexample Core/widget/DatePicker.js}\n *\n * ## Custom cell rendering\n * You can easily control the content of each date cell using the {@link #config-cellRenderer}. The example below shows\n * a view typically seen when booking hotel rooms or apartments.\n *\n * {@inlineexample Core/widget/DatePickerCellRenderer.js}\n *\n * ## Multi selection\n * You can select multiple date ranges or a single date range using the {@link #config-multiSelect} config.\n *\n * {@inlineexample Core/widget/DatePickerMulti.js}\n *\n * ## Configuring toolbar buttons\n *\n * The datepicker includes a few useful navigation buttons by default. Through the DatePicker\u00B4s {@link #config-tbar toolbar},\n * you can manipulate these, via the toolbar\u00B4s {@link Core/widget/Toolbar#config-items} config.\n *\n * There are four buttons by default, each of which can be reconfigured using\n * an object, or disabled by configuring them as `null`.\n *\n * ```javascript\n * new DatePicker({\n *    tbar : {\n *       // Remove all navigation buttons\n *       items : {\n *           prevYear  : null,\n *           prevMonth : null,\n *           nextYear  : null,\n *           nextMonth : null\n *       }\n *    }\n * })\n * ```\n *\n * Provided toolbar widgets include:\n *\n * - `prevMonth` Navigates to previous month\n * - `nextMonth` Navigates to next month\n * - `prevYear` Navigates to previous year\n * - `nextYear` Navigates to next year\n *\n * @extends Core/widget/CalendarPanel\n * @classtype datepicker\n * @widget\n */\nexport default class DatePicker extends CalendarPanel {\n    static $name = 'DatePicker';\n    static type = 'datepicker';\n    static get delayable() {\n        return {\n            refresh : 'raf'\n        };\n    }\n    static get configurable() {\n        return {\n            /**\n             * The date that the user has navigated to using the UI *prior* to setting the widget's\n             * value by selecting. The initial default is today's date.\n             *\n             * This may be changed using keyboard navigation. The {@link Core.widget.CalendarPanel#property-date} is set\n             * by pressing `ENTER` when the desired date is reached.\n             *\n             * Programmatically setting the {@link Core.widget.CalendarPanel#config-date}, or using the UI to select the date\n             * by clicking it also sets the `activeDate`\n             * @config {Date}\n             */\n            activeDate : {\n                value   : new Date(),\n                $config : {\n                    equal : 'date'\n                }\n            },\n            focusable   : true,\n            textContent : false,\n            tbar        : {\n                overflow : null,\n                items    : {\n                    prevYear : {\n                        cls      : 'b-icon b-icon-first',\n                        onAction : 'up.gotoPrevYear',\n                        tooltip  : 'L{DatePicker.gotoPrevYear}'\n                    },\n                    prevMonth : {\n                        cls      : 'b-icon b-icon-previous',\n                        onAction : 'up.gotoPrevMonth',\n                        tooltip  : 'L{DatePicker.gotoPrevMonth}'\n                    },\n                    fields : {\n                        type  : 'container',\n                        cls   : 'b-datepicker-title',\n                        items : {\n                            monthField : {\n                                type              : 'readonlycombo',\n                                cls               : 'b-datepicker-monthfield',\n                                items             : generateMonthNames(),\n                                internalListeners : {\n                                    select : 'up.onMonthPicked'\n                                }\n                            },\n                            yearButton : {\n                                type              : 'button',\n                                cls               : 'b-datepicker-yearbutton',\n                                internalListeners : {\n                                    click : 'up.onYearPickerRequested'\n                                }\n                            }\n                        }\n                    },\n                    nextMonth : {\n                        cls      : 'b-icon b-icon-next',\n                        onAction : 'up.gotoNextMonth',\n                        tooltip  : 'L{DatePicker.gotoNextMonth}'\n                    },\n                    nextYear : {\n                        cls      : 'b-icon b-icon-last',\n                        onAction : 'up.gotoNextYear',\n                        tooltip  : 'L{DatePicker.gotoNextYear}'\n                    }\n                }\n            },\n            yearPicker : {\n                value : {\n                    type              : 'YearPicker',\n                    yearButtonCount   : 16,\n                    trapFocus         : true,\n                    positioned        : true,\n                    hidden            : true,\n                    internalListeners : {\n                        titleClick : 'up.onYearPickerTitleClick',\n                        select     : 'up.onYearPicked'\n                    }\n                },\n                $config : 'lazy'\n            },\n            /**\n             * The initially selected date.\n             * @config {Date}\n             */\n            date : null,\n            /**\n             * The minimum selectable date. Selection of and navigation to dates prior\n             * to this date will not be possible.\n             * @config {Date}\n             */\n            minDate : {\n                value   : null,\n                $config : {\n                    equal : 'date'\n                }\n            },\n            /**\n             * The maximum selectable date. Selection of and navigation to dates after\n             * this date will not be possible.\n             * @config {Date}\n             */\n            maxDate : {\n                value   : null,\n                $config : {\n                    equal : 'date'\n                }\n            },\n            /**\n             * By default, disabled dates cannot be navigated to, and they are skipped over\n             * during keyboard navigation. Configure this as `true` to enable navigation to\n             * disabled dates.\n             * @config {Boolean}\n             * @default\n             */\n            focusDisabledDates : null,\n            /**\n             * Configure as `true` to enable selecting multiple discontiguous date ranges using\n             * click and Shift+click to create ranges and Ctrl+click to select/deselect individual dates.\n             *\n             * Configure as `'range'` to enable selecting a single date range by selecting a\n             * start and end date. Hold \"SHIFT\" button to select date range. Ctrl+click may add\n             * or remove dates to/from either end of the range.\n             * @config {Boolean|'range'}\n             * @default\n             */\n            multiSelect : false,\n            /**\n             * If {@link #config-multiSelect} is configured as `true`, this is an array of dates\n             * which are selected. There may be multiple, discontiguous date ranges.\n             *\n             * If {@link #config-multiSelect} is configured as `'range'`, this is a two element array\n             * specifying the first and last selected dates in a range.\n             * @config {Date[]}\n             */\n            selection : {\n                $config : {\n                    equal : (v1, v2) => v1 && v1.equals(v2)\n                },\n                value : null\n            },\n            /**\n             * By default, the month and year are editable. Configure this as `false` to prevent that.\n             * @config {Boolean}\n             * @default\n             */\n            editMonth : true,\n            /**\n             * The {@link Core.helper.DateHelper} format string to format the day names.\n             * @config {String}\n             * @default\n             */\n            dayNameFormat : 'dd',\n            trapFocus : true,\n            role : 'grid',\n            focusDescendant : true,\n            /**\n             * By default, when the {@link #property-date} changes, the UI will only refresh\n             * if it doesn't contain a cell for that date, so as to keep a stable UI when\n             * navigating.\n             *\n             * Configure this as `true` to refresh the UI whenever the month changes, even if\n             * the UI already shows that date.\n             * @config {Boolean}\n             * @internal\n             */\n            alwaysRefreshOnMonthChange : null\n        };\n    }\n    static get prototypeProperties() {\n        return {\n            /**\n             * The class name to add to the calendar cell whose date which is outside of the\n             * {@link #config-minDate}/{@link #config-maxDate} range.\n             * @config {String}\n             * @private\n             */\n            outOfRangeCls : 'b-out-of-range',\n            /**\n             * The class name to add to the currently focused calendar cell.\n             * @config {String}\n             * @private\n             */\n            activeCls : 'b-active-date',\n            /**\n             * The class name to add to selected calendar cells.\n             * @config {String}\n             * @private\n             */\n            selectedCls : 'b-selected-date'\n        };\n    }\n    // region Init\n    construct(config) {\n        const me = this;\n        super.construct(config);\n        me.externalCellRenderer = me.cellRenderer;\n        me.cellRenderer         = me.internalCellRenderer;\n        me.element.setAttribute('aria-activedescendant', `${me.id}-active-day`);\n        me.weeksElement.setAttribute('role', 'grid');\n        me.weekElements.forEach(w => w.setAttribute('role', 'row'));\n        me.element.setAttribute('ariaLabelledBy', me.widgetMap.fields.id);\n        EventHelper.on({\n            element : me.weeksElement,\n            click   : {\n                handler  : 'onCellClick',\n                delegate : `.${me.dayCellCls}:not(.${me.disabledCls}):not(.${me.outOfRangeCls})`\n            },\n            mousedown : {\n                handler  : 'onCellMousedown',\n                delegate : `.${me.dayCellCls}`\n            },\n            thisObj : me\n        });\n        me.widgetMap.monthField.readOnly = me.widgetMap.yearButton.disabled = !me.editMonth;\n        // Ensure the DatePicker is immediately ready for use.\n        me.refresh.flush();\n    }\n    afterHide() {\n        this._yearPicker?.hide();\n        super.afterHide(...arguments);\n    }\n    doDestroy() {\n        this.yearButton?.destroy();\n        this.monthField?.destroy();\n        super.doDestroy();\n    }\n    // endregion\n    get focusElement() {\n        return this.weeksElement.querySelector(`.${this.dayCellCls}[tabIndex=\"0\"]`);\n    }\n    doRefresh() {\n        const\n            me             = this,\n            { date }       = me,\n            oldActiveCell  = me.focusElement,\n            // Coerce the active date to be in the visible range.\n            // Do not use the setter, the sync is done below\n            activeDate     = DateHelper.betweenLesser(me.activeDate, me.month.startDate, me.month.endDate) ? me.activeDate : (me._activeDate = date);\n        // toolbar widgets must have been instantiated.\n        me.getConfig('tbar');\n        super.doRefresh(...arguments);\n        me.widgetMap.monthField.value = date.getMonth();\n        me.widgetMap.yearButton.text  = date.getFullYear();\n        // The focused cell will have been repurposed for a new date\n        const dateOfOldActiveCell = DateHelper.parseKey(oldActiveCell?.dataset.date);\n        // The position of the cell may have changed, so the \"from\" cell must\n        // be identified by the date that is stamped into it *after* the refresh..\n        if (activeDate - dateOfOldActiveCell) {\n            me.syncActiveDate(activeDate, dateOfOldActiveCell);\n        }\n    }\n    internalCellRenderer({ cell, date }) {\n        const\n            me            = this,\n            {\n                activeCls,\n                selectedCls,\n                externalCellRenderer\n            }             = me,\n            isSelected    = me.isSelectedDate(date),\n            cellClassList = {\n                [activeCls]        : activeCls && me.isActiveDate(date),\n                [selectedCls]      : isSelected,\n                [me.outOfRangeCls] : (me.minDate && date < me.minDate) || (me.maxDate && date > me.maxDate)\n            };\n        if (isSelected) {\n            // Fix up start/inner/end range classes\n            if (me.multiSelect) {\n                const\n                    isStart = !me.isSelectedDate(DateHelper.add(date, -1, 'd')),\n                    isEnd   = !me.isSelectedDate(DateHelper.add(date, 1, 'd'));\n                cellClassList['b-range-start'] = isStart;\n                cellClassList['b-range-end'] = isEnd;\n                cellClassList['b-in-range'] = !isStart && !isEnd;\n            }\n        }\n        DomHelper.updateClassList(cell, cellClassList);\n        // Must replace entire content in case we have an externalCellRenderer\n        cell.innerHTML = `<div class=\"b-datepicker-cell-inner\">${date.getDate()}</div>`;\n        cell.setAttribute('role', 'gridcell');\n        cell.setAttribute('aria-label', DateHelper.format(date, 'MMMM D, YYYY'));\n        if (me.isActiveDate(date)) {\n            cell.id = `${me.id}-active-day`;\n        }\n        else {\n            cell.removeAttribute('id');\n        }\n        if (externalCellRenderer) {\n            arguments[0].cell = cell.firstChild;\n            me.callback(externalCellRenderer, this, arguments);\n        }\n    }\n    onCellMousedown(event) {\n        const cell = event.target.closest('[data-date]');\n        cell.focus();\n        if (DomHelper.getActiveElement(cell) === cell) {\n            // Only preventDefault if we succeeded in ingesting focus.\n            event.preventDefault();\n        }\n        this.activeDate = DateHelper.parseKey(cell.dataset.date);\n    }\n    onCellClick(event) {\n        const cell = event.target.closest('[data-date]');\n        this.onUIDateSelect(DateHelper.parseKey(cell.dataset.date), event);\n    }\n    /**\n     * Called when the user uses the UI to select the current activeDate. So ENTER when focused\n     * or clicking a date cell.\n     * @param {Date} date The active date to select\n     * @param {Event} event the instigating event, either a `click` event or a `keydown` event.\n     * @internal\n     */\n    onUIDateSelect(date, event) {\n        const\n            me = this,\n            {\n                lastClickedDate,\n                multiSelect\n            }  = me;\n        me.lastClickedDate = date;\n        if (!me.isDisabledDate(date)) {\n            me.activatingEvent = event;\n            // Handle multi selecting.\n            // * single contiguous date range, eg: an event start and end\n            // * multiple discontiguous ranges\n            if (multiSelect) {\n                me.handleMultiSelect(lastClickedDate, date, event);\n            }\n            else {\n                me.selection = date;\n                if (me.floating) {\n                    me.hide();\n                }\n            }\n            me.activatingEvent = null;\n        }\n    }\n    // Calls updateSelection if the selection is mutated\n    handleMultiSelect(lastClickedDate, date, event) {\n        const\n            me          = this,\n            {\n                multiSelect\n            }           = me,\n            _selection  = me._selection || (me._selection = new DateSet()),\n            selection   = _selection.dates,\n            singleRange = multiSelect === 'range',\n            {\n                size,\n                generation\n            }           = _selection,\n            rangeEnds   = size && {\n                [DateHelper.makeKey(DateHelper.add(selection[0], -1, 'd'))]                   : 1,\n                [DateHelper.makeKey(selection[0])]                                            : 1,\n                [DateHelper.makeKey(selection[selection.length - 1])]                         : 1,\n                [DateHelper.makeKey(DateHelper.add(selection[selection.length - 1], 1, 'd'))] : 1\n            },\n            isSelected  = _selection.has(date),\n            toggleFn    = isSelected ? 'delete' : 'add';\n        // If we're allowed to create one range and they clicked on a togglable date of a range\n        const clickedRangeEnd = singleRange && rangeEnds?.[DateHelper.makeKey(date)];\n        // Ctrl+click means toggle the date, leaving remaining selection unchanged\n        if (event.ctrlKey) {\n            // Allow individual date toggling if we are allowing multi ranges\n            // or there's no current selection, or they are on, or adjacent to the range end\n            if (multiSelect === true || !size || clickedRangeEnd) {\n                _selection[toggleFn](date);\n                // Check that the start hasn't been deselected\n                if (singleRange && !_selection.has(me.rangeStartDate)) {\n                    me.rangeStartDate.setDate(me.rangeStartDate.getDate() + (date < selection[1] ? 1 : -1));\n                }\n            }\n        }\n        // Shift+click means add a range\n        else if (event.shiftKey && size) {\n            const [start, end] = [\n                new Date(singleRange ? (me.rangeStartDate || (me.rangeStartDate = selection[0])) : lastClickedDate),\n                date\n            ].sort(dateSort);\n            // If we can only have one range\n            if (singleRange) {\n                _selection.clear();\n            }\n            // Add all dates in the range\n            for (const d = start; d <= end; d.setDate(d.getDate() + 1)) {\n                _selection.add(d);\n            }\n        }\n        // Make the clicked date the only selected date.\n        // Avoid a no-op which would still cause a generation change\n        else if (!(_selection.has(date) && _selection.size === 1)) {\n            _selection.clear();\n            _selection.add(date);\n        }\n        const newSize = _selection.size;\n        // Keep track of the range start date. The first selected date is the start and the end then\n        // can move to either side of that.\n        if (newSize === 1) {\n            me.rangeStartDate = date;\n        }\n        else if (!newSize) {\n            me.rangeStartDate = null;\n        }\n        // Process selection change if we changed the selection.\n        if (_selection.generation !== generation) {\n            me.updateSelection(_selection);\n        }\n    }\n    changeSelection(selection) {\n        // We always need a _selection property to be a DateSet.\n        // Falsy selection value means empty DateSet.\n        const me = this;\n        let result, rangeStartDate;\n        if (selection) {\n            // Convert single Date into Array\n            if (!selection.forEach) {\n                selection = [selection];\n            }\n            // Clamp selection into range. May duplicate, but the Set will dedupe.\n            selection.forEach((d, i) => selection[i] = me.changeDate(d));\n            // Cache the first date, regardless of sort order for use as the \"clicked date\"\n            // around which the range revolves when shift+click is used.\n            rangeStartDate = selection[0];\n            selection.sort(dateSort);\n            // A two element array means a start and end\n            if (me.multiSelect === 'range' && selection.length === 2) {\n                result = new DateSet();\n                for (const d = new Date(selection[0]); d <= selection[1]; d.setDate(d.getDate() + 1)) {\n                    result.add(d);\n                }\n            }\n            else {\n                // Multi dates may be in any order, so use the temporally first date as range start\n                rangeStartDate = selection[0];\n                result = new DateSet(selection);\n            }\n        }\n        else {\n            result = new DateSet();\n        }\n        if (rangeStartDate) {\n            me.activeDate = me.rangeStartDate = DateHelper.clearTime(rangeStartDate);\n        }\n        return result;\n    }\n    updateMultiSelect(multiSelect) {\n        this.element.classList.toggle('b-multiselect', Boolean(multiSelect));\n        if (!multiSelect) {\n            this.selection = [...this.selection][0];\n        }\n    }\n    updateSelection(dateSet) {\n        const\n            me        = this,\n            { dates } = dateSet,\n            selection = me.multiSelect === 'range' ? [dates[0], dates[dates.length - 1]] : dates;\n        // \"date\" property must be seen to be the selected date.\n        dates.length && (me.date = dates[0]);\n        if (!me.isConfiguring) {\n            // We're going to announce the change. UI must be up to date\n            me.refresh.now();\n            /**\n             * Fires when a date or date range is selected. If {@link #config-multiSelect} is specified,\n             * this will fire upon deselection and selection of dates.\n             * @event selectionChange\n             * @param {Date[]} selection The selected date. If {@link #config-multiSelect} is specified\n             * this may be a two element array specifying start and end dates.\n             * @param {Boolean} userAction This will be `true` if the change was caused by user interaction\n             * as opposed to programmatic setting.\n             */\n            me.trigger('selectionChange', {\n                selection,\n                userAction : Boolean(me.activatingEvent)\n            });\n        }\n    }\n    /**\n     * The selected Date(s).\n     *\n     * When {@link #config-multiSelect} is `'range'`, then this yields a two element array\n     * representing the start and end of the selected range.\n     *\n     * When {@link #config-multiSelect} is `true`, this yields an array containing every selected\n     * Date.\n     * @member {Date[]} selection\n     */\n    get selection() {\n        const\n            { _selection } = this,\n            dates          = _selection ? _selection.dates : emptyArray;\n        return this.multiSelect === 'range' && dates.length ? [dates[0], dates[dates.length - 1]] : dates;\n    }\n    onInternalKeyDown(keyEvent) {\n        const\n            me         = this,\n            keyName    = keyEvent.key.trim() || keyEvent.code,\n            activeDate = me.activeDate;\n        let newDate    = new Date(activeDate);\n        if (keyName === 'Escape' && me.floating) {\n            return me.hide();\n        }\n        // Only navigate if not focused on one of our child widgets.\n        // We have a prevMonth and nextMonth tool and possibly month and year pickers.\n        if (activeDate && me.weeksElement.contains(keyEvent.target)) {\n            do {\n                switch (keyName) {\n                    case 'ArrowLeft':\n                        // Disable browser use of this key.\n                        // Ctrl+ArrowLeft navigates back.\n                        // ArrowLeft scrolls if there is horizontal scroll.\n                        keyEvent.preventDefault();\n                        if (keyEvent.ctrlKey) {\n                            newDate = me.gotoPrevMonth();\n                        }\n                        else {\n                            newDate.setDate(newDate.getDate() - 1);\n                        }\n                        break;\n                    case 'ArrowUp':\n                        // Disable browser use of this key.\n                        // ArrowUp scrolls if there is vertical scroll.\n                        keyEvent.preventDefault();\n                        newDate.setDate(newDate.getDate() - 7);\n                        break;\n                    case 'ArrowRight':\n                        // Disable browser use of this key.\n                        // Ctrl+ArrowRight navigates forwards.\n                        // ArrowRight scrolls if there is horizontal scroll.\n                        keyEvent.preventDefault();\n                        if (keyEvent.ctrlKey) {\n                            newDate = me.gotoNextMonth();\n                        }\n                        else {\n                            newDate.setDate(newDate.getDate() + 1);\n                        }\n                        break;\n                    case 'ArrowDown':\n                        // Disable browser use of this key.\n                        // ArrowDown scrolls if there is vertical scroll.\n                        keyEvent.preventDefault();\n                        newDate.setDate(newDate.getDate() + 7);\n                        break;\n                    case 'Enter':\n                        return me.onUIDateSelect(activeDate, keyEvent);\n                }\n            } while (me.isDisabledDate(newDate) && !me.focusDisabledDates);\n            // Don't allow navigation to outside of date bounds.\n            if (me.minDate && newDate < me.minDate) {\n                return;\n            }\n            if (me.maxDate && newDate > me.maxDate) {\n                return;\n            }\n            me.activeDate = newDate;\n        }\n    }\n    changeMinDate(minDate) {\n        // Avoid changeDate which clamps incoming value into current allowable range\n        return minDate && CalendarPanel.prototype.changeDate.apply(this, arguments);\n    }\n    updateMinDate(minDate) {\n        this._yearpicker && (this._yearpicker.minYear = minDate?.getFullYear());\n        this.refresh();\n    }\n    changeMaxDate(minDate) {\n        // Avoid changeDate which clamps incoming value into current allowable range\n        return minDate && CalendarPanel.prototype.changeDate.apply(this, arguments);\n    }\n    updateMaxDate(maxDate) {\n        this._yearpicker && (this._yearpicker.maxYear = maxDate?.getFullYear());\n        this.refresh();\n    }\n    changeDate(date) {\n        return DateHelper.clamp(super.changeDate(date), this.minDate, this.maxDate);\n    }\n    updateDate(date, oldDate) {\n        const\n            me        = this,\n            { month } = me;\n        // Directly configuring a date creates the selection\n        me.isConfiguring && !me.initializingActiveDate && (me.selection = date);\n        // Only change the month's date if it is within our current month\n        // or we have to because we don't have a cell for it.\n        // If it's a date in the \"otherMonth\" part of the grid, do not update.\n        if (!month.date || date.getMonth() === month.month || !me.getCell(date) || me.alwaysRefreshOnMonthChange || me.isNavigating) {\n            super.updateDate(date);\n        }\n        else {\n            const\n                newMonth = month.getOtherMonth(date),\n                // Collect changes as bitwise flags:\n                // 0001 = date has changed.\n                // 0010 = week has changed.\n                // 0100 = month has changed.\n                // 1000 = year has changed.\n                // We need this because 10/1/2010 -> 10/1/2011 must fire a dateChange\n                // and a monthChange in addition to the yearChange.\n                // And 10/1/2010 -> 10/2/2010 must fire a dateChange in addition to the monthChange.\n                changes  = me.eventListeners && (oldDate ? (\n                    date.getDate()            !== oldDate.getDate())             |\n                    (newMonth.getWeekId(date) !== month.getWeekId(oldDate)) << 1 |\n                    (date.getMonth()          !== oldDate?.getMonth())      << 2 |\n                    (date.getFullYear()       !== oldDate?.getFullYear())   << 3 : 15);\n            me.trigger('dateChange', {\n                changes : {\n                    d : true,\n                    w : Boolean(changes & 2),\n                    m : Boolean(changes & 12),\n                    y : Boolean(changes & 8),\n                    r : newMonth.weekCount !== month.weekCount\n                },\n                value    : date,\n                oldValue : oldDate\n            });\n        }\n    }\n    changeActiveDate(activeDate, oldActiveDate) {\n        if (this.trigger('beforeActiveDateChange', { activeDate, oldActiveDate }) === false) {\n            return;\n        }\n        activeDate = activeDate ? this.changeDate(activeDate) : this.date || (this.date = DateHelper.clearTime(new Date()));\n        if (isNaN(activeDate)) {\n            throw new Error('DatePicker date ingestion must be passed a Date, or a YYYY-MM-DD date string');\n        }\n        return DateHelper.clamp(activeDate, this.minDate, this.maxDate);\n    }\n    updateActiveDate(activeDate, wasActiveDate) {\n        const\n            me                = this,\n            { isConfiguring } = me;\n        if (isConfiguring || !me.getCell(activeDate)) {\n            me.initializingActiveDate = isConfiguring;\n            me.date = activeDate;\n            me.initializingActiveDate = false;\n        }\n        if (!isConfiguring && !me.refresh.isPending) {\n            me.syncActiveDate(activeDate, wasActiveDate);\n        }\n    }\n    syncActiveDate(activeDate, wasActiveDate) {\n        const\n            me            = this,\n            { activeCls } = me,\n            activeCell    = me.getCell(activeDate),\n            wasActiveCell = wasActiveDate && me.getCell(wasActiveDate),\n            activeElement = DomHelper.getActiveElement(me.element);\n        activeCell.setAttribute('tabIndex', 0);\n        activeCls && activeCell.classList.add(activeCls);\n        activeCell.id = `${me.id}-active-day`;\n        if (me.weeksElement.contains(activeElement) /*|| me.owner?.element.contains(activeElement)*/) {\n            activeCell.focus();\n        }\n        if (wasActiveCell && wasActiveCell !== activeCell) {\n            wasActiveCell.removeAttribute('tabIndex');\n            activeCls && wasActiveCell.classList.remove(activeCls);\n            wasActiveCell.removeAttribute('id');\n        }\n    }\n    set value(value) {\n        const\n            me = this,\n            {\n                selection,\n                duration\n            }  = me;\n        if (value) {\n            value = me.changeDate(value, me.value);\n            // If we're maintaining a single date range, move the range\n            if (me.multiSelect === 'range' && selection?.length === 2) {\n                if (!DateHelper.betweenLesserEqual(value, ...selection)) {\n                    // Move range back to encapsulate date\n                    if (value < selection[0]) {\n                        me.selection = [value, DateHelper.add(value, duration - 1, 'd')];\n                    }\n                    // Move range forwards to encapsulate date\n                    else {\n                        me.selection = [DateHelper.add(value, -(duration - 1), 'd'), value];\n                    }\n                }\n                me.date = me.activeDate = value;\n                return;\n            }\n            // Undefined return value means no change\n            if (value !== undefined) {\n                me.selection = value;\n            }\n        }\n        else {\n            // Clearing the value - go to today's calendar\n            me.date = new Date();\n            me.selection = null;\n        }\n    }\n    get value() {\n        return this.selection[this.selection.length - 1];\n    }\n    get duration() {\n        return this.multiSelect === 'range' ? DateHelper.diff(...this.selection, 'd') + 1 : 1;\n    }\n    gotoPrevYear() {\n        return this.goto(-1, 'year');\n    }\n    gotoPrevMonth() {\n        return this.goto(-1, 'month');\n    }\n    gotoNextMonth() {\n        return this.goto(1, 'month');\n    }\n    gotoNextYear() {\n        return this.goto(1, 'year');\n    }\n    goto(direction, unit) {\n        const\n            me                  = this,\n            { activeDate }      = me,\n            activeCell          = activeDate && me.getCell(activeDate);\n        let newDate;\n        // If active date is already in the month we're going to, use it\n        if (unit === 'month' && activeCell && activeDate?.getMonth() === me.month.month + direction) {\n            newDate = activeDate;\n        }\n        // Move the date by the requested unit\n        else {\n            newDate = DateHelper.add(activeCell ? activeDate : me.date, direction, unit);\n        }\n        const firstDateOfNewMonth = new Date(newDate);\n        firstDateOfNewMonth.setDate(1);\n        const lastDateOfNewMonth  = DateHelper.add(DateHelper.add(firstDateOfNewMonth, 1, 'month'), -1, 'day');\n        // Don't navigate if month is outside bounds\n        if ((me.minDate && direction < 0 && lastDateOfNewMonth < me.minDate) || (me.maxDate && direction > 0 && firstDateOfNewMonth > me.maxDate)) {\n            return;\n        }\n        // We need to force a UI change even if the UI contains the target date.\n        // updateDate always calls super and CalendarPanel will refresh\n        me.isNavigating = true;\n        const result = me.date = newDate;\n        if (activeCell) {\n            me.activeDate = newDate;\n        }\n        me.isNavigating = false;\n        return result;\n    }\n    isActiveDate(date) {\n        return !(date - this.activeDate);\n    }\n    isSelectedDate(date) {\n        return this._selection?.has(date);\n    }\n    onMonthPicked({ record, userAction }) {\n        if (userAction) {\n            this.activeDate = DateHelper.add(this.activeDate, record.value - this.activeDate.getMonth(), 'month');\n            this.focusElement?.focus();\n        }\n    }\n    onYearPickerRequested() {\n        const { yearPicker } = this;\n        if (yearPicker.isVisible) {\n            yearPicker.hide();\n        }\n        else {\n            yearPicker.year = yearPicker.startYear = this.activeDate.getFullYear();\n            yearPicker.show();\n            yearPicker.focus();\n        }\n    }\n    onYearPickerTitleClick() {\n        this.yearPicker.hide();\n    }\n    onYearPicked({ value, source }) {\n        const newDate = new Date(this.activeDate);\n        newDate.setFullYear(value);\n        this.activeDate = newDate;\n        // Move focus without scroll *before* focus reversion from the hide.\n        // Browser behaviour of scrolling to focused element would break animation.\n        this.focusElement && DomHelper.focusWithoutScrolling(this.focusElement);\n        source.hide();\n    }\n    changeYearPicker(yearPicker, oldYearPicker) {\n        return YearPicker.reconfigure(oldYearPicker, yearPicker ? YearPicker.mergeConfigs({\n            owner    : this,\n            appendTo : this.element,\n            minYear  : this.minDate?.getFullYear(),\n            maxYear  : this.maxDate?.getFullYear()\n        }, yearPicker) : null, this);\n    }\n    get childItems() {\n        const\n            { _yearPicker } = this,\n            result          = super.childItems;\n        if (_yearPicker) {\n            result.push(_yearPicker);\n        }\n        return result;\n    }\n    updateLocalization() {\n        const\n            {\n                monthField\n            }          = this.widgetMap,\n            newData    = generateMonthNames();\n        if (!this.isConfiguring && !newData.every((d, i) => d[1] === monthField.store.getAt(i).text)) {\n            newData[monthField.value ?? this.date.getMonth()].selected = true;\n            monthField.items = newData;\n        }\n        super.updateLocalization();\n    }\n}\n// Dates are never equal, so raw Set won't work.\nclass DateSet extends Set {\n    add(d) {\n        d = DateHelper.makeKey(d);\n        if (!this.has(d)) {\n            this.generation = (this.generation || 0) + 1;\n        }\n        return super.add(d);\n    }\n    delete(d) {\n        d = DateHelper.makeKey(d);\n        if (this.has(d)) {\n            this.generation++;\n        }\n        return super.delete(d);\n    }\n    has(d) {\n        return super.has(DateHelper.makeKey(d));\n    }\n    clear() {\n        if (this.size) {\n            this.generation++;\n        }\n        return super.clear();\n    }\n    equals(other) {\n        Array.isArray(other) && (other = new DateSet(other));\n        return (other.size === this.size) && [...this].every(s => other.has(s));\n    }\n    get dates() {\n        return [...this].sort().map(k => DateHelper.parseKey(k));\n    }\n}\n// Register this widget type with its Factory\nDatePicker.initClass();\nDatePicker._$name = 'DatePicker';", "import PickerField from './PickerField.js';\nimport DatePicker from './DatePicker.js';\nimport DH from '../helper/DateHelper.js';\n/**\n * @module Core/widget/DateField\n */\n/**\n * Date field widget (text field + date picker).\n *\n * This field can be used as an {@link Grid.column.Column#config-editor editor} for the {@link Grid.column.Column Column}.\n * It is used as the default editor for the {@link Grid.column.DateColumn DateColumn}.\n *\n * This widget may be operated using the keyboard. `ArrowDown` opens the date picker, which itself\n * is keyboard navigable. `Shift+ArrowDown` activates the {@link #config-step} back trigger.\n * `Shift+ArrowUp` activates the {@link #config-step} forwards trigger.\n *\n * ```javascript\n * // minimal DateField config with date format specified\n * let dateField = new DateField({\n *   format: 'YYMMDD'\n * });\n * ```\n *\n * {@inlineexample Core/widget/DateField.js}\n *\n * @extends Core/widget/PickerField\n * @classtype datefield\n * @classtypealias date\n * @inputfield\n */\nexport default class DateField extends PickerField {\n    //region Config\n    static $name = 'DateField';\n    static type = 'datefield';\n    static alias = 'date';\n    static get configurable() {\n        return {\n            /**\n             * Get / set format for date displayed in field (see {@link Core.helper.DateHelper#function-format-static}\n             * for formatting options).\n             * @member {String} format\n             */\n            /**\n             * Format for date displayed in field. Defaults to using long date format, as defined by current locale (`L`)\n             * @config {String}\n             * @default\n             */\n            format : 'L',\n            /**\n             * A flag which indicates whether the date parsing should be strict - meaning if the date\n             * is missing a year/month/day part - parsing fails.\n             *\n             * Turned off by default, meaning default values are substituted for missing parts.\n             *\n             * @config {Boolean}\n             * @default\n             */\n            strictParsing : false,\n            // same for all languages\n            fallbackFormat : 'YYYY-MM-DD',\n            timeFormat     : 'HH:mm:ss:SSS',\n            /**\n             * A flag which indicates what time should be used for selected date.\n             * `false` by default which means time is reset to midnight.\n             *\n             * Possible options are:\n             * - `false` to reset time to midnight\n             * - `true` to keep original time value\n             * - `'17:00'` a string which is parsed automatically\n             * - `new Date(2020, 0, 1, 17)` a date object to copy time from\n             * - `'entered'` to keep time value entered by user (in case {@link #config-format} includes time info)\n             *\n             * @config {Boolean|Date|String}\n             * @default\n             */\n            keepTime : false,\n            /**\n             * Format for date in the {@link #config-picker}. Uses localized format per default\n             * @config {String}\n             */\n            pickerFormat : null,\n            /**\n             * Set to true to first clear time of the field's value before comparing it to the max value\n             * @internal\n             * @config {Boolean}\n             */\n            validateDateOnly : null,\n            triggers : {\n                expand : {\n                    cls     : 'b-icon-calendar',\n                    handler : 'onTriggerClick',\n                    weight  : 200\n                },\n                back : {\n                    cls     : 'b-icon b-icon-angle-left b-step-trigger',\n                    key     : 'Shift+ArrowDown',\n                    handler : 'onBackClick',\n                    align   : 'start',\n                    weight  : 100\n                },\n                forward : {\n                    cls     : 'b-icon b-icon-angle-right b-step-trigger',\n                    key     : 'Shift+ArrowUp',\n                    handler : 'onForwardClick',\n                    align   : 'end',\n                    weight  : 100\n                }\n            },\n            // An optional extra CSS class to add to the picker container element\n            calendarContainerCls : '',\n            /**\n             * Get/set min value, which can be a Date or a string. If a string is specified, it will be converted using\n             * the specified {@link #config-format}.\n             * @member {Date} min\n             * @accepts {String|Date}\n             */\n            /**\n             * Min value\n             * @config {String|Date}\n             */\n            min : null,\n            /**\n             * Get/set max value, which can be a Date or a string. If a string is specified, it will be converted using\n             * the specified {@link #config-format}.\n             * @member {Date} max\n             * @accepts {String|Date}\n             */\n            /**\n             * Max value\n             * @config {String|Date}\n             */\n            max : null,\n            /**\n             * The `step` property may be set in object form specifying two properties, `magnitude`, a Number, and\n             * `unit`, a String.\n             *\n             * If a Number is passed, the step's current unit is used (or `day` if no current step set) and just the\n             * magnitude is changed.\n             *\n             * If a String is passed, it is parsed by {@link Core.helper.DateHelper#function-parseDuration-static}, for\n             * example `'1d'`, `'1 d'`, `'1 day'`, or `'1 day'`.\n             *\n             * Upon read, the value is always returned in object form containing `magnitude` and `unit`.\n             * @member {DurationConfig} step\n             * @accepts {String|Number|DurationConfig}\n             */\n            /**\n             * Time increment duration value. If specified, `forward` and `back` triggers are displayed.\n             * The value is taken to be a string consisting of the numeric magnitude and the units.\n             * The units may be a recognised unit abbreviation of this locale or the full local unit name.\n             * For example `'1d'` or `'1w'` or `'1 week'`. This may be specified as an object containing\n             * two properties: `magnitude`, a Number, and `unit`, a String\n             * @config {String|Number|DurationConfig}\n             */\n            step : false,\n            stepTriggers : null,\n            /**\n             * The week start day in the {@link #config-picker}, 0 meaning Sunday, 6 meaning Saturday.\n             * Uses localized value per default.\n             * @config {Number}\n             */\n            weekStartDay : null,\n            /**\n             * A config object used to configure the {@link Core.widget.DatePicker datePicker}.\n             * ```javascript\n             * dateField = new DateField({\n             *      picker    : {\n             *          multiSelect : true\n             *      }\n             *  });\n             * ```\n             * @config {DatePickerConfig}\n             */\n            picker : {\n                type         : 'datepicker',\n                role         : 'dialog',\n                floating     : true,\n                scrollAction : 'realign',\n                align        : {\n                    align    : 't0-b0',\n                    axisLock : true\n                }\n            },\n            /**\n             * Get/set value, which can be set as a Date or a string but always returns a Date. If a string is\n             * specified, it will be converted using the specified {@link #config-format}\n             * @member {Date} value\n             * @accepts {String|Date}\n             */\n            /**\n             * Value, which can be a Date or a string. If a string is specified, it will be converted using the\n             * specified {@link #config-format}\n             * @config {String|Date}\n             */\n            value : null\n        };\n    }\n    //endregion\n    //region Init & destroy\n    /**\n     * Creates default picker widget\n     *\n     * @internal\n     */\n    changePicker(picker, oldPicker) {\n        const\n            me       = this,\n            defaults = {\n                owner        : me,\n                forElement   : me[me.pickerAlignElement],\n                minDate      : me.min,\n                maxDate      : me.max,\n                weekStartDay : me._weekStartDay, // need to pass the raw value to let the component to use its default value\n                align : {\n                    anchor : me.overlayAnchor,\n                    target : me[me.pickerAlignElement]\n                },\n                onSelectionChange : ({ selection, source : picker }) => {\n                    // We only care about what DatePicker does if it has been opened\n                    if (picker.isVisible) {\n                        me._isUserAction = me._isPickerInput = true;\n                        me.value = me.value ? DH.copyTimeValues(new Date(selection[0]), me.value) : new Date(selection[0]);\n                        me._isPickerInput = me._isUserAction = false;\n                        picker.hide();\n                    }\n                }\n            };\n        if (me.calendarContainerCls) {\n            defaults.cls = me.calendarContainerCls;\n        }\n        // If we are in cleared state, the picker will also have no value.\n        // But have it focused on today as a default.\n        if (me.value) {\n            defaults.value = me.value;\n        }\n        else {\n            defaults.activeDate = new Date();\n        }\n        const result = DatePicker.reconfigure(oldPicker, picker, {\n            owner : me,\n            defaults\n        });\n        // Cells must exist early\n        result?.refresh.flush();\n        return result;\n    }\n    //endregion\n    //region Click listeners\n    get backShiftDate() {\n        return DH.add(this.value, -1 * this._step.magnitude, this._step.unit);\n    }\n    onBackClick() {\n        const\n            me      = this,\n            { min } = me;\n        if (!me.readOnly && me.value) {\n            const newValue = me.backShiftDate;\n            if (!min || min.getTime() <= newValue) {\n                me._isUserAction = true;\n                me.value = newValue;\n                me._isUserAction = false;\n            }\n        }\n    }\n    get forwardShiftDate() {\n        return DH.add(this.value, this._step.magnitude, this._step.unit);\n    }\n    onForwardClick() {\n        const\n            me      = this,\n            { max } = me;\n        if (!me.readOnly && me.value) {\n            const newValue = me.forwardShiftDate;\n            if (!max || max.getTime() >= newValue) {\n                me._isUserAction = true;\n                me.value = newValue;\n                me._isUserAction = false;\n            }\n        }\n    }\n    //endregion\n    //region Toggle picker\n    showPicker(focusPicker) {\n        if (this.readOnly) {\n            return;\n        }\n        const\n            me           = this,\n            { _picker }  = me;\n        // If it's already instanced, navigate it to our date, or default of today.\n        // It will be initialized correctly if not.\n        if (_picker) {\n            // In case a subclass uses a min getter (which does not update our min value) - ensure picker is correctly configured\n            const pickerConfig = {\n                minDate : me.min,\n                maxDate : me.max\n            };\n            if (me.value) {\n                pickerConfig.value = me.value;\n            }\n            // If the field is cleared, show today's Calendar in the picker\n            // unless it's already been navigated elsewhere.\n            else if (!_picker.activeDate) {\n                pickerConfig.activeDate = new Date();\n            }\n            // Config dependencies are correctly processed by setConfig\n            _picker.setConfig(pickerConfig);\n        }\n        super.showPicker(focusPicker);\n    }\n    focusPicker() {\n        this.picker.focus();\n    }\n    //endregion\n    // region Validation\n    get isValid() {\n        const me  = this;\n        me.clearError('L{Field.minimumValueViolation}', true);\n        me.clearError('L{Field.maximumValueViolation}', true);\n        let value = me.value;\n        if (value) {\n            const { min, max, validateDateOnly } = me;\n            // Validation of the date should only care about the date part\n            if (validateDateOnly) {\n                value = DH.clearTime(value, false);\n            }\n            if (min && value < min) {\n                me.setError('L{Field.minimumValueViolation}', true);\n                return false;\n            }\n            if (max && value > max) {\n                me.setError('L{Field.maximumValueViolation}', true);\n                return false;\n            }\n        }\n        return super.isValid;\n    }\n    //endregion\n    //region Getters/setters\n    transformDateValue(value, checkBounds = true) {\n        const me = this;\n        if (value != null) {\n            if (!DH.isDate(value)) {\n                if (typeof value === 'string') {\n                    // If date cannot be parsed with set format, try fallback - the more general one\n                    value = DH.parse(value, me.format, me.strictParsing) || DH.parse(value, me.fallbackFormat, me.strictParsing);\n                }\n                else {\n                    value = new Date(value);\n                }\n            }\n            // We insist on a *valid* Date as the value\n            if (DH.isValidDate(value)) {\n                if (checkBounds && (!me.min || (value - me.min > -DH.MS_PER_DAY)) && (!me.max || value <= me.max)) {\n                    return me.transformTimeValue(value);\n                }\n                return value;\n            }\n        }\n        return null;\n    }\n    transformTimeValue(value) {\n        const\n            me = this,\n            { keepTime } = me;\n        value = DH.clone(value);\n        if (!keepTime) {\n            DH.clearTime(value, false);\n        }\n        // change time if keepTime !== 'entered'\n        else if (keepTime !== 'entered' && keepTime !== true) {\n            const timeValue = DH.parse(keepTime, me.timeFormat);\n            // if this.keepTime is a valid date or a string describing valid time copy from it\n            if (DH.isValidDate(timeValue)) {\n                DH.copyTimeValues(value, timeValue);\n            }\n            // otherwise try to copy from the current value\n            else if (DH.isValidDate(me.value)) {\n                DH.copyTimeValues(value, me.value);\n            }\n        }\n        // if keepTime === 'entered' and picker is used apply current value time\n        else if (keepTime === true && (me._isPickerInput || me.inputting) && DH.isValidDate(me.value)) {\n            DH.copyTimeValues(value, me.value);\n        }\n        // else don't change time\n        return value;\n    }\n    changeMin(value) {\n        return this.transformDateValue(value, false);\n    }\n    updateMin(min) {\n        const { input, _picker } = this;\n        if (input) {\n            if (min == null) {\n                input.removeAttribute('min');\n            }\n            else {\n                input.min = min;\n            }\n        }\n        // See if our lazy config has been realized...\n        if (_picker) {\n            _picker.minDate = min;\n        }\n        this.syncInvalid();\n    }\n    changeMax(value) {\n        return this.transformDateValue(value, false);\n    }\n    updateMax(max) {\n        const { input, _picker } = this;\n        if (input) {\n            if (max == null) {\n                input.removeAttribute('max');\n            }\n            else {\n                input.max = max;\n            }\n        }\n        if (_picker) {\n            _picker.maxDate = max;\n        }\n        this.syncInvalid();\n    }\n    get weekStartDay() {\n        // This trick allows our weekStartDay to float w/the locale even if the locale changes\n        return typeof this._weekStartDay === 'number' ? this._weekStartDay : DH.weekStartDay;\n    }\n    updateWeekStartDay(weekStartDay) {\n        if (this._picker) {\n            this._picker.weekStartDay = weekStartDay;\n        }\n    }\n    changeValue(value, oldValue) {\n        const\n            me = this,\n            newValue = me.transformDateValue(value);\n        // A value we could not parse\n        if (value && !newValue) {\n            // setError uses localization\n            me.setError('L{invalidDate}');\n            return;\n        }\n        me.clearError('L{invalidDate}');\n        // Reject non-change\n        if (me.hasChanged(oldValue, newValue)) {\n            return super.changeValue(newValue, oldValue);\n        }\n        // But we must fix up the display in case it was an unparseable string\n        // and the value therefore did not change.\n        if (!me.inputting) {\n            me.syncInputFieldValue();\n        }\n    }\n    updateValue(value, oldValue) {\n        const picker = this._picker;\n        if (picker && !this.inputting) {\n            picker.value = picker.activeDate = value;\n        }\n        super.updateValue(value, oldValue);\n    }\n    changeStep(value, was) {\n        const type = typeof value;\n        if (!value) {\n            return null;\n        }\n        if (type === 'number') {\n            value = {\n                magnitude : Math.abs(value),\n                unit      : was ? was.unit : 'day'\n            };\n        }\n        else if (type === 'string') {\n            value = DH.parseDuration(value);\n        }\n        if (value && value.unit && value.magnitude) {\n            if (value.magnitude < 0) {\n                value = {\n                    magnitude : -value.magnitude,  // Math.abs\n                    unit      : value.unit\n                };\n            }\n            return value;\n        }\n    }\n    updateStep(value) {\n        // If a step is configured, show the steppers\n        this.element.classList[value ? 'remove' : 'add']('b-no-steppers');\n        this.syncInvalid();\n    }\n    hasChanged(oldValue, newValue) {\n        // if both dates are provided and the field does not has time info in its format\n        if (oldValue?.getTime && newValue?.getTime && this.keepTime !== 'entered' && this.keepTime !== true) {\n            // Only compare date part\n            return !DH.isEqual(DH.clearTime(oldValue), DH.clearTime(newValue));\n        }\n        return super.hasChanged(oldValue && oldValue.getTime(), newValue && newValue.getTime());\n    }\n    get inputValue() {\n        // Do not use the _value property. If called during configuration, this\n        // will import the configured value from the config object.\n        const date = this.value;\n        return date ? DH.format(date, this.format) : '';\n    }\n    updateFormat() {\n        if (!this.isConfiguring) {\n            this.syncInputFieldValue(true);\n        }\n    }\n    //endregion\n    //region Localization\n    updateLocalization() {\n        super.updateLocalization();\n        this.syncInputFieldValue(true);\n    }\n    //endregion\n    //region Other\n    internalOnKeyEvent(event) {\n        super.internalOnKeyEvent(event);\n        if (event.key === 'Enter' && this.isValid) {\n            this.picker.hide();\n        }\n    }\n    //endregion\n}\n// Register this widget type with its Factory\nDateField.initClass();\nDateField._$name = 'DateField';", "import Field from './Field.js';\nimport NumberFormat from '../helper/util/NumberFormat.js';\nimport EventHelper from '../helper/EventHelper.js';\nimport BrowserHelper from '../helper/BrowserHelper.js';\n/**\n * @module Core/widget/NumberField\n */\nconst preventDefault = e => e.ctrlKey && e.preventDefault();\n/**\n * Number field widget. Similar to native `<input type=\"number\">`, but implemented as `<input type=\"text\">` to support\n * formatting.\n *\n * This field can be used as an {@link Grid/column/Column#config-editor} for the {@link Grid/column/Column}.\n * It is used as the default editor for the {@link Grid/column/NumberColumn},\n * {@link Grid/column/PercentColumn}, {@link Grid/column/AggregateColumn}.\n *\n * ```javascript\n * const number = new NumberField({\n *     min   : 1,\n *     max   : 5,\n *     value : 3\n * });\n * ```\n *\n * Provide a {@link Core/helper/util/NumberFormat} config as {@link #config-format} to be able to show currency. For\n * example:\n *\n * ```javascript\n * new NumberField({\n *   format : {\n *      style    : 'currency',\n *      currency : 'USD'\n *   }\n * });\n * ```\n *\n * {@inlineexample Core/widget/NumberField.js}\n *\n * @extends Core/widget/Field\n * @classtype numberfield\n * @classtypealias number\n * @inputfield\n */\nexport default class NumberField extends Field {\n    //region Config\n    static $name = 'NumberField';\n    static type = 'numberfield';\n    static alias = 'number';\n    static get configurable() {\n        return {\n            /**\n             * Reset to min value when max value is reached using steppers, and vice-versa.\n             * @config {Boolean}\n             * @default false\n             */\n            wrapAround : null,\n            /**\n             * Min value\n             * @config {Number}\n             */\n            min : null,\n            /**\n             * Max value\n             * @config {Number}\n             */\n            max : null,\n            /**\n             * Step size for spin button clicks.\n             * @member {Number} step\n             */\n            /**\n             * Step size for spin button clicks. Also used when pressing up/down keys in the field.\n             * @config {Number}\n             * @default\n             */\n            step : 1,\n            /**\n             * Large step size, defaults to 10 * `step`. Applied when pressing SHIFT and stepping either by click or\n             * using keyboard.\n             * @config {Number}\n             * @default 10\n             */\n            largeStep : 0,\n            /**\n             * Initial value\n             * @config {Number}\n             */\n            value : null,\n            /**\n             * The format to use for rendering numbers.\n             *\n             * For example:\n             * ```\n             *  format: '9,999.00##'\n             * ```\n             * The above enables digit grouping and will display at least 2 (but no more than 4) fractional digits.\n             * @config {String|NumberFormatConfig}\n             * @default\n             */\n            format : '',\n            /**\n             * The number of decimal places to allow. Defaults to no constraint.\n             *\n             * This config has been replaced by {@link #config-format}. Instead of this:\n             *```\n             *  decimalPrecision : 3\n             *```\n             * Use `format`:\n             *```\n             *  format : '9.###'\n             *```\n             * To set both `decimalPrecision` and `leadingZeroes` (say to `3`), do this:\n             *```\n             *  format : '3>9.###'\n             *```\n             * @config {Number}\n             * @default\n             * @deprecated Since 3.1. Use {@link #config-format} instead.\n             */\n            decimalPrecision : null,\n            /**\n             * The maximum number of leading zeroes to show. Defaults to no constraint.\n             *\n             * This config has been replaced by {@link #config-format}. Instead of this:\n             *```\n             *  leadingZeros : 3\n             *```\n             * Use `format`:\n             *```\n             *  format : '3>9'\n             *```\n             * To set both `leadingZeroes` and `decimalPrecision` (say to `2`), do this:\n             *```\n             *  format : '3>9.##'\n             *```\n             * @config {Number}\n             * @default\n             * @deprecated Since 3.1. Use {@link #config-format} instead.\n             */\n            leadingZeroes : null,\n            triggers : {\n                spin : {\n                    type : 'spintrigger'\n                }\n            },\n            /**\n             * Controls how change events are triggered when stepping the value up or down using either spinners or\n             * arrow keys.\n             *\n             * Configure with:\n             * * `true` to trigger a change event per step\n             * * `false` to not trigger change while stepping. Will trigger on blur/Enter\n             * * A number of milliseconds to buffer the change event, triggering when no steps are performed during that\n             *   period of time.\n             *\n             * @config {Boolean|Number}\n             * @default\n             */\n            changeOnSpin : true,\n            // NOTE: using type=\"number\" has several trade-offs:\n            //\n            // Negatives:\n            //   - No access to caretPos/textSelection. This causes anomalies when replacing\n            //     the input value with a formatted version of that value (the caret moves to\n            //     the end of the input el on each character typed).\n            //   - The above also prevents Siesta/synthetic events from mimicking typing.\n            //   - Thousand separators cannot be displayed (input.value = '1,000' throws an\n            //     exception).\n            // Positives:\n            //   - On mobile, the virtual keyboard only shows digits et al.\n            //   - validity property on DOM node that handles min/max checks.\n            //\n            // The above may not be exhaustive, but there is not a compelling reason to\n            // use type=\"number\" except on mobile.\n            /**\n             * This can be set to `'number'` to enable the numeric virtual keyboard on\n             * mobile devices. Doing so limits this component's ability to handle keystrokes\n             * and format properly as the user types, so this is not recommended for\n             * desktop applications. This will also limit similar features of automated\n             * testing tools that mimic user input.\n             * @config {String}\n             * @default text\n             */\n            inputType : null\n        };\n    }\n    //endregion\n    //region Init\n    construct(config) {\n        super.construct(config);\n        const me = this;\n        // Support for selecting all by double click in empty input area\n        // Browsers work differently at this case\n        me.input.addEventListener('dblclick', () => {\n            me.select();\n        });\n        if (typeof me.changeOnSpin === 'number') {\n            me.bufferedSpinChange = me.buffer(me.triggerChange, me.changeOnSpin);\n        }\n    }\n    //endregion\n    //region Internal functions\n    acceptValue(value, rawValue) {\n        let accept = !isNaN(value);\n        // https://github.com/bryntum/support/issues/1349\n        // Pass through if there is a text selection in the field. This fixes the case when\n        // valid value is typed already and we are replacing it by selecting complete string and typing over it.\n        // Cannot be tested in siesta, see ticket for more info.\n        if (accept && !this.hasTextSelection) {\n            accept = false;\n            const\n                raw = this.input.value,\n                current = parseFloat(raw);\n            if (raw !== rawValue) {\n                // The new value is out of range, but we accept it if the current value\n                // is also problematic. Consider the case where the input is empty and the\n                // minimum value is 100. The user must first type \"1\" and we must accept it\n                // if they are to get the opportunity to type the \"0\"s.\n                accept = !this.acceptValue(current, raw);\n                // Also, if we are checking the current value, be sure not to infinitely\n                // recurse here.\n            }\n        }\n        return accept;\n    }\n    okMax(value) {\n        return isNaN(this.max) || value <= this.max;\n    }\n    okMin(value) {\n        return isNaN(this.min) || value >= this.min;\n    }\n    internalOnKeyEvent(e) {\n        if (e.type === 'keydown') {\n            const\n                me = this,\n                key = e.key;\n            let block;\n            // Native arrow key spin behaviour differs between browsers, so we replace\n            // the native spinners w/our own triggers and handle arrows keys as well.\n            if (key === 'ArrowUp') {\n                me.doSpinUp(e.shiftKey);\n                block = true;\n            }\n            else if (key === 'ArrowDown') {\n                me.doSpinDown(e.shiftKey);\n                block = true;\n            }\n            else if (!e.altKey && !e.ctrlKey && key && key.length === 1) {\n                // The key property contains the character or key name... so ignore\n                // keys that aren't a single character.\n                const\n                    after      = me.getAfterValue(key),\n                    afterValue = me.formatter.parseStrict(after),\n                    // no need to check if typing same value or - if negative numbers are allowed\n                    accepted   = afterValue === me.value || (after === '-' && (isNaN(me.min) || me.min < 0));\n                block = !accepted && !me.acceptValue(afterValue, after);\n            }\n            if (key === 'Enter' && me._changedBySilentSpin) {\n                me.triggerChange(e, true);\n                // reset the flag\n                me._changedBySilentSpin = false;\n            }\n            if (block) {\n                e.preventDefault();\n            }\n        }\n        super.internalOnKeyEvent(e);\n    }\n    doSpinUp(largeStep = false) {\n        const me = this;\n        if (me.readOnly) {\n            return;\n        }\n        let newValue = (me.value || 0) + (largeStep ? me.largeStep : me.step);\n        if (!me.okMin(newValue)) {\n            newValue = me.min;\n        }\n        if (me.okMax(newValue)) {\n            me.applySpinChange(newValue);\n        }\n        else if (me.wrapAround) {\n            newValue = me.min;\n            me.applySpinChange(newValue);\n        }\n    }\n    doSpinDown(largeStep = false) {\n        const me = this;\n        if (me.readOnly) {\n            return;\n        }\n        let newValue = (me.value || 0) - (largeStep ? me.largeStep : me.step);\n        if (!me.okMax(newValue)) {\n            newValue = me.max;\n        }\n        if (me.okMin(newValue)) {\n            me.applySpinChange(newValue);\n        }\n        else if (me.wrapAround) {\n            newValue = me.max;\n            me.applySpinChange(newValue);\n        }\n    }\n    applySpinChange(newValue) {\n        const me = this;\n        me._isUserAction = true;\n        // Should not trigger change immediately?\n        if (me.changeOnSpin !== true) {\n            me._changedBySilentSpin = true;\n            // Silence the change\n            me.silenceChange = true;\n            // Optionally buffer the change\n            me.bufferedSpinChange && me.bufferedSpinChange(null, true);\n        }\n        me.value = newValue;\n        me._isUserAction = false;\n        me.silenceChange = false;\n    }\n    triggerChange() {\n        if (!this.silenceChange) {\n            super.triggerChange(...arguments);\n        }\n    }\n    onFocusOut(e) {\n        super.onFocusOut(...arguments);\n        const\n            me = this,\n            { input } = me,\n            raw = input.value,\n            value = me.formatter.truncate(raw),\n            formatted = isNaN(value) ? raw : me.formatValue(value);\n        // Triggers may have been reconfigured\n        me.triggers?.spin?.clickRepeater?.cancel();\n        me.lastTouchmove = null;\n        if (raw !== formatted) {\n            input.value = formatted;\n        }\n        if (me._changedBySilentSpin) {\n            me.triggerChange(e, true);\n            // reset the flag\n            me._changedBySilentSpin = false;\n        }\n    }\n    internalOnInput(event) {\n        const\n            me = this,\n            { formatter, input } = me,\n            { parser, maximumFractionDigits } = formatter,\n            raw = input.value,\n            decimals = parser.decimalPlaces(raw);\n        if (formatter.truncator && decimals > maximumFractionDigits) {\n            let value = raw,\n                valueDecimals;\n            const trunc = formatter.truncate(raw);\n            if (!isNaN(trunc)) {\n                value = me.formatValue(trunc);\n                valueDecimals = parser.decimalPlaces(value);\n                if (valueDecimals < maximumFractionDigits) {\n                    value += '0'.repeat(maximumFractionDigits - valueDecimals);\n                    valueDecimals = maximumFractionDigits;\n                }\n                if (valueDecimals < decimals) {\n                    // If typing (or pasting) has caused truncation, reset. To best preserve the caret pos (which is\n                    // reset by assigning input.value), we grab and restore the distance from the end. This allows\n                    // special things to format into the string (such as thousands separators) since they always go to\n                    // the front of the input.\n                    const pos = raw.length - me.caretPos;\n                    input.value = value;\n                    me.caretPos = value.length - pos + 1;\n                }\n            }\n        }\n        super.internalOnInput(event);\n    }\n    formatValue(value) {\n        return this.formatter.format(value);\n    }\n    changeFormat(format) {\n        const me = this;\n        if (format === '') {\n            const { leadingZeroes, decimalPrecision } = me;\n            format = leadingZeroes ? `${leadingZeroes}>9` : null;\n            if (decimalPrecision != null) {\n                format = `${format || ''}9.${'#'.repeat(decimalPrecision)}`;\n            }\n            else if (format) {\n                // When we only have leadingZeroes, we'll have a format like \"4>9\", but\n                // that will default to 3 decimal digits. Prior behavior implied no limit\n                // on decimal digits unless decimalPrecision was specified.\n                format += '.*';\n            }\n        }\n        return format;\n    }\n    get formatter() {\n        const\n            me = this,\n            format = me.format;\n        let formatter = me._formatter;\n        if (!formatter || me._lastFormat !== format) {\n            formatter = NumberFormat.get(me._lastFormat = format);\n            me._formatter = formatter;\n        }\n        return formatter;\n    }\n    //endregion\n    //region Getters/Setters\n    updateStep(step) {\n        const me = this;\n        me.element.classList.toggle('b-hide-spinner', !step);\n        me._step = step;\n        if (step && BrowserHelper.isMobile) {\n            if (!me.touchMoveListener) {\n                me.touchMoveListener = EventHelper.on({\n                    element   : me.input,\n                    touchmove : 'onInputSwipe',\n                    thisObj   : me,\n                    throttled : {\n                        buffer : 150,\n                        alt    : preventDefault\n                    }\n                });\n            }\n        }\n        else {\n            me.touchMoveListener?.();\n        }\n    }\n    onInputSwipe(e) {\n        const { lastTouchmove } = this;\n        if (lastTouchmove) {\n            const\n                // Swipe right/up means spin up, left/down means spin down\n                deltaX = e.screenX - lastTouchmove.screenX,\n                deltaY = lastTouchmove.screenY - e.screenY,\n                delta  = Math.abs(deltaX) > Math.abs(deltaY) ? deltaX : deltaY;\n            this[`doSpin${delta > 0 ? 'Up' : 'Down'}`]();\n        }\n        // Disable touch-scrolling\n        e.preventDefault();\n        this.lastTouchmove = e;\n    }\n    changeLargeStep(largeStep) {\n        return largeStep || (this.step * 10);\n    }\n    get validity() {\n        const\n            value    = this.value,\n            validity = {};\n        // Assert range for non-empty fields, empty fields will turn invalid if `required: true`\n        if (value != null) {\n            validity.rangeUnderflow = !this.okMin(value);\n            validity.rangeOverflow = !this.okMax(value);\n        }\n        validity.valid = !validity.rangeUnderflow && !validity.rangeOverflow;\n        return validity;\n    }\n    /**\n     * Get/set the NumberField's value, or `undefined` if the input field is empty\n     * @property {Number}\n     */\n    changeValue(value, was) {\n        const me = this;\n        if (value || value === 0) {\n            let valueIsNaN;\n            // We insist on a number as the value\n            if (typeof value !== 'number') {\n                value = (typeof value === 'string') ? me.formatter.parse(value) : Number(value);\n                valueIsNaN = isNaN(value);\n                if (valueIsNaN) {\n                    value = '';\n                }\n            }\n            if (!valueIsNaN && me.format) {\n                value = me.formatter.round(value);\n            }\n        }\n        else {\n            value = undefined;\n        }\n        return super.changeValue(value, was);\n    }\n    get inputValue() {\n        let value = this.value;\n        if (value != null && this.format) {\n            value = this.formatValue(value);\n        }\n        return value;\n    }\n    //endregion\n}\n// Register this widget type with its Factory\nNumberField.initClass();\nNumberField._$name = 'NumberField';", "// Needs to be a panel for focus management in Safari\nimport Panel from './Panel.js';\nimport DateHelper from '../helper/DateHelper.js';\nimport './ButtonGroup.js';\nimport './NumberField.js';\n/**\n * @module Core/widget/TimePicker\n */\n/**\n * A Panel which displays hour and minute number fields and AM/PM switcher buttons for 12 hour time format.\n *\n * ```javascript\n * new TimeField({\n *     label     : 'Time field',\n *     appendTo  : document.body,\n *     // Configure the time picker\n *     picker    : {\n *         items : {\n *             minute : {\n *                 step : 5\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * ## Contained widgets\n *\n * The default widgets contained in this picker are:\n *\n * | Widget ref | Type                            | Description                             |\n * |------------|---------------------------------|-----------------------------------------|\n * | `hour`     | {@link Core.widget.NumberField} | The hour field                          |\n * | `minute`   | {@link Core.widget.NumberField} | The minute field                        |\n * | `second`   | {@link Core.widget.NumberField} | The second field                        |\n * | `amPm`     | {@link Core.widget.ButtonGroup} | ButtonGroup holding the am & pm buttons |\n * | `amButton` | {@link Core.widget.Button}      | The am button                           |\n * | `pmButton` | {@link Core.widget.Button}      | The pm button                           |\n *\n * This class is not intended for use in applications. It is used internally by the {@link Core.widget.TimeField} class.\n *\n * @extends Core/widget/Panel\n * @classtype timepicker\n * @widget\n */\nexport default class TimePicker extends Panel {\n    //region Config\n    static $name = 'TimePicker';\n    static type = 'timepicker';\n    static configurable = {\n        floating : true,\n        layout   : 'hbox',\n        items    : {\n            hour : {\n                label                   : 'L{TimePicker.hour}',\n                type                    : 'number',\n                min                     : 0,\n                max                     : 23,\n                highlightExternalChange : false,\n                format                  : '2>9',\n                wrapAround              : true\n            },\n            minute : {\n                label                   : 'L{TimePicker.minute}',\n                type                    : 'number',\n                min                     : 0,\n                max                     : 59,\n                highlightExternalChange : false,\n                format                  : '2>9',\n                wrapAround              : true\n            },\n            second : {\n                hidden                  : true,\n                label                   : 'L{TimePicker.second}',\n                type                    : 'number',\n                min                     : 0,\n                max                     : 59,\n                highlightExternalChange : false,\n                format                  : '2>9',\n                wrapAround              : true\n            },\n            amPm : {\n                type  : 'buttongroup',\n                items : {\n                    amButton : {\n                        type        : 'button',\n                        text        : 'AM',\n                        toggleGroup : 'am-pm',\n                        cls         : 'b-blue',\n                        onClick     : 'up.onAmPmButtonClick'\n                    },\n                    pmButton : {\n                        type        : 'button',\n                        text        : 'PM',\n                        toggleGroup : 'am-pm',\n                        cls         : 'b-blue',\n                        onClick     : 'up.onAmPmButtonClick'\n                    }\n                }\n            }\n        },\n        autoShow : false,\n        trapFocus : true,\n        /**\n         * By default the seconds field is not displayed. If you require seconds to be visible,\n         * configure this as `true`\n         * @config {Boolean}\n         * @default false\n         */\n        seconds : null,\n        /**\n         * Time value, which can be a Date or a string. If a string is specified, it will be converted using the\n         * specified {@link #config-format}\n         * @prp {Date}\n         * @accepts {Date|String}\n         */\n        value : {\n            $config : {\n                equal : 'date'\n            },\n            value : null\n        },\n        /**\n         * Time format. Used to set appropriate 12/24 hour format to display.\n         * See {@link Core.helper.DateHelper#function-format-static DateHelper} for formatting options.\n         * @prp {String}\n         */\n        format : null,\n        /**\n         * Max value, which can be a Date or a string. If a string is specified, it will be converted using the\n         * specified {@link #config-format}\n         * @prp {Date}\n         * @accepts {Date|String}\n         */\n        max : null,\n        /**\n         * Min value, which can be a Date or a string. If a string is specified, it will be converted using the\n         * specified {@link #config-format}\n         * @prp {Date}\n         * @accepts {Date|String}\n         */\n        min : null,\n        /**\n         * Initial value, which can be a Date or a string. If a string is specified, it will be converted using the\n         * specified {@link #config-format}. Initial value is restored on Escape click\n         * @member {Date} initialValue\n         * @accepts {Date|String}\n         */\n        initialValue : null // Not documented as config on purpose, API was that way\n    };\n    //endregion\n    //region Init\n    construct(config) {\n        super.construct(config);\n        this.refresh();\n    }\n    updateSeconds(seconds) {\n        this.widgetMap.second[seconds ? 'show' : 'hide']();\n    }\n    //endregion\n    //region Event listeners\n    // Automatically called by Widget's triggerFieldChange which announces changes to all ancestors\n    onFieldChange() {\n        if (!this.isConfiguring && !this.isRefreshing) {\n            this.value = this.pickerToTime();\n        }\n    }\n    onAmPmButtonClick({ source }) {\n        this._pm = source.ref === 'pmButton';\n        if (this._value) {\n            this.value = this.pickerToTime();\n        }\n    }\n    onInternalKeyDown(keyEvent) {\n        const me = this;\n        switch (keyEvent.key) {\n            case 'Escape':\n                // Support for undefined initial time\n                me.triggerTimeChange(me._initialValue);\n                me.hide();\n                keyEvent.preventDefault();\n                return;\n            case 'Enter':\n                me.value = me.pickerToTime();\n                me.hide();\n                keyEvent.preventDefault();\n                return;\n        }\n        super.onInternalKeyDown?.(keyEvent);\n    }\n    //endregion\n    //region Internal functions\n    pickerToTime() {\n        const\n            me               = this,\n            pm               = me._pm,\n            { hour, minute, second } = me.widgetMap;\n        hour.format = me._is24Hour ? '2>9' : null;\n        let hours    = hour.value,\n            newValue = new Date(me.value);\n        if (!me._is24Hour) {\n            if (pm && hours < 12) hours = hours + 12;\n            if (!pm && hours === 12) hours = 0;\n        }\n        newValue.setHours(hours);\n        newValue.setMinutes(minute.value);\n        if (me.seconds) {\n            newValue.setSeconds(second.value);\n        }\n        if (me._min) {\n            newValue = DateHelper.max(me._min, newValue);\n        }\n        if (me._max) {\n            newValue = DateHelper.min(me._max, newValue);\n        }\n        return newValue;\n    }\n    triggerTimeChange(time) {\n        /**\n         * Fires when a time is changed.\n         * @event timeChange\n         * @param {Date} time The selected time.\n         */\n        this.trigger('timeChange', { time });\n    }\n    //endregion\n    //region Getters / Setters\n    updateInitialValue(initialValue) {\n        this.value = initialValue;\n    }\n    changeValue(value) {\n        if (value) {\n            value = typeof value === 'string' ? DateHelper.parse(value, this.format) : value;\n        }\n        if (!this.isVisible) {\n            this._initialValue = value;\n        }\n        return value ?? DateHelper.getTime(0);\n    }\n    updateValue(value) {\n        if (this.isVisible) {\n            this.triggerTimeChange(value);\n        }\n        this.refresh();\n    }\n    updateFormat(format) {\n        this._is24Hour = DateHelper.is24HourFormat(format);\n        this.refresh();\n    }\n    changeMin(min) {\n        return typeof min === 'string' ? DateHelper.parse(min, this.format) : min;\n    }\n    changeMax(max) {\n        return typeof max === 'string' ? DateHelper.parse(max, this.format) : max;\n    }\n    //endregion\n    //region Display\n    refresh() {\n        const me = this;\n        if (!me.isConfiguring && me.value) {\n            me.isRefreshing = true;\n            const\n                { hour, minute, second, amButton, pmButton } = me.widgetMap,\n                time                                 = me.value,\n                is24                                 = me._is24Hour,\n                hours                                = time.getHours(),\n                pm                                   = me._pm = hours >= 12;\n            me.element.classList[is24 ? 'add' : 'remove']('b-24h');\n            hour.min         = is24 ? 0 : 1;\n            hour.max         = is24 ? 23 : 12;\n            hour.value       = is24 ? hours : (hours % 12) || 12;\n            minute.value     = time.getMinutes();\n            second.value     = time.getSeconds();\n            amButton.pressed = !pm;\n            pmButton.pressed = pm;\n            amButton.hidden  = pmButton.hidden = is24;\n            me.isRefreshing  = false;\n        }\n    }\n    //endregion\n}\n// Register this widget type with its Factory\nTimePicker.initClass();\nTimePicker._$name = 'TimePicker';", "import DH from '../helper/DateHelper.js';\nimport PickerField from './PickerField.js';\nimport TimePicker from './TimePicker.js';\n/**\n * @module Core/widget/TimeField\n */\n/**\n * The time field widget is a text input field with a time picker drop down. It shows left/right arrows to increase or\n * decrease time by the {@link #config-step step value}.\n *\n * This field can be used as an {@link Grid.column.Column#config-editor editor} for the {@link Grid.column.Column Column}.\n * It is used as the default editor for the {@link Grid.column.TimeColumn TimeColumn}.\n *\n * ## Configuring the picker hour / minute fields\n *\n * You can easily configure the fields in the drop-down picker, to control the increment of the up/down step arrows:\n *\n * ```javascript\n * new TimeField({\n *     label     : 'Time field',\n *     appendTo  : document.body,\n *     picker    : {\n *         items : {\n *             minute : {\n *                 step : 5\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * This widget may be operated using the keyboard. `ArrowDown` opens the time picker, which itself\n * is keyboard navigable. `Shift+ArrowDown` activates the {@link #config-step} back trigger.\n * `Shift+ArrowUp` activates the {@link #config-step} forwards trigger.\n *\n * ```javascript\n * let field = new TimeField({\n *   format: 'HH'\n * });\n * ```\n *\n * {@inlineexample Core/widget/TimeField.js}\n *\n * @extends Core/widget/PickerField\n * @classtype timefield\n * @classtypealias time\n * @inputfield\n */\nexport default class TimeField extends PickerField {\n    //region Config\n    static $name = 'TimeField';\n    static type = 'timefield';\n    static alias = 'time';\n    static get configurable() {\n        return {\n            picker : {\n                type  : 'timepicker',\n                align : {\n                    align    : 't0-b0',\n                    axisLock : true\n                }\n            },\n            /**\n             * Get/Set format for time displayed in field (see {@link Core.helper.DateHelper#function-format-static}\n             * for formatting options).\n             * @member {String} format\n             */\n            /**\n             * Format for date displayed in field (see Core.helper.DateHelper#function-format-static for formatting\n             * options).\n             * @config {String}\n             * @default\n             */\n            format : 'LT',\n            triggers : {\n                expand : {\n                    align   : 'end',\n                    handler : 'onTriggerClick',\n                    compose : () => ({\n                        children : [{\n                            class : {\n                                'b-icon-clock-live' : 1\n                            }\n                        }]\n                    })\n                },\n                back : {\n                    align   : 'start',\n                    cls     : 'b-icon b-icon-angle-left b-step-trigger',\n                    key     : 'Shift+ArrowDown',\n                    handler : 'onBackClick'\n                },\n                forward : {\n                    align   : 'end',\n                    cls     : 'b-icon b-icon-angle-right b-step-trigger',\n                    key     : 'Shift+ArrowUp',\n                    handler : 'onForwardClick'\n                }\n            },\n            /**\n             * Get/set min value, which can be a Date or a string. If a string is specified, it will be converted using\n             * the specified {@link #config-format}.\n             * @member {Date} min\n             * @accepts {String|Date}\n             */\n            /**\n             * Min time value\n             * @config {String|Date}\n             */\n            min : null,\n            /**\n             * Get/set max value, which can be a Date or a string. If a string is specified, it will be converted using\n             * the specified {@link #config-format}.\n             * @member {Date} max\n             * @accepts {String|Date}\n             */\n            /**\n             * Max time value\n             * @config {String|Date}\n             */\n            max : null,\n            /**\n             * The `step` property may be set in Object form specifying two properties, `magnitude`, a Number, and\n             * `unit`, a String.\n             *\n             * If a Number is passed, the steps's current unit is used and just the magnitude is changed.\n             *\n             * If a String is passed, it is parsed by {@link Core.helper.DateHelper#function-parseDuration-static}, for\n             * example `'5m'`, `'5 m'`, `'5 min'`, `'5 minutes'`.\n             *\n             * Upon read, the value is always returned in object form containing `magnitude` and `unit`.\n             * @member {DurationConfig} step\n             * @accepts {String|Number|DurationConfig}\n             */\n            /**\n             * Time increment duration value. Defaults to 5 minutes.\n             * The value is taken to be a string consisting of the numeric magnitude and the units.\n             * The units may be a recognised unit abbreviation of this locale or the full local unit name.\n             * For example `\"10m\"` or `\"5min\"` or `\"2 hours\"`\n             * @config {String}\n             */\n            step : '5m',\n            stepTriggers : null,\n            /**\n             * Get/set value, which can be a Date or a string. If a string is specified, it will be converted using the\n             * specified {@link #config-format}.\n             * @member {Date} value\n             * @accepts {String|Date}\n             */\n            /**\n             * Value, which can be a Date or a string. If a string is specified, it will be converted using the\n             * specified {@link #config-format}\n             * @config {String|Date}\n             */\n            value : null,\n            /**\n             * Set to true to not clean up the date part of the passed value. Set to false to reset the date part to\n             * January 1st\n             * @prp {Boolean}\n             * @default\n             */\n            keepDate : false\n        };\n    }\n    //endregion\n    //region Init & destroy\n    changePicker(picker, oldPicker) {\n        const me = this;\n        return TimePicker.reconfigure(oldPicker, picker, {\n            owner : me,\n            defaults : {\n                value      : me.value,\n                forElement : me[me.pickerAlignElement],\n                owner      : me,\n                align      : {\n                    anchor : me.overlayAnchor,\n                    target : me[me.pickerAlignElement]\n                },\n                onTimeChange({ time }) {\n                    me._isUserAction = true;\n                    me.value = time;\n                    me._isUserAction = false;\n                }\n            }\n        });\n    }\n    //endregion\n    //region Click listeners\n    onBackClick() {\n        const\n            me      = this,\n            { min } = me;\n        if (!me.readOnly && me.value) {\n            const newValue = DH.add(me.value, -1 * me.step.magnitude, me.step.unit);\n            if (!min || min.getTime() <= newValue) {\n                me._isUserAction = true;\n                me.value = newValue;\n                me._isUserAction = false;\n            }\n        }\n    }\n    onForwardClick() {\n        const\n            me      = this,\n            { max } = me;\n        if (!me.readOnly && me.value) {\n            const newValue = DH.add(me.value, me.step.magnitude, me.step.unit);\n            if (!max || max.getTime() >= newValue) {\n                me._isUserAction = true;\n                me.value = newValue;\n                me._isUserAction = false;\n            }\n        }\n    }\n    //endregion\n    // region Validation\n    get isValid() {\n        const me  = this;\n        me.clearError('L{Field.minimumValueViolation}', true);\n        me.clearError('L{Field.maximumValueViolation}', true);\n        let value = me.value;\n        if (value) {\n            value = value.getTime();\n            if (me._min && me._min.getTime() > value) {\n                me.setError('L{Field.minimumValueViolation}', true);\n                return false;\n            }\n            if (me._max && me._max.getTime() < value) {\n                me.setError('L{Field.maximumValueViolation}', true);\n                return false;\n            }\n        }\n        return super.isValid;\n    }\n    hasChanged(oldValue, newValue) {\n        if (oldValue?.getTime && newValue?.getTime) {\n            // Only care about the time part\n            return oldValue.getHours() !== newValue.getHours() ||\n                oldValue.getMinutes() !== newValue.getMinutes() ||\n                oldValue.getSeconds() !== newValue.getSeconds() ||\n                oldValue.getMilliseconds() !== newValue.getMilliseconds();\n        }\n        return super.hasChanged(oldValue, newValue);\n    }\n    //endregion\n    //region Toggle picker\n    /**\n     * Show picker\n     */\n    showPicker() {\n        const\n            me = this,\n            {\n                picker,\n                value\n            }  = me;\n        if (me.readOnly) {\n            return;\n        }\n        picker.value = value;\n        picker.format = me.format;\n        picker.maxTime = me.max;\n        picker.minTime = me.min;\n        // If we had no value initially.\n        if (!value) {\n            me.value = picker.value;\n        }\n        super.showPicker(true);\n    }\n    onPickerShow() {\n        super.onPickerShow();\n        // Remove PickerField key listener\n        this.pickerKeyDownRemover = this.pickerKeyDownRemover?.();\n    }\n    /**\n     * Focus time picker\n     */\n    focusPicker() {\n        this.picker.focus();\n    }\n    //endregion\n    //region Getters/setters\n    transformTimeValue(value) {\n        if (value != null) {\n            if (typeof value === 'string') {\n                value = DH.parse(value, this.format);\n                if (this.keepDate) {\n                    value = DH.copyTimeValues(new Date(this.value), value);\n                }\n            }\n            else {\n                value = new Date(value);\n            }\n            // We insist on a *valid* Time as the value\n            if (DH.isValidDate(value)) {\n                if (!this.keepDate) {\n                    // Clear date part back to zero so that all we have is the time part of the epoch.\n                    return DH.getTime(value);\n                }\n                else {\n                    return value;\n                }\n            }\n        }\n        return null;\n    }\n    changeMin(value) {\n        return this.transformTimeValue(value);\n    }\n    updateMin(value) {\n        const { input } = this;\n        if (input) {\n            if (value == null) {\n                input.removeAttribute('min');\n            }\n            else {\n                input.min = value;\n            }\n        }\n        this.syncInvalid();\n    }\n    changeMax(value) {\n        return this.transformTimeValue(value);\n    }\n    updateMax(value) {\n        const { input } = this;\n        if (input) {\n            if (value == null) {\n                input.removeAttribute('max');\n            }\n            else {\n                input.max = value;\n            }\n        }\n        this.syncInvalid();\n    }\n    changeValue(value, was) {\n        const\n            me = this,\n            newValue = me.transformTimeValue(value);\n        // A value we could not parse\n        if (value && !newValue || (me.isRequired && value === '')) {\n            // setError uses localization\n            me.setError('L{invalidTime}');\n            return;\n        }\n        me.clearError('L{invalidTime}');\n        // Reject non-change\n        if (me.hasChanged(was, newValue)) {\n            return super.changeValue(newValue, was);\n        }\n        // But we must fix up the display in case it was an unparseable string\n        // and the value therefore did not change.\n        if (!me.inputting) {\n            me.syncInputFieldValue(true);\n        }\n    }\n    updateValue(value, was) {\n        const { expand } = this.triggers;\n        // This makes to clock icon show correct time\n        if (expand && value) {\n            expand.element.firstElementChild.style.animationDelay =\n                -((value.getHours() * 60 + value.getMinutes()) / 10) + 's';\n        }\n        super.updateValue(value, was);\n    }\n    changeStep(value, was) {\n        const type = typeof value;\n        if (!value) {\n            return null;\n        }\n        if (type === 'number') {\n            value = {\n                magnitude : Math.abs(value),\n                unit      : was ? was.unit : 'hour'\n            };\n        }\n        else if (type === 'string') {\n            value = DH.parseDuration(value);\n        }\n        if (value?.unit && value?.magnitude) {\n            if (value.magnitude < 0) {\n                value = {\n                    magnitude : -value.magnitude,  // Math.abs\n                    unit      : value.unit\n                };\n            }\n            return value;\n        }\n    }\n    updateStep(value) {\n        // If a step is configured, show the steppers\n        this.element.classList[value ? 'remove' : 'add']('b-no-steppers');\n        this.syncInvalid();\n    }\n    updateFormat() {\n        this.syncInputFieldValue(true);\n    }\n    get inputValue() {\n        return DH.format(this.value, this.format);\n    }\n    //endregion\n    //region Localization\n    updateLocalization() {\n        super.updateLocalization();\n        this.syncInputFieldValue(true);\n    }\n    //endregion\n}\n// Register this widget type with its Factory\nTimeField.initClass();\nTimeField._$name = 'TimeField';", "import TextField from './TextField.js';\nimport DateHelper from '../helper/DateHelper.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\nimport Duration from '../data/Duration.js';\n/**\n * @module Core/widget/DurationField\n */\n/**\n * A specialized field allowing a user to also specify duration unit when editing the duration value.\n *\n * This field can be used as an {@link Grid.column.Column#config-editor editor} for the {@link Grid.column.Column Column}.\n * It is used as the default editor for the `DurationColumn`.\n *\n * {@inlineexample Core/widget/DurationField.js}\n *\n * @extends Core/widget/TextField\n * @classtype durationfield\n * @classtypealias duration\n * @inputfield\n */\nexport default class DurationField extends TextField {\n    static $name = 'DurationField';\n    static type = 'durationfield';\n    static alias = 'duration';\n    static get defaultConfig() {\n        return {\n            /**\n             * The `value` config may be set in Object form specifying two properties,\n             * `magnitude`, a Number, and `unit`, a String.\n             *\n             * If a String is passed, it is parsed in accordance with current locale rules.\n             * The string is taken to be the numeric magnitude, followed by whitespace, then an abbreviation, or name of\n             * the unit.\n             * @config {DurationConfig|String}\n             * @category Common\n             */\n            value : null,\n            /**\n             * Step size for spin button clicks.\n             * @config {Number}\n             * @default\n             * @category Common\n             */\n            step : 1,\n            /**\n             * The duration unit to use with the current magnitude value.\n             * @config {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'}\n             * @category Common\n             */\n            unit : null,\n            defaultUnit : 'day',\n            /**\n             * The duration magnitude to use with the current unit value. Can be either an integer or a float value.\n             * Both \",\" and \".\" are valid decimal separators.\n             * @config {Number}\n             * @category Common\n             */\n            magnitude : null,\n            /**\n             * When set to `true` the field will use short names of unit durations\n             * (as returned by {@link Core.helper.DateHelper#function-getShortNameOfUnit-static}) when creating the\n             * input field's display value.\n             * @config {Boolean}\n             * @category Common\n             */\n            useAbbreviation : false,\n            /**\n             * Set to `true` to allow negative duration\n             * @config {Boolean}\n             * @category Common\n             */\n            allowNegative : false,\n            /**\n             * The number of decimal places to allow. Defaults to no constraint.\n             * @config {Number}\n             * @default\n             * @category Common\n             */\n            decimalPrecision : null,\n            triggers : {\n                spin : {\n                    type : 'spintrigger'\n                }\n            },\n            nullValue : null\n        };\n    }\n    /**\n     * Fired when this field's value changes.\n     * @event change\n     * @param {Core.data.Duration} value - This field's value\n     * @param {Core.data.Duration} oldValue - This field's previous value\n     * @param {Boolean} valid - True if this field is in a valid state.\n     * @param {Event} [event] - The triggering DOM event if any.\n     * @param {Boolean} userAction - Triggered by user taking an action (`true`) or by setting a value (`false`)\n     * @param {Core.widget.DurationField} source - This field\n     */\n    /**\n     * User performed default action (typed into this field or hit the triggers).\n     * @event action\n     * @param {Core.data.Duration} value - This field's value\n     * @param {Core.data.Duration} oldValue - This field's previous value\n     * @param {Boolean} valid - True if this field is in a valid state.\n     * @param {Event} [event] - The triggering DOM event if any.\n     * @param {Boolean} userAction - Triggered by user taking an action (`true`) or by setting a value (`false`)\n     * @param {Core.widget.DurationField} source - This field\n     */\n    static get configurable() {\n        return {\n            /**\n             * Get/set the min value (e.g. 1d)\n             * @member {String} min\n             * @category Common\n             */\n            /**\n             * Minimum duration value (e.g. 1d)\n             * @config {String}\n             * @category Common\n             */\n            min : null,\n            /**\n             * Get/set the max value\n             * @member {String} max (e.g. 10d)\n             * @category Common\n             */\n            /**\n             * Max duration value (e.g. 10d)\n             * @config {String}\n             * @category Common\n             */\n            max : null,\n            /**\n             * Get/set the allowed units, e.g. \"day,hour,year\".\n             * @member {String} allowedUnits\n             * @category Common\n             */\n            /**\n             * Comma-separated list of units to allow in this field, e.g. \"day,hour,year\". Leave blank to allow all\n             * valid units (the default)\n             * @config {String}\n             * @category Common\n             */\n            allowedUnits : null\n        };\n    }\n    changeMin(value) {\n        return typeof value === 'string' ? new Duration(value) : value;\n    }\n    changeMax(value) {\n        return typeof value === 'string' ? new Duration(value) : value;\n    }\n    changeAllowedUnits(units) {\n        if (typeof units === 'string') {\n            units = units.split(',');\n        }\n        // Special case, defaultUnit not found in allowedUnits, redefine defaultUnit\n        if (units.length > 0 && !units.includes(this.defaultUnit)) {\n            this.defaultUnit = units[0];\n        }\n        return units;\n    }\n    updateAllowedUnits(units) {\n        this.allowedUnitsRe = new RegExp(`(${units.join('|')})`, 'i');\n    }\n    get inputValue() {\n        // Do not use the _value property. If called during configuration, this\n        // will import the configured value from the config object.\n        return this.value == null ? '' : this.calcValue(true).toString(this.useAbbreviation);\n    }\n    /**\n     * Get/Set duration unit to use with the current magnitude value.\n     * Valid values are:\n     * - \"millisecond\" - Milliseconds\n     * - \"second\" - Seconds\n     * - \"minute\" - Minutes\n     * - \"hour\" - Hours\n     * - \"day\" - Days\n     * - \"week\" - Weeks\n     * - \"month\" - Months\n     * - \"quarter\" - Quarters\n     * - \"year\"- Years\n     *\n     * @property {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'}\n     * @category Common\n     */\n    set unit(unit) {\n        this._unit = unit;\n        this.value = this.calcValue();\n    }\n    get unit() {\n        return this._unit;\n    }\n    get unitWithDefault() {\n        return this._unit || this.defaultUnit;\n    }\n    /**\n     * Get/Set numeric magnitude `value` to use with the current unit value.\n     * @property {Number}\n     * @category Common\n     */\n    set magnitude(magnitude) {\n        this.clearError('L{invalidUnit}');\n        this._magnitude = magnitude;\n        super.value = this.calcValue();\n    }\n    get magnitude() {\n        return this._magnitude;\n    }\n    roundMagnitude(value) {\n        return value && this.decimalPrecision != null ? ObjectHelper.round(value, this.decimalPrecision) : value;\n    }\n    get allowDecimals() {\n        return this.decimalPrecision !== 0;\n    }\n    get isValid() {\n        const\n            me      = this,\n            isEmpty = me.value == null || (me.value && me.value.magnitude == null);\n        return super.isValid && ((isEmpty && !me.required) || !isEmpty && (me.allowNegative || me.value.magnitude >= 0));\n    }\n    internalOnChange(event) {\n        const\n            me     = this,\n            value  = me.value,\n            oldVal = me._lastValue;\n        if (me.hasChanged(oldVal, value)) {\n            me._lastValue = value;\n            me.triggerFieldChange({ value, event, userAction : true, valid : me.isValid });\n        }\n    }\n    onFocusOut(e) {\n        this.syncInputFieldValue(true);\n        this.triggers?.spin?.clickRepeater?.cancel();\n        return super.onFocusOut(e);\n    }\n    /**\n     * The `value` property may be set in Object form specifying two properties, `magnitude`, a Number, and `unit`, a\n     * String.\n     *\n     * If a Number is passed, the field's current unit is used and just the magnitude is changed.\n     *\n     * If a String is passed, it is parsed in accordance with current locale rules. The string is taken to be the\n     * numeric magnitude, followed by whitespace, then an abbreviation, or name of the unit.\n     *\n     * Upon read, the value is always a {@link Core.data.Duration} object containing `magnitude` and `unit`.\n     *\n     * @property {Core.data.Duration}\n     * @accepts {String|Number|DurationConfig|Core.data.Duration}\n     * @category Common\n     */\n    set value(value) {\n        const\n            me = this;\n        let newMagnitude, newUnit;\n        me.getConfig('allowedUnits');\n        me.clearError('L{invalidUnit}');\n        if (typeof value === 'number' || (typeof value === 'string' && value.length > 0 && !isNaN(value))) {\n            // A number means preserving existing unit value\n            newMagnitude = Number(value);\n            newUnit = me.unitWithDefault;\n        }\n        else if (typeof value === 'string') {\n            if (/^\\s*$/.test(value)) {\n                // special case of \"empty\" (in user meaning) string - set to `null` to allow unscheduling of tasks\n                newMagnitude = null;\n            }\n            else {\n                // Parse as a string\n                const\n                    parsedDuration = DateHelper.parseDuration(value, me.allowDecimals, me.unitWithDefault);\n                if (parsedDuration) {\n                    if (!me.allowedUnitsRe || me.allowedUnitsRe.test(parsedDuration.unit)) {\n                        newUnit = parsedDuration.unit;\n                        newMagnitude = parsedDuration.magnitude;\n                    }\n                    else {\n                        me.setError('L{invalidUnit}');\n                    }\n                }\n            }\n        }\n        else {\n            // Using value object with unit and magnitude\n            if (value && 'unit' in value && 'magnitude' in value) {\n                newUnit = value.unit;\n                newMagnitude = value.magnitude;\n            }\n            else {\n                newUnit = null;\n                newMagnitude = null;\n            }\n        }\n        if (me._magnitude !== newMagnitude || me._unit != newUnit) {\n            me._magnitude = newMagnitude;\n            // Once we have unit, do not clear it if setting clearing value\n            if (newUnit) {\n                me._unit = newUnit;\n            }\n            super.value = me.calcValue();\n        }\n    }\n    okMax(value) {\n        if (typeof value === 'number') {\n            value = new Duration({\n                unit      : this.unitWithDefault,\n                magnitude : value\n            });\n        }\n        return this.max == null || value <= this.max;\n    }\n    okMin(value) {\n        if (typeof value === 'number') {\n            value = new Duration({\n                unit      : this.unitWithDefault,\n                magnitude : value\n            });\n        }\n        return this.min == null || value >= this.min;\n    }\n    get validity() {\n        const\n            value    = this.value,\n            validity = {};\n        // Assert range for non-empty fields, empty fields will turn invalid if `required: true`\n        if (value != null) {\n            validity.rangeUnderflow = !this.okMin(value);\n            validity.rangeOverflow  = !this.okMax(value);\n        }\n        validity.valid = !validity.rangeUnderflow && !validity.rangeOverflow;\n        return validity;\n    }\n    get value() {\n        return super.value;\n    }\n    calcValue(round = false) {\n        const\n            me = this;\n        if ((!me._unit || me._magnitude == null) && me.clearable) {\n            return null;\n        }\n        else {\n            return new Duration(round ? this.roundMagnitude(me._magnitude) : this._magnitude, me.unitWithDefault);\n        }\n    }\n    hasChanged(oldValue, newValue) {\n        return newValue && !oldValue ||\n            !newValue && oldValue ||\n            newValue && oldValue && !oldValue.isEqual(newValue);\n    }\n    /**\n     * The `milliseconds` property is a read only property which returns the number of milliseconds in this field's\n     * value\n     * @member {Number} milliseconds\n     * @readonly\n     */\n    get milliseconds() {\n        // For reasons unknown documenting as @property did not work\n        return this.value ? this.value.milliseconds : 0;\n    }\n    onInternalKeyDown(keyEvent) {\n        if (keyEvent.key === 'ArrowUp') {\n            this.doSpinUp();\n        }\n        else if (keyEvent.key === 'ArrowDown') {\n            this.doSpinDown();\n        }\n    }\n    doSpinUp() {\n        const me = this;\n        if (me.readOnly) {\n            return;\n        }\n        let newValue = (me.magnitude || 0) + me.step;\n        me._isUserAction = true;\n        if (!me.okMin(newValue)) {\n            newValue = me.min;\n        }\n        if (me.okMax(newValue)) {\n            me.value = newValue;\n        }\n        me._isUserAction = false;\n    }\n    doSpinDown() {\n        const me = this;\n        if (me.readOnly) {\n            return;\n        }\n        let newValue = (me.magnitude || 0) - me.step;\n        if (!me.okMax(newValue)) {\n            newValue = me.max;\n        }\n        if (me.okMin(newValue) && (me.allowNegative || (me.magnitude || 0) > 0)) {\n            me._isUserAction = true;\n            me.value         = newValue;\n            me._isUserAction = false;\n        }\n    }\n}\n// Register this widget type with its Factory\nDurationField.initClass();\nDurationField._$name = 'DurationField';", "import Container from './Container.js';\nimport ArrayHelper from '../helper/ArrayHelper.js';\nimport DateHelper from '../helper/DateHelper.js';\nimport './Combo.js';\nimport './Checkbox.js';\nimport './NumberField.js';\nimport './TextField.js';\nimport './DateField.js';\nimport './DurationField.js';\nimport DomClassList from '../helper/util/DomClassList.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\nimport Duration from '../data/Duration.js';\nimport VersionHelper from '../helper/VersionHelper.js';\n/**\n * @module Core/widget/FieldFilterPicker\n */\nexport const filterableFieldDataTypes = {\n    number   : true,\n    boolean  : true,\n    string   : true,\n    date     : true,\n    duration : true,\n    time     : true,\n    auto     : true\n};\nconst isInferrableType = {\n    number  : true,\n    boolean : true,\n    string  : true\n};\nexport const isSupportedDurationField = field => field?.column?.type === 'duration';\nexport const isFilterableField = field => filterableFieldDataTypes[field?.type] || isSupportedDurationField(field);\nconst\n    emptyString         = '',\n    clsBase             = `b-fieldfilterpicker`,\n    multiValueOperators = {\n        between         : true,\n        notBetween      : true,\n        isIncludedIn    : true,\n        isNotIncludedIn : true\n    },\n    valueInputTypes     = {\n        textfield     : true,\n        datefield     : true,\n        numberfield   : true,\n        durationfield : true,\n        combo         : true,\n        timefield     : true\n    },\n    commonOperators = {\n        empty           : { value : 'empty', text : 'L{isEmpty}', argCount : 0 },\n        notEmpty        : { value : 'notEmpty', text : 'L{isNotEmpty}', argCount : 0 },\n        '='             : { value : '=', text : 'L{equals}' },\n        '!='            : { value : '!=', text : 'L{doesNotEqual}' },\n        '>'             : { value : '>', text : 'L{isGreaterThan}' },\n        '<'             : { value : '<', text : 'L{isLessThan}' },\n        '>='            : { value : '>=', text : 'L{isGreaterThanOrEqualTo}' },\n        '<='            : { value : '<=', text : 'L{isLessThanOrEqualTo}' },\n        between         : { value : 'between', text : 'L{isBetween}', argCount : 2 },\n        notBetween      : { value : 'notBetween', text : 'L{isNotBetween}', argCount : 2 },\n        isIncludedIn    : { value : 'isIncludedIn', text : 'L{isOneOf}', isArrayValued : true },\n        isNotIncludedIn : { value : 'isNotIncludedIn', text : 'L{isNotOneOf}', isArrayValued : true }\n    };\n/**\n * A field that is available for selection when defining filters.\n *\n * @typedef {Object} FieldOption\n * @property {'string'|'number'|'date'|'boolean'} type The data type of the values in this field in the data source\n * @property {String} title The human-friendly display name for the field, as might be displayed in a data column header\n */\n/**\n * A dictionary of value field placeholder strings, keyed by data type.\n *\n * @typedef {Object} ValueFieldPlaceholders\n * @property {String} string Placeholder text for text value fields\n * @property {String} number Placeholder text for number value fields\n * @property {String} date Placeholder text for date value fields\n * @property {String} list Placeholder text for multi-select list values, e.g. for the 'is one of' operator\n */\n/**\n * Widget for defining a {@link Core.util.CollectionFilter} for use in filtering a {@link Core.data.Store}.\n * Filters consist of `property` (the name of the data field whose values are checked), `operator`\n * (the type of comparison to use), and `value` (the pre-defined value against which to compare the\n * data field value during filtering).\n *\n * {@inlineexample Core/widget/FieldFilterPicker.js}\n *\n * For example:\n *\n * ```javascript\n * new FieldFilterPicker({\n *     appendTo : domElement,\n *\n *     fields: {\n *         // Allow filters to be defined against the 'age' and 'role' fields in our data\n *         age       : { title: 'Age', type: 'number' },\n *         startDate : { title: 'Start Date', type: 'date' }\n *     },\n *\n *     filter : {\n *         property : 'startDate',\n *         operator : '<',\n *         value    : new Date()\n *     }\n * });\n * ```\n *\n * @demo Grid/fieldfilters\n *\n * @extends Core/widget/Container\n * @classtype fieldfilterpicker\n * @widget\n */\nexport default class FieldFilterPicker extends Container {\n    //region Config\n    static $name = 'FieldFilterPicker';\n    static type = 'fieldfilterpicker';\n    static operators = {\n        empty           : { value : 'empty', text : 'L{isEmpty}', argCount : 0 },\n        notEmpty        : { value : 'notEmpty', text : 'L{isNotEmpty}', argCount : 0 },\n        '='             : { value : '=', text : 'L{equals}' },\n        '!='            : { value : '!=', text : 'L{doesNotEqual}' },\n        '>'             : { value : '>', text : 'L{isGreaterThan}' },\n        '<'             : { value : '<', text : 'L{isLessThan}' },\n        '>='            : { value : '>=', text : 'L{isGreaterThanOrEqualTo}' },\n        '<='            : { value : '<=', text : 'L{isLessThanOrEqualTo}' },\n        between         : { value : 'between', text : 'L{isBetween}', argCount : 2 },\n        notBetween      : { value : 'notBetween', text : 'L{isNotBetween}', argCount : 2 },\n        isIncludedIn    : { value : 'isIncludedIn', text : 'L{isOneOf}' },\n        isNotIncludedIn : { value : 'isNotIncludedIn', text : 'L{isNotOneOf}' }\n    };\n    static defaultOperators = {\n        string : [\n            // In display order\n            commonOperators.empty,\n            commonOperators.notEmpty,\n            commonOperators['='],\n            commonOperators['!='],\n            { value : 'includes', text : 'L{contains}' },\n            { value : 'doesNotInclude', text : 'L{doesNotContain}' },\n            { value : 'startsWith', text : 'L{startsWith}' },\n            { value : 'endsWith', text : 'L{endsWith}' },\n            commonOperators.isIncludedIn,\n            commonOperators.isNotIncludedIn\n        ],\n        number : [\n            commonOperators.empty,\n            commonOperators.notEmpty,\n            commonOperators['='],\n            commonOperators['!='],\n            commonOperators['>'],\n            commonOperators['<'],\n            commonOperators['>='],\n            commonOperators['<='],\n            commonOperators.between,\n            commonOperators.notBetween,\n            commonOperators.isIncludedIn,\n            commonOperators.isNotIncludedIn\n        ],\n        date : [\n            commonOperators.empty,\n            commonOperators.notEmpty,\n            commonOperators['='],\n            commonOperators['!='],\n            { value : '<', text : 'L{isBefore}' },\n            { value : '>', text : 'L{isAfter}' },\n            commonOperators.between,\n            { value : 'isToday', text : 'L{isToday}', argCount : 0 },\n            { value : 'isTomorrow', text : 'L{isTomorrow}', argCount : 0 },\n            { value : 'isYesterday', text : 'L{isYesterday}', argCount : 0 },\n            { value : 'isThisWeek', text : 'L{isThisWeek}', argCount : 0 },\n            { value : 'isNextWeek', text : 'L{isNextWeek}', argCount : 0 },\n            { value : 'isLastWeek', text : 'L{isLastWeek}', argCount : 0 },\n            { value : 'isThisMonth', text : 'L{isThisMonth}', argCount : 0 },\n            { value : 'isNextMonth', text : 'L{isNextMonth}', argCount : 0 },\n            { value : 'isLastMonth', text : 'L{isLastMonth}', argCount : 0 },\n            { value : 'isThisYear', text : 'L{isThisYear}', argCount : 0 },\n            { value : 'isNextYear', text : 'L{isNextYear}', argCount : 0 },\n            { value : 'isLastYear', text : 'L{isLastYear}', argCount : 0 },\n            { value : 'isYearToDate', text : 'L{isYearToDate}', argCount : 0 },\n            commonOperators.isIncludedIn,\n            commonOperators.isNotIncludedIn\n        ],\n        boolean : [\n            { value : 'isTrue', text : 'L{isTrue}', argCount : 0 },\n            { value : 'isFalse', text : 'L{isFalse}', argCount : 0 }\n        ],\n        duration : [\n            commonOperators.empty,\n            commonOperators.notEmpty,\n            commonOperators['='],\n            commonOperators['!='],\n            commonOperators['>'],\n            commonOperators['<'],\n            commonOperators['>='],\n            commonOperators['<='],\n            commonOperators.between,\n            commonOperators.notBetween,\n            commonOperators.isIncludedIn,\n            commonOperators.isNotIncludedIn\n        ],\n        time : [\n            commonOperators.empty,\n            commonOperators.notEmpty,\n            commonOperators['='],\n            commonOperators['!='],\n            commonOperators['>'],\n            commonOperators['<'],\n            commonOperators['>='],\n            commonOperators['<='],\n            commonOperators.between,\n            commonOperators.notBetween,\n            commonOperators.isIncludedIn,\n            commonOperators.isNotIncludedIn\n        ],\n        relation : [\n            commonOperators.empty,\n            commonOperators.notEmpty,\n            commonOperators['='],\n            commonOperators['!='],\n            commonOperators.isIncludedIn,\n            commonOperators.isNotIncludedIn\n        ],\n        auto : [\n            { value : '*', text : 'L{contains}' }\n        ]\n    };\n    static get defaultValueFieldPlaceholders() {\n        return {\n            string   : 'L{enterAValue}',\n            number   : 'L{enterANumber}',\n            date     : 'L{selectADate}',\n            relation : 'L{selectValue}',\n            list     : 'L{selectOneOrMoreValues}',\n            duration : 'L{enterAValue}',\n            time     : 'L{selectATime}',\n            auto     : 'L{enterAValue}'\n        };\n    };\n    static configurable = {\n        /**\n         * Dictionary of {@link #typedef-FieldOption} representing the fields against which filters can be defined,\n         * keyed by field name.\n         *\n         * <div class=\"note\">5.3.0 Syntax accepting FieldOption[] was deprecated in favor of dictionary and will be removed in 6.0</div>\n         *\n         * If filtering a {@link Grid.view.Grid}, consider using {@link Grid.widget.GridFieldFilterPicker}, which can be configured\n         * with an existing {@link Grid.view.Grid} instead of, or in combination with, defining fields manually.\n         *\n         * Example:\n         * ```javascript\n         * fields: {\n         *     // Allow filters to be defined against the 'age' and 'role' fields in our data\n         *     age  : { title: 'Age', type: 'number' },\n         *     role : { title: 'Role', type: 'string' }\n         * }\n         * ```\n         *\n         * @config {Object<String,FieldOption>}\n         */\n        fields : null,\n        /**\n         * Make the entire picker disabled.\n         *\n         * @config {Boolean}\n         * @default\n         */\n        disabled : false,\n        /**\n         * Make the entire picker read-only.\n         *\n         * @config {Boolean}\n         * @default\n         */\n        readOnly : false,\n        layout : 'vbox',\n        /**\n         * Make only the property selector readOnly.\n         * @private\n         *\n         * @config {Boolean}\n         * @default\n         */\n        propertyLocked : false,\n        /**\n         * Make only the operator selector readOnly.\n         * @private\n         *\n         * @config {Boolean}\n         * @default\n         */\n        operatorLocked : false,\n        /**\n         * Configuration object for the {@link Core.util.CollectionFilter} displayed\n         * and editable in this picker.\n         *\n         * Example:\n         *\n         * ```javascript\n         * {\n         *     property: 'age',\n         *     operator: '=',\n         *     value: 25\n         * }\n         * ```\n         *\n         * @config {CollectionFilterConfig}\n         */\n        filter : null,\n        /**\n         * Optional configuration for the property selector {@link Core.widget.Combo}.\n         *\n         * @config {ComboConfig}\n         */\n        propertyFieldConfig : null,\n        /**\n         * Optional configuration for the operator selector {@link Core.widget.Combo}.\n         *\n         * @config {ComboConfig}\n         * @private\n         */\n        operatorFieldConfig : null,\n        /**\n         * Optional CSS class to apply to the value field(s).\n         *\n         * @config {String}\n         * @private\n         */\n        valueFieldCls : null,\n        /**\n         * Whether to raise {@link #event-change} events as the user types into a value field. If `false`,\n         * {@link #event-change} events will be raised only when the value input field's own `change` event\n         * occurs, for example on field blur.\n         *\n         * @config {Boolean}\n         * @default\n         */\n        triggerChangeOnInput : true,\n        /**\n         * @private\n         */\n        items : {\n            inputs : {\n                type   : 'container',\n                layout : 'hbox',\n                cls    : `${clsBase}-inputs`,\n                items  : {\n                    propertyPicker : {\n                        type                    : 'combo',\n                        items                   : {},\n                        cls                     : `${clsBase}-property`,\n                        placeholder             : 'L{FieldFilterPicker.selectAProperty}',\n                        highlightExternalChange : false\n                    },\n                    operatorPicker : {\n                        type                    : 'combo',\n                        items                   : {},\n                        cls                     : `${clsBase}-operator`,\n                        placeholder             : 'L{FieldFilterPicker.selectAnOperator}',\n                        highlightExternalChange : false\n                    },\n                    valueFields : {\n                        type  : 'container',\n                        cls   : `${clsBase}-values`,\n                        items : {}\n                    }\n                }\n            },\n            caseSensitive : {\n                type : 'checkbox',\n                text : 'L{FieldFilterPicker.caseSensitive}',\n                cls  : `${clsBase}-case-sensitive`\n            }\n        },\n        /**\n         * Overrides the built-in list of operators that are available for selection. Specify operators as\n         * an object with data types as keys and lists of operators as values, like this:\n         *\n         * ```javascript\n         * operators : {\n         *     string : [\n         *         { value : 'empty', text : 'is empty', argCount : 0 },\n         *         { value : 'notEmpty', text : 'is not empty', argCount : 0 }\n         *     ],\n         *     number : [\n         *         { value : '=', text : 'equals' },\n         *         { value : '!=', text : 'does not equal' }\n         *     ],\n         *     date : [\n         *         { value : '<', text : 'is before' }\n         *     ]\n         * }\n         * ```\n         *\n         * Here `value` is what will be stored in the `operator` field in the filter when selected, `text` is the text\n         * displayed in the Combo for selection, and `argCount` is the number of arguments (comparison values) the\n         * operator requires. The default argCount if not specified is 1.\n         *\n         * @config {Object}\n         */\n        operators : FieldFilterPicker.defaultOperators,\n        /**\n         * The date format string used to display dates when using the 'is one of' / 'is not one of' operators with a date\n         * field. Defaults to the current locale's `FieldFilterPicker.dateFormat` value.\n         *\n         * @config {String}\n         * @default\n         */\n        dateFormat : 'L{FieldFilterPicker.dateFormat}',\n        /**\n         * Optional {Core.data.Store} against which filters are being defined. This is used to supply options to filter against\n         * when using the 'is one of' and 'is not one of' operators.\n         *\n         * @config {Core.data.Store}\n         */\n        store : null,\n        /**\n         * Optional {@link ValueFieldPlaceholders} object specifying custom placeholder text for value input fields.\n         *\n         * @config {ValueFieldPlaceholders}\n         */\n        valueFieldPlaceholders : null,\n        /**\n         * Optional function that modifies the configuration of value fields shown for a filter. The default configuration\n         * is received as an argument and the returned value will be used as the final configuration. For example:\n         *\n         * ```javascript\n         * getValueFieldConfig : (filter, fieldConfig) => {\n         *     return {\n         *         ...fieldConfig,\n         *         title : fieldName    // Override the `title` config for the field\n         *     };\n         * }\n         * ```\n         *\n         * The supplied function should accept the following arguments:\n         *\n         * @config {Function}\n         * @param {Core.util.CollectionFilter} filter The filter being displayed\n         * @param {ContainerItemConfig} fieldConfig Configuration object for the value field\n         * @returns {ContainerItemConfig} the resulting configuration\n         */\n        getValueFieldConfig : null\n    };\n    //endregion\n    // Make lookup of operator arity (arg count) by [fieldType][operator]\n    static buildOperatorArgCountLookup = operators =>\n        ArrayHelper.keyBy(Object.entries(operators),\n            ([fieldType])   => fieldType,\n            ([, operators]) => ArrayHelper.keyBy(operators,\n                ({ value }) => value,\n                ({ argCount }) => argCount === undefined ? 1 : argCount\n            ));\n    afterConstruct() {\n        const me = this;\n        if (!me._fields) {\n            throw new Error(`${FieldFilterPicker.name} requires 'fields' to be configured.`);\n        }\n        if (!me._filter) {\n            throw new Error(`${FieldFilterPicker.name} requires 'filter' to be configured.`);\n        }\n        super.afterConstruct();\n        const { widgetMap: { propertyPicker, operatorPicker, caseSensitive } } = me;\n        propertyPicker.ion({ select : 'onPropertySelect', thisObj : me });\n        operatorPicker.ion({ select : 'onOperatorSelect', thisObj : me });\n        caseSensitive.ion({ change : 'onCaseSensitiveChange', thisObj : me });\n        me.propertyFieldConfig && propertyPicker.setConfig(me.propertyFieldConfig);\n        me.operatorFieldConfig && operatorPicker.setConfig(me.operatorFieldConfig);\n        propertyPicker.cls = me.allPropertyPickerClasses;\n        operatorPicker.cls = me.allOperatorPickerClasses;\n        me.populateUIFromFilter();\n    }\n    changeDateFormat(dateFormat) {\n        return this.L(dateFormat);\n    }\n    get allChildInputs() {\n        const { propertyPicker, operatorPicker, caseSensitive } = this.widgetMap;\n        return [propertyPicker, operatorPicker, ...this.valueFields, caseSensitive];\n    }\n    updateDisabled(newDisabled) {\n        this.allChildInputs.forEach(field => field.disabled = newDisabled);\n    }\n    updateReadOnly(newReadOnly) {\n        const { propertyPicker, operatorPicker } = this.widgetMap;\n        this.allChildInputs.forEach(field => field.readOnly = newReadOnly);\n        // Respect these individual configs when un-setting global readOnly\n        propertyPicker.readOnly = propertyPicker.readOnly || newReadOnly;\n        operatorPicker.readOnly = operatorPicker.readOnly || newReadOnly;\n    }\n    updatePropertyLocked(newPropertyLocked) {\n        this.widgetMap.propertyPicker.readOnly = newPropertyLocked || this.readOnly;\n        this.widgetMap.propertyPicker.cls = this.allPropertyPickerClasses;\n    }\n    updateOperatorLocked(newOperatorLocked) {\n        this.widgetMap.operatorPicker.readOnly = newOperatorLocked || this.readOnly;\n        this.widgetMap.operatorPicker.cls = this.allOperatorPickerClasses;\n    }\n    changeOperators(newOperators) {\n        const operators = (newOperators ?? FieldFilterPicker.defaultOperators);\n        return Object.keys(operators).reduce((outOperators, dataType) => ({\n            ...outOperators,\n            [dataType] : operators[dataType].map(op => ({ ...op, text : this.L(op.text) }))\n        }), {});\n    }\n    changeFields(newFields) {\n        let fields = newFields;\n        if (Array.isArray(newFields)) {\n            VersionHelper.deprecate('Core', '6.0.0', 'FieldOption[] deprecated, use Object<String, FieldOption> keyed by field name instead');\n            // Support old array syntax for `fields` during deprecation\n            fields = ArrayHelper.keyBy(fields, 'name');\n        }\n        return fields;\n    }\n    get isMultiSelectValueField() {\n        return ['isIncludedIn', 'isNotIncludedIn'].includes(this._filter?.operator);\n    }\n    get allPropertyPickerClasses() {\n        return new DomClassList(`${clsBase}-property`, this.propertyFieldConfig?.cls, {\n            [`${clsBase}-combo-locked`] : this.propertyLocked\n        });\n    }\n    get allOperatorPickerClasses() {\n        return new DomClassList(`${clsBase}-operator`, this.operatorFieldConfig?.cls, {\n            [`${clsBase}-combo-locked`] : this.operatorLocked\n        });\n    }\n    getValueFieldConfigs() {\n        const\n            me = this,\n            {\n                valueFieldCls,\n                fieldType,\n                _filter: { operator },\n                onValueChange,\n                filterValues,\n                isMultiSelectValueField,\n                operatorArgCount,\n                getValueFieldConfig,\n                fieldIsRelation,\n                triggerChangeOnInput\n            } = me,\n            valueFieldPlaceholders = ObjectHelper.merge(\n                {},\n                FieldFilterPicker.defaultValueFieldPlaceholders,\n                me.valueFieldPlaceholders\n            );\n        if (!fieldType || !operator || operatorArgCount === 0) {\n            return [];\n        }\n        let valueFieldCfg = {\n            type              : 'textfield', // replaced as needed below\n            internalListeners : {\n                change  : onValueChange,\n                input   : triggerChangeOnInput ? onValueChange : null,\n                thisObj : me\n            },\n            bubbleEvents : { keydown : true },\n            cls          : valueFieldCls,\n            dataset      : {\n                type : fieldType\n            },\n            placeholder             : me.L(valueFieldPlaceholders[isMultiSelectValueField ? 'list' : fieldIsRelation ? 'relation' : fieldType]),\n            highlightExternalChange : false\n        };\n        if (isMultiSelectValueField || fieldIsRelation) {\n            valueFieldCfg = {\n                ...valueFieldCfg,\n                type              : 'combo',\n                multiSelect       : isMultiSelectValueField,\n                createOnUnmatched : true,\n                items             : me.getUniqueDataValues(filterValues),\n                value             : filterValues ?? []\n            };\n        }\n        else if (['number', 'date', 'boolean', 'duration', 'time'].includes(fieldType)) {\n            valueFieldCfg.type = `${fieldType}field`;\n        }\n        // Allow client to modify value field config\n        if (getValueFieldConfig) {\n            valueFieldCfg = me.callback(getValueFieldConfig, me, [me.filter, valueFieldCfg]);\n        }\n        if (isMultiSelectValueField) {\n            // We only support a single multi-select Combo for now\n            return [valueFieldCfg];\n        }\n        return ArrayHelper.populate(operatorArgCount, index => ([{\n            type    : 'widget',\n            tag     : 'div',\n            cls     : `${clsBase}-value-separator`,\n            content : me.L('L{FieldFilterPicker.and}')\n        }, {\n            ...valueFieldCfg,\n            value : filterValues[index]\n        }])).flat().slice(1);\n    }\n    /**\n     * Return an array of unique values in the data store for the currently selected field. If no store is\n     * configured or no field is selected, returns an empty array.\n     */\n    getUniqueDataValues(extraValuesToInclude = []) {\n        const\n            me            = this,\n            { fieldType } = me;\n        if (!me.store || !me._filter?.property) {\n            return [];\n        }\n        const { relatedDisplayField } = me.selectedField;\n        let values,\n            sortedValues;\n        if (me.fieldIsRelation) {\n            const { foreignStore } = me.currentPropertyRelationConfig;\n            if (relatedDisplayField) {\n                // Display field specified -- sort by text label;\n                // this bypasses the type-specific sorting for raw data values below\n                values = foreignStore.allRecords.reduce((options, record) => {\n                    if (record.id != null) {\n                        options.push({\n                            text  : record.getValue(relatedDisplayField),\n                            value : record.id\n                        });\n                    }\n                    return options;\n                }, []);\n                // Currently only support getting text from remote field and sorting as text\n                sortedValues = values.sort((a, b) => me.sortStrings(a.text, b.text));\n            }\n            else {\n                // If no display field, fall back to only data values\n                values = foreignStore.allRecords.map(record => record.id);\n            }\n        }\n        else {\n            // Local data field\n            values = me.store.allRecords.map(record => record.getValue(me._filter.property));\n        }\n        if (!sortedValues) {\n            values.push(...extraValuesToInclude);\n            const uniqueValues = ArrayHelper.unique(values.reduce((primitiveValues, value) => {\n                if (value != null && String(value).trim() !== '') {\n                    // Get primitive values from complex types, for deduping\n                    if (fieldType === 'date') {\n                        primitiveValues.push(value.valueOf());\n                    }\n                    else if (fieldType === 'duration') {\n                        primitiveValues.push(value.toString());\n                    }\n                    else {\n                        primitiveValues.push(value);\n                    }\n                }\n                return primitiveValues;\n            }, []));\n            // Sort\n            if (fieldType === 'string') {\n                sortedValues = uniqueValues.sort(me.sortStrings);\n            }\n            else if (fieldType === 'duration') {\n                sortedValues = uniqueValues\n                    .map(durationStr => new Duration(durationStr))\n                    .filter(duration => duration.isValid)\n                    .sort(me.sortDurations);\n            }\n            else {\n                sortedValues = uniqueValues.sort(me.sortNumerics);\n            }\n            // Provide labels for complex value types\n            if (fieldType === 'date') {\n                sortedValues = sortedValues.map(timestamp => {\n                    const date = new Date(timestamp);\n                    return {\n                        text  : DateHelper.format(date, me.dateFormat),\n                        value : timestamp\n                    };\n                });\n            }\n            else if (fieldType === 'duration') {\n                sortedValues = sortedValues.map(duration => duration.toString());\n            }\n        }\n        return sortedValues;\n    }\n    sortStrings(a, b) {\n        return (a ?? emptyString).localeCompare(b ?? emptyString);\n    }\n    sortNumerics(a, b) {\n        return a - b;\n    }\n    sortDurations(a, b) {\n        return a.valueOf() - b.valueOf();\n    }\n    get fieldType() {\n        return this.selectedField?.type;\n    }\n    get selectedField() {\n        return this.fields?.[this._filter?.property];\n    }\n    get propertyOptions() {\n        return Object.entries(this.fields ?? {})\n            .filter(([, fieldDef]) =>\n                filterableFieldDataTypes[fieldDef.type] ||\n                isSupportedDurationField(fieldDef)\n            )\n            .map(([fieldName, { title }]) => ({ value : fieldName, text : title ?? fieldName }))\n            .sort((a, b) => a.text.localeCompare(b.text));\n    }\n    get operatorOptions() {\n        return this.operators[this.fieldIsRelation ? 'relation' : this.fieldType];\n    }\n    get fieldIsRelation() {\n        return Boolean(this.currentPropertyRelationConfig);\n    }\n    get currentPropertyRelationConfig() {\n        return this.store?.modelRelations?.find(({ foreignKey }) => foreignKey === this._filter?.property);\n    }\n    updateOperators() {\n        delete this._operatorArgCountLookup;\n    }\n    /**\n     * @internal\n     */\n    get operatorArgCountLookup() {\n        return this._operatorArgCountLookup ||\n            (this._operatorArgCountLookup = FieldFilterPicker.buildOperatorArgCountLookup(this.operators));\n    }\n    updateFilter() {\n        if (this._filter) {\n            this.onFilterChange();\n        }\n    }\n    updateStore(newStore) {\n        this._store?.un(this);\n        newStore?.ion({ refresh : 'onStoreRefresh', thisObj : this });\n        this.inferFieldTypes();\n    }\n    onStoreRefresh({ action }) {\n        if (this.isMultiSelectValueField && ['dataset', 'create', 'update', 'delete'].includes(action)) {\n            this.valueFields[0].items = this.getUniqueDataValues(this.filterValues);\n        }\n    }\n    refreshValueFields() {\n        const\n            me = this,\n            { valueFields } = me.widgetMap,\n            {\n                fieldType,\n                operatorArgCount,\n                _filter: { property, operator }\n            } = me,\n            isMultiValue = multiValueOperators[operator];\n        // Put value fields on own row / adjust size for data type\n        valueFields.element.className = new DomClassList({\n            [`${clsBase}-values`]              : true,\n            [`${clsBase}-values-multiple`]     : isMultiValue,\n            [`${clsBase}-values-${fieldType}`] : fieldType !== undefined,\n            'b-hidden'                         : property == undefined || operator == undefined || operatorArgCount === 0\n        });\n        valueFields.removeAll();\n        valueFields.add(me.getValueFieldConfigs());\n        delete me._valueFields;\n        me.refreshCaseSensitive();\n    }\n    refreshCaseSensitive() {\n        const\n            me = this,\n            { fieldType, operatorArgCount, isMultiSelectValueField } = me,\n            operator = me._filter?.operator,\n            { caseSensitive } = me.widgetMap;\n        caseSensitive.hidden =\n            fieldType !== 'string' ||\n            !operator ||\n            isMultiSelectValueField ||\n            operatorArgCount === 0;\n        caseSensitive.checked = me._filter?.caseSensitive !== false;\n    }\n    onPropertySelect(event) {\n        const\n            me = this,\n            { _filter } = me;\n        _filter.property = event.record?.data.value || null;\n        if (me.fieldType !== me._fieldType) {\n            _filter.operator = null;\n            _filter.value = null;\n        }\n        me._fieldType = _filter.type = me.fieldType;\n        me.refreshOperatorPicker();\n        me.refreshValueFields();\n        me.triggerChange();\n    }\n    onCaseSensitiveChange({ checked }) {\n        this._filter.caseSensitive = checked;\n        this.triggerChange();\n    }\n    onOperatorSelect(event) {\n        const\n            me = this,\n            wasMultiSelectValueField = me.isMultiSelectValueField;\n        const prevArgCount = this.operatorArgCount;\n        me._filter.operator = event.record?.data.value || null;\n        if (me.operatorArgCount !== prevArgCount) {\n            me._filter.value = null;\n        }\n        if (me.isMultiSelectValueField && !wasMultiSelectValueField) {\n            me._filter.value = [];\n        }\n        me.refreshValueFields();\n        me.triggerChange();\n    }\n    triggerChange() {\n        const { filter, isValid } = this;\n        /**\n         * Fires when the filter is modified.\n         * @event change\n         * @param {Core.widget.FieldFilterPicker} source The FieldFilterPicker instance that fired the event.\n         * @param {Array} filter The {@link Core.util.CollectionFilter} configuration object for the filter represented by this\n         *                       {@link Core.widget.FieldFilterPicker}.\n         * @param {Boolean} isValid Whether the current configuration object represents a complete and valid filter\n         */\n        this.trigger('change', {\n            filter,\n            isValid\n        });\n    }\n    onValueChange() {\n        const\n            me = this,\n            { isMultiSelectValueField, fieldType, _filter } = me,\n            values = this.valueFields.map(field => field.value);\n        if (isMultiSelectValueField && fieldType === 'date') {\n            _filter.value = values[0].map(timestamp => new Date(timestamp));\n        }\n        else if (isMultiSelectValueField && fieldType === 'duration') {\n            _filter.value = values[0].map(durationStr => new Duration(durationStr));\n        }\n        else {\n            // Treat end date as inclusive by setting time to end of day\n            if (fieldType === 'date' && _filter.operator === 'between' && DateHelper.isValidDate(values[1])) {\n                values[1].setHours(23, 59, 59, 999);\n            }\n            _filter.value = values.length === 1 ? values[0] : values;\n        }\n        me.triggerChange();\n    }\n    refreshOperatorPicker() {\n        const\n            { operatorPicker } = this.widgetMap,\n            { _filter: { operator, property }, operatorOptions } = this;\n        operatorPicker.items = operatorOptions;\n        operatorPicker.value = operator;\n        operatorPicker.hidden = property === null;\n    }\n    populateUIFromFilter(forceRefreshValueFields = false) {\n        const\n            me = this,\n            {\n                filterValues,\n                widgetMap: { propertyPicker, operatorPicker },\n                _filter: { property, operator, disabled },\n                propertyOptions,\n                operatorOptions,\n                isMultiSelectValueField\n            } = me;\n        propertyPicker.items = propertyOptions;\n        operatorPicker.items = operatorOptions;\n        operatorPicker.hidden = property === null;\n        let refreshValueFields = forceRefreshValueFields;\n        if (propertyPicker.value !== property) {\n            propertyPicker.value = property;\n            me.refreshOperatorPicker();\n            refreshValueFields = true;\n        }\n        if (operatorPicker.value !== operator) {\n            if (operator === null || !operatorPicker.items.find(({ value }) => value === operator)) {\n                operatorPicker.clear();\n            }\n            else {\n                operatorPicker.value = operator;\n            }\n            refreshValueFields = true;\n        }\n        if (!operator && operatorPicker.items.length === 1) {\n            operatorPicker.value = me._filter.operator = operatorPicker.items[0].value;\n        }\n        if (refreshValueFields) {\n            me.refreshValueFields();\n        }\n        me.refreshCaseSensitive();\n        me.valueFields.forEach((valueField, fieldIndex) => {\n            if (isMultiSelectValueField && (valueField.value.length > 0 || filterValues.length > 0)) {\n                if (me.fieldType === 'date') {\n                    valueField.value = filterValues.map(date => date?.valueOf());\n                }\n                else if (me.fieldType === 'duration') {\n                    valueField.value = filterValues.map(duration => duration?.toString());\n                }\n                else {\n                    valueField.value = filterValues;\n                }\n            }\n            else if (fieldIndex >= filterValues.length) {\n                valueField.clear();\n            }\n            else {\n                valueField.value = filterValues[fieldIndex];\n            }\n        });\n        // Grey out all inputs if filter is disabled\n        me.allChildInputs.forEach(widget => widget.disabled = me.disabled || disabled);\n    }\n    get valueFields() {\n        return this._valueFields ||\n            (this._valueFields = this.widgetMap.valueFields.queryAll(\n                w => w.owner === this.widgetMap.valueFields && valueInputTypes[w.type]));\n    }\n    get filterValues() {\n        if (this._filter?.value == null) {\n            return [];\n        }\n        return ArrayHelper.asArray(this._filter.value);\n    }\n    // Must be called manually when filter modified externally\n    onFilterChange() {\n        const\n            me = this,\n            newFieldType = me.fieldType,\n            forceRefreshValueFields = newFieldType !== me._fieldType;\n        me._fieldType = me._filter.type = newFieldType;\n        me.populateUIFromFilter(forceRefreshValueFields);\n    }\n    get operatorArgCount() {\n        const { fieldType, filter: { operator }, operatorArgCountLookup } = this;\n        return (fieldType && operator) ? operatorArgCountLookup[fieldType][operator] : 1;\n    }\n    get isValid() {\n        const\n            me = this,\n            { filter, fieldType, filterValues, isMultiSelectValueField, operatorArgCount } = me,\n            { operator } = filter,\n            missingValue = operatorArgCount > 0 && filter?.value == null;\n        return (\n            // fieldType here validates that we have a matching field\n            fieldType &&\n            operator &&\n            !missingValue &&\n            (\n                (isMultiSelectValueField && filterValues.length > 0) ||\n                (filterValues.length === operatorArgCount)\n            ) &&\n            filterValues.every(value => value != null &&\n                (fieldType !== 'duration' || value.isValid))\n        );\n    }\n    focus() {\n        (this.valueFields.find(f => f.isEmptyInput) ?? this.operatorPicker ?? this.propertyPicker)?.focus();\n    }\n    inferFieldTypes() {\n        if (this.store && this.fields) {\n            for (const [fieldName, fieldDef] of Object.entries(this.fields)) {\n                if (fieldDef.type === 'auto') {\n                    fieldDef.type = FieldFilterPicker.inferFieldType(this.store, fieldName);\n                }\n            }\n        }\n    }\n    static inferFieldType(store, fieldName) {\n        const firstValue = store.find(record => record.getValue(fieldName) != null, true)?.getValue(fieldName);\n        if (firstValue !== undefined) {\n            const valueType = typeof firstValue;\n            if (valueType === 'object' && firstValue instanceof Date) {\n                return 'date';\n            }\n            else if (isInferrableType[valueType]) {\n                return valueType;\n            }\n        }\n        return 'auto';\n    }\n}\nFieldFilterPicker.initClass();\nFieldFilterPicker._$name = 'FieldFilterPicker';", "import Widget from './Widget.js';\n/**\n * @module Core/widget/Label\n */\n/**\n * The `Label` widget wraps an `<label>Text</label>` element.\n *\n * {@inlineexample Core/widget/Label.js vertical}\n *\n * @extends Core/widget/Widget\n * @classtype label\n * @widget\n */\nexport default class Label extends Widget {\n    static $name = 'Label';\n    static type = 'label';\n    static configurable = {\n        /**\n         * Get/set label text\n         * @prp {String}\n         */\n        text : null,\n        localizableProperties : ['text']\n    };\n    compose() {\n        const { text, html } = this;\n        return {\n            tag : 'label',\n            text,\n            html\n        };\n    }\n}\nLabel.initClass();\nLabel._$name = 'Label';", "import './Checkbox.js';\nimport Container from './Container.js';\nimport './Label.js';\nimport './FieldFilterPicker.js';\n/**\n * @module Core/widget/FieldFilterPickerGroup\n */\n/**\n * A set of {@link Core.widget.FieldFilterPicker}s, representing an array\n * of {@link Core.util.CollectionFilter}s. The filters are provided to the\n * picker as an array of filter configuration objects.\n *\n * {@inlineexample Core/widget/FieldFilterPickerGroup.js}\n *\n * When {@link #config-store} is provided in the configuration, the picker group will\n * read filters from the store and monitor for filter changes, and reflect any changes. It is\n * possible to synchronize multiple {@link Core.widget.FieldFilterPickerGroup}s by configuring\n * them with the same store.\n *\n * Does not support modifying filters defined as custom functions.\n *\n * @extends Core/widget/Container\n * @classtype fieldfilterpickergroup\n * @widget\n */\nexport default class FieldFilterPickerGroup extends Container {\n    //region Config\n    static $name = 'FieldFilterPickerGroup';\n    static type = 'fieldfilterpickergroup';\n    /**\n     * @private\n     */\n    static addFilterButtonDefaultText = 'L{FieldFilterPickerGroup.addFilter}';\n    static configurable = {\n        /**\n         * Array of {@link Core.util.CollectionFilter} configuration objects. One\n         * {@link Core.widget.FieldFilterPicker} will be created\n         * for each object in the array.\n         *\n         * When {@link #config-store} is provided, any filters in the store will\n         * be automatically added and do not need to be provided explicitly.\n         *\n         * Example:\n         * ```javascript\n         * filters: [{\n         *     // Filter properties should exist among field names configured\n         *     // via `fields` or `store`\n         *     property: 'age',\n         *     operator: '<',\n         *     value: 30\n         * },{\n         *     property: 'title',\n         *     operator: 'startsWith',\n         *     value: 'Director'\n         * }]\n         * ```\n         *\n         * @config\n         * @type {CollectionFilterConfig[]}\n         */\n        filters : [],\n        /**\n         * Dictionary of {@link Core.widget.FieldFilterPicker#typedef-FieldOption} representing the fields against which filters can be defined,\n         * keyed by field name.\n         *\n         * If filtering a {@link Grid.view.Grid}, consider using {@link Grid.widget.GridFieldFilterPicker}, which can be configured\n         * with an existing {@link Grid.view.Grid} instead of, or in combination with, defining fields manually.\n         *\n         * Example:\n         * ```javascript\n         * fields: {\n         *     // Allow filters to be defined against the 'age' and 'role' fields in our data\n         *     age  : { text: 'Age', type: 'number' },\n         *     role : { text: 'Role', type: 'string' }\n         * }\n         * ```\n         *\n         * @config {Object<String,FieldOption>}\n         * @deprecated 5.3.0 Syntax accepting FieldOptions[] was deprecated in favor of dictionary and will be removed in 6.0\n         */\n        fields : null,\n        /**\n         * Whether the picker group is disabled.\n         *\n         * @config {Boolean}\n         * @default\n         */\n        disabled : false,\n        /**\n         * Whether the picker group is read-only.\n         *\n         * Example:\n         * fields: [\n         *    { name: 'age', type: 'number' },\n         *    { name: 'title', type: 'string' }\n         * ]\n         *\n         * @config {Boolean}\n         * @default\n         */\n        readOnly : false,\n        layout : 'vbox',\n        /**\n         * The {@link Core.data.Store} whose records will be filtered. The store's {@link Core.data.Store#property-modelClass}\n         * will be used to determine field types.\n         *\n         * This store will be kept in sync with the filters defined in the picker group, and new filters added to the store\n         * via other means will appear in this filter group when they are able to be modified by it. (Some types of filters,\n         * like arbitrary filter functions, cannot be managed through this widget.)\n         *\n         * As a corollary, multiple `FieldFilterPickerGroup`s configured with the same store will stay in sync, showing the\n         * same filters as the store's filters change.\n         *\n         * @config {Core.data.Store}\n         */\n        store : null,\n        /**\n         * When `limitToProperty` is set to the name of an available field (as specified either\n         * explicitly in {@link #config-fields} or implicitly in the\n         * {@link #config-store}'s model), it has the following effects:\n         *\n         * - the picker group will only show filters defined on the specified property\n         * - it will automatically set the `property` to the specified property for all newly added\n         *   filters where the property is not already set\n         * - the property selector is made read-only\n         *\n         * @config {String}\n         */\n        limitToProperty : null,\n        /**\n         * Optional CSS class to apply to the value field(s).\n         *\n         * @config {String}\n         * @private\n         */\n        valueFieldCls : null,\n        /**\n         * Show a button at the bottom of the group that adds a new, blank filter to the group.\n         *\n         * @config {Boolean}\n         * @default\n         */\n        showAddFilterButton : true,\n        /**\n         * Optional predicate that returns whether a given filter can be deleted. When `canDeleteFilter` is provided,\n         * it will be called for each filter and will not show the delete button for those for which the\n         * function returns `false`.\n         *\n         * @config {Function}\n         * @param {*} filter  filter for checking\n         * @returns {Boolean} truthy value if filter can be deleted\n         */\n        canDeleteFilter : null,\n        /**\n         * Optional function that returns {@link Core.widget.FieldFilterPicker} configuration properties for\n         * a given filter. When `getFieldFilterPickerConfig` is provided, it will be called for each filter and the returned\n         * object will be merged with the configuration properties for the individual\n         * {@link Core.widget.FieldFilterPicker} representing that filter.\n         *\n         * The supplied function should accept a single argument, the {@link Core.util.CollectionFilter} whose picker\n         * is being created.\n         *\n         * @config {Function}\n         * @returns {FieldFilterPickerConfig}\n         */\n        getFieldFilterPickerConfig : null,\n        /**\n         * Optional predicate that returns whether a given filter can be managed by this widget. When `canManageFilter`\n         * is provided, it will be used to decide whether to display filters found in the configured\n         * {@link #config-store}.\n         *\n         * @config {Function}\n         * @param {*} filter  filter for checking\n         * @returns {Boolean} truthy value if filter can be managed\n         */\n        canManageFilter : null,\n        /**\n         * Sets the text displayed in the 'add filter' button if one is present.\n         *\n         * @config {String}\n         */\n        addFilterButtonText : null,\n        /**\n         * Whether to raise {@link #event-change} events as the user types into a value field. If `false`,\n         * {@link #event-change} events will be raised only when the value input field's own `change` event\n         * occurs, for example on field blur.\n         *\n         * @config {Boolean}\n         * @default\n         */\n        triggerChangeOnInput : true,\n        /**\n         * @private\n         */\n        items : {\n            pickers : {\n                type       : 'container',\n                layout     : 'vbox',\n                scrollable : true,\n                items      : {}\n            },\n            addFilterButton : {\n                type   : 'button',\n                text   : FieldFilterPickerGroup.addFilterButtonDefaultText,\n                cls    : `b-${FieldFilterPickerGroup.type}-add-button`,\n                hidden : true\n            }\n        },\n        /**\n         * When specified, overrides the built-in list of available operators. See\n         * {@link Core.widget.FieldFilterPicker#config-operators}.\n         *\n         * @config {Object}\n         */\n        operators : null,\n        /**\n         * The date format string used to display dates when using the 'is one of' / 'is not one of' operators with a date\n         * field. Defaults to the current locale's `FieldFilterPicker.dateFormat` value.\n         *\n         * @config {String}\n         * @default\n         */\n        dateFormat : 'L{FieldFilterPicker.dateFormat}'\n    };\n    // endregion\n    static childPickerType = 'fieldfilterpicker';\n    afterConstruct() {\n        const me = this;\n        me.validateConfig();\n        const { addFilterButton } = me.widgetMap;\n        addFilterButton.ion({ click : 'addFilter', thisObj : me });\n        addFilterButton.text = me.L(addFilterButton.text);\n        me.store && me.updateStore(me.store);\n        super.afterConstruct();\n    }\n    changeDateFormat(dateFormat) {\n        return this.L(dateFormat);\n    }\n    validateConfig() {\n        if (!this.fields && !this.store) {\n            throw new Error(\n                `FieldFilterPickerGroup requires either a 'fields' or 'store' config property.`\n            );\n        }\n    }\n    updateFields(newFields) {\n        this.widgetMap.pickers.childItems.forEach(picker => picker.fields = newFields);\n    }\n    updateFilters(newFilters, oldFilters) {\n        const me = this;\n        if (oldFilters) {\n            oldFilters\n                .filter(filter => !newFilters.find(newFilter => newFilter.id === filter.id))\n                .forEach(filter => me.store?.removeFilter(filter.id));\n        }\n        newFilters.forEach(filter => filter.id = filter.id || me.nextFilterId);\n        me.widgetMap.pickers.items = newFilters?.map(filter => me.getPickerRowConfig(filter)) || [];\n    }\n    changeFilters(newFilters) {\n        const { canManageFilter } = this;\n        return (newFilters && canManageFilter)\n            ? newFilters.filter(filter => this.callback(canManageFilter, this, [filter]))\n            : newFilters;\n    }\n    updateStore(newStore) {\n        const me = this;\n        me.detachListeners('store');\n        if (newStore) {\n            // Make sure the store has all of our configured filters\n            me.widgetMap.pickers.childItems.forEach(({ widgetMap: { filterPicker: { filter, isValid } } }) => {\n                newStore.removeFilter(filter.id, true);\n                if (isValid) {\n                    newStore.addFilter(filter, true);\n                }\n            });\n            newStore.filter();\n            me.appendFiltersFromStore();\n            newStore.ion({\n                name    : 'store',\n                filter  : 'onStoreFilter',\n                thisObj : me\n            });\n        }\n        me.widgetMap.pickers.childItems.forEach(picker => picker.store = newStore);\n    }\n    updateShowAddFilterButton(newShow) {\n        this.widgetMap.addFilterButton.hidden = !newShow;\n    }\n    updateAddFilterButtonText(newText) {\n        this.widgetMap.addFilterButton.text = newText ?? FieldFilterPickerGroup.addFilterButtonDefaultText;\n    }\n    /**\n     * Find any filters the store has that we don't know about yet, and add to our list\n     * @private\n     */\n    appendFiltersFromStore() {\n        const\n            me = this;\n        me.store.filters.forEach(filter => {\n            const\n                canManage = me.canManage(filter),\n                { property, operator, id } = filter;\n            if (canManage && property && operator &&\n                !me.filters?.find(filter => filter.id === id)\n            ) {\n                me.appendFilter(filter);\n            }\n        });\n    }\n    /**\n     * @private\n     */\n    canManage(filter) {\n        const me = this;\n        return !me.canManageFilter || (me.callback(me.canManageFilter, me, [filter]) === true);\n    }\n    /**\n     * Get the configuration object for one child FieldFilterPicker.\n     * @param {Core.util.CollectionFilter} filter The filter represented by the child FieldFilterPicker\n     * @returns {Object} The FieldFilterPicker configuration\n     */\n    getFilterPickerConfig(filter) {\n        const\n            me = this,\n            {\n                fields, store, disabled, readOnly, valueFieldCls, operators, limitToProperty, dateFormat,\n                getFieldFilterPickerConfig, triggerChangeOnInput\n            } = me;\n        return {\n            type              : me.constructor.childPickerType,\n            fields            : fields ?? me.getFieldsFromStore(store),\n            filter,\n            store,\n            disabled,\n            readOnly,\n            propertyLocked    : Boolean(limitToProperty),\n            valueFieldCls,\n            operators,\n            dateFormat,\n            internalListeners : {\n                change  : 'onFilterPickerChange',\n                thisObj : me\n            },\n            flex : 1,\n            triggerChangeOnInput,\n            ...(getFieldFilterPickerConfig ? me.callback(getFieldFilterPickerConfig, me, [filter]) : undefined)\n        };\n    }\n    /**\n     * Get store fields as {@link Core.widget.FieldFilterPicker#typedef-FieldOption}s in a dictionary keyed by name.\n     * @private\n     */\n    getFieldsFromStore(store) {\n        return Object.fromEntries(store.modelClass?.fields.map(({ name, type }) => [name, { type }]) ?? []);\n    }\n    getPickerRowConfig(filter) {\n        const\n            me = this,\n            { disabled, readOnly, canDeleteFilter } = me,\n            canDelete = !(canDeleteFilter && (me.callback(canDeleteFilter, me, [filter]) === false));\n        return {\n            type   : 'container',\n            layout : 'box',\n            cls    : {\n                [`b-${FieldFilterPickerGroup.type}-row`]           : true,\n                [`b-${FieldFilterPickerGroup.type}-row-removable`] : canDelete\n            },\n            dataset : {\n                separatorText : me.L('L{FieldFilterPicker.and}')\n            },\n            items : {\n                activeCheckbox : {\n                    type              : 'checkbox',\n                    disabled,\n                    readOnly,\n                    checked           : !Boolean(filter.disabled),\n                    internalListeners : {\n                        change  : 'onFilterActiveChange',\n                        thisObj : me\n                    },\n                    cls : `b-${FieldFilterPickerGroup.type}-filter-active`\n                },\n                filterPicker : me.getFilterPickerConfig(filter),\n                removeButton : {\n                    type              : 'button',\n                    ref               : 'removeButton',\n                    disabled,\n                    readOnly,\n                    hidden            : !canDelete,\n                    cls               : `b-transparent b-${FieldFilterPickerGroup.type}-remove`,\n                    icon              : 'b-fa-trash',\n                    internalListeners : {\n                        click   : 'removeFilter',\n                        thisObj : me\n                    }\n                }\n            }\n        };\n    }\n    get allInputs() {\n        const childInputTypes = [this.constructor.childPickerType, 'button', 'checkbox'];\n        return this.queryAll(w => childInputTypes.includes(w.type));\n    }\n    updateDisabled(newDisabled) {\n        this.allInputs.forEach(input => input.disabled = newDisabled);\n    }\n    updateReadOnly(newReadOnly) {\n        this.allInputs.forEach(input => input.readOnly = newReadOnly);\n    }\n    onFilterActiveChange({ source, checked }) {\n        const\n            me = this,\n            filterIndex = me.getFilterIndex(source),\n            filter = me.filters[filterIndex],\n            filterPicker = me.getFilterPicker(filterIndex);\n        filter.disabled = !checked;\n        filterPicker.onFilterChange();\n        if (me.store && filterPicker.isValid) {\n            me.store.addFilter(filter, true);\n        }\n        me.updateStoreFilter();\n        me.triggerChange();\n    }\n    onFilterPickerChange({ source, filter, isValid }) {\n        const\n            me = this,\n            { store } = me,\n            filterIndex = me.getFilterIndex(source);\n        if (store) {\n            store.removeFilter(filter.id, true);\n            if (isValid) {\n                store.addFilter(filter, true);\n            }\n            me.updateStoreFilter();\n        }\n        Object.assign(me.filters[filterIndex], filter);\n        me.triggerChange();\n    }\n    getFilterIndex(eventSource) {\n        return this.widgetMap.pickers.childItems.indexOf(\n            eventSource.containingWidget\n        );\n    }\n    getPickerRow(index) {\n        return this.widgetMap.pickers.childItems[index];\n    }\n    /**\n     * Return the {@link Core.widget.FieldFilterPicker} for the filter at the specified index.\n     * @param {Number} filterIndex\n     * @returns {Core.widget.FieldFilterPicker}\n     */\n    getFilterPicker(filterIndex) {\n        return this.getPickerRow(filterIndex).widgetMap.filterPicker;\n    }\n    get nextFilterId() {\n        this._nextId = (this._nextId || 0) + 1;\n        return `${this.id}-filter-${this._nextId}`;\n    }\n    removeFilter({ source }) {\n        const\n            me = this,\n            filterIndex = me.getFilterIndex(source),\n            filter = me.filters[filterIndex],\n            pickerRow = me.getPickerRow(filterIndex),\n            newFocusWidget = me.query(w => w.isFocusable && w.type !== 'container' && !pickerRow.contains(w));\n        if (newFocusWidget) {\n            newFocusWidget.focus();\n        }\n        me.removeFilterAt(filterIndex);\n        if (me.store) {\n            me.store.removeFilter(filter.id, true);\n            me.updateStoreFilter();\n        }\n        me.trigger('remove', { filter });\n        me.triggerChange();\n    }\n    /**\n     * Appends a filter at the bottom of the list.\n     * @param {CollectionFilterConfig} [filter={}] Configuration object for the {@link Core.util.CollectionFilter} to\n     * add. Defaults to an empty filter.\n     */\n    addFilter({ property = null, operator = null, value = null } = {}) {\n        const\n            me = this,\n            { filters } = me,\n            newFilter = {\n                property      : me.limitToProperty || property,\n                operator,\n                value,\n                disabled      : false,\n                id            : me.nextFilterId,\n                caseSensitive : false\n            };\n        /**\n         * Fires before a new filter is added to the picker group (and its store, if configured and the filter is valid).\n         * Return `false` from the event handler to prevent the filter being added.\n         *\n         * @event beforeAddFilter\n         * @preventable\n         * @param {Core.widget.FieldFilterPicker} source The FieldFilterPicker instance that fired the event.\n         * @param {CollectionFilterConfig} filter The {@link Core.util.CollectionFilter} configuration object for the\n         *        filter represented by this {@link Core.widget.FieldFilterPicker}.\n         */\n        if (!me.trigger('beforeAddFilter', { filter : newFilter })) {\n            return;\n        }\n        me.appendFilter(newFilter);\n        if (me.getFilterPicker(filters.length - 1).isValid) {\n            me.store?.addFilter(newFilter, true);\n            me.store && me.updateStoreFilter();\n        }\n        me.trigger('add', { filter : newFilter });\n        me.triggerChange();\n    }\n    /**\n     * @private\n     */\n    appendFilter(filter) {\n        const me = this;\n        if (!me.limitToProperty || filter.property === me.limitToProperty) {\n            me.filters.push(filter);\n            me.widgetMap.pickers.add(\n                me.getPickerRowConfig(filter, me.filters.length - 1)\n            );\n        }\n    }\n    onStoreFilter(event) {\n        const me = this;\n        if (me._isUpdatingStore) {\n            return;\n        }\n        const\n            { filters } = event,\n            storeFiltersById = filters.values.reduce((byId, filter) =>\n                ({ ...byId, [filter.id] : filter }), {});\n        for (\n            let filterIndex = me.filters.length - 1;\n            filterIndex >= 0;\n            filterIndex--\n        ) {\n            const\n                filter = me.filters[filterIndex],\n                storeFilter = storeFiltersById[filter.id],\n                filterRow = me.getPickerRow(filterIndex);\n            if (filterRow) {\n                const { filterPicker, activeCheckbox } = filterRow.widgetMap;\n                if (!storeFilter && filterPicker.isValid) {\n                    me.removeFilterAt(filterIndex);\n                }\n                else if (storeFilter !== undefined) {\n                    const\n                        { operator, value, property, disabled, caseSensitive } = storeFilter;\n                    if (filter !== storeFilter) {\n                        Object.assign(filter, { operator, value, property, disabled, caseSensitive });\n                    }\n                    filterPicker.filter = filter;\n                    filterPicker.onFilterChange();\n                    activeCheckbox.checked = !disabled;\n                }\n            }\n        }\n        me.appendFiltersFromStore();\n        me.triggerChange();\n    }\n    /**\n     * Remove the filter at the given index.\n     * @param {Number} filterIndex The index of the filter to remove\n     */\n    removeFilterAt(filterIndex) {\n        const { widgetMap: { pickers }, filters } = this;\n        pickers.remove(pickers.childItems[filterIndex]);\n        filters.splice(filterIndex, 1);\n        this.triggerChange();\n    }\n    /**\n     * Trigger a store re-filter after filters have been silently modified.\n     * @private\n     */\n    updateStoreFilter() {\n        this._isUpdatingStore = true;\n        this.store?.filter();\n        this._isUpdatingStore = false;\n    }\n    /**\n     * Returns the array of filter configuration objects currently represented by this picker group.\n     * @type {CollectionFilterConfig[]}\n     */\n    get value() {\n        return this.filters;\n    }\n    triggerChange() {\n        const\n            { filters } = this,\n            validFilters = filters.filter((f, index) => this.getPickerRow(index).widgetMap.filterPicker.isValid);\n        /**\n         * Fires when any filter in the group is added, removed, or modified.\n         * @event change\n         * @param {Core.widget.FieldFilterPickerGroup} source The FieldFilterPickerGroup instance that fired the event.\n         * @param {CollectionFilterConfig[]} filters The array of {@link Core.util.CollectionFilter} configuration\n         * objects currently represented by the FieldFilterPickerGroup. **IMPORTANT:** Note that this includes all filters\n         * currently present in the UI, including partially completed ones that may not be ready to apply to a Store.\n         * To retrieve only valid filters, use the `validFilters` parameter on this event, or filter out incomplete filters\n         * in your own code.\n         * @param {CollectionFilterConfig[]} validFilters The subset of {@link Core.util.CollectionFilter} configuration\n         * objects in the `filters` parameter on this event that are complete and valid for application to a Store.\n         */\n        this.trigger('change', {\n            filters,\n            validFilters\n        });\n    }\n    /**\n     * Sets all current filters to enabled and checks their checkboxes.\n     */\n    activateAll() {\n        this.setAllActiveStatus(true);\n    }\n    /**\n     * Sets all current filters to disabled and clears their checkboxes.\n     */\n    deactivateAll() {\n        this.setAllActiveStatus(false);\n    }\n    /**\n     * @private\n     */\n    setAllActiveStatus(newActive) {\n        const\n            me = this,\n            { _filters, store } = me;\n        _filters.forEach((filter, filterIndex) => {\n            // Only do anything if status is changing\n            if (newActive === filter.disabled) {\n                const { filterPicker, activeCheckbox } = me.getPickerRow(filterIndex).widgetMap;\n                filter.disabled = !newActive;\n                filterPicker.onFilterChange();\n                activeCheckbox.checked = newActive;\n                if (newActive && store && filterPicker.isValid) {\n                    store.addFilter(filter, true);\n                }\n            }\n        });\n        me.updateStoreFilter();\n    }\n    focus() {\n        const { length } = this._filters;\n        if (length > 0) {\n            this.getPickerRow(length - 1)?.widgetMap.filterPicker.focus();\n        }\n    }\n}\nFieldFilterPickerGroup.initClass();\nFieldFilterPickerGroup._$name = 'FieldFilterPickerGroup';", "import Popup from './Popup.js';\nimport './Button.js';\nimport './TextField.js';\nimport Widget from './Widget.js';\nimport BrowserHelper from '../helper/BrowserHelper.js';\nimport DomHelper from '../helper/DomHelper.js';\n/**\n * @module Core/widget/MessageDialog\n */\nconst items = [\n    {\n        ref     : 'cancelButton',\n        cls     : 'b-messagedialog-cancelbutton b-gray',\n        text    : 'L{Object.Cancel}',\n        onClick : 'up.onCancelClick'\n    },\n    {\n        ref     : 'okButton',\n        cls     : 'b-messagedialog-okbutton b-raised b-blue',\n        text    : 'L{Object.Ok}',\n        onClick : 'up.onOkClick'\n    }\n];\n// Windows has OK button to the left, Mac / Ubuntu to the right\nif (BrowserHelper.isWindows) {\n    items.reverse();\n}\nclass MessageDialogConstructor extends Popup {\n    static $name = 'MessageDialog';\n    static type = 'messagedialog';\n    static get configurable() {\n        return {\n            centered    : true,\n            modal       : true,\n            hidden      : true,\n            autoShow    : false,\n            closeAction : 'hide',\n            title       : '\\xa0',\n            lazyItems : {\n                $config : ['lazy'],\n                value   : [{\n                    cls : 'b-messagedialog-message',\n                    ref : 'message'\n                }, {\n                    type : 'textfield',\n                    cls  : 'b-messagedialog-input',\n                    ref  : 'input'\n                }]\n            },\n            showClass : null,\n            bbar : {\n                overflow : null,\n                items\n            }\n        };\n    }\n    construct() {\n        /**\n         * The enum value for the OK button\n         * @member {Number} okButton\n         * @readOnly\n         */\n        this.okButton = this.yesButton = 1;\n        /**\n         * The enum value for the Cancel button\n         * @member {Number} cancelButton\n         * @readOnly\n         */\n        this.cancelButton = 3;\n        super.construct(...arguments);\n    }\n    // Protect from queryAll -> destroy\n    destroy() {}\n    /**\n     * Shows a confirm dialog with \"Ok\" and \"Cancel\" buttons. The returned promise resolves passing the button identifier\n     * of the button that was pressed ({@link #property-okButton} or {@link #property-cancelButton}).\n     * @function confirm\n     * @param {Object} options An options object for what to show.\n     * @param {String} [options.title] The title to show in the dialog header.\n     * @param {String} [options.message] The message to show in the dialog body.\n     * @param {String} [options.rootElement] The root element of this widget, defaults to document.body. Use this\n     * if you use the MessageDialog inside a web component ShadowRoot\n     * @param {String|ButtonConfig} [options.cancelButton] A text or a config object to apply to the Cancel button.\n     * @param {String|ButtonConfig} [options.okButton] A text or config object to apply to the OK button.\n     * @returns {Promise} A promise which is resolved when the dialog is closed\n     */\n    async confirm() {\n        return this.showDialog('confirm', ...arguments);\n    }\n    /**\n     * Shows an alert popup with a message. The returned promise resolves when the button is clicked.\n     * @function alert\n     * @param {Object} options An options object for what to show.\n     * @param {String} [options.title] The title to show in the dialog header.\n     * @param {String} [options.message] The message to show in the dialog body.\n     * @param {String} [options.rootElement] The root element of this widget, defaults to document.body. Use this\n     * if you use the MessageDialog inside a web component ShadowRoot\n     * @param {String|ButtonConfig} [options.okButton] A text or config object to apply to the OK button.\n     * @returns {Promise} A promise which is resolved when the dialog is closed\n     */\n    async alert() {\n        return this.showDialog('alert', ...arguments);\n    }\n    /**\n     * Shows a popup with a basic {@link Core.widget.TextField} along with a message. The returned promise resolves when\n     * the dialog is closed and yields an Object with a `button` ({@link #property-okButton} or {@link #property-cancelButton})\n     * and a `text` property with the text the user provided\n     * @function prompt\n     * @param {Object} options An options object for what to show.\n     * @param {String} [options.title] The title to show in the dialog header.\n     * @param {String} [options.message] The message to show in the dialog body.\n     * @param {String} [options.rootElement] The root element of this widget, defaults to document.body. Use this\n     * if you use the MessageDialog inside a web component ShadowRoot\n     * @param {TextFieldConfig} [options.textField] A config object to apply to the TextField.\n     * @param {String|ButtonConfig} [options.cancelButton] A text or a config object to apply to the Cancel button.\n     * @param {String|ButtonConfig} [options.okButton] A text or config object to apply to the OK button.\n     * @returns {Promise} A promise which is resolved when the dialog is closed. The promise yields an Object with\n     * a `button` ({@link #property-okButton} or {@link #property-cancelButton}) and a `text` property with the text the\n     * user provided\n     */\n    async prompt({\n        textField\n    }) {\n        const field = this.widgetMap.input;\n        Widget.reconfigure(field, textField);\n        field.value = '';\n        return this.showDialog('prompt', ...arguments);\n    }\n    showDialog(mode, {\n        message = '',\n        title = '\\xa0',\n        cancelButton,\n        okButton,\n        rootElement = document.body\n    }) {\n        const me = this;\n        me.rootElement = rootElement;\n        // Ensure our child items are instanced\n        me.getConfig('lazyItems');\n        me.title                  = me.optionalL(title);\n        me.widgetMap.message.html = me.optionalL(message);\n        me.showClass              = `b-messagedialog-${mode}`;\n        // Normalize string input to config object\n        if (okButton) {\n            okButton = typeof okButton === 'string' ? { text : okButton } : okButton;\n        }\n        if (cancelButton) {\n            cancelButton = typeof cancelButton === 'string' ? { text : cancelButton } : cancelButton;\n        }\n        // Ensure default configs are applied\n        okButton = Object.assign({}, me.widgetMap.okButton.initialConfig, okButton);\n        cancelButton = Object.assign({}, me.widgetMap.cancelButton.initialConfig, cancelButton);\n        // Ensure strings are localized\n        okButton.text = me.optionalL(okButton.text);\n        cancelButton.text = me.optionalL(cancelButton.text);\n        Widget.reconfigure(me.widgetMap.okButton, okButton);\n        Widget.reconfigure(me.widgetMap.cancelButton, cancelButton);\n        me.show();\n        return me.promise = new Promise(resolve => {\n            me.resolve = resolve;\n        });\n    }\n    show() {\n        const activeElement = DomHelper.getActiveElement(this.element);\n        // So that when we focus, we don't close an autoClose popup, but temporarily become\n        // part of its ownership tree.\n        this.owner = this.element.contains(activeElement) ? null : MessageDialogConstructor.fromElement(document.activeElement);\n        return super.show(...arguments);\n    }\n    updateShowClass(showClass, oldShowClass) {\n        const { classList } = this.element;\n        if (oldShowClass) {\n            classList.remove(oldShowClass);\n        }\n        if (showClass) {\n            classList.add(showClass);\n        }\n    }\n    doResolve(value) {\n        const\n            me          = this,\n            { resolve } = me;\n        if (resolve) {\n            const isPrompt = me.showClass === 'b-messagedialog-prompt';\n            if (isPrompt && value === me.okButton && !me.widgetMap.input.isValid) {\n                return;\n            }\n            me.resolve = me.reject = me.promise = null;\n            resolve(isPrompt ? { button : value, text : me.widgetMap.input.value } : value);\n            me.hide();\n        }\n    }\n    onInternalKeyDown(event) {\n        // Cancel on escape key\n        if (event.key === 'Escape') {\n            event.stopImmediatePropagation();\n            this.onCancelClick();\n        }\n        else if (event.key === 'Enter' && !event.target.closest('.b-button')) {\n            event.stopImmediatePropagation();\n            event.preventDefault(); // Needed to not spill over into next MessageDialog if closing this opens another\n            this.onOkClick();\n        }\n        super.onInternalKeyDown(event);\n    }\n    onOkClick() {\n        this.doResolve(MessageDialog.okButton);\n    }\n    onCancelClick() {\n        this.doResolve(MessageDialog.cancelButton);\n    }\n}\n// Register this widget type with its Factory\nMessageDialogConstructor.initClass();\n// Instantiate MessgeDialog Widget on first use.\nconst MessageDialog = new Proxy({}, {\n    get(target, prop) {\n        const\n            instance = target.instance || (target.instance = new MessageDialogConstructor({\n                rootElement : document.body\n            })),\n            result = instance[prop];\n        return typeof result === 'function' ? result.bind(instance) : result;\n    }\n});\n/**\n * A singleton class which shows common dialogs, similar to the native browser APIs (though these methods do not block the UI thread):\n * - {@link Core.widget.MessageDialog#function-confirm} shows a confirmation dialog with Ok / Cancel buttons\n * - {@link Core.widget.MessageDialog#function-alert} shows an dialog with a message\n * - {@link Core.widget.MessageDialog#function-prompt} shows a dialog with a text input field\n *\n * {@inlineexample Core/widget/MessageDialog.js}\n *\n * @class\n * @singleton\n * @extends Core/widget/Popup\n */\nexport default MessageDialog;\n"],
  "mappings": "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",
  "names": ["valid", "element", "_a", "_a", "date", "picker", "_a", "operators", "filter"]
}
