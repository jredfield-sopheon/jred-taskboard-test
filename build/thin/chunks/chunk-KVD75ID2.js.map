{
  "version": 3,
  "sources": ["../../../../Scheduler/lib/Scheduler/model/mixin/TimeZonedDatesMixin.js", "../../../../Scheduler/lib/Scheduler/model/TimeSpan.js", "../../../../Scheduler/lib/Scheduler/data/mixin/ResourceStoreMixin.js", "../../../../Scheduler/lib/Scheduler/data/mixin/PartOfProject.js", "../../../../Scheduler/lib/Scheduler/model/mixin/ResourceModelMixin.js", "../../../../chronograph/src/collection/Iterator.js", "../../../../chronograph/src/class/Mixin.js", "../../../../chronograph/src/class/Base.js", "../../../../Engine/lib/Engine/quark/AbstractPartOfProjectGenericMixin.js", "../../../../Engine/lib/Engine/quark/CorePartOfProjectGenericMixin.js", "../../../../Engine/lib/Engine/quark/store/mixin/AbstractPartOfProjectStoreMixin.js", "../../../../Engine/lib/Engine/quark/model/mixin/AbstractPartOfProjectModelMixin.js", "../../../../Engine/lib/Engine/quark/model/mixin/CorePartOfProjectModelMixin.js", "../../../../Engine/lib/Engine/quark/model/scheduler_core/CoreResourceMixin.js", "../../../../Scheduler/lib/Scheduler/model/ResourceModel.js", "../../../../Scheduler/lib/Scheduler/data/mixin/PartOfBaseProject.js", "../../../../Engine/lib/Engine/quark/store/mixin/CorePartOfProjectStoreMixin.js", "../../../../Engine/lib/Engine/quark/store/AbstractResourceStoreMixin.js", "../../../../Engine/lib/Engine/quark/store/CoreResourceStoreMixin.js", "../../../../Scheduler/lib/Scheduler/data/ResourceStore.js", "../../../../Scheduler/lib/Scheduler/data/mixin/EventStoreMixin.js", "../../../../Scheduler/lib/Scheduler/data/mixin/GetEventsMixin.js", "../../../../Scheduler/lib/Scheduler/data/util/EventDayIndex.js", "../../../../Scheduler/lib/Scheduler/data/mixin/RecurringTimeSpansMixin.js", "../../../../Scheduler/lib/Scheduler/data/mixin/RecurringEventsMixin.js", "../../../../Scheduler/lib/Scheduler/data/util/recurrence/RecurrenceDayRuleEncoder.js", "../../../../Scheduler/lib/Scheduler/data/util/recurrence/AbstractRecurrenceIterator.js", "../../../../Scheduler/lib/Scheduler/data/util/recurrence/DailyRecurrenceIterator.js", "../../../../Scheduler/lib/Scheduler/data/util/recurrence/WeeklyRecurrenceIterator.js", "../../../../Scheduler/lib/Scheduler/data/util/recurrence/MonthlyRecurrenceIterator.js", "../../../../Scheduler/lib/Scheduler/data/util/recurrence/YearlyRecurrenceIterator.js", "../../../../Scheduler/lib/Scheduler/model/RecurrenceModel.js", "../../../../Scheduler/lib/Scheduler/model/mixin/RecurringTimeSpan.js", "../../../../Scheduler/lib/Scheduler/model/mixin/EventModelMixin.js", "../../../../Engine/lib/Engine/quark/model/scheduler_core/CoreEventMixin.js", "../../../../Engine/lib/Engine/quark/model/AbstractHasAssignmentsMixin.js", "../../../../Engine/lib/Engine/quark/model/scheduler_core/CoreHasAssignmentsMixin.js", "../../../../Engine/lib/Engine/quark/model/scheduler_core/CoreHasDependenciesMixin.js", "../../../../Engine/lib/Engine/quark/model/scheduler_core/SchedulerCoreEvent.js", "../../../../Scheduler/lib/Scheduler/model/EventModel.js", "../../../../Scheduler/lib/Scheduler/data/mixin/DayIndexMixin.js", "../../../../Engine/lib/Engine/quark/store/AbstractEventStoreMixin.js", "../../../../Engine/lib/Engine/quark/store/CoreEventStoreMixin.js", "../../../../Scheduler/lib/Scheduler/data/EventStore.js", "../../../../Scheduler/lib/Scheduler/model/mixin/AssignmentModelMixin.js", "../../../../Engine/lib/Engine/quark/model/scheduler_core/CoreAssignmentMixin.js", "../../../../Scheduler/lib/Scheduler/model/AssignmentModel.js", "../../../../Scheduler/lib/Scheduler/data/mixin/AssignmentStoreMixin.js", "../../../../Engine/lib/Engine/util/Functions.js", "../../../../Engine/lib/Engine/quark/store/AbstractAssignmentStoreMixin.js", "../../../../Engine/lib/Engine/quark/store/CoreAssignmentStoreMixin.js", "../../../../Scheduler/lib/Scheduler/data/AssignmentStore.js", "../../../../Scheduler/lib/Scheduler/model/DependencyBaseModel.js", "../../../../Engine/lib/Engine/quark/model/scheduler_core/CoreDependencyMixin.js", "../../../../Scheduler/lib/Scheduler/model/DependencyModel.js", "../../../../Scheduler/lib/Scheduler/data/mixin/DependencyStoreMixin.js", "../../../../Engine/lib/Engine/quark/store/AbstractDependencyStoreMixin.js", "../../../../Engine/lib/Engine/quark/store/CoreDependencyStoreMixin.js", "../../../../Scheduler/lib/Scheduler/data/DependencyStore.js", "../../../../Scheduler/lib/Scheduler/crud/mixin/AbstractCrudManagerValidation.js", "../../../../Scheduler/lib/Scheduler/crud/AbstractCrudManagerMixin.js", "../../../../Scheduler/lib/Scheduler/crud/transport/AjaxTransport.js", "../../../../Scheduler/lib/Scheduler/crud/encoder/JsonEncoder.js", "../../../../Scheduler/lib/Scheduler/data/mixin/ProjectCrudManager.js", "../../../../Scheduler/lib/Scheduler/crud/AbstractCrudManager.js", "../../../../Scheduler/lib/Scheduler/model/mixin/ProjectModelCommon.js", "../../../../Scheduler/lib/Scheduler/model/ResourceTimeRangeModel.js", "../../../../Scheduler/lib/Scheduler/data/ResourceTimeRangeStore.js", "../../../../Scheduler/lib/Scheduler/data/plugin/StoreTimeZonePlugin.js", "../../../../Scheduler/lib/Scheduler/model/mixin/ProjectModelTimeZoneMixin.js", "../../../../Scheduler/lib/Scheduler/model/TimeRangeModel.js", "../../../../Scheduler/lib/Scheduler/data/TimeRangeStore.js", "../../../../Scheduler/lib/Scheduler/model/mixin/ProjectModelMixin.js", "../../../../Scheduler/lib/Scheduler/model/mixin/ProjectCurrentConfig.js", "../../../../Scheduler/lib/Scheduler/data/util/ModelPersistencyManager.js", "../../../../Engine/lib/Engine/vendor/later/later.js", "../../../../Engine/lib/Engine/calendar/CalendarIntervalMixin.js", "../../../../Engine/lib/Engine/calendar/CalendarIntervalStore.js", "../../../../Engine/lib/Engine/scheduling/Types.js", "../../../../Engine/lib/Engine/util/Constants.js", "../../../../Engine/lib/Engine/util/Types.js", "../../../../Engine/lib/Engine/calendar/CalendarCache.js", "../../../../Engine/lib/Engine/util/StripDuplicates.js", "../../../../Engine/lib/Engine/calendar/CalendarCacheInterval.js", "../../../../Engine/lib/Engine/util/BinarySearch.js", "../../../../Engine/lib/Engine/calendar/SortedMap.js", "../../../../Engine/lib/Engine/calendar/IntervalCache.js", "../../../../Engine/lib/Engine/calendar/CalendarCacheSingle.js", "../../../../Engine/lib/Engine/calendar/UnspecifiedTimeIntervalModel.js", "../../../../Engine/lib/Engine/quark/model/AbstractCalendarMixin.js", "../../../../Engine/lib/Engine/quark/model/scheduler_core/CoreCalendarMixin.js", "../../../../Engine/lib/Engine/quark/store/AbstractCalendarManagerStoreMixin.js", "../../../../Engine/lib/Engine/quark/store/CoreCalendarManagerStoreMixin.js", "../../../../Engine/lib/Engine/quark/model/AbstractProjectMixin.js", "../../../../Engine/lib/Engine/quark/model/scheduler_core/SchedulerCoreProjectMixin.js", "../../../../Scheduler/lib/Scheduler/model/ProjectModel.js", "../../../../Scheduler/lib/Scheduler/data/CrudManager.js", "../../../../Scheduler/lib/Scheduler/crud/mixin/CrudManagerView.js"],
  "sourcesContent": ["import TimeZoneHelper from '../../../Core/helper/TimeZoneHelper.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\n/**\n * @module Scheduler/model/mixin/TimeZonedDatesMixin\n */\nconst dateFieldsToConvert = {\n    startDate      : 1,\n    endDate        : 1,\n    constraintDate : 1,\n    deadlineDate   : 1\n};\n/**\n * This mixin class overrides default Model functionality to provide support for time zone converted dates\n * @mixin\n */\nexport default Target => class TimeZonedDatesMixin extends Target {\n    static $name = 'TimeZonedDatesMixin';\n    static fields  = [\n        /**\n         * The current timeZone this record is converted to. Used internally to keep track of time zone conversions.\n         *\n         * Can also be used to create a new record with dates in a specific non-local timezone. That is useful for\n         * example when replacing a store dataset. That would be interpreted as a new load, and all dates would be\n         * converted to the configured timezone.\n         *\n         * If specifically set to `null` when adding a new record to a Store, the new record's dates will be converted\n         * to the Project's configured timezone.\n         *\n         * For more information about timezone conversion, se {@link Scheduler.model.ProjectModel#config-timeZone}.\n         *\n         * This field will not {@link Core.data.field.DataField#config-persist} by default.\n         *\n         * @field {String|Number|null} timeZone\n         * @category Advanced\n         */\n        {\n            name    : 'timeZone',\n            persist : false\n        }\n    ];\n    get timeZone() {\n        return this.getData('timeZone');\n    }\n    set timeZone(timeZone) {\n        this.setData('timeZone', timeZone);\n    }\n    setLocalDate(field, date) {\n        const me = this;\n        me.set(field, me.timeZone != null ? TimeZoneHelper.toTimeZone(date, me.timeZone) : date, true);\n        // Need to set data to fool engine that the dates haven't change\n        me.setData(field, me[field]);\n    }\n    getLocalDate(field) {\n        if (this.timeZone != null && this[field]) {\n            return TimeZoneHelper.fromTimeZone(this[field], this.timeZone);\n        }\n        return this[field];\n    }\n    applyChangeset(rawChanges) {\n        // When a sync response arrives from backend, the data will need to be converted to time zone before applied.\n        if (this.timeZone != null) {\n            for (const field in dateFieldsToConvert) {\n                if (rawChanges[field]) {\n                    this.setLocalDate(field, new Date(rawChanges[field]));\n                    delete rawChanges[field];\n                }\n            }\n        }\n        return super.applyChangeset(...arguments);\n    }\n    getFieldPersistentValue(field) {\n        if (this.timeZone != null) {\n            const fieldName = field?.field ?? field?.name ?? field;\n            // Used when saving/syncing. Returns local system dates\n            if (dateFieldsToConvert[fieldName]) {\n                return this.getLocalDate(fieldName);\n            }\n        }\n        return super.getFieldPersistentValue(field);\n    }\n    // Converts current record into a timeZone\n    convertToTimeZone(timeZone) {\n        const\n            me            = this,\n            metaModified  = { ...me.meta.modified },\n            convertFields = { ...dateFieldsToConvert };\n        // Do not convert start and end dates on task unless manually scheduled\n        if (me.isTask && !me.manuallyScheduled) {\n            delete convertFields.startDate;\n            delete convertFields.endDate;\n        }\n        // Collect values\n        for (const field in convertFields) {\n            // Only convert if field has value\n            if (me[field] != null) {\n                convertFields[field] = me[field];\n                // If already converted, restore to local system time zone\n                if (me.timeZone != null) {\n                    convertFields[field] = me.getLocalDate(field);\n                    // Restore value in meta modified as well\n                    if (metaModified[field]) {\n                        metaModified[field] = TimeZoneHelper.fromTimeZone(metaModified[field], me.timeZone);\n                    }\n                }\n            }\n            else {\n                delete convertFields[field];\n            }\n        }\n        // Change time zone\n        me.timeZone = timeZone;\n        // Set values\n        for (const field in convertFields) {\n            // Convert and set field date silently\n            me.setLocalDate(field, convertFields[field], false);\n            convertFields[field] = 1; // For clearing changes below\n            // Convert value in meta modified as well\n            if (me.timeZone != null && metaModified[field]) {\n                metaModified[field] = TimeZoneHelper.toTimeZone(metaModified[field], me.timeZone);\n            }\n        }\n        // Clear modification metadata\n        me.clearChanges(true, true, convertFields);\n        // If old modification metadata, restore them to record and store\n        if (!ObjectHelper.isEmpty(metaModified)) {\n            me.meta.modified = metaModified;\n            me.stores.forEach(store => store.modified.add(me));\n        }\n    }\n};\n", "import Model from '../../Core/data/Model.js';\nimport TimeZonedDatesMixin from './mixin/TimeZonedDatesMixin.js';\nimport DomClassList from '../../Core/helper/util/DomClassList.js';\nimport DH from '../../Core/helper/DateHelper.js';\nimport VersionHelper from '../../Core/helper/VersionHelper.js';\nimport BrowserHelper from '../../Core/helper/BrowserHelper.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport Duration from '../../Core/data/Duration.js';\n/**\n * @module Scheduler/model/TimeSpan\n */\n/**\n * This class represent a simple date range. It is being used in various subclasses and plugins which operate on date ranges.\n *\n * It's a subclass of {@link Core.data.Model}.\n * Please refer to documentation of those classes to become familiar with the base interface of this class.\n *\n * A TimeSpan has the following fields:\n *\n * - {@link #field-startDate}    - start date of the task in the ISO 8601 format\n * - {@link #field-endDate}      - end date of the task in the ISO 8601 format (not inclusive)\n * - {@link #field-duration}     - duration, time between start date and end date\n * - {@link #field-durationUnit} - unit used to express the duration\n * - {@link #field-name}         - an optional name of the range\n * - {@link #field-cls}          - an optional CSS class to be associated with the range.\n *\n * The data source of any field can be customized in the subclass. Please refer to {@link Core.data.Model} for details. To specify\n * another date format:\n *\n * ```javascript\n * class MyTimeSpan extends TimeSpan {\n *   static get fields() {\n *      { name: 'startDate', type: 'date', dateFormat: 'DD/MM/YY' }\n *   }\n * }\n * ```\n *\n * @extends Core/data/Model\n * @mixes Scheduler/model/mixin/TimeZonedDatesMixin\n */\nexport default class TimeSpan extends Model.mixin(TimeZonedDatesMixin) {\n    static $name = 'TimeSpan';\n    //region Field definitions\n    static fields = [\n        /**\n         * The start date of a time span (or Event / Task).\n         *\n         * Uses {@link Core/helper/DateHelper#property-defaultFormat-static DateHelper.defaultFormat} to convert a\n         * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and\n         * change the dateFormat for this field.\n         *\n         * Note that the field always returns a `Date`.\n         *\n         * @field {Date} startDate\n         * @accepts {String|Date}\n         * @category Scheduling\n         */\n        {\n            name : 'startDate',\n            type : 'date'\n        },\n        /**\n         * The end date of a time span (or Event / Task).\n         *\n         * Uses {@link Core/helper/DateHelper#property-defaultFormat-static DateHelper.defaultFormat} to convert a\n         * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and\n         * change the dateFormat for this field.\n         *\n         * Note that the field always returns a `Date`.\n         *\n         * @field {Date} endDate\n         * @accepts {String|Date}\n         * @category Scheduling\n         */\n        {\n            name : 'endDate',\n            type : 'date'\n        },\n        /**\n         * The numeric part of the timespan's duration (the number of units).\n         * @field {Number} duration\n         * @category Scheduling\n         */\n        {\n            name      : 'duration',\n            type      : 'number',\n            allowNull : true,\n            internal  : true\n        },\n        /**\n         * The unit part of the TimeSpan duration, defaults to \"d\" (days). Valid values are:\n         *\n         * - \"millisecond\" - Milliseconds\n         * - \"second\" - Seconds\n         * - \"minute\" - Minutes\n         * - \"hour\" - Hours\n         * - \"day\" - Days\n         * - \"week\" - Weeks\n         * - \"month\" - Months\n         * - \"quarter\" - Quarters\n         * - \"year\"- Years\n         *\n         * This field is readonly after creation, to change durationUnit use #setDuration().\n         * @field {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} durationUnit\n         * @category Scheduling\n         */\n        {\n            type         : 'durationunit',\n            name         : 'durationUnit',\n            defaultValue : 'd',\n            internal     : true\n        },\n        /**\n         * Calculated field which encapsulates the duration's magnitude and unit. This field will not be persisted,\n         * setting it will update the {@link #field-duration} and {@link #field-durationUnit} fields.\n         *\n         * @field {DurationConfig|Core.data.Duration} fullDuration\n         * @category Scheduling\n         */\n        {\n            name    : 'fullDuration',\n            persist : false,\n            column  : {\n                type : 'duration'\n            },\n            useProp : true\n        },\n        /**\n         * An encapsulation of the CSS classes to add to the rendered time span element.\n         *\n         * Always returns a {@link Core.helper.util.DomClassList}, but may still be treated as a string. For\n         * granular control of adding and removing individual classes, it is recommended to use the\n         * {@link Core.helper.util.DomClassList} API.\n         *\n         * @field {Core.helper.util.DomClassList} cls\n         * @accepts {Core.helper.util.DomClassList|String|String[]|Object}\n         *\n         * @category Styling\n         */\n        {\n            name         : 'cls',\n            defaultValue : '',\n            internal     : true\n        },\n        /**\n         * CSS class specifying an icon to apply to the rendered time span element.\n         * **Note**: In case event is a milestone, using `iconCls` with dependency feature might slightly decrease\n         * performance because feature will refer to the DOM to get exact size of the element.\n         * @field {String} iconCls\n         * @category Styling\n         */\n        {\n            name     : 'iconCls',\n            internal : true\n        },\n        /**\n         * A CSS style string (applied to `style.cssText`) or object (applied to `style`)\n         * ```\n         * record.style = 'color: red;font-weight: 800';\n         * ```\n         *\n         * @field {String} style\n         * @category Styling\n         */\n        {\n            name     : 'style',\n            type     : 'object',\n            internal : true\n        },\n        /**\n         * The name of the time span (or Event / Task)\n         * @field {String} name\n         * @category Common\n         */\n        {\n            name         : 'name',\n            type         : 'string',\n            defaultValue : ''\n        }\n    ];\n    //endregion\n    //region Init\n    construct(data, ...args) {\n        const me = this;\n        // fullDuration is a \"calculated field\", but convenient to allow supplying it in the data\n        if (data?.fullDuration) {\n            const { magnitude, unit } = data.fullDuration;\n            data.duration = magnitude;\n            data.unit = unit;\n            delete data.fullDuration;\n        }\n        super.construct(data, ...args);\n        me.normalize();\n        if (me.startDateMS && me.endDateMS && me.startDateMS > me.endDateMS) {\n            console.error(`startDate > endDate for ${me.constructor.$name} record with id: ${me.id}`);\n        }\n    }\n    //endregion\n    //region Date normalization\n    internalCalculateStartDate(endDate, duration, durationUnit) {\n        return DH.add(endDate, -duration, durationUnit);\n    }\n    internalCalculateEndDate(startDate, duration, durationUnit) {\n        // Use hours to set end date in order to correctly process DST crossings???\n        return DH.add(startDate, duration, durationUnit);\n    }\n    internalCalculateDuration(startDate, endDate, durationUnit) {\n        return DH.as(durationUnit, DH.diff(startDate, endDate, 'h'), 'h');\n    }\n    // Separate fn to allow calling later with specific values (used by Baseline)\n    internalNormalize(startDate, endDate, duration, durationUnit) {\n        const\n            me          = this,\n            hasDuration = duration != null;\n        // need to calculate duration (checking first since seemed most likely to happen)\n        if (startDate && endDate && !hasDuration) {\n            me.setData('duration', me.internalCalculateDuration(startDate, endDate, durationUnit));\n        }\n        // need to calculate endDate?\n        else if (startDate && !endDate && hasDuration) {\n            me.setData('endDate', me.internalCalculateEndDate(startDate, duration, durationUnit));\n        }\n        // need to calculate startDate\n        else if (!startDate && endDate && hasDuration) {\n            me.setData('startDate', me.internalCalculateStartDate(endDate, duration, durationUnit));\n        }\n    }\n    normalize() {\n        this.internalNormalize(\n            this.startDate,\n            this.endDate,\n            this.duration,\n            this.durationUnit || this.constructor.defaultValues.durationUnit // Default might not be applied yet\n        );\n    }\n    //endregion\n    //region Getters & Setters\n    /**\n     * Returns the event store this event is part of, if any.\n     *\n     * @property {Scheduler.data.EventStore}\n     * @readonly\n     * @category Misc\n     * @typings ignore\n     */\n    get eventStore() {\n        const me = this;\n        // If we are an occurrence, return our base recurring event's store\n        if (me.isOccurrence) {\n            return me.recurringTimeSpan.eventStore;\n        }\n        if (!me._eventStore) {\n            me._eventStore = me.stores?.find(s => s.isEventStore);\n        }\n        return me._eventStore;\n    }\n    updateInternalCls(cls) {\n        if (this._cls) {\n            this._cls.value = cls;\n        }\n        else {\n            this._cls = new DomClassList(cls);\n        }\n    }\n    set internalCls(cls) {\n        this.updateInternalCls(cls);\n        this.set('cls', this._cls.value);\n    }\n    get internalCls() {\n        const { cls } = this;\n        // `cls` getter can be overriden so return `cls` value if it is DomClassList or assign it to `this._cls`\n        if (cls?.isDomClassList) {\n            return cls;\n        }\n        this.updateInternalCls(cls);\n        this.setData('cls', this._cls.value);\n        return this._cls;\n    }\n    get cls() {\n        if (!this._cls) {\n            this._cls = new DomClassList(super.get('cls'));\n        }\n        return this._cls;\n    }\n    set cls(cls) {\n        this.internalCls = cls;\n    }\n    get startDate() {\n        return this.get('startDate');\n    }\n    set startDate(date) {\n        this.setStartDate(date);\n    }\n    get endDate() {\n        return this.get('endDate');\n    }\n    set endDate(date) {\n        this.setEndDate(date);\n    }\n    get endingDate() {\n        const\n            me = this,\n            {\n                endDate,\n                startDate\n            }  = me;\n        if (endDate) {\n            // Special case of startDate===endDate for allDay event:\n            // if (Number(endDate) === Number(startDate) && me.allDay) {\n            //     return DH.add(startDate, 1, 'd');\n            // }\n            // Nope... the above works fine except when the day start time is shifted. In this case we want the\n            // event to appear as \"all day\" on the shifted day, but the above will push the endingDate beyond the\n            // end of the shifted day.\n            return endDate;\n        }\n        return DH.add(startDate, me.duration, me.durationUnit);\n    }\n    get duration() {\n        return this.get('duration');\n    }\n    set duration(duration) {\n        this.setDuration(duration, this.durationUnit);\n    }\n    get durationUnit() {\n        return this.get('durationUnit');\n    }\n    /**\n     * Sets duration and durationUnit in one go. Only allowed way to change durationUnit, the durationUnit field is\n     * readonly after creation\n     * @param {Number} duration Duration value\n     * @param {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} durationUnit Unit for\n     * specified duration value, see {@link #field-durationUnit} for valid values\n     * @category Scheduling\n     */\n    setDuration(duration, durationUnit = this.durationUnit) {\n        // Must be a number\n        duration = parseFloat(duration);\n        this.set({\n            duration,\n            durationUnit,\n            ...this.updateDatesFromDuration(duration, durationUnit)\n        });\n    }\n    updateDatesFromDuration(magnitude, unit, startDate = this.startDate, endDate = this.endDate) {\n        const result = {};\n        if (startDate) {\n            result.endDate = this.internalCalculateEndDate(startDate, magnitude, unit);\n        }\n        else if (endDate) {\n            result.startDate = this.internalCalculateStartDate(endDate, magnitude, unit);\n        }\n        return result;\n    }\n    /**\n     * Returns duration of the event in given unit. This is a wrapper for {@link Core.helper.DateHelper#function-getDurationInUnit-static}\n     * @param {'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y'} unit\n     * @param {Boolean} [doNotRound]\n     * @private\n     * @returns {Number}\n     */\n    getDurationInUnit(unit, doNotRound) {\n        const me = this;\n        if (me.startDate && me.endDate) {\n            return DH.getDurationInUnit(me.startDate, me.endDate, unit, doNotRound);\n        }\n        else {\n            return DH.as(unit, me.duration, me.durationUnit);\n        }\n    }\n    get fullDuration() {\n        // Used for formatting during export\n        return new Duration({\n            unit      : this.durationUnit,\n            magnitude : this.duration\n        });\n    }\n    set fullDuration(duration) {\n        if (typeof duration === 'string') {\n            duration = DH.parseDuration(duration, true, this.durationUnit);\n        }\n        this.setDuration(duration.magnitude, duration.unit);\n    }\n    /**\n     * Sets the range start date\n     *\n     * @param {Date} date The new start date\n     * @param {Boolean} keepDuration Pass `true` to keep the duration of the task (\"move\" the event), `false` to change the duration (\"resize\" the event).\n     * Defaults to `true`\n     * @category Scheduling\n     */\n    setStartDate(date, keepDuration = true) {\n        const\n            me    = this,\n            toSet = {\n                startDate : date\n            };\n        if (date) {\n            let calcEndDate;\n            if (keepDuration) {\n                calcEndDate = me.duration != null;\n            }\n            else {\n                if (me.endDate) {\n                    toSet.duration = me.internalCalculateDuration(date, me.endDate, me.durationUnit);\n                    if (toSet.duration < 0) {\n                        throw new Error('Negative duration');\n                    }\n                }\n                else {\n                    calcEndDate = me.duration != null;\n                }\n            }\n            if (calcEndDate) {\n                toSet.endDate = me.internalCalculateEndDate(date, me.duration, me.durationUnit);\n            }\n        }\n        else {\n            toSet.duration = null;\n        }\n        me.set(toSet);\n    }\n    /**\n     * Sets the range end date\n     *\n     * @param {Date} date The new end date\n     * @param {Boolean} keepDuration Pass `true` to keep the duration of the task (\"move\" the event), `false` to change the duration (\"resize\" the event).\n     * Defaults to `false`\n     * @category Scheduling\n     */\n    setEndDate(date, keepDuration = false) {\n        const\n            me    = this,\n            toSet = {\n                endDate : date\n            };\n        if (date) {\n            let calcStartDate;\n            if (keepDuration === true) {\n                calcStartDate = me.duration != null;\n            }\n            else {\n                if (me.startDate) {\n                    toSet.duration = me.internalCalculateDuration(me.startDate, date, me.durationUnit);\n                    if (toSet.duration < 0) throw new Error('Negative duration');\n                }\n                else {\n                    calcStartDate = this.duration != null;\n                }\n            }\n            if (calcStartDate) {\n                toSet.startDate = me.internalCalculateStartDate(date, me.duration, me.durationUnit);\n            }\n        }\n        me.set(toSet);\n    }\n    /**\n     * Sets the event start and end dates\n     *\n     * @param {Date} start The new start date\n     * @param {Date} end The new end date\n     * @param {Boolean} [silent] Pass `true` to not trigger events\n     * @category Scheduling\n     */\n    setStartEndDate(start, end, silent) {\n        if (start > end) {\n            throw new Error('Start date must be less or equal to end date');\n        }\n        this.set({\n            startDate : start,\n            endDate   : end\n        }, null, silent);\n    }\n    /**\n     * Returns an array of dates in this range. If the range starts/ends not at the beginning of day, the whole day will be included.\n     * @readonly\n     * @property {Date[]}\n     * @category Scheduling\n     */\n    get dates() {\n        const\n            dates     = [],\n            startDate = DH.startOf(this.startDate, 'day'),\n            endDate   = this.endDate;\n        for (let date = startDate; date < endDate; date = DH.add(date, 1, 'day')) {\n            dates.push(date);\n        }\n        return dates;\n    }\n    get startDateMS() {\n        return (this.batching && this.hasBatchedChange('startDate') ? this.get('startDate') : this.startDate)?.getTime();\n    }\n    get endDateMS() {\n        return (this.batching && this.hasBatchedChange('endDate') ? this.get('endDate') : this.endDate)?.getTime();\n    }\n    /**\n     * Returns the duration of this Event in milliseconds.\n     * @readonly\n     * @property {Number}\n     * @category Scheduling\n     */\n    get durationMS() {\n        const { endDateMS, startDateMS } = this;\n        if (endDateMS && startDateMS) {\n            return endDateMS - startDateMS;\n        }\n        return DH.asMilliseconds(this.duration || 0, this.durationUnit);\n    }\n    /**\n     * Returns true if record is a milestone.\n     * @readonly\n     * @property {Boolean}\n     * @category Scheduling\n     */\n    get isMilestone() {\n        return this.duration === 0;\n    }\n    inSetNormalize(field) {\n        if (typeof field !== 'string') {\n            // If user is updating multiple properties in one go using an object, we help out\n            // by filling out missing schedule related data\n            let { startDate, endDate, duration, durationUnit = this.durationUnit } = field;\n            // Conversion is usually handled in inSet, but we are normalizing prior to that and have to handle it here\n            if (typeof startDate === 'string') {\n                startDate = this.getFieldDefinition('startDate').convert(startDate);\n            }\n            if (typeof endDate === 'string') {\n                endDate = this.getFieldDefinition('endDate').convert(endDate);\n            }\n            if ('duration' in field) {\n                if (startDate && !endDate) {\n                    endDate = this.internalCalculateEndDate(startDate, duration, durationUnit);\n                }\n                if (!startDate && endDate) {\n                    startDate = this.internalCalculateStartDate(endDate, duration, durationUnit);\n                }\n            }\n            else if (startDate && endDate) {\n                // Calculate duration in hours and covert to target duration unit in order to avoid extra DST conversion\n                duration = this.internalCalculateDuration(startDate, endDate, durationUnit);\n            }\n            // A framework (React tested) may freeze passed field object, so clone it in that case\n            const fieldOrClone = Object.isFrozen(field) ? ObjectHelper.clone(field) : field;\n            startDate && (fieldOrClone.startDate = startDate);\n            endDate && (fieldOrClone.endDate = endDate);\n            duration != null && (fieldOrClone.duration = duration);\n            return fieldOrClone;\n        }\n    }\n    fieldToKeys(field, value) {\n        const result = super.fieldToKeys(field, value);\n        // Replace fullDuration with duration and durationUnit in calls to `set()`\n        if (result.fullDuration) {\n            const { magnitude, unit } = result.fullDuration;\n            result.duration     = magnitude;\n            result.durationUnit = unit;\n        }\n        // Engine handles this for event & tasks\n        if (!this.isEventModel && !this.isTaskModel) {\n            // Recalculate start/end date if duration is set with only one of them\n            if (('duration' in result || result.durationUnit) && !(result.startDate && result.endDate)) {\n                Object.assign(\n                    result,\n                    this.updateDatesFromDuration(\n                        result.duration ?? this.duration,\n                        result.durationUnit ?? this.durationUnit,\n                        result.startDate,\n                        result.endDate\n                    )\n                );\n            }\n        }\n        return result;\n    }\n    inSet(field, value, silent, fromRelationUpdate, skipAccessors, validOnly, triggerBeforeUpdate) {\n        const me = this;\n        if (!skipAccessors) {\n            field = me.inSetNormalize(field) || field;\n        }\n        const result = super.inSet(field, value, silent, fromRelationUpdate, skipAccessors, validOnly, triggerBeforeUpdate);\n        if (!me.project?.isWritingData && field.startDate && field.endDate) {\n            let invalid;\n            if (field.startDate instanceof Date && field.endDate instanceof Date) {\n                invalid = field.startDate > field.endDate;\n            }\n            else if (me.fieldMap.startDate.convert(field.startDate) > me.fieldMap.endDate.convert(field.endDate))  {\n                invalid = true;\n            }\n            if (invalid) {\n                console.error(`startDate > endDate for ${me.constructor.$name} record with id: ${me.id}`);\n            }\n        }\n        return result;\n    }\n    // Cls requires special handling since it is converted to a DomClassList\n    applyValue(useProp, key, value, skipAccessors, field) {\n        if (key === 'cls') {\n            this.updateInternalCls(value);\n        }\n        super.applyValue(useProp, key, value, skipAccessors, field);\n    }\n    //endregion\n    //region Iteration\n    /**\n     * Iterates over the {@link #property-dates}\n     * @param {Function} func The function to call for each date\n     * @param {Object} thisObj `this` reference for the function\n     * @category Scheduling\n     */\n    forEachDate(func, thisObj) {\n        return this.dates.forEach(func.bind(thisObj));\n    }\n    //endregion\n    /**\n     * Checks if the range record has both start and end dates set and start <= end\n     *\n     * @property {Boolean}\n     * @category Scheduling\n     */\n    get isScheduled() {\n        const { startDateMS, endDateMS } = this;\n        return endDateMS - startDateMS >= 0;\n    }\n    // Simple check if end date is greater than start date\n    get isValid() {\n        const { startDate, endDate } = this;\n        return !startDate || !endDate || (endDate - startDate >= 0);\n    }\n    /**\n     * Shift the dates for the date range by the passed amount and unit\n     * @param {'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y'} unit The unit to shift by, see {@link Core.helper.DateHelper}\n     * for more information on valid formats.\n     * @param {Number} amount The amount to shift\n     */\n    shift(amount, unit = this.durationUnit) {\n        if (typeof amount === 'string') {\n            const u = amount;\n            amount = unit;\n            unit = u;\n        }\n        return this.setStartDate(DH.add(this.startDate, amount, unit, true), true);\n    }\n    /**\n     * Returns the WBS code of this model (e.g '2.1.3'). Only relevant when part of a tree store, as in the Gantt chart.\n     * @property {String}\n     * @category Parent & children\n     */\n    get wbsCode() {\n        return this._wbsCode || this.indexPath.join('.');\n    }\n    set wbsCode(value) {\n        // wbsCode needs to be writable to interop w/TaskModel and Baselines which copy this field value\n        this._wbsCode = value;\n    }\n    fullCopy() {\n        //NOT PORTED\n        return this.copy.apply(this, arguments);\n    }\n    intersects(timeSpan) {\n        return this.intersectsRange(timeSpan.startDate, timeSpan.endDate);\n    }\n    intersectsRange(start, end) {\n        const\n            myStart = this.startDate,\n            myEnd   = this.endDate;\n        return myStart && myEnd && DH.intersectSpans(myStart, myEnd, start, end);\n    }\n    /**\n     * Splits this event into two pieces at the desired position.\n     *\n     * @param {Number|String} splitPoint The duration point at which to split this event.\n     *\n     * If less then `1`, this indicates the relative position at which it will be split.\n     * 0.5 means cut it in half.\n     *\n     * If greater than `1`, this indicates the new duration in the current duration units of this event before the split.\n     *\n     * If this is a string, it will be a duration description as described in\n     * {@link Core.helper.DateHelper#function-parseDuration-static}, for example `'15 min'`\n     *\n     * @returns {Scheduler.model.TimeSpan} The newly created split section of the timespan\n     * @category Scheduling\n     */\n    split(splitPoint = 0.5) {\n        const\n            me             = this,\n            clone          = me.copy(),\n            {\n                fullDuration,\n                eventStore,\n                assignmentStore\n            }              = me,\n            oldDuration    = new Duration(fullDuration),\n            cloneDuration  = new Duration(fullDuration);\n        let ownNewDuration,\n            unitsChanged;\n        if (typeof splitPoint === 'string') {\n            ownNewDuration = new Duration(splitPoint);\n            // New duration specified in same time units as current duration\n            if (ownNewDuration.unit === oldDuration.unit) {\n                cloneDuration.magnitude -= ownNewDuration.magnitude;\n            }\n            // New duration is in different units, so convert clone's duration to match\n            else {\n                cloneDuration.magnitude = DH.as(ownNewDuration.unit, oldDuration) - ownNewDuration.magnitude;\n                cloneDuration.unit = ownNewDuration.unit;\n                unitsChanged = true;\n            }\n        }\n        else {\n            ownNewDuration = new Duration(splitPoint > 1 ? splitPoint : me.duration * splitPoint, me.durationUnit);\n            cloneDuration.magnitude -= ownNewDuration.magnitude;\n        }\n        clone.startDate = DH.add(me.startDate, ownNewDuration.magnitude, ownNewDuration.unit);\n        if (unitsChanged) {\n            clone.fullDuration = cloneDuration;\n            me.fullDuration = ownNewDuration;\n        }\n        else {\n            clone.duration = cloneDuration.magnitude;\n            me.duration = ownNewDuration.magnitude;\n        }\n        if (eventStore) {\n            eventStore.add(clone);\n            if (assignmentStore && !eventStore.usesSingleAssignment) {\n                assignmentStore.add(\n                    me.assignments.map(assignment => {\n                        const clonedData = Object.assign({}, assignment.data, {\n                            eventId  : clone.id,\n                            // From engine\n                            event    : null,\n                            resource : null\n                        });\n                        delete clonedData.id;\n                        return clonedData;\n                    })\n                );\n            }\n        }\n        return clone;\n    }\n    toICSString(icsEventConfig = {}) {\n        if (!this.isScheduled) {\n            return '';\n        }\n        const\n            {\n                startDate,\n                endDate\n            }         = this,\n            // To allow testing using a fixed timestamp value\n            timestamp = icsEventConfig.DTSTAMP || DH.format(new Date(), 'uu');\n        delete icsEventConfig.DTSTAMP;\n        let startEnd = {};\n        if (this.allDay) {\n            startEnd = {\n                'DTSTART;VALUE=DATE' : DH.format(startDate, 'u'),\n                'DTEND;VALUE=DATE'   : DH.format(endDate, 'u')\n            };\n        }\n        else {\n            startEnd = {\n                DTSTART : DH.format(startDate, 'uu'),\n                DTEND   : DH.format(endDate, 'uu')\n            };\n        }\n        const\n            version       = (VersionHelper.scheduler && VersionHelper.getVersion('scheduler')) || (VersionHelper.calendar && VersionHelper.getVersion('calendar')) || '',\n            icsWrapConfig = {\n                BEGIN    : 'VCALENDAR',\n                VERSION  : '2.0',\n                CALSCALE : 'GREGORIAN',\n                PRODID   : `-//Bryntum AB//Bryntum Scheduler ${version} //EN`,\n                END      : 'VCALENDAR'\n            },\n            eventConfig   = {\n                BEGIN   : 'VEVENT',\n                UID     : this.id + '@bryntum.com',\n                CLASS   : 'PUBLIC',\n                SUMMARY : this.name,\n                DTSTAMP : timestamp,\n                ...startEnd,\n                ...(this.recurrenceRule ? { RRULE : this.recurrenceRule } : {}),\n                ...icsEventConfig,\n                END     : 'VEVENT'\n            },\n            icsItems      = Object.keys(icsWrapConfig).map(key => `${key}:${icsWrapConfig[key]}`),\n            eventItems    = Object.keys(eventConfig).map(key => `${key}:${eventConfig[key]}`);\n        // Inject event details before the closing VCALENDAR entry\n        icsItems.splice(icsItems.length - 1, 0, ...eventItems);\n        return icsItems.join('\\n');\n    }\n    /**\n     * Triggers a download of this time span in ICS format (for import in Outlook etc.)\n     *\n     * ```javascript\n     * timeSpan.downloadAsICS({\n     *      LOCATION : timeSpan.location\n     *  });\n     * ```\n     * @param {Object<String,String>} [icsEventConfig] A config object with properties to be added in to `BEGIN:VEVENT`\n     * section of the exported event.\n     * @category Misc\n     */\n    exportToICS(icsEventConfig) {\n        if (this.isScheduled) {\n            const blob = new Blob([this.toICSString(icsEventConfig)], { type : 'text/calendar' });\n            BrowserHelper.downloadBlob(blob, (this.name || 'Event') + '.ics');\n        }\n    }\n    /**\n     * Defines if the given event field should be manually editable in UI.\n     * You can override this method to provide your own logic.\n     *\n     * By default the method defines all the event fields as editable.\n     *\n     * @param {String} fieldName Name of the field\n     * @returns {Boolean} Returns `true` if the field is editable, `false` if it is not and `undefined` if the model has no such field.\n     */\n    isEditable(fieldName) {\n        // return undefined for unknown fields\n        return this.getFieldDefinition(fieldName) ? true : undefined;\n    }\n    isFieldModified(fieldName) {\n        if (fieldName === 'fullDuration') {\n            return super.isFieldModified('duration') || super.isFieldModified('durationUnit');\n        }\n        return super.isFieldModified(fieldName);\n    }\n}\nTimeSpan._$name = 'TimeSpan';", "import Base from '../../../Core/Base.js';\n/**\n * @module Scheduler/data/mixin/ResourceStoreMixin\n */\n/**\n * This is a mixin for the ResourceStore functionality. It is consumed by the {@link Scheduler.data.ResourceStore}.\n *\n * @mixin\n */\nexport default Target => class ResourceStoreMixin extends (Target || Base) {\n    static get $name() {\n        return 'ResourceStoreMixin';\n    }\n    get isResourceStore() {\n        return true;\n    }\n    /**\n     * Add resources to the store.\n     *\n     * NOTE: References (events, assignments) on the resources are determined async by a calculation engine. Thus they\n     * cannot be directly accessed after using this function.\n     *\n     * For example:\n     *\n     * ```javascript\n     * const [resource] = resourceStore.add({ id });\n     * // resource.events is not yet available\n     * ```\n     *\n     * To guarantee references are set up, wait for calculations for finish:\n     *\n     * ```javascript\n     * const [resource] = resourceStore.add({ id });\n     * await resourceStore.project.commitAsync();\n     * // resource.events is available (assuming EventStore is loaded and so on)\n     * ```\n     *\n     * Alternatively use `addAsync()` instead:\n     *\n     * ```javascript\n     * const [resource] = await resourceStore.addAsync({ id });\n     * // resource.events is available (assuming EventStore is loaded and so on)\n     * ```\n     *\n     * @param {Scheduler.model.ResourceModel|Scheduler.model.ResourceModel[]|ResourceModelConfig|ResourceModelConfig[]} records\n     * Array of records/data or a single record/data to add to store\n     * @param {Boolean} [silent] Specify `true` to suppress events\n     * @returns {Scheduler.model.ResourceModel[]} Added records\n     * @function add\n     * @category CRUD\n     */\n    /**\n     * Add resources to the store and triggers calculations directly after. Await this function to have up to date\n     * references on the added resources.\n     *\n     * ```javascript\n     * const [resource] = await resourceStore.addAsync({ id });\n     * // resource.events is available (assuming EventStore is loaded and so on)\n     * ```\n     *\n     * @param {Scheduler.model.ResourceModel|Scheduler.model.ResourceModel[]|ResourceModelConfig|ResourceModelConfig[]} records\n     * Array of records/data or a single record/data to add to store\n     * @param {Boolean} [silent] Specify `true` to suppress events\n     * @returns {Scheduler.model.ResourceModel[]} Added records\n     * @function addAsync\n     * @category CRUD\n     * @async\n     */\n    /**\n     * Applies a new dataset to the ResourceStore. Use it to plug externally fetched data into the store.\n     *\n     * NOTE: References (events, assignments) on the resources are determined async by a calculation engine. Thus\n     * they cannot be directly accessed after assigning the new dataset.\n     *\n     * For example:\n     *\n     * ```javascript\n     * resourceStore.data = [{ id }];\n     * // resourceStore.first.events is not yet available\n     * ```\n     *\n     * To guarantee references are available, wait for calculations for finish:\n     *\n     * ```javascript\n     * resourceStore.data = [{ id }];\n     * await resourceStore.project.commitAsync();\n     * // resourceStore.first.events is available\n     * ```\n     *\n     * Alternatively use `loadDataAsync()` instead:\n     *\n     * ```javascript\n     * await resourceStore.loadDataAsync([{ id }]);\n     * // resourceStore.first.events is available\n     * ```\n     *\n     * @member {ResourceModelConfig[]} data\n     * @category Records\n     */\n    /**\n     * Applies a new dataset to the ResourceStore and triggers calculations directly after. Use it to plug externally\n     * fetched data into the store.\n     *\n     * ```javascript\n     * await resourceStore.loadDataAsync([{ id }]);\n     * // resourceStore.first.events is available\n     * ```\n     *\n     * @param {ResourceModelConfig[]} data Array of ResourceModel data objects\n     * @function loadDataAsync\n     * @category CRUD\n     * @async\n     */\n    static get defaultConfig() {\n        return {\n            /**\n             * CrudManager must load stores in the correct order. Lowest first.\n             * @private\n             */\n            loadPriority : 200,\n            /**\n             * CrudManager must sync stores in the correct order. Lowest first.\n             * @private\n             */\n            syncPriority : 100,\n            storeId      : 'resources',\n            autoTree     : true\n        };\n    }\n    construct(config) {\n        super.construct(config);\n        if (!this.modelClass.isResourceModel) {\n            throw new Error('Model for ResourceStore must subclass ResourceModel');\n        }\n    }\n    removeAll() {\n        const result = super.removeAll(...arguments);\n        // Removing all resources removes all assignments\n        result && this.assignmentStore.removeAll();\n        return result;\n    }\n    // Apply id changes also to assignments (used to be handled automatically by relations earlier, but engine does not\n    // care about ids so needed now)\n    // problems:\n    // 1. orientation/HorizontalRendering listens to assignment store changes and is trying to refresh view\n    // When we update resource id on assignment, listener will be invoked and view will try to refresh. And it will\n    // fail, because row is not updated yet. Flag is raised on resource store to make HorizontalRendering to skip\n    // refreshing view in this particular case of resource id changing\n    onRecordIdChange({ record, oldValue, value }) {\n        super.onRecordIdChange({ record, oldValue, value });\n        if (record.isFieldModified('id')) {\n            this.isChangingId = true;\n            record.updateAssignmentResourceIds();\n            this.isChangingId = false;\n        }\n    }\n    // Cache used by VerticalRendering, reset from there\n    get allResourceRecords() {\n        return this._allResourceRecords || (this._allResourceRecords = this.getAllDataRecords());\n    }\n    /**\n     * Returns all resources that have no events assigned during the specified time range.\n     * @param {Date} startDate Time range start date\n     * @param {Date} endDate Time range end date\n     * @returns {Scheduler.model.ResourceModel[]} Resources without events\n     */\n    getAvailableResources({ startDate, endDate }) {\n        return this.query(resource => this.eventStore.isDateRangeAvailable(startDate, endDate, null, resource));\n    }\n};\n", "import Base from '../../../Core/Base.js';\n/**\n * @module Scheduler/data/mixin/PartOfProject\n */\n/**\n * This is a mixin, included in all models and stores of the Scheduler project. It provides a common API for accessing\n * all stores of the project.\n *\n * @mixin\n */\nexport default Target => class PartOfProject extends (Target || Base) {\n    /**\n     * Returns the project this entity belongs to.\n     *\n     * @member {Scheduler.model.ProjectModel} project\n     * @readonly\n     * @category Project\n     */\n    /**\n     * Returns the event store of the project this entity belongs to.\n     *\n     * @member {Scheduler.data.EventStore} eventStore\n     * @readonly\n     * @category Project\n     */\n    /**\n     * Returns the dependency store of the project this entity belongs to.\n     *\n     * @member {Scheduler.data.DependencyStore} dependencyStore\n     * @readonly\n     * @category Project\n     */\n    /**\n     * Returns the assignment store of the project this entity belongs to.\n     *\n     * @member {Scheduler.data.AssignmentStore} assignmentStore\n     * @readonly\n     * @category Project\n     */\n    /**\n     * Returns the resource store of the project this entity belongs to.\n     *\n     * @member {Scheduler.data.ResourceStore} resourceStore\n     * @readonly\n     * @category Project\n     */\n    static get $name() {\n        return 'PartOfProject';\n    }\n};\n", "import VersionHelper from '../../../Core/helper/VersionHelper.js';\n/**\n * @module Scheduler/model/mixin/ResourceModelMixin\n */\n/**\n * Config object used to set different values for top/left and bottom/right margin.\n *\n * @typedef {Object} ResourceMarginConfig\n * @property {Number} start Margin top in horizontal mode, margin left in vertical mode\n * @property {Number} end Margin bottom in horizontal mode, margin right in vertical mode\n*/\n/**\n * Mixin that holds configuration shared between resources in Scheduler and Scheduler Pro.\n * @mixin\n */\nexport default Target => class ResourceModelMixin extends Target {\n    static get $name() {\n        return 'ResourceModelMixin';\n    }\n    // Flag checked by ResourceStore to make sure it uses a valid subclass\n    static get isResourceModel() {\n        return true;\n    }\n    /**\n     * Set value for the specified field(s), triggering engine calculations immediately. See\n     * {@link Core.data.Model#function-set Model#set()} for arguments.\n     *\n     * This does not matter much on the resource itself, but is of importance when manipulating its references:\n     *\n     * ```javascript\n     * assignment.set('resourceId', 2);\n     * // resource.assignments is not yet up to date\n     *\n     * await assignment.setAsync('resourceId', 2);\n     * // resource.assignments is up to date\n     * ```\n     *\n     * @param {String|Object} field The field to set value for, or an object with multiple values to set in one call\n     * @param {*} [value] Value to set\n     * @param {Boolean} [silent=false] Set to true to not trigger events\n     * automatically.\n     * @function setAsync\n     * @category Editing\n     * @async\n     */\n    //region Fields\n    static get fields() {\n        return [\n            /**\n             * Unique identifier\n             * @field {String|Number} id\n             * @category Common\n             */\n            /**\n             * Get or set resource name\n             * @field {String} name\n             * @category Common\n             */\n            { name : 'name', type : 'string', persist : true },\n            /**\n             * Controls the primary color used for events assigned to this resource. Can be overridden per event using\n             * EventModels {@link Scheduler.model.mixin.EventModelMixin#field-eventColor eventColor config}. Also, see\n             * Schedulers {@link Scheduler.view.mixin.TimelineEventRendering#config-eventColor eventColor config}.\n             *\n             * For available standard colors, see\n             * {@link Scheduler.model.mixin.EventModelMixin#typedef-EventColor}.\n             *\n             * @field {EventColor} eventColor\n             * @category Styling\n             */\n            'eventColor',\n            /**\n             * Controls the style used for events assigned to this resource. Can be overridden per event using\n             * EventModels {@link Scheduler/model/mixin/EventModelMixin#field-eventStyle eventStyle config}. See Schedulers\n             * {@link Scheduler.view.mixin.TimelineEventRendering#config-eventStyle eventStyle config} for available\n             * options.\n             * @field {String} eventStyle\n             * @category Styling\n             */\n            'eventStyle',\n            /**\n             * Fully qualified image URL, used by `ResourceInfoColumn` and vertical modes `ResourceHeader` to display a miniature image\n             * for the resource.\n             * @field {String} imageUrl\n             * @category Styling\n             */\n            'imageUrl',\n            /**\n             * Image name relative to {@link Scheduler/view/mixin/SchedulerEventRendering#config-resourceImagePath},\n             * used by `ResourceInfoColumn` and vertical modes `ResourceHeader` to display a miniature image\n             * for the resource.\n             * Set value to `false` to disable image display.\n             * @field {String|Boolean} image\n             * @category Styling\n             */\n            'image',\n            /**\n             * Control how much space to leave between the first event/last event and the resources edge (top/bottom\n             * margin within the resource row in horizontal mode, left/right margin within the resource column in\n             * vertical mode), in px.\n             *\n             * It's also possible to set different values for top/left and bottom/right\n             * by assigning  an object to `resourceMargin` with `start` (margin top in horizontal mode,\n             * margin left in vertical mode) and `end` (margin bottom / margin right) properties:\n             * ```javascript\n             * scheduler = new Scheduler({\n             *     resourceMargin : {\n             *         start : 15,\n             *         end   : 1\n             *     }\n             * });\n             * ```\n             *\n             * @field {Number|ResourceMarginConfig} resourceMargin\n             * @category Layout\n             */\n            'resourceMargin',\n            /**\n             * Margin between stacked event bars for this resource, in px.\n             * @field {Number} barMargin\n             * @category Layout\n             */\n            { name : 'barMargin', type : 'number' },\n            /**\n             * Base height of this resource, in px. When unset, Schedulers configured rowHeight is used.\n             *\n             * This value is used in horizontal mode to determine row height. When stacking, it is used as input for\n             * calculating the actual row height:\n             *\n             * ```javascript\n             * row.height = (resource.rowHeight - (resourceMargin.start + resourceMargin.end)) * overlap count - barMargin * (overlap count - 1)\n             * ```\n             *\n             * When packing or overlapping, it is used as the actual row height.\n             *\n             * @field {Number} rowHeight\n             * @category Layout\n             */\n            /**\n             * Base width of this resource, in px. If not set, the `columnWidth` specified in\n             * the Scheduler's configured {@link Scheduler.view.Scheduler#config-resourceColumns} is used.\n             *\n             * This value is used in vertical mode to determine column width.\n             *\n             * @field {Number} columnWidth\n             * @category Layout\n             */\n            /**\n             * Specify this to use a resource specific event layout in horizontal mode, see\n             * {@link Scheduler.view.mixin.SchedulerEventRendering#config-eventLayout} for options.\n             *\n             * When unset (the default) Schedulers setting is used.\n             *\n             * @field {'stack'|'pack'|'mixed'|'none'} eventLayout\n             * @category Layout\n             */\n            'eventLayout'\n        ];\n    }\n    //endregion\n    //region Id change\n    updateAssignmentResourceIds() {\n        this.assigned.forEach(assignment => {\n            assignment.resourceId = this.id;\n        });\n    }\n    syncId(value) {\n        super.syncId(value);\n        this.updateAssignmentResourceIds();\n    }\n    //endregion\n    //region Getters\n    // Documented in Scheduler.model.ResourceModel, SchedulerPro.model.ResourceModel, Gantt.model.ResourceModel\n    get events() {\n        return this.assignments.reduce((events, assignment) => {\n            if (assignment.event) {\n                events.push(assignment.event);\n            }\n            return events;\n        }, []);\n    }\n    /**\n     * Returns all assignments for the resource\n     *\n     * @property {Scheduler.model.AssignmentModel[]}\n     * @category Common\n     */\n    get assignments() {\n        return this.assigned ? [...this.assigned] : [];\n    }\n    set assignments(assignments) {\n        // Remove old assignments\n        this.assignmentStore.remove(this.assignments);\n        // Repoint new ones\n        // Engine does not allow assigning to `assigned`, handle it here\n        assignments.forEach(assignment => {\n            assignment.resource = this;\n        });\n    }\n    /**\n     * Returns an array of events, associated with this resource\n     *\n     * @deprecated 5.3.6 Use the events property instead\n     *\n     * @returns {Scheduler.model.EventModel[]}\n     */\n    getEvents() {\n        VersionHelper.deprecate('scheduler', '6.0.0', 'getEvents() is deprecated, use the events property instead');\n        return this.events;\n    }\n    /**\n     * Returns `true` if the resource can be persisted.\n     * In a flat store, a resource is always considered persistable. In a tree store, a resource is considered\n     * persistable if its parent node is persistable.\n     *\n     * @property {Boolean}\n     * @readonly\n     * @category Editing\n     */\n    get isPersistable() {\n        return super.isPersistable && (!this.parent || this.parent.isPersistable);\n    }\n    //endregion\n    /**\n     * Unassigns this Resource from all its Events\n     */\n    unassignAll() {\n        this.assignments && this.assignmentStore.remove(this.assignments);\n    }\n    /**\n     * Returns the initials (first letter of the first & last space-separated word in the name) or an empty string\n     * if this resource has no name. You can override this method in a ResourceModel subclass to provide your own implementation\n     *\n     * @property {String}\n     * @readonly\n     * @category Common\n     */\n    get initials() {\n        const\n            { name = '' } = this;\n        if (!name) {\n            return '';\n        }\n        const names         = name.split(' '),\n            firstInitial  = names[0][0],\n            lastInitial   = (names.length > 1 ? names[names.length - 1][0] : '');\n        return firstInitial + lastInitial;\n    }\n    isWorkingTime(date) {\n        const calendar = (this.effectiveCalendar || this.project?.calendar);\n        return !calendar || calendar.isWorkingTime?.(date);\n    }\n};\n", "//---------------------------------------------------------------------------------------------------------------------\n/**\n * Given a single `Iterable`, returns an array of 2 iterables, mirroring the original one (which should not be used anymore).\n *\n * For example:\n *\n *     const gen = function* () { yield 1; yield 2; yield 3 }\n *\n *     const [ iterable1, iterable2 ] = split(gen())\n *     const [ iter1, iter2 ] = [\n *         iterable1[ Symbol.iterator ](),\n *         iterable2[ Symbol.iterator ]()\n *     ]\n *\n *     iter1.next() // 1\n *     iter2.next() // 1\n *     iter2.next() // 2\n *     iter2.next() // 3\n *     iter1.next() // 2\n *     iter1.next() // 3\n *     iter1.next() // done\n *     iter2.next() // done\n *\n * @param iterable\n */\nexport function split(iterable) {\n    const gen1Pending = [];\n    const gen2Pending = [];\n    let iterator;\n    const gen1 = function* () {\n        if (!iterator)\n            iterator = iterable[Symbol.iterator]();\n        while (true) {\n            if (gen1Pending.length) {\n                yield* gen1Pending;\n                gen1Pending.length = 0;\n            }\n            if (!iterator)\n                break;\n            const { value, done } = iterator.next();\n            if (done) {\n                iterator = null;\n                iterable = null;\n                break;\n            }\n            gen2Pending.push(value);\n            yield value;\n        }\n    };\n    const gen2 = function* () {\n        if (!iterator)\n            iterator = iterable[Symbol.iterator]();\n        while (true) {\n            if (gen2Pending.length) {\n                yield* gen2Pending;\n                gen2Pending.length = 0;\n            }\n            if (!iterator)\n                break;\n            const { value, done } = iterator.next();\n            if (done) {\n                iterator = null;\n                iterable = null;\n                break;\n            }\n            gen1Pending.push(value);\n            yield value;\n        }\n    };\n    return [gen1(), gen2()];\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* inBatchesBySize(iterator, batchSize) {\n    if (batchSize < 0)\n        throw new Error(\"Batch size needs to a natural number\");\n    batchSize = batchSize | 0;\n    const runningBatch = [];\n    for (const el of iterator) {\n        if (runningBatch.length === batchSize) {\n            yield runningBatch;\n            runningBatch.length = 0;\n        }\n        runningBatch.push(el);\n    }\n    if (runningBatch.length > 0)\n        yield runningBatch;\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* filter(iterator, func) {\n    let i = 0;\n    for (const el of iterator) {\n        if (func(el, i++))\n            yield el;\n    }\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* drop(iterator, howMany) {\n    let i = 0;\n    for (const el of iterator) {\n        if (++i > howMany)\n            yield el;\n    }\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function every(iterator, func) {\n    let i = 0;\n    for (const el of iterator) {\n        if (!func(el, i++))\n            return false;\n    }\n    return true;\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function some(iterator, func) {\n    let i = 0;\n    for (const el of iterator) {\n        if (func(el, i++))\n            return true;\n    }\n    return false;\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* map(iterator, func) {\n    let i = 0;\n    for (const el of iterator)\n        yield func(el, i++);\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function reduce(iterator, func, initialAcc) {\n    let i = 0;\n    let acc = initialAcc;\n    for (const el of iterator) {\n        acc = func(acc, el, i++);\n    }\n    return acc;\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* uniqueOnly(iterator) {\n    const seen = new Set();\n    for (const el of iterator) {\n        if (!seen.has(el)) {\n            seen.add(el);\n            yield el;\n        }\n    }\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* uniqueOnlyBy(iterator, func) {\n    const seen = new Set();\n    for (const el of iterator) {\n        const uniqueBy = func(el);\n        if (!seen.has(uniqueBy)) {\n            seen.add(uniqueBy);\n            yield el;\n        }\n    }\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* reverse(iterator) {\n    const all = Array.from(iterator);\n    for (let i = all.length - 1; i >= 0; i--)\n        yield all[i];\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* takeWhile(iterator, func) {\n    let i = 0;\n    for (const el of iterator) {\n        if (func(el, i++))\n            yield el;\n        else\n            return;\n    }\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* takeUntilIncluding(iterator, func) {\n    let i = 0;\n    for (const el of iterator) {\n        yield el;\n        if (func(el, i++))\n            return;\n    }\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* takeUntilExcluding(iterator, func) {\n    let i = 0;\n    for (const el of iterator) {\n        if (func(el, i++))\n            return;\n        yield el;\n    }\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* concat(...iterators) {\n    for (let i = 0; i < iterators.length; i++)\n        yield* iterators[i];\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* concatIterable(iteratorsProducer) {\n    for (const iterator of iteratorsProducer)\n        yield* iterator;\n}\n//---------------------------------------------------------------------------------------------------------------------\n// just a chained syntax sugar class\n// note, that we either use a combination of `this.derive()` + this.iterable (which will clear the `this.iterable`)\n// or, use just `this` as iterable, which will also clear the iterator\n//\nexport class ChainedIteratorClass {\n    constructor(iterable) {\n        this.iterable = undefined;\n        if (!iterable)\n            throw new Error(\"Require an iterable instance for chaining\");\n        this.iterable = iterable;\n    }\n    derive(iterable) {\n        this.iterable = undefined;\n        return new ChainedIteratorClass(iterable);\n    }\n    copy() {\n        const [iter1, iter2] = split(this.iterable);\n        this.iterable = iter2;\n        return new ChainedIteratorClass(iter1);\n    }\n    split() {\n        const [iter1, iter2] = split(this.iterable);\n        return [new ChainedIteratorClass(iter1), this.derive(iter2)];\n    }\n    inBatchesBySize(batchSize) {\n        return this.derive(inBatchesBySize(this.iterable, batchSize));\n    }\n    filter(func) {\n        return this.derive(filter(this.iterable, func));\n    }\n    drop(howMany) {\n        return this.derive(drop(this.iterable, howMany));\n    }\n    map(func) {\n        return this.derive(map(this.iterable, func));\n    }\n    reduce(func, initialAcc) {\n        return reduce(this, func, initialAcc);\n    }\n    concat() {\n        //@ts-ignore\n        return this.derive(concatIterable(this.iterable));\n    }\n    uniqueOnly() {\n        return this.derive(uniqueOnly(this.iterable));\n    }\n    uniqueOnlyBy(func) {\n        return this.derive(uniqueOnlyBy(this.iterable, func));\n    }\n    every(func) {\n        return every(this, func);\n    }\n    some(func) {\n        return some(this, func);\n    }\n    takeWhile(func) {\n        return this.derive(takeWhile(this.iterable, func));\n    }\n    *[Symbol.iterator]() {\n        let iterable = this.iterable;\n        if (!iterable)\n            throw new Error(\"Chained iterator already exhausted or used to derive the new one\");\n        // practice shows, that cleaning up the iterable after yourself helps garbage collector a lot\n        this.iterable = undefined;\n        yield* iterable;\n        // yes, we really want to avoid memory leaks\n        iterable = undefined;\n    }\n    toArray() {\n        return Array.from(this);\n    }\n    sort(order) {\n        return Array.from(this).sort(order);\n    }\n    toSet() {\n        return new Set(this);\n    }\n    toMap() {\n        //@ts-ignore\n        return new Map(this);\n    }\n    // toMap<K, V> () : T extends [ K, V ] ? Map<K, V> : never  {\n    //     return new Map<K, V>(this.iterable as (T extends [ K, V ] ? Iterable<T> : never)) as (T extends [ K, V ] ? Map<K, V> : never)\n    // }\n    flush() {\n        for (const element of this) { }\n    }\n    memoize() {\n        return new MemoizedIteratorClass(this);\n    }\n}\nexport const ChainedIterator = (iterator) => new ChainedIteratorClass(iterator);\nexport const CI = ChainedIterator;\n//---------------------------------------------------------------------------------------------------------------------\nexport class MemoizedIteratorClass extends ChainedIteratorClass {\n    constructor() {\n        super(...arguments);\n        this.elements = [];\n        this.$iterator = undefined;\n    }\n    set iterable(iterable) {\n        this.$iterable = iterable;\n    }\n    get iterable() {\n        return this;\n    }\n    derive(iterable) {\n        return new ChainedIteratorClass(iterable);\n    }\n    *[Symbol.iterator]() {\n        const elements = this.elements;\n        if (this.$iterable) {\n            if (!this.$iterator)\n                this.$iterator = this.$iterable[Symbol.iterator]();\n            let iterator = this.$iterator;\n            let alreadyConsumed = elements.length;\n            // yield the 1st batch \"efficiently\"\n            if (alreadyConsumed > 0)\n                yield* elements;\n            while (true) {\n                if (elements.length > alreadyConsumed) {\n                    // wonder if `yield* elements.slice(alreadyConsumed)` is more performant or not\n                    for (let i = alreadyConsumed; i < elements.length; i++)\n                        yield elements[i];\n                    alreadyConsumed = elements.length;\n                }\n                if (!iterator)\n                    break;\n                const { value, done } = iterator.next();\n                if (done) {\n                    iterator = this.$iterator = null;\n                    this.$iterable = null;\n                }\n                else {\n                    elements.push(value);\n                    alreadyConsumed++;\n                    yield value;\n                }\n            }\n        }\n        else {\n            yield* elements;\n        }\n    }\n}\nexport const MemoizedIterator = (iterator) => new MemoizedIteratorClass(iterator);\nexport const MI = MemoizedIterator;\n", "import { CI, MI } from \"../collection/Iterator.js\";\n//---------------------------------------------------------------------------------------------------------------------\nconst MixinInstanceOfProperty = Symbol('MixinIdentity');\nconst MixinStateProperty = Symbol('MixinStateProperty');\n//---------------------------------------------------------------------------------------------------------------------\nclass MixinWalkDepthState {\n    constructor() {\n        this.baseEl = undefined;\n        this.sourceEl = undefined;\n        this.$elementsByTopoLevel = undefined;\n        this.$topoLevels = undefined;\n        this.linearizedByTopoLevelsSource = MI(this.linearizedByTopoLevels());\n    }\n    static new(props) {\n        const me = new this();\n        props && Object.assign(me, props);\n        return me;\n    }\n    get topoLevels() {\n        if (this.$topoLevels !== undefined)\n            return this.$topoLevels;\n        return this.$topoLevels = this.buildTopoLevels();\n    }\n    buildTopoLevels() {\n        return Array.from(this.elementsByTopoLevel.keys()).sort((level1, level2) => level1 - level2);\n    }\n    get elementsByTopoLevel() {\n        if (this.$elementsByTopoLevel !== undefined)\n            return this.$elementsByTopoLevel;\n        return this.$elementsByTopoLevel = this.buildElementsByTopoLevel();\n    }\n    getOrCreateLevel(map, topoLevel) {\n        let elementsAtLevel = map.get(topoLevel);\n        if (!elementsAtLevel) {\n            elementsAtLevel = [];\n            map.set(topoLevel, elementsAtLevel);\n        }\n        return elementsAtLevel;\n    }\n    buildElementsByTopoLevel() {\n        let maxTopoLevel = 0;\n        const baseElements = this.baseEl ? CI(this.baseEl.walkDepthState.elementsByTopoLevel.values()).concat().toSet() : new Set();\n        const map = CI(this.sourceEl.requirements)\n            .map(mixin => mixin.walkDepthState.elementsByTopoLevel)\n            .concat()\n            .reduce((elementsByTopoLevel, [topoLevel, mixins]) => {\n            if (topoLevel > maxTopoLevel)\n                maxTopoLevel = topoLevel;\n            this.getOrCreateLevel(elementsByTopoLevel, topoLevel).push(mixins);\n            return elementsByTopoLevel;\n        }, new Map());\n        this.getOrCreateLevel(map, maxTopoLevel + 1).push([this.sourceEl]);\n        return CI(map).map(([level, elements]) => {\n            return [level, CI(elements).concat().uniqueOnly().filter(mixin => !baseElements.has(mixin)).sort((mixin1, mixin2) => mixin1.id - mixin2.id)];\n        }).toMap();\n    }\n    *linearizedByTopoLevels() {\n        yield* CI(this.topoLevels).map(level => this.elementsByTopoLevel.get(level)).concat();\n    }\n}\n// Note: 65535 mixins only, because of the hashing function implementation (String.fromCharCode)\nlet MIXIN_ID = 1;\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * @hidden\n */\nexport const identity = a => class extends a {\n};\n// export type IdentityMixin<Base extends object>         = < T extends AnyConstructor<Base>>(base : T) => T\n//\n// export const IdentityMixin             = <Base extends object>() : IdentityMixin<Base> => identity\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * @hidden\n */\nexport class ZeroBaseClass {\n}\n//---------------------------------------------------------------------------------------------------------------------\nclass MixinState {\n    constructor() {\n        this.id = MIXIN_ID++;\n        this.requirements = [];\n        this.baseClass = ZeroBaseClass;\n        this.identitySymbol = undefined;\n        this.mixinLambda = identity;\n        this.walkDepthState = undefined;\n        // private $hash               : MixinHash             = ''\n        this.$minimalClass = undefined;\n        this.name = '';\n    }\n    static new(props) {\n        const me = new this();\n        props && Object.assign(me, props);\n        me.walkDepthState = MixinWalkDepthState.new({ sourceEl: me, baseEl: getMixinState(me.baseClass) });\n        //------------------\n        const mixinLambda = me.mixinLambda;\n        const symbol = me.identitySymbol = Symbol(mixinLambda.name);\n        const mixinLambdaWrapper = Object.assign(function (base) {\n            const extendedClass = mixinLambda(base);\n            extendedClass.prototype[symbol] = true;\n            return extendedClass;\n        }, {\n            [MixinInstanceOfProperty]: symbol,\n            [MixinStateProperty]: me\n        });\n        Object.defineProperty(mixinLambdaWrapper, Symbol.hasInstance, { value: isInstanceOfStatic });\n        me.mixinLambda = mixinLambdaWrapper;\n        return me;\n    }\n    get minimalClass() {\n        if (this.$minimalClass !== undefined)\n            return this.$minimalClass;\n        return this.$minimalClass = this.buildMinimalClass();\n    }\n    // get hash () : MixinHash {\n    //     if (this.$hash !== '') return this.$hash\n    //\n    //     return this.$hash = this.buildHash()\n    // }\n    // buildHash () : MixinHash {\n    //     return String.fromCharCode(...this.walkDepthState.linearizedByTopoLevelsSource.map(mixin => mixin.id))\n    // }\n    getBaseClassMixinId(baseClass) {\n        const constructor = this.constructor;\n        const mixinId = constructor.baseClassesIds.get(baseClass);\n        if (mixinId !== undefined)\n            return mixinId;\n        const newId = MIXIN_ID++;\n        constructor.baseClassesIds.set(baseClass, newId);\n        return newId;\n    }\n    buildMinimalClass() {\n        const self = this.constructor;\n        let baseCls = this.baseClass;\n        const minimalClassConstructor = this.walkDepthState.linearizedByTopoLevelsSource.reduce((acc, mixin) => {\n            const { cls, hash } = acc;\n            const nextHash = hash + String.fromCharCode(mixin.id);\n            let wrapperCls = self.minimalClassesByLinearHash.get(nextHash);\n            if (!wrapperCls) {\n                wrapperCls = mixin.mixinLambda(cls);\n                mixin.name = wrapperCls.name;\n                self.minimalClassesByLinearHash.set(nextHash, wrapperCls);\n            }\n            acc.cls = wrapperCls;\n            acc.hash = nextHash;\n            return acc;\n        }, { cls: baseCls, hash: String.fromCharCode(this.getBaseClassMixinId(baseCls)) }).cls;\n        const minimalClass = Object.assign(minimalClassConstructor, {\n            [MixinInstanceOfProperty]: this.identitySymbol,\n            [MixinStateProperty]: this,\n            mix: this.mixinLambda,\n            derive: (base) => Mixin([minimalClass, base], base => class extends base {\n            }),\n            $: this,\n            toString: this.toString.bind(this)\n        });\n        Object.defineProperty(minimalClass, Symbol.hasInstance, { value: isInstanceOfStatic });\n        return minimalClass;\n    }\n    toString() {\n        return this.walkDepthState.linearizedByTopoLevelsSource.reduce((acc, mixin) => `${mixin.name}(${acc})`, this.baseClass.name);\n    }\n}\nMixinState.minimalClassesByLinearHash = new Map();\nMixinState.baseClassesIds = new Map();\n//endregion type helpers\n//---------------------------------------------------------------------------------------------------------------------\nconst isMixinClass = (func) => {\n    return Object.getPrototypeOf(func.prototype).constructor.hasOwnProperty(MixinStateProperty);\n};\nconst getMixinState = (func) => {\n    return Object.getPrototypeOf(func.prototype).constructor[MixinStateProperty];\n};\n//---------------------------------------------------------------------------------------------------------------------\nconst mixin = (required, mixinLambda) => {\n    let baseClass;\n    if (required.length > 0) {\n        const lastRequirement = required[required.length - 1];\n        // absence of `[ MixinStateProperty ]` indicates its a regular class and not a mixin class\n        // avoid assigning ZeroBaseClass - it will be applied as default at the end\n        if (!isMixinClass(lastRequirement) && lastRequirement !== ZeroBaseClass)\n            baseClass = lastRequirement;\n    }\n    const requirements = [];\n    required.forEach((requirement, index) => {\n        const mixinState = requirement[MixinStateProperty];\n        if (mixinState !== undefined) {\n            const currentBaseClass = mixinState.baseClass;\n            // ignore ZeroBaseClass - since those are compatible with any other base class\n            if (currentBaseClass !== ZeroBaseClass) {\n                if (baseClass) {\n                    // already found a base class from requirements earlier\n                    if (baseClass !== currentBaseClass) {\n                        const currentIsSub = currentBaseClass.prototype.isPrototypeOf(baseClass.prototype);\n                        const currentIsSuper = baseClass.prototype.isPrototypeOf(currentBaseClass.prototype);\n                        if (!currentIsSub && !currentIsSuper)\n                            throw new Error(\"Base class mismatch\");\n                        baseClass = currentIsSuper ? currentBaseClass : baseClass;\n                    }\n                }\n                else\n                    // first base class from requirements\n                    baseClass = currentBaseClass;\n            }\n            requirements.push(mixinState);\n        }\n        else {\n            if (index !== required.length - 1)\n                throw new Error(\"Base class should be provided as the last element of the requirements array\");\n        }\n    });\n    //------------------\n    const mixinState = MixinState.new({\n        requirements,\n        mixinLambda: mixinLambda,\n        baseClass: baseClass || ZeroBaseClass\n    });\n    return mixinState.minimalClass;\n};\n//---------------------------------------------------------------------------------------------------------------------\n// this function works both with default mixin class and mixin application function\n// it supplied internally as [Symbol.hasInstance] for the default mixin class and mixin application function\nconst isInstanceOfStatic = function (instance) {\n    return Boolean(instance && instance[this[MixinInstanceOfProperty]]);\n};\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * This is the `instanceof` analog for the classes created with [[Mixin]] helper. It also provides [typeguard](https://www.typescriptlang.org/docs/handbook/advanced-types.html#user-defined-type-guards).\n *\n * There's no strict need to use it, as the native `instanceof` is also supported for the mixins created with the [[Mixin]] helper and also provides\n * typeguarding.\n *\n * @param instance Any value, normally an instance of the mixin class\n * @param func The constructor function of the class, created with [[Mixin]]\n */\nexport const isInstanceOf = (instance, func) => {\n    return Boolean(instance && instance[func[MixinInstanceOfProperty]]);\n};\n//---------------------------------------------------------------------------------------\n/**\n * This function allows you to create mixin classes. Mixin classes solves the well-known problem with \"classical\" single-class inheritance,\n * in which class hierarchy must form a tree. When using mixins, class hierarchy becomes an arbitrary acyclic graph.\n *\n * Another view on mixins is that, if \"classical\" class is a point (a vertice of the graph), mixin class is an arrow between the points\n * (an edge in the graph, or rather, a description of the edge).\n *\n * Some background information about the mixin pattern can be found [here](https://mariusschulz.com/blog/typescript-2-2-mixin-classes)\n * and [here](https://www.bryntum.com/blog/the-mixin-pattern-in-typescript-all-you-need-to-know/).\n *\n * The pattern, being described here, is the evolution of the previous work, and main advantage is that it solves the compilation error\n * for circular references.\n *\n * Mixin definition. Requirements\n * ------------------------------\n *\n * The pattern looks like:\n *\n *     class Mixin1 extends Mixin(\n *         [],\n *         (base : AnyConstructor) =>\n *\n *         class Mixin1 extends base {\n *             prop1        : string\n *             method1 () : string {\n *                 return this.prop1\n *             }\n *             static static1 : number\n *         }\n *     ){}\n *\n * The core of the definition above is the mixin lambda - a function which receives a base class as its argument and returns a class,\n * extending the base class with additional properties.\n *\n * The example above creates a mixin `Mixin1` which has no requirements. Requirements are the other mixins,\n * which needs to be included in the base class of this mixin.\n *\n * There's also a special type of the requirement,\n * called \"base class requirement\". It is optional and can only appear as the last argument of the requirements\n * array. It does not have to be a mixin, created with the `Mixin` function, but can be any JS class. This requirement\n * specifies, that the base class of this mixin should be a subclass of the given class (or that class itself).\n *\n * The requirements of the mixin needs to be listed 3 times:\n * - as an array of constructor functions, in the 1st argument of the `Mixin` function\n * - as an instance type intersection, in the 1st type argument for the [[AnyConstructor]] type\n * - as an static type intersection, in the 2nd type argument for the [[AnyConstructor]] type\n *\n * For example, `Mixin2` requires `Mixin1`:\n *\n *     class Mixin2 extends Mixin(\n *         [ Mixin1 ],\n *         (base : AnyConstructor<Mixin1, typeof Mixin1>) =>\n *\n *         class Mixin2 extends base {\n *         }\n *     ){}\n *\n * And `Mixin3` requires both `Mixin1` and `Mixin2` (even that its redundant, since `Mixin2` already requires `Mixin1`,\n * but suppose we don't know the implementation details of the `Mixin2`):\n *\n *     class Mixin3 extends Mixin(\n *         [ Mixin1, Mixin2 ],\n *         (base : AnyConstructor<Mixin1 & Mixin2, typeof Mixin1 & typeof Mixin2>) =>\n *\n *         class Mixin3 extends base {\n *         }\n *     ){}\n *\n * Now, `Mixin4` requires `Mixin3`, plus, it requires the base class to be `SomeBaseClass`:\n *\n *     class SomeBaseClass {}\n *\n *     class Mixin4 extends Mixin(\n *         [ Mixin3, SomeBaseClass ],\n *         (base : AnyConstructor<\n *             Mixin3 & SomeBaseClass, typeof Mixin3 & typeof SomeBaseClass\n *         >) =>\n *\n *         class Mixin4 extends base {\n *         }\n *     ){}\n *\n * As already briefly mentioned, the requirements are \"scanned\" deep and included only once. Also all minimal classes are cached -\n * for example the creation of the Mixin3\u00A0will reuse the minimal class of the Mixin2\u00A0instead of creating a new intermediate class.\n * This means that all edges of the mixin dependencies graph are created only once (up to the base class).\n *\n * Requirements can not form cycles - that will generate both compilation error and run-time stack overflow.\n *\n * The typing for the `Mixin` function will provide a compilation error, if the requirements don't match, e.g. some requirement is\n * listed in the array, but missed in the types. This protects you from trivial mistakes. However, the typing is done up to 10 requirements only.\n * If you need more than 10 requirements for the mixin, use the [[MixinAny]] function, which is an exact analog of `Mixin`, but without\n * this type-level protection for requirements mismatch.\n *\n * It is possible to simplify the type of the `base` argument a bit, by using the [[ClassUnion]] helper. However, it seems in certain edge cases\n * it may lead to compilation errors. If your scenarios are not so complex you should give it a try. Using the [[ClassUnion]] helper, the\n * `Mixin3` can be defined as:\n *\n *     class Mixin3 extends Mixin(\n *         [ Mixin1, Mixin2 ],\n *         (base : ClassUnion<typeof Mixin1, typeof Mixin2>) =>\n *\n *         class Mixin3 extends base {\n *         }\n *     ){}\n *\n * Note, that due to this [issue](https://github.com/Microsoft/TypeScript/issues/7342), if you use decorators in your mixin class,\n * the declaration needs to be slightly more verbose (can not use compact notation for the arrow functions):\n *\n *     class Mixin2 extends Mixin(\n *         [ Mixin1 ],\n *         (base : AnyConstructor<Mixin1, typeof Mixin1>) => {\n *             class Mixin2 extends base {\n *                 @decorator\n *                 prop2 : string\n *             }\n *             return Mixin2\n *         }\n *     ){}\n *\n * As you noticed, the repeating listing of the requirements is somewhat verbose. Suggestions how the pattern can be improved\n * are [very welcomed](mailto:nickolay8@gmail.com).\n *\n * Mixin instantiation. Mixin constructor. `instanceof`\n * --------------------------------\n *\n * You can instantiate any mixin class just by using its constructor:\n *\n *     const instance1 = new Mixin1()\n *     const instance2 = new Mixin2()\n *\n * As explained in details [here](https://mariusschulz.com/blog/typescript-2-2-mixin-classes), mixin constructor should accept variable number of arguments\n * with the `any` type. This is simply because the mixin is supposed to be applicable to any other base class, which may have its own type\n * of the constructor arguments.\n *\n *     class Mixin2 extends Mixin(\n *         [ Mixin1 ],\n *         (base : AnyConstructor<Mixin1, typeof Mixin1>) => {\n *             class Mixin2 extends base {\n *                 prop2 : string\n *\n *                 constructor (...args: any[]) {\n *                     super(...args)\n *                     this.prop2 = ''\n *                 }\n *             }\n *             return Mixin2\n *         }\n *     ){}\n *\n * In other words, its not possible to provide any type-safety for mixin instantiation using regular class constructor.\n *\n * However, if we change the way we create class instances a little, we can get the type-safety back. For that,\n * we need to use a \"uniform\" class constructor - a constructor which has the same form for all classes. The [[Base]] class\n * provides such constructor as its static [[Base.new|new]] method. The usage of `Base` class is not required - you can use\n * any other base class.\n *\n * The `instanceof` operator works as expected for instances of the mixin classes. It also takes into account all the requirements.\n * For example:\n *\n *     const instance2 = new Mixin2()\n *\n *     const isMixin2 = instance2 instanceof Mixin2 // true\n *     const isMixin1 = instance2 instanceof Mixin1 // true, since Mixin2 requires Mixin1\n *\n * See also [[isInstanceOf]].\n *\n * \"Manual\" class derivation\n * --------------------------------\n *\n * You have defined a mixin using the `Mixin` function. Now you want to apply it to some base class to get the \"specific\" class to be able\n * to instantiate it. As described above - you don't have to, you can instantiate it directly.\n *\n * Sometimes however, you still want to derive the class \"manually\". For that, you can use static methods `mix` and `derive`, available\n * on all mixins.\n *\n * The `mix` method provides a direct access to the mixin lambda. It does not take requirements into account - that's the implementor's responsibility.\n * The `derive` method is something like \"accumulated\" mixin lambda - mixin lambda with all requirements.\n *\n * Both `mix` and `derive` provide the reasonably typed outcome.\n *\n *     class Mixin1 extends Mixin(\n *         [],\n *         (base : AnyConstructor) =>\n *\n *         class Mixin1 extends base {\n *             prop1        : string\n *         }\n *     ){}\n *\n *     class Mixin2 extends Mixin(\n *         [ Mixin1 ],\n *         (base : AnyConstructor<Mixin1, typeof Mixin1>) =>\n *\n *         class Mixin2 extends base {\n *             prop2        : string\n *         }\n *     ){}\n *\n *     const ManualMixin1 = Mixin1.mix(Object)\n *     const ManualMixin2 = Mixin2.mix(Mixin1.mix(Object))\n *\n *     const AnotherManualMixin1 = Mixin1.derive(Object)\n *     const AnotherManualMixin2 = Mixin2.derive(Object)\n *\n * Generics\n * --------\n *\n * Using generics with mixins is tricky because TypeScript does not have higher-kinded types and type inference for generics. Still some form\n * of generic arguments is possible, using the interface merging trick.\n *\n * Here's the pattern:\n *\n * ```ts\n * class Duplicator<Element> extends Mixin(\n *     [],\n *     (base : AnyConstructor) =>\n *\n *     class Duplicator extends base {\n *         Element                 : any\n *\n *         duplicate (value : this[ 'Element' ]) : this[ 'Element' ][] {\n *             return [ value, value ]\n *         }\n *     }\n * ){}\n *\n * interface Duplicator<Element> {\n *     Element : Element\n * }\n *\n * const dup = new Duplicator<boolean>()\n *\n * dup.duplicate('foo') // TS2345: Argument of type '\"foo\"' is not assignable to parameter of type 'boolean'.\n * ```\n *\n * In the example above, we've defined a generic argument `Element` for the outer mixin class, but in fact, that argument is not used anywhere in the\n * nested class definition in the mixin lambda. Instead, in the nested class, we define a property `Element`, which plays the role of the\n * generic argument.\n *\n * Mixin class methods then can refer to the generic type as `this[ 'Element' ]`.\n *\n * The generic arguments of the outer and nested classes are tied together in the additional interface declaration, which, by TypeScript rules\n * is merged together with the class definition. In this declaration, we specify that property `Element` has type of the `Element` generic argument.\n *\n * Limitations\n * ---------\n *\n * The most important limitation we found (which affect the old pattern as well) is the compilation error, which will be issued for\n * the private/protected methods, when compiling with declarations emitting (*.d.ts files generation).\n *\n * This is a [well-known problem](https://github.com/microsoft/TypeScript/issues/35822) in the TypeScript world \u2013 the *.d.ts files do not represent\n * the internal data structures of the TypeScript compiler well. Instead they use some simplified syntax, optimized for human editing.\n * This is why the compiler may generate false positives in the incremental compilation mode \u2013 it uses *.d.ts files internally.\n *\n * This can be a show-stopper for the people that use declaration files (usually for publishing). Keep in mind though, that you can always\n * publish actual TypeScript sources along with the generated JavaScript files, instead of publishing JavaScript + declarations files.\n *\n */\nexport const Mixin = mixin;\n/**\n * This is an exact analog of the [[Mixin]] function, but without type-level protection for requirements mismatch.\n * It supports unlimited number of requirements.\n */\nexport const MixinAny = mixin;\n", "//---------------------------------------------------------------------------------------------------------------------\n/**\n * This is a base class, providing the type-safe static constructor [[new]]. This is very convenient when using\n * [[Mixin|mixins]], as mixins can not have types in the constructors.\n */\nexport class Base {\n    /**\n     * This method applies its 1st argument (if any) to the current instance using `Object.assign()`.\n     *\n     * Supposed to be overridden in the subclasses to customize the instance creation process.\n     *\n     * @param props\n     */\n    initialize(props) {\n        props && Object.assign(this, props);\n    }\n    /**\n     * This is a type-safe static constructor method, accepting a single argument, with the object, corresponding to the\n     * class properties. It will generate a compilation error, if unknown property is provided.\n     *\n     * For example:\n     *\n     * ```ts\n     * class MyClass extends Base {\n     *     prop     : string\n     * }\n     *\n     * const instance : MyClass = MyClass.new({ prop : 'prop', wrong : 11 })\n     * ```\n     *\n     * will produce:\n     *\n     * ```plaintext\n     * TS2345: Argument of type '{ prop: string; wrong: number; }' is not assignable to parameter of type 'Partial<MyClass>'.\n     * Object literal may only specify known properties, and 'wrong' does not exist in type 'Partial<MyClass>'\n     * ```\n     *\n     * The only thing this constructor does is create an instance and call the [[initialize]] method on it, forwarding\n     * the first argument. The customization of instance is supposed to be performed in that method.\n     *\n     * @param props\n     */\n    static new(props) {\n        const instance = new this();\n        instance.initialize(props);\n        return instance;\n    }\n}\n", "import { Mixin } from \"../../ChronoGraph/class/BetterMixin.js\";\n/**\n * This a base generic mixin for every class, that belongs to a project.\n *\n * It just provides getter/setter for the `project` property, along with some convenience methods\n * to access the project's stores.\n */\nexport class AbstractPartOfProjectGenericMixin extends Mixin([], (base) => {\n    const superProto = base.prototype;\n    class AbstractPartOfProjectGenericMixin extends base {\n        async commitAsync() {\n            return this.project.commitAsync();\n        }\n        set project(project) {\n            this.$project = project;\n        }\n        get project() {\n            return this.$project;\n        }\n        calculateProject() {\n            throw new Error(\"Implement me\");\n        }\n        /**\n         * The method to set the [[AbstractProjectMixin|project]] instance, this entity belongs to.\n         */\n        setProject(project) {\n            return this.project = project;\n        }\n        /**\n         * The method to get the [[AbstractProjectMixin|project]] instance, this entity belongs to.\n         */\n        getProject() {\n            if (this.project)\n                return this.project;\n            return this.setProject(this.calculateProject());\n        }\n        /**\n         * Convenience method to get the instance of the assignment store in the [[AbstractProjectMixin|project]] instance, this entity belongs to.\n         */\n        getAssignmentStore() {\n            const project = this.getProject();\n            return project?.assignmentStore;\n        }\n        /**\n         * Convenience method to get the instance of the dependency store in the [[AbstractProjectMixin|project]] instance, this entity belongs to.\n         */\n        getDependencyStore() {\n            const project = this.getProject();\n            return project?.dependencyStore;\n        }\n        /**\n         * Convenience method to get the instance of the event store in the [[AbstractProjectMixin|project]] instance, this entity belongs to.\n         */\n        getEventStore() {\n            const project = this.getProject();\n            return project?.eventStore;\n        }\n        /**\n         * Convenience method to get the instance of the resource store in the [[AbstractProjectMixin|project]] instance, this entity belongs to.\n         */\n        getResourceStore() {\n            const project = this.getProject();\n            return project?.resourceStore;\n        }\n        /**\n         * Convenience method to get the instance of the calendar manager store in the [[AbstractProjectMixin|project]] instance, this entity belongs to.\n         */\n        getCalendarManagerStore() {\n            const project = this.getProject();\n            return project?.calendarManagerStore;\n        }\n    }\n    return AbstractPartOfProjectGenericMixin;\n}) {\n}\n", "import { Mixin } from \"../../ChronoGraph/class/BetterMixin.js\";\nimport { AbstractPartOfProjectGenericMixin } from \"./AbstractPartOfProjectGenericMixin.js\";\n/**\n * This a base generic mixin for every class, that belongs to a scheduler_core project.\n *\n * It just provides getter/setter for the `project` property, along with some convenience methods\n * to access the project's stores.\n */\nexport class CorePartOfProjectGenericMixin extends Mixin([AbstractPartOfProjectGenericMixin], (base) => {\n    const superProto = base.prototype;\n    class CorePartOfProjectGenericMixin extends base {\n        //region Store getters\n        get eventStore() {\n            return this.project?.eventStore;\n        }\n        get resourceStore() {\n            return this.project?.resourceStore;\n        }\n        get assignmentStore() {\n            return this.project?.assignmentStore;\n        }\n        get dependencyStore() {\n            return this.project?.dependencyStore;\n        }\n        get calendarManagerStore() {\n            return this.project?.calendarManagerStore;\n        }\n        //endregion\n        //region Entity getters\n        /**\n         * Convenience method to get the instance of event by its id.\n         */\n        getEventById(id) {\n            return this.eventStore?.getById(id);\n        }\n        /**\n         * Convenience method to get the instance of dependency by its id.\n         */\n        getDependencyById(id) {\n            return this.dependencyStore?.getById(id);\n        }\n        /**\n         * Convenience method to get the instance of resource by its id.\n         */\n        getResourceById(id) {\n            return this.resourceStore?.getById(id);\n        }\n        /**\n         * Convenience method to get the instance of assignment by its id.\n         */\n        getAssignmentById(id) {\n            return this.assignmentStore?.getById(id);\n        }\n        /**\n         * Convenience method to get the instance of calendar by its id.\n         */\n        getCalendarById(id) {\n            return this.calendarManagerStore?.getById(id);\n        }\n    }\n    return CorePartOfProjectGenericMixin;\n}) {\n}\n", "import { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { AbstractPartOfProjectGenericMixin } from \"../../AbstractPartOfProjectGenericMixin.js\";\nimport Store from \"../../../../Core/data/Store.js\";\n/**\n * This an abstract mixin for every Store, that belongs to a project.\n *\n * The store with this mixin, supposes, that it will be \"joining\" the project, a reference to which is saved\n * and made available for all models.\n */\nexport class AbstractPartOfProjectStoreMixin extends Mixin([\n    AbstractPartOfProjectGenericMixin,\n    Store\n], (base) => {\n    const superProto = base.prototype;\n    class AbstractPartOfProjectStoreMixin extends base {\n        constructor() {\n            super(...arguments);\n            this.isLoadingData = false;\n            this.disableHasLoadedDataToCommitFlag = false;\n        }\n        static get $name() {\n            return 'AbstractPartOfProjectStoreMixin';\n        }\n        //region Async event triggering\n        // NOTE: Tested in Scheduler (EventStore.t.js)\n        construct(config = {}) {\n            config.asyncEvents = {\n                add: true,\n                remove: true,\n                removeAll: true,\n                change: true,\n                refresh: true,\n                replace: true,\n                move: true,\n                update: true\n            };\n            return superProto.construct.call(this, config);\n        }\n        // Override for event triggering, to allow triggering events before and after some async operation.\n        // The \"before\" events are prefix, the \"after\" are not.\n        trigger(eventName, param) {\n            const me = this, { asyncEvents, project } = me, asyncEvent = asyncEvents?.[eventName], asyncAction = asyncEvent && (asyncEvent === true || asyncEvent[param.action]);\n            if (!asyncAction) {\n                // Trigger as usual\n                return superProto.trigger.call(me, eventName, param);\n            }\n            // Trigger prefixed before event\n            superProto.trigger.call(me, `${eventName}PreCommit`, { ...param });\n            // Event that did not invalidate engine, for example \"update\"\n            if (!project || project.isEngineReady() && !project.isWritingData) {\n                // Trigger \"original\" event\n                superProto.trigger.call(me, eventName, param);\n            }\n            else if (!me.eventsSuspended && project) {\n                // Instead of making n auto-destroying listeners (which takes enormous amount of time), we make a single\n                // one and queue all the events. When dataReady event is triggered we trigger those events\n                // https://github.com/bryntum/support/issues/3154\n                if (!project.dataReadyDetacher) {\n                    project.queuedDataReadyEvents = [];\n                    // Wait for commit without triggering one, otherwise we would affect commit scheduling\n                    project.dataReadyDetacher = project.ion({\n                        dataReady() {\n                            // Trigger \"original\" event\n                            this.queuedDataReadyEvents.forEach(([superProto, scope, eventName, param]) => {\n                                superProto.trigger.call(scope, eventName, param);\n                            });\n                            project.queuedDataReadyEvents = null;\n                            project.dataReadyDetacher();\n                            project.dataReadyDetacher = null;\n                        },\n                        once: true\n                    });\n                }\n                project.queuedDataReadyEvents.push([superProto, me, eventName, param]);\n            }\n            // No way of handling other return values in this scenario, won't work for preventable events\n            return true;\n        }\n        //endregion\n        calculateProject() {\n            // project is supposed to be provided for stores from outside\n            return this.project;\n        }\n        setStoreData(data) {\n            // Loading data sets hasLoadedDataToCommit flag.\n            // So we treat the 1st commit after data loading as the initial one\n            if (this.project && !(this.syncDataOnLoad || this.disableHasLoadedDataToCommitFlag)) {\n                this.project.hasLoadedDataToCommit = true;\n            }\n            this.isLoadingData = true;\n            superProto.setStoreData.call(this, data);\n            this.isLoadingData = false;\n            this.project?.trigger('storeRefresh', { store: this });\n        }\n        // Override to postpone auto commits to after project commit, makes sure records are unmodified after commit\n        async doAutoCommit() {\n            if (this.suspendCount <= 0 && this.project && !this.project.isEngineReady()) {\n                // @ts-ignore\n                await this.project.commitAsync();\n            }\n            superProto.doAutoCommit.call(this);\n        }\n        async addAsync(records, silent) {\n            const result = this.add(records, silent);\n            await this.project.commitAsync();\n            return result;\n        }\n        async insertAsync(index, records, silent) {\n            const result = this.insert(index, records, silent);\n            await this.project.commitAsync();\n            return result;\n        }\n        async loadDataAsync(data) {\n            this.data = data;\n            await this.project.commitAsync();\n        }\n        performFilter() {\n            if (this.project && (this.isLoadingData || this.rootNode?.isLoading)) {\n                // Reapply filters after calculations, in case filtering on some calculated field\n                this.project.commitAsync().then(() => this.filter());\n            }\n            return super.performFilter(...arguments);\n        }\n    }\n    return AbstractPartOfProjectStoreMixin;\n}) {\n}\n", "import { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { AbstractPartOfProjectStoreMixin } from \"../../store/mixin/AbstractPartOfProjectStoreMixin.js\";\nimport { AbstractPartOfProjectGenericMixin } from \"../../AbstractPartOfProjectGenericMixin.js\";\nimport Model from \"../../../../Core/data/Model.js\";\nimport { isInstanceOf } from '../../../../ChronoGraph/class/BetterMixin.js';\n/**\n * This an abstract mixin for every Model that belongs to a project.\n *\n * The model with this mixin, supposes that it will be \"joining\" a store that is already part of a project,\n * so that such model can take a reference to the project from it.\n *\n * It provides 2 template methods [[joinProject]] and [[leaveProject]], which can be overridden in other mixins.\n */\nexport class AbstractPartOfProjectModelMixin extends Mixin([AbstractPartOfProjectGenericMixin, Model], (base) => {\n    const superProto = base.prototype;\n    class AbstractPartOfProjectModelMixin extends base {\n        joinStore(store) {\n            let joinedProject = null;\n            // Joining a store that is not part of project (for example a chained store) should not affect engine\n            if (isInstanceOf(store, AbstractPartOfProjectStoreMixin)) {\n                const project = store.getProject();\n                if (project && !this.getProject()) {\n                    this.setProject(project);\n                    joinedProject = project;\n                }\n            }\n            superProto.joinStore.call(this, store);\n            // Join directly only if not repopulating the store, in which case we will be joined later after\n            // graph has been recreated\n            if (joinedProject && !joinedProject.isRepopulatingStores)\n                this.joinProject();\n        }\n        unjoinStore(store, isReplacing = false) {\n            superProto.unjoinStore.call(this, store, isReplacing);\n            const { project } = this;\n            const isLeavingProjectStore = (isInstanceOf(store, AbstractPartOfProjectStoreMixin))\n                && !store.isFillingFromMaster && project === (store.isChained && store.project ?\n                store.masterStore.project\n                : store.project);\n            // Leave project when unjoining from store, but do not bother if the project is being destroyed or if\n            // the dataset is being replaced, or if store is chained into other project\n            if (project && !project.isDestroying && !project.isRepopulatingStores && isLeavingProjectStore) {\n                this.leaveProject(isReplacing);\n                this.setProject(null);\n            }\n            // @ts-ignore\n            if (isLeavingProjectStore)\n                this.graph = null;\n        }\n        /**\n         * Template method, which is called when model is joining the project (through joining some store that\n         * has already joined the project)\n         */\n        joinProject() { }\n        /**\n         * Template method, which is called when model is leaving the project (through leaving some store usually)\n         */\n        leaveProject(isReplacing = false) { }\n        calculateProject() {\n            const store = this.stores.find(s => (isInstanceOf(s, AbstractPartOfProjectStoreMixin)) && !!s.getProject());\n            return store?.getProject();\n        }\n        async setAsync(fieldName, value, silent) {\n            const result = this.set(fieldName, value, silent);\n            await this.project?.commitAsync();\n            return result;\n        }\n        async getAsync(fieldName) {\n            await this.project?.commitAsync();\n            return this.get(fieldName);\n        }\n        get isStmRestoring() {\n            const project = this.getProject();\n            return project?.isRestoringData || project?.stm.isRestoring || false;\n        }\n    }\n    return AbstractPartOfProjectModelMixin;\n}) {\n}\n", "import { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { CorePartOfProjectGenericMixin } from \"../../CorePartOfProjectGenericMixin.js\";\nimport Model from \"../../../../Core/data/Model.js\";\nimport { AbstractPartOfProjectModelMixin } from \"./AbstractPartOfProjectModelMixin.js\";\n/**\n * This a mixin for every Model that belongs to a scheduler_core project.\n *\n * It adds functions needed to calculate invalidated fields on project commit.\n */\nexport class CorePartOfProjectModelMixin extends Mixin([\n    AbstractPartOfProjectModelMixin,\n    CorePartOfProjectGenericMixin,\n    Model\n], (base) => {\n    const superProto = base.prototype;\n    class CorePartOfProjectModelMixin extends base {\n        constructor() {\n            super(...arguments);\n            // Flag set during calculation\n            this.$isCalculating = false;\n            // Proposed changes\n            this.$changed = {};\n            // Value before proposed change, for buckets that need to update data early\n            this.$beforeChange = {};\n        }\n        get isInActiveTransaction() {\n            return true;\n        }\n        // Invalidate record upon joining project, leads to a buffered commit\n        joinProject() {\n            this.invalidate();\n        }\n        // Trigger a buffered commit when leaving the project\n        leaveProject(isReplacing = false) {\n            superProto.leaveProject.call(this, isReplacing);\n            this.project?.bufferedCommitAsync();\n        }\n        /**\n         * Invalidates this record, queueing it for calculation on project commit.\n         */\n        invalidate() {\n            this.project?.invalidate(this);\n        }\n        /**\n         * Used to retrieve the proposed (before 'dataReady') or current (after 'dataReady') value for a field.\n         * If there is no proposed change, it is functionally equal to a normal `record.get()` call.\n         */\n        getCurrentOrProposed(fieldName) {\n            if (fieldName in this.$changed && this.$changed[fieldName] !== true) {\n                return this.$changed[fieldName];\n            }\n            return this.get(fieldName) ?? null;\n        }\n        /**\n         * Determines if the specified field has a value or not, value can be either current or proposed.\n         */\n        hasCurrentOrProposed(fieldName) {\n            return ((fieldName in this.$changed) && this.$changed[fieldName] != true) || this.get(fieldName) != null;\n        }\n        /**\n         * Propose changes, to be considered during calculation. Also invalidates the record.\n         */\n        propose(changes) {\n            // @ts-ignore\n            if (this.project || this.recurringTimeSpan?.project) {\n                const keys = Object.keys(changes);\n                for (let i = 0; i < keys.length; i++) {\n                    const key = keys[i];\n                    this.$changed[key] = changes[key];\n                }\n                this.invalidate();\n            }\n            else {\n                // If no project, behave as a normal model would\n                this.set(changes);\n            }\n        }\n        /**\n         * Similar to propose, but with more options. Mostly used by buckets, since they need data to update early.\n         */\n        setChanged(field, value, invalidate = true, setData = false) {\n            const me = this;\n            me.$changed[field] = value;\n            // Buckets need to keep data up to date immediately\n            if (setData) {\n                if (!(field in me.$beforeChange)) {\n                    me.$beforeChange[field] = me.get(field);\n                }\n                me.setData(field, value);\n            }\n            invalidate && me.invalidate();\n        }\n        /**\n         * Hook called before project refresh, override and calculate required changes in subclasses\n         */\n        calculateInvalidated() { }\n        /**\n         * Called after project refresh, before dataReady. Announce updated data\n         */\n        finalizeInvalidated(silent = false) {\n            const me = this;\n            me.$isCalculating = true;\n            if (!silent) {\n                // First silently revert any data change (used by buckets), otherwise it won't be detected by `set()`\n                me.setData(me.$beforeChange);\n                // Then do a proper set\n                me.set(me.$changed);\n            }\n            else {\n                me.setData(me.$changed);\n            }\n            me.$changed = {};\n            me.$beforeChange = {};\n            me.$isCalculating = false;\n        }\n    }\n    return CorePartOfProjectModelMixin;\n}) {\n}\n", "import { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { CorePartOfProjectModelMixin } from \"../mixin/CorePartOfProjectModelMixin.js\";\n/**\n * Core resource model class.\n */\nexport class CoreResourceMixin extends Mixin([CorePartOfProjectModelMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreResourceMixin extends base {\n        get assigned() {\n            return this.project?.assignmentStore.getResourcesAssignments(this);\n        }\n        joinProject() {\n            // Set up assignment -> resource mapping when joining store after assignment (skip during load)\n            // (note that there is no resourceStore yet when loading inline data, thus the first part of the condition)\n            if (this.resourceStore && !this.resourceStore.isLoadingData) {\n                this.assignmentStore?.query(a => a.get('resource') === this.id).forEach(unresolved => unresolved.setChanged('resource', this));\n            }\n            superProto.joinProject.call(this);\n        }\n        leaveProject(isReplacing = false) {\n            // `this.assigned` will be empty if model is added to project and then removed immediately\n            // w/o any propagations\n            // when replacing a resource or reloading the store, the assignments should be left intact\n            if (this.assigned && !isReplacing && !this.resourceStore?.isLoadingData) {\n                const resourceStore = this.resourceStore;\n                // to batch the assignments removal, we don't remove the assignments right away, but instead\n                // add them for the batched removal to the `assignmentsForRemoval` property of the event store\n                this.assigned.forEach(assignment => resourceStore.assignmentsForRemoval.add(assignment));\n            }\n            superProto.leaveProject.call(this);\n        }\n        applyValue(useProp, key, value, skipAccessor, field) {\n            // Changing id on a resource should update resourceId on its assignments\n            // (note that field might not exist, if user supplies data for undefined fields)\n            if (field?.name === 'id') {\n                this.assigned.forEach(assignment => {\n                    assignment.set('resourceId', value);\n                });\n            }\n            superProto.applyValue.call(this, useProp, key, value, skipAccessor, field);\n        }\n    }\n    return CoreResourceMixin;\n}) {\n}\n", "import GridRowModel from '../../Grid/data/GridRowModel.js';\nimport PartOfProject from '../data/mixin/PartOfProject.js';\nimport ResourceModelMixin from './mixin/ResourceModelMixin.js';\nimport { CoreResourceMixin } from '../../Engine/quark/model/scheduler_core/CoreResourceMixin.js';\nconst EngineMixin = CoreResourceMixin;\n/**\n * @module Scheduler/model/ResourceModel\n */\n/**\n * This class represent a single Resource in scheduler, usually added to a {@link Scheduler.data.ResourceStore}.\n *\n * It is a subclass of  {@link Core.data.Model}. Please refer to the documentation for that class to become familiar\n * with the base interface of the resource.\n *\n * ## Fields and references\n *\n * A resource has a few predefined fields, see Fields below. If you want to add more fields with meta data describing\n * your resources then you should subclass this class:\n *\n * ```javascript\n * class MyResource extends ResourceModel {\n *   static get fields() {\n *     return [\n *       // \"id\" and \"name\" fields are already provided by the superclass\n *       { name: 'company', type : 'string' }\n *     ];\n *   }\n * });\n * ```\n *\n * If you want to use other names in your data for the id and name fields you can configure them as seen below:\n *\n * ```javascript\n * class MyResource extends ResourceModel {\n *   static get fields() {\n *     return [\n *        { name: 'name', dataSource: 'userName' }\n *     ];\n *   },\n * });\n * ```\n *\n * After load and project normalization, these references are accessible (assuming their respective stores are loaded):\n * - `{@link #property-assignments}` - The linked assignment records\n * - `{@link #property-events}` - The linked (through assignments) event records\n *\n * ## Async resolving of references\n *\n * As described above, a resource has links to assignments and events. These references are populated async, using the\n * calculation engine of the project that the resource via its store is a part of. Because of this asyncness, references\n * cannot be used immediately after assignment modifications:\n *\n * ```javascript\n * assignment.resourceId = 2;\n * // resource.assignments is not yet up to date\n * ```\n *\n * To make sure references are updated, wait for calculations to finish:\n *\n * ```javascript\n * assignment.resourceId = 2;\n * await assignment.project.commitAsync();\n * // resource.assignments is up to date\n * ```\n *\n * As an alternative, you can also use `setAsync()` to trigger calculations directly after the change:\n *\n * ```javascript\n * await assignment.setAsync({ resourceId : 2});\n * // resource.assignments is up to date\n * ```\n *\n * @extends Grid/data/GridRowModel\n * @mixes Scheduler/model/mixin/ResourceModelMixin\n */\nexport default class ResourceModel extends ResourceModelMixin(PartOfProject(EngineMixin.derive(GridRowModel))) {\n    /**\n     * Get associated events\n     *\n     * @member {Scheduler.model.EventModel[]} events\n     * @readonly\n     * @category Common\n     */\n    static $name = 'ResourceModel';\n}\nResourceModel.exposeProperties();\nResourceModel._$name = 'ResourceModel';", "// Private class that leverages the differences between a core and a basic project\nexport default Target => class PartOfBaseProject extends Target {\n    static get $name() {\n        return 'PartOfBaseProject';\n    }\n    get assignmentStore() {\n        return this.project.assignmentStore;\n    }\n    get calendarManagerStore() {\n        return this.project.calendarManagerStore;\n    }\n    get dependencyStore() {\n        return this.project.dependencyStore;\n    }\n    get eventStore() {\n        return this.project.eventStore;\n    }\n    get resourceStore() {\n        return this.project.resourceStore;\n    }\n};\n", "import { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { CorePartOfProjectGenericMixin } from \"../../CorePartOfProjectGenericMixin.js\";\nimport Store from \"../../../../Core/data/Store.js\";\nimport { AbstractPartOfProjectStoreMixin } from \"./AbstractPartOfProjectStoreMixin.js\";\n/**\n * This a mixin for every Store, that belongs to a scheduler_core project.\n */\nexport class CorePartOfProjectStoreMixin extends Mixin([\n    AbstractPartOfProjectStoreMixin,\n    CorePartOfProjectGenericMixin,\n    Store\n], (base) => {\n    const superProto = base.prototype;\n    class CorePartOfProjectStoreMixin extends base {\n        setProject(project) {\n            const result = superProto.setProject.call(this, project);\n            if (project)\n                this.joinProject(project);\n            return result;\n        }\n        joinProject(project) { }\n        onCommitAsync() { }\n    }\n    return CorePartOfProjectStoreMixin;\n}) {\n}\n", "import { Mixin } from \"../../../ChronoGraph/class/Mixin.js\";\nimport { AbstractPartOfProjectStoreMixin } from \"./mixin/AbstractPartOfProjectStoreMixin.js\";\nconst dataAddRemoveActions = {\n    splice: 1,\n    clear: 1\n};\n// Shared functionality for CoreResourceStore & ChronoResourceStore\nexport class AbstractResourceStoreMixin extends Mixin([AbstractPartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class AbstractResourceStoreMixin extends base {\n        constructor() {\n            super(...arguments);\n            this.assignmentsForRemoval = new Set();\n        }\n        // we need `onDataChange` for `syncDataOnLoad` option to work\n        onDataChange(event) {\n            // remove from a filter action must be ignored.\n            const isAddRemove = dataAddRemoveActions[event.action];\n            super.onDataChange(event);\n            if (isAddRemove && event.removed?.length)\n                this.afterResourceRemoval();\n        }\n        // it seems `onDataChange` is not triggered for `remove` with `silent` flag\n        remove(records, silent) {\n            const res = superProto.remove.call(this, records, silent);\n            this.afterResourceRemoval();\n            return res;\n        }\n        // it seems `onDataChange` is not triggered for `TreeStore#removeAll()`\n        removeAll(silent) {\n            const res = superProto.removeAll.call(this, silent);\n            this.afterResourceRemoval();\n            return res;\n        }\n        afterResourceRemoval() {\n            const assignmentStore = this.getAssignmentStore();\n            if (assignmentStore && !assignmentStore.allAssignmentsForRemoval) {\n                const assignmentsForRemoval = [...this.assignmentsForRemoval].filter(assignment => !assignmentStore.assignmentsForRemoval.has(assignment));\n                assignmentsForRemoval.length > 0 && assignmentStore.remove(assignmentsForRemoval);\n            }\n            this.assignmentsForRemoval.clear();\n        }\n        processRecord(resourceRecord, isDataset = false) {\n            const existingRecord = this.getById(resourceRecord.id);\n            const isReplacing = existingRecord && existingRecord !== resourceRecord;\n            if (isReplacing) {\n                //@ts-ignore\n                for (const assignment of existingRecord.assigned || []) {\n                    assignment.resource = resourceRecord;\n                }\n            }\n            return resourceRecord;\n        }\n    }\n    return AbstractResourceStoreMixin;\n}) {\n}\n", "import { Mixin } from \"../../../ChronoGraph/class/BetterMixin.js\";\nimport { CorePartOfProjectStoreMixin } from \"./mixin/CorePartOfProjectStoreMixin.js\";\nimport { CoreResourceMixin } from \"../model/scheduler_core/CoreResourceMixin.js\";\nimport { AbstractResourceStoreMixin } from \"./AbstractResourceStoreMixin.js\";\n/**\n * A store mixin class, that represent collection of all resources in the [[SchedulerCoreProjectMixin|project]].\n */\nexport class CoreResourceStoreMixin extends Mixin([AbstractResourceStoreMixin, CorePartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreResourceStoreMixin extends base {\n        static get defaultConfig() {\n            return {\n                modelClass: CoreResourceMixin\n            };\n        }\n        joinProject() {\n            this.assignmentStore?.linkAssignments(this, 'resource');\n        }\n        afterLoadData() {\n            this.assignmentStore?.linkAssignments(this, 'resource');\n        }\n        clear(removing) {\n            superProto.clear.call(this, removing);\n            this.assignmentStore?.unlinkAssignments('resource');\n        }\n    }\n    return CoreResourceStoreMixin;\n}) {\n}\n", "import ResourceStoreMixin from './mixin/ResourceStoreMixin.js';\nimport ResourceModel from '../model/ResourceModel.js';\nimport AjaxStore from '../../Core/data/AjaxStore.js';\nimport PartOfProject from '../data/mixin/PartOfProject.js';\nimport { CoreResourceStoreMixin } from '../../Engine/quark/store/CoreResourceStoreMixin.js';\nimport PartOfBaseProject from './mixin/PartOfBaseProject.js';\nconst EngineMixin = PartOfProject(CoreResourceStoreMixin.derive(AjaxStore));\n/**\n * @module Scheduler/data/ResourceStore\n */\n/**\n * A store holding all the {@link Scheduler.model.ResourceModel resources} to be rendered into a\n * {@link Scheduler.view.Scheduler Scheduler}.\n *\n * This store only accepts a model class inheriting from {@link Scheduler.model.ResourceModel}.\n *\n * A ResourceStore is usually connected to a project, which binds it to other related stores (EventStore,\n * AssignmentStore and DependencyStore). The project also handles references (assignments, events) to related records\n * for the records in the store.\n *\n * Resolving the references happens async, records are not guaranteed to have up to date references until calculations\n * are finished. To be certain that references are resolved, call `await project.commitAsync()` after store actions. Or\n * use one of the `xxAsync` functions, such as `loadDataAsync()`.\n *\n * Using `commitAsync()`:\n *\n * ```javascript\n * resourceStore.data = [{ id }, ...];\n *\n * // references (assignments, events) not resolved yet\n *\n * await resourceStore.project.commitAsync();\n *\n * // now they are\n * ```\n *\n * Using `loadDataAsync()`:\n *\n * ```javascript\n * await resourceStore.loadDataAsync([{ id }, ...]);\n *\n * // references (assignments, events) are resolved\n * ```\n *\n * @mixes Scheduler/data/mixin/PartOfProject\n * @mixes Scheduler/data/mixin/ResourceStoreMixin\n * @extends Core/data/AjaxStore\n */\nexport default class ResourceStore extends ResourceStoreMixin(EngineMixin) {\n    static get defaultConfig() {\n        return {\n            modelClass : ResourceModel\n        };\n    }\n}\nResourceStore._$name = 'ResourceStore';", "import Base from '../../../Core/Base.js';\nimport Model from '../../../Core/data/Model.js';\nimport DateHelper from '../../../Core/helper/DateHelper.js';\nimport FunctionHelper from '../../../Core/helper/FunctionHelper.js';\n/**\n * @module Scheduler/data/mixin/EventStoreMixin\n */\n/**\n * This is a mixin, containing functionality related to managing events.\n *\n * It is consumed by the regular {@link Scheduler.data.EventStore} class and the Scheduler Pro's `EventStore` class.\n *\n * @mixin\n */\nexport default Target => class EventStoreMixin extends (Target || Base) {\n    static $name = 'EventStoreMixin';\n    /**\n     * Add events to the store.\n     *\n     * NOTE: Dates, durations and references (assignments, resources) on the events are determined async by a calculation\n     * engine. Thus they cannot be directly accessed after using this function.\n     *\n     * For example:\n     *\n     * ```javascript\n     * eventStore.add({ startDate, duration });\n     * // endDate is not yet calculated\n     * ```\n     *\n     * To guarantee data is in a calculated state, wait for calculations for finish:\n     *\n     * ```javascript\n     * eventStore.add({ startDate, duration });\n     * await eventStore.project.commitAsync();\n     * // endDate is calculated\n     * ```\n     *\n     * Alternatively use `addAsync()` instead:\n     *\n     * ```javascript\n     * await eventStore.addAsync({ startDate, duration });\n     * // endDate is calculated\n     * ```\n     *\n     * @param {Scheduler.model.EventModel|Scheduler.model.EventModel[]|EventModelConfig|EventModelConfig[]} records\n     * Array of records/data or a single record/data to add to store\n     * @param {Boolean} [silent] Specify `true` to suppress events\n     * @returns {Scheduler.model.EventModel[]} Added records\n     * @function add\n     * @category CRUD\n     */\n    /**\n     * Add events to the store and triggers calculations directly after. Await this function to have up to date data on\n     * the added events.\n     *\n     * ```javascript\n     * await eventStore.addAsync({ startDate, duration });\n     * // endDate is calculated\n     * ```\n     *\n     * @param {Scheduler.model.EventModel|Scheduler.model.EventModel[]|EventModelConfig|EventModelConfig[]} records\n     * Array of records/data or a single record/data to add to store\n     * @param {Boolean} [silent] Specify `true` to suppress events\n     * @returns {Scheduler.model.EventModel[]} Added records\n     * @function addAsync\n     * @category CRUD\n     * @async\n     */\n    /**\n     * Applies a new dataset to the EventStore. Use it to plug externally fetched data into the store.\n     *\n     * NOTE: Dates, durations and relations (assignments, resources) on the events are determined async by a calculation\n     * engine. Thus they cannot be directly accessed after assigning the new dataset.\n     *\n     * For example:\n     *\n     * ```javascript\n     * eventStore.data = [{ startDate, duration }];\n     * // eventStore.first.endDate is not yet calculated\n     * ```\n     *\n     * To guarantee data is in a calculated state, wait for calculations for finish:\n     *\n     * ```javascript\n     * eventStore.data = [{ startDate, duration }];\n     * await eventStore.project.commitAsync();\n     * // eventStore.first.endDate is calculated\n     * ```\n     *\n     * Alternatively use `loadDataAsync()` instead:\n     *\n     * ```javascript\n     * await eventStore.loadDataAsync([{ startDate, duration }]);\n     * // eventStore.first.endDate is calculated\n     * ```\n     *\n     * @member {EventModelConfig[]} data\n     * @category Records\n     */\n    /**\n     * Applies a new dataset to the EventStore and triggers calculations directly after. Use it to plug externally\n     * fetched data into the store.\n     *\n     * ```javascript\n     * await eventStore.loadDataAsync([{ startDate, duration }]);\n     * // eventStore.first.endDate is calculated\n     * ```\n     *\n     * @param {EventModelConfig[]} data Array of EventModel data objects\n     * @function loadDataAsync\n     * @category CRUD\n     * @async\n     */\n    /**\n     * Class used to represent records. Defaults to class EventModel.\n     * @member {Scheduler.model.EventModel} modelClass\n     * @typings {typeof EventModel}\n     * @category Records\n     */\n    static get defaultConfig() {\n        return {\n            /**\n             * CrudManager must load stores in the correct order. Lowest first.\n             * @private\n             */\n            loadPriority : 100,\n            /**\n             * CrudManager must sync stores in the correct order. Lowest first.\n             * @private\n             */\n            syncPriority : 200,\n            storeId : 'events',\n            /**\n             * Configure with `true` to also remove the event when removing the last assignment from the linked\n             * AssignmentStore. This config has not effect when using EventStore in legacy `resourceId`-mode.\n             * @config {Boolean}\n             * @default\n             * @category Common\n             */\n            removeUnassignedEvent : true,\n            /**\n             * Configure with `true` to force single-resource mode, an event can only be assigned to a single resource.\n             * If not provided, the mode will be inferred from\n             *\n             * 1. presence of an assignment store (i.e. multi-assignment)\n             * 2. presence of `resourceId` in the event store data (i.e. single assignment mode)\n             * @config {Boolean}\n             * @category Common\n             */\n            singleAssignment : null\n        };\n    }\n    //region Init & destroy\n    construct(config) {\n        super.construct(config);\n        this.autoTree = true;\n        if (this.singleAssignment) {\n            this.usesSingleAssignment = true;\n        }\n        if (!this.modelClass.isEventModel) {\n            throw new Error('The model for the EventStore must subclass EventModel');\n        }\n    }\n    //endregion\n    //region Events records, iteration etc.\n    set filtersFunction(filtersFunction) {\n        super.filtersFunction = filtersFunction;\n    }\n    get filtersFunction() {\n        // Generate the real filterFn.\n        const result = super.filtersFunction;\n        // We always filter *in* records which are being created by the UI.\n        if (result && result !== FunctionHelper.returnTrue) {\n            return r => r.isCreating || result(r);\n        }\n        return result;\n    }\n    /**\n     * Returns a `Map`, keyed by `YYYY-MM-DD` date keys containing event counts for all the days\n     * between the passed `startDate` and `endDate`. Occurrences of recurring events are included.\n     *\n     * Example:\n     *\n     * ```javascript\n     *  eventCounts = eventStore.getEventCounts({\n     *      startDate : scheduler.timeAxis.startDate,\n     *      endDate   : scheduler.timeAxis.endDate\n     *  });\n     * ```\n     *\n     * @param {Object} options An options object determining which events to return\n     * @param {Date} options.startDate The start date for the range of events to include.\n     * @param {Date} [options.endDate] The end date for the range of events to include.\n     * @category Events\n     */\n    getEventCounts(options) {\n        const\n            me     = this,\n            {\n                filtersFunction,\n                added\n            }      = me,\n            // Must use getEvents so that the loadDateRange event is triggered.\n            result = me.getEvents({\n                ...options,\n                storeFilterFn : me.isFiltered ? (me.reapplyFilterOnAdd ? filtersFunction : eventRecord => added.includes(eventRecord) ? me.indexOf(eventRecord) > -1 : filtersFunction(eventRecord)) : null,\n                dateMap       : options.dateMap || true\n            });\n        result.forEach((value, key) => result.set(key, value.length));\n        return result;\n    }\n    /**\n     * Calls the supplied iterator function once for every scheduled event, providing these arguments\n     * - event : the event record\n     * - startDate : the event start date\n     * - endDate : the event end date\n     *\n     * Returning false cancels the iteration.\n     *\n     * @param {Function} fn iterator function\n     * @param {Object} [thisObj] `this` reference for the function\n     * @category Events\n     */\n    forEachScheduledEvent(fn, thisObj = this) {\n        this.forEach(event => {\n            const { startDate, endDate } = event;\n            if (startDate && endDate) {\n                return fn.call(thisObj, event, startDate, endDate);\n            }\n        });\n    }\n    /**\n     * Returns an object defining the earliest start date and the latest end date of all the events in the store.\n     *\n     * @returns {Object} An object with 'startDate' and 'endDate' properties (or null values if data is missing).\n     * @category Events\n     */\n    getTotalTimeSpan() {\n        let earliest = new Date(9999, 0, 1),\n            latest   = new Date(0);\n        this.forEach(event => {\n            if (event.startDate) {\n                earliest = DateHelper.min(event.startDate, earliest);\n            }\n            if (event.endDate) {\n                latest = DateHelper.max(event.endDate, latest);\n            }\n        });\n        earliest = earliest < new Date(9999, 0, 1) ? earliest : null;\n        latest   = latest > new Date(0) ? latest : null;\n        // keep last calculated value to be able to track total timespan changes\n        return (this.lastTotalTimeSpan = {\n            startDate : earliest || null,\n            endDate   : latest || earliest || null\n        });\n    }\n    /**\n     * Checks if given event record is persistable. By default it always is, override EventModels `isPersistable` if you\n     * need custom logic.\n     *\n     * @param {Scheduler.model.EventModel} event\n     * @returns {Boolean}\n     * @category Events\n     */\n    isEventPersistable(event) {\n        return event.isPersistable;\n    }\n    //endregion\n    //region Resource\n    /**\n     * Checks if a date range is allocated or not for a given resource.\n     *\n     * Note that when asked to check a 0 duration range, any 0 duration events at the same point in time will be\n     * considered overlapping.\n     *\n     * @param {Date} start The start date\n     * @param {Date} end The end date\n     * @param {Scheduler.model.EventModel|null} excludeEvent An event to exclude from the check (or null)\n     * @param {Scheduler.model.ResourceModel} resource The resource\n     * @returns {Boolean} True if the timespan is available for the resource\n     * @category Resource\n     */\n    isDateRangeAvailable(start, end, excludeEvent, resource) {\n        // NOTE: Also exists in TaskStore.js\n        // Cannot assign anything to generated parents\n        if (resource.data.generatedParent) {\n            return false;\n        }\n        // This should be a collection of unique event records\n        const allEvents = new Set(this.getEventsForResource(resource));\n        // In private mode we can pass an AssignmentModel. In this case, we assume that multi-assignment is used.\n        // So we need to make sure that other resources are available for this time too.\n        // No matter if the event retrieved from the assignment belongs to the target resource or not.\n        // We gather all events from the resources the event is assigned to except of the one from the assignment record.\n        // Note, events from the target resource are added above.\n        if (excludeEvent?.isAssignment) {\n            const\n                currentEvent = excludeEvent.event,\n                resources    = currentEvent.resources;\n            resources.forEach(resource => {\n                // Ignore events for the resource which is passed as an AssignmentModel to excludeEvent\n                if (resource.id !== excludeEvent.resourceId) {\n                    this.getEventsForResource(resource).forEach(event => allEvents.add(event));\n                }\n            });\n        }\n        if (excludeEvent) {\n            const eventToRemove = excludeEvent.isAssignment ? excludeEvent.event : excludeEvent;\n            allEvents.delete(eventToRemove);\n        }\n        const all = Array.from(allEvents);\n        // Asked to check a 0 duration range, use different logic to consider 0 duration events at the same point in\n        // time as overlapping\n        if (start.getTime() === end.getTime()) {\n            return !all.some(event =>\n                event.isScheduled && (event.duration === 0\n                    // Same point in time for 0 duration events\n                    ? event.startDate.getTime() === start.getTime()\n                    // Normal overlap check for others\n                    : DateHelper.intersectSpans(start, end, event.startDate, event.endDate))\n            );\n        }\n        return !all.some(event => event.isScheduled && DateHelper.intersectSpans(start, end, event.startDate, event.endDate));\n    }\n    /**\n     * Filters the events associated with a resource, based on the function provided. An array will be returned for those\n     * events where the passed function returns true.\n     * @param {Scheduler.model.ResourceModel} resource\n     * @param {Function} fn The function\n     * @param {Object} [thisObj] `this` reference for the function\n     * @returns {Scheduler.model.EventModel[]} the events in the time span\n     * @private\n     * @category Resource\n     */\n    filterEventsForResource(resource, fn, thisObj = this) {\n        return resource.getEvents(this).filter(fn.bind(thisObj));\n    }\n    /**\n     * Returns all resources assigned to an event.\n     *\n     * @param {Scheduler.model.EventModel|String|Number} event\n     * @returns {Scheduler.model.ResourceModel[]}\n     * @category Resource\n     */\n    getResourcesForEvent(event) {\n        // If we are sent an occurrence, use its parent\n        if (event.isOccurrence) {\n            event = event.recurringTimeSpan;\n        }\n        return this.assignmentStore.getResourcesForEvent(event);\n    }\n    /**\n     * Returns all events assigned to a resource.\n     * *NOTE:* this does not include occurrences of recurring events. Use the\n     * {@link Scheduler/data/mixin/GetEventsMixin#function-getEvents} API to include occurrences of recurring events.\n     * @param {Scheduler.model.ResourceModel|String|Number} resource Resource or resource id.\n     * @returns {Scheduler.model.EventModel[]}\n     * @category Resource\n     */\n    getEventsForResource(resource) {\n        return this.assignmentStore.getEventsForResource(resource);\n    }\n    //endregion\n    //region Assignment\n    /**\n     * Returns all assignments for a given event.\n     *\n     * @param {Scheduler.model.EventModel|String|Number} event\n     * @returns {Scheduler.model.AssignmentModel[]}\n     * @category Assignment\n     */\n    getAssignmentsForEvent(event) {\n        return this.assignmentStore.getAssignmentsForEvent(event) || [];\n    }\n    /**\n     * Returns all assignments for a given resource.\n     *\n     * @param {Scheduler.model.ResourceModel|String|Number} resource\n     * @returns {Scheduler.model.AssignmentModel[]}\n     * @category Assignment\n     */\n    getAssignmentsForResource(resource) {\n        return this.assignmentStore.getAssignmentsForResource(resource) || [];\n    }\n    /**\n     * Creates and adds assignment record for a given event and a resource.\n     *\n     * @param {Scheduler.model.EventModel|String|Number} event\n     * @param {Scheduler.model.ResourceModel|String|Number|Scheduler.model.ResourceModel[]|String[]|Number[]} resource The resource(s) to assign to the event\n     * @param {Boolean} [removeExistingAssignments] `true` to first remove existing assignments\n     * @returns {Scheduler.model.AssignmentModel[]} An array with the created assignment(s)\n     * @category Assignment\n     */\n    assignEventToResource(event, resource, removeExistingAssignments = false) {\n        return this.assignmentStore.assignEventToResource(event, resource, undefined, removeExistingAssignments);\n    }\n    /**\n     * Removes assignment record for a given event and a resource.\n     *\n     * @param {Scheduler.model.EventModel|String|Number} event\n     * @param {Scheduler.model.ResourceModel|String|Number} resource\n     * @category Assignment\n     */\n    unassignEventFromResource(event, resource) {\n        this.assignmentStore.unassignEventFromResource(event, resource);\n    }\n    /**\n     * Reassigns an event from an old resource to a new resource\n     *\n     * @param {Scheduler.model.EventModel}    event    An event or id of the event to reassign\n     * @param {Scheduler.model.ResourceModel|Scheduler.model.ResourceModel[]} oldResource A resource or id to unassign from\n     * @param {Scheduler.model.ResourceModel|Scheduler.model.ResourceModel[]} newResource A resource or id to assign to\n     * @category Assignment\n     */\n    reassignEventFromResourceToResource(event, oldResource, newResource) {\n        const\n            me            = this,\n            newResourceId = Model.asId(newResource),\n            assignment    = me.assignmentStore.getAssignmentForEventAndResource(event, oldResource);\n        if (assignment) {\n            assignment.resourceId = newResourceId;\n        }\n        else {\n            me.assignmentStore.assignEventToResource(event, newResource);\n        }\n    }\n    /**\n     * Checks whether an event is assigned to a resource.\n     *\n     * @param {Scheduler.model.EventModel|String|Number} event\n     * @param {Scheduler.model.ResourceModel|String|Number} resource\n     * @returns {Boolean}\n     * @category Assignment\n     */\n    isEventAssignedToResource(event, resource) {\n        return this.assignmentStore.isEventAssignedToResource(event, resource);\n    }\n    /**\n     * Removes all assignments for given event\n     *\n     * @param {Scheduler.model.EventModel|String|Number} event\n     * @category Assignment\n     */\n    removeAssignmentsForEvent(event) {\n        this.assignmentStore.removeAssignmentsForEvent(event);\n    }\n    /**\n     * Removes all assignments for given resource\n     *\n     * @param {Scheduler.model.ResourceModel|String|Number} resource\n     * @category Assignment\n     */\n    removeAssignmentsForResource(resource) {\n        this.assignmentStore.removeAssignmentsForResource(resource);\n    }\n    //endregion\n    /**\n     * Appends a new record to the store\n     * @param {Scheduler.model.EventModel} record The record to append to the store\n     * @category CRUD\n     */\n    append(record) {\n        return this.add(record);\n    }\n    //region Project\n    get project() {\n        return super.project;\n    }\n    set project(project) {\n        super.project = project;\n        this.detachListeners('project');\n        if (project) {\n            // Project already has AssignmentStore instance? Attach to it.\n            if (project.assignmentStore?.isAssignmentStore) {\n                this.attachToAssignmentStore(project.assignmentStore);\n            }\n            // Accessing assignmentStore would trigger `assignmentStoreChange` event on the project, so we set up\n            // the listener after\n            project.ion({\n                name                  : 'project',\n                assignmentStoreChange : 'onProjectAssignmentStoreChange',\n                thisObj               : this,\n                prio                  : 200 // Before UI updates\n            });\n        }\n    }\n    //endregion\n    //region resource ids\n    get usesResourceIds() {\n        return this.modelClass.fieldMap?.resourceIds.persist ?? false;\n    }\n    //endregion\n    //region Single assignment\n    get usesSingleAssignment() {\n        if (this.isChained) {\n            return this.masterStore.usesSingleAssignment;\n        }\n        return this._usesSingleAssignment;\n    }\n    set usesSingleAssignment(value) {\n        this._usesSingleAssignment = value;\n        const { assignmentStore } = this;\n        // Use cheaper id generation for single assignment mode (no UUID needed)\n        if (assignmentStore?.isStore && !assignmentStore.hasGenerateIdOverride) {\n            // Normal fn on purpose, scope is AssignmentModel\n            assignmentStore.modelClass.generateId = function() {\n                if (this.singleAssignmentIdCounter == null) {\n                    this.singleAssignmentIdCounter = 0;\n                }\n                return `a-${++this.singleAssignmentIdCounter}`;\n            };\n            assignmentStore.hasGenerateIdOverride = true;\n        }\n    }\n    processRecords(eventRecords) {\n        const\n            { assignmentStore } = this,\n            assignmentsToAdd = [];\n        // Same as on `joinRecordsToStore`, when adding a number of event records CoreEventMixin#joinProject method\n        // will clear/rebuild cache in a loop. We raise this flag to skip invalidating assignment store indices for the time\n        // we are joining records to the store. When they're added and indices are read, we will invalidate them.\n        if (assignmentStore) {\n            assignmentStore.skipInvalidateIndices = true;\n        }\n        eventRecords = super.processRecords(eventRecords, assignmentStore && !this.stm?.isRestoring && (eventRecord => {\n            // AssignmentStore found, add an assignment to it if this is not a dataset operation\n            const resourceId = eventRecord.get('resourceId');\n            if (!eventRecord.reassignedFromReplace && resourceId != null) {\n                // Check if the event is already assigned to the resource, though it's not in the event store.\n                // It could happen when you remove an event, so both event and assignment records are removed,\n                // then you \"undo\" the action and the assignment is restored before the event is restored.\n                if (!assignmentStore.includesAssignment(eventRecord.id, resourceId)) {\n                    // Cannot use `event.assign(resourceId)` since event is not part of store yet\n                    // Using a bit shorter generated id to not look so ugly in DOM\n                    assignmentsToAdd.push({\n                        id      : assignmentStore.modelClass.generateId(''),\n                        resourceId,\n                        eventId : eventRecord.id\n                    });\n                }\n            }\n            // clear flag\n            eventRecord.reassignedFromReplace = false;\n        }) || undefined);\n        if (assignmentStore) {\n            assignmentStore.storage.invalidateIndices();\n            assignmentStore.skipInvalidateIndices = false;\n            assignmentStore.add(assignmentsToAdd);\n        }\n        return eventRecords;\n    }\n    joinRecordsToStore(records) {\n        const { assignmentStore } = this;\n        if (assignmentStore) {\n            // When adding a number of event records CoreEventMixin#joinProject method will clear/rebuild cache in a loop.\n            // We raise this flag to skip invalidating assignment store indices for the time we are joining records to\n            // the store. When they're added and indices are read, we will invalidate them.\n            assignmentStore.skipInvalidateIndices = true;\n            super.joinRecordsToStore(records);\n            assignmentStore.storage.invalidateIndices();\n            assignmentStore.skipInvalidateIndices = false;\n        }\n        else {\n            super.joinRecordsToStore(records);\n        }\n    }\n    processRecord(eventRecord, isDataset = false) {\n        eventRecord = super.processRecord(eventRecord, isDataset);\n        const\n            me              = this,\n            assignmentStore = me.assignmentStore ?? me.crudManager?.assignmentStore,\n            resourceId      = eventRecord.get('resourceId'),\n            { resourceIds } = eventRecord;\n        if (resourceIds?.length && eventRecord.meta.skipEnforcingSingleAssignment !== false && me.usesResourceIds) {\n            if (assignmentStore) {\n                assignmentStore.add(resourceIds\n                    .filter(resourceId => !assignmentStore.some(a => a.eventId === eventRecord.id && a.resourceId === resourceId))\n                    .map(resourceId => ({ resource : resourceId, event : eventRecord })));\n            }\n            else {\n                me.$processResourceIds = true;\n            }\n        }\n        else if (resourceId != null && !eventRecord.meta.skipEnforcingSingleAssignment) {\n            const\n                existingRecord      = me.getById(eventRecord.id),\n                isReplacing         = existingRecord && existingRecord !== eventRecord && !isDataset;\n            // Replacing an existing event, repoint the resource of its assignment\n            // (already repointed to the new event by engine in EventStoreMixin)\n            if (isReplacing) {\n                // Have to look assignment up on store, removed by engine in super call above\n                const assignmentSet = assignmentStore.storage.findItem('eventId', eventRecord.id);\n                if (assignmentSet?.size) {\n                    const assignment = assignmentSet.values().next().value;\n                    assignment.resource = resourceId;\n                    eventRecord.reassignedFromReplace = true;\n                }\n            }\n            // No AssignmentStore assigned yet, need to process when that happens. Or if it is a dataset operation,\n            // processing will happen at the end of it to not add individual assignment (bad for performance)\n            else {\n                me.$processResourceIds = true;\n            }\n            // Flag that we have been loaded using resourceId, checked by CrudManager to exclude the internal\n            // AssignmentStore from sync\n            me.usesSingleAssignment = true;\n        }\n        return eventRecord;\n    }\n    processResourceIds() {\n        const\n            me              = this,\n            // When used in a standalone CrudManager, there is no direct link to the assignment store\n            assignmentStore = me.assignmentStore ?? me.crudManager?.assignmentStore;\n        if (me.$processResourceIds && assignmentStore?.isAssignmentStore && !(me.project?.isSharingAssignmentStore && me.isChained)) {\n            const assignments = [];\n            // resourceIds used during initialization, convert into assignments (ignoring any filter)\n            me.forEach(eventRecord => {\n                const { resourceId, resourceIds, id : eventId } = eventRecord;\n                if (resourceId != null) {\n                    // Using a bit shorter generated id to not look so ugly in DOM\n                    assignments.push({\n                        id : assignmentStore.modelClass.generateId(''),\n                        resourceId,\n                        eventId\n                    });\n                }\n                else if (resourceIds?.length) {\n                    resourceIds.forEach(rId => {\n                        assignments.push({\n                            id         : assignmentStore.modelClass.generateId(''),\n                            resourceId : rId,\n                            eventId\n                        });\n                    });\n                }\n            }, me, { includeFilteredOutRecords : true });\n            // Disable as much as possible, since we are in full control of this store when using single assignment mode\n            assignmentStore.useRawData = {\n                disableDefaultValue     : true,\n                disableDuplicateIdCheck : true,\n                disableTypeConversion   : true\n            };\n            // Flag that throws in AssignmentStore if data is loaded some other way when using single assignment\n            assignmentStore.usesSingleAssignment = false;\n            // These assignments all use generated ids, and are not meant to be searialized anyway so bypass check\n            assignmentStore.verifyNoGeneratedIds = false;\n            assignmentStore.data = assignments;\n            assignmentStore.usesSingleAssignment = true;\n            me.$processResourceIds = false;\n        }\n    }\n    loadData() {\n        super.loadData(...arguments);\n        this.processResourceIds();\n    }\n    // Optionally remove unassigned events\n    onBeforeRemoveAssignment({ records }) {\n        const me = this;\n        if (\n            me.removeUnassignedEvent && !me.isRemoving && !me.isSettingData &&\n            !me.stm?.isRestoring && !me.usesSingleAssignment &&\n            // Do not remove unassigned events when syncing data, new assignments etc. might be synced afterwards\n            !me.assignmentStore.isSyncingDataOnLoad && !me.resourceStore.isSyncingDataOnLoad\n        ) {\n            const toRemove = new Set();\n            // Collect all events that are unassigned after the remove\n            records.forEach(assignmentRecord => {\n                const { event } = assignmentRecord;\n                // Assignment might not have an event or the event might already be removed\n                if (event && !event.isRemoved && event.assignments.every(a => records.includes(a))) {\n                    toRemove.add(event);\n                }\n            });\n            // And remove them\n            if (toRemove.size) {\n                me.remove([...toRemove]);\n            }\n        }\n    }\n    onProjectAssignmentStoreChange({ store }) {\n        this.attachToAssignmentStore(store);\n    }\n    attachToAssignmentStore(assignmentStore) {\n        const me = this;\n        me.detachListeners('assignmentStore');\n        if (assignmentStore) {\n            me.processResourceIds();\n            assignmentStore.ion({\n                name : 'assignmentStore',\n                // Adding an assignment in single assignment mode should set events resourceId if needed,\n                // otherwise it should set events resourceIds (if persistable)\n                addPreCommit({ records }) {\n                    if (!me.isSettingData && !me.isAssigning) {\n                        if (me.usesSingleAssignment) {\n                            records.forEach(assignment => {\n                                const { event } = assignment;\n                                if (event?.isEvent && event.resourceId !== assignment.resourceId) {\n                                    event.meta.isAssigning = true;\n                                    event.set('resourceId', assignment.resourceId);\n                                    event.meta.isAssigning = false;\n                                }\n                            });\n                        }\n                        else if (me.usesResourceIds) {\n                            records.forEach(assignment => {\n                                const { event } = assignment;\n                                if (event?.isEvent) {\n                                    event.meta.isAssigning = true;\n                                    const resourceIds = event.resourceIds ?? [];\n                                    if (!resourceIds.includes(assignment.resourceId)) {\n                                        event.resourceIds = [...resourceIds, assignment.resourceId];\n                                    }\n                                    event.meta.isAssigning = false;\n                                }\n                            });\n                        }\n                    }\n                },\n                // Called both for remove and removeAll\n                beforeRemove : 'onBeforeRemoveAssignment',\n                // Removing an assignment in single assignment mode should set events resourceId to null,\n                // otherwise it should set events resourceIds to an empty array\n                removePreCommit({ records }) {\n                    if (!me.isSettingData && !me.isAssigning) {\n                        if (me.usesSingleAssignment) {\n                            records.forEach(assignment => {\n                                // With engine link to event is already broken when we get here, hence the lookup\n                                me.getById(assignment.eventId)?.set('resourceId', null);\n                            });\n                        }\n                        else if (me.usesResourceIds) {\n                            records.forEach(({ event, resourceId }) => {\n                                const\n                                    resourceIds     = event.resourceIds.slice(),\n                                    indexToRemove   = resourceIds?.indexOf(resourceId);\n                                if (indexToRemove >= 0) {\n                                    resourceIds.splice(indexToRemove, 1);\n                                    event.resourceIds = resourceIds;\n                                }\n                            });\n                        }\n                    }\n                },\n                removeAllPreCommit() {\n                    if (!me.isSettingData && !me.isAssigning) {\n                        if (me.usesSingleAssignment) {\n                            me.allRecords.forEach(eventRecord => eventRecord.set('resourceId', null));\n                        }\n                        else if (me.usesResourceIds) {\n                            me.allRecords.forEach(eventRecord => {\n                                eventRecord.resourceIds = [];\n                            });\n                        }\n                    }\n                },\n                // Keep events resourceId and resourceIds in sync with assignment on changes\n                update({ record, changes }) {\n                    if ('resourceId' in changes) {\n                        const { event } = record;\n                        if (me.usesSingleAssignment) {\n                            event.meta.isAssigning = true;\n                            event.set('resourceId', changes.resourceId.value);\n                            event.meta.isAssigning = false;\n                        }\n                        else if (me.usesResourceIds) {\n                            event.meta.isAssigning = true;\n                            const\n                                resourceIds     = event.resourceIds.slice(),\n                                indexToRemove   = resourceIds?.indexOf(changes.resourceId.oldValue);\n                            if (indexToRemove >= 0) {\n                                resourceIds.splice(indexToRemove, 1);\n                            }\n                            if (!resourceIds?.includes(changes.resourceId.value)) {\n                                resourceIds.push(changes.resourceId.value);\n                                event.resourceIds = resourceIds;\n                            }\n                            event.meta.isAssigning = false;\n                        }\n                    }\n                },\n                // Keep events resourceIds in sync with assignment on dataset loading\n                change({ action, records }) {\n                    if (action === 'dataset' && me.usesResourceIds) {\n                        records.forEach(({ event, resourceId }) => {\n                            const resourceIds = event.resourceIds ?? [];\n                            if (!resourceIds.includes(resourceId)) {\n                                resourceIds.push(resourceId);\n                                event.meta.isAssigning = true;\n                                event.setData('resourceIds', resourceIds);\n                                event.meta.isAssigning = false;\n                            }\n                        });\n                    }\n                },\n                thisObj : me\n            });\n        }\n    }\n    set data(data) {\n        this.isSettingData = true;\n        // When using single assignment, remove all assignments when loading a new set of events.\n        // Don't do it when filling a chained store, assignments are for the master store\n        if (this.usesSingleAssignment && !this.syncDataOnLoad && !this.isChained) {\n            this.assignmentStore.removeAll(true);\n        }\n        super.data = data;\n        this.isSettingData = false;\n    }\n    // Override trigger to decorate update/change events with a flag if resourceId was the only thing changed, in which\n    // case the change most likely can be ignored since the assignment will also change\n    trigger(eventName, params) {\n        const { changes } = params || {};\n        // https://github.com/bryntum/support/issues/6610\n        // test: SchedulerPro/tests/data/UndoRedo.t.js, \"Should refresh the view after undoing the event copy-paste\"\n        // can not ignore this event when stm is restoring, because of the edge case in that ticket\n        if (changes && 'resourceId' in changes && Object.keys(changes).length === 1 && !this.stm?.isRestoring) {\n            params.isAssign = true;\n        }\n        return super.trigger(...arguments);\n    }\n    remove(records, ...args) {\n        const result = super.remove(records, ...args);\n        // Make sure assignment is removed with event when using single assignment\n        if (result.length && this.usesSingleAssignment) {\n            for (const eventRecord of result) {\n                if (!eventRecord.isOccurrence) {\n                    (this.assignmentStore || this.crudManager?.assignmentStore)?.remove(eventRecord.assignments, true);\n                }\n            }\n        }\n        return result;\n    }\n    //endregion\n};\n", "import DateHelper from '../../../Core/helper/DateHelper.js';\nimport Objects from '../../../Core/helper/util/Objects.js';\n/**\n * @module Scheduler/data/mixin/GetEventsMixin\n */\nconst\n    returnTrue   = () => true,\n    notRecurring = event => !event.isRecurring;\n/**\n * Mixing containing functionality for retrieving a range of events, mainly used during rendering.\n *\n * Consumed by EventStore in Calendar, Scheduler & Scheduler Pro and TaskStore in Gantt.\n *\n * @mixin\n */\nexport default Target => class GetEventsMixin extends Target {\n    static $name = 'GetEventsMixin';\n    /**\n     * Returns an array of events for the date range specified by the `startDate` and `endDate` options.\n     *\n     * By default, for any date, this includes any event which *intersects* that date.\n     *\n     * To only include events that are fully contained *within* the date range, pass the `allowPartial`\n     * option as `false`.\n     *\n     * By default, any occurrences of recurring events are included in the resulting array (not applicable in Gantt). If\n     * that is not required, pass the `includeOccurrences` option as `false`. **Note that if `includeOccurrences` is\n     * `true`, the start date and end date options are mandatory. The method must know what range of occurrences needs\n     * to be generated and returned.**\n     *\n     * Example:\n     *\n     * ```javascript\n     *  visibleEvents = eventStore.getEvents({\n     *      resourceRecord : myResource,\n     *      startDate      : scheduler.timeAxis.startDate,\n     *      endDate        : scheduler.timeAxis.endDate\n     *  });\n     * ```\n     *\n     * @param {Object} options An options object determining which events to return\n     * @param {Date} [options.date] If only one date is required, pass this option instead of the\n     * `startDate` and `endDate` options.\n     * @param {Date} options.startDate The start date for the range of events to include.\n     * @param {Date} [options.endDate] The end date for the range of events to include.\n     * @param {Scheduler.model.ResourceModel} [options.resourceRecord] Pass a resource to only return events assigned to\n     *   this resource. Not supported when using the `dateMap` option (see below)\n     * @param {Function} [options.filter] A function to filter out events which are not required.\n     * @param {Boolean} [options.ignoreFilters] By default, store filters are honoured. Pass this\n     * as `true` to include filtered out events.\n     * @param {Boolean} [options.includeOccurrences=true] Occurrences of recurring events are included by default.\n     * @param {Boolean} [options.allowPartial=true] Events which start before or after the range, but *intersect* the\n     *   range are included by default.\n     * @param {Boolean} [options.startOnly] Pass `true` to only include events which *start on* each date in the range.\n     * @param {Boolean} [options.onlyAssigned] Pass `true` to only include events that are assigned to a resource\n     * @param {Boolean|Map} [options.dateMap] Populates the passed `Map`, or if passed as `true`, creates and\n     * returns a new `Map`. The keys are `YYYY-MM-DD` date strings and the entries are arrays of\n     * {@link Scheduler.model.EventModel EventModel}s.\n     * @returns {Scheduler.model.EventModel[]|Map} Events which match the passed configuration.\n     * @category Events\n     */\n    getEvents({\n        filter,\n        date,\n        startDate,                  // Events which intersect the startDate/endDate\n        endDate,                    // will be returned\n        startOnly,                  // Only events which start on each date will be returned\n        includeOccurrences,         // Interpolate occurrences into the returned event set\n        allowPartial,               // Include events which *intersect* the date range\n        onlyAssigned = false,       // Only include events that are assigned to a resource\n        dateMap = false,            // Return a Map keyed by date each value being an array of events\n        dayTime = null,\n        // Private option. Select which date index to look up events in depending on the date\n        // we are examining in the date iteration process. Some callers may want to use\n        // different indices depending on the stage through the date iteration.\n        // See Calendar package for usage.\n        getDateIndex\n    }) {\n        const\n            me                = this,\n            options           = arguments[0],\n            {\n                lastDateRange,\n                added,\n                filtersFunction\n            } = me,\n            passedFilter      = filter;\n        // Add filtering for only assigned events if requested.\n        if (onlyAssigned) {\n            options.filter = passedFilter ? e => passedFilter(e) && e.resources.length : e => e.resources.length;\n        }\n        // Note that we cannot use defaulting in the argument block because we pass\n        // the incoming options object down into implementations.\n        if (!('startDate' in options)) {\n            startDate = options.startDate = date;\n        }\n        if (!('includeOccurrences' in options)) {\n            includeOccurrences = options.includeOccurrences = true;\n        }\n        if (!('allowPartial' in options)) {\n            allowPartial = options.allowPartial = !startOnly;\n        }\n        // We can't use me.filtersFunction if reapplyFilterOnAdd is false because there may be newly\n        // added events which may not be subject to the filter. Records which are still in\n        // the added bag must be tested for presence using indexOf so as to be always in sync\n        // with the store being refiltered. Parens help readability.\n        // Don't use the store's filtering function if we were asked to ignore filters.\n        // eslint-disable-next-line no-extra-parens\n        options.storeFilterFn = me.isFiltered && !options.ignoreFilters ? (me.reapplyFilterOnAdd ? filtersFunction : (eventRecord => added.includes(eventRecord) ? me.indexOf(eventRecord) > -1 : filtersFunction(eventRecord))) : null;\n        // Default to a one day range if only startDate passed\n        if (!endDate) {\n            if (startDate) {\n                endDate = options.endDate = DateHelper.clearTime(startDate);\n                endDate.setDate(endDate.getDate() + 1);\n            }\n            // If no dates passed, the dateFilter will include all.\n            else {\n                // We need to know what occurrences to generate.\n                if (includeOccurrences) {\n                    throw new Error('getEvents MUST be passed startDate and endDate if recurring occurrences are requested');\n                }\n                options.dateFilter = returnTrue;\n            }\n        }\n        if (!options.dateFilter) {\n            // Must start in the date range\n            if (startOnly) {\n                options.dateFilter = e => {\n                    // Avoid hitting getter twice. Use batched value if present.\n                    const eventStartDate = e.hasBatchedChange('startDate') ? e.get('startDate') : e.startDate;\n                    return eventStartDate && !(DateHelper.clearTime(eventStartDate) - startDate);\n                };\n            }\n            // Any intersection with our date range\n            else if (allowPartial) {\n                options.dateFilter = e => {\n                    // Avoid hitting getter twice. Use batched value if present.\n                    const\n                        eventStartDate = e.hasBatchedChange('startDate') ? e.get('startDate') : e.startDate,\n                        eventEndDate   = e.hasBatchedChange('endDate') ? e.get('endDate') : e.endDate || eventStartDate,\n                        isMilestone    = !(eventStartDate - eventEndDate);\n                    return eventStartDate && (isMilestone ? DateHelper.betweenLesserEqual(eventStartDate, startDate, endDate) : DateHelper.intersectSpans(eventStartDate, eventEndDate, startDate, endDate));\n                };\n            }\n            // Must be wholly contained with the our range\n            else {\n                options.dateFilter = e => {\n                    // Avoid hitting getter twice. Use batched value if present.\n                    const\n                        eventStartDate = e.hasBatchedChange('startDate') ? e.get('startDate') : e.startDate,\n                        eventEndDate   = e.hasBatchedChange('endDate') ? e.get('endDate') : e.endDate || eventStartDate;\n                    return eventStartDate && eventStartDate >= startDate && eventEndDate <= endDate;\n                };\n            }\n        }\n        const newDateRange = {\n            startDate,\n            endDate\n        };\n        // Ensure the listeners are present\n        me.processConfiguredListeners();\n        /**\n         * Fired when a range of events is requested from the {@link #function-getEvents} method.\n         *\n         * <div class=\"note\">\n         * This event fires <span style=\"font-weight:bold\">every time</span> a range of events is\n         * requested from the store.\n         * </div>\n         *\n         * An application may have one of two levels of interest in events being read from a store.<br>\n         *\n         * 1.  To be notified when <span style=\"font-weight:bold\">any</span> event block is requested regardless of what the\n         * date range is.\n         * 2.  To be notified when a <span style=\"font-weight:bold\">new date range</span> is requested.\n         *\n         * This event allows both types of application to be written. The `changed` property is\n         * set if a different date range is requested.\n         *\n         * ```javascript\n         * new Scheduler({\n         *     eventStore : {\n         *         listeners : {\n         *             loadDateRange({ new : { startDate, endDate }, changed }) {\n         *                 // Load new data if user is requesting a different time window.\n         *                 if (changed) {\n         *                     fetch(...);\n         *                 }\n         *             }\n         *         }\n         *     },\n         *     ...\n         * });\n         * ```\n         *\n         * @event loadDateRange\n         * @param {Scheduler.data.EventStore} source This EventStore\n         * @param {Object} old The old date range\n         * @param {Date} old.startDate the old start date.\n         * @param {Date} old.endDate the old end date.\n         * @param {Object} new The new date range\n         * @param {Date} new.startDate the new start date.\n         * @param {Date} new.endDate the new end date.\n         * @param {Boolean} changed `true` if the date range is different from the last time a request was made.\n         */\n        me.trigger('loadDateRange', {\n            old     : lastDateRange || {},\n            new     : Objects.clone(newDateRange),\n            changed : Boolean(!lastDateRange || (lastDateRange.startDate - newDateRange.startDate || lastDateRange.endDate - newDateRange.endDate))\n        });\n        // Dates are mutable, so we must keep our own copy.\n        me.lastDateRange = Objects.clone(newDateRange);\n        return dateMap ? me.getEventsAsMap(options) : me.getEventsAsArray(options);\n    }\n    /**\n     * Internal implementation for {@link #function-getEvents} to use when not using dateMap.\n     * @private\n     */\n    getEventsAsArray({\n        filter,\n        date,\n        resourceRecord,\n        startDate = date,           // Events which intersect the startDate/endDate\n        endDate,                    // will be returned\n        startOnly,                  // Only events which start on each date will be returned\n        includeOccurrences = true,  // Interpolate occurrences into the returned event set\n        dayTime = null,\n        // Injected by the getEvents master method\n        dateFilter,\n        storeFilterFn,\n        // Private option. Select which date index to look up events in depending on the date\n        // we are examining in the date iteration process. Some callers may want to use\n        // different indices depending on the stage through the date iteration.\n        // See Calendar package for usage.\n        getDateIndex\n    }) {\n        const\n            me     = this,\n            events = [],\n            count  = storeFilterFn ? me.count : me.allCount;\n        if (count) {\n            let candidateEvents = resourceRecord ? me.getEventsForResource(resourceRecord) : null;\n            // If there *was* a resourceRecord, candidateEvents will already be set up using me.getEventsForResource.\n            // If no resourceRecord specified, we are gathering by date, so use the indices.\n            if (!resourceRecord) {\n                const\n                    dateIndex = me.useDayIndex(dayTime),\n                    eventSet  = new Set(),\n                    indexName = startOnly ? 'startDate' : 'date';\n                // Add all recurring events which started on or before our date range.\n                me.recurringEvents.forEach(e => {\n                    if (dateIndex.dayTime.startOfDay(e.startDate) <= startDate) {\n                        eventSet.add(e);\n                    }\n                });\n                // Iterate the date range, using the indices to find qualified events.\n                for (const date = new Date(startDate); date < endDate; date.setDate(date.getDate() + 1)) {\n                    const coincidingEvents = dateIndex.get(getDateIndex ? getDateIndex(date) : indexName, date);\n                    coincidingEvents?.forEach(e => eventSet.add(e));\n                }\n                // We gathered all events which *coincide* with each date.\n                // We also added in all recurring events which started on or before our date range.\n                // All these were made unique by the Set.\n                // Return it to array form.\n                candidateEvents = [...eventSet];\n            }\n            // Events found from the date indices won't be filtered.\n            // On the other side, when using getEventForResource we will get all events for\n            // the resource even if the EventStore is filtered, handle this by excluding \"invisible\" events here\n            if (storeFilterFn) {\n                candidateEvents = candidateEvents.filter(storeFilterFn);\n            }\n            // Go through candidates.\n            // For a recurring event, and we are including recurrences, add date-qualifying occurrences.\n            // For a non-recurring event, add it if it's date-qualified.\n            for (let i = 0, { length } = candidateEvents; i < length; i++) {\n                const e = candidateEvents[i];\n                // For recurring events, add date-qualifying occurrences, not the base\n                if (includeOccurrences && e.isRecurring) {\n                    events.push.apply(events, e.getOccurrencesForDateRange(startDate, endDate).filter(dateFilter));\n                }\n                // For ordinary events, add if it's date-qualified\n                else if (dateFilter(e)) {\n                    events.push(e);\n                }\n            }\n        }\n        return filter ? events.filter(filter) : events;\n    }\n    /**\n     * Internal implementation for {@link #function-getEvents} to use when using dateMap.\n     * @private\n     */\n    getEventsAsMap({\n        filter : passedFilter,\n        date,\n        resourceRecord,             // Not supported yet. Will add if ever requested.\n        startDate = date,           // Events which intersect the startDate/endDate\n        endDate,                    // will be returned\n        startOnly,                  // Only events which start on each date will be returned\n        includeOccurrences = true,  // Interpolate occurrences into the returned event set\n        dateMap,                    // Return a Map keyed by date each value being an array of events\n        dayTime = null,\n        storeFilterFn,\n        // Private option. Select which date index to look up events in depending on the date\n        // we are examining in the date iteration process. Some callers may want to use\n        // different indices depending on the stage through the date iteration.\n        // See Calendar package for usage.\n        getDateIndex\n    }) {\n        const me = this;\n        // Convert `true` to a Map.\n        if (dateMap?.clear) {\n            dateMap.clear();\n        }\n        else {\n            dateMap = new Map();\n        }\n        if (me.count) {\n            const\n                dateIndex       = me.useDayIndex(dayTime),\n                indexName       = startOnly ? 'startDate' : 'date',\n                recurringEvents = [],\n                filter          = e => (!passedFilter || passedFilter(e)) && (!storeFilterFn || storeFilterFn(e)),\n                baseEventFilter = e => notRecurring(e) && filter(e);\n            dayTime = dateIndex.dayTime;  // dayTime=null becomes DayTime instance for midnight\n            // We can't yet do this for just a resource.\n            if (resourceRecord) {\n                throw new Error('Querying for events for a resource and returning a date-keyed Map is not supported');\n            }\n            else {\n                // Add all recurring events which started before the end of our date range.\n                // There are none in Gantt projects\n                me.recurringEvents?.forEach(e => {\n                    if (dayTime.startOfDay(e.startDate) < endDate) {\n                        recurringEvents.push(e);\n                    }\n                });\n                // Iterate the date range, using the indices to find qualified events.\n                for (const date = new Date(startDate); date < endDate; date.setDate(date.getDate() + 1)) {\n                    let [coincidingEvents, key] = dateIndex.get(getDateIndex ? getDateIndex(date) : indexName, date, true);\n                    // The index entry may be there, but it could be empty.\n                    if (coincidingEvents?.size) {\n                        // Convert Set which index holds into an Array.\n                        // A recurring event doesn't go into the Map, its occurrences do.\n                        // Then filter by the passed filter and this Store's filter function\n                        // because events found from the date indices won't be filtered.\n                        coincidingEvents = [...coincidingEvents].filter(baseEventFilter);\n                        // Only create the entry for the day if there are events found\n                        if (coincidingEvents.length) {\n                            (dateMap.get(key) || (dateMap.set(key, []).get(key))).push(...coincidingEvents);\n                        }\n                    }\n                }\n            }\n            // Go through matching recurring events.\n            for (let i = 0, { length } = recurringEvents; i < length; i++) {\n                const\n                    e = recurringEvents[i],\n                    // For each recurring event, add occurrences if we are including occurrences else, add the base.\n                    // Then filter by the passed filter and this Store's filter function\n                    // because events found from the date indices won't be filtered.\n                    occurrences = (includeOccurrences ? e.getOccurrencesForDateRange(startDate, endDate) : [e]).filter(filter),\n                    lastDate    = DateHelper.add(endDate, 1, 'day');\n                // Add occurrences to dateMap\n                for (let bucket, i = 0, { length } = occurrences; i < length; i++) {\n                    const\n                        occurrence = occurrences[i],\n                        date = dayTime.startOfDay(occurrence.startDate),\n                        indexName = getDateIndex ? getDateIndex(date) : (startOnly ? 'startDate' : 'date'),\n                        lastIntersectingDate = (indexName === 'startDate') || !occurrence.durationMS\n                            ? DateHelper.add(date, 1, 'day')\n                            : DateHelper.min(occurrence.endDate || DateHelper.add(occurrence.startDate, occurrence.duration, occurrence.durationUnit), lastDate);\n                    // Loop through covered dates, adding to dateMap if required\n                    for (; date < lastIntersectingDate; date.setDate(date.getDate() + 1)) {\n                        const key = dayTime.dateKey(date);\n                        (bucket = dateMap.get(key)) || dateMap.set(key, bucket = []);\n                        bucket.push(occurrence);\n                    }\n                }\n            }\n        }\n        return dateMap;\n    }\n};\n", "import DayTime from '../../../Core/util/DayTime.js';\n/**\n * @module Scheduler/data/util/EventDayIndex\n */\nconst\n    // Maps an index name that can be requested to its storage property on the EventDayIndex instance:\n    indexNameMap = {\n        date      : '_dateIndex',\n        startDate : '_startDateIndex'\n    },\n    indexProps         = Object.values(indexNameMap),\n    emptyArray         = Object.freeze([]),\n    { MILLIS_PER_DAY } = DayTime;\n/**\n * This utility class is used by event stores to index events by their day (a \"YYYY-MM-DD\" value, also known as a\n * \"date key\"). This key is produced by a {@link Core.util.DayTime} instance. If two `DayTime` instances have a common\n * `startShift`, they can share an index.\n *\n * @internal\n */\nexport default class EventDayIndex {\n    constructor(store, dayTime) {\n        /**\n         * The `DayTime` definition for this index. This is set to the initial DayTime instance but can be used for\n         * any other {@link #function-register registered} `DayTime` instances since they all posses the same value for\n         * `startShift`.\n         *\n         * This defaults to {@link Core.util.DayTime#property-MIDNIGHT-static}.\n         * @member {Core.util.DayTime} dayTime\n         * @readonly\n         */\n        this.dayTime = dayTime || DayTime.MIDNIGHT;\n        /**\n         * The owning store instance of this index.\n         * @member {Scheduler.data.EventStore} store\n         * @private\n         * @readonly\n         */\n        this.store = store;\n        /**\n         * The `DayTime` instances {@link #function-register registered} with this index instance. As instances are\n         * {@link #function-unregister unregistered} they are removed from this array. Once this array is empty, this\n         * index can be discarded.\n         * @member {Core.util.DayTime[]} users\n         * @private\n         */\n        this.users = [this.dayTime];\n    }\n    /**\n     * Adds an event record to the specified index (either \"startDate\" or \"date\") for a given `date`.\n     * @param {String} indexName The index to which the event record is to be added (either \"startDate\" or \"date\").\n     * @param {Date|Number} date A date for which the event record overlaps. The {@link Core.util.DayTime#function-dateKey}\n     * method is used to convert this date to a \"YYYY-MM-DD\" key for the index.\n     * @param {Scheduler.model.EventModel} eventRecord The event record.\n     * @private\n     */\n    add(indexName, date, eventRecord) {\n        const\n            index    = this[indexNameMap[indexName]],\n            key      = this.dayTime.dateKey(date),\n            entry    = index[key] || (index[key] = new Set());\n        entry.add(eventRecord);\n    }\n    /**\n     * Adds an event record to all indexes for all dates which the event overlaps.\n     * @param {Scheduler.model.EventModel} eventRecord The event record.\n     * @private\n     */\n    addEvent(eventRecord) {\n        let dateMS = this.dayTime.startOfDay(eventRecord.startDate)?.getTime(),\n            endDateMS;\n        if (dateMS) {\n            endDateMS = eventRecord.endDate?.getTime() ?? dateMS;\n            this.add('startDate', dateMS, eventRecord);\n            do {\n                this.add('date', dateMS, eventRecord);\n                dateMS += MILLIS_PER_DAY;\n            } while (dateMS < endDateMS);\n        }\n    }\n    /**\n     * Clear this index.\n     */\n    clear() {\n        indexProps.forEach(name => this[name] = Object.create(null));\n    }\n    /**\n     * Returns an object that has properties named by the {@link Core.util.DayTime#function-dateKey} method, or the\n     * array of event records if a `date` is specified, or the event record array and the date key in a 2-element array\n     * if `returnKey` is `true`.\n     * @param {String} indexName The name of the desired index (either 'date' or 'startDate').\n     * @param {Number|Date} date The date as a `Date` or the millisecond UTC epoch. When passed, this method will return\n     * the array of event records for this date.\n     * @param {Boolean} [returnKey] Specify `true` to return the date key along with the event record array.\n     * @returns {Object|Scheduler.model.EventModel[]}\n     */\n    get(indexName, date, returnKey) {\n        // Date indices are created on first usage and after that kept up to date on changes\n        !this.initialized && this.initialize();\n        let ret = this[indexNameMap[indexName]],\n            key;\n        if (date) {\n            key = this.dayTime.dateKey(date);\n            ret = returnKey ? [ret[key], key] : ret[key];\n        }\n        return ret;\n    }\n    /**\n     * Called when this index is first used. Once called, further store changes will be used to maintain this index.\n     * @private\n     */\n    initialize() {\n        this.initialized = true;\n        this.clear();\n        this.sync('splice', this.store.storage.allValues);\n    }\n    invalidate() {\n        this.initialized = false;\n        indexProps.forEach(name => this[name] = null);\n    }\n    /**\n     * Returns `true` if the given `dayTime` matches this index.\n     * @param {Core.util.DayTime} dayTime\n     * @returns {Boolean}\n     */\n    matches(dayTime) {\n        return this.dayTime.startShift === dayTime.startShift;\n    }\n    /**\n     * Removes an event record from the specified index (either \"startDate\" or \"date\") for a given `date`.\n     * @param {String} indexName The index to which the event record is to be removed (either \"startDate\" or \"date\").\n     * @param {Date|Number} date A date for which the event record overlaps. The {@link Core.util.DayTime#function-dateKey}\n     * method is used to convert this date to a \"YYYY-MM-DD\" key for the index.\n     * @param {Scheduler.model.EventModel} eventRecord The event record.\n     * @private\n     */\n    remove(indexName, date, eventRecord) {\n        const\n            index = this[indexNameMap[indexName]],\n            key   = this.dayTime.dateKey(date),\n            entry = index[key];\n        if (entry) {\n            entry.delete(eventRecord);\n        }\n    }\n    /**\n     * Removes an event record from all indexes for all dates which the event overlaps.\n     * @param {Scheduler.model.EventModel} eventRecord The event record.\n     * @param {Date} startDate The start date for the event. This may be different from the `startDate` of the given\n     * `eventRecord` when the event is rescheduled.\n     * @param {Date} endDate The end date for the event. This may be different from the `endDate` of the given\n     * `eventRecord` when the event is rescheduled.\n     * @private\n     */\n    removeEvent(eventRecord, startDate, endDate) {\n        let dateMS = this.dayTime.startOfDay(startDate)?.getTime(),\n            endDateMS;\n        if (dateMS) {\n            endDateMS = endDate?.getTime() ?? dateMS;\n            this.remove('startDate', dateMS, eventRecord);\n            do {\n                this.remove('date', dateMS, eventRecord);\n                dateMS += MILLIS_PER_DAY;\n            } while (dateMS < endDateMS);\n        }\n    }\n    sync(action, added, removed, replaced, wasSet) {\n        added = added || emptyArray;\n        removed = removed || emptyArray;\n        const\n            me            = this,\n            addedCount    = added.length,\n            removedCount  = removed.length,\n            replacedCount = replaced?.length;\n        let i, newEvent, outgoingEvent;\n        if (!me.initialized) {\n            return;\n        }\n        switch (action) {\n            case 'clear':\n                me.clear();\n                break;\n            // Add and remove\n            case 'splice':\n                // Handle replacement of records by instances with same ID\n                if (replacedCount) {\n                    added = added.slice();\n                    removed = removed.slice();\n                    for (i = 0; i < replacedCount; i++) {\n                        removed.push(replaced[i][0]);\n                        added.push(replaced[i][1]);\n                    }\n                }\n                // Remove entries from indices\n                if (removedCount) {\n                    for (i = 0; i < removedCount; i++) {\n                        outgoingEvent = removed[i];\n                        me.removeEvent(outgoingEvent, outgoingEvent.startDate, outgoingEvent.endDate);\n                    }\n                }\n                // Add entries to indices\n                if (addedCount) {\n                    for (i = 0; i < addedCount; i++) {\n                        newEvent = added[i];\n                        // Can only be date-indexed if it's scheduled.\n                        // Also ignore parent events (likely using a Gantt project)\n                        if (newEvent.isScheduled && !newEvent.isParent) {\n                            me.addEvent(newEvent);\n                        }\n                    }\n                }\n                break;\n            // invoked when the start or end changes so that the event can be re-indexed.\n            case 'reschedule':\n                outgoingEvent = added[0];\n                me.removeEvent(outgoingEvent, wasSet.startDate?.oldValue || outgoingEvent.startDate,\n                    wasSet.endDate?.oldValue || outgoingEvent.endDate);\n                // Now process as a splice with an add and no removes.\n                me.sync('splice', added);\n                break;\n        }\n    }\n    /**\n     * This method registers a `dayTime` instance with this index in the `users` array.\n     * @param {Core.util.DayTime} dayTime The instance to register.\n     */\n    register(dayTime) {\n        this.users.push(dayTime);\n    }\n    /**\n     * This method unregisters a `dayTime` instance, removing it from the `users` array. This method returns `true` if\n     * this was the last registered instance and this index is no longer needed.\n     * @param {Core.util.DayTime} dayTime The instance to register.\n     * @returns {Boolean}\n     */\n    unregister(dayTime) {\n        const\n            { users } = this,\n            i = users.indexOf(dayTime);\n        if (i > -1) {\n            users.splice(i, 1);\n        }\n        return !users.length;\n    }\n};\n// To avoid shape changes:\nconst proto = EventDayIndex.prototype;\nindexProps.forEach(name => proto[name] = null);\nproto.initialized = false;\nEventDayIndex._$name = 'EventDayIndex';", "import Base from '../../../Core/Base.js';\nimport ArrayHelper from '../../../Core/helper/ArrayHelper.js';\n/**\n * @module Scheduler/data/mixin/RecurringTimeSpansMixin\n */\nconst\n    emptyArray = Object.freeze([]);\n/**\n * This mixin provides recurrence functionality to a store containing {@link Scheduler.model.TimeSpan} models.\n * Normally you don't need to interact with this mixin directly.\n * @mixin\n */\nexport default Target => class RecurringTimeSpansMixin extends (Target || Base) {\n    static get $name() {\n        return 'RecurringTimeSpansMixin';\n    }\n    construct(...args) {\n        const me = this;\n        // We store all generated occurrences keyed by `_generated_${recurringTimeSpan.id}:${occurrenceStartDate}`\n        // So that when asked to generate an occurrence for a date, an already generated one can be returned.\n        me.globalOccurrences = new Map();\n        // All recurring events added to the store are accessible through this Set. It's used\n        // to generate occurrences.\n        me.recurringEvents = new Set();\n        super.construct(...args);\n    }\n    // Override to refreshRecurringEventsCache on initial load\n    afterLoadData() {\n        // All cached occurrences are now potentially invalid.\n        // A store reload might imply any number of changes which invalidate any occurrence.\n        this.globalOccurrences.clear();\n        // Clear and rebuild the recurring events cache\n        this.refreshRecurringEventsCache('clear');\n        this.refreshRecurringEventsCache('splice', this.storage.allValues);\n        super.afterLoadData && super.afterLoadData();\n    }\n    /**\n     * Responds to mutations of the underlying storage Collection.\n     *\n     * Maintain indices for fast finding of events by date.\n     * @param {Object} event\n     * @private\n     */\n    onDataChange({ action, added, removed, replaced }) {\n        // Recurring events cache must be refreshed before responding to change\n        this.refreshRecurringEventsCache(action, added, removed, replaced);\n        super.onDataChange(...arguments);\n    }\n    refreshRecurringEventsCache(action, added = emptyArray, removed = emptyArray, replaced) {\n        const\n            me                  = this,\n            { recurringEvents } = me,\n            replacedCount       = replaced?.length;\n        switch (action) {\n            case 'clear':\n                recurringEvents.clear();\n                break;\n            // Add and remove\n            case 'splice': {\n                // Handle replacement of records by instances with same ID\n                if (replacedCount) {\n                    added = added.slice();\n                    removed = removed.slice();\n                    for (let i = 0; i < replacedCount; i++) {\n                        removed.push(replaced[i][0]);\n                        added.push(replaced[i][1]);\n                    }\n                }\n                const\n                    addedCount   = added.length,\n                    removedCount = removed.length;\n                // Track the recurring events we contain\n                if (removedCount && recurringEvents.size) {\n                    for (let i = 0; i < removedCount; i++) {\n                        // If it's being removed, remove it from the recurring events cache.\n                        // If it's not a recurring event, it doesn't matter, it won't be in there.\n                        recurringEvents.delete(removed[i]);\n                    }\n                }\n                // Track the recurring events we contain\n                if (addedCount) {\n                    for (let i = 0; i < addedCount; i++) {\n                        const newEvent = added[i];\n                        // Allow easy access to recurring events\n                        if (newEvent.isRecurring) {\n                            recurringEvents.add(newEvent);\n                        }\n                    }\n                }\n                break;\n            }\n        }\n    }\n    getById(id) {\n        let result = super.getById(id);\n        // If the id is not found in the Store, then it could be one of our generated occurrences\n        if (!result) {\n            result = this.globalOccurrences.get(this.modelClass.asId(id));\n        }\n        return result;\n    }\n    onModelChange(record, toSet, wasSet, silent, fromRelationUpdate) {\n        const isRecurrenceRelatedFieldChange = !silent && this.isRecurrenceRelatedFieldChange(record, wasSet);\n        // If this is the base of a recurring sequence, then any reactors to events from\n        // the super call must regenerate occurrences, so must be done at top.\n        // If silent is true, occurrences won't be recalculated. Do not remove occurrences from cache in such case.\n        if (isRecurrenceRelatedFieldChange) {\n            record.removeOccurrences();\n        }\n        super.onModelChange(...arguments);\n        // If this is the base of a recurring sequence, then the EventStore must\n        // trigger a refresh event so that UIs refresh themselves.\n        // This could be at the tail end of the creation of an exception\n        // or a new recurring base.\n        if (isRecurrenceRelatedFieldChange) {\n            const event = { action : 'batch', records : this.storage.values };\n            this.trigger('refresh', event);\n            this.trigger('change', event);\n        }\n    }\n    /**\n     * The method restricts which field modifications should trigger timespan occurrences building.\n     * By default, any field change of a recurring timespan causes the rebuilding.\n     * @param  {Scheduler.model.TimeSpan} timeSpan The modified timespan.\n     * @param  {Object} wasSet Object containing the change set.\n     * @returns {Boolean} `True` if the fields modification should trigger the timespan occurrences rebuilding.\n     * @internal\n     * @category Recurrence\n     */\n    isRecurrenceRelatedFieldChange(timeSpan, wasSet) {\n        return timeSpan.isRecurring || 'recurrenceRule' in wasSet;\n    }\n    /**\n     * Builds occurrences for the provided timespan across the provided date range.\n     * @private\n     * @category Recurrence\n     */\n    getOccurrencesForTimeSpan(timeSpan, startDate, endDate) {\n        const result = [];\n        if (timeSpan.isRecurring) {\n            timeSpan.recurrence.forEachOccurrence(startDate, endDate, r => result.push(r));\n        }\n        return result;\n    }\n    set data(data) {\n        // All cached occurrences are now invalid with a new dataset\n        this.globalOccurrences.clear();\n        super.data = data;\n    }\n    /**\n     * Returns all the recurring timespans.\n     * @returns {Scheduler.model.TimeSpan[]} Array of recurring events.\n     * @category Recurrence\n     */\n    getRecurringTimeSpans() {\n        return [...this.recurringEvents];\n    }\n};\n", "import Base from '../../../Core/Base.js';\nimport RecurringTimeSpansMixin from './RecurringTimeSpansMixin.js';\n/**\n * @module Scheduler/data/mixin/RecurringEventsMixin\n */\n/**\n * This mixin class provides recurrence functionality to the {@link Scheduler.data.EventStore event store}.\n * @extends Scheduler/data/mixin/RecurringTimeSpansMixin\n * @mixin\n */\nexport default Target => class RecurringEventsMixin extends RecurringTimeSpansMixin(Target || Base) {\n    static get $name() {\n        return 'RecurringEventsMixin';\n    }\n    /**\n     * Returns all the recurring events.\n     *\n     * **An alias for ** {@link Scheduler.data.mixin.RecurringTimeSpansMixin#function-getRecurringTimeSpans} method.\n     *\n     * @returns {Scheduler.model.EventModel[]} Array of recurring events.\n     * @category Recurrence\n     */\n    getRecurringEvents() {\n        return this.getRecurringTimeSpans();\n    }\n    isEventPersistable(event) {\n        // occurrences are not persistable\n        return super.isEventPersistable(event) && (!event.supportsRecurring || !event.isOccurrence);\n    }\n};\n", "import Base from '../../../../Core/Base.js';\nconst dayParseRegExp = /^([+-]?[0-9])?(SU|MO|TU|WE|TH|FR|SA)$/;\nconst days = ['SU', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA'];\nexport default class RecurrenceDayRuleEncoder extends Base {\n    static decodeDay(rawDay) {\n        let parsedDay,\n            result;\n        if ((parsedDay = dayParseRegExp.exec(rawDay))) {\n            result = [days.indexOf(parsedDay[2])];\n            // optional position number\n            if (parsedDay[1]) {\n                parsedDay[1] = parseInt(parsedDay[1], 10);\n                result.push(parsedDay[1]);\n            }\n        }\n        return result;\n    }\n    static encodeDay(day) {\n        let position;\n        // support decodeDay() result format\n        if (Array.isArray(day)) {\n            [day, position] = day;\n        }\n        return (position ? position.toString() : '') + days[day];\n    }\n    // Turns days values provided as an array of strings (like [`-1MO`, `SU`, `+3FR`])\n    // into an array of [ dayIndex, position ] elements, where:\n    //\n    // - `dayIndex` - zero-based week day index value (0 - Sunday, 1 - Monday, 2 - Tuesday, etc.)\n    // - `position` - (optional) 1-based position of the day (integer value (can be both positive and negative))\n    static decode(rawDays) {\n        const result = [];\n        let parsedDay;\n        if (rawDays) {\n            for (let i = 0; i < rawDays.length; i++) {\n                if ((parsedDay = this.decodeDay(rawDays[i]))) {\n                    result.push(parsedDay);\n                }\n            }\n        }\n        return result;\n    }\n    static encode(days) {\n        const result = [];\n        let day;\n        if (days) {\n            for (let i = 0; i < days.length; i++) {\n                if ((day = this.encodeDay(days[i]))) {\n                    result.push(day);\n                }\n            }\n        }\n        return result;\n    }\n};\nRecurrenceDayRuleEncoder._$name = 'RecurrenceDayRuleEncoder';", "import Base from '../../../../Core/Base.js';\nimport DateHelper from '../../../../Core/helper/DateHelper.js';\n/**\n * @module Scheduler/data/util/recurrence/AbstractRecurrenceIterator\n * @private\n */\nconst\n    frequencyToUnitRe = /ly$/i,\n    frequencyToUnit = frequency => {\n        const result = frequency.replace(frequencyToUnitRe, '');\n        return result === 'DAI' ? 'DAY' : result;\n    },\n    fn = (date, counter, isFirst, timeSpan) => timeSpan.buildOccurrence(date, isFirst),\n    captureLastOccurrence = date => lastOccurrenceDate = date;\nlet lastOccurrenceDate;\nexport default class AbstractRecurrenceIterator extends Base {\n    static frequency = 'NONE';\n    static MAX_OCCURRENCES_COUNT = 1000000;\n    static processIterationConfig(config) {\n        const\n            { recurrence } = config,\n            {\n                frequency,\n                interval,\n                timeSpan,\n                endDate : until,\n                count\n            } = recurrence;\n        // Force the correction of the event to be in sync with its recurrence rule\n        // before performing iteration. For example, if the event's configured startDate\n        // is 1st January 2020, and the rule dictates that the event will take place\n        // monthly, every Monday, then the first event is not until Monday 6th January, 2020.\n        if (!config.syncingStartDate && !timeSpan.meta.isSyncedWithRule) {\n            // Do not generate occurrences outside of the specified range\n            const\n                intervalEndDate = DateHelper.add(timeSpan.startDate, interval, frequencyToUnit(frequency)),\n                endDate = DateHelper.min(\n                    intervalEndDate,\n                    config.endDate || intervalEndDate\n                );\n            this.forEachDate({\n                syncingStartDate : true,\n                startDate        : timeSpan.startDate,\n                endDate,\n                recurrence,\n                fn\n            });\n        }\n        // Capture the start after its been synced with its recurrence rule\n        const timeSpanStart = timeSpan.startDate;\n        // Extract the endDate from the config, defaulting to the recurrence UNTIL date\n        let {\n            startDate = timeSpanStart,\n            endDate   = until\n        } = config;\n        // No point in starting the iteration before the event starts\n        if (startDate < timeSpanStart) {\n            startDate = timeSpanStart;\n        }\n        // The recurrence's stop date overrides the configured endDate.\n        if (until) {\n            if (!endDate || endDate > until) {\n                endDate = until;\n            }\n        }\n        // If we are limiting using count and we are not starting from the\n        // first occurrence, then we have to calculate a stop date.\n        // This is because for date ranges in the future we cannot calculate how many\n        // preceding occurrences there may have been.\n        else if (count && startDate > timeSpanStart) {\n            // Iterate the occurrences from the start to capture the last one\n            this.forEachDate({\n                recurrence,\n                fn : captureLastOccurrence\n            });\n            // The date of the last occurrence in the count sequence overrides the configured endDate.\n            if (!endDate || endDate > lastOccurrenceDate) {\n                // since endDate of the provided interval is exclusive add 1 millisecond\n                endDate = new Date(lastOccurrenceDate.getTime() + 1);\n            }\n        }\n        // Preserve the requested start of requested visits.\n        const earliestVisibleDate = startDate;\n        // Unless we are only asked for events which *start* within the time range. we must make\n        // a best attempt to include any occurrences which span the start date.\n        // So if we are asking for events from the 1st of the month, and there's an event\n        // which runs every 2 months from the 15th to the 5th, we must include it. Start the\n        // iteration <interval> full frequency quanta before the requested start.\n        // This will only cause <interval> extra iterations.\n        // We cannot step back to before the event's starting date though.\n        if (!config.startOnly) {\n            startDate = new Date(DateHelper.max(DateHelper.add(startDate, -interval, frequencyToUnit(frequency)), timeSpanStart));\n        }\n        return Object.assign({\n            extraArgs : [],\n            // Only check start date for time spans with 0 duration\n            startOnly : !Boolean(timeSpan.durationMS)\n        }, config, {\n            startDate,\n            endDate,\n            timeSpan,\n            timeSpanStart,\n            earliestVisibleDate,\n            endDateMS             : endDate?.getTime(),\n            timeSpanStartMS       : timeSpanStart.getTime(),\n            earliestVisibleDateMS : earliestVisibleDate.getTime(),\n            durationMS            : timeSpan.durationMS,\n            spansStart            : startDate <= timeSpanStart && endDate > timeSpanStart\n        });\n    }\n    static getOccurrenceIndex(event) {\n        if (event.isOccurrence) {\n            return DateHelper.diff(event.recurringTimeSpan.startDate, event.startDate, frequencyToUnit(event.recurringTimeSpan.recurrence.frequency));\n        }\n    }\n    /**\n     * Returns Nth occurrence of a week day in the provided period of time.\n     * @param  {Date} startDate Period start date.\n     * @param  {Date} endDate   Period end date.\n     * @param  {Number} day    Week day (0 - Sunday, 1 - Monday, 2 - Tuesday, etc.)\n     * @param  {Number} index  Index to find.\n     * @returns {Date}           Returns the found date or null if there is no `index`th entry.\n     * @private\n     */\n    static getNthDayInPeriod(startDate, endDate, day, index) {\n        let result, sign, borderDate;\n        if (index) {\n            if (index > 0) {\n                sign = 1;\n                borderDate = startDate;\n            }\n            else {\n                sign = -1;\n                borderDate = endDate;\n            }\n            // delta between requested day and border day\n            const delta = day - borderDate.getDay();\n            // if the requested day goes after (before, depending on borderDate used (start/end))\n            // we adjust index +/-1\n            if (sign * delta < 0) {\n                index += sign;\n            }\n            // measure \"index\" weeks forward (or backward) ..take delta into account\n            // result = new Date(borderDate.getTime() + ((index - sign) * 7 + delta) * 24*60*60*1000);\n            // Per https://github.com/bryntum/support/issues/3413 - don't do that ^^ because DST makes days/week\n            // alternatingly shorter or longer depending on going in/out of DST:\n            result = new Date(borderDate);\n            result.setDate(borderDate.getDate() + (index - sign) * 7 + delta);\n            // if resulting date is outside of the provided range there is no \"index\"-th entry\n            // of the day\n            if (result < startDate || result > endDate) {\n                result = null;\n            }\n        }\n        return result;\n    }\n    static buildDate(year, month, date) {\n        const dt = new Date(year, month, date);\n        if (dt.getFullYear() === year && dt.getMonth() === month && dt.getDate() === date) {\n            return dt;\n        }\n    }\n    static isValidPosition(position) {\n        return Boolean(position);\n    }\n    static forEachDateAtPositions(dates, positions, fn, scope) {\n        const datesLength = dates.length,\n            processed     = {};\n        for (let i = 0; i < positions.length; i++) {\n            const index = positions[i];\n            if (this.isValidPosition(index)) {\n                const date = index > 0 ? dates[index - 1] : dates[datesLength + index];\n                if (date && !processed[date.getTime()]) {\n                    // remember that we've returned the date\n                    processed[date.getTime()] = true;\n                    // return false if it's time to stop recurring\n                    if (fn.call(scope, date) === false) {\n                        return false;\n                    }\n                }\n            }\n        }\n    }\n    static isInView(startOnly, occurrenceDate, earliestVisibleDate, durationMS, timeSpan) {\n        return (\n            startOnly\n                ? occurrenceDate >= earliestVisibleDate\n                : occurrenceDate.valueOf() + durationMS > earliestVisibleDate\n        ) && !timeSpan.hasException(occurrenceDate);\n    }\n    // Slightly faster version of ^, used by Daily & Weekly iterators\n    static isInViewMS(startOnly, occurenceDate, occurrenceDateMS, earliestVisibleDateMS, durationMS, timeSpan) {\n        return (\n            startOnly\n                ? occurrenceDateMS >= earliestVisibleDateMS\n                : occurrenceDateMS + durationMS > earliestVisibleDateMS\n        ) && !timeSpan.hasException(occurenceDate);\n    }\n}\nAbstractRecurrenceIterator._$name = 'AbstractRecurrenceIterator';", "/**\n * @module Scheduler/data/util/recurrence/DailyRecurrenceIterator\n */\nimport AbstractRecurrenceIterator from './AbstractRecurrenceIterator.js';\nimport DateHelper from '../../../../Core/helper/DateHelper.js';\n/**\n * A class which provides iteration to call a function for dates specified by a\n * {@link Scheduler.model.RecurrenceModel RecurrenceModel} over a specified date range.\n * @private\n */\nexport default class DailyRecurrenceIterator extends AbstractRecurrenceIterator {\n    static frequency = 'DAILY';\n    /**\n     * Iterates over the passed date range, calling the passed callback on each date on which\n     * starts a recurring event which matches the passed recurrence rule and overlaps the start and end dates\n     * and is not an {@link Scheduler.model.mixin.RecurringTimeSpan#field-exceptionDates exceptionDate}\n     * in the recurring event.\n     * @param {Object} config An object which describes how to iterate.\n     * @param {Date} config.startDate The point in time to begin iteration.\n     * @param {Date} config.endDate The point in time to end iteration.\n     * @param {Boolean} [config.startOnly] By default, all occurrences which intersect the date range\n     * will be visited. Pass `true` to only visit occurrences which *start* in the date range.\n     * @param {Scheduler.model.RecurrenceModel} config.recurrence The point in time to end iteration.\n     * @param {Function} config.fn The function to call for each date which matches the recurrence in the date range.\n     * @param {Date} config.fn.date The occurrence date.\n     * @param {Number} config.fn.counter A counter of how many dates have been visited in this iteration.\n     * @param {Boolean} config.fn.isFirst A flag which is `true` if the date is the first occurrence in the specified recurrence rule.\n     * @param {Array} [config.extraArgs] Extra arguments to pass to the callback after the `isFirst` argument.\n     */\n    static forEachDate(config) {\n        const\n            {\n                startOnly,\n                startDate,\n                endDate,\n                endDateMS,\n                timeSpan,\n                timeSpanStart,\n                earliestVisibleDateMS,\n                durationMS,\n                spansStart,\n                recurrence,\n                fn,\n                extraArgs,\n                scope = this\n            }                = this.processIterationConfig(config),\n            { interval }     = recurrence,\n            delay            = startDate - timeSpanStart,\n            // recurrence interval duration in ms (86400000 is a single day duration in ms)\n            intervalDuration = interval * 86400000,\n            delayInIntervals = Math.floor(delay / intervalDuration);\n        let { count }       = recurrence,\n            counter         = 0,\n            occurrenceDate  = DateHelper.add(timeSpanStart, delayInIntervals * interval, 'day'),\n            occurrenceDateMS = occurrenceDate.getTime();\n        if (!endDate && !count) {\n            count = this.MAX_OCCURRENCES_COUNT;\n        }\n        while (!endDateMS || occurrenceDateMS < endDateMS) {\n            const inView = this.isInViewMS(startOnly, occurrenceDate, occurrenceDateMS, earliestVisibleDateMS, durationMS, timeSpan);\n            counter++;\n            if (inView &&\n                ((endDateMS && occurrenceDateMS > endDateMS) || fn.apply(scope, [occurrenceDate, counter, counter === 1 && spansStart, timeSpan, ...extraArgs]) === false || (count && counter >= count))\n            ) {\n                break;\n            }\n            // shift to the next day\n            occurrenceDate = DateHelper.add(occurrenceDate, interval, 'day');\n            occurrenceDateMS = occurrenceDate.getTime();\n        }\n    }\n}\nDailyRecurrenceIterator._$name = 'DailyRecurrenceIterator';", "/**\n * @module Scheduler/data/util/recurrence/WeeklyRecurrenceIterator\n */\nimport AbstractRecurrenceIterator from './AbstractRecurrenceIterator.js';\nimport DateHelper from '../../../../Core/helper/DateHelper.js';\nimport DayRuleEncoder from './RecurrenceDayRuleEncoder.js';\n/**\n * A class which provides iteration to call a function for dates specified by a\n * {@link Scheduler.model.RecurrenceModel RecurrenceModel} over a specified date range.\n * @private\n */\nexport default class WeeklyRecurrenceIterator extends AbstractRecurrenceIterator {\n    static frequency = 'WEEKLY';\n    /**\n     * Iterates over the passed date range, calling the passed callback on each date on which\n     * starts an event which matches the passed recurrence rule and overlaps the start and end dates.\n     * @param {Object} config An object which describes how to iterate.\n     * @param {Date} config.startDate The point in time to begin iteration.\n     * @param {Date} config.endDate The point in time to end iteration.\n     * @param {Boolean} [config.startOnly] By default, all occurrences which intersect the date range\n     * will be visited. Pass `true` to only visit occurrences which *start* in the date range.\n     * @param {Scheduler.model.RecurrenceModel} config.recurrence The point in time to end iteration.\n     * @param {Function} config.fn The function to call for each date which matches the recurrence in the date range.\n     * @param {Date} config.fn.date The occurrence date.\n     * @param {Number} config.fn.counter A counter of how many dates have been visited in this iteration.\n     * @param {Boolean} config.fn.isFirst A flag which is `true` if the date is the first occurrence in the specified recurrence rule.\n     * @param {Array} [config.extraArgs] Extra arguments to pass to the callback after the `isFirst` argument.\n     */\n    static forEachDate(config) {\n        const\n            {\n                startOnly,\n                startDate,\n                endDateMS,\n                timeSpan,\n                timeSpanStart,\n                timeSpanStartMS,\n                earliestVisibleDateMS,\n                durationMS,\n                spansStart,\n                recurrence,\n                fn,\n                extraArgs,\n                scope = this\n            }                     = this.processIterationConfig(config),\n            {\n                interval,\n                days\n            }                     = recurrence,\n            { weekStartDay }      = DateHelper,\n            startHours            = timeSpanStart.getHours(),\n            startMinutes          = timeSpanStart.getMinutes(),\n            startSeconds          = timeSpanStart.getSeconds(),\n            startMS               = timeSpanStart.getMilliseconds();\n        let counter    = 0,\n            { count }  = recurrence,\n            weekDays   = DayRuleEncoder.decode(days),\n            weekStartDate, occurrenceDate;\n        // \"Days\" might be skipped then we use the event start day\n        if (!weekDays?.length) {\n            weekDays = [[timeSpanStart.getDay()]];\n        }\n        // If week start day is not zero (Sunday)\n        // we need to normalize weekDays array since its values are used\n        // to calculate real dates as: date = week_start_date + weekDay_entry\n        // which does not work when week starts on non-Sunday\n        if (weekStartDay > 0) {\n            for (let i = 0; i < weekDays.length; i++) {\n                if (weekStartDay > weekDays[i][0]) {\n                    weekDays[i][0] = 7 - weekStartDay - weekDays[i][0];\n                }\n                else {\n                    weekDays[i][0] -= weekStartDay;\n                }\n            }\n        }\n        // days could be provided in any order so it's important to sort them\n        weekDays.sort((a, b) => a[0] - b[0]);\n        // if the recurrence is limited w/ \"Count\" or not every interval should match\n        // we need to 1st count passed occurrences so we always start iteration from the event start date\n        weekStartDate = DateHelper.getNext(count || interval > 1 ? timeSpanStart : startDate, 'week', 0);\n        if (!endDateMS && !count) {\n            count = this.MAX_OCCURRENCES_COUNT;\n        }\n        while (!endDateMS || weekStartDate.getTime() < endDateMS) {\n            for (let i = 0; i < weekDays.length; i++) {\n                // Faster than chaining multiple DateHelper calls\n                occurrenceDate = new Date(\n                    weekStartDate.getFullYear(),\n                    weekStartDate.getMonth(),\n                    weekStartDate.getDate() + weekDays[i][0],\n                    startHours,\n                    startMinutes,\n                    startSeconds,\n                    startMS\n                );\n                const occurrenceDateMS = occurrenceDate.getTime();\n                if (occurrenceDateMS >= timeSpanStartMS) {\n                    const inView = this.isInViewMS(startOnly, occurrenceDate, occurrenceDateMS, earliestVisibleDateMS, durationMS, timeSpan);\n                    counter++;\n                    if (inView &&\n                        ((endDateMS && occurrenceDateMS >= endDateMS) ||\n                        (fn.apply(scope, [occurrenceDate, counter, counter === 1 && spansStart, timeSpan, ...extraArgs]) === false) ||\n                        (count && counter >= count))\n                    ) {\n                        return;\n                    }\n                }\n            }\n            // get next week start\n            weekStartDate = DateHelper.getNext(weekStartDate, 'week', interval);\n        }\n    }\n}\nWeeklyRecurrenceIterator._$name = 'WeeklyRecurrenceIterator';", "/**\n * @module Scheduler/data/util/recurrence/MonthlyRecurrenceIterator\n */\nimport AbstractRecurrenceIterator from './AbstractRecurrenceIterator.js';\nimport DateHelper from '../../../../Core/helper/DateHelper.js';\nimport DayRuleEncoder from './RecurrenceDayRuleEncoder.js';\n/**\n * A class which provides iteration to call a function for dates specified by a\n * {@link Scheduler.model.RecurrenceModel RecurrenceModel} over a specified date range.\n * @private\n */\nexport default class MonthlyRecurrenceIterator extends AbstractRecurrenceIterator {\n    static frequency = 'MONTHLY';\n    static getNthDayOfMonth(date, dayNum) {\n        const daysInMonth = DateHelper.daysInMonth(date);\n        let result = null;\n        if (dayNum && Math.abs(dayNum) <= daysInMonth) {\n            result = new Date(date.getFullYear(), date.getMonth(), dayNum < 0 ? daysInMonth + dayNum + 1 : dayNum);\n        }\n        return result;\n    }\n    static isValidPosition(position) {\n        return position && Math.abs(position) > 0 && Math.abs(position) <= 31;\n    }\n    /**\n     * Iterates over the passed date range, calling the passed callback on each date on which\n     * starts an event which matches the passed recurrence rule and overlaps the start and end dates.\n     * @param {Object} config An object which describes how to iterate.\n     * @param {Date} config.startDate The point in time to begin iteration.\n     * @param {Date} config.endDate The point in time to end iteration.\n     * @param {Boolean} [config.startOnly] By default, all occurrences which intersect the date range\n     * will be visited. Pass `true` to only visit occurrences which *start* in the date range.\n     * @param {Scheduler.model.RecurrenceModel} config.recurrence The point in time to end iteration.\n     * @param {Function} config.fn The function to call for each date which matches the recurrence in the date range.\n     * @param {Date} config.fn.date The occurrence date.\n     * @param {Number} config.fn.counter A counter of how many dates have been visited in this iteration.\n     * @param {Boolean} config.fn.isFirst A flag which is `true` if the date is the first occurrence in the specified recurrence rule.\n     * @param {Array} [config.extraArgs] Extra arguments to pass to the callback after the `isFirst` argument.\n     */\n    static forEachDate(config) {\n        const\n            {\n                startOnly,\n                startDate,\n                endDate,\n                timeSpan,\n                timeSpanStart,\n                earliestVisibleDate,\n                durationMS,\n                spansStart,\n                recurrence,\n                fn,\n                extraArgs,\n                scope = this\n            }              = this.processIterationConfig(config),\n            {\n                interval,\n                days,\n                count,\n                positions\n            } = recurrence,\n            weekDays       = DayRuleEncoder.decode(days),\n            hasPositions   = positions && positions.length,\n            processedDate  = {};\n        let\n            { monthDays }  = recurrence,\n            counter        = 0,\n            weekDayPosition,\n            monthStartDate, monthEndDate,\n            dates, occurrenceDate, i;\n        // if the recurrence is limited w/ \"Count\" or not every interval should match\n        // we need to 1st count passed occurrences so we always start iteration from the event start date\n        monthStartDate = DateHelper.startOf(count || interval > 1 ? timeSpanStart : startDate, 'month');\n        monthEndDate   = new Date(DateHelper.getNext(monthStartDate, 'month', 1) - 1);\n        // If no month days nor week days are provided let's use event start date month day\n        if (!(monthDays && monthDays.length) && !(weekDays && weekDays.length)) {\n            monthDays = [timeSpanStart.getDate()];\n        }\n        if (weekDays && weekDays.length) {\n            // Collect hash of positions indexed by week days\n            weekDays.forEach(day => {\n                if (day[1]) {\n                    weekDayPosition         = weekDayPosition || {};\n                    weekDayPosition[day[0]] = day[1];\n                }\n            });\n        }\n        while ((!endDate || endDate > monthStartDate) && (!count || counter < count)) {\n            dates = [];\n            if (weekDays && weekDays.length) {\n                weekDays.forEach(day => {\n                    const weekDay = day[0];\n                    let from    = 1,\n                        till    = 53;\n                    // if position provided\n                    if (day[1]) {\n                        from = till = day[1];\n                    }\n                    for (i = from; i <= till; i++) {\n                        if ((occurrenceDate = this.getNthDayInPeriod(monthStartDate, monthEndDate, weekDay, i))) {\n                            occurrenceDate = DateHelper.copyTimeValues(occurrenceDate, timeSpanStart);\n                            if (!processedDate[occurrenceDate.getTime()]) {\n                                // remember we processed the date\n                                processedDate[occurrenceDate.getTime()] = true;\n                                dates.push(occurrenceDate);\n                            }\n                        }\n                    }\n                });\n                dates.sort((a, b) => a - b);\n                if (!hasPositions) {\n                    for (i = 0; i < dates.length; i++) {\n                        occurrenceDate = dates[i];\n                        if (occurrenceDate >= timeSpanStart) {\n                            const inView = this.isInView(startOnly, occurrenceDate, earliestVisibleDate, durationMS, timeSpan);\n                            counter++;\n                            if (inView &&\n                                ((endDate && occurrenceDate >= endDate) || (fn.apply(scope, [occurrenceDate, counter, counter === 1 && spansStart, timeSpan, ...extraArgs]) === false) || (count && counter >= count))\n                            ) {\n                                return false;\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                const sortedMonthDates = [];\n                for (i = 0; i < monthDays.length; i++) {\n                    // check if the date wasn't iterated over yet\n                    if ((occurrenceDate = this.getNthDayOfMonth(monthStartDate, monthDays[i])) && !processedDate[occurrenceDate.getTime()]) {\n                        processedDate[occurrenceDate.getTime()] = true;\n                        sortedMonthDates.push(occurrenceDate);\n                    }\n                }\n                // it's important to sort the dates to iterate over them in the proper order\n                sortedMonthDates.sort((a, b) => a - b);\n                for (i = 0; i < sortedMonthDates.length; i++) {\n                    occurrenceDate = DateHelper.copyTimeValues(sortedMonthDates[i], timeSpanStart);\n                    if (hasPositions) {\n                        dates.push(occurrenceDate);\n                    }\n                    else if (occurrenceDate >= timeSpanStart) {\n                        const inView = this.isInView(startOnly, occurrenceDate, earliestVisibleDate, durationMS, timeSpan);\n                        counter++;\n                        if (inView &&\n                            ((endDate && occurrenceDate > endDate) || (fn.apply(scope, [occurrenceDate, counter, counter === 1 && spansStart, timeSpan, ...extraArgs]) === false) || (count && counter >= count))\n                        ) {\n                            return;\n                        }\n                    }\n                }\n            }\n            if (hasPositions && dates.length) {\n                this.forEachDateAtPositions(dates, positions, occurrenceDate => {\n                    if (occurrenceDate >= timeSpanStart) {\n                        const inView = startOnly ? occurrenceDate >= earliestVisibleDate : occurrenceDate.valueOf() + durationMS > earliestVisibleDate && !timeSpan.hasException(occurrenceDate);\n                        counter++;\n                        // Ignore dates outside of the [startDate, endDate] range\n                        if (inView && (!endDate || occurrenceDate <= endDate) &&\n                            // return false if it's time to stop recurring\n                            (fn.apply(scope, [occurrenceDate, counter, counter === 1 && spansStart, timeSpan, ...extraArgs]) === false || (count && counter >= count))\n                        ) {\n                            return false;\n                        }\n                    }\n                });\n            }\n            // get next month start\n            monthStartDate = DateHelper.getNext(monthStartDate, 'month', interval);\n            monthEndDate   = new Date(DateHelper.getNext(monthStartDate, 'month', 1) - 1);\n        }\n    }\n}\nMonthlyRecurrenceIterator._$name = 'MonthlyRecurrenceIterator';", "/**\n * @module Scheduler/data/util/recurrence/YearlyRecurrenceIterator\n */\nimport AbstractRecurrenceIterator from './AbstractRecurrenceIterator.js';\nimport DateHelper from '../../../../Core/helper/DateHelper.js';\nimport DayRuleEncoder from './RecurrenceDayRuleEncoder.js';\n/**\n * A class which provides iteration to call a function for dates specified by a\n * {@link Scheduler.model.RecurrenceModel RecurrenceModel} over a specified date range.\n * @private\n */\nexport default class YearlyRecurrenceIterator extends AbstractRecurrenceIterator {\n    static frequency = 'YEARLY';\n    /**\n     * Iterates over the passed date range, calling the passed callback on each date on which\n     * starts an event which matches the passed recurrence rule and overlaps the start and end dates.\n     * @param {Object} config An object which describes how to iterate.\n     * @param {Date} config.startDate The point in time to begin iteration.\n     * @param {Date} config.endDate The point in time to end iteration.\n     * @param {Boolean} [config.startOnly] By default, all occurrences which intersect the date range\n     * will be visited. Pass `true` to only visit occurrences which *start* in the date range.\n     * @param {Scheduler.model.RecurrenceModel} config.recurrence The point in time to end iteration.\n     * @param {Function} config.fn The function to call for each date which matches the recurrence in the date range.\n     * @param {Date} config.fn.date The occurrence date.\n     * @param {Number} config.fn.counter A counter of how many dates have been visited in this iteration.\n     * @param {Boolean} config.fn.isFirst A flag which is `true` if the date is the first occurrence in the specified recurrence rule.\n     * @param {Array} [config.extraArgs] Extra arguments to pass to the callback after the `isFirst` argument.\n     */\n    static forEachDate(config) {\n        const\n            {\n                startOnly,\n                startDate,\n                endDate,\n                timeSpan,\n                timeSpanStart,\n                earliestVisibleDate,\n                durationMS,\n                spansStart,\n                recurrence,\n                fn,\n                extraArgs,\n                scope = this\n            }              = this.processIterationConfig(config),\n            {\n                interval,\n                days,\n                count,\n                positions\n            } = recurrence,\n            weekDays       = DayRuleEncoder.decode(days),\n            hasPositions   = positions && positions.length,\n            processedDate  = {};\n        let\n            { months }     = recurrence,\n            counter        = 0,\n            i, occurrenceDate, dates, yearStartDate, yearEndDate, weekDayPosition;\n        // if the recurrence is limited w/ \"Count\" or not every interval should match\n        // we need to 1st count passed occurrences so we always start iteration from the event start date\n        yearStartDate = DateHelper.startOf(count || interval > 1 ? timeSpanStart : startDate, 'year');\n        yearEndDate   = new Date(DateHelper.getNext(yearStartDate, 'year', 1) - 1);\n        months && months.sort((a, b) => a - b);\n        // if no months provided let's use the event month\n        if (!(months && months.length) && !(weekDays && weekDays.length)) {\n            months = [timeSpanStart.getMonth() + 1];\n        }\n        if (weekDays && weekDays.length) {\n            // Collect hash of positions indexed by week days\n            weekDays.forEach(day => {\n                if (day[1]) {\n                    weekDayPosition         = weekDayPosition || {};\n                    weekDayPosition[day[0]] = day[1];\n                }\n            });\n        }\n        while ((!endDate || endDate > yearStartDate) && (!count || counter < count)) {\n            dates = [];\n            if (weekDays && weekDays.length) {\n                weekDays.forEach(day => {\n                    const weekDay = day[0];\n                    let\n                        from = 1,\n                        till = 53;\n                    // if position provided\n                    if (day[1]) {\n                        from = till = day[1];\n                    }\n                    for (i = from; i <= till; i++) {\n                        if ((occurrenceDate = this.getNthDayInPeriod(yearStartDate, yearEndDate, weekDay, i))) {\n                            occurrenceDate = DateHelper.copyTimeValues(occurrenceDate, timeSpanStart);\n                            if (!processedDate[occurrenceDate.getTime()]) {\n                                // remember we processed the date\n                                processedDate[occurrenceDate.getTime()] = true;\n                                dates.push(occurrenceDate);\n                            }\n                        }\n                    }\n                });\n                dates.sort((a, b) => a - b);\n                if (!hasPositions) {\n                    for (i = 0; i < dates.length; i++) {\n                        occurrenceDate = dates[i];\n                        if (occurrenceDate >= timeSpanStart) {\n                            const inView = this.isInView(startOnly, occurrenceDate, earliestVisibleDate, durationMS, timeSpan);\n                            counter++;\n                            if (inView &&\n                                ((endDate && occurrenceDate >= endDate) ||\n                                (fn.apply(scope, [occurrenceDate, counter, counter === 1 && spansStart, timeSpan, ...extraArgs]) === false) ||\n                                (count && counter >= count))\n                            ) {\n                                return;\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                for (i = 0; i < months.length; i++) {\n                    if ((occurrenceDate = this.buildDate(yearStartDate.getFullYear(), months[i] - 1, timeSpanStart.getDate()))) {\n                        occurrenceDate = DateHelper.copyTimeValues(occurrenceDate, timeSpanStart);\n                        // check if the date wasn't iterated over yet\n                        if (!processedDate[occurrenceDate.getTime()]) {\n                            processedDate[occurrenceDate.getTime()] = true;\n                            if (hasPositions) {\n                                dates.push(occurrenceDate);\n                            }\n                            else if (occurrenceDate >= timeSpanStart) {\n                                const inView = startOnly ? occurrenceDate >= earliestVisibleDate : occurrenceDate.valueOf() + durationMS > earliestVisibleDate && !timeSpan.hasException(occurrenceDate);\n                                counter++;\n                                if (inView &&\n                                    ((endDate && occurrenceDate >= endDate) ||\n                                    (fn.apply(scope, [occurrenceDate, counter, counter === 1 && spansStart, timeSpan, ...extraArgs]) === false) ||\n                                    (count && counter >= count))\n                                ) {\n                                    return;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            if (hasPositions && dates.length) {\n                this.forEachDateAtPositions(dates, positions, occurrenceDate => {\n                    if (occurrenceDate >= timeSpanStart) {\n                        const inView = startOnly ? occurrenceDate >= earliestVisibleDate : occurrenceDate.valueOf() + durationMS > earliestVisibleDate && !timeSpan.hasException(occurrenceDate);\n                        counter++;\n                        // Ignore dates outside of the [startDate, endDate] range\n                        if (inView && (!endDate || occurrenceDate < endDate)) {\n                            // return false if it's time to stop recurring\n                            if (fn.apply(scope, [occurrenceDate, counter, counter === 1 && spansStart, timeSpan, ...extraArgs]) === false || (count && counter >= count)) {\n                                return false;\n                            }\n                        }\n                    }\n                });\n            }\n            // get next month start\n            yearStartDate = DateHelper.getNext(yearStartDate, 'year', interval);\n            yearEndDate   = new Date(DateHelper.getNext(yearStartDate, 'year', 1) - 1);\n        }\n    }\n}\nYearlyRecurrenceIterator._$name = 'YearlyRecurrenceIterator';", "import Model from '../../Core/data/Model.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport RecurrenceDayRuleEncoder from '../data/util/recurrence/RecurrenceDayRuleEncoder.js';\nimport DailyRecurrenceIterator from '../data/util/recurrence/DailyRecurrenceIterator.js';\nimport WeeklyRecurrenceIterator from '../data/util/recurrence/WeeklyRecurrenceIterator.js';\nimport MonthlyRecurrenceIterator from '../data/util/recurrence/MonthlyRecurrenceIterator.js';\nimport YearlyRecurrenceIterator from '../data/util/recurrence/YearlyRecurrenceIterator.js';\n/**\n * @module Scheduler/model/RecurrenceModel\n */\nconst recurrenceIterators = {};\n[DailyRecurrenceIterator, WeeklyRecurrenceIterator, MonthlyRecurrenceIterator, YearlyRecurrenceIterator].forEach(it => {\n    recurrenceIterators[it.frequency] = it;\n});\nfunction convertStringOfIntegerItemsValue(value) {\n    if (value) {\n        if (typeof value == 'string') {\n            value = value.split(',').map(item => parseInt(item, 10));\n        }\n    }\n    else {\n        value = null;\n    }\n    return value;\n}\nfunction convertStringOfItemsValue(value) {\n    if (value) {\n        if (typeof value == 'string') {\n            value = value.split(',');\n        }\n    }\n    else {\n        value = null;\n    }\n    return value;\n}\nfunction isEqualAsString(value1, value2) {\n    return String(value1) === String(value2);\n}\nfunction convertInteger(value) {\n    if (this.defaultValue && value === undefined) {\n        return this.defaultValue;\n    }\n    if (this.allowNull && value == null) {\n        return null;\n    }\n    value = parseInt(value);\n    return isNaN(value) ? undefined : value;\n}\n/**\n * This class represents a timespan recurrence settings.\n * It is a subclass of {@link Core.data.Model} class.\n * Please refer to the documentation for that class to become familiar with the base interface of this class.\n *\n * The data source for these fields can be customized by subclassing this class.\n *\n * @extends Core/data/Model\n */\nexport default class RecurrenceModel extends Model {\n    static get $name() {\n        return 'RecurrenceModel';\n    }\n    /**\n     * Indicates that this is a `RecurrenceModel` class instance\n     * (allows to avoid using `instanceof`).\n     * @property {Boolean}\n     * @readonly\n     */\n    get isRecurrenceModel() {\n        return true;\n    }\n    //region Fields\n    static get fields() {\n        return [\n            /**\n             * Field defines the recurrence frequency. Supported values are: `DAILY`, `WEEKLY`, `MONTHLY`, `YEARLY`.\n             * @field {'DAILY'|'WEEKLY'|'MONTHLY'|'YEARLY'} frequency\n             */\n            { name : 'frequency', defaultValue : 'DAILY' },\n            /**\n             * Field defines how often the recurrence repeats.\n             * For example, if the recurrence is weekly its interval is 2, then the timespan repeats every two weeks.\n             * @field {Number} interval\n             */\n            { name : 'interval', defaultValue : 1, convert : convertInteger },\n            /**\n             * End date of the recurrence. Specifies when the recurrence ends.\n             * The value is optional, the recurrence can as well be stopped using {@link #field-count} field value.\n             * @field {Date} endDate\n             */\n            { name : 'endDate', type : 'date' },\n            /**\n             * Specifies the number of occurrences after which the recurrence ends.\n             * The value includes the associated timespan itself so values less than 2 make no sense.\n             * The field is optional, the recurrence as well can be stopped using {@link #field-endDate} field value.\n             * @field {Number} count\n             */\n            { name : 'count', allowNull : true, convert : convertInteger },\n            /**\n             * Specifies days of the week on which the timespan should occur.\n             * An array of string values `SU`, `MO`, `TU`, `WE`, `TH`, `FR`, `SA`\n             * corresponding to Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, and Saturday days of the week.\n             * Each value can also be preceded by a positive (+n) or negative (-n) integer.\n             * If present, this indicates the nth occurrence of a specific day within the monthly or yearly recurrence.\n             *\n             * **Not applicable** for daily {@link #field-frequency}.\n             * @field {String[]} days\n             */\n            {\n                name    : 'days',\n                convert : convertStringOfItemsValue,\n                isEqual : isEqualAsString\n            },\n            /**\n             * Specifies days of the month on which the timespan should occur.\n             * An array of integer values (-31..-1 - +1..+31, negative values mean counting backwards from the month end).\n             * **Applicable only** for monthly {@link #field-frequency}.\n             * @field {Number[]} monthDays\n             */\n            {\n                name    : 'monthDays',\n                convert : convertStringOfIntegerItemsValue,\n                isEqual : isEqualAsString\n            },\n            /**\n             * Specifies months of the year on which the timespan should occur.\n             * An array of integer values (1 - 12).\n             * **Applicable only** for yearly {@link #field-frequency}.\n             * @field {Number[]} months\n             */\n            {\n                name    : 'months',\n                convert : convertStringOfIntegerItemsValue,\n                isEqual : isEqualAsString\n            },\n            /**\n             * The positions to include in the recurrence. The values operate on a set of recurrence instances **in one interval** of the recurrence rule.\n             * An array of integer values (valid values are 1 to 366 or -366 to -1, negative values mean counting backwards from the end of the built list of occurrences).\n             * **Not applicable** for daily {@link #field-frequency}.\n             * @field {Number} positions\n             */\n            {\n                name    : 'positions',\n                convert : convertStringOfIntegerItemsValue,\n                isEqual : isEqualAsString\n            }\n        ];\n    }\n    get dateFormat() {\n        return this._dateFormat || 'YYYYMMDDTHHmmss';\n    }\n    set dateFormat(format) {\n        this._dateFormat = format;\n    }\n    get recurrenceIterator() {\n        return recurrenceIterators[this.frequency];\n    }\n    /**\n     * The timespan this recurrence is associated with.\n     * @property {Scheduler.model.TimeSpan}\n     */\n    get timeSpan() {\n        return this._timeSpan;\n    }\n    set timeSpan(value) {\n        this._timeSpan = value;\n    }\n    /**\n     * The recurrence rule. A string in [RFC-5545](https://tools.ietf.org/html/rfc5545#section-3.3.10) described format\n     * (\"RRULE\" expression).\n     * @property {String}\n     */\n    get rule() {\n        const\n            me     = this,\n            result = [];\n        if (me.frequency) {\n            result.push(`FREQ=${me.frequency}`);\n            if (me.interval > 1) {\n                result.push(`INTERVAL=${me.interval}`);\n            }\n            if (me.days && me.days.length) {\n                result.push('BYDAY=' + me.days.join(','));\n            }\n            if (me.monthDays && me.monthDays.length) {\n                result.push('BYMONTHDAY=' + me.monthDays.join(','));\n            }\n            if (me.months && me.months.length) {\n                result.push('BYMONTH=' + me.months.join(','));\n            }\n            if (me.count) {\n                result.push(`COUNT=${me.count}`);\n            }\n            if (me.endDate) {\n                result.push('UNTIL=' + DateHelper.format(me.endDate, me.dateFormat));\n            }\n            if (me.positions && me.positions.length) {\n                result.push('BYSETPOS=' + me.positions.join(','));\n            }\n        }\n        return result.join(';');\n    }\n    set rule(rule) {\n        const\n            me     = this,\n            values = {\n                frequency : null,\n                interval  : null,\n                count     : null,\n                endDate   : null,\n                days      : null,\n                monthDays : null,\n                months    : null,\n                positions : null\n            };\n        me.beginBatch();\n        if (rule) {\n            const parts = rule.split(';');\n            for (let i = 0, len = parts.length; i < len; i++) {\n                const\n                    part = parts[i].split('='),\n                    value  = part[1];\n                switch (part[0]) {\n                    case 'FREQ':\n                        values.frequency = value;\n                        break;\n                    case 'INTERVAL':\n                        values.interval = value;\n                        break;\n                    case 'COUNT':\n                        values.count = value;\n                        values.until = null;\n                        break;\n                    case 'UNTIL':\n                        if (value) {\n                            values.endDate = DateHelper.parse(value, me.dateFormat);\n                        }\n                        else {\n                            values.endDate = null;\n                        }\n                        values.count = null;\n                        break;\n                    case 'BYDAY':\n                        values.days = value;\n                        break;\n                    case 'BYMONTHDAY':\n                        values.monthDays = value;\n                        break;\n                    case 'BYMONTH':\n                        values.months = value;\n                        break;\n                    case 'BYSETPOS':\n                        values.positions = value;\n                        break;\n                }\n            }\n        }\n        me.set(values);\n        if (rule) {\n            me.sanitize();\n        }\n        me.endBatch();\n    }\n    construct(data = {}) {\n        const\n            me                 = this,\n            { rule, timeSpan } = data;\n        me._suspendedTimeSpanNotifying = 0;\n        delete data.timeSpan;\n        delete data.rule;\n        super.construct(...arguments);\n        if (rule) {\n            me.suspendTimeSpanNotifying();\n            me.rule = rule;\n            me.resumeTimeSpanNotifying();\n        }\n        me.timeSpan = timeSpan;\n    }\n    /**\n     * Iterate occurrences for the owning timespan across the specified date range. This method can be called even\n     * if the timespan is not yet a member of a store, however, the occurrences returned will not be cached across\n     * subsequent calls to this method.\n     * @param {Date} startDate The start date of the iteration.\n     * @param {Date} endDate The end date of the iteration.\n     * @param {Function} fn The function to call for each occurrence.\n     * @param {Scheduler.model.TimeSpan} fn.occurrence The occurrence.\n     * @param {Boolean} fn.first A flag which is `true` for the first occurrence of this recurrence.\n     * @param {Number} fn.counter A counter of how many dates have been visited in this iteration.\n     * @param {Date} fn.date The occurrence date.\n     * @internal\n     */\n    forEachOccurrence(startDate, endDate, fn) {\n        if (this.timeSpan.startDate) {\n            this.recurrenceIterator.forEachDate({\n                recurrence : this,\n                startDate,\n                endDate,\n                fn(date, counter, first, timeSpan) {\n                    return fn(timeSpan.buildOccurrence(date, first), first, counter, date);\n                }\n            });\n        }\n    }\n    /**\n     * Cleans up fields that do not makes sense for the current {@link #field-frequency} value.\n     * @private\n     */\n    sanitize() {\n        const\n            me                = this,\n            timeSpanStartDate = me.timeSpan?.startDate,\n            values            = {};\n        me.isSanitizing = true;\n        switch (me.frequency) {\n            case 'DAILY' :\n                values.positions    = null;\n                values.days         = null;\n                values.monthDays    = null;\n                values.months       = null;\n                break;\n            case 'WEEKLY' : {\n                values.positions = null;\n                values.monthDays = null;\n                values.months = null;\n                const { days } = me;\n                if (timeSpanStartDate && days?.length === 1 && days[0] === RecurrenceDayRuleEncoder.encodeDay(timeSpanStartDate.getDay())) {\n                    values.days = null;\n                }\n                break;\n            }\n            case 'MONTHLY' : {\n                if (me.monthDays?.length) {\n                    values.positions = null;\n                    values.days = null;\n                }\n                values.months = null;\n                const { monthDays } = me;\n                if (timeSpanStartDate && monthDays?.length === 1 && monthDays[0] === timeSpanStartDate.getDate()) {\n                    values.monthDays = null;\n                }\n                break;\n            }\n            case 'YEARLY' : {\n                values.monthDays = null;\n                const { months } = me;\n                if (timeSpanStartDate && months?.length === 1 && months[0] === timeSpanStartDate.getMonth() + 1) {\n                    values.months = null;\n                }\n                break;\n            }\n        }\n        me.set(values);\n        me.isSanitizing = false;\n    }\n    copy(...args) {\n        const result = super.copy(...args);\n        result.dateFormat = this.dateFormat;\n        result.timeSpan   = this.timeSpan;\n        return result;\n    }\n    afterChange(toSet, wasSet, silent) {\n        const\n            result       = super.afterChange(toSet, wasSet, silent),\n            { timeSpan } = this;\n        if (!this.isSanitizing) {\n            // cleanup data to match the chosen frequency\n            this.sanitize();\n        }\n        if (timeSpan) {\n            timeSpan.sanitizeRecurrenceData(this);\n            if (!this.isTimeSpanNotifyingSuspended) {\n                timeSpan.onRecurrenceChanged();\n            }\n        }\n        return result;\n    }\n    set(field, value, ...args) {\n        const values = typeof field === 'object' ? field : { [field] : value };\n        // reset \"endDate\" field if \"count\" is being set\n        if (values.count) {\n            values.endDate = null;\n        }\n        // reset \"count\" field if \"endDate\" is being set\n        else if (values.endDate) {\n            values.count = null;\n        }\n        super.set(values, undefined, ...args);\n    }\n    get isTimeSpanNotifyingSuspended() {\n        return Boolean(this._suspendedTimeSpanNotifying);\n    }\n    suspendTimeSpanNotifying() {\n        this._suspendedTimeSpanNotifying++;\n    }\n    resumeTimeSpanNotifying() {\n        if (this._suspendedTimeSpanNotifying) this._suspendedTimeSpanNotifying--;\n    }\n}\nRecurrenceModel._$name = 'RecurrenceModel';", "import TimeSpan from '../TimeSpan.js';\nimport RecurrenceModel from '../RecurrenceModel.js';\nimport ArrayHelper from '../../../Core/helper/ArrayHelper.js';\nimport DateHelper from '../../../Core/helper/DateHelper.js';\nimport AbstractRecurrenceIterator from '../../data/util/recurrence/AbstractRecurrenceIterator.js';\nfunction convertExceptionDatesValue(value) {\n    const\n        result         = {},\n        { dateFormat } = this;\n    if (value) {\n        value = typeof value == 'string' ? value.split(',') : ArrayHelper.asArray(value);\n        value.forEach(item => {\n            if (typeof item == 'string') {\n                item = DateHelper.parse(item, dateFormat);\n            }\n            // If we've got a valid date out of the incoming item, add an exception key\n            if (!isNaN(item)) {\n                result[DateHelper.makeKey(item)] = 1;\n            }\n        });\n    }\n    return result;\n}\nfunction serializeExceptionDatesValue(value) {\n    const\n        result         = [],\n        { dateFormat } = this;\n    for (const date in value) {\n        if (value[date]) {\n            result.push(DateHelper.format(DateHelper.parseKey(date), dateFormat));\n        }\n    }\n    return result;\n}\nconst emptyArray = [];\n/**\n * @module Scheduler/model/mixin/RecurringTimeSpan\n */\n/**\n * This mixin class provides recurrence related fields and methods to a {@link Scheduler.model.TimeSpan timespan model}.\n *\n * The mixin introduces two types of timespans: __recurring timespan__ and its __occurrences__.\n * __Recurring timespan__ is a timespan having {@link #field-recurrenceRule recurrence rule} specified and its __occurrences__ are \"fake\" dynamically generated timespans.\n * Their set depends on the scheduler visible timespan and changes upon the timespan change.\n *\n * There are few methods allowing to distinguish a recurring event and an occurrence: {@link #property-isRecurring}, {@link #property-isOccurrence}\n * and {@link #property-recurringTimeSpan} (returns the event this record is an occurrence of).\n *\n * The {@link #field-recurrenceRule recurrence rule} defined for the event is parsed and\n * represented with {@link Scheduler.model.RecurrenceModel RecurrenceModel} class (can be changed by setting {@link #property-recurrenceModel} property) instance.\n * See: {@link #property-recurrence} property.\n * @mixin\n * @mixinbase TimeSpan\n */\nexport default Target => class RecurringTimeSpan extends (Target || TimeSpan) {\n    static get $name() {\n        return 'RecurringTimeSpan';\n    }\n    /**\n     * Returns `true` if this timespan supports recurring.\n     * @property {Boolean}\n     * @category Recurrence\n     */\n    get supportsRecurring() {\n        return true;\n    }\n    static get fields() {\n        return [\n            /**\n             * The timespan recurrence rule. A string in [RFC-5545](https://tools.ietf.org/html/rfc5545#section-3.3.10)\n             * described format (\"RRULE\" expression).\n             * @field {String} recurrenceRule\n             * @category Scheduling\n             */\n            {\n                name     : 'recurrenceRule',\n                internal : true\n            },\n            /**\n             * A string (either a single date or multiple dates separated by comma) or an array of strings containing\n             * the timespan exception dates. The dates that must be skipped when generating occurrences for a repeating\n             * timespan. This is used to modify only individual occurrences of the timespan so the further regenerations\n             * won't create another copy of this occurrence again.\n             *\n             * ```javascript\n             * {\n             *     id: 7,\n             *     startDate: '2021-10-12T14:00:00',\n             *     endDate: '2021-10-12T15:00:00',\n             *     name: 'Lunch',\n             *     resourceId: 'hotel',\n             *     recurrenceRule: 'FREQ=DAILY;COUNT=5',\n             *     exceptionDates: ['2021-10-14']\n             * }\n             * ```\n             *\n             * Use {@link #function-addExceptionDate} method to add an individual entry to the dates array:\n             *\n             * ```javascript\n             * // Break the link between the occurrence and its base.\n             * // This also adds the occurrence date as an exception date\n             * // so that the base timespan knows that this date should be skipped when regenerating its occurrences.\n             * occurrence.recurringTimeSpan = null;\n             *\n             * // now the occurrence is an individual record that can be changed & persisted freely\n             * occurrence.setStartEndDate(new Date(2018, 6, 2), new Date(2018, 6, 3));\n             * ```\n             * **Note:** The dates in this field get automatically removed when the event changes its {@link Scheduler.model.TimeSpan#field-startDate start date}.\n             *\n             * @field {String|String[]} exceptionDates\n             * @category Scheduling\n             */\n            {\n                name      : 'exceptionDates',\n                convert   : convertExceptionDatesValue,\n                serialize : serializeExceptionDatesValue,\n                internal  : true\n            }\n        ];\n    }\n    /**\n     * Override of {@link Core/data/Model}'s method. If an {@link #property-isOccurrence}\n     * is passed, it is detached from its parent recurring event. If it still has a recurrence\n     * then the recurring event is changed to stop at the occurrence date. If it has no recurrence\n     * an exception is added at the occurrence date.\n     * @category Recurrence\n     */\n    remove() {\n        if (this.isOccurrence) {\n            const\n                me = this,\n                { recurringTimeSpan } = me;\n            me.cancelBatch();\n            recurringTimeSpan.beginBatch();\n            me.detachFromRecurringEvent();\n            recurringTimeSpan.endBatch();\n        }\n        else {\n            return super.remove(...arguments);\n        }\n    }\n    get eventStore() {\n        let result = (this.isOccurrence && this.recurringEvent?.eventStore) || super.eventStore;\n        // Recurrence methods are called on `eventStore`, but in case we have a regular\n        // store with recurrence mixin, we won't event store and should return own\n        // store instead\n        if (!result && this.firstStore?.isRecurringTimeSpansMixin) {\n            result = this.firstStore;\n        }\n        return result;\n    }\n    /**\n     * Name of the class representing the recurrence model, defaults to {@link Scheduler.model.RecurrenceModel}\n     * @property {String}\n     * @category Recurrence\n     */\n    get recurrenceModel() {\n        return this._recurrenceModel || RecurrenceModel;\n    }\n    set recurrenceModel(model) {\n        this._recurrenceModel = model;\n    }\n    /**\n     * Sets a recurrence for the timespan with a given frequency, interval, and end.\n     * @param {RecurrenceModelConfig|String|Scheduler.model.RecurrenceModel} recurrence A data object for an instance of\n     * {@link Scheduler.model.RecurrenceModel}. May also be the frequency string: `DAILY`, `WEEKLY`, `MONTHLY`, or\n     * `YEARLY`.\n     *\n     * ```javascript\n     * // repeat the event every other week till Jan 2 2039\n     * event.setRecurrence({\n     *     frequency : \"WEEKLY\",\n     *     interval  : 2,\n     *     endDate   : new Date(2039, 0, 2)\n     * });\n     * ```\n     *\n     * Also a {@link Scheduler.model.RecurrenceModel recurrence model} can be provided as the only argument for this\n     * method:\n     *\n     * ```javascript\n     * const recurrence = new RecurrenceModel({ frequency : 'DAILY', interval : 5 });\n     *\n     * event.setRecurrence(recurrence);\n     * ```\n     *\n     * or\n     *\n     * ```javascript\n     * event.setRecurrence(\"WEEKLY\", 2, new Date(2039, 0, 2));\n     * ```\n     * @param {Number} [interval] The interval between occurrences (instances of this recurrence). For example, a daily\n     * recurrence with an interval of 2 occurs every other day. Must be greater than 0.\n     * @param {Number|Date} [recurrenceEnd] The end of the recurrence. The value can be specified by a date or by a\n     * maximum count of occurrences (has to greater than 1, since 1 means the event itself).\n     * @category Recurrence\n     */\n    setRecurrence(recurrence, interval, recurrenceEnd) {\n        const me = this;\n        let recurrenceRule;\n        if (recurrence) {\n            if (!recurrence.isRecurrenceModel) {\n                if (typeof recurrence === 'string') {\n                    recurrence = {\n                        frequency : recurrence\n                    };\n                    if (interval) {\n                        recurrence.interval = interval;\n                    }\n                    // If the recurrence is limited\n                    if (recurrenceEnd) {\n                        if (recurrenceEnd instanceof Date) {\n                            recurrence.endDate = recurrenceEnd;\n                        }\n                        else {\n                            recurrence.count = recurrenceEnd;\n                        }\n                    }\n                }\n                recurrence = new me.recurrenceModel(recurrence);\n            }\n            // The RecurrenceModel has a reference to its owning recurring event.\n            // It uses this to remove the owning event's exceptions after its new endDate\n            // whenever its endDate is changed.\n            recurrence.timeSpan = me;\n            recurrenceRule = recurrence.rule;\n        }\n        me.recurrence     = recurrence;\n        me.recurrenceRule = recurrenceRule;\n    }\n    /**\n     * The recurrence model used for the timespan.\n     * @property {Scheduler.model.RecurrenceModel}\n     * @category Recurrence\n     */\n    get recurrence() {\n        const\n            me = this,\n            rule = me.recurrenceRule;\n        if (!me._recurrence && rule) {\n            me._recurrence = new me.recurrenceModel({ rule, timeSpan : me, id : `${me.id}-recurrence` });\n        }\n        return me._recurrence;\n    }\n    set recurrence(recurrence) {\n        const me = this;\n        me._recurrence = recurrence;\n        if (recurrence) {\n            // bind recurrence instance to the model\n            recurrence.timeSpan = me;\n            me.recurrenceRule   = recurrence.rule;\n        }\n        else {\n            // If this is being done to an occurrence, it's a signal that we are being\n            // mutated into an exception. Apply the change immediately, directly to the data.\n            if (me.isOccurrence) {\n                me.setData('recurrenceRule', null);\n            }\n            else {\n                me.recurrenceRule = null;\n            }\n        }\n    }\n    /**\n     * Indicates if the timespan is recurring.\n     * @property {Boolean}\n     * @readonly\n     * @category Recurrence\n     */\n    get isRecurring() {\n        // MUST evaluate in this order so that if it is an occurrence,\n        // the recurrence getter does not refresh the rule\n        return Boolean(!this.isOccurrence && this.recurrence);\n    }\n    /**\n     * Indicates if the timespan is an occurrence of another recurring timespan.\n     * @property {Boolean}\n     * @readonly\n     * @category Recurrence\n     */\n    get isOccurrence() {\n        return Boolean(this.recurringTimeSpan);\n    }\n    /**\n     * The \"main\" timespan this model is an occurrence of. For non-occurrences returns `null`.\n     * @property {Scheduler.model.TimeSpan}\n     * @readonly\n     * @internal\n     * @category Recurrence\n     */\n    get recurringTimeSpan() {\n        return this._recurringTimeSpan;\n    }\n    get isPersistable() {\n        return super.isPersistable && (!this.supportsRecurring || !this.isOccurrence);\n    }\n    set recurringTimeSpan(recurringTimeSpan) {\n        this._recurringTimeSpan = recurringTimeSpan;\n    }\n    /**\n     * Returns the occurrences of this event over the specified time range. If the first\n     * occurrence is in the time range `*this*` record is included in that position.\n     * @param {Date} startDate The start date of the range for which to include occurrences.\n     * @param {Date} [endDate] The end date of the range for which to include occurrences.\n     * Defaults to the startDate.\n     * @returns {Scheduler.model.TimeSpan[]} The array of occurrences which occur over the specified range.\n     * @category Recurrence\n     */\n    getOccurrencesForDateRange(startDate, endDate = startDate) {\n        return this.eventStore.getOccurrencesForTimeSpan(this, startDate, endDate);\n    }\n    /**\n     * Array of this recurring timespan's cached occurrences. __Not including the owning recurring\n     * event__.\n     *\n     * Empty if the timespan is not recurring.\n     *\n     * __Note that this is an internal accessor and is cleared whenever changes are made to the\n     * owning recurring event__.\n     * @property {Scheduler.model.TimeSpan[]}\n     * @readonly\n     * @internal\n     * @category Recurrence\n     */\n    get occurrences() {\n        if (this.isRecurring) {\n            const result = [];\n            // The occurrencesMap contains entries for each occurrence date.\n            this.occurrenceMap.forEach(occurrence => {\n                if (occurrence !== this) {\n                    result.push(occurrence);\n                }\n            });\n            return result;\n        }\n        return emptyArray;\n    }\n    /**\n     * A Map, keyed by each date an occurrence intersects, of occurrences of this event.\n     * @property {Map}\n     * @readonly\n     * @internal\n     * @category Recurrence\n     */\n    get occurrenceMap() {\n        return this._occurrencesMap || (this._occurrencesMap = new Map());\n    }\n    /**\n     * Removes an occurrence from this recurring timespan's cached occurrences.\n     * @param dateOrTimeSpan occurrence date or occurrence TimeSpan\n     * @internal\n     * @category Recurrence\n     */\n    removeOccurrence(dateOrTimeSpan, eventStore = this.eventStore) {\n        const date = dateOrTimeSpan.isTimeSpan ? dateOrTimeSpan.occurrenceDate : dateOrTimeSpan;\n        // Clear the occurrences *is* we are in an EventStore.\n        eventStore?.globalOccurrences.delete(this.createRecurrenceKey(date));\n        // Remove occurrence from its by-startDate cache\n        this.occurrenceMap.delete(DateHelper.makeKey(date));\n    }\n    /**\n     * Removes all cached occurrences on or after the passed date from this recurring timespan's cached occurrences.\n     * @internal\n     * @category Recurrence\n     */\n    removeOccurrencesFrom(date) {\n        this.occurrenceMap.forEach((occurrence, dateKey) => {\n            if (DateHelper.parseKey(dateKey) >= date) {\n                this.removeOccurrence(occurrence);\n            }\n        });\n    }\n    /**\n     * Removes this recurring timespan's cached occurrences.\n     * @internal\n     * @category Recurrence\n     */\n    removeOccurrences(eventStore) {\n        // This recurring event must also be removed from the occurrenceMap if it's there\n        // So insert it as the first element. Can also be found from the store's global occurrence\n        // Map using [...this.eventStore.globalOccurrences.keys()].filter(e => e.startsWith(`_generated:${this.id}`))\n        [this, ...this.occurrences].forEach(occurrence => this.removeOccurrence(occurrence, eventStore));\n    }\n    /**\n     * The method is triggered when the timespan recurrence settings get changed.\n     * It updates the {@link #field-recurrenceRule} field in this case.\n     * @internal\n     * @category Recurrence\n     */\n    onRecurrenceChanged() {\n        this.recurrenceRule = this.recurrence?.rule || null;\n    }\n    sanitizeRecurrenceData(recurrence = this.recurrence) {\n        // Remove all exceptionsDates that our owning timeSpan had that are\n        // now after our end date and therefore redundant.\n        if (recurrence.endDate) {\n            const\n                endDate            = DateHelper.clearTime(recurrence.endDate),\n                { exceptionDates } = this;\n            // Clear any now-invalid cached occurrences\n            this.removeOccurrencesFrom(endDate);\n            // If we had any exceptions on or after this date, remove them.\n            if (exceptionDates) {\n                for (const dateKey in exceptionDates) {\n                    const exceptionDate = DateHelper.parseKey(dateKey);\n                    if (exceptionDate >= endDate) {\n                        delete exceptionDates[dateKey];\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * The original {@lScheduler.model.TimeSpan#field-startDate startDate} of this event before any modifications\n     * took place. Used by {@link #function-removeOccurrence} and {@link #function-detachFromRecurringEvent}\n     * @internal\n     * @readonly\n     * @category Recurrence\n     */\n    get occurrenceDate() {\n        return this.meta.modified?.startDate || this.startDate;\n    }\n    /**\n     * If this event is an {@link #property-isOccurrence occurrence} of a recurring event, then this\n     * property yields its zero-based occurrence index in the sequence.\n     * @property {Number}\n     * @readonly\n     * @category Recurrence\n     */\n    get occurrenceIndex() {\n        return AbstractRecurrenceIterator.getOccurrenceIndex(this);\n    }\n    /**\n     * Builds an occurrence of this recurring event by cloning the timespan data.\n     * The method is used internally by the __RecurringTimeSpans__ mixin.\n     * Override it if you need to customize the generated occurrences.\n     *\n     * If the date requested is the start date of the event sequence, `this`\n     * record is returned. All runs of recurring events begin with the base record.\n     * @param  {Date} occurrenceDate The occurrence start date.\n     * @param  {Boolean} isFirst `true` if this is the first occurrence.\n     * @returns {Scheduler.model.TimeSpan} The occurrence.\n     * @internal\n     * @category Recurrence\n     */\n    buildOccurrence(occurrenceDate, isFirst) {\n        const\n            me                    = this,\n            {\n                occurrenceMap,\n                recurrence,\n                meta\n            }                     = me,\n            globalOccurrences     = me.eventStore?.globalOccurrences,\n            occurrenceKey         = DateHelper.makeKey(occurrenceDate),\n            id                    = me.createRecurrenceKey(occurrenceDate, occurrenceKey),\n            onStartDate           = !(occurrenceDate - me.startDate),\n            { fieldMap }          = me.constructor;\n        // An occurrence has a unique ID which identifies it by its base recurring event and its time.\n        let occurrence   = globalOccurrences?.get(id),\n            { duration } = me;\n        // If there's no duration, or it's an all day event (which makes the event ceil and floor its\n        // start and end dates, but does *NOT* as of 27/5/2020 adjust its duration) then\n        // we calculate the duration of the occurrence.\n        if (me.endDate && (me.allDay || !duration)) {\n            duration = DateHelper.as(me.durationUnit, me.endDate.getTime() - me.startDate.getTime());\n        }\n        // Don't let NaN in record data\n        const occurrenceEndDate = duration !== undefined ? DateHelper.add(occurrenceDate, duration, me.durationUnit) : undefined;\n        if (!occurrence) {\n            // If this is the first occurrence (start times may not match), or it's right on the start\n            // then this recurring event *IS* the occurrence\n            if (isFirst || onStartDate) {\n                occurrence = me;\n                // We are the first occurrence.\n                // But if our start time is not as the rule requires, adjust ourself *silently*\n                if (!onStartDate) {\n                    me.setStartEndDate(occurrenceDate, occurrenceEndDate, true);\n                    // Since we've changed the event start date the recurrence \"Days\"/\"MonthDays\"/\"Months\"\n                    // might get redundant in case the event start date matches the fields values\n                    // Calling recurrence sanitize() will clean the fields in this case.\n                    recurrence.suspendTimeSpanNotifying();\n                    recurrence.sanitize();\n                    recurrence.resumeTimeSpanNotifying();\n                }\n                // Either way, because of adjustment above, or initial correctness, we are in sync\n                // with our recurrence rule. A RecurrenceIterator is now able to calculate a correct\n                // UNTIL date from a COUNT value. See AbstractRecurrenceIterator#processIterationConfig\n                meta.isSyncedWithRule = true;\n            }\n            // Generate an occurrence which references this as its parent\n            else {\n                occurrence = me.copy(\n                    {\n                        [fieldMap.id.dataSource]        : id,\n                        [fieldMap.startDate.dataSource] : occurrenceDate,\n                        [fieldMap.endDate.dataSource]   : occurrenceEndDate,\n                        [fieldMap.duration.dataSource]  : duration,\n                        constraintDate                  : null,\n                        constraintType                  : null\n                    },\n                    { creatingOccurrence : true }\n                );\n                occurrence.recurringTimeSpan = me;\n            }\n            globalOccurrences?.set(id, occurrence);\n            // A recurring timespan keeps a by-startDate index of occurrences.\n            // And itself will be among those.\n            occurrenceMap.set(occurrenceKey, occurrence);\n        }\n        return occurrence;\n    }\n    createRecurrenceKey(date = this.startDate, dateKey = null) {\n        return `_generated:${this.id}:${dateKey || DateHelper.makeKey(date)}`;\n    }\n    // Converts this occurrence to a new \"master\" event\n    convertToRealEvent(wasSet, silent) {\n        if (!this.isOccurrence) {\n            return;\n        }\n        const\n            me = this,\n            {\n                recurringTimeSpan,\n                resource,\n                occurrenceIndex,\n                recurrence\n            }               = me,\n            count           = recurrence && recurringTimeSpan.recurrence.count,\n            // resourceRecords is a temporary property of occurrence events to handle cases\n            // if only resources has been updated. (change only resources won't mark record as dirty)\n            newResource     = wasSet?.resourceRecords?.value || me.data.newResource;\n        recurringTimeSpan.beginBatch();\n        me.detachFromRecurringEvent();\n        me.clearChanges();\n        // Must silently set our own ID, not be the key generated from our parent id and occurrence date.\n        // Must not result in the id field being in the modified state.\n        me.setData('id', me.generateId(recurringTimeSpan.eventStore));\n        if (newResource) {\n            // clear resourceId to avoid auto-adding to assignmentStore, it is handled manually bellow\n            delete me.data.resourceId;\n        }\n        // The impending changes to the former parent recurring event trigger a full refresh.\n        recurringTimeSpan.eventStore.add(me, silent);\n        // Ensure that the original count is honoured.\n        // If we are the 8th occurrence of 10, OUR repeat count must be 3.\n        if (count) {\n            me.recurrence.count = count - occurrenceIndex;\n        }\n        if (newResource || resource) {\n            me.assign(newResource || resource);\n        }\n        // remove data after apply\n        if (newResource) {\n            delete me.data.resourceRecords;\n        }\n        if (wasSet) {\n            delete wasSet.resourceRecords;\n        }\n        // Any change to a recurring events triggers a store refresh event.\n        recurringTimeSpan.endBatch();\n    }\n    afterChange(toSet, wasSet, silent, ...args) {\n        const\n            me             = this,\n            { eventStore } = me;\n        // reset cached recurrence instance in case \"recurrenceRule\" is changed\n        if ('recurrenceRule' in wasSet) {\n            me._recurrence = null;\n            // If we are a recurring event, we must be in the recurringEvents cache.\n            // If we are *not* a recurring event, we must *not* be in there.\n            // An event not yet in a store (eg dragging to create) won't have an eventStore.\n            eventStore?.recurringEvents[wasSet.recurrenceRule.value ? 'add' : 'delete'](me);\n        }\n        // Any change to an occurrence adds it to an event store, at which point\n        // it ceases to be an occurrence.\n        //\n        // If it has a recurrenceRule it becomes the start of a new recurring event series,\n        // and the old owning recurring event stops on the day before.\n        //\n        // If it has no recurrenceRule, it becomes an exception to its owning recurring event.\n        if (me.isOccurrence) {\n            me.convertToRealEvent(wasSet, silent);\n        }\n        // Setting a newException date must mark the exceptionDates as modified\n        else if ('newExceptionDate' in wasSet) {\n            me.meta.modified.exceptionDates = true;\n            delete me.meta.modified.newExceptionDate;\n            // Remove any occurrence on that date from our by-startDate cache\n            // and from the global occurrences cache\n            me.removeOccurrence(wasSet.newExceptionDate.value);\n        }\n        return super.afterChange(toSet, wasSet, silent, ...args);\n    }\n    /**\n     * Detaches an occurrence from its owning recurring event so that it can be added to the eventStore\n     * either as an exception, or as the start of a new recurring sequence.\n     * @internal\n     * @category Recurrence\n     */\n    detachFromRecurringEvent() {\n        const\n            me                                    = this,\n            // For access further down, breaking the link involves engine if trying to get the occurrenceDate later,\n            // resulting in the wrong date\n            { recurringTimeSpan, occurrenceDate, startDate } = me;\n        // Break the link\n        me.recurringTimeSpan = null;\n        // The occurrenceDate is injected into the data when an occurrence is created.\n        // the recurringTimeSpan's afterChange will remove any cache occurrence\n        // for this date; see above\n        recurringTimeSpan.addExceptionDate(occurrenceDate);\n        // If we still have a recurrenceRule, we're being promoted to be a new recurring event.\n        // The recurrence setter applies the rule immediately to occurrences, so this will\n        // always be correct.\n        if (me.recurrenceRule) {\n            // The RecurrenceModel removes occurrences and exceptions after this date\n            recurringTimeSpan.recurrence.endDate = DateHelper.add(startDate, -1, 'minute');\n        }\n    }\n    /**\n     * The setter used by Model#inSet when {@link #function-addExceptionDate} is called.\n     * Adding an exception must trigger change processing in a recurring event, so it must\n     * be changed through a {@link Core.data.Model#function-set} call. Also, the change must be batchable\n     * with other changes.\n     * @private\n     * @readonly\n     * @category Recurrence\n     */\n    set newExceptionDate(date) {\n        if (date) {\n            const exceptionDates = this.exceptionDates || (this.exceptionDates = {});\n            exceptionDates[DateHelper.makeKey(date)] = 1;\n        }\n    }\n    /**\n     * Adds an exception date that should be skipped when generating occurrences for the timespan.\n     * The methods adds an entry to the array kept in {@link #field-exceptionDates} field.\n     * @param {Date} date Exception date.\n     * @internal\n     * @category Recurrence\n     */\n    addExceptionDate(newExceptionDate) {\n        return this.set({\n            newExceptionDate\n        });\n    }\n    /**\n     * Does this recurring event have an exception on the passed date.\n     * @param {Date} date The date to find an exception for.\n     * @returns {Boolean} `true` if the event has an exception starting on the passed date.\n     * @category Recurrence\n     */\n    hasException(date) {\n        return this.exceptionDates?.[DateHelper.makeKey(date)];\n    }\n};\n", "import DH from '../../../Core/helper/DateHelper.js';\nimport ArrayHelper from '../../../Core/helper/ArrayHelper.js';\nconst\n    oneDayMS = 1000 * 60 * 60 * 24;\n/**\n * @module Scheduler/model/mixin/EventModelMixin\n */\n/**\n * Predefined named colors (actual color might vary by theme):\n * <div class=\"b-colorbox b-inline b-sch-red\"></div>red,\n * <div class=\"b-colorbox b-inline b-sch-pink\"></div>pink,\n * <div class=\"b-colorbox b-inline b-sch-purple\"></div>purple,\n * <div class=\"b-colorbox b-inline b-sch-magenta\"></div>magenta,\n * <div class=\"b-colorbox b-inline b-sch-violet\"></div>violet,\n * <div class=\"b-colorbox b-inline b-sch-indigo\"></div>indigo,\n * <div class=\"b-colorbox b-inline b-sch-blue\"></div>blue,\n * <div class=\"b-colorbox b-inline b-sch-cyan\"></div>cyan,\n * <div class=\"b-colorbox b-inline b-sch-teal\"></div>teal,\n * <div class=\"b-colorbox b-inline b-sch-green\"></div>green,\n * <div class=\"b-colorbox b-inline b-sch-gantt-green\"></div>gantt-green\n * <div class=\"b-colorbox b-inline b-sch-lime\"></div>lime,\n * <div class=\"b-colorbox b-inline b-sch-yellow\"></div>yellow,\n * <div class=\"b-colorbox b-inline b-sch-orange\"></div>orange,\n * <div class=\"b-colorbox b-inline b-sch-deep-orange\"></div>deep-orange\n * <div class=\"b-colorbox b-inline b-sch-gray\"></div>gray\n * <div class=\"b-colorbox b-inline b-sch-light-gray\"></div>light-gray\n * @typedef {'red'|'pink'|'purple'|'magenta'|'violet'|'indigo'|'blue'|'cyan'|'teal'|'green'|'gantt-green'|'lime'|'yellow'|'orange'|'deep-orange'|'gray'|'light-gray'|String|null} EventColor\n */\n// Colors also specified in a static getter in TimelineEventRendering.js\n/**\n * Mixin that holds configuration shared between events in Scheduler and Scheduler Pro.\n * @mixin\n */\nexport default Target => class EventModelMixin extends Target {\n    static get $name() {\n        return 'EventModelMixin';\n    }\n    // Flag checked by EventStore to make sure it uses a valid subclass\n    static get isEventModel() {\n        return true;\n    }\n    /**\n     * Set value for the specified field(s), triggering engine calculations immediately. See\n     * {@link Core.data.Model#function-set Model#set()} for arguments.\n     *\n     * ```javascript\n     * eventRecord.set('duration', 4);\n     * // eventRecord.endDate is not yet calculated\n     *\n     * await eventRecord.setAsync('duration', 4);\n     * // eventRecord.endDate is calculated\n     * ```\n     *\n     * @param {String|Object} field The field to set value for, or an object with multiple values to set in one call\n     * @param {*} [value] Value to set\n     * @param {Boolean} [silent=false] Set to true to not trigger events. If event is recurring, occurrences won't be updated\n     * automatically.\n     * @function setAsync\n     * @category Editing\n     * @async\n     */\n    //region Fields\n    static get fields() {\n        return [\n            /**\n             * The start date of a time span (or Event / Task).\n             *\n             * Uses {@link Core/helper/DateHelper#property-defaultFormat-static DateHelper.defaultFormat} to convert a\n             * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and\n             * change the dateFormat for this field.\n             *\n             * UI fields representing this data field are disabled for summary tasks. See {@link #function-isEditable}\n             * for details.\n             *\n             * Note that the field always returns a `Date`.\n             *\n             * Also note that modifying the `startDate` at runtime will move the event in time, without affecting its\n             * duration (with reservation for other scheduling logic affecting the duration). If you want to change the\n             * `startDate` and `duration`, use {@link Scheduler/model/TimeSpan#function-setStartDate} instead (passing\n             * `false` as the second argument).\n             *\n             * @field {Date} startDate\n             * @accepts {String|Date}\n             * @category Scheduling\n             */\n            /**\n             * The end date of a time span (or Event / Task).\n             *\n             * Uses {@link Core/helper/DateHelper#property-defaultFormat-static DateHelper.defaultFormat} to convert a\n             * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and\n             * change the dateFormat for this field.\n             *\n             * UI fields representing this data field are disabled for summary tasks. See {@link #function-isEditable} for details.\n             *\n             * Note that the field always returns a `Date`.\n             *\n             * @field {Date} endDate\n             * @accepts {String|Date}\n             * @category Scheduling\n             */\n            /**\n             * The numeric part of the timespan's duration (the number of units).\n             *\n             * UI fields representing this data field are disabled for summary tasks. See {@link #function-isEditable}\n             * for details.\n             *\n             * @field {Number} duration\n             * @category Scheduling\n             */\n            /**\n             * Calculated field which encapsulates the duration's magnitude and unit. This field will not be persisted,\n             * setting it will update the {@link #field-duration} and\n             * {@link Scheduler.model.TimeSpan#field-durationUnit} fields.\n             *\n             * UI fields representing this data field are disabled for summary tasks. See {@link #function-isEditable}\n             * for details.\n             *\n             * @field {DurationConfig|Core.data.Duration} fullDuration\n             * @category Scheduling\n             */\n            /**\n             * The unique identifier of a task (mandatory)\n             * @field {String|Number} id\n             * @category Common\n             */\n            /**\n             * Id of the resource this event is associated with (only usable for single assignments). We recommend\n             * using assignments in an AssignmentStore over this approach. Internally any Event using `resourceId`\n             * will have an assignment in AssignmentStore generated.\n             * @field {String|Number} resourceId\n             * @category Common\n             */\n            {\n                name     : 'resourceId',\n                internal : true\n            },\n            /**\n             * Ids of the resources this event is associated with (can be used for for multiple assignments).\n             * Any event using `resourceIds` will have assignments in AssignmentStore generated automatically.\n             * It only applies if is configured with `perist: true`.\n             * ```javascript\n             *   class CustomEventModel extends EventModel {\n             *       static get $name() {\n             *           return 'CustomEventModel';\n             *       }\n             *\n             *       static get fields() {\n             *           return [\n             *               { name : 'resourceIds', persist : true }\n             *           ];\n             *       }\n             *   };\n             *\n             *   const\n             *       resources   = [\n             *           { id : 'r1', name : 'Celia' },\n             *           { id : 'r2', name : 'Lee' },\n             *           { id : 'r3', name : 'Macy' },\n             *           { id : 'r4', name : 'Madison' }\n             *       ],\n             *       events      = [\n             *           {\n             *               id          : 1,\n             *               resourceIds : ['r1', 'r2']\n             *               ...\n             *           },\n             *           {\n             *               id          : 2,\n             *               resourceIds : ['r3', 'r4']\n             *               ...\n             *           }\n             *       ];\n             *\n             *   const scheduler = new Scheduler({\n             *       ...\n             *       eventStore : {\n             *           modelClass : CustomEventModel,\n             *           data       : events\n             *       },\n             *       ...\n             *   });\n             * ```\n             * @field {String[]|Number[]} resourceIds\n             * @category Common\n             */\n            {\n                name     : 'resourceIds',\n                type     : 'array',\n                persist  : false,\n                internal : true\n            },\n            /**\n             * The array of {@link Scheduler.model.ResourceModel resources} which are assigned to this event.\n             * @field {Scheduler.model.ResourceModel[]} resources\n             * @category Common\n             */\n            {\n                name   : 'resources',\n                column : {\n                    type : 'resourceassignment'\n                },\n                persist  : false,\n                internal : true,\n                useProp  : true\n            },\n            /**\n             * Specify false to prevent the event from being dragged (if EventDrag feature is used)\n             * @field {Boolean} draggable\n             * @default true\n             * @category Interaction\n             */\n            {\n                name         : 'draggable',\n                type         : 'boolean',\n                persist      : false,\n                defaultValue : true,\n                internal     : true\n            },\n            /**\n             * Specify `false` to prevent the event from being resized (if EventResize feature is used). You can also\n             * specify `'start'` or `'end'` to only allow resizing in one direction\n             * @field {Boolean|String} resizable\n             * @default true\n             * @category Interaction\n             */\n            {\n                name         : 'resizable',\n                persist      : false,\n                defaultValue : true,\n                internal     : true\n            }, // true, false, 'start' or 'end'\n            /**\n             * A field marking event as all day(s) spanning event.\n             * For example, a holiday day may be represented by a `startDate`, and the `allDay` flag.\n             * @field {Boolean} allDay\n             * @category Scheduling\n             */\n            {\n                name         : 'allDay',\n                type         : 'boolean',\n                defaultValue : false\n            },\n            /**\n             * Controls this events appearance, see Schedulers\n             * {@link Scheduler.view.mixin.TimelineEventRendering#config-eventStyle eventStyle config} for\n             * available options.\n             * @field {'plain'|'border'|'colored'|'hollow'|'line'|'dashed'|'minimal'|'rounded'|'calendar'|'interday'|null} eventStyle\n             * @category Styling\n             */\n            {\n                name     : 'eventStyle',\n                internal : true\n            },\n            /**\n             * Controls the primary color of the event. For available standard colors, see\n             * {@link #typedef-EventColor}.\n             * @field {EventColor|String|null} eventColor\n             * @category Styling\n             */\n            {\n                name     : 'eventColor',\n                internal : true\n            },\n            /**\n             * Width (in px) to use for this milestone when using Scheduler#milestoneLayoutMode 'data'.\n             * @field {Number} milestoneWidth\n             * @category Styling\n             */\n            {\n                name     : 'milestoneWidth',\n                internal : true\n            },\n            /**\n             * Set this field to `false` to opt out of {@link Scheduler.feature.StickyEvents sticky event content}\n             * (keeping event text in view while scrolling).\n             * @field {Boolean} stickyContents\n             * @category Styling\n             */\n            {\n                name     : 'stickyContents',\n                internal : true\n            }\n        ];\n    }\n    //endregion\n    //region Id change\n    updateAssignmentEventIds() {\n        this.assigned.forEach(assignment => {\n            assignment.eventId = this.id;\n        });\n    }\n    syncId(value) {\n        super.syncId(value);\n        this.updateAssignmentEventIds();\n    }\n    //endregion\n    // This method is used by the `autoUpdateRecord` mode of the resource assignment field\n    // here we route the resources update to the correct setter\n    setValue(fieldName, value) {\n        if (fieldName === 'resource' && !this.usesSingleAssignment) {\n            this.resources = ArrayHelper.asArray(value) ?? [];\n        }\n        else {\n            return super.setValue(fieldName, value);\n        }\n    }\n    //region Resources\n    /**\n     * Returns all resources assigned to an event.\n     *\n     * @property {Scheduler.model.ResourceModel[]}\n     * @category Assignments & Resources\n     * @readonly\n     */\n    get resources() {\n        // Only include valid resources, to not have nulls in the result\n        return this.assignments.reduce((resources, { resource }) => {\n            resource && resources.push(resource.$original);\n            return resources;\n        }, []);\n    }\n    set resources(resources) {\n        resources = ArrayHelper.asArray(resources);\n        const\n            me             = this,\n            newResourceIds = resources.map(me.constructor.asId);\n        if (me.usesSingleAssignment) {\n            me.set('resourceId', newResourceIds[0]);\n        }\n        else if (me.fieldMap?.resourceIds.persist) {\n            me.resourceIds = newResourceIds;\n        }\n        else {\n            const\n                existingResourceIds                     = me.assignments.map(a => a.resource.id),\n                { onlyInA : toAdd, onlyInB : toRemove } = ArrayHelper.delta(newResourceIds, existingResourceIds);\n            // Add first, remove after. Otherwise event might get removed with its last assignment\n            me.assignmentStore.add(toAdd.map(resourceId => ({ resource : resourceId, event : me })));\n            me.assignmentStore.remove(toRemove.map(resourceId => me.assignments.find(a => a.resource.id === resourceId)));\n        }\n    }\n    /**\n     * Iterate over all associated resources\n     * @private\n     * @category Assignments & Resources\n     */\n    forEachResource(fn, thisObj = this) {\n        for (const resource of this.resources) {\n            if (fn.call(thisObj, resource) === false) {\n                return;\n            }\n        }\n    }\n    /**\n     * Returns either the resource associated with this event (when called w/o `resourceId`) or resource\n     * with specified id.\n     *\n     * @param {String} [resourceId] To retrieve a specific resource\n     * @returns {Scheduler.model.ResourceModel}\n     * @category Assignments & Resources\n     */\n    getResource(resourceId) {\n        if (resourceId == null) {\n            return this.resource;\n        }\n        return this.resourceStore ? this.resourceStore.getById(resourceId) : null;\n    }\n    //endregion\n    //region Dates\n    get startDate() {\n        let dt;\n        if (this.isOccurrence) {\n            dt = this.get('startDate');\n        }\n        else {\n            // Micro optimization to avoid expensive super call. super will be hit in Scheduler Pro\n            dt = this._startDate ?? super.startDate;\n        }\n        if (this.allDay) {\n            dt = this.constructor.getAllDayStartDate(dt);\n        }\n        return dt;\n    }\n    set startDate(startDate) {\n        if (this.batching) {\n            this._startDate = startDate;\n            this.set({ startDate });\n        }\n        else {\n            super.startDate = startDate;\n        }\n    }\n    get endDate() {\n        let dt;\n        if (this.isOccurrence) {\n            dt = this.get('endDate');\n        }\n        else {\n            // Micro optimization to avoid expensive super call. super will be hit in Scheduler Pro\n            dt = this._endDate ?? super.endDate;\n        }\n        if (this.allDay) {\n            dt = this.constructor.getAllDayEndDate(dt);\n        }\n        return dt;\n    }\n    set endDate(endDate) {\n        if (this.batching) {\n            this._endDate = endDate;\n            this.set({ endDate });\n        }\n        else {\n            super.endDate = endDate;\n        }\n    }\n    // Cannot use `convert` method because it might be disabled by `useRawData : true` and we always need to calculate\n    // that value\n    get wrapStartDate() {\n        return this.startDate;\n    }\n    set wrapStartDate(value) {}\n    get wrapEndDate() {\n        return this.endDate;\n    }\n    set wrapEndDate(value) {}\n    /**\n     * Shift the dates for the date range by the passed amount and unit\n     * @param {'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y'} unit The unit to shift by, see {@link Core.helper.DateHelper}\n     * for more information on valid formats.\n     * @param {Number} amount The amount to shift\n     * @returns {Promise} A promise which is resolved when shift calculations are done\n     * @async\n     * @method shift\n     * @category Scheduling\n     */\n    //endregion\n    //region Is\n    // Used internally to differentiate between Event and ResourceTimeRange\n    get isEvent() {\n        return true;\n    }\n    /**\n     * Returns true if event can be drag and dropped\n     * @property {Boolean}\n     * @category Editing\n     */\n    get isDraggable() {\n        return !this.readOnly && this.draggable;\n    }\n    /**\n     * Returns true if event can be resized, but can additionally return 'start' or 'end' indicating how this event can\n     * be resized.\n     *\n     * Milestones and parent events (that are not manuallyScheduled) cannot be resized.\n     *\n     * @property {Boolean|String}\n     * @readonly\n     * @category Editing\n     */\n    get isResizable() {\n        return !this.isMilestone && (!this.isParent || this.manuallyScheduled) && this.resizable;\n    }\n    /**\n     * Returns false if the event is not persistable. By default it always is, override this getter if you need\n     * custom logic.\n     *\n     * @property {Boolean}\n     * @readonly\n     * @category Editing\n     */\n    get isPersistable() {\n        // Records not yet fully created cannot be persisted\n        return super.isPersistable && !this.isCreating;\n    }\n    endBatch(silent, skipAccessors, triggerBeforeUpdate) {\n        const\n            me = this,\n            wasPersistable = me.isPersistable;\n        super.endBatch(silent, skipAccessors, triggerBeforeUpdate);\n        // If this event newly persistable, its assignments are eligible for syncing.\n        if (me.isPersistable && !wasPersistable && !me.ignoreBag && me.assigned) {\n            for (const assignment of me.assigned) {\n                assignment.stores.forEach(s =>\n                    s.updateModifiedBagForRecord(assignment)\n                );\n            }\n        }\n    }\n    get isCreating() {\n        return super.isCreating;\n    }\n    set isCreating(value) {\n        super.isCreating = value;\n        this.assignmentStore?.suspendAutoCommit();\n        this.assignments.forEach(record => record.isCreating = value);\n        this.assignmentStore?.resumeAutoCommit();\n    }\n    //endregion\n    //region Single assignment compatibility\n    get usesSingleAssignment() {\n        return !this.eventStore || this.eventStore.usesSingleAssignment;\n    }\n    copy(...args) {\n        const copy = super.copy(...args);\n        // Don't copy resourceId when using multi assignment\n        if (!this.usesSingleAssignment) {\n            copy.resourceId = null;\n        }\n        return copy;\n    }\n    /**\n     * Override persistable getter to prevent sending resourceId when using multiple resource assignment mode\n     * https://github.com/bryntum/support/issues/1345\n     * @private\n     */\n    get persistableData() {\n        const data = super.persistableData;\n        if (!this.usesSingleAssignment) {\n            delete data.resourceId;\n        }\n        return data;\n    }\n    /**\n     * Returns the first assigned resource, or assigns a resource\n     * @member {Scheduler.model.ResourceModel} resource\n     * @category Assignments & Resources\n     */\n    get resource() {\n        const { resources } = this;\n        return resources.length ? resources[0] : null;\n    }\n    set resource(resourceRecord) {\n        // Use the resourceId setter for single assignment\n        this.resourceId = this.constructor.asId(resourceRecord);\n    }\n    get resourceId() {\n        return this.usesSingleAssignment ? this.get('resourceId') : this.assignments[0]?.resourceId;\n    }\n    set resourceId(resourceId) {\n        this.applyResourceId(resourceId);\n    }\n    get resourceIds() {\n        if (this.fieldMap?.resourceIds.persist) {\n            return this.get('resourceIds');\n        }\n        else {\n            return this.resources?.map(r => r.id) ?? [];\n        }\n    }\n    set resourceIds(ids) {\n        this.set('resourceIds', ids);\n    }\n    // Resources + any links to any of them\n    get $linkedResources() {\n        return this.resources?.flatMap(resourceRecord => ([\n            resourceRecord,\n            ...resourceRecord.$links\n        ])) ?? [];\n    }\n    applyResourceId(resourceId, fromApplyValue = false) {\n        const\n            me                          = this,\n            { eventStore, assignments } = me;\n        // When part of an EventStore, resourceId are changed to be AssignmentModels\n        if (eventStore) {\n            // If not yet part of project, we cant resolve assignmentStore from ourselves\n            const assignmentStore = eventStore.assignmentStore || eventStore.crudManager?.assignmentStore;\n            if (resourceId != null) {\n                if (!me.meta.skipEnforcingSingleAssignment) {\n                    eventStore.usesSingleAssignment = true;\n                }\n                // Reassign if already assigned, only single assignment allowed\n                if (assignments?.length && resourceId !== assignments[0].resourceId) {\n                    //assignments[0].set('resourceId', resourceId, Boolean(me.eventStore.eventsSuspended));\n                    // Silent reassign if events are suspended on event store, won't be expecting UI update then\n                    const eventsSuspended = Boolean(eventStore.eventsSuspended);\n                    eventsSuspended && assignmentStore.suspendEvents();\n                    assignments[0].resource = resourceId;\n                    eventsSuspended && assignmentStore.resumeEvents();\n                }\n                // Otherwise assign\n                else {\n                    assignmentStore.assignEventToResource(me, resourceId);\n                }\n            }\n            // Setting resourceId to null removes all assignments, if resourceIds is not set\n            else if (me.usesSingleAssignment || me.resourceIds?.length) {\n                assignmentStore.remove(assignments);\n            }\n        }\n        // Not part of an EventStore, edge case. Set to data unless we are in such operation already\n        else if (!fromApplyValue) {\n            me.set({ resourceId });\n        }\n    }\n    applyResourceIds(resourceIds, fromApplyValue = false) {\n        const\n            me                          = this,\n            { eventStore, assignments } = me;\n        if (me.fieldMap['resourceIds'].persist === false) {\n            return false;\n        }\n        // Remove duplicated value\n        resourceIds = [...new Set(resourceIds)];\n        // When part of an EventStore, resourceIds are changed to be AssignmentModels\n        if (eventStore) {\n            // If not yet part of project, we cant resolve assignmentStore from ourselves\n            const assignmentStore = eventStore.assignmentStore || eventStore.crudManager?.assignmentStore;\n            if (resourceIds?.length) {\n                // If there are assignments, update them with new resourceIds. If resourceIds\n                // contains more elements than existing assignments, add new ones,\n                // otherwise remove excess assignments not used anymore\n                if (assignments?.length) {\n                    const eventsSuspended = Boolean(eventStore.eventsSuspended);\n                    eventsSuspended && assignmentStore.suspendEvents();\n                    assignments.forEach(assignment => {\n                        const resourceIdToUpdate = resourceIds.find(resourceId =>\n                            !assignments.some(a => a.resourceId === resourceId));\n                        if (resourceIdToUpdate) {\n                            assignment.resource = resourceIdToUpdate;\n                        }\n                    });\n                    const { onlyInA : toAdd, onlyInB: toRemove } = ArrayHelper.delta(resourceIds, assignments.map(assignment => assignment.resourceId));\n                    assignmentStore.add(toAdd.map(resourceId => ({ resource : resourceId, event : me })));\n                    assignmentStore.remove(toRemove.map(resourceId => assignments.find(a => a.resource.id === resourceId)));\n                    eventsSuspended && assignmentStore.resumeEvents();\n                }\n                // Otherwise assign\n                else {\n                    assignmentStore.add(resourceIds.map(resourceId => ({ resource : resourceId, event : me })));\n                }\n            }\n            else {\n                // Setting resourceIds to an empty list removes all assignments\n                assignmentStore.remove(assignments);\n            }\n        }\n        // Not part of an EventStore, edge case. Set to data unless we are in such operation already\n        else if (!fromApplyValue) {\n            me.set({ resourceIds });\n        }\n    }\n    // Special handling of setting resourceId and resourceIds, creates assignment\n    applyValue(useProp, mapping, value, skipAccessors, field) {\n        if (field && !this.meta.isAssigning) {\n            const { eventStore } = this;\n            switch (field.name) {\n                case 'resourceId':\n                    eventStore && (eventStore.isAssigning = true);\n                    this.applyResourceId(value, true);\n                    break;\n                case 'resourceIds':\n                    eventStore && (eventStore.isAssigning = true);\n                    this.applyResourceIds(value, true);\n                    break;\n            }\n            eventStore && (eventStore.isAssigning = false);\n        }\n        super.applyValue(useProp, mapping, value, skipAccessors, field);\n    }\n    //endregion\n    //region Assignment\n    /**\n     * Returns all assignments for the event. Event must be part of the store for this method to work.\n     * @property {Scheduler.model.AssignmentModel[]}\n     * @readonly\n     * @category Assignments & Resources\n     */\n    get assignments() {\n        return [...(this.assigned || [])];\n    }\n    /**\n     * Assigns this event to the specified resource.\n     *\n     * *Note:* The event must be part of an EventStore for this to work. If the EventStore uses single assignment\n     * (loaded using resourceId) existing assignments will always be removed.\n     *\n     * @param {Scheduler.model.ResourceModel|String|Number|Scheduler.model.ResourceModel[]|String[]|Number[]} resource A new resource for this event, either as a full\n     *        Resource record or an id (or an array of such).\n     * @param {Boolean} [removeExistingAssignments] `true` to first remove existing assignments\n     * @typings removeExistingAssignments -> {Boolean||Number}\n     * @category Assignments & Resources\n     * @typings async\n     */\n    assign(resource, removeExistingAssignments = false) {\n        const { eventStore } = this;\n        if (eventStore && !eventStore.usesSingleAssignment) {\n            eventStore.assignEventToResource(this, resource, removeExistingAssignments);\n        }\n        else {\n            // Remember what resource to assign,  directly in single assignment mode or for later when we are joined to\n            // an EventStore\n            this.resourceId = this.constructor.asId(resource);\n            if (!eventStore) {\n                // Prevent flagging EventStore as using single assignment when that happens, we cannot know that here\n                this.meta.skipEnforcingSingleAssignment = true;\n            }\n        }\n    }\n    /**\n     * Unassigns this event from the specified resource\n     *\n     * @param {Scheduler.model.ResourceModel|String|Number} [resource] The resource to unassign from.\n     * @category Assignments & Resources\n     * @typings async\n     */\n    unassign(resource, removingResource = false) {\n        const me = this;\n        resource = me.constructor.asId(resource);\n        // If unassigned is caused by removing the resource the UI should be able to find out to not do extra redraws etc.\n        me.meta.removingResource = removingResource;\n        me.eventStore?.unassignEventFromResource(me, resource);\n        me.meta.removingResource = null;\n    }\n    /**\n     * Reassigns an event from an old resource to a new resource\n     *\n     * @param {Scheduler.model.ResourceModel|String|Number} oldResourceId A resource to unassign from or its id\n     * @param {Scheduler.model.ResourceModel|String|Number} newResourceId A resource to assign to or its id\n     * @category Assignments & Resources\n     */\n    reassign(oldResourceId, newResourceId) {\n        this.eventStore && this.eventStore.reassignEventFromResourceToResource(this, oldResourceId, newResourceId);\n    }\n    /**\n     * Returns true if this event is assigned to a certain resource.\n     *\n     * @param {Scheduler.model.ResourceModel|String|Number} resource The resource to query for\n     * @returns {Boolean}\n     * @category Assignments & Resources\n     */\n    isAssignedTo(resource) {\n        const resourceId = this.constructor.asId(resource);\n        return this.assignments.some(assignment => assignment.resourceId === resourceId);\n    }\n    //endregion\n    //region Dependencies\n    /**\n     * Returns all predecessor dependencies of this event\n     *\n     * @readonly\n     * @property {Scheduler.model.DependencyBaseModel[]}\n     * @category Dependencies\n     */\n    get predecessors() {\n        return [...this.incomingDeps ?? []];\n    }\n    /**\n     * Returns all successor dependencies of this event\n     *\n     * @readonly\n     * @property {Scheduler.model.DependencyBaseModel[]}\n     * @category Dependencies\n     *\n     */\n    get successors() {\n        return [...this.outgoingDeps ?? []];\n    }\n    get dependencies() {\n        // Dependency feature listens for assignment changes pre commit, thus we risk deps not being set up yet\n        return [...this.incomingDeps ?? [], ...this.outgoingDeps ?? []];\n    }\n    //endregion\n    normalize() {\n        // Normalization handled by Engine\n    }\n    inSetNormalize() {\n        // Normalization handled by Engine\n    }\n    /**\n     * The \"main\" event this model is an occurrence of.\n     * Returns `null` for non-occurrences.\n     * @property {Scheduler.model.EventModel}\n     * @alias #Scheduler.model.mixin.RecurringTimeSpan#property-recurringTimeSpan\n     * @readonly\n     * @category Scheduling\n     */\n    get recurringEvent() {\n        return this.recurringTimeSpan;\n    }\n    /**\n     * Flag which indicates that this event is an interday event. This means that it spans\n     * an entire day or multiple days.\n     *\n     * This is essentially used by the Calendar package to determine if an event should\n     * go into the all day zone of a DayView.\n     *\n     * @property {Boolean}\n     * @readonly\n     * @category Scheduling\n     */\n    get isInterDay() {\n        const { durationMS } = this;\n        // A full day (86400000 or more) marks as it as interDay,\n        // which means it belongs in the all day row of a Calendar DayView\n        if (durationMS >= oneDayMS || (!durationMS && this.allDay)) {\n            return true;\n        }\n        // Working out whether it crosses midnight is a little more difficult\n        const\n            {\n                endDate,\n                startDate\n            } = this,\n            eventStartMidnight = DH.clearTime(startDate);\n        // If either is null or NaN, we have to answer falsy\n        if (startDate && endDate) {\n            eventStartMidnight.setDate(eventStartMidnight.getDate() + 1);\n            // If the endDate is past midnight, it's interDay and goes in the all day row of a Calendar DayView\n            return (endDate || DH.add(startDate, durationMS)) > eventStartMidnight;\n        }\n    }\n    //region All day statics\n    static getAllDayStartDate(dt) {\n        if (dt && dt.isEvent) {\n            dt = dt.get('startDate');\n        }\n        if (dt) {\n            dt = DH.clearTime(dt, true);\n        }\n        return dt;\n    }\n    static getAllDayEndDate(dt) {\n        if (dt && dt.isEvent) {\n            dt = dt.get('endDate');\n        }\n        if (dt && (dt.getHours() > 0 || dt.getMinutes() > 0 || dt.getSeconds() > 0 || dt.getMilliseconds() > 0)) {\n            dt = DH.getNext(dt, 'd', 1);\n        }\n        return dt;\n    }\n    static getAllDayDisplayStartDate(dt) {\n        if (dt && dt.isEvent) {\n            dt = dt.get('startDate');\n        }\n        return DH.clearTime(dt, true);\n    }\n    static getAllDayDisplayEndDate(startDate, endDate) {\n        if (startDate && startDate.isEvent) {\n            endDate   = startDate.get('endDate');\n            startDate = startDate.get('startDate');\n        }\n        if (endDate) {\n            startDate = this.constructor.getAllDayDisplayStartDate(startDate);\n            // If date falls on start of the day - subtract one day to show end date correctly\n            // e.g. event starts on 2017-01-01 00:00 and ends on 2017-01-02 00:00, editor should show\n            // 2017-01-01 for both start and end\n            if (DH.clearTime(endDate, true).valueOf() === endDate.valueOf()) {\n                endDate = DH.add(endDate, DH.DAY, -1);\n            }\n            else if (startDate.valueOf() !== endDate.valueOf()) {\n                endDate = DH.clearTime(endDate, true);\n            }\n        }\n        return endDate;\n    }\n    /**\n     * Defines if the given event field should be manually editable in UI.\n     * You can override this method to provide your own logic.\n     *\n     * By default, the method defines {@link #field-endDate}, {@link #field-duration} and {@link #field-fullDuration}\n     * fields editable for leaf events only (in case the event is part of a tree store) and all other fields as\n     * editable.\n     *\n     * @param {String} fieldName Name of the field\n     * @returns {Boolean} Returns `true` if the field is editable, `false` if it is not and `undefined` if the event has\n     * no such field.\n     * @category Editing\n     */\n    isEditable(fieldName) {\n        switch (fieldName) {\n            // end/duration is allowed to edit for leafs\n            case 'endDate' :\n            case 'duration' :\n            case 'fullDuration' :\n                return this.isLeaf;\n        }\n        return super.isEditable(fieldName);\n    }\n    //endregion\n};\n", "import { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { CorePartOfProjectModelMixin } from \"../mixin/CorePartOfProjectModelMixin.js\";\nimport DateHelper from \"../../../../Core/helper/DateHelper.js\";\n/**\n * Core event entity mixin type.\n *\n * At this level event is only aware about its dates\n * The functionality, related to the assignments etc is provided in other mixins.\n */\nexport class CoreEventMixin extends Mixin([CorePartOfProjectModelMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreEventMixin extends base {\n        constructor() {\n            super(...arguments);\n            this._startDate = null;\n            this._endDate = null;\n            this._duration = null;\n        }\n        // Proper engine defines these fields since they enter graph, thus we need them\n        static get fields() {\n            return [\n                { name: 'startDate', type: 'date' },\n                { name: 'endDate', type: 'date' },\n                { name: 'duration', type: 'number' },\n                { name: 'durationUnit', type: 'durationunit', defaultValue: 'day' }\n            ];\n        }\n        // Getters return current or proposed value\n        get startDate() { return this._startDate ?? this.get('startDate') ?? null; }\n        get endDate() { return this._endDate ?? this.get('endDate') ?? null; }\n        get duration() { return this._duration ?? this.get('duration') ?? null; }\n        // Route all setting through applyXX (setStartDate, startDate = , set('startDate'), batching)\n        set startDate(value) { this.proposeStartDate(value); }\n        set endDate(value) { this.proposeEndDate(value); }\n        set duration(value) { this.proposeDuration(value); }\n        //region Edge case normalization\n        inSet(field, value, silent, fromRelationUpdate, skipAccessors) {\n            const me = this;\n            // Catch \"normal\" set calls\n            if (me.project && !me.project.isWritingData && typeof field !== 'string' && !skipAccessors) {\n                // Flag fields as changed even if we are given a no-change value, to let calculations take decision on\n                // whether to keep duration or not\n                if ('startDate' in field && !('startDate' in me.$changed)) {\n                    me.$changed.startDate = true;\n                    me.invalidate();\n                }\n                if ('endDate' in field && !('endDate' in me.$changed)) {\n                    me.$changed.endDate = true;\n                    me.invalidate();\n                }\n            }\n            // @ts-ignore\n            return superProto.inSet.call(me, field, value, silent, fromRelationUpdate, skipAccessors);\n        }\n        //endregion\n        //region StartDate\n        getStartDate() {\n            return this.startDate;\n        }\n        proposeStartDate(startDate, keepDuration = !('endDate' in this.$changed)) {\n            if (this.inSetting || startDate?.getTime() !== this.startDate?.getTime()) {\n                this._startDate = startDate;\n                this.propose({ startDate, keepDuration });\n            }\n        }\n        async setStartDate(startDate, keepDuration = true) {\n            this.proposeStartDate(startDate, keepDuration);\n            return this.project?.commitAsync();\n        }\n        //endregion\n        //region EndDate\n        getEndDate() {\n            return this.endDate;\n        }\n        proposeEndDate(endDate, keepDuration = false) {\n            if (this.inSetting || endDate?.getTime() !== this.endDate?.getTime()) {\n                this._endDate = endDate;\n                this.propose({ endDate, keepDuration });\n            }\n        }\n        async setEndDate(endDate, keepDuration = false) {\n            this.proposeEndDate(endDate, keepDuration);\n            return this.project?.commitAsync();\n        }\n        //endregion\n        //region Duration\n        getDuration() {\n            return this.duration;\n        }\n        proposeDuration(duration, unit, keepStart = true) {\n            this._duration = duration;\n            this.propose({ duration, keepStart });\n            if (unit)\n                this.propose({ durationUnit: unit });\n        }\n        async setDuration(duration, unit, keepStart = true) {\n            this.proposeDuration(duration, unit, keepStart);\n            return this.project?.commitAsync();\n        }\n        getDurationUnit() {\n            return this.durationUnit;\n        }\n        //endregion\n        // When joining as part of inline data, store is available. If joining through load, it is passed\n        joinProject() {\n            const me = this;\n            const changed = me.$changed;\n            const startDate = me.getCurrentOrProposed('startDate');\n            const endDate = me.getCurrentOrProposed('endDate');\n            const duration = me.getCurrentOrProposed('duration');\n            // Initial values should be considered changed, to be normalized\n            if (startDate != null)\n                changed.startDate = me._startDate = startDate;\n            if (endDate != null)\n                changed.endDate = me._endDate = endDate;\n            if (duration != null)\n                changed.duration = me._duration = duration;\n            // Resolve assignments when event joins project after load\n            if (me.eventStore && !me.eventStore.isLoadingData) {\n                const unresolved = me.assignmentStore?.storage.findItem('event', null);\n                if (unresolved) {\n                    // To avoid n\u00B2 iterations over raw assignments we cache them by raw eventId, which saves us\n                    // some iterations over the storage\n                    // https://github.com/bryntum/support/issues/3141\n                    const cachedAssignments = me.assignmentStore?.storage.findItem('eventId', me.id);\n                    if (cachedAssignments) {\n                        for (const assignment of cachedAssignments) {\n                            assignment.setChanged('event', me);\n                        }\n                    }\n                    else {\n                        for (const assignment of unresolved) {\n                            if (assignment.getCurrentOrProposed('event') === me.id) {\n                                assignment.setChanged('event', me);\n                            }\n                        }\n                    }\n                }\n            }\n            superProto.joinProject.call(me);\n        }\n        // Mimic how proper engine applies values\n        applyValue(useProp, key, value, skipAccessors, field) {\n            // @ts-ignore\n            if ((this.project || this.recurringTimeSpan?.project) && field) {\n                const { name } = field;\n                if (name === 'startDate' || name == 'duration' || name === 'endDate') {\n                    useProp = true;\n                    // Update cached value\n                    this['_' + name] = value;\n                }\n                if (skipAccessors) {\n                    useProp = false;\n                }\n            }\n            superProto.applyValue.call(this, useProp, key, value, skipAccessors, field);\n        }\n        // Catch changes from batches etc. In which case it is sometimes expected for data to be available directly\n        afterChange(toSet, wasSet, silent, fromRelationUpdate, skipAccessors) {\n            if (!this.$isCalculating && !skipAccessors) {\n                // In certain scenarios data is expected to be available of the bat, messy!\n                this.setData({\n                    startDate: this.getCurrentOrProposed('startDate'),\n                    endDate: this.getCurrentOrProposed('endDate'),\n                    duration: this.getCurrentOrProposed('duration'),\n                    durationUnit: this.getCurrentOrProposed('durationUnit')\n                });\n            }\n            superProto.afterChange.call(this, toSet, wasSet, silent, fromRelationUpdate, skipAccessors);\n        }\n        // Normalizes dates & duration\n        calculateInvalidated() {\n            const me = this;\n            const changed = me.$changed;\n            const changedStart = 'startDate' in changed;\n            const changedEnd = 'endDate' in changed;\n            const changedDuration = 'duration' in changed;\n            const { startDate, endDate, duration, keepDuration, keepStart } = changed;\n            let calculate = null;\n            // Only start changed\n            if (changedStart && !changedEnd && !changedDuration) {\n                // Also null end when nulling start (keeping duration)\n                if (startDate === null) {\n                    changed.endDate = null;\n                }\n                // Start after end without keeping duration -> move end to start\n                else if (me.hasCurrentOrProposed('endDate') && startDate > me.getCurrentOrProposed('endDate') && !keepDuration) {\n                    changed.endDate = startDate;\n                    changed.duration = 0;\n                }\n                // Start changed and we either have a duration that we want to keep or no end -> calculate end\n                else if (me.hasCurrentOrProposed('duration') && (keepDuration || !me.hasCurrentOrProposed('endDate'))) {\n                    calculate = 'endDate';\n                }\n                // Start change and we have an end already -> calculate duration\n                else if (me.hasCurrentOrProposed('endDate')) {\n                    calculate = 'duration';\n                }\n            }\n            // Only end changed\n            else if (!changedStart && changedEnd && !changedDuration) {\n                // Also null start when nulling end (keeping duration)\n                if (endDate === null) {\n                    changed.startDate = null;\n                }\n                // End before start without keeping duration -> move start to end\n                else if (me.hasCurrentOrProposed('startDate') && !keepDuration && endDate !== true && endDate < me.getCurrentOrProposed('startDate')) {\n                    changed.startDate = endDate;\n                    changed.duration = 0;\n                }\n                // End changed and we either have a duration that we want to keep or no start -> calculate start\n                else if (me.hasCurrentOrProposed('duration') && (keepDuration || !me.hasCurrentOrProposed('startDate'))) {\n                    calculate = 'startDate';\n                }\n                // End changed and we have a start already -> calculate duration\n                else if (me.hasCurrentOrProposed('startDate')) {\n                    calculate = 'duration';\n                }\n            }\n            // Only duration changed\n            else if (!changedStart && !changedEnd && changedDuration) {\n                // Also null end when nulling duration (keeping start)\n                if (duration === null) {\n                    changed.endDate = null;\n                }\n                // Duration changed and we either have a start that we want to keep or no end -> calculate end\n                else if (me.hasCurrentOrProposed('startDate') && (keepStart || !me.hasCurrentOrProposed('endDate'))) {\n                    if (keepStart && changed.duration < 0) {\n                        changed.duration = 0;\n                    }\n                    calculate = 'endDate';\n                }\n                // Duration changed and we have an end already -> calculate start\n                else if (me.hasCurrentOrProposed('endDate')) {\n                    calculate = 'startDate';\n                }\n            }\n            // Start and end change, affect duration\n            else if (changedStart && changedEnd && !changedDuration) {\n                // Both nulled, null duration\n                if (startDate === null && endDate === null) {\n                    changed.duration = null;\n                }\n                // Other cases -> calculate duration\n                else {\n                    calculate = 'duration';\n                }\n            }\n            // Start and duration change -> calculate end\n            else if (changedStart && !changedEnd && changedDuration) {\n                calculate = 'endDate';\n            }\n            // End and duration changed -> calculate start\n            else if (!changedStart && changedEnd && changedDuration) {\n                calculate = 'startDate';\n            }\n            // All changed -> calculate whichever is null or by default end to be sure things add up\n            else if (changedStart && changedEnd && changedDuration) {\n                if (duration == null) {\n                    calculate = 'duration';\n                }\n                else if (startDate == null) {\n                    calculate = 'startDate';\n                }\n                else {\n                    calculate = 'endDate';\n                }\n            }\n            // Normalize if needed\n            const currentOrProposedStartDate = me.getCurrentOrProposed('startDate');\n            const currentOrProposedEndDate = me.getCurrentOrProposed('endDate');\n            const currentOrProposedDuration = me.getCurrentOrProposed('duration');\n            const currentOrProposedDurationUnit = me.getCurrentOrProposed('durationUnit');\n            const adjustDurationToDST = me.getProject()?.adjustDurationToDST ?? false;\n            switch (calculate) {\n                case 'startDate':\n                    const newStartDate = DateHelper.add(currentOrProposedEndDate, -currentOrProposedDuration, currentOrProposedDurationUnit);\n                    if (adjustDurationToDST) {\n                        const dstDiff = currentOrProposedEndDate.getTimezoneOffset() - newStartDate.getTimezoneOffset();\n                        newStartDate.setTime(newStartDate.getTime() - dstDiff * 60 * 1000);\n                    }\n                    changed.startDate = newStartDate;\n                    break;\n                case 'endDate':\n                    const newEndDate = DateHelper.add(currentOrProposedStartDate, currentOrProposedDuration, currentOrProposedDurationUnit);\n                    if (adjustDurationToDST) {\n                        const dstDiff = currentOrProposedStartDate.getTimezoneOffset() - newEndDate.getTimezoneOffset();\n                        newEndDate.setTime(newEndDate.getTime() - dstDiff * 60 * 1000);\n                    }\n                    changed.endDate = newEndDate;\n                    break;\n                case 'duration':\n                    let newDuration = DateHelper.diff(currentOrProposedStartDate, currentOrProposedEndDate, 'millisecond');\n                    if (adjustDurationToDST) {\n                        const dstDiff = currentOrProposedStartDate.getTimezoneOffset() - currentOrProposedEndDate.getTimezoneOffset();\n                        newDuration += dstDiff * 60 * 1000;\n                    }\n                    changed.duration = DateHelper.as(currentOrProposedDurationUnit, newDuration, 'millisecond');\n                    break;\n            }\n            if ('startDate' in changed && changed.startDate !== true)\n                this._startDate = changed.startDate;\n            if ('endDate' in changed && changed.endDate !== true)\n                this._endDate = changed.endDate;\n            if ('duration' in changed && changed.duration !== true)\n                this._duration = changed.duration;\n            // Clean up flags, not intended to be actually set\n            if (changed.startDate === true)\n                delete changed.startDate;\n            if (changed.endDate === true)\n                delete changed.endDate;\n            delete changed.keepDuration;\n            delete changed.keepStart;\n        }\n    }\n    return CoreEventMixin;\n}) {\n}\n", "import { Mixin } from \"../../../ChronoGraph/class/Mixin.js\";\nimport { AbstractPartOfProjectModelMixin } from './mixin/AbstractPartOfProjectModelMixin.js';\n/**\n * This is a mixin enabling events to handle assignments. It is mixed by CoreHasAssignmentsMixin and\n * BaseHasAssignmentsMixin. It provides a collection of all assignments, which reference this event.\n *\n * Doesn't affect scheduling.\n */\nexport class AbstractHasAssignmentsMixin extends Mixin([AbstractPartOfProjectModelMixin], (base) => {\n    const superProto = base.prototype;\n    class HasAssignmentsMixin extends base {\n        /**\n         * If a given resource is assigned to this task, returns a [[BaseAssignmentMixin]] instance for it.\n         * Otherwise returns `null`\n         */\n        getAssignmentFor(resource) {\n            // Bucket `assigned` might not be set up yet when using delayed calculations\n            for (const assignment of this.assigned ?? []) {\n                if (assignment.resource === resource)\n                    return assignment;\n            }\n            return null;\n        }\n        isAssignedTo(resource) {\n            return Boolean(this.getAssignmentFor(resource));\n        }\n        /**\n         * A method which assigns a resource to the current event\n         */\n        async assign(resource) {\n            const assignmentCls = this.project.assignmentStore.modelClass;\n            this.addAssignment(new assignmentCls({\n                event: this,\n                resource: resource\n            }));\n            return this.commitAsync();\n        }\n        /**\n         * A method which unassigns a resource from the current event\n         */\n        async unassign(resource) {\n            const assignment = this.getAssignmentFor(resource);\n            this.removeAssignment(assignment);\n            return this.commitAsync();\n        }\n        leaveProject() {\n            // `this.assigned` will be empty if model is added to project and then removed immediately\n            // w/o any propagations\n            // @ts-ignore\n            if (this.isInActiveTransaction && this.assigned) {\n                const eventStore = this.getEventStore();\n                // to batch the assignments removal, we don't remove the assignments right away, but instead\n                // add them for the batched removal to the `assignmentsForRemoval` property of the event store\n                this.assigned.forEach(assignment => eventStore.assignmentsForRemoval.add(assignment));\n            }\n            superProto.leaveProject.call(this, ...arguments);\n        }\n        remove() {\n            if (this.parent) {\n                // need to get the event store in advance, because after removal the project reference will be cleared (all that is what provide\n                // references to all stores\n                const eventStore = this.getEventStore();\n                superProto.remove.call(this);\n                eventStore && eventStore.afterEventRemoval();\n            }\n            else {\n                return superProto.remove.call(this);\n            }\n        }\n        // template methods, overridden in scheduling modes mixins\n        // should probably be named something like \"onEventAssignmentAdded\"\n        // should be a listener for the `add` event of the assignment store instead\n        addAssignment(assignment) {\n            this.getProject().assignmentStore.add(assignment);\n            return assignment;\n        }\n        // should be a listener for the `remove` event of the assignment store instead\n        removeAssignment(assignment) {\n            this.getProject().assignmentStore.remove(assignment);\n            return assignment;\n        }\n    }\n    return HasAssignmentsMixin;\n}) {\n}\n", "import { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { CoreEventMixin } from \"./CoreEventMixin.js\";\nimport ObjectHelper from \"../../../../Core/helper/ObjectHelper.js\";\nimport { AbstractHasAssignmentsMixin } from '../AbstractHasAssignmentsMixin.js';\n/**\n * This is a mixin, which can be applied to the [[CoreEventMixin]]. It provides the collection of all assignments,\n * which reference this event.\n *\n * Doesn't affect scheduling.\n */\nexport class CoreHasAssignmentsMixin extends Mixin([CoreEventMixin, AbstractHasAssignmentsMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreHasAssignmentsMixin extends base {\n        get assigned() {\n            return this.project?.assignmentStore.getEventsAssignments(this) ?? this.$cachedAssignments;\n        }\n        leaveProject(isReplacing = false) {\n            // Expected to still be able to return assignments when removed from project\n            this.$cachedAssignments = this.assigned;\n            super.leaveProject(isReplacing);\n        }\n        applyValue(useProp, key, value, skipAccessor, field) {\n            // Changing id on an event should update resourceId on its assignments\n            if (key === 'id') {\n                this.assigned?.forEach(assignment => assignment.set('eventId', value));\n            }\n            superProto.applyValue.call(this, useProp, key, value, skipAccessor, field);\n        }\n        copy(newId = null, deep = null) {\n            const copy = superProto.copy.call(this, newId, deep);\n            // If deep is everything but object - use default behavior, which is to invoke accessors\n            // If deep is an object, check if it has certain field disabled\n            if ((ObjectHelper.isObject(deep) && !deep.skipFieldIdentifiers) || !ObjectHelper.isObject(deep)) {\n                // Copy current assignments, used for occurrences\n                copy.$cachedAssignments = this.assigned;\n            }\n            return copy;\n        }\n    }\n    return CoreHasAssignmentsMixin;\n}) {\n}\n", "import { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { CoreEventMixin } from \"./CoreEventMixin.js\";\n/**\n * This is a mixin, which can be applied to the [[CoreEventMixin]]. It provides the collection of all dependencies,\n * which reference this event.\n *\n * Doesn't affect scheduling.\n */\nexport class CoreHasDependenciesMixin extends Mixin([CoreEventMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreHasDependenciesMixin extends base {\n        get outgoingDeps() {\n            return this.project.dependencyStore.getOutgoingDepsForEvent(this);\n        }\n        get incomingDeps() {\n            return this.project.dependencyStore.getIncomingDepsForEvent(this);\n        }\n        leaveProject() {\n            const eventStore = this.eventStore;\n            // the buckets may be empty if a model is removed from the project immediately after adding\n            // (without propagation)\n            if (this.outgoingDeps) {\n                this.outgoingDeps.forEach(dependency => eventStore.dependenciesForRemoval.add(dependency));\n            }\n            if (this.incomingDeps) {\n                this.incomingDeps.forEach(dependency => eventStore.dependenciesForRemoval.add(dependency));\n            }\n            superProto.leaveProject.call(this);\n        }\n    }\n    return CoreHasDependenciesMixin;\n}) {\n}\n", "import { Mixin } from '../../../../ChronoGraph/class/BetterMixin.js';\nimport { CoreEventMixin } from './CoreEventMixin.js';\nimport { CoreHasAssignmentsMixin } from \"./CoreHasAssignmentsMixin.js\";\nimport { CoreHasDependenciesMixin } from './CoreHasDependenciesMixin.js';\n/**\n * This is an event class, [[SchedulerCoreProjectMixin]] is working with.\n * It is constructed as [[CoreEventMixin]], enhanced with [[CoreHasAssignmentsMixin]] and [[CoreHasDependenciesMixin]]\n */\nexport class SchedulerCoreEvent extends Mixin([\n    CoreEventMixin,\n    CoreHasAssignmentsMixin,\n    CoreHasDependenciesMixin\n], (base) => {\n    const superProto = base.prototype;\n    class SchedulerCoreEvent extends base {\n    }\n    return SchedulerCoreEvent;\n}) {\n}\n", "import TimeSpan from './TimeSpan.js';\nimport RecurringTimeSpan from './mixin/RecurringTimeSpan.js';\nimport EventModelMixin from './mixin/EventModelMixin.js';\nimport PartOfProject from '../data/mixin/PartOfProject.js';\nimport { SchedulerCoreEvent } from '../../Engine/quark/model/scheduler_core/SchedulerCoreEvent.js';\nconst EngineMixin = SchedulerCoreEvent;\n/**\n * @module Scheduler/model/EventModel\n */\n/**\n * This class represent a single event in your schedule, usually added to a {@link Scheduler.data.EventStore}.\n *\n * It is a subclass of the {@link Scheduler.model.TimeSpan}, which is in turn subclass of {@link Core.data.Model}.\n * Please refer to documentation of that class to become familiar with the base interface of the event.\n *\n * ## Async date calculations\n *\n * A record created from an {@link Scheduler/model/EventModel} is normally part of an {@link Scheduler.data.EventStore},\n * which in turn is part of a project. When dates or the duration of an event is changed, the project performs async calculations\n * to normalize the other fields.\n * For example if {@link #field-duration} is changed, it will calculate {@link #field-endDate}.\n *\n * As a result of this being an async operation, the values of other fields are not guaranteed to be up to date\n * immediately after a change. To ensure data is up to date, await the calculations to finish.\n *\n * For example, {@link #field-endDate} is not up to date after this operation:\n *\n * ```javascript\n * eventRecord.duration = 5;\n * // endDate not yet calculated\n * ```\n *\n * But if calculations are awaited it is up to date:\n *\n * ```javascript\n * eventRecord.duration = 5;\n * await eventRecord.project.commitAsync();\n * // endDate is calculated\n * ```\n *\n * As an alternative, you can also use `setAsync()` to trigger calculations directly after the change:\n *\n * ```javascript\n * await eventRecord.setAsync({ duration : 5});\n * // endDate is calculated\n * ```\n *\n * ## Subclassing the Event model class\n * The Event model has a few predefined fields as seen below. If you want to add new fields or change the options for the existing fields,\n * you can do that by subclassing this class (see example below).\n *\n * ```javascript\n * class MyEvent extends EventModel {\n *\n *     static get fields() {\n *         return [\n *            // Add new field\n *            { name: 'myField', type : 'number', defaultValue : 0 }\n *         ];\n *     },\n *\n *     myCheckMethod() {\n *         return this.myField > 0\n *     },\n *\n *     ...\n * });\n * ```\n *\n * If you in your data want to use other names for the {@link #field-startDate}, {@link #field-endDate}, {@link #field-resourceId} and name fields you can configure\n * them as seen below:\n *\n * ```javascript\n * class MyEvent extends EventModel {\n *\n *     static get fields() {\n *         return [\n *            { name: 'startDate', dataSource : 'taskStart' },\n *            { name: 'endDate', dataSource : 'taskEnd', format: 'YYYY-MM-DD' },\n *            { name: 'resourceId', dataSource : 'userId' },\n *            { name: 'name', dataSource : 'taskTitle' },\n *         ];\n *     },\n *     ...\n * });\n * ```\n *\n * Please refer to {@link Core.data.Model} for additional details.\n *\n * @extends Scheduler/model/TimeSpan\n * @mixes Scheduler/model/mixin/RecurringTimeSpan\n * @mixes Scheduler/model/mixin/EventModelMixin\n */\nexport default class EventModel extends EngineMixin.derive(TimeSpan).mixin(\n    RecurringTimeSpan,\n    PartOfProject,\n    EventModelMixin\n) {\n    static get $name() {\n        return 'EventModel';\n    }\n}\nEventModel.exposeProperties();\nEventModel._$name = 'EventModel';", "import DayTime from '../../../Core/util/DayTime.js';\nimport EventDayIndex from '../util/EventDayIndex.js';\n/**\n * @module Scheduler/data/mixin/DayIndexMixin\n */\nconst { MIDNIGHT } = DayTime;\n/**\n * Mixing handling Calendars day indices.\n *\n * Consumed by EventStore in Scheduler & Scheduler Pro and TaskStore in Gantt.\n *\n * @mixin\n * @internal\n */\nexport default Target => class DayIndexMixin extends Target {\n    static $name = 'DayIndexMixin';\n    construct(config) {\n        super.construct(config);\n        this.dayIndices = null;\n    }\n    //region Keeping index in sync\n    // Override to syncIndices on initial load\n    afterLoadData() {\n        this.syncIndices('splice', this.storage.allValues);\n        super.afterLoadData?.();\n    }\n    /**\n     * Responds to mutations of the underlying storage Collection.\n     *\n     * Maintain indices for fast finding of events by date.\n     * @param {Object} event\n     * @private\n     */\n    onDataChange({ action, added, removed, replaced }) {\n        // Indices must be synced before responding to change\n        this.syncIndices(action, added, removed, replaced);\n        super.onDataChange(...arguments);\n    }\n    onDataReplaced(action, data) {\n        // Indices must be synced before responding to change\n        this.syncIndices('clear');\n        this.syncIndices('splice', this.storage.values);\n        super.onDataReplaced(action, data);\n    }\n    onModelChange(record, toSet, wasSet, silent, fromRelationUpdate) {\n        // Ensure by-date indices are up to date.\n        if (('startDate' in wasSet) || ('endDate' in wasSet)) {\n            this.syncIndices('reschedule', [record], null, null, wasSet);\n        }\n        super.onModelChange(...arguments);\n    }\n    //endregion\n    //region Index\n    /**\n     * Invalidates associated day indices.\n     * @internal\n     */\n    invalidateDayIndices() {\n        this.dayIndices?.forEach(dayIndex => dayIndex.invalidate());\n    }\n    /**\n     * Registers a `DayTime` instance, creating an `EventDayIndex` for each distinct `startShift`. This index is\n     * maintained until all instances with a matching `startShift` are {@link #function-unregisterDayIndex unregistered}.\n     * @param {Core.util.DayTime} dayTime The instance to register.\n     * @internal\n     * @category Indexing\n     */\n    registerDayIndex(dayTime) {\n        const\n            me = this,\n            dayIndices = me.dayIndices || (me.dayIndices = []);\n        let dayIndex, i;\n        for (i = 0; !dayIndex && i < dayIndices.length; ++i) {\n            if (dayIndices[i].matches(dayTime)) {\n                (dayIndex = dayIndices[i]).register(dayTime);\n            }\n        }\n        !dayIndex && dayIndices.push(dayIndex = new EventDayIndex(me, dayTime));\n        return dayIndex;\n    }\n    syncIndices(...args) {\n        this.dayIndices?.forEach(dayIndex => dayIndex.sync(...args));\n    }\n    /**\n     * Removes a registered `DayTime` instance. If this is the last instance registered to an `EventDayIndex`, that\n     * index is removed.\n     * @param {Core.util.DayTime} dayTime The instance to unregister.\n     * @internal\n     * @category Indexing\n     */\n    unregisterDayIndex(dayTime) {\n        const\n            me = this,\n            { dayIndices } = me;\n        for (let i = dayIndices?.length; i-- > 0; /* empty */) {\n            if (dayIndices[i].matches(dayTime)) {\n                if (dayIndices[i].unregister(dayTime)) {\n                    dayIndices.splice(i, 1);\n                }\n                break;\n            }\n        }\n    }\n    /**\n     * Returns the `EventDayIndex` to use for the given `DayTime` instance. This may be the primary instance or a\n     * child instance created by {@link #function-registerDayIndex}.\n     * @param {Core.util.DayTime} dayTime The `DayTime` of the desired index.\n     * @returns {Scheduler.data.util.EventDayIndex}\n     * @private\n     * @category Indexing\n     */\n    useDayIndex(dayTime) {\n        const\n            me             = this,\n            { dayIndices } = me;\n        dayTime = dayTime || MIDNIGHT;\n        for (let i = 0; dayIndices && i < dayIndices.length; ++i) {\n            if (dayIndices[i].matches(dayTime)) {\n                return dayIndices[i];\n            }\n        }\n        if (dayTime.startShift) {\n            throw new Error(`No day index registered for ${dayTime} on ${me.id}`);\n        }\n        return me.registerDayIndex(MIDNIGHT);\n    }\n    //endregion\n};\n", "import { Mixin } from \"../../../ChronoGraph/class/Mixin.js\";\nimport { AbstractPartOfProjectStoreMixin } from \"./mixin/AbstractPartOfProjectStoreMixin.js\";\nconst dataAddRemoveActions = {\n    splice: 1,\n    clear: 1\n};\n// Shared functionality for CoreEventStore & ChronoEventStore\nexport class AbstractEventStoreMixin extends Mixin([AbstractPartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class AbstractEventStoreMixin extends base {\n        constructor() {\n            super(...arguments);\n            this.assignmentsForRemoval = new Set();\n            this.dependenciesForRemoval = new Set();\n        }\n        // we need `onDataChange` for `syncDataOnLoad` option to work\n        onDataChange(event) {\n            // remove from a filter action must be ignored.\n            const isAddRemove = dataAddRemoveActions[event.action];\n            super.onDataChange(event);\n            if (isAddRemove && event.removed?.length)\n                this.afterEventRemoval();\n        }\n        // it seems `onDataChange` is not triggered for `remove` with `silent` flag\n        remove(records, silent) {\n            const res = superProto.remove.call(this, records, silent);\n            this.afterEventRemoval();\n            return res;\n        }\n        // it seems `onDataChange` is not triggered for `TreeStore#removeAll()`\n        removeAll(silent) {\n            const res = superProto.removeAll.call(this, silent);\n            this.afterEventRemoval();\n            return res;\n        }\n        onNodeRemoveChild(parent, children, index, flags) {\n            // @ts-ignore\n            const removed = superProto.onNodeRemoveChild.call(this, ...arguments);\n            this.afterEventRemoval();\n            return removed;\n        }\n        afterEventRemoval() {\n            const { assignmentsForRemoval, dependenciesForRemoval } = this;\n            // Can be called from `set data` during construction\n            if (!assignmentsForRemoval)\n                return;\n            // ORDER IS IMPORTANT!\n            // First remove assignments\n            const assignmentStore = this.getAssignmentStore();\n            if (assignmentStore && !assignmentStore.allAssignmentsForRemoval && assignmentsForRemoval.size) {\n                const toRemove = [...assignmentsForRemoval].filter(assignment => !assignmentStore.assignmentsForRemoval.has(assignment));\n                toRemove.length > 0 && assignmentStore.remove(toRemove);\n            }\n            assignmentsForRemoval.clear();\n            // Then remove dependencies\n            const dependencyStore = this.getDependencyStore();\n            if (dependencyStore && !dependencyStore.allDependenciesForRemoval && dependenciesForRemoval.size) {\n                const toRemove = [...dependenciesForRemoval].filter(dependency => !dependencyStore.dependenciesForRemoval.has(dependency));\n                toRemove.length > 0 && dependencyStore.remove(toRemove);\n            }\n            dependenciesForRemoval.clear();\n        }\n        processRecord(eventRecord, isDataset = false) {\n            if (!this.project?.isRepopulatingStores) {\n                const existingRecord = this.getById(eventRecord.id);\n                const isReplacing = existingRecord && existingRecord !== eventRecord;\n                //@ts-ignore\n                if (isReplacing && existingRecord.assigned) {\n                    //@ts-ignore\n                    for (const assignment of existingRecord.assigned) {\n                        assignment.event = eventRecord;\n                    }\n                }\n            }\n            return eventRecord;\n        }\n    }\n    return AbstractEventStoreMixin;\n}) {\n}\n", "import { Mixin } from \"../../../ChronoGraph/class/BetterMixin.js\";\nimport { SchedulerCoreEvent } from \"../model/scheduler_core/SchedulerCoreEvent.js\";\nimport { CorePartOfProjectStoreMixin } from \"./mixin/CorePartOfProjectStoreMixin.js\";\nimport { AbstractEventStoreMixin } from \"./AbstractEventStoreMixin.js\";\n/**\n * A store mixin class, that represent collection of all events in the [[SchedulerCoreProjectMixin|project]].\n */\nexport class CoreEventStoreMixin extends Mixin([AbstractEventStoreMixin, CorePartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreEventStoreMixin extends base {\n        static get defaultConfig() {\n            return {\n                modelClass: SchedulerCoreEvent\n            };\n        }\n        joinProject() {\n            this.assignmentStore?.linkAssignments(this, 'event');\n        }\n        afterLoadData() {\n            this.afterEventRemoval();\n            this.assignmentStore?.linkAssignments(this, 'event');\n        }\n    }\n    return CoreEventStoreMixin;\n}) {\n}\n// /**\n//  * The tree store version of [[EventStoreMixin]].\n//  */\n// export class EventTreeStoreMixin extends Mixin(\n//     [ EventStoreMixin ],\n//     (base : AnyConstructor<EventStoreMixin, typeof EventStoreMixin>) => {\n//\n//     const superProto : InstanceType<typeof base> = base.prototype\n//\n//\n//         class EventTreeStoreMixin extends base {\n//             rootNode            : SchedulerBasicProjectMixin\n//\n//             buildRootNode () : object {\n//                 return this.getProject() || {}\n//             }\n//\n//\n//             static get defaultConfig () : object {\n//                 return {\n//                     tree        : true\n//                 }\n//             }\n//         }\n//\n//         return EventTreeStoreMixin\n//     }){}\n//\n", "import AjaxStore from '../../Core/data/AjaxStore.js';\nimport EventStoreMixin from './mixin/EventStoreMixin.js';\nimport GetEventsMixin from './mixin/GetEventsMixin.js';\nimport DayIndexMixin from './mixin/DayIndexMixin.js';\nimport RecurringEventsMixin from './mixin/RecurringEventsMixin.js';\nimport EventModel from '../model/EventModel.js';\nimport PartOfProject from './mixin/PartOfProject.js';\nimport { CoreEventStoreMixin } from '../../Engine/quark/store/CoreEventStoreMixin.js';\nimport PartOfBaseProject from './mixin/PartOfBaseProject.js';\nconst EngineMixin = PartOfProject(CoreEventStoreMixin.derive(AjaxStore));\n/**\n * @module Scheduler/data/EventStore\n */\n/**\n * A store holding all the {@link Scheduler.model.EventModel events} to be rendered into a {@link Scheduler.view.Scheduler Scheduler}.\n *\n * This store only accepts a model class inheriting from {@link Scheduler.model.EventModel}.\n *\n * An EventStore is usually connected to a project, which binds it to other related stores (AssignmentStore,\n * ResourceStore and DependencyStore). The project also handles normalization/calculation of the data on the records in\n * the store. For example if a record is added with a `startDate` and an `endDate`, it will calculate the `duration`.\n *\n * The calculations happens async, records are not guaranteed to have up to date data until they are finished. To be\n * certain that calculations have finished, call `await project.commitAsync()` after store actions. Or use one of the\n * `xxAsync` functions, such as `loadDataAsync()`.\n *\n * Using `commitAsync()`:\n *\n * ```javascript\n * eventStore.data = [{ startDate, endDate }, ...];\n *\n * // duration of the record is not yet calculated\n *\n * await eventStore.project.commitAsync();\n *\n * // now it is\n * ```\n *\n * Using `loadDataAsync()`:\n *\n * ```javascript\n * await eventStore.loadDataAsync([{ startDate, endDate }, ...]);\n *\n * // duration is calculated\n * ```\n *\n * ## Using recurring events\n * When recurring events are in the database, **all recurring event definitions** which started before\n * the requested start date, and have not yet finished recurring MUST be loaded into the EventStore.\n *\n * Only the **base** recurring event **definitions** are stored in the EventStore. You do not\n * need to calculate the future occurrence dates of these events. This is all handled by the EventStore.\n *\n * When asked to yield a set of events for a certain date range for creating a UI through\n * {@link #function-getEvents}, the EventStore *automatically* interpolates any occurrences of\n * recurring events into the results. They do not occupy slots in the EventStore for every date\n * in their repetition range (that would be very inefficient, and *might* be infinite).\n *\n * @mixes Scheduler/data/mixin/PartOfProject\n * @mixes Scheduler/data/mixin/EventStoreMixin\n * @mixes Scheduler/data/mixin/RecurringEventsMixin\n * @mixes Scheduler/data/mixin/GetEventsMixin\n * @extends Core/data/AjaxStore\n */\nexport default class EventStore extends EngineMixin.mixin(\n    RecurringEventsMixin,\n    EventStoreMixin,\n    DayIndexMixin,\n    GetEventsMixin\n) {\n    static $name = 'EventStore';\n    static get defaultConfig() {\n        return {\n            /**\n             * Class used to represent records\n             * @config {Scheduler.model.EventModel}\n             * @typings {typeof EventModel}\n             * @default\n             * @category Common\n             */\n            modelClass : EventModel\n        };\n    }\n}\nEventStore._$name = 'EventStore';", "/**\n * @module Scheduler/model/mixin/AssignmentModelMixin\n */\n/**\n * Mixin that holds configuration shared between assignments in Scheduler and Scheduler Pro.\n * @mixin\n */\nexport default Target => class AssignmentModelMixin extends Target {\n    static get $name() {\n        return 'AssignmentModelMixin';\n    }\n    /**\n     * Set value for the specified field(s), triggering engine calculations immediately. See\n     * {@link Core.data.Model#function-set Model#set()} for arguments.\n     *\n     * ```javascript\n     * assignment.set('resourceId', 2);\n     * // assignment.resource is not yet resolved\n     *\n     * await assignment.setAsync('resourceId', 2);\n     * // assignment.resource is resolved\n     * ```\n     *\n     * @param {String|Object} field The field to set value for, or an object with multiple values to set in one call\n     * @param {*} [value] Value to set\n     * @param {Boolean} [silent=false] Set to true to not trigger events\n     * automatically.\n     * @function setAsync\n     * @category Editing\n     * @async\n     */\n    //region Fields\n    static get fields() {\n        return [\n            /**\n             * Id for the resource to assign to\n             * @field {String|Number} resourceId\n             * @category Common\n             */\n            'resourceId',\n            /**\n             * Id for the event to assign\n             * @field {String|Number} eventId\n             * @category Common\n             */\n            'eventId',\n            /**\n             * Specify `false` to opt out of drawing dependencies from/to this assignment\n             * @field {Boolean} drawDependencies\n             * @category Common\n             */\n            { name : 'drawDependencies', type : 'boolean' },\n            'event',\n            'resource'\n        ];\n    }\n    //endregion\n    construct(data, ...args) {\n        data = data || {};\n        const\n            { fieldMap }    = this,\n            eventIdField    = fieldMap.eventId.dataSource,\n            resourceIdField = fieldMap.resourceId.dataSource,\n            eventField      = fieldMap.event.dataSource,\n            resourceField   = fieldMap.resource.dataSource,\n            eventId         = data[eventIdField],\n            resourceId      = data[resourceIdField],\n            event           = data[eventField],\n            resource        = data[resourceField];\n        // Engine expects event and resource, not eventId and resourceId. We need to support both\n        if (eventId != null) {\n            data[eventField] = eventId;\n        }\n        else if (event != null) {\n            data[eventIdField] = event.isModel ? event.id : event;\n        }\n        if (resourceId != null) {\n            data[resourceField] = resourceId;\n        }\n        else if (resource != null) {\n            data[resourceIdField] = resource.isModel ? resource.id : resource;\n        }\n        super.construct(data, ...args);\n    }\n    //region Event & resource\n    /**\n     * A key made up from the event id and the id of the resource assigned to.\n     * @property eventResourceKey\n     * @readonly\n     * @internal\n     */\n    get eventResourceKey() {\n        return this.buildEventResourceKey(this.event, this.resource);\n    }\n    buildEventResourceKey(event, resource) {\n        let eventKey, resourceKey;\n        if (event) {\n            eventKey = event.isModel ? event.id : event;\n        }\n        else {\n            eventKey = this.internalId;\n        }\n        if (resource) {\n            resourceKey = resource.isModel ? resource.id : resource;\n        }\n        else {\n            resourceKey = this.internalId;\n        }\n        return `${eventKey}-${resourceKey}`;\n    }\n    buildIndexKey({ event, resource }) {\n        return this.buildEventResourceKey(event, resource);\n    }\n    set(field, value, ...args) {\n        const toSet = this.fieldToKeys(field, value);\n        // If resource was set, store its id as resourceId and announce it\n        if ('resource' in toSet) {\n            if (toSet.resource?.id !== undefined) {\n                toSet.resourceId = toSet.resource.id;\n            }\n        }\n        // If resourceId was set, we need to replace resource to have it re-referenced in engine\n        else if ('resourceId' in toSet && this.constructor.isProAssignmentModel) {\n            toSet.resource = toSet.resourceId;\n        }\n        // Same for event\n        if ('event' in toSet) {\n            if (toSet.event?.id !== undefined) {\n                toSet.eventId = toSet.event.id;\n            }\n        }\n        else if ('eventId' in toSet && this.constructor.isProAssignmentModel) {\n            toSet.event = toSet.eventId;\n        }\n        return super.set(toSet, null, ...args);\n    }\n    afterChange(toSet, wasSet, silent, fromRelationUpdate, skipAccessors) {\n        const me = this;\n        // Make sure Core Engine implementation notices \"resourceId\" change\n        // and updates \"resource\" field value respectively\n        if (!me.constructor.isProAssignmentModel && wasSet?.resourceId &&\n            me.resource?.id !== wasSet.resourceId.value) {\n            me.resource = wasSet.resourceId.value;\n        }\n        // If that's non-Core Engine and we have \"eventId\" indicated as just set\n        // and there was also \"event\" passed to set but it was not set\n        // and if that happens when propagating after sync-response applied\n        // - this means an event has changed its identifier\n        // (this fixes 11_backend.t.js in the Gantt)\n        else if (me.constructor.isProAssignmentModel && me.project?.propagatingSyncChanges &&\n            wasSet?.eventId && !wasSet?.event &&\n            (toSet.event.value === wasSet.eventId.value || toSet.event.value.id === wasSet.eventId.value)\n        ) {\n            // sanitize both wasSet and meta.modified\n            delete wasSet.eventId;\n            delete me.meta.modified.eventId;\n        }\n        return super.afterChange(...arguments);\n    }\n    // Settings resourceId relays to `resource`. Underlying data will be updated in `afterChange()` above\n    set resourceId(value) {\n        const { resource } = this;\n        // When assigning a new id to a resource, it will update the resourceId of the assignment. But the assignments\n        // resource is still the same so we need to announce here\n        if (resource?.isModel && resource.id === value) {\n            this.set('resourceId', value);\n        }\n        else {\n            this.resource = value;\n        }\n    }\n    get resourceId() {\n        // If assigned using `resource` and not `resourceId` there will be no resourceId\n        return this.resource?.id ?? this.get('resourceId');\n    }\n    // Same for event as for resourceId\n    set eventId(value) {\n        const { event } = this;\n        // When assigning a new id to an event, it will update the eventId of the assignment. But the assignments\n        // event is still the same so we need to announce here\n        if (event?.isModel && event.id === value) {\n            this.set('eventId', value);\n        }\n        else {\n            this.event = value;\n        }\n    }\n    get eventId() {\n        // If assigned using `event` and not `eventId` there will be no eventId\n        return this.event?.id ?? this.get('eventId');\n    }\n    /**\n     * Convenience property to get the name of the associated event.\n     * @property {String}\n     * @readonly\n     */\n    get eventName() {\n        return this.event?.name;\n    }\n    /**\n     * Convenience property to get the name of the associated resource.\n     * @property {String}\n     * @readonly\n     */\n    get resourceName() {\n        return this.resource?.name;\n    }\n    /**\n     * Returns the resource associated with this assignment.\n     *\n     * @returns {Scheduler.model.ResourceModel} Instance of resource\n     */\n    getResource() {\n        return this.resource;\n    }\n    //endregion\n    // Convenience getter to not have to check `instanceof AssignmentModel`\n    get isAssignment() {\n        return true;\n    }\n    /**\n     * Returns true if the Assignment can be persisted (e.g. task and resource are not 'phantoms')\n     *\n     * @property {Boolean}\n     */\n    get isPersistable() {\n        const\n            {\n                event,\n                resource,\n                unjoinedStores,\n                assignmentStore\n            }           = this,\n            crudManager = assignmentStore?.crudManager;\n        let result;\n        if (assignmentStore) {\n            // If the owning event is not persistable, this assignment is also not persistable.\n            // if crud manager is used it can deal with phantom event/resource since it persists all records in one batch\n            // if no crud manager used we have to wait till event/resource are persisted\n            result = this.isValid && event.isPersistable && (crudManager || !event.hasGeneratedId && !resource.hasGeneratedId);\n        }\n        // if we remove the record\n        else {\n            result = !this.isPhantom && Boolean(unjoinedStores[0]);\n        }\n        // Records not yet fully created cannot be persisted\n        return result && super.isPersistable && !this.event?.isCreating;\n    }\n    get isValid() {\n        return this.resource != null && this.event != null;\n    }\n    /**\n     * Returns a textual representation of this assignment (e.g. Mike 50%).\n     * @returns {String}\n     */\n    toString() {\n        if (this.resourceName) {\n            return `${this.resourceName} ${Math.round(this.units)}%`;\n        }\n        return '';\n    }\n    //region STM hooks\n    shouldRecordFieldChange(fieldName, oldValue, newValue) {\n        if (!super.shouldRecordFieldChange(fieldName, oldValue, newValue)) {\n            return false;\n        }\n        if (fieldName === 'event' || fieldName === 'eventId') {\n            const eventStore = this.project?.eventStore;\n            if (eventStore && eventStore.oldIdMap[oldValue] === eventStore.getById(newValue)) {\n                return false;\n            }\n        }\n        if (fieldName === 'resource' || fieldName === 'resourceId') {\n            const resourceStore = this.project?.resourceStore;\n            if (resourceStore && resourceStore.oldIdMap[oldValue] === resourceStore.getById(newValue)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    //endregion\n};\n", "import { Mixin, isInstanceOf } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { CorePartOfProjectModelMixin } from \"../mixin/CorePartOfProjectModelMixin.js\";\nimport { CoreEventMixin } from \"./CoreEventMixin.js\";\nimport { CoreResourceMixin } from \"./CoreResourceMixin.js\";\nfunction asId(recordOrId) {\n    return recordOrId?.isModel ? recordOrId.id : recordOrId;\n}\n/**\n * Core assignment model class. It just contains references to the [[CoreEventMixin|event]] and [[CoreResourceMixin|resource]] being assigned.\n */\nexport class CoreAssignmentMixin extends Mixin([CorePartOfProjectModelMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreAssignmentMixin extends base {\n        // Fields declared in the Model way, existing decorators all assume ChronoGraph is used\n        static get fields() {\n            return [\n                // isEqual required to properly detect changed resource / event\n                { name: 'resource', isEqual: (a, b) => a === b, persist: false },\n                { name: 'event', isEqual: (a, b) => a === b, persist: false }\n            ];\n        }\n        // Resolve early + update indices to have buckets ready before commit\n        setChanged(field, value, invalidate) {\n            const { assignmentStore, eventStore, resourceStore, project } = this;\n            let update = false;\n            if (field === 'event') {\n                const event = isInstanceOf(value, CoreEventMixin) ? value : eventStore?.$master.getById(value);\n                if (event)\n                    update = true;\n                value = event || value;\n            }\n            if (field === 'resource') {\n                const resource = isInstanceOf(value, CoreResourceMixin) ? value : resourceStore?.$master.getById(value);\n                if (resource)\n                    update = true;\n                value = resource || value;\n            }\n            // Passing true as last arg, bucket expected to work before commit\n            superProto.setChanged.call(this, field, value, invalidate, true);\n            // Update on resolve, if this is a single operation and record is part of project (might be standalone record)\n            if (assignmentStore && update && !project.isPerformingCommit && !assignmentStore.isLoadingData && !resourceStore?.isLoadingData && !assignmentStore.skipInvalidateIndices) {\n                assignmentStore.invalidateIndices();\n            }\n        }\n        // Resolve event and resource when joining project\n        joinProject() {\n            superProto.joinProject.call(this);\n            this.setChanged('event', this.get('event'));\n            this.setChanged('resource', this.get('resource'));\n        }\n        // Resolved resource & event as part of commit\n        // Normally done earlier in setChanged, but stores might not have been available yet at that point\n        calculateInvalidated() {\n            // Changed values, should be used instead of current where available\n            let { event = this.event, resource = this.resource } = this.$changed;\n            if (event !== null && !(isInstanceOf(event, CoreEventMixin))) {\n                const resolved = this.eventStore?.getById(event);\n                if (resolved)\n                    this.setChanged('event', resolved, false);\n            }\n            if (resource !== null && !(isInstanceOf(resource, CoreResourceMixin))) {\n                const resolved = this.resourceStore?.getById(resource);\n                if (resolved)\n                    this.setChanged('resource', resolved, false);\n            }\n        }\n        // resourceId and eventId required to be available for new datasets\n        finalizeInvalidated(silent) {\n            const changed = this.$changed;\n            if ('resource' in changed) {\n                changed.resourceId = asId(changed.resource);\n            }\n            if ('event' in changed) {\n                changed.eventId = asId(changed.event);\n            }\n            superProto.finalizeInvalidated.call(this, silent);\n        }\n        //region Event\n        set event(event) {\n            this.setChanged('event', event);\n            this.setChanged('eventId', asId(event));\n        }\n        get event() {\n            const event = this.get('event');\n            // Engine returns null instead of id when unresolved\n            return event?.id != null ? event : null;\n        }\n        //endregion\n        //region Resource\n        set resource(resource) {\n            this.setChanged('resource', resource);\n            this.setChanged('resourceId', asId(resource));\n        }\n        get resource() {\n            const resource = this.get('resource');\n            // Engine returns null instead of id when unresolved\n            return resource?.id != null ? resource : null;\n        }\n    }\n    return CoreAssignmentMixin;\n}) {\n}\n", "import Model from '../../Core/data/Model.js';\nimport PartOfProject from '../data/mixin/PartOfProject.js';\nimport AssignmentModelMixin from './mixin/AssignmentModelMixin.js';\nimport { CoreAssignmentMixin } from '../../Engine/quark/model/scheduler_core/CoreAssignmentMixin.js';\nconst EngineMixin = CoreAssignmentMixin;\n/**\n * @module Scheduler/model/AssignmentModel\n */\n/**\n * This model represents a single assignment of a resource to an event in the scheduler, usually added to a\n * {@link Scheduler.data.AssignmentStore}.\n *\n * It is a subclass of the {@link Core.data.Model} class. Please refer to the documentation for that class to become\n * familiar with the base interface of this class.\n *\n * ## Fields and references\n *\n * An Assignment has the following fields:\n * - `id` - The id of the assignment\n * - `resourceId` - The id of the resource assigned (optionally replaced with `resource` for load)\n * - `eventId` - The id of the event to which the resource is assigned (optionally replaced with `event` for load)\n *\n * The data source for these fields can be customized by subclassing this class:\n *\n * ```javascript\n * class MyAssignment extends AssignmentModel {\n *   static get fields() {\n *       return [\n *          { name : 'resourceId', dataSource : 'linkedResource' }\n *       ];\n *   }\n * }\n * ```\n *\n * After load and project normalization, these references are accessible (assuming their respective stores are loaded):\n * - `event` - The linked event record\n * - `resource` - The linked resource record\n *\n * ## Async resolving of references\n *\n * As described above, an assignment links an event to a resource. It holds references to an event record and a resource\n * record. These references are populated async, using the calculation engine of the project that the assignment via\n * its store is a part of. Because of this asyncness, references cannot be used immediately after modifications:\n *\n * ```javascript\n * assignment.resourceId = 2;\n * // assignment.resource is not yet available\n * ```\n *\n * To make sure references are updated, wait for calculations to finish:\n *\n * ```javascript\n * assignment.resourceId = 2;\n * await assignment.project.commitAsync();\n * // assignment.resource is available\n * ```\n *\n * As an alternative, you can also use `setAsync()` to trigger calculations directly after the change:\n *\n * ```javascript\n * await assignment.setAsync({ resourceId : 2});\n * // assignment.resource is available\n * ```\n *\n * @extends Core/data/Model\n * @mixes Scheduler/model/mixin/AssignmentModelMixin\n * @uninherit Core/data/mixin/TreeNode\n */\nexport default class AssignmentModel extends AssignmentModelMixin(PartOfProject(EngineMixin.derive(Model))) {\n    // NOTE: Leave field defs at top to be picked up by jsdoc\n    /**\n     * Id for event to assign. Can be used as an alternative to `eventId`, but please note that after\n     * load it will be populated with the actual event and not its id. This field is not persistable.\n     * @field {Scheduler.model.EventModel} event\n     * @accepts {String|Number|Scheduler.model.EventModel}\n     * @typings {String||Number||Scheduler.model.EventModel||Scheduler.model.TimeSpan}\n     * @category Common\n     */\n    /**\n     * Id for resource to assign to. Can be used as an alternative to `resourceId`, but please note that after\n     * load it will be populated with the actual resource and not its id. This field is not persistable.\n     * @field {Scheduler.model.ResourceModel} resource\n     * @accepts {String|Number|Scheduler.model.ResourceModel}\n     * @category Common\n     */\n    static get $name() {\n        return 'AssignmentModel';\n    }\n}\nAssignmentModel.exposeProperties();\nAssignmentModel._$name = 'AssignmentModel';", "import Model from '../../../Core/data/Model.js';\nimport ArrayHelper from '../../../Core/helper/ArrayHelper.js';\n/**\n * @module Scheduler/data/mixin/AssignmentStoreMixin\n */\n/**\n * This is a mixin, containing functionality related to managing assignments.\n *\n * It is consumed by the regular {@link Scheduler.data.AssignmentStore} class and Scheduler Pros counterpart.\n *\n * @mixin\n */\nexport default Target => class AssignmentStoreMixin extends Target {\n    static get $name() {\n        return 'AssignmentStoreMixin';\n    }\n    /**\n     * Add assignments to the store.\n     *\n     * NOTE: References (event, resource) on the assignments are determined async by a calculation engine. Thus they\n     * cannot be directly accessed after using this function.\n     *\n     * For example:\n     *\n     * ```javascript\n     * const [assignment] = assignmentStore.add({ eventId, resourceId });\n     * // assignment.event is not yet available\n     * ```\n     *\n     * To guarantee references are set up, wait for calculations for finish:\n     *\n     * ```javascript\n     * const [assignment] = assignmentStore.add({ eventId, resourceId });\n     * await assignmentStore.project.commitAsync();\n     * // assignment.event is available (assuming EventStore is loaded and so on)\n     * ```\n     *\n     * Alternatively use `addAsync()` instead:\n     *\n     * ```javascript\n     * const [assignment] = await assignmentStore.addAsync({ eventId, resourceId });\n     * // assignment.event is available (assuming EventStore is loaded and so on)\n     * ```\n     *\n     * @param {Scheduler.model.AssignmentModel|Scheduler.model.AssignmentModel[]|AssignmentModelConfig|AssignmentModelConfig[]} records\n     * Array of records/data or a single record/data to add to store\n     * @param {Boolean} [silent] Specify `true` to suppress events\n     * @returns {Scheduler.model.AssignmentModel[]} Added records\n     * @function add\n     * @category CRUD\n     */\n    /**\n     * Add assignments to the store and triggers calculations directly after. Await this function to have up to date\n     * references on the added assignments.\n     *\n     * ```javascript\n     * const [assignment] = await assignmentStore.addAsync({ eventId, resourceId });\n     * // assignment.event is available (assuming EventStore is loaded and so on)\n     * ```\n     *\n     * @param {Scheduler.model.AssignmentModel|Scheduler.model.AssignmentModel[]|AssignmentModelConfig|AssignmentModelConfig[]} records\n     * Array of records/data or a single record/data to add to store\n     * @param {Boolean} [silent] Specify `true` to suppress events\n     * @returns {Scheduler.model.AssignmentModel[]} Added records\n     * @function addAsync\n     * @category CRUD\n     * @async\n     */\n    /**\n     * Applies a new dataset to the AssignmentStore. Use it to plug externally fetched data into the store.\n     *\n     * NOTE: References (assignments, resources) on the assignments are determined async by a calculation engine. Thus\n     * they cannot be directly accessed after assigning the new dataset.\n     *\n     * For example:\n     *\n     * ```javascript\n     * assignmentStore.data = [{ eventId, resourceId }];\n     * // assignmentStore.first.event is not yet available\n     * ```\n     *\n     * To guarantee references are available, wait for calculations for finish:\n     *\n     * ```javascript\n     * assignmentStore.data = [{ eventId, resourceId  }];\n     * await assignmentStore.project.commitAsync();\n     * // assignmentStore.first.event is available\n     * ```\n     *\n     * Alternatively use `loadDataAsync()` instead:\n     *\n     * ```javascript\n     * await assignmentStore.loadDataAsync([{ eventId, resourceId }]);\n     * // assignmentStore.first.event is available\n     * ```\n     *\n     * @member {AssignmentModelConfig[]} data\n     * @category Records\n     */\n    /**\n     * Applies a new dataset to the AssignmentStore and triggers calculations directly after. Use it to plug externally\n     * fetched data into the store.\n     *\n     * ```javascript\n     * await assignmentStore.loadDataAsync([{ eventId, resourceId }]);\n     * // assignmentStore.first.event is available\n     * ```\n     *\n     * @param {AssignmentModelConfig[]} data Array of AssignmentModel data objects\n     * @function loadDataAsync\n     * @category CRUD\n     * @async\n     */\n    static get defaultConfig() {\n        return {\n            /**\n             * CrudManager must load stores in the correct order. Lowest first.\n             * @private\n             */\n            loadPriority : 300,\n            /**\n             * CrudManager must sync stores in the correct order. Lowest first.\n             * @private\n             */\n            syncPriority : 300,\n            storeId : 'assignments'\n        };\n    }\n    add(newAssignments, ...args) {\n        newAssignments = ArrayHelper.asArray(newAssignments);\n        for (let i = 0; i < newAssignments.length; i++) {\n            let assignment = newAssignments[i];\n            if (!(assignment instanceof Model)) {\n                newAssignments[i] = assignment = this.createRecord(assignment);\n            }\n            if (!this.isSyncingDataOnLoad && this.storage.findIndex('eventResourceKey', assignment.eventResourceKey, true) !== -1) {\n                throw new Error(`Duplicate assignment Event: ${assignment.eventId} to resource: ${assignment.resourceId}`);\n            }\n            if (assignment.event?.isCreating) {\n                assignment.isCreating = true;\n            }\n        }\n        return super.add(newAssignments, ...args);\n    }\n    includesAssignment(eventId, resourceId) {\n        return this.storage.findIndex('eventResourceKey', `${eventId}-${resourceId}`, true) !== -1;\n    }\n    setStoreData(data) {\n        if (this.usesSingleAssignment) {\n            throw new Error('Data loading into AssignmentStore (multi-assignment mode) cannot be combined EventStore data containing resourceId (single-assignment mode)');\n        }\n        super.setStoreData(data);\n    }\n    //region Init & destroy\n    // This index fixes poor performance when you add large number of events to an event store with large number of\n    // events - if cache is missing existing records are iterated n\u00B2 times.\n    // https://github.com/bryntum/support/issues/3154#issuecomment-881336588\n    set storage(storage) {\n        super.storage = storage;\n        // This allows a map based, fast lookup of assignments by their eventResourceKey.\n        // This is so that the test for duplicate assignment adding is fast.\n        this.storage.addIndex({\n            property    : 'eventResourceKey',\n            dependentOn : { event : true, resource : true },\n            onDuplicate(assignment) {\n                console.warn(`Duplicate assignment of event ${assignment.eventId} to resource ${assignment.resourceId}`);\n            }\n        });\n    }\n    get storage() {\n        // Micro optimization to avoid expensive super call\n        return this._storage || super.storage;\n    }\n    //endregion\n    //region Stores\n    // To not have to do instanceof checks\n    get isAssignmentStore() {\n        return true;\n    }\n    //endregion\n    //region Recurrence\n    /**\n     * Returns a \"fake\" assignment used to identify a certain occurrence of a recurring event.\n     * If passed the original event, it returns `originalAssignment`.\n     * @param {Scheduler.model.AssignmentModel} originalAssignment\n     * @param {Scheduler.model.EventModel} occurrence\n     * @returns {Object} Temporary assignment\n     * @internal\n     */\n    getOccurrence(originalAssignment, occurrence) {\n        // Pass along the original assignment for non occurrence related calls\n        if (!originalAssignment || !occurrence?.isOccurrence) {\n            return originalAssignment;\n        }\n        // Not for saving chars, needed in fn below\n        const me = this;\n        return {\n            id                     : `${occurrence.id}:a${originalAssignment.id}`,\n            event                  : occurrence,\n            resource               : originalAssignment.resource,\n            eventId                : occurrence.id,\n            resourceId             : originalAssignment.resource.id,\n            isAssignment           : true,\n            // This field is required to distinguish this fake assignment when event is being removed from UI\n            isOccurrenceAssignment : true,\n            // Not being an actual record, instanceMeta is stored on the store instead\n            instanceMeta(instanceOrId) {\n                return me.occurrenceInstanceMeta(this, instanceOrId);\n            }\n        };\n    }\n    // Per fake assignment instance meta, stored on store since fakes are always generated on demand\n    occurrenceInstanceMeta(occurrenceAssignment, instanceOrId) {\n        const\n            me         = this,\n            instanceId = instanceOrId.id || instanceOrId,\n            { id }     = occurrenceAssignment;\n        let { occurrenceMeta } = me;\n        if (!occurrenceMeta) {\n            occurrenceMeta = me.occurrenceMeta = {};\n        }\n        if (!occurrenceMeta[id]) {\n            occurrenceMeta[id] = {};\n        }\n        return occurrenceMeta[id][instanceId] || (occurrenceMeta[id][instanceId] = {});\n    }\n    //endregion\n    //region Mapping\n    /**\n     * Maps over event assignments.\n     *\n     * @param {Scheduler.model.EventModel} event\n     * @param {Function} [fn]\n     * @param {Function} [filterFn]\n     * @returns {Scheduler.model.EventModel[]|Array}\n     * @category Assignments\n     */\n    mapAssignmentsForEvent(event, fn, filterFn) {\n        event = this.eventStore.getById(event);\n        const\n            fnSet           = Boolean(fn),\n            filterFnSet     = Boolean(filterFn);\n        if (fnSet || filterFnSet) {\n            return event.assignments.reduce((result, assignment) => {\n                const mapResult = fnSet ? fn(assignment) : assignment;\n                if (!filterFnSet || filterFn(mapResult)) {\n                    result.push(mapResult);\n                }\n                return result;\n            }, []);\n        }\n        return event.assignments;\n    }\n    /**\n     * Maps over resource assignments.\n     *\n     * @param {Scheduler.model.ResourceModel|Number|String} resource\n     * @param {Function} [fn]\n     * @param {Function} [filterFn]\n     * @returns {Scheduler.model.ResourceModel[]|Array}\n     * @category Assignments\n     */\n    mapAssignmentsForResource(resource, fn, filterFn) {\n        resource = this.resourceStore.getById(resource);\n        const\n            fnSet           = Boolean(fn),\n            filterFnSet     = Boolean(filterFn);\n        if (fnSet || filterFnSet) {\n            return resource.assignments.reduce((result, assignment) => {\n                const mapResult = fnSet ? fn(assignment) : assignment;\n                if (!filterFnSet || filterFn(mapResult)) {\n                    result.push(mapResult);\n                }\n                return result;\n            }, []);\n        }\n        return resource.assignments;\n    }\n    /**\n     * Returns all assignments for a given event.\n     *\n     * @param {Scheduler.model.TimeSpan} event\n     * @returns {Scheduler.model.AssignmentModel[]}\n     * @category Assignments\n     */\n    getAssignmentsForEvent(event) {\n        return event.assignments;\n    }\n    /**\n     * Removes all assignments for given event\n     *\n     * @param {Scheduler.model.TimeSpan} event\n     * @category Assignments\n     */\n    removeAssignmentsForEvent(event) {\n        return this.remove(event.assignments);\n    }\n    /**\n     * Returns all assignments for a given resource.\n     *\n     * @param {Scheduler.model.ResourceModel} resource\n     * @returns {Scheduler.model.AssignmentModel[]}\n     * @category Assignments\n     */\n    getAssignmentsForResource(resource) {\n        resource = this.resourceStore.getById(resource);\n        return resource.assignments;\n    }\n    /**\n     * Removes all assignments for given resource\n     *\n     * @param {Scheduler.model.ResourceModel|*} resource\n     * @category Assignments\n     */\n    removeAssignmentsForResource(resource) {\n        this.remove(this.getAssignmentsForResource(resource));\n    }\n    /**\n     * Returns all resources assigned to an event.\n     *\n     * @param {Scheduler.model.EventModel} event\n     * @returns {Scheduler.model.ResourceModel[]}\n     * @category Assignments\n     */\n    getResourcesForEvent(event) {\n        return event.resources;\n    }\n    /**\n     * Returns all events assigned to a resource\n     *\n     * @param {Scheduler.model.ResourceModel|String|Number} resource\n     * @returns {Scheduler.model.TimeSpan[]}\n     * @category Assignments\n     */\n    getEventsForResource(resource) {\n        resource = this.resourceStore.getById(resource);\n        return resource?.events;\n    }\n    /**\n     * Creates and adds assignment record(s) for a given event and resource(s).\n     *\n     * @param {Scheduler.model.TimeSpan} event\n     * @param {Scheduler.model.ResourceModel|Scheduler.model.ResourceModel[]} resources The resource(s) to assign to the event\n     * @param {Function} [assignmentSetupFn] A hook function which takes an assignment as its argument and must return an assignment.\n     * @param {Boolean} [removeExistingAssignments] `true` to remove assignments for other resources\n     * @returns {Scheduler.model.AssignmentModel[]} An array with the created assignment(s)\n     * @category Assign\n     */\n    assignEventToResource(event, resources, assignmentSetupFn = null, removeExistingAssignments = false) {\n        const\n            me       = this,\n            toRemove = removeExistingAssignments ? new Set(event.assignments) : null;\n        resources = ArrayHelper.asArray(resources).map(r => r.$original ?? r);\n        if (me.eventStore?.usesSingleAssignment) {\n            // Use same code path as other single assignments if already assigned\n            if (event.assignments?.length) {\n                if (!me.isEventAssignedToResource(event, resources[0])) {\n                    event.resource = resources[0];\n                }\n                return [];\n            }\n            // otherwise - set \"resourceId\" and proceed to assignment creation\n            else {\n                event.resourceId = resources[0]?.id;\n            }\n        }\n        let newAssignments = [];\n        me.suspendAutoCommit();\n        // Assign\n        resources.forEach(resource => {\n            const existingAssignment = me.getAssignmentForEventAndResource(event, resource);\n            if (!existingAssignment) {\n                const assignment = {\n                    event,\n                    resource\n                };\n                newAssignments.push(assignmentSetupFn?.(assignment) ?? assignment);\n            }\n            else if (removeExistingAssignments) {\n                toRemove.delete(existingAssignment);\n            }\n        });\n        newAssignments = me.add(newAssignments);\n        if (removeExistingAssignments) {\n            me.remove(Array.from(toRemove));\n        }\n        // If true, will trigger a commit\n        me.resumeAutoCommit();\n        return newAssignments;\n    }\n    /**\n     * Removes assignment record for a given event and resource.\n     *\n     * @param {Scheduler.model.TimeSpan|String|Number} event\n     * @param {Scheduler.model.ResourceModel|String|Number} [resources] The resource to unassign the event from. If omitted, all resources of the events will be unassigned\n     * @returns {Scheduler.model.AssignmentModel|Scheduler.model.AssignmentModel[]}\n     * @category Assign\n     */\n    unassignEventFromResource(event, resources) {\n        const\n            me = this,\n            assignmentsToRemove = [];\n        if (!resources) {\n            return me.removeAssignmentsForEvent(event);\n        }\n        resources = ArrayHelper.asArray(resources);\n        for (let i = 0; i < resources.length; i++) {\n            if (me.isEventAssignedToResource(event, resources[i])) {\n                assignmentsToRemove.push(me.getAssignmentForEventAndResource(event, resources[i]));\n            }\n        }\n        return me.remove(assignmentsToRemove);\n    }\n    /**\n     * Checks whether an event is assigned to a resource.\n     *\n     * @param {Scheduler.model.EventModel|String|Number} event Event record or id\n     * @param {Scheduler.model.ResourceModel|String|Number} resource Resource record or id\n     * @returns {Boolean}\n     * @category Assignments\n     */\n    isEventAssignedToResource(event, resource) {\n        return Boolean(this.getAssignmentForEventAndResource(event, resource));\n    }\n    /**\n     * Returns an assignment record for a given event and resource\n     *\n     * @param {Scheduler.model.EventModel|String|Number} event The event or its id\n     * @param {Scheduler.model.ResourceModel|String|Number} resource The resource or its id\n     * @returns {Scheduler.model.AssignmentModel}\n     * @category Assignments\n     */\n    getAssignmentForEventAndResource(event, resource) {\n        let assignments;\n        // Note: In order to not evaluate conditions which do not have to be evaluated each condition is assigned to a\n        // variable within the condition.\n        if (\n            !(event = this.eventStore.getById(event)) ||\n            !(assignments = event.assignments) ||\n            // Also note that resources are looked for in the master store if chained, to handle dragging between\n            // schedulers using chained versions of the same resource store. Needed since assignmentStore is shared and\n            // might point to wrong resourceStore (can only point to one)\n            !(resource = this.resourceStore.$master.getById(resource))\n        ) {\n            return null;\n        }\n        return this.getOccurrence(assignments.find(a => a.resource?.$original === resource.$original), event);\n    }\n    //endregion\n};\n", "import { CI } from \"../../ChronoGraph/collection/Iterator.js\";\nexport const isNotNumber = (value) => Number(value) !== value;\nexport const CIFromSetOrArrayOrValue = (value) => {\n    if (value instanceof Set || value instanceof Array)\n        return CI(value);\n    return CI([value]);\n};\nexport const delay = (value) => new Promise(resolve => setTimeout(resolve, value));\nexport const format = (format, ...values) => {\n    return format.replace(/{(\\d+)}/g, (match, number) => typeof values[number] !== 'undefined' ? values[number] : match);\n};\n", "import { Mixin } from \"../../../ChronoGraph/class/Mixin.js\";\nimport { AbstractPartOfProjectStoreMixin } from \"./mixin/AbstractPartOfProjectStoreMixin.js\";\nimport { CIFromSetOrArrayOrValue } from \"../../util/Functions.js\";\n// Shared functionality for CoreAssignmentStore & ChronoAssignmentStore\nexport class AbstractAssignmentStoreMixin extends Mixin([AbstractPartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class AbstractAssignmentStoreMixin extends base {\n        constructor() {\n            super(...arguments);\n            this.assignmentsForRemoval = new Set();\n            this.allAssignmentsForRemoval = false;\n        }\n        remove(records, silent) {\n            this.assignmentsForRemoval = CIFromSetOrArrayOrValue(records).toSet();\n            const res = superProto.remove.call(this, records, silent);\n            this.assignmentsForRemoval.clear();\n            return res;\n        }\n        removeAll(silent) {\n            this.allAssignmentsForRemoval = true;\n            const res = superProto.removeAll.call(this, silent);\n            this.allAssignmentsForRemoval = false;\n            return res;\n        }\n    }\n    return AbstractAssignmentStoreMixin;\n}) {\n}\n", "import { CoreAssignmentMixin } from \"../model/scheduler_core/CoreAssignmentMixin.js\";\nimport { Mixin } from \"../../../ChronoGraph/class/BetterMixin.js\";\nimport { CorePartOfProjectStoreMixin } from \"./mixin/CorePartOfProjectStoreMixin.js\";\nimport { AbstractAssignmentStoreMixin } from \"./AbstractAssignmentStoreMixin.js\";\nconst emptySet = new Set();\n/**\n * A store mixin class, that represent collection of all assignments in the [[SchedulerCoreProjectMixin|project]].\n */\nexport class CoreAssignmentStoreMixin extends Mixin([AbstractAssignmentStoreMixin, CorePartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreAssignmentStoreMixin extends base {\n        constructor() {\n            super(...arguments);\n            this.skipInvalidateIndices = false;\n        }\n        static get defaultConfig() {\n            return {\n                modelClass: CoreAssignmentMixin,\n                storage: {\n                    extraKeys: [\n                        { property: 'event', unique: false },\n                        { property: 'resource', unique: false },\n                        { property: 'eventId', unique: false }\n                    ]\n                }\n            };\n        }\n        set data(value) {\n            this.allAssignmentsForRemoval = true;\n            super.data = value;\n            this.allAssignmentsForRemoval = false;\n        }\n        getEventsAssignments(event) {\n            return this.storage.findItem('event', event, true) || emptySet;\n        }\n        getResourcesAssignments(resource) {\n            return this.storage.findItem('resource', resource.$original, true) || emptySet;\n        }\n        updateIndices() {\n            this.storage.rebuildIndices();\n        }\n        invalidateIndices() {\n            this.storage.invalidateIndices();\n        }\n        afterLoadData() {\n            this.eventStore && this.linkAssignments(this.eventStore, 'event');\n            this.resourceStore && this.linkAssignments(this.resourceStore, 'resource');\n        }\n        // Link events/resources to assignments, called when those stores are populated or joined to project\n        linkAssignments(store, modelName) {\n            // If we are passed a chained store, the ultimate source of truth is the masterStore\n            store = store.masterStore || store;\n            const unresolved = this.count && this.storage.findItem(modelName, null, true);\n            if (unresolved) {\n                for (const assignment of unresolved) {\n                    const record = store.getById(assignment.getCurrentOrProposed(modelName));\n                    if (record)\n                        assignment.setChanged(modelName, record);\n                }\n                this.invalidateIndices();\n            }\n        }\n        // Unlink events/resources from assignments, called when those stores are cleared\n        unlinkAssignments(modelName) {\n            // Invalidate links to events/resources, need to link to new records so set it back to the id (might be resource or resourceId)\n            // As assignment.resource returns null if it's an id, need to check for that in data\n            this.forEach(assignment => assignment.setChanged(modelName, assignment[modelName]?.id ?? assignment?.getData(modelName) ?? assignment[modelName + 'Id']));\n            this.invalidateIndices();\n        }\n        onCommitAsync() {\n            this.updateIndices();\n        }\n    }\n    return CoreAssignmentStoreMixin;\n}) {\n}\n", "import AjaxStore from '../../Core/data/AjaxStore.js';\nimport AssignmentModel from '../model/AssignmentModel.js';\nimport PartOfProject from './mixin/PartOfProject.js';\nimport PartOfBaseProject from './mixin/PartOfBaseProject.js';\nimport AssignmentStoreMixin from './mixin/AssignmentStoreMixin.js';\nimport { CoreAssignmentStoreMixin } from '../../Engine/quark/store/CoreAssignmentStoreMixin.js';\nconst EngineMixin = PartOfProject(CoreAssignmentStoreMixin.derive(AjaxStore));\n/**\n * @module Scheduler/data/AssignmentStore\n */\n/**\n * A store representing a collection of assignments between events in the {@link Scheduler.data.EventStore} and resources\n * in the {@link Scheduler.data.ResourceStore}.\n *\n * This store only accepts a model class inheriting from {@link Scheduler.model.AssignmentModel}.\n *\n * An AssignmentStore is usually connected to a project, which binds it to other related stores (EventStore,\n * ResourceStore and DependencyStore). The project also handles references (event, resource) to related records for the\n * records in the store.\n *\n * Resolving the references happens async, records are not guaranteed to have up to date references until calculations\n * are finished. To be certain that references are resolved, call `await project.commitAsync()` after store actions. Or\n * use one of the `xxAsync` functions, such as `loadDataAsync()`.\n *\n * Using `commitAsync()`:\n *\n * ```javascript\n * assignmentStore.data = [{ eventId, resourceId }, ...];\n *\n * // references (event, resource) not resolved yet\n *\n * await assignmentStore.project.commitAsync();\n *\n * // now they are\n * ```\n *\n * Using `loadDataAsync()`:\n *\n * ```javascript\n * await assignmentStore.loadDataAsync([{ eventId, resourceId }, ...]);\n *\n * // references (event, resource) are resolved\n * ```\n *\n * @mixes Scheduler/data/mixin/AssignmentStoreMixin\n * @mixes Scheduler/data/mixin/PartOfProject\n * @extends Core/data/AjaxStore\n */\nexport default class AssignmentStore extends AssignmentStoreMixin(EngineMixin) {\n    static $name = 'AssignmentStore';\n    static get defaultConfig() {\n        return {\n            modelClass : AssignmentModel\n        };\n    }\n}\nAssignmentStore._$name = 'AssignmentStore';", "import DateHelper from '../../Core/helper/DateHelper.js';\nimport Model from '../../Core/data/Model.js';\nimport Duration from '../../Core/data/Duration.js';\n/**\n * @module Scheduler/model/DependencyBaseModel\n */\nconst canonicalDependencyTypes = [\n    'SS',\n    'SF',\n    'FS',\n    'FF'\n];\n/**\n * Base class used for both Scheduler and Gantt. Not intended to be used directly\n *\n * @extends Core/data/Model\n */\nexport default class DependencyBaseModel extends Model {\n    static get $name() {\n        return 'DependencyBaseModel';\n    }\n    /**\n     * Set value for the specified field(s), triggering engine calculations immediately. See\n     * {@link Core.data.Model#function-set Model#set()} for arguments.\n     **\n     * ```javascript\n     * dependency.set('from', 2);\n     * // dependency.fromEvent is not yet up to date\n     *\n     * await dependency.setAsync('from', 2);\n     * // dependency.fromEvent is up to date\n     * ```\n     *\n     * @param {String|Object} field The field to set value for, or an object with multiple values to set in one call\n     * @param {*} [value] Value to set\n     * @param {Boolean} [silent=false] Set to true to not trigger events\n     * automatically.\n     * @function setAsync\n     * @category Editing\n     * @async\n     */\n    //region Fields\n    /**\n     * An enumerable object, containing names for the dependency types integer constants.\n     * - 0 StartToStart\n     * - 1 StartToEnd\n     * - 2 EndToStart\n     * - 3 EndToEnd\n     * @property {Object}\n     * @readonly\n     * @category Dependency\n     */\n    static get Type() {\n        return {\n            StartToStart : 0,\n            StartToEnd   : 1,\n            EndToStart   : 2,\n            EndToEnd     : 3\n        };\n    }\n    static get fields() {\n        return [\n            // 3 mandatory fields\n            /**\n             * From event, id of source event\n             * @field {String|Number} from\n             * @category Dependency\n             */\n            { name : 'from' },\n            /**\n             * To event, id of target event\n             * @field {String|Number} to\n             * @category Dependency\n             */\n            { name : 'to' },\n            /**\n             * Dependency type, see static property {@link #property-Type-static}\n             * @field {Number} type=2\n             * @category Dependency\n             */\n            { name : 'type', type : 'int', defaultValue : 2 },\n            /**\n             * CSS class to apply to lines drawn for the dependency\n             * @field {String} cls\n             * @category Styling\n             */\n            { name : 'cls', defaultValue : '' },\n            /**\n             * Bidirectional, drawn with arrows in both directions\n             * @field {Boolean} bidirectional\n             * @category Dependency\n             */\n            { name : 'bidirectional', type : 'boolean' },\n            /**\n             * Start side on source (top, left, bottom, right)\n             * @field {'top'|'left'|'bottom'|'right'} fromSide\n             * @category Dependency\n             */\n            { name : 'fromSide', type : 'string' },\n            /**\n             * End side on target (top, left, bottom, right)\n             * @field {'top'|'left'|'bottom'|'right'} toSide\n             * @category Dependency\n             */\n            { name : 'toSide', type : 'string' },\n            /**\n             * The magnitude of this dependency's lag (the number of units).\n             * @field {Number} lag\n             * @category Dependency\n             */\n            { name : 'lag', type : 'number', allowNull : true, defaultValue : 0 },\n            /**\n             * The units of this dependency's lag, defaults to \"d\" (days). Valid values are:\n             *\n             * - \"ms\" (milliseconds)\n             * - \"s\" (seconds)\n             * - \"m\" (minutes)\n             * - \"h\" (hours)\n             * - \"d\" (days)\n             * - \"w\" (weeks)\n             * - \"M\" (months)\n             * - \"y\" (years)\n             *\n             * This field is readonly after creation, to change `lagUnit` use {@link #function-setLag setLag()}.\n             * @field {'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y'} lagUnit\n             * @category Dependency\n             * @readonly\n             */\n            {\n                name         : 'lagUnit',\n                type         : 'string',\n                defaultValue : 'd'\n            },\n            { name : 'highlighted', persist : false, internal : true }\n        ];\n    }\n    // fromEvent/toEvent defined in CoreDependencyMixin in engine\n    /**\n     * Gets/sets the source event of the dependency.\n     *\n     * Accepts multiple formats but always returns an {@link Scheduler.model.EventModel}.\n     *\n     * **NOTE:** This is not a proper field but rather an alias, it will be serialized but cannot be remapped. If you\n     * need to remap, consider using {@link #field-from} instead.\n     *\n     * @field {Scheduler.model.EventModel} fromEvent\n     * @accepts {String|Number|Scheduler.model.EventModel}\n     * @category Dependency\n     */\n    /**\n     * Gets/sets the target event of the dependency.\n     *\n     * Accepts multiple formats but always returns an {@link Scheduler.model.EventModel}.\n     *\n     * **NOTE:** This is not a proper field but rather an alias, it will be serialized but cannot be remapped. If you\n     * need to remap, consider using {@link #field-to} instead.\n     *\n     * @field {Scheduler.model.EventModel} toEvent\n     * @accepts {String|Number|Scheduler.model.EventModel}\n     * @category Dependency\n     */\n    //endregion\n    //region Init\n    construct(data) {\n        const\n            from = data[this.fieldMap.from.dataSource],\n            to   = data[this.fieldMap.to.dataSource];\n        // Engine expects fromEvent and toEvent, not from and to. We need to support both\n        if (from != null) {\n            data.fromEvent = from;\n        }\n        if (to != null) {\n            data.toEvent = to;\n        }\n        super.construct(...arguments);\n    }\n    //endregion\n    get eventStore() {\n        return this.eventStore || this.unjoinedStores[0]?.eventStore;\n    }\n    set from(value) {\n        const { fromEvent } = this;\n        // When assigning a new id to an event, it will update the eventId of the assignment. But the assignments\n        // event is still the same so we need to announce here\n        if (fromEvent?.isModel && fromEvent.id === value) {\n            this.set('from', value);\n        }\n        else {\n            this.fromEvent = value;\n        }\n    }\n    get from() {\n        return this.get('from');\n    }\n    set to(value) {\n        const { toEvent } = this;\n        // When assigning a new id to an event, it will update the eventId of the assignment. But the assignments\n        // event is still the same so we need to announce here\n        if (toEvent?.isModel && toEvent.id === value) {\n            this.set('to', value);\n        }\n        else {\n            this.toEvent = value;\n        }\n    }\n    get to() {\n        return this.get('to');\n    }\n    /**\n     * Alias to dependency type, but when set resets {@link #field-fromSide} & {@link #field-toSide} to null as well.\n     *\n     * @property {Number}\n     * @category Dependency\n     */\n    get hardType() {\n        return this.getHardType();\n    }\n    set hardType(type) {\n        this.setHardType(type);\n    }\n    /**\n     * Returns dependency hard type, see {@link #property-hardType}.\n     *\n     * @returns {Number}\n     * @category Dependency\n     */\n    getHardType() {\n        return this.get('type');\n    }\n    /**\n     * Sets dependency {@link #field-type} and resets {@link #field-fromSide} and {@link #field-toSide} to null.\n     *\n     * @param {Number} type\n     * @category Dependency\n     */\n    setHardType(type) {\n        let result;\n        if (type !== this.hardType) {\n            result = this.set({\n                type,\n                fromSide : null,\n                toSide   : null\n            });\n        }\n        return result;\n    }\n    get lag() {\n        return this.get('lag');\n    }\n    set lag(lag) {\n        this.setLag(lag);\n    }\n    /**\n     * Sets lag and lagUnit in one go. Only allowed way to change lagUnit, the lagUnit field is readonly after creation\n     * @param {Number|String|Object} lag The lag value. May be just a numeric magnitude, or a full string descriptor eg '1d'\n     * @param {'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y'} [lagUnit] Unit for numeric lag value, see\n     * {@link #field-lagUnit} for valid values\n     * @category Dependency\n     */\n    setLag(lag, lagUnit = this.lagUnit) {\n        // Either they're only setting the magnitude\n        // or, if it's a string, parse the full duration.\n        if (arguments.length === 1) {\n            if (typeof lag === 'number') {\n                this.lag = lag;\n            }\n            else {\n                lag = DateHelper.parseDuration(lag);\n                this.set({\n                    lag     : lag.magnitude,\n                    lagUnit : lag.unit\n                });\n            }\n            return;\n        }\n        // Must be a number\n        lag = parseFloat(lag);\n        this.set({\n            lag,\n            lagUnit\n        });\n    }\n    getLag() {\n        if (this.lag) {\n            return `${this.lag < 0 ? '-' : '+'}${Math.abs(this.lag)}${DateHelper.getShortNameOfUnit(this.lagUnit)}`;\n        }\n        return '';\n    }\n    /**\n     * Property which encapsulates the lag's magnitude and units. An object which contains two properties:\n     * @property {Core.data.Duration}\n     * @property {Number} fullLag.magnitude The magnitude of the duration\n     * @property {'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y'} fullLag.unit The unit in which the duration is measured, eg\n     * `'d'` for days\n     * @category Dependency\n     */\n    get fullLag() {\n        return new Duration({\n            unit      : this.lagUnit,\n            magnitude : this.lag\n        });\n    }\n    set fullLag(lag) {\n        if (typeof lag === 'string') {\n            this.setLag(lag);\n        }\n        else {\n            this.setLag(lag.magnitude, lag.unit);\n        }\n    }\n    /**\n     * Returns true if the linked events have been persisted (e.g. neither of them are 'phantoms')\n     *\n     * @property {Boolean}\n     * @readonly\n     * @category Editing\n     */\n    get isPersistable() {\n        const\n            me = this,\n            { stores, unjoinedStores } = me,\n            store = stores[0];\n        let result;\n        if (store) {\n            const\n                { fromEvent, toEvent } = me,\n                crudManager            = store.crudManager;\n            // if crud manager is used it can deal with phantom source/target since it persists all records in one batch\n            // if no crud manager used we have to wait till source/target are persisted\n            result = fromEvent && (crudManager || !fromEvent.hasGeneratedId) && toEvent && (crudManager || !toEvent.hasGeneratedId);\n        }\n        else {\n            result = Boolean(unjoinedStores[0]);\n        }\n        return result && super.isPersistable;\n    }\n    getDateRange() {\n        const { fromEvent, toEvent } = this;\n        if (fromEvent?.isScheduled && toEvent?.isScheduled) {\n            const Type = DependencyBaseModel.Type;\n            let sourceDate,\n                targetDate;\n            switch (this.type) {\n                case Type.StartToStart:\n                    sourceDate = fromEvent.startDateMS;\n                    targetDate = toEvent.startDateMS;\n                    break;\n                case Type.StartToEnd:\n                    sourceDate = fromEvent.startDateMS;\n                    targetDate = toEvent.endDateMS;\n                    break;\n                case Type.EndToEnd:\n                    sourceDate = fromEvent.endDateMS;\n                    targetDate = toEvent.endDateMS;\n                    break;\n                case Type.EndToStart:\n                    sourceDate = fromEvent.endDateMS;\n                    targetDate = toEvent.startDateMS;\n                    break;\n                default:\n                    throw new Error('Invalid dependency type: ' + this.type);\n            }\n            return {\n                start : Math.min(sourceDate, targetDate),\n                end   : Math.max(sourceDate, targetDate)\n            };\n        }\n        return null;\n    }\n    /**\n     * Applies given CSS class to dependency, the value doesn't persist\n     *\n     * @param {String} cls\n     * @category Dependency\n     */\n    highlight(cls) {\n        const classes = this.highlighted?.split(' ') ?? [];\n        if (!classes.includes(cls)) {\n            this.highlighted = classes.concat(cls).join(' ');\n        }\n    }\n    /**\n     * Removes given CSS class from dependency if applied, the value doesn't persist\n     *\n     * @param {String} cls\n     * @category Dependency\n     */\n    unhighlight(cls) {\n        const { highlighted } = this;\n        if (highlighted) {\n            const\n                classes = highlighted.split(' '),\n                index   = classes.indexOf(cls);\n            if (index >= 0) {\n                classes.splice(index, 1);\n                this.highlighted = classes.join(' ');\n            }\n        }\n    }\n    /**\n     * Checks if the given CSS class is applied to dependency.\n     *\n     * @param {String} cls\n     * @returns {Boolean}\n     * @category Dependency\n     */\n    isHighlightedWith(cls) {\n        return this.highlighted && this.highlighted.split(' ').includes(cls);\n    }\n    getConnectorString(raw) {\n        const rawValue = canonicalDependencyTypes[this.type];\n        if (raw) {\n            return rawValue;\n        }\n        // FS => empty string; it's the default\n        if (this.type === DependencyBaseModel.Type.EndToStart) {\n            return '';\n        }\n        return rawValue;\n    }\n    // getConnectorStringFromType(type, raw) {\n    //     const rawValue = canonicalDependencyTypes[type];\n    //\n    //     if (raw) {\n    //         return rawValue;\n    //     }\n    //\n    //     // FS => empty string; it's the default\n    //     if (type === DependencyBaseModel.Type.EndToStart) {\n    //         return '';\n    //     }\n    //\n    //     const locale = LocaleManager.locale;\n    //\n    //     // See if there is a local version of SS, SF or FF\n    //     if (locale) {\n    //         const localized = locale.Scheduler && locale.Scheduler[rawValue];\n    //         if (localized) {\n    //             return localized;\n    //         }\n    //     }\n    //\n    //     return rawValue;\n    // }\n    // getConnectorString(raw) {\n    //     return this.getConnectorStringFromType(this.type);\n    // }\n    // * getConnectorStringGenerator(raw) {\n    //     return this.getConnectorStringFromType(yield this.$.type);\n    // }\n    toString() {\n        return `${this.from}${this.getConnectorString()}${this.getLag()}`;\n    }\n    /**\n     * Returns `true` if the dependency is valid. It is considered valid if it has a valid type and both from and to\n     * events are set and pointing to different events.\n     *\n     * @property {Boolean}\n     * @typings ignore\n     * @category Editing\n     */\n    get isValid() {\n        const { fromEvent, toEvent, type } = this;\n        return typeof type === 'number' && fromEvent && toEvent && fromEvent !== toEvent;\n    }\n    get fromEventName() {\n        return this.fromEvent?.name || '';\n    }\n    get toEventName() {\n        return this.toEvent?.name || '';\n    }\n    //region STM hooks\n    shouldRecordFieldChange(fieldName, oldValue, newValue) {\n        if (!super.shouldRecordFieldChange(fieldName, oldValue, newValue)) {\n            return false;\n        }\n        if (fieldName === 'from' || fieldName === 'to' || fieldName === 'fromEvent' || fieldName === 'toEvent') {\n            const eventStore = this.project?.eventStore;\n            if (eventStore && eventStore.oldIdMap[oldValue] === eventStore.getById(newValue)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    //endregion\n}\nDependencyBaseModel.exposeProperties();\nDependencyBaseModel._$name = 'DependencyBaseModel';", "import { CorePartOfProjectModelMixin } from \"../mixin/CorePartOfProjectModelMixin.js\";\nimport { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { CoreEventMixin } from \"./CoreEventMixin.js\";\nimport { isInstanceOf } from '../../../../ChronoGraph/class/Mixin.js';\nexport class CoreDependencyMixin extends Mixin([CorePartOfProjectModelMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreDependencyMixin extends base {\n        static get fields() {\n            return [\n                { name: 'fromEvent', isEqual: (a, b) => a === b, persist: false },\n                { name: 'toEvent', isEqual: (a, b) => a === b, persist: false }\n            ];\n        }\n        // Resolve early + update indices to have buckets ready before commit\n        setChanged(field, value, invalidate) {\n            let update = false;\n            if (field === 'fromEvent' || field === 'toEvent') {\n                const event = isInstanceOf(value, CoreEventMixin) ? value : this.eventStore?.getById(value);\n                if (event)\n                    update = true;\n                value = event || value;\n            }\n            superProto.setChanged.call(this, field, value, invalidate, true);\n            if (update && !this.project.isPerformingCommit && !this.dependencyStore?.isLoadingData) {\n                this.dependencyStore?.invalidateIndices();\n            }\n        }\n        // Resolve events when joining project\n        joinProject() {\n            superProto.joinProject.call(this);\n            // Initial values should be considered changed, to be normalized\n            // (needs to pass through setChanged for early normalization expected for buckets)\n            this.setChanged('fromEvent', this.get('fromEvent'));\n            this.setChanged('toEvent', this.get('toEvent'));\n        }\n        // Resolved events as part of commit\n        // Normally done earlier in setChanged, but stores might not have been available yet at that point\n        calculateInvalidated() {\n            // Changed values, should be used instead of current where available\n            let { fromEvent, toEvent } = this.$changed;\n            if (fromEvent !== null && !(isInstanceOf(fromEvent, CoreEventMixin))) {\n                const resolved = this.eventStore?.getById(fromEvent);\n                if (resolved)\n                    this.$changed.fromEvent = resolved;\n            }\n            if (toEvent !== null && !(isInstanceOf(toEvent, CoreEventMixin))) {\n                const resolved = this.eventStore?.getById(toEvent);\n                if (resolved)\n                    this.$changed.toEvent = resolved;\n            }\n        }\n        //region Events\n        // Not using \"propose\" mechanism from CoreEventMixin, because buckets are expected to be up to date right away\n        set fromEvent(fromEvent) {\n            this.setChanged('fromEvent', fromEvent);\n        }\n        get fromEvent() {\n            const fromEvent = this.get('fromEvent');\n            // Engine returns null instead of id when unresolved\n            return fromEvent?.id != null ? fromEvent : null;\n        }\n        set toEvent(toEvent) {\n            this.setChanged('toEvent', toEvent);\n        }\n        get toEvent() {\n            const toEvent = this.get('toEvent');\n            // Engine returns null instead of id when unresolved\n            return toEvent?.id != null ? toEvent : null;\n        }\n    }\n    return CoreDependencyMixin;\n}) {\n}\n", "import DependencyBaseModel from './DependencyBaseModel.js';\nimport PartOfProject from '../data/mixin/PartOfProject.js';\nimport { CoreDependencyMixin } from '../../Engine/quark/model/scheduler_core/CoreDependencyMixin.js';\nconst EngineMixin = CoreDependencyMixin;\n/**\n * @module Scheduler/model/DependencyModel\n */\n/**\n * This model represents a dependency between two events, usually added to a {@link Scheduler.data.DependencyStore}.\n *\n * It is a subclass of the {@link Scheduler.model.DependencyBaseModel} class, which in its turn subclasses\n * {@link Core.data.Model}. Please refer to documentation of those classes to become familiar with the base interface of\n * this class.\n *\n * ## Fields and references\n *\n * A Dependency has a few predefined fields, see Fields below.  The name of any fields data source can be customized in\n * the subclass, see the example below. Please also refer to {@link Core.data.Model} for details.\n *\n * ```javascript\n * class MyDependency extends DependencyModel {\n *   static get fields() {\n *     return [\n *       { name: 'to', dataSource: 'targetId' },\n *       { name: 'from', dataSource: 'sourceId' }\n *     ]);\n *   }\n * }\n * ```\n *\n * After load and project normalization, these references are accessible (assuming their respective stores are loaded):\n * - `fromEvent` - The event on the start side of the dependency\n * - `toEvent` - The event on the end side of the dependency\n *\n * ## Async resolving of references\n *\n * As described above, a dependency has links to events. These references are populated async, using the calculation\n * engine of the project that the resource via its store is a part of. Because of this asyncness, references cannot be\n * used immediately after modifications:\n *\n * ```javascript\n * dependency.from = 2;\n * // dependency.fromEvent is not yet up to date\n * ```\n *\n * To make sure references are updated, wait for calculations to finish:\n *\n * ```javascript\n * dependency.from = 2;\n * await dependency.project.commitAsync();\n * // dependency.fromEvent is up to date\n * ```\n *\n * As an alternative, you can also use `setAsync()` to trigger calculations directly after the change:\n *\n * ```javascript\n * await dependency.setAsync({ from : 2});\n * // dependency.fromEvent is up to date\n * ```\n *\n * @extends Scheduler/model/DependencyBaseModel\n * @uninherit Core/data/mixin/TreeNode\n */\nexport default class DependencyModel extends PartOfProject(EngineMixin.derive(DependencyBaseModel)) {\n    static get $name() {\n        return 'DependencyModel';\n    }\n    // Determines the type of dependency based on fromSide and toSide\n    getTypeFromSides(fromSide, toSide, rtl) {\n        const\n            types     = DependencyBaseModel.Type,\n            startSide = rtl ? 'right' : 'left',\n            endSide   = rtl ? 'left' : 'right';\n        if (fromSide === startSide) {\n            return (toSide === startSide) ? types.StartToStart : types.StartToEnd;\n        }\n        return (toSide === endSide) ? types.EndToEnd : types.EndToStart;\n    }\n}\nDependencyModel.exposeProperties();\nDependencyModel._$name = 'DependencyModel';", "import ArrayHelper from '../../../Core/helper/ArrayHelper.js';\nimport Model from '../../../Core/data/Model.js';\n/**\n * @module Scheduler/data/mixin/DependencyStoreMixin\n */\n/**\n * This is a mixin, containing functionality related to managing dependencies.\n *\n * It is consumed by the regular {@link Scheduler.data.DependencyStore} class and Scheduler Pros counterpart.\n *\n * @mixin\n */\nexport default Target => class DependencyStoreMixin extends Target {\n    static get $name() {\n        return 'DependencyStoreMixin';\n    }\n    /**\n     * Add dependencies to the store.\n     *\n     * NOTE: References (fromEvent, toEvent) on the dependencies are determined async by a calculation engine. Thus they\n     * cannot be directly accessed after using this function.\n     *\n     * For example:\n     *\n     * ```javascript\n     * const [dependency] = dependencyStore.add({ from, to });\n     * // dependency.fromEvent is not yet available\n     * ```\n     *\n     * To guarantee references are set up, wait for calculations for finish:\n     *\n     * ```javascript\n     * const [dependency] = dependencyStore.add({ from, to });\n     * await dependencyStore.project.commitAsync();\n     * // dependency.fromEvent is available (assuming EventStore is loaded and so on)\n     * ```\n     *\n     * Alternatively use `addAsync()` instead:\n     *\n     * ```javascript\n     * const [dependency] = await dependencyStore.addAsync({ from, to });\n     * // dependency.fromEvent is available (assuming EventStore is loaded and so on)\n     * ```\n     *\n     * @param {Scheduler.model.DependencyModel|Scheduler.model.DependencyModel[]|DependencyModelConfig|DependencyModelConfig[]} records\n     * Array of records/data or a single record/data to add to store\n     * @param {Boolean} [silent] Specify `true` to suppress events\n     * @returns {Scheduler.model.DependencyModel[]} Added records\n     * @function add\n     * @category CRUD\n     */\n    /**\n     * Add dependencies to the store and triggers calculations directly after. Await this function to have up to date\n     * references on the added dependencies.\n     *\n     * ```javascript\n     * const [dependency] = await dependencyStore.addAsync({ from, to });\n     * // dependency.fromEvent is available (assuming EventStore is loaded and so on)\n     * ```\n     *\n     * @param {Scheduler.model.DependencyModel|Scheduler.model.DependencyModel[]|DependencyModelConfig|DependencyModelConfig[]} records\n     * Array of records/data or a single record/data to add to store\n     * @param {Boolean} [silent] Specify `true` to suppress events\n     * @returns {Scheduler.model.DependencyModel[]} Added records\n     * @function addAsync\n     * @category CRUD\n     * @async\n     */\n    /**\n     * Applies a new dataset to the DependencyStore. Use it to plug externally fetched data into the store.\n     *\n     * NOTE: References (fromEvent, toEvent) on the dependencies are determined async by a calculation engine. Thus\n     * they cannot be directly accessed after assigning the new dataset.\n     *\n     * For example:\n     *\n     * ```javascript\n     * dependencyStore.data = [{ from, to }];\n     * // dependencyStore.first.fromEvent is not yet available\n     * ```\n     *\n     * To guarantee references are available, wait for calculations for finish:\n     *\n     * ```javascript\n     * dependencyStore.data = [{ from, to }];\n     * await dependencyStore.project.commitAsync();\n     * // dependencyStore.first.fromEvent is available\n     * ```\n     *\n     * Alternatively use `loadDataAsync()` instead:\n     *\n     * ```javascript\n     * await dependencyStore.loadDataAsync([{ from, to }]);\n     * // dependencyStore.first.fromEvent is available\n     * ```\n     *\n     * @member {DependencyModelConfig[]} data\n     * @category Records\n     */\n    /**\n     * Applies a new dataset to the DependencyStore and triggers calculations directly after. Use it to plug externally\n     * fetched data into the store.\n     *\n     * ```javascript\n     * await dependencyStore.loadDataAsync([{ from, to }]);\n     * // dependencyStore.first.fromEvent is available\n     * ```\n     *\n     * @param {DependencyModelConfig[]} data Array of DependencyModel data objects\n     * @function loadDataAsync\n     * @category CRUD\n     * @async\n     */\n    static get defaultConfig() {\n        return {\n            /**\n             * CrudManager must load stores in the correct order. Lowest first.\n             * @private\n             */\n            loadPriority : 400,\n            /**\n             * CrudManager must sync stores in the correct order. Lowest first.\n             * @private\n             */\n            syncPriority : 400,\n            storeId : 'dependencies'\n        };\n    }\n    reduceEventDependencies(event, reduceFn, result, flat = true, depsGetterFn) {\n        depsGetterFn = depsGetterFn || (event => this.getEventDependencies(event));\n        event = ArrayHelper.asArray(event);\n        event.reduce((result, event) => {\n            if (event.children && !flat) {\n                event.traverse(evt => {\n                    result = depsGetterFn(evt).reduce(reduceFn, result);\n                });\n            }\n            else {\n                result = depsGetterFn(event).reduce(reduceFn, result);\n            }\n        }, result);\n        return result;\n    }\n    mapEventDependencies(event, fn, filterFn, flat, depsGetterFn) {\n        return this.reduceEventDependencies(event, (result, dependency) => {\n            filterFn(dependency) && result.push(dependency);\n            return result;\n        }, [], flat, depsGetterFn);\n    }\n    mapEventPredecessors(event, fn, filterFn, flat) {\n        return this.reduceEventPredecessors(event, (result, dependency) => {\n            filterFn(dependency) && result.push(dependency);\n            return result;\n        }, [], flat);\n    }\n    mapEventSuccessors(event, fn, filterFn, flat) {\n        return this.reduceEventSuccessors(event, (result, dependency) => {\n            filterFn(dependency) && result.push(dependency);\n            return result;\n        }, [], flat);\n    }\n    /**\n     * Returns all dependencies for a certain event (both incoming and outgoing)\n     *\n     * @param {Scheduler.model.EventModel} event\n     * @returns {Scheduler.model.DependencyModel[]}\n     */\n    getEventDependencies(event) {\n        return [].concat(event.predecessors || [], event.successors || []);\n    }\n    removeEventDependencies(event) {\n        this.remove(this.getEventDependencies(event));\n    }\n    removeEventPredecessors(event) {\n        this.remove(event.predecessors);\n    }\n    removeEventSuccessors(event, flat) {\n        this.remove(event.successors);\n    }\n    getBySourceTargetId(key) {\n        return this.records.find(r =>\n            key == this.constructor.makeDependencySourceTargetCompositeKey(r.from, r.to)\n        );\n    }\n    /**\n     * Returns dependency model instance linking tasks with given ids. The dependency can be forward (from 1st\n     * task to 2nd) or backward (from 2nd to 1st).\n     *\n     * @param {Scheduler.model.EventModel|String} sourceEvent 1st event\n     * @param {Scheduler.model.EventModel|String} targetEvent 2nd event\n     * @returns {Scheduler.model.DependencyModel}\n     */\n    getDependencyForSourceAndTargetEvents(sourceEvent, targetEvent) {\n        sourceEvent = Model.asId(sourceEvent);\n        targetEvent = Model.asId(targetEvent);\n        return this.getBySourceTargetId(this.constructor.makeDependencySourceTargetCompositeKey(sourceEvent, targetEvent));\n    }\n    /**\n     * Returns a dependency model instance linking given events if such dependency exists in the store.\n     * The dependency can be forward (from 1st event to 2nd) or backward (from 2nd to 1st).\n     *\n     * @param {Scheduler.model.EventModel|String} sourceEvent\n     * @param {Scheduler.model.EventModel|String} targetEvent\n     * @returns {Scheduler.model.DependencyModel}\n     */\n    getEventsLinkingDependency(sourceEvent, targetEvent) {\n        return this.getDependencyForSourceAndTargetEvents(sourceEvent, targetEvent) ||\n            this.getDependencyForSourceAndTargetEvents(targetEvent, sourceEvent);\n    }\n    /**\n     * Validation method used to validate a dependency. Override and return `true` to indicate that an\n     * existing dependency between two tasks is valid. For a new dependency being created please see\n     * {@link #function-isValidDependencyToCreate}.\n     *\n     * @param {Scheduler.model.DependencyModel|Scheduler.model.TimeSpan|Number|String} dependencyOrFromId The dependency\n     * model, the from task/event or the id of the from task/event\n     * @param {Scheduler.model.TimeSpan|Number|String} [toId] To task/event or id thereof if the first parameter is not\n     * a dependency record\n     * @param {Number} [type] Dependency {@link Scheduler.model.DependencyBaseModel#property-Type-static} if the first\n     * parameter is not a dependency model instance.\n     * @returns {Boolean}\n     */\n    async isValidDependency(dependencyOrFromId, toId, type) {\n        let fromEvent = dependencyOrFromId, toEvent = toId;\n        if (dependencyOrFromId == null) {\n            return false;\n        }\n        // Accept dependency model\n        if (dependencyOrFromId.isDependencyModel) {\n            ({ fromEvent, toEvent } = dependencyOrFromId);\n        }\n        // Accept from as id\n        fromEvent = this.eventStore.getById(fromEvent);\n        // Accept to as id\n        toEvent = this.eventStore.getById(toEvent);\n        // This condition is supposed to map all model instances to be validated by project. Lowest common ancestor\n        // for scheduler event, scheduler pro event and gantt task is TimeSpan\n        if (fromEvent && toEvent) {\n            // Block creating dependencies to display only tasks in Gantt\n            if (!fromEvent.project || !toEvent.project) {\n                return false;\n            }\n            // Not asserting dependency type here. Default value should normally suffice.\n            return this.project.isValidDependency(fromEvent, toEvent, type);\n        }\n        return dependencyOrFromId !== toId;\n    }\n    /**\n     * Validation method used to validate a dependency while creating. Override and return `true` to indicate that\n     * a new dependency is valid to be created.\n     *\n     * @param {Scheduler.model.TimeSpan|Number|String} fromId From event/task or id\n     * @param {Scheduler.model.TimeSpan|Number|String} toId To event/task or id\n     * @param {Number} type Dependency {@link Scheduler.model.DependencyBaseModel#property-Type-static}\n     * @returns {Boolean}\n     */\n    isValidDependencyToCreate(fromId, toId, type) {\n        return this.isValidDependency(fromId, toId, type);\n    }\n    /**\n     * Returns all dependencies highlighted with the given CSS class\n     *\n     * @param {String} cls\n     * @returns {Scheduler.model.DependencyBaseModel[]}\n     */\n    getHighlightedDependencies(cls) {\n        return this.records.reduce((result, dep) => {\n            if (dep.isHighlightedWith(cls)) result.push(dep);\n            return result;\n        }, []);\n    }\n    static makeDependencySourceTargetCompositeKey(from, to) {\n        return `source(${from})-target(${to})`;\n    }\n    //region Product neutral\n    getTimeSpanDependencies(record) {\n        return this.getEventDependencies(record);\n    }\n    //endregion\n};\n", "import { Mixin } from \"../../../ChronoGraph/class/Mixin.js\";\nimport { AbstractPartOfProjectStoreMixin } from \"./mixin/AbstractPartOfProjectStoreMixin.js\";\nimport { CIFromSetOrArrayOrValue } from '../../util/Functions.js';\n// Shared functionality for CoreDependencyStore & ChronoDependencyStore\nexport class AbstractDependencyStoreMixin extends Mixin([AbstractPartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class AbstractDependencyStoreMixin extends base {\n        constructor() {\n            super(...arguments);\n            this.dependenciesForRemoval = new Set();\n            this.allDependenciesForRemoval = false;\n        }\n        remove(records, silent) {\n            this.dependenciesForRemoval = CIFromSetOrArrayOrValue(records).toSet();\n            const res = superProto.remove.call(this, records, silent);\n            this.dependenciesForRemoval.clear();\n            return res;\n        }\n        removeAll(silent) {\n            this.allDependenciesForRemoval = true;\n            const res = superProto.removeAll.call(this, silent);\n            this.allDependenciesForRemoval = false;\n            return res;\n        }\n    }\n    return AbstractDependencyStoreMixin;\n}) {\n}\n", "import { Mixin } from \"../../../ChronoGraph/class/BetterMixin.js\";\nimport { CorePartOfProjectStoreMixin } from \"./mixin/CorePartOfProjectStoreMixin.js\";\nimport { CoreDependencyMixin } from \"../model/scheduler_core/CoreDependencyMixin.js\";\nimport { AbstractDependencyStoreMixin } from \"./AbstractDependencyStoreMixin.js\";\nconst emptySet = new Set();\n/**\n * A store mixin class, that represent collection of all dependencies in the [[SchedulerCoreProjectMixin|project]].\n */\nexport class CoreDependencyStoreMixin extends Mixin([AbstractDependencyStoreMixin, CorePartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreDependencyStoreMixin extends base {\n        constructor() {\n            super(...arguments);\n            this.dependenciesForRemoval = new Set();\n            this.allDependenciesForRemoval = false;\n        }\n        static get defaultConfig() {\n            return {\n                modelClass: CoreDependencyMixin,\n                storage: {\n                    extraKeys: [\n                        { property: 'fromEvent', unique: false },\n                        { property: 'toEvent', unique: false }\n                    ]\n                }\n            };\n        }\n        getIncomingDepsForEvent(event) {\n            return this.storage.findItem('toEvent', event) || emptySet;\n        }\n        getOutgoingDepsForEvent(event) {\n            return this.storage.findItem('fromEvent', event) || emptySet;\n        }\n        set data(value) {\n            this.allDependenciesForRemoval = true;\n            super.data = value;\n            this.allDependenciesForRemoval = false;\n        }\n        updateIndices() {\n            this.storage.rebuildIndices();\n        }\n        invalidateIndices() {\n            this.storage.invalidateIndices();\n        }\n        onCommitAsync() {\n            this.updateIndices();\n        }\n    }\n    return CoreDependencyStoreMixin;\n}) {\n}\n", "import AjaxStore from '../../Core/data/AjaxStore.js';\nimport DependencyModel from '../model/DependencyModel.js';\nimport PartOfProject from './mixin/PartOfProject.js';\nimport DependencyStoreMixin from './mixin/DependencyStoreMixin.js';\nimport { CoreDependencyStoreMixin } from '../../Engine/quark/store/CoreDependencyStoreMixin.js';\nimport PartOfBaseProject from './mixin/PartOfBaseProject.js';\nconst EngineMixin = PartOfProject(CoreDependencyStoreMixin.derive(AjaxStore));\n/**\n * @module Scheduler/data/DependencyStore\n */\n/**\n * A store representing a collection of dependencies between events in the {@link Scheduler.data.EventStore}.\n *\n * This store only accepts a model class inheriting from {@link Scheduler.model.DependencyModel}.\n *\n * A DependencyStore is usually connected to a project, which binds it to other related stores (EventStore,\n * AssignmentStore and ResourceStore). The project also handles references (fromEvent, toEvent) to related records\n * for the records in the store.\n *\n * Resolving the references happens async, records are not guaranteed to have up to date references until calculations\n * are finished. To be certain that references are resolved, call `await project.commitAsync()` after store actions. Or\n * use one of the `xxAsync` functions, such as `loadDataAsync()`.\n *\n * Using `commitAsync()`:\n *\n * ```javascript\n * dependencyStore.data = [{ from, to }, ...];\n *\n * // references (fromEvent, toEvent) not resolved yet\n *\n * await dependencyStore.project.commitAsync();\n *\n * // now they are\n * ```\n *\n * Using `loadDataAsync()`:\n *\n * ```javascript\n * await dependencyStore.loadDataAsync([{ from, to }, ...]);\n *\n * // references (fromEvent, toEvent) are resolved\n * ```\n *\n * @mixes Scheduler/data/mixin/PartOfProject\n * @mixes Scheduler/data/mixin/DependencyStoreMixin\n * @extends Core/data/AjaxStore\n */\nexport default class DependencyStore extends DependencyStoreMixin(EngineMixin.derive(AjaxStore)) {\n    static get defaultConfig() {\n        return {\n            modelClass : DependencyModel\n        };\n    }\n}\nDependencyStore._$name = 'DependencyStore';", "/**\n * @module Scheduler/crud/mixin/AbstractCrudManagerValidation\n */\n/**\n * Mixin proving responses validation API to Crud Manager.\n * @mixin\n */\nexport default Target => class AbstractCrudManagerValidation extends Target {\n    static get $name() {\n        return 'AbstractCrudManagerValidation';\n    }\n    static get configurable() {\n        return {\n            /**\n             * This config validates the response structure for requests made by the Crud Manager.\n             * When `true`, the Crud Manager checks every parsed response structure for errors\n             * and if the response format is invalid, a warning is logged to the browser console.\n             *\n             * The config is intended to help developers implementing backend integration.\n             *\n             * @config {Boolean}\n             * @default\n             * @category CRUD\n             */\n            validateResponse : true,\n            /**\n             * When `true` treats parsed responses without `success` property as successful.\n             * In this mode a parsed response is treated as invalid if it has explicitly set `success : false`.\n             * @config {Boolean}\n             * @default\n             * @category CRUD\n             */\n            skipSuccessProperty : true,\n            crudLoadValidationWarningPrefix : 'CrudManager load response error(s):',\n            crudSyncValidationWarningPrefix : 'CrudManager sync response error(s):',\n            supportShortSyncResponseNote : 'Note: Please consider enabling \"supportShortSyncResponse\" option to allow less detailed sync responses (https://bryntum.com/products/scheduler/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-supportShortSyncResponse)',\n            disableValidationNote : 'Note: To disable this validation please set the \"validateResponse\" config to false'\n        };\n    }\n    get crudLoadValidationMandatoryStores() {\n        return [];\n    }\n    getStoreLoadResponseWarnings(storeInfo, responded, expectedResponse) {\n        const\n            messages        = [],\n            { storeId }     = storeInfo,\n            mandatoryStores = this.crudLoadValidationMandatoryStores,\n            result          = { [storeId] : {} };\n        // if the store section is responded\n        if (responded) {\n            if (!responded.rows) {\n                messages.push(`- \"${storeId}\" store section should have a \"rows\" property with an array of the store records.`);\n                result[storeId].rows = ['...'];\n            }\n        }\n        // if the store is mandatory\n        else if (mandatoryStores?.includes(storeId)) {\n            messages.push(`- No \"${storeId}\" store section found. It should contain the store data.`);\n            result[storeId].rows = ['...'];\n        }\n        // extend expected response w/ this store part\n        if (messages.length) {\n            Object.assign(expectedResponse, result);\n        }\n        return messages;\n    }\n    getLoadResponseWarnings(response) {\n        const\n            messages         = [],\n            expectedResponse = {};\n        if (!this.skipSuccessProperty) {\n            expectedResponse.success = true;\n        }\n        // iterate stores to check properties validity\n        this.forEachCrudStore((store, storeId, storeInfo) => {\n            messages.push(...this.getStoreLoadResponseWarnings(storeInfo, response?.[storeId], expectedResponse));\n        });\n        if (messages.length) {\n            messages.push('Please adjust your response to look like this:\\n' +\n                JSON.stringify(expectedResponse, null, 4).replace(/\"\\.\\.\\.\"/g, '...'));\n            messages.push(this.disableValidationNote);\n        }\n        return messages;\n    }\n    validateLoadResponse(response) {\n        const messages = this.getLoadResponseWarnings(response);\n        if (messages.length) {\n            console.warn(this.crudLoadValidationWarningPrefix + '\\n' + messages.join('\\n'));\n        }\n    }\n    getStoreSyncResponseWarnings(storeInfo, requested, responded, expectedResponse) {\n        const\n            messages         = [],\n            missingRows      = [],\n            missingRemoved   = [],\n            { storeId }      = storeInfo,\n            result           = { [storeId] : {} },\n            phantomIdField   = storeInfo.phantomIdField || this.phantomIdField,\n            { modelClass }   = storeInfo.store,\n            { idField }      = modelClass,\n            respondedRows    = responded?.rows || [],\n            respondedRemoved = responded?.removed || [];\n        let showSupportShortSyncResponseNote = false;\n        // if added records were passed in the request they should be mentioned in the response\n        if (requested?.added) {\n            missingRows.push(\n                ...requested.added.filter(record => {\n                    return !respondedRows.find(row => row[phantomIdField] == record[phantomIdField]) &&\n                        !respondedRemoved.find(row => row[phantomIdField] == record[phantomIdField] || row[idField] == record[phantomIdField]);\n                }).map(record => ({ [phantomIdField] : record[phantomIdField], [idField] : '...' }))\n            );\n            if (missingRows.length) {\n                const missingIds = missingRows.map(row => '#' + row[phantomIdField]).join(', ');\n                messages.push(`- \"${storeId}\" store \"rows\" section should mention added record(s) ${missingIds} sent in the request. ` +\n                    'It should contain the added records identifiers (both phantom and \"real\" ones assigned by the backend).');\n            }\n        }\n        // if short responses are enabled\n        if (this.supportShortSyncResponse) {\n            // if the data is not object, will return error\n            if (!missingRows.length && responded) {\n                if (typeof responded !== 'object' || Array.isArray(responded)) {\n                    messages.push(`- \"${storeId}\" store section should be an Object.`);\n                    result[storeId]['...'] = '...';\n                }\n                // for request to edit records, if rows is present, it must be an array\n                if (responded.rows && !Array.isArray(responded.rows)) {\n                    messages.push(`- \"${storeId}\" store \"rows\" section should be an array`);\n                    missingRows.push('...');\n                }\n                // removed if presented must be an array\n                if (responded.removed && !Array.isArray(responded.removed)) {\n                    messages.push(`- \"${storeId}\" store \"removed\" section should be an array:`);\n                    missingRemoved.push('...');\n                }\n            }\n        }\n        // if short responses are disabled\n        else {\n            // if updated records were passed in the request they should be mentioned in the response\n            if (requested?.updated) {\n                const missingUpdatedRows = requested.updated.filter(record => !respondedRows.find(row => row[idField] == record[idField]))\n                    .map(record => ({ [idField] : record[idField] }));\n                missingRows.push(...missingUpdatedRows);\n                if (missingUpdatedRows.length) {\n                    const missingIds = missingUpdatedRows.map(row => '#' + row[idField]).join(', ');\n                    messages.push(`- \"${storeId}\" store \"rows\" section should mention updated record(s) ${missingIds} sent in the request. ` +\n                        `It should contain the updated record identifiers.`);\n                    showSupportShortSyncResponseNote = true;\n                }\n            }\n            if (missingRows.length) {\n                missingRows.push('...');\n            }\n            // if removed records were passed in the request they should be mentioned in the response\n            if (requested?.removed) {\n                missingRemoved.push(\n                    ...requested.removed.filter(record => !respondedRows.find(row => row[idField] == record[idField]))\n                        .map(record => ({ [idField] : record[idField] }))\n                );\n                if (missingRemoved.length) {\n                    const missingIds = missingRemoved.map(row => '#' + row[idField]).join(', ');\n                    messages.push(`- \"${storeId}\" store \"removed\" section should mention removed record(s) ${missingIds} sent in the request. ` +\n                        `It should contain the removed record identifiers.`);\n                    result[storeId].removed = missingRemoved;\n                    missingRemoved.push('...');\n                    showSupportShortSyncResponseNote = true;\n                }\n            }\n        }\n        if (missingRows.length) {\n            result[storeId].rows = missingRows;\n        }\n        // get rid of store section if no rows/removed there\n        if (!messages.length) {\n            delete result[storeId];\n        }\n        // extend expected response w/ this store part\n        Object.assign(expectedResponse, result);\n        return { messages, showSupportShortSyncResponseNote };\n    }\n    getSyncResponseWarnings(response, requestDesc) {\n        const\n            messages         = [],\n            expectedResponse = {},\n            request          = requestDesc.pack;\n        if (!this.skipSuccessProperty) {\n            expectedResponse.success = true;\n        }\n        let showSupportShortSyncResponseNote = false;\n        // iterate stores to check properties validity\n        this.forEachCrudStore((store, storeId, storeInfo) => {\n            const warnings = this.getStoreSyncResponseWarnings(storeInfo, request?.[storeId], response[storeId], expectedResponse);\n            showSupportShortSyncResponseNote = showSupportShortSyncResponseNote || warnings.showSupportShortSyncResponseNote;\n            messages.push(...warnings.messages);\n        });\n        if (messages.length) {\n            messages.push('Please adjust your response to look like this:\\n' +\n                JSON.stringify(expectedResponse, null, 4).replace(/\"\\.\\.\\.\":\\s*\"\\.\\.\\.\"/g, ',,,').replace(/\"\\.\\.\\.\"/g, '...'));\n            if (showSupportShortSyncResponseNote) {\n                messages.push(this.supportShortSyncResponseNote);\n            }\n            messages.push(this.disableValidationNote);\n        }\n        return messages;\n    }\n    validateSyncResponse(response, request) {\n        const messages = this.getSyncResponseWarnings(response, request);\n        if (messages.length) {\n            console.warn(this.crudSyncValidationWarningPrefix + '\\n' + messages.join('\\n'));\n        }\n    }\n};\n", "import Store from '../../Core/data/Store.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\nimport ArrayHelper from '../../Core/helper/ArrayHelper.js';\nimport Objects from '../../Core/helper/util/Objects.js';\nimport Base from '../../Core/Base.js';\nimport Events from '../../Core/mixin/Events.js';\nimport AbstractCrudManagerValidation from './mixin/AbstractCrudManagerValidation.js';\n/**\n * @module Scheduler/crud/AbstractCrudManagerMixin\n */\nexport class AbstractCrudManagerError extends Error {}\nexport class CrudManagerRequestError extends AbstractCrudManagerError {\n    constructor(cfg = {}) {\n        super(cfg.message || cfg.request && StringHelper.capitalize(cfg.request?.type) + ' failed' || 'Crud Manager request failed');\n        Object.assign(this, cfg);\n        this.action = this.request?.type;\n    }\n}\nconst\n    storeSortFn     = function(lhs, rhs, sortProperty) {\n        if (lhs.store) {\n            lhs = lhs.store;\n        }\n        if (rhs.store) {\n            rhs = rhs.store;\n        }\n        lhs = lhs[sortProperty] || 0;\n        rhs = rhs[sortProperty] || 0;\n        return (lhs < rhs) ? -1 : ((lhs > rhs) ? 1 : 0);\n    },\n    // Sorter function to keep stores in loadPriority order\n    storeLoadSortFn = function(lhs, rhs) {\n        return storeSortFn(lhs, rhs, 'loadPriority');\n    },\n    // Sorter function to keep stores in syncPriority order\n    storeSyncSortFn = function(lhs, rhs) {\n        return storeSortFn(lhs, rhs, 'syncPriority');\n    };\n/**\n * An abstract mixin that supplies most of the CrudManager functionality.\n * It implements basic mechanisms of collecting stores to organize batch communication with a server.\n * It does not contain methods related to _data transfer_ nor _encoding_.\n * These methods are to be provided in sub-classes.\n * Out of the box there are mixins implementing {@link Scheduler/crud/transport/AjaxTransport support of AJAX for data transferring}\n * and {@link Scheduler/crud/encoder/JsonEncoder JSON for data encoding system}.\n * For example this is how we make a model that will implement CrudManager protocol and use AJAX/JSON to pass the data\n * to the server:\n *\n * ```javascript\n * class SystemSettings extends JsonEncode(AjaxTransport(AbstractCrudManagerMixin(Model))) {\n *     ...\n * }\n * ```\n *\n * ## Data transfer and encoding methods\n *\n * These are methods that must be provided by subclasses of this class:\n *\n * - {@link #function-sendRequest}\n * - {@link #function-cancelRequest}\n * - {@link #function-encode}\n * - {@link #function-decode}\n *\n * @mixin\n * @mixes Core/mixin/Delayable\n * @mixes Core/mixin/Events\n * @mixes Scheduler/crud/mixin/AbstractCrudManagerValidation\n * @abstract\n */\nexport default Target => {\n    // Trigger $meta calculation to get up-to-date is \"isXXX\" flags\n    // (kinky construction to avoid production minification faced in Angular https://github.com/bryntum/support/issues/2889)\n    Target.$$meta = Target.$meta;\n    const mixins = [];\n    // These two mixins are mixed in the Scheduling Engine code ..but in its own way\n    // so that Base.mixin() cannot understand that they are already there and applies them 2nd time\n    if (!Target.isEvents) {\n        mixins.push(Events);\n    }\n    if (!Target.isDelayable) {\n        mixins.push(Delayable);\n    }\n    mixins.push(AbstractCrudManagerValidation);\n    return class AbstractCrudManagerMixin extends (Target || Base).mixin(...mixins) {\n        /**\n         * Fires before server response gets applied to the stores. Return `false` to prevent data applying.\n         * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.\n         * @event beforeResponseApply\n         * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n         * @param {'sync'|'load'} requestType The request type (`sync` or `load`).\n         * @param {Object} response The decoded server response object.\n         */\n        /**\n         * Fires before loaded data get applied to the stores. Return `false` to prevent data applying.\n         * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.\n         * @event beforeLoadApply\n         * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n         * @param {Object} response The decoded server response object.\n         * @param {Object} options Options provided to the {@link #function-load} method.\n         */\n        /**\n         * Fires before sync response data get applied to the stores. Return `false` to prevent data applying.\n         * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.\n         * @event beforeSyncApply\n         * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n         * @param {Object} response The decoded server response object.\n         */\n        static get $name() {\n            return 'AbstractCrudManagerMixin';\n        }\n        //region Default config\n        static get defaultConfig() {\n            return {\n                /**\n                 * The server revision stamp.\n                 * The _revision stamp_ is a number which should be incremented after each server-side change.\n                 * This property reflects the current version of the data retrieved from the server and gets updated\n                 * after each {@link #function-load} and {@link #function-sync} call.\n                 * @property {Number}\n                 * @readonly\n                 * @category CRUD\n                 */\n                crudRevision : null,\n                /**\n                 * A list of registered stores whose server communication will be collected into a single batch.\n                 * Each store is represented by a _store descriptor_.\n                 * @member {CrudManagerStoreDescriptor[]} crudStores\n                 * @category CRUD\n                 */\n                /**\n                 * Sets the list of stores controlled by the CRUD manager.\n                 *\n                 * When adding a store to the CrudManager, make sure the server response format is correct for `load`\n                 * and `sync` requests. Learn more in the\n                 * [Working with data](#Scheduler/guides/data/crud_manager.md#loading-data) guide.\n                 *\n                 * Store can be provided by itself, its storeId or as a _store descriptor_.\n                 * @config {Core.data.Store[]|String[]|CrudManagerStoreDescriptor[]}\n                 * @category CRUD\n                 */\n                crudStores : [],\n                /**\n                 * Name of a store property to retrieve store identifiers from. Make sure you have an instance of a\n                 * store to use it by id. Store identifier is used as a container name holding corresponding store data\n                 * while transferring them to/from the server. By default, `storeId` property is used. And in case a\n                 * container identifier has to differ this config can be used:\n                 *\n                 * ```javascript\n                 * class CatStore extends Store {\n                 *     static configurable = {\n                 *         // store id is \"meow\" but for sending/receiving store data\n                 *         // we want to have \"cats\" container in JSON, so we create a new property \"storeIdForCrud\"\n                 *         id             : 'meow',\n                 *         storeIdForCrud : 'cats'\n                 *     }\n                 * });\n                 *\n                 * // create an instance to use a store by id\n                 * new CatStore();\n                 *\n                 * class MyCrudManager extends CrudManager {\n                 *     ...\n                 *     crudStores           : ['meow'],\n                 *     // crud manager will get store identifier from \"storeIdForCrud\" property\n                 *     storeIdProperty  : 'storeIdForCrud'\n                 * });\n                 * ```\n                 * The `storeIdProperty` property can also be specified directly on a store:\n                 *\n                 * ```javascript\n                 * class CatStore extends Store {\n                 *     static configurable = {\n                 *         // storeId is \"meow\" but for sending/receiving store data\n                 *         // we want to have \"cats\" container in JSON\n                 *         id              : 'meow',\n                 *         // so we create a new property \"storeIdForCrud\"..\n                 *         storeIdForCrud  : 'cats',\n                 *         // and point CrudManager to use it as the store identifier source\n                 *         storeIdProperty  : 'storeIdForCrud'\n                 *     }\n                 * });\n                 *\n                 * class DogStore extends Store {\n                 *     static configurable = {\n                 *         // storeId is \"dogs\" and it will be used as a container name for the store data\n                 *         storeId : 'dogs',\n                 *         // id is set to get a store by identifier\n                 *         id      : 'dogs'\n                 *     }\n                 * });\n                 *\n                 * // create an instance to use a store by id\n                 * new CatStore();\n                 * new DogStore();\n                 *\n                 * class MyCrudManager extends CrudManager {\n                 *     ...\n                 *     crudStores : ['meow', 'dogs']\n                 * });\n                 * ```\n                 * @config {String}\n                 * @category CRUD\n                 */\n                storeIdProperty : 'storeId',\n                crudFilterParam : 'filter',\n                /**\n                 * Sends request to the server.\n                 * @function sendRequest\n                 * @param {Object} request The request to send. An object having following properties:\n                 * @param {'load'|'sync'} request.type Request type, can be either `load` or `sync`\n                 * @param {String} request.data {@link #function-encode Encoded} request.\n                 * @param {Function} request.success Callback to be started on successful request transferring\n                 * @param {Function} request.failure Callback to be started on request transfer failure\n                 * @param {Object} request.thisObj `this` reference for the above `success` and `failure` callbacks\n                 * @returns {Promise} The request promise.\n                 * @abstract\n                 */\n                /**\n                 * Cancels request to the server.\n                 * @function cancelRequest\n                 * @param {Promise} promise The request promise to cancel (a value returned by corresponding\n                 * {@link #function-sendRequest} call).\n                 * @param {Function} reject Reject handle of the corresponding promise\n                 * @abstract\n                 */\n                /**\n                 * Encodes request to the server.\n                 * @function encode\n                 * @param {Object} request The request to encode.\n                 * @returns {String} The encoded request.\n                 * @abstract\n                 */\n                /**\n                 * Decodes response from the server.\n                 * @function decode\n                 * @param {String} response The response to decode.\n                 * @returns {Object} The decoded response.\n                 * @abstract\n                 */\n                transport : {},\n                /**\n                 * When `true` forces the CRUD manager to process responses depending on their `type` attribute.\n                 * So `load` request may be responded with `sync` response for example.\n                 * Can be used for smart server logic allowing the server to decide when it's better to respond with a\n                 * complete data set (`load` response) or it's enough to return just a delta (`sync` response).\n                 * @config {Boolean}\n                 * @default\n                 * @category CRUD\n                 */\n                trackResponseType : false,\n                /**\n                 * When `true` the Crud Manager does not require all updated and removed records to be mentioned in the\n                 * *sync* response. In this case response should include only server side changes.\n                 *\n                 * **Please note that added records should still be mentioned in response to provide real identifier\n                 * instead of the phantom one.**\n                 * @config {Boolean}\n                 * @default\n                 * @category CRUD\n                 */\n                supportShortSyncResponse : true,\n                /**\n                 * Field name to be used to transfer a phantom record identifier.\n                 * @config {String}\n                 * @default\n                 * @category CRUD\n                 */\n                phantomIdField : '$PhantomId',\n                /**\n                 * Field name to be used to transfer a phantom parent record identifier.\n                 * @config {String}\n                 * @default\n                 * @category CRUD\n                 */\n                phantomParentIdField : '$PhantomParentId',\n                /**\n                 * Specify `true` to automatically call {@link #function-load} method on the next frame after creation.\n                 *\n                 * Called on the next frame to allow a Scheduler (or similar) linked to a standalone CrudManager to\n                 * register its stores before loading starts.\n                 *\n                 * @config {Boolean}\n                 * @default\n                 * @category CRUD\n                 */\n                autoLoad : false,\n                /**\n                 * The timeout in milliseconds to wait before persisting changes to the server.\n                 * Used when {@link #config-autoSync} is set to `true`.\n                 * @config {Number}\n                 * @default\n                 * @category CRUD\n                 */\n                autoSyncTimeout : 100,\n                /**\n                 * `true` to automatically persist store changes after edits are made in any of the stores monitored.\n                 * Please note that sync request will not be invoked immediately but only after\n                 * {@link #config-autoSyncTimeout} interval.\n                 * @config {Boolean}\n                 * @default\n                 * @category CRUD\n                 */\n                autoSync : false,\n                /**\n                 * `True` to reset identifiers (defined by `idField` config) of phantom records before submitting them\n                 * to the server.\n                 * @config {Boolean}\n                 * @default\n                 * @category CRUD\n                 */\n                resetIdsBeforeSync : true,\n                /**\n                 * @member {CrudManagerStoreDescriptor[]} syncApplySequence\n                 * An array of stores presenting an alternative sync responses apply order.\n                 * Each store is represented by a _store descriptor_.\n                 * @category CRUD\n                 */\n                /**\n                 * An array of store identifiers sets an alternative sync responses apply order.\n                 * By default, the order in which sync responses are applied to the stores is the same as they\n                 * registered in. But in case of some tricky dependencies between stores this order can be changed:\n                 *\n                 *```javascript\n                 * class MyCrudManager extends CrudManager {\n                 *     // register stores (will be loaded in this order: 'store1' then 'store2' and finally 'store3')\n                 *     crudStores : ['store1', 'store2', 'store3'],\n                 *     // but we apply changes from server to them in an opposite order\n                 *     syncApplySequence : ['store3', 'store2', 'store1']\n                 * });\n                 *```\n                 * @config {String[]}\n                 * @category CRUD\n                 */\n                syncApplySequence : [],\n                orderedCrudStores : [],\n                /**\n                 * `true` to write all fields from the record to the server.\n                 * If set to `false` it will only send the fields that were modified.\n                 * Note that any fields that have {@link Core/data/field/DataField#config-persist} set to `false` will\n                 * still be ignored and fields having {@link Core/data/field/DataField#config-alwaysWrite} set to `true`\n                 * will always be included.\n                 * @config {Boolean}\n                 * @default\n                 * @category CRUD\n                 */\n                writeAllFields : false,\n                crudIgnoreUpdates : 0,\n                autoSyncSuspendCounter : 0,\n                // Flag that shows if crud manager performed successful load request\n                crudLoaded : false,\n                applyingLoadResponse : false,\n                applyingSyncResponse : false,\n                callOnFunctions : true\n            };\n        }\n        static configurable = {\n            /**\n             * Convenience shortcut to set only the url to load from, when you do not need to supply any other config\n             * options in the `load` section of the `transport` config.\n             *\n             * Using `loadUrl`:\n             * ```javascript\n             * {\n             *     loadUrl : 'read.php\n             * }\n             * ```\n             *\n             * Equals the following `transport` config:\n             * ```javascript\n             * {\n             *     transport : {\n             *         load : {\n             *             url : 'read.php'\n             *         }\n             *     }\n             * }\n             * ```\n             *\n             * When read at runtime, it will return the value from `transport.load.url`.\n             *\n             * @prp {String}\n             */\n            loadUrl : null,\n            /**\n             * Convenience shortcut to set only the url to sync to, when you do not need to supply any other config\n             * options in the `sync` section of the `transport` config.\n             *\n             * Using `loadUrl`:\n             * ```javascript\n             * {\n             *     syncUrl : 'sync.php\n             * }\n             * ```\n             *\n             * Equals the following `transport` config:\n             * ```javascript\n             * {\n             *     transport : {\n             *         load : {\n             *             url : 'sync.php'\n             *         }\n             *     }\n             * }\n             * ```\n             *\n             * When read at runtime, it will return the value from `transport.sync.url`.\n             *\n             * @prp {String}\n             */\n            syncUrl : null,\n            /**\n             * Specify as `true` to force sync requests to be sent when calling `sync()`, even if there are no local\n             * changes. Useful in a polling scenario, to keep client up to date with the backend.\n             * @prp {Boolean}\n             */\n            forceSync : null\n        };\n        static delayable = {\n            // Postponed to next frame, to allow Scheduler created after CrudManager to inject its stores\n            // (timeRanges, resourceTimeRanges)\n            doAutoLoad : 'raf'\n        };\n        get isCrudManager() {\n            return true;\n        }\n        //endregion\n        //region Init\n        construct(config = {}) {\n            this._requestId = 0;\n            this.activeRequests = {};\n            this.crudStoresIndex = {};\n            super.construct(config);\n        }\n        afterConstruct() {\n            super.afterConstruct();\n            if (this.autoLoad) {\n                this._autoLoadPromise = this.doAutoLoad();\n            }\n        }\n        //endregion\n        //region Configs\n        get loadUrl() {\n            return this.transport?.load?.url;\n        }\n        updateLoadUrl(url) {\n            ObjectHelper.setPath(this, 'transport.load.url', url);\n        }\n        get syncUrl() {\n            return this.transport?.sync?.url;\n        }\n        updateSyncUrl(url) {\n            ObjectHelper.setPath(this, 'transport.sync.url', url);\n        }\n        //endregion\n        //region Store descriptors & index\n        /**\n         * Returns a registered store descriptor.\n         * @param {String|Core.data.Store} storeId The store identifier or registered store instance.\n         * @returns {CrudManagerStoreDescriptor} The descriptor of the store.\n         * @category CRUD\n         */\n        getStoreDescriptor(storeId) {\n            if (!storeId) return null;\n            if (storeId instanceof Store) return this.crudStores.find(storeDesc => storeDesc.store === storeId);\n            if (typeof storeId === 'object') return this.crudStoresIndex[storeId.storeId];\n            return this.crudStoresIndex[storeId] || this.getStoreDescriptor(Store.getStore(storeId));\n        }\n        fillStoreDescriptor(descriptor) {\n            const\n                { store } = descriptor,\n                {\n                    storeIdProperty = this.storeIdProperty,\n                    modelClass\n                }         = store;\n            if (!descriptor.storeId) {\n                descriptor.storeId = store[storeIdProperty] || store.id;\n            }\n            if (!descriptor.idField) {\n                descriptor.idField = modelClass.idField;\n            }\n            if (!descriptor.phantomIdField) {\n                descriptor.phantomIdField = modelClass.phantomIdField;\n            }\n            if (!descriptor.phantomParentIdField) {\n                descriptor.phantomParentIdField = modelClass.phantomParentIdField;\n            }\n            if (!('writeAllFields' in descriptor)) {\n                descriptor.writeAllFields = store.writeAllFields;\n            }\n            return descriptor;\n        }\n        updateCrudStoreIndex() {\n            const\n                crudStoresIndex = this.crudStoresIndex = {};\n            this.crudStores.forEach(store => store.storeId && (crudStoresIndex[store.storeId] = store));\n        }\n        //endregion\n        //region Store collection (add, remove, get & iterate)\n        /**\n         * Returns a registered store.\n         * @param {String} storeId Store identifier.\n         * @returns {Core.data.Store} Found store instance.\n         * @category CRUD\n         */\n        getCrudStore(storeId) {\n            const storeDescriptor = this.getStoreDescriptor(storeId);\n            return storeDescriptor?.store;\n        }\n        forEachCrudStore(fn, thisObj = this) {\n            if (!fn) {\n                throw new Error('Iterator function must be provided');\n            }\n            this.crudStores.every(store =>\n                fn.call(thisObj, store.store, store.storeId, store) !== false\n            );\n        }\n        set crudStores(stores) {\n            this._crudStores = [];\n            this.addCrudStore(stores);\n            // Ensure preconfigured stores stay stable at the start of the array when\n            // addPrioritizedStore attempts to insert in order. Only featured gantt/scheduler stores\n            // must participate in the ordering. If they were configured in, they must not move.\n            for (const store of this._crudStores) {\n                store.loadPriority = store.syncPriority = 0;\n            }\n        }\n        get crudStores() {\n            return this._crudStores;\n        }\n        get orderedCrudStores() {\n            return this._orderedCrudStores;\n        }\n        set orderedCrudStores(stores) {\n            return this._orderedCrudStores = stores;\n        }\n        set syncApplySequence(stores) {\n            this._syncApplySequence = [];\n            this.addStoreToApplySequence(stores);\n        }\n        get syncApplySequence() {\n            return this._syncApplySequence;\n        }\n        internalAddCrudStore(store) {\n            const\n                me = this;\n            let storeInfo;\n            // if store instance provided\n            if (store instanceof Store) {\n                storeInfo = { store };\n            }\n            else if (typeof store === 'object') {\n                if (!store.store) {\n                    // not a store descriptor, assume it is a store config\n                    store = {\n                        storeId : store.id,\n                        store   : new Store(store)\n                    };\n                }\n                storeInfo = store;\n            }\n            // if it's a store identifier\n            else {\n                storeInfo = { store : Store.getStore(store) };\n            }\n            me.fillStoreDescriptor(storeInfo);\n            // store instance\n            store = storeInfo.store;\n            // if the store has \"setCrudManager\" hook - use it\n            if (store.setCrudManager) {\n                store.setCrudManager(me);\n            }\n            // otherwise decorate the store w/ \"crudManager\" property\n            else {\n                store.crudManager = me;\n            }\n            // Stores have a defaultConfig for pageSize. CrudManager does not support that.\n            store.pageSize = null;\n            // Prevent AjaxStores from performing their own CRUD operations if CrudManager is configured with an URL\n            if (me.loadUrl || me.syncUrl) {\n                store.autoCommit = false;\n                store.autoLoad = false;\n                if (store.createUrl || store.updateUrl || store.deleteUrl || store.readUrl) {\n                    console.warn('You have configured an URL on a Store that is handled by a CrudManager that is also configured with an URL. The Store URL\\'s should be removed.');\n                }\n            }\n            // listen to store changes\n            me.bindCrudStoreListeners(store);\n            return storeInfo;\n        }\n        /**\n         * Adds a store to the collection.\n         *\n         *```javascript\n         * // append stores to the end of collection\n         * crudManager.addCrudStore([\n         *     store1,\n         *     // storeId\n         *     'bar',\n         *     // store descriptor\n         *     {\n         *         storeId : 'foo',\n         *         store   : store3\n         *     },\n         *     {\n         *         storeId         : 'bar',\n         *         store           : store4,\n         *         // to write all fields of modified records\n         *         writeAllFields  : true\n         *     }\n         * ]);\n         *```\n         *\n         * **Note:** Order in which stores are kept in the collection is very essential sometimes.\n         * Exactly in this order the loaded data will be put into each store.\n         *\n         * When adding a store to the CrudManager, make sure the server response format is correct for `load` and `sync`\n         * requests. Learn more in the [Working with data](#Scheduler/guides/data/crud_manager.md#loading-data) guide.\n         *\n         * @param {Core.data.Store|String|CrudManagerStoreDescriptor|Core.data.Store[]|String[]|CrudManagerStoreDescriptor[]} store\n         * A store or list of stores. Each store might be specified by its instance, `storeId` or _descriptor_.\n         * @param {Number} [position] The relative position of the store. If `fromStore` is specified the position\n         * will be taken relative to it. If not specified then store(s) will be appended to the end of collection.\n         * Otherwise, it will be just a position in stores collection.\n         *\n         * ```javascript\n         * // insert stores store4, store5 to the start of collection\n         * crudManager.addCrudStore([ store4, store5 ], 0);\n         * ```\n         *\n         * @param {String|Core.data.Store|CrudManagerStoreDescriptor} [fromStore] The store relative to which position\n         * should be calculated. Can be defined as a store identifier, instance or descriptor (the result of\n         * {@link #function-getStoreDescriptor} call).\n         *\n         * ```javascript\n         * // insert store6 just before a store having storeId equal to 'foo'\n         * crudManager.addCrudStore(store6, 0, 'foo');\n         *\n         * // insert store7 just after store3 store\n         * crudManager.addCrudStore(store7, 1, store3);\n         * ```\n         * @category CRUD\n         */\n        addCrudStore(store, position, fromStore) {\n            store = ArrayHelper.asArray(store);\n            if (!store?.length) {\n                return;\n            }\n            const\n                me     = this,\n                stores = store.map(me.internalAddCrudStore, me);\n            // if no position specified then append stores to the end\n            if (typeof position === 'undefined') {\n                me.crudStores.push(...stores);\n            }\n            // if position specified\n            else {\n                // if specified the store relative to which we should insert new one(-s)\n                if (fromStore) {\n                    if (fromStore instanceof Store || typeof fromStore !== 'object') fromStore = me.getStoreDescriptor(fromStore);\n                    // get its position\n                    position += me.crudStores.indexOf(fromStore);\n                }\n                // insert new store(-s)\n                me.crudStores.splice(position, 0, ...stores);\n            }\n            me.orderedCrudStores.push(...stores);\n            me.updateCrudStoreIndex();\n        }\n        // Adds configured scheduler stores to the store collection ensuring correct order\n        // unless they're already registered.\n        addPrioritizedStore(store) {\n            const me = this;\n            if (!me.hasCrudStore(store)) {\n                me.addCrudStore(store, ArrayHelper.findInsertionIndex(store, me.crudStores, storeLoadSortFn));\n            }\n            if (!me.hasApplySequenceStore(store)) {\n                me.addStoreToApplySequence(store, ArrayHelper.findInsertionIndex(store, me.syncApplySequence, storeSyncSortFn));\n            }\n        }\n        hasCrudStore(store) {\n            return this.crudStores?.some(s => s === store || s.store === store || s.storeId === store);\n        }\n        /**\n         * Removes a store from collection. If the store was registered in alternative sync sequence list\n         * it will be removed from there as well.\n         *\n         * ```javascript\n         * // remove store having storeId equal to \"foo\"\n         * crudManager.removeCrudStore(\"foo\");\n         *\n         * // remove store3\n         * crudManager.removeCrudStore(store3);\n         * ```\n         *\n         * @param {CrudManagerStoreDescriptor|String|Core.data.Store} store The store to remove. Either the store\n         * descriptor, store identifier or store itself.\n         * @category CRUD\n         */\n        removeCrudStore(store) {\n            const\n                me         = this,\n                stores     = me.crudStores,\n                foundStore = stores.find(s => s === store || s.store === store || s.storeId === store);\n            if (foundStore) {\n                // unbind store listeners\n                me.unbindCrudStoreListeners(foundStore.store);\n                delete me.crudStoresIndex[foundStore.storeId];\n                ArrayHelper.remove(stores, foundStore);\n                if (me.syncApplySequence) {\n                    me.removeStoreFromApplySequence(store);\n                }\n            }\n            else {\n                throw new Error('Store not found in stores collection');\n            }\n        }\n        //endregion\n        //region Store listeners\n        bindCrudStoreListeners(store) {\n            store.ion({\n                name : store.id,\n                // When a tentatively added record gets confirmed as permanent, this signals a change\n                addConfirmed : 'onCrudStoreChange',\n                change       : 'onCrudStoreChange',\n                destroy      : 'onCrudStoreDestroy',\n                thisObj      : this\n            });\n        }\n        unbindCrudStoreListeners(store) {\n            this.detachListeners(store.id);\n        }\n        //endregion\n        //region Apply sequence\n        /**\n         * Adds a store to the alternative sync responses apply sequence.\n         * By default, the order in which sync responses are applied to the stores is the same as they registered in.\n         * But this order can be changes either on construction step using {@link #config-syncApplySequence} option\n         * or by calling this method.\n         *\n         * **Please note**, that if the sequence was not initialized before this method call then\n         * you will have to do it yourself like this for example:\n         *\n         * ```javascript\n         * // alternative sequence was not set for this crud manager\n         * // so let's fill it with existing stores keeping the same order\n         * crudManager.addStoreToApplySequence(crudManager.crudStores);\n         *\n         * // and now we can add our new store\n         *\n         * // we will load its data last\n         * crudManager.addCrudStore(someNewStore);\n         * // but changes to it will be applied first\n         * crudManager.addStoreToApplySequence(someNewStore, 0);\n         * ```\n         * add registered stores to the sequence along with the store(s) you want to add\n         *\n         * @param {Core.data.Store|CrudManagerStoreDescriptor|Core.data.Store[]|CrudManagerStoreDescriptor[]} store The\n         * store to add or its _descriptor_ (or array of stores or descriptors).\n         * @param {Number} [position] The relative position of the store. If `fromStore` is specified the position\n         * will be taken relative to it. If not specified then store(s) will be appended to the end of collection.\n         * Otherwise, it will be just a position in stores collection.\n         *\n         * ```javascript\n         * // insert stores store4, store5 to the start of sequence\n         * crudManager.addStoreToApplySequence([ store4, store5 ], 0);\n         * ```\n         * @param {String|Core.data.Store|CrudManagerStoreDescriptor} [fromStore] The store relative to which position\n         * should be calculated. Can be defined as a store identifier, instance or its descriptor (the result of\n         * {@link #function-getStoreDescriptor} call).\n         *\n         * ```javascript\n         * // insert store6 just before a store having storeId equal to 'foo'\n         * crudManager.addStoreToApplySequence(store6, 0, 'foo');\n         *\n         * // insert store7 just after store3 store\n         * crudManager.addStoreToApplySequence(store7, 1, store3);\n         * ```\n         * @category CRUD\n         */\n        addStoreToApplySequence(store, position, fromStore) {\n            if (!store) {\n                return;\n            }\n            store = ArrayHelper.asArray(store);\n            const\n                me   = this,\n                // loop over list of stores to add\n                data = store.reduce((collection, store) => {\n                    const s = me.getStoreDescriptor(store);\n                    s && collection.push(s);\n                    return collection;\n                }, []);\n            // if no position specified then append stores to the end\n            if (typeof position === 'undefined') {\n                me.syncApplySequence.push(...data);\n                // if position specified\n            }\n            else {\n                let pos = position;\n                // if specified the store relative to which we should insert new one(-s)\n                if (fromStore) {\n                    if (fromStore instanceof Store || typeof fromStore !== 'object') fromStore = me.getStoreDescriptor(fromStore);\n                    // get its position\n                    pos += me.syncApplySequence.indexOf(fromStore);\n                }\n                // insert new store(-s)\n                //me.syncApplySequence.splice.apply(me.syncApplySequence, [].concat([pos, 0], data));\n                me.syncApplySequence.splice(pos, 0, ...data);\n            }\n            const sequenceKeys = me.syncApplySequence.map(({ storeId }) => storeId);\n            me.orderedCrudStores = [...me.syncApplySequence];\n            me.crudStores.forEach(storeDesc => {\n                if (!sequenceKeys.includes(storeDesc.storeId)) {\n                    me.orderedCrudStores.push(storeDesc);\n                }\n            });\n        }\n        /**\n         * Removes a store from the alternative sync sequence.\n         *\n         * ```javascript\n         * // remove store having storeId equal to \"foo\"\n         * crudManager.removeStoreFromApplySequence(\"foo\");\n         * ```\n         *\n         * @param {CrudManagerStoreDescriptor|String|Core.data.Store} store The store to remove. Either the store\n         * descriptor, store identifier or store itself.\n         * @category CRUD\n         */\n        removeStoreFromApplySequence(store) {\n            const index = this.syncApplySequence.findIndex(s => s === store || s.store === store || s.storeId === store);\n            if (index > -1) {\n                this.syncApplySequence.splice(index, 1);\n                // ordered crud stores list starts with syncApplySequence, we can use same index\n                this.orderedCrudStores.splice(index, 1);\n            }\n        }\n        hasApplySequenceStore(store) {\n            return this.syncApplySequence.some(s => s === store || s.store === store || s.storeId === store);\n        }\n        //endregion\n        //region Events\n        // Remove stores that are destroyed, to not try and apply response changes etc. to them\n        onCrudStoreDestroy({ source : store }) {\n            this.removeCrudStore(store);\n        }\n        onCrudStoreChange(event) {\n            const me = this;\n            if (me.crudIgnoreUpdates) {\n                return;\n            }\n            /**\n             * Fires when data in any of the registered data stores is changed.\n             * ```javascript\n             *     crudManager.on('hasChanges', function (crud) {\n             *         // enable persist changes button when some store gets changed\n             *         saveButton.enable();\n             *     });\n             * ```\n             *\n             * You can suspend this event with {@link #function-suspendChangeTracking} API call.\n             *\n             * @event hasChanges\n             * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n             */\n            if (me.crudStoreHasChanges(event?.source)) {\n                me.trigger('hasChanges');\n                if (me.autoSync) {\n                    me.scheduleAutoSync();\n                }\n            }\n            else {\n                me.trigger('noChanges');\n            }\n        }\n        /**\n         * Suspends automatic sync upon store changes. Can be called multiple times (it uses an internal counter).\n         * @category CRUD\n         */\n        suspendAutoSync() {\n            this.autoSyncSuspendCounter++;\n        }\n        /**\n         * Resumes automatic sync upon store changes. Will schedule a sync if the internal counter is 0.\n         * @param {Boolean} [doSync=true] Pass `true` to schedule a sync after resuming (if there are pending\n         * changes) and `false` to not persist the changes.\n         * @category CRUD\n         */\n        resumeAutoSync(doSync = true) {\n            const me = this;\n            me.autoSyncSuspendCounter--;\n            if (me.autoSyncSuspendCounter <= 0) {\n                me.autoSyncSuspendCounter = 0;\n                // if configured to trigger persisting and there are changes\n                if (doSync && me.autoSync && me.crudStoreHasChanges()) {\n                    me.scheduleAutoSync();\n                }\n            }\n        }\n        get isAutoSyncSuspended() {\n            return this.autoSyncSuspendCounter > 0;\n        }\n        scheduleAutoSync() {\n            const me = this;\n            // add deferred call if it's not scheduled yet\n            if (!me.hasTimeout('autoSync') && !me.isAutoSyncSuspended) {\n                me.setTimeout({\n                    name : 'autoSync',\n                    fn   : () => {\n                        me.sync().catch(error => {\n                        });\n                    },\n                    delay : me.autoSyncTimeout\n                });\n            }\n        }\n        async triggerFailedRequestEvents(request, response, responseText, fetchOptions) {\n            const { options, type : requestType } = request;\n            /**\n             * Fires when a request fails.\n             * @event requestFail\n             * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager instance.\n             * @param {'sync'|'load'} requestType The request type (`sync` or `load`).\n             * @param {Object} response The decoded server response object.\n             * @param {String} responseText The raw server response text\n             * @param {Object} responseOptions The response options.\n             */\n            this.trigger('requestFail', { requestType, response, responseText, responseOptions : fetchOptions });\n            /**\n             * Fires when a {@link #function-load load request} fails.\n             * @event loadFail\n             * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager instance.\n             * @param {Object} response The decoded server response object.\n             * @param {String} responseText The raw server response text\n             * @param {Object} responseOptions The response options.\n             * @params {Object} options Options provided to the {@link #function-load} method.\n             */\n            /**\n             * Fires when a {@link #function-sync sync request} fails.\n             * @event syncFail\n             * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager instance.\n             * @param {Object} response The decoded server response object.\n             * @param {String} responseText The raw server response text\n             * @param {Object} responseOptions The response options.\n             */\n            this.trigger(requestType + 'Fail', { response, responseOptions : fetchOptions, responseText, options });\n        }\n        async internalOnResponse(request, responseText, fetchOptions) {\n            const\n                me                              = this,\n                response                        = responseText ? me.decode(responseText) : null,\n                { options, type : requestType } = request;\n            if (responseText && !response) {\n                console.error('Failed to parse response: ' + responseText);\n            }\n            if (!response || (me.skipSuccessProperty ? response.success === false : !response.success)) {\n                me.triggerFailedRequestEvents(request, response, responseText, fetchOptions);\n            }\n            else if (\n                me.trigger('beforeResponseApply', { requestType, response }) !== false &&\n                me.trigger(`before${StringHelper.capitalize(requestType)}Apply`, { response, options }) !== false\n            ) {\n                me.crudRevision = response.revision;\n                await me.applyResponse(request, response, options);\n                // Might have been destroyed while applying response\n                if (me.isDestroyed) {\n                    return;\n                }\n                /**\n                 * Fires on successful request completion after data gets applied to the stores.\n                 * @event requestDone\n                 * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n                 * @param {'sync'|'load'} requestType The request type (`sync` or `load`).\n                 * @param {Object} response The decoded server response object.\n                 * @param {Object} responseOptions The server response options.\n                 */\n                me.trigger('requestDone', { requestType, response, responseOptions : fetchOptions });\n                /**\n                 * Fires on successful {@link #function-load load request} completion after data gets loaded to the stores.\n                 * @event load\n                 * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n                 * @param {Object} response The decoded server response object.\n                 * @param {Object} responseOptions The server response options.\n                 * @params {Object} options Options provided to the {@link #load} method.\n                 */\n                /**\n                 * Fires on successful {@link #function-sync sync request} completion.\n                 * @event sync\n                 * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n                 * @param {Object} response The decoded server response object.\n                 * @param {Object} responseOptions The server response options.\n                 */\n                me.trigger(requestType, { response, responseOptions : fetchOptions, options });\n                if (requestType === 'load' || !me.crudStoreHasChanges()) {\n                    /**\n                     * Fires when registered stores get into state when they don't have any\n                     * not persisted change. This happens after {@link #function-load} or {@link #function-sync} request\n                     * completion. Or this may happen after a record update which turns its fields back to their original state.\n                     *\n                     * ```javascript\n                     * crudManager.on('nochanges', function (crud) {\n                     *     // disable persist changes button when there is no changes\n                     *     saveButton.disable();\n                     * });\n                     * ```\n                     *\n                     * You can suspend this event with {@link #function-suspendChangeTracking} API call.\n                     *\n                     * @event noChanges\n                     * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n                     */\n                    me.trigger('noChanges');\n                    if (requestType === 'load') {\n                        me.emitCrudStoreEvents(request.pack.stores, 'afterRequest');\n                    }\n                }\n            }\n            return response;\n        }\n        //endregion\n        //region Changes tracking\n        /**\n         * Suspends {@link #event-hasChanges} and {@link #event-noChanges} events.\n         * @category CRUD\n         */\n        suspendChangeTracking() {\n            this.crudIgnoreUpdates++;\n        }\n        /**\n         * Resumes {@link #event-hasChanges} and {@link #event-noChanges} events. By default, it will check for changes\n         * and if there are any, `hasChanges` or `noChanges` event will be triggered.\n         * @param {Boolean} [skipChangeCheck]\n         * @category CRUD\n         */\n        resumeChangeTracking(skipChangeCheck) {\n            if (this.crudIgnoreUpdates && !--this.crudIgnoreUpdates && !skipChangeCheck) {\n                this.onCrudStoreChange();\n            }\n        }\n        /**\n         * Returns `true` if changes tracking is suspended\n         * @property {Boolean}\n         * @readonly\n         * @category CRUD\n         */\n        get isChangeTrackingSuspended() {\n            return this.crudIgnoreUpdates > 0;\n        }\n        /**\n         * Returns `true` if any of registered stores (or some particular store) has non persisted changes.\n         *\n         * ```javascript\n         * // if we have any unsaved changes\n         * if (crudManager.crudStoreHasChanges()) {\n         *     // persist them\n         *     crudManager.sync();\n         * // otherwise\n         * } else {\n         *     alert(\"There are no unsaved changes...\");\n         * }\n         * ```\n         *\n         * @param {String|Core.data.Store} [storeId] The store identifier or store instance to check changes for.\n         * If not specified then will check changes for all of the registered stores.\n         * @returns {Boolean} `true` if there are not persisted changes.\n         * @category CRUD\n         */\n        crudStoreHasChanges(storeId) {\n            return storeId\n                ? this.isCrudStoreDirty(this.getCrudStore(storeId))\n                : this.crudStores.some(config => this.isCrudStoreDirty(config.store));\n        }\n        isCrudStoreDirty(store) {\n            return Boolean(store.changes);\n        }\n        //endregion\n        //region Load\n        doAutoLoad() {\n            return this.load().catch(error => {\n            });\n        }\n        emitCrudStoreEvents(stores, eventName, eventParams) {\n            const event = { action : 'read' + eventName, ...eventParams };\n            for (const store of this.crudStores) {\n                if (stores.includes(store.storeId)) {\n                    store.store.trigger(eventName, event);\n                }\n            }\n        }\n        getLoadPackage(options) {\n            const\n                pack        = {\n                    type      : 'load',\n                    requestId : this.requestId\n                },\n                stores      = this.crudStores,\n                optionsCopy = Object.assign({}, options);\n            // This is a special option which does not apply to a store.\n            // It's used as options to the AjaxTransport#sendRequest method\n            delete optionsCopy.request;\n            pack.stores = stores.map(store => {\n                const\n                    opts     = optionsCopy?.[store.storeId],\n                    pageSize = store.pageSize || store.store?.pageSize;\n                if (opts || pageSize) {\n                    const\n                        params = Object.assign({\n                            storeId : store.storeId,\n                            page    : 1\n                        }, opts);\n                    if (pageSize) {\n                        params.pageSize = pageSize;\n                    }\n                    store.currentPage = params.page;\n                    // Remove from common request options\n                    if (opts) {\n                        delete optionsCopy[store.storeId];\n                    }\n                    return params;\n                }\n                return store.storeId;\n            });\n            // Apply common request options\n            Object.assign(pack, optionsCopy);\n            return pack;\n        }\n        loadCrudStore(store, data, options) {\n            const rows = data?.rows;\n            if (options?.append || data?.append) {\n                // Add records clean - that is they are not treated as new, syncable records\n                // which need syncing with the server. They are *from* the server.\n                store.add(rows, false, { clean : true });\n            }\n            else {\n                store.data = rows;\n            }\n            store.trigger('load', { data : rows });\n        }\n        loadDataToCrudStore(storeDesc, data, options) {\n            const\n                store = storeDesc.store,\n                rows  = data?.rows;\n            store.__loading = true;\n            if (rows) {\n                this.loadCrudStore(store, data, options, storeDesc);\n            }\n            store.__loading = false;\n        }\n        /**\n         * Loads data to the Crud Manager\n         * @param {Object} response A simple object representing the data.\n         * The object structure matches the decoded `load` response structure:\n         *\n         * ```js\n         * // load static data into crudManager\n         * crudManager.loadCrudManagerData({\n         *     success   : true,\n         *     resources : {\n         *         rows : [\n         *             { id : 1, name : 'John' },\n         *             { id : 2, name : 'Abby' }\n         *         ]\n         *     }\n         * });\n         * ```\n         * @param {Object} [options] Extra data loading options.\n         * @category CRUD\n         */\n        loadCrudManagerData(response, options = {}) {\n            const me = this;\n            me.trigger('beforeLoadCrudManagerData');\n            // we don't want to react to store changes during loading of them\n            me.suspendChangeTracking();\n            // we load data to the stores in the order they're kept in this.stores array\n            me.crudStores.forEach(storeDesc => {\n                const\n                    storeId = storeDesc.storeId,\n                    data    = response[storeId];\n                if (data) {\n                    me.loadDataToCrudStore(storeDesc, data, options[storeId]);\n                }\n            });\n            me.resumeChangeTracking(true);\n            me.trigger('loadCrudManagerData');\n        }\n        /**\n         * Returns true if the crud manager is currently loading data\n         * @property {Boolean}\n         * @readonly\n         * @category CRUD\n         */\n        get isCrudManagerLoading() {\n            return Boolean(this.activeRequests.load || this.applyingLoadResponse);\n        }\n        /**\n         * Returns true if the crud manager is currently syncing data\n         * @property {Boolean}\n         * @readonly\n         * @category CRUD\n         */\n        get isCrudManagerSyncing() {\n            return Boolean(this.activeRequests.sync || this.applyingSyncResponse);\n        }\n        get isLoadingOrSyncing() {\n            return Boolean(this.isCrudManagerLoading || this.isCrudManagerSyncing);\n        }\n        /**\n         * Loads data to the stores registered in the crud manager. For example:\n         *\n         * ```javascript\n         * crudManager.load(\n         *     // here are request parameters\n         *     {\n         *         store1 : { append : true, page : 3, smth : 'foo' },\n         *         store2 : { page : 2, bar : '!!!' }\n         *     }\n         * ).then(\n         *     () => alert('OMG! It works!'),\n         *     ({ response, cancelled }) => console.log(`Error: ${cancelled ? 'Cancelled' : response.message}`)\n         * );\n         * ```\n         *\n         * ** Note: ** If there is an incomplete load request in progress then system will try to cancel it by calling {@link #function-cancelRequest}.\n         * @param {Object|String} [options] The request parameters or a URL.\n         * @param {Object} [options.request] An object which contains options to merge\n         * into the options which are passed to {@link Scheduler/crud/transport/AjaxTransport#function-sendRequest}.\n         * ```javascript\n         * {\n         *     store1 : { page : 3, append : true, smth : 'foo' },\n         *     store2 : { page : 2, bar : '!!!' },\n         *     request : {\n         *         params : {\n         *             startDate : '2021-01-01'\n         *         }\n         *     }\n         * },\n         * ```\n         *\n         * Omitting request arg:\n         * ```javascript\n         * crudManager.load().then(\n         *     () => alert('OMG! It works!'),\n         *     ({ response, cancelled }) => console.log(`Error: ${cancelled ? 'Cancelled' : response.message}`)\n         * );\n         * ```\n         *\n         * When presented it should be an object where keys are store Ids and values are, in turn, objects\n         * of parameters related to the corresponding store. These parameters will be transferred in each\n         * store's entry in the `stores` property of the POST data.\n         *\n         * Additionally, for flat stores `append: true` can be specified to add loaded records to the existing records,\n         * default is to remove corresponding store's existing records first.\n         * **Please note** that for delta loading you can also use an {@link #config-trackResponseType alternative approach}.\n         * @param {'sync'|'load'} [options.request.type] The request type. Either `load` or `sync`.\n         * @param {String} [options.request.url] The URL for the request. Overrides the URL defined in the `transport`\n         * object\n         * @param {String} [options.request.data] The encoded _Crud Manager_ request data.\n         * @param {Object} [options.request.params] An object specifying extra HTTP params to send with the request.\n         * @param {Function} [options.request.success] A function to be started on successful request transferring.\n         * @param {String} [options.request.success.rawResponse] `Response` object returned by the\n         * [fetch api](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n         * @param {Function} [options.request.failure] A function to be started on request transfer failure.\n         * @param {String} [options.request.failure.rawResponse] `Response` object returned by the\n         * [fetch api](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n         * @param {Object} [options.request.thisObj] `this` reference for the above `success` and `failure` functions.\n         * @returns {Promise} Promise, which is resolved if request was successful.\n         * Both the resolve and reject functions are passed a `state` object. State object has following structure:\n         *\n         * ```\n         * {\n         *     cancelled       : Boolean, // **optional** flag, which is present when promise was rejected\n         *     rawResponse     : String,  // raw response from ajax request, either response xml or text\n         *     rawResponseText : String,  // raw response text as String from ajax request\n         *     response        : Object,  // processed response in form of object\n         *     options         : Object   // options, passed to load request\n         * }\n         * ```\n         *\n         * If promise was rejected by {@link #event-beforeLoad} event, `state` object will have the following structure:\n         *\n         * ```\n         * {\n         *     cancelled : true\n         * }\n         * ```\n         * @category CRUD\n         * @async\n         */\n        load(options) {\n            if (typeof options === 'string') {\n                options = {\n                    request : {\n                        url : options\n                    }\n                };\n            }\n            const\n                me   = this,\n                pack = me.getLoadPackage(options);\n            me._autoLoadPromise = null;\n            return new Promise((resolve, reject) => {\n                /**\n                 * Fires before {@link #function-load load request} is sent. Return `false` to cancel load request.\n                 * @event beforeLoad\n                 * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n                 * @param {Object} pack The data package which contains data for all stores managed by the crud manager.\n                 */\n                if (me.trigger('beforeLoad', { pack }) !== false) {\n                    // if another load request is in progress let's cancel it\n                    const { load } = me.activeRequests;\n                    if (load) {\n                        me.cancelRequest(load.desc, load.reject);\n                        me.trigger('loadCanceled', { pack });\n                    }\n                    const request = Objects.assign({\n                        id      : pack.requestId,\n                        data    : me.encode(pack),\n                        type    : 'load',\n                        success : me.onCrudRequestSuccess,\n                        failure : me.onCrudRequestFailure,\n                        thisObj : me\n                    }, options?.request);\n                    me.activeRequests.load = {\n                        type : 'load',\n                        options,\n                        pack,\n                        resolve,\n                        reject(...args) {\n                            // sendRequest will start a fetch promise, which we cannot reject from here. In fact what we\n                            // need to do, is to make fetch.then() to not call any real handlers. Which is what we do here.\n                            request.success = request.failure = null;\n                            reject(...args);\n                        },\n                        id   : pack.requestId,\n                        desc : me.sendRequest(request)\n                    };\n                    me.emitCrudStoreEvents(pack.stores, 'loadStart');\n                    me.trigger('loadStart', { pack });\n                }\n                else {\n                    /**\n                     * Fired after {@link #function-load load request} was canceled by some {@link #event-beforeLoad}\n                     * listener or due to incomplete prior load request.\n                     * @event loadCanceled\n                     * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n                     * @param {Object} pack The data package which contains data for all stores managed by the crud\n                     * manager.\n                     */\n                    me.trigger('loadCanceled', { pack });\n                    reject({ cancelled : true });\n                }\n            });\n        }\n        getActiveCrudManagerRequest(requestType) {\n            let request = this.activeRequests[requestType];\n            if (!request && this.trackResponseType) {\n                request = Object.values(this.activeRequests)[0];\n            }\n            return request;\n        }\n        //endregion\n        //region Changes (prepare, process, get)\n        prepareAddedRecordData(record, storeInfo) {\n            const\n                me                   = this,\n                { store }            = storeInfo,\n                { isTree }           = store,\n                phantomIdField       = storeInfo.phantomIdField || me.phantomIdField,\n                phantomParentIdField = storeInfo.phantomParentIdField || me.phantomParentIdField,\n                subStoreFields       = store.modelClass.allFields.filter(field => field.subStore),\n                cls                  = record.constructor,\n                data                 = Object.assign(record.persistableData, {\n                    [phantomIdField] : record.id\n                });\n            if (isTree) {\n                const { parent } = record;\n                if (parent && !parent.isRoot && parent.isPhantom) {\n                    data[phantomParentIdField] = parent.id;\n                }\n            }\n            if (me.resetIdsBeforeSync) {\n                ObjectHelper.deletePath(data, cls.idField);\n            }\n            // If we have store fields that should be persisted w/ Crud Manager protocol\n            subStoreFields.forEach(field => {\n                const subStore = record.get(field.name);\n                if (subStore.allCount) {\n                    data[field.dataSource] = {\n                        added : subStore.getRange()\n                            .map(record => me.prepareAddedRecordData(record, { store : subStore }))\n                    };\n                }\n            });\n            return data;\n        }\n        prepareAdded(list, storeInfo) {\n            return list.filter(record => record.isValid).map(record => this.prepareAddedRecordData(record, storeInfo));\n        }\n        prepareUpdated(list, storeInfo) {\n            const\n                { store }            = storeInfo,\n                { isTree }           = store,\n                writeAllFields       = storeInfo.writeAllFields || (storeInfo.writeAllFields !== false && this.writeAllFields),\n                phantomParentIdField = storeInfo.phantomParentIdField || this.phantomParentIdField,\n                subStoreFields       = store.modelClass.allFields.filter(field => field.subStore);\n            if (storeInfo.store.tree) {\n                const rootNode = storeInfo.store.rootNode;\n                list = list.filter(record => record !== rootNode);\n            }\n            return list.filter(record => record.isValid).reduce((data, record) => {\n                let recordData;\n                // write all fields\n                if (writeAllFields) {\n                    recordData = record.persistableData;\n                }\n                else {\n                    recordData = record.modificationDataToWrite;\n                }\n                if (isTree) {\n                    const { parent } = record;\n                    if (parent && !parent.isRoot && parent.isPhantom) {\n                        recordData[phantomParentIdField] = parent.id;\n                    }\n                }\n                // If we have store fields that should be persisted w/ Crud Manager protocal\n                subStoreFields.forEach(field => {\n                    const subStore = record.get(field.name);\n                    recordData[field.dataSource] = this.getCrudStoreChanges({ store : subStore });\n                });\n                // recordData can be null\n                if (!ObjectHelper.isEmpty(recordData)) {\n                    data.push(recordData);\n                }\n                return data;\n            }, []);\n        }\n        prepareRemoved(list) {\n            return list.map(record => {\n                const cls = record.constructor;\n                return ObjectHelper.setPath({}, cls.idField, record.id);\n            });\n        }\n        getCrudStoreChanges(storeDescriptor) {\n            const { store } = storeDescriptor;\n            let { added = [], modified : updated = [], removed = [] } = (store.changes || {}),\n                result;\n            if (added.length) added = this.prepareAdded(added, storeDescriptor);\n            if (updated.length) updated = this.prepareUpdated(updated, storeDescriptor);\n            if (removed.length) removed = this.prepareRemoved(removed);\n            // if this store has changes\n            if (added.length || updated.length || removed.length) {\n                result = {};\n                if (added.length) result.added = added;\n                if (updated.length) result.updated = updated;\n                if (removed.length) result.removed = removed;\n            }\n            return result;\n        }\n        getChangesetPackage() {\n            const { changes } = this;\n            return changes || this.forceSync\n                ? {\n                    type      : 'sync',\n                    requestId : this.requestId,\n                    revision  : this.crudRevision,\n                    ...changes\n                } : null;\n        }\n        //endregion\n        //region Apply\n        /**\n         * Returns current changes as an object consisting of added/modified/removed arrays of records for every\n         * managed store, keyed by each store's `id`. Returns `null` if no changes exist. Format:\n         *\n         * ```javascript\n         * {\n         *     resources : {\n         *         added    : [{ name : 'New guy' }],\n         *         modified : [{ id : 2, name : 'Mike' }],\n         *         removed  : [{ id : 3 }]\n         *     },\n         *     events : {\n         *         modified : [{  id : 12, name : 'Cool task' }]\n         *     },\n         *     ...\n         * }\n         * ```\n         *\n         * @property {Object}\n         * @readonly\n         * @category CRUD\n         */\n        get changes() {\n            const data = {};\n            this.crudStores.forEach(store => {\n                const changes = this.getCrudStoreChanges(store);\n                if (changes) {\n                    data[store.storeId] = changes;\n                }\n            });\n            return Object.keys(data).length > 0 ? data : null;\n        }\n        getRowsToApplyChangesTo({ store, storeId }, storeResponse, storePack) {\n            const\n                me             = this,\n                { modelClass } = store,\n                idDataSource   = modelClass.idField,\n                // request data\n                {\n                    updated : requestUpdated,\n                    removed : requestRemoved\n                }              = storePack || {};\n            let rows, removed, remote;\n            // If the response contains the store section\n            if (storeResponse) {\n                remote = true;\n                const respondedIds = {};\n                // responded record changes/removals\n                rows    = storeResponse.rows?.slice() || [];\n                removed = storeResponse.removed?.slice() || [];\n                // Collect hash w/ identifiers of responded records\n                [...rows, ...removed].forEach(responseRecord => {\n                    const id = ObjectHelper.getPath(responseRecord, idDataSource);\n                    respondedIds[id] = true;\n                });\n                // If it's told to support providing server changes only in response\n                // CrudManager should collect other records to commit from current requested data\n                if (me.supportShortSyncResponse) {\n                    // append records requested to update (if not there already)\n                    requestUpdated?.forEach(data => {\n                        const id = ObjectHelper.getPath(data, idDataSource);\n                        // if response doesn't include\n                        if (!respondedIds[id]) {\n                            rows.push({ [idDataSource] : id });\n                        }\n                    });\n                    // append records requested to remove (if not there already)\n                    requestRemoved?.forEach(data => {\n                        const id = ObjectHelper.getPath(data, idDataSource);\n                        // if response doesn't include\n                        if (!respondedIds[id]) {\n                            removed.push({ [idDataSource] : id });\n                        }\n                    });\n                }\n            }\n            // If there is no this store section we use records mentioned in the current request\n            else if (requestUpdated || requestRemoved) {\n                remote  = false;\n                rows    = requestUpdated;\n                removed = requestRemoved;\n            }\n            // return nullish \"rows\"/\"removed\" if no entries\n            rows    = rows?.length ? rows : null;\n            removed = removed?.length ? removed : null;\n            return {\n                rows,\n                removed,\n                remote\n            };\n        }\n        applyChangesToStore(storeDesc, storeResponse, storePack) {\n            const\n                me                = this,\n                phantomIdField    = storeDesc.phantomIdField || me.phantomIdField,\n                { store }         = storeDesc,\n                idField           = store.modelClass.getFieldDataSource('id'),\n                subStoreFields    = store.modelClass.allFields.filter(field => field.subStore),\n                // collect records we need to process\n                { rows, removed, remote } = me.getRowsToApplyChangesTo(storeDesc, storeResponse, storePack),\n                added = [],\n                updated = [];\n            // Convert to the { updated, added } format accepted by stores\n            if (rows) {\n                for (const data of rows) {\n                    // Existing records are updated\n                    if (store.getById(data[phantomIdField] ?? data[idField])) {\n                        updated.push(data);\n                    }\n                    // Others added\n                    else {\n                        added.push(data);\n                    }\n                }\n            }\n            const extraLogEntries = [];\n            // Handle sub-stores (if any)\n            if (updated.length && subStoreFields.length) {\n                updated.forEach(updateData => {\n                    const\n                        record = store.getById(updateData[phantomIdField] ?? updateData[idField]),\n                        // find the request portion related to the record\n                        recordRequest = storePack.added?.find(t => t[phantomIdField] == updateData[phantomIdField]) ||\n                            storePack.updated?.find(t => t[idField] == updateData[idField]);\n                    const extraLogInfo = {};\n                    subStoreFields.forEach(field => {\n                        const store = record.get(field.name);\n                        me.applyChangesToStore({ store }, updateData[field.dataSource],\n                            recordRequest?.[field.dataSource]\n                        );\n                        // We're putting the store field entry to the log\n                        // just to indicate the fact it was actually changed.\n                        // The value will not be used for comparison so we can use any.\n                        extraLogInfo[field.dataSource] = 'foo';\n                        delete updateData[field.dataSource];\n                    });\n                    extraLogEntries.push([record, extraLogInfo]);\n                });\n            }\n            // process added/updated records\n            const log = store.applyChangeset({ removed, added, updated }, null, phantomIdField, remote, true);\n            extraLogEntries.forEach(([record, logEntry]) => Object.assign(log.get(record.id), logEntry));\n            return log;\n        }\n        applySyncResponse(response, request) {\n            const\n                me     = this,\n                stores = me.orderedCrudStores;\n            me.applyingChangeset = me.applyingSyncResponse = true;\n            me.suspendChangeTracking();\n            for (const store of stores) {\n                me.applyChangesToStore(store, response[store.storeId], request?.pack?.[store.storeId]);\n            }\n            me.resumeChangeTracking(true);\n            me.applyingChangeset = me.applyingSyncResponse = false;\n        }\n        applyLoadResponse(response, options) {\n            this.applyingLoadResponse = true;\n            this.loadCrudManagerData(response, options);\n            this.applyingLoadResponse = false;\n        }\n        async applyResponse(request, response, options) {\n            const\n                me = this,\n                // in trackResponseType mode we check response type before deciding how to react on the response\n                responseType = me.trackResponseType && response.type || request.type;\n            switch (responseType) {\n                case 'load' :\n                    if (me.validateResponse) {\n                        me.validateLoadResponse(response);\n                    }\n                    me.applyLoadResponse(response, options);\n                    break;\n                case 'sync' :\n                    if (me.validateResponse) {\n                        me.validateSyncResponse(response, request);\n                    }\n                    me.applySyncResponse(response, request);\n                    break;\n            }\n        }\n        /**\n         * Applies a set of changes, as an object keyed by store id, to the affected stores. This function is intended\n         * to use in apps that handle their own data syncing, it is not needed when using the CrudManager approach.\n         *\n         * Example of a changeset:\n         * ```javascript\n         * project.applyChangeset({\n         *     events : {\n         *         added : [\n         *             { id : 10, name : 'Event 10', startDate : '2022-06-07' }\n         *         ],\n         *         updated : [\n         *             { id : 5, name : 'Changed' }\n         *         ],\n         *         removed : [\n         *             { id : 1 }\n         *         ]\n         *     },\n         *     resources : { ... },\n         *     ...\n         * });\n         * ```\n         *\n         * Optionally accepts a `transformFn` to convert an incoming changeset to the expected format.\n         * See {@link Core/data/Store#function-applyChangeset} for more details.\n         *\n         * @param {Object} changes Changeset to apply, an object keyed by store id where each value follows the\n         * format described in {@link Core/data/Store#function-applyChangeset}\n         * @param {Function} [transformFn] Optional function used to preprocess a changeset per store in a different\n         * format, should return an object with the format expected by {@link Core/data/Store#function-applyChangeset}\n         * @param {String} [phantomIdField] Field used by the backend when communicating a record being assigned a\n         * proper id instead of a phantom id\n         */\n        applyChangeset(changes, transformFn = null, phantomIdField, logChanges = false) {\n            const\n                me  = this,\n                log = logChanges ? new Map() : undefined;\n            me.suspendAutoSync();\n            me.suspendChangeTracking();\n            for (const { store, phantomIdField } of me.orderedCrudStores) {\n                if (changes[store.id]) {\n                    const storeLog = store.applyChangeset(\n                        changes[store.id],\n                        transformFn,\n                        phantomIdField || me.phantomIdField,\n                        // mark this changeset as remote to enforce it\n                        true,\n                        logChanges\n                    );\n                    if (storeLog) {\n                        log.set(store.id, storeLog);\n                    }\n                }\n            }\n            me.resumeChangeTracking(true);\n            me.resumeAutoSync(false);\n            return log;\n        }\n        //endregion\n        /**\n         * Generates unique request identifier.\n         * @internal\n         * @template\n         * @returns {Number} The request identifier.\n         * @category CRUD\n         */\n        get requestId() {\n            return Number.parseInt(`${Date.now()}${(this._requestId++)}`);\n        }\n        /**\n         * Persists changes made on the registered stores to the server and/or receives changes made on the backend.\n         * Usage:\n         *\n         * ```javascript\n         * // persist and run a callback on request completion\n         * crud.sync().then(\n         *     () => console.log(\"Changes saved...\"),\n         *     ({ response, cancelled }) => console.log(`Error: ${cancelled ? 'Cancelled' : response.message}`)\n         * );\n         * ```\n         *\n         * ** Note: ** If there is an incomplete sync request in progress then system will queue the call and delay it\n         * until previous request completion.\n         * In this case {@link #event-syncDelayed} event will be fired.\n         *\n         * ** Note: ** Please take a look at {@link #config-autoSync} config. This option allows to persist changes\n         * automatically after any data modification.\n         *\n         * ** Note: ** By default a sync request is only sent if there are any local {@link #property-changes}. To\n         * always send a request when calling this function, configure {@link #config-forceSync} as `true`.\n         *\n         * @returns {Promise} Promise, which is resolved if request was successful.\n         * Both the resolve and reject functions are passed a `state` object. State object has the following structure:\n         * ```\n         * {\n         *     cancelled       : Boolean, // **optional** flag, which is present when promise was rejected\n         *     rawResponse     : String,  // raw response from ajax request, either response xml or text\n         *     rawResponseText : String,  // raw response text as String from ajax request\n         *     response        : Object,  // processed response in form of object\n         * }\n         * ```\n         * If promise was rejected by the {@link #event-beforeSync} event, `state` object will have this structure:\n         * ```\n         * {\n         *     cancelled : true\n         * }\n         * ```\n         * @category CRUD\n         * @async\n         */\n        sync() {\n            const me = this;\n            // A direct call to sync cancels any outstanding autoSync\n            me.clearTimeout('autoSync');\n            if (me.activeRequests.sync) {\n                // let's delay this call and start it only after server response\n                /**\n                 * Fires after {@link #function-sync sync request} was delayed due to incomplete previous one.\n                 * @event syncDelayed\n                 * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n                 * @param {Object} arguments The arguments of {@link #function-sync} call.\n                 */\n                me.trigger('syncDelayed');\n                // Queue sync request after current one\n                return me.activeSyncPromise = me.activeSyncPromise.finally(() => me.sync());\n            }\n            // Store current request promise. While this one is pending, all following sync requests will create chain\n            // of sequential promises\n            return me.activeSyncPromise = new Promise((resolve, reject) => {\n                // get current changes set package\n                const pack = me.getChangesetPackage();\n                // if no data to persist we resolve immediately\n                if (!pack) {\n                    resolve(null);\n                    return;\n                }\n                /**\n                 * Fires before {@link #function-sync sync request} is sent. Return `false` to cancel sync request.\n                 *\n                 * ```javascript\n                 * crudManager.on('beforesync', function() {\n                 *     // cannot persist changes before at least one record is added\n                 *     // to the `someStore` store\n                 *     if (!someStore.getCount()) return false;\n                 * });\n                 * ```\n                 * @event beforeSync\n                 * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n                 * @param {Object} pack The data package which contains data for all stores managed by the crud manager.\n                 */\n                if (me.trigger('beforeSync', { pack }) !== false) {\n                    me.trigger('syncStart', { pack });\n                    // keep active request details\n                    me.activeRequests.sync = {\n                        type : 'sync',\n                        pack,\n                        resolve,\n                        reject,\n                        id   : pack.requestId,\n                        desc : me.sendRequest({\n                            id      : pack.requestId,\n                            data    : me.encode(pack),\n                            type    : 'sync',\n                            success : me.onCrudRequestSuccess,\n                            failure : me.onCrudRequestFailure,\n                            thisObj : me\n                        })\n                    };\n                }\n                else {\n                    /**\n                     * Fires after {@link #function-sync sync request} was canceled by some {@link #event-beforeSync} listener.\n                     * @event syncCanceled\n                     * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n                     * @param {Object} pack The data package which contains data for all stores managed by the crud manager.\n                     */\n                    me.trigger('syncCanceled', { pack });\n                    reject({ cancelled : true });\n                }\n            }).catch(error => {\n                // If the request was not cancelled in beforeSync listener, forward the error so the user's `catch` handler can catch it\n                if (error && !error.cancelled) {\n                    throw error;\n                }\n                // Pass the error object as a param to the next `then` chain\n                return error;\n            });\n        }\n        async onCrudRequestSuccess(rawResponse, fetchOptions, request) {\n            const\n                me = this,\n                {\n                    type : requestType,\n                    id   : requestId\n                }  = request;\n            if (me.isDestroyed) return;\n            let responseText = '';\n            request = me.activeRequests[requestType];\n            // we throw exception below to let events trigger first in internalOnResponse() call\n            try {\n                responseText = await rawResponse.text();\n            }\n            catch (e) {\n            }\n            // since we break the method w/ promises chain ..need to check if the instance is not destroyed in the meantime\n            if (me.isDestroyed) return;\n            // This situation should never occur.\n            // In the load() method, if a load is called while there is a load\n            // ongoing, the ongoing Transport request is cancelled and loadCanceled triggered.\n            // But having got here, it's too late to cancel a Transport request, so\n            // the operation is unregistered below.\n            // In the sync() method, if a sync is called while there is a sync\n            // ongoing, it waits until completion, before syncing.\n            // The activeRequest for any operation should NEVER be able to be\n            // replaced while this operation is ongoing, so this must be fatal.\n            if (request?.id !== requestId) {\n                throw new Error(`Interleaved ${requestType} operation detected`);\n            }\n            // Reset the active request info before we enter async code which could allow\n            // application code to run which could potentially call another request.\n            // It is too late for this request to be canceled - the activeRequest represented\n            // the Transport object and that has completed now.\n            me.activeRequests[requestType] = null;\n            const response = await me.internalOnResponse(request, responseText, fetchOptions);\n            // since we break the method w/ promises chain ..need to check if the instance is not destroyed in the meantime\n            if (me.isDestroyed) return;\n            if (!response || (me.skipSuccessProperty ? response?.success === false : !response?.success)) {\n                const error = {\n                    rawResponse,\n                    response,\n                    request\n                };\n                if (response?.message) {\n                    error.message = response.message;\n                }\n                request.reject(new CrudManagerRequestError(error));\n            }\n            // Successful request type done flag (this.crudLoaded or this.crudSynced)..\n            me['crud' + StringHelper.capitalize(request.type) + 'ed'] = true;\n            request.resolve({ response, rawResponse, responseText, request });\n        }\n        async onCrudRequestFailure(rawResponse, fetchOptions, request) {\n            const me = this;\n            if (me.isDestroyed) return;\n            request = me.activeRequests[request.type];\n            const\n                signal      = fetchOptions?.abortController?.signal,\n                wasAborted  = Boolean(signal?.aborted);\n            if (!wasAborted) {\n                let response,\n                    responseText = '';\n                try {\n                    responseText = await rawResponse.text();\n                    response = me.decode(responseText);\n                }\n                catch (e) {\n                }\n                // since we break the method w/ promises chain ..need to check if the instance is not destroyed in the meantime\n                if (me.isDestroyed) return;\n                me.triggerFailedRequestEvents(request, response, responseText, fetchOptions);\n                // since we break the method w/ promises chain ..need to check if the instance is not destroyed in the meantime\n                if (me.isDestroyed) return;\n                request.reject(new CrudManagerRequestError({\n                    rawResponse,\n                    request\n                }));\n            }\n            // reset the active request info\n            me.activeRequests[request.type] = null;\n        }\n        /**\n         * Accepts all changes in all stores, resets the modification tracking:\n         * * Clears change tracking for all records\n         * * Clears added\n         * * Clears modified\n         * * Clears removed\n         * Leaves the store in an \"unmodified\" state.\n         * @category CRUD\n         */\n        acceptChanges() {\n            this.crudStores.forEach(store => store.store.acceptChanges());\n        }\n        /**\n         * Reverts all changes in all stores and re-inserts any records that were removed locally. Any new uncommitted\n         * records will be removed.\n         * @category CRUD\n         */\n        revertChanges() {\n            // the method aliases revertCrudStoreChanges\n            this.revertCrudStoreChanges();\n        }\n        revertCrudStoreChanges() {\n            const { usesSingleAssignment } = this.eventStore;\n            // Ignore assignment store if using single assignment, otherwise reverting changes will undo changes from\n            // reverting the event store after reassignment\n            this.orderedCrudStores.forEach(({ store }) => (!store.isAssignmentStore || !usesSingleAssignment) && store.revertChanges());\n        }\n        /**\n         * Removes all stores and cancels active requests.\n         * @category CRUD\n         * @internal\n         */\n        doDestroy() {\n            const\n                me             = this,\n                { load, sync } = me.activeRequests;\n            load && me.cancelRequest(load.desc, load.reject);\n            sync && me.cancelRequest(sync.desc, sync.reject);\n            while (me.crudStores.length > 0) {\n                me.removeCrudStore(me.crudStores[0]);\n            }\n            super.doDestroy && super.doDestroy();\n        }\n    };\n};\n", "import Base from '../../../Core/Base.js';\nimport AjaxHelper from '../../../Core/helper/AjaxHelper.js';\nimport Objects from '../../../Core/helper/util/Objects.js';\n/**\n * @module Scheduler/crud/transport/AjaxTransport\n */\n/**\n * Implements data transferring functional that can be used for {@link Scheduler.crud.AbstractCrudManager} super classing.\n * Uses the fetch API for transport, https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n *\n * ```javascript\n * // create a new CrudManager using AJAX as a transport system and JSON for encoding\n * class MyCrudManager extends AjaxTransport(JsonEncode(AbstractCrudManager)) {}\n * ```\n *\n * @abstract\n * @mixin\n */\nexport default Target => class AjaxTransport extends (Target || Base) {\n    static get $name() {\n        return 'AjaxTransport';\n    }\n    /**\n     * Configuration of the AJAX requests used by _Crud Manager_ to communicate with a server-side.\n     *\n     * ```javascript\n     * transport : {\n     *     load : {\n     *         url       : 'http://mycool-server.com/load.php',\n     *         // HTTP request parameter used to pass serialized \"load\"-requests\n     *         paramName : 'data',\n     *         // pass extra HTTP request parameter\n     *         params    : {\n     *             foo : 'bar'\n     *         }\n     *     },\n     *     sync : {\n     *         url     : 'http://mycool-server.com/sync.php',\n     *         // specify Content-Type for requests\n     *         headers : {\n     *             'Content-Type' : 'application/json'\n     *         }\n     *     }\n     * }\n     *```\n     * Since the class uses Fetch API you can use\n     * any its [Request interface](https://developer.mozilla.org/en-US/docs/Web/API/Request) options:\n     *\n     * ```javascript\n     * transport : {\n     *     load : {\n     *         url         : 'http://mycool-server.com/load.php',\n     *         // HTTP request parameter used to pass serialized \"load\"-requests\n     *         paramName   : 'data',\n     *         // pass few Fetch API options\n     *         method      : 'GET',\n     *         credentials : 'include',\n     *         cache       : 'no-cache'\n     *     },\n     *     sync : {\n     *         url         : 'http://mycool-server.com/sync.php',\n     *         // specify Content-Type for requests\n     *         headers     : {\n     *             'Content-Type' : 'application/json'\n     *         },\n     *         credentials : 'include'\n     *     }\n     * }\n     *```\n     *\n     * An object where you can set the following possible properties:\n     * @config {Object} transport\n     * @property {Object} [transport.load] Load requests configuration:\n     * @property {String} [transport.load.url] URL to request for data loading.\n     * @property {String} [transport.load.method='GET'] HTTP method to be used for load requests.\n     * @property {String} [transport.load.paramName='data'] Name of the parameter that will contain a serialized `load`\n     * request. The value is mandatory for requests using `GET` method (default for `load`) so if the value is not\n     * provided `data` string is used as default.\n     * This value is optional for HTTP methods like `POST` and `PUT`, the request body will be used for data\n     * transferring in these cases.\n     * @property {Object} [transport.load.params] An object containing extra HTTP parameters to pass to the server when\n     * sending a `load` request.\n     *\n     * ```javascript\n     * transport : {\n     *     load : {\n     *         url       : 'http://mycool-server.com/load.php',\n     *         // HTTP request parameter used to pass serialized \"load\"-requests\n     *         paramName : 'data',\n     *         // pass extra HTTP request parameter\n     *         // so resulting URL will look like: http://mycool-server.com/load.php?userId=123456&data=...\n     *         params    : {\n     *             userId : '123456'\n     *         }\n     *     },\n     *     ...\n     * }\n     * ```\n     * @property {Object<String,String>} [transport.load.headers] An object containing headers to pass to each server request.\n     *\n     * ```javascript\n     * transport : {\n     *     load : {\n     *         url       : 'http://mycool-server.com/load.php',\n     *         // HTTP request parameter used to pass serialized \"load\"-requests\n     *         paramName : 'data',\n     *         // specify Content-Type for \"load\" requests\n     *         headers   : {\n     *             'Content-Type' : 'application/json'\n     *         }\n     *     },\n     *     ...\n     * }\n     * ```\n     * @property {Object} [transport.load.fetchOptions] **DEPRECATED:** Any Fetch API options can be simply defined on\n     * the upper configuration level:\n     * ```javascript\n     * transport : {\n     *     load : {\n     *         url          : 'http://mycool-server.com/load.php',\n     *         // HTTP request parameter used to pass serialized \"load\"-requests\n     *         paramName    : 'data',\n     *         // Fetch API options\n     *         method       : 'GET',\n     *         credentials  : 'include'\n     *     },\n     *     ...\n     * }\n     * ```\n     * @property {Object} [transport.load.requestConfig] **DEPRECATED:** The config options can be defined on the upper\n     * configuration level.\n     * @property {Object} [transport.sync] Sync requests (`sync` in further text) configuration:\n     * @property {String} [transport.sync.url] URL to request for `sync`.\n     * @property {String} [transport.sync.method='POST'] HTTP request method to be used for `sync`.\n     * @property {String} [transport.sync.paramName=undefined] Name of the parameter in which `sync` data will be\n     * transferred. This value is optional for requests using methods like `POST` and `PUT`, the request body will be\n     * used for data transferring in this case (default for `sync`). And the value is mandatory for requests using `GET`\n     * method (if the value is not provided `data` string will be used as fallback).\n     * @property {Object} [transport.sync.params] HTTP parameters to pass with an HTTP request handling `sync`.\n     *\n     * ```javascript\n     * transport : {\n     *     sync : {\n     *         url    : 'http://mycool-server.com/sync.php',\n     *         // extra HTTP request parameter\n     *         params : {\n     *             userId : '123456'\n     *         }\n     *     },\n     *     ...\n     * }\n     * ```\n     * @property {Object<String,String>} [transport.sync.headers] HTTP headers to pass with an HTTP request handling `sync`.\n     *\n     * ```javascript\n     * transport : {\n     *     sync : {\n     *         url     : 'http://mycool-server.com/sync.php',\n     *         // specify Content-Type for \"sync\" requests\n     *         headers : {\n     *             'Content-Type' : 'application/json'\n     *         }\n     *     },\n     *     ...\n     * }\n     * ```\n     * @property {Object} [transport.sync.fetchOptions] **DEPRECATED:** Any Fetch API options can be simply defined on\n     * the upper configuration level:\n     * ```javascript\n     * transport : {\n     *     sync : {\n     *         url         : 'http://mycool-server.com/sync.php',\n     *         credentials : 'include'\n     *     },\n     *     ...\n     * }\n     * ```\n     * @property {Object} [transport.sync.requestConfig] **DEPRECATED:** The config options can be defined on the upper\n     * configuration level.\n     * @category CRUD\n     */\n    static get defaultMethod() {\n        return {\n            load : 'GET',\n            sync : 'POST'\n        };\n    }\n    /**\n     * Cancels a sent request.\n     * @param {Promise} requestPromise The Promise object wrapping the Request to be cancelled.\n     * The _requestPromise_ is the value returned from the corresponding {@link #function-sendRequest} call.\n     * @category CRUD\n     */\n    cancelRequest(requestPromise, reject) {\n        requestPromise.abort?.();\n        if (!this.isDestroying) {\n            reject({ cancelled : true });\n        }\n    }\n    shouldUseBodyForRequestData(packCfg, method, paramName) {\n        return !(method === 'HEAD' || method === 'GET') && !paramName;\n    }\n    /**\n     * Sends a _Crud Manager_ request to the server.\n     * @param {Object} request The request configuration object having following properties:\n     * @param {'load'|'sync'} request.type The request type. Either `load` or `sync`.\n     * @param {String} request.url The URL for the request. Overrides the URL defined in the `transport` object\n     * @param {String} request.data The encoded _Crud Manager_ request data.\n     * @param {Object} request.params An object specifying extra HTTP params to send with the request.\n     * @param {Function} request.success A function to be started on successful request transferring.\n     * @param {String} request.success.rawResponse `Response` object returned by the [fetch api](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n     * @param {Function} request.failure A function to be started on request transfer failure.\n     * @param {String} request.failure.rawResponse `Response` object returned by the [fetch api](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n     * @param {Object} request.thisObj `this` reference for the above `success` and `failure` functions.\n     * @returns {Promise} The fetch Promise object.\n     * @fires beforeSend\n     * @async\n     * @category CRUD\n     */\n    sendRequest(request) {\n        const\n            me              = this,\n            { data }        = request,\n            transportConfig = me.transport[request.type] || {},\n            // clone parameters defined for this type of request\n            requestConfig   = Objects.assign({}, transportConfig, transportConfig.requestConfig);\n        if (request.url) {\n            requestConfig.url = request.url;\n        }\n        requestConfig.method = requestConfig.method || AjaxTransport.defaultMethod[request.type];\n        requestConfig.params = Objects.assign(requestConfig.params || {}, request.params);\n        let { paramName } = requestConfig;\n        // transfer package in the request body for some types of HTTP requests\n        if (me.shouldUseBodyForRequestData(transportConfig, requestConfig.method, paramName)) {\n            requestConfig.body = data;\n            // for requests having body we set Content-Type to 'application/json' by default\n            requestConfig.headers = requestConfig.headers || {};\n            requestConfig.headers['Content-Type'] = requestConfig.headers['Content-Type'] || 'application/json';\n        }\n        else {\n            // when we don't use body paramName is mandatory so fallback to 'data' as name\n            paramName = paramName || 'data';\n            requestConfig.params[paramName] = data;\n        }\n        if (!requestConfig.url) {\n            throw new Error('Trying to request without URL specified');\n        }\n        // sanitize request config\n        delete requestConfig.requestConfig;\n        delete requestConfig.paramName;\n        let ajaxPromise, resultPromise;\n        function performSend() {\n            // AjaxHelper.fetch call it \"queryParams\"\n            requestConfig.queryParams = requestConfig.params;\n            delete requestConfig.params;\n            let cancelled = false;\n            const fetchOptions = Objects.assign({}, requestConfig, requestConfig.fetchOptions);\n            ajaxPromise  = AjaxHelper.fetch(requestConfig.url, fetchOptions);\n            return ajaxPromise.catch(error => {\n                ajaxPromise.done = true;\n                me.trigger?.('responseReceived', { success : false });\n                const signal = fetchOptions.abortController?.signal;\n                if (signal) {\n                    cancelled = signal.aborted;\n                    if (!cancelled) {\n                        console.warn(error);\n                    }\n                }\n                return { error, cancelled };\n            }).then(response => {\n                ajaxPromise.done = true;\n                me.trigger?.('responseReceived', { success : Boolean(response?.ok) });\n                const callback = response?.ok ? request.success : request.failure;\n                return callback?.call(request.thisObj || me, response, fetchOptions, request);\n            });\n        }\n        /**\n         * Fires before a request is sent to the server.\n         *\n         * ```javascript\n         * crudManager.on('beforeSend', function ({ params, type }) {\n         *     // let's set \"sync\" request parameters\n         *     if (type == 'sync') {\n         *         // dynamically depending on \"flag\" value\n         *         if (flag) {\n         *             params.foo = 'bar';\n         *         }\n         *         else {\n         *             params.foo = 'smth';\n         *         }\n         *     }\n         * });\n         * ```\n         * @event beforeSend\n         * @param {Scheduler.crud.AbstractCrudManager} crudManager The CRUD manager.\n         * @param {Object} params HTTP request params to be passed in the request URL.\n         * @param {'sync'|'load'} requestType CrudManager request type (`load`/`sync`)\n         * @param {Object} requestConfig Configuration object for Ajax request call\n         * @async\n         */\n        const beforeSendResult = me.trigger('beforeSend', {\n            params      : requestConfig.params,\n            requestType : request.type,\n            requestConfig,\n            config      : request\n        });\n        if (Objects.isPromise(beforeSendResult)) {\n            resultPromise = beforeSendResult.then(performSend);\n        }\n        else {\n            resultPromise = performSend();\n        }\n        resultPromise.abort = () => {\n            if (!ajaxPromise.done) {\n                ajaxPromise.abort?.();\n            }\n        };\n        return resultPromise;\n    }\n};\n", "import Base from '../../../Core/Base.js';\nimport StringHelper from '../../../Core/helper/StringHelper.js';\n/**\n * @module Scheduler/crud/encoder/JsonEncoder\n */\n/**\n * Implements data encoding functional that should be mixed to a {@link Scheduler.crud.AbstractCrudManager} sub-class.\n * Uses _JSON_ as an encoding system.\n *\n * ```javascript\n * // create a new CrudManager using AJAX as a transport system and JSON for encoding\n * class MyCrudManager extends JsonEncode(AjaxTransport(AbstractCrudManager)) {}\n * ```\n *\n * @mixin\n */\nexport default Target => class JsonEncoder extends (Target || Base) {\n    static get $name() {\n        return 'JsonEncoder';\n    }\n    static get defaultConfig() {\n        return {\n            /**\n             * Configuration of the JSON encoder used by the _Crud Manager_.\n             *\n             * @config {Object}\n             * @property {Object} encoder.requestData Static data to send with the data request.\n             *\n             * ```js\n             * new CrudManager({\n             *     // add static \"foo\" property to all requests data\n             *     encoder : {\n             *         requestData : {\n             *             foo : 'Bar'\n             *         }\n             *     },\n             *     ...\n             * });\n             * ```\n             *\n             * The above snippet will result adding \"foo\" property to all requests data:\n             *\n             * ```json\n             *     {\n             *         \"requestId\"   : 756,\n             *         \"type\"        : \"load\",\n             *\n             *         \"foo\"         : \"Bar\",\n             *\n             *         \"stores\"      : [\n             *             ...\n             * ```\n             * @category CRUD\n             */\n            encoder : {}\n        };\n    }\n    /**\n     * Encodes a request object to _JSON_ encoded string. If encoding fails (due to circular structure), it returns null.\n     * Supposed to be overridden in case data provided by the _Crud Manager_ has to be transformed into format requested by server.\n     * @param {Object} requestData The request to encode.\n     * @returns {String} The encoded request.\n     * @category CRUD\n     */\n    encode(requestData) {\n        requestData = Object.assign({}, this.encoder?.requestData, requestData);\n        return StringHelper.safeJsonStringify(requestData);\n    }\n    /**\n     * Decodes (parses) a _JSON_ response string to an object. If parsing fails, it returns null.\n     * Supposed to be overridden in case data provided by server has to be transformed into format requested by the _Crud Manager_.\n     * @param {String} responseText The response text to decode.\n     * @returns {Object} The decoded response.\n     * @category CRUD\n     */\n    decode(responseText) {\n        return StringHelper.safeJsonParse(responseText);\n    }\n};\n", "import AbstractCrudManagerMixin from '../../../Scheduler/crud/AbstractCrudManagerMixin.js';\nimport StringHelper from '../../../Core/helper/StringHelper.js';\nimport Base from '../../../Core/Base.js';\nimport AjaxTransport from '../../crud/transport/AjaxTransport.js';\nimport JsonEncoder from '../../crud/encoder/JsonEncoder.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\n/**\n * @module Scheduler/data/mixin/ProjectCrudManager\n */\n/**\n * This mixin provides Crud Manager functionality supporting loading of scheduling engine projects.\n *\n * @mixin\n * @mixes Scheduler/crud/AbstractCrudManagerMixin\n * @mixes Scheduler/crud/transport/AjaxTransport\n * @mixes Scheduler/crud/encoder/JsonEncoder\n */\nexport default Target => class ProjectCrudManager extends (Target || Base).mixin(AbstractCrudManagerMixin, AjaxTransport, JsonEncoder) {\n    //region Config\n    static get defaultConfig() {\n        return {\n            project : null\n        };\n    }\n    startConfigure(config) {\n        // process the project first which ingests any configured data sources,\n        this.getConfig('project');\n        super.startConfigure(config);\n        this._changesToClear = new Map();\n    }\n    async doAutoLoad() {\n        const { project } = this;\n        // Delay autoLoad to after projects initial commit if configured with a project\n        if (project) {\n            await project.commitAsync();\n        }\n        return super.doAutoLoad();\n    }\n    applyProjectResponse(response) {\n        const\n            me = this,\n            { project } = me;\n        me.applyingProjectResponse = true;\n        const\n            startDateField = project.fieldMap.startDate,\n            endDateField   = project.fieldMap.endDate,\n            startDate      = ObjectHelper.getPath(response, startDateField.dataSource),\n            endDate        = ObjectHelper.getPath(response, endDateField.dataSource);\n        // With early rendering engine won't convert project dates in time, do it manually first\n        if (typeof startDate === 'string') {\n            ObjectHelper.setPath(response, startDateField.dataSource, startDateField.convert(startDate));\n        }\n        if (typeof endDate === 'string') {\n            ObjectHelper.setPath(response, endDateField.dataSource, endDateField.convert(endDate));\n        }\n        project.setByDataSource(response);\n        me._changesToClear.set(me, response);\n        me.applyingProjectResponse = false;\n    }\n    loadCrudManagerData(response, options = {}) {\n        const\n            me = this,\n            { project } = me;\n        // We don't want to react on store changes while loading them\n        me.suspendChangeTracking();\n        super.loadCrudManagerData(...arguments);\n        // If there is project data provided\n        if (response?.project) {\n            // If the project is delaying its linking to a new graph instance\n            // wait till it detaches all records from the old graph\n            // and then apply the project data.\n            // Otherwise, the project changes we apply here will be overridden when detaching from the old graph.\n            // Since the code copies last identifier values from the graph when detaching.\n            if (project.delayEnteringReplica && project.hasDataInStores) {\n                project.ion({\n                    recordsUnlinked : () => {\n                        me.suspendChangeTracking();\n                        me.applyProjectResponse(response.project);\n                        me.resumeChangeTracking();\n                    },\n                    once : true\n                });\n            }\n            else {\n                me.applyProjectResponse(response.project);\n            }\n        }\n        me.resumeChangeTracking();\n    }\n    async sync() {\n        const { project } = this;\n        // Suspend Crud Manager autoSync to not react on changes during commitAsync() call\n        this.suspendAutoSync();\n        // Make sure data is in a calculated state before syncing\n        if (project) {\n            await project.commitAsync();\n        }\n        if (this.isDestroying) {\n            return;\n        }\n        // resume autoSync silently\n        this.resumeAutoSync(false);\n        return super.sync();\n    }\n    async applyResponse(request, response, options) {\n        const me = this;\n        if (me.isDestroyed || me.project?.isDestroyed) {\n            return;\n        }\n        me.trigger('beforeApplyResponse');\n        await super.applyResponse(request, response, options);\n        // If there is the project data provided or it's not provided but short responses are enabled\n        // in such cases we treat a successful response covering all sent changes as much as that's possible\n        // so responding `project : { ... }` should not be really needed\n        if (response?.project || (me.supportShortSyncResponse && request?.pack?.project)) {\n            // apply the responded changes (or accept the requested ones)\n            me.applyProjectResponse(response.project || request?.pack?.project);\n        }\n        // if we have a project\n        if (me.project) {\n            let requestType = request.type;\n            // response can force its type\n            if (me.trackResponseType) {\n                requestType = response.type || requestType;\n            }\n            // Make a boolean flag indicating what has triggered the propagation (\"propagatingLoadChanges\" or  \"propagatingSyncChanges\")\n            const propagationFlag = `propagating${StringHelper.capitalize(requestType)}Changes`;\n            me.suspendAutoSync();\n            me[propagationFlag] = true;\n            const loud = me.project.isInitialCommit && !me.project.silenceInitialCommit;\n            // Wait till calculation gets done\n            await me.project.commitAsync();\n            me[propagationFlag] = false;\n            // for initial commit we still trigger the sync, but not for following\n            me.resumeAutoSync?.(loud);\n            // Accept changes came from the server (might have been destroyed while waiting above)\n            me.commitRespondedChanges?.();\n        }\n        // Trigger if we did not get destroyed while waiting above\n        me.trigger?.('applyResponse');\n    }\n    applySyncResponse(...args) {\n        const\n            me          = this,\n            stmDisabled = me.project?.stm.disabled;\n        if (stmDisabled === false && me.ignoreRemoteChangesInSTM) {\n            me.project.stm.disable();\n        }\n        super.applySyncResponse(...args);\n        if (stmDisabled === false) {\n            me.project.stm.enable();\n        }\n    }\n    shouldClearRecordFieldChange(record, field, value) {\n        const oldValue = record.getValue(field);\n        field = record.getFieldDefinition(field);\n        // If the field value matches the one responded from the server\n        // we silently accept it\n        return field?.isEqual ? field.isEqual(oldValue, value) : ObjectHelper.isEqual(oldValue, value);\n    }\n    commitRespondedChanges() {\n        // We silently accept changes came from the server\n        this._changesToClear.forEach((changes, record) => {\n            Object.entries(changes).forEach(([key, value]) => {\n                // If the field value matches the one responded from the server\n                // we silently accept it\n                if (this.shouldClearRecordFieldChange(record, key, value)) {\n                    delete record.meta.modified[key];\n                }\n            });\n        });\n        this._changesToClear.clear();\n    }\n    applyChangesToStore(storeDesc, storeResponse, storePack, ...rest) {\n        const changesMap = super.applyChangesToStore(storeDesc, storeResponse, storePack, ...rest);\n        // The changes enter graph first but not store until later, clearing changes in StoreChanges might still leave\n        // records modified. We need to clean up after the next propagation, so we store record changes in a map for now\n        if (changesMap.size && this.project) {\n            for (const [id, changes] of changesMap) {\n                const record = storeDesc.store.getById(id);\n                record && this._changesToClear.set(record, changes);\n            }\n        }\n        return changesMap;\n    }\n};\n", "import Base from '../../Core/Base.js';\nimport AbstractCrudManagerMixin from './AbstractCrudManagerMixin.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\n/**\n * @module Scheduler/crud/AbstractCrudManager\n */\n/**\n * @typedef {Object} CrudManagerStoreDescriptor\n * @property {String} storeId Unique store identifier. Store related requests/responses will be sent under this name.\n * @property {Core.data.Store} store The store itself.\n * @property {String} [phantomIdField] Set this if the store model has a predefined field to keep phantom record identifier.\n * @property {String} [idField] id field name, if it's not specified then class will try to get it from store model.\n * @property {Boolean} [writeAllFields] Set to true to write all fields from modified records\n */\n/**\n * This is an abstract class serving as the base for the {@link Scheduler.data.CrudManager} class.\n * It implements basic mechanisms to organize batch communication with a server.\n * Yet it does not contain methods related to _data transfer_ nor _encoding_.\n * These methods are to be provided in sub-classes by consuming the appropriate mixins.\n *\n * For example, this is how the class can be used to implement an JSON encoding system:\n *\n * ```javascript\n * // let's make new CrudManager using AJAX as a transport system and JSON for encoding\n * class MyCrudManager extends JsonEncode(AjaxTransport(AbstractCrudManager)) {\n *\n * }\n * ```\n *\n * ## Data transfer and encoding methods\n *\n * These are methods that must be provided by subclasses of this class:\n *\n * - [#sendRequest](#Scheduler/crud/AbstractCrudManagerMixin#function-sendRequest)\n * - [#cancelRequest](#Scheduler/crud/AbstractCrudManagerMixin#function-cancelRequest)\n * - [#encode](#Scheduler/crud/AbstractCrudManagerMixin#function-encode)\n * - [#decode](#Scheduler/crud/AbstractCrudManagerMixin#function-decode)\n *\n * @extends Core/Base\n * @mixes Scheduler/crud/AbstractCrudManagerMixin\n * @abstract\n */\nexport default class AbstractCrudManager extends Base.mixin(AbstractCrudManagerMixin) {\n    //region Default config\n    /**\n     * The server revision stamp.\n     * The _revision stamp_ is a number which should be incremented after each server-side change.\n     * This property reflects the current version of the data retrieved from the server and gets updated after each\n     * {@link Scheduler/crud/AbstractCrudManagerMixin#function-load} and {@link Scheduler/crud/AbstractCrudManagerMixin#function-sync} call.\n     * @property {Number}\n     * @readonly\n     */\n    get revision() {\n        return this.crudRevision;\n    }\n    set revision(value) {\n        this.crudRevision = value;\n    }\n    /**\n     * Get or set data of {@link #property-crudStores} as a JSON string.\n     *\n     * Get a JSON string:\n     * ```javascript\n     *\n     * const jsonString = scheduler.crudManager.json;\n     *\n     * // returned jsonString:\n     * '{\"eventsData\":[...],\"resourcesData\":[...],...}'\n     *\n     * // object representation of the returned jsonString:\n     * {\n     *     resourcesData    : [...],\n     *     eventsData       : [...],\n     *     assignmentsData  : [...],\n     *     dependenciesData : [...],\n     *     timeRangesData   : [...],\n     *     // data from other stores\n     * }\n     * ```\n     *\n     * Set a JSON string (to populate the CrudManager stores):\n     *\n     * ```javascript\n     * scheduler.crudManager.json = '{\"eventsData\":[...],\"resourcesData\":[...],...}'\n     * ```\n     *\n     * @property {String}\n     */\n    get json() {\n        return StringHelper.safeJsonStringify(this);\n    }\n    set json(json) {\n        if (typeof json === 'string') {\n            json = StringHelper.safeJsonParse(json);\n        }\n        this.forEachCrudStore(store => {\n            const dataName = `${store.storeId}Data`;\n            if (json[dataName]) {\n                store.data = json[dataName];\n            }\n        });\n    }\n    static get defaultConfig() {\n        return {\n            /**\n             * Sets the list of stores controlled by the CRUD manager.\n             *\n             * When adding a store to the CrudManager, make sure the server response format is correct for `load` and `sync` requests.\n             * Learn more in the [Working with data](#Scheduler/guides/data/crud_manager.md#loading-data) guide.\n             *\n             * Store can be provided as in instance, using its `storeId` or as an {@link #typedef-CrudManagerStoreDescriptor}\n             * object.\n             * @config {Core.data.Store[]|String[]|CrudManagerStoreDescriptor[]}\n             */\n            stores : null\n            /**\n             * Encodes request to the server.\n             * @function encode\n             * @param {Object} request The request to encode.\n             * @returns {String} The encoded request.\n             * @abstract\n             */\n            /**\n             * Decodes response from the server.\n             * @function decode\n             * @param {String} response The response to decode.\n             * @returns {Object} The decoded response.\n             * @abstract\n             */\n        };\n    }\n    //endregion\n    //region Init\n    construct(config = {}) {\n        if (config.stores) {\n            config.crudStores = config.stores;\n            delete config.stores;\n        }\n        super.construct(config);\n    }\n    //endregion\n    //region inline data\n    /**\n     * Returns the data from all CrudManager `crudStores` in a format that can be consumed by `inlineData`.\n     *\n     * Used by JSON.stringify to correctly convert this CrudManager to json.\n     *\n     * The returned data is identical to what {@link Scheduler/crud/AbstractCrudManager#property-inlineData} contains.\n     *\n     * ```javascript\n     *\n     * const json = scheduler.crudManager.toJSON();\n     *\n     * // json:\n     * {\n     *     eventsData : [...],\n     *     resourcesData : [...],\n     *     dependenciesData : [...],\n     *     assignmentsData : [...],\n     *     timeRangesData : [...],\n     *     resourceTimeRangesData : [...],\n     *     // ... other stores data\n     * }\n     * ```\n     *\n     * Output can be consumed by `inlineData`.\n     *\n     * ```javascript\n     * const json = scheduler.crudManager.toJSON();\n     *\n     * // Plug it back in later\n     * scheduler.crudManager.inlineData = json;\n     * ```\n     *\n     * @function toJSON\n     * @returns {Object}\n     * @category JSON\n     */\n    toJSON() {\n        // Collect data from crudStores\n        const result = {};\n        this.forEachCrudStore((store, storeId) => result[`${storeId}Data`] = store.toJSON());\n        return result;\n    }\n    /**\n     * Get or set data of CrudManager stores. The returned data is identical to what\n     * {@link Scheduler/crud/AbstractCrudManager#function-toJSON} returns:\n     *\n     * ```javascript\n     *\n     * const data = scheduler.crudManager.inlineData;\n     *\n     * // data:\n     * {\n     *     eventsData : [...],\n     *     resourcesData : [...],\n     *     dependenciesData : [...],\n     *     assignmentsData : [...],\n     *     timeRangesData : [...],\n     *     resourceTimeRangesData : [...],\n     *     ... other stores data\n     * }\n     *\n     *\n     * // Plug it back in later\n     * scheduler.crudManager.inlineData = data;\n     * ```\n     *\n     * @property {Object}\n     */\n    get inlineData() {\n        return this.toJSON();\n    }\n    set inlineData(data) {\n        this.json = data;\n    }\n    //endregion\n    //region Store collection (add, remove, get & iterate)\n    set stores(stores) {\n        if (stores !== this.crudStores) {\n            this.crudStores = stores;\n        }\n    }\n    /**\n     * A list of registered stores whose server communication will be collected into a single batch.\n     * Each store is represented by a _store descriptor_.\n     * @member {CrudManagerStoreDescriptor[]} stores\n     */\n    get stores() {\n        return this.crudStores;\n    }\n    //endregion\n    /**\n     * Returns true if the crud manager is currently loading data\n     * @property {Boolean}\n     * @readonly\n     * @category CRUD\n     */\n    get isLoading() {\n        return this.isCrudManagerLoading;\n    }\n    /**\n     * Adds a store to the collection.\n     *\n     *```javascript\n     * // append stores to the end of collection\n     * crudManager.addStore([\n     *     store1,\n     *     // storeId\n     *     'bar',\n     *     // store descriptor\n     *     {\n     *         storeId : 'foo',\n     *         store   : store3\n     *     },\n     *     {\n     *         storeId         : 'bar',\n     *         store           : store4,\n     *         // to write all fields of modified records\n     *         writeAllFields  : true\n     *     }\n     * ]);\n     *```\n     *\n     * **Note:** Order in which stores are kept in the collection is very essential sometimes.\n     * Exactly in this order the loaded data will be put into each store.\n     *\n     * When adding a store to the CrudManager, make sure the server response format is correct for `load` and `sync`\n     * requests. Learn more in the [Working with data](#Scheduler/guides/data/crud_manager.md#loading-data) guide.\n     *\n     * @param {Core.data.Store|String|CrudManagerStoreDescriptor|Core.data.Store[]|String[]|CrudManagerStoreDescriptor[]} store\n     * A store or list of stores. Each store might be specified by its instance, `storeId` or _descriptor_.\n     * @param {Number} [position] The relative position of the store. If `fromStore` is specified the position will be\n     * taken relative to it.\n     * If not specified then store(s) will be appended to the end of collection.\n     * Otherwise, it will be an index in stores collection.\n     *\n     * ```javascript\n     * // insert stores store4, store5 to the start of collection\n     * crudManager.addStore([ store4, store5 ], 0);\n     * ```\n     *\n     * @param {String|Core.data.Store|CrudManagerStoreDescriptor} [fromStore] The store relative to which position\n     * should be calculated. Can be defined as a store identifier, instance or descriptor (the result of\n     * {@link Scheduler/crud/AbstractCrudManagerMixin#function-getStoreDescriptor} call).\n     *\n     * ```javascript\n     * // insert store6 just before a store having storeId equal to 'foo'\n     * crudManager.addStore(store6, 0, 'foo');\n     *\n     * // insert store7 just after store3 store\n     * crudManager.addStore(store7, 1, store3);\n     * ```\n     */\n    addStore(...args) {\n        return this.addCrudStore(...args);\n    }\n    removeStore(...args) {\n        return this.removeCrudStore(...args);\n    }\n    getStore(...args) {\n        return this.getCrudStore(...args);\n    }\n    hasChanges(...args) {\n        return this.crudStoreHasChanges(...args);\n    }\n    loadData(...args) {\n        return this.loadCrudManagerData(...args);\n    }\n}\nAbstractCrudManager._$name = 'AbstractCrudManager';", "import Model from '../../../Core/data/Model.js';\n/**\n * @module Scheduler/model/mixin/ProjectModelCommon\n */\n/**\n * Mixin that provides helpful methods and properties for a `ProjectModel`. This mixin applies to all Bryntum products.\n * @mixin\n * @internal\n */\nexport default Target => class ProjectModelCommon extends (Target || Model) {\n    static $name = 'ProjectModelCommon';\n    static get configurable() {\n        return {\n            // Documented in Gantt/Scheduler/SchedulerPro version of ./model/ProjectModel since types differ\n            assignments  : null,\n            dependencies : null,\n            resources    : null,\n            timeRanges   : null\n        };\n    }\n    // Project is a Model which triggers events, therefore it can define event handlers using `onEvent` syntax. Event\n    // handler can be a string (for another instance property), or a function. Therefore, it is impossible to tell them\n    // apart and project model can not expose fields.\n    // https://github.com/bryntum/support/issues/7457\n    static get autoExposeFields() {\n        return false;\n    }\n    //region Inline data\n    get assignments() {\n        return this.assignmentStore.allRecords;\n    }\n    updateAssignments(assignments) {\n        this.assignmentStore.data = assignments;\n    }\n    get dependencies() {\n        return this.dependencyStore.allRecords;\n    }\n    updateDependencies(dependencies) {\n        this.dependencyStore.data = dependencies;\n    }\n    get resources() {\n        return this.resourceStore.allRecords;\n    }\n    updateResources(resources) {\n        this.resourceStore.data = resources;\n    }\n    get timeRanges() {\n        return this.timeRangeStore.allRecords;\n    }\n    getTimeRanges(startDate, endDate) {\n        const\n            store = this.timeRangeStore,\n            ret = [];\n        for (const timeSpan of store) {\n            // Collect occurrences for the recurring events in the record set\n            if (timeSpan.isRecurring) {\n                ret.push(...timeSpan.getOccurrencesForDateRange(startDate, endDate));\n            }\n            else if (timeSpan.startDate < endDate && startDate < timeSpan.endDate) {\n                ret.push(timeSpan);\n            }\n        }\n        return ret;\n    }\n    updateTimeRanges(timeRanges) {\n        this.timeRangeStore.data = timeRanges;\n    }\n    getResourceTimeRanges(startDate, endDate) {\n        const\n            store = this.resourceTimeRangeStore,\n            ret = [];\n        for (const timeSpan of store) {\n            // Collect occurrences for the recurring events in the record set\n            if (timeSpan.isRecurring) {\n                ret.push(...timeSpan.getOccurrencesForDateRange(startDate, endDate));\n            }\n            // A timerange may consist of just a startDate if it is intended to be a line.\n            else if (timeSpan.startDate < endDate && (!timeSpan.endDate || startDate < timeSpan.endDate)) {\n                ret.push(timeSpan);\n            }\n        }\n        return ret;\n    }\n    //endregion\n};\n", "import TimeSpan from './TimeSpan.js';\nimport RecurringTimeSpan from './mixin/RecurringTimeSpan.js';\n/**\n * @module Scheduler/model/ResourceTimeRangeModel\n */\n/**\n * This class represent a single resource time range in your schedule.\n * To style the rendered elements, use {@link Scheduler.model.TimeSpan#field-cls} or {@link #field-timeRangeColor} field.\n * The class is used by the {@link Scheduler.feature.ResourceTimeRanges} feature.\n *\n * ## Recurring ranges support\n *\n * You can also make ranges recurring by adding a `recurrenceRule` to the range data.\n *\n * ```javascript\n *\n * // Make new store that supports time ranges recurrence\n * const store = new ResourceTimeRangeStore({\n *     data : [{        {\n *         id             : 1,\n *         resourceId     : 'r1',\n *         startDate      : '2019-01-01T11:00',\n *         endDate        : '2019-01-01T13:00',\n *         name           : 'Coffee break',\n *         // this time range should repeat every day\n *         recurrenceRule : 'FREQ=DAILY'\n *     }]\n * });\n * ```\n *\n * @extends Scheduler/model/TimeSpan\n */\nexport default class ResourceTimeRangeModel extends TimeSpan.mixin(RecurringTimeSpan) {\n    static $name = 'ResourceTimeRangeModel';\n    //region Fields\n    static fields = [\n        /**\n         * Id of the resource this time range is associated with\n         * @field {String|Number} resourceId\n         */\n        'resourceId',\n        /**\n         * Controls this time range's primary color, defaults to using current themes default time range color.\n         * @field {String} timeRangeColor\n         */\n        'timeRangeColor'\n    ];\n    static relations = {\n        /**\n         * The associated resource, retrieved using a relation to a ResourceStore determined by the value assigned\n         * to `resourceId`. The relation also lets you access all time ranges on a resource through\n         * `ResourceModel#timeRanges`.\n         * @member {Scheduler.model.ResourceModel} resource\n         */\n        resource : {\n            foreignKey            : 'resourceId',\n            foreignStore          : 'resourceStore',\n            relatedCollectionName : 'timeRanges',\n            nullFieldOnRemove     : true\n        }\n    };\n    static domIdPrefix = 'resourcetimerange';\n    get domId() {\n        return `${this.constructor.domIdPrefix}-${this.id}`;\n    }\n    //endregion\n    // Used internally to differentiate between Event and ResourceTimeRange\n    get isResourceTimeRange() {\n        return true;\n    }\n    // To match EventModel API\n    get resources() {\n        return this.resource ? [this.resource] : [];\n    }\n    // To match EventModel API\n    get $linkedResources() {\n        return this.resources;\n    }\n}\nResourceTimeRangeModel._$name = 'ResourceTimeRangeModel';", "import AjaxStore from '../../Core/data/AjaxStore.js';\nimport ResourceTimeRangeModel from '../model/ResourceTimeRangeModel.js';\nimport RecurringTimeSpansMixin from './mixin/RecurringTimeSpansMixin.js';\n/**\n * @module Scheduler/data/ResourceTimeRangeStore\n */\n/**\n * A class representing a collection of resource time ranges.\n * Contains a collection of {@link Scheduler.model.ResourceTimeRangeModel} records.\n * The class is used by the {@link Scheduler.feature.ResourceTimeRanges} feature.\n *\n * ## Recurring ranges support\n *\n * This class supports recurrence:\n *\n * ```javascript\n * const store = new ResourceTimeRangeStore({\n *     data : [{        {\n *         id             : 1,\n *         resourceId     : 'r1',\n *         startDate      : '2019-01-01T11:00',\n *         endDate        : '2019-01-01T13:00',\n *         name           : 'Coffee break',\n *         // this time range should repeat every day\n *         recurrenceRule : 'FREQ=DAILY'\n *     }]\n * });\n * ```\n * @mixes Scheduler/data/mixin/RecurringTimeSpansMixin\n * @extends Core/data/AjaxStore\n */\nexport default class ResourceTimeRangeStore extends AjaxStore.mixin(RecurringTimeSpansMixin) {\n    static $name = 'ResourceTimeRangeStore';\n    static get defaultConfig() {\n        return {\n            /**\n             * CrudManager must load stores in the correct order. Lowest first.\n             * @private\n             */\n            loadPriority : 500,\n            /**\n             * CrudManager must sync stores in the correct order. Lowest first.\n             * @private\n             */\n            syncPriority : 500,\n            /**\n             * This store should be linked to a ResourceStore to link the time ranges to resources\n             * @config {Scheduler.data.ResourceStore}\n             */\n            resourceStore : null,\n            modelClass : ResourceTimeRangeModel,\n            storeId    : 'resourceTimeRanges'\n        };\n    }\n    set resourceStore(store) {\n        this._resourceStore = store;\n        // If store is assigned after configuration we need to init relations\n        if (!this.isConfiguring) {\n            this.initRelations(true);\n        }\n    }\n    get resourceStore() {\n        return this._resourceStore;\n    }\n    // Matching signature in EventStore to allow reusage of SchedulerStores#onInternalEventStoreChange()\n    getResourcesForEvent(resourceTimeRange) {\n        return [resourceTimeRange.resource];\n    }\n    /**\n     * Get resource time ranges intersecting the specified date range for a resource.\n     *\n     * The result is sorted by `startDate`.\n     *\n     * @param {Object} options Options\n     * @param {Scheduler.model.ResourceModel} options.resourceRecord Resource record\n     * @param {Date} options.startDate Start date of the range\n     * @param {Date} options.endDate End date of the range\n     * @returns {Scheduler.model.ResourceTimeRangeModel[]}\n     */\n    getRanges({ resourceRecord, startDate, endDate }) {\n        const rangesInDateRange = resourceRecord.timeRanges.flatMap(range => {\n            if (range.supportsRecurring) {\n                return range.getOccurrencesForDateRange(startDate, endDate);\n            }\n            if (range.intersectsRange(startDate, endDate)) {\n                return range;\n            }\n            return [];\n        });\n        return rangesInDateRange.sort((span1, span2) => span1.startDate - span2.startDate);\n    }\n}\nResourceTimeRangeStore._$name = 'ResourceTimeRangeStore';", "import InstancePlugin from '../../../Core/mixin/InstancePlugin.js';\n/**\n * @module Scheduler/data/plugin/ProjectModelMixin\n */\n/**\n * Plugs in to a time zone convertable Store to affect and add some functionality.\n * @plugin\n * @private\n */\nexport default class StoreTimeZonePlugin extends InstancePlugin {\n    static $name = 'storeTimeZonePlugin';\n    static pluginConfig = {\n        before : ['processRecord'],\n        assign : ['beforeSyncRecord', 'afterSyncRecord']\n    };\n    get timeZone() {\n        return this.client.project.timeZone;\n    }\n    // Overrides a Store's processRecord function to be able to convert records added by a dataset\n    // before they are processed by the engine\n    processRecord(record, isDataSet) {\n        if (isDataSet || this.client.isLoadingData || record.timeZone !== undefined) {\n            // When loading or changing dataset, de data is treated as local dates and need to be converted\n            // Also convert when adding a record with a timeZone specified (null means local time zone)\n            this.convertRecordToTimeZone(record);\n        }\n    }\n    convertRecordToTimeZone(record, timeZone = this.timeZone) {\n        if (record.timeZone !== timeZone) {\n            record.$ignoreChange = true; // Used to ignore changes in NestedEvents feature\n            // Convert baselines if exists\n            if (record.baselines?.count) {\n                for (const bl of record.baselines) {\n                    // The baseline records is not marked with a timezone when they are created\n                    if (record.timeZone !== bl.timeZone) {\n                        bl.timeZone = record.timeZone;\n                    }\n                    bl.convertToTimeZone(timeZone);\n                }\n            }\n            if (record.occurrences?.length) {\n                for (const o of record.occurrences) {\n                    if (record.timeZone !== o.timeZone) {\n                        o.timeZone = record.timeZone;\n                    }\n                    o.convertToTimeZone(timeZone);\n                }\n            }\n            record.convertToTimeZone(timeZone);\n            record.$ignoreChange = false;\n        }\n    }\n    beforeSyncRecord({ record }) {\n        if (record.timeZone != null) {\n            record.$restoreTimeZone = record.timeZone;\n            record.convertToTimeZone();\n        }\n    }\n    afterSyncRecord({ record }) {\n        if (record.$restoreTimeZone) {\n            record.convertToTimeZone(record.$restoreTimeZone);\n            record.$restoreTimeZone = null;\n        }\n    }\n}\nStoreTimeZonePlugin._$name = 'StoreTimeZonePlugin';", "import Model from '../../../Core/data/Model.js';\nimport TimeZoneHelper from '../../../Core/helper/TimeZoneHelper.js';\nimport StoreTimeZonePlugin from '../../data/plugin/StoreTimeZonePlugin.js';\n/**\n * @module Scheduler/model/mixin/ProjectModelTimeZoneMixin\n */\n/**\n * Mixin that holds TimeZone functionality shared between projects in Scheduler, Scheduler Pro, Gantt and Calendar\n * @mixin\n */\nexport default Target => class ProjectModelTimeZoneMixin extends (Target || Model) {\n    static $name = 'ProjectModelTimeZoneMixin';\n    static configurable = {\n        /**\n         * Set to a IANA time zone (i.e. `Europe/Stockholm`) or a UTC offset in minutes (i.e. `-120`). This will\n         * convert all events, tasks and time ranges to the specified time zone or offset. It will also affect the\n         * displayed timeline's headers as well at the start and end date of it.\n         *\n         * There is currently no built-in time zone support in JavaScript which means that the converted dates\n         * technically still are in the local system time zone, but adjusted to match the configured time zone.\n         *\n         * ### DST\n         * If a IANA time zone is provided, there will be support for DST. But if local system time zone has DST that\n         * will affect the time zone conversion at the exact hour when the local system time zone switches DST on and\n         * off.\n         *\n         * *For example:*\n         * 1. The local system time zone is `Europe/Stockholm` (which is UTC+1 or UTC+2 when DST).\n         * 2. The date `2022-03-27T07:00:00Z` (which is UTC) is converted to `America/Chicago` (which is UTC-6 or UTC-5\n         *    when DST).\n         * 3. The converted JS date will be created from `2022-03-27T02:00:00` which is exactly the hour when\n         *    `Europe/Stockholm` adds an DST hour. This has the effect that the converted date shows up incorrectly as\n         *    `2022-03-27T03:00` instead.\n         *\n         * If a UTC offset is provided, there is no DST support at all.\n         *\n         * ### Editing\n         * If creating new records or editing existing record dates, the dates will be interpreted as in the selected\n         * time zone.\n         *\n         * If you want to create new records with dates that either should be interpreted as local system time zone or\n         * from any other time zone, specify the {@link Scheduler.model.mixin.TimeZonedDatesMixin#field-timeZone} field\n         * on the record.\n         *\n         * ### Saving\n         * When saving or syncing data, the dates will be restored to local system time and converted to JSON\n         * ISO formatted.\n         *\n         * @prp {String|Number} [timeZone]\n         * @category Advanced\n         */\n        timeZone : {\n            // Don't ingest the config eagerly because it relies on project being present.\n            // Lazy means it waits for ingestion until timeZone property is referenced.\n            $config : 'lazy',\n            value   : null\n        }\n    };\n    get _storesWithDates() {\n        return [this.taskStore, this.timeRangeStore, this.resourceTimeRangeStore].filter(s => s);\n    }\n    plugStore(store) {\n        if (!store.hasPlugin(StoreTimeZonePlugin)) {\n            store.addPlugins(StoreTimeZonePlugin);\n        }\n    }\n    unplugStore(store) {\n        store.plugins.storeTimeZonePlugin?.destroy();\n    }\n    attachStore(store) {\n        super.attachStore(store);\n        // If a new store is attached, convert it to the configured timezone\n        if (store && this.timeZone != null && this._storesWithDates.includes(store)) {\n            this.plugStore(store);\n            this.convertStoresToTimeZone([store]);\n        }\n    }\n    detachStore(store) {\n        super.detachStore(store);\n        // When a store is detached, the records isn't timezone converted anymore\n        if (store && !store.isDestroyed && this.timeZone != null) {\n            // Convert records back to local system timezone\n            this.convertStoresToTimeZone([store], null);\n            // Removes the plugin\n            this.unplugStore(store);\n        }\n    }\n    relayStoreChange({ source, action, records, replaced }) {\n        const me = this;\n        if (me.timeZone != null && me._storesWithDates.includes(source)) {\n            // When a record is added or replaced, it is treated as in current configured timezone\n            if (['add', 'replace'].includes(action)) {\n                if (!records?.length && replaced?.length) {\n                    records = replaced;\n                }\n                if (records.length) {\n                    records.forEach(record => record.timeZone = me.timeZone);\n                }\n            }\n        }\n    }\n    convertStoresToTimeZone(stores, timeZone = this.timeZone) {\n        const\n            me            = this,\n            stmAutoRecord = me.stm?.autoRecord;\n        // Disable STM while updating timezone values\n        if (stmAutoRecord) {\n            me.stm.autoRecord = false;\n        }\n        for (const store of stores) {\n            store?.forEach(r => store.plugins.storeTimeZonePlugin.convertRecordToTimeZone(r, timeZone));\n        }\n        if (stmAutoRecord) {\n            // Restore original value\n            me.stmAutoRecord = stmAutoRecord;\n        }\n    }\n    updateTimeZone(timeZone, oldTimeZone) {\n        const\n            me            = this,\n            isConfiguring = me._isConfiguringTimeZone || me.isConfiguring;\n        me.trigger('beforeTimeZoneChange', {\n            timeZone,\n            oldTimeZone,\n            isConfiguring\n        });\n        me.calendarManagerStore.forEach(calendar => calendar.bumpVersion());\n        me._storesWithDates.forEach(store => me.plugStore(store));\n        // Convert data to time zone\n        me.convertStoresToTimeZone(me._storesWithDates);\n        // Convert project startdate\n        if (me.startDate) {\n            const startDate = oldTimeZone != null ? TimeZoneHelper.fromTimeZone(me.startDate, oldTimeZone) : me.startDate;\n            me.startDate = timeZone != null ? TimeZoneHelper.toTimeZone(startDate, timeZone) : startDate;\n        }\n        me.ignoreRecordChanges = true;\n        me.commitAsync().then(() => {\n            if (!me.isDestroyed) {\n                me.trigger('timeZoneChange', {\n                    timeZone,\n                    oldTimeZone,\n                    isConfiguring\n                });\n            }\n            delete me._isConfiguringTimeZone;\n        });\n    }\n};\n", "import TimeSpan from './TimeSpan.js';\nimport RecurringTimeSpan from './mixin/RecurringTimeSpan.js';\n/**\n * @module Scheduler/model/TimeRangeModel\n */\n/**\n * This class represents a named time range. It is used by the {@link Scheduler.feature.TimeRanges} feature.\n *\n * This class inherits most of its fields from {@link Scheduler.model.TimeSpan}. The most important of these fields are\n * the following:\n *\n * - {@link #field-name}\n * - {@link #field-startDate}\n * - {@link #field-endDate}\n * - {@link #field-iconCls}\n *\n * It's an indirect subclass of {@link Core.data.Model}. Please refer to documentation of those classes to become\n * familiar with the base interface of this class.\n * The data source of any field can be customized in the subclass. Please refer to {@link Core.data.Model} for details.\n *\n * Time ranges may recur. See the {@link #field-recurrenceRule} field.\n *\n * @extends Scheduler/model/TimeSpan\n * @mixes Scheduler/model/mixin/RecurringTimeSpan\n * @uninherit Core/data/mixin/TreeNode\n */\nexport default class TimeRangeModel extends TimeSpan.mixin(RecurringTimeSpan) {\n    static $name = 'TimeRangeModel';\n    /**\n     * @hidefields children, parentId, parentIndex\n     */\n    afterConstruct() {\n        if (!this.endDate) {\n            this.endDate = this.startDate;\n        }\n        super.afterConstruct();\n    }\n}\nTimeRangeModel._$name = 'TimeRangeModel';", "import AjaxStore from '../../Core/data/AjaxStore.js';\nimport TimeRangeModel from '../model/TimeRangeModel.js';\nimport RecurringTimeSpansMixin from './mixin/RecurringTimeSpansMixin.js';\n/**\n * @module Scheduler/data/TimeRangeStore\n */\n/**\n * A class representing a collection of time ranges.\n * Contains a collection of {@link Scheduler.model.TimeRangeModel} records.\n * The class is used by the {@link Scheduler.feature.TimeRanges} feature.\n *\n * ## Recurring ranges support\n *\n * This class supports recurrence:\n *\n * ```javascript\n * const store = new TimeRangeStore({\n *     data : [{        {\n *         id             : 1,\n *         startDate      : '2019-01-01T11:00',\n *         endDate        : '2019-01-01T13:00',\n *         name           : 'Coffee break',\n *         // this time range should repeat every day\n *         recurrenceRule : 'FREQ=DAILY'\n *     }]\n * });\n * ```\n *\n * @mixes Scheduler/data/mixin/RecurringTimeSpansMixin\n * @extends Core/data/AjaxStore\n */\nexport default class TimeRangeStore extends AjaxStore.mixin(RecurringTimeSpansMixin) {\n    static $name = 'TimeRangeStore';\n    static defaultConfig = {\n        /**\n         * CrudManager must load stores in the correct order. Lowest first.\n         * @private\n         */\n        loadPriority : 500,\n        /**\n         * CrudManager must sync stores in the correct order. Lowest first.\n         * @private\n         */\n        syncPriority : 500,\n        modelClass : TimeRangeModel,\n        storeId    : 'timeRanges'\n    };\n}\nTimeRangeStore._$name = 'TimeRangeStore';", "import Model from '../../../Core/data/Model.js';\nimport ProjectModelCommon from './ProjectModelCommon.js';\nimport ResourceTimeRangeModel from '../ResourceTimeRangeModel.js';\nimport StringHelper from '../../../Core/helper/StringHelper.js';\nimport ResourceTimeRangeStore from '../../data/ResourceTimeRangeStore.js';\nimport ProjectModelTimeZoneMixin from './ProjectModelTimeZoneMixin.js';\nimport TimeRangeStore from '../../data/TimeRangeStore.js';\nimport TimeRangeModel from '../TimeRangeModel.js';\n/**\n * @module Scheduler/model/mixin/ProjectModelMixin\n */\n/**\n * Mixin that holds configuration shared between projects in Scheduler and Scheduler Pro.\n * @mixes Scheduler/model/mixin/ProjectModelTimeZoneMixin\n *\n * @typings extends Core.data.Model\n *\n * @mixin\n */\nexport default Target => class ProjectModelMixin extends (Target || Model).mixin(\n    ProjectModelCommon,\n    ProjectModelTimeZoneMixin\n) {\n    static get $name() {\n        return 'ProjectModelMixin';\n    }\n    //region Config\n    static get defaultConfig() {\n        return {\n            /**\n             * State tracking manager instance the project relies on\n             * @member {Core.data.stm.StateTrackingManager} stm\n             * @category Advanced\n             */\n            /**\n             * Configuration options to provide to the STM manager\n             *\n             * @config {StateTrackingManagerConfig|Core.data.stm.StateTrackingManager}\n             * @category Advanced\n             */\n            stm : {},\n            timeRangeModelClass         : TimeRangeModel,\n            resourceTimeRangeModelClass : ResourceTimeRangeModel,\n            /**\n             * The constructor to create a time range store instance with. Should be a class subclassing the\n             * {@link Scheduler.data.TimeRangeStore}\n             * @config {Scheduler.data.TimeRangeStore|Object}\n             * @typings {typeof TimeRangeStore|object}\n             * @category Models & Stores\n             */\n            timeRangeStoreClass : TimeRangeStore,\n            /**\n             * The constructor to create a resource time range store instance with. Should be a class subclassing the\n             * {@link Scheduler.data.ResourceTimeRangeStore}\n             * @config {Scheduler.data.ResourceTimeRangeStore|Object}\n             * @typings {typeof ResourceTimeRangeStore|object}\n             * @category Models & Stores\n             */\n            resourceTimeRangeStoreClass : ResourceTimeRangeStore,\n            /**\n             * The initial data, to fill the {@link #property-timeRangeStore timeRangeStore} with.\n             * Should be an array of {@link Scheduler.model.TimeSpan TimeSpan} or its configuration objects.\n             *\n             * @config {Scheduler.model.TimeSpan[]} [timeRangesData]\n             * @category Legacy inline data\n             */\n            /**\n             * The initial data, to fill the {@link #property-resourceTimeRangeStore resourceTimeRangeStore} with.\n             * Should be an array of {@link Scheduler.model.ResourceTimeRangeModel ResourceTimeRangeModel} or it's\n             * configuration objects.\n             *\n             * @config {Scheduler.model.ResourceTimeRangeModel[]} [resourceTimeRangesData]\n             * @category Legacy inline data\n             */\n            eventStore             : {},\n            assignmentStore        : {},\n            dependencyStore        : {},\n            resourceStore          : {},\n            timeRangesData         : null,\n            resourceTimeRangesData : null\n        };\n    }\n    static configurable = {\n        /**\n         * Project data as a JSON string, used to populate its stores.\n         *\n         * ```javascript\n         * const project = new ProjectModel({\n         *     json : '{\"eventsData\":[...],\"resourcesData\":[...],...}'\n         * }\n         * ```\n         *\n         * @config {String}\n         * @category Inline data\n         */\n        json : null,\n        /**\n         * The {@link Core.data.Store store} holding the time ranges information.\n         *\n         * See also {@link Scheduler.model.TimeSpan}\n         *\n         * @member {Core.data.Store} timeRangeStore\n         * @category Models & Stores\n         */\n        /**\n         * A {@link Core.data.Store} instance or a config object.\n         * @config {Core.data.Store|StoreConfig}\n         * @category Models & Stores\n         */\n        timeRangeStore : {\n            value   : {},\n            $config : 'nullify'\n        },\n        /**\n         * The {@link Scheduler.data.ResourceTimeRangeStore store} holding the resource time ranges information.\n         *\n         * See also {@link Scheduler.model.ResourceTimeRangeModel}\n         *\n         * @member {Scheduler.data.ResourceTimeRangeStore} resourceTimeRangeStore\n         * @category Models & Stores\n         */\n        /**\n         * A {@link Scheduler.data.ResourceTimeRangeStore} instance or a config object.\n         * @config {Scheduler.data.ResourceTimeRangeStore|ResourceTimeRangeStoreConfig}\n         * @category Models & Stores\n         */\n        resourceTimeRangeStore : {\n            value   : {},\n            $config : 'nullify'\n        },\n        // Documented in Scheduler/SchedulerPro versions of model/ProjectModel since types differ\n        events             : null,\n        resourceTimeRanges : null\n    };\n    //endregion\n    //region Properties\n    /**\n     * Get or set data of project stores. The returned data is identical to what\n     * {@link #function-toJSON} returns:\n     *\n     * ```javascript\n     *\n     * const data = scheduler.project.inlineData;\n     *\n     * // data:\n     * {\n     *     eventsData             : [...],\n     *     resourcesData          : [...],\n     *     dependenciesData       : [...],\n     *     assignmentsData        : [...],\n     *     resourceTimeRangesData : [...],\n     *     timeRangesData         : [...]\n     * }\n     *\n     *\n     * // Plug it back in later\n     * scheduler.project.inlineData = data;\n     * ```\n     *\n     * @property {Object}\n     * @category Inline data\n     */\n    get inlineData() {\n        return StringHelper.safeJsonParse(super.json);\n    }\n    set inlineData(inlineData) {\n        this.json = inlineData;\n    }\n    //endregion\n    //region Functions\n    /**\n     * Accepts a \"data package\" consisting of data for the projects stores, which is then loaded into the stores.\n     *\n     * The package can hold data for `EventStore`, `AssignmentStore`, `ResourceStore`, `DependencyStore`,\n     * `TimeRangeStore` and `ResourceTimeRangeStore`. It uses the same format as when creating a project with inline\n     * data:\n     *\n     * ```javascript\n     * await project.loadInlineData({\n     *     eventsData             : [...],\n     *     resourcesData          : [...],\n     *     assignmentsData        : [...],\n     *     dependenciesData       : [...],\n     *     resourceTimeRangesData : [...],\n     *     timeRangesData         : [...]\n     * });\n     * ```\n     *\n     * After populating the stores it commits the project, starting its calculations. By awaiting `loadInlineData()` you\n     * can be sure that project calculations are finished.\n     *\n     * @function loadInlineData\n     * @param {Object} dataPackage A data package as described above\n     * @fires load\n     * @async\n     * @category Inline data\n     */\n    /**\n     * Project changes (CRUD operations to records in its stores) are automatically committed on a buffer to the\n     * underlying graph based calculation engine. The engine performs it calculations async.\n     *\n     * By calling this function, the commit happens right away. And by awaiting it you are sure that project\n     * calculations are finished and that references between records are up to date.\n     *\n     * The returned promise is resolved with an object. If that object has `rejectedWith` set, there has been a conflict and the calculation failed.\n     *\n     * ```javascript\n     * // Move an event in time\n     * eventStore.first.shift(1);\n     *\n     * // Trigger calculations directly and wait for them to finish\n     * const result = await project.commitAsync();\n     *\n     * if (result.rejectedWith) {\n     *     // there was a conflict during the scheduling\n     * }\n     * ```\n     *\n     * @async\n     * @function commitAsync\n     * @category Common\n     */\n    //endregion\n    //region Init\n    construct(config = {}) {\n        super.construct(...arguments);\n        // These stores are not handled by engine, but still held on project\n        if (config.timeRangesData) {\n            this.timeRangeStore.data = config.timeRangesData;\n        }\n        if (config.resourceTimeRangesData) {\n            this.resourceTimeRangeStore.data = config.resourceTimeRangesData;\n        }\n    }\n    afterConstruct() {\n        super.afterConstruct();\n        const me = this;\n        !me.timeRangeStore.stm && me.stm.addStore(me.timeRangeStore);\n        !me.resourceTimeRangeStore.stm && me.stm.addStore(me.resourceTimeRangeStore);\n    }\n    //endregion\n    //region Attaching stores\n    // Attach to a store, relaying its change events\n    attachStore(store) {\n        if (store) {\n            store.ion({\n                name    : store.$$name,\n                change  : 'relayStoreChange',\n                thisObj : this\n            });\n        }\n        super.attachStore(store);\n    }\n    // Detach a store, stop relaying its change events\n    detachStore(store) {\n        if (store) {\n            this.detachListeners(store.$$name);\n            super.detachStore(store);\n        }\n    }\n    relayStoreChange(event) {\n        super.relayStoreChange(event);\n        /**\n         * Fired when data in any of the projects stores changes.\n         *\n         * Basically a relayed version of each stores own change event, decorated with which store it originates from.\n         * See the {@link Core.data.Store#event-change store change event} documentation for more information.\n         *\n         * @event change\n         * @param {Scheduler.model.ProjectModel} source This project\n         * @typings source -> {Scheduler.model.ProjectModel||any}\n         * @param {Core.data.Store} store Affected store\n         * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} action\n         * Name of action which triggered the change. May be one of:\n         * * `'remove'`\n         * * `'removeAll'`\n         * * `'add'`\n         * * `'updatemultiple'`\n         * * `'clearchanges'`\n         * * `'filter'`\n         * * `'update'`\n         * * `'dataset'`\n         * * `'replace'`\n         * @param {Core.data.Model} record Changed record, for actions that affects exactly one record (`'update'`)\n         * @param {Core.data.Model[]} records Changed records, passed for all actions except `'removeAll'`\n         * @param {Object} changes Passed for the `'update'` action, info on which record fields changed\n         */\n        return this.trigger('change', { store : event.source, ...event, source : this });\n    }\n    updateTimeRangeStore(store, oldStore) {\n        this.detachStore(oldStore);\n        this.attachStore(store);\n        if (oldStore) {\n            oldStore.project = null;\n        }\n        if (store) {\n            store.project = this;\n        }\n    }\n    setTimeRangeStore(store) {\n        this.timeRangeStore = store;\n    }\n    changeTimeRangeStore(store) {\n        // If it's not being nullified, upgrade a config object to be a full store\n        if (store && !store.isStore) {\n            store = this.timeRangeStoreClass.new({\n                modelClass : this.timeRangeModelClass\n            }, store);\n        }\n        return store;\n    }\n    updateResourceTimeRangeStore(store, oldStore) {\n        this.detachStore(oldStore);\n        this.attachStore(store);\n        if (oldStore) {\n            oldStore.project = null;\n        }\n        if (store) {\n            store.project = this;\n        }\n    }\n    changeResourceTimeRangeStore(store) {\n        // If it's not being nullified, upgrade a config object to be a full store\n        if (store && !store.isStore) {\n            store = this.resourceTimeRangeStoreClass.new({\n                modelClass : this.resourceTimeRangeModelClass\n            }, store);\n        }\n        return store;\n    }\n    setResourceTimeRangeStore(store) {\n        this.resourceTimeRangeStore = store;\n    }\n    //endregion\n    //region Inline data\n    get events() {\n        return this.eventStore.allRecords;\n    }\n    updateEvents(events) {\n        this.eventStore.data = events;\n    }\n    get resourceTimeRanges() {\n        return this.resourceTimeRangeStore.allRecords;\n    }\n    updateResourceTimeRanges(resourceTimeRanges) {\n        this.resourceTimeRangeStore.data = resourceTimeRanges;\n    }\n    async loadInlineData(data) {\n        // Flag reset in super\n        this.isLoadingInlineData = true;\n        // Stores not handled by engine\n        if (data.resourceTimeRangesData) {\n            this.resourceTimeRangeStore.data = data.resourceTimeRangesData;\n        }\n        if (data.timeRangesData) {\n            this.timeRangeStore.data = data.timeRangesData;\n        }\n        return super.loadInlineData(data);\n    }\n    //endregion\n    //region JSON\n    /**\n     * Returns the data from the records of the projects stores, in a format that can be consumed by `loadInlineData()`.\n     *\n     * Used by JSON.stringify to correctly convert this record to json.\n     *\n     *\n     * ```javascript\n     * const project = new ProjectModel({\n     *     eventsData             : [...],\n     *     resourcesData          : [...],\n     *     assignmentsData        : [...],\n     *     dependenciesData       : [...],\n     *     resourceTimeRangesData : [...],\n     *     timeRangesData         : [...]\n     * });\n     *\n     * const json = project.toJSON();\n     *\n     * // json:\n     * {\n     *     eventsData             : [...],\n     *     resourcesData          : [...],\n     *     dependenciesData       : [...],\n     *     assignmentsData        : [...],\n     *     resourceTimeRangesData : [...],\n     *     timeRangesData         : [...]\n     * }\n     * ```\n     *\n     * Output can be consumed by `loadInlineData()`:\n     *\n     * ```javascript\n     * const json = project.toJSON();\n     *\n     * // Plug it back in later\n     * project.loadInlineData(json);\n     * ```\n     *\n     * @returns {Object}\n     * @category Inline data\n     */\n    toJSON() {\n        const\n            me = this,\n            result = {\n                eventsData             : me.eventStore.toJSON(),\n                resourcesData          : me.resourceStore.toJSON(),\n                dependenciesData       : me.dependencyStore.toJSON(),\n                timeRangesData         : me.timeRangeStore.toJSON(),\n                resourceTimeRangesData : me.resourceTimeRangeStore.toJSON()\n            };\n        if (!me.eventStore.usesSingleAssignment) {\n            result.assignmentsData = me.assignmentStore.toJSON();\n        }\n        return result;\n    }\n    /**\n     * Get or set project data (records from its stores) as a JSON string.\n     *\n     * Get a JSON string:\n     *\n     * ```javascript\n     * const project = new ProjectModel({\n     *     eventsData             : [...],\n     *     resourcesData          : [...],\n     *     assignmentsData        : [...],\n     *     dependenciesData       : [...],\n     *     resourceTimeRangesData : [...],\n     *     timeRangesData         : [...]\n     * });\n     *\n     * const jsonString = project.json;\n     *\n     * // jsonString:\n     * '{\"eventsData\":[...],\"resourcesData\":[...],...}'\n     * ```\n     *\n     * Set a JSON string (to populate the project stores):\n     *\n     * ```javascript\n     * project.json = '{\"eventsData\":[...],\"resourcesData\":[...],...}'\n     * ```\n     *\n     * @property {String}\n     * @category Inline data\n     */\n    get json() {\n        return super.json;\n    }\n    changeJson(json) {\n        if (typeof json === 'string') {\n            json = StringHelper.safeJsonParse(json);\n        }\n        return json;\n    }\n    updateJson(json) {\n        json && this.loadInlineData(json);\n    }\n    //endregion\n    afterChange(toSet, wasSet) {\n        super.afterChange(...arguments);\n        if (wasSet.calendar) {\n            this.trigger('calendarChange');\n        }\n    }\n    doDestroy() {\n        this.timeRangeStore.destroy();\n        this.resourceTimeRangeStore.destroy();\n        super.doDestroy();\n    }\n};\n", "/**\n * @module Scheduler/model/mixin/ProjectCurrentConfig\n */\n/**\n * Mixin that makes sure current config for a project includes store data and is cleaned up properly.\n *\n * @mixin\n * @private\n */\nexport default Target => class ProjectCurrentConfig extends Target {\n    // This function is not meant to be called by any code other than Base#getCurrentConfig().\n    // It extracts the current configs/fields for the project, with special handling for inline data\n    getCurrentConfig(options) {\n        const\n            me     = this,\n            result = super.getCurrentConfig(options);\n        if (result) {\n            for (const storeName of ['eventStore', 'resourceStore', 'assignmentStore', 'dependencyStore', 'timeRangeStore', 'resourceTimeRangeStore']) {\n                const store = me[storeName];\n                if (store) {\n                    if (store.count) {\n                        result[store.id + 'Data'] = store.getInlineData(options);\n                    }\n                    // Get stores current state, in case it has filters etc. added at runtime\n                    const storeState = store.getCurrentConfig(options);\n                    if (storeState && Object.keys(storeState).length > 0) {\n                        result[storeName] = Object.assign(result[storeName] || {}, storeState);\n                    }\n                    // Remove empty store configs\n                    else if (result[storeName] && Object.keys(result[storeName]).length === 0) {\n                        delete result[storeName];\n                    }\n                }\n            }\n            // Gantt specifics\n            if (me.taskStore.isTaskStore) {\n                delete result.eventModelClass;\n                delete result.eventStoreClass;\n                delete result.children;\n            }\n            return result;\n        }\n    }\n};\n", "import Base from '../../../Core/Base.js';\n/**\n * @module Scheduler/data/util/ModelPersistencyManager\n */\n/**\n * This class manages model persistency, it listens to model stores' beforesync event and removes all non persistable\n * records from sync operation. The logic has meaning only for CRUD-less sync operations.\n *\n * @private\n */\nexport default class ModelPersistencyManager extends Base {\n    // region Event attachers\n    set eventStore(newEventStore) {\n        const me = this;\n        me.eventStoreDetacher && me.eventStoreDetacher();\n        me._eventStore = newEventStore;\n        if (newEventStore && newEventStore.autoCommit) {\n            me.eventStoreDetacher = newEventStore.ion({\n                beforecommit : me.onEventStoreBeforeSync,\n                thisObj      : me,\n                detachable   : true,\n                // Just in case\n                prio         : 100\n            });\n        }\n    }\n    get eventStore() {\n        return this._eventStore;\n    }\n    set resourceStore(newResourceStore) {\n        const me = this;\n        me.resourceStoreDetacher && me.resourceStoreDetacher();\n        me._resourceStore = newResourceStore;\n        if (newResourceStore && newResourceStore.autoCommit) {\n            me.resourceStoreDetacher = newResourceStore.ion({\n                beforecommit : me.onResourceStoreBeforeSync,\n                thisObj      : me,\n                detachable   : true,\n                // Just in case\n                prio         : 100\n            });\n        }\n    }\n    get resourceStore() {\n        return this._resourceStore;\n    }\n    set assignmentStore(newAssignmentStore) {\n        const me = this;\n        me.assignmentStoreDetacher && me.assignmentStoreDetacher();\n        me._assignmentStore = newAssignmentStore;\n        if (newAssignmentStore && newAssignmentStore.autoSync) {\n            me.assignmentStoreDetacher = newAssignmentStore.ion({\n                beforecommit : me.onAssignmentStoreBeforeSync,\n                thisObj      : me,\n                detachable   : true,\n                // Just in case\n                prio         : 100\n            });\n        }\n    }\n    get assignmentStore() {\n        return this._assignmentStore;\n    }\n    set dependencyStore(newDependencyStore) {\n        const me = this;\n        me.dependencyStoreDetacher && me.dependencyStoreDetacher();\n        me._dependencyStore = newDependencyStore;\n        if (newDependencyStore && newDependencyStore.autoSync) {\n            me.dependencyStoreDetacher = newDependencyStore.ion({\n                beforecommit : me.onDependencyStoreBeforeSync,\n                thisObj      : me,\n                detachable   : true,\n                // Just in case\n                prio         : 100\n            });\n        }\n    }\n    get dependencyStore() {\n        return this._dependencyStore;\n    }\n    // endregion\n    // region Event handlers\n    onEventStoreBeforeSync({ changes }) {\n        const me = this;\n        me.removeNonPersistableRecordsToCreate(changes);\n        return me.shallContinueSync(changes);\n    }\n    onResourceStoreBeforeSync({ changes }) {\n        const me = this;\n        me.removeNonPersistableRecordsToCreate(changes);\n        return me.shallContinueSync(changes);\n    }\n    onAssignmentStoreBeforeSync({ changes }) {\n        const me = this;\n        me.removeNonPersistableRecordsToCreate(changes);\n        return me.shallContinueSync(changes);\n    }\n    onDependencyStoreBeforeSync({ changes }) {\n        const me = this;\n        me.removeNonPersistableRecordsToCreate(changes);\n        return me.shallContinueSync(changes);\n    }\n    // endregion\n    // region Management rules\n    removeNonPersistableRecordsToCreate(changes) {\n        const recordsToCreate = changes.added || [];\n        let r, i;\n        // We remove from the array we iterate thus we iterate from end to start\n        for (i = recordsToCreate.length - 1; i >= 0; --i) {\n            r = recordsToCreate[i];\n            if (!r.isPersistable) {\n                recordsToCreate.splice(recordsToCreate.indexOf(r), 1);\n            }\n        }\n        // Prevent empty create request\n        if (recordsToCreate.length === 0) {\n            changes.added.length = 0;\n        }\n    }\n    shallContinueSync(options) {\n        return Boolean((options.added && options.added.length > 0) ||\n            (options.modified && options.modified.length > 0) ||\n            (options.removed && options.removed.length > 0));\n    }\n    // endregion\n}\nModelPersistencyManager._$name = 'ModelPersistencyManager';", "// @ts-nocheck\nconst diffSecond = (date, diff) => {\n    return new Date(\n        date.getFullYear(),\n        date.getMonth(),\n        date.getDate(),\n        date.getHours(),\n        date.getMinutes(),\n        date.getSeconds() + diff,\n        date.getMilliseconds()\n    );\n};\n/**\n * The code just copy/pasted from pre-built later.js file and made exported\n *\n * @private\n */\nexport const later = (function () {\n    \"use strict\";\n    var later = {\n        version: \"1.2.0\"\n    };\n    if (!Array.prototype.indexOf) {\n        Array.prototype.indexOf = function (searchElement) {\n            \"use strict\";\n            if (this == null) {\n                throw new TypeError();\n            }\n            var t = Object(this);\n            var len = t.length >>> 0;\n            if (len === 0) {\n                return -1;\n            }\n            var n = 0;\n            if (arguments.length > 1) {\n                n = Number(arguments[1]);\n                if (n != n) {\n                    n = 0;\n                }\n                else if (n != 0 && n != Infinity && n != -Infinity) {\n                    n = (n > 0 || -1) * Math.floor(Math.abs(n));\n                }\n            }\n            if (n >= len) {\n                return -1;\n            }\n            var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);\n            for (; k < len; k++) {\n                if (k in t && t[k] === searchElement) {\n                    return k;\n                }\n            }\n            return -1;\n        };\n    }\n    if (!String.prototype.trim) {\n        String.prototype.trim = function () {\n            return this.replace(/^\\s+|\\s+$/g, \"\");\n        };\n    }\n    later.array = {};\n    later.array.sort = function (arr, zeroIsLast) {\n        arr.sort(function (a, b) {\n            return +a - +b;\n        });\n        if (zeroIsLast && arr[0] === 0) {\n            arr.push(arr.shift());\n        }\n    };\n    later.array.next = function (val, values, extent) {\n        var cur, zeroIsLargest = extent[0] !== 0, nextIdx = 0;\n        for (var i = values.length - 1; i > -1; --i) {\n            cur = values[i];\n            if (cur === val) {\n                return cur;\n            }\n            if (cur > val || cur === 0 && zeroIsLargest && extent[1] > val) {\n                nextIdx = i;\n                continue;\n            }\n            break;\n        }\n        return values[nextIdx];\n    };\n    later.array.nextInvalid = function (val, values, extent) {\n        var min = extent[0], max = extent[1], len = values.length, zeroVal = values[len - 1] === 0 && min !== 0 ? max : 0, next = val, i = values.indexOf(val), start = next;\n        while (next === (values[i] || zeroVal)) {\n            next++;\n            if (next > max) {\n                next = min;\n            }\n            i++;\n            if (i === len) {\n                i = 0;\n            }\n            if (next === start) {\n                return undefined;\n            }\n        }\n        return next;\n    };\n    later.array.prev = function (val, values, extent) {\n        var cur, len = values.length, zeroIsLargest = extent[0] !== 0, prevIdx = len - 1;\n        for (var i = 0; i < len; i++) {\n            cur = values[i];\n            if (cur === val) {\n                return cur;\n            }\n            if (cur < val || cur === 0 && zeroIsLargest && extent[1] < val) {\n                prevIdx = i;\n                continue;\n            }\n            break;\n        }\n        return values[prevIdx];\n    };\n    later.array.prevInvalid = function (val, values, extent) {\n        var min = extent[0], max = extent[1], len = values.length, zeroVal = values[len - 1] === 0 && min !== 0 ? max : 0, next = val, i = values.indexOf(val), start = next;\n        while (next === (values[i] || zeroVal)) {\n            next--;\n            if (next < min) {\n                next = max;\n            }\n            i--;\n            if (i === -1) {\n                i = len - 1;\n            }\n            if (next === start) {\n                return undefined;\n            }\n        }\n        return next;\n    };\n    later.day = later.D = {\n        name: \"day\",\n        range: 86400,\n        val: function (d) {\n            return d.D || (d.D = later.date.getDate.call(d));\n        },\n        isValid: function (d, val) {\n            return later.D.val(d) === (val || later.D.extent(d)[1]);\n        },\n        extent: function (d) {\n            if (d.DExtent)\n                return d.DExtent;\n            var month = later.M.val(d), max = later.DAYS_IN_MONTH[month - 1];\n            if (month === 2 && later.dy.extent(d)[1] === 366) {\n                max = max + 1;\n            }\n            return d.DExtent = [1, max];\n        },\n        start: function (d) {\n            return d.DStart || (d.DStart = later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d)));\n        },\n        end: function (d) {\n            return d.DEnd || (d.DEnd = later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d)));\n        },\n        next: function (d, val) {\n            val = val > later.D.extent(d)[1] ? 1 : val;\n            var month = later.date.nextRollover(d, val, later.D, later.M), DMax = later.D.extent(month)[1];\n            val = val > DMax ? 1 : val || DMax;\n            return later.date.next(later.Y.val(month), later.M.val(month), val);\n        },\n        prev: function (d, val) {\n            var month = later.date.prevRollover(d, val, later.D, later.M), DMax = later.D.extent(month)[1];\n            return later.date.prev(later.Y.val(month), later.M.val(month), val > DMax ? DMax : val || DMax);\n        }\n    };\n    later.dayOfWeekCount = later.dc = {\n        name: \"day of week count\",\n        range: 604800,\n        val: function (d) {\n            return d.dc || (d.dc = Math.floor((later.D.val(d) - 1) / 7) + 1);\n        },\n        isValid: function (d, val) {\n            return later.dc.val(d) === val || val === 0 && later.D.val(d) > later.D.extent(d)[1] - 7;\n        },\n        extent: function (d) {\n            return d.dcExtent || (d.dcExtent = [1, Math.ceil(later.D.extent(d)[1] / 7)]);\n        },\n        start: function (d) {\n            return d.dcStart || (d.dcStart = later.date.next(later.Y.val(d), later.M.val(d), Math.max(1, (later.dc.val(d) - 1) * 7 + 1 || 1)));\n        },\n        end: function (d) {\n            return d.dcEnd || (d.dcEnd = later.date.prev(later.Y.val(d), later.M.val(d), Math.min(later.dc.val(d) * 7, later.D.extent(d)[1])));\n        },\n        next: function (d, val) {\n            val = val > later.dc.extent(d)[1] ? 1 : val;\n            var month = later.date.nextRollover(d, val, later.dc, later.M), dcMax = later.dc.extent(month)[1];\n            val = val > dcMax ? 1 : val;\n            var next = later.date.next(later.Y.val(month), later.M.val(month), val === 0 ? later.D.extent(month)[1] - 6 : 1 + 7 * (val - 1));\n            if (next.getTime() <= d.getTime()) {\n                month = later.M.next(d, later.M.val(d) + 1);\n                return later.date.next(later.Y.val(month), later.M.val(month), val === 0 ? later.D.extent(month)[1] - 6 : 1 + 7 * (val - 1));\n            }\n            return next;\n        },\n        prev: function (d, val) {\n            var month = later.date.prevRollover(d, val, later.dc, later.M), dcMax = later.dc.extent(month)[1];\n            val = val > dcMax ? dcMax : val || dcMax;\n            return later.dc.end(later.date.prev(later.Y.val(month), later.M.val(month), 1 + 7 * (val - 1)));\n        }\n    };\n    later.dayOfWeek = later.dw = later.d = {\n        name: \"day of week\",\n        range: 86400,\n        val: function (d) {\n            return d.dw || (d.dw = later.date.getDay.call(d) + 1);\n        },\n        isValid: function (d, val) {\n            return later.dw.val(d) === (val || 7);\n        },\n        extent: function () {\n            return [1, 7];\n        },\n        start: function (d) {\n            return later.D.start(d);\n        },\n        end: function (d) {\n            return later.D.end(d);\n        },\n        next: function (d, val) {\n            val = val > 7 ? 1 : val || 7;\n            return later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d) + (val - later.dw.val(d)) + (val <= later.dw.val(d) ? 7 : 0));\n        },\n        prev: function (d, val) {\n            val = val > 7 ? 7 : val || 7;\n            return later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d) + (val - later.dw.val(d)) + (val >= later.dw.val(d) ? -7 : 0));\n        }\n    };\n    later.dayOfYear = later.dy = {\n        name: \"day of year\",\n        range: 86400,\n        val: function (d) {\n            return d.dy || (d.dy = Math.ceil(1 + (later.D.start(d).getTime() - later.Y.start(d).getTime()) / later.DAY));\n        },\n        isValid: function (d, val) {\n            return later.dy.val(d) === (val || later.dy.extent(d)[1]);\n        },\n        extent: function (d) {\n            var year = later.Y.val(d);\n            return d.dyExtent || (d.dyExtent = [1, year % 4 ? 365 : 366]);\n        },\n        start: function (d) {\n            return later.D.start(d);\n        },\n        end: function (d) {\n            return later.D.end(d);\n        },\n        next: function (d, val) {\n            val = val > later.dy.extent(d)[1] ? 1 : val;\n            var year = later.date.nextRollover(d, val, later.dy, later.Y), dyMax = later.dy.extent(year)[1];\n            val = val > dyMax ? 1 : val || dyMax;\n            return later.date.next(later.Y.val(year), later.M.val(year), val);\n        },\n        prev: function (d, val) {\n            var year = later.date.prevRollover(d, val, later.dy, later.Y), dyMax = later.dy.extent(year)[1];\n            val = val > dyMax ? dyMax : val || dyMax;\n            return later.date.prev(later.Y.val(year), later.M.val(year), val);\n        }\n    };\n    later.hour = later.h = {\n        name: \"hour\",\n        range: 3600,\n        val: function (d) {\n            return d.h || (d.h = later.date.getHour.call(d));\n        },\n        isValid: function (d, val) {\n            return later.h.val(d) === val;\n        },\n        extent: function () {\n            return [0, 23];\n        },\n        start: function (d) {\n            return d.hStart || (d.hStart = later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d)));\n        },\n        end: function (d) {\n            return d.hEnd || (d.hEnd = later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d)));\n        },\n        next: function (d, val) {\n            val = val > 23 ? 0 : val;\n            var next = later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d) + (val <= later.h.val(d) ? 1 : 0), val);\n            if (!later.date.isUTC && next.getTime() <= d.getTime()) {\n                next = later.date.next(later.Y.val(next), later.M.val(next), later.D.val(next), val + 1);\n            }\n            return next;\n        },\n        prev: function (d, val) {\n            val = val > 23 ? 23 : val;\n            return later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d) + (val >= later.h.val(d) ? -1 : 0), val);\n        }\n    };\n    later.minute = later.m = {\n        name: \"minute\",\n        range: 60,\n        val: function (d) {\n            return d.m || (d.m = later.date.getMin.call(d));\n        },\n        isValid: function (d, val) {\n            return later.m.val(d) === val;\n        },\n        extent: function (d) {\n            return [0, 59];\n        },\n        start: function (d) {\n            return d.mStart || (d.mStart = later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d), later.m.val(d)));\n        },\n        end: function (d) {\n            return d.mEnd || (d.mEnd = later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d), later.m.val(d)));\n        },\n        next: function (d, val) {\n            var m = later.m.val(d), s = later.s.val(d), inc = val > 59 ? 60 - m : val <= m ? 60 - m + val : val - m, next = new Date(d.getTime() + inc * later.MIN - s * later.SEC);\n            if (!later.date.isUTC && next.getTime() <= d.getTime()) {\n                next = new Date(d.getTime() + (inc + 120) * later.MIN - s * later.SEC);\n            }\n            return next;\n        },\n        prev: function (d, val) {\n            val = val > 59 ? 59 : val;\n            return later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d) + (val >= later.m.val(d) ? -1 : 0), val);\n        }\n    };\n    later.month = later.M = {\n        name: \"month\",\n        range: 2629740,\n        val: function (d) {\n            return d.M || (d.M = later.date.getMonth.call(d) + 1);\n        },\n        isValid: function (d, val) {\n            return later.M.val(d) === (val || 12);\n        },\n        extent: function () {\n            return [1, 12];\n        },\n        start: function (d) {\n            return d.MStart || (d.MStart = later.date.next(later.Y.val(d), later.M.val(d)));\n        },\n        end: function (d) {\n            return d.MEnd || (d.MEnd = later.date.prev(later.Y.val(d), later.M.val(d)));\n        },\n        next: function (d, val) {\n            val = val > 12 ? 1 : val || 12;\n            return later.date.next(later.Y.val(d) + (val > later.M.val(d) ? 0 : 1), val);\n        },\n        prev: function (d, val) {\n            val = val > 12 ? 12 : val || 12;\n            return later.date.prev(later.Y.val(d) - (val >= later.M.val(d) ? 1 : 0), val);\n        }\n    };\n    later.second = later.s = {\n        name: \"second\",\n        range: 1,\n        val: function (d) {\n            return d.s || (d.s = later.date.getSec.call(d));\n        },\n        isValid: function (d, val) {\n            return later.s.val(d) === val;\n        },\n        extent: function () {\n            return [0, 59];\n        },\n        start: function (d) {\n            return d;\n        },\n        end: function (d) {\n            return d;\n        },\n        next: function (d, val) {\n            var s = later.s.val(d), inc = val > 59 ? 60 - s : val <= s ? 60 - s + val : val - s, next = new Date(d.getTime() + inc * later.SEC);\n            if (!later.date.isUTC && next.getTime() <= d.getTime()) {\n                next = new Date(d.getTime() + (inc + 7200) * later.SEC);\n            }\n            return next;\n        },\n        prev: function (d, val, cache) {\n            val = val > 59 ? 59 : val;\n            return later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d), later.m.val(d) + (val >= later.s.val(d) ? -1 : 0), val);\n        }\n    };\n    later.time = later.t = {\n        name: \"time\",\n        range: 1,\n        val: function (d) {\n            return d.t || (d.t = later.h.val(d) * 3600 + later.m.val(d) * 60 + later.s.val(d));\n        },\n        isValid: function (d, val) {\n            return later.t.val(d) === val;\n        },\n        extent: function () {\n            return [0, 86399];\n        },\n        start: function (d) {\n            return d;\n        },\n        end: function (d) {\n            return d;\n        },\n        next: function (d, val) {\n            val = val > 86399 ? 0 : val;\n            var next = later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d) + (val <= later.t.val(d) ? 1 : 0), 0, 0, val);\n            if (!later.date.isUTC && next.getTime() < d.getTime()) {\n                next = later.date.next(later.Y.val(next), later.M.val(next), later.D.val(next), later.h.val(next), later.m.val(next), val + 7200);\n            }\n            return next;\n        },\n        prev: function (d, val) {\n            val = val > 86399 ? 86399 : val;\n            return later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d) + (val >= later.t.val(d) ? -1 : 0), 0, 0, val);\n        }\n    };\n    later.weekOfMonth = later.wm = {\n        name: \"week of month\",\n        range: 604800,\n        val: function (d) {\n            return d.wm || (d.wm = (later.D.val(d) + (later.dw.val(later.M.start(d)) - 1) + (7 - later.dw.val(d))) / 7);\n        },\n        isValid: function (d, val) {\n            return later.wm.val(d) === (val || later.wm.extent(d)[1]);\n        },\n        extent: function (d) {\n            return d.wmExtent || (d.wmExtent = [1, (later.D.extent(d)[1] + (later.dw.val(later.M.start(d)) - 1) + (7 - later.dw.val(later.M.end(d)))) / 7]);\n        },\n        start: function (d) {\n            return d.wmStart || (d.wmStart = later.date.next(later.Y.val(d), later.M.val(d), Math.max(later.D.val(d) - later.dw.val(d) + 1, 1)));\n        },\n        end: function (d) {\n            return d.wmEnd || (d.wmEnd = later.date.prev(later.Y.val(d), later.M.val(d), Math.min(later.D.val(d) + (7 - later.dw.val(d)), later.D.extent(d)[1])));\n        },\n        next: function (d, val) {\n            val = val > later.wm.extent(d)[1] ? 1 : val;\n            var month = later.date.nextRollover(d, val, later.wm, later.M), wmMax = later.wm.extent(month)[1];\n            val = val > wmMax ? 1 : val || wmMax;\n            return later.date.next(later.Y.val(month), later.M.val(month), Math.max(1, (val - 1) * 7 - (later.dw.val(month) - 2)));\n        },\n        prev: function (d, val) {\n            var month = later.date.prevRollover(d, val, later.wm, later.M), wmMax = later.wm.extent(month)[1];\n            val = val > wmMax ? wmMax : val || wmMax;\n            return later.wm.end(later.date.next(later.Y.val(month), later.M.val(month), Math.max(1, (val - 1) * 7 - (later.dw.val(month) - 2))));\n        }\n    };\n    later.weekOfYear = later.wy = {\n        name: \"week of year (ISO)\",\n        range: 604800,\n        val: function (d) {\n            if (d.wy)\n                return d.wy;\n            var wThur = later.dw.next(later.wy.start(d), 5), YThur = later.dw.next(later.Y.prev(wThur, later.Y.val(wThur) - 1), 5);\n            return d.wy = 1 + Math.ceil((wThur.getTime() - YThur.getTime()) / later.WEEK);\n        },\n        isValid: function (d, val) {\n            return later.wy.val(d) === (val || later.wy.extent(d)[1]);\n        },\n        extent: function (d) {\n            if (d.wyExtent)\n                return d.wyExtent;\n            var year = later.dw.next(later.wy.start(d), 5), dwFirst = later.dw.val(later.Y.start(year)), dwLast = later.dw.val(later.Y.end(year));\n            return d.wyExtent = [1, dwFirst === 5 || dwLast === 5 ? 53 : 52];\n        },\n        start: function (d) {\n            return d.wyStart || (d.wyStart = later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d) - (later.dw.val(d) > 1 ? later.dw.val(d) - 2 : 6)));\n        },\n        end: function (d) {\n            return d.wyEnd || (d.wyEnd = later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d) + (later.dw.val(d) > 1 ? 8 - later.dw.val(d) : 0)));\n        },\n        next: function (d, val) {\n            val = val > later.wy.extent(d)[1] ? 1 : val;\n            var wyThur = later.dw.next(later.wy.start(d), 5), year = later.date.nextRollover(wyThur, val, later.wy, later.Y);\n            if (later.wy.val(year) !== 1) {\n                year = later.dw.next(year, 2);\n            }\n            var wyMax = later.wy.extent(year)[1], wyStart = later.wy.start(year);\n            val = val > wyMax ? 1 : val || wyMax;\n            return later.date.next(later.Y.val(wyStart), later.M.val(wyStart), later.D.val(wyStart) + 7 * (val - 1));\n        },\n        prev: function (d, val) {\n            var wyThur = later.dw.next(later.wy.start(d), 5), year = later.date.prevRollover(wyThur, val, later.wy, later.Y);\n            if (later.wy.val(year) !== 1) {\n                year = later.dw.next(year, 2);\n            }\n            var wyMax = later.wy.extent(year)[1], wyEnd = later.wy.end(year);\n            val = val > wyMax ? wyMax : val || wyMax;\n            return later.wy.end(later.date.next(later.Y.val(wyEnd), later.M.val(wyEnd), later.D.val(wyEnd) + 7 * (val - 1)));\n        }\n    };\n    later.year = later.Y = {\n        name: \"year\",\n        range: 31556900,\n        val: function (d) {\n            return d.Y || (d.Y = later.date.getYear.call(d));\n        },\n        isValid: function (d, val) {\n            return later.Y.val(d) === val;\n        },\n        extent: function () {\n            return [1970, 2099];\n        },\n        start: function (d) {\n            return d.YStart || (d.YStart = later.date.next(later.Y.val(d)));\n        },\n        end: function (d) {\n            return d.YEnd || (d.YEnd = later.date.prev(later.Y.val(d)));\n        },\n        next: function (d, val) {\n            return val > later.Y.val(d) && val <= later.Y.extent()[1] ? later.date.next(val) : later.NEVER;\n        },\n        prev: function (d, val) {\n            return val < later.Y.val(d) && val >= later.Y.extent()[0] ? later.date.prev(val) : later.NEVER;\n        }\n    };\n    later.fullDate = later.fd = {\n        name: \"full date\",\n        range: 1,\n        val: function (d) {\n            return d.fd || (d.fd = d.getTime());\n        },\n        isValid: function (d, val) {\n            return later.fd.val(d) === val;\n        },\n        extent: function () {\n            return [0, 3250368e7];\n        },\n        start: function (d) {\n            return d;\n        },\n        end: function (d) {\n            return d;\n        },\n        next: function (d, val) {\n            return later.fd.val(d) < val ? new Date(val) : later.NEVER;\n        },\n        prev: function (d, val) {\n            return later.fd.val(d) > val ? new Date(val) : later.NEVER;\n        }\n    };\n    later.modifier = {};\n    later.modifier.after = later.modifier.a = function (constraint, values) {\n        var value = values[0];\n        return {\n            name: \"after \" + constraint.name,\n            range: (constraint.extent(new Date())[1] - value) * constraint.range,\n            val: constraint.val,\n            isValid: function (d, val) {\n                return this.val(d) >= value;\n            },\n            extent: constraint.extent,\n            start: constraint.start,\n            end: constraint.end,\n            next: function (startDate, val) {\n                if (val != value)\n                    val = constraint.extent(startDate)[0];\n                return constraint.next(startDate, val);\n            },\n            prev: function (startDate, val) {\n                val = val === value ? constraint.extent(startDate)[1] : value - 1;\n                return constraint.prev(startDate, val);\n            }\n        };\n    };\n    later.modifier.before = later.modifier.b = function (constraint, values) {\n        var value = values[values.length - 1];\n        return {\n            name: \"before \" + constraint.name,\n            range: constraint.range * (value - 1),\n            val: constraint.val,\n            isValid: function (d, val) {\n                return this.val(d) < value;\n            },\n            extent: constraint.extent,\n            start: constraint.start,\n            end: constraint.end,\n            next: function (startDate, val) {\n                val = val === value ? constraint.extent(startDate)[0] : value;\n                return constraint.next(startDate, val);\n            },\n            prev: function (startDate, val) {\n                val = val === value ? value - 1 : constraint.extent(startDate)[1];\n                return constraint.prev(startDate, val);\n            }\n        };\n    };\n    later.compile = function (schedDef) {\n        var constraints = [], constraintsLen = 0, tickConstraint;\n        for (var key in schedDef) {\n            var nameParts = key.split(\"_\"), name = nameParts[0], mod = nameParts[1], vals = schedDef[key], constraint = mod ? later.modifier[mod](later[name], vals) : later[name];\n            constraints.push({\n                constraint: constraint,\n                vals: vals\n            });\n            constraintsLen++;\n        }\n        constraints.sort(function (a, b) {\n            var ra = a.constraint.range, rb = b.constraint.range;\n            return rb < ra ? -1 : rb > ra ? 1 : 0;\n        });\n        tickConstraint = constraints[constraintsLen - 1].constraint;\n        function compareFn(dir) {\n            return dir === \"next\" ? function (a, b) {\n                return a.getTime() > b.getTime();\n            } : function (a, b) {\n                return b.getTime() > a.getTime();\n            };\n        }\n        return {\n            start: function (dir, startDate) {\n                var next = startDate, nextVal = later.array[dir], maxAttempts = 1e3, done;\n                while (maxAttempts-- && !done && next) {\n                    done = true;\n                    for (var i = 0; i < constraintsLen; i++) {\n                        var constraint = constraints[i].constraint, curVal = constraint.val(next), extent = constraint.extent(next), newVal = nextVal(curVal, constraints[i].vals, extent);\n                        if (!constraint.isValid(next, newVal)) {\n                            next = constraint[dir](next, newVal);\n                            done = false;\n                            break;\n                        }\n                    }\n                }\n                if (next !== later.NEVER) {\n                    next = dir === \"next\" ? tickConstraint.start(next) : tickConstraint.end(next);\n                }\n                return next;\n            },\n            end: function (dir, startDate) {\n                var result, nextVal = later.array[dir + \"Invalid\"], compare = compareFn(dir);\n                for (var i = constraintsLen - 1; i >= 0; i--) {\n                    var constraint = constraints[i].constraint, curVal = constraint.val(startDate), extent = constraint.extent(startDate), newVal = nextVal(curVal, constraints[i].vals, extent), next;\n                    if (newVal !== undefined) {\n                        next = constraint[dir](startDate, newVal);\n                        if (next && (!result || compare(result, next))) {\n                            result = next;\n                        }\n                    }\n                }\n                return result;\n            },\n            tick: function (dir, date) {\n                return new Date(dir === \"next\" ? tickConstraint.end(date).getTime() + later.SEC : tickConstraint.start(date).getTime() - later.SEC);\n            },\n            // PATCH\n            tickSafe: function (dir, date) {\n                return dir === \"next\"\n                    ? diffSecond(tickConstraint.end(date), 1)\n                    : diffSecond(tickConstraint.start(date), -1)\n                ;\n            },\n            // EOF PATCH\n            tickStart: function (date) {\n                return tickConstraint.start(date);\n            }\n        };\n    };\n    later.schedule = function (sched) {\n        if (!sched)\n            throw new Error(\"Missing schedule definition.\");\n        if (!sched.schedules)\n            throw new Error(\"Definition must include at least one schedule.\");\n        var schedules = [], schedulesLen = sched.schedules.length, exceptions = [], exceptionsLen = sched.exceptions ? sched.exceptions.length : 0;\n        for (var i = 0; i < schedulesLen; i++) {\n            schedules.push(later.compile(sched.schedules[i]));\n        }\n        for (var j = 0; j < exceptionsLen; j++) {\n            exceptions.push(later.compile(sched.exceptions[j]));\n        }\n        function getInstances(dir, count, startDate, endDate, isRange) {\n            var compare = compareFn(dir), loopCount = count, maxAttempts = 1e6, schedStarts = [], exceptStarts = [], next, end, results = [], isForward = dir === \"next\", lastResult, rStart = isForward ? 0 : 1, rEnd = isForward ? 1 : 0;\n            startDate = startDate ? new Date(startDate) : new Date();\n            if (!startDate || !startDate.getTime())\n                throw new Error(\"Invalid start date.\");\n            setNextStarts(dir, schedules, schedStarts, startDate);\n            setRangeStarts(dir, exceptions, exceptStarts, startDate);\n            while (maxAttempts-- && loopCount && (next = findNext(schedStarts, compare))) {\n                if (endDate && compare(next, endDate)) {\n                    break;\n                }\n                if (exceptionsLen) {\n                    updateRangeStarts(dir, exceptions, exceptStarts, next);\n                    if (end = calcRangeOverlap(dir, exceptStarts, next)) {\n                        updateNextStarts(dir, schedules, schedStarts, end);\n                        continue;\n                    }\n                }\n                if (isRange) {\n                    var maxEndDate = calcMaxEndDate(exceptStarts, compare);\n                    end = calcEnd(dir, schedules, schedStarts, next, maxEndDate);\n                    var r = isForward ? [new Date(Math.max(startDate, next)), end ? new Date(endDate ? Math.min(end, endDate) : end) : undefined] : [end ? new Date(endDate ? Math.max(endDate, end.getTime() + later.SEC) : end.getTime() + later.SEC) : undefined, new Date(Math.min(startDate, next.getTime() + later.SEC))];\n                    if (lastResult && r[rStart].getTime() === lastResult[rEnd].getTime()) {\n                        lastResult[rEnd] = r[rEnd];\n                        loopCount++;\n                    }\n                    else {\n                        lastResult = r;\n                        results.push(lastResult);\n                    }\n                    if (!end)\n                        break;\n                    updateNextStarts(dir, schedules, schedStarts, end);\n                }\n                else {\n                    results.push(isForward ? new Date(Math.max(startDate, next)) : getStart(schedules, schedStarts, next, endDate));\n                    tickStarts(dir, schedules, schedStarts, next);\n                }\n                loopCount--;\n            }\n            for (var i = 0, len = results.length; i < len; i++) {\n                var result = results[i];\n                results[i] = Object.prototype.toString.call(result) === \"[object Array]\" ? [cleanDate(result[0]), cleanDate(result[1])] : cleanDate(result);\n            }\n            return results.length === 0 ? later.NEVER : count === 1 ? results[0] : results;\n        }\n        function cleanDate(d) {\n            if (d instanceof Date && !isNaN(d.valueOf())) {\n                return new Date(d);\n            }\n            return undefined;\n        }\n        function setNextStarts(dir, schedArr, startsArr, startDate) {\n            for (var i = 0, len = schedArr.length; i < len; i++) {\n                startsArr[i] = schedArr[i].start(dir, startDate);\n            }\n        }\n        function updateNextStarts(dir, schedArr, startsArr, startDate) {\n            var compare = compareFn(dir);\n            for (var i = 0, len = schedArr.length; i < len; i++) {\n                if (startsArr[i] && !compare(startsArr[i], startDate)) {\n                    startsArr[i] = schedArr[i].start(dir, startDate);\n                }\n            }\n        }\n        function setRangeStarts(dir, schedArr, rangesArr, startDate) {\n            var compare = compareFn(dir);\n            for (var i = 0, len = schedArr.length; i < len; i++) {\n                var nextStart = schedArr[i].start(dir, startDate);\n                if (!nextStart) {\n                    rangesArr[i] = later.NEVER;\n                }\n                else {\n                    rangesArr[i] = [nextStart, schedArr[i].end(dir, nextStart)];\n                }\n            }\n        }\n        function updateRangeStarts(dir, schedArr, rangesArr, startDate) {\n            var compare = compareFn(dir);\n            for (var i = 0, len = schedArr.length; i < len; i++) {\n                if (rangesArr[i] && !compare(rangesArr[i][0], startDate)) {\n                    var nextStart = schedArr[i].start(dir, startDate);\n                    if (!nextStart) {\n                        rangesArr[i] = later.NEVER;\n                    }\n                    else {\n                        rangesArr[i] = [nextStart, schedArr[i].end(dir, nextStart)];\n                    }\n                }\n            }\n        }\n        function tickStarts(dir, schedArr, startsArr, startDate) {\n            for (var i = 0, len = schedArr.length; i < len; i++) {\n                if (startsArr[i] && startsArr[i].getTime() === startDate.getTime()) {\n                    // PATCH\n                    const newStart = schedArr[i].start(dir, schedArr[i].tick(dir, startDate));\n                    // if the calculated `newStart` is the same as previous, this is probably\n                    // an endless loop caused by the DST shift (the browser won't halt because later.js\n                    // has a limit of 100000 iterations, but the calculated schedules will be all wrong)\n                    if (newStart !== later.NEVER && newStart.getTime() === startsArr[i].getTime()) {\n                        // in such case we use our own \"safe\" implementation of the \"tick\" method\n                        // which performs symbolic date manipulation\n                        // (instead of advancing on milliseconds since epoch timeaxis)\n                        // the former seems to be slower, that's why we only switch to it\n                        // in the case of infinite loop\n                        startsArr[i] = schedArr[i].start(dir, schedArr[i].tickSafe(dir, startDate));\n                    } else {\n                        startsArr[i] = newStart\n                    }\n                    // EOF PATCH\n                }\n            }\n        }\n        function getStart(schedArr, startsArr, startDate, minEndDate) {\n            var result;\n            for (var i = 0, len = startsArr.length; i < len; i++) {\n                if (startsArr[i] && startsArr[i].getTime() === startDate.getTime()) {\n                    var start = schedArr[i].tickStart(startDate);\n                    if (minEndDate && start < minEndDate) {\n                        return minEndDate;\n                    }\n                    if (!result || start > result) {\n                        result = start;\n                    }\n                }\n            }\n            return result;\n        }\n        function calcRangeOverlap(dir, rangesArr, startDate) {\n            var compare = compareFn(dir), result;\n            for (var i = 0, len = rangesArr.length; i < len; i++) {\n                var range = rangesArr[i];\n                if (range && !compare(range[0], startDate) && (!range[1] || compare(range[1], startDate))) {\n                    if (!result || compare(range[1], result)) {\n                        result = range[1];\n                    }\n                }\n            }\n            return result;\n        }\n        function calcMaxEndDate(exceptsArr, compare) {\n            var result;\n            for (var i = 0, len = exceptsArr.length; i < len; i++) {\n                if (exceptsArr[i] && (!result || compare(result, exceptsArr[i][0]))) {\n                    result = exceptsArr[i][0];\n                }\n            }\n            return result;\n        }\n        function calcEnd(dir, schedArr, startsArr, startDate, maxEndDate) {\n            var compare = compareFn(dir), result;\n            for (var i = 0, len = schedArr.length; i < len; i++) {\n                var start = startsArr[i];\n                if (start && start.getTime() === startDate.getTime()) {\n                    var end = schedArr[i].end(dir, start);\n                    if (maxEndDate && (!end || compare(end, maxEndDate))) {\n                        return maxEndDate;\n                    }\n                    if (!result || compare(end, result)) {\n                        result = end;\n                    }\n                }\n            }\n            return result;\n        }\n        function compareFn(dir) {\n            return dir === \"next\" ? function (a, b) {\n                return !b || a.getTime() > b.getTime();\n            } : function (a, b) {\n                return !a || b.getTime() > a.getTime();\n            };\n        }\n        function findNext(arr, compare) {\n            var next = arr[0];\n            for (var i = 1, len = arr.length; i < len; i++) {\n                if (arr[i] && compare(next, arr[i])) {\n                    next = arr[i];\n                }\n            }\n            return next;\n        }\n        return {\n            isValid: function (d) {\n                return getInstances(\"next\", 1, d, d) !== later.NEVER;\n            },\n            next: function (count, startDate, endDate) {\n                return getInstances(\"next\", count || 1, startDate, endDate);\n            },\n            prev: function (count, startDate, endDate) {\n                return getInstances(\"prev\", count || 1, startDate, endDate);\n            },\n            nextRange: function (count, startDate, endDate) {\n                return getInstances(\"next\", count || 1, startDate, endDate, true);\n            },\n            prevRange: function (count, startDate, endDate) {\n                return getInstances(\"prev\", count || 1, startDate, endDate, true);\n            }\n        };\n    };\n    later.setTimeout = function (fn, sched) {\n        var s = later.schedule(sched), t;\n        if (fn) {\n            scheduleTimeout();\n        }\n        function scheduleTimeout() {\n            var now = Date.now(), next = s.next(2, now);\n            if (!next[0]) {\n                t = undefined;\n                return;\n            }\n            var diff = next[0].getTime() - now;\n            if (diff < 1e3) {\n                diff = next[1] ? next[1].getTime() - now : 1e3;\n            }\n            if (diff < 2147483647) {\n                t = setTimeout(fn, diff);\n            }\n            else {\n                t = setTimeout(scheduleTimeout, 2147483647);\n            }\n        }\n        return {\n            isDone: function () {\n                return !t;\n            },\n            clear: function () {\n                clearTimeout(t);\n            }\n        };\n    };\n    later.setInterval = function (fn, sched) {\n        if (!fn) {\n            return;\n        }\n        var t = later.setTimeout(scheduleTimeout, sched), done = t.isDone();\n        function scheduleTimeout() {\n            if (!done) {\n                fn();\n                t = later.setTimeout(scheduleTimeout, sched);\n            }\n        }\n        return {\n            isDone: function () {\n                return t.isDone();\n            },\n            clear: function () {\n                done = true;\n                t.clear();\n            }\n        };\n    };\n    later.date = {};\n    later.date.timezone = function (useLocalTime) {\n        later.date.build = useLocalTime ? function (Y, M, D, h, m, s) {\n            return new Date(Y, M, D, h, m, s);\n        } : function (Y, M, D, h, m, s) {\n            return new Date(Date.UTC(Y, M, D, h, m, s));\n        };\n        var get = useLocalTime ? \"get\" : \"getUTC\", d = Date.prototype;\n        later.date.getYear = d[get + \"FullYear\"];\n        later.date.getMonth = d[get + \"Month\"];\n        later.date.getDate = d[get + \"Date\"];\n        later.date.getDay = d[get + \"Day\"];\n        later.date.getHour = d[get + \"Hours\"];\n        later.date.getMin = d[get + \"Minutes\"];\n        later.date.getSec = d[get + \"Seconds\"];\n        later.date.isUTC = !useLocalTime;\n    };\n    later.date.UTC = function () {\n        later.date.timezone(false);\n    };\n    later.date.localTime = function () {\n        later.date.timezone(true);\n    };\n    later.date.UTC();\n    later.SEC = 1e3;\n    later.MIN = later.SEC * 60;\n    later.HOUR = later.MIN * 60;\n    later.DAY = later.HOUR * 24;\n    later.WEEK = later.DAY * 7;\n    later.DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    later.NEVER = 0;\n    later.date.next = function (Y, M, D, h, m, s) {\n        return later.date.build(Y, M !== undefined ? M - 1 : 0, D !== undefined ? D : 1, h || 0, m || 0, s || 0);\n    };\n    later.date.nextRollover = function (d, val, constraint, period) {\n        var cur = constraint.val(d), max = constraint.extent(d)[1];\n        return (val || max) <= cur || val > max ? new Date(period.end(d).getTime() + later.SEC) : period.start(d);\n    };\n    later.date.prev = function (Y, M, D, h, m, s) {\n        var len = arguments.length;\n        M = len < 2 ? 11 : M - 1;\n        D = len < 3 ? later.D.extent(later.date.next(Y, M + 1))[1] : D;\n        h = len < 4 ? 23 : h;\n        m = len < 5 ? 59 : m;\n        s = len < 6 ? 59 : s;\n        return later.date.build(Y, M, D, h, m, s);\n    };\n    later.date.prevRollover = function (d, val, constraint, period) {\n        var cur = constraint.val(d);\n        return val >= cur || !val ? period.start(period.prev(d, period.val(d) - 1)) : period.start(d);\n    };\n    later.parse = {};\n    later.parse.cron = function (expr, hasSeconds) {\n        var NAMES = {\n            JAN: 1,\n            FEB: 2,\n            MAR: 3,\n            APR: 4,\n            MAY: 5,\n            JUN: 6,\n            JUL: 7,\n            AUG: 8,\n            SEP: 9,\n            OCT: 10,\n            NOV: 11,\n            DEC: 12,\n            SUN: 1,\n            MON: 2,\n            TUE: 3,\n            WED: 4,\n            THU: 5,\n            FRI: 6,\n            SAT: 7\n        };\n        var REPLACEMENTS = {\n            \"* * * * * *\": \"0/1 * * * * *\",\n            \"@YEARLY\": \"0 0 1 1 *\",\n            \"@ANNUALLY\": \"0 0 1 1 *\",\n            \"@MONTHLY\": \"0 0 1 * *\",\n            \"@WEEKLY\": \"0 0 * * 0\",\n            \"@DAILY\": \"0 0 * * *\",\n            \"@HOURLY\": \"0 * * * *\"\n        };\n        var FIELDS = {\n            s: [0, 0, 59],\n            m: [1, 0, 59],\n            h: [2, 0, 23],\n            D: [3, 1, 31],\n            M: [4, 1, 12],\n            Y: [6, 1970, 2099],\n            d: [5, 1, 7, 1]\n        };\n        function getValue(value, offset, max) {\n            return isNaN(value) ? NAMES[value] || null : Math.min(+value + (offset || 0), max || 9999);\n        }\n        function cloneSchedule(sched) {\n            var clone = {}, field;\n            for (field in sched) {\n                if (field !== \"dc\" && field !== \"d\") {\n                    clone[field] = sched[field].slice(0);\n                }\n            }\n            return clone;\n        }\n        function add(sched, name, min, max, inc) {\n            var i = min;\n            if (!sched[name]) {\n                sched[name] = [];\n            }\n            while (i <= max) {\n                if (sched[name].indexOf(i) < 0) {\n                    sched[name].push(i);\n                }\n                i += inc || 1;\n            }\n            sched[name].sort(function (a, b) {\n                return a - b;\n            });\n        }\n        function addHash(schedules, curSched, value, hash) {\n            if (curSched.d && !curSched.dc || curSched.dc && curSched.dc.indexOf(hash) < 0) {\n                schedules.push(cloneSchedule(curSched));\n                curSched = schedules[schedules.length - 1];\n            }\n            add(curSched, \"d\", value, value);\n            add(curSched, \"dc\", hash, hash);\n        }\n        function addWeekday(s, curSched, value) {\n            var except1 = {}, except2 = {};\n            if (value === 1) {\n                add(curSched, \"D\", 1, 3);\n                add(curSched, \"d\", NAMES.MON, NAMES.FRI);\n                add(except1, \"D\", 2, 2);\n                add(except1, \"d\", NAMES.TUE, NAMES.FRI);\n                add(except2, \"D\", 3, 3);\n                add(except2, \"d\", NAMES.TUE, NAMES.FRI);\n            }\n            else {\n                add(curSched, \"D\", value - 1, value + 1);\n                add(curSched, \"d\", NAMES.MON, NAMES.FRI);\n                add(except1, \"D\", value - 1, value - 1);\n                add(except1, \"d\", NAMES.MON, NAMES.THU);\n                add(except2, \"D\", value + 1, value + 1);\n                add(except2, \"d\", NAMES.TUE, NAMES.FRI);\n            }\n            s.exceptions.push(except1);\n            s.exceptions.push(except2);\n        }\n        function addRange(item, curSched, name, min, max, offset) {\n            var incSplit = item.split(\"/\"), inc = +incSplit[1], range = incSplit[0];\n            if (range !== \"*\" && range !== \"0\") {\n                var rangeSplit = range.split(\"-\");\n                min = getValue(rangeSplit[0], offset, max);\n                max = getValue(rangeSplit[1], offset, max) || max;\n            }\n            add(curSched, name, min, max, inc);\n        }\n        function parse(item, s, name, min, max, offset) {\n            var value, split, schedules = s.schedules, curSched = schedules[schedules.length - 1];\n            if (item === \"L\") {\n                item = min - 1;\n            }\n            if ((value = getValue(item, offset, max)) !== null) {\n                add(curSched, name, value, value);\n            }\n            else if ((value = getValue(item.replace(\"W\", \"\"), offset, max)) !== null) {\n                addWeekday(s, curSched, value);\n            }\n            else if ((value = getValue(item.replace(\"L\", \"\"), offset, max)) !== null) {\n                addHash(schedules, curSched, value, min - 1);\n            }\n            else if ((split = item.split(\"#\")).length === 2) {\n                value = getValue(split[0], offset, max);\n                addHash(schedules, curSched, value, getValue(split[1]));\n            }\n            else {\n                addRange(item, curSched, name, min, max, offset);\n            }\n        }\n        function isHash(item) {\n            return item.indexOf(\"#\") > -1 || item.indexOf(\"L\") > 0;\n        }\n        function itemSorter(a, b) {\n            return isHash(a) && !isHash(b) ? 1 : a - b;\n        }\n        function parseExpr(expr) {\n            var schedule = {\n                schedules: [{}],\n                exceptions: []\n            }, components = expr.replace(/(\\s)+/g, \" \").split(\" \"), field, f, component, items;\n            for (field in FIELDS) {\n                f = FIELDS[field];\n                component = components[f[0]];\n                if (component && component !== \"*\" && component !== \"?\") {\n                    items = component.split(\",\").sort(itemSorter);\n                    var i, length = items.length;\n                    for (i = 0; i < length; i++) {\n                        parse(items[i], schedule, field, f[1], f[2], f[3]);\n                    }\n                }\n            }\n            return schedule;\n        }\n        function prepareExpr(expr) {\n            var prepared = expr.toUpperCase();\n            return REPLACEMENTS[prepared] || prepared;\n        }\n        var e = prepareExpr(expr);\n        return parseExpr(hasSeconds ? e : \"0 \" + e);\n    };\n    later.parse.recur = function () {\n        var schedules = [], exceptions = [], cur, curArr = schedules, curName, values, every, modifier, applyMin, applyMax, i, last;\n        function add(name, min, max) {\n            name = modifier ? name + \"_\" + modifier : name;\n            if (!cur) {\n                curArr.push({});\n                cur = curArr[0];\n            }\n            if (!cur[name]) {\n                cur[name] = [];\n            }\n            curName = cur[name];\n            if (every) {\n                values = [];\n                for (i = min; i <= max; i += every) {\n                    values.push(i);\n                }\n                last = {\n                    n: name,\n                    x: every,\n                    c: curName.length,\n                    m: max\n                };\n            }\n            values = applyMin ? [min] : applyMax ? [max] : values;\n            var length = values.length;\n            for (i = 0; i < length; i += 1) {\n                var val = values[i];\n                if (curName.indexOf(val) < 0) {\n                    curName.push(val);\n                }\n            }\n            values = every = modifier = applyMin = applyMax = 0;\n        }\n        return {\n            schedules: schedules,\n            exceptions: exceptions,\n            on: function () {\n                values = arguments[0] instanceof Array ? arguments[0] : arguments;\n                return this;\n            },\n            every: function (x) {\n                every = x || 1;\n                return this;\n            },\n            after: function (x) {\n                modifier = \"a\";\n                values = [x];\n                return this;\n            },\n            before: function (x) {\n                modifier = \"b\";\n                values = [x];\n                return this;\n            },\n            first: function () {\n                applyMin = 1;\n                return this;\n            },\n            last: function () {\n                applyMax = 1;\n                return this;\n            },\n            time: function () {\n                for (var i = 0, len = values.length; i < len; i++) {\n                    var split = values[i].split(\":\");\n                    if (split.length < 3)\n                        split.push(0);\n                    values[i] = +split[0] * 3600 + +split[1] * 60 + +split[2];\n                }\n                add(\"t\");\n                return this;\n            },\n            second: function () {\n                add(\"s\", 0, 59);\n                return this;\n            },\n            minute: function () {\n                add(\"m\", 0, 59);\n                return this;\n            },\n            hour: function () {\n                add(\"h\", 0, 23);\n                return this;\n            },\n            dayOfMonth: function () {\n                add(\"D\", 1, applyMax ? 0 : 31);\n                return this;\n            },\n            dayOfWeek: function () {\n                add(\"d\", 1, 7);\n                return this;\n            },\n            onWeekend: function () {\n                values = [1, 7];\n                return this.dayOfWeek();\n            },\n            onWeekday: function () {\n                values = [2, 3, 4, 5, 6];\n                return this.dayOfWeek();\n            },\n            dayOfWeekCount: function () {\n                add(\"dc\", 1, applyMax ? 0 : 5);\n                return this;\n            },\n            dayOfYear: function () {\n                add(\"dy\", 1, applyMax ? 0 : 366);\n                return this;\n            },\n            weekOfMonth: function () {\n                add(\"wm\", 1, applyMax ? 0 : 5);\n                return this;\n            },\n            weekOfYear: function () {\n                add(\"wy\", 1, applyMax ? 0 : 53);\n                return this;\n            },\n            month: function () {\n                add(\"M\", 1, 12);\n                return this;\n            },\n            year: function () {\n                add(\"Y\", 1970, 2450);\n                return this;\n            },\n            fullDate: function () {\n                for (var i = 0, len = values.length; i < len; i++) {\n                    values[i] = values[i].getTime();\n                }\n                add(\"fd\");\n                return this;\n            },\n            customModifier: function (id, vals) {\n                var custom = later.modifier[id];\n                if (!custom)\n                    throw new Error(\"Custom modifier \" + id + \" not recognized!\");\n                modifier = id;\n                values = arguments[1] instanceof Array ? arguments[1] : [arguments[1]];\n                return this;\n            },\n            customPeriod: function (id) {\n                var custom = later[id];\n                if (!custom)\n                    throw new Error(\"Custom time period \" + id + \" not recognized!\");\n                add(id, custom.extent(new Date())[0], custom.extent(new Date())[1]);\n                return this;\n            },\n            startingOn: function (start) {\n                return this.between(start, last.m);\n            },\n            between: function (start, end) {\n                cur[last.n] = cur[last.n].splice(0, last.c);\n                every = last.x;\n                add(last.n, start, end);\n                return this;\n            },\n            and: function () {\n                cur = curArr[curArr.push({}) - 1];\n                return this;\n            },\n            except: function () {\n                curArr = exceptions;\n                cur = null;\n                return this;\n            }\n        };\n    };\n    later.parse.text = function (str) {\n        var recur = later.parse.recur, pos = 0, input = \"\", error;\n        var TOKENTYPES = {\n            eof: /^$/,\n            fullDate: /^(\\d\\d\\d\\d-\\d\\d-\\d\\dt\\d\\d:\\d\\d:\\d\\d)\\b/,\n            rank: /^((\\d\\d\\d\\d)|([2-5]?1(st)?|[2-5]?2(nd)?|[2-5]?3(rd)?|(0|[1-5]?[4-9]|[1-5]0|1[1-3])(th)?))\\b/,\n            time: /^((([0]?[1-9]|1[0-2]):[0-5]\\d(\\s)?(am|pm))|(([0]?\\d|1\\d|2[0-3]):[0-5]\\d))\\b/,\n            dayName: /^((sun|mon|tue(s)?|wed(nes)?|thu(r(s)?)?|fri|sat(ur)?)(day)?)\\b/,\n            monthName: /^(jan(uary)?|feb(ruary)?|ma((r(ch)?)?|y)|apr(il)?|ju(ly|ne)|aug(ust)?|oct(ober)?|(sept|nov|dec)(ember)?)\\b/,\n            yearIndex: /^(\\d\\d\\d\\d)\\b/,\n            every: /^every\\b/,\n            after: /^after\\b/,\n            before: /^before\\b/,\n            second: /^(s|sec(ond)?(s)?)\\b/,\n            minute: /^(m|min(ute)?(s)?)\\b/,\n            hour: /^(h|hour(s)?)\\b/,\n            day: /^(day(s)?( of the month)?)\\b/,\n            dayInstance: /^day instance\\b/,\n            dayOfWeek: /^day(s)? of the week\\b/,\n            dayOfYear: /^day(s)? of the year\\b/,\n            weekOfYear: /^week(s)?( of the year)?\\b/,\n            weekOfMonth: /^week(s)? of the month\\b/,\n            weekday: /^weekday\\b/,\n            weekend: /^weekend\\b/,\n            month: /^month(s)?\\b/,\n            year: /^year(s)?\\b/,\n            between: /^between (the)?\\b/,\n            start: /^(start(ing)? (at|on( the)?)?)\\b/,\n            at: /^(at|@)\\b/,\n            and: /^(,|and\\b)/,\n            except: /^(except\\b)/,\n            also: /(also)\\b/,\n            first: /^(first)\\b/,\n            last: /^last\\b/,\n            \"in\": /^in\\b/,\n            of: /^of\\b/,\n            onthe: /^on the\\b/,\n            on: /^on\\b/,\n            through: /(-|^(to|through)\\b)/\n        };\n        var NAMES = {\n            jan: 1,\n            feb: 2,\n            mar: 3,\n            apr: 4,\n            may: 5,\n            jun: 6,\n            jul: 7,\n            aug: 8,\n            sep: 9,\n            oct: 10,\n            nov: 11,\n            dec: 12,\n            sun: 1,\n            mon: 2,\n            tue: 3,\n            wed: 4,\n            thu: 5,\n            fri: 6,\n            sat: 7,\n            \"1st\": 1,\n            fir: 1,\n            \"2nd\": 2,\n            sec: 2,\n            \"3rd\": 3,\n            thi: 3,\n            \"4th\": 4,\n            \"for\": 4\n        };\n        function t(start, end, text, type) {\n            return {\n                startPos: start,\n                endPos: end,\n                text: text,\n                type: type\n            };\n        }\n        function peek(expected) {\n            var scanTokens = expected instanceof Array ? expected : [expected], whiteSpace = /\\s+/, token, curInput, m, scanToken, start, len;\n            scanTokens.push(whiteSpace);\n            start = pos;\n            while (!token || token.type === whiteSpace) {\n                len = -1;\n                curInput = input.substring(start);\n                token = t(start, start, input.split(whiteSpace)[0]);\n                var i, length = scanTokens.length;\n                for (i = 0; i < length; i++) {\n                    scanToken = scanTokens[i];\n                    m = scanToken.exec(curInput);\n                    if (m && m.index === 0 && m[0].length > len) {\n                        len = m[0].length;\n                        token = t(start, start + len, curInput.substring(0, len), scanToken);\n                    }\n                }\n                if (token.type === whiteSpace) {\n                    start = token.endPos;\n                }\n            }\n            return token;\n        }\n        function scan(expectedToken) {\n            var token = peek(expectedToken);\n            pos = token.endPos;\n            return token;\n        }\n        function parseThroughExpr(tokenType) {\n            var start = +parseTokenValue(tokenType), end = checkAndParse(TOKENTYPES.through) ? +parseTokenValue(tokenType) : start, nums = [];\n            for (var i = start; i <= end; i++) {\n                nums.push(i);\n            }\n            return nums;\n        }\n        function parseRanges(tokenType) {\n            var nums = parseThroughExpr(tokenType);\n            while (checkAndParse(TOKENTYPES.and)) {\n                nums.push.apply(nums, parseThroughExpr(tokenType));\n            }\n            // https://github.com/bryntum/support/issues/7233\n            // always sort the provided set of day names, otherwise\n            // the `next` function returns unpredictable values\n            if (tokenType === TOKENTYPES.dayName) {\n                nums.sort((a, b) => a - b)\n            }\n            return nums;\n        }\n        function parseEvery(r) {\n            var num, period, start, end;\n            if (checkAndParse(TOKENTYPES.weekend)) {\n                r.on(NAMES.sun, NAMES.sat).dayOfWeek();\n            }\n            else if (checkAndParse(TOKENTYPES.weekday)) {\n                r.on(NAMES.mon, NAMES.tue, NAMES.wed, NAMES.thu, NAMES.fri).dayOfWeek();\n            }\n            else {\n                num = parseTokenValue(TOKENTYPES.rank);\n                r.every(num);\n                period = parseTimePeriod(r);\n                if (checkAndParse(TOKENTYPES.start)) {\n                    num = parseTokenValue(TOKENTYPES.rank);\n                    r.startingOn(num);\n                    parseToken(period.type);\n                }\n                else if (checkAndParse(TOKENTYPES.between)) {\n                    start = parseTokenValue(TOKENTYPES.rank);\n                    if (checkAndParse(TOKENTYPES.and)) {\n                        end = parseTokenValue(TOKENTYPES.rank);\n                        r.between(start, end);\n                    }\n                }\n            }\n        }\n        function parseOnThe(r) {\n            if (checkAndParse(TOKENTYPES.first)) {\n                r.first();\n            }\n            else if (checkAndParse(TOKENTYPES.last)) {\n                r.last();\n            }\n            else {\n                r.on(parseRanges(TOKENTYPES.rank));\n            }\n            parseTimePeriod(r);\n        }\n        function parseScheduleExpr(str) {\n            pos = 0;\n            input = str;\n            error = -1;\n            var r = recur();\n            while (pos < input.length && error < 0) {\n                var token = parseToken([TOKENTYPES.every, TOKENTYPES.after, TOKENTYPES.before, TOKENTYPES.onthe, TOKENTYPES.on, TOKENTYPES.of, TOKENTYPES[\"in\"], TOKENTYPES.at, TOKENTYPES.and, TOKENTYPES.except, TOKENTYPES.also]);\n                switch (token.type) {\n                    case TOKENTYPES.every:\n                        parseEvery(r);\n                        break;\n                    case TOKENTYPES.after:\n                        if (peek(TOKENTYPES.time).type !== undefined) {\n                            r.after(parseTokenValue(TOKENTYPES.time));\n                            r.time();\n                        }\n                        else if (peek(TOKENTYPES.fullDate).type !== undefined) {\n                            r.after(parseTokenValue(TOKENTYPES.fullDate));\n                            r.fullDate();\n                        }\n                        else {\n                            r.after(parseTokenValue(TOKENTYPES.rank));\n                            parseTimePeriod(r);\n                        }\n                        break;\n                    case TOKENTYPES.before:\n                        if (peek(TOKENTYPES.time).type !== undefined) {\n                            r.before(parseTokenValue(TOKENTYPES.time));\n                            r.time();\n                        }\n                        else if (peek(TOKENTYPES.fullDate).type !== undefined) {\n                            r.before(parseTokenValue(TOKENTYPES.fullDate));\n                            r.fullDate();\n                        }\n                        else {\n                            r.before(parseTokenValue(TOKENTYPES.rank));\n                            parseTimePeriod(r);\n                        }\n                        break;\n                    case TOKENTYPES.onthe:\n                        parseOnThe(r);\n                        break;\n                    case TOKENTYPES.on:\n                        r.on(parseRanges(TOKENTYPES.dayName)).dayOfWeek();\n                        break;\n                    case TOKENTYPES.of:\n                        r.on(parseRanges(TOKENTYPES.monthName)).month();\n                        break;\n                    case TOKENTYPES[\"in\"]:\n                        r.on(parseRanges(TOKENTYPES.yearIndex)).year();\n                        break;\n                    case TOKENTYPES.at:\n                        r.on(parseTokenValue(TOKENTYPES.time)).time();\n                        while (checkAndParse(TOKENTYPES.and)) {\n                            r.on(parseTokenValue(TOKENTYPES.time)).time();\n                        }\n                        break;\n                    case TOKENTYPES.and:\n                        break;\n                    case TOKENTYPES.also:\n                        r.and();\n                        break;\n                    case TOKENTYPES.except:\n                        r.except();\n                        break;\n                    default:\n                        error = pos;\n                }\n            }\n            return {\n                schedules: r.schedules,\n                exceptions: r.exceptions,\n                error: error\n            };\n        }\n        function parseTimePeriod(r) {\n            var timePeriod = parseToken([TOKENTYPES.second, TOKENTYPES.minute, TOKENTYPES.hour, TOKENTYPES.dayOfYear, TOKENTYPES.dayOfWeek, TOKENTYPES.dayInstance, TOKENTYPES.day, TOKENTYPES.month, TOKENTYPES.year, TOKENTYPES.weekOfMonth, TOKENTYPES.weekOfYear]);\n            switch (timePeriod.type) {\n                case TOKENTYPES.second:\n                    r.second();\n                    break;\n                case TOKENTYPES.minute:\n                    r.minute();\n                    break;\n                case TOKENTYPES.hour:\n                    r.hour();\n                    break;\n                case TOKENTYPES.dayOfYear:\n                    r.dayOfYear();\n                    break;\n                case TOKENTYPES.dayOfWeek:\n                    r.dayOfWeek();\n                    break;\n                case TOKENTYPES.dayInstance:\n                    r.dayOfWeekCount();\n                    break;\n                case TOKENTYPES.day:\n                    r.dayOfMonth();\n                    break;\n                case TOKENTYPES.weekOfMonth:\n                    r.weekOfMonth();\n                    break;\n                case TOKENTYPES.weekOfYear:\n                    r.weekOfYear();\n                    break;\n                case TOKENTYPES.month:\n                    r.month();\n                    break;\n                case TOKENTYPES.year:\n                    r.year();\n                    break;\n                default:\n                    error = pos;\n            }\n            return timePeriod;\n        }\n        function checkAndParse(tokenType) {\n            var found = peek(tokenType).type === tokenType;\n            if (found) {\n                scan(tokenType);\n            }\n            return found;\n        }\n        function parseToken(tokenType) {\n            var t = scan(tokenType);\n            if (t.type) {\n                t.text = convertString(t.text, tokenType);\n            }\n            else {\n                error = pos;\n            }\n            return t;\n        }\n        function parseTokenValue(tokenType) {\n            return parseToken(tokenType).text;\n        }\n        function convertString(str, tokenType) {\n            var output = str;\n            switch (tokenType) {\n                case TOKENTYPES.time:\n                    var parts = str.split(/(:|am|pm)/), hour = parts[3] === \"pm\" && parts[0] < 12 ? parseInt(parts[0], 10) + 12 : parts[0], min = parts[2].trim();\n                    output = (hour.length === 1 ? \"0\" : \"\") + hour + \":\" + min;\n                    break;\n                case TOKENTYPES.rank:\n                    output = parseInt(/^\\d+/.exec(str)[0], 10);\n                    break;\n                case TOKENTYPES.monthName:\n                case TOKENTYPES.dayName:\n                    output = NAMES[str.substring(0, 3)];\n                    break;\n                case TOKENTYPES.fullDate:\n                    output = new Date(str.toUpperCase());\n                    break;\n                }\n            return output;\n        }\n        return parseScheduleExpr(str.toLowerCase());\n    };\n    return later;\n})();\n// Set the local time mode for \"later\" library\nlater.date.localTime();\nexport default later;\n", "import { Mixin } from \"../../ChronoGraph/class/BetterMixin.js\";\nimport later from \"../vendor/later/later.js\";\nimport { AbstractPartOfProjectModelMixin } from \"../quark/model/mixin/AbstractPartOfProjectModelMixin.js\";\n/**\n * This is a calendar interval mixin.\n *\n * Can be either a static time interval (if [[startDate]]/[[endDate]] are specified) or recurrent time interval\n * ([[recurrentStartDate]]/[[recurrentEndDate]]).\n *\n * By default it defines a non-working period ([[isWorking]] field has default value `false`),\n * but can also define an explicit working time, for example to override some previous period.\n *\n * You probably don't need to create instances of this mixin directly, instead you pass its configuration object to the [[AbstractCalendarMixin.addInterval]]\n */\nexport class CalendarIntervalMixin extends Mixin([AbstractPartOfProjectModelMixin], (base) => {\n    const superProto = base.prototype;\n    class CalendarIntervalMixin extends base {\n        static get fields() {\n            return [\n                'name',\n                { name: 'startDate', type: 'date' },\n                { name: 'endDate', type: 'date' },\n                'recurrentStartDate',\n                'recurrentEndDate',\n                'cls',\n                'iconCls',\n                { name: 'isWorking', type: 'boolean', defaultValue: false },\n                { name: 'priority', type: 'number' }\n            ];\n        }\n        getCalendar() {\n            return this.stores[0].calendar;\n        }\n        resetPriority() {\n            this.priorityField = null;\n            this.getCalendar().getDepth();\n        }\n        // not just `getPriority` to avoid clash with auto-generated getter in the subclasses\n        getPriorityField() {\n            if (this.priorityField != null)\n                return this.priorityField;\n            // 0 - 10000 interval is reserved for \"unspecified time\" intervals\n            // then 10000 - 10100, 10100-10200, ... etc intervals are for the calendars at depth 0, 1, ... etc\n            let base = 10000 + this.getCalendar().getDepth() * 100;\n            let priority = this.priority;\n            if (priority == null) {\n                // recurrent intervals are considered \"base\" and have lower priority\n                // static intervals are considered special case overrides and have higher priority\n                priority = this.isRecurrent() ? 20 : 30;\n            }\n            // intervals from parent calendars will have lower priority\n            return this.priorityField = base + priority;\n        }\n        /**\n         * Whether this interval is recurrent (both [[recurrentStartDate]] and [[recurrentEndDate]] are present and parsed correctly\n         * by the `later` library)\n         */\n        isRecurrent() {\n            return Boolean(this.recurrentStartDate && this.recurrentEndDate && this.getStartDateSchedule() && this.getEndDateSchedule());\n        }\n        /**\n         * Whether this interval is static - both [[startDate]] and [[endDate]] are present.\n         */\n        isStatic() {\n            return Boolean(this.startDate && this.endDate);\n        }\n        /**\n         * Helper method to parse [[recurrentStartDate]] and [[recurrentEndDate]] field values.\n         * @param {Object|String} schedule Recurrence schedule\n         * @returns {Object} Processed schedule ready to be used by later.schedule() method.\n         * @private\n         */\n        parseDateSchedule(value) {\n            let schedule = value;\n            if (value && value !== Object(value)) {\n                schedule = later.parse.text(value);\n                if (schedule !== Object(schedule) || schedule.error >= 0) {\n                    // can be provided as JSON text\n                    try {\n                        schedule = JSON.parse(value);\n                    }\n                    catch (e) {\n                        return null;\n                    }\n                }\n            }\n            return schedule;\n        }\n        getStartDateSchedule() {\n            if (this.startDateSchedule)\n                return this.startDateSchedule;\n            const schedule = this.parseDateSchedule(this.recurrentStartDate);\n            return this.startDateSchedule = later.schedule(schedule);\n        }\n        getEndDateSchedule() {\n            if (this.endDateSchedule)\n                return this.endDateSchedule;\n            if (this.recurrentEndDate === 'EOD')\n                return 'EOD';\n            const schedule = this.parseDateSchedule(this.recurrentEndDate);\n            return this.endDateSchedule = later.schedule(schedule);\n        }\n    }\n    return CalendarIntervalMixin;\n}) {\n}\n", "import { Mixin } from \"../../ChronoGraph/class/BetterMixin.js\";\nimport { CalendarIntervalMixin } from \"./CalendarIntervalMixin.js\";\nimport { AbstractPartOfProjectStoreMixin } from \"../quark/store/mixin/AbstractPartOfProjectStoreMixin.js\";\n/**\n * This a collection of [[CalendarIntervalMixin]] items. Its a dumb collection though, the \"real\" calendar\n * is a [[AbstractCalendarMixin]] model, which is part of the [[AbstractCalendarManagerStoreMixin]].\n */\nexport class CalendarIntervalStore extends Mixin([AbstractPartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class CalendarIntervalStore extends base {\n        constructor() {\n            super(...arguments);\n            this.disableHasLoadedDataToCommitFlag = true;\n        }\n        static get defaultConfig() {\n            return {\n                modelClass: CalendarIntervalMixin\n            };\n        }\n    }\n    return CalendarIntervalStore;\n}) {\n}\n", "/**\n * The enumeration for the time units\n */\nexport var TimeUnit;\n(function (TimeUnit) {\n    TimeUnit[\"Millisecond\"] = \"millisecond\";\n    TimeUnit[\"Second\"] = \"second\";\n    TimeUnit[\"Minute\"] = \"minute\";\n    TimeUnit[\"Hour\"] = \"hour\";\n    TimeUnit[\"Day\"] = \"day\";\n    TimeUnit[\"Week\"] = \"week\";\n    TimeUnit[\"Month\"] = \"month\";\n    TimeUnit[\"Quarter\"] = \"quarter\";\n    TimeUnit[\"Year\"] = \"year\";\n})(TimeUnit || (TimeUnit = {}));\n/**\n * The enumeration for the project constraint resolution ways.\n */\nexport var ProjectConstraintResolution;\n(function (ProjectConstraintResolution) {\n    /**\n     * Adjust the event dates to honor the constraint.\n     */\n    ProjectConstraintResolution[\"Honor\"] = \"honor\";\n    /**\n     * Ignore the constraint date and keep the event dates.\n     */\n    ProjectConstraintResolution[\"Ignore\"] = \"ignore\";\n    /**\n     * Yield a conflict to pick a resolution based on some application logic\n     * (like UI dialog allowing user to choose a resolution).\n     */\n    ProjectConstraintResolution[\"Conflict\"] = \"conflict\";\n})(ProjectConstraintResolution || (ProjectConstraintResolution = {}));\n/**\n * The enumeration for the supported constraint types\n */\nexport var ConstraintType;\n(function (ConstraintType) {\n    /**\n     * \"Must start on\" constraint.\n     * Restricts an event to start on a [[HasDateConstraintMixin.constraintDate|specified date]].\n     * The constraint cannot be used for a summary event.\n     */\n    ConstraintType[\"MustStartOn\"] = \"muststarton\";\n    /**\n     * \"Must finish on\" constraint.\n     * Restricts an event to finish on a [[HasDateConstraintMixin.constraintDate|specified date]].\n     * The constraint cannot be used for a summary event.\n     */\n    ConstraintType[\"MustFinishOn\"] = \"mustfinishon\";\n    /**\n     * \"Start no earlier than\" constraint.\n     * Restricting an event to start on or after a [[HasDateConstraintMixin.constraintDate|specified date]].\n     */\n    ConstraintType[\"StartNoEarlierThan\"] = \"startnoearlierthan\";\n    /**\n     * \"Start no later than\" constraint.\n     * Restricting an event to start on or before a [[HasDateConstraintMixin.constraintDate|specified date]].\n     *\n     * The constraint cannot be used for a summary task.\n     */\n    ConstraintType[\"StartNoLaterThan\"] = \"startnolaterthan\";\n    /**\n     * \"Finish no earlier than\" constraint.\n     * Restricting an event to finish on or after a [[HasDateConstraintMixin.constraintDate|specified date]].\n     *\n     * The constraint cannot be used for a summary task.\n     */\n    ConstraintType[\"FinishNoEarlierThan\"] = \"finishnoearlierthan\";\n    /**\n     * \"Finish no later than\" constraint.\n     * Restricting an event to finish on or before a [[HasDateConstraintMixin.constraintDate|specified date]].\n     */\n    ConstraintType[\"FinishNoLaterThan\"] = \"finishnolaterthan\";\n    /**\n     * \"As soon as possible\" constraint.\n     * Note this is not a date constraint per se, but a flag, that indicates that a task \"gravitates\" (is \"stickying\")\n     * to the project's start date.\n     */\n    ConstraintType[\"AsSoonAsPossible\"] = \"assoonaspossible\";\n    /**\n     * \"As late as possible\" constraint.\n     * Note this is not a date constraint per se, but a flag, that indicates that a task \"gravitates\" (is \"stickying\")\n     * to the project's end date.\n     */\n    ConstraintType[\"AsLateAsPossible\"] = \"aslateaspossible\";\n})(ConstraintType || (ConstraintType = {}));\n/**\n * The enumeration for the supported scheduling modes\n */\nexport var SchedulingMode;\n(function (SchedulingMode) {\n    SchedulingMode[\"Normal\"] = \"Normal\";\n    SchedulingMode[\"FixedDuration\"] = \"FixedDuration\";\n    SchedulingMode[\"FixedEffort\"] = \"FixedEffort\";\n    SchedulingMode[\"FixedUnits\"] = \"FixedUnits\";\n})(SchedulingMode || (SchedulingMode = {}));\n/**\n * The enumeration for the dependency validation result\n */\nexport var DependencyValidationResult;\n(function (DependencyValidationResult) {\n    /**\n     * Dependency has no errors\n     */\n    DependencyValidationResult[DependencyValidationResult[\"NoError\"] = 0] = \"NoError\";\n    /**\n     * Indicates that the validated dependency builds a cycle\n     */\n    DependencyValidationResult[DependencyValidationResult[\"CyclicDependency\"] = 1] = \"CyclicDependency\";\n    /**\n     * Indicates that a dependency with the same predecessor and successor as validated one's already exists\n     */\n    DependencyValidationResult[DependencyValidationResult[\"DuplicatingDependency\"] = 2] = \"DuplicatingDependency\";\n})(DependencyValidationResult || (DependencyValidationResult = {}));\n/**\n * The enumeration for the supported dependency types\n */\nexport var DependencyType;\n(function (DependencyType) {\n    /**\n     * Start-to-Start (_SS_)\n     *\n     * With this dependency type, the succeeding event is delayed to start not earlier than the preceding event starts.\n     */\n    DependencyType[DependencyType[\"StartToStart\"] = 0] = \"StartToStart\";\n    /**\n     * Start-to-Finish (_SF_)\n     *\n     * The finish of the succeeding event is constrained by the start of the preceding event.\n     * So the successor cannot finish before the predecessor starts.\n     */\n    DependencyType[DependencyType[\"StartToEnd\"] = 1] = \"StartToEnd\";\n    /**\n     * Finish-to-Start (_FS_)\n     *\n     * This type of dependency, restricts the dependent event to not start earlier than the preceding event finishes.\n     */\n    DependencyType[DependencyType[\"EndToStart\"] = 2] = \"EndToStart\";\n    /**\n     * Finish-to-Finish (_FF_)\n     *\n     * The succeeding event cannot finish before the completion of the preceding event.\n     */\n    DependencyType[DependencyType[\"EndToEnd\"] = 3] = \"EndToEnd\";\n})(DependencyType || (DependencyType = {}));\n/**\n * The enumeration for the supported sources of the calendar for the dependency.\n */\nexport var DependenciesCalendar;\n(function (DependenciesCalendar) {\n    DependenciesCalendar[\"Project\"] = \"Project\";\n    DependenciesCalendar[\"FromEvent\"] = \"FromEvent\";\n    DependenciesCalendar[\"ToEvent\"] = \"ToEvent\";\n})(DependenciesCalendar || (DependenciesCalendar = {}));\n/**\n * Engine provides with different project types, the enumeration describes the types currently available\n */\nexport var ProjectType;\n(function (ProjectType) {\n    ProjectType[ProjectType[\"SchedulerBasic\"] = 1] = \"SchedulerBasic\";\n    ProjectType[ProjectType[\"SchedulerPro\"] = 2] = \"SchedulerPro\";\n    ProjectType[ProjectType[\"Gantt\"] = 3] = \"Gantt\";\n})(ProjectType || (ProjectType = {}));\n/**\n * The enumeration for the scheduling direction\n */\nexport var Direction;\n(function (Direction) {\n    /**\n     * Forward (or As Soon As Possible (ASAP)) scheduling.\n     */\n    Direction[\"Forward\"] = \"Forward\";\n    /**\n     * Backward (or As Late As Possible (ALAP)) scheduling.\n     */\n    Direction[\"Backward\"] = \"Backward\";\n    Direction[\"None\"] = \"None\";\n})(Direction || (Direction = {}));\nexport const isEqualEffectiveDirection = (a, b) => {\n    if (a && !b || !a && b)\n        return false;\n    if (!a && !b)\n        return true;\n    return (a.direction === b.direction)\n        && (a.kind === 'own' && b.kind === 'own'\n            || (a.kind === 'enforced' && b.kind === 'enforced' && a.enforcedBy === b.enforcedBy)\n            || (a.kind === 'inherited' && b.kind === 'inherited' && a.inheritedFrom === b.inheritedFrom));\n};\nexport var ConstraintIntervalSide;\n(function (ConstraintIntervalSide) {\n    ConstraintIntervalSide[\"Start\"] = \"Start\";\n    ConstraintIntervalSide[\"End\"] = \"End\";\n})(ConstraintIntervalSide || (ConstraintIntervalSide = {}));\n", "// http://ecma-international.org/ecma-262/5.1/#sec-15.9.1.1\n/**\n * Minimal date representable with native Date class\n */\nexport const MIN_DATE = new Date(-8640000000000000);\n/**\n * Maximal date representable with native Date class\n */\nexport const MAX_DATE = new Date(8640000000000000);\nexport const isDateFinite = (date) => {\n    if (!date)\n        return false;\n    const time = date.getTime();\n    return time !== MIN_DATE.getTime() && time !== MAX_DATE.getTime();\n};\n", "/**\n * The date intervals in the scheduling engine are always inclusive on one end and opened on another.\n * The \"opened\" end is not considered to be a part of the interval.\n *\n * Depending from the scheduling direction (forward/backward) this property may need to be inverted.\n *\n * This enum specifies what edge of the interval is inclusive.\n */\nexport var EdgeInclusion;\n(function (EdgeInclusion) {\n    EdgeInclusion[EdgeInclusion[\"Left\"] = 0] = \"Left\";\n    EdgeInclusion[EdgeInclusion[\"Right\"] = 1] = \"Right\";\n})(EdgeInclusion || (EdgeInclusion = {}));\n", "import DateHelper from \"../../Core/helper/DateHelper.js\";\nimport { TimeUnit } from \"../scheduling/Types.js\";\nimport { MAX_DATE, MIN_DATE } from \"../util/Constants.js\";\nimport { EdgeInclusion } from \"../util/Types.js\";\n/**\n * The enum type for result of [[forEachAvailabilityInterval]].\n */\nexport var CalendarIteratorResult;\n(function (CalendarIteratorResult) {\n    /**\n     * Indicates the iteration has completed by iterating the whole given timespan or has reached the MAX_DATE or MIN_DATE.\n     */\n    CalendarIteratorResult[CalendarIteratorResult[\"FullRangeIterated\"] = 0] = \"FullRangeIterated\";\n    /**\n     * Indicates the iteration has been stopped by returning `false` from the iterator.\n     */\n    CalendarIteratorResult[CalendarIteratorResult[\"StoppedByIterator\"] = 1] = \"StoppedByIterator\";\n    /**\n     * Indicates the iteration has exceeded the `maxRange` option\n     */\n    CalendarIteratorResult[CalendarIteratorResult[\"MaxCacheExtendCyclesReached\"] = 2] = \"MaxCacheExtendCyclesReached\";\n    /**\n     * Indicates the iteration has exceeded the `maxRange` option\n     */\n    CalendarIteratorResult[CalendarIteratorResult[\"MaxRangeReached\"] = 3] = \"MaxRangeReached\";\n})(CalendarIteratorResult || (CalendarIteratorResult = {}));\n/**\n * Calendar cache.\n */\nexport class CalendarCache {\n    constructor(config) {\n        this.cacheFilledStartDate = MAX_DATE;\n        this.cacheFilledEndDate = MIN_DATE;\n        this.intervalsCachingChunkDuration = 30;\n        this.intervalsCachingChunkUnit = TimeUnit.Day;\n        this.maxCacheExtendCycles = 1000;\n        // max range for the iteration - 5 years\n        this.maxRange = 5 * 365 * 24 * 60 * 60 * 1000;\n        config && Object.assign(this, config);\n    }\n    includeWrappingRangeFrom(cache, startDate, endDate) {\n        cache.ensureCacheFilledForInterval(startDate, endDate);\n        this.intervalCache.includeWrappingRange(cache.intervalCache, startDate, endDate);\n    }\n    // after this method, we guarantee, that for every point between `startDate` and `endDate` (_inclusive_)\n    // we'll have a final representation of the cache, that is, we'll be able to get an interval to which this point belongs\n    // _both_ for forward and backward directions\n    ensureCacheFilledForInterval(startDate, endDate) {\n        const cacheFilledStartDateN = this.cacheFilledStartDate.getTime();\n        const cacheFilledEndDateN = this.cacheFilledEndDate.getTime();\n        if (cacheFilledStartDateN !== MAX_DATE.getTime()) {\n            const startDateN = startDate.getTime();\n            const endDateN = endDate.getTime();\n            if (cacheFilledStartDateN <= startDateN && endDateN <= cacheFilledEndDateN)\n                return;\n            // asked to cache an interval which is to the left from the cached area - extend to the right\n            if (endDateN <= cacheFilledStartDateN) {\n                endDate = new Date(cacheFilledStartDateN - 1);\n            }\n            else if (startDateN >= cacheFilledEndDateN) {\n                startDate = new Date(cacheFilledEndDateN);\n            }\n            else if (cacheFilledStartDateN <= startDateN && startDateN <= cacheFilledEndDateN) {\n                startDate = new Date(cacheFilledEndDateN + 1);\n            }\n            else if (cacheFilledStartDateN <= endDateN && endDateN <= cacheFilledEndDateN) {\n                endDate = new Date(cacheFilledStartDateN - 1);\n            }\n            else {\n                this.ensureCacheFilledForInterval(startDate, new Date(cacheFilledStartDateN - 1));\n                this.ensureCacheFilledForInterval(new Date(cacheFilledEndDateN + 1), endDate);\n                return;\n            }\n        }\n        if (cacheFilledStartDateN === MAX_DATE.getTime() || startDate.getTime() < cacheFilledEndDateN) {\n            this.cacheFilledStartDate = startDate;\n        }\n        if (cacheFilledEndDateN === MIN_DATE.getTime() || cacheFilledEndDateN < endDate.getTime()) {\n            this.cacheFilledEndDate = endDate;\n        }\n        this.fillCache(startDate, endDate);\n    }\n    fillCache(_1 /* startDate */, _2 /* endDate */) {\n        throw new Error(\"Abstract method\");\n    }\n    clear() {\n        this.cacheFilledStartDate = MAX_DATE;\n        this.cacheFilledEndDate = MIN_DATE;\n        this.intervalCache.clear();\n    }\n    /**\n     * The core iterator method of the calendar cache.\n     *\n     * @param options The options for iterator. Should contain at least one of the `startDate`/`endDate` properties\n     * which indicates what timespan to examine for availability intervals. If one of boundaries is not provided\n     * iterator function should return `false` at some point, to avoid infinite loops.\n     *\n     * Another recognized option is `isForward`, which indicates the direction in which to iterate through the timespan.\n     *\n     * Another recognized option is `maxRange`, which indicates the maximum timespan for this iterator (in milliseconds). When iterator\n     * exceeds this timespan, the iteration is stopped and [[CalendarIteratorResult.MaxRangeReached]] value is returned.\n     * Default value is 5 years.\n     *\n     * @param func The iterator function to call. It will be called for every distinct set of availability intervals, found\n     * in the given timespan. All the intervals, which are \"active\" for current interval are collected in the 3rd argument\n     * for this function. If iterator returns `false` (checked with `===`) the iteration stops.\n     *\n     * @param scope The scope (`this` value) to execute the iterator in.\n     */\n    forEachAvailabilityInterval(options, func, scope) {\n        scope = scope || this;\n        const startDate = options.startDate;\n        const endDate = options.endDate;\n        const startDateN = startDate && startDate.getTime();\n        const endDateN = endDate && endDate.getTime();\n        const maxRange = options.maxRange ?? this.maxRange;\n        // `isForward = true` by default\n        const isForward = options.isForward !== false;\n        if (isForward ? !startDate : !endDate) {\n            throw new Error(\"At least `startDate` or `endDate` is required, depending from the `isForward` option\");\n        }\n        const intervalCache = this.intervalCache;\n        let cacheCursorDate = isForward ? startDate : endDate;\n        let cursorDate = isForward ? startDate : endDate;\n        const rangeStart = cursorDate.getTime();\n        // this is generally an endless loop, but we artificially limit it to `maxCacheExtendCycles` iterations\n        // to avoid freezing in unforeseen edge cases\n        for (let cycle = 1; cycle < this.maxCacheExtendCycles; cycle++) {\n            if (isForward) {\n                this.ensureCacheFilledForInterval(cacheCursorDate, endDate || DateHelper.add(cacheCursorDate, this.intervalsCachingChunkDuration, this.intervalsCachingChunkUnit));\n            }\n            else {\n                this.ensureCacheFilledForInterval(startDate || DateHelper.add(cacheCursorDate, -this.intervalsCachingChunkDuration, this.intervalsCachingChunkUnit), cacheCursorDate);\n            }\n            let interval = intervalCache.getIntervalOf(cursorDate, isForward ? EdgeInclusion.Left : EdgeInclusion.Right);\n            while (interval) {\n                const intervalStartDate = interval.startDate;\n                const intervalEndDate = interval.endDate;\n                // out of requested range - all done\n                if ((isForward && endDateN && intervalStartDate.getTime() >= endDateN)\n                    ||\n                        (!isForward && startDateN && intervalEndDate.getTime() <= startDateN)) {\n                    return CalendarIteratorResult.FullRangeIterated;\n                }\n                if ((isForward && intervalStartDate.getTime() - rangeStart >= maxRange)\n                    ||\n                        (!isForward && rangeStart - intervalEndDate.getTime() >= maxRange)) {\n                    return CalendarIteratorResult.MaxRangeReached;\n                }\n                // we are out of cached area, need to extend the cache,\n                // using `>=, <=` here, because, as an edge case the cache can be filled exactly up to that interval\n                // and following interval will be infinity, which will trigger premature loop exit\n                // caused by the https://github.com/bryntum/support/issues/6406\n                if ((isForward && intervalStartDate.getTime() >= this.cacheFilledEndDate.getTime())\n                    ||\n                        (!isForward && intervalEndDate.getTime() <= this.cacheFilledStartDate.getTime())) {\n                    break;\n                }\n                // save the last processed point, from which we should start after cache will be extended\n                cursorDate = isForward ? intervalEndDate : intervalStartDate;\n                // adjust to start / end date limits in iterator\n                const countFrom = startDateN && intervalStartDate.getTime() < startDateN ? startDate : intervalStartDate;\n                const countTill = endDateN && intervalEndDate.getTime() > endDateN ? endDate : intervalEndDate;\n                if (func.call(scope, countFrom, countTill, interval.cacheInterval) === false) {\n                    // indicates premature exit if iterator returns `false`\n                    return CalendarIteratorResult.StoppedByIterator;\n                }\n                interval = isForward ? intervalCache.getNextInterval(interval) : intervalCache.getPrevInterval(interval);\n            }\n            if (isForward && cursorDate.getTime() === MAX_DATE.getTime() || !isForward && cursorDate.getTime() === MIN_DATE.getTime()) {\n                return CalendarIteratorResult.FullRangeIterated;\n            }\n            cacheCursorDate = isForward ? this.cacheFilledEndDate : this.cacheFilledStartDate;\n        }\n        return CalendarIteratorResult.MaxCacheExtendCyclesReached;\n    }\n}\n", "export const stripDuplicates = (array) => Array.from(new Set(array));\n", "import { stripDuplicates } from \"../util/StripDuplicates.js\";\n/**\n * A class, that represent a cached set of availability intervals. One can use the [[getIsWorking]] method\n * to determine if this set intervals represents working time or non-working.\n */\nexport class CalendarCacheInterval {\n    constructor(config) {\n        this.intervals = [];\n        config && Object.assign(this, config);\n        if (!this.calendar)\n            throw new Error(\"Required attribute `calendar` is missing\");\n    }\n    includeInterval(interval) {\n        if (this.intervals.indexOf(interval) == -1) {\n            const copy = this.intervals.slice();\n            copy.push(interval);\n            return new CalendarCacheInterval({ intervals: copy, calendar: this.calendar });\n        }\n        else\n            return this;\n    }\n    combineWith(interval) {\n        return new CalendarCacheInterval({ intervals: this.intervals.concat(interval.intervals), calendar: this.calendar });\n    }\n    /**\n     * Returns the working status of this intervals set. It is determined as a working status\n     * of the most prioritized interval (intervals are prioritized from child to parent)\n     */\n    getIsWorking() {\n        if (this.isWorking != null)\n            return this.isWorking;\n        const intervals = this.intervals = this.normalizeIntervals(this.intervals);\n        // return the value of the interval with the highest priority\n        return this.isWorking = intervals[0].isWorking;\n    }\n    normalizeIntervals(intervals) {\n        const filtered = stripDuplicates(intervals);\n        // sort in decreasing order\n        filtered.sort((interval1, interval2) => interval2.getPriorityField() - interval1.getPriorityField());\n        return filtered;\n    }\n}\n", "// Generic binary search\nexport const binarySearch = (value, array, comparator = (a, b) => a - b) => {\n    let left = 0;\n    let right = array.length;\n    while (left < right) {\n        // | 0 to make it integer, faster according to: https://jsperf.com/or-vs-floor/2\n        const mid = (left + right) / 2 | 0;\n        const compare = comparator(value, array[mid]);\n        if (compare === 0)\n            return { found: true, index: mid };\n        else if (compare < 0)\n            right = mid;\n        else\n            left = mid + 1;\n    }\n    return { found: false, index: right };\n};\n", "import { binarySearch } from \"../util/BinarySearch.js\";\nexport var IndexPosition;\n(function (IndexPosition) {\n    IndexPosition[IndexPosition[\"Exact\"] = 0] = \"Exact\";\n    IndexPosition[IndexPosition[\"Next\"] = 1] = \"Next\";\n})(IndexPosition || (IndexPosition = {}));\nexport class SortedMap {\n    constructor(comparator) {\n        this.keys = [];\n        this.values = [];\n        this.comparator = comparator || ((a, b) => a - b);\n    }\n    set(key, value) {\n        const search = binarySearch(key, this.keys, this.comparator);\n        if (search.found) {\n            this.values[search.index] = value;\n        }\n        else {\n            this.keys.splice(search.index, 0, key);\n            this.values.splice(search.index, 0, value);\n        }\n        return search.index;\n    }\n    // you need to know what you are doing when using this method\n    insertAt(index, key, value) {\n        this.keys.splice(index, 0, key);\n        this.values.splice(index, 0, value);\n    }\n    setValueAt(index, value) {\n        this.values[index] = value;\n    }\n    get(key) {\n        const search = binarySearch(key, this.keys, this.comparator);\n        return search.found ? this.values[search.index] : undefined;\n    }\n    getEntryAt(index) {\n        return index < this.keys.length ? { key: this.keys[index], value: this.values[index] } : undefined;\n    }\n    getKeyAt(index) {\n        return this.keys[index];\n    }\n    getValueAt(index) {\n        return this.values[index];\n    }\n    delete(key) {\n        const search = binarySearch(key, this.keys, this.comparator);\n        if (search.found)\n            this.deleteAt(search.index);\n    }\n    size() {\n        return this.keys.length;\n    }\n    deleteAt(index) {\n        this.keys.splice(index, 1);\n        this.values.splice(index, 1);\n    }\n    indexOfKey(key) {\n        const search = binarySearch(key, this.keys, this.comparator);\n        return {\n            found: search.found ? IndexPosition.Exact : IndexPosition.Next,\n            index: search.index\n        };\n    }\n    map(func) {\n        const keys = this.keys;\n        const values = this.values;\n        const result = [];\n        for (let i = 0; i < keys.length; i++)\n            result.push(func(values[i], keys[i], i));\n        return result;\n    }\n    getAllEntries() {\n        return this.map((value, key) => { return { value, key }; });\n    }\n    clear() {\n        this.keys.length = 0;\n        this.values.length = 0;\n    }\n}\n", "import { MAX_DATE, MIN_DATE } from \"../util/Constants.js\";\nimport { EdgeInclusion } from \"../util/Types.js\";\nimport { IndexPosition, SortedMap } from \"./SortedMap.js\";\nexport class IntervalCache {\n    constructor(config) {\n        this.points = new SortedMap((a, b) => a.getTime() - b.getTime());\n        this.leftInfinityKey = MIN_DATE;\n        this.rightInfinityKey = MAX_DATE;\n        Object.assign(this, config);\n        if (this.emptyInterval === undefined || !this.combineIntervalsFn)\n            throw new Error(\"All of `emptyPoint`, `combineIntervalsFn` are required\");\n        this.points.set(this.leftInfinityKey, this.emptyInterval);\n    }\n    size() {\n        return this.points.size();\n    }\n    indexOf(date) {\n        return this.points.indexOfKey(date);\n    }\n    getDateAt(index) {\n        return this.points.getKeyAt(index);\n    }\n    getPointAt(index) {\n        return this.points.getValueAt(index);\n    }\n    getIntervalOf(date, edgeInclusion = EdgeInclusion.Left) {\n        // the `index` here is guaranteed to be > 0, because at index 0 there's a `emptyPoint`\n        let { found, index } = this.indexOf(date);\n        let startDateIndex;\n        if (edgeInclusion === EdgeInclusion.Left) {\n            startDateIndex = found === IndexPosition.Exact ? index : index - 1;\n        }\n        else {\n            startDateIndex = index - 1;\n        }\n        return this.getIntervalWithStartDateIndex(startDateIndex);\n    }\n    getPrevInterval(interval) {\n        if (interval.startDateIndex === 0)\n            return null;\n        return this.getIntervalWithStartDateIndex(interval.startDateIndex - 1);\n    }\n    getNextInterval(interval) {\n        if (interval.startDateIndex >= this.size() - 1)\n            return null;\n        return this.getIntervalWithStartDateIndex(interval.startDateIndex + 1);\n    }\n    getIntervalWithStartDateIndex(startDateIndex) {\n        return {\n            startDateIndex: startDateIndex,\n            startDate: this.getDateAt(startDateIndex),\n            endDate: startDateIndex + 1 < this.size() ? this.getDateAt(startDateIndex + 1) : this.rightInfinityKey,\n            cacheInterval: this.getPointAt(startDateIndex)\n        };\n    }\n    addInterval(startDate, endDate, extendInterval) {\n        const points = this.points;\n        // there is always \"leftInfinityKey\" empty point, so `index >= 0`\n        const { found, index } = points.indexOfKey(startDate);\n        let curIndex;\n        let lastUpdatedPoint;\n        if (found == IndexPosition.Exact) {\n            const inclusion = extendInterval(lastUpdatedPoint = points.getValueAt(index));\n            points.setValueAt(index, inclusion);\n            curIndex = index + 1;\n        }\n        else {\n            const inclusion = extendInterval(lastUpdatedPoint = points.getValueAt(index - 1));\n            points.insertAt(index, startDate, inclusion);\n            curIndex = index + 1;\n        }\n        while (curIndex < points.size()) {\n            const curDate = points.getKeyAt(curIndex);\n            if (curDate.getTime() >= endDate.getTime())\n                break;\n            const inclusion = extendInterval(lastUpdatedPoint = points.getValueAt(curIndex));\n            points.setValueAt(curIndex, inclusion);\n            curIndex++;\n        }\n        if (curIndex === points.size()) {\n            points.insertAt(points.size(), endDate, this.emptyInterval);\n        }\n        else {\n            const curDate = points.getKeyAt(curIndex);\n            if (curDate.getTime() === endDate.getTime()) {\n                // we advanced till some point, which matches `endDate` config\n                // this point will setup a new label, no need to add an explicit end date point,\n                // we are done, do nothing\n            }\n            else {\n                points.insertAt(curIndex, endDate, lastUpdatedPoint);\n            }\n        }\n    }\n    includeWrappingRange(intervalCache, startDate, endDate) {\n        let interval = intervalCache.getIntervalOf(startDate);\n        while (interval) {\n            this.addInterval(interval.startDate, interval.endDate, existingInterval => this.combineIntervalsFn(existingInterval, interval.cacheInterval));\n            if (interval.endDate.getTime() > endDate.getTime())\n                break;\n            interval = intervalCache.getNextInterval(interval);\n        }\n    }\n    getSummary() {\n        return this.points.map((label, date) => { return { label, date }; });\n    }\n    clear() {\n        this.points.clear();\n        this.points.set(this.leftInfinityKey, this.emptyInterval);\n    }\n}\n", "import later from \"../vendor/later/later.js\";\nimport { CalendarCache } from \"./CalendarCache.js\";\nimport { CalendarCacheInterval } from \"./CalendarCacheInterval.js\";\nimport { IntervalCache } from \"./IntervalCache.js\";\nimport DateHelper from \"../../Core/helper/DateHelper.js\";\nimport TimeZoneHelper from \"../../Core/helper/TimeZoneHelper.js\";\nexport class CalendarCacheSingle extends CalendarCache {\n    constructor(config) {\n        super(config);\n        this.staticIntervalsCached = false;\n        if (!this.unspecifiedTimeInterval)\n            throw new Error(\"Required attribute `unspecifiedTimeInterval` is missing\");\n        this.intervalCache = new IntervalCache({\n            emptyInterval: new CalendarCacheInterval({\n                intervals: [this.unspecifiedTimeInterval],\n                calendar: this.calendar\n            }),\n            combineIntervalsFn: (interval1, interval2) => {\n                return interval1.combineWith(interval2);\n            }\n        });\n    }\n    fillCache(startDate, endDate) {\n        if (!this.staticIntervalsCached) {\n            this.cacheStaticIntervals();\n            this.staticIntervalsCached = true;\n        }\n        if (this.parentCache)\n            this.includeWrappingRangeFrom(this.parentCache, startDate, endDate);\n        const startDateN = startDate.getTime();\n        const endDateN = endDate.getTime();\n        const timeZone = this.calendar.ignoreTimeZone ? null : this.calendar.project?.timeZone;\n        if (startDateN > endDateN)\n            throw new Error(\"Invalid cache fill interval\");\n        const NEVER = later.NEVER;\n        this.forEachRecurrentInterval(interval => {\n            const startSchedule = interval.getStartDateSchedule();\n            const endSchedule = interval.getEndDateSchedule();\n            let wrappingStartDate = startSchedule.prev(1, startDate);\n            let wrappingEndDate;\n            if (endSchedule === 'EOD') {\n                const nextEndDate = startSchedule.next(1, endDate);\n                if (nextEndDate !== NEVER) {\n                    wrappingEndDate = DateHelper.getStartOfNextDay(nextEndDate, true);\n                }\n                else {\n                    wrappingEndDate = NEVER;\n                }\n            }\n            else {\n                wrappingEndDate = endSchedule.next(1, endDate);\n            }\n            // if the `startDate` is an occurrence in the interval's schedule, we need to advance one point prior\n            // this is to provide the backward-scheduling information for the `startDate` point\n            if (wrappingStartDate !== NEVER && wrappingStartDate.getTime() === startDateN) {\n                const wrappingStartDates = startSchedule.prev(2, startDate);\n                if (wrappingStartDates !== NEVER && wrappingStartDates.length === 2)\n                    wrappingStartDate = wrappingStartDates[1];\n            }\n            if (wrappingEndDate !== NEVER && wrappingEndDate.getTime() === endDateN) {\n                const wrappingEndDates = endSchedule.next(2, endDate);\n                if (wrappingEndDates !== NEVER && wrappingEndDates.length === 2)\n                    wrappingEndDate = wrappingEndDates[1];\n            }\n            const startDates = startSchedule.next(Infinity, wrappingStartDate !== NEVER ? wrappingStartDate : startDate, wrappingEndDate !== NEVER ? new Date(wrappingEndDate.getTime() - 1) : endDate);\n            // schedule is empty for the interval of interest, do nothing\n            if (startDates === NEVER)\n                return;\n            // at this point `startDates` is a non-empty array\n            const endDates = endSchedule === 'EOD'\n                ? startDates.map(date => DateHelper.getStartOfNextDay(date, true))\n                : endSchedule.next(Infinity, new Date(startDates[0].getTime() + 1), wrappingEndDate !== NEVER ? wrappingEndDate : endDate);\n            if (endDates === NEVER)\n                return;\n            if (endDates.length > startDates.length) {\n                // safe to ignore \"extra\" end dates\n                endDates.length = startDates.length;\n            }\n            else if (endDates.length < startDates.length) {\n                // monkey patch\n                startDates.length = endDates.length;\n                // throw new Error(\"Recurrent interval inconsistency: \" + interval + \", caching startDate: \" + startDate + \", caching endDate: \" + endDate)\n            }\n            startDates.forEach((startDate, index) => {\n                let recStartDate = startDate;\n                let recEndDate = endDates[index];\n                // Adjust calendar intervals when changing time zone\n                if (timeZone != null) {\n                    recStartDate = TimeZoneHelper.toTimeZone(recStartDate, timeZone);\n                    recEndDate = TimeZoneHelper.toTimeZone(recEndDate, timeZone);\n                }\n                // if (recStartDate.getTime() > recEndDate.getTime())\n                //     throw new Error(\"Recurrent interval inconsistency: \" + interval + \", startDate: \" + startDate + \", endDate: \" + endDates[ index ])\n                this.intervalCache.addInterval(recStartDate, recEndDate, existingCacheInterval => existingCacheInterval.includeInterval(interval));\n            });\n        });\n    }\n    clear() {\n        this.staticIntervalsCached = false;\n        super.clear();\n    }\n    cacheStaticIntervals() {\n        this.forEachStaticInterval(interval => {\n            const timeZone = this.calendar.project?.timeZone;\n            let { startDate, endDate } = interval;\n            // Adjust calendar intervals when changing time zone\n            if (timeZone != null) {\n                startDate = TimeZoneHelper.toTimeZone(startDate, timeZone);\n                endDate = TimeZoneHelper.toTimeZone(endDate, timeZone);\n            }\n            this.intervalCache.addInterval(startDate, endDate, existingCacheInterval => existingCacheInterval.includeInterval(interval));\n        });\n    }\n    forEachStaticInterval(func) {\n        this.intervalStore.forEach((interval) => {\n            if (interval.isStatic())\n                func(interval);\n        });\n    }\n    forEachRecurrentInterval(func) {\n        this.intervalStore.forEach((interval) => {\n            if (interval.isRecurrent())\n                func(interval);\n        });\n    }\n}\n", "import { Mixin } from \"../../ChronoGraph/class/BetterMixin.js\";\nimport { CalendarIntervalMixin } from \"./CalendarIntervalMixin.js\";\n// Calendar interval model denoting unspecified interval\nexport class UnspecifiedTimeIntervalModel extends Mixin([CalendarIntervalMixin], (base) => {\n    const superProto = base.prototype;\n    class UnspecifiedTimeIntervalModel extends base {\n        getCalendar() {\n            return this.calendar;\n        }\n        // NOTE: See parent class implementation for further comments\n        getPriorityField() {\n            if (this.priorityField != null)\n                return this.priorityField;\n            return this.priorityField = this.getCalendar().getDepth();\n        }\n    }\n    return UnspecifiedTimeIntervalModel;\n}) {\n}\n", "import { Mixin } from \"../../../ChronoGraph/class/BetterMixin.js\";\nimport { CalendarIntervalStore } from \"../../calendar/CalendarIntervalStore.js\";\nimport { CalendarIteratorResult } from \"../../calendar/CalendarCache.js\";\nimport { TimeUnit } from \"../../scheduling/Types.js\";\nimport { CalendarCacheSingle } from \"../../calendar/CalendarCacheSingle.js\";\nimport { UnspecifiedTimeIntervalModel } from \"../../calendar/UnspecifiedTimeIntervalModel.js\";\nimport DateHelper from \"../../../Core/helper/DateHelper.js\";\nimport { AbstractPartOfProjectModelMixin } from \"./mixin/AbstractPartOfProjectModelMixin.js\";\n/**\n * Calendar for project scheduling, mixed by CoreCalendarMixin and BaseCalendarMixin. It is used to mark certain time\n * intervals as \"non-working\" and ignore them during scheduling.\n *\n * The calendar consists from several [[CalendarIntervalMixin|intervals]]. The intervals can be either static or recurrent.\n */\nexport class AbstractCalendarMixin extends Mixin([AbstractPartOfProjectModelMixin], (base) => {\n    const superProto = base.prototype;\n    class CalendarMixin extends base {\n        constructor() {\n            super(...arguments);\n            this.version = 1;\n        }\n        static get fields() {\n            return [\n                { name: 'version', type: 'number' },\n                'name',\n                { name: 'unspecifiedTimeIsWorking', type: 'boolean', defaultValue: true },\n                { name: 'intervals', type: 'store', subStore: true },\n                'cls',\n                'iconCls'\n            ];\n        }\n        get intervalStoreClass() {\n            return CalendarIntervalStore;\n        }\n        get intervalStore() {\n            // @ts-ignore\n            return this.meta.intervalsStore;\n        }\n        // Not a typo, name is generated from the fields name = intervals\n        initIntervalsStore(config) {\n            config.storeClass = this.intervalStoreClass;\n            // @ts-ignore\n            config.modelClass = this.getDefaultConfiguration().calendarIntervalModelClass || this.intervalStoreClass.defaultConfig.modelClass;\n            config.calendar = this;\n        }\n        // this method is called when the new value for the `intervals` field of this model is assigned\n        // the type of the `intervals` field is \"store\" that's why this magic\n        processIntervalsStoreData(intervals) {\n            this.bumpVersion();\n        }\n        isDefault() {\n            const project = this.getProject();\n            if (project) {\n                return this === project.defaultCalendar;\n            }\n            return false;\n        }\n        getDepth() {\n            return this.childLevel + 1;\n        }\n        /**\n         * The core iterator method of the calendar.\n         *\n         * @param options The options for iterator. Should contain at least one of the `startDate`/`endDate` properties\n         * which indicates what timespan to examine for availability intervals. If one of boundaries is not provided\n         * iterator function should return `false` at some point, to avoid infinite loops.\n         *\n         * Another recognized option is `isForward`, which indicates the direction in which to iterate through the timespan.\n         *\n         * @param func The iterator function to call. It will be called for every distinct set of availability intervals, found\n         * in the given timespan. All the intervals, which are \"active\" for current interval are collected in the 3rd argument\n         * for this function - [[CalendarCacheInterval|calendarCacheInterval]]. If iterator returns `false` (checked with `===`)\n         * the iteration stops.\n         *\n         * @param scope The scope (`this` value) to execute the iterator in.\n         */\n        forEachAvailabilityInterval(options, func, scope) {\n            const maxRange = options.maxRange ?? this.getProject()?.maxCalendarRange;\n            if (maxRange) {\n                options = { ...options, maxRange };\n            }\n            return this.calendarCache.forEachAvailabilityInterval(options, func, scope);\n        }\n        /**\n         * This method starts at the given `date` and moves forward or backward in time, depending on `isForward`.\n         * It stops moving as soon as it accumulates the `durationMs` milliseconds of working time and returns the date\n         * at which it has stopped and remaining duration - the [[AccumulateWorkingTimeResult]] object.\n         *\n         * Normally, the remaining duration will be 0, indicating the full `durationMs` has been accumulated.\n         * However, sometimes, calendar might not be able to accumulate enough working time due to various reasons,\n         * like if it does not contain enough working time - this case will be indicated with remaining duration bigger than 0.\n         *\n         * @param date\n         * @param durationMs\n         * @param isForward\n         */\n        accumulateWorkingTime(date, durationMs, isForward) {\n            // if duration is 0 - return the same date\n            if (durationMs === 0)\n                return { finalDate: new Date(date), remainingDurationInMs: 0 };\n            if (isNaN(durationMs))\n                throw new Error(\"Invalid duration\");\n            let finalDate = date;\n            const adjustDurationToDST = this.getProject()?.adjustDurationToDST ?? this.adjustDurationToDST ?? false;\n            this.forEachAvailabilityInterval(isForward ? { startDate: date, isForward: true } : { endDate: date, isForward: false }, (intervalStartDate, intervalEndDate, calendarCacheInterval) => {\n                let result = true;\n                if (calendarCacheInterval.getIsWorking()) {\n                    let diff = intervalEndDate.getTime() - intervalStartDate.getTime();\n                    if (durationMs <= diff) {\n                        if (adjustDurationToDST) {\n                            const dstDiff = isForward\n                                ? intervalStartDate.getTimezoneOffset() - (new Date(intervalStartDate.getTime() + durationMs)).getTimezoneOffset()\n                                : (new Date(intervalEndDate.getTime() - durationMs)).getTimezoneOffset() - intervalEndDate.getTimezoneOffset();\n                            durationMs -= dstDiff * 60 * 1000;\n                        }\n                        finalDate = isForward\n                            ? new Date(intervalStartDate.getTime() + durationMs)\n                            : new Date(intervalEndDate.getTime() - durationMs);\n                        durationMs = 0;\n                        result = false;\n                    }\n                    else {\n                        if (adjustDurationToDST) {\n                            const dstDiff = intervalStartDate.getTimezoneOffset() - intervalEndDate.getTimezoneOffset();\n                            diff += dstDiff * 60 * 1000;\n                        }\n                        finalDate = isForward ? intervalEndDate : intervalStartDate;\n                        durationMs -= diff;\n                    }\n                }\n                return result;\n            });\n            return { finalDate: new Date(finalDate), remainingDurationInMs: durationMs };\n        }\n        /**\n         * Calculate the working time duration between the 2 dates, in milliseconds.\n         *\n         * @param {Date} startDate\n         * @param {Date} endDate\n         * @param {Boolean} [allowNegative] Method ignores negative values by default, returning 0. Set to true to get\n         * negative duration.\n         */\n        calculateDurationMs(startDate, endDate, allowNegative = false) {\n            let duration = 0;\n            const multiplier = startDate.getTime() <= endDate.getTime() || !allowNegative ? 1 : -1;\n            if (multiplier < 0) {\n                [startDate, endDate] = [endDate, startDate];\n            }\n            const adjustDurationToDST = this.getProject()?.adjustDurationToDST ?? this.adjustDurationToDST ?? false;\n            this.forEachAvailabilityInterval({ startDate: startDate, endDate: endDate }, (intervalStartDate, intervalEndDate, calendarCacheInterval) => {\n                if (calendarCacheInterval.getIsWorking()) {\n                    duration += intervalEndDate.getTime() - intervalStartDate.getTime();\n                    if (adjustDurationToDST) {\n                        const dstDiff = intervalStartDate.getTimezoneOffset() - intervalEndDate.getTimezoneOffset();\n                        duration += dstDiff * 60 * 1000;\n                    }\n                }\n            });\n            return duration * multiplier;\n        }\n        /**\n         * Calculate the end date of the time interval which starts at `startDate` and has `durationMs` working time duration\n         * (in milliseconds).\n         *\n         * @param startDate\n         * @param durationMs\n         */\n        calculateEndDate(startDate, durationMs) {\n            // the method goes forward by default ..unless a negative duration provided\n            const isForward = durationMs >= 0;\n            const res = this.accumulateWorkingTime(startDate, Math.abs(durationMs), isForward);\n            return res.remainingDurationInMs === 0 ? res.finalDate : null;\n        }\n        /**\n         * Calculate the start date of the time interval which ends at `endDate` and has `durationMs` working time duration\n         * (in milliseconds).\n         *\n         * @param endDate\n         * @param durationMs\n         */\n        calculateStartDate(endDate, durationMs) {\n            // the method goes backwards by default ..unless a negative duration provided\n            const isForward = durationMs <= 0;\n            const res = this.accumulateWorkingTime(endDate, Math.abs(durationMs), isForward);\n            return res.remainingDurationInMs === 0 ? res.finalDate : null;\n        }\n        /**\n         * Returns the earliest point at which a working period of time starts, following the given date.\n         * Can be the date itself, if it comes on the working time.\n         *\n         * @param date The date after which to skip the non-working time.\n         * @param isForward Whether the \"following\" means forward in time or backward.\n         */\n        skipNonWorkingTime(date, isForward = true) {\n            let workingDate;\n            const res = this.forEachAvailabilityInterval(isForward ? { startDate: date, isForward: true } : { endDate: date, isForward: false }, (intervalStartDate, intervalEndDate, calendarCacheInterval) => {\n                if (calendarCacheInterval.getIsWorking()) {\n                    workingDate = isForward ? intervalStartDate : intervalEndDate;\n                    return false;\n                }\n            });\n            if (res === CalendarIteratorResult.MaxRangeReached || res === CalendarIteratorResult.FullRangeIterated)\n                return 'empty_calendar';\n            return workingDate ? new Date(workingDate) : new Date(date);\n        }\n        /**\n         * This method adds a single [[CalendarIntervalMixin]] to the internal collection of the calendar\n         */\n        addInterval(interval) {\n            return this.addIntervals([interval]);\n        }\n        /**\n         * This method adds an array of [[CalendarIntervalMixin]] to the internal collection of the calendar\n         */\n        addIntervals(intervals) {\n            this.bumpVersion();\n            return this.intervalStore.add(intervals);\n        }\n        /**\n         * This method removes a single [[CalendarIntervalMixin]] from the internal collection of the calendar\n         */\n        removeInterval(interval) {\n            return this.removeIntervals([interval]);\n        }\n        /**\n         * This method removes an array of [[CalendarIntervalMixin]] from the internal collection of the calendar\n         */\n        removeIntervals(intervals) {\n            this.bumpVersion();\n            return this.intervalStore.remove(intervals);\n        }\n        /**\n         * This method removes all intervals from the internal collection of the calendar\n         */\n        clearIntervals(silent) {\n            if (!silent) {\n                this.bumpVersion();\n            }\n            return this.intervalStore.removeAll(silent);\n        }\n        bumpVersion() {\n            this.clearCache();\n            this.version++;\n        }\n        get calendarCache() {\n            if (this.$calendarCache !== undefined)\n                return this.$calendarCache;\n            const unspecifiedTimeInterval = new UnspecifiedTimeIntervalModel({\n                isWorking: this.unspecifiedTimeIsWorking\n            });\n            unspecifiedTimeInterval.calendar = this;\n            return this.$calendarCache = new CalendarCacheSingle({\n                calendar: this,\n                unspecifiedTimeInterval: unspecifiedTimeInterval,\n                intervalStore: this.intervalStore,\n                parentCache: this.parent && !this.parent.isRoot ? this.parent.calendarCache : null\n            });\n        }\n        clearCache() {\n            // not strictly needed, we just help garbage collector\n            this.$calendarCache && this.$calendarCache.clear();\n            this.$calendarCache = undefined;\n        }\n        resetPriorityOfAllIntervals() {\n            this.traverse((calendar) => {\n                calendar.intervalStore.forEach((interval) => interval.resetPriority());\n            });\n        }\n        insertChild(child, before, silent) {\n            let res = superProto.insertChild.call(this, ...arguments);\n            if (!Array.isArray(res)) {\n                res = [res];\n            }\n            // invalidate cache of the child record, since now it should take parent into account\n            res.forEach((r) => {\n                r.bumpVersion();\n                r.resetPriorityOfAllIntervals();\n            });\n            return res;\n        }\n        joinProject() {\n            superProto.joinProject.call(this);\n            this.intervalStore.setProject(this.getProject());\n        }\n        leaveProject() {\n            superProto.leaveProject.call(this);\n            this.intervalStore.setProject(null);\n            this.clearCache();\n        }\n        doDestroy() {\n            this.leaveProject();\n            this.intervalStore.destroy();\n            super.doDestroy();\n        }\n        isDayHoliday(day) {\n            const startDate = DateHelper.clearTime(day), endDate = DateHelper.getNext(day, TimeUnit.Day);\n            let hasWorkingTime = false;\n            this.forEachAvailabilityInterval({ startDate, endDate, isForward: true }, (_intervalStartDate, _intervalEndDate, calendarCacheInterval) => {\n                hasWorkingTime = calendarCacheInterval.getIsWorking();\n                return !hasWorkingTime;\n            });\n            return !hasWorkingTime;\n        }\n        getDailyHolidaysRanges(startDate, endDate) {\n            const result = [];\n            startDate = DateHelper.clearTime(startDate);\n            while (startDate < endDate) {\n                if (this.isDayHoliday(startDate)) {\n                    result.push({\n                        startDate,\n                        endDate: DateHelper.getStartOfNextDay(startDate, true, true)\n                    });\n                }\n                startDate = DateHelper.getNext(startDate, TimeUnit.Day);\n            }\n            return result;\n        }\n        /**\n         * Returns working time ranges between the provided dates.\n         * @param {Date} startDate Start of the period to get ranges from.\n         * @param {Date} endDate End of the period to get ranges from.\n         */\n        getWorkingTimeRanges(startDate, endDate, maxRange) {\n            const result = [];\n            this.forEachAvailabilityInterval({ startDate, endDate, isForward: true, maxRange }, (intervalStartDate, intervalEndDate, calendarCacheInterval) => {\n                if (calendarCacheInterval.getIsWorking()) {\n                    const entry = calendarCacheInterval.intervals[0];\n                    result.push({\n                        name: entry.name,\n                        startDate: intervalStartDate,\n                        endDate: intervalEndDate\n                    });\n                }\n            });\n            return result;\n        }\n        /**\n         * Returns non-working time ranges between the provided dates.\n         * @param {Date} startDate Start of the period to get ranges from.\n         * @param {Date} endDate End of the period to get ranges from.\n         */\n        getNonWorkingTimeRanges(startDate, endDate, maxRange) {\n            const result = [];\n            this.forEachAvailabilityInterval({ startDate, endDate, isForward: true, maxRange }, (intervalStartDate, intervalEndDate, calendarCacheInterval) => {\n                if (!calendarCacheInterval.getIsWorking()) {\n                    const entry = calendarCacheInterval.intervals[0];\n                    result.push({\n                        name: entry.name,\n                        iconCls: entry.iconCls,\n                        cls: entry.cls,\n                        startDate: intervalStartDate,\n                        endDate: intervalEndDate\n                    });\n                }\n            });\n            return result;\n        }\n        /**\n         * Checks if there is a working time interval in the provided time range (or when just startDate is provided,\n         * checks if the date is contained inside a working time interval in this calendar)\n         * @param startDate\n         * @param [endDate]\n         * @param [fullyContained] Pass true to check if the range is fully covered by a single continuous working time block\n         */\n        isWorkingTime(startDate, endDate, fullyContained) {\n            if (fullyContained) {\n                let found;\n                const res = this.forEachAvailabilityInterval({ startDate, endDate, isForward: true }, (intervalStartDate, intervalEndDate, calendarCacheInterval) => {\n                    if (calendarCacheInterval.getIsWorking() && intervalStartDate <= startDate && intervalEndDate >= endDate) {\n                        found = true;\n                        return false;\n                    }\n                });\n                if (res === CalendarIteratorResult.MaxRangeReached || res === CalendarIteratorResult.FullRangeIterated)\n                    return false;\n                return found;\n            }\n            else {\n                // Can be Date | null | 'empty_calendar'\n                const workingTimeStart = this.skipNonWorkingTime(startDate);\n                return workingTimeStart && workingTimeStart !== 'empty_calendar' ? (endDate ? workingTimeStart < endDate : workingTimeStart.getTime() === startDate.getTime()) : false;\n            }\n        }\n    }\n    return CalendarMixin;\n}) {\n}\n", "import { CorePartOfProjectModelMixin } from '../mixin/CorePartOfProjectModelMixin.js';\nimport { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { AbstractCalendarMixin } from \"../AbstractCalendarMixin.js\";\n/**\n * The calendar for project scheduling, it is used to mark certain time intervals as \"non-working\" and ignore them during scheduling.\n *\n * The calendar consists from several [[CalendarIntervalMixin|intervals]]. The intervals can be either static or recurrent.\n */\nexport class CoreCalendarMixin extends Mixin([AbstractCalendarMixin, CorePartOfProjectModelMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreCalendarMixin extends base {\n    }\n    return CoreCalendarMixin;\n}) {\n}\n", "import { Mixin } from \"../../../ChronoGraph/class/Mixin.js\";\nimport { AbstractPartOfProjectStoreMixin } from \"./mixin/AbstractPartOfProjectStoreMixin.js\";\n/**\n * Shared functionality for [[CoreCalendarManagerStoreMixin]] and [[ChronoCalendarManagerStoreMixin]]\n */\nexport class AbstractCalendarManagerStoreMixin extends Mixin([AbstractPartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class AbstractCalendarManagerStoreMixin extends base {\n        // special handling to destroy calendar models as part of destroying this store\n        doDestroy() {\n            const records = [];\n            // When chained, traverse can be called on destroyed nodes.\n            if (!this.rootNode?.isDestroyed) {\n                this.traverse(record => records.push(record));\n            }\n            super.doDestroy();\n            records.forEach(record => record.destroy());\n        }\n    }\n    return AbstractCalendarManagerStoreMixin;\n}) {\n}\n", "import { Mixin } from \"../../../ChronoGraph/class/BetterMixin.js\";\nimport { CorePartOfProjectStoreMixin } from './mixin/CorePartOfProjectStoreMixin.js';\nimport { CoreCalendarMixin } from '../model/scheduler_core/CoreCalendarMixin.js';\nimport { AbstractCalendarManagerStoreMixin } from \"./AbstractCalendarManagerStoreMixin.js\";\n/**\n * A store mixin class, that represent collection of all calendars in the [[SchedulerCoreProjectMixin|project]].\n */\nexport class CoreCalendarManagerStoreMixin extends Mixin([AbstractCalendarManagerStoreMixin, CorePartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreCalendarManagerStoreMixin extends base {\n        static get defaultConfig() {\n            return {\n                tree: true,\n                modelClass: CoreCalendarMixin\n            };\n        }\n    }\n    return CoreCalendarManagerStoreMixin;\n}) {\n}\n", "import { Mixin } from \"../../../ChronoGraph/class/BetterMixin.js\";\nimport Delayable from \"../../../Core/mixin/Delayable.js\";\nimport Events from \"../../../Core/mixin/Events.js\";\nimport Model from \"../../../Core/data/Model.js\";\nexport class EventsWrapper extends Mixin([], Events) {\n}\nexport class DelayableWrapper extends Mixin([], Delayable) {\n}\n/**\n * This is an abstract project, which just lists the available stores.\n *\n * The actual project classes are [[SchedulerCoreProjectMixin]], [[SchedulerBasicProjectMixin]],\n * [[SchedulerProProjectMixin]], [[GanttProjectMixin]].\n */\nexport class AbstractProjectMixin extends Mixin([\n    EventsWrapper,\n    DelayableWrapper,\n    Model\n], (base) => {\n    const superProto = base.prototype;\n    class AbstractProjectMixin extends base {\n        constructor() {\n            super(...arguments);\n            this.isRestoringData = false;\n        }\n        get isRepopulatingStores() {\n            return false;\n        }\n        get isInitialCommit() {\n            return !this.isInitialCommitPerformed || this.hasLoadedDataToCommit;\n        }\n        construct(config = {}) {\n            // Define default values for these flags here\n            // if defined where declared then TS compiles them this way:\n            // constructor() {\n            //     super(...arguments)\n            //     this.isInitialCommitPerformed   = false\n            //     this.isLoadingInlineData        = false\n            //     this.isWritingData              = false\n            //\n            // }\n            // which messes the flags values for inline data loading (since it's async)\n            this.isInitialCommitPerformed = false;\n            this.isLoadingInlineData = false;\n            this.isWritingData = false;\n            this.hasLoadedDataToCommit = false;\n            const silenceInitialCommit = ('silenceInitialCommit' in config) ? config.silenceInitialCommit : true;\n            const adjustDurationToDST = ('adjustDurationToDST' in config) ? config.adjustDurationToDST : false;\n            // 5 years roughly === 5 * 365 * 24 * 60 * 60 * 1000\n            this.maxCalendarRange = ('maxCalendarRange' in config) ? config.maxCalendarRange : 157680000000;\n            // delete configs otherwise super.construct() call treat them as fields and makes accessors for them\n            delete config.maxCalendarRange;\n            delete config.silenceInitialCommit;\n            delete config.adjustDurationToDST;\n            superProto.construct.call(this, config);\n            this.silenceInitialCommit = silenceInitialCommit;\n            this.adjustDurationToDST = adjustDurationToDST;\n        }\n        // Template method called when a stores dataset is replaced. Implemented in SchedulerBasicProjectMixin\n        repopulateStore(store) { }\n        // Template method called when replica should be repopulated. Implemented in SchedulerBasicProjectMixin\n        repopulateReplica() { }\n        deferUntilRepopulationIfNeeded(deferId, func, args) {\n            // no deferring at this level (happens in projects using engine)\n            func(...args);\n        }\n        // Template method called when a store is attached to the project\n        attachStore(store) { }\n        // Template method called when a store is detached to the project\n        detachStore(store) { }\n        async commitAsync() {\n            throw new Error(\"Abstract method called\");\n        }\n        // Different implementations for Core and Basic engines\n        isEngineReady() {\n            throw new Error(\"Abstract method called\");\n        }\n        getStm() {\n            throw new Error(\"Abstract method called\");\n        }\n    }\n    return AbstractProjectMixin;\n}) {\n}\n", "import { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { SchedulerCoreEvent } from \"./SchedulerCoreEvent.js\";\nimport Store from \"../../../../Core/data/Store.js\";\nimport Model from \"../../../../Core/data/Model.js\";\nimport Delayable from \"../../../../Core/mixin/Delayable.js\";\nimport { CoreEventStoreMixin } from \"../../store/CoreEventStoreMixin.js\";\nimport { CoreAssignmentMixin } from \"./CoreAssignmentMixin.js\";\nimport { CoreAssignmentStoreMixin } from \"../../store/CoreAssignmentStoreMixin.js\";\nimport { CoreResourceMixin } from \"./CoreResourceMixin.js\";\nimport { CoreResourceStoreMixin } from \"../../store/CoreResourceStoreMixin.js\";\nimport { CorePartOfProjectGenericMixin } from \"../../CorePartOfProjectGenericMixin.js\";\nimport { CoreDependencyStoreMixin } from \"../../store/CoreDependencyStoreMixin.js\";\nimport { CoreDependencyMixin } from \"./CoreDependencyMixin.js\";\nimport { CoreCalendarMixin } from './CoreCalendarMixin.js';\nimport { CoreCalendarManagerStoreMixin } from '../../store/CoreCalendarManagerStoreMixin.js';\nimport { delay } from \"../../../util/Functions.js\";\nimport StateTrackingManager from \"../../../../Core/data/stm/StateTrackingManager.js\";\nimport { AbstractProjectMixin } from \"../AbstractProjectMixin.js\";\nimport ObjectHelper from \"../../../../Core/helper/ObjectHelper.js\";\nexport class DelayableWrapper extends Mixin([], Delayable) {\n}\n/**\n * This is a project, implementing _basic scheduling_ as [[SchedulerBasicProjectMixin]] does.\n * Yet this class does not use _chronograph_ based engine.\n */\nexport class SchedulerCoreProjectMixin extends Mixin([\n    AbstractProjectMixin,\n    CorePartOfProjectGenericMixin,\n    DelayableWrapper,\n    Model\n], (base) => {\n    const superProto = base.prototype;\n    class SchedulerCoreProjectMixin extends base {\n        static get configurable() {\n            return {\n                stm: {},\n                eventStore: {},\n                assignmentStore: {},\n                resourceStore: {},\n                dependencyStore: {},\n                calendarManagerStore: {},\n                eventModelClass: SchedulerCoreEvent,\n                assignmentModelClass: CoreAssignmentMixin,\n                resourceModelClass: CoreResourceMixin,\n                dependencyModelClass: CoreDependencyMixin,\n                calendarModelClass: CoreCalendarMixin,\n                eventStoreClass: CoreEventStoreMixin,\n                assignmentStoreClass: CoreAssignmentStoreMixin,\n                resourceStoreClass: CoreResourceStoreMixin,\n                dependencyStoreClass: CoreDependencyStoreMixin,\n                calendarManagerStoreClass: CoreCalendarManagerStoreMixin,\n                assignmentsData: null,\n                calendarsData: null,\n                dependenciesData: null,\n                eventsData: null,\n                resourcesData: null\n            };\n        }\n        //endregion\n        //region Init\n        construct(config = {}) {\n            const me = this;\n            // Cannot be created with declaration, because of how TS is compiled to JS. Ends up after `construct()`\n            me.$invalidated = new Set();\n            // Define default values for these flags here\n            // if defined where declared then TS compiles them this way:\n            // constructor() {\n            //     super(...arguments)\n            //     this.isPerformingCommit   = false\n            //     this.silenceInitialCommit = true\n            //     this.ongoing              = Promise.resolve()\n            // }\n            // which messes the flags values for inline data loading (since it's async)\n            me.isPerformingCommit = false;\n            me.silenceInitialCommit = true;\n            me.ongoing = Promise.resolve();\n            if (config.eventStore && !config.assignmentStore) {\n                const eventStore = config.eventStore.masterStore || config.eventStore;\n                // If chained from a CrudManager, the assignment store might not be part of a project, and we might\n                // need to ingest it from the CrudManager\n                // @ts-ignore\n                const assignmentStore = eventStore.assignmentStore || eventStore.crudManager?.assignmentStore;\n                // In this case we must ingest the assignment store from the eventStore\n                if (assignmentStore?.isAssignmentStore) {\n                    config.assignmentStore = assignmentStore;\n                    me.isSharingAssignmentStore = true;\n                }\n            }\n            superProto.construct.call(me, config);\n            // not part of the CalendarManagerStore intentionally, not persisted\n            me.defaultCalendar = new me.calendarManagerStore.modelClass({\n                unspecifiedTimeIsWorking: me.unspecifiedTimeIsWorking\n            });\n            me.defaultCalendar.project = me;\n            const { calendarsData, eventsData, dependenciesData, resourcesData, assignmentsData } = me;\n            const hasInlineData = Boolean(calendarsData || eventsData || dependenciesData || resourcesData || assignmentsData);\n            if (hasInlineData) {\n                me.loadInlineData({\n                    calendarsData,\n                    eventsData,\n                    dependenciesData,\n                    resourcesData,\n                    assignmentsData\n                });\n                delete me.calendarsData;\n                delete me.eventsData;\n                delete me.dependenciesData;\n                delete me.resourcesData;\n                delete me.assignmentsData;\n            }\n            else {\n                // Trigger initial commit\n                me.bufferedCommitAsync();\n            }\n        }\n        doDestroy() {\n            const me = this;\n            me.eventStore?.destroy();\n            me.dependencyStore?.destroy();\n            me.assignmentStore?.destroy();\n            me.resourceStore?.destroy();\n            me.calendarManagerStore?.destroy();\n            me.defaultCalendar.destroy();\n            me.stm?.destroy();\n            superProto.doDestroy.call(this);\n        }\n        /**\n         * This method loads the \"raw\" data into the project. The loading is basically happening by\n         * assigning the individual data entries to the `data` property of the corresponding store.\n         *\n         * @param data\n         */\n        async loadInlineData(data) {\n            const me = this;\n            me.isLoadingInlineData = true;\n            if (data.calendarsData) {\n                me.calendarManagerStore.data = data.calendarsData;\n            }\n            if (data.resourcesData) {\n                me.resourceStore.data = data.resourcesData;\n            }\n            if (data.assignmentsData) {\n                me.assignmentStore.data = data.assignmentsData;\n            }\n            if (data.eventsData) {\n                me.eventStore.data = data.eventsData;\n            }\n            if (data.tasksData) {\n                me.eventStore.data = data.tasksData;\n            }\n            if (data.dependenciesData) {\n                me.dependencyStore.data = data.dependenciesData;\n            }\n            await me.commitLoad();\n            me.isLoadingInlineData = false;\n            return;\n        }\n        //endregion\n        //region Join\n        async commitLoad() {\n            await this.commitAsync();\n            // Might have been destroyed during the async operation above\n            if (!this.isDestroyed)\n                this.trigger('load');\n        }\n        joinStoreRecords(store) {\n            const fn = (record) => {\n                record.setProject(this);\n                record.joinProject();\n            };\n            if (store.rootNode) {\n                store.rootNode.traverse(fn);\n            }\n            else {\n                store.forEach(fn);\n            }\n        }\n        unJoinStoreRecords(store) {\n            const fn = (record) => {\n                record.leaveProject();\n                record.setProject(this);\n            };\n            if (store.rootNode) {\n                store.rootNode.traverse(node => {\n                    // do not unjoin/leave project for the root node, which is the project itself\n                    if (node !== store.rootNode)\n                        fn(node);\n                });\n            }\n            else {\n                store.forEach(fn);\n            }\n        }\n        //endregion\n        //region EventStore\n        resolveStoreAndModelClass(name, config) {\n            // storeClass from supplied config or our properties\n            const storeClass = config?.storeClass || this[`${name}StoreClass`];\n            // modelClass from supplied config\n            let modelClass = config?.modelClass;\n            if (!modelClass) {\n                // or from storeClass.modelClass if customized\n                // @ts-ignore\n                if (this.getDefaultConfiguration()[`${name}ModelClass`] !== storeClass.getDefaultConfiguration().modelClass) {\n                    modelClass = storeClass.getDefaultConfiguration().modelClass;\n                }\n                // and if none of the above, use from our properties\n                else {\n                    modelClass = this[`${name}ModelClass`];\n                }\n            }\n            return { storeClass, modelClass };\n        }\n        setEventStore(eventStore) {\n            this.eventStore = eventStore;\n        }\n        changeEventStore(eventStore, oldStore) {\n            const me = this, { stm } = me;\n            me.detachStore(oldStore);\n            if (!(eventStore instanceof Store)) {\n                const { storeClass, modelClass } = me.resolveStoreAndModelClass('event', eventStore);\n                eventStore = new storeClass(ObjectHelper.assign({\n                    modelClass,\n                    project: me,\n                    stm\n                }, eventStore));\n            }\n            else {\n                eventStore.project = me;\n                stm.addStore(eventStore);\n                me.joinStoreRecords(eventStore);\n            }\n            if (oldStore && stm.hasStore(oldStore)) {\n                stm.removeStore(oldStore);\n                me.unJoinStoreRecords(oldStore);\n                const { assignmentsForRemoval } = oldStore;\n                // remap the assignment\n                assignmentsForRemoval.forEach(assignment => {\n                    const oldEvent = assignment.event;\n                    if (oldEvent) {\n                        const newEvent = eventStore.getById(oldEvent.id);\n                        if (newEvent) {\n                            assignment.event = newEvent;\n                            // keep the assignment\n                            assignmentsForRemoval.delete(assignment);\n                        }\n                    }\n                });\n                oldStore.afterEventRemoval();\n            }\n            eventStore.setProject(me);\n            return eventStore;\n        }\n        updateEventStore(eventStore, oldStore) {\n            this.attachStore(eventStore);\n            this.trigger('eventStoreChange', { store: eventStore });\n        }\n        //endregion\n        //region AssignmentStore\n        setAssignmentStore(assignmentStore) {\n            this.assignmentStore = assignmentStore;\n        }\n        changeAssignmentStore(assignmentStore, oldStore) {\n            const me = this, { stm } = me;\n            me.detachStore(oldStore);\n            if (oldStore && stm.hasStore(oldStore)) {\n                stm.removeStore(oldStore);\n                me.unJoinStoreRecords(oldStore);\n            }\n            if (!(assignmentStore instanceof Store)) {\n                const { storeClass, modelClass } = me.resolveStoreAndModelClass('assignment', assignmentStore);\n                assignmentStore = new storeClass(ObjectHelper.assign({\n                    modelClass,\n                    project: me,\n                    stm\n                }, assignmentStore));\n            }\n            else {\n                assignmentStore.project = me;\n                stm.addStore(assignmentStore);\n                me.joinStoreRecords(assignmentStore);\n            }\n            assignmentStore.setProject(me);\n            return assignmentStore;\n        }\n        updateAssignmentStore(assignmentStore, oldStore) {\n            this.attachStore(assignmentStore);\n            this.trigger('assignmentStoreChange', { store: assignmentStore });\n        }\n        //endregion\n        //region ResourceStore\n        setResourceStore(resourceStore) {\n            this.resourceStore = resourceStore;\n        }\n        changeResourceStore(resourceStore, oldStore) {\n            const me = this, { stm } = me;\n            me.detachStore(oldStore);\n            if (!(resourceStore instanceof Store)) {\n                const { storeClass, modelClass } = me.resolveStoreAndModelClass('resource', resourceStore);\n                resourceStore = new storeClass(ObjectHelper.assign({\n                    modelClass,\n                    project: me,\n                    stm\n                }, resourceStore));\n            }\n            else {\n                resourceStore.project = me;\n                stm.addStore(resourceStore);\n                me.joinStoreRecords(resourceStore);\n            }\n            if (oldStore && stm.hasStore(oldStore)) {\n                stm.removeStore(oldStore);\n                me.unJoinStoreRecords(oldStore);\n                const { assignmentsForRemoval } = oldStore;\n                // remap the assignment\n                assignmentsForRemoval.forEach(assignment => {\n                    const oldResource = assignment.resource;\n                    if (oldResource) {\n                        const newResource = resourceStore.getById(oldResource.id);\n                        if (newResource) {\n                            assignment.resource = newResource;\n                            // keep the assignment\n                            assignmentsForRemoval.delete(assignment);\n                        }\n                    }\n                });\n                oldStore.afterResourceRemoval();\n            }\n            resourceStore.setProject(me);\n            return resourceStore;\n        }\n        updateResourceStore(resourceStore, oldStore) {\n            this.attachStore(resourceStore);\n            this.trigger('resourceStoreChange', { store: resourceStore });\n        }\n        //endregion\n        //region DependencyStore\n        setDependencyStore(dependencyStore) {\n            this.dependencyStore = dependencyStore;\n        }\n        changeDependencyStore(dependencyStore, oldStore) {\n            const me = this;\n            me.detachStore(oldStore);\n            if (!(dependencyStore instanceof Store)) {\n                const { storeClass, modelClass } = me.resolveStoreAndModelClass('dependency', dependencyStore);\n                dependencyStore = new storeClass(ObjectHelper.assign({\n                    modelClass,\n                    project: me,\n                    stm: me.stm\n                }, dependencyStore));\n            }\n            else {\n                dependencyStore.project = me;\n                me.stm.addStore(dependencyStore);\n                me.joinStoreRecords(dependencyStore);\n            }\n            return dependencyStore;\n        }\n        updateDependencyStore(dependencyStore, oldStore) {\n            this.attachStore(dependencyStore);\n            this.trigger('dependencyStoreChange', { store: dependencyStore });\n        }\n        //endregion\n        //region CalendarManagerStore\n        setCalendarManagerStore(calendarManagerStore) {\n            this.calendarManagerStore = calendarManagerStore;\n        }\n        changeCalendarManagerStore(calendarManagerStore, oldStore) {\n            const me = this;\n            me.detachStore(oldStore);\n            if (!(calendarManagerStore instanceof Store)) {\n                // @ts-ignore\n                const storeClass = calendarManagerStore?.storeClass || me.calendarManagerStoreClass;\n                // @ts-ignore\n                const modelClass = calendarManagerStore?.modelClass || storeClass.getDefaultConfiguration().modelClass || me.calendarModelClass;\n                calendarManagerStore = new storeClass(ObjectHelper.assign({\n                    modelClass,\n                    project: me,\n                    stm: me.stm\n                }, calendarManagerStore));\n            }\n            else {\n                me.stm.addStore(calendarManagerStore);\n            }\n            calendarManagerStore.setProject(me);\n            return calendarManagerStore;\n        }\n        updateCalendarManagerStore(calendarManagerStore, oldStore) {\n            this.attachStore(calendarManagerStore);\n            this.trigger('calendarManagerStoreChange', { store: calendarManagerStore });\n        }\n        //endregion\n        //region Calendar\n        get calendar() {\n            return this.$calendar || this.defaultCalendar;\n        }\n        set calendar(calendar) {\n            this.$calendar = calendar;\n        }\n        get effectiveCalendar() {\n            return this.calendar;\n        }\n        //endregion\n        //region Add records\n        async addEvent(event) {\n            this.eventStore.add(event);\n            return this.commitAsync();\n        }\n        async addAssignment(assignment) {\n            this.assignmentStore.add(assignment);\n            return this.commitAsync();\n        }\n        async addResource(resource) {\n            this.resourceStore.add(resource);\n            return this.commitAsync();\n        }\n        async addDependency(dependency) {\n            this.dependencyStore.add(dependency);\n            return this.commitAsync();\n        }\n        //endregion\n        //region Auto commit\n        // Buffer commitAsync using setTimeout. Not using `buffer` on purpose, for performance reasons and to better\n        // mimic how graph does it\n        bufferedCommitAsync() {\n            if (!this.hasPendingAutoCommit) {\n                this.setTimeout({\n                    fn: 'commitAsync',\n                    delay: 10\n                });\n            }\n        }\n        get hasPendingAutoCommit() {\n            return this.hasTimeout('commitAsync');\n        }\n        unScheduleAutoCommit() {\n            this.clearTimeout('commitAsync');\n        }\n        //endregion\n        //region Commit\n        async commitAsync() {\n            if (this.isPerformingCommit)\n                return this.ongoing;\n            return this.ongoing = this.doCommitAsync();\n        }\n        async doCommitAsync() {\n            const me = this;\n            me.isPerformingCommit = true;\n            // Cancel any outstanding commit\n            me.unScheduleAutoCommit();\n            await delay(0);\n            if (!me.isDestroyed) {\n                // Calculate all invalidated records, updates their data silently\n                for (const record of me.$invalidated) {\n                    record.calculateInvalidated();\n                }\n                const { isInitialCommit, silenceInitialCommit } = me;\n                // apply changes silently if this is initial commit and \"silenceInitialCommit\" option is enabled\n                const silenceCommit = isInitialCommit && silenceInitialCommit;\n                // Notify stores that care about commit (internal)\n                me.assignmentStore.onCommitAsync();\n                me.dependencyStore.onCommitAsync();\n                me.isInitialCommitPerformed = true;\n                me.hasLoadedDataToCommit = false;\n                me.isPerformingCommit = false;\n                const stores = [me.assignmentStore, me.dependencyStore, me.eventStore, me.resourceStore, me.calendarManagerStore];\n                stores.forEach(store => store.suspendAutoCommit?.());\n                me.isWritingData = true;\n                // \"Real\" project triggers refresh before data is written back to records\n                me.trigger('refresh', { isInitialCommit, isCalculated: true });\n                // If we are not announcing changes, take a cheaper path\n                if (silenceCommit) {\n                    for (const record of me.$invalidated) {\n                        record.finalizeInvalidated(true);\n                    }\n                }\n                else {\n                    // Two loops looks a bit weird, but needed since editing assignment might affect event etc.\n                    // And we do only want a single update in the end\n                    // 1. Start batches and perform all calculations\n                    for (const record of me.$invalidated) {\n                        record.beginBatch(true);\n                        record.finalizeInvalidated();\n                    }\n                    // 2. End batches, announcing changes (unless initial commit)\n                    for (const record of me.$invalidated) {\n                        record.endBatch(false, true);\n                    }\n                }\n                me.isWritingData = false;\n                me.$invalidated.clear();\n                // Mimic real projects events\n                me.trigger('dataReady');\n                stores.forEach(store => store.resumeAutoCommit?.());\n                // Chrono version triggers \"dataReady\" only if there were no commit rejection\n                // (in case of a rejection it triggers \"commitRejected\" event)\n                // but in both cases it triggers \"commitFinalized\" afterwards\n                me.trigger('commitFinalized');\n                return true;\n            }\n        }\n        async propagateAsync() {\n            return this.commitAsync();\n        }\n        // Called when a record invalidates itself, queues it for calculation\n        invalidate(record) {\n            this.$invalidated.add(record);\n            this.bufferedCommitAsync();\n        }\n        // this does not account for possible scheduling conflicts\n        async isValidDependency() {\n            return true;\n        }\n        //endregion\n        //region STM\n        getStm() {\n            return this.stm;\n        }\n        /**\n         * State tracking manager instance the project relies on\n         */\n        set stm(stm) {\n            stm = this.$stm = new StateTrackingManager(ObjectHelper.assign({\n                disabled: true\n            }, stm));\n            stm.ion({\n                // Propagate on undo/redo\n                restoringStop: async () => {\n                    // Disable STM meanwhile to not pick it up as a new STM transaction\n                    stm.disable();\n                    await this.commitAsync();\n                    if (!this.isDestroyed) {\n                        stm.enable();\n                        this.trigger('stateRestoringDone');\n                    }\n                }\n            });\n        }\n        get stm() {\n            return this.$stm;\n        }\n        //endregion\n        isEngineReady() {\n            return !this.hasPendingAutoCommit && !this.isPerformingCommit && this.isInitialCommitPerformed;\n        }\n    }\n    //region Config\n    SchedulerCoreProjectMixin.applyConfigs = true;\n    return SchedulerCoreProjectMixin;\n}) {\n}\n", "import VersionHelper from '../../Core/helper/VersionHelper.js';\nimport ProjectModelMixin from './mixin/ProjectModelMixin.js';\nimport ProjectCurrentConfig from './mixin/ProjectCurrentConfig.js';\nimport ModelPersistencyManager from '../data/util/ModelPersistencyManager.js';\nimport { SchedulerCoreProjectMixin } from '../../Engine/quark/model/scheduler_core/SchedulerCoreProjectMixin.js';\nimport EventModel from './EventModel.js';\nimport DependencyModel from './DependencyModel.js';\nimport ResourceModel from './ResourceModel.js';\nimport AssignmentModel from './AssignmentModel.js';\nimport EventStore from '../data/EventStore.js';\nimport DependencyStore from '../data/DependencyStore.js';\nimport ResourceStore from '../data/ResourceStore.js';\nimport AssignmentStore from '../data/AssignmentStore.js';\nconst EngineMixin = SchedulerCoreProjectMixin;\n/**\n * @module Scheduler/model/ProjectModel\n */\n/**\n * This class represents a global project of your Scheduler - a central place for all data.\n *\n * It holds and links the stores usually used by Scheduler:\n *\n * - {@link Scheduler.data.EventStore}\n * - {@link Scheduler.data.ResourceStore}\n * - {@link Scheduler.data.AssignmentStore}\n * - {@link Scheduler.data.DependencyStore}\n * - {@link Scheduler.data.TimeRangeStore}\n * - {@link Scheduler.data.ResourceTimeRangeStore}\n *\n * The project uses a calculation engine to normalize dates and durations. It is also responsible for\n * handling references between models, for example to link an event via an assignment to a resource. These operations\n * are asynchronous, a fact that is hidden when working in the Scheduler UI but which you must know about when performing\n * more advanced operations on the data level.\n *\n * When there is a change to data that requires something else to be recalculated, the project schedules a calculation (a\n * commit) which happens moments later. It is also possible to trigger these calculations directly. This snippet illustrate\n * the process:\n *\n 1. Something changes which requires the project to recalculate, for example adding a new task:\n *\n * ```javascript\n * const [event] = project.eventStore.add({ startDate, endDate });\n * ```\n *\n * 2. A recalculation is scheduled, thus:\n *\n * ```javascript\n * event.duration; // <- Not yet calculated\n * ```\n *\n * 3. Calculate now instead of waiting for the scheduled calculation\n *\n * ```javascript\n * await project.commitAsync();\n *\n * event.duration; // <- Now available\n * ```\n *\n * ## Using inline data\n *\n * The project provides settable property {@link Scheduler.crud.AbstractCrudManager#property-inlineData} that can\n * be used to get data from all its stores at once and to set this data as well. Populating the stores this way can\n * be useful if you cannot or you do not want to use CrudManager for server requests but you pull the data by other\n * means and have it ready outside of ProjectModel. Also, the data from all stores is available in a single\n * assignment statement.\n *\n * ### Getting data\n * ```javascript\n * const data = scheduler.project.inlineData;\n *\n * // use the data in your application\n * ```\n *\n * ### Setting data\n * ```javascript\n * const data = // your function to pull server data\n *\n * scheduler.project.inlineData = data;\n * ```\n *\n * ## Monitoring data changes\n *\n * While it is possible to listen for data changes on the projects individual stores, it is sometimes more convenient\n * to have a centralized place to handle all data changes. By listening for the {@link #event-change change event} your\n * code gets notified when data in any of the stores changes. Useful for example to keep an external data model up to\n * date:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     project: {\n *         listeners : {\n *             change({ store, action, records }) {\n *                 const { $name } = store.constructor;\n *\n *                 if (action === 'add') {\n *                     externalDataModel.add($name, records);\n *                 }\n *\n *                 if (action === 'remove') {\n *                     externalDataModel.remove($name, records);\n *                 }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * ## Built-in StateTrackingManager\n *\n * The project also has a built-in {@link Core.data.stm.StateTrackingManager StateTrackingManager} (STM for short), that\n * handles undo/redo for the project stores (additional stores can also be added). You can enable it to track all\n * project store changes:\n *\n * ```javascript\n * // Turn on auto recording when you create your Scheduler:\n * const scheduler = new Scheduler({\n *    project : {\n *        stm : {\n *            autoRecord : true\n *        }\n *    }\n * });\n *\n * // Undo a transaction\n * project.stm.undo();\n *\n * // Redo\n * project.stm.redo();\n * ```\n *\n * Check out the `undoredo` demo to see it in action.\n *\n * @extends Core/data/Model\n * @mixes Scheduler/model/mixin/ProjectModelMixin\n * @uninherit Core/data/mixin/TreeNode\n */\nexport default class ProjectModel extends ProjectCurrentConfig(ProjectModelMixin(EngineMixin)) {\n    static get $name() {\n        return 'ProjectModel';\n    }\n    //region Inline data configs & properties\n    /**\n     * @hidefields id, readOnly, children, parentId, parentIndex\n     */\n    /**\n     * A flag, indicating whether the dates and duration calculations should adjust the result to DST time shift.\n     *\n     * @config {Boolean} adjustDurationToDST\n     * @default false\n     */\n    /**\n     * Get/set {@link #property-eventStore} data.\n     *\n     * Always returns an array of {@link Scheduler.model.EventModel EventModels} but also accepts an array of\n     * its configuration objects as input.\n     *\n     * @member {Scheduler.model.EventModel[]} events\n     * @accepts {Scheduler.model.EventModel[]|EventModelConfig[]}\n     * @category Inline data\n     */\n    /**\n     * Data use to fill the {@link #property-eventStore}. Should be an array of\n     * {@link Scheduler.model.EventModel EventModels} or its configuration objects.\n     *\n     * @config {Scheduler.model.EventModel[]|EventModelConfig[]} events\n     * @category Inline data\n     */\n    /**\n     * Get/set {@link #property-resourceStore} data.\n     *\n     * Always returns an array of {@link Scheduler.model.ResourceModel ResourceModels} but also accepts an array\n     * of its configuration objects as input.\n     *\n     * @member {Scheduler.model.ResourceModel[]} resources\n     * @accepts {Scheduler.model.ResourceModel[]|ResourceModelConfig[]}\n     * @category Inline data\n     */\n    /**\n     * Data use to fill the {@link #property-resourceStore}. Should be an array of\n     * {@link Scheduler.model.ResourceModel ResourceModels} or its configuration objects.\n     *\n     * @config {Scheduler.model.ResourceModel[]|ResourceModelConfig[]} resources\n     * @category Inline data\n     */\n    /**\n     * Get/set {@link #property-assignmentStore} data.\n     *\n     * Always returns an array of {@link Scheduler.model.AssignmentModel AssignmentModels} but also accepts an\n     * array of its configuration objects as input.\n     *\n     * @member {Scheduler.model.AssignmentModel[]} assignments\n     * @accepts {Scheduler.model.AssignmentModel[]|AssignmentModelConfig[]}\n     * @category Inline data\n     */\n    /**\n     * Data use to fill the {@link #property-assignmentStore}. Should be an array of\n     * {@link Scheduler.model.AssignmentModel AssignmentModels} or its configuration objects.\n     *\n     * @config {Scheduler.model.AssignmentModel[]|AssignmentModelConfig[]} assignments\n     * @category Inline data\n     */\n    /**\n     * Get/set {@link #property-dependencyStore} data.\n     *\n     * Always returns an array of {@link Scheduler.model.DependencyModel DependencyModels} but also accepts an\n     * array of its configuration objects as input.\n     *\n     * @member {Scheduler.model.DependencyModel[]} dependencies\n     * @accepts {Scheduler.model.DependencyModel[]|DependencyModelConfig[]}\n     * @category Inline data\n     */\n    /**\n     * Data use to fill the {@link #property-dependencyStore}. Should be an array of\n     * {@link Scheduler.model.DependencyModel DependencyModels} or its configuration objects.\n     *\n     * @config {Scheduler.model.DependencyModel[]|DependencyModelConfig[]} dependencies\n     * @category Inline data\n     */\n    /**\n     * Get/set {@link #property-timeRangeStore} data.\n     *\n     * Always returns an array of {@link Scheduler.model.TimeRangeModel TimeRangeModels} but also accepts an\n     * array of its configuration objects as input.\n     *\n     * @member {Scheduler.model.TimeRangeModel[]} timeRanges\n     * @accepts {Scheduler.model.TimeRangeModel[]|TimeRangeModelConfig[]}\n     * @category Inline data\n     */\n    /**\n     * Data use to fill the {@link #property-timeRangeStore}. Should be an array of\n     * {@link Scheduler.model.TimeRangeModel TimeRangeModels} or its configuration objects.\n     *\n     * @config {Scheduler.model.TimeRangeModel[]|TimeRangeModelConfig[]} timeRanges\n     * @category Inline data\n     */\n    /**\n     * Get/set {@link #property-resourceTimeRangeStore} data.\n     *\n     * Always returns an array of {@link Scheduler.model.ResourceTimeRangeModel ResourceTimeRangeModels} but\n     * also accepts an array of its configuration objects as input.\n     *\n     * @member {Scheduler.model.ResourceTimeRangeModel[]} resourceTimeRanges\n     * @accepts {Scheduler.model.ResourceTimeRangeModel[]|ResourceTimeRangeModelConfig[]}\n     * @category Inline data\n     */\n    /**\n     * Data use to fill the {@link #property-resourceTimeRangeStore}. Should be an array\n     * of {@link Scheduler.model.ResourceTimeRangeModel ResourceTimeRangeModels} or its configuration objects.\n     *\n     * @config {Scheduler.model.ResourceTimeRangeModel[]|ResourceTimeRangeModelConfig[]} resourceTimeRanges\n     * @category Inline data\n     */\n    //endregion\n    //region Legacy inline data configs & properties\n    /**\n     * The initial data, to fill the {@link #property-eventStore} with.\n     * Should be an array of {@link Scheduler.model.EventModel EventModels} or its configuration objects.\n     *\n     * @config {Scheduler.model.EventModel[]|EventModelConfig[]} eventsData\n     * @category Legacy inline data\n     */\n    /**\n     * The initial data, to fill the {@link #property-dependencyStore} with.\n     * Should be an array of {@link Scheduler.model.DependencyModel DependencyModels} or its configuration\n     * objects.\n     *\n     * @config {Scheduler.model.DependencyModel[]|DependencyModelConfig[]} [dependenciesData]\n     * @category Legacy inline data\n     */\n    /**\n     * The initial data, to fill the {@link #property-resourceStore} with.\n     * Should be an array of {@link Scheduler.model.ResourceModel ResourceModels} or its configuration objects.\n     *\n     * @config {Scheduler.model.ResourceModel[]|ResourceModelConfig[]} [resourcesData]\n     * @category Legacy inline data\n     */\n    /**\n     * The initial data, to fill the {@link #property-assignmentStore} with.\n     * Should be an array of {@link Scheduler.model.AssignmentModel AssignmentModels} or its configuration\n     * objects.\n     *\n     * @config {Scheduler.model.AssignmentModel[]|AssignmentModelConfig[]} [assignmentsData]\n     * @category Legacy inline data\n     */\n    //endregion\n    //region Store configs & properties\n    /**\n     * The {@link Scheduler.data.EventStore store} holding the events information.\n     *\n     * See also {@link Scheduler.model.EventModel}\n     *\n     * @member {Scheduler.data.EventStore} eventStore\n     * @category Models & Stores\n     */\n    /**\n     * An {@link Scheduler.data.EventStore} instance or a config object.\n     * @config {Scheduler.data.EventStore|EventStoreConfig} eventStore\n     * @category Models & Stores\n     */\n    /**\n     * The {@link Scheduler.data.DependencyStore store} holding the dependencies information.\n     *\n     * See also {@link Scheduler.model.DependencyModel}\n     *\n     * @member {Scheduler.data.DependencyStore} dependencyStore\n     * @category Models & Stores\n     */\n    /**\n     * A {@link Scheduler.data.DependencyStore} instance or a config object.\n     * @config {Scheduler.data.DependencyStore|DependencyStoreConfig} dependencyStore\n     * @category Models & Stores\n     */\n    /**\n     * The {@link Scheduler.data.ResourceStore store} holding the resources that can be assigned to the events in the event store.\n     *\n     * See also {@link Scheduler.model.ResourceModel}\n     *\n     * @member {Scheduler.data.ResourceStore} resourceStore\n     * @category Models & Stores\n     */\n    /**\n     * A {@link Scheduler.data.ResourceStore} instance or a config object.\n     * @config {Scheduler.data.ResourceStore|ResourceStoreConfig} resourceStore\n     * @category Models & Stores\n     */\n    /**\n     * The {@link Scheduler.data.AssignmentStore store} holding the assignments information.\n     *\n     * See also {@link Scheduler.model.AssignmentModel}\n     *\n     * @member {Scheduler.data.AssignmentStore} assignmentStore\n     * @category Models & Stores\n     */\n    /**\n     * An {@link Scheduler.data.AssignmentStore} instance or a config object.\n     * @config {Scheduler.data.AssignmentStore|AssignmentStoreConfig} assignmentStore\n     * @category Models & Stores\n     */\n    //endregion\n    //region Configs\n    static get defaultConfig() {\n        return {\n            /**\n             * The constructor of the event model class, to be used in the project. Will be set as the\n             * {@link Core.data.Store#config-modelClass modelClass} property of the {@link #property-eventStore}\n             *\n             * @config {Scheduler.model.EventModel}\n             * @typings {typeof EventModel}\n             * @category Models & Stores\n             */\n            eventModelClass : EventModel,\n            /**\n             * The constructor of the dependency model class, to be used in the project. Will be set as the\n             * {@link Core.data.Store#config-modelClass modelClass} property of the {@link #property-dependencyStore}\n             *\n             * @config {Scheduler.model.DependencyModel}\n             * @typings {typeof DependencyModel}\n             * @category Models & Stores\n             */\n            dependencyModelClass : DependencyModel,\n            /**\n             * The constructor of the resource model class, to be used in the project. Will be set as the\n             * {@link Core.data.Store#config-modelClass modelClass} property of the {@link #property-resourceStore}\n             *\n             * @config {Scheduler.model.ResourceModel}\n             * @typings {typeof ResourceModel}\n             * @category Models & Stores\n             */\n            resourceModelClass : ResourceModel,\n            /**\n             * The constructor of the assignment model class, to be used in the project. Will be set as the\n             * {@link Core.data.Store#config-modelClass modelClass} property of the {@link #property-assignmentStore}\n             *\n             * @config {Scheduler.model.AssignmentModel}\n             * @typings {typeof AssignmentModel}\n             * @category Models & Stores\n             */\n            assignmentModelClass : AssignmentModel,\n            /**\n             * The constructor to create an event store instance with. Should be a class, subclassing the\n             * {@link Scheduler.data.EventStore}\n             * @config {Scheduler.data.EventStore|Object}\n             * @typings {typeof EventStore|object}\n             * @category Models & Stores\n             */\n            eventStoreClass : EventStore,\n            /**\n             * The constructor to create a dependency store instance with. Should be a class, subclassing the\n             * {@link Scheduler.data.DependencyStore}\n             * @config {Scheduler.data.DependencyStore|Object}\n             * @typings {typeof DependencyStore|object}\n             * @category Models & Stores\n             */\n            dependencyStoreClass : DependencyStore,\n            /**\n             * The constructor to create a resource store instance with. Should be a class, subclassing the\n             * {@link Scheduler.data.ResourceStore}\n             * @config {Scheduler.data.ResourceStore|Object}\n             * @typings {typeof ResourceStore|object}\n             * @category Models & Stores\n             */\n            resourceStoreClass : ResourceStore,\n            /**\n             * The constructor to create an assignment store instance with. Should be a class, subclassing the\n             * {@link Scheduler.data.AssignmentStore}\n             * @config {Scheduler.data.AssignmentStore|Object}\n             * @typings {typeof AssignmentStore|object}\n             * @category Models & Stores\n             */\n            assignmentStoreClass : AssignmentStore\n        };\n    }\n    //endregion\n    //region Events\n    /**\n     * Fired when the engine has finished its calculations and the results has been written back to the records.\n     *\n     * ```javascript\n     * scheduler.project.on({\n     *     dataReady() {\n     *        console.log('Calculations finished');\n     *     }\n     * });\n     *\n     * scheduler.eventStore.first.duration = 10;\n     *\n     * // At some point a bit later it will log 'Calculations finished'\n     * ```\n     *\n     * @event dataReady\n     * @param {Scheduler.model.ProjectModel} source The project\n     * @typings source -> {Scheduler.model.ProjectModel||any}\n     * @param {Boolean} isInitialCommit Flag that shows if this commit is initial\n     * @param {Set} records Set of all {@link Core.data.Model}s that were modified in the completed transaction.\n     * Use the {@link Core.data.Model#property-modifications} property of each Model to identify\n     * modified fields.\n     */\n    //endregion\n    /**\n     * Silences propagations caused by the project loading.\n     *\n     * Applying the loaded data to the project occurs in two basic stages:\n     *\n     * 1. Data gets into the engine graph which triggers changes propagation\n     * 2. The changes caused by the propagation get written to related stores\n     *\n     * Setting this flag to `true` makes the component perform step 2 silently without triggering events causing reactions on those changes\n     * (like sending changes back to the server if `autoSync` is enabled) and keeping stores in unmodified state.\n     *\n     * This is safe if the loaded data is consistent so propagation doesn't really do any adjustments.\n     * By default the system treats the data as consistent so this option is `true`.\n     *\n     * ```js\n     * new Scheduler({\n     *     project : {\n     *         // We want scheduling engine to recalculate the data properly\n     *         // so then we could save it back to the server\n     *         silenceInitialCommit : false\n     *     }\n     *     ...\n     * })\n     * ```\n     *\n     * @config {Boolean} silenceInitialCommit\n     * @default true\n     * @category Advanced\n     */\n    construct(...args) {\n        super.construct(...args);\n        if (VersionHelper.isTestEnv) {\n            globalThis.bryntum.testProject = this;\n        }\n        // Moved here from EventStore, since project is now the container instead of it\n        this.modelPersistencyManager = this.createModelPersistencyManager();\n    }\n    /**\n     * Creates and returns model persistency manager\n     *\n     * @returns {Scheduler.data.util.ModelPersistencyManager}\n     * @internal\n     */\n    createModelPersistencyManager() {\n        return new ModelPersistencyManager({\n            eventStore      : this,\n            resourceStore   : this.resourceStore,\n            assignmentStore : this.assignmentStore,\n            dependencyStore : this.dependencyStore\n        });\n    }\n    doDestroy() {\n        this.modelPersistencyManager.destroy();\n        super.doDestroy();\n    }\n    // To comply with TaskBoards expectations\n    get taskStore() {\n        return this.eventStore;\n    }\n}\nProjectModel.applyConfigs = true;\nProjectModel.initClass();\nProjectModel._$name = 'ProjectModel';", "import ResourceStore from './ResourceStore.js';\nimport EventStore from './EventStore.js';\nimport AssignmentStore from './AssignmentStore.js';\nimport DependencyStore from './DependencyStore.js';\nimport Store from '../../Core/data/Store.js';\nimport ProjectCrudManager from './mixin/ProjectCrudManager.js';\nimport AbstractCrudManager from '../crud/AbstractCrudManager.js';\nimport AjaxTransport from '../crud/transport/AjaxTransport.js';\nimport JsonEncoder from '../crud/encoder/JsonEncoder.js';\nimport ProjectModel from '../model/ProjectModel.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\n/**\n * @module Scheduler/data/CrudManager\n */\n/**\n * The Crud Manager (or \"CM\") is a class implementing centralized loading and saving of data in multiple stores.\n * Loading the stores and saving all changes is done using a single request. The stores managed by CRUD manager should\n * not be configured with their own CRUD URLs or use {@link Core/data/AjaxStore#config-autoLoad}/{@link Core/data/AjaxStore#config-autoCommit}.\n *\n * This class uses JSON as its data encoding format.\n *\n * ## Scheduler stores\n *\n * The class supports Scheduler specific stores (namely: resource, event, assignment and dependency stores).\n * For these stores, the CM has separate configs ({@link #config-resourceStore}, {@link #config-eventStore},\n * {@link #config-assignmentStore}) to register them.\n *\n * ```javascript\n * const crudManager = new CrudManager({\n *     autoLoad        : true,\n *     resourceStore   : resourceStore,\n *     eventStore      : eventStore,\n *     assignmentStore : assignmentStore,\n *     transport       : {\n *         load : {\n *             url : 'php/read.php'\n *         },\n *         sync : {\n *             url : 'php/save.php'\n *         }\n *     }\n * });\n * ```\n *\n * ## AJAX request configuration\n *\n * To configure AJAX request parameters please take a look at the\n * {@link Scheduler/crud/transport/AjaxTransport} docs.\n *\n * ```javascript\n * const crudManager = new CrudManager({\n *     autoLoad        : true,\n *     resourceStore,\n *     eventStore,\n *     assignmentStore,\n *     transport       : {\n *         load    : {\n *             url         : 'php/read.php',\n *             // use GET request\n *             method      : 'GET',\n *             // pass request JSON in \"rq\" parameter\n *             paramName   : 'rq',\n *             // extra HTTP request parameters\n *             params      : {\n *                 foo     : 'bar'\n *             },\n *             // pass some extra Fetch API option\n *             credentials : 'include'\n *         },\n *         sync : {\n *             url : 'php/save.php'\n *         }\n *     }\n * });\n * ```\n *\n * ## Using inline data\n *\n * The CrudManager provides settable property {@link #property-inlineData} that can\n * be used to get data from all {@link #property-crudStores} at once and to set this\n * data as well. Populating the stores this way can be useful if you cannot or you do not want to use CrudManager for\n * server requests but you pull the data by other means and have it ready outside CrudManager. Also, the data from all\n * stores is available in a single assignment statement.\n *\n * ### Getting data\n * ```javascript\n * const data = scheduler.crudManager.inlineData;\n *\n * // use the data in your application\n * ```\n *\n * ### Setting data\n * ```javascript\n * const data = // your function to pull server data\n *\n * scheduler.crudManager.inlineData = data;\n * ```\n *\n * ## Load order\n *\n * The CM is aware of the proper load order for Scheduler specific stores so you don't need to worry about it.\n * If you provide any extra stores (using {@link #config-stores} config) they will be\n * added to the start of collection before the Scheduler specific stores.\n * If you need a different loading order, you should use {@link #function-addStore} method to\n * register your store:\n *\n * ```javascript\n * const crudManager = new CrudManager({\n *     resourceStore   : resourceStore,\n *     eventStore      : eventStore,\n *     assignmentStore : assignmentStore,\n *     // extra user defined stores will get to the start of collection\n *     // so they will be loaded first\n *     stores          : [ store1, store2 ],\n *     transport       : {\n *         load : {\n *             url : 'php/read.php'\n *         },\n *         sync : {\n *             url : 'php/save.php'\n *         }\n *     }\n * });\n *\n * // append store3 to the end so it will be loaded last\n * crudManager.addStore(store3);\n *\n * // now when we registered all the stores let's load them\n * crudManager.load();\n * ```\n *\n * ## Assignment store\n *\n * The Crud Manager is designed to use {@link Scheduler/data/AssignmentStore} for assigning events to one or multiple resources.\n * However if server provides `resourceId` for any of the `events` then the Crud Manager enables backward compatible mode when\n * an event could have a single assignment only. This also disables multiple assignments in Scheduler UI.\n * In order to use multiple assignments server backend should be able to receive/send `assignments` for `load` and `sync` requests.\n *\n * ## Project\n *\n * The Crud Manager automatically consumes stores of the provided project (namely its {@link Scheduler/model/ProjectModel#property-eventStore},\n * {@link Scheduler/model/ProjectModel#property-resourceStore}, {@link Scheduler/model/ProjectModel#property-assignmentStore},\n * {@link Scheduler/model/ProjectModel#property-dependencyStore}, {@link Scheduler/model/ProjectModel#property-timeRangeStore} and\n * {@link Scheduler/model/ProjectModel#property-resourceTimeRangeStore}):\n *\n * ```javascript\n * const crudManager = new CrudManager({\n *     // crud manager will get stores from myAppProject project\n *     project   : myAppProject,\n *     transport : {\n *         load : {\n *             url : 'php/read.php'\n *         },\n *         sync : {\n *             url : 'php/save.php'\n *         }\n *     }\n * });\n * ```\n *\n * @mixes Scheduler/data/mixin/ProjectCrudManager\n * @mixes Scheduler/crud/encoder/JsonEncoder\n * @mixes Scheduler/crud/transport/AjaxTransport\n * @extends Scheduler/crud/AbstractCrudManager\n */\nexport default class CrudManager extends AbstractCrudManager.mixin(ProjectCrudManager, AjaxTransport, JsonEncoder) {\n    static $name = 'CrudManager';\n    //region Config\n    static get defaultConfig() {\n        return {\n            projectClass         : ProjectModel,\n            resourceStoreClass   : ResourceStore,\n            eventStoreClass      : EventStore,\n            assignmentStoreClass : AssignmentStore,\n            dependencyStoreClass : DependencyStore,\n            /**\n             * A store with resources (or a config object).\n             * @config {Scheduler.data.ResourceStore|ResourceStoreConfig}\n             */\n            resourceStore : {},\n            /**\n             * A store with events (or a config object).\n             *\n             * ```\n             * crudManager : {\n             *      eventStore {\n             *          storeClass : MyEventStore\n             *      }\n             * }\n             * ```\n             * @config {Scheduler.data.EventStore|EventStoreConfig}\n             */\n            eventStore : {},\n            /**\n             * A store with assignments (or a config object).\n             * @config {Scheduler.data.AssignmentStore|AssignmentStoreConfig}\n             */\n            assignmentStore : {},\n            /**\n             * A store with dependencies(or a config object).\n             * @config {Scheduler.data.DependencyStore|DependencyStoreConfig}\n             */\n            dependencyStore : {},\n            /**\n             * A project that holds and links stores\n             * @config {Scheduler.model.ProjectModel}\n             */\n            project : null\n        };\n    }\n    //endregion\n    buildProject() {\n        return new this.projectClass(this.buildProjectConfig());\n    }\n    buildProjectConfig() {\n        return ObjectHelper.cleanupProperties({\n            eventStore             : this.eventStore,\n            resourceStore          : this.resourceStore,\n            assignmentStore        : this.assignmentStore,\n            dependencyStore        : this.dependencyStore,\n            resourceTimeRangeStore : this.resourceTimeRangeStore\n        });\n    }\n    //region Stores\n    set project(project) {\n        const me = this;\n        if (project !== me._project) {\n            me.detachListeners('beforeDataReady');\n            me.detachListeners('afterDataReady');\n            me._project = project;\n            if (project) {\n                me.eventStore             = project.eventStore;\n                me.resourceStore          = project.resourceStore;\n                me.assignmentStore        = project.assignmentStore;\n                me.dependencyStore        = project.dependencyStore;\n                me.timeRangeStore         = project.timeRangeStore;\n                me.resourceTimeRangeStore = project.resourceTimeRangeStore;\n                // When adding multiple events to the store it will trigger multiple change events each of which will\n                // call crudManager.hasChanges, which will try to actually get the changeset package. It takes some time\n                // and we better skip that part for the dataready event, suspending changes tracking.\n                project.ion({\n                    name      : 'beforeDataReady',\n                    dataReady : () => me.suspendChangeTracking(),\n                    prio      : 100,\n                    thisObj   : me\n                });\n                project.ion({\n                    name      : 'afterDataReady',\n                    dataReady : () => me.resumeChangeTracking(),\n                    prio      : -100,\n                    thisObj   : me\n                });\n            }\n            if (!me.eventStore) {\n                me.eventStore = {};\n            }\n            if (!me.resourceStore) {\n                me.resourceStore = {};\n            }\n            if (!me.assignmentStore) {\n                me.assignmentStore = {};\n            }\n            if (!me.dependencyStore) {\n                me.dependencyStore = {};\n            }\n        }\n    }\n    get project() {\n        return this._project;\n    }\n    /**\n     * Store for {@link Scheduler/feature/TimeRanges timeRanges} feature.\n     * @property {Core.data.Store}\n     */\n    get timeRangeStore() {\n        return this._timeRangeStore?.store;\n    }\n    set timeRangeStore(store) {\n        this.setFeaturedStore('_timeRangeStore', store, this.project?.timeRangeStoreClass);\n    }\n    /**\n     * Store for {@link Scheduler/feature/ResourceTimeRanges resourceTimeRanges} feature.\n     * @property {Core.data.Store}\n     */\n    get resourceTimeRangeStore() {\n        return this._resourceTimeRangeStore?.store;\n    }\n    set resourceTimeRangeStore(store) {\n        this.setFeaturedStore('_resourceTimeRangeStore', store, this.project?.resourceTimeRangeStoreClass);\n    }\n    /**\n     * Get/set the resource store bound to the CRUD manager.\n     * @property {Scheduler.data.ResourceStore}\n     */\n    get resourceStore() {\n        return this._resourceStore?.store;\n    }\n    set resourceStore(store) {\n        const me = this;\n        me.setFeaturedStore('_resourceStore', store, me.resourceStoreClass);\n    }\n    /**\n     * Get/set the event store bound to the CRUD manager.\n     * @property {Scheduler.data.EventStore}\n     */\n    get eventStore() {\n        return this._eventStore?.store;\n    }\n    set eventStore(store) {\n        const me = this;\n        me.setFeaturedStore('_eventStore', store, me.eventStoreClass);\n    }\n    /**\n     * Get/set the assignment store bound to the CRUD manager.\n     * @property {Scheduler.data.AssignmentStore}\n     */\n    get assignmentStore() {\n        return this._assignmentStore?.store;\n    }\n    set assignmentStore(store) {\n        this.setFeaturedStore('_assignmentStore', store, this.assignmentStoreClass);\n    }\n    /**\n     * Get/set the dependency store bound to the CRUD manager.\n     * @property {Scheduler.data.DependencyStore}\n     */\n    get dependencyStore() {\n        return this._dependencyStore?.store;\n    }\n    set dependencyStore(store) {\n        this.setFeaturedStore('_dependencyStore', store, this.dependencyStoreClass);\n    }\n    setFeaturedStore(property, store, storeClass) {\n        const\n            me       = this,\n            oldStore = me[property]?.store;\n        // if not the same store\n        if (oldStore !== store) {\n            // normalize store value (turn it into a storeClass instance if needed)\n            store = Store.getStore(store, store?.storeClass || storeClass);\n            if (oldStore) {\n                me.removeStore(oldStore);\n            }\n            me[property] = store && { store } || null;\n            // Adds configured scheduler stores to the store collection ensuring correct order\n            // unless they're already registered.\n            me.addPrioritizedStore(me[property]);\n        }\n        return me[property];\n    }\n    getChangesetPackage() {\n        const pack = super.getChangesetPackage();\n        // Remove assignments from changes if using single assignment mode (resourceId) or resourceIds\n        if (pack && (this.eventStore.usesSingleAssignment || this.eventStore.modelClass.fieldMap?.resourceIds?.persist)) {\n            delete pack[this.assignmentStore.storeId];\n            // No other changes?\n            if (!this.crudStores.some(storeInfo => pack[storeInfo.storeId])) {\n                return null;\n            }\n        }\n        return pack;\n    }\n    //endregion\n    get crudLoadValidationMandatoryStores() {\n        return [this._eventStore.storeId, this._resourceStore.storeId];\n    }\n};\nCrudManager._$name = 'CrudManager';", "/**\n * @module Scheduler/crud/mixin/CrudManagerView\n */\nimport LoadMaskable from '../../../Core/mixin/LoadMaskable.js';\nimport Mask from '../../../Core/widget/Mask.js';\n/**\n * Mixin to track Crud Manager requests to the server and mask the view during them. For masking, it\n * uses the {@link Core.mixin.LoadMaskable#config-loadMask} and {@link Core.mixin.LoadMaskable#config-syncMask}\n * properties.\n *\n * @mixin\n * @extends Core/mixin/LoadMaskable\n */\nexport default Target => class CrudManagerView extends Target.mixin(LoadMaskable) {\n    static get $name() {\n        return 'CrudManagerView';\n    }\n    static config = {\n        clearMaskDelay : null,\n        // Test environment may be in a poll wait for mask to disappear.\n        // Hiding the mask immediately, before the load sequence ends releases it too early\n        testConfig : {\n            clearMaskDelay : 0\n        }\n    };\n    //region Init\n    afterConstruct() {\n        super.afterConstruct();\n        const { crudManager, project } = this;\n        if (this.loadMask && (crudManager || project).isCrudManagerLoading) {\n            // Show loadMask if crud manager is already loading\n            this.onCrudManagerLoadStart();\n        }\n    }\n    //endregion\n    /**\n     * Applies the {@link Scheduler.crud.mixin.CrudManagerView#config-syncMask} as the\n     * {@link Core.widget.Widget#config-masked mask} for this widget.\n     * @internal\n     */\n    applySyncMask() {\n        const { syncMask } = this;\n        if (syncMask) {\n            this.masked = Mask.mergeConfigs(this.loadMaskDefaults, syncMask);\n        }\n    }\n    /**\n     * Hooks up crud manager listeners\n     * @private\n     * @category Store\n     */\n    bindCrudManager(crudManager) {\n        this.detachListeners('crudManager');\n        let additionalListeners = {};\n        // TaskBoard does not need suspending/resuming refreshes\n        if (!this.isTaskBoardBase) {\n            additionalListeners = {\n                beforeApplyResponse       : 'onCrudManagerBeforeApplyResponse',\n                applyResponse             : 'onCrudManagerApplyResponse',\n                beforeLoadCrudManagerData : 'onCrudManagerBeforeLoadCrudManagerData',\n                loadCrudManagerData       : 'onCrudManagerLoadCrudManagerData'\n            };\n        }\n        crudManager?.ion({\n            name             : 'crudManager',\n            loadStart        : 'onCrudManagerLoadStart',\n            beforeSend       : 'onCrudManagerBeforeSend',\n            load             : 'onCrudManagerLoad',\n            loadCanceled     : 'onCrudManagerLoadCanceled',\n            syncStart        : 'onCrudManagerSyncStart',\n            sync             : 'onCrudManagerSync',\n            syncCanceled     : 'onCrudManagerSyncCanceled',\n            requestFail      : 'onCrudManagerRequestFail',\n            responseReceived : 'onAjaxTransportResponseReceived',\n            ...additionalListeners,\n            thisObj          : this\n        });\n    }\n    onCrudManagerBeforeSend({ params }) {\n        this.applyStartEndParameters?.(params);\n    }\n    onCrudManagerLoadStart() {\n        // Show loadMask before crud manager starts loading\n        this.applyLoadMask();\n        this.toggleEmptyText?.();\n    }\n    onCrudManagerSyncStart() {\n        this.applySyncMask();\n    }\n    onCrudManagerBeforeApplyResponse() {\n        // Prevent redrawing for each applied change, instead do it once after all changes are applied\n        this.suspendRefresh();\n    }\n    onCrudManagerApplyResponse() {\n        // Repaint rows once after applying changes\n        this.resumeRefresh(true);\n    }\n    onCrudManagerBeforeLoadCrudManagerData() {\n        // Suspend when app calls loadCrudManagerData() directly\n        if (!this.crudManager.applyingLoadResponse) {\n            this.suspendRefresh();\n        }\n    }\n    async onCrudManagerLoadCrudManagerData() {\n        if (!this.crudManager.applyingLoadResponse) {\n            await this.project.commitAsync();\n            !this.isDestroyed && this.resumeRefresh(true);\n        }\n    }\n    onCrudManagerRequestFinalize(successful = true, requestType, response) {\n        const me = this;\n        if (successful) {\n            me.toggleEmptyText?.();\n        }\n        else {\n            if (!me.masked) {\n                me.applyLoadMask();\n            }\n            me.applyMaskError(\n                `<div class=\"b-grid-load-failure\">\n                    <div class=\"b-grid-load-fail\">${me.L(`L{GridBase.${requestType}FailedMessage}`)}</div>\n                    ${response && response.message ? `<div class=\"b-grid-load-fail\">${me.L('L{CrudManagerView.serverResponseLabel}')} ${response.message}</div>` : ''}\n                </div>`);\n        }\n    }\n    onCrudManagerLoadCanceled() {\n        this.onCrudManagerRequestFinalize(true, 'load');\n    }\n    onCrudManagerSyncCanceled() {\n        this.onCrudManagerRequestFinalize(true, 'sync');\n    }\n    onCrudManagerLoad() {\n        this.onCrudManagerRequestFinalize(true, 'load');\n    }\n    onCrudManagerSync() {\n        this.onCrudManagerRequestFinalize(true, 'sync');\n    }\n    onCrudManagerRequestFail({ requestType, response }) {\n        this.onCrudManagerRequestFinalize(false, requestType, response);\n    }\n    onAjaxTransportResponseReceived() {\n        const me = this;\n        if (me.clearMaskDelay != null) {\n            me.setTimeout(() => me.masked = null, me.clearMaskDelay);\n        }\n        else {\n            me.masked = null;\n        }\n    }\n    get widgetClass() {}\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,IAAM,sBAAsB;AAAA,EACxB,WAAiB;AAAA,EACjB,SAAiB;AAAA,EACjB,gBAAiB;AAAA,EACjB,cAAiB;AACrB;AAKA,IAAO,8BAAQ,YAAO;AAftB;AAeyB,4BAAkC,OAAO;AAAA,IAyB9D,IAAI,WAAW;AACX,aAAO,KAAK,QAAQ,UAAU;AAAA,IAClC;AAAA,IACA,IAAI,SAAS,UAAU;AACnB,WAAK,QAAQ,YAAY,QAAQ;AAAA,IACrC;AAAA,IACA,aAAa,OAAO,MAAM;AACtB,YAAM,KAAK;AACX,SAAG,IAAI,OAAO,GAAG,YAAY,OAAO,eAAe,WAAW,MAAM,GAAG,QAAQ,IAAI,MAAM,IAAI;AAE7F,SAAG,QAAQ,OAAO,GAAG,KAAK,CAAC;AAAA,IAC/B;AAAA,IACA,aAAa,OAAO;AAChB,UAAI,KAAK,YAAY,QAAQ,KAAK,KAAK,GAAG;AACtC,eAAO,eAAe,aAAa,KAAK,KAAK,GAAG,KAAK,QAAQ;AAAA,MACjE;AACA,aAAO,KAAK,KAAK;AAAA,IACrB;AAAA,IACA,eAAe,YAAY;AAEvB,UAAI,KAAK,YAAY,MAAM;AACvB,mBAAW,SAAS,qBAAqB;AACrC,cAAI,WAAW,KAAK,GAAG;AACnB,iBAAK,aAAa,OAAO,IAAI,KAAK,WAAW,KAAK,CAAC,CAAC;AACpD,mBAAO,WAAW,KAAK;AAAA,UAC3B;AAAA,QACJ;AAAA,MACJ;AACA,aAAO,MAAM,eAAe,GAAG,SAAS;AAAA,IAC5C;AAAA,IACA,wBAAwB,OAAO;AAtEnC,UAAAA,KAAA;AAuEQ,UAAI,KAAK,YAAY,MAAM;AACvB,cAAM,aAAY,MAAAA,MAAA,+BAAO,UAAP,OAAAA,MAAgB,+BAAO,SAAvB,YAA+B;AAEjD,YAAI,oBAAoB,SAAS,GAAG;AAChC,iBAAO,KAAK,aAAa,SAAS;AAAA,QACtC;AAAA,MACJ;AACA,aAAO,MAAM,wBAAwB,KAAK;AAAA,IAC9C;AAAA;AAAA,IAEA,kBAAkB,UAAU;AACxB,YACI,KAAgB,MAChB,eAAgB,EAAE,GAAG,GAAG,KAAK,SAAS,GACtC,gBAAgB,EAAE,GAAG,oBAAoB;AAE7C,UAAI,GAAG,UAAU,CAAC,GAAG,mBAAmB;AACpC,eAAO,cAAc;AACrB,eAAO,cAAc;AAAA,MACzB;AAEA,iBAAW,SAAS,eAAe;AAE/B,YAAI,GAAG,KAAK,KAAK,MAAM;AACnB,wBAAc,KAAK,IAAI,GAAG,KAAK;AAE/B,cAAI,GAAG,YAAY,MAAM;AACrB,0BAAc,KAAK,IAAI,GAAG,aAAa,KAAK;AAE5C,gBAAI,aAAa,KAAK,GAAG;AACrB,2BAAa,KAAK,IAAI,eAAe,aAAa,aAAa,KAAK,GAAG,GAAG,QAAQ;AAAA,YACtF;AAAA,UACJ;AAAA,QACJ,OACK;AACD,iBAAO,cAAc,KAAK;AAAA,QAC9B;AAAA,MACJ;AAEA,SAAG,WAAW;AAEd,iBAAW,SAAS,eAAe;AAE/B,WAAG,aAAa,OAAO,cAAc,KAAK,GAAG,KAAK;AAClD,sBAAc,KAAK,IAAI;AAEvB,YAAI,GAAG,YAAY,QAAQ,aAAa,KAAK,GAAG;AAC5C,uBAAa,KAAK,IAAI,eAAe,WAAW,aAAa,KAAK,GAAG,GAAG,QAAQ;AAAA,QACpF;AAAA,MACJ;AAEA,SAAG,aAAa,MAAM,MAAM,aAAa;AAEzC,UAAI,CAAC,aAAa,QAAQ,YAAY,GAAG;AACrC,WAAG,KAAK,WAAW;AACnB,WAAG,OAAO,QAAQ,WAAS,MAAM,SAAS,IAAI,EAAE,CAAC;AAAA,MACrD;AAAA,IACJ;AAAA,EACJ,GAjHI,cADqB,IACd,SAAQ,wBACf,cAFqB,IAEd,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAkBb;AAAA,MACI,MAAU;AAAA,MACV,SAAU;AAAA,IACd;AAAA,EACJ,IAxBqB;AAAA;;;ACyBzB,IAAqB,WAArB,cAAsC,MAAM,MAAM,2BAAmB,EAAE;AAAA;AAAA;AAAA,EA8InE,UAAU,SAAS,MAAM;AACrB,UAAM,KAAK;AAEX,QAAI,6BAAM,cAAc;AACpB,YAAM,EAAE,WAAW,KAAK,IAAI,KAAK;AACjC,WAAK,WAAW;AAChB,WAAK,OAAO;AACZ,aAAO,KAAK;AAAA,IAChB;AACA,UAAM,UAAU,MAAM,GAAG,IAAI;AAC7B,OAAG,UAAU;AACb,QAAI,GAAG,eAAe,GAAG,aAAa,GAAG,cAAc,GAAG,WAAW;AACjE,cAAQ,MAAM,2BAA2B,GAAG,YAAY,KAAK,oBAAoB,GAAG,EAAE,EAAE;AAAA,IAC5F;AAAA,EACJ;AAAA;AAAA;AAAA,EAGA,2BAA2B,SAAS,UAAU,cAAc;AACxD,WAAO,WAAG,IAAI,SAAS,CAAC,UAAU,YAAY;AAAA,EAClD;AAAA,EACA,yBAAyB,WAAW,UAAU,cAAc;AAExD,WAAO,WAAG,IAAI,WAAW,UAAU,YAAY;AAAA,EACnD;AAAA,EACA,0BAA0B,WAAW,SAAS,cAAc;AACxD,WAAO,WAAG,GAAG,cAAc,WAAG,KAAK,WAAW,SAAS,GAAG,GAAG,GAAG;AAAA,EACpE;AAAA;AAAA,EAEA,kBAAkB,WAAW,SAAS,UAAU,cAAc;AAC1D,UACI,KAAc,MACd,cAAc,YAAY;AAE9B,QAAI,aAAa,WAAW,CAAC,aAAa;AACtC,SAAG,QAAQ,YAAY,GAAG,0BAA0B,WAAW,SAAS,YAAY,CAAC;AAAA,IACzF,WAES,aAAa,CAAC,WAAW,aAAa;AAC3C,SAAG,QAAQ,WAAW,GAAG,yBAAyB,WAAW,UAAU,YAAY,CAAC;AAAA,IACxF,WAES,CAAC,aAAa,WAAW,aAAa;AAC3C,SAAG,QAAQ,aAAa,GAAG,2BAA2B,SAAS,UAAU,YAAY,CAAC;AAAA,IAC1F;AAAA,EACJ;AAAA,EACA,YAAY;AACR,SAAK;AAAA,MACD,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK,gBAAgB,KAAK,YAAY,cAAc;AAAA;AAAA,IACxD;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,IAAI,aAAa;AArPrB;AAsPQ,UAAM,KAAK;AAEX,QAAI,GAAG,cAAc;AACjB,aAAO,GAAG,kBAAkB;AAAA,IAChC;AACA,QAAI,CAAC,GAAG,aAAa;AACjB,SAAG,eAAc,QAAG,WAAH,mBAAW,KAAK,OAAK,EAAE;AAAA,IAC5C;AACA,WAAO,GAAG;AAAA,EACd;AAAA,EACA,kBAAkB,KAAK;AACnB,QAAI,KAAK,MAAM;AACX,WAAK,KAAK,QAAQ;AAAA,IACtB,OACK;AACD,WAAK,OAAO,IAAI,aAAa,GAAG;AAAA,IACpC;AAAA,EACJ;AAAA,EACA,IAAI,YAAY,KAAK;AACjB,SAAK,kBAAkB,GAAG;AAC1B,SAAK,IAAI,OAAO,KAAK,KAAK,KAAK;AAAA,EACnC;AAAA,EACA,IAAI,cAAc;AACd,UAAM,EAAE,IAAI,IAAI;AAEhB,QAAI,2BAAK,gBAAgB;AACrB,aAAO;AAAA,IACX;AACA,SAAK,kBAAkB,GAAG;AAC1B,SAAK,QAAQ,OAAO,KAAK,KAAK,KAAK;AACnC,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,MAAM;AACN,QAAI,CAAC,KAAK,MAAM;AACZ,WAAK,OAAO,IAAI,aAAa,MAAM,IAAI,KAAK,CAAC;AAAA,IACjD;AACA,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,IAAI,KAAK;AACT,SAAK,cAAc;AAAA,EACvB;AAAA,EACA,IAAI,YAAY;AACZ,WAAO,KAAK,IAAI,WAAW;AAAA,EAC/B;AAAA,EACA,IAAI,UAAU,MAAM;AAChB,SAAK,aAAa,IAAI;AAAA,EAC1B;AAAA,EACA,IAAI,UAAU;AACV,WAAO,KAAK,IAAI,SAAS;AAAA,EAC7B;AAAA,EACA,IAAI,QAAQ,MAAM;AACd,SAAK,WAAW,IAAI;AAAA,EACxB;AAAA,EACA,IAAI,aAAa;AACb,UACI,KAAK,MACL;AAAA,MACI;AAAA,MACA;AAAA,IACJ,IAAK;AACT,QAAI,SAAS;AAQT,aAAO;AAAA,IACX;AACA,WAAO,WAAG,IAAI,WAAW,GAAG,UAAU,GAAG,YAAY;AAAA,EACzD;AAAA,EACA,IAAI,WAAW;AACX,WAAO,KAAK,IAAI,UAAU;AAAA,EAC9B;AAAA,EACA,IAAI,SAAS,UAAU;AACnB,SAAK,YAAY,UAAU,KAAK,YAAY;AAAA,EAChD;AAAA,EACA,IAAI,eAAe;AACf,WAAO,KAAK,IAAI,cAAc;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,YAAY,UAAU,eAAe,KAAK,cAAc;AAEpD,eAAW,WAAW,QAAQ;AAC9B,SAAK,IAAI;AAAA,MACL;AAAA,MACA;AAAA,MACA,GAAG,KAAK,wBAAwB,UAAU,YAAY;AAAA,IAC1D,CAAC;AAAA,EACL;AAAA,EACA,wBAAwB,WAAW,MAAM,YAAY,KAAK,WAAW,UAAU,KAAK,SAAS;AACzF,UAAM,SAAS,CAAC;AAChB,QAAI,WAAW;AACX,aAAO,UAAU,KAAK,yBAAyB,WAAW,WAAW,IAAI;AAAA,IAC7E,WACS,SAAS;AACd,aAAO,YAAY,KAAK,2BAA2B,SAAS,WAAW,IAAI;AAAA,IAC/E;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,kBAAkB,MAAM,YAAY;AAChC,UAAM,KAAK;AACX,QAAI,GAAG,aAAa,GAAG,SAAS;AAC5B,aAAO,WAAG,kBAAkB,GAAG,WAAW,GAAG,SAAS,MAAM,UAAU;AAAA,IAC1E,OACK;AACD,aAAO,WAAG,GAAG,MAAM,GAAG,UAAU,GAAG,YAAY;AAAA,IACnD;AAAA,EACJ;AAAA,EACA,IAAI,eAAe;AAEf,WAAO,IAAI,SAAS;AAAA,MAChB,MAAY,KAAK;AAAA,MACjB,WAAY,KAAK;AAAA,IACrB,CAAC;AAAA,EACL;AAAA,EACA,IAAI,aAAa,UAAU;AACvB,QAAI,OAAO,aAAa,UAAU;AAC9B,iBAAW,WAAG,cAAc,UAAU,MAAM,KAAK,YAAY;AAAA,IACjE;AACA,SAAK,YAAY,SAAS,WAAW,SAAS,IAAI;AAAA,EACtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,aAAa,MAAM,eAAe,MAAM;AACpC,UACI,KAAQ,MACR,QAAQ;AAAA,MACJ,WAAY;AAAA,IAChB;AACJ,QAAI,MAAM;AACN,UAAI;AACJ,UAAI,cAAc;AACd,sBAAc,GAAG,YAAY;AAAA,MACjC,OACK;AACD,YAAI,GAAG,SAAS;AACZ,gBAAM,WAAW,GAAG,0BAA0B,MAAM,GAAG,SAAS,GAAG,YAAY;AAC/E,cAAI,MAAM,WAAW,GAAG;AACpB,kBAAM,IAAI,MAAM,mBAAmB;AAAA,UACvC;AAAA,QACJ,OACK;AACD,wBAAc,GAAG,YAAY;AAAA,QACjC;AAAA,MACJ;AACA,UAAI,aAAa;AACb,cAAM,UAAU,GAAG,yBAAyB,MAAM,GAAG,UAAU,GAAG,YAAY;AAAA,MAClF;AAAA,IACJ,OACK;AACD,YAAM,WAAW;AAAA,IACrB;AACA,OAAG,IAAI,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,WAAW,MAAM,eAAe,OAAO;AACnC,UACI,KAAQ,MACR,QAAQ;AAAA,MACJ,SAAU;AAAA,IACd;AACJ,QAAI,MAAM;AACN,UAAI;AACJ,UAAI,iBAAiB,MAAM;AACvB,wBAAgB,GAAG,YAAY;AAAA,MACnC,OACK;AACD,YAAI,GAAG,WAAW;AACd,gBAAM,WAAW,GAAG,0BAA0B,GAAG,WAAW,MAAM,GAAG,YAAY;AACjF,cAAI,MAAM,WAAW;AAAG,kBAAM,IAAI,MAAM,mBAAmB;AAAA,QAC/D,OACK;AACD,0BAAgB,KAAK,YAAY;AAAA,QACrC;AAAA,MACJ;AACA,UAAI,eAAe;AACf,cAAM,YAAY,GAAG,2BAA2B,MAAM,GAAG,UAAU,GAAG,YAAY;AAAA,MACtF;AAAA,IACJ;AACA,OAAG,IAAI,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,gBAAgB,OAAO,KAAK,QAAQ;AAChC,QAAI,QAAQ,KAAK;AACb,YAAM,IAAI,MAAM,8CAA8C;AAAA,IAClE;AACA,SAAK,IAAI;AAAA,MACL,WAAY;AAAA,MACZ,SAAY;AAAA,IAChB,GAAG,MAAM,MAAM;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,QAAQ;AACR,UACI,QAAY,CAAC,GACb,YAAY,WAAG,QAAQ,KAAK,WAAW,KAAK,GAC5C,UAAY,KAAK;AACrB,aAAS,OAAO,WAAW,OAAO,SAAS,OAAO,WAAG,IAAI,MAAM,GAAG,KAAK,GAAG;AACtE,YAAM,KAAK,IAAI;AAAA,IACnB;AACA,WAAO;AAAA,EACX;AAAA,EACA,IAAI,cAAc;AAzetB;AA0eQ,YAAQ,UAAK,YAAY,KAAK,iBAAiB,WAAW,IAAI,KAAK,IAAI,WAAW,IAAI,KAAK,cAAnF,mBAA+F;AAAA,EAC3G;AAAA,EACA,IAAI,YAAY;AA5epB;AA6eQ,YAAQ,UAAK,YAAY,KAAK,iBAAiB,SAAS,IAAI,KAAK,IAAI,SAAS,IAAI,KAAK,YAA/E,mBAAyF;AAAA,EACrG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,aAAa;AACb,UAAM,EAAE,WAAW,YAAY,IAAI;AACnC,QAAI,aAAa,aAAa;AAC1B,aAAO,YAAY;AAAA,IACvB;AACA,WAAO,WAAG,eAAe,KAAK,YAAY,GAAG,KAAK,YAAY;AAAA,EAClE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,cAAc;AACd,WAAO,KAAK,aAAa;AAAA,EAC7B;AAAA,EACA,eAAe,OAAO;AAClB,QAAI,OAAO,UAAU,UAAU;AAG3B,UAAI,EAAE,WAAW,SAAS,UAAU,eAAe,KAAK,aAAa,IAAI;AAEzE,UAAI,OAAO,cAAc,UAAU;AAC/B,oBAAY,KAAK,mBAAmB,WAAW,EAAE,QAAQ,SAAS;AAAA,MACtE;AACA,UAAI,OAAO,YAAY,UAAU;AAC7B,kBAAU,KAAK,mBAAmB,SAAS,EAAE,QAAQ,OAAO;AAAA,MAChE;AACA,UAAI,cAAc,OAAO;AACrB,YAAI,aAAa,CAAC,SAAS;AACvB,oBAAU,KAAK,yBAAyB,WAAW,UAAU,YAAY;AAAA,QAC7E;AACA,YAAI,CAAC,aAAa,SAAS;AACvB,sBAAY,KAAK,2BAA2B,SAAS,UAAU,YAAY;AAAA,QAC/E;AAAA,MACJ,WACS,aAAa,SAAS;AAE3B,mBAAW,KAAK,0BAA0B,WAAW,SAAS,YAAY;AAAA,MAC9E;AAEA,YAAM,eAAe,OAAO,SAAS,KAAK,IAAI,aAAa,MAAM,KAAK,IAAI;AAC1E,oBAAc,aAAa,YAAY;AACvC,kBAAY,aAAa,UAAU;AACnC,kBAAY,SAAS,aAAa,WAAW;AAC7C,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EACA,YAAY,OAAO,OAAO;AAriB9B;AAsiBQ,UAAM,SAAS,MAAM,YAAY,OAAO,KAAK;AAE7C,QAAI,OAAO,cAAc;AACrB,YAAM,EAAE,WAAW,KAAK,IAAI,OAAO;AACnC,aAAO,WAAe;AACtB,aAAO,eAAe;AAAA,IAC1B;AAEA,QAAI,CAAC,KAAK,gBAAgB,CAAC,KAAK,aAAa;AAEzC,WAAK,cAAc,UAAU,OAAO,iBAAiB,EAAE,OAAO,aAAa,OAAO,UAAU;AACxF,eAAO;AAAA,UACH;AAAA,UACA,KAAK;AAAA,aACD,YAAO,aAAP,YAAmB,KAAK;AAAA,aACxB,YAAO,iBAAP,YAAuB,KAAK;AAAA,YAC5B,OAAO;AAAA,YACP,OAAO;AAAA,UACX;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,MAAM,OAAO,OAAO,QAAQ,oBAAoB,eAAe,WAAW,qBAAqB;AA9jBnG;AA+jBQ,UAAM,KAAK;AACX,QAAI,CAAC,eAAe;AAChB,cAAQ,GAAG,eAAe,KAAK,KAAK;AAAA,IACxC;AACA,UAAM,SAAS,MAAM,MAAM,OAAO,OAAO,QAAQ,oBAAoB,eAAe,WAAW,mBAAmB;AAClH,QAAI,GAAC,QAAG,YAAH,mBAAY,kBAAiB,MAAM,aAAa,MAAM,SAAS;AAChE,UAAI;AACJ,UAAI,MAAM,qBAAqB,QAAQ,MAAM,mBAAmB,MAAM;AAClE,kBAAU,MAAM,YAAY,MAAM;AAAA,MACtC,WACS,GAAG,SAAS,UAAU,QAAQ,MAAM,SAAS,IAAI,GAAG,SAAS,QAAQ,QAAQ,MAAM,OAAO,GAAI;AACnG,kBAAU;AAAA,MACd;AACA,UAAI,SAAS;AACT,gBAAQ,MAAM,2BAA2B,GAAG,YAAY,KAAK,oBAAoB,GAAG,EAAE,EAAE;AAAA,MAC5F;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA,EAEA,WAAW,SAAS,KAAK,OAAO,eAAe,OAAO;AAClD,QAAI,QAAQ,OAAO;AACf,WAAK,kBAAkB,KAAK;AAAA,IAChC;AACA,UAAM,WAAW,SAAS,KAAK,OAAO,eAAe,KAAK;AAAA,EAC9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,YAAY,MAAM,SAAS;AACvB,WAAO,KAAK,MAAM,QAAQ,KAAK,KAAK,OAAO,CAAC;AAAA,EAChD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,cAAc;AACd,UAAM,EAAE,aAAa,UAAU,IAAI;AACnC,WAAO,YAAY,eAAe;AAAA,EACtC;AAAA;AAAA,EAEA,IAAI,UAAU;AACV,UAAM,EAAE,WAAW,QAAQ,IAAI;AAC/B,WAAO,CAAC,aAAa,CAAC,WAAY,UAAU,aAAa;AAAA,EAC7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,QAAQ,OAAO,KAAK,cAAc;AACpC,QAAI,OAAO,WAAW,UAAU;AAC5B,YAAM,IAAI;AACV,eAAS;AACT,aAAO;AAAA,IACX;AACA,WAAO,KAAK,aAAa,WAAG,IAAI,KAAK,WAAW,QAAQ,MAAM,IAAI,GAAG,IAAI;AAAA,EAC7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,UAAU;AACV,WAAO,KAAK,YAAY,KAAK,UAAU,KAAK,GAAG;AAAA,EACnD;AAAA,EACA,IAAI,QAAQ,OAAO;AAEf,SAAK,WAAW;AAAA,EACpB;AAAA,EACA,WAAW;AAEP,WAAO,KAAK,KAAK,MAAM,MAAM,SAAS;AAAA,EAC1C;AAAA,EACA,WAAW,UAAU;AACjB,WAAO,KAAK,gBAAgB,SAAS,WAAW,SAAS,OAAO;AAAA,EACpE;AAAA,EACA,gBAAgB,OAAO,KAAK;AACxB,UACI,UAAU,KAAK,WACf,QAAU,KAAK;AACnB,WAAO,WAAW,SAAS,WAAG,eAAe,SAAS,OAAO,OAAO,GAAG;AAAA,EAC3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBA,MAAM,aAAa,KAAK;AACpB,UACI,KAAiB,MACjB,QAAiB,GAAG,KAAK,GACzB;AAAA,MACI;AAAA,MACA;AAAA,MACA;AAAA,IACJ,IAAiB,IACjB,cAAiB,IAAI,SAAS,YAAY,GAC1C,gBAAiB,IAAI,SAAS,YAAY;AAC9C,QAAI,gBACA;AACJ,QAAI,OAAO,eAAe,UAAU;AAChC,uBAAiB,IAAI,SAAS,UAAU;AAExC,UAAI,eAAe,SAAS,YAAY,MAAM;AAC1C,sBAAc,aAAa,eAAe;AAAA,MAC9C,OAEK;AACD,sBAAc,YAAY,WAAG,GAAG,eAAe,MAAM,WAAW,IAAI,eAAe;AACnF,sBAAc,OAAO,eAAe;AACpC,uBAAe;AAAA,MACnB;AAAA,IACJ,OACK;AACD,uBAAiB,IAAI,SAAS,aAAa,IAAI,aAAa,GAAG,WAAW,YAAY,GAAG,YAAY;AACrG,oBAAc,aAAa,eAAe;AAAA,IAC9C;AACA,UAAM,YAAY,WAAG,IAAI,GAAG,WAAW,eAAe,WAAW,eAAe,IAAI;AACpF,QAAI,cAAc;AACd,YAAM,eAAe;AACrB,SAAG,eAAe;AAAA,IACtB,OACK;AACD,YAAM,WAAW,cAAc;AAC/B,SAAG,WAAW,eAAe;AAAA,IACjC;AACA,QAAI,YAAY;AACZ,iBAAW,IAAI,KAAK;AACpB,UAAI,mBAAmB,CAAC,WAAW,sBAAsB;AACrD,wBAAgB;AAAA,UACZ,GAAG,YAAY,IAAI,gBAAc;AAC7B,kBAAM,aAAa,OAAO,OAAO,CAAC,GAAG,WAAW,MAAM;AAAA,cAClD,SAAW,MAAM;AAAA;AAAA,cAEjB,OAAW;AAAA,cACX,UAAW;AAAA,YACf,CAAC;AACD,mBAAO,WAAW;AAClB,mBAAO;AAAA,UACX,CAAC;AAAA,QACL;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,YAAY,iBAAiB,CAAC,GAAG;AAC7B,QAAI,CAAC,KAAK,aAAa;AACnB,aAAO;AAAA,IACX;AACA,UACI;AAAA,MACI;AAAA,MACA;AAAA,IACJ,IAAY,MAEZ,YAAY,eAAe,WAAW,WAAG,OAAO,oBAAI,KAAK,GAAG,IAAI;AACpE,WAAO,eAAe;AACtB,QAAI,WAAW,CAAC;AAChB,QAAI,KAAK,QAAQ;AACb,iBAAW;AAAA,QACP,sBAAuB,WAAG,OAAO,WAAW,GAAG;AAAA,QAC/C,oBAAuB,WAAG,OAAO,SAAS,GAAG;AAAA,MACjD;AAAA,IACJ,OACK;AACD,iBAAW;AAAA,QACP,SAAU,WAAG,OAAO,WAAW,IAAI;AAAA,QACnC,OAAU,WAAG,OAAO,SAAS,IAAI;AAAA,MACrC;AAAA,IACJ;AACA,UACI,UAAiB,cAAc,aAAa,cAAc,WAAW,WAAW,KAAO,cAAc,YAAY,cAAc,WAAW,UAAU,KAAM,IAC1J,gBAAgB;AAAA,MACZ,OAAW;AAAA,MACX,SAAW;AAAA,MACX,UAAW;AAAA,MACX,QAAW,oCAAoC,OAAO;AAAA,MACtD,KAAW;AAAA,IACf,GACA,cAAgB;AAAA,MACZ,OAAU;AAAA,MACV,KAAU,KAAK,KAAK;AAAA,MACpB,OAAU;AAAA,MACV,SAAU,KAAK;AAAA,MACf,SAAU;AAAA,MACV,GAAG;AAAA,MACH,GAAI,KAAK,iBAAiB,EAAE,OAAQ,KAAK,eAAe,IAAI,CAAC;AAAA,MAC7D,GAAG;AAAA,MACH,KAAU;AAAA,IACd,GACA,WAAgB,OAAO,KAAK,aAAa,EAAE,IAAI,SAAO,GAAG,GAAG,IAAI,cAAc,GAAG,CAAC,EAAE,GACpF,aAAgB,OAAO,KAAK,WAAW,EAAE,IAAI,SAAO,GAAG,GAAG,IAAI,YAAY,GAAG,CAAC,EAAE;AAEpF,aAAS,OAAO,SAAS,SAAS,GAAG,GAAG,GAAG,UAAU;AACrD,WAAO,SAAS,KAAK,IAAI;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,YAAY,gBAAgB;AACxB,QAAI,KAAK,aAAa;AAClB,YAAM,OAAO,IAAI,KAAK,CAAC,KAAK,YAAY,cAAc,CAAC,GAAG,EAAE,MAAO,gBAAgB,CAAC;AACpF,oBAAc,aAAa,OAAO,KAAK,QAAQ,WAAW,MAAM;AAAA,IACpE;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,WAAW,WAAW;AAElB,WAAO,KAAK,mBAAmB,SAAS,IAAI,OAAO;AAAA,EACvD;AAAA,EACA,gBAAgB,WAAW;AACvB,QAAI,cAAc,gBAAgB;AAC9B,aAAO,MAAM,gBAAgB,UAAU,KAAK,MAAM,gBAAgB,cAAc;AAAA,IACpF;AACA,WAAO,MAAM,gBAAgB,SAAS;AAAA,EAC1C;AACJ;AApxBI,cADiB,UACV,SAAQ;AAAA;AAEf,cAHiB,UAGV,UAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcZ;AAAA,IACI,MAAO;AAAA,IACP,MAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA;AAAA,IACI,MAAO;AAAA,IACP,MAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA;AAAA,IACI,MAAY;AAAA,IACZ,MAAY;AAAA,IACZ,WAAY;AAAA,IACZ,UAAY;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBA;AAAA,IACI,MAAe;AAAA,IACf,MAAe;AAAA,IACf,cAAe;AAAA,IACf,UAAe;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA;AAAA,IACI,MAAU;AAAA,IACV,SAAU;AAAA,IACV,QAAU;AAAA,MACN,MAAO;AAAA,IACX;AAAA,IACA,SAAU;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA;AAAA,IACI,MAAe;AAAA,IACf,cAAe;AAAA,IACf,UAAe;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA;AAAA,IACI,MAAW;AAAA,IACX,UAAW;AAAA,EACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA;AAAA,IACI,MAAW;AAAA,IACX,MAAW;AAAA,IACX,UAAW;AAAA,EACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA;AAAA,IACI,MAAe;AAAA,IACf,MAAe;AAAA,IACf,cAAe;AAAA,EACnB;AACJ;AA2oBJ,SAAS,SAAS;;;ACrzBlB,IAAO,6BAAQ,YAAU,MAAM,4BAA4B,UAAU,MAAM;AAAA,EACvE,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,IAAI,kBAAkB;AAClkGA,WAAW,gBAAgB;AACvB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA,MAKH,cAAe;AAAA;AAAA;AAAA;AAAA;AAAA,MAKf,cAAe;AAAA,MACf,SAAe;AAAA,MACf,UAAe;AAAA,IACnB;AAAA,EACJ;AAAA,EACA,UAAU,QAAQ;AACd,UAAM,UAAU,MAAM;AACtB,QAAI,CAAC,KAAK,WAAW,iBAAiB;AAClC,YAAM,IAAI,MAAM,qDAAqD;AAAA,IACzE;AAAA,EACJ;AAAA,EACA,YAAY;AACR,UAAM,SAAS,MAAM,UAAU,GAAG,SAAS;AAE3C,cAAU,KAAK,gBAAgB,UAAU;AACzC,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,iBAAiB,EAAE,QAAQ,UAAU,MAAM,GAAG;AAC1C,UAAM,iBAAiB,EAAE,QAAQ,UAAU,MAAM,CAAC;AAClD,QAAI,OAAO,gBAAgB,IAAI,GAAG;AAC9B,WAAK,eAAe;AACpB,aAAO,4BAA4B;AACnC,WAAK,eAAe;AAAA,IACxB;AAAA,EACJ;AAAA;AAAA,EAEA,IAAI,qBAAqB;AACrB,WAAO,KAAK,wBAAwB,KAAK,sBAAsB,KAAK,kBAAkB;AAAA,EAC1F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,sBAAsB,EAAE,WAAW,QAAQ,GAAG;AAC1C,WAAO,KAAK,MAAM,cAAY,KAAK,WAAW,qBAAqB,WAAW,SAAS,MAAM,QAAQ,CAAC;AAAA,EAC1G;AACJ;;;AC/JA,IAAO,wBAAQ,YAAU,MAAM,uBAAuB,UAAU,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoClE,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AACJ;;;AClCA,IAAO,6BAAQ,YAAU,MAAM,2BAA2B,OAAO;AAAA,EAC7D,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA,EAEA,WAAW,kBAAkB;AACzB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAwBA,WAAW,SAAS;AAChB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAWH,EAAE,MAAO,QAAQ,MAAO,UAAU,SAAU,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAYjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAqBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,EAAE,MAAO,aAAa,MAAO,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAkCtC;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA,EAGA,8BAA8B;AAC1B,SAAK,SAAS,QAAQ,gBAAc;AAChC,iBAAW,aAAa,KAAK;AAAA,IACjC,CAAC;AAAA,EACL;AAAA,EACA,OAAO,OAAO;AACV,UAAM,OAAO,KAAK;AAClB,SAAK,4BAA4B;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA,EAIA,IAAI,SAAS;AACT,WAAO,KAAK,YAAY,OAAO,CAAC,QAAQ,eAAe;AACnD,UAAI,WAAW,OAAO;AAClB,eAAO,KAAK,WAAW,KAAK;AAAA,MAChC;AACA,aAAO;AAAA,IACX,GAAG,CAAC,CAAC;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,cAAc;AACd,WAAO,KAAK,WAAW,CAAC,GAAG,KAAK,QAAQ,IAAI,CAAC;AAAA,EACjD;AAAA,EACA,IAAI,YAAY,aAAa;AAEzB,SAAK,gBAAgB,OAAO,KAAK,WAAW;AAG5C,gBAAY,QAAQ,gBAAc;AAC9B,iBAAW,WAAW;AAAA,IAC1B,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,YAAY;AACR,kBAAc,UAAU,aAAa,SAAS,4DAA4D;AAC1G,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,gBAAgB;AAChB,WAAO,MAAM,kBAAkB,CAAC,KAAK,UAAU,KAAK,OAAO;AAAA,EAC/D;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,cAAc;AACV,SAAK,eAAe,KAAK,gBAAgB,OAAO,KAAK,WAAW;AAAA,EACpE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,IAAI,WAAW;AACX,UACI,EAAE,OAAO,GAAG,IAAI;AACpB,QAAI,CAAC,MAAM;AACP,aAAO;AAAA,IACX;AACA,UAAM,QAAgB,KAAK,MAAM,GAAG,GAChC,eAAgB,MAAM,CAAC,EAAE,CAAC,GAC1B,cAAiB,MAAM,SAAS,IAAI,MAAM,MAAM,SAAS,CAAC,EAAE,CAAC,IAAI;AACrE,WAAO,eAAe;AAAA,EAC1B;AAAA,EACA,cAAc,MAAM;AAxPxB;AAyPQ,UAAM,WAAY,KAAK,uBAAqB,UAAK,YAAL,mBAAc;AAC1D,WAAO,CAAC,cAAY,cAAS,kBAAT,kCAAyB;AAAA,EACjD;AACJ;;;ACnOO,SAAS,MAAM,UAAU;AAC5B,QAAM,cAAc,CAAC;AACrB,QAAM,cAAc,CAAC;AACrB,MAAI;AACJ,QAAM,OAAO,aAAa;AACtB,QAAI,CAAC;AACD,iBAAW,SAAS,OAAO,QAAQ,EAAE;AACzC,WAAO,MAAM;AACT,UAAI,YAAY,QAAQ;AACpB,eAAO;AACP,oBAAY,SAAS;AAAA,MACzB;AACA,UAAI,CAAC;AACD;AACJ,YAAM,EAAE,OAAO,KAAK,IAAI,SAAS,KAAK;AACtC,UAAI,MAAM;AACN,mBAAW;AACX,mBAAW;AACX;AAAA,MACJ;AACA,kBAAY,KAAK,KAAK;AACtB,YAAM;AAAA,IACV;AAAA,EACJ;AACA,QAAM,OAAO,aAAa;AACtB,QAAI,CAAC;AACD,iBAAW,SAAS,OAAO,QAAQ,EAAE;AACzC,WAAO,MAAM;AACT,UAAI,YAAY,QAAQ;AACpB,eAAO;AACP,oBAAY,SAAS;AAAA,MACzB;AACA,UAAI,CAAC;AACD;AACJ,YAAM,EAAE,OAAO,KAAK,IAAI,SAAS,KAAK;AACtC,UAAI,MAAM;AACN,mBAAW;AACX,mBAAW;AACX;AAAA,MACJ;AACA,kBAAY,KAAK,KAAK;AACtB,YAAM;AAAA,IACV;AAAA,EACJ;AACA,SAAO,CAAC,KAAK,GAAG,KAAK,CAAC;AAC1B;AAEO,UAAU,gBAAgB,UAAU,WAAW;AAClD,MAAI,YAAY;AACZ,UAAM,IAAI,MAAM,sCAAsC;AAC1D,cAAY,YAAY;AACxB,QAAM,eAAe,CAAC;AACtB,aAAW,MAAM,UAAU;AACvB,QAAI,aAAa,WAAW,WAAW;AACnC,YAAM;AACN,mBAAa,SAAS;AAAA,IAC1B;AACA,iBAAa,KAAK,EAAE;AAAA,EACxB;AACA,MAAI,aAAa,SAAS;AACtB,UAAM;AACd;AAEO,UAAU,OAAO,UAAU,MAAM;AACpC,MAAI,IAAI;AACR,aAAW,MAAM,UAAU;AACvB,QAAI,KAAK,IAAI,GAAG;AACZ,YAAM;AAAA,EACd;AACJ;AAEO,UAAU,KAAK,UAAU,SAAS;AACrC,MAAI,IAAI;AACR,aAAW,MAAM,UAAU;AACvB,QAAI,EAAE,IAAI;AACN,YAAM;AAAA,EACd;AACJ;AAEO,SAAS,MAAM,UAAU,MAAM;AAClC,MAAI,IAAI;AACR,aAAW,MAAM,UAAU;AACvB,QAAI,CAAC,KAAK,IAAI,GAAG;AACb,aAAO;AAAA,EACf;AACA,SAAO;AACX;AAEO,SAAS,KAAK,UAAU,MAAM;AACjC,MAAI,IAAI;AACR,aAAW,MAAM,UAAU;AACvB,QAAI,KAAK,IAAI,GAAG;AACZ,aAAO;AAAA,EACf;AACA,SAAO;AACX;AAEO,UAAU,IAAI,UAAU,MAAM;AACjC,MAAI,IAAI;AACR,aAAW,MAAM;AACb,UAAM,KAAK,IAAI,GAAG;AAC1B;AAEO,SAAS,OAAO,UAAU,MAAM,YAAY;AAC/C,MAAI,IAAI;AACR,MAAI,MAAM;AACV,aAAW,MAAM,UAAU;AACvB,UAAM,KAAK,KAAK,IAAI,GAAG;AAAA,EAC3B;AACA,SAAO;AACX;AAEO,UAAU,WAAW,UAAU;AAClC,QAAM,OAAO,oBAAI,IAAI;AACrB,aAAW,MAAM,UAAU;AACvB,QAAI,CAAC,KAAK,IAAI,EAAE,GAAG;AACf,WAAK,IAAI,EAAE;AACX,YAAM;AAAA,IACV;AAAA,EACJ;AACJ;AAEO,UAAU,aAAa,UAAU,MAAM;AAC1C,QAAM,OAAO,oBAAI,IAAI;AACrB,aAAW,MAAM,UAAU;AACvB,UAAM,WAAW,KAAK,EAAE;AACxB,QAAI,CAAC,KAAK,IAAI,QAAQ,GAAG;AACrB,WAAK,IAAI,QAAQ;AACjB,YAAM;AAAA,IACV;AAAA,EACJ;AACJ;AAQO,UAAU,UAAU,UAAU,MAAM;AACvC,MAAI,IAAI;AACR,aAAW,MAAM,UAAU;AACvB,QAAI,KAAK,IAAI,GAAG;AACZ,YAAM;AAAA;AAEN;AAAA,EACR;AACJ;AAoBO,UAAU,UAAU,WAAW;AAClC,WAAS,IAAI,GAAG,IAAI,UAAU,QAAQ;AAClC,WAAO,UAAU,CAAC;AAC1B;AAEO,UAAU,eAAe,mBAAmB;AAC/C,aAAW,YAAY;AACnB,WAAO;AACf;AAMO,IAAM,uBAAN,MAAM,sBAAqB;AAAA,EAC9B,YAAY,UAAU;AAClB,SAAK,WAAW;AAChB,QAAI,CAAC;AACD,YAAM,IAAI,MAAM,2CAA2C;AAC/D,SAAK,WAAW;AAAA,EACpB;AAAA,EACA,OAAO,UAAU;AACb,SAAK,WAAW;AAChB,WAAO,IAAI,sBAAqB,QAAQ;AAAA,EAC5C;AAAA,EACA,OAAO;AACH,UAAM,CAAC,OAAO,KAAK,IAAI,MAAM,KAAK,QAAQ;AAC1C,SAAK,WAAW;AAChB,WAAO,IAAI,sBAAqB,KAAK;AAAA,EACzC;AAAA,EACA,QAAQ;AACJ,UAAM,CAAC,OAAO,KAAK,IAAI,MAAM,KAAK,QAAQ;AAC1C,WAAO,CAAC,IAAI,sBAAqB,KAAK,GAAG,KAAK,OAAO,KAAK,CAAC;AAAA,EAC/D;AAAA,EACA,gBAAgB,WAAW;AACvB,WAAO,KAAK,OAAO,gBAAgB,KAAK,UAAU,SAAS,CAAC;AAAA,EAChE;AAAA,EACA,OAAO,MAAM;AACT,WAAO,KAAK,OAAO,OAAO,KAAK,UAAU,IAAI,CAAC;AAAA,EAClD;AAAA,EACA,KAAK,SAAS;AACV,WAAO,KAAK,OAAO,KAAK,KAAK,UAAU,OAAO,CAAC;AAAA,EACnD;AAAA,EACA,IAAI,MAAM;AACN,WAAO,KAAK,OAAO,IAAI,KAAK,UAAU,IAAI,CAAC;AAAA,EAC/C;AAAA,EACA,OAAO,MAAM,YAAY;AACrB,WAAO,OAAO,MAAM,MAAM,UAAU;AAAA,EACxC;AAAA,EACA,SAAS;AAEL,WAAO,KAAK,OAAO,eAAe,KAAK,QAAQ,CAAC;AAAA,EACpD;AAAA,EACA,aAAa;AACT,WAAO,KAAK,OAAO,WAAW,KAAK,QAAQ,CAAC;AAAA,EAChD;AAAA,EACA,aAAa,MAAM;AACf,WAAO,KAAK,OAAO,aAAa,KAAK,UAAU,IAAI,CAAC;AAAA,EACxD;AAAA,EACA,MAAM,MAAM;AACR,WAAO,MAAM,MAAM,IAAI;AAAA,EAC3B;AAAA,EACA,KAAK,MAAM;AACP,WAAO,KAAK,MAAM,IAAI;AAAA,EAC1B;AAAA,EACA,UAAU,MAAM;AACZ,WAAO,KAAK,OAAO,UAAU,KAAK,UAAU,IAAI,CAAC;AAAA,EACrD;AAAA,EACA,EAAE,OAAO,QAAQ,IAAI;AACjB,QAAI,WAAW,KAAK;AACpB,QAAI,CAAC;AACD,YAAM,IAAI,MAAM,kEAAkE;AAEtF,SAAK,WAAW;AAChB,WAAO;AAEP,eAAW;AAAA,EACf;AAAA,EACA,UAAU;AACN,WAAO,MAAM,KAAK,IAAI;AAAA,EAC1B;AAAA,EACA,KAAK,OAAO;AACR,WAAO,MAAM,KAAK,IAAI,EAAE,KAAK,KAAK;AAAA,EACtC;AAAA,EACA,QAAQ;AACJ,WAAO,IAAI,IAAI,IAAI;AAAA,EACvB;AAAA,EACA,QAAQ;AAEJ,WAAO,IAAI,IAAI,IAAI;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA,EAIA,QAAQ;AACJ,eAAW,WAAW,MAAM;AAAA,IAAE;AAAA,EAClC;AAAA,EACA,UAAU;AACN,WAAO,IAAI,sBAAsB,IAAI;AAAA,EACzC;AACJ;AACO,IAAM,kBAAkB,CAAC,aAAa,IAAI,qBAAqB,QAAQ;AACvE,IAAM,KAAK;AAEX,IAAM,wBAAN,cAAoC,qBAAqB;AAAA,EAC5D,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,WAAW,CAAC;AACjB,SAAK,YAAY;AAAA,EACrB;AAAA,EACA,IAAI,SAAS,UAAU;AACnB,SAAK,YAAY;AAAA,EACrB;AAAA,EACA,IAAI,WAAW;AACX,WAAO;AAAA,EACX;AAAA,EACA,OAAO,UAAU;AACb,WAAO,IAAI,qBAAqB,QAAQ;AAAA,EAC5C;AAAA,EACA,EAAE,OAAO,QAAQ,IAAI;AACjB,UAAM,WAAW,KAAK;AACtB,QAAI,KAAK,WAAW;AAChB,UAAI,CAAC,KAAK;AACN,aAAK,YAAY,KAAK,UAAU,OAAO,QAAQ,EAAE;AACrD,UAAI,WAAW,KAAK;AACpB,UAAI,kBAAkB,SAAS;AAE/B,UAAI,kBAAkB;AAClB,eAAO;AACX,aAAO,MAAM;AACT,YAAI,SAAS,SAAS,iBAAiB;AAEnC,mBAAS,IAAI,iBAAiB,IAAI,SAAS,QAAQ;AAC/C,kBAAM,SAAS,CAAC;AACpB,4BAAkB,SAAS;AAAA,QAC/B;AACA,YAAI,CAAC;AACD;AACJ,cAAM,EAAE,OAAO,KAAK,IAAI,SAAS,KAAK;AACtC,YAAI,MAAM;AACN,qBAAW,KAAK,YAAY;AAC5B,eAAK,YAAY;AAAA,QACrB,OACK;AACD,mBAAS,KAAK,KAAK;AACnB;AACA,gBAAM;AAAA,QACV;AAAA,MACJ;AAAA,IACJ,OACK;AACD,aAAO;AAAA,IACX;AAAA,EACJ;AACJ;AACO,IAAM,mBAAmB,CAAC,aAAa,IAAI,sBAAsB,QAAQ;AACzE,IAAM,KAAK;;;AC1VlB,IAAM,0BAA0B,OAAO,eAAe;AACtD,IAAM,qBAAqB,OAAO,oBAAoB;AAEtD,IAAM,sBAAN,MAA0B;AAAA,EACtB,cAAc;AACV,SAAK,SAAS;AACd,SAAK,WAAW;AAChB,SAAK,uBAAuB;AAC5B,SAAK,cAAc;AACnB,SAAK,+BAA+B,GAAG,KAAK,uBAAuB,CAAC;AAAA,EACxE;AAAA,EACA,OAAO,IAAI,OAAO;AACd,UAAM,KAAK,IAAI,KAAK;AACpB,aAAS,OAAO,OAAO,IAAI,KAAK;AAChC,WAAO;AAAA,EACX;AAAA,EACA,IAAI,aAAa;AACb,QAAI,KAAK,gBAAgB;AACrB,aAAO,KAAK;AAChB,WAAO,KAAK,cAAc,KAAK,gBAAgB;AAAA,EACnD;AAAA,EACA,kBAAkB;AACd,WAAO,MAAM,KAAK,KAAK,oBAAoB,KAAK,CAAC,EAAE,KAAK,CAAC,QAAQ,WAAW,SAAS,MAAM;AAAA,EAC/F;AAAA,EACA,IAAI,sBAAsB;AACtB,QAAI,KAAK,yBAAyB;AAC9B,aAAO,KAAK;AAChB,WAAO,KAAK,uBAAuB,KAAK,yBAAyB;AAAA,EACrE;AAAA,EACA,iBAAiBC,MAAK,WAAW;AAC7B,QAAI,kBAAkBA,KAAI,IAAI,SAAS;AACvC,QAAI,CAAC,iBAAiB;AAClB,wBAAkB,CAAC;AACnB,MAAAA,KAAI,IAAI,WAAW,eAAe;AAAA,IACtC;AACA,WAAO;AAAA,EACX;AAAA,EACA,2BAA2B;AACvB,QAAI,eAAe;AACnB,UAAM,eAAe,KAAK,SAAS,GAAG,KAAK,OAAO,eAAe,oBAAoB,OAAO,CAAC,EAAE,OAAO,EAAE,MAAM,IAAI,oBAAI,IAAI;AAC1H,UAAMA,OAAM,GAAG,KAAK,SAAS,YAAY,EACpC,IAAI,CAAAC,WAASA,OAAM,eAAe,mBAAmB,EACrD,OAAO,EACP,OAAO,CAAC,qBAAqB,CAAC,WAAW,MAAM,MAAM;AACtD,UAAI,YAAY;AACZ,uBAAe;AACnB,WAAK,iBAAiB,qBAAqB,SAAS,EAAE,KAAK,MAAM;AACjE,aAAO;AAAA,IACX,GAAG,oBAAI,IAAI,CAAC;AACZ,SAAK,iBAAiBD,MAAK,eAAe,CAAC,EAAE,KAAK,CAAC,KAAK,QAAQ,CAAC;AACjE,WAAO,GAAGA,IAAG,EAAE,IAAI,CAAC,CAAC,OAAO,QAAQ,MAAM;AACtC,aAAO,CAAC,OAAO,GAAG,QAAQ,EAAE,OAAO,EAAE,WAAW,EAAE,OAAO,CAAAC,WAAS,CAAC,aAAa,IAAIA,MAAK,CAAC,EAAE,KAAK,CAAC,QAAQ,WAAW,OAAO,KAAK,OAAO,EAAE,CAAC;AAAA,IAC/I,CAAC,EAAE,MAAM;AAAA,EACb;AAAA,EACA,CAAC,yBAAyB;AACtB,WAAO,GAAG,KAAK,UAAU,EAAE,IAAI,WAAS,KAAK,oBAAoB,IAAI,KAAK,CAAC,EAAE,OAAO;AAAA,EACxF;AACJ;AAEA,IAAI,WAAW;AAKR,IAAM,WAAW,OAAK,cAAc,EAAE;AAC7C;AAQO,IAAM,gBAAN,MAAoB;AAC3B;AAEA,IAAM,aAAN,MAAiB;AAAA,EACb,cAAc;AACV,SAAK,KAAK;AACV,SAAK,eAAe,CAAC;AACrB,SAAK,YAAY;AACjB,SAAK,iBAAiB;AACtB,SAAK,cAAc;AACnB,SAAK,iBAAiB;AAEtB,SAAK,gBAAgB;AACrB,SAAK,OAAO;AAAA,EAChB;AAAA,EACA,OAAO,IAAI,OAAO;AACd,UAAM,KAAK,IAAI,KAAK;AACpB,aAAS,OAAO,OAAO,IAAI,KAAK;AAChC,OAAG,iBAAiB,oBAAoB,IAAI,EAAE,UAAU,IAAI,QAAQ,cAAc,GAAG,SAAS,EAAE,CAAC;AAEjG,UAAM,cAAc,GAAG;AACvB,UAAM,SAAS,GAAG,iBAAiB,OAAO,YAAY,IAAI;AAC1D,UAAM,qBAAqB,OAAO,OAAO,SAAU,MAAM;AACrD,YAAM,gBAAgB,YAAY,IAAI;AACtC,oBAAc,UAAU,MAAM,IAAI;AAClC,aAAO;AAAA,IACX,GAAG;AAAA,MACC,CAAC,uBAAuB,GAAG;AAAA,MAC3B,CAAC,kBAAkB,GAAG;AAAA,IAC1B,CAAC;AACD,WAAO,eAAe,oBAAoB,OAAO,aAAa,EAAE,OAAO,mBAAmB,CAAC;AAC3F,OAAG,cAAc;AACjB,WAAO;AAAA,EACX;AAAA,EACA,IAAI,eAAe;AACf,QAAI,KAAK,kBAAkB;AACvB,aAAO,KAAK;AAChB,WAAO,KAAK,gBAAgB,KAAK,kBAAkB;AAAA,EACvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,oBAAoB,WAAW;AAC3B,UAAM,cAAc,KAAK;AACzB,UAAM,UAAU,YAAY,eAAe,IAAI,SAAS;AACxD,QAAI,YAAY;AACZ,aAAO;AACX,UAAM,QAAQ;AACd,gBAAY,eAAe,IAAI,WAAW,KAAK;AAC/C,WAAO;AAAA,EACX;AAAA,EACA,oBAAoB;AAChB,UAAM,OAAO,KAAK;AAClB,QAAI,UAAU,KAAK;AACnB,UAAM,0BAA0B,KAAK,eAAe,6BAA6B,OAAO,CAAC,KAAKA,WAAU;AACpG,YAAM,EAAE,KAAK,KAAK,IAAI;AACtB,YAAM,WAAW,OAAO,OAAO,aAAaA,OAAM,EAAE;AACpD,UAAI,aAAa,KAAK,2BAA2B,IAAI,QAAQ;AAC7D,UAAI,CAAC,YAAY;AACb,qBAAaA,OAAM,YAAY,GAAG;AAClC,QAAAA,OAAM,OAAO,WAAW;AACxB,aAAK,2BAA2B,IAAI,UAAU,UAAU;AAAA,MAC5D;AACA,UAAI,MAAM;AACV,UAAI,OAAO;AACX,aAAO;AAAA,IACX,GAAG,EAAE,KAAK,SAAS,MAAM,OAAO,aAAa,KAAK,oBAAoB,OAAO,CAAC,EAAE,CAAC,EAAE;AACnF,UAAM,eAAe,OAAO,OAAO,yBAAyB;AAAA,MACxD,CAAC,uBAAuB,GAAG,KAAK;AAAA,MAChC,CAAC,kBAAkB,GAAG;AAAA,MACtB,KAAK,KAAK;AAAA,MACV,QAAQ,CAAC,SAAS,MAAM,CAAC,cAAc,IAAI,GAAG,CAAAC,UAAQ,cAAcA,MAAK;AAAA,MACzE,CAAC;AAAA,MACD,GAAG;AAAA,MACH,UAAU,KAAK,SAAS,KAAK,IAAI;AAAA,IACrC,CAAC;AACD,WAAO,eAAe,cAAc,OAAO,aAAa,EAAE,OAAO,mBAAmB,CAAC;AACrF,WAAO;AAAA,EACX;AAAA,EACA,WAAW;AACP,WAAO,KAAK,eAAe,6BAA6B,OAAO,CAAC,KAAKD,WAAU,GAAGA,OAAM,IAAI,IAAI,GAAG,KAAK,KAAK,UAAU,IAAI;AAAA,EAC/H;AACJ;AACA,WAAW,6BAA6B,oBAAI,IAAI;AAChD,WAAW,iBAAiB,oBAAI,IAAI;AAGpC,IAAM,eAAe,CAAC,SAAS;AAC3B,SAAO,OAAO,eAAe,KAAK,SAAS,EAAE,YAAY,eAAe,kBAAkB;AAC9F;AACA,IAAM,gBAAgB,CAAC,SAAS;AAC5B,SAAO,OAAO,eAAe,KAAK,SAAS,EAAE,YAAY,kBAAkB;AAC/E;AAEA,IAAM,QAAQ,CAAC,UAAU,gBAAgB;AACrC,MAAI;AACJ,MAAI,SAAS,SAAS,GAAG;AACrB,UAAM,kBAAkB,SAAS,SAAS,SAAS,CAAC;AAGpD,QAAI,CAAC,aAAa,eAAe,KAAK,oBAAoB;AACtD,kBAAY;AAAA,EACpB;AACA,QAAM,eAAe,CAAC;AACtB,WAAS,QAAQ,CAAC,aAAa,UAAU;AACrC,UAAME,cAAa,YAAY,kBAAkB;AACjD,QAAIA,gBAAe,QAAW;AAC1B,YAAM,mBAAmBA,YAAW;AAEpC,UAAI,qBAAqB,eAAe;AACpC,YAAI,WAAW;AAEX,cAAI,cAAc,kBAAkB;AAChC,kBAAM,eAAe,iBAAiB,UAAU,cAAc,UAAU,SAAS;AACjF,kBAAM,iBAAiB,UAAU,UAAU,cAAc,iBAAiB,SAAS;AACnF,gBAAI,CAAC,gBAAgB,CAAC;AAClB,oBAAM,IAAI,MAAM,qBAAqB;AACzC,wBAAY,iBAAiB,mBAAmB;AAAA,UACpD;AAAA,QACJ;AAGI,sBAAY;AAAA,MACpB;AACA,mBAAa,KAAKA,WAAU;AAAA,IAChC,OACK;AACD,UAAI,UAAU,SAAS,SAAS;AAC5B,cAAM,IAAI,MAAM,6EAA6E;AAAA,IACrG;AAAA,EACJ,CAAC;AAED,QAAM,aAAa,WAAW,IAAI;AAAA,IAC9B;AAAA,IACA;AAAA,IACA,WAAW,aAAa;AAAA,EAC5B,CAAC;AACD,SAAO,WAAW;AACtB;AAIA,IAAM,qBAAqB,SAAU,UAAU;AAC3C,SAAO,QAAQ,YAAY,SAAS,KAAK,uBAAuB,CAAC,CAAC;AACtE;AAWO,IAAM,eAAe,CAAC,UAAU,SAAS;AAC5C,SAAO,QAAQ,YAAY,SAAS,KAAK,uBAAuB,CAAC,CAAC;AACtE;AAoQO,IAAM,QAAQ;AAKd,IAAM,WAAW;;;ACjfjB,IAAMC,QAAN,MAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQd,WAAW,OAAO;AACd,aAAS,OAAO,OAAO,MAAM,KAAK;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA2BA,OAAO,IAAI,OAAO;AACd,UAAM,WAAW,IAAI,KAAK;AAC1B,aAAS,WAAW,KAAK;AACzB,WAAO;AAAA,EACX;AACJ;;;ACxCO,IAAM,oCAAN,cAAgD,MAAM,CAAC,GAAG,CAAC,SAAS;AACvE,QAAM,aAAa,KAAK;AAAA,EACxB,MAAMC,2CAA0C,KAAK;AAAA,IACjD,MAAM,cAAc;AAChB,aAAO,KAAK,QAAQ,YAAY;AAAA,IACpC;AAAA,IACA,IAAI,QAAQ,SAAS;AACjB,WAAK,WAAW;AAAA,IACpB;AAAA,IACA,IAAI,UAAU;AACV,aAAO,KAAK;AAAA,IAChB;AAAA,IACA,mBAAmB;AACf,YAAM,IAAI,MAAM,cAAc;AAAA,IAClC;AAAA;AAAA;AAAA;AAAA,IAIA,WAAW,SAAS;AAChB,aAAO,KAAK,UAAU;AAAA,IAC1B;AAAA;AAAA;AAAA;AAAA,IAIA,aAAa;AACT,UAAI,KAAK;AACL,eAAO,KAAK;AAChB,aAAO,KAAK,WAAW,KAAK,iBAAiB,CAAC;AAAA,IAClD;AAAA;AAAA;AAAA;AAAA,IAIA,qBAAqB;AACjB,YAAM,UAAU,KAAK,WAAW;AAChC,aAAO,mCAAS;AAAA,IACpB;AAAA;AAAA;AAAA;AAAA,IAIA,qBAAqB;AACjB,YAAM,UAAU,KAAK,WAAW;AAChC,aAAO,mCAAS;AAAA,IACpB;AAAA;AAAA;AAAA;AAAA,IAIA,gBAAgB;AACZ,YAAM,UAAU,KAAK,WAAW;AAChC,aAAO,mCAAS;AAAA,IACpB;AAAA;AAAA;AAAA;AAAA,IAIA,mBAAmB;AACf,YAAM,UAAU,KAAK,WAAW;AAChC,aAAO,mCAAS;AAAA,IACpB;AAAA;AAAA;AAAA;AAAA,IAIA,0BAA0B;AACtB,YAAM,UAAU,KAAK,WAAW;AAChC,aAAO,mCAAS;AAAA,IACpB;AAAA,EACJ;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;AClEO,IAAM,gCAAN,cAA4C,MAAM,CAAC,iCAAiC,GAAG,CAAC,SAAS;AACpG,QAAM,aAAa,KAAK;AAAA,EACxB,MAAMC,uCAAsC,KAAK;AAAA;AAAA,IAE7C,IAAI,aAAa;AAZzB;AAaY,cAAO,UAAK,YAAL,mBAAc;AAAA,IACzB;AAAA,IACA,IAAI,gBAAgB;AAf5B;AAgBY,cAAO,UAAK,YAAL,mBAAc;AAAA,IACzB;AAAA,IACA,IAAI,kBAAkB;AAlB9B;AAmBY,cAAO,UAAK,YAAL,mBAAc;AAAA,IACzB;AAAA,IACA,IAAI,kBAAkB;AArB9B;AAsBY,cAAO,UAAK,YAAL,mBAAc;AAAA,IACzB;AAAA,IACA,IAAI,uBAAuB;AAxBnC;AAyBY,cAAO,UAAK,YAAL,mBAAc;AAAA,IACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,aAAa,IAAI;AAhCzB;AAiCY,cAAO,UAAK,eAAL,mBAAiB,QAAQ;AAAA,IACpC;AAAA;AAAA;AAAA;AAAA,IAIA,kBAAkB,IAAI;AAtC9B;AAuCY,cAAO,UAAK,oBAAL,mBAAsB,QAAQ;AAAA,IACzC;AAAA;AAAA;AAAA;AAAA,IAIA,gBAAgB,IAAI;AA5C5B;AA6CY,cAAO,UAAK,kBAAL,mBAAoB,QAAQ;AAAA,IACvC;AAAA;AAAA;AAAA;AAAA,IAIA,kBAAkB,IAAI;AAlD9B;AAmDY,cAAO,UAAK,oBAAL,mBAAsB,QAAQ;AAAA,IACzC;AAAA;AAAA;AAAA;AAAA,IAIA,gBAAgB,IAAI;AAxD5B;AAyDY,cAAO,UAAK,yBAAL,mBAA2B,QAAQ;AAAA,IAC9C;AAAA,EACJ;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;ACrDO,IAAM,kCAAN,cAA8C,MAAM;AAAA,EACvD;AAAA,EACA;AACJ,GAAG,CAAC,SAAS;AACT,QAAM,aAAa,KAAK;AAAA,EACxB,MAAMC,yCAAwC,KAAK;AAAA,IAC/C,cAAc;AACV,YAAM,GAAG,SAAS;AAClB,WAAK,gBAAgB;AACrB,WAAK,mCAAmC;AAAA,IAC5C;AAAA,IACA,WAAW,QAAQ;AACf,aAAO;AAAA,IACX;AAAA;AAAA;AAAA,IAGA,UAAU,SAAS,CAAC,GAAG;AACnB,aAAO,cAAc;AAAA,QACjB,KAAK;AAAA,QACL,QAAQ;AAAA,QACR,WAAW;AAAA,QACX,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,SAAS;AAAA,QACT,MAAM;AAAA,QACN,QAAQ;AAAA,MACZ;AACA,aAAO,WAAW,UAAU,KAAK,MAAM,MAAM;AAAA,IACjD;AAAA;AAAA;AAAA,IAGA,QAAQ,WAAW,OAAO;AACtB,YAAM,KAAK,MAAM,EAAE,aAAa,QAAQ,IAAI,IAAI,aAAa,2CAAc,YAAY,cAAc,eAAe,eAAe,QAAQ,WAAW,MAAM,MAAM;AAClK,UAAI,CAAC,aAAa;AAEd,eAAO,WAAW,QAAQ,KAAK,IAAI,WAAW,KAAK;AAAA,MACvD;AAEA,iBAAW,QAAQ,KAAK,IAAI,GAAG,SAAS,aAAa,EAAE,GAAG,MAAM,CAAC;AAEjE,UAAI,CAAC,WAAW,QAAQ,cAAc,KAAK,CAAC,QAAQ,eAAe;AAE/D,mBAAW,QAAQ,KAAK,IAAI,WAAW,KAAK;AAAA,MAChD,WACS,CAAC,GAAG,mBAAmB,SAAS;AAIrC,YAAI,CAAC,QAAQ,mBAAmB;AAC5B,kBAAQ,wBAAwB,CAAC;AAEjC,kBAAQ,oBAAoB,QAAQ,IAAI;AAAA,YACpC,YAAY;AAER,mBAAK,sBAAsB,QAAQ,CAAC,CAACC,aAAY,OAAOC,YAAWC,MAAK,MAAM;AAC1E,gBAAAF,YAAW,QAAQ,KAAK,OAAOC,YAAWC,MAAK;AAAA,cACnD,CAAC;AACD,sBAAQ,wBAAwB;AAChC,sBAAQ,kBAAkB;AAC1B,sBAAQ,oBAAoB;AAAA,YAChC;AAAA,YACA,MAAM;AAAA,UACV,CAAC;AAAA,QACL;AACA,gBAAQ,sBAAsB,KAAK,CAAC,YAAY,IAAI,WAAW,KAAK,CAAC;AAAA,MACzE;AAEA,aAAO;AAAA,IACX;AAAA;AAAA,IAEA,mBAAmB;AAEf,aAAO,KAAK;AAAA,IAChB;AAAA,IACA,aAAa,MAAM;AAnF3B;AAsFY,UAAI,KAAK,WAAW,EAAE,KAAK,kBAAkB,KAAK,mCAAmC;AACjF,aAAK,QAAQ,wBAAwB;AAAA,MACzC;AACA,WAAK,gBAAgB;AACrB,iBAAW,aAAa,KAAK,MAAM,IAAI;AACvC,WAAK,gBAAgB;AACrB,iBAAK,YAAL,mBAAc,QAAQ,gBAAgB,EAAE,OAAO,KAAK;AAAA,IACxD;AAAA;AAAA,IAEA,MAAM,eAAe;AACjB,UAAI,KAAK,gBAAgB,KAAK,KAAK,WAAW,CAAC,KAAK,QAAQ,cAAc,GAAG;AAEzE,cAAM,KAAK,QAAQ,YAAY;AAAA,MACnC;AACA,iBAAW,aAAa,KAAK,IAAI;AAAA,IACrC;AAAA,IACA,MAAM,SAAS,SAAS,QAAQ;AAC5B,YAAM,SAAS,KAAK,IAAI,SAAS,MAAM;AACvC,YAAM,KAAK,QAAQ,YAAY;AAC/B,aAAO;AAAA,IACX;AAAA,IACA,MAAM,YAAY,OAAO,SAAS,QAAQ;AACtC,YAAM,SAAS,KAAK,OAAO,OAAO,SAAS,MAAM;AACjD,YAAM,KAAK,QAAQ,YAAY;AAC/B,aAAO;AAAA,IACX;AAAA,IACA,MAAM,cAAc,MAAM;AACtB,WAAK,OAAO;AACZ,YAAM,KAAK,QAAQ,YAAY;AAAA,IACnC;AAAA,IACA,gBAAgB;AApHxB;AAqHY,UAAI,KAAK,YAAY,KAAK,mBAAiB,UAAK,aAAL,mBAAe,aAAY;AAElE,aAAK,QAAQ,YAAY,EAAE,KAAK,MAAM,KAAK,OAAO,CAAC;AAAA,MACvD;AACA,aAAO,MAAM,cAAc,GAAG,SAAS;AAAA,IAC3C;AAAA,EACJ;AACA,SAAOH;AACX,CAAC,EAAE;AACH;;;ACjHO,IAAM,kCAAN,cAA8C,MAAM,CAAC,mCAAmC,KAAK,GAAG,CAAC,SAAS;AAC7G,QAAM,aAAa,KAAK;AAAA,EACxB,MAAMI,yCAAwC,KAAK;AAAA,IAC/C,UAAU,OAAO;AACb,UAAI,gBAAgB;AAEpB,UAAI,aAAa,OAAO,+BAA+B,GAAG;AACtD,cAAM,UAAU,MAAM,WAAW;AACjC,YAAI,WAAW,CAAC,KAAK,WAAW,GAAG;AAC/B,eAAK,WAAW,OAAO;AACvB,0BAAgB;AAAA,QACpB;AAAA,MACJ;AACA,iBAAW,UAAU,KAAK,MAAM,KAAK;AAGrC,UAAI,iBAAiB,CAAC,cAAc;AAChC,aAAK,YAAY;AAAA,IACzB;AAAA,IACA,YAAY,OAAO,cAAc,OAAO;AACpC,iBAAW,YAAY,KAAK,MAAM,OAAO,WAAW;AACpD,YAAM,EAAE,QAAQ,IAAI;AACpB,YAAM,wBAAyB,aAAa,OAAO,+BAA+B,KAC3E,CAAC,MAAM,uBAAuB,aAAa,MAAM,aAAa,MAAM,UACvE,MAAM,YAAY,UAChB,MAAM;AAGZ,UAAI,WAAW,CAAC,QAAQ,gBAAgB,CAAC,QAAQ,wBAAwB,uBAAuB;AAC5F,aAAK,aAAa,WAAW;AAC7B,aAAK,WAAW,IAAI;AAAA,MACxB;AAEA,UAAI;AACA,aAAK,QAAQ;AAAA,IACrB;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA,cAAc;AAAA,IAAE;AAAA;AAAA;AAAA;AAAA,IAIhB,aAAa,cAAc,OAAO;AAAA,IAAE;AAAA,IACpC,mBAAmB;AACf,YAAM,QAAQ,KAAK,OAAO,KAAK,OAAM,aAAa,GAAG,+BAA+B,KAAM,CAAC,CAAC,EAAE,WAAW,CAAC;AAC1G,aAAO,+BAAO;AAAA,IAClB;AAAA,IACA,MAAM,SAAS,WAAW,OAAO,QAAQ;AA9DjD;AA+DY,YAAM,SAAS,KAAK,IAAI,WAAW,OAAO,MAAM;AAChD,cAAM,UAAK,YAAL,mBAAc;AACpB,aAAO;AAAA,IACX;AAAA,IACA,MAAM,SAAS,WAAW;AAnElC;AAoEY,cAAM,UAAK,YAAL,mBAAc;AACpB,aAAO,KAAK,IAAI,SAAS;AAAA,IAC7B;AAAA,IACA,IAAI,iBAAiB;AACjB,YAAM,UAAU,KAAK,WAAW;AAChC,cAAO,mCAAS,qBAAmB,mCAAS,IAAI,gBAAe;AAAA,IACnE;AAAA,EACJ;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;ACrEO,IAAM,8BAAN,cAA0C,MAAM;AAAA,EACnD;AAAA,EACA;AAAA,EACA;AACJ,GAAG,CAAC,SAAS;AACT,QAAM,aAAa,KAAK;AAAA,EACxB,MAAMC,qCAAoC,KAAK;AAAA,IAC3C,cAAc;AACV,YAAM,GAAG,SAAS;AAElB,WAAK,iBAAiB;AAEtB,WAAK,WAAW,CAAC;AAEjB,WAAK,gBAAgB,CAAC;AAAA,IAC1B;AAAA,IACA,IAAI,wBAAwB;AACxB,aAAO;AAAA,IACX;AAAA;AAAA,IAEA,cAAc;AACV,WAAK,WAAW;AAAA,IACpB;AAAA;AAAA,IAEA,aAAa,cAAc,OAAO;AAjC1C;AAkCY,iBAAW,aAAa,KAAK,MAAM,WAAW;AAC9C,iBAAK,YAAL,mBAAc;AAAA,IAClB;AAAA;AAAA;AAAA;AAAA,IAIA,aAAa;AAxCrB;AAyCY,iBAAK,YAAL,mBAAc,WAAW;AAAA,IAC7B;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA,qBAAqB,WAAW;AA/CxC;AAgDY,UAAI,aAAa,KAAK,YAAY,KAAK,SAAS,SAAS,MAAM,MAAM;AACjE,eAAO,KAAK,SAAS,SAAS;AAAA,MAClC;AACA,cAAO,UAAK,IAAI,SAAS,MAAlB,YAAuB;AAAA,IAClC;AAAA;AAAA;AAAA;AAAA,IAIA,qBAAqB,WAAW;AAC5B,aAAS,aAAa,KAAK,YAAa,KAAK,SAAS,SAAS,KAAK,QAAS,KAAK,IAAI,SAAS,KAAK;AAAA,IACxG;AAAA;AAAA;AAAA;AAAA,IAIA,QAAQ,SAAS;AA9DzB;AAgEY,UAAI,KAAK,aAAW,UAAK,sBAAL,mBAAwB,UAAS;AACjD,cAAM,OAAO,OAAO,KAAK,OAAO;AAChC,iBAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAClC,gBAAM,MAAM,KAAK,CAAC;AAClB,eAAK,SAAS,GAAG,IAAI,QAAQ,GAAG;AAAA,QACpC;AACA,aAAK,WAAW;AAAA,MACpB,OACK;AAED,aAAK,IAAI,OAAO;AAAA,MACpB;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA,IAIA,WAAW,OAAO,OAAO,aAAa,MAAM,UAAU,OAAO;AACzD,YAAM,KAAK;AACX,SAAG,SAAS,KAAK,IAAI;AAErB,UAAI,SAAS;AACT,YAAI,EAAE,SAAS,GAAG,gBAAgB;AAC9B,aAAG,cAAc,KAAK,IAAI,GAAG,IAAI,KAAK;AAAA,QAC1C;AACA,WAAG,QAAQ,OAAO,KAAK;AAAA,MAC3B;AACA,oBAAc,GAAG,WAAW;AAAA,IAChC;AAAA;AAAA;AAAA;AAAA,IAIA,uBAAuB;AAAA,IAAE;AAAA;AAAA;AAAA;AAAA,IAIzB,oBAAoB,SAAS,OAAO;AAChC,YAAM,KAAK;AACX,SAAG,iBAAiB;AACpB,UAAI,CAAC,QAAQ;AAET,WAAG,QAAQ,GAAG,aAAa;AAE3B,WAAG,IAAI,GAAG,QAAQ;AAAA,MACtB,OACK;AACD,WAAG,QAAQ,GAAG,QAAQ;AAAA,MAC1B;AACA,SAAG,WAAW,CAAC;AACf,SAAG,gBAAgB,CAAC;AACpB,SAAG,iBAAiB;AAAA,IACxB;AAAA,EACJ;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;ACjHO,IAAM,oBAAN,cAAgC,MAAM,CAAC,2BAA2B,GAAG,CAAC,SAAS;AAClF,QAAM,aAAa,KAAK;AAAA,EACxB,MAAMC,2BAA0B,KAAK;AAAA,IACjC,IAAI,WAAW;AARvB;AASY,cAAO,UAAK,YAAL,mBAAc,gBAAgB,wBAAwB;AAAA,IACjE;AAAA,IACA,cAAc;AAXtB;AAcY,UAAI,KAAK,iBAAiB,CAAC,KAAK,cAAc,eAAe;AACzD,mBAAK,oBAAL,mBAAsB,MAAM,OAAK,EAAE,IAAI,UAAU,MAAM,KAAK,IAAI,QAAQ,gBAAc,WAAW,WAAW,YAAY,IAAI;AAAA,MAChI;AACA,iBAAW,YAAY,KAAK,IAAI;AAAA,IACpC;AAAA,IACA,aAAa,cAAc,OAAO;AAnB1C;AAuBY,UAAI,KAAK,YAAY,CAAC,eAAe,GAAC,UAAK,kBAAL,mBAAoB,gBAAe;AACrE,cAAM,gBAAgB,KAAK;AAG3B,aAAK,SAAS,QAAQ,gBAAc,cAAc,sBAAsB,IAAI,UAAU,CAAC;AAAA,MAC3F;AACA,iBAAW,aAAa,KAAK,IAAI;AAAA,IACrC;AAAA,IACA,WAAW,SAAS,KAAK,OAAO,cAAc,OAAO;AAGjD,WAAI,+BAAO,UAAS,MAAM;AACtB,aAAK,SAAS,QAAQ,gBAAc;AAChC,qBAAW,IAAI,cAAc,KAAK;AAAA,QACtC,CAAC;AAAA,MACL;AACA,iBAAW,WAAW,KAAK,MAAM,SAAS,KAAK,OAAO,cAAc,KAAK;AAAA,IAC7E;AAAA,EACJ;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;ACxCA,IAAM,cAAc;AAuEpB,IAAqB,gBAArB,cAA2C,2BAAmB,sBAAc,YAAY,OAAO,YAAY,CAAC,CAAC,EAAE;AAS/G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADI,cARiB,eAQV,SAAQ;AAEnB,cAAc,iBAAiB;AAC/B,cAAc,SAAS;;;ACrFvB,IAAO,4BAAQ,YAAU,MAAM,0BAA0B,OAAO;AAAA,EAC5D,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,IAAI,kBAAkB;AAClB,WAAO,KAAK,QAAQ;AAAA,EACxB;AAAA,EACA,IAAI,uBAAuB;AACvB,WAAO,KAAK,QAAQ;AAAA,EACxB;AAAA,EACA,IAAI,kBAAkB;AAClB,WAAO,KAAK,QAAQ;AAAA,EACxB;AAAA,EACA,IAAI,aAAa;AACb,WAAO,KAAK,QAAQ;AAAA,EACxB;AAAA,EACA,IAAI,gBAAgB;AAChB,WAAO,KAAK,QAAQ;AAAA,EACxB;AACJ;;;ACbO,IAAM,8BAAN,cAA0C,MAAM;AAAA,EACnD;AAAA,EACA;AAAA,EACA;AACJ,GAAG,CAAC,SAAS;AACT,QAAM,aAAa,KAAK;AAAA,EACxB,MAAMC,qCAAoC,KAAK;AAAA,IAC3C,WAAW,SAAS;AAChB,YAAM,SAAS,WAAW,WAAW,KAAK,MAAM,OAAO;AACvD,UAAI;AACA,aAAK,YAAY,OAAO;AAC5B,aAAO;AAAA,IACX;AAAA,IACA,YAAY,SAAS;AAAA,IAAE;AAAA,IACvB,gBAAgB;AAAA,IAAE;AAAA,EACtB;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;ACvBA,IAAM,uBAAuB;AAAA,EACzB,QAAQ;AAAA,EACR,OAAO;AACX;AAEO,IAAM,6BAAN,cAAyC,MAAM,CAAC,+BAA+B,GAAG,CAAC,SAAS;AAC/F,QAAM,aAAa,KAAK;AAAA,EACxB,MAAMC,oCAAmC,KAAK;AAAA,IAC1C,cAAc;AACV,YAAM,GAAG,SAAS;AAClB,WAAK,wBAAwB,oBAAI,IAAI;AAAA,IACzC;AAAA;AAAA,IAEA,aAAa,OAAO;AAf5B;AAiBY,YAAM,cAAc,qBAAqB,MAAM,MAAM;AACrD,YAAM,aAAa,KAAK;AACxB,UAAI,iBAAe,WAAM,YAAN,mBAAe;AAC9B,aAAK,qBAAqB;AAAA,IAClC;AAAA;AAAA,IAEA,OAAO,SAAS,QAAQ;AACpB,YAAM,MAAM,WAAW,OAAO,KAAK,MAAM,SAAS,MAAM;AACxD,WAAK,qBAAqB;AAC1B,aAAO;AAAA,IACX;AAAA;AAAA,IAEA,UAAU,QAAQ;AACd,YAAM,MAAM,WAAW,UAAU,KAAK,MAAM,MAAM;AAClD,WAAK,qBAAqB;AAC1B,aAAO;AAAA,IACX;AAAA,IACA,uBAAuB;AACnB,YAAM,kBAAkB,KAAK,mBAAmB;AAChD,UAAI,mBAAmB,CAAC,gBAAgB,0BAA0B;AAC9D,cAAM,wBAAwB,CAAC,GAAG,KAAK,qBAAqB,EAAE,OAAO,gBAAc,CAAC,gBAAgB,sBAAsB,IAAI,UAAU,CAAC;AACzI,8BAAsB,SAAS,KAAK,gBAAgB,OAAO,qBAAqB;AAAA,MACpF;AACA,WAAK,sBAAsB,MAAM;AAAA,IACrC;AAAA,IACA,cAAc,gBAAgB,YAAY,OAAO;AAC7C,YAAM,iBAAiB,KAAK,QAAQ,eAAe,EAAE;AACrD,YAAM,cAAc,kBAAkB,mBAAmB;AACzD,UAAI,aAAa;AAEb,mBAAW,cAAc,eAAe,YAAY,CAAC,GAAG;AACpD,qBAAW,WAAW;AAAA,QAC1B;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,EACJ;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;ACjDO,IAAM,yBAAN,cAAqC,MAAM,CAAC,4BAA4B,2BAA2B,GAAG,CAAC,SAAS;AACnH,QAAM,aAAa,KAAK;AAAA,EACxB,MAAMC,gCAA+B,KAAK;AAAA,IACtC,WAAW,gBAAgB;AACvB,aAAO;AAAA,QACH,YAAY;AAAA,MAChB;AAAA,IACJ;AAAA,IACA,cAAc;AAftB;AAgBY,iBAAK,oBAAL,mBAAsB,gBAAgB,MAAM;AAAA,IAChD;AAAA,IACA,gBAAgB;AAlBxB;AAmBY,iBAAK,oBAAL,mBAAsB,gBAAgB,MAAM;AAAA,IAChD;AAAA,IACA,MAAM,UAAU;AArBxB;AAsBY,iBAAW,MAAM,KAAK,MAAM,QAAQ;AACpC,iBAAK,oBAAL,mBAAsB,kBAAkB;AAAA,IAC5C;AAAA,EACJ;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;ACtBA,IAAMC,eAAc,sBAAc,uBAAuB,OAAO,SAAS,CAAC;AA0C1E,IAAqB,gBAArB,cAA2C,2BAAmBA,YAAW,EAAE;AAAA,EACvE,WAAW,gBAAgB;AACvB,WAAO;AAAA,MACH,YAAa;AAAA,IACjB;AAAA,EACJ;AACJ;AACA,cAAc,SAAS;;;ACzCvB,IAAO,0BAAQ,YAAO;AAdtB;AAcyyGpE,WAAW,gBAAgB;AACvB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA,QAKH,cAAe;AAAA;AAAA;AAAA;AAAA;AAAA,QAKf,cAAe;AAAA,QACf,SAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAQV,uBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAUxB,kBAAmB;AAAA,MACvB;AAAA,IACJ;AAAA;AAAA,IAEA,UAAU,QAAQ;AACd,YAAM,UAAU,MAAM;AACtB,WAAK,WAAW;AAChB,UAAI,KAAK,kBAAkB;AACvB,aAAK,uBAAuB;AAAA,MAChC;AACA,UAAI,CAAC,KAAK,WAAW,cAAc;AAC/B,cAAM,IAAI,MAAM,uDAAuD;AAAA,MAC3E;AAAA,IACJ;AAAA;AAAA;AAAA,IAGA,IAAI,gBAAgB,iBAAiB;AACjC,YAAM,kBAAkB;AAAA,IAC5B;AAAA,IACA,IAAI,kBAAkB;AAElB,YAAM,SAAS,MAAM;AAErB,UAAI,UAAU,WAAW,eAAe,YAAY;AAChD,eAAO,OAAK,EAAE,cAAc,OAAO,CAAC;AAAA,MACxC;AACA,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAmBA,eAAe,SAAS;AACpB,YACI,KAAS,MACT;AAAA,QACI;AAAA,QACA;AAAA,MACJ,IAAS,IAET,SAAS,GAAG,UAAU;AAAA,QAClB,GAAG;AAAA,QACH,eAAgB,GAAG,aAAc,GAAG,qBAAqB,kBAAkB,iBAAe,MAAM,SAAS,WAAW,IAAI,GAAG,QAAQ,WAAW,IAAI,KAAK,gBAAgB,WAAW,IAAK;AAAA,QACvL,SAAgB,QAAQ,WAAW;AAAA,MACvC,CAAC;AACL,aAAO,QAAQ,CAAC,OAAO,QAAQ,OAAO,IAAI,KAAK,MAAM,MAAM,CAAC;AAC5D,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAaA,sBAAsBC,KAAI,UAAU,MAAM;AACtC,WAAK,QAAQ,WAAS;AAClB,cAAM,EAAE,WAAW,QAAQ,IAAI;AAC/B,YAAI,aAAa,SAAS;AACtB,iBAAOA,IAAG,KAAK,SAAS,OAAO,WAAW,OAAO;AAAA,QACrD;AAAA,MACJ,CAAC;AAAA,IACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,mBAAmB;AACf,UAAI,WAAW,IAAI,KAAK,MAAM,GAAG,CAAC,GAC9B,SAAW,oBAAI,KAAK,CAAC;AACzB,WAAK,QAAQ,WAAS;AAClB,YAAI,MAAM,WAAW;AACjB,qBAAW,WAAW,IAAI,MAAM,WAAW,QAAQ;AAAA,QACvD;AACA,YAAI,MAAM,SAAS;AACf,mBAAS,WAAW,IAAI,MAAM,SAAS,MAAM;AAAA,QACjD;AAAA,MACJ,CAAC;AACD,iBAAW,WAAW,IAAI,KAAK,MAAM,GAAG,CAAC,IAAI,WAAW;AACxD,eAAW,SAAS,oBAAI,KAAK,CAAC,IAAI,SAAS;AAE3C,aAAQ,KAAK,oBAAoB;AAAA,QAC7B,WAAY,YAAY;AAAA,QACxB,SAAY,UAAU,YAAY;AAAA,MACtC;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA,mBAAmB,OAAO;AACtB,aAAO,MAAM;AAAA,IACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAgBA,qBAAqB,OAAO,KAAK,cAAc,UAAU;AAGrD,UAAI,SAAS,KAAK,iBAAiB;AAC/B,eAAO;AAAA,MACX;AAEA,YAAM,YAAY,IAAI,IAAI,KAAK,qBAAqB,QAAQ,CAAC;AAM7D,UAAI,6CAAc,cAAc;AAC5B,cACI,eAAe,aAAa,OAC5B,YAAe,aAAa;AAChC,kBAAU,QAAQ,CAAAC,cAAY;AAE1B,cAAIA,UAAS,OAAO,aAAa,YAAY;AACzC,iBAAK,qBAAqBA,SAAQ,EAAE,QAAQ,WAAS,UAAU,IAAI,KAAK,CAAC;AAAA,UAC7E;AAAA,QACJ,CAAC;AAAA,MACL;AACA,UAAI,cAAc;AACd,cAAM,gBAAgB,aAAa,eAAe,aAAa,QAAQ;AACvE,kBAAU,OAAO,aAAa;AAAA,MAClC;AACA,YAAM,MAAM,MAAM,KAAK,SAAS;AAGhC,UAAI,MAAM,QAAQ,MAAM,IAAI,QAAQ,GAAG;AACnC,eAAO,CAAC,IAAI;AAAA,UAAK,WACb,MAAM,gBAAgB,MAAM,aAAa,IAEnC,MAAM,UAAU,QAAQ,MAAM,MAAM,QAAQ,IAE5C,WAAW,eAAe,OAAO,KAAK,MAAM,WAAW,MAAM,OAAO;AAAA,QAC9E;AAAA,MACJ;AACA,aAAO,CAAC,IAAI,KAAK,WAAS,MAAM,eAAe,WAAW,eAAe,OAAO,KAAK,MAAM,WAAW,MAAM,OAAO,CAAC;AAAA,IACxH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWA,wBAAwB,UAAUD,KAAI,UAAU,MAAM;AAClD,aAAO,SAAS,UAAU,IAAI,EAAE,OAAOA,IAAG,KAAK,OAAO,CAAC;AAAA,IAC3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,qBAAqB,OAAO;AAExB,UAAI,MAAM,cAAc;AACpB,gBAAQ,MAAM;AAAA,MAClB;AACA,aAAO,KAAK,gBAAgB,qBAAqB,KAAK;AAAA,IAC1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA,qBAAqB,UAAU;AAC3B,aAAO,KAAK,gBAAgB,qBAAqB,QAAQ;AAAA,IAC7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUA,uBAAuB,OAAO;AAC1B,aAAO,KAAK,gBAAgB,uBAAuB,KAAK,KAAK,CAAC;AAAA,IAClE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,0BAA0B,UAAU;AAChC,aAAO,KAAK,gBAAgB,0BAA0B,QAAQ,KAAK,CAAC;AAAA,IACxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUA,sBAAsB,OAAO,UAAU,4BAA4B,OAAO;AACtE,aAAO,KAAK,gBAAgB,sBAAsB,OAAO,UAAU,QAAW,yBAAyB;AAAA,IAC3G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,0BAA0B,OAAO,UAAU;AACvC,WAAK,gBAAgB,0BAA0B,OAAO,QAAQ;AAAA,IAClE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA,oCAAoC,OAAO,aAAa,aAAa;AACjE,YACI,KAAgB,MAChB,gBAAgB,MAAM,KAAK,WAAW,GACtC,aAAgB,GAAG,gBAAgB,iCAAiC,OAAO,WAAW;AAC1F,UAAI,YAAY;AACZ,mBAAW,aAAa;AAAA,MAC5B,OACK;AACD,WAAG,gBAAgB,sBAAsB,OAAO,WAAW;AAAA,MAC/D;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA,0BAA0B,OAAO,UAAU;AACvC,aAAO,KAAK,gBAAgB,0BAA0B,OAAO,QAAQ;AAAA,IACzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,0BAA0B,OAAO;AAC7B,WAAK,gBAAgB,0BAA0B,KAAK;AAAA,IACxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,6BAA6B,UAAU;AACnC,WAAK,gBAAgB,6BAA6B,QAAQ;AAAA,IAC9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,OAAO,QAAQ;AACX,aAAO,KAAK,IAAI,MAAM;AAAA,IAC1B;AAAA;AAAA,IAEA,IAAI,UAAU;AACV,aAAO,MAAM;AAAA,IACjB;AAAA,IACA,IAAI,QAAQ,SAAS;AApdzB,UAAAE;AAqdQ,YAAM,UAAU;AAChB,WAAK,gBAAgB,SAAS;AAC9B,UAAI,SAAS;AAET,aAAIA,MAAA,QAAQ,oBAAR,gBAAAA,IAAyB,mBAAmB;AAC5C,eAAK,wBAAwB,QAAQ,eAAe;AAAA,QACxD;AAGA,gBAAQ,IAAI;AAAA,UACR,MAAwB;AAAA,UACxB,uBAAwB;AAAA,UACxB,SAAwB;AAAA,UACxB,MAAwB;AAAA;AAAA,QAC5B,CAAC;AAAA,MACL;AAAA,IACJ;AAAA;AAAA;AAAA,IAGA,IAAI,kBAAkB;AAxe1B,UAAAA,KAAA;AAyeQ,cAAO,MAAAA,MAAA,KAAK,WAAW,aAAhB,gBAAAA,IAA0B,YAAY,YAAtC,YAAiD;AAAA,IAC5D;AAAA;AAAA;AAAA,IAGA,IAAI,uBAAuB;AACvB,UAAI,KAAK,WAAW;AAChB,eAAO,KAAK,YAAY;AAAA,MAC5B;AACA,aAAO,KAAK;AAAA,IAChB;AAAA,IACA,IAAI,qBAAqB,OAAO;AAC5B,WAAK,wBAAwB;AAC7B,YAAM,EAAE,gBAAgB,IAAI;AAE5B,WAAI,mDAAiB,YAAW,CAAC,gBAAgB,uBAAuB;AAEpE,wBAAgB,WAAW,aAAa,WAAW;AAC/C,cAAI,KAAK,6BAA6B,MAAM;AACxC,iBAAK,4BAA4B;AAAA,UACrC;AACA,iBAAO,KAAK,EAAE,KAAK,yBAAyB;AAAA,QAChD;AACA,wBAAgB,wBAAwB;AAAA,MAC5C;AAAA,IACJ;AAAA,IACA,eAAe,cAAc;AAlgBjC,UAAAA;AAmgBQ,YACI,EAAE,gBAAgB,IAAI,MACtB,mBAAmB,CAAC;AAIxB,UAAI,iBAAiB;AACjB,wBAAgB,wBAAwB;AAAA,MAC5C;AACA,qBAAe,MAAM,eAAe,cAAc,mBAAmB,GAACA,MAAA,KAAK,QAAL,gBAAAA,IAAU,iBAAgB,iBAAe;AAE3G,cAAM,aAAa,YAAY,IAAI,YAAY;AAC/C,YAAI,CAAC,YAAY,yBAAyB,cAAc,MAAM;AAI1D,cAAI,CAAC,gBAAgB,mBAAmB,YAAY,IAAI,UAAU,GAAG;AAGjE,6BAAiB,KAAK;AAAA,cAClB,IAAU,gBAAgB,WAAW,WAAW,EAAE;AAAA,cAClD;AAAA,cACA,SAAU,YAAY;AAAA,YAC1B,CAAC;AAAA,UACL;AAAA,QACJ;AAEA,oBAAY,wBAAwB;AAAA,MACxC,MAAM,MAAS;AACf,UAAI,iBAAiB;AACjB,wBAAgB,QAAQ,kBAAkB;AAC1C,wBAAgB,wBAAwB;AACxC,wBAAgB,IAAI,gBAAgB;AAAA,MACxC;AACA,aAAO;AAAA,IACX;AAAA,IACA,mBAAmB,SAAS;AACxB,YAAM,EAAE,gBAAgB,IAAI;AAC5B,UAAI,iBAAiB;AAIjB,wBAAgB,wBAAwB;AACxC,cAAM,mBAAmB,OAAO;AAChC,wBAAgB,QAAQ,kBAAkB;AAC1C,wBAAgB,wBAAwB;AAAA,MAC5C,OACK;AACD,cAAM,mBAAmB,OAAO;AAAA,MACpC;AAAA,IACJ;AAAA,IACA,cAAc,aAAa,YAAY,OAAO;AAtjBlD,UAAAA,KAAA;AAujBQ,oBAAc,MAAM,cAAc,aAAa,SAAS;AACxD,YACI,KAAkB,MAClB,mBAAkB,QAAG,oBAAH,aAAsBA,MAAA,GAAG,gBAAH,gBAAAA,IAAgB,iBACxD,aAAkB,YAAY,IAAI,YAAY,GAC9C,EAAE,YAAY,IAAI;AACtB,WAAI,2CAAa,WAAU,YAAY,KAAK,kCAAkC,SAAS,GAAG,iBAAiB;AACvG,YAAI,iBAAiB;AACjB,0BAAgB,IAAI,YACf,OAAO,CAAAC,gBAAc,CAAC,gBAAgB,KAAK,OAAK,EAAE,YAAY,YAAY,MAAM,EAAE,eAAeA,WAAU,CAAC,EAC5G,IAAI,CAAAA,iBAAe,EAAE,UAAWA,aAAY,OAAQ,YAAY,EAAE,CAAC;AAAA,QAC5E,OACK;AACD,aAAG,sBAAsB;AAAA,QAC7B;AAAA,MACJ,WACS,cAAc,QAAQ,CAAC,YAAY,KAAK,+BAA+B;AAC5E,cACI,iBAAsB,GAAG,QAAQ,YAAY,EAAE,GAC/C,cAAsB,kBAAkB,mBAAmB,eAAe,CAAC;AAG/E,YAAI,aAAa;AAEb,gBAAM,gBAAgB,gBAAgB,QAAQ,SAAS,WAAW,YAAY,EAAE;AAChF,cAAI,+CAAe,MAAM;AACrB,kBAAM,aAAa,cAAc,OAAO,EAAE,KAAK,EAAE;AACjD,uBAAW,WAAW;AACtB,wBAAY,wBAAwB;AAAA,UACxC;AAAA,QACJ,OAGK;AACD,aAAG,sBAAsB;AAAA,QAC7B;AAGA,WAAG,uBAAuB;AAAA,MAC9B;AACA,aAAO;AAAA,IACX;AAAA,IACA,qBAAqB;AAjmBzB,UAAAD,KAAA;AAkmBQ,YACI,KAAkB,MAElB,mBAAkB,QAAG,oBAAH,aAAsBA,MAAA,GAAG,gBAAH,gBAAAA,IAAgB;AAC5D,UAAI,GAAG,wBAAuB,mDAAiB,sBAAqB,IAAE,QAAG,YAAH,mBAAY,6BAA4B,GAAG,YAAY;AACzH,cAAM,cAAc,CAAC;AAErB,WAAG,QAAQ,iBAAe;AACtB,gBAAM,EAAE,YAAY,aAAa,IAAK,QAAQ,IAAI;AAClD,cAAI,cAAc,MAAM;AAEpB,wBAAY,KAAK;AAAA,cACb,IAAK,gBAAgB,WAAW,WAAW,EAAE;AAAA,cAC7C;AAAA,cACA;AAAA,YACJ,CAAC;AAAA,UACL,WACS,2CAAa,QAAQ;AAC1B,wBAAY,QAAQ,SAAO;AACvB,0BAAY,KAAK;AAAA,gBACb,IAAa,gBAAgB,WAAW,WAAW,EAAE;AAAA,gBACrD,YAAa;AAAA,gBACb;AAAA,cACJ,CAAC;AAAA,YACL,CAAC;AAAA,UACL;AAAA,QACJ,GAAG,IAAI,EAAE,2BAA4B,KAAK,CAAC;AAE3C,wBAAgB,aAAa;AAAA,UACzB,qBAA0B;AAAA,UAC1B,yBAA0B;AAAA,UAC1B,uBAA0B;AAAA,QAC9B;AAEA,wBAAgB,uBAAuB;AAEvC,wBAAgB,uBAAuB;AACvC,wBAAgB,OAAO;AACvB,wBAAgB,uBAAuB;AACvC,WAAG,sBAAsB;AAAA,MAC7B;AAAA,IACJ;AAAA,IACA,WAAW;AACP,YAAM,SAAS,GAAG,SAAS;AAC3B,WAAK,mBAAmB;AAAA,IAC5B;AAAA;AAAA,IAEA,yBAAyB,EAAE,QAAQ,GAAG;AAjpB1C,UAAAA;AAkpBQ,YAAM,KAAK;AACX,UACI,GAAG,yBAAyB,CAAC,GAAG,cAAc,CAAC,GAAG,iBAClD,GAACA,MAAA,GAAG,QAAH,gBAAAA,IAAQ,gBAAe,CAAC,GAAG;AAAA,MAE5B,CAAC,GAAG,gBAAgB,uBAAuB,CAAC,GAAG,cAAc,qBAC/D;AACE,cAAM,WAAW,oBAAI,IAAI;AAEzB,gBAAQ,QAAQ,sBAAoB;AAChC,gBAAM,EAAE,MAAM,IAAI;AAElB,cAAI,SAAS,CAAC,MAAM,aAAa,MAAM,YAAY,MAAM,OAAK,QAAQ,SAAS,CAAC,CAAC,GAAG;AAChF,qBAAS,IAAI,KAAK;AAAA,UACtB;AAAA,QACJ,CAAC;AAED,YAAI,SAAS,MAAM;AACf,aAAG,OAAO,CAAC,GAAG,QAAQ,CAAC;AAAA,QAC3B;AAAA,MACJ;AAAA,IACJ;AAAA,IACA,+BAA+B,EAAE,MAAM,GAAG;AACtC,WAAK,wBAAwB,KAAK;AAAA,IACtC;AAAA,IACA,wBAAwB,iBAAiB;AACrC,YAAM,KAAK;AACX,SAAG,gBAAgB,iBAAiB;AACpC,UAAI,iBAAiB;AACjB,WAAG,mBAAmB;AACtB,wBAAgB,IAAI;AAAA,UAChB,MAAO;AAAA;AAAA;AAAA,UAGP,aAAa,EAAE,QAAQ,GAAG;AACtB,gBAAI,CAAC,GAAG,iBAAiB,CAAC,GAAG,aAAa;AACtC,kBAAI,GAAG,sBAAsB;AACzB,wBAAQ,QAAQ,gBAAc;AAC1B,wBAAM,EAAE,MAAM,IAAI;AAClB,uBAAI,+BAAO,YAAW,MAAM,eAAe,WAAW,YAAY;AAC9D,0BAAM,KAAK,cAAc;AACzB,0BAAM,IAAI,cAAc,WAAW,UAAU;AAC7C,0BAAM,KAAK,cAAc;AAAA,kBAC7B;AAAA,gBACJ,CAAC;AAAA,cACL,WACS,GAAG,iBAAiB;AACzB,wBAAQ,QAAQ,gBAAc;AAjsB1D,sBAAAA;AAksBgC,wBAAM,EAAE,MAAM,IAAI;AAClB,sBAAI,+BAAO,SAAS;AAChB,0BAAM,KAAK,cAAc;AACzB,0BAAM,eAAcA,MAAA,MAAM,gBAAN,OAAAA,MAAqB,CAAC;AAC1C,wBAAI,CAAC,YAAY,SAAS,WAAW,UAAU,GAAG;AAC9C,4BAAM,cAAc,CAAC,GAAG,aAAa,WAAW,UAAU;AAAA,oBAC9D;AACA,0BAAM,KAAK,cAAc;AAAA,kBAC7B;AAAA,gBACJ,CAAC;AAAA,cACL;AAAA,YACJ;AAAA,UACJ;AAAA;AAAA,UAEA,cAAe;AAAA;AAAA;AAAA,UAGf,gBAAgB,EAAE,QAAQ,GAAG;AACzB,gBAAI,CAAC,GAAG,iBAAiB,CAAC,GAAG,aAAa;AACtC,kBAAI,GAAG,sBAAsB;AACzB,wBAAQ,QAAQ,gBAAc;AAttB1D,sBAAAA;AAwtBgC,mBAAAA,MAAA,GAAG,QAAQ,WAAW,OAAO,MAA7B,gBAAAA,IAAgC,IAAI,cAAc;AAAA,gBACtD,CAAC;AAAA,cACL,WACS,GAAG,iBAAiB;AACzB,wBAAQ,QAAQ,CAAC,EAAE,OAAO,WAAW,MAAM;AACvC,wBACI,cAAkB,MAAM,YAAY,MAAM,GAC1C,gBAAkB,2CAAa,QAAQ;AAC3C,sBAAI,iBAAiB,GAAG;AACpB,gCAAY,OAAO,eAAe,CAAC;AACnC,0BAAM,cAAc;AAAA,kBACxB;AAAA,gBACJ,CAAC;AAAA,cACL;AAAA,YACJ;AAAA,UACJ;AAAA,UACA,qBAAqB;AACjB,gBAAI,CAAC,GAAG,iBAAiB,CAAC,GAAG,aAAa;AACtC,kBAAI,GAAG,sBAAsB;AACzB,mBAAG,WAAW,QAAQ,iBAAe,YAAY,IAAI,cAAc,IAAI,CAAC;AAAA,cAC5E,WACS,GAAG,iBAAiB;AACzB,mBAAG,WAAW,QAAQ,iBAAe;AACjC,8BAAY,cAAc,CAAC;AAAA,gBAC/B,CAAC;AAAA,cACL;AAAA,YACJ;AAAA,UACJ;AAAA;AAAA,UAEA,OAAO,EAAE,QAAQ,QAAQ,GAAG;AACxB,gBAAI,gBAAgB,SAAS;AACzB,oBAAM,EAAE,MAAM,IAAI;AAClB,kBAAI,GAAG,sBAAsB;AACzB,sBAAM,KAAK,cAAc;AACzB,sBAAM,IAAI,cAAc,QAAQ,WAAW,KAAK;AAChD,sBAAM,KAAK,cAAc;AAAA,cAC7B,WACS,GAAG,iBAAiB;AACzB,sBAAM,KAAK,cAAc;AACzB,sBACI,cAAkB,MAAM,YAAY,MAAM,GAC1C,gBAAkB,2CAAa,QAAQ,QAAQ,WAAW;AAC9D,oBAAI,iBAAiB,GAAG;AACpB,8BAAY,OAAO,eAAe,CAAC;AAAA,gBACvC;AACA,oBAAI,EAAC,2CAAa,SAAS,QAAQ,WAAW,SAAQ;AAClD,8BAAY,KAAK,QAAQ,WAAW,KAAK;AACzC,wBAAM,cAAc;AAAA,gBACxB;AACA,sBAAM,KAAK,cAAc;AAAA,cAC7B;AAAA,YACJ;AAAA,UACJ;AAAA;AAAA,UAEA,OAAO,EAAE,QAAQ,QAAQ,GAAG;AACxB,gBAAI,WAAW,aAAa,GAAG,iBAAiB;AAC5C,sBAAQ,QAAQ,CAAC,EAAE,OAAO,WAAW,MAAM;AAhxBnE,oBAAAA;AAixB4B,sBAAM,eAAcA,MAAA,MAAM,gBAAN,OAAAA,MAAqB,CAAC;AAC1C,oBAAI,CAAC,YAAY,SAAS,UAAU,GAAG;AACnC,8BAAY,KAAK,UAAU;AAC3B,wBAAM,KAAK,cAAc;AACzB,wBAAM,QAAQ,eAAe,WAAW;AACxC,wBAAM,KAAK,cAAc;AAAA,gBAC7B;AAAA,cACJ,CAAC;AAAA,YACL;AAAA,UACJ;AAAA,UACA,SAAU;AAAA,QACd,CAAC;AAAA,MACL;AAAA,IACJ;AAAA,IACA,IAAI,KAAK,MAAM;AACX,WAAK,gBAAgB;AAGrB,UAAI,KAAK,wBAAwB,CAAC,KAAK,kBAAkB,CAAC,KAAK,WAAW;AACtE,aAAK,gBAAgB,UAAU,IAAI;AAAA,MACvC;AACA,YAAM,OAAO;AACb,WAAK,gBAAgB;AAAA,IACzB;AAAA;AAAA;AAAA,IAGA,QAAQ,WAAW,QAAQ;AA3yB/B,UAAAA;AA4yBQ,YAAM,EAAE,QAAQ,IAAI,UAAU,CAAC;AAI/B,UAAI,WAAW,gBAAgB,WAAW,OAAO,KAAK,OAAO,EAAE,WAAW,KAAK,GAACA,MAAA,KAAK,QAAL,gBAAAA,IAAU,cAAa;AACnG,eAAO,WAAW;AAAA,MACtB;AACA,aAAO,MAAM,QAAQ,GAAG,SAAS;AAAA,IACrC;AAAA,IACA,OAAO,YAAY,MAAM;AArzB7B,UAAAA,KAAA;AAszBQ,YAAM,SAAS,MAAM,OAAO,SAAS,GAAG,IAAI;AAE5C,UAAI,OAAO,UAAU,KAAK,sBAAsB;AAC5C,mBAAW,eAAe,QAAQ;AAC9B,cAAI,CAAC,YAAY,cAAc;AAC3B,aAAC,UAAK,qBAAmBA,MAAA,KAAK,gBAAL,gBAAAA,IAAkB,qBAA1C,mBAA4D,OAAO,YAAY,aAAa;AAAA,UACjG;AAAA,QACJ;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA;AAAA,EAEJ,GAnzBI,cADqB,IACd,SAAQ,oBADM;AAAA;;;ACTzB,IACI,aAAe,MAAM;AADzB,IAEI,eAAe,WAAS,CAAC,MAAM;AAQnC,IAAO,yBAAQ,YAAO;AAftB;AAeyB,4BAA6B,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA8CzD,UAAU;AAAA,MACN,QAAAE;AAAA,MACA;AAAA,MACA;AAAA;AAAA,MACA;AAAA;AAAA,MACA;AAAA;AAAA,MACA;AAAA;AAAA,MACA;AAAA;AAAA,MACA,eAAe;AAAA;AAAA,MACf,UAAU;AAAA;AAAA,MACV,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA,MAKV;AAAA,IACJ,GAAG;AACC,YACI,KAAoB,MACpB,UAAoB,UAAU,CAAC,GAC/B;AAAA,QACI;AAAA,QACA;AAAA,QACA;AAAA,MACJ,IAAI,IACJ,eAAoBA;AAExB,UAAI,cAAc;AACd,gBAAQ,SAAS,eAAe,OAAK,aAAa,CAAC,KAAK,EAAE,UAAU,SAAS,OAAK,EAAE,UAAU;AAAA,MAClG;AAGA,UAAI,EAAE,eAAe,UAAU;AAC3B,oBAAY,QAAQ,YAAY;AAAA,MACpC;AACA,UAAI,EAAE,wBAAwB,UAAU;AACpC,6BAAqB,QAAQ,qBAAqB;AAAA,MACtD;AACA,UAAI,EAAE,kBAAkB,UAAU;AAC9B,uBAAe,QAAQ,eAAe,CAAC;AAAA,MAC3C;AAOA,cAAQ,gBAAgB,GAAG,cAAc,CAAC,QAAQ,gBAAiB,GAAG,qBAAqB,kBAAmB,iBAAe,MAAM,SAAS,WAAW,IAAI,GAAG,QAAQ,WAAW,IAAI,KAAK,gBAAgB,WAAW,IAAM;AAE3N,UAAI,CAAC,SAAS;AACV,YAAI,WAAW;AACX,oBAAU,QAAQ,UAAU,WAAW,UAAU,SAAS;AAC1D,kBAAQ,QAAQ,QAAQ,QAAQ,IAAI,CAAC;AAAA,QACzC,OAEK;AAED,cAAI,oBAAoB;AACpB,kBAAM,IAAI,MAAM,uFAAuF;AAAA,UAC3G;AACA,kBAAQ,aAAa;AAAA,QACzB;AAAA,MACJ;AACA,UAAI,CAAC,QAAQ,YAAY;AAErB,YAAI,WAAW;AACX,kBAAQ,aAAa,OAAK;AAEtB,kBAAM,iBAAiB,EAAE,iBAAiB,WAAW,IAAI,EAAE,IAAI,WAAW,IAAI,EAAE;AAChF,mBAAO,kBAAkB,EAAE,WAAW,UAAU,cAAc,IAAI;AAAA,UACtE;AAAA,QACJ,WAES,cAAc;AACnB,kBAAQ,aAAa,OAAK;AAEtB,kBACI,iBAAiB,EAAE,iBAAiB,WAAW,IAAI,EAAE,IAAI,WAAW,IAAI,EAAE,WAC1E,eAAiB,EAAE,iBAAiB,SAAS,IAAI,EAAE,IAAI,SAAS,IAAI,EAAE,WAAW,gBACjF,cAAiB,EAAE,iBAAiB;AACxC,mBAAO,mBAAmB,cAAc,WAAW,mBAAmB,gBAAgB,WAAW,OAAO,IAAI,WAAW,eAAe,gBAAgB,cAAc,WAAW,OAAO;AAAA,UAC1L;AAAA,QACJ,OAEK;AACD,kBAAQ,aAAa,OAAK;AAEtB,kBACI,iBAAiB,EAAE,iBAAiB,WAAW,IAAI,EAAE,IAAI,WAAW,IAAI,EAAE,WAC1E,eAAiB,EAAE,iBAAiB,SAAS,IAAI,EAAE,IAAI,SAAS,IAAI,EAAE,WAAW;AACrF,mBAAO,kBAAkB,kBAAkB,aAAa,gBAAgB;AAAA,UAC5E;AAAA,QACJ;AAAA,MACJ;AACA,YAAM,eAAe;AAAA,QACjB;AAAA,QACA;AAAA,MACJ;AAEA,SAAG,2BAA2B;AA4C9B,SAAG,QAAQ,iBAAiB;AAAA,QACxB,KAAU,iBAAiB,CAAC;AAAA,QAC5B,KAAU,QAAQ,MAAM,YAAY;AAAA,QACpC,SAAU,QAAQ,CAAC,kBAAkB,cAAc,YAAY,aAAa,aAAa,cAAc,UAAU,aAAa,QAAQ;AAAA,MAC1I,CAAC;AAED,SAAG,gBAAgB,QAAQ,MAAM,YAAY;AAC7C,aAAO,UAAU,GAAG,eAAe,OAAO,IAAI,GAAG,iBAAiB,OAAO;AAAA,IAC7E;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA,iBAAiB;AAAA,MACb,QAAAA;AAAA,MACA;AAAA,MACA;AAAA,MACA,YAAY;AAAA;AAAA,MACZ;AAAA;AAAA,MACA;AAAA;AAAA,MACA,qBAAqB;AAAA;AAAA,MACrB,UAAU;AAAA;AAAA,MAEV;AAAA,MACA;AAAA;AAAA;AAAA;AAAA;AAAA,MAKA;AAAA,IACJ,GAAG;AACC,YACI,KAAS,MACT,SAAS,CAAC,GACV,QAAS,gBAAgB,GAAG,QAAQ,GAAG;AAC3C,UAAI,OAAO;AACP,YAAI,kBAAkB,iBAAiB,GAAG,qBAAqB,cAAc,IAAI;AAGjF,YAAI,CAAC,gBAAgB;AACjB,gBACI,YAAY,GAAG,YAAY,OAAO,GAClC,WAAY,oBAAI,IAAI,GACpB,YAAY,YAAY,cAAc;AAE1C,aAAG,gBAAgB,QAAQ,OAAK;AAC5B,gBAAI,UAAU,QAAQ,WAAW,EAAE,SAAS,KAAK,WAAW;AACxD,uBAAS,IAAI,CAAC;AAAA,YAClB;AAAA,UACJ,CAAC;AAED,qBAAWC,QAAO,IAAI,KAAK,SAAS,GAAGA,QAAO,SAASA,MAAK,QAAQA,MAAK,QAAQ,IAAI,CAAC,GAAG;AACrF,kBAAM,mBAAmB,UAAU,IAAI,eAAe,aAAaA,KAAI,IAAI,WAAWA,KAAI;AAC1F,iEAAkB,QAAQ,OAAK,SAAS,IAAI,CAAC;AAAA,UACjD;AAKA,4BAAkB,CAAC,GAAG,QAAQ;AAAA,QAClC;AAIA,YAAI,eAAe;AACf,4BAAkB,gBAAgB,OAAO,aAAa;AAAA,QAC1D;AAIA,iBAAS,IAAI,GAAG,EAAE,OAAO,IAAI,iBAAiB,IAAI,QAAQ,KAAK;AAC3D,gBAAM,IAAI,gBAAgB,CAAC;AAE3B,cAAI,sBAAsB,EAAE,aAAa;AACrC,mBAAO,KAAK,MAAM,QAAQ,EAAE,2BAA2B,WAAW,OAAO,EAAE,OAAO,UAAU,CAAC;AAAA,UACjG,WAES,WAAW,CAAC,GAAG;AACpB,mBAAO,KAAK,CAAC;AAAA,UACjB;AAAA,QACJ;AAAA,MACJ;AACA,aAAOD,UAAS,OAAO,OAAOA,OAAM,IAAI;AAAA,IAC5C;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA,eAAe;AAAA,MACX,QAAS;AAAA,MACT;AAAA,MACA;AAAA;AAAA,MACA,YAAY;AAAA;AAAA,MACZ;AAAA;AAAA,MACA;AAAA;AAAA,MACA,qBAAqB;AAAA;AAAA,MACrB;AAAA;AAAA,MACA,UAAU;AAAA,MACV;AAAA;AAAA;AAAA;AAAA;AAAA,MAKA;AAAA,IACJ,GAAG;AApTP,UAAAE;AAqTQ,YAAM,KAAK;AAEX,UAAI,mCAAS,OAAO;AAChB,gBAAQ,MAAM;AAAA,MAClB,OACK;AACD,kBAAU,oBAAI,IAAI;AAAA,MACtB;AACA,UAAI,GAAG,OAAO;AACV,cACI,YAAkB,GAAG,YAAY,OAAO,GACxC,YAAkB,YAAY,cAAc,QAC5C,kBAAkB,CAAC,GACnBF,UAAkB,QAAM,CAAC,gBAAgB,aAAa,CAAC,OAAO,CAAC,iBAAiB,cAAc,CAAC,IAC/F,kBAAkB,OAAK,aAAa,CAAC,KAAKA,QAAO,CAAC;AACtD,kBAAU,UAAU;AAEpB,YAAI,gBAAgB;AAChB,gBAAM,IAAI,MAAM,oFAAoF;AAAA,QACxG,OACK;AAGD,WAAAE,MAAA,GAAG,oBAAH,gBAAAA,IAAoB,QAAQ,OAAK;AAC7B,gBAAI,QAAQ,WAAW,EAAE,SAAS,IAAI,SAAS;AAC3C,8BAAgB,KAAK,CAAC;AAAA,YAC1B;AAAA,UACJ;AAEA,qBAAWD,QAAO,IAAI,KAAK,SAAS,GAAGA,QAAO,SAASA,MAAK,QAAQA,MAAK,QAAQ,IAAI,CAAC,GAAG;AACrF,gBAAI,CAAC,kBAAkB,GAAG,IAAI,UAAU,IAAI,eAAe,aAAaA,KAAI,IAAI,WAAWA,OAAM,IAAI;AAErG,gBAAI,qDAAkB,MAAM;AAKxB,iCAAmB,CAAC,GAAG,gBAAgB,EAAE,OAAO,eAAe;AAE/D,kBAAI,iBAAiB,QAAQ;AACzB,iBAAC,QAAQ,IAAI,GAAG,KAAM,QAAQ,IAAI,KAAK,CAAC,CAAC,EAAE,IAAI,GAAG,GAAI,KAAK,GAAG,gBAAgB;AAAA,cAClF;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAEA,iBAAS,IAAI,GAAG,EAAE,OAAO,IAAI,iBAAiB,IAAI,QAAQ,KAAK;AAC3D,gBACI,IAAI,gBAAgB,CAAC,GAIrB,eAAe,qBAAqB,EAAE,2BAA2B,WAAW,OAAO,IAAI,CAAC,CAAC,GAAG,OAAOD,OAAM,GACzG,WAAc,WAAW,IAAI,SAAS,GAAG,KAAK;AAElD,mBAAS,QAAQG,KAAI,GAAG,EAAE,QAAAC,QAAO,IAAI,aAAaD,KAAIC,SAAQD,MAAK;AAC/D,kBACI,aAAa,YAAYA,EAAC,GAC1BF,QAAO,QAAQ,WAAW,WAAW,SAAS,GAC9CI,aAAY,eAAe,aAAaJ,KAAI,IAAK,YAAY,cAAc,QAC3E,uBAAwBI,eAAc,eAAgB,CAAC,WAAW,aAC5D,WAAW,IAAIJ,OAAM,GAAG,KAAK,IAC7B,WAAW,IAAI,WAAW,WAAW,WAAW,IAAI,WAAW,WAAW,WAAW,UAAU,WAAW,YAAY,GAAG,QAAQ;AAE3I,mBAAOA,QAAO,sBAAsBA,MAAK,QAAQA,MAAK,QAAQ,IAAI,CAAC,GAAG;AAClE,oBAAM,MAAM,QAAQ,QAAQA,KAAI;AAChC,eAAC,SAAS,QAAQ,IAAI,GAAG,MAAM,QAAQ,IAAI,KAAK,SAAS,CAAC,CAAC;AAC3D,qBAAO,KAAK,UAAU;AAAA,YAC1B;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,EACJ,GA/WI,cADqB,IACd,SAAQ,mBADM;AAAA;;;ACXzB,IAEI,eAAe;AAAA,EACX,MAAY;AAAA,EACZ,WAAY;AAChB;AALJ,IAMI,aAAqB,OAAO,OAAO,YAAY;AANnD,IAOI,aAAqB,OAAO,OAAO,CAAC,CAAC;AAPzC,IAQI,EAAE,eAAe,IAAI;AAQzB,IAAqB,gBAArB,MAAmC;AAAA,EAC/B,YAAY,OAAO,SAAS;AAUxB,SAAK,UAAU,WAAW,QAAQ;AAOlC,SAAK,QAAQ;AAQb,SAAK,QAAQ,CAAC,KAAK,OAAO;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,IAAI,WAAW,MAAM,aAAa;AAC9B,UACI,QAAW,KAAK,aAAa,SAAS,CAAC,GACvC,MAAW,KAAK,QAAQ,QAAQ,IAAI,GACpC,QAAW,MAAM,GAAG,MAAM,MAAM,GAAG,IAAI,oBAAI,IAAI;AACnD,UAAM,IAAI,WAAW;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,SAAS,aAAa;AApE1B;AAqEQ,QAAI,UAAS,UAAK,QAAQ,WAAW,YAAY,SAAS,MAA7C,mBAAgD,WACzD;AACJ,QAAI,QAAQ;AACR,mBAAY,uBAAY,YAAZ,mBAAqB,cAArB,YAAkC;AAC9C,WAAK,IAAI,aAAa,QAAQ,WAAW;AACzC,SAAG;AACC,aAAK,IAAI,QAAQ,QAAQ,WAAW;AACpC,kBAAU;AAAA,MACd,SAAS,SAAS;AAAA,IACtB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAIA,QAAQ;AACJ,eAAW,QAAQ,UAAQ,KAAK,IAAI,IAAI,uBAAO,OAAO,IAAI,CAAC;AAAA,EAC/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,IAAI,WAAW,MAAM,WAAW;AAE5B,KAAC,KAAK,eAAe,KAAK,WAAW;AACrC,QAAI,MAAM,KAAK,aAAa,SAAS,CAAC,GAClC;AACJ,QAAI,MAAM;AACN,YAAM,KAAK,QAAQ,QAAQ,IAAI;AAC/B,YAAM,YAAY,CAAC,IAAI,GAAG,GAAG,GAAG,IAAI,IAAI,GAAG;AAAA,IAC/C;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa;AACT,SAAK,cAAc;AACnB,SAAK,MAAM;AACX,SAAK,KAAK,UAAU,KAAK,MAAM,QAAQ,SAAS;AAAA,EACpD;AAAA,EACA,aAAa;AACT,SAAK,cAAc;AACnB,eAAW,QAAQ,UAAQ,KAAK,IAAI,IAAI,IAAI;AAAA,EAChD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,QAAQ,SAAS;AACb,WAAO,KAAK,QAAQ,eAAe,QAAQ;AAAA,EAC/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,WAAW,MAAM,aAAa;AACjC,UACI,QAAQ,KAAK,aAAa,SAAS,CAAC,GACpC,MAAQ,KAAK,QAAQ,QAAQ,IAAI,GACjC,QAAQ,MAAM,GAAG;AACrB,QAAI,OAAO;AACP,YAAM,OAAO,WAAW;AAAA,IAC5B;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,YAAY,aAAa,WAAW,SAAS;AA1JjD;AA2JQ,QAAI,UAAS,UAAK,QAAQ,WAAW,SAAS,MAAjC,mBAAoC,WAC7C;AACJ,QAAI,QAAQ;AACR,mBAAY,wCAAS,cAAT,YAAsB;AAClC,WAAK,OAAO,aAAa,QAAQ,WAAW;AAC5C,SAAG;AACC,aAAK,OAAO,QAAQ,QAAQ,WAAW;AACvC,kBAAU;AAAA,MACd,SAAS,SAAS;AAAA,IACtB;AAAA,EACJ;AAAA,EACA,KAAK,QAAQ,OAAO,SAAS,UAAU,QAAQ;AAtKnD;AAuKQ,YAAQ,SAAS;AACjB,cAAU,WAAW;AACrB,UACI,KAAgB,MAChB,aAAgB,MAAM,QACtB,eAAgB,QAAQ,QACxB,gBAAgB,qCAAU;AAC9B,QAAI,GAAG,UAAU;AACjB,QAAI,CAAC,GAAG,aAAa;AACjB;AAAA,IACJ;AACA,YAAQ,QAAQ;AAAA,MACZ,KAAK;AACD,WAAG,MAAM;AACT;AAAA,MAEJ,KAAK;AAED,YAAI,eAAe;AACf,kBAAQ,MAAM,MAAM;AACpB,oBAAU,QAAQ,MAAM;AACxB,eAAK,IAAI,GAAG,IAAI,eAAe,KAAK;AAChC,oBAAQ,KAAK,SAAS,CAAC,EAAE,CAAC,CAAC;AAC3B,kBAAM,KAAK,SAAS,CAAC,EAAE,CAAC,CAAC;AAAA,UAC7B;AAAA,QACJ;AAEA,YAAI,cAAc;AACd,eAAK,IAAI,GAAG,IAAI,cAAc,KAAK;AAC/B,4BAAgB,QAAQ,CAAC;AACzB,eAAG,YAAY,eAAe,cAAc,WAAW,cAAc,OAAO;AAAA,UAChF;AAAA,QACJ;AAEA,YAAI,YAAY;AACZ,eAAK,IAAI,GAAG,IAAI,YAAY,KAAK;AAC7B,uBAAW,MAAM,CAAC;AAGlB,gBAAI,SAAS,eAAe,CAAC,SAAS,UAAU;AAC5C,iBAAG,SAAS,QAAQ;AAAA,YACxB;AAAA,UACJ;AAAA,QACJ;AACA;AAAA,MAEJ,KAAK;AACD,wBAAgB,MAAM,CAAC;AACvB,WAAG;AAAA,UAAY;AAAA,YAAe,YAAO,cAAP,mBAAkB,aAAY,cAAc;AAAA,YACtE,YAAO,YAAP,mBAAgB,aAAY,cAAc;AAAA,QAAO;AAErD,WAAG,KAAK,UAAU,KAAK;AACvB;AAAA,IACR;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,SAAS,SAAS;AACd,SAAK,MAAM,KAAK,OAAO;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,WAAW,SAAS;AAChB,UACI,EAAE,MAAM,IAAI,MACZ,IAAI,MAAM,QAAQ,OAAO;AAC7B,QAAI,IAAI,IAAI;AACR,YAAM,OAAO,GAAG,CAAC;AAAA,IACrB;AACA,WAAO,CAAC,MAAM;AAAA,EAClB;AACJ;AAEA,IAAM,QAAQ,cAAc;AAC5B,WAAW,QAAQ,UAAQ,MAAM,IAAI,IAAI,IAAI;AAC7C,MAAM,cAAc;AACpB,cAAc,SAAS;;;ACpPvB,IACIK,cAAa,OAAO,OAAO,CAAC,CAAC;AAMjC,IAAO,kCAAQ,YAAU,MAAM,iCAAiC,UAAU,MAAM;AAAA,EAC5E,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,aAAa,MAAM;AACf,UAAM,KAAK;AAGX,OAAG,oBAAoB,oBAAI,IAAI;AAG/B,OAAG,kBAAkB,oBAAI,IAAI;AAC7B,UAAM,UAAU,GAAG,IAAI;AAAA,EAC3B;AAAA;AAAA,EAEA,gBAAgB;AAGZ,SAAK,kBAAkB,MAAM;AAE7B,SAAK,4BAA4B,OAAO;AACxC,SAAK,4BAA4B,UAAU,KAAK,QAAQ,SAAS;AACjE,UAAM,iBAAiB,MAAM,cAAc;AAAA,EAC/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,aAAa,EAAE,QAAQ,OAAO,SAAS,SAAS,GAAG;AAE/C,SAAK,4BAA4B,QAAQ,OAAO,SAAS,QAAQ;AACjE,UAAM,aAAa,GAAG,SAAS;AAAA,EACnC;AAAA,EACA,4BAA4B,QAAQ,QAAQA,aAAY,UAAUA,aAAY,UAAU;AACpF,UACI,KAAsB,MACtB,EAAE,gBAAgB,IAAI,IACtB,gBAAsB,qCAAU;AACpC,YAAQ,QAAQ;AAAA,MACZ,KAAK;AACD,wBAAgB,MAAM;AACtB;AAAA,MAEJ,KAAK,UAAU;AAEX,YAAI,eAAe;AACf,kBAAQ,MAAM,MAAM;AACpB,oBAAU,QAAQ,MAAM;AACxB,mBAAS,IAAI,GAAG,IAAI,eAAe,KAAK;AACpC,oBAAQ,KAAK,SAAS,CAAC,EAAE,CAAC,CAAC;AAC3B,kBAAM,KAAK,SAAS,CAAC,EAAE,CAAC,CAAC;AAAA,UAC7B;AAAA,QACJ;AACA,cACI,aAAe,MAAM,QACrB,eAAe,QAAQ;AAE3B,YAAI,gBAAgB,gBAAgB,MAAM;AACtC,mBAAS,IAAI,GAAG,IAAI,cAAc,KAAK;AAGnC,4BAAgB,OAAO,QAAQ,CAAC,CAAC;AAAA,UACrC;AAAA,QACJ;AAEA,YAAI,YAAY;AACZ,mBAAS,IAAI,GAAG,IAAI,YAAY,KAAK;AACjC,kBAAM,WAAW,MAAM,CAAC;AAExB,gBAAI,SAAS,aAAa;AACtB,8BAAgB,IAAI,QAAQ;AAAA,YAChC;AAAA,UACJ;AAAA,QACJ;AACA;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,QAAQ,IAAI;AACR,QAAI,SAAS,MAAM,QAAQ,EAAE;AAE7B,QAAI,CAAC,QAAQ;AACT,eAAS,KAAK,kBAAkB,IAAI,KAAK,WAAW,KAAK,EAAE,CAAC;AAAA,IAChE;AACA,WAAO;AAAA,EACX;AAAA,EACA,cAAc,QAAQ,OAAO,QAAQ,QAAQ,oBAAoB;AAC7D,UAAM,iCAAiC,CAAC,UAAU,KAAK,+BAA+B,QAAQ,MAAM;AAIpG,QAAI,gCAAgC;AAChC,aAAO,kBAAkB;AAAA,IAC7B;AACA,UAAM,cAAc,GAAG,SAAS;AAKhC,QAAI,gCAAgC;AAChC,YAAM,QAAQ,EAAE,QAAS,SAAS,SAAU,KAAK,QAAQ,OAAO;AAChE,WAAK,QAAQ,WAAW,KAAK;AAC7B,WAAK,QAAQ,UAAU,KAAK;AAAA,IAChC;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,+BAA+B,UAAU,QAAQ;AAC7C,WAAO,SAAS,eAAe,oBAAoB;AAAA,EACvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,0BAA0B,UAAU,WAAW,SAAS;AACpD,UAAM,SAAS,CAAC;AAChB,QAAI,SAAS,aAAa;AACtB,eAAS,WAAW,kBAAkB,WAAW,SAAS,OAAK,OAAO,KAAK,CAAC,CAAC;AAAA,IACjF;AACA,WAAO;AAAA,EACX;AAAA,EACA,IAAI,KAAK,MAAM;AAEX,SAAK,kBAAkB,MAAM;AAC7B,UAAM,OAAO;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,wBAAwB;AACpB,WAAO,CAAC,GAAG,KAAK,eAAe;AAAA,EACnC;AACJ;;;ACnJA,IAAO,+BAAQ,YAAU,MAAM,6BAA6B,gCAAwB,UAAU,IAAI,EAAE;AAAA,EAChG,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,qBAAqB;AACjB,WAAO,KAAK,sBAAsB;AAAA,EACtC;AAAA,EACA,mBAAmB,OAAO;AAEtB,WAAO,MAAM,mBAAmB,KAAK,MAAM,CAAC,MAAM,qBAAqB,CAAC,MAAM;AAAA,EAClF;AACJ;;;AC5BA,IAAM,iBAAiB;AACvB,IAAM,OAAO,CAAC,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,IAAI;AACtD,IAAqB,2BAArB,cAAsD,KAAK;AAAA,EACvD,OAAO,UAAU,QAAQ;AACrB,QAAI,WACA;AACJ,QAAK,YAAY,eAAe,KAAK,MAAM,GAAI;AAC3C,eAAS,CAAC,KAAK,QAAQ,UAAU,CAAC,CAAC,CAAC;AAEpC,UAAI,UAAU,CAAC,GAAG;AACd,kBAAU,CAAC,IAAI,SAAS,UAAU,CAAC,GAAG,EAAE;AACxC,eAAO,KAAK,UAAU,CAAC,CAAC;AAAA,MAC5B;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,OAAO,UAAU,KAAK;AAClB,QAAI;AAEJ,QAAI,MAAM,QAAQ,GAAG,GAAG;AACpB,OAAC,KAAK,QAAQ,IAAI;AAAA,IACtB;AACA,YAAQ,WAAW,SAAS,SAAS,IAAI,MAAM,KAAK,GAAG;AAAA,EAC3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,OAAO,SAAS;AACnB,UAAM,SAAS,CAAC;AAChB,QAAI;AACJ,QAAI,SAAS;AACT,eAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACrC,YAAK,YAAY,KAAK,UAAU,QAAQ,CAAC,CAAC,GAAI;AAC1C,iBAAO,KAAK,SAAS;AAAA,QACzB;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,OAAO,OAAOC,OAAM;AAChB,UAAM,SAAS,CAAC;AAChB,QAAI;AACJ,QAAIA,OAAM;AACN,eAAS,IAAI,GAAG,IAAIA,MAAK,QAAQ,KAAK;AAClC,YAAK,MAAM,KAAK,UAAUA,MAAK,CAAC,CAAC,GAAI;AACjC,iBAAO,KAAK,GAAG;AAAA,QACnB;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AACJ;AACA,yBAAyB,SAAS;;;ACjDlC,IACI,oBAAoB;AADxB,IAEI,kBAAkB,eAAa;AAC3B,QAAM,SAAS,UAAU,QAAQ,mBAAmB,EAAE;AACtD,SAAO,WAAW,QAAQ,QAAQ;AACtC;AALJ,IAMI,KAAK,CAAC,MAAM,SAAS,SAAS,aAAa,SAAS,gBAAgB,MAAM,OAAO;AANrF,IAOI,wBAAwB,UAAQ,qBAAqB;AACzD,IAAI;AACJ,IAAqB,6BAArB,cAAwD,KAAK;AAAA,EAGzD,OAAO,uBAAuB,QAAQ;AAClC,UACI,EAAE,WAAW,IAAI,QACjB;AAAA,MACI;AAAA,MACA;AAAA,MACA;AAAA,MACA,SAAU;AAAA,MACV;AAAA,IACJ,IAAI;AAKR,QAAI,CAAC,OAAO,oBAAoB,CAAC,SAAS,KAAK,kBAAkB;AAE7D,YACI,kBAAkB,WAAW,IAAI,SAAS,WAAW,UAAU,gBAAgB,SAAS,CAAC,GACzFC,WAAU,WAAW;AAAA,QACjB;AAAA,QACA,OAAO,WAAW;AAAA,MACtB;AACJ,WAAK,YAAY;AAAA,QACb,kBAAmB;AAAA,QACnB,WAAmB,SAAS;AAAA,QAC5B,SAAAA;AAAA,QACA;AAAA,QACA;AAAA,MACJ,CAAC;AAAA,IACL;AAEA,UAAM,gBAAgB,SAAS;AAE/B,QAAI;AAAA,MACA,YAAY;AAAA,MACZ,UAAY;AAAA,IAChB,IAAI;AAEJ,QAAI,YAAY,eAAe;AAC3B,kBAAY;AAAA,IAChB;AAEA,QAAI,OAAO;AACP,UAAI,CAAC,WAAW,UAAU,OAAO;AAC7B,kBAAU;AAAA,MACd;AAAA,IACJ,WAKS,SAAS,YAAY,eAAe;AAEzC,WAAK,YAAY;AAAA,QACb;AAAA,QACA,IAAK;AAAA,MACT,CAAC;AAED,UAAI,CAAC,WAAW,UAAU,oBAAoB;AAE1C,kBAAU,IAAI,KAAK,mBAAmB,QAAQ,IAAI,CAAC;AAAA,MACvD;AAAA,IACJ;AAEA,UAAM,sBAAsB;AAQ5B,QAAI,CAAC,OAAO,WAAW;AACnB,kBAAY,IAAI,KAAK,WAAW,IAAI,WAAW,IAAI,WAAW,CAAC,UAAU,gBAAgB,SAAS,CAAC,GAAG,aAAa,CAAC;AAAA,IACxH;AACA,WAAO,OAAO,OAAO;AAAA,MACjB,WAAY,CAAC;AAAA;AAAA,MAEb,WAAY,CAAC,QAAQ,SAAS,UAAU;AAAA,IAC5C,GAAG,QAAQ;AAAA,MACP;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,WAAwB,mCAAS;AAAA,MACjC,iBAAwB,cAAc,QAAQ;AAAA,MAC9C,uBAAwB,oBAAoB,QAAQ;AAAA,MACpD,YAAwB,SAAS;AAAA,MACjC,YAAwB,aAAa,iBAAiB,UAAU;AAAA,IACpE,CAAC;AAAA,EACL;AAAA,EACA,OAAO,mBAAmB,OAAO;AAC7B,QAAI,MAAM,cAAc;AACpB,aAAO,WAAW,KAAK,MAAM,kBAAkB,WAAW,MAAM,WAAW,gBAAgB,MAAM,kBAAkB,WAAW,SAAS,CAAC;AAAA,IAC5I;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,OAAO,kBAAkB,WAAW,SAAS,KAAK,OAAO;AACrD,QAAI,QAAQ,MAAM;AAClB,QAAI,OAAO;AACP,UAAI,QAAQ,GAAG;AACX,eAAO;AACP,qBAAa;AAAA,MACjB,OACK;AACD,eAAO;AACP,qBAAa;AAAA,MACjB;AAEA,YAAM,QAAQ,MAAM,WAAW,OAAO;AAGtC,UAAI,OAAO,QAAQ,GAAG;AAClB,iBAAS;AAAA,MACb;AAKA,eAAS,IAAI,KAAK,UAAU;AAC5B,aAAO,QAAQ,WAAW,QAAQ,KAAK,QAAQ,QAAQ,IAAI,KAAK;AAGhE,UAAI,SAAS,aAAa,SAAS,SAAS;AACxC,iBAAS;AAAA,MACb;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,OAAO,UAAU,MAAM,OAAO,MAAM;AAChC,UAAM,KAAK,IAAI,KAAK,MAAM,OAAO,IAAI;AACrC,QAAI,GAAG,YAAY,MAAM,QAAQ,GAAG,SAAS,MAAM,SAAS,GAAG,QAAQ,MAAM,MAAM;AAC/E,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EACA,OAAO,gBAAgB,UAAU;AAC7B,WAAO,QAAQ,QAAQ;AAAA,EAC3B;AAAA,EACA,OAAO,uBAAuB,OAAO,WAAWC,KAAI,OAAO;AACvD,UAAM,cAAc,MAAM,QACtB,YAAgB,CAAC;AACrB,aAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACvC,YAAM,QAAQ,UAAU,CAAC;AACzB,UAAI,KAAK,gBAAgB,KAAK,GAAG;AAC7B,cAAM,OAAO,QAAQ,IAAI,MAAM,QAAQ,CAAC,IAAI,MAAM,cAAc,KAAK;AACrE,YAAI,QAAQ,CAAC,UAAU,KAAK,QAAQ,CAAC,GAAG;AAEpC,oBAAU,KAAK,QAAQ,CAAC,IAAI;AAE5B,cAAIA,IAAG,KAAK,OAAO,IAAI,MAAM,OAAO;AAChC,mBAAO;AAAA,UACX;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,OAAO,SAAS,WAAW,gBAAgB,qBAAqB,YAAY,UAAU;AAClF,YACI,YACM,kBAAkB,sBAClB,eAAe,QAAQ,IAAI,aAAa,wBAC7C,CAAC,SAAS,aAAa,cAAc;AAAA,EAC9C;AAAA;AAAA,EAEA,OAAO,WAAW,WAAW,eAAe,kBAAkB,uBAAuB,YAAY,UAAU;AACvG,YACI,YACM,oBAAoB,wBACpB,mBAAmB,aAAa,0BACrC,CAAC,SAAS,aAAa,aAAa;AAAA,EAC7C;AACJ;AAtLI,cADiB,4BACV,aAAY;AACnB,cAFiB,4BAEV,yBAAwB;AAsLnC,2BAA2B,SAAS;;;AC7LpC,IAAqB,0BAArB,cAAqD,2BAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmB5E,OAAO,YAAY,QAAQ;AACvB,UACI;AAAA,MACI;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,IAAAC;AAAA,MACA;AAAA,MACA,QAAQ;AAAA,IACZ,IAAmB,KAAK,uBAAuB,MAAM,GACrD,EAAE,SAAS,IAAQ,YACnBC,SAAmB,YAAY,eAE/B,mBAAmB,WAAW,OAC9B,mBAAmB,KAAK,MAAMA,SAAQ,gBAAgB;AAC1D,QAAI,EAAE,MAAM,IAAU,YAClB,UAAkB,GAClB,iBAAkB,WAAW,IAAI,eAAe,mBAAmB,UAAU,KAAK,GAClF,mBAAmB,eAAe,QAAQ;AAC9C,QAAI,CAAC,WAAW,CAAC,OAAO;AACpB,cAAQ,KAAK;AAAA,IACjB;AACA,WAAO,CAAC,aAAa,mBAAmB,WAAW;AAC/C,YAAM,SAAS,KAAK,WAAW,WAAW,gBAAgB,kBAAkB,uBAAuB,YAAY,QAAQ;AACvH;AACA,UAAI,WACE,aAAa,mBAAmB,aAAcD,IAAG,MAAM,OAAO,CAAC,gBAAgB,SAAS,YAAY,KAAK,YAAY,UAAU,GAAG,SAAS,CAAC,MAAM,SAAU,SAAS,WAAW,QACpL;AACE;AAAA,MACJ;AAEA,uBAAiB,WAAW,IAAI,gBAAgB,UAAU,KAAK;AAC/D,yBAAmB,eAAe,QAAQ;AAAA,IAC9C;AAAA,EACJ;AACJ;AA5DI,cADiB,yBACV,aAAY;AA6DvB,wBAAwB,SAAS;;;AC7DjC,IAAqB,2BAArB,cAAsD,2BAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiB7E,OAAO,YAAY,QAAQ;AACvB,UACI;AAAA,MACI;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,IAAAE;AAAA,MACA;AAAA,MACA,QAAQ;AAAA,IACZ,IAAwB,KAAK,uBAAuB,MAAM,GAC1D;AAAA,MACI;AAAA,MACA,MAAAC;AAAA,IACJ,IAAwB,YACxB,EAAE,aAAa,IAAS,YACxB,aAAwB,cAAc,SAAS,GAC/C,eAAwB,cAAc,WAAW,GACjD,eAAwB,cAAc,WAAW,GACjD,UAAwB,cAAc,gBAAgB;AAC1D,QAAI,UAAa,GACb,EAAE,MAAM,IAAK,YACb,WAAa,yBAAe,OAAOA,KAAI,GACvC,eAAe;AAEnB,QAAI,EAAC,qCAAU,SAAQ;AACnB,iBAAW,CAAC,CAAC,cAAc,OAAO,CAAC,CAAC;AAAA,IACxC;AAKA,QAAI,eAAe,GAAG;AAClB,eAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACtC,YAAI,eAAe,SAAS,CAAC,EAAE,CAAC,GAAG;AAC/B,mBAAS,CAAC,EAAE,CAAC,IAAI,IAAI,eAAe,SAAS,CAAC,EAAE,CAAC;AAAA,QACrD,OACK;AACD,mBAAS,CAAC,EAAE,CAAC,KAAK;AAAA,QACtB;AAAA,MACJ;AAAA,IACJ;AAEA,aAAS,KAAK,CAAC,GAAG,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;AAGnC,oBAAgB,WAAW,QAAQ,SAAS,WAAW,IAAI,gBAAgB,WAAW,QAAQ,CAAC;AAC/F,QAAI,CAAC,aAAa,CAAC,OAAO;AACtB,cAAQ,KAAK;AAAA,IACjB;AACA,WAAO,CAAC,aAAa,cAAc,QAAQ,IAAI,WAAW;AACtD,eAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AAEtC,yBAAiB,IAAI;AAAA,UACjB,cAAc,YAAY;AAAA,UAC1B,cAAc,SAAS;AAAA,UACvB,cAAc,QAAQ,IAAI,SAAS,CAAC,EAAE,CAAC;AAAA,UACvC;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACJ;AACA,cAAM,mBAAmB,eAAe,QAAQ;AAChD,YAAI,oBAAoB,iBAAiB;AACrC,gBAAM,SAAS,KAAK,WAAW,WAAW,gBAAgB,kBAAkB,uBAAuB,YAAY,QAAQ;AACvH;AACA,cAAI,WACE,aAAa,oBAAoB,aAClCD,IAAG,MAAM,OAAO,CAAC,gBAAgB,SAAS,YAAY,KAAK,YAAY,UAAU,GAAG,SAAS,CAAC,MAAM,SACpG,SAAS,WAAW,QACvB;AACE;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAEA,sBAAgB,WAAW,QAAQ,eAAe,QAAQ,QAAQ;AAAA,IACtE;AAAA,EACJ;AACJ;AArGI,cADiB,0BACV,aAAY;AAsGvB,yBAAyB,SAAS;;;ACvGlC,IAAqB,4BAArB,cAAuD,2BAA2B;AAAA,EAE9E,OAAO,iBAAiB,MAAM,QAAQ;AAClC,UAAM,cAAc,WAAW,YAAY,IAAI;AAC/C,QAAI,SAAS;AACb,QAAI,UAAU,KAAK,IAAI,MAAM,KAAK,aAAa;AAC3C,eAAS,IAAI,KAAK,KAAK,YAAY,GAAG,KAAK,SAAS,GAAG,SAAS,IAAI,cAAc,SAAS,IAAI,MAAM;AAAA,IACzG;AACA,WAAO;AAAA,EACX;AAAA,EACA,OAAO,gBAAgB,UAAU;AAC7B,WAAO,YAAY,KAAK,IAAI,QAAQ,IAAI,KAAK,KAAK,IAAI,QAAQ,KAAK;AAAA,EACvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBA,OAAO,YAAY,QAAQ;AACvB,UACI;AAAA,MACI;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,IAAAE;AAAA,MACA;AAAA,MACA,QAAQ;AAAA,IACZ,IAAiB,KAAK,uBAAuB,MAAM,GACnD;AAAA,MACI;AAAA,MACA,MAAAC;AAAA,MACA;AAAA,MACA;AAAA,IACJ,IAAI,YACJ,WAAiB,yBAAe,OAAOA,KAAI,GAC3C,eAAiB,aAAa,UAAU,QACxC,gBAAiB,CAAC;AACtB,QACI,EAAE,UAAU,IAAK,YACjB,UAAiB,GACjB,iBACA,gBAAgB,cAChB,OAAO,gBAAgB;AAG3B,qBAAiB,WAAW,QAAQ,SAAS,WAAW,IAAI,gBAAgB,WAAW,OAAO;AAC9F,mBAAiB,IAAI,KAAK,WAAW,QAAQ,gBAAgB,SAAS,CAAC,IAAI,CAAC;AAE5E,QAAI,EAAE,aAAa,UAAU,WAAW,EAAE,YAAY,SAAS,SAAS;AACpE,kBAAY,CAAC,cAAc,QAAQ,CAAC;AAAA,IACxC;AACA,QAAI,YAAY,SAAS,QAAQ;AAE7B,eAAS,QAAQ,SAAO;AACpB,YAAI,IAAI,CAAC,GAAG;AACR,4BAA0B,mBAAmB,CAAC;AAC9C,0BAAgB,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC;AAAA,QACnC;AAAA,MACJ,CAAC;AAAA,IACL;AACA,YAAQ,CAAC,WAAW,UAAU,oBAAoB,CAAC,SAAS,UAAU,QAAQ;AAC1E,cAAQ,CAAC;AACT,UAAI,YAAY,SAAS,QAAQ;AAC7B,iBAAS,QAAQ,SAAO;AACpB,gBAAM,UAAU,IAAI,CAAC;AACrB,cAAI,OAAU,GACV,OAAU;AAEd,cAAI,IAAI,CAAC,GAAG;AACR,mBAAO,OAAO,IAAI,CAAC;AAAA,UACvB;AACA,eAAK,IAAI,MAAM,KAAK,MAAM,KAAK;AAC3B,gBAAK,iBAAiB,KAAK,kBAAkB,gBAAgB,cAAc,SAAS,CAAC,GAAI;AACrF,+BAAiB,WAAW,eAAe,gBAAgB,aAAa;AACxE,kBAAI,CAAC,cAAc,eAAe,QAAQ,CAAC,GAAG;AAE1C,8BAAc,eAAe,QAAQ,CAAC,IAAI;AAC1C,sBAAM,KAAK,cAAc;AAAA,cAC7B;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ,CAAC;AACD,cAAM,KAAK,CAAC,GAAG,MAAM,IAAI,CAAC;AAC1B,YAAI,CAAC,cAAc;AACf,eAAK,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AAC/B,6BAAiB,MAAM,CAAC;AACxB,gBAAI,kBAAkB,eAAe;AACjC,oBAAM,SAAS,KAAK,SAAS,WAAW,gBAAgB,qBAAqB,YAAY,QAAQ;AACjG;AACA,kBAAI,WACE,WAAW,kBAAkB,WAAaD,IAAG,MAAM,OAAO,CAAC,gBAAgB,SAAS,YAAY,KAAK,YAAY,UAAU,GAAG,SAAS,CAAC,MAAM,SAAW,SAAS,WAAW,QACjL;AACE,uBAAO;AAAA,cACX;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ,OACK;AACD,cAAM,mBAAmB,CAAC;AAC1B,aAAK,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AAEnC,eAAK,iBAAiB,KAAK,iBAAiB,gBAAgB,UAAU,CAAC,CAAC,MAAM,CAAC,cAAc,eAAe,QAAQ,CAAC,GAAG;AACpH,0BAAc,eAAe,QAAQ,CAAC,IAAI;AAC1C,6BAAiB,KAAK,cAAc;AAAA,UACxC;AAAA,QACJ;AAEA,yBAAiB,KAAK,CAAC,GAAG,MAAM,IAAI,CAAC;AACrC,aAAK,IAAI,GAAG,IAAI,iBAAiB,QAAQ,KAAK;AAC1C,2BAAiB,WAAW,eAAe,iBAAiB,CAAC,GAAG,aAAa;AAC7E,cAAI,cAAc;AACd,kBAAM,KAAK,cAAc;AAAA,UAC7B,WACS,kBAAkB,eAAe;AACtC,kBAAM,SAAS,KAAK,SAAS,WAAW,gBAAgB,qBAAqB,YAAY,QAAQ;AACjG;AACA,gBAAI,WACE,WAAW,iBAAiB,WAAaA,IAAG,MAAM,OAAO,CAAC,gBAAgB,SAAS,YAAY,KAAK,YAAY,UAAU,GAAG,SAAS,CAAC,MAAM,SAAW,SAAS,WAAW,QAChL;AACE;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AACA,UAAI,gBAAgB,MAAM,QAAQ;AAC9B,aAAK,uBAAuB,OAAO,WAAW,CAAAE,oBAAkB;AAC5D,cAAIA,mBAAkB,eAAe;AACjC,kBAAM,SAAS,YAAYA,mBAAkB,sBAAsBA,gBAAe,QAAQ,IAAI,aAAa,uBAAuB,CAAC,SAAS,aAAaA,eAAc;AACvK;AAEA,gBAAI,WAAW,CAAC,WAAWA,mBAAkB;AAAA,aAExCF,IAAG,MAAM,OAAO,CAACE,iBAAgB,SAAS,YAAY,KAAK,YAAY,UAAU,GAAG,SAAS,CAAC,MAAM,SAAU,SAAS,WAAW,QACrI;AACE,qBAAO;AAAA,YACX;AAAA,UACJ;AAAA,QACJ,CAAC;AAAA,MACL;AAEA,uBAAiB,WAAW,QAAQ,gBAAgB,SAAS,QAAQ;AACrE,qBAAiB,IAAI,KAAK,WAAW,QAAQ,gBAAgB,SAAS,CAAC,IAAI,CAAC;AAAA,IAChF;AAAA,EACJ;AACJ;AAhKI,cADiB,2BACV,aAAY;AAiKvB,0BAA0B,SAAS;;;AClKnC,IAAqB,2BAArB,cAAsD,2BAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiB7E,OAAO,YAAY,QAAQ;AACvB,UACI;AAAA,MACI;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,IAAAC;AAAA,MACA;AAAA,MACA,QAAQ;AAAA,IACZ,IAAiB,KAAK,uBAAuB,MAAM,GACnD;AAAA,MACI;AAAA,MACA,MAAAC;AAAA,MACA;AAAA,MACA;AAAA,IACJ,IAAI,YACJ,WAAiB,yBAAe,OAAOA,KAAI,GAC3C,eAAiB,aAAa,UAAU,QACxC,gBAAiB,CAAC;AACtB,QACI,EAAE,OAAO,IAAQ,YACjB,UAAiB,GACjB,GAAG,gBAAgB,OAAO,eAAe,aAAa;AAG1D,oBAAgB,WAAW,QAAQ,SAAS,WAAW,IAAI,gBAAgB,WAAW,MAAM;AAC5F,kBAAgB,IAAI,KAAK,WAAW,QAAQ,eAAe,QAAQ,CAAC,IAAI,CAAC;AACzE,cAAU,OAAO,KAAK,CAAC,GAAG,MAAM,IAAI,CAAC;AAErC,QAAI,EAAE,UAAU,OAAO,WAAW,EAAE,YAAY,SAAS,SAAS;AAC9D,eAAS,CAAC,cAAc,SAAS,IAAI,CAAC;AAAA,IAC1C;AACA,QAAI,YAAY,SAAS,QAAQ;AAE7B,eAAS,QAAQ,SAAO;AACpB,YAAI,IAAI,CAAC,GAAG;AACR,4BAA0B,mBAAmB,CAAC;AAC9C,0BAAgB,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC;AAAA,QACnC;AAAA,MACJ,CAAC;AAAA,IACL;AACA,YAAQ,CAAC,WAAW,UAAU,mBAAmB,CAAC,SAAS,UAAU,QAAQ;AACzE,cAAQ,CAAC;AACT,UAAI,YAAY,SAAS,QAAQ;AAC7B,iBAAS,QAAQ,SAAO;AACpB,gBAAM,UAAU,IAAI,CAAC;AACrB,cACI,OAAO,GACP,OAAO;AAEX,cAAI,IAAI,CAAC,GAAG;AACR,mBAAO,OAAO,IAAI,CAAC;AAAA,UACvB;AACA,eAAK,IAAI,MAAM,KAAK,MAAM,KAAK;AAC3B,gBAAK,iBAAiB,KAAK,kBAAkB,eAAe,aAAa,SAAS,CAAC,GAAI;AACnF,+BAAiB,WAAW,eAAe,gBAAgB,aAAa;AACxE,kBAAI,CAAC,cAAc,eAAe,QAAQ,CAAC,GAAG;AAE1C,8BAAc,eAAe,QAAQ,CAAC,IAAI;AAC1C,sBAAM,KAAK,cAAc;AAAA,cAC7B;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ,CAAC;AACD,cAAM,KAAK,CAAC,GAAG,MAAM,IAAI,CAAC;AAC1B,YAAI,CAAC,cAAc;AACf,eAAK,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AAC/B,6BAAiB,MAAM,CAAC;AACxB,gBAAI,kBAAkB,eAAe;AACjC,oBAAM,SAAS,KAAK,SAAS,WAAW,gBAAgB,qBAAqB,YAAY,QAAQ;AACjG;AACA,kBAAI,WACE,WAAW,kBAAkB,WAC9BD,IAAG,MAAM,OAAO,CAAC,gBAAgB,SAAS,YAAY,KAAK,YAAY,UAAU,GAAG,SAAS,CAAC,MAAM,SACpG,SAAS,WAAW,QACvB;AACE;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ,OACK;AACD,aAAK,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AAChC,cAAK,iBAAiB,KAAK,UAAU,cAAc,YAAY,GAAG,OAAO,CAAC,IAAI,GAAG,cAAc,QAAQ,CAAC,GAAI;AACxG,6BAAiB,WAAW,eAAe,gBAAgB,aAAa;AAExE,gBAAI,CAAC,cAAc,eAAe,QAAQ,CAAC,GAAG;AAC1C,4BAAc,eAAe,QAAQ,CAAC,IAAI;AAC1C,kBAAI,cAAc;AACd,sBAAM,KAAK,cAAc;AAAA,cAC7B,WACS,kBAAkB,eAAe;AACtC,sBAAM,SAAS,YAAY,kBAAkB,sBAAsB,eAAe,QAAQ,IAAI,aAAa,uBAAuB,CAAC,SAAS,aAAa,cAAc;AACvK;AACA,oBAAI,WACE,WAAW,kBAAkB,WAC9BA,IAAG,MAAM,OAAO,CAAC,gBAAgB,SAAS,YAAY,KAAK,YAAY,UAAU,GAAG,SAAS,CAAC,MAAM,SACpG,SAAS,WAAW,QACvB;AACE;AAAA,gBACJ;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AACA,UAAI,gBAAgB,MAAM,QAAQ;AAC9B,aAAK,uBAAuB,OAAO,WAAW,CAAAE,oBAAkB;AAC5D,cAAIA,mBAAkB,eAAe;AACjC,kBAAM,SAAS,YAAYA,mBAAkB,sBAAsBA,gBAAe,QAAQ,IAAI,aAAa,uBAAuB,CAAC,SAAS,aAAaA,eAAc;AACvK;AAEA,gBAAI,WAAW,CAAC,WAAWA,kBAAiB,UAAU;AAElD,kBAAIF,IAAG,MAAM,OAAO,CAACE,iBAAgB,SAAS,YAAY,KAAK,YAAY,UAAU,GAAG,SAAS,CAAC,MAAM,SAAU,SAAS,WAAW,OAAQ;AAC1I,uBAAO;AAAA,cACX;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ,CAAC;AAAA,MACL;AAEA,sBAAgB,WAAW,QAAQ,eAAe,QAAQ,QAAQ;AAClE,oBAAgB,IAAI,KAAK,WAAW,QAAQ,eAAe,QAAQ,CAAC,IAAI,CAAC;AAAA,IAC7E;AAAA,EACJ;AACJ;AArJI,cADiB,0BACV,aAAY;AAsJvB,yBAAyB,SAAS;;;ACxJlC,IAAM,sBAAsB,CAAC;AAC7B,CAAC,yBAAyB,0BAA0B,2BAA2B,wBAAwB,EAAE,QAAQ,QAAM;AACnH,sBAAoB,GAAG,SAAS,IAAI;AACxC,CAAC;AACD,SAAS,iCAAiC,OAAO;AAC7C,MAAI,OAAO;AACP,QAAI,OAAO,SAAS,UAAU;AAC1B,cAAQ,MAAM,MAAM,GAAG,EAAE,IAAI,UAAQ,SAAS,MAAM,EAAE,CAAC;AAAA,IAC3D;AAAA,EACJ,OACK;AACD,YAAQ;AAAA,EACZ;AACA,SAAO;AACX;AACA,SAAS,0BAA0B,OAAO;AACtC,MAAI,OAAO;AACP,QAAI,OAAO,SAAS,UAAU;AAC1B,cAAQ,MAAM,MAAM,GAAG;AAAA,IAC3B;AAAA,EACJ,OACK;AACD,YAAQ;AAAA,EACZ;AACA,SAAO;AACX;AACA,SAAS,gBAAgB,QAAQ,QAAQ;AACrC,SAAO,OAAO,MAAM,MAAM,OAAO,MAAM;AAC3C;AACA,SAAS,eAAe,OAAO;AAC3B,MAAI,KAAK,gBAAgB,UAAU,QAAW;AAC1C,WAAO,KAAK;AAAA,EAChB;AACA,MAAI,KAAK,aAAa,SAAS,MAAM;AACjC,WAAO;AAAA,EACX;AACA,UAAQ,SAAS,KAAK;AACtB,SAAO,MAAM,KAAK,IAAI,SAAY;AACtC;AAUA,IAAqB,kBAArB,cAA6C,MAAM;AAAA,EAC/C,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,oBAAoB;AACpB,WAAO;AAAA,EACX;AAAA;AAAA,EAEA,WAAW,SAAS;AAChB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA,MAKH,EAAE,MAAO,aAAa,cAAe,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAM7C,EAAE,MAAO,YAAY,cAAe,GAAG,SAAU,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMhE,EAAE,MAAO,WAAW,MAAO,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOlC,EAAE,MAAO,SAAS,WAAY,MAAM,SAAU,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAW7D;AAAA,QACI,MAAU;AAAA,QACV,SAAU;AAAA,QACV,SAAU;AAAA,MACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA;AAAA,QACI,MAAU;AAAA,QACV,SAAU;AAAA,QACV,SAAU;AAAA,MACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA;AAAA,QACI,MAAU;AAAA,QACV,SAAU;AAAA,QACV,SAAU;AAAA,MACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA;AAAA,QACI,MAAU;AAAA,QACV,SAAU;AAAA,QACV,SAAU;AAAA,MACd;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,IAAI,aAAa;AACb,WAAO,KAAK,eAAe;AAAA,EAC/B;AAAA,EACA,IAAI,WAAWC,SAAQ;AACnB,SAAK,cAAcA;AAAA,EACvB;AAAA,EACA,IAAI,qBAAqB;AACrB,WAAO,oBAAoB,KAAK,SAAS;AAAA,EAC7C;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,WAAW;AACX,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,SAAS,OAAO;AAChB,SAAK,YAAY;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,OAAO;AACP,UACI,KAAS,MACT,SAAS,CAAC;AACd,QAAI,GAAG,WAAW;AACd,aAAO,KAAK,QAAQ,GAAG,SAAS,EAAE;AAClC,UAAI,GAAG,WAAW,GAAG;AACjB,eAAO,KAAK,YAAY,GAAG,QAAQ,EAAE;AAAA,MACzC;AACA,UAAI,GAAG,QAAQ,GAAG,KAAK,QAAQ;AAC3B,eAAO,KAAK,WAAW,GAAG,KAAK,KAAK,GAAG,CAAC;AAAA,MAC5C;AACA,UAAI,GAAG,aAAa,GAAG,UAAU,QAAQ;AACrC,eAAO,KAAK,gBAAgB,GAAG,UAAU,KAAK,GAAG,CAAC;AAAA,MACtD;AACA,UAAI,GAAG,UAAU,GAAG,OAAO,QAAQ;AAC/B,eAAO,KAAK,aAAa,GAAG,OAAO,KAAK,GAAG,CAAC;AAAA,MAChD;AACA,UAAI,GAAG,OAAO;AACV,eAAO,KAAK,SAAS,GAAG,KAAK,EAAE;AAAA,MACnC;AACA,UAAI,GAAG,SAAS;AACZ,eAAO,KAAK,WAAW,WAAW,OAAO,GAAG,SAAS,GAAG,UAAU,CAAC;AAAA,MACvE;AACA,UAAI,GAAG,aAAa,GAAG,UAAU,QAAQ;AACrC,eAAO,KAAK,cAAc,GAAG,UAAU,KAAK,GAAG,CAAC;AAAA,MACpD;AAAA,IACJ;AACA,WAAO,OAAO,KAAK,GAAG;AAAA,EAC1B;AAAA,EACA,IAAI,KAAK,MAAM;AACX,UACI,KAAS,MACT,SAAS;AAAA,MACL,WAAY;AAAA,MACZ,UAAY;AAAA,MACZ,OAAY;AAAA,MACZ,SAAY;AAAA,MACZ,MAAY;AAAA,MACZ,WAAY;AAAA,MACZ,QAAY;AAAA,MACZ,WAAY;AAAA,IAChB;AACJ,OAAG,WAAW;AACd,QAAI,MAAM;AACN,YAAM,QAAQ,KAAK,MAAM,GAAG;AAC5B,eAAS,IAAI,GAAG,MAAM,MAAM,QAAQ,IAAI,KAAK,KAAK;AAC9C,cACI,OAAO,MAAM,CAAC,EAAE,MAAM,GAAG,GACzB,QAAS,KAAK,CAAC;AACnB,gBAAQ,KAAK,CAAC,GAAG;AAAA,UACb,KAAK;AACD,mBAAO,YAAY;AACnB;AAAA,UACJ,KAAK;AACD,mBAAO,WAAW;AAClB;AAAA,UACJ,KAAK;AACD,mBAAO,QAAQ;AACf,mBAAO,QAAQ;AACf;AAAA,UACJ,KAAK;AACD,gBAAI,OAAO;AACP,qBAAO,UAAU,WAAW,MAAM,OAAO,GAAG,UAAU;AAAA,YAC1D,OACK;AACD,qBAAO,UAAU;AAAA,YACrB;AACA,mBAAO,QAAQ;AACf;AAAA,UACJ,KAAK;AACD,mBAAO,OAAO;AACd;AAAA,UACJ,KAAK;AACD,mBAAO,YAAY;AACnB;AAAA,UACJ,KAAK;AACD,mBAAO,SAAS;AAChB;AAAA,UACJ,KAAK;AACD,mBAAO,YAAY;AACnB;AAAA,QACR;AAAA,MACJ;AAAA,IACJ;AACA,OAAG,IAAI,MAAM;AACb,QAAI,MAAM;AACN,SAAG,SAAS;AAAA,IAChB;AACA,OAAG,SAAS;AAAA,EAChB;AAAA,EACA,UAAU,OAAO,CAAC,GAAG;AACjB,UACI,KAAqB,MACrB,EAAE,MAAM,SAAS,IAAI;AACzB,OAAG,8BAA8B;AACjC,WAAO,KAAK;AACZ,WAAO,KAAK;AACZ,UAAM,UAAU,GAAG,SAAS;AAC5B,QAAI,MAAM;AACN,SAAG,yBAAyB;AAC5B,SAAG,OAAO;AACV,SAAG,wBAAwB;AAAA,IAC/B;AACA,OAAG,WAAW;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,kBAAkB,WAAW,SAASC,KAAI;AACtC,QAAI,KAAK,SAAS,WAAW;AACzB,WAAK,mBAAmB,YAAY;AAAA,QAChC,YAAa;AAAA,QACb;AAAA,QACA;AAAA,QACA,GAAG,MAAM,SAAS,OAAO,UAAU;AAC/B,iBAAOA,IAAG,SAAS,gBAAgB,MAAM,KAAK,GAAG,OAAO,SAAS,IAAI;AAAA,QACzE;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,WAAW;AAnTf;AAoTQ,UACI,KAAoB,MACpB,qBAAoB,QAAG,aAAH,mBAAa,WACjC,SAAoB,CAAC;AACzB,OAAG,eAAe;AAClB,YAAQ,GAAG,WAAW;AAAA,MAClB,KAAK;AACD,eAAO,YAAe;AACtB,eAAO,OAAe;AACtB,eAAO,YAAe;AACtB,eAAO,SAAe;AACtB;AAAA,MACJ,KAAK,UAAW;AACZ,eAAO,YAAY;AACnB,eAAO,YAAY;AACnB,eAAO,SAAS;AAChB,cAAM,EAAE,MAAAC,MAAK,IAAI;AACjB,YAAI,sBAAqBA,SAAA,gBAAAA,MAAM,YAAW,KAAKA,MAAK,CAAC,MAAM,yBAAyB,UAAU,kBAAkB,OAAO,CAAC,GAAG;AACvH,iBAAO,OAAO;AAAA,QAClB;AACA;AAAA,MACJ;AAAA,MACA,KAAK,WAAY;AACb,aAAI,QAAG,cAAH,mBAAc,QAAQ;AACtB,iBAAO,YAAY;AACnB,iBAAO,OAAO;AAAA,QAClB;AACA,eAAO,SAAS;AAChB,cAAM,EAAE,UAAU,IAAI;AACtB,YAAI,sBAAqB,uCAAW,YAAW,KAAK,UAAU,CAAC,MAAM,kBAAkB,QAAQ,GAAG;AAC9F,iBAAO,YAAY;AAAA,QACvB;AACA;AAAA,MACJ;AAAA,MACA,KAAK,UAAW;AACZ,eAAO,YAAY;AACnB,cAAM,EAAE,OAAO,IAAI;AACnB,YAAI,sBAAqB,iCAAQ,YAAW,KAAK,OAAO,CAAC,MAAM,kBAAkB,SAAS,IAAI,GAAG;AAC7F,iBAAO,SAAS;AAAA,QACpB;AACA;AAAA,MACJ;AAAA,IACJ;AACA,OAAG,IAAI,MAAM;AACb,OAAG,eAAe;AAAA,EACtB;AAAA,EACA,QAAQ,MAAM;AACV,UAAM,SAAS,MAAM,KAAK,GAAG,IAAI;AACjC,WAAO,aAAa,KAAK;AACzB,WAAO,WAAa,KAAK;AACzB,WAAO;AAAA,EACX;AAAA,EACA,YAAY,OAAO,QAAQ,QAAQ;AAC/B,UACI,SAAe,MAAM,YAAY,OAAO,QAAQ,MAAM,GACtD,EAAE,SAAS,IAAI;AACnB,QAAI,CAAC,KAAK,cAAc;AAEpB,WAAK,SAAS;AAAA,IAClB;AACA,QAAI,UAAU;AACV,eAAS,uBAAuB,IAAI;AACpC,UAAI,CAAC,KAAK,8BAA8B;AACpC,iBAAS,oBAAoB;AAAA,MACjC;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,IAAI,OAAO,UAAU,MAAM;AACvB,UAAM,SAAS,OAAO,UAAU,WAAW,QAAQ,EAAE,CAAC,KAAK,GAAI,MAAM;AAErE,QAAI,OAAO,OAAO;AACd,aAAO,UAAU;AAAA,IACrB,WAES,OAAO,SAAS;AACrB,aAAO,QAAQ;AAAA,IACnB;AACA,UAAM,IAAI,QAAQ,QAAW,GAAG,IAAI;AAAA,EACxC;AAAA,EACA,IAAI,+BAA+B;AAC/B,WAAO,QAAQ,KAAK,2BAA2B;AAAA,EACnD;AAAA,EACA,2BAA2B;AACvB,SAAK;AAAA,EACT;AAAA,EACA,0BAA0B;AACtB,QAAI,KAAK;AAA6B,WAAK;AAAA,EAC/C;AACJ;AACA,gBAAgB,SAAS;;;ACzYzB,SAAS,2BAA2B,OAAO;AACvC,QACI,SAAiB,CAAC,GAClB,EAAE,WAAW,IAAI;AACrB,MAAI,OAAO;AACP,YAAQ,OAAO,SAAS,WAAW,MAAM,MAAM,GAAG,IAAI,YAAY,QAAQ,KAAK;AAC/E,UAAM,QAAQ,UAAQ;AAClB,UAAI,OAAO,QAAQ,UAAU;AACzB,eAAO,WAAW,MAAM,MAAM,UAAU;AAAA,MAC5C;AAEA,UAAI,CAAC,MAAM,IAAI,GAAG;AACd,eAAO,WAAW,QAAQ,IAAI,CAAC,IAAI;AAAA,MACvC;AAAA,IACJ,CAAC;AAAA,EACL;AACA,SAAO;AACX;AACA,SAAS,6BAA6B,OAAO;AACzC,QACI,SAAiB,CAAC,GAClB,EAAE,WAAW,IAAI;AACrB,aAAW,QAAQ,OAAO;AACtB,QAAI,MAAM,IAAI,GAAG;AACb,aAAO,KAAK,WAAW,OAAO,WAAW,SAAS,IAAI,GAAG,UAAU,CAAC;AAAA,IACxE;AAAA,EACJ;AACA,SAAO;AACX;AACA,IAAMC,cAAa,CAAC;AAoBpB,IAAO,4BAAQ,YAAU,MAAM,2BAA2B,UAAU,UAAU;AAAA,EAC1E,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,oBAAoB;AACpB,WAAO;AAAA,EACX;AAAA,EACA,WAAW,SAAS;AAChB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOH;AAAA,QACI,MAAW;AAAA,QACX,UAAW;AAAA,MACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAmCA;AAAA,QACI,MAAY;AAAA,QACZ,SAAY;AAAA,QACZ,WAAY;AAAA,QACZ,UAAY;AAAA,MAChB;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,SAAS;AACL,QAAI,KAAK,cAAc;AACnB,YACI,KAAK,MACL,EAAE,kBAAkB,IAAI;AAC5B,SAAG,YAAY;AACf,wBAAkB,WAAW;AAC7B,SAAG,yBAAyB;AAC5B,wBAAkB,SAAS;AAAA,IAC/B,OACK;AACD,aAAO,MAAM,OAAO,GAAG,SAAS;AAAA,IACpC;AAAA,EACJ;AAAA,EACA,IAAI,aAAa;AA7IrB;AA8IQ,QAAI,SAAU,KAAK,kBAAgB,UAAK,mBAAL,mBAAqB,eAAe,MAAM;AAI7E,QAAI,CAAC,YAAU,UAAK,eAAL,mBAAiB,4BAA2B;AACvD,eAAS,KAAK;AAAA,IAClB;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,kBAAkB;AAClB,WAAO,KAAK,oBAAoB;AAAA,EACpC;AAAA,EACA,IAAI,gBAAgB,OAAO;AACvB,SAAK,mBAAmB;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoCA,cAAc,YAAY,UAAU,eAAe;AAC/C,UAAM,KAAK;AACX,QAAI;AACJ,QAAI,YAAY;AACZ,UAAI,CAAC,WAAW,mBAAmB;AAC/B,YAAI,OAAO,eAAe,UAAU;AAChC,uBAAa;AAAA,YACT,WAAY;AAAA,UAChB;AACA,cAAI,UAAU;AACV,uBAAW,WAAW;AAAA,UAC1B;AAEA,cAAI,eAAe;AACf,gBAAI,yBAAyB,MAAM;AAC/B,yBAAW,UAAU;AAAA,YACzB,OACK;AACD,yBAAW,QAAQ;AAAA,YACvB;AAAA,UACJ;AAAA,QACJ;AACA,qBAAa,IAAI,GAAG,gBAAgB,UAAU;AAAA,MAClD;AAIA,iBAAW,WAAW;AACtB,uBAAiB,WAAW;AAAA,IAChC;AACA,OAAG,aAAiB;AACpB,OAAG,iBAAiB;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,aAAa;AACb,UACI,KAAK,MACL,OAAO,GAAG;AACd,QAAI,CAAC,GAAG,eAAe,MAAM;AACzB,SAAG,cAAc,IAAI,GAAG,gBAAgB,EAAE,MAAM,UAAW,IAAI,IAAK,GAAG,GAAG,EAAE,cAAc,CAAC;AAAA,IAC/F;AACA,WAAO,GAAG;AAAA,EACd;AAAA,EACA,IAAI,WAAW,YAAY;AACvB,UAAM,KAAK;AACX,OAAG,cAAc;AACjB,QAAI,YAAY;AAEZ,iBAAW,WAAW;AACtB,SAAG,iBAAmB,WAAW;AAAA,IACrC,OACK;AAGD,UAAI,GAAG,cAAc;AACjB,WAAG,QAAQ,kBAAkB,IAAI;AAAA,MACrC,OACK;AACD,WAAG,iBAAiB;AAAA,MACxB;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,cAAc;AAGd,WAAO,QAAQ,CAAC,KAAK,gBAAgB,KAAK,UAAU;AAAA,EACxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,eAAe;AACf,WAAO,QAAQ,KAAK,iBAAiB;AAAA,EACzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,oBAAoB;AACpB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,gBAAgB;AAChB,WAAO,MAAM,kBAAkB,CAAC,KAAK,qBAAqB,CAAC,KAAK;AAAA,EACpE;AAAA,EACA,IAAI,kBAAkB,mBAAmB;AACrC,SAAK,qBAAqB;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,2BAA2B,WAAW,UAAU,WAAW;AACvD,WAAO,KAAK,WAAW,0BAA0B,MAAM,WAAW,OAAO;AAAA,EAC7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,IAAI,cAAc;AACd,QAAI,KAAK,aAAa;AAClB,YAAM,SAAS,CAAC;AAEhB,WAAK,cAAc,QAAQ,gBAAc;AACrC,YAAI,eAAe,MAAM;AACrB,iBAAO,KAAK,UAAU;AAAA,QAC1B;AAAA,MACJ,CAAC;AACD,aAAO;AAAA,IACX;AACA,WAAOA;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,gBAAgB;AAChB,WAAO,KAAK,oBAAoB,KAAK,kBAAkB,oBAAI,IAAI;AAAA,EACnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,iBAAiB,gBAAgB,aAAa,KAAK,YAAY;AAC3D,UAAM,OAAO,eAAe,aAAa,eAAe,iBAAiB;AAEzE,6CAAY,kBAAkB,OAAO,KAAK,oBAAoB,IAAI;AAElE,SAAK,cAAc,OAAO,WAAW,QAAQ,IAAI,CAAC;AAAA,EACtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,sBAAsB,MAAM;AACxB,SAAK,cAAc,QAAQ,CAAC,YAAY,YAAY;AAChD,UAAI,WAAW,SAAS,OAAO,KAAK,MAAM;AACtC,aAAK,iBAAiB,UAAU;AAAA,MACpC;AAAA,IACJ,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,kBAAkB,YAAY;AAI1B,KAAC,MAAM,GAAG,KAAK,WAAW,EAAE,QAAQ,gBAAc,KAAK,iBAAiB,YAAY,UAAU,CAAC;AAAA,EACnG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,sBAAsB;AArY1B;AAsYQ,SAAK,mBAAiB,UAAK,eAAL,mBAAiB,SAAQ;AAAA,EACnD;AAAA,EACA,uBAAuB,aAAa,KAAK,YAAY;AAGjD,QAAI,WAAW,SAAS;AACpB,YACI,UAAqB,WAAW,UAAU,WAAW,OAAO,GAC5D,EAAE,eAAe,IAAI;AAEzB,WAAK,sBAAsB,OAAO;AAElC,UAAI,gBAAgB;AAChB,mBAAW,WAAW,gBAAgB;AAClC,gBAAM,gBAAgB,WAAW,SAAS,OAAO;AACjD,cAAI,iBAAiB,SAAS;AAC1B,mBAAO,eAAe,OAAO;AAAA,UACjC;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,iBAAiB;AAnazB;AAoaQ,aAAO,UAAK,KAAK,aAAV,mBAAoB,cAAa,KAAK;AAAA,EACjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,kBAAkB;AAClB,WAAO,2BAA2B,mBAAmB,IAAI;AAAA,EAC7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,gBAAgB,gBAAgB,SAAS;AA7b7C;AA8bQ,UACI,KAAwB,MACxB;AAAA,MACI;AAAA,MACA;AAAA,MACA;AAAA,IACJ,IAAwB,IACxB,qBAAwB,QAAG,eAAH,mBAAe,mBACvC,gBAAwB,WAAW,QAAQ,cAAc,GACzD,KAAwB,GAAG,oBAAoB,gBAAgB,aAAa,GAC5E,cAAwB,EAAE,iBAAiB,GAAG,YAC9C,EAAE,SAAS,IAAa,GAAG;AAE/B,QAAI,aAAe,uDAAmB,IAAI,KACtC,EAAE,SAAS,IAAI;AAInB,QAAI,GAAG,YAAY,GAAG,UAAU,CAAC,WAAW;AACxC,iBAAW,WAAW,GAAG,GAAG,cAAc,GAAG,QAAQ,QAAQ,IAAI,GAAG,UAAU,QAAQ,CAAC;AAAA,IAC3F;AAEA,UAAM,oBAAoB,aAAa,SAAY,WAAW,IAAI,gBAAgB,UAAU,GAAG,YAAY,IAAI;AAC/G,QAAI,CAAC,YAAY;AAGb,UAAI,WAAW,aAAa;AACxB,qBAAa;AAGb,YAAI,CAAC,aAAa;AACd,aAAG,gBAAgB,gBAAgB,mBAAmB,IAAI;AAI1D,qBAAW,yBAAyB;AACpC,qBAAW,SAAS;AACpB,qBAAW,wBAAwB;AAAA,QACvC;AAIA,aAAK,mBAAmB;AAAA,MAC5B,OAEK;AACD,qBAAa,GAAG;AAAA,UACZ;AAAA,YACI,CAAC,SAAS,GAAG,UAAU,GAAW;AAAA,YAClC,CAAC,SAAS,UAAU,UAAU,GAAI;AAAA,YAClC,CAAC,SAAS,QAAQ,UAAU,GAAM;AAAA,YAClC,CAAC,SAAS,SAAS,UAAU,GAAK;AAAA,YAClC,gBAAkC;AAAA,YAClC,gBAAkC;AAAA,UACtC;AAAA,UACA,EAAE,oBAAqB,KAAK;AAAA,QAChC;AACA,mBAAW,oBAAoB;AAAA,MACnC;AACA,6DAAmB,IAAI,IAAI;AAG3B,oBAAc,IAAI,eAAe,UAAU;AAAA,IAC/C;AACA,WAAO;AAAA,EACX;AAAA,EACA,oBAAoB,OAAO,KAAK,WAAW,UAAU,MAAM;AACvD,WAAO,cAAc,KAAK,EAAE,IAAI,WAAW,WAAW,QAAQ,IAAI,CAAC;AAAA,EACvE;AAAA;AAAA,EAEA,mBAAmB,QAAQ,QAAQ;AApgBvC;AAqgBQ,QAAI,CAAC,KAAK,cAAc;AACpB;AAAA,IACJ;AACA,UACI,KAAK,MACL;AAAA,MACI;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ,IAAkB,IAClB,QAAkB,cAAc,kBAAkB,WAAW,OAG7D,gBAAkB,sCAAQ,oBAAR,mBAAyB,UAAS,GAAG,KAAK;AAChE,sBAAkB,WAAW;AAC7B,OAAG,yBAAyB;AAC5B,OAAG,aAAa;AAGhB,OAAG,QAAQ,MAAM,GAAG,WAAW,kBAAkB,UAAU,CAAC;AAC5D,QAAI,aAAa;AAEb,aAAO,GAAG,KAAK;AAAA,IACnB;AAEA,sBAAkB,WAAW,IAAI,IAAI,MAAM;AAG3C,QAAI,OAAO;AACP,SAAG,WAAW,QAAQ,QAAQ;AAAA,IAClC;AACA,QAAI,eAAe,UAAU;AACzB,SAAG,OAAO,eAAe,QAAQ;AAAA,IACrC;AAEA,QAAI,aAAa;AACb,aAAO,GAAG,KAAK;AAAA,IACnB;AACA,QAAI,QAAQ;AACR,aAAO,OAAO;AAAA,IAClB;AAEA,sBAAkB,SAAS;AAAA,EAC/B;AAAA,EACA,YAAY,OAAO,QAAQ,WAAW,MAAM;AACxC,UACI,KAAiB,MACjB,EAAE,WAAW,IAAI;AAErB,QAAI,oBAAoB,QAAQ;AAC5B,SAAG,cAAc;AAIjB,+CAAY,gBAAgB,OAAO,eAAe,QAAQ,QAAQ,UAAU;AAAA,IAChF;AAQA,QAAI,GAAG,cAAc;AACjB,SAAG,mBAAmB,QAAQ,MAAM;AAAA,IACxC,WAES,sBAAsB,QAAQ;AACnC,SAAG,KAAK,SAAS,iBAAiB;AAClC,aAAO,GAAG,KAAK,SAAS;AAGxB,SAAG,iBAAiB,OAAO,iBAAiB,KAAK;AAAA,IACrD;AACA,WAAO,MAAM,YAAY,OAAO,QAAQ,QAAQ,GAAG,IAAI;AAAA,EAC3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,2BAA2B;AACvB,UACI,KAAwC,MAGxC,EAAE,mBAAmB,gBAAgB,UAAU,IAAI;AAEvD,OAAG,oBAAoB;AAIvB,sBAAkB,iBAAiB,cAAc;AAIjD,QAAI,GAAG,gBAAgB;AAEnB,wBAAkB,WAAW,UAAU,WAAW,IAAI,WAAW,IAAI,QAAQ;AAAA,IACjF;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,iBAAiB,MAAM;AACvB,QAAI,MAAM;AACN,YAAM,iBAAiB,KAAK,mBAAmB,KAAK,iBAAiB,CAAC;AACtE,qBAAe,WAAW,QAAQ,IAAI,CAAC,IAAI;AAAA,IAC/C;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,iBAAiB,kBAAkB;AAC/B,WAAO,KAAK,IAAI;AAAA,MACZ;AAAA,IACJ,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,aAAa,MAAM;AA7oBvB;AA8oBQ,YAAO,UAAK,mBAAL,mBAAsB,WAAW,QAAQ,IAAI;AAAA,EACxD;AACJ;;;AC9oBA,IACI,WAAW,MAAO,KAAK,KAAK;AA8BhC,IAAO,0BAAQ,YAAU,MAAM,wBAAwB,OAAO;AAAA,EAC1D,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA,EAEA,WAAW,eAAe;AACtB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBA,WAAW,SAAS;AAChB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAqEH;AAAA,QACI,MAAW;AAAA,QACX,UAAW;AAAA,MACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAkDA;AAAA,QACI,MAAW;AAAA,QACX,MAAW;AAAA,QACX,SAAW;AAAA,QACX,UAAW;AAAA,MACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA;AAAA,QACI,MAAS;AAAA,QACT,QAAS;AAAA,UACL,MAAO;AAAA,QACX;AAAA,QACA,SAAW;AAAA,QACX,UAAW;AAAA,QACX,SAAW;AAAA,MACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA;AAAA,QACI,MAAe;AAAA,QACf,MAAe;AAAA,QACf,SAAe;AAAA,QACf,cAAe;AAAA,QACf,UAAe;AAAA,MACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQA;AAAA,QACI,MAAe;AAAA,QACf,SAAe;AAAA,QACf,cAAe;AAAA,QACf,UAAe;AAAA,MACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA;AAAA,QACI,MAAe;AAAA,QACf,MAAe;AAAA,QACf,cAAe;AAAA,MACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQA;AAAA,QACI,MAAW;AAAA,QACX,UAAW;AAAA,MACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA;AAAA,QACI,MAAW;AAAA,QACX,UAAW;AAAA,MACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA;AAAA,QACI,MAAW;AAAA,QACX,UAAW;AAAA,MACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA;AAAA,QACI,MAAW;AAAA,QACX,UAAW;AAAA,MACf;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA,EAGA,2BAA2B;AACvB,SAAK,SAAS,QAAQ,gBAAc;AAChC,iBAAW,UAAU,KAAK;AAAA,IAC9B,CAAC;AAAA,EACL;AAAA,EACA,OAAO,OAAO;AACV,UAAM,OAAO,KAAK;AAClB,SAAK,yBAAyB;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA,EAIA,SAAS,WAAW,OAAO;AA1S/B;AA2SQ,QAAI,cAAc,cAAc,CAAC,KAAK,sBAAsB;AACxD,WAAK,aAAY,iBAAY,QAAQ,KAAK,MAAzB,YAA8B,CAAC;AAAA,IACpD,OACK;AACD,aAAO,MAAM,SAAS,WAAW,KAAK;AAAA,IAC1C;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,IAAI,YAAY;AAEZ,WAAO,KAAK,YAAY,OAAO,CAAC,WAAW,EAAE,SAAS,MAAM;AACxD,kBAAY,UAAU,KAAK,SAAS,SAAS;AAC7C,aAAO;AAAA,IACX,GAAG,CAAC,CAAC;AAAA,EACT;AAAA,EACA,IAAI,UAAU,WAAW;AAjU7B;AAkUQ,gBAAY,YAAY,QAAQ,SAAS;AACzC,UACI,KAAiB,MACjB,iBAAiB,UAAU,IAAI,GAAG,YAAY,IAAI;AACtD,QAAI,GAAG,sBAAsB;AACzB,SAAG,IAAI,cAAc,eAAe,CAAC,CAAC;AAAA,IAC1C,YACS,QAAG,aAAH,mBAAa,YAAY,SAAS;AACvC,SAAG,cAAc;AAAA,IACrB,OACK;AACD,YACI,sBAA0C,GAAG,YAAY,IAAI,OAAK,EAAE,SAAS,EAAE,GAC/E,EAAE,SAAU,OAAO,SAAU,SAAS,IAAI,YAAY,MAAM,gBAAgB,mBAAmB;AAEnG,SAAG,gBAAgB,IAAI,MAAM,IAAI,iBAAe,EAAE,UAAW,YAAY,OAAQ,GAAG,EAAE,CAAC;AACvF,SAAG,gBAAgB,OAAO,SAAS,IAAI,gBAAc,GAAG,YAAY,KAAK,OAAK,EAAE,SAAS,OAAO,UAAU,CAAC,CAAC;AAAA,IAChH;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,gBAAgBC,KAAI,UAAU,MAAM;AAChC,eAAW,YAAY,KAAK,WAAW;AACnC,UAAIA,IAAG,KAAK,SAAS,QAAQ,MAAM,OAAO;AACtC;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,YAAY,YAAY;AACpB,QAAI,cAAc,MAAM;AACpB,aAAO,KAAK;AAAA,IAChB;AACA,WAAO,KAAK,gBAAgB,KAAK,cAAc,QAAQ,UAAU,IAAI;AAAA,EACzE;AAAA;AAAA;AAAA,EAGA,IAAI,YAAY;AAjXpB;AAkXQ,QAAI;AACJ,QAAI,KAAK,cAAc;AACnB,WAAK,KAAK,IAAI,WAAW;AAAA,IAC7B,OACK;AAED,YAAK,UAAK,eAAL,YAAmB,MAAM;AAAA,IAClC;AACA,QAAI,KAAK,QAAQ;AACb,WAAK,KAAK,YAAY,mBAAmB,EAAE;AAAA,IAC/C;AACA,WAAO;AAAA,EACX;AAAA,EACA,IAAI,UAAU,WAAW;AACrB,QAAI,KAAK,UAAU;AACf,WAAK,aAAa;AAClB,WAAK,IAAI,EAAE,UAAU,CAAC;AAAA,IAC1B,OACK;AACD,YAAM,YAAY;AAAA,IACtB;AAAA,EACJ;AAAA,EACA,IAAI,UAAU;AAxYlB;AAyYQ,QAAI;AACJ,QAAI,KAAK,cAAc;AACnB,WAAK,KAAK,IAAI,SAAS;AAAA,IAC3B,OACK;AAED,YAAK,UAAK,aAAL,YAAiB,MAAM;AAAA,IAChC;AACA,QAAI,KAAK,QAAQ;AACb,WAAK,KAAK,YAAY,iBAAiB,EAAE;AAAA,IAC7C;AACA,WAAO;AAAA,EACX;AAAA,EACA,IAAI,QAAQ,SAAS;AACjB,QAAI,KAAK,UAAU;AACf,WAAK,WAAW;AAChB,WAAK,IAAI,EAAE,QAAQ,CAAC;AAAA,IACxB,OACK;AACD,YAAM,UAAU;AAAA,IACpB;AAAA,EACJ;AAAA;AAAA;AAAA,EAGA,IAAI,gBAAgB;AAChB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,cAAc,OAAO;AAAA,EAAC;AAAA,EAC1B,IAAI,cAAc;AACd,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,YAAY,OAAO;AAAA,EAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcxB,IAAI,UAAU;AACV,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,cAAc;AACd,WAAO,CAAC,KAAK,YAAY,KAAK;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,IAAI,cAAc;AACd,WAAO,CAAC,KAAK,gBAAgB,CAAC,KAAK,YAAY,KAAK,sBAAsB,KAAK;AAAA,EACnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,IAAI,gBAAgB;AAEhB,WAAO,MAAM,iBAAiB,CAAC,KAAK;AAAA,EACxC;AAAA,EACA,SAAS,QAAQ,eAAe,qBAAqB;AACjD,UACI,KAAK,MACL,iBAAiB,GAAG;AACxB,UAAM,SAAS,QAAQ,eAAe,mBAAmB;AAEzD,QAAI,GAAG,iBAAiB,CAAC,kBAAkB,CAAC,GAAG,aAAa,GAAG,UAAU;AACrE,iBAAW,cAAc,GAAG,UAAU;AAClC,mBAAW,OAAO;AAAA,UAAQ,OACtB,EAAE,2BAA2B,UAAU;AAAA,QAC3C;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,IAAI,aAAa;AACb,WAAO,MAAM;AAAA,EACjB;AAAA,EACA,IAAI,WAAW,OAAO;AA3e1B;AA4eQ,UAAM,aAAa;AACnB,eAAK,oBAAL,mBAAsB;AACtB,SAAK,YAAY,QAAQ,YAAU,OAAO,aAAa,KAAK;AAC5D,eAAK,oBAAL,mBAAsB;AAAA,EAC1B;AAAA;AAAA;AAAA,EAGA,IAAI,uBAAuB;AACvB,WAAO,CAAC,KAAK,cAAc,KAAK,WAAW;AAAA,EAC/C;AAAA,EACA,QAAQ,MAAM;AACV,UAAM,OAAO,MAAM,KAAK,GAAG,IAAI;AAE/B,QAAI,CAAC,KAAK,sBAAsB;AAC5B,WAAK,aAAa;AAAA,IACtB;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,kBAAkB;AAClB,UAAM,OAAO,MAAM;AACnB,QAAI,CAAC,KAAK,sBAAsB;AAC5B,aAAO,KAAK;AAAA,IAChB;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,WAAW;AACX,UAAM,EAAE,UAAU,IAAI;AACtB,WAAO,UAAU,SAAS,UAAU,CAAC,IAAI;AAAA,EAC7C;AAAA,EACA,IAAI,SAAS,gBAAgB;AAEzB,SAAK,aAAa,KAAK,YAAY,KAAK,cAAc;AAAA,EAC1D;AAAA,EACA,IAAI,aAAa;AAvhBrB;AAwhBQ,WAAO,KAAK,uBAAuB,KAAK,IAAI,YAAY,KAAI,UAAK,YAAY,CAAC,MAAlB,mBAAqB;AAAA,EACrF;AAAA,EACA,IAAI,WAAW,YAAY;AACvB,SAAK,gBAAgB,UAAU;AAAA,EACnC;AAAA,EACA,IAAI,cAAc;AA7hBtB;AA8hBQ,SAAI,UAAK,aAAL,mBAAe,YAAY,SAAS;AACpC,aAAO,KAAK,IAAI,aAAa;AAAA,IACjC,OACK;AACD,cAAO,gBAAK,cAAL,mBAAgB,IAAI,OAAK,EAAE,QAA3B,YAAkC,CAAC;AAAA,IAC9C;AAAA,EACJ;AAAA,EACA,IAAI,YAAY,KAAK;AACjB,SAAK,IAAI,eAAe,GAAG;AAAA,EAC/B;AAAA;AAAA,EAEA,IAAI,mBAAmB;AAziB3B;AA0iBQ,YAAO,gBAAK,cAAL,mBAAgB,QAAQ,oBAAmB;AAAA,MAC9C;AAAA,MACA,GAAG,eAAe;AAAA,IACtB,OAHO,YAGA,CAAC;AAAA,EACZ;AAAA,EACA,gBAAgB,YAAY,iBAAiB,OAAO;AA/iBxD;AAgjBQ,UACI,KAA8B,MAC9B,EAAE,YAAY,YAAY,IAAI;AAElC,QAAI,YAAY;AAEZ,YAAM,kBAAkB,WAAW,qBAAmB,gBAAW,gBAAX,mBAAwB;AAC9E,UAAI,cAAc,MAAM;AACpB,YAAI,CAAC,GAAG,KAAK,+BAA+B;AACxC,qBAAW,uBAAuB;AAAA,QACtC;AAEA,aAAI,2CAAa,WAAU,eAAe,YAAY,CAAC,EAAE,YAAY;AAGjE,gBAAM,kBAAkB,QAAQ,WAAW,eAAe;AAC1D,6BAAmB,gBAAgB,cAAc;AACjD,sBAAY,CAAC,EAAE,WAAW;AAC1B,6BAAmB,gBAAgB,aAAa;AAAA,QACpD,OAEK;AACD,0BAAgB,sBAAsB,IAAI,UAAU;AAAA,QACxD;AAAA,MACJ,WAES,GAAG,0BAAwB,QAAG,gBAAH,mBAAgB,SAAQ;AACxD,wBAAgB,OAAO,WAAW;AAAA,MACtC;AAAA,IACJ,WAES,CAAC,gBAAgB;AACtB,SAAG,IAAI,EAAE,WAAW,CAAC;AAAA,IACzB;AAAA,EACJ;AAAA,EACA,iBAAiB,aAAa,iBAAiB,OAAO;AAnlB1D;AAolBQ,UACI,KAA8B,MAC9B,EAAE,YAAY,YAAY,IAAI;AAClC,QAAI,GAAG,SAAS,aAAa,EAAE,YAAY,OAAO;AAC9C,aAAO;AAAA,IACX;AAEA,kBAAc,CAAC,GAAG,IAAI,IAAI,WAAW,CAAC;AAEtC,QAAI,YAAY;AAEZ,YAAM,kBAAkB,WAAW,qBAAmB,gBAAW,gBAAX,mBAAwB;AAC9E,UAAI,2CAAa,QAAQ;AAIrB,YAAI,2CAAa,QAAQ;AACrB,gBAAM,kBAAkB,QAAQ,WAAW,eAAe;AAC1D,6BAAmB,gBAAgB,cAAc;AACjD,sBAAY,QAAQ,gBAAc;AAC9B,kBAAM,qBAAqB,YAAY,KAAK,gBACxC,CAAC,YAAY,KAAK,OAAK,EAAE,eAAe,UAAU,CAAC;AACvD,gBAAI,oBAAoB;AACpB,yBAAW,WAAW;AAAA,YAC1B;AAAA,UACJ,CAAC;AACD,gBAAM,EAAE,SAAU,OAAO,SAAS,SAAS,IAAI,YAAY,MAAM,aAAa,YAAY,IAAI,gBAAc,WAAW,UAAU,CAAC;AAClI,0BAAgB,IAAI,MAAM,IAAI,iBAAe,EAAE,UAAW,YAAY,OAAQ,GAAG,EAAE,CAAC;AACpF,0BAAgB,OAAO,SAAS,IAAI,gBAAc,YAAY,KAAK,OAAK,EAAE,SAAS,OAAO,UAAU,CAAC,CAAC;AACtG,6BAAmB,gBAAgB,aAAa;AAAA,QACpD,OAEK;AACD,0BAAgB,IAAI,YAAY,IAAI,iBAAe,EAAE,UAAW,YAAY,OAAQ,GAAG,EAAE,CAAC;AAAA,QAC9F;AAAA,MACJ,OACK;AAED,wBAAgB,OAAO,WAAW;AAAA,MACtC;AAAA,IACJ,WAES,CAAC,gBAAgB;AACtB,SAAG,IAAI,EAAE,YAAY,CAAC;AAAA,IAC1B;AAAA,EACJ;AAAA;AAAA,EAEA,WAAW,SAAS,SAAS,OAAO,eAAe,OAAO;AACtD,QAAI,SAAS,CAAC,KAAK,KAAK,aAAa;AACjC,YAAM,EAAE,WAAW,IAAI;AACvB,cAAQ,MAAM,MAAM;AAAA,QAChB,KAAK;AACD,yBAAe,WAAW,cAAc;AACxC,eAAK,gBAAgB,OAAO,IAAI;AAChC;AAAA,QACJ,KAAK;AACD,yBAAe,WAAW,cAAc;AACxC,eAAK,iBAAiB,OAAO,IAAI;AACjC;AAAA,MACR;AACA,qBAAe,WAAW,cAAc;AAAA,IAC5C;AACA,UAAM,WAAW,SAAS,SAAS,OAAO,eAAe,KAAK;AAAA,EAClE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,IAAI,cAAc;AACd,WAAO,CAAC,GAAI,KAAK,YAAY,CAAC,CAAE;AAAA,EACpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,OAAO,UAAU,4BAA4B,OAAO;AAChD,UAAM,EAAE,WAAW,IAAI;AACvB,QAAI,cAAc,CAAC,WAAW,sBAAsB;AAChD,iBAAW,sBAAsB,MAAM,UAAU,yBAAyB;AAAA,IAC9E,OACK;AAGD,WAAK,aAAa,KAAK,YAAY,KAAK,QAAQ;AAChD,UAAI,CAAC,YAAY;AAEb,aAAK,KAAK,gCAAgC;AAAA,MAC9C;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,SAAS,UAAU,mBAAmB,OAAO;AAlsBjD;AAmsBQ,UAAM,KAAK;AACX,eAAW,GAAG,YAAY,KAAK,QAAQ;AAEvC,OAAG,KAAK,mBAAmB;AAC3B,aAAG,eAAH,mBAAe,0BAA0B,IAAI;AAC7C,OAAG,KAAK,mBAAmB;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,SAAS,eAAe,eAAe;AACnC,SAAK,cAAc,KAAK,WAAW,oCAAoC,MAAM,eAAe,aAAa;AAAA,EAC7G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,aAAa,UAAU;AACnB,UAAM,aAAa,KAAK,YAAY,KAAK,QAAQ;AACjD,WAAO,KAAK,YAAY,KAAK,gBAAc,WAAW,eAAe,UAAU;AAAA,EACnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,eAAe;AAxuBvB;AAyuBQ,WAAO,CAAC,IAAG,UAAK,iBAAL,YAAqB,CAAC,CAAC;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,IAAI,aAAa;AAnvBrB;AAovBQ,WAAO,CAAC,IAAG,UAAK,iBAAL,YAAqB,CAAC,CAAC;AAAA,EACtC;AAAA,EACA,IAAI,eAAe;AAtvBvB;AAwvBQ,WAAO,CAAC,IAAG,UAAK,iBAAL,YAAqB,CAAC,GAAG,IAAG,UAAK,iBAAL,YAAqB,CAAC,CAAC;AAAA,EAClE;AAAA;AAAA,EAEA,YAAY;AAAA,EAEZ;AAAA,EACA,iBAAiB;AAAA,EAEjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,IAAI,iBAAiB;AACjB,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,IAAI,aAAa;AACb,UAAM,EAAE,WAAW,IAAI;AAGvB,QAAI,cAAc,YAAa,CAAC,cAAc,KAAK,QAAS;AACxD,aAAO;AAAA,IACX;AAEA,UACI;AAAA,MACI;AAAA,MACA;AAAA,IACJ,IAAI,MACJ,qBAAqB,WAAG,UAAU,SAAS;AAE/C,QAAI,aAAa,SAAS;AACtB,yBAAmB,QAAQ,mBAAmB,QAAQ,IAAI,CAAC;AAE3D,cAAQ,WAAW,WAAG,IAAI,WAAW,UAAU,KAAK;AAAA,IACxD;AAAA,EACJ;AAAA;AAAA,EAEA,OAAO,mBAAmB,IAAI;AAC1B,QAAI,MAAM,GAAG,SAAS;AAClB,WAAK,GAAG,IAAI,WAAW;AAAA,IAC3B;AACA,QAAI,IAAI;AACJ,WAAK,WAAG,UAAU,IAAI,IAAI;AAAA,IAC9B;AACA,WAAO;AAAA,EACX;AAAA,EACA,OAAO,iBAAiB,IAAI;AACxB,QAAI,MAAM,GAAG,SAAS;AAClB,WAAK,GAAG,IAAI,SAAS;AAAA,IACzB;AACA,QAAI,OAAO,GAAG,SAAS,IAAI,KAAK,GAAG,WAAW,IAAI,KAAK,GAAG,WAAW,IAAI,KAAK,GAAG,gBAAgB,IAAI,IAAI;AACrG,WAAK,WAAG,QAAQ,IAAI,KAAK,CAAC;AAAA,IAC9B;AACA,WAAO;AAAA,EACX;AAAA,EACA,OAAO,0BAA0B,IAAI;AACjC,QAAI,MAAM,GAAG,SAAS;AAClB,WAAK,GAAG,IAAI,WAAW;AAAA,IAC3B;AACA,WAAO,WAAG,UAAU,IAAI,IAAI;AAAA,EAChC;AAAA,EACA,OAAO,wBAAwB,WAAW,SAAS;AAC/C,QAAI,aAAa,UAAU,SAAS;AAChC,gBAAY,UAAU,IAAI,SAAS;AACnC,kBAAY,UAAU,IAAI,WAAW;AAAA,IACzC;AACA,QAAI,SAAS;AACT,kBAAY,KAAK,YAAY,0BAA0B,SAAS;AAIhE,UAAI,WAAG,UAAU,SAAS,IAAI,EAAE,QAAQ,MAAM,QAAQ,QAAQ,GAAG;AAC7D,kBAAU,WAAG,IAAI,SAAS,WAAG,KAAK,EAAE;AAAA,MACxC,WACS,UAAU,QAAQ,MAAM,QAAQ,QAAQ,GAAG;AAChD,kBAAU,WAAG,UAAU,SAAS,IAAI;AAAA,MACxC;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,WAAW,WAAW;AAClB,YAAQ,WAAW;AAAA,MAEf,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACD,eAAO,KAAK;AAAA,IACpB;AACA,WAAO,MAAM,WAAW,SAAS;AAAA,EACrC;AAAA;AAEJ;;;ACv2BO,IAAM,iBAAN,cAA6B,MAAM,CAAC,2BAA2B,GAAG,CAAC,SAAS;AAC/E,QAAM,aAAa,KAAK;AAAA,EACxB,MAAMC,wBAAuB,KAAK;AAAA,IAC9B,cAAc;AACV,YAAM,GAAG,SAAS;AAClB,WAAK,aAAa;AAClB,WAAK,WAAW;AAChB,WAAK,YAAY;AAAA,IACrB;AAAA;AAAA,IAEA,WAAW,SAAS;AAChB,aAAO;AAAA,QACH,EAAE,MAAM,aAAa,MAAM,OAAO;AAAA,QAClC,EAAE,MAAM,WAAW,MAAM,OAAO;AAAA,QAChC,EAAE,MAAM,YAAY,MAAM,SAAS;AAAA,QACnC,EAAE,MAAM,gBAAgB,MAAM,gBAAgB,cAAc,MAAM;AAAA,MACtE;AAAA,IACJ;AAAA;AAAA,IAEA,IAAI,YAAY;AA5BxB;AA4B0B,cAAO,gBAAK,eAAL,YAAmB,KAAK,IAAI,WAAW,MAAvC,YAA4C;AAAA,IAAM;AAAA,IAC3E,IAAI,UAAU;AA7BtB;AA6BwB,cAAO,gBAAK,aAAL,YAAiB,KAAK,IAAI,SAAS,MAAnC,YAAwC;AAAA,IAAM;AAAA,IACrE,IAAI,WAAW;AA9BvB;AA8ByB,cAAO,gBAAK,cAAL,YAAkB,KAAK,IAAI,UAAU,MAArC,YAA0C;AAAA,IAAM;AAAA;AAAA,IAExE,IAAI,UAAU,OAAO;AAAE,WAAK,iBAAiB,KAAK;AAAA,IAAG;AAAA,IACrD,IAAI,QAAQ,OAAO;AAAE,WAAK,eAAe,KAAK;AAAA,IAAG;AAAA,IACjD,IAAI,SAAS,OAAO;AAAE,WAAK,gBAAgB,KAAK;AAAA,IAAG;AAAA;AAAA,IAEnD,MAAM,OAAO,OAAO,QAAQ,oBAAoB,eAAe;AAC3D,YAAM,KAAK;AAEX,UAAI,GAAG,WAAW,CAAC,GAAG,QAAQ,iBAAiB,OAAO,UAAU,YAAY,CAAC,eAAe;AAGxF,YAAI,eAAe,SAAS,EAAE,eAAe,GAAG,WAAW;AACvD,aAAG,SAAS,YAAY;AACxB,aAAG,WAAW;AAAA,QAClB;AACA,YAAI,aAAa,SAAS,EAAE,aAAa,GAAG,WAAW;AACnD,aAAG,SAAS,UAAU;AACtB,aAAG,WAAW;AAAA,QAClB;AAAA,MACJ;AAEA,aAAO,WAAW,MAAM,KAAK,IAAI,OAAO,OAAO,QAAQ,oBAAoB,aAAa;AAAA,IAC5F;AAAA;AAAA;AAAA,IAGA,eAAe;AACX,aAAO,KAAK;AAAA,IAChB;AAAA,IACA,iBAAiB,WAAW,eAAe,EAAE,aAAa,KAAK,WAAW;AA3DlF;AA4DY,UAAI,KAAK,cAAa,uCAAW,iBAAc,UAAK,cAAL,mBAAgB,YAAW;AACtE,aAAK,aAAa;AAClB,aAAK,QAAQ,EAAE,WAAW,aAAa,CAAC;AAAA,MAC5C;AAAA,IACJ;AAAA,IACA,MAAM,aAAa,WAAW,eAAe,MAAM;AAjE3D;AAkEY,WAAK,iBAAiB,WAAW,YAAY;AAC7C,cAAO,UAAK,YAAL,mBAAc;AAAA,IACzB;AAAA;AAAA;AAAA,IAGA,aAAa;AACT,aAAO,KAAK;AAAA,IAChB;AAAA,IACA,eAAe,SAAS,eAAe,OAAO;AA1EtD;AA2EY,UAAI,KAAK,cAAa,mCAAS,iBAAc,UAAK,YAAL,mBAAc,YAAW;AAClE,aAAK,WAAW;AAChB,aAAK,QAAQ,EAAE,SAAS,aAAa,CAAC;AAAA,MAC1C;AAAA,IACJ;AAAA,IACA,MAAM,WAAW,SAAS,eAAe,OAAO;AAhFxD;AAiFY,WAAK,eAAe,SAAS,YAAY;AACzC,cAAO,UAAK,YAAL,mBAAc;AAAA,IACzB;AAAA;AAAA;AAAA,IAGA,cAAc;AACV,aAAO,KAAK;AAAA,IAChB;AAAA,IACA,gBAAgB,UAAU,MAAM,YAAY,MAAM;AAC9C,WAAK,YAAY;AACjB,WAAK,QAAQ,EAAE,UAAU,UAAU,CAAC;AACpC,UAAI;AACA,aAAK,QAAQ,EAAE,cAAc,KAAK,CAAC;AAAA,IAC3C;AAAA,IACA,MAAM,YAAY,UAAU,MAAM,YAAY,MAAM;AA/F5D;AAgGY,WAAK,gBAAgB,UAAU,MAAM,SAAS;AAC9C,cAAO,UAAK,YAAL,mBAAc;AAAA,IACzB;AAAA,IACA,kBAAkB;AACd,aAAO,KAAK;AAAA,IAChB;AAAA;AAAA;AAAA,IAGA,cAAc;AAxGtB;AAyGY,YAAM,KAAK;AACX,YAAM,UAAU,GAAG;AACnB,YAAM,YAAY,GAAG,qBAAqB,WAAW;AACrD,YAAM,UAAU,GAAG,qBAAqB,SAAS;AACjD,YAAM,WAAW,GAAG,qBAAqB,UAAU;AAEnD,UAAI,aAAa;AACb,gBAAQ,YAAY,GAAG,aAAa;AACxC,UAAI,WAAW;AACX,gBAAQ,UAAU,GAAG,WAAW;AACpC,UAAI,YAAY;AACZ,gBAAQ,WAAW,GAAG,YAAY;AAEtC,UAAI,GAAG,cAAc,CAAC,GAAG,WAAW,eAAe;AAC/C,cAAM,cAAa,QAAG,oBAAH,mBAAoB,QAAQ,SAAS,SAAS;AACjE,YAAI,YAAY;AAIZ,gBAAM,qBAAoB,QAAG,oBAAH,mBAAoB,QAAQ,SAAS,WAAW,GAAG;AAC7E,cAAI,mBAAmB;AACnB,uBAAW,cAAc,mBAAmB;AACxC,yBAAW,WAAW,SAAS,EAAE;AAAA,YACrC;AAAA,UACJ,OACK;AACD,uBAAW,cAAc,YAAY;AACjC,kBAAI,WAAW,qBAAqB,OAAO,MAAM,GAAG,IAAI;AACpD,2BAAW,WAAW,SAAS,EAAE;AAAA,cACrC;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AACA,iBAAW,YAAY,KAAK,EAAE;AAAA,IAClC;AAAA;AAAA,IAEA,WAAW,SAAS,KAAK,OAAO,eAAe,OAAO;AA9I9D;AAgJY,WAAK,KAAK,aAAW,UAAK,sBAAL,mBAAwB,aAAY,OAAO;AAC5D,cAAM,EAAE,KAAK,IAAI;AACjB,YAAI,SAAS,eAAe,QAAQ,cAAc,SAAS,WAAW;AAClE,oBAAU;AAEV,eAAK,MAAM,IAAI,IAAI;AAAA,QACvB;AACA,YAAI,eAAe;AACf,oBAAU;AAAA,QACd;AAAA,MACJ;AACA,iBAAW,WAAW,KAAK,MAAM,SAAS,KAAK,OAAO,eAAe,KAAK;AAAA,IAC9E;AAAA;AAAA,IAEA,YAAY,OAAO,QAAQ,QAAQ,oBAAoB,eAAe;AAClE,UAAI,CAAC,KAAK,kBAAkB,CAAC,eAAe;AAExC,aAAK,QAAQ;AAAA,UACT,WAAW,KAAK,qBAAqB,WAAW;AAAA,UAChD,SAAS,KAAK,qBAAqB,SAAS;AAAA,UAC5C,UAAU,KAAK,qBAAqB,UAAU;AAAA,UAC9C,cAAc,KAAK,qBAAqB,cAAc;AAAA,QAC1D,CAAC;AAAA,MACL;AACA,iBAAW,YAAY,KAAK,MAAM,OAAO,QAAQ,QAAQ,oBAAoB,aAAa;AAAA,IAC9F;AAAA;AAAA,IAEA,uBAAuB;AA3K/B;AA4KY,YAAM,KAAK;AACX,YAAM,UAAU,GAAG;AACnB,YAAM,eAAe,eAAe;AACpC,YAAM,aAAa,aAAa;AAChC,YAAM,kBAAkB,cAAc;AACtC,YAAM,EAAE,WAAW,SAAS,UAAU,cAAc,UAAU,IAAI;AAClE,UAAI,YAAY;AAEhB,UAAI,gBAAgB,CAAC,cAAc,CAAC,iBAAiB;AAEjD,YAAI,cAAc,MAAM;AACpB,kBAAQ,UAAU;AAAA,QACtB,WAES,GAAG,qBAAqB,SAAS,KAAK,YAAY,GAAG,qBAAqB,SAAS,KAAK,CAAC,cAAc;AAC5G,kBAAQ,UAAU;AAClB,kBAAQ,WAAW;AAAA,QACvB,WAES,GAAG,qBAAqB,UAAU,MAAM,gBAAgB,CAAC,GAAG,qBAAqB,SAAS,IAAI;AACnG,sBAAY;AAAA,QAChB,WAES,GAAG,qBAAqB,SAAS,GAAG;AACzC,sBAAY;AAAA,QAChB;AAAA,MACJ,WAES,CAAC,gBAAgB,cAAc,CAAC,iBAAiB;AAEtD,YAAI,YAAY,MAAM;AAClB,kBAAQ,YAAY;AAAA,QACxB,WAES,GAAG,qBAAqB,WAAW,KAAK,CAAC,gBAAgB,YAAY,QAAQ,UAAU,GAAG,qBAAqB,WAAW,GAAG;AAClI,kBAAQ,YAAY;AACpB,kBAAQ,WAAW;AAAA,QACvB,WAES,GAAG,qBAAqB,UAAU,MAAM,gBAAgB,CAAC,GAAG,qBAAqB,WAAW,IAAI;AACrG,sBAAY;AAAA,QAChB,WAES,GAAG,qBAAqB,WAAW,GAAG;AAC3C,sBAAY;AAAA,QAChB;AAAA,MACJ,WAES,CAAC,gBAAgB,CAAC,cAAc,iBAAiB;AAEtD,YAAI,aAAa,MAAM;AACnB,kBAAQ,UAAU;AAAA,QACtB,WAES,GAAG,qBAAqB,WAAW,MAAM,aAAa,CAAC,GAAG,qBAAqB,SAAS,IAAI;AACjG,cAAI,aAAa,QAAQ,WAAW,GAAG;AACnC,oBAAQ,WAAW;AAAA,UACvB;AACA,sBAAY;AAAA,QAChB,WAES,GAAG,qBAAqB,SAAS,GAAG;AACzC,sBAAY;AAAA,QAChB;AAAA,MACJ,WAES,gBAAgB,cAAc,CAAC,iBAAiB;AAErD,YAAI,cAAc,QAAQ,YAAY,MAAM;AACxC,kBAAQ,WAAW;AAAA,QACvB,OAEK;AACD,sBAAY;AAAA,QAChB;AAAA,MACJ,WAES,gBAAgB,CAAC,cAAc,iBAAiB;AACrD,oBAAY;AAAA,MAChB,WAES,CAAC,gBAAgB,cAAc,iBAAiB;AACrD,oBAAY;AAAA,MAChB,WAES,gBAAgB,cAAc,iBAAiB;AACpD,YAAI,YAAY,MAAM;AAClB,sBAAY;AAAA,QAChB,WACS,aAAa,MAAM;AACxB,sBAAY;AAAA,QAChB,OACK;AACD,sBAAY;AAAA,QAChB;AAAA,MACJ;AAEA,YAAM,6BAA6B,GAAG,qBAAqB,WAAW;AACtE,YAAM,2BAA2B,GAAG,qBAAqB,SAAS;AAClE,YAAM,4BAA4B,GAAG,qBAAqB,UAAU;AACpE,YAAM,gCAAgC,GAAG,qBAAqB,cAAc;AAC5E,YAAM,uBAAsB,cAAG,WAAW,MAAd,mBAAiB,wBAAjB,YAAwC;AACpE,cAAQ,WAAW;AAAA,QACf,KAAK;AACD,gBAAM,eAAe,WAAW,IAAI,0BAA0B,CAAC,2BAA2B,6BAA6B;AACvH,cAAI,qBAAqB;AACrB,kBAAM,UAAU,yBAAyB,kBAAkB,IAAI,aAAa,kBAAkB;AAC9F,yBAAa,QAAQ,aAAa,QAAQ,IAAI,UAAU,KAAK,GAAI;AAAA,UACrE;AACA,kBAAQ,YAAY;AACpB;AAAA,QACJ,KAAK;AACD,gBAAM,aAAa,WAAW,IAAI,4BAA4B,2BAA2B,6BAA6B;AACtH,cAAI,qBAAqB;AACrB,kBAAM,UAAU,2BAA2B,kBAAkB,IAAI,WAAW,kBAAkB;AAC9F,uBAAW,QAAQ,WAAW,QAAQ,IAAI,UAAU,KAAK,GAAI;AAAA,UACjE;AACA,kBAAQ,UAAU;AAClB;AAAA,QACJ,KAAK;AACD,cAAI,cAAc,WAAW,KAAK,4BAA4B,0BAA0B,aAAa;AACrG,cAAI,qBAAqB;AACrB,kBAAM,UAAU,2BAA2B,kBAAkB,IAAI,yBAAyB,kBAAkB;AAC5G,2BAAe,UAAU,KAAK;AAAA,UAClC;AACA,kBAAQ,WAAW,WAAW,GAAG,+BAA+B,aAAa,aAAa;AAC1F;AAAA,MACR;AACA,UAAI,eAAe,WAAW,QAAQ,cAAc;AAChD,aAAK,aAAa,QAAQ;AAC9B,UAAI,aAAa,WAAW,QAAQ,YAAY;AAC5C,aAAK,WAAW,QAAQ;AAC5B,UAAI,cAAc,WAAW,QAAQ,aAAa;AAC9C,aAAK,YAAY,QAAQ;AAE7B,UAAI,QAAQ,cAAc;AACtB,eAAO,QAAQ;AACnB,UAAI,QAAQ,YAAY;AACpB,eAAO,QAAQ;AACnB,aAAO,QAAQ;AACf,aAAO,QAAQ;AAAA,IACnB;AAAA,EACJ;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;ACrTO,IAAM,8BAAN,cAA0C,MAAM,CAAC,+BAA+B,GAAG,CAAC,SAAS;AAChG,QAAM,aAAa,KAAK;AAAA,EACxB,MAAM,4BAA4B,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA,IAKnC,iBAAiB,UAAU;AAfnC;AAiBY,iBAAW,eAAc,UAAK,aAAL,YAAiB,CAAC,GAAG;AAC1C,YAAI,WAAW,aAAa;AACxB,iBAAO;AAAA,MACf;AACA,aAAO;AAAA,IACX;AAAA,IACA,aAAa,UAAU;AACnB,aAAO,QAAQ,KAAK,iBAAiB,QAAQ,CAAC;AAAA,IAClD;AAAA;AAAA;AAAA;AAAA,IAIA,MAAM,OAAO,UAAU;AACnB,YAAM,gBAAgB,KAAK,QAAQ,gBAAgB;AACnD,WAAK,cAAc,IAAI,cAAc;AAAA,QACjC,OAAO;AAAA,QACP;AAAA,MACJ,CAAC,CAAC;AACF,aAAO,KAAK,YAAY;AAAA,IAC5B;AAAA;AAAA;AAAA;AAAA,IAIA,MAAM,SAAS,UAAU;AACrB,YAAM,aAAa,KAAK,iBAAiB,QAAQ;AACjD,WAAK,iBAAiB,UAAU;AAChC,aAAO,KAAK,YAAY;AAAA,IAC5B;AAAA,IACA,eAAe;AAIX,UAAI,KAAK,yBAAyB,KAAK,UAAU;AAC7C,cAAM,aAAa,KAAK,cAAc;AAGtC,aAAK,SAAS,QAAQ,gBAAc,WAAW,sBAAsB,IAAI,UAAU,CAAC;AAAA,MACxF;AACA,iBAAW,aAAa,KAAK,MAAM,GAAG,SAAS;AAAA,IACnD;AAAA,IACA,SAAS;AACL,UAAI,KAAK,QAAQ;AAGb,cAAM,aAAa,KAAK,cAAc;AACtC,mBAAW,OAAO,KAAK,IAAI;AAC3B,sBAAc,WAAW,kBAAkB;AAAA,MAC/C,OACK;AACD,eAAO,WAAW,OAAO,KAAK,IAAI;AAAA,MACtC;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA,IAIA,cAAc,YAAY;AACtB,WAAK,WAAW,EAAE,gBAAgB,IAAI,UAAU;AAChD,aAAO;AAAA,IACX;AAAA;AAAA,IAEA,iBAAiB,YAAY;AACzB,WAAK,WAAW,EAAE,gBAAgB,OAAO,UAAU;AACnD,aAAO;AAAA,IACX;AAAA,EACJ;AACA,SAAO;AACX,CAAC,EAAE;AACH;;;AC1EO,IAAM,0BAAN,cAAsC,MAAM,CAAC,gBAAgB,2BAA2B,GAAG,CAAC,SAAS;AACxG,QAAM,aAAa,KAAK;AAAA,EACxB,MAAMC,iCAAgC,KAAK;AAAA,IACvC,IAAI,WAAW;AAbvB;AAcY,cAAO,gBAAK,YAAL,mBAAc,gBAAgB,qBAAqB,UAAnD,YAA4D,KAAK;AAAA,IAC5E;AAAA,IACA,aAAa,cAAc,OAAO;AAE9B,WAAK,qBAAqB,KAAK;AAC/B,YAAM,aAAa,WAAW;AAAA,IAClC;AAAA,IACA,WAAW,SAAS,KAAK,OAAO,cAAc,OAAO;AArB7D;AAuBY,UAAI,QAAQ,MAAM;AACd,mBAAK,aAAL,mBAAe,QAAQ,gBAAc,WAAW,IAAI,WAAW,KAAK;AAAA,MACxE;AACA,iBAAW,WAAW,KAAK,MAAM,SAAS,KAAK,OAAO,cAAc,KAAK;AAAA,IAC7E;AAAA,IACA,KAAK,QAAQ,MAAM,OAAO,MAAM;AAC5B,YAAM,OAAO,WAAW,KAAK,KAAK,MAAM,OAAO,IAAI;AAGnD,UAAK,aAAa,SAAS,IAAI,KAAK,CAAC,KAAK,wBAAyB,CAAC,aAAa,SAAS,IAAI,GAAG;AAE7F,aAAK,qBAAqB,KAAK;AAAA,MACnC;AACA,aAAO;AAAA,IACX;AAAA,EACJ;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;ACjCO,IAAM,2BAAN,cAAuC,MAAM,CAAC,cAAc,GAAG,CAAC,SAAS;AAC5E,QAAM,aAAa,KAAK;AAAA,EACxB,MAAMC,kCAAiC,KAAK;AAAA,IACxC,IAAI,eAAe;AACf,aAAO,KAAK,QAAQ,gBAAgB,wBAAwB,IAAI;AAAA,IACpE;AAAA,IACA,IAAI,eAAe;AACf,aAAO,KAAK,QAAQ,gBAAgB,wBAAwB,IAAI;AAAA,IACpE;AAAA,IACA,eAAe;AACX,YAAM,aAAa,KAAK;AAGxB,UAAI,KAAK,cAAc;AACnB,aAAK,aAAa,QAAQ,gBAAc,WAAW,uBAAuB,IAAI,UAAU,CAAC;AAAA,MAC7F;AACA,UAAI,KAAK,cAAc;AACnB,aAAK,aAAa,QAAQ,gBAAc,WAAW,uBAAuB,IAAI,UAAU,CAAC;AAAA,MAC7F;AACA,iBAAW,aAAa,KAAK,IAAI;AAAA,IACrC;AAAA,EACJ;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;ACxBO,IAAM,qBAAN,cAAiC,MAAM;AAAA,EAC1C;AAAA,EACA;AAAA,EACA;AACJ,GAAG,CAAC,SAAS;AACT,QAAM,aAAa,KAAK;AAAA,EACxB,MAAMC,4BAA2B,KAAK;AAAA,EACtC;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;ACbA,IAAMC,eAAc;AAwFpB,IAAqB,aAArB,cAAwCA,aAAY,OAAO,QAAQ,EAAE;AAAA,EACjE;AAAA,EACA;AAAA,EACA;AACJ,EAAE;AAAA,EACE,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AACJ;AACA,WAAW,iBAAiB;AAC5B,WAAW,SAAS;;;AClGpB,IAAM,EAAE,SAAS,IAAI;AASrB,IAAO,wBAAQ,YAAO;AAdtB;AAcyB,4BAA4B,OAAO;AAAA,IAExD,UAAU,QAAQ;AACd,YAAM,UAAU,MAAM;AACtB,WAAK,aAAa;AAAA,IACtB;AAAA;AAAA;AAAA,IAGA,gBAAgB;AAtBpB,UAAAC;AAuBQ,WAAK,YAAY,UAAU,KAAK,QAAQ,SAAS;AACjD,OAAAA,MAAA,MAAM,kBAAN,gBAAAA,IAAA;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,aAAa,EAAE,QAAQ,OAAO,SAAS,SAAS,GAAG;AAE/C,WAAK,YAAY,QAAQ,OAAO,SAAS,QAAQ;AACjD,YAAM,aAAa,GAAG,SAAS;AAAA,IACnC;AAAA,IACA,eAAe,QAAQ,MAAM;AAEzB,WAAK,YAAY,OAAO;AACxB,WAAK,YAAY,UAAU,KAAK,QAAQ,MAAM;AAC9C,YAAM,eAAe,QAAQ,IAAI;AAAA,IACrC;AAAA,IACA,cAAc,QAAQ,OAAO,QAAQ,QAAQ,oBAAoB;AAE7D,UAAK,eAAe,UAAY,aAAa,QAAS;AAClD,aAAK,YAAY,cAAc,CAAC,MAAM,GAAG,MAAM,MAAM,MAAM;AAAA,MAC/D;AACA,YAAM,cAAc,GAAG,SAAS;AAAA,IACpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,uBAAuB;AAzD3B,UAAAA;AA0DQ,OAAAA,MAAA,KAAK,eAAL,gBAAAA,IAAiB,QAAQ,cAAY,SAAS,WAAW;AAAA,IAC7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,iBAAiB,SAAS;AACtB,YACI,KAAK,MACL,aAAa,GAAG,eAAe,GAAG,aAAa,CAAC;AACpD,UAAI,UAAU;AACd,WAAK,IAAI,GAAG,CAAC,YAAY,IAAI,WAAW,QAAQ,EAAE,GAAG;AACjD,YAAI,WAAW,CAAC,EAAE,QAAQ,OAAO,GAAG;AAChC,WAAC,WAAW,WAAW,CAAC,GAAG,SAAS,OAAO;AAAA,QAC/C;AAAA,MACJ;AACA,OAAC,YAAY,WAAW,KAAK,WAAW,IAAI,cAAc,IAAI,OAAO,CAAC;AACtE,aAAO;AAAA,IACX;AAAA,IACA,eAAe,MAAM;AAhFzB,UAAAA;AAiFQ,OAAAA,MAAA,KAAK,eAAL,gBAAAA,IAAiB,QAAQ,cAAY,SAAS,KAAK,GAAG,IAAI;AAAA,IAC9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,mBAAmB,SAAS;AACxB,YACI,KAAK,MACL,EAAE,WAAW,IAAI;AACrB,eAAS,IAAI,yCAAY,QAAQ,MAAM,KAAgB;AACnD,YAAI,WAAW,CAAC,EAAE,QAAQ,OAAO,GAAG;AAChC,cAAI,WAAW,CAAC,EAAE,WAAW,OAAO,GAAG;AACnC,uBAAW,OAAO,GAAG,CAAC;AAAA,UAC1B;AACA;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA,YAAY,SAAS;AACjB,YACI,KAAiB,MACjB,EAAE,WAAW,IAAI;AACrB,gBAAU,WAAW;AACrB,eAAS,IAAI,GAAG,cAAc,IAAI,WAAW,QAAQ,EAAE,GAAG;AACtD,YAAI,WAAW,CAAC,EAAE,QAAQ,OAAO,GAAG;AAChC,iBAAO,WAAW,CAAC;AAAA,QACvB;AAAA,MACJ;AACA,UAAI,QAAQ,YAAY;AACpB,cAAM,IAAI,MAAM,+BAA+B,OAAO,OAAO,GAAG,EAAE,EAAE;AAAA,MACxE;AACA,aAAO,GAAG,iBAAiB,QAAQ;AAAA,IACvC;AAAA;AAAA,EAEJ,GAhHI,cADqB,IACd,SAAQ,kBADM;AAAA;;;ACZzB,IAAMC,wBAAuB;AAAA,EACzB,QAAQ;AAAA,EACR,OAAO;AACX;AAEO,IAAM,0BAAN,cAAsC,MAAM,CAAC,+BAA+B,GAAG,CAAC,SAAS;AAC5F,QAAM,aAAa,KAAK;AAAA,EACxB,MAAMC,iCAAgC,KAAK;AAAA,IACvC,cAAc;AACV,YAAM,GAAG,SAAS;AAClB,WAAK,wBAAwB,oBAAI,IAAI;AACrC,WAAK,yBAAyB,oBAAI,IAAI;AAAA,IAC1C;AAAA;AAAA,IAEA,aAAa,OAAO;AAhB5B;AAkBY,YAAM,cAAcD,sBAAqB,MAAM,MAAM;AACrD,YAAM,aAAa,KAAK;AACxB,UAAI,iBAAe,WAAM,YAAN,mBAAe;AAC9B,aAAK,kBAAkB;AAAA,IAC/B;AAAA;AAAA,IAEA,OAAO,SAAS,QAAQ;AACpB,YAAM,MAAM,WAAW,OAAO,KAAK,MAAM,SAAS,MAAM;AACxD,WAAK,kBAAkB;AACvB,aAAO;AAAA,IACX;AAAA;AAAA,IAEA,UAAU,QAAQ;AACd,YAAM,MAAM,WAAW,UAAU,KAAK,MAAM,MAAM;AAClD,WAAK,kBAAkB;AACvB,aAAO;AAAA,IACX;AAAA,IACA,kBAAkB,QAAQ,UAAU,OAAO,OAAO;AAE9C,YAAM,UAAU,WAAW,kBAAkB,KAAK,MAAM,GAAG,SAAS;AACpE,WAAK,kBAAkB;AACvB,aAAO;AAAA,IACX;AAAA,IACA,oBAAoB;AAChB,YAAM,EAAE,uBAAuB,uBAAuB,IAAI;AAE1D,UAAI,CAAC;AACD;AAGJ,YAAM,kBAAkB,KAAK,mBAAmB;AAChD,UAAI,mBAAmB,CAAC,gBAAgB,4BAA4B,sBAAsB,MAAM;AAC5F,cAAM,WAAW,CAAC,GAAG,qBAAqB,EAAE,OAAO,gBAAc,CAAC,gBAAgB,sBAAsB,IAAI,UAAU,CAAC;AACvH,iBAAS,SAAS,KAAK,gBAAgB,OAAO,QAAQ;AAAA,MAC1D;AACA,4BAAsB,MAAM;AAE5B,YAAM,kBAAkB,KAAK,mBAAmB;AAChD,UAAI,mBAAmB,CAAC,gBAAgB,6BAA6B,uBAAuB,MAAM;AAC9F,cAAM,WAAW,CAAC,GAAG,sBAAsB,EAAE,OAAO,gBAAc,CAAC,gBAAgB,uBAAuB,IAAI,UAAU,CAAC;AACzH,iBAAS,SAAS,KAAK,gBAAgB,OAAO,QAAQ;AAAA,MAC1D;AACA,6BAAuB,MAAM;AAAA,IACjC;AAAA,IACA,cAAc,aAAa,YAAY,OAAO;AA9DtD;AA+DY,UAAI,GAAC,UAAK,YAAL,mBAAc,uBAAsB;AACrC,cAAM,iBAAiB,KAAK,QAAQ,YAAY,EAAE;AAClD,cAAM,cAAc,kBAAkB,mBAAmB;AAEzD,YAAI,eAAe,eAAe,UAAU;AAExC,qBAAW,cAAc,eAAe,UAAU;AAC9C,uBAAW,QAAQ;AAAA,UACvB;AAAA,QACJ;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,EACJ;AACA,SAAOC;AACX,CAAC,EAAE;AACH;;;ACxEO,IAAM,sBAAN,cAAkC,MAAM,CAAC,yBAAyB,2BAA2B,GAAG,CAAC,SAAS;AAC7G,QAAM,aAAa,KAAK;AAAA,EACxB,MAAMC,6BAA4B,KAAK;AAAA,IACnC,WAAW,gBAAgB;AACvB,aAAO;AAAA,QACH,YAAY;AAAA,MAChB;AAAA,IACJ;AAAA,IACA,cAAc;AAftB;AAgBY,iBAAK,oBAAL,mBAAsB,gBAAgB,MAAM;AAAA,IAChD;AAAA,IACA,gBAAgB;AAlBxB;AAmBY,WAAK,kBAAkB;AACvB,iBAAK,oBAAL,mBAAsB,gBAAgB,MAAM;AAAA,IAChD;AAAA,EACJ;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;AChBA,IAAMC,eAAc,sBAAc,oBAAoB,OAAO,SAAS,CAAC;AAuDvE,IAAqB,aAArB,cAAwCA,aAAY;AAAA,EAChD;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ,EAAE;AAAA,EAEE,WAAW,gBAAgB;AACvB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQH,YAAa;AAAA,IACjB;AAAA,EACJ;AACJ;AAbI,cANiB,YAMV,SAAQ;AAcnB,WAAW,SAAS;;;AC7EpB,IAAO,+BAAQ,YAAU,MAAM,6BAA6B,OAAO;AAAA,EAC/D,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBA,WAAW,SAAS;AAChB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,EAAE,MAAO,oBAAoB,MAAO,UAAU;AAAA,MAC9C;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA,EAEA,UAAU,SAAS,MAAM;AACrB,WAAO,QAAQ,CAAC;AAChB,UACI,EAAE,SAAS,IAAO,MAClB,eAAkB,SAAS,QAAQ,YACnC,kBAAkB,SAAS,WAAW,YACtC,aAAkB,SAAS,MAAM,YACjC,gBAAkB,SAAS,SAAS,YACpC,UAAkB,KAAK,YAAY,GACnC,aAAkB,KAAK,eAAe,GACtC,QAAkB,KAAK,UAAU,GACjC,WAAkB,KAAK,aAAa;AAExC,QAAI,WAAW,MAAM;AACjB,WAAK,UAAU,IAAI;AAAA,IACvB,WACS,SAAS,MAAM;AACpB,WAAK,YAAY,IAAI,MAAM,UAAU,MAAM,KAAK;AAAA,IACpD;AACA,QAAI,cAAc,MAAM;AACpB,WAAK,aAAa,IAAI;AAAA,IAC1B,WACS,YAAY,MAAM;AACvB,WAAK,eAAe,IAAI,SAAS,UAAU,SAAS,KAAK;AAAA,IAC7D;AACA,UAAM,UAAU,MAAM,GAAG,IAAI;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,mBAAmB;AACnB,WAAO,KAAK,sBAAsB,KAAK,OAAO,KAAK,QAAQ;AAAA,EAC/D;AAAA,EACA,sBAAsB,OAAO,UAAU;AACnC,QAAI,UAAU;AACd,QAAI,OAAO;AACP,iBAAW,MAAM,UAAU,MAAM,KAAK;AAAA,IAC1C,OACK;AACD,iBAAW,KAAK;AAAA,IACpB;AACA,QAAI,UAAU;AACV,oBAAc,SAAS,UAAU,SAAS,KAAK;AAAA,IACnD,OACK;AACD,oBAAc,KAAK;AAAA,IACvB;AACA,WAAO,GAAG,QAAQ,IAAI,WAAW;AAAA,EACrC;AAAA,EACA,cAAc,EAAE,OAAO,SAAS,GAAG;AAC/B,WAAO,KAAK,sBAAsB,OAAO,QAAQ;AAAA,EACrD;AAAA,EACA,IAAI,OAAO,UAAU,MAAM;AAjH/B;AAkHQ,UAAM,QAAQ,KAAK,YAAY,OAAO,KAAK;AAE3C,QAAI,cAAc,OAAO;AACrB,YAAI,WAAM,aAAN,mBAAgB,QAAO,QAAW;AAClC,cAAM,aAAa,MAAM,SAAS;AAAA,MACtC;AAAA,IACJ,WAES,gBAAgB,SAAS,KAAK,YAAY,sBAAsB;AACrE,YAAM,WAAW,MAAM;AAAA,IAC3B;AAEA,QAAI,WAAW,OAAO;AAClB,YAAI,WAAM,UAAN,mBAAa,QAAO,QAAW;AAC/B,cAAM,UAAU,MAAM,MAAM;AAAA,MAChC;AAAA,IACJ,WACS,aAAa,SAAS,KAAK,YAAY,sBAAsB;AAClE,YAAM,QAAQ,MAAM;AAAA,IACxB;AACA,WAAO,MAAM,IAAI,OAAO,MAAM,GAAG,IAAI;AAAA,EACzC;AAAA,EACA,YAAY,OAAO,QAAQ,QAAQ,oBAAoB,eAAe;AAxI1E;AAyIQ,UAAM,KAAK;AAGX,QAAI,CAAC,GAAG,YAAY,yBAAwB,iCAAQ,iBAChD,QAAG,aAAH,mBAAa,QAAO,OAAO,WAAW,OAAO;AAC7C,SAAG,WAAW,OAAO,WAAW;AAAA,IACpC,WAMS,GAAG,YAAY,0BAAwB,QAAG,YAAH,mBAAY,4BACxD,iCAAQ,YAAW,EAAC,iCAAQ,WAC3B,MAAM,MAAM,UAAU,OAAO,QAAQ,SAAS,MAAM,MAAM,MAAM,OAAO,OAAO,QAAQ,QACzF;AAEE,aAAO,OAAO;AACd,aAAO,GAAG,KAAK,SAAS;AAAA,IAC5B;AACA,WAAO,MAAM,YAAY,GAAG,SAAS;AAAA,EACzC;AAAA;AAAA,EAEA,IAAI,WAAW,OAAO;AAClB,UAAM,EAAE,SAAS,IAAI;AAGrB,SAAI,qCAAU,YAAW,SAAS,OAAO,OAAO;AAC5C,WAAK,IAAI,cAAc,KAAK;AAAA,IAChC,OACK;AACD,WAAK,WAAW;AAAA,IACpB;AAAA,EACJ;AAAA,EACA,IAAI,aAAa;AA3KrB;AA6KQ,YAAO,gBAAK,aAAL,mBAAe,OAAf,YAAqB,KAAK,IAAI,YAAY;AAAA,EACrD;AAAA;AAAA,EAEA,IAAI,QAAQ,OAAO;AACf,UAAM,EAAE,MAAM,IAAI;AAGlB,SAAI,+BAAO,YAAW,MAAM,OAAO,OAAO;AACtC,WAAK,IAAI,WAAW,KAAK;AAAA,IAC7B,OACK;AACD,WAAK,QAAQ;AAAA,IACjB;AAAA,EACJ;AAAA,EACA,IAAI,UAAU;AA3LlB;AA6LQ,YAAO,gBAAK,UAAL,mBAAY,OAAZ,YAAkB,KAAK,IAAI,SAAS;AAAA,EAC/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,YAAY;AApMpB;AAqMQ,YAAO,UAAK,UAAL,mBAAY;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,eAAe;AA5MvB;AA6MQ,YAAO,UAAK,aAAL,mBAAe;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,cAAc;AACV,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA,EAGA,IAAI,eAAe;AACf,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,gBAAgB;AAjOxB;AAkOQ,UACI;AAAA,MACI;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ,IAAc,MACd,cAAc,mDAAiB;AACnC,QAAI;AACJ,QAAI,iBAAiB;AAIjB,eAAS,KAAK,WAAW,MAAM,kBAAkB,eAAe,CAAC,MAAM,kBAAkB,CAAC,SAAS;AAAA,IACvG,OAEK;AACD,eAAS,CAAC,KAAK,aAAa,QAAQ,eAAe,CAAC,CAAC;AAAA,IACzD;AAEA,WAAO,UAAU,MAAM,iBAAiB,GAAC,UAAK,UAAL,mBAAY;AAAA,EACzD;AAAA,EACA,IAAI,UAAU;AACV,WAAO,KAAK,YAAY,QAAQ,KAAK,SAAS;AAAA,EAClD;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,WAAW;AACP,QAAI,KAAK,cAAc;AACnB,aAAO,GAAG,KAAK,YAAY,IAAI,KAAK,MAAM,KAAK,KAAK,CAAC;AAAA,IACzD;AACA,WAAO;AAAA,EACX;AAAA;AAAA,EAEA,wBAAwB,WAAW,UAAU,UAAU;AAtQ3D;AAuQQ,QAAI,CAAC,MAAM,wBAAwB,WAAW,UAAU,QAAQ,GAAG;AAC/D,aAAO;AAAA,IACX;AACA,QAAI,cAAc,WAAW,cAAc,WAAW;AAClD,YAAM,cAAa,UAAK,YAAL,mBAAc;AACjC,UAAI,cAAc,WAAW,SAAS,QAAQ,MAAM,WAAW,QAAQ,QAAQ,GAAG;AAC9E,eAAO;AAAA,MACX;AAAA,IACJ;AACA,QAAI,cAAc,cAAc,cAAc,cAAc;AACxD,YAAM,iBAAgB,UAAK,YAAL,mBAAc;AACpC,UAAI,iBAAiB,cAAc,SAAS,QAAQ,MAAM,cAAc,QAAQ,QAAQ,GAAG;AACvF,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAEJ;;;ACrRA,SAAS,KAAK,YAAY;AACtB,UAAO,yCAAY,WAAU,WAAW,KAAK;AACjD;AAIO,IAAM,sBAAN,cAAkC,MAAM,CAAC,2BAA2B,GAAG,CAAC,SAAS;AACpF,QAAM,aAAa,KAAK;AAAA,EACxB,MAAMC,6BAA4B,KAAK;AAAA;AAAA,IAEnC,WAAW,SAAS;AAChB,aAAO;AAAA;AAAA,QAEH,EAAE,MAAM,YAAY,SAAS,CAAC,GAAG,MAAM,MAAM,GAAG,SAAS,MAAM;AAAA,QAC/D,EAAE,MAAM,SAAS,SAAS,CAAC,GAAG,MAAM,MAAM,GAAG,SAAS,MAAM;AAAA,MAChE;AAAA,IACJ;AAAA;AAAA,IAEA,WAAW,OAAO,OAAO,YAAY;AACjC,YAAM,EAAE,iBAAiB,YAAY,eAAe,QAAQ,IAAI;AAChE,UAAI,SAAS;AACb,UAAI,UAAU,SAAS;AACnB,cAAM,QAAQ,aAAa,OAAO,cAAc,IAAI,QAAQ,yCAAY,QAAQ,QAAQ;AACxF,YAAI;AACA,mBAAS;AACb,gBAAQ,SAAS;AAAA,MACrB;AACA,UAAI,UAAU,YAAY;AACtB,cAAM,WAAW,aAAa,OAAO,iBAAiB,IAAI,QAAQ,+CAAe,QAAQ,QAAQ;AACjG,YAAI;AACA,mBAAS;AACb,gBAAQ,YAAY;AAAA,MACxB;AAEA,iBAAW,WAAW,KAAK,MAAM,OAAO,OAAO,YAAY,IAAI;AAE/D,UAAI,mBAAmB,UAAU,CAAC,QAAQ,sBAAsB,CAAC,gBAAgB,iBAAiB,EAAC,+CAAe,kBAAiB,CAAC,gBAAgB,uBAAuB;AACvK,wBAAgB,kBAAkB;AAAA,MACtC;AAAA,IACJ;AAAA;AAAA,IAEA,cAAc;AACV,iBAAW,YAAY,KAAK,IAAI;AAChC,WAAK,WAAW,SAAS,KAAK,IAAI,OAAO,CAAC;AAC1C,WAAK,WAAW,YAAY,KAAK,IAAI,UAAU,CAAC;AAAA,IACpD;AAAA;AAAA;AAAA,IAGA,uBAAuB;AApD/B;AAsDY,UAAI,EAAE,QAAQ,KAAK,OAAO,WAAW,KAAK,SAAS,IAAI,KAAK;AAC5D,UAAI,UAAU,QAAQ,CAAE,aAAa,OAAO,cAAc,GAAI;AAC1D,cAAM,YAAW,UAAK,eAAL,mBAAiB,QAAQ;AAC1C,YAAI;AACA,eAAK,WAAW,SAAS,UAAU,KAAK;AAAA,MAChD;AACA,UAAI,aAAa,QAAQ,CAAE,aAAa,UAAU,iBAAiB,GAAI;AACnE,cAAM,YAAW,UAAK,kBAAL,mBAAoB,QAAQ;AAC7C,YAAI;AACA,eAAK,WAAW,YAAY,UAAU,KAAK;AAAA,MACnD;AAAA,IACJ;AAAA;AAAA,IAEA,oBAAoB,QAAQ;AACxB,YAAM,UAAU,KAAK;AACrB,UAAI,cAAc,SAAS;AACvB,gBAAQ,aAAa,KAAK,QAAQ,QAAQ;AAAA,MAC9C;AACA,UAAI,WAAW,SAAS;AACpB,gBAAQ,UAAU,KAAK,QAAQ,KAAK;AAAA,MACxC;AACA,iBAAW,oBAAoB,KAAK,MAAM,MAAM;AAAA,IACpD;AAAA;AAAA,IAEA,IAAI,MAAM,OAAO;AACb,WAAK,WAAW,SAAS,KAAK;AAC9B,WAAK,WAAW,WAAW,KAAK,KAAK,CAAC;AAAA,IAC1C;AAAA,IACA,IAAI,QAAQ;AACR,YAAM,QAAQ,KAAK,IAAI,OAAO;AAE9B,cAAO,+BAAO,OAAM,OAAO,QAAQ;AAAA,IACvC;AAAA;AAAA;AAAA,IAGA,IAAI,SAAS,UAAU;AACnB,WAAK,WAAW,YAAY,QAAQ;AACpC,WAAK,WAAW,cAAc,KAAK,QAAQ,CAAC;AAAA,IAChD;AAAA,IACA,IAAI,WAAW;AACX,YAAM,WAAW,KAAK,IAAI,UAAU;AAEpC,cAAO,qCAAU,OAAM,OAAO,WAAW;AAAA,IAC7C;AAAA,EACJ;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;ACjGA,IAAMC,eAAc;AAgEpB,IAAqB,kBAArB,cAA6C,6BAAqB,sBAAcA,aAAY,OAAO,KAAK,CAAC,CAAC,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBxG,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AACJ;AACA,gBAAgB,iBAAiB;AACjC,gBAAgB,SAAS;;;AC9EzB,IAAO,+BAAQ,YAAU,MAAM,6BAA6B,OAAO;AAAA,EAC/D,WAAW,QAAQ;AACfkGA,WAAW,gBAAgB;AACvB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA,MAKH,cAAe;AAAA;AAAA;AAAA;AAAA;AAAA,MAKf,cAAe;AAAA,MACf,SAAU;AAAA,IACd;AAAA,EACJ;AAAA,EACA,IAAI,mBAAmB,MAAM;AAhIjC;AAiIQ,qBAAiB,YAAY,QAAQ,cAAc;AACnD,aAAS,IAAI,GAAG,IAAI,eAAe,QAAQ,KAAK;AAC5C,UAAI,aAAa,eAAe,CAAC;AACjC,UAAI,EAAE,sBAAsB,QAAQ;AAChC,uBAAe,CAAC,IAAI,aAAa,KAAK,aAAa,UAAU;AAAA,MACjE;AACA,UAAI,CAAC,KAAK,uBAAuB,KAAK,QAAQ,UAAU,oBAAoB,WAAW,kBAAkB,IAAI,MAAM,IAAI;AACnH,cAAM,IAAI,MAAM,+BAA+B,WAAW,OAAO,iBAAiB,WAAW,UAAU,EAAE;AAAA,MAC7G;AACA,WAAI,gBAAW,UAAX,mBAAkB,YAAY;AAC9B,mBAAW,aAAa;AAAA,MAC5B;AAAA,IACJ;AACA,WAAO,MAAM,IAAI,gBAAgB,GAAG,IAAI;AAAA,EAC5C;AAAA,EACA,mBAAmB,SAAS,YAAY;AACpC,WAAO,KAAK,QAAQ,UAAU,oBAAoB,GAAG,OAAO,IAAI,UAAU,IAAI,IAAI,MAAM;AAAA,EAC5F;AAAA,EACA,aAAa,MAAM;AACf,QAAI,KAAK,sBAAsB;AAC3B,YAAM,IAAI,MAAM,6IAA6I;AAAA,IACjK;AACA,UAAM,aAAa,IAAI;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,QAAQ,SAAS;AACjB,UAAM,UAAU;AAGhB,SAAK,QAAQ,SAAS;AAAA,MAClB,UAAc;AAAA,MACd,aAAc,EAAE,OAAQ,MAAM,UAAW,KAAK;AAAA,MAC9C,YAAY,YAAY;AACpB,gBAAQ,KAAK,iCAAiC,WAAW,OAAO,gBAAgB,WAAW,UAAU,EAAE;AAAA,MAC3G;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EACA,IAAI,UAAU;AAEV,WAAO,KAAK,YAAY,MAAM;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA,EAIA,IAAI,oBAAoB;AACpB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,cAAc,oBAAoB,YAAY;AAE1C,QAAI,CAAC,sBAAsB,EAAC,yCAAY,eAAc;AAClD,aAAO;AAAA,IACX;AAEA,UAAM,KAAK;AACX,WAAO;AAAA,MACH,IAAyB,GAAG,WAAW,EAAE,KAAK,mBAAmB,EAAE;AAAA,MACnE,OAAyB;AAAA,MACzB,UAAyB,mBAAmB;AAAA,MAC5C,SAAyB,WAAW;AAAA,MACpC,YAAyB,mBAAmB,SAAS;AAAA,MACrD,cAAyB;AAAA;AAAA,MAEzB,wBAAyB;AAAA;AAAA,MAEzB,aAAa,cAAc;AACvB,eAAO,GAAG,uBAAuB,MAAM,YAAY;AAAA,MACvD;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA,EAEA,uBAAuB,sBAAsB,cAAc;AACvD,UACI,KAAa,MACb,aAAa,aAAa,MAAM,cAChC,EAAE,GAAG,IAAQ;AACjB,QAAI,EAAE,eAAe,IAAI;AACzB,QAAI,CAAC,gBAAgB;AACjB,uBAAiB,GAAG,iBAAiB,CAAC;AAAA,IAC1C;AACA,QAAI,CAAC,eAAe,EAAE,GAAG;AACrB,qBAAe,EAAE,IAAI,CAAC;AAAA,IAC1B;AACA,WAAO,eAAe,EAAE,EAAE,UAAU,MAAM,eAAe,EAAE,EAAE,UAAU,IAAI,CAAC;AAAA,EAChF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,uBAAuB,OAAOC,KAAI,UAAU;AACxC,YAAQ,KAAK,WAAW,QAAQ,KAAK;AACrC,UACI,QAAkB,QAAQA,GAAE,GAC5B,cAAkB,QAAQ,QAAQ;AACtC,QAAI,SAAS,aAAa;AACtB,aAAO,MAAM,YAAY,OAAO,CAAC,QAAQ,eAAe;AACpD,cAAM,YAAY,QAAQA,IAAG,UAAU,IAAI;AAC3C,YAAI,CAAC,eAAe,SAAS,SAAS,GAAG;AACrC,iBAAO,KAAK,SAAS;AAAA,QACzB;AACA,eAAO;AAAA,MACX,GAAG,CAAC,CAAC;AAAA,IACT;AACA,WAAO,MAAM;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,0BAA0B,UAAUA,KAAI,UAAU;AAC9C,eAAW,KAAK,cAAc,QAAQ,QAAQ;AAC9C,UACI,QAAkB,QAAQA,GAAE,GAC5B,cAAkB,QAAQ,QAAQ;AACtC,QAAI,SAAS,aAAa;AACtB,aAAO,SAAS,YAAY,OAAO,CAAC,QAAQ,eAAe;AACvD,cAAM,YAAY,QAAQA,IAAG,UAAU,IAAI;AAC3C,YAAI,CAAC,eAAe,SAAS,SAAS,GAAG;AACrC,iBAAO,KAAK,SAAS;AAAA,QACzB;AACA,eAAO;AAAA,MACX,GAAG,CAAC,CAAC;AAAA,IACT;AACA,WAAO,SAAS;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,uBAAuB,OAAO;AAC1B,WAAO,MAAM;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,0BAA0B,OAAO;AAC7B,WAAO,KAAK,OAAO,MAAM,WAAW;AAAA,EACxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,0BAA0B,UAAU;AAChC,eAAW,KAAK,cAAc,QAAQ,QAAQ;AAC9C,WAAO,SAAS;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,6BAA6B,UAAU;AACnC,SAAK,OAAO,KAAK,0BAA0B,QAAQ,CAAC;AAAA,EACxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,qBAAqB,OAAO;AACxB,WAAO,MAAM;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,qBAAqB,UAAU;AAC3B,eAAW,KAAK,cAAc,QAAQ,QAAQ;AAC9C,WAAO,qCAAU;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,sBAAsB,OAAO,WAAW,oBAAoB,MAAM,4BAA4B,OAAO;AA5VzG;AA6VQ,UACI,KAAW,MACX,WAAW,4BAA4B,IAAI,IAAI,MAAM,WAAW,IAAI;AACxE,gBAAY,YAAY,QAAQ,SAAS,EAAE,IAAI,OAAE;AAhWzD,UAAAC;AAgW4D,cAAAA,MAAA,EAAE,cAAF,OAAAA,MAAe;AAAA,KAAC;AACpE,SAAI,QAAG,eAAH,mBAAe,sBAAsB;AAErC,WAAI,WAAM,gBAAN,mBAAmB,QAAQ;AAC3B,YAAI,CAAC,GAAG,0BAA0B,OAAO,UAAU,CAAC,CAAC,GAAG;AACpD,gBAAM,WAAW,UAAU,CAAC;AAAA,QAChC;AACA,eAAO,CAAC;AAAA,MACZ,OAEK;AACD,cAAM,cAAa,eAAU,CAAC,MAAX,mBAAc;AAAA,MACrC;AAAA,IACJ;AACA,QAAI,iBAAiB,CAAC;AACtB,OAAG,kBAAkB;AAErB,cAAU,QAAQ,cAAY;AAjXtC,UAAAA;AAkXY,YAAM,qBAAqB,GAAG,iCAAiC,OAAO,QAAQ;AAC9E,UAAI,CAAC,oBAAoB;AACrB,cAAM,aAAa;AAAA,UACf;AAAA,UACA;AAAA,QACJ;AACA,uBAAe,MAAKA,MAAA,uDAAoB,gBAApB,OAAAA,MAAmC,UAAU;AAAA,MACrE,WACS,2BAA2B;AAChC,iBAAS,OAAO,kBAAkB;AAAA,MACtC;AAAA,IACJ,CAAC;AACD,qBAAiB,GAAG,IAAI,cAAc;AACtC,QAAI,2BAA2B;AAC3B,SAAG,OAAO,MAAM,KAAK,QAAQ,CAAC;AAAA,IAClC;AAEA,OAAG,iBAAiB;AACpB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,0BAA0B,OAAO,WAAW;AACxC,UACI,KAAK,MACL,sBAAsB,CAAC;AAC3B,QAAI,CAAC,WAAW;AACZ,aAAO,GAAG,0BAA0B,KAAK;AAAA,IAC7C;AACA,gBAAY,YAAY,QAAQ,SAAS;AACzC,aAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACvC,UAAI,GAAG,0BAA0B,OAAO,UAAU,CAAC,CAAC,GAAG;AACnD,4BAAoB,KAAK,GAAG,iCAAiC,OAAO,UAAU,CAAC,CAAC,CAAC;AAAA,MACrF;AAAA,IACJ;AACA,WAAO,GAAG,OAAO,mBAAmB;AAAA,EACxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,0BAA0B,OAAO,UAAU;AACvC,WAAO,QAAQ,KAAK,iCAAiC,OAAO,QAAQ,CAAC;AAAA,EACzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,iCAAiC,OAAO,UAAU;AAC9C,QAAI;AAGJ,QACI,EAAE,QAAQ,KAAK,WAAW,QAAQ,KAAK,MACvC,EAAE,cAAc,MAAM;AAAA;AAAA;AAAA,IAItB,EAAE,WAAW,KAAK,cAAc,QAAQ,QAAQ,QAAQ,IAC1D;AACE,aAAO;AAAA,IACX;AACA,WAAO,KAAK,cAAc,YAAY,KAAK,OAAE;AA9brD;AA8bwD,sBAAE,aAAF,mBAAY,eAAc,SAAS;AAAA,KAAS,GAAG,KAAK;AAAA,EACxG;AAAA;AAEJ;;;AChcO,IAAM,cAAc,CAAC,UAAU,OAAO,KAAK,MAAM;AACjD,IAAM,0BAA0B,CAAC,UAAU;AAC9C,MAAI,iBAAiB,OAAO,iBAAiB;AACzC,WAAO,GAAG,KAAK;AACnB,SAAO,GAAG,CAAC,KAAK,CAAC;AACrB;AACO,IAAM,QAAQ,CAAC,UAAU,IAAI,QAAQ,aAAW,WAAW,SAAS,KAAK,CAAC;AAC1E,IAAM,SAAS,CAACC,YAAW,WAAW;AACzC,SAAOA,QAAO,QAAQ,YAAY,CAAC,OAAO,WAAW,OAAO,OAAO,MAAM,MAAM,cAAc,OAAO,MAAM,IAAI,KAAK;AACvH;;;ACNO,IAAM,+BAAN,cAA2C,MAAM,CAAC,+BAA+B,GAAG,CAAC,SAAS;AACjG,QAAM,aAAa,KAAK;AAAA,EACxB,MAAMC,sCAAqC,KAAK;AAAA,IAC5C,cAAc;AACV,YAAM,GAAG,SAAS;AAClB,WAAK,wBAAwB,oBAAI,IAAI;AACrC,WAAK,2BAA2B;AAAA,IACpC;AAAA,IACA,OAAO,SAAS,QAAQ;AACpB,WAAK,wBAAwB,wBAAwB,OAAO,EAAE,MAAM;AACpE,YAAM,MAAM,WAAW,OAAO,KAAK,MAAM,SAAS,MAAM;AACxD,WAAK,sBAAsB,MAAM;AACjC,aAAO;AAAA,IACX;AAAA,IACA,UAAU,QAAQ;AACd,WAAK,2BAA2B;AAChC,YAAM,MAAM,WAAW,UAAU,KAAK,MAAM,MAAM;AAClD,WAAK,2BAA2B;AAChC,aAAO;AAAA,IACX;AAAA,EACJ;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;ACvBA,IAAM,WAAW,oBAAI,IAAI;AAIlB,IAAM,2BAAN,cAAuC,MAAM,CAAC,8BAA8B,2BAA2B,GAAG,CAAC,SAAS;AACvH,QAAM,aAAa,KAAK;AAAA,EACxB,MAAMC,kCAAiC,KAAK;AAAA,IACxC,cAAc;AACV,YAAM,GAAG,SAAS;AAClB,WAAK,wBAAwB;AAAA,IACjC;AAAA,IACA,WAAW,gBAAgB;AACvB,aAAO;AAAA,QACH,YAAY;AAAA,QACZ,SAAS;AAAA,UACL,WAAW;AAAA,YACP,EAAE,UAAU,SAAS,QAAQ,MAAM;AAAA,YACnC,EAAE,UAAU,YAAY,QAAQ,MAAM;AAAA,YACtC,EAAE,UAAU,WAAW,QAAQ,MAAM;AAAA,UACzC;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA,IAAI,KAAK,OAAO;AACZ,WAAK,2BAA2B;AAChC,YAAM,OAAO;AACb,WAAK,2BAA2B;AAAA,IACpC;AAAA,IACA,qBAAqB,OAAO;AACxB,aAAO,KAAK,QAAQ,SAAS,SAAS,OAAO,IAAI,KAAK;AAAA,IAC1D;AAAA,IACA,wBAAwB,UAAU;AAC9B,aAAO,KAAK,QAAQ,SAAS,YAAY,SAAS,WAAW,IAAI,KAAK;AAAA,IAC1E;AAAA,IACA,gBAAgB;AACZ,WAAK,QAAQ,eAAe;AAAA,IAChC;AAAA,IACA,oBAAoB;AAChB,WAAK,QAAQ,kBAAkB;AAAA,IACnC;AAAA,IACA,gBAAgB;AACZ,WAAK,cAAc,KAAK,gBAAgB,KAAK,YAAY,OAAO;AAChE,WAAK,iBAAiB,KAAK,gBAAgB,KAAK,eAAe,UAAU;AAAA,IAC7E;AAAA;AAAA,IAEA,gBAAgB,OAAO,WAAW;AAE9B,cAAQ,MAAM,eAAe;AAC7B,YAAM,aAAa,KAAK,SAAS,KAAK,QAAQ,SAAS,WAAW,MAAM,IAAI;AAC5E,UAAI,YAAY;AACZ,mBAAW,cAAc,YAAY;AACjC,gBAAM,SAAS,MAAM,QAAQ,WAAW,qBAAqB,SAAS,CAAC;AACvE,cAAI;AACA,uBAAW,WAAW,WAAW,MAAM;AAAA,QAC/C;AACA,aAAK,kBAAkB;AAAA,MAC3B;AAAA,IACJ;AAAA;AAAA,IAEA,kBAAkB,WAAW;AAGzB,WAAK,QAAQ,gBAAW;AAlEpC;AAkEuC,0BAAW,WAAW,YAAW,4BAAW,SAAS,MAApB,mBAAuB,OAAvB,YAA6B,yCAAY,QAAQ,eAAjD,YAA+D,WAAW,YAAY,IAAI,CAAC;AAAA,OAAC;AACxJ,WAAK,kBAAkB;AAAA,IAC3B;AAAA,IACA,gBAAgB;AACZ,WAAK,cAAc;AAAA,IACvB;AAAA,EACJ;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;ACrEA,IAAMC,eAAc,sBAAc,yBAAyB,OAAO,SAAS,CAAC;AA0C5E,IAAqB,kBAArB,cAA6C,6BAAqBA,YAAW,EAAE;AAAA,EAE3E,WAAW,gBAAgB;AACvB,WAAO;AAAA,MACH,YAAa;AAAA,IACjB;AAAA,EACJ;AACJ;AANI,cADiB,iBACV,SAAQ;AAOnB,gBAAgB,SAAS;;;AClDzB,IAAM,2BAA2B;AAAA,EAC7B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ;AAMA,IAAqB,sBAArB,MAAqB,6BAA4B,MAAM;AAAA,EACnD,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgCA,WAAW,OAAO;AACd,WAAO;AAAA,MACH,cAAe;AAAA,MACf,YAAe;AAAA,MACf,YAAe;AAAA,MACf,UAAe;AAAA,IACnB;AAAA,EACJ;AAAA,EACA,WAAW,SAAS;AAChB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOH,EAAE,MAAO,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMhB,EAAE,MAAO,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMd,EAAE,MAAO,QAAQ,MAAO,OAAO,cAAe,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMhD,EAAE,MAAO,OAAO,cAAe,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMlC,EAAE,MAAO,iBAAiB,MAAO,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAM3C,EAAE,MAAO,YAAY,MAAO,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMrC,EAAE,MAAO,UAAU,MAAO,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMnC,EAAE,MAAO,OAAO,MAAO,UAAU,WAAY,MAAM,cAAe,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAkBpE;AAAA,QACI,MAAe;AAAA,QACf,MAAe;AAAA,QACf,cAAe;AAAA,MACnB;AAAA,MACA,EAAE,MAAO,eAAe,SAAU,OAAO,UAAW,KAAK;AAAA,IAC7D;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA4BA,UAAU,MAAM;AACZ,UACI,OAAO,KAAK,KAAK,SAAS,KAAK,UAAU,GACzC,KAAO,KAAK,KAAK,SAAS,GAAG,UAAU;AAE3C,QAAI,QAAQ,MAAM;AACd,WAAK,YAAY;AAAA,IACrB;AACA,QAAI,MAAM,MAAM;AACZ,WAAK,UAAU;AAAA,IACnB;AACA,UAAM,UAAU,GAAG,SAAS;AAAA,EAChC;AAAA;AAAA,EAEA,IAAI,aAAa;AAjLrB;AAkLQ,WAAO,KAAK,gBAAc,UAAK,eAAe,CAAC,MAArB,mBAAwB;AAAA,EACtD;AAAA,EACA,IAAI,KAAK,OAAO;AACZ,UAAM,EAAE,UAAU,IAAI;AAGtB,SAAI,uCAAW,YAAW,UAAU,OAAO,OAAO;AAC9C,WAAK,IAAI,QAAQ,KAAK;AAAA,IAC1B,OACK;AACD,WAAK,YAAY;AAAA,IACrB;AAAA,EACJ;AAAA,EACA,IAAI,OAAO;AACP,WAAO,KAAK,IAAI,MAAM;AAAA,EAC1B;AAAA,EACA,IAAI,GAAG,OAAO;AACV,UAAM,EAAE,QAAQ,IAAI;AAGpB,SAAI,mCAAS,YAAW,QAAQ,OAAO,OAAO;AAC1C,WAAK,IAAI,MAAM,KAAK;AAAA,IACxB,OACK;AACD,WAAK,UAAU;AAAA,IACnB;AAAA,EACJ;AAAA,EACA,IAAI,KAAK;AACL,WAAO,KAAK,IAAI,IAAI;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,WAAW;AACX,WAAO,KAAK,YAAY;AAAA,EAC5B;AAAA,EACA,IAAI,SAAS,MAAM;AACf,SAAK,YAAY,IAAI;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,cAAc;AACV,WAAO,KAAK,IAAI,MAAM;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,YAAY,MAAM;AACd,QAAI;AACJ,QAAI,SAAS,KAAK,UAAU;AACxB,eAAS,KAAK,IAAI;AAAA,QACd;AAAA,QACA,UAAW;AAAA,QACX,QAAW;AAAA,MACf,CAAC;AAAA,IACL;AACA,WAAO;AAAA,EACX;AAAA,EACA,IAAI,MAAM;AACN,WAAO,KAAK,IAAI,KAAK;AAAA,EACzB;AAAA,EACA,IAAI,IAAI,KAAK;AACT,SAAK,OAAO,GAAG;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,KAAK,UAAU,KAAK,SAAS;AAGhC,QAAI,UAAU,WAAW,GAAG;AACxB,UAAI,OAAO,QAAQ,UAAU;AACzB,aAAK,MAAM;AAAA,MACf,OACK;AACD,cAAM,WAAW,cAAc,GAAG;AAClC,aAAK,IAAI;AAAA,UACL,KAAU,IAAI;AAAA,UACd,SAAU,IAAI;AAAA,QAClB,CAAC;AAAA,MACL;AACA;AAAA,IACJ;AAEA,UAAM,WAAW,GAAG;AACpB,SAAK,IAAI;AAAA,MACL;AAAA,MACA;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EACA,SAAS;AACL,QAAI,KAAK,KAAK;AACV,aAAO,GAAG,KAAK,MAAM,IAAI,MAAM,GAAG,GAAG,KAAK,IAAI,KAAK,GAAG,CAAC,GAAG,WAAW,mBAAmB,KAAK,OAAO,CAAC;AAAA,IACzG;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,IAAI,UAAU;AACV,WAAO,IAAI,SAAS;AAAA,MAChB,MAAY,KAAK;AAAA,MACjB,WAAY,KAAK;AAAA,IACrB,CAAC;AAAA,EACL;AAAA,EACA,IAAI,QAAQ,KAAK;AACb,QAAI,OAAO,QAAQ,UAAU;AACzB,WAAK,OAAO,GAAG;AAAA,IACnB,OACK;AACD,WAAK,OAAO,IAAI,WAAW,IAAI,IAAI;AAAA,IACvC;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,gBAAgB;AAChB,UACI,KAAK,MACL,EAAE,QAAQ,eAAe,IAAI,IAC7B,QAAQ,OAAO,CAAC;AACpB,QAAI;AACJ,QAAI,OAAO;AACP,YACI,EAAE,WAAW,QAAQ,IAAI,IACzB,cAAyB,MAAM;AAGnC,eAAS,cAAc,eAAe,CAAC,UAAU,mBAAmB,YAAY,eAAe,CAAC,QAAQ;AAAA,IAC5G,OACK;AACD,eAAS,QAAQ,eAAe,CAAC,CAAC;AAAA,IACtC;AACA,WAAO,UAAU,MAAM;AAAA,EAC3B;AAAA,EACA,eAAe;AACX,UAAM,EAAE,WAAW,QAAQ,IAAI;AAC/B,SAAI,uCAAW,iBAAe,mCAAS,cAAa;AAChD,YAAM,OAAO,qBAAoB;AACjC,UAAI,YACA;AACJ,cAAQ,KAAK,MAAM;AAAA,QACf,KAAK,KAAK;AACN,uBAAa,UAAU;AACvB,uBAAa,QAAQ;AACrB;AAAA,QACJ,KAAK,KAAK;AACN,uBAAa,UAAU;AACvB,uBAAa,QAAQ;AACrB;AAAA,QACJ,KAAK,KAAK;AACN,uBAAa,UAAU;AACvB,uBAAa,QAAQ;AACrB;AAAA,QACJ,KAAK,KAAK;AACN,uBAAa,UAAU;AACvB,uBAAa,QAAQ;AACrB;AAAA,QACJ;AACI,gBAAM,IAAI,MAAM,8BAA8B,KAAK,IAAI;AAAA,MAC/D;AACA,aAAO;AAAA,QACH,OAAQ,KAAK,IAAI,YAAY,UAAU;AAAA,QACvC,KAAQ,KAAK,IAAI,YAAY,UAAU;AAAA,MAC3C;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,UAAU,KAAK;AAvXnB;AAwXQ,UAAM,WAAU,gBAAK,gBAAL,mBAAkB,MAAM,SAAxB,YAAgC,CAAC;AACjD,QAAI,CAAC,QAAQ,SAAS,GAAG,GAAG;AACxB,WAAK,cAAc,QAAQ,OAAO,GAAG,EAAE,KAAK,GAAG;AAAA,IACnD;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,YAAY,KAAK;AACb,UAAM,EAAE,YAAY,IAAI;AACxB,QAAI,aAAa;AACb,YACI,UAAU,YAAY,MAAM,GAAG,GAC/B,QAAU,QAAQ,QAAQ,GAAG;AACjC,UAAI,SAAS,GAAG;AACZ,gBAAQ,OAAO,OAAO,CAAC;AACvB,aAAK,cAAc,QAAQ,KAAK,GAAG;AAAA,MACvC;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,kBAAkB,KAAK;AACnB,WAAO,KAAK,eAAe,KAAK,YAAY,MAAM,GAAG,EAAE,SAAS,GAAG;AAAA,EACvE;AAAA,EACA,mBAAmB,KAAK;AACpB,UAAM,WAAW,yBAAyB,KAAK,IAAI;AACnD,QAAI,KAAK;AACL,aAAO;AAAA,IACX;AAEA,QAAI,KAAK,SAAS,qBAAoB,KAAK,YAAY;AACnD,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA+BA,WAAW;AACP,WAAO,GAAG,KAAK,IAAI,GAAG,KAAK,mBAAmB,CAAC,GAAG,KAAK,OAAO,CAAC;AAAA,EACnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,IAAI,UAAU;AACV,UAAM,EAAE,WAAW,SAAS,KAAK,IAAI;AACrC,WAAO,OAAO,SAAS,YAAY,aAAa,WAAW,cAAc;AAAA,EAC7E;AAAA,EACA,IAAI,gBAAgB;AAjdxB;AAkdQ,aAAO,UAAK,cAAL,mBAAgB,SAAQ;AAAA,EACnC;AAAA,EACA,IAAI,cAAc;AApdtB;AAqdQ,aAAO,UAAK,YAAL,mBAAc,SAAQ;AAAA,EACjC;AAAA;AAAA,EAEA,wBAAwB,WAAW,UAAU,UAAU;AAxd3D;AAydQ,QAAI,CAAC,MAAM,wBAAwB,WAAW,UAAU,QAAQ,GAAG;AAC/D,aAAO;AAAA,IACX;AACA,QAAI,cAAc,UAAU,cAAc,QAAQ,cAAc,eAAe,cAAc,WAAW;AACpG,YAAM,cAAa,UAAK,YAAL,mBAAc;AACjC,UAAI,cAAc,WAAW,SAAS,QAAQ,MAAM,WAAW,QAAQ,QAAQ,GAAG;AAC9E,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAEJ;AACA,oBAAoB,iBAAiB;AACrC,oBAAoB,SAAS;;;ACnetB,IAAM,sBAAN,cAAkC,MAAM,CAAC,2BAA2B,GAAG,CAAC,SAAS;AACpF,QAAM,aAAa,KAAK;AAAA,EACxB,MAAMC,6BAA4B,KAAK;AAAA,IACnC,WAAW,SAAS;AAChB,aAAO;AAAA,QACH,EAAE,MAAM,aAAa,SAAS,CAAC,GAAG,MAAM,MAAM,GAAG,SAAS,MAAM;AAAA,QAChE,EAAE,MAAM,WAAW,SAAS,CAAC,GAAG,MAAM,MAAM,GAAG,SAAS,MAAM;AAAA,MAClE;AAAA,IACJ;AAAA;AAAA,IAEA,WAAW,OAAO,OAAO,YAAY;AAd7C;AAeY,UAAI,SAAS;AACb,UAAI,UAAU,eAAe,UAAU,WAAW;AAC9C,cAAM,QAAQ,aAAa,OAAO,cAAc,IAAI,SAAQ,UAAK,eAAL,mBAAiB,QAAQ;AACrF,YAAI;AACA,mBAAS;AACb,gBAAQ,SAAS;AAAA,MACrB;AACA,iBAAW,WAAW,KAAK,MAAM,OAAO,OAAO,YAAY,IAAI;AAC/D,UAAI,UAAU,CAAC,KAAK,QAAQ,sBAAsB,GAAC,UAAK,oBAAL,mBAAsB,gBAAe;AACpF,mBAAK,oBAAL,mBAAsB;AAAA,MAC1B;AAAA,IACJ;AAAA;AAAA,IAEA,cAAc;AACV,iBAAW,YAAY,KAAK,IAAI;AAGhC,WAAK,WAAW,aAAa,KAAK,IAAI,WAAW,CAAC;AAClD,WAAK,WAAW,WAAW,KAAK,IAAI,SAAS,CAAC;AAAA,IAClD;AAAA;AAAA;AAAA,IAGA,uBAAuB;AArC/B;AAuCY,UAAI,EAAE,WAAW,QAAQ,IAAI,KAAK;AAClC,UAAI,cAAc,QAAQ,CAAE,aAAa,WAAW,cAAc,GAAI;AAClE,cAAM,YAAW,UAAK,eAAL,mBAAiB,QAAQ;AAC1C,YAAI;AACA,eAAK,SAAS,YAAY;AAAA,MAClC;AACA,UAAI,YAAY,QAAQ,CAAE,aAAa,SAAS,cAAc,GAAI;AAC9D,cAAM,YAAW,UAAK,eAAL,mBAAiB,QAAQ;AAC1C,YAAI;AACA,eAAK,SAAS,UAAU;AAAA,MAChC;AAAA,IACJ;AAAA;AAAA;AAAA,IAGA,IAAI,UAAU,WAAW;AACrB,WAAK,WAAW,aAAa,SAAS;AAAA,IAC1C;AAAA,IACA,IAAI,YAAY;AACZ,YAAM,YAAY,KAAK,IAAI,WAAW;AAEtC,cAAO,uCAAW,OAAM,OAAO,YAAY;AAAA,IAC/C;AAAA,IACA,IAAI,QAAQ,SAAS;AACjB,WAAK,WAAW,WAAW,OAAO;AAAA,IACtC;AAAA,IACA,IAAI,UAAU;AACV,YAAM,UAAU,KAAK,IAAI,SAAS;AAElC,cAAO,mCAAS,OAAM,OAAO,UAAU;AAAA,IAC3C;AAAA,EACJ;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;ACrEA,IAAMC,eAAc;AA4DpB,IAAqB,kBAArB,cAA6C,sBAAcA,aAAY,OAAO,mBAAmB,CAAC,EAAE;AAAA,EAChG,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA,EAEA,iBAAiB,UAAU,QAAQ,KAAK;AACpC,UACI,QAAY,oBAAoB,MAChC,YAAY,MAAM,UAAU,QAC5B,UAAY,MAAM,SAAS;AAC/B,QAAI,aAAa,WAAW;AACxB,aAAQ,WAAW,YAAa,MAAM,eAAe,MAAM;AAAA,IAC/D;AACA,WAAQ,WAAW,UAAW,MAAM,WAAW,MAAM;AAAA,EACzD;AACJ;AACA,gBAAgB,iBAAiB;AACjC,gBAAgB,SAAS;;;ACpEzB,IAAO,+BAAQ,YAAU,MAAM,6BAA6B,OAAO;AAAA,EAC/D,WAAW,QAAQ;AACfkGA,WAAW,gBAAgB;AACvB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA,MAKH,cAAe;AAAA;AAAA;AAAA;AAAA;AAAA,MAKf,cAAe;AAAA,MACf,SAAU;AAAA,IACd;AAAA,EACJ;AAAA,EACA,wBAAwB,OAAO,UAAU,QAAQ,OAAO,MAAM,cAAc;AACxE,mBAAe,iBAAiB,CAAAC,WAAS,KAAK,qBAAqBA,MAAK;AACxE,YAAQ,YAAY,QAAQ,KAAK;AACjC,UAAM,OAAO,CAACC,SAAQD,WAAU;AAC5B,UAAIA,OAAM,YAAY,CAAC,MAAM;AACzB,QAAAA,OAAM,SAAS,SAAO;AAClB,UAAAC,UAAS,aAAa,GAAG,EAAE,OAAO,UAAUA,OAAM;AAAA,QACtD,CAAC;AAAA,MACL,OACK;AACD,QAAAA,UAAS,aAAaD,MAAK,EAAE,OAAO,UAAUC,OAAM;AAAA,MACxD;AAAA,IACJ,GAAG,MAAM;AACT,WAAO;AAAA,EACX;AAAA,EACA,qBAAqB,OAAOC,KAAI,UAAU,MAAM,cAAc;AAC1D,WAAO,KAAK,wBAAwB,OAAO,CAAC,QAAQ,eAAe;AAC/D,eAAS,UAAU,KAAK,OAAO,KAAK,UAAU;AAC9C,aAAO;AAAA,IACX,GAAG,CAAC,GAAG,MAAM,YAAY;AAAA,EAC7B;AAAA,EACA,qBAAqB,OAAOA,KAAI,UAAU,MAAM;AAC5C,WAAO,KAAK,wBAAwB,OAAO,CAAC,QAAQ,eAAe;AAC/D,eAAS,UAAU,KAAK,OAAO,KAAK,UAAU;AAC9C,aAAO;AAAA,IACX,GAAG,CAAC,GAAG,IAAI;AAAA,EACf;AAAA,EACA,mBAAmB,OAAOA,KAAI,UAAU,MAAM;AAC1C,WAAO,KAAK,sBAAsB,OAAO,CAAC,QAAQ,eAAe;AAC7D,eAAS,UAAU,KAAK,OAAO,KAAK,UAAU;AAC9C,aAAO;AAAA,IACX,GAAG,CAAC,GAAG,IAAI;AAAA,EACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,qBAAqB,OAAO;AACxB,WAAO,CAAC,EAAE,OAAO,MAAM,gBAAgB,CAAC,GAAG,MAAM,cAAc,CAAC,CAAC;AAAA,EACrE;AAAA,EACA,wBAAwB,OAAO;AAC3B,SAAK,OAAO,KAAK,qBAAqB,KAAK,CAAC;AAAA,EAChD;AAAA,EACA,wBAAwB,OAAO;AAC3B,SAAK,OAAO,MAAM,YAAY;AAAA,EAClC;AAAA,EACA,sBAAsB,OAAO,MAAM;AAC/B,SAAK,OAAO,MAAM,UAAU;AAAA,EAChC;AAAA,EACA,oBAAoB,KAAK;AACrB,WAAO,KAAK,QAAQ;AAAA,MAAK,OACrB,OAAO,KAAK,YAAY,uCAAuC,EAAE,MAAM,EAAE,EAAE;AAAA,IAC/E;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,sCAAsC,aAAa,aAAa;AAC5D,kBAAc,MAAM,KAAK,WAAW;AACpC,kBAAc,MAAM,KAAK,WAAW;AACpC,WAAO,KAAK,oBAAoB,KAAK,YAAY,uCAAuC,aAAa,WAAW,CAAC;AAAA,EACrH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,2BAA2B,aAAa,aAAa;AACjD,WAAO,KAAK,sCAAsC,aAAa,WAAW,KACtE,KAAK,sCAAsC,aAAa,WAAW;AAAA,EAC3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,MAAM,kBAAkB,oBAAoB,MAAM,MAAM;AACpD,QAAI,YAAY,oBAAoB,UAAU;AAC9C,QAAI,sBAAsB,MAAM;AAC5B,aAAO;AAAA,IACX;AAEA,QAAI,mBAAmB,mBAAmB;AACtC,OAAC,EAAE,WAAW,QAAQ,IAAI;AAAA,IAC9B;AAEA,gBAAY,KAAK,WAAW,QAAQ,SAAS;AAE7C,cAAU,KAAK,WAAW,QAAQ,OAAO;AAGzC,QAAI,aAAa,SAAS;AAEtB,UAAI,CAAC,UAAU,WAAW,CAAC,QAAQ,SAAS;AACxC,eAAO;AAAA,MACX;AAEA,aAAO,KAAK,QAAQ,kBAAkB,WAAW,SAAS,IAAI;AAAA,IAClE;AACA,WAAO,uBAAuB;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,0BAA0B,QAAQ,MAAM,MAAM;AAC1C,WAAO,KAAK,kBAAkB,QAAQ,MAAM,IAAI;AAAA,EACpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,2BAA2B,KAAK;AAC5B,WAAO,KAAK,QAAQ,OAAO,CAAC,QAAQ,QAAQ;AACxC,UAAI,IAAI,kBAAkB,GAAG;AAAG,eAAO,KAAK,GAAG;AAC/C,aAAO;AAAA,IACX,GAAG,CAAC,CAAC;AAAA,EACT;AAAA,EACA,OAAO,uCAAuC,MAAM,IAAI;AACpD,WAAO,UAAU,IAAI,YAAY,EAAE;AAAA,EACvC;AAAA;AAAA,EAEA,wBAAwB,QAAQ;AAC5B,WAAO,KAAK,qBAAqB,MAAM;AAAA,EAC3C;AAAA;AAEJ;;;ACnRO,IAAM,+BAAN,cAA2C,MAAM,CAAC,+BAA+B,GAAG,CAAC,SAAS;AACjG,QAAM,aAAa,KAAK;AAAA,EACxB,MAAMC,sCAAqC,KAAK;AAAA,IAC5C,cAAc;AACV,YAAM,GAAG,SAAS;AAClB,WAAK,yBAAyB,oBAAI,IAAI;AACtC,WAAK,4BAA4B;AAAA,IACrC;AAAA,IACA,OAAO,SAAS,QAAQ;AACpB,WAAK,yBAAyB,wBAAwB,OAAO,EAAE,MAAM;AACrE,YAAM,MAAM,WAAW,OAAO,KAAK,MAAM,SAAS,MAAM;AACxD,WAAK,uBAAuB,MAAM;AAClC,aAAO;AAAA,IACX;AAAA,IACA,UAAU,QAAQ;AACd,WAAK,4BAA4B;AACjC,YAAM,MAAM,WAAW,UAAU,KAAK,MAAM,MAAM;AAClD,WAAK,4BAA4B;AACjC,aAAO;AAAA,IACX;AAAA,EACJ;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;ACvBA,IAAMC,YAAW,oBAAI,IAAI;AAIlB,IAAM,2BAAN,cAAuC,MAAM,CAAC,8BAA8B,2BAA2B,GAAG,CAAC,SAAS;AACvH,QAAM,aAAa,KAAK;AAAA,EACxB,MAAMC,kCAAiC,KAAK;AAAA,IACxC,cAAc;AACV,YAAM,GAAG,SAAS;AAClB,WAAK,yBAAyB,oBAAI,IAAI;AACtC,WAAK,4BAA4B;AAAA,IACrC;AAAA,IACA,WAAW,gBAAgB;AACvB,aAAO;AAAA,QACH,YAAY;AAAA,QACZ,SAAS;AAAA,UACL,WAAW;AAAA,YACP,EAAE,UAAU,aAAa,QAAQ,MAAM;AAAA,YACvC,EAAE,UAAU,WAAW,QAAQ,MAAM;AAAA,UACzC;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA,wBAAwB,OAAO;AAC3B,aAAO,KAAK,QAAQ,SAAS,WAAW,KAAK,KAAKD;AAAA,IACtD;AAAA,IACA,wBAAwB,OAAO;AAC3B,aAAO,KAAK,QAAQ,SAAS,aAAa,KAAK,KAAKA;AAAA,IACxD;AAAA,IACA,IAAI,KAAK,OAAO;AACZ,WAAK,4BAA4B;AACjC,YAAM,OAAO;AACb,WAAK,4BAA4B;AAAA,IACrC;AAAA,IACA,gBAAgB;AACZ,WAAK,QAAQ,eAAe;AAAA,IAChC;AAAA,IACA,oBAAoB;AAChB,WAAK,QAAQ,kBAAkB;AAAA,IACnC;AAAA,IACA,gBAAgB;AACZ,WAAK,cAAc;AAAA,IACvB;AAAA,EACJ;AACA,SAAOC;AACX,CAAC,EAAE;AACH;;;AC5CA,IAAMC,eAAc,sBAAc,yBAAyB,OAAO,SAAS,CAAC;AAyC5E,IAAqB,kBAArB,cAA6C,6BAAqBA,aAAY,OAAO,SAAS,CAAC,EAAE;AAAA,EAC7F,WAAW,gBAAgB;AACvB,WAAO;AAAA,MACH,YAAa;AAAA,IACjB;AAAA,EACJ;AACJ;AACA,gBAAgB,SAAS;;;AC/CzB,IAAO,wCAAQ,YAAU,MAAM,sCAAsC,OAAO;AAAA,EACxE,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,WAAW,eAAe;AACtB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAYH,kBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQnB,qBAAsB;AAAA,MACtB,iCAAkC;AAAA,MAClC,iCAAkC;AAAA,MAClC,8BAA+B;AAAA,MAC/B,uBAAwB;AAAA,IAC5B;AAAA,EACJ;AAAA,EACA,IAAI,oCAAoC;AACpC,WAAO,CAAC;AAAA,EACZ;AAAA,EACA,6BAA6B,WAAW,WAAW,kBAAkB;AACjE,UACI,WAAkB,CAAC,GACnB,EAAE,QAAQ,IAAQ,WAClB,kBAAkB,KAAK,mCACvB,SAAkB,EAAE,CAAC,OAAO,GAAI,CAAC,EAAE;AAEvC,QAAI,WAAW;AACX,UAAI,CAAC,UAAU,MAAM;AACjB,iBAAS,KAAK,MAAM,OAAO,mFAAmF;AAC9G,eAAO,OAAO,EAAE,OAAO,CAAC,KAAK;AAAA,MACjC;AAAA,IACJ,WAES,mDAAiB,SAAS,UAAU;AACzC,eAAS,KAAK,SAAS,OAAO,0DAA0D;AACxF,aAAO,OAAO,EAAE,OAAO,CAAC,KAAK;AAAA,IACjC;AAEA,QAAI,SAAS,QAAQ;AACjB,aAAO,OAAO,kBAAkB,MAAM;AAAA,IAC1C;AACA,WAAO;AAAA,EACX;AAAA,EACA,wBAAwB,UAAU;AAC9B,UACI,WAAmB,CAAC,GACpB,mBAAmB,CAAC;AACxB,QAAI,CAAC,KAAK,qBAAqB;AAC3B,uBAAiB,UAAU;AAAA,IAC/B;AAEA,SAAK,iBAAiB,CAAC,OAAO,SAAS,cAAc;AACjD,eAAS,KAAK,GAAG,KAAK,6BAA6B,WAAW,qCAAW,UAAU,gBAAgB,CAAC;AAAA,IACxG,CAAC;AACD,QAAI,SAAS,QAAQ;AACjB,eAAS,KAAK,qDACV,KAAK,UAAU,kBAAkB,MAAM,CAAC,EAAE,QAAQ,aAAa,KAAK,CAAC;AACzE,eAAS,KAAK,KAAK,qBAAqB;AAAA,IAC5C;AACA,WAAO;AAAA,EACX;AAAA,EACA,qBAAqB,UAAU;AAC3B,UAAM,WAAW,KAAK,wBAAwB,QAAQ;AACtD,QAAI,SAAS,QAAQ;AACjB,cAAQ,KAAK,KAAK,kCAAkC,OAAO,SAAS,KAAK,IAAI,CAAC;AAAA,IAClF;AAAA,EACJ;AAAA,EACA,6BAA6B,WAAW,WAAW,WAAW,kBAAkB;AAC5E,UACI,WAAmB,CAAC,GACpB,cAAmB,CAAC,GACpB,iBAAmB,CAAC,GACpB,EAAE,QAAQ,IAAS,WACnB,SAAmB,EAAE,CAAC,OAAO,GAAI,CAAC,EAAE,GACpC,iBAAmB,UAAU,kBAAkB,KAAK,gBACpD,EAAE,WAAW,IAAM,UAAU,OAC7B,EAAE,QAAQ,IAAS,YACnB,iBAAmB,uCAAW,SAAQ,CAAC,GACvC,oBAAmB,uCAAW,YAAW,CAAC;AAC9C,QAAI,mCAAmC;AAEvC,QAAI,uCAAW,OAAO;AAClB,kBAAY;AAAA,QACR,GAAG,UAAU,MAAM,OAAO,YAAU;AAChC,iBAAO,CAAC,cAAc,KAAK,SAAO,IAAI,cAAc,KAAK,OAAO,cAAc,CAAC,KAC3E,CAAC,iBAAiB,KAAK,SAAO,IAAI,cAAc,KAAK,OAAO,cAAc,KAAK,IAAI,OAAO,KAAK,OAAO,cAAc,CAAC;AAAA,QAC7H,CAAC,EAAE,IAAI,aAAW,EAAE,CAAC,cAAc,GAAI,OAAO,cAAc,GAAG,CAAC,OAAO,GAAI,MAAM,EAAE;AAAA,MACvF;AACA,UAAI,YAAY,QAAQ;AACpB,cAAM,aAAa,YAAY,IAAI,SAAO,MAAM,IAAI,cAAc,CAAC,EAAE,KAAK,IAAI;AAC9E,iBAAS,KAAK,MAAM,OAAO,yDAAyD,UAAU,+HACe;AAAA,MACjH;AAAA,IACJ;AAEA,QAAI,KAAK,0BAA0B;AAE/B,UAAI,CAAC,YAAY,UAAU,WAAW;AAClC,YAAI,OAAO,cAAc,YAAY,MAAM,QAAQ,SAAS,GAAG;AAC3D,mBAAS,KAAK,MAAM,OAAO,sCAAsC;AACjE,iBAAO,OAAO,EAAE,KAAK,IAAI;AAAA,QAC7B;AAEA,YAAI,UAAU,QAAQ,CAAC,MAAM,QAAQ,UAAU,IAAI,GAAG;AAClD,mBAAS,KAAK,MAAM,OAAO,2CAA2C;AACtE,sBAAY,KAAK,KAAK;AAAA,QAC1B;AAEA,YAAI,UAAU,WAAW,CAAC,MAAM,QAAQ,UAAU,OAAO,GAAG;AACxD,mBAAS,KAAK,MAAM,OAAO,+CAA+C;AAC1E,yBAAe,KAAK,KAAK;AAAA,QAC7B;AAAA,MACJ;AAAA,IACJ,OAEK;AAED,UAAI,uCAAW,SAAS;AACpB,cAAM,qBAAqB,UAAU,QAAQ,OAAO,YAAU,CAAC,cAAc,KAAK,SAAO,IAAI,OAAO,KAAK,OAAO,OAAO,CAAC,CAAC,EACpH,IAAI,aAAW,EAAE,CAAC,OAAO,GAAI,OAAO,OAAO,EAAE,EAAE;AACpD,oBAAY,KAAK,GAAG,kBAAkB;AACtC,YAAI,mBAAmB,QAAQ;AAC3B,gBAAM,aAAa,mBAAmB,IAAI,SAAO,MAAM,IAAI,OAAO,CAAC,EAAE,KAAK,IAAI;AAC9E,mBAAS,KAAK,MAAM,OAAO,2DAA2D,UAAU,yEACzC;AACvD,6CAAmC;AAAA,QACvC;AAAA,MACJ;AACA,UAAI,YAAY,QAAQ;AACpB,oBAAY,KAAK,KAAK;AAAA,MAC1B;AAEA,UAAI,uCAAW,SAAS;AACpB,uBAAe;AAAA,UACX,GAAG,UAAU,QAAQ,OAAO,YAAU,CAAC,cAAc,KAAK,SAAO,IAAI,OAAO,KAAK,OAAO,OAAO,CAAC,CAAC,EAC5F,IAAI,aAAW,EAAE,CAAC,OAAO,GAAI,OAAO,OAAO,EAAE,EAAE;AAAA,QACxD;AACA,YAAI,eAAe,QAAQ;AACvB,gBAAM,aAAa,eAAe,IAAI,SAAO,MAAM,IAAI,OAAO,CAAC,EAAE,KAAK,IAAI;AAC1E,mBAAS,KAAK,MAAM,OAAO,8DAA8D,UAAU,yEAC5C;AACvD,iBAAO,OAAO,EAAE,UAAU;AAC1B,yBAAe,KAAK,KAAK;AACzB,6CAAmC;AAAA,QACvC;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,YAAY,QAAQ;AACpB,aAAO,OAAO,EAAE,OAAO;AAAA,IAC3B;AAEA,QAAI,CAAC,SAAS,QAAQ;AAClB,aAAO,OAAO,OAAO;AAAA,IACzB;AAEA,WAAO,OAAO,kBAAkB,MAAM;AACtC,WAAO,EAAE,UAAU,iCAAiC;AAAA,EACxD;AAAA,EACA,wBAAwB,UAAU,aAAa;AAC3C,UACI,WAAmB,CAAC,GACpB,mBAAmB,CAAC,GACpB,UAAmB,YAAY;AACnC,QAAI,CAAC,KAAK,qBAAqB;AAC3B,uBAAiB,UAAU;AAAA,IAC/B;AACA,QAAI,mCAAmC;AAEvC,SAAK,iBAAiB,CAAC,OAAO,SAAS,cAAc;AACjD,YAAM,WAAW,KAAK,6BAA6B,WAAW,mCAAU,UAAU,SAAS,OAAO,GAAG,gBAAgB;AACrH,yCAAmC,oCAAoC,SAAS;AAChF,eAAS,KAAK,GAAG,SAAS,QAAQ;AAAA,IACtC,CAAC;AACD,QAAI,SAAS,QAAQ;AACjB,eAAS,KAAK,qDACV,KAAK,UAAU,kBAAkB,MAAM,CAAC,EAAE,QAAQ,yBAAyB,KAAK,EAAE,QAAQ,aAAa,KAAK,CAAC;AACjH,UAAI,kCAAkC;AAClC,iBAAS,KAAK,KAAK,4BAA4B;AAAA,MACnD;AACA,eAAS,KAAK,KAAK,qBAAqB;AAAA,IAC5C;AACA,WAAO;AAAA,EACX;AAAA,EACA,qBAAqB,UAAU,SAAS;AACpC,UAAM,WAAW,KAAK,wBAAwB,UAAU,OAAO;AAC/D,QAAI,SAAS,QAAQ;AACjB,cAAQ,KAAK,KAAK,kCAAkC,OAAO,SAAS,KAAK,IAAI,CAAC;AAAA,IAClF;AAAA,EACJ;AACJ;;;ACxMO,IAAM,2BAAN,cAAuC,MAAM;AAAC;AAC9C,IAAM,0BAAN,cAAsC,yBAAyB;AAAA,EAClE,YAAY,MAAM,CAAC,GAAG;AAd1B;AAeQ,UAAM,IAAI,WAAW,IAAI,WAAW,aAAa,YAAW,SAAI,YAAJ,mBAAa,IAAI,IAAI,aAAa,6BAA6B;AAC3H,WAAO,OAAO,MAAM,GAAG;AACvB,SAAK,UAAS,UAAK,YAAL,mBAAc;AAAA,EAChC;AACJ;AACA,IACI,cAAkB,SAAS,KAAK,KAAK,cAAc;AAC/C,MAAI,IAAI,OAAO;AACX,UAAM,IAAI;AAAA,EACd;AACA,MAAI,IAAI,OAAO;AACX,UAAM,IAAI;AAAA,EACd;AACA,QAAM,IAAI,YAAY,KAAK;AAC3B,QAAM,IAAI,YAAY,KAAK;AAC3B,SAAQ,MAAM,MAAO,KAAO,MAAM,MAAO,IAAI;AACjD;AAXJ,IAaI,kBAAkB,SAAS,KAAK,KAAK;AACjC,SAAO,YAAY,KAAK,KAAK,cAAc;AAC/C;AAfJ,IAiBI,kBAAkB,SAAS,KAAK,KAAK;AACjC,SAAO,YAAY,KAAK,KAAK,cAAc;AAC/C;AAgCJ,IAAO,mCAAQ,YAAU;AAvEzB;AA0EI,SAAO,SAAS,OAAO;AACvB,QAAM,SAAS,CAAC;AAGhB,MAAI,CAAC,OAAO,UAAU;AAClB,WAAO,KAAK,cAAM;AAAA,EACtB;AACA,MAAI,CAAC,OAAO,aAAa;AACrB,WAAO,KAAK,iBAAS;AAAA,EACzB;AACA,SAAO,KAAK,qCAA6B;AACzC,SAAO,oBAAwC,UAAU,MAAM,MAAM,GAAG,MAAM,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAwB5E,WAAW,QAAQ;AACf,aAAO;AAAA,IACX;AAAA;AAAA,IAEA,WAAW,gBAAgB;AACvB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAUH,cAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAkBf,YAAa,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA+Dd,iBAAkB;AAAA,QAClB,iBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAmClB,WAAY,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAUb,mBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAWpB,0BAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAO3B,gBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAOjB,sBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAWvB,UAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAQX,iBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QASlB,UAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAQX,oBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAuBrB,mBAAoB,CAAC;AAAA,QACrB,mBAAoB,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAWrB,gBAAiB;AAAA,QACjB,mBAAoB;AAAA,QACpB,wBAAyB;AAAA;AAAA,QAEzB,YAAa;AAAA,QACb,sBAAuB;AAAA,QACvB,sBAAuB;AAAA,QACvB,iBAAkB;AAAA,MACtB;AAAA,IACJ;AAAA,IAoEA,IAAI,gBAAgB;AAChB,aAAO;AAAA,IACX;AAAA;AAAA;AAAA,IAGA,UAAU,SAAS,CAAC,GAAG;AACnB,WAAK,aAAa;AAClB,WAAK,iBAAiB,CAAC;AACvB,WAAK,kBAAkB,CAAC;AACxB,YAAM,UAAU,MAAM;AAAA,IAC1B;AAAA,IACA,iBAAiB;AACb,YAAM,eAAe;AACrB,UAAI,KAAK,UAAU;AACf,aAAK,mBAAmB,KAAK,WAAW;AAAA,MAC5C;AAAA,IACJ;AAAA;AAAA;AAAA,IAGA,IAAI,UAAU;AA3btB,UAAAC,KAAA;AA4bY,cAAO,MAAAA,MAAA,KAAK,cAAL,gBAAAA,IAAgB,SAAhB,mBAAsB;AAAA,IACjC;AAAA,IACA,cAAc,KAAK;AACf,mBAAa,QAAQ,MAAM,sBAAsB,GAAG;AAAA,IACxD;AAAA,IACA,IAAI,UAAU;AAjctB,UAAAA,KAAA;AAkcY,cAAO,MAAAA,MAAA,KAAK,cAAL,gBAAAA,IAAgB,SAAhB,mBAAsB;AAAA,IACjC;AAAA,IACA,cAAc,KAAK;AACf,mBAAa,QAAQ,MAAM,sBAAsB,GAAG;AAAA,IACxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA,mBAAmB,SAAS;AACxB,UAAI,CAAC;AAAS,eAAO;AACrB,UAAI,mBAAmB;AAAO,eAAO,KAAK,WAAW,KAAK,eAAa,UAAU,UAAU,OAAO;AAClG,UAAI,OAAO,YAAY;AAAU,eAAO,KAAK,gBAAgB,QAAQ,OAAO;AAC5E,aAAO,KAAK,gBAAgB,OAAO,KAAK,KAAK,mBAAmB,MAAM,SAAS,OAAO,CAAC;AAAA,IAC3F;AAAA,IACA,oBAAoB,YAAY;AAC5B,YACI,EAAE,MAAM,IAAI,YACZ;AAAA,QACI,kBAAkB,KAAK;AAAA,QACvB;AAAA,MACJ,IAAY;AAChB,UAAI,CAAC,WAAW,SAAS;AACrB,mBAAW,UAAU,MAAM,eAAe,KAAK,MAAM;AAAA,MACzD;AACA,UAAI,CAAC,WAAW,SAAS;AACrB,mBAAW,UAAU,WAAW;AAAA,MACpC;AACA,UAAI,CAAC,WAAW,gBAAgB;AAC5B,mBAAW,iBAAiB,WAAW;AAAA,MAC3C;AACA,UAAI,CAAC,WAAW,sBAAsB;AAClC,mBAAW,uBAAuB,WAAW;AAAA,MACjD;AACA,UAAI,EAAE,oBAAoB,aAAa;AACnC,mBAAW,iBAAiB,MAAM;AAAA,MACtC;AACA,aAAO;AAAA,IACX;AAAA,IACA,uBAAuB;AACnB,YACI,kBAAkB,KAAK,kBAAkB,CAAC;AAC9C,WAAK,WAAW,QAAQ,WAAS,MAAM,YAAY,gBAAgB,MAAM,OAAO,IAAI,MAAM;AAAA,IAC9F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA,aAAa,SAAS;AAClB,YAAM,kBAAkB,KAAK,mBAAmB,OAAO;AACvD,aAAO,mDAAiB;AAAA,IAC5B;AAAA,IACA,iBAAiBC,KAAI,UAAU,MAAM;AACjC,UAAI,CAACA,KAAI;AACL,cAAM,IAAI,MAAM,oCAAoC;AAAA,MACxD;AACA,WAAK,WAAW;AAAA,QAAM,WAClBA,IAAG,KAAK,SAAS,MAAM,OAAO,MAAM,SAAS,KAAK,MAAM;AAAA,MAC5D;AAAA,IACJ;AAAA,IACA,IAAI,WAAW,QAAQ;AACnB,WAAK,cAAc,CAAC;AACpB,WAAK,aAAa,MAAM;AAIxB,iBAAW,SAAS,KAAK,aAAa;AAClC,cAAM,eAAe,MAAM,eAAe;AAAA,MAC9C;AAAA,IACJ;AAAA,IACA,IAAI,aAAa;AACb,aAAO,KAAK;AAAA,IAChB;AAAA,IACA,IAAI,oBAAoB;AACpB,aAAO,KAAK;AAAA,IAChB;AAAA,IACA,IAAI,kBAAkB,QAAQ;AAC1B,aAAO,KAAK,qBAAqB;AAAA,IACrC;AAAA,IACA,IAAI,kBAAkB,QAAQ;AAC1B,WAAK,qBAAqB,CAAC;AAC3B,WAAK,wBAAwB,MAAM;AAAA,IACvC;AAAA,IACA,IAAI,oBAAoB;AACpB,aAAO,KAAK;AAAA,IAChB;AAAA,IACA,qBAAqB,OAAO;AACxB,YACI,KAAK;AACT,UAAI;AAEJ,UAAI,iBAAiB,OAAO;AACxB,oBAAY,EAAE,MAAM;AAAA,MACxB,WACS,OAAO,UAAU,UAAU;AAChC,YAAI,CAAC,MAAM,OAAO;AAEd,kBAAQ;AAAA,YACJ,SAAU,MAAM;AAAA,YAChB,OAAU,IAAI,MAAM,KAAK;AAAA,UAC7B;AAAA,QACJ;AACA,oBAAY;AAAA,MAChB,OAEK;AACD,oBAAY,EAAE,OAAQ,MAAM,SAAS,KAAK,EAAE;AAAA,MAChD;AACA,SAAG,oBAAoB,SAAS;AAEhC,cAAQ,UAAU;AAElB,UAAI,MAAM,gBAAgB;AACtB,cAAM,eAAe,EAAE;AAAA,MAC3B,OAEK;AACD,cAAM,cAAc;AAAA,MACxB;AAEA,YAAM,WAAW;AAEjB,UAAI,GAAG,WAAW,GAAG,SAAS;AAC1B,cAAM,aAAa;AACnB,cAAM,WAAW;AACjB,YAAI,MAAM,aAAa,MAAM,aAAa,MAAM,aAAa,MAAM,SAAS;AACxE,kBAAQ,KAAK,gJAAiJ;AAAA,QAClK;AAAA,MACJ;AAEA,SAAG,uBAAuB,KAAK;AAC/B,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAsDA,aAAa,OAAO,UAAU,WAAW;AACrC,cAAQ,YAAY,QAAQ,KAAK;AACjC,UAAI,EAAC,+BAAO,SAAQ;AAChB;AAAA,MACJ;AACA,YACI,KAAS,MACT,SAAS,MAAM,IAAI,GAAG,sBAAsB,EAAE;AAElD,UAAI,OAAO,aAAa,aAAa;AACjC,WAAG,WAAW,KAAK,GAAG,MAAM;AAAA,MAChC,OAEK;AAED,YAAI,WAAW;AACX,cAAI,qBAAqB,SAAS,OAAO,cAAc;AAAU,wBAAY,GAAG,mBAAmB,SAAS;AAE5G,sBAAY,GAAG,WAAW,QAAQ,SAAS;AAAA,QAC/C;AAEA,WAAG,WAAW,OAAO,UAAU,GAAG,GAAG,MAAM;AAAA,MAC/C;AACA,SAAG,kBAAkB,KAAK,GAAG,MAAM;AACnC,SAAG,qBAAqB;AAAA,IAC5B;AAAA;AAAA;AAAA,IAGA,oBAAoB,OAAO;AACvB,YAAM,KAAK;AACX,UAAI,CAAC,GAAG,aAAa,KAAK,GAAG;AACzB,WAAG,aAAa,OAAO,YAAY,mBAAmB,OAAO,GAAG,YAAY,eAAe,CAAC;AAAA,MAChG;AACA,UAAI,CAAC,GAAG,sBAAsB,KAAK,GAAG;AAClC,WAAG,wBAAwB,OAAO,YAAY,mBAAmB,OAAO,GAAG,mBAAmB,eAAe,CAAC;AAAA,MAClH;AAAA,IACJ;AAAA,IACA,aAAa,OAAO;AAzqB5B,UAAAD;AA0qBY,cAAOA,MAAA,KAAK,eAAL,gBAAAA,IAAiB,KAAK,OAAK,MAAM,SAAS,EAAE,UAAU,SAAS,EAAE,YAAY;AAAA,IACxF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAiBA,gBAAgB,OAAO;AACnB,YACI,KAAa,MACb,SAAa,GAAG,YAChB,aAAa,OAAO,KAAK,OAAK,MAAM,SAAS,EAAE,UAAU,SAAS,EAAE,YAAY,KAAK;AACzF,UAAI,YAAY;AAEZ,WAAG,yBAAyB,WAAW,KAAK;AAC5C,eAAO,GAAG,gBAAgB,WAAW,OAAO;AAC5C,oBAAY,OAAO,QAAQ,UAAU;AACrC,YAAI,GAAG,mBAAmB;AACtB,aAAG,6BAA6B,KAAK;AAAA,QACzC;AAAA,MACJ,OACK;AACD,cAAM,IAAI,MAAM,sCAAsC;AAAA,MAC1D;AAAA,IACJ;AAAA;AAAA;AAAA,IAGA,uBAAuB,OAAO;AAC1B,YAAM,IAAI;AAAA,QACN,MAAO,MAAM;AAAA;AAAA,QAEb,cAAe;AAAA,QACf,QAAe;AAAA,QACf,SAAe;AAAA,QACf,SAAe;AAAA,MACnB,CAAC;AAAA,IACL;AAAA,IACA,yBAAyB,OAAO;AAC5B,WAAK,gBAAgB,MAAM,EAAE;AAAA,IACjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAiDA,wBAAwB,OAAO,UAAU,WAAW;AAChD,UAAI,CAAC,OAAO;AACR;AAAA,MACJ;AACA,cAAQ,YAAY,QAAQ,KAAK;AACjC,YACI,KAAO,MAEP,OAAO,MAAM,OAAO,CAAC,YAAYE,WAAU;AACvC,cAAM,IAAI,GAAG,mBAAmBA,MAAK;AACrC,aAAK,WAAW,KAAK,CAAC;AACtB,eAAO;AAAA,MACX,GAAG,CAAC,CAAC;AAET,UAAI,OAAO,aAAa,aAAa;AACjC,WAAG,kBAAkB,KAAK,GAAG,IAAI;AAAA,MAErC,OACK;AACD,YAAI,MAAM;AAEV,YAAI,WAAW;AACX,cAAI,qBAAqB,SAAS,OAAO,cAAc;AAAU,wBAAY,GAAG,mBAAmB,SAAS;AAE5G,iBAAO,GAAG,kBAAkB,QAAQ,SAAS;AAAA,QACjD;AAGA,WAAG,kBAAkB,OAAO,KAAK,GAAG,GAAG,IAAI;AAAA,MAC/C;AACA,YAAM,eAAe,GAAG,kBAAkB,IAAI,CAAC,EAAE,QAAQ,MAAM,OAAO;AACtE,SAAG,oBAAoB,CAAC,GAAG,GAAG,iBAAiB;AAC/C,SAAG,WAAW,QAAQ,eAAa;AAC/B,YAAI,CAAC,aAAa,SAAS,UAAU,OAAO,GAAG;AAC3C,aAAG,kBAAkB,KAAK,SAAS;AAAA,QACvC;AAAA,MACJ,CAAC;AAAA,IACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAaA,6BAA6B,OAAO;AAChC,YAAM,QAAQ,KAAK,kBAAkB,UAAU,OAAK,MAAM,SAAS,EAAE,UAAU,SAAS,EAAE,YAAY,KAAK;AAC3G,UAAI,QAAQ,IAAI;AACZ,aAAK,kBAAkB,OAAO,OAAO,CAAC;AAEtC,aAAK,kBAAkB,OAAO,OAAO,CAAC;AAAA,MAC1C;AAAA,IACJ;AAAA,IACA,sBAAsB,OAAO;AACzB,aAAO,KAAK,kBAAkB,KAAK,OAAK,MAAM,SAAS,EAAE,UAAU,SAAS,EAAE,YAAY,KAAK;AAAA,IACnG;AAAA;AAAA;AAAA;AAAA,IAIA,mBAAmB,EAAE,QAAS,MAAM,GAAG;AACnC,WAAK,gBAAgB,KAAK;AAAA,IAC9B;AAAA,IACA,kBAAkB,OAAO;AACrB,YAAM,KAAK;AACX,UAAI,GAAG,mBAAmB;AACtB;AAAA,MACJ;AAeA,UAAI,GAAG,oBAAoB,+BAAO,MAAM,GAAG;AACvC,WAAG,QAAQ,YAAY;AACvB,YAAI,GAAG,UAAU;AACb,aAAG,iBAAiB;AAAA,QACxB;AAAA,MACJ,OACK;AACD,WAAG,QAAQ,WAAW;AAAA,MAC1B;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA,kBAAkB;AACd,WAAK;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,eAAe,SAAS,MAAM;AAC1B,YAAM,KAAK;AACX,SAAG;AACH,UAAI,GAAG,0BAA0B,GAAG;AAChC,WAAG,yBAAyB;AAE5B,YAAI,UAAU,GAAG,YAAY,GAAG,oBAAoB,GAAG;AACnD,aAAG,iBAAiB;AAAA,QACxB;AAAA,MACJ;AAAA,IACJ;AAAA,IACA,IAAI,sBAAsB;AACtB,aAAO,KAAK,yBAAyB;AAAA,IACzC;AAAA,IACA,mBAAmB;AACf,YAAM,KAAK;AAEX,UAAI,CAAC,GAAG,WAAW,UAAU,KAAK,CAAC,GAAG,qBAAqB;AACvD,WAAG,WAAW;AAAA,UACV,MAAO;AAAA,UACP,IAAO,MAAM;AACT,eAAG,KAAK,EAAE,MAAM,WAAS;AAAA,YACzB,CAAC;AAAA,UACL;AAAA,UACA,OAAQ,GAAG;AAAA,QACf,CAAC;AAAA,MACL;AAAA,IACJ;AAAA,IACA,MAAM,2BAA2B,SAAS,UAAU,cAAc,cAAc;AAC5E,YAAM,EAAE,SAAS,MAAO,YAAY,IAAI;AAUxC,WAAK,QAAQ,eAAe,EAAE,aAAa,UAAU,cAAc,iBAAkB,aAAa,CAAC;AAkBnG,WAAK,QAAQ,cAAc,QAAQ,EAAE,UAAU,iBAAkB,cAAc,cAAc,QAAQ,CAAC;AAAA,IAC1G;AAAA,IACA,MAAM,mBAAmB,SAAS,cAAc,cAAc;AAC1D,YACI,KAAkC,MAClC,WAAkC,eAAe,GAAG,OAAO,YAAY,IAAI,MAC3E,EAAE,SAAS,MAAO,YAAY,IAAI;AACtC,UAAI,gBAAgB,CAAC,UAAU;AAC3B,gBAAQ,MAAM,+BAA+B,YAAY;AAAA,MAC7D;AACA,UAAI,CAAC,aAAa,GAAG,sBAAsB,SAAS,YAAY,QAAQ,CAAC,SAAS,UAAU;AACxF,WAAG,2BAA2B,SAAS,UAAU,cAAc,YAAY;AAAA,MAC/E,WAEI,GAAG,QAAQ,uBAAuB,EAAE,aAAa,SAAS,CAAC,MAAM,SACjE,GAAG,QAAQ,SAAS,aAAa,WAAW,WAAW,CAAC,SAAS,EAAE,UAAU,QAAQ,CAAC,MAAM,OAC9F;AACE,WAAG,eAAe,SAAS;AAC3B,cAAM,GAAG,cAAc,SAAS,UAAU,OAAO;AAEjD,YAAI,GAAG,aAAa;AAChB;AAAA,QACJ;AASA,WAAG,QAAQ,eAAe,EAAE,aAAa,UAAU,iBAAkB,aAAa,CAAC;AAgBnF,WAAG,QAAQ,aAAa,EAAE,UAAU,iBAAkB,cAAc,QAAQ,CAAC;AAC7E,YAAI,gBAAgB,UAAU,CAAC,GAAG,oBAAoB,GAAG;AAkBrD,aAAG,QAAQ,WAAW;AACtB,cAAI,gBAAgB,QAAQ;AACxB,eAAG,oBAAoB,QAAQ,KAAK,QAAQ,cAAc;AAAA,UAC9D;AAAA,QACJ;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,wBAAwB;AACpB,WAAK;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,qBAAqB,iBAAiB;AAClC,UAAI,KAAK,qBAAqB,CAAC,EAAE,KAAK,qBAAqB,CAAC,iBAAiB;AACzE,aAAK,kBAAkB;AAAA,MAC3B;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,IAAI,4BAA4B;AAC5B,aAAO,KAAK,oBAAoB;AAAA,IACpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAoBA,oBAAoB,SAAS;AACzB,aAAO,UACD,KAAK,iBAAiB,KAAK,aAAa,OAAO,CAAC,IAChD,KAAK,WAAW,KAAK,YAAU,KAAK,iBAAiB,OAAO,KAAK,CAAC;AAAA,IAC5E;AAAA,IACA,iBAAiB,OAAO;AACpB,aAAO,QAAQ,MAAM,OAAO;AAAA,IAChC;AAAA;AAAA;AAAA,IAGA,aAAa;AACT,aAAO,KAAK,KAAK,EAAE,MAAM,WAAS;AAAA,MAClC,CAAC;AAAA,IACL;AAAA,IACA,oBAAoB,QAAQ,WAAW,aAAa;AAChD,YAAM,QAAQ,EAAE,QAAS,SAAS,WAAW,GAAG,YAAY;AAC5D,iBAAW,SAAS,KAAK,YAAY;AACjC,YAAI,OAAO,SAAS,MAAM,OAAO,GAAG;AAChC,gBAAM,MAAM,QAAQ,WAAW,KAAK;AAAA,QACxC;AAAA,MACJ;AAAA,IACJ;AAAA,IACA,eAAe,SAAS;AACpB,YACI,OAAc;AAAA,QACV,MAAY;AAAA,QACZ,WAAY,KAAK;AAAA,MACrB,GACA,SAAc,KAAK,YACnB,cAAc,OAAO,OAAO,CAAC,GAAG,OAAO;AAG3C,aAAO,YAAY;AACnB,WAAK,SAAS,OAAO,IAAI,WAAS;AA9kC9C,YAAAF;AA+kCgB,cACI,OAAW,2CAAc,MAAM,UAC/B,WAAW,MAAM,cAAYA,MAAA,MAAM,UAAN,gBAAAA,IAAa;AAC9C,YAAI,QAAQ,UAAU;AAClB,gBACI,SAAS,OAAO,OAAO;AAAA,YACnB,SAAU,MAAM;AAAA,YAChB,MAAU;AAAA,UACd,GAAG,IAAI;AACX,cAAI,UAAU;AACV,mBAAO,WAAW;AAAA,UACtB;AACA,gBAAM,cAAc,OAAO;AAE3B,cAAI,MAAM;AACN,mBAAO,YAAY,MAAM,OAAO;AAAA,UACpC;AACA,iBAAO;AAAA,QACX;AACA,eAAO,MAAM;AAAA,MACjB,CAAC;AAED,aAAO,OAAO,MAAM,WAAW;AAC/B,aAAO;AAAA,IACX;AAAA,IACA,cAAc,OAAO,MAAM,SAAS;AAChC,YAAM,OAAO,6BAAM;AACnB,WAAI,mCAAS,YAAU,6BAAM,SAAQ;AAGjC,cAAM,IAAI,MAAM,OAAO,EAAE,OAAQ,KAAK,CAAC;AAAA,MAC3C,OACK;AACD,cAAM,OAAO;AAAA,MACjB;AACA,YAAM,QAAQ,QAAQ,EAAE,MAAO,KAAK,CAAC;AAAA,IACzC;AAAA,IACA,oBAAoB,WAAW,MAAM,SAAS;AAC1C,YACI,QAAQ,UAAU,OAClB,OAAQ,6BAAM;AAClB,YAAM,YAAY;AAClB,UAAI,MAAM;AACN,aAAK,cAAc,OAAO,MAAM,SAAS,SAAS;AAAA,MACtD;AACA,YAAM,YAAY;AAAA,IACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAqBA,oBAAoB,UAAU,UAAU,CAAC,GAAG;AACxC,YAAM,KAAK;AACX,SAAG,QAAQ,2BAA2B;AAEtC,SAAG,sBAAsB;AAEzB,SAAG,WAAW,QAAQ,eAAa;AAC/B,cACI,UAAU,UAAU,SACpB,OAAU,SAAS,OAAO;AAC9B,YAAI,MAAM;AACN,aAAG,oBAAoB,WAAW,MAAM,QAAQ,OAAO,CAAC;AAAA,QAC5D;AAAA,MACJ,CAAC;AACD,SAAG,qBAAqB,IAAI;AAC5B,SAAG,QAAQ,qBAAqB;AAAA,IACpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,IAAI,uBAAuB;AACvB,aAAO,QAAQ,KAAK,eAAe,QAAQ,KAAK,oBAAoB;AAAA,IACxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,IAAI,uBAAuB;AACvB,aAAO,QAAQ,KAAK,eAAe,QAAQ,KAAK,oBAAoB;AAAA,IACxE;AAAA,IACA,IAAI,qBAAqB;AACrB,aAAO,QAAQ,KAAK,wBAAwB,KAAK,oBAAoB;AAAA,IACzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAmFA,KAAK,SAAS;AACV,UAAI,OAAO,YAAY,UAAU;AAC7B,kBAAU;AAAA,UACN,SAAU;AAAA,YACN,KAAM;AAAA,UACV;AAAA,QACJ;AAAA,MACJ;AACA,YACI,KAAO,MACP,OAAO,GAAG,eAAe,OAAO;AACpC,SAAG,mBAAmB;AACtB,aAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AAOpC,YAAI,GAAG,QAAQ,cAAc,EAAE,KAAK,CAAC,MAAM,OAAO;AAE9C,gBAAM,EAAE,KAAK,IAAI,GAAG;AACpB,cAAI,MAAM;AACN,eAAG,cAAc,KAAK,MAAM,KAAK,MAAM;AACvC,eAAG,QAAQ,gBAAgB,EAAE,KAAK,CAAC;AAAA,UACvC;AACA,gBAAM,UAAU,QAAQ,OAAO;AAAA,YAC3B,IAAU,KAAK;AAAA,YACf,MAAU,GAAG,OAAO,IAAI;AAAA,YACxB,MAAU;AAAA,YACV,SAAU,GAAG;AAAA,YACb,SAAU,GAAG;AAAA,YACb,SAAU;AAAA,UACd,GAAG,mCAAS,OAAO;AACnB,aAAG,eAAe,OAAO;AAAA,YACrB,MAAO;AAAA,YACP;AAAA,YACA;AAAA,YACA;AAAA,YACA,UAAU,MAAM;AAGZ,sBAAQ,UAAU,QAAQ,UAAU;AACpC,qBAAO,GAAG,IAAI;AAAA,YAClB;AAAA,YACA,IAAO,KAAK;AAAA,YACZ,MAAO,GAAG,YAAY,OAAO;AAAA,UACjC;AACA,aAAG,oBAAoB,KAAK,QAAQ,WAAW;AAC/C,aAAG,QAAQ,aAAa,EAAE,KAAK,CAAC;AAAA,QACpC,OACK;AASD,aAAG,QAAQ,gBAAgB,EAAE,KAAK,CAAC;AACnC,iBAAO,EAAE,WAAY,KAAK,CAAC;AAAA,QAC/B;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,IACA,4BAA4B,aAAa;AACrC,UAAI,UAAU,KAAK,eAAe,WAAW;AAC7C,UAAI,CAAC,WAAW,KAAK,mBAAmB;AACpC,kBAAU,OAAO,OAAO,KAAK,cAAc,EAAE,CAAC;AAAA,MAClD;AACA,aAAO;AAAA,IACX;AAAA;AAAA;AAAA,IAGA,uBAAuB,QAAQ,WAAW;AACtC,YACI,KAAuB,MACvB,EAAE,MAAM,IAAe,WACvB,EAAE,OAAO,IAAc,OACvB,iBAAuB,UAAU,kBAAkB,GAAG,gBACtD,uBAAuB,UAAU,wBAAwB,GAAG,sBAC5D,iBAAuB,MAAM,WAAW,UAAU,OAAO,WAAS,MAAM,QAAQ,GAChF,MAAuB,OAAO,aAC9B,OAAuB,OAAO,OAAO,OAAO,iBAAiB;AAAA,QACzD,CAAC,cAAc,GAAI,OAAO;AAAA,MAC9B,CAAC;AACL,UAAI,QAAQ;AACR,cAAM,EAAE,OAAO,IAAI;AACnB,YAAI,UAAU,CAAC,OAAO,UAAU,OAAO,WAAW;AAC9C,eAAK,oBAAoB,IAAI,OAAO;AAAA,QACxC;AAAA,MACJ;AACA,UAAI,GAAG,oBAAoB;AACvB,qBAAa,WAAW,MAAM,IAAI,OAAO;AAAA,MAC7C;AAEA,qBAAe,QAAQ,WAAS;AAC5B,cAAM,WAAW,OAAO,IAAI,MAAM,IAAI;AACtC,YAAI,SAAS,UAAU;AACnB,eAAK,MAAM,UAAU,IAAI;AAAA,YACrB,OAAQ,SAAS,SAAS,EACrB,IAAI,CAAAG,YAAU,GAAG,uBAAuBA,SAAQ,EAAE,OAAQ,SAAS,CAAC,CAAC;AAAA,UAC9E;AAAA,QACJ;AAAA,MACJ,CAAC;AACD,aAAO;AAAA,IACX;AAAA,IACA,aAAa,MAAM,WAAW;AAC1B,aAAO,KAAK,OAAO,YAAU,OAAO,OAAO,EAAE,IAAI,YAAU,KAAK,uBAAuB,QAAQ,SAAS,CAAC;AAAA,IAC7G;AAAA,IACA,eAAe,MAAM,WAAW;AAC5B,YACI,EAAE,MAAM,IAAe,WACvB,EAAE,OAAO,IAAc,OACvB,iBAAuB,UAAU,kBAAmB,UAAU,mBAAmB,SAAS,KAAK,gBAC/F,uBAAuB,UAAU,wBAAwB,KAAK,sBAC9D,iBAAuB,MAAM,WAAW,UAAU,OAAO,WAAS,MAAM,QAAQ;AACpF,UAAI,UAAU,MAAM,MAAM;AACtB,cAAM,WAAW,UAAU,MAAM;AACjC,eAAO,KAAK,OAAO,YAAU,WAAW,QAAQ;AAAA,MACpD;AACA,aAAO,KAAK,OAAO,YAAU,OAAO,OAAO,EAAE,OAAO,CAAC,MAAM,WAAW;AAClE,YAAI;AAEJ,YAAI,gBAAgB;AAChB,uBAAa,OAAO;AAAA,QACxB,OACK;AACD,uBAAa,OAAO;AAAA,QACxB;AACA,YAAI,QAAQ;AACR,gBAAM,EAAE,OAAO,IAAI;AACnB,cAAI,UAAU,CAAC,OAAO,UAAU,OAAO,WAAW;AAC9C,uBAAW,oBAAoB,IAAI,OAAO;AAAA,UAC9C;AAAA,QACJ;AAEA,uBAAe,QAAQ,WAAS;AAC5B,gBAAM,WAAW,OAAO,IAAI,MAAM,IAAI;AACtC,qBAAW,MAAM,UAAU,IAAI,KAAK,oBAAoB,EAAE,OAAQ,SAAS,CAAC;AAAA,QAChF,CAAC;AAED,YAAI,CAAC,aAAa,QAAQ,UAAU,GAAG;AACnC,eAAK,KAAK,UAAU;AAAA,QACxB;AACA,eAAO;AAAA,MACX,GAAG,CAAC,CAAC;AAAA,IACT;AAAA,IACA,eAAe,MAAM;AACjB,aAAO,KAAK,IAAI,YAAU;AACtB,cAAM,MAAM,OAAO;AACnB,eAAO,aAAa,QAAQ,CAAC,GAAG,IAAI,SAAS,OAAO,EAAE;AAAA,MAC1D,CAAC;AAAA,IACL;AAAA,IACA,oBAAoB,iBAAiB;AACjC,YAAM,EAAE,MAAM,IAAI;AAClB,UAAI,EAAE,QAAQ,CAAC,GAAG,UAAW,UAAU,CAAC,GAAG,UAAU,CAAC,EAAE,IAAK,MAAM,WAAW,CAAC,GAC3E;AACJ,UAAI,MAAM;AAAQ,gBAAQ,KAAK,aAAa,OAAO,eAAe;AAClE,UAAI,QAAQ;AAAQ,kBAAU,KAAK,eAAe,SAAS,eAAe;AAC1E,UAAI,QAAQ;AAAQ,kBAAU,KAAK,eAAe,OAAO;AAEzD,UAAI,MAAM,UAAU,QAAQ,UAAU,QAAQ,QAAQ;AAClD,iBAAS,CAAC;AACV,YAAI,MAAM;AAAQ,iBAAO,QAAQ;AACjC,YAAI,QAAQ;AAAQ,iBAAO,UAAU;AACrC,YAAI,QAAQ;AAAQ,iBAAO,UAAU;AAAA,MACzC;AACA,aAAO;AAAA,IACX;AAAA,IACA,sBAAsB;AAClB,YAAM,EAAE,QAAQ,IAAI;AACpB,aAAO,WAAW,KAAK,YACjB;AAAA,QACE,MAAY;AAAA,QACZ,WAAY,KAAK;AAAA,QACjB,UAAY,KAAK;AAAA,QACjB,GAAG;AAAA,MACP,IAAI;AAAA,IACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAyBA,IAAI,UAAU;AACV,YAAM,OAAO,CAAC;AACd,WAAK,WAAW,QAAQ,WAAS;AAC7B,cAAM,UAAU,KAAK,oBAAoB,KAAK;AAC9C,YAAI,SAAS;AACT,eAAK,MAAM,OAAO,IAAI;AAAA,QAC1B;AAAA,MACJ,CAAC;AACD,aAAO,OAAO,KAAK,IAAI,EAAE,SAAS,IAAI,OAAO;AAAA,IACjD;AAAA,IACA,wBAAwB,EAAE,OAAO,QAAQ,GAAG,eAAe,WAAW;AAh+C9E,UAAAH,KAAA;AAi+CY,YACI,KAAiB,MACjB,EAAE,WAAW,IAAI,OACjB,eAAiB,WAAW,SAE5B;AAAA,QACI,SAAU;AAAA,QACV,SAAU;AAAA,MACd,IAAiB,aAAa,CAAC;AACnC,UAAI,MAAM,SAAS;AAEnB,UAAI,eAAe;AACf,iBAAS;AACT,cAAM,eAAe,CAAC;AAEtB,iBAAUA,MAAA,cAAc,SAAd,gBAAAA,IAAoB,YAAW,CAAC;AAC1C,oBAAU,mBAAc,YAAd,mBAAuB,YAAW,CAAC;AAE7C,SAAC,GAAG,MAAM,GAAG,OAAO,EAAE,QAAQ,oBAAkB;AAC5C,gBAAM,KAAK,aAAa,QAAQ,gBAAgB,YAAY;AAC5D,uBAAa,EAAE,IAAI;AAAA,QACvB,CAAC;AAGD,YAAI,GAAG,0BAA0B;AAE7B,2DAAgB,QAAQ,UAAQ;AAC5B,kBAAM,KAAK,aAAa,QAAQ,MAAM,YAAY;AAElD,gBAAI,CAAC,aAAa,EAAE,GAAG;AACnB,mBAAK,KAAK,EAAE,CAAC,YAAY,GAAI,GAAG,CAAC;AAAA,YACrC;AAAA,UACJ;AAEA,2DAAgB,QAAQ,UAAQ;AAC5B,kBAAM,KAAK,aAAa,QAAQ,MAAM,YAAY;AAElD,gBAAI,CAAC,aAAa,EAAE,GAAG;AACnB,sBAAQ,KAAK,EAAE,CAAC,YAAY,GAAI,GAAG,CAAC;AAAA,YACxC;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ,WAES,kBAAkB,gBAAgB;AACvC,iBAAU;AACV,eAAU;AACV,kBAAU;AAAA,MACd;AAEA,cAAU,6BAAM,UAAS,OAAO;AAChC,iBAAU,mCAAS,UAAS,UAAU;AACtC,aAAO;AAAA,QACH;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,IACA,oBAAoB,WAAW,eAAe,WAAW;AA3hDjE,UAAAA;AA4hDY,YACI,KAAoB,MACpB,iBAAoB,UAAU,kBAAkB,GAAG,gBACnD,EAAE,MAAM,IAAY,WACpB,UAAoB,MAAM,WAAW,mBAAmB,IAAI,GAC5D,iBAAoB,MAAM,WAAW,UAAU,OAAO,WAAS,MAAM,QAAQ,GAE7E,EAAE,MAAM,SAAS,OAAO,IAAI,GAAG,wBAAwB,WAAW,eAAe,SAAS,GAC1F,QAAQ,CAAC,GACT,UAAU,CAAC;AAEf,UAAI,MAAM;AACN,mBAAW,QAAQ,MAAM;AAErB,cAAI,MAAM,SAAQA,MAAA,KAAK,cAAc,MAAnB,OAAAA,MAAwB,KAAK,OAAO,CAAC,GAAG;AACtD,oBAAQ,KAAK,IAAI;AAAA,UACrB,OAEK;AACD,kBAAM,KAAK,IAAI;AAAA,UACnB;AAAA,QACJ;AAAA,MACJ;AACA,YAAM,kBAAkB,CAAC;AAEzB,UAAI,QAAQ,UAAU,eAAe,QAAQ;AACzC,gBAAQ,QAAQ,gBAAc;AAtjD9C,cAAAA,KAAA;AAujDoB,gBACI,SAAS,MAAM,SAAQA,MAAA,WAAW,cAAc,MAAzB,OAAAA,MAA8B,WAAW,OAAO,CAAC,GAExE,kBAAgB,eAAU,UAAV,mBAAiB,KAAK,OAAK,EAAE,cAAc,KAAK,WAAW,cAAc,SACrF,eAAU,YAAV,mBAAmB,KAAK,OAAK,EAAE,OAAO,KAAK,WAAW,OAAO;AACrE,gBAAM,eAAe,CAAC;AACtB,yBAAe,QAAQ,WAAS;AAC5B,kBAAME,SAAQ,OAAO,IAAI,MAAM,IAAI;AACnC,eAAG;AAAA,cAAoB,EAAE,OAAAA,OAAM;AAAA,cAAG,WAAW,MAAM,UAAU;AAAA,cACzD,+CAAgB,MAAM;AAAA,YAC1B;AAIA,yBAAa,MAAM,UAAU,IAAI;AACjC,mBAAO,WAAW,MAAM,UAAU;AAAA,UACtC,CAAC;AACD,0BAAgB,KAAK,CAAC,QAAQ,YAAY,CAAC;AAAA,QAC/C,CAAC;AAAA,MACL;AAEA,YAAM,MAAM,MAAM,eAAe,EAAE,SAAS,OAAO,QAAQ,GAAG,MAAM,gBAAgB,QAAQ,IAAI;AAChG,sBAAgB,QAAQ,CAAC,CAAC,QAAQ,QAAQ,MAAM,OAAO,OAAO,IAAI,IAAI,OAAO,EAAE,GAAG,QAAQ,CAAC;AAC3F,aAAO;AAAA,IACX;AAAA,IACA,kBAAkB,UAAU,SAAS;AAhlD7C,UAAAF;AAilDY,YACI,KAAS,MACT,SAAS,GAAG;AAChB,SAAG,oBAAoB,GAAG,uBAAuB;AACjD,SAAG,sBAAsB;AACzB,iBAAW,SAAS,QAAQ;AACxB,WAAG,oBAAoB,OAAO,SAAS,MAAM,OAAO,IAAGA,MAAA,mCAAS,SAAT,gBAAAA,IAAgB,MAAM,QAAQ;AAAA,MACzF;AACA,SAAG,qBAAqB,IAAI;AAC5B,SAAG,oBAAoB,GAAG,uBAAuB;AAAA,IACrD;AAAA,IACA,kBAAkB,UAAU,SAAS;AACjC,WAAK,uBAAuB;AAC5B,WAAK,oBAAoB,UAAU,OAAO;AAC1C,WAAK,uBAAuB;AAAA,IAChC;AAAA,IACA,MAAM,cAAc,SAAS,UAAU,SAAS;AAC5C,YACI,KAAK,MAEL,eAAe,GAAG,qBAAqB,SAAS,QAAQ,QAAQ;AACpE,cAAQ,cAAc;AAAA,QAClB,KAAK;AACD,cAAI,GAAG,kBAAkB;AACrB,eAAG,qBAAqB,QAAQ;AAAA,UACpC;AACA,aAAG,kBAAkB,UAAU,OAAO;AACtC;AAAA,QACJ,KAAK;AACD,cAAI,GAAG,kBAAkB;AACrB,eAAG,qBAAqB,UAAU,OAAO;AAAA,UAC7C;AACA,aAAG,kBAAkB,UAAU,OAAO;AACtC;AAAA,MACR;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAkCA,eAAe,SAAS,cAAc,MAAM,gBAAgB,aAAa,OAAO;AAC5E,YACI,KAAM,MACN,MAAM,aAAa,oBAAI,IAAI,IAAI;AACnC,SAAG,gBAAgB;AACnB,SAAG,sBAAsB;AACzB,iBAAW,EAAE,OAAO,gBAAAI,gBAAe,KAAK,GAAG,mBAAmB;AAC1D,YAAI,QAAQ,MAAM,EAAE,GAAG;AACnB,gBAAM,WAAW,MAAM;AAAA,YACnB,QAAQ,MAAM,EAAE;AAAA,YAChB;AAAA,YACAA,mBAAkB,GAAG;AAAA;AAAA,YAErB;AAAA,YACA;AAAA,UACJ;AACA,cAAI,UAAU;AACV,gBAAI,IAAI,MAAM,IAAI,QAAQ;AAAA,UAC9B;AAAA,QACJ;AAAA,MACJ;AACA,SAAG,qBAAqB,IAAI;AAC5B,SAAG,eAAe,KAAK;AACvB,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA,IAAI,YAAY;AACZ,aAAO,OAAO,SAAS,GAAG,KAAK,IAAI,CAAC,GAAI,KAAK,YAAa,EAAE;AAAA,IAChE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA0CA,OAAO;AACH,YAAM,KAAK;AAEX,SAAG,aAAa,UAAU;AAC1B,UAAI,GAAG,eAAe,MAAM;AAQxB,WAAG,QAAQ,aAAa;AAExB,eAAO,GAAG,oBAAoB,GAAG,kBAAkB,QAAQ,MAAM,GAAG,KAAK,CAAC;AAAA,MAC9E;AAGA,aAAO,GAAG,oBAAoB,IAAI,QAAQ,CAAC,SAAS,WAAW;AAE3D,cAAM,OAAO,GAAG,oBAAoB;AAEpC,YAAI,CAAC,MAAM;AACP,kBAAQ,IAAI;AACZ;AAAA,QACJ;AAeA,YAAI,GAAG,QAAQ,cAAc,EAAE,KAAK,CAAC,MAAM,OAAO;AAC9C,aAAG,QAAQ,aAAa,EAAE,KAAK,CAAC;AAEhC,aAAG,eAAe,OAAO;AAAA,YACrB,MAAO;AAAA,YACP;AAAA,YACA;AAAA,YACA;AAAA,YACA,IAAO,KAAK;AAAA,YACZ,MAAO,GAAG,YAAY;AAAA,cAClB,IAAU,KAAK;AAAA,cACf,MAAU,GAAG,OAAO,IAAI;AAAA,cACxB,MAAU;AAAA,cACV,SAAU,GAAG;AAAA,cACb,SAAU,GAAG;AAAA,cACb,SAAU;AAAA,YACd,CAAC;AAAA,UACL;AAAA,QACJ,OACK;AAOD,aAAG,QAAQ,gBAAgB,EAAE,KAAK,CAAC;AACnC,iBAAO,EAAE,WAAY,KAAK,CAAC;AAAA,QAC/B;AAAA,MACJ,CAAC,EAAE,MAAM,WAAS;AAEd,YAAI,SAAS,CAAC,MAAM,WAAW;AAC3B,gBAAM;AAAA,QACV;AAEA,eAAO;AAAA,MACX,CAAC;AAAA,IACL;AAAA,IACA,MAAM,qBAAqB,aAAa,cAAc,SAAS;AAC3D,YACI,KAAK,MACL;AAAA,QACI,MAAO;AAAA,QACP,IAAO;AAAA,MACX,IAAK;AACT,UAAI,GAAG;AAAa;AACpB,UAAI,eAAe;AACnB,gBAAU,GAAG,eAAe,WAAW;AAEvC,UAAI;AACA,uBAAe,MAAM,YAAY,KAAK;AAAA,MAC1C,SACO,GAAG;AAAA,MACV;AAEA,UAAI,GAAG;AAAa;AAUpB,WAAI,mCAAS,QAAO,WAAW;AAC3B,cAAM,IAAI,MAAM,eAAe,WAAW,qBAAqB;AAAA,MACnE;AAKA,SAAG,eAAe,WAAW,IAAI;AACjC,YAAM,WAAW,MAAM,GAAG,mBAAmB,SAAS,cAAc,YAAY;AAEhF,UAAI,GAAG;AAAa;AACpB,UAAI,CAAC,aAAa,GAAG,uBAAsB,qCAAU,aAAY,QAAQ,EAAC,qCAAU,WAAU;AAC1F,cAAM,QAAQ;AAAA,UACV;AAAA,UACA;AAAA,UACA;AAAA,QACJ;AACA,YAAI,qCAAU,SAAS;AACnB,gBAAM,UAAU,SAAS;AAAA,QAC7B;AACA,gBAAQ,OAAO,IAAI,wBAAwB,KAAK,CAAC;AAAA,MACrD;AAEA,SAAG,SAAS,aAAa,WAAW,QAAQ,IAAI,IAAI,IAAI,IAAI;AAC5D,cAAQ,QAAQ,EAAE,UAAU,aAAa,cAAc,QAAQ,CAAC;AAAA,IACpE;AAAA,IACA,MAAM,qBAAqB,aAAa,cAAc,SAAS;AAt2DvE,UAAAJ;AAu2DY,YAAM,KAAK;AACX,UAAI,GAAG;AAAa;AACpB,gBAAU,GAAG,eAAe,QAAQ,IAAI;AACxC,YACI,UAAcA,MAAA,6CAAc,oBAAd,gBAAAA,IAA+B,QAC7C,aAAc,QAAQ,iCAAQ,OAAO;AACzC,UAAI,CAAC,YAAY;AACb,YAAI,UACA,eAAe;AACnB,YAAI;AACA,yBAAe,MAAM,YAAY,KAAK;AACtC,qBAAW,GAAG,OAAO,YAAY;AAAA,QACrC,SACO,GAAG;AAAA,QACV;AAEA,YAAI,GAAG;AAAa;AACpB,WAAG,2BAA2B,SAAS,UAAU,cAAc,YAAY;AAE3E,YAAI,GAAG;AAAa;AACpB,gBAAQ,OAAO,IAAI,wBAAwB;AAAA,UACvC;AAAA,UACA;AAAA,QACJ,CAAC,CAAC;AAAA,MACN;AAEA,SAAG,eAAe,QAAQ,IAAI,IAAI;AAAA,IACtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUA,gBAAgB;AACZ,WAAK,WAAW,QAAQ,WAAS,MAAM,MAAM,cAAc,CAAC;AAAA,IAChE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,gBAAgB;AAEZ,WAAK,uBAAuB;AAAA,IAChC;AAAA,IACA,yBAAyB;AACrB,YAAM,EAAE,qBAAqB,IAAI,KAAK;AAGtC,WAAK,kBAAkB,QAAQ,CAAC,EAAE,MAAM,OAAO,CAAC,MAAM,qBAAqB,CAAC,yBAAyB,MAAM,cAAc,CAAC;AAAA,IAC9H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,YAAY;AACR,YACI,KAAiB,MACjB,EAAE,MAAM,KAAK,IAAI,GAAG;AACxB,cAAQ,GAAG,cAAc,KAAK,MAAM,KAAK,MAAM;AAC/C,cAAQ,GAAG,cAAc,KAAK,MAAM,KAAK,MAAM;AAC/C,aAAO,GAAG,WAAW,SAAS,GAAG;AAC7B,WAAG,gBAAgB,GAAG,WAAW,CAAC,CAAC;AAAA,MACvC;AACA,YAAM,aAAa,MAAM,UAAU;AAAA,IACvC;AAAA,EACJ,GAzkDI,cAhRG,IAgRI,gBAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA2BlB,SAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA2BV,SAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMV,WAAY;AAAA,EAChB,IACA,cA9UG,IA8UI,aAAY;AAAA;AAAA;AAAA,IAGf,YAAa;AAAA,EACjB,IAlVG;AA01DX;;;AC75DA,IAAO,wBAAQ,YAAU,MAAM,uBAAuB,UAAU,MAAM;AAAA,EAClE,WAAW,QAAQ;AACfgKA,WAAW,gBAAgB;AACvB,WAAO;AAAA,MACH,MAAO;AAAA,MACP,MAAO;AAAA,IACX;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,cAAc,gBAAgB,QAAQ;AAjM1C;AAkMQ,yBAAe,UAAf;AACA,QAAI,CAAC,KAAK,cAAc;AACpB,aAAO,EAAE,WAAY,KAAK,CAAC;AAAA,IAC/B;AAAA,EACJ;AAAA,EACA,4BAA4B,SAAS,QAAQ,WAAW;AACpD,WAAO,EAAE,WAAW,UAAU,WAAW,UAAU,CAAC;AAAA,EACxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBA,YAAY,SAAS;AACjB,UACI,KAAkB,MAClB,EAAE,KAAK,IAAW,SAClB,kBAAkB,GAAG,UAAU,QAAQ,IAAI,KAAK,CAAC,GAEjD,gBAAkB,QAAQ,OAAO,CAAC,GAAG,iBAAiB,gBAAgB,aAAa;AACvF,QAAI,QAAQ,KAAK;AACb,oBAAc,MAAM,QAAQ;AAAA,IAChC;AACA,kBAAc,SAAS,cAAc,UAAU,cAAc,cAAc,QAAQ,IAAI;AACvF,kBAAc,SAAS,QAAQ,OAAO,cAAc,UAAU,CAAC,GAAG,QAAQ,MAAM;AAChF,QAAI,EAAE,UAAU,IAAI;AAEpB,QAAI,GAAG,4BAA4B,iBAAiB,cAAc,QAAQ,SAAS,GAAG;AAClF,oBAAc,OAAO;AAErB,oBAAc,UAAU,cAAc,WAAW,CAAC;AAClD,oBAAc,QAAQ,cAAc,IAAI,cAAc,QAAQ,cAAc,KAAK;AAAA,IACrF,OACK;AAED,kBAAY,aAAa;AACzB,oBAAc,OAAO,SAAS,IAAI;AAAA,IACtC;AACA,QAAI,CAAC,cAAc,KAAK;AACpB,YAAM,IAAI,MAAM,yCAAyC;AAAA,IAC7D;AAEA,WAAO,cAAc;AACrB,WAAO,cAAc;AACrB,QAAI,aAAa;AACjB,aAAS,cAAc;AAEnB,oBAAc,cAAc,cAAc;AAC1C,aAAO,cAAc;AACrB,UAAI,YAAY;AAChB,YAAM,eAAe,QAAQ,OAAO,CAAC,GAAG,eAAe,cAAc,YAAY;AACjF,oBAAe,WAAW,MAAM,cAAc,KAAK,YAAY;AAC/D,aAAO,YAAY,MAAM,WAAS;AAlQ9C;AAmQgB,oBAAY,OAAO;AACnB,iBAAG,YAAH,4BAAa,oBAAoB,EAAE,SAAU,MAAM;AACnD,cAAM,UAAS,kBAAa,oBAAb,mBAA8B;AAC7C,YAAI,QAAQ;AACR,sBAAY,OAAO;AACnB,cAAI,CAAC,WAAW;AACZ,oBAAQ,KAAK,KAAK;AAAA,UACtB;AAAA,QACJ;AACA,eAAO,EAAE,OAAO,UAAU;AAAA,MAC9B,CAAC,EAAE,KAAK,cAAY;AA7QhC;AA8QgB,oBAAY,OAAO;AACnB,iBAAG,YAAH,4BAAa,oBAAoB,EAAE,SAAU,QAAQ,qCAAU,EAAE,EAAE;AACnE,cAAM,YAAW,qCAAU,MAAK,QAAQ,UAAU,QAAQ;AAC1D,eAAO,qCAAU,KAAK,QAAQ,WAAW,IAAI,UAAU,cAAc;AAAA,MACzE,CAAC;AAAA,IACL;AAyBA,UAAM,mBAAmB,GAAG,QAAQ,cAAc;AAAA,MAC9C,QAAc,cAAc;AAAA,MAC5B,aAAc,QAAQ;AAAA,MACtB;AAAA,MACA,QAAc;AAAA,IAClB,CAAC;AACD,QAAI,QAAQ,UAAU,gBAAgB,GAAG;AACrC,sBAAgB,iBAAiB,KAAK,WAAW;AAAA,IACrD,OACK;AACD,sBAAgB,YAAY;AAAA,IAChC;AACA,kBAAc,QAAQ,MAAM;AAxTpC;AAyTY,UAAI,CAAC,YAAY,MAAM;AACnB,0BAAY,UAAZ;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AACJ;;;AC/SA,IAAO,sBAAQ,YAAU,MAAM,qBAAqB,UAAU,MAAM;AAAA,EAChE,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,WAAW,gBAAgB;AACvB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAiCH,SAAU,CAAC;AAAA,IACf;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,aAAa;AAhExB;AAiEQ,kBAAc,OAAO,OAAO,CAAC,IAAG,UAAK,YAAL,mBAAc,aAAa,WAAW;AACtE,WAAO,aAAa,kBAAkB,WAAW;AAAA,EACrD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,cAAc;AACjB,WAAO,aAAa,cAAc,YAAY;AAAA,EAClD;AACJ;;;AC7DA,IAAO,6BAAQ,YAAU,MAAM,4BAA4B,UAAU,MAAM,MAAM,kCAA0B,uBAAe,mBAAW,EAAE;AAAA;AAAA,EAEnI,WAAW,gBAAgB;AACvB,WAAO;AAAA,MACH,SAAU;AAAA,IACd;AAAA,EACJ;AAAA,EACA,eAAe,QAAQ;AAEnB,SAAK,UAAU,SAAS;AACxB,UAAM,eAAe,MAAM;AAC3B,SAAK,kBAAkB,oBAAI,IAAI;AAAA,EACnC;AAAA,EACA,MAAM,aAAa;AACf,UAAM,EAAE,QAAQ,IAAI;AAEpB,QAAI,SAAS;AACT,YAAM,QAAQ,YAAY;AAAA,IAC9B;AACA,WAAO,MAAM,WAAW;AAAA,EAC5B;AAAA,EACA,qBAAqB,UAAU;AAC3B,UACI,KAAK,MACL,EAAE,QAAQ,IAAI;AAClB,OAAG,0BAA0B;AAC7B,UACI,iBAAiB,QAAQ,SAAS,WAClC,eAAiB,QAAQ,SAAS,SAClC,YAAiB,aAAa,QAAQ,UAAU,eAAe,UAAU,GACzE,UAAiB,aAAa,QAAQ,UAAU,aAAa,UAAU;AAE3E,QAAI,OAAO,cAAc,UAAU;AAC/B,mBAAa,QAAQ,UAAU,eAAe,YAAY,eAAe,QAAQ,SAAS,CAAC;AAAA,IAC/F;AACA,QAAI,OAAO,YAAY,UAAU;AAC7B,mBAAa,QAAQ,UAAU,aAAa,YAAY,aAAa,QAAQ,OAAO,CAAC;AAAA,IACzF;AACA,YAAQ,gBAAgB,QAAQ;AAChC,OAAG,gBAAgB,IAAI,IAAI,QAAQ;AACnC,OAAG,0BAA0B;AAAA,EACjC;AAAA,EACA,oBAAoB,UAAU,UAAU,CAAC,GAAG;AACxC,UACI,KAAK,MACL,EAAE,QAAQ,IAAI;AAElB,OAAG,sBAAsB;AACzB,UAAM,oBAAoB,GAAG,SAAS;AAEtC,QAAI,qCAAU,SAAS;AAMnB,UAAI,QAAQ,wBAAwB,QAAQ,iBAAiB;AACzD,gBAAQ,IAAI;AAAA,UACR,iBAAkB,MAAM;AACpB,eAAG,sBAAsB;AACzB,eAAG,qBAAqB,SAAS,OAAO;AACxC,eAAG,qBAAqB;AAAA,UAC5B;AAAA,UACA,MAAO;AAAA,QACX,CAAC;AAAA,MACL,OACK;AACD,WAAG,qBAAqB,SAAS,OAAO;AAAA,MAC5C;AAAA,IACJ;AACA,OAAG,qBAAqB;AAAA,EAC5B;AAAA,EACA,MAAM,OAAO;AACT,UAAM,EAAE,QAAQ,IAAI;AAEpB,SAAK,gBAAgB;AAErB,QAAI,SAAS;AACT,YAAM,QAAQ,YAAY;AAAA,IAC9B;AACA,QAAI,KAAK,cAAc;AACnB;AAAA,IACJ;AAEA,SAAK,eAAe,KAAK;AACzB,WAAO,MAAM,KAAK;AAAA,EACtB;AAAA,EACA,MAAM,cAAc,SAAS,UAAU,SAAS;AAxGpD;AAyGQ,UAAM,KAAK;AACX,QAAI,GAAG,iBAAe,QAAG,YAAH,mBAAY,cAAa;AAC3C;AAAA,IACJ;AACA,OAAG,QAAQ,qBAAqB;AAChC,UAAM,MAAM,cAAc,SAAS,UAAU,OAAO;AAIpD,SAAI,qCAAU,YAAY,GAAG,8BAA4B,wCAAS,SAAT,mBAAe,UAAU;AAE9E,SAAG,qBAAqB,SAAS,aAAW,wCAAS,SAAT,mBAAe,QAAO;AAAA,IACtE;AAEA,QAAI,GAAG,SAAS;AACZ,UAAI,cAAc,QAAQ;AAE1B,UAAI,GAAG,mBAAmB;AACtB,sBAAc,SAAS,QAAQ;AAAA,MACnC;AAEA,YAAM,kBAAkB,cAAc,aAAa,WAAW,WAAW,CAAC;AAC1E,SAAG,gBAAgB;AACnB,SAAG,eAAe,IAAI;AACtB,YAAM,OAAO,GAAG,QAAQ,mBAAmB,CAAC,GAAG,QAAQ;AAEvD,YAAM,GAAG,QAAQ,YAAY;AAC7B,SAAG,eAAe,IAAI;AAEtB,eAAG,mBAAH,4BAAoB;AAEpB,eAAG,2BAAH;AAAA,IACJ;AAEA,aAAG,YAAH,4BAAa;AAAA,EACjB;AAAA,EACA,qBAAqB,MAAM;AA7I/B;AA8IQ,UACI,KAAc,MACd,eAAc,QAAG,YAAH,mBAAY,IAAI;AAClC,QAAI,gBAAgB,SAAS,GAAG,0BAA0B;AACtD,SAAG,QAAQ,IAAI,QAAQ;AAAA,IAC3B;AACA,UAAM,kBAAkB,GAAG,IAAI;AAC/B,QAAI,gBAAgB,OAAO;AACvB,SAAG,QAAQ,IAAI,OAAO;AAAA,IAC1B;AAAA,EACJ;AAAA,EACA,6BAA6B,QAAQ,OAAO,OAAO;AAC/C,UAAM,WAAW,OAAO,SAAS,KAAK;AACtC,YAAQ,OAAO,mBAAmB,KAAK;AAGvC,YAAO,+BAAO,WAAU,MAAM,QAAQ,UAAU,KAAK,IAAI,aAAa,QAAQ,UAAU,KAAK;AAAA,EACjG;AAAA,EACA,yBAAyB;AAErB,SAAK,gBAAgB,QAAQ,CAAC,SAAS,WAAW;AAC9C,aAAO,QAAQ,OAAO,EAAE,QAAQ,CAAC,CAAC,KAAK,KAAK,MAAM;AAG9C,YAAI,KAAK,6BAA6B,QAAQ,KAAK,KAAK,GAAG;AACvD,iBAAO,OAAO,KAAK,SAAS,GAAG;AAAA,QACnC;AAAA,MACJ,CAAC;AAAA,IACL,CAAC;AACD,SAAK,gBAAgB,MAAM;AAAA,EAC/B;AAAA,EACA,oBAAoB,WAAW,eAAe,cAAc,MAAM;AAC9D,UAAM,aAAa,MAAM,oBAAoB,WAAW,eAAe,WAAW,GAAG,IAAI;AAGzF,QAAI,WAAW,QAAQ,KAAK,SAAS;AACjC,iBAAW,CAAC,IAAI,OAAO,KAAK,YAAY;AACpC,cAAM,SAAS,UAAU,MAAM,QAAQ,EAAE;AACzC,kBAAU,KAAK,gBAAgB,IAAI,QAAQ,OAAO;AAAA,MACtD;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AACJ;;;AC/IA,IAAqB,sBAArB,cAAiD,KAAK,MAAM,gCAAwB,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUlF,IAAI,WAAW;AACX,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,SAAS,OAAO;AAChB,SAAK,eAAe;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA+BA,IAAI,OAAO;AACP,WAAO,aAAa,kBAAkB,IAAI;AAAA,EAC9C;AAAA,EACA,IAAI,KAAK,MAAM;AACX,QAAI,OAAO,SAAS,UAAU;AAC1B,aAAO,aAAa,cAAc,IAAI;AAAA,IAC1C;AACA,SAAK,iBAAiB,WAAS;AAC3B,YAAM,WAAW,GAAG,MAAM,OAAO;AACjC,UAAI,KAAK,QAAQ,GAAG;AAChB,cAAM,OAAO,KAAK,QAAQ;AAAA,MAC9B;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EACA,WAAW,gBAAgB;AACvB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAWH,QAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAeb;AAAA,EACJ;AAAA;AAAA;AAAA,EAGA,UAAU,SAAS,CAAC,GAAG;AACnB,QAAI,OAAO,QAAQ;AACf,aAAO,aAAa,OAAO;AAC3B,aAAO,OAAO;AAAA,IAClB;AACA,UAAM,UAAU,MAAM;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAuCA,SAAS;AAEL,UAAM,SAAS,CAAC;AAChB,SAAK,iBAAiB,CAAC,OAAO,YAAY,OAAO,GAAG,OAAO,MAAM,IAAI,MAAM,OAAO,CAAC;AACnF,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA2BA,IAAI,aAAa;AACb,WAAO,KAAK,OAAO;AAAA,EACvB;AAAA,EACA,IAAI,WAAW,MAAM;AACjB,SAAK,OAAO;AAAA,EAChB;AAAA;AAAA;AAAA,EAGA,IAAI,OAAO,QAAQ;AACf,QAAI,WAAW,KAAK,YAAY;AAC5B,WAAK,aAAa;AAAA,IACtB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,SAAS;AACT,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,YAAY;AACZ,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsDA,YAAY,MAAM;AACd,WAAO,KAAK,aAAa,GAAG,IAAI;AAAA,EACpC;AAAA,EACA,eAAe,MAAM;AACjB,WAAO,KAAK,gBAAgB,GAAG,IAAI;AAAA,EACvC;AAAA,EACA,YAAY,MAAM;AACd,WAAO,KAAK,aAAa,GAAG,IAAI;AAAA,EACpC;AAAA,EACA,cAAc,MAAM;AAChB,WAAO,KAAK,oBAAoB,GAAG,IAAI;AAAA,EAC3C;AAAA,EACA,YAAY,MAAM;AACd,WAAO,KAAK,oBAAoB,GAAG,IAAI;AAAA,EAC3C;AACJ;AACA,oBAAoB,SAAS;;;AC7S7B,IAAO,6BAAQ,YAAO;AATtB;AASyB,6BAAkC,UAAU,OAAO;AAAA,IAExE,WAAW,eAAe;AACtB,aAAO;AAAA;AAAA,QAEH,aAAe;AAAA,QACf,cAAe;AAAA,QACf,WAAe;AAAA,QACf,YAAe;AAAA,MACnB;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA,WAAW,mBAAmB;AAC1B,aAAO;AAAA,IACX;AAAA;AAAA,IAEA,IAAI,cAAc;AACd,aAAO,KAAK,gBAAgB;AAAA,IAChC;AAAA,IACA,kBAAkB,aAAa;AAC3B,WAAK,gBAAgB,OAAO;AAAA,IAChC;AAAA,IACA,IAAI,eAAe;AACf,aAAO,KAAK,gBAAgB;AAAA,IAChC;AAAA,IACA,mBAAmB,cAAc;AAC7B,WAAK,gBAAgB,OAAO;AAAA,IAChC;AAAA,IACA,IAAI,YAAY;AACZ,aAAO,KAAK,cAAc;AAAA,IAC9B;AAAA,IACA,gBAAgB,WAAW;AACvB,WAAK,cAAc,OAAO;AAAA,IAC9B;AAAA,IACA,IAAI,aAAa;AACb,aAAO,KAAK,eAAe;AAAA,IAC/B;AAAA,IACA,cAAc,WAAW,SAAS;AAC9B,YACI,QAAQ,KAAK,gBACb,MAAM,CAAC;AACX,iBAAW,YAAY,OAAO;AAE1B,YAAI,SAAS,aAAa;AACtB,cAAI,KAAK,GAAG,SAAS,2BAA2B,WAAW,OAAO,CAAC;AAAA,QACvE,WACS,SAAS,YAAY,WAAW,YAAY,SAAS,SAAS;AACnE,cAAI,KAAK,QAAQ;AAAA,QACrB;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,IACA,iBAAiB,YAAY;AACzB,WAAK,eAAe,OAAO;AAAA,IAC/B;AAAA,IACA,sBAAsB,WAAW,SAAS;AACtC,YACI,QAAQ,KAAK,wBACb,MAAM,CAAC;AACX,iBAAW,YAAY,OAAO;AAE1B,YAAI,SAAS,aAAa;AACtB,cAAI,KAAK,GAAG,SAAS,2BAA2B,WAAW,OAAO,CAAC;AAAA,QACvE,WAES,SAAS,YAAY,YAAY,CAAC,SAAS,WAAW,YAAY,SAAS,UAAU;AAC1F,cAAI,KAAK,QAAQ;AAAA,QACrB;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA;AAAA,EAEJ,GA1EI,cADqB,IACd,SAAQ,uBADM;AAAA;;;ACuBzB,IAAqB,yBAArB,cAAoD,SAAS,MAAM,yBAAiB,EAAE;AAAA,EA8BlF,IAAI,QAAQ;AACR,WAAO,GAAG,KAAK,YAAY,WAAW,IAAI,KAAK,EAAE;AAAA,EACrD;AAAA;AAAA;AAAA,EAGA,IAAI,sBAAsB;AACtB,WAAO;AAAA,EACX;AAAA;AAAA,EAEA,IAAI,YAAY;AACZ,WAAO,KAAK,WAAW,CAAC,KAAK,QAAQ,IAAI,CAAC;AAAA,EAC9C;AAAA;AAAA,EAEA,IAAI,mBAAmB;AACnB,WAAO,KAAK;AAAA,EAChB;AACJ;AA7CI,cADiB,wBACV,SAAQ;AAAA;AAEf,cAHiB,wBAGV,UAAS;AAAA;AAAA;AAAA;AAAA;AAAA,EAKZ;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA;AACJ;AACA,cAfiB,wBAeV,aAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOf,UAAW;AAAA,IACP,YAAwB;AAAA,IACxB,cAAwB;AAAA,IACxB,uBAAwB;AAAA,IACxB,mBAAwB;AAAA,EAC5B;AACJ;AACA,cA7BiB,wBA6BV,eAAc;AAkBzB,uBAAuB,SAAS;;;AChDhC,IAAqB,yBAArB,cAAoD,UAAU,MAAM,+BAAuB,EAAE;AAAA,EAEzF,WAAW,gBAAgB;AACvB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA,MAKH,cAAe;AAAA;AAAA;AAAA;AAAA;AAAA,MAKf,cAAe;AAAA;AAAA;AAAA;AAAA;AAAA,MAKf,eAAgB;AAAA,MAChB,YAAa;AAAA,MACb,SAAa;AAAA,IACjB;AAAA,EACJ;AAAA,EACA,IAAI,cAAc,OAAO;AACrB,SAAK,iBAAiB;AAEtB,QAAI,CAAC,KAAK,eAAe;AACrB,WAAK,cAAc,IAAI;AAAA,IAC3B;AAAA,EACJ;AAAA,EACA,IAAI,gBAAgB;AAChB,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA,EAEA,qBAAqB,mBAAmB;AACpC,WAAO,CAAC,kBAAkB,QAAQ;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,UAAU,EAAE,gBAAgB,WAAW,QAAQ,GAAG;AAC9C,UAAM,oBAAoB,eAAe,WAAW,QAAQ,WAAS;AACjE,UAAI,MAAM,mBAAmB;AACzB,eAAO,MAAM,2BAA2B,WAAW,OAAO;AAAA,MAC9D;AACA,UAAI,MAAM,gBAAgB,WAAW,OAAO,GAAG;AAC3C,eAAO;AAAA,MACX;AACA,aAAO,CAAC;AAAA,IACZ,CAAC;AACD,WAAO,kBAAkB,KAAK,CAAC,OAAO,UAAU,MAAM,YAAY,MAAM,SAAS;AAAA,EACrF;AACJ;AA3DI,cADiB,wBACV,SAAQ;AA4DnB,uBAAuB,SAAS;;;ACnFhC,IAAqB,sBAArB,cAAiD,eAAe;AAAA,EAM5D,IAAI,WAAW;AACX,WAAO,KAAK,OAAO,QAAQ;AAAA,EAC/B;AAAA;AAAA;AAAA,EAGA,cAAc,QAAQ,WAAW;AAC7B,QAAI,aAAa,KAAK,OAAO,iBAAiB,OAAO,aAAa,QAAW;AAGzE,WAAK,wBAAwB,MAAM;AAAA,IACvC;AAAA,EACJ;AAAA,EACA,wBAAwB,QAAQ,WAAW,KAAK,UAAU;AA3B9D;AA4BQ,QAAI,OAAO,aAAa,UAAU;AAC9B,aAAO,gBAAgB;AAEvB,WAAI,YAAO,cAAP,mBAAkB,OAAO;AACzB,mBAAW,MAAM,OAAO,WAAW;AAE/B,cAAI,OAAO,aAAa,GAAG,UAAU;AACjC,eAAG,WAAW,OAAO;AAAA,UACzB;AACA,aAAG,kBAAkB,QAAQ;AAAA,QACjC;AAAA,MACJ;AACA,WAAI,YAAO,gBAAP,mBAAoB,QAAQ;AAC5B,mBAAW,KAAK,OAAO,aAAa;AAChC,cAAI,OAAO,aAAa,EAAE,UAAU;AAChC,cAAE,WAAW,OAAO;AAAA,UACxB;AACA,YAAE,kBAAkB,QAAQ;AAAA,QAChC;AAAA,MACJ;AACA,aAAO,kBAAkB,QAAQ;AACjC,aAAO,gBAAgB;AAAA,IAC3B;AAAA,EACJ;AAAA,EACA,iBAAiB,EAAE,OAAO,GAAG;AACzB,QAAI,OAAO,YAAY,MAAM;AACzB,aAAO,mBAAmB,OAAO;AACjC,aAAO,kBAAkB;AAAA,IAC7B;AAAA,EACJ;AAAA,EACA,gBAAgB,EAAE,OAAO,GAAG;AACxB,QAAI,OAAO,kBAAkB;AACzB,aAAO,kBAAkB,OAAO,gBAAgB;AAChD,aAAO,mBAAmB;AAAA,IAC9B;AAAA,EACJ;AACJ;AAtDI,cADiB,qBACV,SAAQ;AACf,cAFiB,qBAEV,gBAAe;AAAA,EAClB,QAAS,CAAC,eAAe;AAAA,EACzB,QAAS,CAAC,oBAAoB,iBAAiB;AACnD;AAmDJ,oBAAoB,SAAS;;;ACvD7B,IAAO,oCAAQ,YAAO;AAVtB;AAUyB,6BAAyC,UAAU,OAAO;AAAA,IAgD/E,IAAI,mBAAmB;AACnB,aAAO,CAAC,KAAK,WAAW,KAAK,gBAAgB,KAAK,sBAAsB,EAAE,OAAO,OAAK,CAAC;AAAA,IAC3F;AAAA,IACA,UAAU,OAAO;AACb,UAAI,CAAC,MAAM,UAAU,mBAAmB,GAAG;AACvC,cAAM,WAAW,mBAAmB;AAAA,MACxC;AAAA,IACJ;AAAA,IACA,YAAY,OAAO;AAlEvB,UAAAK;AAmEQ,OAAAA,MAAA,MAAM,QAAQ,wBAAd,gBAAAA,IAAmC;AAAA,IACvC;AAAA,IACA,YAAY,OAAO;AACf,YAAM,YAAY,KAAK;AAEvB,UAAI,SAAS,KAAK,YAAY,QAAQ,KAAK,iBAAiB,SAAS,KAAK,GAAG;AACzE,aAAK,UAAU,KAAK;AACpB,aAAK,wBAAwB,CAAC,KAAK,CAAC;AAAA,MACxC;AAAA,IACJ;AAAA,IACA,YAAY,OAAO;AACf,YAAM,YAAY,KAAK;AAEvB,UAAI,SAAS,CAAC,MAAM,eAAe,KAAK,YAAY,MAAM;AAEtD,aAAK,wBAAwB,CAAC,KAAK,GAAG,IAAI;AAE1C,aAAK,YAAY,KAAK;AAAA,MAC1B;AAAA,IACJ;AAAA,IACA,iBAAiB,EAAE,QAAQ,QAAQ,SAAS,SAAS,GAAG;AACpD,YAAM,KAAK;AACX,UAAI,GAAG,YAAY,QAAQ,GAAG,iBAAiB,SAAS,MAAM,GAAG;AAE7D,YAAI,CAAC,OAAO,SAAS,EAAE,SAAS,MAAM,GAAG;AACrC,cAAI,EAAC,mCAAS,YAAU,qCAAU,SAAQ;AACtC,sBAAU;AAAA,UACd;AACA,cAAI,QAAQ,QAAQ;AAChB,oBAAQ,QAAQ,YAAU,OAAO,WAAW,GAAG,QAAQ;AAAA,UAC3D;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA,wBAAwB,QAAQ,WAAW,KAAK,UAAU;AArG9D,UAAAA;AAsGQ,YACI,KAAgB,MAChB,iBAAgBA,MAAA,GAAG,QAAH,gBAAAA,IAAQ;AAE5B,UAAI,eAAe;AACf,WAAG,IAAI,aAAa;AAAA,MACxB;AACA,iBAAW,SAAS,QAAQ;AACxB,uCAAO,QAAQ,OAAK,MAAM,QAAQ,oBAAoB,wBAAwB,GAAG,QAAQ;AAAA,MAC7F;AACA,UAAI,eAAe;AAEf,WAAG,gBAAgB;AAAA,MACvB;AAAA,IACJ;AAAA,IACA,eAAe,UAAU,aAAa;AAClC,YACI,KAAgB,MAChB,gBAAgB,GAAG,0BAA0B,GAAG;AACpD,SAAG,QAAQ,wBAAwB;AAAA,QAC/B;AAAA,QACA;AAAA,QACA;AAAA,MACJ,CAAC;AACD,SAAG,qBAAqB,QAAQ,cAAY,SAAS,YAAY,CAAC;AAClE,SAAG,iBAAiB,QAAQ,WAAS,GAAG,UAAU,KAAK,CAAC;AAExD,SAAG,wBAAwB,GAAG,gBAAgB;AAE9C,UAAI,GAAG,WAAW;AACd,cAAM,YAAY,eAAe,OAAO,eAAe,aAAa,GAAG,WAAW,WAAW,IAAI,GAAG;AACpG,WAAG,YAAY,YAAY,OAAO,eAAe,WAAW,WAAW,QAAQ,IAAI;AAAA,MACvF;AACA,SAAG,sBAAsB;AACzB,SAAG,YAAY,EAAE,KAAK,MAAM;AACxB,YAAI,CAAC,GAAG,aAAa;AACjB,aAAG,QAAQ,kBAAkB;AAAA,YACzB;AAAA,YACA;AAAA,YACA;AAAA,UACJ,CAAC;AAAA,QACL;AACA,eAAO,GAAG;AAAA,MACd,CAAC;AAAA,IACL;AAAA,EACJ,GAxII,cADqB,IACd,SAAQ,8BACf,cAFqB,IAEd,gBAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAuClB,UAAW;AAAA;AAAA;AAAA,MAGP,SAAU;AAAA,MACV,OAAU;AAAA,IACd;AAAA,EACJ,IA/CqB;AAAA;;;ACgBzB,IAAqB,iBAArB,cAA4C,SAAS,MAAM,yBAAiB,EAAE;AAAA;AAAA;AAAA;AAAA,EAK1E,iBAAiB;AACb,QAAI,CAAC,KAAK,SAAS;AACf,WAAK,UAAU,KAAK;AAAA,IACxB;AACA,UAAM,eAAe;AAAA,EACzB;AACJ;AAVI,cADiB,gBACV,SAAQ;AAWnB,eAAe,SAAS;;;ACPxB,IAAqB,iBAArB,cAA4C,UAAU,MAAM,+BAAuB,EAAE;AAgBrF;AAfI,cADiB,gBACV,SAAQ;AACf,cAFiB,gBAEV,iBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKnB,cAAe;AAAA;AAAA;AAAA;AAAA;AAAA,EAKf,cAAe;AAAA,EACf,YAAa;AAAA,EACb,SAAa;AACjB;AAEJ,eAAe,SAAS;;;AC7BxB,IAAO,4BAAQ,YAAO;AAnBtB;AAmByB,6BAAiC,UAAU,OAAO;AAAA,IACvE;AAAA,IACA;AAAA,EACJ,EAAE;AAAA,IACE,WAAW,QAAQ;AACf,aAAO;AAAA,IACX;AAAA;AAAA,IAEA,WAAW,gBAAgB;AACvB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAYH,KAAM,CAAC;AAAA,QACP,qBAA8B;AAAA,QAC9B,6BAA8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAQ9B,qBAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAQtB,6BAA8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAgB9B,YAAyB,CAAC;AAAA,QAC1B,iBAAyB,CAAC;AAAA,QAC1B,iBAAyB,CAAC;AAAA,QAC1B,eAAyB,CAAC;AAAA,QAC1B,gBAAyB;AAAA,QACzB,wBAAyB;AAAA,MAC7B;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAiFA,IAAI,aAAa;AACb,aAAO,aAAa,cAAc,MAAM,IAAI;AAAA,IAChD;AAAA,IACA,IAAI,WAAW,YAAY;AACvB,WAAK,OAAO;AAAA,IAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAyDA,UAAU,SAAS,CAAC,GAAG;AACnB,YAAM,UAAU,GAAG,SAAS;AAE5B,UAAI,OAAO,gBAAgB;AACvB,aAAK,eAAe,OAAO,OAAO;AAAA,MACtC;AACA,UAAI,OAAO,wBAAwB;AAC/B,aAAK,uBAAuB,OAAO,OAAO;AAAA,MAC9C;AAAA,IACJ;AAAA,IACA,iBAAiB;AACb,YAAM,eAAe;AACrB,YAAM,KAAK;AACX,OAAC,GAAG,eAAe,OAAO,GAAG,IAAI,SAAS,GAAG,cAAc;AAC3D,OAAC,GAAG,uBAAuB,OAAO,GAAG,IAAI,SAAS,GAAG,sBAAsB;AAAA,IAC/E;AAAA;AAAA;AAAA;AAAA,IAIA,YAAY,OAAO;AACf,UAAI,OAAO;AACP,cAAM,IAAI;AAAA,UACN,MAAU,MAAM;AAAA,UAChB,QAAU;AAAA,UACV,SAAU;AAAA,QACd,CAAC;AAAA,MACL;AACA,YAAM,YAAY,KAAK;AAAA,IAC3B;AAAA;AAAA,IAEA,YAAY,OAAO;AACf,UAAI,OAAO;AACP,aAAK,gBAAgB,MAAM,MAAM;AACjC,cAAM,YAAY,KAAK;AAAA,MAC3B;AAAA,IACJ;AAAA,IACA,iBAAiB,OAAO;AACpB,YAAM,iBAAiB,KAAK;AA0B5B,aAAO,KAAK,QAAQ,UAAU,EAAE,OAAQ,MAAM,QAAQ,GAAG,OAAO,QAAS,KAAK,CAAC;AAAA,IACnF;AAAA,IACA,qBAAqB,OAAO,UAAU;AAClC,WAAK,YAAY,QAAQ;AACzB,WAAK,YAAY,KAAK;AACtB,UAAI,UAAU;AACV,iBAAS,UAAU;AAAA,MACvB;AACA,UAAI,OAAO;AACP,cAAM,UAAU;AAAA,MACpB;AAAA,IACJ;AAAA,IACA,kBAAkB,OAAO;AACrB,WAAK,iBAAiB;AAAA,IAC1B;AAAA,IACA,qBAAqB,OAAO;AAExB,UAAI,SAAS,CAAC,MAAM,SAAS;AACzB,gBAAQ,KAAK,oBAAoB,IAAI;AAAA,UACjC,YAAa,KAAK;AAAA,QACtB,GAAG,KAAK;AAAA,MACZ;AACA,aAAO;AAAA,IACX;AAAA,IACA,6BAA6B,OAAO,UAAU;AAC1C,WAAK,YAAY,QAAQ;AACzB,WAAK,YAAY,KAAK;AACtB,UAAI,UAAU;AACV,iBAAS,UAAU;AAAA,MACvB;AACA,UAAI,OAAO;AACP,cAAM,UAAU;AAAA,MACpB;AAAA,IACJ;AAAA,IACA,6BAA6B,OAAO;AAEhC,UAAI,SAAS,CAAC,MAAM,SAAS;AACzB,gBAAQ,KAAK,4BAA4B,IAAI;AAAA,UACzC,YAAa,KAAK;AAAA,QACtB,GAAG,KAAK;AAAA,MACZ;AACA,aAAO;AAAA,IACX;AAAA,IACA,0BAA0B,OAAO;AAC7B,WAAK,yBAAyB;AAAA,IAClC;AAAA;AAAA;AAAA,IAGA,IAAI,SAAS;AACT,aAAO,KAAK,WAAW;AAAA,IAC3B;AAAA,IACA,aAAa,QAAQ;AACjB,WAAK,WAAW,OAAO;AAAA,IAC3B;AAAA,IACA,IAAI,qBAAqB;AACrB,aAAO,KAAK,uBAAuB;AAAA,IACvC;AAAA,IACA,yBAAyB,oBAAoB;AACzC,WAAK,uBAAuB,OAAO;AAAA,IACvC;AAAA,IACA,MAAM,eAAe,MAAM;AAEvB,WAAK,sBAAsB;AAE3B,UAAI,KAAK,wBAAwB;AAC7B,aAAK,uBAAuB,OAAO,KAAK;AAAA,MAC5C;AACA,UAAI,KAAK,gBAAgB;AACrB,aAAK,eAAe,OAAO,KAAK;AAAA,MACpC;AACA,aAAO,MAAM,eAAe,IAAI;AAAA,IACpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA4CA,SAAS;AACL,YACI,KAAK,MACL,SAAS;AAAA,QACL,YAAyB,GAAG,WAAW,OAAO;AAAA,QAC9C,eAAyB,GAAG,cAAc,OAAO;AAAA,QACjD,kBAAyB,GAAG,gBAAgB,OAAO;AAAA,QACnD,gBAAyB,GAAG,eAAe,OAAO;AAAA,QAClD,wBAAyB,GAAG,uBAAuB,OAAO;AAAA,MAC9D;AACJ,UAAI,CAAC,GAAG,WAAW,sBAAsB;AACrC,eAAO,kBAAkB,GAAG,gBAAgB,OAAO;AAAA,MACvD;AACA,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA+BA,IAAI,OAAO;AACP,aAAO,MAAM;AAAA,IACjB;AAAA,IACA,WAAW,MAAM;AACb,UAAI,OAAO,SAAS,UAAU;AAC1B,eAAO,aAAa,cAAc,IAAI;AAAA,MAC1C;AACA,aAAO;AAAA,IACX;AAAA,IACA,WAAW,MAAM;AACb,cAAQ,KAAK,eAAe,IAAI;AAAA,IACpC;AAAA;AAAA,IAEA,YAAY,OAAO,QAAQ;AACvB,YAAM,YAAY,GAAG,SAAS;AAC9B,UAAI,OAAO,UAAU;AACjB,aAAK,QAAQ,gBAAgB;AAAA,MACjC;AAAA,IACJ;AAAA,IACA,YAAY;AACR,WAAK,eAAe,QAAQ;AAC5B,WAAK,uBAAuB,QAAQ;AACpC,YAAM,UAAU;AAAA,IACpB;AAAA,EACJ,GArYI,cA/DqB,IA+Dd,gBAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAalB,MAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAcP,gBAAiB;AAAA,MACb,OAAU,CAAC;AAAA,MACX,SAAU;AAAA,IACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAcA,wBAAyB;AAAA,MACrB,OAAU,CAAC;AAAA,MACX,SAAU;AAAA,IACd;AAAA;AAAA,IAEA,QAAqB;AAAA,IACrB,oBAAqB;AAAA,EACzB,IAlHqB;AAAA;;;ACVzB,IAAO,+BAAQ,YAAU,MAAM,6BAA6B,OAAO;AAAA;AAAA;AAAA,EAG/D,iBAAiB,SAAS;AACtB,UACI,KAAS,MACT,SAAS,MAAM,iBAAiB,OAAO;AAC3C,QAAI,QAAQ;AACR,iBAAW,aAAa,CAAC,cAAc,iBAAiB,mBAAmB,mBAAmB,kBAAkB,wBAAwB,GAAG;AACvI,cAAM,QAAQ,GAAG,SAAS;AAC1B,YAAI,OAAO;AACP,cAAI,MAAM,OAAO;AACb,mBAAO,MAAM,KAAK,MAAM,IAAI,MAAM,cAAc,OAAO;AAAA,UAC3D;AAEA,gBAAM,aAAa,MAAM,iBAAiB,OAAO;AACjD,cAAI,cAAc,OAAO,KAAK,UAAU,EAAE,SAAS,GAAG;AAClD,mBAAO,SAAS,IAAI,OAAO,OAAO,OAAO,SAAS,KAAK,CAAC,GAAG,UAAU;AAAA,UACzE,WAES,OAAO,SAAS,KAAK,OAAO,KAAK,OAAO,SAAS,CAAC,EAAE,WAAW,GAAG;AACvE,mBAAO,OAAO,SAAS;AAAA,UAC3B;AAAA,QACJ;AAAA,MACJ;AAEA,UAAI,GAAG,UAAU,aAAa;AAC1B,eAAO,OAAO;AACd,eAAO,OAAO;AACd,eAAO,OAAO;AAAA,MAClB;AACA,aAAO;AAAA,IACX;AAAA,EACJ;AACJ;;;ACjCA,IAAqB,0BAArB,cAAqD,KAAK;AAAA;AAAA,EAEtD,IAAI,WAAW,eAAe;AAC1B,UAAM,KAAK;AACX,OAAG,sBAAsB,GAAG,mBAAmB;AAC/C,OAAG,cAAc;AACjB,QAAI,iBAAiB,cAAc,YAAY;AAC3C,SAAG,qBAAqB,cAAc,IAAI;AAAA,QACtC,cAAe,GAAG;AAAA,QAClB,SAAe;AAAA,QACf,YAAe;AAAA;AAAA,QAEf,MAAe;AAAA,MACnB,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EACA,IAAI,aAAa;AACb,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,cAAc,kBAAkB;AAChC,UAAM,KAAK;AACX,OAAG,yBAAyB,GAAG,sBAAsB;AACrD,OAAG,iBAAiB;AACpB,QAAI,oBAAoB,iBAAiB,YAAY;AACjD,SAAG,wBAAwB,iBAAiB,IAAI;AAAA,QAC5C,cAAe,GAAG;AAAA,QAClB,SAAe;AAAA,QACf,YAAe;AAAA;AAAA,QAEf,MAAe;AAAA,MACnB,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EACA,IAAI,gBAAgB;AAChB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,gBAAgB,oBAAoB;AACpC,UAAM,KAAK;AACX,OAAG,2BAA2B,GAAG,wBAAwB;AACzD,OAAG,mBAAmB;AACtB,QAAI,sBAAsB,mBAAmB,UAAU;AACnD,SAAG,0BAA0B,mBAAmB,IAAI;AAAA,QAChD,cAAe,GAAG;AAAA,QAClB,SAAe;AAAA,QACf,YAAe;AAAA;AAAA,QAEf,MAAe;AAAA,MACnB,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EACA,IAAI,kBAAkB;AAClB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,gBAAgB,oBAAoB;AACpC,UAAM,KAAK;AACX,OAAG,2BAA2B,GAAG,wBAAwB;AACzD,OAAG,mBAAmB;AACtB,QAAI,sBAAsB,mBAAmB,UAAU;AACnD,SAAG,0BAA0B,mBAAmB,IAAI;AAAA,QAChD,cAAe,GAAG;AAAA,QAClB,SAAe;AAAA,QACf,YAAe;AAAA;AAAA,QAEf,MAAe;AAAA,MACnB,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EACA,IAAI,kBAAkB;AAClB,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA,EAGA,uBAAuB,EAAE,QAAQ,GAAG;AAChC,UAAM,KAAK;AACX,OAAG,oCAAoC,OAAO;AAC9C,WAAO,GAAG,kBAAkB,OAAO;AAAA,EACvC;AAAA,EACA,0BAA0B,EAAE,QAAQ,GAAG;AACnC,UAAM,KAAK;AACX,OAAG,oCAAoC,OAAO;AAC9C,WAAO,GAAG,kBAAkB,OAAO;AAAA,EACvC;AAAA,EACA,4BAA4B,EAAE,QAAQ,GAAG;AACrC,UAAM,KAAK;AACX,OAAG,oCAAoC,OAAO;AAC9C,WAAO,GAAG,kBAAkB,OAAO;AAAA,EACvC;AAAA,EACA,4BAA4B,EAAE,QAAQ,GAAG;AACrC,UAAM,KAAK;AACX,OAAG,oCAAoC,OAAO;AAC9C,WAAO,GAAG,kBAAkB,OAAO;AAAA,EACvC;AAAA;AAAA;AAAA,EAGA,oCAAoC,SAAS;AACzC,UAAM,kBAAkB,QAAQ,SAAS,CAAC;AAC1C,QAAI,GAAG;AAEP,SAAK,IAAI,gBAAgB,SAAS,GAAG,KAAK,GAAG,EAAE,GAAG;AAC9C,UAAI,gBAAgB,CAAC;AACrB,UAAI,CAAC,EAAE,eAAe;AAClB,wBAAgB,OAAO,gBAAgB,QAAQ,CAAC,GAAG,CAAC;AAAA,MACxD;AAAA,IACJ;AAEA,QAAI,gBAAgB,WAAW,GAAG;AAC9B,cAAQ,MAAM,SAAS;AAAA,IAC3B;AAAA,EACJ;AAAA,EACA,kBAAkB,SAAS;AACvB,WAAO,QAAS,QAAQ,SAAS,QAAQ,MAAM,SAAS,KACnD,QAAQ,YAAY,QAAQ,SAAS,SAAS,KAC9C,QAAQ,WAAW,QAAQ,QAAQ,SAAS,CAAE;AAAA,EACvD;AAAA;AAEJ;AACA,wBAAwB,SAAS;;;AC7HjC,IAAM,aAAa,CAAC,MAAM,SAAS;AAC/B,SAAO,IAAI;AAAA,IACP,KAAK,YAAY;AAAA,IACjB,KAAK,SAAS;AAAA,IACd,KAAK,QAAQ;AAAA,IACb,KAAK,SAAS;AAAA,IACd,KAAK,WAAW;AAAA,IAChB,KAAK,WAAW,IAAI;AAAA,IACpB,KAAK,gBAAgB;AAAA,EACzB;AACJ;AAMO,IAAM,QAAS,WAAY;AAC9B;AACA,MAAIC,SAAQ;AAAA,IACR,SAAS;AAAA,EACb;AACA,MAAI,CAAC,MAAM,UAAU,SAAS;AAC1B,UAAM,UAAU,UAAU,SAAU,eAAe;AAC/C;AACA,UAAI,QAAQ,MAAM;AACd,cAAM,IAAI,UAAU;AAAA,MACxB;AACA,UAAI,IAAI,OAAO,IAAI;AACnB,UAAI,MAAM,EAAE,WAAW;AACvB,UAAI,QAAQ,GAAG;AACX,eAAO;AAAA,MACX;AACA,UAAI,IAAI;AACR,UAAI,UAAU,SAAS,GAAG;AACtB,YAAI,OAAO,UAAU,CAAC,CAAC;AACvB,YAAI,KAAK,GAAG;AACR,cAAI;AAAA,QACR,WACS,KAAK,KAAK,KAAK,YAAY,KAAK,WAAW;AAChD,eAAK,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,IAAI,CAAC,CAAC;AAAA,QAC9C;AAAA,MACJ;AACA,UAAI,KAAK,KAAK;AACV,eAAO;AAAA,MACX;AACA,UAAI,IAAI,KAAK,IAAI,IAAI,KAAK,IAAI,MAAM,KAAK,IAAI,CAAC,GAAG,CAAC;AAClD,aAAO,IAAI,KAAK,KAAK;AACjB,YAAI,KAAK,KAAK,EAAE,CAAC,MAAM,eAAe;AAClC,iBAAO;AAAA,QACX;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,EACJ;AACA,MAAI,CAAC,OAAO,UAAU,MAAM;AACxB,WAAO,UAAU,OAAO,WAAY;AAChC,aAAO,KAAK,QAAQ,cAAc,EAAE;AAAA,IACxC;AAAA,EACJ;AACA,EAAAA,OAAM,QAAQ,CAAC;AACf,EAAAA,OAAM,MAAM,OAAO,SAAU,KAAK,YAAY;AAC1C,QAAI,KAAK,SAAU,GAAG,GAAG;AACrB,aAAO,CAAC,IAAI,CAAC;AAAA,IACjB,CAAC;AACD,QAAI,cAAc,IAAI,CAAC,MAAM,GAAG;AAC5B,UAAI,KAAK,IAAI,MAAM,CAAC;AAAA,IACxB;AAAA,EACJ;AACA,EAAAA,OAAM,MAAM,OAAO,SAAU,KAAK,QAAQ,QAAQ;AAC9C,QAAI,KAAK,gBAAgB,OAAO,CAAC,MAAM,GAAG,UAAU;AACpD,aAAS,IAAI,OAAO,SAAS,GAAG,IAAI,IAAI,EAAE,GAAG;AACzC,YAAM,OAAO,CAAC;AACd,UAAI,QAAQ,KAAK;AACb,eAAO;AAAA,MACX;AACA,UAAI,MAAM,OAAO,QAAQ,KAAK,iBAAiB,OAAO,CAAC,IAAI,KAAK;AAC5D,kBAAU;AACV;AAAA,MACJ;AACA;AAAA,IACJ;AACA,WAAO,OAAO,OAAO;AAAA,EACzB;AACA,EAAAA,OAAM,MAAM,cAAc,SAAU,KAAK,QAAQ,QAAQ;AACrD,QAAI,MAAM,OAAO,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,MAAM,OAAO,QAAQ,UAAU,OAAO,MAAM,CAAC,MAAM,KAAK,QAAQ,IAAI,MAAM,GAAG,OAAO,KAAK,IAAI,OAAO,QAAQ,GAAG,GAAG,QAAQ;AAChK,WAAO,UAAU,OAAO,CAAC,KAAK,UAAU;AACpC;AACA,UAAI,OAAO,KAAK;AACZ,eAAO;AAAA,MACX;AACA;AACA,UAAI,MAAM,KAAK;AACX,YAAI;AAAA,MACR;AACA,UAAI,SAAS,OAAO;AAChB,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AACA,EAAAA,OAAM,MAAM,OAAO,SAAU,KAAK,QAAQ,QAAQ;AAC9C,QAAI,KAAK,MAAM,OAAO,QAAQ,gBAAgB,OAAO,CAAC,MAAM,GAAG,UAAU,MAAM;AAC/E,aAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC1B,YAAM,OAAO,CAAC;AACd,UAAI,QAAQ,KAAK;AACb,eAAO;AAAA,MACX;AACA,UAAI,MAAM,OAAO,QAAQ,KAAK,iBAAiB,OAAO,CAAC,IAAI,KAAK;AAC5D,kBAAU;AACV;AAAA,MACJ;AACA;AAAA,IACJ;AACA,WAAO,OAAO,OAAO;AAAA,EACzB;AACA,EAAAA,OAAM,MAAM,cAAc,SAAU,KAAK,QAAQ,QAAQ;AACrD,QAAI,MAAM,OAAO,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,MAAM,OAAO,QAAQ,UAAU,OAAO,MAAM,CAAC,MAAM,KAAK,QAAQ,IAAI,MAAM,GAAG,OAAO,KAAK,IAAI,OAAO,QAAQ,GAAG,GAAG,QAAQ;AAChK,WAAO,UAAU,OAAO,CAAC,KAAK,UAAU;AACpC;AACA,UAAI,OAAO,KAAK;AACZ,eAAO;AAAA,MACX;AACA;AACA,UAAI,MAAM,IAAI;AACV,YAAI,MAAM;AAAA,MACd;AACA,UAAI,SAAS,OAAO;AAChB,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AACA,EAAAA,OAAM,MAAMA,OAAM,IAAI;AAAA,IAClB,MAAM;AAAA,IACN,OAAO;AAAA,IACP,KAAK,SAAU,GAAG;AACd,aAAO,EAAE,MAAM,EAAE,IAAIA,OAAM,KAAK,QAAQ,KAAK,CAAC;AAAA,IAClD;AAAA,IACA,SAAS,SAAU,GAAG,KAAK;AACvB,aAAOA,OAAM,EAAE,IAAI,CAAC,OAAO,OAAOA,OAAM,EAAE,OAAO,CAAC,EAAE,CAAC;AAAA,IACzD;AAAA,IACA,QAAQ,SAAU,GAAG;AACjB,UAAI,EAAE;AACF,eAAO,EAAE;AACb,UAAI,QAAQA,OAAM,EAAE,IAAI,CAAC,GAAG,MAAMA,OAAM,cAAc,QAAQ,CAAC;AAC/D,UAAI,UAAU,KAAKA,OAAM,GAAG,OAAO,CAAC,EAAE,CAAC,MAAM,KAAK;AAC9C,cAAM,MAAM;AAAA,MAChB;AACA,aAAO,EAAE,UAAU,CAAC,GAAG,GAAG;AAAA,IAC9B;AAAA,IACA,OAAO,SAAU,GAAG;AAChB,aAAO,EAAE,WAAW,EAAE,SAASA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,CAAC;AAAA,IACjG;AAAA,IACA,KAAK,SAAU,GAAG;AACd,aAAO,EAAE,SAAS,EAAE,OAAOA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,CAAC;AAAA,IAC7F;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,YAAM,MAAMA,OAAM,EAAE,OAAO,CAAC,EAAE,CAAC,IAAI,IAAI;AACvC,UAAI,QAAQA,OAAM,KAAK,aAAa,GAAG,KAAKA,OAAM,GAAGA,OAAM,CAAC,GAAG,OAAOA,OAAM,EAAE,OAAO,KAAK,EAAE,CAAC;AAC7F,YAAM,MAAM,OAAO,IAAI,OAAO;AAC9B,aAAOA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,KAAK,GAAGA,OAAM,EAAE,IAAI,KAAK,GAAG,GAAG;AAAA,IACtE;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,UAAI,QAAQA,OAAM,KAAK,aAAa,GAAG,KAAKA,OAAM,GAAGA,OAAM,CAAC,GAAG,OAAOA,OAAM,EAAE,OAAO,KAAK,EAAE,CAAC;AAC7F,aAAOA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,KAAK,GAAGA,OAAM,EAAE,IAAI,KAAK,GAAG,MAAM,OAAO,OAAO,OAAO,IAAI;AAAA,IAClG;AAAA,EACJ;AACA,EAAAA,OAAM,iBAAiBA,OAAM,KAAK;AAAA,IAC9B,MAAM;AAAA,IACN,OAAO;AAAA,IACP,KAAK,SAAU,GAAG;AACd,aAAO,EAAE,OAAO,EAAE,KAAK,KAAK,OAAOA,OAAM,EAAE,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI;AAAA,IAClE;AAAA,IACA,SAAS,SAAU,GAAG,KAAK;AACvB,aAAOA,OAAM,GAAG,IAAI,CAAC,MAAM,OAAO,QAAQ,KAAKA,OAAM,EAAE,IAAI,CAAC,IAAIA,OAAM,EAAE,OAAO,CAAC,EAAE,CAAC,IAAI;AAAA,IAC3F;AAAA,IACA,QAAQ,SAAU,GAAG;AACjB,aAAO,EAAE,aAAa,EAAE,WAAW,CAAC,GAAG,KAAK,KAAKA,OAAM,EAAE,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;AAAA,IAC9E;AAAA,IACA,OAAO,SAAU,GAAG;AAChB,aAAO,EAAE,YAAY,EAAE,UAAUA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAG,KAAK,IAAI,IAAIA,OAAM,GAAG,IAAI,CAAC,IAAI,KAAK,IAAI,KAAK,CAAC,CAAC;AAAA,IACpI;AAAA,IACA,KAAK,SAAU,GAAG;AACd,aAAO,EAAE,UAAU,EAAE,QAAQA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAG,KAAK,IAAIA,OAAM,GAAG,IAAI,CAAC,IAAI,GAAGA,OAAM,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;AAAA,IACpI;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,YAAM,MAAMA,OAAM,GAAG,OAAO,CAAC,EAAE,CAAC,IAAI,IAAI;AACxC,UAAI,QAAQA,OAAM,KAAK,aAAa,GAAG,KAAKA,OAAM,IAAIA,OAAM,CAAC,GAAG,QAAQA,OAAM,GAAG,OAAO,KAAK,EAAE,CAAC;AAChG,YAAM,MAAM,QAAQ,IAAI;AACxB,UAAI,OAAOA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,KAAK,GAAGA,OAAM,EAAE,IAAI,KAAK,GAAG,QAAQ,IAAIA,OAAM,EAAE,OAAO,KAAK,EAAE,CAAC,IAAI,IAAI,IAAI,KAAK,MAAM,EAAE;AAC/H,UAAI,KAAK,QAAQ,KAAK,EAAE,QAAQ,GAAG;AAC/B,gBAAQA,OAAM,EAAE,KAAK,GAAGA,OAAM,EAAE,IAAI,CAAC,IAAI,CAAC;AAC1C,eAAOA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,KAAK,GAAGA,OAAM,EAAE,IAAI,KAAK,GAAG,QAAQ,IAAIA,OAAM,EAAE,OAAO,KAAK,EAAE,CAAC,IAAI,IAAI,IAAI,KAAK,MAAM,EAAE;AAAA,MAC/H;AACA,aAAO;AAAA,IACX;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,UAAI,QAAQA,OAAM,KAAK,aAAa,GAAG,KAAKA,OAAM,IAAIA,OAAM,CAAC,GAAG,QAAQA,OAAM,GAAG,OAAO,KAAK,EAAE,CAAC;AAChG,YAAM,MAAM,QAAQ,QAAQ,OAAO;AACnC,aAAOA,OAAM,GAAG,IAAIA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,KAAK,GAAGA,OAAM,EAAE,IAAI,KAAK,GAAG,IAAI,KAAK,MAAM,EAAE,CAAC;AAAA,IAClG;AAAA,EACJ;AACA,EAAAA,OAAM,YAAYA,OAAM,KAAKA,OAAM,IAAI;AAAA,IACnC,MAAM;AAAA,IACN,OAAO;AAAA,IACP,KAAK,SAAU,GAAG;AACd,aAAO,EAAE,OAAO,EAAE,KAAKA,OAAM,KAAK,OAAO,KAAK,CAAC,IAAI;AAAA,IACvD;AAAA,IACA,SAAS,SAAU,GAAG,KAAK;AACvB,aAAOA,OAAM,GAAG,IAAI,CAAC,OAAO,OAAO;AAAA,IACvC;AAAA,IACA,QAAQ,WAAY;AAChB,aAAO,CAAC,GAAG,CAAC;AAAA,IAChB;AAAA,IACA,OAAO,SAAU,GAAG;AAChB,aAAOA,OAAM,EAAE,MAAM,CAAC;AAAA,IAC1B;AAAA,IACA,KAAK,SAAU,GAAG;AACd,aAAOA,OAAM,EAAE,IAAI,CAAC;AAAA,IACxB;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,YAAM,MAAM,IAAI,IAAI,OAAO;AAC3B,aAAOA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,KAAK,MAAMA,OAAM,GAAG,IAAI,CAAC,MAAM,OAAOA,OAAM,GAAG,IAAI,CAAC,IAAI,IAAI,EAAE;AAAA,IACtI;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,YAAM,MAAM,IAAI,IAAI,OAAO;AAC3B,aAAOA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,KAAK,MAAMA,OAAM,GAAG,IAAI,CAAC,MAAM,OAAOA,OAAM,GAAG,IAAI,CAAC,IAAI,KAAK,EAAE;AAAA,IACvI;AAAA,EACJ;AACA,EAAAA,OAAM,YAAYA,OAAM,KAAK;AAAA,IACzB,MAAM;AAAA,IACN,OAAO;AAAA,IACP,KAAK,SAAU,GAAG;AACd,aAAO,EAAE,OAAO,EAAE,KAAK,KAAK,KAAK,KAAKA,OAAM,EAAE,MAAM,CAAC,EAAE,QAAQ,IAAIA,OAAM,EAAE,MAAM,CAAC,EAAE,QAAQ,KAAKA,OAAM,GAAG;AAAA,IAC9G;AAAA,IACA,SAAS,SAAU,GAAG,KAAK;AACvB,aAAOA,OAAM,GAAG,IAAI,CAAC,OAAO,OAAOA,OAAM,GAAG,OAAO,CAAC,EAAE,CAAC;AAAA,IAC3D;AAAA,IACA,QAAQ,SAAU,GAAG;AACjB,UAAI,OAAOA,OAAM,EAAE,IAAI,CAAC;AACxB,aAAO,EAAE,aAAa,EAAE,WAAW,CAAC,GAAG,OAAO,IAAI,MAAM,GAAG;AAAA,IAC/D;AAAA,IACA,OAAO,SAAU,GAAG;AAChB,aAAOA,OAAM,EAAE,MAAM,CAAC;AAAA,IAC1B;AAAA,IACA,KAAK,SAAU,GAAG;AACd,aAAOA,OAAM,EAAE,IAAI,CAAC;AAAA,IACxB;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,YAAM,MAAMA,OAAM,GAAG,OAAO,CAAC,EAAE,CAAC,IAAI,IAAI;AACxC,UAAI,OAAOA,OAAM,KAAK,aAAa,GAAG,KAAKA,OAAM,IAAIA,OAAM,CAAC,GAAG,QAAQA,OAAM,GAAG,OAAO,IAAI,EAAE,CAAC;AAC9F,YAAM,MAAM,QAAQ,IAAI,OAAO;AAC/B,aAAOA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,IAAI,GAAGA,OAAM,EAAE,IAAI,IAAI,GAAG,GAAG;AAAA,IACpE;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,UAAI,OAAOA,OAAM,KAAK,aAAa,GAAG,KAAKA,OAAM,IAAIA,OAAM,CAAC,GAAG,QAAQA,OAAM,GAAG,OAAO,IAAI,EAAE,CAAC;AAC9F,YAAM,MAAM,QAAQ,QAAQ,OAAO;AACnC,aAAOA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,IAAI,GAAGA,OAAM,EAAE,IAAI,IAAI,GAAG,GAAG;AAAA,IACpE;AAAA,EACJ;AACA,EAAAA,OAAM,OAAOA,OAAM,IAAI;AAAA,IACnB,MAAM;AAAA,IACN,OAAO;AAAA,IACP,KAAK,SAAU,GAAG;AACd,aAAO,EAAE,MAAM,EAAE,IAAIA,OAAM,KAAK,QAAQ,KAAK,CAAC;AAAA,IAClD;AAAA,IACA,SAAS,SAAU,GAAG,KAAK;AACvB,aAAOA,OAAM,EAAE,IAAI,CAAC,MAAM;AAAA,IAC9B;AAAA,IACA,QAAQ,WAAY;AAChB,aAAO,CAAC,GAAG,EAAE;AAAA,IACjB;AAAA,IACA,OAAO,SAAU,GAAG;AAChB,aAAO,EAAE,WAAW,EAAE,SAASA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,CAAC;AAAA,IACjH;AAAA,IACA,KAAK,SAAU,GAAG;AACd,aAAO,EAAE,SAAS,EAAE,OAAOA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,CAAC;AAAA,IAC7G;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,YAAM,MAAM,KAAK,IAAI;AACrB,UAAI,OAAOA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,KAAK,OAAOA,OAAM,EAAE,IAAI,CAAC,IAAI,IAAI,IAAI,GAAG;AAChH,UAAI,CAACA,OAAM,KAAK,SAAS,KAAK,QAAQ,KAAK,EAAE,QAAQ,GAAG;AACpD,eAAOA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,IAAI,GAAGA,OAAM,EAAE,IAAI,IAAI,GAAGA,OAAM,EAAE,IAAI,IAAI,GAAG,MAAM,CAAC;AAAA,MAC3F;AACA,aAAO;AAAA,IACX;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,YAAM,MAAM,KAAK,KAAK;AACtB,aAAOA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,KAAK,OAAOA,OAAM,EAAE,IAAI,CAAC,IAAI,KAAK,IAAI,GAAG;AAAA,IACjH;AAAA,EACJ;AACA,EAAAA,OAAM,SAASA,OAAM,IAAI;AAAA,IACrB,MAAM;AAAA,IACN,OAAO;AAAA,IACP,KAAK,SAAU,GAAG;AACd,aAAO,EAAE,MAAM,EAAE,IAAIA,OAAM,KAAK,OAAO,KAAK,CAAC;AAAA,IACjD;AAAA,IACA,SAAS,SAAU,GAAG,KAAK;AACvB,aAAOA,OAAM,EAAE,IAAI,CAAC,MAAM;AAAA,IAC9B;AAAA,IACA,QAAQ,SAAU,GAAG;AACjB,aAAO,CAAC,GAAG,EAAE;AAAA,IACjB;AAAA,IACA,OAAO,SAAU,GAAG;AAChB,aAAO,EAAE,WAAW,EAAE,SAASA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,CAAC;AAAA,IACjI;AAAA,IACA,KAAK,SAAU,GAAG;AACd,aAAO,EAAE,SAAS,EAAE,OAAOA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,CAAC;AAAA,IAC7H;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,UAAI,IAAIA,OAAM,EAAE,IAAI,CAAC,GAAG,IAAIA,OAAM,EAAE,IAAI,CAAC,GAAG,MAAM,MAAM,KAAK,KAAK,IAAI,OAAO,IAAI,KAAK,IAAI,MAAM,MAAM,GAAG,OAAO,IAAI,KAAK,EAAE,QAAQ,IAAI,MAAMA,OAAM,MAAM,IAAIA,OAAM,GAAG;AACtK,UAAI,CAACA,OAAM,KAAK,SAAS,KAAK,QAAQ,KAAK,EAAE,QAAQ,GAAG;AACpD,eAAO,IAAI,KAAK,EAAE,QAAQ,KAAK,MAAM,OAAOA,OAAM,MAAM,IAAIA,OAAM,GAAG;AAAA,MACzE;AACA,aAAO;AAAA,IACX;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,YAAM,MAAM,KAAK,KAAK;AACtB,aAAOA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,KAAK,OAAOA,OAAM,EAAE,IAAI,CAAC,IAAI,KAAK,IAAI,GAAG;AAAA,IACjI;AAAA,EACJ;AACA,EAAAA,OAAM,QAAQA,OAAM,IAAI;AAAA,IACpB,MAAM;AAAA,IACN,OAAO;AAAA,IACP,KAAK,SAAU,GAAG;AACd,aAAO,EAAE,MAAM,EAAE,IAAIA,OAAM,KAAK,SAAS,KAAK,CAAC,IAAI;AAAA,IACvD;AAAA,IACA,SAAS,SAAU,GAAG,KAAK;AACvB,aAAOA,OAAM,EAAE,IAAI,CAAC,OAAO,OAAO;AAAA,IACtC;AAAA,IACA,QAAQ,WAAY;AAChB,aAAO,CAAC,GAAG,EAAE;AAAA,IACjB;AAAA,IACA,OAAO,SAAU,GAAG;AAChB,aAAO,EAAE,WAAW,EAAE,SAASA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,CAAC;AAAA,IACjF;AAAA,IACA,KAAK,SAAU,GAAG;AACd,aAAO,EAAE,SAAS,EAAE,OAAOA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,CAAC;AAAA,IAC7E;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,YAAM,MAAM,KAAK,IAAI,OAAO;AAC5B,aAAOA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,KAAK,MAAMA,OAAM,EAAE,IAAI,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,IAC/E;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,YAAM,MAAM,KAAK,KAAK,OAAO;AAC7B,aAAOA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,KAAK,OAAOA,OAAM,EAAE,IAAI,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,IAChF;AAAA,EACJ;AACA,EAAAA,OAAM,SAASA,OAAM,IAAI;AAAA,IACrB,MAAM;AAAA,IACN,OAAO;AAAA,IACP,KAAK,SAAU,GAAG;AACd,aAAO,EAAE,MAAM,EAAE,IAAIA,OAAM,KAAK,OAAO,KAAK,CAAC;AAAA,IACjD;AAAA,IACA,SAAS,SAAU,GAAG,KAAK;AACvB,aAAOA,OAAM,EAAE,IAAI,CAAC,MAAM;AAAA,IAC9B;AAAA,IACA,QAAQ,WAAY;AAChB,aAAO,CAAC,GAAG,EAAE;AAAA,IACjB;AAAA,IACA,OAAO,SAAU,GAAG;AAChB,aAAO;AAAA,IACX;AAAA,IACA,KAAK,SAAU,GAAG;AACd,aAAO;AAAA,IACX;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,UAAI,IAAIA,OAAM,EAAE,IAAI,CAAC,GAAG,MAAM,MAAM,KAAK,KAAK,IAAI,OAAO,IAAI,KAAK,IAAI,MAAM,MAAM,GAAG,OAAO,IAAI,KAAK,EAAE,QAAQ,IAAI,MAAMA,OAAM,GAAG;AAClI,UAAI,CAACA,OAAM,KAAK,SAAS,KAAK,QAAQ,KAAK,EAAE,QAAQ,GAAG;AACpD,eAAO,IAAI,KAAK,EAAE,QAAQ,KAAK,MAAM,QAAQA,OAAM,GAAG;AAAA,MAC1D;AACA,aAAO;AAAA,IACX;AAAA,IACA,MAAM,SAAU,GAAG,KAAK,OAAO;AAC3B,YAAM,MAAM,KAAK,KAAK;AACtB,aAAOA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,KAAK,OAAOA,OAAM,EAAE,IAAI,CAAC,IAAI,KAAK,IAAI,GAAG;AAAA,IACjJ;AAAA,EACJ;AACA,EAAAA,OAAM,OAAOA,OAAM,IAAI;AAAA,IACnB,MAAM;AAAA,IACN,OAAO;AAAA,IACP,KAAK,SAAU,GAAG;AACd,aAAO,EAAE,MAAM,EAAE,IAAIA,OAAM,EAAE,IAAI,CAAC,IAAI,OAAOA,OAAM,EAAE,IAAI,CAAC,IAAI,KAAKA,OAAM,EAAE,IAAI,CAAC;AAAA,IACpF;AAAA,IACA,SAAS,SAAU,GAAG,KAAK;AACvB,aAAOA,OAAM,EAAE,IAAI,CAAC,MAAM;AAAA,IAC9B;AAAA,IACA,QAAQ,WAAY;AAChB,aAAO,CAAC,GAAG,KAAK;AAAA,IACpB;AAAA,IACA,OAAO,SAAU,GAAG;AAChB,aAAO;AAAA,IACX;AAAA,IACA,KAAK,SAAU,GAAG;AACd,aAAO;AAAA,IACX;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,YAAM,MAAM,QAAQ,IAAI;AACxB,UAAI,OAAOA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,KAAK,OAAOA,OAAM,EAAE,IAAI,CAAC,IAAI,IAAI,IAAI,GAAG,GAAG,GAAG;AACtH,UAAI,CAACA,OAAM,KAAK,SAAS,KAAK,QAAQ,IAAI,EAAE,QAAQ,GAAG;AACnD,eAAOA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,IAAI,GAAGA,OAAM,EAAE,IAAI,IAAI,GAAGA,OAAM,EAAE,IAAI,IAAI,GAAGA,OAAM,EAAE,IAAI,IAAI,GAAGA,OAAM,EAAE,IAAI,IAAI,GAAG,MAAM,IAAI;AAAA,MACpI;AACA,aAAO;AAAA,IACX;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,YAAM,MAAM,QAAQ,QAAQ;AAC5B,aAAOA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,KAAK,OAAOA,OAAM,EAAE,IAAI,CAAC,IAAI,KAAK,IAAI,GAAG,GAAG,GAAG;AAAA,IACvH;AAAA,EACJ;AACA,EAAAA,OAAM,cAAcA,OAAM,KAAK;AAAA,IAC3B,MAAM;AAAA,IACN,OAAO;AAAA,IACP,KAAK,SAAU,GAAG;AACd,aAAO,EAAE,OAAO,EAAE,MAAMA,OAAM,EAAE,IAAI,CAAC,KAAKA,OAAM,GAAG,IAAIA,OAAM,EAAE,MAAM,CAAC,CAAC,IAAI,MAAM,IAAIA,OAAM,GAAG,IAAI,CAAC,MAAM;AAAA,IAC7G;AAAA,IACA,SAAS,SAAU,GAAG,KAAK;AACvB,aAAOA,OAAM,GAAG,IAAI,CAAC,OAAO,OAAOA,OAAM,GAAG,OAAO,CAAC,EAAE,CAAC;AAAA,IAC3D;AAAA,IACA,QAAQ,SAAU,GAAG;AACjB,aAAO,EAAE,aAAa,EAAE,WAAW,CAAC,IAAIA,OAAM,EAAE,OAAO,CAAC,EAAE,CAAC,KAAKA,OAAM,GAAG,IAAIA,OAAM,EAAE,MAAM,CAAC,CAAC,IAAI,MAAM,IAAIA,OAAM,GAAG,IAAIA,OAAM,EAAE,IAAI,CAAC,CAAC,MAAM,CAAC;AAAA,IACjJ;AAAA,IACA,OAAO,SAAU,GAAG;AAChB,aAAO,EAAE,YAAY,EAAE,UAAUA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAG,KAAK,IAAIA,OAAM,EAAE,IAAI,CAAC,IAAIA,OAAM,GAAG,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;AAAA,IACtI;AAAA,IACA,KAAK,SAAU,GAAG;AACd,aAAO,EAAE,UAAU,EAAE,QAAQA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAG,KAAK,IAAIA,OAAM,EAAE,IAAI,CAAC,KAAK,IAAIA,OAAM,GAAG,IAAI,CAAC,IAAIA,OAAM,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;AAAA,IACvJ;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,YAAM,MAAMA,OAAM,GAAG,OAAO,CAAC,EAAE,CAAC,IAAI,IAAI;AACxC,UAAI,QAAQA,OAAM,KAAK,aAAa,GAAG,KAAKA,OAAM,IAAIA,OAAM,CAAC,GAAG,QAAQA,OAAM,GAAG,OAAO,KAAK,EAAE,CAAC;AAChG,YAAM,MAAM,QAAQ,IAAI,OAAO;AAC/B,aAAOA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,KAAK,GAAGA,OAAM,EAAE,IAAI,KAAK,GAAG,KAAK,IAAI,IAAI,MAAM,KAAK,KAAKA,OAAM,GAAG,IAAI,KAAK,IAAI,EAAE,CAAC;AAAA,IACzH;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,UAAI,QAAQA,OAAM,KAAK,aAAa,GAAG,KAAKA,OAAM,IAAIA,OAAM,CAAC,GAAG,QAAQA,OAAM,GAAG,OAAO,KAAK,EAAE,CAAC;AAChG,YAAM,MAAM,QAAQ,QAAQ,OAAO;AACnC,aAAOA,OAAM,GAAG,IAAIA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,KAAK,GAAGA,OAAM,EAAE,IAAI,KAAK,GAAG,KAAK,IAAI,IAAI,MAAM,KAAK,KAAKA,OAAM,GAAG,IAAI,KAAK,IAAI,EAAE,CAAC,CAAC;AAAA,IACvI;AAAA,EACJ;AACA,EAAAA,OAAM,aAAaA,OAAM,KAAK;AAAA,IAC1B,MAAM;AAAA,IACN,OAAO;AAAA,IACP,KAAK,SAAU,GAAG;AACd,UAAI,EAAE;AACF,eAAO,EAAE;AACb,UAAI,QAAQA,OAAM,GAAG,KAAKA,OAAM,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,QAAQA,OAAM,GAAG,KAAKA,OAAM,EAAE,KAAK,OAAOA,OAAM,EAAE,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC;AACrH,aAAO,EAAE,KAAK,IAAI,KAAK,MAAM,MAAM,QAAQ,IAAI,MAAM,QAAQ,KAAKA,OAAM,IAAI;AAAA,IAChF;AAAA,IACA,SAAS,SAAU,GAAG,KAAK;AACvB,aAAOA,OAAM,GAAG,IAAI,CAAC,OAAO,OAAOA,OAAM,GAAG,OAAO,CAAC,EAAE,CAAC;AAAA,IAC3D;AAAA,IACA,QAAQ,SAAU,GAAG;AACjB,UAAI,EAAE;AACF,eAAO,EAAE;AACb,UAAI,OAAOA,OAAM,GAAG,KAAKA,OAAM,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,UAAUA,OAAM,GAAG,IAAIA,OAAM,EAAE,MAAM,IAAI,CAAC,GAAG,SAASA,OAAM,GAAG,IAAIA,OAAM,EAAE,IAAI,IAAI,CAAC;AACpI,aAAO,EAAE,WAAW,CAAC,GAAG,YAAY,KAAK,WAAW,IAAI,KAAK,EAAE;AAAA,IACnE;AAAA,IACA,OAAO,SAAU,GAAG;AAChB,aAAO,EAAE,YAAY,EAAE,UAAUA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,KAAKA,OAAM,GAAG,IAAI,CAAC,IAAI,IAAIA,OAAM,GAAG,IAAI,CAAC,IAAI,IAAI,EAAE;AAAA,IACrJ;AAAA,IACA,KAAK,SAAU,GAAG;AACd,aAAO,EAAE,UAAU,EAAE,QAAQA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,KAAKA,OAAM,GAAG,IAAI,CAAC,IAAI,IAAI,IAAIA,OAAM,GAAG,IAAI,CAAC,IAAI,EAAE;AAAA,IACjJ;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,YAAM,MAAMA,OAAM,GAAG,OAAO,CAAC,EAAE,CAAC,IAAI,IAAI;AACxC,UAAI,SAASA,OAAM,GAAG,KAAKA,OAAM,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,OAAOA,OAAM,KAAK,aAAa,QAAQ,KAAKA,OAAM,IAAIA,OAAM,CAAC;AAC/G,UAAIA,OAAM,GAAG,IAAI,IAAI,MAAM,GAAG;AAC1B,eAAOA,OAAM,GAAG,KAAK,MAAM,CAAC;AAAA,MAChC;AACA,UAAI,QAAQA,OAAM,GAAG,OAAO,IAAI,EAAE,CAAC,GAAG,UAAUA,OAAM,GAAG,MAAM,IAAI;AACnE,YAAM,MAAM,QAAQ,IAAI,OAAO;AAC/B,aAAOA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,OAAO,GAAGA,OAAM,EAAE,IAAI,OAAO,GAAGA,OAAM,EAAE,IAAI,OAAO,IAAI,KAAK,MAAM,EAAE;AAAA,IAC3G;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,UAAI,SAASA,OAAM,GAAG,KAAKA,OAAM,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,OAAOA,OAAM,KAAK,aAAa,QAAQ,KAAKA,OAAM,IAAIA,OAAM,CAAC;AAC/G,UAAIA,OAAM,GAAG,IAAI,IAAI,MAAM,GAAG;AAC1B,eAAOA,OAAM,GAAG,KAAK,MAAM,CAAC;AAAA,MAChC;AACA,UAAI,QAAQA,OAAM,GAAG,OAAO,IAAI,EAAE,CAAC,GAAG,QAAQA,OAAM,GAAG,IAAI,IAAI;AAC/D,YAAM,MAAM,QAAQ,QAAQ,OAAO;AACnC,aAAOA,OAAM,GAAG,IAAIA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,KAAK,GAAGA,OAAM,EAAE,IAAI,KAAK,GAAGA,OAAM,EAAE,IAAI,KAAK,IAAI,KAAK,MAAM,EAAE,CAAC;AAAA,IACnH;AAAA,EACJ;AACA,EAAAA,OAAM,OAAOA,OAAM,IAAI;AAAA,IACnB,MAAM;AAAA,IACN,OAAO;AAAA,IACP,KAAK,SAAU,GAAG;AACd,aAAO,EAAE,MAAM,EAAE,IAAIA,OAAM,KAAK,QAAQ,KAAK,CAAC;AAAA,IAClD;AAAA,IACA,SAAS,SAAU,GAAG,KAAK;AACvB,aAAOA,OAAM,EAAE,IAAI,CAAC,MAAM;AAAA,IAC9B;AAAA,IACA,QAAQ,WAAY;AAChB,aAAO,CAAC,MAAM,IAAI;AAAA,IACtB;AAAA,IACA,OAAO,SAAU,GAAG;AAChB,aAAO,EAAE,WAAW,EAAE,SAASA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,CAAC;AAAA,IACjE;AAAA,IACA,KAAK,SAAU,GAAG;AACd,aAAO,EAAE,SAAS,EAAE,OAAOA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,CAAC;AAAA,IAC7D;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,aAAO,MAAMA,OAAM,EAAE,IAAI,CAAC,KAAK,OAAOA,OAAM,EAAE,OAAO,EAAE,CAAC,IAAIA,OAAM,KAAK,KAAK,GAAG,IAAIA,OAAM;AAAA,IAC7F;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,aAAO,MAAMA,OAAM,EAAE,IAAI,CAAC,KAAK,OAAOA,OAAM,EAAE,OAAO,EAAE,CAAC,IAAIA,OAAM,KAAK,KAAK,GAAG,IAAIA,OAAM;AAAA,IAC7F;AAAA,EACJ;AACA,EAAAA,OAAM,WAAWA,OAAM,KAAK;AAAA,IACxB,MAAM;AAAA,IACN,OAAO;AAAA,IACP,KAAK,SAAU,GAAG;AACd,aAAO,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ;AAAA,IACrC;AAAA,IACA,SAAS,SAAU,GAAG,KAAK;AACvB,aAAOA,OAAM,GAAG,IAAI,CAAC,MAAM;AAAA,IAC/B;AAAA,IACA,QAAQ,WAAY;AAChB,aAAO,CAAC,GAAG,SAAS;AAAA,IACxB;AAAA,IACA,OAAO,SAAU,GAAG;AAChB,aAAO;AAAA,IACX;AAAA,IACA,KAAK,SAAU,GAAG;AACd,aAAO;AAAA,IACX;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,aAAOA,OAAM,GAAG,IAAI,CAAC,IAAI,MAAM,IAAI,KAAK,GAAG,IAAIA,OAAM;AAAA,IACzD;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,aAAOA,OAAM,GAAG,IAAI,CAAC,IAAI,MAAM,IAAI,KAAK,GAAG,IAAIA,OAAM;AAAA,IACzD;AAAA,EACJ;AACA,EAAAA,OAAM,WAAW,CAAC;AAClB,EAAAA,OAAM,SAAS,QAAQA,OAAM,SAAS,IAAI,SAAU,YAAY,QAAQ;AACpE,QAAI,QAAQ,OAAO,CAAC;AACpB,WAAO;AAAA,MACH,MAAM,WAAW,WAAW;AAAA,MAC5B,QAAQ,WAAW,OAAO,oBAAI,KAAK,CAAC,EAAE,CAAC,IAAI,SAAS,WAAW;AAAA,MAC/D,KAAK,WAAW;AAAA,MAChB,SAAS,SAAU,GAAG,KAAK;AACvB,eAAO,KAAK,IAAI,CAAC,KAAK;AAAA,MAC1B;AAAA,MACA,QAAQ,WAAW;AAAA,MACnB,OAAO,WAAW;AAAA,MAClB,KAAK,WAAW;AAAA,MAChB,MAAM,SAAU,WAAW,KAAK;AAC5B,YAAI,OAAO;AACP,gBAAM,WAAW,OAAO,SAAS,EAAE,CAAC;AACxC,eAAO,WAAW,KAAK,WAAW,GAAG;AAAA,MACzC;AAAA,MACA,MAAM,SAAU,WAAW,KAAK;AAC5B,cAAM,QAAQ,QAAQ,WAAW,OAAO,SAAS,EAAE,CAAC,IAAI,QAAQ;AAChE,eAAO,WAAW,KAAK,WAAW,GAAG;AAAA,MACzC;AAAA,IACJ;AAAA,EACJ;AACA,EAAAA,OAAM,SAAS,SAASA,OAAM,SAAS,IAAI,SAAU,YAAY,QAAQ;AACrE,QAAI,QAAQ,OAAO,OAAO,SAAS,CAAC;AACpC,WAAO;AAAA,MACH,MAAM,YAAY,WAAW;AAAA,MAC7B,OAAO,WAAW,SAAS,QAAQ;AAAA,MACnC,KAAK,WAAW;AAAA,MAChB,SAAS,SAAU,GAAG,KAAK;AACvB,eAAO,KAAK,IAAI,CAAC,IAAI;AAAA,MACzB;AAAA,MACA,QAAQ,WAAW;AAAA,MACnB,OAAO,WAAW;AAAA,MAClB,KAAK,WAAW;AAAA,MAChB,MAAM,SAAU,WAAW,KAAK;AAC5B,cAAM,QAAQ,QAAQ,WAAW,OAAO,SAAS,EAAE,CAAC,IAAI;AACxD,eAAO,WAAW,KAAK,WAAW,GAAG;AAAA,MACzC;AAAA,MACA,MAAM,SAAU,WAAW,KAAK;AAC5B,cAAM,QAAQ,QAAQ,QAAQ,IAAI,WAAW,OAAO,SAAS,EAAE,CAAC;AAChE,eAAO,WAAW,KAAK,WAAW,GAAG;AAAA,MACzC;AAAA,IACJ;AAAA,EACJ;AACA,EAAAA,OAAM,UAAU,SAAU,UAAU;AAChC,QAAI,cAAc,CAAC,GAAG,iBAAiB,GAAG;AAC1C,aAAS,OAAO,UAAU;AACtB,UAAI,YAAY,IAAI,MAAM,GAAG,GAAG,OAAO,UAAU,CAAC,GAAG,MAAM,UAAU,CAAC,GAAG,OAAO,SAAS,GAAG,GAAG,aAAa,MAAMA,OAAM,SAAS,GAAG,EAAEA,OAAM,IAAI,GAAG,IAAI,IAAIA,OAAM,IAAI;AACrK,kBAAY,KAAK;AAAA,QACb;AAAA,QACA;AAAA,MACJ,CAAC;AACD;AAAA,IACJ;AACA,gBAAY,KAAK,SAAU,GAAG,GAAG;AAC7B,UAAI,KAAK,EAAE,WAAW,OAAO,KAAK,EAAE,WAAW;AAC/C,aAAO,KAAK,KAAK,KAAK,KAAK,KAAK,IAAI;AAAA,IACxC,CAAC;AACD,qBAAiB,YAAY,iBAAiB,CAAC,EAAE;AACjD,aAAS,UAAU,KAAK;AACpB,aAAO,QAAQ,SAAS,SAAU,GAAG,GAAG;AACpC,eAAO,EAAE,QAAQ,IAAI,EAAE,QAAQ;AAAA,MACnC,IAAI,SAAU,GAAG,GAAG;AAChB,eAAO,EAAE,QAAQ,IAAI,EAAE,QAAQ;AAAA,MACnC;AAAA,IACJ;AACA,WAAO;AAAA,MACH,OAAO,SAAU,KAAK,WAAW;AAC7B,YAAI,OAAO,WAAW,UAAUA,OAAM,MAAM,GAAG,GAAG,cAAc,KAAK;AACrE,eAAO,iBAAiB,CAAC,QAAQ,MAAM;AACnC,iBAAO;AACP,mBAAS,IAAI,GAAG,IAAI,gBAAgB,KAAK;AACrC,gBAAIC,cAAa,YAAY,CAAC,EAAE,YAAY,SAASA,YAAW,IAAI,IAAI,GAAG,SAASA,YAAW,OAAO,IAAI,GAAG,SAAS,QAAQ,QAAQ,YAAY,CAAC,EAAE,MAAM,MAAM;AACjK,gBAAI,CAACA,YAAW,QAAQ,MAAM,MAAM,GAAG;AACnC,qBAAOA,YAAW,GAAG,EAAE,MAAM,MAAM;AACnC,qBAAO;AACP;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AACA,YAAI,SAASD,OAAM,OAAO;AACtB,iBAAO,QAAQ,SAAS,eAAe,MAAM,IAAI,IAAI,eAAe,IAAI,IAAI;AAAA,QAChF;AACA,eAAO;AAAA,MACX;AAAA,MACA,KAAK,SAAU,KAAK,WAAW;AAC3B,YAAI,QAAQ,UAAUA,OAAM,MAAM,MAAM,SAAS,GAAG,UAAU,UAAU,GAAG;AAC3E,iBAAS,IAAI,iBAAiB,GAAG,KAAK,GAAG,KAAK;AAC1C,cAAIC,cAAa,YAAY,CAAC,EAAE,YAAY,SAASA,YAAW,IAAI,SAAS,GAAG,SAASA,YAAW,OAAO,SAAS,GAAG,SAAS,QAAQ,QAAQ,YAAY,CAAC,EAAE,MAAM,MAAM,GAAG;AAC9K,cAAI,WAAW,QAAW;AACtB,mBAAOA,YAAW,GAAG,EAAE,WAAW,MAAM;AACxC,gBAAI,SAAS,CAAC,UAAU,QAAQ,QAAQ,IAAI,IAAI;AAC5C,uBAAS;AAAA,YACb;AAAA,UACJ;AAAA,QACJ;AACA,eAAO;AAAA,MACX;AAAA,MACA,MAAM,SAAU,KAAK,MAAM;AACvB,eAAO,IAAI,KAAK,QAAQ,SAAS,eAAe,IAAI,IAAI,EAAE,QAAQ,IAAID,OAAM,MAAM,eAAe,MAAM,IAAI,EAAE,QAAQ,IAAIA,OAAM,GAAG;AAAA,MACtI;AAAA;AAAA,MAEA,UAAU,SAAU,KAAK,MAAM;AAC3B,eAAO,QAAQ,SACT,WAAW,eAAe,IAAI,IAAI,GAAG,CAAC,IACtC,WAAW,eAAe,MAAM,IAAI,GAAG,EAAE;AAAA,MAEnD;AAAA;AAAA,MAEA,WAAW,SAAU,MAAM;AACvB,eAAO,eAAe,MAAM,IAAI;AAAA,MACpC;AAAA,IACJ;AAAA,EACJ;AACA,EAAAA,OAAM,WAAW,SAAU,OAAO;AAC9B,QAAI,CAAC;AACD,YAAM,IAAI,MAAM,8BAA8B;AAClD,QAAI,CAAC,MAAM;AACP,YAAM,IAAI,MAAM,gDAAgD;AACpE,QAAI,YAAY,CAAC,GAAG,eAAe,MAAM,UAAU,QAAQ,aAAa,CAAC,GAAG,gBAAgB,MAAM,aAAa,MAAM,WAAW,SAAS;AACzI,aAAS,IAAI,GAAG,IAAI,cAAc,KAAK;AACnC,gBAAU,KAAKA,OAAM,QAAQ,MAAM,UAAU,CAAC,CAAC,CAAC;AAAA,IACpD;AACA,aAAS,IAAI,GAAG,IAAI,eAAe,KAAK;AACpC,iBAAW,KAAKA,OAAM,QAAQ,MAAM,WAAW,CAAC,CAAC,CAAC;AAAA,IACtD;AACA,aAAS,aAAa,KAAK,OAAO,WAAW,SAAS,SAAS;AAC3D,UAAI,UAAU,UAAU,GAAG,GAAG,YAAY,OAAO,cAAc,KAAK,cAAc,CAAC,GAAG,eAAe,CAAC,GAAG,MAAM,KAAK,UAAU,CAAC,GAAG,YAAY,QAAQ,QAAQ,YAAY,SAAS,YAAY,IAAI,GAAG,OAAO,YAAY,IAAI;AAC7N,kBAAY,YAAY,IAAI,KAAK,SAAS,IAAI,oBAAI,KAAK;AACvD,UAAI,CAAC,aAAa,CAAC,UAAU,QAAQ;AACjC,cAAM,IAAI,MAAM,qBAAqB;AACzC,oBAAc,KAAK,WAAW,aAAa,SAAS;AACpD,qBAAe,KAAK,YAAY,cAAc,SAAS;AACvD,aAAO,iBAAiB,cAAc,OAAO,SAAS,aAAa,OAAO,IAAI;AAC1E,YAAI,WAAW,QAAQ,MAAM,OAAO,GAAG;AACnC;AAAA,QACJ;AACA,YAAI,eAAe;AACf,4BAAkB,KAAK,YAAY,cAAc,IAAI;AACrD,cAAI,MAAM,iBAAiB,KAAK,cAAc,IAAI,GAAG;AACjD,6BAAiB,KAAK,WAAW,aAAa,GAAG;AACjD;AAAA,UACJ;AAAA,QACJ;AACA,YAAI,SAAS;AACT,cAAI,aAAa,eAAe,cAAc,OAAO;AACrD,gBAAM,QAAQ,KAAK,WAAW,aAAa,MAAM,UAAU;AAC3D,cAAI,IAAI,YAAY,CAAC,IAAI,KAAK,KAAK,IAAI,WAAW,IAAI,CAAC,GAAG,MAAM,IAAI,KAAK,UAAU,KAAK,IAAI,KAAK,OAAO,IAAI,GAAG,IAAI,MAAS,IAAI,CAAC,MAAM,IAAI,KAAK,UAAU,KAAK,IAAI,SAAS,IAAI,QAAQ,IAAIA,OAAM,GAAG,IAAI,IAAI,QAAQ,IAAIA,OAAM,GAAG,IAAI,QAAW,IAAI,KAAK,KAAK,IAAI,WAAW,KAAK,QAAQ,IAAIA,OAAM,GAAG,CAAC,CAAC;AAC1S,cAAI,cAAc,EAAE,MAAM,EAAE,QAAQ,MAAM,WAAW,IAAI,EAAE,QAAQ,GAAG;AAClE,uBAAW,IAAI,IAAI,EAAE,IAAI;AACzB;AAAA,UACJ,OACK;AACD,yBAAa;AACb,oBAAQ,KAAK,UAAU;AAAA,UAC3B;AACA,cAAI,CAAC;AACD;AACJ,2BAAiB,KAAK,WAAW,aAAa,GAAG;AAAA,QACrD,OACK;AACD,kBAAQ,KAAK,YAAY,IAAI,KAAK,KAAK,IAAI,WAAW,IAAI,CAAC,IAAI,SAAS,WAAW,aAAa,MAAM,OAAO,CAAC;AAC9G,qBAAW,KAAK,WAAW,aAAa,IAAI;AAAA,QAChD;AACA;AAAA,MACJ;AACA,eAASE,KAAI,GAAG,MAAM,QAAQ,QAAQA,KAAI,KAAKA,MAAK;AAChD,YAAI,SAAS,QAAQA,EAAC;AACtB,gBAAQA,EAAC,IAAI,OAAO,UAAU,SAAS,KAAK,MAAM,MAAM,mBAAmB,CAAC,UAAU,OAAO,CAAC,CAAC,GAAG,UAAU,OAAO,CAAC,CAAC,CAAC,IAAI,UAAU,MAAM;AAAA,MAC9I;AACA,aAAO,QAAQ,WAAW,IAAIF,OAAM,QAAQ,UAAU,IAAI,QAAQ,CAAC,IAAI;AAAA,IAC3E;AACA,aAAS,UAAU,GAAG;AAClB,UAAI,aAAa,QAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC,GAAG;AAC1C,eAAO,IAAI,KAAK,CAAC;AAAA,MACrB;AACA,aAAO;AAAA,IACX;AACA,aAAS,cAAc,KAAK,UAAU,WAAW,WAAW;AACxD,eAASE,KAAI,GAAG,MAAM,SAAS,QAAQA,KAAI,KAAKA,MAAK;AACjD,kBAAUA,EAAC,IAAI,SAASA,EAAC,EAAE,MAAM,KAAK,SAAS;AAAA,MACnD;AAAA,IACJ;AACA,aAAS,iBAAiB,KAAK,UAAU,WAAW,WAAW;AAC3D,UAAI,UAAU,UAAU,GAAG;AAC3B,eAASA,KAAI,GAAG,MAAM,SAAS,QAAQA,KAAI,KAAKA,MAAK;AACjD,YAAI,UAAUA,EAAC,KAAK,CAAC,QAAQ,UAAUA,EAAC,GAAG,SAAS,GAAG;AACnD,oBAAUA,EAAC,IAAI,SAASA,EAAC,EAAE,MAAM,KAAK,SAAS;AAAA,QACnD;AAAA,MACJ;AAAA,IACJ;AACA,aAAS,eAAe,KAAK,UAAU,WAAW,WAAW;AACzD,UAAI,UAAU,UAAU,GAAG;AAC3B,eAASA,KAAI,GAAG,MAAM,SAAS,QAAQA,KAAI,KAAKA,MAAK;AACjD,YAAI,YAAY,SAASA,EAAC,EAAE,MAAM,KAAK,SAAS;AAChD,YAAI,CAAC,WAAW;AACZ,oBAAUA,EAAC,IAAIF,OAAM;AAAA,QACzB,OACK;AACD,oBAAUE,EAAC,IAAI,CAAC,WAAW,SAASA,EAAC,EAAE,IAAI,KAAK,SAAS,CAAC;AAAA,QAC9D;AAAA,MACJ;AAAA,IACJ;AACA,aAAS,kBAAkB,KAAK,UAAU,WAAW,WAAW;AAC5D,UAAI,UAAU,UAAU,GAAG;AAC3B,eAASA,KAAI,GAAG,MAAM,SAAS,QAAQA,KAAI,KAAKA,MAAK;AACjD,YAAI,UAAUA,EAAC,KAAK,CAAC,QAAQ,UAAUA,EAAC,EAAE,CAAC,GAAG,SAAS,GAAG;AACtD,cAAI,YAAY,SAASA,EAAC,EAAE,MAAM,KAAK,SAAS;AAChD,cAAI,CAAC,WAAW;AACZ,sBAAUA,EAAC,IAAIF,OAAM;AAAA,UACzB,OACK;AACD,sBAAUE,EAAC,IAAI,CAAC,WAAW,SAASA,EAAC,EAAE,IAAI,KAAK,SAAS,CAAC;AAAA,UAC9D;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,aAAS,WAAW,KAAK,UAAU,WAAW,WAAW;AACrD,eAASA,KAAI,GAAG,MAAM,SAAS,QAAQA,KAAI,KAAKA,MAAK;AACjD,YAAI,UAAUA,EAAC,KAAK,UAAUA,EAAC,EAAE,QAAQ,MAAM,UAAU,QAAQ,GAAG;AAEhE,gBAAM,WAAW,SAASA,EAAC,EAAE,MAAM,KAAK,SAASA,EAAC,EAAE,KAAK,KAAK,SAAS,CAAC;AAIxE,cAAI,aAAaF,OAAM,SAAS,SAAS,QAAQ,MAAM,UAAUE,EAAC,EAAE,QAAQ,GAAG;AAM3E,sBAAUA,EAAC,IAAI,SAASA,EAAC,EAAE,MAAM,KAAK,SAASA,EAAC,EAAE,SAAS,KAAK,SAAS,CAAC;AAAA,UAC9E,OAAO;AACH,sBAAUA,EAAC,IAAI;AAAA,UACnB;AAAA,QAEJ;AAAA,MACJ;AAAA,IACJ;AACA,aAAS,SAAS,UAAU,WAAW,WAAW,YAAY;AAC1D,UAAI;AACJ,eAASA,KAAI,GAAG,MAAM,UAAU,QAAQA,KAAI,KAAKA,MAAK;AAClD,YAAI,UAAUA,EAAC,KAAK,UAAUA,EAAC,EAAE,QAAQ,MAAM,UAAU,QAAQ,GAAG;AAChE,cAAI,QAAQ,SAASA,EAAC,EAAE,UAAU,SAAS;AAC3C,cAAI,cAAc,QAAQ,YAAY;AAClC,mBAAO;AAAA,UACX;AACA,cAAI,CAAC,UAAU,QAAQ,QAAQ;AAC3B,qBAAS;AAAA,UACb;AAAA,QACJ;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AACA,aAAS,iBAAiB,KAAK,WAAW,WAAW;AACjD,UAAI,UAAU,UAAU,GAAG,GAAG;AAC9B,eAASA,KAAI,GAAG,MAAM,UAAU,QAAQA,KAAI,KAAKA,MAAK;AAClD,YAAI,QAAQ,UAAUA,EAAC;AACvB,YAAI,SAAS,CAAC,QAAQ,MAAM,CAAC,GAAG,SAAS,MAAM,CAAC,MAAM,CAAC,KAAK,QAAQ,MAAM,CAAC,GAAG,SAAS,IAAI;AACvF,cAAI,CAAC,UAAU,QAAQ,MAAM,CAAC,GAAG,MAAM,GAAG;AACtC,qBAAS,MAAM,CAAC;AAAA,UACpB;AAAA,QACJ;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AACA,aAAS,eAAe,YAAY,SAAS;AACzC,UAAI;AACJ,eAASA,KAAI,GAAG,MAAM,WAAW,QAAQA,KAAI,KAAKA,MAAK;AACnD,YAAI,WAAWA,EAAC,MAAM,CAAC,UAAU,QAAQ,QAAQ,WAAWA,EAAC,EAAE,CAAC,CAAC,IAAI;AACjE,mBAAS,WAAWA,EAAC,EAAE,CAAC;AAAA,QAC5B;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AACA,aAAS,QAAQ,KAAK,UAAU,WAAW,WAAW,YAAY;AAC9D,UAAI,UAAU,UAAU,GAAG,GAAG;AAC9B,eAASA,KAAI,GAAG,MAAM,SAAS,QAAQA,KAAI,KAAKA,MAAK;AACjD,YAAI,QAAQ,UAAUA,EAAC;AACvB,YAAI,SAAS,MAAM,QAAQ,MAAM,UAAU,QAAQ,GAAG;AAClD,cAAI,MAAM,SAASA,EAAC,EAAE,IAAI,KAAK,KAAK;AACpC,cAAI,eAAe,CAAC,OAAO,QAAQ,KAAK,UAAU,IAAI;AAClD,mBAAO;AAAA,UACX;AACA,cAAI,CAAC,UAAU,QAAQ,KAAK,MAAM,GAAG;AACjC,qBAAS;AAAA,UACb;AAAA,QACJ;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AACA,aAAS,UAAU,KAAK;AACpB,aAAO,QAAQ,SAAS,SAAU,GAAG,GAAG;AACpC,eAAO,CAAC,KAAK,EAAE,QAAQ,IAAI,EAAE,QAAQ;AAAA,MACzC,IAAI,SAAU,GAAG,GAAG;AAChB,eAAO,CAAC,KAAK,EAAE,QAAQ,IAAI,EAAE,QAAQ;AAAA,MACzC;AAAA,IACJ;AACA,aAAS,SAAS,KAAK,SAAS;AAC5B,UAAI,OAAO,IAAI,CAAC;AAChB,eAASA,KAAI,GAAG,MAAM,IAAI,QAAQA,KAAI,KAAKA,MAAK;AAC5C,YAAI,IAAIA,EAAC,KAAK,QAAQ,MAAM,IAAIA,EAAC,CAAC,GAAG;AACjC,iBAAO,IAAIA,EAAC;AAAA,QAChB;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AACA,WAAO;AAAA,MACH,SAAS,SAAU,GAAG;AAClB,eAAO,aAAa,QAAQ,GAAG,GAAG,CAAC,MAAMF,OAAM;AAAA,MACnD;AAAA,MACA,MAAM,SAAU,OAAO,WAAW,SAAS;AACvC,eAAO,aAAa,QAAQ,SAAS,GAAG,WAAW,OAAO;AAAA,MAC9D;AAAA,MACA,MAAM,SAAU,OAAO,WAAW,SAAS;AACvC,eAAO,aAAa,QAAQ,SAAS,GAAG,WAAW,OAAO;AAAA,MAC9D;AAAA,MACA,WAAW,SAAU,OAAO,WAAW,SAAS;AAC5C,eAAO,aAAa,QAAQ,SAAS,GAAG,WAAW,SAAS,IAAI;AAAA,MACpE;AAAA,MACA,WAAW,SAAU,OAAO,WAAW,SAAS;AAC5C,eAAO,aAAa,QAAQ,SAAS,GAAG,WAAW,SAAS,IAAI;AAAA,MACpE;AAAA,IACJ;AAAA,EACJ;AACA,EAAAA,OAAM,aAAa,SAAUG,KAAI,OAAO;AACpC,QAAI,IAAIH,OAAM,SAAS,KAAK,GAAG;AAC/B,QAAIG,KAAI;AACJ,sBAAgB;AAAA,IACpB;AACA,aAAS,kBAAkB;AACvB,UAAI,MAAM,KAAK,IAAI,GAAG,OAAO,EAAE,KAAK,GAAG,GAAG;AAC1C,UAAI,CAAC,KAAK,CAAC,GAAG;AACV,YAAI;AACJ;AAAA,MACJ;AACA,UAAI,OAAO,KAAK,CAAC,EAAE,QAAQ,IAAI;AAC/B,UAAI,OAAO,KAAK;AACZ,eAAO,KAAK,CAAC,IAAI,KAAK,CAAC,EAAE,QAAQ,IAAI,MAAM;AAAA,MAC/C;AACA,UAAI,OAAO,YAAY;AACnB,YAAI,WAAWA,KAAI,IAAI;AAAA,MAC3B,OACK;AACD,YAAI,WAAW,iBAAiB,UAAU;AAAA,MAC9C;AAAA,IACJ;AACA,WAAO;AAAA,MACH,QAAQ,WAAY;AAChB,eAAO,CAAC;AAAA,MACZ;AAAA,MACA,OAAO,WAAY;AACf,qBAAa,CAAC;AAAA,MAClB;AAAA,IACJ;AAAA,EACJ;AACA,EAAAH,OAAM,cAAc,SAAUG,KAAI,OAAO;AACrC,QAAI,CAACA,KAAI;AACL;AAAA,IACJ;AACA,QAAI,IAAIH,OAAM,WAAW,iBAAiB,KAAK,GAAG,OAAO,EAAE,OAAO;AAClE,aAAS,kBAAkB;AACvB,UAAI,CAAC,MAAM;AACP,QAAAG,IAAG;AACH,YAAIH,OAAM,WAAW,iBAAiB,KAAK;AAAA,MAC/C;AAAA,IACJ;AACA,WAAO;AAAA,MACH,QAAQ,WAAY;AAChB,eAAO,EAAE,OAAO;AAAA,MACpB;AAAA,MACA,OAAO,WAAY;AACf,eAAO;AACP,UAAE,MAAM;AAAA,MACZ;AAAA,IACJ;AAAA,EACJ;AACA,EAAAA,OAAM,OAAO,CAAC;AACd,EAAAA,OAAM,KAAK,WAAW,SAAU,cAAc;AAC1C,IAAAA,OAAM,KAAK,QAAQ,eAAe,SAAU,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AAC1D,aAAO,IAAI,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAAA,IACpC,IAAI,SAAU,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AAC5B,aAAO,IAAI,KAAK,KAAK,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,IAC9C;AACA,QAAI,MAAM,eAAe,QAAQ,UAAU,IAAI,KAAK;AACpD,IAAAA,OAAM,KAAK,UAAU,EAAE,MAAM,UAAU;AACvC,IAAAA,OAAM,KAAK,WAAW,EAAE,MAAM,OAAO;AACrC,IAAAA,OAAM,KAAK,UAAU,EAAE,MAAM,MAAM;AACnC,IAAAA,OAAM,KAAK,SAAS,EAAE,MAAM,KAAK;AACjC,IAAAA,OAAM,KAAK,UAAU,EAAE,MAAM,OAAO;AACpC,IAAAA,OAAM,KAAK,SAAS,EAAE,MAAM,SAAS;AACrC,IAAAA,OAAM,KAAK,SAAS,EAAE,MAAM,SAAS;AACrC,IAAAA,OAAM,KAAK,QAAQ,CAAC;AAAA,EACxB;AACA,EAAAA,OAAM,KAAK,MAAM,WAAY;AACzB,IAAAA,OAAM,KAAK,SAAS,KAAK;AAAA,EAC7B;AACA,EAAAA,OAAM,KAAK,YAAY,WAAY;AAC/B,IAAAA,OAAM,KAAK,SAAS,IAAI;AAAA,EAC5B;AACA,EAAAA,OAAM,KAAK,IAAI;AACf,EAAAA,OAAM,MAAM;AACZ,EAAAA,OAAM,MAAMA,OAAM,MAAM;AACxB,EAAAA,OAAM,OAAOA,OAAM,MAAM;AACzB,EAAAA,OAAM,MAAMA,OAAM,OAAO;AACzB,EAAAA,OAAM,OAAOA,OAAM,MAAM;AACzB,EAAAA,OAAM,gBAAgB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AACrE,EAAAA,OAAM,QAAQ;AACd,EAAAA,OAAM,KAAK,OAAO,SAAU,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AAC1C,WAAOA,OAAM,KAAK,MAAM,GAAG,MAAM,SAAY,IAAI,IAAI,GAAG,MAAM,SAAY,IAAI,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC;AAAA,EAC3G;AACA,EAAAA,OAAM,KAAK,eAAe,SAAU,GAAG,KAAK,YAAY,QAAQ;AAC5D,QAAI,MAAM,WAAW,IAAI,CAAC,GAAG,MAAM,WAAW,OAAO,CAAC,EAAE,CAAC;AACzD,YAAQ,OAAO,QAAQ,OAAO,MAAM,MAAM,IAAI,KAAK,OAAO,IAAI,CAAC,EAAE,QAAQ,IAAIA,OAAM,GAAG,IAAI,OAAO,MAAM,CAAC;AAAA,EAC5G;AACA,EAAAA,OAAM,KAAK,OAAO,SAAU,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AAC1C,QAAI,MAAM,UAAU;AACpB,QAAI,MAAM,IAAI,KAAK,IAAI;AACvB,QAAI,MAAM,IAAIA,OAAM,EAAE,OAAOA,OAAM,KAAK,KAAK,GAAG,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI;AAC7D,QAAI,MAAM,IAAI,KAAK;AACnB,QAAI,MAAM,IAAI,KAAK;AACnB,QAAI,MAAM,IAAI,KAAK;AACnB,WAAOA,OAAM,KAAK,MAAM,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAAA,EAC5C;AACA,EAAAA,OAAM,KAAK,eAAe,SAAU,GAAG,KAAK,YAAY,QAAQ;AAC5D,QAAI,MAAM,WAAW,IAAI,CAAC;AAC1B,WAAO,OAAO,OAAO,CAAC,MAAM,OAAO,MAAM,OAAO,KAAK,GAAG,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,OAAO,MAAM,CAAC;AAAA,EAChG;AACA,EAAAA,OAAM,QAAQ,CAAC;AACf,EAAAA,OAAM,MAAM,OAAO,SAAU,MAAM,YAAY;AAC3C,QAAI,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,IACT;AACA,QAAI,eAAe;AAAA,MACf,eAAe;AAAA,MACf,WAAW;AAAA,MACX,aAAa;AAAA,MACb,YAAY;AAAA,MACZ,WAAW;AAAA,MACX,UAAU;AAAA,MACV,WAAW;AAAA,IACf;AACA,QAAI,SAAS;AAAA,MACT,GAAG,CAAC,GAAG,GAAG,EAAE;AAAA,MACZ,GAAG,CAAC,GAAG,GAAG,EAAE;AAAA,MACZ,GAAG,CAAC,GAAG,GAAG,EAAE;AAAA,MACZ,GAAG,CAAC,GAAG,GAAG,EAAE;AAAA,MACZ,GAAG,CAAC,GAAG,GAAG,EAAE;AAAA,MACZ,GAAG,CAAC,GAAG,MAAM,IAAI;AAAA,MACjB,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC;AAAA,IAClB;AACA,aAAS,SAAS,OAAO,QAAQ,KAAK;AAClC,aAAO,MAAM,KAAK,IAAI,MAAM,KAAK,KAAK,OAAO,KAAK,IAAI,CAAC,SAAS,UAAU,IAAI,OAAO,IAAI;AAAA,IAC7F;AACA,aAAS,cAAc,OAAO;AAC1B,UAAI,QAAQ,CAAC,GAAG;AAChB,WAAK,SAAS,OAAO;AACjB,YAAI,UAAU,QAAQ,UAAU,KAAK;AACjC,gBAAM,KAAK,IAAI,MAAM,KAAK,EAAE,MAAM,CAAC;AAAA,QACvC;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AACA,aAAS,IAAI,OAAO,MAAM,KAAK,KAAK,KAAK;AACrC,UAAI,IAAI;AACR,UAAI,CAAC,MAAM,IAAI,GAAG;AACd,cAAM,IAAI,IAAI,CAAC;AAAA,MACnB;AACA,aAAO,KAAK,KAAK;AACb,YAAI,MAAM,IAAI,EAAE,QAAQ,CAAC,IAAI,GAAG;AAC5B,gBAAM,IAAI,EAAE,KAAK,CAAC;AAAA,QACtB;AACA,aAAK,OAAO;AAAA,MAChB;AACA,YAAM,IAAI,EAAE,KAAK,SAAU,GAAG,GAAG;AAC7B,eAAO,IAAI;AAAA,MACf,CAAC;AAAA,IACL;AACA,aAAS,QAAQ,WAAW,UAAU,OAAO,MAAM;AAC/C,UAAI,SAAS,KAAK,CAAC,SAAS,MAAM,SAAS,MAAM,SAAS,GAAG,QAAQ,IAAI,IAAI,GAAG;AAC5E,kBAAU,KAAK,cAAc,QAAQ,CAAC;AACtC,mBAAW,UAAU,UAAU,SAAS,CAAC;AAAA,MAC7C;AACA,UAAI,UAAU,KAAK,OAAO,KAAK;AAC/B,UAAI,UAAU,MAAM,MAAM,IAAI;AAAA,IAClC;AACA,aAAS,WAAW,GAAG,UAAU,OAAO;AACpC,UAAI,UAAU,CAAC,GAAG,UAAU,CAAC;AAC7B,UAAI,UAAU,GAAG;AACb,YAAI,UAAU,KAAK,GAAG,CAAC;AACvB,YAAI,UAAU,KAAK,MAAM,KAAK,MAAM,GAAG;AACvC,YAAI,SAAS,KAAK,GAAG,CAAC;AACtB,YAAI,SAAS,KAAK,MAAM,KAAK,MAAM,GAAG;AACtC,YAAI,SAAS,KAAK,GAAG,CAAC;AACtB,YAAI,SAAS,KAAK,MAAM,KAAK,MAAM,GAAG;AAAA,MAC1C,OACK;AACD,YAAI,UAAU,KAAK,QAAQ,GAAG,QAAQ,CAAC;AACvC,YAAI,UAAU,KAAK,MAAM,KAAK,MAAM,GAAG;AACvC,YAAI,SAAS,KAAK,QAAQ,GAAG,QAAQ,CAAC;AACtC,YAAI,SAAS,KAAK,MAAM,KAAK,MAAM,GAAG;AACtC,YAAI,SAAS,KAAK,QAAQ,GAAG,QAAQ,CAAC;AACtC,YAAI,SAAS,KAAK,MAAM,KAAK,MAAM,GAAG;AAAA,MAC1C;AACA,QAAE,WAAW,KAAK,OAAO;AACzB,QAAE,WAAW,KAAK,OAAO;AAAA,IAC7B;AACA,aAAS,SAAS,MAAM,UAAU,MAAM,KAAK,KAAK,QAAQ;AACtD,UAAI,WAAW,KAAK,MAAM,GAAG,GAAG,MAAM,CAAC,SAAS,CAAC,GAAG,QAAQ,SAAS,CAAC;AACtE,UAAI,UAAU,OAAO,UAAU,KAAK;AAChC,YAAI,aAAa,MAAM,MAAM,GAAG;AAChC,cAAM,SAAS,WAAW,CAAC,GAAG,QAAQ,GAAG;AACzC,cAAM,SAAS,WAAW,CAAC,GAAG,QAAQ,GAAG,KAAK;AAAA,MAClD;AACA,UAAI,UAAU,MAAM,KAAK,KAAK,GAAG;AAAA,IACrC;AACA,aAAS,MAAM,MAAM,GAAG,MAAM,KAAK,KAAK,QAAQ;AAC5C,UAAI,OAAOI,QAAO,YAAY,EAAE,WAAW,WAAW,UAAU,UAAU,SAAS,CAAC;AACpF,UAAI,SAAS,KAAK;AACd,eAAO,MAAM;AAAA,MACjB;AACA,WAAK,QAAQ,SAAS,MAAM,QAAQ,GAAG,OAAO,MAAM;AAChD,YAAI,UAAU,MAAM,OAAO,KAAK;AAAA,MACpC,YACU,QAAQ,SAAS,KAAK,QAAQ,KAAK,EAAE,GAAG,QAAQ,GAAG,OAAO,MAAM;AACtE,mBAAW,GAAG,UAAU,KAAK;AAAA,MACjC,YACU,QAAQ,SAAS,KAAK,QAAQ,KAAK,EAAE,GAAG,QAAQ,GAAG,OAAO,MAAM;AACtE,gBAAQ,WAAW,UAAU,OAAO,MAAM,CAAC;AAAA,MAC/C,YACUA,SAAQ,KAAK,MAAM,GAAG,GAAG,WAAW,GAAG;AAC7C,gBAAQ,SAASA,OAAM,CAAC,GAAG,QAAQ,GAAG;AACtC,gBAAQ,WAAW,UAAU,OAAO,SAASA,OAAM,CAAC,CAAC,CAAC;AAAA,MAC1D,OACK;AACD,iBAAS,MAAM,UAAU,MAAM,KAAK,KAAK,MAAM;AAAA,MACnD;AAAA,IACJ;AACA,aAAS,OAAO,MAAM;AAClB,aAAO,KAAK,QAAQ,GAAG,IAAI,MAAM,KAAK,QAAQ,GAAG,IAAI;AAAA,IACzD;AACA,aAAS,WAAW,GAAG,GAAG;AACtB,aAAO,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,IAAI,IAAI;AAAA,IAC7C;AACA,aAAS,UAAUC,OAAM;AACrB,UAAI,WAAW;AAAA,QACX,WAAW,CAAC,CAAC,CAAC;AAAA,QACd,YAAY,CAAC;AAAA,MACjB,GAAG,aAAaA,MAAK,QAAQ,UAAU,GAAG,EAAE,MAAM,GAAG,GAAG,OAAO,GAAG,WAAW;AAC7E,WAAK,SAAS,QAAQ;AAClB,YAAI,OAAO,KAAK;AAChB,oBAAY,WAAW,EAAE,CAAC,CAAC;AAC3B,YAAI,aAAa,cAAc,OAAO,cAAc,KAAK;AACrD,kBAAQ,UAAU,MAAM,GAAG,EAAE,KAAK,UAAU;AAC5C,cAAI,GAAG,SAAS,MAAM;AACtB,eAAK,IAAI,GAAG,IAAI,QAAQ,KAAK;AACzB,kBAAM,MAAM,CAAC,GAAG,UAAU,OAAO,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAAA,UACrD;AAAA,QACJ;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AACA,aAAS,YAAYA,OAAM;AACvB,UAAI,WAAWA,MAAK,YAAY;AAChC,aAAO,aAAa,QAAQ,KAAK;AAAA,IACrC;AACA,QAAI,IAAI,YAAY,IAAI;AACxB,WAAO,UAAU,aAAa,IAAI,OAAO,CAAC;AAAA,EAC9C;AACA,EAAAL,OAAM,MAAM,QAAQ,WAAY;AAC5B,QAAI,YAAY,CAAC,GAAG,aAAa,CAAC,GAAG,KAAK,SAAS,WAAW,SAAS,QAAQM,QAAO,UAAU,UAAU,UAAU,GAAG;AACvH,aAAS,IAAI,MAAM,KAAK,KAAK;AACzB,aAAO,WAAW,OAAO,MAAM,WAAW;AAC1C,UAAI,CAAC,KAAK;AACN,eAAO,KAAK,CAAC,CAAC;AACd,cAAM,OAAO,CAAC;AAAA,MAClB;AACA,UAAI,CAAC,IAAI,IAAI,GAAG;AACZ,YAAI,IAAI,IAAI,CAAC;AAAA,MACjB;AACA,gBAAU,IAAI,IAAI;AAClB,UAAIA,QAAO;AACP,iBAAS,CAAC;AACV,aAAK,IAAI,KAAK,KAAK,KAAK,KAAKA,QAAO;AAChC,iBAAO,KAAK,CAAC;AAAA,QACjB;AACA,eAAO;AAAA,UACH,GAAG;AAAA,UACH,GAAGA;AAAA,UACH,GAAG,QAAQ;AAAA,UACX,GAAG;AAAA,QACP;AAAA,MACJ;AACA,eAAS,WAAW,CAAC,GAAG,IAAI,WAAW,CAAC,GAAG,IAAI;AAC/C,UAAI,SAAS,OAAO;AACpB,WAAK,IAAI,GAAG,IAAI,QAAQ,KAAK,GAAG;AAC5B,YAAI,MAAM,OAAO,CAAC;AAClB,YAAI,QAAQ,QAAQ,GAAG,IAAI,GAAG;AAC1B,kBAAQ,KAAK,GAAG;AAAA,QACpB;AAAA,MACJ;AACA,eAASA,SAAQ,WAAW,WAAW,WAAW;AAAA,IACtD;AACA,WAAO;AAAA,MACH;AAAA,MACA;AAAA,MACA,IAAI,WAAY;AACZ,iBAAS,UAAU,CAAC,aAAa,QAAQ,UAAU,CAAC,IAAI;AACxD,eAAO;AAAA,MACX;AAAA,MACA,OAAO,SAAU,GAAG;AAChB,QAAAA,SAAQ,KAAK;AACb,eAAO;AAAA,MACX;AAAA,MACA,OAAO,SAAU,GAAG;AAChB,mBAAW;AACX,iBAAS,CAAC,CAAC;AACX,eAAO;AAAA,MACX;AAAA,MACA,QAAQ,SAAU,GAAG;AACjB,mBAAW;AACX,iBAAS,CAAC,CAAC;AACX,eAAO;AAAA,MACX;AAAA,MACA,OAAO,WAAY;AACf,mBAAW;AACX,eAAO;AAAA,MACX;AAAA,MACA,MAAM,WAAY;AACd,mBAAW;AACX,eAAO;AAAA,MACX;AAAA,MACA,MAAM,WAAY;AACd,iBAASJ,KAAI,GAAG,MAAM,OAAO,QAAQA,KAAI,KAAKA,MAAK;AAC/C,cAAIE,SAAQ,OAAOF,EAAC,EAAE,MAAM,GAAG;AAC/B,cAAIE,OAAM,SAAS;AACf,YAAAA,OAAM,KAAK,CAAC;AAChB,iBAAOF,EAAC,IAAI,CAACE,OAAM,CAAC,IAAI,OAAO,CAACA,OAAM,CAAC,IAAI,KAAK,CAACA,OAAM,CAAC;AAAA,QAC5D;AACA,YAAI,GAAG;AACP,eAAO;AAAA,MACX;AAAA,MACA,QAAQ,WAAY;AAChB,YAAI,KAAK,GAAG,EAAE;AACd,eAAO;AAAA,MACX;AAAA,MACA,QAAQ,WAAY;AAChB,YAAI,KAAK,GAAG,EAAE;AACd,eAAO;AAAA,MACX;AAAA,MACA,MAAM,WAAY;AACd,YAAI,KAAK,GAAG,EAAE;AACd,eAAO;AAAA,MACX;AAAA,MACA,YAAY,WAAY;AACpB,YAAI,KAAK,GAAG,WAAW,IAAI,EAAE;AAC7B,eAAO;AAAA,MACX;AAAA,MACA,WAAW,WAAY;AACnB,YAAI,KAAK,GAAG,CAAC;AACb,eAAO;AAAA,MACX;AAAA,MACA,WAAW,WAAY;AACnB,iBAAS,CAAC,GAAG,CAAC;AACd,eAAO,KAAK,UAAU;AAAA,MAC1B;AAAA,MACA,WAAW,WAAY;AACnB,iBAAS,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC;AACvB,eAAO,KAAK,UAAU;AAAA,MAC1B;AAAA,MACA,gBAAgB,WAAY;AACxB,YAAI,MAAM,GAAG,WAAW,IAAI,CAAC;AAC7B,eAAO;AAAA,MACX;AAAA,MACA,WAAW,WAAY;AACnB,YAAI,MAAM,GAAG,WAAW,IAAI,GAAG;AAC/B,eAAO;AAAA,MACX;AAAA,MACA,aAAa,WAAY;AACrB,YAAI,MAAM,GAAG,WAAW,IAAI,CAAC;AAC7B,eAAO;AAAA,MACX;AAAA,MACA,YAAY,WAAY;AACpB,YAAI,MAAM,GAAG,WAAW,IAAI,EAAE;AAC9B,eAAO;AAAA,MACX;AAAA,MACA,OAAO,WAAY;AACf,YAAI,KAAK,GAAG,EAAE;AACd,eAAO;AAAA,MACX;AAAA,MACA,MAAM,WAAY;AACd,YAAI,KAAK,MAAM,IAAI;AACnB,eAAO;AAAA,MACX;AAAA,MACA,UAAU,WAAY;AAClB,iBAASF,KAAI,GAAG,MAAM,OAAO,QAAQA,KAAI,KAAKA,MAAK;AAC/C,iBAAOA,EAAC,IAAI,OAAOA,EAAC,EAAE,QAAQ;AAAA,QAClC;AACA,YAAI,IAAI;AACR,eAAO;AAAA,MACX;AAAA,MACA,gBAAgB,SAAU,IAAI,MAAM;AAChC,YAAI,SAASF,OAAM,SAAS,EAAE;AAC9B,YAAI,CAAC;AACD,gBAAM,IAAI,MAAM,qBAAqB,KAAK,kBAAkB;AAChE,mBAAW;AACX,iBAAS,UAAU,CAAC,aAAa,QAAQ,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AACrE,eAAO;AAAA,MACX;AAAA,MACA,cAAc,SAAU,IAAI;AACxB,YAAI,SAASA,OAAM,EAAE;AACrB,YAAI,CAAC;AACD,gBAAM,IAAI,MAAM,wBAAwB,KAAK,kBAAkB;AACnE,YAAI,IAAI,OAAO,OAAO,oBAAI,KAAK,CAAC,EAAE,CAAC,GAAG,OAAO,OAAO,oBAAI,KAAK,CAAC,EAAE,CAAC,CAAC;AAClE,eAAO;AAAA,MACX;AAAA,MACA,YAAY,SAAU,OAAO;AACzB,eAAO,KAAK,QAAQ,OAAO,KAAK,CAAC;AAAA,MACrC;AAAA,MACA,SAAS,SAAU,OAAO,KAAK;AAC3B,YAAI,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,EAAE,OAAO,GAAG,KAAK,CAAC;AAC1C,QAAAM,SAAQ,KAAK;AACb,YAAI,KAAK,GAAG,OAAO,GAAG;AACtB,eAAO;AAAA,MACX;AAAA,MACA,KAAK,WAAY;AACb,cAAM,OAAO,OAAO,KAAK,CAAC,CAAC,IAAI,CAAC;AAChC,eAAO;AAAA,MACX;AAAA,MACA,QAAQ,WAAY;AAChB,iBAAS;AACT,cAAM;AACN,eAAO;AAAA,MACX;AAAA,IACJ;AAAA,EACJ;AACA,EAAAN,OAAM,MAAM,OAAO,SAAU,KAAK;AAC9B,QAAI,QAAQA,OAAM,MAAM,OAAO,MAAM,GAAG,QAAQ,IAAI;AACpD,QAAI,aAAa;AAAA,MACb,KAAK;AAAA,MACL,UAAU;AAAA,MACV,MAAM;AAAA,MACN,MAAM;AAAA,MACN,SAAS;AAAA,MACT,WAAW;AAAA,MACX,WAAW;AAAA,MACX,OAAO;AAAA,MACP,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,KAAK;AAAA,MACL,aAAa;AAAA,MACb,WAAW;AAAA,MACX,WAAW;AAAA,MACX,YAAY;AAAA,MACZ,aAAa;AAAA,MACb,SAAS;AAAA,MACT,SAAS;AAAA,MACT,OAAO;AAAA,MACP,MAAM;AAAA,MACN,SAAS;AAAA,MACT,OAAO;AAAA,MACP,IAAI;AAAA,MACJ,KAAK;AAAA,MACL,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,OAAO;AAAA,MACP,MAAM;AAAA,MACN,MAAM;AAAA,MACN,IAAI;AAAA,MACJ,OAAO;AAAA,MACP,IAAI;AAAA,MACJ,SAAS;AAAA,IACb;AACA,QAAI,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,OAAO;AAAA,MACP,KAAK;AAAA,MACL,OAAO;AAAA,MACP,KAAK;AAAA,MACL,OAAO;AAAA,MACP,KAAK;AAAA,MACL,OAAO;AAAA,MACP,OAAO;AAAA,IACX;AACA,aAAS,EAAE,OAAO,KAAK,MAAM,MAAM;AAC/B,aAAO;AAAA,QACH,UAAU;AAAA,QACV,QAAQ;AAAA,QACR;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AACA,aAAS,KAAK,UAAU;AACpB,UAAI,aAAa,oBAAoB,QAAQ,WAAW,CAAC,QAAQ,GAAG,aAAa,OAAO,OAAO,UAAU,GAAG,WAAW,OAAO;AAC9H,iBAAW,KAAK,UAAU;AAC1B,cAAQ;AACR,aAAO,CAAC,SAAS,MAAM,SAAS,YAAY;AACxC,cAAM;AACN,mBAAW,MAAM,UAAU,KAAK;AAChC,gBAAQ,EAAE,OAAO,OAAO,MAAM,MAAM,UAAU,EAAE,CAAC,CAAC;AAClD,YAAI,GAAG,SAAS,WAAW;AAC3B,aAAK,IAAI,GAAG,IAAI,QAAQ,KAAK;AACzB,sBAAY,WAAW,CAAC;AACxB,cAAI,UAAU,KAAK,QAAQ;AAC3B,cAAI,KAAK,EAAE,UAAU,KAAK,EAAE,CAAC,EAAE,SAAS,KAAK;AACzC,kBAAM,EAAE,CAAC,EAAE;AACX,oBAAQ,EAAE,OAAO,QAAQ,KAAK,SAAS,UAAU,GAAG,GAAG,GAAG,SAAS;AAAA,UACvE;AAAA,QACJ;AACA,YAAI,MAAM,SAAS,YAAY;AAC3B,kBAAQ,MAAM;AAAA,QAClB;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AACA,aAAS,KAAK,eAAe;AACzB,UAAI,QAAQ,KAAK,aAAa;AAC9B,YAAM,MAAM;AACZ,aAAO;AAAA,IACX;AACA,aAAS,iBAAiB,WAAW;AACjC,UAAI,QAAQ,CAAC,gBAAgB,SAAS,GAAG,MAAM,cAAc,WAAW,OAAO,IAAI,CAAC,gBAAgB,SAAS,IAAI,OAAO,OAAO,CAAC;AAChI,eAAS,IAAI,OAAO,KAAK,KAAK,KAAK;AAC/B,aAAK,KAAK,CAAC;AAAA,MACf;AACA,aAAO;AAAA,IACX;AACA,aAAS,YAAY,WAAW;AAC5B,UAAI,OAAO,iBAAiB,SAAS;AACrC,aAAO,cAAc,WAAW,GAAG,GAAG;AAClC,aAAK,KAAK,MAAM,MAAM,iBAAiB,SAAS,CAAC;AAAA,MACrD;AAIA,UAAI,cAAc,WAAW,SAAS;AAClC,aAAK,KAAK,CAAC,GAAG,MAAM,IAAI,CAAC;AAAA,MAC7B;AACA,aAAO;AAAA,IACX;AACA,aAAS,WAAW,GAAG;AACnB,UAAI,KAAK,QAAQ,OAAO;AACxB,UAAI,cAAc,WAAW,OAAO,GAAG;AACnC,UAAE,GAAG,MAAM,KAAK,MAAM,GAAG,EAAE,UAAU;AAAA,MACzC,WACS,cAAc,WAAW,OAAO,GAAG;AACxC,UAAE,GAAG,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,GAAG,EAAE,UAAU;AAAA,MAC1E,OACK;AACD,cAAM,gBAAgB,WAAW,IAAI;AACrC,UAAE,MAAM,GAAG;AACX,iBAAS,gBAAgB,CAAC;AAC1B,YAAI,cAAc,WAAW,KAAK,GAAG;AACjC,gBAAM,gBAAgB,WAAW,IAAI;AACrC,YAAE,WAAW,GAAG;AAChB,qBAAW,OAAO,IAAI;AAAA,QAC1B,WACS,cAAc,WAAW,OAAO,GAAG;AACxC,kBAAQ,gBAAgB,WAAW,IAAI;AACvC,cAAI,cAAc,WAAW,GAAG,GAAG;AAC/B,kBAAM,gBAAgB,WAAW,IAAI;AACrC,cAAE,QAAQ,OAAO,GAAG;AAAA,UACxB;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,aAAS,WAAW,GAAG;AACnB,UAAI,cAAc,WAAW,KAAK,GAAG;AACjC,UAAE,MAAM;AAAA,MACZ,WACS,cAAc,WAAW,IAAI,GAAG;AACrC,UAAE,KAAK;AAAA,MACX,OACK;AACD,UAAE,GAAG,YAAY,WAAW,IAAI,CAAC;AAAA,MACrC;AACA,sBAAgB,CAAC;AAAA,IACrB;AACA,aAAS,kBAAkBO,MAAK;AAC5B,YAAM;AACN,cAAQA;AACR,cAAQ;AACR,UAAI,IAAI,MAAM;AACd,aAAO,MAAM,MAAM,UAAU,QAAQ,GAAG;AACpC,YAAI,QAAQ,WAAW,CAAC,WAAW,OAAO,WAAW,OAAO,WAAW,QAAQ,WAAW,OAAO,WAAW,IAAI,WAAW,IAAI,WAAW,IAAI,GAAG,WAAW,IAAI,WAAW,KAAK,WAAW,QAAQ,WAAW,IAAI,CAAC;AACnN,gBAAQ,MAAM,MAAM;AAAA,UAChB,KAAK,WAAW;AACZ,uBAAW,CAAC;AACZ;AAAA,UACJ,KAAK,WAAW;AACZ,gBAAI,KAAK,WAAW,IAAI,EAAE,SAAS,QAAW;AAC1C,gBAAE,MAAM,gBAAgB,WAAW,IAAI,CAAC;AACxC,gBAAE,KAAK;AAAA,YACX,WACS,KAAK,WAAW,QAAQ,EAAE,SAAS,QAAW;AACnD,gBAAE,MAAM,gBAAgB,WAAW,QAAQ,CAAC;AAC5C,gBAAE,SAAS;AAAA,YACf,OACK;AACD,gBAAE,MAAM,gBAAgB,WAAW,IAAI,CAAC;AACxC,8BAAgB,CAAC;AAAA,YACrB;AACA;AAAA,UACJ,KAAK,WAAW;AACZ,gBAAI,KAAK,WAAW,IAAI,EAAE,SAAS,QAAW;AAC1C,gBAAE,OAAO,gBAAgB,WAAW,IAAI,CAAC;AACzC,gBAAE,KAAK;AAAA,YACX,WACS,KAAK,WAAW,QAAQ,EAAE,SAAS,QAAW;AACnD,gBAAE,OAAO,gBAAgB,WAAW,QAAQ,CAAC;AAC7C,gBAAE,SAAS;AAAA,YACf,OACK;AACD,gBAAE,OAAO,gBAAgB,WAAW,IAAI,CAAC;AACzC,8BAAgB,CAAC;AAAA,YACrB;AACA;AAAA,UACJ,KAAK,WAAW;AACZ,uBAAW,CAAC;AACZ;AAAA,UACJ,KAAK,WAAW;AACZ,cAAE,GAAG,YAAY,WAAW,OAAO,CAAC,EAAE,UAAU;AAChD;AAAA,UACJ,KAAK,WAAW;AACZ,cAAE,GAAG,YAAY,WAAW,SAAS,CAAC,EAAE,MAAM;AAC9C;AAAA,UACJ,KAAK,WAAW,IAAI;AAChB,cAAE,GAAG,YAAY,WAAW,SAAS,CAAC,EAAE,KAAK;AAC7C;AAAA,UACJ,KAAK,WAAW;AACZ,cAAE,GAAG,gBAAgB,WAAW,IAAI,CAAC,EAAE,KAAK;AAC5C,mBAAO,cAAc,WAAW,GAAG,GAAG;AAClC,gBAAE,GAAG,gBAAgB,WAAW,IAAI,CAAC,EAAE,KAAK;AAAA,YAChD;AACA;AAAA,UACJ,KAAK,WAAW;AACZ;AAAA,UACJ,KAAK,WAAW;AACZ,cAAE,IAAI;AACN;AAAA,UACJ,KAAK,WAAW;AACZ,cAAE,OAAO;AACT;AAAA,UACJ;AACI,oBAAQ;AAAA,QAChB;AAAA,MACJ;AACA,aAAO;AAAA,QACH,WAAW,EAAE;AAAA,QACb,YAAY,EAAE;AAAA,QACd;AAAA,MACJ;AAAA,IACJ;AACA,aAAS,gBAAgB,GAAG;AACxB,UAAI,aAAa,WAAW,CAAC,WAAW,QAAQ,WAAW,QAAQ,WAAW,MAAM,WAAW,WAAW,WAAW,WAAW,WAAW,aAAa,WAAW,KAAK,WAAW,OAAO,WAAW,MAAM,WAAW,aAAa,WAAW,UAAU,CAAC;AACzP,cAAQ,WAAW,MAAM;AAAA,QACrB,KAAK,WAAW;AACZ,YAAE,OAAO;AACT;AAAA,QACJ,KAAK,WAAW;AACZ,YAAE,OAAO;AACT;AAAA,QACJ,KAAK,WAAW;AACZ,YAAE,KAAK;AACP;AAAA,QACJ,KAAK,WAAW;AACZ,YAAE,UAAU;AACZ;AAAA,QACJ,KAAK,WAAW;AACZ,YAAE,UAAU;AACZ;AAAA,QACJ,KAAK,WAAW;AACZ,YAAE,eAAe;AACjB;AAAA,QACJ,KAAK,WAAW;AACZ,YAAE,WAAW;AACb;AAAA,QACJ,KAAK,WAAW;AACZ,YAAE,YAAY;AACd;AAAA,QACJ,KAAK,WAAW;AACZ,YAAE,WAAW;AACb;AAAA,QACJ,KAAK,WAAW;AACZ,YAAE,MAAM;AACR;AAAA,QACJ,KAAK,WAAW;AACZ,YAAE,KAAK;AACP;AAAA,QACJ;AACI,kBAAQ;AAAA,MAChB;AACA,aAAO;AAAA,IACX;AACA,aAAS,cAAc,WAAW;AAC9B,UAAI,QAAQ,KAAK,SAAS,EAAE,SAAS;AACrC,UAAI,OAAO;AACP,aAAK,SAAS;AAAA,MAClB;AACA,aAAO;AAAA,IACX;AACA,aAAS,WAAW,WAAW;AAC3B,UAAIC,KAAI,KAAK,SAAS;AACtB,UAAIA,GAAE,MAAM;AACR,QAAAA,GAAE,OAAO,cAAcA,GAAE,MAAM,SAAS;AAAA,MAC5C,OACK;AACD,gBAAQ;AAAA,MACZ;AACA,aAAOA;AAAA,IACX;AACA,aAAS,gBAAgB,WAAW;AAChC,aAAO,WAAW,SAAS,EAAE;AAAA,IACjC;AACA,aAAS,cAAcD,MAAK,WAAW;AACnC,UAAI,SAASA;AACb,cAAQ,WAAW;AAAA,QACf,KAAK,WAAW;AACZ,cAAI,QAAQA,KAAI,MAAM,WAAW,GAAG,OAAO,MAAM,CAAC,MAAM,QAAQ,MAAM,CAAC,IAAI,KAAK,SAAS,MAAM,CAAC,GAAG,EAAE,IAAI,KAAK,MAAM,CAAC,GAAG,MAAM,MAAM,CAAC,EAAE,KAAK;AAC5I,oBAAU,KAAK,WAAW,IAAI,MAAM,MAAM,OAAO,MAAM;AACvD;AAAA,QACJ,KAAK,WAAW;AACZ,mBAAS,SAAS,OAAO,KAAKA,IAAG,EAAE,CAAC,GAAG,EAAE;AACzC;AAAA,QACJ,KAAK,WAAW;AAAA,QAChB,KAAK,WAAW;AACZ,mBAAS,MAAMA,KAAI,UAAU,GAAG,CAAC,CAAC;AAClC;AAAA,QACJ,KAAK,WAAW;AACZ,mBAAS,IAAI,KAAKA,KAAI,YAAY,CAAC;AACnC;AAAA,MACJ;AACJ,aAAO;AAAA,IACX;AACA,WAAO,kBAAkB,IAAI,YAAY,CAAC;AAAA,EAC9C;AACA,SAAOP;AACX,EAAG;AAEH,MAAM,KAAK,UAAU;AACrB,IAAO,gBAAQ;;;ACjkDR,IAAM,wBAAN,cAAoC,MAAM,CAAC,+BAA+B,GAAG,CAAC,SAAS;AAC1F,QAAM,aAAa,KAAK;AAAA,EACxB,MAAMS,+BAA8B,KAAK;AAAA,IACrC,WAAW,SAAS;AAChB,aAAO;AAAA,QACH;AAAA,QACA,EAAE,MAAM,aAAa,MAAM,OAAO;AAAA,QAClC,EAAE,MAAM,WAAW,MAAM,OAAO;AAAA,QAChC;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,EAAE,MAAM,aAAa,MAAM,WAAW,cAAc,MAAM;AAAA,QAC1D,EAAE,MAAM,YAAY,MAAM,SAAS;AAAA,MACvC;AAAA,IACJ;AAAA,IACA,cAAc;AACV,aAAO,KAAK,OAAO,CAAC,EAAE;AAAA,IAC1B;AAAA,IACA,gBAAgB;AACZ,WAAK,gBAAgB;AACrB,WAAK,YAAY,EAAE,SAAS;AAAA,IAChC;AAAA;AAAA,IAEA,mBAAmB;AACf,UAAI,KAAK,iBAAiB;AACtB,eAAO,KAAK;AAGhB,UAAIC,QAAO,MAAQ,KAAK,YAAY,EAAE,SAAS,IAAI;AACnD,UAAI,WAAW,KAAK;AACpB,UAAI,YAAY,MAAM;AAGlB,mBAAW,KAAK,YAAY,IAAI,KAAK;AAAA,MACzC;AAEA,aAAO,KAAK,gBAAgBA,QAAO;AAAA,IACvC;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA,cAAc;AACV,aAAO,QAAQ,KAAK,sBAAsB,KAAK,oBAAoB,KAAK,qBAAqB,KAAK,KAAK,mBAAmB,CAAC;AAAA,IAC/H;AAAA;AAAA;AAAA;AAAA,IAIA,WAAW;AACP,aAAO,QAAQ,KAAK,aAAa,KAAK,OAAO;AAAA,IACjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,kBAAkB,OAAO;AACrB,UAAI,WAAW;AACf,UAAI,SAAS,UAAU,OAAO,KAAK,GAAG;AAClC,mBAAW,cAAM,MAAM,KAAK,KAAK;AACjC,YAAI,aAAa,OAAO,QAAQ,KAAK,SAAS,SAAS,GAAG;AAEtD,cAAI;AACA,uBAAW,KAAK,MAAM,KAAK;AAAA,UAC/B,SACO,GAAG;AACN,mBAAO;AAAA,UACX;AAAA,QACJ;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,IACA,uBAAuB;AACnB,UAAI,KAAK;AACL,eAAO,KAAK;AAChB,YAAM,WAAW,KAAK,kBAAkB,KAAK,kBAAkB;AAC/D,aAAO,KAAK,oBAAoB,cAAM,SAAS,QAAQ;AAAA,IAC3D;AAAA,IACA,qBAAqB;AACjB,UAAI,KAAK;AACL,eAAO,KAAK;AAChB,UAAI,KAAK,qBAAqB;AAC1B,eAAO;AACX,YAAM,WAAW,KAAK,kBAAkB,KAAK,gBAAgB;AAC7D,aAAO,KAAK,kBAAkB,cAAM,SAAS,QAAQ;AAAA,IACzD;AAAA,EACJ;AACA,SAAOD;AACX,CAAC,EAAE;AACH;;;AClGO,IAAM,wBAAN,cAAoC,MAAM,CAAC,+BAA+B,GAAG,CAAC,SAAS;AAC1F,QAAM,aAAa,KAAK;AAAA,EACxB,MAAME,+BAA8B,KAAK;AAAA,IACrC,cAAc;AACV,YAAM,GAAG,SAAS;AAClB,WAAK,mCAAmC;AAAA,IAC5C;AAAA,IACA,WAAW,gBAAgB;AACvB,aAAO;AAAA,QACH,YAAY;AAAA,MAChB;AAAA,IACJ;AAAA,EACJ;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;ACnBO,IAAI;AAAA,CACV,SAAUC,WAAU;AACjB,EAAAA,UAAS,aAAa,IAAI;AAC1B,EAAAA,UAAS,QAAQ,IAAI;AACrB,EAAAA,UAAS,QAAQ,IAAI;AACrB,EAAAA,UAAS,MAAM,IAAI;AACnB,EAAAA,UAAS,KAAK,IAAI;AAClB,EAAAA,UAAS,MAAM,IAAI;AACnB,EAAAA,UAAS,OAAO,IAAI;AACpB,EAAAA,UAAS,SAAS,IAAI;AACtB,EAAAA,UAAS,MAAM,IAAI;AACvB,GAAG,aAAa,WAAW,CAAC,EAAE;AAIvB,IAAI;AAAA,CACV,SAAUC,8BAA6B;AAIpC,EAAAA,6BAA4B,OAAO,IAAI;AAIvC,EAAAA,6BAA4B,QAAQ,IAAI;AAKxC,EAAAA,6BAA4B,UAAU,IAAI;AAC9C,GAAG,gCAAgC,8BAA8B,CAAC,EAAE;AAI7D,IAAI;AAAA,CACV,SAAUC,iBAAgB;AAMvB,EAAAA,gBAAe,aAAa,IAAI;AAMhC,EAAAA,gBAAe,cAAc,IAAI;AAKjC,EAAAA,gBAAe,oBAAoB,IAAI;AAOvC,EAAAA,gBAAe,kBAAkB,IAAI;AAOrC,EAAAA,gBAAe,qBAAqB,IAAI;AAKxC,EAAAA,gBAAe,mBAAmB,IAAI;AAMtC,EAAAA,gBAAe,kBAAkB,IAAI;AAMrC,EAAAA,gBAAe,kBAAkB,IAAI;AACzC,GAAG,mBAAmB,iBAAiB,CAAC,EAAE;AAInC,IAAI;AAAA,CACV,SAAUC,iBAAgB;AACvB,EAAAA,gBAAe,QAAQ,IAAI;AAC3B,EAAAA,gBAAe,eAAe,IAAI;AAClC,EAAAA,gBAAe,aAAa,IAAI;AAChC,EAAAA,gBAAe,YAAY,IAAI;AACnC,GAAG,mBAAmB,iBAAiB,CAAC,EAAE;AAInC,IAAI;AAAA,CACV,SAAUC,6BAA4B;AAInC,EAAAA,4BAA2BA,4BAA2B,SAAS,IAAI,CAAC,IAAI;AAIxE,EAAAA,4BAA2BA,4BAA2B,kBAAkB,IAAI,CAAC,IAAI;AAIjF,EAAAA,4BAA2BA,4BAA2B,uBAAuB,IAAI,CAAC,IAAI;AAC1F,GAAG,+BAA+B,6BAA6B,CAAC,EAAE;AAI3D,IAAI;AAAA,CACV,SAAUC,iBAAgB;AAMvB,EAAAA,gBAAeA,gBAAe,cAAc,IAAI,CAAC,IAAI;AAOrD,EAAAA,gBAAeA,gBAAe,YAAY,IAAI,CAAC,IAAI;AAMnD,EAAAA,gBAAeA,gBAAe,YAAY,IAAI,CAAC,IAAI;AAMnD,EAAAA,gBAAeA,gBAAe,UAAU,IAAI,CAAC,IAAI;AACrD,GAAG,mBAAmB,iBAAiB,CAAC,EAAE;AAInC,IAAI;AAAA,CACV,SAAUC,uBAAsB;AAC7B,EAAAA,sBAAqB,SAAS,IAAI;AAClC,EAAAA,sBAAqB,WAAW,IAAI;AACpC,EAAAA,sBAAqB,SAAS,IAAI;AACtC,GAAG,yBAAyB,uBAAuB,CAAC,EAAE;AAI/C,IAAI;AAAA,CACV,SAAUC,cAAa;AACpB,EAAAA,aAAYA,aAAY,gBAAgB,IAAI,CAAC,IAAI;AACjD,EAAAA,aAAYA,aAAY,cAAc,IAAI,CAAC,IAAI;AAC/C,EAAAA,aAAYA,aAAY,OAAO,IAAI,CAAC,IAAI;AAC5C,GAAG,gBAAgB,cAAc,CAAC,EAAE;AAI7B,IAAI;AAAA,CACV,SAAUC,YAAW;AAIlB,EAAAA,WAAU,SAAS,IAAI;AAIvB,EAAAA,WAAU,UAAU,IAAI;AACxB,EAAAA,WAAU,MAAM,IAAI;AACxB,GAAG,cAAc,YAAY,CAAC,EAAE;AACzB,IAAM,4BAA4B,CAAC,GAAG,MAAM;AAC/C,MAAI,KAAK,CAAC,KAAK,CAAC,KAAK;AACjB,WAAO;AACX,MAAI,CAAC,KAAK,CAAC;AACP,WAAO;AACX,SAAQ,EAAE,cAAc,EAAE,cAClB,EAAE,SAAS,SAAS,EAAE,SAAS,SAC3B,EAAE,SAAS,cAAc,EAAE,SAAS,cAAc,EAAE,eAAe,EAAE,cACrE,EAAE,SAAS,eAAe,EAAE,SAAS,eAAe,EAAE,kBAAkB,EAAE;AAC1F;AACO,IAAI;AAAA,CACV,SAAUC,yBAAwB;AAC/B,EAAAA,wBAAuB,OAAO,IAAI;AAClC,EAAAA,wBAAuB,KAAK,IAAI;AACpC,GAAG,2BAA2B,yBAAyB,CAAC,EAAE;;;AC9LnD,IAAM,WAAW,oBAAI,KAAK,OAAiB;AAI3C,IAAM,WAAW,oBAAI,KAAK,MAAgB;AAC1C,IAAM,eAAe,CAAC,SAAS;AAClC,MAAI,CAAC;AACD,WAAO;AACX,QAAM,OAAO,KAAK,QAAQ;AAC1B,SAAO,SAAS,SAAS,QAAQ,KAAK,SAAS,SAAS,QAAQ;AACpE;;;ACNO,IAAI;AAAA,CACV,SAAUC,gBAAe;AACtB,EAAAA,eAAcA,eAAc,MAAM,IAAI,CAAC,IAAI;AAC3C,EAAAA,eAAcA,eAAc,OAAO,IAAI,CAAC,IAAI;AAChD,GAAG,kBAAkB,gBAAgB,CAAC,EAAE;;;ACLjC,IAAI;AAAA,CACV,SAAUC,yBAAwB;AAI/B,EAAAA,wBAAuBA,wBAAuB,mBAAmB,IAAI,CAAC,IAAI;AAI1E,EAAAA,wBAAuBA,wBAAuB,mBAAmB,IAAI,CAAC,IAAI;AAI1E,EAAAA,wBAAuBA,wBAAuB,6BAA6B,IAAI,CAAC,IAAI;AAIpF,EAAAA,wBAAuBA,wBAAuB,iBAAiB,IAAI,CAAC,IAAI;AAC5E,GAAG,2BAA2B,yBAAyB,CAAC,EAAE;AAInD,IAAM,gBAAN,MAAoB;AAAA,EACvB,YAAY,QAAQ;AAChB,SAAK,uBAAuB;AAC5B,SAAK,qBAAqB;AAC1B,SAAK,gCAAgC;AACrC,SAAK,4BAA4B,SAAS;AAC1C,SAAK,uBAAuB;AAE5B,SAAK,WAAW,IAAI,MAAM,KAAK,KAAK,KAAK;AACzC,cAAU,OAAO,OAAO,MAAM,MAAM;AAAA,EACxC;AAAA,EACA,yBAAyB,OAAO,WAAW,SAAS;AAChD,UAAM,6BAA6B,WAAW,OAAO;AACrD,SAAK,cAAc,qBAAqB,MAAM,eAAe,WAAW,OAAO;AAAA,EACnF;AAAA;AAAA;AAAA;AAAA,EAIA,6BAA6B,WAAW,SAAS;AAC7C,UAAM,wBAAwB,KAAK,qBAAqB,QAAQ;AAChE,UAAM,sBAAsB,KAAK,mBAAmB,QAAQ;AAC5D,QAAI,0BAA0B,SAAS,QAAQ,GAAG;AAC9C,YAAM,aAAa,UAAU,QAAQ;AACrC,YAAM,WAAW,QAAQ,QAAQ;AACjC,UAAI,yBAAyB,cAAc,YAAY;AACnD;AAEJ,UAAI,YAAY,uBAAuB;AACnC,kBAAU,IAAI,KAAK,wBAAwB,CAAC;AAAA,MAChD,WACS,cAAc,qBAAqB;AACxC,oBAAY,IAAI,KAAK,mBAAmB;AAAA,MAC5C,WACS,yBAAyB,cAAc,cAAc,qBAAqB;AAC/E,oBAAY,IAAI,KAAK,sBAAsB,CAAC;AAAA,MAChD,WACS,yBAAyB,YAAY,YAAY,qBAAqB;AAC3E,kBAAU,IAAI,KAAK,wBAAwB,CAAC;AAAA,MAChD,OACK;AACD,aAAK,6BAA6B,WAAW,IAAI,KAAK,wBAAwB,CAAC,CAAC;AAChF,aAAK,6BAA6B,IAAI,KAAK,sBAAsB,CAAC,GAAG,OAAO;AAC5E;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,0BAA0B,SAAS,QAAQ,KAAK,UAAU,QAAQ,IAAI,qBAAqB;AAC3F,WAAK,uBAAuB;AAAA,IAChC;AACA,QAAI,wBAAwB,SAAS,QAAQ,KAAK,sBAAsB,QAAQ,QAAQ,GAAG;AACvF,WAAK,qBAAqB;AAAA,IAC9B;AACA,SAAK,UAAU,WAAW,OAAO;AAAA,EACrC;AAAA,EACA,UAAU,IAAoB,IAAkB;AAC5C,UAAM,IAAI,MAAM,iBAAiB;AAAA,EACrC;AAAA,EACA,QAAQ;AACJ,SAAK,uBAAuB;AAC5B,SAAK,qBAAqB;AAC1B,SAAK,cAAc,MAAM;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoBA,4BAA4B,SAAS,MAAM,OAAO;AA7GtD;AA8GQ,YAAQ,SAAS;AACjB,UAAM,YAAY,QAAQ;AAC1B,UAAM,UAAU,QAAQ;AACxB,UAAM,aAAa,aAAa,UAAU,QAAQ;AAClD,UAAM,WAAW,WAAW,QAAQ,QAAQ;AAC5C,UAAM,YAAW,aAAQ,aAAR,YAAoB,KAAK;AAE1C,UAAM,YAAY,QAAQ,cAAc;AACxC,QAAI,YAAY,CAAC,YAAY,CAAC,SAAS;AACnC,YAAM,IAAI,MAAM,sFAAsF;AAAA,IAC1G;AACA,UAAM,gBAAgB,KAAK;AAC3B,QAAI,kBAAkB,YAAY,YAAY;AAC9C,QAAI,aAAa,YAAY,YAAY;AACzC,UAAM,aAAa,WAAW,QAAQ;AAGtC,aAAS,QAAQ,GAAG,QAAQ,KAAK,sBAAsB,SAAS;AAC5D,UAAI,WAAW;AACX,aAAK,6BAA6B,iBAAiB,WAAW,WAAW,IAAI,iBAAiB,KAAK,+BAA+B,KAAK,yBAAyB,CAAC;AAAA,MACrK,OACK;AACD,aAAK,6BAA6B,aAAa,WAAW,IAAI,iBAAiB,CAAC,KAAK,+BAA+B,KAAK,yBAAyB,GAAG,eAAe;AAAA,MACxK;AACA,UAAI,WAAW,cAAc,cAAc,YAAY,YAAY,cAAc,OAAO,cAAc,KAAK;AAC3G,aAAO,UAAU;AACb,cAAM,oBAAoB,SAAS;AACnC,cAAM,kBAAkB,SAAS;AAEjC,YAAK,aAAa,YAAY,kBAAkB,QAAQ,KAAK,YAEpD,CAAC,aAAa,cAAc,gBAAgB,QAAQ,KAAK,YAAa;AAC3E,iBAAO,uBAAuB;AAAA,QAClC;AACA,YAAK,aAAa,kBAAkB,QAAQ,IAAI,cAAc,YAErD,CAAC,aAAa,aAAa,gBAAgB,QAAQ,KAAK,UAAW;AACxE,iBAAO,uBAAuB;AAAA,QAClC;AAKA,YAAK,aAAa,kBAAkB,QAAQ,KAAK,KAAK,mBAAmB,QAAQ,KAExE,CAAC,aAAa,gBAAgB,QAAQ,KAAK,KAAK,qBAAqB,QAAQ,GAAI;AACtF;AAAA,QACJ;AAEA,qBAAa,YAAY,kBAAkB;AAE3C,cAAM,YAAY,cAAc,kBAAkB,QAAQ,IAAI,aAAa,YAAY;AACvF,cAAM,YAAY,YAAY,gBAAgB,QAAQ,IAAI,WAAW,UAAU;AAC/E,YAAI,KAAK,KAAK,OAAO,WAAW,WAAW,SAAS,aAAa,MAAM,OAAO;AAE1E,iBAAO,uBAAuB;AAAA,QAClC;AACA,mBAAW,YAAY,cAAc,gBAAgB,QAAQ,IAAI,cAAc,gBAAgB,QAAQ;AAAA,MAC3G;AACA,UAAI,aAAa,WAAW,QAAQ,MAAM,SAAS,QAAQ,KAAK,CAAC,aAAa,WAAW,QAAQ,MAAM,SAAS,QAAQ,GAAG;AACvH,eAAO,uBAAuB;AAAA,MAClC;AACA,wBAAkB,YAAY,KAAK,qBAAqB,KAAK;AAAA,IACjE;AACA,WAAO,uBAAuB;AAAA,EAClC;AACJ;;;AChLO,IAAM,kBAAkB,CAAC,UAAU,MAAM,KAAK,IAAI,IAAI,KAAK,CAAC;;;ACK5D,IAAM,wBAAN,MAAM,uBAAsB;AAAA,EAC/B,YAAY,QAAQ;AAChB,SAAK,YAAY,CAAC;AAClB,cAAU,OAAO,OAAO,MAAM,MAAM;AACpC,QAAI,CAAC,KAAK;AACN,YAAM,IAAI,MAAM,0CAA0C;AAAA,EAClE;AAAA,EACA,gBAAgB,UAAU;AACtB,QAAI,KAAK,UAAU,QAAQ,QAAQ,KAAK,IAAI;AACxC,YAAM,OAAO,KAAK,UAAU,MAAM;AAClC,WAAK,KAAK,QAAQ;AAClB,aAAO,IAAI,uBAAsB,EAAE,WAAW,MAAM,UAAU,KAAK,SAAS,CAAC;AAAA,IACjF;AAEI,aAAO;AAAA,EACf;AAAA,EACA,YAAY,UAAU;AAClB,WAAO,IAAI,uBAAsB,EAAE,WAAW,KAAK,UAAU,OAAO,SAAS,SAAS,GAAG,UAAU,KAAK,SAAS,CAAC;AAAA,EACtH;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,eAAe;AACX,QAAI,KAAK,aAAa;AAClB,aAAO,KAAK;AAChB,UAAM,YAAY,KAAK,YAAY,KAAK,mBAAmB,KAAK,SAAS;AAEzE,WAAO,KAAK,YAAY,UAAU,CAAC,EAAE;AAAA,EACzC;AAAA,EACA,mBAAmB,WAAW;AAC1B,UAAM,WAAW,gBAAgB,SAAS;AAE1C,aAAS,KAAK,CAAC,WAAW,cAAc,UAAU,iBAAiB,IAAI,UAAU,iBAAiB,CAAC;AACnG,WAAO;AAAA,EACX;AACJ;;;ACxCO,IAAM,eAAe,CAAC,OAAO,OAAO,aAAa,CAAC,GAAG,MAAM,IAAI,MAAM;AACxE,MAAI,OAAO;AACX,MAAI,QAAQ,MAAM;AAClB,SAAO,OAAO,OAAO;AAEjB,UAAM,OAAO,OAAO,SAAS,IAAI;AACjC,UAAM,UAAU,WAAW,OAAO,MAAM,GAAG,CAAC;AAC5C,QAAI,YAAY;AACZ,aAAO,EAAE,OAAO,MAAM,OAAO,IAAI;AAAA,aAC5B,UAAU;AACf,cAAQ;AAAA;AAER,aAAO,MAAM;AAAA,EACrB;AACA,SAAO,EAAE,OAAO,OAAO,OAAO,MAAM;AACxC;;;ACfO,IAAI;AAAA,CACV,SAAUC,gBAAe;AACtB,EAAAA,eAAcA,eAAc,OAAO,IAAI,CAAC,IAAI;AAC5C,EAAAA,eAAcA,eAAc,MAAM,IAAI,CAAC,IAAI;AAC/C,GAAG,kBAAkB,gBAAgB,CAAC,EAAE;AACjC,IAAM,YAAN,MAAgB;AAAA,EACnB,YAAY,YAAY;AACpB,SAAK,OAAO,CAAC;AACb,SAAK,SAAS,CAAC;AACf,SAAK,aAAa,eAAe,CAAC,GAAG,MAAM,IAAI;AAAA,EACnD;AAAA,EACA,IAAI,KAAK,OAAO;AACZ,UAAM,SAAS,aAAa,KAAK,KAAK,MAAM,KAAK,UAAU;AAC3D,QAAI,OAAO,OAAO;AACd,WAAK,OAAO,OAAO,KAAK,IAAI;AAAA,IAChC,OACK;AACD,WAAK,KAAK,OAAO,OAAO,OAAO,GAAG,GAAG;AACrC,WAAK,OAAO,OAAO,OAAO,OAAO,GAAG,KAAK;AAAA,IAC7C;AACA,WAAO,OAAO;AAAA,EAClB;AAAA;AAAA,EAEA,SAAS,OAAO,KAAK,OAAO;AACxB,SAAK,KAAK,OAAO,OAAO,GAAG,GAAG;AAC9B,SAAK,OAAO,OAAO,OAAO,GAAG,KAAK;AAAA,EACtC;AAAA,EACA,WAAW,OAAO,OAAO;AACrB,SAAK,OAAO,KAAK,IAAI;AAAA,EACzB;AAAA,EACA,IAAI,KAAK;AACL,UAAM,SAAS,aAAa,KAAK,KAAK,MAAM,KAAK,UAAU;AAC3D,WAAO,OAAO,QAAQ,KAAK,OAAO,OAAO,KAAK,IAAI;AAAA,EACtD;AAAA,EACA,WAAW,OAAO;AACd,WAAO,QAAQ,KAAK,KAAK,SAAS,EAAE,KAAK,KAAK,KAAK,KAAK,GAAG,OAAO,KAAK,OAAO,KAAK,EAAE,IAAI;AAAA,EAC7F;AAAA,EACA,SAAS,OAAO;AACZ,WAAO,KAAK,KAAK,KAAK;AAAA,EAC1B;AAAA,EACA,WAAW,OAAO;AACd,WAAO,KAAK,OAAO,KAAK;AAAA,EAC5B;AAAA,EACA,OAAO,KAAK;AACR,UAAM,SAAS,aAAa,KAAK,KAAK,MAAM,KAAK,UAAU;AAC3D,QAAI,OAAO;AACP,WAAK,SAAS,OAAO,KAAK;AAAA,EAClC;AAAA,EACA,OAAO;AACH,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA,EACA,SAAS,OAAO;AACZ,SAAK,KAAK,OAAO,OAAO,CAAC;AACzB,SAAK,OAAO,OAAO,OAAO,CAAC;AAAA,EAC/B;AAAA,EACA,WAAW,KAAK;AACZ,UAAM,SAAS,aAAa,KAAK,KAAK,MAAM,KAAK,UAAU;AAC3D,WAAO;AAAA,MACH,OAAO,OAAO,QAAQ,cAAc,QAAQ,cAAc;AAAA,MAC1D,OAAO,OAAO;AAAA,IAClB;AAAA,EACJ;AAAA,EACA,IAAI,MAAM;AACN,UAAM,OAAO,KAAK;AAClB,UAAM,SAAS,KAAK;AACpB,UAAM,SAAS,CAAC;AAChB,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ;AAC7B,aAAO,KAAK,KAAK,OAAO,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;AAC3C,WAAO;AAAA,EACX;AAAA,EACA,gBAAgB;AACZ,WAAO,KAAK,IAAI,CAAC,OAAO,QAAQ;AAAE,aAAO,EAAE,OAAO,IAAI;AAAA,IAAG,CAAC;AAAA,EAC9D;AAAA,EACA,QAAQ;AACJ,SAAK,KAAK,SAAS;AACnB,SAAK,OAAO,SAAS;AAAA,EACzB;AACJ;;;AC3EO,IAAM,gBAAN,MAAoB;AAAA,EACvB,YAAY,QAAQ;AAChB,SAAK,SAAS,IAAI,UAAU,CAAC,GAAG,MAAM,EAAE,QAAQ,IAAI,EAAE,QAAQ,CAAC;AAC/D,SAAK,kBAAkB;AACvB,SAAK,mBAAmB;AACxB,WAAO,OAAO,MAAM,MAAM;AAC1B,QAAI,KAAK,kBAAkB,UAAa,CAAC,KAAK;AAC1C,YAAM,IAAI,MAAM,wDAAwD;AAC5E,SAAK,OAAO,IAAI,KAAK,iBAAiB,KAAK,aAAa;AAAA,EAC5D;AAAA,EACA,OAAO;AACH,WAAO,KAAK,OAAO,KAAK;AAAA,EAC5B;AAAA,EACA,QAAQ,MAAM;AACV,WAAO,KAAK,OAAO,WAAW,IAAI;AAAA,EACtC;AAAA,EACA,UAAU,OAAO;AACb,WAAO,KAAK,OAAO,SAAS,KAAK;AAAA,EACrC;AAAA,EACA,WAAW,OAAO;AACd,WAAO,KAAK,OAAO,WAAW,KAAK;AAAA,EACvC;AAAA,EACA,cAAc,MAAM,gBAAgB,cAAc,MAAM;AAEpD,QAAI,EAAE,OAAO,MAAM,IAAI,KAAK,QAAQ,IAAI;AACxC,QAAI;AACJ,QAAI,kBAAkB,cAAc,MAAM;AACtC,uBAAiB,UAAU,cAAc,QAAQ,QAAQ,QAAQ;AAAA,IACrE,OACK;AACD,uBAAiB,QAAQ;AAAA,IAC7B;AACA,WAAO,KAAK,8BAA8B,cAAc;AAAA,EAC5D;AAAA,EACA,gBAAgB,UAAU;AACtB,QAAI,SAAS,mBAAmB;AAC5B,aAAO;AACX,WAAO,KAAK,8BAA8B,SAAS,iBAAiB,CAAC;AAAA,EACzE;AAAA,EACA,gBAAgB,UAAU;AACtB,QAAI,SAAS,kBAAkB,KAAK,KAAK,IAAI;AACzC,aAAO;AACX,WAAO,KAAK,8BAA8B,SAAS,iBAAiB,CAAC;AAAA,EACzE;AAAA,EACA,8BAA8B,gBAAgB;AAC1C,WAAO;AAAA,MACH;AAAA,MACA,WAAW,KAAK,UAAU,cAAc;AAAA,MACxC,SAAS,iBAAiB,IAAI,KAAK,KAAK,IAAI,KAAK,UAAU,iBAAiB,CAAC,IAAI,KAAK;AAAA,MACtF,eAAe,KAAK,WAAW,cAAc;AAAA,IACjD;AAAA,EACJ;AAAA,EACA,YAAY,WAAW,SAAS,gBAAgB;AAC5C,UAAM,SAAS,KAAK;AAEpB,UAAM,EAAE,OAAO,MAAM,IAAI,OAAO,WAAW,SAAS;AACpD,QAAI;AACJ,QAAI;AACJ,QAAI,SAAS,cAAc,OAAO;AAC9B,YAAM,YAAY,eAAe,mBAAmB,OAAO,WAAW,KAAK,CAAC;AAC5E,aAAO,WAAW,OAAO,SAAS;AAClC,iBAAW,QAAQ;AAAA,IACvB,OACK;AACD,YAAM,YAAY,eAAe,mBAAmB,OAAO,WAAW,QAAQ,CAAC,CAAC;AAChF,aAAO,SAAS,OAAO,WAAW,SAAS;AAC3C,iBAAW,QAAQ;AAAA,IACvB;AACA,WAAO,WAAW,OAAO,KAAK,GAAG;AAC7B,YAAM,UAAU,OAAO,SAAS,QAAQ;AACxC,UAAI,QAAQ,QAAQ,KAAK,QAAQ,QAAQ;AACrC;AACJ,YAAM,YAAY,eAAe,mBAAmB,OAAO,WAAW,QAAQ,CAAC;AAC/E,aAAO,WAAW,UAAU,SAAS;AACrC;AAAA,IACJ;AACA,QAAI,aAAa,OAAO,KAAK,GAAG;AAC5B,aAAO,SAAS,OAAO,KAAK,GAAG,SAAS,KAAK,aAAa;AAAA,IAC9D,OACK;AACD,YAAM,UAAU,OAAO,SAAS,QAAQ;AACxC,UAAI,QAAQ,QAAQ,MAAM,QAAQ,QAAQ,GAAG;AAAA,MAI7C,OACK;AACD,eAAO,SAAS,UAAU,SAAS,gBAAgB;AAAA,MACvD;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,qBAAqB,eAAe,WAAW,SAAS;AACpD,QAAI,WAAW,cAAc,cAAc,SAAS;AACpD,WAAO,UAAU;AACb,WAAK,YAAY,SAAS,WAAW,SAAS,SAAS,sBAAoB,KAAK,mBAAmB,kBAAkB,SAAS,aAAa,CAAC;AAC5I,UAAI,SAAS,QAAQ,QAAQ,IAAI,QAAQ,QAAQ;AAC7C;AACJ,iBAAW,cAAc,gBAAgB,QAAQ;AAAA,IACrD;AAAA,EACJ;AAAA,EACA,aAAa;AACT,WAAO,KAAK,OAAO,IAAI,CAAC,OAAO,SAAS;AAAE,aAAO,EAAE,OAAO,KAAK;AAAA,IAAG,CAAC;AAAA,EACvE;AAAA,EACA,QAAQ;AACJ,SAAK,OAAO,MAAM;AAClB,SAAK,OAAO,IAAI,KAAK,iBAAiB,KAAK,aAAa;AAAA,EAC5D;AACJ;;;ACxGO,IAAM,sBAAN,cAAkC,cAAc;AAAA,EACnD,YAAY,QAAQ;AAChB,UAAM,MAAM;AACZ,SAAK,wBAAwB;AAC7B,QAAI,CAAC,KAAK;AACN,YAAM,IAAI,MAAM,yDAAyD;AAC7E,SAAK,gBAAgB,IAAI,cAAc;AAAA,MACnC,eAAe,IAAI,sBAAsB;AAAA,QACrC,WAAW,CAAC,KAAK,uBAAuB;AAAA,QACxC,UAAU,KAAK;AAAA,MACnB,CAAC;AAAA,MACD,oBAAoB,CAAC,WAAW,cAAc;AAC1C,eAAO,UAAU,YAAY,SAAS;AAAA,MAC1C;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EACA,UAAU,WAAW,SAAS;AAtBlC;AAuBQ,QAAI,CAAC,KAAK,uBAAuB;AAC7B,WAAK,qBAAqB;AAC1B,WAAK,wBAAwB;AAAA,IACjC;AACA,QAAI,KAAK;AACL,WAAK,yBAAyB,KAAK,aAAa,WAAW,OAAO;AACtE,UAAM,aAAa,UAAU,QAAQ;AACrC,UAAM,WAAW,QAAQ,QAAQ;AACjC,UAAM,WAAW,KAAK,SAAS,iBAAiB,QAAO,UAAK,SAAS,YAAd,mBAAuB;AAC9E,QAAI,aAAa;AACb,YAAM,IAAI,MAAM,6BAA6B;AACjD,UAAM,QAAQ,cAAM;AACpB,SAAK,yBAAyB,cAAY;AACtC,YAAM,gBAAgB,SAAS,qBAAqB;AACpD,YAAM,cAAc,SAAS,mBAAmB;AAChD,UAAI,oBAAoB,cAAc,KAAK,GAAG,SAAS;AACvD,UAAI;AACJ,UAAI,gBAAgB,OAAO;AACvB,cAAM,cAAc,cAAc,KAAK,GAAG,OAAO;AACjD,YAAI,gBAAgB,OAAO;AACvB,4BAAkB,WAAW,kBAAkB,aAAa,IAAI;AAAA,QACpE,OACK;AACD,4BAAkB;AAAA,QACtB;AAAA,MACJ,OACK;AACD,0BAAkB,YAAY,KAAK,GAAG,OAAO;AAAA,MACjD;AAGA,UAAI,sBAAsB,SAAS,kBAAkB,QAAQ,MAAM,YAAY;AAC3E,cAAM,qBAAqB,cAAc,KAAK,GAAG,SAAS;AAC1D,YAAI,uBAAuB,SAAS,mBAAmB,WAAW;AAC9D,8BAAoB,mBAAmB,CAAC;AAAA,MAChD;AACA,UAAI,oBAAoB,SAAS,gBAAgB,QAAQ,MAAM,UAAU;AACrE,cAAM,mBAAmB,YAAY,KAAK,GAAG,OAAO;AACpD,YAAI,qBAAqB,SAAS,iBAAiB,WAAW;AAC1D,4BAAkB,iBAAiB,CAAC;AAAA,MAC5C;AACA,YAAM,aAAa,cAAc,KAAK,UAAU,sBAAsB,QAAQ,oBAAoB,WAAW,oBAAoB,QAAQ,IAAI,KAAK,gBAAgB,QAAQ,IAAI,CAAC,IAAI,OAAO;AAE1L,UAAI,eAAe;AACf;AAEJ,YAAM,WAAW,gBAAgB,QAC3B,WAAW,IAAI,UAAQ,WAAW,kBAAkB,MAAM,IAAI,CAAC,IAC/D,YAAY,KAAK,UAAU,IAAI,KAAK,WAAW,CAAC,EAAE,QAAQ,IAAI,CAAC,GAAG,oBAAoB,QAAQ,kBAAkB,OAAO;AAC7H,UAAI,aAAa;AACb;AACJ,UAAI,SAAS,SAAS,WAAW,QAAQ;AAErC,iBAAS,SAAS,WAAW;AAAA,MACjC,WACS,SAAS,SAAS,WAAW,QAAQ;AAE1C,mBAAW,SAAS,SAAS;AAAA,MAEjC;AACA,iBAAW,QAAQ,CAACC,YAAW,UAAU;AACrC,YAAI,eAAeA;AACnB,YAAI,aAAa,SAAS,KAAK;AAE/B,YAAI,YAAY,MAAM;AAClB,yBAAe,eAAe,WAAW,cAAc,QAAQ;AAC/D,uBAAa,eAAe,WAAW,YAAY,QAAQ;AAAA,QAC/D;AAGA,aAAK,cAAc,YAAY,cAAc,YAAY,2BAAyB,sBAAsB,gBAAgB,QAAQ,CAAC;AAAA,MACrI,CAAC;AAAA,IACL,CAAC;AAAA,EACL;AAAA,EACA,QAAQ;AACJ,SAAK,wBAAwB;AAC7B,UAAM,MAAM;AAAA,EAChB;AAAA,EACA,uBAAuB;AACnB,SAAK,sBAAsB,cAAY;AAtG/C;AAuGY,YAAM,YAAW,UAAK,SAAS,YAAd,mBAAuB;AACxC,UAAI,EAAE,WAAW,QAAQ,IAAI;AAE7B,UAAI,YAAY,MAAM;AAClB,oBAAY,eAAe,WAAW,WAAW,QAAQ;AACzD,kBAAU,eAAe,WAAW,SAAS,QAAQ;AAAA,MACzD;AACA,WAAK,cAAc,YAAY,WAAW,SAAS,2BAAyB,sBAAsB,gBAAgB,QAAQ,CAAC;AAAA,IAC/H,CAAC;AAAA,EACL;AAAA,EACA,sBAAsB,MAAM;AACxB,SAAK,cAAc,QAAQ,CAAC,aAAa;AACrC,UAAI,SAAS,SAAS;AAClB,aAAK,QAAQ;AAAA,IACrB,CAAC;AAAA,EACL;AAAA,EACA,yBAAyB,MAAM;AAC3B,SAAK,cAAc,QAAQ,CAAC,aAAa;AACrC,UAAI,SAAS,YAAY;AACrB,aAAK,QAAQ;AAAA,IACrB,CAAC;AAAA,EACL;AACJ;;;AC1HO,IAAM,+BAAN,cAA2C,MAAM,CAAC,qBAAqB,GAAG,CAAC,SAAS;AACvF,QAAM,aAAa,KAAK;AAAA,EACxB,MAAMC,sCAAqC,KAAK;AAAA,IAC5C,cAAc;AACV,aAAO,KAAK;AAAA,IAChB;AAAA;AAAA,IAEA,mBAAmB;AACf,UAAI,KAAK,iBAAiB;AACtB,eAAO,KAAK;AAChB,aAAO,KAAK,gBAAgB,KAAK,YAAY,EAAE,SAAS;AAAA,IAC5D;AAAA,EACJ;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;ACJO,IAAM,wBAAN,cAAoC,MAAM,CAAC,+BAA+B,GAAG,CAAC,SAAS;AAC1F,QAAM,aAAa,KAAK;AAAA,EACxB,MAAM,sBAAsB,KAAK;AAAA,IAC7B,cAAc;AACV,YAAM,GAAG,SAAS;AAClB,WAAK,UAAU;AAAA,IACnB;AAAA,IACA,WAAW,SAAS;AAChB,aAAO;AAAA,QACH,EAAE,MAAM,WAAW,MAAM,SAAS;AAAA,QAClC;AAAA,QACA,EAAE,MAAM,4BAA4B,MAAM,WAAW,cAAc,KAAK;AAAA,QACxE,EAAE,MAAM,aAAa,MAAM,SAAS,UAAU,KAAK;AAAA,QACnD;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,IACA,IAAI,qBAAqB;AACrB,aAAO;AAAA,IACX;AAAA,IACA,IAAI,gBAAgB;AAEhB,aAAO,KAAK,KAAK;AAAA,IACrB;AAAA;AAAA,IAEA,mBAAmB,QAAQ;AACvB,aAAO,aAAa,KAAK;AAEzB,aAAO,aAAa,KAAK,wBAAwB,EAAE,8BAA8B,KAAK,mBAAmB,cAAc;AACvH,aAAO,WAAW;AAAA,IACtB;AAAA;AAAA;AAAA,IAGA,0BAA0B,WAAW;AACjC,WAAK,YAAY;AAAA,IACrB;AAAA,IACA,YAAY;AACR,YAAM,UAAU,KAAK,WAAW;AAChC,UAAI,SAAS;AACT,eAAO,SAAS,QAAQ;AAAA,MAC5B;AACA,aAAO;AAAA,IACX;AAAA,IACA,WAAW;AACP,aAAO,KAAK,aAAa;AAAA,IAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAiBA,4BAA4B,SAAS,MAAM,OAAO;AA5E1D;AA6EY,YAAM,YAAW,aAAQ,aAAR,aAAoB,UAAK,WAAW,MAAhB,mBAAmB;AACxD,UAAI,UAAU;AACV,kBAAU,EAAE,GAAG,SAAS,SAAS;AAAA,MACrC;AACA,aAAO,KAAK,cAAc,4BAA4B,SAAS,MAAM,KAAK;AAAA,IAC9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAcA,sBAAsB,MAAM,YAAY,WAAW;AAhG3D;AAkGY,UAAI,eAAe;AACf,eAAO,EAAE,WAAW,IAAI,KAAK,IAAI,GAAG,uBAAuB,EAAE;AACjE,UAAI,MAAM,UAAU;AAChB,cAAM,IAAI,MAAM,kBAAkB;AACtC,UAAI,YAAY;AAChB,YAAM,uBAAsB,sBAAK,WAAW,MAAhB,mBAAmB,wBAAnB,YAA0C,KAAK,wBAA/C,YAAsE;AAClG,WAAK,4BAA4B,YAAY,EAAE,WAAW,MAAM,WAAW,KAAK,IAAI,EAAE,SAAS,MAAM,WAAW,MAAM,GAAG,CAAC,mBAAmB,iBAAiB,0BAA0B;AACpL,YAAI,SAAS;AACb,YAAI,sBAAsB,aAAa,GAAG;AACtC,cAAI,OAAO,gBAAgB,QAAQ,IAAI,kBAAkB,QAAQ;AACjE,cAAI,cAAc,MAAM;AACpB,gBAAI,qBAAqB;AACrB,oBAAM,UAAU,YACV,kBAAkB,kBAAkB,IAAK,IAAI,KAAK,kBAAkB,QAAQ,IAAI,UAAU,EAAG,kBAAkB,IAC9G,IAAI,KAAK,gBAAgB,QAAQ,IAAI,UAAU,EAAG,kBAAkB,IAAI,gBAAgB,kBAAkB;AACjH,4BAAc,UAAU,KAAK;AAAA,YACjC;AACA,wBAAY,YACN,IAAI,KAAK,kBAAkB,QAAQ,IAAI,UAAU,IACjD,IAAI,KAAK,gBAAgB,QAAQ,IAAI,UAAU;AACrD,yBAAa;AACb,qBAAS;AAAA,UACb,OACK;AACD,gBAAI,qBAAqB;AACrB,oBAAM,UAAU,kBAAkB,kBAAkB,IAAI,gBAAgB,kBAAkB;AAC1F,sBAAQ,UAAU,KAAK;AAAA,YAC3B;AACA,wBAAY,YAAY,kBAAkB;AAC1C,0BAAc;AAAA,UAClB;AAAA,QACJ;AACA,eAAO;AAAA,MACX,CAAC;AACD,aAAO,EAAE,WAAW,IAAI,KAAK,SAAS,GAAG,uBAAuB,WAAW;AAAA,IAC/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA,oBAAoB,WAAW,SAAS,gBAAgB,OAAO;AA9IvE;AA+IY,UAAI,WAAW;AACf,YAAM,aAAa,UAAU,QAAQ,KAAK,QAAQ,QAAQ,KAAK,CAAC,gBAAgB,IAAI;AACpF,UAAI,aAAa,GAAG;AAChB,SAAC,WAAW,OAAO,IAAI,CAAC,SAAS,SAAS;AAAA,MAC9C;AACA,YAAM,uBAAsB,sBAAK,WAAW,MAAhB,mBAAmB,wBAAnB,YAA0C,KAAK,wBAA/C,YAAsE;AAClG,WAAK,4BAA4B,EAAE,WAAsB,QAAiB,GAAG,CAAC,mBAAmB,iBAAiB,0BAA0B;AACxI,YAAI,sBAAsB,aAAa,GAAG;AACtC,sBAAY,gBAAgB,QAAQ,IAAI,kBAAkB,QAAQ;AAClE,cAAI,qBAAqB;AACrB,kBAAM,UAAU,kBAAkB,kBAAkB,IAAI,gBAAgB,kBAAkB;AAC1F,wBAAY,UAAU,KAAK;AAAA,UAC/B;AAAA,QACJ;AAAA,MACJ,CAAC;AACD,aAAO,WAAW;AAAA,IACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,iBAAiB,WAAW,YAAY;AAEpC,YAAM,YAAY,cAAc;AAChC,YAAM,MAAM,KAAK,sBAAsB,WAAW,KAAK,IAAI,UAAU,GAAG,SAAS;AACjF,aAAO,IAAI,0BAA0B,IAAI,IAAI,YAAY;AAAA,IAC7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,mBAAmB,SAAS,YAAY;AAEpC,YAAM,YAAY,cAAc;AAChC,YAAM,MAAM,KAAK,sBAAsB,SAAS,KAAK,IAAI,UAAU,GAAG,SAAS;AAC/E,aAAO,IAAI,0BAA0B,IAAI,IAAI,YAAY;AAAA,IAC7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,mBAAmB,MAAM,YAAY,MAAM;AACvC,UAAI;AACJ,YAAM,MAAM,KAAK,4BAA4B,YAAY,EAAE,WAAW,MAAM,WAAW,KAAK,IAAI,EAAE,SAAS,MAAM,WAAW,MAAM,GAAG,CAAC,mBAAmB,iBAAiB,0BAA0B;AAChM,YAAI,sBAAsB,aAAa,GAAG;AACtC,wBAAc,YAAY,oBAAoB;AAC9C,iBAAO;AAAA,QACX;AAAA,MACJ,CAAC;AACD,UAAI,QAAQ,uBAAuB,mBAAmB,QAAQ,uBAAuB;AACjF,eAAO;AACX,aAAO,cAAc,IAAI,KAAK,WAAW,IAAI,IAAI,KAAK,IAAI;AAAA,IAC9D;AAAA;AAAA;AAAA;AAAA,IAIA,YAAY,UAAU;AAClB,aAAO,KAAK,aAAa,CAAC,QAAQ,CAAC;AAAA,IACvC;AAAA;AAAA;AAAA;AAAA,IAIA,aAAa,WAAW;AACpB,WAAK,YAAY;AACjB,aAAO,KAAK,cAAc,IAAI,SAAS;AAAA,IAC3C;AAAA;AAAA;AAAA;AAAA,IAIA,eAAe,UAAU;AACrB,aAAO,KAAK,gBAAgB,CAAC,QAAQ,CAAC;AAAA,IAC1C;AAAA;AAAA;AAAA;AAAA,IAIA,gBAAgB,WAAW;AACvB,WAAK,YAAY;AACjB,aAAO,KAAK,cAAc,OAAO,SAAS;AAAA,IAC9C;AAAA;AAAA;AAAA;AAAA,IAIA,eAAe,QAAQ;AACnB,UAAI,CAAC,QAAQ;AACT,aAAK,YAAY;AAAA,MACrB;AACA,aAAO,KAAK,cAAc,UAAU,MAAM;AAAA,IAC9C;AAAA,IACA,cAAc;AACV,WAAK,WAAW;AAChB,WAAK;AAAA,IACT;AAAA,IACA,IAAI,gBAAgB;AAChB,UAAI,KAAK,mBAAmB;AACxB,eAAO,KAAK;AAChB,YAAM,0BAA0B,IAAI,6BAA6B;AAAA,QAC7D,WAAW,KAAK;AAAA,MACpB,CAAC;AACD,8BAAwB,WAAW;AACnC,aAAO,KAAK,iBAAiB,IAAI,oBAAoB;AAAA,QACjD,UAAU;AAAA,QACV;AAAA,QACA,eAAe,KAAK;AAAA,QACpB,aAAa,KAAK,UAAU,CAAC,KAAK,OAAO,SAAS,KAAK,OAAO,gBAAgB;AAAA,MAClF,CAAC;AAAA,IACL;AAAA,IACA,aAAa;AAET,WAAK,kBAAkB,KAAK,eAAe,MAAM;AACjD,WAAK,iBAAiB;AAAA,IAC1B;AAAA,IACA,8BAA8B;AAC1B,WAAK,SAAS,CAAC,aAAa;AACxB,iBAAS,cAAc,QAAQ,CAAC,aAAa,SAAS,cAAc,CAAC;AAAA,MACzE,CAAC;AAAA,IACL;AAAA,IACA,YAAY,OAAO,QAAQ,QAAQ;AAC/B,UAAI,MAAM,WAAW,YAAY,KAAK,MAAM,GAAG,SAAS;AACxD,UAAI,CAAC,MAAM,QAAQ,GAAG,GAAG;AACrB,cAAM,CAAC,GAAG;AAAA,MACd;AAEA,UAAI,QAAQ,CAAC,MAAM;AACf,UAAE,YAAY;AACd,UAAE,4BAA4B;AAAA,MAClC,CAAC;AACD,aAAO;AAAA,IACX;AAAA,IACA,cAAc;AACV,iBAAW,YAAY,KAAK,IAAI;AAChC,WAAK,cAAc,WAAW,KAAK,WAAW,CAAC;AAAA,IACnD;AAAA,IACA,eAAe;AACX,iBAAW,aAAa,KAAK,IAAI;AACjC,WAAK,cAAc,WAAW,IAAI;AAClC,WAAK,WAAW;AAAA,IACpB;AAAA,IACA,YAAY;AACR,WAAK,aAAa;AAClB,WAAK,cAAc,QAAQ;AAC3B,YAAM,UAAU;AAAA,IACpB;AAAA,IACA,aAAa,KAAK;AACd,YAAM,YAAY,WAAW,UAAU,GAAG,GAAG,UAAU,WAAW,QAAQ,KAAK,SAAS,GAAG;AAC3F,UAAI,iBAAiB;AACrB,WAAK,4BAA4B,EAAE,WAAW,SAAS,WAAW,KAAK,GAAG,CAAC,oBAAoB,kBAAkB,0BAA0B;AACvI,yBAAiB,sBAAsB,aAAa;AACpD,eAAO,CAAC;AAAA,MACZ,CAAC;AACD,aAAO,CAAC;AAAA,IACZ;AAAA,IACA,uBAAuB,WAAW,SAAS;AACvC,YAAM,SAAS,CAAC;AAChB,kBAAY,WAAW,UAAU,SAAS;AAC1C,aAAO,YAAY,SAAS;AACxB,YAAI,KAAK,aAAa,SAAS,GAAG;AAC9B,iBAAO,KAAK;AAAA,YACR;AAAA,YACA,SAAS,WAAW,kBAAkB,WAAW,MAAM,IAAI;AAAA,UAC/D,CAAC;AAAA,QACL;AACA,oBAAY,WAAW,QAAQ,WAAW,SAAS,GAAG;AAAA,MAC1D;AACA,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,qBAAqB,WAAW,SAAS,UAAU;AAC/C,YAAM,SAAS,CAAC;AAChB,WAAK,4BAA4B,EAAE,WAAW,SAAS,WAAW,MAAM,SAAS,GAAG,CAAC,mBAAmB,iBAAiB,0BAA0B;AAC/I,YAAI,sBAAsB,aAAa,GAAG;AACtC,gBAAM,QAAQ,sBAAsB,UAAU,CAAC;AAC/C,iBAAO,KAAK;AAAA,YACR,MAAM,MAAM;AAAA,YACZ,WAAW;AAAA,YACX,SAAS;AAAA,UACb,CAAC;AAAA,QACL;AAAA,MACJ,CAAC;AACD,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,wBAAwB,WAAW,SAAS,UAAU;AAClD,YAAM,SAAS,CAAC;AAChB,WAAK,4BAA4B,EAAE,WAAW,SAAS,WAAW,MAAM,SAAS,GAAG,CAAC,mBAAmB,iBAAiB,0BAA0B;AAC/I,YAAI,CAAC,sBAAsB,aAAa,GAAG;AACvC,gBAAM,QAAQ,sBAAsB,UAAU,CAAC;AAC/C,iBAAO,KAAK;AAAA,YACR,MAAM,MAAM;AAAA,YACZ,SAAS,MAAM;AAAA,YACf,KAAK,MAAM;AAAA,YACX,WAAW;AAAA,YACX,SAAS;AAAA,UACb,CAAC;AAAA,QACL;AAAA,MACJ,CAAC;AACD,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,cAAc,WAAW,SAAS,gBAAgB;AAC9C,UAAI,gBAAgB;AAChB,YAAI;AACJ,cAAM,MAAM,KAAK,4BAA4B,EAAE,WAAW,SAAS,WAAW,KAAK,GAAG,CAAC,mBAAmB,iBAAiB,0BAA0B;AACjJ,cAAI,sBAAsB,aAAa,KAAK,qBAAqB,aAAa,mBAAmB,SAAS;AACtG,oBAAQ;AACR,mBAAO;AAAA,UACX;AAAA,QACJ,CAAC;AACD,YAAI,QAAQ,uBAAuB,mBAAmB,QAAQ,uBAAuB;AACjF,iBAAO;AACX,eAAO;AAAA,MACX,OACK;AAED,cAAM,mBAAmB,KAAK,mBAAmB,SAAS;AAC1D,eAAO,oBAAoB,qBAAqB,mBAAoB,UAAU,mBAAmB,UAAU,iBAAiB,QAAQ,MAAM,UAAU,QAAQ,IAAK;AAAA,MACrK;AAAA,IACJ;AAAA,EACJ;AACA,SAAO;AACX,CAAC,EAAE;AACH;;;AC1XO,IAAM,oBAAN,cAAgC,MAAM,CAAC,uBAAuB,2BAA2B,GAAG,CAAC,SAAS;AACzG,QAAM,aAAa,KAAK;AAAA,EACxB,MAAMC,2BAA0B,KAAK;AAAA,EACrC;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;ACTO,IAAM,oCAAN,cAAgD,MAAM,CAAC,+BAA+B,GAAG,CAAC,SAAS;AACtG,QAAM,aAAa,KAAK;AAAA,EACxB,MAAMC,2CAA0C,KAAK;AAAA;AAAA,IAEjD,YAAY;AATpB;AAUY,YAAM,UAAU,CAAC;AAEjB,UAAI,GAAC,UAAK,aAAL,mBAAe,cAAa;AAC7B,aAAK,SAAS,YAAU,QAAQ,KAAK,MAAM,CAAC;AAAA,MAChD;AACA,YAAM,UAAU;AAChB,cAAQ,QAAQ,YAAU,OAAO,QAAQ,CAAC;AAAA,IAC9C;AAAA,EACJ;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;ACdO,IAAM,gCAAN,cAA4C,MAAM,CAAC,mCAAmC,2BAA2B,GAAG,CAAC,SAAS;AACjI,QAAM,aAAa,KAAK;AAAA,EACxB,MAAMC,uCAAsC,KAAK;AAAA,IAC7C,WAAW,gBAAgB;AACvB,aAAO;AAAA,QACH,MAAM;AAAA,QACN,YAAY;AAAA,MAChB;AAAA,IACJ;AAAA,EACJ;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;ACfO,IAAM,gBAAN,cAA4B,MAAM,CAAC,GAAG,cAAM,EAAE;AACrD;AACO,IAAM,mBAAN,cAA+B,MAAM,CAAC,GAAG,iBAAS,EAAE;AAC3D;AAOO,IAAM,uBAAN,cAAmC,MAAM;AAAA,EAC5C;AAAA,EACA;AAAA,EACA;AACJ,GAAG,CAAC,SAAS;AACT,QAAM,aAAa,KAAK;AAAA,EACxB,MAAMC,8BAA6B,KAAK;AAAA,IACpC,cAAc;AACV,YAAM,GAAG,SAAS;AAClB,WAAK,kBAAkB;AAAA,IAC3B;AAAA,IACA,IAAI,uBAAuB;AACvB,aAAO;AAAA,IACX;AAAA,IACA,IAAI,kBAAkB;AAClB,aAAO,CAAC,KAAK,4BAA4B,KAAK;AAAA,IAClD;AAAA,IACA,UAAU,SAAS,CAAC,GAAG;AAWnB,WAAK,2BAA2B;AAChC,WAAK,sBAAsB;AAC3B,WAAK,gBAAgB;AACrB,WAAK,wBAAwB;AAC7B,YAAM,uBAAwB,0BAA0B,SAAU,OAAO,uBAAuB;AAChG,YAAM,sBAAuB,yBAAyB,SAAU,OAAO,sBAAsB;AAE7F,WAAK,mBAAoB,sBAAsB,SAAU,OAAO,mBAAmB;AAEnF,aAAO,OAAO;AACd,aAAO,OAAO;AACd,aAAO,OAAO;AACd,iBAAW,UAAU,KAAK,MAAM,MAAM;AACtC,WAAK,uBAAuB;AAC5B,WAAK,sBAAsB;AAAA,IAC/B;AAAA;AAAA,IAEA,gBAAgB,OAAO;AAAA,IAAE;AAAA;AAAA,IAEzB,oBAAoB;AAAA,IAAE;AAAA,IACtB,+BAA+B,SAAS,MAAM,MAAM;AAEhD,WAAK,GAAG,IAAI;AAAA,IAChB;AAAA;AAAA,IAEA,YAAY,OAAO;AAAA,IAAE;AAAA;AAAA,IAErB,YAAY,OAAO;AAAA,IAAE;AAAA,IACrB,MAAM,cAAc;AAChB,YAAM,IAAI,MAAM,wBAAwB;AAAA,IAC5C;AAAA;AAAA,IAEA,gBAAgB;AACZ,YAAM,IAAI,MAAM,wBAAwB;AAAA,IAC5C;AAAA,IACA,SAAS;AACL,YAAM,IAAI,MAAM,wBAAwB;AAAA,IAC5C;AAAA,EACJ;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;AChEO,IAAMC,oBAAN,cAA+B,MAAM,CAAC,GAAG,iBAAS,EAAE;AAC3D;AAKO,IAAM,4BAAN,cAAwC,MAAM;AAAA,EACjD;AAAA,EACA;AAAA,EACAA;AAAA,EACA;AACJ,GAAG,CAAC,SAAS;AACT,QAAM,aAAa,KAAK;AAAA,EACxB,MAAMC,mCAAkC,KAAK;AAAA,IACzC,WAAW,eAAe;AACtB,aAAO;AAAA,QACH,KAAK,CAAC;AAAA,QACN,YAAY,CAAC;AAAA,QACb,iBAAiB,CAAC;AAAA,QAClB,eAAe,CAAC;AAAA,QAChB,iBAAiB,CAAC;AAAA,QAClB,sBAAsB,CAAC;AAAA,QACvB,iBAAiB;AAAA,QACjB,sBAAsB;AAAA,QACtB,oBAAoB;AAAA,QACpB,sBAAsB;AAAA,QACtB,oBAAoB;AAAA,QACpB,iBAAiB;AAAA,QACjB,sBAAsB;AAAA,QACtB,oBAAoB;AAAA,QACpB,sBAAsB;AAAA,QACtB,2BAA2B;AAAA,QAC3B,iBAAiB;AAAA,QACjB,eAAe;AAAA,QACf,kBAAkB;AAAA,QAClB,YAAY;AAAA,QACZ,eAAe;AAAA,MACnB;AAAA,IACJ;AAAA;AAAA;AAAA,IAGA,UAAU,SAAS,CAAC,GAAG;AA5D/B;AA6DY,YAAM,KAAK;AAEX,SAAG,eAAe,oBAAI,IAAI;AAU1B,SAAG,qBAAqB;AACxB,SAAG,uBAAuB;AAC1B,SAAG,UAAU,QAAQ,QAAQ;AAC7B,UAAI,OAAO,cAAc,CAAC,OAAO,iBAAiB;AAC9C,cAAM,aAAa,OAAO,WAAW,eAAe,OAAO;AAI3D,cAAM,kBAAkB,WAAW,qBAAmB,gBAAW,gBAAX,mBAAwB;AAE9E,YAAI,mDAAiB,mBAAmB;AACpC,iBAAO,kBAAkB;AACzB,aAAG,2BAA2B;AAAA,QAClC;AAAA,MACJ;AACA,iBAAW,UAAU,KAAK,IAAI,MAAM;AAEpC,SAAG,kBAAkB,IAAI,GAAG,qBAAqB,WAAW;AAAA,QACxD,0BAA0B,GAAG;AAAA,MACjC,CAAC;AACD,SAAG,gBAAgB,UAAU;AAC7B,YAAM,EAAE,eAAe,YAAY,kBAAkB,eAAe,gBAAgB,IAAI;AACxF,YAAM,gBAAgB,QAAQ,iBAAiB,cAAc,oBAAoB,iBAAiB,eAAe;AACjH,UAAI,eAAe;AACf,WAAG,eAAe;AAAA,UACd;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACJ,CAAC;AACD,eAAO,GAAG;AACV,eAAO,GAAG;AACV,eAAO,GAAG;AACV,eAAO,GAAG;AACV,eAAO,GAAG;AAAA,MACd,OACK;AAED,WAAG,oBAAoB;AAAA,MAC3B;AAAA,IACJ;AAAA,IACA,YAAY;AAnHpB;AAoHY,YAAM,KAAK;AACX,eAAG,eAAH,mBAAe;AACf,eAAG,oBAAH,mBAAoB;AACpB,eAAG,oBAAH,mBAAoB;AACpB,eAAG,kBAAH,mBAAkB;AAClB,eAAG,yBAAH,mBAAyB;AACzB,SAAG,gBAAgB,QAAQ;AAC3B,eAAG,QAAH,mBAAQ;AACR,iBAAW,UAAU,KAAK,IAAI;AAAA,IAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,MAAM,eAAe,MAAM;AACvB,YAAM,KAAK;AACX,SAAG,sBAAsB;AACzB,UAAI,KAAK,eAAe;AACpB,WAAG,qBAAqB,OAAO,KAAK;AAAA,MACxC;AACA,UAAI,KAAK,eAAe;AACpB,WAAG,cAAc,OAAO,KAAK;AAAA,MACjC;AACA,UAAI,KAAK,iBAAiB;AACtB,WAAG,gBAAgB,OAAO,KAAK;AAAA,MACnC;AACA,UAAI,KAAK,YAAY;AACjB,WAAG,WAAW,OAAO,KAAK;AAAA,MAC9B;AACA,UAAI,KAAK,WAAW;AAChB,WAAG,WAAW,OAAO,KAAK;AAAA,MAC9B;AACA,UAAI,KAAK,kBAAkB;AACvB,WAAG,gBAAgB,OAAO,KAAK;AAAA,MACnC;AACA,YAAM,GAAG,WAAW;AACpB,SAAG,sBAAsB;AACzB;AAAA,IACJ;AAAA;AAAA;AAAA,IAGA,MAAM,aAAa;AACf,YAAM,KAAK,YAAY;AAEvB,UAAI,CAAC,KAAK;AACN,aAAK,QAAQ,MAAM;AAAA,IAC3B;AAAA,IACA,iBAAiB,OAAO;AACpB,YAAMC,MAAK,CAAC,WAAW;AACnB,eAAO,WAAW,IAAI;AACtB,eAAO,YAAY;AAAA,MACvB;AACA,UAAI,MAAM,UAAU;AAChB,cAAM,SAAS,SAASA,GAAE;AAAA,MAC9B,OACK;AACD,cAAM,QAAQA,GAAE;AAAA,MACpB;AAAA,IACJ;AAAA,IACA,mBAAmB,OAAO;AACtB,YAAMA,MAAK,CAAC,WAAW;AACnB,eAAO,aAAa;AACpB,eAAO,WAAW,IAAI;AAAA,MAC1B;AACA,UAAI,MAAM,UAAU;AAChB,cAAM,SAAS,SAAS,UAAQ;AAE5B,cAAI,SAAS,MAAM;AACf,YAAAA,IAAG,IAAI;AAAA,QACf,CAAC;AAAA,MACL,OACK;AACD,cAAM,QAAQA,GAAE;AAAA,MACpB;AAAA,IACJ;AAAA;AAAA;AAAA,IAGA,0BAA0B,MAAM,QAAQ;AAEpC,YAAM,cAAa,iCAAQ,eAAc,KAAK,GAAG,IAAI,YAAY;AAEjE,UAAI,aAAa,iCAAQ;AACzB,UAAI,CAAC,YAAY;AAGb,YAAI,KAAK,wBAAwB,EAAE,GAAG,IAAI,YAAY,MAAM,WAAW,wBAAwB,EAAE,YAAY;AACzG,uBAAa,WAAW,wBAAwB,EAAE;AAAA,QACtD,OAEK;AACD,uBAAa,KAAK,GAAG,IAAI,YAAY;AAAA,QACzC;AAAA,MACJ;AACA,aAAO,EAAE,YAAY,WAAW;AAAA,IACpC;AAAA,IACA,cAAc,YAAY;AACtB,WAAK,aAAa;AAAA,IACtB;AAAA,IACA,iBAAiB,YAAY,UAAU;AACnC,YAAM,KAAK,MAAM,EAAE,IAAI,IAAI;AAC3B,SAAG,YAAY,QAAQ;AACvB,UAAI,EAAE,sBAAsB,QAAQ;AAChC,cAAM,EAAE,YAAY,WAAW,IAAI,GAAG,0BAA0B,SAAS,UAAU;AACnF,qBAAa,IAAI,WAAW,aAAa,OAAO;AAAA,UAC5C;AAAA,UACA,SAAS;AAAA,UACT;AAAA,QACJ,GAAG,UAAU,CAAC;AAAA,MAClB,OACK;AACD,mBAAW,UAAU;AACrB,YAAI,SAAS,UAAU;AACvB,WAAG,iBAAiB,UAAU;AAAA,MAClC;AACA,UAAI,YAAY,IAAI,SAAS,QAAQ,GAAG;AACpC,YAAI,YAAY,QAAQ;AACxB,WAAG,mBAAmB,QAAQ;AAC9B,cAAM,EAAE,sBAAsB,IAAI;AAElC,8BAAsB,QAAQ,gBAAc;AACxC,gBAAM,WAAW,WAAW;AAC5B,cAAI,UAAU;AACV,kBAAM,WAAW,WAAW,QAAQ,SAAS,EAAE;AAC/C,gBAAI,UAAU;AACV,yBAAW,QAAQ;AAEnB,oCAAsB,OAAO,UAAU;AAAA,YAC3C;AAAA,UACJ;AAAA,QACJ,CAAC;AACD,iBAAS,kBAAkB;AAAA,MAC/B;AACA,iBAAW,WAAW,EAAE;AACxB,aAAO;AAAA,IACX;AAAA,IACA,iBAAiB,YAAY,UAAU;AACnC,WAAK,YAAY,UAAU;AAC3B,WAAK,QAAQ,oBAAoB,EAAE,OAAO,WAAW,CAAC;AAAA,IAC1D;AAAA;AAAA;AAAA,IAGA,mBAAmB,iBAAiB;AAChC,WAAK,kBAAkB;AAAA,IAC3B;AAAA,IACA,sBAAsB,iBAAiB,UAAU;AAC7C,YAAM,KAAK,MAAM,EAAE,IAAI,IAAI;AAC3B,SAAG,YAAY,QAAQ;AACvB,UAAI,YAAY,IAAI,SAAS,QAAQ,GAAG;AACpC,YAAI,YAAY,QAAQ;AACxB,WAAG,mBAAmB,QAAQ;AAAA,MAClC;AACA,UAAI,EAAE,2BAA2B,QAAQ;AACrC,cAAM,EAAE,YAAY,WAAW,IAAI,GAAG,0BAA0B,cAAc,eAAe;AAC7F,0BAAkB,IAAI,WAAW,aAAa,OAAO;AAAA,UACjD;AAAA,UACA,SAAS;AAAA,UACT;AAAA,QACJ,GAAG,eAAe,CAAC;AAAA,MACvB,OACK;AACD,wBAAgB,UAAU;AAC1B,YAAI,SAAS,eAAe;AAC5B,WAAG,iBAAiB,eAAe;AAAA,MACvC;AACA,sBAAgB,WAAW,EAAE;AAC7B,aAAO;AAAA,IACX;AAAA,IACA,sBAAsB,iBAAiB,UAAU;AAC7C,WAAK,YAAY,eAAe;AAChC,WAAK,QAAQ,yBAAyB,EAAE,OAAO,gBAAgB,CAAC;AAAA,IACpE;AAAA;AAAA;AAAA,IAGA,iBAAiB,eAAe;AAC5B,WAAK,gBAAgB;AAAA,IACzB;AAAA,IACA,oBAAoB,eAAe,UAAU;AACzC,YAAM,KAAK,MAAM,EAAE,IAAI,IAAI;AAC3B,SAAG,YAAY,QAAQ;AACvB,UAAI,EAAE,yBAAyB,QAAQ;AACnC,cAAM,EAAE,YAAY,WAAW,IAAI,GAAG,0BAA0B,YAAY,aAAa;AACzF,wBAAgB,IAAI,WAAW,aAAa,OAAO;AAAA,UAC/C;AAAA,UACA,SAAS;AAAA,UACT;AAAA,QACJ,GAAG,aAAa,CAAC;AAAA,MACrB,OACK;AACD,sBAAc,UAAU;AACxB,YAAI,SAAS,aAAa;AAC1B,WAAG,iBAAiB,aAAa;AAAA,MACrC;AACA,UAAI,YAAY,IAAI,SAAS,QAAQ,GAAG;AACpC,YAAI,YAAY,QAAQ;AACxB,WAAG,mBAAmB,QAAQ;AAC9B,cAAM,EAAE,sBAAsB,IAAI;AAElC,8BAAsB,QAAQ,gBAAc;AACxC,gBAAM,cAAc,WAAW;AAC/B,cAAI,aAAa;AACb,kBAAM,cAAc,cAAc,QAAQ,YAAY,EAAE;AACxD,gBAAI,aAAa;AACb,yBAAW,WAAW;AAEtB,oCAAsB,OAAO,UAAU;AAAA,YAC3C;AAAA,UACJ;AAAA,QACJ,CAAC;AACD,iBAAS,qBAAqB;AAAA,MAClC;AACA,oBAAc,WAAW,EAAE;AAC3B,aAAO;AAAA,IACX;AAAA,IACA,oBAAoB,eAAe,UAAU;AACzC,WAAK,YAAY,aAAa;AAC9B,WAAK,QAAQ,uBAAuB,EAAE,OAAO,cAAc,CAAC;AAAA,IAChE;AAAA;AAAA;AAAA,IAGA,mBAAmB,iBAAiB;AAChC,WAAK,kBAAkB;AAAA,IAC3B;AAAA,IACA,sBAAsB,iBAAiB,UAAU;AAC7C,YAAM,KAAK;AACX,SAAG,YAAY,QAAQ;AACvB,UAAI,EAAE,2BAA2B,QAAQ;AACrC,cAAM,EAAE,YAAY,WAAW,IAAI,GAAG,0BAA0B,cAAc,eAAe;AAC7F,0BAAkB,IAAI,WAAW,aAAa,OAAO;AAAA,UACjD;AAAA,UACA,SAAS;AAAA,UACT,KAAK,GAAG;AAAA,QACZ,GAAG,eAAe,CAAC;AAAA,MACvB,OACK;AACD,wBAAgB,UAAU;AAC1B,WAAG,IAAI,SAAS,eAAe;AAC/B,WAAG,iBAAiB,eAAe;AAAA,MACvC;AACA,aAAO;AAAA,IACX;AAAA,IACA,sBAAsB,iBAAiB,UAAU;AAC7C,WAAK,YAAY,eAAe;AAChC,WAAK,QAAQ,yBAAyB,EAAE,OAAO,gBAAgB,CAAC;AAAA,IACpE;AAAA;AAAA;AAAA,IAGA,wBAAwB,sBAAsB;AAC1C,WAAK,uBAAuB;AAAA,IAChC;AAAA,IACA,2BAA2B,sBAAsB,UAAU;AACvD,YAAM,KAAK;AACX,SAAG,YAAY,QAAQ;AACvB,UAAI,EAAE,gCAAgC,QAAQ;AAE1C,cAAM,cAAa,6DAAsB,eAAc,GAAG;AAE1D,cAAM,cAAa,6DAAsB,eAAc,WAAW,wBAAwB,EAAE,cAAc,GAAG;AAC7G,+BAAuB,IAAI,WAAW,aAAa,OAAO;AAAA,UACtD;AAAA,UACA,SAAS;AAAA,UACT,KAAK,GAAG;AAAA,QACZ,GAAG,oBAAoB,CAAC;AAAA,MAC5B,OACK;AACD,WAAG,IAAI,SAAS,oBAAoB;AAAA,MACxC;AACA,2BAAqB,WAAW,EAAE;AAClC,aAAO;AAAA,IACX;AAAA,IACA,2BAA2B,sBAAsB,UAAU;AACvD,WAAK,YAAY,oBAAoB;AACrC,WAAK,QAAQ,8BAA8B,EAAE,OAAO,qBAAqB,CAAC;AAAA,IAC9E;AAAA;AAAA;AAAA,IAGA,IAAI,WAAW;AACX,aAAO,KAAK,aAAa,KAAK;AAAA,IAClC;AAAA,IACA,IAAI,SAAS,UAAU;AACnB,WAAK,YAAY;AAAA,IACrB;AAAA,IACA,IAAI,oBAAoB;AACpB,aAAO,KAAK;AAAA,IAChB;AAAA;AAAA;AAAA,IAGA,MAAM,SAAS,OAAO;AAClB,WAAK,WAAW,IAAI,KAAK;AACzB,aAAO,KAAK,YAAY;AAAA,IAC5B;AAAA,IACA,MAAM,cAAc,YAAY;AAC5B,WAAK,gBAAgB,IAAI,UAAU;AACnC,aAAO,KAAK,YAAY;AAAA,IAC5B;AAAA,IACA,MAAM,YAAY,UAAU;AACxB,WAAK,cAAc,IAAI,QAAQ;AAC/B,aAAO,KAAK,YAAY;AAAA,IAC5B;AAAA,IACA,MAAM,cAAc,YAAY;AAC5B,WAAK,gBAAgB,IAAI,UAAU;AACnC,aAAO,KAAK,YAAY;AAAA,IAC5B;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA,sBAAsB;AAClB,UAAI,CAAC,KAAK,sBAAsB;AAC5B,aAAK,WAAW;AAAA,UACZ,IAAI;AAAA,UACJ,OAAO;AAAA,QACX,CAAC;AAAA,MACL;AAAA,IACJ;AAAA,IACA,IAAI,uBAAuB;AACvB,aAAO,KAAK,WAAW,aAAa;AAAA,IACxC;AAAA,IACA,uBAAuB;AACnB,WAAK,aAAa,aAAa;AAAA,IACnC;AAAA;AAAA;AAAA,IAGA,MAAM,cAAc;AAChB,UAAI,KAAK;AACL,eAAO,KAAK;AAChB,aAAO,KAAK,UAAU,KAAK,cAAc;AAAA,IAC7C;AAAA,IACA,MAAM,gBAAgB;AAClB,YAAM,KAAK;AACX,SAAG,qBAAqB;AAExB,SAAG,qBAAqB;AACxB,YAAM,MAAM,CAAC;AACb,UAAI,CAAC,GAAG,aAAa;AAEjB,mBAAW,UAAU,GAAG,cAAc;AAClC,iBAAO,qBAAqB;AAAA,QAChC;AACA,cAAM,EAAE,iBAAiB,qBAAqB,IAAI;AAElD,cAAM,gBAAgB,mBAAmB;AAEzC,WAAG,gBAAgB,cAAc;AACjC,WAAG,gBAAgB,cAAc;AACjC,WAAG,2BAA2B;AAC9B,WAAG,wBAAwB;AAC3B,WAAG,qBAAqB;AACxB,cAAM,SAAS,CAAC,GAAG,iBAAiB,GAAG,iBAAiB,GAAG,YAAY,GAAG,eAAe,GAAG,oBAAoB;AAChH,eAAO,QAAQ,WAAM;AAldrC;AAkdwC,6BAAM,sBAAN;AAAA,SAA2B;AACnD,WAAG,gBAAgB;AAEnB,WAAG,QAAQ,WAAW,EAAE,iBAAiB,cAAc,KAAK,CAAC;AAE7D,YAAI,eAAe;AACf,qBAAW,UAAU,GAAG,cAAc;AAClC,mBAAO,oBAAoB,IAAI;AAAA,UACnC;AAAA,QACJ,OACK;AAID,qBAAW,UAAU,GAAG,cAAc;AAClC,mBAAO,WAAW,IAAI;AACtB,mBAAO,oBAAoB;AAAA,UAC/B;AAEA,qBAAW,UAAU,GAAG,cAAc;AAClC,mBAAO,SAAS,OAAO,IAAI;AAAA,UAC/B;AAAA,QACJ;AACA,WAAG,gBAAgB;AACnB,WAAG,aAAa,MAAM;AAEtB,WAAG,QAAQ,WAAW;AACtB,eAAO,QAAQ,WAAM;AA7erC;AA6ewC,6BAAM,qBAAN;AAAA,SAA0B;AAIlD,WAAG,QAAQ,iBAAiB;AAC5B,eAAO;AAAA,MACX;AAAA,IACJ;AAAA,IACA,MAAM,iBAAiB;AACnB,aAAO,KAAK,YAAY;AAAA,IAC5B;AAAA;AAAA,IAEA,WAAW,QAAQ;AACf,WAAK,aAAa,IAAI,MAAM;AAC5B,WAAK,oBAAoB;AAAA,IAC7B;AAAA;AAAA,IAEA,MAAM,oBAAoB;AACtB,aAAO;AAAA,IACX;AAAA;AAAA;AAAA,IAGA,SAAS;AACL,aAAO,KAAK;AAAA,IAChB;AAAA;AAAA;AAAA;AAAA,IAIA,IAAI,IAAI,KAAK;AACT,YAAM,KAAK,OAAO,IAAI,qBAAqB,aAAa,OAAO;AAAA,QAC3D,UAAU;AAAA,MACd,GAAG,GAAG,CAAC;AACP,UAAI,IAAI;AAAA;AAAA,QAEJ,eAAe,YAAY;AAEvB,cAAI,QAAQ;AACZ,gBAAM,KAAK,YAAY;AACvB,cAAI,CAAC,KAAK,aAAa;AACnB,gBAAI,OAAO;AACX,iBAAK,QAAQ,oBAAoB;AAAA,UACrC;AAAA,QACJ;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,IACA,IAAI,MAAM;AACN,aAAO,KAAK;AAAA,IAChB;AAAA;AAAA,IAEA,gBAAgB;AACZ,aAAO,CAAC,KAAK,wBAAwB,CAAC,KAAK,sBAAsB,KAAK;AAAA,IAC1E;AAAA,EACJ;AAEA,EAAAD,2BAA0B,eAAe;AACzC,SAAOA;AACX,CAAC,EAAE;AACH;;;ACzhBA,IAAME,eAAc;AA2HpB,IAAqB,eAArB,cAA0C,6BAAqB,0BAAkBA,YAAW,CAAC,EAAE;AAAA,EAC3F,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyMA,WAAW,gBAAgB;AACvB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASH,iBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASlB,sBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASvB,oBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASrB,sBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQvB,iBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQlB,sBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQvB,oBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQrB,sBAAuB;AAAA,IAC3B;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAwDA,aAAa,MAAM;AACf,UAAM,UAAU,GAAG,IAAI;AACvB,QAAI,cAAc,WAAW;AACzB,iBAAW,QAAQ,cAAc;AAAA,IACrC;AAEA,SAAK,0BAA0B,KAAK,8BAA8B;AAAA,EACtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,gCAAgC;AAC5B,WAAO,IAAI,wBAAwB;AAAA,MAC/B,YAAkB;AAAA,MAClB,eAAkB,KAAK;AAAA,MACvB,iBAAkB,KAAK;AAAA,MACvB,iBAAkB,KAAK;AAAA,IAC3B,CAAC;AAAA,EACL;AAAA,EACA,YAAY;AACR,SAAK,wBAAwB,QAAQ;AACrC,UAAM,UAAU;AAAA,EACpB;AAAA;AAAA,EAEA,IAAI,YAAY;AACZ,WAAO,KAAK;AAAA,EAChB;AACJ;AACA,aAAa,eAAe;AAC5B,aAAa,UAAU;AACvB,aAAa,SAAS;;;AC/UtB,IAAqB,cAArB,cAAyC,oBAAoB,MAAM,4BAAoB,uBAAe,mBAAW,EAAE;AAAA;AAAA,EAG/G,WAAW,gBAAgB;AACvB,WAAO;AAAA,MACH,cAAuB;AAAA,MACvB,oBAAuB;AAAA,MACvB,iBAAuB;AAAA,MACvB,sBAAuB;AAAA,MACvB,sBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA,MAKvB,eAAgB,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAajB,YAAa,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,MAKd,iBAAkB,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,MAKnB,iBAAkB,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,MAKnB,SAAU;AAAA,IACd;AAAA,EACJ;AAAA;AAAA,EAEA,eAAe;AACX,WAAO,IAAI,KAAK,aAAa,KAAK,mBAAmB,CAAC;AAAA,EAC1D;AAAA,EACA,qBAAqB;AACjB,WAAO,aAAa,kBAAkB;AAAA,MAClC,YAAyB,KAAK;AAAA,MAC9B,eAAyB,KAAK;AAAA,MAC9B,iBAAyB,KAAK;AAAA,MAC9B,iBAAyB,KAAK;AAAA,MAC9B,wBAAyB,KAAK;AAAA,IAClC,CAAC;AAAA,EACL;AAAA;AAAA,EAEA,IAAI,QAAQ,SAAS;AACjB,UAAM,KAAK;AACX,QAAI,YAAY,GAAG,UAAU;AACzB,SAAG,gBAAgB,iBAAiB;AACpC,SAAG,gBAAgB,gBAAgB;AACnC,SAAG,WAAW;AACd,UAAI,SAAS;AACT,WAAG,aAAyB,QAAQ;AACpC,WAAG,gBAAyB,QAAQ;AACpC,WAAG,kBAAyB,QAAQ;AACpC,WAAG,kBAAyB,QAAQ;AACpC,WAAG,iBAAyB,QAAQ;AACpC,WAAG,yBAAyB,QAAQ;AAIpC,gBAAQ,IAAI;AAAA,UACR,MAAY;AAAA,UACZ,WAAY,MAAM,GAAG,sBAAsB;AAAA,UAC3C,MAAY;AAAA,UACZ,SAAY;AAAA,QAChB,CAAC;AACD,gBAAQ,IAAI;AAAA,UACR,MAAY;AAAA,UACZ,WAAY,MAAM,GAAG,qBAAqB;AAAA,UAC1C,MAAY;AAAA,UACZ,SAAY;AAAA,QAChB,CAAC;AAAA,MACL;AACA,UAAI,CAAC,GAAG,YAAY;AAChB,WAAG,aAAa,CAAC;AAAA,MACrB;AACA,UAAI,CAAC,GAAG,eAAe;AACnB,WAAG,gBAAgB,CAAC;AAAA,MACxB;AACA,UAAI,CAAC,GAAG,iBAAiB;AACrB,WAAG,kBAAkB,CAAC;AAAA,MAC1B;AACA,UAAI,CAAC,GAAG,iBAAiB;AACrB,WAAG,kBAAkB,CAAC;AAAA,MAC1B;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,IAAI,UAAU;AACV,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,iBAAiB;AAlRzB;AAmRQ,YAAO,UAAK,oBAAL,mBAAsB;AAAA,EACjC;AAAA,EACA,IAAI,eAAe,OAAO;AArR9B;AAsRQ,SAAK,iBAAiB,mBAAmB,QAAO,UAAK,YAAL,mBAAc,mBAAmB;AAAA,EACrF;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,yBAAyB;AA5RjC;AA6RQ,YAAO,UAAK,4BAAL,mBAA8B;AAAA,EACzC;AAAA,EACA,IAAI,uBAAuB,OAAO;AA/RtC;AAgSQ,SAAK,iBAAiB,2BAA2B,QAAO,UAAK,YAAL,mBAAc,2BAA2B;AAAA,EACrG;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,gBAAgB;AAtSxB;AAuSQ,YAAO,UAAK,mBAAL,mBAAqB;AAAA,EAChC;AAAA,EACA,IAAI,cAAc,OAAO;AACrB,UAAM,KAAK;AACX,OAAG,iBAAiB,kBAAkB,OAAO,GAAG,kBAAkB;AAAA,EACtE;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,aAAa;AAjTrB;AAkTQ,YAAO,UAAK,gBAAL,mBAAkB;AAAA,EAC7B;AAAA,EACA,IAAI,WAAW,OAAO;AAClB,UAAM,KAAK;AACX,OAAG,iBAAiB,eAAe,OAAO,GAAG,eAAe;AAAA,EAChE;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,kBAAkB;AA5T1B;AA6TQ,YAAO,UAAK,qBAAL,mBAAuB;AAAA,EAClC;AAAA,EACA,IAAI,gBAAgB,OAAO;AACvB,SAAK,iBAAiB,oBAAoB,OAAO,KAAK,oBAAoB;AAAA,EAC9E;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,kBAAkB;AAtU1B;AAuUQ,YAAO,UAAK,qBAAL,mBAAuB;AAAA,EAClC;AAAA,EACA,IAAI,gBAAgB,OAAO;AACvB,SAAK,iBAAiB,oBAAoB,OAAO,KAAK,oBAAoB;AAAA,EAC9E;AAAA,EACA,iBAAiB,UAAU,OAAO,YAAY;AA5UlD;AA6UQ,UACI,KAAW,MACX,YAAW,QAAG,QAAQ,MAAX,mBAAc;AAE7B,QAAI,aAAa,OAAO;AAEpB,cAAQ,MAAM,SAAS,QAAO,+BAAO,eAAc,UAAU;AAC7D,UAAI,UAAU;AACV,WAAG,YAAY,QAAQ;AAAA,MAC3B;AACA,SAAG,QAAQ,IAAI,SAAS,EAAE,MAAM,KAAK;AAGrC,SAAG,oBAAoB,GAAG,QAAQ,CAAC;AAAA,IACvC;AACA,WAAO,GAAG,QAAQ;AAAA,EACtB;AAAA,EACA,sBAAsB;AA9V1B;AA+VQ,UAAM,OAAO,MAAM,oBAAoB;AAEvC,QAAI,SAAS,KAAK,WAAW,0BAAwB,gBAAK,WAAW,WAAW,aAA3B,mBAAqC,gBAArC,mBAAkD,WAAU;AAC7G,aAAO,KAAK,KAAK,gBAAgB,OAAO;AAExC,UAAI,CAAC,KAAK,WAAW,KAAK,eAAa,KAAK,UAAU,OAAO,CAAC,GAAG;AAC7D,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA,EAEA,IAAI,oCAAoC;AACpC,WAAO,CAAC,KAAK,YAAY,SAAS,KAAK,eAAe,OAAO;AAAA,EACjE;AACJ;AAxMI,cADiB,aACV,SAAQ;AAyMnB,YAAY,SAAS;;;AClWrB,IAAO,0BAAQ,YAAO;AAbtB;AAayB,4BAA8B,OAAO,MAAM,oBAAY,EAAE;AAAA,IAC9E,WAAW,QAAQ;AACf,aAAO;AAAA,IACX;AAAA;AAAA,IAUA,iBAAiB;AACb,YAAM,eAAe;AACrB,YAAM,EAAE,aAAa,QAAQ,IAAI;AACjC,UAAI,KAAK,aAAa,eAAe,SAAS,sBAAsB;AAEhE,aAAK,uBAAuB;AAAA,MAChC;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,gBAAgB;AACZ,YAAM,EAAE,SAAS,IAAI;AACrB,UAAI,UAAU;AACV,aAAK,SAAS,KAAK,aAAa,KAAK,kBAAkB,QAAQ;AAAA,MACnE;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,gBAAgB,aAAa;AACzB,WAAK,gBAAgB,aAAa;AAClC,UAAI,sBAAsB,CAAC;AAE3B,UAAI,CAAC,KAAK,iBAAiB;AACvB,8BAAsB;AAAA,UAClB,qBAA4B;AAAA,UAC5B,eAA4B;AAAA,UAC5B,2BAA4B;AAAA,UAC5B,qBAA4B;AAAA,QAChC;AAAA,MACJ;AACA,iDAAa,IAAI;AAAA,QACb,MAAmB;AAAA,QACnB,WAAmB;AAAA,QACnB,YAAmB;AAAA,QACnB,MAAmB;AAAA,QACnB,cAAmB;AAAA,QACnB,WAAmB;AAAA,QACnB,MAAmB;AAAA,QACnB,cAAmB;AAAA,QACnB,aAAmB;AAAA,QACnB,kBAAmB;AAAA,QACnB,GAAG;AAAA,QACH,SAAmB;AAAA,MACvB;AAAA,IACJ;AAAA,IACA,wBAAwB,EAAE,OAAO,GAAG;AA9ExC,UAAAC;AA+EQ,OAAAA,MAAA,KAAK,4BAAL,gBAAAA,IAAA,WAA+B;AAAA,IACnC;AAAA,IACA,yBAAyB;AAjF7B,UAAAA;AAmFQ,WAAK,cAAc;AACnB,OAAAA,MAAA,KAAK,oBAAL,gBAAAA,IAAA;AAAA,IACJ;AAAA,IACA,yBAAyB;AACrB,WAAK,cAAc;AAAA,IACvB;AAAA,IACA,mCAAmC;AAE/B,WAAK,eAAe;AAAA,IACxB;AAAA,IACA,6BAA6B;AAEzB,WAAK,cAAc,IAAI;AAAA,IAC3B;AAAA,IACA,yCAAyC;AAErC,UAAI,CAAC,KAAK,YAAY,sBAAsB;AACxC,aAAK,eAAe;AAAA,MACxB;AAAA,IACJ;AAAA,IACA,MAAM,mCAAmC;AACrC,UAAI,CAAC,KAAK,YAAY,sBAAsB;AACxC,cAAM,KAAK,QAAQ,YAAY;AAC/B,SAAC,KAAK,eAAe,KAAK,cAAc,IAAI;AAAA,MAChD;AAAA,IACJ;AAAA,IACA,6BAA6B,aAAa,MAAM,aAAa,UAAU;AA7G3E,UAAAA;AA8GQ,YAAM,KAAK;AACX,UAAI,YAAY;AACZ,SAAAA,MAAA,GAAG,oBAAH,gBAAAA,IAAA;AAAA,MACJ,OACK;AACD,YAAI,CAAC,GAAG,QAAQ;AACZ,aAAG,cAAc;AAAA,QACrB;AACA,WAAG;AAAA,UACC;AAAA,oDACoC,GAAG,EAAE,cAAc,WAAW,gBAAgB,CAAC;AAAA,sBAC7E,YAAY,SAAS,UAAU,iCAAiC,GAAG,EAAE,wCAAwC,CAAC,IAAI,SAAS,OAAO,WAAW,EAAE;AAAA;AAAA,QAC9I;AAAA,MACf;AAAA,IACJ;AAAA,IACA,4BAA4B;AACxB,WAAK,6BAA6B,MAAM,MAAM;AAAA,IAClD;AAAA,IACA,4BAA4B;AACxB,WAAK,6BAA6B,MAAM,MAAM;AAAA,IAClD;AAAA,IACA,oBAAoB;AAChB,WAAK,6BAA6B,MAAM,MAAM;AAAA,IAClD;AAAA,IACA,oBAAoB;AAChB,WAAK,6BAA6B,MAAM,MAAM;AAAA,IAClD;AAAA,IACA,yBAAyB,EAAE,aAAa,SAAS,GAAG;AAChD,WAAK,6BAA6B,OAAO,aAAa,QAAQ;AAAA,IAClE;AAAA,IACA,kCAAkC;AAC9B,YAAM,KAAK;AACX,UAAI,GAAG,kBAAkB,MAAM;AAC3B,WAAG,WAAW,MAAM,GAAG,SAAS,MAAM,GAAG,cAAc;AAAA,MAC3D,OACK;AACD,WAAG,SAAS;AAAA,MAChB;AAAA,IACJ;AAAA,IACA,IAAI,cAAc;AAAA,IAAC;AAAA,EACvB,GArII,cAJqB,IAId,UAAS;AAAA,IACZ,gBAAiB;AAAA;AAAA;AAAA,IAGjB,YAAa;AAAA,MACT,gBAAiB;AAAA,IACrB;AAAA,EACJ,IAXqB;AAAA;",
  "names": ["_a", "map", "mixin", "base", "mixinState", "Base", "AbstractPartOfProjectGenericMixin", "CorePartOfProjectGenericMixin", "AbstractPartOfProjectStoreMixin", "superProto", "eventName", "param", "AbstractPartOfProjectModelMixin", "CorePartOfProjectModelMixin", "CoreResourceMixin", "CorePartOfProjectStoreMixin", "AbstractResourceStoreMixin", "CoreResourceStoreMixin", "EngineMixin", "fn", "resource", "_a", "resourceId", "filter", "date", "_a", "i", "length", "indexName", "emptyArray", "days", "endDate", "fn", "fn", "delay", "fn", "days", "fn", "days", "occurrenceDate", "fn", "days", "occurrenceDate", "format", "fn", "days", "emptyArray", "fn", "CoreEventMixin", "CoreHasAssignmentsMixin", "CoreHasDependenciesMixin", "SchedulerCoreEvent", "EngineMixin", "_a", "dataAddRemoveActions", "AbstractEventStoreMixin", "CoreEventStoreMixin", "EngineMixin", "CoreAssignmentMixin", "EngineMixin", "fn", "_a", "format", "AbstractAssignmentStoreMixin", "CoreAssignmentStoreMixin", "EngineMixin", "CoreDependencyMixin", "EngineMixin", "event", "result", "fn", "AbstractDependencyStoreMixin", "emptySet", "CoreDependencyStoreMixin", "EngineMixin", "_a", "fn", "store", "record", "phantomIdField", "_a", "later", "constraint", "i", "fn", "split", "expr", "every", "str", "t", "CalendarIntervalMixin", "base", "CalendarIntervalStore", "TimeUnit", "ProjectConstraintResolution", "ConstraintType", "SchedulingMode", "DependencyValidationResult", "DependencyType", "DependenciesCalendar", "ProjectType", "Direction", "ConstraintIntervalSide", "EdgeInclusion", "CalendarIteratorResult", "IndexPosition", "startDate", "UnspecifiedTimeIntervalModel", "CoreCalendarMixin", "AbstractCalendarManagerStoreMixin", "CoreCalendarManagerStoreMixin", "AbstractProjectMixin", "DelayableWrapper", "SchedulerCoreProjectMixin", "fn", "EngineMixin", "_a"]
}
