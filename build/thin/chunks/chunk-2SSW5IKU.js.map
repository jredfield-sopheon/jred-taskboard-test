{
  "version": 3,
  "sources": ["../../../../Core/lib/Core/widget/base/UndoRedoBase.js"],
  "sourcesContent": ["import Container from '../Container.js';\nimport '../Combo.js';\n/**\n * @module Core/widget/base/UndoRedoBase\n */\n/**\n * Abstract base class used by UndoRedo widgets in Scheduler and TaskBoard.\n *\n * @extends Core/widget/Container\n * @abstract\n */\nexport default class UndoRedoBase extends Container {\n    static $name = 'UndoRedoBase';\n    static type = 'undoredobase';\n    static get configurable() {\n        return {\n            // Documented on subclasses\n            project : null,\n            stm : null,\n            /**\n             * Configure as `true` to show \"Undo\" and \"Redo\" as button texts. The buttons always have a tooltip\n             * as a hint to the user as to their purpose.\n             * @config {Boolean}\n             */\n            text : null,\n            /**\n             * Button color for the undo and redo buttons. See {@link Core.widget.Button#config-color}.\n             * @config {String}\n             */\n            color : null,\n            /**\n             * Configure as `true` to show \"0\" badge on the undo and redo buttons when they have no actions\n             * left to perform. By default when there are no actions, no badge is displayed.\n             * @config {Boolean}\n             */\n            showZeroActionBadge : null,\n            cls : 'b-undo-controls b-toolbar',\n            layoutStyle : {\n                alignItems : 'stretch',\n                flexFlow   : 'row nowrap',\n                overflow   : 'visible'\n            },\n            items : {\n                undoBtn : {\n                    type     : 'button',\n                    icon     : 'b-icon-undo',\n                    tooltip  : 'L{UndoRedo.UndoLastAction}',\n                    onAction : 'up.onUndo'     // 'up.' means method is on a parent Widget.\n                },\n                transactionsCombo : {\n                    type                 : 'combo',\n                    valueField           : 'idx',\n                    editable             : false,\n                    store                : {},\n                    emptyText            : 'L{UndoRedo.NoActions}',\n                    onAction             : 'up.onTransactionSelected',\n                    displayValueRenderer : 'up.transactionsDisplayValueRenderer'\n                },\n                redoBtn : {\n                    type     : 'button',\n                    icon     : 'b-icon-redo',\n                    tooltip  : 'L{UndoRedo.RedoLastAction}',\n                    onAction : 'up.onRedo'\n                }\n            },\n            // This is treated as atomic by the Toolbar's menu overflow processing.\n            overflowable : true\n        };\n    }\n    afterConstruct() {\n        this.updateUndoRedoControls();\n    }\n    updateStm(stm) {\n        this.detachListeners('undoredo');\n        stm?.ion({\n            name          : 'undoredo',\n            recordingstop : 'updateUndoRedoControls',\n            restoringstop : 'updateUndoRedoControls',\n            queueReset    : 'updateUndoRedoControls',\n            disabled      : 'updateUndoRedoControls',\n            thisObj       : this\n        });\n    }\n    changeItems(items) {\n        const { undoBtn, redoBtn } = items;\n        if (this.color) {\n            undoBtn && (undoBtn.color = this.color);\n            redoBtn && (redoBtn.color = this.color);\n        }\n        if (this.text) {\n            undoBtn && (undoBtn.text = 'L{UndoRedo.Undo}');\n            redoBtn && (redoBtn.text = 'L{UndoRedo.Redo}');\n        }\n        return super.changeItems(items);\n    }\n    updateProject(project) {\n        this.stm = project.stm;\n    }\n    fillUndoRedoCombo() {\n        const { transactionsCombo } = this.widgetMap;\n        // The transactionsCombo may be configured away if only undo and redo buttons are wanted\n        transactionsCombo && (transactionsCombo.items =\n            [[0, 'Original data'], ...this.stm.queue.map((title, idx) => [idx + 1, title || `Transaction ${idx + 1}`])]\n        );\n    }\n    updateUndoRedoControls() {\n        const\n            {\n                stm,\n                showZeroActionBadge\n            } = this,\n            {\n                undoBtn,\n                redoBtn,\n                transactionsCombo\n            } = this.widgetMap;\n        undoBtn.badge = stm.position || (showZeroActionBadge ? '0' : '');\n        redoBtn.badge = (stm.length - stm.position) || (showZeroActionBadge ? '0' : '');\n        undoBtn.disabled = !stm.canUndo;\n        redoBtn.disabled = !stm.canRedo;\n        this.fillUndoRedoCombo();\n        if (transactionsCombo) {\n            transactionsCombo.disabled = transactionsCombo.store.count <= 1;\n        }\n    }\n    transactionsDisplayValueRenderer(record, combo) {\n        const stmPos = this.stm?.position || 0;\n        return `${stmPos} undo actions / ${combo.store.count - stmPos - 1} redo actions`;\n    }\n    onUndo() {\n        this.stm.canUndo && this.stm.undo();\n    }\n    onRedo() {\n        this.stm.canRedo && this.stm.redo();\n    }\n    onTransactionSelected(combo) {\n        const\n            { stm } = this,\n            delta = stm.position - combo.value;\n        if (delta > 0) {\n            stm.canUndo && stm.undo(delta);\n        }\n        else if (delta < 0) {\n            stm.canRedo && stm.redo(-delta);\n        }\n    }\n}\nUndoRedoBase.initClass();\nUndoRedoBase._$name = 'UndoRedoBase';"],
  "mappings": "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",
  "names": []
}
