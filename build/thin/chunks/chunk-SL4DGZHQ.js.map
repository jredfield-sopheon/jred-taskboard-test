{
  "version": 3,
  "sources": ["../../../../Grid/lib/Grid/feature/ColumnAutoWidth.js", "../../../../Grid/lib/Grid/feature/RowCopyPaste.js", "../../../../Grid/lib/Grid/view/Grid.js"],
  "sourcesContent": ["import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\nconst storeListenerName = 'store';\n/**\n * @module Grid/feature/ColumnAutoWidth\n */\n/**\n * Enables the {@link Grid.column.Column#config-autoWidth} config for a grid's columns.\n *\n * This feature is <strong>enabled</strong> by default.\n *\n * @extends Core/mixin/InstancePlugin\n * @mixes Core/mixin/Delayable\n * @classtype columnAutoWidth\n * @feature\n */\nexport default class ColumnAutoWidth extends Delayable(InstancePlugin) {\n    static $name = 'ColumnAutoWidth';\n    //region Config\n    static configurable = {\n        /**\n         * The default `autoWidth` option for columns with `autoWidth: true`. This can\n         * be a single number for the minimum column width, or an array of two numbers\n         * for the `[minWidth, maxWidth]`.\n         * @config {Number|Number[]}\n         */\n        default : null,\n        /**\n         * The amount of time (in milliseconds) to delay after a store modification\n         * before synchronizing `autoWidth` columns.\n         * @config {Number}\n         * @default\n         */\n        delay : 0\n    };\n    //endregion\n    //region Internals\n    static get pluginConfig() {\n        return {\n            after : {\n                bindStore        : 'bindStore',\n                unbindStore      : 'unbindStore',\n                renderRows       : 'syncAutoWidthColumns',\n                onInternalResize : 'onInternalResize'\n            },\n            assign : [\n                'columnAutoWidthPending',\n                'syncAutoWidthColumns'\n            ]\n        };\n    }\n    construct(config) {\n        super.construct(config);\n        const { store } = this.client;\n        // The initial bindStore can come super early such that our hooks won't catch it:\n        store && this.bindStore(store);\n    }\n    doDestroy() {\n        this.unbindStore();\n        super.doDestroy();\n    }\n    bindStore(store) {\n        this.lastSync = null;\n        store.ion({\n            name : storeListenerName,\n            [`change${this.client.asyncEventSuffix}`] : 'onStoreChange',\n            thisObj : this\n        });\n    }\n    unbindStore() {\n        this.detachListeners(storeListenerName);\n    }\n    get columnAutoWidthPending() {\n        return this.lastSync === null || this.hasTimeout('syncAutoWidthColumns');\n    }\n    onStoreChange({ action }) {\n        if (action !== 'move') {\n            const\n                me           = this,\n                { cellEdit } = me.client.features;\n            ++me.storeGeneration;\n            // If we are editing, sync right away so cell editing can align correctly to next cell\n            // unless editing is finished/canceled by tapping outside of grid body\n            if (cellEdit?.isEditing && !cellEdit.editingStoppedByTapOutside) {\n                me.syncAutoWidthColumns();\n            }\n            // If refresh is suspended for any reason, we need to wait on the rendering to complete\n            else if (!me.client.refreshSuspended) {\n                me.setTimeout({ fn : 'syncAutoWidthColumns', delay : me.delay, cancelOutstanding : true });\n            }\n            else {\n                me.client.rowManager.once('renderDone', () => me.syncAutoWidthColumns());\n            }\n        }\n    }\n    // Handle scenario with Grid being inside DIV with display none, and no width. Sync column widths after being shown\n    onInternalResize(element, newWidth, newHeight, oldWidth) {\n        if (oldWidth === 0) {\n            // Force remeasure after we get a width\n            this.lastSync = null;\n            this.syncAutoWidthColumns();\n        }\n    }\n    syncAutoWidthColumns() {\n        const\n            me = this,\n            {\n                client,\n                storeGeneration\n            }  = me;\n        // No point in measuring if we are a split controlled by an original grid\n        if (client.splitFrom) {\n            return;\n        }\n        if (me.lastSync !== storeGeneration) {\n            me.lastSync = storeGeneration;\n            let autoWidth, resizingColumns;\n            for (const column of client.columns.visibleColumns) {\n                autoWidth = column.autoWidth;\n                if (autoWidth) {\n                    if (autoWidth === true) {\n                        autoWidth = me.default;\n                    }\n                    client.resizingColumns = resizingColumns = true;\n                    column.resizeToFitContent(autoWidth);\n                }\n            }\n            if (resizingColumns) {\n                client.resizingColumns = false;\n                client.afterColumnsResized();\n            }\n        }\n        if (me.hasTimeout('syncAutoWidthColumns')) {\n            me.clearTimeout('syncAutoWidthColumns');\n        }\n    }\n    //endregion\n}\nColumnAutoWidth.prototype.storeGeneration = 0;\nColumnAutoWidth._$name = 'ColumnAutoWidth'; GridFeatureManager.registerFeature(ColumnAutoWidth, true);\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport CopyPasteBase from './base/CopyPasteBase.js';\nimport Location from '../util/Location.js';\nconst actions = {\n    cut   : 1,\n    copy  : 1,\n    paste : 1\n};\n/**\n * @module Grid/feature/RowCopyPaste\n */\n/**\n * Allow using [Ctrl/CMD + C/X] and [Ctrl/CMD + V] to copy/cut and paste rows. Also makes cut, copy and paste actions\n * available via the cell context menu.\n *\n * You can configure how a newly pasted record is named using {@link #function-generateNewName}\n *\n * This feature is **enabled** by default\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         rowCopyPaste : true\n *     }\n * });\n * ```\n *\n * {@inlineexample Grid/feature/RowCopyPaste.js}\n *\n * This feature will work alongside with CellCopyPaste but there is differences on functionality.\n * * When used together, context menu options will be detailed so the user will know to copy the cell or the row.\n * * They will also detect what type of selection is present at the moment. If there is only rows selected, only row\n *   alternatives are shown in the context menu and the keyboard shortcuts will be processed by RowCopyPaste.\n * * If there is only cells selected, there will be context menu options for both row and cell but keyboard shortcuts\n *   will be handled by CellCopyPaste.\n * * They do share clipboard, even if internal clipboard is used, so it is not possible to have rows and cells copied or\n *   cut at the same time.\n *\n * ## Keyboard shortcuts\n * The feature has the following default keyboard shortcuts:\n *\n * | Keys       | Action  | Weight \u00B9 | Action description                                                                      |\n * |------------|---------|:--------:|-----------------------------------------------------------------------------------------|\n * | `Ctrl`+`C` | *copy*  | 10       | Calls {@link #function-copyRows} which copies selected row(s) into the clipboard.       |\n * | `Ctrl`+`X` | *cut*   | 10       | Calls {@link #function-copyRows} which cuts out selected row(s) and saves in clipboard. |\n * | `Ctrl`+`V` | *paste* | 10       | Calls {@link #function-pasteRows} which inserts copied or cut row(s) from the clipboard.|\n *\n * **\u00B9** Customization of keyboard shortcuts that has a `weight` can affect other features that also uses that\n * particular keyboard shortcut. Read more in [our guide](#Grid/guides/customization/keymap.md).\n *\n * <div class=\"note\">Please note that <code>Ctrl</code> is the equivalent to <code>Command</code> and <code>Alt</code>\n * is the equivalent to <code>Option</code> for Mac users</div>\n *\n * For more information on how to customize keyboard shortcuts, please see\n * [our guide](#Grid/guides/customization/keymap.md).\n *\n * @extends Grid/feature/base/CopyPasteBase\n * @classtype rowCopyPaste\n * @feature\n */\nexport default class RowCopyPaste extends CopyPasteBase {\n    static $name = 'RowCopyPaste';\n    static type  = 'rowCopyPaste';\n    static pluginConfig = {\n        assign : [\n            'copyRows',\n            'pasteRows'\n        ],\n        chain : [\n            'populateCellMenu'\n        ]\n    };\n    static configurable = {\n        /**\n         * The field to use as the name field when updating the name of copied records\n         * @config {String}\n         * @default\n         */\n        nameField : 'name',\n        keyMap : {\n            // Weight to give CellCopyPaste priority\n            'Ctrl+C' : { weight : 10, handler : 'copy' },\n            'Ctrl+X' : { weight : 10, handler : 'cut' },\n            'Ctrl+V' : { weight : 10, handler : 'paste' }\n        },\n        copyRecordText         : 'L{copyRecord}',\n        cutRecordText          : 'L{cutRecord}',\n        pasteRecordText        : 'L{pasteRecord}',\n        rowSpecifierText       : 'L{row}',\n        rowSpecifierTextPlural : 'L{rows}',\n        localizableProperties  : [\n            'copyRecordText',\n            'cutRecordText',\n            'pasteRecordText',\n            'rowSpecifierText',\n            'rowSpecifierTextPlural'\n        ],\n        /**\n         * Adds `Cut (row)`, `Copy (row)` and `Paste (row)` options when opening a context menu on a selected cell when\n         * {@link Grid.view.mixin.GridSelection#config-selectionMode cellSelection} and\n         * {@link Grid.feature.CellCopyPaste} is active. Default behaviour will only provide row copy/paste actions on a\n         * selected row.\n         * @config {Boolean}\n         * @default\n         */\n        rowOptionsOnCellContextMenu : false\n    };\n    construct(grid, config) {\n        super.construct(grid, config);\n        grid.rowManager.ion({\n            beforeRenderRow : 'onBeforeRenderRow',\n            thisObj         : this\n        });\n        this.grid = grid;\n    }\n    // Used in events to separate events from different features from each other\n    entityName = 'row';\n    onBeforeRenderRow({ row, record }) {\n        row.cls['b-cut-row'] = this.isCut && this.cutData?.includes(record);\n    }\n    isActionAvailable({ actionName, event }) {\n        const\n            { grid }     = this,\n            { cellEdit } = grid.features,\n            { target }   = event;\n        if (actions[actionName]) {\n            // No action if\n            // 1. there is selected text on the page\n            // 2. cell editing is active\n            // 3. cursor is not in the grid (filter bar etc)\n            return !this.disabled &&\n                globalThis.getSelection().toString().length === 0 &&\n                (!cellEdit || !cellEdit.isEditing) &&\n                (actionName === 'copy' || !this.copyOnly) && // Do not allow cut or paste if copyOnly flag is set\n                grid.selectedRecords?.length > 0 && // No key action when no selected records\n                (!target || Boolean(target.closest('.b-gridbase:not(.b-schedulerbase) .b-grid-subgrid,.b-grid-subgrid:not(.b-timeaxissubgrid)')));\n        }\n    }\n    async copy() {\n        await this.copyRows();\n    }\n    async cut() {\n        await this.copyRows(true);\n    }\n    paste(referenceRecord) {\n        return this.pasteRows(referenceRecord?.isModel ? referenceRecord : null);\n    }\n    /**\n     * Copy or cut rows to clipboard to paste later\n     *\n     * @fires beforeCopy\n     * @fires copy\n     * @param {Boolean} [isCut] Copies by default, pass `true` to cut\n     * @category Common\n     * @on-owner\n     * @async\n     */\n    async copyRows(isCut = false) {\n        const\n            { client, entityName } = this,\n            // Don't cut readOnly records\n            records                = this.selectedRecords.filter(r => !r.readOnly || !isCut);\n        if (!records.length || client.readOnly) {\n            return;\n        }\n        await this.writeToClipboard(records, isCut);\n        /**\n         * Fires on the owning Grid after a copy action is performed.\n         * @event copy\n         * @on-owner\n         * @param {Grid.view.Grid} source Owner grid\n         * @param {Core.data.Model[]} records The records that were copied\n         * @param {Boolean} isCut `true` if this is a cut action\n         * @param {String} entityName 'row' to distinguish this event from other copy events\n         */\n        client.trigger('copy', { records, isCut, entityName });\n    }\n    // Called from Clipboardable when cutData changes\n    setIsCut(record, isCut) {\n        this.grid.rowManager.getRowById(record)?.toggleCls('b-cut-row', isCut);\n        record.meta.isCut = isCut;\n    }\n    // Called from Clipboardable when cutData changes\n    handleCutData({ source }) {\n        if (source !== this && this.cutData?.length) {\n            this.grid.store.remove(this.cutData);\n        }\n    }\n    /**\n     * Called from Clipboardable after writing a non-string value to the clipboard\n     * @param eventRecords\n     * @returns {String}\n     * @private\n     */\n    stringConverter(records) {\n        const\n            { rowManager } = this.grid,\n            cells          = records.flatMap(r => rowManager.getRowById(r)?.cells.map(c => new Location(c)));\n        return this.cellsToString(cells.filter(c => c)); // Not rendered records gets filtered out\n    }\n    // Called from Clipboardable before writing to the clipboard\n    async beforeCopy({ data, isCut }) {\n        /**\n         * Fires on the owning Grid before a copy action is performed, return `false` to prevent the action\n         * @event beforeCopy\n         * @preventable\n         * @on-owner\n         * @async\n         * @param {Grid.view.Grid} source Owner grid\n         * @param {Core.data.Model[]} records The records about to be copied\n         * @param {Boolean} isCut `true` if this is a cut action\n         * @param {String} entityName 'row' to distinguish this event from other beforeCopy events\n         */\n        return await this.client.trigger('beforeCopy', { records : data, isCut, entityName : this.entityName });\n    }\n    /**\n     * Paste rows below selected or passed record\n     *\n     * @fires beforePaste\n     * @param {Core.data.Model} [record] Paste below this record, or currently selected record if left out\n     * @category Common\n     * @on-owner\n     */\n    async pasteRows(record) {\n        const\n            me                            = this,\n            { client, isCut, entityName } = me,\n            referenceRecord               = record || client.selectedRecord;\n        if (client.readOnly || client.isTreeGrouped) {\n            return [];\n        }\n        const\n            records = await me.readFromClipboard({ referenceRecord }, true),\n            isOwn   = me.clipboardData === records;\n        if (!Array.isArray(records) || !records?.length ||\n            (client.store.tree && isCut && records.some(rec => rec.contains(referenceRecord, true)))\n        ) {\n            return [];\n        }\n        // sort selected to move records to make sure it will be added in correct order independent of how it was selected.\n        // Should be done with real records in the clipboard, after records are copied, all indexes will be changed\n        me.sortByIndex(records);\n        const\n            idMap            = {},\n            // We need to go over selected records, find all top level nodes and reassemble the tree\n            recordsToProcess = me.extractParents(records, idMap, isOwn);\n        await me.insertCopiedRecords(recordsToProcess, referenceRecord);\n        if (client.isDestroying) {\n            return;\n        }\n        if (isCut) {\n            // reset clipboard\n            await me.clearClipboard();\n        }\n        else {\n            client.selectedRecords = recordsToProcess;\n        }\n        /**\n         * Fires on the owning Grid after a paste action is performed.\n         * @event paste\n         * @on-owner\n         * @param {Grid.view.Grid} source Owner grid\n         * @param {Core.data.Model} referenceRecord The reference record, below which the records were pasted\n         * @param {Core.data.Model[]} records Pasted records\n         * @param {Core.data.Model[]} originalRecords For a copy action, these are the records that were copied.\n         * For cut action, this is same as the `records` param.\n         * @param {Boolean} isCut `true` if this is a cut action\n         * @param {String} entityName 'row' to distinguish this event from other paste events\n         */\n        client.trigger('paste', {\n            records         : recordsToProcess,\n            originalRecords : records,\n            referenceRecord,\n            isCut,\n            entityName\n        });\n        me.clipboard.triggerPaste(me);\n        // Focus first cell of last copied or cut row\n        client.getRowFor(recordsToProcess[recordsToProcess.length - 1])?.cells?.[0]?.focus();\n        return recordsToProcess;\n    }\n    // Called from Clipboardable before finishing the internal clipboard read\n    async beforePaste({ referenceRecord, data, text, isCut }) {\n        const records = data !== text ? data : [];\n        /**\n         * Fires on the owning Grid before a paste action is performed, return `false` to prevent the action\n         * @event beforePaste\n         * @preventable\n         * @on-owner\n         * @async\n         * @param {Grid.view.Grid} source Owner grid\n         * @param {Core.data.Model} referenceRecord The reference record, the clipboard event records will\n         * be pasted above this record\n         * @param {Core.data.Model[]} records The records about to be pasted\n         * @param {Boolean} isCut `true` if this is a cut action\n         * @param {String} entityName 'row' to distinguish this event from other beforePaste events\n         */\n        return await this.client.trigger('beforePaste', {\n            records, referenceRecord, isCut, entityName : this.entityName, data\n        });\n    }\n    /**\n     * Called from Clipboardable after reading from clipboard, and it is determined that the clipboard data is\n     * \"external\"\n     * @param json\n     * @private\n     */\n    stringParser(clipboardData) {\n        return this.setFromStringData(clipboardData, true).modifiedRecords;\n    }\n    /**\n     * A method used to generate the name for a copy-pasted record. By defaults appends \"- 2\", \"- 3\" as a suffix. Override\n     * it to provide your own naming of pasted records.\n     *\n     * @param {Core.data.Model} record The new record being pasted\n     * @returns {String}\n     */\n    generateNewName(record) {\n        const originalName = record.getValue(this.nameField);\n        let counter = 2;\n        while (this.client.store.findRecord(this.nameField, `${originalName} - ${counter}`)) {\n            counter++;\n        }\n        return `${originalName} - ${counter}`;\n    }\n    insertCopiedRecords(toInsert, recordReference) {\n        const\n            { store } = this.client,\n            insertAt  = store.indexOf(recordReference) + 1;\n        if (store.tree) {\n            return recordReference.parent.insertChild(toInsert, recordReference.nextSibling, false, {\n                // Specify node to insert before in the ordered tree. It allows to paste to a\n                // correct place both ordered and visual.\n                // Covered by TaskOrderedWbs.t.js\n                orderedBeforeNode : recordReference.nextOrderedSibling\n            });\n        }\n        else {\n            return store.insert(insertAt, toInsert);\n        }\n    }\n    get selectedRecords() {\n        const records = [...this.client.selectedRecords];\n        // Add eventual selected cells records\n        this.client.selectedCells.forEach(cell => {\n            if (!records.includes(cell.record)) {\n                records.push(cell.record);\n            }\n        });\n        return records;\n    }\n    getMenuItemText(action, addRowSpecifier = false) {\n        const me = this;\n        let text = me[action + 'RecordText'];\n        // If cellCopyPaste is enabled and there is selected cells, add a row specifier text to menu options\n        if (addRowSpecifier) {\n            text += ` (${me.selectedRecords.length > 1 ? me.rowSpecifierTextPlural : me.rowSpecifierText})`;\n        }\n        return text;\n    }\n    populateCellMenu({ record, items, cellSelector }) {\n        const\n            me           = this,\n            {\n                client,\n                rowOptionsOnCellContextMenu\n            }            = me,\n            cellCopyPaste = client.features.cellCopyPaste?.enabled === true,\n            // If cellCopyPaste is active and contextmenu originates from a selected cell\n            targetIsCell = cellCopyPaste && client.isCellSelected(cellSelector);\n        if (!client.readOnly &&\n            !client.isTreeGrouped &&\n            record?.isSpecialRow === false &&\n            (cellCopyPaste ? client.selectedRows.length : client.selectedRecords.length) &&\n            (!targetIsCell || me.rowOptionsOnCellContextMenu)\n        ) {\n            if (!me.copyOnly) {\n                items.cut = {\n                    text        : me.getMenuItemText('cut', targetIsCell && rowOptionsOnCellContextMenu),\n                    localeClass : me,\n                    icon        : 'b-icon b-icon-cut',\n                    weight      : 135,\n                    disabled    : record.readOnly,\n                    onItem      : () => me.cut()\n                };\n                items.paste = {\n                    text        : me.getMenuItemText('paste', targetIsCell && rowOptionsOnCellContextMenu),\n                    localeClass : me,\n                    icon        : 'b-icon b-icon-paste',\n                    weight      : 140,\n                    onItem      : () => me.paste(record),\n                    disabled    : me.hasClipboardData() === false\n                };\n            }\n            items.copy = {\n                text        : me.getMenuItemText('copy', targetIsCell && rowOptionsOnCellContextMenu),\n                localeClass : me,\n                cls         : 'b-separator',\n                icon        : 'b-icon b-icon-copy',\n                weight      : 120,\n                onItem      : () => me.copy()\n            };\n        }\n    }\n    /**\n     * Sort array of records ASC by its indexes stored in indexPath\n     * @param {Core.data.Model[]} array array to sort\n     * @private\n     */\n    sortByIndex(array) {\n        const { store } = this.client;\n        return array.sort((rec1, rec2) => {\n            const\n                idx1 = rec1.indexPath,\n                idx2 = rec2.indexPath;\n            // When a record is copied without its parent, its index in the visible tree should be used\n            if (!array.includes(rec1.parent) && !array.includes(rec2.parent)) {\n                // For row copy-paste feature both records are normally in store. Unless someone wants\n                // to include invisible records. Which does not happen yet.\n                return store.indexOf(rec1) - store.indexOf(rec2);\n            }\n            if (idx1.length === idx2.length) {\n                for (let i = 0; i < idx1.length; i++) {\n                    if (idx1[i] < idx2[i]) {\n                        return -1;\n                    }\n                    if (idx1[i] > idx2[i]) {\n                        return 1;\n                    }\n                }\n                return 0;\n            }\n            else {\n                return idx1.length - idx2.length;\n            }\n        });\n    }\n    /**\n     * Iterates over passed pre-sorted list of records and reassembles hierarchy of records.\n     * @param {Core.data.Model[]} taskRecords array of records to extract parents from\n     * @param {Object} idMap Empty object which will contain map linking original id with copied record\n     * @returns {Core.data.Model[]} Returns array of new top-level nodes with children filled\n     * @private\n     */\n    extractParents(taskRecords, idMap, generateNames = true) {\n        const\n            me        = this,\n            { store } = me.client;\n        // Unwrap children to pass them all through `generateNewName` function\n        if (store.tree) {\n            taskRecords.forEach(node => {\n                node.traverse(n => {\n                    const parents = n.getTopParent(true);\n                    if (!taskRecords.includes(n) && (!me.isCut || !taskRecords.some(rec => parents.includes(rec)))) {\n                        taskRecords.push(n);\n                    }\n                });\n            });\n        }\n        const result = taskRecords.reduce((parents, node) => {\n            let copy;\n            // Fallback is for when the node was removed from the tree\n            const parentId = node.parentId || node.meta.modified;\n            if (me.isCut) {\n                copy = node;\n                // reset record cut state\n                copy.meta.isCut = false;\n            }\n            else {\n                copy               = node.copy();\n                if (generateNames) {\n                    copy[me.nameField] = me.generateNewName(copy);\n                }\n                // Ensure initial expanded state in new node matches state that the client's\n                // store has for source node.\n                copy.data.expanded = node.isExpanded(me.client.store);\n            }\n            idMap[node.id] = copy;\n            // If we're copying top level node, add it directly\n            if (node.parent === store.rootNode) {\n                parents.push(copy);\n            }\n            // If node parent is also copied, append copy to the copied parent. Parents\n            // are always at the beginning of the array, so we know if there is a parent\n            // it was already copied\n            else if (parentId in idMap) {\n                idMap[parentId].appendChild(copy, true); // Silent to not cause redraws\n            }\n            // If parent is not copied and record is not top level, then append it as a\n            // sibling.\n            else {\n                parents.push(copy);\n            }\n            return parents;\n        }, []);\n        // Now when tree is assembled we want to restore ordered tree. Traverse the tree, sort children\n        // by previous value of `orderedParentIndex`\n        result.forEach(parent => {\n            parent.sortOrderedChildren(true, true);\n        });\n        return result;\n    }\n};\nRowCopyPaste.featureClass = 'b-row-copypaste';\nRowCopyPaste._$name = 'RowCopyPaste'; GridFeatureManager.registerFeature(RowCopyPaste, true, 'Grid');\nGridFeatureManager.registerFeature(RowCopyPaste, false, 'Gantt');\nGridFeatureManager.registerFeature(RowCopyPaste, false, 'SchedulerPro');\nGridFeatureManager.registerFeature(RowCopyPaste, false, 'ResourceHistogram');\n", "//region Import\nimport GridBase from './GridBase.js';\n// import default features (might be able to skip this when draft on dynamic import is implemented)\nimport '../feature/CellEdit.js';\nimport '../feature/CellMenu.js';\nimport '../feature/ColumnAutoWidth.js';\nimport '../feature/ColumnDragToolbar.js';\nimport '../feature/ColumnPicker.js';\nimport '../feature/ColumnReorder.js';\nimport '../feature/ColumnResize.js';\nimport '../feature/Filter.js';\nimport '../feature/FilterBar.js';\nimport '../feature/Group.js';\nimport '../feature/HeaderMenu.js';\nimport '../feature/RowCopyPaste.js';\nimport '../feature/Sort.js';\nimport '../feature/Stripe.js';\n// To enable using checkbox selection mode, moved here to not be dragged into GridBase automatically\nimport '../column/CheckColumn.js';\n//endregion\n/**\n * @module Grid/view/Grid\n */\n/**\n * The Grid component is a very powerful and performant UI component that shows tabular data (or tree data using the\n * {@link Grid.view.TreeGrid}).\n *\n * <h2>Intro</h2>\n * The Grid widget has a wide range of features and a large API to allow users to work with data efficiently in the\n * browser. The two most important configs are {@link #config-store} and {@link #config-columns}. With the store config,\n * you decide which data to load into the grid. You can work with both in-memory arrays or load data using ajax. See the\n * {@link Core.data.Store} class to learn more about loading data into stores.\n *\n * The columns config accepts an array of {@link Grid.column.Column Column} descriptors defining which fields that will\n * be displayed in the grid. The {@link Grid.column.Column#config-field} property in the column descriptor maps to a\n * field in your dataset. The simplest grid configured with inline data and two columns would look like this:\n *\n * {@frameworktabs}\n * {@js}\n *\n *  ```javascript\n *  const grid = new Grid({\n *       appendTo : document.body,\n *\n *       columns: [\n *           { field: 'name', text: 'Name' },\n *           { field: 'job', text: 'Job', renderer: ({value}) => value || 'Unemployed' }\n *       ],\n *\n *       data: [\n *           { name: 'Bill', job: 'Retired' },\n *           { name: 'Elon', job: 'Visionary' },\n *           { name: 'Me' }\n *       ]\n * });\n * ```\n *\n * {@endjs}\n * {@react}\n *\n * ```jsx\n * const App = props => {\n *     const [columns, setColumns] = useState([\n *          { field: 'name', text: 'Name' },\n *          { field: 'job', text: 'Job', renderer: ({value}) => value || 'Unemployed' }\n *     ]);\n *\n *     const [data, setData] = useState([\n *          { name: 'Bill', job: 'Retired' },\n *          { name: 'Elon', job: 'Visionary' },\n *          { name: 'Me' }\n *     ]);\n *\n *     return <BryntumGrid column={columns} data={data} />\n * }\n * ```\n *\n * {@endreact}\n * {@vue}\n *\n *  ```html\n * <bryntum-grid :columns=\"columns\" :data=\"data\" />\n * ```\n *\n * ```javascript\n * export default {\n *    setup() {\n *      return {\n *        columns : [\n *          { field: 'name', text: 'Name' },\n *          { field: 'job', text: 'Job', renderer: ({value}) => value || 'Unemployed' }\n *        ]\n *        data : reactive([\n *          { name: 'Bill', job: 'Retired' },\n *          { name: 'Elon', job: 'Visionary' },\n *          { name: 'Me' }\n *        ])\n *      };\n *    }\n * }\n * ```\n *\n * {@endvue}\n * {@angular}\n * ```html\n * <bryntum-grid [columns]=\"columns\" [data]=\"data\"></bryntum-grid>\n * ```\n *\n * ```typescript\n * export class AppComponent {\n *      columns = [\n *          { field: 'name', text: 'Name' },\n *          { field: 'job', text: 'Job', renderer: ({value}) => value || 'Unemployed' }\n *      ]\n *\n *      data = [\n *          { name: 'Bill', job: 'Retired' },\n *          { name: 'Elon', job: 'Visionary' },\n *          { name: 'Me' }\n *      ]\n *  }\n * ```\n *\n * {@endangular}\n * {@endframeworktabs}\n *\n * {@inlineexample Grid/view/Grid.js}\n *\n * <h2>Features</h2>\n * To avoid the Grid core being bloated, its main features are implemented in separate `feature` classes. These can be\n * turned on and off based on your requirements. To configure (or disable) a feature, use the {@link #config-features}\n * object to provide your desired configuration for the features you want to use. Each feature has an \u00B4id\u00B4 that you use\n * as a key in the features object:\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         cellEdit     : false,\n *         regionResize : true,\n *         cellTooltip  : {\n *             tooltipRenderer : (data) => {\n *             }\n *         },\n *         ...\n *     }\n * });\n * ```\n *\n * {@region Column configuration options}\n * A grid contains a number of columns that control how your data is rendered. The simplest option is to simply point a\n * Column to a field in your dataset, or define a custom {@link Grid.column.Column#config-renderer}. The renderer\n * function receives one object parameter containing rendering data for the current cell being rendered.\n *\n * ```javascript\n * const grid = new Grid({\n *     columns: [\n *         {\n *             field: 'task',\n *             text: 'Task',\n *             renderer(renderData) {\n *                 const record = renderData.record;\n *\n *                 if (record.percentDone === 100) {\n *                     renderData.cellElement.classList.add('taskDone');\n *                     renderData.cellElement.style.background = 'green';\n *                 }\n *\n *                 return renderData.value;\n *             }\n *         }\n *     ]\n * });\n * ```\n *\n * {@endregion}\n * {@region Grid sections (aka \"locked\" or \"frozen\" columns)}\n * The grid can be divided horizontally into individually scrollable sections. This is great if you have lots of columns\n * that don't fit the available width of the screen. To enable this feature, simply mark the columns you want to `lock`.\n * Locked columns are then displayed in their own section to the left of the other columns:\n *\n * ```javascript\n * const grid = new Grid({\n *     width    : 500,\n *     subGridConfigs : {\n *         // set a fixed locked section width if desired\n *         locked : { width: 300 }\n *     },\n *     columns : [\n *         { field : 'name', text : 'Name', width : 200, locked : true },\n *         { field : 'firstName', text : 'First name', width : 100, locked : true },\n *         { field : 'surName', text : 'Last name', width : 100, locked : true },\n *         { field : 'city', text : 'City', width : 100 },\n *         { type : 'number', field : 'age', text : 'Age', width : 200 },\n *         { field : 'food', text : 'Food', width : 200 }\n *     ]\n * });\n * ```\n *\n * {@inlineexample Grid/view/LockedGrid.js}\n * You can also move columns between sections by using drag and drop, or use the built-in header context menu. If you\n * want to be able to resize the locked grid section, enable the {@link Grid.feature.RegionResize} feature.\n * {@endregion}\n * {@region Filtering}\n * One important requirement of a good Grid component is the ability to filter large datasets to quickly find what you\n * are looking for. To enable filtering (through the context menu), add the {@link Grid.feature.Filter} feature:\n *\n * ```javascript\n * const grid = new Grid({\n *     features: {\n *         filter: true\n *     }\n * });\n * ```\n *\n * Or activate a default filter at initial rendering:\n *\n * ```javascript\n * const grid = new Grid({\n *     features: {\n *         filter: { property : 'city', value : 'New York' }\n *     }\n * });\n * ```\n *\n * {@inlineexample Grid/feature/Filter.js}\n * {@endregion}\n * {@region Tooltips}\n * If you have a data models with many fields, and you want to show\n * additional data when hovering over a cell, use the {@link Grid.feature.CellTooltip} feature. To show a\n * tooltip for all cells:\n *\n * ```javascript\n * const grid = new Grid({\n *     features: {\n *         cellTooltip: ({value}) => value\n *     }\n * });\n * ```\n *\n * {@inlineexample Grid/feature/CellTooltip.js}\n * {@endregion}\n * {@region Inline Editing (default <strong>on</strong>)}\n * To enable inline cell editing in the grid, simply add the {@link Grid.feature.CellEdit} feature:\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         cellEdit : true\n *     },\n *     columns: [\n *         {\n *             field: 'task',\n *             text: 'Task'\n *         }\n *     ]\n * });\n * ```\n *\n * {@inlineexample Grid/feature/CellEdit.js}\n * {@endregion}\n * {@region Context Menu}\n * Use {@link Grid.feature.CellMenu} and {@link Grid.feature.HeaderMenu} features if you want your users to be able to\n * interact with the data through the context menu:\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         headerMenu : {\n *             items : {\n *                 showInfo : {\n *                     text   : 'Show info',\n *                     icon   : 'fa fa-info-circle',\n *                     weight : 200,\n *                     onItem : ({ item }) => console.log(item.text)\n *                 }\n *             }\n *         },\n *         cellMenu :  {\n *             items : {\n *                 showOptions : {\n *                     text   : 'Show options',\n *                     icon   : 'fa fa-gear',\n *                     weight : 200\n *                 }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * {@inlineexample Grid/feature/CellMenu.js}\n * {@endregion}\n * {@region Grouping}\n * To group rows by a field in your dataset, use the {@link Grid.feature.Group} feature.\n * {@inlineexample Grid/feature/Group.js}\n * {@endregion}\n * {@region Searching}\n * When working with lots of data, a quick alternative to filtering is the {@link Grid.feature.Search} feature.\n * It highlights matching values in the grid as you type.\n * {@inlineexample Grid/feature/Search2.js}\n * {@endregion}\n * {@region Loading and saving data}\n * The grid keeps all its data in a {@link Core.data.Store}, which is essentially an Array of {@link Core.data.Model}\n * items. You define your own Model representing your data entities and use the Model API to get and set values.\n *\n * ```javascript\n * class Person extends Model {}\n *\n * const person = new Person({\n *     name: 'Steve',\n *     age: 38\n * });\n *\n * person.name = 'Linda'; // person object is now `dirty`\n *\n * const store = new Store({\n *     data : [\n *         { name : 'Don', age : 40 }\n *     ]\n * });\n *\n * store.add(person);\n *\n * console.log(store.count()); // === 2\n *\n * store.remove(person); // Remove from store\n * ```\n *\n * When you update a record in a store, it's considered dirty, until you call {@link Core.data.mixin.StoreCRUD#function-commit}\n * on the containing Store. You can also configure your Store to commit automatically (like Google docs). If you use an\n * AjaxStore, it will send changes to your server when commit is called.\n *\n * Any changes you make to the Store or its records are immediately reflected in the Grid, so there is no need to tell\n * it to refresh manually.\n *\n * To create a custom load mask, subscribe to the grid's store events and {@link Core.widget.Widget#config-masked mask}\n * on {@link Core.data.AjaxStore#event-beforeRequest} and unmask on {@link Core.data.AjaxStore#event-afterRequest}. The\n * mask can also be used to display error messages if an {@link Core.data.AjaxStore#event-exception} occurs.\n *\n * ```javascript\n *  const grid = new Grid({\n *      loadMask : null\n *  });\n *\n *  grid.store.on({\n *      beforeRequest() {\n *          grid.masked = {\n *              text : 'Data is loading...'\n *          };\n *      },\n *      afterRequest() {\n *          grid.masked = null;\n *      },\n *      exception({ response }) {\n *          grid.masked.error = response.message || 'Load failed';\n *      }\n *  });\n *\n *  store.load();\n * ```\n *\n * To learn more about loading and saving data, please refer to [this guide](#Grid/guides/data/displayingdata.md).\n * {@endregion}\n * {@region Default configs}\n * There is a myriad of configs and features available for Grid, some of them on by default and some of them requiring\n * extra configuration. The code below tries to illustrate the major things that are used by default:\n *\n * ```javascript\n * const grid = new Grid({\n *    // The following features are enabled by default:\n *    features : {\n *        cellEdit      : true,\n *        columnPicker  : true,\n *        columnReorder : true,\n *        columnResize  : true,\n *        cellMenu      : true,\n *        headerMenu    : true,\n *        group         : true,\n *        rowCopyPaste  : true, // Allow using [Ctrl/CMD + C/X] and [Ctrl/CMD + V] to copy/cut and paste rows\n *        sort          : true\n *    },\n *\n *    animateRemovingRows       : true,  // Rows will slide out on removal\n *    autoHeight                : false, // Grid needs to have a height supplied through CSS (strongly recommended) or by specifying `height`\n *    columnLines               : true,  // Themes might override it to hide lines anyway\n *    emptyText                 : 'No rows to display',\n *    enableTextSelection       : false, // Not allowed to select text in cells by default,\n *    fillLastColumn            : true,  // By default the last column is stretched to fill the grid\n *    fullRowRefresh            : true,  // Refreshes entire row when a cell value changes\n *    loadMask                  : 'Loading...',\n *    resizeToFitIncludesHeader : true,  // Also measure header when auto resizing columns\n *    responsiveLevels : {\n *      small : 400,\n *      medium : 600,\n *      large : '*'\n *    },\n *    rowHeight                  : null,  // Determined using CSS, it will measure rowHeight\n *    showDirty                  : false, // No indicator for changed cells\n * });\n * ```\n *\n * {@endregion}\n * {@region Keyboard shortcuts}\n * Grid has the following default keyboard shortcuts:\n * <div class=\"compact\">\n *\n * | Keys                 | Action                 | Weight \u00B9 | Action description                                                                                 |\n * |----------------------|------------------------|:--------:|----------------------------------------------------------------------------------------------------|\n * | `ArrowUp`            | *navigateUp*           | 10       | Focuses the cell above currently focused cell.                                                     |\n * | `ArrowRight`         | *navigateRight*        | 10       | Focuses the cell to the right of currently focused cell                                            |\n * | `ArrowDown`          | *navigateDown*         | 10       | Focuses the cell below currently focused cell                                                      |\n * | `ArrowLeft`          | *navigateLeft*         | 10       | Focuses the cell to the left of currently focused cell                                             |\n * | `Shift`+`ArrowUp`    | *extendSelectionUp*    |          | Extends the selection one row up from currently focused cell                                       |\n * | `Shift`+`ArrowRight` | *extendSelectionRight* |          | Extends the selection one column to the right from currently focused cell                          |\n * | `Shift`+`ArrowDown`  | *extendSelectionDown*  |          | Extends the selection one row down from currently focused cell                                     |\n * | `Shift`+`ArrowLeft`  | *extendSelectionLeft*  |          | Extends the selection one column to the left from currently focused cell                           |\n * | `Space`              | *toggleSelection*      | 10       | Toggles selection of currently focused cell if selectionMode.selectOnKeyboardNavigation is `false` |\n * | `Ctrl`+`Home`        | *navigateFirstCell*    |          | Focuses the first cell at the first row (including header)                                         |\n * | `Home`               | *navigateFirstColumn*  |          | Focuses the first cell of current focused row                                                      |\n * | `Ctrl`+`End`         | *navigateLastCell*     |          | Focuses the last cell of the last row                                                              |\n * | `End`                | *navigateLastColumn*   |          | Focuses the last cell of current focused row                                                       |\n * | `PageUp`             | *navigatePrevPage*     |          | Displays previous page                                                                             |\n * | `PageDown`           | *navigateNextPage*     |          | Displays next page                                                                                 |\n * | `Enter`              | *activateHeader*       |          | Equals to a header click                                                                           |\n * | `Space`              | *clickCellByKey*       | 1000     | Equals to a cell click                                                                             |\n * | `Ctrl`+`Z`           | *undoRedoKeyPress*     |          | Undo/redo (when using {@link Core.data.stm.StateTrackingManager})                                  |\n * | `Ctrl`+`Shift`+`Z`   | *undoRedoKeyPress*     |          | Undo/redo (when using {@link Core.data.stm.StateTrackingManager})                                  |\n *\n * **\u00B9** Customization of keyboard shortcuts that has a `weight` can affect other features that also uses that\n * particular keyboard shortcut. Read more in [our guide](#Grid/guides/customization/keymap.md).\n *\n *</div>\n *\n * <div class=\"note\" style=\"font-size: 0.9em\">Please note that <code>Ctrl</code> is the equivalent to <code>Command</code> and <code>Alt</code>\n * is the equivalent to <code>Option</code> for Mac users</div>\n *\n * The following Grid features has their own keyboard shortcuts. Follow the links for details.\n * * {@link Grid.feature.CellCopyPaste#keyboard-shortcuts CellCopyPaste}\n * * {@link Grid.feature.CellEdit#keyboard-shortcuts CellEdit}\n * * {@link Grid.feature.CellMenu#keyboard-shortcuts CellMenu}\n * * {@link Grid.feature.ColumnRename#keyboard-shortcuts ColumnRename}\n * * {@link Grid.feature.Filter#keyboard-shortcuts Filter}\n * * {@link Grid.feature.Group#keyboard-shortcuts Group}\n * * {@link Grid.feature.HeaderMenu#keyboard-shortcuts HeaderMenu}\n * * {@link Grid.feature.QuickFind#keyboard-shortcuts QuickFind}\n * * {@link Grid.feature.RowCopyPaste#keyboard-shortcuts RowCopyPaste}\n * * {@link Grid.feature.Search#keyboard-shortcuts Search}\n * * {@link Grid.feature.Tree#keyboard-shortcuts Tree}\n *\n * For more information on how to customize keyboard shortcuts, please see\n * [our guide](#Grid/guides/customization/keymap.md)\n *\n * {@endregion}\n * {@region Performance}\n * In general the Grid widget has very good performance and you can try loading any amount of data in the\n * <a target=\"_blank\" href=\"../examples/bigdataset/\">bigdataset</a> demo.\n * The overall rendering performance is naturally affected by many other things than the data volume. Other important\n * factors that can impact performance: number of columns, complex cell renderers, locked columns, the number of\n * features enabled and of course the browser (Chrome fastest).\n * {@endregion}\n * {@region Accessibility}\n * As far as possible, the grid is accessible to WAI-ARIA standards. Every cell, including column header cells is\n * visitable. The arrow keys navigate, and if a cell contains focusable content, navigating to that cell focuses the\n * content. `Escape` will exit from that and focus the encapsulating cell.\n *\n * When tabbing back into a grid that has previously been entered, focus moves to the last focused cell.\n *\n * The column menu is invoked using the `Space` key when focused on a column header.\n *\n * The cell menu is invoked using the `Space` key when focused on a data cell.\n * {@endregion}\n *\n * @extends Grid/view/GridBase\n * @classtype grid\n * @widget\n */\nexport default class Grid extends GridBase {\n    static get $name() {\n        return 'Grid';\n    }\n    // Factoryable type name\n    static get type() {\n        return 'grid';\n    }\n}\n// Register this widget type with its Factory\nGrid.initClass();\nGrid._$name = 'Grid';"],
  "mappings": "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",
  "names": []
}
