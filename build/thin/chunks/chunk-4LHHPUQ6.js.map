{
  "version": 3,
  "sources": ["../../../../Core/lib/Core/data/stm/state/StateBase.js", "../../../../Core/lib/Core/data/stm/Transaction.js", "../../../../Core/lib/Core/data/stm/action/ActionBase.js", "../../../../Core/lib/Core/data/stm/action/UpdateAction.js", "../../../../Core/lib/Core/data/stm/action/InsertChildAction.js", "../../../../Core/lib/Core/data/stm/action/RemoveChildAction.js", "../../../../Core/lib/Core/data/stm/action/AddAction.js", "../../../../Core/lib/Core/data/stm/action/InsertAction.js", "../../../../Core/lib/Core/data/stm/action/RemoveAction.js", "../../../../Core/lib/Core/data/stm/action/RemoveAllAction.js", "../../../../Core/lib/Core/data/stm/Props.js", "../../../../Core/lib/Core/data/stm/state/Registry.js", "../../../../Core/lib/Core/data/stm/Helpers.js", "../../../../Core/lib/Core/data/stm/state/DisabledState.js", "../../../../Core/lib/Core/data/stm/state/ReadyState.js", "../../../../Core/lib/Core/data/stm/state/RecordingState.js", "../../../../Core/lib/Core/data/stm/state/RestoringState.js", "../../../../Core/lib/Core/data/stm/state/AutoReadyState.js", "../../../../Core/lib/Core/data/stm/state/AutoRecordingState.js", "../../../../Core/lib/Core/data/stm/StateTrackingManager.js", "../../../../Core/lib/Core/mixin/Finalizable.js", "../../../../Core/lib/Core/util/drag/DragContext.js", "../../../../Core/lib/Core/util/drag/DragProxy.js", "../../../../Core/lib/Core/mixin/Draggable.js", "../../../../Core/lib/Core/mixin/Droppable.js", "../../../../Core/lib/Core/widget/ColorField.js", "../../../../Core/lib/Core/widget/SlideToggle.js", "../../../../Core/lib/Core/widget/util/AvatarRendering.js"],
  "sourcesContent": ["/**\n * @module Core/data/stm/state/StateBase\n */\nimport Base from '../../../Base.js';\nexport const throwAbstractMethodCall = () => {\n    throw new Error('Abstract method call!');\n};\nexport const throwInvalidMethodCall = () => {\n    throw new Error('Method cannot be called at this state!');\n};\n/**\n * Abstract class for STM states\n *\n * Every on* method should return a state for the STM which it should switch to\n * or throw an exception that this call at this state is illegal.\n *\n * Interface of this class mirrors interface of {@link Core.data.stm.StateTrackingManager}.\n *\n * @abstract\n */\nexport default class StateBase extends Base {\n    canUndo(stm) {\n        throwAbstractMethodCall();\n    }\n    canRedo(stm) {\n        throwAbstractMethodCall();\n    }\n    onUndo(stm) {\n        throwAbstractMethodCall();\n    }\n    onRedo(stm) {\n        throwAbstractMethodCall();\n    }\n    onStartTransaction(stm) {\n        throwAbstractMethodCall();\n    }\n    onStopTransaction(stm) {\n        throwAbstractMethodCall();\n    }\n    onStopTransactionDelayed(stm) {\n        throwAbstractMethodCall();\n    }\n    onRejectTransaction(stm) {\n        throwAbstractMethodCall();\n    }\n    onEnable(stm) {\n        throwAbstractMethodCall();\n    }\n    onDisable(stm) {\n        throwAbstractMethodCall();\n    }\n    onAutoRecordOn(stm) {\n        throwAbstractMethodCall();\n    }\n    onAutoRecordOff(stm) {\n        throwAbstractMethodCall();\n    }\n    onResetQueue(stm) {\n        throwAbstractMethodCall();\n    }\n    onModelUpdate(stm) {\n        throwAbstractMethodCall();\n    }\n    onStoreModelAdd(stm) {\n        throwAbstractMethodCall();\n    }\n    onStoreModelInsert(stm) {\n        throwAbstractMethodCall();\n    }\n    onStoreModelRemove(stm) {\n        throwAbstractMethodCall();\n    }\n    onStoreModelRemoveAll(stm) {\n        throwAbstractMethodCall();\n    }\n    onModelInsertChild(stm) {\n        throwAbstractMethodCall();\n    }\n    onModelRemoveChild(stm) {\n        throwAbstractMethodCall();\n    }\n}\nStateBase._$name = 'StateBase';", "/**\n * @module Core/data/stm/Transaction\n */\nimport Base from '../../Base.js';\nconst ACTION_QUEUE_PROP = Symbol('ACTION_QUEUE_PROP');\n/**\n * STM transaction class, holds list of actions constituting a transaction.\n *\n * A transaction can be undone and redone. Upon undo all the actions being held\n * are undone in reverse order. Upon redo all the actions being held are redone\n * in forward order.\n */\nexport default class Transaction extends Base {\n    get defaultConfig() {\n        return {\n            /**\n             * Transaction title\n             *\n             * @config {String}\n             */\n            title : null\n        };\n    }\n    construct(...args) {\n        this[ACTION_QUEUE_PROP] = [];\n        super.construct(...args);\n    }\n    /**\n     * Gets transaction's actions queue\n     *\n     * @property {Core.data.stm.action.ActionBase[]}\n     */\n    get queue() {\n        return this[ACTION_QUEUE_PROP].slice(0);\n    }\n    /**\n     * Gets transaction's actions queue length\n     *\n     * @property {Number}\n     */\n    get length() {\n        return this[ACTION_QUEUE_PROP].length;\n    }\n    /**\n     * Adds an action to the transaction.\n     *\n     * @param {Core.data.stm.action.ActionBase|Object} action\n     */\n    addAction(action) {\n        this[ACTION_QUEUE_PROP].push(action);\n    }\n    /**\n     * Undoes actions held\n     */\n    undo() {\n        const queue = this[ACTION_QUEUE_PROP];\n        for (let i = queue.length - 1; i >= 0; --i) {\n            queue[i].undo();\n        }\n    }\n    /**\n     * Redoes actions held\n     */\n    redo() {\n        const queue = this[ACTION_QUEUE_PROP];\n        for (let i = 0, len = queue.length; i < len; ++i) {\n            queue[i].redo();\n        }\n    }\n}\nTransaction._$name = 'Transaction';", "/**\n * @module Core/data/stm/action/ActionBase\n */\nimport Base from '../../../Base.js';\nconst throwAbstractMethodCall = () => {\n    throw new Error('Abstract method call!');\n};\n/**\n * Base class for STM actions.\n *\n * @abstract\n */\nexport default class ActionBase extends Base {\n    /**\n     * Gets the type of the action (stringified class name).\n     * @readonly\n     * @property {String}\n     */\n    get type() {\n        return this.constructor.name;\n    }\n    /**\n     * Undoes an action\n     */\n    undo() {\n        throwAbstractMethodCall();\n    }\n    /**\n     * Redoes an action\n     */\n    redo() {\n        throwAbstractMethodCall();\n    }\n}\nActionBase._$name = 'ActionBase';", "/**\n * @module Core/data/stm/action/UpdateAction\n */\nimport ActionBase from './ActionBase.js';\nconst\n    MODEL_PROP    = Symbol('MODEL_PROP'),\n    NEW_DATA_PROP = Symbol('NEW_DATA_PROP'),\n    OLD_DATA_PROP = Symbol('OLD_DATA_PROP');\n/**\n * Action to record the fact that a model has been updated.\n * @extends Core/data/stm/action/ActionBase\n */\nexport default class UpdateAction extends ActionBase {\n    static get defaultConfig() {\n        return {\n            /**\n             * Reference to a model which has been updated.\n             *\n             * @prp {Core.data.Model}\n             * @readonly\n             * @default\n             */\n            model : undefined,\n            /**\n             * Map of updated properties with new values.\n             *\n             * @prp {Object}\n             * @readonly\n             * @typings {{[key: string]:any}}\n             * @default\n             */\n            newData : undefined,\n            /**\n             * Map of updated properties with old values.\n             *\n             * @prp {Object}\n             * @readonly\n             * @typings {{[key: string]:any}}\n             * @default\n             */\n            oldData : undefined,\n            isInitialUserAction : false\n        };\n    }\n    get type() {\n        return 'UpdateAction';\n    }\n    get model() {\n        return this[MODEL_PROP];\n    }\n    set model(value) {\n        this[MODEL_PROP] = value;\n    }\n    get newData() {\n        return this[NEW_DATA_PROP];\n    }\n    set newData(value) {\n        this[NEW_DATA_PROP] = { ...value };\n    }\n    get oldData() {\n        return this[OLD_DATA_PROP];\n    }\n    set oldData(value) {\n        this[OLD_DATA_PROP] = { ...value };\n    }\n    undo() {\n        const { model, oldData } = this;\n        // engine needs the setters to be activated, since there's some additional logic (for example, invalidate\n        // dispatcher)\n        if (model.$) {\n            Object.assign(model, oldData);\n        }\n        // it seems STM has to use `model.set()` because of `model.inSet` overrides or smth\n        // w/o this call, just with `Object.assign()` above, the view is not refreshed\n        // Since invoking accessor will just forward change to the engine, we need to pass `skipAccessors = true`\n        // to this call to make this change on data level.\n        // Covered by TaskEdit.t `autoSync` subtest\n        // but it seems, bypassing the setters puts the change in the `data` property and does not\n        // modify the engine-like caches, that Core uses\n        // this may lead to change being lost, overwritten by some other change, which does\n        model.set(oldData, null, null, null, Boolean(model.$));\n    }\n    redo() {\n        const { model, newData } = this;\n        // see comments above\n        if (model.$) {\n            Object.assign(model, newData);\n        }\n        model.set(newData, null, null, null, Boolean(model.$));\n    }\n}\nUpdateAction._$name = 'UpdateAction';", "/**\n * @module Core/data/stm/action/InsertChildAction\n */\nimport ActionBase from './ActionBase.js';\nconst\n    PARENT_MODEL_PROP = Symbol('PARENT_MODEL_PROP'),\n    CHILD_MODELS_PROP = Symbol('CHILD_MODELS_PROP'),\n    INSERT_INDEX_PROP = Symbol('INSERT_INDEX_PROP'),\n    CONTEXT_PROP      = Symbol('CONTEXT_PROP');\n/**\n * Action to record the fact of adding a children models into a parent model.\n * @extends Core/data/stm/action/ActionBase\n */\nexport default class InsertChildAction extends ActionBase {\n    static get defaultConfig() {\n        return {\n            /**\n             * Reference to a parent model a child model has been added to.\n             *\n             * @prp {Core.data.Model}\n             * @readonly\n             * @default\n             */\n            parentModel : undefined,\n            /**\n             * Children models inserted.\n             *\n             * @prp {Core.data.Model[]}\n             * @readonly\n             * @default\n             */\n            childModels : undefined,\n            /**\n             * Index a children models are inserted at\n             *\n             * @prp {Number}\n             * @readonly\n             * @default\n             */\n            insertIndex : undefined,\n            /**\n             * Map having children models as keys and values containing previous parent\n             * of each model and index at the previous parent.\n             *\n             * @prp {Object}\n             * @readonly\n             * @default\n             */\n            context : undefined\n        };\n    }\n    get type() {\n        return 'InsertChildAction';\n    }\n    get parentModel() {\n        return this[PARENT_MODEL_PROP];\n    }\n    set parentModel(model) {\n        this[PARENT_MODEL_PROP] = model;\n    }\n    get childModels() {\n        return this[CHILD_MODELS_PROP];\n    }\n    set childModels(models) {\n        this[CHILD_MODELS_PROP] = models.slice(0);\n    }\n    get insertIndex() {\n        return this[INSERT_INDEX_PROP];\n    }\n    set insertIndex(index) {\n        this[INSERT_INDEX_PROP] = index;\n    }\n    get context() {\n        return this[CONTEXT_PROP];\n    }\n    set context(ctx) {\n        this[CONTEXT_PROP] = ctx;\n    }\n    undo() {\n        const\n            { parentModel, context, childModels } = this,\n            byFromParent = new Map(),\n            newlyAdded = new Set();\n        for (const childModel of childModels) {\n            const ctx = context.get(childModel);\n            if (!ctx) {\n                newlyAdded.add(childModel);\n            }\n            else {\n                let undoTaskData = byFromParent.get(ctx.parent);\n                if (!undoTaskData) {\n                    undoTaskData = { moveRight : [], moveLeft : [], moveFromAnotherParent : [] };\n                    byFromParent.set(ctx.parent, undoTaskData);\n                }\n                if (ctx.parent === parentModel) {\n                    if (ctx.index > childModel.parentIndex) {\n                        undoTaskData.moveRight.push({ parent : ctx.parent, model : childModel, index : ctx.index + 1 });\n                    }\n                    else {\n                        undoTaskData.moveLeft.push({ parent : ctx.parent, model : childModel, index : ctx.index });\n                    }\n                }\n                else {\n                    undoTaskData.moveFromAnotherParent.push({ parent : ctx.parent, model : childModel, index : ctx.index });\n                }\n            }\n        }\n        for (const undoTaskData of byFromParent.values()) {\n            const { moveRight, moveLeft } = undoTaskData;\n            moveLeft.sort((a, b) => a.index - b.index);\n            moveRight.sort((a, b) => b.index - a.index);\n        }\n        newlyAdded.forEach(model => model.parent.removeChild(model));\n        for (const undoTaskData of byFromParent.values()) {\n            const { moveRight, moveLeft, moveFromAnotherParent } = undoTaskData;\n            moveLeft.forEach(task => {\n                task.parent.insertChild(task.model, task.index);\n            });\n            moveRight.forEach(task => {\n                task.parent.insertChild(task.model, task.index);\n            });\n            moveFromAnotherParent.forEach(task => {\n                task.parent.insertChild(task.model, task.index);\n            });\n        }\n    }\n    redo() {\n        const\n            { parentModel, insertIndex, childModels } = this,\n            insertBefore = parentModel.children?.[insertIndex];\n        parentModel.insertChild(childModels, insertBefore, false, {\n            orderedBeforeNode : insertBefore?.previousSibling?.nextOrderedSibling\n        });\n    }\n}\nInsertChildAction._$name = 'InsertChildAction';", "/**\n * @module Core/data/stm/action/RemoveChildAction\n */\nimport ActionBase from './ActionBase.js';\nconst\n    PARENT_MODEL_PROP = Symbol('PARENT_MODEL_PROP'),\n    CHILD_MODELS_PROP = Symbol('CHILD_MODELS_PROP'),\n    CONTEXT_PROP      = Symbol('CONTEXT_PROP');\n/**\n * Action to record store remove child operation.\n * @extends Core/data/stm/action/ActionBase\n */\nexport default class RemoveChildAction extends ActionBase {\n    static get defaultConfig() {\n        return {\n            /**\n             * Reference to a parent model a child model has been removed to.\n             *\n             * @prp {Core.data.Model}\n             * @readonly\n             * @default\n             */\n            parentModel : undefined,\n            /**\n             * Children models removed.\n             *\n             * @prp {Core.data.Model[]}\n             * @readonly\n             * @default\n             */\n            childModels : undefined,\n            /**\n             * Map having children models as keys and values containing previous parent\n             * index at the parent.\n             *\n             * @prp {Object}\n             * @readonly\n             * @default\n             */\n            context : undefined\n        };\n    }\n    get type() {\n        return 'RemoveChildAction';\n    }\n    get parentModel() {\n        return this[PARENT_MODEL_PROP];\n    }\n    set parentModel(model) {\n        this[PARENT_MODEL_PROP] = model;\n    }\n    get childModels() {\n        return this[CHILD_MODELS_PROP];\n    }\n    set childModels(models) {\n        this[CHILD_MODELS_PROP] = models.slice(0);\n    }\n    get context() {\n        return this[CONTEXT_PROP];\n    }\n    set context(ctx) {\n        this[CONTEXT_PROP] = ctx;\n    }\n    undo() {\n        const { parentModel, context, childModels } = this;\n        // Let's sort models by parent index such that models with lesser index\n        // were inserted back first, thus making valid parent index of models following.\n        childModels.sort((lhs, rhs) => {\n            const\n                lhsIndex = context.get(lhs),\n                rhsIndex = context.get(rhs);\n            return (lhsIndex - rhsIndex);\n        });\n        // Now let's re-insert records back to where they were\n        childModels.forEach(m => {\n            const ctx = context.get(m);\n            parentModel.insertChild(m, ctx.parentIndex, undefined, { orderedParentIndex : ctx.orderedParentIndex });\n        });\n    }\n    redo() {\n        this.parentModel.removeChild(this.childModels);\n    }\n}\nRemoveChildAction._$name = 'RemoveChildAction';", "import ActionBase from './ActionBase.js';\nimport Store from '../../Store.js';\n/**\n * @module Core/data/stm/action/AddAction\n */\nconst\n    STORE_PROP      = Symbol('STORE_PROP'),\n    MODEL_LIST_PROP = Symbol('MODEL_LIST_PROP');\n/**\n * Action to record the fact of models adding to a store.\n * @extends Core/data/stm/action/ActionBase\n */\nexport default class AddAction extends ActionBase {\n    static get defaultConfig() {\n        return {\n            /**\n             * Reference to a store models have been added into.\n             *\n             * @prp {Core.data.Store}\n             * @readonly\n             * @default\n             */\n            store : undefined,\n            /**\n             * List of models added into the store.\n             *\n             * @prp {Core.data.Model[]}\n             * @readonly\n             * @default\n             */\n            modelList : undefined,\n            /**\n             * Flag showing if undo/redo should be done silently i.e. with events suppressed\n             *\n             * @prp {Boolean}\n             * @readonly\n             * @default\n             */\n            silent : false\n        };\n    }\n    get type() {\n        return 'AddAction';\n    }\n    get store() {\n        return this[STORE_PROP];\n    }\n    set store(store) {\n        this[STORE_PROP] = store;\n    }\n    get modelList() {\n        return this[MODEL_LIST_PROP];\n    }\n    set modelList(list) {\n        this[MODEL_LIST_PROP] = list.slice(0);\n    }\n    undo() {\n        this.store.remove(this.modelList, this.silent);\n    }\n    redo() {\n        this.store.add(this.modelList, this.silent);\n    }\n}\nAddAction._$name = 'AddAction';", "import ActionBase from './ActionBase.js';\nimport Store from '../../Store.js';\n/**\n * @module Core/data/stm/action/InsertAction\n */\nconst\n    STORE_PROP        = Symbol('STORE_PROP'),\n    MODEL_LIST_PROP   = Symbol('MODEL_LIST_PROP'),\n    INSERT_INDEX_PROP = Symbol('INSERT_INDEX_PROP'),\n    CONTEXT_PROP      = Symbol('CONTEXT_PROP');\n/**\n * Action to record the fact of models inserting into a store.\n * @extends Core/data/stm/action/ActionBase\n */\nexport default class InsertAction extends ActionBase {\n    static get defaultConfig() {\n        return {\n            /**\n             * Reference to a store models have been inserted into.\n             *\n             * @prp {Core.data.Store}\n             * @readonly\n             * @default\n             */\n            store : undefined,\n            /**\n             * List of models inserted into the store.\n             *\n             * @prp {Core.data.Model[]}\n             * @readonly\n             * @default\n             */\n            modelList : undefined,\n            /**\n             * Index the models have been inserted at.\n             *\n             * @prp {Number}\n             * @readonly\n             * @default\n             */\n            insertIndex : undefined,\n            /**\n             * Models move context (if models has been moved), if any.\n             * Map this {@link Core/data/Model} instances as keys and their\n             * previous index as values\n             *\n             * @prp {Map}\n             * @readonly\n             * @default\n             */\n            context : undefined,\n            /**\n             * Flag showing if undo/redo should be done silently i.e. with events suppressed\n             *\n             * @prp {Boolean}\n             * @readonly\n             * @default\n             */\n            silent : false\n        };\n    }\n    get type() {\n        return 'InsertAction';\n    }\n    get store() {\n        return this[STORE_PROP];\n    }\n    set store(store) {\n        this[STORE_PROP] = store;\n    }\n    get modelList() {\n        return this[MODEL_LIST_PROP];\n    }\n    set modelList(list) {\n        this[MODEL_LIST_PROP] = list.slice(0);\n    }\n    get insertIndex() {\n        return this[INSERT_INDEX_PROP];\n    }\n    set insertIndex(index) {\n        this[INSERT_INDEX_PROP] = index;\n    }\n    get context() {\n        return this[CONTEXT_PROP];\n    }\n    set context(context) {\n        this[CONTEXT_PROP] = context;\n    }\n    undo() {\n        const { store, modelList, context, silent } = this;\n        // Let's sort models by index such that models with lesser index\n        // were inserted back first, thus making valid index of models following.\n        modelList.sort((lhs, rhs) => {\n            const\n                lhsIndex = context.get(lhs),\n                rhsIndex = context.get(rhs);\n            return lhsIndex !== undefined && rhsIndex !== undefined ? lhsIndex - rhsIndex : 0;\n        });\n        modelList.forEach(m => {\n            const index = context.get(m);\n            // Flag the inserted record that we undo to skip adding it to \"store.removed\"\n            m._undoingInsertion = true;\n            if (index !== undefined) {\n                // Insert at previous index\n                store.insert(index, m, silent);\n            }\n            else {\n                // Just remove\n                store.remove(m, silent);\n            }\n            m._undoingInsertion = false;\n        });\n    }\n    redo() {\n        const me = this;\n        me.store.insert(me.insertIndex, me.modelList, me.silent);\n    }\n}\nInsertAction._$name = 'InsertAction';", "/**\n * @module Core/data/stm/action/RemoveAction\n */\nimport ActionBase from './ActionBase.js';\nimport Store from '../../Store.js';\nconst\n    STORE_PROP      = Symbol('STORE_PROP'),\n    MODEL_LIST_PROP = Symbol('MODEL_LIST_PROP'),\n    CONTEXT_PROP    = Symbol('CONTEXT_PROP');\n/**\n * Action to record the fact of models removed from a store.\n * @extends Core/data/stm/action/ActionBase\n */\nexport default class RemoveAction extends ActionBase {\n    static get defaultConfig() {\n        return {\n            /**\n             * Reference to a store models have been removed from.\n             *\n             * @prp {Core.data.Store}\n             * @readonly\n             * @default\n             */\n            store : undefined,\n            /**\n             * List of models removed from the store.\n             *\n             * @prp {Core.data.Model[]}\n             * @readonly\n             * @default\n             */\n            modelList : undefined,\n            /**\n             * Models removing context.\n             *\n             * @prp {Object}\n             * @readonly\n             * @default\n             */\n            context : undefined,\n            /**\n             * Flag showing if undo/redo should be done silently i.e. with events suppressed\n             *\n             * @prp {Boolean}\n             * @readonly\n             * @default\n             */\n            silent : false\n        };\n    }\n    get type() {\n        return 'RemoveAction';\n    }\n    get store() {\n        return this[STORE_PROP];\n    }\n    set store(store) {\n        this[STORE_PROP] = store;\n    }\n    get modelList() {\n        return this[MODEL_LIST_PROP];\n    }\n    set modelList(list) {\n        this[MODEL_LIST_PROP] = list.slice(0);\n    }\n    get context() {\n        return this[CONTEXT_PROP];\n    }\n    set context(context) {\n        this[CONTEXT_PROP] = context;\n    }\n    undo() {\n        const { store, context, modelList, silent } = this;\n        // Let's sort models by index such that models with lesser index\n        // were inserted back first, thus making valid index of models following.\n        modelList.sort((lhs, rhs) => {\n            const\n                lhsIndex = context.get(lhs),\n                rhsIndex = context.get(rhs);\n            // Here, in contrast to InsertAction, index is always present\n            return lhsIndex - rhsIndex;\n        });\n        modelList.forEach(m => {\n            const index = context.get(m);\n            // Insert at previous index\n            store.insert(index, m, silent);\n        });\n    }\n    redo() {\n        this.store.remove(this.modelList, this.silent);\n    }\n}\nRemoveAction._$name = 'RemoveAction';", "/**\n * @module Core/data/stm/action/RemoveAllAction\n */\nimport ActionBase from './ActionBase.js';\nimport Store from '../../Store.js';\nconst\n    STORE_PROP       = Symbol('STORE_PROP'),\n    ALL_RECORDS_PROP = Symbol('ALL_RECORDS_PROP');\n/**\n * Action to record store remove all operation.\n * @extends Core/data/stm/action/ActionBase\n */\nexport default class RemoveAllAction extends ActionBase {\n    static get defaultConfig() {\n        return {\n            /**\n             * Reference to a store cleared.\n             *\n             * @prp {Core.data.Store}\n             * @readonly\n             * @default\n             */\n            store : undefined,\n            /**\n             * All store records removed\n             *\n             * @prp {Core.data.Model[]}\n             * @readonly\n             * @default\n             */\n            allRecords : undefined,\n            /**\n             * Flag showing if undo/redo should be done silently i.e. with events suppressed\n             *\n             * @prp {Boolean}\n             * @readonly\n             * @default\n             */\n            silent : false\n        };\n    }\n    get type() {\n        return 'RemoveAllAction';\n    }\n    get store() {\n        return this[STORE_PROP];\n    }\n    set store(store) {\n        this[STORE_PROP] = store;\n    }\n    get allRecords() {\n        return this[ALL_RECORDS_PROP];\n    }\n    set allRecords(records) {\n        this[ALL_RECORDS_PROP] = records.slice(0);\n    }\n    undo() {\n        const { store, allRecords, silent } = this;\n        store.add(allRecords, silent);\n    }\n    redo() {\n        this.store.removeAll(this.silent);\n    }\n}\nRemoveAllAction._$name = 'RemoveAllAction';", "/**\n * @module Core/data/stm/Props.js\n * @internal\n */\nexport const STATE_PROP             = Symbol('STATE_PROP');\nexport const STORES_PROP            = Symbol('STORES_PROP');\nexport const QUEUE_PROP             = Symbol('QUEUE_PROP');\nexport const POS_PROP               = Symbol('POS_PROP');\nexport const TRANSACTION_PROP       = Symbol('TRANSACTION_PROP');\nexport const TRANSACTION_TIMER_PROP = Symbol('TRANSACTION_TIMER_PROP');\nexport const AUTO_RECORD_PROP       = Symbol('AUTO_RECORD_PROP');\nexport const IS_APPLYING_STASH      = Symbol('IS_APPLYING_STASH');\nexport const PROPS                  = Object.freeze([\n    STATE_PROP,\n    STORES_PROP,\n    QUEUE_PROP,\n    POS_PROP,\n    TRANSACTION_PROP,\n    TRANSACTION_TIMER_PROP,\n    AUTO_RECORD_PROP,\n    IS_APPLYING_STASH\n]);\n", "import StateBase from './StateBase.js';\n/**\n * @module Core/data/stm/state/Registry\n *\n * Provides map of registered STM states.\n *\n * Needed to remove states circular dependency.\n *\n * @internal\n */\nconst registry = new Map();\n/**\n * Registers STM state class with the given name.\n *\n * @private\n *\n * @param {String} name\n * @param {Core.data.stm.state.StateBase} state\n */\nexport const registerStmState = (name, state) => {\n    registry.set(name, state);\n};\n/**\n * Resolves STM state class with the given name.\n *\n * @private\n *\n * @param {String} name\n * @returns {Core.data.stm.state.StateBase} state\n */\nexport const resolveStmState = (state) => {\n    if (typeof state === 'string') {\n        state = registry.get(state);\n    }\n    return state;\n};\n// UMD/module compatible export\n// NOTE: the most compatible way of exporting is:\n//       import registry from './Registry.js';\n//       { registerStmState, resolveStmState } = registry;\n//          or\n//       registry.registerStmState(...);\nexport default {\n    registerStmState,\n    resolveStmState\n};\n", "import { QUEUE_PROP, POS_PROP } from './Props.js';\nexport const resetQueue = (stm, options) => {\n    const { undo, redo } = options;\n    let newProps;\n    if (undo && !redo) {\n        newProps = {\n            [QUEUE_PROP] : stm[QUEUE_PROP].slice(stm.position),\n            [POS_PROP]   : 0\n        };\n    }\n    else if (redo && !undo) {\n        newProps = {\n            [QUEUE_PROP] : stm[QUEUE_PROP].slice(0, stm.position)\n        };\n    }\n    else {\n        newProps = {\n            [QUEUE_PROP] : [],\n            [POS_PROP]   : 0\n        };\n    };\n    return [\n        newProps,\n        () => {\n            stm.notifyStoresAboutQueueReset(options);\n        }\n    ];\n};\n", "/**\n * @module Core/data/stm/state/DisabledState\n */\nimport StateBase, { throwInvalidMethodCall } from './StateBase.js';\nimport { AUTO_RECORD_PROP } from '../Props.js';\nimport Registry from './Registry.js';\nimport { resetQueue } from '../Helpers.js';\n/**\n * STM disabled state class.\n *\n * @internal\n */\nexport class DisabledStateClass extends StateBase {\n    canUndo() {\n        return false;\n    }\n    canRedo() {\n        return false;\n    }\n    onUndo() {\n        throwInvalidMethodCall();\n    }\n    onRedo() {\n        throwInvalidMethodCall();\n    }\n    onEnable(stm) {\n        return stm.autoRecord ? 'autoreadystate' : 'readystate';\n    }\n    onDisable() {\n        throwInvalidMethodCall();\n    }\n    onAutoRecordOn() {\n        return {\n            [AUTO_RECORD_PROP] : true\n        };\n    }\n    onAutoRecordOff() {\n        return {\n            [AUTO_RECORD_PROP] : false\n        };\n    }\n    onStartTransaction() {\n        throwInvalidMethodCall();\n    }\n    onStopTransaction()  {\n        throwInvalidMethodCall();\n    }\n    onStopTransactionDelayed() {\n        throwInvalidMethodCall();\n    }\n    onRejectTransaction() {\n        throwInvalidMethodCall();\n    }\n    onResetQueue(stm, options) {\n        return resetQueue(stm, options);\n    }\n    onModelUpdate()      {}\n    onModelInsertChild() {}\n    onModelRemoveChild() {}\n    onStoreModelAdd()    {}\n    onStoreModelInsert() {}\n    onStoreModelRemove() {}\n    onStoreRemoveAll()   {}\n}\n/**\n * STM disabled state.\n *\n * @internal\n */\nconst DisabledState = new DisabledStateClass();\nexport default DisabledState;\nRegistry.registerStmState('disabledstate', DisabledState);\n", "import StateBase, { throwInvalidMethodCall } from './StateBase.js';\nimport Transaction from '../Transaction.js';\nimport { STATE_PROP, QUEUE_PROP, POS_PROP, TRANSACTION_PROP, AUTO_RECORD_PROP } from '../Props.js';\nimport Registry from './Registry.js';\nimport { resetQueue } from '../Helpers.js';\n/**\n * @module Core/data/stm/state/ReadyState\n */\n/**\n * STM ready state class.\n *\n * @internal\n */\nexport class ReadyStateClass extends StateBase {\n    canUndo(stm) {\n        //      v\n        // |*|*|\n        return 0 < stm.position && stm.position <= stm.length;\n    }\n    canRedo(stm) {\n        //  v\n        // |*|*|\n        return 0 <= stm.position && stm.position < stm.length;\n    }\n    onUndo(stm, steps) {\n        let curPos = stm.position;\n        const\n            queue  = stm[QUEUE_PROP],\n            newPos = Math.max(0, curPos - steps),\n            next = () => {\n                stm.notifyStoresAboutStateRestoringStart();\n                const undoneTransactions = [];\n                while (curPos !== newPos) {\n                    const transaction = queue[--curPos];\n                    transaction.undo();\n                    undoneTransactions.push(transaction);\n                }\n                return [stm.autoRecord ? 'autoreadystate' : 'readystate', () => {\n                    stm.notifyStoresAboutStateRestoringStop({ cause : 'undo', transactions : undoneTransactions });\n                }];\n            };\n        return [{\n            [STATE_PROP] : 'restoringstate',\n            [POS_PROP]   : newPos\n        }, next];\n    }\n    onRedo(stm, steps) {\n        let curPos = stm.position;\n        const\n            queue  = stm[QUEUE_PROP],\n            newPos = Math.min(queue.length, curPos + steps);\n        const next = () => {\n            stm.notifyStoresAboutStateRestoringStart();\n            const redoneTransactions = [];\n            do {\n                const transaction = queue[curPos++];\n                transaction.redo();\n                redoneTransactions.push(transaction);\n            }\n            while (curPos !== newPos);\n            return [stm.autoRecord ? 'autoreadystate' : 'readystate', () => {\n                stm.notifyStoresAboutStateRestoringStop({ cause : 'redo', transactions : redoneTransactions });\n            }];\n        };\n        return [{\n            [STATE_PROP] : 'restoringstate',\n            [POS_PROP]   : newPos\n        }, next];\n    }\n    onEnable() {\n        throwInvalidMethodCall();\n    }\n    onDisable() {\n        return 'disabledstate';\n    }\n    onAutoRecordOn() {\n        return {\n            [STATE_PROP]       : 'autoreadystate',\n            [AUTO_RECORD_PROP] : true\n        };\n    }\n    onAutoRecordOff() {\n        throwInvalidMethodCall();\n    }\n    onStartTransaction(stm, title) {\n        const transaction = new Transaction({ title });\n        return [{\n            [STATE_PROP]       : 'recordingstate',\n            [TRANSACTION_PROP] : transaction\n        }, () => {\n            stm.notifyStoresAboutStateRecordingStart(transaction);\n        }];\n    }\n    onStopTransaction() {\n        throwInvalidMethodCall();\n    }\n    onStopTransactionDelayed() {\n        throwInvalidMethodCall();\n    }\n    onRejectTransaction() {\n        throwInvalidMethodCall();\n    }\n    onResetQueue(stm, options) {\n        return resetQueue(stm, options);\n    }\n    onModelUpdate()      {}\n    onModelInsertChild() {}\n    onModelRemoveChild() {}\n    onStoreModelAdd()    {}\n    onStoreModelInsert() {}\n    onStoreModelRemove() {}\n    onStoreRemoveAll()   {}\n}\n/**\n * STM ready state.\n *\n * @internal\n */\nconst ReadyState = new ReadyStateClass();\nexport default ReadyState;\nRegistry.registerStmState('readystate', ReadyState);\n", "/**\n * @module Core/data/stm/state/RecordingState\n */\nimport StateBase, { throwInvalidMethodCall } from './StateBase.js';\nimport { STATE_PROP, TRANSACTION_PROP, QUEUE_PROP, POS_PROP, AUTO_RECORD_PROP } from '../Props.js';\nimport Registry from './Registry.js';\nimport { resetQueue } from '../Helpers.js';\n/**\n * STM recording state class.\n *\n * @internal\n */\nexport class RecordingStateClass extends StateBase {\n    canUndo() {\n        return false;\n    }\n    canRedo() {\n        return false;\n    }\n    onEnable() {}\n    onDisable(stm) {\n        const transaction = stm[TRANSACTION_PROP];\n        stm.notifyStoresAboutStateRecordingStop(transaction, { disabled : true });\n        return {\n            [STATE_PROP]       : 'disabledstate',\n            [TRANSACTION_PROP] : null\n        };\n    }\n    onAutoRecordOn(stm) {\n        return [{\n            [STATE_PROP]       : 'autorecordingstate',\n            [AUTO_RECORD_PROP] : true\n        }, () => {\n            stm.stopTransactionDelayed();\n        }];\n    }\n    onAutoRecordOff() {\n        throwInvalidMethodCall();\n    }\n    onStartTransaction() {\n        throwInvalidMethodCall();\n    }\n    onStopTransaction(stm, title) {\n        const\n            transaction = stm[TRANSACTION_PROP],\n            queue       = stm[QUEUE_PROP];\n        let position = stm[POS_PROP];\n        if (transaction.length) {\n            if (!transaction.title && !title && stm.getTransactionTitle) {\n                transaction.title = stm.getTransactionTitle(transaction);\n            }\n            else if (title) {\n                transaction.title = title;\n            }\n            queue[position] = transaction;\n            queue.length    = ++position;\n        }\n        return [{\n            [STATE_PROP]       : 'readystate',\n            [POS_PROP]         : position,\n            [TRANSACTION_PROP] : null\n        }, () => {\n            stm.notifyStoresAboutStateRecordingStop(transaction, { stop : true });\n        }];\n    }\n    onRejectTransaction(stm) {\n        const transaction = stm[TRANSACTION_PROP];\n        return [{\n            [STATE_PROP]       : 'restoringstate',\n            [TRANSACTION_PROP] : null\n        }, () => {\n            if (transaction.length) {\n                transaction.undo();\n            }\n            return [\n                'readystate',\n                () => {\n                    stm.notifyStoresAboutStateRecordingStop(transaction, { rejected : true });\n                }\n            ];\n        }];\n    }\n    onStopTransactionDelayed() {\n        throwInvalidMethodCall();\n    }\n    onResetQueue(stm, options) {\n        return resetQueue(stm, options);\n    }\n    onModelUpdate(stm, model, newData, oldData, isInitialUserAction) {\n        const transaction = stm[TRANSACTION_PROP];\n        transaction.addAction(stm.makeModelUpdateAction(model, newData, oldData, isInitialUserAction));\n    }\n    onModelInsertChild(stm, parentModel, index, childModel, previousParent, previousIndex) {\n        const transaction = stm[TRANSACTION_PROP];\n        transaction.addAction(stm.makeModelInsertChildAction(parentModel, index, childModel, previousParent, previousIndex));\n    }\n    onModelRemoveChild(stm, parentModel, childModels, context) {\n        const transaction = stm[TRANSACTION_PROP];\n        transaction.addAction(stm.makeModelRemoveChildAction(parentModel, childModels, context));\n    }\n    onStoreModelAdd(stm, store, models, silent)    {\n        const transaction = stm[TRANSACTION_PROP];\n        transaction.addAction(stm.makeStoreModelAddAction(store, models, silent));\n    }\n    onStoreModelInsert(stm, store, index, models, context, silent) {\n        const transaction = stm[TRANSACTION_PROP];\n        transaction.addAction(stm.makeStoreModelInsertAction(store, index, models, context, silent));\n    }\n    onStoreModelRemove(stm, store, models, context, silent) {\n        const transaction = stm[TRANSACTION_PROP];\n        transaction.addAction(stm.makeStoreModelRemoveAction(store, models, context, silent));\n    }\n    onStoreRemoveAll(stm, store, allRecords, silent)   {\n        const transaction = stm[TRANSACTION_PROP];\n        transaction.addAction(stm.makeStoreRemoveAllAction(store, allRecords, silent));\n    }\n}\n/**\n * STM recording state.\n *\n * @internal\n */\nconst RecordingState = new RecordingStateClass();\nexport default RecordingState;\nRegistry.registerStmState('recordingstate', RecordingState);\n", "/**\n * @module Core/data/stm/state/RestoringState\n */\nimport StateBase, { throwInvalidMethodCall } from './StateBase.js';\nimport { AUTO_RECORD_PROP } from '../Props.js';\nimport Registry from './Registry.js';\n/**\n * STM restoring state class.\n *\n * @internal\n */\nexport class RestoringStateClass extends StateBase {\n    static get $name() {\n        return 'RestoringStateClass';\n    }\n    canUndo() {\n        return false;\n    }\n    canRedo() {\n        return false;\n    }\n    onUndo() {\n        throwInvalidMethodCall();\n    }\n    onRedo() {\n        throwInvalidMethodCall();\n    }\n    onEnable() {\n        throwInvalidMethodCall();\n    }\n    onDisable() {\n        throwInvalidMethodCall();\n    }\n    onAutoRecordOn() {\n        return {\n            [AUTO_RECORD_PROP] : true\n        };\n    }\n    onAutoRecordOff() {\n        return {\n            [AUTO_RECORD_PROP] : false\n        };\n    }\n    onStartTransaction() {\n        throwInvalidMethodCall();\n    }\n    onStopTransaction()  {\n        throwInvalidMethodCall();\n    }\n    onStopTransactionDelayed() {\n        throwInvalidMethodCall();\n    }\n    onRejectTransaction() {\n        throwInvalidMethodCall();\n    }\n    onQueueReset() {\n        throwInvalidMethodCall();\n    }\n    onModelUpdate()      {}\n    onModelInsertChild() {}\n    onModelRemoveChild() {}\n    onStoreModelAdd()    {}\n    onStoreModelInsert() {}\n    onStoreModelRemove() {}\n    onStoreRemoveAll()   {}\n}\n/**\n * STM restoring state.\n *\n * @internal\n */\nconst RestoringState = new RestoringStateClass();\nexport default RestoringState;\nRegistry.registerStmState('restoringstate', RestoringState);\n", "import { throwInvalidMethodCall } from './StateBase.js';\nimport Transaction from '../Transaction.js';\nimport { ReadyStateClass } from './ReadyState.js';\nimport { STATE_PROP, TRANSACTION_PROP, AUTO_RECORD_PROP } from '../Props.js';\nimport Registry from './Registry.js';\n/**\n * @module Core/data/stm/state/AutoReadyState\n */\n/**\n * STM transaction autostart ready state class.\n *\n * @internal\n */\nexport class AutoReadyStateClass extends ReadyStateClass {\n    onAutoRecordOn() {\n        throwInvalidMethodCall();\n    }\n    onAutoRecordOff() {\n        return {\n            [STATE_PROP]       : 'readystate',\n            [AUTO_RECORD_PROP] : false\n        };\n    }\n    onStartTransaction(stm, title) {\n        const transaction = new Transaction({ title });\n        return [{\n            [STATE_PROP]       : 'autorecordingstate',\n            [TRANSACTION_PROP] : transaction\n        }, () => {\n            stm.notifyStoresAboutStateRecordingStart(transaction);\n            stm.stopTransactionDelayed();\n        }];\n    }\n    onModelUpdate(stm, model, newData, oldData) {\n        stm.startTransaction();\n        stm.onModelUpdate(model, newData, oldData);\n    }\n    onModelInsertChild(stm, parentModel, index, childModels, context) {\n        stm.startTransaction();\n        stm.onModelInsertChild(parentModel, index, childModels, context);\n    }\n    onModelRemoveChild(stm, parentModel, childModels, context) {\n        stm.startTransaction();\n        stm.onModelRemoveChild(parentModel, childModels, context);\n    }\n    onStoreModelAdd(stm, store, models, silent) {\n        stm.startTransaction();\n        stm.onStoreModelAdd(store, models, silent);\n    }\n    onStoreModelInsert(stm, store, index, models, context, silent) {\n        stm.startTransaction();\n        stm.onStoreModelInsert(store, index, models, context, silent);\n    }\n    onStoreModelRemove(stm, store, models, context, silent) {\n        stm.startTransaction();\n        stm.onStoreModelRemove(store, models, context, silent);\n    }\n    onStoreRemoveAll(stm, store, allRecords, silent) {\n        stm.startTransaction();\n        stm.onStoreRemoveAll(store, allRecords, silent);\n    }\n}\n/**\n * STM transaction autostart ready state.\n *\n * @internal\n */\nconst AutoReadyState = new AutoReadyStateClass();\nexport default AutoReadyState;\nRegistry.registerStmState('autoreadystate', AutoReadyState);\n", "/**\n * @module Core/data/stm/state/AutoRecordingState\n */\nimport Delayable from '../../../mixin/Delayable.js';\nimport { throwInvalidMethodCall } from './StateBase.js';\nimport { RecordingStateClass } from './RecordingState.js';\nimport { STATE_PROP, TRANSACTION_PROP, TRANSACTION_TIMER_PROP, QUEUE_PROP, POS_PROP, AUTO_RECORD_PROP } from '../Props.js';\nimport Registry from './Registry.js';\nimport { resetQueue } from '../Helpers.js';\n/**\n * STM recording state class.\n *\n * @internal\n */\nexport class AutoRecordingStateClass extends RecordingStateClass.mixin(Delayable) {\n    onDisable(stm) {\n        const\n            transaction = stm[TRANSACTION_PROP],\n            timer       = stm[TRANSACTION_TIMER_PROP];\n        if (timer) {\n            this.clearTimeout(timer);\n        }\n        stm.notifyStoresAboutStateRecordingStop(transaction, { disabled : true });\n        return {\n            [STATE_PROP]             : 'disabledstate',\n            [TRANSACTION_PROP]       : null,\n            [TRANSACTION_TIMER_PROP] : null\n        };\n    }\n    onAutoRecordOn(stm) {\n        throwInvalidMethodCall();\n    }\n    onAutoRecordOff(stm) {\n        const timer       = stm[TRANSACTION_TIMER_PROP];\n        if (timer) {\n            this.clearTimeout(timer);\n        }\n        return {\n            [STATE_PROP]             : 'recordingstate',\n            [AUTO_RECORD_PROP]       : false,\n            [TRANSACTION_TIMER_PROP] : null\n        };\n    }\n    onStopTransaction(stm, title) {\n        const\n            transaction = stm[TRANSACTION_PROP],\n            timer       = stm[TRANSACTION_TIMER_PROP],\n            queue       = stm[QUEUE_PROP];\n        let position = stm[POS_PROP];\n        if (timer) {\n            this.clearTimeout(timer);\n        }\n        if (transaction.length) {\n            if (!transaction.title && !title && stm.getTransactionTitle) {\n                transaction.title = stm.getTransactionTitle(transaction);\n            }\n            else if (title) {\n                transaction.title = title;\n            }\n            queue[position] = transaction;\n            queue.length    = ++position;\n        }\n        return [{\n            [STATE_PROP]             : 'autoreadystate',\n            [POS_PROP]               : position,\n            [TRANSACTION_PROP]       : null,\n            [TRANSACTION_TIMER_PROP] : null\n        }, () => {\n            stm.notifyStoresAboutStateRecordingStop(transaction, { stop : true });\n        }];\n    }\n    onStopTransactionDelayed(stm) {\n        let timer = stm[TRANSACTION_TIMER_PROP];\n        if (timer) {\n            this.clearTimeout(timer);\n        }\n        timer = this.setTimeout(\n            () => {\n                stm.stopTransaction();\n            },\n            stm.autoRecordTransactionStopTimeout\n        );\n        return {\n            [STATE_PROP]             : AutoRecordingState,\n            [TRANSACTION_TIMER_PROP] : timer\n        };\n    }\n    onResetQueue(stm, options) {\n        return resetQueue(stm, options);\n    }\n    onRejectTransaction(stm) {\n        const\n            transaction = stm[TRANSACTION_PROP],\n            timer = stm[TRANSACTION_TIMER_PROP];\n        if (timer) {\n            this.clearTimeout(timer);\n        }\n        return [{\n            [STATE_PROP]             : 'restoringstate',\n            [TRANSACTION_PROP]       : null,\n            [TRANSACTION_TIMER_PROP] : null\n        }, () => {\n            if (transaction.length) {\n                transaction.undo();\n            }\n            return [\n                'autoreadystate',\n                () => {\n                    stm.notifyStoresAboutStateRecordingStop(transaction, { rejected : true });\n                }\n            ];\n        }];\n    }\n    onModelUpdate(stm, ...rest) {\n        super.onModelUpdate(stm, ...rest);\n        stm.stopTransactionDelayed();\n    }\n    onModelInsertChild(stm, ...rest) {\n        super.onModelInsertChild(stm, ...rest);\n        stm.stopTransactionDelayed();\n    }\n    onModelRemoveChild(stm, ...rest) {\n        super.onModelRemoveChild(stm, ...rest);\n        stm.stopTransactionDelayed();\n    }\n    onStoreModelAdd(stm, ...rest)    {\n        super.onStoreModelAdd(stm, ...rest);\n        stm.stopTransactionDelayed();\n    }\n    onStoreModelInsert(stm, ...rest) {\n        super.onStoreModelInsert(stm, ...rest);\n        stm.stopTransactionDelayed();\n    }\n    onStoreModelRemove(stm, ...rest) {\n        super.onStoreModelRemove(stm, ...rest);\n        stm.stopTransactionDelayed();\n    }\n    onStoreRemoveAll(stm, ...rest)   {\n        super.onStoreRemoveAll(stm, ...rest);\n        stm.stopTransactionDelayed();\n    }\n}\n/**\n * STM recording state.\n *\n * @internal\n */\nconst AutoRecordingState = new AutoRecordingStateClass();\nexport default AutoRecordingState;\nRegistry.registerStmState('autorecordingstate', AutoRecordingState);\n", "/**\n * @module Core/data/stm/StateTrackingManager\n */\nimport Base from '../../Base.js';\nimport IdHelper from '../../helper/IdHelper.js';\nimport Events from '../../mixin/Events.js';\nimport StateBase from './state/StateBase.js';\nimport DisabledState from './state/DisabledState.js';\nimport ReadyState from './state/ReadyState.js';\nimport RecordingState from './state/RecordingState.js';\nimport RestoringState from './state/RestoringState.js';\nimport AutoReadyState from './state/AutoReadyState.js';\nimport AutoRecordingState from './state/AutoRecordingState.js';\nimport Registry from './state/Registry.js';\nimport UpdateAction from './action/UpdateAction.js';\nimport InsertChildAction from './action/InsertChildAction.js';\nimport RemoveChildAction from './action/RemoveChildAction.js';\nimport AddAction from './action/AddAction.js';\nimport InsertAction from './action/InsertAction.js';\nimport RemoveAction from './action/RemoveAction.js';\nimport RemoveAllAction from './action/RemoveAllAction.js';\nimport { STATE_PROP, STORES_PROP, QUEUE_PROP, POS_PROP, TRANSACTION_PROP, TRANSACTION_TIMER_PROP, AUTO_RECORD_PROP, IS_APPLYING_STASH } from './Props.js';\nexport const makeModelUpdateAction = (model, newData, oldData, isInitialUserAction) => {\n    return new UpdateAction({\n        model,\n        newData,\n        oldData,\n        isInitialUserAction\n    });\n};\nexport const makeModelInsertChildAction = (parentModel, insertIndex, childModels, context) => {\n    return new InsertChildAction({\n        parentModel,\n        childModels,\n        insertIndex,\n        context\n    });\n};\nexport const makeModelRemoveChildAction = (parentModel, childModels, context) => {\n    return new RemoveChildAction({\n        parentModel,\n        childModels,\n        context\n    });\n};\nexport const makeStoreModelAddAction = (store, modelList, silent) => {\n    return new AddAction({\n        store,\n        modelList,\n        silent\n    });\n};\nexport const makeStoreModelInsertAction = (store, insertIndex, modelList, context, silent) => {\n    return new InsertAction({\n        store,\n        insertIndex,\n        modelList,\n        context,\n        silent\n    });\n};\nexport const makeStoreModelRemoveAction = (store, modelList, context, silent) => {\n    return new RemoveAction({\n        store,\n        modelList,\n        context,\n        silent\n    });\n};\nexport const makeStoreRemoveAllAction = (store, allRecords, silent) => {\n    return new RemoveAllAction({\n        store,\n        allRecords,\n        silent\n    });\n};\nconst stateTransition = (stm, event, ...args) => {\n    const\n        oldState = stm.state,\n        newState = event.call(stm[STATE_PROP], stm, ...args);\n    if (typeof newState === 'string') {\n        stm[STATE_PROP] = Registry.resolveStmState(newState);\n    }\n    else if (newState instanceof StateBase) {\n        stm[STATE_PROP] = newState;\n    }\n    else if (Array.isArray(newState)) {\n        const [state, next] = newState;\n        if (typeof state === 'string') {\n            stm[STATE_PROP] = Registry.resolveStmState(state);\n        }\n        else if (state instanceof StateBase) {\n            stm[STATE_PROP] = state;\n        }\n        else if (state && typeof state === 'object') {\n            stm = Object.assign(stm, state);\n            stm[STATE_PROP] = Registry.resolveStmState(stm[STATE_PROP]);\n        }\n        if (typeof next === 'function') {\n            stateTransition(stm, next, ...args);\n        }\n    }\n    else if (newState && typeof newState === 'object') {\n        stm = Object.assign(stm, newState);\n        stm[STATE_PROP] = Registry.resolveStmState(stm[STATE_PROP]);\n    }\n    if (oldState !== ReadyState && oldState !== AutoReadyState && (newState !== ReadyState && newState !== AutoReadyState)) {\n        stm.trigger('ready');\n    }\n};\n/**\n * Tracks the state of every store registered via {@link #function-addStore}. It is {@link #config-disabled} by default\n * so remember to call {@link #function-enable} when your stores are registered and initial dataset is loaded.\n * Use {@link #function-undo} / {@link #function-redo} method calls to restore state to a particular\n * point in time\n *\n * ```javascript\n * stm = new StateTrackingManager({\n *     autoRecord : true,\n *     listeners  : {\n *        'recordingstop' : () => {\n *            // your custom code to update undo/redo GUI controls\n *            updateUndoRedoControls();\n *        },\n *        'restoringstop' : ({ stm }) => {\n *            // your custom code to update undo/redo GUI controls\n *            updateUndoRedoControls();\n *        },\n *        'disabled' : () => {\n *            // in Gantt, Scheduler and other scheduling products,\n *            // also need to update the undo/redo controls on `disabled`\n *            // event, due to implementation details\n *            updateUndoRedoControls();\n *        }\n *    },\n *    getTransactionTitle : (transaction) => {\n *        // your custom code to analyze the transaction and return custom transaction title\n *        const lastAction = transaction.queue[transaction.queue.length - 1];\n *\n *        if (lastAction instanceof AddAction) {\n *            let title = 'Add new record';\n *        }\n *\n *        return title;\n *    }\n * });\n *\n * stm.addStore(userStore);\n * stm.addStore(companyStore);\n * stm.addStore(otherStore);\n *\n * stm.enable();\n * ```\n *\n * **Note:** STM currently does not support undoing server side added and saved records.\n * Therefore it's recommended to {@link #function-resetQueue reset the queue}\n * each time a tracked store(s) loads from or saves its changes to the server.\n * If Crud Manager is used it can be done like this:\n *\n * ```javascript\n * crudManager.on({\n *     requestDone() {\n *         stm.resetQueue();\n *     }\n * });\n * ```\n *\n * and in case individual stores are used:\n *\n * ```javascript\n * ajaxStore.on({\n *     afterRequest({ exception }) {\n *         if (!exception) {\n *             stm.resetQueue();\n *         }\n *     }\n * });\n * ```\n *\n * @mixes Core/mixin/Events\n * @extends Core/Base\n */\nexport default class StateTrackingManager extends Events(Base) {\n    static get defaultConfig() {\n        return {\n            /**\n             * Default manager disabled state\n             *\n             * @config {Boolean}\n             * @default\n             */\n            disabled : true,\n            /**\n             * Whether to start transaction recording automatically in case the Manager is enabled.\n             *\n             * In the auto recording mode, the manager waits for the first change in any store being managed and starts a transaction, i.e.\n             * records any changes in its monitored stores. The transaction lasts for {@link #config-autoRecordTransactionStopTimeout} and\n             * afterwards creates one undo/redo step, including all changes in the stores during that period of time.\n             *\n             * In non auto recording mode you have to call {@link #function-startTransaction} / {@link #function-stopTransaction} to start and end\n             * a transaction.\n             *\n             * @config {Boolean}\n             * @default\n             */\n            autoRecord : false,\n            /**\n             * The transaction duration (in ms) for the auto recording mode {@link #config-autoRecord}\n             *\n             * @config {Number}\n             * @default\n             */\n            autoRecordTransactionStopTimeout : 100,\n            /**\n             * Store model update action factory\n             *\n             * @config {Function}\n             * @default\n             * @private\n             */\n            makeModelUpdateAction,\n            /**\n             * Store insert child model action factory.\n             *\n             * @config {Function}\n             * @default\n             * @private\n             */\n            makeModelInsertChildAction,\n            /**\n             * Store remove child model action factory.\n             *\n             * @config {Function}\n             * @default\n             * @private\n             */\n            makeModelRemoveChildAction,\n            /**\n             * Store add model action factory.\n             *\n             * @config {Function}\n             * @default\n             * @private\n             */\n            makeStoreModelAddAction,\n            /**\n             * Store insert model action factory.\n             *\n             * @config {Function}\n             * @default\n             * @private\n             */\n            makeStoreModelInsertAction,\n            /**\n             * Store remove model action factory.\n             *\n             * @config {Function}\n             * @default\n             * @private\n             */\n            makeStoreModelRemoveAction,\n            /**\n             * Store remove all models action factory.\n             *\n             * @config {Function}\n             * @default\n             * @private\n             */\n            makeStoreRemoveAllAction,\n            /**\n             * Function to create a transaction title if none is provided.\n             * The function receives a transaction and should return a title.\n             *\n             * @config {Function}\n             * @param {Core.data.stm.Transaction} transaction\n             * @returns {String}\n             * @default\n             */\n            getTransactionTitle : null\n        };\n    }\n    construct(...args) {\n        Object.assign(this, {\n            [STATE_PROP]             : ReadyState,\n            [STORES_PROP]            : [],\n            [QUEUE_PROP]             : [],\n            [POS_PROP]               : 0,\n            [TRANSACTION_PROP]       : null,\n            [TRANSACTION_TIMER_PROP] : null,\n            [AUTO_RECORD_PROP]       : false,\n            [IS_APPLYING_STASH]      : false,\n            stashedTransactions      : {}\n        });\n        super.construct(...args);\n    }\n    /**\n     * Gets current state of the manager\n     *\n     * @property {Core.data.stm.state.StateBase}\n     */\n    get state() {\n        return this[STATE_PROP];\n    }\n    /**\n     * Gets current undo/redo queue position\n     *\n     * @property {Number}\n     */\n    get position() {\n        return this[POS_PROP];\n    }\n    /**\n     * Gets current undo/redo queue length\n     *\n     * @property {Number}\n     */\n    get length() {\n        return this[QUEUE_PROP].length;\n    }\n    /**\n     * Gets all the stores registered in STM\n     *\n     * @property {Core.data.Store[]}\n     */\n    get stores() {\n        return Array.from(this[STORES_PROP]);\n    }\n    /**\n     * Checks if a store has been added to the manager\n     *\n     * @param  {Core.data.Store} store\n     * @returns {Boolean}\n     */\n    hasStore(store) {\n        return this[STORES_PROP].includes(store);\n    }\n    /**\n     * Adds a store to the manager\n     *\n     * @param {Core.data.Store} store\n     */\n    addStore(store) {\n        if (!this.hasStore(store)) {\n            this[STORES_PROP].push(store);\n            store.stm = this;\n            store.forEach(model => model.stm = this);\n            // The above forEach iterates all models in the store except the root model, then, for tree structure store,\n            // it needs to assign stm prop manually to the root, in order to avoid bug like this one: https://github.com/bryntum/support/issues/7581\n            if (store.isTree) {\n                store.rootNode.stm = this;\n            }\n        }\n    }\n    /**\n     * Removes a store from the manager\n     *\n     * @param {Core.data.Store} store\n     */\n    removeStore(store) {\n        if (this.hasStore(store)) {\n            this[STORES_PROP] = this[STORES_PROP].filter(s => s !== store);\n            store.stm = null;\n            store.forEach(model => model.stm = null);\n        }\n    }\n    /**\n     * Calls `fn` for each store registered in STM.\n     *\n     * @param {Function} fn (store, id) => ...\n     */\n    forEachStore(fn) {\n        this[STORES_PROP].forEach(s => fn(s, s.id));\n    }\n    //#region Disabled state\n    /**\n     * Get/set manager disabled state\n     *\n     * @property {Boolean}\n     */\n    get disabled() {\n        return this.state === DisabledState;\n    }\n    set disabled(val) {\n        const me = this;\n        if (me.disabled !== val) {\n            if (val) {\n                stateTransition(me, me.state.onDisable, me);\n            }\n            else {\n                stateTransition(me, me.state.onEnable, me);\n            }\n            me.trigger('stmDisabled', { disabled : val });\n            /**\n             * Fired when the disabled state of the STM changes\n             *\n             * @event disabled\n             * @param {Core.data.stm.StateTrackingManager} source\n             * @param {Boolean} disabled The current disabled state of the STM\n             */\n            me.trigger('disabled', { disabled : val });\n        }\n    }\n    get enabled() {\n        return !this.disabled;\n    }\n    /**\n     * Enables manager\n     */\n    enable() {\n        this.disabled = false;\n    }\n    /**\n     * Disables manager\n     */\n    disable() {\n        this.disabled = true;\n    }\n    //#endregion\n    /**\n     * Checks manager ready state\n     * @readonly\n     * @property {Boolean}\n     */\n    get isReady() {\n        return this.state === ReadyState || this.state === AutoReadyState;\n    }\n    waitForReadiness() {\n        return this.await('ready', false);\n    }\n    /**\n     * Checks manager recording state\n     * @readonly\n     * @property {Boolean}\n     */\n    get isRecording() {\n        return this.state === RecordingState || this.state === AutoRecordingState;\n    }\n    /**\n     * Checks if STM is restoring a stash\n     * @readonly\n     * @property {Boolean}\n     * @internal\n     */\n    get isApplyingStash() {\n        return this[IS_APPLYING_STASH];\n    }\n    /**\n     * Gets/sets manager auto record option\n     *\n     * @property {Boolean}\n     */\n    get autoRecord() {\n        return this[AUTO_RECORD_PROP];\n    }\n    set autoRecord(value) {\n        const me = this;\n        if (me.autoRecord != value) {\n            if (value) {\n                stateTransition(me, me.state.onAutoRecordOn, me);\n            }\n            else {\n                stateTransition(me, me.state.onAutoRecordOff, me);\n            }\n        }\n    }\n    /**\n     * Starts undo/redo recording transaction.\n     *\n     * @param {String} [title]\n     */\n    startTransaction(title = null) {\n        stateTransition(this, this.state.onStartTransaction, title);\n    }\n    /**\n     * Stops undo/redo recording transaction\n     *\n     * @param {String} [title]\n     */\n    stopTransaction(title = null) {\n        stateTransition(this, this.state.onStopTransaction, title);\n    }\n    /**\n     * Stops undo/redo recording transaction after {@link #config-autoRecordTransactionStopTimeout} delay.\n     *\n     * @private\n     */\n    stopTransactionDelayed() {\n        stateTransition(this, this.state.onStopTransactionDelayed);\n    }\n    /**\n     * Rejects currently recorded transaction.\n     */\n    rejectTransaction() {\n        stateTransition(this, this.state.onRejectTransaction);\n    }\n    /**\n     * Gets currently recording STM transaction.\n     * @readonly\n     * @property {Core.data.stm.Transaction}\n     */\n    get transaction() {\n        return this[TRANSACTION_PROP];\n    }\n    /**\n     * Gets titles of all recorded undo/redo transactions\n     * @readonly\n     * @property {String[]}\n     */\n    get queue() {\n        return this[QUEUE_PROP].map((t) => t.title);\n    }\n    get rawQueue() {\n        return this[QUEUE_PROP];\n    }\n    /**\n     * Gets manager restoring state.\n     * @readonly\n     * @property {Boolean}\n     */\n    get isRestoring() {\n        return this.state === RestoringState || this.isApplyingStash;\n    }\n    /**\n     * Checks if the manager can undo.\n     *\n     * @property {Boolean}\n     */\n    get canUndo() {\n        return this.state.canUndo(this);\n    }\n    /**\n     * Checks if the manager can redo.\n     *\n     * @property {Boolean}\n     */\n    get canRedo() {\n        return this.state.canRedo(this);\n    }\n    /**\n     * Undoes current undo/redo transaction.\n     * @param {Number} [steps=1]\n     * @returns {Promise} A promise which is resolved when undo action has been performed\n     */\n    async undo(steps = 1) {\n        if (!this.isReady) {\n            await this.waitForReadiness();\n        }\n        stateTransition(this, this.state.onUndo, steps);\n    }\n    /**\n     * Undoes all transactions.\n     * @returns {Promise} A promise which is resolved when undo actions has been performed\n     */\n    async undoAll() {\n        if (!this.isReady) {\n            await this.waitForReadiness();\n        }\n        this.undo(this.length);\n    }\n    /**\n     * Redoes current undo/redo transaction.\n     *\n     * @param {Number} [steps=1]\n     * @returns {Promise} A promise which is resolved when redo action has been performed\n     */\n    async redo(steps = 1) {\n        if (!this.isReady) {\n            await this.waitForReadiness();\n        }\n        stateTransition(this, this.state.onRedo, steps);\n    }\n    /**\n     * Redoes all transactions.\n     * @returns {Promise} A promise which is resolved when redo actions has been performed\n     */\n    async redoAll() {\n        if (!this.isReady) {\n            await this.waitForReadiness();\n        }\n        this.redo(this.length);\n    }\n    /**\n     * Resets undo/redo queue.\n     */\n    resetQueue(/* private */options = { undo : true, redo : true }) {\n        stateTransition(this, this.state.onResetQueue, options);\n    }\n    /**\n     * Resets undo queue.\n     */\n    resetUndoQueue() {\n        this.resetQueue({ undo : true });\n    }\n    /**\n     * Resets redo queue.\n     */\n    resetRedoQueue() {\n        this.resetQueue({ redo : true });\n    }\n    notifyStoresAboutStateRecordingStart(transaction) {\n        this.forEachStore((store) => store.onStmRecordingStart?.(this, transaction));\n        /**\n         * Fired upon state recording operation starts.\n         *\n         * @event recordingStart\n         * @param {Core.data.stm.StateTrackingManager} stm\n         * @param {Core.data.stm.Transaction} transaction\n         */\n        this.trigger('recordingStart', { stm : this, transaction });\n    }\n    notifyStoresAboutStateRecordingStop(transaction, reason) {\n        this.forEachStore((store) => store.onStmRecordingStop?.(this, transaction, reason));\n        /**\n         * Fired upon state recording operation stops.\n         *\n         * @event recordingStop\n         * @param {Core.data.stm.StateTrackingManager} stm\n         * @param {Core.data.stm.Transaction} transaction\n         * @param {Object} reason Transaction stop reason\n         * @param {Boolean} reason.stop Transaction recording has been stopped in a normal way.\n         * @param {Boolean} reason.disabled Transaction recording has been stopped due to STM has been disabled.\n         * @param {Boolean} reason.rejected Transaction recording has been stopped due to transaction has been rejected.\n         */\n        this.trigger('recordingStop', { stm : this, transaction, reason });\n    }\n    notifyStoresAboutStateRestoringStart() {\n        this.forEachStore((store) => store.onStmRestoringStart?.(this));\n        /**\n         * Fired upon state restoration operation starts.\n         *\n         * @event restoringStart\n         * @param {Core.data.stm.StateTrackingManager} stm\n         */\n        this.trigger('restoringStart', { stm : this });\n    }\n    /**\n     * @param {'undo'|'redo'} cause The cause of the restore, if applicable\n     * @internal\n     */\n    notifyStoresAboutStateRestoringStop({ cause, transactions }) {\n        this.forEachStore((store) => store.onStmRestoringStop?.(this));\n        /**\n         * Fired upon state restoration operation stops.\n         *\n         * @event restoringStop\n         * @param {Core.data.stm.StateTrackingManager} stm\n         */\n        this.trigger('restoringStop', { stm : this, cause, transactions });\n    }\n    notifyStoresAboutQueueReset(options) {\n        this.forEachStore((store) => store.onStmQueueReset?.(this, options));\n        /**\n         * Fired upon state undo/redo queue reset.\n         *\n         * @event queueReset\n         * @param {Core.data.stm.StateTrackingManager} stm\n         */\n        this.trigger('queueReset', { stm : this, options });\n    }\n    /**\n     * Method to call from model STM mixin upon model update\n     *\n     * @param {Core.data.Model} model\n     * @param {Object} newData\n     * @param {Object} oldData\n     *\n     * @private\n     */\n    onModelUpdate(model, newData, oldData, isInitialUserAction) {\n        stateTransition(this, this.state.onModelUpdate, model, newData, oldData, isInitialUserAction);\n    }\n    /**\n     * Method to call from model STM mixin upon tree model child insertion\n     *\n     * @param {Core.data.Model} parentModel Parent model\n     * @param {Number} index Insertion index\n     * @param {Core.data.Model[]} childModels Array of models inserted\n     * @param {Map} context Map with inserted models as keys and objects with previous parent,\n     *                      and index at previous parent.\n     *\n     * @private\n     */\n    onModelInsertChild(parentModel, index, childModels, context) {\n        stateTransition(this, this.state.onModelInsertChild, parentModel, index, childModels, context);\n    }\n    /**\n     * Method to call from model STM mixin upon tree model child removal\n     *\n     * @param {Core.data.Model} parentModel\n     * @param {Core.data.Model[]} childModels\n     * @param {Map} context\n     *\n     * @private\n     */\n    onModelRemoveChild(parentModel, childModels, context) {\n        stateTransition(this, this.state.onModelRemoveChild, parentModel, childModels, context);\n    }\n    /**\n     * Method to call from store STM mixin upon store models adding\n     *\n     * @param {Core.data.Store} store\n     * @param {Core.data.Model[]} models\n     * @param {Boolean} silent\n     *\n     * @private\n     */\n    onStoreModelAdd(store, models, silent) {\n        stateTransition(this, this.state.onStoreModelAdd, store, models, silent);\n    }\n    /**\n     * Method to call from store STM mixin upon store models insertion\n     *\n     * @param {Core.data.Store} store\n     * @param {Number} index\n     * @param {Core.data.Model[]} models\n     * @param {Map} context\n     * @param {Boolean} silent\n     *\n     * @private\n     */\n    onStoreModelInsert(store, index, models, context, silent) {\n        stateTransition(this, this.state.onStoreModelInsert, store, index, models, context, silent);\n    }\n    /**\n     * Method to call from store STM mixin upon store models removal\n     *\n     * @param {Core.data.Store} store\n     * @param {Core.data.Model[]} models\n     * @param {Object} context\n     * @param {Boolean} silent\n     *\n     * @private\n     */\n    onStoreModelRemove(store, models, context, silent) {\n        stateTransition(this, this.state.onStoreModelRemove, store, models, context, silent);\n    }\n    /**\n     * Method to call from store STM mixin upon store clear\n     *\n     * @param {Core.data.Store} store\n     * @param {Core.data.Model[]} allRecords\n     * @param {Boolean} silent\n     *\n     * @private\n     */\n    onStoreRemoveAll(store, allRecords, silent) {\n        stateTransition(this, this.state.onStoreRemoveAll, store, allRecords, silent);\n    }\n    // UI key event handling\n    onUndoKeyPress(event) {\n        const me = this;\n        if (me.enabled) {\n            if (event.shiftKey) {\n                if (me.canRedo) {\n                    event.preventDefault();\n                    me.redo();\n                }\n            }\n            else if (me.canUndo) {\n                event.preventDefault();\n                me.undo();\n            }\n        }\n    }\n    stash() {\n        const me = this;\n        if (this.transaction) {\n            const id = IdHelper.generateId('_stashedTransactionGeneratedId_');\n            me.stashedTransactions[id] = me.transaction;\n            me.rejectTransaction();\n            return id;\n        }\n    }\n    applyStash(id) {\n        const\n            me          = this,\n            transaction = me.stashedTransactions[id];\n        me[IS_APPLYING_STASH] = true;\n        if (transaction) {\n            me.startTransaction(transaction.title);\n            transaction.redo();\n            delete me.stashedTransactions[id];\n        }\n        me[IS_APPLYING_STASH] = false;\n    }\n}\nStateTrackingManager._$name = 'StateTrackingManager';", "import Base from '../Base.js';\n/**\n * @module Core/mixin/Finalizable\n */\n/**\n * This mixin provides an asynchronous completion mechanism. This allows a process to coordinate its async actions\n * (such as Ajax requests or user interaction) with cleanup.\n *\n * Consider a context tracking helper class, for example:\n *\n * ```javascript\n *  class Context extends Base.mixin(Finalizable) {\n *      // ...\n *\n *      async finish() {\n *          this.owner.trigger('finish', {\n *              context : this\n *          });\n *\n *          // Wait for any scheduled finalizer to run...\n *          await this.finalize();\n *      }\n *\n *      doFinalize() {\n *          this.destroy();\n *      }\n *  }\n * ```\n *\n * When the `finish` event is processed, the receiver can register a promise for whatever processing it would like to\n * perform:\n *\n * ```javascript\n *  class Foo {\n *      onFinish({ context }) {\n *          context.finalizer = this.askUser(context);\n *      }\n *\n *      async askUser(context) {\n *          //\n *      }\n *  }\n * ```\n *\n * @mixin\n * @internal\n */\nexport default Target => class Finalizable extends (Target || Base) {\n    static get $name() {\n        return 'Finalizable';\n    }\n    construct(...args) {\n        super.construct(...args);\n        /**\n         * This property can be set any time prior to calling {@link #function-finalize} (i.e., when the\n         * {@link #property-isFinalizing} property goes to `true`). When set, this instance will `await` this\n         * promise before completing the finalization process by calling {@link #function-doFinalize}.\n         * @member {Promise} finalizer\n         */\n        this.finalizer = null;\n        /**\n         * This property holds the `Promise` that will resolve when {@link #function-finalize} has completed. It is\n         * set when {@link #function-finalize} is called and cleared on return.\n         * @member {Boolean} finalizing\n         * @readonly\n         * @private\n         */\n        this.finalizing = null;\n        /**\n         * This property is `true` once the instance completes the {@link #function-finalize} method.\n         * @member {Boolean} isFinalized\n         * @readonly\n         */\n        this.isFinalized = false;\n        /**\n         * This property is set to `true` when {@link #function-finalize} is called.\n         * @member {Boolean} isFinalizing\n         * @readonly\n         */\n        this.isFinalizing = false;\n    }\n    /**\n     * This template method is called at the end of {@link #function-finalize}. By default it calls `destroy()`, but\n     * can be replaced by the derived class. This can be useful if it is not the `Finalizable` instance that awaits\n     * the {@link #function-finalize} method.\n     */\n    doFinalize() {\n        this.destroy();\n    }\n    /**\n     * This method is called (typically by this instance or its owner) to cleanup this instance while possibly first\n     * waiting for the {@link #property-finalizer} promise to settle. Once settled, the {@link #function-doFinalize}\n     * method is called.\n     * @async\n     */\n    finalize() {\n        const me = this;\n        let ret = me.finalizing;\n        if (!ret && !me.isFinalized) {\n            me.isFinalizing = true;  // note: we never clear this flag (use isFinalized to know if we're done)\n            // If we are called during finalization, we want to return the same promise, so we cache it away.\n            me.finalizing = ret = me._awaitFinalizer();\n        }\n        return ret;\n    }\n    async _awaitFinalizer() {\n        const me = this;\n        try {\n            await me.finalizer;\n        }\n        finally {\n            // be sure we clean up even if an exception is thrown by the finalizer...\n            me.finalizing = null;\n            me.isFinalized = true;\n            me.doFinalize();\n        }\n    }\n};\n", "import Base from '../../Base.js';\nimport BrowserHelper from '../../helper/BrowserHelper.js';\nimport DomHelper from '../../helper/DomHelper.js';\nimport EventHelper from '../../helper/EventHelper.js';\nimport Delayable from '../../mixin/Delayable.js';\nimport Finalizable from '../../mixin/Finalizable.js';\nimport Identifiable from '../../mixin/Identifiable.js';\nimport DomDataStore from '../../data/DomDataStore.js';\nimport Objects from '../../helper/util/Objects.js';\n/**\n * @module Core/util/drag/DragContext\n */\nconst\n    ABORTED  = Symbol('dragAbort'), // Drag has been aborted\n    INIT     = Symbol('dragInit'),  // Button is down but insufficient movement to start the drag\n    DRAGGING = Symbol('dragDrag'),  // Button is down and movement has started a drag\n    DROPPED  = Symbol('dragDrop'),  // Button has been released and drop has occurred\n    lockDirections = {\n        x : 'horizontal',\n        y : 'vertical'\n    };\n/**\n * This class is created during drag operations of {@link Core/mixin/Draggable}. It holds the state of an ongoing drag\n * operation.\n * @extends Core/Base\n */\nexport default class DragContext extends Base.mixin(Finalizable, Delayable, Identifiable) {\n    static $name = 'DragContext';\n    static get configurable() {\n        return {\n            /**\n             * The element that will have the {@link Core.mixin.Draggable#property-draggingItemCls}. This element is\n             * determined by the {@link Core.mixin.Draggable#config-dragItemSelector}.\n             * @config {HTMLElement}\n             */\n            itemElement : null,\n            /**\n             * The `ScrollManager` instance to use for scrolling while dragging.\n             * @config {Core.util.ScrollManager}\n             * @private\n             */\n            scrollManager : null,\n            /**\n             * Config for `startMonitoring` call.\n             * @config {Object}\n             * @private\n             */\n            monitoringConfig : null,\n            /**\n             * The source of the drag operation.\n             * @config {Core.mixin.Draggable}\n             * @default\n             * @readonly\n             * @private\n             */\n            source : null,\n            /**\n             * The current target of the drag.\n             * @member {Core.mixin.Droppable}\n             * @readonly\n             * @private\n             */\n            target : null,\n            /**\n             * The current target element of the drag.\n             * @member {HTMLElement}\n             * @private\n             */\n            targetElement : null,\n            /**\n             * The minimum distance from the touchstart/mousedown/pointerdown that must be moved to actually start a\n             * drag operation.\n             * @config {Number}\n             * @default\n             * @readonly\n             */\n            threshold : 5,\n            /**\n             * The minimum amount of time a touch must be maintained before it will initiate a drag. Movement prior to\n             * this time will cancel the drag in order to allow touch scrolling.\n             * @config {Number}\n             * @default\n             */\n            touchStartDelay : 300\n        };\n    }\n    static get identifiable() {\n        return {};\n    }\n    /**\n     * The current DOM event being processed.\n     * @member {Event} event\n     * @readonly\n     */\n    construct(...args) {\n        super.construct(...args);\n        const\n            me = this,\n            { event } = me;\n        Object.assign(me, {\n            /**\n             * This property holds the `altKey` state of the most recent event.\n             * @member {Boolean}\n             */\n            altKey : null,\n            /**\n             * An array of functions to call when cleaning up the context instance.\n             * @member {Function[]}\n             * @private\n             */\n            cleaners : [],\n            /**\n             * This property holds the `ctrlKey` state of the most recent event.\n             * @member {Boolean}\n             */\n            ctrlKey : null,\n            /**\n             * Container for data associated with the drag. Data items are added by the {@link Core.mixin.Draggable}\n             * when the drag starts.\n             * @member {Map}\n             * @private\n             */\n            data : new Map(),\n            /**\n             * The element from which the drag operation started.\n             * @member {HTMLElement}\n             * @readonly\n             */\n            element : event.target,\n            /**\n             * The event that completed the drag (a `mouseup`, `pointerup` or `touchend`).\n             * @member {Event}\n             * @readonly\n             */\n            endEvent : null,\n            /**\n             * The most recent `mousemove`, `pointermove` or `touchmove` event.\n             * @member {Event}\n             * @private\n             */\n            lastMoveEvent : null,\n            /**\n             * This property holds the `metaKey` state of the most recent event.\n             * @member {Boolean}\n             */\n            metaKey : null,\n            /**\n             * The previous {@link #property-target} of the drag.\n             * @member {Core.mixin.Droppable}\n             * @readonly\n             * @private\n             */\n            previousTarget : null,\n            /**\n             * The scroll actions reported by the {@link #config-scrollManager}.\n             * @member {Object}\n             * @private\n             */\n            scrollerAction : null,\n            /**\n             * This property holds the `shiftKey` state of the most recent event.\n             * @member {Boolean}\n             */\n            shiftKey : null,\n            /**\n             * This property holds the current state of the drag process.\n             *\n             * This will be one of the following values:\n             *\n             *  - `DragContext.STATE.INIT` - The button is down but there is insufficient movement to start the drag.\n             *  - `DragContext.STATE.DRAGGING` - The button is down and movement has started the drag.\n             *  - `DragContext.STATE.DROPPED` - The button has been released and drop has occurred.\n             *  - `DragContext.STATE.ABORTED` - The drag has been aborted (this happens if the user presses the `ESC`\n             *    key or if the {@link #function-abort} method is called).\n             *\n             * @member {Symbol}\n             * @readonly\n             * @internal\n             */\n            state : INIT,\n            /**\n             * The event that started the drag operation.\n             * @member {Event}\n             * @readonly\n             */\n            startEvent : event,\n            /**\n             * The timer that fires when a touch pointermove is allowed to start the drag. A touch pointermove event\n             * prior to this will `abort()` the drag to allow touch scrolling.\n             * @member {Number}\n             * @private\n             */\n            touchStartTimer : null,\n            /**\n             * Stores the value from writes to the {@link #property-valid} property.\n             * @member {Boolean}\n             * @private\n             */\n            _valid : true\n        });\n        if (('touches' in event) && me.touchStartDelay) {\n            me.touchStartTimer = me.setTimeout(() => me.touchStartTimer = null, me.touchStartDelay, 'touchStartDelay');\n        }\n        EventHelper.on({\n            element : globalThis,\n            blur    : 'onWindowBlur',\n            thisObj : me\n        });\n    }\n    doDestroy() {\n        const\n            me = this,\n            { source, target } = me;\n        me.cleanup();\n        if (target?.dropping === me) {\n            target.dropping = null;\n        }\n        if (source?.dragging === me) {\n            source.dragging = null;\n        }\n        super.doDestroy();\n    }\n    onWindowBlur() {\n        if (this.started) {\n            this.abort();\n        }\n    }\n    /**\n     * This property is `true` if the {@link #function-abort} method was called and `false` otherwise. This\n     * is typically because the user pressed the ESC key, however, a drag can be aborted for other reasons.\n     * @property {Boolean}\n     * @readonly\n     */\n    get aborted() {\n        return this.state === ABORTED;\n    }\n    /**\n     * Returns `true` if the drag has completed either by mouse/pointerup or the {@link #function-abort} method.\n     * @property {Boolean}\n     * @readonly\n     */\n    get completed() {\n        return this.isDestroying || this.aborted || this.endEvent !== null;\n    }\n    /**\n     * This property is `true` if the drag {@link #config-threshold} has not yet been reached.\n     * @property {Boolean}\n     * @readonly\n     */\n    get pending() {\n        return this.state === INIT;\n    }\n    /**\n     * This property is `true` if the drag {@link #config-threshold} has been reached and the drag operation is active.\n     * @property {Boolean}\n     * @readonly\n     */\n    get started() {\n        return this.state !== INIT && !this.aborted;\n    }\n    /**\n     * This property is `true` when the drag is in a valid drop state. This can be set to `false` to indicate the drop\n     * is invalid. Setting to `true` does not ensure that the property will be `true` when next read due to other factors\n     * that are required to make the drop valid. For example, setting `valid = true` will still return `false` if called\n     * before the drag {@link #config-threshold} has not been reached or if the {@link #function-abort} method has been\n     * called.\n     * @property {Boolean}\n     */\n    get valid() {\n        return this.started && this.targetElement != null && this._valid;\n    }\n    set valid(v) {\n        this._valid = v;\n    }\n    //region Data Access\n    /**\n     * Retrieves a data item from the drag source. This method can only be called after the drag has completed.\n     * @param {String|String[]} name The name of the data item.\n     * @returns {*}\n     */\n    async get(name) {\n        if (this.aborted) {\n            throw new Error('Data is not available on aborted drag');\n        }\n        if (!this.completed) {\n            throw new Error('Data is not available until drag completion');\n        }\n        if (Array.isArray(name)) {\n            return Promise.all(name.map(s => this.get(s)));\n        }\n        let value = this.data.get(name);\n        if (typeof value === 'function') {\n            value = await value();\n            this.data.set(name, value);\n        }\n        return value;\n    }\n    /**\n     * Returns `true` if the named data item is present.\n     * @param {String} name The name of the data item.\n     * @returns {Boolean}\n     */\n    has(name) {\n        return this.data.has(name);\n    }\n    /**\n     * Retrieves a data item from the drag source if it is available. This will return `true` for an item that was\n     * {@link #function-set} using a renderer function.\n     * @param {String|String[]} name The name of the data item.\n     * @returns {*}\n     */\n    peek(name) {\n        if (this.aborted) {\n            throw new Error('Data is not available on aborted drag');\n        }\n        if (Array.isArray(name)) {\n            return name.map(s => this.peek(s));\n        }\n        let value = this.data.get(name);\n        if (typeof value === 'function') {\n            value = true;\n        }\n        return value;\n    }\n    /**\n     * Sets a data item for the drag. If a function is passed, it is called to render the data only if that data is\n     * actually requested via the {@link #function-get} method. A data renderer function can be `async`.\n     * @param {String} name The name of the data item.\n     * @param {*} value The value of the data item.\n     */\n    set(name, value) {\n        this.data.set(name, value);\n    }\n    //endregion\n    //region Configs\n    changeTarget(target, was) {\n        if (target !== was) {\n            const me = this;\n            me._target = target;\n            me.previousTarget = was;\n            if (was) {\n                was.dropping = null;\n            }\n            if (target) {\n                target.dropping = me;  // calls dragEnter/Leave on the target\n                if (target.dropping !== me) {  // if (target did not accept us)\n                    target = null;\n                    me.valid = false;\n                }\n            }\n            me._target = was;\n        }\n        return target;\n    }\n    updateTarget(target, was) {\n        const me = this;\n        if (was) {\n            me.source.dragLeaveTarget(me, was);\n        }\n        if (target) {\n            me.valid = true;\n            // Always give the target an initial dragMove since feedback/indicators will need to update on move and\n            // the lack of a move on entry will just make that a special case.\n            target.dragMove(me);\n            me.source.dragEnterTarget(me);\n        }\n    }\n    updateTargetElement(targetElement) {\n        let droppable,\n            droppables,\n            droppableSelector,\n            i,\n            t;\n        // We interrogate all encapsulating DOM elements to see if we are in a Droppable's element.\n        // If we find an element which has Droppables registered for it, we attempt to set each as\n        // our target, and go with the first one that accepts us.\n        // changeTarget sets target.dropping to this Context, and the target's dragEnter implementation\n        // may reject it by returning false.\n        for (t = targetElement; t; t = t.parentElement) {\n            droppables = DomDataStore.get(t, 'droppables');\n            if (droppables) {\n                for (i = 0; i < droppables.length; ++i) {\n                    droppable = droppables[i];\n                    // If the event target is *inside* the Droppable's root, we can ask the Droppable\n                    // to accept this DragContext.\n                    // Otherwise we can get a hit on borders.\n                    if (droppable.dropRootElement.contains(targetElement)) {\n                        droppableSelector = droppable.droppableSelector;\n                        // If the target element is not inside the Droppable's selector, give up.\n                        if (!droppableSelector || targetElement.closest(`#${DomHelper.getId(droppable.dropRootElement)} ${droppableSelector}`)) {\n                            this.target = droppable;\n                            // The found Droppable accepted this DragContext, so we're done -\n                            // we are using this Droppable.\n                            if (this.target === droppable) {\n                                return;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    //endregion\n    //region Operations\n    /**\n     * Aborts the drag. After calling this method, {@link #property-aborted} will be `true`, {@link #property-valid}\n     * will be `false` and {@link #property-completed} will be `true`.\n     */\n    abort() {\n        const\n            me = this,\n            { element, source } = me;\n        // Force a synchronous layout so that transitions from this point will work.\n        element?.getBoundingClientRect();\n        if (me.state !== DROPPED) {\n            me.state = ABORTED;\n            me.cleanup();\n        }\n        source?.endDrag(me);\n    }\n    begin() {\n        const\n            me = this,\n            { source } = me,\n            ret = source.beforeDrag(me);\n        if (ret !== false) {\n            source.dragging = me;\n        }\n        return ret;\n    }\n    cleanup() {\n        let cleaner;\n        while ((cleaner = this.cleaners.pop())) {\n            cleaner();\n        }\n    }\n    end(event) {\n        const\n            me = this,\n            { lastMoveEvent : lastEvent, target } = me,\n            { dragSwallowClickTime } = me.source;\n        me.event = me.domEvent = me.endEvent = event;\n        me.syncFlags();\n        if (me.started) {\n            if (lastEvent?.clientX !== event.clientX || lastEvent?.clientY !== event.clientY ||\n                lastEvent?.target !== event.target) {\n                // Make sure the drop event is preceded by a move to the final position...\n                me.track();\n            }\n            if (dragSwallowClickTime) {\n                // Prevent the impending document click from the mouseup event from propagating\n                // into a click on our element.\n                EventHelper.on({\n                    element : document,\n                    capture : true,\n                    expires : dragSwallowClickTime, // In case a click did not ensue, remove the listener\n                    once    : true,\n                    click(event) {\n                        event.stopPropagation();\n                    }\n                });\n            }\n            me.state = DROPPED;\n            if (target !== me.source) {\n                // If we are the target and not also the source, we need to call dragDrop() now. If we are\n                // the source, dragDrop() will be called by Draggable.\n                target?.dragDrop(me);\n            }\n        }\n    }\n    fakeKey(event, down) {\n        const\n            me = this,\n            { lastMoveEvent } = me;\n        if (lastMoveEvent && me.element) {\n            let changed;\n            // Indicate that this is a 'fake' mousemove event as a result of the keydown\n            lastMoveEvent.isKey = true;\n            if (event.key === 'Alt') {\n                if (me.altKey !== down) {\n                    me.altKey = down;\n                    changed = true;\n                }\n            }\n            else if (event.key === 'Control') {\n                if (me.ctrlKey !== down) {\n                    me.ctrlKey = down;\n                    changed = true;\n                }\n            }\n            if (changed) {\n                me.event = me.domEvent = lastMoveEvent;\n                me.track();\n            }\n        }\n    }\n    keyDown(event) {\n        if (!this.completed) {\n            if (event.key === 'Escape') {\n                this.abort();\n            }\n            else if (this.isDragToggleKey(event.key)) {\n                this.fakeKey(event, true);\n            }\n        }\n    }\n    keyUp(event) {\n        if (!this.completed && this.isDragToggleKey(event.key)) {\n            this.fakeKey(event, false);\n        }\n    }\n    getDistance(event) {\n        return EventHelper.getDistanceBetween(this.startEvent, event);\n    }\n    isDragToggleKey(key) {\n        return key === 'Control' || key === 'Alt';\n    }\n    move(event) {\n        const\n            me = this,\n            { target } = event,\n            distance = me.getDistance(event),\n            significant = distance >= me.threshold;\n        me.syncFlags();\n        if (me.touchStartTimer) {\n            if (significant) {\n                me.abort();\n            }\n            return;\n        }\n        if (target && target.nodeType === Node.ELEMENT_NODE) {\n            if (significant && !me.started) {\n                me.event = me.domEvent = event;\n                // triggers beforeDragStart, dragStart. returning false from beforeDragStart aborts drag\n                if (me.start() === false) {\n                    me.abort();\n                    return;\n                }\n            }\n            // With resize observer polyfill scroll event might fire after drop is completed but before listener is\n            // removed\n            if (me.started && !me.completed) {\n                me.lastMoveEvent = me.event = me.domEvent = event;\n                // to prevent view drag (scroll) on ipad\n                if (event.type === 'touchmove') {\n                    event.preventDefault();\n                    event.stopImmediatePropagation();\n                }\n                me.track();\n            }\n        }\n    }\n    start() {\n        const\n            me = this,\n            { scrollManager, monitoringConfig, source } = me,\n            { draggingBodyCls : activeCls, dragLock } = source,\n            element = /* source.dragWithin || */ source.dragRootElement;\n        me.state = DRAGGING;\n        // To avoid scrolling on touchmove, set all scrolling ancestors to overflow : hidden\n        if (me.startEvent.type === 'touchstart' && BrowserHelper.isMobileSafari) {\n            for (let node = me.startEvent.target.parentElement; node; node = node.parentElement) {\n                const\n                    { style } = node,\n                    overflow  = DomHelper.getStyleValue(node, 'overflow');\n                if (overflow === 'auto' || overflow == 'scroll') {\n                    if (!me.scrollingAncestors) {\n                        me.scrollingAncestors = [];\n                    }\n                    me.scrollingAncestors.push([node, style.overflow, style.overflowX, style.overflowY]);\n                    style.overflow = 'hidden';\n                }\n            }\n            me.requestAnimationFrame(() => {\n                me.scrollingAncestors.forEach(([{ style }, overflow, overflowX, overflowY]) => {\n                    style.overflow  = overflow;\n                    style.overflowX = overflowX;\n                    style.overflowY = overflowY;\n                });\n                me.scrollingAncestors = null;\n            });\n        }\n        // Now that the drag drop is confirmed to be starting, activate the configured scrollManager if present\n        if (scrollManager) {\n            const detacher = scrollManager.startMonitoring(Objects.merge({\n                scrollables : [{\n                    element\n                }],\n                direction : lockDirections[dragLock] || dragLock || 'both',\n                callback(scrollerAction) {\n                    const { lastMoveEvent } = me;\n                    if (lastMoveEvent && me.element) {\n                        // Indicate that this is a 'fake' mousemove event as a result of the scrolling\n                        lastMoveEvent.isScroll = true;\n                        me.event = me.domEvent = lastMoveEvent;\n                        me.scrollerAction = scrollerAction;\n                        me.track();\n                        me.scrollerAction = null;\n                    }\n                }\n            }, monitoringConfig));\n            me.cleaners.push(detacher);\n        }\n        // Global informational class for when DragHelper is dragging\n        const rootEl = source.dragRootElement.closest('.b-outer') || document.body;\n        rootEl.classList.add(activeCls);\n        me.cleaners.push(() => rootEl.classList.remove(activeCls));\n        if (source.startDrag(me) === false) {\n            me.cleanup();\n            return false;\n        }\n    }\n    syncFlags() {\n        const\n            me = this,\n            { event } = me;\n        me.altKey = event.altKey;\n        // Our EventHelper events are \"unfixed\" after processing, so the meta->ctrl\n        // modifier mapping will not persist. We must do the mapping here.\n        me.ctrlKey = event.ctrlKey || event.metaKey;\n        me.metaKey = event.metaKey;\n        me.shiftKey = event.shiftKey;\n    }\n    track() {\n        const\n            me = this,\n            { event, source, target } = me;\n        let targetElement = event.target,\n            touch;\n        // NOTE: we cannot syncFlags here since we are called to pass along keydown events as movement updates\n        // \"pointer-events:none\" touchmove has no effect for the touchmove event target, meaning we cannot know\n        // what's under the cursor as easily in touch devices\n        if (event.type === 'touchmove') {\n            touch = event.changedTouches[0];\n            // From MDN:\n            //  * clientX/Y - the coordinates of the touch point relative to the left/top edge of the browser viewport,\n            //    not including any scroll offset.\n            //  * The elementFromPoint() method returns the topmost Element at the specified coordinates (relative to\n            //    the viewport).\n            targetElement = DomHelper.elementFromPoint(touch.clientX, touch.clientY);\n        }\n        me.targetElement = targetElement;  // when we change elements, update me.target\n        if (target === me.target) {\n            // if we have a target and that did not change due to setting targetElement, we need to inform the target\n            // of the drag move\n            target?.dragMove(me);\n        }\n        source.trackDrag(me);\n    }\n    //endregion\n}\nDragContext.prototype.STATE = DragContext.STATE = Object.freeze({\n    ABORTED,\n    INIT,\n    DRAGGING,\n    DROPPED\n});\nDragContext._$name = 'DragContext';", "import Base from '../../Base.js';\nimport Factoryable from '../../mixin/Factoryable.js';\n/**\n * @module Core/util/drag/DragProxy\n */\n/**\n * Drag proxies are helper classes that represent the object being dragged in some visual way. This is an abstract\n * base with which particular drag proxy classes (such as, {@link Core.util.drag.DragTipProxy} are registered.\n *\n * Derived classes the various template methods of this class to manage their particular form of visual feedback.\n * @extends Core/Base\n * @internal\n */\nexport default class DragProxy extends Base.mixin(Factoryable) {\n    static get type() {\n        return 'default';\n    }\n    static get configurable() {\n        return {\n            /**\n             * The currently active `DragContext`. This context will be active prior to be passed to the proxy. This\n             * config is set by {@link #function-dragStart} and cleared by {@link #function-dragEnd}.\n             * @config {Core.util.drag.DragContext}\n             */\n            dragging : null\n        };\n    }\n    static get factoryable() {\n        return {\n            defaultType : DragProxy\n        };\n    }\n    /**\n     * The `Draggable` instance that owns this drag proxy.\n     * @member {Core.mixin.Draggable} owner\n     * @readonly\n     */\n    //region Configs\n    updateDragging(drag, was) {\n        if (was) {\n            this.close(was);\n        }\n        if (drag) {\n            this.open(drag);\n        }\n    }\n    //endregion\n    //region Operations\n    /**\n     * This template method is called when {@link #config-dragging} is reset to `null`.\n     * @param {Core.util.drag.DragContext} drag The drag instance.\n     */\n    close(drag) {\n        // template\n    }\n    /**\n     * This template method is called when {@link #config-dragging} is set to a non-`null` value.\n     * @param {Core.util.drag.DragContext} drag The drag instance.\n     */\n    open(drag) {\n        // template\n    }\n    //endregion\n    //region Drag Processing\n    /**\n     * This template method is called by the `Draggable` instance when the drag officially starts.\n     * This sets the {@link #config-dragging} config to `drag`, which triggers the call to {@link #function-open}.\n     * @param {Core.util.drag.DragContext} drag The drag instance.\n     */\n    dragStart(drag) {\n        this.dragging = drag;\n    }\n    /**\n     * This template method is called by the `Draggable` instance as drag movement occurs.\n     * @param {Core.util.drag.DragContext} drag The drag instance.\n     */\n    dragMove(drag) {\n        // template\n    }\n    /**\n     * This template method is called by the `Draggable` instance when the drag completes.\n     *\n     * This sets the {@link #config-dragging} config to `null`, which triggers the call to {@link #function-close}.\n     * @param {Core.util.drag.DragContext} drag The drag instance.\n     */\n    dragEnd(drag) {\n        this.dragging = null;\n    }\n    //endregion\n}\nDragProxy.initClass();\nDragProxy._$name = 'DragProxy';", "import Base from '../Base.js';\nimport EventHelper from '../helper/EventHelper.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\nimport DragContext from '../util/drag/DragContext.js';\nimport DragProxy from '../util/drag/DragProxy.js';\n/**\n * @module Core/mixin/Draggable\n */\n/**\n * Mix this into another class to enable drag/drop support.\n *\n * To use a draggable, it must be associated with an element that contains draggable content:\n *\n * ```javascript\n *  let draggable = new MyDraggable({\n *      dragRootElement : someElement\n *  });\n * ```\n *\n * Once the `dragRootElement` is assigned, any element inside that root is a candidate for dragging. To limit the\n * allowed element, set the {@link #config-dragSelector} config.\n *\n * ```javascript\n *  let draggable = new MyDraggable({\n *      dragRootElement : someElement,\n *      dragSelector    : '.drag-this'\n *  });\n * ```\n *\n * @mixin\n * @internal\n */\nexport default Target => class Draggable extends (Target || Base) {\n    static get $name() {\n        return 'Draggable';\n    }\n    //region Configs\n    static get configurable() {\n        return {\n            /**\n             * The current `DragContext`. This is created immediately on pointerdown but does not become active until\n             * some movement occurs. This {@link #config-dragThreshold threshold} is configurable.\n             * @member {Core.util.drag.DragContext}\n             * @readonly\n             */\n            dragging : {\n                $config : 'nullify',\n                value   : null\n            },\n            /**\n             * A CSS selector to use to ascend from the {@link #config-dragRootElement} to find the element that will\n             * gain the {@link #property-draggingCls} and {@link #property-draggingStartedCls} CSS classes.\n             * @config {String}\n             */\n            draggingClsSelector : null,\n            /**\n             * The listeners to add to the `document` during a drag.\n             * @config {Object}\n             * @private\n             */\n            dragDocumentListeners : {\n                element : document,\n                keydown : 'onDragKeyDown',\n                keyup   : 'onDragKeyUp',\n                // On mobile, a long-press will (sometimes) trigger a context menu, so we suppress it:\n                contextmenu : 'onDragContextMenu',\n                // We don't use pointermove/up because they get snared in the \"touch-action\" vs \"pan-x/y\" trap and we\n                // cannot prevent panning (aka scrolling) in response to move events if we go that way:\n                mousemove : 'onDragPointerMove',\n                mouseup   : 'onDragPointerUp',\n                // Touch desktops don't fire touchend event when touch has ended, instead pointerup is fired. iOS does\n                // fire touchend:\n                pointerup : 'onDragPointerUp',\n                touchend  : 'onDragPointerUp',\n                touchmove : {\n                    handler : 'onDragPointerMove',\n                    passive : false // We need to be able to preventDefault on the touchmove\n                }\n            },\n            /**\n             * A CSS selector to use to ascend from the drag element to find the element that will gain the\n             * {@link #property-draggingItemCls} CSS class. If not supplied, the drag element will gain this CSS\n             * class.\n             * @config {String}\n             */\n            dragItemSelector : null,\n            /**\n             * A CSS class to add to items identified by the {@link #config-dragItemSelector} when the mouse\n             * enters.\n             * @config {String}\n             */\n            dragItemOverCls : null,\n            /**\n             * A function to call when the pointer enters a {@link #config-dragItemSelector}.\n             * @config {Function} onDragItemMouseEnter\n             * @param {MouseEvent} event Pointer event\n             * @param {HTMLElement} element Over element\n             * @returns {void}\n             */\n            /**\n             * A function to call when the pointer moves inside a {@link #config-dragItemSelector}.\n             * @config {Function} onDragItemMouseMove\n             * @param {MouseEvent} event Pointer event\n             * @param {HTMLElement} element Over element\n             * @returns {void}\n             */\n            /**\n             * A function to call when the pointer leaves a {@link #config-dragItemSelector}.\n             * @config {Function} onDragItemMouseLeave\n             * @param {MouseEvent} event Pointer event\n             * @param {HTMLElement} element Over element\n             * @returns {void}\n             */\n            /**\n             * Configure as `'x'` to lock dragging to the `X` axis (the drag will only move horizontally) or `'y'`\n             * to lock dragging to the `Y` axis (the drag will only move vertically).\n             * @config {'x'|'y'|null}\n             */\n            dragLock : null,\n            /**\n             * The minimum distance a drag must move to be considered a drop and not\n             * {@link Core.util.drag.DragContext#property-aborted}.\n             * @config {Number}\n             * @default\n             */\n            dragMinDistance : 1,\n            /**\n             * The {@link Core.util.drag.DragProxy drag proxy} is a helper object that can be used to display feedback\n             * during a drag.\n             * @config {DragProxyConfig|Core.util.drag.DragProxy}\n             */\n            dragProxy : {\n                $config : ['lazy', 'nullify'],\n                value : null\n            },\n            /**\n             * The outer element where dragging will operate (attach events to it and use as root limit when looking\n             * for ancestors).\n             * @config {HTMLElement}\n             */\n            dragRootElement : {\n                $config : 'nullify',\n                value : null\n            },\n            /**\n             * Set to `true` to allow a drag to drop on to the same element from which the drag started.\n             * @config {Boolean}\n             * @default\n             */\n            dragSameTargetDrop : false,\n            /**\n             * A CSS selector used to determine which element(s) can be dragged.\n             * @config {String}\n             * @default\n             */\n            dragSelector : null,\n            /**\n             * A CSS selector used to identify child element(s) that should not trigger drag.\n             * @config {String}\n             */\n            ignoreSelector : null,\n            /**\n             * The number of milliseconds after a pointerup to ignore click events on the document. This\n             * is used to avoid the \"up\" event itself generating a `click` on the target.\n             * @config {Number}\n             * @default\n             */\n            dragSwallowClickTime : 50,\n            /**\n             * The amount of pixels to move pointer/mouse before it counts as a drag operation.\n             * @config {Number}\n             * @default\n             */\n            dragThreshold : 5,\n            /**\n             * The number of milliseconds that must elapse after a `touchstart` event before it is considered a drag. If\n             * movement occurs before this time, the drag is aborted. This is to allow touch swipes and scroll gestures.\n             * @config {Number}\n             * @default\n             */\n            dragTouchStartDelay : 300,\n            /**\n             * The CSS selector to use to identify the closest valid target from the event target.\n             * @config {String}\n             */\n            dropTargetSelector : null,\n            /**\n             * The {@link #config-dragSelector} item the mouse is currently over.\n             * @member {HTMLElement} overItem\n             * @readonly\n             */\n            overItem : null,\n            testConfig : {\n                dragSwallowClickTime : 50\n            }\n        };\n    }\n    static get properties() {\n        return {\n            /**\n             * The CSS class to add to the {@link #config-dragRootElement} (or {@link #config-draggingClsSelector} from\n             * there) as soon as the pointerdown event occurs.\n             * @member {String}\n             * @readonly\n             */\n            draggingCls : 'b-draggable-active',\n            /**\n             * The CSS class to add to the `body` element as soon as the {@link #config-dragThreshold} is reached and\n             * an actual drag is in progress.\n             * @member {String}\n             * @readonly\n             */\n            draggingBodyCls : 'b-draghelper-active',  // match DragHelper since we need the same treatment\n            /**\n             * The CSS class to add to the element being dragged as soon as the pointerdown event occurs.\n             * @member {String}\n             * @readonly\n             */\n            draggingItemCls : 'b-dragging-item',\n            /**\n             * The CSS class to add to the {@link #config-dragRootElement} (or {@link #config-draggingClsSelector} from\n             * there) as soon as the {@link #config-dragThreshold} is reached and an actual drag is in progress.\n             * @member {String}\n             * @readonly\n             */\n            draggingStartedCls : 'b-draggable-started',\n            /**\n             * The CSS class that is added to the {@link #config-dragRootElement}, i.e., `'b-draggable'`.\n             * @property {String}\n             * @readonly\n             */\n            draggableCls : 'b-draggable'\n        };\n    }\n    //endregion\n    //region Drag Processing\n    // These template methods are implemented by derived classes as desired. There is only one overlap with Droppable's\n    // template methods (dragDrop) so that a class can easily mixin both Draggable and Droppable and always distinguish\n    // whether it is acting as the source, the target, or both.\n    /**\n     * This template method is called when the mousedown of a potential drag operation occurs. This happens before the\n     * gesture is known to be a drag, meaning the {@link #config-dragThreshold} has not been reached. This method\n     * should initialize the {@link Core.util.drag.DragContext} using the {@link Core.util.drag.DragContext#function-set}\n     * method. Alternatively, this method may return `false` to prevent the drag operation.\n     *\n     * *Important:* Because no drag has occurred at the time this method is called, only minimal processing should be\n     * done (such as initializing the {@link Core.util.drag.DragContext}). Anything more should be done in the\n     * {@link #function-dragStart} method or in response to the {@link #event-dragStart} event which happen only if\n     * the user drags the mouse before releasing the mouse button.\n     * @param {Core.util.drag.DragContext} drag\n     */\n    beforeDrag(drag) {\n        const\n            { dragRootElement, dragSelector, ignoreSelector } = this,\n            target = dragSelector && drag.element.closest(dragSelector);\n        return !dragSelector || Boolean(target &&\n            target === dragRootElement ||\n            (dragRootElement.contains(target) && (!ignoreSelector || !drag.element.matches(ignoreSelector)))\n        );\n    }\n    /**\n     * This template method is called when the drag operation starts. This occurs when the {@link #config-dragThreshold}\n     * has been reached.\n     * Your implementation may return `false` to prevent the startup of the drag operation.\n     * @param {Core.util.drag.DragContext} drag\n     */\n    dragStart(drag) {\n        // template\n    }\n    /**\n     * This template method is called as the drag moves. This occurs on each mouse/pointer/touchmove event.\n     * @param {Core.util.drag.DragContext} drag\n     */\n    dragOver(drag) {\n        // template\n    }\n    /**\n     * This template method is called when the drag enters a {@link Core.mixin.Droppable target}.\n     * @param {Core.util.drag.DragContext} drag\n     */\n    dragEnterTarget(drag) {\n        // template\n    }\n    /**\n     * This template method is called when the drag leaves a {@link Core.mixin.Droppable target}.\n     * @param {Core.util.drag.DragContext} drag\n     * @param {Core.mixin.Droppable} oldTarget The previous value of `drag.target`.\n     */\n    dragLeaveTarget(drag, oldTarget) {\n        // template\n    }\n    /**\n     * This template method is called when the drag operation completes. This occurs on the pointerup event.\n     *\n     * This method is not called if the drag is {@link Core.util.drag.DragContext#property-aborted}.\n     * @param {Core.util.drag.DragContext} drag\n     */\n    dragDrop(drag) {\n        // template\n    }\n    /**\n     * This template method is called when the drag operation completes. This occurs on the pointerup event or perhaps\n     * a keypress event.\n     *\n     * This method is always called, even if the drag is {@link Core.util.drag.DragContext#property-aborted}.\n     * @param {Core.util.drag.DragContext} drag\n     */\n    dragEnd(drag) {\n        // template\n    }\n    //endregion\n    //region Drag Management\n    // These methods are called by the DragContext and generally manage element updates (adding/removing classes) or\n    // event firing. In most cases these methods then call a corresponding Drag Processing template method intended\n    // for derived classes to implement.\n    get activeDrag() {\n        const { dragging : drag } = this;\n        return (drag?.started && !drag.completed) ? drag : null;\n    }\n    /**\n     * Return the `Events` instance from which drag events are fired.\n     * @internal\n     * @property {Core.mixin.Events}\n     */\n    get dragEventer() {\n        return this.trigger ? this : null;  // simple Events feature detector\n    }\n    get draggingClassElement() {\n        const { draggingClsSelector, dragRootElement } = this;\n        return draggingClsSelector ? dragRootElement?.closest(draggingClsSelector) : dragRootElement;\n    }\n    beginDrag(drag) {\n        const { draggingCls, draggingClassElement } = this;\n        if (draggingCls && draggingClassElement) {\n            draggingClassElement.classList.add(draggingCls);\n            drag.cleaners.push(() => draggingClassElement.classList.remove(draggingCls));\n        }\n    }\n    async endDrag(drag) {\n        const\n            me = this,\n            { dragEventer, dragProxy } = me;\n        if (drag.valid) {\n            // The implementation may be async. If so, any Promise must always be\n            // propagated back to a point which may have to await it\n            await me.dragDrop(drag);\n        }\n        if (me.isDestroyed) {\n            return;\n        }\n        if (drag.pending) {\n            drag.destroy();\n        }\n        else {\n            me.dragEnd(drag);\n            dragProxy?.dragEnd(drag);\n            /**\n             * This event is fired when a drag gesture is completed due to the user aborting it (with the `ESC` key) or\n             * if the {@link Core.util.drag.DragContext#function-abort} method was called.\n             * @event dragCancel\n             * @param {Core.mixin.Draggable} source The draggable instance that fired the event.\n             * @param {Core.util.drag.DragContext} drag The drag context.\n             * @param {Event} event The browser event.\n             */\n            /**\n             * This event is fired when a drag gesture is completed successfully.\n             *\n             * This event is **not** fired if the drag was aborted by the user pressing the `ESC` key or if the\n             * {@link Core.util.drag.DragContext#function-abort} method was called.\n             * @event drop\n             * @param {Core.mixin.Draggable} source The draggable instance that fired the event.\n             * @param {Core.util.drag.DragContext} drag The drag context.\n             * @param {Event} event The browser event.\n             */\n            dragEventer?.trigger(drag.valid ? 'drop' : 'dragCancel', { drag, event : drag.event });\n            // The drag context could have registered finalizers added by the above methods or event. If so, we need to\n            // wait for finalization of the drag before we clear our \"dragging\" config.\n            me.finalizeDrag(drag);\n        }\n    }\n    async finalizeDrag(drag) {\n        await drag.finalize?.();\n        // The doFinalize() method of DragContext is called by the above await... which nulls our \"dragging\" config\n    }\n    moveDrag(drag) {\n        if (this.dragOver(drag) !== false) {\n            const { dragEventer, dragProxy } = this;\n            dragProxy?.dragMove(drag);\n            /**\n             * This event is fired as a drag gesture progresses due to cursor movement.\n             * @event drag\n             * @param {Core.mixin.Draggable} source The draggable instance that fired the event.\n             * @param {Core.util.drag.DragContext} drag The drag context.\n             * @param {Event} event The browser event.\n             */\n            dragEventer?.trigger('drag', { drag, event : drag.event });\n        }\n    }\n    setupDragContext(event) {\n        const\n            me = this,\n            { dragItemSelector, id } = me,\n            { target } = event;\n        return {\n            event,\n            id              : id ? `${id}-drag-${me._nextDragId = (me._nextDragId || 0) + 1}` : null,\n            itemElement     : dragItemSelector ? target.closest(dragItemSelector) : target,\n            touchStartDelay : me.dragTouchStartDelay,\n            source          : me,\n            threshold       : me.dragThreshold\n        };\n    }\n    startDrag(drag) {\n        const\n            { draggingStartedCls, draggingClassElement, draggingItemCls, dragEventer, dragProxy } = this,\n            { itemElement } = drag;\n        /**\n         * This event is fired prior to starting a drag gesture. This does not occur immediately after the user\n         * performs the pointer/mousedown/touchstart but only after the {@link #config-dragThreshold} amount of\n         * movement has taken place.\n         *\n         * The drag is canceled if a listener returns `false`.\n         * @event beforeDragStart\n         * @param {Core.mixin.Draggable} source The draggable instance that fired the event.\n         * @param {Core.util.drag.DragContext} drag The drag context.\n         * @param {Event} event The browser event.\n         * @preventable\n         */\n        if (dragEventer?.trigger('beforeDragStart', { drag, event : drag.event }) === false) {\n            return false;\n        }\n        if (draggingStartedCls && draggingClassElement) {\n            draggingClassElement.classList.add(draggingStartedCls);\n            drag.cleaners.push(() => draggingClassElement.classList.remove(draggingStartedCls));\n        }\n        if (draggingItemCls && itemElement) {\n            itemElement.classList.add(draggingItemCls);\n            drag.cleaners.push(() => itemElement.classList.remove(draggingItemCls));\n        }\n        dragProxy?.dragStart(drag);\n        const result = this.dragStart(drag);\n        if (result !== false) {\n            /**\n             * This event is fired when a drag gesture has started. This does not occur immediately after the user\n             * performs the pointer/mousedown/touchstart but only after the {@link #config-dragThreshold} amount of\n             * movement has taken place.\n             * @event dragStart\n             * @param {Core.mixin.Draggable} source The draggable instance that fired the event.\n             * @param {Core.util.drag.DragContext} drag The drag context.\n             * @param {Event} event The browser event.\n             */\n            dragEventer?.trigger('dragStart', { drag, event : drag.event });\n        }\n        return result;\n    }\n    trackDrag(drag) {\n        const { dropTargetSelector } = this;\n        drag.valid = !(dropTargetSelector && !drag.targetElement?.closest(dropTargetSelector));\n        this.moveDrag(drag);\n    }\n    //endregion\n    //region Configs\n    configureListeners(drag) {\n        const\n            me = this,\n            listeners = ObjectHelper.assign({\n                thisObj : me\n            }, me.dragDocumentListeners);\n        // Only listen for the events related to how the drag was initiated:\n        if ('touches' in drag.startEvent) {\n            delete listeners.mousemove;\n            delete listeners.mouseup;\n        }\n        else {\n            delete listeners.contextmenu;\n            delete listeners.touchmove;\n            delete listeners.touchend;\n            delete listeners.pointerup;\n        }\n        return listeners;\n    }\n    //endregion\n    //region Configs\n    updateDragging(drag, old) {\n        const me = this;\n        if (drag) {\n            const listeners = me.configureListeners(drag);\n            drag.cleaners.push(EventHelper.on(listeners));\n            me.beginDrag(drag);\n        }\n        else if (old) {\n            old.destroy();\n        }\n    }\n    changeDragProxy(config, existing) {\n        return DragProxy.reconfigure(existing, config, {\n            owner : this,\n            defaults : {\n                owner : this\n            }\n        });\n    }\n    updateDragRootElement(rootEl, was) {\n        const\n            me = this,\n            {\n                draggableCls,\n                dragItemSelector,\n                onDragItemMouseMove\n            }  = me;\n        was?.classList.remove(draggableCls);\n        me._dragRootDetacher?.();\n        if (rootEl) {\n            const listeners = {\n                thisObj    : me,\n                element    : rootEl,\n                mousedown  : 'onDragMouseDown',\n                // We have touchstart listener in place since Siesta/Chrome can send these events even on non-touch\n                // devices:\n                touchstart : 'onDragTouchStart',\n                // On iOS, because we use pointerup to represent the drop gesture,\n                // the initiating pointerdown event is captured, and its target is\n                // the original start target. We must always release pointer capture.\n                // https://github.com/bryntum/support/issues/4111\n                pointerdown : e => e.pointerId && e.target.releasePointerCapture?.(e.pointerId)\n            };\n            if (onDragItemMouseMove) {\n                listeners.mousemove = {\n                    delegate : dragItemSelector,\n                    handler  : 'onDragItemMouseMove'\n                };\n            }\n            if (me.dragItemOverCls || onDragItemMouseMove || me.onDragItemMouseEnter || me.onDragItemMouseLeave) {\n                Object.assign(listeners, {\n                    mouseover : {\n                        delegate : dragItemSelector,\n                        handler  : 'onDragItemMouseOver'\n                    },\n                    mouseout : {\n                        delegate : dragItemSelector,\n                        handler  : 'onDragItemMouseOut'\n                    }\n                });\n            }\n            rootEl.classList.add(draggableCls);\n            me._dragRootDetacher = EventHelper.on(listeners);\n        }\n    }\n    //endregion\n    //region Events\n    onDragItemMouseOver(event) {\n        this.overItem = event;\n    }\n    onDragItemMouseOut(event) {\n        if (!this.dragging) {\n            this.overItem = event;\n        }\n    }\n    changeOverItem(event) {\n        this.enterLeaveEvent = event;\n        if (event.type === 'mouseout') {\n            // Must return null, not undefined to unset the overItem property\n            return event.relatedTarget?.closest(this.dragItemSelector) || null;\n        }\n        else {\n            return event.target.closest(this.dragItemSelector);\n        }\n    }\n    updateOverItem(overItem, oldOverItem) {\n        const\n            me                  = this,\n            { dragItemOverCls } = me;\n        if (oldOverItem) {\n            dragItemOverCls && oldOverItem.classList.remove(dragItemOverCls);\n            me.onDragItemMouseLeave?.(me.enterLeaveEvent, oldOverItem);\n        }\n        if (overItem) {\n            dragItemOverCls && overItem.classList.add(dragItemOverCls);\n            me.onDragItemMouseEnter?.(me.enterLeaveEvent, overItem);\n        }\n    }\n    onDragContextMenu(event) {\n        event.preventDefault();\n    }\n    onDragKeyDown(event) {\n        this.dragging.keyDown(event);\n    }\n    onDragKeyUp(event) {\n        this.dragging.keyUp(event);\n    }\n    /**\n     * Grab draggable element on mouse down.\n     * @param {Event} event\n     * @private\n     */\n    onDragMouseDown(event) {\n        // only dragging with left mouse button\n        if (event.button === 0) {\n            this.onDragPointerDown(event);\n        }\n    }\n    /**\n     * Grab draggable element on pointerdown.\n     * @param {Event} event\n     * @private\n     */\n    onDragPointerDown(event) {\n        let { dragging : drag } = this;\n        // If a drag is ongoing already, finalize it and don't proceed with new drag (happens if user does pointerup\n        // outside browser window). Also handles the edge case of trying to start a new drag while previous is awaiting\n        // finalization, in which case it just bails out.\n        if (!drag) {\n            drag = this.setupDragContext(event);\n            // The DragContext consults our beforeDrag handler, and if that succeeds, the Context injects itself into\n            // this instance as our draggable (\"this.dragging\").\n            // NOTE: This is not yet an actual drag. At this stage, the context is used to detect movement prior to\n            // mouseup (aka \"a drag\"). Should the requisite amount of movement occur, the drag will be started.\n            if (drag) {\n                drag = new DragContext(drag);\n                if (drag.begin() === false) {\n                    drag.destroy();\n                }\n            }\n        }\n        else if (!drag.isFinalizing) {\n            drag.abort();\n        }\n    }\n    // Set by the DragContext in its begin method, and auto-nullified at destruction.\n    changeDragging(value, was) {\n        was?.destroy();\n        return value;\n    }\n    onDragPointerMove(event) {\n        const { dragging : drag } = this;\n        if (drag && !drag.completed) {\n            drag?.move(event);\n        }\n    }\n    onDragPointerUp(event) {\n        const { dragging : drag } = this;\n        if (drag && !drag.completed) {\n            drag.end(event);\n            this.endDrag(drag);\n        }\n    }\n    /**\n     * @param {Event} event\n     * @private\n     */\n    onDragTouchStart(event) {\n        // only allowing one finger for now...\n        if (event.touches.length === 1) {\n            this.onDragPointerDown(event);\n        }\n    }\n    //endregion\n};\n", "import Base from '../Base.js';\nimport DomDataStore from '../data/DomDataStore.js';\n/**\n * @module Core/mixin/Droppable\n */\n/**\n * Mix this into another class to enable drop support and receive drops from {@link Core.mixin.Draggable draggables}.\n *\n * There are 4 basic methods that a droppable implements. These methods are called as drag operations occur:\n *\n * ```javascript\n *  class MyDroppable extends Base.mixin(Droppable) {\n *      dragEnter(drag) {\n *          // a drag has entered the drop zone... create some type of drop indicator perhaps\n *      }\n *\n *      dragMove(drag) {\n *          // a drag has changed position... update drop indicators\n *      }\n *\n *      dragDrop(drag) {\n *          // drop has occurred... process data from the drag context\n *      }\n *\n *      dragLeave(drag) {\n *          // the drag has left the drop zone... cleanup indicators\n *      }\n *  }\n * ```\n *\n * Instances of `Droppable` are associated with an element to receive drag operations:\n *\n * ```javascript\n *  let target = new MyDroppable({\n *      dropRootElement : someElement\n *  });\n * ```\n *\n * @mixin\n * @internal\n */\nexport default Target => class Droppable extends (Target || Base) {\n    static get $name() {\n        return 'Droppable';\n    }\n    //region Configs\n    static get configurable() {\n        return {\n            /**\n             * A selector, which, if specified, narrows the dropability to child elements of the\n             * {@link #config-dropRootElement} which match this selector.\n             * @config {String}\n             */\n            droppableSelector : null,\n            /**\n             * The current `DragContext`. This is set when a drag enters this target. Changing this config causes the\n             * {@link #function-dragEnter} and {@link #function-dragLeave} methods to be called. If `dragEnter` returns\n             * `false` for a drag, this value will be set to `null`.\n             * @member {Core.util.drag.DragContext}\n             * @readonly\n             */\n            dropping : null,\n            /**\n             * Set this config to the element where drops should be received. When set, the `b-droppable` CSS class is\n             * added to the element and the `Droppable` instance is associated with that element so that it can be\n             * found by {@link Core.mixin.Draggable draggables}.\n             * @config {HTMLElement}\n             */\n            dropRootElement : {\n                $config : 'nullify',\n                value : null\n            }\n        };\n    }\n    /**\n     * Return the `Events` instance from which drop events are fired.\n     * @internal\n     * @property {Core.mixin.Events}\n     */\n    get dropEventer() {\n        return this.trigger ? this : null;  // simple Events feature detector\n    }\n    /**\n     * Returns the CSS class that is added to the {@link #config-dropRootElement}, i.e., `'b-droppable'`.\n     * @property {String}\n     * @readonly\n     */\n    get droppableCls() {\n        return 'b-droppable';\n    }\n    //endregion\n    //region Drop Management\n    /**\n     * This method is called when a drag enters this droppable's `dropRootElement`. In many cases, this method is used\n     * to create some sort of drop indicator to provide user feedback.\n     *\n     * If this method does not return `false`, the {@link #property-dropping} config will retain the given `drag` context\n     * which was set prior to this method being called.\n     *\n     * If this method returns `false`, the drop will not be accepted. Neither {@link #function-dragDrop} nor\n     * {@link #function-dragLeave} will be called for this drop. If the drag leaves this target and re-enters, this\n     * method will be called again. While `dropping` will already be updated before this method is called, it will be\n     * reset to `null` in this case.\n     *\n     * The base class implementation of this method fires the {@link #event-dragEnter} event.\n     * @param {Core.util.drag.DragContext} drag\n     * @returns {Boolean}\n     */\n    dragEnter(drag) {\n        /**\n         * This event is fired when a drag enters this droppable's `dropRootElement`. It is fired by the droppable's\n         * {@link #function-dragEnter} method.\n         * @event dragEnter\n         * @param {Core.mixin.Draggable} source The draggable instance that fired the event.\n         * @param {Core.util.drag.DragContext} drag The drag context.\n         * @param {Event} event The browser event.\n         */\n        return this.dropEventer?.trigger('dragEnter', { drag, event : drag.event });\n    }\n    /**\n     * This method is called when the drag that was previously announced via {@link #function-dragEnter} moves to a new\n     * position. This is typically where drop indicators are updated to reflect the new position.\n     *\n     * The base class implementation of this method fires the {@link #event-dragMove} event.\n     * @param {Core.util.drag.DragContext} drag\n     */\n    dragMove(drag) {\n        /**\n         * This event is fired when the drag that was previously announced via {@link #event-dragEnter} moves to a new\n         * position. It is fired by the droppable's {@link #function-dragMove} method.\n         * @event dragMove\n         * @param {Core.mixin.Draggable} source The draggable instance that fired the event.\n         * @param {Core.util.drag.DragContext} drag The drag context.\n         * @param {Event} event The browser event.\n         */\n        return this.dropEventer?.trigger('dragMove', { drag, event : drag.event });\n    }\n    /**\n     * This method is called when the drag that was previously announced via {@link #function-dragEnter} has ended with\n     * a drop. In addition to any cleanup (since {@link #function-dragLeave} will not be called), this method handles\n     * any updates associated with the data from the drag context and the position of the drop.\n     *\n     * The base class implementation of this method fires the {@link #event-drop} event.\n     * @param {Core.util.drag.DragContext} drag\n     */\n    dragDrop(drag) {\n        /**\n         * This event is fired when the drag that was previously announced via {@link #event-dragEnter} has ended with\n         * a drop. It is fired by the droppable's {@link #function-dragDrop} method.\n         *\n         * This event is **not** fired when a drag gesture is aborted by the user pressing the `ESC` key or if the\n         * {@link Core.util.drag.DragContext#function-abort} method is called.\n         * @event drop\n         * @param {Core.mixin.Draggable} source The draggable instance that fired the event.\n         * @param {Core.util.drag.DragContext} drag The drag context.\n         * @param {Event} event The browser event.\n         */\n        return this.dropEventer?.trigger('drop', { drag, event : drag.event });\n    }\n    /**\n     * This method is called when the drag that was previously announced via {@link #function-dragEnter} leaves this\n     * droppable's `dropRootElement`, or the drag is {@link Core.util.drag.DragContext#property-aborted} by the user\n     * pressing the `ESC` key, or the {@link Core.util.drag.DragContext#function-abort} method is called.\n     *\n     * This is the time to cleanup anything created by `dragEnter`.\n     *\n     * The base class implementation of this method fires the {@link #event-dragLeave} event.\n     * @param {Core.util.drag.DragContext} drag\n     */\n    dragLeave(drag) {\n        /**\n         * This event is fired when the drag that was previously announced via {@link #event-dragEnter} leaves this\n         * droppable's `dropRootElement`. It is fired by the droppable's {@link #function-dragLeave} method.\n         * @event dragLeave\n         * @param {Core.mixin.Draggable} source The draggable instance that fired the event.\n         * @param {Core.util.drag.DragContext} drag The drag context.\n         * @param {Event} event The browser event.\n         */\n        return this.dropEventer?.trigger('dragLeave', { drag, event : drag.event });\n    }\n    //endregion\n    //region Configs\n    changeDropping(dropping, was) {\n        if (dropping !== was) {\n            const me = this;\n            if (was) {\n                if (was.aborted || !was.completed) {\n                    me.dragLeave(was);\n                }\n            }\n            if (dropping) {\n                me._dropping = dropping;  // update config value early in case dragEnter et al refer to it\n                if (me.dragEnter(dropping) === false) {\n                    dropping = null;\n                }\n                me._dropping = was;  // restore the value so that updateDropping is called as it should be\n            }\n        }\n        return dropping;\n    }\n    updateDropRootElement(rootEl, was) {\n        const\n            me = this,\n            { droppableCls } = me;\n        let droppables, i, removeCls;\n        if (was) {\n            droppables = DomDataStore.get(was, 'droppables');\n            removeCls = true;\n            if (Array.isArray(droppables) && (i = droppables.indexOf(me)) > -1) {\n                if (droppables.length < 2) {\n                    DomDataStore.remove(was, 'droppables');\n                }\n                else {\n                    droppables.splice(i, 1);\n                    droppables.forEach(d => {\n                        if (droppableCls === d.droppableCls) {\n                            removeCls = false;  // our droppableCls may need to stay\n                        }\n                    });\n                }\n            }\n            removeCls && was.classList.remove(droppableCls);\n        }\n        if (rootEl) {\n            droppables = DomDataStore.get(rootEl, 'droppables');\n            if (droppables) {\n                droppables.push(me);\n            }\n            else {\n                DomDataStore.set(rootEl, 'droppables', [me]);\n            }\n            rootEl.classList.add(droppableCls);\n        }\n    }\n    //endregion\n};\n", "import Combo from './Combo.js';\nimport './ColorPicker.js';\n/**\n * @module Core/widget/ColorField\n */\n/**\n * Field that displays a CSS color and lets the user select from a pre-defined\n * {@link #config-colors range of CSS colors}.\n *\n * {@inlineexample Core/widget/ColorField.js}\n *\n * This field can be used as an {@link Grid.column.Column#config-editor} for the {@link Grid.column.Column}.\n *\n * This widget may be operated using the keyboard. `ArrowDown` opens the color picker, which itself is keyboard\n * navigable.\n *\n * ```javascript\n * let colorField = new ColorField({\n *   field: 'color'\n * });\n * ```\n *\n * @extends Core/widget/PickerField\n * @classtype colorfield\n * @inputfield\n */\nexport default class ColorField extends Combo {\n    static $name = 'ColorField';\n    static type = 'colorfield';\n    static configurable = {\n        /*\n         * @hideconfigs text,color,editable,picker\n         */\n        displayField : 'text',\n        valueField   : 'color',\n        editable     : false,\n        picker       : {\n            type  : 'colorpicker',\n            align : {\n                align     : 't100-b100',\n                matchSize : false\n            }\n        },\n        showBoxForNoColor : true,\n        /**\n         * Array of CSS color strings to be able to chose from. This will override the\n         * {@link Core.widget.ColorPicker#config-colors pickers default colors}.\n         *\n         * Provide an array of string CSS colors:\n         * ```javascript\n         * new ColorField({\n         *     colors : ['#00FFFF', '#F0FFFF', '#89CFF0', '#0000FF', '#7393B3']\n         * });\n         * ```\n         *\n         * @prp {String[]}\n         */\n        colors : null,\n        /**\n         * Adds an option in the picker to set no background color\n         * @prp {Boolean}\n         */\n        addNoColorItem : true\n    };\n    configure(config) {\n        const pickerCfg = config.picker ?? {};\n        if (config.colors) {\n            pickerCfg.colors = config.colors;\n        }\n        if ('addNoColorItem' in config) {\n            pickerCfg.addNoColorItem = config.addNoColorItem;\n        }\n        config.picker = pickerCfg;\n        super.configure(config);\n    }\n    updatePicker(picker) {\n        if (picker) {\n            this.items = picker.store.records;\n        }\n    }\n    updateColors(colors) {\n        if (!this.isConfiguring) {\n            this.picker.colors = colors;\n        }\n    }\n    updateAddNoColorItem(addNoColorItem) {\n        if (!this.isConfiguring) {\n            this.picker.addNoColorItem = addNoColorItem;\n        }\n    }\n    set value(value) {\n        if (!this.store) {\n            this.items = [];\n            this.store = this.picker.store;\n        }\n        if (!value) {\n            value = this.store.findRecord('color', null);\n        }\n        super.value = value;\n    }\n    showPicker() {\n        // Not happy about this. Previously selected value doesn't trigger refresh\n        this.picker.refresh();\n        super.showPicker(...arguments);\n    }\n    get value() {\n        return super.value;\n    }\n    syncInputFieldValue(...args) {\n        const\n            me        = this,\n            { value } = me;\n        let className = me.picker?.getColorClassName(value);\n        if (!className) {\n            me.colorBox.style.color = value;\n        }\n        className = 'b-colorbox ' + className;\n        me.colorBox.className = className;\n        if (!me.showBoxForNoColor) {\n            me.element.classList.toggle('b-colorless', !value);\n        }\n        super.syncInputFieldValue(...args);\n    }\n    get innerElements() {\n        return [\n            {\n                reference : 'colorBox',\n                className : 'b-colorbox'\n            },\n            ...super.innerElements\n        ];\n    }\n}\n// Register this widget type with its Factory\nColorField.initClass();\nColorField._$name = 'ColorField';", "import DomClassList from '../helper/util/DomClassList.js';\nimport Checkbox from './Checkbox.js';\n/**\n * @module Core/widget/SlideToggle\n */\n/**\n * SlideToggle field is a variation of {@link Core.widget.Checkbox} with a sliding toggle instead of box with check mark.\n * It wraps <code>&lt;input type=\"checkbox\"&gt;</code>.\n * Color can be specified and you can optionally configure {@link #config-text} to display in a label to the right of\n * the toggle in addition to a standard field {@link #config-label}.\n *\n * {@inlineexample Core/widget/SlideToggle.js vertical}\n *\n * This field can be used as an {@link Grid.column.Column#config-editor} for the {@link Grid.column.Column}.\n *\n * @extends Core/widget/Checkbox\n * @classtype slidetoggle\n * @inputfield\n */\nexport default class SlideToggle extends Checkbox {\n    static $name = 'SlideToggle';\n    static type = 'slidetoggle';\n    static get properties() {\n        return {\n            toggledCls : 'b-slidetoggle-checked'\n        };\n    }\n    construct(config) {\n        if (config.checked) {\n            config.cls = DomClassList.from(config.cls) || {};\n            config.cls[this.constructor.properties.toggledCls] = 1;\n        }\n        super.construct(config);\n    }\n    get innerElements() {\n        const innerEls = super.innerElements;\n        innerEls.splice(1, 0, this.toggleElement);\n        if (this.text) {\n            innerEls[innerEls.length - 1].class = 'b-slidetoggle-label';\n        }\n        else {\n            // Remove label, not used\n            innerEls.pop();\n        }\n        return innerEls;\n    }\n    get toggleElement() {\n        return {\n            class     : 'b-slidetoggle-toggle',\n            reference : 'slideToggle',\n            children  : [\n                {\n                    class     : 'b-slidetoggle-thumb',\n                    reference : 'slideThumb'\n                }\n            ]\n        };\n    }\n    internalOnChange() {\n        super.internalOnChange();\n        this.element.classList[this.value ? 'add' : 'remove'](this.toggledCls);\n    }\n}\nSlideToggle.initClass();\nSlideToggle._$name = 'SlideToggle';", "import Base from '../../Base.js';\nimport DomHelper from '../../helper/DomHelper.js';\nimport EventHelper from '../../helper/EventHelper.js';\nimport Tooltip from '../../widget/Tooltip.js';\nimport StringHelper from '../../helper/StringHelper.js';\n/**\n * @module Core/widget/util/AvatarRendering\n */\n/**\n * An object that describes properties of an avatar.\n *\n * @typedef {Object} AvatarConfig\n * @property {String} initials Resource initials\n * @property {String} color Background color for initials\n * @property {String} iconCls Icon cls\n * @property {String} imageUrl Image url\n * @property {String} defaultImageUrl Default image url, fallback if image fails to load or there is none\n * specified. Leave out to show initials instead.\n * @property {Object} [dataset] Dataset to apply to the resulting element\n * @property {String} [alt] Image description\n */\n/**\n * A utility class providing rendering of avatars / resource initials.\n *\n * {@inlineexample Core/widget/AvatarRendering.js}\n *\n * @extends Core/Base\n */\nexport default class AvatarRendering extends Base {\n    static $name = 'AvatarRendering';\n    static get configurable() {\n        return {\n            /**\n             * Element used to listen for load errors. Normally the owning widgets own element.\n             * @config {HTMLElement}\n             */\n            element : null,\n            /**\n             * Prefix prepended to a supplied color to create a CSS class applied when showing initials.\n             * @config {String}\n             * @default\n             */\n            colorPrefix : 'b-sch-',\n            /**\n             * A tooltip config object to enable using a custom tooltip for the avatars. Listen for `beforeShow` and set\n             * your html there.\n             * @config {TooltipConfig}\n             */\n            tooltip : null,\n            size : null\n        };\n    }\n    doDestroy() {\n        this.tooltip?.destroy();\n        super.doDestroy();\n    }\n    updateElement(element) {\n        // Error listener\n        EventHelper.on({\n            element,\n            delegate : '.b-resource-image',\n            error    : 'onImageErrorEvent',\n            thisObj  : this,\n            capture  : true\n        });\n    }\n    changeTooltip(config) {\n        return Tooltip.new({\n            forElement  : this.element,\n            forSelector : '.b-resource-avatar',\n            cls         : 'b-resource-avatar-tooltip'\n        }, config);\n    }\n    static get failedUrls() {\n        if (!this._failedUrls) {\n            this._failedUrls = new Set();\n        }\n        return this._failedUrls;\n    }\n    /**\n     * Returns a DOM config object containing a resource avatar, icon or resource initials. Display priority in that\n     * order.\n     * @param {AvatarConfig|AvatarConfig[]} options A single avatar config object or an array of the same.\n     * @returns {DomConfig}\n     */\n    getResourceAvatar(options) {\n        if (Array.isArray(options)) {\n            return options.map(item => this.getResourceAvatar(item));\n        }\n        const\n            { initials, color, iconCls, imageUrl, defaultImageUrl, dataset = {}, resourceRecord, alt = StringHelper.encodeHtml(resourceRecord?.name) } = options,\n            config = this.getImageConfig(initials, color, imageUrl, defaultImageUrl, dataset, alt) ||\n                this.getIconConfig(iconCls, dataset) ||\n                this.getResourceInitialsConfig(initials, color, dataset),\n            { size } = this;\n        Object.assign(config.style, {\n            ...(size ? { height : size, width : size } : undefined)\n        });\n        return config;\n    }\n    getImageConfig(initials, color, imageUrl, defaultImageUrl, dataset, alt) {\n        // Fall back to defaultImageUrl if imageUrl is known to fail\n        imageUrl = AvatarRendering.failedUrls.has(imageUrl) ? defaultImageUrl : (imageUrl  || defaultImageUrl);\n        if (imageUrl) {\n            return {\n                tag       : 'img',\n                draggable : 'false',\n                loading   : 'lazy',\n                class     : {\n                    'b-resource-avatar' : 1,\n                    'b-resource-image'  : 1\n                },\n                style       : {},\n                alt,\n                elementData : {\n                    defaultImageUrl,\n                    imageUrl,\n                    initials,\n                    color,\n                    dataset\n                },\n                src : imageUrl,\n                dataset\n            };\n        }\n    }\n    getIconConfig(iconCls, dataset) {\n        if (iconCls) {\n            return iconCls && {\n                tag   : 'i',\n                style : {},\n                class : {\n                    'b-resource-avatar' : 1,\n                    'b-resource-icon'   : 1,\n                    [iconCls]           : 1\n                },\n                dataset\n            };\n        }\n    }\n    getResourceInitialsConfig(initials, color, dataset) {\n        const\n            // eventColor = #FF5555, apply as background-color\n            namedColor = DomHelper.isNamedColor(color) && color,\n            // eventColor = red, add b-sch-red cls\n            hexColor   = !namedColor && color,\n            { size }   = this;\n        return {\n            tag   : 'div',\n            class : {\n                'b-resource-avatar'                  : 1,\n                'b-resource-initials'                : 1,\n                [`${this.colorPrefix}${namedColor}`] : namedColor\n            },\n            style : {\n                backgroundColor : hexColor || null,\n                ...(size ? { height : size, width : size } : undefined)\n            },\n            children : [initials],\n            dataset\n        };\n    }\n    onImageErrorEvent({ target }) {\n        if (!target.matches('.b-resource-avatar')) {\n            return;\n        }\n        const { defaultImageUrl, initials, color, imageUrl, dataset } = target.elementData;\n        if (defaultImageUrl && !target.src.endsWith(defaultImageUrl.replace(/^[./]*/gm, ''))) {\n            target.src = defaultImageUrl;\n        }\n        else {\n            const initialsEl = DomHelper.createElement(this.getResourceInitialsConfig(initials, color, dataset));\n            initialsEl.elementData = target.elementData;\n            target.parentElement.replaceChild(initialsEl, target);\n        }\n        // Remember failed urls, to avoid trying to load them again next time\n        AvatarRendering.failedUrls.add(imageUrl);\n    }\n}\nAvatarRendering._$name = 'AvatarRendering';"],
  "mappings": "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",
  "names": ["throwAbstractMethodCall", "PARENT_MODEL_PROP", "CHILD_MODELS_PROP", "CONTEXT_PROP", "STORE_PROP", "MODEL_LIST_PROP", "INSERT_INDEX_PROP", "CONTEXT_PROP", "STORE_PROP", "MODEL_LIST_PROP", "CONTEXT_PROP", "STORE_PROP", "event", "_a"]
}
