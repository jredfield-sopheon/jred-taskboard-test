{
  "version": 3,
  "sources": ["../../../../Core/lib/Core/widget/mixin/Styleable.js"],
  "sourcesContent": ["import Base from '../../Base.js';\nimport ObjectHelper from '../../helper/ObjectHelper.js';\nimport StringHelper from '../../helper/StringHelper.js';\n/**\n * @module Core/widget/mixin/Styleable\n */\n/**\n * Mixin for widgets that allows manipulating CSS variables. Works by setting style properties of the target widgets\n * element.\n *\n * As part of configuration:\n *\n * ```javascript\n * const taskBoard = new TaskBoard({\n *    css : {\n *        cardBorderTop    : '5px solid currentColor',\n *        columnBackground : '#ddd'\n *    }\n * });\n * ```\n *\n * And/or at runtime:\n *\n * ```javascript\n * taskBoard.css.cardBackground = '#333';\n * ```\n *\n * @mixin\n */\nexport default Target => class Styleable extends (Target || Base) {\n    static $name = 'Styleable';\n    static configurable = {\n        /**\n         * CSS variable prefix, appended to the keys used in {@link #config-css}.\n         *\n         * For example:\n         *\n         * ```javascript\n         * {\n         *    cssVarPrefix : 'taskboard',\n         *\n         *    css : {\n         *        cardBackground : '#333'\n         *    }\n         * }\n         * ```\n         *\n         * Results in the css var `--taskboard-card-background` being set to `#333`.\n         * @config {String}\n         * @category CSS\n         */\n        cssVarPrefix : '',\n        /**\n         * Allows runtime manipulating of CSS variables.\n         *\n         * See {@link #config-css} for more information.\n         *\n         * ```javascript\n         * taskBoard.css.columnBackground = '#ccc';\n         *\n         * // Will set \"--taskboard-column-background : #ccc\"\n         * ```\n         *\n         * @member {Proxy} css\n         * @typings {typeof Proxy}\n         * @category DOM\n         */\n        /**\n         * Initial CSS variables to set.\n         *\n         * Each key will be applied as a CSS variable to the target elements style. Key names are hyphenated and\n         * prefixed with {@link #config-cssVarPrefix} in the process. For example:\n         *\n         * ```javascript\n         * {\n         *    cssVarPrefix : 'taskboard',\n         *\n         *    css : {\n         *        cardBackground : '#333'\n         *    }\n         * }\n         * ```\n         *\n         * Results in the css var `--taskboard-card-background` being set to `#333`.\n         *\n         * @config {Object}\n         * @category CSS\n         */\n        css : {}\n    };\n    changeCssVarPrefix(prefix) {\n        ObjectHelper.assertString(prefix, 'prefix');\n        if (prefix && !prefix.endsWith('-')) {\n            prefix = prefix + '-';\n        }\n        return prefix || '';\n    }\n    changeCss(css) {\n        ObjectHelper.assertObject(css, 'css');\n        const me = this;\n        if (!globalThis.Proxy) {\n            throw new Error('Proxy not supported');\n        }\n        const proxy = new Proxy({}, {\n            get(target, property) {\n                const styles = getComputedStyle(me.element || document.documentElement);\n                return styles.getPropertyValue(`--${me.cssVarPrefix}${StringHelper.hyphenate(property)}`)?.trim();\n            },\n            set(target, property, value) {\n                const element = me.element || document.documentElement;\n                element.style.setProperty(`--${me.cssVarPrefix}${StringHelper.hyphenate(property)}`, value);\n                return true;\n            }\n        });\n        if (css) {\n            if (me._element) {\n                ObjectHelper.assign(proxy, css);\n            }\n            else {\n                me.$initialCSS = css;\n            }\n        }\n        return proxy;\n    }\n    // Apply any initially supplied CSS when we have an element\n    updateElement(element, ...args) {\n        super.updateElement(element, ...args);\n        if (this.$initialCSS) {\n            ObjectHelper.assign(this.css, this.$initialCSS);\n        }\n    }\n    get widgetClass() {}\n};\n"],
  "mappings": ";;;;;;;;AA6BA,IAAO,oBAAQ,YAAO;AA7BtB;AA6ByB,6BAAyB,UAAU,MAAM;AAAA,IA6D9D,mBAAmB,QAAQ;AACvB,mBAAa,aAAa,QAAQ,QAAQ;AAC1C,UAAI,UAAU,CAAC,OAAO,SAAS,GAAG,GAAG;AACjC,iBAAS,SAAS;AAAA,MACtB;AACA,aAAO,UAAU;AAAA,IACrB;AAAA,IACA,UAAU,KAAK;AACX,mBAAa,aAAa,KAAK,KAAK;AACpC,YAAM,KAAK;AACX,UAAI,CAAC,WAAW,OAAO;AACnB,cAAM,IAAI,MAAM,qBAAqB;AAAA,MACzC;AACA,YAAM,QAAQ,IAAI,MAAM,CAAC,GAAG;AAAA,QACxB,IAAI,QAAQ,UAAU;AAxGlC,cAAAA;AAyGgB,gBAAM,SAAS,iBAAiB,GAAG,WAAW,SAAS,eAAe;AACtE,kBAAOA,MAAA,OAAO,iBAAiB,KAAK,GAAG,YAAY,GAAG,aAAa,UAAU,QAAQ,CAAC,EAAE,MAAjF,gBAAAA,IAAoF;AAAA,QAC/F;AAAA,QACA,IAAI,QAAQ,UAAU,OAAO;AACzB,gBAAM,UAAU,GAAG,WAAW,SAAS;AACvC,kBAAQ,MAAM,YAAY,KAAK,GAAG,YAAY,GAAG,aAAa,UAAU,QAAQ,CAAC,IAAI,KAAK;AAC1F,iBAAO;AAAA,QACX;AAAA,MACJ,CAAC;AACD,UAAI,KAAK;AACL,YAAI,GAAG,UAAU;AACb,uBAAa,OAAO,OAAO,GAAG;AAAA,QAClC,OACK;AACD,aAAG,cAAc;AAAA,QACrB;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA;AAAA,IAEA,cAAc,YAAY,MAAM;AAC5B,YAAM,cAAc,SAAS,GAAG,IAAI;AACpC,UAAI,KAAK,aAAa;AAClB,qBAAa,OAAO,KAAK,KAAK,KAAK,WAAW;AAAA,MAClD;AAAA,IACJ;AAAA,IACA,IAAI,cAAc;AAAA,IAAC;AAAA,EACvB,GAtGI,cADqB,IACd,SAAQ,cACf,cAFqB,IAEd,gBAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAoBlB,cAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAqCf,KAAM,CAAC;AAAA,EACX,IA5DqB;AAAA;",
  "names": ["_a"]
}
