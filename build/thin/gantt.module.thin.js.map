{
  "version": 3,
  "sources": ["../../../Gantt/lib/Gantt/column/AddNewColumn.js", "../../../Gantt/lib/Gantt/column/GanttDateColumn.js", "../../../Gantt/lib/Gantt/column/BaselineStartDateColumn.js", "../../../Gantt/lib/Gantt/column/BaselineEndDateColumn.js", "../../../Gantt/lib/Gantt/column/BaselineDurationColumn.js", "../../../Gantt/lib/Gantt/column/BaselineDurationVarianceColumn.js", "../../../Gantt/lib/Gantt/column/BaselineStartVarianceColumn.js", "../../../Gantt/lib/Gantt/column/BaselineEndVarianceColumn.js", "../../../Gantt/lib/Gantt/widget/CalendarPicker.js", "../../../Gantt/lib/Gantt/column/CalendarColumn.js", "../../../Gantt/lib/Gantt/column/ConstraintDateColumn.js", "../../../Gantt/lib/Gantt/column/ConstraintTypeColumn.js", "../../../Gantt/lib/Gantt/column/DeadlineDateColumn.js", "../../../Gantt/lib/Gantt/column/EarlyEndDateColumn.js", "../../../Gantt/lib/Gantt/column/EarlyStartDateColumn.js", "../../../Gantt/lib/Gantt/column/EffortColumn.js", "../../../Gantt/lib/Gantt/column/EndDateColumn.js", "../../../Gantt/lib/Gantt/column/IgnoreResourceCalendarColumn.js", "../../../Gantt/lib/Gantt/column/InactiveColumn.js", "../../../Gantt/lib/Gantt/column/LateEndDateColumn.js", "../../../Gantt/lib/Gantt/column/LateStartDateColumn.js", "../../../Gantt/lib/Gantt/column/ManuallyScheduledColumn.js", "../../../Gantt/lib/Gantt/column/MilestoneColumn.js", "../../../Gantt/lib/Gantt/column/NameColumn.js", "../../../Gantt/lib/Gantt/column/NoteColumn.js", "../../../Gantt/lib/Gantt/column/PercentDoneColumn.js", "../../../Gantt/lib/Gantt/widget/DependencyField.js", "../../../Gantt/lib/Gantt/column/DependencyColumn.js", "../../../Gantt/lib/Gantt/column/PredecessorColumn.js", "../../../Gantt/lib/Gantt/data/AssignmentsManipulationStore.js", "../../../Gantt/lib/Gantt/model/AssignmentModel.js", "../../../Gantt/lib/Gantt/localization/En.js", "../../../Gantt/lib/Gantt/column/ResourceAssignmentGridResourceColumn.js", "../../../Gantt/lib/Gantt/widget/AssignmentGrid.js", "../../../Gantt/lib/Gantt/widget/AssignmentPicker.js", "../../../Gantt/lib/Gantt/widget/AssignmentField.js", "../../../Gantt/lib/Gantt/column/ResourceAssignmentColumn.js", "../../../Gantt/lib/Gantt/column/RollupColumn.js", "../../../Gantt/lib/Gantt/column/SchedulingDirectionColumn.js", "../../../Gantt/lib/Gantt/column/SchedulingModeColumn.js", "../../../Gantt/lib/Gantt/column/SequenceColumn.js", "../../../Gantt/lib/Gantt/column/ShowInTimelineColumn.js", "../../../Gantt/lib/Gantt/column/StartDateColumn.js", "../../../Gantt/lib/Gantt/column/SuccessorColumn.js", "../../../Gantt/lib/Gantt/column/TotalSlackColumn.js", "../../../Gantt/lib/Gantt/column/WBSColumn.js", "../../../Gantt/lib/Gantt/column/AllColumns.js", "../../../Gantt/lib/Gantt/column/EventModeColumn.js", "../../../Gantt/lib/Gantt/column/TimeAxisColumn.js", "../../../Gantt/lib/Gantt/data/AssignmentStore.js", "../../../Gantt/lib/Gantt/model/CalendarModel.js", "../../../Gantt/lib/Gantt/data/CalendarManagerStore.js", "../../../Gantt/lib/Gantt/model/DependencyModel.js", "../../../Gantt/lib/Gantt/data/DependencyStore.js", "../../../Gantt/lib/Gantt/model/ResourceModel.js", "../../../Gantt/lib/Gantt/data/ResourceStore.js", "../../../Engine/lib/Engine/quark/model/gantt/ConstrainedByParentMixin.js", "../../../Engine/lib/Engine/quark/model/gantt/ConstrainedLateEventMixin.js", "../../../Engine/lib/Engine/quark/model/gantt/ScheduledByDependenciesLateEventMixin.js", "../../../Engine/lib/Engine/quark/model/gantt/InactiveEventMixin.js", "../../../Engine/lib/Engine/quark/model/gantt/scheduling_modes/FixedEffortDispatcher.js", "../../../Engine/lib/Engine/quark/model/gantt/scheduling_modes/FixedEffortMixin.js", "../../../Engine/lib/Engine/quark/model/gantt/scheduling_modes/FixedUnitsDispatcher.js", "../../../Engine/lib/Engine/quark/model/gantt/scheduling_modes/FixedUnitsMixin.js", "../../../Engine/lib/Engine/quark/model/gantt/GanttEvent.js", "../../../Gantt/lib/Gantt/model/Baseline.js", "../../../Gantt/lib/Gantt/data/field/WbsField.js", "../../../Gantt/lib/Gantt/model/TaskModel.js", "../../../Gantt/lib/Gantt/data/TaskStore.js", "../../../Gantt/lib/Gantt/feature/Baselines.js", "../../../Gantt/lib/Gantt/feature/CellEdit.js", "../../../Gantt/lib/Gantt/feature/CriticalPaths.js", "../../../Gantt/lib/Gantt/feature/Dependencies.js", "../../../Gantt/lib/Gantt/feature/Indicators.js", "../../../Gantt/lib/Gantt/feature/Labels.js", "../../../Gantt/lib/Gantt/feature/ParentArea.js", "../../../Gantt/lib/Gantt/feature/ProgressLine.js", "../../../Gantt/lib/Gantt/feature/ProjectLines.js", "../../../Gantt/lib/Gantt/feature/Rollups.js", "../../../Gantt/lib/Gantt/feature/ScrollButtons.js", "../../../Gantt/lib/Gantt/feature/Summary.js", "../../../Gantt/lib/Gantt/feature/TaskCopyPaste.js", "../../../Gantt/lib/Gantt/feature/TaskDrag.js", "../../../Gantt/lib/Gantt/feature/TaskDragCreate.js", "../../../Gantt/lib/Gantt/widget/TaskEditor.js", "../../../Gantt/lib/Gantt/feature/TaskEdit.js", "../../../Gantt/lib/Gantt/feature/TaskMenu.js", "../../../Gantt/lib/Gantt/feature/TaskNonWorkingTime.js", "../../../Gantt/lib/Gantt/feature/TaskResize.js", "../../../Gantt/lib/Gantt/feature/TaskSegmentDrag.js", "../../../Gantt/lib/Gantt/feature/TaskSegmentResize.js", "../../../Gantt/lib/Gantt/feature/TaskTooltip.js", "../../../Gantt/lib/Gantt/feature/TreeGroup.js", "../../../Gantt/lib/Gantt/feature/Versions.js", "../../../Gantt/lib/Gantt/feature/export/exporter/GanttExporterMixin.js", "../../../Gantt/lib/Gantt/feature/export/exporter/MultiPageExporter.js", "../../../Gantt/lib/Gantt/feature/export/exporter/MultiPageVerticalExporter.js", "../../../Gantt/lib/Gantt/feature/export/exporter/SinglePageExporter.js", "../../../Gantt/lib/Gantt/feature/export/PdfExport.js", "../../../Gantt/lib/Gantt/feature/export/Print.js", "../../../Gantt/lib/Gantt/model/CalendarIntervalModel.js", "../../../Engine/lib/Engine/quark/model/gantt/HasCriticalPathsMixin.js", "../../../Engine/lib/Engine/quark/model/gantt/GanttProjectMixin.js", "../../../Gantt/lib/Gantt/model/ProjectModel.js", "../../../Gantt/lib/Gantt/model/WebSocketProjectModel.js", "../../../Gantt/lib/Gantt/util/ProjectGenerator.js", "../../../Gantt/lib/Gantt/util/ResourceAssignmentParser.js", "../../../Gantt/lib/Gantt/feature/export/MspExport.js", "../../../Gantt/lib/Gantt/view/mixin/GanttDom.js", "../../../Gantt/lib/Gantt/view/mixin/GanttRegions.js", "../../../Gantt/lib/Gantt/view/mixin/GanttScroll.js", "../../../Gantt/lib/Gantt/view/mixin/GanttState.js", "../../../Gantt/lib/Gantt/view/mixin/GanttStores.js", "../../../Gantt/lib/Gantt/view/mixin/GanttTimelineDateMapper.js", "../../../Gantt/lib/Gantt/view/mixin/TaskNavigation.js", "../../../Gantt/lib/Gantt/view/orientation/NewTaskRendering.js", "../../../Gantt/lib/Gantt/view/GanttBase.js", "../../../Gantt/lib/Gantt/view/Gantt.js", "../../../Gantt/bundle/entry.thin.js"],
  "sourcesContent": ["import Column from '../../Grid/column/Column.js';\nimport Store from '../../Core/data/Store.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\nimport Combo from '../../Core/widget/Combo.js';\n/**\n * @module Gantt/column/AddNewColumn\n */\n/**\n * This column allows user to dynamically add columns to the Gantt chart by clicking the column header\n * and picking columns from a combobox.\n *\n * ## Adding a custom column to the combobox\n *\n * In order to appear in the column combobox list a column class have to fulfill these conditions:\n *\n * 1. the class should have a static property `type` with unique string value that will identify the column.\n * 2. the class should be registered with the call to {@link Grid/data/ColumnStore#function-registerColumnType-static ColumnStore.registerColumnType}.\n * 3. the class should have a static property `isGanttColumn` with truthy value.\n * 4. the class should have a static `text` property with column name.\n *\n * For example:\n *\n * ```javascript\n * import ColumnStore from 'gantt-distr/lib/Grid/data/ColumnStore.js';\n * import Column from 'gantt-distr/lib/Grid/column/Column.js';\n *\n * // New column class to display task priority\n * export default class TaskPriorityColumn extends Column {\n *     // unique alias of the column\n *     static get type() {\n *         return 'priority';\n *     }\n *\n *     // indicates that the column should be present in \"Add New...\" column\n *     static get isGanttColumn() {\n *         return true;\n *     }\n *\n *     static get defaults() {\n *         return {\n *             // the column is mapped to \"priority\" field of the Task model\n *             field : 'priority',\n *             // the column title\n *             text  : 'Priority'\n *         };\n *     }\n * }\n *\n * // register new column\n * ColumnStore.registerColumnType(TaskPriorityColumn);\n * ```\n *\n * @extends Grid/column/Column\n * @classtype addnew\n * @column\n */\nexport default class AddNewColumn extends Column {\n    static get $name() {\n        return 'AddNewColumn';\n    }\n    static get type() {\n        return 'addnew';\n    }\n    static get defaults() {\n        return {\n            text       : 'L{New Column}',\n            cls        : 'b-new-column-column',\n            draggable  : false,\n            sortable   : false,\n            exportable : false,\n            field      : null,\n            editor     : null\n        };\n    }\n    doDestroy() {\n        this._combo?.destroy();\n        super.doDestroy();\n    }\n    /**\n     * Returns the combo box field rendered into the header of this column\n     * @property {Core.widget.Combo}\n     * @readonly\n     */\n    get combo() {\n        const\n            me      = this,\n            columns = me.grid.columns;\n        return me._combo || (\n            me._combo = new Combo({\n                owner         : me.grid,\n                cls           : 'b-new-column-combo',\n                placeholder   : me.L('L{New Column}'),\n                triggers      : false,\n                autoExpand    : true,\n                store         : me.ganttColumnStore,\n                displayField  : 'text',\n                monitorResize : false,\n                picker        : {\n                    align : {\n                        align    : 't0-b0',\n                        axisLock : true\n                    },\n                    minWidth : 200,\n                    onItem({ record : columnRecord }) {\n                        const newColumn = new columnRecord.value({\n                            region : me.region\n                        }, columns);\n                        // Insert the new column before the \"New Column\" column\n                        // then focus it to ensure it is in view.\n                        columns.insert(columns.indexOf(me), newColumn);\n                        newColumn.element.focus();\n                    },\n                    // Column elements are rerendered, so the forElement must be kept up to date\n                    onBeforeShow() {\n                        this.forElement = me.element;\n                    }\n                },\n                syncInputFieldValue() {\n                    this.input.value = '';\n                },\n                internalListeners : {\n                    // Keystrokes must not leak up to the Grid where its Navigator will react\n                    keydown({ event }) {\n                        event.stopImmediatePropagation();\n                    }\n                }\n            })\n        );\n    }\n    get ganttColumnStore() {\n        // Create a store containing the Gantt column classes.\n        // A filter ensures that column types which are already\n        // present in the grid are not shown.\n        return new Store({\n            data : Object.values(ColumnStore.columnTypes).reduce((result, col) => {\n                // We must ensure that the defaultValues property is calculated\n                // so that we can detect a text property.\n                if (!col.$meta.fields.exposedData) {\n                    col.exposeProperties({});\n                }\n                // To be included, a column must have a static isGanttColumn\n                // property which yields a truthy value, and a text value.\n                if (col.isGanttColumn && col.text) {\n                    result.push({\n                        id    : col.type,\n                        text  : col.optionalL(col.text),\n                        value : col\n                    });\n                }\n                return result;\n            }, []),\n            filters : [\n                // A colRecord is only filtered in if the grid columns do not contain an instance.\n                colRecord => !this.grid.columns.some(gridCol => gridCol.constructor === colRecord.value)\n            ],\n            sorters : [\n                { field : 'text' }\n            ]\n        });\n    }\n    headerRenderer({ column, headerElement }) {\n        column.combo.render(headerElement);\n    }\n    onKeyDown(event) {\n        if (event.key === 'Enter') {\n            this.combo.focus();\n        }\n    }\n    updateLocalization() {\n        // reset cached combo to rebuild options store w/ new translated column names\n        if (this._combo) {\n            this._combo.destroy();\n            this._combo = null;\n        }\n        super.updateLocalization();\n    }\n}\nColumnStore.registerColumnType(AddNewColumn);\nAddNewColumn._$name = 'AddNewColumn';", "import DateColumn from '../../Grid/column/DateColumn.js';\n/**\n * @module Gantt/column/GanttDateColumn\n */\n/**\n * Base column class that displays dates, in the `ll` format by default. If set to `null` uses Gantt's {@link Scheduler.view.mixin.TimelineViewPresets#config-displayDateFormat date format} as a default.\n * The format will be dynamically updated while zooming according to the {@link Scheduler.preset.ViewPreset#field-displayDateFormat} value specified for the ViewPreset being selected.\n *\n * By default, this class hides the left/right arrows to modify the date incrementally, you can enable this with the {@link Grid.column.DateColumn#config-step} config\n * of the {@link #config-editor} config.\n *\n * Default editor is a {@link Core.widget.DateField DateField}.\n *\n * @extends Grid/column/DateColumn\n * @abstract\n */\nexport default class GanttDateColumn extends DateColumn {\n    static $name = 'GanttDateColumn';\n    static isGanttColumn = true;\n    static get defaults() {\n        return {\n            instantUpdate : true,\n            width         : 130,\n            step          : null,\n            /**\n             * The date format used to display dates in this column. If `format` is set to `null`,\n             * the current value of the Gantt's {@link Scheduler.view.mixin.TimelineViewPresets#config-displayDateFormat} will be used to format the date value.\n             * @config {String|null}\n             * @category Common\n             */\n            format : 'll'\n        };\n    }\n    construct(data, store) {\n        const me = this;\n        me.gantt = store.grid;\n        super.construct(data, store);\n        // If a format is specified, always stick to it\n        if (me.format) {\n            me.explicitFormat = true;\n        }\n        // Otherwise adapt to gantt's format when it changes\n        else {\n            me.gantt.ion({\n                displayDateFormatChange({ format }) {\n                    if (!me.explicitFormat) {\n                        me.set('format', format);\n                    }\n                }\n            });\n        }\n    }\n    set format(format) {\n        this.explicitFormat = true;\n        this.set('format', format);\n    }\n    get format() {\n        return (this.explicitFormat && this.data.format) || this.gantt.displayDateFormat;\n    }\n    get defaultEditor() {\n        const result = super.defaultEditor;\n        result.project = this.gantt.project;\n        return result;\n    }\n}\nGanttDateColumn._$name = 'GanttDateColumn';", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport GanttDateColumn from '../../Gantt/column/GanttDateColumn.js';\n/**\n * @module Gantt/column/BaselineStartDateColumn\n */\n/**\n * A column that displays the task baseline start date.\n *\n * @extends Gantt/column/GanttDateColumn\n * @classtype baselinestartdate\n * @column\n */\nexport default class BaselineStartDateColumn extends GanttDateColumn {\n    static $name = 'BaselineStartDateColumn';\n    static type = 'baselinestartdate';\n    static defaults = {\n        text  : 'L{baselineStart}',\n        field : 'baselines[0].startDate'\n    };\n}\nColumnStore.registerColumnType(BaselineStartDateColumn);\nBaselineStartDateColumn._$name = 'BaselineStartDateColumn';", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport GanttDateColumn from '../../Gantt/column/GanttDateColumn.js';\nimport '../../SchedulerPro/widget/StartDateField.js';\n/**\n * @module Gantt/column/BaselineEndDateColumn\n */\n/**\n * A column that displays the task baseline finish date.\n *\n * @extends Gantt/column/GanttDateColumn\n * @classtype baselineenddate\n * @column\n */\nexport default class BaselineEndDateColumn extends GanttDateColumn {\n    static $name = 'BaselineEndDateColumn';\n    static type = 'baselineenddate';\n    static defaults = {\n        text  : 'L{baselineEnd}',\n        field : 'baselines[0].endDate'\n    };\n}\nColumnStore.registerColumnType(BaselineEndDateColumn);\nBaselineEndDateColumn._$name = 'BaselineEndDateColumn';", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport DurationColumn from '../../Scheduler/column/DurationColumn.js';\n/**\n * @module Gantt/column/BaselineDurationColumn\n */\n/**\n * A column that displays the task baseline duration.\n *\n * @extends Scheduler/column/DurationColumn\n * @classtype baselineduration\n * @column\n */\nexport default class BaselineDurationColumn extends DurationColumn {\n    static $name = 'BaselineDurationColumn';\n    static type = 'baselineduration';\n    static defaults = {\n        text  : 'L{baselineDuration}',\n        field : 'baselines[0].fullDuration'\n    };\n}\nColumnStore.registerColumnType(BaselineDurationColumn);\nBaselineDurationColumn._$name = 'BaselineDurationColumn';", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport DurationColumn from '../../Scheduler/column/DurationColumn.js';\n/**\n * @module Gantt/column/BaselineDurationVarianceColumn\n */\n/**\n * A column that displays the task Duration Variance. The duration variance field is \"0 days\" until the\n * task duration varies from the baseline duration. This field is calculated as:\n *\n * ```\n * Duration Variance = Duration - Baseline Duration\n * ```\n *\n * @extends Scheduler/column/DurationColumn\n * @classtype baselinedurationvariance\n * @column\n */\nexport default class BaselineDurationVarianceColumn extends DurationColumn {\n    static $name = 'BaselineDurationVarianceColumn';\n    static type = 'baselinedurationvariance';\n    static defaults = {\n        editor : false,\n        text   : 'L{durationVariance}',\n        field  : 'baselines[0].durationVariance'\n    };\n}\nColumnStore.registerColumnType(BaselineDurationVarianceColumn);\nBaselineDurationVarianceColumn._$name = 'BaselineDurationVarianceColumn';", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport DurationColumn from '../../Scheduler/column/DurationColumn.js';\n/**\n * @module Gantt/column/BaselineStartVarianceColumn\n */\n/**\n * A column that displays the task Start Variance. The start variance field is \"0 days\" until the\n * task start date varies from the baseline start date. This field is calculated as:\n *\n * ```\n * Start Variance = Start - Baseline Start\n * ```\n *\n * @extends Scheduler/column/DurationColumn\n * @classtype baselinestartvariance\n * @column\n */\nexport default class BaselineStartVarianceColumn extends DurationColumn {\n    static $name = 'BaselineStartVarianceColumn';\n    static type = 'baselinestartvariance';\n    static defaults = {\n        editor : false,\n        text   : 'L{startVariance}',\n        field  : 'baselines[0].startVariance'\n    };\n}\nColumnStore.registerColumnType(BaselineStartVarianceColumn);\nBaselineStartVarianceColumn._$name = 'BaselineStartVarianceColumn';", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport DurationColumn from '../../Scheduler/column/DurationColumn.js';\n/**\n * @module Gantt/column/BaselineEndVarianceColumn\n */\n/**\n * A column that displays the task End Variance. The end variance field is \"0 days\" until the\n * task start date varies from the baseline end date. This field is calculated as:\n *\n * ```\n * End Variance = End - Baseline End\n * ```\n *\n * @extends Scheduler/column/DurationColumn\n * @classtype baselineendvariance\n * @column\n */\nexport default class BaselineEndVarianceColumn extends DurationColumn {\n    static $name = 'BaselineEndVarianceColumn';\n    static type = 'baselineendvariance';\n    static defaults = {\n        editor : false,\n        text   : 'L{endVariance}',\n        field  : 'baselines[0].endVariance'\n    };\n}\nColumnStore.registerColumnType(BaselineEndVarianceColumn);\nBaselineEndVarianceColumn._$name = 'BaselineEndVarianceColumn';", "import Combo from '../../Core/widget/Combo.js';\nimport Store from '../../Core/data/Store.js';\n/**\n * @module Gantt/widget/CalendarPicker\n */\n/**\n * Combo box preconfigured with possible calendar values.\n *\n * This field can be used as an editor for the {@link Grid.column.Column Column}.\n * It is used as the default editor for the {@link Gantt.column.CalendarColumn CalendarColumn}.\n * Note: This picker doesn't support {@link Core/widget/Combo#config-multiSelect multiSelect}\n *\n * {@inlineexample Gantt/widget/CalendarPicker.js}\n *\n * @extends Core/widget/Combo\n * @classtype calendarpicker\n * @widget\n */\nexport default class CalendarPicker extends Combo {\n    static get $name() {\n        return 'CalendarPicker';\n    }\n    // Factoryable type name\n    static get type() {\n        return 'calendarpicker';\n    }\n    /**\n     * Replaces the field store records with the provided ones.\n     * @param {Gantt.model.CalendarModel[]} calendars New contents for the widget store.\n     */\n    refreshCalendars(calendars) {\n        this.store.data = calendars.map(c => {\n            return {\n                id   : c.id,\n                text : c.name\n            };\n        });\n    }\n    get store() {\n        if (!this._store) {\n            this.store = new Store();\n        }\n        return this._store;\n    }\n    set store(store) {\n        super.store = store;\n    }\n    get value() {\n        return super.value;\n    }\n    set value(value) {\n        if (value) {\n            if (value.isDefault && value.isDefault()) {\n                value = null;\n            }\n            else if (value.id) {\n                value = value.id;\n            }\n        }\n        super.value = value;\n    }\n}\n// Register this widget type with its Factory\nCalendarPicker.initClass();\nCalendarPicker._$name = 'CalendarPicker';", "import Column from '../../Grid/column/Column.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\nimport CalendarPicker from '../widget/CalendarPicker.js';\n/**\n * @module Gantt/column/CalendarColumn\n */\n/**\n * A column that displays (and allows user to update) the current {@link Gantt.model.CalendarModel calendar} of the task.\n *\n * Default editor is a {@link Gantt.widget.CalendarPicker CalendarPicker}.\n *\n * @extends Grid/column/Column\n * @classtype calendar\n * @column\n */\nexport default class CalendarColumn extends Column {\n    static get $name() {\n        return 'CalendarColumn';\n    }\n    static get type() {\n        return 'calendar';\n    }\n    static get isGanttColumn() {\n        return true;\n    }\n    static get defaults() {\n        return {\n            field  : 'calendar',\n            text   : 'L{Calendar}',\n            editor : {\n                type         : CalendarPicker.type,\n                clearable    : true,\n                allowInvalid : false\n            }\n        };\n    }\n    afterConstruct() {\n        super.afterConstruct();\n        const\n            me      = this,\n            project = me.grid.project;\n        // Store default calendar to filter out this value\n        me.defaultCalendar = project.defaultCalendar;\n        me.refreshCalendars();\n        project.calendarManagerStore.ion({\n            changePreCommit : me.refreshCalendars,\n            refresh         : me.refreshCalendars,\n            thisObj         : me\n        });\n    }\n    // region Events\n    refreshCalendars() {\n        if (this.editor) {\n            const project = this.grid.project;\n            this.editor.refreshCalendars(project.calendarManagerStore.allRecords);\n        }\n    }\n    // endregion\n    renderer({ value }) {\n        if (value !== this.defaultCalendar && value?.id != null) {\n            const model = this.grid.project.calendarManagerStore.getById(value.id);\n            return model?.name ?? '';\n        }\n        return '';\n    }\n    fromClipboardString({ string, record }) {\n        return this.grid.project.calendarManagerStore.find(rec => rec.name === string);\n    }\n}\nColumnStore.registerColumnType(CalendarColumn);\nCalendarColumn._$name = 'CalendarColumn';", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport GanttDateColumn from '../../Gantt/column/GanttDateColumn.js';\n/**\n * @module Gantt/column/ConstraintDateColumn\n */\n/**\n * A column showing the {@link Gantt/model/TaskModel#field-constraintDate date} of the constraint, applied to the task.\n * The type of the constraint can be displayed with the {@link Gantt/column/ConstraintTypeColumn}.\n *\n * Default editor is a {@link Core/widget/DateField}.\n *\n * If {@link #config-format} is omitted, Gantt's {@link Scheduler/view/mixin/TimelineViewPresets#config-displayDateFormat} will be used as a default value and\n * the format will be dynamically updated while zooming according to the {@link Scheduler/preset/ViewPreset#field-displayDateFormat} value specified for the ViewPreset being selected.\n *\n * @extends Gantt/column/GanttDateColumn\n * @classtype constraintdate\n * @column\n */\nexport default class ConstraintDateColumn extends GanttDateColumn {\n    static get $name() {\n        return 'ConstraintDateColumn';\n    }\n    static get type() {\n        return 'constraintdate';\n    }\n    static get defaults() {\n        return {\n            field : 'constraintDate',\n            text  : 'L{Constraint Date}',\n            width : 146\n        };\n    }\n}\nColumnStore.registerColumnType(ConstraintDateColumn);\nConstraintDateColumn._$name = 'ConstraintDateColumn';", "import Column from '../../Grid/column/Column.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\nimport ConstraintTypePicker from '../../SchedulerPro/widget/ConstraintTypePicker.js';\n/**\n * @module Gantt/column/ConstraintTypeColumn\n */\nconst directionMap = { Forward : 'assoonaspossible', Backward : 'aslateaspossible' };\n/**\n * {@link Gantt/model/TaskModel#field-constraintType Constraint type} column.\n *\n * Default editor is a {@link SchedulerPro/widget/ConstraintTypePicker}.\n *\n * The constraint can be one of:\n *\n * - Must start on [date]\n * - Must finish on [date]\n * - Start no earlier than [date]\n * - Start no later than [date]\n * - Finish no earlier than [date]\n * - Finish no later than [date]\n *\n * The date of the constraint can be specified with the {@link Gantt/column/ConstraintDateColumn}\n *\n * @extends Grid/column/Column\n * @classtype constrainttype\n * @column\n */\nexport default class ConstraintTypeColumn extends Column {\n    static get $name() {\n        return 'ConstraintTypeColumn';\n    }\n    static get type() {\n        return 'constrainttype';\n    }\n    static get isGanttColumn() {\n        return true;\n    }\n    static get defaults() {\n        return {\n            field  : 'constraintType',\n            text   : 'L{Constraint Type}',\n            width  : 146,\n            editor : {\n                type         : 'constrainttypepicker',\n                clearable    : true,\n                allowInvalid : false\n            },\n            filterable : {\n                filterField : {\n                    type : 'constrainttypepicker'\n                }\n            }\n        };\n    }\n    get editor() {\n        const editor = super.editor;\n        editor.includeAsapAlapAsConstraints = this.grid.project.includeAsapAlapAsConstraints;\n        return editor;\n    }\n    renderer({ record, value }) {\n        return ConstraintTypePicker.localize((this.grid.project.includeAsapAlapAsConstraints && directionMap[record.direction]) || value) || '';\n    }\n}\nColumnStore.registerColumnType(ConstraintTypeColumn);\nConstraintTypeColumn._$name = 'ConstraintTypeColumn';", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport GanttDateColumn from '../../Gantt/column/GanttDateColumn.js';\n/**\n * @module Gantt/column/DeadlineDateColumn\n */\n/**\n * A column showing the {@link Gantt/model/TaskModel#field-deadlineDate} field.\n *\n * Default editor is a {@link Core/widget/DateField}.\n *\n * If {@link #config-format} is omitted, Gantt's {@link Scheduler/view/mixin/TimelineViewPresets#config-displayDateFormat}\n * will be used as a default value and the format will be dynamically updated while zooming according to the\n * {@link Scheduler/preset/ViewPreset#field-displayDateFormat} value specified for the ViewPreset being selected.\n *\n * @extends Gantt/column/GanttDateColumn\n * @classtype deadlinedate\n * @column\n */\nexport default class DeadlineDateColumn extends GanttDateColumn {\n    static get $name() {\n        return 'DeadlineDateColumn';\n    }\n    static get type() {\n        return 'deadlinedate';\n    }\n    static get defaults() {\n        return {\n            field : 'deadlineDate',\n            text  : 'L{Deadline}',\n            width : 146\n        };\n    }\n}\nColumnStore.registerColumnType(DeadlineDateColumn);\nDeadlineDateColumn._$name = 'DeadlineDateColumn';", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport GanttDateColumn from './GanttDateColumn.js';\n/**\n * @module Gantt/column/EarlyEndDateColumn\n */\n/**\n * A column that displays the task's {@link Gantt.model.TaskModel#field-earlyEndDate early end date}.\n *\n * Default editor is a {@link Core.widget.DateField DateField}.\n *\n * If {@link #config-format} is omitted, Gantt's {@link Scheduler.view.mixin.TimelineViewPresets#config-displayDateFormat} will be used as a default value and\n * the format will be dynamically updated while zooming according to the {@link Scheduler.preset.ViewPreset#field-displayDateFormat} value specified for the ViewPreset being selected.\n *\n * @extends Gantt/column/GanttDateColumn\n * @classtype earlyenddate\n * @column\n */\nexport default class EarlyEndDateColumn extends GanttDateColumn {\n    static get $name() {\n        return 'EarlyEndDateColumn';\n    }\n    static get type() {\n        return 'earlyenddate';\n    }\n    static get defaults() {\n        return {\n            field : 'earlyEndDate',\n            text  : 'L{Early End}'\n        };\n    }\n}\nColumnStore.registerColumnType(EarlyEndDateColumn);\nEarlyEndDateColumn._$name = 'EarlyEndDateColumn';", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport GanttDateColumn from './GanttDateColumn.js';\n/**\n * @module Gantt/column/EarlyStartDateColumn\n */\n/**\n * A column that displays the task's {@link Gantt.model.TaskModel#field-earlyStartDate early start date}.\n *\n * Default editor is a {@link Core.widget.DateField DateField}.\n *\n * If {@link #config-format} is omitted, Gantt's {@link Scheduler.view.mixin.TimelineViewPresets#config-displayDateFormat} will be used as a default value and\n * the format will be dynamically updated while zooming according to the {@link Scheduler.preset.ViewPreset#field-displayDateFormat} value specified for the ViewPreset being selected.\n *\n * @extends Gantt/column/GanttDateColumn\n * @classtype earlystartdate\n * @column\n */\nexport default class EarlyStartDateColumn extends GanttDateColumn {\n    static get $name() {\n        return 'EarlyStartDateColumn';\n    }\n    static get type() {\n        return 'earlystartdate';\n    }\n    static get defaults() {\n        return {\n            field : 'earlyStartDate',\n            text  : 'L{Early Start}'\n        };\n    }\n}\nColumnStore.registerColumnType(EarlyStartDateColumn);\nEarlyStartDateColumn._$name = 'EarlyStartDateColumn';", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport DurationColumn from '../../Scheduler/column/DurationColumn.js';\nimport EffortField from '../../SchedulerPro/widget/EffortField.js';\n/**\n * @module Gantt/column/EffortColumn\n */\n/**\n * A column showing the task {@link Gantt.model.TaskModel#field-effort effort} and {@link Gantt.model.TaskModel#field-effortUnit units}.\n * The editor of this column understands the time units, so user can enter \"4d\" indicating 4 days effort, or \"4h\" indicating 4 hours, etc.\n * The numeric magnitude can be either an integer or a float value. Both \",\" and \".\" are valid decimal separators.\n * For example, you can enter \"4.5d\" indicating 4.5 days duration, or \"4,5h\" indicating 4.5 hours.\n *\n * Default editor is a {@link Core.widget.DurationField DurationField}.\n *\n * @extends Scheduler/column/DurationColumn\n * @classtype effort\n * @column\n */\nexport default class EffortColumn extends DurationColumn {\n    static get $name() {\n        return 'EffortColumn';\n    }\n    static get type() {\n        return 'effort';\n    }\n    //region Config\n    static get defaults() {\n        return {\n            field : 'fullEffort',\n            text  : 'L{Effort}'\n        };\n    }\n    //endregion\n    get defaultEditor() {\n        return {\n            type : EffortField.type,\n            name : this.field\n        };\n    }\n}\nColumnStore.registerColumnType(EffortColumn);\nEffortColumn._$name = 'EffortColumn';", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport GanttDateColumn from '../../Gantt/column/GanttDateColumn.js';\nimport '../../SchedulerPro/widget/EndDateField.js';\n/**\n * @module Gantt/column/EndDateColumn\n */\n/**\n * A column that displays (and allows user to update) the task's {@link Gantt.model.TaskModel#field-endDate end date}.\n *\n * Default editor is a {@link SchedulerPro.widget.EndDateField EndDateField}.\n *\n * If {@link #config-format} is omitted, Gantt's {@link Scheduler.view.mixin.TimelineViewPresets#config-displayDateFormat} will be used as a default value and\n * the format will be dynamically updated while zooming according to the {@link Scheduler.preset.ViewPreset#field-displayDateFormat} value specified for the ViewPreset being selected.\n *\n * @extends Gantt/column/GanttDateColumn\n * @classtype enddate\n * @column\n */\nexport default class EndDateColumn extends GanttDateColumn {\n    static get $name() {\n        return 'EndDateColumn';\n    }\n    static get type() {\n        return 'enddate';\n    }\n    static get defaults() {\n        return {\n            field : 'endDate',\n            text  : 'L{Finish}'\n        };\n    }\n    get defaultEditor() {\n        const editorCfg = super.defaultEditor;\n        editorCfg.type = 'enddate';\n        return editorCfg;\n    }\n}\nColumnStore.registerColumnType(EndDateColumn);\nEndDateColumn._$name = 'EndDateColumn';", "import CheckColumn from '../../Grid/column/CheckColumn.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\n/**\n * @module Gantt/column/IgnoreResourceCalendarColumn\n */\n/**\n * A column that displays (and allows user to change) whether the task ignores its assigned resource calendars\n * when scheduling or not ({@link Gantt.model.TaskModel#field-ignoreResourceCalendar} field).\n *\n * This column uses a {@link Core.widget.Checkbox checkbox} as its editor, and it is not intended to be changed.\n *\n * @extends Grid/column/CheckColumn\n * @classtype ignoreresourcecalendar\n * @column\n */\nexport default class IgnoreResourceCalendarColumn extends CheckColumn {\n    static $name = 'IgnoreResourceCalendarColumn';\n    static type = 'ignoreresourcecalendar';\n    static isGanttColumn = true;\n    static get defaults() {\n        return {\n            field : 'ignoreResourceCalendar',\n            text  : 'L{Ignore resource calendar}'\n        };\n    }\n}\nColumnStore.registerColumnType(IgnoreResourceCalendarColumn);\nIgnoreResourceCalendarColumn._$name = 'IgnoreResourceCalendarColumn';", "import CheckColumn from '../../Grid/column/CheckColumn.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\n/**\n * @module Gantt/column/InactiveColumn\n */\n/**\n * A column that displays (and allows user to update) the task's\n * {@link Gantt/model/TaskModel#field-inactive} field.\n *\n * This column uses a {@link Core/widget/Checkbox} as its editor, and it is not intended to be changed.\n *\n * @extends Grid/column/CheckColumn\n * @classtype inactive\n * @column\n */\nexport default class InactiveColumn extends CheckColumn {\n    static get $name() {\n        return 'InactiveColumn';\n    }\n    static get type() {\n        return 'inactive';\n    }\n    static get isGanttColumn() {\n        return true;\n    }\n    static get defaults() {\n        return {\n            field : 'inactive',\n            text  : 'L{Inactive}'\n        };\n    }\n}\nColumnStore.registerColumnType(InactiveColumn);\nInactiveColumn._$name = 'InactiveColumn';", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport GanttDateColumn from './GanttDateColumn.js';\n/**\n * @module Gantt/column/LateEndDateColumn\n */\n/**\n * A column that displays the task's {@link Gantt.model.TaskModel#field-lateEndDate late end date}.\n *\n * Default editor is a {@link Core.widget.DateField DateField}.\n *\n * If {@link #config-format} is omitted, Gantt's {@link Scheduler.view.mixin.TimelineViewPresets#config-displayDateFormat} will be used as a default value and\n * the format will be dynamically updated while zooming according to the {@link Scheduler.preset.ViewPreset#field-displayDateFormat} value specified for the ViewPreset being selected.\n *\n * @extends Gantt/column/GanttDateColumn\n * @classtype lateenddate\n * @column\n */\nexport default class LateEndDateColumn extends GanttDateColumn {\n    static get $name() {\n        return 'LateEndDateColumn';\n    }\n    static get type() {\n        return 'lateenddate';\n    }\n    static get defaults() {\n        return {\n            field : 'lateEndDate',\n            text  : 'L{Late End}'\n        };\n    }\n}\nColumnStore.registerColumnType(LateEndDateColumn);\nLateEndDateColumn._$name = 'LateEndDateColumn';", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport GanttDateColumn from './GanttDateColumn.js';\n/**\n * @module Gantt/column/LateStartDateColumn\n */\n/**\n * A column that displays the task's {@link Gantt.model.TaskModel#field-lateStartDate late start date}.\n *\n * Default editor is a {@link Core.widget.DateField DateField}.\n *\n * If {@link #config-format} is omitted, Gantt's {@link Scheduler.view.mixin.TimelineViewPresets#config-displayDateFormat} will be used as a default value and\n * the format will be dynamically updated while zooming according to the {@link Scheduler.preset.ViewPreset#field-displayDateFormat} value specified for the ViewPreset being selected.\n *\n * @extends Gantt/column/GanttDateColumn\n * @classtype latestartdate\n * @column\n */\nexport default class LateStartDateColumn extends GanttDateColumn {\n    static get $name() {\n        return 'LateStartDateColumn';\n    }\n    static get type() {\n        return 'latestartdate';\n    }\n    static get defaults() {\n        return {\n            field : 'lateStartDate',\n            text  : 'L{Late Start}'\n        };\n    }\n}\nColumnStore.registerColumnType(LateStartDateColumn);\nLateStartDateColumn._$name = 'LateStartDateColumn';", "import CheckColumn from '../../Grid/column/CheckColumn.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\n/**\n * @module Gantt/column/ManuallyScheduledColumn\n */\n/**\n * A column that displays (and allows user to update) the task's\n * {@link Gantt.model.TaskModel#field-manuallyScheduled} field.\n *\n * This column uses a {@link Core.widget.Checkbox checkbox} as its editor, and it is not intended to be changed.\n *\n * @extends Grid/column/CheckColumn\n * @classtype manuallyscheduled\n * @column\n */\nexport default class ManuallyScheduledColumn extends CheckColumn {\n    static get $name() {\n        return 'ManuallyScheduledColumn';\n    }\n    static get type() {\n        return 'manuallyscheduled';\n    }\n    static get isGanttColumn() {\n        return true;\n    }\n    static get defaults() {\n        return {\n            field : 'manuallyScheduled',\n            text  : 'L{Manually scheduled}'\n        };\n    }\n}\nColumnStore.registerColumnType(ManuallyScheduledColumn);\nManuallyScheduledColumn._$name = 'ManuallyScheduledColumn';", "import CheckColumn from '../../Grid/column/CheckColumn.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\n/**\n * @module Gantt/column/MilestoneColumn\n */\n/**\n * A Column that indicates whether a task is a milestone. This column uses a {@link Core.widget.Checkbox checkbox} as\n * its editor.\n *\n * @extends Grid/column/CheckColumn\n * @classtype milestone\n * @column\n */\nexport default class MilestoneColumn extends CheckColumn {\n    static suppressNoModelFieldWarning = true;\n    static get $name() {\n        return 'MilestoneColumn';\n    }\n    static get type() {\n        return 'milestone';\n    }\n    static get isGanttColumn() {\n        return true;\n    }\n    static get defaults() {\n        return {\n            field : 'milestone',\n            text  : 'L{Milestone}'\n        };\n    }\n}\nColumnStore.registerColumnType(MilestoneColumn);\nMilestoneColumn._$name = 'MilestoneColumn';", "import TreeColumn from '../../Grid/column/TreeColumn.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\n/**\n * @module Gantt/column/NameColumn\n */\n/**\n * A tree column showing (and allowing user to edit) the task's {@link Gantt.model.TaskModel#field-name name} field.\n *\n * Default editor is a {@link Core.widget.TextField TextField}.\n *\n * @extends Grid/column/TreeColumn\n * @classtype name\n * @column\n */\nexport default class NameColumn extends TreeColumn {\n    static get $name() {\n        return 'NameColumn';\n    }\n    static get type() {\n        return 'name';\n    }\n    static get isGanttColumn() {\n        return true;\n    }\n    //region Config\n    static get defaults() {\n        return {\n            width : 200,\n            field : 'name',\n            text  : 'L{Name}'\n        };\n    }\n    //endregion\n}\nColumnStore.registerColumnType(NameColumn);\nNameColumn._$name = 'NameColumn';", "import Column from '../../Grid/column/Column.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\nimport '../../Core/widget/TextAreaPickerField.js';\n/**\n * @module Gantt/column/NoteColumn\n */\n/**\n * A column which displays a task's {@link Gantt.model.TaskModel#field-note note} field.\n *\n * Default editor is a {@link Core.widget.TextAreaPickerField}.\n *\n * @extends Grid/column/Column\n * @classtype note\n * @column\n */\nexport default class NoteColumn extends Column {\n    static get $name() {\n        return 'NoteColumn';\n    }\n    static get type() {\n        return 'note';\n    }\n    static get isGanttColumn() {\n        return true;\n    }\n    static get defaults() {\n        return {\n            field  : 'note',\n            text   : 'L{Note}',\n            width  : 150,\n            editor : {\n                type : 'textareapickerfield'\n            }\n        };\n    }\n    renderer({ value }) {\n        return (value || '').trim();\n    }\n}\nColumnStore.registerColumnType(NoteColumn);\nNoteColumn._$name = 'NoteColumn';", "import NumberColumn from '../../Grid/column/NumberColumn.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\nimport '../../Core/widget/NumberField.js';\n/**\n * @module Gantt/column/PercentDoneColumn\n */\n/**\n * A column representing the {@link SchedulerPro.model.mixin.PercentDoneMixin#field-percentDone percentDone} field of the task.\n *\n * Default editor is a {@link Core.widget.NumberField NumberField}.\n *\n * @extends Grid/column/NumberColumn\n * @classtype percentdone\n * @column\n */\nexport default class PercentDoneColumn extends NumberColumn {\n    circleHeightPercentage = 0.75;\n    static get $name() {\n        return 'PercentDoneColumn';\n    }\n    static get type() {\n        return 'percentdone';\n    }\n    static get isGanttColumn() {\n        return true;\n    }\n    //region Config\n    static get fields() {\n        return [\n            /**\n             * Set to `true` to render a circular progress bar to visualize the task progress\n             * @config {Boolean} showCircle\n             */\n            'showCircle'\n        ];\n    }\n    static get defaults() {\n        return {\n            field : 'percentDone',\n            text  : 'L{% Done}',\n            unit  : '%',\n            step  : 1,\n            min   : 0,\n            max   : 100,\n            width : 90\n        };\n    }\n    //endregion\n    construct(config) {\n        super.construct(...arguments);\n        if (this.showCircle) {\n            this.htmlEncode = false;\n        }\n    }\n    defaultRenderer({ record, isExport, value }) {\n        value = record.getFormattedPercentDone(value);\n        if (isExport) {\n            return value;\n        }\n        if (this.showCircle) {\n            return {\n                tabIndex        : 0,\n                role            : 'progressbar',\n                'aria-valuemin' : 0,\n                'aria-valuemax' : 100,\n                'aria-valuenow' : value,\n                'aria-label'    : `${record.name} ${value}${this.L('% Done')}`,\n                className       : {\n                    'b-percentdone-circle' : 1,\n                    'b-full'               : value === 100,\n                    'b-empty'              : value === 0\n                },\n                style : {\n                    // Math.round to work around Chrome bug: https://bugs.chromium.org/p/chromium/issues/detail?id=1468916\n                    height                      : Math.round(this.circleHeightPercentage * this.grid.rowHeight) + 'px',\n                    width                       : Math.round(this.circleHeightPercentage * this.grid.rowHeight) + 'px',\n                    '--gantt-percentdone-angle' : `${value / 100}turn`\n                },\n                dataset : {\n                    value\n                }\n            };\n        }\n        return value + this.unit;\n    }\n    // formatValue(value) {\n    //     if (value <= 99) {\n    //         return Math.round(value);\n    //     }\n    //     else {\n    //         return Math.floor(value);\n    //     }\n    // }\n}\nColumnStore.registerColumnType(PercentDoneColumn);\nPercentDoneColumn._$name = 'PercentDoneColumn';", "import Combo from '../../Core/widget/Combo.js';\nimport List from '../../Core/widget/List.js';\nimport Collection from '../../Core/util/Collection.js';\nimport TextField from '../../Core/widget/TextField.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport LocaleManager from '../../Core/localization/LocaleManager.js';\nimport Objects from '../../Core/helper/util/Objects.js';\nimport Dependencies from '../../Scheduler/feature/Dependencies.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\n/**\n * @module Gantt/widget/DependencyField\n */\n// Enables toggling of link type for each side\nconst\n    toggleTypes = {\n        from : [2, 3, 0, 1],\n        to   : [1, 0, 3, 2]\n    },\n    fromTo = {\n        from : 1,\n        to   : 1\n    },\n    buildDependencySuffixRe = () => new RegExp(`(${dependencyTypes.join('|')})?((?:[+-])\\\\d+[a-z]*)?`, 'i');\n// For parsing dependency strings and converting string to type.\n// dependencyTypes may be localized in the Gantt class domain\n// in which case the Regex is generated from the four local values.\nlet dependencyTypes = [\n        'SS',\n        'SF',\n        'FS',\n        'FF'\n    ],\n    dependencySuffixRe = buildDependencySuffixRe();\n/**\n * Chooses dependencies, connector sides and lag time for dependencies of a Task.\n *\n * This field can be used as an editor for a {@link Grid/column/Column}.\n * It is used as the default editor for the {@link Gantt/column/DependencyColumn}.\n *\n * The contextual task is the `record` property of this field's {@link Core/widget/Widget#property-owner}.\n *\n * {@inlineexample Gantt/widget/DependencyField.js}\n *\n * @extends Core/widget/Combo\n * @classtype dependencyfield\n * @inputfield\n */\nexport default class DependencyField extends Combo {\n    //region Config\n    static $name = 'DependencyField';\n    // Factoryable type name\n    static type = 'dependencyfield';\n    static configurable = {\n        listCls : 'b-predecessor-list',\n        displayField : 'name',\n        valueField : 'name',\n        // Filtering down to zero using the captive filter field in the picker\n        // should not make the overall field invalid.\n        validateFilter : false,\n        // The filtering field is in the picker.\n        // Don't hide it when the input length drops below minChars\n        minChars : 0,\n        // The main input's text is not the filter string, so it must not be cleared on picker hide\n        clearTextOnPickerHide : false,\n        picker : {\n            floating            : true,\n            scrollAction        : 'realign',\n            itemsFocusable      : false,\n            activateOnMouseover : true,\n            align               : {\n                align    : 't0-b0',\n                axisLock : true\n            },\n            maxHeight  : 324,\n            minHeight  : 161,\n            scrollable : {\n                overflowY : true\n            },\n            autoShow     : false,\n            focusOnHover : false\n        },\n        /**\n         * Delimiter between dependency ids in the field\n         * @config {String}\n         * @default\n         */\n        delimiter : ';',\n        /**\n         * The dependency store\n         * @config {Gantt.data.DependencyStore}\n         * @default\n         */\n        dependencyStore : null,\n        /**\n         * The other task's relationship with this field's contextual task.\n         * This will be `'from'` if we are editing predecessors, and `'to'` if\n         * we are editing successors.\n         * @config {'from'|'to'}\n         */\n        otherSide : null,\n        /**\n         * This field's contextual task's relationship with the other task.\n         * This will be `'to'` if we are editing predecessors, and `'from'` if\n         * we are editing successors.\n         * @config {'from'|'to'}\n         */\n        ourSide : null,\n        multiSelect : true,\n        chipView : null,\n        validateOnInput : false,\n        /**\n         * A task field (id, wbsCode, sequenceNumber etc) that will be used when displaying and editing linked\n         * tasks. Defaults to {@link Gantt/view/GanttBase#config-dependencyIdField Gantt#dependencyIdField}\n         * @config {String}\n         */\n        dependencyIdField : null,\n        /**\n         * The task whose dependencies are being edited (used to filter out invalid options)\n         * @config {String}\n         * @internal\n         */\n        eventRecord : null,\n        /**\n         * The sorters defining how to sort tasks in the drop down list, defaults to sorting by `name` field\n         * ascending. See {@link Core.data.mixin.StoreSort} for more information.\n         * @config {Sorter[]|String[]}\n         */\n        sorters : [\n            {\n                field : 'name'\n            }\n        ]\n    };\n    //endregion\n    construct(config) {\n        const\n            me                     = this,\n            { ourSide, otherSide } = config;\n        me.dependencies = new Collection({\n            extraKeys : otherSide\n        });\n        me.startCollection = new Collection({\n            extraKeys : otherSide\n        });\n        super.construct(config);\n        me.delimiterRegEx = new RegExp(`\\\\s*${me.delimiter}\\\\s*`);\n        const localizeDependencies = () => {\n            dependencyTypes = me.L('L{DependencyType.short}');\n            dependencySuffixRe = buildDependencySuffixRe();\n            me.syncInputFieldValue();\n        };\n        // Update when changing locale\n        LocaleManager.ion({ locale : localizeDependencies, thisObj : me });\n        localizeDependencies();\n    }\n    internalOnInput() {\n        this.clearError(undefined, true);\n        if (this.isValid) {\n            // Avoid combo filtering. That's done from our FilterField\n            TextField.prototype.internalOnInput.call(this);\n        }\n    }\n    get invalidValueError() {\n        return 'L{invalidDependencyFormat}';\n    }\n    onInternalKeyDown(keyEvent) {\n        const { key } = keyEvent;\n        // Don't pass Enter down, that selects when ComboBox passes it down\n        // to its list. We want default action on Enter.\n        // Our list has its own, built-in filter field which provides key events.\n        if (key === 'Enter') {\n            this.syncInvalid();\n        }\n        else {\n            super.onInternalKeyDown?.(keyEvent);\n        }\n        if (this.pickerVisible && key === 'ArrowDown') {\n            this.filterField.focus();\n        }\n    }\n    onTriggerClick() {\n        if (this.pickerVisible) {\n            super.onTriggerClick(...arguments);\n        }\n        else {\n            this.doFilter(this.filterInput ? this.filterInput.value : null);\n        }\n    }\n    changeStore(store) {\n        // Filter the store to hide the field's Task\n        store = store.chain(record => !this.eventRecord || (record.id !== this.eventRecord.id), null, {\n            excludeCollapsedRecords : false,\n            sorters                 : this.sorters\n        });\n        return super.changeStore(store);\n    }\n    changePicker(picker, oldPicker) {\n        const\n            me          = this,\n            filterField = me.filterField || (me.filterField = new TextField({\n                cls         : 'b-dependency-list-filter',\n                clearable   : true,\n                placeholder : 'Filter',\n                triggers    : {\n                    filter : {\n                        cls   : 'b-icon b-icon-filter',\n                        align : 'start'\n                    }\n                },\n                internalListeners : {\n                    input({ event }) {\n                        me.filterOnInput(event);\n                    },\n                    clear({ event }) {\n                        Object.defineProperty(event, 'target', {\n                            configurable : true,\n                            value        : filterFieldInput\n                        });\n                        me.filterOnInput.now(event);\n                    }\n                }\n            })),\n            filterFieldInput = me.filterInput = filterField.input,\n            result = DependencyField.reconfigure(oldPicker, picker ? Objects.merge({\n                owner      : me,\n                store      : me.store,\n                cls        : `b-dependency-list ${me.listCls}`,\n                itemTpl    : me.listItemTpl,\n                forElement : me[me.pickerAlignElement],\n                align      : {\n                    anchor    : me.overlayAnchor,\n                    target    : me[me.pickerAlignElement],\n                    // Reasonable minimal height to fit few combo items below the combo.\n                    // When height is not enough, list will appear on top. That works for windows higher than 280px,\n                    // worrying about shorter windows sounds overkill.\n                    // We cannot use relative measures here, each combo list item is ~40px high\n                    minHeight : me.inlinePicker ? null : Math.min(3, me.store.count) * 40\n                },\n                navigator : {\n                    keyEventTarget : filterFieldInput,\n                    processEvent   : e => {\n                        if (e.key === 'Escape') {\n                            me.hidePicker();\n                        }\n                        else {\n                            return e;\n                        }\n                    }\n                },\n                onItem         : me.onPredecessorClick.bind(me),\n                getItemClasses : function(task) {\n                    const\n                        result     = List.prototype.getItemClasses.call(this, task),\n                        dependency = me.dependencies.getBy(me.otherSide + 'Event', task),\n                        cls        = dependency ? ` b-selected b-${dependency.getConnectorString(1).toLowerCase()}` : '';\n                    return result + cls;\n                }\n            }, picker) : null, me);\n        // May have been set to null (destroyed)\n        if (result) {\n            // Avoid pulling scrollable in too early to not trigger ResizeObserver in FF\n            result.ion({\n                show() {\n                    // The scrolling viewport is obscured by the filterField\n                    Object.defineProperty(result.scrollable, 'viewport', {\n                        get() {\n                            return Rectangle.client(this.element).deflate(filterField.height, 0, 0, 0);\n                        }\n                    });\n                },\n                once    : true,\n                thisObj : me\n            });\n            filterField.owner = result;\n            filterField.render(result.contentElement);\n        }\n        // If it has been destroyed, destroy orphaned filterField\n        else {\n            me.destroyProperties('filterField');\n        }\n        return result;\n    }\n    updateEventRecord() {\n        // Ensure this field's Task is filtered out.\n        // See our changeStore which owns the chainedFilterFn.\n        this.store.fillFromMaster();\n    }\n    onPickerShow({ source : picker }) {\n        const\n            me                 = this,\n            { element }        = me.filterField,\n            { contentElement } = picker;\n        picker.minWidth = me[me.pickerAlignElement].offsetWidth;\n        if (contentElement.firstChild !== element) {\n            contentElement.insertBefore(element, contentElement.firstChild);\n        }\n        super.onPickerShow(...arguments);\n    }\n    listItemTpl(task) {\n        const\n            taskName              = StringHelper.encodeHtml(task.name),\n            { dependencyIdField } = this.owner,\n            idField               = (dependencyIdField && dependencyIdField !== task.constructor.idField) ? dependencyIdField : task.constructor.idField,\n            // Don't output generated ids in the list\n            taskIdentifier        = !task.isPhantom ? String(task[idField]) : '';\n        return `<div class=\"b-predecessor-item-text\">${taskName} ${taskIdentifier.length ? `(${taskIdentifier})` : ''}</div>\n            <div class=\"b-sch-box b-from\" data-side=\"from\"></div>\n            <div class=\"b-sch-box b-to\" data-side=\"to\"></div>`;\n    }\n    get isValid() {\n        return Boolean(!this.task || this.parseDependencies(this.input.value)) && super.isValid;\n    }\n    set value(dependencies) {\n        const\n            me                     = this,\n            dependenciesCollection = me.dependencies;\n        // Convert strings, eg: '1fs-2h;2ss+1d' to Dependency records\n        if (typeof dependencies === 'string') {\n            me.input.value = dependencies;\n            dependencies = me.parseDependencies(dependencies);\n            if (!dependencies) {\n                me.syncInvalid();\n                return;\n            }\n            dependencies = dependencies.map(dep => new me.dependencyStore.modelClass(dep));\n        }\n        else {\n            me.startCollection.clear();\n            if (dependencies !== null) {\n                me.startCollection.values = dependencies;\n            }\n        }\n        dependenciesCollection.clear();\n        // Allow clearing the value by passing null (happens when clicking clear button)\n        if (dependencies !== null) {\n            dependenciesCollection.values = dependencies;\n        }\n        // If there has been a change, update the textual value.\n        if (!me.inputting) {\n            me.syncInputFieldValue();\n        }\n    }\n    get value() {\n        return this.dependencies.values;\n    }\n    get inputValue() {\n        const\n            me        = this,\n            { value } = me;\n        return value == null ? '' : me.constructor.dependenciesToString(value, me.otherSide, me.delimiter, me.dependencyIdField);\n    }\n    onPredecessorClick({ source : list, item, record : task, event }) {\n        const\n            me               = this,\n            { dependencies } = me,\n            box              = event.target.closest('.b-sch-box'),\n            side             = box?.dataset.side;\n        let dependency = dependencies.getBy(me.otherSide + 'Event', task);\n        // Prevent regular selection continuing after this click handler.\n        item.dataset.noselect = true;\n        // As we bypass List's selection, we trigger a manual change event to allow any prior error message to be cleared\n        me.trigger('change', { value : me.value, event, userAction : true });\n        // Click text to remove predecessor completely\n        if (dependency && !box) {\n            dependencies.remove(dependency);\n        }\n        else {\n            // Clicking a connect side box toggles that\n            if (dependency) {\n                // We must create a clone because the record is \"live\".\n                // Updates to it go back to the UI.\n                // Also we cannot really modify record here. When editing will finish editor will compare `toJSON`\n                // output of models, which refers to the `model.data` field. And if we modify record instance, change\n                // won't go to the data object, it will be kept in the field though. Only way to sync model.data.type and\n                // model.type here is to instantiate model with correct data already\n                const\n                    { id, type } = dependency;\n                // Using private argument here to avoid copying record current values, we're only interested in data object\n                dependency = dependency.copy({ id, type : toggleTypes[side][type] }, { skipFieldIdentifiers : true });\n                // HACK: Above code results having serialized values in `${me.otherSide}Event` field\n                // and we expect to find task instance when doing code like:\n                //     dependencies.getBy(me.otherSide + 'Event', task)\n                // So let's put the task instance there manually.\n                dependency[`${me.otherSide}Event`] = task;\n                dependency[`${me.ourSide}Event`] = me.task;\n                // Replace the old predecessor link with the new, modified one.\n                // Collection will *replace* in-place due to ID matching.\n                dependencies.add(dependency);\n            }\n            // Create a new dependency to/from the clicked task\n            else {\n                dependencies.add(me.dependencyStore.createRecord({\n                    [`${me.otherSide}Event`] : task,\n                    [`${me.ourSide}Event`]   : me.task\n                }, true));\n            }\n        }\n        me.syncInputFieldValue();\n        list.refresh();\n    }\n    static dependenciesToString(dependencies, side, delimiter = ';', eventIdField = 'id') {\n        const eventField = `${side}Event`;\n        const getEventId = dependency => {\n            const event = dependency[eventField];\n            return event?.isModel ? event[eventIdField] : (event || '');\n        };\n        if (dependencies?.length) {\n            const result = dependencies.sort((a, b) => getEventId(a) - getEventId(b)).map(dependency =>\n                `${getEventId(dependency)}${Dependencies.getLocalizedDependencyType(dependency.getConnectorString())}${dependency.getLag()}`\n            );\n            return result.join(delimiter);\n        }\n        return '';\n    }\n    // static * dependenciesToStringGenerator(dependencies, otherSide, delimiter = ';') {\n    //     const result = [];\n    //\n    //     if (dependencies && dependencies.length) {\n    //         for (const dependency of dependencies) {\n    //             const\n    //                 otherSideEvent = yield dependency.$[otherSide + 'Event'],\n    //                 otherSideEventId = otherSideEvent ? otherSideEvent.id : (otherSideEvent || '');\n    //\n    //             result.push(`${otherSideEventId}${yield dependency.getConnectorString()}${dependency.getLag()}`);\n    //         }\n    //     }\n    //\n    //     return result.join(delimiter);\n    // }\n    get task() {\n        return this.owner?.record;\n    }\n    parseDependencies(value) {\n        const  me = this;\n        return me.constructor.parseDependencies({\n            value,\n            taskStore         : me.store,\n            task              : me.task,\n            dependencyStore   : me.dependencyStore,\n            delimiterRegEx    : me.delimiterRegEx,\n            dependencyIdField : me.dependencyIdField,\n            ourSide           : me.ourSide,\n            otherSide         : me.otherSide\n        });\n    }\n    static parseDependencies({\n        value,\n        taskStore,\n        task,\n        dependencyStore,\n        delimiterRegEx,\n        dependencyIdField,\n        ourSide,\n        otherSide\n    }) {\n        const\n            dependencies    = value.split(delimiterRegEx),\n            DependencyModel = dependencyStore.modelClass,\n            result          = [];\n        for (let i = 0; i < dependencies.length; i++) {\n            const dependencyText = dependencies[i];\n            if (dependencyText) {\n                let idLen      = dependencyText.length + 1,\n                    linkedTask = null,\n                    linkedTaskId;\n                for (; idLen && !linkedTask; idLen--) {\n                    linkedTaskId = dependencyText.substr(0, idLen);\n                    linkedTask = taskStore.find(task => String(task[dependencyIdField]) === linkedTaskId, true);\n                }\n                if (!linkedTask) {\n                    return null;\n                }\n                // Chop off connector and lag specification, i.e. the \"SS-1h\" part\n                const\n                    remainder = dependencyText.substr(idLen + 1),\n                    // Start the structure of the dependency we are describing\n                    dependency = {\n                        // This will be \"from\" if we're editing predecessors\n                        // and \"to\" if we're editing successors\n                        [`${otherSide}Event`] : linkedTask,\n                        // This will be \"to\" if we're editing predecessors\n                        // and \"from\" if we're editing successors\n                        [`${ourSide}Event`] : task,\n                        type : DependencyModel.Type.EndToStart\n                    };\n                // There's a trailing edge/lag spec\n                if (remainder.length) {\n                    const edgeAndLag = dependencySuffixRe.exec(remainder);\n                    if (edgeAndLag && (edgeAndLag[1] || edgeAndLag[2])) {\n                        // The SS/FF bit\n                        if (edgeAndLag[1]) {\n                            dependency.type = dependencyTypes.indexOf(edgeAndLag[1].toUpperCase());\n                        }\n                        // The -1h bit\n                        if (edgeAndLag[2]) {\n                            const\n                                parsedLag = DateHelper.parseDuration(edgeAndLag[2], true, task.durationUnit);\n                            dependency.lag = parsedLag.magnitude;\n                            dependency.lagUnit = parsedLag.unit;\n                        }\n                    }\n                    else {\n                        return null;\n                    }\n                }\n                result.push(dependency);\n            }\n        }\n        return result;\n    }\n    get needsInputSync() {\n        return super.needsInputSync || (!this.isValid && this.inputValue !== this.input.value);\n    }\n    doDestroy() {\n        this.dependencies.destroy();\n        this.startCollection.destroy();\n        super.doDestroy();\n    }\n};\n// Register this widget type with its Factory\nDependencyField.initClass();\nDependencyField._$name = 'DependencyField';", "import Column from '../../Grid/column/Column.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\nimport DependencyField from '../widget/DependencyField.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\n/**\n * @module Gantt/column/DependencyColumn\n */\nconst\n    hasNoProject = v => !v.project,\n    depIsValid   = v => v;\n/**\n * A column which displays, in textual form, the dependencies which either link to the\n * contextual task from other, preceding tasks, or dependencies which link the\n * contextual task to successor tasks.\n *\n * Default editor is a {@link Gantt/widget/DependencyField}.\n *\n * The {@link Grid/column/Column#config-field} MUST be either `predecessors` or `successors` in order\n * for this column to know what kind of dependency it is showing.\n *\n * By default predecessors and successors have a task ID as a value. But it's configurable and any field may be used to display there (as example: wbsCode or sequenceNumber)\n * using {@link #config-dependencyIdField}\n *\n * @classtype dependency\n * @extends Grid/column/Column\n * @column\n */\nexport default class DependencyColumn extends Delayable(Column) {\n    static get $name() {\n        return 'DependencyColumn';\n    }\n    static get type() {\n        return 'dependency';\n    }\n    static get fields() {\n        return [\n            /**\n             * Delimiter used for displayed value and editor\n             * @config {String} delimiter\n             */\n            { name : 'delimiter', defaultValue : ';' },\n            /**\n             * A task field (id, wbsCode, sequenceNumber etc) that will be used when displaying and editing linked tasks. Defaults to {@link Gantt/view/GanttBase#config-dependencyIdField}\n             * @config {String} dependencyIdField\n             */\n            { name : 'dependencyIdField', defaultValue : null }\n        ];\n    }\n    static get defaults() {\n        return {\n            htmlEncode : false,\n            width      : 120,\n            renderer({ record, grid }) {\n                const dependencyIdField = this.dependencyIdField || grid.dependencyIdField;\n                return DependencyField.dependenciesToString(record[this.field], this.field === 'predecessors' ? 'from' : 'to', this.delimiter, dependencyIdField);\n            },\n            filterable({ value, record : taskRecord, column }) {\n                const dependencyIdField = column.dependencyIdField || column.grid.dependencyIdField;\n                value = value.toLowerCase();\n                return taskRecord[`${column.field === 'predecessors' ? 'predecessorTasks' : 'successorTasks'}`].some(linkedTask => {\n                    return linkedTask && value.includes(linkedTask[dependencyIdField]?.toString().toLowerCase());\n                });\n            }\n        };\n    }\n    afterConstruct() {\n        super.afterConstruct();\n    }\n    getFilterableValue(record) {\n        return this.renderer({ record, grid : this.grid });\n    }\n    async finalizeCellEdit({ grid, record, inputField, value, oldValue, editorContext }) {\n        inputField.clearError();\n        if (record && value) {\n            const\n                toValidate      = value.filter(hasNoProject),\n                project         = grid.dependencyStore.getProject(),\n                oldDependencies = record[this.field];\n            await project.commitAsync();\n            if (project.isDestroyed) return;\n            const\n                results  = await Promise.all(\n                    toValidate.map(dependency => project.isValidDependencyModel(dependency, oldDependencies))\n                ),\n                valid = results.every(depIsValid);\n            if (!valid) {\n                return editorContext.column.L('L{Invalid dependency}');\n            }\n            return true;\n        }\n    }\n    get defaultEditor() {\n        const\n            me = this,\n            { grid } = me,\n            isPredecessor = me.field === 'predecessors';\n        return {\n            type              : 'dependencyfield',\n            grid,\n            name              : me.field,\n            delimiter         : me.delimiter,\n            dependencyIdField : me.dependencyIdField || grid.dependencyIdField,\n            ourSide           : isPredecessor ? 'to' : 'from',\n            otherSide         : isPredecessor ? 'from' : 'to',\n            store             : grid.eventStore || grid.taskStore,\n            dependencyStore   : grid.dependencyStore\n        };\n    }\n    toClipboardString({ record, grid }) {\n        if (record?.[this.field]) {\n            const dependencyIdField = this.dependencyIdField || grid.dependencyIdField;\n            return DependencyField.dependenciesToString(record[this.field], this.field === 'predecessors' ? 'from' : 'to', this.delimiter, dependencyIdField);\n        }\n    }\n    fromClipboardString({ string, record }) {\n        const { editor } = this;\n        if (editor) {\n            return DependencyField.parseDependencies({\n                value             : string,\n                taskStore         : this.grid.taskStore,\n                task              : record,\n                dependencyStore   : this.grid.dependencyStore,\n                delimiterRegEx    : /\\s*,\\s*/,\n                ourSide           : editor.ourSide,\n                otherSide         : editor.otherSide,\n                dependencyIdField : editor.dependencyIdField\n            }) || [];\n        }\n    }\n}\nColumnStore.registerColumnType(DependencyColumn);\nDependencyColumn._$name = 'DependencyColumn';", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport DependencyColumn from './DependencyColumn.js';\n/**\n * @module Gantt/column/PredecessorColumn\n */\n/**\n * A column which displays, in textual form, the dependencies which link from tasks\n * upon which the contextual task depends.\n *\n * This type of column is editable by default. Default editor is a {@link Gantt/widget/DependencyField}.\n *\n * This column will be ignored if using {@link Grid/feature/CellCopyPaste} to paste or {@link Grid/feature/FillHandle}\n * to fill values.\n *\n * @classtype predecessor\n * @extends Gantt/column/DependencyColumn\n * @column\n */\nexport default class PredecessorColumn extends DependencyColumn {\n    static get $name() {\n        return 'PredecessorColumn';\n    }\n    static get type() {\n        return 'predecessor';\n    }\n    static get isGanttColumn() {\n        return true;\n    }\n    static get defaults() {\n        return {\n            text  : 'L{Predecessors}',\n            field : 'predecessors'\n        };\n    }\n    canFillValue = () => false;\n}\nColumnStore.registerColumnType(PredecessorColumn);\nPredecessorColumn._$name = 'PredecessorColumn';", "import AssignmentStore from '../../SchedulerPro/data/AssignmentStore.js';\n/**\n * @module Gantt/data/AssignmentsManipulationStore\n */\n/**\n * Special store class for _single_ task/event assignments manipulation, used by {@link Gantt/widget/AssignmentGrid}\n *\n * Contains a collection of {@link Gantt/model/AssignmentModel} records.\n *\n * @extends Scheduler/data/AssignmentStore\n * @internal\n */\nexport default class AssignmentsManipulationStore extends AssignmentStore {\n    //region Config\n    static get defaultConfig() {\n        return {\n            storage : {\n                extraKeys : ['resource']\n            },\n            callOnFunctions : true,\n            /**\n             * Event model to manipulate assignments of, the event should be part of a project.\n             *\n             * @config {Gantt.model.TaskModel}\n             */\n            projectEvent : null,\n            /**\n             * Flag indicating whether assigned resources should be placed (floated) before unassigned ones.\n             *\n             * @config {Boolean}\n             * @private\n             */\n            floatAssignedResources : true,\n            /**\n             * Flag indicating whether assigned resources should be floated live\n             *\n             * @config {Boolean}\n             * @private\n             */\n            liveFloatAssignedResources : false\n        };\n    }\n    afterConfigure() {\n        const me = this;\n        super.afterConfigure();\n        me.addSorter({\n            fn : me.defaultSort.bind(me)\n        });\n    }\n    //endregion\n    get projectEvent() {\n        return this._projectEvent;\n    }\n    set projectEvent(projectEvent) {\n        const me = this;\n        // If the event is the same, but some underlying data has changed, we must still update\n        if (\n            projectEvent != me._projectEvent ||\n            (projectEvent && (projectEvent.generation !== me._projectEventGeneration)) ||\n            (projectEvent?.getProject()?.assignmentStore.storage.generation !== me._assignmentStoreGeneration)\n        ) {\n            me._projectEvent = projectEvent;\n            me._projectEventGeneration = projectEvent?.generation;\n            me._assignmentStoreGeneration = projectEvent?.getProject()?.assignmentStore.storage.generation;\n            if (projectEvent) {\n                me.fillFromMaster();\n                me.sort();\n            }\n            else {\n                me.removeAll();\n            }\n        }\n    }\n    get floatAssignedResources() {\n        return this._floatAssignedResources;\n    }\n    set floatAssignedResources(value) {\n        const me = this;\n        if (value !== me.floatAssignedResources) {\n            me._floatAssignedResources = value;\n            me.sort();\n        }\n    }\n    /**\n     * Fills this store from master {@link Gantt/data/ResourceStore resource} store and {@link Gantt/data/AssignmentStore assignment} store.\n     * @internal\n     */\n    fillFromMaster() {\n        const\n            me               = this,\n            { projectEvent } = me;\n        if (projectEvent) {\n            const\n                {\n                    assignmentStore,\n                    resourceStore\n                }                  = projectEvent,\n                resourceDataSource = assignmentStore.modelClass.getFieldDefinition('resource').dataSource,\n                eventDataSource    = assignmentStore.modelClass.getFieldDefinition('event').dataSource,\n                storeData          = [];\n            // For each excludes group header records - ResourceStore might be grouped externally\n            resourceStore.forEach(\n                resource => {\n                    const\n                        existingAssignment = assignmentStore.getAssignmentForEventAndResource(projectEvent, resource),\n                        data               = Object.assign(\n                            { units : 0 },\n                            existingAssignment?.data\n                        );\n                    delete data.id;\n                    delete data.eventId;\n                    delete data.resourceId;\n                    // handle data mapping cases\n                    delete data[resourceDataSource];\n                    delete data[eventDataSource];\n                    // apply resource and event after cleaning data mapping\n                    Object.assign(data, { resource, event : projectEvent });\n                    storeData.push(data);\n                },\n                this,\n                {\n                    includeFilteredOutRecords    : true,\n                    includeCollapsedGroupRecords : true\n                }\n            );\n            me.data = storeData;\n        }\n    }\n    toValue() {\n        return this.query(a => a.units > 0);\n    }\n    toValueString() {\n        return this.toValue().join(', ');\n    }\n    defaultSort(lhs, rhs) {\n        let result = 0;\n        if (this.floatAssignedResources) {\n            if (!rhs.units && lhs.units) {\n                result = -1;\n            }\n            else if (!lhs.units && rhs.units) {\n                result = 1;\n            }\n            else {\n                result = lhs.resourceName.localeCompare(rhs.resourceName);\n            }\n        }\n        else {\n            result = lhs.resourceName.localeCompare(rhs.resourceName);\n        }\n        return result;\n    }\n    onUpdate({ changes }) {\n        const me = this;\n        if (!me.isConfiguring) {\n            if (Object.hasOwnProperty.call(changes, 'event')) {\n                if (me.floatAssignedResources && me.liveFloatAssignedResources) {\n                    me.sort();\n                }\n            }\n        }\n    }\n}\nAssignmentsManipulationStore._$name = 'AssignmentsManipulationStore';", "import SchedulerProAssignmentModel from '../../SchedulerPro/model/AssignmentModel.js';\nimport { isSerializableEqual } from '../../Engine/chrono/ModelFieldAtom.js';\n/**\n * @module Gantt/model/AssignmentModel\n */\n/**\n * This class represent a single assignment of a {@link Gantt.model.ResourceModel resource} to a\n * {@link Gantt.model.TaskModel task} in your gantt chart.\n *\n * @extends SchedulerPro/model/AssignmentModel\n *\n * @uninherit Core/data/mixin/TreeNode\n *\n * @typings SchedulerPro.model.AssignmentModel -> SchedulerPro.model.SchedulerProAssignmentModel\n *\n */\nexport default class AssignmentModel extends SchedulerProAssignmentModel {\n    //region Fields\n    static get fields() {\n        /**\n         * The numeric, percent-like value, indicating what is the \"contribution level\"\n         * of the resource availability to the task.\n         * Number 100, means that the assigned resource spends 100% of its working time to the task.\n         * Number 50 means that the resource spends only half of its available time for the assigned task.\n         * @field {Number} units\n         */\n        return [\n            /**\n             * Id for event to assign. Note that after load it will be populated with the actual event.\n             * @field {Gantt.model.TaskModel} event\n             * @accepts {String|Number|Gantt.model.TaskModel}\n             */\n            {\n                name      : 'event',\n                persist   : true,\n                serialize : record => record?.id,\n                isEqual   : isSerializableEqual\n            },\n            /**\n             * Id for resource to assign to. Note that after load it will be populated with the actual resource.\n             * @field {Gantt.model.ResourceModel} resource\n             * @accepts {String|Number|Gantt.model.ResourceModel}\n             */\n            {\n                name      : 'resource',\n                persist   : true,\n                serialize : record => record?.id,\n                isEqual   : isSerializableEqual\n            },\n            /**\n             * Hidden\n             * @field {String|Number} eventId\n             * @hide\n             */\n            'eventId',\n            /**\n             * Hidden\n             * @field {String|Number} resourceId\n             * @hide\n             */\n            'resourceId'\n        ];\n    }\n    //endregion\n}\nAssignmentModel._$name = 'AssignmentModel';", "import LocaleHelper from '../../Core/localization/LocaleHelper.js';\nimport '../../SchedulerPro/localization/En.js';\nconst locale = {\n    localeName : 'En',\n    localeDesc : 'English (US)',\n    localeCode : 'en-US',\n    Object : {\n        Save : 'Save'\n    },\n    IgnoreResourceCalendarColumn : {\n        'Ignore resource calendar' : 'Ignore resource calendar'\n    },\n    InactiveColumn : {\n        Inactive : 'Inactive'\n    },\n    AddNewColumn : {\n        'New Column' : 'New Column'\n    },\n    BaselineStartDateColumn : {\n        baselineStart : 'Baseline Start'\n    },\n    BaselineEndDateColumn : {\n        baselineEnd : 'Baseline Finish'\n    },\n    BaselineDurationColumn : {\n        baselineDuration : 'Baseline Duration'\n    },\n    BaselineStartVarianceColumn : {\n        startVariance : 'Start Variance'\n    },\n    BaselineEndVarianceColumn : {\n        endVariance : 'Finish Variance'\n    },\n    BaselineDurationVarianceColumn : {\n        durationVariance : 'Duration Variance'\n    },\n    CalendarColumn : {\n        Calendar : 'Calendar'\n    },\n    EarlyStartDateColumn : {\n        'Early Start' : 'Early Start'\n    },\n    EarlyEndDateColumn : {\n        'Early End' : 'Early End'\n    },\n    LateStartDateColumn : {\n        'Late Start' : 'Late Start'\n    },\n    LateEndDateColumn : {\n        'Late End' : 'Late End'\n    },\n    TotalSlackColumn : {\n        'Total Slack' : 'Total Slack'\n    },\n    ConstraintDateColumn : {\n        'Constraint Date' : 'Constraint Date'\n    },\n    ConstraintTypeColumn : {\n        'Constraint Type' : 'Constraint Type'\n    },\n    DeadlineDateColumn : {\n        Deadline : 'Deadline'\n    },\n    DependencyColumn : {\n        'Invalid dependency' : 'Invalid dependency'\n    },\n    DurationColumn : {\n        Duration : 'Duration'\n    },\n    EffortColumn : {\n        Effort : 'Effort'\n    },\n    EndDateColumn : {\n        Finish : 'Finish'\n    },\n    EventModeColumn : {\n        'Event mode' : 'Event mode',\n        Manual       : 'Manual',\n        Auto         : 'Auto'\n    },\n    ManuallyScheduledColumn : {\n        'Manually scheduled' : 'Manually scheduled'\n    },\n    MilestoneColumn : {\n        Milestone : 'Milestone'\n    },\n    NameColumn : {\n        Name : 'Name'\n    },\n    NoteColumn : {\n        Note : 'Note'\n    },\n    PercentDoneColumn : {\n        '% Done' : '% Done'\n    },\n    PredecessorColumn : {\n        Predecessors : 'Predecessors'\n    },\n    ResourceAssignmentColumn : {\n        'Assigned Resources' : 'Assigned Resources',\n        'more resources'     : 'more resources'\n    },\n    RollupColumn : {\n        Rollup : 'Rollup'\n    },\n    SchedulingModeColumn : {\n        'Scheduling Mode' : 'Scheduling Mode'\n    },\n    SchedulingDirectionColumn : {\n        schedulingDirection : 'Scheduling direction',\n        inheritedFrom       : 'Inherited from',\n        enforcedBy          : 'Enforced by'\n    },\n    SequenceColumn : {\n        Sequence : 'Sequence'\n    },\n    ShowInTimelineColumn : {\n        'Show in timeline' : 'Show in timeline'\n    },\n    StartDateColumn : {\n        Start : 'Start'\n    },\n    SuccessorColumn : {\n        Successors : 'Successors'\n    },\n    TaskCopyPaste : {\n        copyTask  : 'Copy',\n        cutTask   : 'Cut',\n        pasteTask : 'Paste'\n    },\n    WBSColumn : {\n        WBS      : 'WBS',\n        renumber : 'Renumber'\n    },\n    DependencyField : {\n        invalidDependencyFormat : 'Invalid dependency format'\n    },\n    ProjectLines : {\n        'Project Start' : 'Project start',\n        'Project End'   : 'Project end'\n    },\n    TaskTooltip : {\n        Start    : 'Start',\n        End      : 'End',\n        Duration : 'Duration',\n        Complete : 'Complete'\n    },\n    AssignmentGrid : {\n        Name     : 'Resource name',\n        Units    : 'Units',\n        unitsTpl : ({ value }) => value ? value + '%' : ''\n    },\n    Gantt : {\n        Edit                   : 'Edit',\n        Indent                 : 'Indent',\n        Outdent                : 'Outdent',\n        'Convert to milestone' : 'Convert to milestone',\n        Add                    : 'Add...',\n        'New task'             : 'New task',\n        'New milestone'        : 'New milestone',\n        'Task above'           : 'Task above',\n        'Task below'           : 'Task below',\n        'Delete task'          : 'Delete',\n        Milestone              : 'Milestone',\n        'Sub-task'             : 'Subtask',\n        Successor              : 'Successor',\n        Predecessor            : 'Predecessor',\n        changeRejected         : 'Scheduling engine rejected the changes',\n        linkTasks              : 'Add dependencies',\n        unlinkTasks            : 'Remove dependencies',\n        color                  : 'Color'\n    },\n    EventSegments : {\n        splitTask : 'Split task'\n    },\n    Indicators : {\n        earlyDates   : 'Early start/end',\n        lateDates    : 'Late start/end',\n        Start        : 'Start',\n        End          : 'End',\n        deadlineDate : 'Deadline'\n    },\n    Versions : {\n        indented     : 'Indented',\n        outdented    : 'Outdented',\n        cut          : 'Cut',\n        pasted       : 'Pasted',\n        deletedTasks : 'Deleted tasks'\n    }\n};\nexport default LocaleHelper.publishLocale(locale);\n", "import ResourceInfoColumn from '../../Scheduler/column/ResourceInfoColumn.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\n/**\n * @module Gantt/column/ResourceAssignmentGridResourceColumn.js\n */\n/**\n * Column showing the resource name / avatar inside the AssignmentGrid\n *\n * @internal\n * @extends Scheduler/column/ResourceInfoColumn\n * @classtype resourceassignment\n * @column\n */\nexport default class ResourceAssignmentGridResourceColumn extends ResourceInfoColumn {\n    static get $name() {\n        return 'ResourceAssignmentGridResourceColumn';\n    }\n    static get type() {\n        return 'assignmentResource';\n    }\n    static get defaults() {\n        return {\n            showEventCount     : false,\n            cls                : 'b-assignmentgrid-resource-column',\n            field              : 'resourceName',\n            flex               : 1,\n            editor             : null,\n            useNameAsImageName : false,\n            filterable         : {\n                filterField : {\n                    placeholder : 'L{AssignmentGrid.Name}',\n                    triggers    : {\n                        filter : {\n                            align : 'start',\n                            cls   : 'b-icon b-icon-filter'\n                        }\n                    }\n                }\n            }\n        };\n    }\n    defaultRenderer({ grid, record, cellElement, value, isExport }) {\n        if (!record.isSpecialRow) {\n            record = record.resource;\n        }\n        return super.defaultRenderer({ grid, record, cellElement, value, isExport });\n    }\n}\nColumnStore.registerColumnType(ResourceAssignmentGridResourceColumn);\nResourceAssignmentGridResourceColumn._$name = 'ResourceAssignmentGridResourceColumn';", "import Grid from '../../Grid/view/Grid.js';\nimport NumberColumn from '../../Grid/column/NumberColumn.js';\nimport Objects from '../../Core/helper/util/Objects.js';\nimport AssignmentManipulationStore from '../data/AssignmentsManipulationStore.js';\nimport AssignmentModel from '../model/AssignmentModel.js';\nimport '../../Core/widget/Checkbox.js';\nimport '../../Grid/feature/FilterBar.js';\nimport '../../Gantt/localization/En.js';\nimport '../../Gantt/column/ResourceAssignmentGridResourceColumn.js';\n/**\n * @module Gantt/widget/AssignmentGrid\n */\n/**\n * This grid visualizes and lets users edit assignments of an {@link #config-projectEvent event}. Used by the\n * {@link Gantt.widget.AssignmentField}. This grid shows one column showing the resource name, and one showing\n * the units assigned. You can add additional columns by providing a {@link Grid.view.Grid#config-columns} array in your grid config.\n *\n * {@inlineexample Gantt/widget/AssignmentGrid.js}\n *\n * @extends Grid/view/Grid\n * @classtype assignmentgrid\n * @widget\n */\nexport default class AssignmentGrid extends Grid {\n    static get $name() {\n        return 'AssignmentGrid';\n    }\n    // Factoryable type name\n    static get type() {\n        return 'assignmentgrid';\n    }\n    //region Config\n    static get configurable() {\n        return {\n            // Required by ResourceInfo column\n            resourceImageExtension : '.jpg',\n            minHeight              : 200,\n            /**\n             * A {@link Grid.column.Column} config object for the resource column. You can pass a `renderer` which\n             * gives you access to the `resource` record.\n             *\n             * @config {ResourceAssignmentColumnConfig}\n             */\n            resourceColumn : {\n                type : 'assignmentResource'\n            },\n            /**\n             * A config object for the units column\n             *\n             * @config {NumberColumnConfig}\n             */\n            unitsColumn : {\n                field       : 'units',\n                type        : NumberColumn.type,\n                text        : 'L{Units}',\n                localeClass : this,\n                width       : 70,\n                min         : 0,\n                max         : 100,\n                step        : 10,\n                unit        : '%',\n                renderer    : ({ value }) => this.L('L{unitsTpl}', { value : Math.round(value) }),\n                filterable  : false\n            }\n        };\n    }\n    static get defaultConfig() {\n        return {\n            selectionMode : {\n                checkboxOnly : true,\n                multiSelect  : true,\n                showCheckAll : true\n            },\n            // If enabled blocks header checkbox click event\n            features : {\n                group       : false,\n                filterBar   : true,\n                contextMenu : false\n            },\n            disableGridRowModelWarning : true,\n            /**\n             * Event model to manipulate assignments of, the task should be part of a task store.\n             * Either task or {@link Grid/view/Grid#config-store store} should be given.\n             *\n             * @config {Gantt.model.TaskModel}\n             */\n            projectEvent : null\n        };\n    }\n    //endregion\n    construct() {\n        super.construct(...arguments);\n        this.ion({\n            selectionChange : ({ selected, deselected }) => {\n                selected.forEach(assignment => assignment.units = assignment.units || assignment.getFieldDefinition('units').defaultValue);\n                deselected.forEach(assignment => {\n                    if (this.store.includes(assignment)) {\n                        assignment.units = 0;\n                    }\n                });\n            }\n        });\n    }\n    get projectEvent() {\n        const me = this,\n            store = me.store;\n        let projectEvent = me._projectEvent;\n        if (store && (projectEvent !== store.projectEvent)) {\n            projectEvent = me._projectEvent = store.projectEvent;\n        }\n        return projectEvent;\n    }\n    set projectEvent(projectEvent) {\n        const me = this;\n        me._projectEvent = projectEvent;\n        me.store.projectEvent = projectEvent;\n        if (projectEvent) {\n            me.selectedRecords = me.store.query(as => projectEvent.assignments.find(existingAs => existingAs.resource === as.resource));\n        }\n    }\n    get store() {\n        return super.store;\n    }\n    set store(store) {\n        const\n            me       = this,\n            oldStore = me.store;\n        if (store && oldStore !== store) {\n            if (!(store instanceof AssignmentManipulationStore)) {\n                store = AssignmentManipulationStore.new({\n                    modelClass   : me._projectEvent?.assignmentStore.modelClass || AssignmentModel,\n                    projectEvent : me._projectEvent\n                }, store);\n            }\n            super.store = store;\n            me.storeDetacher?.();\n            me.storeDetacher = store.ion({ update : 'onAssignmentUpdate', thisObj : me });\n        }\n    }\n    set columns(columns) {\n        if (columns) {\n            // Clone is needed to flatten the properties from the prototype chain, the Model class wants data\n            // in a flat simple object\n            columns.unshift(Objects.clone(this.resourceColumn), Objects.clone(this.unitsColumn));\n        }\n        super.columns = columns;\n    }\n    get columns() {\n        return super.columns;\n    }\n    onAssignmentUpdate({ record, changes }) {\n        const { units } = changes;\n        // Sync selection while cell editing\n        if (units) {\n            if (!units.value) {\n                this.deselectRow(record);\n            }\n            else if (units.oldValue === 0) {\n                this.selectRow({\n                    record,\n                    scrollIntoView : false,\n                    addToSelection : this.selectionMode.multiSelect // keep selection only if multiSelect\n                });\n            }\n        }\n    }\n}\n// Register this widget type with its Factory\nAssignmentGrid.initClass();\nAssignmentGrid._$name = 'AssignmentGrid';", "import AssignmentGrid from './AssignmentGrid.js';\nimport '../../Core/widget/Container.js';\nimport '../../Core/widget/Button.js';\n/**\n * @module Gantt/widget/AssignmentPicker\n */\n/**\n * Class for assignment field dropdown, wraps {@link Gantt/widget/AssignmentGrid} within a frame and adds two buttons: Save and Cancel\n * @private\n */\nexport default class AssignmentPicker extends AssignmentGrid {\n    static get $name() {\n        return 'AssignmentPicker';\n    }\n    // Factoryable type name\n    static get type() {\n        return 'assignmentpicker';\n    }\n    static get defaultConfig() {\n        return {\n            trapFocus : true,\n            height    : '20em',\n            minWidth  : '25em',\n            bbar      : [\n                {\n                    type        : 'button',\n                    text        : this.L('L{Object.Save}'),\n                    localeClass : this,\n                    ref         : 'saveBtn',\n                    color       : 'b-green'\n                },\n                {\n                    type        : 'button',\n                    text        : this.L('L{Object.Cancel}'),\n                    localeClass : this,\n                    ref         : 'cancelBtn',\n                    color       : 'b-gray'\n                }\n            ],\n            /**\n             * The Event to load resource assignments for.\n             * Either an Event or {@link #config-store store} should be given.\n             *\n             * @config {Gantt.model.TaskModel}\n             */\n            projectEvent : null,\n            /**\n             * Store for the picker.\n             * Either store or {@link #config-projectEvent projectEvent} should be given\n             *\n             * @config {Gantt.data.AssignmentsManipulationStore}\n             */\n            store : null\n        };\n    }\n    configure(config) {\n        config.selectedRecordCollection = config.assignments;\n        super.configure(config);\n    }\n    show() {\n        this.originalSelected = this.selectedRecords.map(a => a.copy());\n        return super.show(...arguments);\n    }\n    afterConfigure() {\n        const me = this;\n        super.afterConfigure();\n        me.bbar.widgetMap.saveBtn?.ion({ click : 'onSaveClick', thisObj : me });\n        me.bbar.widgetMap.cancelBtn?.ion({ click : 'onCancelClick', thisObj : me });\n    }\n    //region Event handlers\n    onSaveClick() {\n        this.hide();\n    }\n    onCancelClick() {\n        this.hide();\n    }\n    //endregion\n}\n// Register this widget type with its Factory\nAssignmentPicker.initClass();\nAssignmentPicker._$name = 'AssignmentPicker';", "import Combo from '../../Core/widget/Combo.js';\nimport PickerField from '../../Core/widget/PickerField.js';\nimport AssignmentPicker from './AssignmentPicker.js';\nimport AssignmentsManipulationStore from '../data/AssignmentsManipulationStore.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\n/**\n * @module Gantt/widget/AssignmentField\n */\n/**\n * A special field widget used to edit single event assignments.\n *\n * This field is used as the default editor for the {@link Gantt.column.ResourceAssignmentColumn}\n *\n * {@inlineexample Gantt/widget/AssignmentField.js}\n *\n * ## Customizing the drop-down grid\n *\n * The field is a {@link Core/widget/Combo} which has a {@link Gantt/widget/AssignmentGrid} as its picker. Here's a\n * snippet showing how to configure the grid:\n *\n * ```javascript\n * const gantt = new Gantt({\n *     appendTo                : 'container',\n *     resourceImageFolderPath : '../shared/images/users/',\n *     columns                 : [\n *         { type : 'name', field : 'name', text : 'Name', width : 250 },\n *         {\n *             type        : 'resourceassignment',\n *             width       : 250,\n *             showAvatars : true,\n *             editor      : {\n *                 type   : 'assignmentfield',\n *                 // The picker config is applied to the Grid\n *                 picker : {\n *                     height   : 350,\n *                     width    : 450,\n *                     features : {\n *                         filterBar  : true,\n *                         group      : 'resource.city',\n *                         headerMenu : false,\n *                         cellMenu   : false\n *                     },\n *                     // The extra columns are concatenated onto the base column set.\n *                     columns : [{\n *                         text       : 'Calendar',\n *                         // Read a nested property (name) from the resource calendar\n *                         field      : 'resource.calendar.name',\n *                         filterable : false,\n *                         editor     : false,\n *                         width      : 85\n *                     }]\n *                 }\n *             }\n *         }\n *     ],\n *\n *     project\n *  });\n * ```\n *\n * @extends Core/widget/Combo\n * @classtype assignmentfield\n * @demo Gantt/resourceassignment\n * @inputfield\n */\nexport default class AssignmentField extends Combo {\n    static get $name() {\n        return 'AssignmentField';\n    }\n    // Factoryable type name\n    static get type() {\n        return 'assignmentfield';\n    }\n    //region Config\n    static get configurable() {\n        return {\n            // Let the editor know that the selectable records are also editable\n            editingRecords : true,\n            chipView : {\n                cls : 'b-assignment-chipview',\n                itemTpl(assignment) {\n                    return StringHelper.xss`${assignment.resourceName} ${Math.round(assignment.units)}%`;\n                },\n                scrollable : {\n                    overflowX : 'hidden-scroll'\n                }\n            },\n            triggers : {\n                expand : {\n                    cls     : 'b-icon-down',\n                    handler : 'onTriggerClick'\n                }\n            },\n            multiSelect : true,\n            clearable   : false,\n            editable    : false,\n            value       : null,\n            /**\n             * A config object used to configure the {@link Gantt.widget.AssignmentGrid assignment grid}\n             * used to select resources to assign.\n             *\n             * Any `columns` provided are concatenated onto the default column set.\n             * @config {AssignmentGridConfig|Gantt.widget.AssignmentGrid} picker\n             */\n            picker : {\n                type         : AssignmentPicker.type,\n                floating     : true,\n                scrollAction : 'realign'\n            },\n            /**\n             * Width of picker, defaults to this field's {@link Core/widget/PickerField#config-pickerAlignElement} width\n             *\n             * @config {Number}\n             */\n            pickerWidth : null,\n            /**\n             * Event to load resource assignments for.\n             * Either event or {@link #config-store store} should be given.\n             *\n             * @config {Gantt.model.TaskModel}\n             */\n            projectEvent : null,\n            /**\n             * Assignment manipulation store to use, or it's configuration object.\n             * Either store or {@link #config-projectEvent projectEvent} should be given\n             *\n             * @config {Core.data.Store|StoreConfig}\n             */\n            store : {},\n            /**\n             * A template function used to generate the tooltip contents when hovering this field. Defaults to\n             * showing \"[Name] [%]\"\n             * ```javascript\n             * const gantt = new Gantt({\n             *   columns                 : [\n             *         { type : 'name', field : 'name', text : 'Name', width : 250 },\n             *         {\n             *             type        : 'resourceassignment',\n             *             editor      : {\n             *                 type   : 'assignmentfield',\n             *                 tooltipTemplate({ taskRecord, assignmentRecords }) {\n             *                     return assignmentRecords.map(as => as.resource?.name).join(', ');\n             *                 }\n             *             }\n             *         }\n             *     ]\n             * });\n             * ```\n             * @config {Function} tooltipTemplate\n             * @param {Object} data Tooltip data\n             * @param {Gantt.model.TaskModel} data.taskRecord The taskRecord the assignments are associated with\n             * @param {Gantt.model.AssignmentModel} data.assignmentRecords The field value represented as assignment\n             * records\n             * @returns {String|DomConfig|DomConfig[]}\n             */\n            tooltipTemplate() {\n                return StringHelper.encodeHtml(this.store.toValueString());\n            }\n        };\n    }\n    //endregion\n    // Any change must offer the save/cancel UI since THAT is what actually makes the edit\n    onChipClose(records) {\n        this.showPicker();\n        this.picker.deselectRows(records);\n    }\n    syncInputFieldValue() {\n        super.syncInputFieldValue();\n        const { store } = this;\n        if (store && this.tooltipTemplate) {\n            this.tooltip = this.tooltipTemplate({ taskRecord : store.projectEvent, assignmentRecords : store.toValue() });\n        }\n    }\n    //region Picker\n    // Override. This field does not have a primary filter, so\n    // down arrow/trigger click should just show the picker.\n    onTriggerClick(event) {\n        if (this.pickerVisible) {\n            this.hidePicker();\n        }\n        else {\n            PickerField.prototype.showPicker.call(this, event && ('key' in event));\n        }\n    }\n    focusPicker() {\n        this.picker.focus();\n    }\n    changePicker(picker, oldPicker) {\n        const me = this;\n        return super.changePicker(picker && ObjectHelper.assign({\n            projectEvent      : me.projectEvent,\n            store             : me.store,\n            readOnly          : me.readOnly,\n            resourceImagePath : me.resourceImageFolderPath,\n            assignments       : me.valueCollection,\n            onCancelClick() {\n                me.value = this.originalSelected;\n                this.hide();\n            },\n            align : {\n                anchor : me.overlayAnchor,\n                target : me[me.pickerAlignElement]\n            }\n        }, picker) || null, oldPicker);\n    }\n    //endregion\n    //region Value\n    changeProjectEvent(projectEvent) {\n        // NOTE: This kind of thing would normally be handled in updateProjectEvent, however, the setter of the\n        //  AssignmentManipulationStore pulls double duty and resyncs some fields, even if presented with the same\n        //  projectEvent.\n        const { picker, store }      = this;\n        this._projectEvent           = projectEvent;\n        if (store) {\n            store.projectEvent = projectEvent;\n        }\n        if (picker) {\n            picker.projectEvent = projectEvent;\n        }\n        return projectEvent;\n    }\n    changeStore(store) {\n        if (store && !(store instanceof AssignmentsManipulationStore)) {\n            store = new AssignmentsManipulationStore(store);\n        }\n        return store;\n    }\n    updateStore(store) {\n        const me = this;\n        me.detachListeners('storeMutation');\n        if (store instanceof AssignmentsManipulationStore) {\n            const { projectEvent } = store;\n            if (projectEvent) {\n                me.projectEvent = projectEvent;\n            }\n            else {\n                // This is to not do the store::fillFromMaster() call, otherwise editor will be unhappy\n                store.projectEvent = me.projectEvent;\n            }\n        }\n        store.ion({\n            name    : 'storeMutation',\n            change  : 'syncInputFieldValue',\n            thisObj : me\n        });\n    }\n    // This return an array of special Assignment records created\n    // by the picker / grid\n    get value() {\n        return super.value;\n    }\n    set value(assignments) {\n        // either real (=== currently assigned resources)\n        // Or to-be assigned resources coming from the assignment grid\n        // Map over to the special assignment records created by the AssignmentGrid store\n        assignments = assignments?.map(as => {\n            const\n                ourStoreVersion = this.store.find(a => a.resource === as.resource, true);\n            ourStoreVersion?.copyData(as);\n            return ourStoreVersion;\n        });\n        super.value = assignments;\n    }\n    hasChanged(initialValue, value) {\n        return !ObjectHelper.isEqual(initialValue, value);\n    }\n    //endregion\n    // Override. Picker is completely self-contained. Prevent any\n    // field action on its key events.\n    onPickerKeyDown(event) {\n        const grid = this.picker;\n        // Move \"down\" into the grid body\n        if (event.key === 'ArrowDown' && event.target.compareDocumentPosition(grid.bodyContainer) === document.DOCUMENT_POSITION_FOLLOWING) {\n            grid.element.focus();\n        }\n        else if (event.key === 'Escape' && !grid.focusedCell.isActionable) {\n            this.hidePicker();\n        }\n    }\n    // Caching a copy of each record since the grid picker of this class will allow editing\n    // A change to the records will constitute a change of this field\n    cacheCurrentValue(records) {\n        if (Array.isArray(records)) {\n            return this._value = records.map(rec => rec.copy(rec.id));\n        }\n        return super.cacheCurrentValue(records);\n    }\n}\n// Register this widget type with its Factory\nAssignmentField.initClass();\nAssignmentField._$name = 'AssignmentField';", "import Column from '../../Grid/column/Column.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\nimport AssignmentField from '../widget/AssignmentField.js';\nimport AssignmentModel from '../model/AssignmentModel.js';\nimport ChipView from '../../Core/widget/ChipView.js';\nimport '../../Core/widget/NumberField.js';\nimport AvatarRendering from '../../Core/widget/util/AvatarRendering.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport DragHelper from '../../Core/helper/DragHelper.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\n/**\n * @module Gantt/column/ResourceAssignmentColumn\n */\nconst resourceNameRegExp = a => a.resourceName.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n/**\n * Column allowing resource manipulation (assignment/unassignment/units changing) on a task. In the column cells,\n * assignments are either shown as badges or avatars. To show avatars, set {@link #config-showAvatars} to `true`. When\n * showing avatars there are two options for how to specify image paths:\n *\n * * You may provide a {@link Gantt.view.Gantt#config-resourceImageFolderPath} on your Gantt panel pointing to where\n *   resource images are located. Set the resource image filename in the `image` field of the resource data.\n * * And/or you may provide an `imageUrl` on your record, which then will take precedence when showing images.\n *\n * If a resource has no name, or its image cannot be loaded, the resource initials are rendered. If the resource has\n * an {@link Scheduler/model/mixin/ResourceModelMixin#field-eventColor} specified, it will be used as the background\n * color of the initials.\n *\n * Default editor is a {@link Gantt.widget.AssignmentField}.\n *\n * ## Customizing displayed elements\n *\n * If {@link #config-showAvatars} is false, column will render resource name and utilization wrapped in a\n * small element called _a chip_. Content of the chip can be customized. For example, if you don't want to see percent\n * value, or want to display different resource name, you can specify an {@link #config-itemTpl} config. Please keep in\n * mind that when you start editing the cell, chip will be rendered by the default editor. If you want chips to be\n * consistent, you need to customize the editor too.\n *\n * ```javascript\n * new Gantt({\n *     columns: [\n *         {\n *             type     : 'resourceassignment',\n *             itemTpl  : (assignment) => assignment.resourceName,\n *             editor   : {\n *                 chipView : {\n *                     itemTpl : assignment => assignment.resourceName\n *                 }\n *             }\n *         }\n *     ]\n * });\n * ```\n *\n * {@inlineexample Gantt/column/ResourceAssignment.js}\n *\n * @extends Grid/column/Column\n * @classtype resourceassignment\n * @column\n */\nexport default class ResourceAssignmentColumn extends Column {\n    internalCellCls = 'b-resourceassignment-cell';\n    static get $name() {\n        return 'ResourceAssignmentColumn';\n    }\n    static get type() {\n        return 'resourceassignment';\n    }\n    static get isGanttColumn() {\n        return true;\n    }\n    static get fields() {\n        return [\n            /**\n             * True to show a resource avatar for every assignment. Note that you also have to provide a\n             * {@link Gantt.view.Gantt#config-resourceImageFolderPath} for where to load images from. And/or you may\n             * provide an `imageUrl` on your record, which then will take precedence when showing images.\n             * @config {Boolean} showAvatars\n             * @category Common\n             */\n            'showAvatars',\n            'sideMargin',\n            /**\n             * A function which produces the content to put in the resource assignment cell.\n             * May be overridden in subclasses, or injected into the column\n             * to customize the Chip content.\n             *\n             * Defaults to returning `${assignment.resourceName} ${assignment.units}%`\n             *\n             * @config {Function} itemTpl\n             * @param {Gantt.model.AssignmentModel} assignment The assignment\n             * @param {Number} index The index - zero based.\n             * @returns {DomConfig|String|null}\n             * @category Rendering\n             */\n            {\n                name         : 'itemTpl',\n                defaultValue : (assignment, index, htmlEncode = true) => {\n                    return htmlEncode ? StringHelper.encodeHtml(assignment.toString()) : assignment.toString();\n                }\n            },\n            /**\n             * A function which receives data about the resource and returns a html string to be displayed in the\n             * tooltip.\n             *\n             * ```javascript\n             * const gantt = new Gantt({\n             *     columns : [\n             *          {\n             *              type          : 'resourceassignment',\n             *              showAvatars : true,\n             *              avatarTooltipTemplate({ resourceRecord }) {\n             *                  return `<b>${resourceRecord.name}</b>`;\n             *              }\n             *          }\n             *     ]\n             * });\n             * ```\n             *\n             * This function will be called with an object containing the fields below:\n             * @config {Function} avatarTooltipTemplate\n             * @param {Object} data\n             * @param {Gantt.model.TaskModel} data.taskRecord Hovered task\n             * @param {Gantt.model.ResourceModel} data.resourceRecord Hovered resource\n             * @param {Gantt.model.AssignmentModel} data.assignmentRecord Hovered assignment\n             * @param {Core.widget.Tooltip} data.tooltip The tooltip instance\n             * @param {Number} data.overflowCount Number of overflowing resources, only valid for last shown resource\n             * @param {Gantt.model.AssignmentModel[]} data.overflowAssignments Array of overflowing assignments, only\n             * valid for last shown resource\n             * @returns {DomConfig|String|null}\n             */\n            'avatarTooltipTemplate',\n            /**\n             * When `true`, the names of all overflowing resources are shown in the tooltip. When `false`, the number of\n             * overflowing resources is displayed instead.\n             * Only valid for last shown resource, if there are overflowing resources.\n             * @config {Boolean} showAllNames\n             * @default true\n             * @category Common\n             */\n            { name : 'showAllNames', type : 'boolean', defaultValue : true },\n            /**\n             * True to allow drag-drop of resource avatars between rows. Dropping a resource outside the\n             * resource assignment cells will unassign the resource.\n             * @config {Boolean} enableResourceDragging\n             * @category Common\n             */\n            { name : 'enableResourceDragging' },\n            /**\n             * A config object passed to the avatar {@link Core.widget.Tooltip}\n             *\n             * ```javascript\n             * const gantt = new Gantt({\n             *     columns : [\n             *          {\n             *              type          : 'resourceassignment',\n             *              showAvatars : true,\n             *              avatarTooltip : {\n             *                  // Allow moving mouse over the tooltip\n             *                  allowOver : true\n             *              }\n             *          }\n             *     ]\n             * });\n             * ```\n             *\n             * This function will be called with an object containing the fields below:\n             *\n             * @config {TooltipConfig} avatarTooltip\n             */\n            'avatarTooltip',\n            { name : 'avatarMaxSize', defaultValue : 50 }\n        ];\n    }\n    static get defaults() {\n        return {\n            field         : 'assignments',\n            instantUpdate : false,\n            text          : 'L{Assigned Resources}',\n            width         : 250,\n            showAvatars   : false,\n            sideMargin    : 20,\n            sortable(task1, task2) {\n                const\n                    a1 = task1.assignments.join(''),\n                    a2 = task2.assignments.join('');\n                if (a1 === a2) {\n                    return 0;\n                }\n                return a1 < a2 ? -1 : 1;\n            },\n            filterable({ value, record }) {\n                // We're being passed an array of Assignments\n                if (Array.isArray(value)) {\n                    // Shortcut if we're matching no assignments.\n                    if (!value.length) {\n                        return Boolean(!record.assignments.length);\n                    }\n                    // Create a multi resource name Regexp, eg /Macy|Lee|George/.\n                    value = value.map(resourceNameRegExp).join('|');\n                }\n                const regexp = new RegExp(value, 'gi');\n                return record.assignments.some(assignment => regexp.test(assignment.resourceName));\n            },\n            alwaysClearCell : false\n        };\n    }\n    construct() {\n        super.construct(...arguments);\n        const\n            me       = this,\n            { grid } = me;\n        if (me.showAvatars) {\n            Object.assign(me, {\n                repaintOnResize : true,\n                htmlEncode      : false,\n                renderer        : me.rendererWithAvatars,\n                avatarRendering : new AvatarRendering({\n                    element : grid.element,\n                    tooltip : ObjectHelper.assign({\n                        forSelector       : '.b-resourceassignment-cell .b-resource-avatar',\n                        internalListeners : {\n                            beforeShow({ source : tooltip }) {\n                                const\n                                    {\n                                        taskRecord,\n                                        resourceRecord,\n                                        assignmentRecord,\n                                        overflowCount,\n                                        overflowAssignments\n                                    }      = tooltip.activeTarget.elementData,\n                                    result = me.avatarTooltipTemplate?.({\n                                        taskRecord, resourceRecord, assignmentRecord, overflowCount, tooltip, overflowAssignments\n                                    });\n                                if (tooltip.items.length === 0) {\n                                    const text   = me.showAllNames\n                                        ? `${StringHelper.encodeHtml(assignmentRecord)}<br />${overflowAssignments.join('<br />')}`\n                                        : StringHelper.xss`${assignmentRecord}${overflowCount ? ` (+${overflowCount} ${me.L('L{more resources}')})` : ''}`;\n                                    tooltip.html = result ?? text;\n                                }\n                            }\n                        }\n                    }, me.avatarTooltip)\n                })\n            });\n        }\n        if (me.enableResourceDragging) {\n            me.grid.ion({\n                paint   : me.setupDragging,\n                thisObj : me,\n                once    : true\n            });\n        }\n        grid.ion({\n            beforeCellEditStart : me.onBeforeCellEditStart,\n            finishCellEdit      : me.onDoneCellEdit,\n            cancelCellEdit      : me.onDoneCellEdit,\n            thisObj             : me\n        });\n        if (me.showAvatars) {\n            grid.ion({\n                beforeRenderRows : me.calculateAvatarSize,\n                once             : true,\n                thisObj          : me\n            });\n            grid.rowManager.ion({\n                beforeRowHeight : me.calculateAvatarSize,\n                thisObj         : me\n            });\n        }\n        grid.resourceStore.ion({\n            name    : 'resourceStore',\n            update  : me.onResourceUpdate,\n            thisObj : me\n        });\n    }\n    calculateAvatarSize({ height }) {\n        const\n            { grid }        = this,\n            rowHeight       = height || grid.rowHeight,\n            { cellElement } = grid.beginGridMeasuring();\n        cellElement.classList.add(this.internalCellCls);\n        const\n            cellStyles = globalThis.getComputedStyle(cellElement),\n            padding    = parseInt(cellStyles.paddingTop, 10);\n        this.avatarRendering.size = Math.min(this.avatarMaxSize, rowHeight - (2 * padding));\n        cellElement.classList.remove(this.internalCellCls);\n        grid.endGridMeasuring();\n    }\n    doDestroy() {\n        super.doDestroy();\n        this.avatarRendering?.destroy();\n        this.dragHelper?.destroy();\n    }\n    get defaultEditor() {\n        return {\n            type  : AssignmentField.type,\n            store : {\n                modelClass : this.grid.project.assignmentStore.modelClass\n            }\n        };\n    }\n    onBeforeCellEditStart({ editorContext : { record, column } }) {\n        const me = this;\n        if (column === me) {\n            const { editor } = me;\n            editor.resourceImageFolderPath = me.grid.resourceImageFolderPath;\n            editor.projectEvent            = record;\n            me.detachListeners('editorStore');\n            editor.store.ion({\n                name           : 'editorStore',\n                changesApplied : me.onEditorChangesApplied,\n                thisObj        : me\n            });\n        }\n    }\n    onDoneCellEdit() {\n        this.detachListeners('editorStore');\n    }\n    onEditorChangesApplied() {\n        const\n            me          = this,\n            cellElement = me.grid.getCell({ id : me.editor.projectEvent.id, columnId : me.id });\n        if (cellElement) {\n            me.renderer({ value : me.editor.projectEvent.assignments, cellElement });\n        }\n    }\n    onResourceUpdate({ source }) {\n        // no need for this listener when the gantt is loading data\n        if (!source.project?.propagatingLoadChanges) {\n            this.grid.refreshColumn(this);\n        }\n    }\n    get chipView() {\n        const me = this;\n        if (!me._chipView) {\n            me._chipView = new ChipView({\n                parent         : me,\n                cls            : 'b-assignment-chipview',\n                navigator      : null,\n                itemsFocusable : false,\n                closable       : false,\n                itemTpl        : me.itemTpl,\n                store          : {},\n                scrollable     : {\n                    overflowX : 'hidden-scroll'\n                }\n            });\n            // The List class only refreshes itself when visible, so\n            // since this is an offscreen, rendering element\n            // we have to fake visibility.\n            Object.defineProperty(me.chipView, 'isVisible', {\n                get() {\n                    return true;\n                }\n            });\n            // Complete the initialization, which is finalized on first paint.\n            // In particular the lazy scrollable config is ingested on paint.\n            me.chipView.triggerPaint();\n        }\n        return me._chipView;\n    }\n    renderer({ cellElement, value, isExport }) {\n        value = value.filter(a => a.resource)\n            .sort((lhs, rhs) => lhs.resourceName.localeCompare(rhs.resourceName));\n        if (isExport) {\n            return value.map((val, i) => this.itemTpl(val, i, false)).join(',');\n        }\n        else {\n            const\n                { chipView } = this,\n                chipViewWrap = cellElement.querySelector('.b-assignment-chipview-wrap') || (\n                    DomHelper.createElement({\n                        parent    : cellElement,\n                        className : 'b-assignment-chipview-wrap'\n                    })\n                );\n            chipView.store.storage.replaceValues({\n                values : value,\n                silent : true\n            });\n            chipView.refresh();\n            const chipCloneElement = chipView.element.cloneNode(true);\n            chipCloneElement.removeAttribute('id');\n            chipViewWrap.innerHTML = '';\n            chipViewWrap.appendChild(chipCloneElement);\n        }\n    }\n    rendererWithAvatars({ record : taskRecord, value, isExport }) {\n        value = value.filter(a => a.resource)\n            .sort((lhs, rhs) => lhs.resourceName.localeCompare(rhs.resourceName));\n        const\n            me                  = this,\n            { size }            = me.avatarRendering,\n            nbrVisible          = Math.floor((me.width - me.sideMargin) / (size + 2)),\n            overflowCount       = value.length > nbrVisible ? value.length - nbrVisible : 0,\n            overflowAssignments = value.length > nbrVisible ? value.filter(assignment => value.indexOf(assignment) >= nbrVisible) : [];\n        if (isExport) {\n            return value.map((as, i) => this.itemTpl(as, i, false)).join(',');\n        }\n        return {\n            className : 'b-resource-avatar-container',\n            children  : value.map((assignmentRecord, i) => {\n                const { resource : resourceRecord } = assignmentRecord;\n                if (i < nbrVisible) {\n                    const\n                        isLastOverflowing = overflowCount > 0 && i === nbrVisible - 1,\n                        imgConfig         = me.renderAvatar({\n                            taskRecord,\n                            resourceRecord,\n                            assignmentRecord,\n                            overflowCount       : isLastOverflowing ? overflowCount : 0,\n                            overflowAssignments : isLastOverflowing ? overflowAssignments : []\n                        });\n                    if (isLastOverflowing) {\n                        return {\n                            className : 'b-overflow-img b-resource-avatar',\n                            style     : {\n                                height : size + 'px',\n                                width  : size + 'px'\n                            },\n                            children : [\n                                imgConfig,\n                                {\n                                    tag       : 'span',\n                                    className : 'b-overflow-count',\n                                    html      : `+${overflowCount}`\n                                }\n                            ]\n                        };\n                    }\n                    return imgConfig;\n                }\n            })\n        };\n    }\n    renderAvatar({ taskRecord, resourceRecord, assignmentRecord, overflowCount, overflowAssignments }) {\n        const\n            {\n                resourceImageFolderPath\n            }        = this.grid,\n            imageUrl = resourceRecord.imageUrl || resourceRecord.image && resourceImageFolderPath && (resourceImageFolderPath + resourceRecord.image),\n            avatar   = this.avatarRendering.getResourceAvatar({\n                resourceRecord,\n                initials        : resourceRecord.initials,\n                color           : resourceRecord.eventColor,\n                iconCls         : resourceRecord.iconCls,\n                defaultImageUrl : this.defaultAvatar,\n                imageUrl\n            });\n        // Some paths in avatarRendering does not yield elementData\n        if (!avatar.elementData) {\n            avatar.elementData = {};\n        }\n        Object.assign(avatar.elementData, { taskRecord, resourceRecord, assignmentRecord, overflowCount, overflowAssignments });\n        return avatar;\n    }\n    get defaultAvatar() {\n        const { grid } = this;\n        return grid.defaultResourceImageName ? grid.resourceImageFolderPath + grid.defaultResourceImageName : '';\n    }\n    // Used with CellCopyPaste to be able to copy assignments from one task to another\n    toClipboardString({ record }) {\n        return StringHelper.safeJsonStringify(record[this.field]);\n    }\n    // Used with CellCopyPaste to be able to copy assignments from one task to another\n    fromClipboardString({ string, record }) {\n        const\n            parsedAssignments = StringHelper.safeJsonParse(string),\n            newAssignments    = [];\n        if (parsedAssignments?.length) {\n            for (const assignmentData of parsedAssignments) {\n                delete assignmentData.id;\n                delete assignmentData.event;\n                delete assignmentData.resource;\n                assignmentData.eventId = record.id;\n                newAssignments.push(new AssignmentModel(assignmentData));\n            }\n        }\n        return newAssignments;\n    }\n    // Only allow if complete range is only inside this column\n    canFillValue({ range }) {\n        return range.every(cs => cs.column === this);\n    }\n    calculateFillValue({ record, value }) {\n        const string = JSON.stringify(value);\n        return this.fromClipboardString({ string, record });\n    }\n    setupDragging() {\n        const\n            me       = this,\n            { grid } = me;\n        // Prevent row reorders from resource assignment cell\n        if (grid.features.rowReorder) {\n            grid.features.rowReorder.dragHelper.targetSelector += ' .b-grid-cell:not(.b-resourceassignment-cell)';\n        }\n        me.subGrid.element.classList.add('b-draggable-resource-avatars');\n        me.dragHelper = new DragHelper({\n            callOnFunctions : true,\n            // Don't drag the actual element, clone the avatar instead\n            cloneTarget     : true,\n            // Allow drag of row elements inside the resource grid\n            targetSelector  : '.b-resource-avatar-container > .b-resource-avatar',\n            onDragStart({ context }) {\n                const { grabbed } = context;\n                context.resourceRecord = grabbed.elementData.resourceRecord;\n                grid.enableScrollingCloseToEdges();\n            },\n            onDrag({ context, event }) {\n                const targetTask = context.targetTask = grid.resolveTaskRecord(event.target);\n                context.valid = Boolean(targetTask && !targetTask.resources.includes(context.resourceRecord));\n            },\n            // Drop callback after a mouse up. If drop is valid, the element is animated to its final position before the data transfer\n            async onDrop({ context, event }) {\n                const\n                    { targetTask, resourceRecord, valid, grabbed, element } = context,\n                    { assignmentRecord, taskRecord }                        = grabbed.elementData,\n                    validDropTarget                                         = event.target.closest('.b-resourceassignment-cell');\n                // We handle case of \"invalid\" drop ourselves, and when you don't drop on a resource\n                // assignment cell it means unassign (i.e. DragHelper never aborts a drop)\n                if (valid) {\n                    grabbed.style.display = 'none';\n                }\n                if (!validDropTarget) {\n                    element.style.display = 'none';\n                    // Invalid drop target means unassign\n                    taskRecord.unassign(resourceRecord);\n                }\n                else if (valid) {\n                    // Valid drop, provide a point to animate the proxy to before finishing the operation\n                    const\n                        resourceAssignmentCell = grid.getCell({\n                            column : me,\n                            record : targetTask\n                        }),\n                        avatarContainer        = resourceAssignmentCell?.querySelector('.b-resource-avatar-container');\n                    // Before we finalize the drop and update the task record, transition the element to the target point\n                    if (avatarContainer) {\n                        await this.animateProxyTo(avatarContainer, {\n                            align : 'l0-r0'\n                        });\n                    }\n                    if (!targetTask.resources.includes(resourceRecord)) {\n                        assignmentRecord.event = targetTask;\n                    }\n                }\n                grid.disableScrollingCloseToEdges();\n            }\n        });\n    }\n}\nColumnStore.registerColumnType(ResourceAssignmentColumn);\nResourceAssignmentColumn._$name = 'ResourceAssignmentColumn';", "import CheckColumn from '../../Grid/column/CheckColumn.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\n/**\n * @module Gantt/column/RollupColumn\n */\n/**\n * A column that displays a checkbox to edit the {@link Gantt.model.TaskModel#field-rollup rollup} data field.\n * This field indicates if a task should rollup to its closest parent or not.\n * Requires the {@link Gantt.feature.Rollups Rollups} feature to be enabled.\n *\n * This column uses a {@link Core.widget.Checkbox checkbox} as its editor, and it is not intended to be changed.\n *\n * @extends Grid/column/CheckColumn\n * @classtype rollup\n * @column\n */\nexport default class RollupColumn extends CheckColumn {\n    static get $name() {\n        return 'RollupColumn';\n    }\n    static get type() {\n        return 'rollup';\n    }\n    static get isGanttColumn() {\n        return true;\n    }\n    static get defaults() {\n        return {\n            field : 'rollup',\n            text  : 'L{Rollup}'\n        };\n    }\n}\nColumnStore.registerColumnType(RollupColumn);\nRollupColumn._$name = 'RollupColumn';", "import Column from '../../Grid/column/Column.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\nimport SchedulingDirectionPicker from '../../SchedulerPro/widget/SchedulingDirectionPicker.js';\n/**\n * @module Gantt/column/SchedulingDirectionColumn\n */\n/**\n * This is a column class for the {@link Gantt/model/TaskModel#field-direction scheduling direction}\n * field of the task model. Please refer to the documentation of that field for more details.\n *\n * Default editor is a {@link SchedulerPro/widget/SchedulingDirectionPicker}.\n *\n * The direction can be one of:\n *\n * - Forward\n * - Backward\n *\n * @extends Grid/column/Column\n * @classtype schedulingdirection\n * @column\n */\nexport default class SchedulingDirectionColumn extends Column {\n    static $name = 'SchedulingDirectionColumn';\n    static type = 'schedulingdirection';\n    static isGanttColumn = true;\n    // has to be a getter for the localization test to pick up the `L{schedulingDirection}` usage\n    static get defaults() {\n        return {\n            field  : 'direction',\n            text   : 'L{schedulingDirection}',\n            width  : 146,\n            editor : {\n                type         : 'schedulingdirectionpicker',\n                allowInvalid : false\n            },\n            filterable : {\n                filterField : {\n                    type : 'schedulingdirectionpicker'\n                }\n            }\n        };\n    }\n    getEnforcedName(task) {\n        return task.name || (task.isRoot ? 'Project' : `Task #${ task.id }`);\n    }\n    get tooltipRenderer() {\n        if (this._tooltipRenderer !== undefined) {\n            return this._tooltipRenderer;\n        }\n        return this._tooltipRenderer = ({ record }) => {\n            const { effectiveDirection } = record;\n            if (!effectiveDirection) {\n                return false;\n            }\n            if (effectiveDirection.kind === 'enforced') {\n                return this.L('L{enforcedBy}') + ` \"${ this.getEnforcedName(effectiveDirection.enforcedBy) }\"`;\n            }\n            else if (effectiveDirection.kind === 'inherited') {\n                return this.L('L{inheritedFrom}') + ` \"${ this.getEnforcedName(effectiveDirection.inheritedFrom) }\"`;\n            }\n            else {\n                return undefined;\n            }\n        };\n    }\n    renderer({ record }) {\n        const { effectiveDirection } = record;\n        if (!effectiveDirection) {\n            return '';\n        }\n        let value;\n        if (effectiveDirection.kind === 'enforced') {\n            value = effectiveDirection.direction;\n        }\n        else if (effectiveDirection.kind === 'inherited') {\n            value = effectiveDirection.direction;\n        }\n        else {\n            value = record.direction;\n        }\n        return SchedulingDirectionPicker.localize(value) || '';\n    }\n}\nColumnStore.registerColumnType(SchedulingDirectionColumn);\nSchedulingDirectionColumn._$name = 'SchedulingDirectionColumn';", "import Column from '../../Grid/column/Column.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\nimport SchedulingModePicker from '../../SchedulerPro/widget/SchedulingModePicker.js';\n/**\n * @module Gantt/column/SchedulingModeColumn\n */\n/**\n * A column which displays a task's scheduling {@link Gantt.model.TaskModel#field-schedulingMode mode} field.\n *\n * Default editor is a {@link SchedulerPro.widget.SchedulingModePicker SchedulingModePicker}.\n *\n * @extends Grid/column/Column\n * @classtype schedulingmodecolumn\n * @column\n */\nexport default class SchedulingModeColumn extends Column {\n    static get $name() {\n        return 'SchedulingModeColumn';\n    }\n    static get type() {\n        return 'schedulingmodecolumn';\n    }\n    static get isGanttColumn() {\n        return true;\n    }\n    static get defaults() {\n        return {\n            field  : 'schedulingMode',\n            text   : 'L{Scheduling Mode}',\n            editor : {\n                type         : SchedulingModePicker.type,\n                allowInvalid : false,\n                picker       : {\n                    minWidth : '8.5em'\n                }\n            }\n        };\n    }\n    afterConstruct() {\n        const me = this;\n        super.afterConstruct();\n        let store;\n        if (me.editor) {\n            store = me.editor.store;\n        }\n        else {\n            store = new SchedulingModePicker().store;\n        }\n        this.store = store;\n    }\n    renderer({ value }) {\n        const model = this.store.getById(value);\n        return model && model.text || '';\n    }\n    // Refreshes the column **after** the editor locale change\n    // to display properly translated scheduling modes\n    onEditorLocaleChange() {\n        this.grid.refreshColumn(this);\n    }\n    // Only allow if complete range is only inside this column\n    canFillValue({ range }) {\n        return range.every(cs => cs.column === this);\n    }\n}\nColumnStore.registerColumnType(SchedulingModeColumn);\nSchedulingModeColumn._$name = 'SchedulingModeColumn';", "import Column from '../../Grid/column/Column.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\n/**\n * @module Gantt/column/SequenceColumn\n */\n/**\n * A \"calculated\" column which displays the sequential position of the task in the project.\n *\n * There is no `editor`, since value is read-only.\n *\n * See {@link Gantt.model.TaskModel#property-sequenceNumber} for details.\n *\n * @extends Grid/column/Column\n * @classtype sequence\n * @column\n */\nexport default class SequenceColumn extends Column {\n    static get $name() {\n        return 'SequenceColumn';\n    }\n    static get type() {\n        return 'sequence';\n    }\n    static get isGanttColumn() {\n        return true;\n    }\n    static get defaults() {\n        return {\n            field      : 'sequenceNumber',\n            text       : 'L{Sequence}',\n            sortable   : false,\n            groupable  : false,\n            filterable : false,\n            width      : 70,\n            editor     : null\n        };\n    }\n}\nColumnStore.registerColumnType(SequenceColumn);\nSequenceColumn._$name = 'SequenceColumn';", "import CheckColumn from '../../Grid/column/CheckColumn.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\n/**\n * @module Gantt/column/ShowInTimelineColumn\n */\n/**\n * Column that shows if a task should be shown in the {@link SchedulerPro.widget.Timeline Timeline} widget.\n *\n * This column uses a {@link Core.widget.Checkbox checkbox} as its editor, and it is not intended to be changed.\n *\n * @extends Grid/column/CheckColumn\n * @classtype showintimeline\n * @column\n */\nexport default class ShowInTimelineColumn extends CheckColumn {\n    static get $name() {\n        return 'ShowInTimelineColumn';\n    }\n    static get type() {\n        return 'showintimeline';\n    }\n    static get isGanttColumn() {\n        return true;\n    }\n    static get defaults() {\n        return {\n            field : 'showInTimeline',\n            text  : 'L{Show in timeline}'\n        };\n    }\n}\nColumnStore.registerColumnType(ShowInTimelineColumn);\nShowInTimelineColumn._$name = 'ShowInTimelineColumn';", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport GanttDateColumn from '../../Gantt/column/GanttDateColumn.js';\nimport '../../SchedulerPro/widget/StartDateField.js';\n/**\n * @module Gantt/column/StartDateColumn\n */\n/**\n * A column that displays (and allows user to update) the task's {@link Gantt.model.TaskModel#field-startDate start date}.\n *\n * Default editor is a {@link SchedulerPro.widget.StartDateField StartDateField}.\n *\n * If {@link #config-format} is omitted, Gantt's {@link Scheduler.view.mixin.TimelineViewPresets#config-displayDateFormat} will be used as a default value and\n * the format will be dynamically updated while zooming according to the {@link Scheduler.preset.ViewPreset#field-displayDateFormat} value specified for the ViewPreset being selected.\n *\n * @extends Gantt/column/GanttDateColumn\n * @classtype startdate\n * @column\n */\nexport default class StartDateColumn extends GanttDateColumn {\n    static get $name() {\n        return 'StartDateColumn';\n    }\n    static get type() {\n        return 'startdate';\n    }\n    static get defaults() {\n        return {\n            field : 'startDate',\n            text  : 'L{Start}'\n        };\n    }\n    get defaultEditor() {\n        const editorCfg = super.defaultEditor;\n        editorCfg.type = 'startdate';\n        return editorCfg;\n    }\n}\nColumnStore.registerColumnType(StartDateColumn);\nStartDateColumn._$name = 'StartDateColumn';", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport DependencyColumn from './DependencyColumn.js';\n/**\n * @module Gantt/column/SuccessorColumn\n */\n/**\n * A column which displays, in textual form, the dependencies which link from the\n * contextual to successor tasks.\n *\n * This type of column is editable by default. Default editor is a {@link Gantt/widget/DependencyField}.\n *\n * This column will be ignored if using {@link Grid/feature/CellCopyPaste} to paste or {@link Grid/feature/FillHandle}\n * to fill values.\n *\n * @classtype successor\n * @extends Gantt/column/DependencyColumn\n * @column\n */\nexport default class SuccessorColumn extends DependencyColumn {\n    static get $name() {\n        return 'SuccessorColumn';\n    }\n    static get type() {\n        return 'successor';\n    }\n    static get isGanttColumn() {\n        return true;\n    }\n    static get defaults() {\n        return {\n            text  : 'L{Successors}',\n            field : 'successors'\n        };\n    }\n    canFillValue = () => false;\n}\nColumnStore.registerColumnType(SuccessorColumn);\nSuccessorColumn._$name = 'SuccessorColumn';", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport DurationColumn from '../../Scheduler/column/DurationColumn.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport Duration from '../../Core/data/Duration.js';\n/**\n * @module Gantt/column/TotalSlackColumn\n */\n/**\n * A column that displays the task's {@link Gantt.model.TaskModel#field-totalSlack total slack}.\n *\n * Default editor is a {@link Core.widget.DurationField DurationField}.\n *\n * @extends Scheduler/column/DurationColumn\n * @classtype totalslack\n * @column\n */\nexport default class TotalSlackColumn extends DurationColumn {\n    static get $name() {\n        return 'TotalSlackColumn';\n    }\n    static get type() {\n        return 'totalslack';\n    }\n    static get isGanttColumn() {\n        return true;\n    }\n    get durationUnitField() {\n        return 'slackUnit';\n    }\n    static get defaults() {\n        return {\n            field : 'totalSlack',\n            text  : 'L{Total Slack}',\n            filterable({ value, record, operator, column }) {\n                const\n                    a = DateHelper.asMilliseconds(column.roundValue(record.totalSlack), record.slackUnit),\n                    b = value.milliseconds;\n                switch (operator) {\n                    case '='  : return a === b;\n                    case '<'  : return a < b;\n                    case '<=' : return a <= b;\n                    case '>'  : return a > b;\n                    case '>=' : return a >= b;\n                    default   : throw new Error('Invalid operator ' + operator);\n                }\n            }\n        };\n    }\n    getFilterableValue(record) {\n        return new Duration({\n            magnitude : record.totalSlack,\n            unit      : record.slackUnit\n        });\n    }\n}\nColumnStore.registerColumnType(TotalSlackColumn);\nTotalSlackColumn._$name = 'TotalSlackColumn';", "import Column from '../../Grid/column/Column.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\n/**\n * @module Gantt/column/WBSColumn\n */\n/**\n * A calculated column which displays the _WBS_ (_Work Breakdown Structure_) for the tasks - the position of the task\n * in the project tree structure.\n *\n * While there is no `editor`, since the WBS is a calculated value, there is a `renumber` item in the `headerMenuItems`\n * that allows the user to {@link Gantt.model.TaskModel#function-refreshWbs refresh} the WBS values.\n *\n * @extends Grid/column/Column\n * @classtype wbs\n * @column\n */\nexport default class WBSColumn extends Column {\n    static get $name() {\n        return 'WBSColumn';\n    }\n    static get type() {\n        return 'wbs';\n    }\n    static get isGanttColumn() {\n        return true;\n    }\n    static get defaults() {\n        return {\n            field  : 'wbsValue',\n            text   : 'L{WBS}',\n            width  : 70,\n            editor : null,\n            filterable({ value, record }) {\n                // value might be WBS instance\n                return record.wbsValue.match(String(value));\n            },\n            headerMenuItems : {\n                renumber : {\n                    text : 'L{WBSColumn.renumber}',\n                    icon : 'b-icon-renumber',\n                    onItem({ source }) {\n                        source.taskStore.rootNode.refreshWbs();\n                    }\n                }\n            },\n            // This renderer is required to force string WBS value for TableExporter. zipcelx will call `valueOf` (value + '')\n            // which would return padded value.\n            renderer({ value }) {\n                return String(value);\n            }\n        };\n    }\n    canFillValue = () => false;\n}\nColumnStore.registerColumnType(WBSColumn);\nWBSColumn._$name = 'WBSColumn';", "import AddNewColumn from './AddNewColumn.js';\nimport BaselineStartDateColumn from './BaselineStartDateColumn.js';\nimport BaselineEndDateColumn from './BaselineEndDateColumn.js';\nimport BaselineDurationColumn from './BaselineDurationColumn.js';\nimport BaselineDurationVarianceColumn from './BaselineDurationVarianceColumn.js';\nimport BaselineStartVarianceColumn from './BaselineStartVarianceColumn.js';\nimport BaselineEndVarianceColumn from './BaselineEndVarianceColumn.js';\nimport CalendarColumn from './CalendarColumn.js';\nimport ConstraintDateColumn from './ConstraintDateColumn.js';\nimport ConstraintTypeColumn from './ConstraintTypeColumn.js';\nimport DeadlineDateColumn from './DeadlineDateColumn.js';\nimport DurationColumn from '../../Scheduler/column/DurationColumn.js';\nimport EarlyEndDateColumn from './EarlyEndDateColumn.js';\nimport EarlyStartDateColumn from './EarlyStartDateColumn.js';\nimport EffortColumn from './EffortColumn.js';\nimport EndDateColumn from './EndDateColumn.js';\n// Not including EventModelColumn on purpose\nimport IgnoreResourceCalendarColumn from './IgnoreResourceCalendarColumn.js';\nimport InactiveColumn from './InactiveColumn.js';\nimport LateEndDateColumn from './LateEndDateColumn.js';\nimport LateStartDateColumn from './LateStartDateColumn.js';\nimport ManuallyScheduledColumn from './ManuallyScheduledColumn.js';\nimport MilestoneColumn from './MilestoneColumn.js';\nimport NameColumn from './NameColumn.js';\nimport NoteColumn from './NoteColumn.js';\nimport PercentDoneColumn from './PercentDoneColumn.js';\nimport PredecessorColumn from './PredecessorColumn.js';\nimport ResourceAssignmentColumn from './ResourceAssignmentColumn.js';\nimport RollupColumn from './RollupColumn.js';\nimport SchedulingDirectionColumn from './SchedulingDirectionColumn.js';\nimport SchedulingModeColumn from './SchedulingModeColumn.js';\nimport SequenceColumn from './SequenceColumn.js';\nimport ShowInTimelineColumn from './ShowInTimelineColumn.js';\nimport StartDateColumn from './StartDateColumn.js';\nimport SuccessorColumn from './SuccessorColumn.js';\nimport TotalSlackColumn from './TotalSlackColumn.js';\nimport WBSColumn from './WBSColumn.js';\n/**\n * @module Gantt/column/AllColumns\n *\n * Imports all currently developed Gantt columns and re-exports them in an object.\n * Should be used to import and register all Gantt columns.\n */\nexport default {\n    AddNewColumn,\n    BaselineStartDateColumn,\n    BaselineEndDateColumn,\n    BaselineDurationColumn,\n    BaselineStartVarianceColumn,\n    BaselineEndVarianceColumn,\n    BaselineDurationVarianceColumn,\n    CalendarColumn,\n    ConstraintDateColumn,\n    ConstraintTypeColumn,\n    DeadlineDateColumn,\n    DurationColumn,\n    EarlyEndDateColumn,\n    EarlyStartDateColumn,\n    EffortColumn,\n    EndDateColumn,\n    IgnoreResourceCalendarColumn,\n    InactiveColumn,\n    LateEndDateColumn,\n    LateStartDateColumn,\n    ManuallyScheduledColumn,\n    MilestoneColumn,\n    NameColumn,\n    NoteColumn,\n    PercentDoneColumn,\n    PredecessorColumn,\n    ResourceAssignmentColumn,\n    RollupColumn,\n    SchedulingDirectionColumn,\n    SchedulingModeColumn,\n    SequenceColumn,\n    ShowInTimelineColumn,\n    StartDateColumn,\n    SuccessorColumn,\n    TotalSlackColumn,\n    WBSColumn\n};\n", "import CheckColumn from '../../Grid/column/CheckColumn.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\n/**\n * A column that displays (and allows user to update) the task's\n * {@link Gantt.model.TaskModel#field-manuallyScheduled manuallyScheduled} field.\n *\n * This column uses a {@link Core.widget.Checkbox checkbox} as its editor, and it is not intended to be changed.\n *\n * @extends Grid/column/CheckColumn\n * @classtype eventmode\n * @column\n */\nexport default class EventModeColumn extends CheckColumn {\n    static get $name() {\n        return 'EventModeColumn';\n    }\n    static get type() {\n        return 'eventmode';\n    }\n    static get isGanttColumn() {\n        return true;\n    }\n    static get defaults() {\n        return {\n            field : 'manuallyScheduled',\n            align : 'left',\n            text  : 'L{Event mode}'\n        };\n    }\n    internalRenderer({ value, cellElement, column, isExport }) {\n        super.internalRenderer(...arguments);\n        if (isExport) {\n            return this.renderText(value);\n        }\n        else {\n            if (cellElement.widget) {\n                cellElement.widget.text = this.renderText(value);\n            }\n        }\n    }\n    onCheckboxChange({ source, checked }) {\n        super.onCheckboxChange(...arguments);\n        source.text = this.renderText(checked);\n    }\n    renderText(value) {\n        return value ? this.L('L{Manual}') : this.L('L{Auto}');\n    }\n}\nColumnStore.registerColumnType(EventModeColumn);\nEventModeColumn._$name = 'EventModeColumn';", "import SchedulerTimeAxisColumn from '../../Scheduler/column/TimeAxisColumn.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\n/**\n * @module Gantt/column/TimeAxisColumn\n */\n/**\n * A column containing the timeline \"viewport\", in which tasks, dependencies etc. are drawn.\n * Normally you do not need to interact with or create this column, it is handled by Gantt.\n *\n * @extends Scheduler/column/TimeAxisColumn\n * @column\n *\n * @typings Scheduler.column.TimeAxisColumn -> Scheduler.column.SchedulerTimeAxisColumn\n */\nexport default class TimeAxisColumn extends SchedulerTimeAxisColumn {\n    static get defaults() {\n        return {\n            /**\n             * Set to `false` to disable the {@link Gantt.feature.TaskMenu} for the cell elements in this column.\n             * @config {Boolean} enableCellContextMenu\n             * @default\n             * @category Menu\n             */\n            enableCellContextMenu : true\n        };\n    }\n}\nColumnStore.registerColumnType(TimeAxisColumn);\nTimeAxisColumn._$name = 'TimeAxisColumn';", "import SchedulerProAssignmentStore from '../../SchedulerPro/data/AssignmentStore.js';\nimport AssignmentModel from '../model/AssignmentModel.js';\n/**\n * @module Gantt/data/AssignmentStore\n */\n/**\n * A class representing a collection of assignments between tasks in the {@link Gantt/data/TaskStore} and resources\n * in the {@link Gantt/data/ResourceStore}.\n *\n * ```javascript\n * const assignmentStore = new AssignmentStore({\n *     data : [\n *         { \"id\" : 1, \"event\" : 11,  \"resource\" : 1 },\n *         { \"id\" : 2, \"event\" : 12,  \"resource\" : 1 },\n *     ]\n * })\n * ```\n *\n * Contains a collection of the {@link Gantt/model/AssignmentModel} records.\n *\n * @extends SchedulerPro/data/AssignmentStore\n *\n * @typings SchedulerPro.data.AssignmentStore -> SchedulerPro.data.SchedulerProAssignmentStore\n */\nexport default class AssignmentStore extends SchedulerProAssignmentStore {\n    static get defaultConfig() {\n        return {\n            modelClass : AssignmentModel,\n            /**\n             * CrudManager must load stores in the correct order. Lowest first.\n             * @private\n             */\n            loadPriority : 500,\n            /**\n             * CrudManager must sync stores in the correct order. Lowest first.\n             * @private\n             */\n            syncPriority : 400\n        };\n    }\n}\nAssignmentStore._$name = 'AssignmentStore';", "import SchedulerProCalendarModel from '../../SchedulerPro/model/CalendarModel.js';\n/**\n * @module Gantt/model/CalendarModel\n */\n/**\n * This class represents a calendar in the Gantt project. It contains a collection of the {@link SchedulerPro.model.CalendarIntervalModel}.\n * Every interval can be either recurrent (regularly repeating in time) or static.\n *\n * Please refer to the [calendars guide](#Gantt/guides/basics/calendars.md) for details\n *\n * @extends SchedulerPro/model/CalendarModel\n *\n * @typings SchedulerPro.model.CalendarModel -> SchedulerPro.model.SchedulerProCalendarModel\n */\nexport default class CalendarModel extends SchedulerProCalendarModel {}\nCalendarModel._$name = 'CalendarModel';", "import SchedulerProCalendarManagerStore from '../../SchedulerPro/data/CalendarManagerStore.js';\nimport CalendarModel from '../model/CalendarModel.js';\n/**\n * @module Gantt/data/CalendarManagerStore\n */\n/**\n * A class representing the tree of calendars in the Gantt chart. An individual calendar is represented as an instance of the\n * {@link Gantt.model.CalendarModel} class. The store expects the data loaded to be hierarchical. Each parent node should\n * contain its children in a property called 'children'.\n *\n * Please refer to the [calendars guide](#Gantt/guides/basics/calendars.md) for details\n *\n * @extends SchedulerPro/data/CalendarManagerStore\n *\n * @typings SchedulerPro.data.CalendarManagerStore -> SchedulerPro.data.SchedulerProCalendarManagerStore\n */\nexport default class CalendarManagerStore extends SchedulerProCalendarManagerStore {\n    static get defaultConfig() {\n        return {\n            modelClass : CalendarModel\n        };\n    }\n}\nCalendarManagerStore._$name = 'CalendarManagerStore';", "import SchedulerProDependencyModel from '../../SchedulerPro/model/DependencyModel.js';\n/**\n * @module Gantt/model/DependencyModel\n */\n/**\n * This class represents a single dependency between the tasks in your Gantt project.\n *\n * ## Subclassing the Dependency class\n *\n * The name of any field in data can be customized in the subclass, see the example below.\n *\n * ```javascript\n * class MyDependencyModel extends DependencyModel {\n *   static get fields() {\n *     return [\n *       { name: 'to', dataSource : 'targetId' },\n *       { name: 'from', dataSource : 'sourceId' }\n *     ];\n *   }\n * }\n * ```\n *\n * @extends SchedulerPro/model/DependencyModel\n *\n * @typings Scheduler.model.DependencyModel -> Scheduler.model.SchedulerDependencyModel\n * @typings SchedulerPro.model.DependencyModel -> SchedulerPro.model.SchedulerProDependencyModel\n */\nexport default class DependencyModel extends SchedulerProDependencyModel {\n    constructor(...args) {\n        const [config] = args;\n        if (config?.fromTask) {\n            config.fromEvent = config.fromTask;\n        }\n        if (config?.toTask) {\n            config.toEvent = config.toTask;\n        }\n        super(...args);\n    }\n    get from() {\n        return this.fromEvent?.id;\n    }\n    set from(value) {\n        super.from = value;\n    }\n    /**\n     * The origin task of this dependency.\n     *\n     * Accepts multiple formats but always returns an {@link Gantt.model.TaskModel}.\n     *\n     * **NOTE:** This is not a proper field but rather an alias, it will be serialized but cannot be remapped. If you\n     * need to remap, consider using {@link #field-from} instead.\n     *\n     * @field {Gantt.model.TaskModel} fromTask\n     * @accepts {String|Number|Gantt.model.TaskModel}\n     * @category Dependency\n     */\n    /**\n     * The destination task of this dependency.\n     *\n     * Accepts multiple formats but always returns an {@link Gantt.model.TaskModel}.\n     *\n     * **NOTE:** This is not a proper field but rather an alias, it will be serialized but cannot be remapped. If you\n     * need to remap, consider using {@link #field-to} instead.\n     *\n     * @field {Gantt.model.TaskModel} toTask\n     * @accepts {String|Number|Gantt.model.TaskModel}\n     * @category Dependency\n     */\n    get fromTask() {\n        return this.fromEvent;\n    }\n    set fromTask(task) {\n        this.fromEvent = task;\n    }\n    get to() {\n        return this.toEvent?.id;\n    }\n    set to(value) {\n        super.to = value;\n    }\n    get toTask() {\n        return this.toEvent;\n    }\n    set toTask(task) {\n        this.toEvent = task;\n    }\n    get persistableData() {\n        const\n            data                 = super.persistableData,\n            { fromTask, toTask } = data;\n        if (fromTask) {\n            data.fromTask = fromTask.id;\n        }\n        if (toTask) {\n            data.toTask = toTask.id;\n        }\n        return data;\n    }\n    shouldRecordFieldChange(fieldName, oldValue, newValue) {\n        if (fieldName === 'from' || fieldName === 'to') {\n            // we don't need to record the changes in the computed `to/from` fields\n            // note, that at the scheduler basic level, we do record changes in those fields,\n            // because there the fields are \"real\"\n            return false;\n        }\n        else {\n            return super.shouldRecordFieldChange(fieldName, oldValue, newValue);\n        }\n    }\n}\nDependencyModel._$name = 'DependencyModel';", "import SchedulerProDependencyStore from '../../SchedulerPro/data/DependencyStore.js';\nimport DependencyModel from '../model/DependencyModel.js';\n/**\n * @module Gantt/data/DependencyStore\n */\n/**\n * A class representing a collection of dependencies between tasks in the {@link Gantt.data.TaskStore}.\n * Contains a collection of {@link Gantt.model.DependencyModel} records.\n *\n * ```javascript\n * const dependencyStore = new DependencyStore({\n *     data : [\n *         {\n *             \"id\"       : 1,\n *             \"fromTask\" : 11,\n *             \"toTask\"   : 15,\n *             \"lag\"      : 2\n *         },\n *         {\n *             \"id\"       : 2,\n *             \"fromTask\" : 12,\n *             \"toTask\"   : 15\n *         }\n *     ]\n * })\n * ```\n *\n * @extends SchedulerPro/data/DependencyStore\n *\n * @typings SchedulerPro.data.DependencyStore -> SchedulerPro.data.SchedulerProDependencyStore\n */\nexport default class DependencyStore extends SchedulerProDependencyStore {\n    static get defaultConfig() {\n        return {\n            modelClass : DependencyModel,\n            /**\n             * CrudManager must load stores in the correct order. Lowest first.\n             * @private\n             */\n            loadPriority : 300,\n            /**\n             * CrudManager must sync stores in the correct order. Lowest first.\n             * @private\n             */\n            syncPriority : 500\n        };\n    }\n}\nDependencyStore._$name = 'DependencyStore';", "import SchedulerProResourceModel from '../../SchedulerPro/model/ResourceModel.js';\n/**\n * @module Gantt/model/ResourceModel\n */\n/**\n * This class represents a single resource in your Gantt project.\n *\n * If you want to add or change some fields, describing resources - subclass this class:\n *\n * ```javascript\n * class MyResourceModel extends ResourceModel {\n *\n *   static get fields() {\n *     return [\n *       { name: 'company', type: 'string' }\n *     ]\n *   }\n * }\n * ```\n *\n * See also: {@link Gantt.model.AssignmentModel}\n * @extends SchedulerPro/model/ResourceModel\n *\n * @typings SchedulerPro.model.ResourceModel -> SchedulerPro.model.SchedulerProResourceModel\n */\nexport default class ResourceModel extends SchedulerProResourceModel {\n    /**\n     * Get associated tasks\n     *\n     * @member {SchedulerPro.model.EventModel[]} events\n     * @readonly\n     */\n}\nResourceModel._$name = 'ResourceModel';", "import SchedulerProResourceStore from '../../SchedulerPro/data/ResourceStore.js';\nimport ResourceModel from '../model/ResourceModel.js';\n/**\n * @module Gantt/data/ResourceStore\n */\n/**\n * A class representing the collection of the resources - {@link Gantt.model.ResourceModel} records.\n *\n * ```javascript\n * const resourceStore = new ResourceStore({\n *     data : [\n *         { \"id\" : 1, \"name\" : \"John Doe\" },\n *         { \"id\" : 2, \"name\" : \"Jane Doe\" }\n *     ]\n * })\n * ```\n *\n * @extends SchedulerPro/data/ResourceStore\n *\n * @typings SchedulerPro.data.ResourceStore -> SchedulerPro.data.SchedulerProResourceStore\n */\nexport default class ResourceStore extends SchedulerProResourceStore {\n    static get defaultConfig() {\n        return {\n            modelClass : ResourceModel,\n            /**\n             * CrudManager must load stores in the correct order. Lowest first.\n             * @private\n             */\n            loadPriority : 400,\n            /**\n             * CrudManager must sync stores in the correct order. Lowest first.\n             * @private\n             */\n            syncPriority : 200\n        };\n    }\n}\nResourceStore._$name = 'ResourceStore';", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Mixin } from '../../../../ChronoGraph/class/Mixin.js';\nimport { prototypeValue } from '../../../../ChronoGraph/util/Helpers.js';\nimport DateHelper from '../../../../Core/helper/DateHelper.js';\nimport Localizable from '../../../../Core/localization/Localizable.js';\nimport { ConflictResolution, ConstraintInterval, ConstraintIntervalDescription } from '../../../chrono/Conflict.js';\nimport { ConstraintIntervalSide, Direction } from \"../../../scheduling/Types.js\";\nimport { format } from '../../../util/Functions.js';\nimport { BaseEventMixin } from '../scheduler_basic/BaseEventMixin.js';\nimport { HasChildrenMixin } from '../scheduler_basic/HasChildrenMixin.js';\nimport { ConstrainedEarlyEventMixin } from '../scheduler_pro/ConstrainedEarlyEventMixin.js';\nimport \"../../../localization/En.js\";\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * This mixin makes the event to \"inherit\" the constraints from its parent event.\n */\nexport class ConstrainedByParentMixin extends Mixin([\n    BaseEventMixin,\n    HasChildrenMixin,\n    ConstrainedEarlyEventMixin\n], (base) => {\n    const superProto = base.prototype;\n    class ConstrainedByParentMixin extends base {\n        *maybeSkipNonWorkingTime(date, isForward = true) {\n            const childEvents = yield this.$.childEvents;\n            // summary tasks are simply aligned by their children so they should not skip non-working time at all\n            if (childEvents.size > 0)\n                return date;\n            return yield* superProto.maybeSkipNonWorkingTime.call(this, date, isForward);\n        }\n        *calculateStartDateConstraintIntervals() {\n            const intervals = yield* superProto.calculateStartDateConstraintIntervals.call(this);\n            const parentEvent = yield this.$.parentEvent;\n            if (parentEvent?.graph) {\n                // Child inherits its parent task constraints\n                const parentIntervals = yield parentEvent.$.startDateConstraintIntervals;\n                intervals.push.apply(intervals, parentIntervals);\n            }\n            return intervals;\n        }\n        *calculateEndDateConstraintIntervals() {\n            const intervals = yield* superProto.calculateEndDateConstraintIntervals.call(this);\n            const parentEvent = yield this.$.parentEvent;\n            if (parentEvent?.graph) {\n                // Child inherits its parent task constraints\n                const parentIntervals = yield parentEvent.$.endDateConstraintIntervals;\n                intervals.push.apply(intervals, parentIntervals);\n            }\n            return intervals;\n        }\n        *calculateEarlyStartDateConstraintIntervals() {\n            const intervals = yield* superProto.calculateEarlyStartDateConstraintIntervals.call(this);\n            const parentEvent = yield this.$.parentEvent;\n            if (parentEvent?.graph) {\n                // Child inherits its parent task constraints\n                const parentIntervals = yield parentEvent.$.earlyStartDateConstraintIntervals;\n                intervals.push.apply(intervals, parentIntervals);\n                // If the parent is scheduled manually it should still restrict its children (even though it has no a constraint set)\n                // so we append an artificial constraining interval\n                if ((yield parentEvent.$.manuallyScheduled) && (yield this.$.effectiveDirection).direction === Direction.Forward) {\n                    intervals.push(ManuallyScheduledParentConstraintInterval.new({\n                        owner: parentEvent,\n                        side: ConstraintIntervalSide.Start,\n                        startDate: yield parentEvent.$.startDate\n                    }));\n                }\n            }\n            return intervals;\n        }\n        *calculateEarlyEndDateConstraintIntervals() {\n            const intervals = yield* superProto.calculateEarlyEndDateConstraintIntervals.call(this);\n            const parentEvent = yield this.$.parentEvent;\n            if (parentEvent?.graph) {\n                // Child inherits its parent task constraints\n                const parentIntervals = yield parentEvent.$.earlyEndDateConstraintIntervals;\n                intervals.push.apply(intervals, parentIntervals);\n            }\n            return intervals;\n        }\n    }\n    return ConstrainedByParentMixin;\n}) {\n}\n/**\n * Class implements resolving a scheduling conflict happened due to a parent event\n * [[ConstrainedByParentMixin.manuallyScheduled|manually scheduled state]].\n * It resolves the conflict by setting the event [[ConstrainedByParentMixin.manuallyScheduled|manuallyScheduled]] to `false`.\n */\nexport class DisableManuallyScheduledConflictResolution extends Localizable(ConflictResolution) {\n    static get $name() {\n        return 'RemoveManuallyScheduledParentConstraintConflictResolution';\n    }\n    construct() {\n        super.construct(...arguments);\n        this.event = this.interval.owner;\n    }\n    getDescription() {\n        const { event } = this;\n        return format(this.L('L{descriptionTpl}'), event.name || event.id);\n    }\n    /**\n     * Resolves the conflict by setting the event [[ConstrainedByParentMixin.manuallyScheduled|manuallyScheduled]] to `false`.\n     */\n    resolve() {\n        this.event.manuallyScheduled = false;\n    }\n}\n/**\n * Description builder for an [[ManuallyScheduledParentConstraintInterval|manual parent constraint interval]].\n */\nexport class ManuallyScheduledParentConstraintIntervalDescription extends ConstraintIntervalDescription {\n    static get $name() {\n        return 'ManuallyScheduledParentConstraintIntervalDescription';\n    }\n    /**\n     * Returns description for the provided event constraint interval.\n     * @param interval Constraint interval\n     */\n    static getDescription(interval) {\n        let tpl;\n        switch (interval.side) {\n            case ConstraintIntervalSide.Start:\n                tpl = this.L('L{startDescriptionTpl}');\n                break;\n            case ConstraintIntervalSide.End:\n                tpl = this.L('L{endDescriptionTpl}');\n                break;\n        }\n        return format(tpl, ...this.getDescriptionParameters(interval));\n    }\n    static getDescriptionParameters(interval) {\n        const event = interval.owner;\n        return [\n            DateHelper.format(interval.startDate, this.L('L{dateFormat}')),\n            DateHelper.format(interval.endDate, this.L('L{dateFormat}')),\n            event.name || event.id\n        ];\n    }\n}\n/**\n * Class implements an interval applied by a [[ConstrainedByParentMixin.manuallyScheduled|manually scheduled]] parent event.\n * The interval suggests the only resolution option - disabling [[ConstrainedByParentMixin.manuallyScheduled|manually scheduled]] mode.\n */\nexport class ManuallyScheduledParentConstraintInterval extends ConstraintInterval {\n    get isManuallyScheduledParentConstraintInterval() {\n        return true;\n    }\n    getDescription() {\n        return this.descriptionBuilderClass.getDescription(this);\n    }\n    isAffectedByTransaction(transaction) {\n        const event = this.owner;\n        transaction = transaction || event.graph.activeTransaction;\n        const manuallyScheduledQuark = transaction.entries.get(event.$.manuallyScheduled);\n        // new constrained event or modified constraint\n        return !transaction.baseRevision.hasIdentifier(event.$$) ||\n            manuallyScheduledQuark && !manuallyScheduledQuark.isShadow();\n    }\n    /**\n     * Returns possible resolution options for cases when\n     * the interval takes part in a conflict.\n     *\n     * The interval suggests the only resolution option - disabling manual scheduling.\n     */\n    getResolutions() {\n        return this.resolutions || (this.resolutions = [\n            this.resetManuallyScheduledConflictResolutionClass.new({ interval: this })\n        ]);\n    }\n}\n__decorate([\n    prototypeValue(DisableManuallyScheduledConflictResolution)\n], ManuallyScheduledParentConstraintInterval.prototype, \"resetManuallyScheduledConflictResolutionClass\", void 0);\n__decorate([\n    prototypeValue(ManuallyScheduledParentConstraintIntervalDescription)\n], ManuallyScheduledParentConstraintInterval.prototype, \"descriptionBuilderClass\", void 0);\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Reject } from \"../../../../ChronoGraph/chrono/Effect.js\";\nimport { Mixin } from '../../../../ChronoGraph/class/BetterMixin.js';\nimport { calculate, field } from '../../../../ChronoGraph/replica/Entity.js';\nimport DateHelper from '../../../../Core/helper/DateHelper.js';\nimport { dateConverter, model_field } from '../../../chrono/ModelFieldAtom.js';\nimport { Direction, TimeUnit, ConstraintIntervalSide } from '../../../scheduling/Types.js';\nimport { MAX_DATE, MIN_DATE, isDateFinite } from \"../../../util/Constants.js\";\nimport { HasChildrenMixin } from '../scheduler_basic/HasChildrenMixin.js';\nimport { ConstrainedEarlyEventMixin, EarlyLateLazyness } from \"../scheduler_pro/ConstrainedEarlyEventMixin.js\";\nimport { ConflictEffect } from '../../../chrono/Conflict.js';\nimport { EffectResolutionResult } from \"../../../chrono/SchedulingIssueEffect.js\";\nimport { ManuallyScheduledParentConstraintInterval } from \"./ConstrainedByParentMixin.js\";\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * This mixin provides the constraint-based as-late-as-possible scheduling. See the [[ConstrainedEarlyEventMixin]]\n * for the description of the ASAP constraints-based scheduling. See [[GanttProjectMixin]] for more details about\n * forward/backward, ASAP/ALAP scheduling.\n *\n * It also provides the facilities for calculating the event's [[totalSlack]] and the [[critical]] flag.\n *\n * The ALAP-specific constraints are accumulated in [[lateStartDateConstraintIntervals]], [[lateEndDateConstraintIntervals]] fields.\n */\nexport class ConstrainedLateEventMixin extends Mixin([ConstrainedEarlyEventMixin, HasChildrenMixin], (base) => {\n    const superProto = base.prototype;\n    class ConstrainedLateEventMixin extends base {\n        /**\n         * Calculation method for the [[lateStartDateConstraintIntervals]]. Returns empty array by default.\n         * Override this method to return some extra constraints for the start date during the ALAP scheduling.\n         */\n        *calculateLateStartDateConstraintIntervals() {\n            const intervals = [];\n            const parentEvent = yield this.$.parentEvent;\n            if (parentEvent) {\n                // Child inherits its parent task constraints\n                const parentIntervals = yield parentEvent.$.lateStartDateConstraintIntervals;\n                intervals.push.apply(intervals, parentIntervals);\n            }\n            return intervals;\n        }\n        /**\n         * Calculation method for the [[lateEndDateConstraintIntervals]]. Returns empty array by default.\n         * Override this method to return some extra constraints for the end date during the ALAP scheduling.\n         */\n        *calculateLateEndDateConstraintIntervals() {\n            const intervals = [];\n            const parentEvent = yield this.$.parentEvent;\n            if (parentEvent) {\n                // Child inherits its parent task constraints\n                const parentIntervals = yield parentEvent.$.lateEndDateConstraintIntervals;\n                intervals.push.apply(intervals, parentIntervals);\n                // If the parent is scheduled manually it should still restrict its children (even though it has no a constraint set)\n                // so we append an artificial constraining interval\n                if ((yield parentEvent.$.manuallyScheduled) && (yield this.$.effectiveDirection).direction === Direction.Backward) {\n                    intervals.push(ManuallyScheduledParentConstraintInterval.new({\n                        side: ConstraintIntervalSide.End,\n                        endDate: yield parentEvent.$.endDate\n                    }));\n                }\n            }\n            return intervals;\n        }\n        /**\n         * The method defines wether the provided child event should be\n         * taken into account when calculating this summary event [[lateStartDate]].\n         * Child events roll up their [[lateStartDate]] values to their summary tasks.\n         * So a summary task [[lateStartDate]] date gets equal to its minimal child [[lateStartDate]].\n         *\n         * If the method returns `true` the child event is taken into account\n         * and if the method returns `false` it's not.\n         * By default the method returns `true` to include all child events data.\n         * @param childEvent Child event to consider.\n         * @returns `true` if the provided event should be taken into account, `false` if not.\n         */\n        *shouldRollupChildLateStartDate(childEvent) {\n            return true;\n        }\n        *calculateMinChildrenLateStartDate() {\n            let result = MAX_DATE;\n            const subEventsIterator = yield* this.subEventsIterable();\n            for (let childEvent of subEventsIterator) {\n                if (!(yield* this.shouldRollupChildLateStartDate(childEvent)))\n                    continue;\n                let childDate;\n                if ((yield childEvent.$.manuallyScheduled) && (yield* childEvent.hasSubEvents())) {\n                    childDate = yield childEvent.$.minChildrenLateStartDate;\n                }\n                childDate = childDate || (yield childEvent.$.lateStartDate);\n                if (childDate && childDate < result)\n                    result = childDate;\n            }\n            return result.getTime() - MAX_DATE.getTime() ? result : null;\n        }\n        *calculateLateStartDateRaw() {\n            // Manually scheduled task treat its current start date as late start date\n            // in case of backward scheduling.\n            // Early dates in that case are calculated the same way it happens for automatic tasks\n            if ((yield this.$.manuallyScheduled) && (yield this.$.effectiveDirection).direction === Direction.Backward) {\n                return yield this.$.startDate;\n            }\n            // Parent task calculate its late start date as minimal late start date of its children\n            if (yield* this.hasSubEvents()) {\n                return yield this.$.minChildrenLateStartDate;\n            }\n            if (!(yield* this.isConstrainedLate())) {\n                return yield this.$.startDate;\n            }\n            // need to use concat instead of directly mutating the `startDateConstraintIntervals` since that is\n            // used as storage for `this.$.lateStartDateConstraintIntervals`\n            const startDateConstraintIntervals = (yield this.$.lateStartDateConstraintIntervals).concat(yield this.$.startDateConstraintIntervals);\n            const endDateConstraintIntervals = (yield this.$.lateEndDateConstraintIntervals).concat(yield this.$.endDateConstraintIntervals);\n            let effectiveInterval = yield* this.calculateEffectiveConstraintInterval(true, startDateConstraintIntervals, endDateConstraintIntervals);\n            if (effectiveInterval === null) {\n                return null;\n            }\n            else if (effectiveInterval.isIntervalEmpty()) {\n                // re-calculate effective resulting interval gathering intersection history\n                effectiveInterval = yield* this.calculateEffectiveConstraintInterval(true, startDateConstraintIntervals, endDateConstraintIntervals, true);\n                const conflict = ConflictEffect.new({\n                    intervals: [...effectiveInterval.intersectionOf]\n                });\n                if ((yield conflict) === EffectResolutionResult.Cancel) {\n                    yield Reject(conflict);\n                }\n                else {\n                    return null;\n                }\n            }\n            return isDateFinite(effectiveInterval.endDate) ? effectiveInterval.endDate : null;\n        }\n        /**\n         * The method defines wether the provided child event should be\n         * taken into account when calculating this summary event [[lateEndDate]].\n         * Child events roll up their [[lateEndDate]] values to their summary tasks.\n         * So a summary task [[lateEndDate]] gets equal to its maximal child [[lateEndDate]].\n         *\n         * If the method returns `true` the child event is taken into account\n         * and if the method returns `false` it's not.\n         * By default the method returns `true` to include all child events data.\n         * @param childEvent Child event to consider.\n         * @returns `true` if the provided event should be taken into account, `false` if not.\n         */\n        *shouldRollupChildLateEndDate(childEvent) {\n            return true;\n        }\n        *calculateMaxChildrenLateEndDate() {\n            let result = MIN_DATE;\n            const subEventsIterator = yield* this.subEventsIterable();\n            for (let childEvent of subEventsIterator) {\n                if (!(yield* this.shouldRollupChildLateEndDate(childEvent)))\n                    continue;\n                let childDate;\n                if ((yield childEvent.$.manuallyScheduled) && (yield* childEvent.hasSubEvents())) {\n                    childDate = yield childEvent.$.maxChildrenLateEndDate;\n                }\n                childDate = childDate || (yield childEvent.$.lateEndDate);\n                if (childDate && childDate > result)\n                    result = childDate;\n            }\n            return result.getTime() - MIN_DATE.getTime() ? result : null;\n        }\n        *calculateLateStartDate() {\n            return yield this.$.lateStartDateRaw;\n        }\n        *calculateLateEndDateRaw() {\n            // Manually scheduled task treat its current end date as late end date\n            // in case of backward scheduling.\n            // Early dates in that case are calculated the same way it happens for automatic tasks\n            if ((yield this.$.manuallyScheduled) && (yield this.$.effectiveDirection).direction === Direction.Backward) {\n                return yield this.$.endDate;\n            }\n            // Parent task calculate its late end date as minimal early end date of its children\n            if (yield* this.hasSubEvents()) {\n                return yield this.$.maxChildrenLateEndDate;\n            }\n            if (!(yield* this.isConstrainedLate())) {\n                return yield this.$.endDate;\n            }\n            const startDateConstraintIntervals = yield this.$.lateStartDateConstraintIntervals;\n            const endDateConstraintIntervals = yield this.$.lateEndDateConstraintIntervals;\n            let effectiveInterval = (yield* this.calculateEffectiveConstraintInterval(false, \n            // need to use concat instead of directly mutating the `startDateConstraintIntervals` since that is\n            // used as storage for `this.$.lateStartDateConstraintIntervals`\n            startDateConstraintIntervals.concat(yield this.$.startDateConstraintIntervals), endDateConstraintIntervals.concat(yield this.$.endDateConstraintIntervals)));\n            if (effectiveInterval === null) {\n                return null;\n            }\n            else if (effectiveInterval.isIntervalEmpty()) {\n                // re-calculate effective resulting interval gathering intersection history\n                effectiveInterval = (yield* this.calculateEffectiveConstraintInterval(false, \n                // need to use concat instead of directly mutating the `startDateConstraintIntervals` since that is\n                // used as storage for `this.$.lateStartDateConstraintIntervals`\n                (yield this.$.lateStartDateConstraintIntervals).concat(yield this.$.startDateConstraintIntervals), (yield this.$.lateEndDateConstraintIntervals).concat(yield this.$.endDateConstraintIntervals), true));\n                const conflict = ConflictEffect.new({\n                    intervals: [...effectiveInterval.intersectionOf]\n                });\n                if ((yield conflict) === EffectResolutionResult.Cancel) {\n                    yield Reject(conflict);\n                }\n                else {\n                    return null;\n                }\n            }\n            return isDateFinite(effectiveInterval.endDate) ? effectiveInterval.endDate : null;\n        }\n        *calculateLateEndDate() {\n            const date = yield this.$.lateEndDateRaw;\n            return yield* this.maybeSkipNonWorkingTime(date, false);\n        }\n        *calculateTotalSlack() {\n            const earlyStartDate = yield this.$.earlyStartDateRaw;\n            const lateStartDate = yield this.$.lateStartDateRaw;\n            const earlyEndDate = yield this.$.earlyEndDateRaw;\n            const lateEndDate = yield this.$.lateEndDateRaw;\n            const slackUnit = yield this.$.slackUnit;\n            let endSlack, result;\n            if ((earlyStartDate && lateStartDate) || (earlyEndDate && lateEndDate)) {\n                if (earlyStartDate && lateStartDate) {\n                    result = yield* this.calculateProjectedDuration(earlyStartDate, lateStartDate, slackUnit);\n                    if (earlyEndDate && lateEndDate) {\n                        endSlack = yield* this.calculateProjectedDuration(earlyEndDate, lateEndDate, slackUnit);\n                        if (endSlack < result)\n                            result = endSlack;\n                    }\n                }\n                else if (earlyEndDate && lateEndDate) {\n                    result = yield* this.calculateProjectedDuration(earlyEndDate, lateEndDate, slackUnit);\n                }\n            }\n            return result;\n        }\n        *calculateCritical() {\n            const totalSlack = yield this.$.totalSlack;\n            return totalSlack <= 0;\n        }\n        *isConstrainedLate() {\n            const startDateIntervals = yield this.$.startDateConstraintIntervals;\n            const endDateIntervals = yield this.$.endDateConstraintIntervals;\n            const lateStartDateConstraintIntervals = yield this.$.lateStartDateConstraintIntervals;\n            const lateEndDateConstraintIntervals = yield this.$.lateEndDateConstraintIntervals;\n            return Boolean(startDateIntervals?.length || endDateIntervals?.length || lateStartDateConstraintIntervals?.length || lateEndDateConstraintIntervals?.length);\n        }\n        *calculateStartDatePure() {\n            const direction = yield this.$.effectiveDirection;\n            if (direction.direction === Direction.Backward) {\n                // early exit if this mixin is not applicable, but only after(!) the direction check\n                // this is because the `isConstrainedLate` yield early constraint intervals, which are generally lazy,\n                // depending on the direction\n                if (!(yield* this.isConstrainedLate()) || (yield this.$.manuallyScheduled) || (yield this.$.unscheduled)) {\n                    return yield* superProto.calculateStartDatePure.call(this);\n                }\n                if (yield* this.hasSubEvents()) {\n                    return yield* this.calculateMinChildrenStartDate();\n                }\n                else\n                    return yield this.$.lateStartDate;\n            }\n            else {\n                return yield* superProto.calculateStartDatePure.call(this);\n            }\n        }\n        *calculateStartDateProposed() {\n            const direction = yield this.$.effectiveDirection;\n            switch (direction.direction) {\n                case Direction.Backward:\n                    // early exit if this mixin is not applicable, but only after(!) the direction check\n                    // this is because the `isConstrainedLate` yield early constraint intervals, which are generally lazy,\n                    // depending on the direction\n                    if (!(yield* this.isConstrainedLate()) || (yield this.$.manuallyScheduled) || (yield this.$.unscheduled)) {\n                        return yield* superProto.calculateStartDateProposed.call(this);\n                    }\n                    if (yield* this.hasSubEvents()) {\n                        return yield* this.calculateMinChildrenStartDate();\n                    }\n                    return (yield this.$.lateStartDate) || (yield* superProto.calculateStartDateProposed.call(this));\n                default:\n                    return yield* superProto.calculateStartDateProposed.call(this);\n            }\n        }\n        *calculateEndDatePure() {\n            const direction = yield this.$.effectiveDirection;\n            if (direction.direction === Direction.Backward) {\n                // early exit if this mixin is not applicable, but only after(!) the direction check\n                // this is because the `isConstrainedLate` yield early constraint intervals, which are generally lazy,\n                // depending on the direction\n                if (!(yield* this.isConstrainedLate()) || (yield this.$.manuallyScheduled) || (yield this.$.unscheduled)) {\n                    return yield* superProto.calculateEndDatePure.call(this);\n                }\n                if (yield* this.hasSubEvents()) {\n                    return yield* this.calculateMaxChildrenEndDate();\n                }\n                else\n                    return yield this.$.lateEndDate;\n            }\n            else {\n                return yield* superProto.calculateEndDatePure.call(this);\n            }\n        }\n        *calculateEndDateProposed() {\n            const direction = yield this.$.effectiveDirection;\n            switch (direction.direction) {\n                case Direction.Backward:\n                    // early exit if this mixin is not applicable, but only after(!) the direction check\n                    // this is because the `isConstrainedLate` yield early constraint intervals, which are generally lazy,\n                    // depending on the direction\n                    if (!(yield* this.isConstrainedLate()) || (yield this.$.manuallyScheduled) || (yield this.$.unscheduled)) {\n                        return yield* superProto.calculateEndDateProposed.call(this);\n                    }\n                    if (yield* this.hasSubEvents()) {\n                        return yield* this.calculateMaxChildrenEndDate();\n                    }\n                    return (yield this.$.lateEndDate) || (yield* superProto.calculateEndDateProposed.call(this));\n                default:\n                    return yield* superProto.calculateEndDateProposed.call(this);\n            }\n        }\n    }\n    __decorate([\n        field({ lazy: EarlyLateLazyness })\n    ], ConstrainedLateEventMixin.prototype, \"minChildrenLateStartDate\", void 0);\n    __decorate([\n        field({ lazy: EarlyLateLazyness })\n    ], ConstrainedLateEventMixin.prototype, \"lateStartDateRaw\", void 0);\n    __decorate([\n        model_field({ type: 'date', persist: false }, { lazy: EarlyLateLazyness, converter: dateConverter, persistent: false })\n    ], ConstrainedLateEventMixin.prototype, \"lateStartDate\", void 0);\n    __decorate([\n        field({ lazy: EarlyLateLazyness })\n    ], ConstrainedLateEventMixin.prototype, \"maxChildrenLateEndDate\", void 0);\n    __decorate([\n        field({ lazy: EarlyLateLazyness })\n    ], ConstrainedLateEventMixin.prototype, \"lateEndDateRaw\", void 0);\n    __decorate([\n        model_field({ type: 'date', persist: false }, { lazy: EarlyLateLazyness, converter: dateConverter, persistent: false })\n    ], ConstrainedLateEventMixin.prototype, \"lateEndDate\", void 0);\n    __decorate([\n        field({ lazy: EarlyLateLazyness })\n    ], ConstrainedLateEventMixin.prototype, \"lateStartDateConstraintIntervals\", void 0);\n    __decorate([\n        field({ lazy: EarlyLateLazyness })\n    ], ConstrainedLateEventMixin.prototype, \"lateEndDateConstraintIntervals\", void 0);\n    __decorate([\n        model_field({ type: 'number', persist: false }, { lazy: EarlyLateLazyness, persistent: false })\n    ], ConstrainedLateEventMixin.prototype, \"totalSlack\", void 0);\n    __decorate([\n        model_field({ type: 'string', defaultValue: TimeUnit.Day, persist: false }, { lazy: EarlyLateLazyness, converter: DateHelper.normalizeUnit, persistent: false })\n    ], ConstrainedLateEventMixin.prototype, \"slackUnit\", void 0);\n    __decorate([\n        model_field({ type: 'boolean', defaultValue: false, persist: false }, { persistent: false, lazy: EarlyLateLazyness })\n    ], ConstrainedLateEventMixin.prototype, \"critical\", void 0);\n    __decorate([\n        calculate('lateStartDateConstraintIntervals')\n    ], ConstrainedLateEventMixin.prototype, \"calculateLateStartDateConstraintIntervals\", null);\n    __decorate([\n        calculate('lateEndDateConstraintIntervals')\n    ], ConstrainedLateEventMixin.prototype, \"calculateLateEndDateConstraintIntervals\", null);\n    __decorate([\n        calculate('minChildrenLateStartDate')\n    ], ConstrainedLateEventMixin.prototype, \"calculateMinChildrenLateStartDate\", null);\n    __decorate([\n        calculate('lateStartDateRaw')\n    ], ConstrainedLateEventMixin.prototype, \"calculateLateStartDateRaw\", null);\n    __decorate([\n        calculate('maxChildrenLateEndDate')\n    ], ConstrainedLateEventMixin.prototype, \"calculateMaxChildrenLateEndDate\", null);\n    __decorate([\n        calculate('lateStartDate')\n    ], ConstrainedLateEventMixin.prototype, \"calculateLateStartDate\", null);\n    __decorate([\n        calculate('lateEndDateRaw')\n    ], ConstrainedLateEventMixin.prototype, \"calculateLateEndDateRaw\", null);\n    __decorate([\n        calculate('lateEndDate')\n    ], ConstrainedLateEventMixin.prototype, \"calculateLateEndDate\", null);\n    __decorate([\n        calculate('totalSlack')\n    ], ConstrainedLateEventMixin.prototype, \"calculateTotalSlack\", null);\n    __decorate([\n        calculate('critical')\n    ], ConstrainedLateEventMixin.prototype, \"calculateCritical\", null);\n    return ConstrainedLateEventMixin;\n}) {\n}\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Mixin } from '../../../../ChronoGraph/class/BetterMixin.js';\nimport { calculate } from '../../../../ChronoGraph/replica/Entity.js';\nimport { isAtomicValue } from '../../../../ChronoGraph/util/Helpers.js';\nimport { ConstraintType, DependencyType, Direction, TimeUnit } from '../../../scheduling/Types.js';\nimport { ScheduledByDependenciesEarlyEventMixin } from \"../scheduler_pro/ScheduledByDependenciesEarlyEventMixin.js\";\nimport { ConstrainedLateEventMixin } from \"./ConstrainedLateEventMixin.js\";\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * This mixin adds support for scheduling event ALAP, by dependencies. All it does is\n * create the \"late\" constraint interval for every outgoing dependency.\n *\n * See [[ConstrainedEarlyEventMixin]] for more details about constraint-based scheduling.\n * See also [[ScheduledByDependenciesEarlyEventMixin]].\n */\nexport class ScheduledByDependenciesLateEventMixin extends Mixin([ScheduledByDependenciesEarlyEventMixin, ConstrainedLateEventMixin], (base) => {\n    const superProto = base.prototype;\n    class ScheduledByDependenciesLateEventMixin extends base {\n        *shouldSuccessorAffectScheduling(dependency) {\n            const toEvent = yield dependency.$.toEvent;\n            // ignore missing target events and inactive dependencies\n            return toEvent && !isAtomicValue(toEvent) && (yield dependency.$.active)\n                // and inactive target events (unless this event is also inactive)\n                && (!(yield toEvent.$.inactive) || (yield this.$.inactive));\n        }\n        *calculateLateStartDateConstraintIntervals() {\n            const intervals = yield* superProto.calculateLateStartDateConstraintIntervals.call(this);\n            const project = this.getProject();\n            const dependencyConstraintIntervalClass = project.dependencyConstraintIntervalClass;\n            let dependency;\n            for (dependency of (yield this.$.outgoingDeps)) {\n                // ignore missing target events and inactive dependencies\n                if (!(yield* this.shouldSuccessorAffectScheduling(dependency)))\n                    continue;\n                const successor = yield dependency.$.toEvent;\n                const manuallyScheduled = yield successor.$.manuallyScheduled;\n                let successorDate;\n                switch (yield dependency.$.type) {\n                    case DependencyType.StartToStart:\n                        successorDate = manuallyScheduled\n                            ? yield successor.$.startDate\n                            : yield successor.$.lateStartDateRaw;\n                        break;\n                    case DependencyType.StartToEnd:\n                        successorDate = manuallyScheduled\n                            ? yield successor.$.endDate\n                            : yield successor.$.lateEndDateRaw;\n                        break;\n                }\n                if (successorDate) {\n                    const lag = yield dependency.$.lag;\n                    const lagUnit = yield dependency.$.lagUnit;\n                    const lagMS = yield* project.$convertDuration(lag, lagUnit, TimeUnit.Millisecond);\n                    const calendar = yield dependency.$.calendar;\n                    // this \"subscribes\" on the calendar's `version` field (which is incremented\n                    // every time when the intervals of the calendar changes)\n                    yield calendar.$.version;\n                    let endDate = successorDate;\n                    // Take lag into account\n                    if (lagMS) {\n                        // Skip non-wroking time forward to constrain the event as late as possible\n                        // (could affect if the event and successor use different calendars)\n                        endDate = calendar.skipNonWorkingTime(calendar.calculateStartDate(successorDate, lagMS));\n                    }\n                    const interval = dependencyConstraintIntervalClass.new({\n                        owner: dependency,\n                        startDate: null,\n                        endDate,\n                    });\n                    intervals.unshift(interval);\n                }\n            }\n            return intervals;\n        }\n        *calculateLateEndDateConstraintIntervals() {\n            const intervals = yield* superProto.calculateLateEndDateConstraintIntervals.call(this);\n            const project = this.getProject();\n            const dependencyConstraintIntervalClass = project.dependencyConstraintIntervalClass;\n            let dependency;\n            for (dependency of (yield this.$.outgoingDeps)) {\n                // ignore missing target events and inactive dependencies\n                if (!(yield* this.shouldSuccessorAffectScheduling(dependency)))\n                    continue;\n                const successor = yield dependency.$.toEvent;\n                const manuallyScheduled = yield successor.$.manuallyScheduled;\n                let successorDate;\n                switch (yield dependency.$.type) {\n                    case DependencyType.EndToEnd:\n                        successorDate = manuallyScheduled\n                            ? yield successor.$.endDate\n                            : yield successor.$.lateEndDateRaw;\n                        break;\n                    case DependencyType.EndToStart:\n                        successorDate = manuallyScheduled\n                            ? yield successor.$.startDate\n                            : yield successor.$.lateStartDateRaw;\n                        break;\n                }\n                if (successorDate) {\n                    const lag = yield dependency.$.lag;\n                    const lagUnit = yield dependency.$.lagUnit;\n                    const lagMS = yield* project.$convertDuration(lag, lagUnit, TimeUnit.Millisecond);\n                    const calendar = yield dependency.$.calendar;\n                    // this \"subscribes\" on the calendar's `version` field (which is incremented\n                    // every time when the intervals of the calendar changes)\n                    yield calendar.$.version;\n                    let endDate = successorDate;\n                    // Take lag into account\n                    if (lagMS) {\n                        // Skip non-wroking time forward to constrain the event as late as possible\n                        // (could affect if the event and successor use different calendars)\n                        endDate = calendar.skipNonWorkingTime(calendar.calculateStartDate(successorDate, lagMS));\n                    }\n                    const interval = dependencyConstraintIntervalClass.new({\n                        owner: dependency,\n                        startDate: null,\n                        endDate,\n                    });\n                    intervals.unshift(interval);\n                }\n            }\n            return intervals;\n        }\n        *calculateEffectiveDirection() {\n            const projectDirection = yield this.getProject().$.effectiveDirection;\n            const ownConstraintType = yield this.$.constraintType;\n            if (projectDirection.direction === Direction.Backward\n                && !(yield this.$.manuallyScheduled)\n                && !((ownConstraintType === ConstraintType.MustStartOn || ownConstraintType === ConstraintType.MustFinishOn)\n                    && Boolean(yield this.$.constraintDate))) {\n                for (const dependency of (yield this.$.outgoingDeps)) {\n                    const successor = yield dependency.$.toEvent;\n                    const hasSuccessor = successor != null && !isAtomicValue(successor);\n                    const constraintType = hasSuccessor ? yield successor.$.constraintType : undefined;\n                    // ignore missing from events, unresolved from events (id given but not resolved),\n                    // inactive dependencies and manually scheduled successors\n                    if (!hasSuccessor || !(yield dependency.$.active) || (yield successor.$.manuallyScheduled)\n                        || ((constraintType === ConstraintType.MustStartOn || constraintType === ConstraintType.MustFinishOn)\n                            && Boolean(yield successor.$.constraintDate)))\n                        continue;\n                    // pick the direction of the successor from the right side\n                    const dependencyType = yield dependency.$.type;\n                    const successorDirection = dependencyType === DependencyType.EndToEnd || dependencyType === DependencyType.StartToEnd\n                        ? yield successor.$.endDateDirection\n                        : yield successor.$.startDateDirection;\n                    if (successorDirection.direction === Direction.Forward)\n                        return {\n                            // our TS version is a bit too old\n                            kind: 'enforced',\n                            direction: Direction.Forward,\n                            enforcedBy: successorDirection.kind === 'enforced'\n                                ? successorDirection.enforcedBy\n                                : successorDirection.kind === 'own'\n                                    ? successor\n                                    : successorDirection.inheritedFrom\n                        };\n                }\n            }\n            return yield* super.calculateEffectiveDirection();\n        }\n    }\n    __decorate([\n        calculate('lateStartDateIntervals')\n    ], ScheduledByDependenciesLateEventMixin.prototype, \"calculateLateStartDateConstraintIntervals\", null);\n    return ScheduledByDependenciesLateEventMixin;\n}) {\n}\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { ProposedOrPrevious } from \"../../../../ChronoGraph/chrono/Effect.js\";\nimport { Mixin } from \"../../../../ChronoGraph/class/Mixin.js\";\nimport { calculate, write } from \"../../../../ChronoGraph/replica/Entity.js\";\nimport { ScheduledByDependenciesLateEventMixin } from \"../gantt/ScheduledByDependenciesLateEventMixin.js\";\nexport class InactiveEventMixin extends Mixin([ScheduledByDependenciesLateEventMixin], (base) => {\n    const superProto = base.prototype;\n    class InactiveEventMixin extends base {\n        writeInactive(me, transaction, quark, inactive) {\n            const isLoading = !transaction.baseRevision.hasIdentifier(me);\n            me.constructor.prototype.write.call(this, me, transaction, quark, inactive);\n            // @ts-ignore\n            // Apply parent inactive state to children unless we are loading data or undoing/redoing some changes\n            // in such cases both parent and children data are supposed to be provided\n            if (!isLoading && this.children && !this.stm?.isRestoring) {\n                for (const child of this.children) {\n                    child.inactive = inactive;\n                }\n            }\n        }\n        *calculateInactive() {\n            const inactive = yield ProposedOrPrevious;\n            // A summary task is active if it has at least one active sub-event\n            if (yield* this.hasSubEvents()) {\n                const subEvents = yield* this.subEventsIterable();\n                let activeCnt = 0;\n                for (const subEvent of subEvents) {\n                    // calculate active sub-events count\n                    if (!(yield subEvent.$.inactive))\n                        activeCnt++;\n                }\n                // inactive if it has no active sub-events\n                return !activeCnt;\n            }\n            return inactive;\n        }\n        *shouldRollupChildEffort(child) {\n            return !(yield child.$.inactive) || (yield this.$.inactive);\n        }\n        *shouldRollupChildPercentDoneSummaryData(child) {\n            return !(yield child.$.inactive) || (yield this.$.inactive);\n        }\n        *shouldRollupChildStartDate(child) {\n            // Do not take into account inactive children dates when calculating\n            // their parent start/end dates (unless the parent is also inactive)\n            return !(yield child.$.inactive) || (yield this.$.inactive);\n        }\n        *shouldRollupChildEndDate(child) {\n            // Do not take into account inactive children dates when calculating\n            // their parent start/end dates (unless the parent is also inactive)\n            return !(yield child.$.inactive) || (yield this.$.inactive);\n        }\n        *shouldRollupChildEarlyStartDate(childEvent) {\n            // Do not take into account inactive children dates when calculating\n            // their parent start end dates (unless the parent is also inactive)\n            return !(yield childEvent.$.inactive) || (yield this.$.inactive);\n        }\n        *shouldRollupChildEarlyEndDate(childEvent) {\n            // Do not take into account inactive children dates when calculating\n            // their parent start end dates (unless the parent is also inactive)\n            return !(yield childEvent.$.inactive) || (yield this.$.inactive);\n        }\n        *shouldRollupChildLateStartDate(childEvent) {\n            // Do not take into account inactive children dates when calculating\n            // their parent start end dates (unless the parent is also inactive)\n            return !(yield childEvent.$.inactive) || (yield this.$.inactive);\n        }\n        *shouldRollupChildLateEndDate(childEvent) {\n            // Do not take into account inactive children dates when calculating\n            // their parent start end dates (unless the parent is also inactive)\n            return !(yield childEvent.$.inactive) || (yield this.$.inactive);\n        }\n    }\n    __decorate([\n        write('inactive')\n    ], InactiveEventMixin.prototype, \"writeInactive\", null);\n    __decorate([\n        calculate('inactive')\n    ], InactiveEventMixin.prototype, \"calculateInactive\", null);\n    return InactiveEventMixin;\n}) {\n}\n", "import { CycleResolution, CycleDescription } from \"../../../../../ChronoGraph/cycle_resolver/CycleResolver.js\";\nimport { durationFormula, DurationVar, endDateFormula, EndDateVar, startDateFormula, StartDateVar } from \"../../scheduler_basic/BaseEventDispatcher.js\";\nimport { effortFormula, EffortVar, endDateByEffortFormula, startDateByEffortFormula, unitsFormula, UnitsVar } from \"../../scheduler_pro/HasEffortDispatcher.js\";\n//---------------------------------------------------------------------------------------------------------------------\nexport const fixedEffortSEDWUGraphDescription = CycleDescription.new({\n    variables: new Set([StartDateVar, EndDateVar, DurationVar, EffortVar, UnitsVar]),\n    formulas: new Set([\n        // the order of formulas is important here - the earlier ones are preferred\n        endDateByEffortFormula,\n        durationFormula,\n        unitsFormula,\n        effortFormula,\n        startDateByEffortFormula,\n        startDateFormula,\n        endDateFormula\n    ])\n});\n//---------------------------------------------------------------------------------------------------------------------\nexport const fixedEffortSEDWUForward = CycleResolution.new({\n    description: fixedEffortSEDWUGraphDescription,\n    defaultResolutionFormulas: new Set([endDateByEffortFormula, durationFormula])\n});\nexport const fixedEffortSEDWUBackward = CycleResolution.new({\n    description: fixedEffortSEDWUGraphDescription,\n    defaultResolutionFormulas: new Set([startDateByEffortFormula, durationFormula])\n});\n", "import { HasProposedValue } from \"../../../../../ChronoGraph/chrono/Effect.js\";\nimport { Mixin } from \"../../../../../ChronoGraph/class/BetterMixin.js\";\nimport { Direction, SchedulingMode } from \"../../../../scheduling/Types.js\";\nimport { EffortVar, UnitsVar } from \"../../scheduler_pro/HasEffortDispatcher.js\";\nimport { HasSchedulingModeMixin } from \"../../scheduler_pro/HasSchedulingModeMixin.js\";\nimport { fixedEffortSEDWUBackward, fixedEffortSEDWUForward } from \"./FixedEffortDispatcher.js\";\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * This mixin provides the fixed effort scheduling mode facility. The scheduling mode is controlled with the\n * [[HasSchedulingModeMixin.schedulingMode]] field.\n *\n * See [[HasSchedulingModeMixin]] for more details.\n *\n * In this mode, the effort of the task remains \"fixed\" as the name suggest. It is changed only if there's no other options,\n * for example if both \"duration\" and \"units\" has changed. In other cases, some other variable is updated.\n */\nexport class FixedEffortMixin extends Mixin([HasSchedulingModeMixin], (base) => {\n    const superProto = base.prototype;\n    class FixedEffortMixin extends base {\n        *prepareDispatcher(YIELD) {\n            const schedulingMode = yield* this.effectiveSchedulingMode();\n            if (schedulingMode === SchedulingMode.FixedEffort) {\n                const cycleDispatcher = yield* superProto.prepareDispatcher.call(this, YIELD);\n                if (yield HasProposedValue(this.$.assigned))\n                    cycleDispatcher.addProposedValueFlag(UnitsVar);\n                cycleDispatcher.addKeepIfPossibleFlag(EffortVar);\n                return cycleDispatcher;\n            }\n            else {\n                return yield* superProto.prepareDispatcher.call(this, YIELD);\n            }\n        }\n        cycleResolutionContext(Y) {\n            const schedulingMode = this.effectiveSchedulingModeSync(Y);\n            if (schedulingMode === SchedulingMode.FixedEffort) {\n                const direction = Y(this.$.effectiveDirection);\n                return direction.direction === Direction.Forward || direction.direction === Direction.None ? fixedEffortSEDWUForward : fixedEffortSEDWUBackward;\n            }\n            else {\n                return superProto.cycleResolutionContext.call(this, Y);\n            }\n        }\n    }\n    return FixedEffortMixin;\n}) {\n}\n", "import { CycleResolution, CycleDescription } from \"../../../../../ChronoGraph/cycle_resolver/CycleResolver.js\";\nimport { durationFormula, DurationVar, endDateFormula, EndDateVar, startDateFormula, StartDateVar } from \"../../scheduler_basic/BaseEventDispatcher.js\";\nimport { effortFormula, EffortVar, endDateByEffortFormula, startDateByEffortFormula, unitsFormula, UnitsVar } from \"../../scheduler_pro/HasEffortDispatcher.js\";\n//---------------------------------------------------------------------------------------------------------------------\nexport const fixedUnitsSEDWUGraphDescription = CycleDescription.new({\n    variables: new Set([StartDateVar, EndDateVar, DurationVar, EffortVar, UnitsVar]),\n    formulas: new Set([\n        // the order of formulas is important here - the earlier ones are preferred\n        endDateByEffortFormula,\n        durationFormula,\n        effortFormula,\n        unitsFormula,\n        startDateByEffortFormula,\n        startDateFormula,\n        endDateFormula\n    ])\n});\n//---------------------------------------------------------------------------------------------------------------------\nexport const fixedUnitsSEDWUForwardNonEffortDriven = CycleResolution.new({\n    description: fixedUnitsSEDWUGraphDescription,\n    defaultResolutionFormulas: new Set([endDateByEffortFormula, endDateFormula, effortFormula])\n});\nexport const fixedUnitsSEDWUForwardEffortDriven = CycleResolution.new({\n    description: fixedUnitsSEDWUGraphDescription,\n    defaultResolutionFormulas: new Set([endDateByEffortFormula, endDateFormula, durationFormula])\n});\nexport const fixedUnitsSEDWUBackwardNonEffortDriven = CycleResolution.new({\n    description: fixedUnitsSEDWUGraphDescription,\n    defaultResolutionFormulas: new Set([startDateByEffortFormula, startDateFormula, effortFormula])\n});\nexport const fixedUnitsSEDWUBackwardEffortDriven = CycleResolution.new({\n    description: fixedUnitsSEDWUGraphDescription,\n    defaultResolutionFormulas: new Set([startDateByEffortFormula, startDateFormula, durationFormula])\n});\n", "import { HasProposedValue } from \"../../../../../ChronoGraph/chrono/Effect.js\";\nimport { Mixin } from \"../../../../../ChronoGraph/class/BetterMixin.js\";\nimport { Direction, SchedulingMode } from \"../../../../scheduling/Types.js\";\nimport { EffortVar, UnitsVar } from \"../../scheduler_pro/HasEffortDispatcher.js\";\nimport { HasSchedulingModeMixin } from \"../../scheduler_pro/HasSchedulingModeMixin.js\";\nimport { fixedUnitsSEDWUBackwardEffortDriven, fixedUnitsSEDWUBackwardNonEffortDriven, fixedUnitsSEDWUForwardEffortDriven, fixedUnitsSEDWUForwardNonEffortDriven } from \"./FixedUnitsDispatcher.js\";\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * This mixin provides the fixed units scheduling mode facility. The scheduling mode is controlled with the\n * [[HasSchedulingModeMixin.schedulingMode]] field.\n *\n * See [[HasSchedulingModeMixin]] for more details.\n *\n * In this mode, the assignment units of the task's assignments remains \"fixed\" as the name suggest.\n * Those are changed only if there's no other options, for example if both \"duration\" and \"effort\" has changed.\n *\n * If the [[HasSchedulingModeMixin.effortDriven]] flag is enabled, effort variable becomes \"fixed\" as well, so normally the \"duration\"\n * variable will change. If that flag is disabled, then \"effort\" will be changed.\n */\nexport class FixedUnitsMixin extends Mixin([HasSchedulingModeMixin], (base) => {\n    const superProto = base.prototype;\n    class FixedUnitsMixin extends base {\n        *prepareDispatcher(YIELD) {\n            const schedulingMode = yield* this.effectiveSchedulingMode();\n            if (schedulingMode === SchedulingMode.FixedUnits) {\n                const cycleDispatcher = yield* superProto.prepareDispatcher.call(this, YIELD);\n                if (yield HasProposedValue(this.$.assigned))\n                    cycleDispatcher.addProposedValueFlag(UnitsVar);\n                if (yield this.$.effortDriven)\n                    cycleDispatcher.addKeepIfPossibleFlag(EffortVar);\n                cycleDispatcher.addKeepIfPossibleFlag(UnitsVar);\n                return cycleDispatcher;\n            }\n            else {\n                return yield* superProto.prepareDispatcher.call(this, YIELD);\n            }\n        }\n        cycleResolutionContext(Y) {\n            const schedulingMode = this.effectiveSchedulingModeSync(Y);\n            if (schedulingMode === SchedulingMode.FixedUnits) {\n                const direction = Y(this.$.effectiveDirection);\n                const effortDriven = Y(this.$.effortDriven);\n                if (direction.direction === Direction.Forward || direction.direction === Direction.None) {\n                    return effortDriven ? fixedUnitsSEDWUForwardEffortDriven : fixedUnitsSEDWUForwardNonEffortDriven;\n                }\n                else {\n                    return effortDriven ? fixedUnitsSEDWUBackwardEffortDriven : fixedUnitsSEDWUBackwardNonEffortDriven;\n                }\n            }\n            else {\n                return superProto.cycleResolutionContext.call(this, Y);\n            }\n        }\n    }\n    return FixedUnitsMixin;\n}) {\n}\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { ProposedOrPrevious, ProposedOrPreviousValueOf, Reject } from \"../../../../ChronoGraph/chrono/Effect.js\";\nimport { MixinAny } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { CalculateProposed } from \"../../../../ChronoGraph/cycle_resolver/CycleResolver.js\";\nimport { calculate, field } from \"../../../../ChronoGraph/replica/Entity.js\";\nimport { prototypeValue } from \"../../../../ChronoGraph/util/Helpers.js\";\nimport Base from \"../../../../Core/Base.js\";\nimport DateHelper from \"../../../../Core/helper/DateHelper.js\";\nimport Localizable from \"../../../../Core/localization/Localizable.js\";\nimport { ConflictEffect, ConflictResolution } from \"../../../chrono/Conflict.js\";\nimport { model_field } from \"../../../chrono/ModelFieldAtom.js\";\nimport { EffectResolutionResult } from \"../../../chrono/SchedulingIssueEffect.js\";\nimport { ConstraintIntervalSide, Direction, ProjectConstraintResolution } from \"../../../scheduling/Types.js\";\nimport { format } from \"../../../util/Functions.js\";\nimport { DurationVar, EndDateVar, StartDateVar } from \"../scheduler_basic/BaseEventDispatcher.js\";\nimport { SchedulerProEvent } from \"../scheduler_pro/SchedulerProEvent.js\";\nimport { ConstrainedByParentMixin } from \"./ConstrainedByParentMixin.js\";\nimport { ConstrainedLateEventMixin } from \"./ConstrainedLateEventMixin.js\";\nimport { InactiveEventMixin } from \"./InactiveEventMixin.js\";\nimport { ScheduledByDependenciesLateEventMixin } from \"./ScheduledByDependenciesLateEventMixin.js\";\nimport { FixedEffortMixin } from \"./scheduling_modes/FixedEffortMixin.js\";\nimport { FixedUnitsMixin } from \"./scheduling_modes/FixedUnitsMixin.js\";\n/**\n * This is an event class, [[GanttProjectMixin]] is working with.\n * It is constructed as [[SchedulerProEvent]], enhanced with extra functionality.\n */\nexport class GanttEvent extends MixinAny([\n    SchedulerProEvent,\n    ConstrainedByParentMixin,\n    ConstrainedLateEventMixin,\n    ScheduledByDependenciesLateEventMixin,\n    FixedEffortMixin,\n    FixedUnitsMixin,\n    InactiveEventMixin\n], (base) => {\n    class GanttEvent extends base {\n        *calculateCheckProjectConstraint() {\n            let value = yield ProposedOrPrevious;\n            if (value) {\n                yield* this.validateProjectConstraint();\n                value = false;\n            }\n            return value;\n        }\n        *calculateStartDate() {\n            // project border should be validated before we report final start date value\n            yield this.$.checkProjectConstraint;\n            return yield* super.calculateStartDate();\n        }\n        *calculateEndDate() {\n            // project border should be validated before we report final end date value\n            yield this.$.checkProjectConstraint;\n            return yield* super.calculateEndDate();\n        }\n        writeStartDate(me, transaction, quark, date, keepDuration = true) {\n            const fieldName = this.constructor.getFieldDataSource('projectConstraintResolution');\n            // If writing a date (not caused by STM changes undoing/redoing)\n            // and if that's and initial task processing check if projectConstraintResolution has \"conflict\"\n            // to not add extra work to initial data loading\n            if (date && !this.stm?.isRestoring && (transaction.graph.hasIdentifier(this.$.effectiveDirection) ||\n                (this.projectConstraintResolution || this.data[fieldName]) === ProjectConstraintResolution.Conflict)) {\n                // raise a flag causing provided date validation\n                this.checkProjectConstraint = true;\n            }\n            return super.writeStartDate(me, transaction, quark, date, keepDuration);\n        }\n        writeEndDate(me, transaction, quark, date, keepDuration = false) {\n            const fieldName = this.constructor.getFieldDataSource('projectConstraintResolution');\n            // If writing a date (not caused by STM changes undoing/redoing)\n            // and if that's and initial task processing check if projectConstraintResolution has \"conflict\"\n            // to not add extra work to initial data loading\n            if (date && !this.stm?.isRestoring && (transaction.graph.hasIdentifier(this.$.effectiveDirection) ||\n                (this.projectConstraintResolution || this.data[fieldName]) === ProjectConstraintResolution.Conflict)) {\n                // raise a flag causing provided date validation\n                this.checkProjectConstraint = true;\n            }\n            return super.writeEndDate(me, transaction, quark, date, keepDuration);\n        }\n        *calculateEarlyStartDateConstraintIntervals() {\n            const result = yield* super.calculateEarlyStartDateConstraintIntervals();\n            const projectConstraintResolution = yield this.$.projectConstraintResolution;\n            // If the event is not configured to honor the project constraint\n            // and it's configured to ignore the constraint or we are moving the event\n            if (projectConstraintResolution === ProjectConstraintResolution.Ignore) {\n                // skip the project constraint for it so we could calculate the event start/end dates w/o that constraint effect\n                return result.filter(interval => !interval.isProjectConstraintInterval);\n            }\n            return result;\n        }\n        *calculateLateEndDateConstraintIntervals() {\n            const result = yield* super.calculateLateEndDateConstraintIntervals();\n            const projectConstraintResolution = yield this.$.projectConstraintResolution;\n            // If the event is not configured to honor the project constraint\n            // and it's configured to ignore the constraint or we are moving the event\n            if (projectConstraintResolution === ProjectConstraintResolution.Ignore) {\n                // skip the project constraint for it so we could calculate the event start/end dates w/o that constraint effect\n                return result.filter(interval => !interval.isProjectConstraintInterval);\n            }\n            return result;\n        }\n        *validateProjectConstraint() {\n            const project = this.getProject();\n            const direction = yield project.$.effectiveDirection;\n            const projectConstraintResolution = yield this.$.projectConstraintResolution;\n            const manuallyScheduled = yield this.$.manuallyScheduled;\n            // the constraint should be checked\n            if (projectConstraintResolution === ProjectConstraintResolution.Conflict && !manuallyScheduled) {\n                const dispatcher = yield this.$.dispatcher;\n                const startDateResolution = dispatcher.resolution.get(StartDateVar);\n                const endDateResolution = dispatcher.resolution.get(EndDateVar);\n                const durationResolution = dispatcher.resolution.get(DurationVar);\n                const proposedStartDate = yield ProposedOrPreviousValueOf(this.$.startDate);\n                const proposedEndDate = yield ProposedOrPreviousValueOf(this.$.endDate);\n                // event is scheduled\n                if (proposedEndDate || proposedStartDate) {\n                    let projectDate, eventDate, passed, side;\n                    // it's scheduled forward so is constrained by the project start\n                    if (direction.direction === Direction.Forward) {\n                        if (startDateResolution === CalculateProposed) {\n                            eventDate = proposedStartDate;\n                        }\n                        else {\n                            let effectiveDuration = yield* (durationResolution === CalculateProposed\n                                ? this.calculateDurationProposed()\n                                : this.calculateDurationPure());\n                            if (effectiveDuration != null) {\n                                eventDate = yield* this.calculateProjectedXDateWithDuration(proposedEndDate, false, effectiveDuration);\n                            }\n                        }\n                        projectDate = yield project.$.startDate;\n                        // event start should be >= project start\n                        passed = !projectDate || !eventDate || eventDate >= projectDate;\n                        side = ConstraintIntervalSide.Start;\n                    }\n                    else if (direction.direction === Direction.Backward) {\n                        if (endDateResolution === CalculateProposed) {\n                            eventDate = proposedEndDate;\n                        }\n                        else {\n                            let effectiveDuration = yield* (durationResolution === CalculateProposed\n                                ? this.calculateDurationProposed()\n                                : this.calculateDurationPure());\n                            if (effectiveDuration != null) {\n                                eventDate = yield* this.calculateProjectedXDateWithDuration(proposedStartDate, true, effectiveDuration);\n                            }\n                        }\n                        projectDate = yield project.$.endDate;\n                        passed = !projectDate || !eventDate || eventDate <= projectDate;\n                        side = ConstraintIntervalSide.End;\n                    }\n                    if (!passed) {\n                        const conflict = ProjectConstraintConflictEffect.new({\n                            event: this,\n                            projectDate,\n                            eventDate,\n                            side\n                        });\n                        if ((yield conflict) === EffectResolutionResult.Cancel) {\n                            yield Reject(conflict);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    GanttEvent.usesDelayFromParent = false;\n    __decorate([\n        model_field({ defaultValue: ProjectConstraintResolution.Honor })\n    ], GanttEvent.prototype, \"projectConstraintResolution\", void 0);\n    __decorate([\n        field()\n    ], GanttEvent.prototype, \"checkProjectConstraint\", void 0);\n    __decorate([\n        calculate('checkProjectConstraint')\n    ], GanttEvent.prototype, \"calculateCheckProjectConstraint\", null);\n    return GanttEvent;\n}) {\n}\n/**\n * Class implements resolving a project border violation conflict.\n * It resolves the conflict by ignoring the project border.\n */\nexport class IgnoreProjectConstraintResolution extends Localizable(ConflictResolution) {\n    static get $name() {\n        return 'IgnoreProjectConstraintResolution';\n    }\n    getDescription() {\n        return this.L('L{descriptionTpl}');\n    }\n    resolve() {\n        this.event.projectConstraintResolution = ProjectConstraintResolution.Ignore;\n    }\n}\n/**\n * Class implements resolving a project border violation conflict.\n * It resolves the conflict by rescheduling the event to respect the project border.\n */\nexport class HonorProjectConstraintResolution extends Localizable(ConflictResolution) {\n    static get $name() {\n        return 'HonorProjectConstraintResolution';\n    }\n    getDescription() {\n        return this.L('L{descriptionTpl}');\n    }\n    resolve() {\n        this.event.projectConstraintResolution = ProjectConstraintResolution.Honor;\n    }\n}\n/**\n * Description builder for a [[ProjectConstraintConflictEffect|project border scheduling conflict]].\n */\nexport class ProjectConstraintConflictEffectDescription extends Localizable(Base) {\n    static get $name() {\n        return 'ProjectConstraintConflictEffectDescription';\n    }\n    static getDescription(conflict) {\n        const dateFormat = this.dateFormat || DateHelper.defaultFormat;\n        return format(this.L(conflict.side === ConstraintIntervalSide.Start ? 'L{startDescriptionTpl}' : 'L{endDescriptionTpl}'), conflict.event.name, DateHelper.format(conflict.eventDate, dateFormat), DateHelper.format(conflict.projectDate, dateFormat));\n    }\n}\nProjectConstraintConflictEffectDescription.dateFormat = 'lll';\n/**\n * Special [[Effect|effect]] indicating an event gets scheduled violating the project fixed border\n * (before the project start date if the project is scheduled forwards and after the project end date otherwise).\n *\n * By default the conflict suggests two ways to resolve it:\n *\n * - ignore the project border and proceed with the suggested event changes\n * - honor the project border and adjust the event start/end dates to not violate it\n */\nexport class ProjectConstraintConflictEffect extends ConflictEffect {\n    // we don't need this method and intervals in general\n    filterConflictingIntervals(intervals) {\n        return;\n    }\n    /**\n     * Returns possible resolutions for the _conflict_.\n     */\n    getResolutions() {\n        if (!this._resolutions) {\n            this._resolutions = [\n                this.ignoreProjectConstraintConflictResolutionClass.new({ event: this.event }),\n                this.honorProjectConstraintConflictResolutionClass.new({ event: this.event })\n            ];\n        }\n        return this._resolutions;\n    }\n}\n__decorate([\n    prototypeValue(IgnoreProjectConstraintResolution)\n], ProjectConstraintConflictEffect.prototype, \"ignoreProjectConstraintConflictResolutionClass\", void 0);\n__decorate([\n    prototypeValue(HonorProjectConstraintResolution)\n], ProjectConstraintConflictEffect.prototype, \"honorProjectConstraintConflictResolutionClass\", void 0);\n__decorate([\n    prototypeValue(ProjectConstraintConflictEffectDescription)\n], ProjectConstraintConflictEffect.prototype, \"_descriptionBuilderClass\", void 0);\n", "import TimeSpan from '../../Scheduler/model/TimeSpan.js';\nimport Duration from '../../Core/data/Duration.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\n/**\n * @module Gantt/model/Baseline\n */\n/**\n * This class represents a baseline of a Task.\n *\n * Records based on this model are initially created when tasks are loaded into the TaskStore. If dates (startDate and\n * endDate) are left out, the task's dates will be used. If dates are `null`, dates will be empty and the baseline bar\n * won't be displayed in the UI.\n *\n * @extends Scheduler/model/TimeSpan\n */\nexport default class Baseline extends TimeSpan {\n    //region Fields\n    static fields = [\n        /**\n         * The owning Task of the Baseline\n         * @field {Gantt.model.TaskModel} task\n         */\n        {\n            name    : 'task',\n            persist : false\n        }\n        /**\n         * Start date of the baseline in ISO 8601 format.\n         *\n         * Note that the field always returns a `Date`.\n         *\n         * @field {Date} startDate\n         * @accepts {String|Date}\n         */\n        /**\n         * End date of the baseline in ISO 8601 format.\n         *\n         * Note that the field always returns a `Date`.\n         *\n         * @field {Date} endDate\n         * @accepts {String|Date}\n         */\n        /**\n         * An encapsulation of the CSS classes to be added to the rendered baseline element.\n         *\n         * Always returns a {@link Core.helper.util.DomClassList}, but may still be treated as a string. For\n         * granular control of adding and removing individual classes, it is recommended to use the\n         * {@link Core.helper.util.DomClassList} API.\n         *\n         * @field {Core.helper.util.DomClassList} cls\n         * @accepts {Core.helper.util.DomClassList|String}\n         */\n    ];\n    //endregion\n    isBaseline = true;\n    //region Milestone\n    get milestone() {\n        // a summary baseline may have zero duration when \"recalculateParents\" is on\n        // and a child baseline has working time on the summary baseline non-working time\n        // so we operate start and end date pair here\n        if (!this.isLeaf) {\n            const { startDate, endDate } = this;\n            if (startDate && endDate) {\n                return endDate.getTime() === startDate.getTime();\n            }\n        }\n        return this.duration === 0;\n    }\n    set milestone(value) {\n        value ? this.convertToMilestone() : this.convertToRegular();\n    }\n    async setMilestone(value) {\n        return value ? this.convertToMilestone() : this.convertToRegular();\n    }\n    /**\n     * Converts this baseline to a milestone (start date will match the end date).\n     *\n     * @propagating\n     */\n    async convertToMilestone() {\n        return this.setDuration(0, this.durationUnit, false);\n    }\n    /**\n     * Converts a milestone baseline to a regular baseline with a duration of 1 (keeping current `durationUnit`).\n     *\n     * @propagating\n     */\n    async convertToRegular() {\n        if (this.milestone) {\n            return this.setDuration(1, this.durationUnit, false);\n        }\n    }\n    //endregion\n    internalCalculateStartDate(endDate, duration, durationUnit = this.durationUnit) {\n        if (this.task.graph) {\n            return this.task.run('calculateProjectedXDateWithDuration', endDate, false, duration);\n        }\n        return super.internalCalculateStartDate(endDate, duration, durationUnit);\n    }\n    internalCalculateEndDate(startDate, duration, durationUnit = this.durationUnit) {\n        if (this.task.graph) {\n            return this.task.run('calculateProjectedXDateWithDuration', startDate, true, duration);\n        }\n        return super.internalCalculateEndDate(startDate, duration, durationUnit);\n    }\n    internalCalculateDuration(startDate, endDate, durationUnit = this.durationUnit) {\n        if (this.task.graph) {\n            return this.task.run('calculateProjectedDuration', startDate, endDate);\n        }\n        return super.internalCalculateDuration(startDate, endDate, durationUnit);\n    }\n    // Uses engine to calculate dates and/or duration.\n    normalize() {\n        const { task, startDate, endDate, duration } = this;\n        if (!task.graph) {\n            // Baselines are initialized on first access (first render), for initially visible tasks we need to\n            // normalize after first commit, since we render early before entering graph.\n            // Tasks rendered later will take the cheaper code path below\n            task.project?.once('dataReady', () => this.internalNormalize(startDate, endDate, duration));\n        }\n        super.normalize();\n    }\n    //region Baseline APIs\n    /**\n     * Baseline start variance in the task's duration unit.\n     * @member {Core.data.Duration}\n     * @category Scheduling\n     */\n    get startVariance() {\n        const\n            { task } = this,\n            variance = DateHelper.getDurationInUnit(this.startDate, task.startDate, task.durationUnit);\n        return new Duration({ magnitude : variance, unit : task.durationUnit });\n    }\n    /**\n     * Baseline end variance in the task's duration unit.\n     * @member {Core.data.Duration}\n     * @category Scheduling\n     */\n    get endVariance() {\n        const\n            { task } = this,\n            variance = DateHelper.getDurationInUnit(this.endDate, task.endDate, task.durationUnit);\n        return new Duration({ magnitude : variance, unit : task.durationUnit });\n    }\n    /**\n     * Baseline duration variance in the task's duration unit.\n     * @member {Core.data.Duration}\n     * @category Scheduling\n     */\n    get durationVariance() {\n        return this.fullDuration && this.task.fullDuration.diff(this.fullDuration);\n    }\n    //endregion\n}\nBaseline._$name = 'Baseline';", "import DataField from '../../../Core/data/field/DataField.js';\nimport Wbs from '../../../Core/data/Wbs.js';\n/**\n * @module Gantt/data/field/WbsField\n */\n/**\n * This class is used for a WBS (Work Breakdown Structure) field. These fields hold a {@link Gantt.data.Wbs}\n * object for their value.\n *\n * @extends Core/data/field/DataField\n * @inputfield\n */\nexport default class WbsField extends DataField {\n    static get type() {\n        return 'wbs';\n    }\n    convert(value) {\n        return Wbs.from(value);\n    }\n    serialize(value) {\n        // the wbsValue field is not persistent, so this is likely not going to be called... however, the user could\n        // flip that option so we implement this method in case that happens.\n        return String(value);\n    }\n}\nWbsField.prototype.compare = Wbs.compare;\nWbsField.initClass();\nWbsField._$name = 'WbsField';", "import DateHelper from '../../Core/helper/DateHelper.js';\nimport Duration from '../../Core/data/Duration.js';\nimport Store from '../../Core/data/Store.js';\nimport TimeSpan from '../../Scheduler/model/TimeSpan.js';\nimport DependencyBaseModel from '../../Scheduler/model/DependencyBaseModel.js';\nimport PercentDoneMixin from '../../SchedulerPro/model/mixin/PercentDoneMixin.js';\nimport { GanttEvent } from '../../Engine/quark/model/gantt/GanttEvent.js';\nimport PartOfProject from '../data/mixin/PartOfProject.js';\nimport Baseline from './Baseline.js';\nimport Wbs from '../../Core/data/Wbs.js';\nimport '../data/field/WbsField.js';\nimport EventSegmentModel from '../../SchedulerPro/model/EventSegmentModel.js';\n/**\n * @module Gantt/model/TaskModel\n */\nconst\n    // A utility function to populate a Task's baseline with the Task's default values\n    applyBaselineDefaults   = (task, baselines) => {\n        const {\n            startDate, durationUnit, endDate\n        } = task;\n        return baselines ? baselines.map(baseline => {\n            // Baseline has its own data if at least two of the following are defined.\n            // The remaining data, if incomplete, will be calculated in Baseline normalize() method\n            const\n                hasData = (+('startDate' in baseline) + ('endDate' in baseline) + ('duration' in baseline)) > 1,\n                data    = { task, ...baseline };\n            // Don't fill dates that are missing in loaded data\n            // https://github.com/bryntum/support/issues/4309\n            if (!hasData) {\n                Object.assign(data, { startDate, endDate, durationUnit });\n            }\n            return data;\n        }) : [];\n    },\n    descendingWbsSorter     = s => s.field === 'wbsValue' && !s.ascending,\n    isReversed              = children => {\n        for (let firstChildWbs, childWbs, i = 0, n = children.length; i < n; ++i) {\n            childWbs = children[i].wbsValue;\n            if (childWbs) {\n                if (firstChildWbs) {\n                    return childWbs < firstChildWbs;\n                }\n                firstChildWbs = childWbs;\n            }\n        }\n        return false;\n    },\n    // Refresh siblings in depth when it's not initial WBS calculation\n    refreshWbsOptions       = { deep : true },\n    // Record should not be considered modified by initial assignment of wbsValue\n    refreshWbsOnJoinOptions = { deep : true, silent : true };\n/**\n * Options for the `convertEmptyParentToLeaf` static property.\n * @typedef {Object} ConvertEmptyParentToLeafOptions\n * @property {Boolean} onLoad `true` to convert empty parent tasks to leaf tasks on load\n * @property {Boolean} onRemove `true` to convert parent tasks that become empty after removing a child to leaf tasks\n */\n/**\n * This class represents a task in your Gantt project. Extend it to add your own custom task fields and methods.\n *\n * ## Subclassing the TaskModel class\n * To subclass the TaskModel and add extra {@link Core.data.Model#property-fields-static} and API methods, please see\n * the snippet below.\n *\n *```javascript\n * class MyTaskModel extends TaskModel {\n *   static get fields() {\n *       return [\n *           { name: 'importantDate', type: 'date' }\n *       ]\n *   }\n *```\n *\n * After creating your own Task model class, configure the {@link Gantt.model.ProjectModel#config-taskModelClass} on\n * Project to use it:\n *\n *```javascript\n * new Gantt({\n *     project : {\n *         taskModelClass : MyTaskModel\n *     }\n * });\n *```\n *\n * ## Creating a new Task programmatically\n *\n * To create a new task programmatically, simply call the TaskModel constructor and pass in any field values.\n *\n * ```javascript\n * const newTask = new TaskModel({\n *     name          : 'My awesome task',\n *     importantDate : new Date(2022, 0, 1),\n *     percentDone   : 80 // So awesome it's almost done\n *     // ...\n * });\n * ```\n *\n * ## Async scheduling\n *\n * A record created from an {@link Gantt/model/TaskModel} is normally part of a {@link Gantt/data/TaskStore}, which in\n * turn is part of a {@link Gantt/model/ProjectModel project}.\n * When dates or the duration of a task is changed, the project performs async calculations of the other related fields\n * (including the field of other tasks affected by the change).\n * For example if {@link #field-duration} is changed, it will recalculate {@link #field-endDate}.\n *\n * As a result of this being an async operation, the values of other fields are not guaranteed to be up to date\n * immediately after a change. To ensure data is up to date, `await` the calculations to finish.\n *\n * For example, `endDate` is not up to date after this operation:\n *\n * ```javascript\n * taskRecord.duration = 5;\n * // taskRecord.endDate not yet calculated\n * ```\n *\n * But if calculations are awaited it is up to date:\n *\n * ```javascript\n * taskRecord.duration = 5;\n * await taskRecord.project.commitAsync();\n * // endDate is calculated\n * ```\n *\n * In case of multiple changes no need to trigger recalculation after each of them:\n *\n * ```javascript\n * // change taskRecord1 start and duration\n * taskRecord1.startDate = '2021-11-15';\n * taskRecord1.duration = 5;\n * // change taskRecord2 duration\n * taskRecord2.duration = 1;\n * // change taskRecord3 finish date\n * taskRecord3.endDate = '2021-11-17';\n *\n * // now when all changes are done trigger rescheduling\n * await taskRecord.project.commitAsync();\n * ```\n *\n * ## Manually vs automatically scheduled tasks\n *\n * A task can be either **automatically** (default) or **manually** scheduled. This is defined by the\n * {@link #field-manuallyScheduled} field. Manually scheduled tasks are not affected by the automatic scheduling\n * process, which means their start/end dates are meant to be changed by user manually. Such tasks are not shifted\n * by their predecessors nor such summary tasks rollup their children start/end dates.\n * While automatically scheduled tasks start/end dates are calculated by the Gantt.\n *\n * ## Start and end dates\n *\n * For all tasks, the end date is non-inclusive: {@link #field-startDate} <= date < {@link #field-endDate}.\n * Example: a task which starts at 2020/07/18 and has 2 days duration, should have the end date: 2020/07/20, **not**\n * 2018/07/19 23:59:59.\n * The start and end dates of tasks in are *points* on the time axis and if you specify that a task starts\n * 01/01/2020 and has 1 day duration, that means the start point is 01/01/2020 00:00 and end point is 02/01/2020 00:00.\n *\n * @mixes SchedulerPro/data/mixin/PartOfProject\n * @mixes SchedulerPro/model/mixin/PercentDoneMixin\n *\n * @extends Scheduler/model/TimeSpan\n */\nexport default class TaskModel extends GanttEvent.derive(TimeSpan).mixin(\n    PartOfProject,\n    PercentDoneMixin\n) {\n    //region Fields\n    /**\n     * This static configuration option allows you to control whether an empty parent task should be converted into a\n     * leaf. Enable/disable it for a whole class:\n     *\n     * ```javascript\n     * TaskModel.convertEmptyParentToLeaf = false;\n     * ```\n     *\n     * By specifying `true`, all empty parents will be considered leafs. Can also be assigned a configuration object\n     * with the following Boolean properties to customize the behaviour:\n     *\n     * * `onLoad` - Apply the transformation on load to any parents without children (`children : []`)\n     * * `onRemove` - Apply the transformation when all children have been removed from a parent\n     *\n     * ```javascript\n     * TaskModel.convertEmptyParentToLeaf = {\n     *     onLoad   : false,\n     *     onRemove : true\n     * }\n     * ```\n     *\n     * @member {Boolean|ConvertEmptyParentToLeafOptions} convertEmptyParentToLeaf\n     * @default true\n     * @static\n     * @category Parent & children\n     */\n    static get fields() {\n        return [\n            /**\n             * The scheduling direction of this event. The `Forward` direction corresponds to the as-soon-as-possible scheduling (ASAP),\n             * `Backward` - to as-late-as-possible (ALAP). The ASAP tasks \"sticks\" to the project's start date,\n             * and ALAP tasks - to the project's end date.\n             *\n             * If not specified (which is the default), direction is inherited from the parent task (and from the project for top-level tasks).\n             * By default, the project model has forward scheduling mode.\n             *\n             * **Note** The ALAP-scheduled task in the ASAP-scheduled project will turn all of its successors into ALAP-scheduled tasks,\n             * even if their scheduling direction is specified explicitly by the user as ASAP. We can say that ALAP-scheduling\n             * is propagated down through the successors chain. This propagation, however, will stop in the following cases:\n             * - If a successor is manually scheduled\n             * - If a successor has a \"Must start/finish on\" constraint\n             * - If a dependency to successor is inactive\n             *\n             * Similarly, the ASAP-scheduled task in the ALAP-scheduled project will turn all of its predecessors into ASAP-scheduled tasks\n             * (also regardless of the user-provided value).\n             *\n             * When such propagation is in action, the value of this field is ignored and the UI will disable controls for it.\n             *\n             * To determine the actual scheduling direction of the task (which might be different from the user-provided value),\n             * one can use the {@link Gantt/model/TaskModel#field-effectiveDirection} field.\n             *\n             * **Note** For the purposes of compatibility with MS Project and to ease the migration process for users,\n             * by default, scheduling direction can be set using the \"Constraint type\" field on the \"Advanced\"\n             * tab of the task editor. The forward scheduling is specified in it as \"As soon as possible\" option and backward -\n             * \"As late as possible\". One can also disable the {@link Gantt/model/ProjectModel#config-includeAsapAlapAsConstraints}\n             * config to render a separate \"Scheduling direction\" field.\n             *\n             * @field {'Forward'|'Backward'} direction\n             * @default null\n             * @category Common\n             */\n            /**\n             * @typedef {Object} EffectiveDirection\n             * @property {'own'|'enforced'|'inherited'} kind The type of the direction value.\n             * @property {'Forward'|'Backward'} direction The actual direction. Depending on the `kind` value, it might be\n             * a user-provided value (`own`), or value, enforced by the predecessor/successor (`enforced`), or value inherited\n             * from the parent task (or project).\n             * @property {Gantt.model.TaskModel} enforcedBy The task which forces the current direction\n             * @property {Gantt.model.TaskModel} inheritedFrom The task from which the current direction is inherited\n             */\n            /**\n             * The calculated effective scheduling direction of this event. See the {@link Gantt/model/TaskModel#field-direction} field for details.\n             *\n             * @field {EffectiveDirection} effectiveDirection\n             * @category Common\n             */\n            /**\n             * Unique identifier of task (mandatory)\n             * @field {String|Number} id\n             * @category Common\n             */\n            /**\n             * Name of the task\n             * @field {String} name\n             * @category Common\n             */\n            /**\n             * A set of resources assigned to this task\n             * @field {Set} assigned\n             * @readonly\n             * @category Common\n             */\n            /**\n             * This field is automatically set to `true` when the task is \"unscheduled\" - user has provided an empty\n             * string in one of the UI editors for start date, end date or duration. Such task is not rendered,\n             * and does not affect the schedule of its successors.\n             *\n             * To schedule the task back, enter one of the missing values, so that there's enough information\n             * to calculate start date, end date and duration.\n             *\n             * Note, that setting this field manually does nothing. This field should be persisted, but not updated\n             * manually.\n             *\n             * @field {Boolean} unscheduled\n             * @readonly\n             * @category Scheduling\n             */\n            /**\n             * Start date of the task in ISO 8601 format\n             *\n             * UI fields representing this data field are disabled for summary events\n             * except the {@link #field-manuallyScheduled manually scheduled} events.\n             * See {@link #function-isEditable} for details.\n             *\n             * Note that the field always returns a `Date`.\n             *\n             * @field {Date} startDate\n             * @accepts {String|Date}\n             * @category Scheduling\n             */\n            /**\n             * End date of the task in ISO 8601 format\n             *\n             * UI fields representing this data field are disabled for summary events\n             * except the {@link #field-manuallyScheduled manually scheduled} events.\n             * See {@link #function-isEditable} for details.\n             *\n             * Note that the field always returns a `Date`.\n             *\n             * @field {Date} endDate\n             * @accepts {String|Date}\n             * @category Scheduling\n             */\n            /**\n             * The numeric part of the task duration (the number of units).\n             *\n             * UI fields representing this data field are disabled for summary events\n             * except the {@link #field-manuallyScheduled manually scheduled} events.\n             * See {@link #function-isEditable} for details.\n             *\n             * @field {Number} duration\n             * @category Scheduling\n             */\n            /**\n             * Segments of the task that appear when the task gets {@link #function-splitToSegments}.\n             * @field {SchedulerPro.model.EventSegmentModel[]} segments\n             * @category Scheduling\n             */\n            /**\n             * An encapsulation of the CSS classes to be added to the rendered event element.\n             *\n             * Always returns a {@link Core.helper.util.DomClassList}, but may still be treated as a string. For\n             * granular control of adding and removing individual classes, it is recommended to use the\n             * {@link Core.helper.util.DomClassList} API.\n             *\n             * @field {Core.helper.util.DomClassList} cls\n             * @accepts {Core.helper.util.DomClassList|String} cls\n             * @category Styling\n             */\n            {\n                name      : 'cls',\n                serialize : value => value.isDomClassList ? value.toString() : value,\n                persist   : true\n            },\n            /**\n             * The current status of a task, expressed as the percentage completed (integer from 0 to 100)\n             *\n             * UI fields representing this data field are disabled for summary events.\n             * See {@link #function-isEditable} for details.\n             *\n             * @field {Number} percentDone\n             * @category Scheduling\n             */\n            /**\n             * The numeric part of the task effort (the number of units). The effort of the \"parent\" tasks will be automatically set to the sum\n             * of efforts of their \"child\" tasks\n             *\n             * UI fields representing this data field are disabled for summary events.\n             * See {@link #function-isEditable} for details.\n             *\n             * @field {Number} effort\n             * @category Scheduling\n             */\n            /**\n             * The unit part of the task duration, defaults to \"day\" (days). Valid values are:\n             *\n             * - \"millisecond\" - Milliseconds\n             * - \"second\" - Seconds\n             * - \"minute\" - Minutes\n             * - \"hour\" - Hours\n             * - \"day\" - Days\n             * - \"week\" - Weeks\n             * - \"month\" - Months\n             * - \"quarter\" - Quarters\n             * - \"year\"- Years\n             *\n             * This field is readonly after creation, to change it use the {@link #function-setDuration} call.\n             * @field {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} durationUnit\n             * @default \"day\"\n             * @category Scheduling\n             */\n            /**\n             * The unit part of the task's effort, defaults to \"h\" (hours). Valid values are:\n             *\n             * - \"millisecond\" - Milliseconds\n             * - \"second\" - Seconds\n             * - \"minute\" - Minutes\n             * - \"hour\" - Hours\n             * - \"day\" - Days\n             * - \"week\" - Weeks\n             * - \"month\" - Months\n             * - \"quarter\" - Quarters\n             * - \"year\"- Years\n             *\n             * This field is readonly after creation, to change it use the {@link #function-setEffort} call.\n             * @field {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} effortUnit\n             * @default \"hour\"\n             * @category Scheduling\n             */\n            { name : 'fullEffort', persist : false },\n            /**\n             * The effective calendar used by the task.\n             * Returns the task own {@link #field-calendar} if provided or the project {@link Gantt.model.ProjectModel#field-calendar calendar}.\n             *\n             * @field {Gantt.model.CalendarModel} effectiveCalendar\n             * @category Scheduling\n             * @calculated\n             * @readonly\n             */\n            /**\n             * The calendar, assigned to the task. Allows you to set the time when task can be performed.\n             *\n             * @field {Gantt.model.CalendarModel} calendar\n             * @category Scheduling\n             */\n            /**\n             * The getter will yield a {@link Core.data.Store} of {@link Gantt.model.Baseline}s.\n             *\n             * When constructing a task the baselines will be constructed from an array of\n             * {@link Gantt.model.Baseline} data objects.\n             *\n             * When serializing, it will yield an array of {@link Gantt.model.Baseline} data objects.\n             *\n             * @field {Core.data.Store} baselines\n             * @accepts {BaselineConfig[]}\n             * @category Features\n             */\n            { name : 'baselines', type : 'store', modelClass : Baseline, storeClass : Store, lazy : true },\n            /**\n             * A freetext note about the task.\n             * @field {String} note\n             * @category Common\n             */\n            { name : 'note', type : 'string' },\n            'parentId',\n            /**\n             * Field storing the task constraint alias or `null` if not constraint set.\n             * Valid values are:\n             * - \"finishnoearlierthan\"\n             * - \"finishnolaterthan\"\n             * - \"mustfinishon\"\n             * - \"muststarton\"\n             * - \"startnoearlierthan\"\n             * - \"startnolaterthan\"\n             *\n             * @field {'finishnoearlierthan'|'finishnolaterthan'|'mustfinishon'|'muststarton'|'startnoearlierthan'|'startnolaterthan'|null} constraintType\n             * @category Scheduling\n             */\n            /**\n             * Field defining the constraint boundary date or `null` if {@link #field-constraintType} is `null`.\n             * @field {String|Date|null} constraintDate\n             * @category Scheduling\n             */\n            /**\n             * When set to `true`, the {@link #field-startDate} of the task will not be changed by any of its incoming\n             * dependencies or constraints.\n             *\n             * @field {Boolean} manuallyScheduled\n             * @category Scheduling\n             */\n            /**\n             * When set to `true` the task becomes inactive and stops taking part in the project scheduling (doesn't\n             * affect linked tasks, rolls up its attributes and affect its assigned resources allocation).\n             *\n             * @field {Boolean} inactive\n             * @category Scheduling\n             */\n            /**\n             * Specifies how the task should treat the project border (the project start or end depending\n             * if it's scheduled forward or backwards respectively).\n             *\n             * The task can either respect the project border which for example means it cannot be placed\n             * before its forward scheduled project start.\n             * Or the task can ignore the project border and be scheduled regardless of that constraint.\n             *\n             * Possible values are:\n             * - `honor` - task respects the project border.\n             * - `ignore` - task ignores the project border.\n             * - `conflict` - the project triggers {@link Gantt/model/ProjectModel#event-schedulingConflict}\n             * event when the task attempts to violate its border. So if Gantt has\n             * {@link Gantt/view/Gantt#config-displaySchedulingIssueResolutionPopup} enabled it will display a popup\n             * asking user to choose an appropriate resolution. If the option is disabled the application can track\n             * the event and implement some other way to handle the conflict.\n             * @field {'honor'|'ignore'|'conflict'} projectConstraintResolution\n             * @default \"honor\"\n             * @category Scheduling\n             */\n            /**\n             * When set to `true` the calendars of the assigned resources\n             * are not taken into account when scheduling the task.\n             *\n             * By default the field value is `false` resulting in that the task performs only when\n             * its own {@link #field-calendar} and some of the assigned\n             * resource calendars allow that.\n             * @field {Boolean} ignoreResourceCalendar\n             * @category Scheduling\n             */\n            /**\n             * This field defines the scheduling mode for the task. Based on this field some fields of the task\n             * will be \"fixed\" (should be provided by the user) and some - computed.\n             *\n             * Possible values are:\n             *\n             * - `Normal` is the default (and backward compatible) mode. It means the task will be scheduled based on\n             * information about its start/end dates, task own calendar (project calendar if there's no one) and\n             * calendars of the assigned resources.\n             *\n             * - `FixedDuration` mode means, that task has fixed start and end dates, but its effort will be computed\n             * dynamically, based on the assigned resources information. Typical example of such task is - meeting.\n             * Meetings typically have pre-defined start and end dates and the more people are participating in the\n             * meeting, the more effort is spent on the task. When duration of such task increases, its effort is\n             * increased too (and vice-versa). Note: fixed start and end dates here doesn't mean that a user can't\n             * update them via GUI, the only field which won't be editable in GUI is the\n             * {@link #field-effort effort field}, it will be calculated according to duration and resources assigned to\n             * the task.\n             *\n             * - `FixedEffort` mode means, that task has fixed effort and computed duration. The more resources will be\n             * assigned to this task, the less the duration will be. The typical example will be a \"paint the walls\"\n             * task - several painters will complete it faster.\n             *\n             * - `FixedUnits` mode means, that the assignment level of all assigned resources will be kept as provided\n             * by the user, and either {@link #field-effort} or duration of the task is recalculated, based on the\n             * {@link #field-effortDriven} flag.\n             *\n             * @field {'Normal'|'FixedDuration'|'FixedEffort'|'FixedUnits'} schedulingMode\n             * @category Scheduling\n             */\n            /**\n             * This boolean flag defines what part of task data should be updated in the `FixedUnits` scheduling mode.\n             * If it is `true`, then {@link #field-effort} is kept intact, and duration is updated. If it is `false` -\n             * vice-versa.\n             *\n             * @field {Boolean} effortDriven\n             * @default false\n             * @category Scheduling\n             */\n            /**\n             * A calculated field storing the _early start date_ of the task.\n             * The _early start date_ is the earliest possible date the task can start.\n             * This value is calculated based on the earliest dates of the task predecessors and the task own\n             * constraints. If the task has no predecessors nor other constraints, its early start date matches the\n             * project start date.\n             *\n             * UI fields representing this data field are naturally disabled since the field is readonly.\n             * See {@link #function-isEditable} for details.\n             *\n             * @field {Date} earlyStartDate\n             * @calculated\n             * @readonly\n             * @category Scheduling\n             */\n            /**\n             * A calculated field storing the _early end date_ of the task.\n             * The _early end date_ is the earliest possible date the task can finish.\n             * This value is calculated based on the earliest dates of the task predecessors and the task own\n             * constraints. If the task has no predecessors nor other constraints, its early end date matches the\n             * project start date plus the task duration.\n             *\n             * UI fields representing this data field are naturally disabled since the field is readonly.\n             * See {@link #function-isEditable} for details.\n             *\n             * @field {Date} earlyEndDate\n             * @calculated\n             * @readonly\n             * @category Scheduling\n             */\n            /**\n             * A calculated field storing the _late start date_ of the task.\n             * The _late start date_ is the latest possible date the task can start.\n             * This value is calculated based on the latest dates of the task successors and the task own constraints.\n             * If the task has no successors nor other constraints, its late start date matches the project end date\n             * minus the task duration.\n             *\n             * UI fields representing this data field are naturally disabled since the field is readonly.\n             * See {@link #function-isEditable} for details.\n             *\n             * @field {Date} lateStartDate\n             * @calculated\n             * @readonly\n             * @category Scheduling\n             */\n            /**\n             * A calculated field storing the _late end date_ of the task.\n             * The _late end date_ is the latest possible date the task can finish.\n             * This value is calculated based on the latest dates of the task successors and the task own constraints.\n             * If the task has no successors nor other constraints, its late end date matches the project end date.\n             *\n             * UI fields representing this data field are naturally disabled since the field is readonly.\n             * See {@link #function-isEditable} for details.\n             *\n             * @field {Date} lateEndDate\n             * @calculated\n             * @readonly\n             * @category Scheduling\n             */\n            /**\n             * A calculated field storing the _total slack_ (or _total float_) of the task.\n             * The _total slack_ is the amount of working time the task can be delayed without causing a delay\n             * to the project end.\n             * The value is expressed in {@link #field-slackUnit} units.\n             *\n             * ```javascript\n             * // let output slack info to the console\n             * console.log(`The ${task.name} task can be delayed for ${task.totalSlack} ${slackUnit}s`)\n             * ```\n             *\n             * UI fields representing this data field are naturally disabled since the field is readonly.\n             * See {@link #function-isEditable} for details.\n             *\n             *\n             * @field {Number} totalSlack\n             * @calculated\n             * @readonly\n             * @category Scheduling\n             */\n            /**\n             * A calculated field storing unit for the {@link #field-totalSlack} value.\n             * @field {String} slackUnit\n             * @default \"day\"\n             * @category Scheduling\n             */\n            /**\n             * A calculated field indicating if the task is _critical_.\n             * A task considered _critical_ if its delaying causes the project delay.\n             * The field value is calculated based on {@link #field-totalSlack} field value.\n             *\n             * ```javascript\n             * if (task.critical) {\n             *     Toast.show(`The ${task.name} is critical!`);\n             * }\n             * ```\n             *\n             * @field {Boolean} critical\n             * @calculated\n             * @readonly\n             * @category Scheduling\n             */\n            // NOTE: These are not actually fields, they are never set during task lifespan and only used by crud manager\n            // to send changes to the backend\n            // Two fields which specify the relations between \"phantom\" tasks when they are\n            // being sent to the server to be created (e.g. when you create a new task containing a new child task).\n            // { name : 'phantomId', type : 'string' },\n            // { name : 'phantomParentId', type : 'string' },\n            /**\n             * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field\n             * for leaf tasks.\n             *\n             * Note, if the task store loads data from a remote origin, make sure {@link Core/data/AjaxStore#config-readUrl}\n             * is specified, and optionally {@link Core/data/AjaxStore#config-parentIdParamName} is set, otherwise\n             * {@link Core/data/Store#function-loadChildren} has to be implemented.\n             *\n             * @field {Gantt.model.TaskModel[]} children\n             * @accepts {Boolean|Object[]|Gantt.model.TaskModel[]}\n             * @category Parent & children\n             */\n            { name : 'children', persist : false },\n            /**\n             * Set this to true if this task should be shown in the Timeline widget\n             * @field {Boolean} showInTimeline\n             * @category Features\n             */\n            { name : 'showInTimeline', type : 'boolean' },\n            /**\n             * Set this to true to roll up a task to its closest parent\n             * @field {Boolean} rollup\n             * @category Features\n             */\n            { name : 'rollup', type : 'boolean' },\n            /**\n             * The {@link Gantt.data.Wbs WBS} for this task record. This field is automatically calculated and\n             * maintained by the store. This calculation can be refreshed by calling {@link #function-refreshWbs}.\n             *\n             * To get string representation of the WBS value (e.g. '2.1.3'), use {@link Gantt.data.Wbs#property-value}\n             * property.\n             *\n             * @readonly\n             * @field {Gantt.data.Wbs} wbsValue\n             * @accepts {Gantt.data.Wbs|String}\n             * @category Scheduling\n             */\n            { name : 'wbsValue', type : 'wbs', persist : false },\n            /**\n             * A deadline date for this task. Does not affect scheduling logic.\n             *\n             * Note that the field always returns a `Date`.\n             *\n             * @field {Date} deadlineDate\n             * @accepts {String|Date}\n             * @category Scheduling\n             */\n            { name : 'deadlineDate', type : 'date' },\n            // Override TreeNode parentIndex to make it persistable\n            { name : 'parentIndex', type : 'number', persist : true },\n            /**\n             * CSS class specifying an icon to apply to the task row\n             * @field {String} iconCls\n             * @category Styling\n             */\n            'iconCls',\n            /**\n             * CSS class specifying an icon to apply to the task bar\n             * @field {String} taskIconCls\n             * @category Styling\n             */\n            'taskIconCls',\n            /**\n             * Specify false to prevent the event from being dragged (if {@link Gantt/feature/TaskDrag} feature is used)\n             * @field {Boolean} draggable\n             * @default true\n             * @category Interaction\n             */\n            { name : 'draggable', type : 'boolean', persist : false, defaultValue : true },   // true or false\n            /**\n             * Specify false to prevent the task from being resized (if {@link Gantt/feature/TaskResize} feature is\n             * used). You can also specify 'start' or 'end' to only allow resizing in one direction\n             * @field {Boolean|String} resizable\n             * @default true\n             * @category Interaction\n             */\n            { name : 'resizable', persist : false, defaultValue : true },                  // true, false, 'start' or 'end'\n            /**\n             * Changes task's background color. Named colors are applied as a `b-sch-color-{color}` (for example\n             * `b-sch-color-red`) CSS class to the task's bar. Colors specified as hex, `rgb()` etc. are applied as\n             * `style.color` to the bar.\n             *\n             * If no color is specified, any color defined in Gantt's {@link Gantt/view/GanttBase#config-eventColor}\n             * config will apply instead.\n             *\n             * For available standard colors, see\n             * {@link Scheduler/model/mixin/EventModelMixin#typedef-EventColor}.\n             *\n             * Using named colors:\n             *\n             * ```javascript\n             * const gantt = new Gantt({\n             *     project {\n             *         tasksData : [\n             *             { id : 1, name : 'Important task', eventColor : 'red' }\n             *         ]\n             *     }\n             * });\n             * ```\n             *\n             * Will result in:\n             * ```html\n             * <div class=\"b-gantt-task-wrap b-sch-color-red\">\n             * ```\n             *\n             * Using non-named colors:\n             *\n             * ```javascript\n             * const gantt = new Gantt({\n             *     project {\n             *         tasksData : [\n             *             { id : 1, name : 'Important task', eventColor : '#ff0000' }\n             *         ]\n             *     }\n             * });\n             * ```\n             *\n             * Will result in:\n             *\n             * ```html\n             * <div class=\"b-gantt-task-wrap\" style=\"color: #ff0000\">\n             * ```\n             *\n             * @field {EventColor} eventColor\n             */\n            'eventColor'\n        ];\n    }\n    //endregion\n    //region Config\n    // Flag for storing the initial manuallyScheduled value during tree transform. To avoid deoptimizing\n    $manuallyScheduled = null;\n    //endregion\n    getDefaultSegmentModelClass() {\n        return EventSegmentModel;\n    }\n    endBatch() {\n        const { isPersistable : wasPersistable } = this;\n        super.endBatch(...arguments);\n        // If this event newly persistable, its assignments are eligible for syncing.\n        if (this.isPersistable && !wasPersistable) {\n            this.assignments.forEach(assignment => {\n                assignment.stores.forEach(s => {\n                    s.updateModifiedBagForRecord(assignment);\n                });\n            });\n        }\n    }\n    /**\n     * Returns all predecessor dependencies of this task\n     * @member {Gantt.model.DependencyModel[]} predecessors\n     * @readonly\n     */\n    /**\n     * Returns all successor dependencies of this task\n     * @member {Gantt.model.DependencyModel[]} successors\n     * @readonly\n     */\n    get isTask() {\n        return true;\n    }\n    get isTaskModel() {\n        return true;\n    }\n    // To pass as an event when using a Gantt project with Scheduler Pro\n    get isEvent() {\n        return true;\n    }\n    get wbsCode() {\n        return String(this.wbsValue);\n    }\n    set wbsCode(value) {\n        this.wbsValue = Wbs.from(value);\n    }\n    copy(...args) {\n        const copy = super.copy(...args);\n        // Clean wbs but do not mark as dirty\n        copy.setData('wbsValue', null);\n        return copy;\n    }\n    /**\n     * Propagates changes to the dependent tasks. For example:\n     *\n     * ```js\n     * // double a task duration\n     * task.duration *= 2;\n     * // call commitAsync() to do further recalculations caused by the duration change\n     * task.commitAsync().then(() => console.log('Schedule updated'));\n     * ```\n     *\n     * @method commitAsync\n     * @async\n     * @propagating\n     */\n    /**\n     * Either activates or deactivates the task depending on the passed value.\n     * Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method\n     * @name setInactive\n     * @param {Boolean} inactive `true` to deactivate the task, `false` to activate it.\n     * @async\n     * @propagating\n     */\n    /**\n     * Sets {@link #field-segments} field value.\n     *\n     * @method\n     * @name setSegments\n     * @param {SchedulerPro.model.EventSegmentModel[]} segments Array of segments or null to make the task not segmented.\n     * @returns {Promise}\n     * @propagating\n     */\n    /**\n     * Splits the task to segments.\n     * @method splitToSegments\n     * @param {Date} from The date to split this task at.\n     * @param {Number} [lag=1] Split duration.\n     * @param {String} [lagUnit] Split duration unit.\n     * @returns {Promise}\n     * @propagating\n     */\n    /**\n     * Merges the task segments.\n     * The method merges two provided task segments (and all the segment between them if any).\n     * @method mergeSegments\n     * @param {SchedulerPro.model.EventSegmentModel} [segment1] First segment to merge.\n     * @param {SchedulerPro.model.EventSegmentModel} [segment2] Second segment to merge.\n     * @returns {Promise}\n     * @propagating\n     */\n    /**\n     * Sets the task {@link #field-ignoreResourceCalendar} field value and triggers rescheduling.\n     *\n     * @method setIgnoreResourceCalendar\n     * @param {Boolean} ignore Provide `true` to ignore the calendars of the assigned resources\n     * when scheduling the task. If `false` the task performs only when\n     * its own {@link #field-calendar} and some of the assigned\n     * resource calendars allow that.\n     * @async\n     * @propagating\n     */\n    /**\n     * Returns the event {@link #field-ignoreResourceCalendar} field value.\n     *\n     * @method getIgnoreResourceCalendar\n     * @returns {Boolean} The event {@link #field-ignoreResourceCalendar} field value.\n     */\n    /**\n     * The event first segment or null if the event is not segmented.\n     * @member {SchedulerPro.model.EventSegmentModel} firstSegment\n     */\n    /**\n     * The event last segment or null if the event is not segmented.\n     * @member {SchedulerPro.model.EventSegmentModel} lastSegment\n     */\n    // Apply baseline defaults to records added to the baselines store\n    processBaselinesStoreData(data) {\n        return applyBaselineDefaults(this, data);\n    }\n    set baselines(baselines) {\n        this.set({ baselines });\n    }\n    // Tests expect baselines to initialize on first access, not when task is created\n    get baselines() {\n        const me = this;\n        // Baselines field is lazy, we are responsible for initializing it when needed. Which is now, on first access\n        if (!me.$initializedBaselines) {\n            const baselinesField = me.fieldMap.baselines;\n            baselinesField.init(me.data, me);\n            me.assignInitables();\n            me.$initializedBaselines = true;\n        }\n        return me.meta.baselinesStore;\n    }\n    get hasBaselines() {\n        const baselinesField = this.fieldMap.baselines;\n        return Boolean(this.baselines?.count ?? this.originalData[baselinesField.dataSource]);\n    }\n    /**\n     * Applies the start/end dates from the task to the corresponding baseline.\n     *\n     * ```javascript\n     * const task = new TaskModel({\n     *      name: 'New task',\n     *      startDate: '2019-01-14',\n     *      endDate: '2019-01-17',\n     *      duration: 3,\n     *      baselines: [\n     *          // Baseline version 1\n     *          {\n     *              startDate: '2019-01-13',\n     *              endDate: '2019-01-16'\n     *          },\n     *          // Baseline version 2\n     *          {\n     *              startDate: '2019-01-14',\n     *              endDate: '2019-01-17'\n     *          },\n     *          // Baseline version 3\n     *          {\n     *              startDate: '2019-01-15',\n     *              endDate: '2019-01-18'\n     *          }\n     *      ]\n     * });\n     *\n     * // Apply the task's start/end dates to the baseline version 3\n     * task.setBaseline(3);\n     * ```\n     * @param {Number} version The baseline version to update\n     */\n    setBaseline(version) {\n        if (version <= 0) {\n            return;\n        }\n        const\n            { baselines }    = this,\n            missingBaselines = version - baselines.count;\n        // Add missing baselines up to the passed version\n        if (missingBaselines > 0) {\n            baselines.add(applyBaselineDefaults(this, new Array(missingBaselines).fill({})));\n        }\n        else {\n            baselines.getAt(version - 1).set(applyBaselineDefaults(this, [{}])[0]);\n        }\n    }\n    get successors() {\n        return Array.from(this.outgoingDeps || []);\n    }\n    set successors(successors) {\n        this.replaceDependencies(successors, true);\n    }\n    setSuccessors(successors) {\n        return this.replaceDependencies(successors, true);\n    }\n    // Updates either predecessors or successors with a new array, updating existing dependency records and\n    // removing existing dependencies not part of current set\n    replaceDependencies(dependencyRecords, isSuccessors) {\n        const\n            me                  = this,\n            { dependencyStore } = me.project,\n            updated             = new Set(),\n            toAdd               = new Set(),\n            toRemove            = [],\n            currentSet          = isSuccessors ? me.outgoingDeps : me.incomingDeps,\n            depsArr             = Array.from(currentSet);\n        // cannot handle removing and adding the same records at the moment.\n        // We used to have here simple \"removing all current & adding provided\" approach\n        // Collect already existing instances and new ones\n        dependencyRecords.forEach(dependency => {\n            const existingDep = depsArr.find(isSuccessors ? dep => dep.toEvent === dependency.toEvent : dep => dep.fromEvent === dependency.fromEvent);\n            if (existingDep) {\n                updated.add(existingDep);\n                // Copy data using our own internal setters\n                existingDep.copyData(dependency);\n            }\n            else {\n                toAdd.add(dependency);\n            }\n        });\n        // Collect records that should be removed\n        currentSet.forEach(dependency => {\n            if (!updated.has(dependency)) {\n                toRemove.push(dependency);\n            }\n        });\n        // remove records\n        toRemove.forEach(dependency => dependencyStore.remove(dependency));\n        // add new records\n        toAdd.forEach(dependency => {\n            if (isSuccessors) {\n                dependency.fromEvent = me;\n            }\n            else {\n                dependency.toEvent = me;\n            }\n            dependencyStore.add(dependency);\n        });\n        return me.commitAsync();\n    }\n    get predecessors() {\n        return Array.from(this.incomingDeps || []);\n    }\n    set predecessors(predecessors) {\n        return this.replaceDependencies(predecessors, false);\n    }\n    setPredecessors(predecessors) {\n        return this.replaceDependencies(predecessors, false);\n    }\n    get assignments() {\n        return super.assignments;\n    }\n    set assignments(assignments) {\n        const\n            me                  = this,\n            { assignmentStore } = me.project,\n            toAdd               = [],\n            currentAssignments  = me.assignments,\n            removedAssignments  = currentAssignments.filter(current => !assignments?.find(newAss => newAss.resource === current.resource));\n        assignments.forEach(assignment => {\n            const currentAssignment = assignmentStore.getAssignmentForEventAndResource(this, assignment.resource);\n            if (currentAssignment) {\n                currentAssignment.copyData(assignment);\n            }\n            // New one\n            else {\n                assignment.remove();\n                toAdd.push(assignment);\n            }\n        });\n        assignmentStore.remove(removedAssignments);\n        assignmentStore.add(toAdd);\n    }\n    get assigned() {\n        const { project } = this;\n        // Figure assignments out before buckets are created  (if part of project)\n        if (project?.isDelayingCalculation) {\n            return project.assignmentStore.storage.findItem('event', this) ?? new Set();\n        }\n        return super.assigned;\n    }\n    set assigned(assigned) {\n        super.assigned = assigned;\n    }\n    //region Is\n    get isDraggable() {\n        return this.draggable;\n    }\n    get isResizable() {\n        return this.resizable && !this.milestone && this.isEditable('endDate');\n    }\n    // override `isMilestone` on TimeSpan model and make it to return the same value what `milestone` returns\n    get isMilestone() {\n        return this.milestone;\n    }\n    /**\n     * Defines if the given task field should be manually editable in UI.\n     * You can override this method to provide your own logic.\n     *\n     * By default, the method defines:\n     * - {@link #field-earlyStartDate}, {@link #field-earlyEndDate}, {@link #field-lateStartDate},\n     * {@link #field-lateEndDate}, {@link #field-totalSlack} as not editable;\n     * - {@link #field-effort}, {@link #property-fullEffort}, {@link #field-percentDone} as not editable for summary\n     *   tasks;\n     * - {@link #field-endDate}, {@link #field-duration} and {@link #field-fullDuration} fields\n     *   as not editable for summary tasks except the {@link #field-manuallyScheduled manually scheduled} ones.\n     *\n     * @param {String} fieldName Name of the field\n     * @returns {Boolean} Returns `true` if the field is editable, `false` if it is not and `undefined` if the task has\n     * no such field.\n     */\n    isEditable(fieldName) {\n        const me = this;\n        switch (fieldName) {\n            // r/o fields\n            case 'earlyStartDate':\n            case 'earlyEndDate':\n            case 'lateStartDate':\n            case 'lateEndDate':\n            case 'totalSlack':\n                return false;\n            // disable effort & percentDone editing for summary tasks\n            case 'effort' :\n            case 'fullEffort' :\n                return me.isLeaf;\n            case 'percentDone' :\n            case 'renderedPercentDone' :\n                return me.isLeaf || !me.project?.autoCalculatePercentDoneForParentTasks;\n            // end/duration is allowed to edit for leafs and manually scheduled summaries\n            case 'endDate' :\n            case 'duration' :\n            case 'fullDuration' :\n                return me.isLeaf || me.manuallyScheduled;\n        }\n        return super.isEditable(fieldName);\n    }\n    isFieldModified(fieldName) {\n        if (fieldName === 'fullEffort') {\n            return super.isFieldModified('effort') || super.isFieldModified('effortUnit');\n        }\n        return super.isFieldModified(fieldName);\n    }\n    //endregion\n    //region Milestone\n    get milestone() {\n        // a summary task may have zero duration due to working time periods mismatch w/ its children\n        // so we operate start and end date pair here\n        if (!this.isLeaf) {\n            const { startDate, endDate } = this;\n            if (startDate && endDate) {\n                return endDate.getTime() === startDate.getTime();\n            }\n        }\n        return this.duration === 0;\n    }\n    set milestone(value) {\n        value ? this.convertToMilestone() : this.convertToRegular();\n    }\n    async setMilestone(value) {\n        return value ? this.convertToMilestone() : this.convertToRegular();\n    }\n    /**\n     * Converts this task to a milestone (start date will match the end date).\n     * @propagating\n     */\n    async convertToMilestone() {\n        return this.setDuration(0, this.durationUnit, false);\n    }\n    /**\n     * Converts the milestone task to a regular task with a duration of 1 (keeping current {@link #field-durationUnit}).\n     * @propagating\n     */\n    async convertToRegular() {\n        if (this.milestone) {\n            return this.setDuration(1, this.durationUnit, false);\n        }\n    }\n    //endregion\n    //region Dependencies\n    /**\n     * Returns all dependencies of this task (both incoming and outgoing)\n     *\n     * @property {Gantt.model.DependencyModel[]}\n     */\n    get allDependencies() {\n        return this.dependencies;\n    }\n    get dependencies() {\n        // Don't crash when calculations are delayed to after refresh (?. since it might be used outside of project)\n        if (this.project?.isDelayingCalculation) {\n            return [];\n        }\n        return [...this.incomingDeps || [], ...this.outgoingDeps || []];\n    }\n    set dependencies(dependencies) {\n        const\n            me           = this,\n            predecessors = [],\n            successors   = [];\n        dependencies?.forEach(dependency => {\n            if (dependency.fromEvent === me || dependency.fromEvent === me.id) {\n                successors.push(dependency);\n            }\n            else if (dependency.toEvent === me || dependency.toEvent === me.id) {\n                predecessors.push(dependency);\n            }\n        });\n        me.setPredecessors(predecessors);\n        me.setSuccessors(successors);\n    }\n    /**\n     * Returns all predecessor tasks of a task\n     *\n     * @property {Gantt.model.TaskModel[]}\n     */\n    get predecessorTasks() {\n        return [...this.incomingDeps || []].map(dependency => dependency.fromEvent);\n    }\n    /**\n     * Returns all successor tasks of a task\n     *\n     * @readonly\n     * @property {Gantt.model.TaskModel[]}\n     */\n    get successorTasks() {\n        return [...this.outgoingDeps || []].map(dependency => dependency.toEvent);\n    }\n    //endregion\n    //region Calculated fields\n    /**\n     * Returns count of all sibling nodes (including their children).\n     * @property {Number}\n     */\n    get previousSiblingsTotalCount() {\n        let task  = this.previousSibling,\n            count = this.parentIndex;\n        while (task) {\n            count += task.descendantCount;\n            task = task.previousSibling;\n        }\n        return count;\n    }\n    /**\n     * Returns the sequential number of the task. A sequential number means the ordinal position of the task in the\n     * total dataset, regardless of its nesting level and collapse/expand state of any parent tasks. The root node has a\n     * sequential number equal to 0.\n     *\n     * For example, in the following tree data sample sequential numbers are specified in the comments:\n     * ```javascript\n     * root : {\n     *     children : [\n     *         {   // 1\n     *             leaf : true\n     *         },\n     *         {       // 2\n     *             children : [\n     *                 {   // 3\n     *                     children : [\n     *                         {   // 4\n     *                             leaf : true\n     *                         },\n     *                         {   // 5\n     *                             leaf : true\n     *                         }\n     *                     ]\n     *                 }]\n     *         },\n     *         {   // 6\n     *             leaf : true\n     *         }\n     *     ]\n     * }\n     * ```\n     * If we collapse parent tasks, sequential number of collapsed tasks won't change.\n     *\n     * @property {Number}\n     */\n    get sequenceNumber() {\n        // Shortcut when part of a store, much cheaper\n        if (this.taskStore) {\n            return this.taskStore.allIndexOf(this) + 1;\n        }\n        // More expensive calculation when not part of a store, to please tests\n        let code = 0,\n            task = this;\n        while (task.parent) {\n            code += task.previousSiblingsTotalCount + 1;\n            task = task.parent;\n        }\n        return code;\n    }\n    //endregion\n    //region Project related methods\n    get isSubProject() {\n        return false;\n    }\n    get subProject() {\n        const me = this;\n        let project = null;\n        if (me.isProject) {\n            project = me;\n        }\n        else {\n            me.bubbleWhile(t => {\n                if (t.isProject) {\n                    project = t;\n                }\n                return !project;\n            });\n        }\n        return project;\n    }\n    //endregion\n    /**\n     * Property which encapsulates the effort's magnitude and units.\n     *\n     *\n     * UI fields representing this property are disabled for summary events.\n     * See {@link #function-isEditable} for details.\n     *\n     * @property {Core.data.Duration}\n     */\n    get fullEffort() {\n        return new Duration({\n            unit      : this.effortUnit,\n            magnitude : this.effort\n        });\n    }\n    set fullEffort(effort) {\n        this.setEffort(effort.magnitude, effort.unit);\n    }\n    //region Scheduler Pro compatibility\n    /**\n     * Returns all resources assigned to an event.\n     *\n     * @property {Gantt.model.ResourceModel[]}\n     * @readonly\n     */\n    get resources() {\n        // Only include valid resources, to not have nulls in the result\n        return this.assignments.reduce((resources, assignment) => {\n            assignment.resource && resources.push(assignment.resource);\n            return resources;\n        }, []);\n    }\n    // Resources + any links to any of them\n    get $linkedResources() {\n        return this.resources?.flatMap(resourceRecord => ([\n            resourceRecord,\n            ...resourceRecord.$links\n        ])) ?? [];\n    }\n    //endregion\n    /**\n     * A `Set<Gantt.model.DependencyModel>` of the outgoing dependencies for this task\n     * @member {Set} outgoingDeps\n     * @readonly\n     */\n    /**\n     * A `Set<Gantt.model.DependencyModel>` of the incoming dependencies for this task\n     * @member {Set} incomingDeps\n     * @readonly\n     */\n    /**\n     * An array of the assignments, related to this task\n     * @member {Gantt.model.AssignmentModel[]} assignments\n     * @readonly\n     */\n    /**\n     * If given resource is assigned to this task, returns a {@link Gantt.model.AssignmentModel} record.\n     * Otherwise returns `null`\n     *\n     * @method getAssignmentFor\n     * @param {Gantt.model.ResourceModel} resource The instance of {@link Gantt.model.ResourceModel}\n     *\n     * @returns {Gantt.model.AssignmentModel|null}\n     */\n    /**\n     * This method assigns a resource to this task.\n     *\n     * Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method assign\n     * @param {Gantt.model.ResourceModel} resource The instance of {@link Gantt.model.ResourceModel}\n     * @param {Number} [units=100] The `units` field of the new assignment\n     *\n     * @async\n     * @propagating\n     */\n    /**\n     * This method unassigns a resource from this task.\n     *\n     * Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method unassign\n     * @param {Gantt.model.ResourceModel} resource The instance of {@link Gantt.model.ResourceModel}\n     * @async\n     * @propagating\n     */\n    /**\n     * Sets the calendar of the task. Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method setCalendar\n     * @param {Gantt.model.CalendarModel} calendar The new calendar. Provide `null` to return back to the project calendar.\n     * @async\n     * @propagating\n     */\n    /**\n     * Returns the task calendar.\n     *\n     * @method getCalendar\n     * @returns {Gantt.model.CalendarModel} The task calendar.\n     */\n    /**\n     * Sets the start date of the task. Will cause the schedule to be updated - returns a `Promise`\n     *\n     * Note, that the actually set start date may be adjusted, according to the calendar, by skipping the non-working time forward.\n     *\n     * @method setStartDate\n     * @param {Date} date The new start date.\n     * @param {Boolean} [keepDuration=true] Whether to keep the duration (and update the end date), while changing the start date, or vice-versa.\n     * @async\n     * @propagating\n     */\n    /**\n     * Sets the end date of the task. Will cause the schedule to be updated - returns a `Promise`\n     *\n     * Note, that the actually set end date may be adjusted, according to the calendar, by skipping the non-working time backward.\n     *\n     * @method setEndDate\n     * @param {Date} date The new end date.\n     * @param {Boolean} [keepDuration=false] Whether to keep the duration (and update the start date), while changing the end date, or vice-versa.\n     * @async\n     * @propagating\n     */\n    /**\n     * Updates the duration (and optionally unit) of the task. Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method setDuration\n     * @param {Number} duration New duration value\n     * @param {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} [unit] New duration\n     * unit\n     * @async\n     * @propagating\n     */\n    /**\n     * Updates the effort (and optionally unit) of the task. Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method setEffort\n     * @param {Number} effort New effort value\n     * @param {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} [unit] New effort\n     * unit\n     * @async\n     * @propagating\n     */\n    /**\n     * Sets the constraint type and (optionally) constraining date to the task.\n     *\n     * @method setConstraint\n     * @param {'finishnoearlierthan'|'finishnolaterthan'|'mustfinishon'|'muststarton'|'startnoearlierthan'|'startnolaterthan'|null} constraintType\n     * Constraint type, please refer to the {@link Gantt.model.TaskModel#field-constraintType} for the valid values.\n     * @param {Date}   [constraintDate] Constraint date.\n     * @async\n     * @propagating\n     */\n    //region Normalization\n    normalize() {\n        // Do nothing, normalization now happens as part of initial propagate and should use calendar anyway\n    }\n    inSetNormalize(field) {\n        // Do nothing, normalization now happens as part of initial propagate and should use calendar anyway\n    }\n    /**\n     * Not (yet) supported by the underlying scheduling engine\n     * @function setStartEndDate\n     * @hide\n     * @param {Date} start The new start date\n     * @param {Date} end The new end date\n     */\n    //endregion\n    joinStore(store) {\n        const\n            me             = this,\n            useOrderedTree = (me.firstStore || store).useOrderedTreeForWbs;\n        if (!me.wbsValue && !me.generatedParent) {\n            if ((me.taskStore || store).isLoadingData || !(me.nextSibling?.wbsValue || me.previousSibling?.wbsValue)) {\n                // If we are being loaded or have no siblings, then we can just process this node and its children.\n                me.refreshWbs({ useOrderedTree, ...refreshWbsOnJoinOptions });\n            }\n            else {\n                // Otherwise, we need to also refresh this node's siblings. Since we only come here if we have a\n                // sibling, we can be sure we also have a parent.\n                me.parent.refreshWbs(refreshWbsOptions, -1);\n            }\n        }\n        super.joinStore(store);\n    }\n    /**\n     * Refreshes the {@link #field-wbsValue} of this record and its children. This is rarely needed but may be required\n     * after a complex series of filtering, inserting, or removing nodes. In particular, removing nodes does create a\n     * gap in `wbsValue` values that may be undesirable.\n     * @param {Object} [options] A set of options for refreshing.\n     * @param {Boolean} [options.deep=true] Pass `false` to not update the `wbsValue` of this node's children.\n     * @param {Boolean} [options.silent=false] Pass `true` to update the `wbsValue` silently (no events). This is done\n     * at load time since this value represents the clean state. Passing `true` also has the effect of not marking the\n     * change as a dirty state on the record, in the case where `wbsValue` has been flagged as `persist: true`.\n     * @param {Boolean} [options.useOrderedTree=false] Pass `true` to use ordered tree to calculate WBS index.\n     * @param {Number} [index] The index of this node in its parent's children array. Pass -1 to ignore this node's\n     * `wbsValue` and only operate on children (if `options.deep`).\n     */\n    refreshWbs(options, index) {\n        const\n            me         = this,\n            { parent } = me,\n            taskStore  = me.firstStore || null,\n            {\n                useOrderedTree = taskStore?.useOrderedTreeForWbs ?? false,\n                refreshed\n            }          = options || {};\n        if (parent && index !== -1 && me.fieldMap.wbsValue) {\n            if (useOrderedTree) {\n                index = me.orderedParentIndex;\n            }\n            else {\n                index = index ?? me.unfilteredIndex ?? me.parentIndex;\n            }\n            index++;\n            const wbs = parent.isRoot ? new Wbs(index) : parent.wbsValue.append(index);\n            if (options?.silent) {\n                me.setData('wbsValue', wbs);\n            }\n            else {\n                // do not trigger `beforeUpdate` for performance optimization purposes,\n                // events assuming no one will want to cancel the update of the `wbs` field\n                me.set('wbsValue', wbs, false, false, false, false, false);\n            }\n        }\n        refreshed?.add(me);\n        if (options?.deep ?? true) {\n            if (useOrderedTree) {\n                for (const child of me.orderedChildren ?? []) {\n                    child.refreshWbs(options);\n                }\n            }\n            else {\n                const\n                    children = me.unfilteredChildren ?? me.children,\n                    n        = children?.length || 0;\n                if (n) {\n                    // The array may be reversed, and if it is, then the sorter has been applied and we need to reverse\n                    // the WBS assignment to match\n                    const reverse = isReversed(children) && taskStore?.sorters?.findIndex(descendingWbsSorter) === 0;\n                    for (let i = 0; i < n; ++i) {\n                        children[i].refreshWbs(options, reverse ? n - i - 1 : i);\n                    }\n                }\n            }\n        }\n    }\n    async tryInsertChild() {\n        return this.getProject().tryPropagateWithChanges(() => {\n            this.insertChild(...arguments);\n        });\n    }\n    updateDependencies(startDate, endDate) {\n        this.outgoingDeps.forEach(dep => {\n            // filter out wrong\n            if (dep.toEvent.isScheduled) {\n                const {\n                    type,\n                    calendar,\n                    toEvent\n                } = dep;\n                // Calculate lag value for the outgoing dependency to keep successor in place. Lag should be\n                // calculated for future start/end dates and should skip non-working time\n                if (startDate) {\n                    if (type === DependencyBaseModel.Type.StartToStart) {\n                        dep.setLag(DateHelper.as('hour', calendar.calculateDurationMs(startDate, toEvent.startDate, true)), 'hour');\n                    }\n                    else if (type === DependencyBaseModel.Type.StartToEnd) {\n                        dep.setLag(DateHelper.as('hour', calendar.calculateDurationMs(startDate, toEvent.endDate, true)), 'hour');\n                    }\n                }\n                if (endDate) {\n                    if (type === DependencyBaseModel.Type.EndToStart) {\n                        dep.setLag(DateHelper.as('hour', calendar.calculateDurationMs(endDate, toEvent.startDate, true)), 'hour');\n                    }\n                    else if (type === DependencyBaseModel.Type.EndToEnd) {\n                        dep.setLag(DateHelper.as('hour', calendar.calculateDurationMs(endDate, toEvent.endDate, true)), 'hour');\n                    }\n                }\n            }\n        });\n    }\n    async moveTaskPinningSuccessors(date) {\n        const me = this;\n        // set start date, this will put new values to the engine and would allow to recalculate dates before\n        // project is committed\n        me.startDate = date;\n        // Go up the tree processing outgoing dependencies for this task and all its parents\n        me.bubble(node => {\n            if (!node.isRoot) {\n                const\n                    // Peek new start/end dates\n                    startDate = node.run('calculateStartDate'),\n                    endDate   = node.run('calculateEndDate');\n                node.updateDependencies(startDate, endDate);\n            }\n        });\n        return me.project.commitAsync();\n    }\n    async setStartDatePinningSuccessors(date) {\n        const\n            me      = this,\n            promise = me.setStartDate(date, false);\n        // Go up the tree processing outgoing dependencies for this task and all its parents\n        me.bubble(node => {\n            if (!node.isRoot) {\n                // Peek new end date\n                const startDate = node.run('calculateStartDate');\n                node.updateDependencies(startDate, null);\n            }\n        });\n        return promise;\n    }\n    async setEndDatePinningSuccessors(date) {\n        const me = this;\n        me.endDate = date;\n        // Go up the tree processing outgoing dependencies for this task and all its parents\n        me.bubble(node => {\n            if (!node.isRoot) {\n                // Peek new end date\n                const endDate = node.run('calculateEndDate');\n                node.updateDependencies(null, endDate);\n            }\n        });\n        return me.project.commitAsync();\n    }\n    getCurrentConfig(options) {\n        const\n            { segments } = this,\n            result       = super.getCurrentConfig(options);\n        // include segments\n        if (result && segments) {\n            result.segments = segments.map(segment => segment.getCurrentConfig(options));\n        }\n        return result;\n    }\n}\nTaskModel.convertEmptyParentToLeaf = true;\n// TaskModel.$meta.fields.map.wbsCode.defineAccessor(TaskModel.prototype, /* force = */true);\nTaskModel._$name = 'TaskModel';", "import AjaxStore from '../../Core/data/AjaxStore.js';\nimport TaskModel from '../model/TaskModel.js';\nimport { ChronoEventTreeStoreMixin } from '../../Engine/quark/store/ChronoEventStoreMixin.js';\nimport PartOfProject from './mixin/PartOfProject.js';\nimport GetEventsMixin from '../../Scheduler/data/mixin/GetEventsMixin.js'; // To allow using TaskStore in Pro & Calendar\nimport DayIndexMixin from '../../Scheduler/data/mixin/DayIndexMixin.js'; // To allow using TaskStore in Calendar\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport Wbs from '../../Core/data/Wbs.js';\n/**\n * @module Gantt/data/TaskStore\n */\nconst\n    refreshWbsForChildrenOptions = { deep : true },\n    wbsAuto                      = Object.freeze({\n        add    : true,\n        remove : true,\n        sort   : true\n    }),\n    wbsManual                    = Object.freeze({\n        add    : false,\n        remove : false,\n        sort   : false\n    }),\n    sortByWbs = (lhs, rhs) => Wbs.compare(lhs?.wbsCode, rhs?.wbsCode);\n/**\n * An object that describes the actions that should trigger a {@link Gantt.model.TaskModel#function-refreshWbs} to\n * update WBS values. Objects of this type are passed to {@link #config-wbsMode} when the simpler\n * values of `'auto'` or (the default) `'manual'` are not desired.\n *\n * The value `'auto'` is equivalent to all properties of this object being `true`.\n * The value `'manual'` is equivalent to all properties of this object being `false`.\n *\n * @typedef WbsMode\n * @property {Boolean} [add] Set this property to `true` to refresh WBS values when nodes are added.\n * @property {Boolean} [remove] Set this property to `true` to refresh WBS values when nodes are removed.\n * @property {Boolean} [sort] Set this property to `true` to refresh WBS values when nodes are sorted.\n */\n/**\n * A class representing the tree of tasks in the Gantt project. An individual task is represented as an instance of the\n * {@link Gantt.model.TaskModel} class. The store expects the data loaded to be hierarchical. Each parent node should\n * contain its children in a property called 'children'.\n *\n * ```javascript\n * const taskStore = new TaskStore({\n *     data : [\n *         {\n *             \"id\"           : 1000,\n *             \"name\"         : \"Cool project\",\n *             \"percentDone\"  : 50,\n *             \"startDate\"    : \"2019-01-02\",\n *             \"expanded\"     : true,\n *             \"children\"     : [\n *                 {\n *                     \"id\"           : 1,\n *                     \"name\"         : \"A leaf node\",\n *                     \"startDate\"    : \"2019-01-02\",\n *                     \"percentDone\"  : 50,\n *                     \"duration\"     : 10,\n *                 }\n *             ]\n *         }\n *     ]\n * });\n * ```\n *\n * @mixes Scheduler/data/mixin/GetEventsMixin\n * @extends Core/data/AjaxStore\n */\nexport default class TaskStore extends ChronoEventTreeStoreMixin.derive(AjaxStore).mixin(\n    PartOfProject,\n    DayIndexMixin,\n    GetEventsMixin\n) {\n    static $name = 'TaskStore';\n    static get defaultConfig() {\n        return {\n            modelClass : TaskModel,\n            /**\n             * CrudManager must load stores in the correct order. Lowest first.\n             * @config {Number}\n             * @private\n             */\n            loadPriority : 200,\n            /**\n             * CrudManager must sync stores in the correct order. Lowest first.\n             * @config {Number}\n             * @private\n             */\n            syncPriority : 300,\n            storeId : 'tasks',\n            tree : true\n        };\n    }\n    static get configurable() {\n        return {\n            /**\n             * Set to `'auto'` to automatically update {@link Gantt.model.TaskModel#field-wbsValue} as records in the\n             * store are manipulated (e.g., when the user performs drag-and-drop reordering).\n             *\n             * In manual mode, the WBS value is initialized as the store loads and only altered implicitly by the\n             * {@link #function-indent} and {@link #function-outdent} methods. The WBS values are otherwise updated only\n             * by an explicit call to {@link Gantt.model.TaskModel#function-refreshWbs}.\n             *\n             * This can also be a {@link #typedef-WbsMode} object that indicates what operations\n             * should automatically {@link Gantt.model.TaskModel#function-refreshWbs refresh} WBS values.\n             *\n             * The operations that trigger WBS refresh can be enabled explicitly in this object, for example:\n             *\n             * ```javascript\n             *  wbsMode : {\n             *      add : true,\n             *      remove : true\n             *  }\n             * ```\n             * The above is an opt-in list that enable auto WBS refresh for node add and remove operations (these two\n             * operations are associated with dragging to reorder items). No other operation will trigger WBS refresh.\n             * At present, this leaves out only the `sort` operation, but if new auto-refreshing operations were added\n             * in future releases, those would also not be included.\n             *\n             * Alternatively, this object can be an opt-out specification if all values are falsy:\n             *\n             * ```javascript\n             *  wbsMode : {\n             *      sort : false\n             *  }\n             * ```\n             * The above two examples are (currently) equivalent in outcome. The choice between opt-in or opt-out form\n             * is a matter of convenience as well as future-proofing preference.\n             *\n             * The value `'auto'` is equivalent to all properties being `true`.\n             * The value `'manual'` (the default) is equivalent to all properties being `false`.\n             * @config {String|WbsMode}\n             */\n            wbsMode : 'manual',\n            /**\n             * Specifies which tree to use to calculate WBS. Ordered tree is unsortable and unfilterable, it\n             * always holds complete tree hierarchy. By default, it uses sortable and filterable tree.\n             * @config {Boolean}\n             * @default\n             */\n            useOrderedTreeForWbs : false,\n            /**\n             * Controls behavior of the outdent logic regarding siblings. By default, outdent will move child to be\n             * its parent's sibling and will move all previous siblings to the outdented node's children. Visually, node\n             * will remain in place just changing the level. When set to `true` only node with its subtree will be\n             * outdented, siblings will not change parent. Visually, node will be moved as last child of the new parent.\n             * @config {Boolean}\n             * @default\n             */\n            outdentIgnoringSiblings : false,\n            /**\n             * Always return changes in increasing WBS order.\n             * @config {Boolean}\n             * @default\n             */\n            forceWbsOrderForChanges : false\n        };\n    }\n    changeWbsMode(value) {\n        if (value === 'auto') {\n            return wbsAuto;\n        }\n        if (value && typeof value === 'object') {\n            if (ObjectHelper.values(value).every(v => !v)) {   // if (an opt-out list)\n                value = ObjectHelper.assign({}, wbsAuto, value);\n            }\n            return value;\n        }\n        return wbsManual;\n    }\n    /**\n     * For each task in this TaskStore, sets the data in the passed baseline index to the current state of the task.\n     * @param {Number} index The index in the baselines list of the baseline to update.\n     */\n    setBaseline(index) {\n        const data = this.storage.values;\n        this.forEach(task => task.setBaseline(index));\n        this.trigger('refresh', {\n            action  : 'batch',\n            records : data,\n            data\n        });\n    }\n    /**\n     * Increase the indentation level of one or more tasks in the tree\n     * @param {Gantt.model.TaskModel|Gantt.model.TaskModel[]} nodes The nodes to indent.\n     * @returns {Promise} A promise which yields the result of the operation\n     * @fires indent\n     * @fires change\n     */\n    async indent(nodes) {\n        const\n            me                     = this,\n            { taskStore, project } = me;\n        let result = false;\n        nodes = Array.isArray(nodes) ? nodes.slice() : [nodes];\n        // 1. Filter out project nodes\n        nodes = nodes.filter(node => !node.isProjectModel);\n        // 2. Filtering out all nodes which parents are also to be indented as well as the ones having no previous\n        //    sibling since such nodes can't be indented\n        nodes = nodes.filter(node => {\n            let result;\n            result = Boolean(node.previousSibling);\n            while (result && !node.isRoot) {\n                result = !nodes.includes(node.parent);\n                node   = node.parent;\n            }\n            return result;\n        });\n        /**\n         * Fired before tasks in the tree are indented. Return `false` from a listener to prevent the indent.\n         * @event beforeIndent\n         * @preventable\n         * @param {Gantt.data.TaskStore} source The task store\n         * @param {Gantt.model.TaskModel[]} records Tasks to be indented\n         */\n        if (nodes.length && taskStore.trigger('beforeIndent', { records : nodes }) !== false) {\n            // 3. Sorting nodes into tree walk order (visible order)\n            nodes.sort((lhs, rhs) => Math.max(0, me.indexOf(lhs)) - Math.max(0, me.indexOf(rhs)));\n            // No events should go to the UI until we have finished the operation successfully\n            taskStore.beginBatch();\n            // Ask the project to try the indent operation\n            result = await project.tryPropagateWithChanges(() => {\n                for (const node of nodes) {\n                    const newParent = node.previousSibling;\n                    newParent.appendChild(node);\n                    me.toggleCollapse(newParent, false);\n                }\n            });\n            if (me.isDestroyed) {\n                return;\n            }\n            // Now show the successful result\n            taskStore.endBatch();\n            if (result) {\n                me.refreshWbsForChildren({\n                    up : 2,  // the nodes are now deeper but that move affects their grandparent node's WBS\n                    nodes\n                });\n                /**\n                 * Fired after tasks in the tree are indented\n                 * @event indent\n                 * @param {Gantt.data.TaskStore} source The task store\n                 * @param {Gantt.model.TaskModel[]} records Tasks that were indented\n                 */\n                me.trigger('indent', { records : nodes });\n                me.trigger('change', {\n                    action  : 'indent',\n                    records : nodes\n                });\n            }\n        }\n        return result;\n    }\n    /**\n     * Decrease the indentation level of one or more tasks in the tree\n     * @param {Gantt.model.TaskModel|Gantt.model.TaskModel[]} nodes The nodes to outdent.\n     * @returns {Promise} A promise which yields the result of the operation\n     * @fires outdent\n     * @fires change\n     */\n    async outdent(nodes) {\n        const\n            me                     = this,\n            { taskStore, project } = me;\n        let result = false;\n        nodes = Array.isArray(nodes) ? nodes.slice() : [nodes];\n        // 1. Filter out project nodes\n        nodes = nodes.filter(node => !node.isProjectModel);\n        // 2. Filtering out all nodes which parents are also to be outdented as well as the ones having no previous sibling\n        //    since such nodes can't be indented\n        nodes = nodes.filter(node => {\n            let result;\n            result = node.parent && !node.parent.isRoot;\n            while (result && !node.isRoot) {\n                result = !nodes.includes(node.parent);\n                node   = node.parent;\n            }\n            return result;\n        });\n        /**\n         * Fired before tasks in the tree are outdented. Return `false` from a listener to prevent the outdent.\n         * @event beforeOutdent\n         * @preventable\n         * @param {Gantt.data.TaskStore} source The task store\n         * @param {Gantt.model.TaskModel[]} records Tasks to be outdented\n         */\n        if (nodes.length && taskStore.trigger('beforeOutdent', { records : nodes }) !== false) {\n            // 3. Process nodes in reverse tree walk (WBS) order\n            nodes.sort((lhs, rhs) => Wbs.compare(rhs.wbsCode, lhs.wbsCode));\n            // No events should go to the UI until we have finished the operation successfully\n            taskStore.beginBatch();\n            result = await project.tryPropagateWithChanges(() => {\n                for (const node of nodes) {\n                    const newChildren = !this.outdentIgnoringSiblings && node.parent.children.slice(node.parent.children.indexOf(node) + 1);\n                    node.parent.parent.insertChild(node, node.parent.nextSibling, false, {\n                        orderedBeforeNode : node.parent.nextOrderedSibling\n                    });\n                    // https://github.com/bryntum/support/issues/5721\n                    // it seems appending empty array is recorded by stm but can not be correctly restored\n                    // should be fixed in stm of course, but just avoiding this call (as its a no-op anyway)\n                    // is much simpler fix\n                    newChildren.length && node.appendChild(newChildren);\n                    me.toggleCollapse(node, false);\n                }\n            });\n            if (me.isDestroyed) {\n                return;\n            }\n            taskStore.endBatch();\n            if (result) {\n                me.refreshWbsForChildren({\n                    up : 1,  // only need to update the (new) parent\n                    nodes\n                });\n                /**\n                 * Fired after tasks in the tree are outdented\n                 * @event outdent\n                 * @param {Gantt.data.TaskStore} source The task store\n                 * @param {Gantt.model.TaskModel[]} records Tasks that were outdented\n                 */\n                me.trigger('outdent', { records : nodes });\n                me.trigger('change', {\n                    action  : 'outdent',\n                    records : nodes\n                });\n            }\n        }\n        return result;\n    }\n    onNodeAddChild(parent, children, index, isMove, silent = false) {\n        super.onNodeAddChild(parent, children, index, isMove, silent);\n        if (!this.isLoadingData && this.wbsMode.add) {\n            parent.refreshWbs(refreshWbsForChildrenOptions);\n            // Trigger refresh of old & new parent children for moved nodes, if needed\n            const wbsRefreshed = new Set();\n            children.forEach(child => {\n                const oldParent = this.getById(child.meta.oldParentId);\n                if (oldParent && parent !== oldParent && !wbsRefreshed.has(oldParent)) {\n                    wbsRefreshed.add(oldParent);\n                    oldParent.refreshWbs(refreshWbsForChildrenOptions, -1);\n                }\n            });\n        }\n    }\n    onNodeRemoveChild(parent, children, index, flags = { isMove : false, silent : false, unfiltered : false }) {\n        const result = super.onNodeRemoveChild(parent, children, index, flags);\n        if (this.wbsMode.remove && !flags.isMove) {\n            parent.refreshWbs(refreshWbsForChildrenOptions);\n        }\n        return result;\n    }\n    // Preserve outdented nodes' position among new siblings when unsorted (#7135)\n    // Requires forceWbsOrderInChanges=true\n    // NOTE: This code is trying to solve a subset of the problem of keeping visual trees consistent among\n    // different projects. However, since we do not have enough information to tell outdent and cut/paste/move apart,\n    // we erroneously apply same solution to those problems too corrupting WBS (#7311).\n    // When working on a general solution of that problem we need to make sure we keep the tests ensuring behavior and\n    // remove this code which will likely interfere with any solution.\n    applyChangeset(changes, transformFn = null, ...rest) {\n        const\n            me                    = this,\n            { updated, modified } = transformFn?.(changes, me) ?? changes,\n            altered               = updated ?? modified ?? [];\n        // For nodes whose parent ID is changing to their grandparent, remember the original node above and\n        // later, reorder to keep it that way (below)\n        const outdented = (me.forceWbsOrderForChanges && me.tree && !me.isSorted && !me.isGrouped)\n            ? altered.reduce((outdented, { id, parentId }) => {\n                if (parentId !== undefined) {\n                    const\n                        node = me.getById(id),\n                        currentGrandparentId = node?.parent?.parentId;\n                    if (parentId === currentGrandparentId) {\n                        outdented.push({\n                            node,\n                            originalNodeAbove : node.previousSibling ?? node.parent\n                        });\n                    }\n                }\n                return outdented;\n            }, [])\n            : [];\n        const log = super.applyChangeset(changes, transformFn, ...rest);\n        if (outdented.length > 0) {\n            // Restore position of outdented nodes, requires forceWbsOrderInChanges=true (#7135)\n            for (const { node, originalNodeAbove } of outdented) {\n                const\n                    { parent } = node,\n                    nodeAboveIndex = originalNodeAbove.parent === parent ? originalNodeAbove.parentIndex\n                        : (originalNodeAbove.parent?.parent === parent ? originalNodeAbove.parent.parentIndex : undefined);\n                if (nodeAboveIndex !== undefined && parent.children.includes(node)) {\n                    // When moving nodes to their final place ignore ordered tree - ordered tree is already correct\n                    parent.insertChild(node, nodeAboveIndex + 1, false, { orderedParentIndex : { skip : true } });\n                }\n            }\n        }\n        return log;\n    }\n    afterChangesetApplied(modifiedParents) {\n        super.afterChangesetApplied(modifiedParents);\n        const\n            modifiedParentsByDepth = modifiedParents.slice().sort((a, b) => a.childLevel - b.childLevel),\n            refreshed = new Set();\n        modifiedParentsByDepth.forEach(record => {\n            if (!refreshed.has(record)) {\n                // check if it works w/o `useOrderedTree : true`\n                record.refreshWbs({ deep : true, /*useOrderedTree : true,*/ refreshed });\n            }\n        });\n    }\n    afterPerformSort(silent) {\n        if (this.wbsMode.sort) {\n            this.rootNode.refreshWbs(refreshWbsForChildrenOptions);\n        }\n        super.afterPerformSort(silent);\n    }\n    /**\n     * This method updates the WBS values due to changes in the indentation of a given set of child nodes.\n     * @param {Object} options An object containing options in addition to a `nodes` property with the children.\n     * @param {Gantt.model.TaskModel[]} options.nodes The array of child record to refresh. This is required.\n     * @param {Boolean} [options.silent=false] Pass `true` to update the `wbsValue` silently (no events).\n     * @param {Number} [options.up=1] The number of ancestors to ascend when determining the parent(s) to refresh.\n     * By default, this value is 1 which indicates the immediate parent of the supplied nodes. This is suitable for\n     * outdenting. For indenting, this value should be 2. This is because the previous parent node (now grandparent\n     * node) needs to be refreshed, not merely the new parent.\n     * @private\n     */\n    refreshWbsForChildren(options) {\n        const\n            nodes   = options.nodes,\n            opts    = { ...refreshWbsForChildrenOptions, ...options },\n            parents = new Set(),\n            up      = opts.up || 0;\n        let n, parent;\n        nodes.forEach(node => {\n            for (parent = node, n = up; parent && n; --n) {\n                parent = parent.parent;\n            }\n            parents.add(parent);\n        });\n        for (parent of parents) {\n            parent.refreshWbs(opts);\n        }\n    }\n    getTotalTimeSpan() {\n        return {\n            startDate : this.getProject().startDate,\n            endDate   : this.getProject().endDate\n        };\n    }\n    getEventsForResource(resourceId) {\n        const\n            resource    = this.resourceStore.getById(resourceId),\n            assignments = resource?.assignments.filter(assignment => assignment.isPartOfStore(this.assignmentStore)) || [],\n            events      = [];\n        assignments.forEach(({ event }) => event && events.push(event));\n        return events;\n    }\n    /**\n     * Checks if a date range is allocated or not for a given resource.\n     * @param {Date} start The start date\n     * @param {Date} end The end date\n     * @param {Scheduler.model.EventModel|null} excludeEvent An event to exclude from the check (or null)\n     * @param {Scheduler.model.ResourceModel} resource The resource\n     * @returns {Boolean} True if the timespan is available for the resource\n     * @category Resource\n     */\n    isDateRangeAvailable(start, end, excludeEvent, resource) {\n        // NOTE: Also exists in EventStoreMixin.js\n        // This should be a collection of unique event records\n        const allEvents = new Set(this.getEventsForResource(resource));\n        // In private mode we can pass an AssignmentModel. In this case, we assume that multi-assignment is used.\n        // So we need to make sure that other resources are available for this time too.\n        // No matter if the event retrieved from the assignment belongs to the target resource or not.\n        // We gather all events from the resources the event is assigned to except of the one from the assignment record.\n        // Note, events from the target resource are added above.\n        if (excludeEvent?.isAssignment) {\n            const\n                currentEvent = excludeEvent.event,\n                resources    = currentEvent.resources;\n            resources.forEach(resource => {\n                // Ignore events for the resource which is passed as an AssignmentModel to excludeEvent\n                if (resource.id !== excludeEvent.resourceId) {\n                    this.getEventsForResource(resource).forEach(event => allEvents.add(event));\n                }\n            });\n        }\n        if (excludeEvent) {\n            const eventToRemove = excludeEvent.isAssignment ? excludeEvent.event : excludeEvent;\n            allEvents.delete(eventToRemove);\n        }\n        return !Array.from(allEvents).some(event => event.isScheduled && DateHelper.intersectSpans(start, end, event.startDate, event.endDate));\n    }\n    linkTasks(tasks) {\n        for (let i = 1; i < tasks.length; i++) {\n            const\n                from = tasks[i - 1],\n                to   = tasks[i];\n            if (!this.dependencyStore.getEventsLinkingDependency(from, to)) {\n                this.dependencyStore.add({ from, to });\n            }\n        }\n    }\n    unlinkTasks(tasks) {\n        this.dependencyStore.remove(this.dependencyStore.query(({ fromTask, toTask }) => tasks.includes(fromTask) || tasks.includes(toTask)));\n    }\n    /**\n     * Enforce `forceWbsOrderForChanges` if set.\n     * @private\n     */\n    get changes() {\n        const changes = super.changes;\n        if (changes && this.forceWbsOrderForChanges) {\n            changes.added.sort(sortByWbs);\n            changes.modified.sort(sortByWbs);\n            changes.removed.sort(sortByWbs);\n        }\n        return changes;\n    }\n}\nTaskStore._$name = 'TaskStore';", "import TooltipBase from '../../Scheduler/feature/base/TooltipBase.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\n/**\n * @module Gantt/feature/Baselines\n */\nconst baselineSelector = '.b-task-baseline';\n/**\n * Displays a {@link Gantt.model.TaskModel task}'s {@link Gantt.model.TaskModel#field-baselines} below the tasks in the\n * timeline.\n *\n * {@inlineexample Gantt/feature/Baselines.js}\n *\n * This feature also optionally shows a tooltip when hovering any of the task's baseline elements. The\n * tooltip's content may be customized.\n *\n * <div class=\"note\">If dates (startDate and endDate) are left out in the baseline data, the task's dates will be\n * applied. If dates are `null`, they will be kept empty and the baseline bar won't be displayed in the UI.</div>\n *\n * To customize the look of baselines, you can supply `cls` or `style\u00B4 in the baseline data.\n *\n * This feature is **disabled** by default.\n * For info on enabling it, see {@link Grid.view.mixin.GridFeatures}.\n *\n * @extends Scheduler/feature/base/TooltipBase\n * @demo Gantt/baselines\n * @classtype baselines\n * @feature\n */\nexport default class Baselines extends TooltipBase {\n    //region Config\n    static get $name() {\n        return 'Baselines';\n    }\n    // Default configuration.\n    static get defaultConfig() {\n        return {\n            cls         : 'b-gantt-task-tooltip',\n            align       : 't-b',\n            forSelector : baselineSelector,\n            recordType  : 'baseline'\n        };\n    }\n    static configurable = {\n        /**\n         * An empty function by default, but provided so that you can override it. This function is called each time\n         * a task baseline is rendered into the gantt to render the contents of the baseline element.\n         *\n         * Returning a string will display it in the baseline bar, it accepts both plain text or HTML. It is also\n         * possible to return a DOM config object which will be synced to the baseline bars content.\n         *\n         * ```javascript\n         * // using plain string\n         * new Gantt({\n         *     features : {\n         *         baselines : {\n         *             renderer : ({ baselineRecord }) => baselineRecord.startDate\n         *         }\n         *     }\n         * });\n         *\n         * // using DOM config\n         * new Gantt({\n         *     features : {\n         *         baselines : {\n         *             renderer : ({ baselineRecord }) => {\n         *                 return {\n         *                     tag : 'b',\n         *                     html : baselineRecord.startDate\n         *                 };\n         *             }\n         *         }\n         *     }\n         * });\n         * ```\n         *\n         * @param {Object} detail An object containing the information needed to render a Baseline.\n         * @param {Gantt.model.TaskModel} detail.taskRecord The task record.\n         * @param {Gantt.model.Baseline} detail.baselineRecord The baseline record.\n         * @param {DomConfig} detail.renderData An object containing details about the baseline element.\n         * @returns {DomConfig|DomConfig[]|String} A string or an DomObject config object to append to a baseline element children\n         * @prp {Function}\n         */\n        renderer : null\n    };\n    static get pluginConfig() {\n        return {\n            chain : [\n                // onTaskDataGenerated for populating task with baselines\n                'onTaskDataGenerated',\n                // onInternalPaint for creating tooltip (in TooltipBase)\n                'onInternalPaint'\n            ]\n        };\n    }\n    updateRenderer() {\n        this.gantt.refresh();\n    }\n    //endregion\n    //region Init & destroy\n    construct(gantt, config) {\n        this.tipId = `${gantt.id}-baselines-tip`;\n        this.gantt = gantt;\n        super.construct(gantt, config);\n    }\n    doDisable(disable) {\n        // Hide or show the baseline elements\n        this.client.refreshWithTransition();\n        super.doDisable(disable);\n    }\n    //endregion\n    //region Element & template\n    resolveTimeSpanRecord(forElement) {\n        const baselineElement = forElement.closest(baselineSelector);\n        return baselineElement?.elementData.baseline;\n    }\n    /**\n     * Template (a function accepting event data and returning a string) used to display info in the tooltip.\n     * The template will be called with an object as with fields as detailed below\n     * @config {Function}\n     * @param {Object} data A data block containing the information needed to create tooltip content\n     * @param {Gantt.model.Baseline} data.baseline The Baseline record to display\n     * @param {String} data.startClockHtml Predefined HTML to show the start time\n     * @param {String} data.endClockHtml Predefined HTML to show the end time\n     * @returns {DomConfig|String|null}\n     */\n    template(data) {\n        const\n            me              = this,\n            { baseline }    = data,\n            { task }        = baseline,\n            displayDuration = me.client.formatDuration(baseline.duration);\n        return `\n            <div class=\"b-gantt-task-title\">${StringHelper.encodeHtml(task.name)} (baseline ${baseline.parentIndex + 1})</div>\n            <table>\n            <tr><td>${me.L('L{TaskTooltip.Start}')}:</td><td>${data.startClockHtml}</td></tr>\n            ${baseline.milestone ? '' : `\n                <tr><td>${me.L('L{TaskTooltip.End}')}:</td><td>${data.endClockHtml}</td></tr>\n                <tr><td>${me.L('L{TaskTooltip.Duration}')}:</td><td class=\"b-right\">${displayDuration + ' ' + DateHelper.getLocalizedNameOfUnit(baseline.durationUnit, baseline.duration !== 1)}</td></tr>\n            `}\n            </table>\n            `;\n    }\n    getTaskDOMConfig(taskRecord, top) {\n        const\n            me        = this,\n            baselines = taskRecord.baselines.allRecords,\n            { rtl }   = me.client,\n            position  = rtl ? 'right' : 'left';\n        return {\n            className : {\n                'b-baseline-wrap' : true\n            },\n            style : {\n                transform : `translateY(${top}px)`\n            },\n            dataset : {\n                // Prefix task id to allow element reusage also for baseline wrap\n                taskId : `baselinesFor${taskRecord.id}`\n            },\n            children : baselines.map((baseline, i) => {\n                const\n                    baselineBox = me.gantt.taskRendering.getTaskBox(baseline),\n                    inset       = baselineBox ? (rtl ? me.client.timeAxisSubGrid.totalFixedWidth - baselineBox.left : baselineBox.left) : 0;\n                if (baselineBox) {\n                    const renderData = {\n                        className : {\n                            [baseline.cls]              : baseline.cls,\n                            'b-task-baseline'           : 1,\n                            'b-task-baseline-milestone' : baseline.milestone\n                        },\n                        style : {\n                            width      : baselineBox.width,\n                            [position] : inset,\n                            style      : baseline.style\n                        },\n                        dataset : {\n                            index : i\n                        },\n                        elementData : {\n                            baseline\n                        }\n                    };\n                    const value = me.renderer ? me.renderer({ baselineRecord : baseline, taskRecord, renderData }) : '';\n                    if (typeof value === 'string') {\n                        renderData.html = value;\n                    }\n                    else {\n                        renderData.children = [value].flat();\n                    }\n                    return renderData;\n                }\n                else {\n                    return null;\n                }\n            }),\n            syncOptions : {\n                syncIdField : 'index',\n                strict      : true\n            }\n        };\n    }\n    onTaskDataGenerated({ taskRecord, top, extraConfigs, wrapperCls }) {\n        if (!this.disabled && taskRecord.hasBaselines) {\n            wrapperCls['b-has-baselines'] = 1;\n            extraConfigs.push(this.getTaskDOMConfig(taskRecord, top));\n        }\n    }\n    //endregion\n}\nBaselines._$name = 'Baselines'; GridFeatureManager.registerFeature(Baselines, false, 'Gantt');\n", "import ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport SchedulerProCellEdit from '../../SchedulerPro/feature/CellEdit.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport EventHelper from '../../Core/helper/EventHelper.js';\n/**\n * @module Gantt/feature/CellEdit\n */\nconst tabEaterSpec = {\n    element : document,\n    capture : true,\n    keydown : e => e.key === 'Tab' && (e.preventDefault(), e.stopImmediatePropagation())\n};\n/**\n * Extends the {@link Grid.feature.CellEdit} to encapsulate Gantt functionality. This feature is enabled by <b>default</b>\n *\n * {@inlineexample Gantt/feature/CellEdit.js}\n *\n * Editing can be started by a user by double-clicking an editable cell in the gantt's data grid, or it can be started programmatically\n * by calling {@link Grid/feature/CellEdit#function-startEditing} and providing it with correct cell context.\n *\n * See {@link #function-doAddNewAtEnd}.\n *\n * ## Instant update\n * If {@link Grid.column.Column#config-instantUpdate} on the column is set to true, record will be\n * updated instantly as value in the editor is changed. In combination with\n * {@link Gantt.model.ProjectModel#config-autoSync} it could result in excessive requests to the backend.\n *\n * Instant update is enabled for these columns by default:\n * - {@link Scheduler.column.DurationColumn}\n * - {@link Gantt.column.StartDateColumn}\n * - {@link Gantt.column.EndDateColumn}\n * - {@link Gantt.column.ConstraintDateColumn}\n * - {@link Gantt.column.DeadlineDateColumn}\n * - {@link Gantt.column.EarlyStartDateColumn}\n * - {@link Gantt.column.EarlyEndDateColumn}\n * - {@link Gantt.column.LateStartDateColumn}\n * - {@link Gantt.column.LateEndDateColumn}\n *\n * To disable instant update on the column set config to false:\n *\n * ```javascript\n * new Gantt({\n *     columns: [\n *         {\n *             type: 'startdate',\n *             instantUpdate: false\n *         }\n *     ]\n * })\n * ```\n *\n * This feature is **enabled** by default.\n *\n * @extends SchedulerPro/feature/CellEdit\n *\n * @classtype cellEdit\n * @feature\n *\n * @typings SchedulerPro.feature.CellEdit -> SchedulerPro.feature.SchedulerProCellEdit\n */\nexport default class CellEdit extends SchedulerProCellEdit {\n    static get $name() {\n        // NOTE: Even though the class name matches the one defined on the base class\n        // we need this method in order registerFeature() to work properly\n        // (it uses hasOwnProperty when detecting the class name)\n        return 'CellEdit';\n    }\n    // Default configuration\n    static get defaultConfig() {\n        return {\n            addNewAtEnd : {\n                duration : 1\n            }\n        };\n    }\n    static get pluginConfig() {\n        const cfg = super.pluginConfig;\n        cfg.chain = [...cfg.chain, 'onProjectChange'];\n        return cfg;\n    }\n    onProjectChange() {\n        // Cancel editing if project is changed\n        this.cancelEditing(true);\n    }\n    // Provide any editor with access to the current project\n    getEditorForCell({ record }) {\n        const\n            editor         = super.getEditorForCell(...arguments),\n            { inputField } = editor;\n        inputField.project     = record.project;\n        inputField.eventRecord = record;\n        // unified API of data loading between the task editing / cell editing\n        inputField.loadEvent?.(record, false);\n        return editor;\n    }\n    /**\n     * Adds a new, empty record at the end of the TaskStore with the initial\n     * data specified by the {@link Grid.feature.CellEdit#config-addNewAtEnd} setting.\n     *\n     * @on-queue\n     * @returns {Promise} Newly added record wrapped in a promise.\n     */\n    doAddNewAtEnd() {\n        const\n            me                                  = this,\n            gantt                               = me.grid,\n            { addNewAtEnd, addToCurrentParent } = me,\n            { project, newTaskDefaults }        = gantt,\n            tabEater                            = EventHelper.on(tabEaterSpec);\n        return project.queue(async() => {\n            // First finish any ongoing calculations. Promise executor will run in the following microtask, so project\n            // can get destroyed.\n            await (!project.isDestroying && project.commitAsync());\n            // Block adding after destruction (async above) or if using a \"display store\"\n            if (gantt.isDestroyed || gantt.store !== gantt.taskStore) {\n                return null;\n            }\n            const data = ObjectHelper.assign({\n                name      : me.L('L{Gantt.New task}'),\n                startDate : project.startDate\n            }, addNewAtEnd, newTaskDefaults);\n            let newTask;\n            if (!addToCurrentParent) {\n                newTask = gantt.taskStore.rootNode.appendChild(data);\n            }\n            else {\n                newTask = gantt.addTaskBelow(gantt.taskStore.last, { data });\n            }\n            await project.commitAsync();\n            if (gantt.isDestroyed) {\n                return null;\n            }\n            // If the new record was not added due to it being off the end of the rendered block\n            // ensure we force it to be there before we attempt to edit it.\n            if (!gantt.rowManager.getRowFor(newTask)) {\n                gantt.rowManager.displayRecordAtBottom();\n            }\n            // Resume allowing tabbing in a short while when the DOM is in a state to accept focus\n            me.setTimeout(tabEater, 100);\n            return newTask;\n        });\n    }\n    onCellEditStart() {\n        this.client.project.suspendAutoSync();\n    }\n    afterCellEdit() {\n        this.client.project.resumeAutoSync();\n    }\n}\nCellEdit._$name = 'CellEdit'; GridFeatureManager.registerFeature(CellEdit, true, 'Gantt');\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\n/**\n * @module Gantt/feature/CriticalPaths\n */\n/**\n * This feature highlights the project _critical paths_.\n * Every task is important, but only some of them are critical.\n * The critical path is a chain of linked tasks that directly affects the project finish date.\n * If any task on the critical path is late, the whole project is late.\n *\n * For more details on the _critical path method_ please check [this article](https://en.wikipedia.org/wiki/Critical_path_method).\n *\n * This feature is loaded by default, but the visualization needs to be enabled:\n *\n * ```javascript\n * // let's visualize the project critical paths\n * gantt.features.criticalPaths.disabled = false;\n * ```\n *\n * {@inlineexample Gantt/feature/CriticalPaths.js}\n *\n * If you need to get information about critical paths, you can refer to\n * {@link Gantt/model/ProjectModel#property-criticalPaths} property of the project:\n *\n * ```javascript\n * const paths = gantt.project.criticalPaths;\n * ```\n *\n * @extends Core/mixin/InstancePlugin\n * @demo Gantt/criticalpaths\n * @classtype criticalPaths\n * @feature\n */\nexport default class CriticalPaths extends Delayable(InstancePlugin) {\n    //region Config\n    static get $name() {\n        return 'CriticalPaths';\n    }\n    static get defaultConfig() {\n        return {\n            cls                   : 'b-gantt-critical-paths',\n            criticalDependencyCls : 'b-critical',\n            disabled              : true\n        };\n    }\n    static get pluginConfig() {\n        return {\n            chain : ['onTaskDataGenerated']\n        };\n    }\n    //endregion\n    //region Init\n    doDisable(disable) {\n        const me = this;\n        if (disable) {\n            me.unhighlightCriticalPaths();\n        }\n        // Highlight now if we have entered graph\n        else if (me.client.project.graph) {\n            me.highlightCriticalPaths();\n        }\n        // In delayed calculation mode (the default) we might not be in graph yet, postpone highlighting until we are\n        else {\n            me.client.project.ion({\n                graphReady() {\n                    me.highlightCriticalPaths();\n                },\n                thisObj : me,\n                once    : true\n            });\n        }\n        super.doDisable(disable);\n    }\n    getDependenciesFeature() {\n        // return dependencies feature only when it's ready\n        return this.client.foregroundCanvas && this.client.features.dependencies;\n    }\n    setupObserver() {\n        const\n            me = this,\n            { project }  = me.client;\n        let dependencies;\n        // destroy previous observer if any\n        me.destroyObserver();\n        me.criticalPathObserver = project.getGraph().observe(function * () {\n            return yield project.$.criticalPaths;\n        }, criticalPaths => {\n            // if the feature is not disabled\n            if (!me.disabled) {\n                me.removeCriticalCls();\n                // check if dependencies feature is there\n                if ((dependencies = dependencies || me.getDependenciesFeature())) {\n                    for (const path of criticalPaths) {\n                        for (const node of path) {\n                            if (node.dependency) {\n                                dependencies.highlight(node.dependency, me.criticalDependencyCls);\n                            }\n                        }\n                    }\n                }\n                /**\n                 * Fired when critical paths get highlighted.\n                 *\n                 * See also: {@link #event-criticalPathsUnhighlighted}\n                 * @event criticalPathsHighlighted\n                 */\n                me.client.trigger('criticalPathsHighlighted');\n            }\n        });\n    }\n    destroyObserver() {\n        if (this.criticalPathObserver) {\n            this.client.project?.getGraph?.().removeIdentifier(this.criticalPathObserver);\n            this.criticalPathObserver = null;\n        }\n    }\n    doDestroy() {\n        this.destroyObserver();\n        super.doDestroy();\n    }\n    highlightCriticalPaths() {\n        const\n            me          = this,\n            { element } = me.client;\n        // the component has cls set means we had CPs rendered so need to clean them\n        if (element.classList.contains(me.cls)) {\n            me.unhighlightCriticalPaths();\n        }\n        me.setupObserver();\n        // add the feature base cls to enable stylesheets\n        element.classList.add(me.cls);\n    }\n    removeCriticalCls() {\n        const\n            project      = this.client.project,\n            dependencies = this.getDependenciesFeature();\n        // if we have dependencies rendered remove classes from them\n        if (dependencies) {\n            project.dependencyStore.forEach(dependency => dependencies.unhighlight(dependency, this.criticalDependencyCls));\n        }\n    }\n    unhighlightCriticalPaths() {\n        const\n            me     = this,\n            client = me.client;\n        // destroy criticalPath atom observer\n        me.destroyObserver();\n        me.removeCriticalCls();\n        // remove the feature base cls\n        client.element.classList.remove(me.cls);\n        /**\n         * Fired when critical paths get hidden.\n         *\n         * See also: {@link #event-criticalPathsHighlighted}\n         * @event criticalPathsUnhighlighted\n         */\n        client.trigger('criticalPathsUnhighlighted');\n    }\n    //endregion\n    // Add DOMConfigs for enabled indicators as `extraConfigs` on the task. Will in the end be added to the task row\n    onTaskDataGenerated(renderData) {\n        if (!this.disabled) {\n            renderData.cls['b-critical'] = renderData.taskRecord.critical;\n        }\n    }\n}\nCriticalPaths._$name = 'CriticalPaths'; GridFeatureManager.registerFeature(CriticalPaths, true, 'Gantt');\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\nimport VersionHelper from '../../Core/helper/VersionHelper.js';\nimport { DependencyType } from '../../Engine/scheduling/Types.js';\nimport SchedulerProDependencies from '../../SchedulerPro/feature/Dependencies.js';\n/**\n * @module Gantt/feature/Dependencies\n */\nconst\n    // Map dependency type to side of a box, for displaying an icon in the tooltip\n    fromBoxSide        = [\n        'start',\n        'start',\n        'end',\n        'end'\n    ],\n    toBoxSide          = [\n        'start',\n        'end',\n        'start',\n        'end'\n    ],\n    criticalPathSorter = ({ fromTask: a }, { fromTask: b }) => (a?.critical === b?.critical) ? 0 : a?.critical ? 1 : -1,\n    // Round to half pixels, more precise is not reliable x-browser\n    round              = num => Math.round(num * 2) / 2;\n// noinspection JSClosureCompilerSyntax\n/**\n * Feature that draws dependencies between tasks. Uses a dependency {@link Gantt.model.ProjectModel#property-dependencyStore store}\n * to determine which dependencies to draw.\n *\n * {@inlineexample Gantt/guides/gettingstarted/basic.js}\n *\n * To customize the dependency tooltip, you can provide the {@link Scheduler.feature.Dependencies#config-tooltip} config\n * and specify a {@link Core.widget.Tooltip#config-getHtml} function. For example:\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         dependencies : {\n *             tooltip : {\n *                 getHtml({ activeTarget }) {\n *                     const dependencyModel = gantt.resolveDependencyRecord(activeTarget);\n *\n *                     if (!dependencyModel) return null;\n *\n *                     const { fromEvent, toEvent } = dependencyModel;\n *\n *                     return `${fromEvent.name} (${fromEvent.id}) -> ${toEvent.name} (${toEvent.id})`;\n *                 }\n *             }\n *         }\n *     }\n * }\n * ```\n *\n * ## Styling dependency lines\n *\n * You can easily customize the arrows drawn between events. To change all arrows, apply\n * the following basic SVG CSS:\n *\n * ```css\n * .b-sch-dependency {\n *    stroke-width: 2;\n *    stroke : red;\n * }\n *\n * .b-sch-dependency-arrow {\n *     fill: red;\n * }\n * ```\n *\n * To style an individual dependency line, you can provide a [cls](#Scheduler/model/DependencyModel#field-cls) in your\n * data:\n *\n * ```json\n * {\n *     \"id\"   : 9,\n *     \"from\" : 7,\n *     \"to\"   : 8,\n *     \"cls\"  : \"special-dependency\"\n * }\n * ```\n *\n * ```scss\n * // Make line dashed\n * .b-sch-dependency {\n *    stroke-dasharray: 5, 5;\n * }\n * ```\n *\n * By default predecessors and successors in columns and the task editor are displayed using task id and name. The id\n * part is configurable, any task field may be used instead (for example wbsCode or sequence number) by\n * {@link Gantt/view/GanttBase#config-dependencyIdField Gantt#dependencyIdField} property.\n *\n * ```javascript\n * const gantt = new Gantt({\n *    dependencyIdField: 'wbsCode',\n *\n *    project,\n *    columns : [\n *        { type : 'name', width : 250 }\n *    ],\n * });\n * ```\n *\n * Also see {@link Gantt/column/DependencyColumn#config-dependencyIdField DependencyColumn#dependencyIdField} to\n * configure columns only if required.\n *\n * This feature is **enabled** by default\n *\n * @extends SchedulerPro/feature/Dependencies\n * @demo Gantt/basic\n * @classtype dependencies\n * @feature\n *\n * @typings SchedulerPro.feature.Dependencies -> SchedulerPro.feature.SchedulerProDependencies\n */\nexport default class Dependencies extends SchedulerProDependencies {\n    //region Config\n    static $name = 'Dependencies';\n    static configurable = {\n        terminalSides                     : ['left', 'right'],\n        highlightDependenciesOnEventHover : true,\n        tooltipTemplate(dependency) {\n            if (!dependency) {\n                return null;\n            }\n            const\n                me                     = this,\n                { dependencyIdField }  = me.client,\n                { fromEvent, toEvent } = dependency;\n            return {\n                children : [{\n                    className : 'b-sch-dependency-tooltip',\n                    children  : [\n                        { tag : 'label', text : me.L('L{from}') },\n                        { text : `${fromEvent.name} ${fromEvent[dependencyIdField]}` },\n                        { className : `b-sch-box b-${dependency.fromSide || fromBoxSide[dependency.type]}` },\n                        { tag : 'label', text : me.L('L{to}') },\n                        { text : `${toEvent.name} ${toEvent[dependencyIdField]}` },\n                        { className : `b-sch-box b-${dependency.toSide || toBoxSide[dependency.type]}` },\n                        dependency.lag ? { tag : 'label', text : me.L('L{DependencyEdit.Lag}') } : null,\n                        dependency.lag ? { text : dependency.fullLag } : null\n                    ]\n                }]\n            };\n        },\n        pathFinderConfig : {\n            otherHorizontalMargin : 0,\n            otherVerticalMargin   : 0\n        }\n    };\n    //endregion\n    //region Init\n    construct(gantt, config = {}) {\n        // Scheduler might be using gantt's feature, when on same page\n        if (gantt.isGantt) {\n            this.gantt = gantt;\n        }\n        super.construct(gantt, config);\n    }\n    //endregion\n    //region Scheduler overrides\n    // Add critical path marker which has different color\n    createMarkers() {\n        super.createMarkers();\n        const endMarker = this.endMarker.cloneNode(true);\n        endMarker.setAttribute('id', 'arrowEndCritical');\n        endMarker.retainElement = true;\n        this.client.svgCanvas.appendChild(endMarker);\n    }\n    /**\n     * Returns the dependency record for a DOM element\n     * @function resolveDependencyRecord\n     * @param {HTMLElement} element The dependency line element\n     * @returns {Gantt.model.DependencyModel} The dependency record\n     */\n    get rowStore() {\n        return this.client.store;\n    }\n    // We don't care about the resourceStore in gantt\n    attachToResourceStore(...args) {\n        // But we have to care for Scheduler Pro using Gantt:s feature (shared bundle)\n        if (!this.gantt) {\n            super.attachToResourceStore(...args);\n        }\n    }\n    getDependencyKey(dependency, ...args) {\n        if (!this.gantt) {\n            super.getDependencyKey(dependency, ...args);\n        }\n        return dependency.id;\n    }\n    // Gantt draws between tasks, replace Schedulers assignment element lookup\n    getAssignmentElement(task) {\n        if (!this.gantt) {\n            return super.getAssignmentElement(task);\n        }\n        return this.client.getElementFromTaskRecord(task);\n    }\n    // Gantt draws between tasks, replace Schedulers assignment bounds lookup\n    getAssignmentBounds(task) {\n        if (!this.gantt) {\n            return super.getAssignmentBounds(task);\n        }\n        const\n            { client } = this,\n            element    = client.getElementFromTaskRecord(task);\n        if (element && !client.isExporting) {\n            return Rectangle.from(element, this.relativeTo);\n        }\n        return client.isEngineReady && client.getTaskBox(task, true, true);\n    }\n    //region Export\n    // Export calls this fn to determine if a dependency should be included or not\n    isDependencyVisible(dependency) {\n        if (!this.gantt) {\n            return super.isDependencyVisible(dependency);\n        }\n        return dependency.fromEvent?.isScheduled && dependency.toEvent?.isScheduled;\n    }\n    //endregion\n    // Override Schedulers dependency drawing\n    drawDependency(dependency, batch = false, forceBoxes = null) {\n        if (!this.gantt) {\n            return super.drawDependency(dependency, batch, forceBoxes);\n        }\n        const\n            me                     = this,\n            {\n                domConfigs,\n                client\n            } = me,\n            { store }              = client,\n            topIndex               = client.firstVisibleRow.dataIndex,\n            bottomIndex            = client.lastVisibleRow.dataIndex,\n            { startMS, endMS }     = client.visibleDateRange,\n            { fromEvent, toEvent } = dependency;\n        if (store.isAvailable(fromEvent) && store.isAvailable(toEvent)) {\n            const\n                fromIndex  = store.indexOf(fromEvent),\n                toIndex    = store.indexOf(toEvent),\n                fromDateMS = Math.min(fromEvent.startDateMS, toEvent.startDateMS),\n                toDateMS   = Math.max(fromEvent.endDateMS, toEvent.endDateMS);\n            // Draw only if dependency intersects view, unless it is part of an export\n            if (client.isExporting || fromIndex != null && toIndex != null && !(\n                // Both ends above view\n                (fromIndex < topIndex && toIndex < topIndex) ||\n                // Both ends below view\n                (fromIndex > bottomIndex && toIndex > bottomIndex) ||\n                // Both ends before view\n                (fromDateMS < startMS && toDateMS < startMS) ||\n                // Both ends after view\n                (fromDateMS > endMS && toDateMS > endMS)\n            )) {\n                const lineDomConfigs = me.getDomConfigs(dependency, fromEvent, toEvent, forceBoxes);\n                if (lineDomConfigs) {\n                    domConfigs.set(dependency.id, lineDomConfigs);\n                }\n                // No room to draw a line\n                else {\n                    domConfigs.delete(dependency.id);\n                }\n            }\n            // Give mixins a shot at running code after a dependency is drawn. Used by grid cache to cache the\n            // dependency (when needed)\n            me.afterDrawDependency(dependency, fromIndex, toIndex, fromDateMS, toDateMS);\n        }\n        if (!batch) {\n            me.domSync();\n        }\n    }\n    //endregion\n    //region Draw & render\n    getDependenciesToConsider(startMS, endMS, startIndex, endIndex) {\n        const\n            dependencies    = super.getDependenciesToConsider?.(startMS, endMS, startIndex, endIndex),\n            criticalFeature = this.client.features.criticalPaths;\n        if (dependencies && criticalFeature?.enabled) {\n            return Array.from(dependencies).sort(criticalPathSorter);\n        }\n        return dependencies;\n    }\n    adjustLineDef(dependency, lineDef) {\n        const me = this;\n        // Do not adjust for scheduler using Gantts feature\n        if (!me.gantt) {\n            return lineDef;\n        }\n        const\n            { rtl }              = me.gantt,\n            { startBox, endBox } = lineDef,\n            arrowMargin          = me.pathFinder.startArrowMargin,\n            startRowBox          = me.client.getRecordCoords(dependency.fromEvent, true),\n            endRowBox            = me.client.getRecordCoords(dependency.toEvent, true),\n            startBoxEnd          = round(startBox.getEnd(rtl)),\n            endBoxStart          = round(endBox.getStart(rtl)),\n            endBoxEnd            = round(endBox.getEnd(rtl)),\n            // Detecting whether the source box ends before (or at the same point) as the end box start\n            // is different between LRT and RTL\n            sourceEndsBeforeStart = rtl\n                ? (endBoxStart <= startBoxEnd && endBoxEnd <= (startBoxEnd + arrowMargin))\n                : (endBoxStart >= startBoxEnd && endBoxEnd >= (startBoxEnd + arrowMargin));\n        if (\n            dependency.type === DependencyType.EndToStart &&\n            // Target box is below source box\n            startBox.bottom < endBox.y &&\n            // If source box ends before target box start - draw line to target box top edge.\n            // Round coordinates to make behavior more consistent on zoomed page\n            sourceEndsBeforeStart\n        ) {\n            // Arrow to left part of top\n            lineDef.endSide = 'top';\n            // The default entry point for top is the center, but for Gantt Tasks, we join to startArrowMargin inwards\n            // to top-start, so we give the end box a width of arrowMargin.\n            // Milestones always have the top entry point left in the center.\n            if (!dependency.toEvent.milestone) {\n                if (rtl) {\n                    endBox.x = endBox.right - arrowMargin * 2;\n                }\n                else {\n                    endBox.width = arrowMargin * 2;\n                }\n            }\n        }\n        return {\n            ...lineDef,\n            // Reversing start/end endpoints generate more Gantt-friendly arrows\n            startBox      : endBox,\n            endBox        : startBox,\n            endSide       : lineDef.startSide,\n            startSide     : lineDef.endSide,\n            boxesReversed : true,\n            // Add vertical box for each task. They are supposed to push line to row boundary\n            otherBoxes    : [\n                {\n                    start  : startBox.x,\n                    end    : startBox.right,\n                    top    : startRowBox.y,\n                    bottom : startRowBox.bottom\n                },\n                {\n                    start  : endBox.x,\n                    end    : endBox.right,\n                    top    : endRowBox.y,\n                    bottom : endRowBox.bottom\n                }\n            ]\n        };\n    }\n    /**\n     * Draws all dependencies for the specified task.\n     * @deprecated 5.1 The Dependencies feature was refactored and this fn is no longer needed\n     */\n    drawForTask() {\n        VersionHelper.deprecate('Gantt', '6.0.0', 'Dependencies.drawForTask() is no longer needed');\n        this.refresh();\n    }\n    //endregion\n    //region Tooltip\n    /**\n     * Generates html for the tooltip shown when hovering a dependency\n     * @param {Object} tooltipConfig\n     * @returns {String} Html to display in the tooltip\n     * @private\n     */\n    getHoverTipHtml({ activeTarget }) {\n        const dependency = this.resolveDependencyRecord(activeTarget);\n        return this.tooltipTemplate(dependency);\n    }\n    //endregion\n    //region Dependency creation\n    /**\n     * Create a new dependency from source terminal to target terminal\n     * @internal\n     */\n    async createDependency(data) {\n        const\n            me         = this,\n            {\n                source,\n                target,\n                fromSide,\n                toSide\n            }          = data,\n            type       = (fromSide === 'start' ? 0 : 2) + (toSide === 'end' ? 1 : 0),\n            dependency = me.dependencyStore.add({\n                fromEvent : source,\n                toEvent   : target,\n                type\n            })[0];\n        await me.dependencyStore.project.commitAsync();\n        return dependency;\n    }\n    // endregion\n}\nDependencies._$name = 'Dependencies'; GridFeatureManager.registerFeature(Dependencies, true, 'Gantt');\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport TooltipBase from '../../Scheduler/feature/base/TooltipBase.js';\nimport DomClassList from '../../Core/helper/util/DomClassList.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\n/**\n * @module Gantt/feature/Indicators\n */\n/**\n * The Indicators feature displays indicators (icons) for different dates related to a task in its row. Hovering an\n * indicator will show a tooltip with its name and date(s). The owning task `id` is embedded in the indicator element\n * dataset as `taskRecordId` which can be useful if you want to have custom actions when clicking (showing a menu for example).\n *\n * By default, it includes and displays the following indicators (config name):\n * * Early start/end dates (earlyDates)\n * * Late start/end dates (lateDates)\n * * Constraint date (constraintDate)\n * * Deadline date (deadlineDate)\n *\n * This demo shows the default indicators:\n *\n * {@inlineexample Gantt/feature/Indicators.js}\n *\n * This config will display them all:\n *\n * ```javascript\n * new Gantt({\n *   features : {\n *     indicators : true\n *   }\n * });\n * ```\n *\n * To selectively disable indicators:\n *\n * ```javascript\n * features : {\n *   indicators : {\n *     items : {\n *       earlyDates     : false,\n *       constraintDate : false\n *     }\n *   }\n * }\n * ```\n *\n * They can also be toggled at runtime:\n *\n * ```javascript\n * gantt.features.indicators.items.deadlineDate = true/false;\n * ```\n *\n * The feature also supports adding custom indicators, by adding properties to the `items` config object:\n *\n * ```javascript\n * items : {\n *   lateDates  : false,\n *\n *   // Custom indicator only shown for tasks more than half done\n *   myCustomIndicator : taskRecord => taskRecord.percentDone > 50 ? {\n *      startDate : DateHelper.add(taskRecord.endDate, 2, 'days'),\n *      name : 'My custom indicator',\n *      iconCls : 'b-fa b-fa-alien'\n *   } : null\n * }\n * ```\n *\n * This demo shows a custom indicator:\n *\n * {@inlineexample Gantt/feature/IndicatorsCustom.js}\n *\n * These custom indicators are defined as functions, that accept a task record and return a TimeSpan (or a raw data\n * object). The function will be called for each visible task during rendering, to not show the indicator for certain\n * tasks return `null` from it.\n *\n * When using this feature we recommend that you configure gantt with a larger `rowHeight` + `barMargin` (>15 px), since\n * the indicators are indented to fit below the task bars.\n *\n * Note: When combined with the `fillTicks` mode, indicators are snapped to the time axis ticks.\n *\n * This feature is **disabled** by default.\n *\n * @extends Scheduler/feature/base/TooltipBase\n * @classtype indicators\n * @feature\n * @demo Gantt/indicators\n */\nexport default class Indicators extends TooltipBase {\n    //region Config\n    static get $name() {\n        return 'Indicators';\n    }\n    static get defaultConfig() {\n        return {\n            cls         : 'b-gantt-task-tooltip', // reused on purpose\n            forSelector : '.b-indicator',\n            recordType  : 'indicator',\n            hoverDelay  : 500,\n            layoutStyle : {\n                flexDirection : 'column'\n            },\n            defaultIndicators : {\n                earlyDates : taskRecord => taskRecord.earlyStartDate && !taskRecord.isMilestone ? {\n                    startDate : taskRecord.earlyStartDate,\n                    endDate   : taskRecord.earlyEndDate,\n                    cls       : 'b-bottom b-early-dates',\n                    name      : this.L('L{earlyDates}')\n                } : null,\n                lateDates : taskRecord => taskRecord.lateStartDate && !taskRecord.isMilestone ? {\n                    startDate : taskRecord.lateStartDate,\n                    endDate   : taskRecord.lateEndDate,\n                    cls       : 'b-bottom b-late-dates',\n                    name      : this.L('L{lateDates}')\n                } : null,\n                constraintDate : taskRecord => taskRecord.constraintDate ? {\n                    startDate : taskRecord.constraintDate,\n                    cls       : `b-bottom b-constraint-date b-constraint-type-${taskRecord.constraintType}`,\n                    name      : this.L(`L{ConstraintTypePicker.${taskRecord.constraintType}}`)\n                } : null,\n                deadlineDate : taskRecord => taskRecord.deadlineDate ? {\n                    startDate : taskRecord.deadlineDate,\n                    cls       : `b-bottom b-deadline-date`,\n                    name      : this.L('L{deadlineDate}')\n                } : null\n            },\n            /**\n             * Used to enable/disable built-in indicators and to define custom indicators.\n             *\n             * Custom indicators are defined as functions, that accept a task record and return a\n             * {@link Scheduler.model.TimeSpan}, or a config object thereof.\n             *\n             * ```\n             * new Gantt({\n             *   features : {\n             *     indicators : {\n             *       items : {\n             *         // Disable deadlineDate indicators\n             *         deadlineDate : false,\n             *\n             *         // Add a custom indicator (called prepare)\n             *         prepare : taskRecord => ({\n             *            startDate : taskRecord.startDate,\n             *            iconCls   : 'b-fa b-fa-magnify',\n             *            name      : 'Start task preparations'\n             *         })\n             *       }\n             *     }\n             *   }\n             * });\n             * ```\n             *\n             * For more information, please see the class description at top.\n             *\n             * @config {Object<String,Function|Boolean>}\n             * @category Common\n             */\n            items : null,\n            /**\n             * A function which receives data about the indicator and returns a string,\n             * or a Promise yielding a string (for async tooltips), to be displayed in the tooltip.\n             * This method will be called with an object containing the fields below\n             * @config {Function}\n             * @param {Object} data Indicator data\n             * @param {String} data.name Indicator name\n             * @param {Date} data.startDate Indicator startDate\n             * @param {Date} data.endDate Indicator endDate\n             * @param {Gantt.model.TaskModel} data.taskRecord The task to which the indicator belongs\n             * @param {String} data.startClockHtml Predefined HTML to show the start time\n             * @param {String} data.endClockHtml Predefined HTML to show the end time\n             * @returns {DomConfig|String|null}\n             */\n            tooltipTemplate : data => {\n                const\n                    { indicator } = data,\n                    encodedName   = StringHelper.encodeHtml(indicator.name);\n                if (data.endDate) {\n                    return `\n                        ${indicator.name ? `<div class=\"b-gantt-task-title\">${encodedName}</div>` : ''}\n                        <table>\n                            <tr><td>${this.L('L{Start}')}:</td><td>${data.startClockHtml}</td></tr>\n                            <tr><td>${this.L('L{End}')}:</td><td>${data.endClockHtml}</td></tr>\n                        </table>\n                    `;\n                }\n                return `\n                    ${indicator.name ? `<div class=\"b-gantt-task-title\">${encodedName}</div>` : ''}\n                    ${data.startText}\n                `;\n            }\n        };\n    }\n    static get pluginConfig() {\n        return {\n            chain : ['onTaskDataGenerated', 'onInternalPaint']\n        };\n    }\n    //endregion\n    construct(gantt, config = {}) {\n        this.tipId = `${gantt.id}-indicators-tip`;\n        // Store items to set manually after config, we do not want to pass them along to the base class since it will\n        // apply them to the tooltip\n        config = Object.assign({}, config);\n        const { items } = config;\n        super.construct(gantt, config);\n        this.items = items;\n    }\n    template(...args) {\n        return this.tooltipTemplate(...args);\n    }\n    // Private setter, not supposed to set it during runtime\n    set items(indicators) {\n        const me = this;\n        // All indicators, custom + default\n        me._indicators = ObjectHelper.assign({}, me.defaultIndicators, indicators);\n        // Accessors to toggle the indicators from the outside\n        me._indicatorAccessors = {};\n        // Keep track of enabled/disabled indicators\n        me._indicatorStatus = {};\n        for (const name in me._indicators) {\n            // Store if indicator is enabled/disabled (enabled if true or fn)\n            me._indicatorStatus[name] = Boolean(me._indicators[name]);\n            // If it was configured as true, it means we should use a default implementation\n            if (typeof me._indicators[name] !== 'function') {\n                me._indicators[name] = me.defaultIndicators[name];\n            }\n            // Create accessors so that we can enable/disable on the fly using:\n            // gantt.features.indicators.items.deadlineDate = false;\n            Object.defineProperty(me._indicatorAccessors, name, {\n                enumerable : true,\n                get() {\n                    return me._indicatorStatus[name] ? me._indicators[name] : false;\n                },\n                set(value) {\n                    me._indicatorStatus[name] = value;\n                    me.client.refresh();\n                }\n            });\n        }\n    }\n    /**\n     * Accessors for the indicators that can be used to toggle them at runtime.\n     *\n     * ```\n     * gantt.features.indicators.items.deadlineDate = false;\n     * ```\n     *\n     * @property {Object<String,Boolean>}\n     * @readonly\n     * @category Common\n     */\n    get items() {\n        // These accessors are generated in `set items`, allowing runtime enabling/disabling of indicators\n        return this._indicatorAccessors;\n    }\n    //region Render\n    // Map fn that generates a DOMConfig for an indicator\n    createIndicatorDOMConfig(indicator, index) {\n        const\n            { gantt, renderData }                = this,\n            { taskRecord }                       = renderData,\n            { cls, iconCls }                     = indicator,\n            { rtl, timeAxis, timeAxisViewModel } = gantt;\n        let { startDate, endDate } = indicator;\n        if (endDate) {\n            endDate = Math.min(endDate, timeAxisViewModel.endDate);\n        }\n        if (gantt.fillTicks) {\n            const startTick = timeAxis.getSnappedTickFromDate(startDate);\n            startDate = startTick.startDate;\n            if (endDate) {\n                const endTick = timeAxis.getSnappedTickFromDate(endDate);\n                endDate = endTick.endDate;\n            }\n        }\n        const\n            x                = timeAxisViewModel.getPositionFromDate(startDate),\n            width            = endDate ? Math.abs(timeAxisViewModel.getPositionFromDate(endDate - x)) : null,\n            classList        = cls?.isDomClassList ? cls : new DomClassList(cls),\n            { start, total } = gantt.resourceMarginObject,\n            top              = renderData.top || gantt.store.indexOf(taskRecord) * gantt.rowManager.rowOffsetHeight + start,\n            height           = renderData.height || gantt.rowHeight - total;\n        indicator.taskRecord = taskRecord;\n        return {\n            className : Object.assign(classList, {\n                'b-indicator' : 1,\n                'b-has-icon'  : indicator.iconCls\n            }),\n            style : {\n                [rtl ? 'right' : 'left'] : x,\n                top,\n                height,\n                width,\n                style                    : indicator.style\n            },\n            dataset : {\n                // For sync\n                taskId       : `${renderData.taskId}-indicator-${index}`,\n                // allow users to look up which task this indicator belongs to\n                taskRecordId : renderData.taskId\n            },\n            children : [\n                iconCls ? {\n                    tag       : 'i',\n                    className : iconCls\n                } : null\n            ],\n            elementData : indicator\n        };\n    }\n    // Add DOMConfigs for enabled indicators as `extraConfigs` on the task. Will in the end be added to the task row\n    onTaskDataGenerated(renderData) {\n        if (this.disabled) {\n            return;\n        }\n        const\n            { items } = this,\n            usedIndicators   = [];\n        // Iterate all indicators\n        for (const name in items) {\n            const indicatorFn = items[name];\n            // If it is enabled and a function, call it and store the resulting timespan\n            if (this._indicatorStatus[name] && typeof indicatorFn === 'function') {\n                const timeSpan = indicatorFn(renderData.taskRecord);\n                timeSpan && this.client.timeAxis.timeSpanInAxis(timeSpan.startDate, timeSpan.endDate) && usedIndicators.push(timeSpan);\n            }\n        }\n        // Convert indicator timespans to DOMConfigs for rendering\n        renderData.extraConfigs.push(...usedIndicators.map(this.createIndicatorDOMConfig, {\n            gantt : this.client,\n            renderData\n        }));\n    }\n    //endregion\n    //region Tooltip\n    resolveTimeSpanRecord(forElement) {\n        return forElement.lastDomConfig.elementData;\n    }\n    //endregion\n}\nIndicators._$name = 'Indicators'; GridFeatureManager.registerFeature(Indicators, false);\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport SchedulerLabels from '../../Scheduler/feature/Labels.js';\n/**\n * @module Gantt/feature/Labels\n */\n/**\n * Specialized version of the Labels feature for Scheduler, that handles labels for tasks in Gantt. See\n * {@link Scheduler/feature/Labels Schedulers Labels feature} for more information.\n *\n * This feature is **disabled** by default.\n *\n * For info on enabling it, see {@link Grid.view.mixin.GridFeatures}.\n *\n * @extends Scheduler/feature/Labels\n * @demo Gantt/labels\n * @classtype labels\n * @feature\n *\n * @typings Scheduler.feature.Labels -> Scheduler.feature.SchedulerLabels\n */\nexport default class Labels extends SchedulerLabels {\n    static get $name() {\n        return 'Labels';\n    }\n    static get pluginConfig() {\n        return {\n            chain : ['onTaskDataGenerated']\n        };\n    }\n    onTaskDataGenerated(data) {\n        this.onEventDataGenerated(data);\n    }\n}\nLabels._$name = 'Labels'; GridFeatureManager.registerFeature(Labels, false, 'Gantt');\n", "import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\n/**\n * @module Gantt/feature/ParentArea\n */\n/**\n * Highlights the area encapsulating all child tasks of a parent task in a semi-transparent layer. You can style\n * these layer elements using the `b-parent-area` CSS class.\n *\n * {@inlineexample Gantt/feature/ParentArea.js}\n *\n * This feature is **disabled** by default.\n * For info on enabling it, see {@link Grid.view.mixin.GridFeatures}.\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         parentArea : true\n *     }\n * });\n * ```\n *\n * @extends Core/mixin/InstancePlugin\n * @demo Gantt/parent-area\n * @classtype parentArea\n * @feature\n */\nexport default class ParentArea extends InstancePlugin {\n    static $name = 'ParentArea';\n    static pluginConfig = {\n        chain : ['onBeforeTaskSync']\n    };\n    // Map to keep track of highlighted parents, holds DomConfigs keyed by parentRecord\n    highlighted = new Map();\n    // Recursively highlight self and all unhighlighted ancestors\n    highlightParent(parentRecord) {\n        const { highlighted } = this;\n        if (parentRecord && !parentRecord.isProjectModel && !highlighted.has(parentRecord)) {\n            const\n                { client }          = this,\n                { rowOffsetHeight } = client.rowManager,\n                descendants         = parentRecord.visibleDescendantCount,\n                box                 = client.getTaskBox(parentRecord);\n            if (!box) {\n                return;\n            }\n            const domConfig = {\n                className : {\n                    'b-parent-area' : 1\n                },\n                style : {\n                    top    : box.top,\n                    height : (descendants + 1) * rowOffsetHeight - box.top % rowOffsetHeight, // +1 for self\n                    left   : box.left,\n                    width  : box.width\n                },\n                dataset : {\n                    taskId : `parent-area-${parentRecord.id}`\n                }\n            };\n            highlighted.set(parentRecord, domConfig);\n            this.highlightParent(parentRecord.parent);\n        }\n    }\n    // Called after collecting all task configs, before DomSyncing them\n    onBeforeTaskSync(configs) {\n        if (!this.disabled) {\n            const { highlighted, client } = this;\n            // Start from scratch to not have to keep track of modifications, collecting task area configs is cheap\n            highlighted.clear();\n            // Highlight all parents whose area intersects the view, which we know if a child is among rendered rows\n            for (const row of client.rowManager) {\n                const taskRecord = client.store.getById(row.id);\n                taskRecord && this.highlightParent(taskRecord.parent);\n            }\n            configs.push(...highlighted.values());\n        }\n    }\n    doDisable(disable) {\n        super.doDisable(disable);\n        this.client.refresh();\n    }\n}\nParentArea._$name = 'ParentArea'; GridFeatureManager.registerFeature(ParentArea, false, 'Gantt');\n", "import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport ArrayHelper from '../../Core/helper/ArrayHelper.js';\n/**\n * @module Gantt/feature/ProgressLine\n */\n/**\n *\n * This feature draws project progress line with SVG lines. Requires {@link SchedulerPro/feature/PercentBar} to be enabled (which\n * by default, it is)\n *\n * This feature is **disabled** by default.\n * For info on enabling it, see {@link Grid/view/mixin/GridFeatures}.\n *\n * ```javascript\n * let gantt = new Gantt({\n *     features : {\n *         progressLine : {\n *            statusDate : new Date(2017, 2, 8)\n *         }\n *     }\n * });\n * ```\n *\n * Status date can be changed dynamically:\n *\n * ```javascript\n * gantt.features.progressLine.statusDate = new Date();\n * ```\n *\n * If status date is not in the current Gantt time span, progress line will use view start or end coordinates. This\n * behavior can be customized with {@link #config-drawLineOnlyWhenStatusDateVisible} config. Or you can override {@link #function-shouldDrawProgressLine}\n * method and provide more complex condition.\n *\n * Progress line is a set of SVG <line> elements drawn between all the tasks.\n *\n * {@inlineexample Gantt/feature/ProgressLine.js}\n *\n * @demo Gantt/progressline\n * @extends Core/mixin/InstancePlugin\n * @mixes Core/mixin/Delayable\n * @classtype progressLine\n * @feature\n */\nexport default class ProgressLine extends Delayable(InstancePlugin) {\n    /**\n     * Fired when progress line is rendered\n     * @event progressLineDrawn\n     */\n    //region Config\n    static get $name() {\n        return 'ProgressLine';\n    }\n    static get defaultConfig() {\n        return {\n            /**\n             * Progress line status date. If not provided, current date is used.\n             * @config {Date}\n             */\n            statusDate : new Date(),\n            /**\n             * Set to true to hide progress line, when status date is not in the current time axis.\n             * @config {Boolean}\n             */\n            drawLineOnlyWhenStatusDateVisible : false,\n            lineCls : 'b-gantt-progress-line',\n            containerCls : 'b-progress-line-canvas'\n        };\n    }\n    static get pluginConfig() {\n        return {\n            chain : ['onInternalPaint']\n        };\n    }\n    //endregion\n    //region Init & destroy\n    construct(client, config = {}) {\n        const me = this;\n        // Many things may schedule a draw. Ensure it only happens once, on the next frame.\n        // And Ensure it really is on the *next* frame after invocation by passing\n        // the cancelOutstanding flag.\n        me.scheduleDraw = me.createOnFrame('draw', [], me, true);\n        super.construct(client, config);\n        this.lineSegments = [];\n    }\n    doDisable(disable) {\n        const me = this;\n        // attach/detach listeners\n        me.attachToClient(disable ? null : me.client);\n        if (me.client.rendered) {\n            me.draw();\n        }\n        super.doDisable(disable);\n    }\n    //endregion\n    get statusDate() {\n        return this._statusDate;\n    }\n    /**\n     * Progress line status date. If not provided, current date is used.\n     * @property {Date}\n     */\n    set statusDate(date) {\n        if (date instanceof Date) {\n            this._statusDate = date;\n            if (!this.disabled) {\n                this.scheduleDraw();\n            }\n        }\n    }\n    // cannot use `get svgCanvas` because it will trigger svgCanvas getter on instance too early\n    getSVGCanvas() {\n        const\n            me = this,\n            { client } = me;\n        if (!me._svgCanvas) {\n            const svg = me._svgCanvas = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n            // To not be touched when syncing tasks to DOM\n            svg.retainElement = true;\n            svg.classList.add('b-sch-canvas', me.containerCls);\n            svg.style.width = (client.isHorizontal ? client.timeAxisViewModel.totalSize : client.timeAxisColumn.width) + 'px';\n            client.timeAxisSubGridElement.appendChild(svg);\n        }\n        return me._svgCanvas;\n    }\n    // region Event handlers\n    attachToProject(project) {\n        this.detachListeners('project');\n        project?.ion({\n            name    : 'project',\n            refresh : 'onProjectRefresh',\n            thisObj : this\n        });\n    }\n    attachToRowManager(rowManager) {\n        this.detachListeners('rowManager');\n        rowManager?.ion({\n            name              : 'rowManager',\n            translaterow      : 'onTranslateRow',\n            refresh           : 'scheduleDraw',\n            rerender          : 'scheduleDraw',\n            changetotalheight : 'scheduleDraw',\n            thisObj           : this\n        });\n    }\n    attachToClient(client) {\n        const me = this;\n        me.detachListeners('client');\n        // dependencies are drawn on scroll, both horizontal and vertical\n        client?.ion({\n            name                   : 'client',\n            horizontalscroll       : 'scheduleDraw',\n            togglenode             : 'scheduleDraw',\n            taskdrag               : 'onTaskDrag',\n            taskdragabortfinalized : 'scheduleDraw',\n            aftertaskdrop          : 'scheduleDraw',\n            timelineviewportresize : 'scheduleDraw',\n            thisObj                : me\n        });\n        me.attachToProject(client?.project);\n        me.attachToRowManager(client?.rowManager);\n    }\n    onInternalPaint() {\n        this.attachToProject(this.disabled ? null : this.client.project);\n    }\n    /**\n     * Redraws the line when the project propagation is done\n     * @private\n     */\n    onProjectRefresh() {\n        this.scheduleDraw();\n    }\n    onTranslateRow({ row }) {\n        // a changetotalheight event is fired after translations, if a rowHeight change is detected here it will redraw\n        // the line\n        if (row.lastTop >= 0 && row.top !== row.lastTop) {\n            this.scheduleDraw();\n        }\n    }\n    // Refreshing only lines for dragged task to avoid slowing down drag operation\n    onTaskDrag({ taskRecords, dragData }) {\n        taskRecords.forEach(record => {\n            this.updateLineForTask(record, {\n                [record.id] : DateHelper.add(record.startDate, dragData.timeDiff)\n            });\n        });\n    }\n    // endregion\n    /**\n     * Returns true if progress line should be drawn\n     * @returns {Boolean}\n     */\n    shouldDrawProgressLine() {\n        const me = this;\n        return !me.client.timeAxisSubGrid.collapsed && !me.disabled && (!me.drawLineOnlyWhenStatusDateVisible || me.client.timeAxis.dateInAxis(me.statusDate));\n    }\n    /**\n     * Returns status date horizontal position relative to the foreground canvas\n     * @returns {Number}\n     * @private\n     */\n    getStatusDateX() {\n        let { statusDate } = this;\n        const { client } = this;\n        if (!client.timeAxis.dateInAxis(statusDate)) {\n            statusDate = statusDate < client.timeAxis.startDate ? client.timeAxis.startDate : client.timeAxis.endDate;\n        }\n        return client.getCoordinateFromDate(statusDate);\n    }\n    /**\n     * Returns object with status date local coordinate and view x,y coordinates. Used to convert page coordinates to\n     * view local.\n     * @returns {{statusDateX: Number, viewXY: number[]}}\n     * @private\n     */\n    getRenderData() {\n        const\n            statusDateX = this.getStatusDateX(),\n            // We refer to the DOM to get status date horizontal coordinate (for segmented tasks which are not supported yet)\n            // we need to adjust progress bar element box to view/scroll.\n            viewBox     = this.client.timeAxisSubGridElement.getBoundingClientRect(),\n            viewXY      = [this.client.scrollLeft - viewBox.left, -viewBox.top];\n        return { statusDateX, viewXY };\n    }\n    // region Drawing\n    /**\n     * Renders the progress line.\n     */\n    draw() {\n        const\n            me         = this,\n            { client } = me;\n        me.lineSegments.forEach(el => el.remove());\n        me.lineSegments = [];\n        if (!me.shouldDrawProgressLine()) {\n            return;\n        }\n        if (client.isAnimating) {\n            client.ion({\n                transitionend() {\n                    me.scheduleDraw();\n                },\n                once : true\n            });\n            return;\n        }\n        const\n            data  = me.getRenderData(),\n            lines = [];\n        client.rowManager.forEach(row => lines.push(...me.getLineSegmentRenderData(row, data)));\n        // Batch rendering to avoid constant layout reflows\n        // With batch drawing line takes ~8ms comparing to ~30ms prior\n        lines.forEach(line => me.drawLineSegment(line));\n        client.trigger('progressLineDrawn');\n    }\n    segmentBelongsToTask(el, taskRecord) {\n        // Use getAttribute to not upset Salesforce LockerService\n        return el.getAttribute('data-task-id') == taskRecord.id;\n    }\n    /**\n     * Updates progress line segment for one task\n     * @param {Gantt.model.TaskModel} taskRecord\n     * @param {Object} [renderData] Optional render data, which is an object where keys are task ids and values are\n     * new task start date\n     * @private\n     */\n    updateLineForTask(taskRecord, renderData) {\n        const me = this;\n        if (me.disabled) {\n            return;\n        }\n        const row = me.client.getRowFor(taskRecord);\n        if (row) {\n            const toRemove = [];\n            me.lineSegments.forEach(el => {\n                if (me.segmentBelongsToTask(el, taskRecord)) {\n                    toRemove.push(el);\n                    el.remove();\n                }\n            });\n            ArrayHelper.remove(me.lineSegments, ...toRemove);\n            me.getLineSegmentRenderData(row, me.getRenderData(), renderData)\n                .forEach(line => me.drawLineSegment(line));\n        }\n    }\n    /**\n     * Draws line for a given row\n     * @param {Grid.row.Row} row Row instance\n     * @param {Object} data Output from {@link #function-getRenderData} method\n     * @param {Object} [renderData] Optional render data, which is an object where keys are task ids and values are\n     * new task start date\n     * @internal\n     */\n    getLineSegmentRenderData(row, data, renderData = {}) {\n        const\n            me                      = this,\n            { statusDateX, viewXY } = data,\n            taskRecord              = me.client.getRecordFromElement(row.elements.normal),\n            taskId                  = taskRecord.id,\n            lineDefinitions         = [];\n        let point;\n        if (me.isStatusLineTask(taskRecord, renderData[taskRecord.id])) {\n            point = me.calculateCoordinateForTask(taskRecord, viewXY);\n            // If multiple rows are affected by event update, it could happen, that point\n            // could not be resolved\n            point && lineDefinitions.push(\n                {\n                    dataset : { taskId },\n                    x1      : statusDateX,\n                    y1      : row.top,\n                    x2      : point.x,\n                    y2      : point.y\n                },\n                {\n                    dataset : { taskId },\n                    x1      : point.x,\n                    y1      : point.y,\n                    x2      : statusDateX,\n                    y2      : row.bottom\n                }\n            );\n        }\n        // otherwise we render vertical status line\n        if (!point) {\n            lineDefinitions.push(\n                {\n                    dataset : { taskId },\n                    x1      : statusDateX,\n                    y1      : row.top,\n                    x2      : statusDateX,\n                    y2      : row.bottom\n                }\n            );\n        }\n        return lineDefinitions;\n    }\n    /**\n     * Draws line on svg canvas\n     * @param {Object} data Line render data. Output from {@link #function-getLineSegmentRenderData}\n     * @returns {Element}\n     * @internal\n     */\n    drawLineSegment(data) {\n        const me = this;\n        me.lineSegments.push(DomHelper.createElement(Object.assign({\n            tag    : 'line',\n            ns     : 'http://www.w3.org/2000/svg',\n            // cannot use className when namespace is provided\n            class  : me.lineCls,\n            parent : me.getSVGCanvas()\n        }, data)));\n    }\n    /**\n     * Returns true if task should be connected to the progress line.\n     * @param {Gantt.model.TaskModel} taskRecord\n     * @param {Date} [startDate] Provide to check if task record should be connected to the progress line if it'd\n     * start then\n     * @returns {Boolean}\n     * @internal\n     */\n    isStatusLineTask(taskRecord, startDate) {\n        const statusDate = this.statusDate;\n        startDate = startDate || taskRecord.startDate;\n        // task should be visible and not inactive\n        return taskRecord?.project && !taskRecord.inactive && this.client.timeAxis.isTimeSpanInAxis(taskRecord) &&\n            // - is in progress\n            (taskRecord.isInProgress ||\n                // ...or is not started and its start date is before statusDate\n                (!taskRecord.isStarted && startDate < statusDate) ||\n                // ...or is finished and its start date is after statusDate\n                (taskRecord.isCompleted && startDate > statusDate));\n    }\n    /**\n     * This method will calculate point inside task element to be connected with line.\n     * @param {Gantt.model.TaskModel} record\n     * @param {Number[]} translateBy View xy coordinates to calculate relative point position\n     * @returns {Object} Object containing coordinates for point in progress line, or undefined if no progress bar el is found\n     * @private\n     */\n    calculateCoordinateForTask(record, translateBy) {\n        const\n            { client }     = this,\n            node           = client.getElementFromTaskRecord(record),\n            isZeroDuration = record.milestone,\n            progressBarEl  = isZeroDuration ? node : node?.querySelector('.b-task-percent-bar');\n        if (progressBarEl) {\n            const\n                box       = progressBarEl.getBoundingClientRect(),\n                totalSize = client.timeAxisViewModel.totalSize;\n            return {\n                x : Math.min((isZeroDuration ? box.left : box.right) + translateBy[0], totalSize),\n                y : box.top + box.height / 2 + translateBy[1]\n            };\n        }\n    }\n    // endregion\n}\nProgressLine._$name = 'ProgressLine'; GridFeatureManager.registerFeature(ProgressLine);\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport AbstractTimeRanges from '../../Scheduler/feature/AbstractTimeRanges.js';\nimport AttachToProjectMixin from '../../Scheduler/data/mixin/AttachToProjectMixin.js';\n/**\n * @module Gantt/feature/ProjectLines\n */\n/**\n * This feature draws two vertical lines in the schedule area, indicating project start/end dates.\n *\n * {@inlineexample Gantt/guides/gettingstarted/basic.js}\n *\n * This feature is **enabled** by default\n *\n * @extends Scheduler/feature/TimeRanges\n * @demo Gantt/advanced\n * @classtype projectLines\n * @feature\n */\nexport default class ProjectLines extends AbstractTimeRanges.mixin(AttachToProjectMixin) {\n    //region Config\n    static get $name() {\n        return 'ProjectLines';\n    }\n    static get defaultConfig() {\n        return {\n            showHeaderElements : true,\n            cls                : 'b-gantt-project-line'\n        };\n    }\n    //endregion\n    //region Project\n    attachToProject(project) {\n        super.attachToProject(project);\n        project.ion({\n            name    : 'project',\n            refresh : this.onProjectRefresh,\n            thisObj : this\n        });\n    }\n    //endregion\n    //region Init\n    // We must override the TimeRanges superclass implementation which ingests the client's project's\n    // timeRangeStore. We implement our own store\n    startConfigure() {}\n    updateLocalization() {\n        this.renderRanges();\n    }\n    //endregion\n    onProjectRefresh() {\n        this.renderRanges();\n    }\n    shouldRenderRange(range) {\n        const { client } = this;\n        return client.timeAxis.dateInAxis(range.startDate);\n    }\n    get timeRanges() {\n        const { startDate, endDate } = this.client.project;\n        return startDate && endDate ? [\n            {\n                name : this.L('L{Project Start}'),\n                startDate\n            },\n            {\n                name      : this.L('L{Project End}'),\n                startDate : endDate\n            }\n        ] : [];\n    }\n}\nProjectLines._$name = 'ProjectLines'; GridFeatureManager.registerFeature(ProjectLines, true, 'Gantt');\n", "import TooltipBase from '../../Scheduler/feature/base/TooltipBase.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\n/**\n * @module Gantt/feature/Rollups\n */\nconst\n    rollupCls      = 'b-task-rollup',\n    rollupSelector = `.${rollupCls}`;\n/**\n * If the task's {@link Gantt/model/TaskModel#field-rollup} data field is set to true, it displays a small bar or diamond below its summary task in the timeline.\n * Each of the rollup elements show a tooltip when hovering it with details of the task.\n * The tooltip content is customizable, see {@link #config-template} config for details.\n *\n * To edit the rollup data field, use {@link Gantt/column/RollupColumn} or a checkbox on Advanced tab of {@link Gantt/widget/TaskEditor}.\n *\n * This feature is **disabled** by default.\n * For info on enabling it, see {@link Grid/view/mixin/GridFeatures}.\n *\n * {@inlineexample Gantt/feature/Rollups.js}\n *\n * @demo Gantt/rollups\n *\n * @extends Scheduler/feature/base/TooltipBase\n * @classtype rollups\n * @feature\n */\nexport default class Rollups extends TooltipBase {\n    //region Config\n    static get $name() {\n        return 'Rollups';\n    }\n    // Default configuration.\n    static get defaultConfig() {\n        return {\n            cls         : 'b-gantt-task-tooltip',\n            align       : 't-b',\n            forSelector : rollupSelector\n        };\n    }\n    static get pluginConfig() {\n        return {\n            chain : [\n                // onTaskDataGenerated for decorating task with rollups\n                'onTaskDataGenerated',\n                // render for creating tooltip (in TooltipBase)\n                'onInternalPaint'\n            ]\n        };\n    }\n    //endregion\n    //region Init & destroy\n    construct(gantt, config) {\n        this.tipId = `${gantt.id}-rollups-tip`;\n        super.construct(gantt, config);\n    }\n    attachToTaskStore(store) {\n        this.detachListeners('taskStore');\n        store?.ion({\n            name    : 'taskStore',\n            update  : 'onStoreUpdateRecord',\n            thisObj : this\n        });\n    }\n    doDestroy() {\n        this.attachToTaskStore(null);\n        super.doDestroy();\n    }\n    doDisable(disable) {\n        const me = this;\n        if (me.tooltip) {\n            me.tooltip.disabled = disable;\n        }\n        // attach/detach listeners\n        me.attachToTaskStore(disable ? null : me.client.taskStore);\n        // Hide or show the rollup elements\n        me.client.refresh();\n        super.doDisable(disable);\n    }\n    //endregion\n    getTipHtml({ activeTarget, event }) {\n        const\n            { client }     = this,\n            task           = client.resolveTaskRecord(activeTarget),\n            rawElements    = document.elementsFromPoint(event.pageX + globalThis.pageXOffset, event.pageY + globalThis.pageYOffset),\n            rollupElements = rawElements\n                .filter(e => e.classList.contains(rollupCls))\n                .sort((lhs, rhs) => parseInt(lhs.dataset.index, 10) - parseInt(rhs.dataset.index, 10)),\n            children       = rollupElements.map(el => task.children[parseInt(el.dataset.index, 10)]);\n        return this.template({\n            task,\n            children\n        });\n    }\n    /**\n     * Template (a function accepting event data and returning a string) used to display info in the tooltip.\n     * The template will be called with an object as with fields as detailed below\n     *\n     * @config {Function}\n     * @param {Object} data A data block containing the information needed to create tooltip content.\n     * @param {Gantt.model.TaskModel} data.task The summary task to rollup to.\n     * @param {Gantt.model.TaskModel[]} data.children The array of rollup tasks.\n     * @returns {String} String representing the HTML markup\n     */\n    template({ children }) {\n        const\n            me         = this,\n            { client } = me,\n            pieces     = [];\n        children.map((child, index) => {\n            const\n                { startDate, endDate } = child,\n                startText              = client.getFormattedDate(startDate),\n                endDateValue           = client.getDisplayEndDate(endDate, startDate),\n                endText                = client.getFormattedDate(endDateValue);\n            pieces.push(\n                `<div class=\"b-gantt-task-title ${index ? 'b-follow-on' : ''}\">${StringHelper.encodeHtml(child.name)}</div><table>`,\n                `<tr><td>${me.L('L{TaskTooltip.Start}')}:</td><td>${me.clockTemplate.template({\n                    date : startDate,\n                    text : startText,\n                    cls  : 'b-sch-tooltip-startdate'\n                })}</td></tr>`,\n                `<tr><td>${me.L('L{TaskTooltip.End}')}:</td><td>${child.isMilestone ? '' : me.clockTemplate.template({\n                    date : endDateValue,\n                    text : endText,\n                    cls  : 'b-sch-tooltip-enddate'\n                })}</td></tr></table>`\n            );\n        });\n        return pieces.join('');\n    }\n    //region Events\n    onStoreUpdateRecord({ record, changes }) {\n        // We don't need this listener in case the gantt is loading data\n        if (!this.client.project.propagatingLoadChanges) {\n            // If it's a size or position change, then sync that parent's rollups\n            if (record.parent && (changes.rollup || changes.startDate || changes.endDate)) {\n                this.client.taskRendering.redraw(record.parent);\n            }\n        }\n    }\n    onTaskDataGenerated({ taskRecord, left, wrapperChildren, style }) {\n        // Not checking taskRecord.isParent as it might be a lazy loaded parent (set to `true`)\n        if (!this.disabled && Array.isArray(taskRecord.children)) {\n            const\n                // Shortest last in DOM, so they are on top in the stacking order so that you can hover\n                // them if they overlap with longer ones. Otherwise, they might be below and won't trigger\n                // their own mouseover events.\n                children = taskRecord.children.slice().sort((lhs, rhs) => rhs.durationMS - lhs.durationMS);\n            wrapperChildren.push({\n                className : `${rollupCls}-wrap`,\n                dataset   : {\n                    taskFeature : 'rollups'\n                },\n                children : children.map(child => {\n                    // skip inactive children if the task itself is active, skip unscheduled tasks\n                    // (might be unscheduled because of delayed calculations)\n                    if (child.rollup && child.isScheduled && (!child.inactive || taskRecord.inactive)) {\n                        const positionData = this.client.getSizeAndPosition(child);\n                        if (!positionData) {\n                            return null;\n                        }\n                        const { position, width } = positionData;\n                        return {\n                            dataset : {\n                                index        : child.parentIndex,\n                                rollupTaskId : child.id\n                            },\n                            className : {\n                                [rollupCls]   : rollupCls,\n                                [child.cls]   : child.cls,\n                                'b-milestone' : child.isMilestone,\n                                'b-inactive'  : child.inactive\n                            },\n                            style : {\n                                style,\n                                width : child.isMilestone ? null : width,\n                                left  : position - left\n                            }\n                        };\n                    }\n                    return null;\n                }),\n                syncOptions : {\n                    syncIdField : 'rollupTaskId'\n                }\n            });\n        }\n    }\n    //endregion\n}\nRollups._$name = 'Rollups'; GridFeatureManager.registerFeature(Rollups, false, 'Gantt');\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\n/**\n * @module Gantt/feature/ScrollButtons\n */\n/**\n *\n * This feature injects buttons in each row that scrolls the task bar into view. It can optionally show a label along with the\n * button, using the {@link #config-labelRenderer}.\n *\n * ```javascript\n * new Gantt({\n *     appendTo          : 'container',\n *     features : {\n *         scrollButtons : {\n *             labelRenderer({ taskRecord }) {\n *                 return `${taskRecord.wbsCode} ${StringHelper.encodeHtml(taskRecord.name)}`;\n *             }\n *         }\n *     }\n * ```\n *\n * {@inlineexample Gantt/feature/ScrollButtons.js}\n *\n * This feature is **disabled** by default.\n *\n * @extends Core/mixin/InstancePlugin\n * @demo Gantt/scroll-buttons\n * @classtype scrollButtons\n * @feature\n */\nexport default class ScrollButtons extends InstancePlugin {\n    //region Config\n    static $name = 'ScrollButtons';\n    // Default configuration.\n    static configurable = {\n        /**\n         * The icon to use for the button scrolling into the past\n         * @config {String}\n         * @default\n         */\n        backwardIconCls : 'b-icon-previous',\n        /**\n         The icon to use for the button scrolling into the future\n         * @config {String}\n         * @default\n         */\n        forwardIconCls : 'b-icon-next',\n        /**\n         * A method letting you render a label above the button.\n         *\n         * {@note}When returning content, be sure to consider how that content should be encoded to avoid XSS\n         * (Cross-Site Scripting) attacks. This is especially important when including user-controlled data such as\n         * the task's `name`. The function {@link Core.helper.StringHelper#function-encodeHtml-static} as well as\n         * {@link Core.helper.StringHelper#function-xss-static} can be helpful in these cases.{/@note}\n         *\n         * @config {Function} labelRenderer\n         * @param {Object} detail An object that contains data about the event being rendered.\n         * @param {Gantt.model.TaskModel} detail.taskRecord The task record\n         * @returns {String} The text or HTML\n         */\n        labelRenderer : null,\n        /**\n         * A config object describing how the scroll action should be performed.\n         * @config {BryntumScrollOptions}\n         */\n        scrollOptions : { animate : { duration : 600, easing : 'easeTo' }, y : false, edgeOffset : 100 }\n    };\n    static pluginConfig = {\n        chain : [\n            'onPaint',\n            'onElementClick'\n        ]\n    };\n    //endregion\n    doDisable(disable) {\n        this.client.refresh();\n        super.doDisable(disable);\n    }\n    onPaint({ firstPaint }) {\n        if (firstPaint) {\n            const\n                { client }         = this,\n                { timeAxisColumn } = client;\n            this.client.timeAxisSubGrid.scrollable.ion({ scrollend : () => client.refreshColumn(timeAxisColumn) });\n            timeAxisColumn.externalRenderer = this.renderer.bind(this);\n        }\n    }\n    renderer({ record, grid }) {\n        const\n            taskBefore = record.endDate < grid.visibleDateRange.startDate,\n            taskAfter  = record.startDate > grid.visibleDateRange.endDate;\n        return {\n            class    : 'b-scroll-buttons-container',\n            children : [{\n                class    : 'b-scroll-buttons-content',\n                children : [\n                    this.labelRenderer ? {\n                        tag  : 'label',\n                        html : this.labelRenderer?.({ taskRecord : record })\n                    } : null,\n                    record.isScheduled ? {\n                        tag       : 'i',\n                        className : {\n                            'b-icon'               : 1,\n                            'b-scroll-button'      : 1,\n                            [this.backwardIconCls] : taskBefore,\n                            [this.forwardIconCls]  : taskAfter,\n                            'b-task-visible'       : !taskBefore && !taskAfter\n                        }\n                    } : null\n                ]\n            }]\n        };\n    }\n    onElementClick({ target }) {\n        if (target.matches('.b-scroll-button')) {\n            const\n                { client } = this,\n                record     = client.getRecordFromElement(target);\n            client.scrollTaskIntoView(record, Object.assign(this.scrollOptions, { block : target.classList.contains(this.forwardIconCls) ? 'end' : 'start' }));\n        }\n    }\n}\nScrollButtons._$name = 'ScrollButtons'; GridFeatureManager.registerFeature(ScrollButtons, false, 'Gantt');\n", "import TimelineSummary from '../../Scheduler/feature/TimelineSummary.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\n/**\n * @module Gantt/feature/Summary\n */\n/**\n * Describes a summary level for the time axis in Gantt\n * @typedef GanttSummaryOptions\n * @property {String} label Label for the summary\n * @property {Function} renderer Function to calculate the and render the summary value\n * @property {Date} startDate Tick start date\n * @property {Date} endDate Tick end date\n * @property {Gantt.data.TaskStore} taskStore Task store\n * @property {Gantt.data.TaskStore} store Display store, for when Gantt is configured to display tasks from another\n * store than its task store (for example when using the TreeGroup feature)\n */\n/**\n * A feature displaying a summary bar in the grid footer.\n *\n * ## Summaries in the locked grid\n * For regular columns in the locked section - specify type of summary on columns, available types are:\n * <dl class=\"wide\">\n * <dt>sum <dd>Sum of all values in the column\n * <dt>add <dd>Alias for sum\n * <dt>count <dd>Number of rows\n * <dt>countNotEmpty <dd>Number of rows containing a value\n * <dt>average <dd>Average of all values in the column\n * <dt>function <dd>A custom function, used with store.reduce. Should take arguments (sum, record)\n * </dl>\n * Columns can also specify a {@link Grid.column.Column#config-summaryRenderer} to format the calculated sum.\n *\n * ## Summaries in the time axis grid\n *\n * To output summaries in the ticks of the time axis summary bar, either provide a {@link #config-renderer} or use\n * {@link #config-summaries}. The `renderer` method provides the current tick `startDate` and `endDate` which you\n * can use to output the data you want to present in each summary cell.\n *\n * ```javascript\n * features : {\n *     summary     : {\n *         // Find all intersecting task and render the count in each cell\n *         renderer: ({ taskStore, startDate, endDate }) => {\n *             const intersectingTasks = taskStore.query(task =>\n *                 // Gantt by default renders tasks as early as possible, if loaded with un-normalized data there\n *                 // might not be any start and end dates calculated yet\n *                 task.isScheduled &&\n *                 // Find tasks that intersect the current tick\n *                 DateHelper.intersectSpans(task.startDate, task.endDate, startDate, endDate)\n *             );\n *\n *             return intersectingTasks.length;\n *         }\n *     }\n * }\n * ```\n *\n * {@inlineexample Gantt/feature/Summary.js}\n *\n * This feature is <strong>disabled</strong> by default.\n *\n * @extends Scheduler/feature/TimelineSummary\n * @classtype summary\n * @feature\n * @demo Gantt/summary\n *\n * @typings Grid.feature.Summary -> Grid.feature.GridSummary\n * @typings Scheduler.feature.Summary -> Scheduler.feature.SchedulerSummary\n */\nexport default class Summary extends TimelineSummary {\n    //region Config\n    static get $name() {\n        return 'Summary';\n    }\n    static get configurable() {\n        return {\n            /**\n             * Array of summary configs which consists of a label and a {@link #config-renderer} function\n             *\n             * ```javascript\n             * new Gantt({\n             *     features : {\n             *         summary : {\n             *             summaries : [\n             *                 {\n             *                     label : 'Label',\n             *                     renderer : ({ startDate, endDate, taskStore }) => {\n             *                         // return display value\n             *                         returns '<div>Renderer output</div>';\n             *                     }\n             *                 }\n             *             ]\n             *         }\n             *     }\n             * });\n             * ```\n             *\n             * @config {GanttSummaryOptions[]}\n             */\n            summaries : null,\n            /**\n             * Renderer function for a single time axis tick. Should calculate a sum and return HTML as a result.\n             *\n             * ```javascript\n             * new Gantt({\n             *     features : {\n             *         summary : {\n             *             renderer : ({ startDate, endDate, taskStore }) => {\n             *                 // return display value\n             *                 returns '<div>Renderer output</div>';\n             *             }\n             *         }\n             *     }\n             * });\n             * ```\n             *\n             * @param {Object} context Rendering context object\n             * @param {Date} context.startDate Tick start date\n             * @param {Date} context.endDate Tick end date\n             * @param {Gantt.data.TaskStore} context.taskStore Task store\n             * @param {Gantt.data.TaskStore} context.store Display store, for when Gantt is configured to display tasks from\n             *   another store than its task store (for example when using the TreeGroup feature)\n             * @returns {String} Html content\n             * @config {Function}\n             */\n            renderer : null\n        };\n    }\n    // Plugin configuration. This plugin chains some of the functions in Grid.\n    static get pluginConfig() {\n        const config = super.pluginConfig;\n        config.chain.push('updateTaskStore', 'bindStore');\n        return config;\n    }\n    //endregion\n    //region Init\n    construct(gantt, config) {\n        super.construct(gantt, config);\n        // Feature might be run from Grid (in docs), should not crash\n        if (gantt.isGanttBase) {\n            this.updateTaskStore(gantt.taskStore);\n        }\n    }\n    bindStore() {\n        this.updateTimelineSummaries();\n    }\n    //endregion\n    //region Render\n    updateTaskStore(taskStore) {\n        this.detachListeners('summaryTaskStore');\n        taskStore.ion({\n            name    : 'summaryTaskStore',\n            filter  : 'updateTimelineSummaries',\n            thisObj : this\n        });\n    }\n    /**\n     * Updates summaries.\n     * @private\n     */\n    updateTimelineSummaries() {\n        const\n            me                = this,\n            {\n                client,\n                summaries\n            }                 = me,\n            { timeAxis }      = client,\n            summaryContainer  = me.summaryBarElement;\n        if (summaryContainer && client.isEngineReady) {\n            Array.from(summaryContainer.children).forEach((element, i) => {\n                const tick = timeAxis.getAt(i);\n                let html    = '',\n                    tipHtml = `<header>${me.L('L{Summary for}', client.getFormattedDate(tick.startDate))}</header>`;\n                summaries.forEach(config => {\n                    const\n                        value     = config.renderer({\n                            startDate     : tick.startDate,\n                            endDate       : tick.endDate,\n                            taskStore     : client.taskStore,\n                            store         : client.store,\n                            resourceStore : client.resourceStore,\n                            gantt         : client,\n                            element\n                        }),\n                        valueHtml = `<div class=\"b-timeaxis-summary-value\">${value ?? '&nbsp;'}</div>`;\n                    if (summaries.length > 1 || value !== '') {\n                        html += valueHtml;\n                    }\n                    tipHtml += `<label>${config.label || ''}</label>` + valueHtml;\n                });\n                element.innerHTML = html;\n                element._tipHtml  = tipHtml;\n            });\n        }\n    }\n}\n// Override Grids Summary with this improved version\nSummary._$name = 'Summary'; GridFeatureManager.registerFeature(Summary, false, 'Gantt');\n", "import RowCopyPaste from '../../Grid/feature/RowCopyPaste.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport TransactionalFeature from '../../Scheduler/feature/mixin/TransactionalFeature.js';\n/**\n * @module Gantt/feature/TaskCopyPaste\n */\n/**\n * Allow using [Ctrl/CMD + C/X] and [Ctrl/CMD + V] to copy/cut and paste tasks. You can configure how a newly pasted record\n * is named using {@link #function-generateNewName}\n *\n * This feature is **enabled** by default\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         taskCopyPaste : true\n *     }\n * });\n * ```\n *\n * ## Keyboard shortcuts\n *\n * By default, this feature will react to Ctrl+C, Ctrl+X and Ctrl+V for standard clipboard actions.\n * You can reconfigure the keys used to trigger these actions, see {@link #config-keyMap} for more details.\n *\n * {@inlineexample Gantt/feature/TaskCopyPaste.js}\n *\n * @extends Grid/feature/RowCopyPaste\n * @classtype taskCopyPaste\n * @feature\n */\nexport default class TaskCopyPaste extends TransactionalFeature(RowCopyPaste) {\n    static $name = 'TaskCopyPaste';\n    static type = 'taskCopyPaste';\n    static configurable = {\n        copyRecordText  : 'L{copyTask}',\n        cutRecordText   : 'L{cutTask}',\n        pasteRecordText : 'L{pasteTask}'\n    };\n    //region Events\n    /**\n     * Fires on the owning Gantt after a paste action is performed.\n     * @event paste\n     * @on-owner\n     * @param {Gantt.view.Gantt} source Owner gantt\n     * @param {Gantt.model.TaskModel} referenceRecord The reference task record, the clipboard task records will\n     * be pasted above this row.\n     * @param {Gantt.model.TaskModel[]} records The pasted task records\n     * @param {Gantt.model.TaskModel[]} originalRecords For a copy action, these are the records that were copied.\n     * For cut action, this is same as the `records` param.\n     * @param {Boolean} isCut `true` if this is a cut action\n     * @param {String} entityName 'task' to distinguish this event from other beforePaste events\n     */\n    /**\n     * Fires on the owning Gantt before a paste action is performed, return `false` to prevent the action\n     * @event beforePaste\n     * @preventable\n     * @on-owner\n     * @param {Gantt.view.Gantt} source Owner Gantt\n     * @param {Gantt.model.TaskModel} referenceRecord The reference task record, the clipboard task records will\n     * be pasted above this row.\n     * @param {Gantt.model.TaskModel[]} records The records about to be pasted\n     * @param {Boolean} isCut `true` if this is a cut action\n     * @param {String} entityName 'task' to distinguish this event from other beforePaste events\n     */\n    //endregion\n    construct(gantt, config) {\n        super.construct(gantt, config);\n        gantt.ion({\n            beforeRenderTask : 'onBeforeRenderTask',\n            thisObj          : this\n        });\n    }\n    // Used in events to separate events from different features from each other\n    entityName = 'task';\n    //region Display store adjustments\n    populateCellMenu({ record, items }) {\n        super.populateCellMenu(...arguments);\n        // No copy pasting when using a \"display store\"\n        if (this.client.usesDisplayStore) {\n            items.cut && (items.cut.disabled = true);\n            items.copy && (items.copy.disabled = true);\n            items.paste && (items.paste.disabled = true);\n        }\n    }\n    isActionAvailable({ key, action, event }) {\n        const superIsActionAvailable = super.isActionAvailable({ key, action, event });\n        if (superIsActionAvailable !== undefined) {\n            return superIsActionAvailable && this.client.usesDisplayStore;\n        }\n    }\n    //endregion\n    setIsCut(taskRecord) {\n        super.setIsCut(...arguments);\n        // After a row is cut or copied - also refresh the associated task bar\n        this.client.taskRendering.redraw(taskRecord);\n    }\n    onBeforeRenderTask({ renderData }) {\n        renderData.cls['b-cut-row'] = renderData.row.cls['b-cut-row'];\n    }\n    extractParents(taskRecords, idMap, generateNames = true) {\n        const result = super.extractParents(taskRecords, idMap, generateNames);\n        if (!this.isCut) {\n            this.depsToCopy = this.extractDependencies(taskRecords, idMap);\n        }\n        return result;\n    }\n    async insertCopiedRecords(toInsert, recordReference) {\n        const me = this;\n        await me.startFeatureTransaction();\n        const result = await super.insertCopiedRecords(toInsert, recordReference);\n        toInsert.forEach(parent => parent.refreshWbs({ deep : true, useOrderedTree : true }));\n        me.client.dependencyStore.add(me.depsToCopy);\n        delete me.depsToCopy;\n        await me.finishFeatureTransaction();\n        return result;\n    }\n    /**\n     * Extract dependencies from passed records. The result will include only deps via records and not include deps\n     * with foreign records.\n     * @param {Core.data.Model[]} taskRecords array of records to extract dependencies from\n     * @param {Object} idMap Map linking original node id with its copy\n     * @returns {Object[]} array of dependencies settings via passed records to apply using applyDependencies method\n     * @private\n     */\n    extractDependencies(taskRecords, idMap) {\n        // This map is required to see which tasks are already connected\n        const depsMap = {};\n        return taskRecords.reduce((deps, task) => {\n            task.predecessors.forEach(predecessor => {\n                const key = predecessor.id;\n                if (!(key in depsMap) && taskRecords.includes(predecessor.fromEvent)) {\n                    depsMap[key] = true;\n                    deps.push(Object.assign({}, predecessor.data, {\n                        id        : undefined,\n                        to        : undefined,\n                        toEvent   : idMap[task.id].id,\n                        toTask    : undefined,\n                        from      : undefined,\n                        fromEvent : idMap[predecessor.fromEvent.id].id,\n                        fromTask  : undefined\n                    }));\n                }\n            });\n            task.successors.forEach(successor => {\n                const key = successor.id;\n                if (!(key in depsMap) && taskRecords.includes(successor.toEvent)) {\n                    depsMap[key] = true;\n                    deps.push(Object.assign({}, successor.data, {\n                        id        : undefined,\n                        to        : undefined,\n                        toEvent   : idMap[successor.toEvent.id].id,\n                        toTask    : undefined,\n                        from      : undefined,\n                        fromEvent : idMap[task.id].id,\n                        fromTask  : undefined\n                    }));\n                }\n            });\n            return deps;\n        }, []);\n    }\n}\nTaskCopyPaste._$name = 'TaskCopyPaste'; GridFeatureManager.registerFeature(TaskCopyPaste, true, 'Gantt');\n", "import DragBase from '../../Scheduler/feature/base/DragBase.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\nimport ArrayHelper from '../../Core/helper/ArrayHelper.js';\nimport EventHelper from '../../Core/helper/EventHelper.js';\nimport TransactionalFeature from '../../Scheduler/feature/mixin/TransactionalFeature.js';\n/**\n * @module Gantt/feature/TaskDrag\n */\n/**\n * @typedef ValidationMessage\n * @property {Boolean} valid `true` for valid, `false` for invalid\n * @property {String} message Validation message\n */\n/**\n * Allows user to drag and drop tasks within Gantt, to change their start date.\n *\n * ## Constraining the drag drop area\n *\n * You can constrain how the dragged task is allowed to move by using {@link Gantt.view.Gantt#config-getDateConstraints}.\n * This method is configured on the Gantt instance and lets you define the date range for the dragged task programmatically.\n *\n * ## Drag drop tasks from outside\n *\n * Dragging unplanned tasks from an external grid is a very popular use case. Please refer to the [Drag from grid demo](../examples/drag-from-grid)\n * and study the [Drag from grid guide](#Gantt/guides/dragdrop/drag_tasks_from_grid.md) to learn more.\n *\n * ## Validating a drag drop operation\n *\n * It is easy to programmatically decide what is a valid drag drop operation. Use the {@link #config-validatorFn}\n * and return either `true` / `false` (optionally a message to show to the user).\n *\n * ```javascript\n * features : {\n *     taskDrag : {\n *        validatorFn(draggedTaskRecords, newStartDate) {\n *            const valid = Date.now() >= newStartDate;\n *\n *            return {\n *                valid,\n *                message : valid ? '' : 'Not allow to drag a task into the past'\n *            };\n *        }\n *     }\n * }\n * ```\n *\n * If you instead want to do a single validation upon drop, you can listen to {@link #event-beforeTaskDropFinalize}\n * and set the `valid` flag on the context object provided.\n *\n * ```javascript\n * const gantt = new Gantt({\n *     listeners : {\n *         beforeTaskDropFinalize({ context }) {\n *             const { taskRecords } = context;\n *             // Don't allow dropping a task in the past\n *             context.valid = Date.now() <= eventRecords[0].startDate;\n *         }\n *     }\n * });\n * ```\n *\n * ## Preventing drag of certain tasks\n *\n * To prevent certain tasks from being dragged, you have two options. You can set {@link Gantt.model.TaskModel#field-draggable}\n * to `false` in your data, or you can listen for the {@link Gantt.view.Gantt#event-beforeTaskDrag} event and\n * return `false` to block the drag.\n *\n * ```javascript\n * new Gantt({\n *     listeners : {\n *         beforeTaskDrag({ taskRecord }) {\n *             // Only allow dragging tasks that has not started\n *             return taskRecord.percentDone === 0;\n *         }\n *     }\n * })\n * ```\n *\n * ## Customizing the drag drop tooltip\n *\n * To show custom HTML in the tooltip, please see the {@link #config-tooltipTemplate} config. Example:\n *\n * ```javascript\n * features: {\n *     taskDrag: {\n *         // A minimal start date tooltip\n *         tooltipTemplate : ({ taskRecord, startDate }) => {\n *             return DateHelper.format(startDate, 'HH:mm');\n *         }\n *     }\n * }\n * ```\n *\n * This feature is **enabled** by default\n *\n * @extends Scheduler/feature/base/DragBase\n * @demo Gantt/basic\n * @classtype taskDrag\n * @feature\n */\nexport default class TaskDrag extends TransactionalFeature(DragBase) {\n    //region Config\n    static get $name() {\n        return 'TaskDrag';\n    }\n    static get configurable() {\n        return {\n            /**\n             * An empty function by default, but provided so that you can perform custom validation on\n             * the item being dragged. This function is called during the drag and drop process and also after the drop is made.\n             * Return true if the new position is valid, false to prevent the drag.\n             * @param {Gantt.model.TaskModel[]} taskRecords An array of tasks being dragged\n             * @param {Date} startDate The new start date\n             * @param {Number} duration The duration of the item being dragged\n             * @param {Event} event The event object\n             * @returns {Boolean|ValidationMessage} `true` if this validation passes, `false` if it does not.\n             *\n             * Or an object with 2 properties: `valid` -  Boolean `true`/`false` depending on validity,\n             * and `message` - String with a custom error message to display when invalid.\n             * @config {Function}\n             */\n            validatorFn : (taskRecords, startDate, duration, event) => true,\n            /**\n             * `this` reference for the validatorFn\n             * @config {Object}\n             */\n            validatorFnThisObj : null,\n            /**\n             * Gets or sets special key to activate successor pinning behavior. Supported values are:\n             * * 'ctrl'\n             * * 'shift'\n             * * 'alt'\n             * * 'meta'\n             *\n             * Assign false to disable it.\n             * @member {Boolean|String} pinSuccessors\n             */\n            /**\n             * Set to true to enable dragging task while pinning dependent tasks. By default, this behavior is activated\n             * if you hold CTRL key during drag. Alternatively, you may provide key name to use. Supported values are:\n             * * 'ctrl'\n             * * 'shift'\n             * * 'alt'\n             * * 'meta'\n             *\n             * **Note**: Only supported in forward-scheduled project\n             *\n             * @config {Boolean|String}\n             * @default\n             */\n            pinSuccessors : false,\n            tooltipCls : 'b-gantt-taskdrag-tooltip',\n            capitalizedEventName : null\n        };\n    }\n    afterConstruct() {\n        this.capitalizedEventName = this.capitalizedEventName || this.client.capitalizedEventName;\n        super.afterConstruct(...arguments);\n    }\n    changePinSuccessors(value) {\n        return EventHelper.toSpecialKey(value);\n    }\n    /**\n     * Template used to generate drag tooltip contents.\n     * ```javascript\n     * const gantt = new Gantt({\n     *     features : {\n     *         taskDrag : {\n     *             tooltipTemplate({taskRecord, startText}) {\n     *                 return `${taskRecord.name}: ${startText}`\n     *             }\n     *         }\n     *     }\n     * });\n     * ```\n     * @config {Function} tooltipTemplate\n     * @param {Object} data Tooltip data\n     * @param {Gantt.model.TaskModel} data.taskRecord\n     * @param {Boolean} data.valid Currently over a valid drop target or not\n     * @param {Date} data.startDate New start date\n     * @param {Date} data.endDate New end date\n     * @returns {String}\n     */\n    //endregion\n    //region Events\n    /**\n     * Fires on the owning Gantt before task dragging starts. Return false to prevent the action.\n     * @event beforeTaskDrag\n     * @preventable\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {Gantt.model.TaskModel} taskRecord\n     * @param {Event} event The native browser event\n     */\n    /**\n     * Fires on the owning Gantt when task dragging starts\n     * @event taskDragStart\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {Gantt.model.TaskModel[]} taskRecords\n     */\n    /**\n     * Fires on the owning Gantt while a task is being dragged\n     * @event taskDrag\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {Gantt.model.TaskModel[]} taskRecords\n     * @param {Date} startDate\n     * @param {Date} endDate\n     * @param {Object} dragData\n     * @param {Boolean} changed `true` if startDate has changed.\n     */\n    /**\n     * Fires on the owning Gantt to allow implementer to prevent immediate finalization by setting `data.context.async = true`\n     * in the listener, to show a confirmation popup etc\n     * ```javascript\n     * scheduler.on('beforetaskdropfinalize', ({ context }) => {\n     *     context.async = true;\n     *     setTimeout(() => {\n     *         // async code don't forget to call finalize\n     *         context.finalize();\n     *     }, 1000);\n     * })\n     * ```\n     * @event beforeTaskDropFinalize\n     * @on-owner\n     * @param {Gantt.view.Gantt} source Gantt instance\n     * @param {Object} context\n     * @param {Gantt.model.TaskModel[]} context.taskRecords The dragged task records\n     * @param {Boolean} context.valid Set this to `false` to mark the drop as invalid\n     * @param {Boolean} context.async Set true to handle dragdrop asynchronously (e.g. to wait for user\n     * confirmation)\n     * @param {Function} context.finalize Call this method to finalize dragdrop. This method accepts one\n     * argument: pass true to update records, or false, to ignore changes\n     */\n    /**\n     * Fires on the owning Gantt after a valid task drop\n     * @event taskDrop\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {Gantt.model.TaskModel[]} taskRecords\n     * @param {Boolean} isCopy\n     */\n    /**\n     * Fires on the owning Gantt after a task drop, regardless if the drop validity\n     * @event afterTaskDrop\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {Gantt.model.TaskModel[]} taskRecords\n     * @param {Boolean} valid\n     */\n    //endregion\n    //region Init\n    construct(gantt, config) {\n        this.gantt = gantt;\n        super.construct(gantt, config);\n    }\n    get store() {\n        return this.gantt.store;\n    }\n    //endregion\n    //region Drag events\n    getDraggableElement(el) {\n        return el?.closest(this.drag.targetSelector);\n    }\n    resolveEventRecord(eventElement, client = this.client) {\n        return client.resolveTaskRecord(eventElement);\n    }\n    isElementDraggable(el, event) {\n        const\n            me           = this,\n            { client }   = me,\n            eventElement = me.getDraggableElement(el);\n        if (!eventElement || me.disabled || client.readOnly) {\n            return false;\n        }\n        // displaying something resizable within the event?\n        // if (el.closest(gantt.eventSelector).matches('[class$=\"-handle\"]')) {\n        if (el.matches('[class$=\"-handle\"]')) {\n            return false;\n        }\n        const eventRecord = me.resolveEventRecord(eventElement, client);\n        // Tasks not part of project are transient tasks in a display store, which are not meant to be manipulated\n        if (!eventRecord || !eventRecord.isDraggable || eventRecord.readOnly || !eventRecord.project) {\n            return false;\n        }\n        // Hook for features that need to prevent drag\n        const prevented = client[`is${me.capitalizedEventName}ElementDraggable`]?.(\n            eventElement, eventRecord, el, event\n        ) === false;\n        return !prevented;\n    }\n    triggerBeforeEventDrag(eventType, event) {\n        return this.client.trigger(eventType, event);\n    }\n    triggerEventDrag(dragData, start) {\n        // Trigger the event on every mousemove so that features which need to adjust\n        // Such as dependencies and baselines can keep adjusted.\n        this.client.trigger('taskDrag', {\n            taskRecords : dragData.draggedEntities,\n            startDate   : dragData.startDate,\n            endDate     : dragData.endDate,\n            dragData,\n            changed     : dragData.startDate - start !== 0\n        });\n    }\n    triggerDragStart(dragData) {\n        this.client.trigger('taskDragStart', {\n            taskRecords : dragData.draggedEntities,\n            dragData\n        });\n        return this.startFeatureTransaction();\n    }\n    triggerDragAbort(dragData) {\n        this.client.trigger('taskDragAbort', {\n            taskRecords : dragData.draggedEntities,\n            context     : dragData\n        });\n    }\n    triggerDragAbortFinalized(dragData) {\n        this.rejectFeatureTransaction();\n        this.client.trigger('taskDragAbortFinalized', {\n            taskRecords : dragData.draggedEntities,\n            context     : dragData\n        });\n    }\n    triggerAfterDrop(dragData, valid) {\n        this.finishFeatureTransaction();\n        this.currentOverClient.trigger('afterTaskDrop', {\n            taskRecords : dragData.draggedEntities,\n            context     : dragData,\n            valid\n        });\n    }\n    //endregion\n    //region Drag data\n    getProductDragContext(dd) {\n        return {\n            valid : true\n        };\n    }\n    getMinimalDragData(info) {\n        const\n            element    = this.getElementFromContext(info),\n            taskRecord = this.client.resolveTaskRecord(element);\n        return { taskRecord };\n    }\n    getTaskScheduleRegion(taskRecord, dateConstraints) {\n        return this.client.getScheduleRegion(taskRecord, true, dateConstraints);\n    }\n    getDateConstraints(taskRecord) {\n        return this.client.getDateConstraints?.(taskRecord);\n    }\n    setupProductDragData(context) {\n        // debugger\n        const\n            me              = this,\n            { client }      = me,\n            element         = context.element,\n            taskRecord      = client.resolveTaskRecord(element),\n            taskRegion      = Rectangle.from(element),\n            relatedRecords  = me.getRelatedRecords(taskRecord) || [],\n            dateConstraints = me.getDateConstraints(taskRecord),\n            eventBarEls     = [element],\n            scheduleRegion  = me.getTaskScheduleRegion(taskRecord, dateConstraints);\n        me.setupConstraints(\n            scheduleRegion,\n            taskRegion,\n            client.timeAxisViewModel.snapPixelAmount,\n            Boolean(dateConstraints)\n        );\n        // Collecting additional elements to drag\n        relatedRecords.forEach(r => {\n            ArrayHelper.include(eventBarEls, client.getElementFromTaskRecord(r, false));\n        });\n        const draggedEntities = [taskRecord, ...relatedRecords];\n        return { record : taskRecord, dateConstraints, eventBarEls, draggedEntities, taskRecords : draggedEntities };\n    }\n    /**\n     * Get correct axis coordinate.\n     * @private\n     * @param {Gantt.model.TaskModel} taskRecord Record being dragged\n     * @param {HTMLElement} element Element being dragged\n     * @param {Number[]} coord XY coordinates\n     * @returns {Number|Number[]} X,Y or XY\n     */\n    getCoordinate(taskRecord, element, coord) {\n        return coord[0];\n    }\n    //endregion\n    //region Finalize & validation\n    // Called from EventDragBase to assert if a drag is valid or not\n    checkDragValidity(dragData, event) {\n        return this.validatorFn.call(this.validatorFnThisObj || this,\n            dragData.draggedEntities,\n            dragData.startDate,\n            dragData.duration,\n            event\n        );\n    }\n    /**\n     * Checks if a task can be dropped on the specified location\n     * @private\n     * @returns {Boolean} Valid (true) or invalid (false)\n     */\n    isValidDrop(dragData) {\n        return true;\n    }\n    /**\n     * Update tasks being dragged.\n     * @private\n     * @param {Object} context Drag data.\n     */\n    async updateRecords(context) {\n        const\n            {\n                startDate,\n                browserEvent,\n                draggedEntities : [taskRecord]\n            }                = context,\n            oldStartDate     = taskRecord.startDate;\n        if (this.pinSuccessors && browserEvent[this.pinSuccessors]) {\n            await taskRecord.moveTaskPinningSuccessors(startDate);\n        }\n        else {\n            await taskRecord.setStartDate(startDate, true);\n        }\n        // If not rejected (the startDate has changed), tell the world there was a successful drop.\n        if (taskRecord.startDate - oldStartDate) {\n            this.client.trigger('taskDrop', {\n                taskRecords : context.draggedEntities\n            });\n        }\n        else {\n            this.dragData.valid = false;\n        }\n    }\n    getRecordElement(task) {\n        return this.client.getElementFromTaskRecord(task, true);\n    }\n    get tipId() {\n        return `${this.client.id}-task-drag-tip`;\n    }\n    //endregion\n}\nTaskDrag._$name = 'TaskDrag'; GridFeatureManager.registerFeature(TaskDrag, true, 'Gantt');\n", "import DragCreateBase from '../../Scheduler/feature/base/DragCreateBase.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport Draggable from '../../Core/mixin/Draggable.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\n/**\n * @module Gantt/feature/TaskDragCreate\n */\n/**\n * A feature that allows the user to schedule tasks by dragging in the empty parts of the gantt timeline row. Note, this feature is only applicable for unscheduled tasks.\n *\n * {@inlineexample Gantt/feature/TaskDragCreate.js}\n *\n * This feature is **enabled** by default\n *\n * @demo Gantt/advanced\n *\n * @extends Scheduler/feature/base/DragCreateBase\n * @classtype taskDragCreate\n * @feature\n */\nexport default class TaskDragCreate extends DragCreateBase {\n    //region Config\n    static get $name() {\n        return 'TaskDragCreate';\n    }\n    static get configurable() {\n        return {\n            // used by gantt to only allow one task per row\n            preventMultiple : true\n        };\n    }\n    //endregion\n    //region Events\n    /**\n     * Fires on the owning Gantt after the task has been scheduled.\n     * @event dragCreateEnd\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {Gantt.model.TaskModel} taskRecord\n     * @param {MouseEvent} event The ending mouseup event.\n     * @param {HTMLElement} proxyElement The proxy element showing the drag creation zone.\n     */\n    /**\n     * Fires on the owning Gantt at the beginning of the drag gesture\n     * @event beforeDragCreate\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {Gantt.model.TaskModel} taskRecord\n     * @param {Date} date The datetime associated with the drag start point.\n     */\n    /**\n     * Fires on the owning Gantt after the drag start has created a proxy element.\n     * @event dragCreateStart\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {HTMLElement} proxyElement The proxy representing the new event.\n     */\n    /**\n     * Fires on the owning Gantt to allow implementer to prevent immediate finalization by setting `data.context.async = true`\n     * in the listener, to show a confirmation popup etc\n     * ```\n     *  scheduler.on('beforedragcreatefinalize', ({context}) => {\n     *      context.async = true;\n     *      setTimeout(() => {\n     *          // async code don't forget to call finalize\n     *          context.finalize();\n     *      }, 1000);\n     *  })\n     * ```\n     * @event beforeDragCreateFinalize\n     * @on-owner\n     * @param {Gantt.view.Gantt} source Scheduler instance\n     * @param {HTMLElement} proxyElement Proxy element, representing future event\n     * @param {Object} context\n     * @param {Boolean} context.async Set true to handle drag create asynchronously (e.g. to wait for user\n     * confirmation)\n     * @param {Function} context.finalize Call this method to finalize drag create. This method accepts one\n     * argument: pass true to update records, or false, to ignore changes\n     */\n    /**\n     * Fires on the owning Gantt at the end of the drag create gesture whether or not\n     * a task was scheduled by the gesture.\n     * @event afterDragCreate\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {HTMLElement} proxyElement The element showing the drag creation zone.\n     */\n    //endregion\n    //region Init\n    construct(gantt, config) {\n        this.gantt = gantt;\n        super.construct(gantt, config);\n    }\n    get store() {\n        return this.gantt.store;\n    }\n    //endregion\n    //region Gantt specific implementation\n    setupDragContext(event) {\n        const { client } = this;\n        // Only mousedown on an empty cell can initiate drag-create\n        if (event.target.closest?.(`.${client.timeAxisColumn.cellCls}`)) {\n            const taskRecord = client.getRecordFromElement(event.target);\n            // And there must be a task backing the cell.\n            if (taskRecord) {\n                // Skip the EventResize's setupDragContext. We want the base one.\n                const result = Draggable().prototype.setupDragContext.call(this, event);\n                result.scrollManager = client.scrollManager;\n                result.taskRecord = result.rowRecord = taskRecord;\n                return result;\n            }\n        }\n    }\n    startDrag(drag) {\n        // This flag must be set in startDrag\n        const\n            draggingEnd  = this.draggingEnd = drag.event.pageX > drag.startEvent.pageX,\n            { client }   = this,\n            { timeAxis } = client,\n            {\n                mousedownDate,\n                taskRecord,\n                date\n            }            = drag;\n        client.beginListeningForBatchedUpdates();\n        taskRecord.beginBatch();\n        taskRecord.set('startDate', DateHelper.floor(draggingEnd ? mousedownDate : date, timeAxis.resolution, undefined, client.weekStartDay));\n        taskRecord.set('endDate', DateHelper.ceil(draggingEnd ? date : mousedownDate, timeAxis.resolution, undefined, client.weekStartDay));\n        // This presents the task to be scheduled for validation at the proposed mouse/date point\n        // If rejected, we have to revert the batched changes\n        if (this.handleBeforeDragCreate(drag, taskRecord, drag.event) === false) {\n            this.onAborted(drag);\n            return false;\n        }\n        // Now it will have an element, and that's what we are dragging\n        drag.itemElement = drag.element = client.getElementFromTaskRecord(drag.taskRecord);\n        return super.startDrag.call(this, drag);\n    }\n    handleBeforeDragCreate(drag, taskRecord, event) {\n        const\n            me     = this,\n            result = me.gantt.trigger('beforeDragCreate', {\n                taskRecord,\n                date : drag.mousedownDate,\n                event\n            });\n        // Save date constraints\n        me.dateConstraints = me.gantt.getDateConstraints?.(taskRecord);\n        return result;\n    }\n    checkValidity(context, event) {\n        const me = this;\n        context.taskRecord = me.dragging.taskRecord;\n        return me.createValidatorFn.call(me.validatorFnThisObj || me, context, event);\n    }\n    // Row is not empty if task is scheduled\n    isRowEmpty(taskRecord) {\n        return !taskRecord.startDate || !taskRecord.endDate;\n    }\n    onAborted({ taskRecord }) {\n        taskRecord.cancelBatch();\n        this.client.endListeningForBatchedUpdates();\n    }\n    //endregion\n}\nTaskDragCreate._$name = 'TaskDragCreate'; GridFeatureManager.registerFeature(TaskDragCreate, true, 'Gantt');\n", "import GanttTaskEditor from '../../SchedulerPro/widget/GanttTaskEditor.js';\n/**\n * @module Gantt/widget/TaskEditor\n */\n/**\n * Provides a UI to edit tasks in a popup dialog. It is implemented as a Tab Panel with several preconfigured built-in\n * tabs. Although the default configuration may be adequate in many cases, the Task Editor is easily configurable.\n *\n * This demo shows how to use TaskEditor as a standalone widget:\n *\n * {@inlineexample Gantt/widget/TaskEditor.js}\n *\n * To hide built-in tabs or to add custom tabs, or to append widgets to any of the built-in tabs\n * use the {@link Gantt.feature.TaskEdit#config-items items} config.\n *\n * The Task editor contains tabs by default. Each tab is a container with built-in widgets: text fields, grids, etc.\n *\n * | Tab ref           | Text         | Weight | Description                                           |\n * |-------------------|--------------|--------|-------------------------------------------------------|\n * | `generalTab`      | General      | 100    | Name, start/end dates, duration, percent done, effort |\n * | `predecessorsTab` | Predecessors | 200    | Grid with incoming dependencies                       |\n * | `successorsTab`   | Successors   | 300    | Grid with outgoing dependencies                       |\n * | `resourcesTab`    | Resources    | 400    | Grid with assigned resources                          |\n * | `advancedTab`     | Advanced     | 500    | Assigned calendar, scheduling mode, constraints, etc  |\n * | `notesTab`        | Notes        | 600    | Text area to add notes to the selected task           |\n *\n * ## Task editor customization example\n *\n * This example shows a custom Task Editor configuration. The built-in \"Notes\" tab is hidden, a custom \"Files\" tab is\n * added, the \"General\" tab is renamed to \"Common\" and \"Custom\" field is appended to it. Double-click on a task bar to\n * start editing:\n *\n * {@inlineexample Gantt/feature/TaskEditCustom.js}\n *\n * @extends SchedulerPro/widget/GanttTaskEditor\n */\nexport default class TaskEditor extends GanttTaskEditor {\n    // Factoryable type name\n    static get type() {\n        return 'taskeditor';\n    }\n    static get $name() {\n        return 'TaskEditor';\n    }\n    static get defaultConfig() {\n        return {\n            cls : 'b-gantt-taskeditor b-schedulerpro-taskeditor'\n        };\n    }\n}\n// Register this widget type with its Factory\nTaskEditor.initClass();\nTaskEditor._$name = 'TaskEditor';", "import SchedulerProTaskEdit from '../../SchedulerPro/feature/TaskEdit.js';\nimport TaskEditor from '../widget/TaskEditor.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\n/**\n * @module Gantt/feature/TaskEdit\n */\n/**\n * Feature that allows editing tasks using a {@link Gantt/widget/TaskEditor}, a popup with fields for editing task data.\n *\n * This demo shows the task edit feature, double-click child task bar to start editing:\n *\n * {@inlineexample Gantt/feature/TaskEdit.js}\n *\n * ## Customizing tabs and their widgets\n *\n * To customize tabs you can:\n *\n * * Reconfigure built-in tabs by providing override configs in the {@link #config-items} config.\n * * Remove existing tabs or add your own in the {@link #config-items} config.\n * * Advanced: Reconfigure the whole editor widget using {@link #config-editorConfig} or replace the whole editor\n *   using {@link #config-editorClass}.\n *\n * This example shows a custom Task Editor configuration. The built-in \"Notes\" tab is hidden, a custom \"Files\" tab is\n * added, the \"General\" tab is renamed to \"Common\" and \"Custom\" field is appended to it. Double-click on a task bar to\n * start editing:\n *\n * {@inlineexample Gantt/feature/TaskEditCustom.js}\n *\n * To add extra items to a tab you need to specify {@link Core/widget/Container#config-items} for the tab container.\n * This example shows custom widgets added to \"General\" tab:\n *\n * {@inlineexample Gantt/feature/TaskEditExtraItems.js}\n *\n * {@region Expand to see Default tabs and fields}\n *\n * The {@link Gantt/widget/TaskEditor Task editor} contains tabs by default. Each tab is a container with built-in\n * widgets: text fields, grids, etc.\n *\n * | Tab ref           | Type                                                   | Text         | Weight | Description                                            |\n * |-------------------|--------------------------------------------------------|--------------|--------|--------------------------------------------------------|\n * | `generalTab`      | {@link SchedulerPro/widget/taskeditor/GeneralTab}      | General      | 100    | Name, start/end dates, duration, percent done, effort. |\n * | `predecessorsTab` | {@link SchedulerPro/widget/taskeditor/PredecessorsTab} | Predecessors | 200    | Grid with incoming dependencies                        |\n * | `successorsTab`   | {@link SchedulerPro/widget/taskeditor/SuccessorsTab}   | Successors   | 300    | Grid with outgoing dependencies                        |\n * | `resourcesTab`    | {@link SchedulerPro/widget/taskeditor/ResourcesTab}    | Resources    | 400    | Grid with assigned resources                           |\n * | `advancedTab`     | {@link SchedulerPro/widget/taskeditor/AdvancedTab}     | Advanced     | 500    | Assigned calendar, scheduling mode, constraints, etc.  |\n * | `notesTab`        | {@link SchedulerPro/widget/taskeditor/NotesTab}        | Notes        | 600    | Text area to add notes to the selected task            |\n *\n * ### General tab\n *\n * General tab contains widgets for basic configurations\n *\n * | Widget ref     | Type                                       | Text       | Weight | Description                                                |\n * |----------------|--------------------------------------------|------------|--------|------------------------------------------------------------|\n * | `name`         | {@link Core/widget/TextField}              | Name       | 100    | Task name                                                  |\n * | `percentDone`  | {@link Core/widget/NumberField}            | % Complete | 200    | Shows what part of task is done already in percentage      |\n * | `effort`       | {@link SchedulerPro/widget/EffortField}    | Effort     | 300    | Amount of working time required to complete the whole task |\n * | `divider`      | {@link Core/widget/Widget}                 |            | 400    | Visual splitter between 2 groups of fields                 |\n * | `startDate`    | {@link SchedulerPro/widget/StartDateField} | Start      | 500    | Shows when the task begins                                 |\n * | `endDate`      | {@link SchedulerPro/widget/EndDateField}   | Finish     | 600    | Shows when the task ends                                   |\n * | `duration`     | {@link Core/widget/DurationField}          | Duration   | 700    | Shows how long the task is                                 |\n * | `colorField` \u00B9 | {@link Scheduler.widget.EventColorField}   | Color \u00B9    | 800    | Choose background color for the task bar                   |\n *\n * **\u00B9** Set the {@link Gantt.view.GanttBase#config-showTaskColorPickers} config to `true` to enable this field\n *\n * ### Predecessors tab\n *\n * Predecessors tab contains a grid with incoming dependencies and controls to remove/add dependencies\n *\n * | Widget ref | Type                        | Weight | Description                                                      |\n * |------------|-----------------------------|--------|------------------------------------------------------------------|\n * | `grid`     | {@link Grid/view/Grid}      | 100    | Predecessors task name, dependency type and lag                  |\n * | `toolbar`  | {@link Core/widget/Toolbar} | 200    | Control buttons                                                  |\n * | \\>`add`    | {@link Core/widget/Button}  | 210    | Adds a new predecessor, select task using the name column editor |\n * | \\>`remove` | {@link Core/widget/Button}  | 220    | Removes selected incoming dependency                             |\n *\n * \\> - nested items\n *\n * ### Successors tab\n *\n * Successors tab contains a grid with outgoing dependencies and controls to remove/add dependencies\n *\n * | Widget ref | Type                        | Weight | Description                                                    |\n * |------------|-----------------------------|--------|----------------------------------------------------------------|\n * | `grid`     | {@link Grid/view/Grid}      | 100    | Successors task name, dependency type and lag                  |\n * | `toolbar`  | {@link Core/widget/Toolbar} | 200    | Control buttons                                                |\n * | \\>`add`    | {@link Core/widget/Button}  | 210    | Adds a new successor, select task using the name column editor |\n * | \\>`remove` | {@link Core/widget/Button}  | 220    | Removes selected outgoing dependency                           |\n *\n * \\> - nested items\n *\n * ### Resources tab\n *\n * Resources tab contains a grid with assignments\n *\n * | Widget ref | Type                        | Weight | Description                                                                                                            |\n * |------------|-----------------------------|--------|------------------------------------------------------------------------------------------------------------------------|\n * | `grid`     | {@link Grid/view/Grid}      | 100    | Assignments resource name and units (100 means that the assigned resource spends 100% of its working time to the task) |\n * | `toolbar`  | {@link Core/widget/Toolbar} | 200    | Shows control buttons                                                                                                  |\n * | \\>`add`    | {@link Core/widget/Button}  | 210    | Adds a dummy assignment, select resource using the name column editor                                                  |\n * | \\>`remove` | {@link Core/widget/Button}  | 220    | Removes selected assignment                                                                                            |\n *\n * \\> - nested items\n *\n * ### Advanced tab\n *\n * Advanced tab contains additional task scheduling options\n *\n * | Widget ref                    | Type                                             | Weight | Description                                                                                                                  |\n * |-------------------------------|--------------------------------------------------|--------|------------------------------------------------------------------------------------------------------------------------------|\n * | `calendarField`               | {@link Core/widget/Combo}                        | 100    | Shows a list of available calendars for this task                                                                            |\n * | `manuallyScheduledField`      | {@link Core/widget/Checkbox}                     | 200    | If checked, the task is not considered in scheduling                                                                         |\n * | `schedulingModeField`         | {@link SchedulerPro/widget/SchedulingModePicker} | 300    | Shows a list of available scheduling modes for this task                                                                     |\n * | `effortDrivenField`           | {@link Core/widget/Checkbox}                     | 400    | If checked, the effort of the task is kept intact, and the duration is updated. Works when scheduling mode is \"Fixed Units\". |\n * | `divider`                     | {@link Core/widget/Widget}                       | 500    | Visual splitter between 2 groups of fields                                                                                   |\n * | `constraintTypeField`         | {@link SchedulerPro/widget/ConstraintTypePicker} | 600    | Shows a list of available constraints for this task                                                                          |\n * | `constraintDateField`         | {@link Core/widget/DateField}                    | 700    | Shows a date for the selected constraint type                                                                                |\n * | `rollupField`                 | {@link Core/widget/Checkbox}                     | 800    | If checked, shows a bar below the parent task. Works when the \"Rollup\" feature is enabled.                                   |\n * | `inactiveField`               | {@link Core/widget/Checkbox}                     | 900    | Allows to inactivate the task so it won't take part in the scheduling process.                                               |\n * | `ignoreResourceCalendarField` | {@link Core/widget/Checkbox}                     | 1000   | If checked the task ignores the assigned resource calendars when scheduling                                                  |\n *\n * ### Notes tab\n *\n * Notes tab contains a text area to show notes\n *\n * | Field ref   | Type                              | Weight | Description                                     |\n * |-------------|-----------------------------------|--------|-------------------------------------------------|\n * | `noteField` | {@link Core/widget/TextAreaField} | 100    | Shows a text area to add text notes to the task |\n *\n * {@endregion}\n *\n * ## Removing a built-in item\n *\n * To remove a built-in tab or widget, specify its `ref` as `false` in the {@link #config-items} config:\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         taskEdit : {\n *             items : {\n *                 generalTab      : {\n *                     items : {\n *                         // Remove \"% Complete\",\"Effort\", and the divider in the \"General\" tab\n *                         percentDone : false,\n *                         effort      : false,\n *                         divider     : false\n *                     }\n *                 },\n *                 // Remove all tabs except the \"General\" tab\n *                 notesTab        : false,\n *                 predecessorsTab : false,\n *                 successorsTab   : false,\n *                 resourcesTab    : false,\n *                 advancedTab     : false\n *             }\n *         }\n *     }\n * })\n * ```\n *\n * The built-in buttons are:\n *\n * | Widget ref     | Type                       | Weight | Description                             |\n * |----------------|----------------------------|--------|-----------------------------------------|\n * | `saveButton`   | {@link Core/widget/Button} | 100    | Save event button on the bbar           |\n * | `deleteButton` | {@link Core/widget/Button} | 200    | Delete event button on the bbar         |\n * | `cancelButton` | {@link Core/widget/Button} | 300    | Cancel event editing button on the bbar |\n *\n * Bottom buttons may be hidden using `bbar` config passed to `editorConfig`:\n *\n* ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         taskEdit : {\n *             editorConfig : {\n *                 bbar : {\n *                     items : {\n *                         deleteButton : false\n *                     }\n *                 }\n *             }\n *         }\n *     }\n * })\n * ```\n *\n * ## Customizing a built-in item\n *\n * To customize a built-in tab or field, use its `ref` as the key in the {@link #config-items} config and specify the configs you want\n * to change (they will be merged with the tabs or fields default configs correspondingly):\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         taskEdit : {\n *             items : {\n *                 generalTab      : {\n *                     // Rename \"General\" tab\n *                     title : 'Main',\n *                     items : {\n *                         // Rename \"% Complete\" field\n *                         percentDone : {\n *                             label : 'Status'\n *                         }\n *                     }\n *                 }\n *             }\n *         }\n *     }\n * })\n * ```\n *\n * ## Adding a custom item\n *\n * To add a custom tab or field, add an entry to the {@link #config-items} config. When you add a field,\n * the `name` property links the input field to a field in the loaded task record:\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         taskEdit : {\n *             items : {\n *                 generalTab : {\n *                     items : {\n *                         // Add new field to the last position\n *                         newGeneralField : {\n *                             type   : 'textfield',\n *                             weight : 710,\n *                             label  : 'New field in General Tab',\n *                             // Name of the field matches data field name, so value is loaded/saved automatically\n *                             name   : 'custom'\n *                         }\n *                     }\n *                 },\n *                 // Add a custom tab to the first position\n *                 newTab     : {\n *                     // Tab is a FormTab by default\n *                     title  : 'New tab',\n *                     weight : 90,\n *                     items  : {\n *                         newTabField : {\n *                             type   : 'textfield',\n *                             weight : 710,\n *                             label  : 'New field in New Tab',\n *                             // Name of the field matches data field name, so value is loaded/saved automatically.\n *                             // In this case it is equal to the Task \"name\" field.\n *                             name   : 'name'\n *                         }\n *                     }\n *                 }\n *             }\n *         }\n *     }\n * })\n * ```\n *\n * To turn off the Task Editor just simple disable the feature.\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         taskEdit : false\n *     }\n * })\n * ```\n *\n * For more info on customizing the Task Editor, please see Guides/Customization/Customize task editor\n *\n * This feature is **enabled** by default.\n *\n * @extends SchedulerPro/feature/TaskEdit\n * @demo Gantt/taskeditor\n * @classtype taskEdit\n * @feature\n *\n * @typings SchedulerPro.feature.TaskEdit -> SchedulerPro.feature.SchedulerProTaskEdit\n */\nexport default class TaskEdit extends SchedulerProTaskEdit {\n    static get $name() {\n        return 'TaskEdit';\n    }\n    static configurable = {\n        /**\n         * The event that shall trigger showing the editor. Set to `` or null to disable editing of existing events.\n         * @config {String|null}\n         * @default\n         * @category Editor\n         */\n        triggerEvent : 'taskdblclick',\n        saveAndCloseOnEnter : true,\n        /**\n         * Class to use as the editor. By default it uses {@link Gantt.widget.TaskEditor}\n         * @config {Core.widget.Widget}\n         * @typings {typeof Widget}\n         * @category Editor\n         */\n        editorClass : TaskEditor\n    };\n    static get pluginConfig() {\n        return {\n            chain  : ['populateTaskMenu', 'onTaskEnterKey'],\n            assign : ['editTask']\n        };\n    }\n    /**\n     * Shows a {@link Gantt/widget/TaskEditor} to edit the passed task. This function is exposed on\n     * the Gantt instance and can be called as `gantt.editTask()`.\n     * @param {Gantt.model.TaskModel} taskRecord Task to edit\n     * @param {HTMLElement} [element] The task element\n     * @returns {Promise} Promise which resolves after the editor is shown\n     * @on-owner\n     * @async\n     */\n    editTask(taskRecord, element) {\n        return this.editEvent(taskRecord, null, element);\n    }\n    onActivateEditor({ taskRecord, taskElement }) {\n        this.editTask(taskRecord, taskElement);\n    }\n    getElementFromTaskRecord(taskRecord) {\n        return this.client.getElementFromTaskRecord(taskRecord);\n    }\n    onTaskEnterKey({ taskRecord }) {\n        this.editTask(taskRecord);\n    }\n    //region Context menu\n    populateTaskMenu({ taskRecord, selection, items }) {\n        // Task without project is transient record in a display store and not meant to be manipulated\n        if (!this.client.readOnly && selection.length <= 1 && taskRecord.project) {\n            items.editTask = {\n                text        : 'L{Gantt.Edit}',\n                localeClass : this.client,\n                cls         : 'b-separator',\n                icon        : 'b-icon b-icon-edit',\n                weight      : 100,\n                disabled    : this.disabled || taskRecord.readOnly,\n                onItem      : () => this.editTask(taskRecord)\n            };\n        }\n    }\n    //endregion\n    onEventEnterKey({ taskRecord, target }) {\n        this.editTask(taskRecord);\n    }\n    scrollTaskIntoView(taskRecord) {\n        return this.scrollEventIntoView(taskRecord);\n    }\n    scrollEventIntoView(eventRecord) {\n        return this.client.scrollTaskIntoView(eventRecord);\n    }\n}\nTaskEdit._$name = 'TaskEdit'; GridFeatureManager.registerFeature(TaskEdit, true, 'Gantt');\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport EventMenu from '../../Scheduler/feature/EventMenu.js';\nimport Objects from '../../Core/helper/util/Objects.js';\n/**\n * @module Gantt/feature/TaskMenu\n */\n/**\n * Displays a context menu for tasks. Items are populated by other features and/or application code.\n * Configure it with `false` to disable it completely. If enabled, {@link Grid.feature.CellMenu} feature\n * is not available. Cell context menu items are handled by this feature.\n *\n * ## Default task menu items\n *\n * Here is the list of menu items provided by the Task menu feature and populated by the other features:\n *\n * | Reference                       | Text                 | Weight | Feature                                    | Description                                                                                                      |\n * |---------------------------------|----------------------|--------|--------------------------------------------|------------------------------------------------------------------------------------------------------------------|\n * | `editTask`                      | Edit task            | 100    | {@link Gantt.feature.TaskEdit}             | Edit the task                                                                                                    |\n * | `cut`                           | Cut task             | 110    | {@link Gantt.feature.TaskCopyPaste}        | Cut the task                                                                                                     |\n * | `copy`                          | Copy task            | 120    | {@link Gantt.feature.TaskCopyPaste}        | Copy the task                                                                                                    |\n * | `paste`                         | Paste task           | 130    | {@link Gantt.feature.TaskCopyPaste}        | Paste the task                                                                                                   |\n * | `search`*                       | Search for value     | 200    | {@link Grid.feature.Search}                | Search for cell text                                                                                             |\n * | `filterMenu`                    | Filter               | 400    | {@link Grid/feature/Filter}                | Shows a submenu to control filtering. See [Filter submenu](#Grid/feature/Filter#menu-items).                    |\n * | `add`                           | Add...               | 500    | *This feature*                             | Submenu for adding tasks                                                                                         |\n * | \\>`addTaskAbove`                | Task above           | 510    | *This feature*                             | Add a new task above the selected task                                                                           |\n * | \\>`addTaskBelow`                | Task below           | 520    | *This feature*                             | Add a new task below the selected task                                                                           |\n * | \\>`milestone`                   | Milestone            | 530    | *This feature*                             | Add a new milestone below the selected task                                                                      |\n * | \\>`subtask`                     | Subtask              | 540    | *This feature*                             | Add a new task as a child of the current, turning it into a parent                                               |\n * | \\>`successor`                   | Successor            | 550    | *This feature*                             | Add a new task below current task, linked using an \"Finish-to-Start\" dependency                                  |\n * | \\>`predecessor`                 | Predecessor          | 560    | *This feature*                             | Add a new task above current task, linked using an \"Finish-to-Start\" dependency                                  |\n * | `convertToMilestone`            | Convert to milestone | 600    | *This feature*                             | Turns the selected task into a milestone. Shown for leaf tasks only                                              |\n * | `splitTask`                     | Split task           | 650    | {@link SchedulerPro.feature.EventSegments} | Split the task                                                                                                   |\n * | `indent`                        | Indent               | 700    | *This feature*                             | Add the task as a child of its previous sibling, turning that task into a parent                                 |\n * | `outdent`                       | Outdent              | 800    | *This feature*                             | Turn the task into a sibling of its parent                                                                       |\n * | `deleteTask`                    | Delete task          | 900    | *This feature*                             | Remove the selected task                                                                                         |\n * | `linkTasks`                     | Add dependencies     | 1000   | *This feature*                             | Add dependencies between two or more selected tasks                                                              |\n * | `unlinkTasks`                   | Remove dependencies  | 1010   | *This feature*                             | Removes dependencies between selected tasks                                                                      |\n * | `taskColor` \u00B9                   | Color                | 1100   | *This feature*                             | Choose background color for the task bar                                                                         |\n *\n * **\u00B9** Set {@link Gantt.view.GanttBase#config-showTaskColorPickers} to true to enable this item\n *\n * \\* - items that are shown for the locked grid cells only\n *\n * \\> - first level of submenu\n *\n * ## Customizing the menu items\n *\n * The menu items in the Task menu can be customized, existing items can be changed or removed,\n * and new items can be added. This is handled using the `items` config of the feature.\n *\n * To add extra items for all events:\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         taskMenu : {\n *             // Extra items for all events\n *             items : {\n *                 flagTask : {\n *                     text : 'Extra',\n *                     icon : 'b-fa b-fa-fw b-fa-flag',\n *                     onItem({taskRecord}) {\n *                         taskRecord.flagged = true;\n *                     }\n *                 }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * ## Remove menu/submenu items\n *\n * Items can be removed from the menu:\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         taskMenu : {\n *             items : {\n *                 // Hide delete task option\n *                 deleteTask: false,\n *\n *                 // Hide item from the `add` submenu\n *                 add: {\n *                     menu: {\n *                          subtask: false\n *                     }\n *                 }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * ## Manipulate items for specific tasks\n *\n * Items can behave different depending on the type of the task:\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         taskMenu : {\n *             // Process items before menu is shown\n *             processItems({ items, taskRecord }) {\n *                  // Push an extra item for conferences\n *                  if (taskRecord.type === 'conference') {\n *                      items.showSessions = {\n *                          text : 'Show sessions',\n *                          ontItem({taskRecord}) {\n *                              // ...\n *                          }\n *                      };\n *                  }\n *\n *                  // Do not show menu for secret events\n *                  if (taskRecord.type === 'secret') {\n *                      return false;\n *                  }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * Full information of the menu customization can be found in the \"Customizing the Task menu\" guide.\n *\n * This feature is **enabled** by default\n *\n * {@inlineexample Gantt/feature/TaskMenu.js}\n *\n * @demo Gantt/taskmenu\n *\n * @extends Scheduler/feature/EventMenu\n * @classtype taskMenu\n * @feature\n */\nexport default class TaskMenu extends EventMenu {\n    //region Config\n    static get $name() {\n        return 'TaskMenu';\n    }\n    static get defaultConfig() {\n        return {\n            type : 'task',\n            /**\n             * A function called before displaying the menu that allows manipulations of its items.\n             * Returning `false` from this function prevents the menu being shown.\n             *\n             * ```javascript\n             * features         : {\n             *    taskMenu : {\n             *         processItems({ items, taskRecord }) {\n             *             // Add or hide existing items here as needed\n             *             items.myAction = {\n             *                 text   : 'Cool action',\n             *                 icon   : 'b-fa b-fa-fw b-fa-ban',\n             *                 onItem : () => console.log(`Clicked ${eventRecord.name}`),\n             *                 weight : 1000 // Move to end\n             *             };\n             *\n             *            if (!eventRecord.allowDelete) {\n             *                 items.deleteEvent.hidden = true;\n             *             }\n             *         }\n             *     }\n             * },\n             * ```\n             *\n             * @config {Function}\n             * @param {Object} context An object with information about the menu being shown\n             * @param {Gantt.model.TaskModel} context.taskRecord The record representing the current task\n             * @param {Grid.column.Column} context.column The current column\n             * @param {Object<String,MenuItemConfig|Boolean>} context.items An object containing the\n             *   {@link Core.widget.MenuItem menu item} configs keyed by their id\n             * @param {Event} context.event The DOM event object that triggered the show\n             * @returns {Boolean|null} Returning `false` from this function prevents the menu being shown\n             * @preventable\n             */\n            processItems : null\n            /**\n             * This is a preconfigured set of items used to create the default context menu.\n             *\n             * ```javascript\n             * const gantt = new Gantt({\n             *     features : {\n             *         taskMenu : {\n             *             items : {\n             *                 add                 : false,\n             *                 convertToMilestone  : false\n             *             }\n             *         }\n             *     }\n             * });\n             * ```\n             * The `items` provided by this feature are listed below. These are the property names which you may\n             * configure:\n             *\n             * - `add` A submenu option containing a `menu` config which contains the following named items:\n             *     * `addTaskAbove` Inserts a sibling task above the context task.\n             *     * `addTaskBelow` Inserts a sibling task below the context task.\n             *     * `milestone` Inserts a sibling milestone below the context task.\n             *     * `subtask` Appends a child task to the context task. This menu supports an \"at\" property that\n             *       can be set to 'end' to append new tasks to the end of the parent task's children. By default,\n             *       (at = 'start'), new subtasks are inserted as the firstChild of the parent task.\n             *     * `successor` Adds a sibling task linked by a dependence below the context task.\n             *     * `predecessor` Adds a sibling task linked by a dependence above the context task.\n             *  - `deleteTask` Deletes the context task.\n             *  - `indent` Indents the context task by adding it as a child of its previous sibling.\n             *  - `outdent` Outdents the context task by adding it as the final sibling of its parent.\n             *  - `convertToMilestone` Converts the context task to a zero duration milestone.\n             *\n             * See the feature config in the above example for details.\n             *\n             * @config {Object<String,MenuItemConfig|Boolean|null>} items\n             */\n        };\n    }\n    static get pluginConfig() {\n        const config = super.pluginConfig;\n        config.chain.push('populateTaskMenu');\n        return config;\n    }\n    //endregion\n    construct(gantt, config = {}) {\n        super.construct(...arguments);\n        this.gantt = gantt;\n        if (gantt.features.cellMenu) {\n            console.warn('`CellMenu` feature is ignored, when `TaskMenu` feature is enabled. If you need cell specific menu items, please configure `TaskMenu` feature items instead.');\n            gantt.features.cellMenu.disabled = true;\n        }\n    }\n    //region Events\n    /**\n     * This event fires on the owning Gantt before the context menu is shown for a task. Allows manipulation of the items\n     * to show in the same way as in `processItems`. Returning false from a listener prevents the menu from\n     * being shown.\n     * @event taskMenuBeforeShow\n     * @on-owner\n     * @preventable\n     * @param {Gantt.view.Gantt} source\n     * @param {MenuItemConfig[]} items Menu item configs\n     * @param {Gantt.model.TaskModel} taskRecord Event record for which the menu was triggered\n     * @param {HTMLElement} taskElement\n     */\n    /**\n     * This event fires on the owning Gantt when an item is selected in the context menu.\n     * @event taskMenuItem\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {Core.widget.MenuItem} item\n     * @param {Gantt.model.TaskModel} taskRecord\n     * @param {HTMLElement} taskElement\n     */\n    /**\n     * This event fires on the owning Gantt after showing the context menu for an event\n     * @event taskMenuShow\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {Core.widget.Menu} menu The menu\n     * @param {Gantt.model.TaskModel} taskRecord Event record for which the menu was triggered\n     * @param {HTMLElement} taskElement\n     */\n    //endregion\n    getDataFromEvent(event) {\n        const\n            { client }    = this,\n            targetElement = this.getTargetElementFromEvent(event),\n            // to resolve record from a task element or from a grid cell\n            taskRecord    = client.resolveTaskRecord(targetElement) || client.getRecordFromElement(targetElement),\n            taskElement   = taskRecord && client.getElementFromTaskRecord(taskRecord, false); // get wrapper;\n        return Objects.assign({\n            event,\n            targetElement,\n            taskElement,\n            taskRecord\n        }, client.getCellDataFromEvent(event));\n    }\n    callChainablePopulateMenuMethod(eventParams) {\n        // When context menu is called for a task cell, need to collect items from features\n        // which usually add items to CellMenu in Grid and Scheduler,\n        // since CellMenu feature is disabled when TaskMenu feature is enabled.\n        if (eventParams.cellData && this.client.populateCellMenu) {\n            this.client.populateCellMenu(eventParams);\n        }\n        super.callChainablePopulateMenuMethod(...arguments);\n    }\n    shouldShowMenu(eventParams) {\n        const { column } = eventParams;\n        return eventParams.taskRecord && (!column || column.enableCellContextMenu !== false);\n    }\n    getElementFromRecord(record) {\n        return this.client.getElementFromTaskRecord(record);\n    }\n    populateTaskMenu({ items, column, selection, taskRecord }) {\n        const\n            { client }    = this,\n            {\n                isTreeGrouped,\n                usesDisplayStore\n            }             = client,\n            // Context menu on the selection offers multi actions on the selection.\n            // Context menu on a non-selected record offers single actions on the context record.\n            multiSelected = selection.includes(taskRecord) && selection.length > 1;\n        items.add                = {\n            disabled : client.readOnly || isTreeGrouped || usesDisplayStore,\n            hidden   : multiSelected\n        };\n        items.convertToMilestone = {\n            disabled : client.readOnly || taskRecord.readOnly,\n            hidden   : taskRecord.isParent || taskRecord.milestone\n        };\n        items.indent             = {\n            disabled : client.readOnly || !taskRecord.previousSibling || taskRecord.readOnly || isTreeGrouped || usesDisplayStore\n        };\n        items.outdent            = {\n            disabled : client.readOnly || taskRecord.parent === client.taskStore.rootNode || taskRecord.readOnly || isTreeGrouped || usesDisplayStore\n        };\n        items.deleteTask         = {\n            disabled : client.readOnly || taskRecord.readOnly\n        };\n        items.linkTasks          = {\n            disabled : !multiSelected\n        };\n        items.unlinkTasks        = {\n            disabled : items.linkTasks.disabled\n        };\n        // TaskMenu feature is responsible for cell items\n        if (column?.cellMenuItems) {\n            Objects.merge(items, column.cellMenuItems);\n        }\n        if (client.showTaskColorPickers) {\n            items.taskColor = {\n                disabled : client.readOnly || taskRecord.readOnly\n            };\n        }\n        else {\n            items.taskColor = {\n                hidden : true\n            };\n        }\n    }\n    populateItemsWithData({ items, taskRecord }) {\n        super.populateItemsWithData(...arguments);\n        if (this.client.showTaskColorPickers && items.taskColor?.menu) {\n            Objects.merge(items.taskColor.menu.colorMenu, {\n                value  : taskRecord.eventColor,\n                record : taskRecord\n            });\n        }\n    }\n    // This generates the fixed, unchanging part of the items and is only called once\n    // to generate the baseItems of the feature.\n    // The dynamic parts which are set by populateEventMenu have this merged into them.\n    changeItems(items) {\n        const { client } = this;\n        return Objects.merge({\n            add : {\n                text   : 'L{Gantt.Add}',\n                cls    : 'b-separator',\n                icon   : 'b-icon-add',\n                weight : 500,\n                menu   : {\n                    addTaskAbove : {\n                        text   : 'L{Gantt.Task above}',\n                        weight : 510,\n                        icon   : 'b-icon-up',\n                        onItem({ taskRecord }) {\n                            client.addTaskAbove(taskRecord);\n                        }\n                    },\n                    addTaskBelow : {\n                        text   : 'L{Gantt.Task below}',\n                        weight : 520,\n                        icon   : 'b-icon-down',\n                        onItem({ taskRecord }) {\n                            client.addTaskBelow(taskRecord);\n                        }\n                    },\n                    milestone : {\n                        text   : 'L{Gantt.Milestone}',\n                        weight : 530,\n                        icon   : 'b-icon-milestone',\n                        onItem({ taskRecord }) {\n                            client.addMilestoneBelow(taskRecord);\n                        }\n                    },\n                    subtask : {\n                        text   : 'L{Gantt.Sub-task}',\n                        weight : 540,\n                        icon   : 'b-icon-subtask',\n                        at     : 'start',\n                        onItem({ taskRecord }) {\n                            client.addSubtask(taskRecord, { at : this.at });\n                        }\n                    },\n                    successor : {\n                        text   : 'L{Gantt.Successor}',\n                        weight : 550,\n                        icon   : 'b-icon-successor',\n                        onItem({ taskRecord }) {\n                            client.addSuccessor(taskRecord);\n                        }\n                    },\n                    predecessor : {\n                        text   : 'L{Gantt.Predecessor}',\n                        weight : 560,\n                        icon   : 'b-icon-predecessor',\n                        onItem({ taskRecord }) {\n                            client.addPredecessor(taskRecord);\n                        }\n                    }\n                }\n            },\n            convertToMilestone : {\n                icon   : 'b-icon-milestone',\n                text   : 'L{Gantt.Convert to milestone}',\n                weight : 600,\n                onItem({ taskRecord }) {\n                    taskRecord.convertToMilestone();\n                }\n            },\n            indent : {\n                text      : 'L{Gantt.Indent}',\n                icon      : 'b-icon-indent',\n                weight    : 700,\n                separator : true,\n                onItem({ selection, taskRecord }) {\n                    // Context menu on the selection offers multi actions on the selection.\n                    // Context menu on a non-selected record offers single actions on the context record.\n                    client.indent(selection.includes(taskRecord) ? selection : taskRecord);\n                }\n            },\n            outdent : {\n                text   : 'L{Gantt.Outdent}',\n                icon   : 'b-icon-outdent',\n                weight : 800,\n                onItem({ selection, taskRecord }) {\n                    // Context menu on the selection offers multi actions on the selection.\n                    client.outdent(selection.includes(taskRecord) ? selection : taskRecord);\n                }\n            },\n            deleteTask : {\n                text   : 'L{Gantt.Delete task}',\n                icon   : 'b-icon-trash',\n                cls    : 'b-separator',\n                weight : 900,\n                onItem({ selection, taskRecord }) {\n                    // Context menu on the selection offers multi actions on the selection.\n                    // Context menu on a non-selected record offers single actions on the context record.\n                    client.store.remove(selection.includes(taskRecord) ? selection : taskRecord);\n                }\n            },\n            linkTasks : {\n                text   : 'L{Gantt.linkTasks}',\n                icon   : 'b-icon-link',\n                cls    : 'b-separator',\n                weight : 1000,\n                onItem({ selection }) {\n                    client.store.linkTasks(selection);\n                }\n            },\n            unlinkTasks : {\n                text   : 'L{Gantt.unlinkTasks}',\n                icon   : 'b-icon-unlink',\n                weight : 1010,\n                onItem({ selection }) {\n                    client.store.unlinkTasks(selection);\n                }\n            },\n            taskColor : {\n                text : 'L{Gantt.color}',\n                icon : 'b-icon-palette',\n                menu : {\n                    colorMenu : {\n                        type : 'eventcolorpicker'\n                    }\n                },\n                separator : true,\n                weight    : 1100\n            }\n        }, items);\n    }\n}\nTaskMenu.featureClass = '';\nTaskMenu._$name = 'TaskMenu'; GridFeatureManager.registerFeature(TaskMenu, true, 'Gantt');\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport AttachToProjectMixin from '../../Scheduler/data/mixin/AttachToProjectMixin.js';\nimport Tooltip from '../../Core/widget/Tooltip.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport EventHelper from '../../Core/helper/EventHelper.js';\nconst casedEventName = {\n    click       : 'Click',\n    dblclick    : 'DblClick',\n    contextmenu : 'ContextMenu'\n};\n/**\n * @module Gantt/feature/TaskNonWorkingTime\n */\n/**\n * Feature highlighting the non-working time intervals for tasks, based on their {@link Gantt.model.TaskModel#field-calendar}.\n * If a task has no calendar defined, the project's calendar will be used. The non-working time interval can also be\n * recurring. You can find a live example showing how to achieve this in the [Task Calendars Demo](../examples/calendars/).\n *\n * {@inlineexample Gantt/feature/TaskNonWorkingTime.js}\n *\n * The demo above shows the default `row` mode, but the feature also supports a `bar` {@link #config-mode} that shades\n * parts of the task bars:\n *\n * {@inlineexample Gantt/feature/TaskNonWorkingTimeBar.js}\n *\n * If you want a tooltip to be displayed when hovering over the non-working time interval, you can configure a\n * {@link #config-tooltipTemplate}.\n *\n * ## Data structure\n * Below you see an example of data defining calendars and assigning the tasks a calendar:\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         taskNonWorkingTime : true\n *     },\n *\n *     // A Project holding the data and the calculation engine for the Gantt. It also acts as a CrudManager, allowing\n *     project   : {\n *         tasksData : [\n *             { id : 1, name : 'Task 1' },\n *             { id : 2, name : 'Task 2', calendar : 'break' }\n *         ],\n *         calendarsData : [\n *             {\n *                 id        : 'general',\n *                 name      : 'General',\n *                 intervals : [\n *                     {\n *                         recurrentStartDate : 'on Sat at 0:00',\n *                         recurrentEndDate   : 'on Mon at 0:00',\n *                         isWorking          : false\n *                     }\n *                 ]\n *             },\n *             {\n *                 id        : 'break',\n *                 name      : 'Breaks',\n *                 intervals : [\n *                     {\n *                         startDate : '2022-08-07',\n *                         endDate   : '2022-08-11',\n *                         isWorking : false\n *                     },\n *                     {\n *                         startDate : '2022-08-18',\n *                         endDate   : '2022-08-20',\n *                         isWorking : false\n *                     }\n *                 ]\n *             }\n *         ]\n *     }\n * }):\n * ```\n *\n * ## Styling non-working time interval elements\n *\n * To style the elements representing the non-working time elements you can set the {@link SchedulerPro.model.CalendarModel#field-cls}\n * field in your data. This will add a CSS class to all non-working time elements for the calendar. You can also add an\n * {@link SchedulerPro.model.CalendarModel#field-iconCls} value specifying an icon to display inside the interval.\n *\n * ```javascript\n * {\n *   \"success\"   : true,\n *   \"calendars\" : {\n *       \"rows\" : [\n *           {\n *               \"id\"                       : \"day\",\n *               \"name\"                     : \"Day shift\",\n *               \"unspecifiedTimeIsWorking\" : false,\n *               \"cls\"                      : \"dayshift\",\n *               \"intervals\"                : [\n *                   {\n *                       \"recurrentStartDate\" : \"at 8:00\",\n *                       \"recurrentEndDate\"   : \"at 17:00\",\n *                       \"isWorking\"          : true\n *                   }\n *               ]\n *           }\n *       ]\n *    }\n * }\n * ```\n *\n * You can also add a `cls` value and an `iconCls` to **individual** intervals:\n *\n * ```javascript\n * {\n *   \"success\"   : true,\n *   \"calendars\" : {\n *       \"rows\" : [\n *           {\n *               \"id\"                       : \"day\",\n *               \"name\"                     : \"Day shift\",\n *               \"unspecifiedTimeIsWorking\" : true,\n *               \"intervals\"                : [\n *                   {\n *                      \"startDate\"          : \"2022-03-23T02:00\",\n *                      \"endDate\"            : \"2022-03-23T04:00\",\n *                      \"isWorking\"          : false,\n *                      \"cls\"                : \"factoryShutdown\",\n *                      \"iconCls\"            : \"warningIcon\"\n *                  }\n *               ]\n *           }\n *       ]\n *    }\n * }\n * ```\n *\n * This feature is **disabled** by default.\n * For info on enabling it, see {@link Grid.view.mixin.GridFeatures}.\n *\n * @extends Core/mixin/InstancePlugin\n * @demo Gantt/calendars\n * @classtype taskNonWorkingTime\n * @feature\n */\nexport default class TaskNonWorkingTime extends InstancePlugin.mixin(AttachToProjectMixin) {\n    /**\n     * Triggered when clicking a nonworking time element\n     * @event taskNonWorkingTimeClick\n     * @param {Gantt.view.Gantt} source The Gantt chart instance\n     * @param {Gantt.model.TaskModel} taskRecord Task record\n     * @param {Object} interval The raw data describing the nonworking time interval\n     * @param {String} interval.name The interval name (if any)\n     * @param {Date} interval.startDate The interval start date\n     * @param {Date} interval.endDate The interval end date\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n    /**\n     * Triggered when double-clicking a nonworking time element\n     * @event taskNonWorkingTimeDblClick\n     * @param {Gantt.view.Gantt} source The Gantt chart instance\n     * @param {Gantt.model.TaskModel} taskRecord Task record\n     * @param {Object} interval The raw data describing the nonworking time interval\n     * @param {String} interval.name The interval name (if any)\n     * @param {Date} interval.startDate The interval start date\n     * @param {Date} interval.endDate The interval end date\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n    /**\n     * Triggered when right-clicking a nonworking time element\n     * @event taskNonWorkingTimeContextMenu\n     * @param {Gantt.view.Gantt} source The Gantt chart instance\n     * @param {Gantt.model.TaskModel} taskRecord Task record\n     * @param {Object} interval The raw data describing the nonworking time interval\n     * @param {String} interval.name The interval name (if any)\n     * @param {Date} interval.startDate The interval start date\n     * @param {Date} interval.endDate The interval end date\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n    //region Config\n    static $name = 'TaskNonWorkingTime';\n    static configurable = {\n        idPrefix : 'TaskNonWorkingTime',\n        /**\n         * The largest time axis unit to display non working ranges for ('hour' or 'day' etc).\n         * When zooming to a view with a larger unit, no non-working time elements will be rendered.\n         *\n         * **Note:** Be careful with setting this config to big units like 'year'. When doing this,\n         * make sure the timeline {@link Scheduler.view.TimelineBase#config-startDate start} and\n         * {@link Scheduler.view.TimelineBase#config-endDate end} dates are set tightly.\n         * When using a long range (for example many years) with non-working time elements rendered per hour,\n         * you will end up with millions of elements, impacting performance.\n         * When zooming, use the {@link Scheduler.view.mixin.TimelineZoomable#config-zoomKeepsOriginalTimespan} config.\n         * @config {String}\n         * @default\n         */\n        maxTimeAxisUnit : 'week',\n        /**\n         * A template function used to generate contents for a tooltip when hovering non-working time intervals\n         * ```javascript\n         * const gantt = new Gantt({\n         *     features : {\n         *         taskNonWorkingTime : {\n         *             tooltipTemplate({ taskRecord, startDate, endDate }) {\n         *                 return 'Non-working time';\n         *             }\n         *         }\n         *     ]\n         * });\n         * ```\n         * @config {Function} tooltipTemplate\n         * @param {Object} data Tooltip data\n         * @param {Gantt.model.TaskModel} data.taskRecord The taskRecord\n         * @param {Date} data.startDate The start date of the-non working interval\n         * @param {Date} data.endDate The end date of the non-working interval\n         * @param {String} data.name The name of the non-working interval\n         * @param {String} data.cls The cls of the non-working interval\n         * @param {String} data.iconCls The iconCls of the non-working interval\n         * @returns {String|DomConfig|DomConfig[]}\n         */\n        tooltipTemplate : null,\n        tooltip : {},\n        /**\n         * Rendering mode, one of:\n         * - 'row' - renders non-working time intervals to the task row\n         * - 'bar' - renders non-working time intervals inside the task bar\n         * - 'both - combines 'row' and 'bar' rendering modes\n         * @prp {'row'|'bar'|'both'}\n         */\n        mode : 'row'\n    };\n    // Cannot use `static properties = {}`, new Map/Set would pollute the prototype\n    static get properties() {\n        return {\n            rowMap  : new Map(),\n            taskMap : new Map()\n        };\n    };\n    static pluginConfig = {\n        chain : ['onTaskDataGenerated', 'onInternalPaint']\n    };\n    // No feature based styling needed, do not add a cls to Scheduler\n    static featureClass = '';\n    //endregion\n    //region Init\n    construct() {\n        super.construct(...arguments);\n        const\n            me         = this,\n            { client } = me;\n        client.timeAxis.ion({\n            name        : 'timeAxis',\n            reconfigure : 'onTimeAxisReconfigure',\n            // should trigger before event rendering chain\n            prio        : 100,\n            thisObj     : me\n        });\n        client.timeAxisViewModel.ion({\n            name    : 'timeAxisViewModel',\n            update  : 'onTimeAxisReconfigure',\n            // should trigger before event rendering chain\n            prio    : 100,\n            thisObj : me\n        });\n        client.ion({\n            beforeToggleNode : 'clear',\n            thisObj          : me\n        });\n    }\n    attachToProject(project) {\n        super.attachToProject(project);\n        project.ion({\n            name    : 'project',\n            refresh : 'onProjectRefresh',\n            prio    : 100,\n            thisObj : this\n        });\n    }\n    attachToEventStore(store) {\n        super.attachToEventStore(store);\n        store.ion({\n            name    : 'eventStore',\n            filter  : 'clear',\n            thisObj : this\n        });\n    }\n    onProjectRefresh() {\n        this.clear();\n    }\n    onInternalPaint({ firstPaint }) {\n        if (firstPaint) {\n            this.mouseEventsDetacher = EventHelper.on({\n                element     : this.client.foregroundCanvas,\n                delegate    : '.b-tasknonworkingtime',\n                click       : 'handleMouseEvent',\n                dblclick    : 'handleMouseEvent',\n                contextmenu : 'handleMouseEvent',\n                thisObj     : this\n            });\n        }\n    }\n    doDisable(disable) {\n        super.doDisable(disable);\n        this.clear();\n        this.client.refresh();\n    }\n    updateMode() {\n        if (!this.isConfiguring) {\n            this.clear();\n            this.client.refresh();\n        }\n    }\n    clear() {\n        this.taskMap.clear();\n        this.rowMap.clear();\n    }\n    //endregion\n    //region Events\n    onTimeAxisReconfigure() {\n        this.clear();\n    }\n    //endregion\n    //region Rendering\n    // Called on render of resources events to get events to render. Add any ranges\n    // (chained function from Scheduler)\n    onTaskDataGenerated(renderData) {\n        if (!renderData.task.effectiveVisualCalendar) {\n            return;\n        }\n        if (this.mode !== 'bar') {\n            const calendarIntervals = this.getCalendarIntervalsToRender(renderData, false);\n            // Convert indicator timespans to DOMConfigs for rendering\n            renderData.extraConfigs.push(...calendarIntervals);\n        }\n        if (this.mode !== 'row') {\n            const calendarIntervals = this.getCalendarIntervalsToRender(renderData, true);\n            renderData.children.push(...calendarIntervals);\n        }\n    }\n    getCalendarIntervalsToRender(renderData, barMode = false) {\n        const\n            me           = this,\n            {\n                rowMap,\n                taskMap,\n                client\n            }            = me,\n            { timeAxis } = client,\n            { task }     = renderData,\n            intervals    = [],\n            shouldPaint  = !me.maxTimeAxisUnit || DateHelper.compareUnits(timeAxis.unit, me.maxTimeAxisUnit) <= 0,\n            map          = barMode ? taskMap : rowMap;\n        if (!me.disabled && shouldPaint) {\n            const oneTickMs = timeAxis.first.durationMS;\n            if (!map.has(task.id)) {\n                const\n                    calendar   = task.effectiveVisualCalendar,\n                    // In bar mode we only care about intervals fitting in the task, while in row mode we care about\n                    // all intervals\n                    ranges     = (!barMode || task.isScheduled) ? calendar.getNonWorkingTimeRanges(\n                        barMode ? task.startDate : client.startDate,\n                        barMode ? task.endDate : client.endDate\n                    ) : [],\n                    domConfigs = [];\n                for (let i = 0; i < ranges.length; i++) {\n                    const range = ranges[i];\n                    if (range.endDate - range.startDate >= oneTickMs) {\n                        domConfigs.push(me.createIntervalDOMConfig({\n                            id           : `r${task.id}i${i}`,\n                            iconCls      : range.iconCls || calendar.iconCls || '',\n                            cls          : `${calendar.cls ? `${calendar.cls} ` : ''}${range.cls || ''}`,\n                            startDate    : range.startDate,\n                            endDate      : range.endDate,\n                            name         : range.name,\n                            isNonWorking : true\n                        }, renderData, barMode));\n                    }\n                }\n                map.set(task.id, domConfigs);\n            }\n            intervals.push(...ObjectHelper.clone(map.get(task.id)));\n        }\n        return intervals;\n    }\n    createIntervalDOMConfig(interval, renderData, barMode = false) {\n        const\n            { client : gantt } = this,\n            { taskRecord }     = renderData,\n            {\n                cls,\n                iconCls,\n                name,\n                startDate,\n                endDate\n            }                  = interval,\n            x                  = gantt.getCoordinateFromDate(startDate) - (barMode ? renderData.left : 0),\n            width              = gantt.getCoordinateFromDate(endDate) - x - (barMode ? renderData.left : 0),\n            top                = barMode ? null : gantt.store.indexOf(taskRecord) * gantt.rowManager.rowOffsetHeight,\n            height             = barMode ? null : gantt.rowHeight;\n        return {\n            className : {\n                'b-tasknonworkingtime' : 1,\n                [cls]                  : 1\n            },\n            style : {\n                left  : x,\n                top,\n                height,\n                // Crop to fit task's width in bar mode\n                width : barMode && width + x > renderData.width ? renderData.width - x : width\n            },\n            children : [\n                iconCls ? {\n                    tag       : 'i',\n                    className : iconCls\n                } : null,\n                name\n            ],\n            dataset : {\n                taskId : interval.id\n            },\n            elementData : {\n                taskRecord,\n                interval\n            }\n        };\n    }\n    //endregion\n    //region Tooltip\n    changeTooltip(tooltip, old) {\n        const me = this;\n        old?.destroy();\n        if (!me.tooltipTemplate || !tooltip) {\n            return null;\n        }\n        return Tooltip.new({\n            align          : 'b-t',\n            forSelector    : '.b-timelinebase:not(.b-eventeditor-editing):not(.b-resizing-event):not(.b-dragcreating):not(.b-dragging-event):not(.b-creating-dependency) .b-sch-foreground-canvas > .b-tasknonworkingtime',\n            forElement     : me.client.timeAxisSubGridElement,\n            showOnHover    : true,\n            hideDelay      : 0,\n            anchorToTarget : true,\n            trackMouse     : false,\n            getHtml        : ({ activeTarget }) => {\n                const\n                    {\n                        taskRecord,\n                        interval\n                    } = activeTarget.elementData;\n                return me.tooltipTemplate({ taskRecord, ...interval });\n            }\n        }, tooltip);\n    }\n    //endregion\n    handleMouseEvent(domEvent) {\n        const\n            me                       = this,\n            target                   = domEvent.target.closest('.b-tasknonworkingtime'),\n            { taskRecord, interval } = target.elementData;\n        me.client.trigger('taskNonWorkingTime' + casedEventName[domEvent.type], {\n            feature : me,\n            taskRecord,\n            interval,\n            domEvent\n        });\n    }\n}\nTaskNonWorkingTime._$name = 'TaskNonWorkingTime'; GridFeatureManager.registerFeature(TaskNonWorkingTime, false, 'Gantt');\n", "import EventHelper from '../../Core/helper/EventHelper.js';\nimport EventResize from '../../SchedulerPro/feature/EventResize.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport TransactionalFeature from '../../Scheduler/feature/mixin/TransactionalFeature.js';\n/**\n * @module Gantt/feature/TaskResize\n */\n/**\n * Feature that allows resizing a task by dragging its end date. Resizing a task by dragging its start date is not allowed.\n *\n * This feature is **enabled** by default\n *\n * This feature updates the event's `endDate` live in order to leverage the\n * rendering pathway to always yield a correct appearance. The changes are done in\n * {@link Core.data.Model#function-beginBatch batched} mode so that changes do not become\n * eligible for data synchronization or propagation until the operation is completed.\n *\n * ## Customizing the resize tooltip\n *\n * To show custom HTML in the tooltip, please see the {@link #config-tooltipTemplate} config. Example:\n *\n * ```javascript\n * taskResize : {\n *     // A minimal end date tooltip\n *     tooltipTemplate : ({ record, endDate }) => {\n *         return DateHelper.format(endDate, 'MMM D');\n *     }\n * }\n * ```\n *\n * @extends SchedulerPro/feature/EventResize\n * @demo Gantt/basic\n * @classtype taskResize\n * @feature\n */\nexport default class TaskResize extends TransactionalFeature(EventResize) {\n    static get $name() {\n        return 'TaskResize';\n    }\n    static get configurable() {\n        return {\n            draggingItemCls : 'b-sch-event-resizing',\n            resizingItemInnerCls : null,\n            /**\n             * Gets or sets special key to activate successor pinning behavior. Supported values are:\n             * * 'ctrl'\n             * * 'shift'\n             * * 'alt'\n             * * 'meta'\n             *\n             * Assign false to disable it.\n             * @member {Boolean|String} pinSuccessors\n             */\n            /**\n             * Set to true to enable resizing task while pinning dependent tasks. By default, this behavior is activated\n             * if you hold CTRL key during drag. Alternatively, you may provide key name to use. Supported values are:\n             * * 'ctrl'\n             * * 'shift'\n             * * 'alt'\n             * * 'meta'\n             *\n             * **Note**: Only supported in forward-scheduled project\n             *\n             * @config {Boolean|String}\n             * @default\n             */\n            pinSuccessors : false\n        };\n    }\n    static get pluginConfig() {\n        return {\n            chain : ['render', 'onEventDataGenerated', 'isTaskElementDraggable']\n        };\n    }\n    onDragItemMouseMove() {\n        // internalUpdateRecord is based on the assumption only taskbar end edge can be resized\n        this[`${this.client.rtl ? 'right' : 'left'}Handle`] = false;\n        super.onDragItemMouseMove(...arguments);\n    }\n    changePinSuccessors(value) {\n        return EventHelper.toSpecialKey(value);\n    }\n    //region Events\n    /**\n     * @event beforeEventResize\n     * @hide\n     */\n    /**\n     * @event eventResizeStart\n     * @hide\n     */\n    /**\n     * @event eventPartialResize\n     * @hide\n     */\n    /**\n     * @event beforeEventResizeFinalize\n     * @hide\n     */\n    /**\n     * @event eventResizeEnd\n     * @hide\n     */\n    /**\n     * Fires on the owning Gantt before resizing starts. Return false to prevent the operation.\n     * @event beforeTaskResize\n     * @preventable\n     * @on-owner\n     * @param {Gantt.model.TaskModel} taskRecord\n     * @param {Event} event\n     */\n    /**\n     * Fires on the owning Gantt when task resizing starts\n     * @event taskResizeStart\n     * @on-owner\n     * @param {Gantt.model.TaskModel} taskRecord\n     * @param {Event} event\n     */\n    /**\n     * Fires on the owning Gantt on each resize move event\n     * @event taskPartialResize\n     * @on-owner\n     * @param {Gantt.model.TaskModel} taskRecord\n     * @param {Date} start The start date\n     * @param {Date} end The end date\n     * @param {HTMLElement} element The element\n     */\n    /**\n     * Fires on the owning Gantt to allow implementer to prevent immediate finalization by setting `data.context.async = true`\n     * in the listener, to show a confirmation popup etc\n     * ```javascript\n     *  gantt.on('beforetaskresizefinalize', ({context}) => {\n     *      context.async = true;\n     *      setTimeout(() => {\n     *          // async code don't forget to call finalize\n     *          context.finalize();\n     *      }, 1000);\n     *  })\n     * ```\n     * @event beforeTaskResizeFinalize\n     * @on-owner\n     * @param {Gantt.model.TaskModel} taskRecord\n     * @param {Object} data\n     * @param {Gantt.view.Gantt} data.source Gantt instance\n     * @param {Object} data.context\n     * @param {Boolean} data.context.async Set true to handle resize asynchronously (e.g. to wait for user\n     * confirmation)\n     * @param {Function} data.context.finalize Call this method to finalize resize. This method accepts one\n     * argument: pass true to update records, or false, to ignore changes\n     */\n    /**\n     * Fires on the owning Gantt after the resizing gesture has finished.\n     * @event taskResizeEnd\n     * @on-owner\n     * @param {Boolean} changed\n     * @param {Gantt.model.TaskModel} taskRecord\n     */\n    //endregion\n    //region Gantt specifics\n    isTaskElementDraggable(eventElement, eventRecord, el, event) {\n        return this.isEventElementDraggable(...arguments);\n    }\n    checkValidity() {\n        // Task resize just does basic validity checks which runs the validatorFn\n        return this.basicValidityCheck(...arguments);\n    }\n    getBeforeResizeParams(context) {\n        return {};\n    }\n    // Injects Gantt specific data into the drag context\n    setupProductResizeContext(context, event) {\n        const\n            gantt      = this.client,\n            taskRecord = gantt.resolveTaskRecord(context.element);\n        Object.assign(context, {\n            taskRecord,\n            eventRecord     : taskRecord,\n            dateConstraints : gantt.getDateConstraints?.(taskRecord)\n        });\n    }\n    async internalUpdateRecord(context, timespanRecord) {\n        const\n            { client }     = this,\n            { generation } = timespanRecord,\n            {\n                startDate,\n                endDate\n            }              = context,\n            toSet          = { endDate };\n        // Fix the duration according to the Entity's rules.\n        context.duration = toSet.duration = timespanRecord.run('calculateProjectedDuration', startDate, endDate);\n        // Fix the dragged date point according to the Entity's rules.\n        const value = toSet[context.toSet] = timespanRecord.run('calculateProjectedXDateWithDuration', startDate, true, context.duration);\n        // Update the record to its final correct state using *batched changes*\n        // These will *not* be propagated, it's just to force the dragged event bar\n        // into its corrected shape before the real changes which will propagate are applied below.\n        // We MUST do it like this because the final state may not be a net change if the changes\n        // got rejected, and in that case, the engine will not end up firing any change events.\n        timespanRecord.set(toSet);\n        // Quit listening for batchedUpdate *before* we cancel the batch so that the\n        // change events from the revert do not update the UI.\n        client.endListeningForBatchedUpdates();\n        this.cancelEventRecordBatch(timespanRecord);\n        if (this.pinSuccessors && context.event[this.pinSuccessors]) {\n            await timespanRecord.setEndDatePinningSuccessors(value);\n        }\n        else {\n            await timespanRecord.setEndDate(value, false);\n        }\n        timespanRecord.endBatch();\n        // If the record has been changed\n        return timespanRecord.generation !== generation;\n    }\n    //endregion\n    //#region\n    triggerEventResizeStart(eventType, event, context) {\n        super.triggerEventResizeStart(eventType, event, context);\n        return this.startFeatureTransaction();\n    }\n    triggerEventResizeEnd(eventType, event) {\n        super.triggerEventResizeEnd(eventType, event);\n        if (event.changed) {\n            this.finishFeatureTransaction();\n        }\n        else {\n            this.rejectFeatureTransaction();\n        }\n    }\n    //#endregion\n}\nTaskResize._$name = 'TaskResize'; GridFeatureManager.registerFeature(TaskResize, true, 'Gantt');\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport TaskDrag from './TaskDrag.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\n/**\n * @module Gantt/feature/TaskSegmentDrag\n */\n/**\n * Allows user to drag and drop task segments, to change their start date.\n *\n * {@inlineexample Gantt/feature/TaskSegments.js}\n *\n * This feature is **enabled** by default\n *\n * @extends Gantt/feature/TaskDrag\n * @demo Gantt/split-tasks\n * @classtype taskSegmentDrag\n * @feature\n */\nexport default class TaskSegmentDrag extends TaskDrag {\n    //region Config\n    static $name = 'TaskSegmentDrag';\n    static get configurable() {\n        return {\n            capitalizedEventName : 'TaskSegment'\n        };\n    }\n    static get pluginConfig() {\n        return {\n            chain : ['onInternalPaint', 'isTaskElementDraggable']\n        };\n    }\n    //endregion\n    //region Events\n    /**\n     * Fires on the owning Gantt before segment dragging starts. Return `false` to prevent the action.\n     * @event beforeTaskSegmentDrag\n     * @preventable\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {Gantt.model.TaskModel} taskRecord The segment about to be dragged\n     * @param {Event} event The native browser event\n     */\n    /**\n     * Fires on the owning Gantt when segment dragging starts\n     * @event taskSegmentDragStart\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {Gantt.model.TaskModel[]} taskRecords Dragged segments\n     */\n    /**\n     * Fires on the owning Gantt while a segment is being dragged\n     * @event taskSegmentDrag\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {Gantt.model.TaskModel[]} taskRecords Dragged segments\n     * @param {Date} startDate\n     * @param {Date} endDate\n     * @param {Object} dragData\n     * @param {Boolean} changed `true` if startDate has changed.\n     */\n    /**\n     * Fires on the owning Gantt to allow implementer to prevent immediate finalization by setting `data.context.async = true`\n     * in the listener, to show a confirmation popup etc\n     * ```javascript\n     * scheduler.on('beforetasksegmentdropfinalize', ({ context }) => {\n     *     context.async = true;\n     *     setTimeout(() => {\n     *         // async code don't forget to call finalize\n     *         context.finalize();\n     *     }, 1000);\n     * })\n     * ```\n     * @event beforeTaskSegmentDropFinalize\n     * @on-owner\n     * @param {Gantt.view.Gantt} source Gantt instance\n     * @param {Object} context\n     * @param {Gantt.model.TaskModel[]} context.taskRecords Dragged segments\n     * @param {Boolean} context.valid Set this to `false` to mark the drop as invalid\n     * @param {Boolean} context.async Set true to handle dragdrop asynchronously (e.g. to wait for user\n     * confirmation)\n     * @param {Function} context.finalize Call this method to finalize dragdrop. This method accepts one\n     * argument: pass true to update records, or false, to ignore changes\n     */\n    /**\n     * Fires on the owning Gantt after a valid task drop\n     * @event taskSegmentDrop\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {Gantt.model.TaskModel[]} taskRecords Dropped segments\n     * @param {Boolean} isCopy\n     */\n    /**\n     * Fires on the owning Gantt after a task drop, regardless if the drop validity\n     * @event afterTaskSegmentDrop\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {Gantt.model.TaskModel[]} taskRecords Dropped segments\n     * @param {Boolean} valid\n     */\n    //endregion\n    // Prevent TaskDrag to handle a segment\n    isTaskElementDraggable(taskElement, taskRecord, el, event) {\n        const me = this;\n        // We don't care dragging if that's a task having nothing to do w/ segments\n        if (me.disabled || (!taskRecord.isEventSegment && !taskRecord.isSegmented)) {\n            return true;\n        }\n        // Otherwise make sure TaskDrag is not trying to handle a segment element drag\n        return !el.closest(me.drag.targetSelector);\n    }\n    //region Drag events\n    triggerBeforeEventDrag(eventType, event) {\n        return this.client.trigger('beforeTaskSegmentDrag', event);\n    }\n    triggerBeforeEventDropFinalize(eventType, eventData, client) {\n        client.trigger(`before${this.capitalizedEventName}DropFinalize`, eventData);\n    }\n    triggerEventDrag(dragData, start) {\n        // Trigger the event on every mousemove so that features which need to adjust\n        // Such as dependencies and baselines can keep adjusted.\n        this.client.trigger('taskSegmentDrag', {\n            taskRecords : dragData.draggedEntities,\n            startDate   : dragData.startDate,\n            endDate     : dragData.endDate,\n            dragData,\n            changed     : dragData.startDate - start !== 0\n        });\n    }\n    triggerDragStart(dragData) {\n        this.client.trigger('taskSegmentDragStart', {\n            taskRecords : dragData.draggedEntities,\n            dragData\n        });\n    }\n    triggerDragAbort(dragData) {\n        this.client.trigger('taskSegmentDragAbort', {\n            taskRecords : dragData.draggedEntities,\n            context     : dragData\n        });\n    }\n    triggerDragAbortFinalized(dragData) {\n        this.client.trigger('taskSegmentDragAbortFinalized', {\n            taskRecords : dragData.draggedEntities,\n            context     : dragData\n        });\n    }\n    triggerAfterDrop(dragData, valid) {\n        this.currentOverClient.trigger('afterTaskSegmentDrop', {\n            taskRecords : dragData.draggedEntities,\n            context     : dragData,\n            valid\n        });\n    }\n    onInternalInvalidDrop(abort) {\n        super.onInternalInvalidDrop(...arguments);\n        // revert main task element width changes\n        this.dragData.mainTaskElement.style.width = this.dragData.initialMainTaskElementWidth + 'px';\n    }\n    //endregion\n    //region Drag data\n    buildDragHelperConfig() {\n        const config = super.buildDragHelperConfig();\n        config.targetSelector = '.b-sch-event-segment:not(.b-first)';\n        return config;\n    }\n    getTaskScheduleRegion(taskRecord, dateConstraints) {\n        const\n            { client }      = this,\n            mainTaskElement = client.getElementFromTaskRecord(taskRecord.event),\n            mainTaskRegion  = Rectangle.from(mainTaskElement, client.timeAxisSubGridElement),\n            result          = this.client.getScheduleRegion(taskRecord.event, true, dateConstraints);\n        // For segment we shift constrainRectangle by the main event offset\n        result.translate(-mainTaskRegion.x);\n        return result;\n    }\n    setupProductDragData(context) {\n        const result = super.setupProductDragData(context);\n        result.mainTaskElement = this.client.getElementFromTaskRecord(result.record.event, false);\n        result.initialMainTaskElementWidth = parseFloat(result.mainTaskElement.style.width);\n        return result;\n    }\n    updateDragContext(context, event) {\n        super.updateDragContext(...arguments);\n        const {\n            dirty,\n            record,\n            mainTaskElement,\n            initialMainTaskElementWidth\n        } = this.dragData;\n        // If dragging the last segment update the main task width accordingly\n        // need this to update dependency properly while dragging\n        if (dirty && !record.nextSegment) {\n            // main task width = its origin width + drag distance\n            mainTaskElement.style.width = (initialMainTaskElementWidth + context.clientX - context.startClientX) + 'px';\n        }\n    }\n    get tipId() {\n        return `${this.client.id}-task-segment-drag-tip`;\n    }\n    //endregion\n    //region Finalize & validation\n    /**\n     * Update tasks being dragged.\n     * @private\n     * @param {Object} context Drag data.\n     */\n    async updateRecords(context) {\n        const\n            {\n                startDate,\n                draggedEntities : [taskRecord]\n            }                = context,\n            oldStartDate     = taskRecord.startDate;\n        if (taskRecord.isEventSegment) {\n            await taskRecord.setStartDate(startDate, true);\n            // If not rejected (the startDate has changed), tell the world there was a successful drop.\n            if (taskRecord.startDate - oldStartDate) {\n                this.client.trigger('taskSegmentDrop', {\n                    taskRecords : context.draggedEntities\n                });\n            }\n            else {\n                this.dragData.valid = false;\n            }\n        }\n    }\n    getDateConstraints(taskRecord) {\n        const result = super.getDateConstraints(taskRecord) || {};\n        let { minDate, maxDate } = result;\n        // A segment movement is constrained by its neighbor segments if any\n        if (taskRecord.previousSegment && (!minDate || minDate < taskRecord.previousSegment.endDate)) {\n            minDate = taskRecord.previousSegment.endDate;\n        }\n        if (taskRecord.nextSegment && (!maxDate || maxDate < taskRecord.nextSegment.startDate)) {\n            maxDate = taskRecord.nextSegment.startDate;\n        }\n        return (minDate || maxDate) && {\n            start : minDate,\n            end   : maxDate\n        };\n    }\n    //endregion\n}\nTaskSegmentDrag._$name = 'TaskSegmentDrag'; GridFeatureManager.registerFeature(TaskSegmentDrag, true, 'Gantt');\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport EventSegmentResize from '../../SchedulerPro/feature/EventSegmentResize.js';\n/**\n * @module Gantt/feature/TaskSegmentResize\n */\n/**\n * Feature that allows resizing a task segment by dragging its end.\n *\n * {@inlineexample Gantt/feature/TaskSegments.js}\n *\n * This feature is **enabled** by default.\n *\n * @extends SchedulerPro/feature/EventSegmentResize\n * @classtype taskSegmentResize\n * @feature\n */\nexport default class TaskSegmentResize extends EventSegmentResize {\n    //region Events\n    /**\n     * Fired on the owning Gantt before resizing starts. Return `false` to prevent the action.\n     * @event beforeTaskSegmentResize\n     * @on-owner\n     * @preventable\n     * @param {Gantt.view.Gantt} source Gantt instance\n     * @param {Gantt.model.TaskModel} taskRecord Segment being resized\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record the resize starts within\n     * @param {MouseEvent} event Browser event\n     */\n    /**\n     * Fires on the owning Gantt when event resizing starts\n     * @event taskSegmentResizeStart\n     * @on-owner\n     * @param {Gantt.view.Gantt} source Gantt instance\n     * @param {Gantt.model.TaskModel} taskRecord Segment being resized\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record the resize starts within\n     * @param {MouseEvent} event Browser event\n     */\n    /**\n     * Fires on the owning Gantt on each resize move event\n     * @event taskSegmentPartialResize\n     * @on-owner\n     * @param {Gantt.view.Gantt} source Gantt instance\n     * @param {Gantt.model.TaskModel} taskRecord Segment being resized\n     * @param {Date} startDate\n     * @param {Date} endDate\n     * @param {HTMLElement} element\n     */\n    /**\n     * Fired on the owning Gantt to allow implementer to prevent immediate finalization by setting\n     * `data.context.async = true` in the listener, to show a confirmation popup etc.\n     * ```javascript\n     *  gantt.on('beforeTaskSegmentResizeFinalize', ({context}) => {\n     *      context.async = true;\n     *      setTimeout(() => {\n     *          // async code don't forget to call finalize\n     *          context.finalize();\n     *      }, 1000);\n     *  })\n     * ```\n     * @event beforeTaskSegmentResizeFinalize\n     * @on-owner\n     * @param {Gantt.view.Gantt} source Gantt instance\n     * @param {Object} context\n     * @param {Boolean} context.async Set true to handle resize asynchronously (e.g. to wait for user confirmation)\n     * @param {Function} context.finalize Call this method to finalize resize. This method accepts one argument:\n     *                   pass `true` to update records, or `false`, to ignore changes\n     */\n    /**\n     * Fires on the owning Gantt after the resizing gesture has finished.\n     * @event taskSegmentResizeEnd\n     * @on-owner\n     * @param {Gantt.view.Gantt} source Gantt instance\n     * @param {Boolean} changed Shows if the record has been changed by the resize action\n     * @param {Gantt.model.TaskModel} taskRecord Segment being resized\n     */\n    //endregion\n    //region Config\n    static $name = 'TaskSegmentResize';\n    static get configurable() {\n        return {\n            draggingItemCls : 'b-sch-event-resizing',\n            resizingItemInnerCls : null,\n            leftHandle : false\n        };\n    }\n    static get pluginConfig() {\n        return {\n            chain : ['render', 'onEventDataGenerated', 'isTaskElementDraggable', 'isTaskSegmentElementDraggable']\n        };\n    }\n    //endregion\n    //region Init & destroy\n    // Prevent task dragging when it starts over resize handles\n    isTaskElementDraggable(eventElement, eventRecord, el, event) {\n        return this.isEventElementDraggable(...arguments);\n    }\n    // Prevent segment dragging when it starts over resize handles\n    isTaskSegmentElementDraggable(eventElement, eventRecord, el, event) {\n        return this.isEventElementDraggable(...arguments);\n    }\n    checkValidity() {\n        // Task resize just does basic validity checks which runs the validatorFn\n        return this.basicValidityCheck(...arguments);\n    }\n    getBeforeResizeParams(context) {\n        return {};\n    }\n    // Injects Gantt specific data into the drag context\n    setupProductResizeContext(context, event) {\n        const\n            gantt      = this.client,\n            taskRecord = gantt.resolveTaskRecord(context.element);\n        Object.assign(context, {\n            taskRecord,\n            eventRecord     : taskRecord,\n            dateConstraints : gantt.getDateConstraints?.(taskRecord)\n        });\n    }\n    async internalUpdateRecord(context, timespanRecord) {\n        const\n            { client }     = this,\n            { generation } = timespanRecord,\n            {\n                startDate,\n                endDate\n            }              = context,\n            toSet          = { endDate };\n        // Fix the duration according to the Entity's rules.\n        context.duration = toSet.duration = timespanRecord.run('calculateProjectedDuration', startDate, endDate);\n        // Fix the dragged date point according to the Entity's rules.\n        const value = toSet[context.toSet] = timespanRecord.run('calculateProjectedXDateWithDuration', startDate, true, context.duration);\n        // Update the record to its final correct state using *batched changes*\n        // These will *not* be propagated, it's just to force the dragged event bar\n        // into its corrected shape before the real changes which will propagate are applied below.\n        // We MUST do it like this because the final state may not be a net change if the changes\n        // got rejected, and in that case, the engine will not end up firing any change events.\n        timespanRecord.set(toSet);\n        // Quit listening for batchedUpdate *before* we cancel the batch so that the\n        // change events from the revert do not update the UI.\n        client.endListeningForBatchedUpdates();\n        this.cancelEventRecordBatch(timespanRecord);\n        if (this.pinSuccessors && context.event[this.pinSuccessors]) {\n            await timespanRecord.setEndDatePinningSuccessors(value);\n        }\n        else {\n            await timespanRecord.setEndDate(value, false);\n        }\n        timespanRecord.endBatch();\n        // If the record has been changed\n        return timespanRecord.generation !== generation;\n    }\n    get tipId() {\n        return `${this.client.id}-task-segment-resize-tip`;\n    }\n    //endregion\n}\nTaskSegmentResize._$name = 'TaskSegmentResize'; GridFeatureManager.registerFeature(TaskSegmentResize, true, 'Gantt');\n", "import TooltipBase from '../../Scheduler/feature/base/TooltipBase.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\n/**\n * @module Gantt/feature/TaskTooltip\n */\n/**\n * This feature displays a task tooltip on mouse hover. The template of the tooltip is customizable\n * with the {@link #config-template} function.\n *\n * ## Showing custom HTML in the tooltip\n *```javascript\n * new Gantt({\n *     features : {\n *         taskTooltip : {\n *             template : ({ taskRecord }) => `Tooltip for ${taskRecord.name}`,\n *             // Tooltip configs can be used here\n *             align    : 'l-r' // Align left to right\n *         }\n *     }\n * });\n * ```\n *\n * ## Showing remotely loaded data\n * Loading remote data into the task tooltip is easy. Simply use the {@link #config-template} and return a Promise which yields the content to show.\n * ```javascript\n * new Gantt({\n *     features : {\n *         taskTooltip : {\n *             template : ({ taskRecord }) => AjaxHelper.get(`./fakeServer?name=${taskRecord.name}`).then(response => response.text())\n *         }\n *     }\n * });\n * ```\n *\n * This feature is **enabled** by default.\n *\n * @extends Scheduler/feature/base/TooltipBase\n * @demo Gantt/tooltips\n * @classtype taskTooltip\n * @feature\n */\nexport default class TaskTooltip extends TooltipBase {\n    static get $name() {\n        return 'TaskTooltip';\n    }\n    static get defaultConfig() {\n        return {\n            /**\n             * Template (a function accepting task data and returning a string) used to display info in the tooltip.\n             * The template will be called with an object as with fields as detailed below\n             *\n             * @config {Function} template\n             * @param {Object} data Tooltip data\n             * @param {Gantt.model.TaskModel} data.taskRecord Task record\n             * @param {String} data.startClockHtml Predefined HTML to show the start time\n             * @param {String} data.endClockHtml Predefined HTML to show the end time\n             * @returns {String} String representing the HTML markup\n             */\n            template(data) {\n                const\n                    me              = this,\n                    { taskRecord }  = data,\n                    displayDuration = me.client.formatDuration(taskRecord.duration, me.decimalPrecision);\n                return `\n                    ${taskRecord.name ? `<div class=\"b-gantt-task-title\">${StringHelper.encodeHtml(taskRecord.name)}</div>` : ''}\n                    <table>\n                    <tr><td>${me.L('L{Start}')}:</td><td>${data.startClockHtml}</td></tr>\n                    ${taskRecord.milestone ? '' : `\n                        <tr><td>${me.L('L{End}')}:</td><td>${data.endClockHtml}</td></tr>\n                        <tr><td>${me.L('L{Duration}')}:</td><td class=\"b-right\">${displayDuration} ${DateHelper.getLocalizedNameOfUnit(taskRecord.durationUnit, taskRecord.duration !== 1)}</td></tr>\n                        <tr><td>${me.L('L{Complete}')}:</td><td class=\"b-right\">${taskRecord.renderedPercentDone}%</td></tr>\n                    `}\n                    </table>                 \n                `;\n            },\n            /**\n             * Precision of displayed duration, defaults to use {@link Gantt.view.Gantt#config-durationDisplayPrecision}.\n             * Specify an integer value to override that setting, or `false` to use raw value\n             * @member {Number|Boolean} decimalPrecision\n             */\n            /**\n             * Precision of displayed duration, defaults to use {@link Gantt.view.Gantt#config-durationDisplayPrecision}.\n             * Specify an integer value to override that setting, or `false` to use raw value\n             * @config {Number|Boolean}\n             */\n            decimalPrecision : null,\n            cls : 'b-gantt-task-tooltip',\n            monitorRecordUpdate : true\n        };\n    }\n}\nTaskTooltip._$name = 'TaskTooltip'; GridFeatureManager.registerFeature(TaskTooltip, true, 'Gantt');\n", "import GridTreeGroup from '../../Grid/feature/TreeGroup.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport WalkHelper from '../../Core/helper/WalkHelper.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\nimport AttachToProjectMixin from '../../Scheduler/data/mixin/AttachToProjectMixin.js';\n/**\n * @module Gantt/feature/TreeGroup\n */\n/**\n * Extends Grid's {@link Grid.feature.TreeGroup} (follow the link for more info) feature to enable using it with Gantt.\n * Allows generating a new task tree where parents are determined by the values of specified task fields/functions:\n *\n * {@inlineexample Gantt/feature/TreeGroup.js}\n *\n * ## Important information\n *\n * Using the TreeGroup feature comes with some caveats:\n *\n * * Grouping replaces the store Gantt uses to display tasks with a temporary \"display store\". The original task store\n *   is left intact, when grouping stops Gantt will revert to using it to display tasks.\n * * `gantt.taskStore` points to the original store when this feature is enabled. To apply sorting or filtering programmatically, you should instead interact with the \"display store\" directly, using `gantt.store`.\n * * Generated parents are read-only, they cannot be edited using the default UI.\n * * Leaves in the new tree are still editable as usual, and any changes to them survives the grouping operation.\n * * Moving tasks in the tree (rearranging rows) is not supported while it is grouped.\n *\n * This feature is <strong>disabled</strong> by default.\n *\n * @extends Grid/feature/TreeGroup\n *\n * @classtype treeGroup\n * @feature\n *\n * @typings Grid.feature.TreeGroup -> Grid.feature.GridTreeGroup\n */\nexport default class TreeGroup extends GridTreeGroup.mixin(AttachToProjectMixin, Delayable) {\n    static $name = 'TreeGroup';\n    static delayable = {\n        refresh : 'raf'\n    };\n    updateParents(root) {\n        // Since generated parents are not part of the project we have to manually set their dates etc. Walk them all\n        // (since they are generated we are guaranteed there is no mix of parents and leaves at any give level), and\n        // determine those\n        root.children?.length && WalkHelper.postWalk(root, task => !task.children?.[0].isLeaf && task.children, task => {\n            const { children } = task;\n            let minStartDate = children[0].startDate,\n                maxEndDate   = children[0].endDate,\n                percentDone  = 0;\n            for (const child of children) {\n                if (child.startDate) {\n                    minStartDate = Math.min(child.startDate, minStartDate || Number.MAX_SAFE_INTEGER);\n                }\n                if (child.endDate) {\n                    maxEndDate   = Math.max(child.endDate, maxEndDate);\n                }\n                percentDone += child.percentDone;\n            }\n            task.startDate = new Date(minStartDate);\n            task.endDate = new Date(maxEndDate);\n            task.duration = this.client.project.taskStore.rootNode.run('calculateProjectedDuration', task.startDate, task.endDate);\n            task.percentDone = percentDone / children.length;\n        });\n    }\n    // Generate dates etc. for parents during grouping\n    processTransformedData(transformedData) {\n        this.updateParents(transformedData);\n    }\n    // Update dates etc. for parents when a task is changed\n    onTaskStoreChange({ action, records }) {\n        const { client } = this;\n        if (client.isTreeGrouped && records.some(r => r.isLeaf) && action !== 'dataset') {\n            client.suspendRefresh();\n            this.updateParents(client.store.rootNode);\n            client.resumeRefresh(false);\n            this.refresh();\n        }\n    }\n    refresh() {\n        this.client.refreshWithTransition();\n    }\n    // Add task store listener when grouping, to catch task changes and update parents\n    async applyLevels(levels) {\n        // Detach prior to applying new levels, to avoid triggering old listeners in case tasks are affected\n        // (they should not be, locked down in test, but just in case)\n        this.detachListeners('taskStore');\n        await super.applyLevels(levels);\n        if (this.isDestroyed) {\n            return;\n        }\n        if (levels?.length > 0) {\n            // In case a 2nd called came here before a prior one completing\n            this.detachListeners('taskStore');\n            this.client.taskStore.ion({\n                name    : 'taskStore',\n                change  : 'onTaskStoreChange',\n                thisObj : this\n            });\n        }\n    }\n}\nTreeGroup._$name = 'TreeGroup'; GridFeatureManager.registerFeature(TreeGroup, false, 'Gantt');\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport TaskModel from '../model/TaskModel.js';\nimport SchedulerProVersions from '../../SchedulerPro/feature/Versions.js';\n/**\n * @module Gantt/feature/Versions\n */\n/**\n * Captures versions (snapshots) of the active project, including a detailed log of the changes new in each version.\n *\n * When active, the feature monitors the project for changes and appends them to the changelog. When a version is captured,\n * the version will consist of a complete snapshot of the project data at the time of the capture, in addition to the list\n * of changes in the changelog that have occurred since the last version was captured.\n *\n * For information about the data structure representing a version and how to persist it, see {@link SchedulerPro.model.VersionModel}.\n *\n * For information about the data structures representing the changelog and how to persist them, see\n * {@link SchedulerPro.model.changelog.ChangeLogTransactionModel}.\n *\n * This feature is **disabled** by default.\n * For info on enabling it, see {@link Grid.view.mixin.GridFeatures}.\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         versions : true\n *     }\n * });\n * ```\n *\n * To display versions and their changes, use a {@link SchedulerPro.widget.VersionGrid} configured with a {@link Gantt.model.ProjectModel}.\n *\n * {@inlineexample Gantt/guides/whats-new/5.3.0/versions.js}\n *\n * See also:\n * - {@link SchedulerPro.model.VersionModel} A stored version of a ProjectModel, captured at a point in time, with change log\n * - {@link SchedulerPro.model.changelog.ChangeLogTransactionModel} The set of add/remove/update actions that occurred in response to a user action\n * - {@link SchedulerPro.widget.VersionGrid} Widget for displaying a project's versions and changes\n *\n * @extends SchedulerPro/feature/Versions\n * @classtype versions\n * @feature\n *\n * @typings SchedulerPro.feature.Versions -> SchedulerPro.feature.SchedulerProVersions\n */\nexport default class GanttVersions extends SchedulerProVersions {\n    static $name = 'Versions';\n    static configurable = {\n        /**\n         * The set of Model types whose subtypes should be recorded as the base type in the change log. For example,\n         * by default if a subclassed TaskModelEx exists and an instance of one is updated, it will be recorded in the\n         * changelog as a TaskModel.\n         * @config {Array}\n         * @default [TaskModel, AssignmentModel, DependencyModel, ResourceModel]\n         */\n        knownBaseTypes : [TaskModel, ...SchedulerProVersions.configurable.knownBaseTypes]\n    };\n    construct(gantt, config) {\n        super.construct(gantt, config);\n        gantt.ion({\n            taskMenuItem : ({ item, selection }) => {\n                const\n                    me         = this,\n                    isMultiple = selection.length > 1;\n                if (item.ref === 'deleteTask') {\n                    me.transactionDescription = isMultiple ? me.L('L{Versions.deletedTasks}')\n                        : me.L('L{Versions.deletedTask}');\n                }\n                else if (item.ref === 'indent') {\n                    me.transactionDescription = me.L('L{Versions.indented}');\n                }\n                else if (item.ref === 'outdent') {\n                    me.transactionDescription = me.L('L{Versions.outdented}');\n                }\n                else if (item.ref === 'cut') {\n                    me.transactionDescription = me.L('L{Versions.cut}');\n                }\n                else if (item.ref === 'paste') {\n                    me.transactionDescription = me.L('L{Versions.pasted}');\n                }\n            }\n        });\n    }\n}\nGanttVersions._$name = 'GanttVersions'; GridFeatureManager.registerFeature(GanttVersions, false, 'Gantt');\n", "import Rectangle from '../../../../Core/helper/util/Rectangle.js';\nimport DomHelper from '../../../../Core/helper/DomHelper.js';\nimport DomSync from '../../../../Core/helper/DomSync.js';\n// This value is actually defined in CSS for the Gantt as a height for wrap element when baseline is active. Ideally\n// we should link it to the style\nconst BASELINE_RATIO = 0.4;\n/**\n * This mixin overrides event elements handling in similar scheduler mixin. Uses correct element class names and\n * resolves elements in gantt-way.\n * @private\n */\nexport default base => class GanttExporterMixin extends base {\n    async prepareComponent(config) {\n        await super.prepareComponent(config);\n        const\n            me             = this,\n            // Clear cloned gantt element from task elements\n            fgCanvasEl     = me.element.querySelector('.b-sch-foreground-canvas');\n        DomHelper.removeEachSelector(fgCanvasEl, '.b-gantt-task-wrap');\n        DomHelper.removeEachSelector(fgCanvasEl, '.b-released');\n    }\n    collectEvents(rows, config) {\n        const\n            me         = this,\n            addedRows  = rows.length,\n            { client } = config,\n            normalRows = me.exportMeta.subGrids.normal.rows;\n        rows.forEach((row, index) => {\n            const\n                rowConfig = normalRows[normalRows.length - addedRows + index],\n                event     = client.store.getAt(row.dataIndex),\n                eventsMap = rowConfig[3];\n            if (event.isScheduled) {\n                const el = client.getElementFromTaskRecord(event, false);\n                if (el && !eventsMap.has(event.id)) {\n                    eventsMap.set(event.id, [el.outerHTML, Rectangle.from(el.firstChild, el.offsetParent)]);\n                }\n            }\n        });\n    }\n    renderEvents(config, rows) {\n        const\n            me              = this,\n            { client }      = config,\n            renderBaselines = client.hasActiveFeature('baselines'),\n            normalRows      = me.exportMeta.subGrids.normal.rows;\n        // Unlike Scheduler Gantt calculates elements and boxes for dependencies from the index of the record in the\n        // store. Upside is that it allows to correctly estimate position of the task which is outside of the view.\n        // Downside is that we will have to either move every single element or the entire canvas up by the difference\n        // between first row we rendered and estimated vertical position\n        const offset = me.exportMeta.topRowOffset = rows[0].top - rows[0].dataIndex * rows[0].offsetHeight;\n        rows.forEach((row, index) => {\n            const\n                rowConfig  = normalRows[index],\n                eventsMap  = rowConfig[3],\n                record     = client.store.getAt(row.dataIndex),\n                renderData = client.currentOrientation.getTaskRenderData(row, record),\n                { taskId } = renderData;\n            renderData.top += offset;\n            // If task\n            if (renderData.isTask) {\n                const\n                    taskDOMConfig   = client.currentOrientation.getTaskDOMConfig(renderData),\n                    targetElement   = document.createElement('div'),\n                    { isMilestone } = record,\n                    hasBaselines    = record.baselines.count;\n                DomSync.sync({\n                    targetElement,\n                    domConfig : taskDOMConfig\n                });\n                let { left, top, width, height } = renderData;\n                // for milestone, we need to adjust left coordinate by half height(width)\n                if (isMilestone) {\n                    left = left - height / 2;\n                    width = height;\n                }\n                eventsMap.set(taskId, [\n                    targetElement.outerHTML,\n                    new Rectangle(left, top, width, height * (renderBaselines && hasBaselines ? BASELINE_RATIO : 1)), []\n                ]);\n            }\n            if (renderData.extraConfigs.length) {\n                const\n                    targetElement = document.createElement('div'),\n                    extrasArray   = [];\n                for (const domConfig of renderData.extraConfigs) {\n                    DomSync.sync({\n                        targetElement,\n                        domConfig\n                    });\n                    extrasArray.push(targetElement.outerHTML);\n                }\n                if (!eventsMap.has(taskId)) {\n                    eventsMap.set(taskId, ['', null, []]);\n                }\n                eventsMap.get(taskId)[2] = extrasArray;\n            }\n        });\n    }\n    getEventBox(event) {\n        if (!event) {\n            return;\n        }\n        let result = this.exportMeta.eventsBoxes.get(String(event.id));\n        // If task is not rendered we need to estimate its position\n        if (!result) {\n            const\n                { client }     = this.exportMeta,\n                startX         = client.getCoordinateFromDate(event.startDate),\n                endX           = client.getCoordinateFromDate(event.endDate),\n                { rows }       = this.exportMeta.subGrids.normal,\n                [\n                    firstRowHTML,\n                    firstRowTop,\n                    height\n                ]              = rows[0],\n                [, lastRowTop] = rows[rows.length - 1],\n                // take data index from html\n                firstRowIndex  = parseInt(firstRowHTML.match(/data-index=\"(\\d+)?\"/)[1]),\n                taskIndex      = client.taskStore.indexOf(event),\n                // Push estimated box one extra row to avoid dependency line making turns at the page bottom\n                estimatedY     = taskIndex < firstRowIndex ? firstRowTop - height * 2 : lastRowTop + height * 2;\n            result = new Rectangle(startX, estimatedY, endX - startX, height);\n        }\n        return result;\n    }\n};\n", "import SchedulerMultiPageExporter from '../../../../Scheduler/feature/export/exporter/MultiPageExporter.js';\nimport GanttExporterMixin from './GanttExporterMixin.js';\n/**\n * @module Gantt/feature/export/exporter/MultiPageExporter\n */\n/**\n * A multiple page exporter. Used by the {@link Gantt.feature.export.PdfExport} feature to export to multiple pages. You\n * do not need to use this class directly.\n *\n * ### Extending exporter\n *\n * ```javascript\n * class MyMultiPageExporter extends MultiPageExporter {\n *     // type is required for exporter\n *     static get type() {\n *         return 'mymultipageexporter';\n *     }\n *\n *     get stylesheets() {\n *         const stylesheets = super.stylesheets;\n *\n *         stylesheets.forEach(styleNodeOrLinkTag => doSmth(styleNodeOrLinkTag))\n *\n *         return stylesheets;\n *     }\n * }\n *\n * const gantt = new Gantt({\n *     features : {\n *         pdfExport : {\n *             // this export feature is configured with only one exporter\n *             exporters : [MyMultiPageExporter]\n *         }\n *     }\n * });\n *\n * // run export with the new exporter\n * gantt.features.pdfExport.export({ exporter : 'mymultipageexporter' });\n * ```\n *\n * @classtype multipage\n * @extends Scheduler/feature/export/exporter/MultiPageExporter\n *\n * @typings Scheduler.feature.export.exporter.MultiPageExporter -> Scheduler.feature.export.exporter.SchedulerMultiPageExporter\n */\nexport default class MultiPageExporter extends GanttExporterMixin(SchedulerMultiPageExporter) {\n    static get $name() {\n        return 'MultiPageExporter';\n    }\n    static get type() {\n        return 'multipage';\n    }\n}\nMultiPageExporter._$name = 'MultiPageExporter';", "import SchedulerMultiPageVerticalExporter from '../../../../Scheduler/feature/export/exporter/MultiPageVerticalExporter.js';\nimport GanttExporterMixin from './GanttExporterMixin.js';\n/**\n * @module Gantt/feature/export/exporter/MultiPageVerticalExporter\n */\n/**\n * A vertical multiple page exporter. Used by the {@link Gantt.feature.export.PdfExport} feature to export to multiple\n * pages. Content will be scaled in a horizontal direction to fit the page.\n *\n * You do not need to use this class directly.\n *\n * ### Extending exporter\n *\n * ```javascript\n * class MyMultiPageVerticalExporter extends MultiPageVerticalExporter {\n *     // type is required for exporter\n *     static get type() {\n *         return 'mymultipageverticalexporter';\n *     }\n *\n *     get stylesheets() {\n *         const stylesheets = super.stylesheets;\n *\n *         stylesheets.forEach(styleNodeOrLinkTag => doSmth(styleNodeOrLinkTag))\n *\n *         return stylesheets;\n *     }\n * }\n *\n * const gantt = new Gantt({\n *     features : {\n *         pdfExport : {\n *             // this export feature is configured with only one exporter\n *             exporters : [MyMultiPageVerticalExporter]\n *         }\n *     }\n * });\n *\n * // run export with the new exporter\n * gantt.features.pdfExport.export({ exporter : 'mymultipageverticalexporter' });\n * ```\n *\n * @classtype multipagevertical\n * @extends Scheduler/feature/export/exporter/MultiPageVerticalExporter\n *\n * @typings Scheduler.feature.export.exporter.MultiPageVerticalExporter -> Scheduler.feature.export.exporter.SchedulerMultiPageVerticalExporter\n */\nexport default class MultiPageVerticalExporter extends GanttExporterMixin(SchedulerMultiPageVerticalExporter) {\n    static get $name() {\n        return 'MultiPageVerticalExporter';\n    }\n    static get type() {\n        return 'multipagevertical';\n    }\n}\nMultiPageVerticalExporter._$name = 'MultiPageVerticalExporter';", "import SchedulerSinglePageExporter from '../../../../Scheduler/feature/export/exporter/SinglePageExporter.js';\nimport GanttExporterMixin from './GanttExporterMixin.js';\n/**\n * @module Gantt/feature/export/exporter/SinglePageExporter\n */\n/**\n * A single page exporter. Used by the {@link Gantt.feature.export.PdfExport} feature to export to single page. Content\n * will be scaled in both directions to fit the page.\n *\n * You do not need to use this class directly.\n *\n * ### Extending exporter\n *\n * ```javascript\n * class MySinglePageExporter extends SinglePageExporter {\n *     // type is required for exporter\n *     static get type() {\n *         return 'mysinglepageexporter';\n *     }\n *\n *     get stylesheets() {\n *         const stylesheets = super.stylesheets;\n *\n *         stylesheets.forEach(styleNodeOrLinkTag => doSmth(styleNodeOrLinkTag))\n *\n *         return stylesheets;\n *     }\n * }\n *\n * const gantt = new Gantt({\n *     features : {\n *         pdfExport : {\n *             // this export feature is configured with only one exporter\n *             exporters : [MySinglePageExporter]\n *         }\n *     }\n * });\n *\n * // run export with the new exporter\n * gantt.features.pdfExport.export({ exporter : 'mysinglepageexporter' });\n * ```\n *\n * @classtype singlepage\n * @extends Scheduler/feature/export/exporter/SinglePageExporter\n *\n * @typings Scheduler.feature.export.exporter.SinglePageExporter -> Scheduler.feature.export.exporter.SchedulerSinglePageExporter\n */\nexport default class SinglePageExporter extends GanttExporterMixin(SchedulerSinglePageExporter) {\n    static get $name() {\n        return 'SinglePageExporter';\n    }\n    static get type() {\n        return 'singlepage';\n    }\n}\nSinglePageExporter._$name = 'SinglePageExporter';", "import SchedulerPdfExport from '../../../Scheduler/feature/export/PdfExport.js';\nimport SinglePageExporter from './exporter/SinglePageExporter.js';\nimport MultiPageExporter from './exporter/MultiPageExporter.js';\nimport MultiPageVerticalExporter from './exporter/MultiPageVerticalExporter.js';\nimport GridFeatureManager from '../../../Grid/feature/GridFeatureManager.js';\n/**\n * @module Gantt/feature/export/PdfExport\n */\n/**\n * Generates PDF/PNG files from the Gantt component.\n *\n * <img src=\"Gantt/gantt-export-dialog.png\" style=\"max-width : 300px\" alt=\"Gantt Export dialog\">\n *\n * **NOTE:** Server side is required to make export work!\n *\n * Check out PDF Export Server documentation and installation steps [here](https://github.com/bryntum/pdf-export-server#pdf-export-server)\n *\n * When your server is up and running, it listens to requests. The Export feature sends a request to the specified URL\n * with the HTML fragments. The server generates a PDF (or PNG) file and returns a download link (or binary, depending\n * on {@link #config-sendAsBinary} config). Then the Export feature opens the link in a new tab and the file is\n * automatically downloaded by your browser. This is configurable, see {@link #config-openAfterExport} config.\n *\n * The {@link #config-exportServer} URL must be configured. The URL can be localhost if you start the server locally,\n * or your remote server address.\n *\n * ## Usage\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         pdfExport : {\n *             exportServer : 'http://localhost:8080' // Required\n *         }\n *     }\n * })\n *\n * // Opens popup allowing to customize export settings\n * gantt.features.pdfExport.showExportDialog();\n *\n * // Simple export\n * gantt.features.pdfExport.export({\n *     // Required, set list of column ids to export\n *     columns : gantt.columns.map(c => c.id)\n * }).then(result => {\n *     // Response instance and response content in JSON\n *     let { response, responseJSON } = result;\n * });\n * ```\n *\n * ## Configuring the export dialog\n *\n * To learn about how to customize the export dialog and its default widgets, please refer to the\n * {@link Scheduler.view.export.SchedulerExportDialog} which provides a 'ref' identifier for each child widget so that\n * you can customize them all based on your requirements.\n *\n * ## Loading resources\n *\n * If you face a problem with loading resources when exporting, the cause might be that the application and the export server are hosted on different servers.\n * This is due to [Cross-Origin Resource Sharing](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) (CORS). There are 2 options how to handle this:\n * - Allow cross-origin requests from the server where your export is hosted to the server where your application is hosted;\n * - Copy all resources keeping the folder hierarchy from the server where your application is hosted to the server where your export is hosted\n * and setup paths using {@link Grid.feature.export.PdfExport#config-translateURLsToAbsolute} config and configure the export server to give access to the path:\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         pdfExport : {\n *             exportServer : 'http://localhost:8080',\n *             // '/resources' is hardcoded in WebServer implementation\n *             translateURLsToAbsolute : 'http://localhost:8080/resources'\n *         }\n *     }\n * })\n * ```\n *\n * ```javascript\n * // Following path would be served by this address: http://localhost:8080/resources/\n * node ./src/server.js -h 8080 -r web/application/styles\n * ```\n *\n * where `web/application/styles` is the physical root location of the copied resources, for example:\n *\n * <img src=\"Grid/export-server-resources.png\" style=\"max-width : 500px\" alt=\"Export server structure with copied resources\" />\n *\n * This feature is **disabled** by default.\n * For info on enabling it, see {@link Grid/view/mixin/GridFeatures}.\n *\n * @classtype pdfExport\n *\n * @extends Scheduler/feature/export/PdfExport\n * @feature\n *\n * @typings Scheduler.feature.export.PdfExport -> Scheduler.feature.export.SchedulerPdfExport\n */\nexport default class PdfExport extends SchedulerPdfExport {\n    static get $name() {\n        return 'PdfExport';\n    }\n    static get defaultConfig() {\n        return {\n            exporters : [SinglePageExporter, MultiPageExporter, MultiPageVerticalExporter]\n        };\n    }\n}\nPdfExport._$name = 'PdfExport'; GridFeatureManager.registerFeature(PdfExport, false, 'Gantt');\n", "import PrintMixin from '../../../Grid/feature/export/mixin/PrintMixin.js';\nimport PdfExport from './PdfExport.js';\nimport GridFeatureManager from '../../../Grid/feature/GridFeatureManager.js';\n/**\n * @module Gantt/feature/export/Print\n */\n/**\n * Allows printing Gantt contents using browser print dialog.\n *\n * This feature is based on {@link Gantt.feature.export.PdfExport} with only difference that instead of sending\n * request to a backend it renders content to an IFrame element and requests print dialog for it. For more details about\n * preparing HTML for printing, please refer to the {@link Gantt.feature.export.PdfExport} docs.\n *\n * ## Usage\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         print : true\n *     }\n * })\n *\n * // Opens popup allowing to customize print settings\n * gantt.features.print.showPrintDialog();\n *\n * // Simple print\n * gantt.features.print.print({\n *     columns : scheduler.columns.map(c => c.id)\n * });\n * ```\n *\n * This feature is **disabled** by default.\n * For info on enabling it, see {@link Grid/view/mixin/GridFeatures}.\n *\n * @extends Gantt/feature/export/PdfExport\n * @mixes Grid/feature/export/mixin/PrintMixin\n *\n * @demo Gantt/print\n * @classtype print\n * @feature\n *\n * @typings Scheduler.feature.export.Print -> Scheduler.feature.export.SchedulerPrint\n */\nexport default class Print extends PrintMixin(PdfExport) {\n    /**\n     * @hideConfigs clientURL, exportServer, fetchOptions, fileFormat, fileName, openAfterExport, openInNewTab, sendAsBinary\n     */\n    /**\n     * @hideFunctions processExportContent, receiveExportContent, showExportDialog\n     */\n    static $name = 'Print';\n}\nPrint._$name = 'Print'; GridFeatureManager.registerFeature(Print, false, 'Gantt');\n", "import SchedulerProCalendarIntervalModel from '../../SchedulerPro/model/CalendarIntervalModel.js';\n/**\n * @module Gantt/model/CalendarIntervalModel\n */\n/**\n * This class represents a calendar interval in the Gantt calendar.\n * Every interval can be either recurrent (regularly repeating in time) or static.\n *\n * Please refer to the [calendars guide](#Gantt/guides/basics/calendars.md) for details\n *\n * @extends SchedulerPro/model/CalendarIntervalModel\n *\n * @typings SchedulerPro.model.CalendarIntervalModel -> SchedulerPro.model.SchedulerProCalendarIntervalModel\n */\nexport default class CalendarIntervalModel extends SchedulerProCalendarIntervalModel {}\nCalendarIntervalModel._$name = 'CalendarIntervalModel';", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { calculate, field } from \"../../../../ChronoGraph/replica/Entity.js\";\nimport { HasChildrenMixin } from \"../scheduler_basic/HasChildrenMixin.js\";\n/**\n * This is a mixin, adding critical path calculation to the event node.\n *\n * Scheduling-wise it adds *criticalPaths* field to an entity mixing it.\n *\n * For more details on the _critical path method_ please check this article: https://en.wikipedia.org/wiki/Critical_path_method\n */\nexport class HasCriticalPathsMixin extends Mixin([HasChildrenMixin], (base) => {\n    const superProto = base.prototype;\n    class HasCriticalPathsMixin extends base {\n        *calculateCriticalPaths() {\n            const paths = [], pathsToProcess = [], events = yield this.$.childEvents, eventsToProcess = [...events], projectEndDate = yield this.$.endDate;\n            // First collect events we'll start collecting paths from.\n            // We need to start from critical events w/o incoming dependencies\n            let event;\n            while ((event = eventsToProcess.shift())) {\n                const childEvents = yield event.$.childEvents, eventIsCritical = yield event.$.critical, eventIsActive = !(yield event.$.inactive), eventEndDate = yield event.$.endDate;\n                // register a new path finishing at the event\n                if (eventIsActive && eventEndDate && eventEndDate.getTime() - projectEndDate.getTime() === 0 && eventIsCritical) {\n                    pathsToProcess.push([{ event }]);\n                }\n                eventsToProcess.push(...childEvents);\n            }\n            let path;\n            // fetch paths one by one and process\n            while ((path = pathsToProcess.shift())) {\n                let taskIndex = path.length - 1, node;\n                // get the path last event\n                while ((node = path[taskIndex])) {\n                    const criticalPredecessorNodes = [];\n                    // collect critical successors\n                    for (const dependency of (yield node.event.$.incomingDeps)) {\n                        const event = yield dependency.$.fromEvent;\n                        // if we found a critical predecessor\n                        if (event && (yield dependency.$.active) && !(yield event.$.inactive) && (yield event.$.critical)) {\n                            criticalPredecessorNodes.push({ event, dependency });\n                        }\n                    }\n                    // if critical predecessor(s) found\n                    if (criticalPredecessorNodes.length) {\n                        // make a copy of the path leading part\n                        const pathCopy = path.slice();\n                        // append the found predecessor to the path\n                        path.push(criticalPredecessorNodes[0]);\n                        // if we found more than one predecessor we start new path as: leading path + predecessor\n                        for (let i = 1; i < criticalPredecessorNodes.length; i++) {\n                            pathsToProcess.push(pathCopy.concat(criticalPredecessorNodes[i]));\n                        }\n                        // increment counter to process the predecessor we've appended to the path\n                        taskIndex++;\n                    }\n                    else {\n                        // no predecessors -> stop the loop\n                        taskIndex = -1;\n                    }\n                }\n                // we collected the path backwards so let's reverse it\n                paths.push(path.reverse());\n            }\n            return paths;\n        }\n    }\n    __decorate([\n        field({ lazy: true })\n    ], HasCriticalPathsMixin.prototype, \"criticalPaths\", void 0);\n    __decorate([\n        calculate('criticalPaths')\n    ], HasCriticalPathsMixin.prototype, \"calculateCriticalPaths\", null);\n    return HasCriticalPathsMixin;\n}) {\n}\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { ProposedOrPrevious, UnsafeProposedOrPreviousValueOf } from \"../../../../ChronoGraph/chrono/Effect.js\";\nimport { Mixin } from '../../../../ChronoGraph/class/BetterMixin.js';\nimport { field, calculate } from \"../../../../ChronoGraph/replica/Entity.js\";\nimport { Direction, ProjectType, ConstraintIntervalSide } from '../../../scheduling/Types.js';\nimport { MAX_DATE, MIN_DATE } from '../../../util/Constants.js';\nimport { ChronoEventTreeStoreMixin } from \"../../store/ChronoEventStoreMixin.js\";\nimport { SchedulerProProjectMixin } from \"../scheduler_pro/SchedulerProProjectMixin.js\";\nimport { SchedulerProResourceMixin } from \"../scheduler_pro/SchedulerProResourceMixin.js\";\nimport { ConstrainedLateEventMixin } from \"./ConstrainedLateEventMixin.js\";\nimport { SchedulerProAssignmentMixin } from \"../scheduler_pro/SchedulerProAssignmentMixin.js\";\nimport { GanttEvent } from './GanttEvent.js';\nimport { HasCriticalPathsMixin } from \"./HasCriticalPathsMixin.js\";\nimport { HasEffortMixin } from \"../scheduler_pro/HasEffortMixin.js\";\nimport { ConstraintInterval, ConstraintIntervalDescription } from \"../../../chrono/Conflict.js\";\nimport { format } from \"../../../util/Functions.js\";\nimport \"../../../localization/En.js\";\nimport { prototypeValue } from \"../../../../ChronoGraph/util/Helpers.js\";\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * Gantt project mixin type. At this level, events are called \"tasks\". All scheduling features from the [[SchedulerProProjectMixin]]\n * are preserved. Additionally, tasks inherit constraints from parent tasks. Tasks also receives the [[HasEffortMixin.effort|effort]] field\n * and [[HasSchedulingModeMixin.schedulingMode|schedulingMode]] field.\n *\n * The base event class for this level is [[GanttEvent]]. The base assignment class is [[SchedulerProAssignmentMixin]].\n *\n * At this level, project can be scheduled in backward direction. This is controlled with the [[direction]] field.\n *\n * * Forward ASAP scheduling\n *\n * This is a default, most-used mode. In this mode, the \"base\" date is project start date. If it is not provided,\n * it is calculated as the earliest date of all project tasks. Events are scheduled ASAP, based on the \"early\" constraints\n * (plus \"generic\" constraints).\n *\n * * Forward ALAP scheduling\n *\n * In this mode, the \"base\" date is still project start date. If it is not provided,\n * it is calculated as the earliest date of all project tasks.\n *\n * Events are first scheduled ASAP, based on the \"early\" constraints. This gives the project end date.\n * Now events are scheduled ALAP, using the project end date as the base.\n *\n * The difference between the task position in Forward ASAP and Forward ALAP scheduling is called [[ConstrainedLateEventMixin.totalSlack|\"slack\"]]\n *\n * * Backward ALAP scheduling\n *\n * This is a \"default\" backward scheduling. In this mode, the \"base\" date is project end date. If it is not provided,\n * it is calculated as the latest date of all project tasks. Events are scheduled ALAP, based on the \"late\" constraints\n * (plus \"generic\" constraints).\n *\n * * Backward ASAP scheduling\n *\n * In this mode, the \"base\" date is still project end date. If it is not provided,\n * it is calculated as the latest date of all project tasks.\n *\n * Events are first scheduled ALAP, based on the \"late\" constraints. This gives the project start date.\n * Now events are scheduled ASAP, using the project start date as the base.\n *\n */\nexport class GanttProjectMixin extends Mixin([\n    SchedulerProProjectMixin,\n    HasEffortMixin,\n    ConstrainedLateEventMixin,\n    HasCriticalPathsMixin\n], (base) => {\n    const superProto = base.prototype;\n    class GanttProjectMixin extends base {\n        constructor() {\n            super(...arguments);\n            // this atom is recalculated in every transaction (it is \"self dependent\")\n            // this happens because it is always calculated to the value which is different from\n            // proposed value\n            // this is a \"source of changes\" which we use for `project.startDate/endDate` in case\n            // scanning the children returned `null`\n            // so it will cause the `project.startDate` to always recalculate until it obtain some value\n            this.nonEqual = false;\n        }\n        *calculateNonEqual() {\n            return !(yield ProposedOrPrevious);\n        }\n        get isGanttProjectMixin() {\n            return true;\n        }\n        afterConfigure() {\n            superProto.afterConfigure.apply(this, arguments);\n            this.projectConstraintIntervalClass = this.projectConstraintIntervalClass || ProjectConstraintInterval;\n        }\n        *hasSubEvents() {\n            const childEvents = yield this.$.childEvents;\n            return childEvents.size > 0;\n        }\n        *subEventsIterable() {\n            return yield this.$.childEvents;\n        }\n        *calculateStartDate() {\n            const direction = yield this.$.effectiveDirection;\n            if (direction.direction === Direction.Forward) {\n                let result = yield ProposedOrPrevious;\n                if (!result) {\n                    result = yield* this.unsafeCalculateInitialMinChildrenStartDateDeep();\n                    if (!result)\n                        yield this.$.nonEqual;\n                }\n                return result;\n            }\n            else if (direction.direction === Direction.Backward) {\n                const startDate = yield* this.calculateMinChildrenStartDate();\n                const endDate = yield this.$.endDate;\n                // Calculated startDate can get after the project endDate\n                // (in case its built based on a manually scheduled task that start after the project finishes).\n                // We set the project startDate to its endDate value then.\n                return startDate && endDate > startDate ? startDate : endDate;\n            }\n        }\n        *calculateEndDate() {\n            const direction = yield this.$.effectiveDirection;\n            if (direction.direction === Direction.Forward) {\n                const startDate = yield this.$.startDate;\n                const endDate = yield* this.calculateMaxChildrenEndDate();\n                // Calculated endDate can be before the project startDate\n                // (in case its built based on a manually scheduled task that finishes before the project starts).\n                // Then it leads to an infinite cycle because of these BaseEventMixin.calculateDurationPure lines:\n                //      if (startDate > endDate) {\n                //          yield Write(this.$.duration, 0, null)\n                //      }\n                // So we simply check if the project endDate got earlier than its start date\n                // and set endDate to startDate value then.\n                // This case is reported in: https://github.com/bryntum/support/issues/3127\n                // and asserted by: 031_manually_scheduled.t.ts\n                return endDate && endDate > startDate ? endDate : startDate;\n            }\n            else if (direction.direction === Direction.Backward) {\n                let result = yield ProposedOrPrevious;\n                if (!result) {\n                    result = yield* this.unsafeCalculateInitialMaxChildrenEndDateDeep();\n                    if (!result)\n                        yield this.$.nonEqual;\n                }\n                return result;\n            }\n        }\n        *shouldRollupChildStartDate(child) {\n            // Do not take into account inactive children dates when calculating start date\n            return !(yield child.$.inactive);\n        }\n        *shouldRollupChildEndDate(child) {\n            // Do not take into account inactive children dates when calculating start date\n            return !(yield child.$.inactive);\n        }\n        *calculateEarlyStartDateConstraintIntervals() {\n            const intervals = yield* superProto.calculateEarlyStartDateConstraintIntervals.call(this);\n            const direction = yield this.$.effectiveDirection;\n            if (direction.direction === Direction.Forward) {\n                const startDate = yield this.$.startDate;\n                startDate && intervals.push(this.projectConstraintIntervalClass.new({\n                    owner: this,\n                    side: ConstraintIntervalSide.Start,\n                    startDate\n                }));\n            }\n            else if (direction.direction === Direction.Backward) {\n                const startDate = yield this.$.lateStartDate;\n                startDate && intervals.push(this.projectConstraintIntervalClass.new({\n                    owner: this,\n                    side: ConstraintIntervalSide.Start,\n                    startDate\n                }));\n            }\n            return intervals;\n        }\n        *calculateLateEndDateConstraintIntervals() {\n            const intervals = yield* superProto.calculateLateEndDateConstraintIntervals.call(this);\n            const direction = yield this.$.effectiveDirection;\n            if (direction.direction === Direction.Forward) {\n                const endDate = yield this.$.earlyEndDate;\n                endDate && intervals.push(this.projectConstraintIntervalClass.new({\n                    owner: this,\n                    side: ConstraintIntervalSide.End,\n                    endDate\n                }));\n            }\n            else if (direction.direction === Direction.Backward) {\n                const endDate = yield this.$.endDate;\n                endDate && intervals.push(this.projectConstraintIntervalClass.new({\n                    owner: this,\n                    side: ConstraintIntervalSide.End,\n                    endDate\n                }));\n            }\n            return intervals;\n        }\n        getDefaultEventModelClass() {\n            return GanttEvent;\n        }\n        getDefaultAssignmentModelClass() {\n            return SchedulerProAssignmentMixin;\n        }\n        getDefaultResourceModelClass() {\n            return SchedulerProResourceMixin;\n        }\n        getDefaultEventStoreClass() {\n            return ChronoEventTreeStoreMixin;\n        }\n        getType() {\n            return ProjectType.Gantt;\n        }\n        // this method is only used to calculated \"initial\" project start date only\n        *unsafeCalculateInitialMinChildrenStartDateDeep() {\n            const childEvents = yield this.$.childEvents;\n            // note, that we does not yield here, as we want to calculate \"initial\" project start date\n            // which will be used only if there's no user input or explicit setting for it\n            // such project date should be calculated as earliest date of all tasks, based on the\n            // \"initial\" data (which includes proposed)\n            if (!childEvents.size)\n                return yield UnsafeProposedOrPreviousValueOf(this.$.startDate);\n            let result = MAX_DATE, child;\n            const toProcess = [...childEvents];\n            while ((child = toProcess.shift())) {\n                let childDate = yield UnsafeProposedOrPreviousValueOf(child.$.startDate);\n                // in case a task has no start date but has end date provided - use that value\n                if (!childDate) {\n                    childDate = yield UnsafeProposedOrPreviousValueOf(child.$.endDate);\n                }\n                if (childDate && childDate < result)\n                    result = childDate;\n                toProcess.push(...yield child.$.childEvents);\n            }\n            return (result.getTime() !== MIN_DATE.getTime() && result.getTime() !== MAX_DATE.getTime()) ? result : null;\n        }\n        *unsafeCalculateInitialMaxChildrenEndDateDeep() {\n            const childEvents = yield this.$.childEvents;\n            // note, that we use \"unsafe\" ProposedOrPrevious effect here, because we only get into this method\n            // if there's no user input for the project end date\n            if (!childEvents.size)\n                return yield UnsafeProposedOrPreviousValueOf(this.$.endDate);\n            let result = MIN_DATE, child;\n            const toProcess = [...childEvents];\n            while ((child = toProcess.shift())) {\n                let childDate = yield UnsafeProposedOrPreviousValueOf(child.$.endDate);\n                // in case a task has no end date but has start date provided - use that value\n                if (!childDate) {\n                    childDate = yield UnsafeProposedOrPreviousValueOf(child.$.startDate);\n                }\n                if (childDate && childDate > result)\n                    result = childDate;\n                toProcess.push(...yield child.$.childEvents);\n            }\n            return (result.getTime() !== MIN_DATE.getTime() && result.getTime() !== MAX_DATE.getTime()) ? result : null;\n        }\n        getDependencyCycleDetectionIdentifiers(fromEvent, toEvent) {\n            return [\n                // @ts-ignore\n                toEvent.$.earlyStartDateConstraintIntervals,\n                // @ts-ignore\n                toEvent.$.earlyEndDateConstraintIntervals,\n                // @ts-ignore\n                toEvent.$.lateEndDateConstraintIntervals,\n                // @ts-ignore\n                toEvent.$.lateStartDateConstraintIntervals\n            ];\n        }\n    }\n    __decorate([\n        field({ equality: () => false })\n    ], GanttProjectMixin.prototype, \"nonEqual\", void 0);\n    __decorate([\n        calculate('nonEqual')\n    ], GanttProjectMixin.prototype, \"calculateNonEqual\", null);\n    return GanttProjectMixin;\n}) {\n}\n/**\n * Class providing a [[ProjectConstraintInterval]] instance description.\n */\nexport class ProjectConstraintIntervalDescription extends ConstraintIntervalDescription {\n    static get $name() {\n        return 'ProjectConstraintIntervalDescription';\n    }\n    static getDescription(interval) {\n        return format(interval.startDate ? this.L('L{startDateDescriptionTpl}') : this.L('L{endDateDescriptionTpl}'), ...this.getDescriptionParameters(interval));\n    }\n}\n/**\n * Class implementing constraining interval applied by a project.\n * A forward scheduled project implicitly restricts tasks to start not early than the project start date\n * and a backward scheduled project restricts tasks to finish not later than the project end date.\n */\nexport class ProjectConstraintInterval extends ConstraintInterval {\n    get isProjectConstraintInterval() {\n        return true;\n    }\n    isAffectedByTransaction(transaction) {\n        const project = this.owner;\n        transaction = transaction || project.graph.activeTransaction;\n        const dateQuark = transaction.entries.get(this.startDate ? project.$.startDate : project.$.endDate);\n        // modified project start (end for BW projects) date\n        return dateQuark && !dateQuark.isShadow();\n    }\n}\n__decorate([\n    prototypeValue(ProjectConstraintIntervalDescription)\n], ProjectConstraintInterval.prototype, \"descriptionBuilderClass\", void 0);\n", "import Model from '../../Core/data/Model.js';\nimport Store from '../../Core/data/Store.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\nimport { GanttProjectMixin, ProjectConstraintInterval } from '../../Engine/quark/model/gantt/GanttProjectMixin.js';\nimport ProjectModelTimeZoneMixin from '../../Scheduler/model/mixin/ProjectModelTimeZoneMixin.js';\nimport { DateConstraintInterval } from '../../Engine/quark/model/scheduler_pro/HasDateConstraintMixin.js';\nimport { DependencyConstraintInterval } from '../../Engine/quark/model/scheduler_pro/ScheduledByDependenciesEarlyEventMixin.js';\nimport ProjectCurrentConfig from '../../Scheduler/model/mixin/ProjectCurrentConfig.js';\nimport ProjectModelCommon from '../../Scheduler/model/mixin/ProjectModelCommon.js';\nimport ProjectCrudManager from '../../SchedulerPro/data/mixin/ProjectCrudManager.js';\nimport ProjectChangeHandlerMixin from '../../SchedulerPro/model/mixin/ProjectChangeHandlerMixin.js';\nimport AssignmentStore from '../data/AssignmentStore.js';\nimport CalendarManagerStore from '../data/CalendarManagerStore.js';\nimport DependencyStore from '../data/DependencyStore.js';\nimport ResourceStore from '../data/ResourceStore.js';\nimport TaskStore from '../data/TaskStore.js';\nimport AssignmentModel from './AssignmentModel.js';\nimport CalendarModel from './CalendarModel.js';\nimport DependencyModel from './DependencyModel.js';\nimport ResourceModel from './ResourceModel.js';\nimport TaskModel from './TaskModel.js';\nimport StateTrackingManager from '../../SchedulerPro/data/stm/StateTrackingManager.js';\nimport TimeRangeStore from '../../Scheduler/data/TimeRangeStore.js';\n/**\n * @module Gantt/model/ProjectModel\n */\n/**\n * This class represents a global project of your Project plan or Gantt - a central place for all data.\n *\n * It holds and links the stores usually used by Gantt:\n *\n * - {@link Gantt/data/TaskStore}\n * - {@link Gantt/data/ResourceStore}\n * - {@link Gantt/data/AssignmentStore}\n * - {@link Gantt/data/DependencyStore}\n * - {@link Gantt/data/CalendarManagerStore}\n * - {@link #config-timeRangeStore TimeRangeStore}\n *\n * The project uses a scheduling engine to calculate dates, durations and such. It is also responsible for\n * handling references between models, for example to link an task via an assignment to a resource. These operations\n * are asynchronous, a fact that is hidden when working in the Gantt UI but which you must know about when performing\n * operations on the data level.\n *\n * When there is a change to data that requires something else to be recalculated, the project schedules a calculation\n * (a commit) which happens moments later. It is also possible to trigger these calculations directly. This flow\n * illustrates the process:\n *\n * 1. Something changes which requires the project to recalculate, for example adding a new task:\n *\n * ```javascript\n * const [task] = project.taskStore.add({ startDate, endDate });\n * ```\n *\n * 2. A recalculation is scheduled, thus:\n *\n * ```javascript\n * task.duration; // <- Not yet calculated\n * ```\n *\n * 3. Calculate now instead of waiting for the scheduled calculation\n *\n * ```javascript\n * await project.commitAsync();\n *\n * task.duration; // <- Now available\n * ```\n *\n * Please refer to [this guide](#Gantt/guides/data/project_data.md) for more information.\n *\n * ## Built-in CrudManager\n *\n * Gantt's project has a {@link Scheduler/crud/AbstractCrudManagerMixin CrudManager} built-in. Using it is the recommended way of\n * syncing data between Gantt and a backend. Example usage:\n *\n * ```javascript\n * const gantt = new Gantt({\n *     project : {\n *         // Configure urls used by the built-in CrudManager\n *         transport : {\n *             load : {\n *                 url : 'php/load.php'\n *             },\n *             sync : {\n *                 url : 'php/sync.php'\n *             }\n *         }\n *     }\n * });\n *\n * // Load data from the backend\n * gantt.project.load()\n * ```\n *\n * For more information on CrudManager, see Schedulers docs on {@link Scheduler/data/CrudManager}.\n * For a detailed description of the protocol used by CrudManager, please see the\n * [Crud manager guide](#Gantt/guides/data/crud_manager.md)\n *\n * You can access the current Project data changes anytime using the {@link #property-changes} property.\n *\n * ## Working with inline data\n *\n * The project provides an {@link #property-inlineData} getter/setter that can\n * be used to manage data from all Project stores at once. Populating the stores this way can\n * be useful if you do not want to use the CrudManager for server communication but instead load data using Axios\n * or similar.\n *\n * ### Getting data\n * ```javascript\n * const data = gantt.project.inlineData;\n *\n * // use the data in your application\n * ```\n *\n * ### Setting data\n * ```javascript\n * // Get data from server manually\n * const data = await axios.get('/project?id=12345');\n *\n * // Feed it to the project\n * gantt.project.inlineData = data;\n * ```\n *\n * See also {@link #function-loadInlineData}\n *\n * ### Getting changed records\n *\n * You can access the changes in the current Project dataset anytime using the {@link #property-changes} property. It\n * returns an object with all changes:\n *\n * ```javascript\n * const changes = project.changes;\n *\n * console.log(changes);\n *\n * > {\n *   tasks : {\n *       updated : [{\n *           name : 'My task',\n *           id   : 12\n *       }]\n *   },\n *   assignments : {\n *       added : [{\n *           event      : 12,\n *           resource   : 7,\n *           units      : 100,\n *           $PhantomId : 'abc123'\n *       }]\n *     }\n * };\n * ```\n *\n * ## Monitoring data changes\n *\n * While it is possible to listen for data changes on the projects individual stores, it is sometimes more convenient\n * to have a centralized place to handle all data changes. By listening for the {@link #event-change change event} your\n * code gets notified when data in any of the stores changes. Useful for example to keep an external data model up to\n * date:\n *\n * ```javascript\n * const gantt = new Gantt({\n *     project: {\n *         listeners : {\n *             change({ store, action, records }) {\n *                 const { $name } = store.constructor;\n *\n *                 if (action === 'add') {\n *                     externalDataModel.add($name, records);\n *                 }\n *\n *                 if (action === 'remove') {\n *                     externalDataModel.remove($name, records);\n *                 }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * ## Processing the data loaded from the server\n *\n * If you want to process the data received from the server after loading, you can use\n * the {@link #event-beforeLoadApply} or {@link #event-beforeSyncApply} events:\n *\n * ```javascript\n * const gantt = new Gantt({\n *     project: {\n *         listeners : {\n *             beforeLoadApply({ response }) {\n *                 // do something with load-response object before it is provided to all the project stores\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * ## Built-in StateTrackingManager\n *\n * The project also has a built-in {@link Core/data/stm/StateTrackingManager} (STM for short), that\n * handles undo/redo for the project stores (additional stores can also be added). By default, it is only used while\n * editing tasks using the task editor, the editor updates tasks live and uses STM to rollback changes if canceled. But\n * you can enable it to track all project store changes:\n *\n * ```javascript\n * // Enable automatic transaction creation and start recording\n * project.stm.autoRecord = true;\n * project.stm.enable();\n *\n * // Undo a transaction\n * project.stm.undo();\n *\n * // Redo\n * project.stm.redo();\n * ```\n *\n * Check out the `undoredo` demo to see it in action.\n *\n * @extends Core/data/Model\n *\n * @mixes SchedulerPro/data/mixin/ProjectCrudManager\n * @mixes SchedulerPro/model/mixin/ProjectChangeHandlerMixin\n * @mixes Core/mixin/Events\n * @mixes Scheduler/model/mixin/ProjectModelTimeZoneMixin\n *\n * @typings SchedulerPro.model.ProjectModel -> SchedulerPro.model.SchedulerProProjectModel\n */\nexport default class ProjectModel extends GanttProjectMixin.derive(Model).mixin(\n    ProjectChangeHandlerMixin,\n    ProjectCurrentConfig,\n    ProjectCrudManager,\n    ProjectModelTimeZoneMixin,\n    ProjectModelCommon\n) {\n    //region Config\n    static $name = 'ProjectModel';\n    /**\n     * @hidefields id, readOnly, children, parentId, parentIndex\n     */\n    /**\n     * Silences propagations caused by the project loading.\n     *\n     * Applying the loaded data to the project occurs in two basic stages:\n     *\n     * 1. Data gets into the engine graph which triggers changes propagation\n     * 2. The changes caused by the propagation get written to related stores\n     *\n     * Setting this flag to `true` makes the component perform step 2 silently without triggering events causing reactions on those changes\n     * (like sending changes back to the server if `autoSync` is enabled) and keeping stores in unmodified state.\n     *\n     * This is safe if the loaded data is consistent so propagation doesn't really do any adjustments.\n     * By default the system treats the data as consistent so this option is `true`.\n     *\n     * ```javascript\n     * new Gantt({\n     *     project : {\n     *         // We want scheduling engine to recalculate the data properly\n     *         // so then we could save it back to the server\n     *         silenceInitialCommit : false,\n     *         ...\n     *     }\n     *     ...\n     * })\n     * ```\n     *\n     * @config {Boolean} silenceInitialCommit\n     * @default true\n     * @category Advanced\n     */\n    /**\n     * Maximum range the project calendars can iterate.\n     * The value is defined in milliseconds and by default equals `5 years` roughly.\n     * ```javascript\n     * new Gantt({\n     *     project : {\n     *         // adjust calendar iteration limit to 10 years roughly:\n     *         // 10 years expressed in ms\n     *         maxCalendarRange : 10 * 365 * 24 * 3600000,\n     *         ...\n     *     }\n     * });\n     * ```\n     * @config {Number} maxCalendarRange\n     * @default 157680000000\n     * @category Advanced\n     */\n    /**\n     * When `true` the project manually scheduled tasks will adjust their proposed start/end dates\n     * to skip non working time.\n     *\n     * @field {Boolean} skipNonWorkingTimeWhenSchedulingManually\n     * @default false\n     */\n    /**\n     * This config manages DST correction in the scheduling engine. It only has effect when DST transition hour is\n     * working time. Usually DST transition occurs on Sunday, so with non working weekends the DST correction logic\n     * is not involved.\n     *\n     * If **true**, it will add/remove one hour when calculating duration from start/end dates. For example:\n     * Assume weekends are working and on Sunday, 2020-10-25 at 03:00 clocks are set back 1 hour. Assume there is a task:\n     *\n     * ```javascript\n     * {\n     *     startDate    : '2020-10-20',\n     *     duration     : 10,\n     *     durationUnit : 'day'\n     * }\n     * ```\n     * It will end on 2020-10-29 23:00. Because of the DST transition Sunday is actually 25 hours long and when the\n     * Gantt project calculates the end date it converts days to hours multiplying by 24. If you're setting duration\n     * and want task to end on the end of the day you should manually correct for DST, like so:\n     *\n     * ```javascript\n     * {\n     *     startDate    : '2020-10-20',\n     *     duration     : 10 * 24 + 1,\n     *     durationUnit : 'hour'\n     * },\n     * ```\n     *\n     * If task has start and end dates it will correct for DST twice:\n     *\n     * ```javascript\n     * {\n     *     startDate    : '2020-10-20',\n     *     endDate      : '2020-10-30'\n     * }\n     * ```\n     * This task will end on 2020-10-29 22:00 which is a known quirk.\n     *\n     * If **false**, the Gantt project will not add DST correction which fixes the quirk mentioned above and such task\n     * will end on 2020-10-30 exactly, having hours duration of 10 days * 24 hours + 1 hour.\n     *\n     * Also, for this task days duration will be a floating point number due to extra (or missing) hour:\n     *\n     * ```javascript\n     * task.getDuration('day')  // 10.041666666666666\n     * task.getDuration('hour') // 241\n     * ```\n     *\n     * @config {Boolean} adjustDurationToDST\n     * @default false\n     * @category Advanced\n     */\n    /**\n     * Returns current Project changes as an object consisting of added/modified/removed arrays of records for every\n     * managed store. Returns `null` if no changes exist. Format:\n     *\n     * ```javascript\n     * {\n     *     resources : {\n     *         added    : [{ name : 'New guy' }],\n     *         modified : [{ id : 2, name : 'Mike' }],\n     *         removed  : [{ id : 3 }]\n     *     },\n     *     events : {\n     *         modified : [{  id : 12, name : 'Cool task' }]\n     *     },\n     *     ...\n     * }\n     * ```\n     *\n     * @member {Object} changes\n     * @readonly\n     * @category Models & Stores\n     */\n    // region Events\n    /**\n     * Fired during the Engine calculation if {@link #config-enableProgressNotifications} config is `true`\n     * @event progress\n     * @param {Number} total The total number of operations\n     * @param {Number} remaining The number of remaining operations\n     * @param {'storePopulation'|'propagating'} phase The phase of the calculation, either 'storePopulation'\n     * when data is getting loaded, or 'propagating' when data is getting calculated\n     */\n    /**\n     * Fired when the Engine detects a computation cycle.\n     * @event cycle\n     * @param {Object} schedulingIssue Scheduling error describing the case:\n     * @param {Function} schedulingIssue.getDescription Returns the cycle description\n     * @param {Object} schedulingIssue.cycle Object providing the cycle info\n     * @param {Function} schedulingIssue.getResolutions Returns possible resolutions\n     * @param {Function} continueWithResolutionResult Function to call after a resolution is chosen to\n     * proceed with the Engine calculations:\n     * ```javascript\n     * project.on('cycle', ({ continueWithResolutionResult }) => {\n     *     // cancel changes in case of a cycle\n     *     continueWithResolutionResult(EffectResolutionResult.Cancel);\n     * })\n     * ```\n     */\n    /**\n     * Fired when the Engine detects a scheduling conflict.\n     *\n     * @event schedulingConflict\n     * @param {Object} schedulingIssue The conflict details:\n     * @param {Function} schedulingIssue.getDescription Returns the conflict description\n     * @param {Object[]} schedulingIssue.intervals Array of conflicting intervals\n     * @param {Function} schedulingIssue.getResolutions Function to get possible resolutions\n     * @param {Function} continueWithResolutionResult Function to call after a resolution is chosen to\n     * proceed with the Engine calculations:\n     * ```javascript\n     * project.on('schedulingConflict', ({ schedulingIssue, continueWithResolutionResult }) => {\n     *     // apply the first resolution and continue\n     *     schedulingIssue.getResolutions()[0].resolve();\n     *     continueWithResolutionResult(EffectResolutionResult.Resume);\n     * })\n     * ```\n     */\n    /**\n     * Fired when the Engine detects a calendar misconfiguration when the calendar does\n     * not provide any working periods of time which makes usage impossible.\n     * @event emptyCalendar\n     * @param {Object} schedulingIssue Scheduling error describing the case:\n     * @param {Function} schedulingIssue.getDescription Returns the error description\n     * @param {Function} schedulingIssue.getCalendar Returns the calendar that must be fixed\n     * @param {Function} schedulingIssue.getResolutions Returns possible resolutions\n     * @param {Function} continueWithResolutionResult Function to call after a resolution is chosen to\n     * proceed with the Engine calculations:\n     * ```javascript\n     * project.on('emptyCalendar', ({ schedulingIssue, continueWithResolutionResult }) => {\n     *     // apply the first resolution and continue\n     *     schedulingIssue.getResolutions()[0].resolve();\n     *     continueWithResolutionResult(EffectResolutionResult.Resume);\n     * })\n     * ```\n     */\n    /**\n     * Fired when the engine has finished its calculations and the results has been written back to the records.\n     *\n     * ```javascript\n     * gantt.project.on({\n     *     dataReady({ records }) {\n     *         console.log('Calculations finished');\n     *         for (const record of records) {\n     *             console.log(`Modified #${record.id}: ${JSON.stringify(record.modifications)}`);\n     *         }\n     *         // Output:\n     *         // Modified #12: {\"endDate\":null,\"duration\":7200000,\"id\":12}\n     *         // Modified #1: {\"percentDone\":49.99998611112847,\"id\":1}\n     *         // Modified #1000: {\"percentDone\":49.99965834045124,\"id\":1000}\n     *     }\n     * });\n     *\n     * gantt.project.taskStore.first.duration = 10;\n     *\n     * // At some point a bit later it will log 'Calculations finished', etc.\n     * ```\n     *\n     * @event dataReady\n     * @param {Gantt.model.ProjectModel} source The project\n     * @param {Boolean} isInitialCommit Flag that shows if this commit is initial\n     * @param {Set} records Set of all {@link Core.data.Model}s that were modified in the completed transaction.\n     * Use the {@link Core.data.Model#property-modifications} property of each Model to identify\n     * modified fields.\n     */\n    //endregion\n    static get defaults() {\n        return {\n            /**\n             * If this flag is set to `true` (default) when a start/end date is set on the event, a corresponding\n             * `start-no-earlier/later-than` constraint is added, automatically. This is done in order to\n             * keep the event \"attached\" to this date, according to the user intention.\n             *\n             * Depending on your use case, you might want to disable this behaviour.\n             *\n             * @field {Boolean} addConstraintOnDateSet\n             * @default true\n             */\n            /**\n             * The number of hours per day.\n             *\n             * **Please note:** the value **does not define** the amount of **working** time per day\n             * for that purpose one should use calendars.\n             *\n             * The value is used when converting the duration from one unit to another.\n             * So when user enters a duration of, for example, `5 days` the system understands that it\n             * actually means `120 hours` and schedules accordingly.\n             * @field {Number} hoursPerDay\n             * @default 24\n             */\n            /**\n             * The number of days per week.\n             *\n             * **Please note:** the value **does not define** the amount of **working** time per week\n             * for that purpose one should use calendars.\n             *\n             * The value is used when converting the duration from one unit to another.\n             * So when user enters a duration of, for example, `2 weeks` the system understands that it\n             * actually means `14 days` (which is then converted to {@link #field-hoursPerDay hours}) and\n             * schedules accordingly.\n             * @field {Number} daysPerWeek\n             * @default 7\n             */\n            /**\n             * The number of days per month.\n             *\n             * **Please note:** the value **does not define** the amount of **working** time per month\n             * for that purpose one should use calendars.\n             *\n             * The value is used when converting the duration from one unit to another.\n             * So when user enters a duration of, for example, `1 month` the system understands that it\n             * actually means `30 days` (which is then converted to {@link #field-hoursPerDay hours}) and\n             * schedules accordingly.\n             * @field {Number} daysPerMonth\n             * @default 30\n             */\n            /**\n             * The source of the calendar for dependencies (the calendar used for taking dependencies lag into account).\n             * Possible values are:\n             *\n             * - `ToEvent` - successor calendar will be used (default);\n             * - `FromEvent` - predecessor calendar will be used;\n             * - `Project` - the project calendar will be used.\n             *\n             * @field {String} dependenciesCalendar\n             * @default 'ToEvent'\n             */\n            /**\n             * The project calendar.\n             * @config {String|CalendarModelConfig|Gantt.model.CalendarModel} calendar\n             */\n            /**\n             * The project calendar.\n             * @field {Gantt.model.CalendarModel} calendar\n             */\n            /**\n             * `true` to enable automatic {@link Gantt/model/TaskModel#field-percentDone % done} calculation for summary\n             * tasks, `false` to disable it.\n             * @field {Boolean} autoCalculatePercentDoneForParentTasks\n             * @default true\n             */\n            /**\n             * State tracking manager instance the project relies on\n             * @member {Core.data.stm.StateTrackingManager} stm\n             * @category Advanced\n             */\n            /**\n             * Configuration options to provide to the STM manager\n             *\n             * @config {StateTrackingManagerConfig|Core.data.stm.StateTrackingManager} stm\n             * @category Advanced\n             */\n            /**\n             * The {@link Gantt.data.TaskStore store} holding the task information.\n             *\n             * See also {@link Gantt.model.TaskModel}\n             * @member {Gantt.data.TaskStore} eventStore\n             * @category Models & Stores\n             */\n            /**\n             * A {@link Gantt.data.TaskStore} instance or a config object.\n             * @config {Gantt.data.TaskStore|Object} eventStore\n             * @category Models & Stores\n             */\n            /**\n             * An alias for the {@link #property-eventStore}.\n             *\n             * See also {@link Gantt.model.TaskModel}\n             * @member {Gantt.data.TaskStore} taskStore\n             * @category Models & Stores\n             */\n            /**\n             * An alias for the {@link #config-eventStore}.\n             * @config {Gantt.data.TaskStore|TaskStoreConfig} taskStore\n             * @category Models & Stores\n             */\n            /**\n             * The {@link Gantt.data.DependencyStore store} holding the dependency information.\n             *\n             * See also {@link Gantt.model.DependencyModel}\n             * @member {Gantt.data.DependencyStore} dependencyStore\n             * @category Models & Stores\n             */\n            /**\n             * A {@link Gantt.data.DependencyStore} instance or a config object.\n             * @config {Gantt.data.DependencyStore|DependencyStoreConfig} dependencyStore\n             * @category Models & Stores\n             */\n            /**\n             * The {@link Gantt.data.ResourceStore store} holding the resources that can be assigned to the tasks in the\n             * task store.\n             *\n             * See also {@link Gantt.model.ResourceModel}\n             * @member {Gantt.data.ResourceStore} resourceStore\n             * @category Models & Stores\n             */\n            /**\n             * A {@link Gantt.data.ResourceStore} instance or a config object.\n             * @config {Gantt.data.ResourceStore|ResourceStoreConfig} resourceStore\n             * @category Models & Stores\n             */\n            /**\n             * The {@link Gantt.data.AssignmentStore store} holding the assignment information.\n             *\n             * See also {@link Gantt.model.AssignmentModel}\n             * @member {Gantt.data.AssignmentStore} assignmentStore\n             * @category Models & Stores\n             */\n            /**\n             * An {@link Gantt.data.AssignmentStore} instance or a config object.\n             * @config {Gantt.data.AssignmentStore|AssignmentStoreConfig} assignmentStore\n             * @category Models & Stores\n             */\n            /**\n             * The {@link Gantt.data.CalendarManagerStore store} holding the calendar information.\n             *\n             * See also {@link Gantt.model.CalendarModel}\n             * @member {Gantt.data.CalendarManagerStore} calendarManagerStore\n             * @category Models & Stores\n             */\n            /**\n             * A {@link Gantt.data.CalendarManagerStore} instance or a config object.\n             * @config {Gantt.data.CalendarManagerStore|CalendarManagerStoreConfig} calendarManagerStore\n             * @category Models & Stores\n             */\n            /**\n             * The {@link Core.data.Store store} containing time ranges to be visualized.\n             *\n             * See also {@link Scheduler.model.TimeSpan}\n             * @member {Core.data.Store} timeRangeStore\n             * @category Models & Stores\n             */\n            /**\n             * Returns an array of critical paths.\n             * Each _critical path_ is an array of critical path nodes.\n             * Each _critical path node_ is an object which contains {@link Gantt/model/TaskModel#field-critical critical task}\n             * and {@link Gantt/model/DependencyModel dependency} leading to the next critical path node.\n             * Dependency is missing if it is the last critical path node in the critical path.\n             * To highlight critical paths, enable {@link Gantt/feature/CriticalPaths} feature.\n             *\n             * ```javascript\n             * // This is an example of critical paths structure\n             * [\n             *      // First path\n             *      [\n             *          {\n             *              event : Gantt.model.TaskModel\n             *              dependency : Gantt.model.DependencyModel\n             *          },\n             *          {\n             *              event : Gantt.model.TaskModel\n             *          }\n             *      ],\n             *      // Second path\n             *      [\n             *          {\n             *              event : Gantt.model.TaskModel\n             *          }\n             *      ]\n             *      // and so on....\n             * ]\n             * ```\n             *\n             * For more details on the _critical path method_ theory please check\n             * [this article](https://en.wikipedia.org/wiki/Critical_path_method).\n             *\n             * @member {Array[]} criticalPaths\n             * @category Scheduling\n             */\n            // root should be always expanded\n            expanded : true\n        };\n    }\n    static get defaultConfig() {\n        return {\n            projectConstraintIntervalClass    : ProjectConstraintInterval,\n            dateConstraintIntervalClass       : DateConstraintInterval,\n            dependencyConstraintIntervalClass : DependencyConstraintInterval,\n            /**\n             * The constructor of the event model class, to be used in the project. Will be set as the {@link Core.data.Store#config-modelClass modelClass}\n             * property of the {@link #property-eventStore}\n             *\n             * @config {Gantt.model.TaskModel} [taskModelClass]\n             * @typings {typeof TaskModel}\n             * @category Models & Stores\n             */\n            taskModelClass : TaskModel,\n            /**\n             * The constructor of the dependency model class, to be used in the project. Will be set as the {@link Core.data.Store#config-modelClass modelClass}\n             * property of the {@link #property-dependencyStore}\n             *\n             * @config {Gantt.model.DependencyModel} [dependencyModelClass]\n             * @typings {typeof DependencyModel}\n             * @category Models & Stores\n             */\n            dependencyModelClass : DependencyModel,\n            /**\n             * The constructor of the resource model class, to be used in the project. Will be set as the {@link Core.data.Store#config-modelClass modelClass}\n             * property of the {@link #property-resourceStore}\n             *\n             * @config {Gantt.model.ResourceModel} [resourceModelClass]\n             * @typings {typeof ResourceModel}\n             * @category Models & Stores\n             */\n            resourceModelClass : ResourceModel,\n            /**\n             * The constructor of the assignment model class, to be used in the project. Will be set as the {@link Core.data.Store#config-modelClass modelClass}\n             * property of the {@link #property-assignmentStore}\n             *\n             * @config {Gantt.model.AssignmentModel} [assignmentModelClass]\n             * @typings {typeof AssignmentModel}\n             * @category Models & Stores\n             */\n            assignmentModelClass : AssignmentModel,\n            /**\n             * The constructor of the calendar model class, to be used in the project. Will be set as the {@link Core.data.Store#config-modelClass modelClass}\n             * property of the {@link #property-calendarManagerStore}\n             *\n             * @config {Gantt.model.CalendarModel} [calendarModelClass]\n             * @typings {typeof CalendarModel}\n             * @category Models & Stores\n             */\n            calendarModelClass : CalendarModel,\n            /**\n             * The constructor to create an task store instance with. Should be a class, subclassing the {@link Gantt.data.TaskStore}\n             * @config {Gantt.data.TaskStore}\n             * @typings {typeof TaskStore}\n             * @category Models & Stores\n             */\n            taskStoreClass  : TaskStore,\n            eventStoreClass : TaskStore,\n            /**\n             * The constructor to create a dependency store instance with. Should be a class, subclassing the {@link Gantt.data.DependencyStore}\n             * @config {Gantt.data.DependencyStore}\n             * @typings {typeof DependencyStore}\n             * @category Models & Stores\n             */\n            dependencyStoreClass : DependencyStore,\n            /**\n             * The constructor to create a dependency store instance with. Should be a class, subclassing the {@link Gantt.data.ResourceStore}\n             * @config {Gantt.data.ResourceStore}\n             * @typings {typeof ResourceStore}\n             * @category Models & Stores\n             */\n            resourceStoreClass : ResourceStore,\n            /**\n             * The constructor to create a dependency store instance with. Should be a class, subclassing the {@link Gantt.data.AssignmentStore}\n             * @config {Gantt.data.AssignmentStore}\n             * @typings {typeof AssignmentStore}\n             * @category Models & Stores\n             */\n            assignmentStoreClass : AssignmentStore,\n            /**\n             * The constructor to create a calendar store instance with. Should be a class, subclassing the {@link Gantt.data.CalendarManagerStore}\n             * @config {Gantt.data.CalendarManagerStore}\n             * @typings {typeof CalendarManagerStore}\n             * @category Models & Stores\n             */\n            calendarManagerStoreClass : CalendarManagerStore,\n            /**\n             * Start date of the project in the ISO 8601 format. Setting this date will constrain all other tasks in the\n             * project to start no earlier than it.\n             *\n             * If this date is not provided, it will be calculated as the earliest date among all tasks.\n             *\n             * Note that the field always returns a `Date`.\n             *\n             * @field {Date} startDate\n             * @accepts {String|Date}\n             */\n            /**\n             * End date of the project in the ISO 8601 format.\n             * The value is calculated as the latest date among all tasks.\n             *\n             * Note that the field always returns a `Date`.\n             *\n             * @field {Date} endDate\n             * @accepts {String|Date}\n             */\n            /**\n             * The scheduling direction of the project tasks.\n             * The `Forward` direction corresponds to the As-Soon-As-Possible (ASAP) scheduling,\n             * `Backward` - to As-Late-As-Possible (ALAP).\n             *\n             * <div class=\"note\">When using backward scheduling on the project, you should either make\n             * both start and end date fields persistent on all tasks, or make both start and end date fields on\n             * the project persistent. This is because for initial calculation, Gantt will need to have the project's\n             * end date upfront, before performing calculations.</div>\n             *\n             * To set the scheduling direction of the individual tasks, use the {@link Gantt.model.TaskModel#field-direction}\n             * field of the TaskModel.\n             *\n             * @field {'Forward'|'Backward'} direction\n             * @default 'Forward'\n             */\n            /**\n             * The initial data, to fill the {@link #property-taskStore taskStore} with.\n             * Should be an array of {@link Gantt.model.TaskModel TaskModels} or configuration objects.\n             *\n             * @config {TaskModelConfig[]|Gantt.model.TaskModel[]}\n             * @category Legacy inline data\n             */\n            tasksData : null,\n            // What is actually used to hold initial tasks, tasksData is transformed in construct()\n            /**\n             * Alias to {@link #config-tasksData}.\n             *\n             * @config {TaskModelConfig[]|Gantt.model.TaskModel[]}\n             * @category Legacy inline data\n             */\n            eventsData : null,\n            /**\n             * The initial data, to fill the {@link #property-dependencyStore dependencyStore} with.\n             * Should be an array of {@link Gantt.model.DependencyModel DependencyModels} or configuration objects.\n             *\n             * @config {DependencyModelConfig[]|Gantt.model.DependencyModel[]}\n             * @category Legacy inline data\n             */\n            dependenciesData : null,\n            /**\n             * The initial data, to fill the {@link #property-resourceStore resourceStore} with.\n             * Should be an array of {@link Gantt.model.ResourceModel ResourceModels} or configuration objects.\n             *\n             * @config {ResourceModelConfig[]|Gantt.model.ResourceModel[]}\n             * @category Legacy inline data\n             */\n            resourcesData : null,\n            /**\n             * The initial data, to fill the {@link #property-assignmentStore assignmentStore} with.\n             * Should be an array of {@link Gantt.model.AssignmentModel AssignmentModels} or configuration objects.\n             *\n             * @config {AssignmentModelConfig[]|Gantt.model.AssignmentModel[]}\n             * @category Legacy inline data\n             */\n            assignmentsData : null,\n            /**\n             * The initial data, to fill the {@link #property-calendarManagerStore calendarManagerStore} with.\n             * Should be an array of {@link Gantt.model.CalendarModel CalendarModels} or configuration objects.\n             *\n             * @config {CalendarModelConfig[]|Gantt.model.CalendarModel[]}\n             * @category Legacy inline data\n             */\n            calendarsData : null,\n            /**\n             * Store that holds time ranges - instances of {@link Scheduler.model.TimeRangeModel} for the\n             * {@link Scheduler.feature.TimeRanges} feature. A store will be automatically created if none is specified.\n             * @config {TimeRangeStoreConfig|Scheduler.data.TimeRangeStore}\n             * @category Models & Stores\n             */\n            timeRangeStore : {},\n            /**\n             * Set to `true` to reset the undo/redo queues of the internal {@link Core.data.stm.StateTrackingManager}\n             * after the Project has loaded. Defaults to `false`\n             * @config {Boolean} resetUndoRedoQueuesAfterLoad\n             * @default false\n             * @category Advanced\n             */\n            resetUndoRedoQueuesAfterLoad : false,\n            convertEmptyParentToLeaf : false,\n            supportShortSyncResponseNote : 'Note: Please consider enabling \"supportShortSyncResponse\" option to allow less detailed sync responses (https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-supportShortSyncResponse)',\n            /**\n             * Enables early rendering in Gantt, by postponing calculations to after the first refresh.\n             *\n             * Requires task data loaded in Gantt to be pre-normalized to function as intended, since it will be used to\n             * render tasks before engine has normalized the data. Given un-normalized data tasks will snap into place\n             * when calculations are finished.\n             *\n             * The Gantt chart will be read-only until the initial calculations are finished.\n             *\n             * @config {Boolean}\n             * @default\n             * @category Advanced\n             */\n            delayCalculation : true,\n            eventStore           : {},\n            assignmentStore      : {},\n            resourceStore        : {},\n            dependencyStore      : {},\n            calendarManagerStore : {},\n            /**\n             * Set to `true` to enable calculation progress notifications.\n             * When enabled, the project fires {@link #event-progress} events and the Gantt chart load mask reacts by showing a progress bar for the Engine calculations.\n             *\n             * **Note**: Enabling progress notifications will impact calculation performance, since it needs to pause calculations to allow the UI to redraw.\n             *\n             * @config {Boolean} enableProgressNotifications\n             * @default false\n             * @category Advanced\n             */\n            /**\n             * Enables/disables the calculation progress notifications.\n             * @member {Boolean} enableProgressNotifications\n             * @category Advanced\n             */\n            /**\n             * Whether to include \"As soon as possible\" and \"As late as possible\" in the list of the constraints,\n             * for compatibility with the MS Project. Enabled by default.\n             *\n             * Note, that when enabling this option, you can not have a regular constraint on the task and ASAP/ALAP flag\n             * in the same time.\n             *\n             * See also docs of the {@link Gantt.model.TaskModel#field-direction direction} field.\n             *\n             * @config {Boolean} includeAsapAlapAsConstraints\n             * @default true\n             */\n            includeAsapAlapAsConstraints : true,\n            stmClass : StateTrackingManager\n        };\n    }\n    static get configurable() {\n        return {\n            /**\n             * Get/set {@link #property-taskStore} data.\n             *\n             * Always returns an array of {@link Gantt.model.TaskModel TaskModels} but also accepts an array of\n             * its configuration objects as input.\n             *\n             * @member {Gantt.model.TaskModel[]} tasks\n             * @accepts {Gantt.model.TaskModel[]|TaskModelConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-taskStore}. Should be an array of\n             * {@link Gantt.model.TaskModel TaskModels} or its configuration objects.\n             *\n             * @config {Gantt.model.TaskModel[]|TaskModelConfig[]}\n             * @category Inline data\n             */\n            tasks : null,\n            /**\n             * Get/set {@link #property-resourceStore} data.\n             *\n             * Always returns an array of {@link Gantt.model.ResourceModel ResourceModels} but also accepts an array\n             * of its configuration objects as input.\n             *\n             * @member {Gantt.model.ResourceModel[]} resources\n             * @accepts {Gantt.model.ResourceModel[]|ResourceModelConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-resourceStore}. Should be an array of\n             * {@link Gantt.model.ResourceModel ResourceModels} or its configuration objects.\n             *\n             * @config {Gantt.model.ResourceModel[]|ResourceModelConfig[]}\n             * @category Inline data\n             */\n            resources : null,\n            /**\n             * Get/set {@link #property-assignmentStore} data.\n             *\n             * Always returns an array of {@link Gantt.model.AssignmentModel AssignmentModels} but also accepts an\n             * array of its configuration objects as input.\n             *\n             * @member {Gantt.model.AssignmentModel[]} assignments\n             * @accepts {Gantt.model.AssignmentModel[]|AssignmentModelConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-assignmentStore}. Should be an array of\n             * {@link Gantt.model.AssignmentModel AssignmentModels} or its configuration objects.\n             *\n             * @config {Gantt.model.AssignmentModel[]|AssignmentModelConfig[]}\n             * @category Inline data\n             */\n            assignments : null,\n            /**\n             * Get/set {@link #property-dependencyStore} data.\n             *\n             * Always returns an array of {@link Gantt.model.DependencyModel DependencyModels} but also accepts an\n             * array of its configuration objects as input.\n             *\n             * @member {Gantt.model.DependencyModel[]} dependencies\n             * @accepts {Gantt.model.DependencyModel[]|DependencyModelConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-dependencyStore}. Should be an array of\n             * {@link Gantt.model.DependencyModel DependencyModels} or its configuration objects.\n             *\n             * @config {Gantt.model.DependencyModel[]|DependencyModelConfig[]}\n             * @category Inline data\n             */\n            dependencies : null,\n            /**\n             * Get/set {@link #property-timeRangeStore} data.\n             *\n             * Always returns an array of {@link Scheduler.model.TimeSpan TimeSpans} but also accepts an\n             * array of its configuration objects as input.\n             *\n             * @member {Scheduler.model.TimeRangeModel[]} timeRanges\n             * @accepts {Scheduler.model.TimeRangeModel[]|TimeRangeModelConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-timeRangeStore}. Should be an array of\n             * {@link Scheduler.model.TimeRangeModel TimeRangeModels} or its configuration objects.\n             *\n             * @config {Scheduler.model.TimeRangeModel[]|TimeRangeModelConfig[]}\n             * @category Inline data\n             */\n            timeRanges : null,\n            /**\n             * Get/set {@link #property-calendarManagerStore} data.\n             *\n             * Always returns a {@link Gantt.model.CalendarModel} array but also accepts an array of its configuration\n             * objects as input.\n             *\n             * @member {Gantt.model.CalendarModel[]} calendars\n             * @accepts {Gantt.model.CalendarModel[]|CalendarModelConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-calendarManagerStore}. Should be a\n             * {@link Gantt.model.CalendarModel} array or its configuration objects.\n             *\n             * @config {Gantt.model.CalendarModel[]|CalendarModelConfig[]}\n             * @category Inline data\n             */\n            calendars : null,\n            /**\n             * The initial data, to fill the {@link #property-timeRangeStore} with.\n             * Should be an array of {@link Scheduler.model.TimeRangeModel TimeRangeModels} or configuration objects.\n             *\n             * @config {TimeSpanConfig[]|Scheduler.model.TimeSpan[]}\n             * @category Legacy inline data\n             */\n            timeRangesData : null,\n            syncDataOnLoad : null,\n            /**\n             * Set to `true` to make STM ignore changes coming from the backend. This will allow user to only undo redo\n             * local changes.\n             * @prp {Boolean}\n             */\n            ignoreRemoteChangesInSTM : false\n        };\n    }\n    //endregion\n    construct(...args) {\n        const config = args[0] || {};\n        // put config to arguments (passed to the parent class \"construct\")\n        args[0] = config;\n        if ('tasksData' in config) {\n            config.eventsData   = config.tasksData;\n            delete config.tasksData;\n        }\n        if ('taskStore' in config) {\n            config.eventStore = config.taskStore;\n            delete config.taskStore;\n        }\n        // Maintain backwards compatibility\n        // default config will be exposed later and won't be applied if a value is exists,\n        // but we should sync eventModelClass/eventStoreClass with taskModelClass/taskStoreClass before all further actions\n        // to apply the correct value in all mixins that uses eventModelClass/eventStoreClass properties only\n        config.eventModelClass = config.taskModelClass || config.eventModelClass || this.getDefaultConfiguration().taskModelClass || this.defaultEventModelClass;\n        config.eventStoreClass = config.taskStoreClass || config.eventStoreClass || this.getDefaultConfiguration().taskStoreClass || this.defaultEventStoreClass;\n        super.construct(...args);\n    }\n    //region Attaching stores\n    // Attach to a store, relaying its change events\n    attachStore(store) {\n        if (this.syncDataOnLoad) {\n            store.syncDataOnLoad = this.syncDataOnLoad;\n        }\n        store.ion({\n            name    : store.$$name,\n            change  : 'relayStoreChange',\n            thisObj : this\n        });\n        super.attachStore(store);\n    }\n    // Detach a store, stop relaying its change events\n    detachStore(store) {\n        store && this.detachListeners(store.$$name);\n        super.detachStore(store);\n    }\n    relayStoreChange(event) {\n        super.relayStoreChange(event);\n        /**\n         * Fired when data in any of the projects stores changes.\n         *\n         * Basically a relayed version of each stores own change event, decorated with which store it originates from.\n         * See the {@link Core.data.Store#event-change store change event} documentation for more information.\n         *\n         * @event change\n         * @param {Gantt.model.ProjectModel} source This project\n         * @param {Core.data.Store} store Affected store\n         * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} action\n         * Name of action which triggered the change. May be one of the options listed above.\n         * @param {Core.data.Model} record Changed record, for actions that affects exactly one record (`'update'`)\n         * @param {Core.data.Model[]} records Changed records, passed for all actions except `'removeAll'`\n         * @param {Object} changes Passed for the `'update'` action, info on which record fields changed\n         */\n        return this.trigger('change', { store : event.source, ...event, source : this });\n    }\n    //endregion\n    get defaultEventModelClass() {\n        return TaskModel;\n    }\n    get defaultEventStoreClass() {\n        return TaskStore;\n    }\n    set taskStore(store) {\n        this.eventStore = store;\n    }\n    get taskStore() {\n        return this.eventStore;\n    }\n    get timeRangeStore() {\n        return this._timeRangeStore;\n    }\n    set timeRangeStore(store) {\n        const me = this;\n        me.detachStore(me._timeRangeStore);\n        me._timeRangeStore = Store.getStore(store, TimeRangeStore);\n        if (!me._timeRangeStore.storeId) {\n            me._timeRangeStore.storeId = 'timeRanges';\n        }\n        me.attachStore(me._timeRangeStore);\n    }\n    async tryInsertChild() {\n        return this.tryPropagateWithChanges(() => {\n            this.insertChild(...arguments);\n        });\n    }\n    /**\n     * Overrides the project owned store identifiers calculation and launches rescheduling.\n     * @method setCalculations\n     * @param {Object} calculations Object providing new _engine_ fields calculation function names.\n     * The object is grouped by store identifiers. For example below code\n     * overrides task {@link Gantt/model/TaskModel#field-startDate}, {@link Gantt/model/TaskModel#field-endDate}\n     * and {@link Gantt/model/TaskModel#field-duration} calculation so\n     * the fields will always simply return their current values:\n     *\n     * ```javascript\n     * // task startDate, endDate and duration will use their userProvidedValue method\n     * // which simply returns their current values as-is\n     * const oldCalculations = await project.setCalculations({\n     *     tasks : {\n     *         startDate : \"userProvidedValue\",\n     *         endDate   : \"userProvidedValue\",\n     *         duration  : \"userProvidedValue\"\n     *     }\n     * })\n     * ```\n     * @returns {Promise} Promise that resolves with an object having the overridden calculations.\n     * The object can be used to toggle the calculations back in the future:\n     * ```javascript\n     * // override event duration calculation\n     * const oldCalculations = await project.setCalculations({\n     *     events : {\n     *         duration  : \"userProvidedValue\"\n     *     }\n     * })\n     * // revert the duration calculation back\n     * project.setCalculations(oldCalculations)\n     * ```\n     * @category Advanced\n     */\n    /**\n     * Returns a calendar of the project. If task has never been assigned a calendar a project's calendar will be returned.\n     *\n     * @method getCalendar\n     * @returns {Gantt.model.CalendarModel}\n     * @category Scheduling\n     */\n    /**\n     * Sets the calendar of the project. Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method setCalendar\n     * @param {Gantt.model.CalendarModel} calendar The new calendar.\n     * @async\n     * @propagating\n     * @category Scheduling\n     */\n    /**\n     * Causes the scheduling engine to re-evaluate the task data and all associated data and constraints\n     * and apply necessary changes.\n     * @async\n     * @function propagate\n     * @propagating\n     * @category Scheduling\n     */\n    /**\n     * Suspend {@link #function-propagate propagation} processing. When propagation is suspended,\n     * calls to {@link #function-propagate} do not proceed, instead a propagate call is deferred\n     * until a matching {@link #function-resumePropagate} is called.\n     * @function suspendPropagate\n     * @category Scheduling\n     */\n    /**\n     * Resume {@link #function-propagate propagation}. If propagation is resumed (calls may be nested\n     * which increments a suspension counter), then if a call to propagate was made during suspension,\n     * {@link #function-propagate} is executed.\n     * @param {Boolean} [trigger] Pass `false` to inhibit automatic propagation if propagate was requested during suspension.\n     * @async\n     * @function resumePropagate\n     * @category Scheduling\n     */\n    /**\n     * Accepts a \"data package\" consisting of data for the projects stores, which is then loaded into the stores.\n     *\n     * The package can hold data for EventStore, AssignmentStore, ResourceStore, DependencyStore and Calendar Manager.\n     * It uses the same format as when creating a project with inline data:\n     *\n     * ```javascript\n     * await project.loadInlineData({\n     *     eventsData       : [...],\n     *     resourcesData    : [...],\n     *     assignmentsData  : [...],\n     *     dependenciesData : [...],\n     *     calendarsData    : [...]\n     * });\n     * ```\n     *\n     * After populating the stores it commits the project, starting its calculations. By awaiting `loadInlineData()` you\n     * can be sure that project calculations are finished.\n     *\n     * @function loadInlineData\n     * @param {Object} dataPackage A data package as described above\n     * @fires load\n     * @async\n     * @category Inline data\n     */\n    /**\n     * Project changes (CRUD operations to records in its stores) are automatically committed on a buffer to the\n     * underlying graph based calculation engine. The engine performs it calculations async.\n     *\n     * By calling this function, the commit happens right away. And by awaiting it you are sure that project\n     * calculations are finished and that references between records are up to date.\n     *\n     * The returned promise is resolved with an object. If that object has `rejectedWith` set, there has been a conflict and the calculation failed.\n     *\n     * ```javascript\n     * // Move a task in time\n     * taskStore.first.shift(1);\n     *\n     * // Trigger calculations directly and wait for them to finish\n     * const result = await project.commitAsync();\n     *\n     * if (result.rejectedWith) {\n     *     // there was a conflict during the scheduling\n     * }\n     * ```\n     *\n     * @async\n     * @propagating\n     * @function commitAsync\n     * @category Scheduling\n     */\n    //region JSON\n    /**\n     * Returns the data from the records of the projects stores, in a format that can be consumed by `loadInlineData()`.\n     *\n     * Used by JSON.stringify to correctly convert this record to json.\n     *\n     *\n     * ```javascript\n     * const project = new ProjectModel({\n     *     eventsData       : [...],\n     *     resourcesData    : [...],\n     *     assignmentsData  : [...],\n     *     dependenciesData : [...]\n     * });\n     *\n     * const json = project.toJSON();\n     *\n     * // json:\n     * {\n     *     eventsData : [...],\n     *     resourcesData : [...],\n     *     dependenciesData : [...],\n     *     assignmentsData : [...]\n     * }\n     * ```\n     *\n     * Output can be consumed by `loadInlineData()`:\n     *\n     * ```javascript\n     * const json = project.toJSON();\n     *\n     * // Plug it back in later\n     * project.loadInlineData(json);\n     * ```\n     *\n     * @returns {Object}\n     * @category Inline data\n     */\n    toJSON() {\n        return {\n            eventsData       : this.eventStore.toJSON(),\n            resourcesData    : this.resourceStore.toJSON(),\n            dependenciesData : this.dependencyStore.toJSON(),\n            assignmentsData  : this.assignmentStore.toJSON()\n        };\n    }\n    /**\n     * Get or set project data (records from its stores) as a JSON string.\n     *\n     * Get a JSON string:\n     *\n     * ```javascript\n     * const project = new ProjectModel({\n     *     eventsData       : [...],\n     *     resourcesData    : [...],\n     *     assignmentsData  : [...],\n     *     dependenciesData : [...]\n     * });\n     *\n     * const jsonString = project.json;\n     *\n     * // jsonString:\n     * '{\"eventsData\":[...],\"resourcesData\":[...],...}'\n     * ```\n     *\n     * Set a JSON string (to populate the project stores):\n     *\n     * ```javascript\n     * project.json = '{\"eventsData\":[...],\"resourcesData\":[...],...}'\n     * ```\n     *\n     * @property {String}\n     * @category Inline data\n     */\n    get json() {\n        return super.json;\n    }\n    set json(json) {\n        if (typeof json === 'string') {\n            json = StringHelper.safeJsonParse(json);\n        }\n        this.loadInlineData(json);\n    }\n    //endregion\n    //#region Inline data\n    get tasks() {\n        return this.taskStore.allRecords;\n    }\n    updateTasks(events) {\n        this.taskStore.data = events;\n    }\n    get calendars() {\n        return this.calendarManagerStore.allRecords;\n    }\n    updateCalendars(calendars) {\n        this.calendarManagerStore.data = calendars;\n    }\n    updateTimeRangesData(ranges) {\n        this.timeRangeStore.data = ranges;\n    }\n    /**\n     * Get or set data of project stores. The returned data is identical to what\n     * {@link #function-toJSON} returns:\n     *\n     * ```javascript\n     *\n     * const data = scheduler.project.inlineData;\n     *\n     * // data:\n     * {\n     *     eventsData : [...],\n     *     resourcesData : [...],\n     *     dependenciesData : [...],\n     *     assignmentsData : [...]\n     * }\n     *\n     *\n     * // Plug it back in later\n     * scheduler.project.inlineData = data;\n     * ```\n     *\n     * @member {Object} inlineData\n     * @category Inline data\n     */\n    get inlineData() {\n        return this.toJSON();\n    }\n    set inlineData(inlineData) {\n        this.json = inlineData;\n    }\n    //#endregion\n    afterChange(toSet, wasSet) {\n        super.afterChange(...arguments);\n        if (wasSet.calendar) {\n            this.trigger('calendarChange');\n        }\n    }\n    refreshWbs(options) {\n        const\n            me = this,\n            children = me.unfilteredChildren ?? me.children;\n        if (children?.length) {\n            // We leverage the refreshWbs() method of TaskModel (our children) to do the work. This node does not\n            // have a wbsValue, so we pass -1 for the index to skip on to just our children.\n            children[0].refreshWbs?.call(me, options, -1);\n        }\n    }\n}\nProjectModel.applyConfigs = true;\nProjectModel._$name = 'ProjectModel';", "import ProjectModel from './ProjectModel.js';\nimport ProjectWebSocketHandlerMixin from '../../SchedulerPro/model/mixin/ProjectWebSocketHandlerMixin.js';\nexport default class WebSocketProjectModel extends ProjectWebSocketHandlerMixin(ProjectModel) {\n    static $name = 'WebSocketProjectModel';\n}\nWebSocketProjectModel._$name = 'WebSocketProjectModel';", "import AsyncHelper from '../../Core/helper/AsyncHelper.js';\nimport DH from '../../Core/helper/DateHelper.js';\nimport RandomGenerator from '../../Core/helper/util/RandomGenerator.js';\n/**\n * @module Gantt/util/ProjectGenerator\n */\nconst\n    year                = new Date().getFullYear(),\n    earlyMondayThisYear = DH.add(DH.startOf(new Date(year, 0, 5), 'week'), 1 - DH.weekStartDay, 'day'),\n    rnd                 = new RandomGenerator();\nfunction getNum(id, token) {\n    return parseInt('' + id + token);\n}\n/**\n * An internal utility class which generates sample project data for Examples and Tests.\n */\nexport default class ProjectGenerator {\n    static async generateAsync(requestedTaskCount, maxProjectSize, progressCallback = null, startDate = earlyMondayThisYear, log = true) {\n        const\n            config = {\n                startDate,\n                tasksData        : [],\n                dependenciesData : []\n            },\n            blockCount = Math.ceil(requestedTaskCount / 10),\n            projectSize = Math.ceil(maxProjectSize / 10),\n            generator = this.generateBlocks(blockCount, projectSize, config.startDate);\n        let count = 0,\n            duration = 0,\n            taskCount = 0,\n            dependencyCount = 0;\n        log && console.time('generate');\n        for (const block of generator) {\n            config.tasksData.push(...block.tasksData);\n            config.dependenciesData.push(...block.dependenciesData);\n            if (block.projectDuration) {\n                duration = Math.max(block.projectDuration, duration);\n            }\n            taskCount += block.taskCount;\n            dependencyCount += block.dependencyCount;\n            if (++count % 1000 === 0) {\n                progressCallback?.(taskCount, dependencyCount, false);\n                await AsyncHelper.animationFrame();\n            }\n        }\n        progressCallback?.(taskCount, dependencyCount, true);\n        config.endDate = DH.add(config.startDate, Math.max(duration, 30), 'days');\n        log && console.timeEnd('generate');\n        return config;\n    }\n    static * generateBlocks(count, projectSize, startDate) {\n        let currentId        = 1,\n            dependencyId     = 1,\n            projectDuration  = 0,\n            blockDuration    = 0,\n            sumDuration      = 0,\n            currentDuration  = 0,\n            currentStartDate = startDate,\n            finishedDuration = 0;\n        function rndDuration(addToTotal = true, resetSum = false) {\n            const value = rnd.nextRandom(5) + 2;\n            if (addToTotal) {\n                blockDuration += value;\n            }\n            if (resetSum) {\n                sumDuration = 0;\n            }\n            sumDuration += value;\n            currentDuration = value;\n            return value;\n        }\n        function nextStartDate(offset = currentDuration) {\n            currentStartDate = DH.add(currentStartDate, offset, 'days');\n            return currentStartDate;\n        }\n        function calculateEndDate() {\n            return DH.add(currentStartDate, currentDuration, 'days');\n        }\n        function storePercentDone(children) {\n            finishedDuration = 0;\n            for (const task of children) {\n                finishedDuration += task.duration * task.percentDone;\n            }\n            return children;\n        }\n        for (let i = 0; i < count; i++) {\n            const\n                blockStartId = currentId,\n                block = {\n                    tasksData : [\n                        {\n                            id        : currentId++,\n                            name      : 'Parent ' + blockStartId,\n                            startDate : nextStartDate(i > 0 ? currentDuration : 0),\n                            expanded  : true,\n                            inactive  : false,\n                            children  : [\n                                {\n                                    id        : currentId++,\n                                    name      : 'Sub-parent ' + getNum(blockStartId, 1),\n                                    startDate : nextStartDate(0),\n                                    expanded  : true,\n                                    inactive  : false,\n                                    children  : storePercentDone([\n                                        {\n                                            id          : currentId++,\n                                            name        : 'Task ' + getNum(blockStartId, 11),\n                                            startDate   : nextStartDate(0),\n                                            duration    : rndDuration(true, true),\n                                            effort      : currentDuration,\n                                            effortUnit  : 'day',\n                                            endDate     : calculateEndDate(),\n                                            percentDone : rnd.nextRandom(100),\n                                            inactive    : false\n                                        },\n                                        {\n                                            id          : currentId++,\n                                            name        : 'Task ' + getNum(blockStartId, 12),\n                                            startDate   : nextStartDate(),\n                                            duration    : rndDuration(),\n                                            effort      : currentDuration,\n                                            effortUnit  : 'day',\n                                            endDate     : calculateEndDate(),\n                                            percentDone : rnd.nextRandom(100),\n                                            inactive    : false\n                                        },\n                                        {\n                                            id          : currentId++,\n                                            name        : 'Task ' + getNum(blockStartId, 13),\n                                            startDate   : nextStartDate(),\n                                            duration    : rndDuration(),\n                                            effort      : currentDuration,\n                                            effortUnit  : 'day',\n                                            endDate     : calculateEndDate(),\n                                            percentDone : rnd.nextRandom(100),\n                                            inactive    : false\n                                        },\n                                        {\n                                            id          : currentId++,\n                                            name        : 'Task ' + getNum(blockStartId, 14),\n                                            startDate   : nextStartDate(),\n                                            duration    : rndDuration(),\n                                            effort      : currentDuration,\n                                            effortUnit  : 'day',\n                                            endDate     : calculateEndDate(),\n                                            percentDone : rnd.nextRandom(100),\n                                            inactive    : false\n                                        }\n                                    ]),\n                                    duration    : sumDuration,\n                                    effort      : sumDuration,\n                                    effortUnit  : 'day',\n                                    percentDone : finishedDuration / sumDuration,\n                                    endDate     : calculateEndDate()\n                                },\n                                {\n                                    id        : currentId++,\n                                    name      : 'Sub-parent ' + getNum(blockStartId, 2),\n                                    startDate : nextStartDate(),\n                                    expanded  : true,\n                                    inactive  : false,\n                                    children  : storePercentDone([\n                                        {\n                                            id          : currentId++,\n                                            name        : 'Task ' + getNum(blockStartId, 21),\n                                            startDate   : nextStartDate(0),\n                                            duration    : rndDuration(true, true),\n                                            effort      : currentDuration,\n                                            effortUnit  : 'day',\n                                            endDate     : calculateEndDate(),\n                                            percentDone : rnd.nextRandom(100),\n                                            inactive    : false\n                                        },\n                                        {\n                                            id          : currentId++,\n                                            name        : 'Task ' + getNum(blockStartId, 22),\n                                            startDate   : nextStartDate(),\n                                            duration    : rndDuration(),\n                                            effort      : currentDuration,\n                                            effortUnit  : 'day',\n                                            endDate     : calculateEndDate(),\n                                            percentDone : rnd.nextRandom(100),\n                                            inactive    : false\n                                        },\n                                        {\n                                            id          : currentId++,\n                                            name        : 'Task ' + getNum(blockStartId, 23),\n                                            startDate   : nextStartDate(),\n                                            duration    : rndDuration(),\n                                            effort      : currentDuration,\n                                            effortUnit  : 'day',\n                                            endDate     : calculateEndDate(),\n                                            percentDone : rnd.nextRandom(100),\n                                            inactive    : false\n                                        }\n                                    ]),\n                                    duration    : sumDuration,\n                                    effort      : sumDuration,\n                                    effortUnit  : 'day',\n                                    percentDone : finishedDuration / sumDuration,\n                                    endDate     : calculateEndDate()\n                                }\n                            ],\n                            duration   : blockDuration,\n                            effort     : blockDuration,\n                            effortUnit : 'day',\n                            endDate    : calculateEndDate()\n                        }\n                    ],\n                    dependenciesData : [\n                        { id : dependencyId++, fromEvent : blockStartId + 2, toEvent : blockStartId + 3 },\n                        { id : dependencyId++, fromEvent : blockStartId + 3, toEvent : blockStartId + 4 },\n                        { id : dependencyId++, fromEvent : blockStartId + 4, toEvent : blockStartId + 5 },\n                        { id : dependencyId++, fromEvent : blockStartId + 5, toEvent : blockStartId + 7 },\n                        { id : dependencyId++, fromEvent : blockStartId + 7, toEvent : blockStartId + 8 },\n                        { id : dependencyId++, fromEvent : blockStartId + 8, toEvent : blockStartId + 9 }\n                    ],\n                    taskCount       : 10,\n                    dependencyCount : 5\n                };\n            const\n                parent     = block.tasksData[0],\n                subParent1 = parent.children[0],\n                subParent2 = parent.children[1];\n            parent.percentDone = (subParent1.duration * subParent1.percentDone + subParent2.duration * subParent2.percentDone) / parent.duration;\n            projectDuration += blockDuration;\n            blockDuration = 0;\n            block.projectDuration = projectDuration;\n            if (i % projectSize !== 0) {\n                block.dependenciesData.push({\n                    id        : dependencyId++,\n                    fromEvent : blockStartId - 2,\n                    toEvent   : blockStartId + 2,\n                    type      : 2,\n                    lag       : 0,\n                    lagUnit   : 'd'\n                });\n                block.dependencyCount++;\n            }\n            else {\n                projectDuration = 0;\n            }\n            currentId++;\n            yield block;\n        }\n    }\n}\nProjectGenerator._$name = 'ProjectGenerator';", "import Parser from '../../Core/util/Parser.js';\nconst { defineParser, alt, seq, string, regexp, succeed, red, isSuccess } = Parser;\n/**\n * @module Gantt/util/ResourceAssignmentParser\n */\n/**\n * Consumes string while it won't hit [ or , character, value parsed will be trimmed of spaces\n *\n * Example: Maxim Bazhenov [100%] rest -> Maxim Bazhenov\n */\nconst resourceNamePEG = defineParser(\n    red(\n        regexp('[^\\\\[\\\\,]+'),\n        name => ({\n            resourceName : name.trim(),\n            units        : 100,\n            match        : name\n        })\n    )\n);\n/**\n * Consumes string while it provides numbers or spaces, value parsed them will be filtered of spaces\n * and just compacted number will be used.\n *\n * Example: 12 34 0 rest -> 12340\n */\nconst integerPEG = defineParser(\n    red(\n        regexp('[0-9\\\\s]+'),\n        (value) => ({\n            value : value.split(/\\s*/).join(''),\n            match : value\n        })\n    )\n);\n/**\n * Consumes one character either (decimal separator) '.' or ','\n *\n * Example: , rest -> ,\n */\nconst decimalSeparatorPEG = defineParser(\n    red(\n        alt(\n            string('.'),\n            string(',')\n        ),\n        (value) => ({\n            value,\n            match : value\n        })\n    )\n);\n/**\n * Consumes units number which might be given as:\n * - number with integer, decimal separator and fractional parts\n * - decimal separator and fractional part, so integer part will be considered 0\n * - just integer\n * value parsed will be transformed into Number type\n *\n * Example:\n * 10.2 rest -> 10.2\n * .2 rest -> 0.2\n * 100 rest -> 100\n */\nconst unitsNumberPEG = defineParser(\n    alt(\n        red(\n            seq(\n                () => integerPEG,\n                () => decimalSeparatorPEG,\n                () => integerPEG\n            ),\n            (integer, sep, fractional) => ({\n                value : Number(`${integer.value}.${fractional.value}`),\n                match : [integer.match, sep.match, fractional.match].join('')\n            })\n        ),\n        red(\n            seq(\n                () => decimalSeparatorPEG,\n                () => integerPEG\n            ),\n            (sep, fractional) => ({\n                value : Number(`0.${fractional.value}`),\n                match : [sep.match, fractional.match].join('')\n            })\n        ),\n        red(\n            () => integerPEG,\n            (value) => ({\n                value : Number(`${value.value}`),\n                match : value.match\n            })\n        )\n    )\n);\n/**\n * Consumes units with %, strips spaces between units number and % character.\n *\n * Example:\n * 70.5  % rest -> 70.5\n */\nconst unitsPersentagePEG = defineParser(\n    alt(\n        red(\n            seq(\n                () => unitsNumberPEG,\n                regexp('\\\\s*\\\\%')\n            ),\n            (units, perc) => ({\n                value : units.value,\n                match : [units.match, perc].join('')\n            })\n        ),\n        red(\n            () => unitsNumberPEG,\n            (units) => ({\n                value : units.value,\n                match : units.match\n            })\n        )\n    )\n);\n/**\n * Consumes units designation string, which should look like [ units with or without % ].\n * Strips spaces before and after [, ] characters.\n *\n * Example:\n * [ 70.2 % ] rest -> 70.2\n */\nconst unitsDesignationPEG = defineParser(\n    red(\n        seq(\n            regexp('\\\\s*\\\\[\\\\s*'),\n            () => unitsPersentagePEG,\n            regexp('\\\\s*\\\\]')\n        ),\n        (startSep, units, endSep) => ({\n            units : units.value,\n            match : [startSep, units.match, endSep].join('')\n        })\n    )\n);\n/**\n * Consumes just single , character stripping spaces before and after\n *\n * Example:\n *     ,     rest -> ,\n */\nconst commaPEG = defineParser(\n    red(\n        regexp('\\\\s*,\\\\s*'),\n        (value) => ({\n            value,\n            match : value\n        })\n    )\n);\n/**\n * Consumes resource assignment string which consists of resources assignment entries separated by , character.\n * Each entry contains following parts:\n * - resource name (mandatory)\n * - units designation (optional, default is 100)\n *\n * Example:\n * Maxim Bazhenov, Mats Bryntse [90], Johan Isaksson [50 %] -> Successful parse result\n *\n * See {@link #function-parse} for parse result analysis\n */\nconst raPEG = defineParser(\n    alt(\n        seq(\n            () => resourceNamePEG,\n            () => unitsDesignationPEG,\n            alt(\n                seq(\n                    () => commaPEG,\n                    () => raPEG\n                ),\n                succeed('')\n            )\n        ),\n        seq(\n            () => resourceNamePEG,\n            alt(\n                seq(\n                    () => commaPEG,\n                    () => raPEG\n                ),\n                succeed('')\n            )\n        )\n    )\n);\n/**\n * Parses resource assignment string into structured set of objects\n *\n * The string format is: `Resource Name [Units%], Other name, ...` where units part is optional as well as % sign\n *\n * @returns {Object} Structured information about parsed assignments\n */\nexport const parse = (str) => {\n    let gotSuccess = false, result = [], rest = '';\n    raPEG(str, (possibleResult) => {\n        if (isSuccess(possibleResult)) {\n            const [, structuredResult, unstracturedRest] = possibleResult;\n            if (structuredResult.length > result.length) {\n                result = structuredResult;\n                rest = unstracturedRest;\n                gotSuccess = true;\n            }\n        }\n    });\n    let position = 0;\n    return gotSuccess ? {\n        rest,\n        assignments : result.reduce(\n            (result, part) => {\n                let currentResource;\n                if (typeof part == 'object') {\n                    if (Object.prototype.hasOwnProperty.call(part, 'resourceName')) {\n                        currentResource = Object.assign({ position }, part);\n                        result.push(currentResource);\n                    }\n                    else {\n                        currentResource = result[result.length - 1];\n                        if (Object.prototype.hasOwnProperty.call(part, 'units')) {\n                            currentResource.units = part.units;\n                        }\n                        currentResource.match += part.match;\n                    }\n                    position += part.match.length;\n                }\n                return result;\n            },\n            []\n        )\n    } : false;\n};\n/**\n * Composes parsable string from parse result object\n *\n * @param {Object} result Parse result like object\n * @param {Boolean} [exactIfPossible=false] Set to true to compose exactly like it was given to {@link #function-parse} and if parse result reverse composition information is available.\n * @returns {String}\n */\nexport const compose = (parseResult, exactIfPossible = false) => {\n    let result = '';\n    if (parseResult.assignments) {\n        result += parseResult.assignments.reduce(\n            (str, { resourceName, units, match }) => {\n                if (match && exactIfPossible) {\n                    str += match;\n                }\n                else {\n                    str += (str.length ? ', ' : '') + `${resourceName} [${units}%]`;\n                }\n                return str;\n            },\n            result\n        );\n    }\n    if (parseResult.rest) {\n        result += parseResult.rest;\n    }\n    if (!exactIfPossible) {\n        result = result.trim();\n    }\n    return result;\n};\n/**\n * Normalizes the given string by parsing it and recomposing it back thus omitting all optional parts\n *\n * @param {String} str\n * @returns {String}\n */\nexport const normalize = (str) => compose(parse(str));\nexport default {\n    parse,\n    compose,\n    normalize\n};\n", "import BrowserHelper from '../../../Core/helper/BrowserHelper.js';\nimport DH from '../../../Core/helper/DateHelper.js';\nimport GridFeatureManager from '../../../Grid/feature/GridFeatureManager.js';\nimport InstancePlugin from '../../../Core/mixin/InstancePlugin.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\nimport XMLHelper from '../../../Core/helper/XMLHelper.js';\nimport Model from '../../../Core/data/Model.js';\nconst\n    MIN_DATE = DH.clearTime(new Date(1900, 5, 15)),\n    taskUnitMap = {\n        minute : 3,\n        hour   : 5,\n        day    : 7,\n        week   : 9,\n        month  : 11\n    },\n    projectUnitMap = {\n        minute : 1,\n        hour   : 2,\n        day    : 3,\n        week   : 4,\n        month  : 5\n    },\n    constraintMap = {\n        finishnoearlierthan : 6,\n        finishnolaterthan   : 7,\n        mustfinishon        : 3,\n        muststarton         : 2,\n        startnoearlierthan  : 4,\n        startnolaterthan    : 5\n    },\n    typeMap = {\n        FixedDuration : 1,\n        FixedUnits    : 0,\n        FixedEffort   : 2,\n        Normal        : 0\n    },\n    dependencyTypeMap = {\n        0 : 3,\n        1 : 2,\n        2 : 1,\n        3 : 0\n    };\n/**\n * @module Gantt/feature/export/MspExport\n */\n/**\n * A feature that allows exporting Gantt to Microsoft Project without involving a server.\n *\n * [Microsoft Project XML specification](https://docs.microsoft.com/en-us/office-project/xml-data-interchange/introduction-to-project-xml-data)\n *\n * This feature supports exporting to an XML format that can be imported by MS Project Professional 2013 / 2019.\n *\n * Here is an example of how to add the feature:\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         mspExport : {\n *             // Choose the filename for the exported file\n *             filename : 'Gantt Export'\n *         }\n *     }\n * });\n * ```\n *\n * And how to trigger an export:\n *\n * ```javascript\n * gantt.features.mspExport.export({\n *     filename : 'Gantt Export'\n * })\n * ```\n *\n * ## Processing of exported data\n *\n * Use the {@link #event-dataCollected} event to process exported data before it is written to the XML-file:\n *\n * ```javascript\n * // set listener on Gantt construction step\n * const gantt = new Gantt({\n *     ---\n *     features : {\n *         mspExport : {\n *             listeners : {\n *                 dataCollected : {{ data }} => {\n *                     // patch <Project><Name> tag content\n *                     data.Name = 'My Cool Project';\n *                 }\n *             }\n *         }\n *     }\n * });\n *\n * // set listener at runtime\n * gantt.features.mspExport.on({\n *     dataCollected : {{ data }} => {\n *         // patch <Project><Name> tag content\n *         data.Name = 'My Cool Project';\n *     }\n * })\n * ```\n *\n * This feature is **disabled** by default.\n * For info on enabling it, see {@link Grid/view/mixin/GridFeatures}.\n *\n * @classtype mspExport\n *\n * @extends Core/mixin/InstancePlugin\n * @feature\n * @demo Gantt/msprojectexport\n */\nexport default class MspExport extends InstancePlugin {\n    static $name = 'MspExport';\n    resourceCalendar = new Map();\n    static configurable = {\n        /**\n         * Name of the exported file (including extension)\n         * @config {String}\n         * @default\n         */\n        filename : null,\n        /**\n         * Defines how dates are formatted for MS Project. Information about formats can be found in {@link Core.helper.DateHelper}\n         * @config {String}\n         * @default\n         */\n        dateFormat : 'YYYY-MM-DDTHH:mm:ss',\n        /**\n         * Defines how time is formatted for MSProject. Information about formats can be found in {@link Core.helper.DateHelper}\n         * @config {String}\n         * @default\n         */\n        timeFormat : 'HH:mm:ss',\n        /**\n         * Defines the version used for MSProject (2013 or 2019)\n         * @config {Number}\n         * @default\n         */\n        msProjectVersion : 2019\n    };\n    /**\n     * Generate the export data to generate the XML.\n     * @returns {Object} Gantt data on MS Project structure to generate the XML\n     * @private\n     */\n    generateExportData() {\n        const me = this;\n        me.tasks = me.collectProjectTasks();\n        return {\n            ...me.getMsProjectConfig(),\n            Calendars : {\n                Calendar : me.getCalendarsData()\n            },\n            Tasks : {\n                Task : me.getTasksData()\n            },\n            Resources : {\n                Resource : me.getResourcesData()\n            },\n            Assignments : {\n                Assignment : me.getAssignmentsData()\n            }\n        };\n    }\n    /**\n     * Generates and downloads the .XML file.\n     * @param {Object} [config] Optional configuration object, which overrides the initial settings of the feature/exporter.\n     * @param {String} [config.filename] The filename to use\n     */\n    export(config = {}) {\n        const me = this;\n        if (me.disabled) {\n            return;\n        }\n        me.resourceCalendar.clear();\n        config = ObjectHelper.assign({}, me.config, config);\n        if (!config.filename) {\n            config.filename = `${me.client.$$name}.xml`;\n        }\n        /**\n         * Fires on the owning Gantt before export starts. Return `false` to cancel the export.\n         * @event beforeMspExport\n         * @preventable\n         * @on-owner\n         * @param {Object} config Export config\n         */\n        if (me.client.trigger('beforeMspExport', { config }) !== false) {\n            const data = me.generateExportData(config);\n            /**\n             * Fires when project data is collected to an object\n             * that is going to be exported as XML text.\n             *\n             * The event can be used to modify exported data before it is written to the XML-file:\n             *\n             * ```javascript\n             * const gantt = new Gantt({\n             *     ---\n             *     features : {\n             *         mspExport : {\n             *             listeners : {\n             *                 // listener to process exported data\n             *                 dataCollected : {{ data }} => {\n             *                     // patch <Project><Name> tag content\n             *                     data.Name = 'My Cool Project';\n             *                 }\n             *             }\n             *         }\n             *     }\n             * });\n             * ```\n             * @event dataCollected\n             * @param {Object} config Export config\n             * @param {Object} data Collected data to export\n             */\n            me.trigger('dataCollected', { config, data });\n            const\n                fileContent = me.convertToXml(data),\n                eventParams = { config, data, fileContent };\n            /**\n             * Fires on the owning Gantt when project content is exported\n             * to XML, before the XML is downloaded by the browser.\n             * @event mspExport\n             * @on-owner\n             * @param {Object} config Export config\n             * @param {String} fileContent Exported XML-file content\n             */\n            me.client.trigger('mspExport', eventParams);\n            BrowserHelper.download(config.filename, `data:text/xml;charset=utf-8,${encodeURIComponent(eventParams.fileContent)}`);\n        }\n    }\n    /**\n     * Convert Object data to XML.\n     * @param {Object} data The Object with data.\n     * @returns {String} The XML data.\n     * @private\n     */\n    convertToXml(data) {\n        return XMLHelper.convertFromObject(data, {\n            rootName            : 'Project',\n            elementName         : '',\n            xmlns               : 'http://schemas.microsoft.com/project',\n            rootElementForArray : false\n        });\n    }\n    /**\n     * Get the XML configurations in MS Project format.\n     * @returns {Object} MS Project configurations for the XML\n     * @private\n     */\n    getMsProjectConfig() {\n        const\n            me = this,\n            dateFormat = me.dateFormat,\n            { project } = me.client,\n            fileName = me.filename || me.client.$$name;\n        return {\n            CalendarUID                : me.getCalendarUID(project.effectiveCalendar),\n            CreationDate               : DH.format(new Date(), dateFormat),\n            SplitsInProgressTasks      : 0,\n            MoveCompletedEndsBack      : 0,\n            MoveRemainingStartsBack    : 0,\n            MoveRemainingStartsForward : 0,\n            MoveCompletedEndsForward   : 0,\n            NewTaskStartDate           : 0,\n            DaysPerMonth               : project.daysPerMonth,\n            FinishDate                 : DH.format(project.endDate, dateFormat),\n            MinutesPerDay              : project.hoursPerDay * 60,\n            MinutesPerWeek             : project.daysPerWeek * project.hoursPerDay * 60,\n            Name                       : fileName,\n            ScheduleFromStart          : project.direction === 'Forward' ? 1 : 0,\n            StartDate                  : DH.format(project.startDate, dateFormat),\n            Title                      : fileName,\n            WorkFormat                 : projectUnitMap[project.effortUnit],\n            ProjectExternallyEdited    : 0\n        };\n    }\n    /**\n     * Format Calendars from Gantt to MS Project format.\n     * @returns {Array} Calendars array formatted\n     * @private\n     */\n    getCalendarsData() {\n        const\n            me = this,\n            {\n                calendarManagerStore,\n                project\n            } = me.client,\n            { effectiveCalendar } = project,\n            calendars             = calendarManagerStore.allRecords || [];\n        // if project's calendar is not included on calendars array, include it\n        if (!calendarManagerStore.getByInternalId(effectiveCalendar.internalId)) {\n            calendars.push(effectiveCalendar);\n        }\n        // Each resource in MS Project data model has its own calendar\n        // so let's make dummy calendars for all resources\n        me.client.resources.forEach(resource => {\n            const calendar = new resource.effectiveCalendar.constructor({ name : resource.name });\n            // parent calendar for this dummy will be the real calendar the resource uses\n            calendar.parent = resource.effectiveCalendar;\n            calendar.isResourceCalendar = true;\n            // remember the resource calendar\n            me.resourceCalendar.set(resource, calendar);\n            calendars.push(calendar);\n        });\n        return calendars.map(calendar => {\n            const uid = me.getCalendarUID(calendar);\n            let\n                calendarName    = calendar.name || calendar.internalId,\n                baseCalendarUID = 0,\n                isBaseCalendar  = 0;\n            // MS Project does not support calendars hierarchy fully\n            // it has two level hierarchy:\n            // - first level - so called base calendars\n            // - second level - any other calendars (including resource calendars) that extend the base ones\n            if (!calendar.isResourceCalendar) {\n                calendarName    += ' - imported';\n                // all non-dummy calendars we import as base calendars (the one that can be extended in MSP)\n                isBaseCalendar  = 1;\n            }\n            else {\n                baseCalendarUID = me.getCalendarUID(calendar.parent, 0);\n            }\n            return {\n                ID              : uid,\n                UID             : uid,\n                BaseCalendarUID : baseCalendarUID,\n                // all non-dummy calendars we import as base calendars (the one that can be extended in MSP)\n                IsBaseCalendar  : isBaseCalendar,\n                Name            : calendarName,\n                WeekDays        : {\n                    WeekDay : me.formatWeekDays(calendar)\n                }\n            };\n        });\n    }\n    /**\n     * Format intervals to MS project format for the WeekDays property.\n     * @param {Array} calendar Array of intervals data.\n     * @returns {Array} Array with data formatted\n     * @private\n     */\n    formatWeekDays(calendar) {\n        const\n            { timeFormat } = this,\n            ticks          = [],\n            daysData       = {};\n        let startDate = MIN_DATE,\n            endDate;\n        for (let i = 0; i < 7; i++) {\n            // week day index\n            const day = startDate.getDay();\n            daysData[day] = {\n                DayType    : day + 1,\n                DayWorking : 0\n            };\n            endDate = DH.clearTime(DH.add(startDate, 1, 'day'));\n            ticks.push({ startDate, endDate });\n            // proceed to next day\n            startDate = endDate;\n        }\n        // clone original calendar to get rid of its existing caches\n        calendar = calendar.copy();\n        const\n            // dummy calendar with 7 day borders ..to force forEachAvailabilityInterval to stop on each day start\n            dummyCalendar        = new calendar.constructor({ intervals : ticks }),\n            calendarsCombination = this.client.project.combineCalendars([calendar, dummyCalendar]);\n        calendarsCombination.forEachAvailabilityInterval(\n            { startDate : MIN_DATE, endDate },\n            (startDate, endDate, calendarCacheInterval) => {\n                const\n                    calendarsStatus   = calendarCacheInterval.getCalendarsWorkStatus(),\n                    dayData           = daysData[startDate.getDay()];\n                // if the calendar has working interval for that period\n                if (calendarsStatus.get(calendar)) {\n                    // consider the day as working\n                    dayData.DayWorking = 1;\n                    dayData.WorkingTimes = dayData.WorkingTimes || { WorkingTime : [] };\n                    // put that time range\n                    dayData.WorkingTimes.WorkingTime.push({\n                        FromTime : DH.format(startDate, timeFormat),\n                        ToTime   : DH.format(endDate, timeFormat)\n                    });\n                }\n            }\n        );\n        return Object.values(daysData);\n    }\n    /**\n     * Format intervals to MS project format for the WorkWeeks property.\n     * @param {Array} Array of intervals data.\n     * @returns {Array} Array with data formatted\n     * @private\n     */\n    collectProjectTasks() {\n        const result = [];\n        this.client.store.rootNode.traverse(node => result.push(node), true);\n        return result;\n    }\n    /**\n     * Format Tasks from Gantt to MS Project format.\n     * @returns {Array} Tasks array formatted\n     * @private\n     */\n    getTasksData() {\n        const\n            me             = this,\n            { project }    = me.client,\n            isForward      = project.direction == 'Forward',\n            { dateFormat, tasks } = me;\n        return tasks.map(task => {\n            const\n                { startDate, endDate, wbsCode } = task,\n                // filter out broken dependencies\n                predecessors     = task.predecessors.filter(({ fromEvent }) => fromEvent),\n                durationMs       = project.convertDuration(task.duration, task.durationUnit, 'millisecond'),\n                effortMs         = project.convertDuration(task.effort, task.effortUnit, 'millisecond'),\n                actualDurationMs = task.percentDone * 0.01 * durationMs,\n                startDateStr     = DH.format(startDate, dateFormat),\n                endDateStr       = DH.format(endDate, dateFormat),\n                durationStr      = MspExport.convertDurationToMspDuration(durationMs, 'ms'),\n                uid              = me.getTaskUID(task),\n                result           = {\n                    UID               : uid,\n                    Name              : task.name,\n                    Active            : me.inactive ? 0 : 1,\n                    Manual            : task.manuallyScheduled ? 1 : 0,\n                    Type              : task.isLeaf ? typeMap[task.schedulingMode] : 1,\n                    IsNull            : startDate && endDate ? 0 : 1,\n                    WBS               : wbsCode,\n                    OutlineNumber     : wbsCode,\n                    OutlineLevel      : wbsCode.split('.').length,\n                    Start             : startDateStr,\n                    Finish            : endDateStr,\n                    Duration          : durationStr,\n                    ManualStart       : startDateStr,\n                    ManualFinish      : endDateStr,\n                    ManualDuration    : durationStr,\n                    DurationFormat    : taskUnitMap[task.durationUnit],\n                    Work              : MspExport.convertDurationToMspDuration(effortMs, 'ms'),\n                    EffortDriven      : task.effortDriven ? 1 : 0,\n                    Estimated         : 0,\n                    Milestone         : task.isMilestone ? 1 : 0,\n                    Summary           : task.isLeaf ? 0 : 1,\n                    PercentComplete   : Math.round(task.percentDone),\n                    ActualStart       : startDateStr,\n                    ActualDuration    : MspExport.convertDurationToMspDuration(actualDurationMs, 'ms'),\n                    RemainingDuration : MspExport.convertDurationToMspDuration(durationMs - actualDurationMs, 'ms'),\n                    PredecessorLink   : predecessors.map(predecessor => ({\n                        LagFormat      : taskUnitMap[predecessor.lagUnit],\n                        LinkLag        : project.convertDuration(predecessor.lag, predecessor.lagUnit, 'minute') * 10,\n                        PredecessorUID : me.getTaskUID(predecessor.fromEvent),\n                        Type           : dependencyTypeMap[predecessor.type]\n                    })),\n                    Baseline : task.baselines.map((baseline, index) => ({\n                        Number   : index,\n                        Finish   : DH.format(baseline.endDate, dateFormat),\n                        Start    : DH.format(baseline.startDate, dateFormat),\n                        Duration : MspExport.convertDurationToMspDuration(baseline.duration, baseline.durationUnit)\n                    })),\n                    IgnoreResourceCalendar : task.ignoreResourceCalendar ? 1 : 0,\n                    Rollup                 : task.rollup ? 1 : 0,\n                    ConstraintType         : task.constraintType ? constraintMap[task.constraintType] : (isForward ? 0 : 1),\n                    CalendarUID            : me.getCalendarUID(task.calendar)\n                };\n            if (task.constraintDate) {\n                result.ConstraintDate = DH.format(task.constraintDate, dateFormat);\n            }\n            if (task.deadlineDate) {\n                result.Deadline = DH.format(task.deadlineDate, dateFormat);\n            }\n            if (task.note) {\n                result.Notes = task.note;\n            }\n            return result;\n        });\n    }\n    getTaskUID(task) {\n        return task.internalId;\n    }\n    getCalendarUID(calendar, fallbackValue = -1) {\n        return calendar && !calendar.isRoot ? calendar.internalId : fallbackValue;\n    }\n    /**\n     * Format Resources from Gantt to MS Project format.\n     * @returns {Array} Resources array formatted\n     * @private\n     */\n    getResourcesData() {\n        return this.client.resources.map(resource => ({\n            UID         : resource.internalId,\n            Name        : resource.name,\n            Type        : 1,\n            MaxUnits    : '1.00',\n            PeakUnits   : '1.00',\n            // seems for version 2013 setting the calendar id it breaks so only Project level calendar is importable\n            CalendarUID : this.msProjectVersion === 2013 ? null : this.getCalendarUID(this.resourceCalendar.get(resource))\n        }));\n    }\n    /**\n     * Format Assignments from Gantt to MS Project format.\n     * @returns {Array} Assignments array formatted\n     * @private\n     */\n    getAssignmentsData() {\n        const result = [];\n        // for version 2013 the assignments doesn't work\n        if (this.msProjectVersion === 2013) {\n            return result;\n        }\n        const { project } = this.client;\n        for (const task of this.tasks) {\n            const\n                assigned    = task.assigned,\n                taskUID     = this.getTaskUID(task),\n                percentDone = Math.round(task.percentDone),\n                start       = DH.format(task.startDate, this.dateFormat),\n                finish      = DH.format(task.endDate, this.dateFormat);\n            if (assigned.size) {\n                for (const assignment of assigned) {\n                    const\n                        assignmentWorkMs          = project.convertDuration(assignment.effort, task.effortUnit, 'millisecond'),\n                        actualAssignmentWorkMs    = project.convertDuration(assignment.actualEffort, task.effortUnit, 'millisecond'),\n                        remainingAssignmentWorkMs = assignmentWorkMs - actualAssignmentWorkMs;\n                    result.push({\n                        UpdateNeeded        : 0,\n                        UID                 : assignment.internalId,\n                        TaskUID             : taskUID,\n                        ResourceUID         : assignment.resource.internalId,\n                        PercentWorkComplete : percentDone,\n                        Work                : MspExport.convertDurationToMspDuration(assignmentWorkMs, 'ms'),\n                        ActualWork          : MspExport.convertDurationToMspDuration(actualAssignmentWorkMs, 'ms'),\n                        RemainingWork       : MspExport.convertDurationToMspDuration(remainingAssignmentWorkMs, 'ms'),\n                        Start               : start,\n                        Finish              : finish,\n                        Units               : assignment.units / 100\n                    });\n                }\n            }\n            else {\n                const\n                    effortMs       = project.convertDuration(task.effort, task.effortUnit, 'millisecond'),\n                    actualEffortMs = effortMs * percentDone * 0.01,\n                    effortStr      = MspExport.convertDurationToMspDuration(effortMs, 'ms');\n                result.push({\n                    UID                 : Model._internalIdCounter++,\n                    TaskUID             : taskUID,\n                    ResourceUID         : -65535,\n                    PercentWorkComplete : percentDone,\n                    ActualWork          : MspExport.convertDurationToMspDuration(actualEffortMs, 'ms'),\n                    RemainingWork       : MspExport.convertDurationToMspDuration(effortMs - actualEffortMs, 'ms'),\n                    Start               : start,\n                    Finish              : finish,\n                    Units               : 1,\n                    Work                : effortStr\n                });\n            }\n        }\n        return result;\n    }\n    /**\n     * Convert to MS Project Span Date Time format.\n     * @param {Number} value The value to be converted.\n     * @param {String} unit The unit of the value to be converted\n     * @returns {String} The value formatted to \"PTnHnMnS\". E.g: PT10H30M, PT6H20M13S\n     * @private\n     */\n    static convertDurationToMspDuration(value, unit) {\n        if (value == null) {\n            return '';\n        }\n        const\n            delta = DH.getDelta(DH.as('ms', value, unit), { ignoreLocale : true, maxUnit : 'hour' }),\n            { hour = 0, minute = 0, second = 0 } = delta;\n        return `PT${hour}H${minute}M${second}S`;\n    }\n}\nMspExport._$name = 'MspExport'; GridFeatureManager.registerFeature(MspExport, false, 'Gantt');\n", "import Base from '../../../Core/Base.js';\nimport DomDataStore from '../../../Core/data/DomDataStore.js';\n/**\n * @module Gantt/view/mixin/GanttDom\n */\nconst hyphenRe = /-/g;\n/**\n * An object which encapsulates a Gantt timeline tick context based on a DOM event. This will include\n * the row (task) information and the tick and time information for a DOM pointer event detected\n * in the timeline.\n * @typedef {Object} GanttTimelineContext\n * @property {Event} domEvent The DOM event which triggered the context change.\n * @property {HTMLElement} eventElement If the `domEvent` was on an event bar, this will be the event bar element.\n * @property {HTMLElement} cellElement The cell element under the `domEvent`\n * @property {Date} date The date corresponding to the `domEvent` position in the timeline\n * @property {Scheduler.model.TimeSpan} tick A {@link Scheduler.model.TimeSpan} record which encapsulates the contextual tick\n * @property {Number} tickIndex The contextual tick index. This may be fractional.\n * @property {Number} tickParentIndex The integer contextual tick index.\n * @property {Date} tickStartDate The start date of the contextual tick.\n * @property {Date} tickEndDate The end date of the contextual tick.\n * @property {Grid.row.Row} row The contextual {@link Grid.row.Row}\n * @property {Number} index The contextual row index\n * @property {Gantt.model.TaskModel} [taskRecord] The contextual task record (if any) if the event source is a `Gantt`\n */\n/**\n * Fired when the pointer-activated {@link Scheduler.view.mixin.TimelineDomEvents#property-timelineContext} has changed.\n * @event timelineContextChange\n * @override // this has different TimelineContext type from the one in TimelineDomEvents\n * @param {GanttTimelineContext} oldContext The tick/task context being deactivated.\n * @param {GanttTimelineContext} context The tick/task context being activated.\n */\n/**\n * Mixin with TaskModel <-> HTMLElement mapping functions\n *\n * @mixin\n */\nexport default Target => class GanttDom extends (Target || Base) {\n    static get $name() {\n        return 'GanttDom';\n    }\n    // Alias for resolveTaskRecord method to satisfy the scheduler naming requirements.\n    resolveEventRecord(element) {\n        return this.resolveTaskRecord(element);\n    }\n    /**\n     * Returns the task record for a DOM element\n     * @param {HTMLElement} element The DOM node to lookup\n     * @returns {Gantt.model.TaskModel} The task record\n     */\n    resolveTaskRecord(element) {\n        const eventElement = element.closest(this.eventSelector);\n        return eventElement ? this.store.getById(eventElement.dataset.taskId) : this.getRecordFromElement(element);\n    }\n    /**\n     * Product agnostic method which yields the {@link Gantt.model.TaskModel} record which underpins the row which\n     * encapsulates the passed element. The element can be a grid cell, or an event element, and the result\n     * will be a {@link Gantt.model.TaskModel}\n     * @param {HTMLElement|Event} elementOrEvent The HTML element or DOM event to resolve a record from\n     * @returns {Gantt.model.TaskModel} The resource corresponding to the element, or null if not found.\n     */\n    resolveRowRecord(elementOrEvent) {\n        return this.resolveTaskRecord(elementOrEvent);\n    }\n    /**\n     * Relays keydown events as taskKeyDown if we have a selected task(s).\n     * @private\n     */\n    onElementKeyDown(event) {\n        const taskRecord = this.resolveTaskRecord(event.target);\n        super.onElementKeyDown(event);\n        if (taskRecord) {\n            this.trigger('taskKeyDown', {\n                taskRecord,\n                event\n            });\n        }\n    }\n    /**\n     * Relays keyup events as taskKeyUp if we have a selected task(s).\n     * @private\n     */\n    onElementKeyUp(event) {\n        const taskRecord = this.resolveTaskRecord(event.target);\n        super.onElementKeyUp(event);\n        if (taskRecord) {\n            this.trigger('taskKeyUp', {\n                taskRecord,\n                event\n            });\n        }\n    }\n    /**\n     * Returns the HTMLElement representing a task record.\n     *\n     * @param {Gantt.model.TaskModel} taskRecord A task record\n     * @param {Boolean} [inner] Specify `false` to return the task wrapper element\n     *\n     * @returns {HTMLElement} The element representing the task record\n     */\n    getElementFromTaskRecord(taskRecord, inner = true) {\n        return this.taskRendering.getElementFromTaskRecord(taskRecord, inner);\n    }\n    // Alias to make scheduler features applied to Gantt happy\n    getElementFromEventRecord(eventRecord) {\n        return this.getElementFromTaskRecord(eventRecord);\n    }\n    /**\n     * Generates the element `id` for a task element. This is used when\n     * recycling an event div which has been moved from one resource to\n     * another. The event is assigned its new render id *before* being\n     * returned to the free pool, so that when the render engine requests\n     * a div from the free pool, the same div will be returned and it will\n     * smoothly transition to its new position.\n     * @param {Scheduler.model.EventModel} taskRecord\n     * @private\n     */\n    getEventRenderId(taskRecord) {\n        return `${this.id.toString().replace(hyphenRe, '_')}-${taskRecord.id}`;\n    }\n    /**\n     * In Gantt, the task is the row, so it's valid to resolve a mouse event on a task to the TimeAxisColumn's cell.\n     *\n     * This method find the cell location of the passed event. It returns an object describing the cell.\n     * @param {Event} event A Mouse, Pointer or Touch event targeted at part of the grid.\n     * @returns {Object} An object containing the following properties:\n     * - `cellElement` - The cell element clicked on.\n     * - `columnId` - The `id` of the column clicked under.\n     * - `record` - The {@link Core.data.Model record} clicked on.\n     * - `id` - The `id` of the {@link Core.data.Model record} clicked on.\n     * @private\n     * @category Events\n     */\n    getEventData(event) {\n        const\n            me     = this,\n            record = me.resolveTimeSpanRecord(event.target);\n        // If the event was on a task, then we're in one of the TimeAxisColumn's cells.\n        if (record) {\n            const\n                cellElement = me.getCell({\n                    record,\n                    column : me.timeAxisColumn\n                }),\n                cellData = DomDataStore.get(cellElement),\n                id       = cellData.id,\n                columnId = cellData.columnId;\n            return {\n                cellElement,\n                cellData,\n                columnId,\n                id,\n                record,\n                cellSelector : { id, columnId }\n            };\n        }\n        else {\n            return super.getEventData(event);\n        }\n    }\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n", "import Base from '../../../Core/Base.js';\nimport Rectangle from '../../../Core/helper/util/Rectangle.js';\nimport DH from '../../../Core/helper/DateHelper.js';\n/**\n * @module Gantt/view/mixin/GanttRegions\n */\n/**\n * Functions to get regions (bounding boxes) for gantt, tasks etc.\n *\n * @mixin\n */\nexport default Target => class GanttRegions extends (Target || Base) {\n    static get $name() {\n        return 'GanttRegions';\n    }\n    /**\n     * Gets the region represented by the timeline and optionally only for a single task. Returns `null` if passed a\n     * task that is filtered out or not part of the task store.\n     * @param {Gantt.model.TaskModel} taskRecord (optional) The task record\n     * @returns {Core.helper.util.Rectangle|null} The region of the schedule\n     */\n    getScheduleRegion(taskRecord, local = true, dateConstraints) {\n        const\n            me                                   = this,\n            { timeAxisSubGridElement, timeAxis } = me;\n        let region;\n        if (taskRecord) {\n            const\n                taskElement = me.getElementFromTaskRecord(taskRecord),\n                row         = me.getRowById(taskRecord.id);\n            if (!row) {\n                return null;\n            }\n            region = Rectangle.from(row.getElement('normal'), timeAxisSubGridElement);\n            if (taskElement) {\n                const taskRegion = Rectangle.from(taskElement, timeAxisSubGridElement);\n                region.y      = taskRegion.y;\n                region.bottom = taskRegion.bottom;\n            }\n            else {\n                region.y += me.barMargin;\n                region.bottom -= me.barMargin;\n            }\n        }\n        else {\n            region       = Rectangle.from(timeAxisSubGridElement).moveTo(null, 0);\n            region.width = timeAxisSubGridElement.scrollWidth;\n            region.y      = region.y + me.barMargin;\n            region.bottom = region.bottom - me.barMargin;\n        }\n        const\n            taStart        = timeAxis.startDate,\n            taEnd          = timeAxis.endDate,\n            { start, end } = dateConstraints || {};\n        if (start && end && !timeAxis.timeSpanInAxis(start, end)) {\n            return null;\n        }\n        if (!start && !end) {\n            dateConstraints = me.getDateConstraints?.(taskRecord) || {\n                start : taStart,\n                end   : taEnd\n            };\n        }\n        let startX = me.getCoordinateFromDate(dateConstraints.start ? DH.max(taStart, dateConstraints.start) : taStart),\n            endX   = me.getCoordinateFromDate(dateConstraints.end ? DH.min(taEnd, dateConstraints.end) : taEnd);\n        if (!local) {\n            startX = me.translateToPageCoordinate(startX);\n            endX   = me.translateToPageCoordinate(endX);\n        }\n        region.x     = Math.min(startX, endX);\n        region.width = Math.max(startX, endX) - Math.min(startX, endX);\n        return region;\n    }\n    translateToPageCoordinate(x) {\n        const element = this.timeAxisSubGridElement;\n        return x + element.getBoundingClientRect().left - element.scrollLeft;\n    }\n    // Decide if a record is inside a collapsed tree node, or inside a collapsed group (using grouping feature)\n    isRowVisible(taskRecord) {\n        // records in collapsed groups/branches etc. are removed from processedRecords\n        return this.store.indexOf(taskRecord) >= 0;\n    }\n    /**\n     * Get the region for a specified task\n     * @param {Gantt.model.TaskModel} taskRecord\n     * @param {Boolean} [includeOutside]\n     * @param {Boolean} [inner] Specify true to return the box for the task bar within the wrapper.\n     * @returns {Core.helper.util.Rectangle}\n     */\n    getTaskBox(taskRecord, includeOutside = false, inner = false) {\n        return this.taskRendering.getTaskBox(...arguments);\n    }\n    getSizeAndPosition() {\n        return this.taskRendering.getSizeAndPosition(...arguments);\n    }\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n", "import Base from '../../../Core/Base.js';\nimport DomHelper from '../../../Core/helper/DomHelper.js';\n/**\n * @module Gantt/view/mixin/GanttScroll\n */\nconst defaultScrollOptions = {\n    block      : 'nearest',\n    edgeOffset : 20\n};\n/**\n * Functions for scrolling to tasks, dates etc.\n *\n * @mixin\n */\nexport default Target => class GanttScroll extends (Target || Base) {\n    static get $name() {\n        return 'GanttScroll';\n    }\n    /**\n     * Scrolls a task record into the viewport.\n     *\n     * @param {Gantt.model.TaskModel} taskRecord The task record to scroll into view\n     * @param {BryntumScrollOptions} [options] How to scroll.\n     * @returns {Promise} A Promise which resolves when the scrolling is complete.\n     */\n    async scrollTaskIntoView(taskRecord, options = defaultScrollOptions) {\n        const me = this;\n        let taskStart                                            = taskRecord.startDate,\n            taskEnd                                              = taskRecord.endDate,\n            { startDate : timeAxisStart, endDate : timeAxisEnd } = me.timeAxis;\n        if (options.edgeOffset == null) {\n            options.edgeOffset = 20;\n        }\n        if (!taskRecord.isScheduled) {\n            return this.scrollRowIntoView(taskRecord, options);\n        }\n        if (me.timeAxisSubGrid.collapsed) {\n            return;\n        }\n        // For infinite scroll: treat tasks that are in the buffer area as outside\n        if (me.infiniteScroll) {\n            const\n                scrollable     = me.timelineScroller,\n                { clientSize } = scrollable,\n                requiredSize   = clientSize * me.bufferCoef,\n                bufferPx       = requiredSize * me.bufferThreshold,\n                bufferInMs     = me.timeAxisViewModel.getDateFromPosition(bufferPx) - timeAxisStart;\n            timeAxisStart = new Date(timeAxisStart.valueOf() + bufferInMs);\n            timeAxisEnd   = new Date(timeAxisEnd.valueOf() - bufferInMs);\n        }\n        taskStart = taskStart || taskEnd;\n        taskEnd   = taskEnd || taskStart;\n        const taskIsOutside = taskStart < timeAxisStart | ((taskEnd > timeAxisEnd) << 1);\n        // Make sure task is within TimeAxis time span unless extendTimeAxis passed as false.\n        // The TaskEdit feature passes false because it must not mutate the TimeAxis.\n        // Bitwise flag:\n        //  1 === start is before TimeAxis start.\n        //  2 === end is after TimeAxis end.\n        if (taskIsOutside && options.extendTimeAxis !== false) {\n            const currentTimeSpanRange = me.timeAxis.endDate - me.timeAxis.startDate;\n            let startAnchorPoint, endAnchorPoint;\n            // Event is too wide, expand the range to encompass it.\n            if (taskIsOutside === 3) {\n                await me.timeAxis.setTimeSpan(\n                    new Date(taskStart.valueOf() - currentTimeSpanRange / 2),\n                    new Date(taskEnd.getTime() + currentTimeSpanRange / 2)\n                );\n            }\n            else if (me.infiniteScroll) {\n                const\n                    { visibleDateRange } = me,\n                    visibleMS            = visibleDateRange.endMS - visibleDateRange.startMS,\n                    // If event starts before time axis, scroll to a date one full viewport after target date\n                    // (reverse for an event starting after time axis), to allow a scroll animation\n                    sign                 = taskIsOutside & 1 ? 1 : -1;\n                await me.setTimeSpan(\n                    new Date(taskStart.valueOf() - currentTimeSpanRange / 2),\n                    new Date(taskStart.valueOf() + currentTimeSpanRange / 2),\n                    {\n                        visibleDate : new Date(taskEnd.valueOf() + (sign * visibleMS))\n                    }\n                );\n            }\n            // Event is partially or wholly outside but will fit.\n            // Move the TimeAxis to include it. Attempt to maintain visual position.\n            else {\n                startAnchorPoint = me.getCoordinateFromDate((taskIsOutside & 1) ? taskEnd : taskStart);\n                // Event starts before\n                if (taskIsOutside & 1) {\n                    await me.timeAxis.setTimeSpan(\n                        new Date(taskStart),\n                        new Date(taskStart.valueOf() + currentTimeSpanRange)\n                    );\n                }\n                // Event ends after\n                else {\n                    await me.timeAxis.setTimeSpan(\n                        new Date(taskEnd.valueOf() - currentTimeSpanRange),\n                        new Date(taskEnd)\n                    );\n                }\n                // Restore view to same relative scroll position.\n                endAnchorPoint = (taskIsOutside & 1)\n                    ? me.getCoordinateFromDate(taskEnd)\n                    : me.getCoordinateFromDate(taskStart);\n                await me.timeAxisSubGrid.scrollable.scrollBy(endAnchorPoint - startAnchorPoint);\n            }\n        }\n        // Establishing element to scroll to\n        const el = me.getElementFromTaskRecord(taskRecord);\n        if (el) {\n            const scroller = me.timeAxisSubGrid.scrollable;\n            // Scroll into view with animation and highlighting if needed.\n            await scroller.scrollIntoView(el, options);\n        }\n        else {\n            // Event not rendered, scroll to calculated location\n            await me.scrollUnrenderedTaskIntoView(taskRecord, options);\n        }\n    }\n    /**\n     * Scrolls an unrendered task into view. Internal function used from #scrollTaskIntoView.\n     * @private\n     */\n    async scrollUnrenderedTaskIntoView(taskRec, options = defaultScrollOptions) {\n        if (options.edgeOffset == null) {\n            options.edgeOffset = 20;\n        }\n        const me = this;\n        await me.expandTo(taskRec);\n        const\n            scroller         = me.timeAxisSubGrid.scrollable,\n            box              = me.getTaskBox(taskRec),\n            scrollerViewport = scroller.viewport,\n            targetRect       = box.translate(scrollerViewport.x - scroller.x, scrollerViewport.y - scroller.y);\n        await scroller.scrollIntoView(targetRect, Object.assign({}, options, { highlight : false }));\n        if (options.highlight) {\n            const element = me.getElementFromTaskRecord(taskRec);\n            element && DomHelper.highlight(element);\n        }\n    }\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n", "import Base from '../../../Core/Base.js';\n/**\n * @module Gantt/view/mixin/GanttState\n */\n/**\n * Mixin for Gantt that handles state. It serializes the following gantt properties:\n *\n * * barMargin\n * * tickSize\n * * zoomLevel\n *\n * See {@link Grid.view.mixin.GridState} and {@link Core.mixin.State} for more information on state.\n *\n * @mixin\n */\nexport default Target => class GanttState extends (Target || Base) {\n    static get $name() {\n        return 'GanttState';\n    }\n    updateProject(project, old) {\n        super.updateProject(project, old);\n        this.detachListeners('suspendStateDuringDelayedCalculation');\n        // Delay calculation code path involves changing readOnly of the Gantt panel. This will also\n        // trigger state change, we don't need that. So we pause `triggerUpdate` listener to not trigger `stateChange`\n        if (project?.delayCalculation) {\n            project.ion({\n                name                  : 'suspendStateDuringDelayedCalculation',\n                delayCalculationStart : {\n                    fn   : 'suspendStateListener',\n                    prio : 10\n                },\n                delayCalculationEnd : {\n                    fn   : 'resumeStateListener',\n                    prio : -10\n                },\n                thisObj : this\n            });\n        }\n    }\n    suspendStateListener() {\n        this.stateListenerSuspended = (this.stateListenerSuspended || 0) + 1;\n    }\n    resumeStateListener() {\n        const me = this;\n        me.stateListenerSuspended = (me.stateListenerSuspended || 1) - 1;\n        if (!me.stateListenerSuspended && me.isSaveStatePending) {\n            me.saveState({ immediate : true });\n        }\n    }\n    saveState(...args) {\n        if (!this.stateListenerSuspended) {\n            return super.saveState(...args);\n        }\n    }\n    /**\n     * Gets or sets gantt's state. Check out {@link Gantt.view.mixin.GanttState} mixin for details.\n     * @member {Object} state\n     * @member {Object} state\n     * @property {Object[]} state.columns\n     * @property {Number} state.rowHeight\n     * @property {Object} state.scroll\n     * @property {Number} state.scroll.scrollLeft\n     * @property {Number} state.scroll.scrollTop\n     * @property {Array} state.selectedRecords\n     * @property {String} state.style\n     * @property {String} state.selectedCell\n     * @property {Object} state.store\n     * @property {Object} state.store.sorters\n     * @property {Object} state.store.groupers\n     * @property {Object} state.store.filters\n     * @property {Object} state.subGrids\n     * @property {Number} state.barMargin\n     * @property {Number} state.zoomLevel\n     * @category State\n     */\n    /**\n     * Apply previously stored state.\n     * @param {Object} state\n     * @private\n     */\n    applyState(state) {\n        const me = this;\n        // Applying sorters too early might lead to unexpected results if fields in the incoming dataset will be changed\n        // after initial commit\n        // state.store might be undefined if responsive level is being applied\n        if (!me.project.isInitialCommitPerformed && (state.store?.sorters || state.store?.filters)) {\n            const storeState = state.store;\n            me.project.commitAsync().then(() => {\n                if (!me.isDestroyed) {\n                    me.suspendRefresh();\n                    me.store.state = storeState;\n                    me.resumeRefresh(true);\n                }\n            });\n            delete state.store;\n        }\n        // Restoring selected cell and records during startup attempts to access task DOM elements which are not yet\n        // rendered. So we filter out these props and apply them in onInternalPaint handler\n        const specialKeys = ['selectedCell', 'selectedRecords'];\n        if (specialKeys.some(key => key in state)) {\n            const subState = {};\n            // Copy special keys to a partial state object to apply later\n            specialKeys.forEach(key => {\n                if (key in state) {\n                    subState[key] = state[key];\n                    delete state[key];\n                }\n            });\n            // Create fixer method that will apply state after\n            me._applyStateAfterPaint = () => {\n                me._applyStateAfterPaint = null;\n                me.suspendRefresh();\n                Object.keys(subState).forEach(key => me[key] = subState[key]);\n                me.resumeRefresh(true);\n            };\n        }\n        super.applyState(state);\n    }\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n    onInternalPaint(...args) {\n        super.onInternalPaint(...args);\n        const me = this;\n        if (me._applyStateAfterPaint) {\n            if (!me.project.isInitialCommitPerformed) {\n                me.project.ion({\n                    commitFinalized() {\n                        me._applyStateAfterPaint();\n                    },\n                    thisObj : me,\n                    once    : true\n                });\n            }\n            else {\n                me._applyStateAfterPaint();\n            }\n        }\n    }\n};\n", "import Base from '../../../Core/Base.js';\nimport ProjectConsumer from '../../../Scheduler/data/mixin/ProjectConsumer.js';\nimport ProjectModel from '../../model/ProjectModel.js';\nimport DateHelper from '../../../Core/helper/DateHelper.js';\n/**\n * @module Gantt/view/mixin/GanttStores\n */\n/**\n * Functions for store assignment and store event listeners.\n * Properties are aliases to corresponding\n * ones of Gantt's {@link Gantt.model.ProjectModel project} instance.\n *\n * @mixin\n */\nexport default Target => class GanttStores extends ProjectConsumer(Target || Base) {\n    static get $name() {\n        return 'GanttStores';\n    }\n    // This is the static definition of the Stores we consume from the project, and\n    // which we must provide *TO* the project if we or our CrudManager is configured\n    // with them.\n    // The property name is the store name, and within that there is the dataName which\n    // is the property which provides static data definition. And there is a listeners\n    // definition which specifies the listeners *on this object* for each store.\n    //\n    // To process incoming stores, implement an updateXxxxxStore method such\n    // as `updateEventStore(eventStore)`.\n    //\n    // To process an incoming Project implement `updateProject`. __Note that\n    // `super.updateProject(...arguments)` must be called first.__\n    static get projectStores() {\n        return {\n            calendarManagerStore : {},\n            resourceStore : {\n                dataName : 'resources'\n            },\n            eventStore : {\n                dataName : 'events'\n            },\n            assignmentStore : {\n                dataName : 'assignments'\n            },\n            dependencyStore : {\n                dataName : 'dependencies'\n            }\n        };\n    }\n    static get configurable() {\n        return {\n            // Overridden. ProjectConsumer defaults to Scheduler's ProjectModel\n            projectModelClass : ProjectModel,\n            /**\n             * Inline tasks, will be loaded into an internally created TaskStore.\n             * @config {Gantt.model.TaskModel[]|TaskModelConfig[]}\n             * @category Data\n             */\n            tasks : null,\n            /**\n             * The {@link Gantt.data.TaskStore} holding the tasks to be rendered into the Gantt.\n             * @config {Gantt.data.TaskStore}\n             * @category Data\n             */\n            taskStore : null\n        };\n    }\n    updateProject(project, oldProject) {\n        super.updateProject(project, oldProject);\n        this.detachListeners('ganttStores');\n        this.bindCrudManager(project);\n        project?.ion({\n            name                : 'ganttStores',\n            refresh             : 'internalOnProjectRefresh',\n            startApplyChangeset : 'internalOnProjectStartApplyChangeset',\n            endApplyChangeset   : 'internalOnProjectEndApplyChangeset',\n            thisObj             : this\n        });\n    }\n    get replica() {\n        return this.project.replica;\n    }\n    internalOnProjectStartApplyChangeset() {\n        this.captureScrollTargetRow();\n    }\n    internalOnProjectEndApplyChangeset() {\n        this.restoreScrollTargetRow();\n    }\n    internalOnProjectRefresh({ isInitialCommit, isCalculated }) {\n        const\n            me = this,\n            {\n                project,\n                visibleDate = {}\n            }  = me;\n        if (!me.isPainted) {\n            return;\n        }\n        // Unless user configured startDate, after initial project is loaded - scroll project start into view\n        if (!me.appliedViewStartDate && !('startDate' in me.initialConfig) && project.startDate && project.endDate) {\n            const\n                requestedVisibleDate   = visibleDate?.date,\n                { startDate, endDate } = project,\n                min                    = requestedVisibleDate ? DateHelper.min(startDate, requestedVisibleDate) : startDate,\n                max                    = requestedVisibleDate\n                    ? (endDate\n                        ? DateHelper.max(endDate, requestedVisibleDate)\n                        : DateHelper.add(min, me.visibleDateRange.endDate - me.visibleDateRange.startDate))\n                    : endDate;\n            // if managed to calculated start/end dates\n            if (min && max) {\n                me.setTimeSpan(min, max, { ...visibleDate, visibleDate : requestedVisibleDate });\n                me.appliedViewStartDate = true;\n            }\n        }\n        // Transition all refreshes except the initial one or any used for early rendering\n        if (!isInitialCommit && isCalculated) {\n            me.refreshWithTransition();\n        }\n        // No transition on initial refresh, nothing to transition and don't want to delay dependency drawing more\n        // than necessary\n        else {\n            me.refresh();\n        }\n        me.trigger('projectRefresh', { isInitialCommit, isCalculated });\n    }\n    //endregion\n    //region Inline data\n    //region Store & model docs\n    // Configs\n    /**\n     * Inline resources, will be loaded into the backing project's ResourceStore.\n     * @config {Gantt.model.ResourceModel[]|ResourceModelConfig[]} resources\n     * @category Data\n     */\n    /**\n     * Inline assignments, will be loaded into the backing project's AssignmentStore.\n     * @config {Gantt.model.AssignmentModel[]|AssignmentModelConfig[]} assignments\n     * @category Data\n     */\n    /**\n     * Inline dependencies, will be loaded into the backing project's DependencyStore.\n     * @config {Gantt.model.DependencyModel[]|DependencyModelConfig[]} dependencies\n     * @category Data\n     */\n    /**\n     * Inline time ranges, will be loaded into the backing project's time range store.\n     * @config {Scheduler.model.TimeSpan[]|TimeSpanConfig[]} timeRanges\n     * @category Data\n     */\n    /**\n     * Inline calendars, will be loaded into the backing project's CalendarManagerStore.\n     * @config {Gantt.model.CalendarModel[]|CalendarModelConfig[]} calendars\n     * @category Data\n     */\n    // Properties\n    /**\n     * Get/set resources, applies to the backing project's ResourceStore.\n     * @member {Gantt.model.ResourceModel[]} resources\n     * @accepts {Gantt.model.ResourceModel[]|ResourceModelConfig[]}\n     * @category Data\n     */\n    /**\n     * Get/set assignments, applies to the backing project's AssignmentStore.\n     * @member {Gantt.model.AssignmentModel[]} assignments\n     * @accepts {Gantt.model.AssignmentModel[]|AssignmentModelConfig[]}\n     * @category Data\n     */\n    /**\n     * Get/set dependencies, applies to the backing projects DependencyStore.\n     * @member {Gantt.model.DependencyModel[]} dependencies\n     * @accepts {Gantt.model.DependencyModel[]|DependencyModelConfig[]}\n     * @category Data\n     */\n    /**\n     * Get/set time ranges, applies to the backing project's TimeRangeStore.\n     * @member {Scheduler.model.TimeSpan[]} timeRanges\n     * @accepts {Scheduler.model.TimeSpan[]|TimeSpanConfig[]}\n     * @category Data\n     */\n    /**\n     * Get/set calendars, applies to the backing projects CalendarManagerStore.\n     * @member {Gantt.model.CalendarModel[]} calendars\n     * @accepts {Gantt.model.CalendarModel[]|CalendarModelConfig[]}\n     * @category Data\n     */\n    //endregion\n    get timeRanges() {\n        return this.project.timeRanges;\n    }\n    set timeRanges(timeRanges) {\n        this.project.timeRanges = timeRanges;\n    }\n    get calendars() {\n        return this.project.calendars;\n    }\n    set calendars(calendars) {\n        this.project.calendars = calendars;\n    }\n    //endregion\n    //region TaskStore\n    get usesDisplayStore() {\n        return this.store !== this.taskStore;\n    }\n    /**\n     * Get/set tasks, applies to the backing project's EventStore.\n     * Returns a flat array of all tasks in the task store.\n     * @member {Gantt.model.TaskModel[]} tasks\n     * @accepts {Gantt.model.TaskModel[]|TaskModelConfig[]}\n     * @category Data\n     */\n    get tasks() {\n        return this.project.eventStore.allRecords;\n    }\n    changeTasks(tasks) {\n        const { project } = this;\n        if (this.buildingProjectConfig) {\n            // Set the property in the project config object.\n            project.eventsData = tasks;\n        }\n        else {\n            // Live update the project when in use.\n            project.eventStore.data = tasks;\n        }\n    }\n    /**\n     * Get/set the task store instance of the backing project.\n     * @member {Gantt.data.TaskStore} taskStore\n     * @category Data\n     */\n    changeTaskStore(taskStore) {\n        const { project } = this;\n        if (this.buildingProjectConfig) {\n            // Set the property in the project config object.\n            // Must not go through the updater. It's too early to\n            // inform host of store change.\n            project.eventStore = taskStore;\n            return;\n        }\n        // Live update the project when in use.\n        if (!this.initializingProject) {\n            if (project.eventStore !== taskStore) {\n                project.setEventStore(taskStore);\n                taskStore = project.eventStore;\n            }\n        }\n        return taskStore;\n    }\n    updateEventStore(eventStore) {\n        const me = this;\n        eventStore.metaMapId = me.id;\n        // taskStore is used for rows (store) and tasks\n        me.taskStore = me.store = eventStore;\n    }\n    bindStore(store) {\n        super.bindStore(store);\n        this.timeAxisViewModel.store = store;\n        // Occasionally we need to track batched changes.\n        // TaskResize requires this as it changes the endDate with task batched.\n        this.detachListeners('storeBatchedUpdateListener');\n        store.ion({\n            name          : 'storeBatchedUpdateListener',\n            batchedUpdate : 'onEventStoreBatchedUpdate',\n            thisObj       : this\n        });\n    }\n    /**\n     * Listener to the batchedUpdate event which fires when a field is changed on a record which\n     * is batch updating. Occasionally UIs must keep in sync with batched changes.\n     * For example, the TaskResize feature performs batched updating of the startDate/endDate\n     * and it tells its client to listen to batchedUpdate.\n     * @private\n     */\n    onEventStoreBatchedUpdate(event) {\n        const me = this;\n        if (me.listenToBatchedUpdates) {\n            const wasEnabled = me.enableEventAnimations;\n            // This pathway is used from TaskResize during dragging, so we do not\n            // want the size animating. It should follow the pointer in real time.\n            me.enableEventAnimations = false;\n            me.onStoreUpdateRecord(event);\n            me.enableEventAnimations = wasEnabled;\n        }\n    }\n    //endregion\n    //region Internal\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n    //endregion\n};\n", "import Base from '../../../Core/Base.js';\n/**\n * @module Gantt/view/mixin/GanttTimelineDateMapper\n */\nexport default Target => class GanttTimelineDateMapper extends (Target || Base) {\n    static get $name() {\n        return 'GanttTimelineDateMapper';\n    }\n    /**\n     * Method to get a displayed end date value, see {@link Gantt/view/mixin/GanttTimelineDateMapper#function-getFormattedEndDate} for more info.\n     * @private\n     * @param {Date} endDate The date to format\n     * @param {Date} startDate The start date\n     * @returns {Date} The date value to display\n     */\n    getDisplayEndDate(endDate, startDate) {\n        return endDate;\n    }\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n", "import Base from '../../../Core/Base.js';\n/**\n * @module Gantt/view/mixin/TaskNavigation\n */\nconst animate100 = {\n    animate : 100\n};\n/**\n * Mixin that tracks event or assignment selection by clicking on one or more events in the scheduler.\n * @mixin\n */\nexport default Target => class TaskNavigation extends (Target || Base) {\n    static get $name() {\n        return 'TaskNavigation';\n    }\n    static get defaultConfig() {\n        return {\n            navigator : {\n                inlineFlow : false,\n                prevKey    : 'ArrowUp',\n                nextKey    : 'ArrowDown',\n                keys       : {\n                    Enter : 'onTaskEnterKey'\n                }\n            },\n            isNavigationKey : {\n                ArrowDown  : 1,\n                ArrowUp    : 1,\n                ArrowLeft  : 0,\n                ArrowRight : 0\n            }\n        };\n    }\n    processEvent(event) {\n        const me = this,\n            eventElement = event.target.closest(me.eventSelector);\n        if (!me.navigator.disabled && eventElement) {\n            event.taskRecord = event.eventRecord = me.resolveTaskRecord(eventElement);\n        }\n        return event;\n    }\n    normalizeTarget(event) {\n        return event.taskRecord;\n    }\n    // Makes sure you a click on a task that is already focused will call cell selection\n    onElementMouseDown(event) {\n        const\n            me               = this,\n            { _focusedCell } = me,\n            taskEl           = event.target.closest(me.navigator.itemSelector),\n            isFocused        = taskEl && taskEl === _focusedCell?.target;\n        super.onElementMouseDown(event);\n        if (isFocused && me.lastNavigationEvent !== event) {\n            me.onCellNavigate?.(me, _focusedCell, _focusedCell, true);\n            me.lastNavigationEvent = event; // Saved the navigation event so to not process this event twice\n        }\n    }\n    selectEvent(record, preserveSelection = false) {\n        if (!this.isSelected(record)) {\n            // Select row without scrolling any column into view\n            this.selectRow({\n                record         : record.id,\n                column         : false,\n                addToSelection : preserveSelection\n            });\n        }\n    }\n    deselectEvent(record) {\n        this.deselectRow(record.id);\n    }\n    getNext(taskRecord) {\n        const\n            me        = this,\n            { store } = me;\n        for (let rowIdx = store.indexOf(taskRecord) + 1; rowIdx < store.count; rowIdx++) {\n            const nextTask = store.getAt(rowIdx);\n            // Skip tasks which are outside the TimeAxis\n            if (me.isInTimeAxis(nextTask)) {\n                return nextTask;\n            }\n        }\n    }\n    getPrevious(taskRecord) {\n        const\n            me        = this,\n            { store } = me;\n        for (let rowIdx = store.indexOf(taskRecord) - 1; rowIdx >= 0; rowIdx--) {\n            const prevTask = store.getAt(rowIdx);\n            // Skip tasks which are outside the TimeAxis\n            if (me.isInTimeAxis(prevTask)) {\n                return prevTask;\n            }\n        }\n    }\n    set activeEvent(record) {\n        this.navigator.activeItem = this.getElementFromTaskRecord(record, false);\n    }\n    get activeEvent() {\n        const { activeItem } = this.navigator;\n        if (activeItem) {\n            return this.resolveTaskRecord(activeItem);\n        }\n    }\n    async navigateTo(targetEvent, {\n        scrollIntoView = true,\n        uiEvent        = {}\n    }) {\n        const\n            me                      = this,\n            { navigator }           = me,\n            { skipScrollIntoView }  = navigator;\n        if (targetEvent) {\n            if (scrollIntoView) {\n                // No key processing during scroll\n                navigator.disabled = true;\n                await me.scrollTaskIntoView(targetEvent, animate100);\n                navigator.disabled = false;\n            }\n            else {\n                navigator.skipScrollIntoView = true;\n            }\n            // Panel can be destroyed before promise is resolved\n            if (!me.isDestroyed) {\n                me.activeEvent = targetEvent;\n                navigator.skipScrollIntoView = skipScrollIntoView;\n                navigator.trigger('navigate', {\n                    event : uiEvent,\n                    item  : me.getElementFromTaskRecord(targetEvent, false)\n                });\n            }\n        }\n    }\n    clearEventSelection() {\n        this.deselectAll();\n    }\n    onTaskEnterKey() {\n        // Empty, to be chained by features (used by TaskEdit)\n    }\n    // OVERRIDE for EventNavigation#onDeleteKey\n    onDeleteKey(keyEvent) {\n        const record = keyEvent.eventRecord;\n        if (!this.readOnly && this.enableDeleteKey && record) {\n            this.removeEvents([record]);\n        }\n    }\n    onGridBodyFocusIn(focusEvent) {\n        // Task navigation only has a say when navigation is inside the TimeAxisSubGrid\n        if (this.timeAxisSubGridElement.contains(focusEvent.target)) {\n            const\n                me                  = this,\n                { navigationEvent } = me,\n                { target }          = focusEvent,\n                eventFocus          = target.closest(me.navigator.itemSelector),\n                task                = eventFocus ? me.resolveTaskRecord(target) : me.getRecordFromElement(target),\n                destinationCell     = me.normalizeCellContext({\n                    rowIndex : me.store.indexOf(task),\n                    column   : me.timeAxisColumn,\n                    target\n                });\n            // Don't take over what the event navigator does if it's doing task navigation.\n            // Just silently cache our actionable location.\n            if (eventFocus) {\n                if (me.lastNavigationEvent !== navigationEvent) {\n                    const { _focusedCell } = me;\n                    me._focusedCell = destinationCell;\n                    me.onCellNavigate?.(me, _focusedCell, destinationCell, true);\n                    // Saved the navigation event so to not process this event twice\n                    me.lastNavigationEvent = navigationEvent;\n                }\n                return;\n            }\n            // Try to focus the task.\n            me.navigateTo(task, {\n                scrollIntoView : Boolean(navigationEvent?.type !== 'mousedown'),\n                uiEvent        : navigationEvent\n            });\n            return;\n        }\n        super.onGridBodyFocusIn(focusEvent);\n    }\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n", "import Base from '../../../Core/Base.js';\nimport DomSync from '../../../Core/helper/DomSync.js';\nimport DomClassList from '../../../Core/helper/util/DomClassList.js';\nimport Rectangle from '../../../Core/helper/util/Rectangle.js';\nimport DateHelper from '../../../Core/helper/DateHelper.js';\nimport StringHelper from '../../../Core/helper/StringHelper.js';\nimport DomHelper from '../../../Core/helper/DomHelper.js';\n/**\n * @module Gantt/view/orientation/NewTaskRendering\n * @internal\n */\nconst\n    releaseEventActions  = {\n        releaseElement : 1, // Not used at all at the moment\n        reuseElement   : 1  // Used by some other element\n    },\n    renderEventActions   = {\n        newElement      : 1,\n        reuseOwnElement : 1,\n        reuseElement    : 1\n    };\n/**\n * Handles rendering of tasks, using the following strategy:\n *\n * 1. When a row is rendered, it collects a DOM config for its task bar and stores in a map (row -> config)\n * 2. When a rendering pass is done, it syncs the DOM configs from the map to DOM\n *\n * The need for caching with this approach is minimal, only the map needs to be kept up to date with available rows.\n *\n * @internal\n * @extends Core/Base\n */\nexport default class NewTaskRendering extends Base {\n    //region Config & Init\n    static get properties() {\n        return {\n            rowMap : new Map()\n        };\n    }\n    construct(gantt) {\n        this.gantt = gantt;\n        gantt.rowManager.ion({\n            renderDone      : 'onRenderDone',\n            removeRows      : 'onRemoveRows',\n            beforeRowHeight : 'onBeforeRowHeightChange',\n            thisObj         : this\n        });\n        super.construct({});\n    }\n    init() {}\n    //endregion\n    //region View hooks\n    refreshRows() {}\n    onTimeAxisViewModelUpdate() {\n        // Update view bounds\n        this.updateFromHorizontalScroll(this.gantt.timeAxisSubGrid.scrollable.x);\n    }\n    onViewportResize() {}\n    onDragAbort() {}\n    onBeforeRowHeightChange(event) {\n        const\n            { gantt } = this,\n            { total } = gantt.resourceMarginObject;\n        if (gantt.foregroundCanvas) {\n            //gantt.element.classList.add('b-notransition');\n            gantt.foregroundCanvas.style.fontSize = `${(event?.height ?? gantt.rowHeight) - total}px`;\n            //gantt.element.classList.remove('b-notransition');\n        }\n    }\n    //endregion\n    //region Region & coordinates\n    get visibleDateRange() {\n        return this._visibleDateRange;\n    }\n    getTaskBox(taskRecord, includeOutside = false, inner = false) {\n        const\n            { gantt }           = this,\n            { start, total }    = gantt.resourceMarginObject,\n            { isBatchUpdating } = taskRecord,\n            { store }           = gantt,\n            startDate           = isBatchUpdating ? taskRecord.get('startDate') : taskRecord.startDate,\n            endDate             = isBatchUpdating ? taskRecord.get('endDate') : taskRecord.endDate;\n        if (inner) {\n            const innerElement = this.getElementFromTaskRecord(taskRecord);\n            if (innerElement) {\n                return Rectangle.from(innerElement, gantt.timeAxisSubGridElement);\n            }\n        }\n        // A task that gets startDate during initial propagation, which seems not have happened yet.\n        // Or a removed task (this fn is also used for baselines). Nothing to render then\n        if (!startDate || !endDate || (taskRecord.isTask && (store.isDestroyed || !store.isAvailable(taskRecord)))) {\n            return null;\n        }\n        const positionData = this.getSizeAndPosition(taskRecord, includeOutside, inner);\n        if (!positionData) {\n            return null;\n        }\n        const\n            { position, width } = positionData,\n            top = gantt.rowManager.calculateTop(store.indexOf(taskRecord.isBaseline ? taskRecord.task : taskRecord)) + start,\n            height = gantt.rowHeight - total,\n            bounds = new Rectangle(position, top, width, height);\n        // Position always correct in Gantt, since there is no stacking\n        bounds.layout = true;\n        return bounds;\n    }\n    // returns an object with `position` + `width`. If task is not inside current time axis, position is -1\n    getSizeAndPosition(taskRecord, includeOutside, inner) {\n        const\n            me                        = this,\n            { gantt }                 = me,\n            { total }                 = gantt.resourceMarginObject,\n            { timeAxis }              = gantt,\n            viewStart                 = timeAxis.startDate,\n            viewEnd                   = timeAxis.endDate,\n            isMilestone               = taskRecord.milestone,\n            // Ensure dependencies feature is present (=== false if not)\n            horizontalAdjustment      = isMilestone ? gantt.features.dependencies.pathFinder?.startArrowMargin : 0;\n        let\n            // Must use Model.get in order to get latest values in case we are inside a batch.\n            // TaskResize changes the endDate using batching to enable a tentative change\n            // via the batchedUpdate event which is triggered when changing a field in a batch.\n            // Fall back to accessor if propagation has not populated date fields.\n            taskStart            = taskRecord.isBatchUpdating ? taskRecord.get('startDate') : taskRecord.startDate,\n            // Might get here before engine has normalized\n            taskEnd              = taskRecord.isBatchUpdating\n                ? taskRecord.get('endDate')\n                : taskRecord.endDate || (taskRecord.duration != null\n                    ? DateHelper.add(taskStart, taskRecord.duration, taskRecord.durationUnit) : null),\n            startCoordinate, endCoordinate;\n        // Early bailout for tasks that are fully out of timeaxis\n        if (!includeOutside && (taskEnd < viewStart || taskStart > viewEnd)) {\n            return null;\n        }\n        // The calls using `includeOutside` are not used during task rendering, but when rendering dependencies.\n        // In those cases the lines are expected to be drawn even to tasks fully out of view, clipped to view bounds\n        if (includeOutside && taskStart < viewStart) {\n            startCoordinate = gantt.getCoordinateFromDate(viewStart) - horizontalAdjustment;\n        }\n        else if (includeOutside && taskStart > viewEnd) {\n            startCoordinate = gantt.getCoordinateFromDate(viewEnd) + horizontalAdjustment;\n        }\n        // Starts before view and ends in or after view, approximate startCoordinate\n        else if (taskStart < viewStart) {\n            const\n                // Using seconds instead of ms in a try to not loose to much precision in year views\n                pxPerSecond      = gantt.timeAxisViewModel.getSingleUnitInPixels('second'),\n                secondsOutOfView = (timeAxis.startMS - taskRecord.startDateMS) / 1000, // taskRecord.startDateMS is cached in TimeSpan\n                pxOutOfView      = secondsOutOfView * pxPerSecond;\n            startCoordinate = gantt.getCoordinateFromDate(viewStart) - pxOutOfView;\n        }\n        // The \"normal\" case, somewhere in the timeaxis\n        else {\n            if (gantt.fillTicks && !isMilestone && (!taskRecord.isBatchUpdating || gantt.snap)) {\n                const\n                    tick = timeAxis.getSnappedTickFromDate(taskStart);\n                taskStart = tick.startDate;\n            }\n            startCoordinate = gantt.getCoordinateFromDate(taskStart);\n        }\n        if (!isMilestone) {\n            // Same logic applies to `includeOutside` for end date, clip to view\n            if (includeOutside && taskEnd < viewStart) {\n                endCoordinate = gantt.getCoordinateFromDate(viewStart);\n            }\n            else if (includeOutside && taskEnd > viewEnd) {\n                endCoordinate = gantt.getCoordinateFromDate(viewEnd);\n            }\n            // Starts in or before view and ends outside, approximate end\n            else if (taskEnd > viewEnd) {\n                const\n                    pxPerSecond      = gantt.timeAxisViewModel.getSingleUnitInPixels('second'),\n                    secondsOutOfView = (taskRecord.endDateMS - timeAxis.endMS) / 1000, // taskRecord.endDateMS is cached in TimeSpan\n                    pxOutOfView      = secondsOutOfView * pxPerSecond;\n                endCoordinate = gantt.getCoordinateFromDate(viewEnd) + pxOutOfView;\n            }\n            else {\n                if (gantt.fillTicks && (!taskRecord.isBatchUpdating || gantt.snap)) {\n                    const\n                        tickIdx = Math.ceil(gantt.timeAxis.getTickFromDate(taskEnd)) - 1,\n                        tick    = gantt.timeAxis.getAt(tickIdx);\n                    taskEnd = tick.endDate;\n                }\n                endCoordinate = gantt.getCoordinateFromDate(taskEnd);\n            }\n        }\n        let width = isMilestone ? 0 : Math.abs(startCoordinate - endCoordinate);\n        // Requesting diamond width, in viewport space\n        if (inner && isMilestone && taskStart > viewStart && taskStart < viewEnd) {\n            // By default as wide as it is high\n            width = gantt.rowHeight - total;\n            startCoordinate -= width / 2;\n        }\n        if (!includeOutside && startCoordinate + width < 0) {\n            return null;\n        }\n        return {\n            position : startCoordinate,\n            width\n        };\n    }\n    getRowRegion(taskRecord, startDate, endDate) {\n        const\n            { gantt } = this,\n            row       = gantt.getRowFor(taskRecord);\n        // might not be rendered\n        if (!row) {\n            return null;\n        }\n        const\n            rowElement = row.getElement(gantt.timeAxisSubGrid.region),\n            taStart    = gantt.timeAxis.startDate,\n            taEnd      = gantt.timeAxis.endDate,\n            start      = startDate ? DateHelper.max(taStart, startDate) : taStart,\n            end        = endDate ? DateHelper.min(taEnd, endDate) : taEnd,\n            startX     = gantt.getCoordinateFromDate(start),\n            endX       = gantt.getCoordinateFromDate(end, true, true),\n            y          = row.top + gantt.scrollTop,\n            x          = Math.min(startX, endX),\n            bottom     = y + rowElement.offsetHeight;\n        return new Rectangle(x, y, Math.max(startX, endX) - x, bottom - y);\n    }\n    getDateFromXY(xy, roundingMethod, local) {\n        let coord = xy[0];\n        if (!local) {\n            coord = this.translateToScheduleCoordinate(coord);\n        }\n        return this.gantt.timeAxisViewModel.getDateFromPosition(coord, roundingMethod);\n    }\n    translateToScheduleCoordinate(x) {\n        // Get rid of fractional pixels, to not end up with negative fractional values for pos\n        const pos = x - Math.floor(this.gantt.timeAxisSubGridElement.getBoundingClientRect().left);\n        return pos + this.gantt.scrollLeft;\n    }\n    translateToPageCoordinate(x) {\n        const\n            client = this.gantt,\n            { scrollable } = client.timeAxisSubGrid;\n        let result = x + client.timeAxisSubGridElement.getBoundingClientRect().left;\n        if (client.rtl) {\n            result -= scrollable.maxX - Math.abs(client.scrollLeft);\n        }\n        else {\n            result -= client.scrollLeft;\n        }\n        return result;\n    }\n    //endregion\n    //region Element <-> Record mapping\n    getElementFromTaskRecord(taskRecord, inner = true) {\n        const { syncIdMap } = this.gantt.foregroundCanvas;\n        let wrapper = syncIdMap?.[taskRecord.id];\n        // For linked tasks, we might be trying to find element for the original. If none found, we also check linked\n        // tasks. Needed for dependencies, since they point to original tasks, not linked ones.\n        if (!wrapper && taskRecord.hasLinks && syncIdMap) {\n            taskRecord.forEachLinked((store, linked) => {\n                if (syncIdMap[linked.id]) {\n                    wrapper = syncIdMap[linked.id];\n                }\n            });\n        }\n        return inner ? wrapper?.syncIdMap.task : wrapper;\n    }\n    //endregion\n    //region Dependency connectors\n    // Cannot be moved from this file, called from currentOrientation.xx\n    /**\n     * Gets displaying item start side\n     *\n     * @param {Gantt.model.TaskModel} taskRecord\n     * @returns {String} 'left' / 'right' / 'top' / 'bottom'\n     */\n    getConnectorStartSide(taskRecord) {\n        return this.gantt.rtl ? 'right' : 'left';\n    }\n    /**\n     * Gets displaying item end side\n     *\n     * @param {Gantt.model.TaskModel} taskRecord\n     * @returns {String} 'left' / 'right' / 'top' / 'bottom'\n     */\n    getConnectorEndSide(taskRecord) {\n        return this.gantt.rtl ? 'left' : 'right';\n    }\n    //endregion\n    //region Rendering\n    onRemoveRows({ rows }) {\n        rows.forEach(row => this.rowMap.delete(row));\n        !this.gantt.refreshSuspended && this.onRenderDone();\n    }\n    // Update header range on horizontal scroll. No need to draw any tasks, Gantt only cares about vertical scroll\n    updateFromHorizontalScroll(scrollX) {\n        const\n            me            = this,\n            { gantt }     = me,\n            {\n                timeAxisSubGrid,\n                timeAxis,\n                rtl\n            }             = gantt,\n            { width }     = timeAxisSubGrid,\n            { totalSize } = gantt.timeAxisViewModel,\n            start         = scrollX,\n            // If there are few pixels left from the right most position then just render all remaining ticks,\n            // there wouldn't be many. It makes end date reachable with more page zoom levels while not having any poor\n            // implications.\n            // 5px to make TimeViewRangePageZoom test stable in puppeteer.\n            returnEnd     = timeAxisSubGrid.scrollable.maxX !== 0 && Math.abs(timeAxisSubGrid.scrollable.maxX) <= Math.round(start) + 5,\n            startDate     = gantt.getDateFromCoord({ coord : Math.max(0, start), ignoreRTL : true }),\n            endDate       = returnEnd ? timeAxis.endDate : (gantt.getDateFromCoord({ coord : start + width, ignoreRTL : true }) || timeAxis.endDate);\n        if (startDate && !gantt._viewPresetChanging) {\n            me._visibleDateRange = { startDate, endDate, startMS : startDate.getTime(), endMS : endDate.getTime() };\n            me.viewportCoords  = rtl\n                // RTL starts all the way to the right (and goes in opposite direction)\n                ? { left : totalSize - scrollX - width, right : totalSize - scrollX }\n                // LTR all the way to the left\n                : { left : scrollX, right : scrollX + width };\n            // Update timeaxis header making it display the new dates\n            const range = gantt.timeView.range = { startDate, endDate };\n            gantt.internalOnVisibleDateRangeChange(range);\n        }\n    }\n    internalPopulateTaskRenderData(renderData, taskRecord) {\n        const\n            { gantt }   = this,\n            taskContent = {\n                className : 'b-gantt-task-content',\n                dataset   : {\n                    taskBarFeature : 'content'\n                },\n                children : []\n            };\n        if (renderData) {\n            let resizable = (taskRecord.isResizable === undefined ? true : taskRecord.isResizable);\n            if (renderData.startsOutsideView) {\n                if (resizable === true) {\n                    resizable = 'end';\n                }\n                else if (resizable === 'start') {\n                    resizable = false;\n                }\n            }\n            if (renderData.endsOutsideView) {\n                if (resizable === true) {\n                    resizable = 'start';\n                }\n                else if (resizable === 'end') {\n                    resizable = false;\n                }\n            }\n            Object.assign(renderData, {\n                iconCls    : new DomClassList(taskRecord.taskIconCls),\n                id         : gantt.getEventRenderId(taskRecord),\n                style      : taskRecord.style || '',\n                taskId     : taskRecord.id,\n                // Classes for the wrapping div\n                wrapperCls : new DomClassList({\n                    [gantt.eventCls + '-wrap']   : 1,\n                    [`${gantt.eventCls}-parent`] : taskRecord.isParent,\n                    'b-milestone-wrap'           : taskRecord.milestone,\n                    'b-inactive'                 : taskRecord.inactive,\n                    'b-expanded'                 : taskRecord.isExpanded(gantt.store),\n                    'b-readonly'                 : taskRecord.readOnly,\n                    'b-linked'                   : taskRecord.isLinked,\n                    'b-original'                 : taskRecord.hasLinks,\n                    'b-temporary'                : !taskRecord.project\n                }),\n                // Task record cls property is now a DomClassList, so clone it\n                // so that it can be manipulated here and by renderers.\n                cls          : taskRecord.isResourceTimeRange ? new DomClassList() : taskRecord.cls.clone(),\n                // Extra DOMConfigs to add to the tasks row, for example for indicators\n                extraConfigs : []\n            });\n            // Gather event element classes as keys to add to the renderData.cls DomClassList.\n            // Truthy value means the key will be added as a class name.\n            Object.assign(renderData.cls, {\n                [gantt.eventCls]                       : 1,\n                [gantt.generatedIdCls]                 : taskRecord.hasGeneratedId,\n                [gantt.dirtyCls]                       : taskRecord.modifications,\n                [gantt.committingCls]                  : taskRecord.isCommitting,\n                [gantt.endsOutsideViewCls]             : renderData.endsOutsideView,\n                [gantt.startsOutsideViewCls]           : renderData.startsOutsideView,\n                [gantt.fixedEventCls]                  : taskRecord.isDraggable === false,\n                [`b-sch-event-resizable-${resizable}`] : 1,\n                'b-milestone'                          : taskRecord.milestone,\n                // 'b-critical'                           : taskRecord.critical,\n                'b-task-started'                       : taskRecord.isStarted,\n                'b-task-finished'                      : taskRecord.isCompleted,\n                'b-task-selected'                      : gantt.selectedRecords.includes(taskRecord)\n            });\n            const\n                eventStyle = taskRecord.eventStyle || gantt.eventStyle,\n                eventColor = taskRecord.eventColor || gantt.eventColor;\n            renderData.eventColor = eventColor;\n            renderData.eventStyle = eventStyle;\n            if (gantt.taskRenderer) {\n                // User has specified a renderer fn, either to return a simple string, or an object\n                const value = gantt.taskRenderer.call(gantt.taskRendererThisObj || gantt, {\n                    taskRecord,\n                    renderData\n                });\n                // If the user's renderer coerced it into a string, recreate a DomClassList.\n                if (typeof renderData.cls === 'string') {\n                    renderData.cls = new DomClassList(renderData.cls);\n                }\n                // Same goes for iconCls\n                if (typeof renderData.iconCls === 'string') {\n                    renderData.iconCls = new DomClassList(renderData.iconCls);\n                }\n                if (typeof renderData.wrapperCls === 'string') {\n                    renderData.wrapperCls = new DomClassList(renderData.wrapperCls);\n                }\n                let childContent = null;\n                // Likely HTML content\n                if (StringHelper.isHtml(value)) {\n                    childContent = {\n                        tag  : 'span',\n                        html : value\n                    };\n                }\n                // DOM config or plain string can be used as is\n                else if (typeof value === 'string' || typeof value === 'object') {\n                    childContent = value;\n                }\n                // Other, use string\n                else if (value != null) {\n                    childContent = String(value);\n                }\n                if (childContent) {\n                    if (Array.isArray(childContent)) {\n                        taskContent.children.push(...childContent);\n                    }\n                    else {\n                        taskContent.children.push(childContent);\n                    }\n                    renderData.cls.add('b-has-content');\n                }\n            }\n            // If there are any iconCls entries...\n            renderData.cls['b-sch-event-withicon'] = renderData.iconCls.length;\n            // renderers have last say on style & color\n            renderData.wrapperCls[`b-sch-style-${renderData.eventStyle}`] = renderData.eventStyle;\n            if (DomHelper.isNamedColor(renderData.eventColor)) {\n                renderData.wrapperCls[`b-sch-color-${renderData.eventColor}`] = renderData.eventColor;\n            }\n            else if (renderData.eventColor) {\n                const style = `background-color:${renderData.eventColor};`;\n                renderData.style = style + renderData.style;\n                renderData.wrapperCls['b-sch-custom-color'] = 1;\n                renderData._customColorStyle = style;\n            }\n            else {\n                renderData.wrapperCls['b-sch-color-none'] = 1;\n            }\n            // Milestones has to apply styling to b-sch-task-content\n            if (renderData.style && taskRecord.isMilestone && taskContent) {\n                taskContent.style = renderData.style;\n                delete renderData.style;\n            }\n            if (renderData.iconCls?.length) {\n                taskContent.children.unshift({\n                    tag       : 'i',\n                    className : renderData.iconCls\n                });\n            }\n            // if we have some children collected or it's a milestone (milestone styling needs content element presence)\n            if (taskContent.children.length || taskRecord.milestone) {\n                renderData.children.push(taskContent);\n            }\n        }\n        renderData.taskContent = taskContent;\n        renderData.wrapperChildren = [];\n    }\n    populateTaskRenderData(renderData, taskRecord) {\n        this.internalPopulateTaskRenderData(...arguments);\n        // Method which features may chain in to\n        this.gantt.onTaskDataGenerated(renderData);\n    }\n    // This method is a single entry point to get complete render data for the task\n    getTaskRenderData(row, taskRecord) {\n        const\n            me        = this,\n            { gantt } = me,\n            { start } = gantt.resourceMarginObject,\n            box       = me.getTaskBox(taskRecord, false, false, row),\n            data      = {\n                taskRecord,\n                task     : taskRecord,\n                row,\n                children : []\n            };\n        if (box) {\n            Object.assign(data, {\n                isTask : true,\n                top    : box.top,\n                left   : box.left,\n                width  : box.width,\n                height : box.height\n            });\n        }\n        else {\n            // Calculate top position, used by Baselines feature to position its elements\n            data.top = row.top + start;\n        }\n        me.populateTaskRenderData(data, taskRecord);\n        return data;\n    }\n    // This method generates DOM config from the render data\n    getTaskDOMConfig(data) {\n        return {\n            className : data.wrapperCls,\n            tabIndex  : '0',\n            children  : [\n                {\n                    className : data.cls,\n                    style     : (data.internalStyle || '') + (data.style || ''),\n                    children  : data.children,\n                    dataset   : {\n                        // Each feature putting contents in the task wrap should have this to simplify syncing and\n                        // element retrieval after sync\n                        taskFeature : 'task'\n                    },\n                    syncOptions : {\n                        syncIdField : 'taskBarFeature'\n                    }\n                },\n                ...data.wrapperChildren\n            ],\n            style : {\n                top    : data.top,\n                left   : data.left - (this.gantt.rtl ? data.width : 0),\n                // DomHelper appends px to dimensions when using numbers\n                width  : data.width,\n                zIndex : data.zIndex\n            },\n            dataset : {\n                taskId : data.taskId\n            },\n            // Will not be part of DOM, but attached to the element\n            elementData : data,\n            // Options for this level of sync, lower levels can have their own\n            syncOptions : {\n                syncIdField      : 'taskFeature',\n                // Remove instead of release when a feature is disabled\n                releaseThreshold : 0\n            }\n        };\n    }\n    // Called per row in \"view\", collect configs\n    renderer({ row, record : taskRecord }) {\n        const\n            me   = this,\n            data = me.getTaskRenderData(row, taskRecord);\n        let config;\n        if (data.isTask) {\n            config = me.getTaskDOMConfig(data);\n            me.gantt.trigger('beforeRenderTask', { renderData : data, domConfig : config });\n        }\n        else if (data.extraConfigs.length === 0) {\n            me.rowMap.delete(row);\n            return;\n        }\n        // Store DOM configs\n        me.rowMap.set(row, [config, ...data.extraConfigs]);\n    }\n    // Called when the current row rendering \"pass\" is complete, sync collected configs to DOM\n    onRenderDone() {\n        const\n            { gantt } = this,\n            configs   = Array.from(this.rowMap.values()).flat();\n        // Give features a chance to inject or manipulate task configs\n        gantt.onBeforeTaskSync(configs);\n        DomSync.sync({\n            domConfig : {\n                onlyChildren : true,\n                children     : configs\n            },\n            targetElement : gantt.foregroundCanvas,\n            syncIdField   : 'taskId',\n            // Called by DomHelper when it creates, releases or reuses elements\n            callback({ action, domConfig, lastDomConfig, targetElement : element }) {\n                // If element is a task wrap, trigger appropriate events\n                if (action !== 'none' && domConfig && domConfig.className && domConfig.className[gantt.eventCls + '-wrap']) {\n                    const\n                        // Some actions are considered first a release and then a render (reusing another element).\n                        // This gives clients code a chance to clean up before reusing an element\n                        isRelease = releaseEventActions[action],\n                        isRender  = renderEventActions[action];\n                    // If we are reusing an element that was previously released we should not trigger again\n                    if (isRelease && lastDomConfig?.elementData?.isTask) {\n                        const\n                            event = {\n                                renderData : lastDomConfig.elementData,\n                                taskRecord : lastDomConfig.elementData.taskRecord,\n                                element\n                            };\n                        // This event is documented on Gantt\n                        gantt.trigger('releaseTask', event);\n                    }\n                    // Trigger only for actual tasks, not indicators or baselines\n                    if (isRender && domConfig?.elementData?.isTask) {\n                        const\n                            event = {\n                                renderData     : domConfig.elementData,\n                                taskRecord     : domConfig.elementData.taskRecord,\n                                reusingElement : action === 'reuseElement',\n                                element\n                            };\n                        // This event is documented on Gantt\n                        gantt.trigger('renderTask', event);\n                    }\n                }\n            }\n        });\n    }\n    // Redraws a single task by rerendering its cell\n    redraw(taskRecord) {\n        // Refresh cell, will call `renderer` above and update its DOM config\n        if (this.gantt.rowManager.refreshCell(taskRecord, this.gantt.timeAxisColumn.id)) {\n            // Update DOM\n            this.onRenderDone();\n        }\n    }\n    //endregion\n}\nNewTaskRendering._$name = 'NewTaskRendering';", "import TimelineBase from '../../Scheduler/view/TimelineBase.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport VersionHelper from '../../Core/helper/VersionHelper.js';\nimport NewTaskRendering from './orientation/NewTaskRendering.js';\nimport CrudManagerView from '../../Scheduler/crud/mixin/CrudManagerView.js';\nimport CurrentConfig from '../../Scheduler/view/mixin/CurrentConfig.js';\nimport TransactionalFeatureMixin from '../../Scheduler/view/mixin/TransactionalFeatureMixin.js';\nimport ProjectProgressMixin from '../../SchedulerPro/view/mixin/ProjectProgressMixin.js';\nimport GanttDom from './mixin/GanttDom.js';\nimport GanttRegions from './mixin/GanttRegions.js';\nimport GanttScroll from './mixin/GanttScroll.js';\nimport GanttState from './mixin/GanttState.js';\nimport GanttStores from './mixin/GanttStores.js';\nimport GanttTimelineDateMapper from './mixin/GanttTimelineDateMapper.js';\nimport TaskNavigation from './mixin/TaskNavigation.js';\nimport EventNavigation from '../../Scheduler/view/mixin/EventNavigation.js';\nimport '../localization/En.js';\nimport '../../Gantt/column/TimeAxisColumn.js';\n// Always required features\nimport '../../Grid/feature/Tree.js';\nimport '../../Scheduler/feature/RowReorder.js';\nimport '../feature/Dependencies.js';\nimport NameColumn from '../column/NameColumn.js';\nimport { DependencyType } from '../../Engine/scheduling/Types.js';\nimport Column from '../../Grid/column/Column.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\nimport Toast from '../../Core/widget/Toast.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport DomSync from '../../Core/helper/DomSync.js';\nimport SchedulingIssueResolution from '../../SchedulerPro/view/mixin/SchedulingIssueResolution.js';\n/**\n * @module Gantt/view/GanttBase\n */\nconst emptyObject = Object.freeze({});\nlet newTaskCount = 0;\n/**\n * A thin base class for {@link Gantt/view/Gantt}. Does not include any features by default, allowing smaller\n * custom-built bundles if used in place of {@link Gantt/view/Gantt}.\n *\n * @mixes Gantt/view/mixin/GanttDom\n * @mixes Gantt/view/mixin/GanttRegions\n * @mixes Gantt/view/mixin/GanttScroll\n * @mixes Gantt/view/mixin/GanttState\n * @mixes Gantt/view/mixin/GanttStores\n * @mixes Scheduler/crud/mixin/CrudManagerView\n * @mixes Scheduler/view/mixin/EventNavigation\n * @mixes Scheduler/view/mixin/TransactionalFeatureMixin\n * @mixes Gantt/view/mixin/TaskNavigation\n * @mixes SchedulerPro/view/mixin/ProjectProgressMixin\n * @mixes SchedulerPro/view/mixin/SchedulingIssueResolution\n *\n * @features Scheduler/feature/ColumnLines\n * @features Scheduler/feature/EventFilter\n * @features Scheduler/feature/HeaderZoom\n * @features Scheduler/feature/Labels\n * @features Scheduler/feature/NonWorkingTime\n * @features Scheduler/feature/Pan\n * @features Scheduler/feature/RowReorder\n * @features Scheduler/feature/ScheduleMenu\n * @features Scheduler/feature/ScheduleTooltip\n * @features Scheduler/feature/Summary\n * @features Scheduler/feature/TimeAxisHeaderMenu\n * @features Scheduler/feature/TimeRanges\n *\n * @features SchedulerPro/feature/PercentBar\n * @features SchedulerPro/feature/DependencyEdit\n * @features SchedulerPro/feature/EventSegments\n * @features SchedulerPro/feature/TimeSpanHighlight\n *\n * @features Gantt/feature/Baselines\n * @features Gantt/feature/CellEdit\n * @features Gantt/feature/CriticalPaths\n * @features Gantt/feature/Dependencies\n * @features Gantt/feature/Indicators\n * @features Gantt/feature/Labels\n * @features Gantt/feature/ParentArea\n * @features Gantt/feature/ProgressLine\n * @features Gantt/feature/ProjectLines\n * @features Gantt/feature/Rollups\n * @features Gantt/feature/ScrollButtons\n * @features Gantt/feature/Summary\n * @features Gantt/feature/TaskCopyPaste\n * @features Gantt/feature/TaskDrag\n * @features Gantt/feature/TaskDragCreate\n * @features Gantt/feature/TaskEdit\n * @features Gantt/feature/TaskMenu\n * @features Gantt/feature/TaskNonWorkingTime\n * @features Gantt/feature/TaskResize\n * @features Gantt/feature/TaskSegmentDrag\n * @features Gantt/feature/TaskSegmentResize\n * @features Gantt/feature/TaskTooltip\n * @features Gantt/feature/TreeGroup\n * @features Gantt/feature/Versions\n *\n * @features Gantt/feature/export/MspExport\n * @features Gantt/feature/export/PdfExport\n * @features Gantt/feature/export/Print\n *\n * @extends Scheduler/view/TimelineBase\n * @widget\n */\nexport default class GanttBase extends TimelineBase.mixin(\n    CrudManagerView,\n    GanttDom,\n    GanttRegions,\n    GanttScroll,\n    GanttStores,\n    GanttState,\n    GanttTimelineDateMapper,\n    EventNavigation,\n    TaskNavigation,\n    ProjectProgressMixin,\n    SchedulingIssueResolution,\n    TransactionalFeatureMixin,\n    CurrentConfig\n) {\n    //region Task interaction events\n    /**\n     * Triggered after a mousedown on a task bar.\n     * @event taskMouseDown\n     * @param {Gantt.view.Gantt} source The Gantt instance\n     * @param {Gantt.model.TaskModel} taskRecord The Task record\n     * @param {MouseEvent} event The native browser event\n     */\n    /**\n     * Triggered after a mouseup on a task bar.\n     * @event taskMouseUp\n     * @param {Gantt.view.Gantt} source The Gantt instance\n     * @param {Gantt.model.TaskModel} taskRecord The Task record\n     * @param {MouseEvent} event The native browser event\n     */\n    /**\n     * Triggered after a click on a task bar.\n     * @event taskClick\n     * @param {Gantt.view.Gantt} source The Gantt instance\n     * @param {Gantt.model.TaskModel} taskRecord The Task record\n     * @param {MouseEvent} event The native browser event\n     */\n    /**\n     * Triggered after a doubleclick on a task.\n     * @event taskDblClick\n     * @param {Gantt.view.Gantt} source The Gantt instance\n     * @param {Gantt.model.TaskModel} taskRecord The Task record\n     * @param {MouseEvent} event The native browser event\n     */\n    /**\n     * Triggered after a rightclick (or long press on a touch device) on a task.\n     * @event taskContextMenu\n     * @param {Gantt.view.Gantt} source The Gantt instance\n     * @param {Gantt.model.TaskModel} taskRecord The Task record\n     * @param {MouseEvent} event The native browser event\n     */\n    /**\n     * Triggered after a mouseover on a task.\n     * @event taskMouseOver\n     * @param {Gantt.view.Gantt} source The Gantt instance\n     * @param {Gantt.model.TaskModel} taskRecord The Task record\n     * @param {MouseEvent} event The native browser event\n     */\n    /**\n     * Triggered for mouseout from a task.\n     * @event taskMouseOut\n     * @param {Gantt.view.Gantt} source The Gantt instance\n     * @param {Gantt.model.TaskModel} taskRecord The Task record\n     * @param {MouseEvent} event The native browser event\n     */\n    /**\n     * Triggered when a keydown event is observed if there are selected tasks.\n     * @event taskKeyDown\n     * @param {Gantt.view.Gantt} source This Gantt\n     * @param {Gantt.model.TaskModel} taskRecord Task record\n     * @param {KeyboardEvent} event Browser event\n     */\n    /**\n     * Triggered when a keyup event is observed if there are selected tasks.\n     * @event taskKeyUp\n     * @param {Gantt.view.Gantt} source This Gantt\n     * @param {Gantt.model.TaskModel} eventRecord Task record\n     * @param {KeyboardEvent} event Browser event\n     */\n    //endregion\n    //region Other events\n    /**\n     * Task is rendered, its element is available in DOM.\n     * @event renderTask\n     * @param {Gantt.view.Gantt} source The Gantt instance\n     * @param {Object} renderData Task render data\n     * @param {Gantt.model.TaskModel} taskRecord Rendered task\n     * @param {HTMLElement} element Task element\n     */\n    /**\n     * Task is released, no longer in view/removed. A good spot for cleaning custom things added in a `renderTask`\n     * listener up, if needed.\n     * @event releaseTask\n     * @param {Gantt.view.Gantt} source The Gantt instance\n     * @param {Object} renderData Task render data\n     * @param {Gantt.model.TaskModel} taskRecord Rendered task\n     * @param {HTMLElement} element Task element\n     */\n    //endregion\n    // For documentation & typings purposes\n    /**\n     * Returns the dependency record for a DOM element\n     *\n     * *NOTE: Only available when the {@link Gantt/feature/Dependencies Dependencies} feature is enabled.*\n     *\n     * @function resolveDependencyRecord\n     * @param {HTMLElement} element The dependency line element\n     * @returns {Gantt.model.DependencyModel} The dependency record\n     * @category Feature shortcuts\n     */\n    //endregion\n    //region Config\n    static $name = 'GanttBase';\n    // Factoryable type name\n    static get type() {\n        return 'ganttbase';\n    }\n    static get defaultConfig() {\n        return {\n            /**\n             * Configure as `true` to make the Gantt read-only, by disabling any UIs for modifying data.\n             *\n             * __Note that checks MUST always also be applied at the server side.__\n             * @prp {Boolean} readOnly\n             * @default false\n             * @category Common\n             */\n            /**\n             * The {@link Gantt.model.ProjectModel} instance containing the data visualized by the Gantt chart.\n             * @member {Gantt.model.ProjectModel} project\n             * @category Data\n             */\n            /**\n             * A {@link Gantt.model.ProjectModel} instance or a config object. The project holds all Gantt data.\n             * @config {Gantt.model.ProjectModel|ProjectModelConfig}\n             * @category Data\n             */\n            project : null,\n            /**\n             * The path for resource images, used by various widgets such as the resource assignment column.\n             * @config {String}\n             * @category Common\n             */\n            resourceImageFolderPath : null,\n            /**\n             * The file name of an image file to use when a resource has no image, or its image cannot be loaded.\n             * @config {String}\n             * @category Common\n             */\n            defaultResourceImageName : null,\n            /**\n             * True to toggle the collapsed/expanded state when clicking a parent task bar.\n             * @prp {Boolean}\n             * @category Common\n             * @default\n             */\n            toggleParentTasksOnClick : true,\n            /**\n             * True to scroll the task bar into view when clicking a cell, you can also pass a\n             * {@link #function-scrollTaskIntoView scroll config} object.\n             * @prp {Boolean|BryntumScrollOptions}\n             * @category Common\n             * @default false\n             */\n            scrollTaskIntoViewOnCellClick : null,\n            // data for the stores, in the topological order\n            calendars    : null,\n            resources    : null,\n            tasks        : null,\n            dependencies : null,\n            assignments  : null,\n            eventCls                : 'b-gantt-task',\n            eventBarTextField       : null,\n            eventLayout             : 'none',\n            eventSelectionDisable   : true,\n            /**\n             * Task color used by default. Tasks can specify their own {@link Gantt.model.TaskModel#field-eventColor},\n             * which will override this config.\n             *\n             * For available standard colors, see\n             * {@link Scheduler/model/mixin/EventModelMixin#typedef-EventColor}.\n             *\n             * @prp {EventColor} eventColor\n             * @category Scheduled events\n             */\n            eventColor              : null,\n            eventStyle              : null,\n            rowHeight               : 45,\n            scheduledEventName      : 'task',\n            eventScrollMode         : 'move',\n            overScheduledEventClass : 'b-gantt-task-hover',\n            mode                    : 'horizontal',\n            fixedRowHeight          : true,\n            timeCellCls : 'b-sch-timeaxis-cell',\n            focusCls : 'b-active',\n            /**\n             * An empty function by default, but provided so that you can override it. This function is called each time\n             * a task is rendered into the gantt to render the contents of the task.\n             *\n             * Returning a string will display it in the task bar, it accepts both plain text or HTML. It is also\n             * possible to return a DOM config object which will be synced to the task bars content.\n             *\n             * ```javascript\n             * // using plain string\n             * new Gantt({\n             *    taskRenderer : ({ taskRecord }) => StringHelper.encodeHtml(taskRecord.name)\n             * });\n             *\n             * // using html string\n             * new Gantt({\n             *    taskRenderer : ({ taskRecord }) => StringHelper.xss`${taskRecord.id} <b>${taskRecord.name}</b>`\n             * });\n             *\n             * // using DOM config\n             * new Gantt({\n             *    taskRenderer({ taskRecord }) {\n             *       return {\n             *           tag  : 'b',\n             *           html : StringHelper.encodeHtml(taskRecord.name)\n             *       }\n             *    }\n             * });\n             * ```\n             *\n             * @param {Object} detail An object containing the information needed to render a Task.\n             * @param {Gantt.model.TaskModel} detail.taskRecord The task record.\n             * @param {Object} detail.renderData An object containing details about the task rendering.\n             * @param {Core.helper.util.DomClassList|String} detail.renderData.cls An object whose property names represent the CSS class names\n             * to be added to the tasks's element. Set a property's value to truthy or falsy to add or remove the class\n             * name based on the property name. Using this technique, you do not have to know whether the class is already\n             * there, or deal with concatenation.\n             * @param {String|Object<String,String>} detail.renderData.style Inline styles for the task bar DOM element. Use either\n             * 'border: 1px solid black' or { border: '1px solid black' }\n             * @param {Core.helper.util.DomClassList|String} detail.renderData.wrapperCls An object whose property names represent the CSS class names\n             * to be added to the event wrapper element. Set a property's value to truthy or falsy to add or remove the class\n             * name based on the property name. Using this technique, you do not have to know whether the class is already\n             * there, or deal with concatenation.\n             * @param {Core.helper.util.DomClassList|String} detail.renderData.iconCls An object whose property names represent the CSS class\n             * names to be added to a task icon element.\n             * @param {Scheduler.model.TimeSpan[]|TimeSpanConfig[]} indicators An array that can be populated with\n             * TimeSpan records or their config objects to have them rendered in the task row\n             * @returns {String|DomConfig|DomConfig[]} A simple string, or a DomConfig object defining the actual HTML\n             * @config {Function}\n             * @category Scheduled events\n             */\n            taskRenderer : null,\n            /**\n             * A callback function or a set of `name: value` properties to apply on tasks created using the task context menu.\n             * Be aware that `name` value will be ignored since it's auto generated and may be configured with localization.\n             *\n             * Example:\n             * ```javascript\n             * // Object form:\n             * newTaskDefaults : {\n             *    duration          : 3,\n             *    manuallyScheduled : true,\n             *    percentDone       : 15\n             * }\n             * ```\n             *\n             * ```javascript\n             * // Function form:\n             * newTaskDefaults : (targetRecord) => {\n             *    return {\n             *        duration          : targetRecord.duration,\n             *        manuallyScheduled : targetRecord.manuallyScheduled\n             *    }\n             * }\n             * ```\n             * @config {Gantt.model.TaskModelConfig|Object|Function}\n             * @parameter {Gantt.model.TaskModel} task Reference task\n             * @returns {Gantt.model.TaskModelConfig|Object} Set of properties to apply on tasks created using the task context menu\n             */\n            newTaskDefaults : {},\n            /**\n             * A task field (id, wbsCode, sequenceNumber etc) that will be used when displaying and editing linked tasks.\n             * @config {String} dependencyIdField\n             * @default 'id'\n             * @category Common\n             */\n            dependencyIdField : 'id',\n            /**\n             * Returns dates that will constrain resize and drag operations. The method will be called with the\n             * task being dragged.\n             * @param {Gantt.model.TaskModel} taskRecord The task record being moved or resized.\n             * @returns {Object} Constraining object containing `start` and `end` constraints. Omitting either\n             * will mean that end is not constrained. So you can prevent a resize or move from moving *before*\n             * a certain time while not constraining the end date.\n             * @returns {Date} [return.start] Start date\n             * @returns {Date} [return.end] End date\n             * @config {Function}\n             * @category Scheduled events\n             */\n            getDateConstraints : null,\n            /**\n             * If set to `true` this will show a color field in the {@link Gantt.feature.TaskEdit} editor and also a\n             * picker in the {@link Gantt.feature.TaskMenu}. Both enables the user to choose a color which will be\n             * applied to the task bar's background. See TaskModel's {@link Gantt.model.TaskModel#field-eventColor}\n             * config.\n             * @config {Boolean}\n             * @default false\n             * @category Misc\n             */\n            showTaskColorPickers : null\n        };\n    }\n    static configurable = {\n        /**\n         * See {@link Gantt.view.Gantt#keyboard-shortcuts Keyboard shortcuts} for details\n         * @config {Object<String,String>} keyMap\n         * @category Common\n         */\n        keyMap : {\n            'Alt+Shift+ArrowLeft'  : 'outdent',\n            'Alt+Shift+ArrowRight' : 'indent'\n        }\n    };\n    static bindStoreChangeset = false;\n    timeCellSelector = '.b-sch-timeaxis-cell';\n    get isGantt() {\n        return true;\n    }\n    //endregion\n    //region Init\n    construct(config = {}) {\n        const\n            me              = this,\n            hasInlineStores = Boolean(config.calendars || config.taskStore || config.dependencyStore || config.resourceStore || config.assignmentStore),\n            hasInlineData   = Boolean(config.calendars || config.tasks || config.dependencies || config.resources || config.assignments);\n        if (!config.features) {\n            const defaults = me.getDefaultConfiguration().features;\n            config.features = defaults && typeof defaults === 'object' ? defaults : {};\n        }\n        // gantt is always a tree\n        if (!('tree' in config.features)) {\n            config.features.tree = true;\n        }\n        // disable group feature by default\n        if (!('group' in config.features)) {\n            config.features.group = false;\n        }\n        const { project } = config;\n        if (project && (hasInlineStores || hasInlineData)) {\n            throw new Error('Providing both project and inline data is not supported');\n        }\n        // gather all data in the ProjectModel instance\n        if (!project?.isModel) {\n            config.project = ObjectHelper.assign({\n                calendarsData    : config.calendars,\n                eventsData       : config.tasks,\n                dependenciesData : config.dependencies,\n                resourcesData    : config.resources,\n                assignmentsData  : config.assignments,\n                resourceStore   : config.resourceStore,\n                eventStore      : config.taskStore,\n                assignmentStore : config.assignmentStore,\n                dependencyStore : config.dependencyStore,\n                timeRangeStore  : config.timeRangeStore\n            }, project);\n            delete config.resourceStore;\n            delete config.taskStore;\n            delete config.assignmentStore;\n            delete config.dependencyStore;\n            delete config.timeRangeStore;\n            delete config.calendars;\n            delete config.resources;\n            delete config.tasks;\n            delete config.assignments;\n            delete config.dependencies;\n        }\n        // EOF data gathering\n        super.construct(config);\n        me.ion({\n            taskclick  : 'onTaskBarClick',\n            cellClick  : 'onNonTimeAxisCellClick',\n            toggleNode : 'onToggleParentNode'\n        });\n    }\n    changeColumns(columns, currentStore) {\n        if (columns) {\n            let cols = columns;\n            if (!Array.isArray(columns)) {\n                cols = columns.data;\n                // Need to pull the taskstore in, to make sure any fields added by columns are added to it\n                this._thisIsAUsedExpression(this.taskStore);\n            }\n            // Always include the name column\n            if (!cols.some(column => {\n                const constructor = column instanceof Column ? column.constructor : ColumnStore.getColumnClass(column.type) || Column;\n                return constructor === NameColumn || constructor.prototype instanceof NameColumn;\n            })) {\n                cols.unshift({\n                    type : 'name'\n                });\n            }\n        }\n        return super.changeColumns(columns, currentStore);\n    }\n    // Overrides TimelineBase to supply taskStore as its store (which is only used in passed events)\n    set timeAxisViewModel(timeAxisViewModel) {\n        super.timeAxisViewModel = timeAxisViewModel;\n        if (this.store) {\n            this.timeAxisViewModel.store = this.store;\n        }\n    }\n    get timeAxisViewModel() {\n        return super.timeAxisViewModel;\n    }\n    //endregion\n    //region Overrides\n    onPaintOverride() {\n        // Internal procedure used for paint method overrides\n        // Not used in onInternalPaint() because it may be chained on instance and Override won't be applied\n    }\n    //endregion\n    //region Events\n    resumeRefresh(trigger) {\n        super.resumeRefresh(false);\n        if (!this.refreshSuspended && trigger && this.isPainted) {\n            if (!this.rowManager.topRow) {\n                this.rowManager.reinitialize();\n            }\n            else {\n                this.refreshWithTransition();\n            }\n        }\n    }\n    // Overriding grids behaviour to ignore individual updates caused by propagation\n    onStoreUpdateRecord(params) {\n        if (!this.project.isChangeTrackingSuspended) {\n            let result;\n            this.runWithTransition(() => {\n                result = super.onStoreUpdateRecord(params);\n            }, !this.refreshSuspended);\n            return result;\n        }\n    }\n    // Transition batch changes\n    onStoreDataChange(params) {\n        this.runWithTransition(() => {\n            super.onStoreDataChange(params);\n        }, params.action === 'batch');\n    }\n    // Features can hook into this to add to generated task data\n    onTaskDataGenerated() {}\n    // Features can hook into this to manipulate visible task configs before they are DomSynced\n    onBeforeTaskSync() {}\n    onTaskBarClick({ taskRecord }) {\n        if (this.toggleParentTasksOnClick && !taskRecord.isLeaf) {\n            this.toggleCollapse(taskRecord);\n        }\n    }\n    onNonTimeAxisCellClick({ record, column }) {\n        const { scrollTaskIntoViewOnCellClick } = this;\n        if (column.type !== 'timeAxis' && scrollTaskIntoViewOnCellClick && record.isScheduled) {\n            this.scrollTaskIntoView(record, scrollTaskIntoViewOnCellClick === true\n                ? { animate : true, block : 'center', y : false }\n                : scrollTaskIntoViewOnCellClick\n            );\n        }\n    }\n    onToggleParentNode({ record }) {\n        // Repaint parent node on collapse / expand (unless in a collapsed parent, happens on collapse all)\n        record.parent.isExpanded(this.taskStore) && this.taskRendering.redraw(record);\n    }\n    // Grid row selection change\n    afterSelectionChange({ selectedRecords, deselectedRecords }) {\n        const me = this;\n        function setTaskSelection(record, selected) {\n            const taskElement = me.getElementFromTaskRecord(record);\n            if (taskElement) {\n                DomSync[selected ? 'addCls' : 'removeCls']('b-task-selected', taskElement);\n            }\n        }\n        selectedRecords?.map(record => setTaskSelection(record, true));\n        deselectedRecords?.map(record => setTaskSelection(record, false));\n    }\n    //endregion\n    //region TimelineBase implementations\n    // Overrides grid to take project loading into account\n    toggleEmptyText() {\n        const\n            me = this;\n        if (me.bodyContainer && me.rowManager) {\n            DomHelper.toggleClasses(me.bodyContainer, 'b-grid-empty', !(me.rowManager.rowCount || me.project.isLoadingOrSyncing));\n        }\n    }\n    // Gantt only has one orientation, but TimelineBase expects this to work to call correct rendering code\n    get currentOrientation() {\n        const me = this;\n        if (!me._currentOrientation) {\n            //me.taskRendering = me._currentOrientation = new TaskRendering(me);\n            me.taskRendering = me._currentOrientation = new NewTaskRendering(me);\n        }\n        return me._currentOrientation;\n    }\n    getTimeSpanMouseEventParams(taskElement, event) {\n        const taskRecord = this.resolveTaskRecord(taskElement);\n        return !taskRecord ? null : {\n            taskRecord,\n            taskElement,\n            event\n        };\n    }\n    getScheduleMouseEventParams(cellData) {\n        return {\n            taskRecord : this.store.getById(cellData.id)\n        };\n    }\n    // Used by shared features to resolve an event or task\n    resolveTimeSpanRecord(element) {\n        return this.resolveTaskRecord(element);\n    }\n    repaintEventsForResource(taskRecord) {\n        this.taskRendering.redraw(taskRecord);\n    }\n    // Used by the dependencies feature to keep it orientation (vertical, horizontal) independent\n    get visibleResources() {\n        return {\n            first : this.store.getById(this.firstVisibleRow?.id),\n            last  : this.store.getById(this.lastVisibleRow?.id)\n        };\n    }\n    //endregion\n    //region Feature hooks\n    /**\n     * Populates the task context menu. Chained in features to add menu items.\n     * @param {Object} options Contains menu items and extra data retrieved from the menu target.\n     * @param {Grid.column.Column} options.column Column for which the menu will be shown.\n     * @param {Gantt.model.TaskModel} options.taskRecord The reference task record\n     * @param {Scheduler.model.ResourceModel} options.resourceRecord The context resource.\n     * @param {Scheduler.model.AssignmentModel} options.assignmentRecord The context assignment if any.\n     * @param {Object<String,MenuItemConfig>} options.items A named object to describe menu items.\n     * @internal\n     */\n    populateTaskMenu() {}\n    //endregion\n    // region ContextMenu API\n    async addTask(referenceTask, options = emptyObject) {\n        const\n            me = this,\n            {\n                milestone,\n                asPredecessor,\n                asSuccessor\n            } = options,\n            project   = me.project,\n            parent    = referenceTask.parent,\n            defaults  = typeof me.newTaskDefaults == 'function' ? me.newTaskDefaults(referenceTask) : me.newTaskDefaults,\n            newRecord = me.taskStore.modelClass.new({\n                // use reference task values only if not provided in newTaskDefaults\n                startDate    : referenceTask.startDate,\n                duration     : referenceTask.duration,\n                durationUnit : referenceTask.durationUnit\n            }, defaults, options.data);\n        /**\n         * Fires when adding a task from the UI to allow data mutation.\n         * @event beforeTaskAdd\n         * @param {Gantt.view.Gantt} source The Gantt instance\n         * @param {Gantt.model.TaskModel} taskRecord The task\n         */\n        me.trigger('beforeTaskAdd', { taskRecord : newRecord });\n        if (!newRecord.name) {\n            newRecord.name = `${me.L(milestone ? 'L{Gantt.New milestone}' : 'L{Gantt.New task}')} ${++newTaskCount}`;\n        }\n        project.suspendChangeTracking();\n        if (options.asChild) {\n            referenceTask.insertChild(newRecord, options.at === 'end' ? null : referenceTask.firstChild);\n        }\n        else if (options.above) {\n            parent.insertChild(newRecord, referenceTask);\n        }\n        else {\n            parent.insertChild(\n                newRecord,\n                referenceTask.nextSibling,\n                false,\n                // https://github.com/bryntum/support/issues/7220\n                me.taskStore.useOrderedTreeForWbs ? { orderedBeforeNode : referenceTask.nextOrderedSibling } : {});\n        }\n        // Do not trigger change check, we've added a new record so project will trigger event anyway\n        project.resumeChangeTracking(true);\n        if (milestone) {\n            await project.commitAsync();\n            await newRecord.convertToMilestone();\n        }\n        else {\n            await project.commitAsync();\n        }\n        // run propagation to handle the new task record\n        // and then add a dependency if needed\n        if (asSuccessor) {\n            me.dependencyStore.add({\n                fromEvent : referenceTask,\n                toEvent   : newRecord,\n                type      : DependencyType.EndToStart,\n                fromSide  : 'right',\n                toSide    : 'left'\n            });\n        }\n        else if (asPredecessor) {\n            me.dependencyStore.add({\n                fromEvent : newRecord,\n                toEvent   : referenceTask,\n                type      : DependencyType.EndToStart,\n                fromSide  : 'right',\n                toSide    : 'left'\n            });\n        }\n        if (asSuccessor || asPredecessor) {\n            // wait for immediate commit to handle the new dependency\n            await project.commitAsync();\n        }\n        return newRecord;\n    }\n    /**\n     * Adds a new task above the passed reference task\n     * @param {Gantt.model.TaskModel} taskRecord The reference task record\n     * @param {Object} [options] Options for creating the new task\n     * @param {TaskModelConfig} [options.data] Data for the new task\n     * @returns {Gantt.model.TaskModel} A promise which yields the added task\n     * @async\n     */\n    addTaskAbove(taskRecord, options) {\n        return this.addTask(taskRecord, { ...options, above : true });\n    }\n    /**\n     * Adds a new task below the passed reference task\n     * @param {Gantt.model.TaskModel} taskRecord The reference task record\n     * @param {Object} [options] Options for creating the new task\n     * @param {TaskModelConfig} [options.data] Data for the new task\n     * @returns {Gantt.model.TaskModel} A promise which yields the added task\n     * @async\n     */\n    addTaskBelow(taskRecord, options) {\n        return this.addTask(taskRecord, options);\n    }\n    /**\n     * Adds a new milestone task below the passed reference task\n     * @param {Gantt.model.TaskModel} taskRecord The reference task record\n     * @param {Object} [options] Options for creating the new milestone\n     * @param {TaskModelConfig} [options.data] Data for the new milestone\n     * @returns {Gantt.model.TaskModel} A promise which yields the added task\n     * @async\n     */\n    addMilestoneBelow(taskRecord, options) {\n        return this.addTask(taskRecord, { ...options, milestone : true });\n    }\n    /**\n     * Adds a new subtask to the passed reference task\n     * @param {Gantt.model.TaskModel} taskRecord The reference task record\n     * @param {Object} [options] Options for creating the new subtask\n     * @param {'start'|'end'} [options.at='start'] Where to insert the new subtask in the parent's children.\n     * @param {TaskModelConfig} [options.data] Data for the new task\n     * @returns {Gantt.model.TaskModel} A promise which yields the added task\n     * @async\n     */\n    addSubtask(taskRecord, options) {\n        const promise = this.addTask(taskRecord, { ...options, asChild : true });\n        this.toggleCollapse(taskRecord, false);\n        return promise;\n    }\n    /**\n     * Adds a successor task to the passed reference task\n     * @param {Gantt.model.TaskModel} taskRecord The reference task record\n     * @param {Object} [options] Options for creating the new task\n     * @param {TaskModelConfig} [options.data] Data for the new task\n     * @returns {Gantt.model.TaskModel} A promise which yields the added task\n     * @async\n     */\n    addSuccessor(taskRecord, options) {\n        return this.addTask(taskRecord, { ...options, asSuccessor : true });\n    }\n    /**\n     * Adds a predecessor task to the passed reference task\n     * @param {Gantt.model.TaskModel} taskRecord The reference task record\n     * @param {Object} [options] Options for creating the new task\n     * @param {TaskModelConfig} [options.data] Data for the new task\n     * @returns {Gantt.model.TaskModel} A promise which yields the added task\n     * @async\n     */\n    addPredecessor(taskRecord, options) {\n        return this.addTask(taskRecord, { ...options, above : true, asPredecessor : true });\n    }\n    /**\n     * Increase the indentation level of one or more tasks in the tree. Has no effect if {@link Gantt.feature.TreeGroup}\n     * has regrouped the tree.\n     * @param {Gantt.model.TaskModel[]|Gantt.model.TaskModel} tasks The task(s) to indent.\n     * @returns {Promise} A promise which resolves if operation is successful\n     */\n    async indent(tasks) {\n        const me = this;\n        if (me.isTreeGrouped) {\n            return;\n        }\n        // If called by keyboard shortcut\n        if (!tasks || tasks instanceof Event) {\n            tasks = me.selectedRecords;\n        }\n        // Might be indenting or outdenting already\n        await this.project.commitAsync();\n        const result = await me.taskStore.indent(tasks);\n        // If `false`, the scheduling engine has found a reason that the operation could not happen.\n        if (!result) {\n            Toast.show({\n                rootElement : me.rootElement,\n                html        : me.L('L{Gantt.changeRejected}')\n            });\n        }\n        return result;\n    }\n    /**\n     * Decrease the indentation level of one or more tasks in the tree. Has no effect if {@link Gantt.feature.TreeGroup}\n     * has regrouped the tree.\n     *\n     * @param {Gantt.model.TaskModel[]|Gantt.model.TaskModel} tasks The task(s) to outdent.\n     * @returns {Promise} A promise which resolves if operation is successful\n     */\n    async outdent(tasks) {\n        const me = this;\n        if (me.isTreeGrouped) {\n            return;\n        }\n        // If called by keyboard shortcut\n        if (!tasks || tasks instanceof Event) {\n            tasks = me.selectedRecords;\n        }\n        // Might be indenting or outdenting already\n        await this.project.commitAsync();\n        const result = await me.taskStore.outdent(tasks);\n        // If `false`, the scheduling engine has found a reason that the operation could not happen.\n        if (!result) {\n            Toast.show({\n                rootElement : me.rootElement,\n                html        : me.L('L{Gantt.changeRejected}')\n            });\n        }\n        return result;\n    }\n    // endregion\n    // the 4 methods below are required since super cannot be called from GanttDom mixin\n    onElementKeyDown(event) {\n        super.onElementKeyDown(event);\n    }\n    onElementKeyUp(event) {\n        super.onElementKeyUp(event);\n    }\n    onElementMouseOver(event) {\n        super.onElementMouseOver(event);\n    }\n    onElementMouseOut(event) {\n        super.onElementMouseOut(event);\n    }\n    onStoreAdd() {\n        DomHelper.addTemporaryClass(this.element, 'b-no-transitions', 200, this);\n        super.onStoreAdd(...arguments);\n    }\n    beforeRenderRow(data) {\n        super.beforeRenderRow(data);\n        data.cls['b-inactive'] = data.record.inactive;\n    }\n}\n// Register this widget type with its Factory\nGanttBase.initClass();\nVersionHelper.setVersion('gantt', '5.6.2');\nGanttBase._$name = 'GanttBase';", "import GanttBase from './GanttBase.js';\n// Based on thin GridBase, need to pull in default Grid features also\nimport '../../Grid/feature/ColumnDragToolbar.js';\nimport '../../Grid/feature/ColumnPicker.js';\nimport '../../Grid/feature/ColumnReorder.js';\nimport '../../Grid/feature/ColumnResize.js';\nimport '../../Grid/feature/CellMenu.js';\nimport '../../Grid/feature/HeaderMenu.js';\nimport '../../Grid/feature/Filter.js';\nimport '../../Grid/feature/FilterBar.js';\nimport '../../Grid/feature/Sort.js';\nimport '../../Grid/feature/Stripe.js';\nimport '../../Grid/column/CheckColumn.js'; // For checkbox selection mode\nimport '../../Grid/feature/RowReorder.js';\nimport '../../Scheduler/feature/ColumnLines.js';\nimport '../../Scheduler/feature/EventFilter.js';\nimport '../../Scheduler/feature/EventMenu.js';\nimport '../../Scheduler/feature/NonWorkingTime.js';\nimport '../../Scheduler/feature/ScheduleMenu.js';\nimport '../../Scheduler/feature/ScheduleTooltip.js';\nimport '../../Scheduler/feature/TimeAxisHeaderMenu.js';\nimport '../../SchedulerPro/feature/PercentBar.js';\nimport '../../SchedulerPro/feature/EventSegments.js';\nimport '../feature/CellEdit.js';\nimport '../feature/CriticalPaths.js';\nimport '../feature/Dependencies.js';\nimport '../feature/TaskCopyPaste.js';\nimport '../feature/TaskDrag.js';\nimport '../feature/TaskDragCreate.js';\nimport '../feature/TaskEdit.js';\nimport '../feature/TaskMenu.js';\nimport '../feature/TaskResize.js';\nimport '../feature/TaskSegmentDrag.js';\nimport '../feature/TaskSegmentResize.js';\nimport '../feature/TaskTooltip.js';\n/**\n * @module Gantt/view/Gantt\n */\n/**\n * <h2>Summary</h2>\n * The <b>Gantt</b> widget is the main component that visualizes the project data contained in a\n * {@link Gantt/model/ProjectModel} instance. The Gantt view is implemented as a TreeGrid consisting of a left section\n * showing the task hierarchy (or WBS) and a right section showing a graphical representation of the tasks on the time\n * axis. Task relationships (or \"dependencies\") are rendered as arrows between the tasks and in the background you can\n * (optionally) render non-working time too.\n *\n * The view is very interactive by default:\n *  * hovering over elements shows informative tooltips\n *  * right-clicking various elements shows context menus\n *  * double-clicking the task name shows an inline editor\n *  * double-clicking a task bar opens a detailed task editor popup\n *  * task bars can be dragged and resized\n *  * task progress can be changed by drag drop\n *  * task dependencies can be created by drag drop\n *\n * The Gantt view is very easy to use and is fully functional with minimal configuration yet\n * it is highly configurable through many configuration options and features.\n *\n * The minimum configuration consists of a {@link #config-project} and {@link Grid/view/Grid#config-columns}.\n * (If you only want to show the \"Name\" column, you can even omit `columns` as it's the default column set.)\n *\n * {@inlineexample Gantt/view/Gantt.js}\n *\n * ## Inheriting from Bryntum Grid\n * Bryntum Gantt inherits from Bryntum Grid, meaning that most features available in the grid are also available\n * for the Gantt component. Common features include columns, cell editing, context menus, row grouping, sorting and more.\n * Note: If you want to use the Grid component standalone, e.g. to use drag-from-grid functionality, you need a separate\n * license for the Grid component.\n *\n * For more information on configuring columns, filtering, search etc. please see the {@link Grid.view.Grid Grid API docs}.\n * <h2>Configuring data for Gantt</h2>\n * The central place for all data visualized in the Gantt chart is the {@link Gantt/model/ProjectModel} instance, passed as the {@link #config-project}\n * configuration option when configuring the Gantt.\n *\n * For details related to the Gantt data structure / updating data / loading and saving data to the server,\n * adding custom fields and other information, please refer to the\n * [Project data guide](#Gantt/guides/data/project_data.md).\n *\n * <h2>Configuring columns</h2>\n * The only mandatory column is the <code>name</code> column which is of type {@link Gantt/column/NameColumn}.\n * It is a tree column that shows the project WBS structure, and allows inline editing of the\n * {@link Gantt/model/TaskModel#field-name} field.\n *\n * The Gantt chart ships with lots of predefined columns (such as {@link Gantt/column/PercentDoneColumn}) but you can of course add your own columns too, showing any additional data in your data model.\n *\n * {@inlineexample Gantt/view/GanttColumns.js}\n *\n * <h2>Advanced configurations</h2>\n * Almost any aspect of Bryntum Gantt can be configured. The included examples cover most of the supported configuration options.\n * To see some of the features in action, please click on the links below:\n *\n *  * [Labels](../examples/labels/)\n *  * [Tooltips](../examples/tooltips)\n *  * [Time Ranges](../examples/timeranges/)\n *  * [Resource Picker](../examples/resourceassignment/)\n *  * [Task Menu](../examples/taskmenu/)\n *  * [Task Editor](../examples/taskeditor/)\n *  * [Undo/Redo](../examples/undoredo/)\n *  * [Advanced](../examples/advanced)\n *\n * {@region Keyboard shortcuts}\n * Gantt has the following default keyboard shortcuts:\n *\n * | Keys                       | Action    | Action description                |\n * |----------------------------|-----------|-----------------------------------|\n * | `Alt`+`Shift`+`ArrowRight` | *indent*  | Indents currently selected tasks  |\n * | `Alt`+`Shift`+`ArrowLeft`  | *outdent* | Outdents currently selected tasks |\n *\n * <div class=\"note\">Please note that <code>Ctrl</code> is the equivalent to <code>Command</code> and <code>Alt</code>\n * is the equivalent to <code>Option</code> for Mac users</div>\n *\n * As Gantt is a subclass of Grid, many of Grid's {@link Grid.view.Grid#keyboard-shortcuts keyboard-shortcuts}\n * works for Gantt as well.\n *\n * For more information on how to customize keyboard shortcuts, please see\n * [our guide](#Gantt/guides/customization/keymap.md).\n * {@endregion}\n *\n * @extends Gantt/view/GanttBase\n * @classtype gantt\n * @widget\n */\nexport default class Gantt extends GanttBase {\n    /**\n     * **This config is not used in the Gantt**\n     * @private\n     * @config {Scheduler.crud.AbstractCrudManagerMixin} crudManagerClass\n     */\n    /**\n     * **This config is not used in the Gantt. Please use {@link #config-project} config instead**\n     * @private\n     * @config {Object|Scheduler.crud.AbstractCrudManagerMixin} crudManager\n     */\n    static get $name() {\n        return 'Gantt';\n    }\n    // Factoryable type name\n    static get type() {\n        return 'gantt';\n    }\n}\n// Register this widget type with its Factory\nGantt.initClass();\nGantt._$name = 'Gantt';", "// region Gantt\n// column\nexport { default as AddNewColumn } from '../lib/Gantt/column/AddNewColumn.js';\nexport { default as AllColumns } from '../lib/Gantt/column/AllColumns.js';\nexport { default as BaselineStartDateColumn } from '../lib/Gantt/column/BaselineStartDateColumn.js';\nexport { default as BaselineStartVarianceColumn } from '../lib/Gantt/column/BaselineStartVarianceColumn.js';\nexport { default as BaselineEndDateColumn } from '../lib/Gantt/column/BaselineEndDateColumn.js';\nexport { default as BaselineEndVarianceColumn } from '../lib/Gantt/column/BaselineEndVarianceColumn.js';\nexport { default as BaselineDurationColumn } from '../lib/Gantt/column/BaselineDurationColumn.js';\nexport { default as BaselineDurationVarianceColumn } from '../lib/Gantt/column/BaselineDurationVarianceColumn.js';\nexport { default as CalendarColumn } from '../lib/Gantt/column/CalendarColumn.js';\nexport { default as ConstraintDateColumn } from '../lib/Gantt/column/ConstraintDateColumn.js';\nexport { default as ConstraintTypeColumn } from '../lib/Gantt/column/ConstraintTypeColumn.js';\nexport { default as DeadlineDateColumn } from '../lib/Gantt/column/DeadlineDateColumn.js';\nexport { default as DependencyColumn } from '../lib/Gantt/column/DependencyColumn.js';\nexport { default as EarlyEndDateColumn } from '../lib/Gantt/column/EarlyEndDateColumn.js';\nexport { default as EarlyStartDateColumn } from '../lib/Gantt/column/EarlyStartDateColumn.js';\nexport { default as EffortColumn } from '../lib/Gantt/column/EffortColumn.js';\nexport { default as EndDateColumn } from '../lib/Gantt/column/EndDateColumn.js';\nexport { default as EventModeColumn } from '../lib/Gantt/column/EventModeColumn.js';\nexport { default as GanttDateColumn } from '../lib/Gantt/column/GanttDateColumn.js';\nexport { default as IgnoreResourceCalendarColumn } from '../lib/Gantt/column/IgnoreResourceCalendarColumn.js';\nexport { default as InactiveColumn } from '../lib/Gantt/column/InactiveColumn.js';\nexport { default as LateEndDateColumn } from '../lib/Gantt/column/LateEndDateColumn.js';\nexport { default as LateStartDateColumn } from '../lib/Gantt/column/LateStartDateColumn.js';\nexport { default as ManuallyScheduledColumn } from '../lib/Gantt/column/ManuallyScheduledColumn.js';\nexport { default as MilestoneColumn } from '../lib/Gantt/column/MilestoneColumn.js';\nexport { default as NameColumn } from '../lib/Gantt/column/NameColumn.js';\nexport { default as NoteColumn } from '../lib/Gantt/column/NoteColumn.js';\nexport { default as PercentDoneColumn } from '../lib/Gantt/column/PercentDoneColumn.js';\nexport { default as PredecessorColumn } from '../lib/Gantt/column/PredecessorColumn.js';\nexport { default as ResourceAssignmentColumn } from '../lib/Gantt/column/ResourceAssignmentColumn.js';\nexport { default as ResourceAssignmentGridResourceColumn } from '../lib/Gantt/column/ResourceAssignmentGridResourceColumn.js';\nexport { default as RollupColumn } from '../lib/Gantt/column/RollupColumn.js';\nexport { default as SchedulingDirectionColumn } from '../lib/Gantt/column/SchedulingDirectionColumn.js';\nexport { default as SchedulingModeColumn } from '../lib/Gantt/column/SchedulingModeColumn.js';\nexport { default as SequenceColumn } from '../lib/Gantt/column/SequenceColumn.js';\nexport { default as ShowInTimelineColumn } from '../lib/Gantt/column/ShowInTimelineColumn.js';\nexport { default as StartDateColumn } from '../lib/Gantt/column/StartDateColumn.js';\nexport { default as SuccessorColumn } from '../lib/Gantt/column/SuccessorColumn.js';\nexport { default as TimeAxisColumn } from '../lib/Gantt/column/TimeAxisColumn.js';\nexport { default as TotalSlackColumn } from '../lib/Gantt/column/TotalSlackColumn.js';\nexport { default as WBSColumn } from '../lib/Gantt/column/WBSColumn.js';\n//data\nexport { default as AssignmentsManipulationStore } from '../lib/Gantt/data/AssignmentsManipulationStore.js';\nexport { default as AssignmentStore } from '../lib/Gantt/data/AssignmentStore.js';\nexport { default as CalendarManagerStore } from '../lib/Gantt/data/CalendarManagerStore.js';\nexport { default as DependencyStore } from '../lib/Gantt/data/DependencyStore.js';\nexport { default as ResourceStore } from '../lib/Gantt/data/ResourceStore.js';\nexport { default as TaskStore } from '../lib/Gantt/data/TaskStore.js';\nexport { default as WbsField } from '../lib/Gantt/data/field/WbsField.js';\n// feature\nexport { default as Baselines } from '../lib/Gantt/feature/Baselines.js';\nexport { default as CellEdit } from '../lib/Gantt/feature/CellEdit.js';\nexport { default as CriticalPaths } from '../lib/Gantt/feature/CriticalPaths.js';\nexport { default as Dependencies } from '../lib/Gantt/feature/Dependencies.js';\nexport { default as Indicators } from '../lib/Gantt/feature/Indicators.js';\nexport { default as Labels } from '../lib/Gantt/feature/Labels.js';\nexport { default as ParentArea } from '../lib/Gantt/feature/ParentArea.js';\nexport { default as ProgressLine } from '../lib/Gantt/feature/ProgressLine.js';\nexport { default as ProjectLines } from '../lib/Gantt/feature/ProjectLines.js';\nexport { default as Rollups } from '../lib/Gantt/feature/Rollups.js';\nexport { default as ScrollButtons } from '../lib/Gantt/feature/ScrollButtons.js';\nexport { default as Summary } from '../lib/Gantt/feature/Summary.js';\nexport { default as TaskCopyPaste } from '../lib/Gantt/feature/TaskCopyPaste.js';\nexport { default as TaskDrag } from '../lib/Gantt/feature/TaskDrag.js';\nexport { default as TaskDragCreate } from '../lib/Gantt/feature/TaskDragCreate.js';\nexport { default as TaskEdit } from '../lib/Gantt/feature/TaskEdit.js';\nexport { default as TaskMenu } from '../lib/Gantt/feature/TaskMenu.js';\nexport { default as TaskNonWorkingTime } from '../lib/Gantt/feature/TaskNonWorkingTime.js';\nexport { default as TaskResize } from '../lib/Gantt/feature/TaskResize.js';\nexport { default as TaskSegmentDrag } from '../lib/Gantt/feature/TaskSegmentDrag.js';\nexport { default as TaskSegmentResize } from '../lib/Gantt/feature/TaskSegmentResize.js';\nexport { default as TaskTooltip } from '../lib/Gantt/feature/TaskTooltip.js';\nexport { default as TreeGroup } from '../lib/Gantt/feature/TreeGroup.js';\nexport { default as Versions } from '../lib/Gantt/feature/Versions.js';\n//export\nexport { default as MultiPageExporter } from '../lib/Gantt/feature/export/exporter/MultiPageExporter.js';\nexport { default as MultiPageVerticalExporter } from '../lib/Gantt/feature/export/exporter/MultiPageVerticalExporter.js';\nexport { default as PdfExport } from '../lib/Gantt/feature/export/PdfExport.js';\nexport { default as Print } from '../lib/Gantt/feature/export/Print.js';\nexport { default as SinglePageExporter } from '../lib/Gantt/feature/export/exporter/SinglePageExporter.js';\n// model\nexport { default as AssignmentModel } from '../lib/Gantt/model/AssignmentModel.js';\nexport { default as Baseline } from '../lib/Gantt/model/Baseline.js';\nexport { default as CalendarIntervalModel } from '../lib/Gantt/model/CalendarIntervalModel.js';\nexport { default as CalendarModel } from '../lib/Gantt/model/CalendarModel.js';\nexport { default as DependencyModel } from '../lib/Gantt/model/DependencyModel.js';\nexport { default as ProjectModel } from '../lib/Gantt/model/ProjectModel.js';\nexport { default as ResourceModel } from '../lib/Gantt/model/ResourceModel.js';\nexport { default as TaskModel } from '../lib/Gantt/model/TaskModel.js';\nexport { default as WebSocketProjectModel } from '../lib/Gantt/model/WebSocketProjectModel.js';\n// util\nexport { default as ProjectGenerator } from '../lib/Gantt/util/ProjectGenerator.js';\nexport { default as ResourceAssignmentParser } from '../lib/Gantt/util/ResourceAssignmentParser.js';\n// widget\nexport { default as AssignmentField } from '../lib/Gantt/widget/AssignmentField.js';\nexport { default as AssignmentGrid } from '../lib/Gantt/widget/AssignmentGrid.js';\nexport { default as AssignmentPicker } from '../lib/Gantt/widget/AssignmentPicker.js';\nexport { default as CalendarPicker } from '../lib/Gantt/widget/CalendarPicker.js';\nexport { default as DependencyField } from '../lib/Gantt/widget/DependencyField.js';\nexport { default as TaskEditor } from '../lib/Gantt/widget/TaskEditor.js';\n// feature experimental\nexport { default as MspExport } from '../lib/Gantt/feature/export/MspExport.js';\n// view mixin\nexport { default as GanttDom } from '../lib/Gantt/view/mixin/GanttDom.js';\nexport { default as GanttRegions } from '../lib/Gantt/view/mixin/GanttRegions.js';\nexport { default as GanttScroll } from '../lib/Gantt/view/mixin/GanttScroll.js';\nexport { default as GanttState } from '../lib/Gantt/view/mixin/GanttState.js';\nexport { default as GanttStores } from '../lib/Gantt/view/mixin/GanttStores.js';\nexport { default as GanttTimelineDateMapper } from '../lib/Gantt/view/mixin/GanttTimelineDateMapper.js';\nexport { default as TaskNavigation } from '../lib/Gantt/view/mixin/TaskNavigation.js';\n// view orientation\nexport { default as NewTaskRendering } from '../lib/Gantt/view/orientation/NewTaskRendering.js';\n// view\nexport { default as Gantt } from '../lib/Gantt/view/Gantt.js';\nexport { default as GanttBase } from '../lib/Gantt/view/GanttBase.js';\n//endregion\n\n\nimport GlobalEvents from '../lib/Core/GlobalEvents.js';\nimport BrowserHelper from '../lib/Core/helper/BrowserHelper.js';\nimport VersionHelper from '../lib/Core/helper/VersionHelper.js';\nimport Widget from '../lib/Core/widget/Widget.js';\nimport Toast from '../lib/Core/widget/Toast.js';\nimport Override from '../lib/Core/mixin/Override.js';\nimport DomHelper from '../lib/Core/helper/DomHelper.js';\nimport GanttBase from '../lib/Gantt/view/GanttBase.js';\nimport Dependencies from '../lib/Gantt/feature/Dependencies.js';\n(() => {\n    //region Common\n    const\n        HOSTS            = [\n            'bryntum.com',\n            'cdpn.io',\n            'react-gantt.com',\n            'vue-gantt.com',\n            'vue-scheduler.com',\n            'react-scheduler.com',\n            'angular-scheduler.com',\n            'angular-calendar.com',\n            'vue-calendar.com',\n            'react-calendar.com',\n            'lmctfy.net',\n            'bryntum-dev-ed.develop.lightning.force.com'\n        ],\n        ONE_DAY          = 1000 * 60 * 60 * 24,\n        EXPIRING_CLASSES = [],\n        location = (globalThis || self).location;\n    if (!VersionHelper.isTestEnv && (HOSTS.some(host => location.host.includes(host)) || /\\/docs/.test(location.href))) {\n        return;\n    }\n    let initialized;\n    function initExpiryHelper(owner, baseClass) {\n        if (!initialized) {\n            initialized = true;\n            ExpiryHelper.construct({\n                widget : owner\n            });\n        }\n        // do not remove this line (used to distinguish trial bundles by regexp)\n        owner.__foo = 'THISISTRIAL';\n    }\n    //endregion\n    //region ExpiryHelper\n    class ExpiryHelper {\n        static construct(config) {\n            const\n                me            = this,\n                product       = 'taskboard',\n                productName   = 'TaskBoard',\n                version       = VersionHelper.getVersion(product),\n                callHomeDelay = VersionHelper.isTestEnv ? 3000 : 1000 * 60,\n                blockUrl      = BrowserHelper.queryString.blockUrl;\n            Object.assign(me, {\n                version,\n                product,\n                Product          : productName,\n                verifyUrl        : VersionHelper.isTestEnv ? blockUrl : 'https://bryntum.com/verify/',\n                blocked          : false,\n                lastVersionCheck : 0,\n                trialKey         : `b-${product}-trial-start`,\n                versionCheckKey  : `b-${product}-verify-date`\n            }, config);\n            if (!VersionHelper.isTestEnv) {\n                console.log(`Bryntum ${productName} Trial Version`);\n            }\n            me.cacheTrialStartTime();\n            if (me.isExpired) {\n                if (document.readyState === 'complete') {\n                    me.onTrialExpired();\n                }\n                else {\n                    document.addEventListener('readystatechange', () => {\n                        if (document.readyState === 'complete') {\n                            me.onTrialExpired();\n                        }\n                    });\n                }\n            }\n            // Call home to log trial usage, assuming localStorage access works reliably\n            // 1 min delay to be less easily detected\n            setTimeout(() => {\n                me.updateBlockedStatus();\n            }, callHomeDelay);\n        }\n        static cacheTrialStartTime() {\n            const\n                me         = this,\n                timeString = BrowserHelper.getLocalStorageItem(me.trialKey),\n                time       = Number(timeString);\n            if (time && !isNaN(time)) {\n                me.trialStartTime = time;\n            }\n            me.trialStartTime = me.trialStartTime || Date.now();\n            // First trial access, or no localstorage (no local storage meaning our expiration mechanism won't work. Only remote blocking will end the trial)\n            BrowserHelper.setLocalStorageItem(me.trialKey, me.trialStartTime);\n        }\n        static get isExpired() {\n            return this.blocked || (Date.now() - this.trialStartTime > ONE_DAY * 45) || window.bryntum?.[this.product]?.expired;\n        }\n        static updateBlockedStatus() {\n            const\n                me                  = this,\n                saveVersionCheckKey = () => BrowserHelper.setLocalStorageItem(me.versionCheckKey, Date.now());\n            me.lastVersionCheck = me.lastVersionCheck || BrowserHelper.getLocalStorageItem(me.versionCheckKey) || 0;\n            // Max 1 version check per session / day\n            if (me.lastVersionCheck && Date.now() - me.lastVersionCheck < ONE_DAY) {\n                return;\n            }\n            if (me.verifyUrl) {\n                const\n                    url    = encodeURIComponent(location.href),\n                    logUrl = `${me.verifyUrl}?id=${window.bryntum.license}&url=${url}`,\n                    img    = new Image();\n                img.onload = () => {\n                    // 2x2 image means trial is blocked due to violation\n                    if (img.naturalWidth === 2) {\n                        me.blockTrial();\n                    }\n                    else {\n                        // Just in case\n                        saveVersionCheckKey();\n                    }\n                };\n                img.onerror = () => {\n                    saveVersionCheckKey();\n                };\n                img.src = logUrl;\n            }\n            else {\n                saveVersionCheckKey();\n            }\n        }\n        static onTrialExpired() {\n            const rootEl = this.widget.rootElement;\n            if (!this.expirationShown) {\n                this.expirationShown = true;\n                if (!VersionHelper.isTestEnv) {\n                    console.warn(`Bryntum ${this.Product} trial version expired. Purchase a license at https://bryntum.com/store or contact us at https://bryntum.com/contact/ for licensing options.`);\n                }\n                rootEl.floatRoot && Toast.show({\n                    html        : `Psst! Your Bryntum ${this.Product} trial has expired. Please see <a href=\"https://bryntum.com/store\">our store</a> for licensing options`,\n                    timeout     : 20000,\n                    rootElement : rootEl\n                });\n            }\n            DomHelper.removeEachSelector(rootEl, '.b-sch-dependency');\n            DomHelper.forEachSelector(rootEl, '.b-container', element => {\n                const widget = Widget.fromElement(element, 'widget');\n                if (EXPIRING_CLASSES.some(cls => widget instanceof cls)) {\n                    this.maskExpiredWidget(widget);\n                }\n            });\n        }\n        static blockTrial() {\n            this.blocked = true;\n            // Get rid of version check timestamp\n            BrowserHelper.removeLocalStorageItem(this.versionCheckKey);\n            // To force expired state: Set a fake early trial timestamp\n            BrowserHelper.setLocalStorageItem(this.trialKey, 1);\n            this.onTrialExpired();\n        }\n        static maskExpiredWidget(widget) {\n            widget.mask({\n                text  : '<h3 style=\"margin:0\">Trial expired, <a href=\"https://bryntum.com/store\" style=\"margin:0 3px; color:inherit\">click here</a> to buy a license.</h3>',\n                icon  : 'b-fa b-fa-frown',\n                type  : 'trial',\n                cover : 'target'\n            });\n        }\n        static setWaterMark(element, {\n            darkColor = 'rgba(255, 255, 255, 0.03)',\n            lightColor = 'rgba(240, 240, 240, 0.54)'\n        } = {}) {\n            // Used for thumbnails\n            if (BrowserHelper.queryString.thumb != null) {\n                return;\n            }\n            const\n                color     = DomHelper.themeInfo?.name?.toLowerCase().endsWith('-dark') ? darkColor : lightColor,\n                svgString = `\n                   <svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"100%\" height=\"100%\" style=\"font-family:sans-serif;font-weight:900;fill:${color}\">\n                    <defs>\n                        <pattern id=\"company\" patternUnits=\"userSpaceOnUse\" width=\"400\" height=\"200\">\n                            <text y=\"30\" font-size=\"40\" id=\"name\">Bryntum</text>\n                            <text y=\"120\" x=\"200\" font-size=\"24\" id=\"trial\">Trial Version</text>\n                        </pattern>\n                        <pattern id=\"pattern\" xlink:href=\"#company\" patternTransform=\"rotate(-45)\">\n                            <use xlink:href=\"#name\" /><use xlink:href=\"#trial\" />\n                        </pattern>\n                    </defs>\n                    <rect width=\"100%\" height=\"100%\" fill=\"url(#pattern)\" />\n                </svg>`;\n            element.style.backgroundImage = `url('data:image/svg+xml;base64,${window.btoa(svgString)}')`;\n        };\n    }\n    //endregion\n    //region Common override\n    const applyBaseOverride = baseClass => {\n        EXPIRING_CLASSES.push(baseClass);\n        Override.apply(class {\n            static get target() {\n                return {\n                    class : baseClass\n                };\n            }\n            onPaintOverride() {\n                const\n                    me            = this,\n                    setWatermarks = () => {\n                        const targets = me.subGrids ? Object.values(me.subGrids) : [me];\n                        for (const target of targets) {\n                            if (target.element) {\n                                ExpiryHelper.setWaterMark(target.element);\n                            }\n                        }\n                    };\n                initExpiryHelper(me, baseClass);\n                setWatermarks();\n                // React to theme changes\n                GlobalEvents.on('theme', () => {\n                    setWatermarks();\n                });\n                if (ExpiryHelper.isExpired) {\n                    ExpiryHelper.maskExpiredWidget(me);\n                }\n            }\n        });\n    };\n    //endregion\n    if (typeof GanttBase !== 'undefined') {\n        applyBaseOverride(GanttBase);\n    }\n})();\n(() => {\n    // do not load analytics code for specific domains\n    const ignoreDomainRe = /(.force.com|.lightning.com|.salesforce.com|lmctfy.net|qa.bryntum.com|qa2.bryntum.com)/;\n    // document location might be null in firefox in salesforce\n    if (!document.location || ignoreDomainRe.test(document.location.href) || window.top !== window) {\n        return;\n    }\n    let id;\n    const websiteUrls = [\n        'bryntum.com',\n        'cdpn.io'\n    ];\n    const\n        products   = ['calendar', 'grid', 'gantt', 'scheduler', 'schedulerpro', 'taskboard'],\n        frameworks = ['angular', 'react', 'vue', 'ionic'];\n    websiteUrls.splice(0, 0, ...products.map(prod => frameworks.map(framework => `${framework}-${prod}`)).concat('bryntum.com').flat());\n    if (document.location.host.match(websiteUrls.join('|'))) {\n        id = 'G-1VY6776VJP';\n    }\n    else {\n        id = 'G-H465KZDH8S';\n    }\n    const newScript = document.createElement('script');\n    newScript.onload = function() {\n        window.dataLayer = window.dataLayer || [];\n        function gtag() {\n            window.dataLayer.push(arguments);\n        }\n        gtag('js', new Date());\n        gtag('config', id);\n    };\n    document.head.appendChild(newScript);\n    newScript.src = 'https://www.googletagmanager.com/gtag/js?id=' + id;\n})();\n"],
  "mappings": "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",
  "names": ["format", "string", "result", "DependencyModel", "task", "string", "AssignmentModel", "AssignmentModel", "regexp", "string", "AssignmentModel", "TimeAxisColumn", "AssignmentStore", "AssignmentModel", "CalendarModel", "CalendarManagerStore", "CalendarModel", "DependencyModel", "DependencyStore", "DependencyModel", "ResourceModel", "ResourceStore", "ResourceModel", "ConstrainedByParentMixin", "__decorate", "ConstrainedLateEventMixin", "__decorate", "ScheduledByDependenciesLateEventMixin", "__decorate", "InactiveEventMixin", "FixedEffortMixin", "FixedUnitsMixin", "__decorate", "GanttEvent", "field", "result", "outdented", "_a", "_b", "resource", "CellEdit", "Dependencies", "Labels", "TaskEdit", "TreeGroup", "_a", "MultiPageExporter", "MultiPageVerticalExporter", "SinglePageExporter", "PdfExport", "SinglePageExporter", "MultiPageExporter", "MultiPageVerticalExporter", "PdfExport", "CalendarIntervalModel", "__decorate", "HasCriticalPathsMixin", "event", "__decorate", "GanttProjectMixin", "DependencyModel", "ResourceModel", "AssignmentModel", "CalendarModel", "DependencyStore", "ResourceStore", "AssignmentStore", "CalendarManagerStore", "result", "MIN_DATE", "startDate", "endDate"]
}
