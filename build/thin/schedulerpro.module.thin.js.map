{
  "version": 3,
  "sources": ["../../../SchedulerPro/lib/SchedulerPro/column/ResourceCalendarColumn.js", "../../../SchedulerPro/lib/SchedulerPro/model/EventModel.js", "../../../SchedulerPro/lib/SchedulerPro/data/EventStore.js", "../../../SchedulerPro/lib/SchedulerPro/model/ResourceUtilizationModel.js", "../../../SchedulerPro/lib/SchedulerPro/data/ResourceUtilizationStore.js", "../../../SchedulerPro/lib/SchedulerPro/eventlayout/ProHorizontalLayout.js", "../../../SchedulerPro/lib/SchedulerPro/eventlayout/ProHorizontalLayoutStack.js", "../../../SchedulerPro/lib/SchedulerPro/eventlayout/ProHorizontalLayoutPack.js", "../../../SchedulerPro/lib/SchedulerPro/feature/CalendarHighlight.js", "../../../SchedulerPro/lib/SchedulerPro/feature/DependencyEdit.js", "../../../SchedulerPro/lib/SchedulerPro/feature/EventBuffer.js", "../../../SchedulerPro/lib/SchedulerPro/feature/EventSegmentDrag.js", "../../../SchedulerPro/lib/SchedulerPro/feature/NestedEvents.js", "../../../SchedulerPro/lib/SchedulerPro/feature/ResourceNonWorkingTime.js", "../../../SchedulerPro/lib/SchedulerPro/feature/TimeSpanHighlight.js", "../../../SchedulerPro/lib/SchedulerPro/model/changelog/ChangeLogPropertyUpdate.js", "../../../SchedulerPro/lib/SchedulerPro/model/ProjectModel.js", "../../../SchedulerPro/lib/SchedulerPro/view/mixin/SchedulerProEventRendering.js", "../../../SchedulerPro/lib/SchedulerPro/view/ResourceHistogram.js", "../../../SchedulerPro/lib/SchedulerPro/view/ResourceUtilization.js", "../../../SchedulerPro/lib/SchedulerPro/view/orientation/ProHorizontalRendering.js", "../../../SchedulerPro/lib/SchedulerPro/view/orientation/ProVerticalRendering.js", "../../../SchedulerPro/lib/SchedulerPro/view/SchedulerProBase.js", "../../../SchedulerPro/lib/SchedulerPro/view/SchedulerPro.js", "../../../SchedulerPro/lib/SchedulerPro/widget/Timeline.js", "../../../SchedulerPro/lib/SchedulerPro/widget/VersionGrid.js", "../../../SchedulerPro/bundle/entry.thin.js"],
  "sourcesContent": ["import Column from '../../Grid/column/Column.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\nimport AttachToProjectMixin from '../../Scheduler/data/mixin/AttachToProjectMixin.js';\nimport CalendarField from '../widget/CalendarField.js';\n/**\n * @module SchedulerPro/column/ResourceCalendarColumn\n */\n/**\n * A column that displays (and allows user to update) the current {@link SchedulerPro.model.CalendarModel calendar} of\n * the resource.\n *\n * Default editor is a {@link SchedulerPro.widget.CalendarField CalendarField}.\n *\n * {@inlineexample SchedulerPro/column/ResourceCalendarColumn.js}\n *\n * @mixes Scheduler/data/mixin/AttachToProjectMixin\n * @extends Grid/column/Column\n * @classtype resourceCalendar\n * @column\n */\nexport default class ResourceCalendarColumn extends Column.mixin(AttachToProjectMixin) {\n    //region Config\n    static get $name() {\n        return 'ResourceCalendarColumn';\n    }\n    static get type() {\n        return 'resourceCalendar';\n    }\n    static get defaults() {\n        return {\n            field  : 'calendar',\n            text   : 'Calendar',\n            editor : {\n                type         : CalendarField.type,\n                clearable    : true,\n                allowInvalid : false\n            }\n        };\n    }\n    //endregion\n    //region Init\n    attachToProject(project) {\n        if (project) {\n            // Store default calendar to filter out this value\n            this.defaultCalendar = project.defaultCalendar;\n            this.editor.store = project.calendarManagerStore;\n        }\n    }\n    attachToResourceStore(resourceStore) {\n        super.attachToResourceStore(resourceStore);\n        if (resourceStore) {\n            resourceStore.ion({\n                name    : 'resourceStore',\n                update  : 'onResourceUpdate',\n                thisObj : this\n            });\n        }\n    }\n    //endregion\n    //region Events\n    // Event rendering does not update cells when engine updates a resource, instead we do a minimal update here\n    onResourceUpdate({ record, changes }) {\n        const change = changes[this.field];\n        if (change) {\n            // Ignore \"normalization\" of id -> instance, won't affect our appearance\n            if (typeof change.oldValue === 'string' && change.value?.id === change.oldValue) {\n                return;\n            }\n            this.refreshCell(record);\n        }\n    }\n    //endregion\n    //region Render\n    renderer({ value }) {\n        if (value?.id) {\n            const record = this.editor.store.getById(value.id);\n            return record?.getValue(this.editor.displayField) || '';\n        }\n        else {\n            return '';\n        }\n    }\n    //endregion\n}\nColumnStore.registerColumnType(ResourceCalendarColumn);\nResourceCalendarColumn._$name = 'ResourceCalendarColumn';", "import PartOfProject from '../data/mixin/PartOfProject.js';\nimport PercentDoneMixin from './mixin/PercentDoneMixin.js';\nimport { SchedulerProEvent } from '../../Engine/quark/model/scheduler_pro/SchedulerProEvent.js';\nimport Duration from '../../Core/data/Duration.js';\nimport EventModelMixin from '../../Scheduler/model/mixin/EventModelMixin.js';\nimport TimeSpan from '../../Scheduler/model/TimeSpan.js';\nimport RecurringTimeSpan from '../../Scheduler/model/mixin/RecurringTimeSpan.js';\nimport EventSegmentModel from './EventSegmentModel.js';\n/**\n * @module SchedulerPro/model/EventModel\n */\n/**\n * This class represent a single event in your schedule, usually added to a {@link SchedulerPro.data.EventStore}.\n *\n * It is a subclass of the {@link Scheduler.model.TimeSpan}, which is in turn subclass of {@link Core.data.Model}.\n * Please refer to documentation of that class to become familiar with the base interface of the event.\n *\n * ## Async date calculations\n *\n * A record created from an `EventModel` is normally part of an `EventStore`, which in turn is part of a project. When\n * dates or the duration of an event is changed, the project performs async calculations to normalize the other fields.\n * For example if `duration` is change, it will calculate `endDate`.\n *\n * As a result of this being an async operation, the values of other fields are not guaranteed to be up to date\n * immediately after a change. To ensure data is up to date, await the calculations to finish.\n *\n * For example, `endDate` is not up to date after this operation:\n *\n * ```javascript\n * eventRecord.duration = 5;\n * // endDate not yet calculated\n * ```\n *\n * But if calculations are awaited it is up to date:\n *\n * ```javascript\n * eventRecord.duration = 5;\n * await eventRecord.project.commitAsync();\n * // endDate is calculated\n * ```\n *\n * As an alternative, you can also use `setAsync()` to trigger calculations directly after the change:\n *\n * ```javascript\n * await eventRecord.setAsync({ duration : 5});\n * // endDate is calculated\n * ```\n *\n * ## Subclassing the Event model class\n * The Event model has a few predefined fields as seen below. If you want to add new fields or change the options for\n * the existing fields, you can do that by subclassing this class (see example below).\n *\n * ```javascript\n * class MyEvent extends EventModel {\n *\n *     static get fields() {\n *         return [\n *            // Add new field\n *            { name: 'myField', type : 'number', defaultValue : 0 }\n *         ];\n *     },\n *\n *     myCheckMethod() {\n *         return this.myField > 0\n *     },\n *\n *     ...\n * });\n * ```\n *\n * If you in your data want to use other names for the startDate, endDate, resourceId and name fields you can configure\n * them as seen below:\n * ```javascript\n * class MyEvent extends EventModel {\n *\n *     static get fields() {\n *         return [\n *            { name: 'startDate', dataSource 'taskStart' },\n *            { name: 'endDate', dataSource 'taskEnd', format: 'YYYY-MM-DD' },\n *            { name: 'resourceId', dataSource 'userId' },\n *            { name: 'name', dataSource 'taskTitle' },\n *         ];\n *     },\n *     ...\n * });\n * ```\n *\n * Please refer to {@link Core.data.Model} for additional details.\n *\n * @extends Scheduler/model/TimeSpan\n * @mixes Scheduler/model/mixin/RecurringTimeSpan\n * @mixes Scheduler/model/mixin/EventModelMixin\n * @mixes SchedulerPro/model/mixin/PercentDoneMixin\n * @mixes SchedulerPro/data/mixin/PartOfProject\n *\n * @typings Scheduler.model.EventModel -> Scheduler.model.SchedulerEventModel\n */\nexport default class EventModel extends SchedulerProEvent.derive(TimeSpan).mixin(\n    RecurringTimeSpan,\n    PartOfProject,\n    EventModelMixin,\n    PercentDoneMixin\n) {\n    /**\n     * Returns the event store this event is part of.\n     *\n     * @member {SchedulerPro.data.EventStore} eventStore\n     * @readonly\n     * @typings Scheduler.model.TimeSpan:eventStore -> {Scheduler.data.EventStore||SchedulerPro.data.EventStore}\n     */\n    /**\n     * If given resource is assigned to this event, returns a {@link SchedulerPro.model.AssignmentModel} record.\n     * Otherwise, returns `null`\n     *\n     * @method getAssignmentFor\n     * @param {SchedulerPro.model.ResourceModel} resource The instance of {@link SchedulerPro.model.ResourceModel}\n     *\n     * @returns {SchedulerPro.model.AssignmentModel|null}\n     */\n    /**\n     * This method assigns a resource to this event.\n     *\n     * Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method assign\n     * @param {SchedulerPro.model.ResourceModel|String|Number|SchedulerPro.model.ResourceModel[]|String[]|Number[]} resource A new resource for this event, either as a full\n     * Resource record or an id (or an array of such).\n     * @param {Number} [units=100] The `units` field of the new assignment\n     *\n     * @async\n     * @propagating\n     */\n    /**\n     * This method unassigns a resource from this event.\n     *\n     * Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method unassign\n     * @param {SchedulerPro.model.ResourceModel} resource The instance of {@link SchedulerPro.model.ResourceModel}\n     *\n     * @async\n     * @propagating\n     */\n    /**\n     * Sets the calendar of the event. Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method setCalendar\n     * @param {SchedulerPro.model.CalendarModel} calendar The new calendar. Provide `null` to fall back to the project calendar.\n     * @async\n     * @propagating\n     */\n    /**\n     * Returns the event calendar.\n     *\n     * @method getCalendar\n     * @returns {SchedulerPro.model.CalendarModel} The event calendar.\n     */\n    /**\n     * Either activates or deactivates the task depending on the passed value.\n     * Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method setInactive\n     * @param {Boolean} inactive `true` to deactivate the task, `false` to activate it.\n     * @async\n     * @propagating\n     */\n    /**\n     * Sets the start date of the event. Will cause the schedule to be updated - returns a `Promise`\n     *\n     * Note, that the actually set start date may be adjusted, according to the calendar, by skipping the non-working time forward.\n     *\n     * @method setStartDate\n     * @param {Date} date The new start date.\n     * @param {Boolean} [keepDuration=true] Whether to keep the duration (and update the end date), while changing the start date, or vice-versa.\n     * @async\n     * @propagating\n     */\n    /**\n     * Sets the end date of the event. Will cause the schedule to be updated - returns a `Promise`\n     *\n     * Note, that the actually set end date may be adjusted, according to the calendar, by skipping the non-working time backward.\n     *\n     * @method setEndDate\n     * @param {Date} date The new end date.\n     * @param {Boolean} [keepDuration=false] Whether to keep the duration (and update the start date), while changing the end date, or vice-versa.\n     * @async\n     * @propagating\n     */\n    /**\n     * Updates the duration (and optionally unit) of the event. Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method setDuration\n     * @param {Number} duration New duration value\n     * @param {String} [unit] New duration unit\n     * @async\n     * @propagating\n     */\n    /**\n     * Sets the constraint type and (optionally) constraining date to the event.\n     *\n     * @method setConstraint\n     * @param {'finishnoearlierthan'|'finishnolaterthan'|'mustfinishon'|'muststarton'|'startnoearlierthan'|'startnolaterthan'|null} constraintType\n     * Constraint type, please refer to the {@link #field-constraintType} for the valid\n     * values.\n     * @param {Date} [constraintDate] Constraint date.\n     * @async\n     * @propagating\n     */\n    /**\n     * Updates the {@link #field-effort} (and optionally {@link #field-effortUnit unit}) of the event.\n     * Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method setEffort\n     * @param {Number} effort New effort value\n     * @param {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} [unit] New effort\n     * unit\n     * @async\n     * @propagating\n     */\n    /**\n     * Sets {@link #field-segments} field value.\n     *\n     * @method\n     * @name setSegments\n     * @param {SchedulerPro.model.EventSegmentModel[]} segments Array of segments or null to make the event not segmented.\n     * @returns {Promise}\n     * @propagating\n     */\n    /**\n     * Splits the event into segments.\n     * @method splitToSegments\n     * @param {Date} from The date to split this event at.\n     * @param {Number} [lag=1] Split duration.\n     * @param {String} [lagUnit] Split duration unit.\n     * @returns {Promise}\n     * @propagating\n     */\n    /**\n     * Merges the event segments.\n     * The method merges two provided event segments (and all the segment between them if any).\n     * @method mergeSegments\n     * @param {SchedulerPro.model.EventSegmentModel} [segment1] First segment to merge.\n     * @param {SchedulerPro.model.EventSegmentModel} [segment2] Second segment to merge.\n     * @returns {Promise}\n     * @propagating\n     */\n    /**\n     * Sets the event {@link #field-ignoreResourceCalendar} field value and triggers rescheduling.\n     *\n     * @method setIgnoreResourceCalendar\n     * @param {Boolean} ignore Provide `true` to ignore the calendars of the assigned resources\n     * when scheduling the event. If `false` the event performs only when\n     * its own {@link #field-calendar} and some of the assigned\n     * resource calendars allow that.\n     * @async\n     * @propagating\n     */\n    /**\n     * Returns the event {@link #field-ignoreResourceCalendar} field value.\n     *\n     * @method getIgnoreResourceCalendar\n     * @returns {Boolean} The event {@link #field-ignoreResourceCalendar} field value.\n     */\n    /**\n     * The event first segment or null if the event is not segmented.\n     * @member {SchedulerPro.model.EventSegmentModel} firstSegment\n     */\n    /**\n     * The event last segment or null if the event is not segmented.\n     * @member {SchedulerPro.model.EventSegmentModel} lastSegment\n     */\n    //region Config\n    static get $name() {\n        return 'EventModel';\n    }\n    static isProEventModel = true;\n    static get fields() {\n        return [\n            /**\n             * Amount of time to delay a nested event from its parent. Expressed in {@link #field-durationUnit} units\n             * (defaults to days).\n             *\n             * Example dataset:\n             *\n             * ```javascript\n             * {\n             *   \"name\"      : \"Parent\",\n             *   \"startDate\" : \"2023-08-24\",\n             *   \"children\" : [\n             *     { name : \"One\", \"delayFromParent\" : 0 } // starts 2023-08-24\n             *     { name : \"Two\", \"delayFromParent\" : 2 } // starts 2023-08-26\n             *   ]\n             * }\n             * ```\n             *\n             * Intended for loading & serializing data when using nested events, at runtime it is enforced using\n             * constraints. See {@link SchedulerPro/feature/NestedEvents} for more information\n             *\n             * @field {Number} delayFromParent\n             * @category Scheduling\n             * @readonly\n             */\n            /**\n             * This field is automatically set to `true` when the event is \"unscheduled\" - user has provided an empty\n             * string in one of the UI editors for start date, end date or duration. Such event is not rendered,\n             * and does not affect the schedule of its successors.\n             *\n             * To schedule the event back, enter one of the missing values, so that there's enough information\n             * to calculate start date, end date and duration.\n             *\n             * Note, that setting this field manually does nothing. This field should be persisted, but not updated\n             * manually.\n             *\n             * @field {Boolean} unscheduled\n             * @readonly\n             * @category Scheduling\n             */\n            /**\n             * Segments of the event that appear when the event gets {@link #function-splitToSegments}.\n             * @field {SchedulerPro.model.EventSegmentModel[]} segments\n             * @category Scheduling\n             */\n            /**\n             * The current status of a task, expressed as the percentage completed (integer from 0 to 100)\n             *\n             * UI fields representing this data field are disabled for summary events.\n             * See {@link #function-isEditable} for details.\n             *\n             * @field {Number} percentDone\n             * @category Scheduling\n             */\n            /**\n             * The start date of a time span (or Event / Task).\n             *\n             * Uses {@link Core/helper/DateHelper#property-defaultFormat-static DateHelper.defaultFormat} to convert a\n             * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and\n             * change the dateFormat for this field.\n             *\n             * UI fields representing this data field are disabled for summary events\n             * except the {@link #field-manuallyScheduled manually scheduled} events.\n             * See {@link #function-isEditable} for details.\n             *\n             * Note that the field always returns a `Date`.\n             *\n             * @field {Date} startDate\n             * @accepts {String|Date}\n             * @category Scheduling\n             */\n            /**\n             * The end date of a time span (or Event / Task).\n             *\n             * Uses {@link Core/helper/DateHelper#property-defaultFormat-static DateHelper.defaultFormat} to convert a\n             * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and\n             * change the dateFormat for this field.\n             *\n             * UI fields representing this data field are disabled for summary events\n             * except the {@link #field-manuallyScheduled manually scheduled} events.\n             * See {@link #function-isEditable} for details.\n             *\n             * Note that the field always returns a `Date`.\n             *\n             * @field {Date} endDate\n             * @accepts {String|Date}\n             * @category Scheduling\n             */\n            /**\n             * The numeric part of the timespan's duration (the number of units).\n             *\n             * UI fields representing this data field are disabled for summary events\n             * except the {@link #field-manuallyScheduled manually scheduled} events.\n             * See {@link #function-isEditable} for details.\n             *\n             * @field {Number} duration\n             * @category Scheduling\n             */\n            /**\n             * Field storing the event constraint alias or NULL if not constraint set.\n             * Valid values are:\n             * - \"finishnoearlierthan\"\n             * - \"finishnolaterthan\"\n             * - \"mustfinishon\"\n             * - \"muststarton\"\n             * - \"startnoearlierthan\"\n             * - \"startnolaterthan\"\n             *\n             * @field {'finishnoearlierthan'|'finishnolaterthan'|'mustfinishon'|'muststarton'|'startnoearlierthan'|'startnolaterthan'|null} constraintType\n             * @category Scheduling\n             */\n            /**\n             * Field defining the constraint boundary date, if applicable.\n             * @field {Date} constraintDate\n             * @category Scheduling\n             */\n            /**\n             * When set to `true`, the `startDate` of the event will not be changed by any of its incoming dependencies\n             * or constraints.\n             *\n             * @field {Boolean} manuallyScheduled\n             * @category Scheduling\n             */\n            /**\n             * When set to `true` the event becomes inactive and stops taking part in the project scheduling (doesn't\n             * affect linked events and affect its assigned resources allocation).\n             *\n             * @field {Boolean} inactive\n             * @category Scheduling\n             */\n            /**\n             * When set to `true` the calendars of the assigned resources\n             * are not taken into account when scheduling the event.\n             *\n             * By default the field value is `false` resulting in that the event performs only when\n             * its own {@link #field-calendar} and some of the assigned\n             * resource calendars allow that.\n             * @field {Boolean} ignoreResourceCalendar\n             * @category Scheduling\n             */\n            /**\n             * A calculated field storing the _early start date_ of the event.\n             * The _early start date_ is the earliest possible date the event can start.\n             * This value is calculated based on the earliest dates of the event predecessors and the event own constraints.\n             * If the event has no predecessors nor other constraints, its early start date matches the project start date.\n             *\n             * UI fields representing this data field are naturally disabled since the field is readonly.\n             * See {@link #function-isEditable} for details.\n             *\n             * @field {Date} earlyStartDate\n             * @calculated\n             * @readonly\n             * @category Scheduling\n             */\n            /**\n             * A calculated field storing the _early end date_ of the event.\n             * The _early end date_ is the earliest possible date the event can finish.\n             * This value is calculated based on the earliest dates of the event predecessors and the event own constraints.\n             * If the event has no predecessors nor other constraints, its early end date matches the project start date plus the event duration.\n             *\n             * UI fields representing this data field are naturally disabled since the field is readonly.\n             * See {@link #function-isEditable} for details.\n             *\n             * @field {Date} earlyEndDate\n             * @calculated\n             * @readonly\n             * @category Scheduling\n             */\n            /**\n             * The calendar, assigned to the entity. Allows you to set the time when entity can perform the work.\n             *\n             * All entities are by default assigned to the project calendar, provided as the {@link SchedulerPro.model.ProjectModel#field-calendar} option.\n             *\n             * @field {SchedulerPro.model.CalendarModel} calendar\n             * @category Scheduling\n             */\n            /**\n             * The numeric part of the event effort (the number of units).\n             *\n             * @field {Number} effort\n             * @category Scheduling\n             */\n            /**\n             * The unit part of the event effort, defaults to \"h\" (hours). Valid values are:\n             *\n             * - \"millisecond\" - Milliseconds\n             * - \"second\" - Seconds\n             * - \"minute\" - Minutes\n             * - \"hour\" - Hours\n             * - \"day\" - Days\n             * - \"week\" - Weeks\n             * - \"month\" - Months\n             * - \"quarter\" - Quarters\n             * - \"year\"- Years\n             *\n             * This field is readonly after creation, to change it use the {@link #function-setEffort} call.\n             * @field {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} effortUnit\n             * @default \"hour\"\n             * @category Scheduling\n             * @readonly\n             */\n            /**\n             * This field defines the event scheduling mode. Based on this field some fields of the event\n             * will be \"fixed\" (should be provided by the user) and some - computed.\n             *\n             * Possible values are:\n             *\n             * - `Normal` is the default (and backward compatible) mode. It means the event will be scheduled based on\n             * information about its start/end dates, event own calendar (project calendar if there's no one) and\n             * calendars of the assigned resources.\n             *\n             * - `FixedDuration` mode means, that event has fixed start and end dates, but its effort will be computed\n             * dynamically, based on the assigned resources information. When duration of such event increases,\n             * its effort is increased too. The mode tends to preserve user provided duration so changing effort\n             * results adjusting assignment units and vise-versa assignment changes adjusts effort.\n             *\n             * @field {'Normal'|'FixedDuration'} schedulingMode\n             * @category Scheduling\n             */\n            /**\n             * This boolean flag defines what part the data should be updated in the `FixedDuration` scheduling\n             * mode.\n             * If it is `true`, then {@link #field-effort} is kept intact when new duration is provided and\n             * assignment {@link SchedulerPro.model.AssignmentModel#field-units} is updated.\n             * If it is `false`, then assignment {@link SchedulerPro.model.AssignmentModel#field-units} is kept\n             * intact when new duration is provided and {@link #field-effort} is updated.\n             *\n             * @field {Boolean} effortDriven\n             * @default false\n             * @category Scheduling\n             */\n            /**\n             * The event effective calendar. Returns the\n             * {@link SchedulerPro.model.ProjectModel#field-calendar project calendar} if the event has no own\n             * {@link #field-calendar} provided.\n             * @member {SchedulerPro.model.CalendarModel} effectiveCalendar\n             */\n            /**\n             * Set this to true if this task should be shown in the Timeline widget\n             * @field {Boolean} showInTimeline\n             * @category Common\n             */\n            { name : 'showInTimeline', type : 'boolean', defaultValue : false },\n            /**\n             * Note about the event\n             * @field {String} note\n             * @category Common\n             */\n            'note',\n            /**\n             * Buffer time before event start. Specified in a human-friendly form as accepted by\n             * {@link Core.helper.DateHelper#function-parseDuration-static}:\n             * ```javascript\n             * // Create event model with a 30 minutes buffer time before the event start\n             * new EventModel({ startDate : '2020-01-01', endDate : '2020-01-02', preamble : '30 minutes' })\n             * ```\n             *\n             * Used by the {@link SchedulerPro.feature.EventBuffer} feature.\n             *\n             * @field {Core.data.Duration} preamble\n             * @accepts {String}\n             * @category Scheduling\n             */\n            {\n                name      : 'preamble',\n                convert   : value => value ? new Duration(value) : null,\n                serialize : value => !value?.magnitude ? null : value\n            },\n            /**\n             * Buffer time after event end. Specified in a human-friendly form as accepted by\n             * {@link Core.helper.DateHelper#function-parseDuration-static}:\n             * ```javascript\n             * // Create event model with a 1 hour buffer time after the event end\n             * new EventModel({ startDate : '2020-01-01', endDate : '2020-01-02', postamble : '1 hour' })\n             * ```\n             *\n             * Used by the {@link SchedulerPro.feature.EventBuffer} feature.\n             *\n             * @field {String} postamble\n             * @accepts {String}\n             * @category Scheduling\n             */\n            {\n                name      : 'postamble',\n                convert   : value => value ? new Duration(value) : null,\n                serialize : value => !value?.magnitude ? null : value\n            }\n        ];\n    }\n    getDefaultSegmentModelClass() {\n        return EventSegmentModel;\n    }\n    //endregion\n    //region EventBuffer\n    updateWrapDate(date, duration, forward = true) {\n        duration = new Duration(duration);\n        return new Date(date.getTime() + (forward ? 1 : -1) * duration.milliseconds);\n    }\n    get startDate() {\n        let dt;\n        if (this.isOccurrence) {\n            dt = this.get('startDate');\n        }\n        else {\n            // Micro optimization to avoid expensive super call. super will be hit in Scheduler Pro\n            dt = this._startDate ?? super.startDate;\n        }\n        if (this.allDay) {\n            dt = this.constructor.getAllDayStartDate(dt);\n        }\n        return dt;\n    }\n    set startDate(startDate) {\n        const me = this;\n        if (me.batching) {\n            me._startDate = startDate;\n            me.set({ startDate });\n        }\n        else {\n            super.startDate = startDate;\n            if (me.preamble) {\n                me.wrapStartDate = null;\n                me.wrapEndDate   = null;\n            }\n        }\n    }\n    get endDate() {\n        let dt;\n        if (this.isOccurrence) {\n            dt = this.get('endDate');\n        }\n        else {\n            // Micro optimization to avoid expensive super call. super will be hit in Scheduler Pro\n            dt = this._endDate ?? super.endDate;\n        }\n        if (this.allDay) {\n            dt = this.constructor.getAllDayEndDate(dt);\n        }\n        return dt;\n    }\n    set endDate(endDate) {\n        const me = this;\n        if (me.batching) {\n            me._endDate = endDate;\n            me.set({ endDate });\n        }\n        else {\n            super.endDate = endDate;\n            if (me.postamble) {\n                me.wrapStartDate = null;\n                me.wrapEndDate   = null;\n            }\n        }\n    }\n    /**\n     * Property which encapsulates the effort's magnitude and units.\n     *\n     * UI fields representing this property are disabled for summary events.\n     * See {@link #function-isEditable} for details.\n     *\n     * @property {Core.data.Duration}\n     */\n    get fullEffort() {\n        return new Duration({\n            unit      : this.effortUnit,\n            magnitude : this.effort\n        });\n    }\n    set fullEffort(effort) {\n        this.setEffort(effort.magnitude, effort.unit);\n    }\n    // Cannot use `convert` method because it might be disabled by `useRawData : true` and we always need to calculate\n    // that value\n    get wrapStartDate() {\n        const\n            me                      = this,\n            { preamble, startDate } = me,\n            wrapStartDate           = me._wrapStartDate;\n        let result;\n        if (wrapStartDate) {\n            result = wrapStartDate;\n        }\n        else {\n            if (preamble) {\n                result            = me.updateWrapDate(startDate, preamble, false);\n                me._wrapStartDate = result;\n            }\n            else {\n                result = startDate;\n            }\n        }\n        return result;\n    }\n    set wrapStartDate(value) {\n        this._wrapStartDate = value;\n    }\n    get wrapEndDate() {\n        const\n            me                     = this,\n            { postamble, endDate } = me,\n            wrapEndDate            = me._wrapEndDate;\n        let result;\n        if (wrapEndDate) {\n            result = wrapEndDate;\n        }\n        else {\n            if (postamble) {\n                result          = me.updateWrapDate(endDate, postamble, true);\n                me._wrapEndDate = result;\n            }\n            else {\n                result = endDate;\n            }\n        }\n        return result;\n    }\n    set wrapEndDate(value) {\n        this._wrapEndDate = value;\n    }\n    set(data) {\n        const isObject = typeof data === 'object';\n        if (data === 'preamble' || (isObject && 'preamble' in data)) {\n            this.wrapStartDate = null;\n        }\n        if (data === 'postamble' || (isObject && 'postamble' in data)) {\n            this.wrapEndDate = null;\n        }\n        return super.set(...arguments);\n    }\n    /**\n     * Returns event start date adjusted by {@link #field-preamble} (start date - duration).\n     * @property {Date}\n     * @readonly\n     */\n    get outerStartDate() {\n        return this.wrapStartDate;\n    }\n    /**\n     * Returns event end date adjusted by {@link #field-postamble} (end date + duration).\n     * @property {Date}\n     * @readonly\n     */\n    get outerEndDate() {\n        return this.wrapEndDate;\n    }\n    //endregion\n    /**\n     * Defines if the given event field should be manually editable in UI.\n     * You can override this method to provide your own logic.\n     *\n     * By default, the method defines:\n     * - {@link #field-earlyStartDate}, {@link #field-earlyEndDate} as not editable;\n     * - {@link #field-endDate}, {@link #field-duration} and {@link #field-fullDuration} fields\n     *   as not editable for summary events except the {@link #field-manuallyScheduled manually scheduled} ones;\n     * - {@link #field-percentDone} as not editable for summary events.\n     *\n     * @param {String} fieldName Name of the field\n     * @returns {Boolean} Returns `true` if the field is editable, `false` if it is not and `undefined` if the event has\n     * no such field.\n     */\n    isEditable(fieldName) {\n        switch (fieldName) {\n            // r/o fields\n            case 'earlyStartDate':\n            case 'earlyEndDate':\n            case 'delayFromParent':\n                return false;\n            // disable percentDone editing for summary tasks\n            case 'percentDone' :\n            case 'renderedPercentDone' :\n                return this.isLeaf;\n            // end/duration is allowed to edit for leafs and manually scheduled summaries\n            case 'endDate' :\n            case 'duration' :\n            case 'fullDuration' :\n                return this.isLeaf || this.manuallyScheduled;\n        }\n        return super.isEditable(fieldName);\n    }\n    // Avoid persisting delayFromParent on parents, no point\n    getFieldPersistentValue(nameOrField) {\n        const\n            field = typeof nameOrField === 'string' ? this.getFieldDefinition(nameOrField) : nameOrField,\n            name  = field?.name || nameOrField;\n        if (name === 'delayFromParent' && this.parent?.isRoot) {\n            return;\n        }\n        return super.getFieldPersistentValue(nameOrField);\n    }\n    // Occurrences are not part of the project, when requesting their stm we retrieve it from the master event instead\n    get stm() {\n        return this.recurringEvent?.stm ?? super.stm;\n    }\n    set stm(stm) {\n        super.stm = stm;\n    }\n    //region Early render\n    get assigned() {\n        const\n            { project } = this,\n            assigned    = super.assigned;\n        // Figure assigned events out before buckets are created  (if part of project)\n        if (project?.isDelayingCalculation && !assigned) {\n            return project.assignmentStore.storage.findItem('event', this);\n        }\n        return assigned;\n    }\n    set assigned(assigned) {\n        super.assigned = assigned;\n    }\n    //endregion\n    getCurrentConfig(options) {\n        const\n            { segments } = this,\n            result       = super.getCurrentConfig(options);\n        // include segments\n        if (result && segments) {\n            result.segments = segments.map(segment => segment.getCurrentConfig(options));\n        }\n        return result;\n    }\n    endBatch(silent, skipAccessors, triggerBeforeUpdate) {\n        const\n            me = this,\n            { meta : { batchChanges } } = me;\n        super.endBatch(silent, skipAccessors, triggerBeforeUpdate);\n        // Remove cached values\n        // https://github.com/bryntum/support/issues/3358\n        if (batchChanges) {\n            if ('endDate' in batchChanges) {\n                delete me._endDate;\n                // When project recalculates start/end date and committing changes to record it calls endBatch. In this\n                // case wrap dates become invalid and should be reset on the record. We do it by forcing `null` value.\n                // Possible scenarios include adding dependency or moving first event in a dependency chain.\n                // Covered by pro/features/BufferTimeDependencies.t\n                // wrap date is an internal field we should be fine without mapping\n                if (me.postamble) {\n                    me.wrapEndDate = null;\n                }\n            }\n            if ('startDate' in batchChanges) {\n                delete me._startDate;\n                if (me.preamble) {\n                    me.wrapStartDate = null;\n                }\n            }\n        }\n    }\n}\nEventModel._$name = 'EventModel';", "import AjaxStore from '../../Core/data/AjaxStore.js';\nimport GetEventsMixin from '../../Scheduler/data/mixin/GetEventsMixin.js';\nimport DayIndexMixin from '../../Scheduler/data/mixin/DayIndexMixin.js';\nimport EventStoreMixin from '../../Scheduler/data/mixin/EventStoreMixin.js';\nimport RecurringEventsMixin from '../../Scheduler/data/mixin/RecurringEventsMixin.js';\nimport EventModel from '../model/EventModel.js';\nimport PartOfProject from './mixin/PartOfProject.js';\nimport { ChronoEventStoreMixin } from '../../Engine/quark/store/ChronoEventStoreMixin.js';\n/**\n * @module SchedulerPro/data/EventStore\n */\n/**\n * A store holding all the {@link SchedulerPro.model.EventModel events} to be rendered into a {@link SchedulerPro.view.SchedulerPro Scheduler Pro}.\n *\n * This store only accepts a model class inheriting from {@link SchedulerPro.model.EventModel}.\n *\n * An EventStore is usually connected to a project, which binds it to other related stores (AssignmentStore,\n * ResourceStore and DependencyStore). The project also handles normalization/calculation of the data on the records in\n * the store. For example if a record is added with a `startDate` and an `endDate`, it will calculate the `duration`.\n *\n * The calculations happens async, records are not guaranteed to have up to date data until they are finished. To be\n * certain that calculations have finished, call `await project.commitAsync()` after store actions. Or use one of the\n * `xxAsync` functions, such as `loadDataAsync()`.\n *\n * Using `commitAsync()`:\n *\n * ```javascript\n * eventStore.data = [{ startDate, endDate }, ...];\n *\n * // duration of the record is not yet calculated\n *\n * await eventStore.project.commitAsync();\n *\n * // now it is\n * ```\n *\n * Using `loadDataAsync()`:\n *\n * ```javascript\n * await eventStore.loadDataAsync([{ startDate, endDate }, ...]);\n *\n * // duration is calculated\n * ```\n *\n * @mixes SchedulerPro/data/mixin/PartOfProject\n * @mixes Scheduler/data/mixin/GetEventsMixin\n * @mixes Scheduler/data/mixin/EventStoreMixin\n * @mixes Scheduler/data/mixin/RecurringEventsMixin\n * @extends Core/data/AjaxStore\n *\n * @typings Scheduler.data.EventStore -> Scheduler.data.SchedulerEventStore\n */\nexport default class EventStore extends PartOfProject(RecurringEventsMixin(GetEventsMixin(DayIndexMixin(EventStoreMixin(ChronoEventStoreMixin.derive(AjaxStore)))))) {\n    static $name = 'EventStore';\n    static get defaultConfig() {\n        return {\n            /**\n             * Class used to represent records\n             * @config {SchedulerPro.model.EventModel}\n             * @typings {typeof EventModel}\n             * @default\n             * @category Common\n             */\n            modelClass : EventModel\n        };\n    }\n    //endregion\n}\nEventStore._$name = 'EventStore';", "import Model from '../../Core/data/Model.js';\n/**\n * @module SchedulerPro/model/ResourceUtilizationModel\n */\n/**\n * A model representing a {@link SchedulerPro/view/ResourceUtilization} view row.\n * The view rows are of two possible types __resources__ and __assignments__.\n * The model wraps either a resource or an assignment model. And each wrapped resource keeps its corresponding\n * wrapped assignments as its __children__.\n *\n * **NOTE:** You don't normally need to construct this class instances. The view does that automatically\n * by processing the project resources and assignments, wrapping them with this model instances and\n * putting them to its {@link SchedulerPro/view/ResourceUtilization#property-store}.\n *\n * The wrapped model is provided to {@link #config-origin} config and can be retrieved from it:\n *\n * ```javascript\n * // get the real resource representing the first row of the view\n * resourceUtilizationView.store.first.origin\n * ```\n *\n * @extends Core/data/Model\n */\nexport default class ResourceUtilizationModel extends Model {\n    static $name = 'ResourceUtilizationModel';\n    static fields = [\n        /**\n         * Name of the represented resource or the assigned event.\n         * If the model represents an assignment the field value is\n         * automatically set to the assigned event {@link SchedulerPro/model/EventModel#field-name}.\n         * @field {String} name\n         * @category Common\n         */\n        'name',\n        /**\n         * Icon for the corresponding row.\n         * If the model represents an assignment the field value is\n         * automatically set to the assigned event {@link SchedulerPro/model/EventModel#field-iconCls}.\n         * @field {String} iconCls\n         * @category Styling\n         */\n        'iconCls'\n    ];\n    /**\n     * A resource or an assignment wrapped by this model.\n     *\n     * ```javascript\n     * // get the real resource representing the first row of the view\n     * resourceUtilizationView.store.first.origin\n     * ```\n     * @prp {SchedulerPro.model.ResourceModel|SchedulerPro.model.AssignmentModel} origin\n     * @readonly\n     */\n    construct(data, ...args) {\n        this._childrenIndex = new Map();\n        // copy some field values from origin to this model\n        if (data.origin) {\n            Object.assign(data, this.mapOriginValues(data.origin));\n        }\n        super.construct(data, ...args);\n        if (this.origin && !this.generatedParent) {\n            this.fillChildren();\n        }\n    }\n    mapOriginValues(origin) {\n        const result = {};\n        if (origin.isResourceModel) {\n            result.name = origin.name;\n        }\n        else if (origin.isAssignmentModel) {\n            result.name    = origin.event?.name;\n            result.iconCls = origin.event?.iconCls;\n        }\n        return result;\n    }\n    fillChildren() {\n        const\n            me           = this,\n            { children } = me,\n            toRemove     = new Set(children),\n            toAdd        = [];\n        if (me.origin?.isResourceModel) {\n            const { assigned } = me.origin;\n            for (const assignment of assigned) {\n                if (!me._childrenIndex.has(assignment)) {\n                    toAdd.push(me.constructor.new({ origin : assignment }));\n                }\n                else {\n                    toRemove.delete(me._childrenIndex.get(assignment));\n                }\n            }\n        }\n        if (toRemove.size) {\n            this.removeChild([...toRemove]);\n        }\n        if (toAdd.length) {\n            this.appendChild(toAdd);\n        }\n    }\n    afterRemoveChild(records) {\n        records.forEach(record => this._childrenIndex.delete(record.origin));\n    }\n    insertChild(...args) {\n        let added = super.insertChild(...args);\n        if (added) {\n            const { stores } = this;\n            if (!Array.isArray(added)) {\n                added = [added];\n            }\n            if (this.origin?.isResourceModel) {\n                for (const record of added) {\n                    if (record.origin && !this._childrenIndex.has(record.origin)) {\n                        this._childrenIndex.set(record.origin, record);\n                    }\n                }\n            }\n            // if the model is already in a store\n            // fill the store real_model -> wrapper_model map\n            if (stores?.length) {\n                for (const store of stores) {\n                    for (const record of added) {\n                        record.traverse(node => node.origin && store.setModelByOrigin(node.origin, node));\n                    }\n                }\n            }\n        }\n        return added;\n    }\n    getChildByOrigin(origin) {\n        return this._childrenIndex.get(origin);\n    }\n}\n// convert empty parents to leaves to allow them to be handled by TreeGroup feature\nResourceUtilizationModel.convertEmptyParentToLeaf = true;\nResourceUtilizationModel.exposeProperties();\nResourceUtilizationModel._$name = 'ResourceUtilizationModel';", "import AjaxStore from '../../Core/data/AjaxStore.js';\nimport ResourceUtilizationModel from '../model/ResourceUtilizationModel.js';\nimport { AbstractPartOfProjectStoreMixin } from '../../Engine/quark/store/mixin/AbstractPartOfProjectStoreMixin.js';\n/**\n * @module SchedulerPro/data/ResourceUtilizationStore\n */\n/**\n * A store representing {@link SchedulerPro/view/ResourceUtilization} view records.\n * This store accepts a model class inheriting from {@link SchedulerPro/model/ResourceUtilizationModel}.\n *\n * The store is a tree of nodes representing resources on the root level with\n * sub-nodes representing corresponding resource assignments.\n * The store tracks changes made in the {@link #config-project} stores and rebuilds its content automatically.\n * Thus the project config is mandatory and has to be provided.\n *\n * @extends Core/data/AjaxStore\n */\nexport default class ResourceUtilizationStore extends AbstractPartOfProjectStoreMixin.derive(AjaxStore) {\n    static $name = 'ResourceUtilizationStore';\n    static configurable = {\n        modelClass : ResourceUtilizationModel,\n        /**\n         * Project instance to retrieve resources and assignments data from.\n         * @config {SchedulerPro.model.ProjectModel} project\n         */\n        project : null,\n        tree : true\n    };\n    // Cannot use `static properties = {}`, new Map would pollute the prototype\n    static get properties() {\n        return {\n            _modelByOrigin : new Map()\n        };\n    }\n    updateProject(project) {\n        this.setResourceStore(project?.resourceStore);\n        this.setAssignmentStore(project?.assignmentStore);\n        this.setEventStore(project?.eventStore);\n        this.fillStoreFromProject();\n    }\n    setResourceStore(store) {\n        this.detachListeners('resourceStore');\n        store?.ion({\n            name    : 'resourceStore',\n            change  : this.onResourceStoreDataChanged,\n            thisObj : this\n        });\n    }\n    setEventStore(store) {\n        this.detachListeners('eventStore');\n        store?.ion({\n            name    : 'eventStore',\n            update  : this.onEventUpdate,\n            thisObj : this\n        });\n    }\n    setAssignmentStore(store) {\n        this.detachListeners('assignmentStore');\n        store?.ion({\n            name    : 'assignmentStore',\n            change  : this.onAssignmentsChange,\n            refresh : this.onAssignmentsRefresh,\n            add     : this.onAssignmentsAdd,\n            update  : this.onAssignmentUpdate,\n            remove  : this.onAssignmentsRemove,\n            thisObj : this\n        });\n    }\n    onResourceStoreDataChanged(event) {\n        // 'move' action triggers a remove event first, we wait for the 'add' - no need to fill twice\n        if (event.isMove && event.action === 'remove') {\n            return;\n        }\n        this.fillStoreFromProject();\n    }\n    onAssignmentsChange() {\n        this.forEach(resourceWrapper => resourceWrapper.fillChildren());\n    }\n    onAssignmentsRefresh(event) {\n        if (event.action === 'batch') {\n            this.forEach(resourceWrapper => resourceWrapper.fillChildren());\n        }\n    }\n    onAssignmentsAdd({ records }) {\n        records.forEach(record => {\n            const resourceWrapper = this.getModelByOrigin(record?.resource);\n            resourceWrapper?.fillChildren();\n        });\n    }\n    onAssignmentUpdate({ record, changes }) {\n        // if assignment moved to another resource\n        if ('resource' in changes) {\n            const\n                // get assignment wrapper record\n                assignmentWrapper = this.getModelByOrigin(record),\n                // get new resource wrapper record\n                newResourceWrapper = this.getModelByOrigin(record?.resource);\n            // move assignment wrapper to new resource wrapper\n            if (assignmentWrapper && newResourceWrapper) {\n                newResourceWrapper.appendChild(assignmentWrapper);\n            }\n        }\n    }\n    onAssignmentsRemove({ records }) {\n        this.remove(records.map(record => this.getModelByOrigin(record)));\n    }\n    onEventUpdate({ record, changes }) {\n        if ('name' in changes) {\n            for (const assignment of record.assigned) {\n                const assignmentWrapper = this.getModelByOrigin(assignment);\n                assignmentWrapper.set('name', record.name);\n            }\n        }\n    }\n    fillStoreFromProject() {\n        const toAdd = [];\n        this._project?.resourceStore.forEach(resource => {\n            if (!resource.isSpecialRow) {\n                toAdd.push(this.modelClass.new({ origin : resource }));\n            }\n        });\n        this.removeAll();\n        this.add(toAdd);\n        /**\n         * Fires when store completes synchronization with original (Event/Resource/Assignment) stores\n         * @event fillFromProject\n         * @internal\n         */\n        this.trigger('fillFromProject');\n    }\n    remove() {\n        const removed = super.remove(...arguments);\n        // sanitize internal origin->wrapper Map\n        removed?.forEach(record => {\n            this._modelByOrigin.delete(record.origin);\n        });\n        return removed;\n    }\n    removeAll() {\n        super.removeAll(...arguments);\n        this._modelByOrigin.clear();\n    }\n    getModelByOrigin(origin) {\n        return this._modelByOrigin.get(origin);\n    }\n    setModelByOrigin(origin, model) {\n        return this._modelByOrigin.set(origin, model);\n    }\n}\nResourceUtilizationStore._$name = 'ResourceUtilizationStore';", "import Base from '../../Core/Base.js';\nconst sortFn = (a, b) => {\n    if (a < b) {\n        return -1;\n    }\n    else if (a > b) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n};\n/**\n * @module SchedulerPro/eventlayout/ProHorizontalLayout\n */\n/**\n * Mixin for SchedulerPro horizontal layouts ({@link SchedulerPro.eventlayout.ProHorizontalLayoutPack} and\n * {@link SchedulerPro.eventlayout.ProHorizontalLayoutStack}). Should not be used directly, instead specify\n * {@link Scheduler.view.mixin.SchedulerEventRendering#config-eventLayout} in the SchedulerPro config (`stack`, `pack`\n * or `none`):\n *\n * ```javascript\n * new SchedulerPro({\n *   eventLayout: 'stack'\n * });\n * ```\n *\n * ## Grouping events\n *\n * By default events are not grouped and are laid out inside the row using start and end dates. Using\n * {@link #config-groupBy} config you can group events inside the resource row. Every group will be laid out on its own\n * band, as if layout was applied to each group of events separately.\n *\n * {@inlineexample SchedulerPro/eventlayout/ProHorizontalLayout.js}\n *\n * ### By field value\n *\n * You can specify field name to group events by. The following snippet would put *high* prio events at the top:\n *\n * ```javascript\n * new SchedulerPro({\n *     eventLayout : {\n *         type    : 'stack',\n *         groupBy : 'prio'\n *     },\n *     project : {\n *         eventsData : [\n *             { id : 1, startDate : '2017-02-08', duration : 1, prio : 'low' },\n *             { id : 2, startDate : '2017-02-09', duration : 1, prio : 'high' },\n *             { id : 3, startDate : '2017-02-10', duration : 1, prio : 'high' },\n *         ],\n *         resourcesData : [\n *             { id : 1, name : 'Resource 1' }\n *         ],\n *         assignmentsData : [\n *             { id : 1, resource : 1, event : 1 },\n *             { id : 2, resource : 1, event : 2 },\n *             { id : 3, resource : 1, event : 3 }\n *         ]\n *     }\n * })\n * ```\n *\n * ### Order of groups\n *\n * Groups are **always** sorted ascending. In the example above *high* prio events are above *low* prio events because:\n *\n * ```javascript\n * 'high' < 'low' // true\n * ```\n *\n * If you want to group events in a specific order, you can define it in a\n * special {@link #config-weights} config:\n *\n * ```javascript\n * new SchedulerPro({\n *     eventLayout : {\n *         type    : 'stack',\n *         weights : {\n *             low  : 100,\n *             high : 200\n *         },\n *         groupBy : 'prio'\n *     }\n * });\n * ```\n *\n * This will put *low* prio events at the top.\n *\n * The weight value defaults to `Infinity` unless specified in the weights config explicitly.\n *\n * ### Using a function\n *\n * You can use a custom function to group events. The group function receives an event record as a single argument and\n * is expected to return a non-null value for the group. This allows you to arrange events in any order you like,\n * including grouping by multiple properties at once.\n *\n * The snippet below groups events by duration and priority by creating 4 weights:\n *\n * |       | high prio | low prio |\n * |-------|-----------|----------|\n * | long  |     2     |    10    |\n * | short |     3     |    15    |\n *\n * ```javascript\n * new SchedulerPro({\n *     eventLayout : {\n *         type    : 'stack',\n *         groupBy : event => {\n *             return (event.duration > 2 ? 2 : 3) * (event.prio === 'high' ? 1 : 5);\n *         }\n *     }\n * })\n * ```\n *\n * This will divide events into 4 groups as seen in this demo:\n *\n * {@inlineexample SchedulerPro/eventlayout/ProHorizontalLayout2.js}\n *\n * ## Manual event layout\n *\n * You can provide a custom function to layout events inside the row and set the row size as required using\n * {@link #config-layoutFn}. The function is called with an array of {@link EventRenderData render data} objects. The\n * custom function can iterate over those objects and position them inside the row using `top` and `height` attributes.\n * The function should return the total row height in pixels.\n *\n * Please note that using a custom layout function makes {@link SchedulerPro.view.SchedulerPro#config-rowHeight}\n * obsolete.\n *\n * {@inlineexample SchedulerPro/eventlayout/ProHorizontalLayoutFn.js}\n *\n * ```javascript\n * new SchedulerPro({\n *     eventLayout : {\n *         layoutFn : items => {\n *             // Put event element at random top position\n *             item.top = 100 * Math.random();\n *         }\n *     }\n * });\n * ```\n *\n * @mixin\n */\nexport default Target => class ProHorizontalLayout extends (Target || Base) {\n    static get configurable() {\n        return {\n            /**\n             * Type of horizontal layout. Supported values are `stack`, `pack` and `none`.\n             * @config {'stack'|'pack'|'none'}\n             */\n            type : null,\n            /**\n             * The weights config allows you to specify order of the event groups inside the row. Higher weights are\n             * placed further down in the row. If field value is not specified in the weights object, it will be\n             * assigned `Infinity` value and pushed to the bottom.\n             *\n             * Only applicable when {@link #config-groupBy} config is not a function:\n             *\n             * ```javascript\n             * new SchedulerPro({\n             *     eventLayout : {\n             *         type    : 'stack',\n             *         weights : {\n             *             // Events with high prio will be placed at the top, then medium,\n             *             // then low prio events.\n             *             high   : 100,\n             *             medium : 150,\n             *             low    : 200\n             *         },\n             *         groupBy : 'prio'\n             *     }\n             * });\n             * ```\n             *\n             * Only explicitly defined groups are put in separate bands inside the row:\n             *\n             * ```javascript\n             * new SchedulerPro({\n             *     eventLayout : {\n             *         // Pack layout is also supported\n             *         type : 'pack',\n             *         weights : {\n             *             // Events with high prio will be placed at the top. All other\n             *             // events will be put to the same group at the bottom\n             *             high : 100\n             *         },\n             *         groupBy : 'prio'\n             *     }\n             * });\n             * ```\n             * @config {Object<String,Number>}\n             */\n            weights : null,\n            /**\n             * Specifies a way to group events inside the row. Can accept either a model field name or a function which\n             * is provided with event record as a single argument and is expected to return group for the event.\n             *\n             * @config {String|Function}\n             * @param {SchedulerPro.model.EventModel} event Event record\n             * @returns {String} Group name for the event\n             */\n            groupBy : null,\n            groupByThisObj : null,\n            /**\n             * Supply a function to manually layout events. It accepts event layout data and should set `top`\n             * and `height` for every provided data item (left and width are calculated according to the event start\n             * date and duration). The function should return the total row height in pixels.\n             *\n             * For example, we can arrange events randomly in the row:\n             * ```javascript\n             * new SchedulerPro({\n             *     eventLayout : {\n             *         layoutFn : items => {\n             *             items.forEach(item => {\n             *                 item.top = Math.round(Math.random() * 100);\n             *                 item.height = Math.round(Math.random() * 100);\n             *             });\n             *\n             *             return 50;\n             *         }\n             *     }\n             * })\n             * ```\n             *\n             * If you need a reference to the scheduler pro instance, you can get that from the function scope (arrow\n             * function doesn't work here):\n             *\n             * ```javascript\n             * new SchedulerPro({\n             *     eventLayout : {\n             *         layoutFn(items) {\n             *             items.forEach(item => {\n             *                 item.top = Math.round(Math.random() * 100);\n             *                 item.height = Math.round(Math.random() * 100);\n             *             });\n             *\n             *             // note `scheduler`, not `schedulerPro`\n             *             return this.scheduler.rowHeight;\n             *         }\n             *     }\n             * })\n             * ```\n             *\n             * @config {Function}\n             * @param {EventRenderData[]} events Unordered array of event render data, sorting may be required\n             * @param {Scheduler.model.ResourceModel} resource The resource for which the events are being laid out.\n             * @returns {Number} Returns total row height\n             */\n            layoutFn : null\n        };\n    }\n    /**\n     * This method performs layout on an array of event render data and returns amount of _bands_. Band is a multiplier of a\n     * configured {@link Scheduler.view.Scheduler#config-rowHeight} to calculate total row height required to fit all\n     * events.\n     * This method should not be used directly, it is called by the Scheduler during the row rendering process.\n     * @method applyLayout\n     * @param {EventRenderData[]} events\n     * @param {Scheduler.model.ResourceModel} resource\n     * @returns {Number}\n     */\n    /**\n     * This method iterates over events and calculates top position for each of them. Default layouts calculate\n     * positions to avoid events overlapping horizontally (except for the 'none' layout). Pack layout will squeeze events to a single\n     * row by reducing their height, Stack layout will increase the row height and keep event height intact.\n     * This method should not be used directly, it is called by the Scheduler during the row rendering process.\n     * @method layoutEventsInBands\n     * @param {EventRenderData[]} events\n     */\n    /**\n     * Returns `true` if event {@link #config-groupBy grouper} is defined.\n     * @type {Boolean}\n     * @readonly\n     */\n    get grouped() {\n        return Boolean(this.groupBy);\n    }\n    /**\n     * Returns group for the passed event render data.\n     * @param {EventRenderData} layoutData\n     * @returns {*}\n     */\n    getGroupValue(layoutData) {\n        let result;\n        if (layoutData.group != null) {\n            result = layoutData.group;\n        }\n        else {\n            const\n                { groupBy, weights, groupByThisObj = this } = this,\n                { eventRecord }                             = layoutData;\n            if (typeof groupBy === 'function') {\n                result = groupBy.call(groupByThisObj, eventRecord);\n            }\n            else {\n                result = eventRecord.getValue(groupBy);\n                if (weights) {\n                    // If record value is null or undefined, use infinite weight to move record to the bottom\n                    result = weights[result] ?? Infinity;\n                }\n            }\n            layoutData.group = result;\n        }\n        return result;\n    }\n    /**\n     * Sorts events by group and returns ordered array of groups, or empty array if events are not grouped.\n     * @param {EventRenderData[]} events\n     * @returns {String[]}\n     */\n    getEventGroups(events) {\n        // If group fn is defined, we need to sort events array according to groups\n        if (this.grouped) {\n            const groups = new Set();\n            events.sort((a, b) => {\n                const\n                    aValue = this.getGroupValue(a),\n                    bValue = this.getGroupValue(b);\n                groups.add(aValue);\n                groups.add(bValue);\n                return sortFn(aValue, bValue);\n            });\n            return Array.from(groups).sort(sortFn);\n        }\n        else {\n            return [];\n        }\n    }\n};\n", "import ProHorizontalLayout from './ProHorizontalLayout.js';\nimport HorizontalLayoutStack from '../../Scheduler/eventlayout/HorizontalLayoutStack.js';\n/**\n * @module SchedulerPro/eventlayout/ProHorizontalLayoutStack\n */\n/**\n * Handles layout of events within a row (resource) in horizontal mode. Stacks events, increasing row height to fit\n * all overlapping events.\n *\n * This layout is used by default in horizontal mode.\n *\n * This layout supports grouping events inside the resource row. See\n * {@link SchedulerPro.eventlayout.ProHorizontalLayout} for more info.\n *\n * @mixes SchedulerPro/eventlayout/ProHorizontalLayout\n */\nexport default class ProHorizontalLayoutStack extends HorizontalLayoutStack.mixin(ProHorizontalLayout) {\n    static get $name() {\n        return 'ProHorizontalLayoutStack';\n    }\n    /**\n     * @hideconfigs type, weights, groupBy, layoutFn\n     */\n    // heightRun is used when pre-calculating row heights, taking a cheaper path\n    layoutEventsInBands(events, heightRun = false) {\n        this.getEventGroups(events);\n        return super.layoutEventsInBands(events, heightRun);\n    }\n}\nProHorizontalLayoutStack._$name = 'ProHorizontalLayoutStack';", "import ProHorizontalLayout from './ProHorizontalLayout.js';\nimport HorizontalLayoutPack from '../../Scheduler/eventlayout/HorizontalLayoutPack.js';\n/**\n * @module SchedulerPro/eventlayout/ProHorizontalLayoutPack\n */\n/**\n * Handles layout of events within a row (resource) in horizontal mode. Packs events (adjusts their height) to fit\n * available row height.\n *\n * This layout supports grouping events inside the resource row. See\n * {@link SchedulerPro.eventlayout.ProHorizontalLayout} for more info.\n *\n * @mixes SchedulerPro/eventlayout/ProHorizontalLayout\n */\nexport default class ProHorizontalLayoutPack extends HorizontalLayoutPack.mixin(ProHorizontalLayout) {\n    static get $name() {\n        return 'ProHorizontalLayoutPack';\n    }\n    /**\n     * @hideconfigs type, weights, groupBy, layoutFn\n     */\n    layoutEventsInBands(events) {\n        const\n            groups = this.getEventGroups(events),\n            // If we don't have any groups, treat it like we have a single group including all events\n            groupCount = groups.length || 1;\n        const result = this.packEventsInBands(events, (event, j, slot, slotSize) => {\n            const\n                size              = slotSize / groupCount,\n                groupIndex        = groupCount === 1 ? 0 : groups.indexOf(event.group),\n                adjustedSlotStart = groupIndex / groupCount;\n            // This height and top are used to position event in the grouped row\n            event.height = size;\n            event.top    = adjustedSlotStart + slot.start / groupCount + j * size;\n            // This height and top are used to layout events in the same band. They emulate a single row which is what\n            // pack logic expects\n            event.inBandHeight = slotSize;\n            event.inBandTop = slot.start + j * slotSize;\n        });\n        events.forEach(event => {\n            Object.assign(\n                event,\n                this.bandIndexToPxConvertFn.call(\n                    this.bandIndexToPxConvertThisObj || this,\n                    event.top,\n                    event.height,\n                    event.eventRecord,\n                    event.resourceRecord\n                )\n            );\n        });\n        return result;\n    }\n}\nProHorizontalLayoutPack._$name = 'ProHorizontalLayoutPack';", "import ArrayHelper from '../../Core/helper/ArrayHelper.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport ResourceTimeRangesBase from '../../Scheduler/feature/base/ResourceTimeRangesBase.js';\nimport ResourceTimeRangeModel from '../../Scheduler/model/ResourceTimeRangeModel.js';\n/**\n * @module SchedulerPro/feature/CalendarHighlight\n */\nlet counter = 0;\nclass CalendarHighlightModel extends ResourceTimeRangeModel {\n    static get $name() {\n        return 'CalendarHighlightModel';\n    }\n    static domIdPrefix = 'calendarhighlight';\n    // For nicer DOM, since the records are transient we do not need a fancy UUID\n    static generateId() {\n        return ++counter;\n    }\n}\n/**\n * This feature temporarily visualizes {@link SchedulerPro/model/CalendarModel calendars} for the event or resource\n * calendar (controlled by the {@link #config-calendar} config). The calendars are highlighted while a user is creating,\n * dragging or resizing a task. Enabling this feature makes it easier for the end user to understand the underlying\n * rules of the schedule.\n *\n * {@inlineexample SchedulerPro/feature/CalendarHighlight.js}\n *\n * ## Example usage\n *\n * ```javascript\n * new SchedulerPro({\n *     features : {\n *         calendarHighlight : {\n *             // visualize resource calendars while interacting with events\n *             calendar : 'resource'\n *         }\n *     }\n * })\n * ```\n *\n * This feature is **disabled** by default.\n *\n * @extends Scheduler/feature/base/ResourceTimeRangesBase\n * @classtype calendarHighlight\n * @feature\n * @demo SchedulerPro/highlight-event-calendars\n */\nexport default class CalendarHighlight extends ResourceTimeRangesBase {\n    //region Config\n    static get $name() {\n        return 'CalendarHighlight';\n    }\n    static get configurable() {\n        return {\n            /**\n             * A string defining which calendar(s) to highlight during drag drop, resize or create flows.\n             * Valid values are `event` or `resource`.\n             *\n             * @config {'event'|'resource'}\n             * @default\n             */\n            calendar : 'event',\n            /**\n             * A string defining which calendar(s) to highlight during drag drop, resize or create flows.\n             * Valid values are `event` or `resource`.\n             *\n             * @config {'event'|'resource'}\n             */\n            unhighlightOnDrop : null,\n            /**\n             * A callback function which is called when you interact with one or more events (e.g. drag drop) to\n             * highlight only available resources.\n             *\n             * ```javascript\n             * new SchedulerPro({\n             *     features : {\n             *         calendarHighlight : {\n             *             collectAvailableResources({ scheduler, eventRecords }) {\n             *                  const mainEvent = eventRecords[0];\n             *                  return scheduler.resourceStore.query(resource => resource.role === mainEvent.requiredRole || !mainEvent.requiredRole);\n             *              }\n             *         }\n             *     }\n             * });\n             * ```\n             *\n             * @param {Object} context A context object\n             * @param {SchedulerPro.view.SchedulerPro} context.scheduler The scheduler instance\n             * @param {Scheduler.model.EventModel[]} context.eventRecords The event records\n             * @returns {Scheduler.model.ResourceModel[]} An array with the available resource records\n             * @config {Function}\n             */\n            collectAvailableResources : null,\n            rangeCls                    : 'b-sch-highlighted-calendar-range',\n            resourceTimeRangeModelClass : CalendarHighlightModel,\n            inflate                     : 3\n        };\n    }\n    static get pluginConfig() {\n        const config  = super.pluginConfig;\n        config.assign = [\n            'highlightEventCalendars',\n            'highlightResourceCalendars',\n            'unhighlightCalendars'\n        ];\n        return config;\n    }\n    afterConstruct() {\n        super.afterConstruct();\n        this.client.ion({\n            eventDragStart   : 'onEventDragStart',\n            eventDragReset   : 'unhighlightCalendars',\n            eventResizeStart : 'onEventResizeStart',\n            eventResizeEnd   : 'unhighlightCalendars',\n            dragCreateStart  : 'onDragCreateStart',\n            afterDragCreate  : 'unhighlightCalendars',\n            thisObj          : this\n        });\n    }\n    //endregion\n    highlightCalendar(eventRecords, resourceRecords) {\n        eventRecords = ArrayHelper.asArray(eventRecords);\n        resourceRecords = ArrayHelper.asArray(resourceRecords);\n        if (this.calendar === 'event') {\n            this.highlightEventCalendars(eventRecords, resourceRecords);\n        }\n        else {\n            this.highlightResourceCalendars(resourceRecords);\n        }\n    }\n    // region public APIs\n    /**\n     * Highlights the time spans representing the calendars of the passed event records, and resource records.\n     * @on-owner\n     * @param {Scheduler.model.EventModel[]} eventRecords The event records\n     * @param {Scheduler.model.ResourceModel[]} [resourceRecords] The resource records\n     * @param {Boolean} [clearExisting] Provide `false` to leave previous highlight elements\n     */\n    highlightEventCalendars(eventRecords, resourceRecords, clearExisting = true) {\n        const\n            me                     = this,\n            { client }             = me,\n            { startDate, endDate } = client;\n        if (me.disabled) {\n            return;\n        }\n        if (clearExisting) {\n            me.unhighlightCalendars();\n        }\n        eventRecords = ArrayHelper.asArray(eventRecords);\n        if (!resourceRecords) {\n            resourceRecords = eventRecords.flatMap(event => event.$linkedResources);\n        }\n        me.highlight = new Map();\n        resourceRecords = ArrayHelper.asArray(resourceRecords);\n        eventRecords.forEach(eventRecord => {\n            if (!eventRecord.calendar) {\n                return;\n            }\n            const timespans = eventRecord.calendar\n                ?.getWorkingTimeRanges(startDate, endDate)\n                .map(timespan => new CalendarHighlightModel(timespan));\n            if (timespans) {\n                for (const resourceRecord of resourceRecords) {\n                    me.highlight.set(resourceRecord, timespans);\n                    client.currentOrientation.refreshEventsForResource(resourceRecord, true, false);\n                }\n                if (resourceRecords.length > 0) {\n                    client.currentOrientation.onRenderDone();\n                }\n            }\n        });\n        client.syncSplits?.(split => split.highlightEventCalendars(eventRecords, resourceRecords, clearExisting));\n    }\n    /**\n     * Highlights the time spans representing the working time calendars of the passed resource records.\n     * @on-owner\n     * @param {Scheduler.model.ResourceModel[]} resourceRecords The resource records\n     * @param {Boolean} [clearExisting] Provide `false` to leave previous highlight elements\n     */\n    highlightResourceCalendars(resourceRecords, clearExisting = true) {\n        const\n            me                                         = this,\n            { startDate, endDate, currentOrientation } = me.client;\n        if (me.disabled) {\n            return;\n        }\n        if (clearExisting) {\n            me.unhighlightCalendars();\n        }\n        // Highlight resource calendars\n        me.highlight = new Map();\n        for (const resourceRecord of resourceRecords) {\n            const timespans = resourceRecord.calendar\n                ?.getWorkingTimeRanges(startDate, endDate)\n                .map(timespan => new CalendarHighlightModel(timespan));\n            if (timespans) {\n                me.highlight.set(resourceRecord, timespans);\n                currentOrientation.refreshEventsForResource(resourceRecord, true, false);\n            }\n        }\n        if (resourceRecords.length > 0) {\n            currentOrientation.onRenderDone();\n        }\n        me.client.syncSplits?.(split => split.highlightResourceCalendars(resourceRecords, clearExisting));\n    }\n    /**\n     * Removes all highlight elements.\n     * @on-owner\n     */\n    unhighlightCalendars() {\n        const me = this;\n        if (!me.highlight) {\n            // We're not highlighting anything, bail out\n            return;\n        }\n        const\n            { currentOrientation } = me.client,\n            resources              = me.highlight.keys();\n        me.highlight = null;\n        for (const resource of resources) {\n            currentOrientation.refreshEventsForResource(resource, true, false);\n        }\n        currentOrientation.onRenderDone();\n        me.client.syncSplits?.(split => split.unhighlightCalendars());\n    }\n    // endregion\n    // region event listeners\n    onEventDragStart({ context }) {\n        if (this.disabled) {\n            return;\n        }\n        const\n            me               = this,\n            { client }       = me,\n            { eventRecords } = context,\n            resourceRecords  = context.availableResources =\n                client.features.eventDrag.constrainDragToResource\n                    ? [context.resourceRecord]\n                    : me.collectAvailableResources?.({\n                        scheduler : client,\n                        eventRecords\n                    }) ?? client.resourceStore.records;\n        me.highlightCalendar(eventRecords, resourceRecords);\n    }\n    onEventResizeStart({ eventRecord, resourceRecord }) {\n        if (!this.disabled) {\n            this.highlightCalendar(eventRecord, [resourceRecord]);\n        }\n    }\n    onDragCreateStart({ eventRecord, resourceRecord }) {\n        if (!this.disabled) {\n            this.highlightCalendar(eventRecord, [resourceRecord]);\n        }\n    }\n    // endregion\n    // Called on render of resources events to get events to render. Add any ranges\n    // (chained function from Scheduler)\n    getEventsToRender(resource, events) {\n        const timespans = this.highlight?.get(resource);\n        timespans && events.push(...timespans);\n        return events;\n    }\n    onEventDataGenerated(renderData) {\n        const { eventRecord } = renderData;\n        if (eventRecord.isCalendarHighlightModel) {\n            const { inflate } = this;\n            // Flag that we should fill entire row/col\n            renderData.fillSize = this.client.isVertical;\n            // Add our own cls\n            renderData.wrapperCls['b-sch-highlighted-calendar-range'] = 1;\n            // Add label\n            renderData.children.push({\n                className : 'b-sch-event-content',\n                html      : eventRecord.name,\n                dataset   : {\n                    taskBarFeature : 'content'\n                }\n            });\n            // Inflate\n            renderData.width += inflate * 2;\n            renderData.height += inflate * 2;\n            renderData.left -= inflate;\n            renderData.top -= inflate;\n            // Event data for DOMSync comparison, unique per calendar & resource combination\n            renderData.eventId = `${this.generateElementId(eventRecord)}-resource-${renderData.resourceRecord.id}`;\n        }\n    }\n    updateDisabled(disabled, was) {\n        super.updateDisabled(disabled, was);\n        if (disabled) {\n            this.unhighlightCalendars();\n        }\n    }\n    shouldInclude(eventRecord) {\n        return eventRecord.isCalendarHighlightModel;\n    }\n    // No classname on Scheduler's/Gantt's element\n    get featureClass() {}\n}\nCalendarHighlight._$name = 'CalendarHighlight'; GridFeatureManager.registerFeature(CalendarHighlight, false, 'SchedulerPro');\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport SchedulerDependencyEdit from '../../Scheduler/feature/DependencyEdit.js';\nimport '../../Core/widget/Checkbox.js';\nimport TransactionalFeature from '../../Scheduler/feature/mixin/TransactionalFeature.js';\n/**\n * @module SchedulerPro/feature/DependencyEdit\n */\n/**\n * Feature that displays a popup containing fields for editing dependency data.\n *\n * This feature is **disabled** by default.\n *\n * For info on enabling it, see {@link Grid/view/mixin/GridFeatures}.\n *\n * {@inlineexample SchedulerPro/feature/DependencyEdit.js}\n *\n * @demo SchedulerPro/dependencies/\n *\n * @extends Scheduler/feature/DependencyEdit\n * @classtype dependencyEdit\n * @feature\n *\n * @typings Scheduler.feature.DependencyEdit -> Scheduler.feature.SchedulerDependencyEdit\n */\nexport default class DependencyEdit extends TransactionalFeature(SchedulerDependencyEdit) {\n    //region Config\n    static get $name() {\n        return 'DependencyEdit';\n    }\n    static get configurable() {\n        return {\n            /**\n             * True to show the lag field for the dependency\n             * @config {Boolean}\n             * @default\n             * @category Editor widgets\n             */\n            showLagField : true,\n            editorConfig : {\n                items : {\n                    activeField : {\n                        type  : 'checkbox',\n                        name  : 'active',\n                        label : 'L{Active}'\n                    }\n                }\n            }\n        };\n    }\n    //endregion\n    async editDependency(record) {\n        if (await super.editDependency(record)) {\n            await this.startFeatureTransaction();\n        }\n    }\n    afterSave() {\n        this.finishFeatureTransaction().then(() => {\n            super.afterSave();\n        });\n    }\n    afterDelete() {\n        this.finishFeatureTransaction().then(() => {\n            super.afterDelete();\n        });\n    }\n    afterCancel() {\n        this.rejectFeatureTransaction();\n        super.afterCancel();\n    }\n}\nDependencyEdit._$name = 'DependencyEdit'; GridFeatureManager.registerFeature(DependencyEdit, false);\n", "import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport Tooltip from '../../Core/widget/Tooltip.js';\n/**\n * @module SchedulerPro/feature/EventBuffer\n */\n/**\n * Feature that allows showing additional time before & after an event, to visualize things like travel time - or the time you\n * need to prepare a room for a meeting + clean it up after.\n *\n * The feature relies on two model fields: {@link SchedulerPro.model.EventModel#field-preamble} and\n * {@link SchedulerPro.model.EventModel#field-postamble} which are used to calculate overall start and end dates used to\n * position the event. Buffer time overlaps the same way events overlap (as you can see in the inline demo below). It\n * should also be noted that buffer time is ignored for milestones.\n *\n * {@inlineexample SchedulerPro/feature/EventBuffer.js}\n *\n * This feature is **disabled** by default\n *\n * @extends Core/mixin/InstancePlugin\n * @classtype eventBuffer\n * @feature\n * @demo SchedulerPro/travel-time\n */\nexport default class EventBuffer extends InstancePlugin {\n    static get $name() {\n        return 'EventBuffer';\n    }\n    static get configurable() {\n        return {\n            /**\n             * Show buffer duration labels\n             * @config {Boolean}\n             * @default\n             */\n            showDuration : true,\n            /**\n             * A function which receives data about the buffer time and returns a html string to show in a tooltip when\n             * hovering a buffer time element\n             *\n             * @config {Function}\n             * @param {Object} data Data\n             * @param {Core.data.Duration} data.duration Buffer time duration\n             * @param {Boolean} data.before `true` if this is a buffer time before the event start, `false` if after\n             * @param {SchedulerPro.model.EventModel} data.eventRecord The event record\n             * @returns {String} String representing the HTML markup\n             */\n            tooltipTemplate : {\n                value   : null,\n                $config : 'nullify'\n            }\n        };\n    }\n    static get pluginConfig() {\n        return {\n            chain : ['onEventDataGenerated']\n        };\n    }\n    //region Chained methods\n    updateTooltipTemplate(tooltipTemplate) {\n        const me = this;\n        if (tooltipTemplate) {\n            me.tooltip = Tooltip.new({\n                forElement  : me.client.timeAxisSubGridElement,\n                forSelector : '.b-sch-event-buffer-before,.b-sch-event-buffer-after',\n                align       : {\n                    align  : 'b-t',\n                    offset : [0, 10]\n                },\n                getHtml({ activeTarget }) {\n                    const\n                        eventRecord = me.client.resolveEventRecord(activeTarget),\n                        before      = activeTarget.matches('.b-sch-event-buffer-before'),\n                        duration    = before ? eventRecord.preamble : eventRecord.postamble;\n                    return me.tooltipTemplate({ eventRecord, duration, before });\n                }\n            });\n        }\n        else {\n            me.tooltip?.destroy();\n        }\n    }\n    onEventDataGenerated({ useEventBuffer, bufferBeforeWidth, bufferAfterWidth, eventRecord, wrapperChildren }) {\n        if (this.enabled && useEventBuffer) {\n            const\n                { isHorizontal }        = this.client,\n                { showDuration }        = this,\n                sizeProp                = isHorizontal ? 'width' : 'height',\n                preambleConfig          = {},\n                postambleConfig         = {};\n            let { preamble, postamble } = eventRecord;\n            this.renderer?.({ eventRecord, preambleConfig, postambleConfig });\n            if (!preamble?.magnitude) {\n                preamble = null;\n            }\n            if (!postamble?.magnitude) {\n                postamble = null;\n            }\n            wrapperChildren.push(\n                {\n                    className : {\n                        'b-sch-event-buffer'        : 1,\n                        'b-sch-event-buffer-before' : 1,\n                        'b-buffer-thin'             : !bufferBeforeWidth,\n                        [preambleConfig.cls]        : preambleConfig.cls\n                    },\n                    style : {\n                        [`${sizeProp}`] : `${bufferBeforeWidth}px`\n                    },\n                    children : (showDuration && preamble) ? [\n                        preambleConfig.icon ? {\n                            tag       : 'i',\n                            className : preambleConfig.icon\n                        } : undefined,\n                        {\n                            tag       : 'span',\n                            className : 'b-buffer-label',\n                            text      : preambleConfig.text ?? preamble.toString(true)\n                        }\n                    ] : undefined\n                },\n                {\n                    className : {\n                        'b-sch-event-buffer'       : 1,\n                        'b-sch-event-buffer-after' : 1,\n                        'b-buffer-thin'            : !bufferAfterWidth,\n                        [postambleConfig.cls]      : postambleConfig.cls\n                    },\n                    style : {\n                        [`${sizeProp}`] : `${bufferAfterWidth}px`\n                    },\n                    children : (showDuration && postamble) ? [\n                        {\n                            tag       : 'span',\n                            className : 'b-buffer-label',\n                            text      : postambleConfig.text ?? postamble.toString(true)\n                        },\n                        postambleConfig.icon ? {\n                            tag       : 'i',\n                            className : postambleConfig.icon\n                        } : undefined\n                    ] : undefined\n                }\n            );\n        }\n    }\n    //endregion\n    updateShowDuration() {\n        if (!this.isConfiguring) {\n            this.client.refreshWithTransition();\n        }\n    }\n    doDisable(disable) {\n        super.doDisable(disable);\n        const { client } = this;\n        if (!client.isConfiguring && client.isPainted) {\n            // Add a special CSS class to disable certain transitions\n            client.element.classList.add('b-eventbuffer-transition');\n            client.refreshWithTransition();\n            client.waitForAnimations().then(() => {\n                client.element.classList.remove('b-eventbuffer-transition');\n            });\n        }\n    }\n}\nEventBuffer._$name = 'EventBuffer'; GridFeatureManager.registerFeature(EventBuffer, false, 'SchedulerPro');\n", "import EventDrag from '../../Scheduler/feature/EventDrag.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\n/**\n * @module SchedulerPro/feature/EventSegmentDrag\n */\n/**\n * Allows user to drag and drop event segments within the row.\n *\n * {@inlineexample SchedulerPro/feature/EventSegments.js}\n *\n * This feature is **enabled** by default\n *\n * @extends Scheduler/feature/EventDrag\n * @classtype eventSegmentDrag\n * @feature\n */\nexport default class EventSegmentDrag extends EventDrag {\n    //region Config\n    static $name = 'EventSegmentDrag';\n    static get defaultConfig() {\n        return {\n            constrainDragToResource : true\n        };\n    }\n    static get configurable() {\n        return {\n            capitalizedEventName : 'EventSegment'\n        };\n    }\n    static get pluginConfig() {\n        return {\n            chain : ['onInternalPaint', 'isEventElementDraggable']\n        };\n    }\n    //endregion\n    //region Events\n    /**\n     * Fired on the owning Scheduler to allow implementer to use asynchronous finalization by setting\n     * `context.async = true` in the listener, to show a confirmation popup etc.\n     * ```javascript\n     *  scheduler.on('beforeEventSegmentDropFinalize', ({ context }) => {\n     *      context.async = true;\n     *      setTimeout(() => {\n     *          // async code don't forget to call finalize\n     *          context.finalize();\n     *      }, 1000);\n     *  })\n     * ```\n     *\n     * For synchronous one-time validation, simply set `context.valid` to true or false.\n     * ```javascript\n     *  scheduler.on('beforeEventSegmentDropFinalize', ({ context }) => {\n     *      context.valid = false;\n     *  })\n     * ```\n     * @event beforeEventSegmentDropFinalize\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source Scheduler instance\n     * @param {Object} context\n     * @param {Boolean} context.async Set true to not finalize the drag-drop operation immediately (e.g. to wait for user confirmation)\n     * @param {Scheduler.model.EventModel[]} context.eventRecords Dragged segments\n     * @param {Boolean} context.valid Set this to `false` to abort the drop immediately.\n     * @param {Function} context.finalize Call this method after an **async** finalization flow, to finalize the drag-drop operation. This method accepts one\n     * argument: pass `true` to update records, or `false` to ignore changes\n     */\n    /**\n     * Fired on the owning Scheduler after an event segment is dropped\n     * @event afterEventSegmentDrop\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source\n     * @param {Scheduler.model.EventModel[]} eventRecords Dropped segments\n     * @param {Boolean} valid\n     * @param {Object} context\n     */\n    /**\n     * Fired on the owning Scheduler when an event segment is dropped\n     * @event eventSegmentDrop\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source\n     * @param {Scheduler.model.EventModel[]} eventRecords Dropped segments\n     */\n    /**\n     * Fired on the owning Scheduler before event segment dragging starts. Return `false` to prevent the action.\n     * @event beforeEventSegmentDrag\n     * @on-owner\n     * @preventable\n     * @param {Scheduler.view.Scheduler} source Scheduler instance\n     * @param {Scheduler.model.EventModel[]} eventRecords Segments to drag\n     * @param {MouseEvent} event Browser event\n     */\n    /**\n     * Fired on the owning Scheduler when event segment dragging starts\n     * @event eventSegmentDragStart\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source Scheduler instance\n     * @param {Scheduler.model.EventModel[]} eventRecords Dragged segments\n     * @param {MouseEvent} event Browser event\n     */\n    /**\n     * Fired on the owning Scheduler when event segments are dragged\n     * @event eventSegmentDrag\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source Scheduler instance\n     * @param {Scheduler.model.EventModel[]} eventRecords Dragged segments\n     * @param {Date} startDate Start date for the current location\n     * @param {Date} endDate End date for the current location\n     * @param {Object} context\n     * @param {Boolean} context.valid Set this to `false` to signal that the current drop position is invalid.\n     */\n    /**\n     * Fired on the owning Scheduler after an event segment drag operation has been aborted\n     * @event eventSegmentDragAbort\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source Scheduler instance\n     * @param {Scheduler.model.EventModel[]} eventRecords Dragged segments\n     */\n    /**\n     * Fired on the owning Scheduler after an event segment drag operation regardless of the operation being cancelled\n     * or not\n     * @event eventSegmentDragReset\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source Scheduler instance\n     */\n    //endregion\n    //region Drag events\n    getTriggerParams(dragData) {\n        const { assignmentRecords, eventRecords, resourceRecord, browserEvent: event } = dragData;\n        return {\n            // `context` is now private, but used in WebSocketHelper\n            context : dragData,\n            eventRecords,\n            resourceRecord,\n            assignmentRecords,\n            event\n        };\n    }\n    triggerEventDrag(dragData, start) {\n        this.scheduler.trigger('eventSegmentDrag', Object.assign(this.getTriggerParams(dragData), {\n            startDate : dragData.startDate,\n            endDate   : dragData.endDate\n        }));\n    }\n    triggerDragStart(dragData) {\n        this.scheduler.navigator.skipNextClick = true;\n        this.scheduler.trigger('eventSegmentDragStart', this.getTriggerParams(dragData));\n    }\n    triggerDragAbort(dragData) {\n        this.scheduler.trigger('eventSegmentDragAbort', this.getTriggerParams(dragData));\n    }\n    triggerDragAbortFinalized(dragData) {\n        this.scheduler.trigger('eventSegmentDragAbortFinalized', this.getTriggerParams(dragData));\n    }\n    triggerAfterDrop(dragData, valid) {\n        this.scheduler.trigger('afterEventSegmentDrop', Object.assign(this.getTriggerParams(dragData), {\n            valid\n        }));\n        if (!valid) {\n            // Edge cases:\n            // 1. If this drag was a no-op, and underlying data was changed while drag was ongoing (e.g. web socket\n            // push), we need to manually force a view refresh to ensure a correct render state\n            //\n            // or\n            // 2. Events were removed before we dropped at an invalid point\n            const\n                { assignmentStore, eventStore } = this.client,\n                needRefresh                     = this.dragData.initialAssignmentsState.find(({\n                    resource, assignment\n                }, i) => {\n                    return !assignmentStore.includes(assignment) ||\n                        !eventStore.includes(assignment.event) ||\n                        resource.id !== this.dragData.assignmentRecords[i]?.resourceId;\n                });\n            if (needRefresh) {\n                this.client.refresh();\n            }\n        }\n    }\n    //endregion\n    //region Update records\n    /**\n     * Update events being dragged.\n     * @private\n     * @param context Drag data.\n     * @async\n     */\n    async updateRecords(context) {\n        const\n            me             = this,\n            { client }     = me,\n            copyKeyPressed = false;\n        let result;\n        if (!context.externalDropTarget) {\n            client.eventStore.suspendAutoCommit();\n            result = await me.updateSegment(client, context, copyKeyPressed);\n            client.eventStore.resumeAutoCommit();\n        }\n        // Tell the world there was a successful drop\n        client.trigger('eventSegmentDrop', Object.assign(me.getTriggerParams(context), {\n            isCopy               : copyKeyPressed,\n            event                : context.browserEvent,\n            targetEventRecord    : context.targetEventRecord,\n            targetResourceRecord : context.newResource,\n            externalDropTarget   : context.externalDropTarget\n        }));\n        return result;\n    }\n    /**\n     * Update assignments being dragged\n     * @private\n     * @async\n     */\n    async updateSegment(client, context) {\n        // The code is written to emit as few store events as possible\n        const\n            me                  = this,\n            isVertical          = client.mode === 'vertical',\n            {\n                eventRecords,\n                assignmentRecords,\n                timeDiff\n            }                   = context;\n        client.suspendRefresh();\n        let updated = false;\n        if (isVertical) {\n            eventRecords.forEach((draggedEvent, i) => {\n                const eventBar = context.eventBarEls[i];\n                delete draggedEvent.instanceMeta(client).hasTemporaryDragElement;\n                // If it was created by a call to scheduler.currentOrientation.addTemporaryDragElement\n                // then release it back to be available to DomSync next time the rendered event block\n                // is synced.\n                if (eventBar.dataset.transient) {\n                    eventBar.remove();\n                }\n            });\n        }\n        const\n            eventBarEls  = context.eventBarEls.slice(),\n            draggedEvent = context.eventRecord,\n            newStartDate = me.adjustStartDate(context.origStart, timeDiff);\n        if (!DateHelper.isEqual(draggedEvent.startDate, newStartDate)) {\n            client.endListeningForBatchedUpdates();\n            me.cancelBatchUpdate(draggedEvent);\n            draggedEvent.startDate = newStartDate;\n            updated = true;\n            await client.project.commitAsync();\n            me.endBatchUpdate?.(draggedEvent);\n        }\n        client.resumeRefresh(false);\n        if (assignmentRecords.length > 0) {\n            if (!updated) {\n                context.valid = false;\n            }\n            else {\n                // https://github.com/bryntum/support/issues/630\n                // Force re-render when using fillTicks. If date changed within same tick the element won't actually\n                // change and since we hijacked it for drag it won't be returned to its original position\n                if (client.fillTicks) {\n                    eventBarEls.forEach(el => delete el.lastDomConfig);\n                }\n                // Not doing full refresh above, to allow for animations\n                client.refreshWithTransition();\n            }\n        }\n    }\n    //endregion\n    //region Drag data\n    // Prevent event draggind when it starts over a resize handle\n    isEventElementDraggable(eventElement, eventRecord, el, event) {\n        const me = this;\n        // ALLOW event drag:\n        // - if segments dragging is disabled or event is not segmented\n        if (me.disabled || !(eventRecord.isEventSegment || eventRecord.segments)) {\n            return true;\n        }\n        // otherwise make sure EventDrag is not trying to handle a segment element drag\n        return !el.closest(me.drag.targetSelector);\n    }\n    buildDragHelperConfig() {\n        const config = super.buildDragHelperConfig();\n        config.targetSelector = '.b-sch-event-segment:not(.b-first)';\n        return config;\n    }\n    getMinimalDragData(info) {\n        const\n            me                = this,\n            { client }        = me,\n            element           = me.getElementFromContext(info),\n            eventRecord       = client.resolveEventRecord(element),\n            resourceRecord    = client.resolveResourceRecord(element),\n            assignmentRecord  = client.resolveAssignmentRecord(element),\n            assignmentRecords = assignmentRecord ? [assignmentRecord] : [],\n            eventRecords      = [eventRecord];\n        return {\n            eventRecord,\n            resourceRecord,\n            assignmentRecord,\n            eventRecords,\n            assignmentRecords\n        };\n    }\n    beginBatchUpdate(eventRecord) {\n        eventRecord.event.beginBatch();\n        eventRecord.beginBatch();\n    }\n    endBatchUpdate(eventRecord) {\n        // could be no \"event\" if segments got merged after dragging\n        eventRecord.event?.endBatch();\n        eventRecord.endBatch();\n    }\n    cancelBatchUpdate(eventRecord) {\n        eventRecord.event?.cancelBatch();\n        eventRecord.cancelBatch();\n    }\n    setupProductDragData(info) {\n        const\n            me            = this,\n            { client }    = me,\n            element       = me.getElementFromContext(info),\n            {\n                eventRecord,\n                resourceRecord\n            }             = me.getMinimalDragData(info),\n            eventBarEls   = [],\n            mainEventElement = client.getElementsFromEventRecord(eventRecord.event, resourceRecord, true)[0];\n        if (me.constrainDragToResource && !resourceRecord) {\n            throw new Error('Resource could not be resolved for event: ' + eventRecord.id);\n        }\n        // We tweak last segment drag in RTL mode so its X-ccordinate is always zero\n        // so we have to tell DragHelper to still process corresponding drop event though\n        // the coordinate hasn't changed\n        me.drag.ignoreSamePositionDrop = !client.rtl || eventRecord.nextSegment;\n        // During this batch we want the client's UI to update itself using the proposed changes\n        // Only if startDrag has not already done it\n        if (!client.listenToBatchedUpdates) {\n            client.beginListeningForBatchedUpdates();\n        }\n        // Do changes in batch mode while dragging\n        me.beginBatchUpdate(eventRecord);\n        const\n            dateConstraints    = me.getDateConstraints?.(resourceRecord, eventRecord),\n            constrainRectangle = me.constrainRectangle = me.getConstrainingRectangle(dateConstraints, resourceRecord, eventRecord),\n            eventRegion        = Rectangle.from(element, client.foregroundCanvas, true),\n            mainEventRegion    = Rectangle.from(mainEventElement, client.foregroundCanvas, true);\n        // For segment we shift constrainRectangle by the main event offset\n        constrainRectangle.translate(-mainEventRegion.x);\n        super.setupConstraints(\n            constrainRectangle,\n            eventRegion,\n            client.timeAxisViewModel.snapPixelAmount,\n            Boolean(dateConstraints.start)\n        );\n        eventBarEls.push(element);\n        return {\n            record          : eventRecord,\n            draggedEntities : [eventRecord],\n            dateConstraints : dateConstraints?.start ? dateConstraints : null,\n            eventBarEls,\n            mainEventElement\n        };\n    }\n    suspendRecordElementRedrawing() {}\n    suspendElementRedrawing() {}\n    getDateConstraints(resourceRecord, eventRecord) {\n        let { minDate, maxDate } = super.getDateConstraints(resourceRecord, eventRecord);\n        // A segment movement is constrained by its neighbour segments if any\n        if (eventRecord.previousSegment && (!minDate || minDate < eventRecord.previousSegment.endDate)) {\n            minDate = eventRecord.previousSegment.endDate;\n        }\n        if (eventRecord.nextSegment && (!maxDate || maxDate < eventRecord.nextSegment.startDate)) {\n            maxDate = eventRecord.nextSegment.startDate;\n        }\n        return {\n            start : minDate,\n            end   : maxDate\n        };\n    }\n    get tipId() {\n        return `${this.client.id}-segment-drag-tip`;\n    }\n    internalSnapToPosition(snapTo) {\n        super.internalSnapToPosition();\n        // for RTL we pin last segment to 0px offset ..the main event element will get updated\n        if (this.client.rtl && !this.dragData.eventRecord.nextSegment) {\n            snapTo.x = 0;\n        }\n    }\n    updateDragContext(context, event) {\n        super.updateDragContext(...arguments);\n        const\n            { client } = this,\n            {\n                dirty,\n                eventRecord,\n                endDate\n            } = this.dragData;\n        // If dragging the last segment update the main event width accordingly\n        // need this to update dependency properly while dragging\n        if (dirty && !eventRecord.nextSegment) {\n            const { enableEventAnimations } = client;\n            client.enableEventAnimations = false;\n            eventRecord.event.set('endDate', endDate);\n            if (client.features.eventBuffer?.enabled) {\n                eventRecord.event.wrapEndDate = endDate;\n            }\n            client.enableEventAnimations = enableEventAnimations;\n        }\n    }\n    //endregion\n}\nEventSegmentDrag._$name = 'EventSegmentDrag'; GridFeatureManager.registerFeature(EventSegmentDrag, true, 'SchedulerPro');\nGridFeatureManager.registerFeature(EventSegmentDrag, false, 'ResourceHistogram');\n", "import ArrayHelper from '../../Core/helper/ArrayHelper.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport DomSync from '../../Core/helper/DomSync.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport AttachToProjectMixin from '../../Scheduler/data/mixin/AttachToProjectMixin.js';\n/**\n * @module SchedulerPro/feature/NestedEvents\n */\nconst borderWidths     = {\n    border : 1,\n    hollow : 2\n};\n// Future improvements might include:\n// * Add info to EventTooltip, parent could display number of children, child could display parent name\n// * Add parent picker to EventEdit\n// * Handle reassigning in editor, what happens if you reassign to a resource that events parent is not assigned to...\n/**\n * A feature that renders child events nested inside their parent. Requires Scheduler Pro to use a tree event store\n * (normally handled automatically when events in data has children).\n *\n * {@inlineexample SchedulerPro/feature/NestedEvents.js}\n *\n * The feature has configs for {@link #config-eventLayout}, {@link #config-resourceMargin} and {@link #config-barMargin}\n * that are separate from those on Scheduler Pro and only affect nested events.\n *\n * You can by default drag nested events out of their parents and drop any event onto root level events to nest. The\n * drag and drop behaviour can be customized using the {@link #config-constrainDragToParent},\n * {@link #config-allowNestingOnDrop} and {@link #config-allowDeNestingOnDrop} configs.\n *\n * <div class=\"note\">Note that for a nested event to show up for a resource both the parent and the nested event has to\n * be assigned to that resource.</div>\n *\n * ## Parent / children scheduling\n *\n * Scheduler Pro uses a scheduling engine closely related to the one used by Gantt (a subset of it). It for example\n * schedules based on calendars (skipping non-working time), dependencies and constraints.\n *\n * ### Scheduling parents\n *\n * Part of the scheduling engines default logic is that parent events' start and end dates (and thus duration) is\n * defined by their children. This means that if you remove the latest scheduled child of a parent, the parents end date\n * and duration will be adjusted to match the new latest scheduled child (shrink-wrapping children).\n *\n * Depending on what you plan to use nested events for in your application, this might not be the desired behaviour. If\n * you want the parent event to keep its dates regardless of its children, you should flag it as\n * {@link SchedulerPro/model/EventModel#field-manuallyScheduled}.\n *\n * {@note}\n * Not that by flagging an event as manually scheduled, it will no longer take non-working time or constraints into\n * account either.\n * {/@note}\n *\n * A parent defined like this will shrink / grow with its children:\n *\n * ```json\n * {\n *     \"id\"        : 1,\n *     \"startDate\" : \"2022-03-24\",\n *     \"children\"  : [\n *         ...\n *     ]\n * }\n * ```\n *\n * Try removing an event here to see what happens:\n *\n * {@inlineexample SchedulerPro/feature/NestedEventsNotManually.js}\n *\n * A parent with `manuallyScheduled : true` will **not** shrink / grow with is children:\n *\n * ```json\n * {\n *     \"id\"                : 1,\n *     \"startDate\"         : \"2022-03-24\",\n *     \"duration\"          : 10,\n *     \"manuallyScheduled\" : true\n *     \"children\"          : [\n *         ...\n *     ]\n * }\n * ```\n *\n * Try the same thing here:\n *\n * {@inlineexample SchedulerPro/feature/NestedEventsManually.js}\n *\n * {@note}Note that this also makes resizing a parent event that is not manually scheduled useless, it would only snap\n * back to the dates defined by its children. To avoid confusion, resizing is turned off for parent events unless they\n * have <code>manuallyScheduled: true</code>{/@note}\n *\n * #### Drag and drop for parent events\n *\n * Normally the dates of a parent event is defined by its children (as described above), with exception for when drag\n * dropping a parent event along the time axis. In this case the operation will update the dates of all the children,\n * which will thus also move the parent event in time.\n *\n * If a parent event is dragged to a new resource, all its children will also be assigned to that resource.\n *\n * ### Scheduling children (nested events)\n *\n * Nested events are scheduled using much of the same logic as normal/parent events, but with some differences:\n *\n * * To maintain the relative position in time of nested events within their parent, they utilize a `delayFromParent`\n *   field. The field accepts a magnitude of `durationUnit` (defaults to days). Sample dataset (note that supplying\n *   `delayFromParent` is optional, see the next bullet):\n *\n *   ```json\n *   {\n *     \"name\" : \"Parent\",\n *     \"startDate\" : \"2023-08-21\", // Monday\n *     \"children\" : [\n *       { \"name\" : \"Child 1\", \"delayFromParent\" : 0 }\n *       { \"name\" : \"Child 2\", \"delayFromParent\" : 2 }\n *     ]\n *   }\n *   ```\n *\n *   Parent starts on 2023-08-21, the first child will start on the same date, the second child will start 2 days later\n *   (2023-08-23).\n *\n *   If the parent instead started on a Friday, the outcome would be that the second child starts 2 working days later,\n *   which would be the following Tuesday.\n *\n *   Note that when supplying `delayFromParent` in data, since parent events shrink wrap their children, the earliest\n *   child must have `\"delayFromParent\": 0`.\n *\n * * If `delayFromParent` is not present in the loaded data, the field is calculated as `nestedStart - parentStart -\n *   non-working time` (for example if parent starts on a Friday, and nested event on a Monday, `delayFromParent` will\n *   be 1). Sample dataset:\n *\n *    ```json\n *   {\n *     \"name\" : \"Parent\",\n *     \"startDate\" : \"2023-08-21\", // Monday\n *     \"children\" : [\n *       { \"name\" : \"Child 1\", \"startDate\" : \"2023-08-21\" },\n *       { \"name\" : \"Child 2\", \"startDate\" : \"2023-08-23\" }\n *     ]\n *   }\n *   ```\n *\n *   Yields the same result as above, parent and first child starts on 2023-08-21, second child starts 2 days later.\n *   Child 1 gets `delayFromParent: 0` and child 2 gets `delayFromParent: 2` from the calculation.\n *\n * ## Dependencies\n *\n * Nested events support dependencies, with some caveats:\n *\n * * Dependency lines are by default drawn on the top of events, instead of behind them. This is to ensure they are\n *   visible when drawn into a parent (or fully within one). The Dependencies feature can be configured with\n *   {@link Scheduler/feature/Dependencies#config-drawAroundParents} set to `true` to instead attempt to draw around\n *   parents when possible.\n * * When using dependencies, the body of parent events with overflowing nested children is not scrollable. This is\n *   because there is no tracking of the scrolling of parent events, and thus dependency lines would not be drawn\n *   correctly on scroll.\n * * Dependencies are only supported for one level of nesting (with `maxNesting: 1`, which is the default).\n *\n * {@inlineexample SchedulerPro/feature/NestedEventsDependencies.js}\n *\n * ## Caveats\n *\n * Usage of the feature comes with some requirements/caveats:\n * * As already mentioned, it requires a tree event store\n * * Requires using an AssignmentStore, the legacy single assignment mode does not handle tree stores\n * * Scheduler must use stack or overlap {@link SchedulerPro/view/SchedulerPro#config-eventLayout}, pack not supported\n * * {@link Scheduler/feature/EventDragSelect} is not supported\n * * Multi event drag is not supported for nested events\n * * Cannot {@link Scheduler/feature/EventDragCreate} within parent events\n * * {@link Scheduler/feature/Labels} are not supported for nested events\n * * {@link SchedulerPro/feature/EventBuffer} won't work with nested events\n * * {@link SchedulerPro/feature/TaskEdit} does not allow assigning resources or dependencies to nested events\n *\n * This feature is **disabled** by default.\n * For info on enabling it, see {@link Grid.view.mixin.GridFeatures}.\n *\n * @classtype nestedEvents\n *\n * @extends Core/mixin/InstancePlugin\n * @feature\n */\nexport default class NestedEvents extends InstancePlugin.mixin(AttachToProjectMixin, Delayable) {\n    static $name = 'NestedEvents';\n    //region Config\n    static configurable = {\n        /**\n         * This config defines how to handle overlapping nested events. Valid values are:\n         * - `stack`, events use fixed height and stack on top of each other (not supported in vertical mode)\n         * - `pack`, adjusts event height\n         * - `none`, allows events to overlap\n         *\n         * <div class=\"note\">Note that stacking works differently for nested events as compared to normal events (and\n         * not at all in vertical mode). The height of the parent event will never change, all nested events use\n         * {@link #config-eventHeight fixed height} and will stack until all available space is consumed, after which\n         * they will overflow the parent.</div>\n         *\n         * <div class=\"note\">Also note that stacked nested events are clipped by the parent, making it scrollable on\n         * vertical overflow. This cannot be combined with sticky events. If stacking events in your app won't overflow\n         * the parent, you can specify `overflow: visible` on `.b-nested-events-container.b-nested-events-layout-stack`\n         * to not clip and make sticky events work.</div>\n         *\n         * @prp {'stack'|'pack'|'none'}\n         * @default\n         */\n        eventLayout : 'pack',\n        /**\n         * Vertical (horizontal in vertical mode) space between nested event bars, in px\n         * @prp {Number}\n         * @default\n         */\n        barMargin : 5,\n        /**\n         * Control how much space to leave between the first nested event bar/last nested event and the parent event (top/bottom\n         * margin within the parent event row in horizontal mode, left/right margin within the parent event column in\n         * vertical mode), in px.\n        *\n        * It's also possible to set different values for top/left and bottom/right\n        * by assigning  an object to `resourceMargin` with `start` (margin top in horizontal mode,\n        * margin left in vertical mode) and `end` (margin bottom / margin right) properties:\n        * ```javascript\n        * scheduler = new SchedulerPro({\n        *     features : {\n        *         nestedEvents : {\n        *             resourceMargin : {\n        *                 start : 15,\n        *                 end   : 1\n        *             }\n        *         }\n        *     }\n        * });\n        * ```\n        *\n        * @prp {Number|ResourceMarginConfig}\n        * @category Scheduled events\n        */\n        resourceMargin : 0,\n        /**\n         * Fixed event height (width in vertical mode) to use when configured with `eventLayout : 'stack'`.\n         *\n         * Also accepts an array, used to control height for each level if nesting deeper than 1 level. Make sure you\n         * supply a value for each level, where later values are smaller than earlier ones.\n         *\n         * ```javascript\n         * const scheduler = new SchedulerPro({\n         *     features : {\n         *         nestedEvents : {\n         *         eventHeight : [40, 20]\n         *     }\n         * });\n         * ```\n         *\n         * @prp {Number|Number[]}\n         * @default\n         */\n        eventHeight : 30,\n        /**\n         * Space (in px) in a parent element reserved for displaying a title etc. Used to compute available space for\n         * the nested events container inside the parent.\n         *\n         * Setting this config updates the ` --schedulerpro-nested-event-header-height` CSS variable.\n         *\n         * @prp {Number}\n         * @default\n         */\n        headerHeight : 20,\n        /**\n         * Constrains dragging of nested events within their parent when configured as `true`, allows them to be\n         * dragged out of it when configured as `false` (the default).\n         * @prp {Boolean}\n         * @default\n         */\n        constrainDragToParent : false,\n        /**\n         * Allow an event to be dropped on another to nest it.\n         *\n         * Dropping an event on another will add the dropped event as a child of the target, turning the target into a\n         * parent if it was not already.\n         *\n         * Parent events dropped on another event are ignored.\n         *\n         * @prp {Boolean}\n         * @default\n         */\n        allowNestingOnDrop : true,\n        /**\n         * Allow dropping a nested event directly on a resource to de-nest it, turning it into an ordinary event.\n         *\n         * Requires {@link #config-constrainDragToParent} to be configured with `false` to be applicable.\n         *\n         * @prp {Boolean}\n         * @default\n         */\n        allowDeNestingOnDrop : true,\n        /**\n         * Constrains resizing of nested events to their parents start and end dates when configured as `true` (the\n         * default), preventing them from changing their parents dates.\n         *\n         * Configure as `false` if you want to allow resizing operations to extend the parents dates (only applies for\n         * parents not configured with `manuallyScheduled: true`).\n         *\n         * <div class=\"note\">Note that when using `eventLayout: stack` the nested events are clipped by the parent, the\n         * part extending outside if not constrained to parent will not be shown until it re-renders after resize. If\n         * stacking events in your app won't overflow the parent, you can specify `overflow: visible` on\n         * `.b-nested-events-container.b-nested-events-layout-stack` to not clip.</div>\n         *\n         * @prp {Boolean}\n         * @default\n         */\n        constrainResizeToParent : true,\n        /**\n         * Maximum nesting level for events.\n         *\n         * Larger depths than 2 are not recommended, even if technically possible.\n         *\n         * @prp {Number}\n         * @default\n         */\n        maxNesting : 1\n    };\n    static pluginConfig = {\n        before : ['onEventStoreBatchedUpdate'],\n        chain  : [\n            'getEventsToRender', 'processEventDrop', 'processCrossSchedulerEventDrop',\n            'beforeEventDragStart', 'afterEventDragStart', 'afterEventDragAbortFinalized',\n            'checkEventDragValidity', 'afterEventResizeStart', 'afterRenderEvent'\n        ],\n        override : [\n            'getResourceMarginObject', 'getBarMargin', 'getAppliedResourceHeight', 'getResourceWidth', 'getEventLayout',\n            'getElementFromAssignmentRecord', 'scheduleEvent'\n        ]\n    };\n    static delayable = {\n        refreshClient : 'raf'\n    };\n    //endregion\n    construct(client, config) {\n        super.construct(client, config);\n        // EventStore has to be a tree store for the feature to work.\n        // If it starts empty, it might not be flagged as such. Help it out.\n        this.client.eventStore.tree = true;\n    }\n    refreshClient() {\n        this.client.refreshWithTransition();\n    }\n    possiblyRefreshClient() {\n        !this.client.isConfiguring && this.refreshClient();\n    }\n    doDisable() {\n        this.possiblyRefreshClient();\n    }\n    //region Props\n    updateEventLayout(layout) {\n        if (layout === 'stack' && this.client.isVertical) {\n            console.warn('Stacked nested events are not supported in vertical mode');\n        }\n        this.possiblyRefreshClient();\n    }\n    updateBarMargin() {\n        this.possiblyRefreshClient();\n    }\n    updateResourceMargin() {\n        this.possiblyRefreshClient();\n    }\n    changeEventHeight(height) {\n        // Always an array for internal use, would be breaking to change it externally\n        this._eventHeights = ArrayHelper.asArray(height);\n        return height;\n    }\n    updateEventHeight() {\n        this.possiblyRefreshClient();\n    }\n    updateHeaderHeight(height) {\n        this.client.element.style.setProperty('--schedulerpro-nested-event-header-height', `${height}px`);\n        this.possiblyRefreshClient();\n    }\n    // Nested events has their own layout setting\n    getEventLayout(resourceRecord, parentEventRecord) {\n        if (parentEventRecord) {\n            return { type : this.eventLayout };\n        }\n        return this.overridden.getEventLayout(resourceRecord);\n    }\n    // Specific resource margin for nested events\n    getResourceMarginObject(resourceRecord, parentEventRecord) {\n        if (parentEventRecord && !parentEventRecord.isRoot) {\n            const margin = this.resourceMargin;\n            if (typeof margin === 'number') {\n                return {\n                    start : margin,\n                    end   : margin,\n                    total : margin * 2\n                };\n            }\n            else {\n                margin.total = margin.start + margin.end;\n                return margin;\n            }\n        }\n        return this.overridden.getResourceMarginObject(resourceRecord);\n    }\n    // Specific bar margin for nested events\n    getBarMargin(resourceRecord, parentEventRecord) {\n        if (parentEventRecord && !parentEventRecord.isRoot) {\n            return this.barMargin;\n        }\n        return this.overridden.getBarMargin(resourceRecord);\n    }\n    // Use height available inside the parent event\n    getAppliedResourceHeight(resourceRecord, parentEventRecord) {\n        const me = this;\n        if (parentEventRecord && !parentEventRecord.isRoot) {\n            if (me.eventLayout === 'stack') {\n                const\n                    eventHeight = me._eventHeights[parentEventRecord.childLevel],\n                    { total } = me.getResourceMarginObject(resourceRecord, parentEventRecord);\n                // Layout subtracts resourceMargin.start + resourceMargin.end, added here to get eventHeight correct after\n                return eventHeight + total;\n            }\n            else {\n                const borderWidth = borderWidths[me.client.getEventStyle(parentEventRecord, resourceRecord)] ?? 0;\n                return me.currentParentsHeight - me.headerHeight - borderWidth;\n            }\n        }\n        return me.overridden.getAppliedResourceHeight(resourceRecord);\n    }\n    getResourceWidth(resourceRecord, parentEventRecord) {\n        if (parentEventRecord && !parentEventRecord.isRoot) {\n            return this.currentParentsWidth - this.headerHeight;\n        }\n        return this.overridden.getResourceWidth(resourceRecord);\n    }\n    //endregion\n    //region CRUD listeners\n    attachToEventStore(eventStore) {\n        eventStore?.ion({\n            name    : 'eventStore',\n            change  : 'onEventStoreChange',\n            thisObj : this\n        });\n    }\n    onEventStoreChange({ records }) {\n        // Refresh if a nested event was changed (but not if it is aborting a drag, which might occur if there is\n        // dependency pinning the nested event & drop changes delayFromParent in a way that the dep still pins it)\n        if (!this.client.features?.eventDrag.isDragging && records?.some(r => r.parent && !r.parent.isRoot)) {\n            this.refreshClient();\n        }\n    }\n    onEventStoreBatchedUpdate({ records }) {\n        // Refresh if a nested event was changed, and we are listening for batched changes (resizing)\n        if (this.client.listenToBatchedUpdates && records?.some(r => r.parent && !r.parent.isRoot)) {\n            this.refreshClient();\n            // Prevent default handler\n            return false;\n        }\n    }\n    //endregion\n    //region Drag\n    // Move event element to foreground canvas during drag. Has to happen before drag starts for the feature to pick up\n    // correct coordinates to resolve resource by, transition back to on abort etc.\n    beforeEventDragStart(context, dragData) {\n        const\n            me                                 = this,\n            { client }                         = me,\n            { eventRecord, assignmentRecords } = dragData,\n            { parentElement }                  = context.element;\n        // Dragging nested events?\n        if (eventRecord.parent && parentElement !== client.foregroundCanvas) {\n            me.isDraggingNestedEvent = true;\n            // Remember origin to be able to restore on abort (success redraws so that will be covered anyway)\n            context.originalParentElement = parentElement;\n            context.originalBounds = [];\n            for (const assignment of assignmentRecords) {\n                const { event } = assignment;\n                // UI should not allow selecting nested events from different parents, but it is programmatically\n                // possible. We only include from the dragged events parent here, behaviour for mixed parents are for\n                // now undefined\n                if (event.parent === eventRecord.parent) {\n                    const eventElement = client.getElementFromAssignmentRecord(assignment, true);\n                    context.originalBounds.push({\n                        element : eventElement,\n                        bounds  : Rectangle.from(eventElement, parentElement)\n                    });\n                    if (!me.constrainDragToParent && client.features.eventDrag.constrainDragToTimeline) {\n                        // Pull nested events out\n                        const relativeBounds = Rectangle.from(eventElement, client.timeAxisSubGridElement);\n                        eventElement.style.top = `${relativeBounds.top}px`;\n                        eventElement.style.left = `${relativeBounds.left}px`;\n                        DomSync.addChild(client.foregroundCanvas, eventElement, assignment.id);\n                    }\n                }\n            }\n        }\n        else {\n            me.isDraggingNestedEvent = false;\n        }\n    }\n    // Setup constraints when drag starts if needed\n    afterEventDragStart(context, dragData) {\n        // Constrain to current parent?\n        if (this.isDraggingNestedEvent && this.constrainDragToParent) {\n            const\n                { eventDrag } = this.client.features,\n                { parent }    = dragData.eventRecord,\n                parentBounds  = context.originalParentElement.getBoundingClientRect();\n            // Constrain top / bottom\n            eventDrag.setYConstraint(0, parentBounds.height - context.originalBounds[0].bounds.height);\n            // For left / right we also have to constrain the dates, otherwise only the element will be constrained\n            eventDrag.setXConstraint(0, parentBounds.width - context.originalBounds[0].bounds.width);\n            dragData.dateConstraints = { start : parent.startDate, end : parent.endDate };\n        }\n    }\n    checkEventDragValidity({ targetEventRecord, eventRecord, timeDiff, newResource, resourceRecord }) {\n        const me = this;\n        // Disallow dropping on a blank space in a resource if configured to not allow de-nesting\n        // (ignore first round, targetEventRecord cannot be resolved until on next, which we determine here by checking\n        // timeDiff or resource change)\n        if (me.isDraggingNestedEvent && !me.allowDeNestingOnDrop && !targetEventRecord && (timeDiff || newResource !== resourceRecord)) {\n            return {\n                valid   : false,\n                message : me.L('L{deNestingNotAllowed}')\n            };\n        }\n        // Disallow dropping on a new parent if configured to not allow nesting\n        if (!me.allowNestingOnDrop && targetEventRecord && targetEventRecord !== eventRecord.parent) {\n            return {\n                valid   : false,\n                message : me.L('L{nestingNotAllowed}')\n            };\n        }\n        if (targetEventRecord && targetEventRecord !== eventRecord.parent) {\n            const\n                maxLevel           = me.maxNesting,\n                targetLevel        = targetEventRecord.isParent ? targetEventRecord.childLevel : targetEventRecord.parent.childLevel,\n                maxChildLevel      = Math.max(...eventRecord.allChildren.map(child => child.childLevel)),\n                relativeChildLevel = maxChildLevel - eventRecord.childLevel;\n            if (targetLevel + relativeChildLevel >= maxLevel) {\n                return {\n                    valid   : false,\n                    message : me.L('L{nestingNotAllowed}')\n                };\n            }\n        }\n    }\n    // Move event to new parent if dropped on a parent or moved out of one\n    processEventDrop({ context, toScheduler, eventRecord, resourceRecord, reassignedFrom, element, eventsToAdd, addedEvents, draggedAssignment }) {\n        const\n            { parent }            = eventRecord,\n            { targetEventRecord } = context;\n        let newParent = parent;\n        // targetEventRecord is resolved using mouse coords, it might be outside of parent when constrained thus\n        // we have to check if constrained here to not move it out by mistake\n        if (parent !== targetEventRecord && !this.constrainDragToParent) {\n            // Dropped on a new parent and allowed to nest\n            if (targetEventRecord && this.allowNestingOnDrop) {\n                // Allow creating a new parent if dropped on a child of root, otherwise add to the parent\n                newParent = targetEventRecord.isParent ? targetEventRecord : targetEventRecord.parent.isRoot ? targetEventRecord : targetEventRecord.parent;\n                // We resolve resource and targetEventRecord differently (mouse vs element), might get next resource so\n                // we re-resolve here to be sure it is correct\n                const targetResource = this.client.resolveResourceRecord(context.browserEvent);\n                if (targetResource !== resourceRecord) {\n                    resourceRecord = draggedAssignment.resource = targetResource;\n                }\n            }\n            // Dropped directly on resource and allowed to de-nest (cant get here if not allowed, blocked in validation)\n            else {\n                newParent = toScheduler.eventStore.rootNode;\n            }\n            if (newParent && newParent !== parent) {\n                addedEvents.push(newParent.appendChild(eventRecord));\n                // Don't want to add it to root when dragging to another scheduler\n                ArrayHelper.remove(eventsToAdd, eventRecord);\n            }\n        }\n        // Moved parent to new resource, reassign all children assigned to its previous resource\n        if (eventRecord.isParent && reassignedFrom && reassignedFrom !== resourceRecord) {\n            for (const child of eventRecord.allChildren) {\n                const existingAssignment = child.assignments.find(a => a.resource === reassignedFrom);\n                if (existingAssignment) {\n                    existingAssignment.resource = resourceRecord;\n                }\n            }\n        }\n        // Add to new parent (or put back in old) matching outer position. If we don't do this element might get released\n        // on DomSync of foregroundCanvas (also this lets it transition within the parent)\n        if (newParent && !newParent.isRoot) {\n            const newParentElement = this.client.getElementFromEventRecord(newParent, resourceRecord).syncIdMap.nestedEventsContainer;\n            // If dropped on a root level leaf it has no nested events container yet\n            if (newParentElement) {\n                const\n                    containerBounds = Rectangle.from(newParentElement, this.client.foregroundCanvas),\n                    intersection    = Rectangle.from(element, newParentElement);\n                // To move proxy to correct position (relative to new parent) on abort\n                context.context.elementStartX -= containerBounds.x;\n                context.context.elementStartY -= containerBounds.y;\n                // Position proxy inside new parent, at where it was dropped\n                element.style.top = `${intersection.top}px`;\n                element.style.left = `${intersection.left}px`;\n                // If dropped at the same position in a new parent it won't transition into place if it thinks nothing\n                // changed\n                element.lastDomConfig = null;\n                DomSync.addChild(newParentElement, element, element.dataset.syncId);\n            }\n        }\n    }\n    // Assign all children to same resource when dropping on another scheduler\n    processCrossSchedulerEventDrop({ eventRecord }) {\n        if (eventRecord.isParent) {\n            for (const child of eventRecord.allChildren) {\n                child.resource = eventRecord.resource;\n            }\n        }\n    }\n    // Restore element after abort (back to original parent and position)\n    async afterEventDragAbortFinalized({ originalParentElement, originalBounds }) {\n        if (this.isDraggingNestedEvent) {\n            // Wait for any position transition\n            for (const animation of originalBounds[0].element.getAnimations()) {\n                if (animation.transitionProperty === 'top' || animation.transitionProperty === 'left') {\n                    await animation.finished;\n                }\n            }\n            for (const { element, bounds } of originalBounds) {\n                // Move it back\n                element.style.top = `${bounds.top}px`;\n                element.style.left = `${bounds.left}px`;\n                originalParentElement.appendChild(element);\n            }\n        }\n    }\n    // Limit resizing to parent bounds if configured to do so (it is the default)\n    afterEventResizeStart(context) {\n        if (this.constrainResizeToParent) {\n            const { parent } = context.timespanRecord;\n            if (parent && !parent.isRoot) {\n                let { startDate, endDate } = parent;\n                if (context.dateConstraints) {\n                    startDate = DateHelper.max(startDate, context.dateConstraints.start);\n                    endDate = DateHelper.min(endDate, context.dateConstraints.end);\n                }\n                context.dateConstraints = {\n                    start : startDate,\n                    end   : endDate\n                };\n            }\n        }\n    }\n    //endregion\n    //region Overrides to make scheduler work with nested events\n    // Let Scheduler resolve nested events too\n    getElementFromAssignmentRecord(assignmentRecord, returnWrapper) {\n        if (assignmentRecord?.event?.parent && !assignmentRecord.event.parent.isRoot) {\n            const parentElement = this.client.getElementFromEventRecord(assignmentRecord.event.parent, assignmentRecord.resource);\n            return parentElement && DomSync.getChild(parentElement, `nestedEventsContainer.${assignmentRecord.id}${returnWrapper ? '' : '.event'}`);\n        }\n        return this.overridden.getElementFromAssignmentRecord(assignmentRecord, returnWrapper);\n    }\n    // Allow scheduling nested events by overriding Schedulers implementation\n    async scheduleEvent({ eventRecord, parentEventRecord, startDate, element }) {\n        // When passed a parent, append to it and assign to its resource\n        if (parentEventRecord) {\n            eventRecord.startDate = startDate;\n            eventRecord = parentEventRecord.appendChild(eventRecord);\n            eventRecord.assign(parentEventRecord.resource);\n            // When given an element, it is positioned inside the parent and adopted by DomSync, letting it transition\n            if (element) {\n                const\n                    parentElement = this.client.getElementFromEventRecord(parentEventRecord).syncIdMap.nestedEventsContainer,\n                    eventRect     = Rectangle.from(element, parentElement);\n                // Clear translate styles used by DragHelper\n                DomHelper.setTranslateXY(element, 0, 0);\n                DomHelper.setTopLeft(element, eventRect.y, eventRect.x);\n                DomSync.addChild(parentElement, element, eventRecord.assignments[0].id);\n            }\n            await this.client.project.commitAsync();\n        }\n        else {\n            return this.overridden.scheduleEvent(...arguments);\n        }\n    }\n    //endregion\n    //region Rendering\n    // Hook into event collection to filter out children, since they will be rendered inside their parents\n    getEventsToRender(resourceRecord, eventRecords) {\n        if (!this.disabled) {\n            // Only keep direct children of the root (?. in case someone tries to use a flat store)\n            ArrayHelper.remove(eventRecords, ...eventRecords.filter(eventRecord => eventRecord.isEventModel && !eventRecord.parent.isRoot));\n        }\n        return eventRecords;\n    }\n    afterRenderEvent({ renderData }) {\n        const\n            { eventRecord } = renderData,\n            { childLevel }  = eventRecord;\n        if (eventRecord.isParent) {\n            const\n                me = this,\n                { resourceRecord, width, height, left, top, wrapperCls } = renderData;\n            wrapperCls.add('b-nested-events-parent');\n            me.currentParentsHeight = height;\n            me.currentParentsWidth = width;\n            const\n                {\n                    currentOrientation,\n                    isVertical\n                }                      = me.client,\n                assignedChildren       = eventRecord.children.filter(e => e.$linkedResources?.includes(resourceRecord)),\n                // This call uses the same render path as normal events, applying event layout etc. The layout is then\n                // as needed patched up below (to be relative to parent etc)\n                layouts                = currentOrientation.layoutEvents(resourceRecord, assignedChildren, { viewport : true }, eventRecord, me.overlappingEventSorter),\n                nestedEvents           = [];\n            let eventsData;\n            if (isVertical) {\n                eventsData = [];\n                for (const layout of Object.values(layouts)) {\n                    eventsData.push(layout.renderData);\n                }\n            }\n            else {\n                eventsData = layouts?.eventsData;\n            }\n            if (eventsData) {\n                for (const layout of eventsData) {\n                    // Positioned inside parent\n                    if (isVertical) {\n                        layout.left -= left;\n                        layout.top -= top;\n                        layout.absoluteTop = layout.top;\n                    }\n                    else {\n                        // Special handling for overlap, it does not use the same render path as other layouts\n                        if (me.eventLayout === 'none') {\n                            layout.top = 0;\n                            layout.height = me.getAppliedResourceHeight(resourceRecord, eventRecord);\n                        }\n                        // Stack also needs some special handling of height, since it uses fixed event height\n                        else if (me.eventLayout === 'stack') {\n                            layout.height = me._eventHeights[childLevel];\n                        }\n                        layout.absoluteLeft = layout.left;\n                        layout.left -= (renderData.absoluteLeft ?? left);\n                        layout.absoluteTop = layout.top;\n                    }\n                    const domConfig = currentOrientation.renderEvent(isVertical ? { renderData : layout } : layout, height);\n                    domConfig.className['b-nested-event'] = 1;\n                    nestedEvents.push(domConfig);\n                }\n            }\n            const containerDomConfig = {\n                className : {\n                    'b-nested-events-container'                  : 1,\n                    [`b-nested-events-layout-${me.eventLayout}`] : 1\n                },\n                dataset : {\n                    taskBarFeature : 'nestedEventsContainer'\n                },\n                children    : nestedEvents,\n                syncOptions : {\n                    syncIdField      : 'syncId',\n                    releaseThreshold : 0\n                }\n            };\n            // renderData is reused, children are cached. We want ours to be up to date\n            const\n                { children } = renderData,\n                index        = children.findIndex(child => child.dataset.taskBarFeature === 'nestedEventsContainer');\n            if (index === -1) {\n                children.push(containerDomConfig);\n            }\n            else {\n                children.splice(index, 1, containerDomConfig);\n            }\n        }\n        renderData.elementConfig.dataset.level = childLevel;\n    }\n    //endregion\n}\nNestedEvents._$name = 'NestedEvents'; GridFeatureManager.registerFeature(NestedEvents, false, 'SchedulerPro');\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport ResourceTimeRangesBase from '../../Scheduler/feature/base/ResourceTimeRangesBase.js';\nimport ResourceTimeRangeModel from '../../Scheduler/model/ResourceTimeRangeModel.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\n/**\n * @module SchedulerPro/feature/ResourceNonWorkingTime\n */\n/**\n * Feature that highlights the non-working intervals for resources based on their {@link SchedulerPro.model.ResourceModel#field-calendar}.\n * If a resource has no calendar defined, the project's calendar will be used. The non-working time interval can\n * also be recurring. You can find a live example showing how to achieve this in the [Resource Non-Working Time Demo](../examples/resource-non-working-time/).\n *\n * {@inlineexample SchedulerPro/feature/ResourceNonWorkingTime.js}\n *\n * ## Data structure\n * Example data defining calendars and assigning the resources a calendar:\n * ```javascript\n * {\n *   \"success\"   : true,\n *   \"calendars\" : {\n *       \"rows\" : [\n *           {\n *               \"id\"                       : \"day\",\n *               \"name\"                     : \"Day shift\",\n *               \"unspecifiedTimeIsWorking\" : false,\n *               \"cls\"                      : \"dayshift\",\n *               \"intervals\"                : [\n *                   {\n *                       \"recurrentStartDate\" : \"at 8:00\",\n *                       \"recurrentEndDate\"   : \"at 17:00\",\n *                       \"isWorking\"          : true,\n *                   }\n *               ]\n *           }\n *    ],\n *    \"resources\" : {\n *       \"rows\" : [\n *           {\n *               \"id\"         : 1,\n *               \"name\"       : \"George\",\n *               \"calendar\"   : \"day\",\n *               \"role\"       : \"Office\",\n *               \"eventColor\" : \"blue\"\n *           },\n *           {\n *               \"id\"         : 2,\n *               \"name\"       : \"Rob\",\n *               \"calendar\"   : \"day\",\n *               \"role\"       : \"Office\",\n *               \"eventColor\" : \"blue\"\n *           }\n *        ]\n *   [...]\n * ```\n *\n * ```javascript\n * const scheduler = new SchedulerPro({\n *   // A Project holding the data and the calculation engine for Scheduler Pro. It also acts as a CrudManager, allowing\n *   // loading data into all stores at once\n *   project : {\n *       autoLoad  : true,\n *       transport : {\n *           load : {\n *               url : './data/data.json'\n *           }\n *       }\n *   },\n *   features : {\n *       resourceNonWorkingTime : true\n *   },\n *   [...]\n * }):\n * ```\n *\n * ## Styling non-working time interval elements\n *\n * To style the elements representing the non-working time elements you can set the {@link SchedulerPro.model.CalendarModel#field-cls}\n * field in your data. This will add a CSS class to all non-working time elements for the calendar. You can also add\n * an {@link SchedulerPro.model.CalendarModel#field-iconCls} value specifying an icon to display inside the interval.\n *\n * ```javascript\n * {\n *   \"success\"   : true,\n *   \"calendars\" : {\n *       \"rows\" : [\n *           {\n *               \"id\"                       : \"day\",\n *               \"name\"                     : \"Day shift\",\n *               \"unspecifiedTimeIsWorking\" : false,\n *               \"cls\"                      : \"dayshift\",\n *               \"intervals\"                : [\n *                   {\n *                       \"recurrentStartDate\" : \"at 8:00\",\n *                       \"recurrentEndDate\"   : \"at 17:00\",\n *                       \"isWorking\"          : true\n *                   }\n *               ]\n *           }\n *       ]\n *    }\n * }\n * ```\n *\n * You can also add a `cls` value and an `iconCls` to **individual** intervals:\n *\n * ```javascript\n * {\n *   \"success\"   : true,\n *   \"calendars\" : {\n *       \"rows\" : [\n *           {\n *               \"id\"                       : \"day\",\n *               \"name\"                     : \"Day shift\",\n *               \"unspecifiedTimeIsWorking\" : true,\n *               \"intervals\"                : [\n *                   {\n *                      \"startDate\"          : \"2022-03-23T02:00\",\n *                      \"endDate\"            : \"2022-03-23T04:00\",\n *                      \"isWorking\"          : false,\n *                      \"cls\"                : \"factoryShutdown\",\n *                      \"iconCls\"            : \"warningIcon\"\n *                  }\n *               ]\n *           }\n *       ]\n *    }\n * }\n * ```\n *\n * This feature is **disabled** by default.\n * For info on enabling it, see {@link Grid.view.mixin.GridFeatures}.\n *\n * @extends Scheduler/feature/base/ResourceTimeRangesBase\n * @demo SchedulerPro/resource-non-working-time\n * @classtype resourceNonWorkingTime\n * @feature\n */\nexport default class ResourceNonWorkingTime extends ResourceTimeRangesBase {\n    //region Config\n    static $name = 'ResourceNonWorkingTime';\n    static configurable = {\n        rangeCls : 'b-sch-resourcenonworkingtime',\n        /**\n         * The largest time axis unit to display non working ranges for ('hour' or 'day' etc).\n         * When zooming to a view with a larger unit, no non-working time elements will be rendered.\n         *\n         * **Note:** Be careful with setting this config to big units like 'year'. When doing this,\n         * make sure the timeline {@link Scheduler.view.TimelineBase#config-startDate start} and\n         * {@link Scheduler.view.TimelineBase#config-endDate end} dates are set tightly.\n         * When using a long range (for example many years) with non-working time elements rendered per hour,\n         * you will end up with millions of elements, impacting performance.\n         * When zooming, use the {@link Scheduler.view.mixin.TimelineZoomable#config-zoomKeepsOriginalTimespan} config.\n         * @config {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'}\n         * @default\n         */\n        maxTimeAxisUnit : 'hour',\n        /**\n         * Set to `true` to allow mouse interactions with the rendered range elements. By default, the range elements\n         * are not reachable with the mouse, and only serve as a static background.\n         * @prp {Boolean}\n         * @default\n         */\n        enableMouseEvents : false,\n        /**\n         * The Model class to use for representing a {@link Scheduler.model.ResourceTimeRangeModel}\n         * @config {Scheduler.model.ResourceTimeRangeModel}\n         * @typings {typeof ResourceTimeRangeModel}\n         */\n        resourceTimeRangeModelClass : ResourceTimeRangeModel,\n        entityName : 'resourceNonWorkingTime'\n    };\n    // Cannot use `static properties = {}`, new Map would pollute the prototype\n    static get properties() {\n        return {\n            resourceMap : new Map()\n        };\n    };\n    //endregion\n    //region Constructor\n    construct() {\n        super.construct(...arguments);\n        this.resourceTimeRangeModelClass = class ResourceNonWorkingTimeModel extends this.resourceTimeRangeModelClass {\n            static $name = 'ResourceNonWorkingTimeModel';\n            static domIdPrefix = 'resourcenonworkingtimemodel';\n        };\n        this.client.timeAxis.ion({\n            name        : 'timeAxis',\n            reconfigure : 'onTimeAxisReconfigure',\n            // should trigger before event rendering chain\n            prio        : 100,\n            thisObj     : this\n        });\n    }\n    //endregion\n    //region Events\n    /**\n     * Triggered for mouse down ona resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured\n     * with `enableMouseEvents: true`.\n     * @event resourceNonWorkingTimeMouseDown\n     * @param {SchedulerPro.view.SchedulerPro} source This Scheduler\n     * @param {SchedulerPro.feature.ResourceNonWorkingTime} feature The ResourceNonWorkingTime feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n    /**\n     * Triggered for mouse up ona resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured\n     * with `enableMouseEvents: true`.\n     * @event resourceNonWorkingTimeMouseUp\n     * @param {SchedulerPro.view.SchedulerPro} source This Scheduler\n     * @param {SchedulerPro.feature.ResourceNonWorkingTime} feature The ResourceNonWorkingTime feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n    /**\n     * Triggered for click on a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured with\n     * `enableMouseEvents: true`.\n     * @event resourceNonWorkingTimeClick\n     * @param {SchedulerPro.view.SchedulerPro} source This Scheduler\n     * @param {SchedulerPro.feature.ResourceNonWorkingTime} feature The ResourceNonWorkingTime feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n    /**\n     * Triggered for double-click on a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured\n     * with `enableMouseEvents: true`.\n     * @event resourceNonWorkingTimeDblClick\n     * @param {SchedulerPro.view.SchedulerPro} source This Scheduler\n     * @param {SchedulerPro.feature.ResourceNonWorkingTime} feature The ResourceNonWorkingTime feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n    /**\n     * Triggered for right-click on a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured\n     * with `enableMouseEvents: true`.\n     * @event resourceNonWorkingTimeContextMenu\n     * @param {SchedulerPro.view.SchedulerPro} source This Scheduler\n     * @param {SchedulerPro.feature.ResourceNonWorkingTime} feature The ResourceNonWorkingTime feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n    /**\n     * Triggered for mouse over on a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured\n     * with `enableMouseEvents: true`.\n     * @event resourceNonWorkingTimeMouseOver\n     * @param {SchedulerPro.view.SchedulerPro} source This Scheduler\n     * @param {SchedulerPro.feature.ResourceNonWorkingTime} feature The ResourceNonWorkingTime feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n    /**\n     * Triggered for mouse out of a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured\n     * with `enableMouseEvents: true`.\n     * @event resourceNonWorkingTimeMouseOut\n     * @param {SchedulerPro.view.SchedulerPro} source This Scheduler\n     * @param {SchedulerPro.feature.ResourceNonWorkingTime} feature The ResourceNonWorkingTime feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n    //endregion\n    //region Init\n    attachToResourceStore(resourceStore) {\n        super.attachToResourceStore(resourceStore);\n        resourceStore?.ion({\n            name            : 'resourceStore',\n            changePreCommit : 'onResourceChange',\n            thisObj         : this\n        });\n    }\n    attachToCalendarManagerStore(calendarManagerStore) {\n        super.attachToCalendarManagerStore(calendarManagerStore);\n        calendarManagerStore?.ion({\n            name            : 'calendarManagerStore',\n            changePreCommit : 'onCalendarChange',\n            thisObj         : this\n        });\n    }\n    //endregion\n    //region Events\n    onTimeAxisReconfigure() {\n        // reset ranges cache on timeAxis change\n        this.resourceMap.clear();\n    }\n    onResourceChange({ action, records, record, changes }) {\n        const me = this;\n        // Might need to redraw on update\n        if (action === 'update') {\n            const change = changes.calendar;\n            // Ignore calendar normalization\n            if (change && (typeof change.oldValue !== 'string' || change.value?.id !== change.oldValue)) {\n                me.resourceMap.delete(record.id);\n                // Redraw row in case calendar change did not affect any events\n                me.client.runWithTransition(() => {\n                    me.client.currentOrientation.refreshEventsForResource(record);\n                });\n            }\n        }\n        // Keep map up to date on removals (adds are handled through rendering in getEventsToRender)\n        if (action === 'remove') {\n            records.forEach(record => me.resourceMap.delete(record.id));\n        }\n        if (action === 'removeall') {\n            me.resourceMap.clear();\n        }\n    }\n    onCalendarChange({ action, records, record, changes }) {\n        this.resourceMap.clear();\n        this.client.refresh();\n    }\n    //endregion\n    //region Internal\n    // Called on render of resources events to get events to render. Add any ranges\n    // (chained function from Scheduler)\n    getEventsToRender(resource, events) {\n        const\n            me                      = this,\n            { resourceMap, client } = me,\n            { timeAxis }            = client,\n            shouldPaint             = !me.maxTimeAxisUnit || DateHelper.compareUnits(timeAxis.unit, me.maxTimeAxisUnit) <= 0;\n        if (!me.disabled && shouldPaint && resource.effectiveCalendar) {\n            if (!resourceMap.has(resource.id)) {\n                const\n                    ranges  = resource.effectiveCalendar.getNonWorkingTimeRanges(\n                        client.startDate,\n                        client.endDate\n                    ),\n                    records = ranges.map((range, i) => new me.resourceTimeRangeModelClass({\n                        id           : `r${resource.id}i${i}`,\n                        iconCls      : range.iconCls || resource.effectiveCalendar.iconCls || '',\n                        cls          : `${resource.effectiveCalendar.cls || ''} ${range.cls || ''}`,\n                        startDate    : range.startDate,\n                        endDate      : range.endDate,\n                        name         : range.name || '',\n                        resourceId   : resource.id,\n                        isNonWorking : true\n                    }));\n                resourceMap.set(resource.id, records);\n            }\n            events.push(...resourceMap.get(resource.id));\n        }\n        return events;\n    }\n    shouldInclude({ isNonWorking }) {\n        return isNonWorking;\n    }\n    /**\n     * Returns a resource nonworking time range record from the passed element\n     * @param {HTMLElement} rangeElement\n     * @returns {Scheduler.model.ResourceTimeRangeModel}\n     * @category DOM\n     */\n    resolveResourceNonWorkingTimeInterval(rangeElement) {\n        return rangeElement?.closest('.b-sch-resourcenonworkingtime')?.elementData.eventRecord;\n    }\n    //endregion\n}\n// No feature based styling needed, do not add a cls to Scheduler\nResourceNonWorkingTime.featureClass = '';\nResourceNonWorkingTime._$name = 'ResourceNonWorkingTime'; GridFeatureManager.registerFeature(ResourceNonWorkingTime, false, 'SchedulerPro');\n", "import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport DomSync from '../../Core/helper/DomSync.js';\nimport EventHelper from '../../Core/helper/EventHelper.js';\n/**\n * @module SchedulerPro/feature/TimeSpanHighlight\n */\nconst\n    timespanDefaults = {\n        isHighlightConfig : true,\n        clearExisting     : false\n    },\n    emptyObject = {};\n/**\n * An object describing the time span region to highlight.\n *\n * @typedef {Object} HighlightTimeSpan\n * @property {Date} startDate A start date constraining the region\n * @property {Date} endDate An end date constraining the region\n * @property {String} name A name to show in the highlight element\n * @property {Scheduler.model.ResourceModel} [resourceRecord] The resource record (applicable for Scheduler only)\n * @property {Core.data.Model} [taskRecord] The task record (applicable for Gantt only)\n * @property {String} [cls] A CSS class to add to the highlight element\n * @property {Boolean} [clearExisting=true] `false` to keep existing highlight elements\n * @property {String} [animationId] An id to enable animation of highlight elements\n * @property {Boolean} [surround=false] True to shade the time axis areas before and after the time span\n * (adds a `b-unavailable` CSS class which you can use for styling)\n * @property {Number} [padding] Inflates the non-timeaxis sides of the region by this many pixels\n */\n/**\n * This feature exposes methods on the owning Scheduler or Gantt widget which you can use to highlight one or multiple time spans\n * in the schedule. Please see {@link #function-highlightTimeSpan} and {@link #function-highlightTimeSpans} to learn\n * more or try the demo below:\n *\n * {@inlineexample SchedulerPro/feature/TimeSpanHighlight.js}\n *\n * ## Example usage with Scheduler Pro\n *\n * ```javascript\n * const scheduler = new SchedulerPro({\n *     features : {\n *         timeSpanHighlight : true\n *     }\n * })\n *\n * scheduler.highlightTimeSpan({\n *      startDate : new Date(2022, 4, 1),\n *      endDate   : new Date(2022, 4, 5),\n *      name      : 'Time off'\n * });\n * ```\n *\n * ## Example usage with Gantt\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         timeSpanHighlight : true\n *     }\n * })\n *\n * gantt.highlightTimeSpan({\n *      startDate : new Date(2022, 4, 1),\n *      endDate   : new Date(2022, 4, 5),\n *      padding   : 10, // Some \"air\" around the rectangle\n *      taskRecord, // You can also highlight an area specific to a Gantt task\n *      name      : 'Time off'\n * });\n * ```\n *\n * This feature is **disabled** by default.\n *\n * @extends Core/mixin/InstancePlugin\n * @classtype timeSpanHighlight\n * @feature\n * @demo SchedulerPro/highlight-time-spans\n */\nexport default class TimeSpanHighlight extends InstancePlugin {\n    //region Config\n    domConfigs = [];\n    configs = [];\n    static get $name() {\n        return 'TimeSpanHighlight';\n    }\n    static get configurable() {\n        return {\n            padding : 0\n        };\n    }\n    static get pluginConfig() {\n        return {\n            assign : [\n                'highlightTimeSpan',\n                'highlightTimeSpans',\n                'unhighlightTimeSpans'\n            ],\n            chain : [\n                'onTimeAxisViewModelUpdate'\n            ]\n        };\n    }\n    //endregion\n    construct() {\n        super.construct(...arguments);\n        this.client.rowManager.ion({\n            renderDone : this.onViewChanged,\n            thisObj    : this\n        });\n    }\n    /**\n     * Highlights the region representing the passed time span and optionally for a single certain resource.\n     * @on-owner\n     * @param {HighlightTimeSpan} options A single options object describing the time span to highlight.\n     */\n    highlightTimeSpan(config, draw = true) {\n        const\n            me         = this,\n            {\n                startDate,\n                endDate,\n                name,\n                surround,\n                padding       = me.padding,\n                clearExisting = true\n            }          = config,\n            { client } = me,\n            taskRecord = config.isTimeSpan ? config : config.taskRecord;\n        // The resource property allows an actual TaskRecord to be used as a config.\n        let resourceRecord  = config.resourceRecord || config.resource;\n        const { animationId } = config;\n        if (animationId) {\n            DomHelper.addTemporaryClass(client.element, 'b-transition-highlight', 500, client);\n        }\n        if (clearExisting) {\n            me.domConfigs.length = me.configs.length = 0;\n        }\n        if (me.disabled) {\n            // nothing to highlight\n            return;\n        }\n        if (surround) {\n            me.surroundTimeSpan(config);\n            return;\n        }\n        me.configs.push(config);\n        let rect;\n        if (client.isGanttBase) {\n            rect = client.getScheduleRegion(taskRecord, true, { start : startDate, end : endDate });\n        }\n        else {\n            if (resourceRecord) {\n                // Allows resolving link from original in TreeGrouped scheduler\n                resourceRecord = client.store.getById(resourceRecord);\n            }\n            rect = client.getScheduleRegion(resourceRecord, null, true, { start : startDate, end : endDate }, !resourceRecord);\n        }\n        if (!rect) {\n            // nothing to highlight\n            return;\n        }\n        if (padding) {\n            if (client.isHorizontal) {\n                rect.inflate(padding, 0, padding, 0);\n            }\n            else {\n                rect.inflate(0, padding, 0, padding);\n            }\n        }\n        me.domConfigs.push(\n            rect.visualize({\n                children : [\n                    {\n                        class : 'b-sch-highlighted-range-name',\n                        html  : name\n                    }\n                ],\n                dataset : animationId ? {\n                    syncId : animationId\n                } : emptyObject,\n                class : {\n                    'b-sch-highlighted-range'                           : 1,\n                    [config.cls]                                        : config.cls,\n                    [config.class || 'b-sch-highlighted-range-default'] : 1\n                }\n            }, true)\n        );\n        if (draw) {\n            me.draw();\n        }\n        client.syncSplits?.(split => split.highlightTimeSpan(config, draw));\n    }\n    draw() {\n        DomSync.sync({\n            targetElement : this.containerEl,\n            domConfig     : {\n                onlyChildren : true,\n                children     : this.domConfigs\n            }\n        });\n    }\n    surroundTimeSpan(timeSpan) {\n        this.highlightTimeSpans([\n            Object.assign({}, timeSpan, {\n                animationId : (timeSpan.animationId || '') + 'Before',\n                class       : 'b-unavailable',\n                surround    : false,\n                startDate   : this.client.startDate,\n                endDate     : timeSpan.startDate\n            }),\n            Object.assign({}, timeSpan, {\n                animationId : (timeSpan.animationId || '') + 'After',\n                class       : 'b-unavailable',\n                surround    : false,\n                startDate   : timeSpan.endDate,\n                endDate     : this.client.endDate\n            })\n        ], { clearExisting : timeSpan.clearExisting });\n    }\n    /**\n     * Highlights the regions representing the passed time spans.\n     * @on-owner\n     * @param {HighlightTimeSpan[]} timeSpans An array of objects with start/end dates describing the rectangle to highlight.\n     * @param {Object} [options] A single options object\n     * @param {Boolean} [options.clearExisting=true] Set to `false` to preserve previously highlighted elements\n     */\n    highlightTimeSpans(timeSpans, options = {}) {\n        const\n            me = this,\n            {\n                clearExisting = true\n            }  = options;\n        if (clearExisting) {\n            timeSpans = timeSpans.slice();\n            me.domConfigs.length = me.configs.length = 0;\n        }\n        if (me.disabled) {\n            return;\n        }\n        timeSpans.forEach(timeSpan => {\n            // If we are *re*drawing a set of configs, they will have the isHighlightConfig\n            // property, so we can pass them straight in. If its a config from the outside,\n            // then apply the defaults and the isHighlightConfig flag.\n            me.highlightTimeSpan(timeSpan.isHighlightConfig ? timeSpan : Object.setPrototypeOf(timeSpan, timespanDefaults), false);\n        });\n        me.draw();\n    }\n    /**\n     * Removes any highlighting elements.\n     * @param {Boolean} [fadeOut] `true` to fade out the highlight elements before removing\n     * @on-owner\n     */\n    async unhighlightTimeSpans(fadeOut = false) {\n        const\n            me         = this,\n            { client } = me;\n        if (fadeOut) {\n            DomHelper.addTemporaryClass(client.element, 'b-transition-highlight', 500, client);\n        }\n        Array.from(me.containerEl.children).forEach(element => {\n            if (fadeOut) {\n                element.style.opacity = 0;\n                me.fadeOutDetacher    = EventHelper.onTransitionEnd({\n                    element,\n                    property : 'opacity',\n                    thisObj  : client,\n                    handler  : () => {\n                        me.domConfigs.length = me.configs.length = 0;\n                        me.draw();\n                    }\n                });\n            }\n            else {\n                me.domConfigs.length = me.configs.length = 0;\n                me.draw();\n            }\n        });\n        client.syncSplits?.(split => split.unhighlightTimeSpans(fadeOut));\n    }\n    get containerEl() {\n        if (!this._containerEl) {\n            this._containerEl = DomHelper.createElement({\n                parent        : this.client.foregroundCanvas,\n                retainElement : true,\n                class         : 'b-sch-highlight-container'\n            });\n        }\n        return this._containerEl;\n    }\n    onTimeAxisViewModelUpdate() {\n        this.onViewChanged();\n    }\n    onViewChanged() {\n        if (this.configs.length > 0) {\n            this.highlightTimeSpans(this.configs);\n        }\n    }\n    updateDisabled(disabled, was) {\n        if (disabled) {\n            this.unhighlightTimeSpans();\n        }\n        super.updateDisabled(disabled, was);\n    }\n    // No classname on Scheduler's/Gantt's element\n    get featureClass() {}\n}\nTimeSpanHighlight._$name = 'TimeSpanHighlight'; GridFeatureManager.registerFeature(TimeSpanHighlight, false, ['SchedulerPro', 'Gantt']);\n", "/**\n * @module SchedulerPro/model/changelog/ChangeLogPropertyUpdate\n */\n/**\n * An immutable, serializable object that describes an update to a single object property from one value to another.\n */\nexport default class ChangeLogPropertyUpdate {\n    static $name = 'ChangeLogPropertyUpdate';\n    constructor({ property, before, after }) {\n        Object.assign(this, {\n            /**\n             * @member {String} property A descriptor for the entity (object) affected by this action.\n             * @readonly\n             * @category Common\n             */\n            property,\n            /**\n             * @member {String|Number|Object} before The property's value before the action.\n             * @readonly\n             * @immutable\n             * @category Common\n             */\n            before,\n            /**\n             * @member {String|Number|Object} after The property's value after the action.\n             * @readonly\n             * @immutable\n             * @category Common\n             */\n            after\n        });\n        Object.freeze(this);\n    }\n}\nChangeLogPropertyUpdate._$name = 'ChangeLogPropertyUpdate';", "import { SchedulerProProjectMixin } from '../../Engine/quark/model/scheduler_pro/SchedulerProProjectMixin.js';\nimport ProjectModelMixin from '../../Scheduler/model/mixin/ProjectModelMixin.js';\nimport ProjectChangeHandlerMixin from './mixin/ProjectChangeHandlerMixin.js';\nimport ProjectCrudManager from '../data/mixin/ProjectCrudManager.js';\nimport AssignmentModel from './AssignmentModel.js';\nimport CalendarModel from './CalendarModel.js';\nimport DependencyModel from './DependencyModel.js';\nimport EventModel from './EventModel.js';\nimport ResourceModel from './ResourceModel.js';\nimport CalendarManagerStore from '../data/CalendarManagerStore.js';\nimport DependencyStore from '../data/DependencyStore.js';\nimport EventStore from '../data/EventStore.js';\nimport ResourceStore from '../data/ResourceStore.js';\nimport AssignmentStore from '../data/AssignmentStore.js';\nimport StateTrackingManager from '../data/stm/StateTrackingManager.js';\n/**\n * @module SchedulerPro/model/ProjectModel\n */\n/**\n * Scheduler Pro Project model class - a central place for all data.\n *\n * It holds and links the stores usually used by Scheduler Pro:\n *\n * - {@link SchedulerPro/data/EventStore}\n * - {@link SchedulerPro/data/ResourceStore}\n * - {@link SchedulerPro/data/AssignmentStore}\n * - {@link SchedulerPro/data/DependencyStore}\n * - {@link SchedulerPro/data/CalendarManagerStore}\n * - {@link Scheduler/data/ResourceTimeRangeStore}\n * - {@link #config-timeRangeStore TimeRangeStore}\n *\n * The project uses a scheduling engine to calculate dates, durations and such. It is also responsible for\n * handling references between models, for example to link an event via an assignment to a resource. These operations\n * are asynchronous, a fact that is hidden when working in the Scheduler Pro UI but which you must know about when\n * performing operations on the data level.\n *\n * When there is a change to data that requires something else to be recalculated, the project schedules a calculation\n * (a commit) which happens moments later. It is also possible to trigger these calculations directly. This flow\n * illustrates the process:\n *\n * 1. Something changes which requires the project to recalculate, for example adding a new task:\n *\n * ```javascript\n * const [event] = project.eventStore.add({ startDate, endDate });\n * ```\n *\n * 2. A recalculation is scheduled, thus:\n *\n * ```javascript\n * event.duration; // <- Not yet calculated\n * ```\n *\n * 3. Calculate now instead of waiting for the scheduled calculation\n *\n * ```javascript\n * await project.commitAsync();\n *\n * event.duration; // <- Now available\n * ```\n *\n * Please refer to [this guide](#SchedulerPro/guides/basics/project_data.md) for more information.\n *\n * ## Built-in CrudManager\n *\n * Scheduler Pro's project has a {@link Scheduler/crud/AbstractCrudManagerMixin CrudManager} built-in. Using it is the recommended\n * way of syncing data between Scheduler Pro and a backend. Example usage:\n *\n * ```javascript\n * const scheduler = new SchedulerPro({\n *     project : {\n *         // Configure urls used by the built-in CrudManager\n *         transport : {\n *             load : {\n *                 url : 'php/load.php'\n *             },\n *             sync : {\n *                 url : 'php/sync.php'\n *             }\n *         }\n *     }\n * });\n *\n * // Load data from the backend\n * scheduler.project.load()\n * ```\n *\n * For more information on CrudManager, see Schedulers docs on {@link Scheduler/data/CrudManager}.\n * For a detailed description of the protocol used by CrudManager, see the [Crud manager guide](#Scheduler/guides/data/crud_manager.md)\n *\n * You can access the current Project data changes anytime using the {@link #property-changes} property.\n *\n * ## Working with inline data\n *\n * The project provides an {@link #property-inlineData} getter/setter that can\n * be used to manage data from all Project stores at once. Populating the stores this way can\n * be useful if you do not want to use the CrudManager for server communication but instead load data using Axios\n * or similar.\n *\n * ### Getting data\n * ```javascript\n * const data = scheduler.project.inlineData;\n *\n * // use the data in your application\n * ```\n *\n * ### Setting data\n * ```javascript\n * // Get data from server manually\n * const data = await axios.get('/project?id=12345');\n *\n * // Feed it to the project\n * scheduler.project.inlineData = data;\n * ```\n *\n * See also {@link #function-loadInlineData}\n *\n * ### Getting changed records\n *\n * You can access the changes in the current Project dataset anytime using the {@link #property-changes} property. It\n * returns an object with all changes:\n *\n * ```javascript\n * const changes = project.changes;\n *\n * console.log(changes);\n *\n * > {\n *   tasks : {\n *       updated : [{\n *           name : 'My task',\n *           id   : 12\n *       }]\n *   },\n *   assignments : {\n *       added : [{\n *           event      : 12,\n *           resource   : 7,\n *           units      : 100,\n *           $PhantomId : 'abc123'\n *       }]\n *     }\n * };\n * ```\n *\n * ## Monitoring data changes\n *\n * While it is possible to listen for data changes on the projects individual stores, it is sometimes more convenient\n * to have a centralized place to handle all data changes. By listening for the {@link #event-change change event} your\n * code gets notified when data in any of the stores changes. Useful for example to keep an external data model up to\n * date:\n *\n * ```javascript\n * const scheduler = new SchedulerPro({\n *     project: {\n *         listeners : {\n *             change({ store, action, records }) {\n *                 const { $name } = store.constructor;\n *\n *                 if (action === 'add') {\n *                     externalDataModel.add($name, records);\n *                 }\n *\n *                 if (action === 'remove') {\n *                     externalDataModel.remove($name, records);\n *                 }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * ## Processing the data loaded from the server\n *\n * If you want to process the data received from the server after loading, you can use\n * the {@link #event-beforeLoadApply} or {@link #event-beforeSyncApply} events:\n *\n * ```javascript\n * const gantt = new Gantt({\n *     project: {\n *         listeners : {\n *             beforeLoadApply({ response }) {\n *                 // do something with load-response object before data is fed to the stores\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * ## Built-in StateTrackingManager\n *\n * The project also has a built-in {@link Core/data/stm/StateTrackingManager} (STM for short), that\n * handles undo/redo for the project stores (additional stores can also be added). By default, it is only used while\n * editing tasks using the task editor, the editor updates tasks live and uses STM to rollback changes if canceled. But\n * you can enable it to track all project store changes:\n *\n * ```javascript\n * // Enable automatic transaction creation and start recording\n * project.stm.autoRecord = true;\n * project.stm.enable();\n *\n * // Undo a transaction\n * project.stm.undo();\n *\n * // Redo\n * project.stm.redo();\n * ```\n *\n * Check out the `undoredo` demo to see it in action.\n *\n * @mixes Core/mixin/Events\n * @mixes SchedulerPro/data/mixin/PartOfProject\n * @mixes SchedulerPro/data/mixin/ProjectCrudManager\n * @mixes SchedulerPro/model/mixin/ProjectChangeHandlerMixin\n *\n * @extends Scheduler/model/mixin/ProjectModelMixin\n *\n * @typings Scheduler.model.ProjectModel -> Scheduler.model.SchedulerProjectModel\n */\nexport default class ProjectModel extends ProjectChangeHandlerMixin(ProjectCrudManager(ProjectModelMixin(SchedulerProProjectMixin))) {\n    //region Events\n    /**\n     * Fired when the engine has finished its calculations and the results has been written back to the records.\n     *\n     * ```javascript\n     * scheduler.project.on({\n     *     dataReady() {\n     *        console.log('Calculations finished');\n     *     }\n     * });\n     *\n     * scheduler.eventStore.first.duration = 10;\n     *\n     * // At some point a bit later it will log 'Calculations finished'\n     * ```\n     *\n     * @event dataReady\n     * @param {SchedulerPro.model.ProjectModel} source The project\n     * @param {Boolean} isInitialCommit Flag that shows if this commit is initial\n     * @param {Set} records Set of all {@link Core.data.Model}s that were modified in the completed transaction.\n     * Use the {@link Core.data.Model#property-modifications} property of each Model to identify\n     * modified fields.\n     */\n    /**\n     * Fired during the Engine calculation if {@link #config-enableProgressNotifications enableProgressNotifications} config is `true`\n     * @event progress\n     * @param {Number} total The total number of operations\n     * @param {Number} remaining The number of remaining operations\n     * @param {'storePopulation'|'propagating'} phase The phase of the calculation, either 'storePopulation'\n     * when data is getting loaded, or 'propagating' when data is getting calculated\n     */\n    /**\n     * Fired when the Engine detects a computation cycle.\n     * @event cycle\n     * @param {Object} schedulingIssue Scheduling error describing the case:\n     * @param {Function} schedulingIssue.getDescription Returns the cycle description\n     * @param {Object} schedulingIssue.cycle Object providing the cycle info\n     * @param {Function} schedulingIssue.getResolutions Returns possible resolutions\n     * @param {Function} continueWithResolutionResult Function to call after a resolution is chosen to\n     * proceed with the Engine calculations:\n     * ```js\n     * project.on('cycle', ({ continueWithResolutionResult }) => {\n     *     // cancel changes in case of a cycle\n     *     continueWithResolutionResult(EffectResolutionResult.Cancel);\n     * })\n     * ```\n     */\n    /**\n     * Fired when the Engine detects a scheduling conflict.\n     * @event schedulingConflict\n     * @param {Object} schedulingIssue The conflict details:\n     * @param {Function} schedulingIssue.getDescription Returns the conflict description\n     * @param {Object[]} schedulingIssue.intervals Array of conflicting intervals\n     * @param {Function} schedulingIssue.getResolutions Function to get possible resolutions\n     * @param {Function} continueWithResolutionResult Function to call after a resolution is chosen to\n     * proceed with the Engine calculations:\n     * ```js\n     * project.on('schedulingConflict', ({ schedulingIssue, continueWithResolutionResult }) => {\n     *     // apply the first resolution and continue\n     *     schedulingIssue.getResolutions()[0].resolve();\n     *     continueWithResolutionResult(EffectResolutionResult.Resume);\n     * })\n     * ```\n     */\n    /**\n     * Fired when the Engine detects a calendar misconfiguration when the calendar does\n     * not provide any working periods of time which makes the calendar usage impossible.\n     * @event emptyCalendar\n     * @param {Object} schedulingIssue Scheduling error describing the case:\n     * @param {Function} schedulingIssue.getDescription Returns the error description\n     * @param {Function} schedulingIssue.getCalendar Returns the calendar that must be fixed\n     * @param {Function} schedulingIssue.getResolutions Returns possible resolutions\n     * @param {Function} continueWithResolutionResult Function to call after a resolution is chosen to\n     * proceed with the Engine calculations:\n     * ```js\n     * project.on('emptyCalendar', ({ schedulingIssue, continueWithResolutionResult }) => {\n     *     // apply the first resolution and continue\n     *     schedulingIssue.getResolutions()[0].resolve();\n     *     continueWithResolutionResult(EffectResolutionResult.Resume);\n     * })\n     * ```\n     */\n    //endregion\n    //region Config\n    static get $name() {\n        return 'ProjectModel';\n    }\n    /**\n     * Class implementing resource allocation report used by\n     * {@link SchedulerPro.view.ResourceHistogram resource histogram} and\n     * {@link SchedulerPro.view.ResourceUtilization resource utilization} views\n     * for collecting resource allocation.\n     * @config {ResourceAllocationInfo} resourceAllocationInfoClass\n     */\n    /**\n     * Silences propagations caused by the project loading.\n     *\n     * Applying the loaded data to the project occurs in two basic stages:\n     *\n     * 1. Data gets into the engine graph which triggers changes propagation\n     * 2. The changes caused by the propagation get written to related stores\n     *\n     * Setting this flag to `true` makes the component perform step 2 silently without triggering events causing reactions on those changes\n     * (like sending changes back to the server if `autoSync` is enabled) and keeping stores in unmodified state.\n     *\n     * This is safe if the loaded data is consistent so propagation doesn't really do any adjustments.\n     * By default the system treats the data as consistent so this option is `true`.\n     *\n     * ```js\n     * new SchedulerPro{\n     *     project : {\n     *         // We want scheduling engine to recalculate the data properly\n     *         // so then we could save it back to the server\n     *         silenceInitialCommit : false,\n     *         ...\n     *     }\n     *     ...\n     * })\n     * ```\n     *\n     * @config {Boolean} silenceInitialCommit\n     * @default true\n     * @category Advanced\n     */\n    /**\n     * Maximum range the project calendars can iterate.\n     * The value is defined in milliseconds and by default equals `5 years` roughly.\n     * ```javascript\n     * new SchedulerPro({\n     *     project : {\n     *         // adjust calendar iteration limit to 10 years roughly:\n     *         // 10 years expressed in ms\n     *         maxCalendarRange : 10 * 365 * 24 * 3600000,\n     *         ...\n     *     }\n     * });\n     * ```\n     * @config {Number} maxCalendarRange\n     * @default 157680000000\n     * @category Advanced\n     */\n    /**\n     * When `true` the project manually scheduled tasks will adjust their proposed start/end dates\n     * to skip non working time.\n     *\n     * @field {Boolean} skipNonWorkingTimeWhenSchedulingManually\n     * @default false\n     */\n    /**\n     * When `true` the project's manually scheduled tasks adjust their duration by excluding the non-working time from it,\n     * according to the calendar. However, this may lead to inconsistencies, when moving an event which both starts\n     * and ends on the non-working time. For such cases you can disable this option.\n     *\n     * Default value is `true`\n     *\n     * IMPORTANT: Setting this option to `false` also forcefully sets the {@link #field-skipNonWorkingTimeWhenSchedulingManually} option\n     * to `false`.\n     * IMPORTANT: This option is going to be disabled by default from version 6.0.0.\n     *\n     * @field {Boolean} skipNonWorkingTimeInDurationWhenSchedulingManually\n     * @default true\n     */\n    /**\n     * This config manages DST correction in the scheduling engine. It only has effect when DST transition hour is\n     * working time. Usually DST transition occurs on Sunday, so with non working weekends the DST correction logic\n     * is not involved.\n     *\n     * If **true**, it will add/remove one hour when calculating end date. For example:\n     * Assume weekends are working and on Sunday, 2020-10-25 at 03:00 clocks are set back 1 hour. Assume there is an event:\n     *\n     * ```javascript\n     * {\n     *     startDate    : '2020-10-20',\n     *     duration     : 10 * 24 + 1,\n     *     durationUnit : 'hour'\n     * }\n     * ```\n     * It will end on 2020-10-30 01:00 (which is wrong) but duration will be reported correctly. Because of the DST\n     * transition the SchedulerPro project will add one more hour when calculating the end date.\n     *\n     * Also this may occur when day with DST transition is working but there are non-working intervals between that day\n     * and event end date.\n     *\n     * ```javascript\n     * {\n     *     calendar         : 1,\n     *     calendarsData    : [\n     *         {\n     *             id           : 1,\n     *             startDate    : '2020-10-26',\n     *             endDate      : '2020-10-27',\n     *             isWorking    : false\n     *         }\n     *     ],\n     *     eventsData       : [\n     *         {\n     *             id           : 1,\n     *             startDate    : '2020-10-20',\n     *             endDate      : '2020-10-30'\n     *         },\n     *         {\n     *             id           : 2,\n     *             startDate    : '2020-10-20',\n     *             duration     : 10 * 24 + 1,\n     *             durationUnit : 'hour'\n     *         }\n     *     ]\n     * }\n     * ```\n     *\n     * Event 1 duration will be incorrectly reported as 9 days * 24 hours, missing 1 extra hour added by DST transition.\n     * Event 2 end date will be calculated to 2020-10-30 01:00, adding one extra hour.\n     *\n     * If **false**, the SchedulerPro project will not add DST correction which fixes the quirk mentioned above.\n     * Event 1 duration will be correctly reported as 9 days * 24 hours + 1 hour. Event 2 end date will be calculated\n     * to 2020-10-30.\n     *\n     * Also, for those events days duration will be a floating point number due to extra (or missing) hour:\n     *\n     * ```javascript\n     * eventStore.getById(1).getDuration('day')  // 10.041666666666666\n     * eventStore.getById(1).getDuration('hour') // 241\n     * ```\n     *\n     * @config {Boolean} adjustDurationToDST\n     * @default false\n     */\n    /**\n     * The number of hours per day.\n     *\n     * **Please note:** the value **does not define** the amount of **working** time per day\n     * for that purpose one should use calendars.\n     *\n     * The value is used when converting the duration from one unit to another.\n     * So when user enters a duration of, for example, `5 days` the system understands that it\n     * actually means `120 hours` and schedules accordingly.\n     * @field {Number} hoursPerDay\n     * @default 24\n     */\n    /**\n     * The number of days per week.\n     *\n     * **Please note:** the value **does not define** the amount of **working** time per week\n     * for that purpose one should use calendars.\n     *\n     * The value is used when converting the duration from one unit to another.\n     * So when user enters a duration of, for example, `2 weeks` the system understands that it\n     * actually means `14 days` (which is then converted to {@link #field-hoursPerDay hours}) and\n     * schedules accordingly.\n     * @field {Number} daysPerWeek\n     * @default 7\n     */\n    /**\n     * The number of days per month.\n     *\n     * **Please note:** the value **does not define** the amount of **working** time per month\n     * for that purpose one should use calendars.\n     *\n     * The value is used when converting the duration from one unit to another.\n     * So when user enters a duration of, for example, `1 month` the system understands that it\n     * actually means `30 days` (which is then converted to {@link #field-hoursPerDay hours}) and\n     * schedules accordingly.\n     * @field {Number} daysPerMonth\n     * @default 30\n     */\n    /**\n     * The source of the calendar for dependencies (the calendar used for taking dependencies lag into account).\n     * Possible values are:\n     *\n     * - `ToEvent` - successor calendar will be used (default);\n     * - `FromEvent` - predecessor calendar will be used;\n     * - `Project` - the project calendar will be used.\n     *\n     * @field {'ToEvent'|'FromEvent'|'Project'} dependenciesCalendar\n     * @default 'ToEvent'\n     */\n    /**\n     * The project calendar.\n     * @field {SchedulerPro.model.CalendarModel} calendar\n     * @accepts {String|CalendarModelConfig|SchedulerPro.model.CalendarModel}\n     */\n    /**\n     * Returns current Project changes as an object consisting of added/modified/removed arrays of records for every\n     * managed store. Returns `null` if no changes exist. Format:\n     *\n     * ```javascript\n     * {\n     *     resources : {\n     *         added    : [{ name : 'New guy' }],\n     *         modified : [{ id : 2, name : 'Mike' }],\n     *         removed  : [{ id : 3 }]\n     *     },\n     *     events : {\n     *         modified : [{  id : 12, name : 'Cool task' }]\n     *     },\n     *     ...\n     * }\n     * ```\n     *\n     * @member {Object} changes\n     * @readonly\n     * @category Models & Stores\n     */\n    /**\n     * Project changes (CRUD operations to records in its stores) are automatically committed on a buffer to the\n     * underlying graph based calculation engine. The engine performs it calculations async.\n     *\n     * By calling this function, the commit happens right away. And by awaiting it you are sure that project\n     * calculations are finished and that references between records are up to date.\n     *\n     * The returned promise is resolved with an object. If that object has `rejectedWith` set, there has been a conflict and the calculation failed.\n     *\n     * ```javascript\n     * // Move an event in time\n     * eventStore.first.shift(1);\n     *\n     * // Trigger calculations directly and wait for them to finish\n     * const result = await project.commitAsync();\n     *\n     * if (result.rejectedWith) {\n     *     // there was a conflict during the scheduling\n     * }\n     * ```\n     *\n     * @async\n     * @function commitAsync\n     * @category Common\n     */\n    /**\n     * Set to `true` to enable calculation progress notifications.\n     * When enabled the project fires {@link #event-progress progress} event.\n     *\n     * **Note**: Enabling progress notifications will impact calculation performance, since it needs to pause calculations to allow redrawing the UI.\n     * @config {Boolean} enableProgressNotifications\n     * @category Advanced\n     */\n    /**\n     * Enables/disables the calculation progress notifications.\n     * @member {Boolean} enableProgressNotifications\n     * @category Advanced\n     */\n    /**\n     * If this flag is set to `true` (default) when a start/end date is set on the event, a corresponding\n     * `start-no-earlier/later-than` constraint is added, automatically. This is done in order to\n     * keep the event \"attached\" to this date, according to the user intention.\n     *\n     * Depending on your use case, you might want to disable this behaviour.\n     *\n     * @field {Boolean} addConstraintOnDateSet\n     * @default true\n     */\n    static get defaultConfig() {\n        return {\n            /**\n             * @hideproperties project, taskStore\n             */\n            //region Inline data configs & properties\n            /**\n             * Get/set {@link #property-eventStore} data.\n             *\n             * Always returns an array of {@link SchedulerPro.model.EventModel EventModels} but also accepts an array of\n             * its configuration objects as input.\n             *\n             * @member {SchedulerPro.model.EventModel[]} events\n             * @accepts {SchedulerPro.model.EventModel[]|EventModelConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-eventStore}. Should be an array of\n             * {@link SchedulerPro.model.EventModel EventModels} or its configuration objects.\n             *\n             * @config {SchedulerPro.model.EventModel[]|EventModelConfig[]} events\n             * @category Inline data\n             */\n            /**\n             * Get/set {@link #property-resourceStore} data.\n             *\n             * Always returns an array of {@link SchedulerPro.model.ResourceModel ResourceModels} but also accepts an\n             * array of its configuration objects as input.\n             *\n             * @member {SchedulerPro.model.ResourceModel[]} resources\n             * @accepts {SchedulerPro.model.ResourceModel[]|ResourceModelConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-resourceStore}. Should be an array of\n             * {@link SchedulerPro.model.ResourceModel ResourceModels} or its configuration objects.\n             *\n             * @config {SchedulerPro.model.ResourceModel[]|ResourceModelConfig[]} resources\n             * @category Inline data\n             */\n            /**\n             * Get/set {@link #property-assignmentStore} data.\n             *\n             * Always returns an array of {@link SchedulerPro.model.AssignmentModel AssignmentModels} but also accepts\n             * an array of its configuration objects as input.\n             *\n             * @member {SchedulerPro.model.AssignmentModel[]} assignments\n             * @accepts {SchedulerPro.model.AssignmentModel[]|AssignmentModelConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-assignmentStore}. Should be an array of\n             * {@link SchedulerPro.model.AssignmentModel AssignmentModels} or its configuration objects.\n             *\n             * @config {SchedulerPro.model.AssignmentModel[]|AssignmentModelConfig[]} assignments\n             * @category Inline data\n             */\n            /**\n             * Get/set {@link #property-dependencyStore} data.\n             *\n             * Always returns an array of {@link SchedulerPro.model.DependencyModel DependencyModels} but also accepts an\n             * array of its configuration objects as input.\n             *\n             * @member {SchedulerPro.model.DependencyModel[]} dependencies\n             * @accepts {SchedulerPro.model.DependencyModel[]|DependencyModelConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-dependencyStore}. Should be an array of\n             * {@link SchedulerPro.model.DependencyModel DependencyModels} or its configuration objects.\n             *\n             * @config {SchedulerPro.model.DependencyModel[]|DependencyModelConfig[]} dependencies\n             * @category Inline data\n             */\n            /**\n             * Get/set {@link #property-timeRangeStore} data.\n             *\n             * Always returns an array of {@link Scheduler.model.TimeSpan TimeSpans} but also accepts an\n             * array of its configuration objects as input.\n             *\n             * @member {Scheduler.model.TimeSpan[]} timeRanges\n             * @accepts {Scheduler.model.TimeSpan[]|TimeSpanConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-timeRangeStore}. Should be an array of\n             * {@link Scheduler.model.TimeSpan TimeSpans} or its configuration objects.\n             *\n             * @config {Scheduler.model.TimeSpan[]|TimeSpanConfig[]} timeRanges\n             * @category Inline data\n             */\n            /**\n             * Get/set {@link #property-resourceTimeRangeStore} data.\n             *\n             * Always returns an array of {@link Scheduler.model.ResourceTimeRangeModel ResourceTimeRangeModels} but\n             * also accepts an array of its configuration objects as input.\n             *\n             * @member {Scheduler.model.ResourceTimeRangeModel[]} resourceTimeRanges\n             * @accepts {Scheduler.model.ResourceTimeRangeModel[]|ResourceTimeRangeModelConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-resourceTimeRangeStore}. Should be an array\n             * of {@link Scheduler.model.ResourceTimeRangeModel ResourceTimeRangeModels} or its configuration objects.\n             *\n             * @config {Scheduler.model.ResourceTimeRangeModel[]|ResourceTimeRangeModelConfig[]} resourceTimeRanges\n             * @category Inline data\n             */\n            //endregion\n            //region Legacy inline data configs & properties\n            /**\n             * The initial data, to fill the {@link #property-eventStore eventStore} with.\n             * Should be an array of {@link SchedulerPro.model.EventModel EventModels} or its configuration objects.\n             *\n             * @config {SchedulerPro.model.EventModel[]} eventsData\n             * @category Legacy inline data\n             */\n            /**\n             * The initial data, to fill the {@link #property-dependencyStore dependencyStore} with.\n             * Should be an array of {@link SchedulerPro.model.DependencyModel DependencyModels} or its configuration\n             * objects.\n             *\n             * @config {SchedulerPro.model.DependencyModel[]} [dependenciesData]\n             * @category Legacy inline data\n             */\n            /**\n             * The initial data, to fill the {@link #property-resourceStore resourceStore} with.\n             * Should be an array of {@link SchedulerPro.model.ResourceModel ResourceModels} or its configuration objects.\n             *\n             * @config {SchedulerPro.model.ResourceModel[]} [resourcesData]\n             * @category Legacy inline data\n             */\n            /**\n             * The initial data, to fill the {@link #property-assignmentStore assignmentStore} with.\n             * Should be an array of {@link SchedulerPro.model.AssignmentModel AssignmentModels} or its configuration\n             * objects.\n             *\n             * @config {SchedulerPro.model.AssignmentModel[]} [assignmentsData]\n             * @category Legacy inline data\n             */\n            //endregion\n            //region Store configs and properties\n            /**\n             * The {@link SchedulerPro.data.EventStore store} holding the event information.\n             *\n             * See also {@link SchedulerPro.model.EventModel}\n             *\n             * @member {SchedulerPro.data.EventStore} eventStore\n             * @category Models & Stores\n             */\n            /**\n             * An {@link SchedulerPro.data.EventStore} instance or a config object.\n             * @config {SchedulerPro.data.EventStore|EventStoreConfig} eventStore\n             * @category Models & Stores\n             */\n            /**\n             * The {@link SchedulerPro.data.DependencyStore store} holding the dependency information.\n             *\n             * See also {@link SchedulerPro.model.DependencyModel}\n             *\n             * @member {SchedulerPro.data.DependencyStore} dependencyStore\n             * @category Models & Stores\n             */\n            /**\n             * A {@link SchedulerPro.data.DependencyStore} instance or a config object.\n             * @config {SchedulerPro.data.DependencyStore|DependencyStoreConfig} dependencyStore\n             * @category Models & Stores\n             */\n            /**\n             * The {@link SchedulerPro.data.ResourceStore store} holding the resources that can be assigned to the\n             * events in the event store.\n             *\n             * See also {@link SchedulerPro.model.ResourceModel}\n             *\n             * @member {SchedulerPro.data.ResourceStore} resourceStore\n             * @category Models & Stores\n             */\n            /**\n             * A {@link SchedulerPro.data.ResourceStore} instance or a config object.\n             * @config {SchedulerPro.data.ResourceStore|ResourceStoreConfig} resourceStore\n             * @category Models & Stores\n             */\n            /**\n             * The {@link SchedulerPro.data.AssignmentStore store} holding the assignment information.\n             *\n             * See also {@link SchedulerPro.model.AssignmentModel}\n             *\n             * @member {SchedulerPro.data.AssignmentStore} assignmentStore\n             * @category Models & Stores\n             */\n            /**\n             * An {@link SchedulerPro.data.AssignmentStore} instance or a config object.\n             * @config {SchedulerPro.data.AssignmentStore|AssignmentStoreConfig} assignmentStore\n             * @category Models & Stores\n             */\n            /**\n             * The {@link SchedulerPro.data.CalendarManagerStore store} holding the calendar information.\n             *\n             * See also {@link SchedulerPro.model.CalendarModel}\n             * @member {SchedulerPro.data.CalendarManagerStore} calendarManagerStore\n             * @category Models & Stores\n             */\n            /**\n             * A {@link SchedulerPro.data.CalendarManagerStore} instance or a config object.\n             * @config {SchedulerPro.data.CalendarManagerStore|CalendarManagerStoreConfig} calendarManagerStore\n             * @category Models & Stores\n             */\n            //endregion\n            //region Model & store class configs\n            /**\n             * The constructor of the calendar model class, to be used in the project. Will be set as the\n             * {@link Core.data.Store#config-modelClass modelClass} property of the\n             * {@link #property-calendarManagerStore}\n             *\n             * @config {SchedulerPro.model.CalendarModel} [calendarModelClass]\n             * @typings {typeof CalendarModel}\n             * @category Models & Stores\n             */\n            calendarModelClass : CalendarModel,\n            /**\n             * The constructor of the dependency model class, to be used in the project. Will be set as the\n             * {@link Core.data.Store#config-modelClass modelClass} property of the {@link #property-dependencyStore}\n             *\n             * @config {SchedulerPro.model.DependencyModel}\n             * @typings {typeof DependencyModel}\n             * @category Models & Stores\n             */\n            dependencyModelClass : DependencyModel,\n            /**\n             * The constructor of the event model class, to be used in the project. Will be set as the\n             * {@link Core.data.Store#config-modelClass modelClass} property of the {@link #property-eventStore}\n             *\n             * @config {SchedulerPro.model.EventModel}\n             * @typings {typeof EventModel}\n             * @category Models & Stores\n             */\n            eventModelClass : EventModel,\n            /**\n             * The constructor of the assignment model class, to be used in the project. Will be set as the\n             * {@link Core.data.Store#config-modelClass modelClass} property of the {@link #property-assignmentStore}\n             *\n             * @config {SchedulerPro.model.AssignmentModel}\n             * @typings {typeof AssignmentModel}\n             * @category Models & Stores\n             */\n            assignmentModelClass : AssignmentModel,\n            /**\n             * The constructor of the resource model class, to be used in the project. Will be set as the\n             * {@link Core.data.Store#config-modelClass modelClass} property of the {@link #property-resourceStore}\n             *\n             * @config {SchedulerPro.model.ResourceModel}\n             * @typings {typeof ResourceModel}\n             * @category Models & Stores\n             */\n            resourceModelClass : ResourceModel,\n            /**\n             * The constructor to create a calendar store instance with. Should be a class, subclassing the\n             * {@link SchedulerPro.data.CalendarManagerStore}\n             * @config {SchedulerPro.data.CalendarManagerStore|Object}\n             * @typings {typeof CalendarManagerStore|object}\n             * @category Models & Stores\n             */\n            calendarManagerStoreClass : CalendarManagerStore,\n            /**\n             * The constructor to create a dependency store instance with. Should be a class, subclassing the\n             * {@link SchedulerPro.data.DependencyStore}\n             * @config {SchedulerPro.data.DependencyStore|Object}\n             * @typings {typeof DependencyStore|object}\n             * @category Models & Stores\n             */\n            dependencyStoreClass : DependencyStore,\n            /**\n             * The constructor to create an event store instance with. Should be a class, subclassing the\n             * {@link SchedulerPro.data.EventStore}\n             * @config {SchedulerPro.data.EventStore|Object}\n             * @typings {typeof EventStore|object}\n             * @category Models & Stores\n             */\n            eventStoreClass : EventStore,\n            /**\n             * The constructor to create an assignment store instance with. Should be a class, subclassing the\n             * {@link SchedulerPro.data.AssignmentStore}\n             * @config {SchedulerPro.data.AssignmentStore|Object}\n             * @typings {typeof AssignmentStore|object}\n             * @category Models & Stores\n             */\n            assignmentStoreClass : AssignmentStore,\n            /**\n             * The constructor to create a resource store instance with. Should be a class, subclassing the\n             * {@link SchedulerPro.data.ResourceStore}\n             * @config {SchedulerPro.data.ResourceStore|Object}\n             * @typings {typeof ResourceStore|object}\n             * @category Models & Stores\n             */\n            resourceStoreClass : ResourceStore,\n            //endregion\n            /**\n             * The initial data, to fill the {@link #property-calendarManagerStore} with.\n             * Should be an array of {@link SchedulerPro.model.CalendarModel} or it's configuration objects.\n             *\n             * @config {SchedulerPro.model.CalendarModel[]}\n             * @category Legacy inline data\n             */\n            calendarsData : null,\n            /**\n             * Set to `true` to reset the undo/redo queues of the internal {@link Core.data.stm.StateTrackingManager}\n             * after the Project has loaded. Defaults to `false`\n             * @config {Boolean} resetUndoRedoQueuesAfterLoad\n             * @category Advanced\n             */\n            supportShortSyncResponseNote : 'Note: Please consider enabling \"supportShortSyncResponse\" option to allow less detailed sync responses (https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#config-supportShortSyncResponse)',\n            /**\n             * Enables early rendering in SchedulerPro, by postponing calculations to after the first refresh.\n             *\n             * Requires event data loaded to be pre-normalized to function as intended, since it will be used to render\n             * before engine has normalized the data. Given un-normalized data events will snap into place when\n             * calculations are finished.\n             *\n             * The Gantt chart will be read-only until the initial calculations are finished.\n             *\n             * @config {Boolean}\n             * @default\n             * @category Advanced\n             */\n            delayCalculation : true,\n            calendarManagerStore : {},\n            stmClass : StateTrackingManager\n        };\n    }\n    static get configurable() {\n        return {\n            /**\n             * Get/set {@link #property-calendarManagerStore} data.\n             *\n             * Always returns a {@link SchedulerPro.model.CalendarModel} array but also accepts an array of\n             * its configuration objects as input.\n             *\n             * @member {SchedulerPro.model.CalendarModel[]} calendars\n             * @accepts {SchedulerPro.model.CalendarModel[]|CalendarModelConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-eventStore}. Should be a {@link SchedulerPro.model.CalendarModel}\n             * array or its configuration objects.\n             *\n             * @config {SchedulerPro.model.CalendarModel[]|CalendarModelConfig[]} calendars\n             * @category Inline data\n             */\n            calendars : null\n        };\n    }\n    // For TaskBoard compatibility\n    get taskStore() {\n        return this.eventStore;\n    }\n    //endregion\n    //region Inline data\n    get calendars() {\n        return this.calendarManagerStore.allRecords;\n    }\n    updateCalendars(calendars) {\n        this.calendarManagerStore.data = calendars;\n    }\n    //endregion\n}\nProjectModel._$name = 'ProjectModel';", "import Base from '../../../Core/Base.js';\nimport ProHorizontalLayoutStack from '../../eventlayout/ProHorizontalLayoutStack.js';\nimport ProHorizontalLayoutPack from '../../eventlayout/ProHorizontalLayoutPack.js';\n/**\n * @module SchedulerPro/view/mixin/SchedulerProEventRendering\n */\n/**\n * Config for event layout\n * @typedef {Object} EventLayoutConfig\n * @property {'stack'|'pack'|'mixed'|'none'} type Event layout type. Possible values for horizontal mode are\n * `stack`, `pack` and `none`. For vertical mode: `pack`, `mixed` and `none`.\n * @property {Function} layoutFn Horizontal mode only. This function allows to manually position events inside the row.\n * @property {Object} weights Horizontal mode only. Specifies groups order.\n * @property {String|Function} groupBy Horizontal mode only. Specifies a way to group events inside a row.\n */\n/**\n * Functions to handle event rendering in Scheduler Pro (EventModel -> dom elements).\n *\n * @mixin\n */\nexport default Target => class SchedulerProEventRendering extends (Target || Base) {\n    static get $name() {\n        return 'SchedulerProEventRendering';\n    }\n    static get configurable() {\n        return {\n            /**\n             * This config defines how to handle overlapping events. Valid values are:\n             * - `stack`, adjusts row height (only horizontal)\n             * - `pack`, adjusts event height\n             * - `mixed`, allows two events to overlap, more packs (only vertical)\n             * - `none`, allows events to overlap\n             *\n             * You can also provide a configuration object accepted by\n             * {@link SchedulerPro.eventlayout.ProHorizontalLayout} to group events or even take control over the\n             * layout (i.e. vertical position and height):\n             *\n             * To group events:\n             *\n             * ```javascript\n             * new SchedulerPro({\n             *     eventLayout : {\n             *         type    : 'stack',\n             *         weights : {\n             *             high   : 100,\n             *             normal : 150,\n             *             low    : 200\n             *         },\n             *         groupBy : 'prio'\n             *     }\n             * });\n             * ```\n             *\n             * To take control over the layout:\n             *\n             * ```javascript\n             * new SchedulerPro({\n             *     eventLayout : {\n             *         layoutFn : items => {\n             *             items.forEach(item => {\n             *                 item.top = 100 * Math.random();\n             *                 item.height = 100 * Math.random();\n             *             });\n             *\n             *             return 100;\n             *         }\n             *     }\n             * });\n             * ```\n             *\n             * For more info on grouping and layout please refer to {@link SchedulerPro.eventlayout.ProHorizontalLayout}\n             * doc article.\n             *\n             * @prp {'stack'|'pack'|'mixed'|'none'|EventLayoutConfig}\n             * @default\n             * @category Scheduled events\n             */\n            eventLayout : 'stack',\n            /**\n             * The class responsible for the packing horizontal event layout process.\n             * Override this to take control over the layout process.\n             * @config {Scheduler.eventlayout.HorizontalLayout}\n             * @typings {typeof HorizontalLayout}\n             * @default\n             * @private\n             * @category Misc\n             */\n            horizontalLayoutPackClass : ProHorizontalLayoutPack,\n            /**\n             * The class name responsible for the stacking horizontal event layout process.\n             * Override this to take control over the layout process.\n             * @config {Scheduler.eventlayout.HorizontalLayout}\n             * @typings {typeof HorizontalLayout}\n             * @default\n             * @private\n             * @category Misc\n             */\n            horizontalLayoutStackClass : ProHorizontalLayoutStack\n        };\n    }\n    //region Config\n    updateInternalEventLayout(eventLayout, oldEventLayout) {\n        const me = this;\n        if (!me.isConfiguring) {\n            me.clearLayouts();\n        }\n        super.updateInternalEventLayout(eventLayout, oldEventLayout);\n    }\n    //endregion\n    getEventLayout(config) {\n        config = super.getEventLayout(config);\n        if ('layoutFn' in config) {\n            config.type = 'layoutFn';\n        }\n        return config;\n    }\n    clearLayouts() {\n        const me = this;\n        if (me.layouts) {\n            for (const key in me.layouts) {\n                me.layouts[key].destroy();\n                delete me.layouts[key];\n            }\n        }\n    }\n    /**\n     * Get event layout handler. The handler decides the vertical placement of events within a resource.\n     * Returns null if no eventLayout is used (if {@link #config-eventLayout} is set to \"none\")\n     * @internal\n     * @returns {Scheduler.eventlayout.HorizontalLayout}\n     * @readonly\n     * @category Scheduled events\n     */\n    getEventLayoutHandler(eventLayout) {\n        const me = this;\n        if (!me.isHorizontal) {\n            return null;\n        }\n        const { timeAxisViewModel, horizontal } = me;\n        if (!me.layouts) {\n            me.layouts = {};\n        }\n        const { layouts } = me;\n        switch (eventLayout.type) {\n            // stack, adjust row height to fit all events\n            case 'stack': {\n                if (!layouts.horizontalStack) {\n                    layouts.horizontalStack = me.horizontalLayoutStackClass.new({\n                        scheduler                   : me,\n                        timeAxisViewModel,\n                        bandIndexToPxConvertFn      : horizontal.layoutEventVerticallyStack,\n                        bandIndexToPxConvertThisObj : horizontal,\n                        groupByThisObj              : me\n                    }, eventLayout);\n                }\n                return layouts.horizontalStack;\n            }\n            // pack, fit all events in available height by adjusting their height\n            case 'pack': {\n                if (!layouts.horizontalPack) {\n                    layouts.horizontalPack = me.horizontalLayoutPackClass.new({\n                        scheduler                   : me,\n                        timeAxisViewModel,\n                        bandIndexToPxConvertFn      : horizontal.layoutEventVerticallyPack,\n                        bandIndexToPxConvertThisObj : horizontal,\n                        groupByThisObj              : me\n                    }, eventLayout);\n                }\n                return layouts.horizontalPack;\n            }\n            case 'layoutFn': {\n                // Both methods are called on a layout\n                return {\n                    type                : 'layoutFn',\n                    scheduler           : me,\n                    applyLayout         : eventLayout.layoutFn,\n                    layoutEventsInBands : eventLayout.layoutFn\n                };\n            }\n            default:\n                return null;\n        }\n    }\n    get widgetClass() {}\n};\n", "import StringHelper from '../../Core/helper/StringHelper.js';\nimport '../../Scheduler/feature/NonWorkingTime.js';\nimport '../localization/En.js';\n// Always required features\nimport { TimeUnit } from '../../Engine/scheduling/Types.js';\nimport { CalculatedValueGen } from '../../ChronoGraph/chrono/Identifier.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport { BaseCalendarMixin } from '../../Engine/quark/model/scheduler_basic/BaseCalendarMixin.js';\nimport NumberFormat from '../../Core/helper/util/NumberFormat.js';\nimport TimelineHistogram from '../../Scheduler/view/TimelineHistogram.js';\nimport SchedulerStores from '../../Scheduler/view/mixin/SchedulerStores.js';\nimport SchedulerResourceRendering from '../../Scheduler/view/mixin/SchedulerResourceRendering.js';\nimport CrudManagerView from '../../Scheduler/crud/mixin/CrudManagerView.js';\nimport Objects from '../../Core/helper/util/Objects.js';\nimport ProjectModel from '../model/ProjectModel.js';\n// Imitates ResourceAllocationInfo structure\nfunction buildReturnedValue(total) {\n    return {\n        allocation : {\n            total\n        }\n    };\n}\n/**\n * @module SchedulerPro/view/ResourceHistogram\n */\n/**\n * This view displays a read-only timeline report of the workload for the resources in a\n * {@link SchedulerPro/model/ProjectModel project}. The resource allocation is visualized as bars along the time axis\n * with an optional line indicating the maximum available time for each resource. A {@link Scheduler/column/ScaleColumn}\n * is also added automatically.\n *\n * To create a standalone histogram, simply configure it with a Project instance:\n *\n * ```javascript\n * const project = new ProjectModel({\n *     autoLoad : true,\n *     loadUrl  : 'examples/schedulerpro/view/data.json'\n * });\n *\n * const histogram = new ResourceHistogram({\n *     project,\n *     appendTo    : 'targetDiv',\n *     rowHeight   : 60,\n *     minHeight   : '20em',\n *     flex        : '1 1 50%',\n *     showBarTip  : true,\n *     columns     : [\n *         {\n *             width : 200,\n *             field : 'name',\n *             text  : 'Resource'\n *         }\n *     ]\n * });\n * ```\n *\n * {@inlineexample SchedulerPro/view/ResourceHistogram.js}\n *\n * ## Pairing the component\n *\n * You can also pair the histogram with other timeline views such as the Gantt or Scheduler,\n * using the {@link Scheduler/view/TimelineBase#config-partner} config.\n *\n * You can configure (or hide completely) the built-in scale column easily:\n *\n * ```javascript\n * const histogram = new ResourceHistogram({\n *    project,\n *    appendTo    : 'targetDiv',\n *    columns     : [\n *        {\n *            width : 200,\n *            field : 'name',\n *            text  : 'Resource'\n *        },\n *        // Hide the scale column (or add any other column configs)\n *        {\n *            type   : 'scale',\n *            hidden : true\n *        }\n *    ]\n * });\n * ```\n *\n * ## Changing displayed values\n *\n * To change the histogram bar texts, supply a {@link #config-getBarText} function.\n * Here for example the provided function displays resources time **left** instead of\n * allocated time\n *\n * ```javascript\n * new ResourceHistogram({\n *     getBarText(datum) {\n *         const resourceHistogram = this.owner;\n *\n *         // get default bar text\n *         let result = resourceHistogram.getBarTextDefault(...arguments);\n *\n *         // and if some work is done in the tick\n *         if (result) {\n *\n *             const unit = resourceHistogram.getBarTextEffortUnit();\n *\n *             // display the resource available time\n *             result = resourceHistogram.getEffortText(datum.maxEffort - datum.effort, unit);\n *         }\n *\n *         return result;\n *     },\n *     ...\n * })\n * ```\n *\n * @features SchedulerPro/feature/CellEdit\n * @features SchedulerPro/feature/ResourceNonWorkingTime\n * @features SchedulerPro/feature/TimeSpanHighlight\n *\n * @extends Scheduler/view/TimelineHistogram\n * @mixes Scheduler/view/mixin/SchedulerStores\n * @mixes Scheduler/view/mixin/SchedulerResourceRendering\n * @mixes Scheduler/crud/mixin/CrudManagerView\n *\n * @classtype resourcehistogram\n * @widget\n */\nexport default class ResourceHistogram extends TimelineHistogram.mixin(SchedulerStores, SchedulerResourceRendering, CrudManagerView) {\n    //region Config\n    static $name = 'ResourceHistogram';\n    static type = 'resourcehistogram';\n    /**\n     * @hideconfigs durationDisplayPrecision, resourceColumns, enableRecurringEvents, eventBarTextField,\n     * eventBodyTemplate, eventColor, eventLayout, eventRenderer, eventRendererThisObj, eventStyle,\n     * horizontalEventSorterFn, horizontalLayoutPackClass, horizontalLayoutStackClass, milestoneAlign,\n     * milestoneTextPosition, highlightPredecessors, highlightSuccessors, removeUnassignedEvent,\n     * eventAssignHighlightCls, eventCls, eventSelectedCls, fixedEventCls, overScheduledEventClass,\n     * timeZone\n     */\n    static configurable = {\n        projectModelClass : ProjectModel,\n        sortFeatureStore      : 'store',\n        timeAxisColumnCellCls : 'b-sch-timeaxis-cell b-resourcehistogram-cell',\n        /**\n         * Effort value format string.\n         * Must be a template supported by {@link Core/helper/util/NumberFormat} class.\n         * @config {String}\n         * @default\n         */\n        effortFormat : '0.#',\n        getRecordData : 'getRecordAllocationData',\n        aggregateDataEntry : 'aggregateAllocationEntry',\n        initAggregatedDataEntry : 'initAggregatedAllocationEntry',\n        hardRefreshOnTimeAxisReconfigure : false,\n        /**\n         * Specifies whether effort values should display units or not.\n         * @config {Boolean}\n         * @default\n         */\n        showEffortUnit : true,\n        useProjectTimeUnitsForScale : false,\n        /**\n         * Default time unit to display resources effort values.\n         * The value is used as default when displaying effort in tooltips and bars text.\n         * Yet the effective time unit used might change dynamically when zooming in the histogram\n         * so its ticks unit gets smaller than the default unit.\n         * Please use {@link #config-barTipEffortUnit} to customize default units for tooltips only\n         * and {@link #config-barTextEffortUnit} to customize default units in bar texts.\n         * @config {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'}\n         * @default hour\n         */\n        effortUnit : TimeUnit.Hour,\n        /**\n         * Default time unit used for displaying resources effort in bars.\n         * Yet the effective time unit used might change dynamically when zooming in the histogram\n         * so its ticks unit gets smaller than the default unit.\n         * Please use {@link #config-barTipEffortUnit} to customize default units for tooltips\n         * (or {@link #config-effortUnit} to customize both texts and tooltips default units).\n         * @config {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'}\n         * @default hour\n         */\n        barTextEffortUnit : null,\n        /**\n         * Default time unit used when displaying resources effort in tooltips.\n         * Yet the effective time unit used might change dynamically when zooming in the histogram\n         * so its ticks unit gets smaller than the default unit.\n         * Please use {@link #config-barTextEffortUnit} to customize default units for bar texts\n         * (or {@link #config-effortUnit} to customize both texts and tooltips default units).\n         * @config {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'}\n         * @default hour\n         */\n        barTipEffortUnit : null,\n        /**\n         * Set to `true` if you want to display the maximum resource allocation line.\n         * @config {Boolean}\n         * @default\n         */\n        showMaxEffort : true,\n        series : {\n            maxEffort : {\n                type  : 'outline',\n                field : 'maxEffort'\n            },\n            effort : {\n                type  : 'bar',\n                field : 'effort'\n            }\n        },\n        /**\n         * A Function which returns the tooltip text to display when hovering a bar.\n         * The following parameters are passed:\n         * @param {Object} context The tooltip context info\n         * @param {ResourceAllocationInterval} context.datum The histogram bar being hovered info\n         * @param {Core.widget.Tooltip} context.tip The tooltip instance\n         * @param {HTMLElement} context.element The Element for which the Tooltip is monitoring mouse movement\n         * @param {HTMLElement} context.activeTarget The target element that triggered the show\n         * @param {Event} context.event The raw DOM event\n         * @param {SchedulerPro.model.ResourceModel} data.record The record which effort\n         * the hovered bar displays.\n         * @returns {String} Tooltip HTML content\n         * @config {Function}\n         */\n        barTooltipTemplate({ datum }) {\n            let result = '';\n            const { inEventTimeSpan, isGroup } = datum;\n            if (inEventTimeSpan) {\n                if (isGroup) {\n                    result = this.getGroupBarTip(...arguments);\n                }\n                else {\n                    result = this.getResourceBarTip(...arguments);\n                }\n            }\n            return result;\n        },\n        /**\n         * Set to `true` if you want to display resources effort values in bars\n         * (for example: `24h`, `7d`, `60min` etc.).\n         * The text contents can be changed by providing {@link #config-getBarText} function.\n         * @config {Boolean}\n         */\n        showBarText : false,\n        /**\n         * A Function which returns the text to render inside a bar.\n         *\n         * Here for example the provided function displays resources time **left** instead of\n         * allocated time\n         *\n         * ```javascript\n         * new ResourceHistogram({\n         *     getBarText(datum) {\n         *         const resourceHistogram = this.owner;\n         *\n         *         const { showBarText } = resourceHistogram;\n         *\n         *         let result = '';\n         *\n         *         // respect existing API - show bar texts only when \"showBarText\" is true\n         *         // and if some work is done in the tick\n         *         if (showBarText && datum.effort) {\n         *\n         *             const unit = resourceHistogram.getBarTextEffortUnit();\n         *\n         *             // display the resource available time\n         *             result = resourceHistogram.getEffortText(datum.maxEffort - datum.effort, unit);\n         *         }\n         *\n         *         return result;\n         *     },\n         * })\n         * ```\n         *\n         * **Please note** that the function will be injected into the underlying\n         * {@link Core/widget/graph/Histogram} component that is used under the hood\n         * to render actual charts.\n         * So `this` will refer to the {@link Core/widget/graph/Histogram} instance, not\n         * this class instance.\n         * To access the view please use `this.owner` in the function:\n         *\n         * ```javascript\n         * new ResourceHistogram({\n         *     getBarText(datum) {\n         *         // \"this\" in the method refers core Histogram instance\n         *         // get the view instance\n         *         const resourceHistogram = this.owner;\n         *\n         *         .....\n         *     },\n         * })\n         * ```\n         * The following parameters are passed:\n         * @param {ResourceAllocationInterval} datum The datum being rendered\n         * @param {Number} index The index of the datum being rendered\n         * @returns {String} Text to render inside the bar\n         * @config {Function} getBarText\n         */\n        groupBarTipAssignmentLimit : 5,\n        /**\n         * Set to `true` to include inactive tasks allocation and `false` to not take such tasks into account.\n         * @config {Boolean}\n         * @default\n         */\n        includeInactiveEvents : false,\n        histogramWidget : {\n            cls : 'b-hide-offscreen b-resourcehistogram-histogram'\n        },\n        fixedRowHeight : true\n    };\n    //endregion\n    //region Constructor/Destructor\n    get timeAxis() {\n        return super.timeAxis;\n    }\n    set timeAxis(timeAxis) {\n        const currentTimeAxis = this._timeAxis;\n        super.timeAxis = timeAxis;\n        if (this.partner && !timeAxis || (currentTimeAxis && currentTimeAxis === timeAxis)) {\n            return;\n        }\n        this._timeAxis.ion({\n            name           : 'timeAxis',\n            endReconfigure : 'onTimeAxisEndReconfigure',\n            thisObj        : this\n        });\n    }\n    afterConfigure() {\n        super.afterConfigure();\n        const me = this;\n        me.onRecordAllocationCalculated = me.onRecordAllocationCalculated.bind(me);\n        me.onCommitAsyncCompletion = me.onCommitAsyncCompletion.bind(me);\n    }\n    onDestroy() {\n        super.onDestroy(...arguments);\n        // get graph ..if the project is not destroyed yet\n        const graph = this.project.getGraph?.();\n        if (graph && this.ticksIdentifier) {\n            graph.removeIdentifier(this.ticksIdentifier);\n        }\n    }\n    clearHistogramDataCache(record) {\n        if (!record) {\n            // remove cached histogram data (which is a set of graph entities) from the graph\n            for (const [record, entity] of this.getHistogramDataCache()?.entries()) {\n                record.removeEntity?.(entity);\n            }\n        }\n        super.clearHistogramDataCache(...arguments);\n    }\n    //endregion\n    //region Project\n    bindProject(project) {\n        this.detachListeners('resourceHistogramProject');\n        project.ion({\n            name                  : 'resourceHistogramProject',\n            refresh               : 'internalOnProjectRefresh',\n            delayCalculationStart : 'onProjectDelayCalculationStart',\n            delayCalculationEnd   : 'onProjectDelayCalculationEnd',\n            repopulateReplica     : 'onRepopulateReplica',\n            thisObj : this\n        });\n    }\n    updateProject(project) {\n        this.bindProject(project);\n        // project implements CrudManager API\n        this.crudManager = project;\n        this.store = project.resourceStore;\n    }\n    //endregion\n    //region Internal\n    getRowHeight() {\n        return this.rowHeight;\n    }\n    convertEffortUnit(value, unit, toUnit) {\n        return this.project.run('$convertDuration', value, unit, toUnit);\n    }\n    updateUseProjectTimeUnitsForScale() {\n        const me = this;\n        // Below this.scalePoints assignment of doesn't work until ResourceHistogram is painted\n        // since ScaleWidget being constructed tries to read its rootElement which results:\n        // \"Floating Widgets must have \"rootElement\" to be ...\"\n        if (me.isPainted) {\n            // we need to regenerate ScaleColumn points according to new unit values\n            const eventParams = { scalePoints : me.generateScalePoints() };\n            /**\n             * Fires when the component generates points for the {@link #property-scaleColumn scale column}.\n             *\n             * Use a listeners to override the generated scale points:\n             *\n             * ```javascript\n             * new ResourceHistogram({\n             *     ...\n             *     listeners : {\n             *         generateScalePoints(params) {\n             *             // provide text for each scale point (if not provided already)\n             *             params.scalePoints.forEach(point => {\n             *                 point.text = point.text || point.value;\n             *             });\n             *         }\n             *     }\n             * })\n             * ```\n             *\n             * @param {SchedulerPro.view.ResourceHistogram} source The component instance\n             * @param {ScalePoint[]} scalePoints Array of objects representing scale points. Each entry can have properties:\n             * - `value` - point value\n             * - `unit` - point value unit\n             * - `text` - label text (if not provided the point will not have a label displayed)\n             * @event generateScalePoints\n             * @category Scale column\n             */\n            me.trigger('generateScalePoints', eventParams);\n            // allow to override the points in a listener\n            me._generatedScalePoints = me.scalePoints = eventParams.scalePoints;\n            me.scheduleRefreshRows();\n        }\n    }\n    updateShowBarText(value) {\n        this.scheduleRefreshRows();\n    }\n    get eventStore() {\n        return this.project?.eventStore;\n    }\n    set eventStore(eventStore) {\n        super.eventStore = eventStore;\n    }\n    convertUnitsToHistogramValue(value, unit) {\n        return this.useProjectTimeUnitsForScale\n            ? this.convertEffortUnit(value, unit, TimeUnit.Millisecond)\n            : DateHelper.asMilliseconds(value, unit);\n    }\n    convertHistogramValueToUnits(value, unit) {\n        return this.useProjectTimeUnitsForScale\n            ? this.convertEffortUnit(value, TimeUnit.Millisecond, unit)\n            : DateHelper.as(unit, value);\n    }\n    buildScalePointText(scalePoint) {\n        return `${scalePoint.value}${DateHelper.getShortNameOfUnit(scalePoint.unit)}`;\n    }\n    /**\n     * Generates points for the {@link #property-scaleColumn scale column}.\n     *\n     * **Override the method to customize the scale column points.**\n     *\n     * @param {Number} [scaleMax] Maximum value for the scale. Uses current timeaxis increment if not provided.\n     * @param {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} [unit] Time\n     * unit `scaleMax` argument is expressed in.\n     * Uses current timeaxis unit if not provided.\n     * @returns {ScalePoint[]} Array of objects representing scale points. Each entry can have properties:\n     * - `value` - point value\n     * - `unit` - point value unit\n     * - `text` - label text (if not provided the point will not have a label displayed)\n     * @category Scale column\n     */\n    generateScalePoints(scaleMax, unit) {\n        // bail out if there is no project or it's not in the graph\n        if (!this.project?.graph) {\n            return;\n        }\n        const\n            { timeAxis } = this,\n            scalePoints           = [];\n        scaleMax = scaleMax || timeAxis.increment;\n        unit = unit || timeAxis.unit;\n        let scaleStep;\n        // If the ticks are defined as 1 unit let's break it down to smaller units\n        if (scaleMax === 1) {\n            // getting timeaxis tick sub-unit and number of them in a tick\n            unit     = DateHelper.getSmallerUnit(unit);\n            scaleMax = Math.round(\n                this.useProjectTimeUnitsForScale ? this.convertEffortUnit(scaleMax, timeAxis.unit, unit)\n                    : DateHelper.as(unit, scaleMax, timeAxis.unit)\n            );\n        }\n        // Let's try to guess how many points in the scale will work nicely\n        for (const factor of [7, 5, 4, 3, 2]) {\n            // unitsNumber is multiple of \"factor\" -> we generate \"factor\"-number of points\n            if (!(scaleMax % factor)) {\n                scaleStep = scaleMax / factor;\n                break;\n            }\n        }\n        // fallback to a single point equal to maximum value\n        if (!scaleStep) {\n            scaleStep = scaleMax;\n        }\n        for (let value = scaleStep; value <= scaleMax; value += scaleStep) {\n            scalePoints.push({\n                value\n            });\n        }\n        const lastPoint = scalePoints[scalePoints.length - 1];\n        // put unit and label to the last point\n        lastPoint.unit = unit;\n        lastPoint.text = this.buildScalePointText(lastPoint);\n        return scalePoints;\n    }\n    updateViewPreset(viewPreset) {\n        const me = this;\n        // Set a flag indicating that we're inside of `updateViewPreset` so our `onTimeAxisEndReconfigure` will skip its call.\n        // We call it here later.\n        me._updatingViewPreset = true;\n        super.updateViewPreset(...arguments);\n        me._updatingViewPreset = false;\n        // In `super.updateViewPreset` function `this.render` is called which checks if the engine is not dirty\n        // ..and we modify `ticksIdentifier` atom in `onTimeAxisEndReconfigure`\n        // so the engine state gets dirty and rendering gets delayed which ends up an exception.\n        // So we call `onTimeAxisEndReconfigure` after super `updateViewPreset` code\n        // to keep the engine non-dirty while zooming/setting a preset.\n        // This scenario is covered w/ SchedulerPro/tests/pro/view/ResourceHistogramZoom.t.js\n        if (me.project.isInitialCommitPerformed && me.isPainted) {\n            me.onTimeAxisEndReconfigure();\n        }\n    }\n    onRepopulateReplica() {\n        this.ticksIdentifier = null;\n        this.clearHistogramDataCache();\n    }\n    buildTicksIdentifier() {\n        const\n            me    = this,\n            graph = me.project.getGraph();\n        if (!me.ticksIdentifier) {\n            me.ticksIdentifier = graph.addIdentifier(CalculatedValueGen.new());\n        }\n        else {\n            const prevTicksCalendar = graph.read(me.ticksIdentifier);\n            me.project.clearCombinationsWith(prevTicksCalendar);\n        }\n        me.ticksIdentifier.writeToGraph(graph, new BaseCalendarMixin({\n            unspecifiedTimeIsWorking : false,\n            intervals                : me.timeAxis.ticks.map(tick => {\n                return {\n                    startDate : tick.startDate,\n                    endDate   : tick.endDate,\n                    isWorking : true\n                };\n            })\n        }));\n        // process ticks to detect if their widths are monotonous\n        // or some tick has a different width value\n        me.collectTicksWidth();\n        return me.ticksIdentifier;\n    }\n    onProjectDelayCalculationStart() {\n        this.suspendRefresh();\n    }\n    onProjectDelayCalculationEnd() {\n        this.resumeRefresh(false);\n    }\n    projectUnitsHasChanged() {\n        const { project } = this;\n        return project.daysPerMonth !== this._projectDaysPerMonth ||\n            project.daysPerWeek !== this._projectDaysPerWeek ||\n            project.hoursPerDay !== this._projectHoursPerDay;\n    }\n    internalOnProjectRefresh({ source, isInitialCommit, isCalculated }) {\n        if (isCalculated) {\n            const me = this;\n            if (!me.ticksIdentifier) {\n                me.onTimeAxisEndReconfigure();\n            }\n            // if project units has changed and we use them for scale points\n            if (me.useProjectTimeUnitsForScale && me.projectUnitsHasChanged()) {\n                me._projectDaysPerMonth = source.daysPerMonth;\n                me._projectDaysPerWeek = source.daysPerWeek;\n                me._projectHoursPerDay = source.hoursPerDay;\n                // regenerate scale points\n                const eventParams = { scalePoints : me.generateScalePoints() };\n                me.trigger('generateScalePoints', eventParams);\n                // allow to override the points in a listener\n                me._generatedScalePoints = me.scalePoints = eventParams.scalePoints;\n            }\n            // If rowManager got no topRow yet - reinitialize it otherwise refresh does nothing\n            if (!me.rowManager.topRow || me.rowManager.topRow.id == null) {\n                me.rowManager.reinitialize();\n            }\n            // enable view refreshing back (trigger refresh if that's an initial commit)\n            else if (isInitialCommit) {\n                me.refreshRows();\n            }\n        }\n    }\n    relayStoreDataChange(event) {\n        super.relayStoreDataChange(event);\n        if (this.store.count === 0) {\n            // To clear histogram when no rows to refresh\n            this.histogramWidget.data = [];\n            this.histogramWidget.refresh();\n        }\n    }\n    changeHistogramWidget(widget, oldWidget) {\n        const me = this;\n        if (!oldWidget) {\n            const { series } = me;\n            if (!me.showMaxEffort && series.maxEffort) {\n                series.maxEffort = false;\n            }\n            widget = super.changeHistogramWidget(...arguments);\n        }\n        return widget;\n    }\n    getRectConfig(rectConfig, datum, index, series) {\n        if (datum.inEventTimeSpan) {\n            const\n                { topValue } = this,\n                value = datum[series.field],\n                forceHeight = series.stretch ? 1 : datum.height;\n            rectConfig.height = forceHeight || (value > topValue ? topValue : value) / topValue;\n            rectConfig.y = 1 - rectConfig.height;\n            return rectConfig;\n        }\n    }\n    // Injectable method.\n    getRectClassDefault(series, rectConfig, datum) {\n        if (series.id === 'effort') {\n            switch (true) {\n                case datum.isOverallocated :\n                    return 'b-overallocated';\n                case datum.isUnderallocated :\n                    return 'b-underallocated';\n            }\n        }\n        return '';\n    }\n    get effortFormatter() {\n        const\n            me     = this,\n            format = me.effortFormat;\n        let formatter = me._effortFormatter;\n        if (!formatter || me._effortFormat !== format) {\n            formatter = NumberFormat.get(me._lastFormat = format);\n            me._effortFormatter = formatter;\n        }\n        return formatter;\n    }\n    /**\n     * Formats effort value to display in the component bars and tooltips.\n     * @param {Number} effort Effort value\n     * @param {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} unit Effort value unit\n     * @param {Boolean} [showEffortUnit=this.showEffortUnit] Provide `true` to include effort unit. If not provided\n     * uses {@link #config-showEffortUnit} value.\n     * @returns {String} Formatted effort value.\n     */\n    getEffortText(effort, unit, showEffortUnit = this.showEffortUnit) {\n        // bail out if there is no project or it's not in the graph\n        if (!this.project?.graph) {\n            return;\n        }\n        const { scaleUnit, effortFormatter } = this;\n        unit = unit || scaleUnit;\n        const\n            localizedUnit = DateHelper.getShortNameOfUnit(unit),\n            effortInUnits = this.convertHistogramValueToUnits(effort, unit);\n        return effortFormatter.format(effortInUnits) + (showEffortUnit ? localizedUnit : '');\n    }\n    getBarTipEffortUnit() {\n        const\n            { effortUnit, barTipEffortUnit, timeAxis } = this,\n            defaultUnit                                = barTipEffortUnit || effortUnit;\n        return DateHelper.compareUnits(timeAxis.unit, defaultUnit) < 0 ? timeAxis.unit : defaultUnit;\n    }\n    getGroupBarTip({ datum }) {\n        const\n            me           = this,\n            { timeAxis } = me;\n        let result = '';\n        if (datum.inEventTimeSpan) {\n            const\n                unit          = me.getBarTipEffortUnit(...arguments),\n                allocated     = me.getEffortText(datum.effort, unit),\n                available     = me.getEffortText(datum.maxEffort, unit),\n                assignmentTpl = me.L('L{groupBarTipAssignment}');\n            let\n                dateFormat        = 'L',\n                resultFormat      = me.L('L{groupBarTipInRange}'),\n                assignmentsSuffix = '';\n            if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Day) === 0) {\n                resultFormat = me.L('L{groupBarTipOnDate}');\n            }\n            else if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Second) <= 0) {\n                dateFormat = 'HH:mm:ss A';\n            }\n            else if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Hour) <= 0) {\n                dateFormat = 'LT';\n            }\n            let assignmentsArray = [...datum.resourceAllocation.entries()]\n                .filter(([resource, data]) => data.effort)\n                .sort(([key1, value1], [key2, value2]) => value1.effort > value2.effort ? -1 : 1);\n            if (assignmentsArray.length > me.groupBarTipAssignmentLimit) {\n                assignmentsSuffix = '<br>' + me.L('L{plusMore}').replace('{value}', assignmentsArray.length - me.groupBarTipAssignmentLimit);\n                assignmentsArray = assignmentsArray.slice(0, this.groupBarTipAssignmentLimit);\n            }\n            const assignments = assignmentsArray.map(([resource, info]) => {\n                return assignmentTpl.replace('{resource}', StringHelper.encodeHtml(resource.name))\n                    .replace('{allocated}', me.getEffortText(info.effort, unit))\n                    .replace('{available}', me.getEffortText(info.maxEffort, unit))\n                    .replace('{cls}', info.isOverallocated ? 'b-overallocated' : info.isUnderallocated ? 'b-underallocated' : '');\n            }).join('<br>') + assignmentsSuffix;\n            result = resultFormat\n                .replace('{assignments}', assignments)\n                .replace('{startDate}', DateHelper.format(datum.tick.startDate, dateFormat))\n                .replace('{endDate}', DateHelper.format(datum.tick.endDate, dateFormat))\n                .replace('{allocated}', allocated)\n                .replace('{available}', available)\n                .replace('{cls}', datum.isOverallocated ? 'b-overallocated' : datum.isUnderallocated ? 'b-underallocated' : '');\n            result = `<div class=\"b-histogram-bar-tooltip\">${result}</div>`;\n        }\n        return result;\n    }\n    getResourceBarTip({ datum }) {\n        const\n            me           = this,\n            { timeAxis } = me;\n        let result = '';\n        if (datum.inEventTimeSpan) {\n            const\n                unit       = me.getBarTipEffortUnit(),\n                allocated  = me.getEffortText(datum.effort, unit),\n                available  = me.getEffortText(datum.maxEffort, unit);\n            let\n                dateFormat   = 'L',\n                resultFormat = me.L('L{barTipInRange}');\n            if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Day) === 0) {\n                resultFormat = me.L('L{barTipOnDate}');\n            }\n            else if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Second) <= 0) {\n                dateFormat = 'HH:mm:ss A';\n            }\n            else if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Hour) <= 0) {\n                dateFormat = 'LT';\n            }\n            result = resultFormat\n                .replace('{startDate}', DateHelper.format(datum.tick.startDate, dateFormat))\n                .replace('{endDate}', DateHelper.format(datum.tick.endDate, dateFormat))\n                .replace('{allocated}', allocated)\n                .replace('{available}', available)\n                .replace('{cls}', datum.isOverallocated ? 'b-overallocated' : datum.isUnderallocated ? 'b-underallocated' : '');\n            if (datum.resource) {\n                result = result\n                    .replace('{resource}', StringHelper.encodeHtml(datum.resource.name));\n            }\n            result = `<div class=\"b-histogram-bar-tooltip\">${result}</div>`;\n        }\n        return result;\n    }\n    /**\n     * Returns unit to display effort values in when rendering the histogram bars.\n     * The method by default returns {@link #config-barTextEffortUnit} value if provided\n     * and if not falls back to {@link #config-effortUnit} value.\n     * But it also takes zooming into account and when\n     * the timeaxis ticks unit gets smaller than the default value the ticks unit is returned.\n     *\n     * @returns {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} Time unit to display\n     * effort values in.\n     */\n    getBarTextEffortUnit() {\n        const\n            { effortUnit, barTextEffortUnit, timeAxis } = this,\n            defaultUnit                                 = barTextEffortUnit || effortUnit;\n        return DateHelper.compareUnits(timeAxis.unit, defaultUnit) < 0 ? timeAxis.unit : defaultUnit;\n    }\n    /**\n     * The default method that returns the text to render inside a bar if no\n     * {@link #config-getBarText} function was provided.\n     *\n     * The method can be used in a {@link #config-getBarText} function\n     * to invoke the default implementation:\n     *\n     * ```javascript\n     * new ResourceHistogram({\n     *     getBarText(datum) {\n     *         const resourceHistogram = this.owner;\n     *\n     *         // get default bar text\n     *         let result = resourceHistogram.getBarTextDefault();\n     *\n     *         // if the resource is overallocated in that tick display \"Overallocated! \" string\n     *         // before the allocation value\n     *         if (result && datum.maxEffort < datum.effort) {\n     *             result = 'Overallocated! ' + result;\n     *         }\n     *\n     *         return result;\n     *     },\n     * })\n     * ```\n     * The following parameters are passed:\n     * @param {ResourceAllocationInterval} datum The data of the bar being rendered\n     * @param {Number} index The index of the datum being rendered\n     * @param {String} series Identifier of the series (provided only if the histogram widget\n     * {@link Core/widget/graph/Histogram#config-singleTextForAllBars} is `false`)\n     * @param {HistogramRenderData} renderData Current render data giving access to the record, row and cell\n     * being rendered.\n     * @returns {String} Text to render inside the bar\n     */\n    getBarTextDefault(datum, index) {\n        const\n            view            = this.owner,\n            { showBarText } = view;\n        let result = '';\n        if (showBarText && datum.inEventTimeSpan) {\n            const unit = view.getBarTextEffortUnit();\n            result     = view.getEffortText(datum.effort, unit);\n        }\n        return result;\n    }\n    updateShowMaxEffort(value) {\n        const me = this;\n        me._showMaxEffort = value;\n        const widget = me._histogramWidget;\n        // bail out in case there is no widget constructed yet\n        if (!widget) {\n            return;\n        }\n        const { series } = me;\n        if (!value) {\n            if (series.maxEffort) {\n                me._seriesMaxEffort = series.maxEffort;\n                series.maxEffort = false;\n            }\n        }\n        else if (typeof value === 'object') {\n            series.maxEffort = value;\n        }\n        else if (typeof me._seriesMaxEffort === 'object') {\n            series.maxEffort = me._seriesMaxEffort;\n        }\n        else {\n            series.maxEffort = {\n                id    : 'maxEffort', \n                type  : 'outline',\n                field : 'maxEffort'\n            };\n        }\n        me.scheduleRefreshRows();\n    }\n    updateIncludeInactiveEvents(value) {\n        // update collected reports wih new includeInactiveEvents flag state\n        this.getHistogramDataCache()?.forEach(allocationReport => allocationReport.includeInactiveEvents = value);\n    }\n    //endregion\n    //region Events\n    onTimeAxisEndReconfigureInternal() {\n        const me = this;\n        // Skip call triggered by viewPreset setting we have `updateViewPreset` method overridden where we call `onTimeAxisEndReconfigure` later\n        if (!me._updatingViewPreset) {\n            const { unit, increment } = me.timeAxis;\n            // re-generate scale point on zooming in/out\n            if (unit !== me._lastTimeAxisUnit || increment !== me._lastTimeAxisIncrement) {\n                // remember last used unit & increment to distinguish zooming from timespan changes\n                me._lastTimeAxisUnit = unit;\n                me._lastTimeAxisIncrement = increment;\n                // regenerate scale points\n                const\n                    scalePoints = me.generateScalePoints(),\n                    eventParams = { scalePoints };\n                // allow to override the points in a listener\n                me.trigger('generateScalePoints', eventParams);\n                me._generatedScalePoints = me.scalePoints = eventParams.scalePoints;\n            }\n            me.buildTicksIdentifier();\n        }\n    }\n    calculateRowHeights() {}\n    onTimeAxisEndReconfigure() {\n        const me = this;\n        // Skip call triggered by viewPreset setting we have `updateViewPreset` method overridden where we call `onTimeAxisEndReconfigure` later\n        if (!me._updatingViewPreset) {\n            if (me.project.graph) {\n                me.onTimeAxisEndReconfigureInternal();\n            }\n            // In delayed calculation mode (the default) we might not be in graph yet, postpone buildTicksIdentifier until we are\n            else {\n                me.project.ion({\n                    graphReady() {\n                        me.onTimeAxisEndReconfigureInternal();\n                    },\n                    thisObj : me,\n                    once    : true\n                });\n            }\n        }\n    }\n    //endregion\n    //region Render\n    extractHistogramDataArray(allocationReport, record) {\n        return allocationReport.allocation.total;\n    }\n    renderRows() {\n        const me = this;\n        if (!me.ticksIdentifier && me.project.isInitialCommitPerformed) {\n            // If we render rows but have no ticksIdentifier means data loading and 1st commit\n            // happened before the histogram was created.\n            // Handle timeaxis settings to build ticksIdentifier and scale column points.\n            me.onTimeAxisEndReconfigure();\n            // If timeView range is not defined then the timeaxis header looks empty so fill it in here (it triggers the column refresh)\n            if (!me.timeView.startDate || !me.timeView.endDate) {\n                me.timeView.range = {\n                    startDate : me.startDate,\n                    endDate   : me.endDate\n                };\n            }\n        }\n        return super.renderRows(...arguments);\n    }\n    async shiftPrevious() {\n        super.shiftPrevious(...arguments);\n        await this.project.commitAsync();\n    }\n    async shiftNext() {\n        super.shiftNext(...arguments);\n        await this.project.commitAsync();\n    }\n    onCommitAsyncCompletion() {\n        // trigger rendering after the Engine finishes a transaction\n        this.renderScheduledRecords();\n        this._renderOnCommitPromise = null;\n    }\n    onRecordAllocationCalculated(allocation) {\n        if (!this.isDestroying) {\n            // update cache to trigger histogramDataCacheSet event\n            this.setHistogramDataCache(allocation.resource, allocation.owner);\n        }\n    }\n    buildResourceAllocationReport(resource) {\n        return this.project.resourceAllocationInfoClass.new({\n            includeInactiveEvents : this.includeInactiveEvents,\n            ticks                 : this.ticksIdentifier,\n            resource\n        });\n    }\n    /**\n     * Returns the provided record's allocation data.\n     * The process of allocation collecting is asynchronous so the method returns a `Promise`\n     * that provides the data once resolved.\n     *\n     * The method used as the default value of {@link #config-getRecordData} config.\n     * @param {SchedulerPro.model.ResourceModel} record Resource record to collect allocation for.\n     * @returns {Promise} A `Promise` that provides the provided resource\n     * {@link SchedulerPro/model/ResourceModel#typedef-ResourceAllocationInfo allocation info} when resolved.\n     */\n    async getRecordAllocationData(record) {\n        const\n            me = this,\n            { project } = me;\n        // No drawing before engine's initial commit\n        while (!me.ticksIdentifier || !project.isInitialCommitPerformed) {\n            await project.await('commitFinalized');\n        }\n        // Ignore resources not in the graph\n        if (record.graph) {\n            const\n                graph            = project.getGraph(),\n                allocationReport = me.buildResourceAllocationReport(record);\n            record.addEntity(allocationReport);\n            await graph.readAsync(allocationReport.$.allocation);\n            // after this transaction finishes we will\n            // track further allocation report changes with onRecordAllocationCalculated method\n            graph.ongoing.then(() => {\n                graph.addListener(allocationReport.$.allocation, me.onRecordAllocationCalculated);\n            });\n            return allocationReport;\n        }\n    }\n    onHistogramDataCacheSet() {\n        super.onHistogramDataCacheSet(...arguments);\n        const me = this;\n        // trigger rendering right after the Engine finishes its current commitAsync() call\n        if (!me._renderOnCommitPromise) {\n            me._renderOnCommitPromise = me.project.graph.ongoing.then(me.onCommitAsyncCompletion);\n        }\n    }\n    aggregateRecordsHistogramData(records, aggregationContext) {\n        const result = super.aggregateRecordsHistogramData(records, aggregationContext);\n        if (Objects.isPromise(result)) {\n            return result.then(buildReturnedValue);\n        }\n        return buildReturnedValue(result);\n    }\n    /**\n     * The default function that initializes a target group record entry.\n     *\n     * The method is used as {@link #config-initAggregatedDataEntry} default value.\n     * @returns {ResourceAllocationInterval} Returns an empty allocation entry.\n     * @category Parent histogram data collecting\n     */\n    initAggregatedAllocationEntry() {\n        return {\n            tick               : null,\n            effort             : 0,\n            maxEffort          : 0,\n            units              : 0,\n            isGroup            : true,\n            inEventTimeSpan    : false,\n            resourceAllocation : new Map()\n        };\n    }\n    /**\n     * The default function used for aggregating a child record histogram data values to its parent entry.\n     * The function sums up `effort` and `maxEffort` series values. It also propagates\n     * {@link SchedulerPro/model/ResourceModel#typedef-ResourceAllocationInterval isOverallocated} and\n     * {@link SchedulerPro/model/ResourceModel#typedef-ResourceAllocationInterval isUnderallocated} values so if there\n     * is a child having the corresponding value as `true` it will be `true` on the parent level as well.\n     *\n     * All children {@link SchedulerPro/model/ResourceModel#typedef-ResourceAllocationInterval assignments} are united\n     * on the parent level {@link SchedulerPro/model/ResourceModel#typedef-ResourceAllocationInterval assignments}\n     * property.\n     *\n     * The method is used as {@link #config-aggregateDataEntry} default value.\n     *\n     * @param {ResourceAllocationInterval} aggregated Target parent data entry to aggregate the entry into.\n     * @param {ResourceAllocationInterval} entry Current entry to aggregate into `aggregated`.\n     * @param {Number} arrayIndex Index of the current record (among other\n     * records being aggregated).\n     * @param {Number} colIndex `entry` index in the current array\n     * @returns {ResourceAllocationInterval} Resulting parent data entry.\n     * @category Parent histogram data collecting\n     */\n    aggregateAllocationEntry(acc, entry, _recordIndex, _entryIndex, aggregationContext) {\n        acc.resourceAllocation.set(entry.resource, entry);\n        acc.tick             = entry.tick;\n        acc.isOverallocated  = acc.isOverallocated || entry.isOverallocated;\n        acc.isUnderallocated = acc.isUnderallocated || entry.isUnderallocated;\n        acc.inEventTimeSpan  = acc.inEventTimeSpan || entry.inEventTimeSpan;\n        if (entry.assignments) {\n            if (acc.assignments) {\n                entry.assignments.forEach(assignment => acc.assignments.add(assignment));\n            }\n            else {\n                acc.assignments = new Set(entry.assignments);\n            }\n        }\n        return acc;\n    }\n    generateGroupScalePoints(record) {\n        const\n            me          = this,\n            children    = me.getGroupChildren(record),\n            scalePoints = me.generateScalePoints(me.timeAxis.increment * children.length),\n            eventParams = { scalePoints, groupParent : record };\n        me.trigger('generateScalePoints', eventParams);\n        return eventParams.scalePoints;\n    }\n    processRecordRenderData(renderData) {\n        // Override histogram topValue and scalePoints for group records\n        if (this.isGroupRecord(renderData.record)) {\n            const\n                scalePoints = this.generateGroupScalePoints(renderData.record),\n                topValue    = this.getTopValueByScalePoints(scalePoints);\n            renderData.scaleWidgetConfig = { scalePoints };\n            renderData.histogramConfig = { ...renderData.histogramConfig, topValue };\n        }\n        else {\n            renderData = super.processRecordRenderData(renderData);\n        }\n        return renderData;\n    }\n    //endregion\n    //region Localization\n    updateLocalization() {\n        const me = this;\n        // Translate scale points if we have them (update localization on construction step is called too early)\n        // and the scale points is generated by the histogram which means their labels use localized unit abbreviations\n        if (me._generatedScalePoints === me.scalePoints && me.scalePoints) {\n            me.scalePoints.forEach(scalePoint => {\n                // if the point is labeled let's rebuild its text using new locale\n                if (scalePoint.text && scalePoint.unit) {\n                    scalePoint.text = me.buildScalePointText(scalePoint);\n                }\n            });\n        }\n        super.updateLocalization(...arguments);\n    }\n    //endregion\n}\nResourceHistogram.initClass();\nResourceHistogram._$name = 'ResourceHistogram';", "import StringHelper from '../../Core/helper/StringHelper.js';\nimport ResourceHistogram from './ResourceHistogram.js';\nimport ResourceUtilizationStore from '../data/ResourceUtilizationStore.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport { TimeUnit } from '../../Engine/scheduling/Types.js';\nimport '../../Grid/column/TreeColumn.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport Tree from '../../Grid/feature/Tree.js';\n/**\n * @module SchedulerPro/view/ResourceUtilization\n */\n/**\n * View showing the utilization levels of the project resources.\n * The resources are displayed in a summary list where each row can\n * be expanded to show the events assigned for the resource.\n *\n * This demo shows the Resource utilization widget:\n * {@inlineexample SchedulerPro/view/ResourceUtilization.js}\n *\n * The view requires a {@link #config-project Project instance} to be provided:\n *\n * ```javascript\n * const project = new ProjectModel({\n *     autoLoad  : true,\n *     transport : {\n *         load : {\n *             url : 'examples/schedulerpro/view/data.json'\n *         }\n *     }\n * });\n *\n * const resourceUtilization = new ResourceUtilization({\n *     project,\n *     appendTo    : 'targetDiv',\n *     rowHeight   : 60,\n *     minHeight   : '20em',\n *     flex        : '1 1 50%',\n *     showBarTip  : true\n * });\n * ```\n *\n * ## Pairing the component\n *\n * You can also pair the view with other timeline views such as the Gantt or Scheduler,\n * using the {@link #config-partner} config.\n *\n  * ## Changing displayed values\n *\n * To change the displayed bar texts, supply a {@link #config-getBarText} function.\n * Here for example the provided function displays resources time **left** instead of\n * allocated time\n *\n * ```javascript\n * new ResourceUtilization({\n *     getBarText(datum) {\n *         const view = this.owner;\n *\n *         // get default bar text\n *         let result = view.getBarTextDefault(...arguments);\n *\n *         // For resource records we will display the time left for allocation\n *         if (result && datum.resource) {\n *\n *             const unit = view.getBarTextEffortUnit();\n *\n *             // display the resource available time\n *             result = view.getEffortText(datum.maxEffort - datum.effort, unit);\n *         }\n *\n *         return result;\n *     },\n * })\n * ```\n *\n * @extends SchedulerPro/view/ResourceHistogram\n * @classtype resourceutilization\n * @widget\n */\nexport default class ResourceUtilization extends ResourceHistogram {\n    //region Config\n    static $name = 'ResourceUtilization';\n    static type = 'resourceutilization';\n    static configurable = {\n        /**\n         * @hideconfigs crudManager, crudManagerClass, assignments, resources, events, dependencies, assignmentStore,\n         * resourceStore, eventStore, dependencyStore, data, timeZone\n         */\n        scaleColumn : null,\n        /**\n         * A Function which returns the text to render inside a bar.\n         *\n         * Here for example the provided function displays resources time **left** instead of\n         * allocated time\n         *\n         * ```javascript\n         * new ResourceUtilization({\n         *     getBarText(datum) {\n         *         const resourceUtilization = this.owner;\n         *\n         *         // get default bar text\n         *         let result = view.getBarTextDefault();\n         *\n         *         // For resource records we will display the time left for allocation\n         *         if (result && datum.resource) {\n         *\n         *             const unit = resourceUtilization.getBarTextEffortUnit();\n         *\n         *             // display the resource available time\n         *             result = resourceUtilization.getEffortText(datum.maxEffort - datum.effort, unit);\n         *         }\n         *\n         *         return result;\n         *     },\n         * })\n         * ```\n         *\n         * **Please note** that the function will be injected into the underlying\n         * {@link Core/widget/graph/Histogram} component that is used under the hood\n         * to render actual charts.\n         * So `this` in the function will refer to the {@link Core/widget/graph/Histogram} instance.\n         * To access the `ResourceUtilization` instance please use `this.owner` in the function body:\n         *\n         * ```javascript\n         * new ResourceUtilization({\n         *     getBarText(datum) {\n         *         // \"this\" in the method refers core Histogram instance\n         *         // get the view instance\n         *         const view = this.owner;\n         *\n         *         .....\n         *     },\n         * })\n         * ```\n         * The following parameters are passed:\n         * @param {ResourceAllocationInterval|AssignmentAllocationInterval} datum The datum being rendered.\n         * Either {@link SchedulerPro.model.ResourceModel#typedef-ResourceAllocationInterval} object for resource records (root level records)\n         * or {@link SchedulerPro.model.ResourceModel#typedef-AssignmentAllocationInterval} object for assignment records\n         * @param {Number} index The index of the datum being rendered\n         * @returns {String} Text to render inside the bar\n         * @config {Function} getBarText\n         */\n        /* */\n        timeAxisColumnCellCls : 'b-sch-timeaxis-cell b-resourceutilization-cell',\n        /**\n         * A ProjectModel instance (or a config object) to display resource allocation of.\n         *\n         * Note: This config is mandatory.\n         * @config {ProjectModelConfig|SchedulerPro.model.ProjectModel} project\n         */\n        rowHeight : 30,\n        showEffortUnit : false,\n        /**\n         * @config {Boolean} showMaxEffort\n         * @hide\n         */\n        showMaxEffort : false,\n        /**\n         * Set to `true` if you want to display resources effort values in bars\n         * (for example: `24h`, `7d`, `60min` etc.).\n         * The text contents can be changed by providing {@link #config-getBarText} function.\n         * @config {Boolean}\n         * @default\n         */\n        showBarText : true,\n        /**\n         * A Function which returns the tooltip text to display when hovering a bar.\n         * The following parameters are passed:\n         * @param {Object} data The backing data of the histogram rectangle\n         * @param {Object} data.rectConfig The rectangle configuration object\n         * @param {Object} data.datum The hovered bar data\n         * @param {Number} data.index The index of the hovered bar data\n         * @param {SchedulerPro.model.ResourceUtilizationModel} data.record The record which effort\n         * the hovered bar displays.\n         * @returns {String} Tooltip HTML content\n         * @config {Function}\n         */\n        barTooltipTemplate({ datum }) {\n            let result = '';\n            const { inEventTimeSpan, isGroup, resource, assignment } = datum;\n            // const barTip = this.callback('getBarTextTip', me, [renderData, data[index], index]);\n            if (inEventTimeSpan) {\n                if (isGroup) {\n                    result = this.getGroupBarTip(...arguments);\n                }\n                else if (assignment) {\n                    result = this.getAssignmentBarTip(...arguments);\n                }\n                else if (resource) {\n                    result = this.getResourceBarTip(...arguments);\n                }\n            }\n            return result;\n        },\n        series : {\n            effort : {\n                // We don't want the histogram bar heights based on effort\n                // so set \"stretch\" here to make bars to take the whole row height\n                stretch : true\n            }\n        },\n        readOnly : true,\n        columns : [\n            {\n                type        : 'tree',\n                field       : 'name',\n                text        : 'L{nameColumnText}',\n                localeClass : this\n            }\n        ],\n        histogramWidget : {\n            cls : 'b-hide-offscreen b-resourceutilization-histogram'\n        }\n    };\n    //endregion\n    /**\n     * @event generateScalePoints\n     * @hide\n     */\n    /**\n     * @function generateScalePoints\n     * @hide\n     */\n    /**\n     * @member {Scheduler.column.ScaleColumn} scaleColumn\n     * @hide\n     */\n    construct() {\n        super.construct(...arguments);\n        this.rowManager.ion({\n            renderRow : 'onRowManagerRenderRow',\n            thisObj   : this\n        });\n    }\n    updateProject(project) {\n        const store = this.store;\n        super.updateProject(project);\n        // Super call sets this.store to resource store\n        // 1) revert if a store was provided explicitly\n        // 2) otherwise generating ResourceUtilizationStore\n        this.store = store || this.buildStore(project);\n    }\n    updateResourceStore(resourceStore) {\n        this._resourceStore = resourceStore;\n    }\n    buildStore(project) {\n        project = this.project;\n        return ResourceUtilizationStore.new({ project });\n    }\n    //region Render\n    async getTipHtml(tooltipContext) {\n        const\n            index          = tooltipContext.activeTarget.dataset.index,\n            record         = this.getRecordFromElement(tooltipContext.activeTarget),\n            allocationData = await this.getRecordHistogramData(record),\n            datum          = this.extractHistogramDataArray(allocationData, record)[parseInt(index, 10)];\n        return this.barTooltipTemplate({ ...tooltipContext, record, index, datum });\n    }\n    getRecordAllocationData(record, ...args) {\n        record = this.resolveRecordToOrigin(record);\n        if (record.isResourceModel) {\n            return super.getRecordAllocationData(record, ...args);\n        }\n        else if (record.isAssignmentModel) {\n            // if that's an assignment re-invoke this.getRecordHistogramData() for resource\n            return this.getRecordHistogramData(record.resource, ...args);\n        }\n    }\n    onDestroy() {\n        if (this.destroyStores) {\n            this.store?.destroy();\n        }\n        super.onDestroy();\n    }\n    onRecordAllocationCalculated(allocation) {\n        const me = this;\n        if (!me.isDestroying) {\n            const\n                allocationReport  = allocation.owner,\n                assignmentRecords = [...allocation.byAssignments.keys()]\n                    .reduce((acc, assignment) => {\n                        const record = me.resolveOriginToRecord(assignment);\n                        if (record) {\n                            acc.push(record);\n                        }\n                        return acc;\n                    }, []),\n                resourceRecord = me.resolveOriginToRecord(allocation.resource);\n            if (resourceRecord) {\n                me.setHistogramDataCache(resourceRecord, allocationReport);\n            }\n            for (const assignmentRecord of assignmentRecords) {\n                me.setHistogramDataCache(assignmentRecord, allocationReport);\n            }\n            // trigger rendering right after the Engine finishes its current commitAsync() call\n            if (!me._renderOnCommitPromise) {\n                me._renderOnCommitPromise = me.project.graph.ongoing.then(me.onCommitAsyncCompletion.bind(me));\n            }\n        }\n    }\n    onRowManagerRenderRow({ row, record }) {\n        const isGroup = this.isGroupRecord(record);\n        record = this.resolveRecordToOrigin(record);\n        // indicate row kinds\n        row.assignCls({\n            'b-resource-row'   : record.isResourceModel || isGroup,\n            'b-assignment-row' : !isGroup && record.isAssignmentModel\n        });\n    }\n    /**\n     * The view store records wrap \"real\" resources and assignments.\n     * This method resolves a record to its original record resource or assignment.\n     * If the record does not wrap any record (happens for example for parent records when\n     * using {@link Grid/feature/TreeGroup} feature) then the method returns the record itself.\n     * @param {SchedulerPro.model.ResourceUtilizationModel} record The view store record\n     * @returns {SchedulerPro.model.ResourceModel|SchedulerPro.model.AssignmentModel|SchedulerPro.model.ResourceUtilizationModel} Original model\n     */\n    resolveRecordToOrigin(record) {\n        return record.origin || record.$original || record;\n    }\n    resolveOriginToRecord(origin) {\n        let record = origin;\n        if (this.store.isResourceUtilizationStore) {\n            record = this.store.getModelByOrigin(origin) || record;\n        }\n        else if (origin.hasLinks) {\n            for (const link of origin.$links) {\n                if (this.store.includes(link)) {\n                    return link;\n                }\n            }\n        }\n        return record;\n    }\n    getHistogramDataCache(record) {\n        if (record) {\n            record = this.resolveRecordToOrigin(record);\n        }\n        return super.getHistogramDataCache(record);\n    }\n    setHistogramDataCache(record, data) {\n        record = this.resolveRecordToOrigin(record);\n        return super.setHistogramDataCache(record, data);\n    }\n    scheduleRecordRefresh(record) {\n        record = this.resolveOriginToRecord(record);\n        return super.scheduleRecordRefresh(record);\n    }\n    scheduleRecordParentsRefresh(record) {\n        record = this.resolveOriginToRecord(record);\n        return super.scheduleRecordParentsRefresh(record);\n    }\n    getCell(data) {\n        // if real resource or assignment is provided\n        if (data.record?.isResourceModel || data.record?.isAssignmentModel) {\n            // use its wrapper record to find proper cell\n            data.record = this.resolveOriginToRecord(data.record);\n        }\n        return super.getCell(data);\n    }\n    changeHistogramWidget(widget) {\n        if (widget && !widget.isHistogram) {\n            if (!this.getBarTextRenderData && !widget?.getBarTextRenderData) {\n                widget.getBarTextRenderData = this.getBarTextRenderDataDefault;\n            }\n            widget.height = this.rowHeight;\n        }\n        return super.changeHistogramWidget(widget);\n    }\n    getBarTextRenderDataDefault(renderData, datum, index) {\n        // place effort text centered vertically\n        renderData.y = '50%';\n        return renderData;\n    }\n    extractHistogramDataArray(allocationReport, record) {\n        let data;\n        const origin = this.resolveRecordToOrigin(record);\n        if (this.isGroupRecord(record)) {\n            data = allocationReport.allocation.total;\n        }\n        else if (origin.isResourceModel) {\n            data = allocationReport.allocation.total;\n        }\n        else if (origin.isAssignmentModel) {\n            // Not having an assignment in the report could mean\n            // we've just added the assignment and it's not yet processed by the Engine.\n            // So in this case we just do and empty row rendering\n            data = allocationReport.allocation.byAssignments.get(origin) || [];\n        }\n        return data;\n    }\n    initAggregatedAllocationEntry(_entryIndex, aggregationContext) {\n        // keep list of resources met when aggregating children\n        if (!aggregationContext.targetArray.$resources) {\n            aggregationContext.targetArray.$resources = new Set();\n        }\n        return {\n            tick            : null,\n            effort          : 0,\n            maxEffort       : 0,\n            units           : 0,\n            isGroup         : true,\n            inEventTimeSpan : false,\n            members         : new Map(),\n            resources       : new Set()\n        };\n    }\n    aggregateAllocationEntry(acc, entry, recordIndex, entryIndex, aggregationContext) {\n        const\n            { targetArray } = aggregationContext,\n            recordArray = aggregationContext.arrays[recordIndex];\n        acc.tick             = entry.tick;\n        acc.isOverallocated  = acc.isOverallocated  || entry.isOverallocated;\n        acc.isUnderallocated = acc.isUnderallocated || entry.isUnderallocated;\n        acc.inEventTimeSpan  = acc.inEventTimeSpan || entry.inEventTimeSpan;\n        // For a group entry we add members property that includes child records regardless of their types\n        if (entry.members) {\n            acc.members = new Map([...acc.members, ...entry.members]);\n        }\n        else {\n            acc.members.set(entry.resource || entry.assignment, entry);\n        }\n        // If that's a group entry that already met resources\n        if (recordArray.$resources) {\n            // inherit the resources\n            targetArray.$resources = new Set([...targetArray.$resources, ...recordArray.$resources]);\n        }\n        // If that's a resource or assignment row entry\n        else if (entry.assignment || entry.resource) {\n            const resource = entry.resource || entry.assignment.resource;\n            // remember we met the resource (we need this to correctly calculate maxEffort on upper levels)\n            targetArray.$resources.add(resource);\n            const resourceEntry = this.getHistogramDataCache(resource).allocation.total[entryIndex];\n            acc.isOverallocated  = acc.isOverallocated || resourceEntry.isOverallocated;\n            acc.isUnderallocated  = acc.isUnderallocated || resourceEntry.isUnderallocated;\n        }\n        return acc;\n    }\n    aggregateHistogramData() {\n        const result = super.aggregateHistogramData(...arguments);\n        // post process aggregated row data to find proper maxEffort\n        for (let i = 0, l = result.length; i < l; i++) {\n            const entry = result[i];\n            entry.maxEffort = 0;\n            for (const resource of result.$resources) {\n                const resourceEntry = this.getHistogramDataCache(resource).allocation.total[i];\n                // get nested resources maxEffort sum\n                entry.maxEffort += resourceEntry.maxEffort;\n            }\n        }\n        return result;\n    }\n    //endregion\n    getResourceBarTip({ datum }) {\n        const\n            me                       = this,\n            { showBarTip, timeAxis } = me;\n        let result = '';\n        if (showBarTip && datum.inEventTimeSpan) {\n            const\n                unit          = me.getBarTipEffortUnit(...arguments),\n                allocated     = me.getEffortText(datum.effort, unit, true),\n                available     = me.getEffortText(datum.maxEffort, unit, true),\n                assignmentTpl = me.L('L{groupBarTipAssignment}');\n            let\n                dateFormat        = 'L',\n                resultFormat      = me.L('L{groupBarTipInRange}'),\n                assignmentsSuffix = '';\n            if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Day) === 0) {\n                resultFormat = me.L('L{groupBarTipOnDate}');\n            }\n            else if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Second) <= 0) {\n                dateFormat = 'HH:mm:ss A';\n            }\n            else if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Hour) <= 0) {\n                dateFormat = 'LT';\n            }\n            let assignmentsArray = [...datum.assignmentIntervals.entries()]\n                .filter(([assignment, data]) => data.effort)\n                .sort(([key1, value1], [key2, value2]) => value1.effort > value2.effort ? -1 : 1);\n            if (assignmentsArray.length > me.groupBarTipAssignmentLimit) {\n                assignmentsSuffix = '<br>' + me.L('L{plusMore}').replace('{value}', assignmentsArray.length - me.groupBarTipAssignmentLimit);\n                assignmentsArray = assignmentsArray.slice(0, this.groupBarTipAssignmentLimit);\n            }\n            const assignments = assignmentsArray.map(([assignment, info]) => {\n                return assignmentTpl.replace('{event}', StringHelper.encodeHtml(assignment.event.name))\n                    .replace('{allocated}', me.getEffortText(info.effort, unit, true))\n                    .replace('{available}', me.getEffortText(info.maxEffort, unit, true))\n                    .replace('{cls}', info.isOverallocated ? 'b-overallocated' : info.isUnderallocated ? 'b-underallocated' : '');\n            }).join('<br>') + assignmentsSuffix;\n            result = resultFormat\n                .replace('{assignments}', assignments)\n                .replace('{startDate}', DateHelper.format(datum.tick.startDate, dateFormat))\n                .replace('{endDate}', DateHelper.format(datum.tick.endDate, dateFormat))\n                .replace('{allocated}', allocated)\n                .replace('{available}', available)\n                .replace('{cls}', datum.isOverallocated ? 'b-overallocated' : datum.isUnderallocated ? 'b-underallocated' : '');\n            result = `<div class=\"b-histogram-bar-tooltip\">${result}</div>`;\n        }\n        return result;\n    }\n    getGroupBarTip({ datum }) {\n        const\n            me                       = this,\n            { showBarTip, timeAxis } = me;\n        let result = '';\n        if (showBarTip && datum.inEventTimeSpan) {\n            const\n                unit          = me.getBarTipEffortUnit(...arguments),\n                allocated     = me.getEffortText(datum.effort, unit),\n                available     = me.getEffortText(datum.maxEffort, unit),\n                assignmentTpl = me.L('L{groupBarTipAssignment}');\n            let\n                dateFormat        = 'L',\n                resultFormat      = me.L('L{groupBarTipInRange}'),\n                assignmentsSuffix = '';\n            if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Day) === 0) {\n                resultFormat = me.L('L{groupBarTipOnDate}');\n            }\n            else if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Second) <= 0) {\n                dateFormat = 'HH:mm:ss A';\n            }\n            else if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Hour) <= 0) {\n                dateFormat = 'LT';\n            }\n            let memberArray = [...datum.members.entries()]\n                .filter(([member, data]) => data.effort)\n                .sort(([key1, value1], [key2, value2]) => value1.effort > value2.effort ? -1 : 1);\n            if (memberArray.length > me.groupBarTipAssignmentLimit) {\n                assignmentsSuffix = '<br>' + me.L('L{plusMore}').replace('{value}', memberArray.length - me.groupBarTipAssignmentLimit);\n                memberArray = memberArray.slice(0, this.groupBarTipAssignmentLimit);\n            }\n            const members = memberArray.map(([member, info]) => {\n                return assignmentTpl\n                    .replace('{resource}', StringHelper.encodeHtml(member.resource?.name || member.name))\n                    .replace('{event}', StringHelper.encodeHtml(member.event?.name || member.name))\n                    .replace('{allocated}', me.getEffortText(info.effort, unit))\n                    .replace('{available}', me.getEffortText(info.maxEffort, unit))\n                    .replace('{cls}', info.isOverallocated ? 'b-overallocated' : info.isUnderallocated ? 'b-underallocated' : '');\n            }).join('<br>') + assignmentsSuffix;\n            result = resultFormat\n                .replace('{assignments}', members)\n                .replace('{startDate}', DateHelper.format(datum.tick.startDate, dateFormat))\n                .replace('{endDate}', DateHelper.format(datum.tick.endDate, dateFormat))\n                .replace('{allocated}', allocated)\n                .replace('{available}', available)\n                .replace('{cls}', datum.isOverallocated ? 'b-overallocated' : datum.isUnderallocated ? 'b-underallocated' : '');\n            result = `<div class=\"b-histogram-bar-tooltip\">${result}</div>`;\n        }\n        return result;\n    }\n    getAssignmentBarTip({ datum }) {\n        const\n            me                       = this,\n            { showBarTip, timeAxis } = me;\n        let result = '';\n        if (showBarTip && datum.inEventTimeSpan) {\n            const\n                unit      = me.getBarTipEffortUnit(...arguments),\n                allocated = me.getEffortText(datum.effort, unit, true),\n                available = me.getEffortText(datum.maxEffort, unit, true);\n            let\n                dateFormat   = 'L',\n                resultFormat = me.L('L{barTipInRange}');\n            if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Day) === 0) {\n                resultFormat = me.L('L{barTipOnDate}');\n            }\n            else if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Second) <= 0) {\n                dateFormat = 'HH:mm:ss A';\n            }\n            else if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Hour) <= 0) {\n                dateFormat = 'LT';\n            }\n            result = resultFormat\n                .replace('{startDate}', DateHelper.format(datum.tick.startDate, dateFormat))\n                .replace('{endDate}', DateHelper.format(datum.tick.endDate, dateFormat))\n                .replace('{allocated}', allocated)\n                .replace('{available}', available)\n                .replace('{cls}', datum.cls || '');\n            if (datum.assignment) {\n                result = result.replace('{event}', StringHelper.encodeHtml(datum.assignment.event.name));\n            }\n            result = `<div class=\"b-histogram-bar-tooltip\">${result}</div>`;\n        }\n        return result;\n    }\n}\nResourceUtilization.initClass();\n// enable tree feature for the utilization panel by default\nResourceUtilization._$name = 'ResourceUtilization'; GridFeatureManager.registerFeature(Tree, true, 'ResourceUtilization');\n", "import HorizontalRendering from '../../../Scheduler/view/orientation/HorizontalRendering.js';\n/**\n * @module SchedulerPro/view/orientation/ProHorizontalRendering\n */\n/**\n * Handles event rendering in Scheduler Pro horizontal mode. Populates render data with buffer duration.\n *\n * @internal\n */\nexport default class ProHorizontalRendering extends HorizontalRendering {\n    static $name = 'ProHorizontalRendering';\n    /**\n     * Populates render data with buffer data rendering.\n     * @param {HorizontalRenderData} renderData\n     * @returns {Boolean}\n     * @private\n     */\n    fillInnerSpanHorizontalPosition(renderData) {\n        const\n            me              = this,\n            { eventRecord } = renderData,\n            {\n                startMS    : innerStartMS,\n                endMS      : innerEndMS,\n                durationMS : innerDurationMS\n            }               = me.calculateMS(eventRecord, 'startDate', 'endDate'),\n            position        = me.calculateHorizontalPosition(renderData, innerStartMS, innerEndMS, innerDurationMS);\n        if (position) {\n            const { left, width } = position;\n            Object.assign(renderData, {\n                innerStartMS,\n                innerEndMS,\n                innerDurationMS,\n                bufferBeforeWidth : Math.max(left - renderData.left, 0),\n                // This could yield a really small number due to floating point accuracy, we can round the result\n                bufferAfterWidth  : Math.max(Math.floor(renderData.left + renderData.width - left - width), 0)\n            });\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    getTimeSpanRenderData(timeSpan, rowRecord, includeOutside = false) {\n        const data = super.getTimeSpanRenderData(timeSpan, rowRecord, includeOutside);\n        if (data?.useEventBuffer) {\n            if (!this.fillInnerSpanHorizontalPosition(data)) {\n                return null;\n            }\n        }\n        return data;\n    }\n}\nProHorizontalRendering._$name = 'ProHorizontalRendering';", "import VerticalRendering from '../../../Scheduler/view/orientation/VerticalRendering.js';\n/**\n * @module SchedulerPro/view/orientation/ProVerticalRendering\n */\n/**\n * Handles event rendering in Scheduler Pro horizontal mode. Populates render data with buffer duration.\n *\n * @internal\n */\nexport default class ProVerticalRendering extends VerticalRendering {\n    static $name = 'ProVerticalRendering';\n    /**\n     * Populates render data with buffer data rendering.\n     * @param {HorizontalRenderData} renderData\n     * @returns {Boolean}\n     * @private\n     */\n    fillInnerSpanVerticalPosition(renderData) {\n        const\n            me                  = this,\n            { scheduler }       = me,\n            { eventRecord }     = renderData,\n            { isBatchUpdating } = eventRecord,\n            startDate           = isBatchUpdating ? eventRecord.get('startDate') : eventRecord.startDate,\n            endDate             = isBatchUpdating ? eventRecord.get('endDate') : eventRecord.endDate,\n            top                 = scheduler.getCoordinateFromDate(startDate),\n            innerStartMS        = startDate.getTime(),\n            innerEndMS          = endDate.getTime(),\n            innerDurationMS     = innerEndMS - innerStartMS;\n        let bottom = scheduler.getCoordinateFromDate(endDate),\n            height = bottom - top;\n        // Below, estimate height\n        if (bottom === -1) {\n            height = Math.round(innerDurationMS * scheduler.timeAxisViewModel.getSingleUnitInPixels('millisecond'));\n            bottom = top + height;\n        }\n        Object.assign(renderData, {\n            innerStartMS,\n            innerEndMS,\n            innerDurationMS,\n            bufferBeforeWidth : top - renderData.top,\n            bufferAfterWidth  : renderData.top + renderData.height - top - height\n        });\n        return true;\n    }\n    getTimeSpanRenderData(timeSpan, rowRecord, includeOutside = false) {\n        const data = super.getTimeSpanRenderData(timeSpan, rowRecord, includeOutside);\n        if (data?.useEventBuffer) {\n            if (!this.fillInnerSpanVerticalPosition(data)) {\n                return null;\n            }\n        }\n        return data;\n    }\n}\nProVerticalRendering._$name = 'ProVerticalRendering';", "import '../localization/En.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport VersionHelper from '../../Core/helper/VersionHelper.js';\nimport SchedulingIssueResolution from './mixin/SchedulingIssueResolution.js';\nimport ProjectProgressMixin from './mixin/ProjectProgressMixin.js';\nimport SchedulerBase from '../../Scheduler/view/SchedulerBase.js';\nimport ProjectModel from '../model/ProjectModel.js';\nimport SchedulerProEventRendering from './mixin/SchedulerProEventRendering.js';\nimport ProHorizontalRendering from './orientation/ProHorizontalRendering.js';\nimport ProVerticalRendering from './orientation/ProVerticalRendering.js';\n/**\n * @module SchedulerPro/view/SchedulerProBase\n */\n/**\n * A thin base class for {@link SchedulerPro/view/SchedulerPro}. Includes fewer features by default, allowing smaller\n * custom-built bundles if used in place of {@link SchedulerPro/view/SchedulerPro}.\n *\n * **NOTE:** In most scenarios you should use SchedulerPro instead of SchedulerProBase.\n *\n * @features SchedulerPro/feature/CalendarHighlight\n * @features SchedulerPro/feature/CellEdit\n * @features SchedulerPro/feature/Dependencies\n * @features SchedulerPro/feature/DependencyEdit\n * @features SchedulerPro/feature/EventBuffer\n * @features SchedulerPro/feature/EventResize\n * @features SchedulerPro/feature/EventSegmentDrag\n * @features SchedulerPro/feature/EventSegmentResize\n * @features SchedulerPro/feature/EventSegments\n * @features SchedulerPro/feature/NestedEvents\n * @features SchedulerPro/feature/PercentBar\n * @features SchedulerPro/feature/ResourceNonWorkingTime\n * @features SchedulerPro/feature/TaskEdit\n * @features SchedulerPro/feature/TimeSpanHighlight\n * @features SchedulerPro/feature/Versions\n *\n * @extends Scheduler/view/SchedulerBase\n * @mixes SchedulerPro/view/mixin/ProjectProgressMixin\n * @mixes SchedulerPro/view/mixin/SchedulerProEventRendering\n * @mixes SchedulerPro/view/mixin/SchedulingIssueResolution\n * @widget\n */\nexport default class SchedulerProBase extends SchedulerBase.mixin(\n    ProjectProgressMixin,\n    SchedulerProEventRendering,\n    SchedulingIssueResolution\n) {\n    //region Config\n    static $name = 'SchedulerProBase';\n    static type = 'schedulerprobase';\n    static configurable =  {\n        projectModelClass : ProjectModel,\n        /**\n         * A task field (id, wbsCode, sequenceNumber etc) that will be used when displaying and editing linked tasks.\n         * @config {String} dependencyIdField\n         * @default 'id'\n         */\n        dependencyIdField : 'id',\n        /**\n         * If set to `true` this will show a color field in the {@link SchedulerPro.feature.TaskEdit} editor and also a\n         * picker in the {@link Scheduler.feature.EventMenu}. Both enables the user to choose a color which will be\n         * applied to the event bar's background. See EventModel's\n         * {@link Scheduler.model.mixin.EventModelMixin#field-eventColor} config.\n         * config.\n         * @config {Boolean}\n         * @category Misc\n         */\n        showTaskColorPickers : false\n    };\n    static isSchedulerPro = true;\n    //endregion\n    //region Store & model docs\n    // Configs\n    /**\n     * A {@link SchedulerPro.model.ProjectModel} instance or a config object. The project holds all SchedulerPro data.\n     * @config {SchedulerPro.model.ProjectModel|ProjectModelConfig} project\n     * @category Data\n     */\n    /**\n     * Inline events, will be loaded into the backing project's EventStore.\n     * @config {SchedulerPro.model.EventModel[]|Object[]} events\n     * @category Data\n     */\n    /**\n     * The {@link SchedulerPro.data.EventStore} holding the events to be rendered into the scheduler.\n     * @config {SchedulerPro.data.EventStore|EventStoreConfig} eventStore\n     * @category Data\n     */\n    /**\n     * Inline resources, will be loaded into the backing project's ResourceStore.\n     * @config {SchedulerPro.model.ResourceModel[]|ResourceModelConfig[]} resources\n     * @category Data\n     */\n    /**\n     * The {@link SchedulerPro.data.ResourceStore} holding the resources to be rendered into the scheduler.\n     * @config {SchedulerPro.data.ResourceStore|ResourceStoreConfig} resourceStore\n     * @category Data\n     */\n    // For some reason Typings won't accept AssignmentModelConfig here. Object will be turned into it though\n    /**\n     * Inline assignments, will be loaded into the backing project's AssignmentStore.\n     * @config {SchedulerPro.model.AssignmentModel[]|SchedulerPro.model.AssignmentModelConfig[]} assignments\n     * @category Data\n     */\n    /**\n     * The optional {@link SchedulerPro.data.AssignmentStore}, holding assignments between resources and events.\n     * Required for multi assignments.\n     * @config {SchedulerPro.data.AssignmentStore|AssignmentStoreConfig} assignmentStore\n     * @category Data\n     */\n    /**\n     * Inline dependencies, will be loaded into the backing project's DependencyStore.\n     * @config {SchedulerPro.model.DependencyModel[]|DependencyModelConfig[]} dependencies\n     * @category Data\n     */\n    /**\n     * The optional {@link SchedulerPro.data.DependencyStore}.\n     * @config {SchedulerPro.data.DependencyStore|DependencyStoreConfig} dependencyStore\n     * @category Data\n     */\n    /**\n     * Inline calendars, will be loaded into the backing project's CalendarManagerStore.\n     * @config {SchedulerPro.model.CalendarModel[]|CalendarModelConfig[]} calendars\n     * @category Data\n     */\n    // Properties\n    /**\n     * Get/set ProjectModel instance, containing the data visualized by the SchedulerPro.\n     * @member {SchedulerPro.model.ProjectModel} project\n     * @typings {ProjectModel}\n     * @category Data\n     */\n    /**\n     * Get/set events, applies to the backing project's EventStore.\n     * @member {SchedulerPro.model.EventModel[]} events\n     * @accepts {SchedulerPro.model.EventModel[]|SchedulerPro.model.EventModelConfig[]}\n     * @category Data\n     */\n    /**\n     * Get/set the event store instance of the backing project.\n     * @member {SchedulerPro.data.EventStore} eventStore\n     * @category Data\n     */\n    /**\n     * Get/set resources, applies to the backing project's ResourceStore.\n     * @member {SchedulerPro.model.ResourceModel[]} resources\n     * @accepts {SchedulerPro.model.ResourceModel[]|SchedulerPro.model.ResourceModelConfig[]}\n     * @category Data\n     */\n    /**\n     * Get/set the resource store instance of the backing project\n     * @member {SchedulerPro.data.ResourceStore} resourceStore\n     * @category Data\n     */\n    // For some reason Typings won't accept AssignmentModelConfig here. Object will be turned into it though\n    /**\n     * Get/set assignments, applies to the backing project's AssignmentStore.\n     * @member {SchedulerPro.model.AssignmentModel[]} assignments\n     * @accepts {SchedulerPro.model.AssignmentModel[]|SchedulerPro.model.AssignmentModelConfig[]}\n     * @category Data\n     */\n    /**\n     * Get/set the event store instance of the backing project.\n     * @member {SchedulerPro.data.AssignmentStore} assignmentStore\n     * @category Data\n     */\n    /**\n     * Get/set dependencies, applies to the backing projects DependencyStore.\n     * @member {SchedulerPro.model.DependencyModel[]} dependencies\n     * @accepts {SchedulerPro.model.DependencyModel[]|DependencyModelConfig[]}\n     * @category Data\n     */\n    /**\n     * Get/set the dependencies store instance of the backing project.\n     * @member {SchedulerPro.data.DependencyStore} dependencyStore\n     * @category Data\n     */\n    /**\n     * Get/set calendars, applies to the backing projects CalendarManagerStore.\n     * @member {SchedulerPro.model.CalendarModel[]} calendars\n     * @accepts {SchedulerPro.model.CalendarModel[]|CalendarModelConfig[]}\n     * @category Data\n     */\n    //endregion\n    //region Overrides\n    onPaintOverride() {\n        // Internal procedure used for paint method overrides\n        // Not used in onInternalPaint() because it may be chained on instance and Override won't be applied\n    }\n    //endregion\n    //region Inline data\n    // Pro specific extension of SchedulerStores\n    set calendars(calendars) {\n        this.project.calendars = calendars;\n    }\n    get calendars() {\n        return this.project.calendars;\n    }\n    //endregion\n    //region Mode\n    /**\n     * Get mode (horizontal/vertical)\n     * @property {'horizontal'|'vertical'}\n     * @readonly\n     * @category Common\n     */\n    get mode() {\n        return this._mode;\n    }\n    set mode(mode) {\n        const me = this;\n        me._mode = mode;\n        if (!me[mode]) {\n            me.element.classList.add(`b-sch-${mode}`);\n            if (mode === 'horizontal') {\n                me.horizontal = new ProHorizontalRendering(me);\n                if (me.isPainted) {\n                    me.horizontal.init();\n                }\n            }\n            else if (mode === 'vertical') {\n                me.vertical = new ProVerticalRendering(me);\n                if (me.rendered) {\n                    me.vertical.init();\n                }\n            }\n        }\n    }\n    //endregion\n    //region Internal\n    // Overrides grid to take project loading into account\n    toggleEmptyText() {\n        const\n            me = this;\n        if (me.bodyContainer && me.rowManager) {\n            DomHelper.toggleClasses(me.bodyContainer, 'b-grid-empty', !(me.rowManager.rowCount || me.project.isLoadingOrSyncing));\n        }\n    }\n    // Needed to work with Gantt features\n    get taskStore() {\n        return this.project.eventStore;\n    }\n    //endregion\n    createEvent(startDate, resourceRecord, row) {\n        // For resources with a calendar, ensure the date is inside a working time range\n        if (!resourceRecord.isWorkingTime(startDate)) {\n            return;\n        }\n        // If task editor is active dblclick will trigger number of async actions:\n        // store add which would schedule project commit\n        // editor cancel on next animation frame\n        // editor hide\n        // rejecting previous transaction\n        // and there is also dependency feature listening to transitionend on scheduler to draw lines after\n        // It can happen that user dblclicks too fast, then event will be added, then dependency will schedule itself\n        // to render, and then event will be removed as part of transaction rejection from editor. So we cannot add\n        // event before active transaction is done.\n        if (this.taskEdit && this.taskEdit.isEditing) {\n            this.ion({\n                aftertaskedit : () => super.createEvent(startDate, resourceRecord, row),\n                once          : true\n            });\n        }\n        else {\n            return super.createEvent(startDate, resourceRecord, row);\n        }\n    }\n}\nSchedulerProBase.initClass();\nVersionHelper.setVersion('schedulerpro', '5.6.2');\nSchedulerProBase._$name = 'SchedulerProBase';", "import SchedulerProBase from './SchedulerProBase.js';\n// Since SchedulerPro is based on thin XXBase classes, default features needs to be pulled in here\nimport '../../Scheduler/feature/ColumnLines.js';\nimport '../../Scheduler/feature/EventCopyPaste.js';\nimport '../../Scheduler/feature/EventDrag.js';\nimport '../../Scheduler/feature/EventDragCreate.js';\nimport '../../Scheduler/feature/EventFilter.js';\nimport '../../Scheduler/feature/EventMenu.js';\nimport '../../Scheduler/feature/EventTooltip.js';\nimport '../../Scheduler/feature/NonWorkingTime.js';\nimport '../../Scheduler/feature/ScheduleMenu.js';\nimport '../../Scheduler/feature/ScheduleTooltip.js';\nimport '../../Scheduler/feature/StickyEvents.js';\nimport '../../Scheduler/feature/TimeAxisHeaderMenu.js';\nimport '../../Grid/feature/CellEdit.js';\nimport '../../Grid/feature/CellMenu.js';\nimport '../../Grid/feature/ColumnDragToolbar.js';\nimport '../../Grid/feature/ColumnPicker.js';\nimport '../../Grid/feature/ColumnReorder.js';\nimport '../../Grid/feature/ColumnResize.js';\nimport '../../Grid/feature/Filter.js';\nimport '../../Grid/feature/FilterBar.js';\nimport '../../Grid/feature/Group.js';\nimport '../../Grid/feature/HeaderMenu.js';\nimport '../../Grid/feature/Sort.js';\nimport '../../Grid/feature/Stripe.js';\n// For checkbox selection mode\nimport '../../Grid/column/CheckColumn.js';\nimport '../feature/CellEdit.js';\nimport '../feature/Dependencies.js';\nimport '../feature/DependencyEdit.js';\nimport '../feature/EventResize.js';\nimport '../feature/TaskEdit.js';\nimport '../feature/EventSegmentDrag.js';\nimport '../feature/EventSegmentResize.js';\nimport '../feature/EventSegments.js';\n/**\n * @module SchedulerPro/view/SchedulerPro\n */\n/**\n * ## Intro\n *\n * The Scheduler Pro is an extension of the [Bryntum Scheduler](#Scheduler/view/Scheduler), and combines the visualisation capabilities\n * of the Scheduler with the powerful scheduling engine from the Gantt. This means it can manage {@link SchedulerPro/model/ProjectModel project} data composed by\n * tasks, dependencies, resources, assignments and calendars (for working / non-working time). If you have inter-task dependencies,\n * task updates will be propagated to any successors after a task is moved. The engine will reschedule tasks\n * according to the constraints, dependencies and calendars defined in the project. To familiarize yourself with the various APIs and data structures\n * of the Scheduler Pro, we recommend starting with these resources:\n *\n * * [Project data model guide](#SchedulerPro/guides/basics/project_data.md)\n * * [Bryntum Scheduler API docs](#Scheduler/view/Scheduler)\n * * [Bryntum Grid API docs](#Grid/view/Grid)\n * * [Localization](#SchedulerPro/guides/customization/localization.md)\n *\n * ## Basic setup\n *\n * To create an instance of this class, simply configure it with:\n *\n * * The {@link Grid/column/Column columns} you want\n * * The {@link Grid/view/Grid#config-features} you want, quite a lot to choose from, and you can build your own too\n * * A {@link SchedulerPro/model/ProjectModel Project} instance:\n * * A {@link Scheduler/preset/ViewPreset viewPreset} identifier, specifying the granularity of the time axis.\n *\n * ```javascript\n * const scheduler = new SchedulerPro({\n *    // A Project holds the data and the calculation engine for Scheduler Pro. It also acts as a CrudManager, allowing\n *    // loading data into all stores at once\n *    project : {\n *        autoLoad  : true,\n *        transport : {\n *            load : {\n *                url : './data/data.json'\n *            }\n *       }\n *    },\n *\n *    adopt             : 'container',\n *    startDate         : '2020-05-01',\n *    endDate           : '2020-09-30',\n *    resourceImagePath : '../_shared/images/users/',\n *    viewPreset        : 'dayAndWeek'\n *    features : {\n *       columnLines  : false,\n *       dependencies : true\n *   },\n *\n *   columns : [\n *       {\n *           type           : 'resourceInfo',\n *           text           : 'Worker',\n *           showEventCount : true\n *       }\n *   ]\n * });\n * ```\n *\n * {@inlineexample SchedulerPro/view/SchedulerPro.js}\n *\n * ## Inheriting from Bryntum Grid\n * Bryntum Scheduler Pro inherits from Bryntum Grid, meaning that most features available in the grid are also available\n * for the scheduler. Common features include columns, cell editing, context menus, row grouping, sorting and more.\n * Note: If you want to use the Grid component standalone, e.g. to use drag-from-grid functionality, you need a separate\n * license for the Grid component.\n *\n * ## Customisation\n *\n * You can style any aspect of the Scheduler using plain CSS or modify our themes using our built-in SASS variables.\n * Using the {@link Scheduler/view/mixin/SchedulerEventRendering#config-eventRenderer} you can customize the HTML output for\n * each event bar. The Scheduler comes with a few different {@link #config-eventStyle event styles} which you can\n * define globally on the Scheduler, in the resource data, or on individual events.\n *\n * {@inlineexample SchedulerPro/view/EventStyles.js}\n *\n * For more information about styling, please refer to the [styling guide](#SchedulerPro/guides/customization/styling.md).\n *\n * ## Partnering with other timeline widgets\n *\n * You can also pair the Scheduler Pro with other timeline based widgets such as the {@link SchedulerPro/view/ResourceHistogram histogram widget}\n * to view resource allocation levels, using the {@link #config-partner} config.\n *\n * {@inlineexample SchedulerPro/view/ResourceHistogram.js}\n *\n * ### Differences between Scheduler and Scheduler Pro\n * Scheduler Pro extends Scheduler and schedules tasks based on the Project, Resource and Event calendars, while also taking into account\n * dependencies and constraints. Scheduler Pro also comes with more demos showing off advanced use cases. Below is a list\n * of technical differences between the two versions:\n *\n * - Scheduler uses an EventStore, ResourceStore (optionally an AssignmentStore and a DependencyStore), whereas Scheduler Pro always\n * uses an AssignmentStore to manage event assignments.\n * - Scheduler Pro uses the same data model as the Gantt and can visualise a Project side by side with the Gantt.\n * - Scheduler supports showing dependencies but they are just visual elements, they do not impact scheduling. In Scheduler Pro,\n * adding a dependency between two tasks will affect the scheduling of the successor task.\n * - Scheduler Pro supports visualising a task completion progress bar.\n * - Scheduler Pro includes a Timeline widget and a Resource Histogram widget.\n *\n * @extends SchedulerPro/view/SchedulerProBase\n * @classtype schedulerpro\n * @widget\n */\nexport default class SchedulerPro extends SchedulerProBase {\n    //region Config\n    static get $name() {\n        return 'SchedulerPro';\n    }\n    static get type() {\n        return 'schedulerpro';\n    }\n    //endregion\n}\nSchedulerPro.initClass();\nSchedulerPro._$name = 'SchedulerPro';", "import ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport SchedulerBase from '../../Scheduler/view/SchedulerBase.js';\nimport '../../Scheduler/feature/TimeRanges.js';\nimport Store from '../../Core/data/Store.js';\nimport { SchedulerProProjectMixin } from '../../Engine/quark/model/scheduler_pro/SchedulerProProjectMixin.js';\n/**\n * @module SchedulerPro/widget/Timeline\n */\n/**\n * A visual component showing an overview timeline of events having the {@link SchedulerPro.model.EventModel#field-showInTimeline showInTimeline}\n * field set to true. The timeline component subclasses the {@link Scheduler.view.Scheduler Scheduler} and to use it,\n * simply provide it with a {@link SchedulerPro.model.ProjectModel}:\n *\n * ```javascript\n * const timeline = new Timeline({\n *     appendTo  : 'container',\n *     project   : project\n * });\n * ```\n *\n * {@inlineexample SchedulerPro/widget/Timeline.js}\n *\n * @extends Scheduler/view/Scheduler\n * @classtype timeline\n * @widget\n */\nexport default class Timeline extends SchedulerBase {\n    static get $name() {\n        return 'Timeline';\n    }\n    // Factoryable type name\n    static get type() {\n        return 'timeline';\n    }\n    static get configurable() {\n        return {\n            /**\n             * Project config object or a Project instance\n             *\n             * @config {SchedulerPro.model.ProjectModel|ProjectModelConfig} project\n             */\n            /**\n             * @hideconfigs timeZone\n             */\n            height      : '13em',\n            eventLayout : 'pack',\n            barMargin   : 1,\n            // We need timeline width to be exact, because with `overflow: visible` content will look awful.\n            // Flow is like this:\n            // 1. zoomToFit is trying to set timespan to eventStore total time span. Assume start in on tuesday and end is on friday\n            // 2. zooming mixin is calculating tick width, which is e.g. 37px to fit all the ticks to the available space\n            // 3. timeAxis is configured with this new time span. By default it adjusts start and end to monday.\n            // 4. since timespan was increased, it now overflows with original tick size of 37. It requires smth smaller, like 34.\n            // 5. timeAxisViewModel is calculating fitting size. Which is correct value of 34, but value is ignored unless `forceFit` is true\n            // But apparently forceFit + zoomToSpan IS NOT SUPPORTED. So alternative approach is to disable autoAdjust\n            // on time axis to prevent increased size in #3. But then time axis start/end won't be even date, it could be\n            // smth random like `Thu Feb 07 2019 22:13:20`.\n            //\n            // On the other hand, without force-fit content might overflow and timeline is styled to show overflowing content.\n            // And that would require more additional configs\n            forceFit : true,\n            timeAxis : { autoAdjust : false },\n            readOnly                  : true,\n            zoomOnMouseWheel          : false,\n            zoomOnTimeAxisDoubleClick : false,\n            // eventColor                : null,\n            // eventStyle                : null,\n            rowHeight                 : 48,\n            displayDateFormat         : 'L',\n            // A fake resource\n            resources : [\n                {\n                    id : 1\n                }\n            ],\n            columns : []\n        };\n    }\n    static get delayable() {\n        return {\n            fillFromTaskStore : 100\n        };\n    }\n    construct(config = {}) {\n        const me = this;\n        me.startDateLabel           = document.createElement('label');\n        me.startDateLabel.className = 'b-timeline-startdate';\n        me.endDateLabel             = document.createElement('label');\n        me.endDateLabel.className   = 'b-timeline-enddate';\n        let initialCommitPerformed = true;\n        if ('project' in config) {\n            if (!config.project) {\n                throw new Error('You need to configure the Timeline with a Project');\n            }\n            // In case instance of project is provided, just take store right away and delete config, falling back to\n            // default\n            else if (config.project instanceof SchedulerProProjectMixin) {\n                me.taskStore = config.project.eventStore;\n                if (!config.project.isInitialCommitPerformed) {\n                    initialCommitPerformed = false;\n                    // For schedulerpro it is important to listen to first project commit\n                    config.project.ion({\n                        name : 'initialCommit',\n                        refresh({ isInitialCommit }) {\n                            if (isInitialCommit) {\n                                me.fillFromTaskStore();\n                                me.detachListeners('initialCommit');\n                            }\n                        },\n                        thisObj : me\n                    });\n                }\n                delete config.project;\n            }\n        }\n        // Despite the fact Timeline extends SchedulerBase, we still need to disable all these features.\n        // Because in case timeline gets into the same scope as scheduler or gantt, some features might be enabled\n        // by default. SchedulerBase jut means that we don't import anything extra. But other components might.\n        config.features = ObjectHelper.assign({\n            cellEdit            : false,\n            cellMenu            : false,\n            columnAutoWidth     : false,\n            columnLines         : false,\n            columnPicker        : false,\n            columnReorder       : false,\n            columnResize        : false,\n            contextMenu         : false,\n            eventContextMenu    : false,\n            eventDrag           : false,\n            eventDragCreate     : false,\n            eventEdit           : false,\n            eventFilter         : false,\n            eventMenu           : false,\n            eventResize         : false,\n            eventTooltip        : false,\n            group               : false,\n            headerMenu          : false,\n            regionResize        : false,\n            scheduleContextMenu : false,\n            scheduleMenu        : false,\n            scheduleTooltip     : false,\n            sort                : false,\n            timeAxisHeaderMenu  : false,\n            timeRanges          : false\n        }, config.features);\n        super.construct(config);\n        if (me.features.timeRanges) {\n            // We don't want to show timeRanges relating to Project\n            me.features.timeRanges.store = new Store();\n        }\n        // If original project is not committed by this time, we should not try to fill timeline from the task store,\n        // because project listener will do it itself. And also to not do extra suspendRefresh which would break project\n        // refresh event listener behavior.\n        // https://github.com/bryntum/support/issues/2665\n        initialCommitPerformed && me.fillFromTaskStore.now();\n        me.taskStore.ion({\n            refreshPreCommit : me.fillFromTaskStore,\n            changePreCommit  : me.onTaskStoreChange,\n            thisObj          : me\n        });\n        me.ion({\n            resize  : me.onSizeChanged,\n            thisObj : me\n        });\n        me.bodyContainer.appendChild(me.startDateLabel);\n        me.bodyContainer.appendChild(me.endDateLabel);\n    }\n    onSizeChanged({ width, oldWidth }) {\n        const\n            me    = this,\n            reFit = width !== oldWidth;\n        // Save a refresh, will come from fit. Don't suspend if we won't re-fit, we need the refresh for events\n        // to not disappear (since updating row height clears cache)\n        reFit && me.suspendRefresh();\n        me.syncRowHeight();\n        if (reFit) {\n            me.resumeRefresh(false);\n            me.fitTimeline();\n        }\n    }\n    syncRowHeight() {\n        if (this.bodyContainer.isConnected) {\n            this.rowHeight = this.bodyContainer.offsetHeight;\n        }\n    }\n    fitTimeline() {\n        if (this.eventStore.count > 0) {\n            this.forceFit = false;\n            this.zoomToFit(\n                {\n                    leftMargin  : 50,\n                    rightMargin : 50\n                }\n            );\n            this.forceFit = true;\n        }\n        this.updateStartEndLabels();\n    }\n    updateStartEndLabels() {\n        const me                    = this;\n        me.startDateLabel.innerHTML = me.getFormattedDate(me.startDate);\n        me.endDateLabel.innerHTML   = me.getFormattedDate(me.endDate);\n    }\n    async onTaskStoreChange({ action, record, records, changes, isCollapse }) {\n        const\n            me         = this,\n            eventStore = me.eventStore;\n        let needsFit;\n        switch (action) {\n            case 'add':\n                records.forEach(task => {\n                    if (task.showInTimeline) {\n                        eventStore.add(me.cloneTask(task));\n                        needsFit = true;\n                    }\n                });\n                break;\n            case 'remove':\n                if (!isCollapse) {\n                    records.forEach(task => {\n                        if (task.showInTimeline) {\n                            eventStore.remove(task.id);\n                            needsFit = true;\n                        }\n                    });\n                }\n                break;\n            case 'removeall':\n                me.fillFromTaskStore.now();\n                break;\n            case 'update': {\n                const task = record;\n                if (changes.showInTimeline) {\n                    // Add or remove from our eventStore\n                    if (task.showInTimeline) {\n                        eventStore.add(me.cloneTask(task));\n                    }\n                    else {\n                        const timelineEvent = eventStore.getById(task.id);\n                        if (timelineEvent) {\n                            eventStore.remove(timelineEvent);\n                        }\n                    }\n                    needsFit = true;\n                }\n                else if (task.showInTimeline) {\n                    // Just sync with existing clone\n                    const clone = eventStore.getById(task.id);\n                    if (clone) {\n                        // Fields might have been remapped\n                        clone.set(me.cloneTask(task));\n                        needsFit = true;\n                    }\n                }\n                break;\n            }\n        }\n        if (needsFit) {\n            me.fitTimeline();\n        }\n    }\n    cloneTask(task) {\n        return {\n            id         : task.id,\n            resourceId : 1,\n            name       : task.name,\n            startDate  : task.startDate,\n            endDate    : task.endDate,\n            cls        : task.cls\n        };\n    }\n    render() {\n        super.render(...arguments);\n        this.syncRowHeight();\n    }\n    async fillFromTaskStore() {\n        const\n            me            = this,\n            timelineTasks = [];\n        me.taskStore.traverse(task => {\n            if (task.showInTimeline && task.isScheduled) {\n                timelineTasks.push(me.cloneTask(task));\n            }\n        });\n        me.events = timelineTasks;\n        await me.project.commitAsync();\n        if (me.isDestroyed) {\n            return;\n        }\n        me.fitTimeline();\n    }\n    onLocaleChange() {\n        this.updateStartEndLabels();\n        super.onLocaleChange();\n    }\n};\n// Register this widget type with its Factory\nTimeline.initClass();\nTimeline._$name = 'Timeline';", "import StringHelper from '../../Core/helper/StringHelper.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport GridRowModel from '../../Grid/data/GridRowModel.js';\nimport TreeGrid from '../../Grid/view/TreeGrid.js';\nimport ArrayHelper from '../../Core/helper/ArrayHelper.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\n/**\n * @module SchedulerPro/widget/VersionGrid\n */\nconst\n    EMPTY_ARRAY = [],\n    actionTypeOrder = { remove : 1, add : 2, update : 3 },\n    entityTypeOrder = { TaskModel : 1, DependencyModel : 2, AssignmentModel : 3, ProjectModel : 4 },\n    // For moves, describe the former and current locations\n    describePosition = ({ parent, index }) => `${parent.name}[${index}]`,\n    knownEntityTypes = {\n        AssignmentModel : 'Assignment',\n        DependencyModel : 'Dependency'\n    };\nclass VersionGridRow extends GridRowModel {\n    static fields = [\n        {\n            name : 'description',\n            type : 'string'\n        }, {\n            name : 'occurredAt',\n            type : 'date'\n        }, {\n            name : 'versionModel'\n        }, {\n            name : 'transactionModel'\n        }, {\n            name : 'propertyUpdate'\n        }, {\n            name : 'action'\n        }\n    ];\n}\n/**\n * Displays a list of versions and the transactions they contain. For use with the {@link SchedulerPro.feature.Versions}\n * feature.\n *\n * Configure the VersionGrid with a {@link SchedulerPro.model.ProjectModel} using the {@link #config-project} config.\n *\n * @extends Grid/view/TreeGrid\n * @classtype versiongrid\n * @widget\n */\nexport default class VersionGrid extends TreeGrid {\n    static $name = 'VersionGrid';\n    static type = 'versiongrid';\n    static configurable = {\n        store : {\n            tree       : true,\n            modelClass : VersionGridRow,\n            sorters    : [\n                {\n                    field     : 'occurredAt',\n                    ascending : false\n                },\n                VersionGrid.sortActionRows\n            ],\n            reapplySortersOnAdd : true\n        },\n        /**\n         * The {@link SchedulerPro.model.ProjectModel} whose versions and changes are being observed in this grid.\n         * @config {SchedulerPro.model.ProjectModel}\n         */\n        project : null,\n        /**\n         * Whether to display transactions not yet associated with a version.\n         * @prp {Boolean}\n         */\n        showUnattachedTransactions : true,\n        /**\n         * Whether to show only versions that have been assigned a specific name.\n         * @prp {Boolean}\n         */\n        showNamedVersionsOnly : false,\n        /**\n         * Whether to include version rows in the display.\n         * @prp {Boolean}\n         */\n        showVersions : true,\n        /**\n         * The id of the version currently being compared, if any.\n         * @prp {Boolean}\n         */\n        comparingVersionId : null,\n        flex : 0,\n        features : {\n            group : {\n                field : 'id'\n            },\n            cellEdit : {\n                continueEditingOnCellClick : false,\n                editNextOnEnterPress       : false\n            },\n            cellMenu : {\n                items : {\n                    removeRow    : false,\n                    cut          : false,\n                    copy         : false,\n                    paste        : false,\n                    renameButton : {\n                        text   : 'L{VersionGrid.rename}',\n                        icon   : 'b-icon b-icon-edit',\n                        onItem : ({ record, source : grid }) => {\n                            grid.startEditing({\n                                id     : record.id,\n                                column : grid.columns.get('description')\n                            });\n                        }\n                    },\n                    restoreButton : {\n                        text   : 'L{VersionGrid.restore}',\n                        icon   : 'b-icon b-icon-undo',\n                        onItem : ({ record, source : grid }) => {\n                            grid.triggerRestore(record.versionModel);\n                        }\n                    },\n                    compareButton : {\n                        text   : 'L{VersionGrid.compare}',\n                        icon   : 'b-icon b-icon-compare',\n                        onItem : ({ record, source : grid }) => {\n                            grid.triggerCompare(record.versionModel);\n                        }\n                    },\n                    stopComparingButton : {\n                        text   : 'L{VersionGrid.stopComparing}',\n                        onItem : ({ record, source : grid }) => {\n                            grid.triggerStopCompare();\n                        }\n                    }\n                }\n            },\n            rowCopyPaste : false\n        },\n        columns : [\n            { type : 'tree', text : 'L{VersionGrid.description}', field : 'description', flex : 4, groupable : false, renderer : ({ grid, ...rest }) => grid.renderDescription({ grid, ...rest }), autoHeight : true },\n            { text : 'L{VersionGrid.occurredAt}', field : 'occurredAt', type : 'date', flex : 1, groupable : false }\n        ],\n        /**\n         * The date format used for displaying date values in change actions.\n         * @config {String}\n         */\n        dateFormat : 'M/D/YY h:mm a',\n        internalListeners : {\n            beforeCellEditStart({ editorContext : { column, record } }) {\n                // Only version descriptions are editable\n                if (!(column.field === 'description' && record.versionModel)) {\n                    return false;\n                }\n            },\n            finishCellEdit({ editorContext : { record, value } }) {\n                record.versionModel.name = (value != null && value.trim()) ? value : null;\n            },\n            cellMenuBeforeShow({ source, record, items }) {\n                items.stopComparingButton.disabled = !source.comparingVersionId;\n                return Boolean(record.versionModel);\n            },\n            toggleNode({ record, collapse }) {\n                this._expandedById.set(record.id, !collapse);\n            }\n        }\n    };\n    static delayable = {\n        processUpdates : {\n            type              : 'raf',\n            cancelOutstanding : true\n        }\n    };\n    // Bookkeeping fields\n    static get properties() {\n        return {\n            _rowsByUnderlyingRecord : new WeakMap(),\n            _expandedById           : new Map()\n        };\n    };\n    _transactionChanges = [];\n    _versionChanges = [];\n    comparingRowCls = `b-${VersionGrid.type}-comparing`;\n    construct(config) {\n        super.construct({\n            ...config,\n            features : ObjectHelper.merge({}, VersionGrid.configurable.features, config.features)\n        });\n    }\n    afterConstruct() {\n        if (!this.project) {\n            throw new Error(`${VersionGrid.$name} requires the project config.`);\n        }\n        this.refreshGrid();\n    }\n    updateDateFormat(newDateFormat) {\n        const occurredAtColumn = this.columns.get('occurredAt');\n        if (occurredAtColumn) {\n            occurredAtColumn.format = newDateFormat;\n        }\n    }\n    updateProject(newProject) {\n        const me = this;\n        me.detachListeners('storeChange');\n        me._versionStore = newProject.getCrudStore('versions');\n        me._transactionStore = newProject.getCrudStore('changelogs');\n        me._versionStore.ion({\n            name    : 'storeChange',\n            change  : me.onVersionStoreChange,\n            thisObj : me\n        });\n        me._transactionStore.ion({\n            name    : 'storeChange',\n            change  : me.onTransactionStoreChange,\n            thisObj : me\n        });\n    }\n    updateShowNamedVersionsOnly() {\n        if (this.isPainted) {\n            this.refreshGrid();\n        }\n    }\n    updateShowUnattachedTransactions() {\n        if (this.isPainted) {\n            this.refreshGrid();\n        }\n    }\n    updateShowVersions() {\n        if (this.isPainted) {\n            this.refreshGrid();\n        }\n    }\n    updateComparingVersionId(newVersionId, oldVersionId) {\n        const [oldHighlightedRow, newHighlightedRow] = [oldVersionId, newVersionId].map(versionId =>\n            this.store.getById(`v-${versionId}`));\n        if (oldHighlightedRow) {\n            oldHighlightedRow.cls = '';\n            oldHighlightedRow.iconCls = 'b-icon b-icon-version';\n        }\n        if (newHighlightedRow) {\n            newHighlightedRow.cls = this.comparingRowCls;\n            newHighlightedRow.iconCls = 'b-icon b-icon-compare';\n        }\n    }\n    onVersionStoreChange({ action, records }) {\n        this._versionChanges.push({ action, records });\n        this.processUpdates();\n    }\n    onTransactionStoreChange({ action, records }) {\n        this._transactionChanges.push({ action, records });\n        this.processUpdates();\n    }\n    /**\n     * This is an optimization to more efficiently replace grid rows when the underlying stores change.\n     * We wait a tick, then replace the set of rows corresponding to the modified records with the new\n     * projected rowset.\n     *\n     * The code below does not handle record remove, or updating transactions without their version in the\n     * same tick. (Versions can be updated without their transactions, as when renamed.)\n     * @private\n     */\n    processUpdates() {\n        const\n            me = this,\n            versions = ArrayHelper.unique(me._versionChanges.flatMap(({ records }) => records)),\n            versionIds = new Set(versions.map(version => String(version.id))),\n            transactions = ArrayHelper.unique(\n                me._transactionChanges.flatMap(({ records }) => records)\n                    // Expand to all transactions for incoming versions\n                    .concat(versions.length === 0 ? []\n                        : me._transactionStore.query(txn => versionIds.has(txn.versionId))));\n        // Expand to all versions for incoming transaction\n        for (const transaction of transactions) {\n            if (transaction.versionId && !versionIds.has(transaction.versionId)) {\n                versions.push(me._versionStore.getById(transaction.versionId));\n                versionIds.add(transaction.versionId);\n            }\n        }\n        me.replaceRows(ArrayHelper.unique(versions), transactions);\n        me._transactionChanges = [];\n        me._versionChanges = [];\n    }\n    replaceRows(versions, transactions) {\n        const\n            me = this,\n            { showNamedVersionsOnly, showUnattachedTransactions, store } = me,\n            rowsToReplaceSet = new Set(),\n            transactionsByVersionId = ArrayHelper.groupBy(transactions, 'versionId'),\n            allRecords = transactions.concat(versions),\n            versionsToShow = showNamedVersionsOnly\n                ? versions.filter(version => version.name != null)\n                : versions;\n        for (const record of allRecords) {\n            for (const row of me._rowsByUnderlyingRecord.get(record) ?? EMPTY_ARRAY) {\n                rowsToReplaceSet.add(row);\n            }\n        }\n        me.suspendRefresh();\n        store.remove(Array.from(rowsToReplaceSet));\n        for (const version of versionsToShow) {\n            const newRows = store.add(me.getGridRows(version, transactionsByVersionId[version.id]));\n            me._rowsByUnderlyingRecord.set(version, newRows);\n        }\n        if (showUnattachedTransactions) {\n            for (const transaction of transactions.filter(txn => txn.versionId == null)) {\n                const newRows = store.add(me.getGridRows(null, [transaction]));\n                me._rowsByUnderlyingRecord.set(transaction, newRows);\n            }\n        }\n        me.resumeRefresh(false);\n        store.sort(store.sorters);\n    }\n    /**\n     * Does a full replace of all rows in the grid using all records currently in the two stores.\n     * @private\n     */\n    refreshGrid() {\n        this.replaceRows(this._versionStore.records, this._transactionStore.records);\n    }\n    /**\n     * Transform a set of transactions (and optional parent version) into tree structure needed by grid\n     * @private\n     */\n    getGridRows(version, transactions) {\n        const\n            me = this,\n            { showVersions, comparingVersionId } = me,\n            transactionRows = transactions?.map(transaction => {\n                const id = `t-${transaction.id}`;\n                return {\n                    id,\n                    expanded         : Boolean(me._expandedById?.get(id)),\n                    description      : transaction.description,\n                    occurredAt       : transaction.occurredAt,\n                    transactionModel : transaction,\n                    rootVersionModel : version,\n                    children         : transaction.actions.map((action, index) => {\n                        const id = `a-${transaction.id}-${index}`;\n                        return {\n                            id,\n                            expanded         : Boolean(me._expandedById?.get(id)),\n                            action,\n                            rootVersionModel : version,\n                            children         : action.propertyUpdates?.map(propertyUpdate => ({\n                                rootVersionModel : version,\n                                propertyUpdate\n                            })) ?? []\n                        };\n                    })\n                };\n            }) || [],\n            id = `v-${version?.id}`;\n        return version && showVersions ? {\n            id,\n            expanded     : Boolean(me._expandedById.get(id)),\n            description  : version.description,\n            occurredAt   : version.savedAt,\n            children     : transactionRows,\n            versionModel : version,\n            iconCls      : 'b-icon-version',\n            cls          : version.id === comparingVersionId ? me.comparingRowCls : null\n        } : transactionRows;\n    }\n    renderDescription(event) {\n        const { record } = event;\n        if (record.propertyUpdate) {\n            return this.renderPropertyUpdate(record.propertyUpdate);\n        }\n        else if (record.action) {\n            return this.renderActionDescription(record.action);\n        }\n        return record.description;\n    }\n    renderPropertyUpdate(propertyUpdate) {\n        const\n            clsPrefix = VersionGrid.type,\n            { property, before, after } = propertyUpdate;\n        return {\n            children : [{\n                tag      : 'div',\n                class    : `b-${clsPrefix}-property-update-desc`,\n                children : [\n                    {\n                        tag   : 'span',\n                        class : `b-${clsPrefix}-property-name`,\n                        html  : `${this.formatPropertyName(property)}`\n                    },\n                    this.renderPropertyValue(before, 'before'),\n                    {\n                        tag   : 'i',\n                        class : 'b-icon b-icon-right'\n                    },\n                    this.renderPropertyValue(after, 'after')\n                ]\n            }]\n        };\n    }\n    /**\n     * Return DomConfig for an individual data value.\n     * @param {*} value\n     * @param {'before'|'after'} side\n     * @returns {DomConfig}\n     * @private\n     */\n    renderPropertyValue(value, side) {\n        return {\n            tag   : 'span',\n            class : [\n                `b-${VersionGrid.type}-property-${side}`,\n                value == null && `b-${VersionGrid.type}-empty-value`\n            ],\n            html : value == null ? this.L('L{Versions.nullValue}') : this.formatValueString(value) ?? ``\n        };\n    }\n    /**\n     * Convert an individual data value to a string.\n     * @param {*} value The raw data value\n     * @returns {String} A string representing the value, for display\n     * @private\n     */\n    formatValueString(value) {\n        if (DateHelper.isDate(value)) {\n            return DateHelper.format(value, this.dateFormat);\n        }\n        else if (typeof (value) === 'number') {\n            return value.toFixed(2);\n        }\n        return value;\n    }\n    /**\n     * Format a property name in the change log to a displayable string. By default,\n     * converts e.g. \"camelCase\" to \"Camel case\".\n     * @param {String} propertyName The raw field name\n     * @returns {String} A string formatted for display\n     * @private\n     */\n    formatPropertyName(propertyName) {\n        return StringHelper.separate(propertyName);\n    }\n    getAssignmentTextTokens(assignmentChange) {\n        return {\n            event    : assignmentChange.event.name,\n            resource : assignmentChange.resource.name\n        };\n    }\n    getDependencyTextTokens(dependencyChange) {\n        return {\n            from : dependencyChange.fromTask.name,\n            to   : dependencyChange.toTask.name\n        };\n    }\n    /**\n     * Produces a text description to show in the description column for an 'action' row.\n     * @param {SchedulerPro.model.changelog.ChangeLogAction} action The action to describe\n     * @returns DomConfig of description text with highlightable entity names\n     * @private\n     */\n    renderActionDescription(action) {\n        const\n            me = this,\n            { actionType, entity } = action,\n            entityNames = me.L(`L{Versions.entityNames}`);\n        let description,\n            tokens = {\n                type : entityNames[entity.type],\n                name : entity.name\n            };\n        if (actionType === 'move') {\n            tokens.from = describePosition(action.from);\n            tokens.to = describePosition(action.to);\n        }\n        // Concatenate action and entity type to get description pattern from localizations\n        // e.g. 'L{Versions.addDependency}' | 'L{Versions.updateEntity}'\n        description = me.L(`L{Versions.${actionType}${knownEntityTypes[entity.type] ?? 'Entity'}}`);\n        if (entity.type === 'DependencyModel') {\n            tokens = me.getDependencyTextTokens(entity);\n        }\n        else if (entity.type === 'AssignmentModel') {\n            tokens = me.getAssignmentTextTokens(entity);\n        }\n        description = description.replace(/\\{(\\w+)\\}/g, (_, variable) => tokens[variable] ?? variable);\n        if (action.isUser) {\n            description = `[!] ${description}`;\n        }\n        return me.renderHighlightedTextElements(StringHelper.capitalize(description), tokens);\n    }\n    /**\n     * Sorts the actions within a transaction using precedence heuristic to show most \"significant\"\n     * actions first.\n     * @param {SchedulerPro.model.changelog.ChangeLogAction[]} actions\n     */\n    static sortActionRows(row1, row2) {\n        if (row1.parent === row2.parent && row1.action && row2.action) {\n            const\n                isUser1 = Boolean(row1.action.isUser),\n                isUser2 = Boolean(row2.action.isUser),\n                { actionType : type1, entity : { type : entityType1 } } = row1.action,\n                { actionType : type2, entity : { type : entityType2 } } = row2.action;\n            // Initial user actions first\n            if (isUser1 !== isUser2) {\n                return isUser1 ? -1 : 1;\n            }\n            // Adds/removes first, then updates; within those groups, tasks first\n            return Math.sign(actionTypeOrder[type1] - actionTypeOrder[type2]) ||\n                Math.sign(entityTypeOrder[entityType1] - entityTypeOrder[entityType2]) ||\n                0;\n        }\n        return 0;\n    }\n    triggerRestore(version) {\n        /**\n         * Fires when the user chooses to restore a selected version.\n         * @event restore\n         * @param {SchedulerPro.model.VersionModel} version The {@link SchedulerPro.model.VersionModel} being restored\n         */\n        this.trigger('restore', { version });\n    }\n    triggerCompare(version) {\n        /**\n         * Fires when the user chooses to compare a selected version.\n         * @event compare\n         * @param {SchedulerPro.model.VersionModel} version The {@link SchedulerPro.model.VersionModel} being restored\n         */\n        this.trigger('compare', { version });\n    }\n    triggerStopCompare(version) {\n        /**\n         * Fires when the user chooses to stop comparing a currently compared version.\n         * @event stopCompare\n         */\n        this.trigger('stopCompare');\n    }\n    /**\n     * Produce a DomConfig for cell text where **-delimited tokens are replaced by specified values. Used to\n     * allow CSS styling of replaced tokens (e.g. task names) in the changelog.\n     *\n     * @param {String} text Text string containing optional **delimited tokens**, taken from localizations\n     * @returns {DomConfig} DomConfig with text string broken into <span>s and tokens replaced\n     * @internal\n     */\n    renderHighlightedTextElements(text) {\n        const clsPrefix = this.constructor.type;\n        return {\n            children : [{\n                tag      : 'span',\n                class    : `b-${clsPrefix}-highlighted-text`,\n                children : text.split(/\\*\\*/g).reduce((out, chunk) => {\n                    out.children.push({\n                        tag   : 'span',\n                        text  : chunk,\n                        class : out.isEntity ? `b-${clsPrefix}-highlighted-entity` : null\n                    });\n                    out.isEntity = !out.isEntity;\n                    return out;\n                }, { children : [], isEntity : false }).children\n            }]\n        };\n    }\n}\nVersionGrid.initClass();\nVersionGrid._$name = 'VersionGrid';", "// column\nexport { default as ResourceCalendarColumn } from '../lib/SchedulerPro/column/ResourceCalendarColumn.js';\n// data\nexport { default as AssignmentStore } from '../lib/SchedulerPro/data/AssignmentStore.js';\nexport { default as CalendarManagerStore } from '../lib/SchedulerPro/data/CalendarManagerStore.js';\nexport { default as DependencyStore } from '../lib/SchedulerPro/data/DependencyStore.js';\nexport { default as EventStore } from '../lib/SchedulerPro/data/EventStore.js';\nexport { default as EventUpdateAction } from '../lib/SchedulerPro/data/stm/action/EventUpdateAction.js';\nexport { default as ResourceStore } from '../lib/SchedulerPro/data/ResourceStore.js';\nexport { default as ResourceUtilizationStore } from '../lib/SchedulerPro/data/ResourceUtilizationStore.js';\nexport { default as StateTrackingManager } from '../lib/SchedulerPro/data/stm/StateTrackingManager.js';\nexport { default as VersionStore } from '../lib/SchedulerPro/data/VersionStore.js';\nexport { default as ChangeLogStore } from '../lib/SchedulerPro/data/ChangeLogStore.js';\n// data mixin\nexport { default as PartOfProject } from '../lib/SchedulerPro/data/mixin/PartOfProject.js';\nexport { default as ProjectCrudManager } from '../lib/SchedulerPro/data/mixin/ProjectCrudManager.js';\n// event layout\nexport { default as ProHorizontalLayout } from '../lib/SchedulerPro/eventlayout/ProHorizontalLayout.js';\nexport { default as ProHorizontalLayoutStack } from '../lib/SchedulerPro/eventlayout/ProHorizontalLayoutStack.js';\nexport { default as ProHorizontalLayoutPack } from '../lib/SchedulerPro/eventlayout/ProHorizontalLayoutPack.js';\n// feature\nexport { default as CalendarHighlight } from '../lib/SchedulerPro/feature/CalendarHighlight.js';\nexport { default as CellEdit } from '../lib/SchedulerPro/feature/CellEdit.js';\nexport { default as Dependencies } from '../lib/SchedulerPro/feature/Dependencies.js';\nexport { default as DependencyEdit } from '../lib/SchedulerPro/feature/DependencyEdit.js';\nexport { default as EventBuffer } from '../lib/SchedulerPro/feature/EventBuffer.js';\nexport { default as EventResize } from '../lib/SchedulerPro/feature/EventResize.js';\nexport { default as EventSegmentDrag } from '../lib/SchedulerPro/feature/EventSegmentDrag.js';\nexport { default as EventSegmentResize } from '../lib/SchedulerPro/feature/EventSegmentResize.js';\nexport { default as EventSegments } from '../lib/SchedulerPro/feature/EventSegments.js';\nexport { default as NestedEvents } from '../lib/SchedulerPro/feature/NestedEvents.js';\nexport { default as PercentBar } from '../lib/SchedulerPro/feature/PercentBar.js';\nexport { default as ResourceNonWorkingTime } from '../lib/SchedulerPro/feature/ResourceNonWorkingTime.js';\nexport { default as TaskEdit } from '../lib/SchedulerPro/feature/TaskEdit.js';\nexport { default as TimeSpanHighlight } from '../lib/SchedulerPro/feature/TimeSpanHighlight.js';\nexport { default as Versions } from '../lib/SchedulerPro/feature/Versions.js';\n// model\nexport { default as AssignmentModel } from '../lib/SchedulerPro/model/AssignmentModel.js';\nexport { default as CalendarIntervalModel } from '../lib/SchedulerPro/model/CalendarIntervalModel.js';\nexport { default as CalendarModel } from '../lib/SchedulerPro/model/CalendarModel.js';\nexport { default as ChangeLogAction } from '../lib/SchedulerPro/model/changelog/ChangeLogAction.js';\nexport { default as ChangeLogPropertyUpdate } from '../lib/SchedulerPro/model/changelog/ChangeLogPropertyUpdate.js';\nexport { default as ChangeLogEntity } from '../lib/SchedulerPro/model/changelog/ChangeLogEntity.js';\nexport { default as ChangeLogDependencyEntity } from '../lib/SchedulerPro/model/changelog/ChangeLogDependencyEntity.js';\nexport { default as ChangeLogAssignmentEntity } from '../lib/SchedulerPro/model/changelog/ChangeLogAssignmentEntity.js';\nexport { default as ChangeLogTransactionModel } from '../lib/SchedulerPro/model/changelog/ChangeLogTransactionModel.js';\nexport { default as DependencyModel } from '../lib/SchedulerPro/model/DependencyModel.js';\nexport { default as EventModel } from '../lib/SchedulerPro/model/EventModel.js';\nexport { default as ProjectModel } from '../lib/SchedulerPro/model/ProjectModel.js';\nexport { default as ResourceModel } from '../lib/SchedulerPro/model/ResourceModel.js';\nexport { default as ResourceUtilizationModel } from '../lib/SchedulerPro/model/ResourceUtilizationModel.js';\nexport { default as EventSegmentModel } from '../lib/SchedulerPro/model/EventSegmentModel.js';\nexport { default as VersionModel } from '../lib/SchedulerPro/model/VersionModel.js';\n// model mixin\nexport { default as PercentDoneMixin } from '../lib/SchedulerPro/model/mixin/PercentDoneMixin.js';\nexport { default as ProjectChangeHandlerMixin } from '../lib/SchedulerPro/model/mixin/ProjectChangeHandlerMixin.js';\nexport { default as ProjectWebSocketHandlerMixin } from '../lib/SchedulerPro/model/mixin/ProjectWebSocketHandlerMixin.js';\n// view mixin\nexport { default as ProjectProgressMixin } from '../lib/SchedulerPro/view/mixin/ProjectProgressMixin.js';\nexport { default as SchedulerProEventRendering } from '../lib/SchedulerPro/view/mixin/SchedulerProEventRendering.js';\nexport { default as SchedulingIssueResolution } from '../lib/SchedulerPro/view/mixin/SchedulingIssueResolution.js';\n// view\nexport { default as ResourceHistogram } from '../lib/SchedulerPro/view/ResourceHistogram.js';\nexport { default as ResourceUtilization } from '../lib/SchedulerPro/view/ResourceUtilization.js';\nexport { default as SchedulerProBase } from '../lib/SchedulerPro/view/SchedulerProBase.js';\nexport { default as SchedulerPro } from '../lib/SchedulerPro/view/SchedulerPro.js';\n// widget\nexport { default as CalendarField } from '../lib/SchedulerPro/widget/CalendarField.js';\nexport { default as ConstraintTypePicker } from '../lib/SchedulerPro/widget/ConstraintTypePicker.js';\nexport { default as CycleResolutionPopup } from '../lib/SchedulerPro/widget/CycleResolutionPopup.js';\nexport { default as DependencyTypePicker } from '../lib/SchedulerPro/widget/DependencyTypePicker.js';\nexport { default as EffortField } from '../lib/SchedulerPro/widget/EffortField.js';\nexport { default as EndDateField } from '../lib/SchedulerPro/widget/EndDateField.js';\nexport { default as GanttTaskEditor } from '../lib/SchedulerPro/widget/GanttTaskEditor.js';\nexport { default as ModelCombo } from '../lib/SchedulerPro/widget/ModelCombo.js';\nexport { default as SchedulerTaskEditor } from '../lib/SchedulerPro/widget/SchedulerTaskEditor.js';\nexport { default as SchedulingDirectionPicker } from '../lib/SchedulerPro/widget/SchedulingDirectionPicker.js';\nexport { default as SchedulingIssueResolutionPopup } from '../lib/SchedulerPro/widget/SchedulingIssueResolutionPopup.js';\nexport { default as SchedulingModePicker } from '../lib/SchedulerPro/widget/SchedulingModePicker.js';\nexport { default as StartDateField } from '../lib/SchedulerPro/widget/StartDateField.js';\nexport { default as TaskEditorBase } from '../lib/SchedulerPro/widget/TaskEditorBase.js';\nexport { default as Timeline } from '../lib/SchedulerPro/widget/Timeline.js';\nexport { default as VersionGrid } from '../lib/SchedulerPro/widget/VersionGrid.js';\n// widget taskeditor\nexport { default as AdvancedTab } from '../lib/SchedulerPro/widget/taskeditor/AdvancedTab.js';\nexport { default as DependencyTab } from '../lib/SchedulerPro/widget/taskeditor/DependencyTab.js';\nexport { default as EditorTab } from '../lib/SchedulerPro/widget/taskeditor/EditorTab.js';\nexport { default as FormTab } from '../lib/SchedulerPro/widget/taskeditor/FormTab.js';\nexport { default as GeneralTab } from '../lib/SchedulerPro/widget/taskeditor/GeneralTab.js';\nexport { default as NotesTab } from '../lib/SchedulerPro/widget/taskeditor/NotesTab.js';\nexport { default as PredecessorsTab } from '../lib/SchedulerPro/widget/taskeditor/PredecessorsTab.js';\nexport { default as RecurrenceTab } from '../lib/SchedulerPro/widget/taskeditor/RecurrenceTab.js';\nexport { default as ResourcesTab } from '../lib/SchedulerPro/widget/taskeditor/ResourcesTab.js';\nexport { default as SchedulerAdvancedTab } from '../lib/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab.js';\nexport { default as SchedulerGeneralTab } from '../lib/SchedulerPro/widget/taskeditor/SchedulerGeneralTab.js';\nexport { default as SuccessorsTab } from '../lib/SchedulerPro/widget/taskeditor/SuccessorsTab.js';\n// widget taskeditor mixin\nexport { default as EventLoader } from '../lib/SchedulerPro/widget/taskeditor/mixin/EventLoader.js';\nexport { default as ReadyStatePropagator } from '../lib/SchedulerPro/widget/taskeditor/mixin/ReadyStatePropagator.js';\n\n\nimport GlobalEvents from '../lib/Core/GlobalEvents.js';\nimport BrowserHelper from '../lib/Core/helper/BrowserHelper.js';\nimport VersionHelper from '../lib/Core/helper/VersionHelper.js';\nimport Widget from '../lib/Core/widget/Widget.js';\nimport Toast from '../lib/Core/widget/Toast.js';\nimport Override from '../lib/Core/mixin/Override.js';\nimport DomHelper from '../lib/Core/helper/DomHelper.js';\nimport SchedulerProBase from '../lib/SchedulerPro/view/SchedulerProBase.js';\nimport SchedulerEventRendering from '../lib/Scheduler/view/mixin/SchedulerEventRendering.js';\nimport Dependencies from '../lib/SchedulerPro/feature/Dependencies.js';\n(() => {\n    //region Common\n    const\n        HOSTS            = [\n            'bryntum.com',\n            'cdpn.io',\n            'react-gantt.com',\n            'vue-gantt.com',\n            'vue-scheduler.com',\n            'react-scheduler.com',\n            'angular-scheduler.com',\n            'angular-calendar.com',\n            'vue-calendar.com',\n            'react-calendar.com',\n            'lmctfy.net',\n            'bryntum-dev-ed.develop.lightning.force.com'\n        ],\n        ONE_DAY          = 1000 * 60 * 60 * 24,\n        EXPIRING_CLASSES = [],\n        location = (globalThis || self).location;\n    if (!VersionHelper.isTestEnv && (HOSTS.some(host => location.host.includes(host)) || /\\/docs/.test(location.href))) {\n        return;\n    }\n    let initialized;\n    function initExpiryHelper(owner, baseClass) {\n        if (!initialized) {\n            initialized = true;\n            ExpiryHelper.construct({\n                widget : owner\n            });\n        }\n        // do not remove this line (used to distinguish trial bundles by regexp)\n        owner.__foo = 'THISISTRIAL';\n    }\n    //endregion\n    //region ExpiryHelper\n    class ExpiryHelper {\n        static construct(config) {\n            const\n                me            = this,\n                product       = 'taskboard',\n                productName   = 'TaskBoard',\n                version       = VersionHelper.getVersion(product),\n                callHomeDelay = VersionHelper.isTestEnv ? 3000 : 1000 * 60,\n                blockUrl      = BrowserHelper.queryString.blockUrl;\n            Object.assign(me, {\n                version,\n                product,\n                Product          : productName,\n                verifyUrl        : VersionHelper.isTestEnv ? blockUrl : 'https://bryntum.com/verify/',\n                blocked          : false,\n                lastVersionCheck : 0,\n                trialKey         : `b-${product}-trial-start`,\n                versionCheckKey  : `b-${product}-verify-date`\n            }, config);\n            if (!VersionHelper.isTestEnv) {\n                console.log(`Bryntum ${productName} Trial Version`);\n            }\n            me.cacheTrialStartTime();\n            if (me.isExpired) {\n                if (document.readyState === 'complete') {\n                    me.onTrialExpired();\n                }\n                else {\n                    document.addEventListener('readystatechange', () => {\n                        if (document.readyState === 'complete') {\n                            me.onTrialExpired();\n                        }\n                    });\n                }\n            }\n            // Call home to log trial usage, assuming localStorage access works reliably\n            // 1 min delay to be less easily detected\n            setTimeout(() => {\n                me.updateBlockedStatus();\n            }, callHomeDelay);\n        }\n        static cacheTrialStartTime() {\n            const\n                me         = this,\n                timeString = BrowserHelper.getLocalStorageItem(me.trialKey),\n                time       = Number(timeString);\n            if (time && !isNaN(time)) {\n                me.trialStartTime = time;\n            }\n            me.trialStartTime = me.trialStartTime || Date.now();\n            // First trial access, or no localstorage (no local storage meaning our expiration mechanism won't work. Only remote blocking will end the trial)\n            BrowserHelper.setLocalStorageItem(me.trialKey, me.trialStartTime);\n        }\n        static get isExpired() {\n            return this.blocked || (Date.now() - this.trialStartTime > ONE_DAY * 45) || window.bryntum?.[this.product]?.expired;\n        }\n        static updateBlockedStatus() {\n            const\n                me                  = this,\n                saveVersionCheckKey = () => BrowserHelper.setLocalStorageItem(me.versionCheckKey, Date.now());\n            me.lastVersionCheck = me.lastVersionCheck || BrowserHelper.getLocalStorageItem(me.versionCheckKey) || 0;\n            // Max 1 version check per session / day\n            if (me.lastVersionCheck && Date.now() - me.lastVersionCheck < ONE_DAY) {\n                return;\n            }\n            if (me.verifyUrl) {\n                const\n                    url    = encodeURIComponent(location.href),\n                    logUrl = `${me.verifyUrl}?id=${window.bryntum.license}&url=${url}`,\n                    img    = new Image();\n                img.onload = () => {\n                    // 2x2 image means trial is blocked due to violation\n                    if (img.naturalWidth === 2) {\n                        me.blockTrial();\n                    }\n                    else {\n                        // Just in case\n                        saveVersionCheckKey();\n                    }\n                };\n                img.onerror = () => {\n                    saveVersionCheckKey();\n                };\n                img.src = logUrl;\n            }\n            else {\n                saveVersionCheckKey();\n            }\n        }\n        static onTrialExpired() {\n            const rootEl = this.widget.rootElement;\n            if (!this.expirationShown) {\n                this.expirationShown = true;\n                if (!VersionHelper.isTestEnv) {\n                    console.warn(`Bryntum ${this.Product} trial version expired. Purchase a license at https://bryntum.com/store or contact us at https://bryntum.com/contact/ for licensing options.`);\n                }\n                rootEl.floatRoot && Toast.show({\n                    html        : `Psst! Your Bryntum ${this.Product} trial has expired. Please see <a href=\"https://bryntum.com/store\">our store</a> for licensing options`,\n                    timeout     : 20000,\n                    rootElement : rootEl\n                });\n            }\n            DomHelper.removeEachSelector(rootEl, '.b-sch-dependency');\n            DomHelper.forEachSelector(rootEl, '.b-container', element => {\n                const widget = Widget.fromElement(element, 'widget');\n                if (EXPIRING_CLASSES.some(cls => widget instanceof cls)) {\n                    this.maskExpiredWidget(widget);\n                }\n            });\n        }\n        static blockTrial() {\n            this.blocked = true;\n            // Get rid of version check timestamp\n            BrowserHelper.removeLocalStorageItem(this.versionCheckKey);\n            // To force expired state: Set a fake early trial timestamp\n            BrowserHelper.setLocalStorageItem(this.trialKey, 1);\n            this.onTrialExpired();\n        }\n        static maskExpiredWidget(widget) {\n            widget.mask({\n                text  : '<h3 style=\"margin:0\">Trial expired, <a href=\"https://bryntum.com/store\" style=\"margin:0 3px; color:inherit\">click here</a> to buy a license.</h3>',\n                icon  : 'b-fa b-fa-frown',\n                type  : 'trial',\n                cover : 'target'\n            });\n        }\n        static setWaterMark(element, {\n            darkColor = 'rgba(255, 255, 255, 0.03)',\n            lightColor = 'rgba(240, 240, 240, 0.54)'\n        } = {}) {\n            // Used for thumbnails\n            if (BrowserHelper.queryString.thumb != null) {\n                return;\n            }\n            const\n                color     = DomHelper.themeInfo?.name?.toLowerCase().endsWith('-dark') ? darkColor : lightColor,\n                svgString = `\n                   <svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"100%\" height=\"100%\" style=\"font-family:sans-serif;font-weight:900;fill:${color}\">\n                    <defs>\n                        <pattern id=\"company\" patternUnits=\"userSpaceOnUse\" width=\"400\" height=\"200\">\n                            <text y=\"30\" font-size=\"40\" id=\"name\">Bryntum</text>\n                            <text y=\"120\" x=\"200\" font-size=\"24\" id=\"trial\">Trial Version</text>\n                        </pattern>\n                        <pattern id=\"pattern\" xlink:href=\"#company\" patternTransform=\"rotate(-45)\">\n                            <use xlink:href=\"#name\" /><use xlink:href=\"#trial\" />\n                        </pattern>\n                    </defs>\n                    <rect width=\"100%\" height=\"100%\" fill=\"url(#pattern)\" />\n                </svg>`;\n            element.style.backgroundImage = `url('data:image/svg+xml;base64,${window.btoa(svgString)}')`;\n        };\n    }\n    //endregion\n    //region Common override\n    const applyBaseOverride = baseClass => {\n        EXPIRING_CLASSES.push(baseClass);\n        Override.apply(class {\n            static get target() {\n                return {\n                    class : baseClass\n                };\n            }\n            onPaintOverride() {\n                const\n                    me            = this,\n                    setWatermarks = () => {\n                        const targets = me.subGrids ? Object.values(me.subGrids) : [me];\n                        for (const target of targets) {\n                            if (target.element) {\n                                ExpiryHelper.setWaterMark(target.element);\n                            }\n                        }\n                    };\n                initExpiryHelper(me, baseClass);\n                setWatermarks();\n                // React to theme changes\n                GlobalEvents.on('theme', () => {\n                    setWatermarks();\n                });\n                if (ExpiryHelper.isExpired) {\n                    ExpiryHelper.maskExpiredWidget(me);\n                }\n            }\n        });\n    };\n    //endregion\n    if (typeof SchedulerProBase !== 'undefined') {\n        applyBaseOverride(SchedulerProBase);\n        Override.apply(class {\n            static get target() {\n                return {\n                    class : SchedulerEventRendering\n                };\n            }\n            getEventsToRender() {\n                if (ExpiryHelper.isExpired && this.isSchedulerPro) {\n                    return [];\n                }\n                else {\n                    return this._overridden.getEventsToRender.apply(this, arguments);\n                }\n            }\n        });\n    }\n})();\n(() => {\n    // do not load analytics code for specific domains\n    const ignoreDomainRe = /(.force.com|.lightning.com|.salesforce.com|lmctfy.net|qa.bryntum.com|qa2.bryntum.com)/;\n    // document location might be null in firefox in salesforce\n    if (!document.location || ignoreDomainRe.test(document.location.href) || window.top !== window) {\n        return;\n    }\n    let id;\n    const websiteUrls = [\n        'bryntum.com',\n        'cdpn.io'\n    ];\n    const\n        products   = ['calendar', 'grid', 'gantt', 'scheduler', 'schedulerpro', 'taskboard'],\n        frameworks = ['angular', 'react', 'vue', 'ionic'];\n    websiteUrls.splice(0, 0, ...products.map(prod => frameworks.map(framework => `${framework}-${prod}`)).concat('bryntum.com').flat());\n    if (document.location.host.match(websiteUrls.join('|'))) {\n        id = 'G-1VY6776VJP';\n    }\n    else {\n        id = 'G-H465KZDH8S';\n    }\n    const newScript = document.createElement('script');\n    newScript.onload = function() {\n        window.dataLayer = window.dataLayer || [];\n        function gtag() {\n            window.dataLayer.push(arguments);\n        }\n        gtag('js', new Date());\n        gtag('config', id);\n    };\n    document.head.appendChild(newScript);\n    newScript.src = 'https://www.googletagmanager.com/gtag/js?id=' + id;\n})();\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBA,IAAqB,yBAArB,cAAoD,OAAO,MAAM,4BAAoB,EAAE;AAAA;AAAA,EAEnF,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,WAAW,OAAO;AACd,WAAO;AAAA,EACX;AAAA,EACA,WAAW,WAAW;AAClB,WAAO;AAAA,MACH,OAAS;AAAA,MACT,MAAS;AAAA,MACT,QAAS;AAAA,QACL,MAAe,cAAc;AAAA,QAC7B,WAAe;AAAA,QACf,cAAe;AAAA,MACnB;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA,EAGA,gBAAgB,SAAS;AACrB,QAAI,SAAS;AAET,WAAK,kBAAkB,QAAQ;AAC/B,WAAK,OAAO,QAAQ,QAAQ;AAAA,IAChC;AAAA,EACJ;AAAA,EACA,sBAAsB,eAAe;AACjC,UAAM,sBAAsB,aAAa;AACzC,QAAI,eAAe;AACf,oBAAc,IAAI;AAAA,QACd,MAAU;AAAA,QACV,QAAU;AAAA,QACV,SAAU;AAAA,MACd,CAAC;AAAA,IACL;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAIA,iBAAiB,EAAE,QAAQ,QAAQ,GAAG;AA7D1C;AA8DQ,UAAM,SAAS,QAAQ,KAAK,KAAK;AACjC,QAAI,QAAQ;AAER,UAAI,OAAO,OAAO,aAAa,cAAY,YAAO,UAAP,mBAAc,QAAO,OAAO,UAAU;AAC7E;AAAA,MACJ;AACA,WAAK,YAAY,MAAM;AAAA,IAC3B;AAAA,EACJ;AAAA;AAAA;AAAA,EAGA,SAAS,EAAE,MAAM,GAAG;AAChB,QAAI,+BAAO,IAAI;AACX,YAAM,SAAS,KAAK,OAAO,MAAM,QAAQ,MAAM,EAAE;AACjD,cAAO,iCAAQ,SAAS,KAAK,OAAO,kBAAiB;AAAA,IACzD,OACK;AACD,aAAO;AAAA,IACX;AAAA,EACJ;AAAA;AAEJ;AACA,YAAY,mBAAmB,sBAAsB;AACrD,uBAAuB,SAAS;;;ACYhC,IAAqB,aAArB,cAAwC,kBAAkB,OAAO,QAAQ,EAAE;AAAA,EACvf,WAAO;AAAA,EACX;AAAA,EAEA,WAAW,SAAS;AAChkPH,EAAE,MAAO,kBAAkB,MAAO,WAAW,cAAe,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAeA;AAAA,QACI,MAAY;AAAA,QACZ,SAAY,WAAS,QAAQ,IAAI,SAAS,KAAK,IAAI;AAAA,QACnD,WAAY,WAAS,EAAC,+BAAO,aAAY,OAAO;AAAA,MACpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAeA;AAAA,QACI,MAAY;AAAA,QACZ,SAAY,WAAS,QAAQ,IAAI,SAAS,KAAK,IAAI;AAAA,QACnD,WAAY,WAAS,EAAC,+BAAO,aAAY,OAAO;AAAA,MACpD;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,8BAA8B;AAC1B,WAAO;AAAA,EACX;AAAA;AAAA;AAAA,EAGA,eAAe,MAAM,UAAU,UAAU,MAAM;AAC3C,eAAW,IAAI,SAAS,QAAQ;AAChC,WAAO,IAAI,KAAK,KAAK,QAAQ,KAAK,UAAU,IAAI,MAAM,SAAS,YAAY;AAAA,EAC/E;AAAA,EACA,IAAI,YAAY;AA/jBpB;AAgkBQ,QAAI;AACJ,QAAI,KAAK,cAAc;AACnB,WAAK,KAAK,IAAI,WAAW;AAAA,IAC7B,OACK;AAED,YAAK,UAAK,eAAL,YAAmB,MAAM;AAAA,IAClC;AACA,QAAI,KAAK,QAAQ;AACb,WAAK,KAAK,YAAY,mBAAmB,EAAE;AAAA,IAC/C;AACA,WAAO;AAAA,EACX;AAAA,EACA,IAAI,UAAU,WAAW;AACrB,UAAM,KAAK;AACX,QAAI,GAAG,UAAU;AACb,SAAG,aAAa;AAChB,SAAG,IAAI,EAAE,UAAU,CAAC;AAAA,IACxB,OACK;AACD,YAAM,YAAY;AAClB,UAAI,GAAG,UAAU;AACb,WAAG,gBAAgB;AACnB,WAAG,cAAgB;AAAA,MACvB;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,IAAI,UAAU;AA3lBlB;AA4lBQ,QAAI;AACJ,QAAI,KAAK,cAAc;AACnB,WAAK,KAAK,IAAI,SAAS;AAAA,IAC3B,OACK;AAED,YAAK,UAAK,aAAL,YAAiB,MAAM;AAAA,IAChC;AACA,QAAI,KAAK,QAAQ;AACb,WAAK,KAAK,YAAY,iBAAiB,EAAE;AAAA,IAC7C;AACA,WAAO;AAAA,EACX;AAAA,EACA,IAAI,QAAQ,SAAS;AACjB,UAAM,KAAK;AACX,QAAI,GAAG,UAAU;AACb,SAAG,WAAW;AACd,SAAG,IAAI,EAAE,QAAQ,CAAC;AAAA,IACtB,OACK;AACD,YAAM,UAAU;AAChB,UAAI,GAAG,WAAW;AACd,WAAG,gBAAgB;AACnB,WAAG,cAAgB;AAAA,MACvB;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,IAAI,aAAa;AACb,WAAO,IAAI,SAAS;AAAA,MAChB,MAAY,KAAK;AAAA,MACjB,WAAY,KAAK;AAAA,IACrB,CAAC;AAAA,EACL;AAAA,EACA,IAAI,WAAW,QAAQ;AACnB,SAAK,UAAU,OAAO,WAAW,OAAO,IAAI;AAAA,EAChD;AAAA;AAAA;AAAA,EAGA,IAAI,gBAAgB;AAChB,UACI,KAA0B,MAC1B,EAAE,UAAU,UAAU,IAAI,IAC1B,gBAA0B,GAAG;AACjC,QAAI;AACJ,QAAI,eAAe;AACf,eAAS;AAAA,IACb,OACK;AACD,UAAI,UAAU;AACV,iBAAoB,GAAG,eAAe,WAAW,UAAU,KAAK;AAChE,WAAG,iBAAiB;AAAA,MACxB,OACK;AACD,iBAAS;AAAA,MACb;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,IAAI,cAAc,OAAO;AACrB,SAAK,iBAAiB;AAAA,EAC1B;AAAA,EACA,IAAI,cAAc;AACd,UACI,KAAyB,MACzB,EAAE,WAAW,QAAQ,IAAI,IACzB,cAAyB,GAAG;AAChC,QAAI;AACJ,QAAI,aAAa;AACb,eAAS;AAAA,IACb,OACK;AACD,UAAI,WAAW;AACX,iBAAkB,GAAG,eAAe,SAAS,WAAW,IAAI;AAC5D,WAAG,eAAe;AAAA,MACtB,OACK;AACD,iBAAS;AAAA,MACb;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,IAAI,YAAY,OAAO;AACnB,SAAK,eAAe;AAAA,EACxB;AAAA,EACA,IAAI,MAAM;AACN,UAAM,WAAW,OAAO,SAAS;AACjC,QAAI,SAAS,cAAe,YAAY,cAAc,MAAO;AACzD,WAAK,gBAAgB;AAAA,IACzB;AACA,QAAI,SAAS,eAAgB,YAAY,eAAe,MAAO;AAC3D,WAAK,cAAc;AAAA,IACvB;AACA,WAAO,MAAM,IAAI,GAAG,SAAS;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,iBAAiB;AACjB,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,eAAe;AACf,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBA,WAAW,WAAW;AAClB,YAAQ,WAAW;AAAA,MAEf,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACD,eAAO;AAAA,MAEX,KAAK;AAAA,MACL,KAAK;AACD,eAAO,KAAK;AAAA,MAEhB,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACD,eAAO,KAAK,UAAU,KAAK;AAAA,IACnC;AACA,WAAO,MAAM,WAAW,SAAS;AAAA,EACrC;AAAA;AAAA,EAEA,wBAAwB,aAAa;AArvBzC;AAsvBQ,UACI,QAAQ,OAAO,gBAAgB,WAAW,KAAK,mBAAmB,WAAW,IAAI,aACjF,QAAQ,+BAAO,SAAQ;AAC3B,QAAI,SAAS,uBAAqB,UAAK,WAAL,mBAAa,SAAQ;AACnD;AAAA,IACJ;AACA,WAAO,MAAM,wBAAwB,WAAW;AAAA,EACpD;AAAA;AAAA,EAEA,IAAI,MAAM;AA/vBd;AAgwBQ,YAAO,gBAAK,mBAAL,mBAAqB,QAArB,YAA4B,MAAM;AAAA,EAC7C;AAAA,EACA,IAAI,IAAI,KAAK;AACT,UAAM,MAAM;AAAA,EAChB;AAAA;AAAA,EAEA,IAAI,WAAW;AACX,UACI,EAAE,QAAQ,IAAI,MACd,WAAc,MAAM;AAExB,SAAI,mCAAS,0BAAyB,CAAC,UAAU;AAC7C,aAAO,QAAQ,gBAAgB,QAAQ,SAAS,SAAS,IAAI;AAAA,IACjE;AACA,WAAO;AAAA,EACX;AAAA,EACA,IAAI,SAAS,UAAU;AACnB,UAAM,WAAW;AAAA,EACrB;AAAA;AAAA,EAEA,iBAAiB,SAAS;AACtB,UACI,EAAE,SAAS,IAAI,MACf,SAAe,MAAM,iBAAiB,OAAO;AAEjD,QAAI,UAAU,UAAU;AACpB,aAAO,WAAW,SAAS,IAAI,aAAW,QAAQ,iBAAiB,OAAO,CAAC;AAAA,IAC/E;AACA,WAAO;AAAA,EACX;AAAA,EACA,SAAS,QAAQ,eAAe,qBAAqB;AACjD,UACI,KAAK,MACL,EAAE,MAAO,EAAE,aAAa,EAAE,IAAI;AAClC,UAAM,SAAS,QAAQ,eAAe,mBAAmB;AAGzD,QAAI,cAAc;AACd,UAAI,aAAa,cAAc;AAC3B,eAAO,GAAG;AAMV,YAAI,GAAG,WAAW;AACd,aAAG,cAAc;AAAA,QACrB;AAAA,MACJ;AACA,UAAI,eAAe,cAAc;AAC7B,eAAO,GAAG;AACV,YAAI,GAAG,UAAU;AACb,aAAG,gBAAgB;AAAA,QACvB;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ;AAtiBI,cAlLiB,YAkLV,mBAAkB;AAuiB7B,WAAW,SAAS;;;ACtwBpB,IAAqB,aAArB,cAAwC,sBAAc,6BAAqB,uBAAe,sBAAc,wBAAgB,sBAAsB,OAAO,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;AAAA,EAEjK,WAAW,gBAAgB;AACvB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQH,YAAa;AAAA,IACjB;AAAA,EACJ;AAAA;AAEJ;AAdI,cADiB,YACV,SAAQ;AAenB,WAAW,SAAS;;;AC7CpB,IAAqB,2BAArB,cAAsD,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA8BxD,UAAU,SAAS,MAAM;AACrB,SAAK,iBAAiB,oBAAI,IAAI;AAE9B,QAAI,KAAK,QAAQ;AACb,aAAO,OAAO,MAAM,KAAK,gBAAgB,KAAK,MAAM,CAAC;AAAA,IACzD;AACA,UAAM,UAAU,MAAM,GAAG,IAAI;AAC7B,QAAI,KAAK,UAAU,CAAC,KAAK,iBAAiB;AACtC,WAAK,aAAa;AAAA,IACtB;AAAA,EACJ;AAAA,EACA,gBAAgB,QAAQ;AAhE5B;AAiEQ,UAAM,SAAS,CAAC;AAChB,QAAI,OAAO,iBAAiB;AACxB,aAAO,OAAO,OAAO;AAAA,IACzB,WACS,OAAO,mBAAmB;AAC/B,aAAO,QAAU,YAAO,UAAP,mBAAc;AAC/B,aAAO,WAAU,YAAO,UAAP,mBAAc;AAAA,IACnC;AACA,WAAO;AAAA,EACX;AAAA,EACA,eAAe;AA3EnB;AA4EQ,UACI,KAAe,MACf,EAAE,SAAS,IAAI,IACf,WAAe,IAAI,IAAI,QAAQ,GAC/B,QAAe,CAAC;AACpB,SAAI,QAAG,WAAH,mBAAW,iBAAiB;AAC5B,YAAM,EAAE,SAAS,IAAI,GAAG;AACxB,iBAAW,cAAc,UAAU;AAC/B,YAAI,CAAC,GAAG,eAAe,IAAI,UAAU,GAAG;AACpC,gBAAM,KAAK,GAAG,YAAY,IAAI,EAAE,QAAS,WAAW,CAAC,CAAC;AAAA,QAC1D,OACK;AACD,mBAAS,OAAO,GAAG,eAAe,IAAI,UAAU,CAAC;AAAA,QACrD;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,SAAS,MAAM;AACf,WAAK,YAAY,CAAC,GAAG,QAAQ,CAAC;AAAA,IAClC;AACA,QAAI,MAAM,QAAQ;AACd,WAAK,YAAY,KAAK;AAAA,IAC1B;AAAA,EACJ;AAAA,EACA,iBAAiB,SAAS;AACtB,YAAQ,QAAQ,YAAU,KAAK,eAAe,OAAO,OAAO,MAAM,CAAC;AAAA,EACvE;AAAA,EACA,eAAe,MAAM;AAtGzB;AAuGQ,QAAI,QAAQ,MAAM,YAAY,GAAG,IAAI;AACrC,QAAI,OAAO;AACP,YAAM,EAAE,OAAO,IAAI;AACnB,UAAI,CAAC,MAAM,QAAQ,KAAK,GAAG;AACvB,gBAAQ,CAAC,KAAK;AAAA,MAClB;AACA,WAAI,UAAK,WAAL,mBAAa,iBAAiB;AAC9B,mBAAW,UAAU,OAAO;AACxB,cAAI,OAAO,UAAU,CAAC,KAAK,eAAe,IAAI,OAAO,MAAM,GAAG;AAC1D,iBAAK,eAAe,IAAI,OAAO,QAAQ,MAAM;AAAA,UACjD;AAAA,QACJ;AAAA,MACJ;AAGA,UAAI,iCAAQ,QAAQ;AAChB,mBAAW,SAAS,QAAQ;AACxB,qBAAW,UAAU,OAAO;AACxB,mBAAO,SAAS,UAAQ,KAAK,UAAU,MAAM,iBAAiB,KAAK,QAAQ,IAAI,CAAC;AAAA,UACpF;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,iBAAiB,QAAQ;AACrB,WAAO,KAAK,eAAe,IAAI,MAAM;AAAA,EACzC;AACJ;AA3GI,cADiB,0BACV,SAAQ;AACf,cAFiB,0BAEV,UAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA;AACJ;AA2FJ,yBAAyB,2BAA2B;AACpD,yBAAyB,iBAAiB;AAC1C,yBAAyB,SAAS;;;ACtHlC,IAAqB,2BAArB,cAAsD,gCAAgC,OAAO,SAAS,EAAE;AAAA;AAAA,EAYpG,WAAW,aAAa;AACpB,WAAO;AAAA,MACH,gBAAiB,oBAAI,IAAI;AAAA,IAC7B;AAAA,EACJ;AAAA,EACA,cAAc,SAAS;AACnB,SAAK,iBAAiB,mCAAS,aAAa;AAC5C,SAAK,mBAAmB,mCAAS,eAAe;AAChD,SAAK,cAAc,mCAAS,UAAU;AACtC,SAAK,qBAAqB;AAAA,EAC9B;AAAA,EACA,iBAAiB,OAAO;AACpB,SAAK,gBAAgB,eAAe;AACpC,mCAAO,IAAI;AAAA,MACP,MAAU;AAAA,MACV,QAAU,KAAK;AAAA,MACf,SAAU;AAAA,IACd;AAAA,EACJ;AAAA,EACA,cAAc,OAAO;AACjB,SAAK,gBAAgB,YAAY;AACjC,mCAAO,IAAI;AAAA,MACP,MAAU;AAAA,MACV,QAAU,KAAK;AAAA,MACf,SAAU;AAAA,IACd;AAAA,EACJ;AAAA,EACA,mBAAmB,OAAO;AACtB,SAAK,gBAAgB,iBAAiB;AACtC,mCAAO,IAAI;AAAA,MACP,MAAU;AAAA,MACV,QAAU,KAAK;AAAA,MACf,SAAU,KAAK;AAAA,MACf,KAAU,KAAK;AAAA,MACf,QAAU,KAAK;AAAA,MACf,QAAU,KAAK;AAAA,MACf,SAAU;AAAA,IACd;AAAA,EACJ;AAAA,EACA,2BAA2B,OAAO;AAE9B,QAAI,MAAM,UAAU,MAAM,WAAW,UAAU;AAC3C;AAAA,IACJ;AACA,SAAK,qBAAqB;AAAA,EAC9B;AAAA,EACA,sBAAsB;AAClB,SAAK,QAAQ,qBAAmB,gBAAgB,aAAa,CAAC;AAAA,EAClE;AAAA,EACA,qBAAqB,OAAO;AACxB,QAAI,MAAM,WAAW,SAAS;AAC1B,WAAK,QAAQ,qBAAmB,gBAAgB,aAAa,CAAC;AAAA,IAClE;AAAA,EACJ;AAAA,EACA,iBAAiB,EAAE,QAAQ,GAAG;AAC1B,YAAQ,QAAQ,YAAU;AACtB,YAAM,kBAAkB,KAAK,iBAAiB,iCAAQ,QAAQ;AAC9D,yDAAiB;AAAA,IACrB,CAAC;AAAA,EACL;AAAA,EACA,mBAAmB,EAAE,QAAQ,QAAQ,GAAG;AAEpC,QAAI,cAAc,SAAS;AACvB,YAEI,oBAAoB,KAAK,iBAAiB,MAAM,GAEhD,qBAAqB,KAAK,iBAAiB,iCAAQ,QAAQ;AAE/D,UAAI,qBAAqB,oBAAoB;AACzC,2BAAmB,YAAY,iBAAiB;AAAA,MACpD;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,oBAAoB,EAAE,QAAQ,GAAG;AAC7B,SAAK,OAAO,QAAQ,IAAI,YAAU,KAAK,iBAAiB,MAAM,CAAC,CAAC;AAAA,EACpE;AAAA,EACA,cAAc,EAAE,QAAQ,QAAQ,GAAG;AAC/B,QAAI,UAAU,SAAS;AACnB,iBAAW,cAAc,OAAO,UAAU;AACtC,cAAM,oBAAoB,KAAK,iBAAiB,UAAU;AAC1D,0BAAkB,IAAI,QAAQ,OAAO,IAAI;AAAA,MAC7C;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,uBAAuB;AAlH3B;AAmHQ,UAAM,QAAQ,CAAC;AACf,eAAK,aAAL,mBAAe,cAAc,QAAQ,cAAY;AAC7C,UAAI,CAAC,SAAS,cAAc;AACxB,cAAM,KAAK,KAAK,WAAW,IAAI,EAAE,QAAS,SAAS,CAAC,CAAC;AAAA,MACzD;AAAA,IACJ;AACA,SAAK,UAAU;AACf,SAAK,IAAI,KAAK;AAMd,SAAK,QAAQ,iBAAiB;AAAA,EAClC;AAAA,EACA,SAAS;AACL,UAAM,UAAU,MAAM,OAAO,GAAG,SAAS;AAEzC,uCAAS,QAAQ,YAAU;AACvB,WAAK,eAAe,OAAO,OAAO,MAAM;AAAA,IAC5C;AACA,WAAO;AAAA,EACX;AAAA,EACA,YAAY;AACR,UAAM,UAAU,GAAG,SAAS;AAC5B,SAAK,eAAe,MAAM;AAAA,EAC9B;AAAA,EACA,iBAAiB,QAAQ;AACrB,WAAO,KAAK,eAAe,IAAI,MAAM;AAAA,EACzC;AAAA,EACA,iBAAiB,QAAQ,OAAO;AAC5B,WAAO,KAAK,eAAe,IAAI,QAAQ,KAAK;AAAA,EAChD;AACJ;AAlII,cADiB,0BACV,SAAQ;AACf,cAFiB,0BAEV,gBAAe;AAAA,EAClB,YAAa;AAAA;AAAA;AAAA;AAAA;AAAA,EAKb,SAAU;AAAA,EACV,MAAO;AACX;AA0HJ,yBAAyB,SAAS;;;ACpJlC,IAAM,SAAS,CAAC,GAAG,MAAM;AACrB,MAAI,IAAI,GAAG;AACP,WAAO;AAAA,EACX,WACS,IAAI,GAAG;AACZ,WAAO;AAAA,EACX,OACK;AACD,WAAO;AAAA,EACX;AACJ;AAqIA,IAAO,8BAAQ,YAAU,MAAM,6BAA6B,UAAU,MAAM;AAAA,EACxE,WAAW,eAAe;AACtB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA,MAKH,MAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA0CP,SAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASV,SAAU;AAAA,MACV,gBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA8CjB,UAAW;AAAA,IACf;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAwBA,IAAI,UAAU;AACV,WAAO,QAAQ,KAAK,OAAO;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,cAAc,YAAY;AA3R9B;AA4RQ,QAAI;AACJ,QAAI,WAAW,SAAS,MAAM;AAC1B,eAAS,WAAW;AAAA,IACxB,OACK;AACD,YACI,EAAE,SAAS,SAAS,iBAAiB,KAAK,IAAI,MAC9C,EAAE,YAAY,IAAgC;AAClD,UAAI,OAAO,YAAY,YAAY;AAC/B,iBAAS,QAAQ,KAAK,gBAAgB,WAAW;AAAA,MACrD,OACK;AACD,iBAAS,YAAY,SAAS,OAAO;AACrC,YAAI,SAAS;AAET,oBAAS,aAAQ,MAAM,MAAd,YAAmB;AAAA,QAChC;AAAA,MACJ;AACA,iBAAW,QAAQ;AAAA,IACvB;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,eAAe,QAAQ;AAEnB,QAAI,KAAK,SAAS;AACd,YAAM,SAAS,oBAAI,IAAI;AACvB,aAAO,KAAK,CAAC,GAAG,MAAM;AAClB,cACI,SAAS,KAAK,cAAc,CAAC,GAC7B,SAAS,KAAK,cAAc,CAAC;AACjC,eAAO,IAAI,MAAM;AACjB,eAAO,IAAI,MAAM;AACjB,eAAO,OAAO,QAAQ,MAAM;AAAA,MAChC,CAAC;AACD,aAAO,MAAM,KAAK,MAAM,EAAE,KAAK,MAAM;AAAA,IACzC,OACK;AACD,aAAO,CAAC;AAAA,IACZ;AAAA,EACJ;AACJ;;;ACzTA,IAAqB,2BAArB,cAAsD,sBAAsB,MAAM,2BAAmB,EAAE;AAAA,EACnG,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,oBAAoB,QAAQ,YAAY,OAAO;AAC3C,SAAK,eAAe,MAAM;AAC1B,WAAO,MAAM,oBAAoB,QAAQ,SAAS;AAAA,EACtD;AACJ;AACA,yBAAyB,SAAS;;;ACflC,IAAqB,0BAArB,cAAqD,qBAAqB,MAAM,2BAAmB,EAAE;AAAA,EACjG,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAIA,oBAAoB,QAAQ;AACxB,UACI,SAAS,KAAK,eAAe,MAAM,GAEnC,aAAa,OAAO,UAAU;AAClC,UAAM,SAAS,KAAK,kBAAkB,QAAQ,CAAC,OAAO,GAAG,MAAM,aAAa;AACxE,YACI,OAAoB,WAAW,YAC/B,aAAoB,eAAe,IAAI,IAAI,OAAO,QAAQ,MAAM,KAAK,GACrE,oBAAoB,aAAa;AAErC,YAAM,SAAS;AACf,YAAM,MAAS,oBAAoB,KAAK,QAAQ,aAAa,IAAI;AAGjE,YAAM,eAAe;AACrB,YAAM,YAAY,KAAK,QAAQ,IAAI;AAAA,IACvC,CAAC;AACD,WAAO,QAAQ,WAAS;AACpB,aAAO;AAAA,QACH;AAAA,QACA,KAAK,uBAAuB;AAAA,UACxB,KAAK,+BAA+B;AAAA,UACpC,MAAM;AAAA,UACN,MAAM;AAAA,UACN,MAAM;AAAA,UACN,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,IACJ,CAAC;AACD,WAAO;AAAA,EACX;AACJ;AACA,wBAAwB,SAAS;;;AC/CjC,IAAI,UAAU;AACd,IAAM,yBAAN,cAAqC,uBAAuB;AAAA,EACxD,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA,EAGA,OAAO,aAAa;AAChB,WAAO,EAAE;AAAA,EACb;AACJ;AALI,cAJE,wBAIK,eAAc;AAkCzB,IAAqB,oBAArB,cAA+C,uBAAuB;AAAA;AAAA,EAElE,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,WAAW,eAAe;AACtB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQH,UAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOX,mBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAwBpB,2BAA4B;AAAA,MAC5B,UAA8B;AAAA,MAC9B,6BAA8B;AAAA,MAC9B,SAA8B;AAAA,IAClC;AAAA,EACJ;AAAA,EACA,WAAW,eAAe;AACtB,UAAM,SAAU,MAAM;AACtB,WAAO,SAAS;AAAA,MACZ;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,iBAAiB;AACb,UAAM,eAAe;AACrB,SAAK,OAAO,IAAI;AAAA,MACZ,gBAAmB;AAAA,MACnB,gBAAmB;AAAA,MACnB,kBAAmB;AAAA,MACnB,gBAAmB;AAAA,MACnB,iBAAmB;AAAA,MACnB,iBAAmB;AAAA,MACnB,SAAmB;AAAA,IACvB,CAAC;AAAA,EACL;AAAA;AAAA,EAEA,kBAAkB,cAAc,iBAAiB;AAC7C,mBAAe,YAAY,QAAQ,YAAY;AAC/C,sBAAkB,YAAY,QAAQ,eAAe;AACrD,QAAI,KAAK,aAAa,SAAS;AAC3B,WAAK,wBAAwB,cAAc,eAAe;AAAA,IAC9D,OACK;AACD,WAAK,2BAA2B,eAAe;AAAA,IACnD;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,wBAAwB,cAAc,iBAAiB,gBAAgB,MAAM;AAzIjF;AA0IQ,UACI,KAAyB,MACzB,EAAE,OAAO,IAAgB,IACzB,EAAE,WAAW,QAAQ,IAAI;AAC7B,QAAI,GAAG,UAAU;AACb;AAAA,IACJ;AACA,QAAI,eAAe;AACf,SAAG,qBAAqB;AAAA,IAC5B;AACA,mBAAe,YAAY,QAAQ,YAAY;AAC/C,QAAI,CAAC,iBAAiB;AAClB,wBAAkB,aAAa,QAAQ,WAAS,MAAM,gBAAgB;AAAA,IAC1E;AACA,OAAG,YAAY,oBAAI,IAAI;AACvB,sBAAkB,YAAY,QAAQ,eAAe;AACrD,iBAAa,QAAQ,iBAAe;AA1J5C,UAAAA;AA2JY,UAAI,CAAC,YAAY,UAAU;AACvB;AAAA,MACJ;AACA,YAAM,aAAYA,MAAA,YAAY,aAAZ,gBAAAA,IACZ,qBAAqB,WAAW,SACjC,IAAI,cAAY,IAAI,uBAAuB,QAAQ;AACxD,UAAI,WAAW;AACX,mBAAW,kBAAkB,iBAAiB;AAC1C,aAAG,UAAU,IAAI,gBAAgB,SAAS;AAC1C,iBAAO,mBAAmB,yBAAyB,gBAAgB,MAAM,KAAK;AAAA,QAClF;AACA,YAAI,gBAAgB,SAAS,GAAG;AAC5B,iBAAO,mBAAmB,aAAa;AAAA,QAC3C;AAAA,MACJ;AAAA,IACJ,CAAC;AACD,iBAAO,eAAP,gCAAoB,WAAS,MAAM,wBAAwB,cAAc,iBAAiB,aAAa;AAAA,EAC3G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,2BAA2B,iBAAiB,gBAAgB,MAAM;AAnLtE;AAoLQ,UACI,KAA6C,MAC7C,EAAE,WAAW,SAAS,mBAAmB,IAAI,GAAG;AACpD,QAAI,GAAG,UAAU;AACb;AAAA,IACJ;AACA,QAAI,eAAe;AACf,SAAG,qBAAqB;AAAA,IAC5B;AAEA,OAAG,YAAY,oBAAI,IAAI;AACvB,eAAW,kBAAkB,iBAAiB;AAC1C,YAAM,aAAY,oBAAe,aAAf,mBACZ,qBAAqB,WAAW,SACjC,IAAI,cAAY,IAAI,uBAAuB,QAAQ;AACxD,UAAI,WAAW;AACX,WAAG,UAAU,IAAI,gBAAgB,SAAS;AAC1C,2BAAmB,yBAAyB,gBAAgB,MAAM,KAAK;AAAA,MAC3E;AAAA,IACJ;AACA,QAAI,gBAAgB,SAAS,GAAG;AAC5B,yBAAmB,aAAa;AAAA,IACpC;AACA,mBAAG,QAAO,eAAV,4BAAuB,WAAS,MAAM,2BAA2B,iBAAiB,aAAa;AAAA,EACnG;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,uBAAuB;AAjN3B;AAkNQ,UAAM,KAAK;AACX,QAAI,CAAC,GAAG,WAAW;AAEf;AAAA,IACJ;AACA,UACI,EAAE,mBAAmB,IAAI,GAAG,QAC5B,YAAyB,GAAG,UAAU,KAAK;AAC/C,OAAG,YAAY;AACf,eAAW,YAAY,WAAW;AAC9B,yBAAmB,yBAAyB,UAAU,MAAM,KAAK;AAAA,IACrE;AACA,uBAAmB,aAAa;AAChC,mBAAG,QAAO,eAAV,4BAAuB,WAAS,MAAM,qBAAqB;AAAA,EAC/D;AAAA;AAAA;AAAA,EAGA,iBAAiB,EAAE,QAAQ,GAAG;AAnOlC;AAoOQ,QAAI,KAAK,UAAU;AACf;AAAA,IACJ;AACA,UACI,KAAmB,MACnB,EAAE,OAAO,IAAU,IACnB,EAAE,aAAa,IAAI,SACnB,kBAAmB,QAAQ,qBACvB,OAAO,SAAS,UAAU,0BACpB,CAAC,QAAQ,cAAc,KACvB,cAAG,8BAAH,4BAA+B;AAAA,MAC7B,WAAY;AAAA,MACZ;AAAA,IACJ,OAHE,YAGI,OAAO,cAAc;AACvC,OAAG,kBAAkB,cAAc,eAAe;AAAA,EACtD;AAAA,EACA,mBAAmB,EAAE,aAAa,eAAe,GAAG;AAChD,QAAI,CAAC,KAAK,UAAU;AAChB,WAAK,kBAAkB,aAAa,CAAC,cAAc,CAAC;AAAA,IACxD;AAAA,EACJ;AAAA,EACA,kBAAkB,EAAE,aAAa,eAAe,GAAG;AAC/C,QAAI,CAAC,KAAK,UAAU;AAChB,WAAK,kBAAkB,aAAa,CAAC,cAAc,CAAC;AAAA,IACxD;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAIA,kBAAkB,UAAU,QAAQ;AAjQxC;AAkQQ,UAAM,aAAY,UAAK,cAAL,mBAAgB,IAAI;AACtC,iBAAa,OAAO,KAAK,GAAG,SAAS;AACrC,WAAO;AAAA,EACX;AAAA,EACA,qBAAqB,YAAY;AAC7B,UAAM,EAAE,YAAY,IAAI;AACxB,QAAI,YAAY,0BAA0B;AACtC,YAAM,EAAE,QAAQ,IAAI;AAEpB,iBAAW,WAAW,KAAK,OAAO;AAElC,iBAAW,WAAW,kCAAkC,IAAI;AAE5D,iBAAW,SAAS,KAAK;AAAA,QACrB,WAAY;AAAA,QACZ,MAAY,YAAY;AAAA,QACxB,SAAY;AAAA,UACR,gBAAiB;AAAA,QACrB;AAAA,MACJ,CAAC;AAED,iBAAW,SAAS,UAAU;AAC9B,iBAAW,UAAU,UAAU;AAC/B,iBAAW,QAAQ;AACnB,iBAAW,OAAO;AAElB,iBAAW,UAAU,GAAG,KAAK,kBAAkB,WAAW,CAAC,aAAa,WAAW,eAAe,EAAE;AAAA,IACxG;AAAA,EACJ;AAAA,EACA,eAAe,UAAU,KAAK;AAC1B,UAAM,eAAe,UAAU,GAAG;AAClC,QAAI,UAAU;AACV,WAAK,qBAAqB;AAAA,IAC9B;AAAA,EACJ;AAAA,EACA,cAAc,aAAa;AACvB,WAAO,YAAY;AAAA,EACvB;AAAA;AAAA,EAEA,IAAI,eAAe;AAAA,EAAC;AACxB;AACA,kBAAkB,SAAS;AAAqB,mBAAmB,gBAAgB,mBAAmB,OAAO,cAAc;;;ACnR3H,IAAqBC,kBAArB,cAA4C,6BAAqB,cAAuB,EAAE;AAAA;AAAA,EAEtF,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,WAAW,eAAe;AACtB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOH,cAAe;AAAA,MACf,cAAe;AAAA,QACX,OAAQ;AAAA,UACJ,aAAc;AAAA,YACV,MAAQ;AAAA,YACR,MAAQ;AAAA,YACR,OAAQ;AAAA,UACZ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA,EAEA,MAAM,eAAe,QAAQ;AACzB,QAAI,MAAM,MAAM,eAAe,MAAM,GAAG;AACpC,YAAM,KAAK,wBAAwB;AAAA,IACvC;AAAA,EACJ;AAAA,EACA,YAAY;AACR,SAAK,yBAAyB,EAAE,KAAK,MAAM;AACvC,YAAM,UAAU;AAAA,IACpB,CAAC;AAAA,EACL;AAAA,EACA,cAAc;AACV,SAAK,yBAAyB,EAAE,KAAK,MAAM;AACvC,YAAM,YAAY;AAAA,IACtB,CAAC;AAAA,EACL;AAAA,EACA,cAAc;AACV,SAAK,yBAAyB;AAC9B,UAAM,YAAY;AAAA,EACtB;AACJ;AACAA,gBAAe,SAAS;AAAkB,mBAAmB,gBAAgBA,iBAAgB,KAAK;;;AC9ClG,IAAqB,cAArB,cAAyC,eAAe;AAAA,EACpD,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,WAAW,eAAe;AACtB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMH,cAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAYf,iBAAkB;AAAA,QACd,OAAU;AAAA,QACV,SAAU;AAAA,MACd;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,WAAW,eAAe;AACtB,WAAO;AAAA,MACH,OAAQ,CAAC,sBAAsB;AAAA,IACnC;AAAA,EACJ;AAAA;AAAA,EAEA,sBAAsB,iBAAiB;AA3D3C;AA4DQ,UAAM,KAAK;AACX,QAAI,iBAAiB;AACjB,SAAG,UAAU,QAAQ,IAAI;AAAA,QACrB,YAAc,GAAG,OAAO;AAAA,QACxB,aAAc;AAAA,QACd,OAAc;AAAA,UACV,OAAS;AAAA,UACT,QAAS,CAAC,GAAG,EAAE;AAAA,QACnB;AAAA,QACA,QAAQ,EAAE,aAAa,GAAG;AACtB,gBACI,cAAc,GAAG,OAAO,mBAAmB,YAAY,GACvD,SAAc,aAAa,QAAQ,4BAA4B,GAC/D,WAAc,SAAS,YAAY,WAAW,YAAY;AAC9D,iBAAO,GAAG,gBAAgB,EAAE,aAAa,UAAU,OAAO,CAAC;AAAA,QAC/D;AAAA,MACJ,CAAC;AAAA,IACL,OACK;AACD,eAAG,YAAH,mBAAY;AAAA,IAChB;AAAA,EACJ;AAAA,EACA,qBAAqB,EAAE,gBAAgB,mBAAmB,kBAAkB,aAAa,gBAAgB,GAAG;AAlFhH;AAmFQ,QAAI,KAAK,WAAW,gBAAgB;AAChC,YACI,EAAE,aAAa,IAAW,KAAK,QAC/B,EAAE,aAAa,IAAW,MAC1B,WAA0B,eAAe,UAAU,UACnD,iBAA0B,CAAC,GAC3B,kBAA0B,CAAC;AAC/B,UAAI,EAAE,UAAU,UAAU,IAAI;AAC9B,iBAAK,aAAL,8BAAgB,EAAE,aAAa,gBAAgB,gBAAgB;AAC/D,UAAI,EAAC,qCAAU,YAAW;AACtB,mBAAW;AAAA,MACf;AACA,UAAI,EAAC,uCAAW,YAAW;AACvB,oBAAY;AAAA,MAChB;AACA,sBAAgB;AAAA,QACZ;AAAA,UACI,WAAY;AAAA,YACR,sBAA8B;AAAA,YAC9B,6BAA8B;AAAA,YAC9B,iBAA8B,CAAC;AAAA,YAC/B,CAAC,eAAe,GAAG,GAAW,eAAe;AAAA,UACjD;AAAA,UACA,OAAQ;AAAA,YACJ,CAAC,GAAG,QAAQ,EAAE,GAAI,GAAG,iBAAiB;AAAA,UAC1C;AAAA,UACA,UAAY,gBAAgB,WAAY;AAAA,YACpC,eAAe,OAAO;AAAA,cAClB,KAAY;AAAA,cACZ,WAAY,eAAe;AAAA,YAC/B,IAAI;AAAA,YACJ;AAAA,cACI,KAAY;AAAA,cACZ,WAAY;AAAA,cACZ,OAAY,oBAAe,SAAf,YAAuB,SAAS,SAAS,IAAI;AAAA,YAC7D;AAAA,UACJ,IAAI;AAAA,QACR;AAAA,QACA;AAAA,UACI,WAAY;AAAA,YACR,sBAA6B;AAAA,YAC7B,4BAA6B;AAAA,YAC7B,iBAA6B,CAAC;AAAA,YAC9B,CAAC,gBAAgB,GAAG,GAAS,gBAAgB;AAAA,UACjD;AAAA,UACA,OAAQ;AAAA,YACJ,CAAC,GAAG,QAAQ,EAAE,GAAI,GAAG,gBAAgB;AAAA,UACzC;AAAA,UACA,UAAY,gBAAgB,YAAa;AAAA,YACrC;AAAA,cACI,KAAY;AAAA,cACZ,WAAY;AAAA,cACZ,OAAY,qBAAgB,SAAhB,YAAwB,UAAU,SAAS,IAAI;AAAA,YAC/D;AAAA,YACA,gBAAgB,OAAO;AAAA,cACnB,KAAY;AAAA,cACZ,WAAY,gBAAgB;AAAA,YAChC,IAAI;AAAA,UACR,IAAI;AAAA,QACR;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA,EAEA,qBAAqB;AACjB,QAAI,CAAC,KAAK,eAAe;AACrB,WAAK,OAAO,sBAAsB;AAAA,IACtC;AAAA,EACJ;AAAA,EACA,UAAU,SAAS;AACf,UAAM,UAAU,OAAO;AACvB,UAAM,EAAE,OAAO,IAAI;AACnB,QAAI,CAAC,OAAO,iBAAiB,OAAO,WAAW;AAE3C,aAAO,QAAQ,UAAU,IAAI,0BAA0B;AACvD,aAAO,sBAAsB;AAC7B,aAAO,kBAAkB,EAAE,KAAK,MAAM;AAClC,eAAO,QAAQ,UAAU,OAAO,0BAA0B;AAAA,MAC9D,CAAC;AAAA,IACL;AAAA,EACJ;AACJ;AACA,YAAY,SAAS;AAAe,mBAAmB,gBAAgB,aAAa,OAAO,cAAc;;;ACnJzG,IAAqB,mBAArB,cAA8C,UAAU;AAAA,EAGpD,WAAW,gBAAgB;AACvB,WAAO;AAAA,MACH,yBAA0B;AAAA,IAC9B;AAAA,EACJ;AAAA,EACA,WAAW,eAAe;AACtB,WAAO;AAAA,MACH,sBAAuB;AAAA,IAC3B;AAAA,EACJ;AAAA,EACA,WAAW,eAAe;AACtB,WAAO;AAAA,MACH,OAAQ,CAAC,mBAAmB,yBAAyB;AAAA,IACzD;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA4FA,iBAAiB,UAAU;AACvB,UAAM,EAAE,mBAAmB,cAAc,gBAAgB,cAAc,MAAM,IAAI;AACjF,WAAO;AAAA;AAAA,MAEH,SAAU;AAAA,MACV;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,iBAAiB,UAAU,OAAO;AAC9B,SAAK,UAAU,QAAQ,oBAAoB,OAAO,OAAO,KAAK,iBAAiB,QAAQ,GAAG;AAAA,MACtF,WAAY,SAAS;AAAA,MACrB,SAAY,SAAS;AAAA,IACzB,CAAC,CAAC;AAAA,EACN;AAAA,EACA,iBAAiB,UAAU;AACvB,SAAK,UAAU,UAAU,gBAAgB;AACzC,SAAK,UAAU,QAAQ,yBAAyB,KAAK,iBAAiB,QAAQ,CAAC;AAAA,EACnF;AAAA,EACA,iBAAiB,UAAU;AACvB,SAAK,UAAU,QAAQ,yBAAyB,KAAK,iBAAiB,QAAQ,CAAC;AAAA,EACnF;AAAA,EACA,0BAA0B,UAAU;AAChC,SAAK,UAAU,QAAQ,kCAAkC,KAAK,iBAAiB,QAAQ,CAAC;AAAA,EAC5F;AAAA,EACA,iBAAiB,UAAU,OAAO;AAC9B,SAAK,UAAU,QAAQ,yBAAyB,OAAO,OAAO,KAAK,iBAAiB,QAAQ,GAAG;AAAA,MAC3F;AAAA,IACJ,CAAC,CAAC;AACF,QAAI,CAAC,OAAO;AAOR,YACI,EAAE,iBAAiB,WAAW,IAAI,KAAK,QACvC,cAAkC,KAAK,SAAS,wBAAwB,KAAK,CAAC;AAAA,QAC1E;AAAA,QAAU;AAAA,MACd,GAAG,MAAM;AAzKzB;AA0KoB,eAAO,CAAC,gBAAgB,SAAS,UAAU,KACvC,CAAC,WAAW,SAAS,WAAW,KAAK,KACrC,SAAS,SAAO,UAAK,SAAS,kBAAkB,CAAC,MAAjC,mBAAoC;AAAA,MAC5D,CAAC;AACL,UAAI,aAAa;AACb,aAAK,OAAO,QAAQ;AAAA,MACxB;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,cAAc,SAAS;AACzB,UACI,KAAiB,MACjB,EAAE,OAAO,IAAQ,IACjB,iBAAiB;AACrB,QAAI;AACJ,QAAI,CAAC,QAAQ,oBAAoB;AAC7B,aAAO,WAAW,kBAAkB;AACpC,eAAS,MAAM,GAAG,cAAc,QAAQ,SAAS,cAAc;AAC/D,aAAO,WAAW,iBAAiB;AAAA,IACvC;AAEA,WAAO,QAAQ,oBAAoB,OAAO,OAAO,GAAG,iBAAiB,OAAO,GAAG;AAAA,MAC3E,QAAuB;AAAA,MACvB,OAAuB,QAAQ;AAAA,MAC/B,mBAAuB,QAAQ;AAAA,MAC/B,sBAAuB,QAAQ;AAAA,MAC/B,oBAAuB,QAAQ;AAAA,IACnC,CAAC,CAAC;AACF,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,cAAc,QAAQ,SAAS;AArNzC;AAuNQ,UACI,KAAsB,MACtB,aAAsB,OAAO,SAAS,YACtC;AAAA,MACI;AAAA,MACA;AAAA,MACA;AAAA,IACJ,IAAsB;AAC1B,WAAO,eAAe;AACtB,QAAI,UAAU;AACd,QAAI,YAAY;AACZ,mBAAa,QAAQ,CAACC,eAAc,MAAM;AACtC,cAAM,WAAW,QAAQ,YAAY,CAAC;AACtC,eAAOA,cAAa,aAAa,MAAM,EAAE;AAIzC,YAAI,SAAS,QAAQ,WAAW;AAC5B,mBAAS,OAAO;AAAA,QACpB;AAAA,MACJ,CAAC;AAAA,IACL;AACA,UACI,cAAe,QAAQ,YAAY,MAAM,GACzC,eAAe,QAAQ,aACvB,eAAe,GAAG,gBAAgB,QAAQ,WAAW,QAAQ;AACjE,QAAI,CAAC,WAAW,QAAQ,aAAa,WAAW,YAAY,GAAG;AAC3D,aAAO,8BAA8B;AACrC,SAAG,kBAAkB,YAAY;AACjC,mBAAa,YAAY;AACzB,gBAAU;AACV,YAAM,OAAO,QAAQ,YAAY;AACjC,eAAG,mBAAH,4BAAoB;AAAA,IACxB;AACA,WAAO,cAAc,KAAK;AAC1B,QAAI,kBAAkB,SAAS,GAAG;AAC9B,UAAI,CAAC,SAAS;AACV,gBAAQ,QAAQ;AAAA,MACpB,OACK;AAID,YAAI,OAAO,WAAW;AAClB,sBAAY,QAAQ,QAAM,OAAO,GAAG,aAAa;AAAA,QACrD;AAEA,eAAO,sBAAsB;AAAA,MACjC;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAIA,wBAAwB,cAAc,aAAa,IAAI,OAAO;AAC1D,UAAM,KAAK;AAGX,QAAI,GAAG,YAAY,EAAE,YAAY,kBAAkB,YAAY,WAAW;AACtE,aAAO;AAAA,IACX;AAEA,WAAO,CAAC,GAAG,QAAQ,GAAG,KAAK,cAAc;AAAA,EAC7C;AAAA,EACA,wBAAwB;AACpB,UAAM,SAAS,MAAM,sBAAsB;AAC3C,WAAO,iBAAiB;AACxB,WAAO;AAAA,EACX;AAAA,EACA,mBAAmB,MAAM;AACrB,UACI,KAAoB,MACpB,EAAE,OAAO,IAAW,IACpB,UAAoB,GAAG,sBAAsB,IAAI,GACjD,cAAoB,OAAO,mBAAmB,OAAO,GACrD,iBAAoB,OAAO,sBAAsB,OAAO,GACxD,mBAAoB,OAAO,wBAAwB,OAAO,GAC1D,oBAAoB,mBAAmB,CAAC,gBAAgB,IAAI,CAAC,GAC7D,eAAoB,CAAC,WAAW;AACpC,WAAO;AAAA,MACH;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,iBAAiB,aAAa;AAC1B,gBAAY,MAAM,WAAW;AAC7B,gBAAY,WAAW;AAAA,EAC3B;AAAA,EACA,eAAe,aAAa;AAlThC;AAoTQ,sBAAY,UAAZ,mBAAmB;AACnB,gBAAY,SAAS;AAAA,EACzB;AAAA,EACA,kBAAkB,aAAa;AAvTnC;AAwTQ,sBAAY,UAAZ,mBAAmB;AACnB,gBAAY,YAAY;AAAA,EAC5B;AAAA,EACA,qBAAqB,MAAM;AA3T/B;AA4TQ,UACI,KAAgB,MAChB,EAAE,OAAO,IAAO,IAChB,UAAgB,GAAG,sBAAsB,IAAI,GAC7C;AAAA,MACI;AAAA,MACA;AAAA,IACJ,IAAgB,GAAG,mBAAmB,IAAI,GAC1C,cAAgB,CAAC,GACjB,mBAAmB,OAAO,2BAA2B,YAAY,OAAO,gBAAgB,IAAI,EAAE,CAAC;AACnG,QAAI,GAAG,2BAA2B,CAAC,gBAAgB;AAC/C,YAAM,IAAI,MAAM,+CAA+C,YAAY,EAAE;AAAA,IACjF;AAIA,OAAG,KAAK,yBAAyB,CAAC,OAAO,OAAO,YAAY;AAG5D,QAAI,CAAC,OAAO,wBAAwB;AAChC,aAAO,gCAAgC;AAAA,IAC3C;AAEA,OAAG,iBAAiB,WAAW;AAC/B,UACI,mBAAqB,QAAG,uBAAH,4BAAwB,gBAAgB,cAC7D,qBAAqB,GAAG,qBAAqB,GAAG,yBAAyB,iBAAiB,gBAAgB,WAAW,GACrH,cAAqB,UAAU,KAAK,SAAS,OAAO,kBAAkB,IAAI,GAC1E,kBAAqB,UAAU,KAAK,kBAAkB,OAAO,kBAAkB,IAAI;AAEvF,uBAAmB,UAAU,CAAC,gBAAgB,CAAC;AAC/C,UAAM;AAAA,MACF;AAAA,MACA;AAAA,MACA,OAAO,kBAAkB;AAAA,MACzB,QAAQ,gBAAgB,KAAK;AAAA,IACjC;AACA,gBAAY,KAAK,OAAO;AACxB,WAAO;AAAA,MACH,QAAkB;AAAA,MAClB,iBAAkB,CAAC,WAAW;AAAA,MAC9B,kBAAkB,mDAAiB,SAAQ,kBAAkB;AAAA,MAC7D;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,gCAAgC;AAAA,EAAC;AAAA,EACjC,0BAA0B;AAAA,EAAC;AAAA,EAC3B,mBAAmB,gBAAgB,aAAa;AAC5C,QAAI,EAAE,SAAS,QAAQ,IAAI,MAAM,mBAAmB,gBAAgB,WAAW;AAE/E,QAAI,YAAY,oBAAoB,CAAC,WAAW,UAAU,YAAY,gBAAgB,UAAU;AAC5F,gBAAU,YAAY,gBAAgB;AAAA,IAC1C;AACA,QAAI,YAAY,gBAAgB,CAAC,WAAW,UAAU,YAAY,YAAY,YAAY;AACtF,gBAAU,YAAY,YAAY;AAAA,IACtC;AACA,WAAO;AAAA,MACH,OAAQ;AAAA,MACR,KAAQ;AAAA,IACZ;AAAA,EACJ;AAAA,EACA,IAAI,QAAQ;AACR,WAAO,GAAG,KAAK,OAAO,EAAE;AAAA,EAC5B;AAAA,EACA,uBAAuB,QAAQ;AAC3B,UAAM,uBAAuB;AAE7B,QAAI,KAAK,OAAO,OAAO,CAAC,KAAK,SAAS,YAAY,aAAa;AAC3D,aAAO,IAAI;AAAA,IACf;AAAA,EACJ;AAAA,EACA,kBAAkB,SAAS,OAAO;AApYtC;AAqYQ,UAAM,kBAAkB,GAAG,SAAS;AACpC,UACI,EAAE,OAAO,IAAI,MACb;AAAA,MACI;AAAA,MACA;AAAA,MACA;AAAA,IACJ,IAAI,KAAK;AAGb,QAAI,SAAS,CAAC,YAAY,aAAa;AACnC,YAAM,EAAE,sBAAsB,IAAI;AAClC,aAAO,wBAAwB;AAC/B,kBAAY,MAAM,IAAI,WAAW,OAAO;AACxC,WAAI,YAAO,SAAS,gBAAhB,mBAA6B,SAAS;AACtC,oBAAY,MAAM,cAAc;AAAA,MACpC;AACA,aAAO,wBAAwB;AAAA,IACnC;AAAA,EACJ;AAAA;AAEJ;AAAA;AAtYI,cAFiB,kBAEV,SAAQ;AAuYnB,iBAAiB,SAAS;AAAoB,mBAAmB,gBAAgB,kBAAkB,MAAM,cAAc;AACvH,mBAAmB,gBAAgB,kBAAkB,OAAO,mBAAmB;;;AChZ/E,IAAM,eAAmB;AAAA,EACrB,QAAS;AAAA,EACT,QAAS;AACb;AAyKA,IAAqB,eAArB,cAA0C,eAAe,MAAM,8BAAsB,iBAAS,EAAE;AAAA;AAAA,EA0J5F,UAAU,QAAQ,QAAQ;AACtB,UAAM,UAAU,QAAQ,MAAM;AAG9B,SAAK,OAAO,WAAW,OAAO;AAAA,EAClC;AAAA,EACA,gBAAgB;AACZ,SAAK,OAAO,sBAAsB;AAAA,EACtC;AAAA,EACA,wBAAwB;AACpB,KAAC,KAAK,OAAO,iBAAiB,KAAK,cAAc;AAAA,EACrD;AAAA,EACA,YAAY;AACR,SAAK,sBAAsB;AAAA,EAC/B;AAAA;AAAA,EAEA,kBAAkB,QAAQ;AACtB,QAAI,WAAW,WAAW,KAAK,OAAO,YAAY;AAC9C,cAAQ,KAAK,0DAA0D;AAAA,IAC3E;AACA,SAAK,sBAAsB;AAAA,EAC/B;AAAA,EACA,kBAAkB;AACd,SAAK,sBAAsB;AAAA,EAC/B;AAAA,EACA,uBAAuB;AACnB,SAAK,sBAAsB;AAAA,EAC/B;AAAA,EACA,kBAAkB,QAAQ;AAEtB,SAAK,gBAAgB,YAAY,QAAQ,MAAM;AAC/C,WAAO;AAAA,EACX;AAAA,EACA,oBAAoB;AAChB,SAAK,sBAAsB;AAAA,EAC/B;AAAA,EACA,mBAAmB,QAAQ;AACvB,SAAK,OAAO,QAAQ,MAAM,YAAY,6CAA6C,GAAG,MAAM,IAAI;AAChG,SAAK,sBAAsB;AAAA,EAC/B;AAAA;AAAA,EAEA,eAAe,gBAAgB,mBAAmB;AAC9C,QAAI,mBAAmB;AACnB,aAAO,EAAE,MAAO,KAAK,YAAY;AAAA,IACrC;AACA,WAAO,KAAK,WAAW,eAAe,cAAc;AAAA,EACxD;AAAA;AAAA,EAEA,wBAAwB,gBAAgB,mBAAmB;AACvD,QAAI,qBAAqB,CAAC,kBAAkB,QAAQ;AAChD,YAAM,SAAS,KAAK;AACpB,UAAI,OAAO,WAAW,UAAU;AAC5B,eAAO;AAAA,UACH,OAAQ;AAAA,UACR,KAAQ;AAAA,UACR,OAAQ,SAAS;AAAA,QACrB;AAAA,MACJ,OACK;AACD,eAAO,QAAQ,OAAO,QAAQ,OAAO;AACrC,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO,KAAK,WAAW,wBAAwB,cAAc;AAAA,EACjE;AAAA;AAAA,EAEA,aAAa,gBAAgB,mBAAmB;AAC5C,QAAI,qBAAqB,CAAC,kBAAkB,QAAQ;AAChD,aAAO,KAAK;AAAA,IAChB;AACA,WAAO,KAAK,WAAW,aAAa,cAAc;AAAA,EACtD;AAAA;AAAA,EAEA,yBAAyB,gBAAgB,mBAAmB;AA3ZhE;AA4ZQ,UAAM,KAAK;AACX,QAAI,qBAAqB,CAAC,kBAAkB,QAAQ;AAChD,UAAI,GAAG,gBAAgB,SAAS;AAC5B,cACI,cAAc,GAAG,cAAc,kBAAkB,UAAU,GAC3D,EAAE,MAAM,IAAI,GAAG,wBAAwB,gBAAgB,iBAAiB;AAE5E,eAAO,cAAc;AAAA,MACzB,OACK;AACD,cAAM,eAAc,kBAAa,GAAG,OAAO,cAAc,mBAAmB,cAAc,CAAC,MAAvE,YAA4E;AAChG,eAAO,GAAG,uBAAuB,GAAG,eAAe;AAAA,MACvD;AAAA,IACJ;AACA,WAAO,GAAG,WAAW,yBAAyB,cAAc;AAAA,EAChE;AAAA,EACA,iBAAiB,gBAAgB,mBAAmB;AAChD,QAAI,qBAAqB,CAAC,kBAAkB,QAAQ;AAChD,aAAO,KAAK,sBAAsB,KAAK;AAAA,IAC3C;AACA,WAAO,KAAK,WAAW,iBAAiB,cAAc;AAAA,EAC1D;AAAA;AAAA;AAAA,EAGA,mBAAmB,YAAY;AAC3B,6CAAY,IAAI;AAAA,MACZ,MAAU;AAAA,MACV,QAAU;AAAA,MACV,SAAU;AAAA,IACd;AAAA,EACJ;AAAA,EACA,mBAAmB,EAAE,QAAQ,GAAG;AA3bpC;AA8bQ,QAAI,GAAC,UAAK,OAAO,aAAZ,mBAAsB,UAAU,gBAAc,mCAAS,KAAK,OAAK,EAAE,UAAU,CAAC,EAAE,OAAO,UAAS;AACjG,WAAK,cAAc;AAAA,IACvB;AAAA,EACJ;AAAA,EACA,0BAA0B,EAAE,QAAQ,GAAG;AAEnC,QAAI,KAAK,OAAO,2BAA0B,mCAAS,KAAK,OAAK,EAAE,UAAU,CAAC,EAAE,OAAO,UAAS;AACxF,WAAK,cAAc;AAEnB,aAAO;AAAA,IACX;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,qBAAqB,SAAS,UAAU;AACpC,UACI,KAAqC,MACrC,EAAE,OAAO,IAA4B,IACrC,EAAE,aAAa,kBAAkB,IAAI,UACrC,EAAE,cAAc,IAAqB,QAAQ;AAEjD,QAAI,YAAY,UAAU,kBAAkB,OAAO,kBAAkB;AACjE,SAAG,wBAAwB;AAE3B,cAAQ,wBAAwB;AAChC,cAAQ,iBAAiB,CAAC;AAC1B,iBAAW,cAAc,mBAAmB;AACxC,cAAM,EAAE,MAAM,IAAI;AAIlB,YAAI,MAAM,WAAW,YAAY,QAAQ;AACrC,gBAAM,eAAe,OAAO,+BAA+B,YAAY,IAAI;AAC3E,kBAAQ,eAAe,KAAK;AAAA,YACxB,SAAU;AAAA,YACV,QAAU,UAAU,KAAK,cAAc,aAAa;AAAA,UACxD,CAAC;AACD,cAAI,CAAC,GAAG,yBAAyB,OAAO,SAAS,UAAU,yBAAyB;AAEhF,kBAAM,iBAAiB,UAAU,KAAK,cAAc,OAAO,sBAAsB;AACjF,yBAAa,MAAM,MAAM,GAAG,eAAe,GAAG;AAC9C,yBAAa,MAAM,OAAO,GAAG,eAAe,IAAI;AAChD,oBAAQ,SAAS,OAAO,kBAAkB,cAAc,WAAW,EAAE;AAAA,UACzE;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,OACK;AACD,SAAG,wBAAwB;AAAA,IAC/B;AAAA,EACJ;AAAA;AAAA,EAEA,oBAAoB,SAAS,UAAU;AAEnC,QAAI,KAAK,yBAAyB,KAAK,uBAAuB;AAC1D,YACI,EAAE,UAAU,IAAI,KAAK,OAAO,UAC5B,EAAE,OAAO,IAAO,SAAS,aACzB,eAAgB,QAAQ,sBAAsB,sBAAsB;AAExE,gBAAU,eAAe,GAAG,aAAa,SAAS,QAAQ,eAAe,CAAC,EAAE,OAAO,MAAM;AAEzF,gBAAU,eAAe,GAAG,aAAa,QAAQ,QAAQ,eAAe,CAAC,EAAE,OAAO,KAAK;AACvF,eAAS,kBAAkB,EAAE,OAAQ,OAAO,WAAW,KAAM,OAAO,QAAQ;AAAA,IAChF;AAAA,EACJ;AAAA,EACA,uBAAuB,EAAE,mBAAmB,aAAa,UAAU,aAAa,eAAe,GAAG;AAC9F,UAAM,KAAK;AAIX,QAAI,GAAG,yBAAyB,CAAC,GAAG,wBAAwB,CAAC,sBAAsB,YAAY,gBAAgB,iBAAiB;AAC5H,aAAO;AAAA,QACH,OAAU;AAAA,QACV,SAAU,GAAG,EAAE,wBAAwB;AAAA,MAC3C;AAAA,IACJ;AAEA,QAAI,CAAC,GAAG,sBAAsB,qBAAqB,sBAAsB,YAAY,QAAQ;AACzF,aAAO;AAAA,QACH,OAAU;AAAA,QACV,SAAU,GAAG,EAAE,sBAAsB;AAAA,MACzC;AAAA,IACJ;AACA,QAAI,qBAAqB,sBAAsB,YAAY,QAAQ;AAC/D,YACI,WAAqB,GAAG,YACxB,cAAqB,kBAAkB,WAAW,kBAAkB,aAAa,kBAAkB,OAAO,YAC1G,gBAAqB,KAAK,IAAI,GAAG,YAAY,YAAY,IAAI,WAAS,MAAM,UAAU,CAAC,GACvF,qBAAqB,gBAAgB,YAAY;AACrD,UAAI,cAAc,sBAAsB,UAAU;AAC9C,eAAO;AAAA,UACH,OAAU;AAAA,UACV,SAAU,GAAG,EAAE,sBAAsB;AAAA,QACzC;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA,EAEA,iBAAiB,EAAE,SAAS,aAAa,aAAa,gBAAgB,gBAAgB,SAAS,aAAa,aAAa,kBAAkB,GAAG;AAC1I,UACI,EAAE,OAAO,IAAe,aACxB,EAAE,kBAAkB,IAAI;AAC5B,QAAI,YAAY;AAGhB,QAAI,WAAW,qBAAqB,CAAC,KAAK,uBAAuB;AAE7D,UAAI,qBAAqB,KAAK,oBAAoB;AAE9C,oBAAY,kBAAkB,WAAW,oBAAoB,kBAAkB,OAAO,SAAS,oBAAoB,kBAAkB;AAGrI,cAAM,iBAAiB,KAAK,OAAO,sBAAsB,QAAQ,YAAY;AAC7E,YAAI,mBAAmB,gBAAgB;AACnC,2BAAiB,kBAAkB,WAAW;AAAA,QAClD;AAAA,MACJ,OAEK;AACD,oBAAY,YAAY,WAAW;AAAA,MACvC;AACA,UAAI,aAAa,cAAc,QAAQ;AACnC,oBAAY,KAAK,UAAU,YAAY,WAAW,CAAC;AAEnD,oBAAY,OAAO,aAAa,WAAW;AAAA,MAC/C;AAAA,IACJ;AAEA,QAAI,YAAY,YAAY,kBAAkB,mBAAmB,gBAAgB;AAC7E,iBAAW,SAAS,YAAY,aAAa;AACzC,cAAM,qBAAqB,MAAM,YAAY,KAAK,OAAK,EAAE,aAAa,cAAc;AACpF,YAAI,oBAAoB;AACpB,6BAAmB,WAAW;AAAA,QAClC;AAAA,MACJ;AAAA,IACJ;AAGA,QAAI,aAAa,CAAC,UAAU,QAAQ;AAChC,YAAM,mBAAmB,KAAK,OAAO,0BAA0B,WAAW,cAAc,EAAE,UAAU;AAEpG,UAAI,kBAAkB;AAClB,cACI,kBAAkB,UAAU,KAAK,kBAAkB,KAAK,OAAO,gBAAgB,GAC/E,eAAkB,UAAU,KAAK,SAAS,gBAAgB;AAE9D,gBAAQ,QAAQ,iBAAiB,gBAAgB;AACjD,gBAAQ,QAAQ,iBAAiB,gBAAgB;AAEjD,gBAAQ,MAAM,MAAM,GAAG,aAAa,GAAG;AACvC,gBAAQ,MAAM,OAAO,GAAG,aAAa,IAAI;AAGzC,gBAAQ,gBAAgB;AACxB,gBAAQ,SAAS,kBAAkB,SAAS,QAAQ,QAAQ,MAAM;AAAA,MACtE;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA,EAEA,+BAA+B,EAAE,YAAY,GAAG;AAC5C,QAAI,YAAY,UAAU;AACtB,iBAAW,SAAS,YAAY,aAAa;AACzC,cAAM,WAAW,YAAY;AAAA,MACjC;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA,EAEA,MAAM,6BAA6B,EAAE,uBAAuB,eAAe,GAAG;AAC1E,QAAI,KAAK,uBAAuB;AAE5B,iBAAW,aAAa,eAAe,CAAC,EAAE,QAAQ,cAAc,GAAG;AAC/D,YAAI,UAAU,uBAAuB,SAAS,UAAU,uBAAuB,QAAQ;AACnF,gBAAM,UAAU;AAAA,QACpB;AAAA,MACJ;AACA,iBAAW,EAAE,SAAS,OAAO,KAAK,gBAAgB;AAE9C,gBAAQ,MAAM,MAAM,GAAG,OAAO,GAAG;AACjC,gBAAQ,MAAM,OAAO,GAAG,OAAO,IAAI;AACnC,8BAAsB,YAAY,OAAO;AAAA,MAC7C;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA,EAEA,sBAAsB,SAAS;AAC3B,QAAI,KAAK,yBAAyB;AAC9B,YAAM,EAAE,OAAO,IAAI,QAAQ;AAC3B,UAAI,UAAU,CAAC,OAAO,QAAQ;AAC1B,YAAI,EAAE,WAAW,QAAQ,IAAI;AAC7B,YAAI,QAAQ,iBAAiB;AACzB,sBAAY,WAAW,IAAI,WAAW,QAAQ,gBAAgB,KAAK;AACnE,oBAAU,WAAW,IAAI,SAAS,QAAQ,gBAAgB,GAAG;AAAA,QACjE;AACA,gBAAQ,kBAAkB;AAAA,UACtB,OAAQ;AAAA,UACR,KAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAIA,+BAA+B,kBAAkB,eAAe;AA5oBpE;AA6oBQ,UAAI,0DAAkB,UAAlB,mBAAyB,WAAU,CAAC,iBAAiB,MAAM,OAAO,QAAQ;AAC1E,YAAM,gBAAgB,KAAK,OAAO,0BAA0B,iBAAiB,MAAM,QAAQ,iBAAiB,QAAQ;AACpH,aAAO,iBAAiB,QAAQ,SAAS,eAAe,yBAAyB,iBAAiB,EAAE,GAAG,gBAAgB,KAAK,QAAQ,EAAE;AAAA,IAC1I;AACA,WAAO,KAAK,WAAW,+BAA+B,kBAAkB,aAAa;AAAA,EACzF;AAAA;AAAA,EAEA,MAAM,cAAc,EAAE,aAAa,mBAAmB,WAAW,QAAQ,GAAG;AAExE,QAAI,mBAAmB;AACnB,kBAAY,YAAY;AACxB,oBAAc,kBAAkB,YAAY,WAAW;AACvD,kBAAY,OAAO,kBAAkB,QAAQ;AAE7C,UAAI,SAAS;AACT,cACI,gBAAgB,KAAK,OAAO,0BAA0B,iBAAiB,EAAE,UAAU,uBACnF,YAAgB,UAAU,KAAK,SAAS,aAAa;AAEzD,kBAAU,eAAe,SAAS,GAAG,CAAC;AACtC,kBAAU,WAAW,SAAS,UAAU,GAAG,UAAU,CAAC;AACtD,gBAAQ,SAAS,eAAe,SAAS,YAAY,YAAY,CAAC,EAAE,EAAE;AAAA,MAC1E;AACA,YAAM,KAAK,OAAO,QAAQ,YAAY;AAAA,IAC1C,OACK;AACD,aAAO,KAAK,WAAW,cAAc,GAAG,SAAS;AAAA,IACrD;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAIA,kBAAkB,gBAAgB,cAAc;AAC5C,QAAI,CAAC,KAAK,UAAU;AAEhB,kBAAY,OAAO,cAAc,GAAG,aAAa,OAAO,iBAAe,YAAY,gBAAgB,CAAC,YAAY,OAAO,MAAM,CAAC;AAAA,IAClI;AACA,WAAO;AAAA,EACX;AAAA,EACA,iBAAiB,EAAE,WAAW,GAAG;AAprBrC;AAqrBQ,UACI,EAAE,YAAY,IAAI,YAClB,EAAE,WAAW,IAAK;AACtB,QAAI,YAAY,UAAU;AACtB,YACI,KAAK,MACL,EAAE,gBAAgB,OAAO,QAAQ,MAAM,KAAK,WAAW,IAAI;AAC/D,iBAAW,IAAI,wBAAwB;AACvC,SAAG,uBAAuB;AAC1B,SAAG,sBAAsB;AACzB,YACI;AAAA,QACI;AAAA,QACA;AAAA,MACJ,IAAyB,GAAG,QAC5B,mBAAyB,YAAY,SAAS,OAAO,OAAE;AApsBvE,YAAAC;AAosB0E,gBAAAA,MAAA,EAAE,qBAAF,gBAAAA,IAAoB,SAAS;AAAA,OAAe,GAGtG,UAAyB,mBAAmB,aAAa,gBAAgB,kBAAkB,EAAE,UAAW,KAAK,GAAG,aAAa,GAAG,sBAAsB,GACtJ,eAAyB,CAAC;AAC9B,UAAI;AACJ,UAAI,YAAY;AACZ,qBAAa,CAAC;AACd,mBAAW,UAAU,OAAO,OAAO,OAAO,GAAG;AACzC,qBAAW,KAAK,OAAO,UAAU;AAAA,QACrC;AAAA,MACJ,OACK;AACD,qBAAa,mCAAS;AAAA,MAC1B;AACA,UAAI,YAAY;AACZ,mBAAW,UAAU,YAAY;AAE7B,cAAI,YAAY;AACZ,mBAAO,QAAQ;AACf,mBAAO,OAAO;AACd,mBAAO,cAAc,OAAO;AAAA,UAChC,OACK;AAED,gBAAI,GAAG,gBAAgB,QAAQ;AAC3B,qBAAO,MAAM;AACb,qBAAO,SAAS,GAAG,yBAAyB,gBAAgB,WAAW;AAAA,YAC3E,WAES,GAAG,gBAAgB,SAAS;AACjC,qBAAO,SAAS,GAAG,cAAc,UAAU;AAAA,YAC/C;AACA,mBAAO,eAAe,OAAO;AAC7B,mBAAO,SAAS,gBAAW,iBAAX,YAA2B;AAC3C,mBAAO,cAAc,OAAO;AAAA,UAChC;AACA,gBAAM,YAAY,mBAAmB,YAAY,aAAa,EAAE,YAAa,OAAO,IAAI,QAAQ,MAAM;AACtG,oBAAU,UAAU,gBAAgB,IAAI;AACxC,uBAAa,KAAK,SAAS;AAAA,QAC/B;AAAA,MACJ;AACA,YAAM,qBAAqB;AAAA,QACvB,WAAY;AAAA,UACR,6BAA+C;AAAA,UAC/C,CAAC,0BAA0B,GAAG,WAAW,EAAE,GAAI;AAAA,QACnD;AAAA,QACA,SAAU;AAAA,UACN,gBAAiB;AAAA,QACrB;AAAA,QACA,UAAc;AAAA,QACd,aAAc;AAAA,UACV,aAAmB;AAAA,UACnB,kBAAmB;AAAA,QACvB;AAAA,MACJ;AAEA,YACI,EAAE,SAAS,IAAI,YACf,QAAe,SAAS,UAAU,WAAS,MAAM,QAAQ,mBAAmB,uBAAuB;AACvG,UAAI,UAAU,IAAI;AACd,iBAAS,KAAK,kBAAkB;AAAA,MACpC,OACK;AACD,iBAAS,OAAO,OAAO,GAAG,kBAAkB;AAAA,MAChD;AAAA,IACJ;AACA,eAAW,cAAc,QAAQ,QAAQ;AAAA,EAC7C;AAAA;AAEJ;AAjlBI,cADiB,cACV,SAAQ;AAAA;AAEf,cAHiB,cAGV,gBAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoBlB,aAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMd,WAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyBZ,gBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmBjB,aAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUd,cAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOf,uBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYxB,oBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASrB,sBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBvB,yBAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAS1B,YAAa;AACjB;AACA,cA1IiB,cA0IV,gBAAe;AAAA,EAClB,QAAS,CAAC,2BAA2B;AAAA,EACrC,OAAS;AAAA,IACL;AAAA,IAAqB;AAAA,IAAoB;AAAA,IACzC;AAAA,IAAwB;AAAA,IAAuB;AAAA,IAC/C;AAAA,IAA0B;AAAA,IAAyB;AAAA,EACvD;AAAA,EACA,UAAW;AAAA,IACP;AAAA,IAA2B;AAAA,IAAgB;AAAA,IAA4B;AAAA,IAAoB;AAAA,IAC3F;AAAA,IAAkC;AAAA,EACtC;AACJ;AACA,cAtJiB,cAsJV,aAAY;AAAA,EACf,eAAgB;AACpB;AA2bJ,aAAa,SAAS;AAAgB,mBAAmB,gBAAgB,cAAc,OAAO,cAAc;;;ACloB5G,IAAqB,yBAArB,cAAoD,uBAAuB;AAAA;AAAA,EAmCvE,WAAW,aAAa;AACpB,WAAO;AAAA,MACH,aAAc,oBAAI,IAAI;AAAA,IAC1B;AAAA,EACJ;AAAA;AAAA;AAAA,EAGA,YAAY;AAnLhB;AAoLQ,UAAM,UAAU,GAAG,SAAS;AAC5B,SAAK,+BAA8B,mBAA0C,KAAK,4BAA4B;AAAA,IAG9G,GAFI,cAD+B,IACxB,SAAQ,gCACf,cAF+B,IAExB,eAAc,gCAFU;AAInC,SAAK,OAAO,SAAS,IAAI;AAAA,MACrB,MAAc;AAAA,MACd,aAAc;AAAA;AAAA,MAEd,MAAc;AAAA,MACd,SAAc;AAAA,IAClB,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkFA,sBAAsB,eAAe;AACjC,UAAM,sBAAsB,aAAa;AACzC,mDAAe,IAAI;AAAA,MACf,MAAkB;AAAA,MAClB,iBAAkB;AAAA,MAClB,SAAkB;AAAA,IACtB;AAAA,EACJ;AAAA,EACA,6BAA6B,sBAAsB;AAC/C,UAAM,6BAA6B,oBAAoB;AACvD,iEAAsB,IAAI;AAAA,MACtB,MAAkB;AAAA,MAClB,iBAAkB;AAAA,MAClB,SAAkB;AAAA,IACtB;AAAA,EACJ;AAAA;AAAA;AAAA,EAGA,wBAAwB;AAEpB,SAAK,YAAY,MAAM;AAAA,EAC3B;AAAA,EACA,iBAAiB,EAAE,QAAQ,SAAS,QAAQ,QAAQ,GAAG;AAxS3D;AAySQ,UAAM,KAAK;AAEX,QAAI,WAAW,UAAU;AACrB,YAAM,SAAS,QAAQ;AAEvB,UAAI,WAAW,OAAO,OAAO,aAAa,cAAY,YAAO,UAAP,mBAAc,QAAO,OAAO,WAAW;AACzF,WAAG,YAAY,OAAO,OAAO,EAAE;AAE/B,WAAG,OAAO,kBAAkB,MAAM;AAC9B,aAAG,OAAO,mBAAmB,yBAAyB,MAAM;AAAA,QAChE,CAAC;AAAA,MACL;AAAA,IACJ;AAEA,QAAI,WAAW,UAAU;AACrB,cAAQ,QAAQ,CAAAC,YAAU,GAAG,YAAY,OAAOA,QAAO,EAAE,CAAC;AAAA,IAC9D;AACA,QAAI,WAAW,aAAa;AACxB,SAAG,YAAY,MAAM;AAAA,IACzB;AAAA,EACJ;AAAA,EACA,iBAAiB,EAAE,QAAQ,SAAS,QAAQ,QAAQ,GAAG;AACnD,SAAK,YAAY,MAAM;AACvB,SAAK,OAAO,QAAQ;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,kBAAkB,UAAU,QAAQ;AAChC,UACI,KAA0B,MAC1B,EAAE,aAAa,OAAO,IAAI,IAC1B,EAAE,SAAS,IAAe,QAC1B,cAA0B,CAAC,GAAG,mBAAmB,WAAW,aAAa,SAAS,MAAM,GAAG,eAAe,KAAK;AACnH,QAAI,CAAC,GAAG,YAAY,eAAe,SAAS,mBAAmB;AAC3D,UAAI,CAAC,YAAY,IAAI,SAAS,EAAE,GAAG;AAC/B,cACI,SAAU,SAAS,kBAAkB;AAAA,UACjC,OAAO;AAAA,UACP,OAAO;AAAA,QACX,GACA,UAAU,OAAO,IAAI,CAAC,OAAO,MAAM,IAAI,GAAG,4BAA4B;AAAA,UAClE,IAAe,IAAI,SAAS,EAAE,IAAI,CAAC;AAAA,UACnC,SAAe,MAAM,WAAW,SAAS,kBAAkB,WAAW;AAAA,UACtE,KAAe,GAAG,SAAS,kBAAkB,OAAO,EAAE,IAAI,MAAM,OAAO,EAAE;AAAA,UACzE,WAAe,MAAM;AAAA,UACrB,SAAe,MAAM;AAAA,UACrB,MAAe,MAAM,QAAQ;AAAA,UAC7B,YAAe,SAAS;AAAA,UACxB,cAAe;AAAA,QACnB,CAAC,CAAC;AACN,oBAAY,IAAI,SAAS,IAAI,OAAO;AAAA,MACxC;AACA,aAAO,KAAK,GAAG,YAAY,IAAI,SAAS,EAAE,CAAC;AAAA,IAC/C;AACA,WAAO;AAAA,EACX;AAAA,EACA,cAAc,EAAE,aAAa,GAAG;AAC5B,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,sCAAsC,cAAc;AA5WxD;AA6WQ,YAAO,kDAAc,QAAQ,qCAAtB,mBAAwD,YAAY;AAAA,EAC/E;AAAA;AAEJ;AAAA;AArOI,cAFiB,wBAEV,SAAQ;AACf,cAHiB,wBAGV,gBAAe;AAAA,EAClB,UAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcX,iBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOlB,mBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMpB,6BAA8B;AAAA,EAC9B,YAAa;AACjB;AAwMJ,uBAAuB,eAAe;AACtC,uBAAuB,SAAS;AAA0B,mBAAmB,gBAAgB,wBAAwB,OAAO,cAAc;;;AC3W1I,IACI,mBAAmB;AAAA,EACf,mBAAoB;AAAA,EACpB,eAAoB;AACxB;AAJJ,IAKI,cAAc,CAAC;AAiEnB,IAAqB,oBAArB,cAA+C,eAAe;AAAA,EAA9D;AAAA;AAEI;AAAA,sCAAa,CAAC;AACd,mCAAU,CAAC;AAAA;AAAA,EACX,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,WAAW,eAAe;AACtB,WAAO;AAAA,MACH,SAAU;AAAA,IACd;AAAA,EACJ;AAAA,EACA,WAAW,eAAe;AACtB,WAAO;AAAA,MACH,QAAS;AAAA,QACL;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MACA,OAAQ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA,EAEA,YAAY;AACR,UAAM,UAAU,GAAG,SAAS;AAC5B,SAAK,OAAO,WAAW,IAAI;AAAA,MACvB,YAAa,KAAK;AAAA,MAClB,SAAa;AAAA,IACjB,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,kBAAkB,QAAQ,OAAO,MAAM;AAnH3C;AAoHQ,UACI,KAAa,MACb;AAAA,MACI;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,UAAgB,GAAG;AAAA,MACnB,gBAAgB;AAAA,IACpB,IAAa,QACb,EAAE,OAAO,IAAI,IACb,aAAa,OAAO,aAAa,SAAS,OAAO;AAErD,QAAI,iBAAkB,OAAO,kBAAkB,OAAO;AACtD,UAAM,EAAE,YAAY,IAAI;AACxB,QAAI,aAAa;AACb,gBAAU,kBAAkB,OAAO,SAAS,0BAA0B,KAAK,MAAM;AAAA,IACrF;AACA,QAAI,eAAe;AACf,SAAG,WAAW,SAAS,GAAG,QAAQ,SAAS;AAAA,IAC/C;AACA,QAAI,GAAG,UAAU;AAEb;AAAA,IACJ;AACA,QAAI,UAAU;AACV,SAAG,iBAAiB,MAAM;AAC1B;AAAA,IACJ;AACA,OAAG,QAAQ,KAAK,MAAM;AACtB,QAAI;AACJ,QAAI,OAAO,aAAa;AACpB,aAAO,OAAO,kBAAkB,YAAY,MAAM,EAAE,OAAQ,WAAW,KAAM,QAAQ,CAAC;AAAA,IAC1F,OACK;AACD,UAAI,gBAAgB;AAEhB,yBAAiB,OAAO,MAAM,QAAQ,cAAc;AAAA,MACxD;AACA,aAAO,OAAO,kBAAkB,gBAAgB,MAAM,MAAM,EAAE,OAAQ,WAAW,KAAM,QAAQ,GAAG,CAAC,cAAc;AAAA,IACrH;AACA,QAAI,CAAC,MAAM;AAEP;AAAA,IACJ;AACA,QAAI,SAAS;AACT,UAAI,OAAO,cAAc;AACrB,aAAK,QAAQ,SAAS,GAAG,SAAS,CAAC;AAAA,MACvC,OACK;AACD,aAAK,QAAQ,GAAG,SAAS,GAAG,OAAO;AAAA,MACvC;AAAA,IACJ;AACA,OAAG,WAAW;AAAA,MACV,KAAK,UAAU;AAAA,QACX,UAAW;AAAA,UACP;AAAA,YACI,OAAQ;AAAA,YACR,MAAQ;AAAA,UACZ;AAAA,QACJ;AAAA,QACA,SAAU,cAAc;AAAA,UACpB,QAAS;AAAA,QACb,IAAI;AAAA,QACJ,OAAQ;AAAA,UACJ,2BAAsD;AAAA,UACtD,CAAC,OAAO,GAAG,GAA2C,OAAO;AAAA,UAC7D,CAAC,OAAO,SAAS,iCAAiC,GAAI;AAAA,QAC1D;AAAA,MACJ,GAAG,IAAI;AAAA,IACX;AACA,QAAI,MAAM;AACN,SAAG,KAAK;AAAA,IACZ;AACA,iBAAO,eAAP,gCAAoB,WAAS,MAAM,kBAAkB,QAAQ,IAAI;AAAA,EACrE;AAAA,EACA,OAAO;AACH,YAAQ,KAAK;AAAA,MACT,eAAgB,KAAK;AAAA,MACrB,WAAgB;AAAA,QACZ,cAAe;AAAA,QACf,UAAe,KAAK;AAAA,MACxB;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EACA,iBAAiB,UAAU;AACvB,SAAK,mBAAmB;AAAA,MACpB,OAAO,OAAO,CAAC,GAAG,UAAU;AAAA,QACxB,cAAe,SAAS,eAAe,MAAM;AAAA,QAC7C,OAAc;AAAA,QACd,UAAc;AAAA,QACd,WAAc,KAAK,OAAO;AAAA,QAC1B,SAAc,SAAS;AAAA,MAC3B,CAAC;AAAA,MACD,OAAO,OAAO,CAAC,GAAG,UAAU;AAAA,QACxB,cAAe,SAAS,eAAe,MAAM;AAAA,QAC7C,OAAc;AAAA,QACd,UAAc;AAAA,QACd,WAAc,SAAS;AAAA,QACvB,SAAc,KAAK,OAAO;AAAA,MAC9B,CAAC;AAAA,IACL,GAAG,EAAE,eAAgB,SAAS,cAAc,CAAC;AAAA,EACjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,mBAAmB,WAAW,UAAU,CAAC,GAAG;AACxC,UACI,KAAK,MACL;AAAA,MACI,gBAAgB;AAAA,IACpB,IAAK;AACT,QAAI,eAAe;AACf,kBAAY,UAAU,MAAM;AAC5B,SAAG,WAAW,SAAS,GAAG,QAAQ,SAAS;AAAA,IAC/C;AACA,QAAI,GAAG,UAAU;AACb;AAAA,IACJ;AACA,cAAU,QAAQ,cAAY;AAI1B,SAAG,kBAAkB,SAAS,oBAAoB,WAAW,OAAO,eAAe,UAAU,gBAAgB,GAAG,KAAK;AAAA,IACzH,CAAC;AACD,OAAG,KAAK;AAAA,EACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,qBAAqB,UAAU,OAAO;AA5PhD;AA6PQ,UACI,KAAa,MACb,EAAE,OAAO,IAAI;AACjB,QAAI,SAAS;AACT,gBAAU,kBAAkB,OAAO,SAAS,0BAA0B,KAAK,MAAM;AAAA,IACrF;AACA,UAAM,KAAK,GAAG,YAAY,QAAQ,EAAE,QAAQ,aAAW;AACnD,UAAI,SAAS;AACT,gBAAQ,MAAM,UAAU;AACxB,WAAG,kBAAqB,YAAY,gBAAgB;AAAA,UAChD;AAAA,UACA,UAAW;AAAA,UACX,SAAW;AAAA,UACX,SAAW,MAAM;AACb,eAAG,WAAW,SAAS,GAAG,QAAQ,SAAS;AAC3C,eAAG,KAAK;AAAA,UACZ;AAAA,QACJ,CAAC;AAAA,MACL,OACK;AACD,WAAG,WAAW,SAAS,GAAG,QAAQ,SAAS;AAC3C,WAAG,KAAK;AAAA,MACZ;AAAA,IACJ,CAAC;AACD,iBAAO,eAAP,gCAAoB,WAAS,MAAM,qBAAqB,OAAO;AAAA,EACnE;AAAA,EACA,IAAI,cAAc;AACd,QAAI,CAAC,KAAK,cAAc;AACpB,WAAK,eAAe,UAAU,cAAc;AAAA,QACxC,QAAgB,KAAK,OAAO;AAAA,QAC5B,eAAgB;AAAA,QAChB,OAAgB;AAAA,MACpB,CAAC;AAAA,IACL;AACA,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,4BAA4B;AACxB,SAAK,cAAc;AAAA,EACvB;AAAA,EACA,gBAAgB;AACZ,QAAI,KAAK,QAAQ,SAAS,GAAG;AACzB,WAAK,mBAAmB,KAAK,OAAO;AAAA,IACxC;AAAA,EACJ;AAAA,EACA,eAAe,UAAU,KAAK;AAC1B,QAAI,UAAU;AACV,WAAK,qBAAqB;AAAA,IAC9B;AACA,UAAM,eAAe,UAAU,GAAG;AAAA,EACtC;AAAA;AAAA,EAEA,IAAI,eAAe;AAAA,EAAC;AACxB;AACA,kBAAkB,SAAS;AAAqB,mBAAmB,gBAAgB,mBAAmB,OAAO,CAAC,gBAAgB,OAAO,CAAC;;;AC5StI,IAAqB,0BAArB,MAA6C;AAAA,EAEzC,YAAY,EAAE,UAAU,QAAQ,MAAM,GAAG;AACrC,WAAO,OAAO,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA;AAAA,IACJ,CAAC;AACD,WAAO,OAAO,IAAI;AAAA,EACtB;AACJ;AA1BI,cADiB,yBACV,SAAQ;AA2BnB,wBAAwB,SAAS;;;ACwLjC,IAAqB,eAArB,cAA0C,kCAA0B,2BAAmB,0BAAkB,wBAAwB,CAAC,CAAC,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAqFjI,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyQA,WAAW,gBAAgB;AACvyNH,oBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASrB,sBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASvB,iBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASlB,sBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASvB,oBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQrB,2BAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQ5B,sBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQvB,iBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQlB,sBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQvB,oBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASrB,eAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOhB,8BAA+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAc/B,kBAAmB;AAAA,MACnB,sBAAuB,CAAC;AAAA,MACxB,UAAW;AAAA,IACf;AAAA,EACJ;AAAA,EACA,WAAW,eAAe;AACtB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAkBH,WAAY;AAAA,IAChB;AAAA,EACJ;AAAA;AAAA,EAEA,IAAI,YAAY;AACZ,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA,EAGA,IAAI,YAAY;AACZ,WAAO,KAAK,qBAAqB;AAAA,EACrC;AAAA,EACA,gBAAgB,WAAW;AACvB,SAAK,qBAAqB,OAAO;AAAA,EACrC;AAAA;AAEJ;AACA,aAAa,SAAS;;;ACn5BtB,IAAO,qCAAQ,YAAU,MAAM,oCAAoC,UAAU,MAAM;AAAA,EAC/E,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,WAAW,eAAe;AACtB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAoDH,aAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAUd,2BAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAU5B,4BAA6B;AAAA,IACjC;AAAA,EACJ;AAAA;AAAA,EAEA,0BAA0B,aAAa,gBAAgB;AACnD,UAAM,KAAK;AACX,QAAI,CAAC,GAAG,eAAe;AACnB,SAAG,aAAa;AAAA,IACpB;AACA,UAAM,0BAA0B,aAAa,cAAc;AAAA,EAC/D;AAAA;AAAA,EAEA,eAAe,QAAQ;AACnB,aAAS,MAAM,eAAe,MAAM;AACpC,QAAI,cAAc,QAAQ;AACtB,aAAO,OAAO;AAAA,IAClB;AACA,WAAO;AAAA,EACX;AAAA,EACA,eAAe;AACX,UAAM,KAAK;AACX,QAAI,GAAG,SAAS;AACZ,iBAAW,OAAO,GAAG,SAAS;AAC1B,WAAG,QAAQ,GAAG,EAAE,QAAQ;AACxB,eAAO,GAAG,QAAQ,GAAG;AAAA,MACzB;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,sBAAsB,aAAa;AAC/B,UAAM,KAAK;AACX,QAAI,CAAC,GAAG,cAAc;AAClB,aAAO;AAAA,IACX;AACA,UAAM,EAAE,mBAAmB,WAAW,IAAI;AAC1C,QAAI,CAAC,GAAG,SAAS;AACb,SAAG,UAAU,CAAC;AAAA,IAClB;AACA,UAAM,EAAE,QAAQ,IAAI;AACpB,YAAQ,YAAY,MAAM;AAAA,MAEtB,KAAK,SAAS;AACV,YAAI,CAAC,QAAQ,iBAAiB;AAC1B,kBAAQ,kBAAkB,GAAG,2BAA2B,IAAI;AAAA,YACxD,WAA8B;AAAA,YAC9B;AAAA,YACA,wBAA8B,WAAW;AAAA,YACzC,6BAA8B;AAAA,YAC9B,gBAA8B;AAAA,UAClC,GAAG,WAAW;AAAA,QAClB;AACA,eAAO,QAAQ;AAAA,MACnB;AAAA,MAEA,KAAK,QAAQ;AACT,YAAI,CAAC,QAAQ,gBAAgB;AACzB,kBAAQ,iBAAiB,GAAG,0BAA0B,IAAI;AAAA,YACtD,WAA8B;AAAA,YAC9B;AAAA,YACA,wBAA8B,WAAW;AAAA,YACzC,6BAA8B;AAAA,YAC9B,gBAA8B;AAAA,UAClC,GAAG,WAAW;AAAA,QAClB;AACA,eAAO,QAAQ;AAAA,MACnB;AAAA,MACA,KAAK,YAAY;AAEb,eAAO;AAAA,UACH,MAAsB;AAAA,UACtB,WAAsB;AAAA,UACtB,aAAsB,YAAY;AAAA,UAClC,qBAAsB,YAAY;AAAA,QACtC;AAAA,MACJ;AAAA,MACA;AACI,eAAO;AAAA,IACf;AAAA,EACJ;AAAA,EACA,IAAI,cAAc;AAAA,EAAC;AACvB;;;ACxKA,SAAS,mBAAmB,OAAO;AAC/B,SAAO;AAAA,IACH,YAAa;AAAA,MACT;AAAA,IACJ;AAAA,EACJ;AACJ;AAwGA,IAAqB,oBAArB,cAA+C,kBAAkB,MAAM,yBAAiB,oCAA4B,uBAAe,EAAE;AAAA;AAAA;AAAA,EAuLjI,IAAI,WAAW;AACX,WAAO,MAAM;AAAA,EACjB;AAAA,EACA,IAAI,SAAS,UAAU;AACnB,UAAM,kBAAkB,KAAK;AAC7B,UAAM,WAAW;AACjB,QAAI,KAAK,WAAW,CAAC,YAAa,mBAAmB,oBAAoB,UAAW;AAChF;AAAA,IACJ;AACA,SAAK,UAAU,IAAI;AAAA,MACf,MAAiB;AAAA,MACjB,gBAAiB;AAAA,MACjB,SAAiB;AAAA,IACrB,CAAC;AAAA,EACL;AAAA,EACA,iBAAiB;AACb,UAAM,eAAe;AACrB,UAAM,KAAK;AACX,OAAG,+BAA+B,GAAG,6BAA6B,KAAK,EAAE;AACzE,OAAG,0BAA0B,GAAG,wBAAwB,KAAK,EAAE;AAAA,EACnE;AAAA,EACA,YAAY;AA1UhB;AA2UQ,UAAM,UAAU,GAAG,SAAS;AAE5B,UAAM,SAAQ,gBAAK,SAAQ,aAAb;AACd,QAAI,SAAS,KAAK,iBAAiB;AAC/B,YAAM,iBAAiB,KAAK,eAAe;AAAA,IAC/C;AAAA,EACJ;AAAA,EACA,wBAAwB,QAAQ;AAlVpC;AAmVQ,QAAI,CAAC,QAAQ;AAET,iBAAW,CAACC,SAAQ,MAAM,MAAK,UAAK,sBAAsB,MAA3B,mBAA8B,WAAW;AACpE,cAAAA,QAAO,iBAAP,wBAAAA,SAAsB;AAAA,MAC1B;AAAA,IACJ;AACA,UAAM,wBAAwB,GAAG,SAAS;AAAA,EAC9C;AAAA;AAAA;AAAA,EAGA,YAAY,SAAS;AACjB,SAAK,gBAAgB,0BAA0B;AAC/C,YAAQ,IAAI;AAAA,MACR,MAAwB;AAAA,MACxB,SAAwB;AAAA,MACxB,uBAAwB;AAAA,MACxB,qBAAwB;AAAA,MACxB,mBAAwB;AAAA,MACxB,SAAU;AAAA,IACd,CAAC;AAAA,EACL;AAAA,EACA,cAAc,SAAS;AACnB,SAAK,YAAY,OAAO;AAExB,SAAK,cAAc;AACnB,SAAK,QAAQ,QAAQ;AAAA,EACzB;AAAA;AAAA;AAAA,EAGA,eAAe;AACX,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,kBAAkB,OAAO,MAAM,QAAQ;AACnC,WAAO,KAAK,QAAQ,IAAI,oBAAoB,OAAO,MAAM,MAAM;AAAA,EACnE;AAAA,EACA,oCAAoC;AAChC,UAAM,KAAK;AAIX,QAAI,GAAG,WAAW;AAEd,YAAM,cAAc,EAAE,aAAc,GAAG,oBAAoB,EAAE;AA4B7D,SAAG,QAAQ,uBAAuB,WAAW;AAE7C,SAAG,wBAAwB,GAAG,cAAc,YAAY;AACxD,SAAG,oBAAoB;AAAA,IAC3B;AAAA,EACJ;AAAA,EACA,kBAAkB,OAAO;AACrB,SAAK,oBAAoB;AAAA,EAC7B;AAAA,EACA,IAAI,aAAa;AAlarB;AAmaQ,YAAO,UAAK,YAAL,mBAAc;AAAA,EACzB;AAAA,EACA,IAAI,WAAW,YAAY;AACvB,UAAM,aAAa;AAAA,EACvB;AAAA,EACA,6BAA6B,OAAO,MAAM;AACtC,WAAO,KAAK,8BACN,KAAK,kBAAkB,OAAO,MAAM,SAAS,WAAW,IACxD,WAAW,eAAe,OAAO,IAAI;AAAA,EAC/C;AAAA,EACA,6BAA6B,OAAO,MAAM;AACtC,WAAO,KAAK,8BACN,KAAK,kBAAkB,OAAO,SAAS,aAAa,IAAI,IACxD,WAAW,GAAG,MAAM,KAAK;AAAA,EACnC;AAAA,EACA,oBAAoB,YAAY;AAC5B,WAAO,GAAG,WAAW,KAAK,GAAG,WAAW,mBAAmB,WAAW,IAAI,CAAC;AAAA,EAC/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBA,oBAAoB,UAAU,MAAM;AApcxC;AAscQ,QAAI,GAAC,UAAK,YAAL,mBAAc,QAAO;AACtB;AAAA,IACJ;AACA,UACI,EAAE,SAAS,IAAI,MACf,cAAwB,CAAC;AAC7B,eAAW,YAAY,SAAS;AAChC,WAAO,QAAQ,SAAS;AACxB,QAAI;AAEJ,QAAI,aAAa,GAAG;AAEhB,aAAW,WAAW,eAAe,IAAI;AACzC,iBAAW,KAAK;AAAA,QACZ,KAAK,8BAA8B,KAAK,kBAAkB,UAAU,SAAS,MAAM,IAAI,IACjF,WAAW,GAAG,MAAM,UAAU,SAAS,IAAI;AAAA,MACrD;AAAA,IACJ;AAEA,eAAW,UAAU,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG;AAElC,UAAI,EAAE,WAAW,SAAS;AACtB,oBAAY,WAAW;AACvB;AAAA,MACJ;AAAA,IACJ;AAEA,QAAI,CAAC,WAAW;AACZ,kBAAY;AAAA,IAChB;AACA,aAAS,QAAQ,WAAW,SAAS,UAAU,SAAS,WAAW;AAC/D,kBAAY,KAAK;AAAA,QACb;AAAA,MACJ,CAAC;AAAA,IACL;AACA,UAAM,YAAY,YAAY,YAAY,SAAS,CAAC;AAEpD,cAAU,OAAO;AACjB,cAAU,OAAO,KAAK,oBAAoB,SAAS;AACnD,WAAO;AAAA,EACX;AAAA,EACA,iBAAiB,YAAY;AACzB,UAAM,KAAK;AAGX,OAAG,sBAAsB;AACzB,UAAM,iBAAiB,GAAG,SAAS;AACnC,OAAG,sBAAsB;AAOzB,QAAI,GAAG,QAAQ,4BAA4B,GAAG,WAAW;AACrD,SAAG,yBAAyB;AAAA,IAChC;AAAA,EACJ;AAAA,EACA,sBAAsB;AAClB,SAAK,kBAAkB;AACvB,SAAK,wBAAwB;AAAA,EACjC;AAAA,EACA,uBAAuB;AACnB,UACI,KAAQ,MACR,QAAQ,GAAG,QAAQ,SAAS;AAChC,QAAI,CAAC,GAAG,iBAAiB;AACrB,SAAG,kBAAkB,MAAM,cAAc,mBAAmB,IAAI,CAAC;AAAA,IACrE,OACK;AACD,YAAM,oBAAoB,MAAM,KAAK,GAAG,eAAe;AACvD,SAAG,QAAQ,sBAAsB,iBAAiB;AAAA,IACtD;AACA,OAAG,gBAAgB,aAAa,OAAO,IAAI,kBAAkB;AAAA,MACzD,0BAA2B;AAAA,MAC3B,WAA2B,GAAG,SAAS,MAAM,IAAI,UAAQ;AACrD,eAAO;AAAA,UACH,WAAY,KAAK;AAAA,UACjB,SAAY,KAAK;AAAA,UACjB,WAAY;AAAA,QAChB;AAAA,MACJ,CAAC;AAAA,IACL,CAAC,CAAC;AAGF,OAAG,kBAAkB;AACrB,WAAO,GAAG;AAAA,EACd;AAAA,EACA,iCAAiC;AAC7B,SAAK,eAAe;AAAA,EACxB;AAAA,EACA,+BAA+B;AAC3B,SAAK,cAAc,KAAK;AAAA,EAC5B;AAAA,EACA,yBAAyB;AACrB,UAAM,EAAE,QAAQ,IAAI;AACpB,WAAO,QAAQ,iBAAiB,KAAK,wBACjC,QAAQ,gBAAgB,KAAK,uBAC7B,QAAQ,gBAAgB,KAAK;AAAA,EACrC;AAAA,EACA,yBAAyB,EAAE,QAAQ,iBAAiB,aAAa,GAAG;AAChE,QAAI,cAAc;AACd,YAAM,KAAK;AACX,UAAI,CAAC,GAAG,iBAAiB;AACrB,WAAG,yBAAyB;AAAA,MAChC;AAEA,UAAI,GAAG,+BAA+B,GAAG,uBAAuB,GAAG;AAC/D,WAAG,uBAAuB,OAAO;AACjC,WAAG,sBAAsB,OAAO;AAChC,WAAG,sBAAsB,OAAO;AAEhC,cAAM,cAAc,EAAE,aAAc,GAAG,oBAAoB,EAAE;AAC7D,WAAG,QAAQ,uBAAuB,WAAW;AAE7C,WAAG,wBAAwB,GAAG,cAAc,YAAY;AAAA,MAC5D;AAEA,UAAI,CAAC,GAAG,WAAW,UAAU,GAAG,WAAW,OAAO,MAAM,MAAM;AAC1D,WAAG,WAAW,aAAa;AAAA,MAC/B,WAES,iBAAiB;AACtB,WAAG,YAAY;AAAA,MACnB;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,qBAAqB,OAAO;AACxB,UAAM,qBAAqB,KAAK;AAChC,QAAI,KAAK,MAAM,UAAU,GAAG;AAExB,WAAK,gBAAgB,OAAO,CAAC;AAC7B,WAAK,gBAAgB,QAAQ;AAAA,IACjC;AAAA,EACJ;AAAA,EACA,sBAAsB,QAAQ,WAAW;AACrC,UAAM,KAAK;AACX,QAAI,CAAC,WAAW;AACZ,YAAM,EAAE,OAAO,IAAI;AACnB,UAAI,CAAC,GAAG,iBAAiB,OAAO,WAAW;AACvC,eAAO,YAAY;AAAA,MACvB;AACA,eAAS,MAAM,sBAAsB,GAAG,SAAS;AAAA,IACrD;AACA,WAAO;AAAA,EACX;AAAA,EACA,cAAc,YAAY,OAAO,OAAO,QAAQ;AAC5C,QAAI,MAAM,iBAAiB;AACvB,YACI,EAAE,SAAS,IAAI,MACf,QAAQ,MAAM,OAAO,KAAK,GAC1B,cAAc,OAAO,UAAU,IAAI,MAAM;AAC7C,iBAAW,SAAS,gBAAgB,QAAQ,WAAW,WAAW,SAAS;AAC3E,iBAAW,IAAI,IAAI,WAAW;AAC9B,aAAO;AAAA,IACX;AAAA,EACJ;AAAA;AAAA,EAEA,oBAAoB,QAAQ,YAAY,OAAO;AAC3C,QAAI,OAAO,OAAO,UAAU;AACxB,cAAQ,MAAM;AAAA,QACV,KAAK,MAAM;AACP,iBAAO;AAAA,QACX,KAAK,MAAM;AACP,iBAAO;AAAA,MACf;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,IAAI,kBAAkB;AAClB,UACI,KAAS,MACT,SAAS,GAAG;AAChB,QAAI,YAAY,GAAG;AACnB,QAAI,CAAC,aAAa,GAAG,kBAAkB,QAAQ;AAC3C,kBAAY,aAAa,IAAI,GAAG,cAAc,MAAM;AACpD,SAAG,mBAAmB;AAAA,IAC1B;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,cAAc,QAAQ,MAAM,iBAAiB,KAAK,gBAAgB;AAloBtE;AAooBQ,QAAI,GAAC,UAAK,YAAL,mBAAc,QAAO;AACtB;AAAA,IACJ;AACA,UAAM,EAAE,WAAW,gBAAgB,IAAI;AACvC,WAAO,QAAQ;AACf,UACI,gBAAgB,WAAW,mBAAmB,IAAI,GAClD,gBAAgB,KAAK,6BAA6B,QAAQ,IAAI;AAClE,WAAO,gBAAgB,OAAO,aAAa,KAAK,iBAAiB,gBAAgB;AAAA,EACrF;AAAA,EACA,sBAAsB;AAClB,UACI,EAAE,YAAY,kBAAkB,SAAS,IAAI,MAC7C,cAA6C,oBAAoB;AACrE,WAAO,WAAW,aAAa,SAAS,MAAM,WAAW,IAAI,IAAI,SAAS,OAAO;AAAA,EACrF;AAAA,EACA,eAAe,EAAE,MAAM,GAAG;AACtB,UACI,KAAe,MACf,EAAE,SAAS,IAAI;AACnB,QAAI,SAAS;AACb,QAAI,MAAM,iBAAiB;AACvB,YACI,OAAgB,GAAG,oBAAoB,GAAG,SAAS,GACnD,YAAgB,GAAG,cAAc,MAAM,QAAQ,IAAI,GACnD,YAAgB,GAAG,cAAc,MAAM,WAAW,IAAI,GACtD,gBAAgB,GAAG,EAAE,0BAA0B;AACnD,UACI,aAAoB,KACpB,eAAoB,GAAG,EAAE,uBAAuB,GAChD,oBAAoB;AACxB,UAAI,WAAW,aAAa,SAAS,MAAM,SAAS,GAAG,MAAM,GAAG;AAC5D,uBAAe,GAAG,EAAE,sBAAsB;AAAA,MAC9C,WACS,WAAW,aAAa,SAAS,MAAM,SAAS,MAAM,KAAK,GAAG;AACnE,qBAAa;AAAA,MACjB,WACS,WAAW,aAAa,SAAS,MAAM,SAAS,IAAI,KAAK,GAAG;AACjE,qBAAa;AAAA,MACjB;AACA,UAAI,mBAAmB,CAAC,GAAG,MAAM,mBAAmB,QAAQ,CAAC,EACxD,OAAO,CAAC,CAAC,UAAU,IAAI,MAAM,KAAK,MAAM,EACxC,KAAK,CAAC,CAAC,MAAM,MAAM,GAAG,CAAC,MAAM,MAAM,MAAM,OAAO,SAAS,OAAO,SAAS,KAAK,CAAC;AACpF,UAAI,iBAAiB,SAAS,GAAG,4BAA4B;AACzD,4BAAoB,SAAS,GAAG,EAAE,aAAa,EAAE,QAAQ,WAAW,iBAAiB,SAAS,GAAG,0BAA0B;AAC3H,2BAAmB,iBAAiB,MAAM,GAAG,KAAK,0BAA0B;AAAA,MAChF;AACA,YAAM,cAAc,iBAAiB,IAAI,CAAC,CAAC,UAAU,IAAI,MAAM;AAC3D,eAAO,cAAc,QAAQ,cAAc,aAAa,WAAW,SAAS,IAAI,CAAC,EAC5E,QAAQ,eAAe,GAAG,cAAc,KAAK,QAAQ,IAAI,CAAC,EAC1D,QAAQ,eAAe,GAAG,cAAc,KAAK,WAAW,IAAI,CAAC,EAC7D,QAAQ,SAAS,KAAK,kBAAkB,oBAAoB,KAAK,mBAAmB,qBAAqB,EAAE;AAAA,MACpH,CAAC,EAAE,KAAK,MAAM,IAAI;AAClB,eAAS,aACJ,QAAQ,iBAAiB,WAAW,EACpC,QAAQ,eAAe,WAAW,OAAO,MAAM,KAAK,WAAW,UAAU,CAAC,EAC1E,QAAQ,aAAa,WAAW,OAAO,MAAM,KAAK,SAAS,UAAU,CAAC,EACtE,QAAQ,eAAe,SAAS,EAChC,QAAQ,eAAe,SAAS,EAChC,QAAQ,SAAS,MAAM,kBAAkB,oBAAoB,MAAM,mBAAmB,qBAAqB,EAAE;AAClH,eAAS,wCAAwC,MAAM;AAAA,IAC3D;AACA,WAAO;AAAA,EACX;AAAA,EACA,kBAAkB,EAAE,MAAM,GAAG;AACzB,UACI,KAAe,MACf,EAAE,SAAS,IAAI;AACnB,QAAI,SAAS;AACb,QAAI,MAAM,iBAAiB;AACvB,YACI,OAAa,GAAG,oBAAoB,GACpC,YAAa,GAAG,cAAc,MAAM,QAAQ,IAAI,GAChD,YAAa,GAAG,cAAc,MAAM,WAAW,IAAI;AACvD,UACI,aAAe,KACf,eAAe,GAAG,EAAE,kBAAkB;AAC1C,UAAI,WAAW,aAAa,SAAS,MAAM,SAAS,GAAG,MAAM,GAAG;AAC5D,uBAAe,GAAG,EAAE,iBAAiB;AAAA,MACzC,WACS,WAAW,aAAa,SAAS,MAAM,SAAS,MAAM,KAAK,GAAG;AACnE,qBAAa;AAAA,MACjB,WACS,WAAW,aAAa,SAAS,MAAM,SAAS,IAAI,KAAK,GAAG;AACjE,qBAAa;AAAA,MACjB;AACA,eAAS,aACJ,QAAQ,eAAe,WAAW,OAAO,MAAM,KAAK,WAAW,UAAU,CAAC,EAC1E,QAAQ,aAAa,WAAW,OAAO,MAAM,KAAK,SAAS,UAAU,CAAC,EACtE,QAAQ,eAAe,SAAS,EAChC,QAAQ,eAAe,SAAS,EAChC,QAAQ,SAAS,MAAM,kBAAkB,oBAAoB,MAAM,mBAAmB,qBAAqB,EAAE;AAClH,UAAI,MAAM,UAAU;AAChB,iBAAS,OACJ,QAAQ,cAAc,aAAa,WAAW,MAAM,SAAS,IAAI,CAAC;AAAA,MAC3E;AACA,eAAS,wCAAwC,MAAM;AAAA,IAC3D;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,uBAAuB;AACnB,UACI,EAAE,YAAY,mBAAmB,SAAS,IAAI,MAC9C,cAA8C,qBAAqB;AACvE,WAAO,WAAW,aAAa,SAAS,MAAM,WAAW,IAAI,IAAI,SAAS,OAAO;AAAA,EACrF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmCA,kBAAkB,OAAO,OAAO;AAC5B,UACI,OAAkB,KAAK,OACvB,EAAE,YAAY,IAAI;AACtB,QAAI,SAAS;AACb,QAAI,eAAe,MAAM,iBAAiB;AACtC,YAAM,OAAO,KAAK,qBAAqB;AACvC,eAAa,KAAK,cAAc,MAAM,QAAQ,IAAI;AAAA,IACtD;AACA,WAAO;AAAA,EACX;AAAA,EACA,oBAAoB,OAAO;AACvB,UAAM,KAAK;AACX,OAAG,iBAAiB;AACpB,UAAM,SAAS,GAAG;AAElB,QAAI,CAAC,QAAQ;AACT;AAAA,IACJ;AACA,UAAM,EAAE,OAAO,IAAI;AACnB,QAAI,CAAC,OAAO;AACR,UAAI,OAAO,WAAW;AAClB,WAAG,mBAAmB,OAAO;AAC7B,eAAO,YAAY;AAAA,MACvB;AAAA,IACJ,WACS,OAAO,UAAU,UAAU;AAChC,aAAO,YAAY;AAAA,IACvB,WACS,OAAO,GAAG,qBAAqB,UAAU;AAC9C,aAAO,YAAY,GAAG;AAAA,IAC1B,OACK;AACD,aAAO,YAAY;AAAA,QACf,IAAQ;AAAA,QACR,MAAQ;AAAA,QACR,OAAQ;AAAA,MACZ;AAAA,IACJ;AACA,OAAG,oBAAoB;AAAA,EAC3B;AAAA,EACA,4BAA4B,OAAO;AAn0BvC;AAq0BQ,eAAK,sBAAsB,MAA3B,mBAA8B,QAAQ,sBAAoB,iBAAiB,wBAAwB;AAAA,EACvG;AAAA;AAAA;AAAA,EAGA,mCAAmC;AAC/B,UAAM,KAAK;AAEX,QAAI,CAAC,GAAG,qBAAqB;AACzB,YAAM,EAAE,MAAM,UAAU,IAAI,GAAG;AAE/B,UAAI,SAAS,GAAG,qBAAqB,cAAc,GAAG,wBAAwB;AAE1E,WAAG,oBAAoB;AACvB,WAAG,yBAAyB;AAE5B,cACI,cAAc,GAAG,oBAAoB,GACrC,cAAc,EAAE,YAAY;AAEhC,WAAG,QAAQ,uBAAuB,WAAW;AAC7C,WAAG,wBAAwB,GAAG,cAAc,YAAY;AAAA,MAC5D;AACA,SAAG,qBAAqB;AAAA,IAC5B;AAAA,EACJ;AAAA,EACA,sBAAsB;AAAA,EAAC;AAAA,EACvB,2BAA2B;AACvB,UAAM,KAAK;AAEX,QAAI,CAAC,GAAG,qBAAqB;AACzB,UAAI,GAAG,QAAQ,OAAO;AAClB,WAAG,iCAAiC;AAAA,MACxC,OAEK;AACD,WAAG,QAAQ,IAAI;AAAA,UACX,aAAa;AACT,eAAG,iCAAiC;AAAA,UACxC;AAAA,UACA,SAAU;AAAA,UACV,MAAU;AAAA,QACd,CAAC;AAAA,MACL;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA,EAGA,0BAA0B,kBAAkB,QAAQ;AAChD,WAAO,iBAAiB,WAAW;AAAA,EACvC;AAAA,EACA,aAAa;AACT,UAAM,KAAK;AACX,QAAI,CAAC,GAAG,mBAAmB,GAAG,QAAQ,0BAA0B;AAI5D,SAAG,yBAAyB;AAE5B,UAAI,CAAC,GAAG,SAAS,aAAa,CAAC,GAAG,SAAS,SAAS;AAChD,WAAG,SAAS,QAAQ;AAAA,UAChB,WAAY,GAAG;AAAA,UACf,SAAY,GAAG;AAAA,QACnB;AAAA,MACJ;AAAA,IACJ;AACA,WAAO,MAAM,WAAW,GAAG,SAAS;AAAA,EACxC;AAAA,EACA,MAAM,gBAAgB;AAClB,UAAM,cAAc,GAAG,SAAS;AAChC,UAAM,KAAK,QAAQ,YAAY;AAAA,EACnC;AAAA,EACA,MAAM,YAAY;AACd,UAAM,UAAU,GAAG,SAAS;AAC5B,UAAM,KAAK,QAAQ,YAAY;AAAA,EACnC;AAAA,EACA,0BAA0B;AAEtB,SAAK,uBAAuB;AAC5B,SAAK,yBAAyB;AAAA,EAClC;AAAA,EACA,6BAA6B,YAAY;AACrC,QAAI,CAAC,KAAK,cAAc;AAEpB,WAAK,sBAAsB,WAAW,UAAU,WAAW,KAAK;AAAA,IACpE;AAAA,EACJ;AAAA,EACA,8BAA8B,UAAU;AACpC,WAAO,KAAK,QAAQ,4BAA4B,IAAI;AAAA,MAChD,uBAAwB,KAAK;AAAA,MAC7B,OAAwB,KAAK;AAAA,MAC7B;AAAA,IACJ,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,MAAM,wBAAwB,QAAQ;AAClC,UACI,KAAK,MACL,EAAE,QAAQ,IAAI;AAElB,WAAO,CAAC,GAAG,mBAAmB,CAAC,QAAQ,0BAA0B;AAC7D,YAAM,QAAQ,MAAM,iBAAiB;AAAA,IACzC;AAEA,QAAI,OAAO,OAAO;AACd,YACI,QAAmB,QAAQ,SAAS,GACpC,mBAAmB,GAAG,8BAA8B,MAAM;AAC9D,aAAO,UAAU,gBAAgB;AACjC,YAAM,MAAM,UAAU,iBAAiB,EAAE,UAAU;AAGnD,YAAM,QAAQ,KAAK,MAAM;AACrB,cAAM,YAAY,iBAAiB,EAAE,YAAY,GAAG,4BAA4B;AAAA,MACpF,CAAC;AACD,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EACA,0BAA0B;AACtB,UAAM,wBAAwB,GAAG,SAAS;AAC1C,UAAM,KAAK;AAEX,QAAI,CAAC,GAAG,wBAAwB;AAC5B,SAAG,yBAAyB,GAAG,QAAQ,MAAM,QAAQ,KAAK,GAAG,uBAAuB;AAAA,IACxF;AAAA,EACJ;AAAA,EACA,8BAA8B,SAAS,oBAAoB;AACvD,UAAM,SAAS,MAAM,8BAA8B,SAAS,kBAAkB;AAC9E,QAAI,QAAQ,UAAU,MAAM,GAAG;AAC3B,aAAO,OAAO,KAAK,kBAAkB;AAAA,IACzC;AACA,WAAO,mBAAmB,MAAM;AAAA,EACpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,gCAAgC;AAC5B,WAAO;AAAA,MACH,MAAqB;AAAA,MACrB,QAAqB;AAAA,MACrB,WAAqB;AAAA,MACrB,OAAqB;AAAA,MACrB,SAAqB;AAAA,MACrB,iBAAqB;AAAA,MACrB,oBAAqB,oBAAI,IAAI;AAAA,IACjC;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBA,yBAAyB,KAAK,OAAO,cAAc,aAAa,oBAAoB;AAChF,QAAI,mBAAmB,IAAI,MAAM,UAAU,KAAK;AAChD,QAAI,OAAmB,MAAM;AAC7B,QAAI,kBAAmB,IAAI,mBAAmB,MAAM;AACpD,QAAI,mBAAmB,IAAI,oBAAoB,MAAM;AACrD,QAAI,kBAAmB,IAAI,mBAAmB,MAAM;AACpD,QAAI,MAAM,aAAa;AACnB,UAAI,IAAI,aAAa;AACjB,cAAM,YAAY,QAAQ,gBAAc,IAAI,YAAY,IAAI,UAAU,CAAC;AAAA,MAC3E,OACK;AACD,YAAI,cAAc,IAAI,IAAI,MAAM,WAAW;AAAA,MAC/C;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,yBAAyB,QAAQ;AAC7B,UACI,KAAc,MACd,WAAc,GAAG,iBAAiB,MAAM,GACxC,cAAc,GAAG,oBAAoB,GAAG,SAAS,YAAY,SAAS,MAAM,GAC5E,cAAc,EAAE,aAAa,aAAc,OAAO;AACtD,OAAG,QAAQ,uBAAuB,WAAW;AAC7C,WAAO,YAAY;AAAA,EACvB;AAAA,EACA,wBAAwB,YAAY;AAEhC,QAAI,KAAK,cAAc,WAAW,MAAM,GAAG;AACvC,YACI,cAAc,KAAK,yBAAyB,WAAW,MAAM,GAC7D,WAAc,KAAK,yBAAyB,WAAW;AAC3D,iBAAW,oBAAoB,EAAE,YAAY;AAC7C,iBAAW,kBAAkB,EAAE,GAAG,WAAW,iBAAiB,SAAS;AAAA,IAC3E,OACK;AACD,mBAAa,MAAM,wBAAwB,UAAU;AAAA,IACzD;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA,EAGA,qBAAqB;AACjB,UAAM,KAAK;AAGX,QAAI,GAAG,0BAA0B,GAAG,eAAe,GAAG,aAAa;AAC/D,SAAG,YAAY,QAAQ,gBAAc;AAEjC,YAAI,WAAW,QAAQ,WAAW,MAAM;AACpC,qBAAW,OAAO,GAAG,oBAAoB,UAAU;AAAA,QACvD;AAAA,MACJ,CAAC;AAAA,IACL;AACA,UAAM,mBAAmB,GAAG,SAAS;AAAA,EACzC;AAAA;AAEJ;AAAA;AAj7BI,cAFiB,mBAEV,SAAQ;AACf,cAHiB,mBAGV,QAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASd,cAZiB,mBAYV,gBAAe;AAAA,EAClB,mBAAoB;AAAA,EACpB,kBAAwB;AAAA,EACxB,uBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOxB,cAAe;AAAA,EACf,eAAgB;AAAA,EAChB,oBAAqB;AAAA,EACrB,yBAA0B;AAAA,EAC1B,kCAAmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMnC,gBAAiB;AAAA,EACjB,6BAA8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAW9B,YAAa,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUtB,mBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUpB,kBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMnB,eAAgB;AAAA,EAChB,QAAS;AAAA,IACL,WAAY;AAAA,MACR,MAAQ;AAAA,MACR,OAAQ;AAAA,IACZ;AAAA,IACA,QAAS;AAAA,MACL,MAAQ;AAAA,MACR,OAAQ;AAAA,IACZ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,mBAAmB,EAAE,MAAM,GAAG;AAC1B,QAAI,SAAS;AACb,UAAM,EAAE,iBAAiB,QAAQ,IAAI;AACrC,QAAI,iBAAiB;AACjB,UAAI,SAAS;AACT,iBAAS,KAAK,eAAe,GAAG,SAAS;AAAA,MAC7C,OACK;AACD,iBAAS,KAAK,kBAAkB,GAAG,SAAS;AAAA,MAChD;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,aAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAuDd,4BAA6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAM7B,uBAAwB;AAAA,EACxB,iBAAkB;AAAA,IACd,KAAM;AAAA,EACV;AAAA,EACA,gBAAiB;AACrB;AAgwBJ,kBAAkB,UAAU;AAC5B,kBAAkB,SAAS;;;ACr+B3B,IAAqB,uBAArB,MAAqB,6BAA4B,kBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoJ/D,YAAY;AACR,UAAM,UAAU,GAAG,SAAS;AAC5B,SAAK,WAAW,IAAI;AAAA,MAChB,WAAY;AAAA,MACZ,SAAY;AAAA,IAChB,CAAC;AAAA,EACL;AAAA,EACA,cAAc,SAAS;AACnB,UAAM,QAAQ,KAAK;AACnB,UAAM,cAAc,OAAO;AAI3B,SAAK,QAAQ,SAAS,KAAK,WAAW,OAAO;AAAA,EACjD;AAAA,EACA,oBAAoB,eAAe;AAC/B,SAAK,iBAAiB;AAAA,EAC1B;AAAA,EACA,WAAW,SAAS;AAChB,cAAU,KAAK;AACf,WAAO,yBAAyB,IAAI,EAAE,QAAQ,CAAC;AAAA,EACnD;AAAA;AAAA,EAEA,MAAM,WAAW,gBAAgB;AAC7B,UACI,QAAiB,eAAe,aAAa,QAAQ,OACrD,SAAiB,KAAK,qBAAqB,eAAe,YAAY,GACtE,iBAAiB,MAAM,KAAK,uBAAuB,MAAM,GACzD,QAAiB,KAAK,0BAA0B,gBAAgB,MAAM,EAAE,SAAS,OAAO,EAAE,CAAC;AAC/F,WAAO,KAAK,mBAAmB,EAAE,GAAG,gBAAgB,QAAQ,OAAO,MAAM,CAAC;AAAA,EAC9E;AAAA,EACA,wBAAwB,WAAW,MAAM;AACrC,aAAS,KAAK,sBAAsB,MAAM;AAC1C,QAAI,OAAO,iBAAiB;AACxB,aAAO,MAAM,wBAAwB,QAAQ,GAAG,IAAI;AAAA,IACxD,WACS,OAAO,mBAAmB;AAE/B,aAAO,KAAK,uBAAuB,OAAO,UAAU,GAAG,IAAI;AAAA,IAC/D;AAAA,EACJ;AAAA,EACA,YAAY;AA3QhB;AA4QQ,QAAI,KAAK,eAAe;AACpB,iBAAK,UAAL,mBAAY;AAAA,IAChB;AACA,UAAM,UAAU;AAAA,EACpB;AAAA,EACA,6BAA6B,YAAY;AACrC,UAAM,KAAK;AACX,QAAI,CAAC,GAAG,cAAc;AAClB,YACI,mBAAoB,WAAW,OAC/B,oBAAoB,CAAC,GAAG,WAAW,cAAc,KAAK,CAAC,EAClD,OAAO,CAAC,KAAK,eAAe;AACzB,cAAM,SAAS,GAAG,sBAAsB,UAAU;AAClD,YAAI,QAAQ;AACR,cAAI,KAAK,MAAM;AAAA,QACnB;AACA,eAAO;AAAA,MACX,GAAG,CAAC,CAAC,GACT,iBAAiB,GAAG,sBAAsB,WAAW,QAAQ;AACjE,UAAI,gBAAgB;AAChB,WAAG,sBAAsB,gBAAgB,gBAAgB;AAAA,MAC7D;AACA,iBAAW,oBAAoB,mBAAmB;AAC9C,WAAG,sBAAsB,kBAAkB,gBAAgB;AAAA,MAC/D;AAEA,UAAI,CAAC,GAAG,wBAAwB;AAC5B,WAAG,yBAAyB,GAAG,QAAQ,MAAM,QAAQ,KAAK,GAAG,wBAAwB,KAAK,EAAE,CAAC;AAAA,MACjG;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,sBAAsB,EAAE,KAAK,OAAO,GAAG;AACnC,UAAM,UAAU,KAAK,cAAc,MAAM;AACzC,aAAS,KAAK,sBAAsB,MAAM;AAE1C,QAAI,UAAU;AAAA,MACV,kBAAqB,OAAO,mBAAmB;AAAA,MAC/C,oBAAqB,CAAC,WAAW,OAAO;AAAA,IAC5C,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,sBAAsB,QAAQ;AAC1B,WAAO,OAAO,UAAU,OAAO,aAAa;AAAA,EAChD;AAAA,EACA,sBAAsB,QAAQ;AAC1B,QAAI,SAAS;AACb,QAAI,KAAK,MAAM,4BAA4B;AACvC,eAAS,KAAK,MAAM,iBAAiB,MAAM,KAAK;AAAA,IACpD,WACS,OAAO,UAAU;AACtB,iBAAW,QAAQ,OAAO,QAAQ;AAC9B,YAAI,KAAK,MAAM,SAAS,IAAI,GAAG;AAC3B,iBAAO;AAAA,QACX;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,sBAAsB,QAAQ;AAC1B,QAAI,QAAQ;AACR,eAAS,KAAK,sBAAsB,MAAM;AAAA,IAC9C;AACA,WAAO,MAAM,sBAAsB,MAAM;AAAA,EAC7C;AAAA,EACA,sBAAsB,QAAQ,MAAM;AAChC,aAAS,KAAK,sBAAsB,MAAM;AAC1C,WAAO,MAAM,sBAAsB,QAAQ,IAAI;AAAA,EACnD;AAAA,EACA,sBAAsB,QAAQ;AAC1B,aAAS,KAAK,sBAAsB,MAAM;AAC1C,WAAO,MAAM,sBAAsB,MAAM;AAAA,EAC7C;AAAA,EACA,6BAA6B,QAAQ;AACjC,aAAS,KAAK,sBAAsB,MAAM;AAC1C,WAAO,MAAM,6BAA6B,MAAM;AAAA,EACpD;AAAA,EACA,QAAQ,MAAM;AA/VlB;AAiWQ,UAAI,UAAK,WAAL,mBAAa,sBAAmB,UAAK,WAAL,mBAAa,oBAAmB;AAEhE,WAAK,SAAS,KAAK,sBAAsB,KAAK,MAAM;AAAA,IACxD;AACA,WAAO,MAAM,QAAQ,IAAI;AAAA,EAC7B;AAAA,EACA,sBAAsB,QAAQ;AAC1B,QAAI,UAAU,CAAC,OAAO,aAAa;AAC/B,UAAI,CAAC,KAAK,wBAAwB,EAAC,iCAAQ,uBAAsB;AAC7D,eAAO,uBAAuB,KAAK;AAAA,MACvC;AACA,aAAO,SAAS,KAAK;AAAA,IACzB;AACA,WAAO,MAAM,sBAAsB,MAAM;AAAA,EAC7C;AAAA,EACA,4BAA4B,YAAY,OAAO,OAAO;AAElD,eAAW,IAAI;AACf,WAAO;AAAA,EACX;AAAA,EACA,0BAA0B,kBAAkB,QAAQ;AAChD,QAAI;AACJ,UAAM,SAAS,KAAK,sBAAsB,MAAM;AAChD,QAAI,KAAK,cAAc,MAAM,GAAG;AAC5B,aAAO,iBAAiB,WAAW;AAAA,IACvC,WACS,OAAO,iBAAiB;AAC7B,aAAO,iBAAiB,WAAW;AAAA,IACvC,WACS,OAAO,mBAAmB;AAI/B,aAAO,iBAAiB,WAAW,cAAc,IAAI,MAAM,KAAK,CAAC;AAAA,IACrE;AACA,WAAO;AAAA,EACX;AAAA,EACA,8BAA8B,aAAa,oBAAoB;AAE3D,QAAI,CAAC,mBAAmB,YAAY,YAAY;AAC5C,yBAAmB,YAAY,aAAa,oBAAI,IAAI;AAAA,IACxD;AACA,WAAO;AAAA,MACH,MAAkB;AAAA,MAClB,QAAkB;AAAA,MAClB,WAAkB;AAAA,MAClB,OAAkB;AAAA,MAClB,SAAkB;AAAA,MAClB,iBAAkB;AAAA,MAClB,SAAkB,oBAAI,IAAI;AAAA,MAC1B,WAAkB,oBAAI,IAAI;AAAA,IAC9B;AAAA,EACJ;AAAA,EACA,yBAAyB,KAAK,OAAO,aAAa,YAAY,oBAAoB;AAC9E,UACI,EAAE,YAAY,IAAI,oBAClB,cAAc,mBAAmB,OAAO,WAAW;AACvD,QAAI,OAAmB,MAAM;AAC7B,QAAI,kBAAmB,IAAI,mBAAoB,MAAM;AACrD,QAAI,mBAAmB,IAAI,oBAAoB,MAAM;AACrD,QAAI,kBAAmB,IAAI,mBAAmB,MAAM;AAEpD,QAAI,MAAM,SAAS;AACf,UAAI,UAAU,IAAI,IAAI,CAAC,GAAG,IAAI,SAAS,GAAG,MAAM,OAAO,CAAC;AAAA,IAC5D,OACK;AACD,UAAI,QAAQ,IAAI,MAAM,YAAY,MAAM,YAAY,KAAK;AAAA,IAC7D;AAEA,QAAI,YAAY,YAAY;AAExB,kBAAY,aAAa,oBAAI,IAAI,CAAC,GAAG,YAAY,YAAY,GAAG,YAAY,UAAU,CAAC;AAAA,IAC3F,WAES,MAAM,cAAc,MAAM,UAAU;AACzC,YAAM,WAAW,MAAM,YAAY,MAAM,WAAW;AAEpD,kBAAY,WAAW,IAAI,QAAQ;AACnC,YAAM,gBAAgB,KAAK,sBAAsB,QAAQ,EAAE,WAAW,MAAM,UAAU;AACtF,UAAI,kBAAmB,IAAI,mBAAmB,cAAc;AAC5D,UAAI,mBAAoB,IAAI,oBAAoB,cAAc;AAAA,IAClE;AACA,WAAO;AAAA,EACX;AAAA,EACA,yBAAyB;AACrB,UAAM,SAAS,MAAM,uBAAuB,GAAG,SAAS;AAExD,aAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,IAAI,GAAG,KAAK;AAC3C,YAAM,QAAQ,OAAO,CAAC;AACtB,YAAM,YAAY;AAClB,iBAAW,YAAY,OAAO,YAAY;AACtC,cAAM,gBAAgB,KAAK,sBAAsB,QAAQ,EAAE,WAAW,MAAM,CAAC;AAE7E,cAAM,aAAa,cAAc;AAAA,MACrC;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA,EAEA,kBAAkB,EAAE,MAAM,GAAG;AACzB,UACI,KAA2B,MAC3B,EAAE,YAAY,SAAS,IAAI;AAC/B,QAAI,SAAS;AACb,QAAI,cAAc,MAAM,iBAAiB;AACrC,YACI,OAAgB,GAAG,oBAAoB,GAAG,SAAS,GACnD,YAAgB,GAAG,cAAc,MAAM,QAAQ,MAAM,IAAI,GACzD,YAAgB,GAAG,cAAc,MAAM,WAAW,MAAM,IAAI,GAC5D,gBAAgB,GAAG,EAAE,0BAA0B;AACnD,UACI,aAAoB,KACpB,eAAoB,GAAG,EAAE,uBAAuB,GAChD,oBAAoB;AACxB,UAAI,WAAW,aAAa,SAAS,MAAM,SAAS,GAAG,MAAM,GAAG;AAC5D,uBAAe,GAAG,EAAE,sBAAsB;AAAA,MAC9C,WACS,WAAW,aAAa,SAAS,MAAM,SAAS,MAAM,KAAK,GAAG;AACnE,qBAAa;AAAA,MACjB,WACS,WAAW,aAAa,SAAS,MAAM,SAAS,IAAI,KAAK,GAAG;AACjE,qBAAa;AAAA,MACjB;AACA,UAAI,mBAAmB,CAAC,GAAG,MAAM,oBAAoB,QAAQ,CAAC,EACzD,OAAO,CAAC,CAAC,YAAY,IAAI,MAAM,KAAK,MAAM,EAC1C,KAAK,CAAC,CAAC,MAAM,MAAM,GAAG,CAAC,MAAM,MAAM,MAAM,OAAO,SAAS,OAAO,SAAS,KAAK,CAAC;AACpF,UAAI,iBAAiB,SAAS,GAAG,4BAA4B;AACzD,4BAAoB,SAAS,GAAG,EAAE,aAAa,EAAE,QAAQ,WAAW,iBAAiB,SAAS,GAAG,0BAA0B;AAC3H,2BAAmB,iBAAiB,MAAM,GAAG,KAAK,0BAA0B;AAAA,MAChF;AACA,YAAM,cAAc,iBAAiB,IAAI,CAAC,CAAC,YAAY,IAAI,MAAM;AAC7D,eAAO,cAAc,QAAQ,WAAW,aAAa,WAAW,WAAW,MAAM,IAAI,CAAC,EACjF,QAAQ,eAAe,GAAG,cAAc,KAAK,QAAQ,MAAM,IAAI,CAAC,EAChE,QAAQ,eAAe,GAAG,cAAc,KAAK,WAAW,MAAM,IAAI,CAAC,EACnE,QAAQ,SAAS,KAAK,kBAAkB,oBAAoB,KAAK,mBAAmB,qBAAqB,EAAE;AAAA,MACpH,CAAC,EAAE,KAAK,MAAM,IAAI;AAClB,eAAS,aACJ,QAAQ,iBAAiB,WAAW,EACpC,QAAQ,eAAe,WAAW,OAAO,MAAM,KAAK,WAAW,UAAU,CAAC,EAC1E,QAAQ,aAAa,WAAW,OAAO,MAAM,KAAK,SAAS,UAAU,CAAC,EACtE,QAAQ,eAAe,SAAS,EAChC,QAAQ,eAAe,SAAS,EAChC,QAAQ,SAAS,MAAM,kBAAkB,oBAAoB,MAAM,mBAAmB,qBAAqB,EAAE;AAClH,eAAS,wCAAwC,MAAM;AAAA,IAC3D;AACA,WAAO;AAAA,EACX;AAAA,EACA,eAAe,EAAE,MAAM,GAAG;AACtB,UACI,KAA2B,MAC3B,EAAE,YAAY,SAAS,IAAI;AAC/B,QAAI,SAAS;AACb,QAAI,cAAc,MAAM,iBAAiB;AACrC,YACI,OAAgB,GAAG,oBAAoB,GAAG,SAAS,GACnD,YAAgB,GAAG,cAAc,MAAM,QAAQ,IAAI,GACnD,YAAgB,GAAG,cAAc,MAAM,WAAW,IAAI,GACtD,gBAAgB,GAAG,EAAE,0BAA0B;AACnD,UACI,aAAoB,KACpB,eAAoB,GAAG,EAAE,uBAAuB,GAChD,oBAAoB;AACxB,UAAI,WAAW,aAAa,SAAS,MAAM,SAAS,GAAG,MAAM,GAAG;AAC5D,uBAAe,GAAG,EAAE,sBAAsB;AAAA,MAC9C,WACS,WAAW,aAAa,SAAS,MAAM,SAAS,MAAM,KAAK,GAAG;AACnE,qBAAa;AAAA,MACjB,WACS,WAAW,aAAa,SAAS,MAAM,SAAS,IAAI,KAAK,GAAG;AACjE,qBAAa;AAAA,MACjB;AACA,UAAI,cAAc,CAAC,GAAG,MAAM,QAAQ,QAAQ,CAAC,EACxC,OAAO,CAAC,CAAC,QAAQ,IAAI,MAAM,KAAK,MAAM,EACtC,KAAK,CAAC,CAAC,MAAM,MAAM,GAAG,CAAC,MAAM,MAAM,MAAM,OAAO,SAAS,OAAO,SAAS,KAAK,CAAC;AACpF,UAAI,YAAY,SAAS,GAAG,4BAA4B;AACpD,4BAAoB,SAAS,GAAG,EAAE,aAAa,EAAE,QAAQ,WAAW,YAAY,SAAS,GAAG,0BAA0B;AACtH,sBAAc,YAAY,MAAM,GAAG,KAAK,0BAA0B;AAAA,MACtE;AACA,YAAM,UAAU,YAAY,IAAI,CAAC,CAAC,QAAQ,IAAI,MAAM;AAnhBhE;AAohBgB,eAAO,cACF,QAAQ,cAAc,aAAa,aAAW,YAAO,aAAP,mBAAiB,SAAQ,OAAO,IAAI,CAAC,EACnF,QAAQ,WAAW,aAAa,aAAW,YAAO,UAAP,mBAAc,SAAQ,OAAO,IAAI,CAAC,EAC7E,QAAQ,eAAe,GAAG,cAAc,KAAK,QAAQ,IAAI,CAAC,EAC1D,QAAQ,eAAe,GAAG,cAAc,KAAK,WAAW,IAAI,CAAC,EAC7D,QAAQ,SAAS,KAAK,kBAAkB,oBAAoB,KAAK,mBAAmB,qBAAqB,EAAE;AAAA,MACpH,CAAC,EAAE,KAAK,MAAM,IAAI;AAClB,eAAS,aACJ,QAAQ,iBAAiB,OAAO,EAChC,QAAQ,eAAe,WAAW,OAAO,MAAM,KAAK,WAAW,UAAU,CAAC,EAC1E,QAAQ,aAAa,WAAW,OAAO,MAAM,KAAK,SAAS,UAAU,CAAC,EACtE,QAAQ,eAAe,SAAS,EAChC,QAAQ,eAAe,SAAS,EAChC,QAAQ,SAAS,MAAM,kBAAkB,oBAAoB,MAAM,mBAAmB,qBAAqB,EAAE;AAClH,eAAS,wCAAwC,MAAM;AAAA,IAC3D;AACA,WAAO;AAAA,EACX;AAAA,EACA,oBAAoB,EAAE,MAAM,GAAG;AAC3B,UACI,KAA2B,MAC3B,EAAE,YAAY,SAAS,IAAI;AAC/B,QAAI,SAAS;AACb,QAAI,cAAc,MAAM,iBAAiB;AACrC,YACI,OAAY,GAAG,oBAAoB,GAAG,SAAS,GAC/C,YAAY,GAAG,cAAc,MAAM,QAAQ,MAAM,IAAI,GACrD,YAAY,GAAG,cAAc,MAAM,WAAW,MAAM,IAAI;AAC5D,UACI,aAAe,KACf,eAAe,GAAG,EAAE,kBAAkB;AAC1C,UAAI,WAAW,aAAa,SAAS,MAAM,SAAS,GAAG,MAAM,GAAG;AAC5D,uBAAe,GAAG,EAAE,iBAAiB;AAAA,MACzC,WACS,WAAW,aAAa,SAAS,MAAM,SAAS,MAAM,KAAK,GAAG;AACnE,qBAAa;AAAA,MACjB,WACS,WAAW,aAAa,SAAS,MAAM,SAAS,IAAI,KAAK,GAAG;AACjE,qBAAa;AAAA,MACjB;AACA,eAAS,aACJ,QAAQ,eAAe,WAAW,OAAO,MAAM,KAAK,WAAW,UAAU,CAAC,EAC1E,QAAQ,aAAa,WAAW,OAAO,MAAM,KAAK,SAAS,UAAU,CAAC,EACtE,QAAQ,eAAe,SAAS,EAChC,QAAQ,eAAe,SAAS,EAChC,QAAQ,SAAS,MAAM,OAAO,EAAE;AACrC,UAAI,MAAM,YAAY;AAClB,iBAAS,OAAO,QAAQ,WAAW,aAAa,WAAW,MAAM,WAAW,MAAM,IAAI,CAAC;AAAA,MAC3F;AACA,eAAS,wCAAwC,MAAM;AAAA,IAC3D;AACA,WAAO;AAAA,EACX;AACJ;AAAA;AAzfI,cAFiB,sBAEV,SAAQ;AACf,cAHiB,sBAGV,QAAO;AACd,cAJiB,sBAIV,gBAAe;AAAA;AAAA;AAAA;AAAA;AAAA,EAKlB,aAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAuDd,uBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOxB,WAAY;AAAA,EACZ,gBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKjB,eAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQhB,aAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAad,mBAAmB,EAAE,MAAM,GAAG;AAC1B,QAAI,SAAS;AACb,UAAM,EAAE,iBAAiB,SAAS,UAAU,WAAW,IAAI;AAE3D,QAAI,iBAAiB;AACjB,UAAI,SAAS;AACT,iBAAS,KAAK,eAAe,GAAG,SAAS;AAAA,MAC7C,WACS,YAAY;AACjB,iBAAS,KAAK,oBAAoB,GAAG,SAAS;AAAA,MAClD,WACS,UAAU;AACf,iBAAS,KAAK,kBAAkB,GAAG,SAAS;AAAA,MAChD;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,QAAS;AAAA,IACL,QAAS;AAAA;AAAA;AAAA,MAGL,SAAU;AAAA,IACd;AAAA,EACJ;AAAA,EACA,UAAW;AAAA,EACX,SAAU;AAAA,IACN;AAAA,MACI,MAAc;AAAA,MACd,OAAc;AAAA,MACd,MAAc;AAAA,MACd,aAAc;AAAA,IAClB;AAAA,EACJ;AAAA,EACA,iBAAkB;AAAA,IACd,KAAM;AAAA,EACV;AACJ;AAtIJ,IAAqB,sBAArB;AA4fA,oBAAoB,UAAU;AAE9B,oBAAoB,SAAS;AAAuB,mBAAmB,gBAAgB,MAAM,MAAM,qBAAqB;;;ACnkBxH,IAAqB,yBAArB,cAAoD,oBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQpE,gCAAgC,YAAY;AACxC,UACI,KAAkB,MAClB,EAAE,YAAY,IAAI,YAClB;AAAA,MACI,SAAa;AAAA,MACb,OAAa;AAAA,MACb,YAAa;AAAA,IACjB,IAAkB,GAAG,YAAY,aAAa,aAAa,SAAS,GACpE,WAAkB,GAAG,4BAA4B,YAAY,cAAc,YAAY,eAAe;AAC1G,QAAI,UAAU;AACV,YAAM,EAAE,MAAM,MAAM,IAAI;AACxB,aAAO,OAAO,YAAY;AAAA,QACtB;AAAA,QACA;AAAA,QACA;AAAA,QACA,mBAAoB,KAAK,IAAI,OAAO,WAAW,MAAM,CAAC;AAAA;AAAA,QAEtD,kBAAoB,KAAK,IAAI,KAAK,MAAM,WAAW,OAAO,WAAW,QAAQ,OAAO,KAAK,GAAG,CAAC;AAAA,MACjG,CAAC;AACD,aAAO;AAAA,IACX,OACK;AACD,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EACA,sBAAsB,UAAU,WAAW,iBAAiB,OAAO;AAC/D,UAAM,OAAO,MAAM,sBAAsB,UAAU,WAAW,cAAc;AAC5E,QAAI,6BAAM,gBAAgB;AACtB,UAAI,CAAC,KAAK,gCAAgC,IAAI,GAAG;AAC7C,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AACJ;AA1CI,cADiB,wBACV,SAAQ;AA2CnB,uBAAuB,SAAS;;;AC5ChC,IAAqB,uBAArB,cAAkD,kBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQhE,8BAA8B,YAAY;AACtC,UACI,KAAsB,MACtB,EAAE,UAAU,IAAU,IACtB,EAAE,YAAY,IAAQ,YACtB,EAAE,gBAAgB,IAAI,aACtB,YAAsB,kBAAkB,YAAY,IAAI,WAAW,IAAI,YAAY,WACnF,UAAsB,kBAAkB,YAAY,IAAI,SAAS,IAAI,YAAY,SACjF,MAAsB,UAAU,sBAAsB,SAAS,GAC/D,eAAsB,UAAU,QAAQ,GACxC,aAAsB,QAAQ,QAAQ,GACtC,kBAAsB,aAAa;AACvC,QAAI,SAAS,UAAU,sBAAsB,OAAO,GAChD,SAAS,SAAS;AAEtB,QAAI,WAAW,IAAI;AACf,eAAS,KAAK,MAAM,kBAAkB,UAAU,kBAAkB,sBAAsB,aAAa,CAAC;AACtG,eAAS,MAAM;AAAA,IACnB;AACA,WAAO,OAAO,YAAY;AAAA,MACtB;AAAA,MACA;AAAA,MACA;AAAA,MACA,mBAAoB,MAAM,WAAW;AAAA,MACrC,kBAAoB,WAAW,MAAM,WAAW,SAAS,MAAM;AAAA,IACnE,CAAC;AACD,WAAO;AAAA,EACX;AAAA,EACA,sBAAsB,UAAU,WAAW,iBAAiB,OAAO;AAC/D,UAAM,OAAO,MAAM,sBAAsB,UAAU,WAAW,cAAc;AAC5E,QAAI,6BAAM,gBAAgB;AACtB,UAAI,CAAC,KAAK,8BAA8B,IAAI,GAAG;AAC3C,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AACJ;AA5CI,cADiB,sBACV,SAAQ;AA6CnB,qBAAqB,SAAS;;;ACd9B,IAAqB,mBAArB,cAA8C,cAAc;AAAA,EACxkBAAkB;AAAA,EAGlB;AAAA;AAAA;AAAA;AAAA,EAIA,IAAI,UAAU,WAAW;AACrB,SAAK,QAAQ,YAAY;AAAA,EAC7B;AAAA,EACA,IAAI,YAAY;AACZ,WAAO,KAAK,QAAQ;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,IAAI,OAAO;AACP,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,KAAK,MAAM;AACX,UAAM,KAAK;AACX,OAAG,QAAQ;AACX,QAAI,CAAC,GAAG,IAAI,GAAG;AACX,SAAG,QAAQ,UAAU,IAAI,SAAS,IAAI,EAAE;AACxC,UAAI,SAAS,cAAc;AACvB,WAAG,aAAa,IAAI,uBAAuB,EAAE;AAC7C,YAAI,GAAG,WAAW;AACd,aAAG,WAAW,KAAK;AAAA,QACvB;AAAA,MACJ,WACS,SAAS,YAAY;AAC1B,WAAG,WAAW,IAAI,qBAAqB,EAAE;AACzC,YAAI,GAAG,UAAU;AACb,aAAG,SAAS,KAAK;AAAA,QACrB;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAIA,kBAAkB;AACd,UACI,KAAK;AACT,QAAI,GAAG,iBAAiB,GAAG,YAAY;AACnC,gBAAU,cAAc,GAAG,eAAe,gBAAgB,EAAE,GAAG,WAAW,YAAY,GAAG,QAAQ,mBAAmB;AAAA,IACxH;AAAA,EACJ;AAAA;AAAA,EAEA,IAAI,YAAY;AACZ,WAAO,KAAK,QAAQ;AAAA,EACxB;AAAA;AAAA,EAEA,YAAY,WAAW,gBAAgB,KAAK;AAExC,QAAI,CAAC,eAAe,cAAc,SAAS,GAAG;AAC1C;AAAA,IACJ;AAUA,QAAI,KAAK,YAAY,KAAK,SAAS,WAAW;AAC1C,WAAK,IAAI;AAAA,QACL,eAAgB,MAAM,MAAM,YAAY,WAAW,gBAAgB,GAAG;AAAA,QACtE,MAAgB;AAAA,MACpB,CAAC;AAAA,IACL,OACK;AACD,aAAO,MAAM,YAAY,WAAW,gBAAgB,GAAG;AAAA,IAC3D;AAAA,EACJ;AACJ;AAAA;AA3NI,cANiB,kBAMV,SAAQ;AACf,cAPiB,kBAOV,QAAO;AACd,cARiB,kBAQV,gBAAgB;AAAA,EACnB,mBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMpB,mBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUpB,sBAAuB;AAC3B;AACA,cA3BiB,kBA2BV,kBAAiB;AAuM5B,iBAAiB,UAAU;AAC3B,cAAc,WAAW,gBAAgB,OAAO;AAChD,iBAAiB,SAAS;;;AClI1B,IAAqB,eAArB,cAA0C,iBAAiB;AAAA;AAAA,EAEvD,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,WAAW,OAAO;AACd,WAAO;AAAA,EACX;AAAA;AAEJ;AACA,aAAa,UAAU;AACvB,aAAa,SAAS;;;AC5HtB,IAAqB,WAArB,cAAsC,cAAc;AAAA,EAChD,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA,EAEA,WAAW,OAAO;AACd,WAAO;AAAA,EACX;AAAA,EACA,WAAW,eAAe;AACtB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASH,QAAc;AAAA,MACd,aAAc;AAAA,MACd,WAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAcd,UAAW;AAAA,MACX,UAAW,EAAE,YAAa,MAAM;AAAA,MAChC,UAA4B;AAAA,MAC5B,kBAA4B;AAAA,MAC5B,2BAA4B;AAAA;AAAA;AAAA,MAG5B,WAA4B;AAAA,MAC5B,mBAA4B;AAAA;AAAA,MAE5B,WAAY;AAAA,QACR;AAAA,UACI,IAAK;AAAA,QACT;AAAA,MACJ;AAAA,MACA,SAAU,CAAC;AAAA,IACf;AAAA,EACJ;AAAA,EACA,WAAW,YAAY;AACnB,WAAO;AAAA,MACH,mBAAoB;AAAA,IACxB;AAAA,EACJ;AAAA,EACA,UAAU,SAAS,CAAC,GAAG;AACnB,UAAM,KAAK;AACX,OAAG,iBAA2B,SAAS,cAAc,OAAO;AAC5D,OAAG,eAAe,YAAY;AAC9B,OAAG,eAA2B,SAAS,cAAc,OAAO;AAC5D,OAAG,aAAa,YAAc;AAC9B,QAAI,yBAAyB;AAC7B,QAAI,aAAa,QAAQ;AACrB,UAAI,CAAC,OAAO,SAAS;AACjB,cAAM,IAAI,MAAM,mDAAmD;AAAA,MACvE,WAGS,OAAO,mBAAmB,0BAA0B;AACzD,WAAG,YAAY,OAAO,QAAQ;AAC9B,YAAI,CAAC,OAAO,QAAQ,0BAA0B;AAC1C,mCAAyB;AAEzB,iBAAO,QAAQ,IAAI;AAAA,YACf,MAAO;AAAA,YACP,QAAQ,EAAE,gBAAgB,GAAG;AACzB,kBAAI,iBAAiB;AACjB,mBAAG,kBAAkB;AACrB,mBAAG,gBAAgB,eAAe;AAAA,cACtC;AAAA,YACJ;AAAA,YACA,SAAU;AAAA,UACd,CAAC;AAAA,QACL;AACA,eAAO,OAAO;AAAA,MAClB;AAAA,IACJ;AAIA,WAAO,WAAW,aAAa,OAAO;AAAA,MAClC,UAAsB;AAAA,MACtB,UAAsB;AAAA,MACtB,iBAAsB;AAAA,MACtB,aAAsB;AAAA,MACtB,cAAsB;AAAA,MACtB,eAAsB;AAAA,MACtB,cAAsB;AAAA,MACtB,aAAsB;AAAA,MACtB,kBAAsB;AAAA,MACtB,WAAsB;AAAA,MACtB,iBAAsB;AAAA,MACtB,WAAsB;AAAA,MACtB,aAAsB;AAAA,MACtB,WAAsB;AAAA,MACtB,aAAsB;AAAA,MACtB,cAAsB;AAAA,MACtB,OAAsB;AAAA,MACtB,YAAsB;AAAA,MACtB,cAAsB;AAAA,MACtB,qBAAsB;AAAA,MACtB,cAAsB;AAAA,MACtB,iBAAsB;AAAA,MACtB,MAAsB;AAAA,MACtB,oBAAsB;AAAA,MACtB,YAAsB;AAAA,IAC1B,GAAG,OAAO,QAAQ;AAClB,UAAM,UAAU,MAAM;AACtB,QAAI,GAAG,SAAS,YAAY;AAExB,SAAG,SAAS,WAAW,QAAQ,IAAI,MAAM;AAAA,IAC7C;AAKA,8BAA0B,GAAG,kBAAkB,IAAI;AACnD,OAAG,UAAU,IAAI;AAAA,MACb,kBAAmB,GAAG;AAAA,MACtB,iBAAmB,GAAG;AAAA,MACtB,SAAmB;AAAA,IACvB,CAAC;AACD,OAAG,IAAI;AAAA,MACH,QAAU,GAAG;AAAA,MACb,SAAU;AAAA,IACd,CAAC;AACD,OAAG,cAAc,YAAY,GAAG,cAAc;AAC9C,OAAG,cAAc,YAAY,GAAG,YAAY;AAAA,EAChD;AAAA,EACA,cAAc,EAAE,OAAO,SAAS,GAAG;AAC/B,UACI,KAAQ,MACR,QAAQ,UAAU;AAGtB,aAAS,GAAG,eAAe;AAC3B,OAAG,cAAc;AACjB,QAAI,OAAO;AACP,SAAG,cAAc,KAAK;AACtB,SAAG,YAAY;AAAA,IACnB;AAAA,EACJ;AAAA,EACA,gBAAgB;AACZ,QAAI,KAAK,cAAc,aAAa;AAChC,WAAK,YAAY,KAAK,cAAc;AAAA,IACxC;AAAA,EACJ;AAAA,EACA,cAAc;AACV,QAAI,KAAK,WAAW,QAAQ,GAAG;AAC3B,WAAK,WAAW;AAChB,WAAK;AAAA,QACD;AAAA,UACI,YAAc;AAAA,UACd,aAAc;AAAA,QAClB;AAAA,MACJ;AACA,WAAK,WAAW;AAAA,IACpB;AACA,SAAK,qBAAqB;AAAA,EAC9B;AAAA,EACA,uBAAuB;AACnB,UAAM,KAAwB;AAC9B,OAAG,eAAe,YAAY,GAAG,iBAAiB,GAAG,SAAS;AAC9D,OAAG,aAAa,YAAc,GAAG,iBAAiB,GAAG,OAAO;AAAA,EAChE;AAAA,EACA,MAAM,kBAAkB,EAAE,QAAQ,QAAQ,SAAS,SAAS,WAAW,GAAG;AACtE,UACI,KAAa,MACb,aAAa,GAAG;AACpB,QAAI;AACJ,YAAQ,QAAQ;AAAA,MACZ,KAAK;AACD,gBAAQ,QAAQ,UAAQ;AACpB,cAAI,KAAK,gBAAgB;AACrB,uBAAW,IAAI,GAAG,UAAU,IAAI,CAAC;AACjC,uBAAW;AAAA,UACf;AAAA,QACJ,CAAC;AACD;AAAA,MACJ,KAAK;AACD,YAAI,CAAC,YAAY;AACb,kBAAQ,QAAQ,UAAQ;AACpB,gBAAI,KAAK,gBAAgB;AACrB,yBAAW,OAAO,KAAK,EAAE;AACzB,yBAAW;AAAA,YACf;AAAA,UACJ,CAAC;AAAA,QACL;AACA;AAAA,MACJ,KAAK;AACD,WAAG,kBAAkB,IAAI;AACzB;AAAA,MACJ,KAAK,UAAU;AACX,cAAM,OAAO;AACb,YAAI,QAAQ,gBAAgB;AAExB,cAAI,KAAK,gBAAgB;AACrB,uBAAW,IAAI,GAAG,UAAU,IAAI,CAAC;AAAA,UACrC,OACK;AACD,kBAAM,gBAAgB,WAAW,QAAQ,KAAK,EAAE;AAChD,gBAAI,eAAe;AACf,yBAAW,OAAO,aAAa;AAAA,YACnC;AAAA,UACJ;AACA,qBAAW;AAAA,QACf,WACS,KAAK,gBAAgB;AAE1B,gBAAM,QAAQ,WAAW,QAAQ,KAAK,EAAE;AACxC,cAAI,OAAO;AAEP,kBAAM,IAAI,GAAG,UAAU,IAAI,CAAC;AAC5B,uBAAW;AAAA,UACf;AAAA,QACJ;AACA;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,UAAU;AACV,SAAG,YAAY;AAAA,IACnB;AAAA,EACJ;AAAA,EACA,UAAU,MAAM;AACZ,WAAO;AAAA,MACH,IAAa,KAAK;AAAA,MAClB,YAAa;AAAA,MACb,MAAa,KAAK;AAAA,MAClB,WAAa,KAAK;AAAA,MAClB,SAAa,KAAK;AAAA,MAClB,KAAa,KAAK;AAAA,IACtB;AAAA,EACJ;AAAA,EACA,SAAS;AACL,UAAM,OAAO,GAAG,SAAS;AACzB,SAAK,cAAc;AAAA,EACvB;AAAA,EACA,MAAM,oBAAoB;AACtB,UACI,KAAgB,MAChB,gBAAgB,CAAC;AACrB,OAAG,UAAU,SAAS,UAAQ;AAC1B,UAAI,KAAK,kBAAkB,KAAK,aAAa;AACzC,sBAAc,KAAK,GAAG,UAAU,IAAI,CAAC;AAAA,MACzC;AAAA,IACJ,CAAC;AACD,OAAG,SAAS;AACZ,UAAM,GAAG,QAAQ,YAAY;AAC7B,QAAI,GAAG,aAAa;AAChB;AAAA,IACJ;AACA,OAAG,YAAY;AAAA,EACnB;AAAA,EACA,iBAAiB;AACb,SAAK,qBAAqB;AAC1B,UAAM,eAAe;AAAA,EACzB;AACJ;AAEA,SAAS,UAAU;AACnB,SAAS,SAAS;;;ACjSlB,IACI,cAAc,CAAC;AADnB,IAEI,kBAAkB,EAAE,QAAS,GAAG,KAAM,GAAG,QAAS,EAAE;AAFxD,IAGI,kBAAkB,EAAE,WAAY,GAAG,iBAAkB,GAAG,iBAAkB,GAAG,cAAe,EAAE;AAHlG,IAKI,mBAAmB,CAAC,EAAE,QAAQ,MAAM,MAAM,GAAG,OAAO,IAAI,IAAI,KAAK;AALrE,IAMI,mBAAmB;AAAA,EACf,iBAAkB;AAAA,EAClB,iBAAkB;AACtB;AACJ,IAAM,iBAAN,cAA6B,aAAa;AAkB1C;AAjBI,cADE,gBACK,UAAS;AAAA,EACZ;AAAA,IACI,MAAO;AAAA,IACP,MAAO;AAAA,EACX;AAAA,EAAG;AAAA,IACC,MAAO;AAAA,IACP,MAAO;AAAA,EACX;AAAA,EAAG;AAAA,IACC,MAAO;AAAA,EACX;AAAA,EAAG;AAAA,IACC,MAAO;AAAA,EACX;AAAA,EAAG;AAAA,IACC,MAAO;AAAA,EACX;AAAA,EAAG;AAAA,IACC,MAAO;AAAA,EACX;AACJ;AAYJ,IAAqB,eAArB,MAAqB,qBAAoB,SAAS;AAAA,EAAlD;AAAA;AAmII,+CAAsB,CAAC;AACvB,2CAAkB,CAAC;AACnB,2CAAkB,KAAK,aAAY,IAAI;AAAA;AAAA;AAAA,EARvC,WAAW,aAAa;AACpB,WAAO;AAAA,MACH,yBAA0B,oBAAI,QAAQ;AAAA,MACtC,eAA0B,oBAAI,IAAI;AAAA,IACtC;AAAA,EACJ;AAAA,EAIA,UAAU,QAAQ;AACd,UAAM,UAAU;AAAA,MACZ,GAAG;AAAA,MACH,UAAW,aAAa,MAAM,CAAC,GAAG,aAAY,aAAa,UAAU,OAAO,QAAQ;AAAA,IACxF,CAAC;AAAA,EACL;AAAA,EACA,iBAAiB;AACb,QAAI,CAAC,KAAK,SAAS;AACf,YAAM,IAAI,MAAM,GAAG,aAAY,KAAK,+BAA+B;AAAA,IACvE;AACA,SAAK,YAAY;AAAA,EACrB;AAAA,EACA,iBAAiB,eAAe;AAC5B,UAAM,mBAAmB,KAAK,QAAQ,IAAI,YAAY;AACtD,QAAI,kBAAkB;AAClB,uBAAiB,SAAS;AAAA,IAC9B;AAAA,EACJ;AAAA,EACA,cAAc,YAAY;AACtB,UAAM,KAAK;AACX,OAAG,gBAAgB,aAAa;AAChC,OAAG,gBAAgB,WAAW,aAAa,UAAU;AACrD,OAAG,oBAAoB,WAAW,aAAa,YAAY;AAC3D,OAAG,cAAc,IAAI;AAAA,MACjB,MAAU;AAAA,MACV,QAAU,GAAG;AAAA,MACb,SAAU;AAAA,IACd,CAAC;AACD,OAAG,kBAAkB,IAAI;AAAA,MACrB,MAAU;AAAA,MACV,QAAU,GAAG;AAAA,MACb,SAAU;AAAA,IACd,CAAC;AAAA,EACL;AAAA,EACA,8BAA8B;AAC1B,QAAI,KAAK,WAAW;AAChB,WAAK,YAAY;AAAA,IACrB;AAAA,EACJ;AAAA,EACA,mCAAmC;AAC/B,QAAI,KAAK,WAAW;AAChB,WAAK,YAAY;AAAA,IACrB;AAAA,EACJ;AAAA,EACA,qBAAqB;AACjB,QAAI,KAAK,WAAW;AAChB,WAAK,YAAY;AAAA,IACrB;AAAA,EACJ;AAAA,EACA,yBAAyB,cAAc,cAAc;AACjD,UAAM,CAAC,mBAAmB,iBAAiB,IAAI,CAAC,cAAc,YAAY,EAAE,IAAI,eAC5E,KAAK,MAAM,QAAQ,KAAK,SAAS,EAAE,CAAC;AACxC,QAAI,mBAAmB;AACnB,wBAAkB,MAAM;AACxB,wBAAkB,UAAU;AAAA,IAChC;AACA,QAAI,mBAAmB;AACnB,wBAAkB,MAAM,KAAK;AAC7B,wBAAkB,UAAU;AAAA,IAChC;AAAA,EACJ;AAAA,EACA,qBAAqB,EAAE,QAAQ,QAAQ,GAAG;AACtC,SAAK,gBAAgB,KAAK,EAAE,QAAQ,QAAQ,CAAC;AAC7C,SAAK,eAAe;AAAA,EACxB;AAAA,EACA,yBAAyB,EAAE,QAAQ,QAAQ,GAAG;AAC1C,SAAK,oBAAoB,KAAK,EAAE,QAAQ,QAAQ,CAAC;AACjD,SAAK,eAAe;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,iBAAiB;AACb,UACI,KAAK,MACL,WAAW,YAAY,OAAO,GAAG,gBAAgB,QAAQ,CAAC,EAAE,QAAQ,MAAM,OAAO,CAAC,GAClF,aAAa,IAAI,IAAI,SAAS,IAAI,aAAW,OAAO,QAAQ,EAAE,CAAC,CAAC,GAChE,eAAe,YAAY;AAAA,MACvB,GAAG,oBAAoB,QAAQ,CAAC,EAAE,QAAQ,MAAM,OAAO,EAElD,OAAO,SAAS,WAAW,IAAI,CAAC,IAC3B,GAAG,kBAAkB,MAAM,SAAO,WAAW,IAAI,IAAI,SAAS,CAAC,CAAC;AAAA,IAAC;AAEnF,eAAW,eAAe,cAAc;AACpC,UAAI,YAAY,aAAa,CAAC,WAAW,IAAI,YAAY,SAAS,GAAG;AACjE,iBAAS,KAAK,GAAG,cAAc,QAAQ,YAAY,SAAS,CAAC;AAC7D,mBAAW,IAAI,YAAY,SAAS;AAAA,MACxC;AAAA,IACJ;AACA,OAAG,YAAY,YAAY,OAAO,QAAQ,GAAG,YAAY;AACzD,OAAG,sBAAsB,CAAC;AAC1B,OAAG,kBAAkB,CAAC;AAAA,EAC1B;AAAA,EACA,YAAY,UAAU,cAAc;AAzRxC;AA0RQ,UACI,KAAK,MACL,EAAE,uBAAuB,4BAA4B,MAAM,IAAI,IAC/D,mBAAmB,oBAAI,IAAI,GAC3B,0BAA0B,YAAY,QAAQ,cAAc,WAAW,GACvE,aAAa,aAAa,OAAO,QAAQ,GACzC,iBAAiB,wBACX,SAAS,OAAO,aAAW,QAAQ,QAAQ,IAAI,IAC/C;AACV,eAAW,UAAU,YAAY;AAC7B,iBAAW,QAAO,QAAG,wBAAwB,IAAI,MAAM,MAArC,YAA0C,aAAa;AACrE,yBAAiB,IAAI,GAAG;AAAA,MAC5B;AAAA,IACJ;AACA,OAAG,eAAe;AAClB,UAAM,OAAO,MAAM,KAAK,gBAAgB,CAAC;AACzC,eAAW,WAAW,gBAAgB;AAClC,YAAM,UAAU,MAAM,IAAI,GAAG,YAAY,SAAS,wBAAwB,QAAQ,EAAE,CAAC,CAAC;AACtF,SAAG,wBAAwB,IAAI,SAAS,OAAO;AAAA,IACnD;AACA,QAAI,4BAA4B;AAC5B,iBAAW,eAAe,aAAa,OAAO,SAAO,IAAI,aAAa,IAAI,GAAG;AACzE,cAAM,UAAU,MAAM,IAAI,GAAG,YAAY,MAAM,CAAC,WAAW,CAAC,CAAC;AAC7D,WAAG,wBAAwB,IAAI,aAAa,OAAO;AAAA,MACvD;AAAA,IACJ;AACA,OAAG,cAAc,KAAK;AACtB,UAAM,KAAK,MAAM,OAAO;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,cAAc;AACV,SAAK,YAAY,KAAK,cAAc,SAAS,KAAK,kBAAkB,OAAO;AAAA,EAC/E;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,YAAY,SAAS,cAAc;AAC/B,UACI,KAAK,MACL,EAAE,cAAc,mBAAmB,IAAI,IACvC,mBAAkB,6CAAc,IAAI,iBAAe;AAtU/D;AAuUgB,YAAMC,MAAK,KAAK,YAAY,EAAE;AAC9B,aAAO;AAAA,QACH,IAAAA;AAAA,QACA,UAAmB,SAAQ,QAAG,kBAAH,mBAAkB,IAAIA,IAAG;AAAA,QACpD,aAAmB,YAAY;AAAA,QAC/B,YAAmB,YAAY;AAAA,QAC/B,kBAAmB;AAAA,QACnB,kBAAmB;AAAA,QACnB,UAAmB,YAAY,QAAQ,IAAI,CAAC,QAAQ,UAAU;AA/UlF,cAAAC,KAAA;AAgVwB,gBAAMD,MAAK,KAAK,YAAY,EAAE,IAAI,KAAK;AACvC,iBAAO;AAAA,YACH,IAAAA;AAAA,YACA,UAAmB,SAAQC,MAAA,GAAG,kBAAH,gBAAAA,IAAkB,IAAID,IAAG;AAAA,YACpD;AAAA,YACA,kBAAmB;AAAA,YACnB,WAAmB,kBAAO,oBAAP,mBAAwB,IAAI,qBAAmB;AAAA,cAC9D,kBAAmB;AAAA,cACnB;AAAA,YACJ,QAHmB,YAGZ,CAAC;AAAA,UACZ;AAAA,QACJ,CAAC;AAAA,MACL;AAAA,IACJ,OAAM,CAAC,GACP,KAAK,KAAK,mCAAS,EAAE;AACzB,WAAO,WAAW,eAAe;AAAA,MAC7B;AAAA,MACA,UAAe,QAAQ,GAAG,cAAc,IAAI,EAAE,CAAC;AAAA,MAC/C,aAAe,QAAQ;AAAA,MACvB,YAAe,QAAQ;AAAA,MACvB,UAAe;AAAA,MACf,cAAe;AAAA,MACf,SAAe;AAAA,MACf,KAAe,QAAQ,OAAO,qBAAqB,GAAG,kBAAkB;AAAA,IAC5E,IAAI;AAAA,EACR;AAAA,EACA,kBAAkB,OAAO;AACrB,UAAM,EAAE,OAAO,IAAI;AACnB,QAAI,OAAO,gBAAgB;AACvB,aAAO,KAAK,qBAAqB,OAAO,cAAc;AAAA,IAC1D,WACS,OAAO,QAAQ;AACpB,aAAO,KAAK,wBAAwB,OAAO,MAAM;AAAA,IACrD;AACA,WAAO,OAAO;AAAA,EAClB;AAAA,EACA,qBAAqB,gBAAgB;AACjC,UACI,YAAY,aAAY,MACxB,EAAE,UAAU,QAAQ,MAAM,IAAI;AAClC,WAAO;AAAA,MACH,UAAW,CAAC;AAAA,QACR,KAAW;AAAA,QACX,OAAW,KAAK,SAAS;AAAA,QACzB,UAAW;AAAA,UACP;AAAA,YACI,KAAQ;AAAA,YACR,OAAQ,KAAK,SAAS;AAAA,YACtB,MAAQ,GAAG,KAAK,mBAAmB,QAAQ,CAAC;AAAA,UAChD;AAAA,UACA,KAAK,oBAAoB,QAAQ,QAAQ;AAAA,UACzC;AAAA,YACI,KAAQ;AAAA,YACR,OAAQ;AAAA,UACZ;AAAA,UACA,KAAK,oBAAoB,OAAO,OAAO;AAAA,QAC3C;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,oBAAoB,OAAO,MAAM;AAnZrC;AAoZQ,WAAO;AAAA,MACH,KAAQ;AAAA,MACR,OAAQ;AAAA,QACJ,KAAK,aAAY,IAAI,aAAa,IAAI;AAAA,QACtC,SAAS,QAAQ,KAAK,aAAY,IAAI;AAAA,MAC1C;AAAA,MACA,MAAO,SAAS,OAAO,KAAK,EAAE,uBAAuB,KAAI,UAAK,kBAAkB,KAAK,MAA5B,YAAiC;AAAA,IAC9F;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,kBAAkB,OAAO;AACrB,QAAI,WAAW,OAAO,KAAK,GAAG;AAC1B,aAAO,WAAW,OAAO,OAAO,KAAK,UAAU;AAAA,IACnD,WACS,OAAQ,UAAW,UAAU;AAClC,aAAO,MAAM,QAAQ,CAAC;AAAA,IAC1B;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,mBAAmB,cAAc;AAC7B,WAAO,aAAa,SAAS,YAAY;AAAA,EAC7C;AAAA,EACA,wBAAwB,kBAAkB;AACtC,WAAO;AAAA,MACH,OAAW,iBAAiB,MAAM;AAAA,MAClC,UAAW,iBAAiB,SAAS;AAAA,IACzC;AAAA,EACJ;AAAA,EACA,wBAAwB,kBAAkB;AACtC,WAAO;AAAA,MACH,MAAO,iBAAiB,SAAS;AAAA,MACjC,IAAO,iBAAiB,OAAO;AAAA,IACnC;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,wBAAwB,QAAQ;AAxcpC;AAycQ,UACI,KAAK,MACL,EAAE,YAAY,OAAO,IAAI,QACzB,cAAc,GAAG,EAAE,yBAAyB;AAChD,QAAI,aACA,SAAS;AAAA,MACL,MAAO,YAAY,OAAO,IAAI;AAAA,MAC9B,MAAO,OAAO;AAAA,IAClB;AACJ,QAAI,eAAe,QAAQ;AACvB,aAAO,OAAO,iBAAiB,OAAO,IAAI;AAC1C,aAAO,KAAK,iBAAiB,OAAO,EAAE;AAAA,IAC1C;AAGA,kBAAc,GAAG,EAAE,cAAc,UAAU,IAAG,sBAAiB,OAAO,IAAI,MAA5B,YAAiC,QAAQ,GAAG;AAC1F,QAAI,OAAO,SAAS,mBAAmB;AACnC,eAAS,GAAG,wBAAwB,MAAM;AAAA,IAC9C,WACS,OAAO,SAAS,mBAAmB;AACxC,eAAS,GAAG,wBAAwB,MAAM;AAAA,IAC9C;AACA,kBAAc,YAAY,QAAQ,cAAc,CAAC,GAAG,aAAU;AA/dtE,UAAAC;AA+dyE,cAAAA,MAAA,OAAO,QAAQ,MAAf,OAAAA,MAAoB;AAAA,KAAQ;AAC7F,QAAI,OAAO,QAAQ;AACf,oBAAc,OAAO,WAAW;AAAA,IACpC;AACA,WAAO,GAAG,8BAA8B,aAAa,WAAW,WAAW,GAAG,MAAM;AAAA,EACxF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,eAAe,MAAM,MAAM;AAC9B,QAAI,KAAK,WAAW,KAAK,UAAU,KAAK,UAAU,KAAK,QAAQ;AAC3D,YACI,UAAU,QAAQ,KAAK,OAAO,MAAM,GACpC,UAAU,QAAQ,KAAK,OAAO,MAAM,GACpC,EAAE,YAAa,OAAO,QAAS,EAAE,MAAO,YAAY,EAAE,IAAI,KAAK,QAC/D,EAAE,YAAa,OAAO,QAAS,EAAE,MAAO,YAAY,EAAE,IAAI,KAAK;AAEnE,UAAI,YAAY,SAAS;AACrB,eAAO,UAAU,KAAK;AAAA,MAC1B;AAEA,aAAO,KAAK,KAAK,gBAAgB,KAAK,IAAI,gBAAgB,KAAK,CAAC,KAC5D,KAAK,KAAK,gBAAgB,WAAW,IAAI,gBAAgB,WAAW,CAAC,KACrE;AAAA,IACR;AACA,WAAO;AAAA,EACX;AAAA,EACA,eAAe,SAAS;AAMpB,SAAK,QAAQ,WAAW,EAAE,QAAQ,CAAC;AAAA,EACvC;AAAA,EACA,eAAe,SAAS;AAMpB,SAAK,QAAQ,WAAW,EAAE,QAAQ,CAAC;AAAA,EACvC;AAAA,EACA,mBAAmB,SAAS;AAKxB,SAAK,QAAQ,aAAa;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,8BAA8B,MAAM;AAChC,UAAM,YAAY,KAAK,YAAY;AACnC,WAAO;AAAA,MACH,UAAW,CAAC;AAAA,QACR,KAAW;AAAA,QACX,OAAW,KAAK,SAAS;AAAA,QACzB,UAAW,KAAK,MAAM,OAAO,EAAE,OAAO,CAAC,KAAK,UAAU;AAClD,cAAI,SAAS,KAAK;AAAA,YACd,KAAQ;AAAA,YACR,MAAQ;AAAA,YACR,OAAQ,IAAI,WAAW,KAAK,SAAS,wBAAwB;AAAA,UACjE,CAAC;AACD,cAAI,WAAW,CAAC,IAAI;AACpB,iBAAO;AAAA,QACX,GAAG,EAAE,UAAW,CAAC,GAAG,UAAW,MAAM,CAAC,EAAE;AAAA,MAC5C,CAAC;AAAA,IACL;AAAA,EACJ;AACJ;AA5fI,cADiB,cACV,SAAQ;AACf,cAFiB,cAEV,QAAO;AACd,cAHiB,cAGV,gBAAe;AAAA,EAClB,OAAQ;AAAA,IACJ,MAAa;AAAA,IACb,YAAa;AAAA,IACb,SAAa;AAAA,MACT;AAAA,QACI,OAAY;AAAA,QACZ,WAAY;AAAA,MAChB;AAAA,MACA,aAAY;AAAA,IAChB;AAAA,IACA,qBAAsB;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,SAAU;AAAA;AAAA;AAAA;AAAA;AAAA,EAKV,4BAA6B;AAAA;AAAA;AAAA;AAAA;AAAA,EAK7B,uBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKxB,cAAe;AAAA;AAAA;AAAA;AAAA;AAAA,EAKf,oBAAqB;AAAA,EACrB,MAAO;AAAA,EACP,UAAW;AAAA,IACP,OAAQ;AAAA,MACJ,OAAQ;AAAA,IACZ;AAAA,IACA,UAAW;AAAA,MACP,4BAA6B;AAAA,MAC7B,sBAA6B;AAAA,IACjC;AAAA,IACA,UAAW;AAAA,MACP,OAAQ;AAAA,QACJ,WAAe;AAAA,QACf,KAAe;AAAA,QACf,MAAe;AAAA,QACf,OAAe;AAAA,QACf,cAAe;AAAA,UACX,MAAS;AAAA,UACT,MAAS;AAAA,UACT,QAAS,CAAC,EAAE,QAAQ,QAAS,KAAK,MAAM;AACpC,iBAAK,aAAa;AAAA,cACd,IAAS,OAAO;AAAA,cAChB,QAAS,KAAK,QAAQ,IAAI,aAAa;AAAA,YAC3C,CAAC;AAAA,UACL;AAAA,QACJ;AAAA,QACA,eAAgB;AAAA,UACZ,MAAS;AAAA,UACT,MAAS;AAAA,UACT,QAAS,CAAC,EAAE,QAAQ,QAAS,KAAK,MAAM;AACpC,iBAAK,eAAe,OAAO,YAAY;AAAA,UAC3C;AAAA,QACJ;AAAA,QACA,eAAgB;AAAA,UACZ,MAAS;AAAA,UACT,MAAS;AAAA,UACT,QAAS,CAAC,EAAE,QAAQ,QAAS,KAAK,MAAM;AACpC,iBAAK,eAAe,OAAO,YAAY;AAAA,UAC3C;AAAA,QACJ;AAAA,QACA,qBAAsB;AAAA,UAClB,MAAS;AAAA,UACT,QAAS,CAAC,EAAE,QAAQ,QAAS,KAAK,MAAM;AACpC,iBAAK,mBAAmB;AAAA,UAC5B;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA,cAAe;AAAA,EACnB;AAAA,EACA,SAAU;AAAA,IACN,EAAE,MAAO,QAAQ,MAAO,8BAA8B,OAAQ,eAAe,MAAO,GAAG,WAAY,OAAO,UAAW,CAAC,EAAE,MAAM,GAAG,KAAK,MAAM,KAAK,kBAAkB,EAAE,MAAM,GAAG,KAAK,CAAC,GAAG,YAAa,KAAK;AAAA,IACzM,EAAE,MAAO,6BAA6B,OAAQ,cAAc,MAAO,QAAQ,MAAO,GAAG,WAAY,MAAM;AAAA,EAC3G;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,YAAa;AAAA,EACb,mBAAoB;AAAA,IAChB,oBAAoB,EAAE,eAAgB,EAAE,QAAQ,OAAO,EAAE,GAAG;AAExD,UAAI,EAAE,OAAO,UAAU,iBAAiB,OAAO,eAAe;AAC1D,eAAO;AAAA,MACX;AAAA,IACJ;AAAA,IACA,eAAe,EAAE,eAAgB,EAAE,QAAQ,MAAM,EAAE,GAAG;AAClD,aAAO,aAAa,OAAQ,SAAS,QAAQ,MAAM,KAAK,IAAK,QAAQ;AAAA,IACzE;AAAA,IACA,mBAAmB,EAAE,QAAQ,QAAQ,MAAM,GAAG;AAC1C,YAAM,oBAAoB,WAAW,CAAC,OAAO;AAC7C,aAAO,QAAQ,OAAO,YAAY;AAAA,IACtC;AAAA,IACA,WAAW,EAAE,QAAQ,SAAS,GAAG;AAC7B,WAAK,cAAc,IAAI,OAAO,IAAI,CAAC,QAAQ;AAAA,IAC/C;AAAA,EACJ;AACJ;AACA,cAtHiB,cAsHV,aAAY;AAAA,EACf,gBAAiB;AAAA,IACb,MAAoB;AAAA,IACpB,mBAAoB;AAAA,EACxB;AACJ;AA3HJ,IAAqB,cAArB;AA8fA,YAAY,UAAU;AACtB,YAAY,SAAS;;;CChcpB,MAAM;AAEH,QACI,QAAmB;AAAA,IACf;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ,GACA,UAAmB,MAAO,KAAK,KAAK,IACpC,mBAAmB,CAAC,GACpB,YAAY,cAAc,MAAM;AACpC,MAAI,CAAC,cAAc,cAAc,MAAM,KAAK,UAAQ,SAAS,KAAK,SAAS,IAAI,CAAC,KAAK,SAAS,KAAK,SAAS,IAAI,IAAI;AAChH;AAAA,EACJ;AACA,MAAI;AACJ,WAAS,iBAAiB,OAAO,WAAW;AACxC,QAAI,CAAC,aAAa;AACd,oBAAc;AACd,mBAAa,UAAU;AAAA,QACnB,QAAS;AAAA,MACb,CAAC;AAAA,IACL;AAEA,UAAM,QAAQ;AAAA,EAClB;AAAA,EAGA,MAAM,aAAa;AAAA,IACf,OAAO,UAAU,QAAQ;AACrB,YACI,KAAgB,MAChB,UAAgB,aAChB,cAAgB,aAChB,UAAgB,cAAc,WAAW,OAAO,GAChD,gBAAgB,cAAc,YAAY,MAAO,MAAO,IACxD,WAAgB,cAAc,YAAY;AAC9C,aAAO,OAAO,IAAI;AAAA,QACd;AAAA,QACA;AAAA,QACA,SAAmB;AAAA,QACnB,WAAmB,cAAc,YAAY,WAAW;AAAA,QACxD,SAAmB;AAAA,QACnB,kBAAmB;AAAA,QACnB,UAAmB,KAAK,OAAO;AAAA,QAC/B,iBAAmB,KAAK,OAAO;AAAA,MACnC,GAAG,MAAM;AACT,UAAI,CAAC,cAAc,WAAW;AAC1B,gBAAQ,IAAI,WAAW,WAAW,gBAAgB;AAAA,MACtD;AACA,SAAG,oBAAoB;AACvB,UAAI,GAAG,WAAW;AACd,YAAI,SAAS,eAAe,YAAY;AACpC,aAAG,eAAe;AAAA,QACtB,OACK;AACD,mBAAS,iBAAiB,oBAAoB,MAAM;AAChD,gBAAI,SAAS,eAAe,YAAY;AACpC,iBAAG,eAAe;AAAA,YACtB;AAAA,UACJ,CAAC;AAAA,QACL;AAAA,MACJ;AAGA,iBAAW,MAAM;AACb,WAAG,oBAAoB;AAAA,MAC3B,GAAG,aAAa;AAAA,IACpB;AAAA,IACA,OAAO,sBAAsB;AACzB,YACI,KAAa,MACb,aAAa,cAAc,oBAAoB,GAAG,QAAQ,GAC1D,OAAa,OAAO,UAAU;AAClC,UAAI,QAAQ,CAAC,MAAM,IAAI,GAAG;AACtB,WAAG,iBAAiB;AAAA,MACxB;AACA,SAAG,iBAAiB,GAAG,kBAAkB,KAAK,IAAI;AAElD,oBAAc,oBAAoB,GAAG,UAAU,GAAG,cAAc;AAAA,IACpE;AAAA,IACA,WAAW,YAAY;AAxM/B;AAyMY,aAAO,KAAK,WAAY,KAAK,IAAI,IAAI,KAAK,iBAAiB,UAAU,QAAO,kBAAO,YAAP,mBAAiB,KAAK,aAAtB,mBAAgC;AAAA,IAChH;AAAA,IACA,OAAO,sBAAsB;AACzB,YACI,KAAsB,MACtB,sBAAsB,MAAM,cAAc,oBAAoB,GAAG,iBAAiB,KAAK,IAAI,CAAC;AAChG,SAAG,mBAAmB,GAAG,oBAAoB,cAAc,oBAAoB,GAAG,eAAe,KAAK;AAEtG,UAAI,GAAG,oBAAoB,KAAK,IAAI,IAAI,GAAG,mBAAmB,SAAS;AACnE;AAAA,MACJ;AACA,UAAI,GAAG,WAAW;AACd,cACI,MAAS,mBAAmB,SAAS,IAAI,GACzC,SAAS,GAAG,GAAG,SAAS,OAAO,OAAO,QAAQ,OAAO,QAAQ,GAAG,IAChE,MAAS,IAAI,MAAM;AACvB,YAAI,SAAS,MAAM;AAEf,cAAI,IAAI,iBAAiB,GAAG;AACxB,eAAG,WAAW;AAAA,UAClB,OACK;AAED,gCAAoB;AAAA,UACxB;AAAA,QACJ;AACA,YAAI,UAAU,MAAM;AAChB,8BAAoB;AAAA,QACxB;AACA,YAAI,MAAM;AAAA,MACd,OACK;AACD,4BAAoB;AAAA,MACxB;AAAA,IACJ;AAAA,IACA,OAAO,iBAAiB;AACpB,YAAM,SAAS,KAAK,OAAO;AAC3B,UAAI,CAAC,KAAK,iBAAiB;AACvB,aAAK,kBAAkB;AACvB,YAAI,CAAC,cAAc,WAAW;AAC1B,kBAAQ,KAAK,WAAW,KAAK,OAAO,8IAA8I;AAAA,QACtL;AACA,eAAO,aAAa,MAAM,KAAK;AAAA,UAC3B,MAAc,sBAAsB,KAAK,OAAO;AAAA,UAChD,SAAc;AAAA,UACd,aAAc;AAAA,QAClB,CAAC;AAAA,MACL;AACA,gBAAU,mBAAmB,QAAQ,mBAAmB;AACxD,gBAAU,gBAAgB,QAAQ,gBAAgB,aAAW;AACzD,cAAM,SAAS,OAAO,YAAY,SAAS,QAAQ;AACnD,YAAI,iBAAiB,KAAK,SAAO,kBAAkB,GAAG,GAAG;AACrD,eAAK,kBAAkB,MAAM;AAAA,QACjC;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,IACA,OAAO,aAAa;AAChB,WAAK,UAAU;AAEf,oBAAc,uBAAuB,KAAK,eAAe;AAEzD,oBAAc,oBAAoB,KAAK,UAAU,CAAC;AAClD,WAAK,eAAe;AAAA,IACxB;AAAA,IACA,OAAO,kBAAkB,QAAQ;AAC7B,aAAO,KAAK;AAAA,QACR,MAAQ;AAAA,QACR,MAAQ;AAAA,QACR,MAAQ;AAAA,QACR,OAAQ;AAAA,MACZ,CAAC;AAAA,IACL;AAAA,IACA,OAAO,aAAa,SAAS;AAAA,MACzB,YAAY;AAAA,MACZ,aAAa;AAAA,IACjB,IAAI,CAAC,GAAG;AApRhB;AAsRY,UAAI,cAAc,YAAY,SAAS,MAAM;AACzC;AAAA,MACJ;AACA,YACI,UAAY,qBAAU,cAAV,mBAAqB,SAArB,mBAA2B,cAAc,SAAS,YAAW,YAAY,YACrF,YAAY;AAAA,sLAC0J,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAY/K,cAAQ,MAAM,kBAAkB,kCAAkC,OAAO,KAAK,SAAS,CAAC;AAAA,IAC5F;AAAA,EACJ;AAGA,QAAM,oBAAoB,eAAa;AACnC,qBAAiB,KAAK,SAAS;AAC/B,aAAS,MAAM,MAAM;AAAA,MACjB,WAAW,SAAS;AAChB,eAAO;AAAA,UACH,OAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,MACA,kBAAkB;AACd,cACI,KAAgB,MAChB,gBAAgB,MAAM;AAClB,gBAAM,UAAU,GAAG,WAAW,OAAO,OAAO,GAAG,QAAQ,IAAI,CAAC,EAAE;AAC9D,qBAAW,UAAU,SAAS;AAC1B,gBAAI,OAAO,SAAS;AAChB,2BAAa,aAAa,OAAO,OAAO;AAAA,YAC5C;AAAA,UACJ;AAAA,QACJ;AACJ,yBAAiB,IAAI,SAAS;AAC9B,sBAAc;AAEd,6BAAa,GAAG,SAAS,MAAM;AAC3B,wBAAc;AAAA,QAClB,CAAC;AACD,YAAI,aAAa,WAAW;AACxB,uBAAa,kBAAkB,EAAE;AAAA,QACrC;AAAA,MACJ;AAAA,IACJ,CAAC;AAAA,EACL;AAEA,MAAI,OAAO,qBAAqB,aAAa;AACzC,sBAAkB,gBAAgB;AAClC,aAAS,MAAM,MAAM;AAAA,MACjB,WAAW,SAAS;AAChB,eAAO;AAAA,UACH,OAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,MACA,oBAAoB;AAChB,YAAI,aAAa,aAAa,KAAK,gBAAgB;AAC/C,iBAAO,CAAC;AAAA,QACZ,OACK;AACD,iBAAO,KAAK,YAAY,kBAAkB,MAAM,MAAM,SAAS;AAAA,QACnE;AAAA,MACJ;AAAA,IACJ,CAAC;AAAA,EACL;AACJ,GAAG;AAAA,CACF,MAAM;AAEH,QAAM,iBAAiB;AAEvB,MAAI,CAAC,SAAS,YAAY,eAAe,KAAK,SAAS,SAAS,IAAI,KAAK,OAAO,QAAQ,QAAQ;AAC5F;AAAA,EACJ;AACA,MAAI;AACJ,QAAM,cAAc;AAAA,IAChB;AAAA,IACA;AAAA,EACJ;AACA,QACI,WAAa,CAAC,YAAY,QAAQ,SAAS,aAAa,gBAAgB,WAAW,GACnF,aAAa,CAAC,WAAW,SAAS,OAAO,OAAO;AACpD,cAAY,OAAO,GAAG,GAAG,GAAG,SAAS,IAAI,UAAQ,WAAW,IAAI,eAAa,GAAG,SAAS,IAAI,IAAI,EAAE,CAAC,EAAE,OAAO,aAAa,EAAE,KAAK,CAAC;AAClI,MAAI,SAAS,SAAS,KAAK,MAAM,YAAY,KAAK,GAAG,CAAC,GAAG;AACrD,SAAK;AAAA,EACT,OACK;AACD,SAAK;AAAA,EACT;AACA,QAAM,YAAY,SAAS,cAAc,QAAQ;AACjD,YAAU,SAAS,WAAW;AAC1B,WAAO,YAAY,OAAO,aAAa,CAAC;AACxC,aAAS,OAAO;AACZ,aAAO,UAAU,KAAK,SAAS;AAAA,IACnC;AACA,SAAK,MAAM,oBAAI,KAAK,CAAC;AACrB,SAAK,UAAU,EAAE;AAAA,EACrB;AACA,WAAS,KAAK,YAAY,SAAS;AACnC,YAAU,MAAM,iDAAiD;AACrE,GAAG;",
  "names": ["_a", "DependencyEdit", "draggedEvent", "_a", "record", "record", "id", "_a"]
}
