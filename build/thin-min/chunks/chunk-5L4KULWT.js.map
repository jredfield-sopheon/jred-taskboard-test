{
  "version": 3,
  "sources": ["../../../../Grid/lib/Grid/column/ColorColumn.js", "../../../../Grid/lib/Grid/feature/GroupSummary.js", "../../../../Grid/lib/Grid/feature/RowResize.js", "../../../../Grid/lib/Grid/feature/Split.js", "../../../../Grid/lib/Grid/util/TableExporter.js", "../../../../Grid/lib/Grid/util/BooleanUnicodeSymbol.js", "../../../../Grid/lib/Grid/feature/experimental/ExcelExporter.js"],
  "sourcesContent": ["import Menu from '../../Core/widget/Menu.js';\nimport Column from './Column.js';\nimport  '../../Core/widget/ColorPicker.js';\nimport ColumnStore from '../data/ColumnStore.js';\n/**\n * @module Grid/column/ColorColumn\n */\n/**\n * A column that displays color values (built-in color classes or CSS colors) as a colored element similar to\n * the {@link Core.widget.ColorField}. When the user clicks the element, a {@link Core.widget.ColorPicker} lets the user\n * select from a range of colors.\n *\n * {@inlineexample Grid/column/ColorColumn.js}\n *\n * ```javascript\n * new Grid({\n *    columns : [\n *       {\n *          type   : 'color',\n *          field  : 'color',\n *          text   : 'Color'\n *       }\n *    ]\n * });\n * ```\n *\n * @extends Grid/column/Column\n * @classtype color\n */\nexport default class ColorColumn extends Column {\n    static $name = 'ColorColumn';\n    static type = 'color';\n    static fields = [\n        { name : 'colorEditorType', defaultValue : 'colorpicker' },\n        /**\n         * Array of CSS color strings to be able to chose from. This will override the\n         * {@link Core.widget.ColorPicker#config-colors pickers default colors}.\n         *\n         * Provide an array of string CSS colors:\n         * ```javascript\n         * new Grid({\n         *    columns : [\n         *       {\n         *          type   : 'color',\n         *          field  : 'color',\n         *          text   : 'Color',\n         *          colors : ['#00FFFF', '#F0FFFF', '#89CFF0', '#0000FF', '#7393B3']\n         *       }\n         *    ]\n         * });\n         * ```\n         * @prp {String[]}\n         */\n        'colors',\n        /**\n         * Adds an option in the picker to set no background color\n         * @prp {Boolean}\n         * @default true\n         */\n        { name : 'addNoColorItem', defaultValue : true }\n    ];\n    static defaults = {\n        align  : 'center',\n        editor : null\n    };\n    construct() {\n        super.construct(...arguments);\n        const\n            me       = this,\n            { grid } = me;\n        me.menu = new Menu({\n            owner             : grid,\n            rootElement       : grid.rootElement,\n            autoShow          : false,\n            align             : 't50-b50',\n            anchor            : true,\n            internalListeners : {\n                hide() {\n                    me.picker.navigator.activeItem = null;\n                    delete me._editingRecord;\n                }\n            },\n            items : [\n                Object.assign({\n                    type           : me.colorEditorType,\n                    ref            : 'list',\n                    addNoColorItem : me.addNoColorItem,\n                    colorSelected({ color }) {\n                        me._editingRecord?.set(me.field, color);\n                        me.menu.hide();\n                    }\n                }, me.colors?.length ? { colors : me.colors } : {})\n            ]\n        });\n    }\n    applyValue(useProp, field, value) {\n        if (!this.isConstructing) {\n            const { picker } = this;\n            if (field === 'colors') {\n                picker.colors = value;\n            }\n            else if (field === 'addNoColorItem') {\n                picker.addNoColorItem = value;\n            }\n        }\n        super.applyValue(...arguments);\n    }\n    get picker() {\n        return this.menu.widgetMap.list;\n    }\n    renderer({ value }) {\n        let colorClass      = 'b-empty',\n            backgroundColor = value;\n        if (value) {\n            const colorClassName = this.picker.getColorClassName(value);\n            if (colorClassName) {\n                colorClass      = colorClassName;\n                backgroundColor = null;\n            }\n            else {\n                colorClass = '';\n            }\n        }\n        return {\n            className : 'b-color-cell-inner ' + colorClass,\n            style     : {\n                backgroundColor\n            },\n            'data-btip' : value\n        };\n    }\n    onCellClick({ grid, record, target }) {\n        if (target.classList.contains('b-color-cell-inner') && !this.readOnly &&\n            !grid.readOnly && !record.isSpecialRow && !record.readOnly\n        ) {\n            const\n                { picker, menu } = this,\n                value            = record.get(this.field);\n            this._editingRecord = record;\n            picker.deselectAll();\n            picker.select(value);\n            picker.refresh();\n            menu.showBy(target);\n        }\n    }\n}\nColumnStore.registerColumnType(ColorColumn);\nColorColumn._$name = 'ColorColumn';", "import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\nimport SummaryFormatter from './mixin/SummaryFormatter.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\n/**\n * @module Grid/feature/GroupSummary\n */\n/**\n * Displays a summary row as a group footer in a grouped grid. Uses same configuration options on columns as\n * {@link Grid.feature.Summary}.\n *\n * This feature is <strong>disabled</strong> by default.\n *\n * ```javascript\n * features : {\n *     group        : 'city',\n *     groupSummary : true\n * }\n * ```\n *\n * {@inlineexample Grid/feature/GroupSummary.js}\n *\n * @demo Grid/groupsummary\n *\n * @extends Core/mixin/InstancePlugin\n * @classtype groupSummary\n * @feature\n */\nexport default class GroupSummary extends SummaryFormatter(InstancePlugin) {\n    //region Init\n    static get $name() {\n        return 'GroupSummary';\n    }\n    static get configurable() {\n        return {\n            /**\n             * Set to `true` to have group summaries rendered in the group header when a group is collapsed.\n             *\n             * Only applies when {@link #config-target} is `'footer'` (the default).\n             *\n             * @member {Boolean} collapseToHeader\n             */\n            /**\n             * Configure as `true` to have group summaries rendered in the group header when a group is collapsed.\n             *\n             * ```javascript\n             * const grid = new Grid({\n             *    features : {\n             *        groupSummary : {\n             *            collapseToHeader : true\n             *        }\n             *    }\n             * });\n             * ```\n             *\n             * Only applies when {@link #config-target} is `'footer'` (the default).\n             *\n             * @config {Boolean}\n             */\n            collapseToHeader : null,\n            /**\n             * Where to render the group summaries to, either `header` to display them in the group header or `footer`\n             * to display them in the group footer (the default).\n             *\n             * @member {'header'|'footer'} target\n             */\n            /**\n             * Where to render the group summaries to, either `header` to display them in the group header or `footer`\n             * to display them in the group footer (the default).\n             *\n             * ```javascript\n             * const grid = new Grid({\n             *    features : {\n             *        groupSummary : {\n             *            target : 'header'\n             *        }\n             *    }\n             * });\n             * ```\n             *\n             * @config {'header'|'footer'}\n             * @default\n             */\n            target : 'footer'\n        };\n    }\n    construct(grid, config) {\n        this.grid = grid;\n        super.construct(grid, config);\n        if (!grid.features.group) {\n            throw new Error('Requires Group feature to work, please enable');\n        }\n        this.bindStore(grid.store);\n        grid.rowManager.ion({\n            beforeRenderRow : 'onBeforeRenderRow',\n            renderCell      : 'renderCell',\n            // The feature gets to see cells being rendered after the Group feature\n            // because the Group feature injects header content into group header rows\n            // and adds rendering info to the cells renderData which we must comply with.\n            // In particular, it calculates the isFirstColumn flag which it adds to\n            // the cell renderData which we interrogate.\n            prio    : 1000,\n            thisObj : this\n        });\n    }\n    bindStore(store) {\n        this.detachListeners('store');\n        store.ion({\n            name    : 'store',\n            update  : 'onStoreUpdate',\n            // need to run before grids listener, to flag for full refresh\n            prio    : 1,\n            thisObj : this\n        });\n    }\n    get store() {\n        return this.grid.store;\n    }\n    doDisable(disable) {\n        // Toggle footers if needed\n        this.updateTarget(this.target);\n        super.doDisable(disable);\n    }\n    changeTarget(target) {\n        ObjectHelper.assertString(target, 'target');\n        return target;\n    }\n    updateTarget(target) {\n        // Flag that will make the Store insert rows for group footers\n        this.store.useGroupFooters = !this.disabled && target === 'footer';\n        // Refresh groups to show/hide footers\n        if (!this.isConfiguring) {\n            this.store.group();\n        }\n    }\n    changeCollapseToHeader(collapseToHeader) {\n        ObjectHelper.assertBoolean(collapseToHeader, 'collapseToHeader');\n        return collapseToHeader;\n    }\n    updateCollapseToHeader() {\n        if (!this.isConfiguring) {\n            this.store.group();\n        }\n    }\n    //endregion\n    //region Plugin config\n    // Plugin configuration. This plugin chains some of the functions in Grid.\n    static get pluginConfig() {\n        return {\n            chain : ['bindStore']\n        };\n    }\n    //endregion\n    //region Render\n    /**\n     * Called before rendering row contents, used to reset rows no longer used as group summary rows\n     * @private\n     */\n    onBeforeRenderRow({ row, record }) {\n        if (row.isGroupFooter && !('groupFooterFor' in record.meta)) {\n            // not a group row.\n            row.isGroupFooter = false;\n            // force full \"redraw\" when rendering cells\n            row.forceInnerHTML = true;\n        }\n        else if (row.isGroupHeader && !record.meta.collapsed) {\n            // remove any summary elements\n            row.eachElement(this.removeSummaryElements);\n        }\n    }\n    removeSummaryElements(rowEl) {}\n    /**\n     * Called when a cell is rendered, styles the group rows first cell.\n     * @private\n     */\n    renderCell({ column, cellElement, row, record, size, isFirstColumn }) {\n        const\n            me            = this,\n            { meta }      = record,\n            { rowHeight } = me.grid,\n            isGroupHeader = 'groupRowFor' in meta,\n            isGroupFooter = 'groupFooterFor' in meta,\n            targetsHeader = me.target === 'header',\n            rowClasses    = {\n                'b-group-footer'   : 0,\n                'b-header-summary' : 0\n            },\n            isSummaryTarget =\n                // Header cell should have summary content if we are targeting the header or if the group is collapsed\n                // and we are configured with collapseToHeader, excluding the first column which holds the group title\n                (isGroupHeader && (targetsHeader || me.collapseToHeader && meta.collapsed) && !isFirstColumn) ||\n                // Footer cell should have summary content if we are targeting the footer (won't render if collapsed)\n                (isGroupFooter && !targetsHeader);\n        // Needed to restore height when summary is no longer displayed\n        if (isGroupHeader || isGroupFooter) {\n            size.height = isGroupHeader ? (size.height || rowHeight) : rowHeight;\n        }\n        if (me.store.isGrouped && isSummaryTarget && !me.disabled) {\n            // clear cell before add any HTML in it. if the cell contained widgets, they will be properly destroyed.\n            column.clearCell(cellElement);\n            const groupRecord = isGroupHeader ? record : meta.groupRecord;\n            row.isGroupFooter = isGroupFooter;\n            row.isGroupHeader = isGroupHeader;\n            // This is a group footer row, add css\n            if (isGroupFooter) {\n                rowClasses['b-group-footer'] = 1;\n            }\n            // This is a group header row, add css\n            else {\n                rowClasses['b-header-summary'] = 1;\n            }\n            // returns height config or count. config format is { height, count }. where `height is in px and should be\n            // added to value calculated from `count\n            const\n                heightSetting = me.updateSummaryHtml(cellElement, column, groupRecord),\n                count         = typeof heightSetting === 'number' ? heightSetting : heightSetting.count;\n            // number of summaries returned, use to calculate cell height\n            if (count > 1) {\n                size.height += (meta.collapsed && !targetsHeader ? 0 : count * rowHeight * 0.1);\n            }\n            // height config with height specified, added to cell height\n            if (heightSetting.height) {\n                size.height += heightSetting.height;\n            }\n        }\n        // Sync row's classes with its status as a group header or footer.\n        row.assignCls(rowClasses);\n    }\n    updateSummaryHtml(cellElement, column, groupRecord) {\n        const records = groupRecord.groupChildren.slice();\n        // Group footers should not be included in summary calculations\n        if (records[records.length - 1].isGroupFooter) {\n            records.pop();\n        }\n        const html = this.generateHtml(column, records, 'b-grid-group-summary', groupRecord, groupRecord.meta.groupField, groupRecord.meta.groupRowFor);\n        // First time, set table\n        if (!cellElement.children.length) {\n            cellElement.innerHTML = html;\n        }\n        // Following times, sync changes\n        else {\n            DomHelper.sync(html, cellElement.firstElementChild);\n        }\n        // return summary \"count\", used to set row height\n        return column.summaries ? column.summaries.length : column.sum ? 1 : 0;\n    }\n    //endregion\n    //region Events\n    /**\n     * Updates summaries on store changes (except record update, handled below)\n     * @private\n     */\n    onStoreUpdate({ source : store, changes }) {\n        if (!this.disabled && store.isGrouped) {\n            // If a grouping field is among the changes, StoreGroup#onDataChanged will\n            // take care of the update by re-sorting.\n            if (changes && store.groupers.find(grouper => grouper.field in changes)) {\n                return;\n            }\n            // only update summary when a field that affects summary is changed\n            const shouldUpdate = Object.keys(changes).some(field => {\n                const colField = this.grid.columns.get(field);\n                // check existence, since a field not used in a column might have changed\n                return Boolean(colField) && (Boolean(colField.sum) || Boolean(colField.summaries));\n            });\n            if (shouldUpdate) {\n                this.grid.forceFullRefresh = true;\n            }\n        }\n    }\n    //endregion\n    /**\n     * Refreshes the summaries\n     */\n    refresh() {\n        this.grid.columns.visibleColumns.forEach(column => {\n            if (this.hasSummary(column)) {\n                this.grid.refreshColumn(column);\n            }\n        });\n    }\n    hasSummary(column) {\n        return column.sum || column.summaries;\n    }\n}\nGroupSummary.featureClass = 'b-group-summary';\nGroupSummary._$name = 'GroupSummary'; GridFeatureManager.registerFeature(GroupSummary);\n", "import ResizeHelper from '../../Core/helper/ResizeHelper.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\nimport EventHelper from '../../Core/helper/EventHelper.js';\n/**\n * @module Grid/feature/RowResize\n */\n/**\n * Enables user to change row height by dragging the bottom row border. After a resize operation, the {@link Grid/data/GridRowModel#field-rowHeight}\n * field of the record is updated (when {@link #config-applyToAllRows} is `false`).\n *\n * Try hovering the bottom row border in the grid below and use drag-drop to change the row height.\n *\n * {@inlineexample Grid/feature/RowResize.js}\n *\n * This feature is **disabled** by default.\n *\n * @extends Core/mixin/InstancePlugin\n * @classtype rowResize\n * @feature\n * @demo Grid/rowheight\n */\nexport default class RowResize extends InstancePlugin {\n    static $name = 'RowResize';\n    static configurable = {\n        /**\n         * Set this to true to modify the global {@link Grid/view/Grid#config-rowHeight} which affects all grid rows.\n         * @prp {Boolean}\n         * @default false\n         */\n        applyToAllRows : null,\n        /**\n         * Set this to a CSS selector to only trigger row resizing in cells for a specific column.\n         * @config {String}\n         * @default\n         */\n        cellSelector : '.b-grid-cell',\n        /**\n         * Minimum height when resizing\n         * @prp {Number}\n         * @default\n         */\n        minHeight : 20,\n        /**\n         * Max height when resizing\n         * @prp {Number}\n         */\n        maxHeight : 0\n    };\n    //region Init\n    construct(grid, config) {\n        const me = this;\n        super.construct(...arguments);\n        me.resizer = new ResizeHelper({\n            name                    : 'rowResize',\n            targetSelector          : '.b-grid-row:not(.b-group-header)',\n            handleContainerSelector : '.b-grid-row',\n            outerElement            : grid.element,\n            direction               : 'vertical',\n            dragThreshold           : 1,\n            handleSize              : Math.min(5, grid.rowHeight * 0.1),\n            internalListeners       : {\n                beforeresizestart : me.onBeforeResizeStart,\n                resizestart       : me.onResizeStart,\n                resizing          : me.onResizing,\n                resize            : me.onResize,\n                cancel            : me.onCancel,\n                thisObj           : me\n            },\n            allowResize(target, event) {\n                return grid.hoveredCell?.matches(me.cellSelector);\n            },\n            overTopHandle(event, target) {\n                if (this.canResize(target, event) && target.dataset.index !== '0') {\n                    const topHandle = Rectangle.from(target);\n                    topHandle.height = this.handleSize;\n                    return topHandle.height > 0 && Math.abs(topHandle.top - EventHelper.getPagePoint(event).top) < this.handleSize;\n                }\n                return false;\n            },\n            internalBeforeStart(context) {\n                const { edge, element } = context;\n                // Grabbing top handle of any row except first is interpreted as grabbing bottom handle of the previous\n                // row\n                if (edge === 'top') {\n                    return {\n                        edge    : 'bottom',\n                        element : element.previousElementSibling\n                    };\n                }\n            },\n            // Prevent selection as a result of mousedown on virtual handle\n            onResizeHandlePointerDown(event) {\n                grid.selectionDisabled = true;\n                if (grid.features.rowReorder) {\n                    me._oldReorderDisabled          = grid.features.rowReorder.disabled;\n                    grid.features.rowReorder.disabled = true;\n                }\n                grid.setTimeout(() => {\n                    grid.selectionDisabled = false;\n                }, 10);\n            }\n        });\n    }\n    doDestroy() {\n        this.resizer?.destroy();\n        super.doDestroy();\n    }\n    //endregion\n    //region Events\n    onBeforeResizeStart() {\n        return !this.disabled;\n    }\n    onResizeStart({ source, context }) {\n        const\n            { client }    = this,\n            applyGlobally = this.applyToAllRows || client.fixedRowHeight;\n        context.record    = client.store.getById(context.element.dataset.id);\n        context.oldHeight = context.record.rowHeight;\n        client.store.suspendAutoCommit();\n        Object.assign(source, {\n            minHeight           : this.minHeight,\n            maxHeight           : this.maxHeight,\n            // Only update live element if applying to all rows\n            skipUpdatingElement : !applyGlobally\n        });\n        client.element.classList.add('b-row-resizing');\n    }\n    onResizing({ context }) {\n        if (!this.applyToAllRows && !this.client.fixedRowHeight && context.valid) {\n            context.record.rowHeight = context.newHeight;\n        }\n    }\n    onResize({ context }) {\n        const { client } = this;\n        if (this.applyToAllRows || client.fixedRowHeight) {\n            client.rowHeight = context.newHeight;\n        }\n        else if (client.selectionMode.multiSelect && client.selectedRecords.includes(context.record)) {\n            client.selectedRecords.forEach(record => record.rowHeight = context.newHeight);\n        }\n        this.cleanup();\n    }\n    /**\n     * Restore row size on cancel (ESC)\n     * @private\n     */\n    onCancel({ context }) {\n        if (!this.applyToAllRows && !this.client.fixedRowHeight) {\n            context.record.rowHeight = context.oldHeight;\n        }\n        this.cleanup();\n    }\n    //endregion\n    cleanup() {\n        const { client } = this;\n        client.element.classList.remove('b-row-resizing');\n        client.store.resumeAutoCommit();\n        if (typeof this._oldReorderDisabled === 'boolean') {\n            client.features.rowReorder.disabled = this._oldReorderDisabled;\n        }\n    }\n}\nRowResize._$name = 'RowResize'; GridFeatureManager.registerFeature(RowResize, false);\n", "import ArrayHelper from '../../Core/helper/ArrayHelper.js';\nimport AsyncHelper from '../../Core/helper/AsyncHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\nimport Splitter from '../../Core/widget/Splitter.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from './GridFeatureManager.js';\n/**\n * @module Grid/feature/Split\n */\nconst\n    startScrollOptions = Object.freeze({\n        animate : false,\n        block   : 'start'\n    }),\n    endScrollOptions = Object.freeze({\n        animate : false,\n        block   : 'end'\n    }),\n    splitterWidth = 7,\n    // Listeners for these events should not be added to splits\n    ignoreListeners     = {\n        split   : 1,\n        unsplit : 1\n    };\n;\n/**\n * This feature allows splitting the Grid into multiple views, either by using the cell context menu, or\n * programmatically by calling {@link #function-split split()}.\n *\n * {@inlineexample Grid/feature/Split.js}\n *\n * It handles splitting in 3 \"directions\":\n *\n * - `'horizontal'` - Splitting the grid into 2 sub-views, one above the other.\n * - `'vertical'` - Splitting the grid into 2 sub-views, one to the left of the other.\n * - `'both'` - Splitting the grid into 4 sub-views, one in each corner.\n *\n * Or, by supplying a record and/or a column to split by.\n *\n * The first sub-view (top, left or top-left depending on split direction) is the original grid, and the others are\n * clones of the original. The clones share the same store, columns and selection.\n *\n * Sub-views in the same column sync their scrolling horizontally, and sub-views in the same row sync their scrolling\n * vertically.\n *\n * Sub-views are separated by splitters, that can be dragged to resize the views.\n *\n * Splitting a multi-region grid (two regions supported) only includes the region in which the split was performed in\n * the split view.\n *\n * Splitting works best on grids that use fixed column widths, since flexed columns will resize when the grid is split.\n *\n * ## Splitting programmatically\n *\n * The split feature assigns two methods to the owning grid:\n *\n * - {@link #function-split split()} - Splits the grid into sub-views.\n * - {@link #function-unsplit unsplit()} - Re-joins the sub-views into a single grid.\n *\n * Use them to split programmatically in your app.\n *\n * ```javascript\n * // Split horizontally (eg. at the row in the center of the grid)\n * await grid.split({ direction : 'horizontal' });\n *\n * // Split both ways by a specific column and record\n * await grid.split({\n *    atRecord : grid.store.getById(10),\n *    atColumn : grid.columns.get('city')\n * });\n *\n * // Remove splits, returning to a single grid\n * grid.unsplit();\n * ```\n *\n * ## Splitting using the cell context menu\n *\n * The feature also adds a new sub-menu to the cell context menu, allowing the user to split (or un-split) the grid. See\n * the API documentation for the {@link Grid/feature/CellMenu} feature for more information on how to customize the\n * sub-menu.\n *\n * ## Accessing a sub-view\n * The sub-views are accessed by index. The original grid is at index 0, and the others are as shown below.\n * For 'horizontal' splits:\n *\n * <div style=\"font-size: 0.8em\">\n *     <div style=\"border: 1px solid #ccc; border-bottom: 2px solid #999; padding: 1em; width: 13em\">0 - Original</div>\n *     <div style=\"border: 1px solid #ccc; border-top: none; padding: 1em; width: 13em\">1 - Sub-view</div>\n * </div>\n *\n * For 'vertical' splits:\n *\n * <div style=\"display: flex; flex-direction: row;font-size: 0.8em\">\n *     <div style=\"border: 1px solid #ccc; border-right: 2px solid #999; padding: 1em; width: 13em\">0 - Original</div>\n *     <div style=\"border: 1px solid #ccc; border-left: none; padding: 1em; width: 13em\">1 - Sub-view</div>\n * </div>\n *\n * For 'both' splits:\n *\n * <div style=\"display: flex; flex-flow: row wrap; width : 27em;font-size: 0.8em\">\n *     <div style=\"border: 1px solid #ccc; border-right: 2px solid #999; border-bottom: 2px solid #999; padding: 1em; width: 13em\">0 - Original</div>\n *     <div style=\"border: 1px solid #ccc; border-left: none; border-bottom: 2px solid #999; padding: 1em; width: 13em\">1 - Sub-view</div>\n *     <div style=\"border: 1px solid #ccc; border-right: 2px solid #999;border-top: none; padding: 1em; width: 13em\">2 - Sub-view</div>\n *     <div style=\"border: 1px solid #ccc; border-top: none; border-left: none; padding: 1em; width: 13em\">3 - Sub-view</div>\n * </div>\n *\n * The {@link #property-subViews} property returns an array containing all sub-views, including the original. Note that\n * the property is also exposed on the owning Grid. Access a specific sub-view by index (see illustrations above). For\n * example to access the bottom right sub-view in a 'both' split:\n *\n * ```javascript\n * await grid.split({ direction : 'both' });\n * const bottomRight = grid.subViews[3];\n * await bottomRight.scrollRowIntoView(100);\n * ```\n *\n * ## Troubleshooting\n *\n * The splits are inserted into a container element (which has the `.b-split-container` CSS class), replacing the\n * original grid. If it does not render correctly out of the box, you should make sure that any CSS rules you have that\n * apply size to the grid also applies to the container element.\n *\n * For example if you use a CSS flex rule to size the grid:\n *\n * ```css\n * .b-grid {\n *     // Size grid using flex\n *     flex : 3;\n * }\n * ```\n *\n * Then you should also apply the same rule to the container element:\n *\n * ```css\n * .b-grid,\n * .b-split-container {\n *     flex : 3;\n * }\n * ```\n *\n * {@note}\n * Note that configuration changes at runtime, when already split, are not automatically propagated to the sub-views. If\n * you need to change a config at runtime, either first unsplit the grid, or change it on each sub-view individually. A\n * notable exception from this is that enabling / disabling features at runtime is reflected in the sub-views.\n * {/@note}\n *\n * This feature is **disabled** by default.\n *\n * @extends Core/mixin/InstancePlugin\n * @classtype split\n * @feature\n */\nexport default class Split extends InstancePlugin {\n    static $name = 'Split';\n    static featureClass = '';\n    static configurable = {\n        /**\n         * An array of sub-views. The first sub-view is the original grid, and the others are clones of the original.\n         * See the \"Accessing a sub-view\" section above for more information.\n         *\n         * ```javascript\n         * await grid.split('vertical');\n         * const bottom = grid.subViews[1];\n         * await bottom.scrollRowIntoView(100);\n         * ```\n         *\n         * Note that this property is accessible directly on the grid instance.\n         *\n         * @member {Grid.view.Grid[]} subViews\n         * @on-owner\n         * @readonly\n         * @category Common\n         */\n        subViews : [], // Not a config, but still defined in configurable to allow assigning it in pluginConfig,\n        /**\n         * Properties whose changes should be relayed to sub-views at runtime.\n         *\n         * Supply an object with property names as keys, and a truthy value to relay the change, or a falsy value to not\n         * relay it. The object will be merged with the default values.\n         *\n         * By default, these properties are relayed:\n         * * {@link Grid/view/Grid#property-readOnly}\n         * * {@link Grid/view/Grid#property-rowHeight}\n         *\n         * Example of supplying a custom set of properties to relay:\n         * ```javascript\n         * const grid = new Grid({\n         *     features : {\n         *         split : {\n         *             relayProperties : {\n         *                 readOnly : false, // Do not relay readOnly changes\n         *                 myConfig : true   // Relay changes to the myConfig property\n         *             }\n         *         }\n         *     }\n         * }\n         * ```\n         * @config {Object<String,Boolean>}\n         */\n        relayProperties : {\n            value : {\n                readOnly  : 1,\n                rowHeight : 1\n            },\n            $config : {\n                merge : 'merge'\n            }\n        }\n    };\n    static pluginConfig = {\n        chain  : ['populateCellMenu', 'afterConfigChange', 'afterAddListener', 'afterRemoveListener'],\n        assign : ['split', 'unsplit', 'subViews', 'syncSplits']\n    };\n    // Flag used to ignore column changes that arise from syncing columns\n    #ignoreColumnChanges = false;\n    restorers = [];\n    doDestroy() {\n        this.unsplit(true);\n        super.doDestroy();\n    }\n    doDisable(disable) {\n        const me = this;\n        if (!me.isConfiguring) {\n            if (disable) {\n                me._disabledSplitOptions = me._splitOptions;\n                me.unsplit();\n            }\n            else if (me._disabledSplitOptions) {\n                me.split(me._disabledSplitOptions);\n                me._disabledSplitOptions = null;\n            }\n        }\n    }\n    //region Split / unsplit\n    get isSplit() {\n        return Boolean(this.widgets?.length);\n    }\n    getClientConfig(appendTo, order, options, config = {}) {\n        const\n            { client }            = this,\n            { subGrids, regions } = client,\n            columns                = client.columns.records.slice(),\n            subGridConfigs         = ObjectHelper.assign({}, client.subGridConfigs);\n        // Match current sub-grid sizes\n        client.eachSubGrid(subGrid => {\n            const config = subGridConfigs[subGrid.region];\n            if (subGrid.flex) {\n                config.flex = subGrid.flex;\n            }\n            else {\n                config.width = subGrid.element.style.width;\n            }\n        });\n        if (options.atColumn && regions.length > 1 && order > 0) {\n            // Exclude regions to the left of the split\n            const subGridIndex = regions.indexOf(options.atColumn.region);\n            for (let i = 0; i < subGridIndex; i++) {\n                const subGrid = subGrids[regions[i]];\n                ArrayHelper.remove(columns, ...subGrid.columns.records);\n                delete subGridConfigs[regions[i]];\n            }\n        }\n        const clientConfig = ObjectHelper.assign({}, client.initialConfig, {\n            appendTo,\n            insertFirst  : null,\n            insertBefore : null,\n            splitFrom    : client,\n            owner        : client.owner,\n            // Use no toolbar or fake empty toolbar for things to line up nicely\n            tbar         : client.initialConfig.tbar && order === 1 ? {\n                height : client.tbar.height,\n                items  : [' ']\n            } : null,\n            // Share store & selection\n            store                    : client.store,\n            selectedRecordCollection : client.selectedRecordCollection,\n            subGridConfigs,\n            // Cannot directly share columns, since there is a 1-1 mapping between column and it's header\n            columns                  : this.cloneColumns(columns),\n            minHeight                : 0,\n            minWidth                 : 0\n        }, config);\n        // Make sure we use up-to-date values for all properties that should be relayed\n        for (const prop of ObjectHelper.keys(this.relayProperties)) {\n            clientConfig[prop] = client[prop];\n        }\n        // Listeners are removed from initialConfig during initialization, use non-internal current listeners\n        const appListeners = {};\n        for (const name in client.listeners) {\n            if (!ignoreListeners[name]) {\n                const listeners = client.listeners[name].filter(l => !l.$internal);\n                if (listeners.length) {\n                    appListeners[name] = listeners;\n                }\n            }\n        }\n        // Not internalListeners on purpose, these are app listeners\n        clientConfig.listeners = appListeners;\n        // Hide headers for bottom clone in horizontal split\n        if (options.direction === 'horizontal') {\n            clientConfig.hideHeaders = true;\n        }\n        // Hide headers for bottom clones in both split\n        else if (options.direction === 'both' && order !== 1) {\n            clientConfig.hideHeaders = true;\n        }\n        delete clientConfig.data;\n        delete clientConfig.adopt;\n        return clientConfig;\n    }\n    cloneColumns(source) {\n        return source.flatMap(col => {\n            // Do not clone selection column, it will be injected by GridSelection.\n            // Ditto for the row expander column\n            if (col.meta.isSelectionColumn || col.field === 'expanderActionColumn') {\n                return [];\n            }\n            const data = { ...col.data };\n            if (col.children) {\n                data.children = col.children.map(child => ({ ...child.data }));\n            }\n            // RowNumberColumn \"pollutes\" headerRenderer, will create infinite loop if not cleaned up\n            delete data.headerRenderer;\n            delete data.parentId;\n            return data;\n        });\n    }\n    cloneClient(appendTo, order, options, config) {\n        const\n            clientConfig = this.getClientConfig(appendTo, order, options, config),\n            clone        = new this.client.constructor(clientConfig);\n        clone.element.classList.add('b-split-clone');\n        return clone;\n    }\n    // Process options, deducing direction, atRecord, etc.\n    processOptions(options) {\n        const\n            { client }                        = this,\n            { atRecord, atColumn, direction } = options;\n        if (!direction) {\n            // Infer direction from record & column\n            if (atRecord && atColumn) {\n                options.direction = 'both';\n            }\n            else if (atColumn) {\n                options.direction = 'vertical';\n            }\n            else {\n                options.direction = 'horizontal';\n            }\n        }\n        else {\n            // Only given a direction, cut roughly in half\n            if (direction !== 'vertical' && !atRecord && client.store.count) {\n                const\n                    centerY   = client._bodyRectangle.height / 2 + client.scrollable.y,\n                    centerRow = client.rowManager.getRowAt(centerY, true) ?? client.rowManager.rows[Math.ceil(client.rowManager.rows.length / 2)];\n                options.atRecord = client.store.getById(centerRow.id);\n            }\n            if (direction !== 'horizontal' && !atColumn) {\n                const bounds = Rectangle.from(client.element);\n                // Figure out subgrid intersecting center of grid\n                let centerX = bounds.center.x - bounds.x,\n                    subGrid = client.subGrids[client.regions[0]],\n                    i       = 0,\n                    column  = null;\n                while (centerX > subGrid.width) {\n                    centerX -= subGrid.width;\n                    subGrid = client.subGrids[client.regions[++i]];\n                }\n                // We want the center column in view, but iteration below is over all columns\n                centerX += subGrid.scrollable.x;\n                // Figure out column in the subgrid\n                const { visibleColumns } = subGrid.columns;\n                let x = 0, j = 0;\n                while (x < centerX && j < visibleColumns.length) {\n                    column = visibleColumns[j++];\n                    x += column.element.offsetWidth;\n                }\n                options.atColumn = column;\n            }\n        }\n        return options;\n    }\n    // Create element to contain the splits, it \"both\" mode it will hold a top container and a bottom container.\n    // In single mode, it will hold the splits + splitters directly.\n    createSplitContainer({ direction }) {\n        const\n            { client }  = this,\n            { element } = client;\n        return this.splitContainer = DomHelper.createElement({\n            parent    : element.parentElement,\n            className : {\n                'b-split-container'      : 1,\n                [`b-split-${direction}`] : 1,\n                'b-rtl'                  : client.rtl\n            },\n            style : {\n                width  : element.style.width,\n                height : element.style.height\n            },\n            children : [\n                // Split in one dir, use original as first child\n                direction !== 'both' && element,\n                // Split in both directions, make two sub-containers and put original in first\n                direction === 'both' && {\n                    className : 'b-split-top',\n                    children  : [\n                        element\n                    ]\n                },\n                direction === 'both' && {\n                    className : 'b-split-bottom'\n                }\n            ]\n        });\n    }\n    // Make the headers of all splits same height. Since headers shrinkwrap, they might differ depending on which\n    // subgrids was cloned to each split\n    syncHeaderHeights() {\n        let maxHeaderHeight = 0;\n        // Find tallest header\n        for (const split of this.subViews) {\n            split.eachSubGrid(subGrid => {\n                if (subGrid.header.height > maxHeaderHeight) {\n                    maxHeaderHeight = subGrid.header.height;\n                }\n            });\n        }\n        // Apply its height to all headers\n        for (const split of this.subViews) {\n            split.eachSubGrid(subGrid => {\n                subGrid.header.height = maxHeaderHeight;\n            });\n        }\n    }\n    // Clones can be created with correct subgrids, in the original we might instead need to hide some when splitting\n    // in a region that is not the last one (locked for example)\n    toggleOriginalSubGrids(options) {\n        const\n            me          = this,\n            { client }  = me,\n            { regions } = client;\n        // Split at a column with multiple regions\n        if (options.atColumn && regions.length > 1) {\n            const\n                subGridIndex = regions.indexOf(options.atColumn.region),\n                // Always process the original\n                splits = [client];\n            // And the bottom left one in a four way split\n            if (options.direction === 'both') {\n                splits.push(me.subViews[2]);\n            }\n            for (const split of splits) {\n                // Hide regions to the right of the split in the original\n                if (subGridIndex + 1 < regions.length) {\n                    const isOriginal = split === client;\n                    // Leftmost subgrid to keep visible\n                    const subGrid = split.subGrids[regions[subGridIndex]];\n                    // It won't need a splitter when succeeding subgrids are hidden\n                    subGrid.hideSplitter();\n                    isOriginal && me.restorers.push(() => subGrid.showSplitter());\n                    // Force flex to fill space left by hiding succeeding subgrids\n                    if (!subGrid.flex) {\n                        // Don't affect other splits\n                        client.inForEachOther = true;\n                        subGrid.flex = 1;\n                        client.inForEachOther = false;\n                        isOriginal && me.restorers.push(() => {\n                            subGrid.flex = null;\n                            subGrid.width = subGrid._initialWidth;\n                        });\n                    }\n                    // Hide succeeding subgrids\n                    for (let i = subGridIndex + 1; i < regions.length; i++) {\n                        const subGrid = split.subGrids[regions[i]];\n                        subGrid.hide();\n                        isOriginal && me.restorers.push(() => {\n                            subGrid.show();\n                        });\n                    }\n                    // Only one subgrid remains visible, use its width as splits width\n                    if (regions.length === 2) {\n                        split._initialWidth = split.element.style.width;\n                        split._initialFlex = split.flex;\n                        split.width = subGrid._initialWidth;\n                        isOriginal && me.restorers.push(() => {\n                            if (split._initialFlex !== null) {\n                                split.flex = split._initialFlex;\n                            }\n                            else if (split._initialWidth !== null) {\n                                split.width = split._initialWidth;\n                            }\n                        });\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Split the grid into two or four parts.\n     *\n     * - Splits into two when passed `direction : 'vertical'`, `direction : 'horizontal'` or `atColumn` or `atRecord`.\n     * - Splits into four when passed `direction : 'both'` or `atColumn` and `atRecord`.\n     *\n     * ```javascript\n     * // Split horizontally (at the row in the center of the grid)\n     * await grid.split({ direction : 'horizontal' });\n     *\n     * // Split both ways by a specific column and record\n     * await grid.split({\n     *    atRecord : grid.store.getById(10),\n     *    atColumn : grid.columns.get('city')\n     * });\n     * ```\n     *\n     * To return to a single grid, call {@link #function-unsplit}.\n     *\n     * Note that this function is callable directly on the grid instance.\n     *\n     * @param {Object} [options] Split options\n     * @param {'vertical'|'horizontal'|'both'} [options.direction] Split direction, 'vertical', 'horizontal' or 'both'.\n     * Not needed when passing `atColumn` or `atRecord`.\n     * @param {Grid.column.Column} [options.atColumn] Column to split at\n     * @param {Core.data.Model} [options.atRecord] Record to split at\n     * @returns {Promise} Resolves when split is complete, and subviews are scrolled to the correct position.\n     * @async\n     * @on-owner\n     * @category Common\n     */\n    async split(options = {}) {\n        const\n            me         = this,\n            { client } = me;\n        // Can't split a split\n        if (client.splitFrom) {\n            return;\n        }\n        if (me.isSplit) {\n            await me.unsplit(true);\n        }\n        const\n            { rtl }                           = client,\n            { atRecord, atColumn, direction } = me.processOptions(options);\n        let { splitX, remainingWidth } = options,\n            splitY                     = null,\n            remainingHeight            = null;\n        if (atRecord) {\n            await client.scrollRowIntoView(atRecord);\n            const row = client.getRowFor(atRecord);\n            if (!row) {\n                throw new Error(`Could not find row for record ${atRecord.id}`);\n            }\n            splitY = Rectangle.from(row.cells[0], client.element).bottom;\n            remainingHeight = Rectangle.from(client.element).height - splitY;\n        }\n        if (atColumn && !splitX) {\n            splitX = Rectangle.from(atColumn.element, client.element).getEnd(rtl);\n            remainingWidth = Rectangle.from(client.element).width - splitX - DomHelper.scrollBarWidth;\n            if (rtl) {\n                const x = splitX;\n                splitX = remainingWidth + DomHelper.scrollBarWidth;\n                remainingWidth = x - DomHelper.scrollBarWidth;\n            }\n        }\n        const\n            scrollPromises        = [],\n            splitContainer        = me.createSplitContainer(options),\n            { visibleColumns }    = client.columns,\n            nextColumn            = atColumn ? visibleColumns[visibleColumns.indexOf(atColumn) + 1] : null,\n            nextRecord            = atRecord ? client.store.getNext(atRecord) : null;\n        client.eachSubGrid(subGrid => subGrid._initialWidth = subGrid.width);\n        // Commit any changes already in the column store before enabling sync of column changes, to not have them\n        // reapplied on first change later on\n        client.columns.commit();\n        if (direction !== 'both') {\n            const cloneConfig = {\n                flex   : `0 0 ${(splitY != null ? remainingHeight : remainingWidth) - splitterWidth}px`,\n                height : null\n            };\n            // Horizontal or vertical, only needs one splitter and one clone\n            const [, clone] = me.widgets = [\n                new Splitter({ appendTo : splitContainer }),\n                me.cloneClient(splitContainer, direction === 'vertical' ? 1 : 0, options, cloneConfig)\n            ];\n            if (splitX != null) {\n                // It does not like being thrown around in DOM and resized when scrolled, fix up\n                client.renderRows();\n                // Don't bother scrolling here if given a date, Schedulers feature handles that\n                if (!options.atDate) {\n                    scrollPromises.push(client.scrollColumnIntoView(atColumn, endScrollOptions));\n                    nextColumn && scrollPromises.push(clone.scrollColumnIntoView(nextColumn, startScrollOptions));\n                }\n            }\n            if (splitY != null) {\n                // Always have an atRecord to split at\n                scrollPromises.push(clone.scrollRowIntoView(nextRecord, startScrollOptions));\n            }\n            client.element.classList.add('b-split-start');\n            clone.element.classList.add('b-split-end');\n            // Sync scrolling\n            client.scrollable.addPartner(clone.scrollable, {\n                x : direction === 'horizontal',\n                y : direction !== 'horizontal'\n            });\n        }\n        else {\n            const rightConfig = {\n                flex : `0 0 ${remainingWidth - splitterWidth}px`\n            };\n            splitContainer.lastElementChild.style.flex = `0 0 ${remainingHeight - splitterWidth}px`;\n            // Both directions, 3 splitters (one horizontal with full span, two vertical halves) and 3 clones\n            me.widgets = [\n                new Splitter({ insertBefore : splitContainer.lastElementChild }), // Full horizontal\n                me.topSplitter = new Splitter({ appendTo : splitContainer.firstElementChild }), // Top vertical\n                me.cloneClient(splitContainer.firstElementChild, 1, options, rightConfig), // Top right\n                me.cloneClient(splitContainer.lastElementChild, 0, options), // Bottom left\n                me.bottomSplitter = new Splitter({ appendTo : splitContainer.lastElementChild }), // Bottom vertical\n                me.cloneClient(splitContainer.lastElementChild, 2, options, rightConfig) // Bottom right\n            ];\n            const\n                topLeft     = client,\n                topRight    = me.widgets[2],\n                bottomLeft  = me.widgets[3],\n                bottomRight = me.widgets[5];\n            topLeft.element.classList.add('b-split-top-start');\n            topRight.element.classList.add('b-split-top-end');\n            bottomLeft.element.classList.add('b-split-bottom-start');\n            bottomRight.element.classList.add('b-split-bottom-end');\n            if (splitX != null) {\n                // It does not like being thrown around in DOM and resized when scrolled, fix up\n                topLeft.renderRows();\n                bottomLeft.renderRows();\n                // Don't bother scrolling here if given a date, Schedulers feature handles that\n                if (atColumn && !options.atDate) {\n                    scrollPromises.push(client.scrollColumnIntoView(atColumn, endScrollOptions));\n                    nextColumn && scrollPromises.push(topRight.scrollColumnIntoView(nextColumn, startScrollOptions));\n                }\n            }\n            if (splitY != null) {\n                scrollPromises.push(\n                    bottomLeft.scrollRowIntoView(nextRecord, startScrollOptions),\n                    bottomRight.scrollRowIntoView(nextRecord, startScrollOptions)\n                );\n            }\n            // Sync scrolling\n            topLeft.scrollable.addPartner(topRight.scrollable, 'y');\n            topLeft.scrollable.addPartner(bottomLeft.scrollable, 'x');\n            topRight.scrollable.addPartner(bottomRight.scrollable, 'x');\n            bottomLeft.scrollable.addPartner(bottomRight.scrollable, 'y');\n            // Set up vertical splitter sync\n            me.topSplitter.ion({\n                splitterMouseDown : 'onSplitterMouseDown',\n                drag              : 'onSplitterDrag',\n                drop              : 'onSplitterDrop',\n                thisObj           : me\n            });\n            me.bottomSplitter.ion({\n                splitterMouseDown : 'onSplitterMouseDown',\n                drag              : 'onSplitterDrag',\n                drop              : 'onSplitterDrop',\n                thisObj           : me\n            });\n        }\n        me.subViews = [client, ...me.widgets.filter(w => w.isGridBase)];\n        me.toggleOriginalSubGrids(options);\n        me.syncHeaderHeights();\n        me._splitOptions = options;\n        await Promise.all(scrollPromises);\n        // Moving in DOM does not seem to trigger resize, do it manually\n        const bounds = Rectangle.from(client.element);\n        client.onInternalResize(client.element, bounds.width, bounds.height);\n        client.eachSubGrid(subGrid => {\n            const subGridBounds = Rectangle.from(subGrid.element);\n            subGrid.onInternalResize(subGrid.element, subGridBounds.width, subGridBounds.height);\n        });\n        // If scrolled, the original element gets out of sync when moved around in DOM\n        client.scrollable.x += 0.5;\n        client.scrollable.y += 0.5;\n        me.startSyncingColumns();\n        /**\n         * Fires when splitting the Grid.\n         * @event split\n         * @param {Grid.view.GridBase[]} subViews The sub views created by the split\n         * @param {Object} options The options passed to the split call\n         * @param {'horizontal'|'vertical'|'both'} options.direction The direction of the split\n         * @param {Grid.column.Column} options.atColumn The column to split at\n         * @param {Core.data.Model} options.atRecord The record to split at\n         * @on-owner\n         */\n        client.trigger('split', { subViews : me.subViews, options });\n        return me.subViews;\n    }\n    /**\n     * Remove splits, returning to a single grid.\n     *\n     * Note that this function is callable directly on the grid instance.\n     *\n     * @on-owner\n     * @async\n     * @category Common\n     */\n    async unsplit(silent = false) {\n        const\n            me          = this,\n            { client }  = me,\n            { element } = client;\n        if (me.isSplit) {\n            me.stopSyncingColumns();\n            me.widgets?.forEach(split => split.destroy());\n            me.widgets = null;\n            // Safari & FF looses scroll position when moving elements around in DOM,\n            // but reading it here fixes it\n            client.eachSubGrid(subGrid => subGrid.scrollable.x);\n            client.scrollable.y;\n            me.splitContainer.parentElement.appendChild(element);\n            me.splitContainer.remove();\n            me.splitContainer = null;\n            // Reset any size applied by splitter\n            element.style.flexBasis = element.style.flexGrow = '';\n            element.classList.remove('b-split-top-start', 'b-split-start');\n            me.subViews.length = 0;\n            if (!me.isDestroying) {\n                // We have been pretty violent with the DOM, so force a repaint of rows\n                client.renderRows();\n                me.unsplitCleanup();\n                for (const restorer of me.restorers) {\n                    restorer();\n                }\n                me.restorers.length = 0;\n                // Ugly, but FF needs a couple of frames to not lose scroll position if we are splitting again\n                await AsyncHelper.animationFrame();\n                await AsyncHelper.animationFrame();\n                if (me.isDestroyed) {\n                    return;\n                }\n                /**\n                 * Fires when un-splitting the Grid.\n                 * @event unsplit\n                 * @on-owner\n                 */\n                !silent && client.trigger('unsplit');\n                me._splitOptions = null;\n            }\n        }\n    }\n    unsplitCleanup() {}\n    //endregion\n    //region Context menu\n    populateCellMenu({ record, column, items }) {\n        const\n            me            = this,\n            { isSplit }   = me,\n            { splitFrom } = me.client;\n        if (!me.disabled) {\n            items.splitGrid = {\n                text        : 'L{split}',\n                localeClass : me,\n                icon        : 'b-icon b-icon-split-vertical',\n                weight      : 500,\n                separator   : true,\n                hidden      : isSplit || splitFrom,\n                menu        : {\n                    splitHorizontally : {\n                        text        : 'L{horizontally}',\n                        icon        : 'b-icon b-icon-split-horizontal',\n                        localeClass : me,\n                        weight      : 100,\n                        onItem() {\n                            me.split({ atRecord : record });\n                        }\n                    },\n                    splitVertically : {\n                        text        : 'L{vertically}',\n                        icon        : 'b-icon b-icon-split-vertical',\n                        localeClass : me,\n                        weight      : 200,\n                        onItem() {\n                            me.split({ atColumn : column });\n                        }\n                    },\n                    splitBoth : {\n                        text        : 'L{both}',\n                        icon        : 'b-icon b-icon-split-both',\n                        localeClass : me,\n                        weight      : 300,\n                        onItem() {\n                            me.split({ atColumn : column, atRecord : record });\n                        }\n                    }\n                }\n            };\n            items.unsplitGrid = {\n                text        : 'L{unsplit}',\n                localeClass : me,\n                icon        : 'b-icon b-icon-clear',\n                hidden      : !(isSplit || splitFrom),\n                weight      : 400,\n                separator   : true,\n                onItem() {\n                    (splitFrom || me).unsplit();\n                }\n            };\n        }\n    }\n    //endregion\n    //region Syncing columns\n    startSyncingColumns() {\n        for (const subView of this.subViews) {\n            subView.columns.ion({\n                name    : 'columns',\n                change  : 'onColumnsChange',\n                thisObj : this\n            });\n        }\n    }\n    stopSyncingColumns() {\n        this.detachListeners('columns');\n    }\n    onColumnsChange({ source, isMove, action, /*index, */parent, records, changes }) {\n        const me = this;\n        if (!me.#ignoreColumnChanges) {\n            me.#ignoreColumnChanges = true;\n            for (const clone of me.subViews) {\n                const { columns } = clone;\n                if (source !== columns) {\n                    // Special handling for column moved from subgrid not in split to subgrid in split\n                    if (action === 'update' && changes.region && Object.keys(changes).length === 1) {\n                        // Move from non-existing to existing, add\n                        if (!columns.getById(records[0].id)) {\n                            const\n                                [column]     = records,\n                                targetParent = columns.getById(me.$before.parent.id) ?? columns.rootNode,\n                                targetBefore = me.$before.id !== null && columns.getById(me.$before.id);\n                            targetParent.insertChild(column.data, targetBefore);\n                        }\n                        // Vice versa, remove\n                        else {\n                            columns.remove(records[0].id);\n                        }\n                        me.$before = null;\n                    }\n                    else if (!isMove?.[records[0].id] && isMove !== true) {\n                        if (action === 'add') {\n                            // Only add columns that are in a subgrid that is visible in the clone\n                            const relevantColumns = records.filter(column => clone.getSubGridFromColumn(column));\n                            columns.add(me.cloneColumns(relevantColumns));\n                        }\n                        else {\n                            columns.applyChangesFromStore(source);\n                        }\n                    }\n                    // We have to handle move separately, since it does not leave the column store modified (in any\n                    // meaningful way)\n                    else if (action === 'add') {\n                        const\n                            sourceColumn = records[0],\n                            sourceBefore = sourceColumn.nextSibling,\n                            targetColumn = columns.getById(sourceColumn.id); //columns.allRecords.find(r => r.id === sourceColumn.id);\n                        // When splitting a multi-region grid, not all columns are present in all splits. But, it might\n                        // be moved from locked to normal (etc.) in original, but split is not showing source region. In\n                        // that case, we handle it on the region update - and must store details here\n                        if (!targetColumn) {\n                            me.$before = {\n                                id : sourceBefore?.id,\n                                parent\n                            };\n                            me.#ignoreColumnChanges = false;\n                            continue;\n                        }\n                        if (sourceColumn.meta.isSelectionColumn) {\n                            me.#ignoreColumnChanges = false;\n                            continue;\n                        }\n                        const\n                            targetParent = columns.getById(parent.id) ?? columns.rootNode,\n                            targetBefore = sourceBefore && columns.getById(sourceBefore.id);\n                        targetParent.insertChild(targetColumn, targetBefore);\n                    }\n                    columns.commit();\n                }\n            }\n            source.commit();\n            me.#ignoreColumnChanges = false;\n        }\n    }\n    //endregion\n    //region Syncing splitters\n    getOtherSplitter(splitter) {\n        return splitter === this.topSplitter ? this.bottomSplitter : this.topSplitter;\n    }\n    onSplitterMouseDown({ source, event }) {\n        if (!event.handled) {\n            event.handled = true;\n            this.getOtherSplitter(source).onMouseDown(event);\n        }\n    }\n    onSplitterDrag({ source, event }) {\n        if (!event.handled) {\n            event.handled = true;\n            this.getOtherSplitter(source).onMouseMove(event);\n        }\n    }\n    onSplitterDrop({ source, event }) {\n        if (!event.handled) {\n            event.handled = true;\n            this.getOtherSplitter(source).onMouseUp(event);\n        }\n    }\n    //endregion\n    //region Relaying property changes & events\n    // Relay relevant config changes to other splits\n    afterConfigChange({ name, value }) {\n        if (this.isSplit && this.relayProperties[name]) {\n            this.syncSplits(split => {\n                split[name] = value;\n            });\n        }\n    }\n    // Sync listeners added at runtime to other splits\n    afterAddListener(eventName, listener) {\n        if (this.isSplit && !listener.$internal && !ignoreListeners[eventName]) {\n            // Not using `ion()` on purpose, these are app listeners\n            // eslint-disable-next-line bryntum/no-on-in-lib\n            this.syncSplits(split => split.on(eventName, listener));\n        }\n    }\n    afterRemoveListener(eventName, listener) {\n        if (!listener.$internal) {\n            this.syncSplits(split => split.un(eventName, listener));\n        }\n    }\n    //endregion\n    //region Util\n    // Call a fn for all splits except the on this fn is called on\n    forEachOther(fn) {\n        const original = this.client.splitFrom || this.client;\n        if (original.features.split.enabled && !original.inForEachOther) {\n            // Protect against infinite recursion by being called from the fn\n            original.inForEachOther = true;\n            for (const view of original.subViews) {\n                if (view !== this.client) {\n                    fn(view);\n                }\n            }\n            original.inForEachOther = false;\n        }\n    }\n    syncSplits(fn) {\n        this.forEachOther(fn);\n    }\n    //endregion\n}\nSplit._$name = 'Split'; GridFeatureManager.registerFeature(Split, false);\n", "import DomHelper from '../../Core/helper/DomHelper.js';\nimport Base from '../../Core/Base.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\n/**\n * @module Grid/util/TableExporter\n */\n/**\n * This class transforms grid component into two arrays: rows and columns. Columns array contains objects with\n * meta information about column: field name, column name, width and type of the rendered value, rows array contains\n * arrays of cell values.\n *\n * ```javascript\n * const exporter = new TableExporter({ target : grid });\n * exporter.export()\n *\n * // Output\n * {\n *     columns : [\n *         { field : 'name',     value : 'First name', type : 'string',  width : 100 },\n *         { field : 'surname',  value : 'Last name',  type : 'string',  width : 100 },\n *         { field : 'age',      value : 'Age',        type : 'number',  width : 50  },\n *         { field : 'married',  value : 'Married',    type : 'boolean', width : 50  },\n *         { field : 'children', value : 'Children',   type : 'object',  width : 100 }\n *     ],\n *     rows : [\n *         ['Michael', 'Scott',   40, false, []],\n *         ['Jim',     'Halpert', 30, true,  [...]]\n *     ]\n * }\n * ```\n *\n * ## How data is exported\n *\n * Exporter iterates over store records and processes each record for each column being exported. Exporter uses same\n * approach to retrieve data as column: reading record field, configured on the column, or calling renderer function\n * if one is provided. This means data can be of any type: primitives or objects. So children array in the above code\n * snippet may contain instances of child record class.\n *\n * ## Column renderers\n *\n * Column renderers are commonly used to style the cell, or even render more HTML into it, like {@link Grid.column.WidgetColumn}\n * does. This is not applicable in case of export. Also, given grid uses virtual rendering (only renders visible rows) and\n * exporter iterates over all records, not just visible ones, we cannot provide all data necessary to the renderer. Some\n * arguments, like cellElement and row, wouldn't exist. Thus, the renderer is called with as much data we have: value,\n * record, column, grid, other {@link Grid.column.Column#config-renderer documented arguments} would be undefined.\n *\n * Exporter adds one more flag for renderer function: isExport. When renderer receives this flag it knows\n * data is being exported and can skip DOM work to return simpler value. Below snippet shows simplified code of the\n * widget column handling export:\n *\n * ```javascript\n * renderer({ isExport }) {\n *     if (isExport) {\n *         return null;\n *     }\n *     else {\n *         // widget rendering routine\n *         ...\n *     }\n * }\n * ```\n *\n * ## Column types\n *\n * Column types are not actually a complete list of JavaScript types (you can get actual type of the cell using typeof) it\n * is a simple and helpful meta information.\n *\n * Available column types are:\n *  * string\n *  * number\n *  * boolean\n *  * date\n *  * object\n *\n * Everything which is not primitive like string/number/bool (or a date) is considered an object. This includes null, undefined,\n * arrays, classes, functions etc.\n *\n * ## Getting column type\n *\n * If existing grid column is used, column type first would be checked with {@link Grid.column.Column#config-exportedType exportedType}\n * config. If exportedType is undefined or column does not exist in grid, type is read from a record field definition.\n * If the field is not defined, object type is used.\n *\n * Configuring exported type:\n *\n * ```javascript\n * new Grid({\n *     columns : [\n *         {\n *             name         : 'Name',\n *             field        : 'name',\n *             exportedType : 'object',\n *             renderer     : ({ value, isExport }) => {\n *                 if (isExport) {\n *                     return { value }; // return value wrapped into object\n *                 }\n *             }\n *     ]\n * })\n * ```\n *\n * @extends Core/Base\n */\nexport default class TableExporter extends Base {\n    static get defaultConfig() {\n        return {\n            /**\n             * Target grid instance to export data from\n             * @config {Grid.view.Grid} target\n             */\n            target : null,\n            /**\n             * Specifies a default column width if no width specified\n             * @config {Number} defaultColumnWidth\n             * @default\n             */\n            defaultColumnWidth : 100,\n            /**\n             * Set to `false` to export dates as they are displayed by Date column formatter\n             * @config {Boolean}\n             * @default\n             */\n            exportDateAsInstance : true,\n            /**\n             * If true and the grid is grouped, shows the grouped value in the first column. True by default.\n             * @config {Boolean} showGroupHeader\n             * @default\n             */\n            showGroupHeader : true,\n            /**\n             * An array of column configuration objects used to specify column widths, header text, and data fields to get the data from.\n             * 'field' config is required. If 'text' is missing, it will read it from the grid column or the 'field' config.\n             * If 'width' is missing, it will try to get it retrieved from the grid column or {@link #config-defaultColumnWidth} config.\n             * If no columns provided the config will be generated from the grid columns.\n             *\n             * For example:\n             * ```javascript\n             * columns : [\n             *     'firstName', // field\n             *     'age', // field\n             *     { text : 'Starts', field : 'start', width : 140 },\n             *     { text : 'Ends', field : 'finish', width : 140 }\n             * ]\n             * ```\n             *\n             * @config {String[]|Object[]} columns\n             * @default\n             */\n            columns : null,\n            /**\n             * When true and tree is being exported, node names are indented with {@link #config-indentationSymbol}\n             * @config {Boolean}\n             * @default\n             */\n            indent : true,\n            /**\n             * This symbol (four spaces by default) is used to indent node names when {@link #config-indent} is true\n             * @config {String}\n             * @default\n             */\n            indentationSymbol : '\\u00A0\\u00A0\\u00A0\\u00A0'\n        };\n    }\n    /**\n     * Exports grid data according to provided config\n     * @param {Object} config\n     * @returns {{ rows : Object[][], columns : Object[] }}\n     */\n    export(config = {}) {\n        const me = this;\n        config = ObjectHelper.assign({}, me.config, config);\n        me.normalizeColumns(config);\n        return me.generateExportData(config);\n    }\n    generateExportData(config) {\n        const\n            me      = this,\n            columns = me.generateColumns(config),\n            rows    = me.generateRows(config);\n        return { rows, columns };\n    }\n    normalizeColumns(config) {\n        // In case columns are provided we need to use normalized config. If those are not provided, we are going\n        // to use real columns, possible invoking renderers (we need to pass column instance to the renderer to\n        // avoid breaking API too much)\n        const columns = config.columns || this.target.columns.visibleColumns.filter(rec => rec.exportable !== false);\n        config.columns = columns.map(col => {\n            if (typeof col === 'string') {\n                return this.target.columns.find(column => column.field === col) || { field : col };\n            }\n            else {\n                return col;\n            }\n        });\n    }\n    generateColumns(config) {\n        return config.columns.map(col => this.processColumn(col, config));\n    }\n    generateRows(config) {\n        const { columns, rows } = config;\n        if (columns.length === 0 || rows?.length === 0) {\n            return [];\n        }\n        const\n            me         = this,\n            { target } = me;\n        return (rows || target.store)\n            // although columns are taken from config, it is convenient to provide them as a separate argument\n            // because that allows to override set of columns to process\n            .map(record => me.processRecord(record, columns, config))\n            // filter out empty rows\n            .filter(cells => cells?.length);\n    }\n    getColumnType(column, store = this.target.store) {\n        let result = column.exportedType || 'object';\n        if (column.exportedType === undefined) {\n            if (column.field) {\n                const fieldDefinition = store.modelClass.getFieldDefinition(column.field);\n                if (fieldDefinition && fieldDefinition.type !== 'auto') {\n                    result = fieldDefinition.type;\n                }\n            }\n        }\n        return result;\n    }\n    /**\n     * Extracts export data from the column instance\n     * @param {Grid.column.Column} column\n     * @param {Object} config\n     * @private\n     * @returns {Object}\n     */\n    processColumn(column, config) {\n        const\n            me                     = this,\n            { target }             = me,\n            { defaultColumnWidth } = config;\n        let { field, text : value, width, minWidth } = column;\n        // If column is not configured with field, field is generated (see Column.js around line 514).\n        // In export we want empty string there\n        if (!(field in target.store.modelClass.fieldMap)) {\n            field = '';\n        }\n        // If name or width is missing try to retrieve them from the grid column and the field, or use default values.\n        if (!value || !width) {\n            const gridColumn = target.columns.find(col => col.field === field);\n            if (!value) {\n                value = gridColumn && gridColumn.text || field;\n            }\n            // null or undefined\n            if (width == null) {\n                width = gridColumn && gridColumn.width || defaultColumnWidth;\n            }\n        }\n        width = Math.max(width || defaultColumnWidth, minWidth || defaultColumnWidth);\n        return { field, value, width, type : me.getColumnType(column) };\n    }\n    /**\n     * Extracts export data from the record instance reading supplied column configs\n     * @param {Core.data.Model|null} record If null is passed, all columns will be filled with empty strings\n     * @param {Grid.column.Column[]} columns\n     * @param {Object} config\n     * @private\n     * @returns {Object[]}\n     */\n    processRecord(record, columns, config) {\n        const\n            { target } = this,\n            {\n                showGroupHeader,\n                indent,\n                indentationSymbol\n            }  = config;\n        let cells;\n        if (!record) {\n            cells = columns.map(() => '');\n        }\n        else if (record.isSpecialRow) {\n            if (showGroupHeader && record.meta.groupRowFor) {\n                cells = columns.map(column => {\n                    return target.features.group.buildGroupHeader({\n                        // Create dummy element to get html from\n                        cellElement : DomHelper.createElement(),\n                        grid        : target,\n                        record,\n                        column\n                    });\n                });\n            }\n        }\n        else {\n            cells = columns.map(column => {\n                let value = record.getValue(column.field);\n                const useRenderer = column.renderer || column.defaultRenderer;\n                if (useRenderer && !(value && column.isDateColumn && config.exportDateAsInstance)) {\n                    value = useRenderer.call(column, {\n                        value,\n                        record,\n                        column,\n                        grid     : target,\n                        isExport : true\n                    });\n                }\n                if (indent && column.tree) {\n                    value = `${indentationSymbol.repeat(record.childLevel)}${value}`;\n                }\n                return value;\n            });\n        }\n        return cells;\n    }\n}\nTableExporter._$name = 'TableExporter';", "export default class BooleanUnicodeSymbol {\n    constructor(value) {\n        this._value = value;\n    }\n    get value() {\n        return this._value;\n    }\n    toString() {\n        return Boolean(this.value) ? '\u2713' : '';\n    }\n}\nBooleanUnicodeSymbol._$name = 'BooleanUnicodeSymbol';", "import GridFeatureManager from '../GridFeatureManager.js';\nimport InstancePlugin from '../../../Core/mixin/InstancePlugin.js';\nimport TableExporter from '../../util/TableExporter.js';\nimport BooleanUnicodeSymbol from '../../util/BooleanUnicodeSymbol.js';\nimport DateHelper from '../../../Core/helper/DateHelper.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\nimport BrowserHelper from '../../../Core/helper/BrowserHelper.js';\n/**\n * @module Grid/feature/experimental/ExcelExporter\n */\n/**\n * A feature that allows exporting Grid data to Excel or CSV without involving the server. It uses {@link Grid.util.TableExporter}\n * class as data provider, [zipcelx library](https://www.npmjs.com/package/zipcelx)\n * forked and adjusted to support [column width config](https://github.com/bryntum/zipcelx/tree/column-width-build)\n * and [Microsoft XML specification](https://msdn.microsoft.com/en-us/library/office/documentformat.openxml.spreadsheet.aspx).\n * Zipcelx should be either in global scope (window) or can be provided with {@link #config-zipcelx} config.\n *\n *\n * ```html\n * // Global scope\n * <script src=\"zipcelx.js\"></script>\n * ```\n *\n * ```javascript\n * // importing from package\n * import zipcelx from 'zipcelx';\n *\n * const grid = new Grid({\n *     features : {\n *         excelExporter : {\n *             zipcelx\n *         }\n *     }\n * })\n * ```\n *\n * Here is an example of how to add the feature:\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         excelExporter : {\n *             // Choose the date format for date fields\n *             dateFormat : 'YYYY-MM-DD HH:mm',\n *\n *             exporterConfig : {\n *                 // Choose the columns to include in the exported file\n *                 columns : ['name', 'role'],\n *                 // Optional, export only selected rows\n *                 rows    : grid.selectedRecords\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * And how to call it:\n *\n * ```javascript\n * grid.features.excelExporter.export({\n *     filename       : 'Export',\n *     exporterConfig : {\n *         columns : [\n *             { text : 'First Name', field : 'firstName', width : 90 },\n *             { text : 'Age', field : 'age', width : 40 },\n *             { text : 'Starts', field : 'start', width : 140 },\n *             { text : 'Ends', field : 'finish', width : 140 }\n *         ]\n *     }\n * })\n * ```\n *\n * Exporting to CSV is done with the `csv` config:\n *\n * ```javascript\n * grid.features.excelExporter.export({\n *     filename       : 'myfile',\n *     csv            : true\n * })\n * ```\n *\n * This feature is **disabled** by default.\n * For info on enabling it, see {@link Grid/view/mixin/GridFeatures}.\n *\n * {@note}This class requires a 3rd party library to export to XLSX{@/note}\n *\n *\n * @extends Core/mixin/InstancePlugin\n * @demo Grid/exporttoexcel\n * @classtype excelExporter\n * @feature\n */\nexport default class ExcelExporter extends InstancePlugin {\n    static get $name() {\n        return 'ExcelExporter';\n    }\n    static get defaultConfig() {\n        return {\n            /**\n             * Name of the exported file\n             * @config {String} filename\n             * @default\n             */\n            filename : null,\n            /**\n             * Defines how dates in a cell will be formatted\n             * @config {String} dateFormat\n             * @default\n             */\n            dateFormat : 'YYYY-MM-DD',\n            /**\n             * Exporter class to use as a data provider. {@link Grid.util.TableExporter} by default.\n             * @config {Grid.util.TableExporter}\n             * @typings {typeof TableExporter}\n             * @default\n             */\n            exporterClass : TableExporter,\n            /**\n             * Configuration object for {@link #config-exporterClass exporter class}.\n             * @config {Object}\n             */\n            exporterConfig : null,\n            /**\n             * Reference to zipcelx library. If not provided, exporter will look in the global scope.\n             * @config {Object}\n             */\n            zipcelx : null,\n            /**\n             * If this config is true, exporter will convert all empty values to ''. Empty values are:\n             * * undefined, null, NaN\n             * * Objects/class instances that do not have toString method defined and are stringified to [object Object]\n             * * functions\n             * @config {Boolean}\n             */\n            convertEmptyValueToEmptyString : true\n        };\n    }\n    processValue(value) {\n        if (\n            value === undefined ||\n            value === null ||\n            Number.isNaN(value) ||\n            typeof value === 'function' ||\n            (typeof value === 'object' && String(value) === '[object Object]')\n        ) {\n            return '';\n        }\n        else {\n            return value;\n        }\n    }\n    generateExportData(config) {\n        const\n            me                = this,\n            { rows, columns } = me.exporter.export(config.exporterConfig);\n        return {\n            rows : rows.map(row => {\n                return row.map((value, index) => {\n                    if (value instanceof Date) {\n                        value = DateHelper.format(value, config.dateFormat);\n                    }\n                    else if (typeof value === 'boolean') {\n                        value = new BooleanUnicodeSymbol(value);\n                    }\n                    if (me.convertEmptyValueToEmptyString) {\n                        value = me.processValue(value);\n                    }\n                    const type = columns[index]?.type === 'number' ? 'number' : 'string';\n                    return { value, type };\n                });\n            }),\n            columns : columns.map(col => {\n                let { field, value, width, type } = col;\n                // when number column is exported with zipcelx, excel warns that sheet is broken and asks for repair\n                // repair works, but having error on open doesn't look acceptable\n                // type = type === 'number' ? 'number' : 'string';\n                type = 'string';\n                return { field, value, width, type };\n            })\n        };\n    }\n    /**\n     * Generate and download an Excel (.xslx), or CSV file (.csv).\n     * @param {Object} config Optional configuration object, which overrides initial settings of the feature/exporter.\n     * @param {String} [config.filename] Name of the exported file\n     * @param {String} [config.dateFormat] Defines how dates in a cell will be formatted\n     * @param {Boolean|Object} [config.csv] Set to true to output as a CSV file, or as an object where you can specify\n     * delimiters.\n     * @param {String} [config.csv.columnDelimiter] The CSV delimiter to separate values on one line, defaults to `,`.\n     * @param {String} [config.csv.lineDelimiter] The CSV delimiter to separate lines, defaults to `\\n`.\n     * @param {String[]|Object[]} [config.columns] An array of column configuration objects\n     * @param {Core.data.Model[]} [config.rows] An array of records to export\n     * @returns {Promise} Promise that resolves when the export is completed\n     */\n    export(config = {}) {\n        const\n            me      = this,\n            zipcelx = me.zipcelx || globalThis.zipcelx;\n        if (!zipcelx) {\n            throw new Error('ExcelExporter: \"zipcelx\" library is required');\n        }\n        if (me.disabled) {\n            return;\n        }\n        config = ObjectHelper.assign({}, me.config, config);\n        if (!config.filename) {\n            config.filename = me.client.$$name;\n        }\n        const\n            { filename }      = config,\n            { rows, columns } = me.generateExportData(config);\n        if (config.csv) {\n            const\n                columnDelimiter = config.csv.columnDelimiter || ',',\n                lineDelimiter   = config.csv.lineDelimiter || '\\n',\n                headers         = columns.map(col => this.processCsvValue(col.value)).join(columnDelimiter) + lineDelimiter,\n                text            = rows.map(rowValues => rowValues.map(obj => this.processCsvValue(obj.value)).join(`${columnDelimiter}`)).join(lineDelimiter),\n                blob            = new Blob([headers + text], { type : 'text/csv' });\n            BrowserHelper.downloadBlob(blob, filename);\n            return Promise.resolve();\n        }\n        return zipcelx({\n            filename,\n            sheet : {\n                data : [columns].concat(rows),\n                cols : columns\n            }\n        });\n    }\n    processCsvValue(text = '') {\n        return `\"${String(text).replace(/\"/g, '\"\"')}\"`;\n    }\n    construct(grid, config) {\n        super.construct(grid, config);\n        if (!this.zipcelx) {\n            if (typeof zipcelx !== 'undefined') {\n                this.zipcelx = globalThis.zipcelx;\n            }\n        }\n    }\n    get exporter() {\n        const me = this;\n        return me._exporter || (me._exporter = me.exporterClass.new({ target : me.client }, me.exporterConfig));\n    }\n}\nExcelExporter._$name = 'ExcelExporter'; GridFeatureManager.registerFeature(ExcelExporter, false, 'Grid');\n"],
  "mappings": "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",
  "names": ["ColorColumn", "Column", "_a", "me", "grid", "Menu", "color", "useProp", "field", "value", "picker", "colorClass", "backgroundColor", "colorClassName", "record", "target", "menu", "__publicField", "ColumnStore", "GroupSummary", "SummaryFormatter_default", "InstancePlugin", "config", "store", "disable", "ObjectHelper", "collapseToHeader", "row", "rowEl", "column", "cellElement", "size", "isFirstColumn", "meta", "rowHeight", "isGroupHeader", "isGroupFooter", "targetsHeader", "rowClasses", "isSummaryTarget", "groupRecord", "heightSetting", "count", "records", "html", "DomHelper", "changes", "grouper", "colField", "GridFeatureManager", "RowResize", "ResizeHelper", "event", "topHandle", "Rectangle", "EventHelper", "context", "edge", "element", "source", "client", "applyGlobally", "startScrollOptions", "endScrollOptions", "splitterWidth", "ignoreListeners", "_ignoreColumnChanges", "Split", "__privateAdd", "appendTo", "order", "options", "subGrids", "regions", "columns", "subGridConfigs", "subGrid", "subGridIndex", "i", "ArrayHelper", "clientConfig", "prop", "appListeners", "name", "listeners", "l", "col", "data", "child", "clone", "atRecord", "atColumn", "direction", "centerY", "centerRow", "bounds", "centerX", "visibleColumns", "x", "j", "maxHeaderHeight", "split", "splits", "isOriginal", "rtl", "splitX", "remainingWidth", "splitY", "remainingHeight", "scrollPromises", "splitContainer", "nextColumn", "nextRecord", "cloneConfig", "Splitter", "rightConfig", "topLeft", "topRight", "bottomLeft", "bottomRight", "w", "subGridBounds", "silent", "restorer", "AsyncHelper", "items", "isSplit", "splitFrom", "subView", "isMove", "action", "parent", "_b", "__privateGet", "__privateSet", "targetParent", "targetBefore", "relevantColumns", "sourceColumn", "sourceBefore", "targetColumn", "splitter", "eventName", "listener", "fn", "original", "view", "TableExporter", "Base", "rec", "rows", "cells", "result", "fieldDefinition", "defaultColumnWidth", "width", "minWidth", "gridColumn", "showGroupHeader", "indent", "indentationSymbol", "useRenderer", "BooleanUnicodeSymbol", "ExcelExporter", "index", "DateHelper", "type", "zipcelx", "filename", "columnDelimiter", "lineDelimiter", "headers", "text", "rowValues", "obj", "blob", "BrowserHelper"]
}
