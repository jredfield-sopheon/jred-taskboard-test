{
  "version": 3,
  "sources": ["../../../../Grid/lib/Grid/column/DateColumn.js"],
  "sourcesContent": ["import Column from './Column.js';\nimport ColumnStore from '../data/ColumnStore.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\n/**\n * @module Grid/column/DateColumn\n */\n/**\n * A column that displays a date in the specified {@link #config-format}. By default `L` format is used, which\n * contains the following info: full year, 2-digit month, and 2-digit day. Depending on the browser locale,\n * the formatted date might look different. [Intl.DateTimeFormat API](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat)\n * is used to format the date. Here is an example of possible outputs depending on the browser locale:\n *\n * ```javascript\n * // These options represent `L` format\n * const options = { year : 'numeric', month : '2-digit', day : '2-digit' };\n *\n * new Intl.DateTimeFormat('en-US', options).format(new Date(2021, 6, 1)); // \"07/01/2021\"\n * new Intl.DateTimeFormat('ru-RU', options).format(new Date(2021, 6, 1)); // \"01.07.2021\"\n *\n * // Formatting using Bryntum API\n * LocaleManager.applyLocale('En');\n * DateHelper.format(new Date(2021, 6, 1), 'L'); // \"07/01/2021\"\n * LocaleManager.applyLocale('Ru');\n * DateHelper.format(new Date(2021, 6, 1), 'L'); // \"01.07.2021\"\n * ```\n *\n * To learn more about available formats check out {@link Core.helper.DateHelper} docs.\n *\n * The {@link Core.data.field.DateDataField field} this column reads data from should be a type of date.\n *\n * Default editor is a {@link Core.widget.DateField}.\n *\n * ```javascript\n * new Grid({\n *     columns : [\n *          { type: 'date', text: 'Start date', format: 'YYYY-MM-DD', field: 'start' }\n *     ]\n * });\n * ```\n *\n * {@inlineexample Grid/column/DateColumn.js}\n *\n * @extends Grid/column/Column\n * @classtype date\n * @column\n */\nexport default class DateColumn extends Column {\n    //region Config\n    static $name = 'DateColumn';\n    static type  = 'date';\n    // Type to use when auto adding field\n    static fieldType = 'date';\n    static fields = ['format', 'pickerFormat', 'step', 'min', 'max'];\n    static get defaults() {\n        return {\n            /**\n             * Min value for the cell editor\n             * @config {String|Date} min\n             */\n            /**\n             * Max value for the cell editor\n             * @config {String|Date} max\n             */\n            /**\n             * The {@link Core.data.field.DateDataField#config-name} of the data model date field to read data from.\n             * @config {String} field\n             * @category Common\n             */\n            /**\n             * Date format to convert a given date object into a string to display. By default `L` format is used, which\n             * contains the following info: full year, 2-digit month, and 2-digit day. Depending on the browser locale,\n             * the formatted date might look different. [Intl.DateTimeFormat API](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat)\n             * is used to format the date. Here is an example of possible outputs depending on the browser locale:\n             *\n             * ```javascript\n             * // These options represent `L` format\n             * const options = { year : 'numeric', month : '2-digit', day : '2-digit' };\n             *\n             * new Intl.DateTimeFormat('en-US', options).format(new Date(2021, 6, 1)); // \"07/01/2021\"\n             * new Intl.DateTimeFormat('ru-RU', options).format(new Date(2021, 6, 1)); // \"01.07.2021\"\n             *\n             * // Formatting using Bryntum API\n             * LocaleManager.applyLocale('En');\n             * DateHelper.format(new Date(2021, 6, 1), 'L'); // \"07/01/2021\"\n             * LocaleManager.applyLocale('Ru');\n             * DateHelper.format(new Date(2021, 6, 1), 'L'); // \"01.07.2021\"\n             * ```\n             *\n             * To learn more about available formats check out {@link Core.helper.DateHelper} docs.\n             *\n             * Note, the {@link Core.data.field.DateDataField field} this column reads data from should be a type of date.\n             * @config {String}\n             * @default\n             * @category Common\n             */\n            format : 'L',\n            /**\n             * Time increment duration value to apply when clicking the left / right trigger icons. See\n             * {@link Core.widget.DateField#config-step} for more information\n             * Set to `null` to hide the step triggers.\n             * @config {String|Number|DurationConfig}\n             * @default\n             * @category Common\n             */\n            step : 1,\n            minWidth : 85,\n            filterType : 'date'\n        };\n    }\n    //endregion\n    //region Display\n    /**\n     * Renderer that displays the date with the specified format. Also adds cls 'date-cell' to the cell.\n     * @private\n     */\n    defaultRenderer({ value }) {\n        return value ? this.formatValue(value) : '';\n    }\n    /**\n     * Group renderer that displays the date with the specified format.\n     * @private\n     */\n    groupRenderer({ cellElement, groupRowFor }) {\n        cellElement.innerHTML = this.formatValue(groupRowFor);\n    }\n    //endregion\n    //region Formatter\n    /**\n     * Used by both renderer and groupRenderer to do the actual formatting of the date\n     * @private\n     * @param value\n     * @returns {String}\n     */\n    formatValue(value) {\n        // Ideally we should be served a date, but if not make it easier for the user by parsing\n        if (typeof value === 'string') {\n            value = DateHelper.parse(value, this.format || undefined); // null does not use default format\n        }\n        return DateHelper.format(value, this.format || undefined);\n    }\n    //endregion\n    //region Getters/setters\n    /**\n     * Get/Set format for date displayed in cell and editor (see {@link Core.helper.DateHelper#function-format-static} for formatting options)\n     * @property {String}\n     */\n    set format(value) {\n        const { editor } = this.data;\n        this.set('format', value);\n        if (editor) {\n            editor.format = value;\n        }\n    }\n    get format() {\n        return this.get('format');\n    }\n    get defaultEditor() {\n        const\n            me                         = this,\n            { min, max, step, format } = me;\n        return {\n            name                 : me.field,\n            type                 : 'date',\n            calendarContainerCls : 'b-grid-cell-editor-related',\n            weekStartDay         : me.grid.weekStartDay,\n            format,\n            max,\n            min,\n            step\n        };\n    }\n    //endregion\n}\nColumnStore.registerColumnType(DateColumn, true);\nDateColumn.exposeProperties();\nDateColumn._$name = 'DateColumn';"],
  "mappings": "kIA8CA,IAAqBA,EAArB,cAAwCC,CAAO,CAO3C,WAAW,UAAW,CAClB,MAAO,CAyCH,OAAS,IAST,KAAO,EACP,SAAW,GACX,WAAa,MACjB,CACJ,CAOA,gBAAgB,CAAE,MAAAC,CAAM,EAAG,CACvB,OAAOA,EAAQ,KAAK,YAAYA,CAAK,EAAI,EAC7C,CAKA,cAAc,CAAE,YAAAC,EAAa,YAAAC,CAAY,EAAG,CACxCD,EAAY,UAAY,KAAK,YAAYC,CAAW,CACxD,CASA,YAAYF,EAAO,CAEf,OAAI,OAAOA,GAAU,WACjBA,EAAQG,EAAW,MAAMH,EAAO,KAAK,QAAU,MAAS,GAErDG,EAAW,OAAOH,EAAO,KAAK,QAAU,MAAS,CAC5D,CAOA,IAAI,OAAOA,EAAO,CACd,KAAM,CAAE,OAAAI,CAAO,EAAI,KAAK,KACxB,KAAK,IAAI,SAAUJ,CAAK,EACpBI,IACAA,EAAO,OAASJ,EAExB,CACA,IAAI,QAAS,CACT,OAAO,KAAK,IAAI,QAAQ,CAC5B,CACA,IAAI,eAAgB,CAChB,MACIK,EAA6B,KAC7B,CAAE,IAAAC,EAAK,IAAAC,EAAK,KAAAC,EAAM,OAAAC,CAAO,EAAIJ,EACjC,MAAO,CACH,KAAuBA,EAAG,MAC1B,KAAuB,OACvB,qBAAuB,6BACvB,aAAuBA,EAAG,KAAK,aAC/B,OAAAI,EACA,IAAAF,EACA,IAAAD,EACA,KAAAE,CACJ,CACJ,CAEJ,EA5HIE,EAFiBZ,EAEV,QAAQ,YAAA,EACfY,EAHiBZ,EAGV,OAAQ,MAAA,EAEfY,EALiBZ,EAKV,YAAY,MAAA,EACnBY,EANiBZ,EAMV,SAAS,CAAC,SAAU,eAAgB,OAAQ,MAAO,KAAK,CAAA,EAyHnEa,EAAY,mBAAmBb,EAAY,EAAI,EAC/CA,EAAW,iBAAiB,EAC5BA,EAAW,OAAS",
  "names": ["DateColumn", "Column", "value", "cellElement", "groupRowFor", "DateHelper", "editor", "me", "min", "max", "step", "format", "__publicField", "ColumnStore"]
}
