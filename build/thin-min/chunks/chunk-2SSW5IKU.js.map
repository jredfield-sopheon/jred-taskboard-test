{
  "version": 3,
  "sources": ["../../../../Core/lib/Core/widget/base/UndoRedoBase.js"],
  "sourcesContent": ["import Container from '../Container.js';\nimport '../Combo.js';\n/**\n * @module Core/widget/base/UndoRedoBase\n */\n/**\n * Abstract base class used by UndoRedo widgets in Scheduler and TaskBoard.\n *\n * @extends Core/widget/Container\n * @abstract\n */\nexport default class UndoRedoBase extends Container {\n    static $name = 'UndoRedoBase';\n    static type = 'undoredobase';\n    static get configurable() {\n        return {\n            // Documented on subclasses\n            project : null,\n            stm : null,\n            /**\n             * Configure as `true` to show \"Undo\" and \"Redo\" as button texts. The buttons always have a tooltip\n             * as a hint to the user as to their purpose.\n             * @config {Boolean}\n             */\n            text : null,\n            /**\n             * Button color for the undo and redo buttons. See {@link Core.widget.Button#config-color}.\n             * @config {String}\n             */\n            color : null,\n            /**\n             * Configure as `true` to show \"0\" badge on the undo and redo buttons when they have no actions\n             * left to perform. By default when there are no actions, no badge is displayed.\n             * @config {Boolean}\n             */\n            showZeroActionBadge : null,\n            cls : 'b-undo-controls b-toolbar',\n            layoutStyle : {\n                alignItems : 'stretch',\n                flexFlow   : 'row nowrap',\n                overflow   : 'visible'\n            },\n            items : {\n                undoBtn : {\n                    type     : 'button',\n                    icon     : 'b-icon-undo',\n                    tooltip  : 'L{UndoRedo.UndoLastAction}',\n                    onAction : 'up.onUndo'     // 'up.' means method is on a parent Widget.\n                },\n                transactionsCombo : {\n                    type                 : 'combo',\n                    valueField           : 'idx',\n                    editable             : false,\n                    store                : {},\n                    emptyText            : 'L{UndoRedo.NoActions}',\n                    onAction             : 'up.onTransactionSelected',\n                    displayValueRenderer : 'up.transactionsDisplayValueRenderer'\n                },\n                redoBtn : {\n                    type     : 'button',\n                    icon     : 'b-icon-redo',\n                    tooltip  : 'L{UndoRedo.RedoLastAction}',\n                    onAction : 'up.onRedo'\n                }\n            },\n            // This is treated as atomic by the Toolbar's menu overflow processing.\n            overflowable : true\n        };\n    }\n    afterConstruct() {\n        this.updateUndoRedoControls();\n    }\n    updateStm(stm) {\n        this.detachListeners('undoredo');\n        stm?.ion({\n            name          : 'undoredo',\n            recordingstop : 'updateUndoRedoControls',\n            restoringstop : 'updateUndoRedoControls',\n            queueReset    : 'updateUndoRedoControls',\n            disabled      : 'updateUndoRedoControls',\n            thisObj       : this\n        });\n    }\n    changeItems(items) {\n        const { undoBtn, redoBtn } = items;\n        if (this.color) {\n            undoBtn && (undoBtn.color = this.color);\n            redoBtn && (redoBtn.color = this.color);\n        }\n        if (this.text) {\n            undoBtn && (undoBtn.text = 'L{UndoRedo.Undo}');\n            redoBtn && (redoBtn.text = 'L{UndoRedo.Redo}');\n        }\n        return super.changeItems(items);\n    }\n    updateProject(project) {\n        this.stm = project.stm;\n    }\n    fillUndoRedoCombo() {\n        const { transactionsCombo } = this.widgetMap;\n        // The transactionsCombo may be configured away if only undo and redo buttons are wanted\n        transactionsCombo && (transactionsCombo.items =\n            [[0, 'Original data'], ...this.stm.queue.map((title, idx) => [idx + 1, title || `Transaction ${idx + 1}`])]\n        );\n    }\n    updateUndoRedoControls() {\n        const\n            {\n                stm,\n                showZeroActionBadge\n            } = this,\n            {\n                undoBtn,\n                redoBtn,\n                transactionsCombo\n            } = this.widgetMap;\n        undoBtn.badge = stm.position || (showZeroActionBadge ? '0' : '');\n        redoBtn.badge = (stm.length - stm.position) || (showZeroActionBadge ? '0' : '');\n        undoBtn.disabled = !stm.canUndo;\n        redoBtn.disabled = !stm.canRedo;\n        this.fillUndoRedoCombo();\n        if (transactionsCombo) {\n            transactionsCombo.disabled = transactionsCombo.store.count <= 1;\n        }\n    }\n    transactionsDisplayValueRenderer(record, combo) {\n        const stmPos = this.stm?.position || 0;\n        return `${stmPos} undo actions / ${combo.store.count - stmPos - 1} redo actions`;\n    }\n    onUndo() {\n        this.stm.canUndo && this.stm.undo();\n    }\n    onRedo() {\n        this.stm.canRedo && this.stm.redo();\n    }\n    onTransactionSelected(combo) {\n        const\n            { stm } = this,\n            delta = stm.position - combo.value;\n        if (delta > 0) {\n            stm.canUndo && stm.undo(delta);\n        }\n        else if (delta < 0) {\n            stm.canRedo && stm.redo(-delta);\n        }\n    }\n}\nUndoRedoBase.initClass();\nUndoRedoBase._$name = 'UndoRedoBase';"],
  "mappings": "mEAWA,IAAqBA,EAArB,cAA0CC,CAAU,CAGhD,WAAW,cAAe,CACtB,MAAO,CAEH,QAAU,KACV,IAAM,KAMN,KAAO,KAKP,MAAQ,KAMR,oBAAsB,KACtB,IAAM,4BACN,YAAc,CACV,WAAa,UACb,SAAa,aACb,SAAa,SACjB,EACA,MAAQ,CACJ,QAAU,CACN,KAAW,SACX,KAAW,cACX,QAAW,6BACX,SAAW,WACf,EACA,kBAAoB,CAChB,KAAuB,QACvB,WAAuB,MACvB,SAAuB,GACvB,MAAuB,CAAC,EACxB,UAAuB,wBACvB,SAAuB,2BACvB,qBAAuB,qCAC3B,EACA,QAAU,CACN,KAAW,SACX,KAAW,cACX,QAAW,6BACX,SAAW,WACf,CACJ,EAEA,aAAe,EACnB,CACJ,CACA,gBAAiB,CACb,KAAK,uBAAuB,CAChC,CACA,UAAUC,EAAK,CACX,KAAK,gBAAgB,UAAU,EAC/BA,GAAA,MAAAA,EAAK,IAAI,CACL,KAAgB,WAChB,cAAgB,yBAChB,cAAgB,yBAChB,WAAgB,yBAChB,SAAgB,yBAChB,QAAgB,IACpB,CAAA,CACJ,CACA,YAAYC,EAAO,CACf,KAAM,CAAE,QAAAC,EAAS,QAAAC,CAAQ,EAAIF,EAC7B,OAAI,KAAK,QACLC,IAAYA,EAAQ,MAAQ,KAAK,OACjCC,IAAYA,EAAQ,MAAQ,KAAK,QAEjC,KAAK,OACLD,IAAYA,EAAQ,KAAO,oBAC3BC,IAAYA,EAAQ,KAAO,qBAExB,MAAM,YAAYF,CAAK,CAClC,CACA,cAAcG,EAAS,CACnB,KAAK,IAAMA,EAAQ,GACvB,CACA,mBAAoB,CAChB,KAAM,CAAE,kBAAAC,CAAkB,EAAI,KAAK,UAEnCA,IAAsBA,EAAkB,MACpC,CAAC,CAAC,EAAG,eAAe,EAAG,GAAG,KAAK,IAAI,MAAM,IAAI,CAACC,EAAOC,IAAQ,CAACA,EAAM,EAAGD,GAAS,eAAeC,EAAM,CAAC,EAAE,CAAC,CAAC,EAElH,CACA,wBAAyB,CACrB,KACI,CACI,IAAAP,EACA,oBAAAQ,CACJ,EAAI,KACJ,CACI,QAAAN,EACA,QAAAC,EACA,kBAAAE,CACJ,EAAI,KAAK,UACbH,EAAQ,MAAQF,EAAI,WAAaQ,EAAsB,IAAM,IAC7DL,EAAQ,MAASH,EAAI,OAASA,EAAI,WAAcQ,EAAsB,IAAM,IAC5EN,EAAQ,SAAW,CAACF,EAAI,QACxBG,EAAQ,SAAW,CAACH,EAAI,QACxB,KAAK,kBAAkB,EACnBK,IACAA,EAAkB,SAAWA,EAAkB,MAAM,OAAS,EAEtE,CACA,iCAAiCI,EAAQC,EAAO,CA7HpD,IAAAC,EA8HQ,MAAMC,IAASD,EAAA,KAAK,MAAL,KAAA,OAAAA,EAAU,WAAY,EACrC,MAAO,GAAGC,CAAM,mBAAmBF,EAAM,MAAM,MAAQE,EAAS,CAAC,eACrE,CACA,QAAS,CACL,KAAK,IAAI,SAAW,KAAK,IAAI,KAAK,CACtC,CACA,QAAS,CACL,KAAK,IAAI,SAAW,KAAK,IAAI,KAAK,CACtC,CACA,sBAAsBF,EAAO,CACzB,KACI,CAAE,IAAAV,CAAI,EAAI,KACVa,EAAQb,EAAI,SAAWU,EAAM,MAC7BG,EAAQ,EACRb,EAAI,SAAWA,EAAI,KAAKa,CAAK,EAExBA,EAAQ,GACbb,EAAI,SAAWA,EAAI,KAAK,CAACa,CAAK,CAEtC,CACJ,EAtIIC,EADiBhB,EACV,QAAQ,cAAA,EACfgB,EAFiBhB,EAEV,OAAO,cAAA,EAsIlBA,EAAa,UAAU,EACvBA,EAAa,OAAS",
  "names": ["UndoRedoBase", "Container", "stm", "items", "undoBtn", "redoBtn", "project", "transactionsCombo", "title", "idx", "showZeroActionBadge", "record", "combo", "_a", "stmPos", "delta", "__publicField"]
}
