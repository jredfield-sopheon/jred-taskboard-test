{
  "version": 3,
  "sources": ["../../../../Scheduler/lib/Scheduler/column/ResourceInfoColumn.js", "../../../../Scheduler/lib/Scheduler/feature/Labels.js", "../../../../Scheduler/lib/Scheduler/feature/RowReorder.js", "../../../../Scheduler/lib/Scheduler/feature/TimelineSummary.js", "../../../../Scheduler/lib/Scheduler/feature/export/Utils.js", "../../../../Scheduler/lib/Scheduler/feature/export/exporter/SchedulerExporterMixin.js", "../../../../Scheduler/lib/Scheduler/feature/export/exporter/MultiPageExporter.js", "../../../../Scheduler/lib/Scheduler/feature/export/exporter/MultiPageVerticalExporter.js", "../../../../Scheduler/lib/Scheduler/view/export/field/ScheduleRangeCombo.js", "../../../../Scheduler/lib/Scheduler/view/export/SchedulerExportDialog.js", "../../../../Scheduler/lib/Scheduler/feature/export/exporter/SinglePageExporter.js", "../../../../Scheduler/lib/Scheduler/feature/export/PdfExport.js"],
  "sourcesContent": ["import Column from '../../Grid/column/Column.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\nimport VersionHelper from '../../Core/helper/VersionHelper.js';\nimport AvatarRendering from '../../Core/widget/util/AvatarRendering.js';\n/**\n * @module Scheduler/column/ResourceInfoColumn\n */\n/**\n * Displays basic resource information. Defaults to showing an image + name + event count (all configurable).\n *\n * If a resource has no image, you can either provide an icon using `iconCls` in the data (you then need to specify\n * `image === false` in your data) or the resource initials will be shown.\n *\n * Be sure to specify {@link Scheduler.view.mixin.SchedulerEventRendering#config-resourceImagePath} to instruct the\n * column where to look for the images.\n *\n * If an image fails to load or if a resource lacks an image, the resource name initials will be rendered. If the\n * resource has an {@link Scheduler/model/mixin/ResourceModelMixin#field-eventColor} specified, it will be used as the\n * background color of the initials.\n *\n * {@inlineexample Scheduler/column/ResourceInfoColumn.js}\n *\n * @extends Grid/column/Column\n * @classtype resourceInfo\n * @column\n */\nexport default class ResourceInfoColumn extends Column {\n    static get $name() {\n        return 'ResourceInfoColumn';\n    }\n    static get type() {\n        return 'resourceInfo';\n    }\n    static get fields() {\n        return ['showEventCount', 'showRole', 'showMeta', 'showImage', 'validNames', 'autoScaleThreshold', 'useNameAsImageName'];\n    }\n    static get defaults() {\n        return {\n            /** @hideconfigs renderer */\n            /**\n             * Show image. Looks for image name in fields on the resource in the following order: 'imageUrl', 'image',\n             * 'name'. Set `showImage` to a field name to use a custom field. Set `Scheduler.resourceImagePath` to\n             * specify where to load images from. If no extension found, defaults to\n             * {@link Scheduler.view.mixin.SchedulerEventRendering#config-resourceImageExtension}.\n             * @config {Boolean}\n             * @default\n             */\n            showImage : true,\n            /**\n             * Show number of events assigned to the resource below the name.\n             * @config {Boolean}\n             * @default\n             */\n            showEventCount : true,\n            /**\n             * A template string to render any extra information about the resource below the name\n             * @config {Function}\n             * @param {Scheduler.model.ResourceModel} resourceRecord The record representing the current row\n             * @returns {String|null}\n             */\n            showMeta : null,\n            /**\n             * Show resource role below the name. Specify `true` to display data from the `role` field, or specify a field\n             * name to read this value from.\n             * @config {Boolean|String}\n             * @default\n             */\n            showRole : false,\n            /**\n             * Valid image names. Set to `null` to allow all names.\n             * @deprecated This will be removed in 6.0\n             * @config {String[]}\n             */\n            validNames : null,\n            /**\n             * Specify 0 to prevent the column from adapting its content according to the used row height, or specify a\n             * threshold (row height) at which scaling should start.\n             * @config {Number}\n             * @default\n             */\n            autoScaleThreshold : 40,\n            /**\n             * Use the resource name as the image name when no `image` is specified on the resource.\n             * @config {Boolean}\n             * @default\n             */\n            useNameAsImageName : true,\n            field      : 'name',\n            htmlEncode : false,\n            width      : 140,\n            cellCls    : 'b-resourceinfo-cell',\n            editor     : VersionHelper.isTestEnv ? false : 'text'\n        };\n    }\n    construct(...args) {\n        super.construct(...args);\n        this.avatarRendering = new AvatarRendering({\n            element : this.grid.element\n        });\n    }\n    doDestroy() {\n        super.doDestroy();\n        this.avatarRendering.destroy();\n    }\n    getImageURL(imageName) {\n        const\n            resourceImagePath = this.grid.resourceImagePath || '',\n            parts             = resourceImagePath.split('//'),\n            urlPart           = parts.length > 1 ? parts[1] : resourceImagePath,\n            joined            = StringHelper.joinPaths([urlPart || '', imageName || '']);\n        return parts.length > 1 ? parts[0] + '//' + joined : joined;\n    }\n    template(resourceRecord, value) {\n        const me        = this,\n            {\n                showImage,\n                showRole,\n                showMeta,\n                showEventCount,\n                grid\n            }         = me,\n            {\n                timeAxis,\n                resourceImageExtension = '',\n                defaultResourceImageName\n            }         = grid,\n            roleField = typeof showRole === 'string' ? showRole : 'role',\n            count     = showEventCount && resourceRecord.eventStore.getEvents({\n                includeOccurrences : grid.enableRecurringEvents,\n                resourceRecord,\n                startDate          : timeAxis.startDate,\n                endDate            : timeAxis.endDate\n            }).length;\n        let imageUrl;\n        if (showImage && resourceRecord.image !== false) {\n            if (resourceRecord.imageUrl) {\n                imageUrl = resourceRecord.imageUrl;\n            }\n            else {\n                // record.image is supposed to be a file name, located at resourceImagePath\n                const\n                    imageName = typeof showImage === 'string'\n                        ? showImage\n                        : (resourceRecord.image || value && me.useNameAsImageName && (value.toLowerCase() + resourceImageExtension) || defaultResourceImageName) || '';\n                imageUrl = imageName && me.getImageURL(imageName);\n                // Image name should have an extension\n                if (imageUrl && !imageName.includes('.')) {\n                    // If validNames is specified, check that imageName is valid\n                    if (!me.validNames || me.validNames.includes(imageName)) {\n                        imageUrl += resourceImageExtension;\n                    }\n                }\n            }\n        }\n        return {\n            class    : 'b-resource-info',\n            children : [\n                showImage && me.avatarRendering.getResourceAvatar({\n                    resourceRecord,\n                    initials        : resourceRecord.initials,\n                    color           : resourceRecord.eventColor,\n                    iconCls         : resourceRecord.iconCls,\n                    imageUrl,\n                    defaultImageUrl : defaultResourceImageName && this.getImageURL(defaultResourceImageName)\n                }),\n                showRole || showEventCount || showMeta ? {\n                    tag      : 'dl',\n                    children : [\n                        {\n                            tag  : 'dt',\n                            text : value\n                        },\n                        showRole ? {\n                            tag   : 'dd',\n                            class : 'b-resource-role',\n                            text  : resourceRecord.getValue(roleField)\n                        } : null,\n                        showEventCount ? {\n                            tag   : 'dd',\n                            class : 'b-resource-events',\n                            html  : me.L('L{eventCountText}', count)\n                        } : null,\n                        showMeta ? {\n                            tag   : 'dd',\n                            class : 'b-resource-meta',\n                            html  : me.showMeta(resourceRecord)\n                        } : null\n                    ]\n                } : value // This becomes a text node, no HTML encoding needed\n            ]\n        };\n    }\n    defaultRenderer({ grid, record, cellElement, value, isExport }) {\n        let result;\n        if (record.isSpecialRow) {\n            result = '';\n        }\n        else if (isExport) {\n            result = value;\n        }\n        else {\n            if (this.autoScaleThreshold && grid.rowHeight < this.autoScaleThreshold) {\n                cellElement.style.fontSize = (grid.rowHeight / 40) + 'em';\n            }\n            else {\n                cellElement.style.fontSize = '';\n            }\n            result = this.template(record, value);\n        }\n        return result;\n    }\n}\nColumnStore.registerColumnType(ResourceInfoColumn);\nResourceInfoColumn._$name = 'ResourceInfoColumn';", "import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport DomSync from '../../Core/helper/DomSync.js';\nimport EventHelper from '../../Core/helper/EventHelper.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\nimport Editor from '../../Core/widget/Editor.js';\n/**\n * @module Scheduler/feature/Labels\n */\nconst\n    sides       = [\n        'top',\n        'before',\n        'after',\n        'bottom'\n    ],\n    editorAlign = (side, client) => {\n        switch (side) {\n            case 'top' :\n                return 'b-b';\n            case 'after' :\n                return client.rtl ? 'r-r' : 'l-l';\n            case 'right' :\n                return 'l-l';\n            case 'bottom' :\n                return 't-t';\n            case 'before' :\n                return client.rtl ? 'l-l' : 'r-r';\n            case 'left' :\n                return 'r-r';\n        }\n    },\n    topBottom   = {\n        top    : 1,\n        bottom : 1\n    },\n    layoutModes = {\n        estimate : 1,\n        measure  : 1\n    },\n    layoutSides = {\n        before : 1,\n        after  : 1\n    };\n/**\n * Configuration object for a label used by the Labels feature.\n * @typedef {Object} SchedulerLabelConfig\n * @property {String} field The name of a field in one of the associated records, {@link Scheduler.model.EventModel} or\n * {@link Scheduler.model.ResourceModel}. The record from which the field value is drawn will be ascertained by checking\n * for field definitions by the specified name.\n * @property {Function} renderer A function, which when passed an object containing `eventRecord`, `resourceRecord`,\n * `assignmentRecord` and `domConfig` properties, returns the HTML to display as the label\n * @property {Scheduler.model.EventModel} renderer.eventRecord\n * @property {Scheduler.model.ResourceModel} renderer.resourceRecord\n * @property {Scheduler.model.AssignmentModel} renderer.assignmentRecord\n * @property {DomConfig} renderer.domConfig\n * @property {Object} thisObj The `this` reference to use in the `renderer`.\n * @property {InputFieldConfig|Core.widget.Field} editor If the label is to be editable, a field configuration object with a\n * `type` property, or an instantiated Field. **The `field` property is mandatory for editing to work**.\n */\n/**\n * Displays labels at positions {@link #config-top}, {@link #config-right}, {@link #config-bottom} and\n * {@link #config-left}.\n *\n * Text in labels can be set from a field on the {@link Scheduler.model.EventModel} or the\n * {@link Scheduler.model.ResourceModel} or using a custom renderer.\n *\n * Since `top` and `bottom` labels occupy space that would otherwise be used by the event we recommend using bigger\n * rowHeights (>55px for both labels with default styling) and zero barMargins because `top`/`bottom` labels give space\n * around events anyway.\n *\n * To prevent labels from being overlapped by other events, see {@link #config-labelLayoutMode}.\n *\n * This feature is **disabled** by default.\n * It is **not** supported in vertical mode.\n * For info on enabling it, see {@link Grid.view.mixin.GridFeatures}.\n *\n * {@inlineexample Scheduler/feature/Labels.js}\n *\n * @demo Scheduler/labels\n *\n * @extends Core/mixin/InstancePlugin\n * @classtype labels\n * @feature\n */\nexport default class Labels extends InstancePlugin {\n    //region Config\n    static get $name() {\n        return 'Labels';\n    }\n    static get configurable() {\n        return {\n            /**\n             * CSS class to apply to label elements\n             * @config {String}\n             * @default\n             */\n            labelCls : 'b-sch-label',\n            /**\n             * Top label configuration object.\n             * @config {SchedulerLabelConfig}\n             * @default\n             */\n            top : null,\n            /**\n             * Configuration object for the label which appears *after* the event bar in the current writing direction.\n             * @config {SchedulerLabelConfig}\n             * @default\n             */\n            after : null,\n            /**\n             * Right label configuration object.\n             * @config {SchedulerLabelConfig}\n             * @default\n             */\n            right : null,\n            /**\n             * Bottom label configuration object.\n             * @config {SchedulerLabelConfig}\n             * @default\n             */\n            bottom : null,\n            /**\n             * Configuration object for the label which appears *before* the event bar in the current writing direction.\n             * @config {SchedulerLabelConfig}\n             * @default\n             */\n            before : null,\n            /**\n             * Left label configuration object.\n             * @config {SchedulerLabelConfig}\n             * @default\n             */\n            left : null,\n            thisObj : null,\n            /**\n             * What action should be taken when focus moves leaves the cell editor, for example when clicking outside.\n             * May be `'complete'` or `'cancel`'.\n             * @config {'complete'|'cancel'}\n             * @default\n             */\n            blurAction : 'cancel',\n            /**\n             * How to handle labels during event layout. Options are:\n             *\n             * * default - Labels do not affect event layout, events will overlap labels\n             * * estimate - Label width is estimated by multiplying text length with {@link #config-labelCharWidth}\n             * * measure - Label width is determined by measuring the label, precise but slow\n             *\n             * Note that this only applies to the left and right labels, top and bottom labels does not take part in the\n             * event layout process.\n             *\n             * @config {'default'|'estimate'|'measure'}\n             * @default\n             */\n            labelLayoutMode : 'default',\n            /**\n             * Factor representing the average char width in pixels used to determine label width when configured\n             * with `labelLayoutMode: 'estimate'`.\n             * @config {Number}\n             * @default\n             */\n            labelCharWidth : 7\n        };\n    }\n    // Plugin configuration. This plugin chains some of the functions in Grid.\n    static get pluginConfig() {\n        return {\n            chain : ['onEventDataGenerated']\n        };\n    }\n    //endregion\n    //region Init & destroy\n    construct(scheduler, config) {\n        const me = this;\n        if (scheduler.isVertical) {\n            throw new Error('Labels feature is not supported in vertical mode');\n        }\n        me.scheduler = scheduler;\n        super.construct(scheduler, config);\n        if (me.top || me.bottom || me.before || me.after) {\n            me.updateHostClasslist();\n            // rowHeight warning, not in use\n            //const labelCount = !!me.topLabel + !!me.bottomLabel;\n            //if (scheduler.rowHeight < 60 - labelCount * 12) console.log('')\n        }\n    }\n    updateHostClasslist() {\n        const\n            { top, bottom } = this,\n            { classList }   = this.scheduler.element;\n        classList.remove('b-labels-topbottom');\n        classList.remove('b-labels-top');\n        classList.remove('b-labels-bottom');\n        // OR is correct. This means that there are labels above OR below.\n        if (top || bottom) {\n            classList.add('b-labels-topbottom');\n            if (top) {\n                classList.add('b-labels-top');\n            }\n            if (bottom) {\n                classList.add('b-labels-bottom');\n            }\n        }\n    }\n    onLabelDblClick(event) {\n        const\n            me        = this,\n            target    = event.target;\n        if (target && !me.scheduler.readOnly) {\n            const\n                { side }          = target.dataset,\n                labelConfig       = me[side],\n                { editor, field } = labelConfig;\n            if (editor) {\n                const eventRecord = this.scheduler.resolveEventRecord(event.target);\n                if (eventRecord.readOnly) {\n                    return;\n                }\n                if (!(editor instanceof Editor)) {\n                    labelConfig.editor = new Editor({\n                        blurAction   : me.blurAction,\n                        inputField   : editor,\n                        scrollAction : 'realign'\n                    });\n                }\n                // Editor removes itself from the DOM after being hidden\n                labelConfig.editor.render(me.scheduler.element);\n                labelConfig.editor.startEdit({\n                    target,\n                    align     : editorAlign(side, me.client),\n                    matchSize : false,\n                    record    : eventRecord,\n                    field\n                });\n                event.stopImmediatePropagation();\n                return false;\n            }\n        }\n    }\n    changeTop(top) {\n        return this.processLabelSpec(top, 'top');\n    }\n    updateTop() {\n        this.updateHostClasslist();\n    }\n    changeAfter(after) {\n        return this.processLabelSpec(after, 'after');\n    }\n    updateAfter() {\n        this.updateHostClasslist();\n    }\n    changeRight(right) {\n        this[this.client.rtl ? 'before' : 'after'] = right;\n    }\n    changeBottom(bottom) {\n        return this.processLabelSpec(bottom, 'bottom');\n    }\n    updateBottom() {\n        this.updateHostClasslist();\n    }\n    changeBefore(before) {\n        return this.processLabelSpec(before, 'before');\n    }\n    updateBefore() {\n        this.updateHostClasslist();\n    }\n    changeLeft(left) {\n        this[this.client.rtl ? 'after' : 'before'] = left;\n    }\n    processLabelSpec(labelSpec, side) {\n        if (typeof labelSpec === 'function') {\n            labelSpec = {\n                renderer : labelSpec\n            };\n        }\n        else if (typeof labelSpec === 'string') {\n            labelSpec = {\n                field : labelSpec\n            };\n        }\n        // Allow us to mutate ownProperties in the labelSpec without mutating outside object\n        else if (labelSpec) {\n            labelSpec = Object.setPrototypeOf({}, labelSpec);\n        }\n        // Clear label\n        else {\n            return null;\n        }\n        const\n            { scheduler }                                = this,\n            { eventStore, resourceStore, taskStore, id } = scheduler,\n            { field, editor }                            = labelSpec;\n        // If there are milestones, and we are changing the available height\n        // either by adding a top/bottom label, or adding a top/bottom label\n        // then during the next dependency refresh, milestone width must be recalculated.\n        if (topBottom[side]) {\n            scheduler.milestoneWidth = null;\n        }\n        if (eventStore && !taskStore) {\n            labelSpec.recordType = 'event';\n        }\n        else {\n            labelSpec.recordType = 'task';\n        }\n        // Find the field definition or property from whichever store and cache the type.\n        if (field) {\n            let\n                fieldDef,\n                fieldFound = false;\n            if (eventStore && !taskStore) {\n                fieldDef = eventStore.modelClass.fieldMap[field];\n                if (fieldDef) {\n                    labelSpec.fieldDef = fieldDef;\n                    labelSpec.recordType = 'event';\n                    fieldFound = true;\n                }\n                // Check if it references a property\n                else if (Reflect.has(eventStore.modelClass.prototype, field)) {\n                    labelSpec.recordType = 'event';\n                    fieldFound = true;\n                }\n            }\n            if (!fieldDef && taskStore) {\n                fieldDef = taskStore.modelClass.fieldMap[field];\n                if (fieldDef) {\n                    labelSpec.fieldDef = fieldDef;\n                    labelSpec.recordType = 'task';\n                    fieldFound = true;\n                }\n                // Check if it references a property\n                else if (Reflect.has(resourceStore.modelClass.prototype, field)) {\n                    labelSpec.recordType = 'task';\n                    fieldFound = true;\n                }\n            }\n            if (!fieldDef && resourceStore) {\n                fieldDef = resourceStore.modelClass.fieldMap[field];\n                if (fieldDef) {\n                    labelSpec.fieldDef = fieldDef;\n                    labelSpec.recordType = 'resource';\n                    fieldFound = true;\n                }\n                // Check if it references a property\n                else if (Reflect.has(resourceStore.modelClass.prototype, field)) {\n                    labelSpec.recordType = 'resource';\n                    fieldFound = true;\n                }\n            }\n            if (editor) {\n                if (typeof editor === 'boolean') {\n                    scheduler.editor = {\n                        type : 'textfield'\n                    };\n                }\n                else if (typeof editor === 'string') {\n                    scheduler.editor = {\n                        type : editor\n                    };\n                }\n                EventHelper.on({\n                    element  : scheduler.timeAxisSubGrid.element,\n                    delegate : '.b-sch-label',\n                    dblclick : 'onLabelDblClick',\n                    thisObj  : this\n                });\n            }\n        }\n        return labelSpec;\n    }\n    doDisable(disable) {\n        super.doDisable(disable);\n        if (this.client.isPainted) {\n            this.client.refresh();\n        }\n    }\n    //endregion\n    generateLabelConfigs(data) {\n        const\n            me      = this,\n            configs = [];\n        // Insert all configured labels\n        for (const side of sides) {\n            if (me[side]) {\n                const\n                    {\n                        field,\n                        fieldDef,\n                        recordType,\n                        renderer,\n                        thisObj\n                    }  = me[side],\n                    domConfig = {\n                        tag       : 'label',\n                        className : {\n                            [me.labelCls]              : 1,\n                            [`${me.labelCls}-${side}`] : 1\n                        },\n                        dataset : {\n                            side,\n                            taskFeature : `label-${side}`\n                        }\n                    };\n                let value;\n                const\n                    eventRecordProperty = `${recordType}Record`,\n                    eventRecord         = data[eventRecordProperty];\n                // If there's a renderer, use that by preference\n                if (renderer) {\n                    value = renderer.call(thisObj || me.thisObj || me, {\n                        [eventRecordProperty] : eventRecord,\n                        resourceRecord        : data.resourceRecord,\n                        assignmentRecord      : data.assignmentRecord,\n                        domConfig\n                    });\n                }\n                else {\n                    value = eventRecord.getValue(field);\n                    // If it's a date, format it according to the Scheduler's defaults\n                    if (fieldDef?.type === 'date' && !renderer) {\n                        value = DateHelper.format(value, me.client.displayDateFormat);\n                    }\n                    else {\n                        value = StringHelper.encodeHtml(value);\n                    }\n                }\n                domConfig.html = value || '\\xa0';\n                configs.push(domConfig);\n            }\n        }\n        return configs;\n    }\n    measureLabels(configs, data) {\n        const\n            me      = this,\n            pxPerMS = me.client.timeAxisViewModel.getSingleUnitInPixels('millisecond');\n        for (const config of configs) {\n            if (layoutSides[config.dataset.side]) {\n                let { html } = config;\n                let length = 0;\n                // Calculate length based on string length\n                if (me.labelLayoutMode === 'estimate') {\n                    // Strip tags before estimating\n                    if (html.includes('<')) {\n                        html = DomHelper.stripTags(html);\n                    }\n                    length = (html.length * me.labelCharWidth) + 18; // 18 = 1.5em, margin from event\n                }\n                // Measure\n                else {\n                    const element = me.labelMeasureElement || (me.labelMeasureElement = DomHelper.createElement({\n                        className : 'b-sch-event-wrap b-measure-label',\n                        parent    : me.client.foregroundCanvas\n                    }));\n                    // Outer DomSync should not remove\n                    element.retainElement = true;\n                    DomSync.sync({\n                        targetElement : element,\n                        domConfig     : {\n                            onlyChildren : true,\n                            children     : [\n                                config\n                            ]\n                        }\n                    });\n                    length = element.firstElementChild.offsetWidth;\n                }\n                // Convert from px to ms\n                const ms = length / pxPerMS;\n                // Adjust values used for event layout (not event position)\n                switch (config.dataset.side) {\n                    case 'before':\n                        data.startMS -= ms;\n                        break;\n                    case 'after':\n                        data.endMS += ms;\n                        break;\n                }\n            }\n        }\n    }\n    onEventDataGenerated(data) {\n        if (!this.disabled && !data.eventRecord?.isResourceTimeRange) {\n            const configs = this.generateLabelConfigs(data);\n            if (layoutModes[this.labelLayoutMode]) {\n                this.measureLabels(configs, data);\n            }\n            data.wrapperChildren.push(...configs);\n        }\n    }\n    updateLabelLayoutMode() {\n        if (!this.isConfiguring) {\n            this.client.refreshWithTransition();\n        }\n    }\n    updateLabelCharWidth() {\n        if (!this.isConfiguring) {\n            this.client.refreshWithTransition();\n        }\n    }\n}\nLabels.featureClass = 'b-sch-labels';\nLabels._$name = 'Labels'; GridFeatureManager.registerFeature(Labels, false, 'Scheduler');\n", "import GridRowReorder from '../../Grid/feature/RowReorder.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport TransactionalFeature from './mixin/TransactionalFeature.js';\n/**\n * @module Scheduler/feature/RowReorder\n */\n/**\n * This feature implements support for project transactions and used by default in Gantt. For general RowReorder feature\n * documentation see {@link Grid.feature.RowReorder}.\n *\n * This feature is **disabled** by default in Scheduler and **enabled** by default in Gantt.\n * For info on enabling it, see {@link Grid/view/mixin/GridFeatures}.\n *\n * @extends Grid/feature/RowReorder\n * @classtype rowReorder\n * @feature\n *\n * @typings Grid.feature.RowReorder -> Grid.feature.GridRowReorder\n */\nexport default class RowReorder extends TransactionalFeature(GridRowReorder) {\n    static $name = 'RowReorder';\n    onDragStart(...args) {\n        super.onDragStart(...args);\n        if (this.client.transactionalFeaturesEnabled) {\n            return this.startFeatureTransaction();\n        }\n    }\n    onDrop(...args) {\n        // Actual reorder will happen in a wrapper function to `tryPropagateWithChanges`, meaning reorder will be a\n        // transaction. This transaction will not even have any changes in it. So we can reject it.\n        this.rejectFeatureTransaction();\n        return super.onDrop(...args);\n    }\n    onAbort(...args) {\n        this.rejectFeatureTransaction();\n        return super.onAbort(...args);\n    }\n}\nRowReorder._$name = 'RowReorder'; GridFeatureManager.registerFeature(RowReorder, false, 'Scheduler');\nGridFeatureManager.registerFeature(RowReorder, true, 'Gantt');\n", "import GridSummary from '../../Grid/feature/Summary.js';\nimport Tooltip from '../../Core/widget/Tooltip.js';\n/**\n * @module Scheduler/feature/TimelineSummary\n */\n// noinspection JSClosureCompilerSyntax\n/**\n * Base class, not to be used directly.\n * @extends Grid/feature/Summary\n * @abstract\n */\nexport default class TimelineSummary extends GridSummary {\n    //region Config\n    static get $name() {\n        return 'TimelineSummary';\n    }\n    static get configurable() {\n        return {\n            /**\n             * Show tooltip containing summary values and labels\n             * @config {Boolean}\n             * @default\n             */\n            showTooltip : true\n        };\n    }\n    // Plugin configuration. This plugin chains some of the functions in Grid.\n    static get pluginConfig() {\n        return {\n            chain : ['renderRows', 'updateProject']\n        };\n    }\n    //endregion\n    //region Init\n    construct(client, config) {\n        const me = this;\n        super.construct(client, config);\n        if (!me.summaries) {\n            me.summaries = [{ renderer : me.renderer }];\n        }\n        // Feature might be run from Grid (in docs), should not crash\n        // https://app.assembla.com/spaces/bryntum/tickets/6801/details\n        if (client.isTimelineBase) {\n            me.updateProject(client.project);\n            client.ion({\n                timeAxisViewModelUpdate : me.renderRows,\n                thisObj                 : me\n            });\n        }\n    }\n    //endregion\n    //region Render\n    updateProject(project) {\n        this.detachListeners('summaryProject');\n        project.ion({\n            name      : 'summaryProject',\n            dataReady : 'updateTimelineSummaries',\n            thisObj   : this\n        });\n    }\n    renderRows() {\n        if (this.client.isHorizontal) {\n            this.client.timeAxisSubGrid.footer.element.querySelector('.b-grid-footer').classList.add('b-sch-summarybar');\n        }\n        super.renderRows();\n        if (!this.disabled) {\n            this.render();\n        }\n    }\n    get summaryBarElement() {\n        return this.client.element.querySelector('.b-sch-summarybar');\n    }\n    render() {\n        const\n            me                   = this,\n            { client: timeline } = me,\n            sizeProp             = timeline.isHorizontal ? 'width' : 'height',\n            colCfg               = timeline.timeAxisViewModel.columnConfig,\n            summaryContainer     = me.summaryBarElement;\n        if (summaryContainer) {\n            // if any sum config has a label, init tooltip\n            if (!me._tip && me.showTooltip && me.summaries.some(config => config.label)) {\n                me._tip = new Tooltip({\n                    id             : `${timeline.id}-summary-tip`,\n                    cls            : 'b-timeaxis-summary-tip',\n                    hoverDelay     : 0,\n                    hideDelay      : 100,\n                    forElement     : summaryContainer,\n                    anchorToTarget : true,\n                    trackMouse     : false,\n                    forSelector    : '.b-timeaxis-tick',\n                    getHtml        : ({ activeTarget }) => activeTarget._tipHtml\n                });\n            }\n            summaryContainer.innerHTML = colCfg[colCfg.length - 1].map(col => `<div class=\"b-timeaxis-tick\" style=\"${sizeProp}: ${col.width}px\"></div>`).join('');\n            me.updateTimelineSummaries();\n        }\n    }\n    //endregion\n    /**\n     * Refreshes the summaries\n     */\n    refresh() {\n        super.refresh();\n        this.updateTimelineSummaries();\n    }\n    doDisable(disable) {\n        const { isConfiguring } = this.client;\n        super.doDisable(disable);\n        this.summaryColumn?.toggle(!disable);\n        if (!isConfiguring && !disable) {\n            this.render();\n        }\n    }\n    doDestroy() {\n        this._tip?.destroy();\n        super.doDestroy();\n    }\n}\nTimelineSummary._$name = 'TimelineSummary';", "export const ScheduleRange = {\n    completeview : 'completeview',\n    // completedata : 'completedata',\n    currentview  : 'currentview',\n    daterange    : 'daterange'\n};\n", "import DateHelper from '../../../../Core/helper/DateHelper.js';\nimport Rectangle from '../../../../Core/helper/util/Rectangle.js';\nimport DomHelper from '../../../../Core/helper/DomHelper.js';\nimport DomSync from '../../../../Core/helper/DomSync.js';\nimport { ScheduleRange } from '../Utils.js';\nconst immediatePromise = Promise.resolve();\nexport default base => class SchedulerExporterMixin extends base {\n    async scrollRowIntoView(client, index) {\n        const\n            {\n                rowManager,\n                scrollable\n            }    = client,\n            oldY = scrollable.y;\n        // If it's a valid index to scroll to, then try it.\n        if (index < client.store.count) {\n            // Scroll the requested row to the viewport top\n            scrollable.scrollTo(null, rowManager.calculateTop(index));\n            // If that initiated a scroll, we need to wait for the row to be rendered, so return\n            // a Promise which resolves when that happens.\n            if (scrollable.y !== oldY) {\n                // GridBase adds listener to vertical scroll to update rows. Rows might be or might not be updated,\n                // but at the end of each scroll grid will trigger `scroll` event. So far this is the only scroll event\n                // triggered by the grid itself and it is different from `scroll` event on scrollable.\n                return new Promise(resolve => {\n                    const detacher = client.ion({\n                        scroll({ scrollTop }) {\n                            // future-proof: only react to scroll event with certain argument\n                            if (scrollTop != null && rowManager.getRow(index)) {\n                                detacher();\n                                resolve();\n                            }\n                        }\n                    });\n                });\n            }\n        }\n        // No scroll occurred. Promise must be resolved immediately\n        return immediatePromise;\n    }\n    async scrollToDate(client, date) {\n        let scrollFired = false;\n        const promises    = [];\n        // Time axis is updated on element scroll, which is async event. We need to synchronize this logic.\n        // If element horizontal scroll is changed then sync event is fired. We add listener to that one specific event\n        // and remove it right after scrollToDate sync code, keeping listeners clean. If scrolling occurred, we need\n        // to wait until time header is updated.\n        const detacher = client.timeAxisSubGrid.scrollable.ion({\n            scrollStart({ x }) {\n                if (x != null) {\n                    scrollFired = true;\n                }\n            }\n        });\n        // added `block: start` to do scrolling faster\n        // it moves data to begin of visible area that is longer section for re-render\n        promises.push(client.scrollToDate(date, { block : 'start' }));\n        detacher();\n        if (scrollFired) {\n            // We have to wait for scrollEnd event before moving forward. When exporting large view we might have to scroll\n            // extensively and it might occur that requested scroll position would not be reached because concurrent\n            // scrollEnd events would move scroll back.\n            // scrollEnd is on a 100ms timer *after* the last scroll event fired, so all necessary\n            // updated will have occurred.\n            // Covered by Gantt/tests/feature/export/MultiPageVertical.t.js\n            promises.push(client.timeAxisSubGrid.header.scrollable.await('scrollEnd', { checkLog : false }));\n        }\n        await Promise.all(promises);\n    }\n    cloneElement(element, target, clear) {\n        super.cloneElement(element, target, clear);\n        const clonedEl = this.element.querySelector('.b-schedulerbase');\n        // Remove default animation classes\n        clonedEl?.classList.remove(...['fade-in', 'slide-from-left', 'slide-from-top', 'zoom-in'].map(name => `b-initial-${name}`));\n    }\n    async prepareComponent(config) {\n        const\n            me                     = this,\n            { client }             = config,\n            { currentOrientation } = client,\n            includeTimeline        = client.timeAxisSubGrid.width > 0;\n        switch (config.scheduleRange) {\n            case ScheduleRange.completeview:\n                config.rangeStart = client.startDate;\n                config.rangeEnd   = client.endDate;\n                break;\n            case ScheduleRange.currentview: {\n                const { startDate, endDate } = client.visibleDateRange;\n                config.rangeStart = startDate;\n                config.rangeEnd = endDate;\n                break;\n            }\n        }\n        await client.waitForAnimations();\n        // Disable infinite scroll before export, so it doesn't change time span\n        config.infiniteScroll = client.infiniteScroll;\n        client.infiniteScroll = false;\n        // Don't change timespan if time axis subgrid is not visible\n        if (includeTimeline) {\n            // set new timespan before calling parent to get proper scheduler header/content size\n            client.setTimeSpan(config.rangeStart, config.rangeEnd);\n            if (config.scheduleRange === ScheduleRange.daterange) {\n                // In case time axis is filtered or generated by custom fn we need to adjust passed ranges to actual dates\n                config.rangeStart = client.startDate;\n                config.rangeEnd = client.endDate;\n            }\n            // Access svgCanvas el to create dependency canvas early\n            client.svgCanvas;\n        }\n        // Disable event animations during export\n        me._oldEnableEventAnimations = client.enableEventAnimations;\n        client.enableEventAnimations = false;\n        // Add scroll buffer for the horizontal rendering\n        if (currentOrientation.isHorizontalRendering) {\n            me._oldScrollBuffer = currentOrientation.scrollBuffer;\n            me._oldVerticalBuffer = currentOrientation.verticalBufferSize;\n            currentOrientation.scrollBuffer = 100;\n            currentOrientation.verticalBufferSize = -1;\n        }\n        // Raise flag on the client to render all suggested dependencies\n        client.ignoreViewBox = true;\n        await super.prepareComponent(config);\n        const\n            { exportMeta, element } = me,\n            fgCanvasEl              = element.querySelector('.b-sch-foreground-canvas'),\n            timeAxisEl              = element.querySelector('.b-horizontaltimeaxis');\n        exportMeta.includeTimeline = includeTimeline;\n        if (includeTimeline && config.scheduleRange !== ScheduleRange.completeview) {\n            // If we are exporting subrange of dates we need to change subgrid size accordingly\n            exportMeta.totalWidth -= exportMeta.subGrids.normal.width;\n            exportMeta.totalWidth += exportMeta.subGrids.normal.width = client.timeAxisViewModel.getDistanceBetweenDates(config.rangeStart, config.rangeEnd);\n            const\n                horizontalPages = Math.ceil(exportMeta.totalWidth / exportMeta.pageWidth),\n                totalPages      = horizontalPages * exportMeta.verticalPages;\n            exportMeta.horizontalPages = horizontalPages;\n            exportMeta.totalPages = totalPages;\n            // store left scroll to imitate normal grid/header scroll using margin\n            exportMeta.subGrids.normal.scrollLeft = client.getCoordinateFromDate(config.rangeStart);\n        }\n        exportMeta.timeAxisHeaders = [];\n        exportMeta.timeAxisPlaceholders = [];\n        exportMeta.headersColleted = false;\n        DomHelper.forEachSelector(timeAxisEl, '.b-sch-header-row', headerRow => {\n            exportMeta.timeAxisPlaceholders.push(me.createPlaceholder(headerRow));\n            exportMeta.timeAxisHeaders.push(new Map());\n        });\n        // Add placeholder for events, clear all event elements, but not the entire elements as it contains svg canvas\n        exportMeta.subGrids.normal.eventsPlaceholder = me.createPlaceholder(fgCanvasEl, false);\n        DomHelper.removeEachSelector(fgCanvasEl, '.b-sch-event-wrap,.b-sch-resourcetimerange');\n        DomHelper.removeEachSelector(me.element, '.b-released');\n        exportMeta.eventsBoxes = new Map();\n        exportMeta.client = client;\n        const\n            columnLinesCanvas      = element.querySelector('.b-column-lines-canvas'),\n            timeRangesHeaderCanvas = element.querySelector('.b-sch-timeaxiscolumn .b-sch-timeranges-canvas'),\n            timeRangesBodyCanvas   = element.querySelector('.b-timeaxissubgrid .b-sch-timeranges-canvas');\n        if (client.hasActiveFeature('columnLines') && columnLinesCanvas) {\n            exportMeta.columnLinesPlaceholder = me.createPlaceholder(columnLinesCanvas);\n            exportMeta.columnLines = { lines : new Map(), majorLines : new Map() };\n        }\n        if (client.hasActiveFeature('timeRanges') && timeRangesBodyCanvas) {\n            exportMeta.timeRanges = {};\n            // header is optional\n            if (timeRangesHeaderCanvas) {\n                exportMeta.timeRanges.header = config.enableDirectRendering ? '' : {};\n                exportMeta.timeRangesHeaderPlaceholder = me.createPlaceholder(timeRangesHeaderCanvas);\n            }\n            exportMeta.timeRanges.body = config.enableDirectRendering ? '' : {};\n            exportMeta.timeRangesBodyPlaceholder = me.createPlaceholder(timeRangesBodyCanvas);\n        }\n        if (client.hasActiveFeature('dependencies')) {\n            client.features.dependencies.fillDrawingCache();\n            const svgCanvasEl = element.querySelector(`[id=\"${client.svgCanvas.getAttribute('id')}\"]`);\n            // Same as above, clear only dependency lines, because there might be markers added by user\n            if (svgCanvasEl) {\n                exportMeta.dependencyCanvasEl = svgCanvasEl;\n                exportMeta.dependenciesPlaceholder = me.createPlaceholder(svgCanvasEl, false, {\n                    ns  : 'http://www.w3.org/2000/svg',\n                    tag : 'path'\n                });\n                DomHelper.removeEachSelector(svgCanvasEl, '.b-sch-dependency');\n            }\n        }\n        // We need to scroll component to date to calculate correct start margin\n        if (includeTimeline && !DateHelper.betweenLesser(config.rangeStart, client.startDate, client.endDate)) {\n            await me.scrollToDate(client, config.rangeStart);\n        }\n    }\n    async restoreState(config) {\n        let waitForHorizontalScroll = false;\n        const\n            { client } = config,\n            promises = [];\n        // If scroll will be changed during restoring state (and it will likely be), raise a flag that exporter should\n        // wait for scrollEnd event before releasing control\n        const detacher = client.timeAxisSubGrid.scrollable.ion({\n            scrollStart({ x }) {\n                // HACK: scrollStart might actually fire when scroll is set to existing value\n                if (this.element.scrollLeft !== x) {\n                    waitForHorizontalScroll = true;\n                }\n            }\n        });\n        promises.push(super.restoreState(config));\n        // Scroll start will be fired synchronously\n        detacher();\n        if (waitForHorizontalScroll) {\n            promises.push(client.timeAxisSubGrid.header.scrollable.await('scrollEnd', { checkLog : false }));\n        }\n        await Promise.all(promises);\n    }\n    async restoreComponent(config) {\n        const\n            { client }             = config,\n            { currentOrientation } = client;\n        client.ignoreViewBox = false;\n        client.infiniteScroll = config.infiniteScroll;\n        client.enableEventAnimations = this._oldEnableEventAnimations;\n        if (currentOrientation.isHorizontalRendering) {\n            currentOrientation.scrollBuffer = this._oldScrollBuffer;\n            currentOrientation.verticalBufferSize = this._oldVerticalBuffer;\n        }\n        await super.restoreComponent(config);\n    }\n    async onRowsCollected(rows, config) {\n        const me = this;\n        await super.onRowsCollected(rows, config);\n        // Only collect this data if timeline is visible\n        if (me.exportMeta.includeTimeline) {\n            const\n                { client, enableDirectRendering } = config,\n                { timeView }                      = client,\n                { pageRangeStart, pageRangeEnd }  = me.getCurrentPageDateRange(config);\n            if (enableDirectRendering) {\n                // If first page does not include timeline we don't need to render anything for it\n                if (pageRangeStart && pageRangeEnd) {\n                    me.renderHeaders(config, pageRangeStart, pageRangeEnd);\n                    me.renderLines(config, pageRangeStart, pageRangeEnd);\n                    me.renderRanges(config, pageRangeStart, pageRangeEnd);\n                    me.renderEvents(config, rows, pageRangeStart, pageRangeEnd);\n                }\n            }\n            else {\n                // Exported page may not contain timeline view, in which case we need to fall through\n                if (pageRangeStart) {\n                    let rangeProcessed = false;\n                    await me.scrollToDate(client, pageRangeStart);\n                    // Time axis and events are only rendered for the visible time span\n                    // we need to scroll the view and gather events/timeline elements\n                    // while (timeView.endDate <= config.rangeEnd) {\n                    while (!rangeProcessed) {\n                        me.collectLines(config);\n                        me.collectHeaders(config);\n                        me.collectRanges(config);\n                        me.collectEvents(rows, config);\n                        if (DateHelper.timeSpanContains(timeView.startDate, timeView.endDate, pageRangeStart, pageRangeEnd)) {\n                            rangeProcessed = true;\n                        }\n                        else if (timeView.endDate.getTime() >= pageRangeEnd.getTime()) {\n                            rangeProcessed = true;\n                        }\n                        else {\n                            const endDate = timeView.endDate;\n                            await me.scrollToDate(client, timeView.endDate);\n                            // If timeview end date is same as before scroll it means client is not able to scroll to date\n                            // and will go into infinite loop unless we stop it\n                            if (endDate.getTime() === timeView.endDate.getTime()) {\n                                throw new Error('Could not scroll to date');\n                            }\n                        }\n                    }\n                }\n                await me.scrollToDate(client, config.rangeStart);\n            }\n        }\n    }\n    getCurrentPageDateRange({ rangeStart, rangeEnd, enableDirectRendering, client }) {\n        const\n            me = this,\n            { exportMeta } = me,\n            { horizontalPages, horizontalPosition, pageWidth, subGrids } = exportMeta;\n        let pageRangeStart, pageRangeEnd;\n        // when exporting to multiple pages we only need to scroll sub-range within visible time span\n        if (horizontalPages > 1) {\n            const\n                pageStartX = horizontalPosition * pageWidth,\n                pageEndX   = (horizontalPosition + 1) * pageWidth,\n                // Assuming normal grid is right next to right side of the locked grid\n                // There is also a default splitter\n                normalGridX = subGrids.locked.width + subGrids.locked.splitterWidth;\n            if (pageEndX <= normalGridX) {\n                pageRangeEnd = pageRangeStart = null;\n            }\n            else {\n                const { scrollLeft = 0 } = subGrids.normal;\n                pageRangeStart = client.getDateFromCoordinate(Math.max(pageStartX - normalGridX + scrollLeft, 0));\n                // Extend visible schedule by 20% to cover up possible splitter\n                const multiplier = enableDirectRendering ? 1 : 1.2;\n                pageRangeEnd = client.getDateFromCoordinate((pageEndX - normalGridX + scrollLeft) * multiplier) || rangeEnd;\n            }\n        }\n        else {\n            pageRangeStart = rangeStart;\n            pageRangeEnd   = rangeEnd;\n        }\n        return {\n            pageRangeStart,\n            pageRangeEnd\n        };\n    }\n    prepareExportElement() {\n        const\n            { element, exportMeta }                = this,\n            { id, headerId, footerId, scrollLeft } = exportMeta.subGrids.normal,\n            el                                     = element.querySelector(`[id=\"${id}\"]`);\n        el.querySelectorAll('.b-sch-canvas').forEach(canvasEl => {\n            // Align canvases to last exported row bottom. If no such property exists - remove inline height\n            if (exportMeta.lastExportedRowBottom) {\n                canvasEl.style.height = `${exportMeta.lastExportedRowBottom}px`;\n            }\n            else {\n                canvasEl.style.height = '';\n            }\n            // Simulate horizontal scroll\n            if (scrollLeft) {\n                canvasEl.style.marginLeft = `-${scrollLeft}px`;\n            }\n        });\n        if (scrollLeft) {\n            [headerId, footerId].forEach(id => {\n                const el = element.querySelector(`[id=\"${id}\"] .b-widget-scroller`);\n                if (el) {\n                    el.style.marginLeft = `-${scrollLeft}px`;\n                }\n            });\n        }\n        return super.prepareExportElement();\n    }\n    collectHeaders(config) {\n        const\n            me             = this,\n            { client }     = config,\n            { exportMeta } = me;\n        // We only need to collect headers once, this flag is raised once they are collected along all exported range\n        if (!exportMeta.headersCollected) {\n            const\n                timeAxisEl = client.timeView.element,\n                timeAxisHeaders = exportMeta.timeAxisHeaders;\n            DomHelper.forEachSelector(timeAxisEl, '.b-sch-header-row', (headerRow, index, headerRows) => {\n                const headersMap = timeAxisHeaders[index];\n                DomHelper.forEachSelector(headerRow, '.b-sch-header-timeaxis-cell', el => {\n                    if (!headersMap.has(el.dataset.tickIndex)) {\n                        headersMap.set(el.dataset.tickIndex, el.outerHTML);\n                    }\n                });\n                if (index === headerRows.length - 1 && headersMap.has(String(client.timeAxis.count - 1))) {\n                    exportMeta.headersCollected = true;\n                }\n            });\n        }\n    }\n    collectRanges(config) {\n        const\n            me             = this,\n            { client }     = config,\n            { exportMeta } = me,\n            { timeRanges } = exportMeta;\n        if (!exportMeta.headersCollected && timeRanges) {\n            const\n                { headerCanvas, bodyCanvas } = client.features.timeRanges;\n            if (headerCanvas) {\n                DomHelper.forEachSelector(headerCanvas, '.b-sch-timerange', el => {\n                    timeRanges.header[el.dataset.id] = el.outerHTML;\n                });\n            }\n            DomHelper.forEachSelector(bodyCanvas, '.b-sch-timerange', el => {\n                timeRanges.body[el.dataset.id] = el.outerHTML;\n            });\n        }\n    }\n    collectLines(config) {\n        const\n            me              = this,\n            { client }      = config,\n            { exportMeta }  = me,\n            { columnLines } = exportMeta;\n        if (!exportMeta.headersCollected && columnLines) {\n            client.timeAxisSubGridElement.querySelectorAll('.b-column-line, .b-column-line-major').forEach(lineEl  => {\n                if (lineEl.classList.contains('b-column-line')) {\n                    const lineIndex = Number(lineEl.dataset.line.replace(/line-/, ''));\n                    columnLines.lines.set(lineIndex, lineEl.outerHTML);\n                }\n                else {\n                    const lineIndex = Number(lineEl.dataset.line.replace(/major-/, ''));\n                    columnLines.majorLines.set(lineIndex, lineEl.outerHTML);\n                }\n            });\n        }\n    }\n    collectEvents(rows, config) {\n        const\n            me         = this,\n            addedRows  = rows.length,\n            { client } = config,\n            normalRows = me.exportMeta.subGrids.normal.rows;\n        rows.forEach((row, index) => {\n            const\n                rowConfig = normalRows[normalRows.length - addedRows + index],\n                resource  = client.store.getAt(row.dataIndex),\n                eventsMap = rowConfig[3];\n            resource.events?.forEach(event => {\n                if (event.isScheduled) {\n                    let el = client.getElementFromEventRecord(event, resource);\n                    if (el && (el = el.parentElement) && !eventsMap.has(event.id)) {\n                        eventsMap.set(event.id, [el.outerHTML, Rectangle.from(el, el.offsetParent)]);\n                    }\n                }\n            });\n            resource.timeRanges?.forEach(timeRange => {\n                const\n                    elId = client.features.resourceTimeRanges?.generateElementId(timeRange) || '',\n                    el   = client.foregroundCanvas.syncIdMap[elId];\n                if (el && !eventsMap.has(elId)) {\n                    eventsMap.set(elId, [el.outerHTML, Rectangle.from(el, el.offsetParent)]);\n                }\n            });\n        });\n    }\n    //#region Direct rendering\n    renderHeaders(config, start, end) {\n        const\n            me               = this,\n            { exportMeta }   = me,\n            { client }       = config,\n            timeAxisHeaders  = exportMeta.timeAxisHeaders,\n            // Get the time axis view reference that we will use to build cells for specific time ranges\n            { timeAxisView } = client.timeAxisColumn,\n            domConfig        = timeAxisView.buildCells(start, end),\n            targetElement    = document.createElement('div');\n        DomSync.sync({\n            targetElement,\n            domConfig\n        });\n        DomHelper.forEachSelector(targetElement, '.b-sch-header-row', (headerRow, index) => {\n            const headersMap = timeAxisHeaders[index];\n            DomHelper.forEachSelector(headerRow, '.b-sch-header-timeaxis-cell', el => {\n                if (!headersMap.has(el.dataset.tickIndex)) {\n                    headersMap.set(el.dataset.tickIndex, el.outerHTML);\n                }\n            });\n        });\n    }\n    renderEvents(config, rows, start, end) {\n        const\n            me         = this,\n            { client } = config,\n            normalRows = me.exportMeta.subGrids.normal.rows;\n        rows.forEach((row, index) => {\n            const\n                rowConfig      = normalRows[index],\n                eventsMap      = rowConfig[3],\n                resource       = client.store.getAt(row.dataIndex),\n                resourceLayout = client.currentOrientation.getResourceLayout(resource),\n                left           = client.getCoordinateFromDate(start),\n                right          = client.getCoordinateFromDate(end),\n                eventDOMConfigs = client.currentOrientation.getEventDOMConfigForCurrentView(resourceLayout, row, left, right),\n                targetElement   = document.createElement('div');\n            eventDOMConfigs.forEach(domConfig => {\n                const\n                    { eventId }                  = domConfig.dataset,\n                    { left, top, width, height } = domConfig.style;\n                DomSync.sync({\n                    targetElement,\n                    domConfig\n                });\n                eventsMap.set(eventId, [targetElement.outerHTML, new Rectangle(left, top, width, height)]);\n            });\n        });\n    }\n    renderLines(config, start, end) {\n        const\n            me              = this,\n            { client }      = config,\n            { exportMeta }  = me,\n            { columnLines } = exportMeta;\n        if (columnLines) {\n            const\n                domConfigs    = client.features.columnLines.getColumnLinesDOMConfig(start, end),\n                targetElement = document.createElement('div');\n            DomSync.sync({\n                targetElement,\n                domConfig : {\n                    onlyChildren : true,\n                    children     : domConfigs\n                }\n            });\n            // Put all lines HTML to a single key in the set. That allows us to share code path with legacy export mode\n            columnLines.lines.set(0, targetElement.innerHTML);\n        }\n    }\n    renderRanges(config, start, end) {\n        const\n            me             = this,\n            { client }     = config,\n            { exportMeta } = me,\n            { timeRanges } = exportMeta;\n        if (timeRanges) {\n            const\n                domConfigs    = client.features.timeRanges.getDOMConfig(start, end),\n                targetElement = document.createElement('div');\n            // domConfigs is an array of two elements - first includes time range configs for body, second - for head\n            domConfigs.forEach((children, i) => {\n                DomSync.sync({\n                    targetElement,\n                    domConfig : {\n                        children,\n                        onlyChildren : true\n                    }\n                });\n                // body configs\n                if (i === 0) {\n                    timeRanges.body = targetElement.innerHTML;\n                }\n                // header configs\n                else {\n                    timeRanges.header = targetElement.innerHTML;\n                }\n            });\n        }\n    }\n    //#endregion\n    buildPageHtml(config) {\n        const\n            me = this,\n            {\n                subGrids,\n                timeAxisHeaders,\n                timeAxisPlaceholders,\n                columnLines,\n                columnLinesPlaceholder,\n                timeRanges,\n                timeRangesHeaderPlaceholder,\n                timeRangesBodyPlaceholder\n            }  = me.exportMeta,\n            { enableDirectRendering } = config;\n        // Now when rows are collected, we need to add them to exported grid\n        let html = me.prepareExportElement();\n        Object.values(subGrids).forEach(({ placeHolder, eventsPlaceholder, rows, mergedCellsHtml }) => {\n            const\n                placeHolderText       = placeHolder.outerHTML,\n                // Rows can be repositioned, in which case event related to that row should also be translated\n                { resources, events } = me.positionRows(rows, config);\n            let contentHtml =  resources.join('');\n            if (mergedCellsHtml?.length) {\n                contentHtml += `<div class=\"b-grid-merged-cells-container\">${mergedCellsHtml.join('')}</div>`;\n            }\n            html = html.replace(placeHolderText, contentHtml);\n            if (eventsPlaceholder) {\n                html = html.replace(eventsPlaceholder.outerHTML, events.join(''));\n            }\n        });\n        timeAxisHeaders.forEach((headers, index) => {\n            html = html.replace(timeAxisPlaceholders[index].outerHTML, Array.from(headers.values()).join(''));\n        });\n        if (columnLines) {\n            const lineElements = Array.from(columnLines.lines.values()).concat(Array.from(columnLines.majorLines.values()));\n            html = html.replace(columnLinesPlaceholder.outerHTML, lineElements.join(''));\n            // Lines are collected once for old mode, don't clear them\n            if (enableDirectRendering) {\n                me.exportMeta.columnLines.lines.clear();\n                me.exportMeta.columnLines.majorLines.clear();\n            }\n        }\n        if (timeRanges) {\n            if (enableDirectRendering) {\n                html = html.replace(timeRangesBodyPlaceholder.outerHTML, timeRanges.body);\n                // time ranges header element is optional\n                if (timeRangesHeaderPlaceholder) {\n                    html = html.replace(timeRangesHeaderPlaceholder.outerHTML, timeRanges.header);\n                }\n                me.exportMeta.timeRanges = {};\n            }\n            else {\n                html = html.replace(timeRangesBodyPlaceholder.outerHTML, Object.values(timeRanges.body).join(''));\n                // time ranges header element is optional\n                if (timeRangesHeaderPlaceholder) {\n                    html = html.replace(timeRangesHeaderPlaceholder.outerHTML, Object.values(timeRanges.body).join(''));\n                }\n            }\n        }\n        html = me.buildDependenciesHtml(html);\n        return html;\n    }\n    getEventBox(event) {\n        const\n            me = this,\n            {\n                eventsBoxes,\n                enableDirectRendering\n            } = me.exportMeta;\n        const box = event && eventsBoxes.get(String(event.id));\n        // In scheduler milestone box left edge is aligned with milestone start date. Later element is rotated and\n        // shifted by CSS by 50% of its width. Dependency feature relies on actual element sizes, but pdf export\n        // does not render actual elements. Therefore, we need to adjust the box.\n        if (enableDirectRendering && box && event.isMilestone) {\n            box.translate(-box.width / 2, 0);\n        }\n        return box;\n    }\n    renderDependencies() {\n        const\n            me                = this,\n            {\n                client,\n                eventsBoxes\n            }                 = me.exportMeta,\n            { dependencies }  = client,\n            dependencyFeature = client.features.dependencies,\n            targetElement     = DomHelper.createElement();\n        let draw = false;\n        dependencies.forEach(dependency => {\n            if ((!eventsBoxes.has(String(dependency.from)) &&\n                !eventsBoxes.has(String(dependency.to))) ||\n                !dependencyFeature.isDependencyVisible(dependency)) {\n                return;\n            }\n            const\n                fromBox = me.getEventBox(dependency.fromEvent),\n                toBox   = me.getEventBox(dependency.toEvent);\n            dependencyFeature.drawDependency(dependency, true, { from : fromBox?.clone(), to : toBox?.clone() });\n            draw = true;\n        });\n        // Force dom sync\n        if (draw) {\n            dependencyFeature.domSync(targetElement, true);\n        }\n        return targetElement.innerHTML;\n    }\n    buildDependenciesHtml(html) {\n        const { dependenciesPlaceholder, includeTimeline } = this.exportMeta;\n        if (dependenciesPlaceholder && includeTimeline) {\n            const placeholder = dependenciesPlaceholder.outerHTML;\n            html = html.replace(placeholder, this.renderDependencies());\n        }\n        return html;\n    }\n};\n", "import GridMultiPageExporter from '../../../../Grid/feature/export/exporter/MultiPageExporter.js';\nimport SchedulerExporterMixin from './SchedulerExporterMixin.js';\n/**\n * @module Scheduler/feature/export/exporter/MultiPageExporter\n */\n/**\n * A multiple page exporter. Used by the {@link Scheduler.feature.export.PdfExport} feature to export to multiple pages.\n * You do not need to use this class directly.\n *\n * ### Extending exporter\n *\n * ```javascript\n * class MyMultiPageExporter extends MultiPageExporter {\n *     // type is required for exporter\n *     static get type() {\n *         return 'mymultipageexporter';\n *     }\n *\n *     get stylesheets() {\n *         const stylesheets = super.stylesheets;\n *\n *         stylesheets.forEach(styleNodeOrLinkTag => doSmth(styleNodeOrLinkTag))\n *\n *         return stylesheets;\n *     }\n * }\n *\n * const scheduler = new Scheduler({\n *     features : {\n *         pdfExport : {\n *             // this export feature is configured with only one exporter\n *             exporters : [MyMultiPageExporter]\n *         }\n *     }\n * });\n *\n * // run export with the new exporter\n * scheduler.features.pdfExport.export({ exporter : 'mymultipageexporter' });\n * ```\n *\n * @classtype multipage\n * @extends Grid/feature/export/exporter/MultiPageExporter\n *\n * @typings Grid.feature.export.exporter.MultiPageExporter -> Grid.feature.export.exporter.GridMultiPageExporter\n */\nexport default class MultiPageExporter extends SchedulerExporterMixin(GridMultiPageExporter) {\n    static get $name() {\n        return 'MultiPageExporter';\n    }\n    static get type() {\n        return 'multipage';\n    }\n    async stateNextPage(config) {\n        await super.stateNextPage(config);\n        this.exportMeta.eventsBoxes.clear();\n    }\n    positionRows(rows) {\n        const\n            resources   = [],\n            events      = [];\n        // In case of variable row height row vertical position is not guaranteed to increase\n        // monotonously. Position row manually instead\n        rows.forEach(([html, top, height, eventsHtml]) => {\n            resources.push(html);\n            eventsHtml && Array.from(eventsHtml.entries()).forEach(([key, [html, box, extras = []]]) => {\n                events.push(html + extras.join(''));\n                // Store event box to render dependencies later\n                this.exportMeta.eventsBoxes.set(String(key), box);\n            });\n        });\n        return { resources, events };\n    }\n}\nMultiPageExporter._$name = 'MultiPageExporter';", "import GridMultiPageVerticalExporter from '../../../../Grid/feature/export/exporter/MultiPageVerticalExporter.js';\nimport SchedulerExporterMixin from './SchedulerExporterMixin.js';\nimport { ScheduleRange } from '../Utils.js';\n/**\n * @module Scheduler/feature/export/exporter/MultiPageVerticalExporter\n */\n/**\n * A vertical multiple page exporter. Used by the {@link Scheduler.feature.export.PdfExport} feature to export to\n * multiple pages. Content will be scaled in a horizontal direction to fit the page.\n *\n * You do not need to use this class directly.\n *\n * ### Extending exporter\n *\n * ```javascript\n * class MyMultiPageVerticalExporter extends MultiPageVerticalExporter {\n *     // type is required for exporter\n *     static get type() {\n *         return 'mymultipageverticalexporter';\n *     }\n *\n *     get stylesheets() {\n *         const stylesheets = super.stylesheets;\n *\n *         stylesheets.forEach(styleNodeOrLinkTag => doSmth(styleNodeOrLinkTag))\n *\n *         return stylesheets;\n *     }\n * }\n *\n * const scheduler = new Scheduler({\n *     features : {\n *         pdfExport : {\n *             // this export feature is configured with only one exporter\n *             exporters : [MyMultiPageVerticalExporter]\n *         }\n *     }\n * });\n *\n * // run export with the new exporter\n * scheduler.features.pdfExport.export({ exporter : 'mymultipageverticalexporter' });\n * ```\n *\n * @classtype multipagevertical\n * @extends Grid/feature/export/exporter/MultiPageVerticalExporter\n *\n * @typings Grid.feature.export.exporter.MultiPageVerticalExporter -> Grid.feature.export.exporter.GridMultiPageVerticalExporter\n */\nexport default class MultiPageVerticalExporter extends SchedulerExporterMixin(GridMultiPageVerticalExporter) {\n    static get $name() {\n        return 'MultiPageVerticalExporter';\n    }\n    static get type() {\n        return 'multipagevertical';\n    }\n    async stateNextPage(config) {\n        await super.stateNextPage(config);\n        this.exportMeta.eventsBoxes.clear();\n    }\n    async prepareComponent(config) {\n        await super.prepareComponent(config);\n        // Scheduler exporter mixin can update totalWidth, so we need to adjust pages and scale here again\n        if (config.scheduleRange !== ScheduleRange.completeview) {\n            this.estimateTotalPages(config);\n        }\n    }\n    positionRows(rows) {\n        const\n            resources   = [],\n            events      = [];\n        // In case of variable row height row vertical position is not guaranteed to increase\n        // monotonously. Position row manually instead\n        rows.forEach(([html, , , eventsHtml]) => {\n            resources.push(html);\n            eventsHtml && Array.from(eventsHtml.entries()).forEach(([key, [html, box, extras = []]]) => {\n                events.push(html + extras.join(''));\n                // Store event box to render dependencies later\n                this.exportMeta.eventsBoxes.set(String(key), box);\n            });\n        });\n        return { resources, events };\n    }\n}\nMultiPageVerticalExporter._$name = 'MultiPageVerticalExporter';", "import { ScheduleRange } from '../../../feature/export/Utils.js';\nimport Combo from '../../../../Core/widget/Combo.js';\nexport default class ScheduleRangeCombo extends Combo {\n    static get $name() {\n        return 'ScheduleRangeCombo';\n    }\n    // Factoryable type name\n    static get type() {\n        return 'schedulerangecombo';\n    }\n    static get defaultConfig() {\n        return {\n            editable              : false,\n            localizeDisplayFields : true,\n            displayField          : 'text',\n            buildItems() {\n                return Object.entries(ScheduleRange).map(([id, text]) => ({ value : id, text : 'L{' + text + '}' }));\n            }\n        };\n    }\n}\n// Register this widget type with its Factory\nScheduleRangeCombo.initClass();\nScheduleRangeCombo._$name = 'ScheduleRangeCombo';", "import DateHelper from '../../../Core/helper/DateHelper.js';\nimport GridExportDialog from '../../../Grid/view/export/ExportDialog.js';\nimport { ScheduleRange } from '../../feature/export/Utils.js';\nimport '../../view/export/field/ScheduleRangeCombo.js';\nimport Field from '../../../Core/widget/Field.js';\n/**\n * @module Scheduler/view/export/SchedulerExportDialog\n */\n/**\n * Extends the Grid's {@link Grid.view.export.ExportDialog} and adds a few extra fields specific to the scheduler.\n *\n * ## Default widgets\n *\n * The default widgets of this dialog are:\n *\n * | Widget ref             | Type                                     | Weight | Description                                          |\n * |------------------------|------------------------------------------|--------|----------------------------------------------------- |\n * | `columnsField`         | {@link Core.widget.Combo Combo}          | 100    | Choose columns to export                             |\n * | `scheduleRangeField`   | {@link Core.widget.Combo Combo}          | 150    | Choose date range to export                          |\n * | `rangesContainer`      | {@link Core.widget.Container Container}  | 151    | Container for range fields                           |\n * | \\>`rangeStartField`    | {@link Core.widget.DateField DateField}  | 10     | Choose date range start                              |\n * | \\>`rangeEndField`      | {@link Core.widget.DateField DateField}  | 30     | Choose date range end                                |\n * | `rowsRangeField`       | {@link Core.widget.Combo Combo}          | 200    | Choose which rows to export                          |\n * | `exporterTypeField`    | {@link Core.widget.Combo Combo}          | 300    | Type of the exporter to use                          |\n * | `alignRowsField`       | {@link Core.widget.Checkbox Checkbox}    | 400    | Align row top to the page top on every exported page |\n * | `repeatHeaderField`    | {@link Core.widget.Checkbox Checkbox}    | 500    | Toggle repeating headers on / off                    |\n * | `fileFormatField`      | {@link Core.widget.Combo Combo}          | 600    | Choose file format                                   |\n * | `paperFormatField`     | {@link Core.widget.Combo Combo}          | 700    | Choose paper format                                  |\n * | `orientationField`     | {@link Core.widget.Combo Combo}          | 800    | Choose orientation                                   |\n *\n * The default buttons are:\n *\n * | Widget ref             | Type                                     | Weight | Description                                          |\n * |------------------------|------------------------------------------|--------|------------------------------------------------------|\n * | `exportButton`         | {@link Core.widget.Button Button}        | 100    | Triggers export                                      |\n * | `cancelButton`         | {@link Core.widget.Button Button}        | 200    | Cancel export                                        |\n *\n * *\\> nested items*\n *\n * ## Configuring default widgets\n *\n * Widgets can be customized with {@link Scheduler.feature.export.PdfExport#config-exportDialog} config:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     features : {\n *         pdfExport : {\n *             exportDialog : {\n *                 items : {\n *                     // hide the field\n *                     orientationField  : { hidden : true },\n *\n *                     // reorder fields\n *                     exporterTypeField : { weight : 150 },\n *\n *                     // change default format in exporter\n *                     fileFormatField   : { value : 'png' },\n *\n *                     // Configure nested fields\n *                     rangesContainer : {\n *                         items : {\n *                             rangeStartField : { value : new Date() },\n *                             rangeEndField : { value : new Date() }\n *                         }\n *                     }\n *                 }\n *             }\n *         }\n *     }\n * });\n *\n * scheduler.features.pdfExport.showExportDialog();\n * ```\n *\n * ## Using DateTime fields for range start/end\n *\n * This config system is also capable (but not limited to) of changing layout of the container and replacing widget type:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     features : {\n *         pdfExport : {\n *             exportDialog : {\n *                 items : {\n *                     rangesContainer : {\n *                         // DateTime fields are longer, so we better lay them out\n *                         // vertically\n *                         layoutStyle : {\n *                             flexDirection : 'column'\n *                         },\n *                         items : {\n *                             rangeStartField : {\n *                                 // Use DateTime widget for ranges\n *                                 type       : 'datetime',\n *\n *                                 // Sync label width with other fields\n *                                 labelWidth : '12em'\n *                             },\n *                             rangeEndField : {\n *                                 type       : 'datetime',\n *                                 labelWidth : '12em'\n *                             },\n *                             // Add a filler widget that would add a margin at the bottom\n *                             filler : {\n *                                 height : '0.6em',\n *                                 weight : 900\n *                             }\n *                         }\n *                     }\n *                 }\n *             }\n *         }\n *     }\n * });\n *\n * ```\n *\n * ## Configuring default columns\n *\n * By default all visible columns are selected in the export dialog. This is managed by\n * {@link #config-autoSelectVisibleColumns} config. To change default selected columns you should disable this config\n * and set field value. Value should be an array of valid column ids (or column instances). This way you can\n * preselect hidden columns:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     columns : [\n *         { id : 'name', text : 'Name', field : 'name' },\n *         { id : 'age', text : 'Age', field : 'age' },\n *         { id : 'city', text : 'City', field : 'city', hidden : true }\n *     ],\n *     features : {\n *         pdfExport : {\n *             exportDialog : {\n *                 autoSelectVisibleColumns : false,\n *                 items : {\n *                     columnsField : { value : ['name', 'city'] }\n *                 }\n *             }\n *         }\n *     }\n * })\n *\n * // This will show export dialog with Name and City columns selected\n * // even though City column is hidden in the UI\n * scheduler.features.pdfExport.showExportDialog();\n * ```\n *\n * ## Adding fields\n *\n * You can add your own fields to the export dialog. To make such field value acessible to the feature it should follow\n * naming pattern - it should have `ref` config ending with `Field`, see other fields for reference - `orientationField`,\n * `columnsField`, etc. Fields not matching this pattern are ignored. When values are collected from the dialog, `Field`\n * part of the widget reference is removed, so `orientationField` becomes `orientation`, `fooField` becomes `foo`, etc.\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         pdfExport : {\n *             exportDialog : {\n *                 items : {\n *                     // This field gets into export config\n *                     fooField : {\n *                         type : 'text',\n *                         label : 'Foo',\n *                         value : 'FOO'\n *                     },\n *\n *                     // This one does not, because name doesn't end with `Field`\n *                     bar : {\n *                         type : 'text',\n *                         label : 'Bar',\n *                         value : 'BAR'\n *                     },\n *\n *                     // Add a container widget to wrap some fields together\n *                     myContainer : {\n *                         type : 'container',\n *                         items : {\n *                             // This one gets into config too despite the nesting level\n *                             bazField : {\n *                                 type : 'text',\n *                                 label : 'Baz',\n *                                 value : 'BAZ'\n *                             }\n *                         }\n *                     }\n *                 }\n *             }\n *         }\n *     }\n * });\n *\n * // Assuming export dialog is opened and export triggered with default values\n * // you can receive custom field values here\n * grid.on({\n *     beforePdfExport({ config }) {\n *         console.log(config.foo) // 'FOO'\n *         console.log(config.bar) // undefined\n *         console.log(config.baz) // 'BAZ'\n *     }\n * });\n * ```\n *\n * ## Configuring widgets at runtime\n *\n * If you don't know column ids before grid instantiation or you want a flexible config, you can change widget values\n * before dialog pops up:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     columns : [\n *         { id : 'name', text : 'Name', field : 'name' },\n *         { id : 'age', text : 'Age', field : 'age' },\n *         { id : 'city', text : 'City', field : 'city', hidden : true }\n *     ],\n *     features : {\n *         pdfExport : true\n *     }\n * });\n *\n * // Such listener would ignore autoSelectVisibleColumns config. Similar to the snippet\n * // above this will show Name and City columns\n * scheduler.features.pdfExport.exportDialog.on({\n *     beforeShow() {\n *         this.widgetMap.columnsField.value = ['age', 'city']\n *     }\n * });\n * ```\n *\n * @extends Grid/view/export/ExportDialog\n */\nexport default class SchedulerExportDialog extends GridExportDialog {\n    //region Config\n    static get $name() {\n        return 'SchedulerExportDialog';\n    }\n    static get type() {\n        return 'schedulerexportdialog';\n    }\n    static get configurable() {\n        return {\n            defaults : {\n                localeClass : this\n            },\n            items : {\n                scheduleRangeField : {\n                    type   : 'schedulerangecombo',\n                    label  : 'L{Schedule range}',\n                    name   : 'scheduleRange',\n                    value  : 'completeview',\n                    weight : 150,\n                    onChange({ value }) {\n                        this.parent.widgetMap.rangesContainer.hidden = value !== ScheduleRange.daterange;\n                    }\n                },\n                rangesContainer : {\n                    type     : 'container',\n                    flex     : '1 0 100%',\n                    weight   : 151,\n                    hidden   : true,\n                    defaults : {\n                        localeClass : this\n                    },\n                    items : {\n                        filler : {\n                            // Filler widget to align date fields\n                            weight : 0,\n                            type   : 'widget',\n                            style  : 'margin-inline-end: -1em;'\n                        },\n                        rangeStartField : {\n                            type       : 'datefield',\n                            label      : 'L{Export from}',\n                            name       : 'rangeStart',\n                            labelWidth : '3em',\n                            flex       : '1 0 25%',\n                            weight     : 10,\n                            onChange({ value }) {\n                                this.parent.widgetMap.rangeEndField.min = DateHelper.add(value, 1, 'd');\n                            }\n                        },\n                        rangeEndField : {\n                            type       : 'datefield',\n                            label      : 'L{Export to}',\n                            name       : 'rangeEnd',\n                            labelWidth : '1em',\n                            flex       : '1 0 25%',\n                            weight     : 30,\n                            onChange({ value }) {\n                                this.parent.widgetMap.rangeStartField.max = DateHelper.add(value, -1, 'd');\n                            }\n                        }\n                    }\n                }\n            }\n        };\n    }\n    //endregion\n    onLocaleChange() {\n        const\n            labelWidth = this.L('labelWidth');\n        this.width = this.L('L{width}');\n        this.items.forEach(widget => {\n            if (widget instanceof Field) {\n                widget.labelWidth = labelWidth;\n            }\n            else if (widget.ref === 'rangesContainer') {\n                widget.items[0].width = labelWidth;\n            }\n        });\n    }\n    applyInitialValues(config) {\n        super.applyInitialValues(config);\n        const\n            me                   = this,\n            {\n                client,\n                scheduleRange\n            }                    = config,\n            items                = config.items = config.items || {},\n            scheduleRangeField   = items.scheduleRangeField = items.scheduleRangeField || {},\n            rangesContainer      = items.rangesContainer = items.rangesContainer || {},\n            rangesContainerItems = rangesContainer.items = rangesContainer.items || {},\n            filler               = rangesContainerItems.filler = rangesContainerItems.filler || {},\n            rangeStartField      = rangesContainerItems.rangeStartField = rangesContainerItems.rangeStartField || {},\n            rangeEndField        = rangesContainerItems.rangeEndField = rangesContainerItems.rangeEndField || {};\n        filler.width = me.L('labelWidth');\n        scheduleRangeField.value = scheduleRangeField.value || scheduleRange;\n        if (scheduleRangeField.value === ScheduleRange.daterange) {\n            rangesContainer.hidden = false;\n        }\n        const rangeStart = rangeStartField.value = rangeStartField.value || client.startDate;\n        rangeStartField.max = DateHelper.max(client.startDate, DateHelper.add(client.endDate, -1, 'd'));\n        let rangeEnd = rangeEndField.value || client.endDate;\n        // This is the only place where we can validate date range before it gets to export feature\n        if (rangeEnd <= rangeStart) {\n            rangeEnd = DateHelper.add(rangeStart, 1, 'd');\n        }\n        rangeEndField.value = rangeEnd;\n        rangeEndField.min   = DateHelper.min(client.endDate, DateHelper.add(client.startDate, 1, 'd'));\n    }\n}\nSchedulerExportDialog._$name = 'SchedulerExportDialog';", "import GridSinglePageExporter from '../../../../Grid/feature/export/exporter/SinglePageExporter.js';\nimport SchedulerExporterMixin from './SchedulerExporterMixin.js';\n/**\n * @module Scheduler/feature/export/exporter/SinglePageExporter\n */\n/**\n * A single page exporter. Used by the {@link Scheduler.feature.export.PdfExport} feature to export to single page.\n * Content will be scaled in both directions to fit the page.\n *\n * You do not need to use this class directly.\n *\n * ### Extending exporter\n *\n * ```javascript\n * class MySinglePageExporter extends SinglePageExporter {\n *     // type is required for exporter\n *     static get type() {\n *         return 'mysinglepageexporter';\n *     }\n *\n *     get stylesheets() {\n *         const stylesheets = super.stylesheets;\n *\n *         stylesheets.forEach(styleNodeOrLinkTag => doSmth(styleNodeOrLinkTag))\n *\n *         return stylesheets;\n *     }\n * }\n *\n * const scheduler = new Scheduler({\n *     features : {\n *         pdfExport : {\n *             // this export feature is configured with only one exporter\n *             exporters : [MySinglePageExporter]\n *         }\n *     }\n * });\n *\n * // run export with the new exporter\n * scheduler.features.pdfExport.export({ exporter : 'mysinglepageexporter' });\n * ```\n *\n * @classtype singlepage\n * @extends Grid/feature/export/exporter/SinglePageExporter\n *\n * @typings Grid.feature.export.exporter.SinglePageExporter -> Grid.feature.export.exporter.GridSinglePageExporter\n */\nexport default class SinglePageExporter extends SchedulerExporterMixin(GridSinglePageExporter) {\n    static get $name() {\n        return 'SinglePageExporter';\n    }\n    static get type() {\n        return 'singlepage';\n    }\n    // We should not collect dependencies per each page, instead we'd render them once\n    collectDependencies() {}\n    positionRows(rows, config) {\n        const\n            resources   = [],\n            events      = [],\n            translateRe = /translate\\((\\d+.?\\d*)px, (\\d+.?\\d*)px\\)/,\n            topRe       = /top:.+?px/;\n        if (config.enableDirectRendering) {\n            rows.forEach(([html, , , eventsHtml]) => {\n                resources.push(html);\n                eventsHtml && Array.from(eventsHtml.entries()).forEach(([key, [html, box, extras = []]]) => {\n                    // Store event box to render dependencies later\n                    this.exportMeta.eventsBoxes.set(String(key), box);\n                    events.push(html + extras.join(''));\n                });\n            });\n        }\n        else {\n            let currentTop = 0;\n            // In case of variable row height row vertical position is not guaranteed to increase\n            // monotonously. Position row manually instead\n            rows.forEach(([html, top, height, eventsHtml]) => {\n                // Adjust row vertical position by changing `translate` style\n                resources.push(html.replace(translateRe, `translate($1px, ${currentTop}px)`));\n                const rowTopDelta = currentTop - top;\n                eventsHtml && Array.from(eventsHtml.entries()).forEach(([key, [html, box]]) => {\n                    // Fix event vertical position according to the row top\n                    box.translate(0, rowTopDelta);\n                    // Store event box to render dependencies later\n                    this.exportMeta.eventsBoxes.set(String(key), box);\n                    // Adjust event vertical position by replacing `top` style\n                    events.push(html.replace(topRe, `top: ${box.y}px`));\n                });\n                currentTop += height;\n            });\n        }\n        return { resources, events };\n    }\n}\nSinglePageExporter._$name = 'SinglePageExporter';", "import GridPdfExport from '../../../Grid/feature/export/PdfExport.js';\nimport GridFeatureManager from '../../../Grid/feature/GridFeatureManager.js';\nimport SchedulerExportDialog from '../../view/export/SchedulerExportDialog.js';\nimport SinglePageExporter from './exporter/SinglePageExporter.js';\nimport MultiPageExporter from './exporter/MultiPageExporter.js';\nimport MultiPageVerticalExporter from './exporter/MultiPageVerticalExporter.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\n/**\n * @module Scheduler/feature/export/PdfExport\n */\n/**\n * Generates PDF/PNG files from the Scheduler component.\n *\n * <img src=\"Scheduler/export-dialog.png\" style=\"max-width : 300px\" alt=\"Scheduler Export dialog\">\n *\n * **NOTE:** Server side is required to make export work!\n *\n * Check out PDF Export Server documentation and installation steps [here](https://github.com/bryntum/pdf-export-server#pdf-export-server)\n *\n * When your server is up and running, it listens to requests. The Export feature sends a request to the specified URL\n * with the HTML fragments. The server generates a PDF (or PNG) file and returns a download link (or binary, depending\n * on {@link #config-sendAsBinary} config). Then the Export feature opens the link in a new tab and the file is\n * automatically downloaded by your browser. This is configurable, see {@link #config-openAfterExport} config.\n *\n * The {@link #config-exportServer} URL must be configured. The URL can be localhost if you start the server locally,\n * or your remote server address.\n *\n * ## Usage\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     features : {\n *         pdfExport : {\n *             exportServer : 'http://localhost:8080' // Required\n *         }\n *     }\n * })\n *\n * // Opens popup allowing to customize export settings\n * scheduler.features.pdfExport.showExportDialog();\n *\n * // Simple export\n * scheduler.features.pdfExport.export({\n *     // Required, set list of column ids to export\n *     columns : scheduler.columns.map(c => c.id)\n * }).then(result => {\n *     // Response instance and response content in JSON\n *     let { response, responseJSON } = result;\n * });\n * ```\n *\n * Appends configs related to exporting time axis: {@link #config-scheduleRange}, {@link #config-rangeStart},\n * {@link #config-rangeEnd}\n *\n * ## Loading resources\n *\n * If you face a problem with loading resources when exporting, the cause might be that the application and the export server are hosted on different servers.\n * This is due to [Cross-Origin Resource Sharing](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) (CORS). There are 2 options how to handle this:\n * - Allow cross-origin requests from the server where your export is hosted to the server where your application is hosted;\n * - Copy all resources keeping the folder hierarchy from the server where your application is hosted to the server where your export is hosted\n * and setup paths using {@link Grid.feature.export.PdfExport#config-translateURLsToAbsolute} config and configure the export server to give access to the path:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     features : {\n *         pdfExport : {\n *             exportServer : 'http://localhost:8080',\n *             // '/resources' is hardcoded in WebServer implementation\n *             translateURLsToAbsolute : 'http://localhost:8080/resources'\n *         }\n *     }\n * })\n * ```\n *\n * ```javascript\n * // Following path would be served by this address: http://localhost:8080/resources/\n * node ./src/server.js -h 8080 -r web/application/styles\n * ```\n *\n * where `web/application/styles` is a physical root location of the copied resources, for example:\n *\n * <img src=\"Grid/export-server-resources.png\" style=\"max-width : 500px\" alt=\"Export server structure with copied resources\" />\n *\n * This feature is **disabled** by default.\n * For info on enabling it, see {@link Grid/view/mixin/GridFeatures}.\n *\n * @extends Grid/feature/export/PdfExport\n * @classtype pdfExport\n * @feature\n *\n * @typings Grid.feature.export.PdfExport -> Grid.feature.export.GridPdfExport\n */\nexport default class PdfExport extends GridPdfExport {\n    static get $name() {\n        return 'PdfExport';\n    }\n    static get defaultConfig() {\n        return {\n            exporters     : [SinglePageExporter, MultiPageExporter, MultiPageVerticalExporter],\n            dialogClass   : SchedulerExportDialog,\n            /**\n             * Specifies how to export time span.\n             *  * completeview - Complete configured time span, from scheduler start date to end date\n             *  * currentview  - Currently visible time span\n             *  * daterange    - Use specific date range, provided additionally in config. See {@link #config-rangeStart}/\n             *  {@link #config-rangeEnd}\n             * @config {'completeview'|'currentview'|'daterange'}\n             * @default\n             * @category Export file config\n             */\n            scheduleRange : 'completeview',\n            /**\n             * Exported time span range start. Used with `daterange` config of the {@link #config-scheduleRange}\n             * @config {Date}\n             * @category Export file config\n             */\n            rangeStart : null,\n            /**\n             * Returns the instantiated export dialog widget as configured by {@link #config-exportDialog}\n             * @member {Scheduler.view.export.SchedulerExportDialog} exportDialog\n             */\n            /**\n             * A config object to apply to the {@link Scheduler.view.export.SchedulerExportDialog} widget.\n             * @config {SchedulerExportDialogConfig} exportDialog\n             */\n            /**\n             * Exported time span range end. Used with `daterange` config of the {@link #config-scheduleRange}\n             * @config {Date}\n             * @category Export file config\n             */\n            rangeEnd : null\n        };\n    }\n    get defaultExportDialogConfig() {\n        return ObjectHelper.copyProperties(super.defaultExportDialogConfig, this, ['scheduleRange']);\n    }\n    buildExportConfig(config) {\n        config = super.buildExportConfig(config);\n        const {\n            scheduleRange,\n            rangeStart,\n            rangeEnd\n        } = this;\n        // Time axis is filtered from UI, need to append it\n        if (config.columns && !config.columns.find(col => col.type === 'timeAxis')) {\n            config.columns.push(config.client.timeAxisColumn.id);\n        }\n        return ObjectHelper.assign({\n            scheduleRange,\n            rangeStart,\n            rangeEnd\n        }, config);\n    }\n}\nPdfExport._$name = 'PdfExport'; GridFeatureManager.registerFeature(PdfExport, false, 'Scheduler');\n"],
  "mappings": "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",
  "names": ["ResourceInfoColumn", "Column", "VersionHelper", "args", "AvatarRendering", "imageName", "resourceImagePath", "parts", "urlPart", "joined", "StringHelper", "resourceRecord", "value", "me", "showImage", "showRole", "showMeta", "showEventCount", "grid", "timeAxis", "resourceImageExtension", "defaultResourceImageName", "roleField", "count", "imageUrl", "record", "cellElement", "isExport", "result", "ColumnStore", "sides", "editorAlign", "side", "client", "topBottom", "layoutModes", "layoutSides", "Labels", "InstancePlugin", "scheduler", "config", "top", "bottom", "classList", "event", "target", "labelConfig", "editor", "field", "eventRecord", "Editor", "after", "right", "before", "left", "labelSpec", "eventStore", "resourceStore", "taskStore", "id", "fieldDef", "fieldFound", "EventHelper", "disable", "data", "configs", "recordType", "renderer", "thisObj", "domConfig", "eventRecordProperty", "DateHelper", "pxPerMS", "html", "length", "DomHelper", "element", "DomSync", "ms", "_a", "GridFeatureManager", "RowReorder", "TransactionalFeature_default", "__publicField", "TimelineSummary", "Summary", "project", "timeline", "sizeProp", "colCfg", "summaryContainer", "Tooltip", "activeTarget", "col", "isConfiguring", "ScheduleRange", "immediatePromise", "SchedulerExporterMixin_default", "base", "index", "rowManager", "scrollable", "oldY", "resolve", "detacher", "scrollTop", "date", "scrollFired", "promises", "x", "clear", "clonedEl", "name", "currentOrientation", "includeTimeline", "startDate", "endDate", "exportMeta", "fgCanvasEl", "timeAxisEl", "horizontalPages", "totalPages", "headerRow", "columnLinesCanvas", "timeRangesHeaderCanvas", "timeRangesBodyCanvas", "svgCanvasEl", "waitForHorizontalScroll", "rows", "enableDirectRendering", "timeView", "pageRangeStart", "pageRangeEnd", "rangeProcessed", "rangeStart", "rangeEnd", "horizontalPosition", "pageWidth", "subGrids", "pageStartX", "pageEndX", "normalGridX", "scrollLeft", "multiplier", "headerId", "footerId", "canvasEl", "el", "timeAxisHeaders", "headerRows", "headersMap", "timeRanges", "headerCanvas", "bodyCanvas", "columnLines", "lineEl", "lineIndex", "addedRows", "normalRows", "row", "_b", "rowConfig", "resource", "eventsMap", "Rectangle", "timeRange", "elId", "start", "end", "timeAxisView", "targetElement", "resourceLayout", "eventDOMConfigs", "eventId", "width", "height", "domConfigs", "children", "i", "timeAxisPlaceholders", "columnLinesPlaceholder", "timeRangesHeaderPlaceholder", "timeRangesBodyPlaceholder", "placeHolder", "eventsPlaceholder", "mergedCellsHtml", "placeHolderText", "resources", "events", "contentHtml", "headers", "lineElements", "eventsBoxes", "box", "dependencies", "dependencyFeature", "draw", "dependency", "fromBox", "toBox", "dependenciesPlaceholder", "placeholder", "MultiPageExporter", "eventsHtml", "key", "extras", "MultiPageVerticalExporter", "ScheduleRangeCombo", "Combo", "text", "SchedulerExportDialog", "ExportDialog", "labelWidth", "widget", "Field", "scheduleRange", "items", "scheduleRangeField", "rangesContainer", "rangesContainerItems", "filler", "rangeStartField", "rangeEndField", "SinglePageExporter", "translateRe", "topRe", "currentTop", "rowTopDelta", "PdfExport", "ObjectHelper"]
}
