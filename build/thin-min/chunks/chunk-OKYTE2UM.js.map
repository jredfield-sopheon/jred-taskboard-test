{
  "version": 3,
  "sources": ["../../../../Core/lib/Core/mixin/Hoverable.js", "../../../../Core/lib/Core/util/drag/DragTipProxy.js", "../../../../Core/lib/Core/widget/mixin/Minifiable.js"],
  "sourcesContent": ["import Delayable from './Delayable.js';\nimport DomClassList from '../helper/util/DomClassList.js';\nimport EventHelper from '../helper/EventHelper.js';\n/**\n * @module Core/mixin/Hoverable\n */\nconst\n    EDGES = {\n        e : 'b-hover-edge',\n        t : 'b-hover-top',\n        r : 'b-hover-right',\n        b : 'b-hover-bottom',\n        l : 'b-hover-left'\n    },\n    EDGE_CLASSES = {\n        [EDGES.e] : 1,\n        [EDGES.t] : 1,\n        [EDGES.r] : 1,\n        [EDGES.b] : 1,\n        [EDGES.l] : 1\n    },\n    ZONES = {\n        t  : [EDGES.e, EDGES.t],\n        r  : [EDGES.e, EDGES.r],\n        b  : [EDGES.e, EDGES.b],\n        l  : [EDGES.e, EDGES.l],\n        tr : [EDGES.e, EDGES.t, EDGES.r],\n        bl : [EDGES.e, EDGES.b, EDGES.l],\n        tl : [EDGES.e, EDGES.t, EDGES.l],\n        br : [EDGES.e, EDGES.b, EDGES.r]\n    };\n/**\n * This mixin provides mouse hover tracking.\n *\n * ```javascript\n *  class Tracker extends Base.mixin(Hoverable) {\n *      hoverEnter(leaving) {\n *          // this.hoverTarget has been entered from \"leaving\"\n *          // this.hoverTarget will never be null, but leaving may be null\n *      }\n *\n *      hoverLeave(leaving) {\n *          // this.hoverTarget has been entered from \"leaving\"\n *          // this.hoverTarget may be null, but leaving will never be null\n *      }\n *\n *      hoverMove(event) {\n *          // called when a mousemove is made within a hover target\n *          // this.hoverTarget will never be null\n *      }\n *  }\n *\n *  let tracker = new Tracker({\n *      hoverRootElement : document.body,\n *      hoverSelector    : '.hoverable'\n *  });\n * ```\n *\n * @mixin\n * @internal\n */\nexport default Target => class Hoverable extends Target.mixin(Delayable) {\n    static get $name() {\n        return 'Hoverable';\n    }\n    //region Configs\n    static get configurable() {\n        return {\n            /**\n             * A CSS class to add to the {@link #config-hoverTarget target} element.\n             * @config {String}\n             */\n            hoverCls : null,\n            /**\n             * A CSS class to add to the {@link #config-hoverTarget target} element to enable CSS animations. This class\n             * is added after calling {@link #function-hoverEnter}.\n             * @config {String}\n             */\n            hoverAnimationCls : null,\n            /**\n             * A CSS class to add to the {@link #config-hoverRootElement root} element.\n             * @config {String}\n             */\n            hoverRootCls : null,\n            /**\n             * A CSS class to add to the {@link #config-hoverRootElement root} element when there is an active\n             * {@link #config-hoverTarget target}.\n             * @config {String}\n             */\n            hoverRootActiveCls : null,\n            /**\n             * The number of milliseconds to delay notification of changes in the {@link #config-hoverTarget}.\n             * @config {Number}\n             */\n            hoverDelay : null,\n            /**\n             * The current element that the cursor is inside as determined by `mouseover` and `mouseout`. Changes in\n             * this config trigger re-evaluation of the {@link #config-hoverSelector} to determine if there is a\n             * {@link #config-hoverTarget}.\n             * @config {HTMLElement}\n             * @private\n             */\n            hoverElement : null,\n            /**\n             * An element to ignore. Mouse entry into this element will not trigger a change in either of the\n             * {@link #config-hoverElement} or {@link #config-hoverTarget} values.\n             * @config {HTMLElement}\n             */\n            hoverIgnoreElement : null,\n            /**\n             * This property is a string containing one character for each edge that is hoverable. For example, a\n             * value of \"tb\" indicates that the top and bottom edges are hoverable.\n             * @config {String}\n             */\n            hoverEdges : null,\n            /**\n             * When {@link #config-hoverEdges} is used, this value determines the size (in pixels) of the edge. When\n             * the cursor is within this number of pixels of an edge listed in `hoverEdges`, the appropriate CSS class\n             * is added to the {@link #config-hoverTarget}:\n             *\n             *  - `b-hover-top`\n             *  - `b-hover-right`\n             *  - `b-hover-bottom`\n             *  - `b-hover-left`\n             *\n             * Depending on the values of `hoverEdges`, it is possible to have at most two of these classes present at\n             * any one time (when the cursor is in a corner).\n             * @config {Number}\n             * @default\n             */\n            hoverEdgeSize : 10,\n            /**\n             * The outer element where hover tracking will operate (attach events to it and use as root limit when\n             * looking for ancestors).\n             *\n             * A common choice for this will be `document.body`.\n             * @config {HTMLElement}\n             */\n            hoverRootElement : {\n                $config : 'nullify',\n                value : null\n            },\n            /**\n             * A selector for the [closest](https://developer.mozilla.org/en-US/docs/Web/API/Element/closest) API to\n             * determine the actual element of interest. This selector is used to process changes to the\n             * {@link #config-hoverElement} to determine the {@link #config-hoverTarget}.\n             * @config {String}\n             */\n            hoverSelector : null,\n            /**\n             * The currently active hover target. This will be the same as {@link #config-hoverElement} unless there is\n             * a {@link #config-hoverSelector}.\n             * @config {HTMLElement}\n             */\n            hoverTarget : {\n                $config : 'nullify',\n                value : null\n            },\n            /**\n             * Set to `true` to include tracking of `mousemove` events for the active {@link #config-hoverTarget}. This\n             * is required for the {@link #function-hoverMove} method to be called.\n             * @config {Boolean}\n             * @default false\n             */\n            hoverTrack : null,\n            /**\n             * A string value containing one character per active edge (e.g., \"tr\").\n             * @config {String}\n             * @private\n             */\n            hoverZone : null\n        };\n    }\n    static get delayable() {\n        return {\n            setHoverTarget : 0\n        };\n    }\n    //endregion\n    //region State Handling\n    /**\n     * This method is called when the cursor enters the {@link #config-hoverTarget}. The `hoverTarget` will not be\n     * `null`.\n     * @param {HTMLElement} leaving The element that was previously the `hoverTarget`. This value may be null.\n     */\n    hoverEnter(leaving) {\n        // template\n    }\n    /**\n     * This method should return true if the given `element` should be ignored. By default, this is `true` if the\n     * `element` is contained inside the {@link #config-hoverIgnoreElement}.\n     * @param {HTMLElement} element\n     * @returns {Boolean}\n     * @protected\n     */\n    hoverIgnore(element) {\n        return this.hoverIgnoreElement?.contains(element);\n    }\n    /**\n     * This method is called when the cursor leaves the {@link #config-hoverTarget}. The `hoverTarget` may be `null`\n     * or refer to the new `hoverTarget`\n     * @param {HTMLElement} leaving The element that was previously the `hoverTarget`. This value will not be null.\n     */\n    hoverLeave(leaving) {\n        // template\n    }\n    /**\n     * This method is called when the mouse moves within a {@link #config-hoverTarget}, but only if enabled by the\n     * {@link #config-hoverTrack} config.\n     * @param {Event} event\n     */\n    hoverMove(event) {\n        // template\n    }\n    //endregion\n    //region Events\n    onHoverMouseMove(event) {\n        const\n            me = this,\n            { hoverEdges, hoverEdgeSize, hoverTarget } = me;\n        if (hoverTarget) {\n            if (hoverEdges) {\n                const\n                    { top, left, width, height, right, bottom } = hoverTarget.getBoundingClientRect(),\n                    { clientX, clientY } = event,\n                    centerX = left + width / 2,\n                    centerY = top + height / 2,\n                    t = clientY <  (hoverEdgeSize ? top    + hoverEdgeSize : centerY),\n                    r = clientX >= (hoverEdgeSize ? right  - hoverEdgeSize : centerX),\n                    b = clientY >= (hoverEdgeSize ? bottom - hoverEdgeSize : centerY),\n                    l = clientX <  (hoverEdgeSize ? left   + hoverEdgeSize : centerX),\n                    tb = ((t || b) ? (t ? 't' : 'b') : ''),\n                    rl = ((r || l) ? (r ? 'r' : 'l') : '');\n                me.hoverZone = (hoverEdges.includes(tb) ? tb : '') + (hoverEdges.includes(rl) ? rl : '');\n            }\n            me.hoverEvent = event;\n            me.hoverTrack && me.hoverMove(event);\n        }\n    }\n    onHoverMouseOver(event) {\n        this.hoverEvent = event;\n        this.hoverElement = event.target;\n    }\n    onHoverMouseOut(event) {\n        this.hoverEvent = event;\n        this.hoverElement = event.relatedTarget;\n    }\n    //endregion\n    //region Configs\n    // hoverDelay\n    updateHoverDelay(delay) {\n        this.setHoverTarget.delay = delay;\n    }\n    // hoverEdges\n    changeHoverEdges(edges) {\n        return (edges === true) ? 'trbl' : (edges || '').replace('v', 'tb').replace('h', 'lr');\n    }\n    updateHoverEdges() {\n        this.syncHoverListeners();\n    }\n    // hoverElement\n    changeHoverElement(element) {\n        if (!this.hoverIgnore(element)) {\n            return element;\n        }\n    }\n    updateHoverElement(hoverEl) {\n        const { hoverSelector } = this;\n        if (hoverSelector) {\n            hoverEl = hoverEl?.closest(hoverSelector);\n        }\n        this.setHoverTarget(hoverEl);  // this may be delayed\n    }\n    // hoverRootElement\n    updateHoverRootElement(rootEl, was) {\n        const { hoverRootCls } = this;\n        if (hoverRootCls) {\n            was?.classList.remove(hoverRootCls);\n            rootEl?.classList.add(hoverRootCls);\n        }\n        this.syncHoverListeners();\n    }\n    // hoverTarget\n    changeHoverTarget(hoverEl, was) {\n        if (was) {\n            this.hoverZone = null;\n        }\n        return hoverEl;\n    }\n    updateHoverTarget(hoverEl, was) {\n        const\n            me = this,\n            { hoverCls, hoverAnimationCls, hoverRootActiveCls, hoverRootElement } = me;\n        if (hoverRootActiveCls) {\n            hoverRootElement?.classList[hoverEl ? 'add' : 'remove'](hoverRootActiveCls);\n        }\n        if (was) {\n            hoverCls && was.classList.remove(hoverCls);\n            hoverAnimationCls && was.classList.remove(hoverAnimationCls);\n            me.hoverLeave(was);\n        }\n        if (hoverEl) {\n            hoverCls && hoverEl.classList.add(hoverCls);\n            me.hoverEnter(was);\n            if (me.hoverTrack) {\n                me.hoverMove(me.hoverEvent);\n            }\n            if (hoverAnimationCls) {\n                hoverEl.getBoundingClientRect();   // force layout so next change starts animation\n                hoverEl.classList.add(hoverAnimationCls);\n            }\n        }\n    }\n    // hoverTrack\n    updateHoverTrack() {\n        this.syncHoverListeners();\n    }\n    // hoverZone\n    updateHoverZone(zone) {\n        const { hoverAnimationCls, hoverTarget } = this;\n        if (hoverTarget) {\n            const\n                { className } = hoverTarget,\n                cls = DomClassList.change(className, /* add= */zone ? ZONES[zone] : null, /* remove= */EDGE_CLASSES);\n            if (className !== cls) {\n                hoverTarget.className = cls;\n                if (zone && hoverAnimationCls) {\n                    hoverTarget.classList.remove(hoverAnimationCls);\n                    hoverTarget.getBoundingClientRect();   // force layout so next change starts animation\n                    hoverTarget.classList.add(hoverAnimationCls);\n                }\n            }\n        }\n    }\n    //endregion\n    //region Misc\n    setHoverTarget(target) {\n        // this method runs later based on the hoverDelay\n        this.hoverTarget = target;\n    }\n    syncHoverListeners() {\n        const\n            me = this,\n            element = me.hoverRootElement,\n            listeners = {\n                element,\n                thisObj   : me,\n                mouseover : 'onHoverMouseOver',\n                mouseout  : 'onHoverMouseOut'\n            };\n        if (me.hoverTrack || me.hoverEdges) {\n            listeners.mousemove = 'onHoverMouseMove';\n        }\n        me._hoverRootDetacher?.();\n        me._hoverRootDetacher = element && EventHelper.on(listeners);\n    }\n    //endregion\n};\n", "import DragProxy from './DragProxy.js';\nimport Widget from '../../widget/Widget.js';\nimport Rectangle from '../../helper/util/Rectangle.js';\nimport '../../widget/Tooltip.js';\n/**\n * @module Core/util/drag/DragTipProxy\n */\n/**\n * This drag proxy manages a {@link #config-tooltip} (or derived class) and aligns the tooltip to the current drag\n * position adjusted by the {@link #config-align} config.\n * @extends Core/util/drag/DragProxy\n * @classtype tip\n * @internal\n */\nexport default class DragTipProxy extends DragProxy {\n    static get type() {\n        return 'tip';\n    }\n    static get configurable() {\n        return {\n            /**\n             * Controls how the tooltip will be aligned to the current drag position.\n             *\n             * See {@link Core.helper.util.Rectangle#function-alignTo} for details.\n             * @config {String}\n             * @default\n             */\n            align : 't10-b50',\n            /**\n             * The number of pixels to offset from the drag position.\n             * @config {Number}\n             * @default\n             */\n            offset : 20,\n            /**\n             * The tooltip to be shown, hidden and repositioned to track the drag position.\n             * @config {Core.widget.Tooltip}\n             */\n            tooltip : {\n                $config : ['lazy', 'nullify'],\n                value : {\n                    type : 'tooltip'\n                }\n            }\n        };\n    }\n    open() {\n        this.getConfig('tooltip');  // trigger creation\n    }\n    close() {\n        this.tooltip?.hide();\n    }\n    dragMove(drag) {\n        const\n            { offset, tooltip } = this,\n            { event } = drag;\n        if (tooltip) {\n            if (!tooltip.isVisible) {\n                tooltip.show();\n            }\n            tooltip.alignTo({\n                align  : this.align,\n                target : new Rectangle(event.clientX - offset, event.clientY - offset, offset * 2, offset * 2)\n            });\n        }\n    }\n    changeTooltip(config, existing) {\n        return Widget.reconfigure(existing, config, /* owner = */ this);\n    }\n}\nDragTipProxy.initClass();\nDragTipProxy._$name = 'DragTipProxy';", "import Base from '../../Base.js';\n/**\n * @module Core/widget/mixin/Minifiable\n */\n/**\n * Mixin for widgets that can present in a full and minified form. This behavior is used in\n * {@link Core.widget.Toolbar#config-overflow} handling.\n *\n * @mixin\n * @internal\n */\nexport default Target => class Minifiable extends (Target || Base) {\n    static $name = 'Minifiable';\n    static configurable = {\n        /**\n         * Set to `false` to prevent this widget from assuming its {@link #config-minified} form automatically (for\n         * example, due to {@link Core.widget.Toolbar#config-overflow} handling.\n         *\n         * When this value is `true` (the default), the minifiable widget's {@link #config-minified} config may be\n         * set to `true` to reduce toolbar overflow.\n         *\n         * @config {Boolean}\n         * @default\n         */\n        minifiable : true,\n        /**\n         * Set to `true` to present this widget in its minimal form.\n         * @config {Boolean}\n         * @default false\n         */\n        minified : null\n    };\n    compose() {\n        const { minified } = this;\n        return {\n            class : {\n                'b-minified' : minified\n            }\n        };\n    }\n    get widgetClass() {}\n};\n"],
  "mappings": "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",
  "names": ["EDGES", "EDGE_CLASSES", "ZONES", "Hoverable_default", "Target", "Delayable_default", "leaving", "element", "_a", "event", "me", "hoverEdges", "hoverEdgeSize", "hoverTarget", "top", "left", "width", "height", "right", "bottom", "clientX", "clientY", "centerX", "centerY", "t", "r", "b", "l", "tb", "rl", "delay", "edges", "hoverEl", "hoverSelector", "rootEl", "was", "hoverRootCls", "hoverCls", "hoverAnimationCls", "hoverRootActiveCls", "hoverRootElement", "zone", "className", "cls", "DomClassList", "target", "listeners", "EventHelper", "DragTipProxy", "DragProxy", "drag", "offset", "tooltip", "Rectangle", "config", "existing", "Widget", "Minifiable_default", "Base", "minified", "__publicField"]
}
