{
  "version": 3,
  "sources": ["../../../../Scheduler/lib/Scheduler/data/util/recurrence/RecurrenceLegend.js", "../../../../Scheduler/lib/Scheduler/feature/base/EditBase.js", "../../../../Scheduler/lib/Scheduler/view/EventEditor.js", "../../../../Scheduler/lib/Scheduler/view/recurrence/field/RecurrenceCombo.js", "../../../../Scheduler/lib/Scheduler/view/recurrence/RecurrenceLegendButton.js", "../../../../Scheduler/lib/Scheduler/view/recurrence/RecurrenceEditor.js", "../../../../Scheduler/lib/Scheduler/feature/mixin/RecurringEventEdit.js", "../../../../Scheduler/lib/Scheduler/widget/ResourceCombo.js", "../../../../Scheduler/lib/Scheduler/feature/EventEdit.js", "../../../../Scheduler/lib/Scheduler/widget/ResourceFilter.js", "../../../../Scheduler/lib/Scheduler/widget/SchedulerDatePicker.js"],
  "sourcesContent": ["import Localizable from '../../../../Core/localization/Localizable.js';\nimport DayRuleEncoder from './RecurrenceDayRuleEncoder.js';\nimport DateHelper from '../../../../Core/helper/DateHelper.js';\n/**\n * @module Scheduler/data/util/recurrence/RecurrenceLegend\n */\n/**\n * A static class allowing to get a human readable description of the provided recurrence.\n *\n * ```javascript\n * const event = new EventModel({\n *      startDate : new Date(2018, 6, 3),\n *      endDate   : new Date(2018, 6, 4)\n * });\n * const recurrence = new RecurrenceModel({\n *      frequency : 'WEEKLY',\n *      days : ['MO', 'TU', 'WE']\n * });\n * event.recurrence = recurrence;\n * // \"Weekly on Mon, Tue and Wed\"\n * RecurrenceLegend.getLegend(recurrence);\n * ```\n *\n * @mixes Core/localization/Localizable\n */\nexport default class RecurrenceLegend extends Localizable() {\n    static get $name() {\n        return 'RecurrenceLegend';\n    }\n    static get allDaysValueAsArray() {\n        return ['SU', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA'];\n    }\n    static get allDaysValue() {\n        return this.allDaysValueAsArray.join(',');\n    }\n    static get workingDaysValue() {\n        return this.allDaysValueAsArray.filter((day, index) => !DateHelper.nonWorkingDays[index]).join(',');\n    }\n    static get nonWorkingDaysValue() {\n        return this.allDaysValueAsArray.filter((day, index) => DateHelper.nonWorkingDays[index]).join(',');\n    }\n    /**\n     * Returns the provided recurrence description. The recurrence might be assigned to a timespan model,\n     * in this case the timespan start date should be provided in the second argument.\n     * @param {Scheduler.model.RecurrenceModel} recurrenceRecurrence model.\n     * @param {Date} [timeSpanStartDate] The recurring timespan start date. Can be omitted if the recurrence is assigned\n     * to a timespan model (and the timespan has {@link Scheduler.model.TimeSpan#field-startDate} filled). Then start\n     * date will be retrieved from the model.\n     * @returns {String} The recurrence description.\n     */\n    static getLegend(recurrence, timeSpanStartDate) {\n        const\n            me                                                         = this,\n            { timeSpan, interval, days, monthDays, months, positions } = recurrence,\n            startDate                                                  = timeSpanStartDate || timeSpan.startDate,\n            tplData                                                    = { interval };\n        let fn;\n        switch (recurrence.frequency) {\n            case 'DAILY':\n                return interval === 1 ? me.L('L{Daily}') : me.L('L{Every {0} days}', tplData);\n            case 'WEEKLY':\n                if (days && days.length) {\n                    tplData.days = me.getDaysLegend(days);\n                }\n                else if (startDate) {\n                    tplData.days = DateHelper.getDayName(startDate.getDay());\n                }\n                return me.L(interval === 1 ? 'L{Weekly on {1}}' : 'L{Every {0} weeks on {1}}', tplData);\n            case 'MONTHLY':\n                if (days && days.length && positions && positions.length) {\n                    tplData.days = me.getDaysLegend(days, positions);\n                }\n                else if (monthDays && monthDays.length) {\n                    // sort dates to output in a proper order\n                    monthDays.sort((a, b) => a - b);\n                    tplData.days = me.arrayToText(monthDays);\n                }\n                else if (startDate) {\n                    tplData.days = startDate.getDate();\n                }\n                return me.L(interval === 1 ? 'L{Monthly on {1}}' : 'L{Every {0} months on {1}}', tplData);\n            case 'YEARLY':\n                if (days && days.length && positions && positions.length) {\n                    tplData.days = me.getDaysLegend(days, positions);\n                }\n                else {\n                    tplData.days = startDate.getDate();\n                }\n                if (months && months.length) {\n                    // sort months to output in a proper order\n                    months.sort((a, b) => a - b);\n                    if (months.length > 2) {\n                        fn = month => DateHelper.getMonthShortName(month - 1);\n                    }\n                    else {\n                        fn = month => DateHelper.getMonthName(month - 1);\n                    }\n                    tplData.months = me.arrayToText(months, fn);\n                }\n                else {\n                    tplData.months = DateHelper.getMonthName(startDate.getMonth());\n                }\n                return me.L(interval === 1 ? 'L{Yearly on {1} of {2}}' : 'L{Every {0} years on {1} of {2}}', tplData);\n        }\n    }\n    static getDaysLegend(days, positions) {\n        const\n            me      = this,\n            tplData = { position : '' };\n        let fn;\n        if (positions && positions.length) {\n            tplData.position = me.arrayToText(positions, position => me.L(`L{position${position}}`));\n        }\n        if (days.length) {\n            days.sort((a, b) => DayRuleEncoder.decodeDay(a)[0] - DayRuleEncoder.decodeDay(b)[0]);\n            switch (days.join(',')) {\n                case me.allDaysValue :\n                    tplData.days = me.L('L{day}');\n                    break;\n                case me.workingDaysValue :\n                    tplData.days = me.L('L{weekday}');\n                    break;\n                case me.nonWorkingDaysValue :\n                    tplData.days = me.L('L{weekend day}');\n                    break;\n                default :\n                    if (days.length > 2) {\n                        fn = day => DateHelper.getDayShortName(DayRuleEncoder.decodeDay(day)[0]);\n                    }\n                    else {\n                        fn = day => DateHelper.getDayName(DayRuleEncoder.decodeDay(day)[0]);\n                    }\n                    tplData.days = me.arrayToText(days, fn);\n            }\n        }\n        return me.L('L{daysFormat}', tplData);\n    }\n    // Converts array of items to a human readable list.\n    // For example: [1,2,3,4]\n    // to: \"1, 2, 3 and 4\"\n    static arrayToText(array, fn) {\n        if (fn) {\n            array = array.map(fn);\n        }\n        return array.join(', ').replace(/,(?=[^,]*$)/, this.L('L{ and }'));\n    }\n}\nRecurrenceLegend._$name = 'RecurrenceLegend';", "import InstancePlugin from '../../../Core/mixin/InstancePlugin.js';\nimport DateField from '../../../Core/widget/DateField.js';\nimport DateHelper from '../../../Core/helper/DateHelper.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\nimport Config from '../../../Core/Config.js';\nimport Objects from '../../../Core/helper/util/Objects.js';\n/**\n * @module Scheduler/feature/base/EditBase\n */\nconst\n    DH             = DateHelper,\n    scheduleFields = ['startDate', 'endDate', 'resource', 'recurrenceRule'],\n    makeDate       = (fields) => {\n        // single field, update record directly\n        if (fields.length === 1) return fields[0].value;\n        // two fields, date + time\n        else if (fields.length === 2) {\n            const\n                [date, time] = fields[0] instanceof DateField ? fields : fields.reverse(),\n                dateValue    = DH.parse(date.value);\n            if (dateValue && time.value) {\n                dateValue.setHours(\n                    time.value.getHours(),\n                    time.value.getMinutes(),\n                    time.value.getSeconds(),\n                    time.value.getMilliseconds()\n                );\n            }\n            // Clone to not end up sharing dates\n            return dateValue ? DateHelper.clone(dateValue) : null;\n        }\n        // shouldn't happen...\n        return null;\n    },\n    copyTime       = (dateTo, dateFrom) => {\n        const d = new Date(dateTo.getTime());\n        d.setHours(dateFrom.getHours(), dateFrom.getMinutes());\n        return d;\n    },\n    adjustEndDate  = (startDate, startTime, me) => {\n        // The end datetime just moves in response to the changed start datetime, keeping the same duration.\n        if (!me.editor.assigningValues && startDate && startTime && me.endDateField && me.endTimeField) {\n            const newEndDate = DH.add(copyTime(me.startDateField.value, me.startTimeField.value), me._durationMS, 'milliseconds');\n            me.endDateField.value = newEndDate;\n            me.endTimeField.value = DH.clone(newEndDate);\n        }\n    };\n/**\n * Base class for EventEdit. Not to be used directly.\n *\n * @extends Core/mixin/InstancePlugin\n */\nexport default class EditBase extends InstancePlugin {\n    //region Config\n    static get configurable() {\n        return {\n            /**\n             * True to save and close this panel if ENTER is pressed in one of the input fields inside the panel.\n             * @config {Boolean}\n             * @default\n             * @category Editor\n             */\n            saveAndCloseOnEnter : true,\n            triggerEvent : null,\n            /**\n             * This config parameter is passed to the `startDateField` and `endDateField` constructor.\n             * @config {String}\n             * @default\n             * @category Editor widgets\n             */\n            dateFormat : 'L', // date format that uses browser locale\n            /**\n             * This config parameter is passed to the `startTimeField` and `endTimeField` constructor.\n             * @config {String}\n             * @default\n             * @category Editor widgets\n             */\n            timeFormat : 'LT', // date format that uses browser locale\n            /**\n             * Default editor configuration, which widgets it shows etc.\n             *\n             * This is the entry point into configuring any aspect of the editor.\n             *\n             * The {@link Core.widget.Container#config-items} configuration of a Container\n             * is *deeply merged* with its default `items` value. This means that you can specify\n             * an `editorConfig` object which configures the editor, or widgets inside the editor:\n             * ```javascript\n             * const scheduler = new Scheduler({\n             *     features : {\n             *         eventEdit  : {\n             *             editorConfig : {\n             *                 autoClose : false,\n             *                 modal     : true,\n             *                 cls       : 'editor-widget-cls',\n             *                 items : {\n             *                     resourceField : {\n             *                         hidden : true\n             *                     },\n             *                     // Add our own event owner field at the top of the form.\n             *                     // Weight -100 will make it sort top the top.\n             *                     ownerField : {\n             *                         weight : -100,\n             *                         type   : 'usercombo',\n             *                         name   : 'owner',\n             *                         label  : 'Owner'\n             *                     }\n             *                 },\n             *                 bbar : {\n             *                     items : {\n             *                         deleteButton : false\n             *                     }\n             *                 }\n             *             }\n             *         }\n             *     }\n             * });\n             * ```\n             * @config {PopupConfig}\n             * @category Editor\n             */\n            editorConfig : null,\n            /**\n             * An object to merge with the provided items config of the editor to override the\n             * configuration of provided fields, or add new fields.\n             *\n             * To remove existing items, set corresponding keys to `null`:\n             *\n             * ```javascript\n             * const scheduler = new Scheduler({\n             *     features : {\n             *         eventEdit  : {\n             *             items : {\n             *                 // Merged with provided config of the resource field\n             *                 resourceField : {\n             *                     label : 'Calendar'\n             *                 },\n             *                 recurrenceCombo : null,\n             *                 owner : {\n             *                     weight : -100, // Will sort above system-supplied fields which are weight 0\n             *                     type   : 'usercombo',\n             *                     name   : 'owner',\n             *                     label  : 'Owner'\n             *                 }\n             *             }\n             *         }\n             *     }\n             * });\n             *```\n             *\n             * The provided fields are called\n             *  - `nameField`\n             *  - `resourceField`\n             *  - `startDateField`\n             *  - `startTimeField`\n             *  - `endDateField`\n             *  - `endTimeField`\n             *  - `recurrenceCombo`\n             *  - `editRecurrenceButton`\n             * @config {Object<String,ContainerItemConfig|Boolean|null>}\n             * @category Editor widgets\n             */\n            items : null,\n            /**\n             * The week start day used in all date fields of the feature editor form by default.\n             * 0 means Sunday, 6 means Saturday.\n             * Defaults to the locale's week start day.\n             * @config {Number}\n             */\n            weekStartDay : null\n        };\n    }\n    //endregion\n    //region Init & destroy\n    construct(client, config) {\n        const me = this;\n        client.eventEdit = me;\n        super.construct(client, ObjectHelper.assign({\n            weekStartDay : client.weekStartDay\n        }, config));\n        me.clientListenersDetacher = client.ion({\n            [me.triggerEvent] : 'onActivateEditor',\n            dragCreateEnd     : 'onDragCreateEnd',\n            // Not fired at the Scheduler level.\n            // Calendar, which inherits this, implements this event.\n            eventAutoCreated : 'onEventAutoCreated',\n            thisObj          : me\n        });\n    }\n    doDestroy() {\n        this.clientListenersDetacher();\n        this._editor?.destroy();\n        super.doDestroy();\n    }\n    //endregion\n    //region Editing\n    // Not implemented at this level.\n    // Scheduler Editing relies on being called at point of event creation.\n    onEventAutoCreated() {}\n    changeEditorConfig(editorConfig) {\n        const { items } = this;\n        // Merge items which is an Object with the default editorConfig's items\n        if (items) {\n            editorConfig = Objects.clone(editorConfig);\n            editorConfig.items = Config.merge(items, editorConfig.items);\n        }\n        return editorConfig;\n    }\n    changeItems(items) {\n        this.cleanItemsConfig(items);\n        return items;\n    }\n    // Remove any items configured as === true which just means default config options\n    cleanItemsConfig(items) {\n        for (const ref in items) {\n            const itemCfg = items[ref];\n            if (itemCfg === true) {\n                delete items[ref];\n            }\n            else if (itemCfg?.items) {\n                this.cleanItemsConfig(itemCfg.items);\n            }\n        }\n    }\n    onDatesChange({ value, source }) {\n        const\n            me = this;\n        if ((source === me.endDateField || source === me.endTimeField) && me.startDateField) {\n            const\n                newEndDate   = me.endTimeField?.value && me.endDateField?.value ? copyTime(me.endDateField.value, me.endTimeField.value) : me.endDateField?.value,\n                newStartDate = me.startTimeField?.value && me.startDateField?.value ? copyTime(me.startDateField.value, me.startTimeField.value) : me.startDateField?.value;\n            if (newEndDate && newStartDate) {\n                me._durationMS = newEndDate - newStartDate;\n            }\n        }\n        // End date can never be less than start date\n        if (me.startDateField && me.endDateField) {\n            me.endDateField.min = me.startDateField.value;\n        }\n        if (me.endTimeField) {\n            // If the event starts and ends on the same day, the time fields need\n            // to have their min and max set against each other.\n            if (DH.isEqual(DH.clearTime(me.startDateField?.value), DH.clearTime(me.endDateField?.value))) {\n                me.endTimeField.min = me.startTimeField.value;\n            }\n            else {\n                me.endTimeField.min = null;\n            }\n        }\n        switch (source.ref) {\n            case 'startDateField':\n                me.startTimeField?.value && adjustEndDate(value, me.startTimeField.value, me);\n                break;\n            case 'startTimeField':\n                me.startDateField?.value && adjustEndDate(me.startDateField.value, value, me);\n                break;\n        }\n    }\n    //endregion\n    //region Save\n    async save() {\n        throw new Error('Implement in subclass');\n    }\n    get values() {\n        const\n            me          = this,\n            { editor }  = me,\n            startFields = [],\n            endFields   = [],\n            { values }  = editor;\n        // The standard values getter will produce (almost) what we want, however, there are some special fields that\n        // we need to take over. Remove those fields:\n        scheduleFields.forEach(f => delete values[f]);\n        editor.eachWidget(widget => {\n            const { name } = widget;\n            // If the widget is part of the recurrence editor, we don't gather it.\n            if (!name || widget.hidden || widget.up(w => w === me.recurrenceEditor)) {\n                delete values[name];\n                return;\n            }\n            switch (name) {\n                case 'startDate':\n                    startFields.push(widget);\n                    break;\n                case 'endDate':\n                    endFields.push(widget);\n                    break;\n                case 'resource':\n                    values[name] = widget.record;\n                    break;\n                case 'recurrenceRule':\n                    // If recurrence set to null, completely clear the recurrenceRule.\n                    // Otherwise it will still be perceived as recurring with the rule 'FREQ=none'\n                    values[name] = editor.widgetMap.recurrenceCombo?.value === 'none' ? '' : widget.value;\n                    break;\n                // Ignore other widgets and allow the standard values getter to provide them:\n                // default:\n                //     values[name] = widget.value;\n            }\n        }, true);\n        // if is changing from not allDay to allDay should consider time fields to not change them on makeDate\n        if (values.allDay && !me.eventRecord.allDay) {\n            startFields.push(me.startTimeField);\n            endFields.push(me.endTimeField);\n        }\n        // Handle fields being configured away\n        if (startFields.length) {\n            values.startDate = makeDate(startFields);\n        }\n        if (endFields.length) {\n            values.endDate = makeDate(endFields);\n        }\n        // Since there is no duration field in the editor,\n        // we don't need to recalculate duration value on each date change.\n        // It's enough to return correct duration value in `values`,\n        // so the record will get updated with the correct data.\n        if (('startDate' in values) && ('endDate' in values)) {\n            values.duration = DH.diff(values.startDate, values.endDate, me.editor.record.durationUnit, true);\n        }\n        return values;\n    }\n    /**\n     * Template method, intended to be overridden. Called before the event record has been updated.\n     * @param {Scheduler.model.EventModel} eventRecord The event record\n     *\n     **/\n    onBeforeSave(eventRecord) {}\n    /**\n     * Template method, intended to be overridden. Called after the event record has been updated.\n     * @param {Scheduler.model.EventModel} eventRecord The event record\n     *\n     **/\n    onAfterSave(eventRecord) {}\n    /**\n     * Updates record being edited with values from the editor\n     * @private\n     */\n    updateRecord(record) {\n        const { values } = this;\n        // Clean resourceId / resources out of values when using assignment store, it will handle the assignment\n        if (this.assignmentStore) {\n            delete values.resource;\n        }\n        this._durationMS = DateHelper.asMilliseconds(values.duration ?? record.duration, record.durationUnit);\n        return record.set(values);\n    }\n    //endregion\n    //region Events\n    onBeforeEditorShow() {\n        const\n            { eventRecord, editor } = this.editingContext,\n            { nameField } = editor.widgetMap;\n        // Editing new event. Make sure user doesn't have to clear the input field.\n        // Record field value still should be there because a rendered event block\n        // looks bad with no text in it.\n        // nameField may have been configured away.\n        if (nameField && eventRecord.isCreating) {\n            // Avoid initial invalid because required state.\n            editor.assigningValues = true;\n            nameField.value = '';\n            editor.assigningValues = false;\n            // Show new event text as a placeholder\n            nameField._configuredPlaceholder = nameField.placeholder;\n            nameField.placeholder = eventRecord.name;\n        }\n    }\n    resetEditingContext() {\n        const me = this;\n        if (!me.editingContext) {\n            return;\n        }\n        const\n            { client }              = me,\n            { editor, eventRecord } = me.editingContext,\n            { eventStore }          = client,\n            { nameField }           = editor.widgetMap;\n        // This will remove the record from the store, *and* from the added bag, so no sync will take place.\n        if (eventRecord.isCreating) {\n            // Ensure that during the engine's async processing of the remove, the element is non-interactive.\n            // Mousedown on the just-created element itself passes through here, and the immediate mouseup\n            // after that instigates a click which will find no corresponding event.\n            if (client.isTimelineBase) {\n                me.editingContext.eventElement?.closest('[data-event-id]').classList.add('b-released');\n            }\n            eventStore.remove(eventRecord);\n            // Clear isCreating *after* removal.\n            // Store doesn't register as a removed record if isCreating is set\n            eventRecord.isCreating = false;\n        }\n        // Revert any placeholder that we may have set\n        // nameField may have been configured away.\n        if (nameField) {\n            nameField.placeholder = nameField._configuredPlaceholder;\n        }\n        client.element.classList.remove('b-eventeditor-editing');\n        // Reset context\n        me.targetEventElement = me.editingContext = editor._record = null;\n    }\n    onPopupKeyDown({ event }) {\n        const me = this;\n        if (!me.readOnly && event.key === 'Enter' && me.saveAndCloseOnEnter && event.target.tagName.toLowerCase() === 'input') {\n            // Need to prevent this key events from being fired on whatever receives focus after the editor is hidden\n            event.preventDefault();\n            // If enter key was hit in an input element of a start field, need to adjust end date fields (the same way as if #onDatesChange handler was called)\n            if (event.target.name === 'startDate') {\n                me.startTimeField && adjustEndDate(me.startDateField.value, me.startTimeField.value, me);\n            }\n            me.onSaveClick();\n        }\n    }\n    async finalizeStmCapture(saved) {\n    }\n    async onSaveClick() {\n        this.editor.focus();\n        this.isFinalizingEventSave = true;\n        const saved = await this.save();\n        this.isFinalizingEventSave = false;\n        if (saved) {\n            await this.finalizeStmCapture(false);\n            this.editor.close();\n            /**\n             * Fires on the owning Scheduler after editor is closed by any action - save, delete or cancel\n             * @event afterEventEdit\n             * @on-owner\n             * @param {Scheduler.view.Scheduler} source The scheduler\n             */\n            this.client.trigger('afterEventEdit');\n        }\n        return saved;\n    }\n    async onDeleteClick() {\n        // `deleteEvent` call actually additionally closes the editor for some reason\n        // see the comment for `editor.revertFocus();` call in EventEdit.js feature\n        // that triggers `resetEditingContext` in which by default we assume canceling flow\n        // so we need to detect that context is being reset for delete action somehow\n        this.isDeletingEvent = true;\n        const removed = await this.deleteEvent();\n        this.isDeletingEvent = false;\n        if (removed) {\n            await this.finalizeStmCapture(false);\n            const { editor } = this;\n            // We expect deleteEvent will trigger close if autoClose is true and focus has moved out,\n            // otherwise need to call it manually\n            if (!editor.autoClose || editor.containsFocus) {\n                editor.close();\n            }\n            this.client.trigger('afterEventEdit');\n        }\n    }\n    async onCancelClick() {\n        this.isCancelingEdit = true;\n        this.editor.close();\n        this.isCancelingEdit = false;\n        if (this.hasStmCapture) {\n            await this.finalizeStmCapture(true);\n        }\n        this.client.trigger('afterEventEdit');\n    }\n    //endregion\n}\nEditBase._$name = 'EditBase';", "import Store from '../../Core/data/Store.js';\nimport Popup from '../../Core/widget/Popup.js';\nimport '../../Core/widget/SlideToggle.js';\nimport '../../Core/widget/panel/PanelCollapserOverlay.js';\n/**\n * @module Scheduler/view/EventEditor\n */\n/**\n * Provided event editor dialog.\n *\n * @extends Core/widget/Popup\n * @private\n */\nexport default class EventEditor extends Popup {\n    // Factoryable type name\n    static get type() {\n        return 'eventeditor';\n    }\n    static get $name() {\n        return 'EventEditor';\n    }\n    static get configurable() {\n        return {\n            items     : [],\n            draggable : {\n                handleSelector : ':not(button,.b-field-inner)' // Ignore buttons and field inners\n            },\n            axisLock : 'flexible',\n            scrollable : {\n                // In case editor is very tall or window is small, make it scrollable\n                overflowY : true\n            },\n            readOnly : null,\n            /**\n             * A Function (or *name* of a function) which produces a customized Panel header based upon the event being edited.\n             *\n             * @config {Function|String}\n             * @param {Scheduler.model.EventModel} eventRecord The record being edited\n             * @returns {String} The Panel title.\n             */\n            titleRenderer : null,\n            // We want to maximize on phones and tablets\n            maximizeOnMobile : true\n        };\n    }\n    updateLocalization() {\n        super.updateLocalization(...arguments);\n        // Use this if there's no titleRenderer\n        this.initialTitle = this.title || '';\n    }\n    chainResourceStore() {\n        return this.eventEditFeature.resourceStore.chain(\n            record => !record.isSpecialRow,\n            null,\n            {\n                // It doesn't need to be a Project-based Store\n                storeClass              : Store,\n                // Need to show all records in the combo. Required in case resource store is a tree.\n                excludeCollapsedRecords : false\n            }\n        );\n    }\n    processWidgetConfig(widget) {\n        if (widget.type?.includes('date') && widget.weekStartDay == null) {\n            widget.weekStartDay = this.weekStartDay;\n        }\n        if (widget.type === 'extraItems') {\n            return false;\n        }\n        const\n            { eventEditFeature } = this,\n            fieldConfig          = {};\n        if (widget.ref === 'resourceField') {\n            const { store } = widget;\n            // Can't use store directly since it may be grouped and then contains irrelevant group records\n            widget.store = this.chainResourceStore();\n            // Allow the incoming widget's config to augment its store\n            if (store) {\n                widget.store.setConfig(store);\n            }\n            // When events are loaded with resourceId, we should only support single select.\n            // Only override this if the widget has not been explicitly configured\n            // with multiSelect.\n            if (!('multiSelect' in widget)) {\n                widget.multiSelect = !eventEditFeature.eventStore.usesSingleAssignment;\n            }\n        }\n        if ((widget.name === 'startDate' || widget.name === 'endDate') && widget.type === 'date') {\n            fieldConfig.format = eventEditFeature.dateFormat;\n        }\n        if ((widget.name === 'startDate' || widget.name === 'endDate') && widget.type === 'time') {\n            fieldConfig.format = eventEditFeature.timeFormat;\n        }\n        Object.assign(widget, fieldConfig);\n        return super.processWidgetConfig(widget);\n    }\n    setupEditorButtons() {\n        const\n            { record }       = this,\n            { deleteButton } = this.widgetMap;\n        // Hide delete button if we are readOnly or the event is in a create phase\n        // which means we are editing a dblclick-created or drag-created event.\n        if (deleteButton) {\n            deleteButton.hidden = this.readOnly || record.isCreating;\n        }\n    }\n    // This will be called if the editor is floating\n    onBeforeShow(...args) {\n        this.setupUIForEditing();\n        super.onBeforeShow?.(...args);\n    }\n    // This will be called if the editor is docked\n    onBeforeToggleReveal({ reveal }) {\n        // Only when revealing, not when sliding out\n        if (reveal) {\n            this.setupUIForEditing();\n        }\n    }\n    setupUIForEditing() {\n        const\n            me               = this,\n            {\n                record,\n                titleRenderer\n            }                = me;\n        me.setupEditorButtons();\n        if (titleRenderer) {\n            me.title = me.callback(titleRenderer, me, [record]);\n        }\n        else {\n            me.title = me.initialTitle;\n        }\n    }\n    onInternalKeyDown(event) {\n        this.trigger('keyDown', { event });\n        super.onInternalKeyDown(event);\n    }\n    updateReadOnly(readOnly) {\n        const\n            {\n                deleteButton,\n                saveButton,\n                cancelButton\n            } = this.widgetMap;\n        super.updateReadOnly(readOnly);\n        if (deleteButton) {\n            deleteButton.hidden = readOnly;\n        }\n        if (saveButton) {\n            saveButton.hidden = readOnly;\n        }\n        if (cancelButton) {\n            cancelButton.hidden = readOnly;\n        }\n    }\n}\n// Register this widget type with its Factory\nEventEditor.initClass();\nEventEditor._$name = 'EventEditor';", "import RecurrenceFrequencyCombo from './RecurrenceFrequencyCombo.js';\n/**\n * @module Scheduler/view/recurrence/field/RecurrenceCombo\n */\n/**\n * A combobox field for selecting a recurrence pattern: `Daily`, `Weekly`, `Monthly` or `Yearly` if the recurrence\n * has no other non-default settings, or `Custom...` if the recurrence has custom setting applied.\n *\n * {@inlineexample Scheduler/view/RecurrenceCombo.js}\n *\n * @extends Scheduler/view/recurrence/field/RecurrenceFrequencyCombo\n * @classtype recurrencecombo\n */\nexport default class RecurrenceCombo extends RecurrenceFrequencyCombo {\n    static get $name() {\n        return 'RecurrenceCombo';\n    }\n    // Factoryable type name\n    static get type() {\n        return 'recurrencecombo';\n    }\n    static get defaultConfig() {\n        return {\n            customValue             : 'custom',\n            placeholder             : 'None',\n            splitCls                : 'b-recurrencecombo-split',\n            items                   : true,\n            highlightExternalChange : false\n        };\n    }\n    buildItems() {\n        const me = this;\n        return [\n            { value : 'none', text : 'L{None}' },\n            ...super.buildItems(),\n            { value : me.customValue, text : 'L{Custom}', cls : me.splitCls }\n        ];\n    }\n    set value(value) {\n        // Use 'none' instead of falsy value\n        value = value || 'none';\n        super.value = value;\n    }\n    get value() {\n        return super.value;\n    }\n    set recurrence(recurrence) {\n        const me = this;\n        if (recurrence) {\n            me.value = me.isCustomRecurrence(recurrence) ? me.customValue : recurrence.frequency;\n        }\n        else {\n            me.value = null;\n        }\n    }\n    isCustomRecurrence(recurrence) {\n        const { interval, days, monthDays, months } = recurrence;\n        return Boolean(interval > 1 || (days && days.length) || (monthDays && monthDays.length) || (months && months.length));\n    }\n};\n// Register this widget type with its Factory\nRecurrenceCombo.initClass();\nRecurrenceCombo._$name = 'RecurrenceCombo';", "import Button from '../../../Core/widget/Button.js';\nimport RecurrenceLegend from '../../data/util/recurrence/RecurrenceLegend.js';\n/**\n * @module Scheduler/view/recurrence/RecurrenceLegendButton\n */\n/**\n * A button which displays the associated {@link #property-recurrence} info in a human readable form.\n * @extends Core/widget/Button\n * @classtype recurrencelegendbutton\n */\nexport default class RecurrenceLegendButton extends Button {\n    static get $name() {\n        return 'RecurrenceLegendButton';\n    }\n    // Factoryable type name\n    static get type() {\n        return 'recurrencelegendbutton';\n    }\n    static get defaultConfig() {\n        return {\n            localizableProperties : [],\n            recurrence            : null\n        };\n    }\n    /**\n     * Sets / gets the recurrence to display description for.\n     * @property {Scheduler.model.RecurrenceModel}\n     */\n    set recurrence(recurrence) {\n        this._recurrence = recurrence;\n        this.updateLegend();\n    }\n    get recurrence() {\n        return this._recurrence;\n    }\n    set eventStartDate(eventStartDate) {\n        this._eventStartDate = eventStartDate;\n        this.updateLegend();\n    }\n    get eventStartDate() {\n        return this._eventStartDate;\n    }\n    updateLegend() {\n        const { recurrence } = this;\n        this.text = recurrence ? RecurrenceLegend.getLegend(recurrence, this.eventStartDate) : '';\n    }\n    onLocaleChange() {\n        // on locale switch we update the button text to use proper language\n        this.updateLegend();\n    }\n    updateLocalization() {\n        this.onLocaleChange();\n        super.updateLocalization();\n    }\n}\n// Register this widget type with its Factory\nRecurrenceLegendButton.initClass();\nRecurrenceLegendButton._$name = 'RecurrenceLegendButton';", "import Popup from '../../../Core/widget/Popup.js';\nimport './RecurrenceEditorPanel.js';\n/**\n * @module Scheduler/view/recurrence/RecurrenceEditor\n */\n/**\n * Class implementing a dialog to edit a {@link Scheduler.model.RecurrenceModel recurrence model}. The class is used by\n * the {@link Scheduler.view.mixin.RecurringEvents recurring events} feature, and you normally don't need to instantiate\n * it.\n *\n * Before showing the dialog need to use {@link Core.widget.Container#property-record} to load a\n * {@link Scheduler.model.RecurrenceModel recurrence model} data into the editor fields. For example:\n *\n * ```javascript\n * // make the editor instance\n * const editor = new RecurrenceEditor();\n * // load recurrence model into it\n * editor.record = new RecurrenceModel({ frequency : \"WEEKLY\" });\n * // display the editor\n * editor.show();\n * ```\n *\n * @extends Core/widget/Popup\n * @classtype recurrenceeditor\n */\nexport default class RecurrenceEditor extends Popup {\n    static get $name() {\n        return 'RecurrenceEditor';\n    }\n    // Factoryable type name\n    static get type() {\n        return 'recurrenceeditor';\n    }\n    static get configurable() {\n        return {\n            draggable : true,\n            closable  : true,\n            floating  : true,\n            cls       : 'b-recurrenceeditor',\n            title     : 'L{Repeat event}',\n            autoClose : true,\n            width     : 470,\n            items     : {\n                recurrenceEditorPanel : {\n                    type  : 'recurrenceeditorpanel',\n                    title : null\n                }\n            },\n            bbar : {\n                defaults : {\n                    localeClass : this\n                },\n                items : {\n                    foo : {\n                        type   : 'widget',\n                        cls    : 'b-label-filler',\n                        weight : 100\n                    },\n                    saveButton : {\n                        color   : 'b-green',\n                        text    : 'L{Save}',\n                        onClick : 'up.onSaveClick',\n                        weight  : 200\n                    },\n                    cancelButton : {\n                        color   : 'b-gray',\n                        text    : 'L{Object.Cancel}',\n                        onClick : 'up.onCancelClick',\n                        weight  : 300\n                    }\n                }\n            },\n            scrollable : {\n                overflowY : true\n            }\n        };\n    }\n    updateReadOnly(readOnly) {\n        super.updateReadOnly(readOnly);\n        // No save or cancel buttons. It's purely for information display when in readOnly mode\n        this.bbar.hidden = readOnly;\n    }\n    get recurrenceEditorPanel() {\n        return this.widgetMap.recurrenceEditorPanel;\n    }\n    updateRecord(record) {\n        this.recurrenceEditorPanel.record = record;\n    }\n    onSaveClick() {\n        const me = this;\n        if (me.saveHandler) {\n            me.saveHandler.call(me.thisObj || me, me, me.record);\n        }\n        else {\n            me.recurrenceEditorPanel.syncEventRecord();\n            me.close();\n        }\n    }\n    onCancelClick() {\n        const me = this;\n        if (me.cancelHandler) {\n            me.cancelHandler.call(me.thisObj || me, me, me.record);\n        }\n        else {\n            me.close();\n        }\n    }\n}\n// Register this widget type with its Factory\nRecurrenceEditor.initClass();\nRecurrenceEditor._$name = 'RecurrenceEditor';", "import Widget from '../../../Core/widget/Widget.js';\nimport Base from '../../../Core/Base.js';\nimport '../../view/recurrence/RecurrenceConfirmationPopup.js';\nimport '../../view/recurrence/field/RecurrenceCombo.js';\nimport '../../view/recurrence/RecurrenceLegendButton.js';\nimport '../../view/recurrence/RecurrenceEditor.js';\n/**\n * @module Scheduler/feature/mixin/RecurringEventEdit\n */\n/**\n * This mixin class provides recurring events functionality to the {@link Scheduler.feature.EventEdit event editor}.\n * @mixin\n */\nexport default Target => class RecurringEventEdit extends (Target || Base) {\n    static get $name() {\n        return 'RecurringEventEdit';\n    }\n    static get configurable() {\n        return {\n            recurringEventsItems : {\n                /**\n                 * Reference to the `Repeat` event field, if used\n                 * @member {Scheduler.view.recurrence.field.RecurrenceCombo} recurrenceCombo\n                 * @readonly\n                 */\n                recurrenceCombo : {\n                    type   : 'recurrencecombo',\n                    label  : 'L{EventEdit.Repeat}',\n                    ref    : 'recurrenceCombo',\n                    weight : 700\n                },\n                /**\n                 * Reference to the button that opens the event repeat settings dialog, if used\n                 * @member {Scheduler.view.recurrence.RecurrenceLegendButton} editRecurrenceButton\n                 * @readonly\n                 */\n                editRecurrenceButton : {\n                    type                 : 'recurrencelegendbutton',\n                    ref                  : 'editRecurrenceButton',\n                    name                 : 'recurrenceRule',\n                    color                : 'b-gray',\n                    menuIcon             : null,\n                    flex                 : 1,\n                    weight               : 800,\n                    ignoreParentReadOnly : true\n                }\n            },\n            /**\n             * Set to `false` to hide recurring fields in event editor, even if the\n             * {@link Scheduler.view.mixin.RecurringEvents#config-enableRecurringEvents Recurring Events} is `true`\n             * and a recurring event is being edited.\n             * @config {Boolean}\n             * @category Recurring\n             */\n            showRecurringUI : null\n        };\n    }\n    changeEditorConfig(editorConfig) {\n        editorConfig.items = { ...editorConfig.items, ...this.recurringEventsItems };\n        // EditBase inserts extraItems *after* all default items are in\n        editorConfig = super.changeEditorConfig(editorConfig);\n        return editorConfig;\n    }\n    doDestroy() {\n        this._recurrenceConfirmation?.destroy();\n        this._recurrenceEditor?.destroy();\n        super.doDestroy();\n    }\n    onEditorConstructed(editor) {\n        const me = this;\n        editor.ion({\n            hide    : me.onRecurringEventEditorHide,\n            thisObj : me\n        });\n        if (me.editRecurrenceButton) {\n            me.editRecurrenceButton.menu = me.recurrenceEditor;\n        }\n        me.recurrenceCombo?.ion({\n            change  : me.onRecurrenceComboChange,\n            thisObj : me\n        });\n    }\n    updateReadOnly(readOnly) {\n        if (this._recurrenceEditor) {\n            this._recurrenceEditor.readOnly = readOnly;\n        }\n    }\n    internalShowEditor() {\n        this.toggleRecurringFieldsVisibility(this.client.enableRecurringEvents && this.showRecurringUI !== false);\n    }\n    toggleRecurringFieldsVisibility(show = true) {\n        const methodName = show ? 'show' : 'hide';\n        this.editRecurrenceButton?.[methodName]?.();\n        this.recurrenceCombo?.[methodName]?.();\n    }\n    onRecurringEventEditorHide() {\n        if (this.recurrenceEditor?.isVisible) {\n            this.recurrenceEditor.hide();\n        }\n        if (this.recurrenceConfirmation?.isVisible) {\n            this.recurrenceConfirmation.hide();\n        }\n    }\n    // Builds RecurrenceModel to load into the recurrenceEditor\n    // It builds the model based on either:\n    // - recurrence rule string (if provided)\n    // - or the event being edited recurrence (if the event is repeating)\n    // - or simply make a recurrence model w/ default state (by default means: Frequency=Daily, Interval=1)\n    makeRecurrence(rule) {\n        const\n            event     = this.eventRecord,\n            eventCopy = event.copy();\n        let recurrence = event.recurrence;\n        if (!rule && recurrence) {\n            recurrence = recurrence.copy();\n        }\n        else {\n            recurrence = new event.recurrenceModel(rule ? { rule } : {});\n        }\n        // bind cloned recurrence to the cloned event\n        recurrence.timeSpan = eventCopy;\n        // update cloned event w/ start date from the UI field\n        eventCopy.setStartDate(this.values.startDate);\n        recurrence.suspendTimeSpanNotifying();\n        return recurrence;\n    }\n    onRecurrableEventBeforeSave({ eventRecord, context }) {\n        const me = this;\n        // Other views features may trigger beforeEventSave, so only react when *we* are editing.\n        if (me.isEditing && !eventRecord.isCreating && eventRecord.supportsRecurring &&\n                (eventRecord.isRecurring || eventRecord.isOccurrence)) {\n            me.recurrenceConfirmation.confirm({\n                actionType : 'update',\n                eventRecord,\n                changerFn() {\n                    context.finalize(true);\n                },\n                cancelFn() {\n                    context.finalize(false);\n                }\n            });\n            // signalizes that we plan to decide save or not asynchronously\n            context.async = true;\n        }\n    }\n    set recurrenceConfirmation(recurrenceConfirmation) {\n        this._recurrenceConfirmation = recurrenceConfirmation;\n    }\n    get recurrenceConfirmation() {\n        const me = this;\n        let recurrenceConfirmation = me._recurrenceConfirmation;\n        if (!recurrenceConfirmation || !recurrenceConfirmation.$$name) {\n            recurrenceConfirmation = Widget.create({\n                type  : 'recurrenceconfirmation',\n                owner : me.editor,\n                ...recurrenceConfirmation\n            });\n            me._recurrenceConfirmation = recurrenceConfirmation;\n        }\n        return recurrenceConfirmation;\n    }\n    set recurrenceEditor(recurrenceEditor) {\n        this._recurrenceEditor = recurrenceEditor;\n    }\n    get recurrenceEditor() {\n        const me = this;\n        let recurrenceEditor = me._recurrenceEditor;\n        // Recurrence editor is centered and modal.\n        if (!recurrenceEditor || !recurrenceEditor.$$name) {\n            me._recurrenceEditor = recurrenceEditor = Widget.create({\n                type         : 'recurrenceeditor',\n                autoShow     : false,\n                centered     : true,\n                modal        : true,\n                // It's used as the Menu of a Button which syncs the width unless it's already set\n                minWidth     : 'auto',\n                constrainTo  : globalThis,\n                anchor       : false,\n                rootElement  : me.rootElement,\n                saveHandler  : me.recurrenceEditorSaveHandler,\n                onBeforeShow : me.onBeforeShowRecurrenceEditor.bind(me),\n                thisObj      : me,\n                ...recurrenceEditor\n            });\n            // Must set *after* construction, otherwise it becomes the default state\n            // to reset readOnly back to.  Must use direct property access because\n            // getter consults state of editor.\n            recurrenceEditor.readOnly = me._readOnly;\n        }\n        return recurrenceEditor;\n    }\n    onBeforeShowRecurrenceEditor() {\n        const\n            me                                = this,\n            { recurrenceEditor, eventRecord } = me;\n        if (recurrenceEditor && eventRecord?.supportsRecurring) {\n            // if the event has no recurrence yet ..initialize it before showing recurrence editor\n            if (!me.recurrence) {\n                me.recurrence = me.makeRecurrence();\n            }\n            // update the cloned recurrence w/ up to date start date value\n            me.recurrence.timeSpan.setStartDate(me.values.startDate);\n            // load RecurrenceModel record into the recurrence editor\n            recurrenceEditor.record = me.recurrence;\n            // In case they drag it. Centered falls off if the widget has position set.\n            recurrenceEditor.centered = true;\n        }\n    }\n    loadRecurrenceData(recurrence) {\n        this.recurrence = recurrence;\n        this.updateRecurrenceFields(recurrence);\n    }\n    updateRecurrenceFields(recurrence) {\n        const\n            me                       = this,\n            { editRecurrenceButton } = me;\n        if (me.recurrenceCombo) {\n            me.recurrenceCombo.recurrence = recurrence;\n        }\n        // update the recurrence legend\n        if (editRecurrenceButton) {\n            editRecurrenceButton.recurrence = recurrence;\n            editRecurrenceButton.value = recurrence ? recurrence.rule : null;\n            if (recurrence && me.client.enableRecurringEvents && me.showRecurringUI !== false) {\n                editRecurrenceButton.show();\n            }\n            else {\n                editRecurrenceButton.hide();\n            }\n        }\n    }\n    onRecurrenceComboChange({ source, value, userAction }) {\n        if (userAction) {\n            const\n                me                   = this,\n                { recurrenceEditor } = me;\n            if (value === source.customValue) {\n                // if user picked \"Custom\" - show recurrence editor\n                // This will recurse through the change event into the opposite side\n                // of the value test which will call updateRecurrenceFields, where the\n                // assignment to the value of the recurrenceCombo will be a non-change.\n                // That will sync the state of the recurrenceButton.\n                me.recurrenceCombo.recurrence = me.makeRecurrence();\n                if (recurrenceEditor.centered) {\n                    recurrenceEditor.show();\n                }\n                else {\n                    recurrenceEditor.show((me.editRecurrenceButton || source).element);\n                }\n            }\n            // user has picked some frequency -> make a new recurrence based on it\n            else {\n                me.loadRecurrenceData(value && value !== 'none' ? me.makeRecurrence(`FREQ=${value}`) : null);\n            }\n        }\n    }\n    recurrenceEditorSaveHandler(editor, recurrence) {\n        // apply changes to the kept recurrence\n        editor.recurrenceEditorPanel.syncEventRecord(recurrence);\n        // update the recurrence related UI\n        this.updateRecurrenceFields(recurrence);\n        editor.close();\n    }\n    onDatesChange(...args) {\n        super.onDatesChange(...args);\n        if (!this.loadingRecord && this.editRecurrenceButton) {\n            const { startDate } = this.values;\n            if (startDate) {\n                this.editRecurrenceButton.eventStartDate = startDate;\n            }\n        }\n    }\n    internalLoadRecord(eventRecord) {\n        if (eventRecord?.supportsRecurring) {\n            this.loadRecurrenceData(eventRecord.recurrence ? this.makeRecurrence() : null);\n        }\n    }\n    updateRecord(record) {\n        // Special handling for when setting recurrence to \"None\". Since button gets hidden its value is not picked up\n        // by the normal flow.\n        if (record.recurrenceRule && !this.recurrence) {\n            record.recurrenceRule = null;\n        }\n        return super.updateRecord(record);\n    }\n};\n", "import Combo from '../../Core/widget/Combo.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\n/**\n * @module Scheduler/widget/ResourceCombo\n */\n/**\n * A Combo subclass which selects resources, optionally displaying the {@link Scheduler.model.ResourceModel#field-eventColor}\n * of each resource in the picker and in the input area.\n *\n * {@inlineexample Scheduler/widget/ResourceCombo.js}\n *\n * @extends Core/widget/Combo\n * @classtype resourcecombo\n * @inputfield\n */\nexport default class ResourceCombo extends Combo {\n    static get $name() {\n        return 'ResourceCombo';\n    }\n    // Factoryable type name\n    static get type() {\n        return 'resourcecombo';\n    }\n    static get configurable() {\n        return {\n            /**\n             * Show the {@link Scheduler.model.ResourceModel#field-eventColor event color} for each resource\n             * @config {Boolean}\n             * @default false\n             */\n            showEventColor : null,\n            displayField : 'name',\n            valueField   : 'id',\n            picker : {\n                cls : 'b-resourcecombo-picker',\n                itemIconTpl(record) {\n                    if (this.owner.showEventColor) {\n                        const\n                            { eventColor } = record,\n                            isStyleColor   = !DomHelper.isNamedColor(eventColor),\n                            style          = eventColor ? (isStyleColor ? ` style=\"color:${eventColor}\"` : '') : ' style=\"display:none\"',\n                            colorClass     = !eventColor || isStyleColor ? '' : ` b-sch-foreground-${eventColor}`;\n                        return `<div class=\"b-icon b-icon-square${colorClass}\"${style}></div>`;\n                    }\n                    if (this.multiSelect) {\n                        return `<div class=\"b-icon b-icon-square\"></div>`;\n                    }\n                    return '';\n                }\n            }\n        };\n    }\n    changeShowEventColor(showEventColor) {\n        return Boolean(showEventColor);\n    }\n    updateShowEventColor(showEventColor) {\n        this.element.classList.toggle('b-show-event-color', Boolean(showEventColor));\n        this._picker?.element.classList.toggle('b-show-event-color', Boolean(showEventColor));\n    }\n    changePicker(picker, oldPicker) {\n        picker = super.changePicker(picker, oldPicker);\n        picker?.element.classList.toggle('b-show-event-color', Boolean(this.showEventColor));\n        return picker;\n    }\n    // Implementation needed at this level because it has two inner elements in its inputWrap\n    get innerElements() {\n        return [\n            {\n                class     : 'b-icon b-resource-icon b-icon-square b-hide-display',\n                reference : 'resourceIcon'\n            },\n            this.inputElement\n        ];\n    }\n    syncInputFieldValue() {\n        const\n            me            = this,\n            {\n                resourceIcon,\n                lastResourceIconCls\n            }             = me,\n            { classList } = resourceIcon,\n            eventColor    = me.selected?.eventColor ?? '';\n        super.syncInputFieldValue();\n        // Remove last colour whichever way it was done\n        resourceIcon.style.color = '';\n        lastResourceIconCls && classList.remove(lastResourceIconCls);\n        me.lastResourceIconCls = null;\n        if (eventColor) {\n            if (DomHelper.isNamedColor(eventColor)) {\n                me.lastResourceIconCls = `b-sch-foreground-${eventColor}`;\n                classList.add(me.lastResourceIconCls);\n            }\n            else {\n                resourceIcon.style.color = eventColor;\n            }\n            classList.remove('b-hide-display');\n        }\n        else {\n            classList.add('b-hide-display');\n        }\n    }\n}\n// Register this widget type with its Factory\nResourceCombo.initClass();\nResourceCombo._$name = 'ResourceCombo';", "import EditBase from './base/EditBase.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport '../view/EventEditor.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\nimport RecurringEventEdit from './mixin/RecurringEventEdit.js';\nimport '../../Core/widget/TextField.js';\nimport '../../Scheduler/widget/ResourceCombo.js';\nimport TimeSpan from '../../Scheduler/model/TimeSpan.js';\nimport '../../Core/widget/DateField.js';\nimport '../../Core/widget/TimeField.js';\nimport '../../Core/widget/Button.js';\nimport '../widget/EventColorField.js';\nimport Widget from '../../Core/widget/Widget.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport AsyncHelper from '../../Core/helper/AsyncHelper.js';\nimport TaskEditStm from './mixin/TaskEditStm.js';\n/**\n * @module Scheduler/feature/EventEdit\n */\nconst punctuation = /[^\\w\\d]/g;\n/**\n * Feature that displays a popup containing widgets for editing event data.\n *\n * {@inlineexample Scheduler/feature/EventEdit.js}\n *\n * To customize its contents you can:\n *\n * * Reconfigure built-in widgets by providing override configs in the {@link Scheduler.feature.base.EditBase#config-items} config.\n * * Change the date format of the date & time fields: {@link Scheduler.feature.base.EditBase#config-dateFormat} and {@link Scheduler.feature.base.EditBase#config-timeFormat }\n * * Configure provided widgets in the editor and add your own in the {@link Scheduler.feature.base.EditBase#config-items} config.\n * * Remove fields related to recurring events configuration (such as `recurrenceCombo`) by setting {@link Scheduler.feature.mixin.RecurringEventEdit#config-showRecurringUI} config to `false`.\n * * Advanced: Reconfigure the whole editor widget using {@link #config-editorConfig}\n *\n * ## Built-in widgets\n *\n * The built-in widgets are:\n *\n * | Widget ref             | Type                                                     | Weight | Description                                                    |\n * |------------------------|----------------------------------------------------------|--------|----------------------------------------------------------------|\n * | `nameField`            | {@link Core.widget.TextField}                            | 100    | Edit name                                                      |\n * | `resourceField`        | {@link Scheduler.widget.ResourceCombo}                   | 200    | Pick resource(s)                                               |\n * | `startDateField`       | {@link Core.widget.DateField}                            | 300    | Edit startDate (date part)                                     |\n * | `startTimeField`       | {@link Core.widget.TimeField}                            | 400    | Edit startDate (time part)                                     |\n * | `endDateField`         | {@link Core.widget.DateField}                            | 500    | Edit endDate (date part)                                       |\n * | `endTimeField`         | {@link Core.widget.TimeField}                            | 600    | Edit endDate (time part)                                       |\n * | `recurrenceCombo`      | {@link Scheduler.view.recurrence.field.RecurrenceCombo}  | 700    | Select recurrence rule (only visible if recurrence is used)    |\n * | `editRecurrenceButton` | {@link Scheduler.view.recurrence.RecurrenceLegendButton} | 800    | Edit the recurrence rule  (only visible if recurrence is used) |\n * | `colorField` \u00B9         | {@link Scheduler.widget.EventColorField}                 | 700    | Choose background color for the event bar                      |\n *\n * **\u00B9** Set the {@link Scheduler.view.SchedulerBase#config-showEventColorPickers} config to `true` to enable this field\n *\n * The built-in buttons are:\n *\n * | Widget ref             | Type                                                                     | Weight | Description                                                    |\n * |------------------------|--------------------------------------------------------------------------|--------|----------------------------------------------------------------|\n * | `saveButton`           | {@link Core.widget.Button}                                               | 100    | Save event button on the bbar                                  |\n * | `deleteButton`         | {@link Core.widget.Button}                                               | 200    | Delete event button on the bbar                                |\n * | `cancelButton`         | {@link Core.widget.Button}                                               | 300    | Cancel event editing button on the bbar                        |\n *\n * ## Removing a built-in item\n *\n * To remove a built-in widget, specify its `ref` as `null` in the `items` config:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     features : {\n *         eventEdit : {\n *             items : {\n *                 // Remove the start time field\n *                 startTimeField : null\n *             }\n *         }\n *     }\n * })\n * ```\n *\n * Bottom buttons may be hidden using the `bbar` config passed to `editorConfig`:\n * ```javascript\n * const scheduler = new Scheduler({\n *     features : {\n *         eventEdit : {\n *             editorConfig : {\n *                 bbar : {\n *                     items : {\n *                         deleteButton : null\n *                     }\n *                 }\n *             }\n *         }\n *     }\n * })\n * ```\n *\n * To remove fields related to recurring events configuration (such as `recurrenceCombo`), set {@link Scheduler.feature.mixin.RecurringEventEdit#config-showRecurringUI} config to `false`.\n *\n * ## Customizing a built-in widget\n *\n * To customize a built-in widget, use its `ref` as the key in the `items` config and specify the configs you want\n * to change (they will merge with the widgets default configs):\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     features : {\n *         eventEdit : {\n *             items : {\n *                 // ref for an existing field\n *                 nameField : {\n *                     // Change its label\n *                     label : 'Description'\n *                 }\n *             }\n *         }\n *     }\n * })\n * ```\n *\n * ## Adding custom widgets\n *\n * To add a custom widget, add an entry to the `items` config. The `name` property links the input field to a field in\n * the loaded event record:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     features : {\n *         eventEdit : {\n *             items : {\n *                 // Key to use as fields ref (for easier retrieval later)\n *                 color : {\n *                     type  : 'combo',\n *                     label : 'Color',\n *                     items : ['red', 'green', 'blue'],\n *                     // name will be used to link to a field in the event record when loading and saving in the editor\n *                     name  : 'eventColor'\n *                 }\n *             }\n *         }\n *     }\n * })\n * ```\n *\n * ## Video guides\n * {@frameworktabs}\n * {@react}\n * [@youtube](https://www.youtube.com/embed/ghWLmifpO_4)\n * {@endreact}\n * {@vue}\n * [@youtube](https://www.youtube.com/embed/o7xQ6B_Y04w)\n * {@endvue}\n * {@angular}\n * **Coming soon!**\n * {@endangular}\n * {@endframeworktabs}\n *\n * For more info on customizing the event editor, please see \"Customize event editor\" guide.\n *\n * This feature is **enabled** by default\n *\n * @mixes Scheduler/feature/mixin/RecurringEventEdit\n * @extends Scheduler/feature/base/EditBase\n * @demo Scheduler/eventeditor\n * @classtype eventEdit\n * @feature\n */\nexport default class EventEdit extends EditBase.mixin(TaskEditStm, RecurringEventEdit, Delayable) {\n    //region Config\n    static get $name() {\n        return 'EventEdit';\n    }\n    static get configurable() {\n        return {\n            /**\n             * The event that shall trigger showing the editor. Defaults to `eventdblclick`, set to `''` or null to\n             * disable editing of existing events.\n             * @config {String}\n             * @default\n             * @category Editor\n             */\n            triggerEvent : 'eventdblclick',\n            /**\n             * The data field in the model that defines the eventType.\n             * Applied as class (b-eventtype-xx) to the editors element, to allow showing/hiding fields depending on\n             * eventType. Dynamic toggling of fields in the editor is activated by adding an `eventTypeField` field to\n             * your widget:\n             *\n             * ```javascript\n             * const scheduler = new Scheduler({\n             *    features : {\n             *       eventEdit : {\n             *           items : {\n             *               eventTypeField : {\n             *                  type  : 'combo',\n             *                  name  : 'eventType',\n             *                  label : 'Type',\n             *                  items : ['Appointment', 'Internal', 'Meeting']\n             *               }\n             *           }\n             *        }\n             *     }\n             * });\n             * ```\n             * Note, your event model class also must declare this field:\n             * ```javascript\n             *  class MyEvent extends EventModel {\n             *      static get fields() {\n             *          return [\n             *              { name : 'eventType' }\n             *          ];\n             *      }\n             *  }\n             * ```\n             * @config {String}\n             * @default\n             * @category Editor\n             */\n            typeField : 'eventType',\n            /**\n             * The current {@link Scheduler.model.EventModel} record, which is being edited by the event editor.\n             * @property {Scheduler.model.EventModel}\n             * @readonly\n             */\n            eventRecord : null,\n            /**\n             * Specify `true` to put the editor in read only mode.\n             * @config {Boolean}\n             * @default false\n             */\n            readOnly : null,\n            /**\n             * The configuration for the internal editor widget. With this config you can control the *type*\n             * of editor (defaults to `Popup`) and which widgets to show,\n             * change the items in the `bbar`, or change whether the popup should be modal etc.\n             *\n             * ```javascript\n             * const scheduler = new Scheduler({\n             *     features : {\n             *         eventEdit  : {\n             *             editorConfig : {\n             *                 modal  : true,\n             *                 cls    : 'my-editor' // A CSS class,\n             *                 items  : {\n             *                     owner : {\n             *                         weight : -100, // Will sort above system-supplied fields which are weight 100 to 800\n             *                         type   : 'usercombo',\n             *                         name   : 'owner',\n             *                         label  : 'Owner'\n             *                     },\n             *                     agreement : {\n             *                         weight : 1000, // Will sort below system-supplied fields which are weight 100 to 800\n             *                         type   : 'checkbox',\n             *                         name   : 'agreement',\n             *                         label  : 'Agree to terms'\n             *                     },\n             *                     resourceField : {\n             *                         // Apply a special filter to limit the Combo's access\n             *                         // to resources.\n             *                         store  {\n             *                             filters : [{\n             *                                 filterBy(resource) {\n             *                                     return shouldShowResource(record);\n             *                                 }\n             *                             }]\n             *                         }\n             *                     }\n             *                 },\n             *                 bbar : {\n             *                     items : {\n             *                         deleteButton : {\n             *                             hidden : true\n             *                         }\n             *                     }\n             *                 }\n             *             }\n             *         }\n             *     }\n             * });\n             * ```\n             *\n             * Or to use your own custom editor:\n             *\n             * ```javascript\n             * const scheduler = new Scheduler({\n             *     features : {\n             *         eventEdit  : {\n             *             editorConfig : {\n             *                 type : 'myCustomEditorType'\n             *             }\n             *         }\n             *     }\n             * });\n             * ```\n             * @config {Object}\n             * @category Editor\n             */\n            editorConfig : {\n                type        : 'eventeditor',\n                title       : 'L{EventEdit.Edit event}',\n                closable    : true,\n                localeClass : this,\n                defaults : {\n                    localeClass : this\n                },\n                items : {\n                    /**\n                     * Reference to the name field, if used\n                     * @member {Core.widget.TextField} nameField\n                     * @readonly\n                     */\n                    nameField : {\n                        type      : 'text',\n                        label     : 'L{Name}',\n                        clearable : true,\n                        name      : 'name',\n                        weight    : 100,\n                        required  : true\n                    },\n                    /**\n                     * Reference to the resource field, if used\n                     * @member {Core.widget.Combo} resourceField\n                     * @readonly\n                     */\n                    resourceField : {\n                        type                    : 'resourcecombo',\n                        label                   : 'L{Resource}',\n                        name                    : 'resource',\n                        editable                : true,\n                        valueField              : 'id',\n                        displayField            : 'name',\n                        highlightExternalChange : false,\n                        destroyStore            : true,\n                        weight                  : 200\n                    },\n                    /**\n                     * Reference to the start date field, if used\n                     * @member {Core.widget.DateField} startDateField\n                     * @readonly\n                     */\n                    startDateField : {\n                        type             : 'date',\n                        clearable        : false,\n                        required         : true,\n                        label            : 'L{Start}',\n                        name             : 'startDate',\n                        validateDateOnly : true,\n                        weight           : 300\n                    },\n                    /**\n                     * Reference to the start time field, if used\n                     * @member {Core.widget.TimeField} startTimeField\n                     * @readonly\n                     */\n                    startTimeField : {\n                        type      : 'time',\n                        clearable : false,\n                        required  : true,\n                        name      : 'startDate',\n                        cls       : 'b-match-label',\n                        weight    : 400\n                    },\n                    /**\n                     * Reference to the end date field, if used\n                     * @member {Core.widget.DateField} endDateField\n                     * @readonly\n                     */\n                    endDateField : {\n                        type             : 'date',\n                        clearable        : false,\n                        required         : true,\n                        label            : 'L{End}',\n                        name             : 'endDate',\n                        validateDateOnly : true,\n                        weight           : 500\n                    },\n                    /**\n                     * Reference to the end time field, if used\n                     * @member {Core.widget.TimeField} endTimeField\n                     * @readonly\n                     */\n                    endTimeField : {\n                        type      : 'time',\n                        clearable : false,\n                        required  : true,\n                        name      : 'endDate',\n                        cls       : 'b-match-label',\n                        weight    : 600\n                    },\n                    colorField : {\n                        label  : 'L{SchedulerBase.color}',\n                        type   : 'eventColorField',\n                        name   : 'eventColor',\n                        weight : 700\n                    }\n                },\n                bbar : {\n                    // When readOnly, child buttons are hidden\n                    hideWhenEmpty : true,\n                    defaults : {\n                        localeClass : this\n                    },\n                    items : {\n                        /**\n                         * Reference to the save button, if used\n                         * @member {Core.widget.Button} saveButton\n                         * @readonly\n                         */\n                        saveButton : {\n                            color  : 'b-blue',\n                            cls    : 'b-raised',\n                            text   : 'L{Save}',\n                            weight : 100\n                        },\n                        /**\n                         * Reference to the delete button, if used\n                         * @member {Core.widget.Button} deleteButton\n                         * @readonly\n                         */\n                        deleteButton : {\n                            text   : 'L{Delete}',\n                            weight : 200\n                        },\n                        /**\n                         * Reference to the cancel button, if used\n                         * @member {Core.widget.Button} cancelButton\n                         * @readonly\n                         */\n                        cancelButton : {\n                            text   : 'L{Object.Cancel}',\n                            weight : 300\n                        }\n                    }\n                }\n            },\n            targetEventElement : null\n        };\n    }\n    static get pluginConfig() {\n        return {\n            chain : [\n                'populateEventMenu',\n                'onEventEnterKey',\n                'editEvent'\n            ]\n        };\n    }\n    //endregion\n    //region Init & destroy\n    construct(scheduler, config) {\n        // Default to the scheduler's state, but configs may override\n        this.readOnly = scheduler.readOnly;\n        super.construct(scheduler, config);\n        scheduler.ion({\n            projectChange : 'onChangeProject',\n            readOnly      : 'onClientReadOnlyToggle',\n            thisObj       : this\n        });\n    }\n    get scheduler() {\n        return this.client;\n    }\n    get project() {\n        return this.client.project;\n    }\n    //endregion\n    //region Editing\n    /**\n     * Get/set readonly state\n     * @property {Boolean}\n     */\n    get readOnly() {\n        return this._editor ? this.editor.readOnly : this._readOnly;\n    }\n    updateReadOnly(readOnly) {\n        super.updateReadOnly(readOnly);\n        if (this._editor) {\n            this.editor.readOnly = readOnly;\n        }\n    }\n    onClientReadOnlyToggle({ readOnly }) {\n        this.readOnly = readOnly;\n    }\n    /**\n     * Returns the editor widget representing this feature\n     * @member {Core.widget.Popup}\n     */\n    get editor() {\n        const\n            me              = this,\n            editorListeners = {\n                beforehide : 'resetEditingContext',\n                beforeshow : 'onBeforeEditorShow',\n                keydown    : 'onPopupKeyDown',\n                thisObj    : me\n            };\n        let { _editor : editor } = me;\n        if (editor) {\n            return editor;\n        }\n        editor = me._editor = Widget.create(me.getEditorConfig());\n        const {\n            startDateField,\n            startTimeField,\n            endDateField,\n            endTimeField\n        } = editor.widgetMap;\n        // If the date field doesn't exist, the time field must encapsulate the\n        // date component of the start/end points and must lay out right.\n        if (!startDateField && startTimeField) {\n            startTimeField.keepDate = true;\n            startTimeField.label = me.L('Start');\n            startTimeField.flex = '1 0 100%';\n        }\n        if (!endDateField && endTimeField) {\n            endTimeField.keepDate = true;\n            endTimeField.label = me.L('End');\n            endTimeField.flex = '1 0 100%';\n        }\n        // If the default Popup has been reconfigured to be static, add it as a child of our client.\n        if (!editor.floating && !editor.positioned) {\n            // If not configured with an appendTo, we add it as a child of our client.\n            if (!editor.element.parentNode) {\n                me.client.add(editor);\n            }\n            delete editorListeners.beforehide;\n            delete editorListeners.beforeshow;\n            editorListeners.beforeToggleReveal = 'onBeforeEditorToggleReveal';\n        }\n        // Must set *after* construction, otherwise it becomes the default state\n        // to reset readOnly back to. Must use direct property access because\n        // getter consults state of editor.\n        editor.readOnly = me._readOnly;\n        if (editor.items.length === 0) {\n            console.warn('Event Editor configured without any `items`');\n        }\n        // add listeners programmatically so users cannot override them accidentally\n        editor.ion(editorListeners);\n        /**\n         * Fired before the editor will load the event record data into its input fields. This is useful if you\n         * want to modify the fields before data is loaded (e.g. set some input field to be readonly)\n         * @on-owner\n         * @event eventEditBeforeSetRecord\n         * @param {Core.widget.Container} source The editor widget\n         * @param {Scheduler.model.EventModel} record The record\n         */\n        me.scheduler.relayEvents(editor, ['beforeSetRecord'], 'eventEdit');\n        // assign widget variables, using widget name: startDate -> me.startDateField\n        // widgets with id set use that instead, id -> me.idField\n        Object.values(editor.widgetMap).forEach(widget => {\n            const ref = widget.ref || widget.id;\n            // don't overwrite if already defined\n            if (ref && !me[ref]) {\n                me[ref] = widget;\n                switch (widget.name) {\n                    case 'startDate':\n                    case 'endDate':\n                        widget.ion({ change : 'onDatesChange', thisObj : me });\n                        break;\n                }\n            }\n        });\n        // launch onEditorConstructed hook if provided\n        me.onEditorConstructed?.(editor);\n        me.eventTypeField?.ion({ change : 'onEventTypeChange', thisObj : me });\n        me.saveButton?.ion({ click : 'onSaveClick', thisObj : me });\n        me.deleteButton?.ion({ click : 'onDeleteClick', thisObj : me });\n        me.cancelButton?.ion({ click : 'onCancelClick', thisObj : me });\n        return editor;\n    }\n    getEditorConfig() {\n        const\n            me                 = this,\n            { cls, scheduler } = me,\n            result             = ObjectHelper.assign({\n                owner            : scheduler,\n                eventEditFeature : me,\n                weekStartDay     : me.weekStartDay,\n                align            : 'b-t',\n                id               : `${scheduler.id}-event-editor`,\n                autoShow         : false,\n                anchor           : true,\n                scrollAction     : 'realign',\n                constrainTo      : globalThis,\n                cls\n            }, me.editorConfig);\n        // User configuration may have included a render target which means the editor\n        // will not be floating.\n        if (Widget.prototype.getRenderContext(result)[0]) {\n            result.floating = false;\n        }\n        // If the default Popup has been reconfigured to be static, ensure it starts\n        // life as a visible but collapsed panel.\n        if (result.floating === false && !result.positioned) {\n            result.collapsible = {\n                type           : 'overlay',\n                direction      : 'right',\n                autoClose      : false,\n                tool           : null,\n                recollapseTool : null\n            };\n            result.collapsed = true;\n            result.hidden = result.anchor = false;\n            result.hide = function() {\n                this.collapsible.toggleReveal(false);\n            };\n        }\n        if (!scheduler.showEventColorPickers && result.items.colorField) {\n            result.items.colorField.hidden = true;\n        }\n        // Layout-affecting props must be available early so that appendTo ends up with\n        // correct layout.\n        result.onElementCreated = me.updateCSSVars.bind(this);\n        return result;\n    }\n    updateCSSVars({ element }) {\n        // must result in longest format, ie 2 digits for date and all time parts.\n        const\n            time               = new Date(2000, 12, 31, 23, 55, 55),\n            dateLength         = DateHelper.format(time, this.dateFormat).replace(punctuation, '').length,\n            timeLength         = DateHelper.format(time, this.timeFormat).replace(punctuation, '').length,\n            dateTimeLength     = dateLength + timeLength;\n        element.style.setProperty('--date-time-length', `${dateTimeLength}em`);\n        element.style.setProperty('--date-width-difference', `${(dateLength - timeLength) / 2}em`);\n    }\n    // Called from editEvent() to actually show the editor\n    async internalShowEditor(eventRecord, resourceRecord, align = null) {\n        const\n            me            = this,\n            { scheduler } = me,\n            { useInitialAnimation } = scheduler,\n            // Align to the element (b-sch-event) and not the wrapper\n            eventElement = align?.target?.nodeType === Element.ELEMENT_NODE\n                ? align.target\n                : scheduler.getElementFromEventRecord(eventRecord, resourceRecord),\n            isPartOfStore = eventRecord.isPartOfStore(scheduler.eventStore);\n        align = align ?? {\n            // Align to the element (b-sch-event) and not the wrapper\n            target : eventElement,\n            anchor : true\n        };\n        // Event not in current TimeAxis - cannot be edited without extending the TimeAxis.\n        // If there's no event element and the eventRecord is not in the store, we still\n        // edit centered on the Scheduler - we're adding a new event\n        if (align.target || (!isPartOfStore || eventRecord.resources.length === 0) || eventRecord.isCreating) {\n            // need to add this css class as early as possible to prevent\n            // the event tooltip from appearing\n            scheduler.element.classList.add('b-eventeditor-editing');\n            me.resourceRecord = resourceRecord;\n            const { editor } = me;\n            me.editingContext = {\n                eventRecord,\n                resourceRecord,\n                eventElement,\n                editor,\n                isPartOfStore\n            };\n            super.internalShowEditor?.(eventRecord, resourceRecord, align);\n            if (me.typeField) {\n                me.toggleEventType(eventRecord.getValue(me.typeField));\n            }\n            me.loadRecord(eventRecord, resourceRecord);\n            // If it's a static child of the client which is collapsed, expand it.\n            // Floating components focusOnShow by default, this will need to be focused.\n            if (editor.collapsed) {\n                // The *initial* reveal does not animate unless the toggleReveal call is delayed.\n                await AsyncHelper.sleep(100);\n                await editor.collapsible.toggleReveal(true);\n                editor.focus();\n            }\n            // Honour alignment settings \"anchor\" and \"centered\" which may be injected from editorConfig.\n            else if (editor.centered || !editor.anchor || !editor.floating) {\n                editor.show();\n            }\n            // avoid aligning to an event being animated into place, just center in these cases\n            else if (eventElement && (!eventRecord.isCreating || !useInitialAnimation || useInitialAnimation === true || useInitialAnimation === 'fade-in')) {\n                me.targetEventElement = eventElement;\n                editor.showBy(align);\n            }\n            // We are adding an unrendered event. Display the editor centered\n            else {\n                editor.show();\n                // Must be done after show because show always reverts to its configured centered setting.\n                editor.updateCentered(true);\n            }\n            // Adjust time field step increment based on timeAxis resolution\n            const timeResolution = scheduler.timeAxisViewModel.timeResolution;\n            if (timeResolution.unit === 'hour' || timeResolution.unit === 'minute') {\n                const step = `${timeResolution.increment}${timeResolution.unit}`;\n                if (me.startTimeField) {\n                    me.startTimeField.step = step;\n                }\n                if (me.endTimeField) {\n                    me.endTimeField.step = step;\n                }\n            }\n            // Might end up here with the old listener still around in monkey test for stress demo in turbo mode.\n            // Some action happening during edit, but cannot track down what is going on\n            me.detachListeners('changesWhileEditing');\n            scheduler.eventStore.ion({\n                change  : me.onChangeWhileEditing,\n                refresh : me.onChangeWhileEditing,\n                thisObj : me,\n                name    : 'changesWhileEditing'\n            });\n        }\n    }\n    onChangeWhileEditing() {\n        const me = this;\n        // If event was removed, cancel editing\n        // - however, there's one valid case when even can be removed during save finalization - that is when\n        // all its assignments has been removed - in such case ignore the removal and do not call the `onCancelClick`\n        // because that will reject the STM transaction and revert all changes\n        // - also, do not trigger it when the editor is configured with the `autoUpdateRecord` - because in such case\n        // the data change will be happening right during the editing\n        if (!me.editor.autoUpdateRecord && !me.isFinalizingEventSave && me.isEditing && me.editingContext.isPartOfStore && !me.eventRecord.isPartOfStore(me.scheduler.eventStore)) {\n            me.onCancelClick();\n        }\n    }\n    // Fired in a listener so that it's after the auto-called onBeforeShow listeners so that\n    // subscribers to the beforeEventEditShow are called at exactly the correct lifecycle point.\n    onBeforeEditorShow() {\n        super.onBeforeEditorShow(...arguments);\n        /**\n         * Fires on the owning Scheduler when the editor for an event is available but before it is populated with\n         * data and shown. Allows manipulating fields etc.\n         * @event beforeEventEditShow\n         * @on-owner\n         * @param {Scheduler.view.Scheduler} source The scheduler\n         * @param {Scheduler.feature.EventEdit} eventEdit The eventEdit feature\n         * @param {Scheduler.model.EventModel} eventRecord The record about to be shown in the event editor.\n         * @param {Scheduler.model.ResourceModel} resourceRecord The Resource record for the event. If the event\n         * is being created, it will not contain a resource, so this parameter specifies the resource the\n         * event is being created for.\n         * @param {HTMLElement} eventElement The element which represents the event in the scheduler display.\n         * @param {Core.widget.Popup} editor The editor\n         */\n        this.scheduler.trigger('beforeEventEditShow', {\n            eventEdit : this,\n            ...this.editingContext\n        });\n    }\n    updateTargetEventElement(targetEventElement, oldTargetEventElement) {\n        targetEventElement?.classList.add('b-editing');\n        oldTargetEventElement?.classList.remove('b-editing');\n    }\n    /**\n     * Opens an editor for the passed event. This function is exposed on Scheduler and can be called as\n     * `scheduler.editEvent()`.\n     * @param {Scheduler.model.EventModel} eventRecord Event to edit\n     * @param {Scheduler.model.ResourceModel} [resourceRecord] The Resource record for the event.\n     * This parameter is needed if the event is newly created for a resource and has not been assigned, or when using\n     * multi assignment.\n     * @param {HTMLElement} [element] Element to anchor editor to (defaults to events element)\n     * @on-owner\n     */\n    editEvent(eventRecord, resourceRecord, element = null, stmCapture = null) {\n        const\n            me = this,\n            { client } = me,\n            { simpleEventEdit } = client.features;\n        if (me.isEditing) {\n            // old editing flow already running, clean it up\n            me.resetEditingContext();\n        }\n        // If simple edit feature is active, use it when a new event is created\n        if (me.disabled || eventRecord.readOnly || (eventRecord.isCreating && simpleEventEdit?.enabled)) {\n            return;\n        }\n        /**\n         * Fires on the owning Scheduler before an event is displayed in an editor.\n         * This may be listened for to allow an application to take over event editing duties. Returning `false`\n         * stops the default editing UI from being shown.\n         * @event beforeEventEdit\n         * @on-owner\n         * @param {Scheduler.view.Scheduler} source The scheduler\n         * @param {Scheduler.feature.EventEdit} eventEdit The eventEdit feature\n         * @param {Scheduler.model.EventModel} eventRecord The record about to be shown in the event editor.\n         * @param {Scheduler.model.ResourceModel} resourceRecord The Resource record for the event. If the event\n         * is being created, it will not contain a resource, so this parameter specifies the resource the\n         * event is being created for.\n         * @param {HTMLElement} eventElement The element which represents the event in the scheduler display.\n         * @preventable\n         */\n        if (client.trigger('beforeEventEdit', {\n            eventEdit    : me,\n            eventRecord,\n            resourceRecord,\n            eventElement : client.getElementFromEventRecord?.(eventRecord, resourceRecord) || element\n        }) === false) {\n            client.element.classList.remove('b-eventeditor-editing');\n            return false;\n        }\n        if (stmCapture) {\n            me.applyStmCapture(stmCapture);\n            me.hasStmCapture = true;\n            // indicate that editor has been opened, and is now managing the \"stm capture\"\n            stmCapture.transferred = true;\n        }\n        // it is set to `false` by calendar, to ignore the STM mechanism\n        else if (stmCapture !== false && !client.isCalendar && !me.hasStmCapture) {\n            me.captureStm(true);\n        }\n        return me.doEditEvent(...arguments).then(result => {\n            if (!me.isDestroying) {\n                // The Promise being async allows a mouseover to trigger the event tip\n                // unless we add the editing class immediately (But only if we actually began editing).\n                if (!me.isEditing && !client.isCalendar && !me.rejectingStmTransaction) {\n                    // probably a custom event editor was used or editing was vetoed for some other reason\n                    if (result !== false && me.hasStmCapture) {\n                        // Skip stm rejection if built-in editor is disabled in beforeEventEdit (using of custom event editor)\n                        return me.freeStm(false);\n                    }\n                    else {\n                        return me.freeStm();\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Returns true if the editor is currently active\n     * @readonly\n     * @property {Boolean}\n     */\n    get isEditing() {\n        const { _editor } = this;\n        return Boolean(\n            // Editor is not visible if it is collapsed and not expanded\n            _editor?.isVisible && !(_editor.collapsed && !_editor.revealed)\n        );\n    }\n    // editEvent is the single entry point in the base class.\n    // Subclass implementations of the action may differ, so are implemented in doEditEvent\n    async doEditEvent(eventRecord, resourceRecord, element = null) {\n        const\n            me            = this,\n            { scheduler } = me,\n            isNewRecord   = eventRecord.isCreating;\n        if (!resourceRecord) {\n            // Need to handle resourceId for edge case when creating an event with resourceId and editing it before\n            // adding it to the EventStore\n            resourceRecord = eventRecord.resource || me.resourceStore.getById(eventRecord.resourceId);\n        }\n        if (isNewRecord) {\n            // Ensure temporal data fields are ready when the editor is shown\n            TimeSpan.prototype.normalize.call(eventRecord);\n        }\n        // If element is specified (call triggered by EventDragCreate)\n        // Then we can align to that, and no scrolling is necessary.\n        // If we are simply being asked to edit a new event which is not\n        // yet added, the editor is centered, and no scroll is necessary\n        if (element || isNewRecord || eventRecord.resources.length === 0) {\n            return me.internalShowEditor(eventRecord, resourceRecord, element ? {\n                target : element\n            } : null);\n        }\n        else {\n            // Ensure event is in view before showing the editor.\n            // Note that we first need to extend the time axis to include\n            // currently out of range events.\n            await scheduler.scrollResourceEventIntoView(resourceRecord, eventRecord, {\n                animate        : true,\n                edgeOffset     : 0,\n                extendTimeAxis : false\n            });\n            if (!scheduler.isDestroyed) {\n                await me.internalShowEditor(eventRecord, resourceRecord);\n                if (!scheduler.isDestroyed) {\n                    scheduler.element.classList.remove('b-eventeditor-editing');\n                }\n            }\n        }\n    }\n    /**\n     * Sets fields values from record being edited\n     * @private\n     */\n    loadRecord(eventRecord, resourceRecord) {\n        this.loadingRecord = true;\n        this.internalLoadRecord(eventRecord, resourceRecord);\n        this.loadingRecord = false;\n    }\n    get eventRecord() {\n        return this._editor?.record;\n    }\n    internalLoadRecord(eventRecord, resourceRecord) {\n        const\n            me                        = this,\n            { eventStore }            = me.client,\n            { editor, resourceField } = me;\n        me.resourceRecord = resourceRecord;\n        // Update chained store early, to have records in place when setting value below (avoids adding the resource to\n        // empty combo store, https://github.com/bryntum/support/issues/5378). It is not done automatically for\n        // grouping/trees or when project is replaced\n        if (resourceField && resourceField.store?.masterStore !== me.resourceStore) {\n            resourceField.store = editor.chainResourceStore();\n        }\n        editor.record = eventRecord;\n        if (resourceField) {\n            const resources = eventStore.assignmentStore.getResourcesForEvent(eventRecord);\n            // Flag on parent Container to indicate that initially blank fields are valid\n            editor.assigningValues = true;\n            // If this is an unassigned event, select the resource we've been provided\n            if (!eventRecord.isOccurrence && !eventStore.storage.includes(eventRecord, true) && resourceRecord) {\n                me.resourceField.value = resourceRecord.getValue(me.resourceField.valueField);\n            }\n            else if (me.assignmentStore) {\n                me.resourceField.value = resources.map((resource) => resource.getValue(me.resourceField.valueField));\n            }\n            editor.assigningValues = false;\n        }\n        super.internalLoadRecord(eventRecord, resourceRecord);\n    }\n    toggleEventType(eventType) {\n        // expose eventType in dataset, for querying and styling\n        this.editor.element.dataset.eventType = eventType || '';\n        this.editor.eachWidget(widget => { // need {}'s here so we don't return false and end iteration\n            widget.dataset?.eventType && (widget.hidden = widget.dataset.eventType !== eventType);\n        });\n    }\n    //endregion\n    //region Save\n    async finalizeEventSave(eventRecord, resourceRecords, resolve, reject) {\n        const\n            me = this,\n            {\n                scheduler,\n                assignmentStore\n            }  = me;\n        const aborted = false;\n        // Prevent multiple commits from this flow\n        assignmentStore.suspendAutoCommit();\n        // Avoid multiple redraws, from event changes + assignment changes\n        scheduler.suspendRefresh();\n        me.onBeforeSave(eventRecord);\n        eventRecord.beginBatch();\n        me.updateRecord(eventRecord);\n        eventRecord.endBatch();\n        if (!eventRecord.isOccurrence) {\n            if (me.resourceField) {\n                assignmentStore.assignEventToResource(eventRecord, resourceRecords, null, true);\n            }\n        }\n        // An occurrence event record may have changed only resources value. In that case we'll never get into afterChange() method that\n        // apply changed data and make an event \"real\", because resources is not a field and a record won't be marked as dirty.\n        // We used temporary field to save updated resources list and get into afterChange() method.\n        else if (resourceRecords) {\n            eventRecord.set('resourceRecords', resourceRecords);\n        }\n        // If it was a provisional event, passed in here from drag-create or dblclick or contextmenu,\n        // it's now it's no longer a provisional event and will not be removed in resetEditingContext\n        // Also, when promoted to be permanent, auto syncing will kick in if configured.\n        eventRecord.isCreating = false;\n        if (!aborted) {\n            await scheduler.project.commitAsync();\n        }\n        assignmentStore.resumeAutoCommit();\n        // Redraw once\n        scheduler.resumeRefresh(true);\n        if (!aborted) {\n            /**\n             * Fires on the owning Scheduler after an event is successfully saved\n             * @event afterEventSave\n             * @on-owner\n             * @param {Scheduler.view.Scheduler} source The scheduler instance\n             * @param {Scheduler.model.EventModel} eventRecord The record about to be saved\n             */\n            scheduler.trigger('afterEventSave', { eventRecord });\n            me.onAfterSave(eventRecord);\n        }\n        resolve(aborted ? false : eventRecord);\n    }\n    /**\n     * Saves the changes (applies them to record if valid, if invalid editor stays open)\n     * @private\n     * @fires beforeEventSave\n     * @fires beforeEventAdd\n     * @fires afterEventSave\n     * @async\n     */\n    save() {\n        return new Promise((resolve, reject) => {\n            const\n                me                         = this,\n                { scheduler, eventRecord } = me;\n            if (!eventRecord || !me.editor.isValid) {\n                resolve(false);\n                return;\n            }\n            const\n                { eventStore, values } = me,\n                resourceRecords        = me.resourceField?.records || (me.resourceRecord ? [me.resourceRecord] : []);\n            // Check for potential overlap scenarios before saving\n            if (!me.scheduler.allowOverlap && eventStore) {\n                let { startDate, endDate } = values;\n                // Should support using a duration field instead of the end date field\n                if (!endDate) {\n                    if ('duration' in values) {\n                        endDate = DateHelper.add(startDate, values.duration, values.durationUnit || eventRecord.durationUnit);\n                    }\n                    else if ('fullDuration' in values) {\n                        endDate = DateHelper.add(startDate, values.fullDuration);\n                    }\n                    else {\n                        endDate = eventRecord.endDate;\n                    }\n                }\n                const abort = resourceRecords.some(resource => {\n                    return !eventStore.isDateRangeAvailable(startDate, endDate, eventRecord, resource);\n                });\n                if (abort) {\n                    resolve(false);\n                    return;\n                }\n            }\n            const context = {\n                finalize(saveEvent) {\n                    try {\n                        if (saveEvent !== false) {\n                            me.finalizeEventSave(eventRecord, resourceRecords, resolve, reject);\n                        }\n                        else {\n                            resolve(false);\n                        }\n                    }\n                    catch (e) {\n                        reject(e);\n                    }\n                }\n            };\n            /**\n             * Fires on the owning Scheduler before an event is saved.\n             * Return `false` to immediately prevent saving\n             *\n             * ```javascript\n             *  scheduler.on({\n             *      beforeEventSave() {\n             *          // prevent saving if some custom variable hasn't 123 value\n             *          return myCustomValue === 123;\n             *      }\n             *  });\n             * ```\n             * or a `Promise` yielding `true` or `false` for async vetoing.\n             *\n             * ```javascript\n             *  scheduler.on({\n             *      beforeEventSave() {\n             *          const\n             *              // send ajax request\n             *              response = await fetch('http://my-server/check-parameters.php'),\n             *              data     = await response.json();\n             *\n             *          // decide whether it's ok to save based on response \"okToSave\" property\n             *          return data.okToSave;\n             *      }\n             *  });\n             * ```\n             *\n             * @event beforeEventSave\n             * @on-owner\n             * @param {Scheduler.view.Scheduler} source The scheduler instance\n             * @param {Scheduler.model.EventModel} eventRecord The record about to be saved\n             * @param {Scheduler.model.ResourceModel[]} resourceRecords The resources to which the event is assigned\n             * @param {Object} values The new values\n             * @param {Object} context Extended save context:\n             * @param {Boolean} [context.async] Set this to `true` in a listener to indicate that the listener will asynchronously decide to prevent or not the event save.\n             * @param {Function} context.finalize Function to call to finalize the save. Used when `async` is `true`. Provide `false` to the function to prevent the save.\n             * @preventable\n             * @async\n             */\n            const triggerResult = scheduler.trigger('beforeEventSave', { eventRecord, resourceRecords, values, context });\n            // Helper function to handle beforeEventSave listeners result\n            function handleEventResult(result, eventRecord, context) {\n                // save prevented by a listener\n                if (result === false) {\n                    resolve(false);\n                }\n                else {\n                    me.onRecurrableEventBeforeSave({ eventRecord, context });\n                    // truthy context.async means than a listener will decide to approve saving asynchronously\n                    if (!context.async) {\n                        context.finalize();\n                    }\n                }\n            }\n            if (ObjectHelper.isPromise(triggerResult)) {\n                triggerResult.then(result => handleEventResult(result, eventRecord, context));\n            }\n            else {\n                handleEventResult(triggerResult, eventRecord, context);\n            }\n        });\n    }\n    //endregion\n    //region Delete\n    /**\n     * Delete event being edited\n     * @fires beforeEventDelete\n     * @private\n     * @async\n     */\n    deleteEvent() {\n        this.detachListeners('changesWhileEditing');\n        return new Promise((resolve, reject) => {\n            const\n                me                      = this,\n                { eventRecord, editor } = me;\n            me.scheduler.removeEvents([eventRecord], removeRecord => {\n                // The reason it does it here is to move focus *before* it gets deleted,\n                // and then there's code in the delete to see that it's deleting the focused one,\n                // and jump forwards or backwards to move to the next or previous event\n                // See 'Should allow key activation' test in tests/view/mixins/EventNavigation.t.js\n                if (removeRecord && editor.containsFocus) {\n                    editor.revertFocus();\n                }\n                resolve(removeRecord);\n            }, editor);\n        });\n    }\n    //endregion\n    //region Stores\n    onChangeProject() {\n        // Release resource store on project change, it will be re-chained on next show\n        if (this.resourceField) {\n            this.resourceField.store = {}; // Cannot use null\n        }\n    }\n    get eventStore() {\n        return this.scheduler.project.eventStore;\n    }\n    get resourceStore() {\n        return this.scheduler.project.resourceStore;\n    }\n    get assignmentStore() {\n        return this.scheduler.project.assignmentStore;\n    }\n    //endregion\n    //endregion\n    //region Events\n    onActivateEditor({ eventRecord, resourceRecord, eventElement }) {\n        this.editEvent(eventRecord, resourceRecord, eventElement);\n    }\n    onDragCreateEnd({ eventRecord, resourceRecord, proxyElement, stmCapture }) {\n        this.editEvent(eventRecord, resourceRecord, proxyElement, stmCapture);\n    }\n    // chained from EventNavigation\n    onEventEnterKey({ assignmentRecord, eventRecord, target }) {\n        const\n            { client }  = this,\n            // Event can arrive from the wrap element in some products (such as Calendar)\n            // so in these cases, we must use querySelector to look *inside* the element.\n            element     = target[target.matches(client.eventSelector) ? 'querySelector' : 'closest'](client.eventInnerSelector);\n        if (assignmentRecord) {\n            this.editEvent(eventRecord, assignmentRecord.resource, element);\n        }\n        else if (eventRecord) {\n            this.editEvent(eventRecord, eventRecord.resource, element);\n        }\n    }\n    // Toggle fields visibility when changing eventType\n    onEventTypeChange({ value }) {\n        this.toggleEventType(value);\n    }\n    //endregion\n    //region Context menu\n    populateEventMenu({ eventRecord, resourceRecord, items }) {\n        if (!this.scheduler.readOnly && !this.disabled) {\n            items.editEvent = {\n                text        : 'L{EventEdit.Edit event}',\n                localeClass : this,\n                icon        : 'b-icon b-icon-edit',\n                weight      : 100,\n                disabled    : eventRecord.readOnly,\n                onItem      : () => {\n                    this.editEvent(eventRecord, resourceRecord);\n                }\n            };\n        }\n    }\n    //endregion\n    onBeforeEditorToggleReveal({ reveal }) {\n        if (reveal) {\n            this.editor.setupEditorButtons();\n        }\n        // reveal true/false is analogous to show/hide\n        this[reveal ? 'onBeforeEditorShow' : 'resetEditingContext']();\n    }\n    async resetEditingContext() {\n        const me = this;\n        me.detachListeners('changesWhileEditing');\n        // super call has to go before the `me.rejectStmTransaction();` below\n        // because it can be removing an event manually, bypassing the stm\n        super.resetEditingContext();\n        // client does not use STM for task editing (at least yet)\n        if (me.hasStmCapture && !me.isDeletingEvent && !me.isCancelingEdit) {\n            await me.freeStm(false);\n        }\n        // Clear to prevent retaining project\n        me.resourceRecord = null;\n    }\n    finalizeStmCapture(shouldReject) {\n        return this.freeStm(!shouldReject);\n    }\n    updateLocalization() {\n        if (this._editor) {\n            this.updateCSSVars({ element : this._editor.element });\n        }\n        super.updateLocalization(...arguments);\n    }\n}\nEventEdit._$name = 'EventEdit'; GridFeatureManager.registerFeature(EventEdit, true, 'Scheduler');\nGridFeatureManager.registerFeature(EventEdit, false, ['SchedulerPro', 'ResourceHistogram']);\nEventEdit.initClass();\n", "import List from '../../Core/widget/List.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\nimport ArrayHelper from '../../Core/helper/ArrayHelper.js';\n/**\n * @module Scheduler/widget/ResourceFilter\n */\n/**\n * A List which allows selection of resources to filter a specified eventStore to only show\n * events for the selected resources.\n *\n * Because this widget maintains a state that can be changed through the UI, it offers some of the\n * API of an input field. It has a read only {@link #property-value} property, and it fires a\n * {@link #event-change} event.\n *\n * @extends Core/widget/List\n * @classtype resourceFilter\n * @widget\n */\nexport default class ResourceFilter extends List {\n    static get $name() {\n        return 'ResourceFilter';\n    }\n    // Factoryable type name\n    static get type() {\n        return 'resourcefilter';\n    }\n    static get delayable() {\n        return {\n            applyFilters : 'raf'\n        };\n    }\n    static get configurable() {\n        return {\n            /**\n             * The {@link Scheduler.data.EventStore EventStore} to filter.\n             * Events for resources which are deselected in this List will be filtered out.\n             * @config {Scheduler.data.EventStore}\n             */\n            eventStore : null,\n            multiSelect            : true,\n            toggleAllIfCtrlPressed : true,\n            collapsibleGroups      : true,\n            itemTpl                : record => StringHelper.encodeHtml(record.name || ''),\n            /**\n             * An optional filter function to apply when loading resources from the project's\n             * resource store. Defaults to loading all resources.\n             *\n             * **This is called using this `ResourceFilter` as the `this` object.**\n             *\n             * @config {Function|String}\n             * @param {Scheduler.model.ResourceModel} resource Resorce for filtering\n             * @returns {Boolean} Returns `true` to include the passed resource\n             * @default\n             */\n            masterFilter : (resource) => true,\n            /**\n             * By default, deselecting list items filters only the {@link #config-eventStore} so that\n             * events for the deselected resources are hidden from view. The `resourceStore` is __not__\n             * filtered.\n             *\n             * Configure this as `true` to also filter the `resourceStore` so that deselected resources\n             * are also hidden from view (They will remain in this `List`)\n             * @config {Boolean}\n             * @default false\n             */\n            filterResources : null\n        };\n    }\n    itemIconTpl(record, i) {\n        const\n            { eventColor } = record,\n            // Named colors are applied using CSS\n            cls            = DomHelper.isNamedColor(eventColor) ? ` b-sch-foreground-${eventColor}` : '',\n            // CSS style color is used as is\n            style          = !cls && eventColor ? ` style=\"color:${eventColor}\"` : '';\n        return this.multiSelect ? `<div class=\"b-selected-icon b-icon${cls}\"${style}></div>` : '';\n    }\n    changeStore(store) {\n        if (this.eventStore) {\n            return super.changeStore(...arguments);\n        }\n        // If we have no eventStore yet, we cannot have a store.\n        // So in that case, just cache the configuration object for use when\n        // the eventStore arrives.\n        else {\n            this._storeConfig = store;\n        }\n    }\n    changeEventStore(eventStore) {\n        // Force ingestion of store.\n        // changeStore above won't upgrade it to be a Store because we have no eventStore yet.\n        // It will cache the config object as _storeConfig\n        this.getConfig('store');\n        return eventStore;\n    }\n    updateEventStore(eventStore) {\n        const\n            me                 = this,\n            // This will be the raw store config block cached by changeStore.\n            chainedStoreConfig = me._storeConfig || {},\n            // Allow configuration of the filter for loading records from the master store.\n            { resourceStore }  = eventStore,\n            store              = me.store = resourceStore.chain(me.masterFilter, null, {\n                ...chainedStoreConfig,\n                syncOrder : true\n            }),\n            changeListeners    = {\n                change  : 'onStoreChange',\n                thisObj : me\n            };\n        // We need to sync selection and rendering on changes fired from master store\n        store.un(changeListeners);\n        resourceStore.ion(changeListeners);\n        if (!resourceStore.count) {\n            resourceStore.project.ion({\n                name    : 'project',\n                refresh : 'initFilter',\n                thisObj : me\n            });\n        }\n        else {\n            me.initFilter();\n        }\n    }\n    changeMasterFilter(masterFilter) {\n        // Cannot use bind, otherwise fillFromMaster's check for whether it's a filter function fails.\n        const me = this;\n        // If we are filtering the resource store, we cannot now fill ourselves from the filtered\n        // view of the resource store. Otherwise, the list would hide the list items as they are deselected.\n        if (!me.filterResources) {\n            return function(r) {\n                return me.callback(masterFilter, me, [r]);\n            };\n        }\n    }\n    initFilter() {\n        const me = this;\n        if (me.eventStore.resourceStore.count) {\n            // Must only read selected *if* the resourceStore has received data.\n            // The lazy selected config must be left uningested until we have data.\n            const { selected } = me;\n            // We default to all resources selected unless this was configured with\n            // an initialSelection.\n            if (!selected.count) {\n                // If the initially configured selection was expicitly empty, apply the filter now\n                if (me.initialConfig.selected?.length === 0) {\n                    me.onInternalSelectionChange({ source : selected, added : [], removed : [] });\n                }\n                else {\n                    // Use allRecords in case it consists of collapsed groups\n                    selected.add(me.store.allRecords.filter(r => !r.isGroupHeader));\n                }\n            }\n            me.detachListeners('project');\n        }\n    }\n    onStoreRefresh({ source : store, action }) {\n        // We need to re-enable the filter if the store becomes filtered.\n        // We only disable the filter if we know that we have selected all available\n        // resources.\n        if (action === 'filter' && this.eventStoreFilter) {\n            const\n                { eventStoreFilter } = this,\n                { disabled }       = eventStoreFilter,\n                newDisabled        = !store.isFiltered && this.allSelected;\n            if (newDisabled !== disabled) {\n                eventStoreFilter.disabled = newDisabled;\n                this.applyFilters();\n            }\n        }\n        super.onStoreRefresh(...arguments);\n    }\n    onInternalSelectionChange({ source : selected, added, removed }) {\n        // Filter disabled if all resources selected\n        const\n            me       = this,\n            // Only disable the filter if the allSelected method is seeing *all* of the\n            // records from its masterStore with no filtering.\n            disabled = !me.store.isFiltered && me.allSelected;\n        super.onInternalSelectionChange(...arguments);\n        let filtersAdded = false;\n        // If this is the first selection change triggered from the first project refresh\n        // in which all the resources are selected, then we ony need to apply the filters.\n        // if *not* all resources are selected, ie if added.length !== entire store length.\n        if (!me.eventStoreFilter) {\n            // Our client EventStore is filtered to only show events for our selected resources.\n            // Events without an associated resource are filtered into visibility.\n            // The addFilter function with silent param adds the filter but don't reevaluate filtering.\n            me.eventStoreFilter = me.eventStore.addFilter({\n                id       : `${me.id}-filter-instance`,\n                filterBy : e => !e.resource || me.selected.includes(e.resources),\n                disabled\n            }, added?.length === me.store.count);\n            filtersAdded = true;\n        }\n        if (me.filterResources && !me.resourceStoreFilter) {\n            // Our client EventStore is filtered to only show events for our selected resources.\n            // Events without an associated resource are filtered into visibility.\n            // The addFilter function with silent param adds the filter but don't reevaluate filtering.\n            me.resourceStoreFilter = me.eventStore.resourceStore.addFilter({\n                id       : `${me.id}-filter-instance`,\n                filterBy : r => me.selected.includes(r),\n                disabled\n            }, added?.length === me.store.count);\n            filtersAdded = true;\n        }\n        // The filters have been just added and so will take effect. No need to call applyFilter.\n        if (filtersAdded) {\n            return;\n        }\n        // Filter disabled if all resources selected\n        me.eventStoreFilter.disabled = disabled;\n        me.resourceStoreFilter && (me.resourceStoreFilter.disabled = disabled);\n        // Have the client EventStore refresh its filtering but after a small delay so the List UI updates immediately.\n        me.applyFilters();\n        if (me.eventListeners.change) {\n            const\n                value    = selected.values,\n                oldValue = value.concat(removed);\n            ArrayHelper.remove(oldValue, ...added);\n            /**\n             * Fired when this widget's selection changes\n             * @event change\n             * @param {String} value - This field's value\n             * @param {String} oldValue - This field's previous value\n             * @param {Core.widget.Field} source - This ResourceFilter\n             */\n            me.triggerFieldChange({\n                value,\n                oldValue\n            });\n        }\n    }\n    /**\n     * An array encapsulating the currently selected resources.\n     * @member {Scheduler.model.ResourceModel[]}\n     * @readonly\n     */\n    get value() {\n        return this.selected.values;\n    }\n    applyFilters() {\n        this.eventStore.filter();\n        this.filterResources && this.eventStore.resourceStore.filter();\n    }\n    doDestroy() {\n        this.store?.destroy();\n        super.doDestroy();\n    }\n}\n// Register this widget type with its Factory\nResourceFilter.initClass();\nResourceFilter._$name = 'ResourceFilter';", "import DatePicker from '../../Core/widget/DatePicker.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport VersionHelper from '../../Core/helper/VersionHelper.js';\n/**\n * @module Scheduler/widget/SchedulerDatePicker\n */\n/**\n * A subclass of {@link Core.widget.DatePicker} which is able to show the presence of\n * events in its cells if configured with an {@link #config-eventStore}, and\n * {@link #config-showEvents} is set to a truthy value.\n *\n * The `datepicker` Widget type is implemented by this class when this class is imported, or built\n * into a bundle, and so any {@link Core.widget.DateField} may have its\n * {@link Core.widget.PickerField#config-picker} configured to use its capabilities of showing\n * the presence of events in its date cells.\n *\n * {@inlineexample Scheduler/widget/SchedulerDatePicker.js}\n *\n *\n * @extends Core/widget/DatePicker\n * @classtype datepicker\n * @widget\n */\nexport default class SchedulerDatePicker extends DatePicker {\n    static get $name() {\n        return 'SchedulerDatePicker';\n    }\n    static get type() {\n        return 'datepicker';\n    }\n    static get configurable() {\n        return {\n            /**\n             * How to show presence of events in the configured {@link #config-eventStore} in the\n             * day cells. Values may be:\n             *\n             * * `false` - Do not show events in cells.\n             * * `true` - Show a themeable bullet to indicate the presence of events for a date.\n             * * `'count'` - Show a themeable badge containing the event count for a date.\n             * @config {Boolean|'count'}\n             * @default false\n             */\n            showEvents : null,\n            /**\n             * The {@link Scheduler.data.EventStore event store} from which the in-cell event presence\n             * indicators are drawn.\n             * @config {Scheduler.data.EventStore}\n             */\n            eventStore : null,\n            /**\n             * A function, or the name of a function in the ownership hierarchy to filter which events\n             * are collected into the day cell data blocks.\n             *\n             * Return `true` to include the passed event, or a *falsy* value to exclude the event.\n             *\n             * @config {Function|String}\n             * @param {Scheduler.model.EventModel} event Event for filtering\n             * @returns {Boolean} Return `true` to include the passed event\n             */\n            eventFilter : {\n                $config : 'lazy',\n                value   : null\n            }\n        };\n    }\n    construct(config) {\n        // Handle deprecated events config. It is now showEvents.\n        // events conflicts with the events data which may be passed in\n        if ('events' in config) {\n            config = {\n                ...config,\n                showEvents : config.events\n            };\n            delete config.events;\n            VersionHelper.deprecate(VersionHelper['calendar'] ? 'Calendar' : 'Scheduler', '6.0.0', 'DatePicker#events should be configured as showEvents');\n        }\n        super.construct(config);\n    }\n    changeEventFilter(eventFilter) {\n        if (typeof eventFilter === 'string') {\n            const { handler, thisObj } = this.resolveCallback(eventFilter);\n            eventFilter = handler.bind(thisObj);\n        }\n        return eventFilter;\n    }\n    doRefresh() {\n        // Hidden widgets must not query the EventStore for loading on demand to be able to use\n        // the EventStore's dateRangeRequested event.\n        if (this.isVisible || !this.showEvents) {\n            this.refreshEventsMap();\n            return super.doRefresh(...arguments);\n        }\n        else {\n            this.whenVisible('doRefresh');\n        }\n    }\n    updateShowEvents(showEvents, oldShowEvents) {\n        const\n            me            = this,\n            { classList } = me.contentElement;\n        let { eventStore } = me;\n        // Begin any animations in the next AF\n        me.requestAnimationFrame(() => {\n            me.element.classList.toggle('b-datepicker-with-events', Boolean(showEvents));\n            me.owner?.element.classList.toggle('b-datepicker-with-events', Boolean(showEvents));\n            showEvents && classList.add(`b-show-events-${showEvents}`);\n            classList.remove(`b-show-events-${oldShowEvents}`);\n        });\n        if (showEvents) {\n            if (!eventStore) {\n                const eventStoreOwner = me.up(w => w.eventStore);\n                if (eventStoreOwner) {\n                    eventStore = eventStoreOwner.eventStore;\n                }\n                else {\n                    throw new Error('DatePicker configured with events but no eventStore');\n                }\n            }\n        }\n        else {\n            me.eventsMap = null;\n        }\n        if (!me.isConfiguring) {\n            me.updateEventStore(eventStore);\n            me.doRefresh();\n        }\n    }\n    refreshEventsMap() {\n        const me = this;\n        if (me.showEvents) {\n            me.eventsMap = me.eventStore.getEventCounts({\n                startDate : me.startDate,\n                endDate   : me.endDate,\n                dateMap   : me.eventsMap,\n                filter    : me.eventFilter\n            });\n        }\n    }\n    updateEventStore(eventStore) {\n        // Add a listener to refresh on any event change unless the listener is already added.\n        if (eventStore.findListener('change', 'refresh', this) === -1) {\n            eventStore?.[this.showEvents ? 'on' : 'un']?.({\n                change  : 'refresh',\n                thisObj : this\n            });\n        }\n    }\n    cellRenderer({ cell, date }) {\n        const\n            { showEvents } = this,\n            count          = this.eventCounts?.get?.(DateHelper.makeKey(date)),\n            isCount        = showEvents === 'count';\n        delete cell.dataset.btip;\n        if (count) {\n            if (!isCount && this.eventCountTip) {\n                cell.dataset.btip = this.L('L{ResourceInfoColumn.eventCountText}', count);\n            }\n            DomHelper.createElement({\n                dataset : {\n                    count\n                },\n                class : {\n                    [isCount ? 'b-cell-events-badge' : 'b-icon b-icon-circle'] : 1,\n                    [SchedulerDatePicker.getEventCountClass(count)]            : 1\n                },\n                parent                  : cell,\n                [isCount ? 'text' : ''] : count\n            });\n        }\n    }\n    static getEventCountClass(count) {\n        if (count) {\n            if (count < 4) {\n                return 'b-datepicker-1-to-3-events';\n            }\n            if (count < 7) {\n                return 'b-datepicker-4-to-6-events';\n            }\n            return 'b-calendar-7-or-more-events';\n        }\n        return '';\n    }\n    static setupClass(meta) {\n        // We take over the type name 'datepicker' when we are in the app\n        meta.replaceType = true;\n        super.setupClass(meta);\n    }\n}\n// Register this widget type with its Factory\nSchedulerDatePicker.initClass();\nSchedulerDatePicker._$name = 'SchedulerDatePicker';"],
  "mappings": "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",
  "names": ["RecurrenceLegend", "Localizable_default", "day", "index", "DateHelper", "recurrence", "timeSpanStartDate", "me", "timeSpan", "interval", "days", "monthDays", "months", "positions", "startDate", "tplData", "fn", "a", "b", "month", "position", "RecurrenceDayRuleEncoder", "array", "DH", "scheduleFields", "makeDate", "fields", "date", "time", "DateField", "dateValue", "copyTime", "dateTo", "dateFrom", "d", "adjustEndDate", "startTime", "newEndDate", "EditBase", "InstancePlugin", "client", "config", "ObjectHelper", "_a", "editorConfig", "items", "Objects", "Config", "ref", "itemCfg", "value", "source", "_b", "_c", "_d", "_e", "_f", "_g", "_h", "_i", "_j", "newStartDate", "editor", "startFields", "endFields", "values", "f", "widget", "name", "w", "eventRecord", "record", "nameField", "eventStore", "event", "saved", "removed", "EventEditor", "Popup", "Store", "eventEditFeature", "fieldConfig", "store", "deleteButton", "args", "reveal", "titleRenderer", "readOnly", "saveButton", "cancelButton", "RecurrenceCombo", "RecurrenceFrequencyCombo", "RecurrenceLegendButton", "Button", "eventStartDate", "RecurrenceEditor", "RecurringEventEdit_default", "Target", "Base", "show", "methodName", "rule", "eventCopy", "context", "recurrenceConfirmation", "Widget", "recurrenceEditor", "editRecurrenceButton", "userAction", "ResourceCombo", "Combo", "eventColor", "isStyleColor", "DomHelper", "style", "showEventColor", "picker", "oldPicker", "resourceIcon", "lastResourceIconCls", "classList", "punctuation", "EventEdit", "TaskEditStm_default", "Delayable_default", "scheduler", "editorListeners", "startDateField", "startTimeField", "endDateField", "endTimeField", "cls", "result", "element", "dateLength", "timeLength", "dateTimeLength", "resourceRecord", "align", "useInitialAnimation", "eventElement", "isPartOfStore", "AsyncHelper", "timeResolution", "step", "targetEventElement", "oldTargetEventElement", "stmCapture", "simpleEventEdit", "_editor", "isNewRecord", "TimeSpan", "resourceField", "resources", "resource", "eventType", "resourceRecords", "resolve", "reject", "assignmentStore", "aborted", "endDate", "saveEvent", "e", "triggerResult", "handleEventResult", "removeRecord", "proxyElement", "assignmentRecord", "target", "shouldReject", "GridFeatureManager", "ResourceFilter", "List", "StringHelper", "i", "chainedStoreConfig", "resourceStore", "changeListeners", "masterFilter", "r", "selected", "action", "eventStoreFilter", "disabled", "newDisabled", "added", "filtersAdded", "oldValue", "ArrayHelper", "SchedulerDatePicker", "_SchedulerDatePicker", "DatePicker", "VersionHelper", "eventFilter", "handler", "thisObj", "showEvents", "oldShowEvents", "eventStoreOwner", "cell", "count", "isCount", "meta"]
}
