{
  "version": 3,
  "sources": ["../../../../Core/lib/Core/helper/XMLHelper.js", "../../../../Core/lib/Core/helper/util/RandomGenerator.js", "../../../../Core/lib/Core/util/Parser.js", "../../../../Core/lib/Core/widget/TextAreaPickerField.js"],
  "sourcesContent": ["import Objects from './util/Objects.js';\nimport StringHelper from './StringHelper.js';\n/**\n * @module Core/helper/XMLHelper\n */\n/**\n * Helper for XML manipulation.\n */\nexport default class XMLHelper {\n    /**\n     * Convert a JavaScript object to an XML string.\n     *\n     * From:\n     * ```javascript\n     * {\n     *     name : 'Task 1',\n     *     data : [\n     *         {\n     *             text : 'foo 1',\n     *             ref  : 'fooItem 1'\n     *         },\n     *         {\n     *             text : 'foo 2',\n     *             ref  : 'fooItem 2'\n     *         }\n     *     ]\n     * }\n     * ```\n     *\n     * To:\n     * ```xml\n     * <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n     * <root>\n     *     <name>Task 1</name>\n     *     <data>\n     *         <element>\n     *             <text>foo 1</text>\n     *             <ref>fooItem 1</ref>\n     *         </element>\n     *         <element>\n     *             <text>foo 2</text>\n     *             <ref>fooItem 2</ref>\n     *         </element>\n     *     </data>\n     * </root>\n     * ```\n     *\n     * @param {Object} obj Object to convert.\n     * @param {Object} [options] Convert options.\n     * @param {String} [options.rootName] Root name for the XML. `root` by default.\n     * @param {String} [options.elementName] Element name for each node of the XML. `element` by default.\n     * @param {String} [options.xmlns] Add value for xmlns property for the root tag of the XML.\n     * @param {Boolean} [options.includeHeader] `false` to not include the header `<?xml version=\"1.0\" encoding=\"UTF-8\"?>` on top of the XML.\n     * @param {Boolean} [options.rootElementForArray] `false` to not include a root element for array of items. e.g. for the above example:\n     * ```xml\n     * <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n     * <root>\n     *     <name>Task 1</name>\n     *     <element>\n     *         <text>foo 1</text>\n     *         <ref>fooItem 1</ref>\n     *     </element>\n     *     <element>\n     *         <text>foo 2</text>\n     *         <ref>fooItem 2</ref>\n     *     </element>\n     * </root>\n     * ```\n     * @returns {String} the XML\n     */\n    static convertFromObject(obj, options = {}) {\n        // override default values\n        Objects.assignIf(options, {\n            rootName            : 'root',\n            elementName         : 'element',\n            includeHeader       : true,\n            rootElementForArray : true\n        });\n        const { rootName, elementName, includeHeader, rootElementForArray } = options;\n        let { xmlns } = options;\n        xmlns = xmlns ? ` xmlns=\"${xmlns}\"` : '';\n        const header = includeHeader ? '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>' : '';\n        const converter = (o) => {\n            const xmlItems = [];\n            for (const key in o) {\n                const item = o[key];\n                if (Array.isArray(item)) {\n                    if (rootElementForArray) {\n                        xmlItems.push(`<${key}>`);\n                    }\n                    for (const subItem of item) {\n                        if (elementName.length) {\n                            xmlItems.push(`<${elementName}>`);\n                        }\n                        else {\n                            xmlItems.push(`<${key}>`);\n                        }\n                        xmlItems.push(converter(subItem));\n                        if (elementName.length) {\n                            xmlItems.push(`</${elementName}>`);\n                        }\n                        else {\n                            xmlItems.push(`</${key}>`);\n                        }\n                    }\n                    if (rootElementForArray) {\n                        xmlItems.push(`</${key}>`);\n                    }\n                }\n                else if (Objects.isObject(item)) {\n                    xmlItems.push(`<${key}>${converter(item)}</${key}>`);\n                }\n                else {\n                    if (item == null) {\n                        xmlItems.push(`<${key}/>`);\n                    }\n                    else {\n                        xmlItems.push(`<${key}>${StringHelper.encodeHtml(item)}</${key}>`);\n                    }\n                }\n            }\n            return xmlItems.join('');\n        };\n        return `${header}<${rootName}${xmlns}>${converter(obj)}</${rootName}>`;\n    }\n}\nXMLHelper._$name = 'XMLHelper';", "/**\n * @module Core/helper/util/RandomGenerator\n */\n/**\n * Generates pseudo random numbers from predefined sequence of 100 numbers\n */\nexport default class RandomGenerator {\n    constructor() {\n        this.random100 = [46, 2, 36, 46, 54, 59, 18, 20, 71, 55, 88, 98, 13, 61, 61, 40, 2, 15, 3, 32, 51, 45, 64, 25, 81, 85, 54, 13, 57, 49, 64, 22, 81, 94, 0, 62, 17, 7, 11, 2, 33, 99, 85, 26, 83, 83, 96, 26, 20, 89, 91, 38, 26, 13, 11, 79, 32, 30, 5, 51, 70, 7, 5, 56, 58, 77, 37, 89, 40, 80, 78, 59, 26, 36, 8, 51, 60, 23, 86, 5, 11, 96, 64, 94, 87, 64, 4, 78, 17, 85, 35, 0, 90, 86, 23, 55, 53, 9, 35, 59, 29, 2, 64, 42, 8, 49, 43, 73, 6, 53, 38, 9, 39, 31, 32, 40, 49, 13, 78, 68, 20, 99, 24, 78, 35, 91, 73, 46, 67, 76, 89, 69, 30, 69, 25, 3, 4, 55, 1, 65, 66, 76, 83, 19, 67, 1, 95, 24, 54, 45, 56, 40, 67, 92, 72, 4, 69, 8, 47, 50, 27, 2, 38, 9, 14, 83, 12, 14, 62, 95, 22, 47, 35, 18, 38, 14, 86, 64, 68, 61, 52, 69, 39, 93, 20, 73, 32, 52, 74, 6, 56, 68, 99, 29, 24, 92, 40, 67, 6, 72, 31, 41, 91, 53, 80, 55, 33, 97, 97, 99, 18, 20, 5, 27, 82, 84, 61, 78, 27, 67, 7, 42, 75, 95, 91, 25, 63, 21, 70, 36, 46, 0, 1, 45, 84, 6, 86, 15, 10, 62, 96, 94, 10, 23, 93, 83, 94, 47, 5, 29, 29, 52, 51, 37, 77, 96, 43, 72, 43, 14, 54, 14, 72, 52, 4, 39, 15, 26, 68, 28, 25, 76, 60, 50, 22, 40, 72, 74, 68, 58, 8, 48, 40, 62, 52, 24, 9, 26, 47, 44, 49, 96, 7, 77, 90, 45, 76, 47, 5, 86, 1, 36, 18, 42, 19, 90, 34, 23, 70, 32, 69, 79, 0, 99, 57, 80, 72, 21, 19, 72, 85, 68, 4, 40, 86, 62, 0, 63, 4, 11, 69, 31, 78, 31, 21, 78, 29, 84, 13, 53, 57, 10, 26, 50, 24, 30, 90, 42, 51, 96, 93, 21, 99, 23, 81, 0, 89, 43, 86, 63, 93, 19, 54, 71, 92, 36, 4, 95, 37, 99, 60, 29, 23, 50, 68, 95, 57, 95, 77, 53, 99, 78, 75, 12, 92, 47, 23, 14, 0, 41, 98, 11, 34, 64, 26, 90, 50, 23, 38, 31, 74, 76, 16, 76, 66, 23, 22, 72, 48, 50, 20, 36, 37, 58, 5, 43, 49, 64, 81, 30, 8, 21, 98, 75, 60, 17, 50, 42, 27, 38, 90, 74, 45, 68, 67, 27, 31, 15, 58, 76, 41, 99, 23, 98, 53, 98, 56, 19, 79, 2, 4, 38, 96, 24, 65, 51, 43, 42, 41, 60, 46, 7, 90, 65, 3, 27, 63, 99, 51, 44, 86, 1, 54, 40, 15, 74, 3, 81, 51, 63, 87, 79, 84, 72, 22, 38, 96, 95, 33, 41, 21, 99, 21, 69, 7, 49, 40, 52, 41, 6, 91, 19, 76, 40, 54, 17, 33, 11, 11, 0, 1, 32, 94, 33, 13, 18, 45, 7, 85, 61, 42, 54, 45, 72, 78, 96, 17, 9, 80, 87, 41, 96, 66, 0, 8, 59, 18, 21, 2, 28, 64, 75, 97, 32, 80, 86, 97, 97, 55, 2, 73, 75, 11, 89, 67, 58, 70, 76, 12, 46, 64, 17, 22, 97, 25, 35, 93, 57, 82, 46, 57, 61, 31, 74, 27, 4, 32, 85, 53, 86, 53, 53, 42, 5, 28, 50, 65, 63, 70, 61, 73, 37, 13, 80, 7, 34, 22, 3, 26, 6, 62, 78, 12, 56, 87, 41, 58, 64, 31, 27, 45, 35, 18, 66, 62, 43, 89, 69, 94, 93, 33, 74, 2, 43, 85, 37, 82, 41, 74, 9, 15, 44, 33, 42, 65, 19, 1, 49, 78, 12, 29, 9, 78, 7, 55, 12, 45, 40, 33, 16, 86, 14, 52, 16, 73, 76, 0, 98, 75, 91, 78, 46, 99, 95, 90, 69, 78, 45, 62, 55, 37, 88, 49, 77, 27, 83, 38, 73, 39, 1, 75, 40, 65, 83, 54, 95, 7, 73, 4, 30, 26, 36, 89, 21, 5, 95, 11, 14, 87, 45, 36, 21, 77, 55, 5, 66, 51, 98, 48, 62, 74, 58, 23, 82, 30, 28, 19, 53, 89, 76, 98, 8, 34, 70, 28, 54, 16, 52, 35, 93, 54, 54, 72, 49, 18, 93, 72, 90, 71, 73, 15, 60, 38, 80, 76, 53, 70, 39, 69, 25, 5, 31, 61, 46, 6, 54, 34, 31, 52, 33, 36, 79, 76, 44, 29, 28, 38, 1, 66, 2, 90, 91, 1, 76, 78, 31, 55, 37, 71, 2, 3, 38, 85, 0, 95, 42, 2, 39, 57, 87, 61, 77, 98, 2, 24, 80, 48, 27, 47, 71, 15, 7, 49, 60, 86, 3, 2, 29, 38, 54, 36, 59, 83, 27, 47, 9, 36, 42, 8, 73, 85, 9, 16, 73, 60, 39, 12, 43, 25, 23, 29, 28, 47, 40, 77, 20, 89, 22, 30, 41, 59, 96, 19, 56, 20, 76, 73, 39, 46, 72, 40, 47, 37, 52, 29, 79, 37, 39, 50, 41, 87, 66, 17, 75, 31, 45, 26, 88, 70, 11, 90, 40, 74, 9, 32, 65, 72, 61, 6, 93, 54, 15, 84, 22, 99, 47, 10, 96, 4, 84, 19, 85, 73, 45, 25, 16, 8, 94, 99, 39, 28, 26, 68, 87, 48, 1, 65, 86, 46, 86, 7, 60, 82, 45, 75, 38, 56, 41, 35, 30, 86, 91, 97, 85, 45, 5, 14, 69, 85, 96, 37, 18, 26, 16, 38, 16, 1, 44, 94, 85, 58, 60, 20, 5, 47, 52, 41, 50, 71, 43, 42, 67, 64, 38, 65, 83, 99, 78, 96, 33, 20, 98, 24, 6, 2, 25, 16, 16, 44, 63, 24, 68, 56, 49, 91, 15, 59, 99, 27, 43, 34, 28, 36, 45, 1, 10, 19, 54, 26, 75, 17, 88, 96, 63, 24, 71, 93, 72, 97, 66, 87, 18, 86];\n        this.randomCache = {};\n        this.rndIndex    = 0;\n    }\n    /**\n     * Returns next pseudo random integer number from sequence between 0 and max parameter value (99 is maximum value)\n     * @param {Number} max max value\n     * @returns {Number}\n     */\n    nextRandom(max) {\n        const { randomCache } = this;\n        let randomNumbers;\n        if (randomCache[max]) {\n            randomNumbers = randomCache[max];\n        }\n        else {\n            randomNumbers    = this.random100.filter(num => num < max);\n            randomCache[max] = randomNumbers;\n        }\n        return randomNumbers[this.rndIndex++ % randomNumbers.length];\n    }\n    /**\n     * Resets sequence to initial number\n     */\n    reset() {\n        this.rndIndex = 0;\n    }\n    /**\n     * Returns pseudo random array element\n     * @param {Array} array input array\n     * @returns {*}\n     */\n    fromArray(array) {\n        return array[this.nextRandom(array.length)];\n    }\n    /**\n     * Creates a randon array from a larger array of possibilities\n     */\n    randomArray(array, maxLength) {\n        const\n            result = [],\n            length = this.nextRandom(maxLength + 1),\n            used   = {};\n        for (let i = 0, index = this.nextRandom(array.length); i < length; i++) {\n            // Each element must be unique\n            while (used[index]) {\n                index = this.nextRandom(array.length);\n            }\n            used[index] = true;\n            result.push(array[index]);\n        }\n        return result;\n    }\n}\nRandomGenerator._$name = 'RandomGenerator';", "import ObjectHelper from '../helper/ObjectHelper.js';\n// The code is based on https://epsil.github.io/gll/ article (MIT license).\n/**\n * @module Core/util/Parser\n */\n// Tools. Maybe move it to memoization module.\nlet nextObjectIdentity = 0;\nconst objectIdentityMap = new WeakMap();\nconst argsToCacheKey = (...args) => args.map((arg) => {\n    let result;\n    if (arg && typeof arg == 'object' || typeof arg == 'function') {\n        result = objectIdentityMap.get(arg);\n        if (result === undefined) {\n            result = ++nextObjectIdentity;\n            objectIdentityMap.set(arg, result);\n        }\n    }\n    else {\n        result = String(arg);\n    }\n    return result;\n}).join('-');\n/**\n * Generic memoization function. Wraps `fn` into higher order function which caches `fn` result\n * using stringified arguments as the cache key.\n *\n * @param {Function} fn function to memoize\n */\nexport const memo = (fn) => {\n    const mlist = new Map();\n    return (...args) => {\n        const mkey = argsToCacheKey(args);\n        let result = mlist.get(mkey);\n        if (result === undefined) {\n            result = fn(...args);\n            mlist.set(mkey, result);\n        }\n        return result;\n    };\n};\n/**\n * Specific memoization function caches `fn` calls. `fn` should receive 2 arguments, the first one\n * is a string, and the second one is a callback which should be called by `fn` with some result.\n * The function returned wraps `fn` and it's callback such that `fn` would be called only once\n * with a particular first argument, other time callback will be called instantly with the result cached.\n *\n * @param {Function} fn function to memoize\n */\nexport const memoCps = (fn) => {\n    const table = new Map(),\n        entryContinuations = (entry) => entry[0],\n        entryResults = (entry) => entry[1],\n        pushContinuation = (entry, cont) => entryContinuations(entry).push(cont),\n        pushResult = (entry, result) => entryResults(entry).push(result),\n        isResultSubsumed = (entry, result) => entryResults(entry).some(r => ObjectHelper.isEqual(r, result)),\n        makeEntry = () => [[], []],\n        isEmptyEntry = (entry) => !entryResults(entry).length && !entryContinuations(entry).length,\n        tableRef = (str) => {\n            let entry = table.get(str);\n            if (entry === undefined) {\n                entry = makeEntry();\n                table.set(str, entry);\n            }\n            return entry;\n        };\n    return (str, cont) => {\n        const entry = tableRef(str);\n        if (isEmptyEntry(entry)) {\n            pushContinuation(entry, cont);\n            fn(str, (result) => {\n                if (!isResultSubsumed(entry, result)) {\n                    pushResult(entry, result);\n                    entryContinuations(entry).forEach(cont => cont(result));\n                }\n            });\n        }\n        else {\n            pushContinuation(entry, cont);\n            entryResults(entry).forEach(result => cont(result));\n        }\n    };\n};\n// End of tools\nconst SUCCESS = Symbol('success');\nconst FAILURE = Symbol('failure');\n/**\n * Successful parsing result. Represented as array with 3 items:\n * - SUCCESS symbol which can be checked with {@link #function-isSuccess} function.\n * - Parsed payload\n * - Rest string left to parse\n *\n * @typedef {Array} SuccessResult\n */\n/**\n * Creates successful parsing result with parsed `val` and unparsed `rest`\n *\n * @param {String} val Parsed value\n * @param {String} rest Unparsed rest\n * @returns {SuccessResult}\n */\nexport const success = (val, rest) => [SUCCESS, val, rest];\n/**\n * Failure parsing result. Represented as array with 2 items:\n * - FAILURE symbol which can be checked with {@link #function-isSuccess} function\n * - Rest string left to parse\n *\n * @typedef {Array} FailureResult\n */\n/**\n * Creates failed parsing result with unparsed `rest`\n *\n * @param {String} rest Unparsed rest\n * @returns {FailureResult}\n */\nexport const failure = (rest) => [FAILURE, rest];\n/**\n * Checks if the given parsing `result` is successful\n *\n * @param {SuccessfulResult|FailureResult} result\n */\nexport const isSuccess = (result) => result.length && result[0] === SUCCESS;\n/**\n * Resolves parser when needed. Parser should be resolved if it's defined as a function\n * with no arguments which returns the actual parser function with more then one argument.\n *\n * @param {Function} p Parser factory\n * @returns {Function} Combinable parser function\n */\nexport const resolveParser = (p) => typeof p === 'function' && !p.length ? p() : p;\n/**\n * Returns combinable parser which always return successful parsing result with `val`\n * as parsed result and string parsed as `rest`.\n *\n * ```javascript\n * const sp = succeed('Ok');\n * sp('My string', (r) => console.dir(r)) // Will output successful parsing result with `Ok` payload and `My string` rest.\n * ```\n *\n * @param {*} val Successful parsing result parsed payload\n * @returns {Function} Combinable parser function\n */\nexport const succeed =\n    memo(\n        (val) =>\n            memoCps(\n                (str, cont) =>\n                    cont(success(val, str))\n            )\n    );\n/**\n * Returns combinable parser which succeeds if string parsed starts with `match`. The parsing\n * result will contain `match` as parsed result and rest of the string characters,\n * the ones after `match` as the unparsed rest.\n *\n * ```javascript\n * const mp = string('My');\n * mp('My string', (r) => console.dir(r)); // Will output successful parsing result with `My` payload and `string` rest.\n * ```\n *\n * @param {String} match String to match\n * @returns {Function} Combinable parser function\n */\nexport const string =\n    memo(\n        (match) =>\n            memoCps(\n                (str, cont) => {\n                    const len = Math.min(match.length, str.length),\n                        head = str.substr(0, len),\n                        tail = str.substr(len);\n                    cont(head === match ? success(head, tail) : failure(tail));\n                }\n            )\n    );\n/**\n * Binds parser or parser factory with a `fn` function which should receive one string argument\n * and return a combinable parser function.\n *\n * @param {Function} p Combinable parser function or combinable parser factory which can be\n *                     resolved using with {@link #function-resolveParser}.\n * @param {Function} fn A function receiving one string argument and returning combinable parser function.\n *\n * @internal\n */\nexport const bind = (p, fn) =>\n    (str, cont) =>\n        resolveParser(p)(str, (result) => {\n            if (isSuccess(result)) {\n                const [, val, rest] = result;\n                fn(val)(rest, cont);\n            }\n            else {\n                cont(result);\n            }\n        });\n/**\n * Combines several combined parser functions or combinable parser factories in sequence such that second starts after first succeeds\n * third after second etc, if first fails then second will not be called and so on.\n *\n * ```javascript\n * const ab = seq(string('a'), string('b'));\n * ab('abc', (r) => console.dir(r)); // Will output successful parsing result with `ab` as parsed payload and `c` as the rest.\n * ```\n *\n * @param {...Function} parsers Combinable parser function or combinable parser factory which can be\n * @returns {Function} Combinable parser function\n */\nexport const seq =\n    memo(\n        (...parsers) => {\n            const seq2 = memo(\n                (a, b) =>\n                    memoCps(\n                        bind(\n                            a,\n                            (x) => bind(\n                                b,\n                                (y) => succeed([].concat(x, y))\n                            )\n                        )\n                    )\n            );\n            return parsers.reduce(seq2, succeed([]));\n        }\n    );\n/**\n * Combines several combined parser functions or combinable parser factories in alteration such that successful parsing result will be passed into\n * a callback if one of those parsers succeeds.\n *\n * ```javascript\n * const aorb = alt(string('a'), string('b'));\n * aorb('abc', (r) => console.dir(r)); // Will output successful parsing result with `a` as parsed payload and `bc` as the rest.\n * aorb('bbc', (r) => console.dir(r)); // Will output successful parsing result with `b` as parsed payload and `bc` as the rest.\n * ```\n *\n * @param {...Function} parsers Combinable parser function or combinable parser factory which can be\n *  resolved using with {@link #function-resolveParser}.\n * @returns {Function} Combinable parser function\n */\nexport const alt =\n    memo(\n        (...parsers) =>\n            memoCps(\n                (str, cont) =>\n                    parsers.forEach(p => resolveParser(p)(str, cont))\n            )\n    );\n/**\n * Creates combinable parser which succeeds if string to parse starts from a substring which succeeds for the regular expression\n * `pattern` the parser is created with.\n *\n * ```javascript\n * const rp = regexp('a+');\n * rp('aaabb', (r) => console.dir(r)); // Will output successful parsing result with `aaa` as parsed payload and `bb` as the rest.\n * ```\n *\n * @param {String} pattern Regular expression pattern\n * @returns {Function} Combinable parser function\n */\nexport const regexp =\n    memo(\n        (pattern) =>\n            (str, cont) => {\n                const rexp = new RegExp(`^${pattern}`),\n                    match = rexp.exec(str);\n                if (match) {\n                    const head = match[0],\n                        tail = str.substr(head.length);\n                    cont(success(head, tail));\n                }\n                else {\n                    cont(failure(str));\n                }\n            }\n    );\n/**\n * Creates reducing combinable parser function which should be used to create semantic actions\n * on parsed results.\n *\n * ```javascript\n * const nump = red(\n *     regexp('\\d'),\n *     Number\n * );\n *\n * const plusp = string('+');\n *\n * const sump = red(\n *     seq(nump, plusp, nump),\n *     (a, _, b) => a + b\n * );\n *\n * sump('7+8', (r) => console.dir(r)); // Will return successful parsing result with `15` as parsing payload and `` as rest.\n * ```\n *\n * @param {Function} p Combinable parser function or combinable parser factory which can be\n *  resolved using with {@link #function-resolveParser}.\n * @param {Function} fn Semantic action function should be the same arity as the successful result arity *  of `p` parser.\n * @returns {Function} Combinable parser function\n */\nexport const red =\n    memo(\n        (p, fn) =>\n            bind(\n                p,\n                (...val) =>\n                    succeed(fn(...[].concat.apply([], val)))\n            )\n    );\n/**\n * Runs combinable parsing function returning totally parsed results only, i.e. such results which have\n * parsed the `str` string completely.\n *\n * @param {Function} body Combinable parser function\n * @param {String} str String to parse\n * @returns {SuccessfulResult[]} All totally parsed results possible for the given parsing function.\n */\nexport const runParser = (body, str) => {\n    const results = [];\n    body(str, (result) => {\n        if (isSuccess(result)) {\n            const [, , left] = result;\n            if (left === '') {\n                results.push(result);\n            }\n        }\n    });\n    return results;\n};\n/**\n * Helper function for combinable parser definition supplements combinable parser function\n * returning a higher order function which when called with 2 arguments (string to parse and\n * a callback function) behaves exactly like parser function, but when called with 1 argument\n * it wraps call to parser function with {@link function-runParser} thus returning array of\n * totally parsed results.\n *\n * @param {Function} body Combinable parser function\n */\nexport const defineParser = (body) =>\n    (str, cont) => cont ? resolveParser(body)(str, cont) : runParser(resolveParser(body), str);\n//Combines exports in an object such that it was possible to export parser utilities\n// in UMD/module bundles.\nexport default {\n    memo,\n    memoCps,\n    success,\n    failure,\n    isSuccess,\n    resolveParser,\n    succeed,\n    string,\n    bind,\n    seq,\n    alt,\n    regexp,\n    red,\n    runParser,\n    defineParser\n};\n", "import PickerField from './PickerField.js';\nimport Objects from '../helper/util/Objects.js';\nimport EventHelper from '../helper/EventHelper.js';\nimport VersionHelper from '../helper/VersionHelper.js';\n/**\n * @module Core/widget/TextAreaPickerField\n */\n/**\n * TextAreaPickerField is a picker field with a drop down showing a `textarea` element for multiline text input. See also\n * {@link Core.widget.TextAreaField}.\n *\n * ```javascript\n * let textAreaField = new TextAreaPickerField({\n *   placeholder: 'Enter some text'\n * });\n *```\n *\n * This field can be used as an {@link Grid.column.Column#config-editor editor} for {@link Grid.column.Column Columns}.\n *\n *\n * {@inlineexample Core/widget/TextAreaPickerField.js}\n *\n * @extends Core/widget/PickerField\n * @classtype textareapickerfield\n * @inputfield\n */\nexport default class TextAreaPickerField extends PickerField {\n    static $name = 'TextAreaPickerField';\n    static type = 'textareapickerfield';\n    static get configurable() {\n        return {\n            picker : {\n                type         : 'widget',\n                tag          : 'textarea',\n                cls          : 'b-textareapickerfield-picker',\n                scrollAction : 'realign',\n                align        : {\n                    align    : 't-b',\n                    axisLock : true\n                },\n                autoShow : false\n            },\n            triggers : {\n                expand : {\n                    cls     : 'b-icon-picker',\n                    handler : 'onTriggerClick'\n                }\n            },\n            /**\n             * The resize style to apply to the `<textarea>` element.\n             * @config {'none'|'both'|'horizontal'|'vertical'}\n             * @default\n             */\n            resize : 'none',\n            inputType : null\n        };\n    }\n    startConfigure(config) {\n        if (typeof config.inline === 'boolean') {\n            VersionHelper.deprecate('Core', '6.0.0', 'TextAreaPickerField.inline config is no longer supported');\n        }\n        super.startConfigure(config);\n    }\n    get inputElement() {\n        const\n            result = super.inputElement;\n        result.readOnly = 'readonly';\n        result.reference = 'displayElement';\n        this.ariaElement = 'displayElement';\n        return result;\n    }\n    get focusElement() {\n        return this._picker?.isVisible ? this.input : this.displayElement;\n    }\n    get needsInputSync() {\n        return this.displayElement[this.inputValueAttr] !== String(this.inputValue ?? '');\n    }\n    showPicker() {\n        const\n            me         = this,\n            { picker } = me;\n        // Block picker if inline\n        if (!me.inline) {\n            picker.width = me.pickerWidth || me[me.pickerAlignElement].offsetWidth;\n            // Always focus the picker.\n            super.showPicker(true);\n        }\n    }\n    focusPicker() {\n        this.input.focus();\n    }\n    onPickerKeyDown(keyEvent) {\n        const\n            me        = this,\n            realInput = me.input;\n        switch (keyEvent.key.trim() || keyEvent.code) {\n            case 'Escape':\n                me.picker.hide();\n                return;\n            case 'Enter':\n                if (keyEvent.ctrlKey) {\n                    me.syncInputFieldValue();\n                    me.picker.hide();\n                }\n                break;\n        }\n        // Super's onPickerKeyDown fires through this.input, so avoid infinite recursion\n        // by redirecting it through the displayElement.\n        me.input     = me.displayElement;\n        const result = super.onPickerKeyDown(keyEvent);\n        me.input     = realInput;\n        return result;\n    }\n    syncInputFieldValue(skipHighlight) {\n        if (this.displayElement) {\n            this.displayElement.value = this.inputValue;\n        }\n        super.syncInputFieldValue(skipHighlight);\n    }\n    changeValue(value) {\n        return value == null ? '' : value;\n    }\n    changePicker(picker, oldPicker) {\n        const\n            me          = this,\n            pickerWidth = me.pickerWidth || picker?.width;\n        picker = TextAreaPickerField.reconfigure(oldPicker, picker ? Objects.merge({\n            owner      : me,\n            forElement : me[me.pickerAlignElement],\n            align      : {\n                matchSize : pickerWidth == null,\n                anchor    : me.overlayAnchor,\n                target    : me[me.pickerAlignElement]\n            },\n            id    : me.id + '-input',\n            style : {\n                resize : me.resize\n            },\n            html : me.value ?? ''\n        }, picker) : null, me);\n        // May have been set to null (destroyed)\n        if (picker) {\n            const input = me.input = picker.element;\n            me.inputListenerRemover = EventHelper.on({\n                element  : input,\n                thisObj  : me,\n                focus    : 'internalOnInputFocus',\n                change   : 'internalOnChange',\n                input    : 'internalOnInput',\n                keydown  : 'internalOnKeyEvent',\n                keypress : 'internalOnKeyEvent',\n                keyup    : 'internalOnKeyEvent'\n            });\n        }\n        return picker;\n    }\n}\n// Register this widget type with its Factory\nTextAreaPickerField.initClass();\nTextAreaPickerField._$name = 'TextAreaPickerField';"],
  "mappings": "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",
  "names": ["XMLHelper", "obj", "options", "Objects", "rootName", "elementName", "includeHeader", "rootElementForArray", "xmlns", "header", "converter", "o", "xmlItems", "key", "item", "subItem", "StringHelper", "RandomGenerator", "max", "randomCache", "randomNumbers", "num", "array", "maxLength", "result", "length", "used", "i", "index", "nextObjectIdentity", "objectIdentityMap", "argsToCacheKey", "args", "arg", "memo", "fn", "mlist", "mkey", "memoCps", "table", "entryContinuations", "entry", "entryResults", "pushContinuation", "cont", "pushResult", "isResultSubsumed", "r", "ObjectHelper", "makeEntry", "isEmptyEntry", "tableRef", "str", "SUCCESS", "FAILURE", "success", "val", "rest", "failure", "isSuccess", "resolveParser", "p", "succeed", "string", "match", "len", "head", "tail", "bind", "seq", "parsers", "seq2", "a", "b", "x", "y", "alt", "regexp", "pattern", "rexp", "red", "runParser", "body", "results", "left", "defineParser", "Parser_default", "_TextAreaPickerField", "PickerField", "config", "VersionHelper", "_a", "me", "picker", "keyEvent", "realInput", "skipHighlight", "value", "oldPicker", "pickerWidth", "input", "EventHelper", "__publicField", "TextAreaPickerField"]
}
