{
  "version": 3,
  "sources": ["../../../../Core/lib/Core/widget/mixin/Styleable.js"],
  "sourcesContent": ["import Base from '../../Base.js';\nimport ObjectHelper from '../../helper/ObjectHelper.js';\nimport StringHelper from '../../helper/StringHelper.js';\n/**\n * @module Core/widget/mixin/Styleable\n */\n/**\n * Mixin for widgets that allows manipulating CSS variables. Works by setting style properties of the target widgets\n * element.\n *\n * As part of configuration:\n *\n * ```javascript\n * const taskBoard = new TaskBoard({\n *    css : {\n *        cardBorderTop    : '5px solid currentColor',\n *        columnBackground : '#ddd'\n *    }\n * });\n * ```\n *\n * And/or at runtime:\n *\n * ```javascript\n * taskBoard.css.cardBackground = '#333';\n * ```\n *\n * @mixin\n */\nexport default Target => class Styleable extends (Target || Base) {\n    static $name = 'Styleable';\n    static configurable = {\n        /**\n         * CSS variable prefix, appended to the keys used in {@link #config-css}.\n         *\n         * For example:\n         *\n         * ```javascript\n         * {\n         *    cssVarPrefix : 'taskboard',\n         *\n         *    css : {\n         *        cardBackground : '#333'\n         *    }\n         * }\n         * ```\n         *\n         * Results in the css var `--taskboard-card-background` being set to `#333`.\n         * @config {String}\n         * @category CSS\n         */\n        cssVarPrefix : '',\n        /**\n         * Allows runtime manipulating of CSS variables.\n         *\n         * See {@link #config-css} for more information.\n         *\n         * ```javascript\n         * taskBoard.css.columnBackground = '#ccc';\n         *\n         * // Will set \"--taskboard-column-background : #ccc\"\n         * ```\n         *\n         * @member {Proxy} css\n         * @typings {typeof Proxy}\n         * @category DOM\n         */\n        /**\n         * Initial CSS variables to set.\n         *\n         * Each key will be applied as a CSS variable to the target elements style. Key names are hyphenated and\n         * prefixed with {@link #config-cssVarPrefix} in the process. For example:\n         *\n         * ```javascript\n         * {\n         *    cssVarPrefix : 'taskboard',\n         *\n         *    css : {\n         *        cardBackground : '#333'\n         *    }\n         * }\n         * ```\n         *\n         * Results in the css var `--taskboard-card-background` being set to `#333`.\n         *\n         * @config {Object}\n         * @category CSS\n         */\n        css : {}\n    };\n    changeCssVarPrefix(prefix) {\n        ObjectHelper.assertString(prefix, 'prefix');\n        if (prefix && !prefix.endsWith('-')) {\n            prefix = prefix + '-';\n        }\n        return prefix || '';\n    }\n    changeCss(css) {\n        ObjectHelper.assertObject(css, 'css');\n        const me = this;\n        if (!globalThis.Proxy) {\n            throw new Error('Proxy not supported');\n        }\n        const proxy = new Proxy({}, {\n            get(target, property) {\n                const styles = getComputedStyle(me.element || document.documentElement);\n                return styles.getPropertyValue(`--${me.cssVarPrefix}${StringHelper.hyphenate(property)}`)?.trim();\n            },\n            set(target, property, value) {\n                const element = me.element || document.documentElement;\n                element.style.setProperty(`--${me.cssVarPrefix}${StringHelper.hyphenate(property)}`, value);\n                return true;\n            }\n        });\n        if (css) {\n            if (me._element) {\n                ObjectHelper.assign(proxy, css);\n            }\n            else {\n                me.$initialCSS = css;\n            }\n        }\n        return proxy;\n    }\n    // Apply any initially supplied CSS when we have an element\n    updateElement(element, ...args) {\n        super.updateElement(element, ...args);\n        if (this.$initialCSS) {\n            ObjectHelper.assign(this.css, this.$initialCSS);\n        }\n    }\n    get widgetClass() {}\n};\n"],
  "mappings": "kGA6BA,IAAOA,EAAQC,GAAO,CA7BtB,IAAAC,EA6ByB,OAAAA,EAAA,cAAyBD,GAAUE,EAAM,CA6D9D,mBAAmBC,EAAQ,CACvB,OAAAC,EAAa,aAAaD,EAAQ,QAAQ,EACtCA,GAAU,CAACA,EAAO,SAAS,GAAG,IAC9BA,EAASA,EAAS,KAEfA,GAAU,EACrB,CACA,UAAUE,EAAK,CACXD,EAAa,aAAaC,EAAK,KAAK,EACpC,MAAMC,EAAK,KACX,GAAI,CAAC,WAAW,MACZ,MAAM,IAAI,MAAM,qBAAqB,EAEzC,MAAMC,EAAQ,IAAI,MAAM,CAAC,EAAG,CACxB,IAAIC,EAAQC,EAAU,CAxGlC,IAAAR,EA0GgB,OAAOA,EADQ,iBAAiBK,EAAG,SAAW,SAAS,eAAe,EACxD,iBAAiB,KAAKA,EAAG,YAAY,GAAGI,EAAa,UAAUD,CAAQ,CAAC,EAAE,IAAjF,KAAA,OAAAR,EAAoF,KAAA,CAC/F,EACA,IAAIO,EAAQC,EAAUE,EAAO,CAEzB,OADgBL,EAAG,SAAW,SAAS,iBAC/B,MAAM,YAAY,KAAKA,EAAG,YAAY,GAAGI,EAAa,UAAUD,CAAQ,CAAC,GAAIE,CAAK,EACnF,EACX,CACJ,CAAC,EACD,OAAIN,IACIC,EAAG,SACHF,EAAa,OAAOG,EAAOF,CAAG,EAG9BC,EAAG,YAAcD,GAGlBE,CACX,CAEA,cAAcK,KAAYC,EAAM,CAC5B,MAAM,cAAcD,EAAS,GAAGC,CAAI,EAChC,KAAK,aACLT,EAAa,OAAO,KAAK,IAAK,KAAK,WAAW,CAEtD,CACA,IAAI,aAAc,CAAC,CACvB,EAtGIU,EADqBb,EACd,QAAQ,WAAA,EACfa,EAFqBb,EAEd,eAAe,CAoBlB,aAAe,GAqCf,IAAM,CAAC,CACX,CAAA,EA5DqBA,CAAA",
  "names": ["Styleable_default", "Target", "_a", "Base", "prefix", "ObjectHelper", "css", "me", "proxy", "target", "property", "StringHelper", "value", "element", "args", "__publicField"]
}
