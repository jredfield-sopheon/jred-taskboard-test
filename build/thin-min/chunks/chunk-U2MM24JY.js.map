{
  "version": 3,
  "sources": ["../../../../Grid/lib/Grid/column/NumberColumn.js", "../../../../Grid/lib/Grid/column/TreeColumn.js", "../../../../Grid/lib/Grid/feature/Tree.js"],
  "sourcesContent": ["import Column from './Column.js';\nimport ColumnStore from '../data/ColumnStore.js';\nimport NumberFormat from '../../Core/helper/util/NumberFormat.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\n/**\n * @module Grid/column/NumberColumn\n */\n/**\n * A column for showing/editing numbers.\n *\n * Default editor is a {@link Core.widget.NumberField NumberField}.\n *\n * ```javascript\n * new Grid({\n *     appendTo : document.body,\n *     columns : [\n *         { type: 'number', min: 0, max : 100, field: 'score' }\n *     ]\n * });\n * ```\n *\n * Provide a {@link Core/helper/util/NumberFormat} config as {@link #config-format} to be able to show currency. For\n * example:\n * ```javascript\n * new Grid({\n *     appendTo : document.body,\n *     columns : [\n *         {\n *             type   : 'number',\n *             format : {\n *                style    : 'currency',\n *                currency : 'USD'\n *             }\n *         }\n *     ]\n * });\n * ```\n *\n * {@inlineexample Grid/column/NumberColumn.js}\n *\n * @extends Grid/column/Column\n * @classtype number\n * @column\n */\nexport default class NumberColumn extends Column {\n    //region Config\n    static type = 'number';\n    // Type to use when auto adding field\n    static fieldType = 'number';\n    static fields = [\n        'format',\n        /**\n         * The minimum value for the field used during editing.\n         * @config {Number} min\n         * @category Common\n         */\n        'min',\n        /**\n         * The maximum value for the field used during editing.\n         * @config {Number} max\n         * @category Common\n         */\n        'max',\n        /**\n         * Step size for the field used during editing.\n         * @config {Number} step\n         * @category Common\n         */\n        'step',\n        /**\n         * Large step size for the field used during editing. In effect for `SHIFT + click/arrows`\n         * @config {Number} largeStep\n         * @category Common\n         */\n        'largeStep',\n        /**\n         * Unit to append to displayed value.\n         * @config {String} unit\n         * @category Common\n         */\n        'unit'\n    ];\n    static get defaults() {\n        return {\n            filterType : 'number',\n            /**\n             * The format to use for rendering numbers.\n             *\n             * By default, the locale's default number formatter is used. For `en-US`, the\n             * locale default is a maximum of 3 decimal digits, using thousands-based grouping.\n             * This would render the number `1234567.98765` as `'1,234,567.988'`.\n             *\n             * @config {String|NumberFormatConfig}\n             */\n            format : ''\n        };\n    }\n    //endregion\n    //region Init\n    get defaultEditor() {\n        const { format, name, max, min, step, largeStep, align } = this;\n        // Remove any undefined configs, to allow config system to use default values instead\n        return ObjectHelper.cleanupProperties({\n            type      : 'numberfield',\n            format,\n            name,\n            max,\n            min,\n            step,\n            largeStep,\n            textAlign : align\n        });\n    }\n    get formatter() {\n        const\n            me         = this,\n            { format } = me;\n        let formatter = me._formatter;\n        if (!formatter || me._lastFormat !== format) {\n            me._formatter = formatter = NumberFormat.get(me._lastFormat = format);\n        }\n        return formatter;\n    }\n    formatValue(value) {\n        if (value != null) {\n            value = this.formatter.format(value);\n            if (this.unit) {\n                value = `${value}${this.unit}`;\n            }\n        }\n        return value ?? '';\n    }\n    /**\n     * Renderer that displays a formatted number in the cell. If you create a custom renderer, and want to include the\n     * formatted number you can call `defaultRenderer` from it.\n     *\n     * ```javascript\n     * new Grid({\n     *     columns: [\n     *         {\n     *             type   : 'number',\n     *             text   : 'Total cost',\n     *             field  : 'totalCost',\n     *             format : {\n     *                 style    : 'currency',\n     *                 currency : 'USD'\n     *             },\n     *             renderer({ value }) {\n     *                  return `Total cost: ${this.defaultRenderer({ value })}`;\n     *             }\n     *         }\n     *     ]\n     * }\n     * ```\n     *\n     * @param {Object} rendererData The data object passed to the renderer\n     * @param {Number} rendererData.value The value to display\n     * @returns {String} Formatted number\n     */\n    defaultRenderer({ value }) {\n        return this.formatValue(value);\n    }\n}\nColumnStore.registerColumnType(NumberColumn, true);\nNumberColumn.exposeProperties();\nNumberColumn._$name = 'NumberColumn';", "import Column from './Column.js';\nimport ColumnStore from '../data/ColumnStore.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\n/**\n * @module Grid/column/TreeColumn\n */\nlet currentParentHasIcon = false;\n/**\n * A column that displays a tree structure when using the {@link Grid.feature.Tree tree} feature.\n *\n * Default editor is a {@link Core.widget.TextField TextField}.\n *\n * TreeColumn provides configs to define icons for {@link #config-expandIconCls expanded} /\n * {@link #config-collapseIconCls collapsed} nodes, {@link #config-expandedFolderIconCls expanded folder} /\n * {@link #config-collapsedFolderIconCls collapsed folder} nodes and {@link #config-leafIconCls leaf} nodes.\n *\n * When the TreeColumn renders its cells, it will look for two special fields {@link Grid.data.GridRowModel#field-href}\n * and {@link Grid.data.GridRowModel#field-target}. Specifying `href` will produce a link for the TreeNode,\n * and `target` will have the same meaning as in an A tag:\n *\n * ```javascript\n * {\n *    id        : 1,\n *    name      : 'Some external link'\n *    href      : '//www.website.com\",\n *    target    : '_blank\"\n * }\n * ```\n *\n * ## Snippet\n * ```javascript\n * new TreeGrid({\n *     appendTo : document.body,\n *\n *     columns : [\n *          { type: 'tree', field: 'name' }\n *     ]\n * });\n * ```\n *\n * {@inlineexample Grid/column/TreeColumn.js}\n *\n * ## Cell renderers\n *\n * You can affect the contents and styling of cells in this column using a\n * {@link Grid.column.TreeColumn#config-renderer} function.\n *\n * ```javascript\n * const grid = new Grid({\n *   columns : [{\n *       type       : 'tree',\n *       field      : 'name',\n *       text       : 'Name',\n *       renderer({ value, record }) {\n *         return `${value} (${record.childLevel})`\n *       }\n *     }]\n * });\n * ```\n *\n * @classtype tree\n * @extends Grid/column/Column\n * @column\n */\nexport default class TreeColumn extends Column {\n    static $name = 'TreeColumn';\n    static type = 'tree';\n    static get defaults() {\n        return {\n            tree     : true,\n            hideable : false,\n            minWidth : 150\n        };\n    }\n    static get fields() {\n        return [\n            /**\n             * The icon to use for the collapse icon in collapsed state\n             * @config {String|null} expandIconCls\n             */\n            { name : 'expandIconCls', defaultValue : 'b-icon b-icon-tree-expand' },\n            /**\n             * The icon to use for the collapse icon in expanded state\n             * @config {String|null} collapseIconCls\n             */\n            { name : 'collapseIconCls', defaultValue : 'b-icon b-icon-tree-collapse' },\n            /**\n             * The icon to use for the collapse icon in expanded state\n             * @config {String|null} collapsedFolderIconCls\n             */\n            { name : 'collapsedFolderIconCls' },\n            /**\n             * The icon to use for the collapse icon in expanded state\n             * @config {String|null} expandedFolderIconCls\n             */\n            { name : 'expandedFolderIconCls' },\n            /**\n             * Size of the child indent in em. Resulting indent is indentSize multiplied by child level.\n             * @config {Number} indentSize\n             * @default 1.7\n             */\n            { name : 'indentSize', defaultValue : 1.7 },\n            /**\n             * The icon to use for the leaf nodes in the tree\n             * @config {String|null} leafIconCls\n             */\n            { name : 'leafIconCls', defaultValue : 'b-icon b-icon-tree-leaf' },\n            { name : 'editTargetSelector', defaultValue : '.b-tree-cell-value' },\n            /**\n             * Renderer function, used to format and style the content displayed in the cell. Return the cell text you\n             * want to display. Can also affect other aspects of the cell, such as styling.\n             *\n             * <div class=\"note\">\n             * As the TreeColumn adds its own cell content to the column, there is a limit to what is supported in the\n             * renderer function in comparison with an ordinary\n             * {@link Grid.column.Column#config-renderer Column renderer}. Most notably is that changing `cellElement`\n             * content can yield unexpected results as it will be updated later in the rendering process.\n             * </div>\n             *\n             * You can also return a {@link Core.helper.DomHelper#typedef-DomConfig} object describing the markup\n             * ```javascript\n             * new Grid({\n             *     columns : [\n             *         {\n             *              type  : 'tree',\n             *              field : 'name'\n             *              text  : 'Name',\n             *              renderer : ({ record }) => {\n             *                  return {\n             *                      class : 'myClass',\n             *                      children : [\n             *                          {\n             *                              tag : 'i',\n             *                              class : 'fa fa-pen'\n             *                          },\n             *                          {\n             *                              tag : 'span',\n             *                              html : record.name\n             *                          }\n             *                      ]\n             *                  };\n             *              }\n             *         }\n             *     ]\n             * });\n             * ```\n             *\n             * You can modify the row element too from inside a renderer to add custom CSS classes:\n             *\n             * ```javascript\n             * new Grid({\n             *     columns : [\n             *         {\n             *             type     : 'tree',\n             *             field    : 'name',\n             *             text     : 'Name',\n             *             renderer : ({ record, row }) => {\n             *                // Add special CSS class to new rows that have not yet been saved\n             *               row.cls.newRow = record.isPhantom;\n             *\n             *               return record.name;\n             *         }\n             *     ]\n             * });\n             * ```\n             *\n             * @config {Function} renderer\n             * @param {Object} renderData Object containing renderer parameters\n             * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc. Can be `null` in case of export\n             * @param {*} renderData.value Value to be displayed in the cell\n             * @param {Core.data.Model} renderData.record Record for the row\n             * @param {Grid.column.Column} renderData.column This column\n             * @param {Grid.view.Grid} renderData.grid This grid\n             * @param {Grid.row.Row} renderData.row Row object. Can be null in case of export. Use the\n             *   {@link Grid.row.Row#function-assignCls row's API} to manipulate CSS class names.\n             * @param {Object} renderData.size Set `size.height` to specify the desired row height for the current row.\n             *   Largest specified height is used, falling back to configured {@link Grid/view/Grid#config-rowHeight}\n             *   in case none is specified. Can be null in case of export\n             * @param {Number} renderData.size.height Set this to request a certain row height\n             * @param {Number} renderData.size.configuredHeight Row height that will be used if none is requested\n             * @param {Boolean} renderData.isExport True if record is being exported to allow special handling during export.\n             * @param {Boolean} renderData.isMeasuring True if the column is being measured for a `resizeToFitContent` call.\n             *   In which case an advanced renderer might need to take different actions.\n             * @returns {String|DomConfig|null}\n             *\n             * @category Rendering\n             */\n            'renderer'\n        ];\n    }\n    constructor(config, store) {\n        super(...arguments);\n        const me = this;\n        // We handle htmlEncoding in this class rather than relying on the generic Row DOM manipulation\n        // since this class requires quite a lot of DOM infrastructure around the actual rendered content\n        me.shouldHtmlEncode = me.htmlEncode;\n        me.setData('htmlEncode', false);\n        // add tree renderer (which calls original renderer internally)\n        if (me.renderer) {\n            me.originalRenderer = me.renderer;\n        }\n        me.renderer = me.treeRenderer.bind(me);\n    }\n    /**\n     * A column renderer that is automatically added to the column with { tree: true }. It adds padding and node icons\n     * to the cell to make the grid appear to be a tree. The original renderer is called in the process.\n     * @private\n     */\n    treeRenderer(renderData) {\n        const\n            me       = this,\n            {\n                grid,\n                cellElement,\n                row,\n                record,\n                isExport\n            }           = renderData,\n            gridMeta    = record.instanceMeta(grid.store),\n            isCollapsed = !record.isLeaf && gridMeta.collapsed,\n            innerConfig = {\n                className : 'b-tree-cell-value'\n            },\n            children    = [innerConfig],\n            result      = {\n                className : {\n                    'b-tree-cell-inner' : 1\n                },\n                tag    : record.href ? 'a' : 'div',\n                href   : record.href,\n                target : record.target,\n                children\n            };\n        let outputIsObject, iconCls, { value } = renderData,\n            renderingColumn = me;\n        const parentRenderer = grid.isTreeGrouped && !record.isLeaf && grid.features.treeGroup.parentRenderer;\n        if (me.originalRenderer || parentRenderer) {\n            let rendererHtml;\n            if (parentRenderer) {\n                if (record.field) {\n                    renderingColumn = grid.columns.get(record.field);\n                    value = renderingColumn.isWidgetColumn ? value\n                        : (renderingColumn.renderer || renderingColumn.defaultRenderer)?.call(\n                            renderingColumn,\n                            {\n                                ...renderData,\n                                column      : renderingColumn,\n                                value       : record.name,\n                                isTreeGroup : true\n                            }) ?? record.name;\n                }\n                rendererHtml = grid.features.treeGroup.parentRenderer({\n                    field  : record.field,\n                    value,\n                    column : renderingColumn,\n                    record : record.firstGroupChild,\n                    grid\n                });\n            }\n            else {\n                rendererHtml         = me.originalRenderer(renderData);\n            }\n            // Check if the cell content is going to be rendered by framework\n            const hasFrameworkRenderer = grid.hasFrameworkRenderer?.({\n                cellContent : rendererHtml,\n                renderingColumn\n            });\n            outputIsObject = typeof rendererHtml === 'object' && !hasFrameworkRenderer;\n            // Reset the value when framework is responsible for the cell content\n            value = hasFrameworkRenderer ? '' : (rendererHtml === false ? cellElement.innerHTML : rendererHtml);\n            // Save content to the `rendererHtml` to be used in processCellContent implemented by framework\n            renderData.rendererHtml = rendererHtml;\n        }\n        if (!outputIsObject) {\n            value = String(value ?? '');\n        }\n        if (isExport) {\n            return value;\n        }\n        if (!record.isLeaf) {\n            const\n                isCollapsed     = !record.isExpanded(grid.store),\n                expanderIconCls = isCollapsed ? me.expandIconCls : me.collapseIconCls,\n                folderIconCls   = isCollapsed ? me.collapsedFolderIconCls : me.expandedFolderIconCls;\n            cellElement.classList.add('b-tree-parent-cell');\n            children.unshift({\n                tag       : 'i',\n                className : {\n                    'b-tree-expander' : 1,\n                    [expanderIconCls] : 1,\n                    'b-empty-parent'  : !gridMeta.isLoadingChildren && (record.children !== true && !record.children?.length)\n                }\n            });\n            // Allow user to customize tree icon or opt out entirely\n            currentParentHasIcon = iconCls = renderData.iconCls || record.iconCls || folderIconCls;\n        }\n        else {\n            cellElement.classList.add('b-tree-leaf-cell');\n            // Allow user to customize tree icon or opt out entirely\n            iconCls = renderData.iconCls || record.iconCls || me.leafIconCls;\n        }\n        if (iconCls) {\n            children.splice(children.length - 1, 0, {\n                tag       : 'i',\n                className : {\n                    'b-tree-icon' : 1,\n                    [iconCls]     : 1\n                }\n            });\n        }\n        // Row can be just a dummy object for example when the renderer is called from Column#resizeToFitContent.\n        // Add/remove the various tree node classes.\n        // Keep row's aria state up to date\n        if (row.isRow && !record.isLeaf) {\n            row.setAttribute('aria-expanded', !isCollapsed);\n            if (isCollapsed) {\n                row.removeAttribute('aria-owns');\n            }\n            else {\n                for (const region in grid.subGrids) {\n                    const el = row.elements[region];\n                    // A branch node may be configured expanded, but yet have no children.\n                    // They may be added dynamically.\n                    DomHelper.setAttributes(el, {\n                        'aria-owns' : record.children?.length ? record.children?.map(r => `${grid.id}-${region}-${r.id}`).join(' ') : null\n                    });\n                }\n            }\n        }\n        // Array of DomConfigs\n        if (Array.isArray(value)) {\n            innerConfig.children = value;\n        }\n        // Single DomConfig\n        else if (outputIsObject) {\n            Object.assign(innerConfig, value);\n        }\n        // If we are encoding HTML, or there's no raw HTML, we can use the text property\n        // as the raw value, and DomSync will create a TextNode from that.\n        else if (renderingColumn.shouldHtmlEncode || !value.includes('<')) {\n            result.className['b-text-value'] = 1;\n            innerConfig.text = value;\n        }\n        // If we are accepting HTML without encoding it, and there is HTML we must use html property\n        else {\n            innerConfig.html = value;\n        }\n        const padding = (record.childLevel * me.indentSize + (record.isLeaf ? (currentParentHasIcon ? 2.0 : (iconCls ? 0.5 : 0.4)) : 0));\n        result.style = `padding-inline-start:${padding}em`;\n        return result;\n    }\n    // This function is not meant to be called by any code other than Base#getCurrentConfig().\n    // It extracts the current configs (fields) for the column, with special handling for the renderer\n    getCurrentConfig(options) {\n        const result = super.getCurrentConfig(options);\n        // Use app renderer\n        result.renderer = this.originalRenderer;\n        return result;\n    }\n}\nColumnStore.registerColumnType(TreeColumn, true);\nTreeColumn.exposeProperties();\nTreeColumn._$name = 'TreeColumn';", "import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\nimport '../column/TreeColumn.js';\n/**\n * @module Grid/feature/Tree\n */\nconst immediatePromise = Promise.resolve();\n/**\n * Feature that makes the grid work more like a tree. Included by default in {@link Grid.view.TreeGrid}. Requires\n * exactly one {@link Grid.column.TreeColumn} among grids columns. That column will have its renderer replaced with a\n * tree renderer that adds padding and icon to give the appearance of a tree. The original renderer is preserved and\n * also called.\n *\n * {@inlineexample Grid/feature/Tree.js}\n *\n * This feature is <strong>disabled</strong> by default. When enabled, the feature cannot be disabled during runtime.\n *\n * ## Keyboard shortcuts\n * This feature has the following default keyboard shortcuts:\n *\n * | Keys                 | Action                   | Action description                                                   |\n * |----------------------|--------------------------|----------------------------------------------------------------------|\n * | `Space`              | *toggleCollapseByKey*    | When focus on a parent node, this expands or collapses it's children |\n * | `ArrowRight`         | *expandIfSingleColumn*   | Expands a focused parent node if grid consist of one column only     |\n * | `Shift`+`ArrowRight` | *expandByKey*            | Expands a focused parent node                                        |\n * | `ArrowLeft`          | *collapseIfSingleColumn* | Collapses a focused parent node if grid consist of one column only   |\n * | `Shift`+`ArrowLeft`  | *collapseByKey*          | Collapses a focused parent node                                      |\n *\n * <div class=\"note\">Please note that <code>Ctrl</code> is the equivalent to <code>Command</code> and <code>Alt</code>\n * is the equivalent to <code>Option</code> for Mac users</div>\n *\n * For more information on how to customize keyboard shortcuts, please see\n * [our guide](#Grid/guides/customization/keymap.md)\n *\n * @extends Core/mixin/InstancePlugin\n *\n * @demo Grid/tree\n * @classtype tree\n * @feature\n */\nexport default class Tree extends InstancePlugin.mixin(Delayable) {\n    //region Config\n    static $name = 'Tree';\n    static configurable = {\n        /**\n         * Expand parent nodes when clicking on their cell\n         * @prp {Boolean}\n         * @default\n         */\n        expandOnCellClick : false,\n        /**\n         * See {@link #keyboard-shortcuts Keyboard shortcuts} for details\n         * @config {Object<String,String>}\n         */\n        keyMap : {\n            ' '                : 'toggleCollapseByKey',\n            ArrowRight         : 'expandIfSingleColumn',\n            'Shift+ArrowRight' : 'expandByKey',\n            ArrowLeft          : 'collapseIfSingleColumn',\n            'Shift+ArrowLeft'  : 'collapseByKey'\n        }\n    };\n    // Plugin configuration. This plugin chains some functions in Grid.\n    static get pluginConfig() {\n        return {\n            assign : ['collapseAll', 'expandAll', 'collapse', 'expand', 'expandTo', 'toggleCollapse'],\n            chain  : ['onElementPointerUp', 'onElementClick', 'bindStore', 'beforeRenderRow']\n        };\n    }\n    //endregion\n    //region Init\n    construct(client, config) {\n        super.construct(client, config);\n        // find column\n        if (!this.treeColumn) {\n            console.info('To use the tree feature, one column should be configured with `type: \\'tree\\'`');\n        }\n        client.store && this.bindStore(client.store);\n    }\n    doDisable(disable) {\n        if (disable) {\n            throw new Error('Tree feature cannot be disabled');\n        }\n    }\n    get store() {\n        return this.client.store;\n    }\n    get treeColumn() {\n        const\n            me          = this,\n            { columns } = me.client;\n        if (!me._treeColumn || !columns.includes(me._treeColumn)) {\n            me._treeColumn = columns.find(column => column.isTreeColumn);\n        }\n        return me._treeColumn;\n    }\n    bindStore(store) {\n        this.detachListeners('store');\n        store.ion({\n            name                  : 'store',\n            beforeLoadChildren    : 'onBeforeLoadChildren',\n            loadChildren          : 'onLoadChildren',\n            loadChildrenException : 'onLoadChildrenException',\n            beforeToggleNode      : 'onBeforeToggleNode',\n            thisObj               : this\n        });\n    }\n    //endregion\n    //region Expand & collapse\n    /**\n     * Collapse an expanded node or expand a collapsed. Optionally forcing a certain state.\n     * This function is exposed on Grid and can thus be called as `grid.toggleCollapse()`\n     * @param {String|Number|Core.data.Model} idOrRecord Record (the node itself) or id of a node to toggle\n     * @param {Boolean} [collapse] Force collapse (true) or expand (false)\n     * @on-owner\n     * @category Tree\n     */\n    async toggleCollapse(idOrRecord, collapse) {\n        if (idOrRecord == null) {\n            throw new Error('Tree#toggleCollapse must be passed a record');\n        }\n        const\n            me                = this,\n            { store, client } = me,\n            { rowManager }    = client,\n            record            = store.getById(idOrRecord),\n            meta              = record.instanceMeta(store);\n        // Record generation is incremented to force React/Vue wrappers to recreate UI elements\n        record.generation++;\n        if (await store.toggleCollapse(record, collapse)) {\n            const row = rowManager.getRowFor(record);\n            if (row && record.ancestorsExpanded()) {\n                // The row carries the expanded / collapsed classes, so we need to refresh it\n                row.render(null, null, false);\n            }\n            // Add a temporary cls, used by Scheduler & Gantt to prevent transitions on events/tasks\n            // Block multiple applications in the case of a recursive collapseAll operation\n            if (!me.isTogglingNode) {\n                client.element.classList.add('b-toggling-node');\n                me.isTogglingNode = true;\n                me.requestAnimationFrame(() => {\n                    client.element.classList.remove('b-toggling-node');\n                    me.isTogglingNode = false;\n                });\n            }\n            /**\n             * Fired before a parent node record is collapsed.\n             * @event collapseNode\n             * @param {Grid.view.Grid} source The firing Grid instance.\n             * @param {Core.data.Model} record The record which has been collapsed.\n             * @on-owner\n             */\n            /**\n             * Fired after a parent node record is expanded.\n             * @event expandNode\n             * @param {Grid.view.Grid} source The firing Grid instance.\n             * @param {Core.data.Model} record The record which has been expanded.\n             * @on-owner\n             */\n            client.trigger(meta.collapsed ? 'collapseNode' : 'expandNode', { record });\n            /**\n             * Fired after a parent node record toggles its collapsed state.\n             * @event toggleNode\n             * @param {Core.data.Model} record The record being toggled.\n             * @param {Boolean} collapse `true` if the node is being collapsed.\n             * @on-owner\n             */\n            client.trigger('toggleNode', { record, collapse : meta.collapsed });\n        }\n    }\n    /**\n     * Collapse a single node.\n     * This function is exposed on Grid and can thus be called as `grid.collapse()`\n     * @param {String|Number|Core.data.Model} idOrRecord Record (the node itself) or id of a node to collapse\n     * @on-owner\n     * @category Tree\n     */\n    async collapse(idOrRecord) {\n        return this.toggleCollapse(idOrRecord, true);\n    }\n    /**\n     * Expand a single node.\n     * This function is exposed on Grid and can thus be called as `grid.expand()`\n     * @param {String|Number|Core.data.Model} idOrRecord Record (the node itself) or id of a node to expand\n     * @on-owner\n     * @category Tree\n     */\n    async expand(idOrRecord) {\n        return this.toggleCollapse(idOrRecord, false);\n    }\n    onBeforeToggleNode({ record, collapse }) {\n        /**\n         * Fired before a parent node record toggles its collapsed state.\n         * @event beforeToggleNode\n         * @param {Grid.view.Grid} source The firing Grid instance.\n         * @param {Core.data.Model} record The record being toggled.\n         * @param {Boolean} collapse `true` if the node is being collapsed.\n         * @on-owner\n         */\n        this.client.trigger('beforeToggleNode', { record, collapse });\n    }\n    onBeforeLoadChildren({ source : store, params }) {\n        const\n            parent = store.getById(params[store.modelClass.idField]),\n            row    = this.client.rowManager.getRowFor(parent);\n        row?.addCls('b-loading-children');\n    }\n    onLoadChildren({ source : store, params }) {\n        const\n            parent = store.getById(params[store.modelClass.idField]),\n            row    = this.client.rowManager.getRowFor(parent);\n        row?.removeCls('b-loading-children');\n    }\n    onLoadChildrenException({ record }) {\n        const row = this.client.rowManager.getRowFor(record);\n        row?.removeCls('b-loading-children');\n    }\n    /**\n     * Expand or collapse all nodes, as specified by param, starting at the passed node (which defaults to the root node)\n     * @param {Boolean} [collapse] Set to true to collapse, false to expand (defaults to true)\n     * @param {Core.data.Model} [topNode] The topmost node from which to cascade a collapse.\n     * Defaults to the {@link Core.data.Store#property-rootNode}. Not included in the cascade if\n     * the root node is being used.\n     * @category Tree\n     */\n    async expandOrCollapseAll(collapse = true, topNode = this.store.rootNode) {\n        const\n            { client, store }         = this,\n            { animateTreeNodeToggle } = client,\n            promises                  = [],\n            childRecords              = [];\n        client.trigger('beforeToggleAllNodes', { collapse });\n        client.animateTreeNodeToggle = false;\n        // Each collapse/expand will trigger events on store, avoid that by suspending\n        store.suspendEvents();\n        store.traverse(record => {\n            const gridMeta = record.instanceMeta(store);\n            if (!record.isLeaf) {\n                if (collapse && !gridMeta.collapsed) {\n                    this.toggleCollapse(record, true);\n                    childRecords.push(...record.children);\n                }\n                else if (!collapse && gridMeta.collapsed) {\n                    if (Array.isArray(record.children)) {\n                        childRecords.push(...record.children);\n                    }\n                    promises.push(this.toggleCollapse(record, false));\n                }\n            }\n        }, topNode, topNode === store.rootNode);\n        store.resumeEvents();\n        return (collapse ? immediatePromise : Promise.all(promises)).then(() => {\n            // Return to top when collapsing all\n            client.refreshRows(collapse);\n            if (childRecords.length) {\n                if (collapse) {\n                    store.trigger('remove', { records : childRecords, isCollapse : true, isCollapseAll : true });\n                }\n                else {\n                    store.trigger('add', { records : childRecords, isExpand : true, isExpandAll : true });\n                }\n            }\n            client.trigger('toggleAllNodes', { collapse });\n            client.animateTreeNodeToggle = animateTreeNodeToggle;\n        });\n    }\n    /**\n     * Collapse all nodes.\n     * This function is exposed on Grid and can thus be called as `grid.collapseAll()`\n     * @on-owner\n     * @category Tree\n     */\n    async collapseAll() {\n        return this.expandOrCollapseAll(true);\n    }\n    /**\n     * Expand all nodes.\n     * This function is exposed on Grid and can thus be called as `grid.expandAll()`\n     * @on-owner\n     * @category Tree\n     */\n    async expandAll() {\n        return this.expandOrCollapseAll(false);\n    }\n    /**\n     * Expands parent nodes to make this node \"visible\".\n     * This function is exposed on Grid and can thus be called as `grid.expandTo()`\n     * @param {String|Number|Core.data.Model|String[]|Number[]|Core.data.Model[]} idOrRecord Record (the node itself),\n     * or id of a node. Also accepts arrays of the same types.\n     * @param {Boolean} [scrollIntoView=true] A flag letting you control whether to scroll the record into view\n     * @on-owner\n     * @async\n     * @category Tree\n     */\n    async expandTo(idOrRecord, scrollIntoView = true) {\n        const\n            me                        = this,\n            { store, client }         = me,\n            { animateTreeNodeToggle } = client;\n        if (Array.isArray(idOrRecord)) {\n            if (idOrRecord.length > 0) {\n                client.suspendRefresh();\n                for (let i = idOrRecord.length - 1; i >= 0; i--) {\n                    const record = store.getById(idOrRecord[i]);\n                    if (i === 0) {\n                        client.resumeRefresh?.();\n                        // Ensure all parents are rendered\n                        client.rowManager.refresh();\n                    }\n                    await me.expandTo?.(record, i === 0);\n                }\n            }\n            return;\n        }\n        const record = store.getById(idOrRecord);\n        // Hidden because it's in a collapsed Group: abort\n        if (record.instanceMeta(me.store).hiddenByCollapse === false) {\n            return;\n        }\n        client.animateTreeNodeToggle = false;\n        // Expand any parents that need to be expanded to allow the record to be rendered.\n        if (!record.ancestorsExpanded()) {\n            const parents = [];\n            // Collect parents which need expanding\n            for (let parent = record.parent; parent && !parent.isRoot; parent = parent.parent) {\n                if (!parent.isExpanded(store)) {\n                    parents.unshift(parent);\n                }\n            }\n            client.suspendRefresh();\n            // Expand them from the top-down\n            for (const parent of parents) {\n                if (!me.isDestroyed) {\n                    await me.toggleCollapse(parent, false);\n                }\n            }\n            client.resumeRefresh?.();\n            // Refreshing on expand was inhibited in toggleCollapse calls\n            client.refreshRows?.();\n        }\n        client.animateTreeNodeToggle = animateTreeNodeToggle;\n        if (!me.isDestroyed && scrollIntoView) {\n            await client.scrollRowIntoView(record);\n        }\n    }\n    //endregion\n    //region Events\n    /**\n     * Called when user clicks somewhere in the grid. Expand/collapse node on icon click.\n     * @private\n     */\n    onElementPointerUp(event) {\n        const\n            me              = this,\n            target          = event.target,\n            cellData        = me.client.getCellDataFromEvent(event),\n            clickedExpander = target.closest('.b-tree-expander');\n        // Checks if click is on node expander icon, then toggles expand/collapse. Also toggles on entire cell if expandOnCellClick is true\n        if (clickedExpander || (me.expandOnCellClick && cellData?.record.isParent)) {\n            me.toggleCollapse(cellData.record);\n        }\n    }\n    onElementClick(event) {\n        // Prevent default to avoid triggering navigation if the tree node is a link\n        if (event.target.closest('.b-tree-expander')) {\n            event.preventDefault();\n        }\n    }\n    /**\n     * Called on key down in grid. Expand/collapse node on [space]\n     * @private\n     */\n    toggleCollapseByKey() {\n        const { focusedCell } = this.client;\n        // Only catch space on grid cell element, not in header, editors etc...\n        if (focusedCell?.rowIndex > -1 && !focusedCell.isActionable) {\n            this.toggleCollapse(focusedCell.id);\n            return true;\n        }\n        return false;\n    }\n    //endregion\n    //region Rendering\n    beforeRenderRow({ record, cls }) {\n        if (!record.isLeaf) {\n            const isCollapsed = !record.isExpanded(this.client.store);\n            cls['b-tree-parent-row']  = 1;\n            cls['b-tree-collapsed']   = isCollapsed;\n            cls['b-tree-expanded']    = !isCollapsed;\n            cls['b-loading-children'] = record.instanceMeta(this.client).isLoadingChildren;\n        }\n        else {\n            cls['b-tree-parent-row'] = 0;\n            cls['b-tree-collapsed'] = 0;\n            cls['b-tree-expanded'] = 0;\n            cls['b-loading-children'] = 0;\n        }\n    }\n    //endregion\n    // Expands tree if single column.\n    // Called by default on ArrowRight\n    expandIfSingleColumn() {\n        if (this.client.columns.count === 1) {\n            return this.expandByKey();\n        }\n        // Tells keymap to continue with other actions\n        return false;\n    }\n    // Expands tree on Shift+ArrowRight by default.\n    expandByKey() {\n        const\n            me              = this,\n            { client }      = me,\n            { focusedCell } = client,\n            record          = focusedCell?.record;\n        // shift triggers tree navigation behaviour, also used by default for single column which is tree\n        if (record && focusedCell?.column.tree && record.isParent && record.instanceMeta(client.store).collapsed) {\n            me.expand(record);\n            return true;\n        }\n        // Tells keymap to continue with other actions\n        return false;\n    }\n    collapseIfSingleColumn() {\n        if (this.client.columns.count === 1) {\n            return this.collapseByKey();\n        }\n        // Tells keymap to continue with other actions\n        return false;\n    }\n    collapseByKey() {\n        const\n            me              = this,\n            { client }      = me,\n            { focusedCell } = client,\n            record          = focusedCell?.record;\n        // shift triggers tree navigation behaviour, also used by default for single column which is tree\n        if (focusedCell?.column.tree && record) {\n            // on expanded parent, collapse\n            if (record.isParent && !record.instanceMeta(client.store).collapsed) {\n                me.collapse(record);\n                return true;\n            }\n            // otherwise go to parent\n            if (record.parent && !record.parent.isRoot) {\n                // Deselect everything before doing this.\n                // Causes strange selection ranges otherwise\n                client.deselectAll();\n                client.focusCell({\n                    record : record.parent,\n                    column : focusedCell.column\n                });\n                return true;\n            }\n        }\n        // Tells keymap to continue with other actions\n        return false;\n    }\n}\nTree.featureClass = 'b-tree';\nTree._$name = 'Tree'; GridFeatureManager.registerFeature(Tree, false, 'Grid');\nGridFeatureManager.registerFeature(Tree, true, 'TreeGrid');\n"],
  "mappings": "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",
  "names": ["NumberColumn", "Column", "format", "name", "max", "min", "step", "largeStep", "align", "ObjectHelper", "me", "formatter", "NumberFormat", "value", "__publicField", "ColumnStore", "currentParentHasIcon", "TreeColumn", "config", "store", "renderData", "_a", "_b", "_c", "_d", "_e", "_f", "grid", "cellElement", "row", "record", "isExport", "gridMeta", "isCollapsed", "innerConfig", "children", "result", "outputIsObject", "iconCls", "renderingColumn", "parentRenderer", "rendererHtml", "hasFrameworkRenderer", "expanderIconCls", "folderIconCls", "region", "el", "DomHelper", "r", "padding", "options", "immediatePromise", "Tree", "InstancePlugin", "Delayable_default", "client", "disable", "columns", "column", "idOrRecord", "collapse", "rowManager", "meta", "params", "parent", "topNode", "animateTreeNodeToggle", "promises", "childRecords", "scrollIntoView", "i", "parents", "event", "target", "cellData", "focusedCell", "cls", "GridFeatureManager"]
}
