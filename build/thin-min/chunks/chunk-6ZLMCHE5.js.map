{
  "version": 3,
  "sources": ["../../../../Core/lib/Core/helper/mixin/DragHelperContainer.js", "../../../../Core/lib/Core/helper/mixin/DragHelperTranslate.js", "../../../../Core/lib/Core/helper/DragHelper.js", "../../../../Core/lib/Core/helper/ResizeHelper.js", "../../../../Core/lib/Core/widget/Toast.js", "../../../../Core/lib/Core/helper/WidgetHelper.js", "../../../../Core/lib/Core/helper/util/Formatter.js", "../../../../Core/lib/Core/helper/util/NumberFormat.js", "../../../../Core/lib/Core/mixin/Clipboardable.js", "../../../../Core/lib/Core/mixin/Override.js", "../../../../Core/lib/Core/util/Month.js", "../../../../Core/lib/Core/widget/ButtonGroup.js", "../../../../Core/lib/Core/widget/CalendarPanel.js", "../../../../Core/lib/Core/widget/YearPicker.js", "../../../../Core/lib/Core/widget/DisplayField.js", "../../../../Core/lib/Core/widget/DatePicker.js", "../../../../Core/lib/Core/widget/DateField.js", "../../../../Core/lib/Core/widget/NumberField.js", "../../../../Core/lib/Core/widget/TimePicker.js", "../../../../Core/lib/Core/widget/TimeField.js", "../../../../Core/lib/Core/widget/DurationField.js", "../../../../Core/lib/Core/widget/FieldFilterPicker.js", "../../../../Core/lib/Core/widget/Label.js", "../../../../Core/lib/Core/widget/FieldFilterPickerGroup.js", "../../../../Core/lib/Core/widget/MessageDialog.js"],
  "sourcesContent": ["import Base from '../../Base.js';\nimport GlobalEvents from '../../GlobalEvents.js';\nimport DomHelper from '../../helper/DomHelper.js';\nimport Rectangle from '../../helper/util/Rectangle.js';\n/**\n * @module Core/helper/mixin/DragHelperContainer\n */\n/**\n * Mixin for DragHelper that handles dragging elements between containers (or rearranging within)\n *\n * @mixin\n * @private\n */\nexport default Target => class DragHelperContainer extends (Target || Base) {\n    static get $name() {\n        return 'DragHelperContainer';\n    }\n    //region Init\n    /**\n     * Initialize container drag mode.\n     * @private\n     */\n    initContainerDrag() {\n        const me = this;\n        //use container drag as default mode\n        if (!me.mode) {\n            me.mode = 'container';\n        }\n        if (me.mode === 'container' && !me.containers) {\n            throw new Error('Container drag mode must specify containers');\n        }\n    }\n    //endregion\n    //region Grab, update, finish\n    /**\n     * Grab an element which can be dragged between containers.\n     * @private\n     * @param event\n     * @returns {Boolean}\n     */\n    grabContainerDrag(event) {\n        const me = this;\n        // allow specified selectors to prevent drag\n        if (!me.ignoreSelector || !event.target.closest(me.ignoreSelector)) {\n            // go up from \"handle\" to draggable element\n            const element = DomHelper.getAncestor(event.target, me.containers, me.outerElement);\n            if (element) {\n                const box = element.getBoundingClientRect();\n                me.context = {\n                    element,\n                    valid            : true,\n                    action           : 'container',\n                    offsetX          : event.pageX - box.left,\n                    offsetY          : event.pageY - box.top,\n                    originalPosition : {\n                        parent : element.parentElement,\n                        prev   : element.previousElementSibling,\n                        next   : element.nextElementSibling\n                    }\n                };\n            }\n            return true;\n        }\n        return false;\n    }\n    startContainerDrag(event) {\n        const\n            me                          = this,\n            { context, floatRootOwner } = me,\n            { element : dragElement }   = context,\n            clonedNode                  = dragElement.cloneNode(true),\n            outerWidgetEl               = floatRootOwner?.element.closest('.b-outer');\n        // init drag proxy\n        clonedNode.classList.add(me.dragProxyCls, me.draggingCls);\n        // Append drag proxy to float root, fall back to root context node\n        (floatRootOwner?.floatRoot || DomHelper.getRootElement(dragElement)).appendChild(clonedNode);\n        context.dragProxy = clonedNode;\n        // style dragged element\n        context.dragging = dragElement;\n        dragElement.classList.add(me.dropPlaceholderCls);\n        // If element being dragged is also a child of the float root, add +1 to the cloned node z-index\n        if (outerWidgetEl?.parentElement?.matches('.b-float-root')) {\n            clonedNode.style.zIndex = floatRootOwner.floatRootMaxZIndex + 1;\n        }\n    }\n    onContainerDragStarted(event) {\n        const\n            me                                   = this,\n            { context }                          = me,\n            { element : dragElement, dragProxy } = context,\n            box                                  = dragElement.getBoundingClientRect();\n        // Always set the proxy element width manually, drag target could be sized with flex or % width\n        if (me.autoSizeClonedTarget) {\n            dragProxy.style.width  = box.width + 'px';\n            dragProxy.style.height = box.height + 'px';\n            DomHelper.setTranslateXY(context.dragProxy, box.left, box.top);\n        }\n        else {\n            const proxyBox = dragProxy.getBoundingClientRect();\n            Object.assign(context, {\n                offsetX : proxyBox.width / 2,\n                offsetY : proxyBox.height / 2\n            });\n            DomHelper.setTranslateXY(dragProxy, event.clientX, event.clientY);\n        }\n    }\n    /**\n     * Move the placeholder element into its new position on valid drag.\n     * @private\n     * @param event\n     */\n    updateContainerDrag(event) {\n        const\n            me          = this,\n            { context } = me;\n        if (!context.started || !context.targetElement) {\n            return;\n        }\n        const\n            containerElement = DomHelper.getAncestor(context.targetElement, me.containers, 'b-gridbase'),\n            willLoseFocus    = context.dragging?.contains(DomHelper.getActiveElement(context.dragging));\n        if (containerElement && DomHelper.isDescendant(context.element, containerElement)) {\n            // dragging over part of self, do nothing\n            return;\n        }\n        // The dragging element contains focus, and moving it within the DOM\n        // will cause focus loss which might affect an encapsulating autoClose Popup.\n        // Prevent focus loss handling during the DOM move.\n        if (willLoseFocus) {\n            GlobalEvents.suspendFocusEvents();\n        }\n        if (containerElement && context.valid) {\n            me.moveNextTo(containerElement, event);\n        }\n        else {\n            // dragged outside of containers, revert position\n            me.revertPosition();\n        }\n        if (willLoseFocus) {\n            GlobalEvents.resumeFocusEvents();\n        }\n        event.preventDefault();\n    }\n    /**\n     * Finalize drag, fire drop.\n     * @private\n     * @param event\n     * @fires drop\n     */\n    finishContainerDrag(event) {\n        const\n            me          = this,\n            { context } = me,\n            // extracting variables to make code more readable\n            { dragging, dragProxy, valid, draggedTo, insertBefore, originalPosition } = context;\n        if (dragging) {\n            // needs to have a valid target\n            context.valid = Boolean(valid && (draggedTo || me.externalDropTargetSelector && event.target.closest(me.externalDropTargetSelector))  &&\n                    // no drop on self or parent\n                    (dragging !== insertBefore || originalPosition.parent !== draggedTo));\n            context.finalize = (valid = context.valid) => {\n                // revert if invalid (and context still exists, might have been aborted from outside)\n                if (!valid && me.context) {\n                    me.revertPosition();\n                }\n                dragging.classList.remove(me.dropPlaceholderCls);\n                dragProxy.remove();\n                me.reset();\n            };\n            // allow async finalization by setting async to true on context in drop handler,\n            // requires implementer to call context.finalize later to finish the drop\n            context.async = false;\n            me.trigger('drop', { context, event });\n            if (!context.async) {\n                // finalize immediately\n                context.finalize();\n            }\n        }\n    }\n    /**\n     * Aborts a drag operation.\n     * @private\n     * @param {Boolean} [invalid]\n     * @param {Object} [event]\n     * @param {Boolean} [silent]\n     */\n    abortContainerDrag(invalid = false, event = null, silent = false) {\n        const\n            me          = this,\n            { context } = me;\n        if (context.dragging) {\n            context.dragging.classList.remove(me.dropPlaceholderCls);\n            context.dragProxy.remove();\n            me.revertPosition();\n        }\n        if (!silent) {\n            me.trigger(invalid ? 'drop' : 'abort', { context, event });\n        }\n        me.reset();\n    }\n    //endregion\n    //region Helpers\n    /**\n     * Updates the drag proxy position.\n     * @private\n     * @param event\n     */\n    updateContainerProxy(event) {\n        const\n            me          = this,\n            { context } = me,\n            proxy       = context.dragProxy;\n        let newX = event.pageX - context.offsetX,\n            newY = event.pageY - context.offsetY;\n        if (typeof me.minX === 'number') {\n            newX = Math.max(me.minX, newX);\n        }\n        if (typeof me.maxX === 'number') {\n            newX = Math.min(me.maxX - proxy.offsetWidth, newX);\n        }\n        if (typeof me.minY === 'number') {\n            newY = Math.max(me.minY, newY);\n        }\n        if (typeof me.maxY === 'number') {\n            newY = Math.min(me.maxY  - proxy.offsetHeight, newY);\n        }\n        if (me.lockX) {\n            DomHelper.setTranslateY(proxy, newY);\n        }\n        else if (me.lockY) {\n            DomHelper.setTranslateX(proxy, newX);\n        }\n        else {\n            DomHelper.setTranslateXY(proxy, newX, newY);\n        }\n        let targetElement;\n        if (event.type === 'touchmove') {\n            const touch = event.changedTouches[0];\n            targetElement = DomHelper.elementFromPoint(touch.clientX, touch.clientY);\n        }\n        else {\n            targetElement = event.target;\n        }\n        context.targetElement = targetElement;\n    }\n    /**\n     * Positions element being dragged in relation to targetElement.\n     * @private\n     * @param targetElement\n     * @param event\n     */\n    moveNextTo(targetElement, event) {\n        const\n            { context } = this,\n            dragElement = context.dragging,\n            parent      = targetElement.parentElement;\n        if (targetElement !== dragElement) {\n            // dragged over a container and not over self, calculate where to insert\n            const centerX = Rectangle.from(targetElement).center.x;\n            if ((this.isRTL && event.pageX > centerX) || (!this.isRTL && event.pageX < centerX)) {\n                // dragged left of target center, insert before\n                parent.insertBefore(dragElement, targetElement);\n                context.insertBefore = targetElement;\n            }\n            else {\n                // dragged right of target center, insert after\n                if (targetElement.nextElementSibling) {\n                    // check that not dragged to the immediate left of self. in such case, position should not change\n                    if (targetElement.nextElementSibling !== dragElement) {\n                        context.insertBefore = targetElement.nextElementSibling;\n                        parent.insertBefore(dragElement, targetElement.nextElementSibling);\n                    }\n                    else if (!context.insertBefore && dragElement.parentElement.lastElementChild !== dragElement) {\n                        // dragged left initially, should stay in place (checked in finishContainerDrag)\n                        context.insertBefore = targetElement.nextElementSibling;\n                    }\n                }\n                else {\n                    parent.appendChild(dragElement);\n                    context.insertBefore = null;\n                }\n            }\n            context.draggedTo = parent;\n        }\n    }\n    /**\n     * Moves element being dragged back to its original position.\n     * @private\n     */\n    revertPosition() {\n        const\n            { context }      = this,\n            { dragging }     = context,\n            { parent, next } = context.originalPosition;\n        // revert to correct location\n        if (next) {\n            const isNoop = next.previousSibling === dragging || (!next && dragging === parent.lastChild);\n            if (!isNoop) {\n                parent.insertBefore(dragging, next);\n            }\n        }\n        else {\n            parent.appendChild(dragging);\n        }\n        // no target container\n        context.draggedTo = null;\n    }\n    //endregion\n};\n", "import Base from '../../Base.js';\nimport DomHelper from '../DomHelper.js';\nimport EventHelper from '../EventHelper.js';\nimport Delayable from '../../mixin/Delayable.js';\nimport Rectangle from '../util/Rectangle.js';\n/**\n * @module Core/helper/mixin/DragHelperTranslate\n */\nconst noScroll = { pageXOffset : 0, pageYOffset : 0 };\n/**\n * Mixin for DragHelper that handles repositioning (translating) an element within its container\n *\n * @mixin\n * @private\n */\nexport default Target => class DragHelperTranslate extends Delayable(Target || Base) {\n    static get $name() {\n        return 'DragHelperTranslate';\n    }\n    static get configurable() {\n        return {\n            positioning : null,\n            // Private config that disables updating elements position, for when data is live updated during drag,\n            // leading to element being redrawn\n            skipUpdatingElement : null\n        };\n    }\n    //region Init\n    /**\n     * Initialize translation drag mode.\n     * @private\n     */\n    initTranslateDrag() {\n        const me = this;\n        if (!me.isElementDraggable && me.targetSelector) {\n            me.isElementDraggable = element => element.closest(me.targetSelector);\n        }\n    }\n    //endregion\n    //region Grab, update, finish\n    /**\n     * Grab an element which can be moved using translation.\n     * @private\n     * @param event\n     * @returns {Boolean}\n     */\n    grabTranslateDrag(event) {\n        const element = this.getTarget(event);\n        if (element) {\n            this.context = {\n                valid : true,\n                element,\n                startPageX   : event.pageX,\n                startPageY   : event.pageY,\n                startClientX : event.clientX,\n                startClientY : event.clientY\n            };\n            return true;\n        }\n        return false;\n    }\n    getTarget(event) {\n        return event.target.closest(this.targetSelector);\n    }\n    getX(element) {\n        if (this.positioning === 'absolute') {\n            // Read left style rather than offsetLeft as it is impacted by margin-left style (Gantt milestones)\n            return parseFloat(element.style.left, 10);\n        }\n        else {\n            return DomHelper.getTranslateX(element);\n        }\n    }\n    getY(element) {\n        if (this.positioning === 'absolute') {\n            return parseFloat(element.style.top, 10);\n        }\n        else {\n            return DomHelper.getTranslateY(element);\n        }\n    }\n    getXY(element) {\n        if (this.positioning === 'absolute') {\n            return [element.offsetLeft, element.offsetTop];\n        }\n        else {\n            return DomHelper.getTranslateXY(element);\n        }\n    }\n    setXY(element, x, y) {\n        if (this.skipUpdatingElement) {\n            return;\n        }\n        if (this.positioning === 'absolute') {\n            element.style.left = x + 'px';\n            element.style.top  = y + 'px';\n        }\n        else {\n            DomHelper.setTranslateXY(element, x, y);\n        }\n    }\n    /**\n     * Start translating, called on first mouse move after dragging\n     * @private\n     * @param event\n     */\n    startTranslateDrag(event) {\n        const\n            me                                       = this,\n            { context, outerElement, proxySelector } = me,\n            // When cloning an element to be dragged, we place it in BODY by default\n            dragWithin                               = me.dragWithin = me.dragWithin || (me.cloneTarget && document.body);\n        let element = context.dragProxy || context.element;\n        const\n            grabbed       = element,\n            grabbedParent = element.parentElement;\n        if (me.cloneTarget) {\n            const\n                elementToClone                            = proxySelector ? element.querySelector(proxySelector) : element,\n                { width, height, x : proxyX, y : proxyY } = Rectangle.from(elementToClone, Rectangle.outer(dragWithin));\n            element = me.createProxy(element);\n            let x = proxyX, y = proxyY;\n            // Match the grabbed element's size and position.\n            if (me.autoSizeClonedTarget) {\n                element.style.width  = `${width}px`;\n                element.style.height = `${height}px`;\n            }\n            element.classList.add(me.dragProxyCls, me.draggingCls);\n            // Remove some irrelevant CSS classes\n            element.classList.remove('b-hover', 'b-selected', 'b-focused');\n            dragWithin.appendChild(element);\n            if (!me.autoSizeClonedTarget || proxySelector) {\n                const\n                    // Center proxy at cursor position, we assume app is applying styles to the element (inline or CSS)\n                    proxyRect                            = element.getBoundingClientRect(),\n                    { x : dragWithinX, y : dragWithinY } = dragWithin.getBoundingClientRect(),\n                    localX                               = event.clientX - dragWithinX,\n                    // Body may have a non-zero top\n                    localY                               = event.clientY - dragWithinY + (dragWithin !== document.body ? document.body.getBoundingClientRect().y : 0);\n                x = localX - (proxyRect.width / 2);\n                y = localY - (proxyRect.height / 2);\n                // When proxy is centered, update to not use original mousedown coordinates, but the first mouse move triggering the drag\n                context.startPageX = event.pageX;\n                context.startPageY = event.pageY;\n            }\n            me.setXY(element, x, y);\n            grabbed.classList.add('b-drag-original');\n            if (me.hideOriginalElement) {\n                grabbed.classList.add('b-hidden');\n            }\n        }\n        element.classList.add(me.draggingCls);\n        Object.assign(context, {\n            // The element which we're moving, could be a cloned version of grabbed, or the grabbed element itself\n            element,\n            // The original element upon which the mousedown event triggered a drag operation\n            grabbed,\n            // The parent of the original element where the pointerdown was detected - to be able to restore after an invalid drop\n            grabbedParent,\n            // The next sibling of the original element where the pointerdown was detected - to be able to restore after an invalid drop\n            grabbedNextSibling : element.nextElementSibling,\n            // elements position within parent element\n            elementStartX : me.getX(element),\n            elementStartY : me.getY(element),\n            elementX      : DomHelper.getOffsetX(element, dragWithin || outerElement),\n            elementY      : DomHelper.getOffsetY(element, dragWithin || outerElement),\n            scrollX : 0,\n            scrollY : 0,\n            scrollManagerElementContainsDragProxy : !me.cloneTarget || dragWithin === outerElement\n        });\n        if (dragWithin) {\n            context.parentElement = element.parentElement;\n            if (dragWithin !== element.parentElement) {\n                dragWithin.appendChild(element);\n            }\n            me.updateTranslateProxy(event);\n        }\n    }\n    // When drag has started, create proxy versions (if applicable) and store original positions of all related elements\n    // to be able to animate back to these positions in case of an aborted drag\n    onTranslateDragStarted() {\n        const\n            me          = this,\n            { context } = me;\n        let { relatedElements } = context;\n        // For unified proxy mode - add a CSS class to the 'main' dragging element to be able to have it be on top of related elements with z-index\n        if (me.unifiedProxy) {\n            context.element.classList.add('b-drag-main', 'b-drag-unified-proxy');\n        }\n        if (relatedElements?.length > 0) {\n            context.relatedElStartPos    = [];\n            context.relatedElDragFromPos = [];\n            const { proxySelector } = me;\n            let [elementStartX, elementStartY] = [context.elementStartX, context.elementStartY];\n            // Store reference to original elements (may need cleanup to remove CSS classes after drop)\n            context.originalRelatedElements = relatedElements;\n            // Create clone proxy elements of all related elements\n            relatedElements                 = context.relatedElements = relatedElements.map((relatedEl, i) => {\n                const\n                    proxyTemplateElement    = proxySelector ? relatedEl.querySelector(proxySelector) : relatedEl,\n                    { x, y, width, height } = Rectangle.from(proxyTemplateElement, me.dragWithin),\n                    relatedElementToDrag    = me.cloneTarget ? me.createProxy(relatedEl) : relatedEl;\n                relatedElementToDrag.classList.add(me.draggingCls);\n                // Remove some irrelevant CSS classes\n                relatedElementToDrag.classList.remove('b-hover', 'b-selected', 'b-focused');\n                if (me.cloneTarget) {\n                    // Match the original related element's position.\n                    me.setXY(relatedElementToDrag, x, y);\n                    me.dragWithin.appendChild(relatedElementToDrag);\n                    relatedElementToDrag.classList.add(me.dragProxyCls);\n                    // Optionally also match the original related element's size\n                    if (me.autoSizeClonedTarget) {\n                        relatedElementToDrag.style.width  = `${width}px`;\n                        relatedElementToDrag.style.height = `${height}px`;\n                    }\n                    if (me.hideOriginalElement) {\n                        relatedEl.classList.add('b-hidden');\n                    }\n                    relatedEl.classList.add('b-drag-original');\n                }\n                context.relatedElStartPos[i] = context.relatedElDragFromPos[i] = me.getXY(relatedElementToDrag);\n                if (me.unifiedProxy) {\n                    relatedElementToDrag.classList.add('b-drag-unified-animation', 'b-drag-unified-proxy');\n                    // Move into cascade and cache the dragFrom pos\n                    elementStartX += me.unifiedOffset;\n                    elementStartY += me.unifiedOffset;\n                    me.setXY(relatedElementToDrag, elementStartX, elementStartY);\n                    context.relatedElDragFromPos[i]   = [elementStartX, elementStartY];\n                    relatedElementToDrag.style.zIndex = 100 - i;\n                }\n                return relatedElementToDrag;\n            });\n            // Move the selected events into a unified cascade.\n            if (me.unifiedProxy && relatedElements && relatedElements.length > 0) {\n                // Animate related elements should into the position\n                EventHelper.onTransitionEnd({\n                    element  : relatedElements[0],\n                    property : 'transform',\n                    handler() {\n                        relatedElements.forEach(el => el.classList.remove('b-drag-unified-animation'));\n                    },\n                    thisObj : me,\n                    once    : true\n                });\n            }\n        }\n    }\n    /**\n     * Limit translation to outer bounds and specified constraints\n     * @private\n     * @param element\n     * @param x\n     * @param y\n     * @returns {{constrainedX: *, constrainedY: *}}\n     */\n    applyConstraints(element, x, y) {\n        const\n            me                           = this,\n            { constrain, dragWithin }    = me,\n            { pageXOffset, pageYOffset } = dragWithin === document.body ? globalThis : noScroll;\n        // limit to outer elements edges\n        if (dragWithin && constrain) {\n            if (x < 0) {\n                x = 0;\n            }\n            if (x + element.offsetWidth > dragWithin.scrollWidth) {\n                x = dragWithin.scrollWidth - element.offsetWidth;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (y + element.offsetHeight > dragWithin.scrollHeight) {\n                y = dragWithin.scrollHeight - element.offsetHeight;\n            }\n        }\n        // limit horizontally\n        if (typeof me.minX === 'number') {\n            x = Math.max(me.minX + pageXOffset, x);\n        }\n        if (typeof me.maxX === 'number') {\n            x = Math.min(me.maxX + pageXOffset, x);\n        }\n        // limit vertically\n        if (typeof me.minY === 'number') {\n            y = Math.max(me.minY + pageYOffset, y);\n        }\n        if (typeof me.maxY === 'number') {\n            y = Math.min(me.maxY + pageYOffset, y);\n        }\n        return { constrainedX : x, constrainedY : y };\n    }\n    /**\n     * Update elements translation on mouse move.\n     * @private\n     * @param {MouseEvent} event\n     * @param {Object} scrollManagerConfig\n     */\n    updateTranslateProxy(event, scrollManagerConfig) {\n        const\n            me                                        = this,\n            { lockX, lockY, context }                 = me,\n            element                                   = context.dragProxy || context.element,\n            { relatedElements, relatedElDragFromPos } = context;\n        // If we are cloning the dragged element outside of the element(s) monitored by the ScrollManager, then no need\n        // to take the scrollManager scroll values into account since it is only relevant when dragProxy is inside\n        // the Grid (where scroll manager operates).\n        if (context.scrollManagerElementContainsDragProxy && scrollManagerConfig) {\n            context.scrollX = scrollManagerConfig.getRelativeLeftScroll(element);\n            context.scrollY = scrollManagerConfig.getRelativeTopScroll(element);\n        }\n        context.pageX   = event.pageX;\n        context.pageY   = event.pageY;\n        context.clientX = event.clientX;\n        context.clientY = event.clientY;\n        let\n            newX = context.elementStartX + event.pageX - context.startPageX + context.scrollX,\n            newY = context.elementStartY + event.pageY - context.startPageY + context.scrollY;\n        // First let outside world apply snapping\n        if (me.snapCoordinates) {\n            const snapped = me.snapCoordinates({ element, newX, newY });\n            newX = snapped.x;\n            newY = snapped.y;\n        }\n        // Now constrain coordinates\n        const { constrainedX, constrainedY } = me.applyConstraints(element, newX, newY);\n        if (context.started || constrainedX !== newX || constrainedY !== newY) {\n            me.setXY(element, lockX ? undefined : constrainedX, lockY ? undefined : constrainedY);\n        }\n        if (relatedElements) {\n            const\n                deltaX = lockX ? 0 : constrainedX - context.elementStartX,\n                deltaY = lockY ? 0 : constrainedY - context.elementStartY;\n            relatedElements.forEach((r, i) => {\n                const [x, y] = relatedElDragFromPos[i];\n                me.setXY(r, x + deltaX, y + deltaY);\n            });\n        }\n        context.newX = constrainedX;\n        context.newY = constrainedY;\n    }\n    /**\n     * Finalize drag, fire drop.\n     * @private\n     * @param event\n     * @fires drop\n     */\n    async finishTranslateDrag(event) {\n        const\n            me                  = this,\n            context             = me.context,\n            { target }          = event,\n            xChanged            = !me.lockX && Math.round(context.newX) !== Math.round(context.elementStartX),\n            yChanged            = !me.lockY && Math.round(context.newY) !== Math.round(context.elementStartY),\n            element             = context.dragProxy || context.element,\n            { relatedElements } = context;\n        if (!me.ignoreSamePositionDrop || xChanged || yChanged) {\n            if (context.valid === false) {\n                await me.abortTranslateDrag(true, event);\n            }\n            else  {\n                const targetRect = !me.allowDropOutside && Rectangle.from(me.dragWithin || me.outerElement);\n                if (targetRect && ((typeof me.minX !== 'number' && me.minX !== true && (event.pageX < targetRect.left)) ||\n                    (typeof me.maxX !== 'number' && me.maxX !== true && (event.pageX > targetRect.right)) ||\n                    (typeof me.minY !== 'number' && me.minY !== true && (event.pageY < targetRect.top)) ||\n                    (typeof me.maxY !== 'number' && me.maxY !== true && (event.pageY > targetRect.bottom)))) {\n                    // revert location when dropped outside allowed element\n                    await me.abortTranslateDrag(true, event);\n                }\n                else {\n                    context.finalize = async(valid = context.valid) => {\n                        // In case someone tries to finalize twice\n                        if (context.finalized) {\n                            console.warn('DragHelper: Finalizing already finalized drag');\n                            return;\n                        }\n                        context.finalized = true;\n                        // abort if invalid (and context still exists, might have been aborted from outside)\n                        if (!valid && me.context) {\n                            // abort if flagged as invalid, without triggering abort or drop again\n                            await me.abortTranslateDrag(true, null, true);\n                        }\n                        if (!me.isDestroyed) {\n                            me.trigger('dropFinalized', { context, event, target });\n                            me.reset();\n                        }\n                        if (!me.cloneTarget && element.parentElement !== context.grabbedParent) {\n                            // If the dragged element was moved to another parent element, remove the transform style\n                            [element, ...(relatedElements || [])].forEach(el => el.style.transform = '');\n                        }\n                    };\n                    // allow async finalization by setting async to true on context in drop handler,\n                    // requires implementer to call context.finalize later to finish the drop\n                    context.async = false;\n                    await me.trigger('drop', { context, event, target });\n                    if (!context.async) {\n                        // finalize immediately\n                        await context.finalize();\n                    }\n                }\n            }\n        }\n        else {\n            // no change, abort\n            me.abortTranslateDrag(false, event);\n        }\n    }\n    /**\n     * Abort translation\n     * @private\n     * @param invalid\n     * @fires abort\n     */\n    async abortTranslateDrag(invalid = false, event = null, silent = false) {\n        const\n            me                                              = this,\n            {\n                cloneTarget,\n                context,\n                proxySelector,\n                dragWithin,\n                draggingCls\n            }                                               = me,\n            { relatedElements, relatedElStartPos, grabbed } = context,\n            element                                         = context.dragProxy || context.element;\n        context.valid = false;\n        me.scrollManager?.stopMonitoring();\n        if (context.aborted) {\n            console.warn('DragHelper: Aborting already aborted drag');\n            return;\n        }\n        let { elementStartX, elementStartY } = context;\n        const proxyMoved = elementStartX !== me.getX(element) ||\n                elementStartY !== me.getY(element);\n        if (element && context.started) {\n            // Put the dragged element back where it was\n            if (!cloneTarget && dragWithin && dragWithin !== context.grabbedParent) {\n                context.grabbedParent.insertBefore(element, context.grabbedNextSibling);\n            }\n            // Align the now visible grabbed element with the clone, so that it looks like it's\n            // sliding back into place when the clone is removed\n            if (cloneTarget) {\n                if (proxySelector) {\n                    const\n                        animateTo = grabbed.querySelector(proxySelector) || grabbed,\n                        { x, y }  = Rectangle.from(animateTo);\n                    elementStartX = x;\n                    elementStartY = y;\n                }\n            }\n            // animated restore of position.\n            element.classList.add('b-aborting');\n            // Move the main element back to its original position.\n            me.setXY(element, elementStartX, elementStartY);\n            // Move any related elements back to their original positions.\n            relatedElements?.forEach((element, i) => {\n                element.classList.remove(draggingCls);\n                element.classList.add('b-aborting');\n                me.setXY(element, relatedElStartPos[i][0], relatedElStartPos[i][1]);\n            });\n            if (!silent) {\n                me.trigger(invalid ? 'drop' : 'abort', { context, event });\n            }\n            // Element may have been scrolled out of view, or otherwise removed while dragging\n            if (element.isConnected && !me.isDestroying && proxyMoved) {\n                await EventHelper.waitForTransitionEnd({\n                    element,\n                    property     : DomHelper.getPropertyTransitionDuration(element, 'transform') ? 'transform' : 'all',\n                    thisObj      : me,\n                    once         : true,\n                    runOnDestroy : true\n                });\n            }\n            if (!me.isDestroyed) {\n                // Trigger event after transition has completed for UIs to redraw with stable DOM\n                me.trigger('abortFinalized', { context, event });\n            }\n        }\n        if (me.context?.started) {\n            me.reset();\n        }\n    }\n    // Restore state of all mutated elements\n    cleanUp() {\n        const\n            me                                                    = this,\n            { context, cloneTarget, draggingCls, dragProxyCls }   = me,\n            element                                               = context.dragProxy || context.element,\n            { relatedElements, originalRelatedElements, grabbed } = context,\n            removeClonedProxies                                   = cloneTarget && (me.removeProxyAfterDrop || !context.valid),\n            cssClassesToRemove                                    = [draggingCls, 'b-aborting', dragProxyCls, 'b-drag-main', 'b-drag-unified-proxy'];\n        element.classList.remove(...cssClassesToRemove);\n        if (removeClonedProxies) {\n            element.remove();\n        }\n        relatedElements?.forEach(element => {\n            if (removeClonedProxies) {\n                element.remove();\n            }\n            else {\n                element.classList.remove(...cssClassesToRemove);\n            }\n        });\n        // Restore originallly grabbed elements\n        grabbed.classList.remove('b-drag-original', 'b-hidden');\n        originalRelatedElements?.forEach(element => element.classList.remove('b-hidden', 'b-drag-original'));\n    }\n    //endregion\n};\n", "import Base from '../Base.js';\nimport Events from '../mixin/Events.js';\nimport DragHelperContainer from './mixin/DragHelperContainer.js';\nimport DragHelperTranslate from './mixin/DragHelperTranslate.js';\nimport DomHelper from './DomHelper.js';\nimport EventHelper from './EventHelper.js';\nimport ObjectHelper from './ObjectHelper.js';\nimport Rectangle from './util/Rectangle.js';\n/**\n * @module Core/helper/DragHelper\n */\nconst rootElementListeners = {\n    move       : 'onMouseMove',\n    up         : 'onMouseUp',\n    docclick   : 'onDocumentClick',\n    touchstart : 'onTouchStart',\n    touchmove  : 'onTouchMove',\n    touchend   : 'onTouchEnd',\n    keydown    : 'onKeyDown'\n};\n/**\n * ## Intro\n * A drag drop helper class which lets you move elements in page. It supports:\n *\n *  * Dragging the actual element\n *  * Dragging a cloned version of the element\n *  * Dragging extra `relatedElements` along with the main element\n *  * Firing useful events {@link #event-beforeDragStart}, {@link #event-dragStart}, {@link #event-drag}, {@link #event-drop}, {@link #event-abort}\n *  * Validation by setting a `valid` Boolean on the drag context object provided to event listeners\n *  * Aborting drag with ESCAPE key\n *  * Constraining drag to be only horizontal or vertical using {@link #config-lockX} and {@link #config-lockY}\n *  * Defining X / Y boundaries using {@link #config-minX}, {@link #config-maxX} and {@link #config-minY}, {@link #config-maxY}\n *  * Async finalization (e.g. to show confirmation prompts)\n *  * Animated final transition after mouse up of a valid drop (see {@link #function-animateProxyTo})\n *  * Animated abort transition after an invalid or aborted drop\n *\n * {@inlineexample Core/helper/DragHelper.js}\n *\n * ## Two modes\n *\n * DragHelper supports two {@link #config-mode modes}:\n *\n * * `container` - moving / rearranging elements within and between specified containers\n * * `translateXY` - freely repositioning an element, either using the element or a cloned version of it - a \"drag proxy\" (default mode)\n *\n * ## Container drag mode\n *\n * Container drag should be used when moving or rearranging child elements within and between specified containers\n *\n * Example:\n * ```javascript\n * // dragging element between containers\n * let dragHelper = new DragHelper({\n *   mode       : 'container',\n *   containers : [ container1, container2 ]\n * });\n *```\n *\n * ## Translate drag mode\n *\n * Use translate drag to reposition an element within its container using transform CSS.\n *\n * Example:\n * ```javascript\n * // dragging element within container\n * let dragHelper = new DragHelper({\n *   mode           : 'translateXY',\n *   targetSelector : 'div.movable'\n * });\n * ```\n *\n * ## Observable events\n * In the various events fired by the DragHelper, you will have access to the raw DOM event and some useful `context` about the drag operation:\n *\n * ```javascript\n *  myDrag.on({\n *      drag : ({event , context}) {\n *            // The element which we're moving, could be a cloned version of grabbed, or the grabbed element itself\n *           const element = context.element;\n *\n *           // The original mousedown element upon which triggered the drag operation\n *           const grabbed = context.grabbed;\n *\n *           // The target under the current mouse / pointer / touch position\n *           const target = context.target;\n *       }\n *  });\n * ```\n *\n * ## Simple drag helper subclass with a drop target specified:\n * ```javascript\n * export default class MyDrag extends DragHelper {\n *      static get defaultConfig() {\n *          return {\n *              // Don't drag the actual cell element, clone it\n *              cloneTarget        : true,\n *              mode               : 'translateXY',\n *              // Only allow drops on DOM elements with 'yourDropTarget' CSS class specified\n *              dropTargetSelector : '.yourDropTarget',\n *\n *              // Only allow dragging elements with the 'draggable' CSS class\n *              targetSelector : '.draggable'\n *          };\n *      }\n *\n *      construct(config) {\n *          const me = this;\n *\n *          super.construct(config);\n *\n *          me.on({\n *              dragstart : me.onDragStart\n *          });\n *      }\n *\n *      onDragStart({ event, context }) {\n *          const target = context.target;\n *\n *          // Here you identify what you are dragging (an image of a user, grid row in an order table etc) and map it to something in your\n *          // data model. You can store your data on the context object which is available to you in all drag-related events\n *          context.userId = target.dataset.userId;\n *      }\n *\n *      onEquipmentDrop({ context, event }) {\n *          const me = this;\n *\n *          if (context.valid) {\n *              const userId   = context.userId,\n *                    droppedOnTarget = context.target;\n *\n *              console.log(`You dropped user ${userStore.getById(userId).name} on ${droppedOnTarget}`, droppedOnTarget);\n *\n *              // Dropped on a scheduled event, display toast\n *              Toast.show(`You dropped user ${userStore.getById(userId).name} on ${droppedOnTarget}`);\n *          }\n *      }\n *  };\n * ```\n *\n * ## Dragging multiple elements\n *\n * You can tell the DragHelper to also move additional `relatedElements` when a drag operation is starting. Simply\n * provide an array of elements on the context object:\n *\n * ```javascript\n * new DragHelper ({\n *     callOnFunctions : true,\n *\n *     onDragStart({ context }) {\n *          // Let drag helper know about extra elements to drag\n *          context.relatedElements = Array.from(element.querySelectorAll('.b-resource-avatar'));\n *     }\n * });\n * ```\n *\n * ## Creating a custom drag proxy\n *\n * Using the {@link #function-createProxy} you can create any markup structure to use when dragging cloned targets.\n *\n * ```javascript\n * new DragHelper ({\n *    callOnFunctions      : true,\n *    // Don't drag the actual cell element, clone it\n *    cloneTarget          : true,\n *    // We size the cloned element using CSS\n *    autoSizeClonedTarget : false,\n *\n *    mode               : 'translateXY',\n *    // Only allow drops on certain DOM nodes\n *    dropTargetSelector : '.myDropTarget',\n *    // Only allow dragging cell elements in a Bryntum Grid\n *    targetSelector     : '.b-grid-row:not(.b-group-row) .b-grid-cell'\n *\n *    // Here we receive the element where the drag originated and we can choose to return just a child element of it\n *    // to use for the drag proxy (such as an icon)\n *    createProxy(element) {\n *        return element.querySelector('i').cloneNode();\n *    }\n * });\n * ```\n *\n * ## Animating a cloned drag proxy to a point before finalizing\n *\n * To provide users with the optimal user experience, you can set a `transitionTo` object (with `target` element and\n * `align` spec) on the DragHelper\u00B4s `context` object inside a {@link #event-drop} listener (only applies to translate\n * {@link #config-mode mode} operations). This will trigger a final animation of the drag proxy which should represent\n * the change of data state that will be triggered by the drop.\n *\n * You can see this in action in Gantt\u00B4s `drag-resource-from-grid` demo.\n *\n * ```javascript\n * new DragHelper ({\n *    callOnFunctions      : true,\n *    // Don't drag the actual cell element, clone it\n *    cloneTarget          : true,\n *    // We size the cloned element using CSS\n *    autoSizeClonedTarget : false,\n *\n *    mode               : 'translateXY',\n *    // Only allow drops on certain DOM nodes\n *    dropTargetSelector : '.myDropTarget',\n *    // Only allow dragging cell elements in a Bryntum Grid\n *    targetSelector     : '.b-grid-row:not(.b-group-row) .b-grid-cell'\n *\n *    // Here we receive the element where the drag originated and we can choose to return just a child element of it\n *    // to use for the drag proxy (such as an icon)\n *    createProxy(element) {\n *        return element.querySelector('i').cloneNode();\n *    },\n *\n *    async onDrop({ context, event }) {\n *       // If it's a valid drop, provide a point to animate the proxy to before finishing the operation\n *      if (context.valid) {\n *          await this.animateProxyTo(someElement, {\n *               // align left side of drag proxy to right side of the someElement\n *               align  : 'l0-r0'\n *          });\n *      }\n *      else {\n *          Toast.show(`You cannot drop here`);\n *      }\n *   }\n * });\n * ```\n *\n * @mixes Core/mixin/Events\n * @extends Core/Base\n */\nexport default class DragHelper extends Base.mixin(Events, DragHelperContainer, DragHelperTranslate) {\n    //region Config\n    static get defaultConfig() {\n        return {\n            /**\n             * Drag proxy CSS class\n             * @config {String}\n             * @default\n             * @private\n             */\n            dragProxyCls : 'b-drag-proxy',\n            /**\n             * CSS class added when drag is invalid\n             * @config {String}\n             * @default\n             */\n            invalidCls : 'b-drag-invalid',\n            /**\n             * CSS class added to the source element in Container drag\n             * @config {String}\n             * @default\n             * @private\n             */\n            draggingCls : 'b-dragging',\n            /**\n             * CSS class added to the source element in Container drag\n             * @config {String}\n             * @default\n             * @private\n             */\n            dropPlaceholderCls : 'b-drop-placeholder',\n            /**\n             * The amount of pixels to move mouse before it counts as a drag operation\n             * @config {Number}\n             * @default\n             */\n            dragThreshold : 5,\n            /**\n             * The outer element where the drag helper will operate (attach events to it and use as outer limit when looking for ancestors)\n             * @config {HTMLElement}\n             * @default\n             */\n            outerElement : document.body,\n            /**\n             * Outer element that limits where element can be dragged\n             * @config {HTMLElement}\n             */\n            dragWithin : null,\n            /**\n             * Set to true to stack any related dragged elements below the main drag proxy element. Only applicable when\n             * using translate {@link #config-mode} with {@link #config-cloneTarget}\n             * @config {Boolean}\n             */\n            unifiedProxy : null,\n            monitoringConfig : null,\n            /**\n             * Constrain translate drag to dragWithin elements bounds (set to false to allow it to \"overlap\" edges)\n             * @config {Boolean}\n             * @default\n             */\n            constrain : true,\n            /**\n             * Smallest allowed x when dragging horizontally.\n             * @config {Number}\n             */\n            minX : null,\n            /**\n             * Largest allowed x when dragging horizontally.\n             * @config {Number}\n             */\n            maxX : null,\n            /**\n             * Smallest allowed y when dragging horizontally.\n             * @config {Number}\n             */\n            minY : null,\n            /**\n             * Largest allowed y when dragging horizontally.\n             * @config {Number}\n             */\n            maxY : null,\n            /**\n             * Enabled dragging, specify mode:\n             * <table>\n             * <tr><td>container<td>Allows reordering elements within one and/or between multiple containers\n             * <tr><td>translateXY<td>Allows dragging within a parent container\n             * </table>\n             * @config {'container'|'translateXY'}\n             * @default\n             */\n            mode : 'translateXY',\n            /**\n             * A function that determines if dragging an element is allowed. Gets called with the element as argument,\n             * return `true` to allow dragging or `false` to prevent.\n             * @config {Function}\n             * @param {HTMLElement} element\n             * @returns {Boolean}\n             */\n            isElementDraggable : null,\n            /**\n             * A CSS selector used to determine if dragging an element is allowed.\n             * @config {String}\n             */\n            targetSelector : null,\n            /**\n             * A CSS selector used to determine if a drop is allowed at the current position.\n             * @config {String}\n             */\n            dropTargetSelector : null,\n            /**\n             * A CSS selector added to each drop target element while dragging.\n             * @config {String}\n             */\n            dropTargetCls : null,\n            /**\n             * A CSS selector used to target a child element of the mouse down element, to use as the drag proxy element.\n             * Applies to translate {@link #config-mode mode} when using {@link #config-cloneTarget}.\n             * @config {String}\n             */\n            proxySelector : null,\n            /**\n             * Set to `true` to clone the dragged target, and not move the actual target DOM node.\n             * @config {Boolean}\n             * @default\n             */\n            cloneTarget : false,\n            /**\n             * Set to `false` to not apply width/height of cloned drag proxy elements.\n             * @config {Boolean}\n             * @default\n             */\n            autoSizeClonedTarget : true,\n            /**\n             * Set to true to hide the original element while dragging (applicable when `cloneTarget` is true).\n             * @config {Boolean}\n             * @default\n             */\n            hideOriginalElement : false,\n            /**\n             * Containers whose elements can be rearranged (and moved between the containers). Used when\n             * mode is set to \"container\".\n             * @config {HTMLElement[]}\n             */\n            containers : null,\n            /**\n             * A CSS selector used to exclude elements when using container mode\n             * @config {String}\n             */\n            ignoreSelector : null,\n            startEvent : null,\n            /**\n             * Configure as `true` to disallow dragging in the `X` axis. The dragged element will only move vertically.\n             * @config {Boolean}\n             * @default\n             */\n            lockX : false,\n            /**\n             * Configure as `true` to disallow dragging in the `Y` axis. The dragged element will only move horizontally.\n             * @config {Boolean}\n             * @default\n             */\n            lockY : false,\n            /**\n             * The amount of milliseconds to wait after a touchstart, before a drag gesture will be allowed to start.\n             * @config {Number}\n             * @default\n             */\n            touchStartDelay : 300,\n            /**\n             * Scroll manager of the target. If specified, scrolling while dragging is supported.\n             * @config {Core.util.ScrollManager}\n             */\n            scrollManager : null,\n            /**\n             * A method provided to snap coordinates to fixed points as you drag\n             * @config {Function}\n             * @internal\n             */\n            snapCoordinates : null,\n            /**\n             * When using {@link #config-unifiedProxy}, use this amount of pixels to offset each extra element when dragging multiple items\n             * @config {Number}\n             * @default\n             */\n            unifiedOffset : 5,\n            /**\n             * Configure as `false` to take ownership of the proxy element after a valid drop (advanced usage).\n             * @config {Boolean}\n             * @default\n             */\n            removeProxyAfterDrop : true,\n            clickSwallowDuration : 50,\n            ignoreSamePositionDrop : true,\n            // true to allow drops outside the dragWithin element\n            allowDropOutside : null,\n            // for container mode\n            floatRootOwner   : null,\n            mouseMoveListenerElement   : document,\n            externalDropTargetSelector : null,\n            testConfig : {\n                transitionDuration   : 10,\n                clickSwallowDuration : 50,\n                touchStartDelay      : 100\n            },\n            rtlSource : null,\n            /**\n             * Creates the proxy element to be dragged, when using {@link #config-cloneTarget}. Clones the original element by default.\n             * Provide your custom {@link #function-createProxy} function to be used for creating drag proxy.\n             * @param {HTMLElement} element The element from which the drag operation originated\n             * @config {Function}\n             * @returns {HTMLElement}\n             */\n            createProxy : null\n        };\n    }\n    //endregion\n    //region Events\n    /**\n     * Fired before dragging starts, return `false` to prevent the drag operation.\n     * @preventable\n     * @event beforeDragStart\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {HTMLElement} context.element The original element upon which the mousedown event triggered a drag operation\n     * @param {MouseEvent|TouchEvent} event\n     */\n    /**\n     * Fired when dragging starts. The event includes a `context` object. If you want to drag additional elements you can\n     * provide these as an array of elements assigned to the `relatedElements` property of the context object.\n     * @event dragStart\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {HTMLElement} context.element The element which we're moving, could be a cloned version of grabbed, or the grabbed element itself\n     * @param {HTMLElement} context.grabbed The original element upon which the mousedown event triggered a drag operation\n     * @param {HTMLElement[]} context.relatedElements Array of extra elements to include in the drag.\n     * @param {MouseEvent|TouchEvent} event\n     */\n    /**\n     * Fired while dragging, you can signal that the drop is valid or invalid by setting `context.valid = false;`\n     * @event drag\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {HTMLElement} context.element The element which we are moving, could be a cloned version of grabbed, or the grabbed element itself\n     * @param {HTMLElement} context.target The target element below the cursor\n     * @param {HTMLElement} context.grabbed The original element upon which the mousedown event triggered a drag operation\n     * @param {HTMLElement[]} context.relatedElements An array of extra elements dragged with the main dragged element\n     * @param {Boolean} context.valid Set this to true or false to indicate whether the drop position is valid.\n     * @param {MouseEvent} event\n     */\n    /**\n     * Fired after a drop at an invalid position\n     * @event abort\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {HTMLElement} context.element The element which we are moving, could be a cloned version of grabbed, or the grabbed element itself\n     * @param {HTMLElement} context.target The target element below the cursor\n     * @param {HTMLElement} context.grabbed The original element upon which the mousedown event triggered a drag operation\n     * @param {HTMLElement[]} context.relatedElements An array of extra elements dragged with the main dragged element\n     * @param {MouseEvent} event\n     */\n    /**\n     * Fires after {@link #event-abort} and after drag proxy has animated back to its original position\n     * @private\n     * @event abortFinalized\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {HTMLElement} context.element The element which we are moving, could be a cloned version of grabbed, or the grabbed element itself\n     * @param {HTMLElement} context.target The target element below the cursor\n     * @param {HTMLElement} context.grabbed The original element upon which the mousedown event triggered a drag operation\n     * @param {MouseEvent} event\n     */\n    //endregion\n    //region Init\n    /**\n     * Initializes a new DragHelper.\n     * @param {DragHelperConfig} config Configuration object, accepts options specified under Configs above\n     *\n     * ```javascript\n     * new DragHelper({\n     *   containers: [div1, div2],\n     *   isElementDraggable: element => element.className.contains('handle'),\n     *   outerElement: topParent,\n     *   listeners: {\n     *     drop: onDrop,\n     *     thisObj: this\n     *   }\n     * });\n     * ```\n     *\n     * @function constructor\n     */\n    construct(config) {\n        const me = this;\n        super.construct(config);\n        me.initListeners();\n        if (me.isContainerDrag) {\n            me.initContainerDrag();\n        }\n        else {\n            me.initTranslateDrag();\n        }\n        me.onScrollManagerScrollCallback = me.onScrollManagerScrollCallback.bind(me);\n    }\n    doDestroy() {\n        this.reset(true);\n        super.doDestroy();\n    }\n    /**\n     * Initialize listener\n     * @private\n     */\n    initListeners() {\n        const\n            me                 = this,\n            { outerElement }   = me,\n            dragStartListeners = {\n                element     : outerElement,\n                pointerdown : 'onPointerDown',\n                thisObj     : me\n            };\n        me.mouseMoveListenerElement = me.getMouseMoveListenerTarget(outerElement);\n        // These will be autoDetached upon destroy\n        EventHelper.on(dragStartListeners);\n    }\n    // Salesforce hook: we override this method to move listener from the body (which is default root node) to element\n    // inside of LWC\n    getMouseMoveListenerTarget(element) {\n        const root = element.getRootNode();\n        let result = this.mouseMoveListenerElement;\n        // If we are inside a closed shadow root and we are a child of a Widget, listen to mouse moves only inside outermost el\n        if (root.nodeType === Node.DOCUMENT_FRAGMENT_NODE && root.mode === 'closed') {\n            result = element.closest('.b-outer') || result;\n        }\n        return result;\n    }\n    get isRTL() {\n        return Boolean(this.rtlSource?.rtl);\n    }\n    //endregion\n    //region Events\n    /**\n     * Fires after drop. For valid drops, it exposes `context.async` which you can set to true to signal that additional\n     * processing is needed before finalizing the drop (such as showing some dialog). When that operation is done, call\n     * `context.finalize(true/false)` with a boolean that determines the outcome of the drop.\n     *\n     * You can signal that the drop is valid or invalid by setting `context.valid = false;`\n     *\n     * For translate type drags with {@link #config-cloneTarget}, you can also set `transitionTo` if you want to animate\n     * the dragged proxy to a position before finalizing the operation. See class intro text for example usage.\n     *\n     * @event drop\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {HTMLElement} context.element The element which we are moving, could be a cloned version of grabbed, or the grabbed element itself\n     * @param {HTMLElement} context.target The target element below the cursor\n     * @param {HTMLElement} context.grabbed The original element upon which the mousedown event triggered a drag operation\n     * @param {HTMLElement[]} context.relatedElements An array of extra elements dragged with the main dragged element\n     * @param {Boolean} context.valid true if the drop position is valid\n     */\n    /**\n     * Fires after {@link #event-drop} and after drag proxy has animated to its final position (if setting `transitionTo`\n     * on the drag context object).\n     * @private\n     * @event dropFinalized\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {HTMLElement} context.element The element which we are moving, could be a cloned version of grabbed, or the grabbed element itself\n     * @param {HTMLElement} context.target The target element below the cursor\n     * @param {HTMLElement} context.grabbed The original element upon which the mousedown event triggered a drag operation\n     */\n    onPointerDown(event) {\n        const me = this;\n        if (\n            // Left button or touch allowed\n            event.button !== 0 ||\n            // If a drag is ongoing already, finalize it and don't proceed with new drag (happens if pointerup happened\n            // when current window wasn't focused - tab switch or window switch). Also handles the edge case of trying to\n            // start a new drag while previous is awaiting finalization, in which case it just bails out.\n            me.context\n        ) {\n            return;\n        }\n        // Check that element is draggable\n        if (me.isElementDraggable && !me.isElementDraggable(event.target, event)) {\n            return;\n        }\n        me.startEvent = event;\n        const handled = me.isContainerDrag ? me.grabContainerDrag(event) : me.grabTranslateDrag(event);\n        if (handled) {\n            me.blurDetacher = EventHelper.on({\n                element : globalThis,\n                blur    : me.onWindowBlur,\n                thisObj : me\n            });\n            const dragListeners = {\n                element : me.mouseMoveListenerElement,\n                thisObj : me,\n                capture : true,\n                keydown : rootElementListeners.keydown\n            };\n            if (event.pointerType === 'touch') {\n                me.touchStartTimer = me.setTimeout(() => me.touchStartTimer = null, me.touchStartDelay, 'touchStartDelay');\n                dragListeners.touchmove = {\n                    handler : rootElementListeners.touchmove,\n                    passive : false // We need to be able to preventDefault on the touchmove\n                };\n                // Touch desktops don't fire touchend event when touch has ended, instead pointerup is fired\n                // iOS do fire touchend\n                dragListeners.touchend = dragListeners.pointerup = rootElementListeners.touchend;\n            }\n            else {\n                dragListeners.pointermove = rootElementListeners.move;\n                dragListeners.pointerup = rootElementListeners.up;\n            }\n            // A listener detacher is returned;\n            me.dragListenersDetacher = EventHelper.on(dragListeners);\n            if (me.dragWithin && me.dragWithin !== me.outerElement && me.outerElement.contains(me.dragWithin)) {\n                const\n                    box = Rectangle.from(me.dragWithin, me.outerElement);\n                me.minY = box.top;\n                me.maxY = box.bottom;\n                me.minX = box.left;\n                me.maxX = box.right;\n            }\n        }\n    }\n    async internalMove(event) {\n        // Ignore events used to mimic pointer movement on scroll, those should not affect dragging\n        if (event.scrollInitiated) {\n            return;\n        }\n        const\n            me             = this,\n            { context }    = me,\n            distance       = EventHelper.getDistanceBetween(me.startEvent, event),\n            abortTouchDrag = me.touchStartTimer && distance > me.dragThreshold;\n        if (abortTouchDrag) {\n            me.abort(true);\n            return;\n        }\n        if (\n            !me.touchStartTimer && context?.element && (context.started || distance >= me.dragThreshold) &&\n            // Ignore text nodes\n            event.target?.nodeType === Node.ELEMENT_NODE\n        ) {\n            if (!context.started) {\n                if (me.trigger('beforeDragStart', { context, event }) === false) {\n                    return me.abort();\n                }\n                if (me.isContainerDrag) {\n                    me.startContainerDrag(event);\n                }\n                else {\n                    me.startTranslateDrag(event);\n                }\n                context.started = true;\n                // Now that the drag drop is confirmed to be starting, activate the configured scrollManager if present\n                me.scrollManager?.startMonitoring(ObjectHelper.merge({\n                    scrollables : [\n                        {\n                            element : me.dragWithin || me.outerElement\n                        }\n                    ],\n                    callback : me.onScrollManagerScrollCallback\n                }, me.monitoringConfig));\n                // Global informational class for when DragHelper is dragging\n                context.outermostEl = DomHelper.getOutermostElement(event.target);\n                context.outermostEl.classList.add('b-draghelper-active');\n                if (me.dropTargetSelector && me.dropTargetCls) {\n                    DomHelper.getRootElement(me.outerElement).querySelectorAll(me.dropTargetSelector).forEach(\n                        el => el.classList.add(me.dropTargetCls)\n                    );\n                }\n                // This event signals that the drag is started, observers could then provide relatedElements that should\n                // be dragged along with the mousedowned element\n                const result = me.trigger('dragStart', { context, event });\n                // Try to keep the drag flow synchronous unless listener returns a promise\n                if (ObjectHelper.isPromise(result)) {\n                    await result;\n                }\n                context.moveUnblocked = true;\n                if (me.isContainerDrag) {\n                    me.onContainerDragStarted(event);\n                }\n                else {\n                    me.onTranslateDragStarted(event);\n                }\n                // This event is used to set visibility of the original events in case drag is started\n                // in copy mode\n                me.trigger('afterDragStart', { context, event });\n            }\n            // Drag is started asynchronously, meaning this code path may be invoked several times before flag is set.\n            // We queue move events to trigger them afterwards. Used by `PercentBar` feature in SchedulerPro. Normal usage\n            // should not be affected because microtasks won't appear unless there is asynchronous handler.\n            if (context.moveUnblocked) {\n                // Use cached event, if there was one\n                if (me._cachedMouseEvent) {\n                    // some tests expect 2+ events\n                    me.update(event);\n                    me.update(me._cachedMouseEvent);\n                    delete me._cachedMouseEvent;\n                }\n                else {\n                    me.update(event);\n                }\n            }\n            else {\n                // Save last triggered event while we were waiting for promise to resolve\n                me._cachedMouseEvent = event;\n            }\n            // to prevent view drag (scroll) on ipad\n            if (event.type === 'touchmove') {\n                event.preventDefault();\n                event.stopImmediatePropagation();\n            }\n        }\n    }\n    onScrollManagerScrollCallback(config) {\n        const { lastMouseMoveEvent } = this;\n        if (this.context?.element && lastMouseMoveEvent) {\n            // Indicate that this is a 'fake' mousemove event as a result of the scrolling\n            lastMouseMoveEvent.isScroll = true;\n            this.update(lastMouseMoveEvent, config);\n        }\n    }\n    onTouchMove(event) {\n        this.internalMove(event);\n    }\n    /**\n     * Move drag element with mouse.\n     * @param event\n     * @fires beforeDragStart\n     * @fires dragStart\n     * @private\n     */\n    onMouseMove(event) {\n        this.internalMove(event);\n    }\n    /**\n     * Updates drag, called when an element is grabbed and mouse moves\n     * @private\n     * @fires drag\n     */\n    update(event, scrollManagerConfig) {\n        const\n            me                   = this,\n            { context }          = me,\n            scrollingPageElement = document.scrollingElement || document.body; // two different modes used\n        // In case of scrolling need to update target element based on [X, Y] of the mouse event\n        // Salesforce workaround: we're listening on the document body and salesforce won't report correct target, so\n        // we try to get it from composed path\n        let target = me.getMouseMoveEventTarget(event);\n        // \"pointer-events:none\" touchmove has no effect for the touchmove event target, meaning we cannot know\n        // what's under the cursor as easily in touch devices\n        if (event.type === 'touchmove') {\n            const touch = event.changedTouches[0];\n            target = DomHelper.elementFromPoint(touch.clientX + scrollingPageElement.scrollLeft, touch.clientY + scrollingPageElement.scrollTop);\n        }\n        context.target = target;\n        let internallyValid = me.allowDropOutside || !me.dragWithin || me.dragWithin.contains(event.target);\n        if (internallyValid && me.dropTargetSelector) {\n            internallyValid = internallyValid && Boolean(target?.closest(me.dropTargetSelector));\n        }\n        // Move the drag proxy or dragged element before triggering the drag event\n        if (me.isContainerDrag) {\n            me.updateContainerProxy(event, scrollManagerConfig);\n        }\n        else {\n            // Note, if you drag an element from Container A to Container B which is scrollable (handled by ScrollManager),\n            // and you notice that the proxy element follows the scroll and goes away from the cursor,\n            // make sure you set `outerElement` to the container of the source element (Container A)\n            // and set `constrain` to `false`.\n            me.updateTranslateProxy(event, scrollManagerConfig);\n        }\n        context.valid = internallyValid;\n        // Allow external code to validate the context before updating a container drag\n        me.trigger('drag', { context, event });\n        // Move the placeholder element into its new place.\n        // This will see the new state of context if mutated by a drag listener.\n        if (me.isContainerDrag) {\n            me.updateContainerDrag(event, scrollManagerConfig);\n        }\n        context.valid = context.valid && internallyValid;\n        for (const element of me.draggedElements) {\n            element.classList.toggle(me.invalidCls, !context.valid);\n        }\n        if (event) {\n            me.lastMouseMoveEvent = event;\n        }\n    }\n    get draggedElements() {\n        const { context } = this;\n        return [context.dragProxy || context.element, ...(context.relatedElements ?? [])];\n    }\n    /**\n     * Abort dragging\n     * @fires abort\n     */\n    async abort(silent = false) {\n        const\n            me          = this,\n            { context } = me;\n        me.scrollManager?.stopMonitoring?.();\n        me.removeListeners();\n        if (context?.started && !context.aborted) {\n            // Force a synchronous layout so that transitions from this point will work.\n            context.element.getBoundingClientRect();\n            // Aborted drag not considered valid\n            context.valid = false;\n            if (me.isContainerDrag) {\n                me.abortContainerDrag(undefined, undefined, silent);\n            }\n            else {\n                me.abortTranslateDrag(undefined, undefined, silent);\n            }\n            context.aborted = true;\n        }\n        else {\n            me.reset(true);\n        }\n    }\n    // Empty class implementation. If listeners *are* added, the detacher is added\n    // as an instance property. So this is always callable.\n    removeListeners() {\n        this.dragListenersDetacher?.();\n        this.blurDetacher?.();\n    }\n    // Called when a drag operation is completed, or aborted\n    // Removes DOM listeners and resets context\n    reset(silent) {\n        const\n            me          = this,\n            { context } = me;\n        if (context?.started) {\n            for (const element of me.draggedElements) {\n                element.classList.remove(me.invalidCls);\n            }\n            context.outermostEl.classList.remove('b-draghelper-active');\n            if (me.isContainerDrag) {\n                context.dragProxy.remove();\n            }\n            else {\n                me.cleanUp();\n            }\n            if (me.dropTargetSelector && me.dropTargetCls) {\n                DomHelper.getRootElement(me.outerElement).querySelectorAll(me.dropTargetSelector).forEach(\n                    el => el.classList.remove(me.dropTargetCls)\n                );\n            }\n        }\n        me.removeListeners();\n        /**\n         * Fired after a drag operation is completed or aborted\n         * @event reset\n         * @private\n         * @param {Core.helper.DragHelper} dragHelper\n         */\n        if (!silent) {\n            me.trigger('reset');\n        }\n        me.context = me.lastMouseMoveEvent = null;\n    }\n    onTouchEnd(event) {\n        this.onMouseUp(event);\n    }\n    /**\n     * This is a capture listener, only added during drag, which prevents a click gesture\n     * propagating from the terminating mouseup gesture\n     * @param {MouseEvent} event\n     * @private\n     */\n    onDocumentClick(event) {\n        event.stopPropagation();\n    }\n    /**\n     * Drop on mouse up (if dropped on valid target).\n     * @param event\n     * @private\n     */\n    onMouseUp(event) {\n        const\n            me          = this,\n            { context } = me;\n        me.removeListeners();\n        if (context) {\n            me.scrollManager?.stopMonitoring();\n            if (context.started) {\n                if (context.moveUnblocked) {\n                    // Nobody else must get to process the pointerup event of a drag.\n                    // We are using capture : true, so we see it first\n                    event.stopPropagation();\n                    context.finalizing = true;\n                    if (me.isContainerDrag) {\n                        me.finishContainerDrag(event);\n                    }\n                    else {\n                        me.finishTranslateDrag(event);\n                    }\n                    // Prevent the impending document click from the mouseup event from propagating\n                    // into a click on our element.\n                    EventHelper.on({\n                        element : document,\n                        thisObj : me,\n                        click   : rootElementListeners.docclick,\n                        capture : true,\n                        expires : me.clickSwallowDuration, // In case a click did not ensue, remove the listener\n                        once    : true\n                    });\n                }\n                // If move has not yet started (due to async listener) and we've received a mouseup event, we need to\n                // listen to the next `drag` event to handle mouseup at the correct app state\n                else {\n                    me.ion({\n                        drag() {\n                            me.onMouseUp(event);\n                        },\n                        once : true\n                    });\n                }\n            }\n            else {\n                me.reset(true);\n            }\n        }\n    }\n    /**\n     * Cancel on ESC key\n     * @param event\n     * @private\n     */\n    onKeyDown(event) {\n        if (this.context?.started && event.key === 'Escape') {\n            // Nobody else must get to process the ESCAPE key event of a drag.\n            // We are using capture : true, so we see it first\n            event.stopImmediatePropagation();\n            this.abort();\n        }\n    }\n    onWindowBlur() {\n        // If window blur occurs while we are dragging (tab is switched, another window steals focus from browser)\n        // pointer might be released and current window will not know about that. Thus allowing to pointerdown again\n        // when focus comes back. In this case we want to let drag helper know that next pointerdown should be ignored.\n        if (this.context && !this.context.finalizing) {\n            this.abort();\n        }\n    }\n    /**\n     * Creates the proxy element to be dragged, when using {@link #config-cloneTarget}. Clones the original element by default.\n     * Override it to provide your own custom HTML element structure to be used as the drag proxy.\n     * @param {HTMLElement} element The element from which the drag operation originated\n     * @returns {HTMLElement}\n     */\n    createProxy(element) {\n        if (this.proxySelector) {\n            element = element.querySelector(this.proxySelector) || element;\n        }\n        const proxy = element.cloneNode(true);\n        proxy.removeAttribute('id');\n        return proxy;\n    }\n    //endregion\n    get isContainerDrag() {\n        return this.mode === 'container';\n    }\n    /**\n     * Animated the proxy element to be aligned with the passed element. Returns a Promise which resolves after the\n     * DOM transition completes. Only applies to 'translateXY' mode.\n     * @param {HTMLElement|Core.helper.util.Rectangle} element The target element or a Rectangle\n     * @param {AlignSpec} [alignSpec] An object describing how to the align drag proxy to the target element\n     * to offset the aligned widget further from the target. May be configured as -ve to move the aligned widget\n     * towards the target - for example producing the effect of the anchor pointer piercing the target.\n     */\n    async animateProxyTo(targetElement, alignSpec = { align : 'c-c' }) {\n        const\n            { context, draggedElements } = this,\n            { element }                  = context,\n            targetRect                   = targetElement.isRectangle ? targetElement : Rectangle.from(targetElement);\n        draggedElements.forEach(el => {\n            el.classList.add('b-drag-final-transition');\n            DomHelper.alignTo(el, targetRect, alignSpec);\n        });\n        await EventHelper.waitForTransitionEnd({\n            element,\n            property : 'all',\n            thisObj  : this,\n            once     : true\n        });\n        draggedElements.forEach(el => el.classList.remove('b-drag-final-transition'));\n    }\n    /**\n     * Returns true if a drag operation is active\n     * @property {Boolean}\n     * @readonly\n     */\n    get isDragging() {\n        return Boolean(this.context?.started);\n    }\n    //#region Salesforce hooks\n    getMouseMoveEventTarget(event) {\n        return !event.isScroll ? event.target : DomHelper.elementFromPoint(event.clientX, event.clientY);\n    }\n    //#endregion\n}\nDragHelper._$name = 'DragHelper';", "import Base from '../Base.js';\nimport Events from '../mixin/Events.js';\nimport BrowserHelper from './BrowserHelper.js';\nimport EventHelper from './EventHelper.js';\nimport DomHelper from './DomHelper.js';\nimport ObjectHelper from './ObjectHelper.js';\nimport Rectangle from './util/Rectangle.js';\nconst documentListeners = {\n    down       : 'onMouseDown',\n    move       : 'onMouseMove',\n    up         : 'onMouseUp',\n    docclick   : 'onDocumentClick',\n    touchstart : {\n        handler : 'onTouchStart',\n        // We preventDefault touchstart so as not to scroll. Must not be passive.\n        // https://developers.google.com/web/updates/2017/01/scrolling-intervention\n        passive : false\n    },\n    touchmove : 'onTouchMove',\n    touchend  : 'onTouchEnd',\n    keydown   : 'onKeyDown'\n};\n/**\n * @module Core/helper/ResizeHelper\n */\n/**\n * Contextual information available during a resize.\n *\n * @typedef {Object} ResizeContext\n * @property {HTMLElement} element Element being resized\n * @property {'top'|'right'|'bottom'|'left'} edge Edge being dragged\n * @property {Boolean} valid `true` if the resize is valid, `false` if it is not\n * @property {Boolean} async Set to `true` in a `resize` listener to allow asynchronous finalization of the resize\n * @property {Function} finalize Call this function to finalize the resize, required if it was flagged as `async` in a\n * `resize` listener\n * @property {Number} newWidth New width of the element\n * @property {Number} newHeight New height of the element\n * @property {Number} newX New x coordinate of the element, when dragging left edge\n * @property {Number} newY New y coordinate of the element, when dragging top edge\n */\n/**\n * Handles resizing of elements using handles. Handles can be actual elements or virtual handles specified as a border\n * area on elements left and right edges.\n *\n * ```javascript\n * // enable resizing all elements with class 'resizable'\n * let resizer = new ResizeHelper({\n *   targetSelector: '.resizable'\n * });\n * ```\n *\n * @mixes Core/mixin/Events\n * @internal\n */\nexport default class ResizeHelper extends Events(Base) {\n    //region Config\n    static get defaultConfig() {\n        return {\n            /**\n             * CSS class added when resizing\n             * @config {String}\n             * @default\n             */\n            resizingCls : 'b-resizing',\n            /**\n             * The amount of pixels to move mouse before it counts as a drag operation\n             * @config {Number}\n             * @default\n             */\n            dragThreshold : 5,\n            /**\n             * Resizing handle size\n             * @config {Number}\n             * @default\n             */\n            handleSize : 10,\n            /**\n             * Automatically shrink virtual handles when available space < handleSize. The virtual handles will\n             * decrease towards width/height 1, reserving space between opposite handles to for example leave room for\n             * dragging. To configure reserved space, see {@link #config-reservedSpace}.\n             * @config {Boolean}\n             * @default false\n             */\n            dynamicHandleSize : null,\n            //\n            /**\n             * Room in px to leave unoccupied by handles when shrinking them dynamically (see\n             * {@link #config-dynamicHandleSize}).\n             * @config {Number}\n             * @default\n             */\n            reservedSpace : 10,\n            /**\n             * Resizing handle size on touch devices\n             * @config {Number}\n             * @default\n             */\n            touchHandleSize : 30,\n            /**\n             * Minimum width when resizing\n             * @config {Number}\n             * @default\n             */\n            minWidth : 1,\n            /**\n             * Max width when resizing.\n             * @config {Number}\n             * @default\n             */\n            maxWidth : 0,\n            /**\n             * Minimum height when resizing\n             * @config {Number}\n             * @default\n             */\n            minHeight : 1,\n            /**\n             * Max height when resizing\n             * @config {Number}\n             * @default\n             */\n            maxHeight : 0,\n            // outerElement, attach events to it and use as outer limit when looking for ancestors\n            outerElement : document.body,\n            /**\n             * Optional scroller used to read scroll position. If unspecified, the outer element will be used.\n             * @config {Core.helper.util.Scroller}\n             */\n            scroller : null,\n            /**\n             * Assign a function to determine if a hovered element can be resized or not.\n             * Return `true` to allow resizing or `false` to prevent.\n             * @config {Function}\n             * @param {HTMLElement} element\n             * @returns {Boolean}\n             * @default\n             */\n            allowResize : null,\n            /**\n             * Outer element that limits where element can be dragged\n             * @config {HTMLElement}\n             * @default\n             */\n            dragWithin : null,\n            /**\n             * A function that determines if dragging an element is allowed. Gets called with the element as argument,\n             * return `true` to allow dragging or `false` to prevent.\n             * @config {Function}\n             * @param {HTMLElement} element\n             * @returns {Boolean}\n             * @default\n             */\n            isElementResizable : null,\n            /**\n             * A CSS selector used to determine if resizing an element is allowed.\n             * @config {String}\n             * @default\n             */\n            targetSelector : null,\n            /**\n             * Use left handle when resizing. Only applies when `direction` is 'horizontal'\n             * @config {Boolean}\n             * @default\n             */\n            leftHandle : true,\n            /**\n             * Use right handle when resizing. Only applies when `direction` is 'horizontal'\n             * @config {Boolean}\n             * @default\n             */\n            rightHandle : true,\n            /**\n             * Use top handle when resizing. Only applies when `direction` is 'vertical'\n             * @config {Boolean}\n             * @default\n             */\n            topHandle : true,\n            /**\n             * Use bottom handle when resizing. Only applies when `direction` is 'vertical'\n             * @config {Boolean}\n             * @default\n             */\n            bottomHandle : true,\n            /**\n             * A CSS selector used to determine where handles should be \"displayed\" when resizing. Defaults to\n             * targetSelector if unspecified\n             * @config {String}\n             */\n            handleSelector : null,\n            /**\n             * A CSS selector used to determine which inner element contains handles.\n             * @config {String}\n             */\n            handleContainerSelector : null,\n            startEvent : null,\n            /*\n             * Optional config object, used by EventResize feature: it appends proxy and has to start resizing immediately\n             * @config {Object}\n             * @private\n             */\n            grab : null,\n            /**\n             * CSS class added when the resize state is invalid\n             * @config {String}\n             * @default\n             */\n            invalidCls : 'b-resize-invalid',\n            // A number that controls whether or not the element is wide enough for it to make sense to show resize handles\n            // e.g. handle width is 10px, so doesn't make sense to show them unless handles on both sides fit\n            handleVisibilityThreshold : null,\n            // Private config that disables translation when resizing left edge. Useful for example in cases when element\n            // being resized is part of a flex layout\n            skipTranslate : false,\n            /**\n             * Direction to resize in, either 'horizontal' or 'vertical'\n             * @config {'horizontal'|'vertical'}\n             * @default\n             */\n            direction : 'horizontal',\n            clickSwallowDuration : 50,\n            rtlSource : null\n        };\n    }\n    static configurable = {\n        // Private config that disables updating elements width and position, for when data is live updated during\n        // resize, leading to element being redrawn\n        skipUpdatingElement : null\n    };\n    //endregion\n    //region Events\n    /**\n     * Fired while dragging\n     * @event resizing\n     * @param {Core.helper.ResizeHelper} source\n     * @param {ResizeContext} context Resize context\n     * @param {MouseEvent} event Browser event\n     */\n    /**\n     * Fired when dragging starts.\n     * @event resizeStart\n     * @param {Core.helper.ResizeHelper} source\n     * @param {ResizeContext} context Resize context\n     * @param {MouseEvent|TouchEvent} event Browser event\n     */\n    /**\n     * Fires after resize, and allows for asynchronous finalization by setting 'async' to `true` on the context object.\n     * @event resize\n     * @param {Core.helper.ResizeHelper} source\n     * @param {ResizeContext} context Context about the resize operation. Set 'async' to `true` to indicate asynchronous\n     * validation of the resize flow (for showing a confirmation dialog etc)\n     */\n    /**\n     * Fires when a resize is canceled (width & height are reverted)\n     * @event cancel\n     * @param {Core.helper.ResizeHelper} source\n     * @param {ResizeContext} context Resize context\n     * @param {MouseEvent|TouchEvent} event Browser event\n     */\n    //endregion\n    //region Init\n    construct(config) {\n        const me = this;\n        super.construct(config);\n        // Larger draggable zones on pure touch devices with no mouse\n        if (!me.handleSelector && !BrowserHelper.isHoverableDevice) {\n            me.handleSize = me.touchHandleSize;\n        }\n        me.handleVisibilityThreshold = me.handleVisibilityThreshold || 2 * me.handleSize;\n        me.initListeners();\n        me.initResize();\n    }\n    doDestroy() {\n        this.abort(true);\n        super.doDestroy();\n    }\n    updateSkipUpdatingElement(skip) {\n        if (skip) {\n            this.skipTranslate = true;\n        }\n    }\n    /**\n     * Initializes resizing\n     * @private\n     */\n    initResize() {\n        const me = this;\n        if (!me.isElementResizable && me.targetSelector) {\n            me.isElementResizable = element => element.closest(me.targetSelector);\n        }\n        if (me.grab) {\n            const { edge, element, event } = me.grab;\n            me.startEvent = event;\n            const cursorOffset = me.getCursorOffsetToElementEdge(event, element, edge);\n            // emulates mousedown & grabResize\n            me.context = {\n                element,\n                edge,\n                valid         : true,\n                async         : false,\n                elementStartX : DomHelper.getTranslateX(element) || element.offsetLeft, // extract x from translate\n                elementStartY : DomHelper.getTranslateY(element) || element.offsetTop, // extract x from translate\n                newX          : DomHelper.getTranslateX(element) || element.offsetLeft, // No change yet on start, but info must be present\n                newY          : DomHelper.getTranslateY(element) || element.offsetTop, // No change yet on start, but info must be present\n                elementWidth  : element.offsetWidth,\n                elementHeight : element.offsetHeight,\n                cursorOffset,\n                startX        : event.clientX + cursorOffset.x + me.scrollLeft,\n                startY        : event.clientY + cursorOffset.y + me.scrollTop,\n                finalize      : () => me.reset?.()\n            };\n            element.classList.add(me.resizingCls);\n            me.internalStartResize(me.isTouch);\n        }\n    }\n    /**\n     * Initialize listeners\n     * @private\n     */\n    initListeners() {\n        const\n            me                 = this,\n            dragStartListeners = {\n                element    : me.outerElement,\n                mousedown  : documentListeners.down,\n                touchstart : documentListeners.touchstart,\n                thisObj    : me\n            };\n        if (!me.handleSelector && BrowserHelper.isHoverableDevice) {\n            dragStartListeners.mousemove = {\n                handler : documentListeners.move,\n                // Filter events for checkResizeHandles so we only get called if the mouse\n                // is over one of our targets.\n                delegate : me.targetSelector\n            };\n            // We need to clean up when we exit one of our targets\n            dragStartListeners.mouseleave = {\n                handler  : 'onMouseLeaveTarget',\n                delegate : me.targetSelector,\n                capture  : true\n            };\n        }\n        // These will be autoDetached upon destroy\n        EventHelper.on(dragStartListeners);\n    }\n    get isRTL() {\n        return Boolean(this.rtlSource?.rtl);\n    }\n    //endregion\n    //region Scroll helpers\n    get scrollLeft() {\n        if (this.scroller) {\n            return this.scroller.x;\n        }\n        return this.outerElement.scrollLeft;\n    }\n    get scrollTop() {\n        if (this.scroller) {\n            return this.scroller.y;\n        }\n        return this.outerElement.scrollTop;\n    }\n    //endregion\n    //region Events\n    internalStartResize(isTouch) {\n        const dragListeners = {\n            element : document,\n            keydown : documentListeners.keydown,\n            thisObj : this\n        };\n        if (isTouch) {\n            dragListeners.touchmove = documentListeners.touchmove;\n            // Touch desktops don't fire touchend event when touch has ended, instead pointerup is fired\n            // iOS do fire touchend\n            dragListeners.touchend = dragListeners.pointerup = documentListeners.touchend;\n        }\n        else {\n            dragListeners.mousemove = documentListeners.move;\n            dragListeners.mouseup   = documentListeners.up;\n        }\n        // A listener detacher is returned\n        this.removeDragListeners = EventHelper.on(dragListeners);\n        this.onResizeHandlePointerDown?.(this.startEvent);\n    }\n    // Empty class implementation. If listeners *are* added, the detacher is added\n    // as an instance property. So this is always callable.\n    removeDragListeners() {}\n    reset() {\n        this.removeDragListeners?.();\n        this.context = null;\n        this.trigger('reset');\n    }\n    canResize(element, event) {\n        return !this.isElementResizable || this.isElementResizable(element, event);\n    }\n    onPointerDown(isTouch, event) {\n        const me = this;\n        me.startEvent = event;\n        if (me.canResize(event.target, event) && me.grabResizeHandle(isTouch, event)) {\n            // Stop event if resize handle was grabbed (resize started)\n            event.stopImmediatePropagation();\n            if (event.type === 'touchstart') {\n                event.preventDefault();\n            }\n            me.internalStartResize(isTouch);\n        }\n    }\n    onTouchStart(event) {\n        // only allowing one finger for now...\n        if (event.touches.length > 1) {\n            return;\n        }\n        this.onPointerDown(true, event);\n    }\n    /**\n     * Grab draggable element on mouse down.\n     * @private\n     * @param {MouseEvent|PointerEvent} event\n     */\n    onMouseDown(event) {\n        // only dragging with left mouse button\n        if (event.button !== 0) {\n            return;\n        }\n        this.onPointerDown(false, event);\n    }\n    internalMove(isTouch, event) {\n        const\n            me                     = this,\n            { context, direction } = me;\n        if (context?.element && (context.started || EventHelper.getDistanceBetween(me.startEvent, event) >= me.dragThreshold)) {\n            if (!context.started) {\n                me.scrollManager?.startMonitoring(ObjectHelper.merge({\n                    scrollables : [\n                        {\n                            element : me.dragWithin || me.outerElement,\n                            direction\n                        }\n                    ],\n                    callback : config => me.context?.element && me.lastMouseMoveEvent && me.update(me.lastMouseMoveEvent, config)\n                }, me.monitoringConfig));\n                me.trigger('resizeStart', { context, event });\n                context.started = true;\n            }\n            me.update(event);\n        }\n        // If a mousemove, and we are using zones, and not handles, we have to\n        // programmatically check whether we are over a handle, and add/remove\n        // classes to change the mouse cursor to resize.\n        // If we are using handles, their CSS will set the mouse cursor.\n        else if (!isTouch && !me.handleSelector) {\n            me.checkResizeHandles(event);\n        }\n    }\n    onTouchMove(event) {\n        this.internalMove(true, event);\n    }\n    /**\n     * Move grabbed element with mouse.\n     * @param {MouseEvent|PointerEvent} event\n     * @fires resizestart\n     * @private\n     */\n    onMouseMove(event) {\n        this.internalMove(false, event);\n    }\n    onPointerUp(isTouch, event) {\n        const\n            me      = this,\n            context = me.context;\n        me.removeDragListeners?.();\n        if (context) {\n            me.scrollManager?.stopMonitoring();\n            if (context.started) {\n                // Prevent the impending document click from the mouseup event from propagating\n                // into a click on our element.\n                EventHelper.on({\n                    element : document,\n                    thisObj : me,\n                    click   : documentListeners.docclick,\n                    expires : me.clickSwallowDuration, // In case a click did not ensue, remove the listener\n                    capture : true,\n                    once    : true\n                });\n            }\n            me.finishResize(event);\n        }\n        else {\n            me.reset?.();\n        }\n    }\n    onTouchEnd(event) {\n        this.onPointerUp(true, event);\n    }\n    /**\n     * Drop on mouse up (if dropped on valid target).\n     * @param {MouseEvent|PointerEvent} event\n     * @private\n     */\n    onMouseUp(event) {\n        this.onPointerUp(false, event);\n    }\n    /**\n     * This is a capture listener, only added during drag, which prevents a click gesture\n     * propagating from the terminating mouseup gesture\n     * @param {MouseEvent} event\n     * @private\n     */\n    onDocumentClick(event) {\n        event.stopPropagation();\n    }\n    /**\n     * Cancel on ESC key\n     * @param {KeyboardEvent} event\n     * @private\n     */\n    onKeyDown(event) {\n        if (event.key === 'Escape') {\n            this.abort();\n        }\n    }\n    //endregion\n    //region Grab, update, finish\n    /**\n     * Updates resize, called when an element is grabbed and mouse moves\n     * @private\n     * @fires resizing\n     */\n    update(event) {\n        const\n            me              = this,\n            context         = me.context,\n            { element }     = context,\n            parentRectangle = Rectangle.from(me.outerElement);\n        // Calculate the current pointer X. Do not allow overflowing either edge\n        context.currentX = Math.max(Math.min(event.clientX + context.cursorOffset.x, parentRectangle.right), parentRectangle.x) + me.scrollLeft;\n        context.currentY = Math.max(Math.min(event.clientY + context.cursorOffset.y, parentRectangle.bottom), parentRectangle.y) + me.scrollTop;\n        element.classList.add(me.resizingCls);\n        if (event) {\n            if (me.updateResize(event)) {\n                me.trigger('resizing', { context, event });\n                element.classList.toggle(me.invalidCls, context.valid === false);\n            }\n            me.lastMouseMoveEvent = event;\n        }\n    }\n    /**\n     * Abort dragging\n     */\n    abort(silent = false) {\n        const me = this;\n        me.scrollManager?.stopMonitoring?.();\n        if (me.context) {\n            me.abortResize(null, silent);\n        }\n        else if (!me.isDestroyed) {\n            me.reset();\n        }\n    }\n    /**\n     * Starts resizing, updates ResizeHelper#context with relevant info.\n     * @private\n     * @param {Boolean} isTouch\n     * @param {MouseEvent} event\n     * @returns {Boolean} True if handled, false if not\n     */\n    grabResizeHandle(isTouch, event) {\n        const me = this;\n        if (me.allowResize && !me.allowResize(event.target, event)) {\n            return false;\n        }\n        const\n            handleSelector = me.handleSelector,\n            coordsFrom     = event.type === 'touchstart' ? event.changedTouches[0] : event,\n            clientX        = coordsFrom.clientX,\n            clientY        = coordsFrom.clientY;\n        // go up from \"handle\" to resizable element\n        let element = me.targetSelector ? event.target.closest(me.targetSelector) : event.target;\n        if (element) {\n            let edge;\n            // Calculate which edge to resize\n            // If there's a handle selector, see if it's anchored on the left or the right\n            if (handleSelector) {\n                if (event.target.matches(handleSelector)) {\n                    if (me.direction === 'horizontal') {\n                        if (event.pageX < DomHelper.getPageX(element) + element.offsetWidth / 2) {\n                            edge = me.isRTL ? 'right' : 'left';\n                        }\n                        else {\n                            edge = me.isRTL ? 'left' : 'right';\n                        }\n                    }\n                    else {\n                        if (event.pageY < DomHelper.getPageY(element) + element.offsetHeight / 2) {\n                            edge = 'top';\n                        }\n                        else {\n                            edge = 'bottom';\n                        }\n                    }\n                }\n                else {\n                    return false;\n                }\n            }\n            // If we're not using handles, but just active zones\n            // then test whether the event position is in an active resize zone.\n            else {\n                if (me.direction === 'horizontal') {\n                    if (me.overLeftHandle(event, element)) {\n                        edge = me.isRTL ? 'right' : 'left';\n                    }\n                    else if (me.overRightHandle(event, element)) {\n                        edge = me.isRTL ? 'left' : 'right';\n                    }\n                }\n                else {\n                    if (me.overTopHandle(event, element)) {\n                        edge = 'top';\n                    }\n                    else if (me.overBottomHandle(event, element)) {\n                        edge = 'bottom';\n                    }\n                }\n                if (!edge) {\n                    me.context = null;\n                    // not over an edge, abort\n                    return false;\n                }\n            }\n            // If resizing is initiated by a touch, we must preventDefault on the touchstart\n            // so that scrolling is not invoked when dragging. This is in lieu of a functioning\n            // touch-action style on iOS Safari. When that's fixed, this will not be needed.\n            if (event.type === 'touchstart') {\n                event.preventDefault();\n            }\n            const\n                cursorOffset   = me.getCursorOffsetToElementEdge(coordsFrom, element, edge),\n                mutatedContext = me.internalBeforeStart?.({ element, edge });\n            // Allow outside world to flip edges (to make a top-edge interaction apply to the bottom-edge instead)\n            if (mutatedContext) {\n                element = mutatedContext.element;\n                edge    = mutatedContext.edge;\n            }\n            if (me.trigger('beforeResizeStart', { element, event }) !== false) {\n                // store initial size\n                me.context = {\n                    element,\n                    edge,\n                    isTouch,\n                    valid         : true,\n                    async         : false,\n                    direction     : me.direction,\n                    elementStartX : DomHelper.getTranslateX(element) || element.offsetLeft, // extract x from translate\n                    elementStartY : DomHelper.getTranslateY(element) || element.offsetTop, // extract y from translate\n                    newX          : DomHelper.getTranslateX(element) || element.offsetLeft, // No change yet on start, but info must be present\n                    newY          : DomHelper.getTranslateY(element) || element.offsetTop, // No change yet on start, but info must be present\n                    elementWidth  : element.offsetWidth,\n                    elementHeight : element.offsetHeight,\n                    cursorOffset,\n                    startX        : clientX + cursorOffset.x + me.scrollLeft,\n                    startY        : clientY + cursorOffset.y + me.scrollTop,\n                    finalize      : () => me.reset?.()\n                };\n                element.classList.add(me.resizingCls);\n                return true;\n            }\n        }\n        return false;\n    }\n    getCursorOffsetToElementEdge(event, element, edge) {\n        const rectEl = Rectangle.from(element);\n        let x = 0,\n            y = 0;\n        switch (edge) {\n            case 'left':\n                x = rectEl.x - (this.isRTL ? rectEl.width : 0) - event.clientX; // negative\n                break;\n            case 'right':\n                x = rectEl.x + (this.isRTL ? 0 : rectEl.width) - event.clientX; // positive\n                break;\n            case 'top':\n                y = rectEl.y - event.clientY; // negative\n                break;\n            case 'bottom':\n                y = rectEl.y + rectEl.height - event.clientY; // positive\n                break;\n        }\n        return { x, y };\n    }\n    /**\n     * Check if mouse is over a resize handle (virtual). If so, highlight.\n     * @private\n     * @param {MouseEvent} event\n     */\n    checkResizeHandles(event) {\n        const\n            me     = this,\n            target = me.targetSelector ? event.target.closest(me.targetSelector) : event.target;\n        // mouse over a target element and allowed to resize?\n        if (target && (!me.allowResize || me.allowResize(event.target, event))) {\n            me.currentElement = me.handleContainerSelector ? event.target.closest(me.handleContainerSelector) : event.target;\n            if (me.currentElement) {\n                let over;\n                if (me.direction === 'horizontal') {\n                    over = me.overLeftHandle(event, target) || me.overRightHandle(event, target);\n                }\n                else {\n                    over = me.overTopHandle(event, target) || me.overBottomHandle(event, target);\n                }\n                if (over) {\n                    me.highlightHandle(); // over handle\n                }\n                else {\n                    me.unHighlightHandle(); // not over handle\n                }\n            }\n        }\n        else if (me.currentElement) {\n            me.unHighlightHandle(); // outside element\n        }\n    }\n    onMouseLeaveTarget(event) {\n        const me = this;\n        me.currentElement = me.handleContainerSelector ? event.target.closest(me.handleContainerSelector) : event.target;\n        if (me.currentElement) {\n            me.unHighlightHandle();\n        }\n    }\n    /**\n     * Updates size of target (on mouse move).\n     * @private\n     * @param {MouseEvent|PointerEvent} event\n     */\n    updateResize(event) {\n        const\n            me = this,\n            {\n                context,\n                allowEdgeSwitch,\n                skipTranslate,\n                skipUpdatingElement\n            }  = me;\n        let updated;\n        // flip which edge is being dragged depending on whether we're to the right or left of the mousedown\n        if (allowEdgeSwitch) {\n            if (me.direction === 'horizontal') {\n                context.edge = context.currentX > context.startX ? 'right' : 'left';\n            }\n            else {\n                context.edge = context.currentY > context.startY ? 'bottom' : 'top';\n            }\n        }\n        const\n            {\n                element,\n                elementStartX,\n                elementStartY,\n                elementWidth,\n                elementHeight,\n                edge\n            }         = context,\n            { style } = element,\n            // limit to outerElement if set\n            deltaX    = context.currentX - context.startX,\n            deltaY    = context.currentY - context.startY,\n            minWidth  = DomHelper.getExtremalSizePX(element, 'minWidth') || me.minWidth,\n            maxWidth  = DomHelper.getExtremalSizePX(element, 'maxWidth') || me.maxWidth,\n            minHeight = DomHelper.getExtremalSizePX(element, 'minHeight') || me.minHeight,\n            maxHeight = DomHelper.getExtremalSizePX(element, 'maxHeight') || me.maxHeight,\n            // dragging the right edge right increases the width, dragging left edge right decreases width\n            sign      = (edge === 'right' && !me.isRTL) || edge === 'bottom' ? 1 : -1,\n            // new width, not allowed to go below minWidth\n            newWidth  = elementWidth + deltaX * sign,\n            newHeight = elementHeight + deltaY * sign;\n        let\n            width  = Math.max(minWidth, newWidth),\n            height = Math.max(minHeight, newHeight);\n        if (maxWidth > 0) {\n            width = Math.min(width, maxWidth);\n        }\n        if (maxHeight > 0) {\n            height = Math.min(height, maxHeight);\n        }\n        // remove flex when resizing\n        if (style.flex) {\n            style.flex = '';\n        }\n        if (me.direction === 'horizontal' && elementWidth !== width) {\n            if (!skipUpdatingElement) {\n                style.width = Math.abs(width) + 'px';\n            }\n            context.newWidth = width;\n            // when dragging left edge, also update position (so that right edge remains in place)\n            if (edge === 'left' || width < 0) {\n                const newX = Math.max(Math.min(elementStartX + elementWidth - me.minWidth, elementStartX + deltaX), 0);\n                if (!skipTranslate) {\n                    DomHelper.setTranslateX(element, Math.round(newX));\n                }\n                context.newX = newX;\n            }\n            // When dragging the right edge and we're allowed to flip the drag from left to right\n            // through the start point (eg drag event creation) the element must be at its initial X position\n            else if (edge === 'right' && allowEdgeSwitch && !skipTranslate) {\n                DomHelper.setTranslateX(element, elementStartX);\n            }\n            updated = true;\n        }\n        else if (me.direction === 'vertical' && elementHeight !== newHeight) {\n            if (!skipUpdatingElement) {\n                style.height = Math.abs(height) + 'px';\n            }\n            context.newHeight = height;\n            // when dragging top edge, also update position (so that bottom edge remains in place)\n            if (edge === 'top' || height < 0) {\n                context.newY = Math.max(Math.min(elementStartY + elementHeight - me.minHeight, elementStartY + deltaY), 0);\n                if (!skipTranslate) {\n                    DomHelper.setTranslateY(element, context.newY);\n                }\n            }\n            // When dragging the bottom edge and we're allowed to flip the drag from top to bottom\n            // through the start point (eg drag event creation) the element must be at its initial Y position\n            else if (edge === 'bottom' && allowEdgeSwitch && !skipTranslate) {\n                DomHelper.setTranslateY(element, elementStartY);\n            }\n            updated = true;\n        }\n        return updated;\n    }\n    /**\n     * Finalizes resize, fires drop.\n     * @private\n     * @param {MouseEvent|PointerEvent} event\n     * @fires resize\n     * @fires cancel\n     */\n    finishResize(event) {\n        const\n            me          = this,\n            context     = me.context,\n            eventObject = { context, event };\n        context.element.classList.remove(me.resizingCls);\n        if (context.started) {\n            let changed = false;\n            if (me.direction === 'horizontal') {\n                changed = context.newWidth && context.newWidth !== context.elementWidth;\n            }\n            else {\n                changed = context.newHeight && context.newHeight !== context.elementHeight;\n            }\n            me.trigger(changed ? 'resize' : 'cancel', eventObject);\n            if (!context.async) {\n                context.finalize();\n            }\n        }\n        else {\n            me.reset?.();\n        }\n    }\n    /**\n     * Abort resizing\n     * @private\n     * @fires cancel\n     */\n    abortResize(event = null, silent = false) {\n        const\n            me      = this,\n            context = me.context;\n        context.element.classList.remove(me.resizingCls);\n        if (me.direction === 'horizontal') {\n            // With these statements, no x pos is changed when resizing. Should therefor not reset it when cancelling\n            if (context.edge === 'left' || (context.allowEdgeSwitch && !context.skipTranslate)) {\n                DomHelper.setTranslateX(context.element, context.elementStartX);\n            }\n            context.element.style.width = context.elementWidth + 'px';\n        }\n        else {\n            DomHelper.setTranslateY(context.element, context.elementStartY);\n            context.element.style.height = context.elementHeight + 'px';\n        }\n        !silent && me.trigger('cancel', { context, event });\n        if (!me.isDestroyed) {\n            me.reset();\n        }\n    }\n    //endregion\n    //region Handles\n    // /**\n    //  * Constrain resize to outerElements bounds\n    //  * @private\n    //  * @param x\n    //  * @returns {*}\n    //  */\n    // constrainResize(x) {\n    //     const me = this;\n    //\n    //     if (me.outerElement) {\n    //         const box = me.outerElement.getBoundingClientRect();\n    //         if (x < box.left) x = box.left;\n    //         if (x > box.right) x = box.right;\n    //     }\n    //\n    //     return x;\n    // }\n    /**\n     * Highlights handles (applies css that changes cursor).\n     * @private\n     */\n    highlightHandle() {\n        const\n            me     = this,\n            target = me.targetSelector ? me.currentElement.closest(me.targetSelector) : me.currentElement;\n        // over a handle, add cls to change cursor\n        me.currentElement.classList.add('b-resize-handle');\n        target.classList.add('b-over-resize-handle');\n    }\n    /**\n     * Unhighlight handles (removes css).\n     * @private\n     */\n    unHighlightHandle() {\n        const\n            me     = this,\n            target = me.targetSelector ? me.currentElement.closest(me.targetSelector) : me.currentElement;\n        target && target.classList.remove('b-over-resize-handle');\n        me.currentElement.classList.remove('b-resize-handle');\n        me.currentElement = null;\n    }\n    overAnyHandle(event, target) {\n        return this.overStartHandle(event, target) || this.overEndHandle(event, target);\n    }\n    overStartHandle(event, target) {\n        return this.direction === 'horizontal' ? this.overLeftHandle(event, target) : this.overTopHandle(event, target);\n    }\n    overEndHandle(event, target) {\n        return this.direction === 'horizontal' ? this.overRightHandle(event, target) : this.overBottomHandle(event, target);\n    }\n    getDynamicHandleSize(opposite, offsetWidth) {\n        const\n            handleCount    = opposite ? 2 : 1,\n            { handleSize } = this;\n        // Shrink handle size when configured to do so, preserving reserved space between handles\n        if (this.dynamicHandleSize && handleSize * handleCount > offsetWidth - this.reservedSpace) {\n            return Math.max(Math.floor((offsetWidth - this.reservedSpace) / handleCount), 0);\n        }\n        return handleSize;\n    }\n    /**\n     * Check if over left handle (virtual).\n     * @private\n     * @param {MouseEvent} event MouseEvent\n     * @param {HTMLElement} target The current target element\n     * @returns {Boolean} Returns true if mouse is over left handle, otherwise false\n     */\n    overLeftHandle(event, target) {\n        const\n            me              = this,\n            { offsetWidth } = target;\n        if (me.leftHandle && me.canResize(target, event) && (offsetWidth >= me.handleVisibilityThreshold || me.dynamicHandleSize)) {\n            const leftHandle = Rectangle.from(target);\n            leftHandle.width = me.getDynamicHandleSize(me.rightHandle, offsetWidth);\n            return leftHandle.width > 0 && leftHandle.contains(EventHelper.getPagePoint(event));\n        }\n        return false;\n    }\n    /**\n     * Check if over right handle (virtual).\n     * @private\n     * @param {MouseEvent} event MouseEvent\n     * @param {HTMLElement} target The current target element\n     * @returns {Boolean} Returns true if mouse is over left handle, otherwise false\n     */\n    overRightHandle(event, target) {\n        const\n            me              = this,\n            { offsetWidth } = target;\n        if (me.rightHandle && me.canResize(target, event) && (offsetWidth >= me.handleVisibilityThreshold || me.dynamicHandleSize)) {\n            const rightHandle = Rectangle.from(target);\n            rightHandle.x = rightHandle.right - me.getDynamicHandleSize(me.leftHandle, offsetWidth);\n            return rightHandle.width > 0 && rightHandle.contains(EventHelper.getPagePoint(event));\n        }\n        return false;\n    }\n    /**\n     * Check if over top handle (virtual).\n     * @private\n     * @param {MouseEvent} event MouseEvent\n     * @param {HTMLElement} target The current target element\n     * @returns {Boolean} Returns true if mouse is over top handle, otherwise false\n     */\n    overTopHandle(event, target) {\n        const\n            me               = this,\n            { offsetHeight } = target;\n        if (me.topHandle && me.canResize(target, event) && (offsetHeight >= me.handleVisibilityThreshold || me.dynamicHandleSize)) {\n            const topHandle = Rectangle.from(target);\n            topHandle.height = me.getDynamicHandleSize(me.bottomHandle, offsetHeight);\n            return topHandle.height > 0 && topHandle.contains(EventHelper.getPagePoint(event));\n        }\n        return false;\n    }\n    /**\n     * Check if over bottom handle (virtual).\n     * @private\n     * @param {MouseEvent} event MouseEvent\n     * @param {HTMLElement} target The current target element\n     * @returns {Boolean} Returns true if mouse is over bottom handle, otherwise false\n     */\n    overBottomHandle(event, target) {\n        const\n            me               = this,\n            { offsetHeight } = target;\n        if (me.bottomHandle && me.canResize(target, event) && (offsetHeight >= me.handleVisibilityThreshold || me.dynamicHandleSize)) {\n            const bottomHandle = Rectangle.from(target);\n            bottomHandle.y = bottomHandle.bottom - me.getDynamicHandleSize(me.bottomHandle, offsetHeight);\n            return bottomHandle.height > 0 && bottomHandle.contains(EventHelper.getPagePoint(event));\n        }\n        return false;\n    }\n    //endregion\n}\nResizeHelper._$name = 'ResizeHelper';", "import Widget from './Widget.js';\nimport DomClassList from '../helper/util/DomClassList.js';\n/**\n * @module Core/widget/Toast\n */\n/**\n * Basic toast. Toasts are stacked on top of each other\n *\n * ```javascript\n * // simplest possible\n * Toast.show('Just toasting');\n *\n * // with config\n * Toast.show({\n *   html: 'Well toasted',\n *   showProgress: false\n * });\n *\n * // as instance (instance is also returned from Toast.show()\n * let toast = new Toast({\n *   html: 'Not going away',\n *   timeout: 0\n * });\n *\n * toast.show();\n * ```\n *\n * {@inlineexample Core/widget/Toast.js}\n *\n * @extends Core/widget/Widget\n * @classtype toast\n */\nexport default class Toast extends Widget {\n    static $name = 'Toast';\n    static type = 'toast';\n    static get configurable() {\n        return {\n            testConfig : {\n                destroyTimeout : 1,\n                timeout        : 1000\n            },\n            floating : true,\n            /**\n             * Timeout (in ms) until the toast is automatically dismissed. Set to 0 to never hide.\n             * @config {Number}\n             * @default\n             */\n            timeout : 2500,\n            autoDestroy : null,\n            // How long to wait after hide before destruction\n            destroyTimeout : 200,\n            /**\n             * Show a progress bar indicating the time remaining until the toast is dismissed.\n             * @config {Boolean}\n             * @default\n             */\n            showProgress : true,\n            /**\n             * Toast color (should have match in toast.scss or your custom styling).\n             * Valid values in Bryntum themes are:\n             * * b-amber\n             * * b-blue\n             * * b-dark-gray\n             * * b-deep-orange\n             * * b-gray\n             * * b-green\n             * * b-indigo\n             * * b-lime\n             * * b-light-gray\n             * * b-light-green\n             * * b-orange\n             * * b-purple\n             * * b-red\n             * * b-teal\n             * * b-white\n             * * b-yellow\n             *\n             * ```\n             * new Toast({\n             *    color : 'b-blue'\n             * });\n             * ```\n             *\n             * @config {String}\n             */\n            color : null,\n            bottomMargin : 20\n        };\n    }\n    compose() {\n        const { appendTo, color, html, showProgress, style, timeout } = this;\n        return {\n            parent : appendTo || this.floatRoot,\n            class  : {\n                ...DomClassList.normalize(color, 'object'),\n                'b-toast-hide' : 1  // toasts start hidden so we can animate them into view\n            },\n            html,\n            style,\n            children : {\n                progressElement : showProgress && {\n                    style : `animation-duration:${timeout / 1000}s;`,\n                    class : {\n                        'b-toast-progress' : 1\n                    }\n                }\n            },\n            // eslint-disable-next-line bryntum/no-listeners-in-lib\n            listeners : {\n                click : 'hide'\n            }\n        };\n    }\n    doDestroy() {\n        this.untoast();\n        super.doDestroy();\n    }\n    get nextBottom() {\n        const { bottomMargin, element } = this;\n        return parseInt(element.style.bottom, 10) + element.offsetHeight + bottomMargin;\n    }\n    /**\n     * Show the toast\n     */\n    async show() {\n        await super.show(...arguments);\n        const\n            me = this,\n            { element } = me,\n            { toasts } = Toast;\n        if (!toasts.includes(me)) {\n            element.style.bottom = (toasts[0]?.nextBottom ?? me.bottomMargin) + 'px';\n            toasts.unshift(me);\n            element.getBoundingClientRect();  // force layout so that removing b-toast-hide runs our transition\n            element.classList.remove('b-toast-hide');\n            if (me.timeout > 0) {\n                me.hideTimeout = me.setTimeout('hide', me.timeout);\n            }\n        }\n    }\n    /**\n     * Hide the toast\n     */\n    async hide() {\n        const me = this;\n        me.untoast();\n        me.element.classList.add('b-toast-hide');\n        if (me.autoDestroy && !me.destroyTimer) {\n            me.destroyTimer = me.setTimeout('destroy', me.destroyTimeout);\n        }\n    }\n    untoast() {\n        const { toasts } = Toast;\n        if (toasts.includes(this)) {\n            toasts.splice(toasts.indexOf(this), 1);\n        }\n    }\n    /**\n     * Hide all visible toasts\n     */\n    static hideAll() {\n        Toast.toasts.slice().reverse().forEach(toast => toast.hide());\n    }\n    /**\n     * Easiest way to show a toast\n     *\n     * ```javascript\n     * Toast.show('Hi');\n     *\n     * Toast.show({\n     *   html   : 'Read quickly, please',\n     *   timeout: 1000\n     * });\n     * ```\n     *\n     * @param {String|ToastConfig} config Message or toast config object\n     * @returns {Core.widget.Toast}\n     */\n    static show(config) {\n        const toast = Toast.new({\n            autoDestroy : true,\n            rootElement : document.body\n        }, (typeof config === 'string') ? { html : config } : config);\n        toast.show();\n        return toast;\n    }\n}\nToast.toasts = [];\n// Register this widget type with its Factory\nToast.initClass();\nToast._$name = 'Toast';", "import ObjectHelper from './ObjectHelper.js';\nimport Widget from '../widget/Widget.js';\nimport Toast from '../widget/Toast.js';\nimport Mask from '../widget/Mask.js';\nimport { Point } from './util/Rectangle.js';\n/**\n * @module Core/helper/WidgetHelper\n */\n/**\n * Helper for creating widgets.\n */\nexport default class WidgetHelper {\n    //region Querying\n    /**\n     * Returns the widget with the specified id.\n     * @param {String} id Id of widget to find\n     * @returns {Core.widget.Widget} The widget if any\n     * @category Querying\n     */\n    static getById(id) {\n        return Widget.getById(id);\n    }\n    /**\n     * Returns the Widget which owns the passed element (or event).\n     * @param {HTMLElement|Event} element The element or event to start from\n     * @param {String|Function} [type] The type of Widget to scan upwards for. The lowercase\n     * class name. Or a filter function which returns `true` for the required Widget.\n     * @param {HTMLElement|Number} [limit] The number of components to traverse upwards to find a\n     * match of the type parameter, or the element to stop at.\n     * @returns {Core.widget.Widget} The found Widget or null.\n     * @category Querying\n     */\n    static fromElement(element, type, limit) {\n        return Widget.fromElement(element, type, limit);\n    }\n    //endregion\n    //region Widgets\n    /**\n     * Create a widget.\n     *\n     * ```javascript\n     * WidgetHelper.createWidget({\n     *   type: 'button',\n     *   icon: 'user',\n     *   text: 'Edit user'\n     * });\n     * ```\n     *\n     * @param {ContainerItemConfig} config Widget config\n     * @returns {Core.widget.Widget} The widget\n     * @category Widgets\n     */\n    static createWidget(config = {}) {\n        return config.isWidget ? config : Widget.create(config);\n    }\n    /**\n     * Appends a widget (array of widgets) to the DOM tree. If config is empty, widgets are appended to the DOM. To\n     * append widget to certain position you can pass HTMLElement or its id as config, or as a config, that will be\n     * applied to all passed widgets.\n     *\n     * Usage:\n     *\n     * ```javascript\n     * // Will append button as last item to element with id 'container'\n     * let [button] = WidgetHelper.append({ type : 'button' }, 'container');\n     *\n     * // Same as above, but will add two buttons\n     * let [button1, button2] = WidgetHelper.append([\n     *     { type : 'button' },\n     *     { type : 'button' }\n     *     ], { appendTo : 'container' });\n     *\n     * // Will append two buttons before element with id 'someElement'. Order will be preserved and all widgets will have\n     * // additional class 'my-cls'\n     * let [button1, button2] = WidgetHelper.append([\n     *     { type : 'button' },\n     *     { type : 'button' }\n     *     ], {\n     *         insertBefore : 'someElement',\n     *         cls          : 'my-cls'\n     *     });\n     * ```\n     *\n     * @param {ContainerItemConfig|ContainerItemConfig[]} widget Widget config or array of such configs\n     * @param {HTMLElement|String|Object} [config] Element (or element id) to which to append the widget or config to\n     * apply to all passed widgets\n     * @returns {Core.widget.Widget[]} Array or widgets\n     * @category Widgets\n     */\n    static append(widget, config) {\n        widget = Array.isArray(widget) && widget || [widget];\n        if (config instanceof HTMLElement || typeof config === 'string') {\n            config = {\n                appendTo : config\n            };\n        }\n        // We want to fix position to insert into to keep order of passed widgets\n        if (config.insertFirst) {\n            const target = typeof config.insertFirst === 'string' ? document.getElementById(config.insertFirst) : config.insertFirst;\n            if (target.firstChild) {\n                config.insertBefore = target.firstChild;\n            }\n            else {\n                config.appendTo = target;\n            }\n        }\n        return widget.map(item => Widget.create(ObjectHelper.assign({}, config || {}, item)));\n    }\n    //endregion\n    //region Popups\n    /**\n     * Shows a popup (~tooltip) containing widgets connected to specified element.\n     *\n     * ```javascript\n     * WidgetHelper.openPopup(element, {\n     *   position: 'bottom center',\n     *   items: [\n     *      { widgetConfig }\n     *   ]\n     * });\n     * ```\n     *\n     * @param {HTMLElement} element Element to connect popup to\n     * @param {PopupConfig} config Config object, or string to use as html in popup\n     * @returns {*|{close, widgets}}\n     * @category Popups\n     */\n    static openPopup(element, config) {\n        return Widget.create(ObjectHelper.assign({\n            forElement : element\n        }, typeof config === 'string' ? {\n            html : config\n        } : config), 'popup');\n    }\n    /**\n     * Shows a context menu connected to the specified element.\n     *\n     * ```javascript\n     * WidgetHelper.showContextMenu(element, {\n     *   items: [\n     *      { id: 'addItem', icon: 'add', text: 'Add' },\n     *      ...\n     *   ],\n     *   onItem: item => alert('Clicked ' + item.text)\n     * });\n     * ```\n     *\n     * @param {HTMLElement|Number[]} element Element (or a coordinate) to show the context menu for\n     * @param {MenuItemConfig} config Context menu config, see example\n     * @returns {Core.widget.Menu}\n     * @category Popups\n     */\n    static showContextMenu(element, config) {\n        const me = this;\n        if (me.currentContextMenu) {\n            me.currentContextMenu.destroy();\n        }\n        if (element instanceof HTMLElement) {\n            config.forElement = element;\n        }\n        else {\n            config.forElement = document.body;\n            if (Array.isArray(element)) {\n                element = new Point(...element);\n            }\n            if (element instanceof Point) {\n                config.align = {\n                    position : element\n                };\n            }\n        }\n        config.internalListeners = { destroy : me.currentContextMenu = null };\n        return me.currentContextMenu = Widget.create(config, 'menu');\n    }\n    /**\n     * Attached a tooltip to the specified element.\n     *\n     * ```javascript\n     * WidgetHelper.attachTooltip(element, {\n     *   text: 'Useful information goes here'\n     * });\n     * ```\n     *\n     * @param {HTMLElement} element Element to attach tooltip for\n     * @param {String|TooltipConfig} configOrText Tooltip config or tooltip string, see example and source\n     * @returns {HTMLElement} The passed element\n     * @category Popups\n     */\n    static attachTooltip(element, configOrText) {\n        return Widget.attachTooltip(element, configOrText);\n    }\n    /**\n     * Checks if element has tooltip attached\n     *\n     * @param {HTMLElement} element Element to check\n     * @returns {Boolean}\n     * @category Popups\n     */\n    static hasTooltipAttached(element) {\n        return Widget.resolveType('tooltip').hasTooltipAttached(element);\n    }\n    /**\n     * Destroys any tooltip attached to an element, removes it from the DOM and unregisters any tip related listeners\n     * on the element.\n     *\n     * @param {HTMLElement} element Element to remove tooltip from\n     * @category Popups\n     */\n    static destroyTooltipAttached(element) {\n        return Widget.resolveType('tooltip').destroyTooltipAttached(element);\n    }\n    //endregion\n    //region Mask\n    /**\n     * Masks the specified element, showing a message in the mask.\n     * @param {HTMLElement} element Element to mask\n     * @param {String} msg Message to show in the mask\n     * @returns {Core.widget.Mask}\n     * @category Mask\n     */\n    static mask(element, msg = 'Loading') {\n        if (element) {\n            // Config object normalization\n            if (element instanceof HTMLElement) {\n                element = {\n                    target : element,\n                    text   : msg\n                };\n            }\n            return Mask.mask(element, element.target);\n        }\n    }\n    /**\n     * Unmask the specified element.\n     * @param {HTMLElement} element\n     * @category Mask\n     */\n    static unmask(element, close = true) {\n        if (element.mask) {\n            if (close) {\n                element.mask.close();\n            }\n            else {\n                element.mask.hide();\n            }\n        }\n    }\n    //endregion\n    //region Toast\n    /**\n     * Show a toast\n     * @param {String} msg message to show in the toast\n     * @category Mask\n     */\n    static toast(msg) {\n        return Toast.show(msg);\n    }\n    //endregion\n}\nWidgetHelper._$name = 'WidgetHelper';", "const hasOwn = Object.hasOwn || ((obj, key) => Object.prototype.hasOwnProperty.call(obj, key));\nlet cacheKey = null;\nfunction setParser(me, parser) {\n    Object.defineProperty(me, 'parser', {\n        value : parser\n    });\n    return parser;\n}\nclass Default {\n    constructor(formatter) {\n        this.formatter = formatter;\n    }\n    format(value) {\n        return this.formatter.defaultFormat(value);\n    }\n    parse(value, strict) {\n        return this.formatter.defaultParse(value, strict);\n    }\n    resolvedOptions() {\n        return null;\n    }\n}\n// This class does not extend Core.Base because instances are not reconfigurable (making\n// setConfig harmful) nor destroyable. Instead, they get frozen and cached according to\n// their \"config\" definition.\n/**\n * Abstract base class for formatters.\n * @private\n */\nexport default class Formatter {\n    static standardOptions = Object.freeze([]);\n    static get(format) {\n        if (format == null) {\n            return this.NULL;\n        }\n        if (format instanceof this) {\n            return format;\n        }\n        const\n            key = (typeof format === 'string') ? format : JSON.stringify(format),\n            cache = this.cache;\n        let fmt = cache.get(key);\n        if (!fmt) {\n            cacheKey = key;  // this is grabbed by our constructor below...\n            fmt = new this(format);\n            cache.set(key, fmt);\n        }\n        return fmt;\n    }\n    static get cache() {\n        return (hasOwn(this, '_cache') && this._cache) || (this._cache = new Map());\n    }\n    static get NULL() {\n        return hasOwn(this, '_null') ? this._null : (this._null = new this(null));\n    }\n    constructor(config) {\n        const\n            me = this,\n            { standardOptions } = me.constructor;\n        // This is done in a funny way so as not to complicate the derived constructor's\n        // desire to maintain a single argument signature, as well as it's calling of\n        // Object.freeze() to ensure immutability in dev mode.\n        me.cacheKey = cacheKey;\n        cacheKey = null;\n        me.initialize();\n        if (config === null) {\n            me.formatter = new Default(me);\n        }\n        else {\n            me.configure(config);\n            // Bring locale and other defaulted options back onto this object:\n            for (const [key, value] of Object.entries(me.resolvedOptions())) {\n                // For some reason (locale-specific perhaps), resolvedOptions returns\n                // with 'undefined' in some keys (e.g., min/maximumFractionDigits) when\n                // we specified 0.\n                //\n                // The second check is to only bring back values that we understand.\n                if (value != null && standardOptions.includes(key)) {\n                    me[key] = value;\n                }\n            }\n        }\n    }\n    get parser() {\n        // Replace this property w/the actual instance:\n        return setParser(this, new this.constructor.Parser(this));\n    }\n    defaultFormat(value) {\n        return (value == null) ? value : String(value);\n    }\n    defaultParse(value) {\n        return value;\n    }\n    format(value) {\n        return (value == null) ? value : this.formatter.format(value);\n    }\n    parse(value, strict) {\n        return (value == null) ? value : this.parser.parse(value, strict);\n    }\n    parseStrict(value) {\n        return this.parse(value, true);\n    }\n    resolvedOptions() {\n        return this.formatter.resolvedOptions();\n    }\n}\nFormatter._$name = 'Formatter';", "import Formatter from './Formatter.js';\nimport StringHelper from '../StringHelper.js';\nimport LocaleManager from '../../localization/LocaleManager.js';\nimport '../../localization/En.js';\n/**\n * @module Core/helper/util/NumberFormat\n */\nconst\n    escapeRegExp = StringHelper.escapeRegExp,\n    digitsRe = /[\\d+-]/g,\n    // We cannot pass locale=null:\n    newFormatter = (locale, config) => new Intl.NumberFormat(locale || undefined, config),\n    numFormatRe = /^(?:([$])\\s*)?(?:(\\d+)>)?\\d+(,\\d+)?(?:\\.((\\d*)(?:#*)|[*]))?(?:\\s*([%])?)?$/,\n    unicodeMinus = '\\u2212';\nclass NumberParser {\n    constructor(formatter) {\n        const\n            me = this,\n            locale = formatter.locale,\n            // We need a formatter for this locale that has decimals and grouping:\n            numFmt = newFormatter(locale, {\n                maximumFractionDigits : 3\n            }),\n            currency = formatter.is.currency ? me._decodeStyle(locale, {\n                style           : 'currency',\n                currency        : formatter.currency,\n                currencyDisplay : formatter.currencyDisplay\n            }) : null,\n            percent = formatter.is.percent ? me._decodeStyle(locale, {\n                style : 'percent'\n            }) : null,\n            decimal = numFmt.format(1.2).replace(digitsRe, '')[0],\n            grouper = numFmt.format(1e9).replace(digitsRe, '')[0] || '';\n        Object.assign(me, { currency, decimal, formatter, grouper, percent });\n        me.decimal = decimal;\n        me.decimalRe = escapeRegExp(decimal, 'g');\n        me.grouper = grouper;\n        // The stripRe removes whitespace, currency text, percent text and grouping chars:\n        me.stripRe = new RegExp(\n            `(?:\\\\s+|${escapeRegExp(grouper)})` +\n            (currency ? `|(?:${escapeRegExp(currency.text)})` : '') +\n            (percent ? `|(?:${escapeRegExp(percent.text)})` : ''),\n            'g');\n    }\n    decimalPlaces(value) {\n        value = value.replace(this.stripRe, '');\n        const dot = value.indexOf(this.decimal) + 1;\n        return dot && (value.length - dot);\n    }\n    parse(value, strict) {\n        if (typeof value === 'string') {\n            value = value.replace(this.stripRe, '').replace(this.decimalRe, '.').replace(unicodeMinus, '-');\n            value = strict ? Number(value) : parseFloat(value);\n            if (this.formatter.is.percent) {\n                value /= 100;\n            }\n        }\n        // else, a number is already parsed but could be null...\n        return value;\n    }\n    _decodeStyle(locale, fmtDef) {\n        const\n            fmt = newFormatter(locale, fmtDef),\n            decFmt = newFormatter(locale, Object.assign(\n                fmt.resolvedOptions(),\n                { style : 'decimal' }\n            )),\n            zero = fmt.format(0),  // = '0%' or '$0.00' in en-US\n            zeroDec = decFmt.format(0);  // = '0' or '0.00' in en-US\n        return {\n            suffix : zero.startsWith(zeroDec),\n            text   : zero.replace(zeroDec, '').trim()\n        };\n    }\n}\n/**\n * This class is an enhancement to `Intl.NumberFormat` that has a more flexible\n * constructor as well as other features such as `parse()`.\n *\n * All constructor forms take a single argument. The most common is to pass a format\n * {@link #config-template} string:\n *```\n *  const formatter = new NumberFormat('9,999.99##');\n *```\n * The above is equivalent to:\n *```\n *  const formatter = new Intl.NumberFormat({\n *      useGrouping           : true,\n *      minimumFractionDigits : 2,\n *      maximumFractionDigits : 4\n *  });\n *```\n * The `formatter` created above is used as follows (in the `en-US` locale):\n *```\n *  console.log(formatter.format(12345.54321));\n *  console.log(formatter.format(42));\n *\n *  // 12,345.5432\n *  // 42.00\n *```\n * When a format template is insufficient, a config object can be provided, similar to\n * `Intl.NumberFormat`'s `options` parameter. While all options from `Intl.NumberFormat`\n * are valid properties for this class's config object, additional properties are\n * supported.\n *\n * For example:\n *```\n *  new NumberFormat({\n *      locale      : 'en-US',\n *      template    : '$9,999',\n *      currency    : 'USD',\n *      significant : 5\n *  });\n *```\n * The `locale` option takes the place of the first positional parameter to the\n * `Intl.NumberFormat` constructor. The `template` config is the same string that can be\n * passed by itself.\n *\n * The shorthand properties `fraction`, `integer`, and `significant` set the standard\n * options `minimumFractionDigits`, `maximumFractionDigits`, `minimumIntegerDigits`,\n * `minimumSignificantDigits`, and `maximumSignificantDigits`.\n *\n * NOTE: Instances of `NumberFormat` are immutable after construction.\n *\n * For details about `Intl.NumberFormat` see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat).\n */\nexport default class NumberFormat extends Formatter {\n    static get $name() {\n        return 'NumberFormat';\n    }\n    // This object holds only those properties that Intl.NumberFormat accepts in its\n    // \"options\" parameter. Only these options will be copied from the NumberFormat\n    // and passed to the Intl.NumberFormat constructor and only these will be copied\n    // back from its resolvedOptions:\n    static standardOptions = [\n        'currency',\n        'currencyDisplay',\n        'locale',\n        'maximumFractionDigits',\n        'minimumFractionDigits',\n        'minimumIntegerDigits',\n        'maximumSignificantDigits',\n        'minimumSignificantDigits',\n        'style',\n        'useGrouping'\n    ];\n    initialize() {\n        this._as = {\n            // cacheKey : cachedInstance\n        };\n        this.is = {\n            decimal  : false,\n            currency : false,\n            percent  : false,\n            null     : true,\n            from     : null\n        };\n    }\n    get truncator() {\n        const\n            scale  = this.maximumFractionDigits,\n            digits = Math.min(20, scale + 1);\n        return (scale == null)\n            ? null\n            : this.as({ style : 'decimal', maximumFractionDigits : digits, minimumFractionDigits : digits }, 'truncator');\n    }\n    configure(options) {\n        if (typeof options !== 'string') {\n            Object.assign(this, options);\n        }\n        else {\n            this.template = options;\n        }\n        const\n            me                  = this,\n            config              = {},\n            loc                 = me.locale ? LocaleManager.locales[me.locale] : LocaleManager.locale,\n            localeDefaults      = loc?.NumberFormat,\n            { template }        = me,\n            { standardOptions } = me.constructor;\n        if (localeDefaults) {\n            for (const key in localeDefaults) {\n                if (me[key] == null && typeof localeDefaults[key] !== 'function') {\n                    me[key] = localeDefaults[key];\n                }\n            }\n        }\n        if (template) {\n            const\n                match = numFormatRe.exec(template),\n                m2 = match[2],\n                m4 = match[4];\n            me.useGrouping = !!match[3];\n            me.style = match[1] ? 'currency' : (match[6] ? 'percent' : 'decimal');\n            if (m2) {\n                me.integer = +m2;\n            }\n            if (m4 === '*') {\n                me.fraction = [0, 20];\n            }\n            else if (m4 != null) {\n                me.fraction = [match[5].length, m4.length];\n            }\n        }\n        me._minMax('fraction', true, true);\n        me._minMax('integer', true, false);\n        me._minMax('significant', false, true);\n        for (const key of standardOptions) {\n            if (me[key] != null) {\n                config[key] = me[key];\n            }\n        }\n        me.is.from = me.from && me.from.is;\n        me.is[me.style] = !(me.is.null = false);\n        me.formatter = newFormatter(me.locale, config);\n    }\n    /**\n     * Creates a derived `NumberFormat` from this instance, with a different `style`. This is useful for processing\n     * currency and percentage styles without the symbols being injected in the formatting.\n     *\n     * @param {String|Object} change The new style (if a string) or a set of properties to update.\n     * @param {String} [cacheAs] A key by which to cache this derived formatter.\n     * @returns {Core.helper.util.NumberFormat}\n     */\n    as(change, cacheAs = null) {\n        const\n            config = this.resolvedOptions() || { template : '9.*' },\n            cache = this._as;\n        let ret = cacheAs && cache[cacheAs];\n        if (!ret) {\n            if (typeof change === 'string') {\n                config.style = change;\n            }\n            else {\n                Object.assign(config, change);\n            }\n            config.from = this;\n            ret = new NumberFormat(config);\n        }\n        if (cacheAs) {\n            cache[cacheAs] = ret;\n        }\n        return ret;\n    }\n    defaultParse(value, strict) {\n        return (value == null) ? value : (strict ? Number(value) : parseFloat(value));\n    }\n    /**\n     * Returns the given `value` formatted in accordance with the specified locale and\n     * formatting options.\n     *\n     * @param {Number} value\n     * @returns {String}\n     */\n    format(value) {\n        if (typeof value === 'string') {\n            const v = Number(value);\n            value = isNaN(v) ? this.parse(value) : v;\n        }\n        return super.format(value);\n    }\n    // The parse() method is inherited but the base class implementation\n    // cannot properly document the parameter and return types:\n    /**\n     * Returns a `Number` parsed from the given, formatted `value`, in accordance with the\n     * specified locale and formatting options.\n     *\n     * If the `value` cannot be parsed, `NaN` is returned.\n     *\n     * Pass `strict` as `true` to require all text to convert. In essence, the default is\n     * in line with JavaScript's `parseFloat` while `strict=true` behaves like the `Number`\n     * constructor:\n     *```\n     *  parseFloat('1.2xx');  // = 1.2\n     *  Number('1.2xx')       // = NaN\n     *```\n     * @method parse\n     * @param {String} value\n     * @param {Boolean} [strict=false]\n     * @returns {Number}\n     */\n    /**\n     * Returns a `Number` parsed from the given, formatted `value`, in accordance with the\n     * specified locale and formatting options.\n     *\n     * If the `value` cannot be parsed, `NaN` is returned.\n     *\n     * This method simply passes the `value` to `parse()` and passes `true` for the second\n     * argument.\n     *\n     * @method parseStrict\n     * @param {String} value\n     * @returns {Number}\n     */\n    /**\n     * Returns the given `Number` rounded in accordance with the specified locale and\n     * formatting options.\n     *\n     * @param {Number|String} value\n     * @returns {Number}\n     */\n    round(value) {\n        return this.parse(this.format(value));\n    }\n    /**\n     * Returns the given `Number` truncated to the `maximumFractionDigits` in accordance\n     * with the specified locale and formatting options.\n     *\n     * @param {Number|String} value\n     * @returns {Number}\n     */\n    truncate(value) {\n        const\n            me = this,\n            scale = me.maximumFractionDigits,\n            { truncator } = me;\n        let v = me.parse(value),\n            dot;\n        if (truncator) {\n            v = truncator.format(v);\n            dot = v.indexOf(truncator.parser.decimal);\n            if (dot > -1 && v.length - dot  - 1 > scale) {\n                v = v.slice(0, dot + scale + 1);\n            }\n            v = truncator.parse(v);\n        }\n        return v;\n    }\n    resolvedOptions() {\n        const options = super.resolvedOptions();\n        for (const key in options) {\n            // For some reason, on TeamCity, tests get undefined for some properties...\n            // maybe a locale issue?\n            if (options[key] === undefined) {\n                options[key] = this[key];\n            }\n        }\n        return options;\n    }\n    /**\n     * Expands the provided shorthand into the \"minimum*Digits\" and \"maximum*Digits\".\n     * @param {String} name\n     * @param {Boolean} setMin\n     * @param {Boolean} setMax\n     * @private\n     */\n    _minMax(name, setMin, setMax) {\n        const\n            me = this,\n            value = me[name];\n        if (value != null) {\n            const\n                capName = StringHelper.capitalize(name),\n                max = `maximum${capName}Digits`,\n                min = `minimum${capName}Digits`;\n            if (typeof value === 'number') {\n                if (setMin) {\n                    me[min] = value;\n                }\n                if (setMax) {\n                    me[max] = value;\n                }\n            }\n            else {\n                me[min] = value[0];\n                me[max] = value[1];\n            }\n        }\n    }\n}\nNumberFormat.Parser = NumberParser;\nObject.assign(NumberFormat.prototype, {\n    /**\n     * The currency to use when using `style: 'currency'`. For example, `'USD'` (US dollar)\n     * or `'EUR'` for the euro.\n     *\n     * If not provided, the {@link Core.localization.LocaleManager} default will be used.\n     * @config {String}\n     */\n    currency : null,\n    /**\n     * The format in which to display the currency value when using `style: 'currency'`.\n     *\n     * Valid values are: `'symbol'` (the default), `'code'`, and `'name'`.\n     * @config {'symbol'|'code'|'name'}\n     * @default\n     */\n    currencyDisplay : 'symbol',\n    /**\n     * Specifies the `minimumFractionDigits` and `minimumFractionDigits` in a compact\n     * way. If this value is a `Number`, it sets both the minimum and maximum to that\n     * value. If this value is an array, `[0]` sets the minimum and `[1]` sets the\n     * maximum.\n     * @config {Number|Number[]}\n     */\n    fraction : null,\n    from : null,\n    /**\n     * An alias for `minimumIntegerDigits`.\n     * @config {Number}\n     */\n    integer : null,\n    /**\n     * The name of the locale. For example, `'en-US'`. This config is the same as the\n     * first argument to the `Intl.NumberFormat` constructor.\n     *\n     * Defaults to the browser's default locale.\n     * @config {String}\n     */\n    locale : null,\n    /**\n     * The maximum number of digits following the decimal.\n     *\n     * This is more convenient to specify using the {@link #config-fraction} config.\n     * @config {Number}\n     */\n    maximumFractionDigits : null,\n    /**\n     * The minimum number of digits following the decimal.\n     *\n     * This is more convenient to specify using the {@link #config-fraction} config.\n     * @config {Number}\n     */\n    minimumFractionDigits : null,\n    /**\n     * The minimum number of digits preceding the decimal.\n     *\n     * This is more convenient to specify using the {@link #config-integer} config.\n     * @config {Number}\n     */\n    minimumIntegerDigits : null,\n    /**\n     * The maximum number of significant digits.\n     *\n     * This is more convenient to specify using the {@link #config-significant} config.\n     * @config {Number}\n     */\n    maximumSignificantDigits : null,\n    /**\n     * The minimum number of significant digits.\n     *\n     * This is more convenient to specify using the {@link #config-significant} config.\n     * @config {Number}\n     */\n    minimumSignificantDigits : null,\n    /**\n     * Specifies the `minimumSignificantDigits` and `minimumSignificantDigits` in a compact\n     * format. If this value is a `Number`, it sets only the maximum to that value. If this\n     * value is an array, `[0]` sets the minimum and `[1]` sets the maximum.\n     *\n     * If this value (or `minimumSignificantDigits` or `minimumSignificantDigits`) is set,\n     * `integer` (and `minimumIntegerDigits`) and `fraction` (and `minimumFractionDigits`\n     * and `minimumFractionDigits`) are ignored.\n     *\n     * @config {Number|Number[]}\n     */\n    significant : null,\n    /**\n     * The formatting style.\n     *\n     * Valid values are: `'decimal'` (the default), `'currency'`, and `'percent'`.\n     * @config {'decimal'|'currency'|'percent'}\n     * @default\n     */\n    style : 'decimal',\n    /**\n     * A format template consisting of the following parts:\n     *```\n     *  [$] [\\d+:] \\d+ [,\\d+] [.\\d* [#*] | *] [%]\n     *```\n     * If the template begins with a `'$'`, the formatter's `style` option is set to\n     * `'currency'`. If the template ends with `'%'`, `style` is set to `'percent'`.\n     * It is invalid to include both characters. When using `'$'`, the `currency` symbol\n     * defaults to what is provided by the {@link Core.localization.LocaleManager}.\n     *\n     * To set the `minimumIntegerDigits`, the desired minimum comes before the first\n     * digits in the template and is followed by a `'>'` (greater-than). For example:\n     *```\n     *  5>9,999.00\n     *```\n     * The above sets `minimumIntegerDigits` to 5.\n     *\n     * The `useGrouping` option is enabled if there is a `','` (comma) present and is\n     * disabled otherwise.\n     *\n     * If there is a `'.'` (decimal) present, it may be followed by either of:\n     *\n     *  - Zero or more digits which may then be followed by zero or more `'#'` characters.\n     *    The number of digits determines the `minimumFractionDigits`, while the total\n     *    number of digits and `'#'`s determines the `maximumFractionDigits`.\n     *  - A single `'*'` (asterisk) indicating any number of fractional digits (no minimum\n     *    or maximum).\n     *\n     * @config {String}\n     */\n    template : null,\n    /**\n     * Specify `false` to disable thousands separators.\n     * @config {Boolean}\n     * @default\n     */\n    useGrouping : true\n});\nFormatter.number = (format, value) => NumberFormat.get(format).format(value);\nNumberFormat._$name = 'NumberFormat';", "import Base from '../Base.js';\nimport StringHelper from '../helper/StringHelper.js';\nimport Events from './Events.js';\nimport ArrayHelper from '../helper/ArrayHelper.js';\n/**\n * @module Core/mixin/Clipboardable\n */\n/**\n * This class is used internally in Clipboardable to create a shared clipboard that can be used from multiple instances\n * of different widgets.\n *\n * Can read and write to native Clipboard API if allowed, but always holds a local `clipboard` as a fallback.\n * @extends Core/Base\n * @mixes Core/mixin/Events\n * @private\n */\nclass Clipboard extends Base.mixin(Events) {\n    // Defaults to true, so to set this lazy on first read/write\n    hasNativeAccess = true;\n    _content = null;\n    /**\n     * Write to the native Clipboard API or a local clipboard as a fallback.\n     * @param {String} text Only allows string values\n     * @param {Boolean} allowNative `true` will try writing to the Clipboard API once\n     * @private\n     */\n    async writeText(text, allowNative) {\n        const\n            me           = this,\n            { _content } = me;\n        if (allowNative && me.hasNativeAccess) {\n            try {\n                await navigator.clipboard.writeText(text);\n            }\n            catch (e) {\n                me.hasNativeAccess = false;\n            }\n        }\n        if (_content !== text) {\n            // Always writes to local clipboard\n            me._content = text;\n            me.triggerContentChange(_content, false, true);\n        }\n    }\n    /**\n     * Reads from the native Clipboard API or a local clipboard as a fallback.\n     * @param {Boolean} allowNative `true` will try reading from the Clipboard API once\n     * @private\n     */\n    async readText(allowNative) {\n        const\n            me           = this,\n            { _content } = me;\n        if (allowNative && me.hasNativeAccess) {\n            try {\n                const text = await navigator.clipboard.readText();\n                if (_content !== text) {\n                    me._content = text;\n                    me.triggerContentChange(_content, true);\n                }\n                return text;\n            }\n            catch (e) {\n                me.hasNativeAccess = false;\n            }\n        }\n        return _content;\n    }\n    /**\n     * Call this to let other instances know that data has been pasted\n     * @param {Object} source\n     */\n    triggerPaste(source) {\n        this.trigger('paste', { source, text : this._content });\n    }\n    triggerContentChange(oldText, fromRead = false, fromWrite = false) {\n        this.trigger('contentChange', { fromRead, fromWrite, oldText, newText : this._content });\n    }\n    async clear(allowNative) {\n        await this.writeText('', allowNative);\n    }\n}\n/**\n * Mixin for handling clipboard data.\n * @mixin\n */\nexport default Target => class Clipboardable extends (Target || Base) {\n    static $name = 'Clipboardable';\n    static configurable = {\n        /**\n         * Set this to `true` to use native Clipboard API if it is available\n         * @config {Boolean}\n         * @default\n         * @private\n         */\n        useNativeClipboard : false\n    };\n    construct(...args) {\n        super.construct(...args);\n        if (!globalThis.bryntum.clipboard) {\n            globalThis.bryntum.clipboard = new Clipboard();\n        }\n        globalThis.bryntum.clipboard.ion({\n            paste         : 'onClipboardPaste',\n            contentChange : 'onClipboardContentChange',\n            thisObj       : this\n        });\n    }\n    /**\n     * Gets the current shared Clipboard instance\n     * @private\n     */\n    get clipboard() {\n        return globalThis.bryntum.clipboard;\n    }\n    // Called when someone triggers a paste event on the shared Clipboard\n    onClipboardPaste({ text, source }) {\n        const\n            me                       = this,\n            { clipboardText, isCut } = me,\n            isOwn                    = me.compareClipboardText(clipboardText, text);\n        // If \"my\" data has been pasted somewhere\n        if (isOwn && isCut) {\n            // Hook to be able to handle data that has been cut out. Remove for example.\n            me.handleCutData?.({ text, source });\n            me.isCut = false;\n            me.cutData = null;\n        }\n        // If any data other data has been pasted, clear \"my\" clipboard\n        else if (!isOwn) {\n            me.clearClipboard(false);\n        }\n    }\n    // Calls when the shared clipboard writes or reads a new string value\n    onClipboardContentChange({ newText }) {\n        // If clipboard has new data, clear \"my\" clipboard\n        if (!this.compareClipboardText(this.clipboardText, newText)) {\n            this.clearClipboard(false);\n        }\n    }\n    // When a cut is done, or a cut is deactivated\n    set cutData(data) {\n        const me = this;\n        // Call hook for each current item in data\n        me._cutData?.forEach(r => me.setIsCut(r, false));\n        // Set and call again for new data\n        me._cutData = ArrayHelper.asArray(data);\n        me._cutData?.forEach(r => me.setIsCut(r, true));\n    }\n    get cutData() {\n        return this._cutData;\n    }\n    setIsCut() {}\n    /**\n     * Writes string data to the shared/native clipboard. Also saves a local copy of the string and the unconverted\n     * data.\n     *\n     * But firstly, it will call beforeCopy function and wait for a response. If false, the copy will be prevented.\n     *\n     * @param {Object} data\n     * @param {Boolean} isCut\n     * @param {Object} [params] Will be passed to beforeCopy function\n     * @returns {String} String data that was written to the clipboard\n     * @private\n     */\n    async writeToClipboard(data, isCut, params = {}) {\n        // Hook to be able to send event for example\n        if (await this.beforeCopy({ data, isCut, ...params }) === false) {\n            return;\n        }\n        const\n            me         = this,\n            isString   = typeof data === 'string',\n            stringData = isString\n                // If data is string, use that\n                ? data\n                // If not, and there is a stringConverter, use that. Otherwise, just encode it as JSON\n                : (me.stringConverter ? me.stringConverter(data) : StringHelper.safeJsonStringify(data));\n        // This must be before calling the clipboard, as to be able to ignore this change in onClipboardContentChange\n        me.clipboardText = stringData;\n        await me.clipboard.writeText(stringData, me.useNativeClipboard);\n        // Saves a local copy of the original data\n        me.clipboardData = data;\n        me.isCut = isCut;\n        // Saves a local copy of cut out original data\n        me.cutData = isCut && !isString ? data : null;\n        return stringData;\n    }\n    /**\n     * Reads string data from the shared/native clipboard. If string matches current instance local clipboard data, a\n     * non-modified version will be return. Otherwise, a stringParser function will be called.\n     *\n     * But firstly, it will call beforePaste function and wait for a response. If false, the paste will be prevented.\n     *\n     * This function will also trigger a paste event on the clipboard instance.\n     *\n     * @param {Object} [params] Will be passed to beforePaste function\n     * @param {Boolean} [skipPasteTrigger] Set to `true` not trigger a paste when paste completes\n     * @returns {Object}\n     * @private\n     */\n    async readFromClipboard(params = {}, skipPasteTrigger = false) {\n        const\n            me              = this,\n            { clipboard }   = me,\n            text            = await clipboard.readText(me.useNativeClipboard),\n            { isOwn, data } = me.transformClipboardText(text),\n            isCut           = text && isOwn && me.isCut;\n        if (data == null || (Array.isArray(data) && data.length == 0) ||\n            // Hook to trigger event or something like that\n            await me.beforePaste?.({ data, text, ...params, isCut }) === false\n        ) {\n            return;\n        }\n        if (!isOwn) {\n            // If we got something from outside, clear our internal data\n            me.clearClipboard(false);\n        }\n        // Trigger a paste event on the shared clipboard, for other instances to listen to\n        skipPasteTrigger || clipboard.triggerPaste(me);\n        return data;\n    }\n    /**\n     * Clears the clipboard data\n     * @privateparam {Boolean} [clearShared] Set to `false` not to clear the internally shared and native clipboard\n     * @category Common\n     */\n    async clearClipboard(clearShared = true) {\n        const me = this;\n        me.clipboardData = me.clipboardText = me.cutData = null;\n        me.isCut = false;\n        if (clearShared) {\n            await me.clipboard.clear(me.useNativeClipboard);\n        }\n    }\n    compareClipboardText(a, b) {\n        const regex = /\\r\\n|(?!\\r\\n)[\\n-\\r\\x85\\u2028\\u2029]/g;\n        return a?.replace(regex, '\\n') === b?.replace(regex, '\\n');\n    }\n    /**\n     * Takes a clipboard text and returns an object with an `isOwn` property and the parsed `data`\n     * @param {String} text The text string that was read from the clipboard\n     * @returns {Object}\n     * @private\n     */\n    transformClipboardText(text) {\n        const\n            me    = this,\n            isOwn = me.compareClipboardText(me.clipboardText, text), // Does the clipboard content originate from this instance\n            // Read from original data if isOwn, otherwise use the stringParser if it exists.\n            data  = isOwn ? me.clipboardData : (me.stringParser && text ? me.stringParser(text) : text);\n        return {\n            isOwn,\n            data\n        };\n    }\n    /**\n     * Checks local clipboard if there is clipboard data present. If native clipboard API is available, this function\n     * will return `undefined`\n     * @returns {Object}\n     * @private\n     */\n    hasClipboardData() {\n        const\n            { clipboard } = this,\n            { _content }  = clipboard;\n        if (this.useNativeClipboard && clipboard.hasNativeAccess) {\n            // In this case, we have no clue what's inside the clipboard\n            return;\n        }\n        return Boolean(_content && this.transformClipboardText(_content).data);\n    }\n};\n", "import VersionHelper from '../helper/VersionHelper.js';\n/**\n * @module Core/mixin/Override\n */\nconst excludedPropNames = {\n    constructor : 1,\n    prototype   : 1,\n    name        : 1,\n    length      : 1,\n    arguments   : 1,\n    caller      : 1,\n    callee      : 1,\n    __proto__   : 1\n};\n/**\n * Simplifies overriding class methods by allowing methods from another class to be used as overrides.\n * Overrides are defined as own classes. They must at a minimum contain a static getter named targetClass, which\n * should return the class to override. Apply the override by calling {@link #function-apply-static apply()}.\n *\n * ```javascript\n * class TemplateColumnOverride {\n *     static get target() {\n *         return {\n *             class      : TemplateColumn,\n *             product    : 'grid',\n *             minVersion : '1.0',\n *             maxVersion : '1.5'\n *         }\n *     }\n *\n *     renderer(renderData) {\n *         // call overridden function (optional)\n *         const value = this._overridden.renderer.call(this, renderData);\n *\n *         return 'HELLO' + value;\n *     }\n * }\n * Override.apply(TemplateColumnOverride);\n * ```\n *\n * @non-mixin\n */\nexport default class Override {\n    /**\n     * Apply override. We strongly suggest that you at least specify a maxVersion for your overrides.\n     * ```\n     * class OriginalOverride {\n     *     static get target() {\n     *         return {\n     *             class      : Original,\n     *             product    : 'grid',\n     *             minVersion : '1.0',\n     *             maxVersion : '1.5'\n     *         }\n     *     }\n     * }\n     * ```\n     * @param {Object} override An override class definition\n     */\n    static apply(override) {\n        if (!override.target) throw new Error('Override must specify what it overrides, using static getter target');\n        if (!override.target.class) throw new Error('Override must specify which class it overrides, using target.class');\n        if (!this.shouldApplyOverride(override)) return false;\n        const staticKeys   = Object.getOwnPropertyNames(override),\n            instanceKeys = Object.getOwnPropertyNames(override.prototype);\n        staticKeys.splice(staticKeys.indexOf('target'), 1);\n        this.internalOverrideAll(override.target.class, staticKeys, override);\n        this.internalOverrideAll(override.target.class.prototype, instanceKeys, override.prototype);\n        return true;\n    }\n    static internalOverrideAll(targetClass, properties, overrideDefinition) {\n        Reflect.ownKeys(overrideDefinition).forEach(key => {\n            if (properties.includes(key) && !excludedPropNames[key]) {\n                const desc = Object.getOwnPropertyDescriptor(overrideDefinition, key);\n                let currentTargetClass = targetClass;\n                let targetProperty = null;\n                // Walk up the prototype chain to find fn, needed for mixin overrides applied to class that has them\n                // mixed in\n                while (!targetProperty && currentTargetClass) {\n                    targetProperty = Object.getOwnPropertyDescriptor(currentTargetClass, key);\n                    if (!targetProperty) {\n                        currentTargetClass = Object.getPrototypeOf(currentTargetClass);\n                    }\n                }\n                if (targetProperty) {\n                    this.internalOverride(currentTargetClass, key, desc, targetProperty);\n                }\n            }\n        });\n    }\n    static internalOverride(target, key, desc, targetDesc) {\n        const overrides = target._overridden = target._overridden || {};\n        overrides[key] = target[key];\n        if (targetDesc.get) {\n            Object.defineProperty(target, key, {\n                enumerable   : false,\n                configurable : true,\n                get          : desc.get\n            });\n        }\n        else {\n            target[key] = desc.value;\n        }\n    }\n    /**\n     * Checks versions if an override should be applied. Specify version in your overrides target config\n     *\n     * ```javascript\n     * class OriginalOverride {\n     *     static get target() {\n     *         return {\n     *             class      : Original,\n     *             product    : 'grid',\n     *             minVersion : '1.0',\n     *             maxVersion : '1.5'\n     *         }\n     *     }\n     * }\n     * ```\n     *\n     * @param override\n     * @returns {Boolean}\n     * @private\n     */\n    static shouldApplyOverride(override) {\n        const config = override.target;\n        // not using versioning, allow override\n        if (!config.maxVersion && !config.minVersion) return true;\n        // must specify product to be able to lookup versions\n        if (!config.product) throw new Error('Override must specify product when using versioning');\n        // override is for older version, disallow\n        if (config.maxVersion && VersionHelper[config.product].isNewerThan(config.maxVersion)) {\n            return false;\n        }\n        // override is for newer version, disallow\n        if (config.minVersion && VersionHelper[config.product].isOlderThan(config.minVersion)) {\n            return false;\n        }\n        // override is for current version, allow\n        return true;\n    }\n}\nOverride._$name = 'Override';", "import Base from '../Base.js';\nimport DayTime from './DayTime.js';\nimport Events from '../mixin/Events.js';\nimport DH from '../helper/DateHelper.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\n/**\n * @module Core/util/Month\n */\n/**\n * A class which encapsulates a calendar view of a month, and offers information about\n * the weeks and days within that calendar view.\n *\n * ```javascript\n *   // December 2018 using Monday as week start\n *   const m = new Month({\n *       date         : '2018-12-01',\n *       weekStartDay : 1\n *   });\n *\n *   m.eachWeek((week, dates) => console.log(dates.map(d => d.getDate())))\n * ```\n */\nexport default class Month  extends Events(Base) {\n    static $name = 'Month';\n    static get configurable() {\n        return {\n            /**\n             * The date which the month should encapsulate. May be a `Date` object, or a\n             * `YYYY-MM-DD` format string.\n             *\n             * Mutating a passed `Date` after initializing a `Month` object has no effect on\n             * the `Month` object.\n             * @config {Date|String}\n             */\n            date : {\n                $config : {\n                    equal : 'date'\n                },\n                value : DH.clearTime(new Date())\n            },\n            month : null,\n            year : null,\n            /**\n             * The week start day, 0 meaning Sunday, 6 meaning Saturday.\n             * Defaults to {@link Core.helper.DateHelper#property-weekStartDay-static}.\n             * @config {Number}\n             */\n            weekStartDay : null,\n            /**\n             * Configure as `true` to have the visibleDayColumnIndex and visibleColumnCount properties\n             * respect the configured {@link #config-nonWorkingDays}.\n             * @config {Boolean}\n             */\n            hideNonWorkingDays : null,\n            /**\n             * Non-working days as an object where keys are day indices, 0-6 (Sunday-Saturday), and the value is `true`.\n             * Defaults to {@link Core.helper.DateHelper#property-nonWorkingDays-static}.\n             * @config {Object<String,Boolean>}\n             */\n            nonWorkingDays : null,\n            /**\n             * Configure as `true` to always have the month encapsulate six weeks.\n             * This is useful for UIs which must be a fixed height.\n             * @prp {Boolean}\n             */\n            sixWeeks : null\n        };\n    }\n    //region events\n    /**\n     * Fired when setting the {@link #config-date} property causes the encapsulated date to change\n     * in **any** way, date, week, month or year.\n     * @event dateChange\n     * @param {Core.util.Month} source The Month which triggered the event.\n     * @param {Date} newDate The new encapsulated date value.\n     * @param {Date} oldDate The previous encapsulated date value.\n     * @param {Number} changes An object which contains properties which indicate what part of the date changed.\n     * @param {Boolean} changes.d True if the date changed in any way.\n     * @param {Boolean} changes.w True if the week changed (including same week in a different year).\n     * @param {Boolean} changes.m True if the month changed (including same month in a different year).\n     * @param {Boolean} changes.y True if the year changed.\n     * @param {Boolean} changes.r True if the row count (with respect to the {@link #config-sixWeeks} setting) changed.\n     */\n    /**\n     * Fired when setting the {@link #config-date} property causes a change of week. Note that\n     * weeks are calculated in the ISO standard form such that if there are fewer than four\n     * days in the first week of a year, then that week is owned by the previous year.\n     *\n     * The {@link #config-weekStartDay} is honoured when making this calculation and this is a\n     * locale-specific value which defaults to the ISO standard of 1 (Monday) in provided European\n     * locales and 0 (Sunday) in the provided US English locale.\n     * @event weekChange\n     * @param {Core.util.Month} source The Month which triggered the event.\n     * @param {Date} newDate The new encapsulated date value.\n     * @param {Date} oldDate The previous encapsulated date value.\n     * @param {Number} changes An object which contains properties which indicate what part of the date changed.\n     * @param {Boolean} changes.d True if the date changed in any way.\n     * @param {Boolean} changes.w True if the week changed (including same week in a different year).\n     * @param {Boolean} changes.m True if the month changed (including same month in a different year).\n     * @param {Boolean} changes.y True if the year changed.\n     * @param {Boolean} changes.r True if the row count (with respect to the {@link #config-sixWeeks} setting) changed.\n     */\n    /**\n     * Fired when setting the {@link #config-date} property causes a change of month. This\n     * will fire when changing to the same month in a different year.\n     * @event monthChange\n     * @param {Core.util.Month} source The Month which triggered the event.\n     * @param {Date} newDate The new encapsulated date value.\n     * @param {Date} oldDate The previous encapsulated date value.\n     * @param {Number} changes An object which contains properties which indicate what part of the date changed.\n     * @param {Boolean} changes.d True if the date changed in any way.\n     * @param {Boolean} changes.w True if the week changed (including same week in a different year).\n     * @param {Boolean} changes.m True if the month changed (including same month in a different year).\n     * @param {Boolean} changes.y True if the year changed.\n     * @param {Boolean} changes.r True if the row count (with respect to the {@link #config-sixWeeks} setting) changed.\n     */\n    /**\n     * Fired when setting the {@link #config-date} property causes a change of year.\n     * @event yearChange\n     * @param {Core.util.Month} source The Month which triggered the event.\n     * @param {Date} newDate The new encapsulated date value.\n     * @param {Date} oldDate The previous encapsulated date value.\n     * @param {Number} changes An object which contains properties which indicate what part of the date changed.\n     * @param {Boolean} changes.d True if the date changed in any way.\n     * @param {Boolean} changes.w True if the week changed (including same week in a different year).\n     * @param {Boolean} changes.m True if the month changed (including same month in a different year).\n     * @param {Boolean} changes.y True if the year changed.\n     * @param {Boolean} changes.r True if the row count (with respect to the {@link #config-sixWeeks} setting) changed.\n     */\n    //endRegion\n    /**\n     * For use when this Month's `weekStartDay` is non-zero.\n     *\n     * An array to map the days of the week 0-6 of this Calendar to the canonical day numbers\n     * used by the Javascript [Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object.\n     * @member {Number[]} canonicalDayNumbers\n     * @readonly\n     */\n    /**\n     * An array to map a canonical day number to a *visible* column index.\n     * For example, if we have `weekStartDay` as Monday which is 1, and non working days as\n     * Wednesday, and `hideNonWorkingDays : true`, then the calendar would look like\n     *\n     *```\n     * \u250C\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2510\n     * | Mo | Tu | Th | Fr | Sa | Su |\n     * \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518\n     *```\n     *\n     * So we'd need this array: `[ 5, 0, 1, undefined, 2, 3, 4]`\n     * @member {Number[]} visibleDayColumnIndex\n     * @readonly\n     */\n    /**\n     * An array to map a canonical day number to a 0-6 column index.\n     * For example, if we have `weekStartDay` as Monday which is 1, then the calendar would look like\n     *\n     *```\n     * \u250C\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2510\n     * | Mo | Tu | We | Th | Fr | Sa | Su |\n     * \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518\n     *```\n     *\n     * So we'd need this array: `[ 6, 0, 1, 2, 3, 4, 5]`\n     * @member {Number[]} dayColumnIndex\n     * @readonly\n     */\n    /**\n     * The number of visible days in the week as defined by the `nonWorkingDays` and\n     * `hideNonWorkingDays` options.\n     * @member {Number} weekLength\n     * @readonly\n     */\n    configure(config) {\n        super.configure(config);\n        this.updateDayNumbers();\n        // The set is rejected during configuration because everything else has to be set up.\n        if (config.date) {\n            this.date = config.date;\n        }\n        this.generation = 0;\n    }\n    changeDate(date) {\n        // Date has to be set after we know everything else\n        if (this.isConfiguring) {\n            return;\n        }\n        date = typeof date === 'string' ? DH.parse(date, 'YYYY-MM-DD') : new Date(date);\n        if (isNaN(date)) {\n            throw new Error('Month date ingestion must be passed a Date, or a valid YYYY-MM-DD date string');\n        }\n        return date;\n    }\n    updateDate(newDate, oldDate) {\n        const\n            me            = this,\n            {\n                dayColumnIndex,\n                weekCount\n            }             = me,\n            monthStart    = DH.getFirstDateOfMonth(newDate),\n            monthEnd      = DH.getLastDateOfMonth(monthStart),\n            startWeekDay  = dayColumnIndex[monthStart.getDay()],\n            endWeekDay    = dayColumnIndex[monthEnd.getDay()],\n            yearChanged   = !oldDate || (newDate.getFullYear() !== oldDate.getFullYear()),\n            monthChanged  = !oldDate || (newDate.getMonth() !== oldDate.getMonth()),\n            // Collect changes as bitwise flags if we have any listeners:\n            // 0001 = date has changed.\n            // 0010 = week has changed.\n            // 0100 = month has changed.\n            // 1000 = year has changed.\n            // We need this because 10/1/2010 -> 10/1/2011 must fire a dateChange\n            // and a monthChange in addition to the yearChange.\n            // And 10/1/2010 -> 10/2/2010 must fire a dateChange in addition to the monthChange.\n            changes = me.eventListeners && (oldDate ? (newDate.getDate() !== oldDate.getDate()) |\n            (me.getWeekId(newDate) !== me.getWeekId(oldDate)) << 1 |\n            monthChanged << 2 |\n            yearChanged << 3 : 15);\n        // Keep our properties in sync with reality.\n        // Access the private properties directly to avoid recursion.\n        me._year = newDate.getFullYear();\n        me._month = newDate.getMonth();\n        // These comments assume ISO standard of Monday as week start day.\n        //\n        // This is the date of month that is the beginning of the first week row.\n        // So this may be -ve. Eg: for Dec 2018, Monday 26th Nov is the first\n        // cell on the calendar which is the -4th of December. Note that the 0th\n        // of December was 31st of November, so needs -4 to get back to the 26th.\n        me.startDayOfMonth = 1 - startWeekDay;\n        // This is the date of month that is the end of the last week row.\n        // So this may be > month end. Eg: for Dec 2018, Sunday 6th Jan is the last\n        // cell on the calendar which is the 37th of December.\n        me.endDayOfMonth = monthEnd.getDate() + (6 - endWeekDay);\n        if (me.sixWeeks) {\n            me.endDayOfMonth += (6 - me.weekCount) * 7;\n        }\n        // Calculate the start point of where we calculate weeks from if we need to.\n        // It's either the first \"weekStartDay\" in this year if this year's\n        // first week is last year's, and so should work out as zero,\n        // or the \"weekStartDay\" of the week before, so that dates in the first week\n        // the Math.floor(DH.diff(weekBase, date, 'day') / 7) calculates as 1.\n        if (!me.weekBase || yearChanged) {\n            me.calculateWeekBase();\n        }\n        // Allow calling code to detect whether a set date operation resulted in a change\n        // of month.\n        if (monthChanged || yearChanged) {\n            me.generation++;\n        }\n        if (changes) {\n            const event = {\n                newDate,\n                oldDate,\n                changes : {\n                    d : true,\n                    w : Boolean(changes & 2),\n                    m : Boolean(changes & 12),\n                    y : Boolean(changes & 8),\n                    r : me.weekCount !== weekCount\n                }\n            };\n            // If either date, month or year changes, we fire a dateChange\n            me.trigger('dateChange', event);\n            // If the week has changed, fire a weekChange\n            if (changes & 2) {\n                me.trigger('weekChange', event);\n            }\n            // If month or year changed, we fire a monthChange\n            if (changes & 12) {\n                me.trigger('monthChange', event);\n            }\n            // If the year has changed, fire a yearChange\n            if (changes & 8) {\n                me.trigger('yearChange', event);\n            }\n        }\n    }\n    calculateWeekBase() {\n        const\n            me      = this,\n            {\n                dayColumnIndex\n            }       = me,\n            jan1    = new Date(me.year, 0, 1),\n            dec31   = new Date(me.year, 11, 31),\n            january = me.month ? me.getOtherMonth(jan1) : me;\n        // First 7 days are in last week of previous year if the year\n        // starts after our 4th day of week.\n        if (me.dayColumnIndex[jan1.getDay()] > 3) {\n            // Week base is calculated from the year start\n            me.weekBase = january.startDate;\n        }\n        // First 7 days are in week 1 of this year\n        else {\n            // Week base is the start of week before\n            me.weekBase = new Date(me.year, 0, january.startDayOfMonth - 7);\n        }\n        const dec31Week = Math.floor(DH.diff(me.weekBase, dec31, 'day') / 7);\n        // Our year only has a 53rd week if 53rd week ends after our week's 3rd day\n        me.has53weeks = dec31Week === 53 && dayColumnIndex[dec31.getDay()] > 2;\n    }\n    /**\n     * Returns the week start date, based on the configured {@link #config-weekStartDay} of the\n     * passed week.\n     * @param {Number| Number[]} week The week number in the current year, or an array containing\n     * `[year, weekOfYear]` for any year.\n     *\n     * Week numbers greater than the number of weeks in the year just wrap into the following year.\n     */\n    getWeekStart(week) {\n        // Week number n of current year\n        if (typeof week === 'number') {\n            return DH.add(this.weekBase, Math.max(week, 1) * 7, 'day');\n        }\n        // Week n of year nnnn\n        const\n            me = this,\n            [year, weekOfYear] = week;\n        // nnnn is our year, so we know it\n        if (year === me.year) {\n            return me.getWeekStart(weekOfYear);\n        }\n        return me.getOtherMonth(new Date(year, 0, 1)).getWeekStart(weekOfYear);\n    }\n    getOtherMonth(date) {\n        const\n            me     = this,\n            result = (me === otherMonth) ? new Month(null) : otherMonth;\n        result.configure({\n            weekBase           : null,\n            weekStartDay       : me.weekStartDay,\n            nonWorkingDays     : me.nonWorkingDays,\n            hideNonWorkingDays : me.hideNonWorkingDays,\n            sixWeeks           : me.sixWeeks,\n            date               : new Date(date.getFullYear(), 0, 1) // Make it easy to calculate its own weekBase\n        });\n        result.date = date;\n        // in this case, the date config ignores changes w/=== getTime so we have to force the update because we\n        // also cleared weekBase above\n        result.updateDate(result.date, result.date);\n        return result;\n    }\n    changeYear(year) {\n        const newDate = new Date(this.date);\n        newDate.setFullYear(year);\n        // changeDate rejects non-changes, otherwise a change event will be emitted\n        this.date = newDate;\n    }\n    changeMonth(month) {\n        const newDate = new Date(this.date);\n        newDate.setMonth(month);\n        // changeDate rejects non-changes, otherwise a change event will be emitted\n        this.date = newDate;\n    }\n    get weekStartDay() {\n        // This trick allows our weekStartDay to float w/the locale even if the locale changes\n        return typeof this._weekStartDay === 'number' ? this._weekStartDay : DH.weekStartDay;\n    }\n    updateWeekStartDay() {\n        const me = this;\n        me.updateDayNumbers();\n        if (!me.isConfiguring && me.date) {\n            me.weekBase = null;  // force a calculateWeekBase\n            me.updateDate(me.date, me.date);\n        }\n        // else date will be set soon and weekBase is null so calculateWeekBase will be called by updateDate\n    }\n    get nonWorkingDays() {\n        return this._nonWorkingDays || DH.nonWorkingDays;\n    }\n    changeNonWorkingDays(nonWorkingDays) {\n        return ObjectHelper.assign({}, nonWorkingDays);\n    }\n    updateNonWorkingDays() {\n        this.updateDayNumbers();\n    }\n    updateHideNonWorkingDays() {\n        this.updateDayNumbers();\n    }\n    updateSixWeeks() {\n        if (!this.isConfiguring) {\n            this.updateDate(this.date, this.date);\n        }\n    }\n    /**\n     * The number of days in the calendar for this month. This will always be\n     * a multiple of 7, because this represents the number of calendar cells\n     * occupied by this month.\n     * @property {Number}\n     * @readonly\n     */\n    get dayCount() {\n        // So for the example month, Dec 2018 has 42 days, from Mon 26th Nov (-4th Dec) 2018\n        // to Sun 6th Jan (37th Dec) 2019\n        return (this.endDayOfMonth + 1) - this.startDayOfMonth;\n    }\n    /**\n     * The number of weeks in the calendar for this month.\n     * @property {Number}\n     * @readonly\n     */\n    get weekCount() {\n        return this.dayCount / 7;\n    }\n    /**\n     * The date of the first cell in the calendar view of this month.\n     * @property {Date}\n     * @readonly\n     */\n    get startDate() {\n        const me = this;\n        if (me.year != null && me.month != null && me.startDayOfMonth != null) {\n            return new Date(me.year, me.month, me.startDayOfMonth);\n        }\n    }\n    /**\n     * The date of the last cell in the calendar view of this month.\n     * @property {Date}\n     * @readonly\n     */\n    get endDate() {\n        const me = this;\n        if (me.year != null && me.month != null && me.startDayOfMonth != null) {\n            return new Date(me.year, me.month, me.endDayOfMonth);\n        }\n    }\n    /**\n     * Iterates through all calendar cells in this month, calling the passed function for each date.\n     * @param {Function} fn The function to call.\n     * @param {Date} fn.date The date for the cell.\n     */\n    eachDay(fn) {\n        for (let dayOfMonth = this.startDayOfMonth; dayOfMonth <= this.endDayOfMonth; dayOfMonth++) {\n            fn(new Date(this.year, this.month, dayOfMonth));\n        }\n    }\n    /**\n     * Iterates through all weeks in this month, calling the passed function\n     * for each week.\n     * @param {Function} fn The function to call.\n     * @param {Number[]} fn.week An array containing `[year, weekNumber]`\n     * @param {Date[]} fn.dates The dates for the week.\n     */\n    eachWeek(fn) {\n        const me = this,\n            { weekCount } = me;\n        for (let dayOfMonth = me.startDayOfMonth, week = 0; week < weekCount; week++) {\n            const weekDates  = [],\n                weekOfYear = me.getWeekNumber(new Date(me.year, me.month, dayOfMonth));\n            for (let day = 0; day < 7; day++, dayOfMonth++) {\n                weekDates.push(new Date(me.year, me.month, dayOfMonth));\n            }\n            fn(weekOfYear, weekDates);\n        }\n    }\n    /**\n     * Returns the week of the year for the passed date. This returns an array containing *two* values,\n     * the year **and** the week number are returned.\n     *\n     * The week number is calculated according to ISO rules, meaning that if the first week of the year\n     * contains less than four days, it is considered to be the last week of the preceding year.\n     *\n     * The configured {@link #config-weekStartDay} is honoured in this calculation. So if the weekStartDay\n     * is **NOT** the ISO standard of `1`, (Monday), then the weeks do not coincide with ISO weeks.\n     * @param {Date} date The date to calculate the week for.\n     * @returns {Number[]} A numeric array: `[year, week]`\n     */\n    getWeekNumber(date) {\n        const me = this;\n        date = DH.clearTime(date);\n        // If it's a date in another year, use our otherMonth to find the answer.\n        if (date.getFullYear() !== me.year) {\n            return me.getOtherMonth(new Date(date.getFullYear(), 0, 1)).getWeekNumber(date);\n        }\n        let weekNo = Math.floor(DH.diff(me.weekBase, date, 'day') / 7),\n            year = date.getFullYear();\n        // No week 0. It's the last week of last year\n        if (!weekNo) {\n            // Week is the week of last year's 31st Dec\n            return me.getOtherMonth(new Date(me.year - 1, 0, 1)).getWeekNumber(new Date(me.year, 0, 0));\n        }\n        // Only week 53 if year ends before our week's 5th day\n        else if (weekNo === 53 && !me.has53weeks) {\n            weekNo = 1;\n            year++;\n        }\n        // 54 wraps round to 2 of next year\n        else if (weekNo > 53) {\n            weekNo = weekNo % 52;\n        }\n        // Return array of year and week number\n        return [year, weekNo];\n    }\n    getWeekId(date) {\n        const week = this.getWeekNumber(date);\n        return week[0] * 100 + week[1];\n    }\n    getCellData(date, ownerMonth, dayTime = DayTime.MIDNIGHT) {\n        const\n            me                 = this,\n            day                = date.getDay(),\n            visibleColumnIndex = me.visibleDayColumnIndex[day],\n            isNonWorking       = me.nonWorkingDays[day],\n            isHiddenDay        = me.hideNonWorkingDays && isNonWorking;\n        // Automatically move to required month\n        if (date < me.startDate || date > me.endDate) {\n            me.month = date.getMonth();\n        }\n        return  {\n            day,\n            dayTime,\n            visibleColumnIndex,\n            isNonWorking,\n            week        : me.getOtherMonth(date).getWeekNumber(date),\n            key         : DH.format(date, 'YYYY-MM-DD'),\n            columnIndex : me.dayColumnIndex[day],\n            date        : new Date(date),\n            dayEnd      : dayTime.duration('s'),\n            tomorrow    : dayTime.dayOfDate(DH.add(date, 1, 'day')),\n            // These two properties are only significant when used by a CalendarPanel which encapsulates\n            // a single month.\n            isOtherMonth : Math.sign((date.getMonth() + date.getFullYear() * 12) - (ownerMonth.month + ownerMonth.year * 12)),\n            visible      : !isHiddenDay && (date >= ownerMonth.startDate && date < DH.add(ownerMonth.endDate, 1, 'day')),\n            isRowStart   : visibleColumnIndex === 0,\n            isRowEnd     : visibleColumnIndex === me.visibleColumnCount - 1\n        };\n    }\n    updateDayNumbers() {\n        const\n            me                    = this,\n            {\n                weekStartDay,\n                nonWorkingDays,\n                hideNonWorkingDays\n            }                     = me,\n            dayColumnIndex        = me.dayColumnIndex = [],\n            canonicalDayNumbers   = me.canonicalDayNumbers = [],\n            visibleDayColumnIndex = me.visibleDayColumnIndex = [];\n        // So, if they set weekStartDay to 1 meaning Monday which is ISO standard, we will\n        // have mapping of internal day number to canonical day number (as used by Date class)\n        // and to abbreviated day name like this:\n        // canonicalDayNumbers = [1, 2, 3, 4, 5, 6, 0] // Use for translation from our day number to Date class's day number\n        //\n        // Also, we need a map from canonical day number to *visible* cell index.\n        // for example, if we have weekStartDay as Monday which is 1, and non working days as\n        // Wednesday, and hideNonWorkingDays:true, then the calendar would look like\n        // +----+----+----+----+----+----+\n        // | Mo | Tu | Th | Fr | Sa | Su |\n        // +----+----+----+----+----+----+\n        //\n        // So we'd need this array\n        // [ 5, 0, 1, undefined, 2, 3, 4]\n        // Or think of it as this map:\n        // {\n        //      1 : 0,\n        //      2 : 1,\n        //      4 : 2,\n        //      5 : 3,\n        //      6 : 4,\n        //      0 : 5\n        // }\n        // To be able to ascertain the cell index directly from the canonical day number.\n        //\n        // We also need a logical column map which would be\n        // +----+----+----+----+----+----+----+\n        // | Mo | Tu | We | Th | Fr | Sa | Su |\n        // +----+----+----+----+----+----+----+\n        //\n        // So we'd need this array\n        // [ 6, 0, 1, 2, 3, 4, 5]\n        // Or think of it as this map:\n        // {\n        //      1 : 0,\n        //      2 : 1,\n        //      3 : 2\n        //      4 : 3,\n        //      5 : 4,\n        //      6 : 5,\n        //      0 : 6\n        // }\n        // We use this to cache the number of visible columns so that cell renderers can tell whether\n        // they are on the last visible column.\n        let visibleColumnIndex = 0;\n        for (let columnIndex = 0; columnIndex < 7; columnIndex++) {\n            const canonicalDay = (weekStartDay + columnIndex) % 7;\n            canonicalDayNumbers[columnIndex] = canonicalDay;\n            dayColumnIndex[canonicalDay] = columnIndex;\n            // If this day is going to have visible representation, we need to\n            // map it to a columnIndex;\n            if (!hideNonWorkingDays || !nonWorkingDays[canonicalDay]) {\n                visibleDayColumnIndex[canonicalDay] = visibleColumnIndex++;\n            }\n        }\n        me.visibleColumnCount = visibleColumnIndex;\n        me.weekLength = hideNonWorkingDays ? 7 - ObjectHelper.keys(nonWorkingDays).length : 7;\n    }\n}\n// Instance needed for internal tasks\nconst otherMonth = new Month(null);\nMonth._$name = 'Month';", "import Container from './Container.js';\nimport Rotatable from './mixin/Rotatable.js';\nimport './Button.js';\n/**\n * @module Core/widget/ButtonGroup\n */\n/**\n * A specialized container that holds buttons, displaying them in a horizontal group with borders adjusted to make them\n * stick together.\n *\n * Trying to add other widgets than buttons will throw an exception.\n *\n * ```javascript\n * new ButtonGroup({\n *     items : [\n *         { icon : 'b-fa b-fa-kiwi-bird' },\n *         { icon : 'b-fa b-fa-kiwi-otter' },\n *         { icon : 'b-fa b-fa-kiwi-rabbit' },\n *         ...\n *     ]\n * });\n * ```\n *\n * {@inlineexample Core/widget/ButtonGroup.js}\n *\n * @extends Core/widget/Container\n * @classtype buttonGroup\n * @widget\n */\nexport default class ButtonGroup extends Container.mixin(Rotatable) {\n    /**\n     * Fires when a button in the group is clicked\n     * @event click\n     * @param {Core.widget.Button} source Clicked button\n     * @param {Event} event DOM event\n     */\n    /**\n     * Fires when the default action is performed on a button in the group (the button is clicked)\n     * @event action\n     * @param {Core.widget.Button} source Clicked button\n     * @param {Event} event DOM event\n     */\n    /**\n     * Fires when a button in the group is toggled (the {@link Core.widget.Button#property-pressed} state is changed).\n     * If you need to process the pressed button only, consider using {@link #event-click} event or {@link #event-action} event.\n     * @event toggle\n     * @param {Core.widget.Button} source Toggled button\n     * @param {Boolean} pressed New pressed state\n     * @param {Event} event DOM event\n     */\n    static $name = 'ButtonGroup';\n    static type = 'buttongroup';\n    static configurable = {\n        defaultType : 'button',\n        /**\n         * Custom CSS class to add to element. When using raised buttons (cls 'b-raised' on the buttons), the group\n         * will look nicer if you also set that cls on the group.\n         *\n         * ```\n         * new ButtonGroup({\n         *   cls : 'b-raised,\n         *   items : [\n         *       { icon : 'b-fa b-fa-unicorn', cls : 'b-raised' },\n         *       ...\n         *   ]\n         * });\n         * ```\n         *\n         * @config {String}\n         * @category CSS\n         */\n        cls : null,\n        /**\n         * An array of Buttons or typed Button config objects.\n         * @config {ButtonConfig[]|Core.widget.Button[]}\n         */\n        items : null,\n        /**\n         * Default color to apply to all contained buttons, see {@link Core.widget.Button#config-color Button#color}.\n         * Individual buttons can override the default.\n         * @config {String}\n         */\n        color : null,\n        /**\n         * Set to `true` to turn the ButtonGroup into a toggle group, assigning a generated value to each contained\n         * buttons {@link Core.widget.Button#config-toggleGroup toggleGroup config}. Individual buttons can\n         * override the default.\n         * @config {Boolean}\n         */\n        toggleGroup : null,\n        valueSeparator : ',',\n        columns : null,\n        hideWhenEmpty : true,\n        defaultBindProperty : 'value'\n    };\n    onChildAdd(item) {\n        super.onChildAdd(item);\n        item.ion({\n            click   : 'resetValueCache',\n            toggle  : 'onItemToggle',\n            thisObj : this,\n            // This needs to run before the 'click' event is relayed by this button group, in such listener\n            // the `value` must already be updated\n            prio    : 10000\n        });\n    }\n    onChildRemove(item) {\n        item.un({\n            toggle  : 'resetValueCache',\n            click   : 'resetValueCache',\n            thisObj : this\n        });\n        super.onChildRemove(item);\n    }\n    onItemToggle(event) {\n        const me = this;\n        me.resetValueCache();\n        if (!me.isSettingValue && (!me.toggleGroup || event.pressed)) {\n            me.triggerFieldChange({ value : me.value, userAction : true, event });\n        }\n    }\n    resetValueCache() {\n        // reset cached value to revalidate next time it's requested\n        this._value = null;\n    }\n    createWidget(widget) {\n        const\n            me   = this,\n            type = me.constructor.resolveType(widget.type || 'button');\n        if (type.isButton) {\n            if (me.color && !widget.color) {\n                widget.color = me.color;\n            }\n            if (me.toggleGroup && !widget.toggleGroup) {\n                if (typeof me.toggleGroup === 'boolean') {\n                    me.toggleGroup = ButtonGroup.generateId('toggleGroup');\n                }\n                widget.toggleGroup = me.toggleGroup;\n            }\n        }\n        if (me.columns) {\n            widget.width = `${100 / me.columns}%`;\n        }\n        widget = super.createWidget(widget);\n        me.relayEvents(widget, ['click', 'action', 'toggle']);\n        return widget;\n    }\n    updateRotate(rotate) {\n        this.eachWidget(btn => {\n            if (btn.rotate !== false) {\n                btn.rotate = rotate;\n            }\n        });\n    }\n    get value() {\n        // if we don't have cached value\n        // let's calculate it based on item values\n        if (!this._value) {\n            const values = [];\n            // collect pressed item values\n            this.items.forEach(w => {\n                if (w.pressed && w.value !== undefined) {\n                    values.push(w.value);\n                }\n            });\n            // build a string\n            this._value = values.join(this.valueSeparator);\n        }\n        return this._value;\n    }\n    set value(value) {\n        const\n            me       = this,\n            oldValue = me.value;\n        if (!Array.isArray(value)) {\n            if (value === undefined || value === null) {\n                value = [];\n            }\n            else if (typeof value == 'string') {\n                value = value.split(me.valueSeparator);\n            }\n            else {\n                value = [value];\n            }\n        }\n        me._value = value.join(me.valueSeparator);\n        me.isSettingValue = true;\n        // Reflect value on items\n        me.items.forEach(w => {\n            if (w.value !== undefined) {\n                w.pressed = value.includes(w.value);\n            }\n        });\n        me.isSettingValue = false;\n        if (!me.isConfiguring && oldValue !== me.value) {\n            me.triggerFieldChange({ value : me.value, userAction : false });\n        }\n    }\n    updateDisabled(disabled) {\n        this.items.forEach(button => button.disabled = disabled || (!button.ignoreParentReadOnly && this.readOnly));\n    }\n    updateReadOnly(readOnly) {\n        super.updateReadOnly(readOnly);\n        this.updateDisabled(this.disabled);\n    }\n    get widgetClassList() {\n        const classList = super.widgetClassList;\n        // if the buttons should be shown in rows\n        this.columns && classList.push('b-columned');\n        return classList;\n    }\n}\n// Register this widget type with its Factory\nButtonGroup.initClass();\nButtonGroup._$name = 'ButtonGroup';", "import Panel from './Panel.js';\nimport ArrayHelper from '../helper/ArrayHelper.js';\nimport DateHelper from '../helper/DateHelper.js';\nimport TimeZoneHelper from '../helper/TimeZoneHelper.js';\nimport Month from '../util/Month.js';\nimport Tooltip from './Tooltip.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\nimport DomHelper from '../helper/DomHelper.js';\n/**\n * @module Core/widget/CalendarPanel\n */\n// Should not have @classtype, since it should not be created directly\n/**\n * A Panel which displays a month of date cells.\n *\n * This is a base class for UI widgets like {@link Core.widget.DatePicker} which need to display a calendar layout\n * and should not be used directly.\n *\n * @extends Core/widget/Panel\n */\nexport default class CalendarPanel extends Panel {\n    static $name = 'CalendarPanel';\n    static type = 'calendarpanel';\n    static get configurable() {\n        return {\n            layout : 'vbox',\n            textContent : false,\n            /**\n             * Gets or sets the date that orientates the panel to display a particular month.\n             * Changing this causes the content to be refreshed.\n             * @member {Date} date\n             */\n            /**\n             * The date which this CalendarPanel encapsulates.\n             * @config {Date|String}\n             */\n            date : {\n                $config : {\n                    equal : 'date'\n                },\n                value : null\n            },\n            /**\n             * A {@link Core.util.Month} Month utility object which encapsulates this Panel's month\n             * and provides contextual information and navigation services.\n             * @config {Core.util.Month|MonthConfig}\n             */\n            month : {},\n            year : null,\n            /**\n             * The week start day, 0 meaning Sunday, 6 meaning Saturday.\n             * Defaults to {@link Core.helper.DateHelper#property-weekStartDay-static}.\n             * @config {Number}\n             */\n            weekStartDay : null,\n            /**\n             * Configure as `true` to always show a six week calendar.\n             * @config {Boolean}\n             * @default\n             */\n            sixWeeks : true,\n            /**\n             * Configure as `true` to show a week number column at the start of the calendar block.\n             * @deprecated Since 4.0.0. Use {@link #config-showWeekColumn} instead.\n             * @config {Boolean}\n             */\n            showWeekNumber : null,\n            /**\n             * Configure as `true` to show a week number column at the start of the calendar block.\n             * @config {Boolean}\n             */\n            showWeekColumn : null,\n            /**\n             * Either an array of `Date` objects which are to be disabled, or\n             * a function (or the name of a function), which, when passed a `Date` returns `true` if the\n             * date is disabled.\n             * @config {Function|Date[]|String}\n             * @param {Date} date Date to check\n             * @returns {Boolean} Returns `true` if the provided date is disabled\n             */\n            disabledDates : null,\n            /**\n             * A function (or the name of a function) which creates content in, and may mutate a day header element.\n             *\n             * @config {Function|String}\n             * @param {Object} renderData\n             * @param {HTMLElement} renderData.cell The header element\n             * @param {Number} renderData.day The day number conforming to the specified {@link #config-weekStartDay}. Will be in the range `0` to `6`\n             * @param {Number} renderData.weekDay The canonical day number where Monday is 0 and Sunday is\n             * @returns {String|DomConfig|null}\n             */\n            headerRenderer : null,\n            /**\n             * A function (or the name of a function) which creates content in, and may mutate the week cell element at the start of a week row.\n             *\n             * @config {Function|String}\n             * @param {Object} renderData\n             * @param {HTMLElement} renderData.cell The header element\n             * @param {Number[]} renderData.week An array containing `[year, weekNumber]`\n             * @returns {String|DomConfig|null}\n             */\n            weekRenderer : null,\n            /**\n             * A function (or the name of a function) which creates content in, and may mutate a day cell element.\n             *\n             * @config {Function|String}\n             * @param {Object} renderData\n             * @param {HTMLElement} renderData.cell The header element\n             * @param {Date} renderData.date The date for the cell\n             * @param {Number} renderData.day The day for the cell (`0` to `6` for Sunday to Saturday)\n             * @param {Number[]} renderData.rowIndex The row index, 0 to month row count (6 if {@link #config-sixWeeks} is `true`)\n             * @param {HTMLElement} renderData.row The row element encapsulating the week which the cell is a part of\n             * @param {Number[]} renderData.cellIndex The cell index in the whole panel. May be from `0` to up to `42`\n             * @param {Number[]} renderData.columnIndex The column index, `0` to `6`\n             * @param {Number[]} renderData.visibleColumnIndex The visible column index taking hidden non working days into account\n             * @returns {String|DomConfig|null}\n             */\n            cellRenderer : null,\n            /**\n             * Configure as `true` to render weekends as {@link #config-disabledDates}.\n             * @config {Boolean}\n             */\n            disableWeekends : null,\n            hideNonWorkingDays : null,\n            hideNonWorkingDaysCls : 'b-hide-nonworking-days',\n            /**\n             * Non-working days as an object where keys are day indices, 0-6 (Sunday-Saturday), and the value is `true`.\n             * Defaults to {@link Core.helper.DateHelper#property-nonWorkingDays-static}.\n             * @config {Object<Number,Boolean>}\n             */\n            nonWorkingDays : null,\n            /**\n             * A config object to create a tooltip which will show on hover of a date cell including disabled, weekend,\n             * and \"other month\" cells.\n             *\n             * It is the developer's responsibility to hook the `beforeshow` event to either veto the show by returning\n             * `false` or provide contextual content for the date.\n             *\n             * The tip instance will be primed with a `date` property.\n             * @config {TooltipConfig}\n             */\n            tip : null,\n            dayCellCls   : 'b-calendar-cell',\n            dayHeaderCls : 'b-calendar-day-header',\n            /**\n             * The class name to add to disabled calendar cells.\n             * @config {String}\n             * @private\n             */\n            disabledCls : 'b-disabled-date',\n            /**\n             * The class name to add to calendar cells which are in the previous or next month.\n             * @config {String}\n             * @private\n             */\n            otherMonthCls : 'b-other-month',\n            /**\n             * The class name to add to calendar cells which are weekend dates.\n             * @config {String}\n             * @private\n             */\n            weekendCls : 'b-weekend',\n            /**\n             * The class name to add to the calendar cell which contains today's date.\n             * @config {String}\n             * @private\n             */\n            todayCls : 'b-today',\n            /**\n             * The class name to add to calendar cells which are {@link #config-nonWorkingDays}.\n             * @config {String}\n             * @private\n             */\n            nonWorkingDayCls : 'b-nonworking-day',\n            /**\n             * The {@link Core.helper.DateHelper} format string to format the day names\n             * in the header row above the calendar cells.\n             * @config {String}\n             * @default\n             */\n            dayNameFormat : 'ddd',\n            /**\n             * By default, week rows flex to share available Panel height equally.\n             *\n             * Set this config if the available height is too small, and the cell height needs\n             * to be larger to show events.\n             *\n             * Setting this config causes the month grid to become scrollable in the `Y` axis.\n             *\n             * May be specified as a number in which case it will be taken to mean pixels,\n             * or a length in standard CSS units.\n             * @config {Number|String}\n             */\n            minRowHeight : {\n                $config : ['lazy'],\n                value   : null\n            },\n            /**\n             * By default, day cells flex to share available Panel width equally.\n             *\n             * Set this config if the available width is too small, and the cell width needs\n             * to be larger to show events.\n             *\n             * Setting this config causes the month grid to become scrollable in the `X` axis.\n             * @config {Number}\n             */\n            minColumnWidth : {\n                $config : ['lazy'],\n                value   : null\n            },\n            /**\n             * Configure this as true to disable pointer interaction with cells which are outside the\n             * range of the current month.\n             * @config {Boolean}\n             */\n            disableOtherMonthCells : null,\n            disableOtherMonthCellsCls : 'b-disable-othermonth-cells',\n            /**\n             * Configure this as `true` to hide cells which are outside the range of the current month.\n             * @config {Boolean}\n             */\n            hideOtherMonthCells : null,\n            hideOtherMonthCellsCls : 'b-hide-othermonth-cells',\n            /**\n             * By default, when navigating through time, the next time\n             * block will be animated in from the appropriate direction.\n             *\n             * Configure this as `false` to disable this.\n             * @prp {Boolean} animateTimeShift\n             * @default\n             */\n            animateTimeShift : true\n        };\n    }\n    construct(config) {\n        super.construct(config);\n        if (!this.refreshCount) {\n            this.refresh();\n        }\n    }\n    onInternalPaint({ firstPaint }) {\n        super.onInternalPaint?.(...arguments);\n        // Invoke the lazy configs when we first hit the visible DOM\n        if (firstPaint) {\n            // The cell structure must exist for the configs to apply to.\n            if (!this.refreshCount) {\n                this.refresh();\n            }\n            this.getConfig('minColumnWidth');\n            this.getConfig('minRowHeight');\n        }\n    }\n    get overflowElement() {\n        return this.weeksElement;\n    }\n    doDestroy() {\n        this.tip?.destroy();\n        super.doDestroy();\n    }\n    updateMinRowHeight(minRowHeight) {\n        this.element.style.setProperty('--min-row-height', DomHelper.setLength(minRowHeight));\n        this.scrollable = {\n            overflowY : minRowHeight ? 'auto' : false\n        };\n    }\n    updateMinColumnWidth(minColumnWidth) {\n        const me = this;\n        me.element.style.setProperty('--min-column-width', DomHelper.setLength(minColumnWidth));\n        me.scrollable = {\n            overflowX : minColumnWidth ? 'auto' : false\n        };\n        me.overflowElement.classList[minColumnWidth ? 'add' : 'remove']('b-min-columnwidth');\n    }\n    getDateFromDomEvent(domEvent) {\n        const element = (domEvent.nodeType === Element.ELEMENT_NODE ? domEvent : domEvent.target).closest(`#${this.id} [data-date]`);\n        if (element) {\n            return DateHelper.parseKey(element.dataset.date);\n        }\n    }\n    changeTip(tip, existingTip) {\n        const me = this;\n        return Tooltip.reconfigure(existingTip, tip, {\n            owner    : me,\n            defaults : {\n                type        : 'tooltip',\n                owner       : me,\n                id          : `${me.id}-cell-tip`,\n                forElement  : me.bodyElement,\n                forSelector : `.${me.dayCellCls}`\n            }\n        });\n    }\n    updateTip(tip) {\n        this.detachListeners('tip');\n        tip?.ion({\n            pointerOver : 'onTipOverCell',\n            name    : 'tip',\n            thisObj : this\n        });\n    }\n    updateElement(element, was) {\n        const me = this;\n        super.updateElement(element, was);\n        me.updateHideNonWorkingDays(me.hideNonWorkingDays);\n        me.weekdayCells = Array.from(element.querySelectorAll('.b-calendar-day-header'));\n        me.weekElements = Array.from(element.querySelectorAll('.b-calendar-week'));\n        me.weekDayElements = Array.from(element.querySelectorAll('.b-calendar-days'));\n        me.cellElements = [];\n        for (let i = 0, { length } = me.weekDayElements; i < length; i++) {\n            me.cellElements.push(me.weekDayElements[i].previousSibling, ...me.weekDayElements[i].children);\n        }\n    }\n    changeDate(date) {\n        date = typeof date === 'string' ? DateHelper.parse(date) : new Date(date);\n        if (isNaN(date)) {\n            throw new Error('CalendarPanel date ingestion must be passed a Date, or a YYYY-MM-DD date string');\n        }\n        return DateHelper.clearTime(date);\n    }\n    /**\n     * The date which this CalendarPanel encapsulates. Setting this causes the\n     * content to be refreshed.\n     * @property {Date}\n     */\n    updateDate(value) {\n        // We respond to Month change events to update the UI\n        this.month.date = value;\n    }\n    updateDayNameFormat() {\n        // 4th June 2000 was a Sunday\n        const d = new Date('2000-06-04T12:00:00');\n        this.shortDayNames = [];\n        // Collect local shortDayNames in default order.\n        for (let date = 4; date < 11; date++) {\n            d.setDate(date);\n            this.shortDayNames.push(DateHelper.format(d, this.dayNameFormat));\n        }\n    }\n    get weekStartDay() {\n        // This trick allows our weekStartDay to float w/the locale even if the locale changes\n        return typeof this._weekStartDay === 'number' ? this._weekStartDay : DateHelper.weekStartDay;\n    }\n    /**\n     * Set to 0 for Sunday (the default), 1 for Monday etc.\n     *\n     * Set to `null` to use the default value from {@link Core/helper/DateHelper}.\n     */\n    updateWeekStartDay(weekStartDay) {\n        const me = this;\n        if (me._month) {\n            me.month.weekStartDay = weekStartDay;\n            me.dayNames = [];\n            // So, if they set weekStartDay to 1 meaning Monday which is ISO standard, we will\n            // dayNames = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n            for (let i = 0; i < 7; i++) {\n                me.dayNames[i] = me.shortDayNames[me.canonicalDayNumbers[i]];\n            }\n            if (me.refreshCount) {\n                me.refresh();\n            }\n        }\n    }\n    updateHideNonWorkingDays(hideNonWorkingDays) {\n        // Undefined must be cast to Boolean, otherwise it will toggle the class *on*.\n        this.contentElement.classList.toggle(this.hideNonWorkingDaysCls, Boolean(hideNonWorkingDays));\n        this.scrollable?.syncOverflowState();\n        if (this._month) {\n            this.month.hideNonWorkingDays = hideNonWorkingDays;\n        }\n        // First/last visible cell might change\n        if (!this.isConfiguring) {\n            this.refresh();\n        }\n    }\n    updateHideOtherMonthCells(hideOtherMonthCells) {\n        // Undefined must be cast to Boolean, otherwise it will toggle the class *on*.\n        this.element.classList.toggle(this.hideOtherMonthCellsCls, Boolean(hideOtherMonthCells));\n        this.scrollable?.syncOverflowState();\n    }\n    updateDisableOtherMonthCells(disableOtherMonthCells) {\n        // Undefined must be cast to Boolean, otherwise it will toggle the class *on*.\n        this.element.classList.toggle(this.disableOtherMonthCellsCls, Boolean(disableOtherMonthCells));\n        this.scrollable?.syncOverflowState();\n    }\n    get nonWorkingDays() {\n        // If we were not configured with non working days, ask the locale for them. Once.\n        // The cached value is cleared on locale change.\n        return this._nonWorkingDays || (this._localeNonWorkingDays || (this._localeNonWorkingDays = DateHelper.nonWorkingDays));\n    }\n    get weekends() {\n        // Ask the DateHelper which days are weekend days only once.\n        // The cached value is cleared on locale change.\n        return this._localeWeekends || (this._localeWeekends = DateHelper.weekends);\n    }\n    changeNonWorkingDays(nonWorkingDays) {\n        return ObjectHelper.assign({}, nonWorkingDays);\n    }\n    updateNonWorkingDays(nonWorkingDays) {\n        if (this._month) {\n            this.month.nonWorkingDays = nonWorkingDays;\n            this.refresh();\n            this.scrollable?.syncOverflowState();\n        }\n    }\n    get visibleDayColumnIndex() {\n        return this.month.visibleDayColumnIndex;\n    }\n    get dayColumnIndex() {\n        return this.month.dayColumnIndex;\n    }\n    get canonicalDayNumbers() {\n        return this.month.canonicalDayNumbers;\n    }\n    get visibleColumnCount() {\n        return this.month.visibleColumnCount;\n    }\n    get weekLength() {\n        return this.month.weekLength;\n    }\n    /**\n     * The date of the first day cell in this panel.\n     * Note that this may *not* be the first of this panel's current month.\n     * @property {Date}\n     * @readonly\n     */\n    get startDate() {\n        return this.month.startDate;\n    }\n    get duration() {\n        // The endDate is \"exclusive\" because it means 00:00:00 of that day.\n        return DateHelper.diff(this.month.startDate, this.month.endDate, 'day') + 1;\n    }\n    /**\n     * The end date of this view. Note that in terms of full days, this is exclusive,\n     * ie: 2020-01-012 to 2020-01-08 is *seven* days. The end is 00:00:00 on the 8th.\n     *\n     * Note that this may *not* be the last date of this panel's current month.\n     * @property {Date}\n     * @readonly\n     */\n    get endDate() {\n        const { endDate } = this.month;\n        if (endDate) {\n            return DateHelper.add(endDate, 1, 'day');\n        }\n    }\n    changeMonth(month, currentMonth) {\n        const me = this;\n        if (!(month instanceof Month)) {\n            // Setting month to a number when we already have a Month means\n            // just updating the month number of our Month\n            if (typeof month === 'number') {\n                if (currentMonth) {\n                    currentMonth.month = month;\n                    return;\n                }\n                const date = me.date || DateHelper.clearTime(new Date());\n                date.setMonth(month);\n                month = {\n                    date\n                };\n            }\n            month = Month.new({\n                weekStartDay       : me.weekStartDay,\n                nonWorkingDays     : me.nonWorkingDays,\n                hideNonWorkingDays : me.hideNonWorkingDays,\n                sixWeeks           : me.sixWeeks\n            }, month);\n        }\n        month.ion({\n            dateChange : 'onMonthDateChange',\n            thisObj    : me\n        });\n        return month;\n    }\n    onMonthDateChange({ source : month, newDate, oldDate, changes }) {\n        const me = this;\n        // Ensure we're always in sync with the data our Month holds\n        me.year = month.year;\n        if (!me.isConfiguring) {\n            // Only refresh if we don't contain a cell for the new date\n            // or if, internally, the Month we are mapping to the UI is different.\n            if (!me.getCell(newDate) || (changes.m || changes.y)) {\n                // Interrogate DOM *before* mutating it with a refresh.\n                const { isVisible } = me;\n                me.refresh();\n                if (me.animateTimeShift && isVisible) {\n                    DomHelper.slideIn(me.contentElement, newDate > oldDate ? 1 : -1);\n                }\n            }\n            /**\n             * Fires when the date of this CalendarPanel is set.\n             * @event dateChange\n             * @param {Date} value The new date.\n             * @param {Date} oldValue The old date.\n             * @param {Object} changes An object which contains properties which indicate what part of the date changed.\n             * @param {Boolean} changes.d True if the date changed in any way.\n             * @param {Boolean} changes.w True if the week changed (including same week in a different year).\n             * @param {Boolean} changes.m True if the month changed (including same month in a different year).\n             * @param {Boolean} changes.y True if the year changed.\n             */\n            me.trigger('dateChange', {\n                changes,\n                value    : newDate,\n                oldValue : oldDate\n            });\n        }\n    }\n    updateYear(year) {\n        this.month.year = year;\n    }\n    updateShowWeekNumber(showWeekNumber) {\n        this.updateShowWeekColumn(showWeekNumber);\n    }\n    updateShowWeekColumn(showWeekColumn) {\n        const me = this;\n        me.element.classList[showWeekColumn ? 'add' : 'remove']('b-show-week-column');\n        if (me.floating) {\n            // Must realign because content change might change dimensions\n            if (!me.isAligning) {\n                me.realign();\n            }\n        }\n    }\n    updateSixWeeks(sixWeeks) {\n        if (this.month) {\n            this.month.sixWeeks = sixWeeks;\n            this.refresh();\n        }\n    }\n    /**\n     * Refreshes the UI after changing a config that would affect the UI.\n     */\n    refresh() {\n        // This method may be overridden by subclasses to add things like refresh scheduling.\n        this.doRefresh();\n    }\n    /**\n     * Implementation of the UI refresh.\n     * @private\n     */\n    doRefresh() {\n        // Ensure sub elements are all present\n        this.getConfig('element');\n        const\n            me       = this,\n            timeZone = me.timeZone != null ? me.timeZone : me.project?.timeZone,\n            today    = timeZone != null ? TimeZoneHelper.toTimeZone(new Date(), timeZone) : new Date(),\n            {\n                weekElements,\n                weekDayElements,\n                date,\n                month,\n                dayCellCls,\n                dayHeaderCls,\n                disabledCls,\n                otherMonthCls,\n                weekendCls,\n                todayCls,\n                nonWorkingDayCls,\n                nonWorkingDays,\n                canonicalDayNumbers,\n                sixWeeks\n            } = me;\n        today.setHours(0, 0, 0, 0);\n        // If we have not been initialized with a current date, use today\n        if (!date) {\n            me.date = today;\n            return;\n        }\n        // Useful value for CSS to know. Must be set before refresh.\n        me.element.style.setProperty('--visible-week-count', month.weekCount);\n        /**\n         * Fires before this CalendarPanel refreshes in response to changes in its month.\n         * @event beforeRefresh\n         * @param {Core.widget.DatePicker} source This DatePicker.\n         */\n        me.trigger('beforeRefresh');\n        // Make sure we've calculated our shortDayNames\n        me.getConfig('dayNameFormat');\n        for (let columnIndex = 0; columnIndex < 7; columnIndex++) {\n            const\n                cell          = me.weekdayCells[columnIndex],\n                cellDay       = me.canonicalDayNumbers[columnIndex],\n                cellClassList = {\n                    [dayHeaderCls]     : 1,\n                    [weekendCls]       : DateHelper.weekends[cellDay],\n                    [nonWorkingDayCls] : nonWorkingDays[cellDay]\n                };\n            if (me.headerRenderer) {\n                cell.innerHTML = '';\n                me.callback(me.headerRenderer, me, [cell, columnIndex, cellDay]);\n            }\n            else {\n                DomHelper.setInnerText(cell, me.shortDayNames[cellDay]);\n            }\n            // Sync day name cell classes with its calculated status\n            DomHelper.syncClassList(cell, cellClassList);\n            cell.dataset.columnIndex = columnIndex;\n            cell.dataset.cellDay = cellDay;\n        }\n        // Create cell content\n        let rowIndex = 0,\n            cellIndex = 0,\n            lastWorkingColumn = 6;\n        // Which column is the last working day so it can be tagged with an identifying class\n        for (let columnIndex = 6; columnIndex >= 0; columnIndex--) {\n            if (!nonWorkingDays[canonicalDayNumbers[columnIndex]]) {\n                lastWorkingColumn = columnIndex;\n                break;\n            }\n        }\n        // Hide or show the \"other month\" week row depending on our sixWeeks setting\n        weekElements[4].classList.toggle('b-hide-display', month.weekCount < 5 && !sixWeeks);\n        weekElements[5].classList.toggle('b-hide-display', month.weekCount < 6 && !sixWeeks);\n        month.eachWeek((week, dates) => {\n            const\n                weekDayElement = weekDayElements[rowIndex],\n                weekCells = [weekDayElement.previousSibling, ...weekDayElement.children];\n            // Stamp week into week row's dataset\n            weekElements[rowIndex].dataset.week = `${week[0]},${week[1]}`;\n            if (me.weekRenderer) {\n                me.callback(me.weekRenderer, me, [weekCells[0], week]);\n            }\n            else {\n                weekCells[0].innerText = week[1];\n            }\n            for (let columnIndex = 0; columnIndex < 7; columnIndex++) {\n                const\n                    date          = dates[columnIndex],\n                    day           = date.getDay(),\n                    key           = DateHelper.makeKey(date),\n                    isNonWorking  = nonWorkingDays[day],\n                    cell          = weekCells[columnIndex + 1],\n                    cellClassList = {\n                        [dayCellCls]             : 1,\n                        [disabledCls]            : me.isDisabledDate(date),\n                        [otherMonthCls]          : date.getMonth() !== month.month,\n                        [weekendCls]             : DateHelper.weekends[day],\n                        [todayCls]               : date.getTime() === today.getTime(),\n                        [nonWorkingDayCls]       : isNonWorking,\n                        'b-last-working-day'     : columnIndex === lastWorkingColumn,\n                        'b-first-visible-cell'   : !(date - (me.firstVisibleDate || -1)),\n                        'b-last-visible-cell'    : !(date - (me.lastVisibleDate || -1)),\n                        [`b-day-of-week-${day}`] : 1\n                    };\n                // Sync day cell classes with its calculated status\n                DomHelper.syncClassList(cell, cellClassList);\n                cell.dataset.date = key;\n                cell.dataset.cellIndex = cellIndex;\n                cell.dataset.columnIndex = columnIndex;\n                // Since we manipulate the classList/Name directly, we need to trick DomSync's config comparison logic or it\n                // may think the class has not changed.\n                if (cell.lastDomConfig) {\n                    delete cell.lastDomConfig.class;\n                    delete cell.lastDomConfig.className;\n                }\n                if (me.cellRenderer) {\n                    me.callback(me.cellRenderer, me, [{\n                        cell,\n                        date,\n                        day,\n                        row                : weekElements[rowIndex],\n                        rowIndex,\n                        cellIndex,\n                        columnIndex,\n                        visibleColumnIndex : me.visibleDayColumnIndex[day],\n                        week,\n                        key\n                    }]);\n                }\n                else {\n                    cell.innerHTML = date.getDate();\n                }\n                cellIndex++;\n            }\n            rowIndex++;\n        });\n        /**\n         * The number of rows displayed in this month. If {@link #config-sixWeeks} is not set,\n         * this may be from 4 to 6.\n         * @member {Number} visibleWeekCount\n         * @readonly\n         */\n        me.visibleWeekCount = rowIndex;\n        if (me.floating) {\n            // Must realign because content change might change dimensions\n            if (!me.isAligning) {\n                me.realign();\n            }\n        }\n        me.refreshCount = (me.refreshCount || 0) + 1;\n        /**\n         * Fires when this CalendarPanel refreshes.\n         * @event refresh\n         */\n        me.trigger('refresh');\n    }\n    isDisabledDate(date) {\n        const\n            day = date.getDay(),\n            {\n                disabledDates,\n                nonWorkingDays\n            }   = this;\n        if (this.disableWeekends && nonWorkingDays[day]) {\n            return true;\n        }\n        if (disabledDates) {\n            if (Array.isArray(disabledDates)) {\n                date = DateHelper.clearTime(date, true);\n                return disabledDates.some(d => !(DateHelper.clearTime(d, true) - date));\n            }\n            else {\n                return this.callback(this.disabledDates, this, [date]);\n            }\n        }\n    }\n    get bodyConfig() {\n        const\n            result = super.bodyConfig,\n            weeksContainerChildren = [];\n        result.children = [{\n            tag       : 'div',\n            className : 'b-calendar-row b-calendar-weekdays',\n            reference : 'weekdaysHeader',\n            children  : [\n                { class : 'b-week-number-cell' },\n                ...ArrayHelper.fill(7, { class : this.dayHeaderCls }),\n                DomHelper.scrollBarPadElement\n            ]\n        }, {\n            // `notranslate` prevents google translate messing up the DOM, https://github.com/facebook/react/issues/11538\n            className : 'b-weeks-container notranslate',\n            reference : 'weeksElement',\n            children  : weeksContainerChildren\n        }];\n        for (let i = 0; i < 6; i++) {\n            const weekRow = {\n                className : 'b-calendar-row b-calendar-week',\n                dataset   : {\n                    rowIndex : i\n                },\n                children : [{\n                    className : 'b-week-number-cell'\n                }, {\n                    className   : 'b-calendar-days',\n                    children    : [{}, {}, {}, {}, {}, {}, {}],\n                    syncOptions : {\n                        ignoreRefs : true,\n                        strict     : false  // allow complete replacement of classes w/o matching lastDomConfig\n                    }\n                }]\n            };\n            weeksContainerChildren.push(weekRow);\n        }\n        return result;\n    }\n    get firstVisibleDate() {\n        if (this.hideOtherMonthCells) {\n            const { year, month } = this.month;\n            return new Date(year, month, 1);\n        }\n        for (const me = this, date = me.month.startDate; ; date.setDate(date.getDate() + 1)) {\n            if (!me.hideNonWorkingDays || !me.nonWorkingDays[date.getDay()]) {\n                return date;\n            }\n        }\n    }\n    get lastVisibleDate() {\n        const lastDate = DateHelper.add(this.endDate, -1, 'd');\n        if (this.hideOtherMonthCells) {\n            return lastDate;\n        }\n        for (const me = this, date = lastDate; ; date.setDate(date.getDate() - 1)) {\n            if (!me.hideNonWorkingDays || !me.nonWorkingDays[date.getDay()]) {\n                return date;\n            }\n        }\n    }\n    /**\n     * Returns the cell associated with the passed date.\n     *\n     * To exclude dates which are outside of the panel's current month, pass the `strict` parameter as `true`\n     * @param {Date|String} date The date to find the element for or a key in the format `YYYY-MM-DD`\n     * @param {Boolean} strict Only return the element if this view *owns* the date.\n     * @returns {HTMLElement} The cell for the passed date if it exists\n     */\n    getCell(date, strict) {\n        if (!(typeof date === 'string')) {\n            date = DateHelper.makeKey(date);\n        }\n        const cell = this.weeksElement.querySelector(`[data-date=\"${date}\"]`);\n        if (cell && (!strict || !cell.classList.contains(this.otherMonthCls))) {\n            return cell;\n        }\n    }\n    onTipOverCell({ source : tip, target }) {\n        tip.date = DateHelper.parseKey(target.dataset.date);\n    }\n    updateLocalization() {\n        // Uncache the cached locale data\n        this._localeNonWorkingDays = this._localeWeekends = null;\n        this.updateDayNameFormat();\n        this.updateWeekStartDay(this.weekStartDay);\n        super.updateLocalization();\n    }\n}\n// Register this widget type with its Factory\nCalendarPanel.initClass();\nCalendarPanel._$name = 'CalendarPanel';", "import Panel from './Panel.js';\nimport EventHelper from '../helper/EventHelper.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\nimport DomHelper from '../helper/DomHelper.js';\n/**\n * @module Core/widget/YearPicker\n */\n/**\n * A Panel subclass which allows a year to be selected from a range of 12 displayed years.\n *\n * The panel can be configured with {@link #config-startYear} to specify the first year in the\n * displayed range.\n *\n * The {@link #property-year} indicates and sets the currently selected year.\n *\n * The {@link #event-select} event is fired when a new year is selected.\n *\n * {@inlineexample Core/widget/YearPicker.js}\n *\n * @extends Core/widget/Panel\n * @classtype yearpicker\n * @widget\n */\nexport default class YearPicker extends Panel {\n    static $name = 'YearPicker';\n    static type = 'yearpicker';\n    static configurable = {\n        textContent : false,\n        /**\n         * The definition of the top toolbar which displays the title and \"previous\" and\n         * \"next\" buttons.\n         *\n         * This contains the following predefined `items` which may be reconfigured by\n         * application code:\n         *\n         * - `title` A widget which displays the visible year range. Weight 100.\n         * - `previous` A button which navigates to the previous block. Weight 200.\n         * - `next` A button which navigates to the next block. Weight 300.\n         *\n         * These may be reordered:\n         *\n         * ```javascript\n         * new YearPicker({\n         *     appendTo : targetElement,\n         *     tbar     : {\n         *         items : {\n         *             // Move title to centre\n         *             title : {\n         *                 weight : 250\n         *             }\n         *         }\n         *     },\n         *     width    : '24em'\n         * });\n         * ```\n         * @config {ToolbarConfig}\n         */\n        tbar : {\n            overflow : null,\n            items    : {\n                previous : {\n                    type     : 'tool',\n                    cls      : 'b-icon b-icon-previous',\n                    onAction : 'up.previous',\n                    weight   : 100\n                },\n                title : {\n                    type     : 'button',\n                    cls      : 'b-yearpicker-title',\n                    weight   : 200,\n                    onAction : 'up.handleTitleClick'\n                },\n                next : {\n                    type     : 'tool',\n                    cls      : 'b-icon b-icon-next',\n                    onAction : 'up.next',\n                    weight   : 300\n                }\n            }\n        },\n        itemCls : 'b-year-container',\n        /**\n         * The number of clickable year buttons to display in the widget.\n         *\n         * It may be useful to change this if a non-standard shape or size is used.\n         * @config {Number}\n         * @default\n         */\n        yearButtonCount : 12,\n        /**\n         * The currently selected year.\n         * @member {Number} year\n         */\n        /**\n         * The year to use as the selected year. Defaults to the current year.\n         * @config {Number}\n         */\n        year : null,\n        /**\n         * The lowest year to allow.\n         * @config {Number}\n         */\n        minYear : null,\n        /**\n         * The highest year to allow.\n         * @config {Number}\n         */\n        maxYear : null,\n        /**\n         * The starting year displayed in the widget.\n         * @member {Number} startYear\n         */\n        /**\n         * The year to show at the start of the widget\n         * @config {Number}\n         */\n        startYear : null\n    };\n    construct(config) {\n        super.construct({\n            year : new Date().getFullYear(),\n            ...config\n        });\n        EventHelper.on({\n            element  : this.contentElement,\n            click    : 'onYearClick',\n            delegate : '.b-yearpicker-year',\n            thisObj  : this\n        });\n    }\n    get focusElement() {\n        return this.getYearButton(this.year) || this.getYearButton(this.startYear);\n    }\n    getYearButton(y) {\n        return this.contentElement.querySelector(`.b-yearpicker-year[data-year=\"${y}\"]`);\n    }\n    /**\n     * The currently selected year.\n     * @member {Number} value\n     */\n    get value() {\n        return this.year;\n    }\n    set value(year) {\n        this.year = year;\n    }\n    onYearClick({ target }) {\n        const clickedYear = Math.min(Math.max(parseInt(target.innerText), this.minYear || 1), this.maxYear || 9999);\n        // The updater won't run, so fire the select event here.\n        if (this.year === clickedYear) {\n            this.trigger('select', { oldValue : clickedYear, value : clickedYear });\n        }\n        else {\n            this.year = clickedYear;\n        }\n    }\n    handleTitleClick(e) {\n        this.trigger('titleClick', e);\n    }\n    previous() {\n        this.startYear = this.startYear - this.yearButtonCount;\n    }\n    next() {\n        this.startYear = this.endYear + 1;\n    }\n    ingestYear(year) {\n        if (!isNaN(year)) {\n            return ObjectHelper.isDate(year) ? year.getFullYear() : year;\n        }\n    }\n    changeYear(year) {\n        // ingestYear returns undefined if invalid input\n        if ((year = this.ingestYear(year))) {\n            return Math.min(Math.max(year, this.minYear || 1), this.maxYear || 9999);\n        }\n    }\n    updateYear(year, oldValue) {\n        const me = this;\n        if (!me.startYear || year > me.endYear) {\n            me.startYear = year;\n        }\n        else if (year < me.startYear) {\n            me.startYear = year - (me.yearButtonCount - 1);\n        }\n        if (!me.isConfiguring) {\n            /**\n             * Fired when a year is selected.\n             * @event select\n             * @param {Number} value The previously selected year.\n             * @param {Core.widget.YearPicker} source This YearPicker\n             */\n            me.trigger('select', { oldValue, value : year });\n        }\n    }\n    /**\n     * The ending year displayed in the widget.\n     * @member {Number} endYear\n     * @readonly\n     */\n    get endYear() {\n        return this.startYear + this.yearButtonCount - 1;\n    }\n    changeStartYear(startYear) {\n        // ingestYear returns undefined if invalid input\n        if ((startYear = this.ingestYear(startYear))) {\n            startYear = this.minYear ? Math.max(startYear, this.minYear) : startYear;\n            return this.maxYear ? Math.min(startYear, this.maxYear - (this.yearButtonCount - 1)) : startYear;\n        }\n    }\n    async updateStartYear(startYear, oldStartYear) {\n        if (this.isVisible) {\n            DomHelper.slideIn(this.contentElement, Math.sign(startYear - oldStartYear));\n        }\n    }\n    composeBody() {\n        // Must be ingested before first compose.\n        this.getConfig('year');\n        const\n            { startYear } = this,\n            result        = super.composeBody(),\n            children      = result.children[this.tbar ? 1 : 0].children = [];\n        this.widgetMap.title.text = `${`000${startYear}`.slice(-4)} - ${`000${this.endYear}`.slice(-4)}`;\n        for (let i = 0, y = startYear; i < this.yearButtonCount; i++, y++) {\n            children.push({\n                tag     : 'button',\n                dataset : {\n                    year : y\n                },\n                class : {\n                    'b-yearpicker-year' : 1,\n                    'b-selected'        : y === this.year\n                },\n                text : `000${y}`.slice(-4)\n            });\n        }\n        return result;\n    }\n}\n// Register this widget type with its Factory\nYearPicker.initClass();\nYearPicker._$name = 'YearPicker';", "import TextField from './TextField.js';\nimport StringHelper from '../helper/StringHelper.js';\n/**\n * @module Core/widget/DisplayField\n */\n/**\n * A widget used to show a read only value. Can also use a {@link #config-template template string} to show custom\n * markup inside a Container.\n *\n * ```javascript\n * let displayField = new DisplayField({\n *   appendTo : document.body,\n *   label: 'name',\n *   value : 'John Doe',\n *   // or use a template\n *   // template : name => `${name} is the name`\n * });\n * ```\n *\n * {@inlineexample Core/widget/DisplayField.js}\n *\n * @extends Core/widget/Field\n * @classtype displayField\n * @classtypealias display\n * @widget\n * @inputfield\n */\nexport default class DisplayField extends TextField {\n    static $name = 'DisplayField';\n    static type = 'displayfield';\n    static alias = 'display';\n    static get configurable() {\n        return {\n            readOnly : true,\n            editable : false,\n            cls      : 'b-display-field',\n            /**\n             * A template string used to render the value of this field. Please note you are responsible for encoding\n             * any strings protecting against XSS.\n             *\n             * ```javascript\n             * new DisplayField({\n             *     appendTo : document.body,\n             *     name     : 'age',\n             *     label    : 'Age',\n             *     template : data => `${data.value} years old`\n             * })\n             * ```\n             * @config {Function}\n             * @param {ContainerItemConfig} fieldConfig Configuration object for the field\n             * @returns {DomConfig|String|null}\n             */\n            template : null,\n            ariaElement : 'displayElement'\n        };\n    }\n    get focusElement() {\n        // we're not focusable.\n    }\n    changeReadOnly() {\n        return true;\n    }\n    changeEditable() {\n        return false;\n    }\n    get inputElement() {\n        return {\n            tag       : 'span',\n            id        : `${this.id}-input`,\n            reference : 'displayElement',\n            html      : this.template ? this.template(this.value) : StringHelper.encodeHtml(this.value)\n        };\n    }\n}\n// Register this widget type with its Factory\nDisplayField.initClass();\nDisplayField._$name = 'DisplayField';", "import CalendarPanel from './CalendarPanel.js';\nimport YearPicker from './YearPicker.js';\nimport DateHelper from '../helper/DateHelper.js';\nimport EventHelper from '../helper/EventHelper.js';\nimport Combo from './Combo.js';\nimport DomHelper from '../helper/DomHelper.js';\nimport './DisplayField.js';\nconst\n    generateMonthNames = () => DateHelper.getMonthNames().map((m, i) => [i, m]),\n    dateSort           = (lhs, rhs) => lhs.valueOf() - rhs.valueOf(),\n    emptyArray         = Object.freeze([]);\nclass ReadOnlyCombo extends Combo {\n    static get $name() {\n        return 'ReadOnlyCombo';\n    }\n    static get type() {\n        return 'readonlycombo';\n    }\n    static get configurable() {\n        return {\n            editable        : false,\n            inputAttributes : {\n                tag      : 'div',\n                tabIndex : -1\n            },\n            inputValueAttr          : 'innerHTML',\n            highlightExternalChange : false,\n            monitorResize           : false,\n            triggers                : {\n                expand : false\n            },\n            picker : {\n                align : {\n                    align     : 't-b',\n                    axisLock  : true,\n                    matchSize : false\n                },\n                cls        : 'b-readonly-combo-list',\n                scrollable : {\n                    overflowX : false\n                }\n            }\n        };\n    }\n}\nReadOnlyCombo.initClass();\n/**\n * @module Core/widget/DatePicker\n */\n/**\n * A Panel which can display a month of date cells, which navigates between the cells, fires events upon user selection\n * actions, optionally navigates to other months in response to UI gestures, and optionally displays information about\n * each date cell.\n *\n * A date is selected (meaning a single value is selected if {@link #config-multiSelect} is not set, or\n * added to the {@link #property-selection} if {@link #config-multiSelect if set}) by clicking a cell\n * or by pressing `ENTER` when focused on a cell.\n *\n * The `SHIFT` and `CTRL` keys modify selection behaviour depending on the value of {@link #config-multiSelect}.\n *\n * This class is used as a {@link Core.widget.DateField#config-picker} by the {@link Core.widget.DateField} class.\n *\n * {@inlineexample Core/widget/DatePicker.js}\n *\n * ## Custom cell rendering\n * You can easily control the content of each date cell using the {@link #config-cellRenderer}. The example below shows\n * a view typically seen when booking hotel rooms or apartments.\n *\n * {@inlineexample Core/widget/DatePickerCellRenderer.js}\n *\n * ## Multi selection\n * You can select multiple date ranges or a single date range using the {@link #config-multiSelect} config.\n *\n * {@inlineexample Core/widget/DatePickerMulti.js}\n *\n * ## Configuring toolbar buttons\n *\n * The datepicker includes a few useful navigation buttons by default. Through the DatePicker\u00B4s {@link #config-tbar toolbar},\n * you can manipulate these, via the toolbar\u00B4s {@link Core/widget/Toolbar#config-items} config.\n *\n * There are four buttons by default, each of which can be reconfigured using\n * an object, or disabled by configuring them as `null`.\n *\n * ```javascript\n * new DatePicker({\n *    tbar : {\n *       // Remove all navigation buttons\n *       items : {\n *           prevYear  : null,\n *           prevMonth : null,\n *           nextYear  : null,\n *           nextMonth : null\n *       }\n *    }\n * })\n * ```\n *\n * Provided toolbar widgets include:\n *\n * - `prevMonth` Navigates to previous month\n * - `nextMonth` Navigates to next month\n * - `prevYear` Navigates to previous year\n * - `nextYear` Navigates to next year\n *\n * @extends Core/widget/CalendarPanel\n * @classtype datepicker\n * @widget\n */\nexport default class DatePicker extends CalendarPanel {\n    static $name = 'DatePicker';\n    static type = 'datepicker';\n    static get delayable() {\n        return {\n            refresh : 'raf'\n        };\n    }\n    static get configurable() {\n        return {\n            /**\n             * The date that the user has navigated to using the UI *prior* to setting the widget's\n             * value by selecting. The initial default is today's date.\n             *\n             * This may be changed using keyboard navigation. The {@link Core.widget.CalendarPanel#property-date} is set\n             * by pressing `ENTER` when the desired date is reached.\n             *\n             * Programmatically setting the {@link Core.widget.CalendarPanel#config-date}, or using the UI to select the date\n             * by clicking it also sets the `activeDate`\n             * @config {Date}\n             */\n            activeDate : {\n                value   : new Date(),\n                $config : {\n                    equal : 'date'\n                }\n            },\n            focusable   : true,\n            textContent : false,\n            tbar        : {\n                overflow : null,\n                items    : {\n                    prevYear : {\n                        cls      : 'b-icon b-icon-first',\n                        onAction : 'up.gotoPrevYear',\n                        tooltip  : 'L{DatePicker.gotoPrevYear}'\n                    },\n                    prevMonth : {\n                        cls      : 'b-icon b-icon-previous',\n                        onAction : 'up.gotoPrevMonth',\n                        tooltip  : 'L{DatePicker.gotoPrevMonth}'\n                    },\n                    fields : {\n                        type  : 'container',\n                        cls   : 'b-datepicker-title',\n                        items : {\n                            monthField : {\n                                type              : 'readonlycombo',\n                                cls               : 'b-datepicker-monthfield',\n                                items             : generateMonthNames(),\n                                internalListeners : {\n                                    select : 'up.onMonthPicked'\n                                }\n                            },\n                            yearButton : {\n                                type              : 'button',\n                                cls               : 'b-datepicker-yearbutton',\n                                internalListeners : {\n                                    click : 'up.onYearPickerRequested'\n                                }\n                            }\n                        }\n                    },\n                    nextMonth : {\n                        cls      : 'b-icon b-icon-next',\n                        onAction : 'up.gotoNextMonth',\n                        tooltip  : 'L{DatePicker.gotoNextMonth}'\n                    },\n                    nextYear : {\n                        cls      : 'b-icon b-icon-last',\n                        onAction : 'up.gotoNextYear',\n                        tooltip  : 'L{DatePicker.gotoNextYear}'\n                    }\n                }\n            },\n            yearPicker : {\n                value : {\n                    type              : 'YearPicker',\n                    yearButtonCount   : 16,\n                    trapFocus         : true,\n                    positioned        : true,\n                    hidden            : true,\n                    internalListeners : {\n                        titleClick : 'up.onYearPickerTitleClick',\n                        select     : 'up.onYearPicked'\n                    }\n                },\n                $config : 'lazy'\n            },\n            /**\n             * The initially selected date.\n             * @config {Date}\n             */\n            date : null,\n            /**\n             * The minimum selectable date. Selection of and navigation to dates prior\n             * to this date will not be possible.\n             * @config {Date}\n             */\n            minDate : {\n                value   : null,\n                $config : {\n                    equal : 'date'\n                }\n            },\n            /**\n             * The maximum selectable date. Selection of and navigation to dates after\n             * this date will not be possible.\n             * @config {Date}\n             */\n            maxDate : {\n                value   : null,\n                $config : {\n                    equal : 'date'\n                }\n            },\n            /**\n             * By default, disabled dates cannot be navigated to, and they are skipped over\n             * during keyboard navigation. Configure this as `true` to enable navigation to\n             * disabled dates.\n             * @config {Boolean}\n             * @default\n             */\n            focusDisabledDates : null,\n            /**\n             * Configure as `true` to enable selecting multiple discontiguous date ranges using\n             * click and Shift+click to create ranges and Ctrl+click to select/deselect individual dates.\n             *\n             * Configure as `'range'` to enable selecting a single date range by selecting a\n             * start and end date. Hold \"SHIFT\" button to select date range. Ctrl+click may add\n             * or remove dates to/from either end of the range.\n             * @config {Boolean|'range'}\n             * @default\n             */\n            multiSelect : false,\n            /**\n             * If {@link #config-multiSelect} is configured as `true`, this is an array of dates\n             * which are selected. There may be multiple, discontiguous date ranges.\n             *\n             * If {@link #config-multiSelect} is configured as `'range'`, this is a two element array\n             * specifying the first and last selected dates in a range.\n             * @config {Date[]}\n             */\n            selection : {\n                $config : {\n                    equal : (v1, v2) => v1 && v1.equals(v2)\n                },\n                value : null\n            },\n            /**\n             * By default, the month and year are editable. Configure this as `false` to prevent that.\n             * @config {Boolean}\n             * @default\n             */\n            editMonth : true,\n            /**\n             * The {@link Core.helper.DateHelper} format string to format the day names.\n             * @config {String}\n             * @default\n             */\n            dayNameFormat : 'dd',\n            trapFocus : true,\n            role : 'grid',\n            focusDescendant : true,\n            /**\n             * By default, when the {@link #property-date} changes, the UI will only refresh\n             * if it doesn't contain a cell for that date, so as to keep a stable UI when\n             * navigating.\n             *\n             * Configure this as `true` to refresh the UI whenever the month changes, even if\n             * the UI already shows that date.\n             * @config {Boolean}\n             * @internal\n             */\n            alwaysRefreshOnMonthChange : null\n        };\n    }\n    static get prototypeProperties() {\n        return {\n            /**\n             * The class name to add to the calendar cell whose date which is outside of the\n             * {@link #config-minDate}/{@link #config-maxDate} range.\n             * @config {String}\n             * @private\n             */\n            outOfRangeCls : 'b-out-of-range',\n            /**\n             * The class name to add to the currently focused calendar cell.\n             * @config {String}\n             * @private\n             */\n            activeCls : 'b-active-date',\n            /**\n             * The class name to add to selected calendar cells.\n             * @config {String}\n             * @private\n             */\n            selectedCls : 'b-selected-date'\n        };\n    }\n    // region Init\n    construct(config) {\n        const me = this;\n        super.construct(config);\n        me.externalCellRenderer = me.cellRenderer;\n        me.cellRenderer         = me.internalCellRenderer;\n        me.element.setAttribute('aria-activedescendant', `${me.id}-active-day`);\n        me.weeksElement.setAttribute('role', 'grid');\n        me.weekElements.forEach(w => w.setAttribute('role', 'row'));\n        me.element.setAttribute('ariaLabelledBy', me.widgetMap.fields.id);\n        EventHelper.on({\n            element : me.weeksElement,\n            click   : {\n                handler  : 'onCellClick',\n                delegate : `.${me.dayCellCls}:not(.${me.disabledCls}):not(.${me.outOfRangeCls})`\n            },\n            mousedown : {\n                handler  : 'onCellMousedown',\n                delegate : `.${me.dayCellCls}`\n            },\n            thisObj : me\n        });\n        me.widgetMap.monthField.readOnly = me.widgetMap.yearButton.disabled = !me.editMonth;\n        // Ensure the DatePicker is immediately ready for use.\n        me.refresh.flush();\n    }\n    afterHide() {\n        this._yearPicker?.hide();\n        super.afterHide(...arguments);\n    }\n    doDestroy() {\n        this.yearButton?.destroy();\n        this.monthField?.destroy();\n        super.doDestroy();\n    }\n    // endregion\n    get focusElement() {\n        return this.weeksElement.querySelector(`.${this.dayCellCls}[tabIndex=\"0\"]`);\n    }\n    doRefresh() {\n        const\n            me             = this,\n            { date }       = me,\n            oldActiveCell  = me.focusElement,\n            // Coerce the active date to be in the visible range.\n            // Do not use the setter, the sync is done below\n            activeDate     = DateHelper.betweenLesser(me.activeDate, me.month.startDate, me.month.endDate) ? me.activeDate : (me._activeDate = date);\n        // toolbar widgets must have been instantiated.\n        me.getConfig('tbar');\n        super.doRefresh(...arguments);\n        me.widgetMap.monthField.value = date.getMonth();\n        me.widgetMap.yearButton.text  = date.getFullYear();\n        // The focused cell will have been repurposed for a new date\n        const dateOfOldActiveCell = DateHelper.parseKey(oldActiveCell?.dataset.date);\n        // The position of the cell may have changed, so the \"from\" cell must\n        // be identified by the date that is stamped into it *after* the refresh..\n        if (activeDate - dateOfOldActiveCell) {\n            me.syncActiveDate(activeDate, dateOfOldActiveCell);\n        }\n    }\n    internalCellRenderer({ cell, date }) {\n        const\n            me            = this,\n            {\n                activeCls,\n                selectedCls,\n                externalCellRenderer\n            }             = me,\n            isSelected    = me.isSelectedDate(date),\n            cellClassList = {\n                [activeCls]        : activeCls && me.isActiveDate(date),\n                [selectedCls]      : isSelected,\n                [me.outOfRangeCls] : (me.minDate && date < me.minDate) || (me.maxDate && date > me.maxDate)\n            };\n        if (isSelected) {\n            // Fix up start/inner/end range classes\n            if (me.multiSelect) {\n                const\n                    isStart = !me.isSelectedDate(DateHelper.add(date, -1, 'd')),\n                    isEnd   = !me.isSelectedDate(DateHelper.add(date, 1, 'd'));\n                cellClassList['b-range-start'] = isStart;\n                cellClassList['b-range-end'] = isEnd;\n                cellClassList['b-in-range'] = !isStart && !isEnd;\n            }\n        }\n        DomHelper.updateClassList(cell, cellClassList);\n        // Must replace entire content in case we have an externalCellRenderer\n        cell.innerHTML = `<div class=\"b-datepicker-cell-inner\">${date.getDate()}</div>`;\n        cell.setAttribute('role', 'gridcell');\n        cell.setAttribute('aria-label', DateHelper.format(date, 'MMMM D, YYYY'));\n        if (me.isActiveDate(date)) {\n            cell.id = `${me.id}-active-day`;\n        }\n        else {\n            cell.removeAttribute('id');\n        }\n        if (externalCellRenderer) {\n            arguments[0].cell = cell.firstChild;\n            me.callback(externalCellRenderer, this, arguments);\n        }\n    }\n    onCellMousedown(event) {\n        const cell = event.target.closest('[data-date]');\n        cell.focus();\n        if (DomHelper.getActiveElement(cell) === cell) {\n            // Only preventDefault if we succeeded in ingesting focus.\n            event.preventDefault();\n        }\n        this.activeDate = DateHelper.parseKey(cell.dataset.date);\n    }\n    onCellClick(event) {\n        const cell = event.target.closest('[data-date]');\n        this.onUIDateSelect(DateHelper.parseKey(cell.dataset.date), event);\n    }\n    /**\n     * Called when the user uses the UI to select the current activeDate. So ENTER when focused\n     * or clicking a date cell.\n     * @param {Date} date The active date to select\n     * @param {Event} event the instigating event, either a `click` event or a `keydown` event.\n     * @internal\n     */\n    onUIDateSelect(date, event) {\n        const\n            me = this,\n            {\n                lastClickedDate,\n                multiSelect\n            }  = me;\n        me.lastClickedDate = date;\n        if (!me.isDisabledDate(date)) {\n            me.activatingEvent = event;\n            // Handle multi selecting.\n            // * single contiguous date range, eg: an event start and end\n            // * multiple discontiguous ranges\n            if (multiSelect) {\n                me.handleMultiSelect(lastClickedDate, date, event);\n            }\n            else {\n                me.selection = date;\n                if (me.floating) {\n                    me.hide();\n                }\n            }\n            me.activatingEvent = null;\n        }\n    }\n    // Calls updateSelection if the selection is mutated\n    handleMultiSelect(lastClickedDate, date, event) {\n        const\n            me          = this,\n            {\n                multiSelect\n            }           = me,\n            _selection  = me._selection || (me._selection = new DateSet()),\n            selection   = _selection.dates,\n            singleRange = multiSelect === 'range',\n            {\n                size,\n                generation\n            }           = _selection,\n            rangeEnds   = size && {\n                [DateHelper.makeKey(DateHelper.add(selection[0], -1, 'd'))]                   : 1,\n                [DateHelper.makeKey(selection[0])]                                            : 1,\n                [DateHelper.makeKey(selection[selection.length - 1])]                         : 1,\n                [DateHelper.makeKey(DateHelper.add(selection[selection.length - 1], 1, 'd'))] : 1\n            },\n            isSelected  = _selection.has(date),\n            toggleFn    = isSelected ? 'delete' : 'add';\n        // If we're allowed to create one range and they clicked on a togglable date of a range\n        const clickedRangeEnd = singleRange && rangeEnds?.[DateHelper.makeKey(date)];\n        // Ctrl+click means toggle the date, leaving remaining selection unchanged\n        if (event.ctrlKey) {\n            // Allow individual date toggling if we are allowing multi ranges\n            // or there's no current selection, or they are on, or adjacent to the range end\n            if (multiSelect === true || !size || clickedRangeEnd) {\n                _selection[toggleFn](date);\n                // Check that the start hasn't been deselected\n                if (singleRange && !_selection.has(me.rangeStartDate)) {\n                    me.rangeStartDate.setDate(me.rangeStartDate.getDate() + (date < selection[1] ? 1 : -1));\n                }\n            }\n        }\n        // Shift+click means add a range\n        else if (event.shiftKey && size) {\n            const [start, end] = [\n                new Date(singleRange ? (me.rangeStartDate || (me.rangeStartDate = selection[0])) : lastClickedDate),\n                date\n            ].sort(dateSort);\n            // If we can only have one range\n            if (singleRange) {\n                _selection.clear();\n            }\n            // Add all dates in the range\n            for (const d = start; d <= end; d.setDate(d.getDate() + 1)) {\n                _selection.add(d);\n            }\n        }\n        // Make the clicked date the only selected date.\n        // Avoid a no-op which would still cause a generation change\n        else if (!(_selection.has(date) && _selection.size === 1)) {\n            _selection.clear();\n            _selection.add(date);\n        }\n        const newSize = _selection.size;\n        // Keep track of the range start date. The first selected date is the start and the end then\n        // can move to either side of that.\n        if (newSize === 1) {\n            me.rangeStartDate = date;\n        }\n        else if (!newSize) {\n            me.rangeStartDate = null;\n        }\n        // Process selection change if we changed the selection.\n        if (_selection.generation !== generation) {\n            me.updateSelection(_selection);\n        }\n    }\n    changeSelection(selection) {\n        // We always need a _selection property to be a DateSet.\n        // Falsy selection value means empty DateSet.\n        const me = this;\n        let result, rangeStartDate;\n        if (selection) {\n            // Convert single Date into Array\n            if (!selection.forEach) {\n                selection = [selection];\n            }\n            // Clamp selection into range. May duplicate, but the Set will dedupe.\n            selection.forEach((d, i) => selection[i] = me.changeDate(d));\n            // Cache the first date, regardless of sort order for use as the \"clicked date\"\n            // around which the range revolves when shift+click is used.\n            rangeStartDate = selection[0];\n            selection.sort(dateSort);\n            // A two element array means a start and end\n            if (me.multiSelect === 'range' && selection.length === 2) {\n                result = new DateSet();\n                for (const d = new Date(selection[0]); d <= selection[1]; d.setDate(d.getDate() + 1)) {\n                    result.add(d);\n                }\n            }\n            else {\n                // Multi dates may be in any order, so use the temporally first date as range start\n                rangeStartDate = selection[0];\n                result = new DateSet(selection);\n            }\n        }\n        else {\n            result = new DateSet();\n        }\n        if (rangeStartDate) {\n            me.activeDate = me.rangeStartDate = DateHelper.clearTime(rangeStartDate);\n        }\n        return result;\n    }\n    updateMultiSelect(multiSelect) {\n        this.element.classList.toggle('b-multiselect', Boolean(multiSelect));\n        if (!multiSelect) {\n            this.selection = [...this.selection][0];\n        }\n    }\n    updateSelection(dateSet) {\n        const\n            me        = this,\n            { dates } = dateSet,\n            selection = me.multiSelect === 'range' ? [dates[0], dates[dates.length - 1]] : dates;\n        // \"date\" property must be seen to be the selected date.\n        dates.length && (me.date = dates[0]);\n        if (!me.isConfiguring) {\n            // We're going to announce the change. UI must be up to date\n            me.refresh.now();\n            /**\n             * Fires when a date or date range is selected. If {@link #config-multiSelect} is specified,\n             * this will fire upon deselection and selection of dates.\n             * @event selectionChange\n             * @param {Date[]} selection The selected date. If {@link #config-multiSelect} is specified\n             * this may be a two element array specifying start and end dates.\n             * @param {Boolean} userAction This will be `true` if the change was caused by user interaction\n             * as opposed to programmatic setting.\n             */\n            me.trigger('selectionChange', {\n                selection,\n                userAction : Boolean(me.activatingEvent)\n            });\n        }\n    }\n    /**\n     * The selected Date(s).\n     *\n     * When {@link #config-multiSelect} is `'range'`, then this yields a two element array\n     * representing the start and end of the selected range.\n     *\n     * When {@link #config-multiSelect} is `true`, this yields an array containing every selected\n     * Date.\n     * @member {Date[]} selection\n     */\n    get selection() {\n        const\n            { _selection } = this,\n            dates          = _selection ? _selection.dates : emptyArray;\n        return this.multiSelect === 'range' && dates.length ? [dates[0], dates[dates.length - 1]] : dates;\n    }\n    onInternalKeyDown(keyEvent) {\n        const\n            me         = this,\n            keyName    = keyEvent.key.trim() || keyEvent.code,\n            activeDate = me.activeDate;\n        let newDate    = new Date(activeDate);\n        if (keyName === 'Escape' && me.floating) {\n            return me.hide();\n        }\n        // Only navigate if not focused on one of our child widgets.\n        // We have a prevMonth and nextMonth tool and possibly month and year pickers.\n        if (activeDate && me.weeksElement.contains(keyEvent.target)) {\n            do {\n                switch (keyName) {\n                    case 'ArrowLeft':\n                        // Disable browser use of this key.\n                        // Ctrl+ArrowLeft navigates back.\n                        // ArrowLeft scrolls if there is horizontal scroll.\n                        keyEvent.preventDefault();\n                        if (keyEvent.ctrlKey) {\n                            newDate = me.gotoPrevMonth();\n                        }\n                        else {\n                            newDate.setDate(newDate.getDate() - 1);\n                        }\n                        break;\n                    case 'ArrowUp':\n                        // Disable browser use of this key.\n                        // ArrowUp scrolls if there is vertical scroll.\n                        keyEvent.preventDefault();\n                        newDate.setDate(newDate.getDate() - 7);\n                        break;\n                    case 'ArrowRight':\n                        // Disable browser use of this key.\n                        // Ctrl+ArrowRight navigates forwards.\n                        // ArrowRight scrolls if there is horizontal scroll.\n                        keyEvent.preventDefault();\n                        if (keyEvent.ctrlKey) {\n                            newDate = me.gotoNextMonth();\n                        }\n                        else {\n                            newDate.setDate(newDate.getDate() + 1);\n                        }\n                        break;\n                    case 'ArrowDown':\n                        // Disable browser use of this key.\n                        // ArrowDown scrolls if there is vertical scroll.\n                        keyEvent.preventDefault();\n                        newDate.setDate(newDate.getDate() + 7);\n                        break;\n                    case 'Enter':\n                        return me.onUIDateSelect(activeDate, keyEvent);\n                }\n            } while (me.isDisabledDate(newDate) && !me.focusDisabledDates);\n            // Don't allow navigation to outside of date bounds.\n            if (me.minDate && newDate < me.minDate) {\n                return;\n            }\n            if (me.maxDate && newDate > me.maxDate) {\n                return;\n            }\n            me.activeDate = newDate;\n        }\n    }\n    changeMinDate(minDate) {\n        // Avoid changeDate which clamps incoming value into current allowable range\n        return minDate && CalendarPanel.prototype.changeDate.apply(this, arguments);\n    }\n    updateMinDate(minDate) {\n        this._yearpicker && (this._yearpicker.minYear = minDate?.getFullYear());\n        this.refresh();\n    }\n    changeMaxDate(minDate) {\n        // Avoid changeDate which clamps incoming value into current allowable range\n        return minDate && CalendarPanel.prototype.changeDate.apply(this, arguments);\n    }\n    updateMaxDate(maxDate) {\n        this._yearpicker && (this._yearpicker.maxYear = maxDate?.getFullYear());\n        this.refresh();\n    }\n    changeDate(date) {\n        return DateHelper.clamp(super.changeDate(date), this.minDate, this.maxDate);\n    }\n    updateDate(date, oldDate) {\n        const\n            me        = this,\n            { month } = me;\n        // Directly configuring a date creates the selection\n        me.isConfiguring && !me.initializingActiveDate && (me.selection = date);\n        // Only change the month's date if it is within our current month\n        // or we have to because we don't have a cell for it.\n        // If it's a date in the \"otherMonth\" part of the grid, do not update.\n        if (!month.date || date.getMonth() === month.month || !me.getCell(date) || me.alwaysRefreshOnMonthChange || me.isNavigating) {\n            super.updateDate(date);\n        }\n        else {\n            const\n                newMonth = month.getOtherMonth(date),\n                // Collect changes as bitwise flags:\n                // 0001 = date has changed.\n                // 0010 = week has changed.\n                // 0100 = month has changed.\n                // 1000 = year has changed.\n                // We need this because 10/1/2010 -> 10/1/2011 must fire a dateChange\n                // and a monthChange in addition to the yearChange.\n                // And 10/1/2010 -> 10/2/2010 must fire a dateChange in addition to the monthChange.\n                changes  = me.eventListeners && (oldDate ? (\n                    date.getDate()            !== oldDate.getDate())             |\n                    (newMonth.getWeekId(date) !== month.getWeekId(oldDate)) << 1 |\n                    (date.getMonth()          !== oldDate?.getMonth())      << 2 |\n                    (date.getFullYear()       !== oldDate?.getFullYear())   << 3 : 15);\n            me.trigger('dateChange', {\n                changes : {\n                    d : true,\n                    w : Boolean(changes & 2),\n                    m : Boolean(changes & 12),\n                    y : Boolean(changes & 8),\n                    r : newMonth.weekCount !== month.weekCount\n                },\n                value    : date,\n                oldValue : oldDate\n            });\n        }\n    }\n    changeActiveDate(activeDate, oldActiveDate) {\n        if (this.trigger('beforeActiveDateChange', { activeDate, oldActiveDate }) === false) {\n            return;\n        }\n        activeDate = activeDate ? this.changeDate(activeDate) : this.date || (this.date = DateHelper.clearTime(new Date()));\n        if (isNaN(activeDate)) {\n            throw new Error('DatePicker date ingestion must be passed a Date, or a YYYY-MM-DD date string');\n        }\n        return DateHelper.clamp(activeDate, this.minDate, this.maxDate);\n    }\n    updateActiveDate(activeDate, wasActiveDate) {\n        const\n            me                = this,\n            { isConfiguring } = me;\n        if (isConfiguring || !me.getCell(activeDate)) {\n            me.initializingActiveDate = isConfiguring;\n            me.date = activeDate;\n            me.initializingActiveDate = false;\n        }\n        if (!isConfiguring && !me.refresh.isPending) {\n            me.syncActiveDate(activeDate, wasActiveDate);\n        }\n    }\n    syncActiveDate(activeDate, wasActiveDate) {\n        const\n            me            = this,\n            { activeCls } = me,\n            activeCell    = me.getCell(activeDate),\n            wasActiveCell = wasActiveDate && me.getCell(wasActiveDate),\n            activeElement = DomHelper.getActiveElement(me.element);\n        activeCell.setAttribute('tabIndex', 0);\n        activeCls && activeCell.classList.add(activeCls);\n        activeCell.id = `${me.id}-active-day`;\n        if (me.weeksElement.contains(activeElement) /*|| me.owner?.element.contains(activeElement)*/) {\n            activeCell.focus();\n        }\n        if (wasActiveCell && wasActiveCell !== activeCell) {\n            wasActiveCell.removeAttribute('tabIndex');\n            activeCls && wasActiveCell.classList.remove(activeCls);\n            wasActiveCell.removeAttribute('id');\n        }\n    }\n    set value(value) {\n        const\n            me = this,\n            {\n                selection,\n                duration\n            }  = me;\n        if (value) {\n            value = me.changeDate(value, me.value);\n            // If we're maintaining a single date range, move the range\n            if (me.multiSelect === 'range' && selection?.length === 2) {\n                if (!DateHelper.betweenLesserEqual(value, ...selection)) {\n                    // Move range back to encapsulate date\n                    if (value < selection[0]) {\n                        me.selection = [value, DateHelper.add(value, duration - 1, 'd')];\n                    }\n                    // Move range forwards to encapsulate date\n                    else {\n                        me.selection = [DateHelper.add(value, -(duration - 1), 'd'), value];\n                    }\n                }\n                me.date = me.activeDate = value;\n                return;\n            }\n            // Undefined return value means no change\n            if (value !== undefined) {\n                me.selection = value;\n            }\n        }\n        else {\n            // Clearing the value - go to today's calendar\n            me.date = new Date();\n            me.selection = null;\n        }\n    }\n    get value() {\n        return this.selection[this.selection.length - 1];\n    }\n    get duration() {\n        return this.multiSelect === 'range' ? DateHelper.diff(...this.selection, 'd') + 1 : 1;\n    }\n    gotoPrevYear() {\n        return this.goto(-1, 'year');\n    }\n    gotoPrevMonth() {\n        return this.goto(-1, 'month');\n    }\n    gotoNextMonth() {\n        return this.goto(1, 'month');\n    }\n    gotoNextYear() {\n        return this.goto(1, 'year');\n    }\n    goto(direction, unit) {\n        const\n            me                  = this,\n            { activeDate }      = me,\n            activeCell          = activeDate && me.getCell(activeDate);\n        let newDate;\n        // If active date is already in the month we're going to, use it\n        if (unit === 'month' && activeCell && activeDate?.getMonth() === me.month.month + direction) {\n            newDate = activeDate;\n        }\n        // Move the date by the requested unit\n        else {\n            newDate = DateHelper.add(activeCell ? activeDate : me.date, direction, unit);\n        }\n        const firstDateOfNewMonth = new Date(newDate);\n        firstDateOfNewMonth.setDate(1);\n        const lastDateOfNewMonth  = DateHelper.add(DateHelper.add(firstDateOfNewMonth, 1, 'month'), -1, 'day');\n        // Don't navigate if month is outside bounds\n        if ((me.minDate && direction < 0 && lastDateOfNewMonth < me.minDate) || (me.maxDate && direction > 0 && firstDateOfNewMonth > me.maxDate)) {\n            return;\n        }\n        // We need to force a UI change even if the UI contains the target date.\n        // updateDate always calls super and CalendarPanel will refresh\n        me.isNavigating = true;\n        const result = me.date = newDate;\n        if (activeCell) {\n            me.activeDate = newDate;\n        }\n        me.isNavigating = false;\n        return result;\n    }\n    isActiveDate(date) {\n        return !(date - this.activeDate);\n    }\n    isSelectedDate(date) {\n        return this._selection?.has(date);\n    }\n    onMonthPicked({ record, userAction }) {\n        if (userAction) {\n            this.activeDate = DateHelper.add(this.activeDate, record.value - this.activeDate.getMonth(), 'month');\n            this.focusElement?.focus();\n        }\n    }\n    onYearPickerRequested() {\n        const { yearPicker } = this;\n        if (yearPicker.isVisible) {\n            yearPicker.hide();\n        }\n        else {\n            yearPicker.year = yearPicker.startYear = this.activeDate.getFullYear();\n            yearPicker.show();\n            yearPicker.focus();\n        }\n    }\n    onYearPickerTitleClick() {\n        this.yearPicker.hide();\n    }\n    onYearPicked({ value, source }) {\n        const newDate = new Date(this.activeDate);\n        newDate.setFullYear(value);\n        this.activeDate = newDate;\n        // Move focus without scroll *before* focus reversion from the hide.\n        // Browser behaviour of scrolling to focused element would break animation.\n        this.focusElement && DomHelper.focusWithoutScrolling(this.focusElement);\n        source.hide();\n    }\n    changeYearPicker(yearPicker, oldYearPicker) {\n        return YearPicker.reconfigure(oldYearPicker, yearPicker ? YearPicker.mergeConfigs({\n            owner    : this,\n            appendTo : this.element,\n            minYear  : this.minDate?.getFullYear(),\n            maxYear  : this.maxDate?.getFullYear()\n        }, yearPicker) : null, this);\n    }\n    get childItems() {\n        const\n            { _yearPicker } = this,\n            result          = super.childItems;\n        if (_yearPicker) {\n            result.push(_yearPicker);\n        }\n        return result;\n    }\n    updateLocalization() {\n        const\n            {\n                monthField\n            }          = this.widgetMap,\n            newData    = generateMonthNames();\n        if (!this.isConfiguring && !newData.every((d, i) => d[1] === monthField.store.getAt(i).text)) {\n            newData[monthField.value ?? this.date.getMonth()].selected = true;\n            monthField.items = newData;\n        }\n        super.updateLocalization();\n    }\n}\n// Dates are never equal, so raw Set won't work.\nclass DateSet extends Set {\n    add(d) {\n        d = DateHelper.makeKey(d);\n        if (!this.has(d)) {\n            this.generation = (this.generation || 0) + 1;\n        }\n        return super.add(d);\n    }\n    delete(d) {\n        d = DateHelper.makeKey(d);\n        if (this.has(d)) {\n            this.generation++;\n        }\n        return super.delete(d);\n    }\n    has(d) {\n        return super.has(DateHelper.makeKey(d));\n    }\n    clear() {\n        if (this.size) {\n            this.generation++;\n        }\n        return super.clear();\n    }\n    equals(other) {\n        Array.isArray(other) && (other = new DateSet(other));\n        return (other.size === this.size) && [...this].every(s => other.has(s));\n    }\n    get dates() {\n        return [...this].sort().map(k => DateHelper.parseKey(k));\n    }\n}\n// Register this widget type with its Factory\nDatePicker.initClass();\nDatePicker._$name = 'DatePicker';", "import PickerField from './PickerField.js';\nimport DatePicker from './DatePicker.js';\nimport DH from '../helper/DateHelper.js';\n/**\n * @module Core/widget/DateField\n */\n/**\n * Date field widget (text field + date picker).\n *\n * This field can be used as an {@link Grid.column.Column#config-editor editor} for the {@link Grid.column.Column Column}.\n * It is used as the default editor for the {@link Grid.column.DateColumn DateColumn}.\n *\n * This widget may be operated using the keyboard. `ArrowDown` opens the date picker, which itself\n * is keyboard navigable. `Shift+ArrowDown` activates the {@link #config-step} back trigger.\n * `Shift+ArrowUp` activates the {@link #config-step} forwards trigger.\n *\n * ```javascript\n * // minimal DateField config with date format specified\n * let dateField = new DateField({\n *   format: 'YYMMDD'\n * });\n * ```\n *\n * {@inlineexample Core/widget/DateField.js}\n *\n * @extends Core/widget/PickerField\n * @classtype datefield\n * @classtypealias date\n * @inputfield\n */\nexport default class DateField extends PickerField {\n    //region Config\n    static $name = 'DateField';\n    static type = 'datefield';\n    static alias = 'date';\n    static get configurable() {\n        return {\n            /**\n             * Get / set format for date displayed in field (see {@link Core.helper.DateHelper#function-format-static}\n             * for formatting options).\n             * @member {String} format\n             */\n            /**\n             * Format for date displayed in field. Defaults to using long date format, as defined by current locale (`L`)\n             * @config {String}\n             * @default\n             */\n            format : 'L',\n            /**\n             * A flag which indicates whether the date parsing should be strict - meaning if the date\n             * is missing a year/month/day part - parsing fails.\n             *\n             * Turned off by default, meaning default values are substituted for missing parts.\n             *\n             * @config {Boolean}\n             * @default\n             */\n            strictParsing : false,\n            // same for all languages\n            fallbackFormat : 'YYYY-MM-DD',\n            timeFormat     : 'HH:mm:ss:SSS',\n            /**\n             * A flag which indicates what time should be used for selected date.\n             * `false` by default which means time is reset to midnight.\n             *\n             * Possible options are:\n             * - `false` to reset time to midnight\n             * - `true` to keep original time value\n             * - `'17:00'` a string which is parsed automatically\n             * - `new Date(2020, 0, 1, 17)` a date object to copy time from\n             * - `'entered'` to keep time value entered by user (in case {@link #config-format} includes time info)\n             *\n             * @config {Boolean|Date|String}\n             * @default\n             */\n            keepTime : false,\n            /**\n             * Format for date in the {@link #config-picker}. Uses localized format per default\n             * @config {String}\n             */\n            pickerFormat : null,\n            /**\n             * Set to true to first clear time of the field's value before comparing it to the max value\n             * @internal\n             * @config {Boolean}\n             */\n            validateDateOnly : null,\n            triggers : {\n                expand : {\n                    cls     : 'b-icon-calendar',\n                    handler : 'onTriggerClick',\n                    weight  : 200\n                },\n                back : {\n                    cls     : 'b-icon b-icon-angle-left b-step-trigger',\n                    key     : 'Shift+ArrowDown',\n                    handler : 'onBackClick',\n                    align   : 'start',\n                    weight  : 100\n                },\n                forward : {\n                    cls     : 'b-icon b-icon-angle-right b-step-trigger',\n                    key     : 'Shift+ArrowUp',\n                    handler : 'onForwardClick',\n                    align   : 'end',\n                    weight  : 100\n                }\n            },\n            // An optional extra CSS class to add to the picker container element\n            calendarContainerCls : '',\n            /**\n             * Get/set min value, which can be a Date or a string. If a string is specified, it will be converted using\n             * the specified {@link #config-format}.\n             * @member {Date} min\n             * @accepts {String|Date}\n             */\n            /**\n             * Min value\n             * @config {String|Date}\n             */\n            min : null,\n            /**\n             * Get/set max value, which can be a Date or a string. If a string is specified, it will be converted using\n             * the specified {@link #config-format}.\n             * @member {Date} max\n             * @accepts {String|Date}\n             */\n            /**\n             * Max value\n             * @config {String|Date}\n             */\n            max : null,\n            /**\n             * The `step` property may be set in object form specifying two properties, `magnitude`, a Number, and\n             * `unit`, a String.\n             *\n             * If a Number is passed, the step's current unit is used (or `day` if no current step set) and just the\n             * magnitude is changed.\n             *\n             * If a String is passed, it is parsed by {@link Core.helper.DateHelper#function-parseDuration-static}, for\n             * example `'1d'`, `'1 d'`, `'1 day'`, or `'1 day'`.\n             *\n             * Upon read, the value is always returned in object form containing `magnitude` and `unit`.\n             * @member {DurationConfig} step\n             * @accepts {String|Number|DurationConfig}\n             */\n            /**\n             * Time increment duration value. If specified, `forward` and `back` triggers are displayed.\n             * The value is taken to be a string consisting of the numeric magnitude and the units.\n             * The units may be a recognised unit abbreviation of this locale or the full local unit name.\n             * For example `'1d'` or `'1w'` or `'1 week'`. This may be specified as an object containing\n             * two properties: `magnitude`, a Number, and `unit`, a String\n             * @config {String|Number|DurationConfig}\n             */\n            step : false,\n            stepTriggers : null,\n            /**\n             * The week start day in the {@link #config-picker}, 0 meaning Sunday, 6 meaning Saturday.\n             * Uses localized value per default.\n             * @config {Number}\n             */\n            weekStartDay : null,\n            /**\n             * A config object used to configure the {@link Core.widget.DatePicker datePicker}.\n             * ```javascript\n             * dateField = new DateField({\n             *      picker    : {\n             *          multiSelect : true\n             *      }\n             *  });\n             * ```\n             * @config {DatePickerConfig}\n             */\n            picker : {\n                type         : 'datepicker',\n                role         : 'dialog',\n                floating     : true,\n                scrollAction : 'realign',\n                align        : {\n                    align    : 't0-b0',\n                    axisLock : true\n                }\n            },\n            /**\n             * Get/set value, which can be set as a Date or a string but always returns a Date. If a string is\n             * specified, it will be converted using the specified {@link #config-format}\n             * @member {Date} value\n             * @accepts {String|Date}\n             */\n            /**\n             * Value, which can be a Date or a string. If a string is specified, it will be converted using the\n             * specified {@link #config-format}\n             * @config {String|Date}\n             */\n            value : null\n        };\n    }\n    //endregion\n    //region Init & destroy\n    /**\n     * Creates default picker widget\n     *\n     * @internal\n     */\n    changePicker(picker, oldPicker) {\n        const\n            me       = this,\n            defaults = {\n                owner        : me,\n                forElement   : me[me.pickerAlignElement],\n                minDate      : me.min,\n                maxDate      : me.max,\n                weekStartDay : me._weekStartDay, // need to pass the raw value to let the component to use its default value\n                align : {\n                    anchor : me.overlayAnchor,\n                    target : me[me.pickerAlignElement]\n                },\n                onSelectionChange : ({ selection, source : picker }) => {\n                    // We only care about what DatePicker does if it has been opened\n                    if (picker.isVisible) {\n                        me._isUserAction = me._isPickerInput = true;\n                        me.value = me.value ? DH.copyTimeValues(new Date(selection[0]), me.value) : new Date(selection[0]);\n                        me._isPickerInput = me._isUserAction = false;\n                        picker.hide();\n                    }\n                }\n            };\n        if (me.calendarContainerCls) {\n            defaults.cls = me.calendarContainerCls;\n        }\n        // If we are in cleared state, the picker will also have no value.\n        // But have it focused on today as a default.\n        if (me.value) {\n            defaults.value = me.value;\n        }\n        else {\n            defaults.activeDate = new Date();\n        }\n        const result = DatePicker.reconfigure(oldPicker, picker, {\n            owner : me,\n            defaults\n        });\n        // Cells must exist early\n        result?.refresh.flush();\n        return result;\n    }\n    //endregion\n    //region Click listeners\n    get backShiftDate() {\n        return DH.add(this.value, -1 * this._step.magnitude, this._step.unit);\n    }\n    onBackClick() {\n        const\n            me      = this,\n            { min } = me;\n        if (!me.readOnly && me.value) {\n            const newValue = me.backShiftDate;\n            if (!min || min.getTime() <= newValue) {\n                me._isUserAction = true;\n                me.value = newValue;\n                me._isUserAction = false;\n            }\n        }\n    }\n    get forwardShiftDate() {\n        return DH.add(this.value, this._step.magnitude, this._step.unit);\n    }\n    onForwardClick() {\n        const\n            me      = this,\n            { max } = me;\n        if (!me.readOnly && me.value) {\n            const newValue = me.forwardShiftDate;\n            if (!max || max.getTime() >= newValue) {\n                me._isUserAction = true;\n                me.value = newValue;\n                me._isUserAction = false;\n            }\n        }\n    }\n    //endregion\n    //region Toggle picker\n    showPicker(focusPicker) {\n        if (this.readOnly) {\n            return;\n        }\n        const\n            me           = this,\n            { _picker }  = me;\n        // If it's already instanced, navigate it to our date, or default of today.\n        // It will be initialized correctly if not.\n        if (_picker) {\n            // In case a subclass uses a min getter (which does not update our min value) - ensure picker is correctly configured\n            const pickerConfig = {\n                minDate : me.min,\n                maxDate : me.max\n            };\n            if (me.value) {\n                pickerConfig.value = me.value;\n            }\n            // If the field is cleared, show today's Calendar in the picker\n            // unless it's already been navigated elsewhere.\n            else if (!_picker.activeDate) {\n                pickerConfig.activeDate = new Date();\n            }\n            // Config dependencies are correctly processed by setConfig\n            _picker.setConfig(pickerConfig);\n        }\n        super.showPicker(focusPicker);\n    }\n    focusPicker() {\n        this.picker.focus();\n    }\n    //endregion\n    // region Validation\n    get isValid() {\n        const me  = this;\n        me.clearError('L{Field.minimumValueViolation}', true);\n        me.clearError('L{Field.maximumValueViolation}', true);\n        let value = me.value;\n        if (value) {\n            const { min, max, validateDateOnly } = me;\n            // Validation of the date should only care about the date part\n            if (validateDateOnly) {\n                value = DH.clearTime(value, false);\n            }\n            if (min && value < min) {\n                me.setError('L{Field.minimumValueViolation}', true);\n                return false;\n            }\n            if (max && value > max) {\n                me.setError('L{Field.maximumValueViolation}', true);\n                return false;\n            }\n        }\n        return super.isValid;\n    }\n    //endregion\n    //region Getters/setters\n    transformDateValue(value, checkBounds = true) {\n        const me = this;\n        if (value != null) {\n            if (!DH.isDate(value)) {\n                if (typeof value === 'string') {\n                    // If date cannot be parsed with set format, try fallback - the more general one\n                    value = DH.parse(value, me.format, me.strictParsing) || DH.parse(value, me.fallbackFormat, me.strictParsing);\n                }\n                else {\n                    value = new Date(value);\n                }\n            }\n            // We insist on a *valid* Date as the value\n            if (DH.isValidDate(value)) {\n                if (checkBounds && (!me.min || (value - me.min > -DH.MS_PER_DAY)) && (!me.max || value <= me.max)) {\n                    return me.transformTimeValue(value);\n                }\n                return value;\n            }\n        }\n        return null;\n    }\n    transformTimeValue(value) {\n        const\n            me = this,\n            { keepTime } = me;\n        value = DH.clone(value);\n        if (!keepTime) {\n            DH.clearTime(value, false);\n        }\n        // change time if keepTime !== 'entered'\n        else if (keepTime !== 'entered' && keepTime !== true) {\n            const timeValue = DH.parse(keepTime, me.timeFormat);\n            // if this.keepTime is a valid date or a string describing valid time copy from it\n            if (DH.isValidDate(timeValue)) {\n                DH.copyTimeValues(value, timeValue);\n            }\n            // otherwise try to copy from the current value\n            else if (DH.isValidDate(me.value)) {\n                DH.copyTimeValues(value, me.value);\n            }\n        }\n        // if keepTime === 'entered' and picker is used apply current value time\n        else if (keepTime === true && (me._isPickerInput || me.inputting) && DH.isValidDate(me.value)) {\n            DH.copyTimeValues(value, me.value);\n        }\n        // else don't change time\n        return value;\n    }\n    changeMin(value) {\n        return this.transformDateValue(value, false);\n    }\n    updateMin(min) {\n        const { input, _picker } = this;\n        if (input) {\n            if (min == null) {\n                input.removeAttribute('min');\n            }\n            else {\n                input.min = min;\n            }\n        }\n        // See if our lazy config has been realized...\n        if (_picker) {\n            _picker.minDate = min;\n        }\n        this.syncInvalid();\n    }\n    changeMax(value) {\n        return this.transformDateValue(value, false);\n    }\n    updateMax(max) {\n        const { input, _picker } = this;\n        if (input) {\n            if (max == null) {\n                input.removeAttribute('max');\n            }\n            else {\n                input.max = max;\n            }\n        }\n        if (_picker) {\n            _picker.maxDate = max;\n        }\n        this.syncInvalid();\n    }\n    get weekStartDay() {\n        // This trick allows our weekStartDay to float w/the locale even if the locale changes\n        return typeof this._weekStartDay === 'number' ? this._weekStartDay : DH.weekStartDay;\n    }\n    updateWeekStartDay(weekStartDay) {\n        if (this._picker) {\n            this._picker.weekStartDay = weekStartDay;\n        }\n    }\n    changeValue(value, oldValue) {\n        const\n            me = this,\n            newValue = me.transformDateValue(value);\n        // A value we could not parse\n        if (value && !newValue) {\n            // setError uses localization\n            me.setError('L{invalidDate}');\n            return;\n        }\n        me.clearError('L{invalidDate}');\n        // Reject non-change\n        if (me.hasChanged(oldValue, newValue)) {\n            return super.changeValue(newValue, oldValue);\n        }\n        // But we must fix up the display in case it was an unparseable string\n        // and the value therefore did not change.\n        if (!me.inputting) {\n            me.syncInputFieldValue();\n        }\n    }\n    updateValue(value, oldValue) {\n        const picker = this._picker;\n        if (picker && !this.inputting) {\n            picker.value = picker.activeDate = value;\n        }\n        super.updateValue(value, oldValue);\n    }\n    changeStep(value, was) {\n        const type = typeof value;\n        if (!value) {\n            return null;\n        }\n        if (type === 'number') {\n            value = {\n                magnitude : Math.abs(value),\n                unit      : was ? was.unit : 'day'\n            };\n        }\n        else if (type === 'string') {\n            value = DH.parseDuration(value);\n        }\n        if (value && value.unit && value.magnitude) {\n            if (value.magnitude < 0) {\n                value = {\n                    magnitude : -value.magnitude,  // Math.abs\n                    unit      : value.unit\n                };\n            }\n            return value;\n        }\n    }\n    updateStep(value) {\n        // If a step is configured, show the steppers\n        this.element.classList[value ? 'remove' : 'add']('b-no-steppers');\n        this.syncInvalid();\n    }\n    hasChanged(oldValue, newValue) {\n        // if both dates are provided and the field does not has time info in its format\n        if (oldValue?.getTime && newValue?.getTime && this.keepTime !== 'entered' && this.keepTime !== true) {\n            // Only compare date part\n            return !DH.isEqual(DH.clearTime(oldValue), DH.clearTime(newValue));\n        }\n        return super.hasChanged(oldValue && oldValue.getTime(), newValue && newValue.getTime());\n    }\n    get inputValue() {\n        // Do not use the _value property. If called during configuration, this\n        // will import the configured value from the config object.\n        const date = this.value;\n        return date ? DH.format(date, this.format) : '';\n    }\n    updateFormat() {\n        if (!this.isConfiguring) {\n            this.syncInputFieldValue(true);\n        }\n    }\n    //endregion\n    //region Localization\n    updateLocalization() {\n        super.updateLocalization();\n        this.syncInputFieldValue(true);\n    }\n    //endregion\n    //region Other\n    internalOnKeyEvent(event) {\n        super.internalOnKeyEvent(event);\n        if (event.key === 'Enter' && this.isValid) {\n            this.picker.hide();\n        }\n    }\n    //endregion\n}\n// Register this widget type with its Factory\nDateField.initClass();\nDateField._$name = 'DateField';", "import Field from './Field.js';\nimport NumberFormat from '../helper/util/NumberFormat.js';\nimport EventHelper from '../helper/EventHelper.js';\nimport BrowserHelper from '../helper/BrowserHelper.js';\n/**\n * @module Core/widget/NumberField\n */\nconst preventDefault = e => e.ctrlKey && e.preventDefault();\n/**\n * Number field widget. Similar to native `<input type=\"number\">`, but implemented as `<input type=\"text\">` to support\n * formatting.\n *\n * This field can be used as an {@link Grid/column/Column#config-editor} for the {@link Grid/column/Column}.\n * It is used as the default editor for the {@link Grid/column/NumberColumn},\n * {@link Grid/column/PercentColumn}, {@link Grid/column/AggregateColumn}.\n *\n * ```javascript\n * const number = new NumberField({\n *     min   : 1,\n *     max   : 5,\n *     value : 3\n * });\n * ```\n *\n * Provide a {@link Core/helper/util/NumberFormat} config as {@link #config-format} to be able to show currency. For\n * example:\n *\n * ```javascript\n * new NumberField({\n *   format : {\n *      style    : 'currency',\n *      currency : 'USD'\n *   }\n * });\n * ```\n *\n * {@inlineexample Core/widget/NumberField.js}\n *\n * @extends Core/widget/Field\n * @classtype numberfield\n * @classtypealias number\n * @inputfield\n */\nexport default class NumberField extends Field {\n    //region Config\n    static $name = 'NumberField';\n    static type = 'numberfield';\n    static alias = 'number';\n    static get configurable() {\n        return {\n            /**\n             * Reset to min value when max value is reached using steppers, and vice-versa.\n             * @config {Boolean}\n             * @default false\n             */\n            wrapAround : null,\n            /**\n             * Min value\n             * @config {Number}\n             */\n            min : null,\n            /**\n             * Max value\n             * @config {Number}\n             */\n            max : null,\n            /**\n             * Step size for spin button clicks.\n             * @member {Number} step\n             */\n            /**\n             * Step size for spin button clicks. Also used when pressing up/down keys in the field.\n             * @config {Number}\n             * @default\n             */\n            step : 1,\n            /**\n             * Large step size, defaults to 10 * `step`. Applied when pressing SHIFT and stepping either by click or\n             * using keyboard.\n             * @config {Number}\n             * @default 10\n             */\n            largeStep : 0,\n            /**\n             * Initial value\n             * @config {Number}\n             */\n            value : null,\n            /**\n             * The format to use for rendering numbers.\n             *\n             * For example:\n             * ```\n             *  format: '9,999.00##'\n             * ```\n             * The above enables digit grouping and will display at least 2 (but no more than 4) fractional digits.\n             * @config {String|NumberFormatConfig}\n             * @default\n             */\n            format : '',\n            /**\n             * The number of decimal places to allow. Defaults to no constraint.\n             *\n             * This config has been replaced by {@link #config-format}. Instead of this:\n             *```\n             *  decimalPrecision : 3\n             *```\n             * Use `format`:\n             *```\n             *  format : '9.###'\n             *```\n             * To set both `decimalPrecision` and `leadingZeroes` (say to `3`), do this:\n             *```\n             *  format : '3>9.###'\n             *```\n             * @config {Number}\n             * @default\n             * @deprecated Since 3.1. Use {@link #config-format} instead.\n             */\n            decimalPrecision : null,\n            /**\n             * The maximum number of leading zeroes to show. Defaults to no constraint.\n             *\n             * This config has been replaced by {@link #config-format}. Instead of this:\n             *```\n             *  leadingZeros : 3\n             *```\n             * Use `format`:\n             *```\n             *  format : '3>9'\n             *```\n             * To set both `leadingZeroes` and `decimalPrecision` (say to `2`), do this:\n             *```\n             *  format : '3>9.##'\n             *```\n             * @config {Number}\n             * @default\n             * @deprecated Since 3.1. Use {@link #config-format} instead.\n             */\n            leadingZeroes : null,\n            triggers : {\n                spin : {\n                    type : 'spintrigger'\n                }\n            },\n            /**\n             * Controls how change events are triggered when stepping the value up or down using either spinners or\n             * arrow keys.\n             *\n             * Configure with:\n             * * `true` to trigger a change event per step\n             * * `false` to not trigger change while stepping. Will trigger on blur/Enter\n             * * A number of milliseconds to buffer the change event, triggering when no steps are performed during that\n             *   period of time.\n             *\n             * @config {Boolean|Number}\n             * @default\n             */\n            changeOnSpin : true,\n            // NOTE: using type=\"number\" has several trade-offs:\n            //\n            // Negatives:\n            //   - No access to caretPos/textSelection. This causes anomalies when replacing\n            //     the input value with a formatted version of that value (the caret moves to\n            //     the end of the input el on each character typed).\n            //   - The above also prevents Siesta/synthetic events from mimicking typing.\n            //   - Thousand separators cannot be displayed (input.value = '1,000' throws an\n            //     exception).\n            // Positives:\n            //   - On mobile, the virtual keyboard only shows digits et al.\n            //   - validity property on DOM node that handles min/max checks.\n            //\n            // The above may not be exhaustive, but there is not a compelling reason to\n            // use type=\"number\" except on mobile.\n            /**\n             * This can be set to `'number'` to enable the numeric virtual keyboard on\n             * mobile devices. Doing so limits this component's ability to handle keystrokes\n             * and format properly as the user types, so this is not recommended for\n             * desktop applications. This will also limit similar features of automated\n             * testing tools that mimic user input.\n             * @config {String}\n             * @default text\n             */\n            inputType : null\n        };\n    }\n    //endregion\n    //region Init\n    construct(config) {\n        super.construct(config);\n        const me = this;\n        // Support for selecting all by double click in empty input area\n        // Browsers work differently at this case\n        me.input.addEventListener('dblclick', () => {\n            me.select();\n        });\n        if (typeof me.changeOnSpin === 'number') {\n            me.bufferedSpinChange = me.buffer(me.triggerChange, me.changeOnSpin);\n        }\n    }\n    //endregion\n    //region Internal functions\n    acceptValue(value, rawValue) {\n        let accept = !isNaN(value);\n        // https://github.com/bryntum/support/issues/1349\n        // Pass through if there is a text selection in the field. This fixes the case when\n        // valid value is typed already and we are replacing it by selecting complete string and typing over it.\n        // Cannot be tested in siesta, see ticket for more info.\n        if (accept && !this.hasTextSelection) {\n            accept = false;\n            const\n                raw = this.input.value,\n                current = parseFloat(raw);\n            if (raw !== rawValue) {\n                // The new value is out of range, but we accept it if the current value\n                // is also problematic. Consider the case where the input is empty and the\n                // minimum value is 100. The user must first type \"1\" and we must accept it\n                // if they are to get the opportunity to type the \"0\"s.\n                accept = !this.acceptValue(current, raw);\n                // Also, if we are checking the current value, be sure not to infinitely\n                // recurse here.\n            }\n        }\n        return accept;\n    }\n    okMax(value) {\n        return isNaN(this.max) || value <= this.max;\n    }\n    okMin(value) {\n        return isNaN(this.min) || value >= this.min;\n    }\n    internalOnKeyEvent(e) {\n        if (e.type === 'keydown') {\n            const\n                me = this,\n                key = e.key;\n            let block;\n            // Native arrow key spin behaviour differs between browsers, so we replace\n            // the native spinners w/our own triggers and handle arrows keys as well.\n            if (key === 'ArrowUp') {\n                me.doSpinUp(e.shiftKey);\n                block = true;\n            }\n            else if (key === 'ArrowDown') {\n                me.doSpinDown(e.shiftKey);\n                block = true;\n            }\n            else if (!e.altKey && !e.ctrlKey && key && key.length === 1) {\n                // The key property contains the character or key name... so ignore\n                // keys that aren't a single character.\n                const\n                    after      = me.getAfterValue(key),\n                    afterValue = me.formatter.parseStrict(after),\n                    // no need to check if typing same value or - if negative numbers are allowed\n                    accepted   = afterValue === me.value || (after === '-' && (isNaN(me.min) || me.min < 0));\n                block = !accepted && !me.acceptValue(afterValue, after);\n            }\n            if (key === 'Enter' && me._changedBySilentSpin) {\n                me.triggerChange(e, true);\n                // reset the flag\n                me._changedBySilentSpin = false;\n            }\n            if (block) {\n                e.preventDefault();\n            }\n        }\n        super.internalOnKeyEvent(e);\n    }\n    doSpinUp(largeStep = false) {\n        const me = this;\n        if (me.readOnly) {\n            return;\n        }\n        let newValue = (me.value || 0) + (largeStep ? me.largeStep : me.step);\n        if (!me.okMin(newValue)) {\n            newValue = me.min;\n        }\n        if (me.okMax(newValue)) {\n            me.applySpinChange(newValue);\n        }\n        else if (me.wrapAround) {\n            newValue = me.min;\n            me.applySpinChange(newValue);\n        }\n    }\n    doSpinDown(largeStep = false) {\n        const me = this;\n        if (me.readOnly) {\n            return;\n        }\n        let newValue = (me.value || 0) - (largeStep ? me.largeStep : me.step);\n        if (!me.okMax(newValue)) {\n            newValue = me.max;\n        }\n        if (me.okMin(newValue)) {\n            me.applySpinChange(newValue);\n        }\n        else if (me.wrapAround) {\n            newValue = me.max;\n            me.applySpinChange(newValue);\n        }\n    }\n    applySpinChange(newValue) {\n        const me = this;\n        me._isUserAction = true;\n        // Should not trigger change immediately?\n        if (me.changeOnSpin !== true) {\n            me._changedBySilentSpin = true;\n            // Silence the change\n            me.silenceChange = true;\n            // Optionally buffer the change\n            me.bufferedSpinChange && me.bufferedSpinChange(null, true);\n        }\n        me.value = newValue;\n        me._isUserAction = false;\n        me.silenceChange = false;\n    }\n    triggerChange() {\n        if (!this.silenceChange) {\n            super.triggerChange(...arguments);\n        }\n    }\n    onFocusOut(e) {\n        super.onFocusOut(...arguments);\n        const\n            me = this,\n            { input } = me,\n            raw = input.value,\n            value = me.formatter.truncate(raw),\n            formatted = isNaN(value) ? raw : me.formatValue(value);\n        // Triggers may have been reconfigured\n        me.triggers?.spin?.clickRepeater?.cancel();\n        me.lastTouchmove = null;\n        if (raw !== formatted) {\n            input.value = formatted;\n        }\n        if (me._changedBySilentSpin) {\n            me.triggerChange(e, true);\n            // reset the flag\n            me._changedBySilentSpin = false;\n        }\n    }\n    internalOnInput(event) {\n        const\n            me = this,\n            { formatter, input } = me,\n            { parser, maximumFractionDigits } = formatter,\n            raw = input.value,\n            decimals = parser.decimalPlaces(raw);\n        if (formatter.truncator && decimals > maximumFractionDigits) {\n            let value = raw,\n                valueDecimals;\n            const trunc = formatter.truncate(raw);\n            if (!isNaN(trunc)) {\n                value = me.formatValue(trunc);\n                valueDecimals = parser.decimalPlaces(value);\n                if (valueDecimals < maximumFractionDigits) {\n                    value += '0'.repeat(maximumFractionDigits - valueDecimals);\n                    valueDecimals = maximumFractionDigits;\n                }\n                if (valueDecimals < decimals) {\n                    // If typing (or pasting) has caused truncation, reset. To best preserve the caret pos (which is\n                    // reset by assigning input.value), we grab and restore the distance from the end. This allows\n                    // special things to format into the string (such as thousands separators) since they always go to\n                    // the front of the input.\n                    const pos = raw.length - me.caretPos;\n                    input.value = value;\n                    me.caretPos = value.length - pos + 1;\n                }\n            }\n        }\n        super.internalOnInput(event);\n    }\n    formatValue(value) {\n        return this.formatter.format(value);\n    }\n    changeFormat(format) {\n        const me = this;\n        if (format === '') {\n            const { leadingZeroes, decimalPrecision } = me;\n            format = leadingZeroes ? `${leadingZeroes}>9` : null;\n            if (decimalPrecision != null) {\n                format = `${format || ''}9.${'#'.repeat(decimalPrecision)}`;\n            }\n            else if (format) {\n                // When we only have leadingZeroes, we'll have a format like \"4>9\", but\n                // that will default to 3 decimal digits. Prior behavior implied no limit\n                // on decimal digits unless decimalPrecision was specified.\n                format += '.*';\n            }\n        }\n        return format;\n    }\n    get formatter() {\n        const\n            me = this,\n            format = me.format;\n        let formatter = me._formatter;\n        if (!formatter || me._lastFormat !== format) {\n            formatter = NumberFormat.get(me._lastFormat = format);\n            me._formatter = formatter;\n        }\n        return formatter;\n    }\n    //endregion\n    //region Getters/Setters\n    updateStep(step) {\n        const me = this;\n        me.element.classList.toggle('b-hide-spinner', !step);\n        me._step = step;\n        if (step && BrowserHelper.isMobile) {\n            if (!me.touchMoveListener) {\n                me.touchMoveListener = EventHelper.on({\n                    element   : me.input,\n                    touchmove : 'onInputSwipe',\n                    thisObj   : me,\n                    throttled : {\n                        buffer : 150,\n                        alt    : preventDefault\n                    }\n                });\n            }\n        }\n        else {\n            me.touchMoveListener?.();\n        }\n    }\n    onInputSwipe(e) {\n        const { lastTouchmove } = this;\n        if (lastTouchmove) {\n            const\n                // Swipe right/up means spin up, left/down means spin down\n                deltaX = e.screenX - lastTouchmove.screenX,\n                deltaY = lastTouchmove.screenY - e.screenY,\n                delta  = Math.abs(deltaX) > Math.abs(deltaY) ? deltaX : deltaY;\n            this[`doSpin${delta > 0 ? 'Up' : 'Down'}`]();\n        }\n        // Disable touch-scrolling\n        e.preventDefault();\n        this.lastTouchmove = e;\n    }\n    changeLargeStep(largeStep) {\n        return largeStep || (this.step * 10);\n    }\n    get validity() {\n        const\n            value    = this.value,\n            validity = {};\n        // Assert range for non-empty fields, empty fields will turn invalid if `required: true`\n        if (value != null) {\n            validity.rangeUnderflow = !this.okMin(value);\n            validity.rangeOverflow = !this.okMax(value);\n        }\n        validity.valid = !validity.rangeUnderflow && !validity.rangeOverflow;\n        return validity;\n    }\n    /**\n     * Get/set the NumberField's value, or `undefined` if the input field is empty\n     * @property {Number}\n     */\n    changeValue(value, was) {\n        const me = this;\n        if (value || value === 0) {\n            let valueIsNaN;\n            // We insist on a number as the value\n            if (typeof value !== 'number') {\n                value = (typeof value === 'string') ? me.formatter.parse(value) : Number(value);\n                valueIsNaN = isNaN(value);\n                if (valueIsNaN) {\n                    value = '';\n                }\n            }\n            if (!valueIsNaN && me.format) {\n                value = me.formatter.round(value);\n            }\n        }\n        else {\n            value = undefined;\n        }\n        return super.changeValue(value, was);\n    }\n    get inputValue() {\n        let value = this.value;\n        if (value != null && this.format) {\n            value = this.formatValue(value);\n        }\n        return value;\n    }\n    //endregion\n}\n// Register this widget type with its Factory\nNumberField.initClass();\nNumberField._$name = 'NumberField';", "// Needs to be a panel for focus management in Safari\nimport Panel from './Panel.js';\nimport DateHelper from '../helper/DateHelper.js';\nimport './ButtonGroup.js';\nimport './NumberField.js';\n/**\n * @module Core/widget/TimePicker\n */\n/**\n * A Panel which displays hour and minute number fields and AM/PM switcher buttons for 12 hour time format.\n *\n * ```javascript\n * new TimeField({\n *     label     : 'Time field',\n *     appendTo  : document.body,\n *     // Configure the time picker\n *     picker    : {\n *         items : {\n *             minute : {\n *                 step : 5\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * ## Contained widgets\n *\n * The default widgets contained in this picker are:\n *\n * | Widget ref | Type                            | Description                             |\n * |------------|---------------------------------|-----------------------------------------|\n * | `hour`     | {@link Core.widget.NumberField} | The hour field                          |\n * | `minute`   | {@link Core.widget.NumberField} | The minute field                        |\n * | `second`   | {@link Core.widget.NumberField} | The second field                        |\n * | `amPm`     | {@link Core.widget.ButtonGroup} | ButtonGroup holding the am & pm buttons |\n * | `amButton` | {@link Core.widget.Button}      | The am button                           |\n * | `pmButton` | {@link Core.widget.Button}      | The pm button                           |\n *\n * This class is not intended for use in applications. It is used internally by the {@link Core.widget.TimeField} class.\n *\n * @extends Core/widget/Panel\n * @classtype timepicker\n * @widget\n */\nexport default class TimePicker extends Panel {\n    //region Config\n    static $name = 'TimePicker';\n    static type = 'timepicker';\n    static configurable = {\n        floating : true,\n        layout   : 'hbox',\n        items    : {\n            hour : {\n                label                   : 'L{TimePicker.hour}',\n                type                    : 'number',\n                min                     : 0,\n                max                     : 23,\n                highlightExternalChange : false,\n                format                  : '2>9',\n                wrapAround              : true\n            },\n            minute : {\n                label                   : 'L{TimePicker.minute}',\n                type                    : 'number',\n                min                     : 0,\n                max                     : 59,\n                highlightExternalChange : false,\n                format                  : '2>9',\n                wrapAround              : true\n            },\n            second : {\n                hidden                  : true,\n                label                   : 'L{TimePicker.second}',\n                type                    : 'number',\n                min                     : 0,\n                max                     : 59,\n                highlightExternalChange : false,\n                format                  : '2>9',\n                wrapAround              : true\n            },\n            amPm : {\n                type  : 'buttongroup',\n                items : {\n                    amButton : {\n                        type        : 'button',\n                        text        : 'AM',\n                        toggleGroup : 'am-pm',\n                        cls         : 'b-blue',\n                        onClick     : 'up.onAmPmButtonClick'\n                    },\n                    pmButton : {\n                        type        : 'button',\n                        text        : 'PM',\n                        toggleGroup : 'am-pm',\n                        cls         : 'b-blue',\n                        onClick     : 'up.onAmPmButtonClick'\n                    }\n                }\n            }\n        },\n        autoShow : false,\n        trapFocus : true,\n        /**\n         * By default the seconds field is not displayed. If you require seconds to be visible,\n         * configure this as `true`\n         * @config {Boolean}\n         * @default false\n         */\n        seconds : null,\n        /**\n         * Time value, which can be a Date or a string. If a string is specified, it will be converted using the\n         * specified {@link #config-format}\n         * @prp {Date}\n         * @accepts {Date|String}\n         */\n        value : {\n            $config : {\n                equal : 'date'\n            },\n            value : null\n        },\n        /**\n         * Time format. Used to set appropriate 12/24 hour format to display.\n         * See {@link Core.helper.DateHelper#function-format-static DateHelper} for formatting options.\n         * @prp {String}\n         */\n        format : null,\n        /**\n         * Max value, which can be a Date or a string. If a string is specified, it will be converted using the\n         * specified {@link #config-format}\n         * @prp {Date}\n         * @accepts {Date|String}\n         */\n        max : null,\n        /**\n         * Min value, which can be a Date or a string. If a string is specified, it will be converted using the\n         * specified {@link #config-format}\n         * @prp {Date}\n         * @accepts {Date|String}\n         */\n        min : null,\n        /**\n         * Initial value, which can be a Date or a string. If a string is specified, it will be converted using the\n         * specified {@link #config-format}. Initial value is restored on Escape click\n         * @member {Date} initialValue\n         * @accepts {Date|String}\n         */\n        initialValue : null // Not documented as config on purpose, API was that way\n    };\n    //endregion\n    //region Init\n    construct(config) {\n        super.construct(config);\n        this.refresh();\n    }\n    updateSeconds(seconds) {\n        this.widgetMap.second[seconds ? 'show' : 'hide']();\n    }\n    //endregion\n    //region Event listeners\n    // Automatically called by Widget's triggerFieldChange which announces changes to all ancestors\n    onFieldChange() {\n        if (!this.isConfiguring && !this.isRefreshing) {\n            this.value = this.pickerToTime();\n        }\n    }\n    onAmPmButtonClick({ source }) {\n        this._pm = source.ref === 'pmButton';\n        if (this._value) {\n            this.value = this.pickerToTime();\n        }\n    }\n    onInternalKeyDown(keyEvent) {\n        const me = this;\n        switch (keyEvent.key) {\n            case 'Escape':\n                // Support for undefined initial time\n                me.triggerTimeChange(me._initialValue);\n                me.hide();\n                keyEvent.preventDefault();\n                return;\n            case 'Enter':\n                me.value = me.pickerToTime();\n                me.hide();\n                keyEvent.preventDefault();\n                return;\n        }\n        super.onInternalKeyDown?.(keyEvent);\n    }\n    //endregion\n    //region Internal functions\n    pickerToTime() {\n        const\n            me               = this,\n            pm               = me._pm,\n            { hour, minute, second } = me.widgetMap;\n        hour.format = me._is24Hour ? '2>9' : null;\n        let hours    = hour.value,\n            newValue = new Date(me.value);\n        if (!me._is24Hour) {\n            if (pm && hours < 12) hours = hours + 12;\n            if (!pm && hours === 12) hours = 0;\n        }\n        newValue.setHours(hours);\n        newValue.setMinutes(minute.value);\n        if (me.seconds) {\n            newValue.setSeconds(second.value);\n        }\n        if (me._min) {\n            newValue = DateHelper.max(me._min, newValue);\n        }\n        if (me._max) {\n            newValue = DateHelper.min(me._max, newValue);\n        }\n        return newValue;\n    }\n    triggerTimeChange(time) {\n        /**\n         * Fires when a time is changed.\n         * @event timeChange\n         * @param {Date} time The selected time.\n         */\n        this.trigger('timeChange', { time });\n    }\n    //endregion\n    //region Getters / Setters\n    updateInitialValue(initialValue) {\n        this.value = initialValue;\n    }\n    changeValue(value) {\n        if (value) {\n            value = typeof value === 'string' ? DateHelper.parse(value, this.format) : value;\n        }\n        if (!this.isVisible) {\n            this._initialValue = value;\n        }\n        return value ?? DateHelper.getTime(0);\n    }\n    updateValue(value) {\n        if (this.isVisible) {\n            this.triggerTimeChange(value);\n        }\n        this.refresh();\n    }\n    updateFormat(format) {\n        this._is24Hour = DateHelper.is24HourFormat(format);\n        this.refresh();\n    }\n    changeMin(min) {\n        return typeof min === 'string' ? DateHelper.parse(min, this.format) : min;\n    }\n    changeMax(max) {\n        return typeof max === 'string' ? DateHelper.parse(max, this.format) : max;\n    }\n    //endregion\n    //region Display\n    refresh() {\n        const me = this;\n        if (!me.isConfiguring && me.value) {\n            me.isRefreshing = true;\n            const\n                { hour, minute, second, amButton, pmButton } = me.widgetMap,\n                time                                 = me.value,\n                is24                                 = me._is24Hour,\n                hours                                = time.getHours(),\n                pm                                   = me._pm = hours >= 12;\n            me.element.classList[is24 ? 'add' : 'remove']('b-24h');\n            hour.min         = is24 ? 0 : 1;\n            hour.max         = is24 ? 23 : 12;\n            hour.value       = is24 ? hours : (hours % 12) || 12;\n            minute.value     = time.getMinutes();\n            second.value     = time.getSeconds();\n            amButton.pressed = !pm;\n            pmButton.pressed = pm;\n            amButton.hidden  = pmButton.hidden = is24;\n            me.isRefreshing  = false;\n        }\n    }\n    //endregion\n}\n// Register this widget type with its Factory\nTimePicker.initClass();\nTimePicker._$name = 'TimePicker';", "import DH from '../helper/DateHelper.js';\nimport PickerField from './PickerField.js';\nimport TimePicker from './TimePicker.js';\n/**\n * @module Core/widget/TimeField\n */\n/**\n * The time field widget is a text input field with a time picker drop down. It shows left/right arrows to increase or\n * decrease time by the {@link #config-step step value}.\n *\n * This field can be used as an {@link Grid.column.Column#config-editor editor} for the {@link Grid.column.Column Column}.\n * It is used as the default editor for the {@link Grid.column.TimeColumn TimeColumn}.\n *\n * ## Configuring the picker hour / minute fields\n *\n * You can easily configure the fields in the drop-down picker, to control the increment of the up/down step arrows:\n *\n * ```javascript\n * new TimeField({\n *     label     : 'Time field',\n *     appendTo  : document.body,\n *     picker    : {\n *         items : {\n *             minute : {\n *                 step : 5\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * This widget may be operated using the keyboard. `ArrowDown` opens the time picker, which itself\n * is keyboard navigable. `Shift+ArrowDown` activates the {@link #config-step} back trigger.\n * `Shift+ArrowUp` activates the {@link #config-step} forwards trigger.\n *\n * ```javascript\n * let field = new TimeField({\n *   format: 'HH'\n * });\n * ```\n *\n * {@inlineexample Core/widget/TimeField.js}\n *\n * @extends Core/widget/PickerField\n * @classtype timefield\n * @classtypealias time\n * @inputfield\n */\nexport default class TimeField extends PickerField {\n    //region Config\n    static $name = 'TimeField';\n    static type = 'timefield';\n    static alias = 'time';\n    static get configurable() {\n        return {\n            picker : {\n                type  : 'timepicker',\n                align : {\n                    align    : 't0-b0',\n                    axisLock : true\n                }\n            },\n            /**\n             * Get/Set format for time displayed in field (see {@link Core.helper.DateHelper#function-format-static}\n             * for formatting options).\n             * @member {String} format\n             */\n            /**\n             * Format for date displayed in field (see Core.helper.DateHelper#function-format-static for formatting\n             * options).\n             * @config {String}\n             * @default\n             */\n            format : 'LT',\n            triggers : {\n                expand : {\n                    align   : 'end',\n                    handler : 'onTriggerClick',\n                    compose : () => ({\n                        children : [{\n                            class : {\n                                'b-icon-clock-live' : 1\n                            }\n                        }]\n                    })\n                },\n                back : {\n                    align   : 'start',\n                    cls     : 'b-icon b-icon-angle-left b-step-trigger',\n                    key     : 'Shift+ArrowDown',\n                    handler : 'onBackClick'\n                },\n                forward : {\n                    align   : 'end',\n                    cls     : 'b-icon b-icon-angle-right b-step-trigger',\n                    key     : 'Shift+ArrowUp',\n                    handler : 'onForwardClick'\n                }\n            },\n            /**\n             * Get/set min value, which can be a Date or a string. If a string is specified, it will be converted using\n             * the specified {@link #config-format}.\n             * @member {Date} min\n             * @accepts {String|Date}\n             */\n            /**\n             * Min time value\n             * @config {String|Date}\n             */\n            min : null,\n            /**\n             * Get/set max value, which can be a Date or a string. If a string is specified, it will be converted using\n             * the specified {@link #config-format}.\n             * @member {Date} max\n             * @accepts {String|Date}\n             */\n            /**\n             * Max time value\n             * @config {String|Date}\n             */\n            max : null,\n            /**\n             * The `step` property may be set in Object form specifying two properties, `magnitude`, a Number, and\n             * `unit`, a String.\n             *\n             * If a Number is passed, the steps's current unit is used and just the magnitude is changed.\n             *\n             * If a String is passed, it is parsed by {@link Core.helper.DateHelper#function-parseDuration-static}, for\n             * example `'5m'`, `'5 m'`, `'5 min'`, `'5 minutes'`.\n             *\n             * Upon read, the value is always returned in object form containing `magnitude` and `unit`.\n             * @member {DurationConfig} step\n             * @accepts {String|Number|DurationConfig}\n             */\n            /**\n             * Time increment duration value. Defaults to 5 minutes.\n             * The value is taken to be a string consisting of the numeric magnitude and the units.\n             * The units may be a recognised unit abbreviation of this locale or the full local unit name.\n             * For example `\"10m\"` or `\"5min\"` or `\"2 hours\"`\n             * @config {String}\n             */\n            step : '5m',\n            stepTriggers : null,\n            /**\n             * Get/set value, which can be a Date or a string. If a string is specified, it will be converted using the\n             * specified {@link #config-format}.\n             * @member {Date} value\n             * @accepts {String|Date}\n             */\n            /**\n             * Value, which can be a Date or a string. If a string is specified, it will be converted using the\n             * specified {@link #config-format}\n             * @config {String|Date}\n             */\n            value : null,\n            /**\n             * Set to true to not clean up the date part of the passed value. Set to false to reset the date part to\n             * January 1st\n             * @prp {Boolean}\n             * @default\n             */\n            keepDate : false\n        };\n    }\n    //endregion\n    //region Init & destroy\n    changePicker(picker, oldPicker) {\n        const me = this;\n        return TimePicker.reconfigure(oldPicker, picker, {\n            owner : me,\n            defaults : {\n                value      : me.value,\n                forElement : me[me.pickerAlignElement],\n                owner      : me,\n                align      : {\n                    anchor : me.overlayAnchor,\n                    target : me[me.pickerAlignElement]\n                },\n                onTimeChange({ time }) {\n                    me._isUserAction = true;\n                    me.value = time;\n                    me._isUserAction = false;\n                }\n            }\n        });\n    }\n    //endregion\n    //region Click listeners\n    onBackClick() {\n        const\n            me      = this,\n            { min } = me;\n        if (!me.readOnly && me.value) {\n            const newValue = DH.add(me.value, -1 * me.step.magnitude, me.step.unit);\n            if (!min || min.getTime() <= newValue) {\n                me._isUserAction = true;\n                me.value = newValue;\n                me._isUserAction = false;\n            }\n        }\n    }\n    onForwardClick() {\n        const\n            me      = this,\n            { max } = me;\n        if (!me.readOnly && me.value) {\n            const newValue = DH.add(me.value, me.step.magnitude, me.step.unit);\n            if (!max || max.getTime() >= newValue) {\n                me._isUserAction = true;\n                me.value = newValue;\n                me._isUserAction = false;\n            }\n        }\n    }\n    //endregion\n    // region Validation\n    get isValid() {\n        const me  = this;\n        me.clearError('L{Field.minimumValueViolation}', true);\n        me.clearError('L{Field.maximumValueViolation}', true);\n        let value = me.value;\n        if (value) {\n            value = value.getTime();\n            if (me._min && me._min.getTime() > value) {\n                me.setError('L{Field.minimumValueViolation}', true);\n                return false;\n            }\n            if (me._max && me._max.getTime() < value) {\n                me.setError('L{Field.maximumValueViolation}', true);\n                return false;\n            }\n        }\n        return super.isValid;\n    }\n    hasChanged(oldValue, newValue) {\n        if (oldValue?.getTime && newValue?.getTime) {\n            // Only care about the time part\n            return oldValue.getHours() !== newValue.getHours() ||\n                oldValue.getMinutes() !== newValue.getMinutes() ||\n                oldValue.getSeconds() !== newValue.getSeconds() ||\n                oldValue.getMilliseconds() !== newValue.getMilliseconds();\n        }\n        return super.hasChanged(oldValue, newValue);\n    }\n    //endregion\n    //region Toggle picker\n    /**\n     * Show picker\n     */\n    showPicker() {\n        const\n            me = this,\n            {\n                picker,\n                value\n            }  = me;\n        if (me.readOnly) {\n            return;\n        }\n        picker.value = value;\n        picker.format = me.format;\n        picker.maxTime = me.max;\n        picker.minTime = me.min;\n        // If we had no value initially.\n        if (!value) {\n            me.value = picker.value;\n        }\n        super.showPicker(true);\n    }\n    onPickerShow() {\n        super.onPickerShow();\n        // Remove PickerField key listener\n        this.pickerKeyDownRemover = this.pickerKeyDownRemover?.();\n    }\n    /**\n     * Focus time picker\n     */\n    focusPicker() {\n        this.picker.focus();\n    }\n    //endregion\n    //region Getters/setters\n    transformTimeValue(value) {\n        if (value != null) {\n            if (typeof value === 'string') {\n                value = DH.parse(value, this.format);\n                if (this.keepDate) {\n                    value = DH.copyTimeValues(new Date(this.value), value);\n                }\n            }\n            else {\n                value = new Date(value);\n            }\n            // We insist on a *valid* Time as the value\n            if (DH.isValidDate(value)) {\n                if (!this.keepDate) {\n                    // Clear date part back to zero so that all we have is the time part of the epoch.\n                    return DH.getTime(value);\n                }\n                else {\n                    return value;\n                }\n            }\n        }\n        return null;\n    }\n    changeMin(value) {\n        return this.transformTimeValue(value);\n    }\n    updateMin(value) {\n        const { input } = this;\n        if (input) {\n            if (value == null) {\n                input.removeAttribute('min');\n            }\n            else {\n                input.min = value;\n            }\n        }\n        this.syncInvalid();\n    }\n    changeMax(value) {\n        return this.transformTimeValue(value);\n    }\n    updateMax(value) {\n        const { input } = this;\n        if (input) {\n            if (value == null) {\n                input.removeAttribute('max');\n            }\n            else {\n                input.max = value;\n            }\n        }\n        this.syncInvalid();\n    }\n    changeValue(value, was) {\n        const\n            me = this,\n            newValue = me.transformTimeValue(value);\n        // A value we could not parse\n        if (value && !newValue || (me.isRequired && value === '')) {\n            // setError uses localization\n            me.setError('L{invalidTime}');\n            return;\n        }\n        me.clearError('L{invalidTime}');\n        // Reject non-change\n        if (me.hasChanged(was, newValue)) {\n            return super.changeValue(newValue, was);\n        }\n        // But we must fix up the display in case it was an unparseable string\n        // and the value therefore did not change.\n        if (!me.inputting) {\n            me.syncInputFieldValue(true);\n        }\n    }\n    updateValue(value, was) {\n        const { expand } = this.triggers;\n        // This makes to clock icon show correct time\n        if (expand && value) {\n            expand.element.firstElementChild.style.animationDelay =\n                -((value.getHours() * 60 + value.getMinutes()) / 10) + 's';\n        }\n        super.updateValue(value, was);\n    }\n    changeStep(value, was) {\n        const type = typeof value;\n        if (!value) {\n            return null;\n        }\n        if (type === 'number') {\n            value = {\n                magnitude : Math.abs(value),\n                unit      : was ? was.unit : 'hour'\n            };\n        }\n        else if (type === 'string') {\n            value = DH.parseDuration(value);\n        }\n        if (value?.unit && value?.magnitude) {\n            if (value.magnitude < 0) {\n                value = {\n                    magnitude : -value.magnitude,  // Math.abs\n                    unit      : value.unit\n                };\n            }\n            return value;\n        }\n    }\n    updateStep(value) {\n        // If a step is configured, show the steppers\n        this.element.classList[value ? 'remove' : 'add']('b-no-steppers');\n        this.syncInvalid();\n    }\n    updateFormat() {\n        this.syncInputFieldValue(true);\n    }\n    get inputValue() {\n        return DH.format(this.value, this.format);\n    }\n    //endregion\n    //region Localization\n    updateLocalization() {\n        super.updateLocalization();\n        this.syncInputFieldValue(true);\n    }\n    //endregion\n}\n// Register this widget type with its Factory\nTimeField.initClass();\nTimeField._$name = 'TimeField';", "import TextField from './TextField.js';\nimport DateHelper from '../helper/DateHelper.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\nimport Duration from '../data/Duration.js';\n/**\n * @module Core/widget/DurationField\n */\n/**\n * A specialized field allowing a user to also specify duration unit when editing the duration value.\n *\n * This field can be used as an {@link Grid.column.Column#config-editor editor} for the {@link Grid.column.Column Column}.\n * It is used as the default editor for the `DurationColumn`.\n *\n * {@inlineexample Core/widget/DurationField.js}\n *\n * @extends Core/widget/TextField\n * @classtype durationfield\n * @classtypealias duration\n * @inputfield\n */\nexport default class DurationField extends TextField {\n    static $name = 'DurationField';\n    static type = 'durationfield';\n    static alias = 'duration';\n    static get defaultConfig() {\n        return {\n            /**\n             * The `value` config may be set in Object form specifying two properties,\n             * `magnitude`, a Number, and `unit`, a String.\n             *\n             * If a String is passed, it is parsed in accordance with current locale rules.\n             * The string is taken to be the numeric magnitude, followed by whitespace, then an abbreviation, or name of\n             * the unit.\n             * @config {DurationConfig|String}\n             * @category Common\n             */\n            value : null,\n            /**\n             * Step size for spin button clicks.\n             * @config {Number}\n             * @default\n             * @category Common\n             */\n            step : 1,\n            /**\n             * The duration unit to use with the current magnitude value.\n             * @config {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'}\n             * @category Common\n             */\n            unit : null,\n            defaultUnit : 'day',\n            /**\n             * The duration magnitude to use with the current unit value. Can be either an integer or a float value.\n             * Both \",\" and \".\" are valid decimal separators.\n             * @config {Number}\n             * @category Common\n             */\n            magnitude : null,\n            /**\n             * When set to `true` the field will use short names of unit durations\n             * (as returned by {@link Core.helper.DateHelper#function-getShortNameOfUnit-static}) when creating the\n             * input field's display value.\n             * @config {Boolean}\n             * @category Common\n             */\n            useAbbreviation : false,\n            /**\n             * Set to `true` to allow negative duration\n             * @config {Boolean}\n             * @category Common\n             */\n            allowNegative : false,\n            /**\n             * The number of decimal places to allow. Defaults to no constraint.\n             * @config {Number}\n             * @default\n             * @category Common\n             */\n            decimalPrecision : null,\n            triggers : {\n                spin : {\n                    type : 'spintrigger'\n                }\n            },\n            nullValue : null\n        };\n    }\n    /**\n     * Fired when this field's value changes.\n     * @event change\n     * @param {Core.data.Duration} value - This field's value\n     * @param {Core.data.Duration} oldValue - This field's previous value\n     * @param {Boolean} valid - True if this field is in a valid state.\n     * @param {Event} [event] - The triggering DOM event if any.\n     * @param {Boolean} userAction - Triggered by user taking an action (`true`) or by setting a value (`false`)\n     * @param {Core.widget.DurationField} source - This field\n     */\n    /**\n     * User performed default action (typed into this field or hit the triggers).\n     * @event action\n     * @param {Core.data.Duration} value - This field's value\n     * @param {Core.data.Duration} oldValue - This field's previous value\n     * @param {Boolean} valid - True if this field is in a valid state.\n     * @param {Event} [event] - The triggering DOM event if any.\n     * @param {Boolean} userAction - Triggered by user taking an action (`true`) or by setting a value (`false`)\n     * @param {Core.widget.DurationField} source - This field\n     */\n    static get configurable() {\n        return {\n            /**\n             * Get/set the min value (e.g. 1d)\n             * @member {String} min\n             * @category Common\n             */\n            /**\n             * Minimum duration value (e.g. 1d)\n             * @config {String}\n             * @category Common\n             */\n            min : null,\n            /**\n             * Get/set the max value\n             * @member {String} max (e.g. 10d)\n             * @category Common\n             */\n            /**\n             * Max duration value (e.g. 10d)\n             * @config {String}\n             * @category Common\n             */\n            max : null,\n            /**\n             * Get/set the allowed units, e.g. \"day,hour,year\".\n             * @member {String} allowedUnits\n             * @category Common\n             */\n            /**\n             * Comma-separated list of units to allow in this field, e.g. \"day,hour,year\". Leave blank to allow all\n             * valid units (the default)\n             * @config {String}\n             * @category Common\n             */\n            allowedUnits : null\n        };\n    }\n    changeMin(value) {\n        return typeof value === 'string' ? new Duration(value) : value;\n    }\n    changeMax(value) {\n        return typeof value === 'string' ? new Duration(value) : value;\n    }\n    changeAllowedUnits(units) {\n        if (typeof units === 'string') {\n            units = units.split(',');\n        }\n        // Special case, defaultUnit not found in allowedUnits, redefine defaultUnit\n        if (units.length > 0 && !units.includes(this.defaultUnit)) {\n            this.defaultUnit = units[0];\n        }\n        return units;\n    }\n    updateAllowedUnits(units) {\n        this.allowedUnitsRe = new RegExp(`(${units.join('|')})`, 'i');\n    }\n    get inputValue() {\n        // Do not use the _value property. If called during configuration, this\n        // will import the configured value from the config object.\n        return this.value == null ? '' : this.calcValue(true).toString(this.useAbbreviation);\n    }\n    /**\n     * Get/Set duration unit to use with the current magnitude value.\n     * Valid values are:\n     * - \"millisecond\" - Milliseconds\n     * - \"second\" - Seconds\n     * - \"minute\" - Minutes\n     * - \"hour\" - Hours\n     * - \"day\" - Days\n     * - \"week\" - Weeks\n     * - \"month\" - Months\n     * - \"quarter\" - Quarters\n     * - \"year\"- Years\n     *\n     * @property {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'}\n     * @category Common\n     */\n    set unit(unit) {\n        this._unit = unit;\n        this.value = this.calcValue();\n    }\n    get unit() {\n        return this._unit;\n    }\n    get unitWithDefault() {\n        return this._unit || this.defaultUnit;\n    }\n    /**\n     * Get/Set numeric magnitude `value` to use with the current unit value.\n     * @property {Number}\n     * @category Common\n     */\n    set magnitude(magnitude) {\n        this.clearError('L{invalidUnit}');\n        this._magnitude = magnitude;\n        super.value = this.calcValue();\n    }\n    get magnitude() {\n        return this._magnitude;\n    }\n    roundMagnitude(value) {\n        return value && this.decimalPrecision != null ? ObjectHelper.round(value, this.decimalPrecision) : value;\n    }\n    get allowDecimals() {\n        return this.decimalPrecision !== 0;\n    }\n    get isValid() {\n        const\n            me      = this,\n            isEmpty = me.value == null || (me.value && me.value.magnitude == null);\n        return super.isValid && ((isEmpty && !me.required) || !isEmpty && (me.allowNegative || me.value.magnitude >= 0));\n    }\n    internalOnChange(event) {\n        const\n            me     = this,\n            value  = me.value,\n            oldVal = me._lastValue;\n        if (me.hasChanged(oldVal, value)) {\n            me._lastValue = value;\n            me.triggerFieldChange({ value, event, userAction : true, valid : me.isValid });\n        }\n    }\n    onFocusOut(e) {\n        this.syncInputFieldValue(true);\n        this.triggers?.spin?.clickRepeater?.cancel();\n        return super.onFocusOut(e);\n    }\n    /**\n     * The `value` property may be set in Object form specifying two properties, `magnitude`, a Number, and `unit`, a\n     * String.\n     *\n     * If a Number is passed, the field's current unit is used and just the magnitude is changed.\n     *\n     * If a String is passed, it is parsed in accordance with current locale rules. The string is taken to be the\n     * numeric magnitude, followed by whitespace, then an abbreviation, or name of the unit.\n     *\n     * Upon read, the value is always a {@link Core.data.Duration} object containing `magnitude` and `unit`.\n     *\n     * @property {Core.data.Duration}\n     * @accepts {String|Number|DurationConfig|Core.data.Duration}\n     * @category Common\n     */\n    set value(value) {\n        const\n            me = this;\n        let newMagnitude, newUnit;\n        me.getConfig('allowedUnits');\n        me.clearError('L{invalidUnit}');\n        if (typeof value === 'number' || (typeof value === 'string' && value.length > 0 && !isNaN(value))) {\n            // A number means preserving existing unit value\n            newMagnitude = Number(value);\n            newUnit = me.unitWithDefault;\n        }\n        else if (typeof value === 'string') {\n            if (/^\\s*$/.test(value)) {\n                // special case of \"empty\" (in user meaning) string - set to `null` to allow unscheduling of tasks\n                newMagnitude = null;\n            }\n            else {\n                // Parse as a string\n                const\n                    parsedDuration = DateHelper.parseDuration(value, me.allowDecimals, me.unitWithDefault);\n                if (parsedDuration) {\n                    if (!me.allowedUnitsRe || me.allowedUnitsRe.test(parsedDuration.unit)) {\n                        newUnit = parsedDuration.unit;\n                        newMagnitude = parsedDuration.magnitude;\n                    }\n                    else {\n                        me.setError('L{invalidUnit}');\n                    }\n                }\n            }\n        }\n        else {\n            // Using value object with unit and magnitude\n            if (value && 'unit' in value && 'magnitude' in value) {\n                newUnit = value.unit;\n                newMagnitude = value.magnitude;\n            }\n            else {\n                newUnit = null;\n                newMagnitude = null;\n            }\n        }\n        if (me._magnitude !== newMagnitude || me._unit != newUnit) {\n            me._magnitude = newMagnitude;\n            // Once we have unit, do not clear it if setting clearing value\n            if (newUnit) {\n                me._unit = newUnit;\n            }\n            super.value = me.calcValue();\n        }\n    }\n    okMax(value) {\n        if (typeof value === 'number') {\n            value = new Duration({\n                unit      : this.unitWithDefault,\n                magnitude : value\n            });\n        }\n        return this.max == null || value <= this.max;\n    }\n    okMin(value) {\n        if (typeof value === 'number') {\n            value = new Duration({\n                unit      : this.unitWithDefault,\n                magnitude : value\n            });\n        }\n        return this.min == null || value >= this.min;\n    }\n    get validity() {\n        const\n            value    = this.value,\n            validity = {};\n        // Assert range for non-empty fields, empty fields will turn invalid if `required: true`\n        if (value != null) {\n            validity.rangeUnderflow = !this.okMin(value);\n            validity.rangeOverflow  = !this.okMax(value);\n        }\n        validity.valid = !validity.rangeUnderflow && !validity.rangeOverflow;\n        return validity;\n    }\n    get value() {\n        return super.value;\n    }\n    calcValue(round = false) {\n        const\n            me = this;\n        if ((!me._unit || me._magnitude == null) && me.clearable) {\n            return null;\n        }\n        else {\n            return new Duration(round ? this.roundMagnitude(me._magnitude) : this._magnitude, me.unitWithDefault);\n        }\n    }\n    hasChanged(oldValue, newValue) {\n        return newValue && !oldValue ||\n            !newValue && oldValue ||\n            newValue && oldValue && !oldValue.isEqual(newValue);\n    }\n    /**\n     * The `milliseconds` property is a read only property which returns the number of milliseconds in this field's\n     * value\n     * @member {Number} milliseconds\n     * @readonly\n     */\n    get milliseconds() {\n        // For reasons unknown documenting as @property did not work\n        return this.value ? this.value.milliseconds : 0;\n    }\n    onInternalKeyDown(keyEvent) {\n        if (keyEvent.key === 'ArrowUp') {\n            this.doSpinUp();\n        }\n        else if (keyEvent.key === 'ArrowDown') {\n            this.doSpinDown();\n        }\n    }\n    doSpinUp() {\n        const me = this;\n        if (me.readOnly) {\n            return;\n        }\n        let newValue = (me.magnitude || 0) + me.step;\n        me._isUserAction = true;\n        if (!me.okMin(newValue)) {\n            newValue = me.min;\n        }\n        if (me.okMax(newValue)) {\n            me.value = newValue;\n        }\n        me._isUserAction = false;\n    }\n    doSpinDown() {\n        const me = this;\n        if (me.readOnly) {\n            return;\n        }\n        let newValue = (me.magnitude || 0) - me.step;\n        if (!me.okMax(newValue)) {\n            newValue = me.max;\n        }\n        if (me.okMin(newValue) && (me.allowNegative || (me.magnitude || 0) > 0)) {\n            me._isUserAction = true;\n            me.value         = newValue;\n            me._isUserAction = false;\n        }\n    }\n}\n// Register this widget type with its Factory\nDurationField.initClass();\nDurationField._$name = 'DurationField';", "import Container from './Container.js';\nimport ArrayHelper from '../helper/ArrayHelper.js';\nimport DateHelper from '../helper/DateHelper.js';\nimport './Combo.js';\nimport './Checkbox.js';\nimport './NumberField.js';\nimport './TextField.js';\nimport './DateField.js';\nimport './DurationField.js';\nimport DomClassList from '../helper/util/DomClassList.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\nimport Duration from '../data/Duration.js';\nimport VersionHelper from '../helper/VersionHelper.js';\n/**\n * @module Core/widget/FieldFilterPicker\n */\nexport const filterableFieldDataTypes = {\n    number   : true,\n    boolean  : true,\n    string   : true,\n    date     : true,\n    duration : true,\n    time     : true,\n    auto     : true\n};\nconst isInferrableType = {\n    number  : true,\n    boolean : true,\n    string  : true\n};\nexport const isSupportedDurationField = field => field?.column?.type === 'duration';\nexport const isFilterableField = field => filterableFieldDataTypes[field?.type] || isSupportedDurationField(field);\nconst\n    emptyString         = '',\n    clsBase             = `b-fieldfilterpicker`,\n    multiValueOperators = {\n        between         : true,\n        notBetween      : true,\n        isIncludedIn    : true,\n        isNotIncludedIn : true\n    },\n    valueInputTypes     = {\n        textfield     : true,\n        datefield     : true,\n        numberfield   : true,\n        durationfield : true,\n        combo         : true,\n        timefield     : true\n    },\n    commonOperators = {\n        empty           : { value : 'empty', text : 'L{isEmpty}', argCount : 0 },\n        notEmpty        : { value : 'notEmpty', text : 'L{isNotEmpty}', argCount : 0 },\n        '='             : { value : '=', text : 'L{equals}' },\n        '!='            : { value : '!=', text : 'L{doesNotEqual}' },\n        '>'             : { value : '>', text : 'L{isGreaterThan}' },\n        '<'             : { value : '<', text : 'L{isLessThan}' },\n        '>='            : { value : '>=', text : 'L{isGreaterThanOrEqualTo}' },\n        '<='            : { value : '<=', text : 'L{isLessThanOrEqualTo}' },\n        between         : { value : 'between', text : 'L{isBetween}', argCount : 2 },\n        notBetween      : { value : 'notBetween', text : 'L{isNotBetween}', argCount : 2 },\n        isIncludedIn    : { value : 'isIncludedIn', text : 'L{isOneOf}', isArrayValued : true },\n        isNotIncludedIn : { value : 'isNotIncludedIn', text : 'L{isNotOneOf}', isArrayValued : true }\n    };\n/**\n * A field that is available for selection when defining filters.\n *\n * @typedef {Object} FieldOption\n * @property {'string'|'number'|'date'|'boolean'} type The data type of the values in this field in the data source\n * @property {String} title The human-friendly display name for the field, as might be displayed in a data column header\n */\n/**\n * A dictionary of value field placeholder strings, keyed by data type.\n *\n * @typedef {Object} ValueFieldPlaceholders\n * @property {String} string Placeholder text for text value fields\n * @property {String} number Placeholder text for number value fields\n * @property {String} date Placeholder text for date value fields\n * @property {String} list Placeholder text for multi-select list values, e.g. for the 'is one of' operator\n */\n/**\n * Widget for defining a {@link Core.util.CollectionFilter} for use in filtering a {@link Core.data.Store}.\n * Filters consist of `property` (the name of the data field whose values are checked), `operator`\n * (the type of comparison to use), and `value` (the pre-defined value against which to compare the\n * data field value during filtering).\n *\n * {@inlineexample Core/widget/FieldFilterPicker.js}\n *\n * For example:\n *\n * ```javascript\n * new FieldFilterPicker({\n *     appendTo : domElement,\n *\n *     fields: {\n *         // Allow filters to be defined against the 'age' and 'role' fields in our data\n *         age       : { title: 'Age', type: 'number' },\n *         startDate : { title: 'Start Date', type: 'date' }\n *     },\n *\n *     filter : {\n *         property : 'startDate',\n *         operator : '<',\n *         value    : new Date()\n *     }\n * });\n * ```\n *\n * @demo Grid/fieldfilters\n *\n * @extends Core/widget/Container\n * @classtype fieldfilterpicker\n * @widget\n */\nexport default class FieldFilterPicker extends Container {\n    //region Config\n    static $name = 'FieldFilterPicker';\n    static type = 'fieldfilterpicker';\n    static operators = {\n        empty           : { value : 'empty', text : 'L{isEmpty}', argCount : 0 },\n        notEmpty        : { value : 'notEmpty', text : 'L{isNotEmpty}', argCount : 0 },\n        '='             : { value : '=', text : 'L{equals}' },\n        '!='            : { value : '!=', text : 'L{doesNotEqual}' },\n        '>'             : { value : '>', text : 'L{isGreaterThan}' },\n        '<'             : { value : '<', text : 'L{isLessThan}' },\n        '>='            : { value : '>=', text : 'L{isGreaterThanOrEqualTo}' },\n        '<='            : { value : '<=', text : 'L{isLessThanOrEqualTo}' },\n        between         : { value : 'between', text : 'L{isBetween}', argCount : 2 },\n        notBetween      : { value : 'notBetween', text : 'L{isNotBetween}', argCount : 2 },\n        isIncludedIn    : { value : 'isIncludedIn', text : 'L{isOneOf}' },\n        isNotIncludedIn : { value : 'isNotIncludedIn', text : 'L{isNotOneOf}' }\n    };\n    static defaultOperators = {\n        string : [\n            // In display order\n            commonOperators.empty,\n            commonOperators.notEmpty,\n            commonOperators['='],\n            commonOperators['!='],\n            { value : 'includes', text : 'L{contains}' },\n            { value : 'doesNotInclude', text : 'L{doesNotContain}' },\n            { value : 'startsWith', text : 'L{startsWith}' },\n            { value : 'endsWith', text : 'L{endsWith}' },\n            commonOperators.isIncludedIn,\n            commonOperators.isNotIncludedIn\n        ],\n        number : [\n            commonOperators.empty,\n            commonOperators.notEmpty,\n            commonOperators['='],\n            commonOperators['!='],\n            commonOperators['>'],\n            commonOperators['<'],\n            commonOperators['>='],\n            commonOperators['<='],\n            commonOperators.between,\n            commonOperators.notBetween,\n            commonOperators.isIncludedIn,\n            commonOperators.isNotIncludedIn\n        ],\n        date : [\n            commonOperators.empty,\n            commonOperators.notEmpty,\n            commonOperators['='],\n            commonOperators['!='],\n            { value : '<', text : 'L{isBefore}' },\n            { value : '>', text : 'L{isAfter}' },\n            commonOperators.between,\n            { value : 'isToday', text : 'L{isToday}', argCount : 0 },\n            { value : 'isTomorrow', text : 'L{isTomorrow}', argCount : 0 },\n            { value : 'isYesterday', text : 'L{isYesterday}', argCount : 0 },\n            { value : 'isThisWeek', text : 'L{isThisWeek}', argCount : 0 },\n            { value : 'isNextWeek', text : 'L{isNextWeek}', argCount : 0 },\n            { value : 'isLastWeek', text : 'L{isLastWeek}', argCount : 0 },\n            { value : 'isThisMonth', text : 'L{isThisMonth}', argCount : 0 },\n            { value : 'isNextMonth', text : 'L{isNextMonth}', argCount : 0 },\n            { value : 'isLastMonth', text : 'L{isLastMonth}', argCount : 0 },\n            { value : 'isThisYear', text : 'L{isThisYear}', argCount : 0 },\n            { value : 'isNextYear', text : 'L{isNextYear}', argCount : 0 },\n            { value : 'isLastYear', text : 'L{isLastYear}', argCount : 0 },\n            { value : 'isYearToDate', text : 'L{isYearToDate}', argCount : 0 },\n            commonOperators.isIncludedIn,\n            commonOperators.isNotIncludedIn\n        ],\n        boolean : [\n            { value : 'isTrue', text : 'L{isTrue}', argCount : 0 },\n            { value : 'isFalse', text : 'L{isFalse}', argCount : 0 }\n        ],\n        duration : [\n            commonOperators.empty,\n            commonOperators.notEmpty,\n            commonOperators['='],\n            commonOperators['!='],\n            commonOperators['>'],\n            commonOperators['<'],\n            commonOperators['>='],\n            commonOperators['<='],\n            commonOperators.between,\n            commonOperators.notBetween,\n            commonOperators.isIncludedIn,\n            commonOperators.isNotIncludedIn\n        ],\n        time : [\n            commonOperators.empty,\n            commonOperators.notEmpty,\n            commonOperators['='],\n            commonOperators['!='],\n            commonOperators['>'],\n            commonOperators['<'],\n            commonOperators['>='],\n            commonOperators['<='],\n            commonOperators.between,\n            commonOperators.notBetween,\n            commonOperators.isIncludedIn,\n            commonOperators.isNotIncludedIn\n        ],\n        relation : [\n            commonOperators.empty,\n            commonOperators.notEmpty,\n            commonOperators['='],\n            commonOperators['!='],\n            commonOperators.isIncludedIn,\n            commonOperators.isNotIncludedIn\n        ],\n        auto : [\n            { value : '*', text : 'L{contains}' }\n        ]\n    };\n    static get defaultValueFieldPlaceholders() {\n        return {\n            string   : 'L{enterAValue}',\n            number   : 'L{enterANumber}',\n            date     : 'L{selectADate}',\n            relation : 'L{selectValue}',\n            list     : 'L{selectOneOrMoreValues}',\n            duration : 'L{enterAValue}',\n            time     : 'L{selectATime}',\n            auto     : 'L{enterAValue}'\n        };\n    };\n    static configurable = {\n        /**\n         * Dictionary of {@link #typedef-FieldOption} representing the fields against which filters can be defined,\n         * keyed by field name.\n         *\n         * <div class=\"note\">5.3.0 Syntax accepting FieldOption[] was deprecated in favor of dictionary and will be removed in 6.0</div>\n         *\n         * If filtering a {@link Grid.view.Grid}, consider using {@link Grid.widget.GridFieldFilterPicker}, which can be configured\n         * with an existing {@link Grid.view.Grid} instead of, or in combination with, defining fields manually.\n         *\n         * Example:\n         * ```javascript\n         * fields: {\n         *     // Allow filters to be defined against the 'age' and 'role' fields in our data\n         *     age  : { title: 'Age', type: 'number' },\n         *     role : { title: 'Role', type: 'string' }\n         * }\n         * ```\n         *\n         * @config {Object<String,FieldOption>}\n         */\n        fields : null,\n        /**\n         * Make the entire picker disabled.\n         *\n         * @config {Boolean}\n         * @default\n         */\n        disabled : false,\n        /**\n         * Make the entire picker read-only.\n         *\n         * @config {Boolean}\n         * @default\n         */\n        readOnly : false,\n        layout : 'vbox',\n        /**\n         * Make only the property selector readOnly.\n         * @private\n         *\n         * @config {Boolean}\n         * @default\n         */\n        propertyLocked : false,\n        /**\n         * Make only the operator selector readOnly.\n         * @private\n         *\n         * @config {Boolean}\n         * @default\n         */\n        operatorLocked : false,\n        /**\n         * Configuration object for the {@link Core.util.CollectionFilter} displayed\n         * and editable in this picker.\n         *\n         * Example:\n         *\n         * ```javascript\n         * {\n         *     property: 'age',\n         *     operator: '=',\n         *     value: 25\n         * }\n         * ```\n         *\n         * @config {CollectionFilterConfig}\n         */\n        filter : null,\n        /**\n         * Optional configuration for the property selector {@link Core.widget.Combo}.\n         *\n         * @config {ComboConfig}\n         */\n        propertyFieldConfig : null,\n        /**\n         * Optional configuration for the operator selector {@link Core.widget.Combo}.\n         *\n         * @config {ComboConfig}\n         * @private\n         */\n        operatorFieldConfig : null,\n        /**\n         * Optional CSS class to apply to the value field(s).\n         *\n         * @config {String}\n         * @private\n         */\n        valueFieldCls : null,\n        /**\n         * Whether to raise {@link #event-change} events as the user types into a value field. If `false`,\n         * {@link #event-change} events will be raised only when the value input field's own `change` event\n         * occurs, for example on field blur.\n         *\n         * @config {Boolean}\n         * @default\n         */\n        triggerChangeOnInput : true,\n        /**\n         * @private\n         */\n        items : {\n            inputs : {\n                type   : 'container',\n                layout : 'hbox',\n                cls    : `${clsBase}-inputs`,\n                items  : {\n                    propertyPicker : {\n                        type                    : 'combo',\n                        items                   : {},\n                        cls                     : `${clsBase}-property`,\n                        placeholder             : 'L{FieldFilterPicker.selectAProperty}',\n                        highlightExternalChange : false\n                    },\n                    operatorPicker : {\n                        type                    : 'combo',\n                        items                   : {},\n                        cls                     : `${clsBase}-operator`,\n                        placeholder             : 'L{FieldFilterPicker.selectAnOperator}',\n                        highlightExternalChange : false\n                    },\n                    valueFields : {\n                        type  : 'container',\n                        cls   : `${clsBase}-values`,\n                        items : {}\n                    }\n                }\n            },\n            caseSensitive : {\n                type : 'checkbox',\n                text : 'L{FieldFilterPicker.caseSensitive}',\n                cls  : `${clsBase}-case-sensitive`\n            }\n        },\n        /**\n         * Overrides the built-in list of operators that are available for selection. Specify operators as\n         * an object with data types as keys and lists of operators as values, like this:\n         *\n         * ```javascript\n         * operators : {\n         *     string : [\n         *         { value : 'empty', text : 'is empty', argCount : 0 },\n         *         { value : 'notEmpty', text : 'is not empty', argCount : 0 }\n         *     ],\n         *     number : [\n         *         { value : '=', text : 'equals' },\n         *         { value : '!=', text : 'does not equal' }\n         *     ],\n         *     date : [\n         *         { value : '<', text : 'is before' }\n         *     ]\n         * }\n         * ```\n         *\n         * Here `value` is what will be stored in the `operator` field in the filter when selected, `text` is the text\n         * displayed in the Combo for selection, and `argCount` is the number of arguments (comparison values) the\n         * operator requires. The default argCount if not specified is 1.\n         *\n         * @config {Object}\n         */\n        operators : FieldFilterPicker.defaultOperators,\n        /**\n         * The date format string used to display dates when using the 'is one of' / 'is not one of' operators with a date\n         * field. Defaults to the current locale's `FieldFilterPicker.dateFormat` value.\n         *\n         * @config {String}\n         * @default\n         */\n        dateFormat : 'L{FieldFilterPicker.dateFormat}',\n        /**\n         * Optional {Core.data.Store} against which filters are being defined. This is used to supply options to filter against\n         * when using the 'is one of' and 'is not one of' operators.\n         *\n         * @config {Core.data.Store}\n         */\n        store : null,\n        /**\n         * Optional {@link ValueFieldPlaceholders} object specifying custom placeholder text for value input fields.\n         *\n         * @config {ValueFieldPlaceholders}\n         */\n        valueFieldPlaceholders : null,\n        /**\n         * Optional function that modifies the configuration of value fields shown for a filter. The default configuration\n         * is received as an argument and the returned value will be used as the final configuration. For example:\n         *\n         * ```javascript\n         * getValueFieldConfig : (filter, fieldConfig) => {\n         *     return {\n         *         ...fieldConfig,\n         *         title : fieldName    // Override the `title` config for the field\n         *     };\n         * }\n         * ```\n         *\n         * The supplied function should accept the following arguments:\n         *\n         * @config {Function}\n         * @param {Core.util.CollectionFilter} filter The filter being displayed\n         * @param {ContainerItemConfig} fieldConfig Configuration object for the value field\n         * @returns {ContainerItemConfig} the resulting configuration\n         */\n        getValueFieldConfig : null\n    };\n    //endregion\n    // Make lookup of operator arity (arg count) by [fieldType][operator]\n    static buildOperatorArgCountLookup = operators =>\n        ArrayHelper.keyBy(Object.entries(operators),\n            ([fieldType])   => fieldType,\n            ([, operators]) => ArrayHelper.keyBy(operators,\n                ({ value }) => value,\n                ({ argCount }) => argCount === undefined ? 1 : argCount\n            ));\n    afterConstruct() {\n        const me = this;\n        if (!me._fields) {\n            throw new Error(`${FieldFilterPicker.name} requires 'fields' to be configured.`);\n        }\n        if (!me._filter) {\n            throw new Error(`${FieldFilterPicker.name} requires 'filter' to be configured.`);\n        }\n        super.afterConstruct();\n        const { widgetMap: { propertyPicker, operatorPicker, caseSensitive } } = me;\n        propertyPicker.ion({ select : 'onPropertySelect', thisObj : me });\n        operatorPicker.ion({ select : 'onOperatorSelect', thisObj : me });\n        caseSensitive.ion({ change : 'onCaseSensitiveChange', thisObj : me });\n        me.propertyFieldConfig && propertyPicker.setConfig(me.propertyFieldConfig);\n        me.operatorFieldConfig && operatorPicker.setConfig(me.operatorFieldConfig);\n        propertyPicker.cls = me.allPropertyPickerClasses;\n        operatorPicker.cls = me.allOperatorPickerClasses;\n        me.populateUIFromFilter();\n    }\n    changeDateFormat(dateFormat) {\n        return this.L(dateFormat);\n    }\n    get allChildInputs() {\n        const { propertyPicker, operatorPicker, caseSensitive } = this.widgetMap;\n        return [propertyPicker, operatorPicker, ...this.valueFields, caseSensitive];\n    }\n    updateDisabled(newDisabled) {\n        this.allChildInputs.forEach(field => field.disabled = newDisabled);\n    }\n    updateReadOnly(newReadOnly) {\n        const { propertyPicker, operatorPicker } = this.widgetMap;\n        this.allChildInputs.forEach(field => field.readOnly = newReadOnly);\n        // Respect these individual configs when un-setting global readOnly\n        propertyPicker.readOnly = propertyPicker.readOnly || newReadOnly;\n        operatorPicker.readOnly = operatorPicker.readOnly || newReadOnly;\n    }\n    updatePropertyLocked(newPropertyLocked) {\n        this.widgetMap.propertyPicker.readOnly = newPropertyLocked || this.readOnly;\n        this.widgetMap.propertyPicker.cls = this.allPropertyPickerClasses;\n    }\n    updateOperatorLocked(newOperatorLocked) {\n        this.widgetMap.operatorPicker.readOnly = newOperatorLocked || this.readOnly;\n        this.widgetMap.operatorPicker.cls = this.allOperatorPickerClasses;\n    }\n    changeOperators(newOperators) {\n        const operators = (newOperators ?? FieldFilterPicker.defaultOperators);\n        return Object.keys(operators).reduce((outOperators, dataType) => ({\n            ...outOperators,\n            [dataType] : operators[dataType].map(op => ({ ...op, text : this.L(op.text) }))\n        }), {});\n    }\n    changeFields(newFields) {\n        let fields = newFields;\n        if (Array.isArray(newFields)) {\n            VersionHelper.deprecate('Core', '6.0.0', 'FieldOption[] deprecated, use Object<String, FieldOption> keyed by field name instead');\n            // Support old array syntax for `fields` during deprecation\n            fields = ArrayHelper.keyBy(fields, 'name');\n        }\n        return fields;\n    }\n    get isMultiSelectValueField() {\n        return ['isIncludedIn', 'isNotIncludedIn'].includes(this._filter?.operator);\n    }\n    get allPropertyPickerClasses() {\n        return new DomClassList(`${clsBase}-property`, this.propertyFieldConfig?.cls, {\n            [`${clsBase}-combo-locked`] : this.propertyLocked\n        });\n    }\n    get allOperatorPickerClasses() {\n        return new DomClassList(`${clsBase}-operator`, this.operatorFieldConfig?.cls, {\n            [`${clsBase}-combo-locked`] : this.operatorLocked\n        });\n    }\n    getValueFieldConfigs() {\n        const\n            me = this,\n            {\n                valueFieldCls,\n                fieldType,\n                _filter: { operator },\n                onValueChange,\n                filterValues,\n                isMultiSelectValueField,\n                operatorArgCount,\n                getValueFieldConfig,\n                fieldIsRelation,\n                triggerChangeOnInput\n            } = me,\n            valueFieldPlaceholders = ObjectHelper.merge(\n                {},\n                FieldFilterPicker.defaultValueFieldPlaceholders,\n                me.valueFieldPlaceholders\n            );\n        if (!fieldType || !operator || operatorArgCount === 0) {\n            return [];\n        }\n        let valueFieldCfg = {\n            type              : 'textfield', // replaced as needed below\n            internalListeners : {\n                change  : onValueChange,\n                input   : triggerChangeOnInput ? onValueChange : null,\n                thisObj : me\n            },\n            bubbleEvents : { keydown : true },\n            cls          : valueFieldCls,\n            dataset      : {\n                type : fieldType\n            },\n            placeholder             : me.L(valueFieldPlaceholders[isMultiSelectValueField ? 'list' : fieldIsRelation ? 'relation' : fieldType]),\n            highlightExternalChange : false\n        };\n        if (isMultiSelectValueField || fieldIsRelation) {\n            valueFieldCfg = {\n                ...valueFieldCfg,\n                type              : 'combo',\n                multiSelect       : isMultiSelectValueField,\n                createOnUnmatched : true,\n                items             : me.getUniqueDataValues(filterValues),\n                value             : filterValues ?? []\n            };\n        }\n        else if (['number', 'date', 'boolean', 'duration', 'time'].includes(fieldType)) {\n            valueFieldCfg.type = `${fieldType}field`;\n        }\n        // Allow client to modify value field config\n        if (getValueFieldConfig) {\n            valueFieldCfg = me.callback(getValueFieldConfig, me, [me.filter, valueFieldCfg]);\n        }\n        if (isMultiSelectValueField) {\n            // We only support a single multi-select Combo for now\n            return [valueFieldCfg];\n        }\n        return ArrayHelper.populate(operatorArgCount, index => ([{\n            type    : 'widget',\n            tag     : 'div',\n            cls     : `${clsBase}-value-separator`,\n            content : me.L('L{FieldFilterPicker.and}')\n        }, {\n            ...valueFieldCfg,\n            value : filterValues[index]\n        }])).flat().slice(1);\n    }\n    /**\n     * Return an array of unique values in the data store for the currently selected field. If no store is\n     * configured or no field is selected, returns an empty array.\n     */\n    getUniqueDataValues(extraValuesToInclude = []) {\n        const\n            me            = this,\n            { fieldType } = me;\n        if (!me.store || !me._filter?.property) {\n            return [];\n        }\n        const { relatedDisplayField } = me.selectedField;\n        let values,\n            sortedValues;\n        if (me.fieldIsRelation) {\n            const { foreignStore } = me.currentPropertyRelationConfig;\n            if (relatedDisplayField) {\n                // Display field specified -- sort by text label;\n                // this bypasses the type-specific sorting for raw data values below\n                values = foreignStore.allRecords.reduce((options, record) => {\n                    if (record.id != null) {\n                        options.push({\n                            text  : record.getValue(relatedDisplayField),\n                            value : record.id\n                        });\n                    }\n                    return options;\n                }, []);\n                // Currently only support getting text from remote field and sorting as text\n                sortedValues = values.sort((a, b) => me.sortStrings(a.text, b.text));\n            }\n            else {\n                // If no display field, fall back to only data values\n                values = foreignStore.allRecords.map(record => record.id);\n            }\n        }\n        else {\n            // Local data field\n            values = me.store.allRecords.map(record => record.getValue(me._filter.property));\n        }\n        if (!sortedValues) {\n            values.push(...extraValuesToInclude);\n            const uniqueValues = ArrayHelper.unique(values.reduce((primitiveValues, value) => {\n                if (value != null && String(value).trim() !== '') {\n                    // Get primitive values from complex types, for deduping\n                    if (fieldType === 'date') {\n                        primitiveValues.push(value.valueOf());\n                    }\n                    else if (fieldType === 'duration') {\n                        primitiveValues.push(value.toString());\n                    }\n                    else {\n                        primitiveValues.push(value);\n                    }\n                }\n                return primitiveValues;\n            }, []));\n            // Sort\n            if (fieldType === 'string') {\n                sortedValues = uniqueValues.sort(me.sortStrings);\n            }\n            else if (fieldType === 'duration') {\n                sortedValues = uniqueValues\n                    .map(durationStr => new Duration(durationStr))\n                    .filter(duration => duration.isValid)\n                    .sort(me.sortDurations);\n            }\n            else {\n                sortedValues = uniqueValues.sort(me.sortNumerics);\n            }\n            // Provide labels for complex value types\n            if (fieldType === 'date') {\n                sortedValues = sortedValues.map(timestamp => {\n                    const date = new Date(timestamp);\n                    return {\n                        text  : DateHelper.format(date, me.dateFormat),\n                        value : timestamp\n                    };\n                });\n            }\n            else if (fieldType === 'duration') {\n                sortedValues = sortedValues.map(duration => duration.toString());\n            }\n        }\n        return sortedValues;\n    }\n    sortStrings(a, b) {\n        return (a ?? emptyString).localeCompare(b ?? emptyString);\n    }\n    sortNumerics(a, b) {\n        return a - b;\n    }\n    sortDurations(a, b) {\n        return a.valueOf() - b.valueOf();\n    }\n    get fieldType() {\n        return this.selectedField?.type;\n    }\n    get selectedField() {\n        return this.fields?.[this._filter?.property];\n    }\n    get propertyOptions() {\n        return Object.entries(this.fields ?? {})\n            .filter(([, fieldDef]) =>\n                filterableFieldDataTypes[fieldDef.type] ||\n                isSupportedDurationField(fieldDef)\n            )\n            .map(([fieldName, { title }]) => ({ value : fieldName, text : title ?? fieldName }))\n            .sort((a, b) => a.text.localeCompare(b.text));\n    }\n    get operatorOptions() {\n        return this.operators[this.fieldIsRelation ? 'relation' : this.fieldType];\n    }\n    get fieldIsRelation() {\n        return Boolean(this.currentPropertyRelationConfig);\n    }\n    get currentPropertyRelationConfig() {\n        return this.store?.modelRelations?.find(({ foreignKey }) => foreignKey === this._filter?.property);\n    }\n    updateOperators() {\n        delete this._operatorArgCountLookup;\n    }\n    /**\n     * @internal\n     */\n    get operatorArgCountLookup() {\n        return this._operatorArgCountLookup ||\n            (this._operatorArgCountLookup = FieldFilterPicker.buildOperatorArgCountLookup(this.operators));\n    }\n    updateFilter() {\n        if (this._filter) {\n            this.onFilterChange();\n        }\n    }\n    updateStore(newStore) {\n        this._store?.un(this);\n        newStore?.ion({ refresh : 'onStoreRefresh', thisObj : this });\n        this.inferFieldTypes();\n    }\n    onStoreRefresh({ action }) {\n        if (this.isMultiSelectValueField && ['dataset', 'create', 'update', 'delete'].includes(action)) {\n            this.valueFields[0].items = this.getUniqueDataValues(this.filterValues);\n        }\n    }\n    refreshValueFields() {\n        const\n            me = this,\n            { valueFields } = me.widgetMap,\n            {\n                fieldType,\n                operatorArgCount,\n                _filter: { property, operator }\n            } = me,\n            isMultiValue = multiValueOperators[operator];\n        // Put value fields on own row / adjust size for data type\n        valueFields.element.className = new DomClassList({\n            [`${clsBase}-values`]              : true,\n            [`${clsBase}-values-multiple`]     : isMultiValue,\n            [`${clsBase}-values-${fieldType}`] : fieldType !== undefined,\n            'b-hidden'                         : property == undefined || operator == undefined || operatorArgCount === 0\n        });\n        valueFields.removeAll();\n        valueFields.add(me.getValueFieldConfigs());\n        delete me._valueFields;\n        me.refreshCaseSensitive();\n    }\n    refreshCaseSensitive() {\n        const\n            me = this,\n            { fieldType, operatorArgCount, isMultiSelectValueField } = me,\n            operator = me._filter?.operator,\n            { caseSensitive } = me.widgetMap;\n        caseSensitive.hidden =\n            fieldType !== 'string' ||\n            !operator ||\n            isMultiSelectValueField ||\n            operatorArgCount === 0;\n        caseSensitive.checked = me._filter?.caseSensitive !== false;\n    }\n    onPropertySelect(event) {\n        const\n            me = this,\n            { _filter } = me;\n        _filter.property = event.record?.data.value || null;\n        if (me.fieldType !== me._fieldType) {\n            _filter.operator = null;\n            _filter.value = null;\n        }\n        me._fieldType = _filter.type = me.fieldType;\n        me.refreshOperatorPicker();\n        me.refreshValueFields();\n        me.triggerChange();\n    }\n    onCaseSensitiveChange({ checked }) {\n        this._filter.caseSensitive = checked;\n        this.triggerChange();\n    }\n    onOperatorSelect(event) {\n        const\n            me = this,\n            wasMultiSelectValueField = me.isMultiSelectValueField;\n        const prevArgCount = this.operatorArgCount;\n        me._filter.operator = event.record?.data.value || null;\n        if (me.operatorArgCount !== prevArgCount) {\n            me._filter.value = null;\n        }\n        if (me.isMultiSelectValueField && !wasMultiSelectValueField) {\n            me._filter.value = [];\n        }\n        me.refreshValueFields();\n        me.triggerChange();\n    }\n    triggerChange() {\n        const { filter, isValid } = this;\n        /**\n         * Fires when the filter is modified.\n         * @event change\n         * @param {Core.widget.FieldFilterPicker} source The FieldFilterPicker instance that fired the event.\n         * @param {Array} filter The {@link Core.util.CollectionFilter} configuration object for the filter represented by this\n         *                       {@link Core.widget.FieldFilterPicker}.\n         * @param {Boolean} isValid Whether the current configuration object represents a complete and valid filter\n         */\n        this.trigger('change', {\n            filter,\n            isValid\n        });\n    }\n    onValueChange() {\n        const\n            me = this,\n            { isMultiSelectValueField, fieldType, _filter } = me,\n            values = this.valueFields.map(field => field.value);\n        if (isMultiSelectValueField && fieldType === 'date') {\n            _filter.value = values[0].map(timestamp => new Date(timestamp));\n        }\n        else if (isMultiSelectValueField && fieldType === 'duration') {\n            _filter.value = values[0].map(durationStr => new Duration(durationStr));\n        }\n        else {\n            // Treat end date as inclusive by setting time to end of day\n            if (fieldType === 'date' && _filter.operator === 'between' && DateHelper.isValidDate(values[1])) {\n                values[1].setHours(23, 59, 59, 999);\n            }\n            _filter.value = values.length === 1 ? values[0] : values;\n        }\n        me.triggerChange();\n    }\n    refreshOperatorPicker() {\n        const\n            { operatorPicker } = this.widgetMap,\n            { _filter: { operator, property }, operatorOptions } = this;\n        operatorPicker.items = operatorOptions;\n        operatorPicker.value = operator;\n        operatorPicker.hidden = property === null;\n    }\n    populateUIFromFilter(forceRefreshValueFields = false) {\n        const\n            me = this,\n            {\n                filterValues,\n                widgetMap: { propertyPicker, operatorPicker },\n                _filter: { property, operator, disabled },\n                propertyOptions,\n                operatorOptions,\n                isMultiSelectValueField\n            } = me;\n        propertyPicker.items = propertyOptions;\n        operatorPicker.items = operatorOptions;\n        operatorPicker.hidden = property === null;\n        let refreshValueFields = forceRefreshValueFields;\n        if (propertyPicker.value !== property) {\n            propertyPicker.value = property;\n            me.refreshOperatorPicker();\n            refreshValueFields = true;\n        }\n        if (operatorPicker.value !== operator) {\n            if (operator === null || !operatorPicker.items.find(({ value }) => value === operator)) {\n                operatorPicker.clear();\n            }\n            else {\n                operatorPicker.value = operator;\n            }\n            refreshValueFields = true;\n        }\n        if (!operator && operatorPicker.items.length === 1) {\n            operatorPicker.value = me._filter.operator = operatorPicker.items[0].value;\n        }\n        if (refreshValueFields) {\n            me.refreshValueFields();\n        }\n        me.refreshCaseSensitive();\n        me.valueFields.forEach((valueField, fieldIndex) => {\n            if (isMultiSelectValueField && (valueField.value.length > 0 || filterValues.length > 0)) {\n                if (me.fieldType === 'date') {\n                    valueField.value = filterValues.map(date => date?.valueOf());\n                }\n                else if (me.fieldType === 'duration') {\n                    valueField.value = filterValues.map(duration => duration?.toString());\n                }\n                else {\n                    valueField.value = filterValues;\n                }\n            }\n            else if (fieldIndex >= filterValues.length) {\n                valueField.clear();\n            }\n            else {\n                valueField.value = filterValues[fieldIndex];\n            }\n        });\n        // Grey out all inputs if filter is disabled\n        me.allChildInputs.forEach(widget => widget.disabled = me.disabled || disabled);\n    }\n    get valueFields() {\n        return this._valueFields ||\n            (this._valueFields = this.widgetMap.valueFields.queryAll(\n                w => w.owner === this.widgetMap.valueFields && valueInputTypes[w.type]));\n    }\n    get filterValues() {\n        if (this._filter?.value == null) {\n            return [];\n        }\n        return ArrayHelper.asArray(this._filter.value);\n    }\n    // Must be called manually when filter modified externally\n    onFilterChange() {\n        const\n            me = this,\n            newFieldType = me.fieldType,\n            forceRefreshValueFields = newFieldType !== me._fieldType;\n        me._fieldType = me._filter.type = newFieldType;\n        me.populateUIFromFilter(forceRefreshValueFields);\n    }\n    get operatorArgCount() {\n        const { fieldType, filter: { operator }, operatorArgCountLookup } = this;\n        return (fieldType && operator) ? operatorArgCountLookup[fieldType][operator] : 1;\n    }\n    get isValid() {\n        const\n            me = this,\n            { filter, fieldType, filterValues, isMultiSelectValueField, operatorArgCount } = me,\n            { operator } = filter,\n            missingValue = operatorArgCount > 0 && filter?.value == null;\n        return (\n            // fieldType here validates that we have a matching field\n            fieldType &&\n            operator &&\n            !missingValue &&\n            (\n                (isMultiSelectValueField && filterValues.length > 0) ||\n                (filterValues.length === operatorArgCount)\n            ) &&\n            filterValues.every(value => value != null &&\n                (fieldType !== 'duration' || value.isValid))\n        );\n    }\n    focus() {\n        (this.valueFields.find(f => f.isEmptyInput) ?? this.operatorPicker ?? this.propertyPicker)?.focus();\n    }\n    inferFieldTypes() {\n        if (this.store && this.fields) {\n            for (const [fieldName, fieldDef] of Object.entries(this.fields)) {\n                if (fieldDef.type === 'auto') {\n                    fieldDef.type = FieldFilterPicker.inferFieldType(this.store, fieldName);\n                }\n            }\n        }\n    }\n    static inferFieldType(store, fieldName) {\n        const firstValue = store.find(record => record.getValue(fieldName) != null, true)?.getValue(fieldName);\n        if (firstValue !== undefined) {\n            const valueType = typeof firstValue;\n            if (valueType === 'object' && firstValue instanceof Date) {\n                return 'date';\n            }\n            else if (isInferrableType[valueType]) {\n                return valueType;\n            }\n        }\n        return 'auto';\n    }\n}\nFieldFilterPicker.initClass();\nFieldFilterPicker._$name = 'FieldFilterPicker';", "import Widget from './Widget.js';\n/**\n * @module Core/widget/Label\n */\n/**\n * The `Label` widget wraps an `<label>Text</label>` element.\n *\n * {@inlineexample Core/widget/Label.js vertical}\n *\n * @extends Core/widget/Widget\n * @classtype label\n * @widget\n */\nexport default class Label extends Widget {\n    static $name = 'Label';\n    static type = 'label';\n    static configurable = {\n        /**\n         * Get/set label text\n         * @prp {String}\n         */\n        text : null,\n        localizableProperties : ['text']\n    };\n    compose() {\n        const { text, html } = this;\n        return {\n            tag : 'label',\n            text,\n            html\n        };\n    }\n}\nLabel.initClass();\nLabel._$name = 'Label';", "import './Checkbox.js';\nimport Container from './Container.js';\nimport './Label.js';\nimport './FieldFilterPicker.js';\n/**\n * @module Core/widget/FieldFilterPickerGroup\n */\n/**\n * A set of {@link Core.widget.FieldFilterPicker}s, representing an array\n * of {@link Core.util.CollectionFilter}s. The filters are provided to the\n * picker as an array of filter configuration objects.\n *\n * {@inlineexample Core/widget/FieldFilterPickerGroup.js}\n *\n * When {@link #config-store} is provided in the configuration, the picker group will\n * read filters from the store and monitor for filter changes, and reflect any changes. It is\n * possible to synchronize multiple {@link Core.widget.FieldFilterPickerGroup}s by configuring\n * them with the same store.\n *\n * Does not support modifying filters defined as custom functions.\n *\n * @extends Core/widget/Container\n * @classtype fieldfilterpickergroup\n * @widget\n */\nexport default class FieldFilterPickerGroup extends Container {\n    //region Config\n    static $name = 'FieldFilterPickerGroup';\n    static type = 'fieldfilterpickergroup';\n    /**\n     * @private\n     */\n    static addFilterButtonDefaultText = 'L{FieldFilterPickerGroup.addFilter}';\n    static configurable = {\n        /**\n         * Array of {@link Core.util.CollectionFilter} configuration objects. One\n         * {@link Core.widget.FieldFilterPicker} will be created\n         * for each object in the array.\n         *\n         * When {@link #config-store} is provided, any filters in the store will\n         * be automatically added and do not need to be provided explicitly.\n         *\n         * Example:\n         * ```javascript\n         * filters: [{\n         *     // Filter properties should exist among field names configured\n         *     // via `fields` or `store`\n         *     property: 'age',\n         *     operator: '<',\n         *     value: 30\n         * },{\n         *     property: 'title',\n         *     operator: 'startsWith',\n         *     value: 'Director'\n         * }]\n         * ```\n         *\n         * @config\n         * @type {CollectionFilterConfig[]}\n         */\n        filters : [],\n        /**\n         * Dictionary of {@link Core.widget.FieldFilterPicker#typedef-FieldOption} representing the fields against which filters can be defined,\n         * keyed by field name.\n         *\n         * If filtering a {@link Grid.view.Grid}, consider using {@link Grid.widget.GridFieldFilterPicker}, which can be configured\n         * with an existing {@link Grid.view.Grid} instead of, or in combination with, defining fields manually.\n         *\n         * Example:\n         * ```javascript\n         * fields: {\n         *     // Allow filters to be defined against the 'age' and 'role' fields in our data\n         *     age  : { text: 'Age', type: 'number' },\n         *     role : { text: 'Role', type: 'string' }\n         * }\n         * ```\n         *\n         * @config {Object<String,FieldOption>}\n         * @deprecated 5.3.0 Syntax accepting FieldOptions[] was deprecated in favor of dictionary and will be removed in 6.0\n         */\n        fields : null,\n        /**\n         * Whether the picker group is disabled.\n         *\n         * @config {Boolean}\n         * @default\n         */\n        disabled : false,\n        /**\n         * Whether the picker group is read-only.\n         *\n         * Example:\n         * fields: [\n         *    { name: 'age', type: 'number' },\n         *    { name: 'title', type: 'string' }\n         * ]\n         *\n         * @config {Boolean}\n         * @default\n         */\n        readOnly : false,\n        layout : 'vbox',\n        /**\n         * The {@link Core.data.Store} whose records will be filtered. The store's {@link Core.data.Store#property-modelClass}\n         * will be used to determine field types.\n         *\n         * This store will be kept in sync with the filters defined in the picker group, and new filters added to the store\n         * via other means will appear in this filter group when they are able to be modified by it. (Some types of filters,\n         * like arbitrary filter functions, cannot be managed through this widget.)\n         *\n         * As a corollary, multiple `FieldFilterPickerGroup`s configured with the same store will stay in sync, showing the\n         * same filters as the store's filters change.\n         *\n         * @config {Core.data.Store}\n         */\n        store : null,\n        /**\n         * When `limitToProperty` is set to the name of an available field (as specified either\n         * explicitly in {@link #config-fields} or implicitly in the\n         * {@link #config-store}'s model), it has the following effects:\n         *\n         * - the picker group will only show filters defined on the specified property\n         * - it will automatically set the `property` to the specified property for all newly added\n         *   filters where the property is not already set\n         * - the property selector is made read-only\n         *\n         * @config {String}\n         */\n        limitToProperty : null,\n        /**\n         * Optional CSS class to apply to the value field(s).\n         *\n         * @config {String}\n         * @private\n         */\n        valueFieldCls : null,\n        /**\n         * Show a button at the bottom of the group that adds a new, blank filter to the group.\n         *\n         * @config {Boolean}\n         * @default\n         */\n        showAddFilterButton : true,\n        /**\n         * Optional predicate that returns whether a given filter can be deleted. When `canDeleteFilter` is provided,\n         * it will be called for each filter and will not show the delete button for those for which the\n         * function returns `false`.\n         *\n         * @config {Function}\n         * @param {*} filter  filter for checking\n         * @returns {Boolean} truthy value if filter can be deleted\n         */\n        canDeleteFilter : null,\n        /**\n         * Optional function that returns {@link Core.widget.FieldFilterPicker} configuration properties for\n         * a given filter. When `getFieldFilterPickerConfig` is provided, it will be called for each filter and the returned\n         * object will be merged with the configuration properties for the individual\n         * {@link Core.widget.FieldFilterPicker} representing that filter.\n         *\n         * The supplied function should accept a single argument, the {@link Core.util.CollectionFilter} whose picker\n         * is being created.\n         *\n         * @config {Function}\n         * @returns {FieldFilterPickerConfig}\n         */\n        getFieldFilterPickerConfig : null,\n        /**\n         * Optional predicate that returns whether a given filter can be managed by this widget. When `canManageFilter`\n         * is provided, it will be used to decide whether to display filters found in the configured\n         * {@link #config-store}.\n         *\n         * @config {Function}\n         * @param {*} filter  filter for checking\n         * @returns {Boolean} truthy value if filter can be managed\n         */\n        canManageFilter : null,\n        /**\n         * Sets the text displayed in the 'add filter' button if one is present.\n         *\n         * @config {String}\n         */\n        addFilterButtonText : null,\n        /**\n         * Whether to raise {@link #event-change} events as the user types into a value field. If `false`,\n         * {@link #event-change} events will be raised only when the value input field's own `change` event\n         * occurs, for example on field blur.\n         *\n         * @config {Boolean}\n         * @default\n         */\n        triggerChangeOnInput : true,\n        /**\n         * @private\n         */\n        items : {\n            pickers : {\n                type       : 'container',\n                layout     : 'vbox',\n                scrollable : true,\n                items      : {}\n            },\n            addFilterButton : {\n                type   : 'button',\n                text   : FieldFilterPickerGroup.addFilterButtonDefaultText,\n                cls    : `b-${FieldFilterPickerGroup.type}-add-button`,\n                hidden : true\n            }\n        },\n        /**\n         * When specified, overrides the built-in list of available operators. See\n         * {@link Core.widget.FieldFilterPicker#config-operators}.\n         *\n         * @config {Object}\n         */\n        operators : null,\n        /**\n         * The date format string used to display dates when using the 'is one of' / 'is not one of' operators with a date\n         * field. Defaults to the current locale's `FieldFilterPicker.dateFormat` value.\n         *\n         * @config {String}\n         * @default\n         */\n        dateFormat : 'L{FieldFilterPicker.dateFormat}'\n    };\n    // endregion\n    static childPickerType = 'fieldfilterpicker';\n    afterConstruct() {\n        const me = this;\n        me.validateConfig();\n        const { addFilterButton } = me.widgetMap;\n        addFilterButton.ion({ click : 'addFilter', thisObj : me });\n        addFilterButton.text = me.L(addFilterButton.text);\n        me.store && me.updateStore(me.store);\n        super.afterConstruct();\n    }\n    changeDateFormat(dateFormat) {\n        return this.L(dateFormat);\n    }\n    validateConfig() {\n        if (!this.fields && !this.store) {\n            throw new Error(\n                `FieldFilterPickerGroup requires either a 'fields' or 'store' config property.`\n            );\n        }\n    }\n    updateFields(newFields) {\n        this.widgetMap.pickers.childItems.forEach(picker => picker.fields = newFields);\n    }\n    updateFilters(newFilters, oldFilters) {\n        const me = this;\n        if (oldFilters) {\n            oldFilters\n                .filter(filter => !newFilters.find(newFilter => newFilter.id === filter.id))\n                .forEach(filter => me.store?.removeFilter(filter.id));\n        }\n        newFilters.forEach(filter => filter.id = filter.id || me.nextFilterId);\n        me.widgetMap.pickers.items = newFilters?.map(filter => me.getPickerRowConfig(filter)) || [];\n    }\n    changeFilters(newFilters) {\n        const { canManageFilter } = this;\n        return (newFilters && canManageFilter)\n            ? newFilters.filter(filter => this.callback(canManageFilter, this, [filter]))\n            : newFilters;\n    }\n    updateStore(newStore) {\n        const me = this;\n        me.detachListeners('store');\n        if (newStore) {\n            // Make sure the store has all of our configured filters\n            me.widgetMap.pickers.childItems.forEach(({ widgetMap: { filterPicker: { filter, isValid } } }) => {\n                newStore.removeFilter(filter.id, true);\n                if (isValid) {\n                    newStore.addFilter(filter, true);\n                }\n            });\n            newStore.filter();\n            me.appendFiltersFromStore();\n            newStore.ion({\n                name    : 'store',\n                filter  : 'onStoreFilter',\n                thisObj : me\n            });\n        }\n        me.widgetMap.pickers.childItems.forEach(picker => picker.store = newStore);\n    }\n    updateShowAddFilterButton(newShow) {\n        this.widgetMap.addFilterButton.hidden = !newShow;\n    }\n    updateAddFilterButtonText(newText) {\n        this.widgetMap.addFilterButton.text = newText ?? FieldFilterPickerGroup.addFilterButtonDefaultText;\n    }\n    /**\n     * Find any filters the store has that we don't know about yet, and add to our list\n     * @private\n     */\n    appendFiltersFromStore() {\n        const\n            me = this;\n        me.store.filters.forEach(filter => {\n            const\n                canManage = me.canManage(filter),\n                { property, operator, id } = filter;\n            if (canManage && property && operator &&\n                !me.filters?.find(filter => filter.id === id)\n            ) {\n                me.appendFilter(filter);\n            }\n        });\n    }\n    /**\n     * @private\n     */\n    canManage(filter) {\n        const me = this;\n        return !me.canManageFilter || (me.callback(me.canManageFilter, me, [filter]) === true);\n    }\n    /**\n     * Get the configuration object for one child FieldFilterPicker.\n     * @param {Core.util.CollectionFilter} filter The filter represented by the child FieldFilterPicker\n     * @returns {Object} The FieldFilterPicker configuration\n     */\n    getFilterPickerConfig(filter) {\n        const\n            me = this,\n            {\n                fields, store, disabled, readOnly, valueFieldCls, operators, limitToProperty, dateFormat,\n                getFieldFilterPickerConfig, triggerChangeOnInput\n            } = me;\n        return {\n            type              : me.constructor.childPickerType,\n            fields            : fields ?? me.getFieldsFromStore(store),\n            filter,\n            store,\n            disabled,\n            readOnly,\n            propertyLocked    : Boolean(limitToProperty),\n            valueFieldCls,\n            operators,\n            dateFormat,\n            internalListeners : {\n                change  : 'onFilterPickerChange',\n                thisObj : me\n            },\n            flex : 1,\n            triggerChangeOnInput,\n            ...(getFieldFilterPickerConfig ? me.callback(getFieldFilterPickerConfig, me, [filter]) : undefined)\n        };\n    }\n    /**\n     * Get store fields as {@link Core.widget.FieldFilterPicker#typedef-FieldOption}s in a dictionary keyed by name.\n     * @private\n     */\n    getFieldsFromStore(store) {\n        return Object.fromEntries(store.modelClass?.fields.map(({ name, type }) => [name, { type }]) ?? []);\n    }\n    getPickerRowConfig(filter) {\n        const\n            me = this,\n            { disabled, readOnly, canDeleteFilter } = me,\n            canDelete = !(canDeleteFilter && (me.callback(canDeleteFilter, me, [filter]) === false));\n        return {\n            type   : 'container',\n            layout : 'box',\n            cls    : {\n                [`b-${FieldFilterPickerGroup.type}-row`]           : true,\n                [`b-${FieldFilterPickerGroup.type}-row-removable`] : canDelete\n            },\n            dataset : {\n                separatorText : me.L('L{FieldFilterPicker.and}')\n            },\n            items : {\n                activeCheckbox : {\n                    type              : 'checkbox',\n                    disabled,\n                    readOnly,\n                    checked           : !Boolean(filter.disabled),\n                    internalListeners : {\n                        change  : 'onFilterActiveChange',\n                        thisObj : me\n                    },\n                    cls : `b-${FieldFilterPickerGroup.type}-filter-active`\n                },\n                filterPicker : me.getFilterPickerConfig(filter),\n                removeButton : {\n                    type              : 'button',\n                    ref               : 'removeButton',\n                    disabled,\n                    readOnly,\n                    hidden            : !canDelete,\n                    cls               : `b-transparent b-${FieldFilterPickerGroup.type}-remove`,\n                    icon              : 'b-fa-trash',\n                    internalListeners : {\n                        click   : 'removeFilter',\n                        thisObj : me\n                    }\n                }\n            }\n        };\n    }\n    get allInputs() {\n        const childInputTypes = [this.constructor.childPickerType, 'button', 'checkbox'];\n        return this.queryAll(w => childInputTypes.includes(w.type));\n    }\n    updateDisabled(newDisabled) {\n        this.allInputs.forEach(input => input.disabled = newDisabled);\n    }\n    updateReadOnly(newReadOnly) {\n        this.allInputs.forEach(input => input.readOnly = newReadOnly);\n    }\n    onFilterActiveChange({ source, checked }) {\n        const\n            me = this,\n            filterIndex = me.getFilterIndex(source),\n            filter = me.filters[filterIndex],\n            filterPicker = me.getFilterPicker(filterIndex);\n        filter.disabled = !checked;\n        filterPicker.onFilterChange();\n        if (me.store && filterPicker.isValid) {\n            me.store.addFilter(filter, true);\n        }\n        me.updateStoreFilter();\n        me.triggerChange();\n    }\n    onFilterPickerChange({ source, filter, isValid }) {\n        const\n            me = this,\n            { store } = me,\n            filterIndex = me.getFilterIndex(source);\n        if (store) {\n            store.removeFilter(filter.id, true);\n            if (isValid) {\n                store.addFilter(filter, true);\n            }\n            me.updateStoreFilter();\n        }\n        Object.assign(me.filters[filterIndex], filter);\n        me.triggerChange();\n    }\n    getFilterIndex(eventSource) {\n        return this.widgetMap.pickers.childItems.indexOf(\n            eventSource.containingWidget\n        );\n    }\n    getPickerRow(index) {\n        return this.widgetMap.pickers.childItems[index];\n    }\n    /**\n     * Return the {@link Core.widget.FieldFilterPicker} for the filter at the specified index.\n     * @param {Number} filterIndex\n     * @returns {Core.widget.FieldFilterPicker}\n     */\n    getFilterPicker(filterIndex) {\n        return this.getPickerRow(filterIndex).widgetMap.filterPicker;\n    }\n    get nextFilterId() {\n        this._nextId = (this._nextId || 0) + 1;\n        return `${this.id}-filter-${this._nextId}`;\n    }\n    removeFilter({ source }) {\n        const\n            me = this,\n            filterIndex = me.getFilterIndex(source),\n            filter = me.filters[filterIndex],\n            pickerRow = me.getPickerRow(filterIndex),\n            newFocusWidget = me.query(w => w.isFocusable && w.type !== 'container' && !pickerRow.contains(w));\n        if (newFocusWidget) {\n            newFocusWidget.focus();\n        }\n        me.removeFilterAt(filterIndex);\n        if (me.store) {\n            me.store.removeFilter(filter.id, true);\n            me.updateStoreFilter();\n        }\n        me.trigger('remove', { filter });\n        me.triggerChange();\n    }\n    /**\n     * Appends a filter at the bottom of the list.\n     * @param {CollectionFilterConfig} [filter={}] Configuration object for the {@link Core.util.CollectionFilter} to\n     * add. Defaults to an empty filter.\n     */\n    addFilter({ property = null, operator = null, value = null } = {}) {\n        const\n            me = this,\n            { filters } = me,\n            newFilter = {\n                property      : me.limitToProperty || property,\n                operator,\n                value,\n                disabled      : false,\n                id            : me.nextFilterId,\n                caseSensitive : false\n            };\n        /**\n         * Fires before a new filter is added to the picker group (and its store, if configured and the filter is valid).\n         * Return `false` from the event handler to prevent the filter being added.\n         *\n         * @event beforeAddFilter\n         * @preventable\n         * @param {Core.widget.FieldFilterPicker} source The FieldFilterPicker instance that fired the event.\n         * @param {CollectionFilterConfig} filter The {@link Core.util.CollectionFilter} configuration object for the\n         *        filter represented by this {@link Core.widget.FieldFilterPicker}.\n         */\n        if (!me.trigger('beforeAddFilter', { filter : newFilter })) {\n            return;\n        }\n        me.appendFilter(newFilter);\n        if (me.getFilterPicker(filters.length - 1).isValid) {\n            me.store?.addFilter(newFilter, true);\n            me.store && me.updateStoreFilter();\n        }\n        me.trigger('add', { filter : newFilter });\n        me.triggerChange();\n    }\n    /**\n     * @private\n     */\n    appendFilter(filter) {\n        const me = this;\n        if (!me.limitToProperty || filter.property === me.limitToProperty) {\n            me.filters.push(filter);\n            me.widgetMap.pickers.add(\n                me.getPickerRowConfig(filter, me.filters.length - 1)\n            );\n        }\n    }\n    onStoreFilter(event) {\n        const me = this;\n        if (me._isUpdatingStore) {\n            return;\n        }\n        const\n            { filters } = event,\n            storeFiltersById = filters.values.reduce((byId, filter) =>\n                ({ ...byId, [filter.id] : filter }), {});\n        for (\n            let filterIndex = me.filters.length - 1;\n            filterIndex >= 0;\n            filterIndex--\n        ) {\n            const\n                filter = me.filters[filterIndex],\n                storeFilter = storeFiltersById[filter.id],\n                filterRow = me.getPickerRow(filterIndex);\n            if (filterRow) {\n                const { filterPicker, activeCheckbox } = filterRow.widgetMap;\n                if (!storeFilter && filterPicker.isValid) {\n                    me.removeFilterAt(filterIndex);\n                }\n                else if (storeFilter !== undefined) {\n                    const\n                        { operator, value, property, disabled, caseSensitive } = storeFilter;\n                    if (filter !== storeFilter) {\n                        Object.assign(filter, { operator, value, property, disabled, caseSensitive });\n                    }\n                    filterPicker.filter = filter;\n                    filterPicker.onFilterChange();\n                    activeCheckbox.checked = !disabled;\n                }\n            }\n        }\n        me.appendFiltersFromStore();\n        me.triggerChange();\n    }\n    /**\n     * Remove the filter at the given index.\n     * @param {Number} filterIndex The index of the filter to remove\n     */\n    removeFilterAt(filterIndex) {\n        const { widgetMap: { pickers }, filters } = this;\n        pickers.remove(pickers.childItems[filterIndex]);\n        filters.splice(filterIndex, 1);\n        this.triggerChange();\n    }\n    /**\n     * Trigger a store re-filter after filters have been silently modified.\n     * @private\n     */\n    updateStoreFilter() {\n        this._isUpdatingStore = true;\n        this.store?.filter();\n        this._isUpdatingStore = false;\n    }\n    /**\n     * Returns the array of filter configuration objects currently represented by this picker group.\n     * @type {CollectionFilterConfig[]}\n     */\n    get value() {\n        return this.filters;\n    }\n    triggerChange() {\n        const\n            { filters } = this,\n            validFilters = filters.filter((f, index) => this.getPickerRow(index).widgetMap.filterPicker.isValid);\n        /**\n         * Fires when any filter in the group is added, removed, or modified.\n         * @event change\n         * @param {Core.widget.FieldFilterPickerGroup} source The FieldFilterPickerGroup instance that fired the event.\n         * @param {CollectionFilterConfig[]} filters The array of {@link Core.util.CollectionFilter} configuration\n         * objects currently represented by the FieldFilterPickerGroup. **IMPORTANT:** Note that this includes all filters\n         * currently present in the UI, including partially completed ones that may not be ready to apply to a Store.\n         * To retrieve only valid filters, use the `validFilters` parameter on this event, or filter out incomplete filters\n         * in your own code.\n         * @param {CollectionFilterConfig[]} validFilters The subset of {@link Core.util.CollectionFilter} configuration\n         * objects in the `filters` parameter on this event that are complete and valid for application to a Store.\n         */\n        this.trigger('change', {\n            filters,\n            validFilters\n        });\n    }\n    /**\n     * Sets all current filters to enabled and checks their checkboxes.\n     */\n    activateAll() {\n        this.setAllActiveStatus(true);\n    }\n    /**\n     * Sets all current filters to disabled and clears their checkboxes.\n     */\n    deactivateAll() {\n        this.setAllActiveStatus(false);\n    }\n    /**\n     * @private\n     */\n    setAllActiveStatus(newActive) {\n        const\n            me = this,\n            { _filters, store } = me;\n        _filters.forEach((filter, filterIndex) => {\n            // Only do anything if status is changing\n            if (newActive === filter.disabled) {\n                const { filterPicker, activeCheckbox } = me.getPickerRow(filterIndex).widgetMap;\n                filter.disabled = !newActive;\n                filterPicker.onFilterChange();\n                activeCheckbox.checked = newActive;\n                if (newActive && store && filterPicker.isValid) {\n                    store.addFilter(filter, true);\n                }\n            }\n        });\n        me.updateStoreFilter();\n    }\n    focus() {\n        const { length } = this._filters;\n        if (length > 0) {\n            this.getPickerRow(length - 1)?.widgetMap.filterPicker.focus();\n        }\n    }\n}\nFieldFilterPickerGroup.initClass();\nFieldFilterPickerGroup._$name = 'FieldFilterPickerGroup';", "import Popup from './Popup.js';\nimport './Button.js';\nimport './TextField.js';\nimport Widget from './Widget.js';\nimport BrowserHelper from '../helper/BrowserHelper.js';\nimport DomHelper from '../helper/DomHelper.js';\n/**\n * @module Core/widget/MessageDialog\n */\nconst items = [\n    {\n        ref     : 'cancelButton',\n        cls     : 'b-messagedialog-cancelbutton b-gray',\n        text    : 'L{Object.Cancel}',\n        onClick : 'up.onCancelClick'\n    },\n    {\n        ref     : 'okButton',\n        cls     : 'b-messagedialog-okbutton b-raised b-blue',\n        text    : 'L{Object.Ok}',\n        onClick : 'up.onOkClick'\n    }\n];\n// Windows has OK button to the left, Mac / Ubuntu to the right\nif (BrowserHelper.isWindows) {\n    items.reverse();\n}\nclass MessageDialogConstructor extends Popup {\n    static $name = 'MessageDialog';\n    static type = 'messagedialog';\n    static get configurable() {\n        return {\n            centered    : true,\n            modal       : true,\n            hidden      : true,\n            autoShow    : false,\n            closeAction : 'hide',\n            title       : '\\xa0',\n            lazyItems : {\n                $config : ['lazy'],\n                value   : [{\n                    cls : 'b-messagedialog-message',\n                    ref : 'message'\n                }, {\n                    type : 'textfield',\n                    cls  : 'b-messagedialog-input',\n                    ref  : 'input'\n                }]\n            },\n            showClass : null,\n            bbar : {\n                overflow : null,\n                items\n            }\n        };\n    }\n    construct() {\n        /**\n         * The enum value for the OK button\n         * @member {Number} okButton\n         * @readOnly\n         */\n        this.okButton = this.yesButton = 1;\n        /**\n         * The enum value for the Cancel button\n         * @member {Number} cancelButton\n         * @readOnly\n         */\n        this.cancelButton = 3;\n        super.construct(...arguments);\n    }\n    // Protect from queryAll -> destroy\n    destroy() {}\n    /**\n     * Shows a confirm dialog with \"Ok\" and \"Cancel\" buttons. The returned promise resolves passing the button identifier\n     * of the button that was pressed ({@link #property-okButton} or {@link #property-cancelButton}).\n     * @function confirm\n     * @param {Object} options An options object for what to show.\n     * @param {String} [options.title] The title to show in the dialog header.\n     * @param {String} [options.message] The message to show in the dialog body.\n     * @param {String} [options.rootElement] The root element of this widget, defaults to document.body. Use this\n     * if you use the MessageDialog inside a web component ShadowRoot\n     * @param {String|ButtonConfig} [options.cancelButton] A text or a config object to apply to the Cancel button.\n     * @param {String|ButtonConfig} [options.okButton] A text or config object to apply to the OK button.\n     * @returns {Promise} A promise which is resolved when the dialog is closed\n     */\n    async confirm() {\n        return this.showDialog('confirm', ...arguments);\n    }\n    /**\n     * Shows an alert popup with a message. The returned promise resolves when the button is clicked.\n     * @function alert\n     * @param {Object} options An options object for what to show.\n     * @param {String} [options.title] The title to show in the dialog header.\n     * @param {String} [options.message] The message to show in the dialog body.\n     * @param {String} [options.rootElement] The root element of this widget, defaults to document.body. Use this\n     * if you use the MessageDialog inside a web component ShadowRoot\n     * @param {String|ButtonConfig} [options.okButton] A text or config object to apply to the OK button.\n     * @returns {Promise} A promise which is resolved when the dialog is closed\n     */\n    async alert() {\n        return this.showDialog('alert', ...arguments);\n    }\n    /**\n     * Shows a popup with a basic {@link Core.widget.TextField} along with a message. The returned promise resolves when\n     * the dialog is closed and yields an Object with a `button` ({@link #property-okButton} or {@link #property-cancelButton})\n     * and a `text` property with the text the user provided\n     * @function prompt\n     * @param {Object} options An options object for what to show.\n     * @param {String} [options.title] The title to show in the dialog header.\n     * @param {String} [options.message] The message to show in the dialog body.\n     * @param {String} [options.rootElement] The root element of this widget, defaults to document.body. Use this\n     * if you use the MessageDialog inside a web component ShadowRoot\n     * @param {TextFieldConfig} [options.textField] A config object to apply to the TextField.\n     * @param {String|ButtonConfig} [options.cancelButton] A text or a config object to apply to the Cancel button.\n     * @param {String|ButtonConfig} [options.okButton] A text or config object to apply to the OK button.\n     * @returns {Promise} A promise which is resolved when the dialog is closed. The promise yields an Object with\n     * a `button` ({@link #property-okButton} or {@link #property-cancelButton}) and a `text` property with the text the\n     * user provided\n     */\n    async prompt({\n        textField\n    }) {\n        const field = this.widgetMap.input;\n        Widget.reconfigure(field, textField);\n        field.value = '';\n        return this.showDialog('prompt', ...arguments);\n    }\n    showDialog(mode, {\n        message = '',\n        title = '\\xa0',\n        cancelButton,\n        okButton,\n        rootElement = document.body\n    }) {\n        const me = this;\n        me.rootElement = rootElement;\n        // Ensure our child items are instanced\n        me.getConfig('lazyItems');\n        me.title                  = me.optionalL(title);\n        me.widgetMap.message.html = me.optionalL(message);\n        me.showClass              = `b-messagedialog-${mode}`;\n        // Normalize string input to config object\n        if (okButton) {\n            okButton = typeof okButton === 'string' ? { text : okButton } : okButton;\n        }\n        if (cancelButton) {\n            cancelButton = typeof cancelButton === 'string' ? { text : cancelButton } : cancelButton;\n        }\n        // Ensure default configs are applied\n        okButton = Object.assign({}, me.widgetMap.okButton.initialConfig, okButton);\n        cancelButton = Object.assign({}, me.widgetMap.cancelButton.initialConfig, cancelButton);\n        // Ensure strings are localized\n        okButton.text = me.optionalL(okButton.text);\n        cancelButton.text = me.optionalL(cancelButton.text);\n        Widget.reconfigure(me.widgetMap.okButton, okButton);\n        Widget.reconfigure(me.widgetMap.cancelButton, cancelButton);\n        me.show();\n        return me.promise = new Promise(resolve => {\n            me.resolve = resolve;\n        });\n    }\n    show() {\n        const activeElement = DomHelper.getActiveElement(this.element);\n        // So that when we focus, we don't close an autoClose popup, but temporarily become\n        // part of its ownership tree.\n        this.owner = this.element.contains(activeElement) ? null : MessageDialogConstructor.fromElement(document.activeElement);\n        return super.show(...arguments);\n    }\n    updateShowClass(showClass, oldShowClass) {\n        const { classList } = this.element;\n        if (oldShowClass) {\n            classList.remove(oldShowClass);\n        }\n        if (showClass) {\n            classList.add(showClass);\n        }\n    }\n    doResolve(value) {\n        const\n            me          = this,\n            { resolve } = me;\n        if (resolve) {\n            const isPrompt = me.showClass === 'b-messagedialog-prompt';\n            if (isPrompt && value === me.okButton && !me.widgetMap.input.isValid) {\n                return;\n            }\n            me.resolve = me.reject = me.promise = null;\n            resolve(isPrompt ? { button : value, text : me.widgetMap.input.value } : value);\n            me.hide();\n        }\n    }\n    onInternalKeyDown(event) {\n        // Cancel on escape key\n        if (event.key === 'Escape') {\n            event.stopImmediatePropagation();\n            this.onCancelClick();\n        }\n        else if (event.key === 'Enter' && !event.target.closest('.b-button')) {\n            event.stopImmediatePropagation();\n            event.preventDefault(); // Needed to not spill over into next MessageDialog if closing this opens another\n            this.onOkClick();\n        }\n        super.onInternalKeyDown(event);\n    }\n    onOkClick() {\n        this.doResolve(MessageDialog.okButton);\n    }\n    onCancelClick() {\n        this.doResolve(MessageDialog.cancelButton);\n    }\n}\n// Register this widget type with its Factory\nMessageDialogConstructor.initClass();\n// Instantiate MessgeDialog Widget on first use.\nconst MessageDialog = new Proxy({}, {\n    get(target, prop) {\n        const\n            instance = target.instance || (target.instance = new MessageDialogConstructor({\n                rootElement : document.body\n            })),\n            result = instance[prop];\n        return typeof result === 'function' ? result.bind(instance) : result;\n    }\n});\n/**\n * A singleton class which shows common dialogs, similar to the native browser APIs (though these methods do not block the UI thread):\n * - {@link Core.widget.MessageDialog#function-confirm} shows a confirmation dialog with Ok / Cancel buttons\n * - {@link Core.widget.MessageDialog#function-alert} shows an dialog with a message\n * - {@link Core.widget.MessageDialog#function-prompt} shows a dialog with a text input field\n *\n * {@inlineexample Core/widget/MessageDialog.js}\n *\n * @class\n * @singleton\n * @extends Core/widget/Popup\n */\nexport default MessageDialog;\n"],
  "mappings": "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",
  "names": ["DragHelperContainer_default", "Target", "Base", "me", "event", "element", "DomHelper", "box", "_a", "context", "floatRootOwner", "dragElement", "clonedNode", "outerWidgetEl", "dragProxy", "proxyBox", "containerElement", "willLoseFocus", "GlobalEvents_default", "dragging", "valid", "draggedTo", "insertBefore", "originalPosition", "invalid", "silent", "proxy", "newX", "newY", "targetElement", "touch", "parent", "centerX", "Rectangle", "next", "noScroll", "DragHelperTranslate_default", "Delayable_default", "x", "y", "outerElement", "proxySelector", "dragWithin", "grabbed", "grabbedParent", "elementToClone", "width", "height", "proxyX", "proxyY", "proxyRect", "dragWithinX", "dragWithinY", "localX", "localY", "relatedElements", "elementStartX", "elementStartY", "relatedEl", "i", "proxyTemplateElement", "relatedElementToDrag", "EventHelper", "el", "constrain", "pageXOffset", "pageYOffset", "scrollManagerConfig", "lockX", "lockY", "relatedElDragFromPos", "snapped", "constrainedX", "constrainedY", "deltaX", "deltaY", "r", "target", "xChanged", "yChanged", "targetRect", "_b", "cloneTarget", "draggingCls", "relatedElStartPos", "proxyMoved", "animateTo", "dragProxyCls", "originalRelatedElements", "removeClonedProxies", "cssClassesToRemove", "rootElementListeners", "DragHelper", "Events_default", "config", "dragStartListeners", "root", "result", "dragListeners", "distance", "ObjectHelper", "lastMouseMoveEvent", "scrollingPageElement", "internallyValid", "alignSpec", "draggedElements", "documentListeners", "ResizeHelper", "BrowserHelper", "skip", "edge", "cursorOffset", "isTouch", "direction", "_c", "parentRectangle", "handleSelector", "coordsFrom", "clientX", "clientY", "mutatedContext", "rectEl", "over", "allowEdgeSwitch", "skipTranslate", "skipUpdatingElement", "updated", "elementWidth", "elementHeight", "style", "minWidth", "maxWidth", "minHeight", "maxHeight", "sign", "newWidth", "newHeight", "eventObject", "changed", "opposite", "offsetWidth", "handleCount", "handleSize", "leftHandle", "rightHandle", "offsetHeight", "topHandle", "bottomHandle", "__publicField", "_Toast", "Widget", "appendTo", "color", "html", "showProgress", "timeout", "DomClassList", "bottomMargin", "toasts", "toast", "Toast", "WidgetHelper", "id", "type", "limit", "widget", "item", "Point", "configOrText", "msg", "Mask", "close", "hasOwn", "obj", "key", "cacheKey", "setParser", "parser", "Default", "formatter", "value", "strict", "Formatter", "format", "cache", "fmt", "standardOptions", "escapeRegExp", "StringHelper", "digitsRe", "newFormatter", "locale", "numFormatRe", "unicodeMinus", "NumberParser", "numFmt", "currency", "percent", "decimal", "grouper", "dot", "fmtDef", "decFmt", "zero", "zeroDec", "_NumberFormat", "scale", "digits", "options", "loc", "LocaleManager_default", "localeDefaults", "template", "match", "m2", "m4", "change", "cacheAs", "ret", "v", "truncator", "name", "setMin", "setMax", "capName", "max", "min", "NumberFormat", "Clipboard", "text", "allowNative", "_content", "e", "source", "oldText", "fromRead", "fromWrite", "Clipboardable_default", "args", "clipboardText", "isCut", "isOwn", "newText", "data", "ArrayHelper", "params", "isString", "stringData", "skipPasteTrigger", "clipboard", "clearShared", "a", "b", "regex", "excludedPropNames", "Override", "override", "staticKeys", "instanceKeys", "targetClass", "properties", "overrideDefinition", "desc", "currentTargetClass", "targetProperty", "targetDesc", "overrides", "VersionHelper", "_Month", "DateHelper", "date", "newDate", "oldDate", "dayColumnIndex", "weekCount", "monthStart", "monthEnd", "startWeekDay", "endWeekDay", "yearChanged", "monthChanged", "changes", "jan1", "dec31", "january", "dec31Week", "week", "year", "weekOfYear", "otherMonth", "month", "nonWorkingDays", "fn", "dayOfMonth", "weekDates", "day", "weekNo", "ownerMonth", "dayTime", "DayTime", "visibleColumnIndex", "isNonWorking", "isHiddenDay", "weekStartDay", "hideNonWorkingDays", "canonicalDayNumbers", "visibleDayColumnIndex", "columnIndex", "canonicalDay", "Month", "_ButtonGroup", "Container", "Rotatable_default", "rotate", "btn", "values", "w", "oldValue", "disabled", "button", "readOnly", "classList", "ButtonGroup", "CalendarPanel", "Panel", "firstPaint", "minRowHeight", "minColumnWidth", "domEvent", "tip", "existingTip", "Tooltip", "was", "length", "d", "hideOtherMonthCells", "disableOtherMonthCells", "endDate", "currentMonth", "isVisible", "showWeekNumber", "showWeekColumn", "sixWeeks", "timeZone", "today", "TimeZoneHelper", "weekElements", "weekDayElements", "dayCellCls", "dayHeaderCls", "disabledCls", "otherMonthCls", "weekendCls", "todayCls", "nonWorkingDayCls", "cell", "cellDay", "cellClassList", "rowIndex", "cellIndex", "lastWorkingColumn", "dates", "weekDayElement", "weekCells", "disabledDates", "weeksContainerChildren", "weekRow", "lastDate", "YearPicker", "clickedYear", "startYear", "oldStartYear", "children", "DisplayField", "TextField", "generateMonthNames", "m", "dateSort", "lhs", "rhs", "emptyArray", "ReadOnlyCombo", "Combo", "DatePicker", "v1", "v2", "oldActiveCell", "activeDate", "dateOfOldActiveCell", "activeCls", "selectedCls", "externalCellRenderer", "isSelected", "isStart", "isEnd", "lastClickedDate", "multiSelect", "_selection", "DateSet", "selection", "singleRange", "size", "generation", "rangeEnds", "toggleFn", "clickedRangeEnd", "start", "end", "newSize", "rangeStartDate", "dateSet", "keyEvent", "keyName", "minDate", "maxDate", "newMonth", "oldActiveDate", "wasActiveDate", "isConfiguring", "activeCell", "wasActiveCell", "activeElement", "duration", "unit", "firstDateOfNewMonth", "lastDateOfNewMonth", "record", "userAction", "yearPicker", "oldYearPicker", "_yearPicker", "monthField", "newData", "_DateSet", "other", "s", "k", "DateField", "PickerField", "picker", "oldPicker", "defaults", "newValue", "focusPicker", "_picker", "pickerConfig", "validateDateOnly", "checkBounds", "keepTime", "timeValue", "input", "preventDefault", "NumberField", "Field", "rawValue", "accept", "raw", "current", "block", "after", "afterValue", "largeStep", "formatted", "maximumFractionDigits", "decimals", "valueDecimals", "trunc", "pos", "leadingZeroes", "decimalPrecision", "step", "lastTouchmove", "delta", "validity", "valueIsNaN", "TimePicker", "seconds", "pm", "hour", "minute", "second", "hours", "time", "initialValue", "amButton", "pmButton", "is24", "TimeField", "expand", "DurationField", "Duration", "units", "magnitude", "isEmpty", "oldVal", "newMagnitude", "newUnit", "parsedDuration", "round", "filterableFieldDataTypes", "isInferrableType", "isSupportedDurationField", "field", "isFilterableField", "emptyString", "clsBase", "multiValueOperators", "valueInputTypes", "commonOperators", "_FieldFilterPicker", "propertyPicker", "operatorPicker", "caseSensitive", "dateFormat", "newDisabled", "newReadOnly", "newPropertyLocked", "newOperatorLocked", "newOperators", "operators", "outOperators", "dataType", "op", "newFields", "fields", "valueFieldCls", "fieldType", "operator", "onValueChange", "filterValues", "isMultiSelectValueField", "operatorArgCount", "getValueFieldConfig", "fieldIsRelation", "triggerChangeOnInput", "valueFieldPlaceholders", "valueFieldCfg", "index", "extraValuesToInclude", "relatedDisplayField", "sortedValues", "foreignStore", "uniqueValues", "primitiveValues", "durationStr", "timestamp", "fieldDef", "fieldName", "title", "foreignKey", "newStore", "action", "valueFields", "property", "isMultiValue", "_filter", "checked", "wasMultiSelectValueField", "prevArgCount", "filter", "isValid", "operatorOptions", "forceRefreshValueFields", "propertyOptions", "refreshValueFields", "valueField", "fieldIndex", "newFieldType", "operatorArgCountLookup", "missingValue", "f", "store", "firstValue", "valueType", "argCount", "FieldFilterPicker", "Label", "_FieldFilterPickerGroup", "addFilterButton", "newFilters", "oldFilters", "newFilter", "canManageFilter", "newShow", "canManage", "limitToProperty", "getFieldFilterPickerConfig", "canDeleteFilter", "canDelete", "childInputTypes", "filterIndex", "filterPicker", "eventSource", "pickerRow", "newFocusWidget", "filters", "storeFiltersById", "byId", "storeFilter", "filterRow", "activeCheckbox", "pickers", "validFilters", "newActive", "_filters", "FieldFilterPickerGroup", "items", "_MessageDialogConstructor", "Popup", "textField", "mode", "message", "cancelButton", "okButton", "rootElement", "resolve", "showClass", "oldShowClass", "isPrompt", "MessageDialog", "MessageDialogConstructor", "prop", "instance", "MessageDialog_default"]
}
