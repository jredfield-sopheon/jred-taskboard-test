{
  "version": 3,
  "sources": ["../../../../Grid/lib/Grid/feature/export/Utils.js", "../../../../Grid/lib/Grid/view/export/field/ExportRowsCombo.js", "../../../../Grid/lib/Grid/view/export/field/ExportOrientationCombo.js", "../../../../Grid/lib/Grid/view/export/ExportDialog.js", "../../../../Grid/lib/Grid/feature/export/exporter/Exporter.js", "../../../../Grid/lib/Grid/feature/export/exporter/MultiPageExporter.js", "../../../../Grid/lib/Grid/feature/export/exporter/MultiPageVerticalExporter.js", "../../../../Grid/lib/Grid/feature/export/exporter/SinglePageExporter.js", "../../../../Grid/lib/Grid/feature/export/PdfExport.js", "../../../../Grid/lib/Grid/feature/export/mixin/PrintMixin.js"],
  "sourcesContent": ["import BrowserHelper from '../../../Core/helper/BrowserHelper.js';\nexport const RowsRange = {\n    all     : 'all',\n    visible : 'visible'\n};\n// Paper format behaves different between in portrait/landscape mode and in print/export. For the most popular format\n// A3/A4 we pick values which work best both for print and export. Legal and Letter formats do not require any hacks.\nexport const PaperFormat = {\n    A6 : {\n        width  : 4.11,\n        height : 5.81\n    },\n    A5 : {\n        width  : 5.81,\n        height : 8.25\n    },\n    A4 : {\n        width           : 8.25,\n        height          : 11.69,\n        portraitWidth   : 8.3,\n        portraitHeight  : 11.7,\n        landscapeWidth  : 11.7,\n        landscapeHeight : 8.26\n    },\n    A3 : {\n        width           : 11.69,\n        height          : 16.49,\n        portraitWidth   : 11.7,\n        // 16.54 works perfect in print, but in export (puppeteer) it results in extra empty page\n        portraitHeight  : 16.49,\n        landscapeWidth  : 16.54,\n        landscapeHeight : 11.68\n    },\n    Legal : {\n        width  : 8.5,\n        height : 14\n    },\n    Letter : {\n        width  : 8.5,\n        height : 11\n    }\n};\nexport function getPrintPaperSizeAdjustments() {\n    if (BrowserHelper.isFirefox) {\n        return {\n            portraitWidth   : 0,\n            portraitHeight  : 0,\n            landscapeWidth  : 0,\n            landscapeHeight : 0.26\n        };\n    }\n    if (BrowserHelper.isSafari) {\n        return {\n            portraitWidth   : 0,\n            portraitHeight  : 0.1,\n            landscapeWidth  : 0,\n            landscapeHeight : 0.5\n        };\n    }\n    return {\n        portraitWidth   : 0,\n        portraitHeight  : 0,\n        landscapeWidth  : 0,\n        landscapeHeight : 0.25\n    };\n};\nexport const Orientation = {\n    portrait  : 'portrait',\n    landscape : 'landscape'\n};\nexport const FileFormat = {\n    pdf : 'pdf',\n    png : 'png'\n};\nexport const FileMIMEType = {\n    pdf : 'application/pdf',\n    png : 'image/png'\n};\n", "import { RowsRange } from '../../../feature/export/Utils.js';\nimport Combo from '../../../../Core/widget/Combo.js';\nexport default class ExportRowsCombo extends Combo {\n    //region Config\n    static get $name() {\n        return 'ExportRowsCombo';\n    }\n    // Factoryable type name\n    static get type() {\n        return 'exportrowscombo';\n    }\n    static get defaultConfig() {\n        return {\n            editable : false\n        };\n    }\n    //endregion\n    buildItems() {\n        const me = this;\n        return [\n            { id : RowsRange.all, text : me.L('L{all}') },\n            { id : RowsRange.visible, text : me.L('L{visible}') }\n        ];\n    }\n}\n// Register this widget type with its Factory\nExportRowsCombo.initClass();\nExportRowsCombo._$name = 'ExportRowsCombo';", "import { Orientation } from '../../../feature/export/Utils.js';\nimport Combo from '../../../../Core/widget/Combo.js';\nexport default class ExportOrientationCombo extends Combo {\n    //region Config\n    static get $name() {\n        return 'ExportOrientationCombo';\n    }\n    // Factoryable type name\n    static get type() {\n        return 'exportorientationcombo';\n    }\n    static get defaultConfig() {\n        return {\n            editable : false\n        };\n    }\n    //endregion\n    buildItems() {\n        const me = this;\n        return [\n            { id : Orientation.portrait, text : me.L('L{portrait}') },\n            { id : Orientation.landscape, text : me.L('L{landscape}') }\n        ];\n    }\n}\n// Register this widget type with its Factory\nExportOrientationCombo.initClass();\nExportOrientationCombo._$name = 'ExportOrientationCombo';", "import Popup from '../../../Core/widget/Popup.js';\nimport LocaleManager from '../../../Core/localization/LocaleManager.js';\nimport './field/ExportRowsCombo.js';\nimport './field/ExportOrientationCombo.js';\nimport { FileFormat, PaperFormat } from '../../feature/export/Utils.js';\nimport '../../../Core/widget/Checkbox.js';\nimport Field from '../../../Core/widget/Field.js';\nfunction buildComboItems(obj, fn = x => x) {\n    return Object.keys(obj).map(key => ({ id : key, text : fn(key) }));\n}\n/**\n * @module Grid/view/export/ExportDialog\n */\n/**\n * Dialog window used by the {@link Grid/feature/export/PdfExport PDF export feature}. It allows users to select export\n * options like paper format and columns to export. This dialog contains a number of predefined\n * {@link Core/widget/Field fields} which you can access through the popup's {@link #property-widgetMap}.\n *\n * ## Default widgets\n *\n * The default widgets of this dialog are:\n *\n * | Widget ref             | Type                         | Weight | Description                                          |\n * |------------------------|------------------------------|--------|----------------------------------------------------- |\n * | `columnsField`         | {@link Core/widget/Combo}    | 100    | Choose columns to export                             |\n * | `rowsRangeField`       | {@link Core/widget/Combo}    | 200    | Choose which rows to export                          |\n * | `exporterTypeField`    | {@link Core/widget/Combo}    | 300    | Type of the exporter to use                          |\n * | `alignRowsField`       | {@link Core/widget/Checkbox} | 400    | Align row top to the page top on every exported page |\n * | `repeatHeaderField`    | {@link Core/widget/Checkbox} | 500    | Toggle repeating headers on / off                    |\n * | `fileFormatField`      | {@link Core/widget/Combo}    | 600    | Choose file format                                   |\n * | `paperFormatField`     | {@link Core/widget/Combo}    | 700    | Choose paper format                                  |\n * | `orientationField`     | {@link Core/widget/Combo}    | 800    | Choose orientation                                   |\n *\n * The default buttons are:\n *\n * | Widget ref             | Type                       | Weight | Description                                          |\n * |------------------------|----------------------------|--------|------------------------------------------------------|\n * | `exportButton`         | {@link Core/widget/Button} | 100    | Triggers export                                      |\n * | `cancelButton`         | {@link Core/widget/Button} | 200    | Cancel export                                        |\n *\n * Bottom buttons may be customized using `bbar` config passed to `exportDialog`:\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         pdfExport : {\n *             exportDialog : {\n *                 bbar : {\n *                     items : {\n *                         exportButton : { text : 'Go!' }\n *                     }\n *                 }\n *             }\n *         }\n *     }\n * });\n * ```\n * ## Configuring default widgets\n *\n * Widgets can be customized with {@link Grid/feature/export/PdfExport#config-exportDialog} config:\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         pdfExport : {\n *             exportDialog : {\n *                 items : {\n *                     // hide the field\n *                     orientationField  : { hidden : true },\n *\n *                     // reorder fields\n *                     exporterTypeField : { weight : 150 },\n *\n *                     // change default format in exporter\n *                     fileFormatField   : { value : 'png' }\n *                 }\n *             }\n *         }\n *     }\n * });\n *\n * grid.features.pdfExport.showExportDialog();\n * ```\n *\n * ## Configuring default columns\n *\n * By default all visible columns are selected in the export dialog. This is managed by the\n * {@link #config-autoSelectVisibleColumns} config. To change default selected columns you should disable this config\n * and set field value. Value should be an array of valid column ids (or column instances). This way you can\n * preselect hidden columns:\n *\n * ```javascript\n * const grid = new Grid({\n *     columns : [\n *         { id : 'name', text : 'Name', field : 'name' },\n *         { id : 'age', text : 'Age', field : 'age' },\n *         { id : 'city', text : 'City', field : 'city', hidden : true }\n *     ],\n *     features : {\n *         pdfExport : {\n *             exportDialog : {\n *                 autoSelectVisibleColumns : false,\n *                 items : {\n *                     columnsField : { value : ['name', 'city'] }\n *                 }\n *             }\n *         }\n *     }\n * })\n *\n * // This will show export dialog with Name and City columns selected\n * // even though City column is hidden in the UI\n * grid.features.pdfExport.showExportDialog();\n * ```\n *\n * ## Adding fields\n *\n * You can add your own fields to the export dialog. To make such field value acessible to the feature it should follow\n * a specific naming pattern - it should have `ref` config ending with `Field`, see other fields for reference -\n * `orientationField`, `columnsField`, etc. Fields not matching this pattern are ignored. When values are collected from\n * the dialog, `Field` part of the widget reference is removed, so `orientationField` becomes `orientation`, `fooField`\n * becomes `foo`, etc.\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         pdfExport : {\n *             exportDialog : {\n *                 items : {\n *                     // This field gets into export config\n *                     fooField : {\n *                         type : 'text',\n *                         label : 'Foo',\n *                         value : 'FOO'\n *                     },\n *\n *                     // This one does not, because name doesn't end with `Field`\n *                     bar : {\n *                         type : 'text',\n *                         label : 'Bar',\n *                         value : 'BAR'\n *                     },\n *\n *                     // Add a container widget to wrap some fields together\n *                     myContainer : {\n *                         type : 'container',\n *                         items : {\n *                             // This one gets into config too despite the nesting level\n *                             bazField : {\n *                                 type : 'text',\n *                                 label : 'Baz',\n *                                 value : 'BAZ'\n *                             }\n *                         }\n *                     }\n *                 }\n *             }\n *         }\n *     }\n * });\n *\n * // Assuming export dialog is opened and export triggered with default values\n * // you can receive custom field values here\n * grid.on({\n *     beforePdfExport({ config }) {\n *         console.log(config.foo) // 'FOO'\n *         console.log(config.bar) // undefined\n *         console.log(config.baz) // 'BAZ'\n *     }\n * });\n * ```\n *\n * ## Configuring widgets at runtime\n *\n * If you don't know column ids before grid instantiation or you want a flexible config, you can change widget values\n * before dialog pops up:\n *\n * ```javascript\n * const grid = new Grid({\n *     columns : [\n *         { id : 'name', text : 'Name', field : 'name' },\n *         { id : 'age', text : 'Age', field : 'age' },\n *         { id : 'city', text : 'City', field : 'city', hidden : true }\n *     ],\n *     features : {\n *         pdfExport : true\n *     }\n * });\n *\n * // Such listener would ignore autoSelectVisibleColumns config. Similar to the snippet\n * // above this will show Name and City columns\n * grid.features.pdfExport.exportDialog.on({\n *     beforeShow() {\n *         this.widgetMap.columnsField.value = ['age', 'city']\n *     }\n * });\n * ```\n *\n * @extends Core/widget/Popup\n */\nexport default class ExportDialog extends Popup {\n    //region Config\n    static get $name() {\n        return 'ExportDialog';\n    }\n    static get type() {\n        return 'exportdialog';\n    }\n    static get configurable() {\n        return {\n            autoShow  : false,\n            autoClose : false,\n            closable  : true,\n            centered  : true,\n            /**\n             * Returns map of values of dialog fields.\n             * @member {Object<String,Object>} values\n             * @readonly\n             */\n            /**\n             * Grid instance to build export dialog for\n             * @config {Grid.view.Grid}\n             */\n            client : null,\n            /**\n             * Set to `false` to not preselect all visible columns when the dialog is shown\n             * @config {Boolean}\n             */\n            autoSelectVisibleColumns : true,\n            /**\n             * Set to `false` to allow using PNG + Multipage config in export dialog\n             * @config {Boolean}\n             */\n            hidePNGMultipageOption : true,\n            /**\n             * When set to `true` labels in the dialog will say `Print` instead of `Export`\n             * @prp {Boolean}\n             */\n            useBrowserPrint : false,\n            title : 'L{exportSettings}',\n            maxHeight : '80%',\n            scrollable : {\n                overflowY : true\n            },\n            defaults : {\n                localeClass : this\n            },\n            items : {\n                columnsField : {\n                    type         : 'combo',\n                    label        : 'L{ExportDialog.columns}',\n                    name         : 'columns',\n                    store        : {},\n                    valueField   : 'id',\n                    displayField : 'text',\n                    multiSelect  : true,\n                    weight       : 100,\n                    maxHeight    : 100\n                },\n                rowsRangeField : {\n                    type   : 'exportrowscombo',\n                    label  : 'L{ExportDialog.rows}',\n                    name   : 'rowsRange',\n                    value  : 'all',\n                    weight : 200\n                },\n                exporterTypeField : {\n                    type         : 'combo',\n                    label        : 'L{ExportDialog.exporterType}',\n                    name         : 'exporterType',\n                    editable     : false,\n                    value        : 'singlepage',\n                    displayField : 'text',\n                    buildItems() {\n                        const dialog = this.parent;\n                        return dialog.exporters.map(exporter => ({\n                            id   : exporter.type,\n                            text : dialog.optionalL(exporter.title, this)\n                        }));\n                    },\n                    onChange({ value }) {\n                        this.owner.widgetMap.alignRowsField.hidden    = value === 'singlepage';\n                        this.owner.widgetMap.repeatHeaderField.hidden = value !== 'multipagevertical';\n                    },\n                    weight : 300\n                },\n                alignRowsField : {\n                    type    : 'checkbox',\n                    label   : 'L{ExportDialog.alignRows}',\n                    name    : 'alignRows',\n                    checked : false,\n                    hidden  : true,\n                    weight  : 400\n                },\n                repeatHeaderField : {\n                    type        : 'checkbox',\n                    label       : 'L{ExportDialog.repeatHeader}',\n                    name        : 'repeatHeader',\n                    localeClass : this,\n                    hidden      : true,\n                    weight      : 500\n                },\n                fileFormatField : {\n                    type        : 'combo',\n                    label       : 'L{ExportDialog.fileFormat}',\n                    name        : 'fileFormat',\n                    localeClass : this,\n                    editable    : false,\n                    value       : 'pdf',\n                    items       : [],\n                    onChange({ value, oldValue }) {\n                        const dialog = this.parent;\n                        if (dialog.hidePNGMultipageOption) {\n                            const\n                                exporterField = dialog.widgetMap.exporterTypeField,\n                                exporter      = exporterField.store.find(r => r.id === 'singlepage');\n                            if (value === FileFormat.png && exporter) {\n                                this._previousDisabled = exporterField.disabled;\n                                exporterField.disabled = true;\n                                this._previousValue = exporterField.value;\n                                exporterField.value = 'singlepage';\n                            }\n                            else if (oldValue === FileFormat.png && this._previousValue) {\n                                exporterField.disabled = this._previousDisabled;\n                                exporterField.value    = this._previousValue;\n                            }\n                        }\n                    },\n                    weight : 600\n                },\n                paperFormatField : {\n                    type     : 'combo',\n                    label    : 'L{ExportDialog.paperFormat}',\n                    name     : 'paperFormat',\n                    editable : false,\n                    value    : 'A4',\n                    items    : [],\n                    weight   : 700\n                },\n                orientationField : {\n                    type   : 'exportorientationcombo',\n                    label  : 'L{ExportDialog.orientation}',\n                    name   : 'orientation',\n                    value  : 'portrait',\n                    weight : 800\n                }\n            },\n            bbar : {\n                defaults : {\n                    localeClass : this\n                },\n                items : {\n                    exportButton : {\n                        color   : 'b-green',\n                        text    : 'L{ExportDialog.export}',\n                        weight  : 100,\n                        onClick : 'up.onExportClick'\n                    },\n                    cancelButton : {\n                        color   : 'b-gray',\n                        text    : 'L{ExportDialog.cancel}',\n                        weight  : 200,\n                        onClick : 'up.onCancelClick'\n                    }\n                }\n            }\n        };\n    }\n    //endregion\n    construct(config = {}) {\n        const\n            me         = this,\n            { client } = config;\n        if (!client) {\n            throw new Error('`client` config is required');\n        }\n        me.columnsStore = client.columns.chain(column => column.isLeaf && column.exportable, null, { excludeCollapsedRecords : false });\n        me.applyInitialValues(config);\n        super.construct(config);\n        LocaleManager.ion({\n            locale  : 'onLocaleChange',\n            prio    : -1,\n            thisObj : me\n        });\n    }\n    updateUseBrowserPrint(value) {\n        const me = this;\n        me.whenVisible(() => {\n            if (value) {\n                me.widgetMap.exportButton.text = me.L('L{ExportDialog.print}');\n                me.widgetMap.fileFormatField.hidden = true;\n                me.title = me.L('L{printSettings}');\n            }\n            else {\n                me.widgetMap.exportButton.text = me.L('L{ExportDialog.export}');\n                me.widgetMap.fileFormatField.hidden = Boolean(me.widgetMap.fileFormatField.initialConfig.hidden);\n                me.title = me.L('L{exportSettings}');\n            }\n        });\n    }\n    applyInitialValues(config) {\n        const\n            me    = this,\n            items = config.items = config.items || {};\n        config.width               = config.width || me.L('L{width}');\n        config.defaults            = config.defaults || {};\n        config.defaults.labelWidth = config.defaults.labelWidth || me.L('L{ExportDialog.labelWidth}');\n        items.columnsField     = items.columnsField || {};\n        items.fileFormatField  = items.fileFormatField || {};\n        items.paperFormatField = items.paperFormatField || {};\n        items.fileFormatField.items  = buildComboItems(FileFormat, value => value.toUpperCase());\n        items.paperFormatField.items = buildComboItems(PaperFormat);\n        items.columnsField.store = me.columnsStore;\n    }\n    onBeforeShow() {\n        const { columnsField, alignRowsField, exporterTypeField, repeatHeaderField } = this.widgetMap;\n        if (this.autoSelectVisibleColumns) {\n            columnsField.value = this.columnsStore.query(c => !c.hidden);\n        }\n        alignRowsField.hidden    = exporterTypeField.value === 'singlepage';\n        repeatHeaderField.hidden = exporterTypeField.value !== 'multipagevertical';\n        super.onBeforeShow?.(...arguments);\n    }\n    onLocaleChange() {\n        const\n            labelWidth = this.L('L{labelWidth}');\n        this.width = this.L('L{width}');\n        this.eachWidget(widget => {\n            if (widget instanceof Field) {\n                widget.labelWidth = labelWidth;\n            }\n        });\n    }\n    onExportClick() {\n        const values = this.values;\n        /**\n         * Fires when export button is clicked\n         * @event export\n         * @param {Object} values Object containing config for {@link Grid.feature.export.PdfExport#function-export export()} method\n         * @category Export\n         */\n        this.trigger('export', { values });\n    }\n    onCancelClick() {\n        /**\n         * Fires when cancel button is clicked. Popup will hide itself.\n         * @event cancel\n         * @category Export\n         */\n        this.trigger('cancel');\n        this.hide();\n    }\n}\nExportDialog.initClass();\nExportDialog._$name = 'ExportDialog';", "import DomSync from '../../../../Core/helper/DomSync.js';\nimport TemplateHelper from '../../../../Core/helper/TemplateHelper.js';\nimport BrowserHelper from '../../../../Core/helper/BrowserHelper.js';\nimport Base from '../../../../Core/Base.js';\nimport Localizable from '../../../../Core/localization/Localizable.js';\nimport IdHelper from '../../../../Core/helper/IdHelper.js';\nimport DomHelper from '../../../../Core/helper/DomHelper.js';\nimport { getPrintPaperSizeAdjustments, RowsRange } from '../Utils.js';\nimport Events from '../../../../Core/mixin/Events.js';\nimport Delayable from '../../../../Core/mixin/Delayable.js';\n/**\n * @module Grid/feature/export/exporter/Exporter\n */\n/**\n * Base class for all exporters\n * @mixes Core/localization/Localizable\n * @mixes Core/mixin/Events\n */\nexport default class Exporter extends Delayable(Events(Localizable(Base))) {\n    static get defaultConfig() {\n        return {\n            /**\n             * `True` to replace all linked CSS files URLs to absolute before passing HTML to the server.\n             * When passing a string the current origin of the CSS files URLS will be replaced by the passed origin.\n             *\n             * For example: css files pointing to /app.css will be translated from current origin to {translateURLsToAbsolute}/app.css\n             * @config {Boolean|String}\n             * @default\n             */\n            translateURLsToAbsolute : true,\n            /**\n             * When true links are converted to absolute by combining current window location (with replaced origin) with\n             * resource link.\n             * When false links are converted by combining new origin with resource link (for angular)\n             * @config {Boolean}\n             * @default\n             */\n            keepPathName : true,\n            /**\n             * This method accepts all stylesheets (link and style tags) which are supposed to be put on the page. Use this\n             * hook method to filter or modify them.\n             *\n             * ```javascript\n             * new Grid({\n             *     features: {\n             *         pdfExport: {\n             *             // filter out inline styles and bootstrap.css\n             *             filterStyles: styles => styles.filter(item => !/(link|bootstrap.css)/.test(item))\n             *         }\n             *     }\n             * });\n             * ```\n             * @param {String[]} styles\n             * @returns {String[]} List of stylesheets to put on the exported page\n             */\n            filterStyles : styles => styles\n        };\n    }\n    static inchToPx(value) {\n        // 1in = 96px for screens\n        // https://developer.mozilla.org/en-US/docs/Web/CSS/length#Absolute_length_units\n        return value * 96;\n    }\n    /**\n     * Template of an extracted page.\n     * @param {Object} data Data for the page template\n     * @returns {String}\n     */\n    pageTpl(data) {\n        const\n            {\n                title,\n                header,\n                footer,\n                styles,\n                htmlClasses,\n                bodyClasses = [],\n                paperHeight,\n                paperWidth,\n                html,\n                currentPage,\n                isPrint\n            } = data;\n        let { htmlStyle = '', bodyStyle = '' } = data;\n        bodyClasses.push(`b-${this.constructor.type}`);\n        // Other classes needed on outer element.\n        if (DomHelper.scrollBarWidth) {\n            bodyClasses.push('b-visible-scrollbar');\n        }\n        else {\n            bodyClasses.push('b-overlay-scrollbar');\n        }\n        if (BrowserHelper.isChrome) {\n            bodyClasses.push('b-chrome');\n        }\n        else if (BrowserHelper.isSafari) {\n            bodyClasses.push('b-safari');\n        }\n        else if (BrowserHelper.isFirefox) {\n            bodyClasses.push('b-firefox');\n        }\n        htmlStyle = isPrint ? htmlStyle : `${htmlStyle}; width: ${paperWidth}in; height: ${paperHeight}in;`;\n        bodyStyle = isPrint ? `${bodyStyle}; width: ${paperWidth}in;` : `${bodyStyle}; width: ${paperWidth}in; height: ${paperHeight}in;`;\n        return TemplateHelper.tpl`\n            <!DOCTYPE html>\n            <html class=\"${htmlClasses} b-print-root\" style=\"${htmlStyle}\">\n                <head>\n                    <meta content=\"text/html; charset=UTF-8\" http-equiv=\"Content-Type\" />\n                    <title>${title}</title>\n                    ${styles.join('')}\n                </head>\n                <body class=\"b-export ${bodyClasses.join(' ')}\" style=\"${bodyStyle}\">\n                    <div class=\"b-export-content b-page-${currentPage}\">\n                        ${header && `<div class=\"b-export-header\" style=\"width: 100%\">${header}</div>`}\n                        <div class=\"b-export-body\"><div class=\"b-export-viewport\">${html}</div></div>\n                        ${footer && `<div class=\"b-export-footer\" style=\"width: 100%\">${footer}</div>`}\n                    </div>\n                </body>\n            </html>`;\n    }\n    /**\n     * Returns all style-related tags: `<style>` and `<link rel=\"stylesheet\">`\n     * @property {String[]}\n     * @readonly\n     */\n    get stylesheets() {\n        const me = this;\n        if (me._stylesheets) {\n            return me._stylesheets;\n        }\n        const\n            translate       = me.translateURLsToAbsolute,\n            origin          = globalThis.origin,\n            styleSheetNodes = Array.from(document.querySelectorAll('link[rel=\"stylesheet\"], style')),\n            styles          = [];\n        styleSheetNodes.forEach(node => {\n            node = node.cloneNode(true);\n            // put absolute URL to node `href` attribute\n            if (translate && node.href) {\n                let result;\n                if (translate === true) {\n                    result = node.href;\n                }\n                // translate is truthy if we are here, which means it is string now\n                else if (this.keepPathName) {\n                    result = node.href.replace(origin, translate);\n                }\n                else {\n                    result = new URL(node.getAttribute('href'), translate);\n                }\n                node.setAttribute('href', result);\n            }\n            let styleText = node.outerHTML;\n            if (translate && /style/i.test(node.tagName)) {\n                const converter = me.getStyleTagURLConverter(translate);\n                styleText = styleText.replace(/url\\(['\"]?(.+?)['\"]?\\)/g, converter);\n            }\n            styles.push(styleText);\n        });\n        return me._stylesheets = me.filterStyles(styles);\n    }\n    set stylesheets(value) {\n        this._stylesheets = value ? this.filterStyles(value) : value;\n    }\n    getStyleTagURLConverter(translate) {\n        return function(match, url) {\n            let result;\n            try {\n                let base;\n                // Filter out local references, e.g. to svg marker\n                if (/^#/.test(url)) {\n                    result = match;\n                }\n                else {\n                    if (translate === true) {\n                        base = globalThis.location.href;\n                    }\n                    // translate is truthy if we are here, which means it is string now\n                    else if (this.keepPathName) {\n                        base = globalThis.location.href.replace(globalThis.location.origin, translate);\n                    }\n                    else {\n                        base = translate;\n                    }\n                    result = `url('${new URL(url, base).href}')`;\n                }\n            }\n            catch (e) {\n                result = match;\n            }\n            return result;\n        }.bind(this);\n    }\n    saveState({ client }) {\n        this.state = client.state;\n    }\n    async restoreState({ client }) {\n        const\n            promises  = [],\n            detachers = new Set();\n        detachers.add(\n            client.scrollable.ion({\n                scroll() {\n                    promises.push(client.scrollable.await('scrollEnd'));\n                }\n            })\n        );\n        client.eachSubGrid(({ header, scrollable }) => {\n            detachers.add(\n                scrollable.ion({\n                    scroll() {\n                        promises.push(scrollable.await('scrollEnd'));\n                    }\n                })\n            );\n            detachers.add(\n                header.scrollable.ion({\n                    scroll() {\n                        promises.push(header.scrollable.await('scrollEnd'));\n                    }\n                })\n            );\n        });\n        client.state = this.state;\n        await Promise.all(promises);\n        detachers.forEach(fn => fn());\n    }\n    beforeExport() {\n        // Into this element we will put HTML for export\n        this.element = document.createElement('div');\n    }\n    //region DOM helpers\n    cloneElement(element, target = this.element, clear = true) {\n        if (clear) {\n            target.innerHTML = '';\n        }\n        target.appendChild(element.cloneNode(true));\n        DomHelper.removeEachSelector(target, '.b-grid-row,.b-grid-merged-cells-container');\n        const maskEl = target.querySelector('.b-gridbase > .b-mask');\n        if (maskEl) {\n            maskEl.remove();\n        }\n    }\n    createPlaceholder(el, clear = true, config = {}) {\n        if (clear) {\n            el.innerHTML = '';\n        }\n        return DomHelper.createElement(Object.assign({\n            parent : el,\n            id     : IdHelper.generateId('export')\n        }, config));\n    }\n    prepareElement({ client }) {\n        const { tbar, bbar } = client;\n        if (tbar) {\n            this.element.querySelector(`#${tbar.id}`).remove();\n        }\n        if (bbar) {\n            this.element.querySelector(`#${bbar.id}`).remove();\n        }\n    }\n    /**\n     * Appends generated header/footer element to the document body to measure their height\n     * @param html\n     * @returns {Number}\n     * @private\n     */\n    measureElement(html = '') {\n        if (html instanceof HTMLElement) {\n            html = html.outerHTML;\n        }\n        const target = DomHelper.createElement({\n            parent : document.body,\n            style  : {\n                visibility : 'hidden',\n                position   : 'absolute'\n            },\n            // Add html to measure to a div between two other divs to take margin into account\n            html : `<div style=\"height: 1px\"></div>${html}<div style=\"height: 1px\"></div>`\n        });\n        const result = target.offsetHeight - 2;\n        target.remove();\n        return result;\n    }\n    // Converts local urls to absolute\n    prepareHTML(html) {\n        if (html instanceof HTMLElement) {\n            html = html.outerHTML;\n        }\n        const target = DomHelper.createElement({\n            parent : document.body,\n            style  : {\n                visibility : 'hidden',\n                position   : 'absolute'\n            },\n            html\n        });\n        const elements = target.querySelectorAll('img');\n        for (let i = 0, l = elements.length; i < l; i++) {\n            elements[i].setAttribute('src', elements[i].src);\n        }\n        const result = target.innerHTML;\n        target.remove();\n        return result;\n    }\n    getVirtualScrollerHeight(client) {\n        let result = 0;\n        // If overlay scroll is enabled, this will return 0\n        // when disabled, it will report proper virtualScrollers element height\n        client.eachSubGrid(subGrid => {\n            if (subGrid.overflowingHorizontally) {\n                result = DomHelper.scrollBarWidth;\n            }\n        });\n        // If there's a visible scrollbar, need to also take border height into account\n        return result === 0 ? result : (result + 1);\n    }\n    //endregion\n    // Use carefully picked values for portrait/landscape mode and fallback to legacy width/height in case use\n    // has them overridden\n    getPaperWidth(paperFormat, isPortrait) {\n        if ('portraitWidth' in paperFormat) {\n            const prop = isPortrait ? 'portraitWidth' : 'landscapeWidth';\n            return paperFormat[prop] - (this.exportMeta.isPrinting ? getPrintPaperSizeAdjustments()[prop] : 0);\n        }\n        else {\n            return isPortrait ? paperFormat.width : paperFormat.height;\n        }\n    }\n    getPaperHeight(paperFormat, isPortrait) {\n        if ('portraitHeight' in paperFormat) {\n            const prop = isPortrait ? 'portraitHeight' : 'landscapeHeight';\n            return paperFormat[prop] - (this.exportMeta.isPrinting ? getPrintPaperSizeAdjustments()[prop] : 0);\n        }\n        else {\n            return isPortrait ? paperFormat.height : paperFormat.width;\n        }\n    }\n    inchToPx(value) {\n        // 1in = 96px for screens\n        // https://developer.mozilla.org/en-US/docs/Web/CSS/length#Absolute_length_units\n        return value * 96;\n    }\n    getScaleValue(base, value) {\n        return Math.floor((base * 10000 / value)) / 10000;\n    }\n    getVisibleRowsCount(client) {\n        const\n            rowManager        = client.rowManager,\n            // We cannot rely on `visibleRowCount` property, it is a mere estimate\n            firstVisibleIndex = rowManager.rows.indexOf(rowManager.firstVisibleRow),\n            lastVisibleIndex  = rowManager.rows.indexOf(rowManager.lastVisibleRow);\n        let result;\n        // first index could be negative only if there are no rendered rows, in which case we return store count\n        if (firstVisibleIndex !== -1) {\n            // last visible index could be negative if last actually visible row doesn't reach view bottom, i.e.\n            // view is not completely filled with rows\n            if (lastVisibleIndex === -1) {\n                result = client.store.count - firstVisibleIndex;\n            }\n            else {\n                // for a zero-based index we need to add 1 to the result\n                result = lastVisibleIndex - firstVisibleIndex + 1;\n            }\n        }\n        else {\n            result = client.store.count;\n        }\n        return result;\n    }\n    async export(config) {\n        const me = this;\n        let pages;\n        me.beforeExport();\n        me.saveState(config);\n        await me.prepareComponent(config);\n        try {\n            pages = await me.getPages(config);\n        }\n        finally {\n            await me.restoreComponent(config);\n            me.stylesheets = null;\n            // https://app.assembla.com/spaces/bryntum/tickets/9400-scrollrowintoview-promise-is-not-reliable/details\n            // Restoring scroll might trigger rows repaint on next animation frame. We are\n            // waiting for next animation frame in such case. Covered in SinglePage.t.js\n            await new Promise(resolve => me.requestAnimationFrame(resolve));\n            await me.restoreState(config);\n        }\n        return pages;\n    }\n    async getPages(config) {\n        const\n            generator = this.pagesExtractor(config),\n            pages     = [];\n        let step;\n        while ((step = await generator.next()) && !step.done) {\n            pages.push(step.value);\n        }\n        return pages;\n    }\n    // Row buffer has to be adjusted to render complete row set per exported page. See virtual scrolling section in README\n    // for more details\n    adjustRowBuffer(client) {\n        const\n            { contentHeight } = this.exportMeta,\n            { rowManager }    = client;\n        this.oldRowManagerConfig = {\n            prependRowBuffer : rowManager.prependRowBuffer,\n            appendRowBuffer  : rowManager.appendRowBuffer\n        };\n        // render 3 times more rows to get enough to fill exported page\n        const adjustedRowBuffer = Math.ceil(contentHeight / rowManager.rowOffsetHeight);\n        rowManager.prependRowBuffer = adjustedRowBuffer;\n        rowManager.appendRowBuffer = adjustedRowBuffer;\n        client.renderRows();\n        // In case we are at the bottom of the view and we are increasing buffer, rowmanager might return to the top row\n        // In this case we need to force it to render rows at the current scroll position\n        client.rowManager.jumpToPosition(client.scrollable.y);\n    }\n    restoreRowBuffer(client) {\n        client.rowManager.prependRowBuffer = this.oldRowManagerConfig.prependRowBuffer;\n        client.rowManager.appendRowBuffer = this.oldRowManagerConfig.appendRowBuffer;\n        // There is no need to force rendering rows here, those would be updated during applyState call on a grid.\n        // More precisely - during setRowHeight method.\n    }\n    async prepareComponent(config) {\n        const\n            me             = this,\n            {\n                client,\n                columns,\n                rowsRange,\n                keepRegionSizes,\n                enableDirectRendering,\n                useRenderedColumnWidth\n            }              = config,\n            { rowManager } = client,\n            exportMeta     = me.exportMeta = {\n                enableDirectRendering,\n                totalWidth  : 0,\n                totalHeight : 0 - (enableDirectRendering ? 0 : me.getVirtualScrollerHeight(client)),\n                subGrids    : {},\n                isPrinting  : config.useBrowserPrint\n            };\n        client.columns.forEach(column => {\n            if (columns.includes(column.id)) {\n                column.show();\n            }\n            else {\n                column.hide();\n            }\n        });\n        // Wait for animation frame to catch optional resize event which may occur after hiding columns. Scroll\n        // stretcher should be synced before we proceed.\n        // Covered by export/Columns.t\n        await new Promise(resolve => client.requestAnimationFrame(resolve));\n        if (rowManager.rowCount > 0) {\n            if (rowsRange === RowsRange.all) {\n                exportMeta.firstVisibleDataIndex = rowManager.rows[0].dataIndex;\n            }\n            else {\n                exportMeta.firstVisibleDataIndex = rowManager.firstVisibleRow.dataIndex;\n                config.alignRows = true;\n            }\n            if (!enableDirectRendering) {\n                await client.scrollRowIntoView(client.store.getAt(exportMeta.firstVisibleDataIndex), { block : 'start' });\n            }\n        }\n        const { element } = me;\n        // clone whole grid element to the detached container\n        me.cloneElement(client.element);\n        me.prepareElement(config);\n        let fakeRow;\n        // Create fake row, we will use it to render stuff\n        if (enableDirectRendering) {\n            exportMeta.fakeRow = fakeRow = rowManager.rowClass.new({\n                cls       : client.rowCls,\n                rowManager,\n                grid      : client,\n                // use fake indices, they aren't really required\n                index     : -10,\n                dataIndex : -10\n            });\n        }\n        client.eachSubGrid(subGrid => {\n            // Call private listener to create actual DOM nodes\n            if (fakeRow) {\n                subGrid.onAddRow({ rows : [fakeRow], isExport : true });\n                // Trick inline widgets to think they're rendered into component (in fact they are)\n                // This is required to remove `Widget.outerCls` classes from the widget\n                fakeRow.element.dataset.ownerCmp = client.id;\n            }\n            const placeHolder = me.createPlaceholder(element.querySelector(`[id=\"${subGrid.id}\"]`), false);\n            let width;\n            if (keepRegionSizes?.[subGrid.region]) {\n                width = subGrid.element.offsetWidth;\n            }\n            else {\n                const { visibleColumns } = subGrid.columns;\n                if (\n                    // If there is only one visible column...\n                    visibleColumns.length === 1 &&\n                    // ...and it is not a timeaxis column, which should always take as much space as possible\n                    !visibleColumns[0].isTimeAxisColumn &&\n                    // ...and originally in grid there was only one visible column and it is the same one\n                    me.state.columns.filter(c => c.region === subGrid.region && !c.hidden && c.id !== visibleColumns[0].id).length === 0\n                ) {\n                    // ...then use subgrid width instead of column width\n                    // https://github.com/bryntum/support/issues/7695\n                    width = subGrid.element.offsetWidth;\n                }\n                else {\n                    width = subGrid.columns.visibleColumns.reduce((result, column) => {\n                        if (!useRenderedColumnWidth && typeof column.width === 'number') {\n                            result += column.width;\n                        }\n                        else {\n                            result += (client.hideHeaders ? rowManager.rows[0].getCell(column.id) : column.element).offsetWidth;\n                        }\n                        return result;\n                    }, 0);\n                }\n            }\n            exportMeta.totalWidth += width;\n            const splitterWidth = subGrid.splitterElement?.offsetWidth || 0;\n            exportMeta.totalWidth += splitterWidth;\n            exportMeta.subGrids[subGrid.region] = {\n                id       : subGrid.id,\n                headerId : subGrid.header?.id || null,\n                footerId : subGrid.footer?.id || null,\n                rows     : [],\n                splitterWidth,\n                placeHolder,\n                width\n            };\n        });\n    }\n    prepareExportElement() {\n        const\n            me                      = this,\n            { element, exportMeta } = me;\n        // Exporters may change subGrid width, e.g. when specific date range is exported\n        Object.values(exportMeta.subGrids).forEach(({ width, id, headerId, footerId }) => {\n            [id, headerId, footerId].forEach(id => {\n                if (id) {\n                    const childElement = element.querySelector(`[id=\"${id}\"]`);\n                    // SubGrid now always have header & footer, but not always in DOM\n                    if (childElement) {\n                        childElement.style.width = `${width}px`;\n                        childElement.style.flex = '';\n                    }\n                }\n            });\n        });\n        return element.innerHTML;\n    }\n    async restoreComponent(config) {\n        if (this.exportMeta.fakeRow) {\n            this.exportMeta.fakeRow.destroy();\n            delete this.exportMeta.fakeRow;\n        }\n    }\n    async scrollRowIntoView(client, index) {\n        await client.scrollRowIntoView(client.store.getAt(index), { block : 'start' });\n        // #9400 - scrollRowIntoView promise is not reliable\n        await new Promise(resolve => this.requestAnimationFrame(resolve));\n    }\n    collectRow(row) {\n        const\n            subGrids = this.exportMeta.subGrids,\n            re       = /data-owner-cmp=\".+?\"/;\n        Object.entries(row.elements).forEach(([key, value]) => {\n            subGrids[key].rows.push([\n                value.outerHTML.replace(re, ''),\n                row.top,\n                row.offsetHeight,\n                new Map() // This one is used to collect events (or in general additional row content)\n            ]);\n        });\n    }\n    renderMergedCells(config, fromIndex, toIndex, rows) {\n        const\n            me           = this,\n            { client }   = config,\n            { subGrids } = me.exportMeta,\n            // Generate config for merged cells\n            domConfigMap = client.features.mergeCells.buildMergedCellsConfig(fromIndex, toIndex, rows);\n        for (const subGridName in subGrids) {\n            const\n                subGrid = subGrids[subGridName],\n                target  = document.createElement('div');\n            // Render config into temporary element\n            DomSync.sync({\n                targetElement : target,\n                domConfig     : {\n                    children : domConfigMap[subGridName].children\n                }\n            });\n            if (target.childNodes.length) {\n                // mergeCells feature uses dependency injection, so in order to get rendered cell content we\n                // need to get the cell element matching the range\n                target.childNodes.forEach(child => {\n                    const\n                        { syncId } = child.dataset,\n                        range      = client.features.mergeCells.mergedRanges\n                            .find(range => range.cellElement?.parentNode.dataset.syncId === syncId);\n                    if (range) {\n                        // Replace cell content if range is found (it might not be found if there's only one cell)\n                        child.innerHTML = range.cellElement.outerHTML;\n                    }\n                });\n                subGrid.mergedCellsHtml = [target.innerHTML];\n            }\n        }\n    }\n}\n// HACK: terser/obfuscator doesn't yet support async generators, when processing code it converts async generator to regular async\n// function.\n/**\n * Pages generator. Value should be string with exported HTML\n * @param {Object} config\n * @returns {AsyncIterableIterator<{value: String, done: Boolean}>}\n * @private\n */\nExporter.prototype.pagesExtractor = async function * pagesExtractor() {\n    throw new Error('Implement this method in a subclass');\n};\nExporter._$name = 'Exporter';", "import Exporter from './Exporter.js';\nimport { Orientation, PaperFormat, RowsRange } from '../Utils.js';\n/**\n * @module Grid/feature/export/exporter/MultiPageExporter\n */\n/**\n * A multiple page exporter. Used by the {@link Grid.feature.export.PdfExport} feature to export to multiple pages. You\n * do not need to use this class directly.\n *\n * ### Extending exporter\n *\n * ```javascript\n * class MyMultiPageExporter extends MultiPageExporter {\n *     // type is required for exporter\n *     static get type() {\n *         return 'mymultipageexporter';\n *     }\n *\n *     get stylesheets() {\n *         const stylesheets = super.stylesheets;\n *\n *         stylesheets.forEach(styleNodeOrLinkTag => doSmth(styleNodeOrLinkTag))\n *\n *         return stylesheets;\n *     }\n * }\n *\n * const grid = new Grid({\n *     features : {\n *         pdfExport : {\n *             // this export feature is configured with only one exporter\n *             exporters : [MyMultiPageExporter]\n *         }\n *     }\n * });\n *\n * // run export with the new exporter\n * grid.features.pdfExport.export({ exporter : 'mymultipageexporter' });\n * ```\n *\n * @classtype multipage\n * @extends Grid/feature/export/exporter/Exporter\n */\nexport default class MultiPageExporter extends Exporter {\n    static get $name() {\n        return 'MultiPageExporter';\n    }\n    static get type() {\n        return 'multipage';\n    }\n    static get title() {\n        // In case locale is missing exporter is still distinguishable\n        return this.L('L{multipage}');\n    }\n    static get exportingPageText() {\n        return 'L{exportingPage}';\n    }\n    //region State management\n    async stateNextPage({ client, rowsRange, enableDirectRendering }) {\n        const { exportMeta } = this;\n        ++exportMeta.currentPage;\n        ++exportMeta.verticalPosition;\n        delete exportMeta.lastExportedRowBottom;\n        // If current vertical position is greater than max vertical pages, switch to next column\n        if (exportMeta.verticalPosition >= exportMeta.verticalPages) {\n            Object.assign(exportMeta, {\n                verticalPosition     : 0,\n                horizontalPosition   : exportMeta.horizontalPosition + 1,\n                currentPageTopMargin : 0,\n                lastTop              : 0,\n                lastRowIndex         : rowsRange === RowsRange.visible ? client.rowManager.firstVisibleRow.dataIndex : 0\n            });\n            delete exportMeta.lastRowDataIndex;\n            if (!enableDirectRendering) {\n                await this.scrollRowIntoView(client, exportMeta.firstVisibleDataIndex, { block : 'start' });\n            }\n        }\n    }\n    //endregion\n    //region Preparation\n    async prepareComponent(config) {\n        await super.prepareComponent(config);\n        const\n            me              = this,\n            { exportMeta }  = me,\n            {\n                client,\n                headerTpl,\n                footerTpl,\n                alignRows,\n                rowsRange,\n                enableDirectRendering\n            }               = config,\n            paperFormat     = PaperFormat[config.paperFormat],\n            isPortrait      = config.orientation === Orientation.portrait,\n            paperWidth      = me.getPaperWidth(paperFormat, isPortrait),\n            paperHeight     = me.getPaperHeight(paperFormat, isPortrait),\n            pageWidth       = me.inchToPx(paperWidth),\n            pageHeight      = me.inchToPx(paperHeight),\n            onlyVisibleRows = rowsRange === RowsRange.visible,\n            horizontalPages = Math.ceil(exportMeta.totalWidth / pageWidth);\n        // To estimate amount of pages correctly we need to know height of the header/footer on every page\n        let contentHeight = pageHeight;\n        if (headerTpl) {\n            contentHeight -= me.measureElement(headerTpl({\n                totalWidth  : exportMeta.totalWidth,\n                totalPages  : -1,\n                currentPage : -1\n            }));\n        }\n        if (footerTpl) {\n            contentHeight -= me.measureElement(footerTpl({\n                totalWidth  : exportMeta.totalWidth,\n                totalPages  : -1,\n                currentPage : -1\n            }));\n        }\n        let totalHeight, verticalPages, totalRows = client.store.count;\n        if (onlyVisibleRows) {\n            totalRows = me.getVisibleRowsCount(client);\n            totalHeight = exportMeta.totalHeight + client.headerHeight + client.footerHeight + client.bodyHeight;\n        }\n        else {\n            totalHeight = exportMeta.totalHeight + client.headerHeight + client.footerHeight + client.scrollable.scrollHeight;\n        }\n        // alignRows config specifies if rows should be always fully visible. E.g. if row doesn't fit on the page, it goes\n        // to the top of the next page\n        if (alignRows && !onlyVisibleRows) {\n            // we need to estimate amount of vertical pages for case when we only put row on the page if it fits\n            // first we need to know how much rows would fit one page, keeping in mind first page also contains header\n            // This estimation is loose, because row height might differ much between pages\n            const\n                rowHeight       = client.rowManager.rowOffsetHeight,\n                rowsOnFirstPage = Math.floor((contentHeight - client.headerHeight) / rowHeight),\n                rowsPerPage     = Math.floor(contentHeight / rowHeight),\n                remainingRows   = totalRows - rowsOnFirstPage;\n            verticalPages = 1 + Math.ceil(remainingRows / rowsPerPage);\n        }\n        else {\n            verticalPages = Math.ceil(totalHeight / contentHeight);\n        }\n        Object.assign(exportMeta, {\n            paperWidth,\n            paperHeight,\n            pageWidth,\n            pageHeight,\n            horizontalPages,\n            verticalPages,\n            totalHeight,\n            contentHeight,\n            totalRows,\n            totalPages           : horizontalPages * verticalPages,\n            currentPage          : 0,\n            verticalPosition     : 0,\n            horizontalPosition   : 0,\n            currentPageTopMargin : 0,\n            lastTop              : 0,\n            lastRowIndex         : onlyVisibleRows ? client.rowManager.firstVisibleRow.dataIndex : 0\n        });\n        if (!enableDirectRendering) {\n            this.adjustRowBuffer(client);\n        }\n    }\n    async restoreComponent(config) {\n        await super.restoreComponent(config);\n        if (!config.enableDirectRendering) {\n            this.restoreRowBuffer(config.client);\n        }\n    }\n    //endregion\n    async collectRows(config) {\n        const\n            me             = this,\n            { exportMeta } = me,\n            {\n                client,\n                alignRows,\n                rowsRange\n            }              = config,\n            {\n                subGrids,\n                currentPageTopMargin,\n                verticalPosition,\n                contentHeight,\n                totalRows,\n                lastRowDataIndex\n            }              = exportMeta,\n            { rowManager } = client,\n            { rows }       = rowManager,\n            onlyVisible    = rowsRange === RowsRange.visible,\n            hasMergeCells  = client.hasActiveFeature('mergeCells');\n        let remainingHeight, index;\n        if (onlyVisible && lastRowDataIndex != null) {\n            if (lastRowDataIndex === rows[rows.length - 1].dataIndex) {\n                index = rows.length - 1;\n            }\n            else {\n                index = rows.findIndex(r => r.dataIndex === lastRowDataIndex);\n            }\n        }\n        else {\n            index = onlyVisible\n                ? rows.findIndex(r => r.bottom > Math.ceil(client.scrollable.y))\n                : rows.findIndex(r => r.bottom + currentPageTopMargin + client.headerHeight > 0);\n        }\n        const\n            firstRowIndex     = index,\n            // This is a portion of the row which is not visible, which means it shouldn't affect remaining height\n            // Don't calculate for the first page\n            overflowingHeight = (onlyVisible || verticalPosition === 0) ? 0 : rows[index].top + currentPageTopMargin + client.headerHeight;\n        // Calculate remaining height to fill with rows\n        // remainingHeight is height of the page content region to fill. When next row is exported, this heights gets\n        // reduced. Since top rows may be partially visible, it would lead to increasing error and eventually to incorrect\n        // exported rows for the page\n        remainingHeight = contentHeight - overflowingHeight;\n        // first exported page container header\n        if (verticalPosition === 0) {\n            remainingHeight -= client.headerHeight;\n        }\n        // data index of the last collected row\n        let lastDataIndex,\n            offset = 0;\n        while (remainingHeight > 0) {\n            const row = rows[index];\n            if (alignRows && remainingHeight < row.offsetHeight) {\n                offset = -remainingHeight;\n                remainingHeight = 0;\n                // If we skip a row save its bottom to meta data in order to align canvases height\n                // properly\n                me.exportMeta.lastExportedRowBottom = rows[index - 1].bottom;\n            }\n            else {\n                me.collectRow(row);\n                remainingHeight -= row.offsetHeight;\n                lastDataIndex = row.dataIndex;\n                // Last row is processed, still need to fill the view\n                if (++index === rows.length && remainingHeight > 0) {\n                    remainingHeight = 0;\n                }\n                else if (onlyVisible && (index - firstRowIndex) === totalRows) {\n                    remainingHeight = 0;\n                }\n            }\n        }\n        // Collect merged cells per subgrid\n        if (hasMergeCells) {\n            for (const subGridName in subGrids) {\n                const\n                    subGrid     = subGrids[subGridName],\n                    mergedCells = client.subGrids[subGridName].element.querySelectorAll(`.b-grid-merged-cells`);\n                subGrid.mergedCellsHtml = [];\n                for (const mergedCell of mergedCells) {\n                    subGrid.mergedCellsHtml.push(mergedCell.outerHTML);\n                }\n            }\n        }\n        const lastRow = rows[index - 1];\n        if (lastRow) {\n            // Calculate exact grid height according to the last exported row\n            exportMeta.exactGridHeight = lastRow.bottom + client.footerContainer.offsetHeight + client.headerContainer.offsetHeight;\n            exportMeta.lastRowDataIndex = lastRow.dataIndex + 1;\n        }\n        await me.onRowsCollected(rows.slice(firstRowIndex, index), config);\n        // No scrolling required if we are only exporting currently visible rows\n        if (onlyVisible) {\n            exportMeta.exactGridHeight -= exportMeta.scrollableTopMargin = client.scrollable.y;\n        }\n        else {\n            // With variable row height row manager might relayout rows to fix position, moving them up or down.\n            const detacher = rowManager.ion({ offsetRows : ({ offset : value }) => offset += value });\n            await me.scrollRowIntoView(client, lastDataIndex + 1);\n            detacher();\n        }\n        return offset;\n    }\n    async renderRows(config) {\n        const\n            me              = this,\n            { exportMeta }  = me,\n            {\n                client,\n                alignRows,\n                rowsRange\n            }               = config,\n            {\n                currentPageTopMargin,\n                verticalPosition,\n                contentHeight,\n                totalRows,\n                lastRowIndex,\n                fakeRow\n            }               = exportMeta,\n            { store }       = client,\n            hasMergeCells   = client.hasActiveFeature('mergeCells'),\n            onlyVisibleRows = rowsRange === RowsRange.visible;\n        let index       = lastRowIndex,\n            { lastTop } = exportMeta,\n            remainingHeight;\n        const\n            firstRowIndex     = index,\n            // This is a portion of the row which is not visible, which means it shouldn't affect remaining height\n            // Don't calculate for the first page\n            overflowingHeight = (onlyVisibleRows || verticalPosition === 0) ? 0 : lastTop + currentPageTopMargin + client.headerHeight,\n            rows              = [];\n        // Calculate remaining height to fill with rows\n        // remainingHeight is height of the page content region to fill. When next row is exported, this heights gets\n        // reduced. Since top rows may be partially visible, it would lead to increasing error and eventually to incorrect\n        // exported rows for the page\n        remainingHeight = contentHeight - overflowingHeight;\n        // first exported page contains header\n        if (verticalPosition === 0) {\n            remainingHeight -= client.headerHeight;\n        }\n        // data index of the last collected row\n        let lastDataIndex, previousTop,\n            offset = 0;\n        while (remainingHeight > 0) {\n            fakeRow.render(index, store.getAt(index), true, false, true);\n            if (alignRows && remainingHeight < fakeRow.offsetHeight) {\n                offset = -remainingHeight;\n                remainingHeight = 0;\n                // If we skip a row save its bottom to meta data in order to align canvases height\n                // properly\n                me.exportMeta.lastExportedRowBottom = lastTop;\n            }\n            else {\n                previousTop = lastTop;\n                lastDataIndex = index;\n                lastTop = fakeRow.translate(lastTop);\n                remainingHeight -= fakeRow.offsetHeight;\n                me.collectRow(fakeRow);\n                // Push an object with data required to build merged cell\n                rows.push({\n                    top          : fakeRow.top,\n                    bottom       : fakeRow.bottom,\n                    offsetHeight : fakeRow.offsetHeight,\n                    dataIndex    : fakeRow.dataIndex\n                });\n                // Last row is processed, still need to fill the view\n                if (++index === store.count && remainingHeight > 0) {\n                    remainingHeight = 0;\n                }\n                else if (onlyVisibleRows && (index - firstRowIndex) === totalRows) {\n                    remainingHeight = 0;\n                }\n            }\n        }\n        if (hasMergeCells) {\n            me.renderMergedCells(config, firstRowIndex, index, rows);\n        }\n        // Store next to last row index and top position so we could proceed on the next page.\n        // In fact, when we take full control of row rendering we don't even need to do this. It is only required\n        // to be compatible with current exporters. When we get rid of scrolling, we can just start rendering rows\n        // on each page from 0 (adjusted by overflow of the previous row)\n        exportMeta.lastRowIndex = alignRows ? index : lastDataIndex;\n        exportMeta.lastTop = alignRows ? lastTop : previousTop;\n        if (fakeRow) {\n            // Calculate exact grid height according to the last exported row\n            exportMeta.exactGridHeight = fakeRow.bottom + client.footerContainer.offsetHeight + client.headerContainer.offsetHeight;\n        }\n        await me.onRowsCollected(rows, config);\n        return offset;\n    }\n    async buildPage(config) {\n        const\n            me             = this,\n            { exportMeta } = me,\n            {\n                client,\n                headerTpl,\n                footerTpl,\n                enableDirectRendering\n            }              = config,\n            {\n                totalWidth,\n                totalPages,\n                currentPage,\n                subGrids\n            }              = exportMeta;\n        // Rows are stored in shared state object, need to clean it before exporting next page\n        Object.values(subGrids).forEach(subGrid => subGrid.rows = []);\n        // With variable row height total height might change after scroll, update it\n        // to show content completely on the last page\n        if (config.rowsRange === RowsRange.all) {\n            exportMeta.totalHeight = client.height - client.bodyHeight + client.scrollable.scrollHeight - me.getVirtualScrollerHeight(client);\n        }\n        let header, footer;\n        // Measure header and footer height\n        if (headerTpl) {\n            header = me.prepareHTML(headerTpl({\n                totalWidth,\n                totalPages,\n                currentPage\n            }));\n        }\n        if (footerTpl) {\n            footer = me.prepareHTML(footerTpl({\n                totalWidth,\n                totalPages,\n                currentPage\n            }));\n        }\n        let offset;\n        if (enableDirectRendering) {\n            offset = await me.renderRows(config);\n        }\n        else {\n            offset = await me.collectRows(config);\n        }\n        const html = me.buildPageHtml(config);\n        return { html, header, footer, offset };\n    }\n    async onRowsCollected() {}\n    buildPageHtml() {\n        const\n            me           = this,\n            { subGrids } = me.exportMeta;\n        // Now when rows are collected, we need to add them to exported grid\n        let html = me.prepareExportElement();\n        Object.values(subGrids).forEach(({ placeHolder, rows, mergedCellsHtml }) => {\n            const placeHolderText = placeHolder.outerHTML;\n            let contentHtml = rows.reduce((result, row) => {\n                result += row[0];\n                return result;\n            }, '');\n            if (mergedCellsHtml?.length) {\n                contentHtml += `<div class=\"b-grid-merged-cells-container\">${mergedCellsHtml.join('')}</div>`;\n            }\n            html = html.replace(placeHolderText, contentHtml);\n        });\n        return html;\n    }\n    prepareExportElement() {\n        const\n            me = this,\n            { element, exportMeta } = me;\n        if (exportMeta.scrollableTopMargin) {\n            element.querySelector('.b-grid-vertical-scroller').style.marginTop = `-${exportMeta.scrollableTopMargin}px`;\n        }\n        return super.prepareExportElement();\n    }\n}\n// HACK: terser/obfuscator doesn't yet support async generators, when processing code it converts async generator to regular async\n// function.\nMultiPageExporter.prototype.pagesExtractor = async function * pagesExtractor(config) {\n    const\n        me = this,\n        {\n            exportMeta,\n            stylesheets\n        }  = me,\n        {\n            totalWidth,\n            totalPages,\n            paperWidth,\n            paperHeight,\n            realPaperWidth,\n            realPaperHeight,\n            contentHeight\n        }  = exportMeta,\n        isPrint = config.useBrowserPrint;\n    let currentPage;\n    while ((currentPage = exportMeta.currentPage) < totalPages) {\n        me.trigger('exportStep', { text : me.L(MultiPageExporter.exportingPageText, { currentPage, totalPages }), progress : Math.round(((currentPage + 1) / totalPages) * 90) });\n        const { html, header, footer, offset } = await me.buildPage(config);\n        // TotalHeight might change in case of variable row heights\n        // Move exported content in the visible frame\n        const styles = [\n            ...stylesheets,\n            `\n                <style>\n                    .b-page-wrap {\n                        width: ${paperWidth}in;\n                        height: ${paperHeight}in;\n                    }\n                    .b-page-${currentPage} #${config.client.id} {\n                        height: ${exportMeta.exactGridHeight}px !important;\n                        width: ${totalWidth}px !important;\n                    }\n                    .b-page-${currentPage} .b-export-body .b-export-viewport {\n                        transform: translate(${-paperWidth * exportMeta.horizontalPosition}in, ${exportMeta.currentPageTopMargin}px);\n                    }\n                </style>\n            `];\n        // when aligning rows, offset gets accumulated, so we need to take it into account\n        exportMeta.currentPageTopMargin -= contentHeight + offset;\n        await me.stateNextPage(config);\n        yield {\n            html : me.pageTpl({\n                html,\n                header,\n                footer,\n                styles,\n                paperWidth,\n                paperHeight,\n                realPaperWidth,\n                realPaperHeight,\n                currentPage,\n                isPrint\n            })\n        };\n    }\n};\nMultiPageExporter._$name = 'MultiPageExporter';", "import Exporter from './Exporter.js';\nimport { Orientation, PaperFormat, RowsRange } from '../Utils.js';\n/**\n * @module Grid/feature/export/exporter/MultiPageVerticalExporter\n */\n/**\n * A vertical multiple page exporter. Used by the {@link Grid.feature.export.PdfExport} feature to export to multiple\n * pages. Content will be scaled in a horizontal direction to fit the page.\n *\n * You do not need to use this class directly.\n *\n * ### Extending exporter\n *\n * ```javascript\n * class MyMultiPageVerticalExporter extends MultiPageVerticalExporter {\n *     // type is required for exporter\n *     static get type() {\n *         return 'mymultipageverticalexporter';\n *     }\n *\n *     get stylesheets() {\n *         const stylesheets = super.stylesheets;\n *\n *         stylesheets.forEach(styleNodeOrLinkTag => doSmth(styleNodeOrLinkTag))\n *\n *         return stylesheets;\n *     }\n * }\n *\n * const grid = new Grid({\n *     features : {\n *         pdfExport : {\n *             // this export feature is configured with only one exporter\n *             exporters : [MyMultiPageVerticalExporter]\n *         }\n *     }\n * });\n *\n * // run export with the new exporter\n * grid.features.pdfExport.export({ exporter : 'mymultipageverticalexporter' });\n * ```\n *\n * @classtype multipagevertical\n * @extends Grid/feature/export/exporter/Exporter\n */\nexport default class MultiPageVerticalExporter extends Exporter {\n    static get $name() {\n        return 'MultiPageVerticalExporter';\n    }\n    static get type() {\n        return 'multipagevertical';\n    }\n    static get title() {\n        // In case locale is missing exporter is still distinguishable\n        return this.L('L{multipagevertical}');\n    }\n    static get exportingPageText() {\n        return 'L{exportingPage}';\n    }\n    //region State management\n    async stateNextPage({ client }) {\n        const\n            { exportMeta } = this,\n            {\n                totalRows,\n                processedRows,\n                totalPages\n            } = exportMeta;\n        ++exportMeta.currentPage;\n        ++exportMeta.verticalPosition;\n        // With variable row heights it is possible that initial pages estimation is wrong. If we're out but there are\n        // more rows to process - continue exporting\n        if (exportMeta.currentPage === totalPages && processedRows.size !== totalRows) {\n            ++exportMeta.totalPages;\n            ++exportMeta.verticalPages;\n        }\n    }\n    //endregion\n    estimateTotalPages(config) {\n        const\n            me             = this,\n            { exportMeta } = me,\n            {\n                client,\n                headerTpl,\n                footerTpl,\n                alignRows,\n                rowsRange,\n                repeatHeader,\n                enableDirectRendering\n            }              = config,\n            {\n                pageWidth,\n                pageHeight,\n                totalWidth\n            }              = exportMeta,\n            scale          = me.getScaleValue(pageWidth, totalWidth);\n        // To estimate amount of pages correctly we need to know height of the header/footer on every page\n        let\n            // bodyHeight does not always report correct value, read it from the DOM element instead, we don't care\n            // about forced reflow at this stage\n            totalHeight   = 0 - me.getVirtualScrollerHeight(client) + client.height - client.bodyElement.offsetHeight + client.scrollable.scrollHeight,\n            // We will be scaling content horizontally, need to adjust content height accordingly\n            contentHeight = pageHeight / scale,\n            totalRows     = client.store.count,\n            initialScroll = 0,\n            rowsHeight    = totalHeight,\n            verticalPages;\n        if (headerTpl) {\n            contentHeight -= me.measureElement(headerTpl({\n                totalWidth,\n                totalPages  : -1,\n                currentPage : -1\n            }));\n        }\n        if (footerTpl) {\n            contentHeight -= me.measureElement(footerTpl({\n                totalWidth,\n                totalPages  : -1,\n                currentPage : -1\n            }));\n        }\n        // If we are repeating header on every page we have smaller contentHeight\n        if (repeatHeader) {\n            contentHeight -= client.headerHeight + client.footerHeight;\n            totalHeight -= client.headerHeight + client.footerHeight;\n        }\n        if (rowsRange === RowsRange.visible) {\n            const\n                rowManager = client.rowManager,\n                firstRow = rowManager.firstVisibleRow,\n                lastRow  = rowManager.lastVisibleRow;\n            // With direct rendering we start rendering from 0, no need to adjust anything\n            if (!enableDirectRendering) {\n                initialScroll = firstRow.top;\n            }\n            totalRows = me.getVisibleRowsCount(client);\n            if (enableDirectRendering) {\n                totalHeight = client.headerHeight + client.footerHeight + lastRow.bottom - firstRow.top;\n                rowsHeight = lastRow.bottom - firstRow.top;\n            }\n            else {\n                rowsHeight = totalHeight = totalHeight - client.scrollable.scrollHeight + lastRow.bottom - firstRow.top;\n            }\n            exportMeta.lastRowIndex = firstRow.dataIndex;\n            exportMeta.finishRowIndex = lastRow.dataIndex;\n        }\n        else {\n            exportMeta.finishRowIndex = client.store.count - 1;\n        }\n        // alignRows config specifies if rows should be always fully visible. E.g. if row doesn't fit on the page, it goes\n        // to the top of the next page\n        if (alignRows && !repeatHeader && rowsRange !== RowsRange.visible) {\n            // we need to estimate amount of vertical pages for case when we only put row on the page if it fits\n            // first we need to know how much rows would fit one page, keeping in mind first page also contains header\n            // This estimation is loose, because row height might differ much between pages\n            const\n                rowHeight       = client.rowManager.rowOffsetHeight,\n                rowsOnFirstPage = Math.floor((contentHeight - client.headerHeight) / rowHeight),\n                rowsPerPage     = Math.floor(contentHeight / rowHeight),\n                remainingRows   = totalRows - rowsOnFirstPage;\n            verticalPages = 1 + Math.ceil(remainingRows / rowsPerPage);\n        }\n        else {\n            verticalPages = Math.ceil(rowsHeight / contentHeight);\n        }\n        Object.assign(exportMeta, {\n            scale,\n            contentHeight,\n            totalRows,\n            totalHeight,\n            verticalPages,\n            initialScroll,\n            horizontalPages : 1,\n            totalPages      : verticalPages\n        });\n    }\n    async prepareComponent(config) {\n        await super.prepareComponent(config);\n        const\n            me              = this,\n            { exportMeta }  = me,\n            { client }      = config,\n            paperFormat     = PaperFormat[config.paperFormat],\n            isPortrait      = config.orientation === Orientation.portrait,\n            paperWidth      = me.getPaperWidth(paperFormat, isPortrait),\n            paperHeight     = me.getPaperHeight(paperFormat, isPortrait),\n            pageWidth       = me.inchToPx(paperWidth),\n            pageHeight      = me.inchToPx(paperHeight),\n            horizontalPages = 1;\n        Object.assign(exportMeta, {\n            paperWidth,\n            paperHeight,\n            realPaperWidth       : me.getPaperWidth(paperFormat, isPortrait),\n            realPaperHeight      : me.getPaperHeight(paperFormat, isPortrait),\n            pageWidth,\n            pageHeight,\n            horizontalPages,\n            currentPage          : 0,\n            verticalPosition     : 0,\n            horizontalPosition   : 0,\n            currentPageTopMargin : 0,\n            lastTop              : 0,\n            lastRowIndex         : 0,\n            processedRows        : new Set()\n        });\n        me.estimateTotalPages(config);\n        if (!config.enableDirectRendering) {\n            me.adjustRowBuffer(client);\n        }\n    }\n    async restoreComponent(config) {\n        await super.restoreComponent(config);\n        if (!config.enableDirectRendering) {\n            this.restoreRowBuffer(config.client);\n        }\n    }\n    async collectRows(config) {\n        const\n            me                 = this,\n            { exportMeta }     = me,\n            {\n                client,\n                alignRows,\n                repeatHeader\n            }                  = config,\n            {\n                subGrids,\n                currentPageTopMargin,\n                verticalPosition,\n                totalRows,\n                contentHeight\n            }                  = exportMeta,\n            // If we are repeating header we've already took header height into account when setting content height\n            clientHeaderHeight = repeatHeader ? 0 : client.headerHeight,\n            { rowManager }     = client,\n            { rows }           = rowManager,\n            onlyVisibleRows    = config.rowsRange === RowsRange.visible,\n            hasMergeCells      = client.hasActiveFeature('mergeCells');\n        let index = onlyVisibleRows\n                ? rows.findIndex(r => r.bottom > client.scrollable.y)\n                : rows.findIndex(r => r.bottom + currentPageTopMargin + clientHeaderHeight > 0),\n            remainingHeight;\n        const\n            firstRowIndex     = index,\n            // This is a portion of the row which is not visible, which means it shouldn't affect remaining height\n            // Don't calculate for the first page\n            overflowingHeight = verticalPosition === 0 ? 0 : rows[index].top + currentPageTopMargin + clientHeaderHeight;\n        // Calculate remaining height to fill with rows\n        // remainingHeight is height of the page content region to fill. When next row is exported, this heights gets\n        // reduced. Since top rows may be partially visible, it would lead to increasing error and eventually to incorrect\n        // exported rows for the page\n        remainingHeight = contentHeight - overflowingHeight;\n        // first exported page container header\n        if (verticalPosition === 0) {\n            remainingHeight -= clientHeaderHeight;\n        }\n        // data index of the last collected row\n        let lastDataIndex,\n            offset = 0;\n        while (remainingHeight > 0) {\n            const row = rows[index];\n            if (alignRows && remainingHeight < row.offsetHeight) {\n                offset = -remainingHeight;\n                remainingHeight = 0;\n            }\n            else {\n                me.collectRow(row);\n                remainingHeight -= row.offsetHeight;\n                // only mark row as processed if it fitted without overflow\n                if (remainingHeight > 0) {\n                    // We cannot use simple counter here because some rows appear on 2 pages. Need to track unique identifier\n                    exportMeta.processedRows.add(row.dataIndex);\n                }\n                lastDataIndex = row.dataIndex;\n                // Last row is processed, still need to fill the view\n                if (++index === rows.length && remainingHeight > 0) {\n                    remainingHeight = 0;\n                }\n                else if (onlyVisibleRows && (index - firstRowIndex) === totalRows) {\n                    remainingHeight = 0;\n                }\n            }\n        }\n        // Collect merged cells per subgrid\n        if (hasMergeCells) {\n            for (const subGridName in subGrids) {\n                const\n                    subGrid     = subGrids[subGridName],\n                    mergedCells = client.subGrids[subGridName].element.querySelectorAll(`.b-grid-merged-cells`);\n                subGrid.mergedCellsHtml = [];\n                for (const mergedCell of mergedCells) {\n                    subGrid.mergedCellsHtml.push(mergedCell.outerHTML);\n                }\n            }\n        }\n        const lastRow = rows[index - 1];\n        if (lastRow) {\n            // Calculate exact grid height according to the last exported row\n            exportMeta.exactGridHeight = lastRow.bottom + client.footerContainer.offsetHeight + client.headerContainer.offsetHeight;\n        }\n        await me.onRowsCollected(rows.slice(firstRowIndex, index), config);\n        // No scrolling required if we are only exporting currently visible rows\n        if (onlyVisibleRows) {\n            exportMeta.scrollableTopMargin = client.scrollable.y;\n        }\n        else {\n            // With variable row height row manager might relayout rows to fix position, moving them up or down.\n            const detacher = rowManager.ion({ offsetRows : ({ offset : value }) => offset += value });\n            await me.scrollRowIntoView(client, lastDataIndex + 1);\n            detacher();\n        }\n        return offset;\n    }\n    async renderRows(config) {\n        const\n            me                    = this,\n            { exportMeta }        = me,\n            {\n                client,\n                alignRows,\n                repeatHeader\n            }                     = config,\n            {\n                currentPageTopMargin,\n                verticalPosition,\n                totalRows,\n                contentHeight,\n                lastRowIndex,\n                finishRowIndex,\n                fakeRow\n            }                     = exportMeta,\n            // If we are repeating header we've already took header height into account when setting content height\n            clientHeaderHeight    = repeatHeader ? 0 : client.headerHeight,\n            { store }             = client,\n            hasMergeCells         = client.hasActiveFeature('mergeCells'),\n            onlyVisibleRows       = config.rowsRange === RowsRange.visible;\n        let index       = lastRowIndex,\n            { lastTop } = exportMeta,\n            remainingHeight;\n        const\n            firstRowIndex     = index,\n            // This is a portion of the row which is not visible, which means it shouldn't affect remaining height\n            // Don't calculate for the first page\n            overflowingHeight = verticalPosition === 0 ? 0 : lastTop + currentPageTopMargin + clientHeaderHeight,\n            rows              = [];\n        // Calculate remaining height to fill with rows\n        // remainingHeight is height of the page content region to fill. When next row is exported, this heights gets\n        // reduced. Since top rows may be partially visible, it would lead to increasing error and eventually to incorrect\n        // exported rows for the page\n        remainingHeight = contentHeight - overflowingHeight;\n        // first exported page container header\n        if (verticalPosition === 0) {\n            remainingHeight -= clientHeaderHeight;\n        }\n        // data index of the last collected row\n        let lastDataIndex,\n            nextPageTop,\n            offset = 0;\n        while (remainingHeight > 0) {\n            fakeRow.render(index, store.getAt(index), true, false, true);\n            if (alignRows && remainingHeight < fakeRow.offsetHeight) {\n                offset = -remainingHeight;\n                remainingHeight = 0;\n            }\n            else {\n                nextPageTop = lastTop;\n                lastDataIndex = index;\n                lastTop = fakeRow.translate(lastTop);\n                remainingHeight -= fakeRow.offsetHeight;\n                me.collectRow(fakeRow);\n                // Push an object with data required to build merged cell\n                rows.push({\n                    top          : fakeRow.top,\n                    bottom       : fakeRow.bottom,\n                    offsetHeight : fakeRow.offsetHeight,\n                    dataIndex    : fakeRow.dataIndex\n                });\n                // only mark row as processed if it fitted without overflow\n                if (remainingHeight > 0) {\n                    // We cannot use simple counter here because some rows appear on 2 pages. Need to track unique identifier\n                    exportMeta.processedRows.add(index);\n                }\n                // Last row is processed, still need to fill the view\n                if (index === finishRowIndex) {\n                    remainingHeight = 0;\n                }\n                else if ((++index - firstRowIndex) === totalRows && onlyVisibleRows) {\n                    remainingHeight = 0;\n                }\n            }\n        }\n        if (hasMergeCells) {\n            me.renderMergedCells(config, firstRowIndex, index, rows);\n        }\n        // Store next to last row index and top position so we could proceed on the next page.\n        // In fact, when we take full control of row rendering we don't even need to do this. It is only required\n        // to be compatible with current exporters. When we get rid of scrolling, we can just start rendering rows\n        // on each page from 0 (adjusted by overflow of the previous row)\n        exportMeta.lastRowIndex = lastDataIndex;\n        exportMeta.lastTop = nextPageTop;\n        if (fakeRow) {\n            // Calculate exact grid height according to the last exported row to constrain column lines to the last\n            // row\n            exportMeta.exactGridHeight = fakeRow.bottom + client.footerContainer.offsetHeight + client.headerContainer.offsetHeight;\n        }\n        await me.onRowsCollected(rows, config);\n        return offset;\n    }\n    async buildPage(config) {\n        const\n            me             = this,\n            { exportMeta } = me,\n            {\n                client,\n                headerTpl,\n                footerTpl,\n                enableDirectRendering\n            }              = config,\n            {\n                totalWidth,\n                totalPages,\n                currentPage,\n                subGrids\n            }              = exportMeta;\n        // Rows are stored in shared state object, need to clean it before exporting next page\n        Object.values(subGrids).forEach(subGrid => subGrid.rows = []);\n        // With variable row height total height might change after scroll, update it\n        // to show content completely on the last page\n        if (config.rowsRange === RowsRange.all) {\n            exportMeta.totalHeight = client.headerHeight + client.footerHeight + client.scrollable.scrollHeight;\n            if (!enableDirectRendering) {\n                exportMeta.totalHeight -= me.getVirtualScrollerHeight(client);\n            }\n        }\n        let header, footer, offset;\n        // Measure header and footer height\n        if (headerTpl) {\n            header = me.prepareHTML(headerTpl({\n                totalWidth,\n                totalPages,\n                currentPage\n            }));\n        }\n        if (footerTpl) {\n            footer = me.prepareHTML(footerTpl({\n                totalWidth,\n                totalPages,\n                currentPage\n            }));\n        }\n        if (enableDirectRendering) {\n            offset = await me.renderRows(config);\n        }\n        else {\n            offset = await me.collectRows(config);\n        }\n        const html = me.buildPageHtml(config);\n        return { html, header, footer, offset };\n    }\n    async onRowsCollected() {}\n    buildPageHtml() {\n        const\n            me           = this,\n            { subGrids } = me.exportMeta;\n        // Now when rows are collected, we need to add them to exported grid\n        let html = me.prepareExportElement();\n        Object.values(subGrids).forEach(({ placeHolder, rows, mergedCellsHtml }) => {\n            const placeHolderText = placeHolder.outerHTML;\n            let contentHtml = rows.reduce((result, row) => {\n                result += row[0];\n                return result;\n            }, '');\n            if (mergedCellsHtml?.length) {\n                contentHtml += `<div class=\"b-grid-merged-cells-container\">${mergedCellsHtml.join('')}</div>`;\n            }\n            html = html.replace(placeHolderText, contentHtml);\n        });\n        return html;\n    }\n}\n// HACK: terser/obfuscator doesn't yet support async generators, when processing code it converts async generator to regular async\n// function.\nMultiPageVerticalExporter.prototype.pagesExtractor = async function * pagesExtractor(config) {\n    const\n        me = this,\n        {\n            exportMeta,\n            stylesheets\n        }  = me,\n        {\n            totalWidth,\n            paperWidth,\n            paperHeight,\n            realPaperWidth,\n            realPaperHeight,\n            contentHeight,\n            scale,\n            initialScroll\n        }  = exportMeta,\n        isPrint = config.useBrowserPrint;\n    let\n        { totalPages } = exportMeta,\n        currentPage, style;\n    while ((currentPage = exportMeta.currentPage) < totalPages) {\n        me.trigger('exportStep', {\n            text     : me.L(MultiPageVerticalExporter.exportingPageText, { currentPage, totalPages }),\n            progress : Math.round(((currentPage + 1) / totalPages) * 90)\n        });\n        const { html, header, footer, offset } = await me.buildPage(config);\n        style = `\n            ${\n                isPrint\n                    ? `\n                        .b-page-wrap {\n                            width: ${realPaperWidth}in;\n                            height: ${realPaperHeight}in;\n                        }\n                        .b-print:not(.b-firefox) .b-export-content {\n                            zoom: ${scale};\n                            height: 100%;\n                        }\n                        .b-print.b-firefox .b-export-content {\n                            transform: scale(${scale});\n                            transform-origin: top left;\n                            height: ${100 / scale}%;\n                            width: ${100 / scale}%;\n                        }\n                    `\n                    : `\n                        .b-export .b-page-${currentPage}.b-export-content {\n                            transform: scale(${scale});\n                            transform-origin: top left;\n                            height: ${100 / scale}%;\n                            width: ${100 / scale}%;\n                        }\n                    `\n            }\n        `;\n        if (config.repeatHeader) {\n            const gridHeight = exportMeta.exactGridHeight ? `${exportMeta.exactGridHeight + exportMeta.currentPageTopMargin}px` : '100%';\n            style = `\n                ${style}\n                .b-page-${currentPage} #${config.client.id} {\n                    height: ${gridHeight} !important;\n                    width: ${totalWidth}px !important;\n                }\n                .b-export-body {\n                    height: 100%;\n                    display: flex;\n                }\n                .b-export-viewport {\n                    height: 100%;\n                }\n                .b-page-${currentPage} .b-grid-vertical-scroller {\n                    margin-top: ${exportMeta.currentPageTopMargin - initialScroll}px;\n                }\n            `;\n        }\n        else {\n            const gridHeight = exportMeta.exactGridHeight || (contentHeight - exportMeta.currentPageTopMargin);\n            style = `\n                ${style}\n                .b-page-${currentPage} #${config.client.id} {\n                    height: ${gridHeight}px !important;\n                    width: ${totalWidth}px !important;\n                }\n                .b-export-body {\n                    overflow: hidden;\n                }\n                .b-page-${currentPage} .b-export-body .b-export-viewport {\n                    margin-top: ${exportMeta.currentPageTopMargin}px;\n                }\n                .b-page-${currentPage} .b-grid-vertical-scroller {\n                    margin-top: -${initialScroll}px;\n                }\n            `;\n        }\n        // TotalHeight might change in case of variable row heights\n        // Move exported content in the visible frame\n        const styles = [\n            ...stylesheets,\n            `<style>${style}</style>`\n        ];\n        // when aligning rows, offset gets accumulated, so we need to take it into account\n        exportMeta.currentPageTopMargin -= contentHeight + offset;\n        await me.stateNextPage(config);\n        ({ totalPages } = exportMeta);\n        yield {\n            html : me.pageTpl({\n                html,\n                header,\n                footer,\n                styles,\n                paperWidth,\n                paperHeight,\n                realPaperWidth,\n                realPaperHeight,\n                currentPage,\n                isPrint\n            })\n        };\n    }\n};\nMultiPageVerticalExporter._$name = 'MultiPageVerticalExporter';", "import Exporter from './Exporter.js';\nimport { Orientation, PaperFormat, RowsRange } from '../Utils.js';\n/**\n * @module Grid/feature/export/exporter/SinglePageExporter\n */\n/**\n * A single page exporter. Used by the {@link Grid.feature.export.PdfExport} feature to export to single page. Content\n * will be scaled in both directions to fit the page.\n *\n * You do not need to use this class directly.\n *\n * ### Extending exporter\n *\n * ```javascript\n * class MySinglePageExporter extends SinglePageExporter {\n *     // type is required for exporter\n *     static get type() {\n *         return 'mysinglepageexporter';\n *     }\n *\n *     get stylesheets() {\n *         const stylesheets = super.stylesheets;\n *\n *         stylesheets.forEach(styleNodeOrLinkTag => doSmth(styleNodeOrLinkTag))\n *\n *         return stylesheets;\n *     }\n * }\n *\n * const grid = new Grid({\n *     features : {\n *         pdfExport : {\n *             // this export feature is configured with only one exporter\n *             exporters : [MySinglePageExporter]\n *         }\n *     }\n * });\n *\n * // run export with the new exporter\n * grid.features.pdfExport.export({ exporter : 'mysinglepageexporter' });\n * ```\n *\n * @classtype singlepage\n * @extends Grid/feature/export/exporter/Exporter\n */\nexport default class SinglePageExporter extends Exporter {\n    static get $name() {\n        return 'SinglePageExporter';\n    }\n    static get type() {\n        return 'singlepage';\n    }\n    static get title() {\n        // In case locale is missing exporter is still distinguishable\n        return this.localize('L{singlepage}');\n    }\n    static get defaultConfig() {\n        return {\n            /**\n             * Set to true to center content horizontally on the page\n             * @config {Boolean}\n             */\n            centerContentHorizontally : false\n        };\n    }\n    async prepareComponent(config) {\n        await super.prepareComponent(config);\n        Object.assign(this.exportMeta, {\n            verticalPages      : 1,\n            horizontalPages    : 1,\n            totalPages         : 1,\n            currentPage        : 0,\n            verticalPosition   : 0,\n            horizontalPosition : 0\n        });\n    }\n    async onRowsCollected() {}\n    positionRows(rows, config) {\n        if (config.enableDirectRendering) {\n            return rows.map(r => r[0]);\n        }\n        else {\n            let currentTop = 0;\n            // In case of variable row height row vertical position is not guaranteed to increase\n            // monotonously. Position row manually instead\n            return rows.map(([html, , height]) => {\n                const result = html.replace(/translate\\(\\d+px, \\d+px\\)/, `translate(0px, ${currentTop}px)`);\n                currentTop += height;\n                return result;\n            });\n        }\n    }\n    async collectRows(config) {\n        const\n            me                    = this,\n            { client }            = config,\n            { rowManager, store } = client,\n            hasMergeCells         = client.hasActiveFeature('mergeCells'),\n            { subGrids }          = me.exportMeta,\n            totalRows             = config.rowsRange === RowsRange.visible && store.count\n                // visibleRowCount is a projection of how much rows will fit the view, which should be\n                // maximum amount of exported rows. and there can be less\n                ? me.getVisibleRowsCount(client)\n                : store.count;\n        let { totalHeight } = me.exportMeta,\n            processedRows   = 0,\n            lastDataIndex   = -1;\n        if (rowManager.rows.length > 0) {\n            if (config.rowsRange === RowsRange.visible) {\n                lastDataIndex = rowManager.firstVisibleRow.dataIndex - 1;\n            }\n            if (hasMergeCells) {\n                for (const subGrid of Object.values(subGrids)) {\n                    subGrid.mergedCellsHtml = [];\n                }\n            }\n            // Collecting rows\n            while (processedRows < totalRows) {\n                const\n                    rows    = rowManager.rows,\n                    lastRow = rows[rows.length - 1],\n                    lastProcessedRowIndex = processedRows;\n                rows.forEach(row => {\n                    // When we are scrolling rows will be duplicated even with disabled buffers (e.g. when we are trying to\n                    // scroll last record into view). So we store last processed row dataIndex (which is always growing\n                    // sequence) and filter all rows with lower/same dataIndex\n                    if (row.dataIndex > lastDataIndex && processedRows < totalRows) {\n                        ++processedRows;\n                        totalHeight += row.offsetHeight;\n                        me.collectRow(row);\n                    }\n                });\n                // Collect merged cells per subgrid\n                if (hasMergeCells) {\n                    for (const subGridName in subGrids) {\n                        const\n                            subGrid     = subGrids[subGridName],\n                            mergedCells = client.subGrids[subGridName].element.querySelectorAll(`.b-grid-merged-cells`);\n                        for (const mergedCell of mergedCells) {\n                            subGrid.mergedCellsHtml.push(mergedCell.outerHTML);\n                        }\n                    }\n                }\n                // Calculate new rows processed in this iteration e.g. to collect events\n                const\n                    firstNewRowIndex = rows.findIndex(r => r.dataIndex === lastDataIndex + 1),\n                    lastNewRowIndex  = firstNewRowIndex + (processedRows - lastProcessedRowIndex);\n                await me.onRowsCollected(rows.slice(firstNewRowIndex, lastNewRowIndex), config);\n                if (processedRows < totalRows) {\n                    lastDataIndex = lastRow.dataIndex;\n                    await me.scrollRowIntoView(client, lastDataIndex + 1);\n                }\n            }\n        }\n        return totalHeight;\n    }\n    async renderRows(config) {\n        const\n            me                    = this,\n            { client, rowsRange } = config,\n            { rowManager, store } = client,\n            hasMergeCells         = client.hasActiveFeature('mergeCells'),\n            onlyVisibleRows       = rowsRange === RowsRange.visible;\n        let { totalHeight } = me.exportMeta;\n        if (store.count) {\n            const\n                { fakeRow }         = me.exportMeta,\n                { firstVisibleRow } = rowManager,\n                fromIndex           = onlyVisibleRows ? firstVisibleRow.dataIndex : 0,\n                toIndex             = onlyVisibleRows ? rowManager.lastVisibleRow.dataIndex : store.count - 1,\n                rows                = [];\n            let top = 0;\n            // Fake row might not have cells if there are no columns\n            if (fakeRow.cells.length) {\n                for (let i = fromIndex; i <= toIndex; i++) {\n                    fakeRow.render(i, store.getAt(i), true, false, true);\n                    top = fakeRow.translate(top);\n                    me.collectRow(fakeRow);\n                    // Push an object with data required to build merged cell\n                    rows.push({\n                        top          : fakeRow.top,\n                        bottom       : fakeRow.bottom,\n                        offsetHeight : fakeRow.offsetHeight,\n                        dataIndex    : fakeRow.dataIndex\n                    });\n                }\n                await me.onRowsCollected(rows, config);\n            }\n            totalHeight += top;\n            if (hasMergeCells) {\n                me.renderMergedCells(config, fromIndex, toIndex, rows);\n            }\n        }\n        return totalHeight;\n    }\n    buildPageHtml(config) {\n        const\n            me           = this,\n            { subGrids } = me.exportMeta;\n        // Now when rows are collected, we need to add them to exported grid\n        let html = me.prepareExportElement();\n        Object.values(subGrids).forEach(({ placeHolder, rows, mergedCellsHtml }) => {\n            const placeHolderText = placeHolder.outerHTML;\n            let contentHtml =  me.positionRows(rows, config).join('');\n            if (mergedCellsHtml?.length) {\n                contentHtml += `<div class=\"b-grid-merged-cells-container\">${mergedCellsHtml.join('')}</div>`;\n            }\n            html = html.replace(placeHolderText, contentHtml);\n        });\n        return html;\n    }\n}\n// HACK: terser/obfuscator doesn't yet support async generators, when processing code it converts async generator to regular async\n// function.\nSinglePageExporter.prototype.pagesExtractor = async function * pagesExtractor(config) {\n    // When we prepared grid we stretched it horizontally, now we need to gather all rows\n    // There are two ways:\n    // 1. set component height to scrollable.scrollHeight value to render all rows at once (maybe a bit more complex\n    // if rows have variable height)\n    // 2. iterate over rows, scrolling new portion into view once in a while\n    // #1 sounds simpler, but that might require too much rendering, let's scroll rows instead\n    const\n        me             = this,\n        { client }     = config,\n        { totalWidth } = me.exportMeta,\n        styles         = me.stylesheets,\n        portrait       = config.orientation === Orientation.portrait,\n        paperFormat    = PaperFormat[config.paperFormat],\n        isPrint        = config.useBrowserPrint,\n        paperWidth     = me.getPaperWidth(paperFormat, portrait),\n        paperHeight    = me.getPaperHeight(paperFormat, portrait),\n        realPaperWidth = me.getPaperWidth(paperFormat, portrait),\n        realPaperHeight = me.getPaperHeight(paperFormat, portrait);\n    let totalHeight, header, footer;\n    if (config.enableDirectRendering) {\n        totalHeight = await me.renderRows(config);\n        totalHeight += client.headerHeight + client.footerHeight;\n    }\n    else {\n        totalHeight = await me.collectRows(config);\n        totalHeight += client.height - client.bodyHeight;\n    }\n    const html = me.buildPageHtml(config);\n    const totalClientHeight = totalHeight;\n    // Measure header and footer height\n    if (config.headerTpl) {\n        header = me.prepareHTML(config.headerTpl({ totalWidth }));\n        const height = me.measureElement(header);\n        totalHeight += height;\n    }\n    if (config.footerTpl) {\n        footer = me.prepareHTML(config.footerTpl({ totalWidth }));\n        const height = me.measureElement(footer);\n        totalHeight += height;\n    }\n    const\n        widthScale  = Math.min(1, me.getScaleValue(me.inchToPx(paperWidth), totalWidth)),\n        heightScale = Math.min(1, me.getScaleValue(me.inchToPx(paperHeight), totalHeight)),\n        scale       = Math.min(widthScale, heightScale);\n    // Now add style to stretch grid vertically\n    styles.push(\n        `<style>\n                #${client.id} {\n                    height: ${totalClientHeight}px !important;\n                    width: ${totalWidth}px !important;\n                }\n                ${\n                    isPrint\n                        ? `\n                            html, body {\n                                overflow: hidden;\n                            }\n                            .b-page-wrap {\n                                width: ${realPaperWidth}in;\n                                height: ${realPaperHeight}in;\n                            }\n                            .b-print:not(.b-firefox) .b-export-content {\n                                zoom: ${scale};\n                                height: 100%;\n                            }\n                            .b-print.b-firefox .b-export-content {\n                                transform: scale(${scale}) ${me.centerContentHorizontally ? 'translateX(-50%)' : ''};\n                                transform-origin: top left;\n                                height: ${scale === 1 ? 'inherit' : 'auto !important'};\n                            }\n                            .b-export-content {\n                                ${me.centerContentHorizontally ? 'left: 50%;' : ''}\n                            }\n                        `\n                        : `\n                            .b-export-content {\n                                ${me.centerContentHorizontally ? 'left: 50%;' : ''}\n                                transform: scale(${scale}) ${me.centerContentHorizontally ? 'translateX(-50%)' : ''};\n                                transform-origin: top left;\n                                height: ${scale === 1 ? 'inherit' : 'auto !important'};\n                            }\n                        `\n                }\n            </style>`\n    );\n    // This is a single page exporter so we only yield one page\n    yield {\n        html : me.pageTpl({\n            html,\n            header,\n            footer,\n            styles,\n            paperWidth,\n            paperHeight,\n            realPaperHeight,\n            realPaperWidth,\n            currentPage : 0,\n            isPrint     : config.useBrowserPrint\n        })\n    };\n};\nSinglePageExporter._$name = 'SinglePageExporter';", "import AjaxHelper from '../../../Core/helper/AjaxHelper.js';\nimport EventHelper from '../../../Core/helper/EventHelper.js';\nimport VersionHelper from '../../../Core/helper/VersionHelper.js';\nimport InstancePlugin from '../../../Core/mixin/InstancePlugin.js';\nimport MultiPageExporter from './exporter/MultiPageExporter.js';\nimport MultiPageVerticalExporter from './exporter/MultiPageVerticalExporter.js';\nimport SinglePageExporter from './exporter/SinglePageExporter.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\nimport ExportDialog from '../../view/export/ExportDialog.js';\nimport GridFeatureManager from '../GridFeatureManager.js';\nimport Toast from '../../../Core/widget/Toast.js';\nimport { FileMIMEType } from './Utils.js';\n/**\n * @module Grid/feature/export/PdfExport\n */\n/**\n * Generates PDF/PNG files from the Grid component.\n *\n * **NOTE:** Server side is required to make export work!\n *\n * Check out PDF Export Server documentation and installation steps [here](https://github.com/bryntum/pdf-export-server#pdf-export-server)\n *\n * When your server is up and running, it listens to requests. The Export feature sends a request to the specified URL\n * with the HTML fragments. The server generates a PDF (or PNG) file and returns a download link (or binary, depending\n * on {@link #config-sendAsBinary} config). Then the Export feature opens the link in a new tab and the file is\n * automatically downloaded by your browser. This is configurable, see {@link #config-openAfterExport} config.\n *\n * The {@link #config-exportServer} URL must be configured. The URL can be localhost if you start the server locally,\n * or your remote server address.\n *\n * ## Usage\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         pdfExport : {\n *             exportServer : 'http://localhost:8080' // Required\n *         }\n *     }\n * })\n *\n * // Opens popup allowing to customize export settings\n * grid.features.pdfExport.showExportDialog();\n *\n * // Simple export\n * grid.features.pdfExport.export({\n *     columns : grid.columns.map(c => c.id)\n * }).then(result => {\n *     // Response instance and response content in JSON\n *     let { response } = result;\n * });\n * ```\n *\n * ## Exporters\n *\n * There are three exporters available by default: `singlepage`, `multipage` and `multipagevertical`:\n *  * `singlepage` -  generates single page with content scaled to fit the provided {@link #config-paperFormat}\n *  * `multipage` - generates as many pages as required to fit all requested content, unscaled\n *  * `multipagevertical` - a combination of two above: it scales content horizontally to fit into page width and then\n *  puts overflowing content on vertical pages. Like a scroll.\n *\n * ## Loading resources\n *\n * If you face a problem with loading resources when exporting, the cause might be that the application and the export server are hosted on different servers.\n * This is due to [Cross-Origin Resource Sharing](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) (CORS). There are 2 options how to handle this:\n * - Allow cross-origin requests from the server where your export is hosted to the server where your application is hosted;\n * - Copy all resources keeping the folder hierarchy from the server where your application is hosted to the server where your export is hosted\n * and setup paths using {@link #config-translateURLsToAbsolute} config and configure the export server to give access to the path:\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         pdfExport : {\n *             exportServer : 'http://localhost:8080',\n *             // '/resources' is hardcoded in WebServer implementation\n *             translateURLsToAbsolute : 'http://localhost:8080/resources'\n *         }\n *     }\n * })\n * ```\n *\n * ```javascript\n * // Following path would be served by this address: http://localhost:8080/resources/\n * node ./src/server.js -h 8080 -r web/application/styles\n * ```\n *\n * where `web/application/styles` is a physical root location of the copied resources, for example:\n *\n * <img src=\"Grid/export-server-resources.png\" style=\"max-width : 500px\" alt=\"Export server structure with copied resources\" />\n *\n * This feature is **disabled** by default.\n * For info on enabling it, see {@link Grid/view/mixin/GridFeatures}.\n *\n * @extends Core/mixin/InstancePlugin\n *\n * @demo Grid/export\n * @classtype pdfExport\n * @feature\n */\nexport default class PdfExport extends InstancePlugin {\n    static get $name() {\n        return 'PdfExport';\n    }\n    static get configurable() {\n        return {\n            dialogClass  : ExportDialog,\n            /**\n             * URL of the print server.\n             * @config {String}\n             */\n            exportServer : undefined,\n            /**\n             * Returns the instantiated export dialog widget as configured by {@link #config-exportDialog}\n             * @member {Grid.view.export.ExportDialog} exportDialog\n             */\n            /**\n             * A config object to apply to the {@link Grid.view.export.ExportDialog} widget.\n             * @config {ExportDialogConfig}\n             */\n            exportDialog : {\n                value : true,\n                $config : ['lazy']\n            },\n            /**\n             * Name of the exported file.\n             * @config {String}\n             * @category Export file config\n             */\n            fileName : null,\n            /**\n             * Format of the exported file, either `pdf` or `png`.\n             * @config {'pdf'|'png'}\n             * @default\n             * @category Export file config\n             */\n            fileFormat : 'pdf',\n            /**\n             * Export server will navigate to this url first and then will change page content to whatever client sent.\n             * This option is useful with react dev server, which uses a strict CORS policy.\n             * @config {String}\n             */\n            clientURL : null,\n            /**\n             * Export paper format. Available options are A1...A5, Legal, Letter.\n             * @config {'A1'|'A2'|'A3'|'A4'|'A5'|'Legal'|'Letter'}\n             * @default\n             * @category Export file config\n             */\n            paperFormat : 'A4',\n            /**\n             * Orientation. Options are `portrait` and `landscape`.\n             * @config {'portrait'|'landscape'}\n             * @default\n             * @category Export file config\n             */\n            orientation : 'portrait',\n            /**\n             * Specifies which rows to export. `all` for complete set of rows, `visible` for only rows currently visible.\n             * @config {'all'|'visible'}\n             * @category Export file config\n             * @default\n             */\n            rowsRange : 'all',\n            /**\n             * Set to true to align row top to the page top on every exported page. Only applied to multipage export.\n             * @config {Boolean}\n             * @default\n             */\n            alignRows : false,\n            /**\n             * Set to true to show column headers on every page. This will also set {@link #config-alignRows} to true.\n             * Only applies to MultiPageVertical exporter.\n             * @config {Boolean}\n             * @default\n             */\n            repeatHeader : false,\n            /**\n             * By default, subGrid width is changed to fit all exported columns. To keep certain subGrid size specify it\n             * in the following form:\n             * ```javascript\n             * keepRegionSizes : {\n             *     locked : true\n             * }\n             * ```\n             * @config {Object<String,Boolean>}\n             * @default\n             */\n            keepRegionSizes : null,\n            /**\n             * When exporting large views (hundreds of pages) stringified HTML may exceed browser or server request\n             * length limit. This config allows to specify how many pages to send to server in one request.\n             * @config {Number}\n             * @default\n             * @private\n             */\n            pagesPerRequest : 0,\n            /**\n             * Config for exporter.\n             * @config {Object}\n             * @private\n             */\n            exporterConfig : null,\n            /**\n             * Type of the exporter to use. Should be one of the configured {@link #config-exporters}\n             * @config {'singlepage'|'multipage'|'multipagevertical'|String}\n             * @default\n             */\n            exporterType : 'singlepage',\n            /**\n             * List of exporter classes to use in export feature\n             * @config {Grid.feature.export.exporter.Exporter[]}\n             * @default\n             */\n            exporters : [SinglePageExporter, MultiPageExporter, MultiPageVerticalExporter],\n            /**\n             * `True` to replace all linked CSS files URLs to absolute before passing HTML to the server.\n             * When passing a string the current origin of the CSS files URLS will be replaced by the passed origin.\n             *\n             * For example: css files pointing to /app.css will be translated from current origin to {translateURLsToAbsolute}/app.css\n             * @config {Boolean|String}\n             * @default\n             */\n            translateURLsToAbsolute : true,\n            /**\n             * When true links are converted to absolute by combining current window location (with replaced origin) with\n             * resource link.\n             * When false links are converted by combining new origin with resource link (for angular)\n             * @config {Boolean}\n             * @default\n             */\n            keepPathName : true,\n            /**\n             * When true, page will attempt to download generated file.\n             * @config {Boolean}\n             * @default\n             */\n            openAfterExport : true,\n            /**\n             * Set to true to receive binary file from the server instead of download link.\n             * @config {Boolean}\n             * @default\n             */\n            sendAsBinary : false,\n            /**\n             * False to open in the current tab, true - in a new tab\n             * @config {Boolean}\n             * @default\n             */\n            openInNewTab : false,\n            /**\n             * A template function used to generate a page header. It is passed an object with \u00B4currentPage\u00B4 and `totalPages\u00B4 properties.\n             *\n             * ```javascript\n             * let grid = new Grid({\n             *     appendTo   : 'container',\n             *     features : {\n             *         pdfExport : {\n             *             exportServer : 'http://localhost:8080/',\n             *             headerTpl : ({ currentPage, totalPages }) => `\n             *                 <div class=\"demo-export-header\">\n             *                     <img src=\"coolcorp-logo.png\"/>\n             *                     <dl>\n             *                         <dt>Date: ${DateHelper.format(new Date(), 'll LT')}</dt>\n             *                         <dd>${totalPages ? `Page: ${currentPage + 1}/${totalPages}` : ''}</dd>\n             *                     </dl>\n             *                 </div>`\n             *          }\n             *     }\n             * });\n             * ```\n             * @config {Function}\n             * @param {Object} data Data object\n             * @param {Number} data.currentPage Current page number\n             * @param {Number} data.totalPages Tolal pages count\n             * @returns {String}\n             */\n            headerTpl : null,\n            /**\n             * A template function used to generate a page footer. It is passed an object with \u00B4currentPage\u00B4 and `totalPages\u00B4 properties.\n             *\n             * ```javascript\n             * let grid = new Grid({\n             *      appendTo   : 'container',\n             *      features : {\n             *          pdfExport : {\n             *              exportServer : 'http://localhost:8080/',\n             *              footerTpl    : () => '<div class=\"demo-export-footer\"><h3>\u00A9 2020 CoolCorp Inc</h3></div>'\n             *          }\n             *      }\n             * });\n             * ```\n             *\n             * @config {Function}\n             * @param {Object} data Data object\n             * @param {Number} data.currentPage Current page number\n             * @param {Number} data.totalPages Tolal pages count\n             * @returns {String}\n             */\n            footerTpl : null,\n            /**\n             * An object containing the Fetch options to pass to the export server request. Use this to control if\n             * credentials are sent and other options, read more at\n             * [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch).\n             * @config {FetchOptions}\n             */\n            fetchOptions : null,\n            /**\n             * A message to be shown when Export feature is performing export.\n             * @config {String}\n             * @default \"Generating pages...\"\n             */\n            exportMask : 'L{Generating pages}',\n            /**\n             * A message to be shown when export is almost done.\n             * @config {String}\n             * @default \"Waiting for response from server...\"\n             */\n            exportProgressMask : 'L{Waiting for response from server}',\n            /**\n             * Set to `false` to not show Toast message on export error.\n             * @config {Boolean}\n             * @default\n             */\n            showErrorToast : true,\n            localizableProperties : ['exportMask', 'exportProgressMask'],\n            /**\n             * This method accepts all stylesheets (link and style tags) which are supposed to be put on the page. Use\n             * this hook method to filter or modify them.\n             *\n             * ```javascript\n             * new Grid({\n             *     features: {\n             *         pdfExport: {\n             *             // filter out inline styles and bootstrap.css\n             *             filterStyles: styles => styles.filter(item => !/(link|bootstrap.css)/.test(item))\n             *         }\n             *     }\n             * });\n             * ```\n             * @param {String[]} styles\n             * @returns {String[]} List of stylesheets to put on the exported page\n             */\n            filterStyles : styles => styles,\n            /**\n             * Enables direct rendering of the component content which significantly improves performance. To enable\n             * old export mode set this flag to false.\n             * @config {Boolean}\n             * @default\n             */\n            enableDirectRendering : true,\n            /**\n             * This config forces exporter to always use rendered column width. Used by Agenda view in Calendar\n             * @private\n             */\n            useRenderedColumnWidth : false,\n            /**\n             * When true, export feature will use an iframe and browser's default print dialog, which allows to save\n             * as PDF. Content is optimized for chrome/edge to exact page size in the specified orientation and no\n             * margins. If you only see grid header or blank pages, try using different scale value in the print dialog\n             * **NOTE**: Not supported in Safari. Print works, but Safari cannot seem to fit content to one page\n             * correctly.\n             * @config {Boolean}\n             * @default\n             * @private\n             */\n            useBrowserPrint : false\n        };\n    }\n    updateEnableDirectRendering(value) {\n        if (!value) {\n            VersionHelper.deprecate('Grid', '6.0.0', 'Indirect rendering is deprecated');\n        }\n    }\n    doDestroy() {\n        this.exportDialog?.destroy();\n        this.exportersMap.forEach(exporter => exporter.destroy());\n        super.doDestroy();\n    }\n    /**\n     * When export is started from GUI ({@link Grid.view.export.ExportDialog}), export promise can be accessed via\n     * this property.\n     * @property {Promise|null}\n     */\n    get currentExportPromise() {\n        return this._currentExportPromise;\n    }\n    set currentExportPromise(value) {\n        this._currentExportPromise = value;\n    }\n    get exportersMap() {\n        return this._exportersMap || (this._exportersMap = new Map());\n    }\n    getExporter(config = {}) {\n        const\n            me               = this,\n            { exportersMap } = me,\n            { type }         = config;\n        let exporter;\n        if (exportersMap.has(type)) {\n            exporter = exportersMap.get(type);\n            Object.assign(exporter, config);\n        }\n        else {\n            const exporterClass = this.exporters.find(cls => cls.type === type);\n            if (!exporterClass) {\n                throw new Error(`Exporter type ${type} is not found. Make sure you've configured it`);\n            }\n            config = ObjectHelper.clone(config);\n            delete config.type;\n            exporter = new exporterClass(config);\n            exporter.relayAll(me);\n            exportersMap.set(type, exporter);\n        }\n        return exporter;\n    }\n    buildExportConfig(config = {}) {\n        const\n            me = this,\n            {\n                client,\n                exportServer,\n                clientURL,\n                fileFormat,\n                fileName,\n                paperFormat,\n                rowsRange,\n                alignRows,\n                repeatHeader,\n                keepRegionSizes,\n                orientation,\n                translateURLsToAbsolute,\n                keepPathName,\n                sendAsBinary,\n                headerTpl,\n                footerTpl,\n                filterStyles,\n                enableDirectRendering,\n                useRenderedColumnWidth,\n                useBrowserPrint\n            }  = me;\n        if (!config.columns) {\n            config.columns = client.columns.visibleColumns.filter(column => column.exportable).map(column => column.id);\n        }\n        const result = ObjectHelper.assign({\n            client,\n            exportServer,\n            clientURL,\n            fileFormat,\n            paperFormat,\n            rowsRange,\n            alignRows,\n            repeatHeader,\n            keepRegionSizes,\n            orientation,\n            translateURLsToAbsolute,\n            keepPathName,\n            sendAsBinary,\n            headerTpl,\n            footerTpl,\n            enableDirectRendering,\n            useRenderedColumnWidth,\n            useBrowserPrint,\n            exporterType : me.exporterType,\n            fileName     : fileName || client.$$name\n        }, config);\n        // slice columns array to not modify it during export\n        result.columns = config.columns.slice();\n        // Only vertical exporter is supported\n        if (result.exporterType !== 'multipagevertical') {\n            result.repeatHeader = false;\n        }\n        // Align rows by default\n        if (!('alignRows' in config) && config.repeatHeader) {\n            result.alignRows = true;\n        }\n        result.exporterConfig = ObjectHelper.assign({\n            type                    : result.exporterType,\n            translateURLsToAbsolute : result.translateURLsToAbsolute,\n            keepPathName            : result.keepPathName,\n            filterStyles\n        }, result.exporterConfig || {});\n        delete result.exporterType;\n        delete result.translateURLsToAbsolute;\n        delete result.keepPathName;\n        return result;\n    }\n    /**\n     * Starts the export process. Accepts a config object which overrides any default configs.\n     * **NOTE**. Component should not be interacted with when export is in progress\n     *\n     * @param {Object} config\n     * @returns {Promise} Object of the following structure\n     * ```\n     * {\n     *     response // Response instance\n     * }\n     * ```\n     */\n    async export(config = {}) {\n        const\n            me = this,\n            {\n                client,\n                pagesPerRequest\n            }  = me;\n        config = me.buildExportConfig(config);\n        let result;\n        /**\n         * Fires on the owning Grid before export started. Return `false` to cancel the export.\n         * @event beforePdfExport\n         * @preventable\n         * @on-owner\n         * @param {Object} config Export config\n         */\n        if (client.trigger('beforePdfExport', { config }) !== false) {\n            client.isExporting = true;\n            // This mask should be always visible to protect grid from changes even if the mask message is not visible\n            // due to the export dialog which is rendered above the grid's mask. The dialog has its own mask which shares the export message.\n            client.mask(me.exportMask);\n            try {\n                const exporter = me.getExporter(config.exporterConfig);\n                if (pagesPerRequest === 0) {\n                    const pages = await exporter.export(config);\n                    if (me.isDestroying) {\n                        return;\n                    }\n                    // Hide dialog\n                    me.exportDialog?.close();\n                    // We can unmask early\n                    client.unmask();\n                    /**\n                     * Fires when export progress changes\n                     * @event exportStep\n                     * @param {Number} progress Current progress, 0-100\n                     * @param {String} text Optional text to show\n                     */\n                    me.trigger('exportStep', { progress : 90, text : me.exportProgressMask, contentGenerated : true });\n                    if (config.useBrowserPrint) {\n                        await me.doPrint(pages, config);\n                        // We used client side print, return empty object\n                        result = {};\n                    }\n                    else {\n                        const responsePromise = me.receiveExportContent(pages, config);\n                        // Show toast message indicating we're waiting for the server response\n                        me.toast = me.showLoadingToast(responsePromise);\n                        const response = await responsePromise;\n                        result = { response };\n                        await me.processExportContent(response, config);\n                    }\n                }\n            }\n            catch (error) {\n                if (error instanceof Response) {\n                    result = { response : error };\n                }\n                else {\n                    result = { error };\n                }\n                throw error;\n            }\n            finally {\n                if (me.toast && !me.toast.isDestroying) {\n                    // Hide would also destroy the toast\n                    me.toast.hide();\n                }\n                if (!me.isDestroying) {\n                    // Close dialog on exception\n                    me.exportDialog?.close();\n                    client.unmask();\n                    if (me.showErrorToast) {\n                        // Do not show warning if user has cancelled request\n                        if (result.error) {\n                            if (result.error.name !== 'AbortError') {\n                                Toast.show({\n                                    html        : me.L('L{Export failed}'),\n                                    rootElement : me.rootElement\n                                });\n                            }\n                        }\n                        else if (result.response && !result.response.ok) {\n                            Toast.show({\n                                html        : me.L('L{Server error}'),\n                                rootElement : me.rootElement\n                            });\n                        }\n                    }\n                    /**\n                     * Fires on the owning Grid when export has finished\n                     * @event pdfExport\n                     * @on-owner\n                     * @param {Response} [response] Optional response, if received\n                     * @param {Error} [error] Optional error, if exception occurred\n                     */\n                    client.trigger('pdfExport', result);\n                    client.isExporting = false;\n                }\n            }\n        }\n        return result;\n    }\n    /**\n     * Sends request to the export server and returns Response instance. This promise can be cancelled by the user\n     * by clicking on the toast message. When the user clicks on the toast, `abort` method is called on the promise\n     * returned by this method. If you override this method you can implement `abort` method like in the snippet\n     * below to cancel the request.\n     *\n     * ```javascript\n     * class MyPdfExport extends PdfExport {\n     *     receiveExportContent(pages, config) {\n     *         let controller;\n     *\n     *         const promise = new Promise(resolve => {\n     *             controller = new AbortController();\n     *             const signal = controller.signal;\n     *\n     *             fetch(url, { signal })\n     *                 .then(response => resolve(response));\n     *         });\n     *\n     *         // This method will be called when user clicks on the toast message to cancel the request\n     *         promise.abort = () => controller.abort();\n     *\n     *         return promise;\n     *     }\n     * }\n     *\n     * const grid = new Grid({ features: { myPdfExport : {...} } });\n     *\n     * grid.features.myPdfExport.export().catch(e => {\n     *     // In case of aborted request do nothing\n     *     if (e.name !== 'AbortError') {\n     *         // handle other exceptions\n     *     }\n     * });\n     * ```\n     * @param {Object[]} pages Array of exported pages.\n     * @param {String} pages[].html pages HTML of the exported page.\n     * @param {Object} config Export config\n     * @param {String} config.exportServer URL of the export server.\n     * @param {String} config.orientation Page orientation. portrait/landscape.\n     * @param {String} config.paperFormat Paper format as supported by puppeteer. A4/A3/...\n     * @param {String} config.fileFormat File format. PDF/PNG.\n     * @param {String} config.fileName Name to use for the saved file.\n     * @param {String} config.clientURL URL to navigate before export. See {@link #config-clientURL}.\n     * @param {String} config.sendAsBinary Tells server whether to return binary file instead of download link.\n     * @returns {Promise} Returns Response instance\n     */\n    receiveExportContent(pages, config) {\n        return AjaxHelper.fetch(\n            config.exportServer,\n            Object.assign({\n                method      : 'POST',\n                credentials : 'omit',\n                headers     : { 'Content-Type' : 'application/json' },\n                body        : JSON.stringify({\n                    html         : pages,\n                    orientation  : config.orientation,\n                    format       : config.paperFormat,\n                    fileFormat   : config.fileFormat,\n                    fileName     : config.fileName,\n                    clientURL    : config.clientURL,\n                    sendAsBinary : config.sendAsBinary\n                })\n            }, this.fetchOptions)\n        );\n    }\n    /**\n     * Handles output of the {@link #function-receiveExportContent}. Server response can be of two different types depending\n     * on {@link #config-sendAsBinary} config:\n     * - `application/json` In this case JSON response contains url of the file to download\n     * - `application/octet-stream` In this case response contains stream of file binary data\n     *\n     * If {@link #config-openAfterExport} is true, this method will try to download content.\n     * @param {Response} response\n     * @param {Object} config Export config\n     * @param {String} config.exportServer URL of the export server.\n     * @param {String} config.orientation Page orientation. portrait/landscape.\n     * @param {String} config.paperFormat Paper format as supported by puppeteer. A4/A3/...\n     * @param {String} config.fileFormat File format. PDF/PNG.\n     * @param {String} config.fileName Name to use for the saved file.\n     * @param {String} config.clientURL URL to navigate before export. See {@link #config-clientURL}.\n     * @param {String} config.sendAsBinary Tells server whether to return binary file instead of download link. See {@link #config-sendAsBinary}\n     */\n    async processExportContent(response, config) {\n        const me = this;\n        if (response.ok && me.openAfterExport) {\n            // Clone Response to not block response stream\n            response = response.clone();\n            const contentType = response.headers.get('content-type');\n            if (contentType.match(/application\\/octet-stream/)) {\n                const\n                    MIMEType  = FileMIMEType[config.fileFormat],\n                    objectURL = await me.responseBlobToObjectURL(response, MIMEType),\n                    link      = me.getDownloadLink(config.fileName, objectURL);\n                link.click();\n            }\n            else if (contentType.match(/application\\/json/)) {\n                const responseJSON = await response.json();\n                if (responseJSON.success) {\n                    const link = me.getDownloadLink(config.fileName, responseJSON.url);\n                    link.click();\n                }\n                else {\n                    Toast.show({\n                        html        : responseJSON.msg,\n                        rootElement : this.rootElement\n                    });\n                }\n            }\n        }\n    }\n    doPrint(pages) { }\n    /**\n     * Creates object URL from response content with given mimeType\n     * @param {Response} response Response instance\n     * @param {String} mimeType\n     * @returns {Promise} Returns string object URL\n     * @private\n     */\n    async responseBlobToObjectURL(response, mimeType) {\n        const blob = await response.blob();\n        return URL.createObjectURL(blob.slice(0, blob.size, mimeType));\n    }\n    /**\n     * Creates link to download the file.\n     * @param {String} name File name\n     * @param {String} href URL of the resource\n     * @returns {HTMLElement} HTMLAnchorElement\n     * @private\n     */\n    getDownloadLink(name, href) {\n        const link = document.createElement('a');\n        link.download = name;\n        link.href = href;\n        if (this.openInNewTab) {\n            link.target = '_blank';\n        }\n        return link;\n    }\n    get defaultExportDialogConfig() {\n        return ObjectHelper.copyProperties({}, this, [\n            'client',\n            'exporters',\n            'exporterType',\n            'orientation',\n            'fileFormat',\n            'paperFormat',\n            'alignRows',\n            'rowsRange',\n            'repeatHeader',\n            'useBrowserPrint'\n        ]);\n    }\n    changeExportDialog(exportDialog, oldExportDialog) {\n        const me = this;\n        oldExportDialog?.destroy();\n        if (exportDialog) {\n            const config = me.dialogClass.mergeConfigs({\n                rootElement : me.rootElement,\n                client      : me.client,\n                modal       : {\n                    transparent : true\n                },\n                items : {\n                    rowsRangeField : {\n                        value : me.rowsRange\n                    },\n                    exporterTypeField : {\n                        value : me.exporterType\n                    },\n                    orientationField : {\n                        value : me.orientation\n                    },\n                    paperFormatField : {\n                        value : me.paperFormat\n                    },\n                    repeatHeaderField : {\n                        value : me.repeatHeader\n                    },\n                    fileFormatField : {\n                        value : me.fileFormat\n                    },\n                    alignRowsField : {\n                        checked : me.alignRows\n                    }\n                }\n            }, me.defaultExportDialogConfig, exportDialog);\n            exportDialog = me.dialogClass.new(config);\n            exportDialog.ion({\n                export  : me.onExportButtonClick,\n                thisObj : me\n            });\n        }\n        return exportDialog;\n    }\n    /**\n     * Shows {@link Grid.view.export.ExportDialog export dialog}\n     */\n    async showExportDialog() {\n        return this.exportDialog.show();\n    }\n    onExportButtonClick({ values }) {\n        const\n            me         = this,\n            dialogMask = me.exportDialog.mask({\n                progress    : 0,\n                maxProgress : 100,\n                text        : me.exportMask\n            });\n        const detacher = me.ion({\n            exportstep({ progress, text, contentGenerated }) {\n                if (contentGenerated) {\n                    me.exportDialog.unmask();\n                    detacher();\n                }\n                else {\n                    dialogMask.progress = progress;\n                    if (text != null) {\n                        dialogMask.text = text;\n                    }\n                }\n            }\n        });\n        me.currentExportPromise = me.export(values);\n        // Clear current export promise\n        me.currentExportPromise.catch(() => {}).finally(() => {\n            detacher();\n            me.exportDialog?.unmask();\n            me.currentExportPromise = null;\n        });\n    }\n    showLoadingToast(exportPromise) {\n        const toast = Toast.show({\n            timeout      : 0,\n            showProgress : false,\n            rootElement  : this.rootElement,\n            html         : `\n    <span class=\"b-mask-icon b-icon b-icon-spinner\"></span>\n    <span>${this.exportProgressMask}</span>\n    <button class=\"b-button\">${this.L('L{Click to abort}')}</button>`\n        });\n        EventHelper.on({\n            element : toast.element,\n            click() {\n                exportPromise.abort?.();\n            }\n        });\n        return toast;\n    }\n}\nPdfExport._$name = 'PdfExport'; GridFeatureManager.registerFeature(PdfExport, false, 'Grid');\n// Format expected by export server\n// const pageFormat = {\n//     html       : '',\n//     column     : 1,\n//     number     : 1,\n//     row        : 1,\n//     rowsHeight : 1\n// };\n//\n// const format = {\n//     fileFormat  : 'pdf',\n//     format      : 'A4',\n//     orientation : 'portrait',\n//     range       : 'complete',\n//     html        : { array : JSON.stringify(pageFormat) }\n// };\n", "/**\n * @module Grid/feature/export/mixin/PrintMixin\n */\n/**\n * Mixin implementing print functionality to PdfExport feature.\n * @mixin\n */\nexport default Target => class PrintMixin extends Target {\n    static get $name() {\n        return 'PrintMixin';\n    };\n    static get configurable() {\n        return {\n            useBrowserPrint : true,\n            exporterType : 'multipagevertical'\n        };\n    }\n    static get pluginConfig() {\n        return {\n            assign : ['print', 'showPrintDialog']\n        };\n    }\n    /**\n     * Shows the {@link Grid.view.export.ExportDialog print dialog}\n     * @returns {Promise}\n     * @on-owner\n     * @catagory Print\n     */\n    showPrintDialog(config) {\n        return this.showExportDialog(config);\n    }\n    /**\n     * Starts the print process. Accepts a config object which overrides any default configs.\n     * **NOTE** Component should not be interacted with when print is in progress\n     *\n     * @param {Object} config\n     * @returns {Promise} Promise which resolves when printing is done. Optionally it might return an object with an\n     * `error` key in it.\n     * @on-owner\n     * @catagory Print\n     */\n    print(config) {\n        return this.export(config);\n    }\n    /**\n     * This method is called when IFrame is loaded with all the HTML/CSS and is about to be printed. Use it to take\n     * control over the page contents.\n     * @param {HTMLIFrameElement} iframe\n     */\n    async onPrintIFrameLoad(iframe) {}\n    async showBrowserPrintDialog(iframe, resolve) {\n        await this.onPrintIFrameLoad(iframe);\n        // This one is a private event to block print API in tests\n        if (await this.client.trigger('beforeShowPrintDialog', { iframe }) !== false) {\n            const { contentWindow } = iframe;\n            // Clean up iframe after print\n            contentWindow.onafterprint = () => {\n                iframe.remove();\n                resolve();\n            };\n            contentWindow.print();\n        }\n        else {\n            iframe.remove();\n            resolve();\n        }\n    }\n    doPrint(pages) {\n        const me = this;\n        return new Promise((resolve, reject) => {\n            const iframe = document.createElement('iframe');\n            iframe.className = 'b-print-wrapper';\n            // We don't need to see this iframe\n            iframe.style.visibility = 'hidden';\n            iframe.style.height = '0';\n            iframe.onload = () => {\n                const\n                    handle   = iframe.contentWindow,\n                    doc      = handle.document,\n                    { body } = doc,\n                    parser   = new DOMParser();\n                let paperHeight;\n                pages.forEach(({ html }) => {\n                    const\n                        fragment = parser.parseFromString(html, 'text/html'),\n                        node     = doc.adoptNode(fragment.body.firstChild),\n                        pageWrap = doc.createElement('div');\n                    fragment.head.querySelectorAll('style,link[rel=\"stylesheet\"],link[as=\"style\"]').forEach(styleEl => {\n                        const el = doc.adoptNode(styleEl);\n                        doc.head.appendChild(el);\n                    });\n                    pageWrap.classList.add('b-page-wrap');\n                    pageWrap.style.height = fragment.body.parentElement.style.height;\n                    pageWrap.style.width = fragment.body.parentElement.style.width;\n                    paperHeight = parseFloat(fragment.body.parentElement.style.height);\n                    body.appendChild(pageWrap);\n                    pageWrap.appendChild(node);\n                });\n                const { html } = pages[0];\n                // DomParser is Salesforce ignores body classes which are required\n                body.className = html.match(/<body class=\"(.+?)\"/)?.[1] || '';\n                body.classList.add('b-print');\n                body.parentElement.classList.add('b-print-root');\n                body.parentElement.style.height = `${paperHeight * pages.length}in`;\n                Promise.all(Array.from(doc.head.querySelectorAll('link[rel=\"stylesheet\"]')).map(link => {\n                    return new Promise((resolve, reject) => {\n                        link.onload = resolve;\n                        link.onerror = reject;\n                    });\n                }))\n                    // When we added `<link>` elements to the IFrame we may have started loading the font too.\n                    // Normally we do, because our theme uses FontAwesome for icons. This promise will always\n                    // be resolved at some point: https://drafts.csswg.org/css-font-loading/#font-face-set-ready\n                    // So we can be sure that control which we pass to the browser print dialog is not lost.\n                    .then(() => doc.fonts.ready)\n                    .then(() => me.showBrowserPrintDialog(iframe, resolve))\n                    .catch(e => {\n                        console.warn(`Failed to load stylesheets ${e.message ? `: ${e.message}` : ''}`);\n                        reject(me.L('L{PdfExport.Export failed}'));\n                    });\n            };\n            me.client.element.parentElement.appendChild(iframe);\n        });\n    }\n};\n"],
  "mappings": "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",
  "names": ["RowsRange", "PaperFormat", "getPrintPaperSizeAdjustments", "BrowserHelper", "Orientation", "FileFormat", "FileMIMEType", "ExportRowsCombo", "Combo", "me", "ExportOrientationCombo", "buildComboItems", "obj", "fn", "x", "key", "ExportDialog", "Popup", "dialog", "exporter", "value", "oldValue", "exporterField", "r", "config", "client", "column", "LocaleManager_default", "items", "_a", "columnsField", "alignRowsField", "exporterTypeField", "repeatHeaderField", "c", "labelWidth", "widget", "Field", "values", "Exporter", "Delayable_default", "Events_default", "Localizable_default", "Base", "styles", "data", "title", "header", "footer", "htmlClasses", "bodyClasses", "paperHeight", "paperWidth", "html", "currentPage", "isPrint", "htmlStyle", "bodyStyle", "DomHelper", "TemplateHelper", "translate", "origin", "styleSheetNodes", "node", "result", "styleText", "converter", "match", "url", "base", "e", "promises", "detachers", "scrollable", "element", "target", "clear", "maskEl", "el", "IdHelper", "tbar", "bbar", "elements", "l", "subGrid", "paperFormat", "isPortrait", "prop", "rowManager", "firstVisibleIndex", "lastVisibleIndex", "pages", "resolve", "generator", "step", "contentHeight", "adjustedRowBuffer", "columns", "rowsRange", "keepRegionSizes", "enableDirectRendering", "useRenderedColumnWidth", "exportMeta", "fakeRow", "_b", "_c", "placeHolder", "width", "visibleColumns", "splitterWidth", "id", "headerId", "footerId", "childElement", "index", "row", "subGrids", "re", "fromIndex", "toIndex", "rows", "domConfigMap", "subGridName", "DomSync", "child", "syncId", "range", "MultiPageExporter", "headerTpl", "footerTpl", "alignRows", "pageWidth", "pageHeight", "onlyVisibleRows", "horizontalPages", "totalHeight", "verticalPages", "totalRows", "rowHeight", "rowsOnFirstPage", "rowsPerPage", "remainingRows", "currentPageTopMargin", "verticalPosition", "lastRowDataIndex", "onlyVisible", "hasMergeCells", "remainingHeight", "firstRowIndex", "overflowingHeight", "lastDataIndex", "offset", "mergedCells", "mergedCell", "lastRow", "detacher", "lastRowIndex", "store", "lastTop", "previousTop", "totalWidth", "totalPages", "mergedCellsHtml", "placeHolderText", "contentHtml", "stylesheets", "realPaperWidth", "realPaperHeight", "MultiPageVerticalExporter", "processedRows", "repeatHeader", "scale", "initialScroll", "rowsHeight", "firstRow", "clientHeaderHeight", "finishRowIndex", "nextPageTop", "style", "gridHeight", "SinglePageExporter", "currentTop", "height", "lastProcessedRowIndex", "firstNewRowIndex", "lastNewRowIndex", "firstVisibleRow", "top", "i", "portrait", "totalClientHeight", "widthScale", "heightScale", "PdfExport", "InstancePlugin", "VersionHelper", "exportersMap", "type", "exporterClass", "cls", "ObjectHelper", "exportServer", "clientURL", "fileFormat", "fileName", "orientation", "translateURLsToAbsolute", "keepPathName", "sendAsBinary", "filterStyles", "useBrowserPrint", "pagesPerRequest", "responsePromise", "response", "error", "Toast", "AjaxHelper", "contentType", "MIMEType", "objectURL", "responseJSON", "mimeType", "blob", "name", "href", "link", "exportDialog", "oldExportDialog", "dialogMask", "progress", "text", "contentGenerated", "exportPromise", "toast", "EventHelper", "GridFeatureManager", "PrintMixin_default", "Target", "iframe", "contentWindow", "reject", "handle", "doc", "body", "parser", "fragment", "pageWrap", "styleEl"]
}
