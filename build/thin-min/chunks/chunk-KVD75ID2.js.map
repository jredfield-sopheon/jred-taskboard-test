{
  "version": 3,
  "sources": ["../../../../Scheduler/lib/Scheduler/model/mixin/TimeZonedDatesMixin.js", "../../../../Scheduler/lib/Scheduler/model/TimeSpan.js", "../../../../Scheduler/lib/Scheduler/data/mixin/ResourceStoreMixin.js", "../../../../Scheduler/lib/Scheduler/data/mixin/PartOfProject.js", "../../../../Scheduler/lib/Scheduler/model/mixin/ResourceModelMixin.js", "../../../../chronograph/src/collection/Iterator.js", "../../../../chronograph/src/class/Mixin.js", "../../../../chronograph/src/class/Base.js", "../../../../Engine/lib/Engine/quark/AbstractPartOfProjectGenericMixin.js", "../../../../Engine/lib/Engine/quark/CorePartOfProjectGenericMixin.js", "../../../../Engine/lib/Engine/quark/store/mixin/AbstractPartOfProjectStoreMixin.js", "../../../../Engine/lib/Engine/quark/model/mixin/AbstractPartOfProjectModelMixin.js", "../../../../Engine/lib/Engine/quark/model/mixin/CorePartOfProjectModelMixin.js", "../../../../Engine/lib/Engine/quark/model/scheduler_core/CoreResourceMixin.js", "../../../../Scheduler/lib/Scheduler/model/ResourceModel.js", "../../../../Scheduler/lib/Scheduler/data/mixin/PartOfBaseProject.js", "../../../../Engine/lib/Engine/quark/store/mixin/CorePartOfProjectStoreMixin.js", "../../../../Engine/lib/Engine/quark/store/AbstractResourceStoreMixin.js", "../../../../Engine/lib/Engine/quark/store/CoreResourceStoreMixin.js", "../../../../Scheduler/lib/Scheduler/data/ResourceStore.js", "../../../../Scheduler/lib/Scheduler/data/mixin/EventStoreMixin.js", "../../../../Scheduler/lib/Scheduler/data/mixin/GetEventsMixin.js", "../../../../Scheduler/lib/Scheduler/data/util/EventDayIndex.js", "../../../../Scheduler/lib/Scheduler/data/mixin/RecurringTimeSpansMixin.js", "../../../../Scheduler/lib/Scheduler/data/mixin/RecurringEventsMixin.js", "../../../../Scheduler/lib/Scheduler/data/util/recurrence/RecurrenceDayRuleEncoder.js", "../../../../Scheduler/lib/Scheduler/data/util/recurrence/AbstractRecurrenceIterator.js", "../../../../Scheduler/lib/Scheduler/data/util/recurrence/DailyRecurrenceIterator.js", "../../../../Scheduler/lib/Scheduler/data/util/recurrence/WeeklyRecurrenceIterator.js", "../../../../Scheduler/lib/Scheduler/data/util/recurrence/MonthlyRecurrenceIterator.js", "../../../../Scheduler/lib/Scheduler/data/util/recurrence/YearlyRecurrenceIterator.js", "../../../../Scheduler/lib/Scheduler/model/RecurrenceModel.js", "../../../../Scheduler/lib/Scheduler/model/mixin/RecurringTimeSpan.js", "../../../../Scheduler/lib/Scheduler/model/mixin/EventModelMixin.js", "../../../../Engine/lib/Engine/quark/model/scheduler_core/CoreEventMixin.js", "../../../../Engine/lib/Engine/quark/model/AbstractHasAssignmentsMixin.js", "../../../../Engine/lib/Engine/quark/model/scheduler_core/CoreHasAssignmentsMixin.js", "../../../../Engine/lib/Engine/quark/model/scheduler_core/CoreHasDependenciesMixin.js", "../../../../Engine/lib/Engine/quark/model/scheduler_core/SchedulerCoreEvent.js", "../../../../Scheduler/lib/Scheduler/model/EventModel.js", "../../../../Scheduler/lib/Scheduler/data/mixin/DayIndexMixin.js", "../../../../Engine/lib/Engine/quark/store/AbstractEventStoreMixin.js", "../../../../Engine/lib/Engine/quark/store/CoreEventStoreMixin.js", "../../../../Scheduler/lib/Scheduler/data/EventStore.js", "../../../../Scheduler/lib/Scheduler/model/mixin/AssignmentModelMixin.js", "../../../../Engine/lib/Engine/quark/model/scheduler_core/CoreAssignmentMixin.js", "../../../../Scheduler/lib/Scheduler/model/AssignmentModel.js", "../../../../Scheduler/lib/Scheduler/data/mixin/AssignmentStoreMixin.js", "../../../../Engine/lib/Engine/util/Functions.js", "../../../../Engine/lib/Engine/quark/store/AbstractAssignmentStoreMixin.js", "../../../../Engine/lib/Engine/quark/store/CoreAssignmentStoreMixin.js", "../../../../Scheduler/lib/Scheduler/data/AssignmentStore.js", "../../../../Scheduler/lib/Scheduler/model/DependencyBaseModel.js", "../../../../Engine/lib/Engine/quark/model/scheduler_core/CoreDependencyMixin.js", "../../../../Scheduler/lib/Scheduler/model/DependencyModel.js", "../../../../Scheduler/lib/Scheduler/data/mixin/DependencyStoreMixin.js", "../../../../Engine/lib/Engine/quark/store/AbstractDependencyStoreMixin.js", "../../../../Engine/lib/Engine/quark/store/CoreDependencyStoreMixin.js", "../../../../Scheduler/lib/Scheduler/data/DependencyStore.js", "../../../../Scheduler/lib/Scheduler/crud/mixin/AbstractCrudManagerValidation.js", "../../../../Scheduler/lib/Scheduler/crud/AbstractCrudManagerMixin.js", "../../../../Scheduler/lib/Scheduler/crud/transport/AjaxTransport.js", "../../../../Scheduler/lib/Scheduler/crud/encoder/JsonEncoder.js", "../../../../Scheduler/lib/Scheduler/data/mixin/ProjectCrudManager.js", "../../../../Scheduler/lib/Scheduler/crud/AbstractCrudManager.js", "../../../../Scheduler/lib/Scheduler/model/mixin/ProjectModelCommon.js", "../../../../Scheduler/lib/Scheduler/model/ResourceTimeRangeModel.js", "../../../../Scheduler/lib/Scheduler/data/ResourceTimeRangeStore.js", "../../../../Scheduler/lib/Scheduler/data/plugin/StoreTimeZonePlugin.js", "../../../../Scheduler/lib/Scheduler/model/mixin/ProjectModelTimeZoneMixin.js", "../../../../Scheduler/lib/Scheduler/model/TimeRangeModel.js", "../../../../Scheduler/lib/Scheduler/data/TimeRangeStore.js", "../../../../Scheduler/lib/Scheduler/model/mixin/ProjectModelMixin.js", "../../../../Scheduler/lib/Scheduler/model/mixin/ProjectCurrentConfig.js", "../../../../Scheduler/lib/Scheduler/data/util/ModelPersistencyManager.js", "../../../../Engine/lib/Engine/vendor/later/later.js", "../../../../Engine/lib/Engine/calendar/CalendarIntervalMixin.js", "../../../../Engine/lib/Engine/calendar/CalendarIntervalStore.js", "../../../../Engine/lib/Engine/scheduling/Types.js", "../../../../Engine/lib/Engine/util/Constants.js", "../../../../Engine/lib/Engine/util/Types.js", "../../../../Engine/lib/Engine/calendar/CalendarCache.js", "../../../../Engine/lib/Engine/util/StripDuplicates.js", "../../../../Engine/lib/Engine/calendar/CalendarCacheInterval.js", "../../../../Engine/lib/Engine/util/BinarySearch.js", "../../../../Engine/lib/Engine/calendar/SortedMap.js", "../../../../Engine/lib/Engine/calendar/IntervalCache.js", "../../../../Engine/lib/Engine/calendar/CalendarCacheSingle.js", "../../../../Engine/lib/Engine/calendar/UnspecifiedTimeIntervalModel.js", "../../../../Engine/lib/Engine/quark/model/AbstractCalendarMixin.js", "../../../../Engine/lib/Engine/quark/model/scheduler_core/CoreCalendarMixin.js", "../../../../Engine/lib/Engine/quark/store/AbstractCalendarManagerStoreMixin.js", "../../../../Engine/lib/Engine/quark/store/CoreCalendarManagerStoreMixin.js", "../../../../Engine/lib/Engine/quark/model/AbstractProjectMixin.js", "../../../../Engine/lib/Engine/quark/model/scheduler_core/SchedulerCoreProjectMixin.js", "../../../../Scheduler/lib/Scheduler/model/ProjectModel.js", "../../../../Scheduler/lib/Scheduler/data/CrudManager.js", "../../../../Scheduler/lib/Scheduler/crud/mixin/CrudManagerView.js"],
  "sourcesContent": ["import TimeZoneHelper from '../../../Core/helper/TimeZoneHelper.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\n/**\n * @module Scheduler/model/mixin/TimeZonedDatesMixin\n */\nconst dateFieldsToConvert = {\n    startDate      : 1,\n    endDate        : 1,\n    constraintDate : 1,\n    deadlineDate   : 1\n};\n/**\n * This mixin class overrides default Model functionality to provide support for time zone converted dates\n * @mixin\n */\nexport default Target => class TimeZonedDatesMixin extends Target {\n    static $name = 'TimeZonedDatesMixin';\n    static fields  = [\n        /**\n         * The current timeZone this record is converted to. Used internally to keep track of time zone conversions.\n         *\n         * Can also be used to create a new record with dates in a specific non-local timezone. That is useful for\n         * example when replacing a store dataset. That would be interpreted as a new load, and all dates would be\n         * converted to the configured timezone.\n         *\n         * If specifically set to `null` when adding a new record to a Store, the new record's dates will be converted\n         * to the Project's configured timezone.\n         *\n         * For more information about timezone conversion, se {@link Scheduler.model.ProjectModel#config-timeZone}.\n         *\n         * This field will not {@link Core.data.field.DataField#config-persist} by default.\n         *\n         * @field {String|Number|null} timeZone\n         * @category Advanced\n         */\n        {\n            name    : 'timeZone',\n            persist : false\n        }\n    ];\n    get timeZone() {\n        return this.getData('timeZone');\n    }\n    set timeZone(timeZone) {\n        this.setData('timeZone', timeZone);\n    }\n    setLocalDate(field, date) {\n        const me = this;\n        me.set(field, me.timeZone != null ? TimeZoneHelper.toTimeZone(date, me.timeZone) : date, true);\n        // Need to set data to fool engine that the dates haven't change\n        me.setData(field, me[field]);\n    }\n    getLocalDate(field) {\n        if (this.timeZone != null && this[field]) {\n            return TimeZoneHelper.fromTimeZone(this[field], this.timeZone);\n        }\n        return this[field];\n    }\n    applyChangeset(rawChanges) {\n        // When a sync response arrives from backend, the data will need to be converted to time zone before applied.\n        if (this.timeZone != null) {\n            for (const field in dateFieldsToConvert) {\n                if (rawChanges[field]) {\n                    this.setLocalDate(field, new Date(rawChanges[field]));\n                    delete rawChanges[field];\n                }\n            }\n        }\n        return super.applyChangeset(...arguments);\n    }\n    getFieldPersistentValue(field) {\n        if (this.timeZone != null) {\n            const fieldName = field?.field ?? field?.name ?? field;\n            // Used when saving/syncing. Returns local system dates\n            if (dateFieldsToConvert[fieldName]) {\n                return this.getLocalDate(fieldName);\n            }\n        }\n        return super.getFieldPersistentValue(field);\n    }\n    // Converts current record into a timeZone\n    convertToTimeZone(timeZone) {\n        const\n            me            = this,\n            metaModified  = { ...me.meta.modified },\n            convertFields = { ...dateFieldsToConvert };\n        // Do not convert start and end dates on task unless manually scheduled\n        if (me.isTask && !me.manuallyScheduled) {\n            delete convertFields.startDate;\n            delete convertFields.endDate;\n        }\n        // Collect values\n        for (const field in convertFields) {\n            // Only convert if field has value\n            if (me[field] != null) {\n                convertFields[field] = me[field];\n                // If already converted, restore to local system time zone\n                if (me.timeZone != null) {\n                    convertFields[field] = me.getLocalDate(field);\n                    // Restore value in meta modified as well\n                    if (metaModified[field]) {\n                        metaModified[field] = TimeZoneHelper.fromTimeZone(metaModified[field], me.timeZone);\n                    }\n                }\n            }\n            else {\n                delete convertFields[field];\n            }\n        }\n        // Change time zone\n        me.timeZone = timeZone;\n        // Set values\n        for (const field in convertFields) {\n            // Convert and set field date silently\n            me.setLocalDate(field, convertFields[field], false);\n            convertFields[field] = 1; // For clearing changes below\n            // Convert value in meta modified as well\n            if (me.timeZone != null && metaModified[field]) {\n                metaModified[field] = TimeZoneHelper.toTimeZone(metaModified[field], me.timeZone);\n            }\n        }\n        // Clear modification metadata\n        me.clearChanges(true, true, convertFields);\n        // If old modification metadata, restore them to record and store\n        if (!ObjectHelper.isEmpty(metaModified)) {\n            me.meta.modified = metaModified;\n            me.stores.forEach(store => store.modified.add(me));\n        }\n    }\n};\n", "import Model from '../../Core/data/Model.js';\nimport TimeZonedDatesMixin from './mixin/TimeZonedDatesMixin.js';\nimport DomClassList from '../../Core/helper/util/DomClassList.js';\nimport DH from '../../Core/helper/DateHelper.js';\nimport VersionHelper from '../../Core/helper/VersionHelper.js';\nimport BrowserHelper from '../../Core/helper/BrowserHelper.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport Duration from '../../Core/data/Duration.js';\n/**\n * @module Scheduler/model/TimeSpan\n */\n/**\n * This class represent a simple date range. It is being used in various subclasses and plugins which operate on date ranges.\n *\n * It's a subclass of {@link Core.data.Model}.\n * Please refer to documentation of those classes to become familiar with the base interface of this class.\n *\n * A TimeSpan has the following fields:\n *\n * - {@link #field-startDate}    - start date of the task in the ISO 8601 format\n * - {@link #field-endDate}      - end date of the task in the ISO 8601 format (not inclusive)\n * - {@link #field-duration}     - duration, time between start date and end date\n * - {@link #field-durationUnit} - unit used to express the duration\n * - {@link #field-name}         - an optional name of the range\n * - {@link #field-cls}          - an optional CSS class to be associated with the range.\n *\n * The data source of any field can be customized in the subclass. Please refer to {@link Core.data.Model} for details. To specify\n * another date format:\n *\n * ```javascript\n * class MyTimeSpan extends TimeSpan {\n *   static get fields() {\n *      { name: 'startDate', type: 'date', dateFormat: 'DD/MM/YY' }\n *   }\n * }\n * ```\n *\n * @extends Core/data/Model\n * @mixes Scheduler/model/mixin/TimeZonedDatesMixin\n */\nexport default class TimeSpan extends Model.mixin(TimeZonedDatesMixin) {\n    static $name = 'TimeSpan';\n    //region Field definitions\n    static fields = [\n        /**\n         * The start date of a time span (or Event / Task).\n         *\n         * Uses {@link Core/helper/DateHelper#property-defaultFormat-static DateHelper.defaultFormat} to convert a\n         * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and\n         * change the dateFormat for this field.\n         *\n         * Note that the field always returns a `Date`.\n         *\n         * @field {Date} startDate\n         * @accepts {String|Date}\n         * @category Scheduling\n         */\n        {\n            name : 'startDate',\n            type : 'date'\n        },\n        /**\n         * The end date of a time span (or Event / Task).\n         *\n         * Uses {@link Core/helper/DateHelper#property-defaultFormat-static DateHelper.defaultFormat} to convert a\n         * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and\n         * change the dateFormat for this field.\n         *\n         * Note that the field always returns a `Date`.\n         *\n         * @field {Date} endDate\n         * @accepts {String|Date}\n         * @category Scheduling\n         */\n        {\n            name : 'endDate',\n            type : 'date'\n        },\n        /**\n         * The numeric part of the timespan's duration (the number of units).\n         * @field {Number} duration\n         * @category Scheduling\n         */\n        {\n            name      : 'duration',\n            type      : 'number',\n            allowNull : true,\n            internal  : true\n        },\n        /**\n         * The unit part of the TimeSpan duration, defaults to \"d\" (days). Valid values are:\n         *\n         * - \"millisecond\" - Milliseconds\n         * - \"second\" - Seconds\n         * - \"minute\" - Minutes\n         * - \"hour\" - Hours\n         * - \"day\" - Days\n         * - \"week\" - Weeks\n         * - \"month\" - Months\n         * - \"quarter\" - Quarters\n         * - \"year\"- Years\n         *\n         * This field is readonly after creation, to change durationUnit use #setDuration().\n         * @field {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} durationUnit\n         * @category Scheduling\n         */\n        {\n            type         : 'durationunit',\n            name         : 'durationUnit',\n            defaultValue : 'd',\n            internal     : true\n        },\n        /**\n         * Calculated field which encapsulates the duration's magnitude and unit. This field will not be persisted,\n         * setting it will update the {@link #field-duration} and {@link #field-durationUnit} fields.\n         *\n         * @field {DurationConfig|Core.data.Duration} fullDuration\n         * @category Scheduling\n         */\n        {\n            name    : 'fullDuration',\n            persist : false,\n            column  : {\n                type : 'duration'\n            },\n            useProp : true\n        },\n        /**\n         * An encapsulation of the CSS classes to add to the rendered time span element.\n         *\n         * Always returns a {@link Core.helper.util.DomClassList}, but may still be treated as a string. For\n         * granular control of adding and removing individual classes, it is recommended to use the\n         * {@link Core.helper.util.DomClassList} API.\n         *\n         * @field {Core.helper.util.DomClassList} cls\n         * @accepts {Core.helper.util.DomClassList|String|String[]|Object}\n         *\n         * @category Styling\n         */\n        {\n            name         : 'cls',\n            defaultValue : '',\n            internal     : true\n        },\n        /**\n         * CSS class specifying an icon to apply to the rendered time span element.\n         * **Note**: In case event is a milestone, using `iconCls` with dependency feature might slightly decrease\n         * performance because feature will refer to the DOM to get exact size of the element.\n         * @field {String} iconCls\n         * @category Styling\n         */\n        {\n            name     : 'iconCls',\n            internal : true\n        },\n        /**\n         * A CSS style string (applied to `style.cssText`) or object (applied to `style`)\n         * ```\n         * record.style = 'color: red;font-weight: 800';\n         * ```\n         *\n         * @field {String} style\n         * @category Styling\n         */\n        {\n            name     : 'style',\n            type     : 'object',\n            internal : true\n        },\n        /**\n         * The name of the time span (or Event / Task)\n         * @field {String} name\n         * @category Common\n         */\n        {\n            name         : 'name',\n            type         : 'string',\n            defaultValue : ''\n        }\n    ];\n    //endregion\n    //region Init\n    construct(data, ...args) {\n        const me = this;\n        // fullDuration is a \"calculated field\", but convenient to allow supplying it in the data\n        if (data?.fullDuration) {\n            const { magnitude, unit } = data.fullDuration;\n            data.duration = magnitude;\n            data.unit = unit;\n            delete data.fullDuration;\n        }\n        super.construct(data, ...args);\n        me.normalize();\n        if (me.startDateMS && me.endDateMS && me.startDateMS > me.endDateMS) {\n            console.error(`startDate > endDate for ${me.constructor.$name} record with id: ${me.id}`);\n        }\n    }\n    //endregion\n    //region Date normalization\n    internalCalculateStartDate(endDate, duration, durationUnit) {\n        return DH.add(endDate, -duration, durationUnit);\n    }\n    internalCalculateEndDate(startDate, duration, durationUnit) {\n        // Use hours to set end date in order to correctly process DST crossings???\n        return DH.add(startDate, duration, durationUnit);\n    }\n    internalCalculateDuration(startDate, endDate, durationUnit) {\n        return DH.as(durationUnit, DH.diff(startDate, endDate, 'h'), 'h');\n    }\n    // Separate fn to allow calling later with specific values (used by Baseline)\n    internalNormalize(startDate, endDate, duration, durationUnit) {\n        const\n            me          = this,\n            hasDuration = duration != null;\n        // need to calculate duration (checking first since seemed most likely to happen)\n        if (startDate && endDate && !hasDuration) {\n            me.setData('duration', me.internalCalculateDuration(startDate, endDate, durationUnit));\n        }\n        // need to calculate endDate?\n        else if (startDate && !endDate && hasDuration) {\n            me.setData('endDate', me.internalCalculateEndDate(startDate, duration, durationUnit));\n        }\n        // need to calculate startDate\n        else if (!startDate && endDate && hasDuration) {\n            me.setData('startDate', me.internalCalculateStartDate(endDate, duration, durationUnit));\n        }\n    }\n    normalize() {\n        this.internalNormalize(\n            this.startDate,\n            this.endDate,\n            this.duration,\n            this.durationUnit || this.constructor.defaultValues.durationUnit // Default might not be applied yet\n        );\n    }\n    //endregion\n    //region Getters & Setters\n    /**\n     * Returns the event store this event is part of, if any.\n     *\n     * @property {Scheduler.data.EventStore}\n     * @readonly\n     * @category Misc\n     * @typings ignore\n     */\n    get eventStore() {\n        const me = this;\n        // If we are an occurrence, return our base recurring event's store\n        if (me.isOccurrence) {\n            return me.recurringTimeSpan.eventStore;\n        }\n        if (!me._eventStore) {\n            me._eventStore = me.stores?.find(s => s.isEventStore);\n        }\n        return me._eventStore;\n    }\n    updateInternalCls(cls) {\n        if (this._cls) {\n            this._cls.value = cls;\n        }\n        else {\n            this._cls = new DomClassList(cls);\n        }\n    }\n    set internalCls(cls) {\n        this.updateInternalCls(cls);\n        this.set('cls', this._cls.value);\n    }\n    get internalCls() {\n        const { cls } = this;\n        // `cls` getter can be overriden so return `cls` value if it is DomClassList or assign it to `this._cls`\n        if (cls?.isDomClassList) {\n            return cls;\n        }\n        this.updateInternalCls(cls);\n        this.setData('cls', this._cls.value);\n        return this._cls;\n    }\n    get cls() {\n        if (!this._cls) {\n            this._cls = new DomClassList(super.get('cls'));\n        }\n        return this._cls;\n    }\n    set cls(cls) {\n        this.internalCls = cls;\n    }\n    get startDate() {\n        return this.get('startDate');\n    }\n    set startDate(date) {\n        this.setStartDate(date);\n    }\n    get endDate() {\n        return this.get('endDate');\n    }\n    set endDate(date) {\n        this.setEndDate(date);\n    }\n    get endingDate() {\n        const\n            me = this,\n            {\n                endDate,\n                startDate\n            }  = me;\n        if (endDate) {\n            // Special case of startDate===endDate for allDay event:\n            // if (Number(endDate) === Number(startDate) && me.allDay) {\n            //     return DH.add(startDate, 1, 'd');\n            // }\n            // Nope... the above works fine except when the day start time is shifted. In this case we want the\n            // event to appear as \"all day\" on the shifted day, but the above will push the endingDate beyond the\n            // end of the shifted day.\n            return endDate;\n        }\n        return DH.add(startDate, me.duration, me.durationUnit);\n    }\n    get duration() {\n        return this.get('duration');\n    }\n    set duration(duration) {\n        this.setDuration(duration, this.durationUnit);\n    }\n    get durationUnit() {\n        return this.get('durationUnit');\n    }\n    /**\n     * Sets duration and durationUnit in one go. Only allowed way to change durationUnit, the durationUnit field is\n     * readonly after creation\n     * @param {Number} duration Duration value\n     * @param {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} durationUnit Unit for\n     * specified duration value, see {@link #field-durationUnit} for valid values\n     * @category Scheduling\n     */\n    setDuration(duration, durationUnit = this.durationUnit) {\n        // Must be a number\n        duration = parseFloat(duration);\n        this.set({\n            duration,\n            durationUnit,\n            ...this.updateDatesFromDuration(duration, durationUnit)\n        });\n    }\n    updateDatesFromDuration(magnitude, unit, startDate = this.startDate, endDate = this.endDate) {\n        const result = {};\n        if (startDate) {\n            result.endDate = this.internalCalculateEndDate(startDate, magnitude, unit);\n        }\n        else if (endDate) {\n            result.startDate = this.internalCalculateStartDate(endDate, magnitude, unit);\n        }\n        return result;\n    }\n    /**\n     * Returns duration of the event in given unit. This is a wrapper for {@link Core.helper.DateHelper#function-getDurationInUnit-static}\n     * @param {'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y'} unit\n     * @param {Boolean} [doNotRound]\n     * @private\n     * @returns {Number}\n     */\n    getDurationInUnit(unit, doNotRound) {\n        const me = this;\n        if (me.startDate && me.endDate) {\n            return DH.getDurationInUnit(me.startDate, me.endDate, unit, doNotRound);\n        }\n        else {\n            return DH.as(unit, me.duration, me.durationUnit);\n        }\n    }\n    get fullDuration() {\n        // Used for formatting during export\n        return new Duration({\n            unit      : this.durationUnit,\n            magnitude : this.duration\n        });\n    }\n    set fullDuration(duration) {\n        if (typeof duration === 'string') {\n            duration = DH.parseDuration(duration, true, this.durationUnit);\n        }\n        this.setDuration(duration.magnitude, duration.unit);\n    }\n    /**\n     * Sets the range start date\n     *\n     * @param {Date} date The new start date\n     * @param {Boolean} keepDuration Pass `true` to keep the duration of the task (\"move\" the event), `false` to change the duration (\"resize\" the event).\n     * Defaults to `true`\n     * @category Scheduling\n     */\n    setStartDate(date, keepDuration = true) {\n        const\n            me    = this,\n            toSet = {\n                startDate : date\n            };\n        if (date) {\n            let calcEndDate;\n            if (keepDuration) {\n                calcEndDate = me.duration != null;\n            }\n            else {\n                if (me.endDate) {\n                    toSet.duration = me.internalCalculateDuration(date, me.endDate, me.durationUnit);\n                    if (toSet.duration < 0) {\n                        throw new Error('Negative duration');\n                    }\n                }\n                else {\n                    calcEndDate = me.duration != null;\n                }\n            }\n            if (calcEndDate) {\n                toSet.endDate = me.internalCalculateEndDate(date, me.duration, me.durationUnit);\n            }\n        }\n        else {\n            toSet.duration = null;\n        }\n        me.set(toSet);\n    }\n    /**\n     * Sets the range end date\n     *\n     * @param {Date} date The new end date\n     * @param {Boolean} keepDuration Pass `true` to keep the duration of the task (\"move\" the event), `false` to change the duration (\"resize\" the event).\n     * Defaults to `false`\n     * @category Scheduling\n     */\n    setEndDate(date, keepDuration = false) {\n        const\n            me    = this,\n            toSet = {\n                endDate : date\n            };\n        if (date) {\n            let calcStartDate;\n            if (keepDuration === true) {\n                calcStartDate = me.duration != null;\n            }\n            else {\n                if (me.startDate) {\n                    toSet.duration = me.internalCalculateDuration(me.startDate, date, me.durationUnit);\n                    if (toSet.duration < 0) throw new Error('Negative duration');\n                }\n                else {\n                    calcStartDate = this.duration != null;\n                }\n            }\n            if (calcStartDate) {\n                toSet.startDate = me.internalCalculateStartDate(date, me.duration, me.durationUnit);\n            }\n        }\n        me.set(toSet);\n    }\n    /**\n     * Sets the event start and end dates\n     *\n     * @param {Date} start The new start date\n     * @param {Date} end The new end date\n     * @param {Boolean} [silent] Pass `true` to not trigger events\n     * @category Scheduling\n     */\n    setStartEndDate(start, end, silent) {\n        if (start > end) {\n            throw new Error('Start date must be less or equal to end date');\n        }\n        this.set({\n            startDate : start,\n            endDate   : end\n        }, null, silent);\n    }\n    /**\n     * Returns an array of dates in this range. If the range starts/ends not at the beginning of day, the whole day will be included.\n     * @readonly\n     * @property {Date[]}\n     * @category Scheduling\n     */\n    get dates() {\n        const\n            dates     = [],\n            startDate = DH.startOf(this.startDate, 'day'),\n            endDate   = this.endDate;\n        for (let date = startDate; date < endDate; date = DH.add(date, 1, 'day')) {\n            dates.push(date);\n        }\n        return dates;\n    }\n    get startDateMS() {\n        return (this.batching && this.hasBatchedChange('startDate') ? this.get('startDate') : this.startDate)?.getTime();\n    }\n    get endDateMS() {\n        return (this.batching && this.hasBatchedChange('endDate') ? this.get('endDate') : this.endDate)?.getTime();\n    }\n    /**\n     * Returns the duration of this Event in milliseconds.\n     * @readonly\n     * @property {Number}\n     * @category Scheduling\n     */\n    get durationMS() {\n        const { endDateMS, startDateMS } = this;\n        if (endDateMS && startDateMS) {\n            return endDateMS - startDateMS;\n        }\n        return DH.asMilliseconds(this.duration || 0, this.durationUnit);\n    }\n    /**\n     * Returns true if record is a milestone.\n     * @readonly\n     * @property {Boolean}\n     * @category Scheduling\n     */\n    get isMilestone() {\n        return this.duration === 0;\n    }\n    inSetNormalize(field) {\n        if (typeof field !== 'string') {\n            // If user is updating multiple properties in one go using an object, we help out\n            // by filling out missing schedule related data\n            let { startDate, endDate, duration, durationUnit = this.durationUnit } = field;\n            // Conversion is usually handled in inSet, but we are normalizing prior to that and have to handle it here\n            if (typeof startDate === 'string') {\n                startDate = this.getFieldDefinition('startDate').convert(startDate);\n            }\n            if (typeof endDate === 'string') {\n                endDate = this.getFieldDefinition('endDate').convert(endDate);\n            }\n            if ('duration' in field) {\n                if (startDate && !endDate) {\n                    endDate = this.internalCalculateEndDate(startDate, duration, durationUnit);\n                }\n                if (!startDate && endDate) {\n                    startDate = this.internalCalculateStartDate(endDate, duration, durationUnit);\n                }\n            }\n            else if (startDate && endDate) {\n                // Calculate duration in hours and covert to target duration unit in order to avoid extra DST conversion\n                duration = this.internalCalculateDuration(startDate, endDate, durationUnit);\n            }\n            // A framework (React tested) may freeze passed field object, so clone it in that case\n            const fieldOrClone = Object.isFrozen(field) ? ObjectHelper.clone(field) : field;\n            startDate && (fieldOrClone.startDate = startDate);\n            endDate && (fieldOrClone.endDate = endDate);\n            duration != null && (fieldOrClone.duration = duration);\n            return fieldOrClone;\n        }\n    }\n    fieldToKeys(field, value) {\n        const result = super.fieldToKeys(field, value);\n        // Replace fullDuration with duration and durationUnit in calls to `set()`\n        if (result.fullDuration) {\n            const { magnitude, unit } = result.fullDuration;\n            result.duration     = magnitude;\n            result.durationUnit = unit;\n        }\n        // Engine handles this for event & tasks\n        if (!this.isEventModel && !this.isTaskModel) {\n            // Recalculate start/end date if duration is set with only one of them\n            if (('duration' in result || result.durationUnit) && !(result.startDate && result.endDate)) {\n                Object.assign(\n                    result,\n                    this.updateDatesFromDuration(\n                        result.duration ?? this.duration,\n                        result.durationUnit ?? this.durationUnit,\n                        result.startDate,\n                        result.endDate\n                    )\n                );\n            }\n        }\n        return result;\n    }\n    inSet(field, value, silent, fromRelationUpdate, skipAccessors, validOnly, triggerBeforeUpdate) {\n        const me = this;\n        if (!skipAccessors) {\n            field = me.inSetNormalize(field) || field;\n        }\n        const result = super.inSet(field, value, silent, fromRelationUpdate, skipAccessors, validOnly, triggerBeforeUpdate);\n        if (!me.project?.isWritingData && field.startDate && field.endDate) {\n            let invalid;\n            if (field.startDate instanceof Date && field.endDate instanceof Date) {\n                invalid = field.startDate > field.endDate;\n            }\n            else if (me.fieldMap.startDate.convert(field.startDate) > me.fieldMap.endDate.convert(field.endDate))  {\n                invalid = true;\n            }\n            if (invalid) {\n                console.error(`startDate > endDate for ${me.constructor.$name} record with id: ${me.id}`);\n            }\n        }\n        return result;\n    }\n    // Cls requires special handling since it is converted to a DomClassList\n    applyValue(useProp, key, value, skipAccessors, field) {\n        if (key === 'cls') {\n            this.updateInternalCls(value);\n        }\n        super.applyValue(useProp, key, value, skipAccessors, field);\n    }\n    //endregion\n    //region Iteration\n    /**\n     * Iterates over the {@link #property-dates}\n     * @param {Function} func The function to call for each date\n     * @param {Object} thisObj `this` reference for the function\n     * @category Scheduling\n     */\n    forEachDate(func, thisObj) {\n        return this.dates.forEach(func.bind(thisObj));\n    }\n    //endregion\n    /**\n     * Checks if the range record has both start and end dates set and start <= end\n     *\n     * @property {Boolean}\n     * @category Scheduling\n     */\n    get isScheduled() {\n        const { startDateMS, endDateMS } = this;\n        return endDateMS - startDateMS >= 0;\n    }\n    // Simple check if end date is greater than start date\n    get isValid() {\n        const { startDate, endDate } = this;\n        return !startDate || !endDate || (endDate - startDate >= 0);\n    }\n    /**\n     * Shift the dates for the date range by the passed amount and unit\n     * @param {'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y'} unit The unit to shift by, see {@link Core.helper.DateHelper}\n     * for more information on valid formats.\n     * @param {Number} amount The amount to shift\n     */\n    shift(amount, unit = this.durationUnit) {\n        if (typeof amount === 'string') {\n            const u = amount;\n            amount = unit;\n            unit = u;\n        }\n        return this.setStartDate(DH.add(this.startDate, amount, unit, true), true);\n    }\n    /**\n     * Returns the WBS code of this model (e.g '2.1.3'). Only relevant when part of a tree store, as in the Gantt chart.\n     * @property {String}\n     * @category Parent & children\n     */\n    get wbsCode() {\n        return this._wbsCode || this.indexPath.join('.');\n    }\n    set wbsCode(value) {\n        // wbsCode needs to be writable to interop w/TaskModel and Baselines which copy this field value\n        this._wbsCode = value;\n    }\n    fullCopy() {\n        //NOT PORTED\n        return this.copy.apply(this, arguments);\n    }\n    intersects(timeSpan) {\n        return this.intersectsRange(timeSpan.startDate, timeSpan.endDate);\n    }\n    intersectsRange(start, end) {\n        const\n            myStart = this.startDate,\n            myEnd   = this.endDate;\n        return myStart && myEnd && DH.intersectSpans(myStart, myEnd, start, end);\n    }\n    /**\n     * Splits this event into two pieces at the desired position.\n     *\n     * @param {Number|String} splitPoint The duration point at which to split this event.\n     *\n     * If less then `1`, this indicates the relative position at which it will be split.\n     * 0.5 means cut it in half.\n     *\n     * If greater than `1`, this indicates the new duration in the current duration units of this event before the split.\n     *\n     * If this is a string, it will be a duration description as described in\n     * {@link Core.helper.DateHelper#function-parseDuration-static}, for example `'15 min'`\n     *\n     * @returns {Scheduler.model.TimeSpan} The newly created split section of the timespan\n     * @category Scheduling\n     */\n    split(splitPoint = 0.5) {\n        const\n            me             = this,\n            clone          = me.copy(),\n            {\n                fullDuration,\n                eventStore,\n                assignmentStore\n            }              = me,\n            oldDuration    = new Duration(fullDuration),\n            cloneDuration  = new Duration(fullDuration);\n        let ownNewDuration,\n            unitsChanged;\n        if (typeof splitPoint === 'string') {\n            ownNewDuration = new Duration(splitPoint);\n            // New duration specified in same time units as current duration\n            if (ownNewDuration.unit === oldDuration.unit) {\n                cloneDuration.magnitude -= ownNewDuration.magnitude;\n            }\n            // New duration is in different units, so convert clone's duration to match\n            else {\n                cloneDuration.magnitude = DH.as(ownNewDuration.unit, oldDuration) - ownNewDuration.magnitude;\n                cloneDuration.unit = ownNewDuration.unit;\n                unitsChanged = true;\n            }\n        }\n        else {\n            ownNewDuration = new Duration(splitPoint > 1 ? splitPoint : me.duration * splitPoint, me.durationUnit);\n            cloneDuration.magnitude -= ownNewDuration.magnitude;\n        }\n        clone.startDate = DH.add(me.startDate, ownNewDuration.magnitude, ownNewDuration.unit);\n        if (unitsChanged) {\n            clone.fullDuration = cloneDuration;\n            me.fullDuration = ownNewDuration;\n        }\n        else {\n            clone.duration = cloneDuration.magnitude;\n            me.duration = ownNewDuration.magnitude;\n        }\n        if (eventStore) {\n            eventStore.add(clone);\n            if (assignmentStore && !eventStore.usesSingleAssignment) {\n                assignmentStore.add(\n                    me.assignments.map(assignment => {\n                        const clonedData = Object.assign({}, assignment.data, {\n                            eventId  : clone.id,\n                            // From engine\n                            event    : null,\n                            resource : null\n                        });\n                        delete clonedData.id;\n                        return clonedData;\n                    })\n                );\n            }\n        }\n        return clone;\n    }\n    toICSString(icsEventConfig = {}) {\n        if (!this.isScheduled) {\n            return '';\n        }\n        const\n            {\n                startDate,\n                endDate\n            }         = this,\n            // To allow testing using a fixed timestamp value\n            timestamp = icsEventConfig.DTSTAMP || DH.format(new Date(), 'uu');\n        delete icsEventConfig.DTSTAMP;\n        let startEnd = {};\n        if (this.allDay) {\n            startEnd = {\n                'DTSTART;VALUE=DATE' : DH.format(startDate, 'u'),\n                'DTEND;VALUE=DATE'   : DH.format(endDate, 'u')\n            };\n        }\n        else {\n            startEnd = {\n                DTSTART : DH.format(startDate, 'uu'),\n                DTEND   : DH.format(endDate, 'uu')\n            };\n        }\n        const\n            version       = (VersionHelper.scheduler && VersionHelper.getVersion('scheduler')) || (VersionHelper.calendar && VersionHelper.getVersion('calendar')) || '',\n            icsWrapConfig = {\n                BEGIN    : 'VCALENDAR',\n                VERSION  : '2.0',\n                CALSCALE : 'GREGORIAN',\n                PRODID   : `-//Bryntum AB//Bryntum Scheduler ${version} //EN`,\n                END      : 'VCALENDAR'\n            },\n            eventConfig   = {\n                BEGIN   : 'VEVENT',\n                UID     : this.id + '@bryntum.com',\n                CLASS   : 'PUBLIC',\n                SUMMARY : this.name,\n                DTSTAMP : timestamp,\n                ...startEnd,\n                ...(this.recurrenceRule ? { RRULE : this.recurrenceRule } : {}),\n                ...icsEventConfig,\n                END     : 'VEVENT'\n            },\n            icsItems      = Object.keys(icsWrapConfig).map(key => `${key}:${icsWrapConfig[key]}`),\n            eventItems    = Object.keys(eventConfig).map(key => `${key}:${eventConfig[key]}`);\n        // Inject event details before the closing VCALENDAR entry\n        icsItems.splice(icsItems.length - 1, 0, ...eventItems);\n        return icsItems.join('\\n');\n    }\n    /**\n     * Triggers a download of this time span in ICS format (for import in Outlook etc.)\n     *\n     * ```javascript\n     * timeSpan.downloadAsICS({\n     *      LOCATION : timeSpan.location\n     *  });\n     * ```\n     * @param {Object<String,String>} [icsEventConfig] A config object with properties to be added in to `BEGIN:VEVENT`\n     * section of the exported event.\n     * @category Misc\n     */\n    exportToICS(icsEventConfig) {\n        if (this.isScheduled) {\n            const blob = new Blob([this.toICSString(icsEventConfig)], { type : 'text/calendar' });\n            BrowserHelper.downloadBlob(blob, (this.name || 'Event') + '.ics');\n        }\n    }\n    /**\n     * Defines if the given event field should be manually editable in UI.\n     * You can override this method to provide your own logic.\n     *\n     * By default the method defines all the event fields as editable.\n     *\n     * @param {String} fieldName Name of the field\n     * @returns {Boolean} Returns `true` if the field is editable, `false` if it is not and `undefined` if the model has no such field.\n     */\n    isEditable(fieldName) {\n        // return undefined for unknown fields\n        return this.getFieldDefinition(fieldName) ? true : undefined;\n    }\n    isFieldModified(fieldName) {\n        if (fieldName === 'fullDuration') {\n            return super.isFieldModified('duration') || super.isFieldModified('durationUnit');\n        }\n        return super.isFieldModified(fieldName);\n    }\n}\nTimeSpan._$name = 'TimeSpan';", "import Base from '../../../Core/Base.js';\n/**\n * @module Scheduler/data/mixin/ResourceStoreMixin\n */\n/**\n * This is a mixin for the ResourceStore functionality. It is consumed by the {@link Scheduler.data.ResourceStore}.\n *\n * @mixin\n */\nexport default Target => class ResourceStoreMixin extends (Target || Base) {\n    static get $name() {\n        return 'ResourceStoreMixin';\n    }\n    get isResourceStore() {\n        return true;\n    }\n    /**\n     * Add resources to the store.\n     *\n     * NOTE: References (events, assignments) on the resources are determined async by a calculation engine. Thus they\n     * cannot be directly accessed after using this function.\n     *\n     * For example:\n     *\n     * ```javascript\n     * const [resource] = resourceStore.add({ id });\n     * // resource.events is not yet available\n     * ```\n     *\n     * To guarantee references are set up, wait for calculations for finish:\n     *\n     * ```javascript\n     * const [resource] = resourceStore.add({ id });\n     * await resourceStore.project.commitAsync();\n     * // resource.events is available (assuming EventStore is loaded and so on)\n     * ```\n     *\n     * Alternatively use `addAsync()` instead:\n     *\n     * ```javascript\n     * const [resource] = await resourceStore.addAsync({ id });\n     * // resource.events is available (assuming EventStore is loaded and so on)\n     * ```\n     *\n     * @param {Scheduler.model.ResourceModel|Scheduler.model.ResourceModel[]|ResourceModelConfig|ResourceModelConfig[]} records\n     * Array of records/data or a single record/data to add to store\n     * @param {Boolean} [silent] Specify `true` to suppress events\n     * @returns {Scheduler.model.ResourceModel[]} Added records\n     * @function add\n     * @category CRUD\n     */\n    /**\n     * Add resources to the store and triggers calculations directly after. Await this function to have up to date\n     * references on the added resources.\n     *\n     * ```javascript\n     * const [resource] = await resourceStore.addAsync({ id });\n     * // resource.events is available (assuming EventStore is loaded and so on)\n     * ```\n     *\n     * @param {Scheduler.model.ResourceModel|Scheduler.model.ResourceModel[]|ResourceModelConfig|ResourceModelConfig[]} records\n     * Array of records/data or a single record/data to add to store\n     * @param {Boolean} [silent] Specify `true` to suppress events\n     * @returns {Scheduler.model.ResourceModel[]} Added records\n     * @function addAsync\n     * @category CRUD\n     * @async\n     */\n    /**\n     * Applies a new dataset to the ResourceStore. Use it to plug externally fetched data into the store.\n     *\n     * NOTE: References (events, assignments) on the resources are determined async by a calculation engine. Thus\n     * they cannot be directly accessed after assigning the new dataset.\n     *\n     * For example:\n     *\n     * ```javascript\n     * resourceStore.data = [{ id }];\n     * // resourceStore.first.events is not yet available\n     * ```\n     *\n     * To guarantee references are available, wait for calculations for finish:\n     *\n     * ```javascript\n     * resourceStore.data = [{ id }];\n     * await resourceStore.project.commitAsync();\n     * // resourceStore.first.events is available\n     * ```\n     *\n     * Alternatively use `loadDataAsync()` instead:\n     *\n     * ```javascript\n     * await resourceStore.loadDataAsync([{ id }]);\n     * // resourceStore.first.events is available\n     * ```\n     *\n     * @member {ResourceModelConfig[]} data\n     * @category Records\n     */\n    /**\n     * Applies a new dataset to the ResourceStore and triggers calculations directly after. Use it to plug externally\n     * fetched data into the store.\n     *\n     * ```javascript\n     * await resourceStore.loadDataAsync([{ id }]);\n     * // resourceStore.first.events is available\n     * ```\n     *\n     * @param {ResourceModelConfig[]} data Array of ResourceModel data objects\n     * @function loadDataAsync\n     * @category CRUD\n     * @async\n     */\n    static get defaultConfig() {\n        return {\n            /**\n             * CrudManager must load stores in the correct order. Lowest first.\n             * @private\n             */\n            loadPriority : 200,\n            /**\n             * CrudManager must sync stores in the correct order. Lowest first.\n             * @private\n             */\n            syncPriority : 100,\n            storeId      : 'resources',\n            autoTree     : true\n        };\n    }\n    construct(config) {\n        super.construct(config);\n        if (!this.modelClass.isResourceModel) {\n            throw new Error('Model for ResourceStore must subclass ResourceModel');\n        }\n    }\n    removeAll() {\n        const result = super.removeAll(...arguments);\n        // Removing all resources removes all assignments\n        result && this.assignmentStore.removeAll();\n        return result;\n    }\n    // Apply id changes also to assignments (used to be handled automatically by relations earlier, but engine does not\n    // care about ids so needed now)\n    // problems:\n    // 1. orientation/HorizontalRendering listens to assignment store changes and is trying to refresh view\n    // When we update resource id on assignment, listener will be invoked and view will try to refresh. And it will\n    // fail, because row is not updated yet. Flag is raised on resource store to make HorizontalRendering to skip\n    // refreshing view in this particular case of resource id changing\n    onRecordIdChange({ record, oldValue, value }) {\n        super.onRecordIdChange({ record, oldValue, value });\n        if (record.isFieldModified('id')) {\n            this.isChangingId = true;\n            record.updateAssignmentResourceIds();\n            this.isChangingId = false;\n        }\n    }\n    // Cache used by VerticalRendering, reset from there\n    get allResourceRecords() {\n        return this._allResourceRecords || (this._allResourceRecords = this.getAllDataRecords());\n    }\n    /**\n     * Returns all resources that have no events assigned during the specified time range.\n     * @param {Date} startDate Time range start date\n     * @param {Date} endDate Time range end date\n     * @returns {Scheduler.model.ResourceModel[]} Resources without events\n     */\n    getAvailableResources({ startDate, endDate }) {\n        return this.query(resource => this.eventStore.isDateRangeAvailable(startDate, endDate, null, resource));\n    }\n};\n", "import Base from '../../../Core/Base.js';\n/**\n * @module Scheduler/data/mixin/PartOfProject\n */\n/**\n * This is a mixin, included in all models and stores of the Scheduler project. It provides a common API for accessing\n * all stores of the project.\n *\n * @mixin\n */\nexport default Target => class PartOfProject extends (Target || Base) {\n    /**\n     * Returns the project this entity belongs to.\n     *\n     * @member {Scheduler.model.ProjectModel} project\n     * @readonly\n     * @category Project\n     */\n    /**\n     * Returns the event store of the project this entity belongs to.\n     *\n     * @member {Scheduler.data.EventStore} eventStore\n     * @readonly\n     * @category Project\n     */\n    /**\n     * Returns the dependency store of the project this entity belongs to.\n     *\n     * @member {Scheduler.data.DependencyStore} dependencyStore\n     * @readonly\n     * @category Project\n     */\n    /**\n     * Returns the assignment store of the project this entity belongs to.\n     *\n     * @member {Scheduler.data.AssignmentStore} assignmentStore\n     * @readonly\n     * @category Project\n     */\n    /**\n     * Returns the resource store of the project this entity belongs to.\n     *\n     * @member {Scheduler.data.ResourceStore} resourceStore\n     * @readonly\n     * @category Project\n     */\n    static get $name() {\n        return 'PartOfProject';\n    }\n};\n", "import VersionHelper from '../../../Core/helper/VersionHelper.js';\n/**\n * @module Scheduler/model/mixin/ResourceModelMixin\n */\n/**\n * Config object used to set different values for top/left and bottom/right margin.\n *\n * @typedef {Object} ResourceMarginConfig\n * @property {Number} start Margin top in horizontal mode, margin left in vertical mode\n * @property {Number} end Margin bottom in horizontal mode, margin right in vertical mode\n*/\n/**\n * Mixin that holds configuration shared between resources in Scheduler and Scheduler Pro.\n * @mixin\n */\nexport default Target => class ResourceModelMixin extends Target {\n    static get $name() {\n        return 'ResourceModelMixin';\n    }\n    // Flag checked by ResourceStore to make sure it uses a valid subclass\n    static get isResourceModel() {\n        return true;\n    }\n    /**\n     * Set value for the specified field(s), triggering engine calculations immediately. See\n     * {@link Core.data.Model#function-set Model#set()} for arguments.\n     *\n     * This does not matter much on the resource itself, but is of importance when manipulating its references:\n     *\n     * ```javascript\n     * assignment.set('resourceId', 2);\n     * // resource.assignments is not yet up to date\n     *\n     * await assignment.setAsync('resourceId', 2);\n     * // resource.assignments is up to date\n     * ```\n     *\n     * @param {String|Object} field The field to set value for, or an object with multiple values to set in one call\n     * @param {*} [value] Value to set\n     * @param {Boolean} [silent=false] Set to true to not trigger events\n     * automatically.\n     * @function setAsync\n     * @category Editing\n     * @async\n     */\n    //region Fields\n    static get fields() {\n        return [\n            /**\n             * Unique identifier\n             * @field {String|Number} id\n             * @category Common\n             */\n            /**\n             * Get or set resource name\n             * @field {String} name\n             * @category Common\n             */\n            { name : 'name', type : 'string', persist : true },\n            /**\n             * Controls the primary color used for events assigned to this resource. Can be overridden per event using\n             * EventModels {@link Scheduler.model.mixin.EventModelMixin#field-eventColor eventColor config}. Also, see\n             * Schedulers {@link Scheduler.view.mixin.TimelineEventRendering#config-eventColor eventColor config}.\n             *\n             * For available standard colors, see\n             * {@link Scheduler.model.mixin.EventModelMixin#typedef-EventColor}.\n             *\n             * @field {EventColor} eventColor\n             * @category Styling\n             */\n            'eventColor',\n            /**\n             * Controls the style used for events assigned to this resource. Can be overridden per event using\n             * EventModels {@link Scheduler/model/mixin/EventModelMixin#field-eventStyle eventStyle config}. See Schedulers\n             * {@link Scheduler.view.mixin.TimelineEventRendering#config-eventStyle eventStyle config} for available\n             * options.\n             * @field {String} eventStyle\n             * @category Styling\n             */\n            'eventStyle',\n            /**\n             * Fully qualified image URL, used by `ResourceInfoColumn` and vertical modes `ResourceHeader` to display a miniature image\n             * for the resource.\n             * @field {String} imageUrl\n             * @category Styling\n             */\n            'imageUrl',\n            /**\n             * Image name relative to {@link Scheduler/view/mixin/SchedulerEventRendering#config-resourceImagePath},\n             * used by `ResourceInfoColumn` and vertical modes `ResourceHeader` to display a miniature image\n             * for the resource.\n             * Set value to `false` to disable image display.\n             * @field {String|Boolean} image\n             * @category Styling\n             */\n            'image',\n            /**\n             * Control how much space to leave between the first event/last event and the resources edge (top/bottom\n             * margin within the resource row in horizontal mode, left/right margin within the resource column in\n             * vertical mode), in px.\n             *\n             * It's also possible to set different values for top/left and bottom/right\n             * by assigning  an object to `resourceMargin` with `start` (margin top in horizontal mode,\n             * margin left in vertical mode) and `end` (margin bottom / margin right) properties:\n             * ```javascript\n             * scheduler = new Scheduler({\n             *     resourceMargin : {\n             *         start : 15,\n             *         end   : 1\n             *     }\n             * });\n             * ```\n             *\n             * @field {Number|ResourceMarginConfig} resourceMargin\n             * @category Layout\n             */\n            'resourceMargin',\n            /**\n             * Margin between stacked event bars for this resource, in px.\n             * @field {Number} barMargin\n             * @category Layout\n             */\n            { name : 'barMargin', type : 'number' },\n            /**\n             * Base height of this resource, in px. When unset, Schedulers configured rowHeight is used.\n             *\n             * This value is used in horizontal mode to determine row height. When stacking, it is used as input for\n             * calculating the actual row height:\n             *\n             * ```javascript\n             * row.height = (resource.rowHeight - (resourceMargin.start + resourceMargin.end)) * overlap count - barMargin * (overlap count - 1)\n             * ```\n             *\n             * When packing or overlapping, it is used as the actual row height.\n             *\n             * @field {Number} rowHeight\n             * @category Layout\n             */\n            /**\n             * Base width of this resource, in px. If not set, the `columnWidth` specified in\n             * the Scheduler's configured {@link Scheduler.view.Scheduler#config-resourceColumns} is used.\n             *\n             * This value is used in vertical mode to determine column width.\n             *\n             * @field {Number} columnWidth\n             * @category Layout\n             */\n            /**\n             * Specify this to use a resource specific event layout in horizontal mode, see\n             * {@link Scheduler.view.mixin.SchedulerEventRendering#config-eventLayout} for options.\n             *\n             * When unset (the default) Schedulers setting is used.\n             *\n             * @field {'stack'|'pack'|'mixed'|'none'} eventLayout\n             * @category Layout\n             */\n            'eventLayout'\n        ];\n    }\n    //endregion\n    //region Id change\n    updateAssignmentResourceIds() {\n        this.assigned.forEach(assignment => {\n            assignment.resourceId = this.id;\n        });\n    }\n    syncId(value) {\n        super.syncId(value);\n        this.updateAssignmentResourceIds();\n    }\n    //endregion\n    //region Getters\n    // Documented in Scheduler.model.ResourceModel, SchedulerPro.model.ResourceModel, Gantt.model.ResourceModel\n    get events() {\n        return this.assignments.reduce((events, assignment) => {\n            if (assignment.event) {\n                events.push(assignment.event);\n            }\n            return events;\n        }, []);\n    }\n    /**\n     * Returns all assignments for the resource\n     *\n     * @property {Scheduler.model.AssignmentModel[]}\n     * @category Common\n     */\n    get assignments() {\n        return this.assigned ? [...this.assigned] : [];\n    }\n    set assignments(assignments) {\n        // Remove old assignments\n        this.assignmentStore.remove(this.assignments);\n        // Repoint new ones\n        // Engine does not allow assigning to `assigned`, handle it here\n        assignments.forEach(assignment => {\n            assignment.resource = this;\n        });\n    }\n    /**\n     * Returns an array of events, associated with this resource\n     *\n     * @deprecated 5.3.6 Use the events property instead\n     *\n     * @returns {Scheduler.model.EventModel[]}\n     */\n    getEvents() {\n        VersionHelper.deprecate('scheduler', '6.0.0', 'getEvents() is deprecated, use the events property instead');\n        return this.events;\n    }\n    /**\n     * Returns `true` if the resource can be persisted.\n     * In a flat store, a resource is always considered persistable. In a tree store, a resource is considered\n     * persistable if its parent node is persistable.\n     *\n     * @property {Boolean}\n     * @readonly\n     * @category Editing\n     */\n    get isPersistable() {\n        return super.isPersistable && (!this.parent || this.parent.isPersistable);\n    }\n    //endregion\n    /**\n     * Unassigns this Resource from all its Events\n     */\n    unassignAll() {\n        this.assignments && this.assignmentStore.remove(this.assignments);\n    }\n    /**\n     * Returns the initials (first letter of the first & last space-separated word in the name) or an empty string\n     * if this resource has no name. You can override this method in a ResourceModel subclass to provide your own implementation\n     *\n     * @property {String}\n     * @readonly\n     * @category Common\n     */\n    get initials() {\n        const\n            { name = '' } = this;\n        if (!name) {\n            return '';\n        }\n        const names         = name.split(' '),\n            firstInitial  = names[0][0],\n            lastInitial   = (names.length > 1 ? names[names.length - 1][0] : '');\n        return firstInitial + lastInitial;\n    }\n    isWorkingTime(date) {\n        const calendar = (this.effectiveCalendar || this.project?.calendar);\n        return !calendar || calendar.isWorkingTime?.(date);\n    }\n};\n", "//---------------------------------------------------------------------------------------------------------------------\n/**\n * Given a single `Iterable`, returns an array of 2 iterables, mirroring the original one (which should not be used anymore).\n *\n * For example:\n *\n *     const gen = function* () { yield 1; yield 2; yield 3 }\n *\n *     const [ iterable1, iterable2 ] = split(gen())\n *     const [ iter1, iter2 ] = [\n *         iterable1[ Symbol.iterator ](),\n *         iterable2[ Symbol.iterator ]()\n *     ]\n *\n *     iter1.next() // 1\n *     iter2.next() // 1\n *     iter2.next() // 2\n *     iter2.next() // 3\n *     iter1.next() // 2\n *     iter1.next() // 3\n *     iter1.next() // done\n *     iter2.next() // done\n *\n * @param iterable\n */\nexport function split(iterable) {\n    const gen1Pending = [];\n    const gen2Pending = [];\n    let iterator;\n    const gen1 = function* () {\n        if (!iterator)\n            iterator = iterable[Symbol.iterator]();\n        while (true) {\n            if (gen1Pending.length) {\n                yield* gen1Pending;\n                gen1Pending.length = 0;\n            }\n            if (!iterator)\n                break;\n            const { value, done } = iterator.next();\n            if (done) {\n                iterator = null;\n                iterable = null;\n                break;\n            }\n            gen2Pending.push(value);\n            yield value;\n        }\n    };\n    const gen2 = function* () {\n        if (!iterator)\n            iterator = iterable[Symbol.iterator]();\n        while (true) {\n            if (gen2Pending.length) {\n                yield* gen2Pending;\n                gen2Pending.length = 0;\n            }\n            if (!iterator)\n                break;\n            const { value, done } = iterator.next();\n            if (done) {\n                iterator = null;\n                iterable = null;\n                break;\n            }\n            gen1Pending.push(value);\n            yield value;\n        }\n    };\n    return [gen1(), gen2()];\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* inBatchesBySize(iterator, batchSize) {\n    if (batchSize < 0)\n        throw new Error(\"Batch size needs to a natural number\");\n    batchSize = batchSize | 0;\n    const runningBatch = [];\n    for (const el of iterator) {\n        if (runningBatch.length === batchSize) {\n            yield runningBatch;\n            runningBatch.length = 0;\n        }\n        runningBatch.push(el);\n    }\n    if (runningBatch.length > 0)\n        yield runningBatch;\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* filter(iterator, func) {\n    let i = 0;\n    for (const el of iterator) {\n        if (func(el, i++))\n            yield el;\n    }\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* drop(iterator, howMany) {\n    let i = 0;\n    for (const el of iterator) {\n        if (++i > howMany)\n            yield el;\n    }\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function every(iterator, func) {\n    let i = 0;\n    for (const el of iterator) {\n        if (!func(el, i++))\n            return false;\n    }\n    return true;\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function some(iterator, func) {\n    let i = 0;\n    for (const el of iterator) {\n        if (func(el, i++))\n            return true;\n    }\n    return false;\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* map(iterator, func) {\n    let i = 0;\n    for (const el of iterator)\n        yield func(el, i++);\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function reduce(iterator, func, initialAcc) {\n    let i = 0;\n    let acc = initialAcc;\n    for (const el of iterator) {\n        acc = func(acc, el, i++);\n    }\n    return acc;\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* uniqueOnly(iterator) {\n    const seen = new Set();\n    for (const el of iterator) {\n        if (!seen.has(el)) {\n            seen.add(el);\n            yield el;\n        }\n    }\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* uniqueOnlyBy(iterator, func) {\n    const seen = new Set();\n    for (const el of iterator) {\n        const uniqueBy = func(el);\n        if (!seen.has(uniqueBy)) {\n            seen.add(uniqueBy);\n            yield el;\n        }\n    }\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* reverse(iterator) {\n    const all = Array.from(iterator);\n    for (let i = all.length - 1; i >= 0; i--)\n        yield all[i];\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* takeWhile(iterator, func) {\n    let i = 0;\n    for (const el of iterator) {\n        if (func(el, i++))\n            yield el;\n        else\n            return;\n    }\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* takeUntilIncluding(iterator, func) {\n    let i = 0;\n    for (const el of iterator) {\n        yield el;\n        if (func(el, i++))\n            return;\n    }\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* takeUntilExcluding(iterator, func) {\n    let i = 0;\n    for (const el of iterator) {\n        if (func(el, i++))\n            return;\n        yield el;\n    }\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* concat(...iterators) {\n    for (let i = 0; i < iterators.length; i++)\n        yield* iterators[i];\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* concatIterable(iteratorsProducer) {\n    for (const iterator of iteratorsProducer)\n        yield* iterator;\n}\n//---------------------------------------------------------------------------------------------------------------------\n// just a chained syntax sugar class\n// note, that we either use a combination of `this.derive()` + this.iterable (which will clear the `this.iterable`)\n// or, use just `this` as iterable, which will also clear the iterator\n//\nexport class ChainedIteratorClass {\n    constructor(iterable) {\n        this.iterable = undefined;\n        if (!iterable)\n            throw new Error(\"Require an iterable instance for chaining\");\n        this.iterable = iterable;\n    }\n    derive(iterable) {\n        this.iterable = undefined;\n        return new ChainedIteratorClass(iterable);\n    }\n    copy() {\n        const [iter1, iter2] = split(this.iterable);\n        this.iterable = iter2;\n        return new ChainedIteratorClass(iter1);\n    }\n    split() {\n        const [iter1, iter2] = split(this.iterable);\n        return [new ChainedIteratorClass(iter1), this.derive(iter2)];\n    }\n    inBatchesBySize(batchSize) {\n        return this.derive(inBatchesBySize(this.iterable, batchSize));\n    }\n    filter(func) {\n        return this.derive(filter(this.iterable, func));\n    }\n    drop(howMany) {\n        return this.derive(drop(this.iterable, howMany));\n    }\n    map(func) {\n        return this.derive(map(this.iterable, func));\n    }\n    reduce(func, initialAcc) {\n        return reduce(this, func, initialAcc);\n    }\n    concat() {\n        //@ts-ignore\n        return this.derive(concatIterable(this.iterable));\n    }\n    uniqueOnly() {\n        return this.derive(uniqueOnly(this.iterable));\n    }\n    uniqueOnlyBy(func) {\n        return this.derive(uniqueOnlyBy(this.iterable, func));\n    }\n    every(func) {\n        return every(this, func);\n    }\n    some(func) {\n        return some(this, func);\n    }\n    takeWhile(func) {\n        return this.derive(takeWhile(this.iterable, func));\n    }\n    *[Symbol.iterator]() {\n        let iterable = this.iterable;\n        if (!iterable)\n            throw new Error(\"Chained iterator already exhausted or used to derive the new one\");\n        // practice shows, that cleaning up the iterable after yourself helps garbage collector a lot\n        this.iterable = undefined;\n        yield* iterable;\n        // yes, we really want to avoid memory leaks\n        iterable = undefined;\n    }\n    toArray() {\n        return Array.from(this);\n    }\n    sort(order) {\n        return Array.from(this).sort(order);\n    }\n    toSet() {\n        return new Set(this);\n    }\n    toMap() {\n        //@ts-ignore\n        return new Map(this);\n    }\n    // toMap<K, V> () : T extends [ K, V ] ? Map<K, V> : never  {\n    //     return new Map<K, V>(this.iterable as (T extends [ K, V ] ? Iterable<T> : never)) as (T extends [ K, V ] ? Map<K, V> : never)\n    // }\n    flush() {\n        for (const element of this) { }\n    }\n    memoize() {\n        return new MemoizedIteratorClass(this);\n    }\n}\nexport const ChainedIterator = (iterator) => new ChainedIteratorClass(iterator);\nexport const CI = ChainedIterator;\n//---------------------------------------------------------------------------------------------------------------------\nexport class MemoizedIteratorClass extends ChainedIteratorClass {\n    constructor() {\n        super(...arguments);\n        this.elements = [];\n        this.$iterator = undefined;\n    }\n    set iterable(iterable) {\n        this.$iterable = iterable;\n    }\n    get iterable() {\n        return this;\n    }\n    derive(iterable) {\n        return new ChainedIteratorClass(iterable);\n    }\n    *[Symbol.iterator]() {\n        const elements = this.elements;\n        if (this.$iterable) {\n            if (!this.$iterator)\n                this.$iterator = this.$iterable[Symbol.iterator]();\n            let iterator = this.$iterator;\n            let alreadyConsumed = elements.length;\n            // yield the 1st batch \"efficiently\"\n            if (alreadyConsumed > 0)\n                yield* elements;\n            while (true) {\n                if (elements.length > alreadyConsumed) {\n                    // wonder if `yield* elements.slice(alreadyConsumed)` is more performant or not\n                    for (let i = alreadyConsumed; i < elements.length; i++)\n                        yield elements[i];\n                    alreadyConsumed = elements.length;\n                }\n                if (!iterator)\n                    break;\n                const { value, done } = iterator.next();\n                if (done) {\n                    iterator = this.$iterator = null;\n                    this.$iterable = null;\n                }\n                else {\n                    elements.push(value);\n                    alreadyConsumed++;\n                    yield value;\n                }\n            }\n        }\n        else {\n            yield* elements;\n        }\n    }\n}\nexport const MemoizedIterator = (iterator) => new MemoizedIteratorClass(iterator);\nexport const MI = MemoizedIterator;\n", "import { CI, MI } from \"../collection/Iterator.js\";\n//---------------------------------------------------------------------------------------------------------------------\nconst MixinInstanceOfProperty = Symbol('MixinIdentity');\nconst MixinStateProperty = Symbol('MixinStateProperty');\n//---------------------------------------------------------------------------------------------------------------------\nclass MixinWalkDepthState {\n    constructor() {\n        this.baseEl = undefined;\n        this.sourceEl = undefined;\n        this.$elementsByTopoLevel = undefined;\n        this.$topoLevels = undefined;\n        this.linearizedByTopoLevelsSource = MI(this.linearizedByTopoLevels());\n    }\n    static new(props) {\n        const me = new this();\n        props && Object.assign(me, props);\n        return me;\n    }\n    get topoLevels() {\n        if (this.$topoLevels !== undefined)\n            return this.$topoLevels;\n        return this.$topoLevels = this.buildTopoLevels();\n    }\n    buildTopoLevels() {\n        return Array.from(this.elementsByTopoLevel.keys()).sort((level1, level2) => level1 - level2);\n    }\n    get elementsByTopoLevel() {\n        if (this.$elementsByTopoLevel !== undefined)\n            return this.$elementsByTopoLevel;\n        return this.$elementsByTopoLevel = this.buildElementsByTopoLevel();\n    }\n    getOrCreateLevel(map, topoLevel) {\n        let elementsAtLevel = map.get(topoLevel);\n        if (!elementsAtLevel) {\n            elementsAtLevel = [];\n            map.set(topoLevel, elementsAtLevel);\n        }\n        return elementsAtLevel;\n    }\n    buildElementsByTopoLevel() {\n        let maxTopoLevel = 0;\n        const baseElements = this.baseEl ? CI(this.baseEl.walkDepthState.elementsByTopoLevel.values()).concat().toSet() : new Set();\n        const map = CI(this.sourceEl.requirements)\n            .map(mixin => mixin.walkDepthState.elementsByTopoLevel)\n            .concat()\n            .reduce((elementsByTopoLevel, [topoLevel, mixins]) => {\n            if (topoLevel > maxTopoLevel)\n                maxTopoLevel = topoLevel;\n            this.getOrCreateLevel(elementsByTopoLevel, topoLevel).push(mixins);\n            return elementsByTopoLevel;\n        }, new Map());\n        this.getOrCreateLevel(map, maxTopoLevel + 1).push([this.sourceEl]);\n        return CI(map).map(([level, elements]) => {\n            return [level, CI(elements).concat().uniqueOnly().filter(mixin => !baseElements.has(mixin)).sort((mixin1, mixin2) => mixin1.id - mixin2.id)];\n        }).toMap();\n    }\n    *linearizedByTopoLevels() {\n        yield* CI(this.topoLevels).map(level => this.elementsByTopoLevel.get(level)).concat();\n    }\n}\n// Note: 65535 mixins only, because of the hashing function implementation (String.fromCharCode)\nlet MIXIN_ID = 1;\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * @hidden\n */\nexport const identity = a => class extends a {\n};\n// export type IdentityMixin<Base extends object>         = < T extends AnyConstructor<Base>>(base : T) => T\n//\n// export const IdentityMixin             = <Base extends object>() : IdentityMixin<Base> => identity\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * @hidden\n */\nexport class ZeroBaseClass {\n}\n//---------------------------------------------------------------------------------------------------------------------\nclass MixinState {\n    constructor() {\n        this.id = MIXIN_ID++;\n        this.requirements = [];\n        this.baseClass = ZeroBaseClass;\n        this.identitySymbol = undefined;\n        this.mixinLambda = identity;\n        this.walkDepthState = undefined;\n        // private $hash               : MixinHash             = ''\n        this.$minimalClass = undefined;\n        this.name = '';\n    }\n    static new(props) {\n        const me = new this();\n        props && Object.assign(me, props);\n        me.walkDepthState = MixinWalkDepthState.new({ sourceEl: me, baseEl: getMixinState(me.baseClass) });\n        //------------------\n        const mixinLambda = me.mixinLambda;\n        const symbol = me.identitySymbol = Symbol(mixinLambda.name);\n        const mixinLambdaWrapper = Object.assign(function (base) {\n            const extendedClass = mixinLambda(base);\n            extendedClass.prototype[symbol] = true;\n            return extendedClass;\n        }, {\n            [MixinInstanceOfProperty]: symbol,\n            [MixinStateProperty]: me\n        });\n        Object.defineProperty(mixinLambdaWrapper, Symbol.hasInstance, { value: isInstanceOfStatic });\n        me.mixinLambda = mixinLambdaWrapper;\n        return me;\n    }\n    get minimalClass() {\n        if (this.$minimalClass !== undefined)\n            return this.$minimalClass;\n        return this.$minimalClass = this.buildMinimalClass();\n    }\n    // get hash () : MixinHash {\n    //     if (this.$hash !== '') return this.$hash\n    //\n    //     return this.$hash = this.buildHash()\n    // }\n    // buildHash () : MixinHash {\n    //     return String.fromCharCode(...this.walkDepthState.linearizedByTopoLevelsSource.map(mixin => mixin.id))\n    // }\n    getBaseClassMixinId(baseClass) {\n        const constructor = this.constructor;\n        const mixinId = constructor.baseClassesIds.get(baseClass);\n        if (mixinId !== undefined)\n            return mixinId;\n        const newId = MIXIN_ID++;\n        constructor.baseClassesIds.set(baseClass, newId);\n        return newId;\n    }\n    buildMinimalClass() {\n        const self = this.constructor;\n        let baseCls = this.baseClass;\n        const minimalClassConstructor = this.walkDepthState.linearizedByTopoLevelsSource.reduce((acc, mixin) => {\n            const { cls, hash } = acc;\n            const nextHash = hash + String.fromCharCode(mixin.id);\n            let wrapperCls = self.minimalClassesByLinearHash.get(nextHash);\n            if (!wrapperCls) {\n                wrapperCls = mixin.mixinLambda(cls);\n                mixin.name = wrapperCls.name;\n                self.minimalClassesByLinearHash.set(nextHash, wrapperCls);\n            }\n            acc.cls = wrapperCls;\n            acc.hash = nextHash;\n            return acc;\n        }, { cls: baseCls, hash: String.fromCharCode(this.getBaseClassMixinId(baseCls)) }).cls;\n        const minimalClass = Object.assign(minimalClassConstructor, {\n            [MixinInstanceOfProperty]: this.identitySymbol,\n            [MixinStateProperty]: this,\n            mix: this.mixinLambda,\n            derive: (base) => Mixin([minimalClass, base], base => class extends base {\n            }),\n            $: this,\n            toString: this.toString.bind(this)\n        });\n        Object.defineProperty(minimalClass, Symbol.hasInstance, { value: isInstanceOfStatic });\n        return minimalClass;\n    }\n    toString() {\n        return this.walkDepthState.linearizedByTopoLevelsSource.reduce((acc, mixin) => `${mixin.name}(${acc})`, this.baseClass.name);\n    }\n}\nMixinState.minimalClassesByLinearHash = new Map();\nMixinState.baseClassesIds = new Map();\n//endregion type helpers\n//---------------------------------------------------------------------------------------------------------------------\nconst isMixinClass = (func) => {\n    return Object.getPrototypeOf(func.prototype).constructor.hasOwnProperty(MixinStateProperty);\n};\nconst getMixinState = (func) => {\n    return Object.getPrototypeOf(func.prototype).constructor[MixinStateProperty];\n};\n//---------------------------------------------------------------------------------------------------------------------\nconst mixin = (required, mixinLambda) => {\n    let baseClass;\n    if (required.length > 0) {\n        const lastRequirement = required[required.length - 1];\n        // absence of `[ MixinStateProperty ]` indicates its a regular class and not a mixin class\n        // avoid assigning ZeroBaseClass - it will be applied as default at the end\n        if (!isMixinClass(lastRequirement) && lastRequirement !== ZeroBaseClass)\n            baseClass = lastRequirement;\n    }\n    const requirements = [];\n    required.forEach((requirement, index) => {\n        const mixinState = requirement[MixinStateProperty];\n        if (mixinState !== undefined) {\n            const currentBaseClass = mixinState.baseClass;\n            // ignore ZeroBaseClass - since those are compatible with any other base class\n            if (currentBaseClass !== ZeroBaseClass) {\n                if (baseClass) {\n                    // already found a base class from requirements earlier\n                    if (baseClass !== currentBaseClass) {\n                        const currentIsSub = currentBaseClass.prototype.isPrototypeOf(baseClass.prototype);\n                        const currentIsSuper = baseClass.prototype.isPrototypeOf(currentBaseClass.prototype);\n                        if (!currentIsSub && !currentIsSuper)\n                            throw new Error(\"Base class mismatch\");\n                        baseClass = currentIsSuper ? currentBaseClass : baseClass;\n                    }\n                }\n                else\n                    // first base class from requirements\n                    baseClass = currentBaseClass;\n            }\n            requirements.push(mixinState);\n        }\n        else {\n            if (index !== required.length - 1)\n                throw new Error(\"Base class should be provided as the last element of the requirements array\");\n        }\n    });\n    //------------------\n    const mixinState = MixinState.new({\n        requirements,\n        mixinLambda: mixinLambda,\n        baseClass: baseClass || ZeroBaseClass\n    });\n    return mixinState.minimalClass;\n};\n//---------------------------------------------------------------------------------------------------------------------\n// this function works both with default mixin class and mixin application function\n// it supplied internally as [Symbol.hasInstance] for the default mixin class and mixin application function\nconst isInstanceOfStatic = function (instance) {\n    return Boolean(instance && instance[this[MixinInstanceOfProperty]]);\n};\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * This is the `instanceof` analog for the classes created with [[Mixin]] helper. It also provides [typeguard](https://www.typescriptlang.org/docs/handbook/advanced-types.html#user-defined-type-guards).\n *\n * There's no strict need to use it, as the native `instanceof` is also supported for the mixins created with the [[Mixin]] helper and also provides\n * typeguarding.\n *\n * @param instance Any value, normally an instance of the mixin class\n * @param func The constructor function of the class, created with [[Mixin]]\n */\nexport const isInstanceOf = (instance, func) => {\n    return Boolean(instance && instance[func[MixinInstanceOfProperty]]);\n};\n//---------------------------------------------------------------------------------------\n/**\n * This function allows you to create mixin classes. Mixin classes solves the well-known problem with \"classical\" single-class inheritance,\n * in which class hierarchy must form a tree. When using mixins, class hierarchy becomes an arbitrary acyclic graph.\n *\n * Another view on mixins is that, if \"classical\" class is a point (a vertice of the graph), mixin class is an arrow between the points\n * (an edge in the graph, or rather, a description of the edge).\n *\n * Some background information about the mixin pattern can be found [here](https://mariusschulz.com/blog/typescript-2-2-mixin-classes)\n * and [here](https://www.bryntum.com/blog/the-mixin-pattern-in-typescript-all-you-need-to-know/).\n *\n * The pattern, being described here, is the evolution of the previous work, and main advantage is that it solves the compilation error\n * for circular references.\n *\n * Mixin definition. Requirements\n * ------------------------------\n *\n * The pattern looks like:\n *\n *     class Mixin1 extends Mixin(\n *         [],\n *         (base : AnyConstructor) =>\n *\n *         class Mixin1 extends base {\n *             prop1        : string\n *             method1 () : string {\n *                 return this.prop1\n *             }\n *             static static1 : number\n *         }\n *     ){}\n *\n * The core of the definition above is the mixin lambda - a function which receives a base class as its argument and returns a class,\n * extending the base class with additional properties.\n *\n * The example above creates a mixin `Mixin1` which has no requirements. Requirements are the other mixins,\n * which needs to be included in the base class of this mixin.\n *\n * There's also a special type of the requirement,\n * called \"base class requirement\". It is optional and can only appear as the last argument of the requirements\n * array. It does not have to be a mixin, created with the `Mixin` function, but can be any JS class. This requirement\n * specifies, that the base class of this mixin should be a subclass of the given class (or that class itself).\n *\n * The requirements of the mixin needs to be listed 3 times:\n * - as an array of constructor functions, in the 1st argument of the `Mixin` function\n * - as an instance type intersection, in the 1st type argument for the [[AnyConstructor]] type\n * - as an static type intersection, in the 2nd type argument for the [[AnyConstructor]] type\n *\n * For example, `Mixin2` requires `Mixin1`:\n *\n *     class Mixin2 extends Mixin(\n *         [ Mixin1 ],\n *         (base : AnyConstructor<Mixin1, typeof Mixin1>) =>\n *\n *         class Mixin2 extends base {\n *         }\n *     ){}\n *\n * And `Mixin3` requires both `Mixin1` and `Mixin2` (even that its redundant, since `Mixin2` already requires `Mixin1`,\n * but suppose we don't know the implementation details of the `Mixin2`):\n *\n *     class Mixin3 extends Mixin(\n *         [ Mixin1, Mixin2 ],\n *         (base : AnyConstructor<Mixin1 & Mixin2, typeof Mixin1 & typeof Mixin2>) =>\n *\n *         class Mixin3 extends base {\n *         }\n *     ){}\n *\n * Now, `Mixin4` requires `Mixin3`, plus, it requires the base class to be `SomeBaseClass`:\n *\n *     class SomeBaseClass {}\n *\n *     class Mixin4 extends Mixin(\n *         [ Mixin3, SomeBaseClass ],\n *         (base : AnyConstructor<\n *             Mixin3 & SomeBaseClass, typeof Mixin3 & typeof SomeBaseClass\n *         >) =>\n *\n *         class Mixin4 extends base {\n *         }\n *     ){}\n *\n * As already briefly mentioned, the requirements are \"scanned\" deep and included only once. Also all minimal classes are cached -\n * for example the creation of the Mixin3\u00A0will reuse the minimal class of the Mixin2\u00A0instead of creating a new intermediate class.\n * This means that all edges of the mixin dependencies graph are created only once (up to the base class).\n *\n * Requirements can not form cycles - that will generate both compilation error and run-time stack overflow.\n *\n * The typing for the `Mixin` function will provide a compilation error, if the requirements don't match, e.g. some requirement is\n * listed in the array, but missed in the types. This protects you from trivial mistakes. However, the typing is done up to 10 requirements only.\n * If you need more than 10 requirements for the mixin, use the [[MixinAny]] function, which is an exact analog of `Mixin`, but without\n * this type-level protection for requirements mismatch.\n *\n * It is possible to simplify the type of the `base` argument a bit, by using the [[ClassUnion]] helper. However, it seems in certain edge cases\n * it may lead to compilation errors. If your scenarios are not so complex you should give it a try. Using the [[ClassUnion]] helper, the\n * `Mixin3` can be defined as:\n *\n *     class Mixin3 extends Mixin(\n *         [ Mixin1, Mixin2 ],\n *         (base : ClassUnion<typeof Mixin1, typeof Mixin2>) =>\n *\n *         class Mixin3 extends base {\n *         }\n *     ){}\n *\n * Note, that due to this [issue](https://github.com/Microsoft/TypeScript/issues/7342), if you use decorators in your mixin class,\n * the declaration needs to be slightly more verbose (can not use compact notation for the arrow functions):\n *\n *     class Mixin2 extends Mixin(\n *         [ Mixin1 ],\n *         (base : AnyConstructor<Mixin1, typeof Mixin1>) => {\n *             class Mixin2 extends base {\n *                 @decorator\n *                 prop2 : string\n *             }\n *             return Mixin2\n *         }\n *     ){}\n *\n * As you noticed, the repeating listing of the requirements is somewhat verbose. Suggestions how the pattern can be improved\n * are [very welcomed](mailto:nickolay8@gmail.com).\n *\n * Mixin instantiation. Mixin constructor. `instanceof`\n * --------------------------------\n *\n * You can instantiate any mixin class just by using its constructor:\n *\n *     const instance1 = new Mixin1()\n *     const instance2 = new Mixin2()\n *\n * As explained in details [here](https://mariusschulz.com/blog/typescript-2-2-mixin-classes), mixin constructor should accept variable number of arguments\n * with the `any` type. This is simply because the mixin is supposed to be applicable to any other base class, which may have its own type\n * of the constructor arguments.\n *\n *     class Mixin2 extends Mixin(\n *         [ Mixin1 ],\n *         (base : AnyConstructor<Mixin1, typeof Mixin1>) => {\n *             class Mixin2 extends base {\n *                 prop2 : string\n *\n *                 constructor (...args: any[]) {\n *                     super(...args)\n *                     this.prop2 = ''\n *                 }\n *             }\n *             return Mixin2\n *         }\n *     ){}\n *\n * In other words, its not possible to provide any type-safety for mixin instantiation using regular class constructor.\n *\n * However, if we change the way we create class instances a little, we can get the type-safety back. For that,\n * we need to use a \"uniform\" class constructor - a constructor which has the same form for all classes. The [[Base]] class\n * provides such constructor as its static [[Base.new|new]] method. The usage of `Base` class is not required - you can use\n * any other base class.\n *\n * The `instanceof` operator works as expected for instances of the mixin classes. It also takes into account all the requirements.\n * For example:\n *\n *     const instance2 = new Mixin2()\n *\n *     const isMixin2 = instance2 instanceof Mixin2 // true\n *     const isMixin1 = instance2 instanceof Mixin1 // true, since Mixin2 requires Mixin1\n *\n * See also [[isInstanceOf]].\n *\n * \"Manual\" class derivation\n * --------------------------------\n *\n * You have defined a mixin using the `Mixin` function. Now you want to apply it to some base class to get the \"specific\" class to be able\n * to instantiate it. As described above - you don't have to, you can instantiate it directly.\n *\n * Sometimes however, you still want to derive the class \"manually\". For that, you can use static methods `mix` and `derive`, available\n * on all mixins.\n *\n * The `mix` method provides a direct access to the mixin lambda. It does not take requirements into account - that's the implementor's responsibility.\n * The `derive` method is something like \"accumulated\" mixin lambda - mixin lambda with all requirements.\n *\n * Both `mix` and `derive` provide the reasonably typed outcome.\n *\n *     class Mixin1 extends Mixin(\n *         [],\n *         (base : AnyConstructor) =>\n *\n *         class Mixin1 extends base {\n *             prop1        : string\n *         }\n *     ){}\n *\n *     class Mixin2 extends Mixin(\n *         [ Mixin1 ],\n *         (base : AnyConstructor<Mixin1, typeof Mixin1>) =>\n *\n *         class Mixin2 extends base {\n *             prop2        : string\n *         }\n *     ){}\n *\n *     const ManualMixin1 = Mixin1.mix(Object)\n *     const ManualMixin2 = Mixin2.mix(Mixin1.mix(Object))\n *\n *     const AnotherManualMixin1 = Mixin1.derive(Object)\n *     const AnotherManualMixin2 = Mixin2.derive(Object)\n *\n * Generics\n * --------\n *\n * Using generics with mixins is tricky because TypeScript does not have higher-kinded types and type inference for generics. Still some form\n * of generic arguments is possible, using the interface merging trick.\n *\n * Here's the pattern:\n *\n * ```ts\n * class Duplicator<Element> extends Mixin(\n *     [],\n *     (base : AnyConstructor) =>\n *\n *     class Duplicator extends base {\n *         Element                 : any\n *\n *         duplicate (value : this[ 'Element' ]) : this[ 'Element' ][] {\n *             return [ value, value ]\n *         }\n *     }\n * ){}\n *\n * interface Duplicator<Element> {\n *     Element : Element\n * }\n *\n * const dup = new Duplicator<boolean>()\n *\n * dup.duplicate('foo') // TS2345: Argument of type '\"foo\"' is not assignable to parameter of type 'boolean'.\n * ```\n *\n * In the example above, we've defined a generic argument `Element` for the outer mixin class, but in fact, that argument is not used anywhere in the\n * nested class definition in the mixin lambda. Instead, in the nested class, we define a property `Element`, which plays the role of the\n * generic argument.\n *\n * Mixin class methods then can refer to the generic type as `this[ 'Element' ]`.\n *\n * The generic arguments of the outer and nested classes are tied together in the additional interface declaration, which, by TypeScript rules\n * is merged together with the class definition. In this declaration, we specify that property `Element` has type of the `Element` generic argument.\n *\n * Limitations\n * ---------\n *\n * The most important limitation we found (which affect the old pattern as well) is the compilation error, which will be issued for\n * the private/protected methods, when compiling with declarations emitting (*.d.ts files generation).\n *\n * This is a [well-known problem](https://github.com/microsoft/TypeScript/issues/35822) in the TypeScript world \u2013 the *.d.ts files do not represent\n * the internal data structures of the TypeScript compiler well. Instead they use some simplified syntax, optimized for human editing.\n * This is why the compiler may generate false positives in the incremental compilation mode \u2013 it uses *.d.ts files internally.\n *\n * This can be a show-stopper for the people that use declaration files (usually for publishing). Keep in mind though, that you can always\n * publish actual TypeScript sources along with the generated JavaScript files, instead of publishing JavaScript + declarations files.\n *\n */\nexport const Mixin = mixin;\n/**\n * This is an exact analog of the [[Mixin]] function, but without type-level protection for requirements mismatch.\n * It supports unlimited number of requirements.\n */\nexport const MixinAny = mixin;\n", "//---------------------------------------------------------------------------------------------------------------------\n/**\n * This is a base class, providing the type-safe static constructor [[new]]. This is very convenient when using\n * [[Mixin|mixins]], as mixins can not have types in the constructors.\n */\nexport class Base {\n    /**\n     * This method applies its 1st argument (if any) to the current instance using `Object.assign()`.\n     *\n     * Supposed to be overridden in the subclasses to customize the instance creation process.\n     *\n     * @param props\n     */\n    initialize(props) {\n        props && Object.assign(this, props);\n    }\n    /**\n     * This is a type-safe static constructor method, accepting a single argument, with the object, corresponding to the\n     * class properties. It will generate a compilation error, if unknown property is provided.\n     *\n     * For example:\n     *\n     * ```ts\n     * class MyClass extends Base {\n     *     prop     : string\n     * }\n     *\n     * const instance : MyClass = MyClass.new({ prop : 'prop', wrong : 11 })\n     * ```\n     *\n     * will produce:\n     *\n     * ```plaintext\n     * TS2345: Argument of type '{ prop: string; wrong: number; }' is not assignable to parameter of type 'Partial<MyClass>'.\n     * Object literal may only specify known properties, and 'wrong' does not exist in type 'Partial<MyClass>'\n     * ```\n     *\n     * The only thing this constructor does is create an instance and call the [[initialize]] method on it, forwarding\n     * the first argument. The customization of instance is supposed to be performed in that method.\n     *\n     * @param props\n     */\n    static new(props) {\n        const instance = new this();\n        instance.initialize(props);\n        return instance;\n    }\n}\n", "import { Mixin } from \"../../ChronoGraph/class/BetterMixin.js\";\n/**\n * This a base generic mixin for every class, that belongs to a project.\n *\n * It just provides getter/setter for the `project` property, along with some convenience methods\n * to access the project's stores.\n */\nexport class AbstractPartOfProjectGenericMixin extends Mixin([], (base) => {\n    const superProto = base.prototype;\n    class AbstractPartOfProjectGenericMixin extends base {\n        async commitAsync() {\n            return this.project.commitAsync();\n        }\n        set project(project) {\n            this.$project = project;\n        }\n        get project() {\n            return this.$project;\n        }\n        calculateProject() {\n            throw new Error(\"Implement me\");\n        }\n        /**\n         * The method to set the [[AbstractProjectMixin|project]] instance, this entity belongs to.\n         */\n        setProject(project) {\n            return this.project = project;\n        }\n        /**\n         * The method to get the [[AbstractProjectMixin|project]] instance, this entity belongs to.\n         */\n        getProject() {\n            if (this.project)\n                return this.project;\n            return this.setProject(this.calculateProject());\n        }\n        /**\n         * Convenience method to get the instance of the assignment store in the [[AbstractProjectMixin|project]] instance, this entity belongs to.\n         */\n        getAssignmentStore() {\n            const project = this.getProject();\n            return project?.assignmentStore;\n        }\n        /**\n         * Convenience method to get the instance of the dependency store in the [[AbstractProjectMixin|project]] instance, this entity belongs to.\n         */\n        getDependencyStore() {\n            const project = this.getProject();\n            return project?.dependencyStore;\n        }\n        /**\n         * Convenience method to get the instance of the event store in the [[AbstractProjectMixin|project]] instance, this entity belongs to.\n         */\n        getEventStore() {\n            const project = this.getProject();\n            return project?.eventStore;\n        }\n        /**\n         * Convenience method to get the instance of the resource store in the [[AbstractProjectMixin|project]] instance, this entity belongs to.\n         */\n        getResourceStore() {\n            const project = this.getProject();\n            return project?.resourceStore;\n        }\n        /**\n         * Convenience method to get the instance of the calendar manager store in the [[AbstractProjectMixin|project]] instance, this entity belongs to.\n         */\n        getCalendarManagerStore() {\n            const project = this.getProject();\n            return project?.calendarManagerStore;\n        }\n    }\n    return AbstractPartOfProjectGenericMixin;\n}) {\n}\n", "import { Mixin } from \"../../ChronoGraph/class/BetterMixin.js\";\nimport { AbstractPartOfProjectGenericMixin } from \"./AbstractPartOfProjectGenericMixin.js\";\n/**\n * This a base generic mixin for every class, that belongs to a scheduler_core project.\n *\n * It just provides getter/setter for the `project` property, along with some convenience methods\n * to access the project's stores.\n */\nexport class CorePartOfProjectGenericMixin extends Mixin([AbstractPartOfProjectGenericMixin], (base) => {\n    const superProto = base.prototype;\n    class CorePartOfProjectGenericMixin extends base {\n        //region Store getters\n        get eventStore() {\n            return this.project?.eventStore;\n        }\n        get resourceStore() {\n            return this.project?.resourceStore;\n        }\n        get assignmentStore() {\n            return this.project?.assignmentStore;\n        }\n        get dependencyStore() {\n            return this.project?.dependencyStore;\n        }\n        get calendarManagerStore() {\n            return this.project?.calendarManagerStore;\n        }\n        //endregion\n        //region Entity getters\n        /**\n         * Convenience method to get the instance of event by its id.\n         */\n        getEventById(id) {\n            return this.eventStore?.getById(id);\n        }\n        /**\n         * Convenience method to get the instance of dependency by its id.\n         */\n        getDependencyById(id) {\n            return this.dependencyStore?.getById(id);\n        }\n        /**\n         * Convenience method to get the instance of resource by its id.\n         */\n        getResourceById(id) {\n            return this.resourceStore?.getById(id);\n        }\n        /**\n         * Convenience method to get the instance of assignment by its id.\n         */\n        getAssignmentById(id) {\n            return this.assignmentStore?.getById(id);\n        }\n        /**\n         * Convenience method to get the instance of calendar by its id.\n         */\n        getCalendarById(id) {\n            return this.calendarManagerStore?.getById(id);\n        }\n    }\n    return CorePartOfProjectGenericMixin;\n}) {\n}\n", "import { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { AbstractPartOfProjectGenericMixin } from \"../../AbstractPartOfProjectGenericMixin.js\";\nimport Store from \"../../../../Core/data/Store.js\";\n/**\n * This an abstract mixin for every Store, that belongs to a project.\n *\n * The store with this mixin, supposes, that it will be \"joining\" the project, a reference to which is saved\n * and made available for all models.\n */\nexport class AbstractPartOfProjectStoreMixin extends Mixin([\n    AbstractPartOfProjectGenericMixin,\n    Store\n], (base) => {\n    const superProto = base.prototype;\n    class AbstractPartOfProjectStoreMixin extends base {\n        constructor() {\n            super(...arguments);\n            this.isLoadingData = false;\n            this.disableHasLoadedDataToCommitFlag = false;\n        }\n        static get $name() {\n            return 'AbstractPartOfProjectStoreMixin';\n        }\n        //region Async event triggering\n        // NOTE: Tested in Scheduler (EventStore.t.js)\n        construct(config = {}) {\n            config.asyncEvents = {\n                add: true,\n                remove: true,\n                removeAll: true,\n                change: true,\n                refresh: true,\n                replace: true,\n                move: true,\n                update: true\n            };\n            return superProto.construct.call(this, config);\n        }\n        // Override for event triggering, to allow triggering events before and after some async operation.\n        // The \"before\" events are prefix, the \"after\" are not.\n        trigger(eventName, param) {\n            const me = this, { asyncEvents, project } = me, asyncEvent = asyncEvents?.[eventName], asyncAction = asyncEvent && (asyncEvent === true || asyncEvent[param.action]);\n            if (!asyncAction) {\n                // Trigger as usual\n                return superProto.trigger.call(me, eventName, param);\n            }\n            // Trigger prefixed before event\n            superProto.trigger.call(me, `${eventName}PreCommit`, { ...param });\n            // Event that did not invalidate engine, for example \"update\"\n            if (!project || project.isEngineReady() && !project.isWritingData) {\n                // Trigger \"original\" event\n                superProto.trigger.call(me, eventName, param);\n            }\n            else if (!me.eventsSuspended && project) {\n                // Instead of making n auto-destroying listeners (which takes enormous amount of time), we make a single\n                // one and queue all the events. When dataReady event is triggered we trigger those events\n                // https://github.com/bryntum/support/issues/3154\n                if (!project.dataReadyDetacher) {\n                    project.queuedDataReadyEvents = [];\n                    // Wait for commit without triggering one, otherwise we would affect commit scheduling\n                    project.dataReadyDetacher = project.ion({\n                        dataReady() {\n                            // Trigger \"original\" event\n                            this.queuedDataReadyEvents.forEach(([superProto, scope, eventName, param]) => {\n                                superProto.trigger.call(scope, eventName, param);\n                            });\n                            project.queuedDataReadyEvents = null;\n                            project.dataReadyDetacher();\n                            project.dataReadyDetacher = null;\n                        },\n                        once: true\n                    });\n                }\n                project.queuedDataReadyEvents.push([superProto, me, eventName, param]);\n            }\n            // No way of handling other return values in this scenario, won't work for preventable events\n            return true;\n        }\n        //endregion\n        calculateProject() {\n            // project is supposed to be provided for stores from outside\n            return this.project;\n        }\n        setStoreData(data) {\n            // Loading data sets hasLoadedDataToCommit flag.\n            // So we treat the 1st commit after data loading as the initial one\n            if (this.project && !(this.syncDataOnLoad || this.disableHasLoadedDataToCommitFlag)) {\n                this.project.hasLoadedDataToCommit = true;\n            }\n            this.isLoadingData = true;\n            superProto.setStoreData.call(this, data);\n            this.isLoadingData = false;\n            this.project?.trigger('storeRefresh', { store: this });\n        }\n        // Override to postpone auto commits to after project commit, makes sure records are unmodified after commit\n        async doAutoCommit() {\n            if (this.suspendCount <= 0 && this.project && !this.project.isEngineReady()) {\n                // @ts-ignore\n                await this.project.commitAsync();\n            }\n            superProto.doAutoCommit.call(this);\n        }\n        async addAsync(records, silent) {\n            const result = this.add(records, silent);\n            await this.project.commitAsync();\n            return result;\n        }\n        async insertAsync(index, records, silent) {\n            const result = this.insert(index, records, silent);\n            await this.project.commitAsync();\n            return result;\n        }\n        async loadDataAsync(data) {\n            this.data = data;\n            await this.project.commitAsync();\n        }\n        performFilter() {\n            if (this.project && (this.isLoadingData || this.rootNode?.isLoading)) {\n                // Reapply filters after calculations, in case filtering on some calculated field\n                this.project.commitAsync().then(() => this.filter());\n            }\n            return super.performFilter(...arguments);\n        }\n    }\n    return AbstractPartOfProjectStoreMixin;\n}) {\n}\n", "import { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { AbstractPartOfProjectStoreMixin } from \"../../store/mixin/AbstractPartOfProjectStoreMixin.js\";\nimport { AbstractPartOfProjectGenericMixin } from \"../../AbstractPartOfProjectGenericMixin.js\";\nimport Model from \"../../../../Core/data/Model.js\";\nimport { isInstanceOf } from '../../../../ChronoGraph/class/BetterMixin.js';\n/**\n * This an abstract mixin for every Model that belongs to a project.\n *\n * The model with this mixin, supposes that it will be \"joining\" a store that is already part of a project,\n * so that such model can take a reference to the project from it.\n *\n * It provides 2 template methods [[joinProject]] and [[leaveProject]], which can be overridden in other mixins.\n */\nexport class AbstractPartOfProjectModelMixin extends Mixin([AbstractPartOfProjectGenericMixin, Model], (base) => {\n    const superProto = base.prototype;\n    class AbstractPartOfProjectModelMixin extends base {\n        joinStore(store) {\n            let joinedProject = null;\n            // Joining a store that is not part of project (for example a chained store) should not affect engine\n            if (isInstanceOf(store, AbstractPartOfProjectStoreMixin)) {\n                const project = store.getProject();\n                if (project && !this.getProject()) {\n                    this.setProject(project);\n                    joinedProject = project;\n                }\n            }\n            superProto.joinStore.call(this, store);\n            // Join directly only if not repopulating the store, in which case we will be joined later after\n            // graph has been recreated\n            if (joinedProject && !joinedProject.isRepopulatingStores)\n                this.joinProject();\n        }\n        unjoinStore(store, isReplacing = false) {\n            superProto.unjoinStore.call(this, store, isReplacing);\n            const { project } = this;\n            const isLeavingProjectStore = (isInstanceOf(store, AbstractPartOfProjectStoreMixin))\n                && !store.isFillingFromMaster && project === (store.isChained && store.project ?\n                store.masterStore.project\n                : store.project);\n            // Leave project when unjoining from store, but do not bother if the project is being destroyed or if\n            // the dataset is being replaced, or if store is chained into other project\n            if (project && !project.isDestroying && !project.isRepopulatingStores && isLeavingProjectStore) {\n                this.leaveProject(isReplacing);\n                this.setProject(null);\n            }\n            // @ts-ignore\n            if (isLeavingProjectStore)\n                this.graph = null;\n        }\n        /**\n         * Template method, which is called when model is joining the project (through joining some store that\n         * has already joined the project)\n         */\n        joinProject() { }\n        /**\n         * Template method, which is called when model is leaving the project (through leaving some store usually)\n         */\n        leaveProject(isReplacing = false) { }\n        calculateProject() {\n            const store = this.stores.find(s => (isInstanceOf(s, AbstractPartOfProjectStoreMixin)) && !!s.getProject());\n            return store?.getProject();\n        }\n        async setAsync(fieldName, value, silent) {\n            const result = this.set(fieldName, value, silent);\n            await this.project?.commitAsync();\n            return result;\n        }\n        async getAsync(fieldName) {\n            await this.project?.commitAsync();\n            return this.get(fieldName);\n        }\n        get isStmRestoring() {\n            const project = this.getProject();\n            return project?.isRestoringData || project?.stm.isRestoring || false;\n        }\n    }\n    return AbstractPartOfProjectModelMixin;\n}) {\n}\n", "import { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { CorePartOfProjectGenericMixin } from \"../../CorePartOfProjectGenericMixin.js\";\nimport Model from \"../../../../Core/data/Model.js\";\nimport { AbstractPartOfProjectModelMixin } from \"./AbstractPartOfProjectModelMixin.js\";\n/**\n * This a mixin for every Model that belongs to a scheduler_core project.\n *\n * It adds functions needed to calculate invalidated fields on project commit.\n */\nexport class CorePartOfProjectModelMixin extends Mixin([\n    AbstractPartOfProjectModelMixin,\n    CorePartOfProjectGenericMixin,\n    Model\n], (base) => {\n    const superProto = base.prototype;\n    class CorePartOfProjectModelMixin extends base {\n        constructor() {\n            super(...arguments);\n            // Flag set during calculation\n            this.$isCalculating = false;\n            // Proposed changes\n            this.$changed = {};\n            // Value before proposed change, for buckets that need to update data early\n            this.$beforeChange = {};\n        }\n        get isInActiveTransaction() {\n            return true;\n        }\n        // Invalidate record upon joining project, leads to a buffered commit\n        joinProject() {\n            this.invalidate();\n        }\n        // Trigger a buffered commit when leaving the project\n        leaveProject(isReplacing = false) {\n            superProto.leaveProject.call(this, isReplacing);\n            this.project?.bufferedCommitAsync();\n        }\n        /**\n         * Invalidates this record, queueing it for calculation on project commit.\n         */\n        invalidate() {\n            this.project?.invalidate(this);\n        }\n        /**\n         * Used to retrieve the proposed (before 'dataReady') or current (after 'dataReady') value for a field.\n         * If there is no proposed change, it is functionally equal to a normal `record.get()` call.\n         */\n        getCurrentOrProposed(fieldName) {\n            if (fieldName in this.$changed && this.$changed[fieldName] !== true) {\n                return this.$changed[fieldName];\n            }\n            return this.get(fieldName) ?? null;\n        }\n        /**\n         * Determines if the specified field has a value or not, value can be either current or proposed.\n         */\n        hasCurrentOrProposed(fieldName) {\n            return ((fieldName in this.$changed) && this.$changed[fieldName] != true) || this.get(fieldName) != null;\n        }\n        /**\n         * Propose changes, to be considered during calculation. Also invalidates the record.\n         */\n        propose(changes) {\n            // @ts-ignore\n            if (this.project || this.recurringTimeSpan?.project) {\n                const keys = Object.keys(changes);\n                for (let i = 0; i < keys.length; i++) {\n                    const key = keys[i];\n                    this.$changed[key] = changes[key];\n                }\n                this.invalidate();\n            }\n            else {\n                // If no project, behave as a normal model would\n                this.set(changes);\n            }\n        }\n        /**\n         * Similar to propose, but with more options. Mostly used by buckets, since they need data to update early.\n         */\n        setChanged(field, value, invalidate = true, setData = false) {\n            const me = this;\n            me.$changed[field] = value;\n            // Buckets need to keep data up to date immediately\n            if (setData) {\n                if (!(field in me.$beforeChange)) {\n                    me.$beforeChange[field] = me.get(field);\n                }\n                me.setData(field, value);\n            }\n            invalidate && me.invalidate();\n        }\n        /**\n         * Hook called before project refresh, override and calculate required changes in subclasses\n         */\n        calculateInvalidated() { }\n        /**\n         * Called after project refresh, before dataReady. Announce updated data\n         */\n        finalizeInvalidated(silent = false) {\n            const me = this;\n            me.$isCalculating = true;\n            if (!silent) {\n                // First silently revert any data change (used by buckets), otherwise it won't be detected by `set()`\n                me.setData(me.$beforeChange);\n                // Then do a proper set\n                me.set(me.$changed);\n            }\n            else {\n                me.setData(me.$changed);\n            }\n            me.$changed = {};\n            me.$beforeChange = {};\n            me.$isCalculating = false;\n        }\n    }\n    return CorePartOfProjectModelMixin;\n}) {\n}\n", "import { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { CorePartOfProjectModelMixin } from \"../mixin/CorePartOfProjectModelMixin.js\";\n/**\n * Core resource model class.\n */\nexport class CoreResourceMixin extends Mixin([CorePartOfProjectModelMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreResourceMixin extends base {\n        get assigned() {\n            return this.project?.assignmentStore.getResourcesAssignments(this);\n        }\n        joinProject() {\n            // Set up assignment -> resource mapping when joining store after assignment (skip during load)\n            // (note that there is no resourceStore yet when loading inline data, thus the first part of the condition)\n            if (this.resourceStore && !this.resourceStore.isLoadingData) {\n                this.assignmentStore?.query(a => a.get('resource') === this.id).forEach(unresolved => unresolved.setChanged('resource', this));\n            }\n            superProto.joinProject.call(this);\n        }\n        leaveProject(isReplacing = false) {\n            // `this.assigned` will be empty if model is added to project and then removed immediately\n            // w/o any propagations\n            // when replacing a resource or reloading the store, the assignments should be left intact\n            if (this.assigned && !isReplacing && !this.resourceStore?.isLoadingData) {\n                const resourceStore = this.resourceStore;\n                // to batch the assignments removal, we don't remove the assignments right away, but instead\n                // add them for the batched removal to the `assignmentsForRemoval` property of the event store\n                this.assigned.forEach(assignment => resourceStore.assignmentsForRemoval.add(assignment));\n            }\n            superProto.leaveProject.call(this);\n        }\n        applyValue(useProp, key, value, skipAccessor, field) {\n            // Changing id on a resource should update resourceId on its assignments\n            // (note that field might not exist, if user supplies data for undefined fields)\n            if (field?.name === 'id') {\n                this.assigned.forEach(assignment => {\n                    assignment.set('resourceId', value);\n                });\n            }\n            superProto.applyValue.call(this, useProp, key, value, skipAccessor, field);\n        }\n    }\n    return CoreResourceMixin;\n}) {\n}\n", "import GridRowModel from '../../Grid/data/GridRowModel.js';\nimport PartOfProject from '../data/mixin/PartOfProject.js';\nimport ResourceModelMixin from './mixin/ResourceModelMixin.js';\nimport { CoreResourceMixin } from '../../Engine/quark/model/scheduler_core/CoreResourceMixin.js';\nconst EngineMixin = CoreResourceMixin;\n/**\n * @module Scheduler/model/ResourceModel\n */\n/**\n * This class represent a single Resource in scheduler, usually added to a {@link Scheduler.data.ResourceStore}.\n *\n * It is a subclass of  {@link Core.data.Model}. Please refer to the documentation for that class to become familiar\n * with the base interface of the resource.\n *\n * ## Fields and references\n *\n * A resource has a few predefined fields, see Fields below. If you want to add more fields with meta data describing\n * your resources then you should subclass this class:\n *\n * ```javascript\n * class MyResource extends ResourceModel {\n *   static get fields() {\n *     return [\n *       // \"id\" and \"name\" fields are already provided by the superclass\n *       { name: 'company', type : 'string' }\n *     ];\n *   }\n * });\n * ```\n *\n * If you want to use other names in your data for the id and name fields you can configure them as seen below:\n *\n * ```javascript\n * class MyResource extends ResourceModel {\n *   static get fields() {\n *     return [\n *        { name: 'name', dataSource: 'userName' }\n *     ];\n *   },\n * });\n * ```\n *\n * After load and project normalization, these references are accessible (assuming their respective stores are loaded):\n * - `{@link #property-assignments}` - The linked assignment records\n * - `{@link #property-events}` - The linked (through assignments) event records\n *\n * ## Async resolving of references\n *\n * As described above, a resource has links to assignments and events. These references are populated async, using the\n * calculation engine of the project that the resource via its store is a part of. Because of this asyncness, references\n * cannot be used immediately after assignment modifications:\n *\n * ```javascript\n * assignment.resourceId = 2;\n * // resource.assignments is not yet up to date\n * ```\n *\n * To make sure references are updated, wait for calculations to finish:\n *\n * ```javascript\n * assignment.resourceId = 2;\n * await assignment.project.commitAsync();\n * // resource.assignments is up to date\n * ```\n *\n * As an alternative, you can also use `setAsync()` to trigger calculations directly after the change:\n *\n * ```javascript\n * await assignment.setAsync({ resourceId : 2});\n * // resource.assignments is up to date\n * ```\n *\n * @extends Grid/data/GridRowModel\n * @mixes Scheduler/model/mixin/ResourceModelMixin\n */\nexport default class ResourceModel extends ResourceModelMixin(PartOfProject(EngineMixin.derive(GridRowModel))) {\n    /**\n     * Get associated events\n     *\n     * @member {Scheduler.model.EventModel[]} events\n     * @readonly\n     * @category Common\n     */\n    static $name = 'ResourceModel';\n}\nResourceModel.exposeProperties();\nResourceModel._$name = 'ResourceModel';", "// Private class that leverages the differences between a core and a basic project\nexport default Target => class PartOfBaseProject extends Target {\n    static get $name() {\n        return 'PartOfBaseProject';\n    }\n    get assignmentStore() {\n        return this.project.assignmentStore;\n    }\n    get calendarManagerStore() {\n        return this.project.calendarManagerStore;\n    }\n    get dependencyStore() {\n        return this.project.dependencyStore;\n    }\n    get eventStore() {\n        return this.project.eventStore;\n    }\n    get resourceStore() {\n        return this.project.resourceStore;\n    }\n};\n", "import { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { CorePartOfProjectGenericMixin } from \"../../CorePartOfProjectGenericMixin.js\";\nimport Store from \"../../../../Core/data/Store.js\";\nimport { AbstractPartOfProjectStoreMixin } from \"./AbstractPartOfProjectStoreMixin.js\";\n/**\n * This a mixin for every Store, that belongs to a scheduler_core project.\n */\nexport class CorePartOfProjectStoreMixin extends Mixin([\n    AbstractPartOfProjectStoreMixin,\n    CorePartOfProjectGenericMixin,\n    Store\n], (base) => {\n    const superProto = base.prototype;\n    class CorePartOfProjectStoreMixin extends base {\n        setProject(project) {\n            const result = superProto.setProject.call(this, project);\n            if (project)\n                this.joinProject(project);\n            return result;\n        }\n        joinProject(project) { }\n        onCommitAsync() { }\n    }\n    return CorePartOfProjectStoreMixin;\n}) {\n}\n", "import { Mixin } from \"../../../ChronoGraph/class/Mixin.js\";\nimport { AbstractPartOfProjectStoreMixin } from \"./mixin/AbstractPartOfProjectStoreMixin.js\";\nconst dataAddRemoveActions = {\n    splice: 1,\n    clear: 1\n};\n// Shared functionality for CoreResourceStore & ChronoResourceStore\nexport class AbstractResourceStoreMixin extends Mixin([AbstractPartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class AbstractResourceStoreMixin extends base {\n        constructor() {\n            super(...arguments);\n            this.assignmentsForRemoval = new Set();\n        }\n        // we need `onDataChange` for `syncDataOnLoad` option to work\n        onDataChange(event) {\n            // remove from a filter action must be ignored.\n            const isAddRemove = dataAddRemoveActions[event.action];\n            super.onDataChange(event);\n            if (isAddRemove && event.removed?.length)\n                this.afterResourceRemoval();\n        }\n        // it seems `onDataChange` is not triggered for `remove` with `silent` flag\n        remove(records, silent) {\n            const res = superProto.remove.call(this, records, silent);\n            this.afterResourceRemoval();\n            return res;\n        }\n        // it seems `onDataChange` is not triggered for `TreeStore#removeAll()`\n        removeAll(silent) {\n            const res = superProto.removeAll.call(this, silent);\n            this.afterResourceRemoval();\n            return res;\n        }\n        afterResourceRemoval() {\n            const assignmentStore = this.getAssignmentStore();\n            if (assignmentStore && !assignmentStore.allAssignmentsForRemoval) {\n                const assignmentsForRemoval = [...this.assignmentsForRemoval].filter(assignment => !assignmentStore.assignmentsForRemoval.has(assignment));\n                assignmentsForRemoval.length > 0 && assignmentStore.remove(assignmentsForRemoval);\n            }\n            this.assignmentsForRemoval.clear();\n        }\n        processRecord(resourceRecord, isDataset = false) {\n            const existingRecord = this.getById(resourceRecord.id);\n            const isReplacing = existingRecord && existingRecord !== resourceRecord;\n            if (isReplacing) {\n                //@ts-ignore\n                for (const assignment of existingRecord.assigned || []) {\n                    assignment.resource = resourceRecord;\n                }\n            }\n            return resourceRecord;\n        }\n    }\n    return AbstractResourceStoreMixin;\n}) {\n}\n", "import { Mixin } from \"../../../ChronoGraph/class/BetterMixin.js\";\nimport { CorePartOfProjectStoreMixin } from \"./mixin/CorePartOfProjectStoreMixin.js\";\nimport { CoreResourceMixin } from \"../model/scheduler_core/CoreResourceMixin.js\";\nimport { AbstractResourceStoreMixin } from \"./AbstractResourceStoreMixin.js\";\n/**\n * A store mixin class, that represent collection of all resources in the [[SchedulerCoreProjectMixin|project]].\n */\nexport class CoreResourceStoreMixin extends Mixin([AbstractResourceStoreMixin, CorePartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreResourceStoreMixin extends base {\n        static get defaultConfig() {\n            return {\n                modelClass: CoreResourceMixin\n            };\n        }\n        joinProject() {\n            this.assignmentStore?.linkAssignments(this, 'resource');\n        }\n        afterLoadData() {\n            this.assignmentStore?.linkAssignments(this, 'resource');\n        }\n        clear(removing) {\n            superProto.clear.call(this, removing);\n            this.assignmentStore?.unlinkAssignments('resource');\n        }\n    }\n    return CoreResourceStoreMixin;\n}) {\n}\n", "import ResourceStoreMixin from './mixin/ResourceStoreMixin.js';\nimport ResourceModel from '../model/ResourceModel.js';\nimport AjaxStore from '../../Core/data/AjaxStore.js';\nimport PartOfProject from '../data/mixin/PartOfProject.js';\nimport { CoreResourceStoreMixin } from '../../Engine/quark/store/CoreResourceStoreMixin.js';\nimport PartOfBaseProject from './mixin/PartOfBaseProject.js';\nconst EngineMixin = PartOfProject(CoreResourceStoreMixin.derive(AjaxStore));\n/**\n * @module Scheduler/data/ResourceStore\n */\n/**\n * A store holding all the {@link Scheduler.model.ResourceModel resources} to be rendered into a\n * {@link Scheduler.view.Scheduler Scheduler}.\n *\n * This store only accepts a model class inheriting from {@link Scheduler.model.ResourceModel}.\n *\n * A ResourceStore is usually connected to a project, which binds it to other related stores (EventStore,\n * AssignmentStore and DependencyStore). The project also handles references (assignments, events) to related records\n * for the records in the store.\n *\n * Resolving the references happens async, records are not guaranteed to have up to date references until calculations\n * are finished. To be certain that references are resolved, call `await project.commitAsync()` after store actions. Or\n * use one of the `xxAsync` functions, such as `loadDataAsync()`.\n *\n * Using `commitAsync()`:\n *\n * ```javascript\n * resourceStore.data = [{ id }, ...];\n *\n * // references (assignments, events) not resolved yet\n *\n * await resourceStore.project.commitAsync();\n *\n * // now they are\n * ```\n *\n * Using `loadDataAsync()`:\n *\n * ```javascript\n * await resourceStore.loadDataAsync([{ id }, ...]);\n *\n * // references (assignments, events) are resolved\n * ```\n *\n * @mixes Scheduler/data/mixin/PartOfProject\n * @mixes Scheduler/data/mixin/ResourceStoreMixin\n * @extends Core/data/AjaxStore\n */\nexport default class ResourceStore extends ResourceStoreMixin(EngineMixin) {\n    static get defaultConfig() {\n        return {\n            modelClass : ResourceModel\n        };\n    }\n}\nResourceStore._$name = 'ResourceStore';", "import Base from '../../../Core/Base.js';\nimport Model from '../../../Core/data/Model.js';\nimport DateHelper from '../../../Core/helper/DateHelper.js';\nimport FunctionHelper from '../../../Core/helper/FunctionHelper.js';\n/**\n * @module Scheduler/data/mixin/EventStoreMixin\n */\n/**\n * This is a mixin, containing functionality related to managing events.\n *\n * It is consumed by the regular {@link Scheduler.data.EventStore} class and the Scheduler Pro's `EventStore` class.\n *\n * @mixin\n */\nexport default Target => class EventStoreMixin extends (Target || Base) {\n    static $name = 'EventStoreMixin';\n    /**\n     * Add events to the store.\n     *\n     * NOTE: Dates, durations and references (assignments, resources) on the events are determined async by a calculation\n     * engine. Thus they cannot be directly accessed after using this function.\n     *\n     * For example:\n     *\n     * ```javascript\n     * eventStore.add({ startDate, duration });\n     * // endDate is not yet calculated\n     * ```\n     *\n     * To guarantee data is in a calculated state, wait for calculations for finish:\n     *\n     * ```javascript\n     * eventStore.add({ startDate, duration });\n     * await eventStore.project.commitAsync();\n     * // endDate is calculated\n     * ```\n     *\n     * Alternatively use `addAsync()` instead:\n     *\n     * ```javascript\n     * await eventStore.addAsync({ startDate, duration });\n     * // endDate is calculated\n     * ```\n     *\n     * @param {Scheduler.model.EventModel|Scheduler.model.EventModel[]|EventModelConfig|EventModelConfig[]} records\n     * Array of records/data or a single record/data to add to store\n     * @param {Boolean} [silent] Specify `true` to suppress events\n     * @returns {Scheduler.model.EventModel[]} Added records\n     * @function add\n     * @category CRUD\n     */\n    /**\n     * Add events to the store and triggers calculations directly after. Await this function to have up to date data on\n     * the added events.\n     *\n     * ```javascript\n     * await eventStore.addAsync({ startDate, duration });\n     * // endDate is calculated\n     * ```\n     *\n     * @param {Scheduler.model.EventModel|Scheduler.model.EventModel[]|EventModelConfig|EventModelConfig[]} records\n     * Array of records/data or a single record/data to add to store\n     * @param {Boolean} [silent] Specify `true` to suppress events\n     * @returns {Scheduler.model.EventModel[]} Added records\n     * @function addAsync\n     * @category CRUD\n     * @async\n     */\n    /**\n     * Applies a new dataset to the EventStore. Use it to plug externally fetched data into the store.\n     *\n     * NOTE: Dates, durations and relations (assignments, resources) on the events are determined async by a calculation\n     * engine. Thus they cannot be directly accessed after assigning the new dataset.\n     *\n     * For example:\n     *\n     * ```javascript\n     * eventStore.data = [{ startDate, duration }];\n     * // eventStore.first.endDate is not yet calculated\n     * ```\n     *\n     * To guarantee data is in a calculated state, wait for calculations for finish:\n     *\n     * ```javascript\n     * eventStore.data = [{ startDate, duration }];\n     * await eventStore.project.commitAsync();\n     * // eventStore.first.endDate is calculated\n     * ```\n     *\n     * Alternatively use `loadDataAsync()` instead:\n     *\n     * ```javascript\n     * await eventStore.loadDataAsync([{ startDate, duration }]);\n     * // eventStore.first.endDate is calculated\n     * ```\n     *\n     * @member {EventModelConfig[]} data\n     * @category Records\n     */\n    /**\n     * Applies a new dataset to the EventStore and triggers calculations directly after. Use it to plug externally\n     * fetched data into the store.\n     *\n     * ```javascript\n     * await eventStore.loadDataAsync([{ startDate, duration }]);\n     * // eventStore.first.endDate is calculated\n     * ```\n     *\n     * @param {EventModelConfig[]} data Array of EventModel data objects\n     * @function loadDataAsync\n     * @category CRUD\n     * @async\n     */\n    /**\n     * Class used to represent records. Defaults to class EventModel.\n     * @member {Scheduler.model.EventModel} modelClass\n     * @typings {typeof EventModel}\n     * @category Records\n     */\n    static get defaultConfig() {\n        return {\n            /**\n             * CrudManager must load stores in the correct order. Lowest first.\n             * @private\n             */\n            loadPriority : 100,\n            /**\n             * CrudManager must sync stores in the correct order. Lowest first.\n             * @private\n             */\n            syncPriority : 200,\n            storeId : 'events',\n            /**\n             * Configure with `true` to also remove the event when removing the last assignment from the linked\n             * AssignmentStore. This config has not effect when using EventStore in legacy `resourceId`-mode.\n             * @config {Boolean}\n             * @default\n             * @category Common\n             */\n            removeUnassignedEvent : true,\n            /**\n             * Configure with `true` to force single-resource mode, an event can only be assigned to a single resource.\n             * If not provided, the mode will be inferred from\n             *\n             * 1. presence of an assignment store (i.e. multi-assignment)\n             * 2. presence of `resourceId` in the event store data (i.e. single assignment mode)\n             * @config {Boolean}\n             * @category Common\n             */\n            singleAssignment : null\n        };\n    }\n    //region Init & destroy\n    construct(config) {\n        super.construct(config);\n        this.autoTree = true;\n        if (this.singleAssignment) {\n            this.usesSingleAssignment = true;\n        }\n        if (!this.modelClass.isEventModel) {\n            throw new Error('The model for the EventStore must subclass EventModel');\n        }\n    }\n    //endregion\n    //region Events records, iteration etc.\n    set filtersFunction(filtersFunction) {\n        super.filtersFunction = filtersFunction;\n    }\n    get filtersFunction() {\n        // Generate the real filterFn.\n        const result = super.filtersFunction;\n        // We always filter *in* records which are being created by the UI.\n        if (result && result !== FunctionHelper.returnTrue) {\n            return r => r.isCreating || result(r);\n        }\n        return result;\n    }\n    /**\n     * Returns a `Map`, keyed by `YYYY-MM-DD` date keys containing event counts for all the days\n     * between the passed `startDate` and `endDate`. Occurrences of recurring events are included.\n     *\n     * Example:\n     *\n     * ```javascript\n     *  eventCounts = eventStore.getEventCounts({\n     *      startDate : scheduler.timeAxis.startDate,\n     *      endDate   : scheduler.timeAxis.endDate\n     *  });\n     * ```\n     *\n     * @param {Object} options An options object determining which events to return\n     * @param {Date} options.startDate The start date for the range of events to include.\n     * @param {Date} [options.endDate] The end date for the range of events to include.\n     * @category Events\n     */\n    getEventCounts(options) {\n        const\n            me     = this,\n            {\n                filtersFunction,\n                added\n            }      = me,\n            // Must use getEvents so that the loadDateRange event is triggered.\n            result = me.getEvents({\n                ...options,\n                storeFilterFn : me.isFiltered ? (me.reapplyFilterOnAdd ? filtersFunction : eventRecord => added.includes(eventRecord) ? me.indexOf(eventRecord) > -1 : filtersFunction(eventRecord)) : null,\n                dateMap       : options.dateMap || true\n            });\n        result.forEach((value, key) => result.set(key, value.length));\n        return result;\n    }\n    /**\n     * Calls the supplied iterator function once for every scheduled event, providing these arguments\n     * - event : the event record\n     * - startDate : the event start date\n     * - endDate : the event end date\n     *\n     * Returning false cancels the iteration.\n     *\n     * @param {Function} fn iterator function\n     * @param {Object} [thisObj] `this` reference for the function\n     * @category Events\n     */\n    forEachScheduledEvent(fn, thisObj = this) {\n        this.forEach(event => {\n            const { startDate, endDate } = event;\n            if (startDate && endDate) {\n                return fn.call(thisObj, event, startDate, endDate);\n            }\n        });\n    }\n    /**\n     * Returns an object defining the earliest start date and the latest end date of all the events in the store.\n     *\n     * @returns {Object} An object with 'startDate' and 'endDate' properties (or null values if data is missing).\n     * @category Events\n     */\n    getTotalTimeSpan() {\n        let earliest = new Date(9999, 0, 1),\n            latest   = new Date(0);\n        this.forEach(event => {\n            if (event.startDate) {\n                earliest = DateHelper.min(event.startDate, earliest);\n            }\n            if (event.endDate) {\n                latest = DateHelper.max(event.endDate, latest);\n            }\n        });\n        earliest = earliest < new Date(9999, 0, 1) ? earliest : null;\n        latest   = latest > new Date(0) ? latest : null;\n        // keep last calculated value to be able to track total timespan changes\n        return (this.lastTotalTimeSpan = {\n            startDate : earliest || null,\n            endDate   : latest || earliest || null\n        });\n    }\n    /**\n     * Checks if given event record is persistable. By default it always is, override EventModels `isPersistable` if you\n     * need custom logic.\n     *\n     * @param {Scheduler.model.EventModel} event\n     * @returns {Boolean}\n     * @category Events\n     */\n    isEventPersistable(event) {\n        return event.isPersistable;\n    }\n    //endregion\n    //region Resource\n    /**\n     * Checks if a date range is allocated or not for a given resource.\n     *\n     * Note that when asked to check a 0 duration range, any 0 duration events at the same point in time will be\n     * considered overlapping.\n     *\n     * @param {Date} start The start date\n     * @param {Date} end The end date\n     * @param {Scheduler.model.EventModel|null} excludeEvent An event to exclude from the check (or null)\n     * @param {Scheduler.model.ResourceModel} resource The resource\n     * @returns {Boolean} True if the timespan is available for the resource\n     * @category Resource\n     */\n    isDateRangeAvailable(start, end, excludeEvent, resource) {\n        // NOTE: Also exists in TaskStore.js\n        // Cannot assign anything to generated parents\n        if (resource.data.generatedParent) {\n            return false;\n        }\n        // This should be a collection of unique event records\n        const allEvents = new Set(this.getEventsForResource(resource));\n        // In private mode we can pass an AssignmentModel. In this case, we assume that multi-assignment is used.\n        // So we need to make sure that other resources are available for this time too.\n        // No matter if the event retrieved from the assignment belongs to the target resource or not.\n        // We gather all events from the resources the event is assigned to except of the one from the assignment record.\n        // Note, events from the target resource are added above.\n        if (excludeEvent?.isAssignment) {\n            const\n                currentEvent = excludeEvent.event,\n                resources    = currentEvent.resources;\n            resources.forEach(resource => {\n                // Ignore events for the resource which is passed as an AssignmentModel to excludeEvent\n                if (resource.id !== excludeEvent.resourceId) {\n                    this.getEventsForResource(resource).forEach(event => allEvents.add(event));\n                }\n            });\n        }\n        if (excludeEvent) {\n            const eventToRemove = excludeEvent.isAssignment ? excludeEvent.event : excludeEvent;\n            allEvents.delete(eventToRemove);\n        }\n        const all = Array.from(allEvents);\n        // Asked to check a 0 duration range, use different logic to consider 0 duration events at the same point in\n        // time as overlapping\n        if (start.getTime() === end.getTime()) {\n            return !all.some(event =>\n                event.isScheduled && (event.duration === 0\n                    // Same point in time for 0 duration events\n                    ? event.startDate.getTime() === start.getTime()\n                    // Normal overlap check for others\n                    : DateHelper.intersectSpans(start, end, event.startDate, event.endDate))\n            );\n        }\n        return !all.some(event => event.isScheduled && DateHelper.intersectSpans(start, end, event.startDate, event.endDate));\n    }\n    /**\n     * Filters the events associated with a resource, based on the function provided. An array will be returned for those\n     * events where the passed function returns true.\n     * @param {Scheduler.model.ResourceModel} resource\n     * @param {Function} fn The function\n     * @param {Object} [thisObj] `this` reference for the function\n     * @returns {Scheduler.model.EventModel[]} the events in the time span\n     * @private\n     * @category Resource\n     */\n    filterEventsForResource(resource, fn, thisObj = this) {\n        return resource.getEvents(this).filter(fn.bind(thisObj));\n    }\n    /**\n     * Returns all resources assigned to an event.\n     *\n     * @param {Scheduler.model.EventModel|String|Number} event\n     * @returns {Scheduler.model.ResourceModel[]}\n     * @category Resource\n     */\n    getResourcesForEvent(event) {\n        // If we are sent an occurrence, use its parent\n        if (event.isOccurrence) {\n            event = event.recurringTimeSpan;\n        }\n        return this.assignmentStore.getResourcesForEvent(event);\n    }\n    /**\n     * Returns all events assigned to a resource.\n     * *NOTE:* this does not include occurrences of recurring events. Use the\n     * {@link Scheduler/data/mixin/GetEventsMixin#function-getEvents} API to include occurrences of recurring events.\n     * @param {Scheduler.model.ResourceModel|String|Number} resource Resource or resource id.\n     * @returns {Scheduler.model.EventModel[]}\n     * @category Resource\n     */\n    getEventsForResource(resource) {\n        return this.assignmentStore.getEventsForResource(resource);\n    }\n    //endregion\n    //region Assignment\n    /**\n     * Returns all assignments for a given event.\n     *\n     * @param {Scheduler.model.EventModel|String|Number} event\n     * @returns {Scheduler.model.AssignmentModel[]}\n     * @category Assignment\n     */\n    getAssignmentsForEvent(event) {\n        return this.assignmentStore.getAssignmentsForEvent(event) || [];\n    }\n    /**\n     * Returns all assignments for a given resource.\n     *\n     * @param {Scheduler.model.ResourceModel|String|Number} resource\n     * @returns {Scheduler.model.AssignmentModel[]}\n     * @category Assignment\n     */\n    getAssignmentsForResource(resource) {\n        return this.assignmentStore.getAssignmentsForResource(resource) || [];\n    }\n    /**\n     * Creates and adds assignment record for a given event and a resource.\n     *\n     * @param {Scheduler.model.EventModel|String|Number} event\n     * @param {Scheduler.model.ResourceModel|String|Number|Scheduler.model.ResourceModel[]|String[]|Number[]} resource The resource(s) to assign to the event\n     * @param {Boolean} [removeExistingAssignments] `true` to first remove existing assignments\n     * @returns {Scheduler.model.AssignmentModel[]} An array with the created assignment(s)\n     * @category Assignment\n     */\n    assignEventToResource(event, resource, removeExistingAssignments = false) {\n        return this.assignmentStore.assignEventToResource(event, resource, undefined, removeExistingAssignments);\n    }\n    /**\n     * Removes assignment record for a given event and a resource.\n     *\n     * @param {Scheduler.model.EventModel|String|Number} event\n     * @param {Scheduler.model.ResourceModel|String|Number} resource\n     * @category Assignment\n     */\n    unassignEventFromResource(event, resource) {\n        this.assignmentStore.unassignEventFromResource(event, resource);\n    }\n    /**\n     * Reassigns an event from an old resource to a new resource\n     *\n     * @param {Scheduler.model.EventModel}    event    An event or id of the event to reassign\n     * @param {Scheduler.model.ResourceModel|Scheduler.model.ResourceModel[]} oldResource A resource or id to unassign from\n     * @param {Scheduler.model.ResourceModel|Scheduler.model.ResourceModel[]} newResource A resource or id to assign to\n     * @category Assignment\n     */\n    reassignEventFromResourceToResource(event, oldResource, newResource) {\n        const\n            me            = this,\n            newResourceId = Model.asId(newResource),\n            assignment    = me.assignmentStore.getAssignmentForEventAndResource(event, oldResource);\n        if (assignment) {\n            assignment.resourceId = newResourceId;\n        }\n        else {\n            me.assignmentStore.assignEventToResource(event, newResource);\n        }\n    }\n    /**\n     * Checks whether an event is assigned to a resource.\n     *\n     * @param {Scheduler.model.EventModel|String|Number} event\n     * @param {Scheduler.model.ResourceModel|String|Number} resource\n     * @returns {Boolean}\n     * @category Assignment\n     */\n    isEventAssignedToResource(event, resource) {\n        return this.assignmentStore.isEventAssignedToResource(event, resource);\n    }\n    /**\n     * Removes all assignments for given event\n     *\n     * @param {Scheduler.model.EventModel|String|Number} event\n     * @category Assignment\n     */\n    removeAssignmentsForEvent(event) {\n        this.assignmentStore.removeAssignmentsForEvent(event);\n    }\n    /**\n     * Removes all assignments for given resource\n     *\n     * @param {Scheduler.model.ResourceModel|String|Number} resource\n     * @category Assignment\n     */\n    removeAssignmentsForResource(resource) {\n        this.assignmentStore.removeAssignmentsForResource(resource);\n    }\n    //endregion\n    /**\n     * Appends a new record to the store\n     * @param {Scheduler.model.EventModel} record The record to append to the store\n     * @category CRUD\n     */\n    append(record) {\n        return this.add(record);\n    }\n    //region Project\n    get project() {\n        return super.project;\n    }\n    set project(project) {\n        super.project = project;\n        this.detachListeners('project');\n        if (project) {\n            // Project already has AssignmentStore instance? Attach to it.\n            if (project.assignmentStore?.isAssignmentStore) {\n                this.attachToAssignmentStore(project.assignmentStore);\n            }\n            // Accessing assignmentStore would trigger `assignmentStoreChange` event on the project, so we set up\n            // the listener after\n            project.ion({\n                name                  : 'project',\n                assignmentStoreChange : 'onProjectAssignmentStoreChange',\n                thisObj               : this,\n                prio                  : 200 // Before UI updates\n            });\n        }\n    }\n    //endregion\n    //region resource ids\n    get usesResourceIds() {\n        return this.modelClass.fieldMap?.resourceIds.persist ?? false;\n    }\n    //endregion\n    //region Single assignment\n    get usesSingleAssignment() {\n        if (this.isChained) {\n            return this.masterStore.usesSingleAssignment;\n        }\n        return this._usesSingleAssignment;\n    }\n    set usesSingleAssignment(value) {\n        this._usesSingleAssignment = value;\n        const { assignmentStore } = this;\n        // Use cheaper id generation for single assignment mode (no UUID needed)\n        if (assignmentStore?.isStore && !assignmentStore.hasGenerateIdOverride) {\n            // Normal fn on purpose, scope is AssignmentModel\n            assignmentStore.modelClass.generateId = function() {\n                if (this.singleAssignmentIdCounter == null) {\n                    this.singleAssignmentIdCounter = 0;\n                }\n                return `a-${++this.singleAssignmentIdCounter}`;\n            };\n            assignmentStore.hasGenerateIdOverride = true;\n        }\n    }\n    processRecords(eventRecords) {\n        const\n            { assignmentStore } = this,\n            assignmentsToAdd = [];\n        // Same as on `joinRecordsToStore`, when adding a number of event records CoreEventMixin#joinProject method\n        // will clear/rebuild cache in a loop. We raise this flag to skip invalidating assignment store indices for the time\n        // we are joining records to the store. When they're added and indices are read, we will invalidate them.\n        if (assignmentStore) {\n            assignmentStore.skipInvalidateIndices = true;\n        }\n        eventRecords = super.processRecords(eventRecords, assignmentStore && !this.stm?.isRestoring && (eventRecord => {\n            // AssignmentStore found, add an assignment to it if this is not a dataset operation\n            const resourceId = eventRecord.get('resourceId');\n            if (!eventRecord.reassignedFromReplace && resourceId != null) {\n                // Check if the event is already assigned to the resource, though it's not in the event store.\n                // It could happen when you remove an event, so both event and assignment records are removed,\n                // then you \"undo\" the action and the assignment is restored before the event is restored.\n                if (!assignmentStore.includesAssignment(eventRecord.id, resourceId)) {\n                    // Cannot use `event.assign(resourceId)` since event is not part of store yet\n                    // Using a bit shorter generated id to not look so ugly in DOM\n                    assignmentsToAdd.push({\n                        id      : assignmentStore.modelClass.generateId(''),\n                        resourceId,\n                        eventId : eventRecord.id\n                    });\n                }\n            }\n            // clear flag\n            eventRecord.reassignedFromReplace = false;\n        }) || undefined);\n        if (assignmentStore) {\n            assignmentStore.storage.invalidateIndices();\n            assignmentStore.skipInvalidateIndices = false;\n            assignmentStore.add(assignmentsToAdd);\n        }\n        return eventRecords;\n    }\n    joinRecordsToStore(records) {\n        const { assignmentStore } = this;\n        if (assignmentStore) {\n            // When adding a number of event records CoreEventMixin#joinProject method will clear/rebuild cache in a loop.\n            // We raise this flag to skip invalidating assignment store indices for the time we are joining records to\n            // the store. When they're added and indices are read, we will invalidate them.\n            assignmentStore.skipInvalidateIndices = true;\n            super.joinRecordsToStore(records);\n            assignmentStore.storage.invalidateIndices();\n            assignmentStore.skipInvalidateIndices = false;\n        }\n        else {\n            super.joinRecordsToStore(records);\n        }\n    }\n    processRecord(eventRecord, isDataset = false) {\n        eventRecord = super.processRecord(eventRecord, isDataset);\n        const\n            me              = this,\n            assignmentStore = me.assignmentStore ?? me.crudManager?.assignmentStore,\n            resourceId      = eventRecord.get('resourceId'),\n            { resourceIds } = eventRecord;\n        if (resourceIds?.length && eventRecord.meta.skipEnforcingSingleAssignment !== false && me.usesResourceIds) {\n            if (assignmentStore) {\n                assignmentStore.add(resourceIds\n                    .filter(resourceId => !assignmentStore.some(a => a.eventId === eventRecord.id && a.resourceId === resourceId))\n                    .map(resourceId => ({ resource : resourceId, event : eventRecord })));\n            }\n            else {\n                me.$processResourceIds = true;\n            }\n        }\n        else if (resourceId != null && !eventRecord.meta.skipEnforcingSingleAssignment) {\n            const\n                existingRecord      = me.getById(eventRecord.id),\n                isReplacing         = existingRecord && existingRecord !== eventRecord && !isDataset;\n            // Replacing an existing event, repoint the resource of its assignment\n            // (already repointed to the new event by engine in EventStoreMixin)\n            if (isReplacing) {\n                // Have to look assignment up on store, removed by engine in super call above\n                const assignmentSet = assignmentStore.storage.findItem('eventId', eventRecord.id);\n                if (assignmentSet?.size) {\n                    const assignment = assignmentSet.values().next().value;\n                    assignment.resource = resourceId;\n                    eventRecord.reassignedFromReplace = true;\n                }\n            }\n            // No AssignmentStore assigned yet, need to process when that happens. Or if it is a dataset operation,\n            // processing will happen at the end of it to not add individual assignment (bad for performance)\n            else {\n                me.$processResourceIds = true;\n            }\n            // Flag that we have been loaded using resourceId, checked by CrudManager to exclude the internal\n            // AssignmentStore from sync\n            me.usesSingleAssignment = true;\n        }\n        return eventRecord;\n    }\n    processResourceIds() {\n        const\n            me              = this,\n            // When used in a standalone CrudManager, there is no direct link to the assignment store\n            assignmentStore = me.assignmentStore ?? me.crudManager?.assignmentStore;\n        if (me.$processResourceIds && assignmentStore?.isAssignmentStore && !(me.project?.isSharingAssignmentStore && me.isChained)) {\n            const assignments = [];\n            // resourceIds used during initialization, convert into assignments (ignoring any filter)\n            me.forEach(eventRecord => {\n                const { resourceId, resourceIds, id : eventId } = eventRecord;\n                if (resourceId != null) {\n                    // Using a bit shorter generated id to not look so ugly in DOM\n                    assignments.push({\n                        id : assignmentStore.modelClass.generateId(''),\n                        resourceId,\n                        eventId\n                    });\n                }\n                else if (resourceIds?.length) {\n                    resourceIds.forEach(rId => {\n                        assignments.push({\n                            id         : assignmentStore.modelClass.generateId(''),\n                            resourceId : rId,\n                            eventId\n                        });\n                    });\n                }\n            }, me, { includeFilteredOutRecords : true });\n            // Disable as much as possible, since we are in full control of this store when using single assignment mode\n            assignmentStore.useRawData = {\n                disableDefaultValue     : true,\n                disableDuplicateIdCheck : true,\n                disableTypeConversion   : true\n            };\n            // Flag that throws in AssignmentStore if data is loaded some other way when using single assignment\n            assignmentStore.usesSingleAssignment = false;\n            // These assignments all use generated ids, and are not meant to be searialized anyway so bypass check\n            assignmentStore.verifyNoGeneratedIds = false;\n            assignmentStore.data = assignments;\n            assignmentStore.usesSingleAssignment = true;\n            me.$processResourceIds = false;\n        }\n    }\n    loadData() {\n        super.loadData(...arguments);\n        this.processResourceIds();\n    }\n    // Optionally remove unassigned events\n    onBeforeRemoveAssignment({ records }) {\n        const me = this;\n        if (\n            me.removeUnassignedEvent && !me.isRemoving && !me.isSettingData &&\n            !me.stm?.isRestoring && !me.usesSingleAssignment &&\n            // Do not remove unassigned events when syncing data, new assignments etc. might be synced afterwards\n            !me.assignmentStore.isSyncingDataOnLoad && !me.resourceStore.isSyncingDataOnLoad\n        ) {\n            const toRemove = new Set();\n            // Collect all events that are unassigned after the remove\n            records.forEach(assignmentRecord => {\n                const { event } = assignmentRecord;\n                // Assignment might not have an event or the event might already be removed\n                if (event && !event.isRemoved && event.assignments.every(a => records.includes(a))) {\n                    toRemove.add(event);\n                }\n            });\n            // And remove them\n            if (toRemove.size) {\n                me.remove([...toRemove]);\n            }\n        }\n    }\n    onProjectAssignmentStoreChange({ store }) {\n        this.attachToAssignmentStore(store);\n    }\n    attachToAssignmentStore(assignmentStore) {\n        const me = this;\n        me.detachListeners('assignmentStore');\n        if (assignmentStore) {\n            me.processResourceIds();\n            assignmentStore.ion({\n                name : 'assignmentStore',\n                // Adding an assignment in single assignment mode should set events resourceId if needed,\n                // otherwise it should set events resourceIds (if persistable)\n                addPreCommit({ records }) {\n                    if (!me.isSettingData && !me.isAssigning) {\n                        if (me.usesSingleAssignment) {\n                            records.forEach(assignment => {\n                                const { event } = assignment;\n                                if (event?.isEvent && event.resourceId !== assignment.resourceId) {\n                                    event.meta.isAssigning = true;\n                                    event.set('resourceId', assignment.resourceId);\n                                    event.meta.isAssigning = false;\n                                }\n                            });\n                        }\n                        else if (me.usesResourceIds) {\n                            records.forEach(assignment => {\n                                const { event } = assignment;\n                                if (event?.isEvent) {\n                                    event.meta.isAssigning = true;\n                                    const resourceIds = event.resourceIds ?? [];\n                                    if (!resourceIds.includes(assignment.resourceId)) {\n                                        event.resourceIds = [...resourceIds, assignment.resourceId];\n                                    }\n                                    event.meta.isAssigning = false;\n                                }\n                            });\n                        }\n                    }\n                },\n                // Called both for remove and removeAll\n                beforeRemove : 'onBeforeRemoveAssignment',\n                // Removing an assignment in single assignment mode should set events resourceId to null,\n                // otherwise it should set events resourceIds to an empty array\n                removePreCommit({ records }) {\n                    if (!me.isSettingData && !me.isAssigning) {\n                        if (me.usesSingleAssignment) {\n                            records.forEach(assignment => {\n                                // With engine link to event is already broken when we get here, hence the lookup\n                                me.getById(assignment.eventId)?.set('resourceId', null);\n                            });\n                        }\n                        else if (me.usesResourceIds) {\n                            records.forEach(({ event, resourceId }) => {\n                                const\n                                    resourceIds     = event.resourceIds.slice(),\n                                    indexToRemove   = resourceIds?.indexOf(resourceId);\n                                if (indexToRemove >= 0) {\n                                    resourceIds.splice(indexToRemove, 1);\n                                    event.resourceIds = resourceIds;\n                                }\n                            });\n                        }\n                    }\n                },\n                removeAllPreCommit() {\n                    if (!me.isSettingData && !me.isAssigning) {\n                        if (me.usesSingleAssignment) {\n                            me.allRecords.forEach(eventRecord => eventRecord.set('resourceId', null));\n                        }\n                        else if (me.usesResourceIds) {\n                            me.allRecords.forEach(eventRecord => {\n                                eventRecord.resourceIds = [];\n                            });\n                        }\n                    }\n                },\n                // Keep events resourceId and resourceIds in sync with assignment on changes\n                update({ record, changes }) {\n                    if ('resourceId' in changes) {\n                        const { event } = record;\n                        if (me.usesSingleAssignment) {\n                            event.meta.isAssigning = true;\n                            event.set('resourceId', changes.resourceId.value);\n                            event.meta.isAssigning = false;\n                        }\n                        else if (me.usesResourceIds) {\n                            event.meta.isAssigning = true;\n                            const\n                                resourceIds     = event.resourceIds.slice(),\n                                indexToRemove   = resourceIds?.indexOf(changes.resourceId.oldValue);\n                            if (indexToRemove >= 0) {\n                                resourceIds.splice(indexToRemove, 1);\n                            }\n                            if (!resourceIds?.includes(changes.resourceId.value)) {\n                                resourceIds.push(changes.resourceId.value);\n                                event.resourceIds = resourceIds;\n                            }\n                            event.meta.isAssigning = false;\n                        }\n                    }\n                },\n                // Keep events resourceIds in sync with assignment on dataset loading\n                change({ action, records }) {\n                    if (action === 'dataset' && me.usesResourceIds) {\n                        records.forEach(({ event, resourceId }) => {\n                            const resourceIds = event.resourceIds ?? [];\n                            if (!resourceIds.includes(resourceId)) {\n                                resourceIds.push(resourceId);\n                                event.meta.isAssigning = true;\n                                event.setData('resourceIds', resourceIds);\n                                event.meta.isAssigning = false;\n                            }\n                        });\n                    }\n                },\n                thisObj : me\n            });\n        }\n    }\n    set data(data) {\n        this.isSettingData = true;\n        // When using single assignment, remove all assignments when loading a new set of events.\n        // Don't do it when filling a chained store, assignments are for the master store\n        if (this.usesSingleAssignment && !this.syncDataOnLoad && !this.isChained) {\n            this.assignmentStore.removeAll(true);\n        }\n        super.data = data;\n        this.isSettingData = false;\n    }\n    // Override trigger to decorate update/change events with a flag if resourceId was the only thing changed, in which\n    // case the change most likely can be ignored since the assignment will also change\n    trigger(eventName, params) {\n        const { changes } = params || {};\n        // https://github.com/bryntum/support/issues/6610\n        // test: SchedulerPro/tests/data/UndoRedo.t.js, \"Should refresh the view after undoing the event copy-paste\"\n        // can not ignore this event when stm is restoring, because of the edge case in that ticket\n        if (changes && 'resourceId' in changes && Object.keys(changes).length === 1 && !this.stm?.isRestoring) {\n            params.isAssign = true;\n        }\n        return super.trigger(...arguments);\n    }\n    remove(records, ...args) {\n        const result = super.remove(records, ...args);\n        // Make sure assignment is removed with event when using single assignment\n        if (result.length && this.usesSingleAssignment) {\n            for (const eventRecord of result) {\n                if (!eventRecord.isOccurrence) {\n                    (this.assignmentStore || this.crudManager?.assignmentStore)?.remove(eventRecord.assignments, true);\n                }\n            }\n        }\n        return result;\n    }\n    //endregion\n};\n", "import DateHelper from '../../../Core/helper/DateHelper.js';\nimport Objects from '../../../Core/helper/util/Objects.js';\n/**\n * @module Scheduler/data/mixin/GetEventsMixin\n */\nconst\n    returnTrue   = () => true,\n    notRecurring = event => !event.isRecurring;\n/**\n * Mixing containing functionality for retrieving a range of events, mainly used during rendering.\n *\n * Consumed by EventStore in Calendar, Scheduler & Scheduler Pro and TaskStore in Gantt.\n *\n * @mixin\n */\nexport default Target => class GetEventsMixin extends Target {\n    static $name = 'GetEventsMixin';\n    /**\n     * Returns an array of events for the date range specified by the `startDate` and `endDate` options.\n     *\n     * By default, for any date, this includes any event which *intersects* that date.\n     *\n     * To only include events that are fully contained *within* the date range, pass the `allowPartial`\n     * option as `false`.\n     *\n     * By default, any occurrences of recurring events are included in the resulting array (not applicable in Gantt). If\n     * that is not required, pass the `includeOccurrences` option as `false`. **Note that if `includeOccurrences` is\n     * `true`, the start date and end date options are mandatory. The method must know what range of occurrences needs\n     * to be generated and returned.**\n     *\n     * Example:\n     *\n     * ```javascript\n     *  visibleEvents = eventStore.getEvents({\n     *      resourceRecord : myResource,\n     *      startDate      : scheduler.timeAxis.startDate,\n     *      endDate        : scheduler.timeAxis.endDate\n     *  });\n     * ```\n     *\n     * @param {Object} options An options object determining which events to return\n     * @param {Date} [options.date] If only one date is required, pass this option instead of the\n     * `startDate` and `endDate` options.\n     * @param {Date} options.startDate The start date for the range of events to include.\n     * @param {Date} [options.endDate] The end date for the range of events to include.\n     * @param {Scheduler.model.ResourceModel} [options.resourceRecord] Pass a resource to only return events assigned to\n     *   this resource. Not supported when using the `dateMap` option (see below)\n     * @param {Function} [options.filter] A function to filter out events which are not required.\n     * @param {Boolean} [options.ignoreFilters] By default, store filters are honoured. Pass this\n     * as `true` to include filtered out events.\n     * @param {Boolean} [options.includeOccurrences=true] Occurrences of recurring events are included by default.\n     * @param {Boolean} [options.allowPartial=true] Events which start before or after the range, but *intersect* the\n     *   range are included by default.\n     * @param {Boolean} [options.startOnly] Pass `true` to only include events which *start on* each date in the range.\n     * @param {Boolean} [options.onlyAssigned] Pass `true` to only include events that are assigned to a resource\n     * @param {Boolean|Map} [options.dateMap] Populates the passed `Map`, or if passed as `true`, creates and\n     * returns a new `Map`. The keys are `YYYY-MM-DD` date strings and the entries are arrays of\n     * {@link Scheduler.model.EventModel EventModel}s.\n     * @returns {Scheduler.model.EventModel[]|Map} Events which match the passed configuration.\n     * @category Events\n     */\n    getEvents({\n        filter,\n        date,\n        startDate,                  // Events which intersect the startDate/endDate\n        endDate,                    // will be returned\n        startOnly,                  // Only events which start on each date will be returned\n        includeOccurrences,         // Interpolate occurrences into the returned event set\n        allowPartial,               // Include events which *intersect* the date range\n        onlyAssigned = false,       // Only include events that are assigned to a resource\n        dateMap = false,            // Return a Map keyed by date each value being an array of events\n        dayTime = null,\n        // Private option. Select which date index to look up events in depending on the date\n        // we are examining in the date iteration process. Some callers may want to use\n        // different indices depending on the stage through the date iteration.\n        // See Calendar package for usage.\n        getDateIndex\n    }) {\n        const\n            me                = this,\n            options           = arguments[0],\n            {\n                lastDateRange,\n                added,\n                filtersFunction\n            } = me,\n            passedFilter      = filter;\n        // Add filtering for only assigned events if requested.\n        if (onlyAssigned) {\n            options.filter = passedFilter ? e => passedFilter(e) && e.resources.length : e => e.resources.length;\n        }\n        // Note that we cannot use defaulting in the argument block because we pass\n        // the incoming options object down into implementations.\n        if (!('startDate' in options)) {\n            startDate = options.startDate = date;\n        }\n        if (!('includeOccurrences' in options)) {\n            includeOccurrences = options.includeOccurrences = true;\n        }\n        if (!('allowPartial' in options)) {\n            allowPartial = options.allowPartial = !startOnly;\n        }\n        // We can't use me.filtersFunction if reapplyFilterOnAdd is false because there may be newly\n        // added events which may not be subject to the filter. Records which are still in\n        // the added bag must be tested for presence using indexOf so as to be always in sync\n        // with the store being refiltered. Parens help readability.\n        // Don't use the store's filtering function if we were asked to ignore filters.\n        // eslint-disable-next-line no-extra-parens\n        options.storeFilterFn = me.isFiltered && !options.ignoreFilters ? (me.reapplyFilterOnAdd ? filtersFunction : (eventRecord => added.includes(eventRecord) ? me.indexOf(eventRecord) > -1 : filtersFunction(eventRecord))) : null;\n        // Default to a one day range if only startDate passed\n        if (!endDate) {\n            if (startDate) {\n                endDate = options.endDate = DateHelper.clearTime(startDate);\n                endDate.setDate(endDate.getDate() + 1);\n            }\n            // If no dates passed, the dateFilter will include all.\n            else {\n                // We need to know what occurrences to generate.\n                if (includeOccurrences) {\n                    throw new Error('getEvents MUST be passed startDate and endDate if recurring occurrences are requested');\n                }\n                options.dateFilter = returnTrue;\n            }\n        }\n        if (!options.dateFilter) {\n            // Must start in the date range\n            if (startOnly) {\n                options.dateFilter = e => {\n                    // Avoid hitting getter twice. Use batched value if present.\n                    const eventStartDate = e.hasBatchedChange('startDate') ? e.get('startDate') : e.startDate;\n                    return eventStartDate && !(DateHelper.clearTime(eventStartDate) - startDate);\n                };\n            }\n            // Any intersection with our date range\n            else if (allowPartial) {\n                options.dateFilter = e => {\n                    // Avoid hitting getter twice. Use batched value if present.\n                    const\n                        eventStartDate = e.hasBatchedChange('startDate') ? e.get('startDate') : e.startDate,\n                        eventEndDate   = e.hasBatchedChange('endDate') ? e.get('endDate') : e.endDate || eventStartDate,\n                        isMilestone    = !(eventStartDate - eventEndDate);\n                    return eventStartDate && (isMilestone ? DateHelper.betweenLesserEqual(eventStartDate, startDate, endDate) : DateHelper.intersectSpans(eventStartDate, eventEndDate, startDate, endDate));\n                };\n            }\n            // Must be wholly contained with the our range\n            else {\n                options.dateFilter = e => {\n                    // Avoid hitting getter twice. Use batched value if present.\n                    const\n                        eventStartDate = e.hasBatchedChange('startDate') ? e.get('startDate') : e.startDate,\n                        eventEndDate   = e.hasBatchedChange('endDate') ? e.get('endDate') : e.endDate || eventStartDate;\n                    return eventStartDate && eventStartDate >= startDate && eventEndDate <= endDate;\n                };\n            }\n        }\n        const newDateRange = {\n            startDate,\n            endDate\n        };\n        // Ensure the listeners are present\n        me.processConfiguredListeners();\n        /**\n         * Fired when a range of events is requested from the {@link #function-getEvents} method.\n         *\n         * <div class=\"note\">\n         * This event fires <span style=\"font-weight:bold\">every time</span> a range of events is\n         * requested from the store.\n         * </div>\n         *\n         * An application may have one of two levels of interest in events being read from a store.<br>\n         *\n         * 1.  To be notified when <span style=\"font-weight:bold\">any</span> event block is requested regardless of what the\n         * date range is.\n         * 2.  To be notified when a <span style=\"font-weight:bold\">new date range</span> is requested.\n         *\n         * This event allows both types of application to be written. The `changed` property is\n         * set if a different date range is requested.\n         *\n         * ```javascript\n         * new Scheduler({\n         *     eventStore : {\n         *         listeners : {\n         *             loadDateRange({ new : { startDate, endDate }, changed }) {\n         *                 // Load new data if user is requesting a different time window.\n         *                 if (changed) {\n         *                     fetch(...);\n         *                 }\n         *             }\n         *         }\n         *     },\n         *     ...\n         * });\n         * ```\n         *\n         * @event loadDateRange\n         * @param {Scheduler.data.EventStore} source This EventStore\n         * @param {Object} old The old date range\n         * @param {Date} old.startDate the old start date.\n         * @param {Date} old.endDate the old end date.\n         * @param {Object} new The new date range\n         * @param {Date} new.startDate the new start date.\n         * @param {Date} new.endDate the new end date.\n         * @param {Boolean} changed `true` if the date range is different from the last time a request was made.\n         */\n        me.trigger('loadDateRange', {\n            old     : lastDateRange || {},\n            new     : Objects.clone(newDateRange),\n            changed : Boolean(!lastDateRange || (lastDateRange.startDate - newDateRange.startDate || lastDateRange.endDate - newDateRange.endDate))\n        });\n        // Dates are mutable, so we must keep our own copy.\n        me.lastDateRange = Objects.clone(newDateRange);\n        return dateMap ? me.getEventsAsMap(options) : me.getEventsAsArray(options);\n    }\n    /**\n     * Internal implementation for {@link #function-getEvents} to use when not using dateMap.\n     * @private\n     */\n    getEventsAsArray({\n        filter,\n        date,\n        resourceRecord,\n        startDate = date,           // Events which intersect the startDate/endDate\n        endDate,                    // will be returned\n        startOnly,                  // Only events which start on each date will be returned\n        includeOccurrences = true,  // Interpolate occurrences into the returned event set\n        dayTime = null,\n        // Injected by the getEvents master method\n        dateFilter,\n        storeFilterFn,\n        // Private option. Select which date index to look up events in depending on the date\n        // we are examining in the date iteration process. Some callers may want to use\n        // different indices depending on the stage through the date iteration.\n        // See Calendar package for usage.\n        getDateIndex\n    }) {\n        const\n            me     = this,\n            events = [],\n            count  = storeFilterFn ? me.count : me.allCount;\n        if (count) {\n            let candidateEvents = resourceRecord ? me.getEventsForResource(resourceRecord) : null;\n            // If there *was* a resourceRecord, candidateEvents will already be set up using me.getEventsForResource.\n            // If no resourceRecord specified, we are gathering by date, so use the indices.\n            if (!resourceRecord) {\n                const\n                    dateIndex = me.useDayIndex(dayTime),\n                    eventSet  = new Set(),\n                    indexName = startOnly ? 'startDate' : 'date';\n                // Add all recurring events which started on or before our date range.\n                me.recurringEvents.forEach(e => {\n                    if (dateIndex.dayTime.startOfDay(e.startDate) <= startDate) {\n                        eventSet.add(e);\n                    }\n                });\n                // Iterate the date range, using the indices to find qualified events.\n                for (const date = new Date(startDate); date < endDate; date.setDate(date.getDate() + 1)) {\n                    const coincidingEvents = dateIndex.get(getDateIndex ? getDateIndex(date) : indexName, date);\n                    coincidingEvents?.forEach(e => eventSet.add(e));\n                }\n                // We gathered all events which *coincide* with each date.\n                // We also added in all recurring events which started on or before our date range.\n                // All these were made unique by the Set.\n                // Return it to array form.\n                candidateEvents = [...eventSet];\n            }\n            // Events found from the date indices won't be filtered.\n            // On the other side, when using getEventForResource we will get all events for\n            // the resource even if the EventStore is filtered, handle this by excluding \"invisible\" events here\n            if (storeFilterFn) {\n                candidateEvents = candidateEvents.filter(storeFilterFn);\n            }\n            // Go through candidates.\n            // For a recurring event, and we are including recurrences, add date-qualifying occurrences.\n            // For a non-recurring event, add it if it's date-qualified.\n            for (let i = 0, { length } = candidateEvents; i < length; i++) {\n                const e = candidateEvents[i];\n                // For recurring events, add date-qualifying occurrences, not the base\n                if (includeOccurrences && e.isRecurring) {\n                    events.push.apply(events, e.getOccurrencesForDateRange(startDate, endDate).filter(dateFilter));\n                }\n                // For ordinary events, add if it's date-qualified\n                else if (dateFilter(e)) {\n                    events.push(e);\n                }\n            }\n        }\n        return filter ? events.filter(filter) : events;\n    }\n    /**\n     * Internal implementation for {@link #function-getEvents} to use when using dateMap.\n     * @private\n     */\n    getEventsAsMap({\n        filter : passedFilter,\n        date,\n        resourceRecord,             // Not supported yet. Will add if ever requested.\n        startDate = date,           // Events which intersect the startDate/endDate\n        endDate,                    // will be returned\n        startOnly,                  // Only events which start on each date will be returned\n        includeOccurrences = true,  // Interpolate occurrences into the returned event set\n        dateMap,                    // Return a Map keyed by date each value being an array of events\n        dayTime = null,\n        storeFilterFn,\n        // Private option. Select which date index to look up events in depending on the date\n        // we are examining in the date iteration process. Some callers may want to use\n        // different indices depending on the stage through the date iteration.\n        // See Calendar package for usage.\n        getDateIndex\n    }) {\n        const me = this;\n        // Convert `true` to a Map.\n        if (dateMap?.clear) {\n            dateMap.clear();\n        }\n        else {\n            dateMap = new Map();\n        }\n        if (me.count) {\n            const\n                dateIndex       = me.useDayIndex(dayTime),\n                indexName       = startOnly ? 'startDate' : 'date',\n                recurringEvents = [],\n                filter          = e => (!passedFilter || passedFilter(e)) && (!storeFilterFn || storeFilterFn(e)),\n                baseEventFilter = e => notRecurring(e) && filter(e);\n            dayTime = dateIndex.dayTime;  // dayTime=null becomes DayTime instance for midnight\n            // We can't yet do this for just a resource.\n            if (resourceRecord) {\n                throw new Error('Querying for events for a resource and returning a date-keyed Map is not supported');\n            }\n            else {\n                // Add all recurring events which started before the end of our date range.\n                // There are none in Gantt projects\n                me.recurringEvents?.forEach(e => {\n                    if (dayTime.startOfDay(e.startDate) < endDate) {\n                        recurringEvents.push(e);\n                    }\n                });\n                // Iterate the date range, using the indices to find qualified events.\n                for (const date = new Date(startDate); date < endDate; date.setDate(date.getDate() + 1)) {\n                    let [coincidingEvents, key] = dateIndex.get(getDateIndex ? getDateIndex(date) : indexName, date, true);\n                    // The index entry may be there, but it could be empty.\n                    if (coincidingEvents?.size) {\n                        // Convert Set which index holds into an Array.\n                        // A recurring event doesn't go into the Map, its occurrences do.\n                        // Then filter by the passed filter and this Store's filter function\n                        // because events found from the date indices won't be filtered.\n                        coincidingEvents = [...coincidingEvents].filter(baseEventFilter);\n                        // Only create the entry for the day if there are events found\n                        if (coincidingEvents.length) {\n                            (dateMap.get(key) || (dateMap.set(key, []).get(key))).push(...coincidingEvents);\n                        }\n                    }\n                }\n            }\n            // Go through matching recurring events.\n            for (let i = 0, { length } = recurringEvents; i < length; i++) {\n                const\n                    e = recurringEvents[i],\n                    // For each recurring event, add occurrences if we are including occurrences else, add the base.\n                    // Then filter by the passed filter and this Store's filter function\n                    // because events found from the date indices won't be filtered.\n                    occurrences = (includeOccurrences ? e.getOccurrencesForDateRange(startDate, endDate) : [e]).filter(filter),\n                    lastDate    = DateHelper.add(endDate, 1, 'day');\n                // Add occurrences to dateMap\n                for (let bucket, i = 0, { length } = occurrences; i < length; i++) {\n                    const\n                        occurrence = occurrences[i],\n                        date = dayTime.startOfDay(occurrence.startDate),\n                        indexName = getDateIndex ? getDateIndex(date) : (startOnly ? 'startDate' : 'date'),\n                        lastIntersectingDate = (indexName === 'startDate') || !occurrence.durationMS\n                            ? DateHelper.add(date, 1, 'day')\n                            : DateHelper.min(occurrence.endDate || DateHelper.add(occurrence.startDate, occurrence.duration, occurrence.durationUnit), lastDate);\n                    // Loop through covered dates, adding to dateMap if required\n                    for (; date < lastIntersectingDate; date.setDate(date.getDate() + 1)) {\n                        const key = dayTime.dateKey(date);\n                        (bucket = dateMap.get(key)) || dateMap.set(key, bucket = []);\n                        bucket.push(occurrence);\n                    }\n                }\n            }\n        }\n        return dateMap;\n    }\n};\n", "import DayTime from '../../../Core/util/DayTime.js';\n/**\n * @module Scheduler/data/util/EventDayIndex\n */\nconst\n    // Maps an index name that can be requested to its storage property on the EventDayIndex instance:\n    indexNameMap = {\n        date      : '_dateIndex',\n        startDate : '_startDateIndex'\n    },\n    indexProps         = Object.values(indexNameMap),\n    emptyArray         = Object.freeze([]),\n    { MILLIS_PER_DAY } = DayTime;\n/**\n * This utility class is used by event stores to index events by their day (a \"YYYY-MM-DD\" value, also known as a\n * \"date key\"). This key is produced by a {@link Core.util.DayTime} instance. If two `DayTime` instances have a common\n * `startShift`, they can share an index.\n *\n * @internal\n */\nexport default class EventDayIndex {\n    constructor(store, dayTime) {\n        /**\n         * The `DayTime` definition for this index. This is set to the initial DayTime instance but can be used for\n         * any other {@link #function-register registered} `DayTime` instances since they all posses the same value for\n         * `startShift`.\n         *\n         * This defaults to {@link Core.util.DayTime#property-MIDNIGHT-static}.\n         * @member {Core.util.DayTime} dayTime\n         * @readonly\n         */\n        this.dayTime = dayTime || DayTime.MIDNIGHT;\n        /**\n         * The owning store instance of this index.\n         * @member {Scheduler.data.EventStore} store\n         * @private\n         * @readonly\n         */\n        this.store = store;\n        /**\n         * The `DayTime` instances {@link #function-register registered} with this index instance. As instances are\n         * {@link #function-unregister unregistered} they are removed from this array. Once this array is empty, this\n         * index can be discarded.\n         * @member {Core.util.DayTime[]} users\n         * @private\n         */\n        this.users = [this.dayTime];\n    }\n    /**\n     * Adds an event record to the specified index (either \"startDate\" or \"date\") for a given `date`.\n     * @param {String} indexName The index to which the event record is to be added (either \"startDate\" or \"date\").\n     * @param {Date|Number} date A date for which the event record overlaps. The {@link Core.util.DayTime#function-dateKey}\n     * method is used to convert this date to a \"YYYY-MM-DD\" key for the index.\n     * @param {Scheduler.model.EventModel} eventRecord The event record.\n     * @private\n     */\n    add(indexName, date, eventRecord) {\n        const\n            index    = this[indexNameMap[indexName]],\n            key      = this.dayTime.dateKey(date),\n            entry    = index[key] || (index[key] = new Set());\n        entry.add(eventRecord);\n    }\n    /**\n     * Adds an event record to all indexes for all dates which the event overlaps.\n     * @param {Scheduler.model.EventModel} eventRecord The event record.\n     * @private\n     */\n    addEvent(eventRecord) {\n        let dateMS = this.dayTime.startOfDay(eventRecord.startDate)?.getTime(),\n            endDateMS;\n        if (dateMS) {\n            endDateMS = eventRecord.endDate?.getTime() ?? dateMS;\n            this.add('startDate', dateMS, eventRecord);\n            do {\n                this.add('date', dateMS, eventRecord);\n                dateMS += MILLIS_PER_DAY;\n            } while (dateMS < endDateMS);\n        }\n    }\n    /**\n     * Clear this index.\n     */\n    clear() {\n        indexProps.forEach(name => this[name] = Object.create(null));\n    }\n    /**\n     * Returns an object that has properties named by the {@link Core.util.DayTime#function-dateKey} method, or the\n     * array of event records if a `date` is specified, or the event record array and the date key in a 2-element array\n     * if `returnKey` is `true`.\n     * @param {String} indexName The name of the desired index (either 'date' or 'startDate').\n     * @param {Number|Date} date The date as a `Date` or the millisecond UTC epoch. When passed, this method will return\n     * the array of event records for this date.\n     * @param {Boolean} [returnKey] Specify `true` to return the date key along with the event record array.\n     * @returns {Object|Scheduler.model.EventModel[]}\n     */\n    get(indexName, date, returnKey) {\n        // Date indices are created on first usage and after that kept up to date on changes\n        !this.initialized && this.initialize();\n        let ret = this[indexNameMap[indexName]],\n            key;\n        if (date) {\n            key = this.dayTime.dateKey(date);\n            ret = returnKey ? [ret[key], key] : ret[key];\n        }\n        return ret;\n    }\n    /**\n     * Called when this index is first used. Once called, further store changes will be used to maintain this index.\n     * @private\n     */\n    initialize() {\n        this.initialized = true;\n        this.clear();\n        this.sync('splice', this.store.storage.allValues);\n    }\n    invalidate() {\n        this.initialized = false;\n        indexProps.forEach(name => this[name] = null);\n    }\n    /**\n     * Returns `true` if the given `dayTime` matches this index.\n     * @param {Core.util.DayTime} dayTime\n     * @returns {Boolean}\n     */\n    matches(dayTime) {\n        return this.dayTime.startShift === dayTime.startShift;\n    }\n    /**\n     * Removes an event record from the specified index (either \"startDate\" or \"date\") for a given `date`.\n     * @param {String} indexName The index to which the event record is to be removed (either \"startDate\" or \"date\").\n     * @param {Date|Number} date A date for which the event record overlaps. The {@link Core.util.DayTime#function-dateKey}\n     * method is used to convert this date to a \"YYYY-MM-DD\" key for the index.\n     * @param {Scheduler.model.EventModel} eventRecord The event record.\n     * @private\n     */\n    remove(indexName, date, eventRecord) {\n        const\n            index = this[indexNameMap[indexName]],\n            key   = this.dayTime.dateKey(date),\n            entry = index[key];\n        if (entry) {\n            entry.delete(eventRecord);\n        }\n    }\n    /**\n     * Removes an event record from all indexes for all dates which the event overlaps.\n     * @param {Scheduler.model.EventModel} eventRecord The event record.\n     * @param {Date} startDate The start date for the event. This may be different from the `startDate` of the given\n     * `eventRecord` when the event is rescheduled.\n     * @param {Date} endDate The end date for the event. This may be different from the `endDate` of the given\n     * `eventRecord` when the event is rescheduled.\n     * @private\n     */\n    removeEvent(eventRecord, startDate, endDate) {\n        let dateMS = this.dayTime.startOfDay(startDate)?.getTime(),\n            endDateMS;\n        if (dateMS) {\n            endDateMS = endDate?.getTime() ?? dateMS;\n            this.remove('startDate', dateMS, eventRecord);\n            do {\n                this.remove('date', dateMS, eventRecord);\n                dateMS += MILLIS_PER_DAY;\n            } while (dateMS < endDateMS);\n        }\n    }\n    sync(action, added, removed, replaced, wasSet) {\n        added = added || emptyArray;\n        removed = removed || emptyArray;\n        const\n            me            = this,\n            addedCount    = added.length,\n            removedCount  = removed.length,\n            replacedCount = replaced?.length;\n        let i, newEvent, outgoingEvent;\n        if (!me.initialized) {\n            return;\n        }\n        switch (action) {\n            case 'clear':\n                me.clear();\n                break;\n            // Add and remove\n            case 'splice':\n                // Handle replacement of records by instances with same ID\n                if (replacedCount) {\n                    added = added.slice();\n                    removed = removed.slice();\n                    for (i = 0; i < replacedCount; i++) {\n                        removed.push(replaced[i][0]);\n                        added.push(replaced[i][1]);\n                    }\n                }\n                // Remove entries from indices\n                if (removedCount) {\n                    for (i = 0; i < removedCount; i++) {\n                        outgoingEvent = removed[i];\n                        me.removeEvent(outgoingEvent, outgoingEvent.startDate, outgoingEvent.endDate);\n                    }\n                }\n                // Add entries to indices\n                if (addedCount) {\n                    for (i = 0; i < addedCount; i++) {\n                        newEvent = added[i];\n                        // Can only be date-indexed if it's scheduled.\n                        // Also ignore parent events (likely using a Gantt project)\n                        if (newEvent.isScheduled && !newEvent.isParent) {\n                            me.addEvent(newEvent);\n                        }\n                    }\n                }\n                break;\n            // invoked when the start or end changes so that the event can be re-indexed.\n            case 'reschedule':\n                outgoingEvent = added[0];\n                me.removeEvent(outgoingEvent, wasSet.startDate?.oldValue || outgoingEvent.startDate,\n                    wasSet.endDate?.oldValue || outgoingEvent.endDate);\n                // Now process as a splice with an add and no removes.\n                me.sync('splice', added);\n                break;\n        }\n    }\n    /**\n     * This method registers a `dayTime` instance with this index in the `users` array.\n     * @param {Core.util.DayTime} dayTime The instance to register.\n     */\n    register(dayTime) {\n        this.users.push(dayTime);\n    }\n    /**\n     * This method unregisters a `dayTime` instance, removing it from the `users` array. This method returns `true` if\n     * this was the last registered instance and this index is no longer needed.\n     * @param {Core.util.DayTime} dayTime The instance to register.\n     * @returns {Boolean}\n     */\n    unregister(dayTime) {\n        const\n            { users } = this,\n            i = users.indexOf(dayTime);\n        if (i > -1) {\n            users.splice(i, 1);\n        }\n        return !users.length;\n    }\n};\n// To avoid shape changes:\nconst proto = EventDayIndex.prototype;\nindexProps.forEach(name => proto[name] = null);\nproto.initialized = false;\nEventDayIndex._$name = 'EventDayIndex';", "import Base from '../../../Core/Base.js';\nimport ArrayHelper from '../../../Core/helper/ArrayHelper.js';\n/**\n * @module Scheduler/data/mixin/RecurringTimeSpansMixin\n */\nconst\n    emptyArray = Object.freeze([]);\n/**\n * This mixin provides recurrence functionality to a store containing {@link Scheduler.model.TimeSpan} models.\n * Normally you don't need to interact with this mixin directly.\n * @mixin\n */\nexport default Target => class RecurringTimeSpansMixin extends (Target || Base) {\n    static get $name() {\n        return 'RecurringTimeSpansMixin';\n    }\n    construct(...args) {\n        const me = this;\n        // We store all generated occurrences keyed by `_generated_${recurringTimeSpan.id}:${occurrenceStartDate}`\n        // So that when asked to generate an occurrence for a date, an already generated one can be returned.\n        me.globalOccurrences = new Map();\n        // All recurring events added to the store are accessible through this Set. It's used\n        // to generate occurrences.\n        me.recurringEvents = new Set();\n        super.construct(...args);\n    }\n    // Override to refreshRecurringEventsCache on initial load\n    afterLoadData() {\n        // All cached occurrences are now potentially invalid.\n        // A store reload might imply any number of changes which invalidate any occurrence.\n        this.globalOccurrences.clear();\n        // Clear and rebuild the recurring events cache\n        this.refreshRecurringEventsCache('clear');\n        this.refreshRecurringEventsCache('splice', this.storage.allValues);\n        super.afterLoadData && super.afterLoadData();\n    }\n    /**\n     * Responds to mutations of the underlying storage Collection.\n     *\n     * Maintain indices for fast finding of events by date.\n     * @param {Object} event\n     * @private\n     */\n    onDataChange({ action, added, removed, replaced }) {\n        // Recurring events cache must be refreshed before responding to change\n        this.refreshRecurringEventsCache(action, added, removed, replaced);\n        super.onDataChange(...arguments);\n    }\n    refreshRecurringEventsCache(action, added = emptyArray, removed = emptyArray, replaced) {\n        const\n            me                  = this,\n            { recurringEvents } = me,\n            replacedCount       = replaced?.length;\n        switch (action) {\n            case 'clear':\n                recurringEvents.clear();\n                break;\n            // Add and remove\n            case 'splice': {\n                // Handle replacement of records by instances with same ID\n                if (replacedCount) {\n                    added = added.slice();\n                    removed = removed.slice();\n                    for (let i = 0; i < replacedCount; i++) {\n                        removed.push(replaced[i][0]);\n                        added.push(replaced[i][1]);\n                    }\n                }\n                const\n                    addedCount   = added.length,\n                    removedCount = removed.length;\n                // Track the recurring events we contain\n                if (removedCount && recurringEvents.size) {\n                    for (let i = 0; i < removedCount; i++) {\n                        // If it's being removed, remove it from the recurring events cache.\n                        // If it's not a recurring event, it doesn't matter, it won't be in there.\n                        recurringEvents.delete(removed[i]);\n                    }\n                }\n                // Track the recurring events we contain\n                if (addedCount) {\n                    for (let i = 0; i < addedCount; i++) {\n                        const newEvent = added[i];\n                        // Allow easy access to recurring events\n                        if (newEvent.isRecurring) {\n                            recurringEvents.add(newEvent);\n                        }\n                    }\n                }\n                break;\n            }\n        }\n    }\n    getById(id) {\n        let result = super.getById(id);\n        // If the id is not found in the Store, then it could be one of our generated occurrences\n        if (!result) {\n            result = this.globalOccurrences.get(this.modelClass.asId(id));\n        }\n        return result;\n    }\n    onModelChange(record, toSet, wasSet, silent, fromRelationUpdate) {\n        const isRecurrenceRelatedFieldChange = !silent && this.isRecurrenceRelatedFieldChange(record, wasSet);\n        // If this is the base of a recurring sequence, then any reactors to events from\n        // the super call must regenerate occurrences, so must be done at top.\n        // If silent is true, occurrences won't be recalculated. Do not remove occurrences from cache in such case.\n        if (isRecurrenceRelatedFieldChange) {\n            record.removeOccurrences();\n        }\n        super.onModelChange(...arguments);\n        // If this is the base of a recurring sequence, then the EventStore must\n        // trigger a refresh event so that UIs refresh themselves.\n        // This could be at the tail end of the creation of an exception\n        // or a new recurring base.\n        if (isRecurrenceRelatedFieldChange) {\n            const event = { action : 'batch', records : this.storage.values };\n            this.trigger('refresh', event);\n            this.trigger('change', event);\n        }\n    }\n    /**\n     * The method restricts which field modifications should trigger timespan occurrences building.\n     * By default, any field change of a recurring timespan causes the rebuilding.\n     * @param  {Scheduler.model.TimeSpan} timeSpan The modified timespan.\n     * @param  {Object} wasSet Object containing the change set.\n     * @returns {Boolean} `True` if the fields modification should trigger the timespan occurrences rebuilding.\n     * @internal\n     * @category Recurrence\n     */\n    isRecurrenceRelatedFieldChange(timeSpan, wasSet) {\n        return timeSpan.isRecurring || 'recurrenceRule' in wasSet;\n    }\n    /**\n     * Builds occurrences for the provided timespan across the provided date range.\n     * @private\n     * @category Recurrence\n     */\n    getOccurrencesForTimeSpan(timeSpan, startDate, endDate) {\n        const result = [];\n        if (timeSpan.isRecurring) {\n            timeSpan.recurrence.forEachOccurrence(startDate, endDate, r => result.push(r));\n        }\n        return result;\n    }\n    set data(data) {\n        // All cached occurrences are now invalid with a new dataset\n        this.globalOccurrences.clear();\n        super.data = data;\n    }\n    /**\n     * Returns all the recurring timespans.\n     * @returns {Scheduler.model.TimeSpan[]} Array of recurring events.\n     * @category Recurrence\n     */\n    getRecurringTimeSpans() {\n        return [...this.recurringEvents];\n    }\n};\n", "import Base from '../../../Core/Base.js';\nimport RecurringTimeSpansMixin from './RecurringTimeSpansMixin.js';\n/**\n * @module Scheduler/data/mixin/RecurringEventsMixin\n */\n/**\n * This mixin class provides recurrence functionality to the {@link Scheduler.data.EventStore event store}.\n * @extends Scheduler/data/mixin/RecurringTimeSpansMixin\n * @mixin\n */\nexport default Target => class RecurringEventsMixin extends RecurringTimeSpansMixin(Target || Base) {\n    static get $name() {\n        return 'RecurringEventsMixin';\n    }\n    /**\n     * Returns all the recurring events.\n     *\n     * **An alias for ** {@link Scheduler.data.mixin.RecurringTimeSpansMixin#function-getRecurringTimeSpans} method.\n     *\n     * @returns {Scheduler.model.EventModel[]} Array of recurring events.\n     * @category Recurrence\n     */\n    getRecurringEvents() {\n        return this.getRecurringTimeSpans();\n    }\n    isEventPersistable(event) {\n        // occurrences are not persistable\n        return super.isEventPersistable(event) && (!event.supportsRecurring || !event.isOccurrence);\n    }\n};\n", "import Base from '../../../../Core/Base.js';\nconst dayParseRegExp = /^([+-]?[0-9])?(SU|MO|TU|WE|TH|FR|SA)$/;\nconst days = ['SU', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA'];\nexport default class RecurrenceDayRuleEncoder extends Base {\n    static decodeDay(rawDay) {\n        let parsedDay,\n            result;\n        if ((parsedDay = dayParseRegExp.exec(rawDay))) {\n            result = [days.indexOf(parsedDay[2])];\n            // optional position number\n            if (parsedDay[1]) {\n                parsedDay[1] = parseInt(parsedDay[1], 10);\n                result.push(parsedDay[1]);\n            }\n        }\n        return result;\n    }\n    static encodeDay(day) {\n        let position;\n        // support decodeDay() result format\n        if (Array.isArray(day)) {\n            [day, position] = day;\n        }\n        return (position ? position.toString() : '') + days[day];\n    }\n    // Turns days values provided as an array of strings (like [`-1MO`, `SU`, `+3FR`])\n    // into an array of [ dayIndex, position ] elements, where:\n    //\n    // - `dayIndex` - zero-based week day index value (0 - Sunday, 1 - Monday, 2 - Tuesday, etc.)\n    // - `position` - (optional) 1-based position of the day (integer value (can be both positive and negative))\n    static decode(rawDays) {\n        const result = [];\n        let parsedDay;\n        if (rawDays) {\n            for (let i = 0; i < rawDays.length; i++) {\n                if ((parsedDay = this.decodeDay(rawDays[i]))) {\n                    result.push(parsedDay);\n                }\n            }\n        }\n        return result;\n    }\n    static encode(days) {\n        const result = [];\n        let day;\n        if (days) {\n            for (let i = 0; i < days.length; i++) {\n                if ((day = this.encodeDay(days[i]))) {\n                    result.push(day);\n                }\n            }\n        }\n        return result;\n    }\n};\nRecurrenceDayRuleEncoder._$name = 'RecurrenceDayRuleEncoder';", "import Base from '../../../../Core/Base.js';\nimport DateHelper from '../../../../Core/helper/DateHelper.js';\n/**\n * @module Scheduler/data/util/recurrence/AbstractRecurrenceIterator\n * @private\n */\nconst\n    frequencyToUnitRe = /ly$/i,\n    frequencyToUnit = frequency => {\n        const result = frequency.replace(frequencyToUnitRe, '');\n        return result === 'DAI' ? 'DAY' : result;\n    },\n    fn = (date, counter, isFirst, timeSpan) => timeSpan.buildOccurrence(date, isFirst),\n    captureLastOccurrence = date => lastOccurrenceDate = date;\nlet lastOccurrenceDate;\nexport default class AbstractRecurrenceIterator extends Base {\n    static frequency = 'NONE';\n    static MAX_OCCURRENCES_COUNT = 1000000;\n    static processIterationConfig(config) {\n        const\n            { recurrence } = config,\n            {\n                frequency,\n                interval,\n                timeSpan,\n                endDate : until,\n                count\n            } = recurrence;\n        // Force the correction of the event to be in sync with its recurrence rule\n        // before performing iteration. For example, if the event's configured startDate\n        // is 1st January 2020, and the rule dictates that the event will take place\n        // monthly, every Monday, then the first event is not until Monday 6th January, 2020.\n        if (!config.syncingStartDate && !timeSpan.meta.isSyncedWithRule) {\n            // Do not generate occurrences outside of the specified range\n            const\n                intervalEndDate = DateHelper.add(timeSpan.startDate, interval, frequencyToUnit(frequency)),\n                endDate = DateHelper.min(\n                    intervalEndDate,\n                    config.endDate || intervalEndDate\n                );\n            this.forEachDate({\n                syncingStartDate : true,\n                startDate        : timeSpan.startDate,\n                endDate,\n                recurrence,\n                fn\n            });\n        }\n        // Capture the start after its been synced with its recurrence rule\n        const timeSpanStart = timeSpan.startDate;\n        // Extract the endDate from the config, defaulting to the recurrence UNTIL date\n        let {\n            startDate = timeSpanStart,\n            endDate   = until\n        } = config;\n        // No point in starting the iteration before the event starts\n        if (startDate < timeSpanStart) {\n            startDate = timeSpanStart;\n        }\n        // The recurrence's stop date overrides the configured endDate.\n        if (until) {\n            if (!endDate || endDate > until) {\n                endDate = until;\n            }\n        }\n        // If we are limiting using count and we are not starting from the\n        // first occurrence, then we have to calculate a stop date.\n        // This is because for date ranges in the future we cannot calculate how many\n        // preceding occurrences there may have been.\n        else if (count && startDate > timeSpanStart) {\n            // Iterate the occurrences from the start to capture the last one\n            this.forEachDate({\n                recurrence,\n                fn : captureLastOccurrence\n            });\n            // The date of the last occurrence in the count sequence overrides the configured endDate.\n            if (!endDate || endDate > lastOccurrenceDate) {\n                // since endDate of the provided interval is exclusive add 1 millisecond\n                endDate = new Date(lastOccurrenceDate.getTime() + 1);\n            }\n        }\n        // Preserve the requested start of requested visits.\n        const earliestVisibleDate = startDate;\n        // Unless we are only asked for events which *start* within the time range. we must make\n        // a best attempt to include any occurrences which span the start date.\n        // So if we are asking for events from the 1st of the month, and there's an event\n        // which runs every 2 months from the 15th to the 5th, we must include it. Start the\n        // iteration <interval> full frequency quanta before the requested start.\n        // This will only cause <interval> extra iterations.\n        // We cannot step back to before the event's starting date though.\n        if (!config.startOnly) {\n            startDate = new Date(DateHelper.max(DateHelper.add(startDate, -interval, frequencyToUnit(frequency)), timeSpanStart));\n        }\n        return Object.assign({\n            extraArgs : [],\n            // Only check start date for time spans with 0 duration\n            startOnly : !Boolean(timeSpan.durationMS)\n        }, config, {\n            startDate,\n            endDate,\n            timeSpan,\n            timeSpanStart,\n            earliestVisibleDate,\n            endDateMS             : endDate?.getTime(),\n            timeSpanStartMS       : timeSpanStart.getTime(),\n            earliestVisibleDateMS : earliestVisibleDate.getTime(),\n            durationMS            : timeSpan.durationMS,\n            spansStart            : startDate <= timeSpanStart && endDate > timeSpanStart\n        });\n    }\n    static getOccurrenceIndex(event) {\n        if (event.isOccurrence) {\n            return DateHelper.diff(event.recurringTimeSpan.startDate, event.startDate, frequencyToUnit(event.recurringTimeSpan.recurrence.frequency));\n        }\n    }\n    /**\n     * Returns Nth occurrence of a week day in the provided period of time.\n     * @param  {Date} startDate Period start date.\n     * @param  {Date} endDate   Period end date.\n     * @param  {Number} day    Week day (0 - Sunday, 1 - Monday, 2 - Tuesday, etc.)\n     * @param  {Number} index  Index to find.\n     * @returns {Date}           Returns the found date or null if there is no `index`th entry.\n     * @private\n     */\n    static getNthDayInPeriod(startDate, endDate, day, index) {\n        let result, sign, borderDate;\n        if (index) {\n            if (index > 0) {\n                sign = 1;\n                borderDate = startDate;\n            }\n            else {\n                sign = -1;\n                borderDate = endDate;\n            }\n            // delta between requested day and border day\n            const delta = day - borderDate.getDay();\n            // if the requested day goes after (before, depending on borderDate used (start/end))\n            // we adjust index +/-1\n            if (sign * delta < 0) {\n                index += sign;\n            }\n            // measure \"index\" weeks forward (or backward) ..take delta into account\n            // result = new Date(borderDate.getTime() + ((index - sign) * 7 + delta) * 24*60*60*1000);\n            // Per https://github.com/bryntum/support/issues/3413 - don't do that ^^ because DST makes days/week\n            // alternatingly shorter or longer depending on going in/out of DST:\n            result = new Date(borderDate);\n            result.setDate(borderDate.getDate() + (index - sign) * 7 + delta);\n            // if resulting date is outside of the provided range there is no \"index\"-th entry\n            // of the day\n            if (result < startDate || result > endDate) {\n                result = null;\n            }\n        }\n        return result;\n    }\n    static buildDate(year, month, date) {\n        const dt = new Date(year, month, date);\n        if (dt.getFullYear() === year && dt.getMonth() === month && dt.getDate() === date) {\n            return dt;\n        }\n    }\n    static isValidPosition(position) {\n        return Boolean(position);\n    }\n    static forEachDateAtPositions(dates, positions, fn, scope) {\n        const datesLength = dates.length,\n            processed     = {};\n        for (let i = 0; i < positions.length; i++) {\n            const index = positions[i];\n            if (this.isValidPosition(index)) {\n                const date = index > 0 ? dates[index - 1] : dates[datesLength + index];\n                if (date && !processed[date.getTime()]) {\n                    // remember that we've returned the date\n                    processed[date.getTime()] = true;\n                    // return false if it's time to stop recurring\n                    if (fn.call(scope, date) === false) {\n                        return false;\n                    }\n                }\n            }\n        }\n    }\n    static isInView(startOnly, occurrenceDate, earliestVisibleDate, durationMS, timeSpan) {\n        return (\n            startOnly\n                ? occurrenceDate >= earliestVisibleDate\n                : occurrenceDate.valueOf() + durationMS > earliestVisibleDate\n        ) && !timeSpan.hasException(occurrenceDate);\n    }\n    // Slightly faster version of ^, used by Daily & Weekly iterators\n    static isInViewMS(startOnly, occurenceDate, occurrenceDateMS, earliestVisibleDateMS, durationMS, timeSpan) {\n        return (\n            startOnly\n                ? occurrenceDateMS >= earliestVisibleDateMS\n                : occurrenceDateMS + durationMS > earliestVisibleDateMS\n        ) && !timeSpan.hasException(occurenceDate);\n    }\n}\nAbstractRecurrenceIterator._$name = 'AbstractRecurrenceIterator';", "/**\n * @module Scheduler/data/util/recurrence/DailyRecurrenceIterator\n */\nimport AbstractRecurrenceIterator from './AbstractRecurrenceIterator.js';\nimport DateHelper from '../../../../Core/helper/DateHelper.js';\n/**\n * A class which provides iteration to call a function for dates specified by a\n * {@link Scheduler.model.RecurrenceModel RecurrenceModel} over a specified date range.\n * @private\n */\nexport default class DailyRecurrenceIterator extends AbstractRecurrenceIterator {\n    static frequency = 'DAILY';\n    /**\n     * Iterates over the passed date range, calling the passed callback on each date on which\n     * starts a recurring event which matches the passed recurrence rule and overlaps the start and end dates\n     * and is not an {@link Scheduler.model.mixin.RecurringTimeSpan#field-exceptionDates exceptionDate}\n     * in the recurring event.\n     * @param {Object} config An object which describes how to iterate.\n     * @param {Date} config.startDate The point in time to begin iteration.\n     * @param {Date} config.endDate The point in time to end iteration.\n     * @param {Boolean} [config.startOnly] By default, all occurrences which intersect the date range\n     * will be visited. Pass `true` to only visit occurrences which *start* in the date range.\n     * @param {Scheduler.model.RecurrenceModel} config.recurrence The point in time to end iteration.\n     * @param {Function} config.fn The function to call for each date which matches the recurrence in the date range.\n     * @param {Date} config.fn.date The occurrence date.\n     * @param {Number} config.fn.counter A counter of how many dates have been visited in this iteration.\n     * @param {Boolean} config.fn.isFirst A flag which is `true` if the date is the first occurrence in the specified recurrence rule.\n     * @param {Array} [config.extraArgs] Extra arguments to pass to the callback after the `isFirst` argument.\n     */\n    static forEachDate(config) {\n        const\n            {\n                startOnly,\n                startDate,\n                endDate,\n                endDateMS,\n                timeSpan,\n                timeSpanStart,\n                earliestVisibleDateMS,\n                durationMS,\n                spansStart,\n                recurrence,\n                fn,\n                extraArgs,\n                scope = this\n            }                = this.processIterationConfig(config),\n            { interval }     = recurrence,\n            delay            = startDate - timeSpanStart,\n            // recurrence interval duration in ms (86400000 is a single day duration in ms)\n            intervalDuration = interval * 86400000,\n            delayInIntervals = Math.floor(delay / intervalDuration);\n        let { count }       = recurrence,\n            counter         = 0,\n            occurrenceDate  = DateHelper.add(timeSpanStart, delayInIntervals * interval, 'day'),\n            occurrenceDateMS = occurrenceDate.getTime();\n        if (!endDate && !count) {\n            count = this.MAX_OCCURRENCES_COUNT;\n        }\n        while (!endDateMS || occurrenceDateMS < endDateMS) {\n            const inView = this.isInViewMS(startOnly, occurrenceDate, occurrenceDateMS, earliestVisibleDateMS, durationMS, timeSpan);\n            counter++;\n            if (inView &&\n                ((endDateMS && occurrenceDateMS > endDateMS) || fn.apply(scope, [occurrenceDate, counter, counter === 1 && spansStart, timeSpan, ...extraArgs]) === false || (count && counter >= count))\n            ) {\n                break;\n            }\n            // shift to the next day\n            occurrenceDate = DateHelper.add(occurrenceDate, interval, 'day');\n            occurrenceDateMS = occurrenceDate.getTime();\n        }\n    }\n}\nDailyRecurrenceIterator._$name = 'DailyRecurrenceIterator';", "/**\n * @module Scheduler/data/util/recurrence/WeeklyRecurrenceIterator\n */\nimport AbstractRecurrenceIterator from './AbstractRecurrenceIterator.js';\nimport DateHelper from '../../../../Core/helper/DateHelper.js';\nimport DayRuleEncoder from './RecurrenceDayRuleEncoder.js';\n/**\n * A class which provides iteration to call a function for dates specified by a\n * {@link Scheduler.model.RecurrenceModel RecurrenceModel} over a specified date range.\n * @private\n */\nexport default class WeeklyRecurrenceIterator extends AbstractRecurrenceIterator {\n    static frequency = 'WEEKLY';\n    /**\n     * Iterates over the passed date range, calling the passed callback on each date on which\n     * starts an event which matches the passed recurrence rule and overlaps the start and end dates.\n     * @param {Object} config An object which describes how to iterate.\n     * @param {Date} config.startDate The point in time to begin iteration.\n     * @param {Date} config.endDate The point in time to end iteration.\n     * @param {Boolean} [config.startOnly] By default, all occurrences which intersect the date range\n     * will be visited. Pass `true` to only visit occurrences which *start* in the date range.\n     * @param {Scheduler.model.RecurrenceModel} config.recurrence The point in time to end iteration.\n     * @param {Function} config.fn The function to call for each date which matches the recurrence in the date range.\n     * @param {Date} config.fn.date The occurrence date.\n     * @param {Number} config.fn.counter A counter of how many dates have been visited in this iteration.\n     * @param {Boolean} config.fn.isFirst A flag which is `true` if the date is the first occurrence in the specified recurrence rule.\n     * @param {Array} [config.extraArgs] Extra arguments to pass to the callback after the `isFirst` argument.\n     */\n    static forEachDate(config) {\n        const\n            {\n                startOnly,\n                startDate,\n                endDateMS,\n                timeSpan,\n                timeSpanStart,\n                timeSpanStartMS,\n                earliestVisibleDateMS,\n                durationMS,\n                spansStart,\n                recurrence,\n                fn,\n                extraArgs,\n                scope = this\n            }                     = this.processIterationConfig(config),\n            {\n                interval,\n                days\n            }                     = recurrence,\n            { weekStartDay }      = DateHelper,\n            startHours            = timeSpanStart.getHours(),\n            startMinutes          = timeSpanStart.getMinutes(),\n            startSeconds          = timeSpanStart.getSeconds(),\n            startMS               = timeSpanStart.getMilliseconds();\n        let counter    = 0,\n            { count }  = recurrence,\n            weekDays   = DayRuleEncoder.decode(days),\n            weekStartDate, occurrenceDate;\n        // \"Days\" might be skipped then we use the event start day\n        if (!weekDays?.length) {\n            weekDays = [[timeSpanStart.getDay()]];\n        }\n        // If week start day is not zero (Sunday)\n        // we need to normalize weekDays array since its values are used\n        // to calculate real dates as: date = week_start_date + weekDay_entry\n        // which does not work when week starts on non-Sunday\n        if (weekStartDay > 0) {\n            for (let i = 0; i < weekDays.length; i++) {\n                if (weekStartDay > weekDays[i][0]) {\n                    weekDays[i][0] = 7 - weekStartDay - weekDays[i][0];\n                }\n                else {\n                    weekDays[i][0] -= weekStartDay;\n                }\n            }\n        }\n        // days could be provided in any order so it's important to sort them\n        weekDays.sort((a, b) => a[0] - b[0]);\n        // if the recurrence is limited w/ \"Count\" or not every interval should match\n        // we need to 1st count passed occurrences so we always start iteration from the event start date\n        weekStartDate = DateHelper.getNext(count || interval > 1 ? timeSpanStart : startDate, 'week', 0);\n        if (!endDateMS && !count) {\n            count = this.MAX_OCCURRENCES_COUNT;\n        }\n        while (!endDateMS || weekStartDate.getTime() < endDateMS) {\n            for (let i = 0; i < weekDays.length; i++) {\n                // Faster than chaining multiple DateHelper calls\n                occurrenceDate = new Date(\n                    weekStartDate.getFullYear(),\n                    weekStartDate.getMonth(),\n                    weekStartDate.getDate() + weekDays[i][0],\n                    startHours,\n                    startMinutes,\n                    startSeconds,\n                    startMS\n                );\n                const occurrenceDateMS = occurrenceDate.getTime();\n                if (occurrenceDateMS >= timeSpanStartMS) {\n                    const inView = this.isInViewMS(startOnly, occurrenceDate, occurrenceDateMS, earliestVisibleDateMS, durationMS, timeSpan);\n                    counter++;\n                    if (inView &&\n                        ((endDateMS && occurrenceDateMS >= endDateMS) ||\n                        (fn.apply(scope, [occurrenceDate, counter, counter === 1 && spansStart, timeSpan, ...extraArgs]) === false) ||\n                        (count && counter >= count))\n                    ) {\n                        return;\n                    }\n                }\n            }\n            // get next week start\n            weekStartDate = DateHelper.getNext(weekStartDate, 'week', interval);\n        }\n    }\n}\nWeeklyRecurrenceIterator._$name = 'WeeklyRecurrenceIterator';", "/**\n * @module Scheduler/data/util/recurrence/MonthlyRecurrenceIterator\n */\nimport AbstractRecurrenceIterator from './AbstractRecurrenceIterator.js';\nimport DateHelper from '../../../../Core/helper/DateHelper.js';\nimport DayRuleEncoder from './RecurrenceDayRuleEncoder.js';\n/**\n * A class which provides iteration to call a function for dates specified by a\n * {@link Scheduler.model.RecurrenceModel RecurrenceModel} over a specified date range.\n * @private\n */\nexport default class MonthlyRecurrenceIterator extends AbstractRecurrenceIterator {\n    static frequency = 'MONTHLY';\n    static getNthDayOfMonth(date, dayNum) {\n        const daysInMonth = DateHelper.daysInMonth(date);\n        let result = null;\n        if (dayNum && Math.abs(dayNum) <= daysInMonth) {\n            result = new Date(date.getFullYear(), date.getMonth(), dayNum < 0 ? daysInMonth + dayNum + 1 : dayNum);\n        }\n        return result;\n    }\n    static isValidPosition(position) {\n        return position && Math.abs(position) > 0 && Math.abs(position) <= 31;\n    }\n    /**\n     * Iterates over the passed date range, calling the passed callback on each date on which\n     * starts an event which matches the passed recurrence rule and overlaps the start and end dates.\n     * @param {Object} config An object which describes how to iterate.\n     * @param {Date} config.startDate The point in time to begin iteration.\n     * @param {Date} config.endDate The point in time to end iteration.\n     * @param {Boolean} [config.startOnly] By default, all occurrences which intersect the date range\n     * will be visited. Pass `true` to only visit occurrences which *start* in the date range.\n     * @param {Scheduler.model.RecurrenceModel} config.recurrence The point in time to end iteration.\n     * @param {Function} config.fn The function to call for each date which matches the recurrence in the date range.\n     * @param {Date} config.fn.date The occurrence date.\n     * @param {Number} config.fn.counter A counter of how many dates have been visited in this iteration.\n     * @param {Boolean} config.fn.isFirst A flag which is `true` if the date is the first occurrence in the specified recurrence rule.\n     * @param {Array} [config.extraArgs] Extra arguments to pass to the callback after the `isFirst` argument.\n     */\n    static forEachDate(config) {\n        const\n            {\n                startOnly,\n                startDate,\n                endDate,\n                timeSpan,\n                timeSpanStart,\n                earliestVisibleDate,\n                durationMS,\n                spansStart,\n                recurrence,\n                fn,\n                extraArgs,\n                scope = this\n            }              = this.processIterationConfig(config),\n            {\n                interval,\n                days,\n                count,\n                positions\n            } = recurrence,\n            weekDays       = DayRuleEncoder.decode(days),\n            hasPositions   = positions && positions.length,\n            processedDate  = {};\n        let\n            { monthDays }  = recurrence,\n            counter        = 0,\n            weekDayPosition,\n            monthStartDate, monthEndDate,\n            dates, occurrenceDate, i;\n        // if the recurrence is limited w/ \"Count\" or not every interval should match\n        // we need to 1st count passed occurrences so we always start iteration from the event start date\n        monthStartDate = DateHelper.startOf(count || interval > 1 ? timeSpanStart : startDate, 'month');\n        monthEndDate   = new Date(DateHelper.getNext(monthStartDate, 'month', 1) - 1);\n        // If no month days nor week days are provided let's use event start date month day\n        if (!(monthDays && monthDays.length) && !(weekDays && weekDays.length)) {\n            monthDays = [timeSpanStart.getDate()];\n        }\n        if (weekDays && weekDays.length) {\n            // Collect hash of positions indexed by week days\n            weekDays.forEach(day => {\n                if (day[1]) {\n                    weekDayPosition         = weekDayPosition || {};\n                    weekDayPosition[day[0]] = day[1];\n                }\n            });\n        }\n        while ((!endDate || endDate > monthStartDate) && (!count || counter < count)) {\n            dates = [];\n            if (weekDays && weekDays.length) {\n                weekDays.forEach(day => {\n                    const weekDay = day[0];\n                    let from    = 1,\n                        till    = 53;\n                    // if position provided\n                    if (day[1]) {\n                        from = till = day[1];\n                    }\n                    for (i = from; i <= till; i++) {\n                        if ((occurrenceDate = this.getNthDayInPeriod(monthStartDate, monthEndDate, weekDay, i))) {\n                            occurrenceDate = DateHelper.copyTimeValues(occurrenceDate, timeSpanStart);\n                            if (!processedDate[occurrenceDate.getTime()]) {\n                                // remember we processed the date\n                                processedDate[occurrenceDate.getTime()] = true;\n                                dates.push(occurrenceDate);\n                            }\n                        }\n                    }\n                });\n                dates.sort((a, b) => a - b);\n                if (!hasPositions) {\n                    for (i = 0; i < dates.length; i++) {\n                        occurrenceDate = dates[i];\n                        if (occurrenceDate >= timeSpanStart) {\n                            const inView = this.isInView(startOnly, occurrenceDate, earliestVisibleDate, durationMS, timeSpan);\n                            counter++;\n                            if (inView &&\n                                ((endDate && occurrenceDate >= endDate) || (fn.apply(scope, [occurrenceDate, counter, counter === 1 && spansStart, timeSpan, ...extraArgs]) === false) || (count && counter >= count))\n                            ) {\n                                return false;\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                const sortedMonthDates = [];\n                for (i = 0; i < monthDays.length; i++) {\n                    // check if the date wasn't iterated over yet\n                    if ((occurrenceDate = this.getNthDayOfMonth(monthStartDate, monthDays[i])) && !processedDate[occurrenceDate.getTime()]) {\n                        processedDate[occurrenceDate.getTime()] = true;\n                        sortedMonthDates.push(occurrenceDate);\n                    }\n                }\n                // it's important to sort the dates to iterate over them in the proper order\n                sortedMonthDates.sort((a, b) => a - b);\n                for (i = 0; i < sortedMonthDates.length; i++) {\n                    occurrenceDate = DateHelper.copyTimeValues(sortedMonthDates[i], timeSpanStart);\n                    if (hasPositions) {\n                        dates.push(occurrenceDate);\n                    }\n                    else if (occurrenceDate >= timeSpanStart) {\n                        const inView = this.isInView(startOnly, occurrenceDate, earliestVisibleDate, durationMS, timeSpan);\n                        counter++;\n                        if (inView &&\n                            ((endDate && occurrenceDate > endDate) || (fn.apply(scope, [occurrenceDate, counter, counter === 1 && spansStart, timeSpan, ...extraArgs]) === false) || (count && counter >= count))\n                        ) {\n                            return;\n                        }\n                    }\n                }\n            }\n            if (hasPositions && dates.length) {\n                this.forEachDateAtPositions(dates, positions, occurrenceDate => {\n                    if (occurrenceDate >= timeSpanStart) {\n                        const inView = startOnly ? occurrenceDate >= earliestVisibleDate : occurrenceDate.valueOf() + durationMS > earliestVisibleDate && !timeSpan.hasException(occurrenceDate);\n                        counter++;\n                        // Ignore dates outside of the [startDate, endDate] range\n                        if (inView && (!endDate || occurrenceDate <= endDate) &&\n                            // return false if it's time to stop recurring\n                            (fn.apply(scope, [occurrenceDate, counter, counter === 1 && spansStart, timeSpan, ...extraArgs]) === false || (count && counter >= count))\n                        ) {\n                            return false;\n                        }\n                    }\n                });\n            }\n            // get next month start\n            monthStartDate = DateHelper.getNext(monthStartDate, 'month', interval);\n            monthEndDate   = new Date(DateHelper.getNext(monthStartDate, 'month', 1) - 1);\n        }\n    }\n}\nMonthlyRecurrenceIterator._$name = 'MonthlyRecurrenceIterator';", "/**\n * @module Scheduler/data/util/recurrence/YearlyRecurrenceIterator\n */\nimport AbstractRecurrenceIterator from './AbstractRecurrenceIterator.js';\nimport DateHelper from '../../../../Core/helper/DateHelper.js';\nimport DayRuleEncoder from './RecurrenceDayRuleEncoder.js';\n/**\n * A class which provides iteration to call a function for dates specified by a\n * {@link Scheduler.model.RecurrenceModel RecurrenceModel} over a specified date range.\n * @private\n */\nexport default class YearlyRecurrenceIterator extends AbstractRecurrenceIterator {\n    static frequency = 'YEARLY';\n    /**\n     * Iterates over the passed date range, calling the passed callback on each date on which\n     * starts an event which matches the passed recurrence rule and overlaps the start and end dates.\n     * @param {Object} config An object which describes how to iterate.\n     * @param {Date} config.startDate The point in time to begin iteration.\n     * @param {Date} config.endDate The point in time to end iteration.\n     * @param {Boolean} [config.startOnly] By default, all occurrences which intersect the date range\n     * will be visited. Pass `true` to only visit occurrences which *start* in the date range.\n     * @param {Scheduler.model.RecurrenceModel} config.recurrence The point in time to end iteration.\n     * @param {Function} config.fn The function to call for each date which matches the recurrence in the date range.\n     * @param {Date} config.fn.date The occurrence date.\n     * @param {Number} config.fn.counter A counter of how many dates have been visited in this iteration.\n     * @param {Boolean} config.fn.isFirst A flag which is `true` if the date is the first occurrence in the specified recurrence rule.\n     * @param {Array} [config.extraArgs] Extra arguments to pass to the callback after the `isFirst` argument.\n     */\n    static forEachDate(config) {\n        const\n            {\n                startOnly,\n                startDate,\n                endDate,\n                timeSpan,\n                timeSpanStart,\n                earliestVisibleDate,\n                durationMS,\n                spansStart,\n                recurrence,\n                fn,\n                extraArgs,\n                scope = this\n            }              = this.processIterationConfig(config),\n            {\n                interval,\n                days,\n                count,\n                positions\n            } = recurrence,\n            weekDays       = DayRuleEncoder.decode(days),\n            hasPositions   = positions && positions.length,\n            processedDate  = {};\n        let\n            { months }     = recurrence,\n            counter        = 0,\n            i, occurrenceDate, dates, yearStartDate, yearEndDate, weekDayPosition;\n        // if the recurrence is limited w/ \"Count\" or not every interval should match\n        // we need to 1st count passed occurrences so we always start iteration from the event start date\n        yearStartDate = DateHelper.startOf(count || interval > 1 ? timeSpanStart : startDate, 'year');\n        yearEndDate   = new Date(DateHelper.getNext(yearStartDate, 'year', 1) - 1);\n        months && months.sort((a, b) => a - b);\n        // if no months provided let's use the event month\n        if (!(months && months.length) && !(weekDays && weekDays.length)) {\n            months = [timeSpanStart.getMonth() + 1];\n        }\n        if (weekDays && weekDays.length) {\n            // Collect hash of positions indexed by week days\n            weekDays.forEach(day => {\n                if (day[1]) {\n                    weekDayPosition         = weekDayPosition || {};\n                    weekDayPosition[day[0]] = day[1];\n                }\n            });\n        }\n        while ((!endDate || endDate > yearStartDate) && (!count || counter < count)) {\n            dates = [];\n            if (weekDays && weekDays.length) {\n                weekDays.forEach(day => {\n                    const weekDay = day[0];\n                    let\n                        from = 1,\n                        till = 53;\n                    // if position provided\n                    if (day[1]) {\n                        from = till = day[1];\n                    }\n                    for (i = from; i <= till; i++) {\n                        if ((occurrenceDate = this.getNthDayInPeriod(yearStartDate, yearEndDate, weekDay, i))) {\n                            occurrenceDate = DateHelper.copyTimeValues(occurrenceDate, timeSpanStart);\n                            if (!processedDate[occurrenceDate.getTime()]) {\n                                // remember we processed the date\n                                processedDate[occurrenceDate.getTime()] = true;\n                                dates.push(occurrenceDate);\n                            }\n                        }\n                    }\n                });\n                dates.sort((a, b) => a - b);\n                if (!hasPositions) {\n                    for (i = 0; i < dates.length; i++) {\n                        occurrenceDate = dates[i];\n                        if (occurrenceDate >= timeSpanStart) {\n                            const inView = this.isInView(startOnly, occurrenceDate, earliestVisibleDate, durationMS, timeSpan);\n                            counter++;\n                            if (inView &&\n                                ((endDate && occurrenceDate >= endDate) ||\n                                (fn.apply(scope, [occurrenceDate, counter, counter === 1 && spansStart, timeSpan, ...extraArgs]) === false) ||\n                                (count && counter >= count))\n                            ) {\n                                return;\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                for (i = 0; i < months.length; i++) {\n                    if ((occurrenceDate = this.buildDate(yearStartDate.getFullYear(), months[i] - 1, timeSpanStart.getDate()))) {\n                        occurrenceDate = DateHelper.copyTimeValues(occurrenceDate, timeSpanStart);\n                        // check if the date wasn't iterated over yet\n                        if (!processedDate[occurrenceDate.getTime()]) {\n                            processedDate[occurrenceDate.getTime()] = true;\n                            if (hasPositions) {\n                                dates.push(occurrenceDate);\n                            }\n                            else if (occurrenceDate >= timeSpanStart) {\n                                const inView = startOnly ? occurrenceDate >= earliestVisibleDate : occurrenceDate.valueOf() + durationMS > earliestVisibleDate && !timeSpan.hasException(occurrenceDate);\n                                counter++;\n                                if (inView &&\n                                    ((endDate && occurrenceDate >= endDate) ||\n                                    (fn.apply(scope, [occurrenceDate, counter, counter === 1 && spansStart, timeSpan, ...extraArgs]) === false) ||\n                                    (count && counter >= count))\n                                ) {\n                                    return;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            if (hasPositions && dates.length) {\n                this.forEachDateAtPositions(dates, positions, occurrenceDate => {\n                    if (occurrenceDate >= timeSpanStart) {\n                        const inView = startOnly ? occurrenceDate >= earliestVisibleDate : occurrenceDate.valueOf() + durationMS > earliestVisibleDate && !timeSpan.hasException(occurrenceDate);\n                        counter++;\n                        // Ignore dates outside of the [startDate, endDate] range\n                        if (inView && (!endDate || occurrenceDate < endDate)) {\n                            // return false if it's time to stop recurring\n                            if (fn.apply(scope, [occurrenceDate, counter, counter === 1 && spansStart, timeSpan, ...extraArgs]) === false || (count && counter >= count)) {\n                                return false;\n                            }\n                        }\n                    }\n                });\n            }\n            // get next month start\n            yearStartDate = DateHelper.getNext(yearStartDate, 'year', interval);\n            yearEndDate   = new Date(DateHelper.getNext(yearStartDate, 'year', 1) - 1);\n        }\n    }\n}\nYearlyRecurrenceIterator._$name = 'YearlyRecurrenceIterator';", "import Model from '../../Core/data/Model.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport RecurrenceDayRuleEncoder from '../data/util/recurrence/RecurrenceDayRuleEncoder.js';\nimport DailyRecurrenceIterator from '../data/util/recurrence/DailyRecurrenceIterator.js';\nimport WeeklyRecurrenceIterator from '../data/util/recurrence/WeeklyRecurrenceIterator.js';\nimport MonthlyRecurrenceIterator from '../data/util/recurrence/MonthlyRecurrenceIterator.js';\nimport YearlyRecurrenceIterator from '../data/util/recurrence/YearlyRecurrenceIterator.js';\n/**\n * @module Scheduler/model/RecurrenceModel\n */\nconst recurrenceIterators = {};\n[DailyRecurrenceIterator, WeeklyRecurrenceIterator, MonthlyRecurrenceIterator, YearlyRecurrenceIterator].forEach(it => {\n    recurrenceIterators[it.frequency] = it;\n});\nfunction convertStringOfIntegerItemsValue(value) {\n    if (value) {\n        if (typeof value == 'string') {\n            value = value.split(',').map(item => parseInt(item, 10));\n        }\n    }\n    else {\n        value = null;\n    }\n    return value;\n}\nfunction convertStringOfItemsValue(value) {\n    if (value) {\n        if (typeof value == 'string') {\n            value = value.split(',');\n        }\n    }\n    else {\n        value = null;\n    }\n    return value;\n}\nfunction isEqualAsString(value1, value2) {\n    return String(value1) === String(value2);\n}\nfunction convertInteger(value) {\n    if (this.defaultValue && value === undefined) {\n        return this.defaultValue;\n    }\n    if (this.allowNull && value == null) {\n        return null;\n    }\n    value = parseInt(value);\n    return isNaN(value) ? undefined : value;\n}\n/**\n * This class represents a timespan recurrence settings.\n * It is a subclass of {@link Core.data.Model} class.\n * Please refer to the documentation for that class to become familiar with the base interface of this class.\n *\n * The data source for these fields can be customized by subclassing this class.\n *\n * @extends Core/data/Model\n */\nexport default class RecurrenceModel extends Model {\n    static get $name() {\n        return 'RecurrenceModel';\n    }\n    /**\n     * Indicates that this is a `RecurrenceModel` class instance\n     * (allows to avoid using `instanceof`).\n     * @property {Boolean}\n     * @readonly\n     */\n    get isRecurrenceModel() {\n        return true;\n    }\n    //region Fields\n    static get fields() {\n        return [\n            /**\n             * Field defines the recurrence frequency. Supported values are: `DAILY`, `WEEKLY`, `MONTHLY`, `YEARLY`.\n             * @field {'DAILY'|'WEEKLY'|'MONTHLY'|'YEARLY'} frequency\n             */\n            { name : 'frequency', defaultValue : 'DAILY' },\n            /**\n             * Field defines how often the recurrence repeats.\n             * For example, if the recurrence is weekly its interval is 2, then the timespan repeats every two weeks.\n             * @field {Number} interval\n             */\n            { name : 'interval', defaultValue : 1, convert : convertInteger },\n            /**\n             * End date of the recurrence. Specifies when the recurrence ends.\n             * The value is optional, the recurrence can as well be stopped using {@link #field-count} field value.\n             * @field {Date} endDate\n             */\n            { name : 'endDate', type : 'date' },\n            /**\n             * Specifies the number of occurrences after which the recurrence ends.\n             * The value includes the associated timespan itself so values less than 2 make no sense.\n             * The field is optional, the recurrence as well can be stopped using {@link #field-endDate} field value.\n             * @field {Number} count\n             */\n            { name : 'count', allowNull : true, convert : convertInteger },\n            /**\n             * Specifies days of the week on which the timespan should occur.\n             * An array of string values `SU`, `MO`, `TU`, `WE`, `TH`, `FR`, `SA`\n             * corresponding to Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, and Saturday days of the week.\n             * Each value can also be preceded by a positive (+n) or negative (-n) integer.\n             * If present, this indicates the nth occurrence of a specific day within the monthly or yearly recurrence.\n             *\n             * **Not applicable** for daily {@link #field-frequency}.\n             * @field {String[]} days\n             */\n            {\n                name    : 'days',\n                convert : convertStringOfItemsValue,\n                isEqual : isEqualAsString\n            },\n            /**\n             * Specifies days of the month on which the timespan should occur.\n             * An array of integer values (-31..-1 - +1..+31, negative values mean counting backwards from the month end).\n             * **Applicable only** for monthly {@link #field-frequency}.\n             * @field {Number[]} monthDays\n             */\n            {\n                name    : 'monthDays',\n                convert : convertStringOfIntegerItemsValue,\n                isEqual : isEqualAsString\n            },\n            /**\n             * Specifies months of the year on which the timespan should occur.\n             * An array of integer values (1 - 12).\n             * **Applicable only** for yearly {@link #field-frequency}.\n             * @field {Number[]} months\n             */\n            {\n                name    : 'months',\n                convert : convertStringOfIntegerItemsValue,\n                isEqual : isEqualAsString\n            },\n            /**\n             * The positions to include in the recurrence. The values operate on a set of recurrence instances **in one interval** of the recurrence rule.\n             * An array of integer values (valid values are 1 to 366 or -366 to -1, negative values mean counting backwards from the end of the built list of occurrences).\n             * **Not applicable** for daily {@link #field-frequency}.\n             * @field {Number} positions\n             */\n            {\n                name    : 'positions',\n                convert : convertStringOfIntegerItemsValue,\n                isEqual : isEqualAsString\n            }\n        ];\n    }\n    get dateFormat() {\n        return this._dateFormat || 'YYYYMMDDTHHmmss';\n    }\n    set dateFormat(format) {\n        this._dateFormat = format;\n    }\n    get recurrenceIterator() {\n        return recurrenceIterators[this.frequency];\n    }\n    /**\n     * The timespan this recurrence is associated with.\n     * @property {Scheduler.model.TimeSpan}\n     */\n    get timeSpan() {\n        return this._timeSpan;\n    }\n    set timeSpan(value) {\n        this._timeSpan = value;\n    }\n    /**\n     * The recurrence rule. A string in [RFC-5545](https://tools.ietf.org/html/rfc5545#section-3.3.10) described format\n     * (\"RRULE\" expression).\n     * @property {String}\n     */\n    get rule() {\n        const\n            me     = this,\n            result = [];\n        if (me.frequency) {\n            result.push(`FREQ=${me.frequency}`);\n            if (me.interval > 1) {\n                result.push(`INTERVAL=${me.interval}`);\n            }\n            if (me.days && me.days.length) {\n                result.push('BYDAY=' + me.days.join(','));\n            }\n            if (me.monthDays && me.monthDays.length) {\n                result.push('BYMONTHDAY=' + me.monthDays.join(','));\n            }\n            if (me.months && me.months.length) {\n                result.push('BYMONTH=' + me.months.join(','));\n            }\n            if (me.count) {\n                result.push(`COUNT=${me.count}`);\n            }\n            if (me.endDate) {\n                result.push('UNTIL=' + DateHelper.format(me.endDate, me.dateFormat));\n            }\n            if (me.positions && me.positions.length) {\n                result.push('BYSETPOS=' + me.positions.join(','));\n            }\n        }\n        return result.join(';');\n    }\n    set rule(rule) {\n        const\n            me     = this,\n            values = {\n                frequency : null,\n                interval  : null,\n                count     : null,\n                endDate   : null,\n                days      : null,\n                monthDays : null,\n                months    : null,\n                positions : null\n            };\n        me.beginBatch();\n        if (rule) {\n            const parts = rule.split(';');\n            for (let i = 0, len = parts.length; i < len; i++) {\n                const\n                    part = parts[i].split('='),\n                    value  = part[1];\n                switch (part[0]) {\n                    case 'FREQ':\n                        values.frequency = value;\n                        break;\n                    case 'INTERVAL':\n                        values.interval = value;\n                        break;\n                    case 'COUNT':\n                        values.count = value;\n                        values.until = null;\n                        break;\n                    case 'UNTIL':\n                        if (value) {\n                            values.endDate = DateHelper.parse(value, me.dateFormat);\n                        }\n                        else {\n                            values.endDate = null;\n                        }\n                        values.count = null;\n                        break;\n                    case 'BYDAY':\n                        values.days = value;\n                        break;\n                    case 'BYMONTHDAY':\n                        values.monthDays = value;\n                        break;\n                    case 'BYMONTH':\n                        values.months = value;\n                        break;\n                    case 'BYSETPOS':\n                        values.positions = value;\n                        break;\n                }\n            }\n        }\n        me.set(values);\n        if (rule) {\n            me.sanitize();\n        }\n        me.endBatch();\n    }\n    construct(data = {}) {\n        const\n            me                 = this,\n            { rule, timeSpan } = data;\n        me._suspendedTimeSpanNotifying = 0;\n        delete data.timeSpan;\n        delete data.rule;\n        super.construct(...arguments);\n        if (rule) {\n            me.suspendTimeSpanNotifying();\n            me.rule = rule;\n            me.resumeTimeSpanNotifying();\n        }\n        me.timeSpan = timeSpan;\n    }\n    /**\n     * Iterate occurrences for the owning timespan across the specified date range. This method can be called even\n     * if the timespan is not yet a member of a store, however, the occurrences returned will not be cached across\n     * subsequent calls to this method.\n     * @param {Date} startDate The start date of the iteration.\n     * @param {Date} endDate The end date of the iteration.\n     * @param {Function} fn The function to call for each occurrence.\n     * @param {Scheduler.model.TimeSpan} fn.occurrence The occurrence.\n     * @param {Boolean} fn.first A flag which is `true` for the first occurrence of this recurrence.\n     * @param {Number} fn.counter A counter of how many dates have been visited in this iteration.\n     * @param {Date} fn.date The occurrence date.\n     * @internal\n     */\n    forEachOccurrence(startDate, endDate, fn) {\n        if (this.timeSpan.startDate) {\n            this.recurrenceIterator.forEachDate({\n                recurrence : this,\n                startDate,\n                endDate,\n                fn(date, counter, first, timeSpan) {\n                    return fn(timeSpan.buildOccurrence(date, first), first, counter, date);\n                }\n            });\n        }\n    }\n    /**\n     * Cleans up fields that do not makes sense for the current {@link #field-frequency} value.\n     * @private\n     */\n    sanitize() {\n        const\n            me                = this,\n            timeSpanStartDate = me.timeSpan?.startDate,\n            values            = {};\n        me.isSanitizing = true;\n        switch (me.frequency) {\n            case 'DAILY' :\n                values.positions    = null;\n                values.days         = null;\n                values.monthDays    = null;\n                values.months       = null;\n                break;\n            case 'WEEKLY' : {\n                values.positions = null;\n                values.monthDays = null;\n                values.months = null;\n                const { days } = me;\n                if (timeSpanStartDate && days?.length === 1 && days[0] === RecurrenceDayRuleEncoder.encodeDay(timeSpanStartDate.getDay())) {\n                    values.days = null;\n                }\n                break;\n            }\n            case 'MONTHLY' : {\n                if (me.monthDays?.length) {\n                    values.positions = null;\n                    values.days = null;\n                }\n                values.months = null;\n                const { monthDays } = me;\n                if (timeSpanStartDate && monthDays?.length === 1 && monthDays[0] === timeSpanStartDate.getDate()) {\n                    values.monthDays = null;\n                }\n                break;\n            }\n            case 'YEARLY' : {\n                values.monthDays = null;\n                const { months } = me;\n                if (timeSpanStartDate && months?.length === 1 && months[0] === timeSpanStartDate.getMonth() + 1) {\n                    values.months = null;\n                }\n                break;\n            }\n        }\n        me.set(values);\n        me.isSanitizing = false;\n    }\n    copy(...args) {\n        const result = super.copy(...args);\n        result.dateFormat = this.dateFormat;\n        result.timeSpan   = this.timeSpan;\n        return result;\n    }\n    afterChange(toSet, wasSet, silent) {\n        const\n            result       = super.afterChange(toSet, wasSet, silent),\n            { timeSpan } = this;\n        if (!this.isSanitizing) {\n            // cleanup data to match the chosen frequency\n            this.sanitize();\n        }\n        if (timeSpan) {\n            timeSpan.sanitizeRecurrenceData(this);\n            if (!this.isTimeSpanNotifyingSuspended) {\n                timeSpan.onRecurrenceChanged();\n            }\n        }\n        return result;\n    }\n    set(field, value, ...args) {\n        const values = typeof field === 'object' ? field : { [field] : value };\n        // reset \"endDate\" field if \"count\" is being set\n        if (values.count) {\n            values.endDate = null;\n        }\n        // reset \"count\" field if \"endDate\" is being set\n        else if (values.endDate) {\n            values.count = null;\n        }\n        super.set(values, undefined, ...args);\n    }\n    get isTimeSpanNotifyingSuspended() {\n        return Boolean(this._suspendedTimeSpanNotifying);\n    }\n    suspendTimeSpanNotifying() {\n        this._suspendedTimeSpanNotifying++;\n    }\n    resumeTimeSpanNotifying() {\n        if (this._suspendedTimeSpanNotifying) this._suspendedTimeSpanNotifying--;\n    }\n}\nRecurrenceModel._$name = 'RecurrenceModel';", "import TimeSpan from '../TimeSpan.js';\nimport RecurrenceModel from '../RecurrenceModel.js';\nimport ArrayHelper from '../../../Core/helper/ArrayHelper.js';\nimport DateHelper from '../../../Core/helper/DateHelper.js';\nimport AbstractRecurrenceIterator from '../../data/util/recurrence/AbstractRecurrenceIterator.js';\nfunction convertExceptionDatesValue(value) {\n    const\n        result         = {},\n        { dateFormat } = this;\n    if (value) {\n        value = typeof value == 'string' ? value.split(',') : ArrayHelper.asArray(value);\n        value.forEach(item => {\n            if (typeof item == 'string') {\n                item = DateHelper.parse(item, dateFormat);\n            }\n            // If we've got a valid date out of the incoming item, add an exception key\n            if (!isNaN(item)) {\n                result[DateHelper.makeKey(item)] = 1;\n            }\n        });\n    }\n    return result;\n}\nfunction serializeExceptionDatesValue(value) {\n    const\n        result         = [],\n        { dateFormat } = this;\n    for (const date in value) {\n        if (value[date]) {\n            result.push(DateHelper.format(DateHelper.parseKey(date), dateFormat));\n        }\n    }\n    return result;\n}\nconst emptyArray = [];\n/**\n * @module Scheduler/model/mixin/RecurringTimeSpan\n */\n/**\n * This mixin class provides recurrence related fields and methods to a {@link Scheduler.model.TimeSpan timespan model}.\n *\n * The mixin introduces two types of timespans: __recurring timespan__ and its __occurrences__.\n * __Recurring timespan__ is a timespan having {@link #field-recurrenceRule recurrence rule} specified and its __occurrences__ are \"fake\" dynamically generated timespans.\n * Their set depends on the scheduler visible timespan and changes upon the timespan change.\n *\n * There are few methods allowing to distinguish a recurring event and an occurrence: {@link #property-isRecurring}, {@link #property-isOccurrence}\n * and {@link #property-recurringTimeSpan} (returns the event this record is an occurrence of).\n *\n * The {@link #field-recurrenceRule recurrence rule} defined for the event is parsed and\n * represented with {@link Scheduler.model.RecurrenceModel RecurrenceModel} class (can be changed by setting {@link #property-recurrenceModel} property) instance.\n * See: {@link #property-recurrence} property.\n * @mixin\n * @mixinbase TimeSpan\n */\nexport default Target => class RecurringTimeSpan extends (Target || TimeSpan) {\n    static get $name() {\n        return 'RecurringTimeSpan';\n    }\n    /**\n     * Returns `true` if this timespan supports recurring.\n     * @property {Boolean}\n     * @category Recurrence\n     */\n    get supportsRecurring() {\n        return true;\n    }\n    static get fields() {\n        return [\n            /**\n             * The timespan recurrence rule. A string in [RFC-5545](https://tools.ietf.org/html/rfc5545#section-3.3.10)\n             * described format (\"RRULE\" expression).\n             * @field {String} recurrenceRule\n             * @category Scheduling\n             */\n            {\n                name     : 'recurrenceRule',\n                internal : true\n            },\n            /**\n             * A string (either a single date or multiple dates separated by comma) or an array of strings containing\n             * the timespan exception dates. The dates that must be skipped when generating occurrences for a repeating\n             * timespan. This is used to modify only individual occurrences of the timespan so the further regenerations\n             * won't create another copy of this occurrence again.\n             *\n             * ```javascript\n             * {\n             *     id: 7,\n             *     startDate: '2021-10-12T14:00:00',\n             *     endDate: '2021-10-12T15:00:00',\n             *     name: 'Lunch',\n             *     resourceId: 'hotel',\n             *     recurrenceRule: 'FREQ=DAILY;COUNT=5',\n             *     exceptionDates: ['2021-10-14']\n             * }\n             * ```\n             *\n             * Use {@link #function-addExceptionDate} method to add an individual entry to the dates array:\n             *\n             * ```javascript\n             * // Break the link between the occurrence and its base.\n             * // This also adds the occurrence date as an exception date\n             * // so that the base timespan knows that this date should be skipped when regenerating its occurrences.\n             * occurrence.recurringTimeSpan = null;\n             *\n             * // now the occurrence is an individual record that can be changed & persisted freely\n             * occurrence.setStartEndDate(new Date(2018, 6, 2), new Date(2018, 6, 3));\n             * ```\n             * **Note:** The dates in this field get automatically removed when the event changes its {@link Scheduler.model.TimeSpan#field-startDate start date}.\n             *\n             * @field {String|String[]} exceptionDates\n             * @category Scheduling\n             */\n            {\n                name      : 'exceptionDates',\n                convert   : convertExceptionDatesValue,\n                serialize : serializeExceptionDatesValue,\n                internal  : true\n            }\n        ];\n    }\n    /**\n     * Override of {@link Core/data/Model}'s method. If an {@link #property-isOccurrence}\n     * is passed, it is detached from its parent recurring event. If it still has a recurrence\n     * then the recurring event is changed to stop at the occurrence date. If it has no recurrence\n     * an exception is added at the occurrence date.\n     * @category Recurrence\n     */\n    remove() {\n        if (this.isOccurrence) {\n            const\n                me = this,\n                { recurringTimeSpan } = me;\n            me.cancelBatch();\n            recurringTimeSpan.beginBatch();\n            me.detachFromRecurringEvent();\n            recurringTimeSpan.endBatch();\n        }\n        else {\n            return super.remove(...arguments);\n        }\n    }\n    get eventStore() {\n        let result = (this.isOccurrence && this.recurringEvent?.eventStore) || super.eventStore;\n        // Recurrence methods are called on `eventStore`, but in case we have a regular\n        // store with recurrence mixin, we won't event store and should return own\n        // store instead\n        if (!result && this.firstStore?.isRecurringTimeSpansMixin) {\n            result = this.firstStore;\n        }\n        return result;\n    }\n    /**\n     * Name of the class representing the recurrence model, defaults to {@link Scheduler.model.RecurrenceModel}\n     * @property {String}\n     * @category Recurrence\n     */\n    get recurrenceModel() {\n        return this._recurrenceModel || RecurrenceModel;\n    }\n    set recurrenceModel(model) {\n        this._recurrenceModel = model;\n    }\n    /**\n     * Sets a recurrence for the timespan with a given frequency, interval, and end.\n     * @param {RecurrenceModelConfig|String|Scheduler.model.RecurrenceModel} recurrence A data object for an instance of\n     * {@link Scheduler.model.RecurrenceModel}. May also be the frequency string: `DAILY`, `WEEKLY`, `MONTHLY`, or\n     * `YEARLY`.\n     *\n     * ```javascript\n     * // repeat the event every other week till Jan 2 2039\n     * event.setRecurrence({\n     *     frequency : \"WEEKLY\",\n     *     interval  : 2,\n     *     endDate   : new Date(2039, 0, 2)\n     * });\n     * ```\n     *\n     * Also a {@link Scheduler.model.RecurrenceModel recurrence model} can be provided as the only argument for this\n     * method:\n     *\n     * ```javascript\n     * const recurrence = new RecurrenceModel({ frequency : 'DAILY', interval : 5 });\n     *\n     * event.setRecurrence(recurrence);\n     * ```\n     *\n     * or\n     *\n     * ```javascript\n     * event.setRecurrence(\"WEEKLY\", 2, new Date(2039, 0, 2));\n     * ```\n     * @param {Number} [interval] The interval between occurrences (instances of this recurrence). For example, a daily\n     * recurrence with an interval of 2 occurs every other day. Must be greater than 0.\n     * @param {Number|Date} [recurrenceEnd] The end of the recurrence. The value can be specified by a date or by a\n     * maximum count of occurrences (has to greater than 1, since 1 means the event itself).\n     * @category Recurrence\n     */\n    setRecurrence(recurrence, interval, recurrenceEnd) {\n        const me = this;\n        let recurrenceRule;\n        if (recurrence) {\n            if (!recurrence.isRecurrenceModel) {\n                if (typeof recurrence === 'string') {\n                    recurrence = {\n                        frequency : recurrence\n                    };\n                    if (interval) {\n                        recurrence.interval = interval;\n                    }\n                    // If the recurrence is limited\n                    if (recurrenceEnd) {\n                        if (recurrenceEnd instanceof Date) {\n                            recurrence.endDate = recurrenceEnd;\n                        }\n                        else {\n                            recurrence.count = recurrenceEnd;\n                        }\n                    }\n                }\n                recurrence = new me.recurrenceModel(recurrence);\n            }\n            // The RecurrenceModel has a reference to its owning recurring event.\n            // It uses this to remove the owning event's exceptions after its new endDate\n            // whenever its endDate is changed.\n            recurrence.timeSpan = me;\n            recurrenceRule = recurrence.rule;\n        }\n        me.recurrence     = recurrence;\n        me.recurrenceRule = recurrenceRule;\n    }\n    /**\n     * The recurrence model used for the timespan.\n     * @property {Scheduler.model.RecurrenceModel}\n     * @category Recurrence\n     */\n    get recurrence() {\n        const\n            me = this,\n            rule = me.recurrenceRule;\n        if (!me._recurrence && rule) {\n            me._recurrence = new me.recurrenceModel({ rule, timeSpan : me, id : `${me.id}-recurrence` });\n        }\n        return me._recurrence;\n    }\n    set recurrence(recurrence) {\n        const me = this;\n        me._recurrence = recurrence;\n        if (recurrence) {\n            // bind recurrence instance to the model\n            recurrence.timeSpan = me;\n            me.recurrenceRule   = recurrence.rule;\n        }\n        else {\n            // If this is being done to an occurrence, it's a signal that we are being\n            // mutated into an exception. Apply the change immediately, directly to the data.\n            if (me.isOccurrence) {\n                me.setData('recurrenceRule', null);\n            }\n            else {\n                me.recurrenceRule = null;\n            }\n        }\n    }\n    /**\n     * Indicates if the timespan is recurring.\n     * @property {Boolean}\n     * @readonly\n     * @category Recurrence\n     */\n    get isRecurring() {\n        // MUST evaluate in this order so that if it is an occurrence,\n        // the recurrence getter does not refresh the rule\n        return Boolean(!this.isOccurrence && this.recurrence);\n    }\n    /**\n     * Indicates if the timespan is an occurrence of another recurring timespan.\n     * @property {Boolean}\n     * @readonly\n     * @category Recurrence\n     */\n    get isOccurrence() {\n        return Boolean(this.recurringTimeSpan);\n    }\n    /**\n     * The \"main\" timespan this model is an occurrence of. For non-occurrences returns `null`.\n     * @property {Scheduler.model.TimeSpan}\n     * @readonly\n     * @internal\n     * @category Recurrence\n     */\n    get recurringTimeSpan() {\n        return this._recurringTimeSpan;\n    }\n    get isPersistable() {\n        return super.isPersistable && (!this.supportsRecurring || !this.isOccurrence);\n    }\n    set recurringTimeSpan(recurringTimeSpan) {\n        this._recurringTimeSpan = recurringTimeSpan;\n    }\n    /**\n     * Returns the occurrences of this event over the specified time range. If the first\n     * occurrence is in the time range `*this*` record is included in that position.\n     * @param {Date} startDate The start date of the range for which to include occurrences.\n     * @param {Date} [endDate] The end date of the range for which to include occurrences.\n     * Defaults to the startDate.\n     * @returns {Scheduler.model.TimeSpan[]} The array of occurrences which occur over the specified range.\n     * @category Recurrence\n     */\n    getOccurrencesForDateRange(startDate, endDate = startDate) {\n        return this.eventStore.getOccurrencesForTimeSpan(this, startDate, endDate);\n    }\n    /**\n     * Array of this recurring timespan's cached occurrences. __Not including the owning recurring\n     * event__.\n     *\n     * Empty if the timespan is not recurring.\n     *\n     * __Note that this is an internal accessor and is cleared whenever changes are made to the\n     * owning recurring event__.\n     * @property {Scheduler.model.TimeSpan[]}\n     * @readonly\n     * @internal\n     * @category Recurrence\n     */\n    get occurrences() {\n        if (this.isRecurring) {\n            const result = [];\n            // The occurrencesMap contains entries for each occurrence date.\n            this.occurrenceMap.forEach(occurrence => {\n                if (occurrence !== this) {\n                    result.push(occurrence);\n                }\n            });\n            return result;\n        }\n        return emptyArray;\n    }\n    /**\n     * A Map, keyed by each date an occurrence intersects, of occurrences of this event.\n     * @property {Map}\n     * @readonly\n     * @internal\n     * @category Recurrence\n     */\n    get occurrenceMap() {\n        return this._occurrencesMap || (this._occurrencesMap = new Map());\n    }\n    /**\n     * Removes an occurrence from this recurring timespan's cached occurrences.\n     * @param dateOrTimeSpan occurrence date or occurrence TimeSpan\n     * @internal\n     * @category Recurrence\n     */\n    removeOccurrence(dateOrTimeSpan, eventStore = this.eventStore) {\n        const date = dateOrTimeSpan.isTimeSpan ? dateOrTimeSpan.occurrenceDate : dateOrTimeSpan;\n        // Clear the occurrences *is* we are in an EventStore.\n        eventStore?.globalOccurrences.delete(this.createRecurrenceKey(date));\n        // Remove occurrence from its by-startDate cache\n        this.occurrenceMap.delete(DateHelper.makeKey(date));\n    }\n    /**\n     * Removes all cached occurrences on or after the passed date from this recurring timespan's cached occurrences.\n     * @internal\n     * @category Recurrence\n     */\n    removeOccurrencesFrom(date) {\n        this.occurrenceMap.forEach((occurrence, dateKey) => {\n            if (DateHelper.parseKey(dateKey) >= date) {\n                this.removeOccurrence(occurrence);\n            }\n        });\n    }\n    /**\n     * Removes this recurring timespan's cached occurrences.\n     * @internal\n     * @category Recurrence\n     */\n    removeOccurrences(eventStore) {\n        // This recurring event must also be removed from the occurrenceMap if it's there\n        // So insert it as the first element. Can also be found from the store's global occurrence\n        // Map using [...this.eventStore.globalOccurrences.keys()].filter(e => e.startsWith(`_generated:${this.id}`))\n        [this, ...this.occurrences].forEach(occurrence => this.removeOccurrence(occurrence, eventStore));\n    }\n    /**\n     * The method is triggered when the timespan recurrence settings get changed.\n     * It updates the {@link #field-recurrenceRule} field in this case.\n     * @internal\n     * @category Recurrence\n     */\n    onRecurrenceChanged() {\n        this.recurrenceRule = this.recurrence?.rule || null;\n    }\n    sanitizeRecurrenceData(recurrence = this.recurrence) {\n        // Remove all exceptionsDates that our owning timeSpan had that are\n        // now after our end date and therefore redundant.\n        if (recurrence.endDate) {\n            const\n                endDate            = DateHelper.clearTime(recurrence.endDate),\n                { exceptionDates } = this;\n            // Clear any now-invalid cached occurrences\n            this.removeOccurrencesFrom(endDate);\n            // If we had any exceptions on or after this date, remove them.\n            if (exceptionDates) {\n                for (const dateKey in exceptionDates) {\n                    const exceptionDate = DateHelper.parseKey(dateKey);\n                    if (exceptionDate >= endDate) {\n                        delete exceptionDates[dateKey];\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * The original {@lScheduler.model.TimeSpan#field-startDate startDate} of this event before any modifications\n     * took place. Used by {@link #function-removeOccurrence} and {@link #function-detachFromRecurringEvent}\n     * @internal\n     * @readonly\n     * @category Recurrence\n     */\n    get occurrenceDate() {\n        return this.meta.modified?.startDate || this.startDate;\n    }\n    /**\n     * If this event is an {@link #property-isOccurrence occurrence} of a recurring event, then this\n     * property yields its zero-based occurrence index in the sequence.\n     * @property {Number}\n     * @readonly\n     * @category Recurrence\n     */\n    get occurrenceIndex() {\n        return AbstractRecurrenceIterator.getOccurrenceIndex(this);\n    }\n    /**\n     * Builds an occurrence of this recurring event by cloning the timespan data.\n     * The method is used internally by the __RecurringTimeSpans__ mixin.\n     * Override it if you need to customize the generated occurrences.\n     *\n     * If the date requested is the start date of the event sequence, `this`\n     * record is returned. All runs of recurring events begin with the base record.\n     * @param  {Date} occurrenceDate The occurrence start date.\n     * @param  {Boolean} isFirst `true` if this is the first occurrence.\n     * @returns {Scheduler.model.TimeSpan} The occurrence.\n     * @internal\n     * @category Recurrence\n     */\n    buildOccurrence(occurrenceDate, isFirst) {\n        const\n            me                    = this,\n            {\n                occurrenceMap,\n                recurrence,\n                meta\n            }                     = me,\n            globalOccurrences     = me.eventStore?.globalOccurrences,\n            occurrenceKey         = DateHelper.makeKey(occurrenceDate),\n            id                    = me.createRecurrenceKey(occurrenceDate, occurrenceKey),\n            onStartDate           = !(occurrenceDate - me.startDate),\n            { fieldMap }          = me.constructor;\n        // An occurrence has a unique ID which identifies it by its base recurring event and its time.\n        let occurrence   = globalOccurrences?.get(id),\n            { duration } = me;\n        // If there's no duration, or it's an all day event (which makes the event ceil and floor its\n        // start and end dates, but does *NOT* as of 27/5/2020 adjust its duration) then\n        // we calculate the duration of the occurrence.\n        if (me.endDate && (me.allDay || !duration)) {\n            duration = DateHelper.as(me.durationUnit, me.endDate.getTime() - me.startDate.getTime());\n        }\n        // Don't let NaN in record data\n        const occurrenceEndDate = duration !== undefined ? DateHelper.add(occurrenceDate, duration, me.durationUnit) : undefined;\n        if (!occurrence) {\n            // If this is the first occurrence (start times may not match), or it's right on the start\n            // then this recurring event *IS* the occurrence\n            if (isFirst || onStartDate) {\n                occurrence = me;\n                // We are the first occurrence.\n                // But if our start time is not as the rule requires, adjust ourself *silently*\n                if (!onStartDate) {\n                    me.setStartEndDate(occurrenceDate, occurrenceEndDate, true);\n                    // Since we've changed the event start date the recurrence \"Days\"/\"MonthDays\"/\"Months\"\n                    // might get redundant in case the event start date matches the fields values\n                    // Calling recurrence sanitize() will clean the fields in this case.\n                    recurrence.suspendTimeSpanNotifying();\n                    recurrence.sanitize();\n                    recurrence.resumeTimeSpanNotifying();\n                }\n                // Either way, because of adjustment above, or initial correctness, we are in sync\n                // with our recurrence rule. A RecurrenceIterator is now able to calculate a correct\n                // UNTIL date from a COUNT value. See AbstractRecurrenceIterator#processIterationConfig\n                meta.isSyncedWithRule = true;\n            }\n            // Generate an occurrence which references this as its parent\n            else {\n                occurrence = me.copy(\n                    {\n                        [fieldMap.id.dataSource]        : id,\n                        [fieldMap.startDate.dataSource] : occurrenceDate,\n                        [fieldMap.endDate.dataSource]   : occurrenceEndDate,\n                        [fieldMap.duration.dataSource]  : duration,\n                        constraintDate                  : null,\n                        constraintType                  : null\n                    },\n                    { creatingOccurrence : true }\n                );\n                occurrence.recurringTimeSpan = me;\n            }\n            globalOccurrences?.set(id, occurrence);\n            // A recurring timespan keeps a by-startDate index of occurrences.\n            // And itself will be among those.\n            occurrenceMap.set(occurrenceKey, occurrence);\n        }\n        return occurrence;\n    }\n    createRecurrenceKey(date = this.startDate, dateKey = null) {\n        return `_generated:${this.id}:${dateKey || DateHelper.makeKey(date)}`;\n    }\n    // Converts this occurrence to a new \"master\" event\n    convertToRealEvent(wasSet, silent) {\n        if (!this.isOccurrence) {\n            return;\n        }\n        const\n            me = this,\n            {\n                recurringTimeSpan,\n                resource,\n                occurrenceIndex,\n                recurrence\n            }               = me,\n            count           = recurrence && recurringTimeSpan.recurrence.count,\n            // resourceRecords is a temporary property of occurrence events to handle cases\n            // if only resources has been updated. (change only resources won't mark record as dirty)\n            newResource     = wasSet?.resourceRecords?.value || me.data.newResource;\n        recurringTimeSpan.beginBatch();\n        me.detachFromRecurringEvent();\n        me.clearChanges();\n        // Must silently set our own ID, not be the key generated from our parent id and occurrence date.\n        // Must not result in the id field being in the modified state.\n        me.setData('id', me.generateId(recurringTimeSpan.eventStore));\n        if (newResource) {\n            // clear resourceId to avoid auto-adding to assignmentStore, it is handled manually bellow\n            delete me.data.resourceId;\n        }\n        // The impending changes to the former parent recurring event trigger a full refresh.\n        recurringTimeSpan.eventStore.add(me, silent);\n        // Ensure that the original count is honoured.\n        // If we are the 8th occurrence of 10, OUR repeat count must be 3.\n        if (count) {\n            me.recurrence.count = count - occurrenceIndex;\n        }\n        if (newResource || resource) {\n            me.assign(newResource || resource);\n        }\n        // remove data after apply\n        if (newResource) {\n            delete me.data.resourceRecords;\n        }\n        if (wasSet) {\n            delete wasSet.resourceRecords;\n        }\n        // Any change to a recurring events triggers a store refresh event.\n        recurringTimeSpan.endBatch();\n    }\n    afterChange(toSet, wasSet, silent, ...args) {\n        const\n            me             = this,\n            { eventStore } = me;\n        // reset cached recurrence instance in case \"recurrenceRule\" is changed\n        if ('recurrenceRule' in wasSet) {\n            me._recurrence = null;\n            // If we are a recurring event, we must be in the recurringEvents cache.\n            // If we are *not* a recurring event, we must *not* be in there.\n            // An event not yet in a store (eg dragging to create) won't have an eventStore.\n            eventStore?.recurringEvents[wasSet.recurrenceRule.value ? 'add' : 'delete'](me);\n        }\n        // Any change to an occurrence adds it to an event store, at which point\n        // it ceases to be an occurrence.\n        //\n        // If it has a recurrenceRule it becomes the start of a new recurring event series,\n        // and the old owning recurring event stops on the day before.\n        //\n        // If it has no recurrenceRule, it becomes an exception to its owning recurring event.\n        if (me.isOccurrence) {\n            me.convertToRealEvent(wasSet, silent);\n        }\n        // Setting a newException date must mark the exceptionDates as modified\n        else if ('newExceptionDate' in wasSet) {\n            me.meta.modified.exceptionDates = true;\n            delete me.meta.modified.newExceptionDate;\n            // Remove any occurrence on that date from our by-startDate cache\n            // and from the global occurrences cache\n            me.removeOccurrence(wasSet.newExceptionDate.value);\n        }\n        return super.afterChange(toSet, wasSet, silent, ...args);\n    }\n    /**\n     * Detaches an occurrence from its owning recurring event so that it can be added to the eventStore\n     * either as an exception, or as the start of a new recurring sequence.\n     * @internal\n     * @category Recurrence\n     */\n    detachFromRecurringEvent() {\n        const\n            me                                    = this,\n            // For access further down, breaking the link involves engine if trying to get the occurrenceDate later,\n            // resulting in the wrong date\n            { recurringTimeSpan, occurrenceDate, startDate } = me;\n        // Break the link\n        me.recurringTimeSpan = null;\n        // The occurrenceDate is injected into the data when an occurrence is created.\n        // the recurringTimeSpan's afterChange will remove any cache occurrence\n        // for this date; see above\n        recurringTimeSpan.addExceptionDate(occurrenceDate);\n        // If we still have a recurrenceRule, we're being promoted to be a new recurring event.\n        // The recurrence setter applies the rule immediately to occurrences, so this will\n        // always be correct.\n        if (me.recurrenceRule) {\n            // The RecurrenceModel removes occurrences and exceptions after this date\n            recurringTimeSpan.recurrence.endDate = DateHelper.add(startDate, -1, 'minute');\n        }\n    }\n    /**\n     * The setter used by Model#inSet when {@link #function-addExceptionDate} is called.\n     * Adding an exception must trigger change processing in a recurring event, so it must\n     * be changed through a {@link Core.data.Model#function-set} call. Also, the change must be batchable\n     * with other changes.\n     * @private\n     * @readonly\n     * @category Recurrence\n     */\n    set newExceptionDate(date) {\n        if (date) {\n            const exceptionDates = this.exceptionDates || (this.exceptionDates = {});\n            exceptionDates[DateHelper.makeKey(date)] = 1;\n        }\n    }\n    /**\n     * Adds an exception date that should be skipped when generating occurrences for the timespan.\n     * The methods adds an entry to the array kept in {@link #field-exceptionDates} field.\n     * @param {Date} date Exception date.\n     * @internal\n     * @category Recurrence\n     */\n    addExceptionDate(newExceptionDate) {\n        return this.set({\n            newExceptionDate\n        });\n    }\n    /**\n     * Does this recurring event have an exception on the passed date.\n     * @param {Date} date The date to find an exception for.\n     * @returns {Boolean} `true` if the event has an exception starting on the passed date.\n     * @category Recurrence\n     */\n    hasException(date) {\n        return this.exceptionDates?.[DateHelper.makeKey(date)];\n    }\n};\n", "import DH from '../../../Core/helper/DateHelper.js';\nimport ArrayHelper from '../../../Core/helper/ArrayHelper.js';\nconst\n    oneDayMS = 1000 * 60 * 60 * 24;\n/**\n * @module Scheduler/model/mixin/EventModelMixin\n */\n/**\n * Predefined named colors (actual color might vary by theme):\n * <div class=\"b-colorbox b-inline b-sch-red\"></div>red,\n * <div class=\"b-colorbox b-inline b-sch-pink\"></div>pink,\n * <div class=\"b-colorbox b-inline b-sch-purple\"></div>purple,\n * <div class=\"b-colorbox b-inline b-sch-magenta\"></div>magenta,\n * <div class=\"b-colorbox b-inline b-sch-violet\"></div>violet,\n * <div class=\"b-colorbox b-inline b-sch-indigo\"></div>indigo,\n * <div class=\"b-colorbox b-inline b-sch-blue\"></div>blue,\n * <div class=\"b-colorbox b-inline b-sch-cyan\"></div>cyan,\n * <div class=\"b-colorbox b-inline b-sch-teal\"></div>teal,\n * <div class=\"b-colorbox b-inline b-sch-green\"></div>green,\n * <div class=\"b-colorbox b-inline b-sch-gantt-green\"></div>gantt-green\n * <div class=\"b-colorbox b-inline b-sch-lime\"></div>lime,\n * <div class=\"b-colorbox b-inline b-sch-yellow\"></div>yellow,\n * <div class=\"b-colorbox b-inline b-sch-orange\"></div>orange,\n * <div class=\"b-colorbox b-inline b-sch-deep-orange\"></div>deep-orange\n * <div class=\"b-colorbox b-inline b-sch-gray\"></div>gray\n * <div class=\"b-colorbox b-inline b-sch-light-gray\"></div>light-gray\n * @typedef {'red'|'pink'|'purple'|'magenta'|'violet'|'indigo'|'blue'|'cyan'|'teal'|'green'|'gantt-green'|'lime'|'yellow'|'orange'|'deep-orange'|'gray'|'light-gray'|String|null} EventColor\n */\n// Colors also specified in a static getter in TimelineEventRendering.js\n/**\n * Mixin that holds configuration shared between events in Scheduler and Scheduler Pro.\n * @mixin\n */\nexport default Target => class EventModelMixin extends Target {\n    static get $name() {\n        return 'EventModelMixin';\n    }\n    // Flag checked by EventStore to make sure it uses a valid subclass\n    static get isEventModel() {\n        return true;\n    }\n    /**\n     * Set value for the specified field(s), triggering engine calculations immediately. See\n     * {@link Core.data.Model#function-set Model#set()} for arguments.\n     *\n     * ```javascript\n     * eventRecord.set('duration', 4);\n     * // eventRecord.endDate is not yet calculated\n     *\n     * await eventRecord.setAsync('duration', 4);\n     * // eventRecord.endDate is calculated\n     * ```\n     *\n     * @param {String|Object} field The field to set value for, or an object with multiple values to set in one call\n     * @param {*} [value] Value to set\n     * @param {Boolean} [silent=false] Set to true to not trigger events. If event is recurring, occurrences won't be updated\n     * automatically.\n     * @function setAsync\n     * @category Editing\n     * @async\n     */\n    //region Fields\n    static get fields() {\n        return [\n            /**\n             * The start date of a time span (or Event / Task).\n             *\n             * Uses {@link Core/helper/DateHelper#property-defaultFormat-static DateHelper.defaultFormat} to convert a\n             * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and\n             * change the dateFormat for this field.\n             *\n             * UI fields representing this data field are disabled for summary tasks. See {@link #function-isEditable}\n             * for details.\n             *\n             * Note that the field always returns a `Date`.\n             *\n             * Also note that modifying the `startDate` at runtime will move the event in time, without affecting its\n             * duration (with reservation for other scheduling logic affecting the duration). If you want to change the\n             * `startDate` and `duration`, use {@link Scheduler/model/TimeSpan#function-setStartDate} instead (passing\n             * `false` as the second argument).\n             *\n             * @field {Date} startDate\n             * @accepts {String|Date}\n             * @category Scheduling\n             */\n            /**\n             * The end date of a time span (or Event / Task).\n             *\n             * Uses {@link Core/helper/DateHelper#property-defaultFormat-static DateHelper.defaultFormat} to convert a\n             * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and\n             * change the dateFormat for this field.\n             *\n             * UI fields representing this data field are disabled for summary tasks. See {@link #function-isEditable} for details.\n             *\n             * Note that the field always returns a `Date`.\n             *\n             * @field {Date} endDate\n             * @accepts {String|Date}\n             * @category Scheduling\n             */\n            /**\n             * The numeric part of the timespan's duration (the number of units).\n             *\n             * UI fields representing this data field are disabled for summary tasks. See {@link #function-isEditable}\n             * for details.\n             *\n             * @field {Number} duration\n             * @category Scheduling\n             */\n            /**\n             * Calculated field which encapsulates the duration's magnitude and unit. This field will not be persisted,\n             * setting it will update the {@link #field-duration} and\n             * {@link Scheduler.model.TimeSpan#field-durationUnit} fields.\n             *\n             * UI fields representing this data field are disabled for summary tasks. See {@link #function-isEditable}\n             * for details.\n             *\n             * @field {DurationConfig|Core.data.Duration} fullDuration\n             * @category Scheduling\n             */\n            /**\n             * The unique identifier of a task (mandatory)\n             * @field {String|Number} id\n             * @category Common\n             */\n            /**\n             * Id of the resource this event is associated with (only usable for single assignments). We recommend\n             * using assignments in an AssignmentStore over this approach. Internally any Event using `resourceId`\n             * will have an assignment in AssignmentStore generated.\n             * @field {String|Number} resourceId\n             * @category Common\n             */\n            {\n                name     : 'resourceId',\n                internal : true\n            },\n            /**\n             * Ids of the resources this event is associated with (can be used for for multiple assignments).\n             * Any event using `resourceIds` will have assignments in AssignmentStore generated automatically.\n             * It only applies if is configured with `perist: true`.\n             * ```javascript\n             *   class CustomEventModel extends EventModel {\n             *       static get $name() {\n             *           return 'CustomEventModel';\n             *       }\n             *\n             *       static get fields() {\n             *           return [\n             *               { name : 'resourceIds', persist : true }\n             *           ];\n             *       }\n             *   };\n             *\n             *   const\n             *       resources   = [\n             *           { id : 'r1', name : 'Celia' },\n             *           { id : 'r2', name : 'Lee' },\n             *           { id : 'r3', name : 'Macy' },\n             *           { id : 'r4', name : 'Madison' }\n             *       ],\n             *       events      = [\n             *           {\n             *               id          : 1,\n             *               resourceIds : ['r1', 'r2']\n             *               ...\n             *           },\n             *           {\n             *               id          : 2,\n             *               resourceIds : ['r3', 'r4']\n             *               ...\n             *           }\n             *       ];\n             *\n             *   const scheduler = new Scheduler({\n             *       ...\n             *       eventStore : {\n             *           modelClass : CustomEventModel,\n             *           data       : events\n             *       },\n             *       ...\n             *   });\n             * ```\n             * @field {String[]|Number[]} resourceIds\n             * @category Common\n             */\n            {\n                name     : 'resourceIds',\n                type     : 'array',\n                persist  : false,\n                internal : true\n            },\n            /**\n             * The array of {@link Scheduler.model.ResourceModel resources} which are assigned to this event.\n             * @field {Scheduler.model.ResourceModel[]} resources\n             * @category Common\n             */\n            {\n                name   : 'resources',\n                column : {\n                    type : 'resourceassignment'\n                },\n                persist  : false,\n                internal : true,\n                useProp  : true\n            },\n            /**\n             * Specify false to prevent the event from being dragged (if EventDrag feature is used)\n             * @field {Boolean} draggable\n             * @default true\n             * @category Interaction\n             */\n            {\n                name         : 'draggable',\n                type         : 'boolean',\n                persist      : false,\n                defaultValue : true,\n                internal     : true\n            },\n            /**\n             * Specify `false` to prevent the event from being resized (if EventResize feature is used). You can also\n             * specify `'start'` or `'end'` to only allow resizing in one direction\n             * @field {Boolean|String} resizable\n             * @default true\n             * @category Interaction\n             */\n            {\n                name         : 'resizable',\n                persist      : false,\n                defaultValue : true,\n                internal     : true\n            }, // true, false, 'start' or 'end'\n            /**\n             * A field marking event as all day(s) spanning event.\n             * For example, a holiday day may be represented by a `startDate`, and the `allDay` flag.\n             * @field {Boolean} allDay\n             * @category Scheduling\n             */\n            {\n                name         : 'allDay',\n                type         : 'boolean',\n                defaultValue : false\n            },\n            /**\n             * Controls this events appearance, see Schedulers\n             * {@link Scheduler.view.mixin.TimelineEventRendering#config-eventStyle eventStyle config} for\n             * available options.\n             * @field {'plain'|'border'|'colored'|'hollow'|'line'|'dashed'|'minimal'|'rounded'|'calendar'|'interday'|null} eventStyle\n             * @category Styling\n             */\n            {\n                name     : 'eventStyle',\n                internal : true\n            },\n            /**\n             * Controls the primary color of the event. For available standard colors, see\n             * {@link #typedef-EventColor}.\n             * @field {EventColor|String|null} eventColor\n             * @category Styling\n             */\n            {\n                name     : 'eventColor',\n                internal : true\n            },\n            /**\n             * Width (in px) to use for this milestone when using Scheduler#milestoneLayoutMode 'data'.\n             * @field {Number} milestoneWidth\n             * @category Styling\n             */\n            {\n                name     : 'milestoneWidth',\n                internal : true\n            },\n            /**\n             * Set this field to `false` to opt out of {@link Scheduler.feature.StickyEvents sticky event content}\n             * (keeping event text in view while scrolling).\n             * @field {Boolean} stickyContents\n             * @category Styling\n             */\n            {\n                name     : 'stickyContents',\n                internal : true\n            }\n        ];\n    }\n    //endregion\n    //region Id change\n    updateAssignmentEventIds() {\n        this.assigned.forEach(assignment => {\n            assignment.eventId = this.id;\n        });\n    }\n    syncId(value) {\n        super.syncId(value);\n        this.updateAssignmentEventIds();\n    }\n    //endregion\n    // This method is used by the `autoUpdateRecord` mode of the resource assignment field\n    // here we route the resources update to the correct setter\n    setValue(fieldName, value) {\n        if (fieldName === 'resource' && !this.usesSingleAssignment) {\n            this.resources = ArrayHelper.asArray(value) ?? [];\n        }\n        else {\n            return super.setValue(fieldName, value);\n        }\n    }\n    //region Resources\n    /**\n     * Returns all resources assigned to an event.\n     *\n     * @property {Scheduler.model.ResourceModel[]}\n     * @category Assignments & Resources\n     * @readonly\n     */\n    get resources() {\n        // Only include valid resources, to not have nulls in the result\n        return this.assignments.reduce((resources, { resource }) => {\n            resource && resources.push(resource.$original);\n            return resources;\n        }, []);\n    }\n    set resources(resources) {\n        resources = ArrayHelper.asArray(resources);\n        const\n            me             = this,\n            newResourceIds = resources.map(me.constructor.asId);\n        if (me.usesSingleAssignment) {\n            me.set('resourceId', newResourceIds[0]);\n        }\n        else if (me.fieldMap?.resourceIds.persist) {\n            me.resourceIds = newResourceIds;\n        }\n        else {\n            const\n                existingResourceIds                     = me.assignments.map(a => a.resource.id),\n                { onlyInA : toAdd, onlyInB : toRemove } = ArrayHelper.delta(newResourceIds, existingResourceIds);\n            // Add first, remove after. Otherwise event might get removed with its last assignment\n            me.assignmentStore.add(toAdd.map(resourceId => ({ resource : resourceId, event : me })));\n            me.assignmentStore.remove(toRemove.map(resourceId => me.assignments.find(a => a.resource.id === resourceId)));\n        }\n    }\n    /**\n     * Iterate over all associated resources\n     * @private\n     * @category Assignments & Resources\n     */\n    forEachResource(fn, thisObj = this) {\n        for (const resource of this.resources) {\n            if (fn.call(thisObj, resource) === false) {\n                return;\n            }\n        }\n    }\n    /**\n     * Returns either the resource associated with this event (when called w/o `resourceId`) or resource\n     * with specified id.\n     *\n     * @param {String} [resourceId] To retrieve a specific resource\n     * @returns {Scheduler.model.ResourceModel}\n     * @category Assignments & Resources\n     */\n    getResource(resourceId) {\n        if (resourceId == null) {\n            return this.resource;\n        }\n        return this.resourceStore ? this.resourceStore.getById(resourceId) : null;\n    }\n    //endregion\n    //region Dates\n    get startDate() {\n        let dt;\n        if (this.isOccurrence) {\n            dt = this.get('startDate');\n        }\n        else {\n            // Micro optimization to avoid expensive super call. super will be hit in Scheduler Pro\n            dt = this._startDate ?? super.startDate;\n        }\n        if (this.allDay) {\n            dt = this.constructor.getAllDayStartDate(dt);\n        }\n        return dt;\n    }\n    set startDate(startDate) {\n        if (this.batching) {\n            this._startDate = startDate;\n            this.set({ startDate });\n        }\n        else {\n            super.startDate = startDate;\n        }\n    }\n    get endDate() {\n        let dt;\n        if (this.isOccurrence) {\n            dt = this.get('endDate');\n        }\n        else {\n            // Micro optimization to avoid expensive super call. super will be hit in Scheduler Pro\n            dt = this._endDate ?? super.endDate;\n        }\n        if (this.allDay) {\n            dt = this.constructor.getAllDayEndDate(dt);\n        }\n        return dt;\n    }\n    set endDate(endDate) {\n        if (this.batching) {\n            this._endDate = endDate;\n            this.set({ endDate });\n        }\n        else {\n            super.endDate = endDate;\n        }\n    }\n    // Cannot use `convert` method because it might be disabled by `useRawData : true` and we always need to calculate\n    // that value\n    get wrapStartDate() {\n        return this.startDate;\n    }\n    set wrapStartDate(value) {}\n    get wrapEndDate() {\n        return this.endDate;\n    }\n    set wrapEndDate(value) {}\n    /**\n     * Shift the dates for the date range by the passed amount and unit\n     * @param {'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y'} unit The unit to shift by, see {@link Core.helper.DateHelper}\n     * for more information on valid formats.\n     * @param {Number} amount The amount to shift\n     * @returns {Promise} A promise which is resolved when shift calculations are done\n     * @async\n     * @method shift\n     * @category Scheduling\n     */\n    //endregion\n    //region Is\n    // Used internally to differentiate between Event and ResourceTimeRange\n    get isEvent() {\n        return true;\n    }\n    /**\n     * Returns true if event can be drag and dropped\n     * @property {Boolean}\n     * @category Editing\n     */\n    get isDraggable() {\n        return !this.readOnly && this.draggable;\n    }\n    /**\n     * Returns true if event can be resized, but can additionally return 'start' or 'end' indicating how this event can\n     * be resized.\n     *\n     * Milestones and parent events (that are not manuallyScheduled) cannot be resized.\n     *\n     * @property {Boolean|String}\n     * @readonly\n     * @category Editing\n     */\n    get isResizable() {\n        return !this.isMilestone && (!this.isParent || this.manuallyScheduled) && this.resizable;\n    }\n    /**\n     * Returns false if the event is not persistable. By default it always is, override this getter if you need\n     * custom logic.\n     *\n     * @property {Boolean}\n     * @readonly\n     * @category Editing\n     */\n    get isPersistable() {\n        // Records not yet fully created cannot be persisted\n        return super.isPersistable && !this.isCreating;\n    }\n    endBatch(silent, skipAccessors, triggerBeforeUpdate) {\n        const\n            me = this,\n            wasPersistable = me.isPersistable;\n        super.endBatch(silent, skipAccessors, triggerBeforeUpdate);\n        // If this event newly persistable, its assignments are eligible for syncing.\n        if (me.isPersistable && !wasPersistable && !me.ignoreBag && me.assigned) {\n            for (const assignment of me.assigned) {\n                assignment.stores.forEach(s =>\n                    s.updateModifiedBagForRecord(assignment)\n                );\n            }\n        }\n    }\n    get isCreating() {\n        return super.isCreating;\n    }\n    set isCreating(value) {\n        super.isCreating = value;\n        this.assignmentStore?.suspendAutoCommit();\n        this.assignments.forEach(record => record.isCreating = value);\n        this.assignmentStore?.resumeAutoCommit();\n    }\n    //endregion\n    //region Single assignment compatibility\n    get usesSingleAssignment() {\n        return !this.eventStore || this.eventStore.usesSingleAssignment;\n    }\n    copy(...args) {\n        const copy = super.copy(...args);\n        // Don't copy resourceId when using multi assignment\n        if (!this.usesSingleAssignment) {\n            copy.resourceId = null;\n        }\n        return copy;\n    }\n    /**\n     * Override persistable getter to prevent sending resourceId when using multiple resource assignment mode\n     * https://github.com/bryntum/support/issues/1345\n     * @private\n     */\n    get persistableData() {\n        const data = super.persistableData;\n        if (!this.usesSingleAssignment) {\n            delete data.resourceId;\n        }\n        return data;\n    }\n    /**\n     * Returns the first assigned resource, or assigns a resource\n     * @member {Scheduler.model.ResourceModel} resource\n     * @category Assignments & Resources\n     */\n    get resource() {\n        const { resources } = this;\n        return resources.length ? resources[0] : null;\n    }\n    set resource(resourceRecord) {\n        // Use the resourceId setter for single assignment\n        this.resourceId = this.constructor.asId(resourceRecord);\n    }\n    get resourceId() {\n        return this.usesSingleAssignment ? this.get('resourceId') : this.assignments[0]?.resourceId;\n    }\n    set resourceId(resourceId) {\n        this.applyResourceId(resourceId);\n    }\n    get resourceIds() {\n        if (this.fieldMap?.resourceIds.persist) {\n            return this.get('resourceIds');\n        }\n        else {\n            return this.resources?.map(r => r.id) ?? [];\n        }\n    }\n    set resourceIds(ids) {\n        this.set('resourceIds', ids);\n    }\n    // Resources + any links to any of them\n    get $linkedResources() {\n        return this.resources?.flatMap(resourceRecord => ([\n            resourceRecord,\n            ...resourceRecord.$links\n        ])) ?? [];\n    }\n    applyResourceId(resourceId, fromApplyValue = false) {\n        const\n            me                          = this,\n            { eventStore, assignments } = me;\n        // When part of an EventStore, resourceId are changed to be AssignmentModels\n        if (eventStore) {\n            // If not yet part of project, we cant resolve assignmentStore from ourselves\n            const assignmentStore = eventStore.assignmentStore || eventStore.crudManager?.assignmentStore;\n            if (resourceId != null) {\n                if (!me.meta.skipEnforcingSingleAssignment) {\n                    eventStore.usesSingleAssignment = true;\n                }\n                // Reassign if already assigned, only single assignment allowed\n                if (assignments?.length && resourceId !== assignments[0].resourceId) {\n                    //assignments[0].set('resourceId', resourceId, Boolean(me.eventStore.eventsSuspended));\n                    // Silent reassign if events are suspended on event store, won't be expecting UI update then\n                    const eventsSuspended = Boolean(eventStore.eventsSuspended);\n                    eventsSuspended && assignmentStore.suspendEvents();\n                    assignments[0].resource = resourceId;\n                    eventsSuspended && assignmentStore.resumeEvents();\n                }\n                // Otherwise assign\n                else {\n                    assignmentStore.assignEventToResource(me, resourceId);\n                }\n            }\n            // Setting resourceId to null removes all assignments, if resourceIds is not set\n            else if (me.usesSingleAssignment || me.resourceIds?.length) {\n                assignmentStore.remove(assignments);\n            }\n        }\n        // Not part of an EventStore, edge case. Set to data unless we are in such operation already\n        else if (!fromApplyValue) {\n            me.set({ resourceId });\n        }\n    }\n    applyResourceIds(resourceIds, fromApplyValue = false) {\n        const\n            me                          = this,\n            { eventStore, assignments } = me;\n        if (me.fieldMap['resourceIds'].persist === false) {\n            return false;\n        }\n        // Remove duplicated value\n        resourceIds = [...new Set(resourceIds)];\n        // When part of an EventStore, resourceIds are changed to be AssignmentModels\n        if (eventStore) {\n            // If not yet part of project, we cant resolve assignmentStore from ourselves\n            const assignmentStore = eventStore.assignmentStore || eventStore.crudManager?.assignmentStore;\n            if (resourceIds?.length) {\n                // If there are assignments, update them with new resourceIds. If resourceIds\n                // contains more elements than existing assignments, add new ones,\n                // otherwise remove excess assignments not used anymore\n                if (assignments?.length) {\n                    const eventsSuspended = Boolean(eventStore.eventsSuspended);\n                    eventsSuspended && assignmentStore.suspendEvents();\n                    assignments.forEach(assignment => {\n                        const resourceIdToUpdate = resourceIds.find(resourceId =>\n                            !assignments.some(a => a.resourceId === resourceId));\n                        if (resourceIdToUpdate) {\n                            assignment.resource = resourceIdToUpdate;\n                        }\n                    });\n                    const { onlyInA : toAdd, onlyInB: toRemove } = ArrayHelper.delta(resourceIds, assignments.map(assignment => assignment.resourceId));\n                    assignmentStore.add(toAdd.map(resourceId => ({ resource : resourceId, event : me })));\n                    assignmentStore.remove(toRemove.map(resourceId => assignments.find(a => a.resource.id === resourceId)));\n                    eventsSuspended && assignmentStore.resumeEvents();\n                }\n                // Otherwise assign\n                else {\n                    assignmentStore.add(resourceIds.map(resourceId => ({ resource : resourceId, event : me })));\n                }\n            }\n            else {\n                // Setting resourceIds to an empty list removes all assignments\n                assignmentStore.remove(assignments);\n            }\n        }\n        // Not part of an EventStore, edge case. Set to data unless we are in such operation already\n        else if (!fromApplyValue) {\n            me.set({ resourceIds });\n        }\n    }\n    // Special handling of setting resourceId and resourceIds, creates assignment\n    applyValue(useProp, mapping, value, skipAccessors, field) {\n        if (field && !this.meta.isAssigning) {\n            const { eventStore } = this;\n            switch (field.name) {\n                case 'resourceId':\n                    eventStore && (eventStore.isAssigning = true);\n                    this.applyResourceId(value, true);\n                    break;\n                case 'resourceIds':\n                    eventStore && (eventStore.isAssigning = true);\n                    this.applyResourceIds(value, true);\n                    break;\n            }\n            eventStore && (eventStore.isAssigning = false);\n        }\n        super.applyValue(useProp, mapping, value, skipAccessors, field);\n    }\n    //endregion\n    //region Assignment\n    /**\n     * Returns all assignments for the event. Event must be part of the store for this method to work.\n     * @property {Scheduler.model.AssignmentModel[]}\n     * @readonly\n     * @category Assignments & Resources\n     */\n    get assignments() {\n        return [...(this.assigned || [])];\n    }\n    /**\n     * Assigns this event to the specified resource.\n     *\n     * *Note:* The event must be part of an EventStore for this to work. If the EventStore uses single assignment\n     * (loaded using resourceId) existing assignments will always be removed.\n     *\n     * @param {Scheduler.model.ResourceModel|String|Number|Scheduler.model.ResourceModel[]|String[]|Number[]} resource A new resource for this event, either as a full\n     *        Resource record or an id (or an array of such).\n     * @param {Boolean} [removeExistingAssignments] `true` to first remove existing assignments\n     * @typings removeExistingAssignments -> {Boolean||Number}\n     * @category Assignments & Resources\n     * @typings async\n     */\n    assign(resource, removeExistingAssignments = false) {\n        const { eventStore } = this;\n        if (eventStore && !eventStore.usesSingleAssignment) {\n            eventStore.assignEventToResource(this, resource, removeExistingAssignments);\n        }\n        else {\n            // Remember what resource to assign,  directly in single assignment mode or for later when we are joined to\n            // an EventStore\n            this.resourceId = this.constructor.asId(resource);\n            if (!eventStore) {\n                // Prevent flagging EventStore as using single assignment when that happens, we cannot know that here\n                this.meta.skipEnforcingSingleAssignment = true;\n            }\n        }\n    }\n    /**\n     * Unassigns this event from the specified resource\n     *\n     * @param {Scheduler.model.ResourceModel|String|Number} [resource] The resource to unassign from.\n     * @category Assignments & Resources\n     * @typings async\n     */\n    unassign(resource, removingResource = false) {\n        const me = this;\n        resource = me.constructor.asId(resource);\n        // If unassigned is caused by removing the resource the UI should be able to find out to not do extra redraws etc.\n        me.meta.removingResource = removingResource;\n        me.eventStore?.unassignEventFromResource(me, resource);\n        me.meta.removingResource = null;\n    }\n    /**\n     * Reassigns an event from an old resource to a new resource\n     *\n     * @param {Scheduler.model.ResourceModel|String|Number} oldResourceId A resource to unassign from or its id\n     * @param {Scheduler.model.ResourceModel|String|Number} newResourceId A resource to assign to or its id\n     * @category Assignments & Resources\n     */\n    reassign(oldResourceId, newResourceId) {\n        this.eventStore && this.eventStore.reassignEventFromResourceToResource(this, oldResourceId, newResourceId);\n    }\n    /**\n     * Returns true if this event is assigned to a certain resource.\n     *\n     * @param {Scheduler.model.ResourceModel|String|Number} resource The resource to query for\n     * @returns {Boolean}\n     * @category Assignments & Resources\n     */\n    isAssignedTo(resource) {\n        const resourceId = this.constructor.asId(resource);\n        return this.assignments.some(assignment => assignment.resourceId === resourceId);\n    }\n    //endregion\n    //region Dependencies\n    /**\n     * Returns all predecessor dependencies of this event\n     *\n     * @readonly\n     * @property {Scheduler.model.DependencyBaseModel[]}\n     * @category Dependencies\n     */\n    get predecessors() {\n        return [...this.incomingDeps ?? []];\n    }\n    /**\n     * Returns all successor dependencies of this event\n     *\n     * @readonly\n     * @property {Scheduler.model.DependencyBaseModel[]}\n     * @category Dependencies\n     *\n     */\n    get successors() {\n        return [...this.outgoingDeps ?? []];\n    }\n    get dependencies() {\n        // Dependency feature listens for assignment changes pre commit, thus we risk deps not being set up yet\n        return [...this.incomingDeps ?? [], ...this.outgoingDeps ?? []];\n    }\n    //endregion\n    normalize() {\n        // Normalization handled by Engine\n    }\n    inSetNormalize() {\n        // Normalization handled by Engine\n    }\n    /**\n     * The \"main\" event this model is an occurrence of.\n     * Returns `null` for non-occurrences.\n     * @property {Scheduler.model.EventModel}\n     * @alias #Scheduler.model.mixin.RecurringTimeSpan#property-recurringTimeSpan\n     * @readonly\n     * @category Scheduling\n     */\n    get recurringEvent() {\n        return this.recurringTimeSpan;\n    }\n    /**\n     * Flag which indicates that this event is an interday event. This means that it spans\n     * an entire day or multiple days.\n     *\n     * This is essentially used by the Calendar package to determine if an event should\n     * go into the all day zone of a DayView.\n     *\n     * @property {Boolean}\n     * @readonly\n     * @category Scheduling\n     */\n    get isInterDay() {\n        const { durationMS } = this;\n        // A full day (86400000 or more) marks as it as interDay,\n        // which means it belongs in the all day row of a Calendar DayView\n        if (durationMS >= oneDayMS || (!durationMS && this.allDay)) {\n            return true;\n        }\n        // Working out whether it crosses midnight is a little more difficult\n        const\n            {\n                endDate,\n                startDate\n            } = this,\n            eventStartMidnight = DH.clearTime(startDate);\n        // If either is null or NaN, we have to answer falsy\n        if (startDate && endDate) {\n            eventStartMidnight.setDate(eventStartMidnight.getDate() + 1);\n            // If the endDate is past midnight, it's interDay and goes in the all day row of a Calendar DayView\n            return (endDate || DH.add(startDate, durationMS)) > eventStartMidnight;\n        }\n    }\n    //region All day statics\n    static getAllDayStartDate(dt) {\n        if (dt && dt.isEvent) {\n            dt = dt.get('startDate');\n        }\n        if (dt) {\n            dt = DH.clearTime(dt, true);\n        }\n        return dt;\n    }\n    static getAllDayEndDate(dt) {\n        if (dt && dt.isEvent) {\n            dt = dt.get('endDate');\n        }\n        if (dt && (dt.getHours() > 0 || dt.getMinutes() > 0 || dt.getSeconds() > 0 || dt.getMilliseconds() > 0)) {\n            dt = DH.getNext(dt, 'd', 1);\n        }\n        return dt;\n    }\n    static getAllDayDisplayStartDate(dt) {\n        if (dt && dt.isEvent) {\n            dt = dt.get('startDate');\n        }\n        return DH.clearTime(dt, true);\n    }\n    static getAllDayDisplayEndDate(startDate, endDate) {\n        if (startDate && startDate.isEvent) {\n            endDate   = startDate.get('endDate');\n            startDate = startDate.get('startDate');\n        }\n        if (endDate) {\n            startDate = this.constructor.getAllDayDisplayStartDate(startDate);\n            // If date falls on start of the day - subtract one day to show end date correctly\n            // e.g. event starts on 2017-01-01 00:00 and ends on 2017-01-02 00:00, editor should show\n            // 2017-01-01 for both start and end\n            if (DH.clearTime(endDate, true).valueOf() === endDate.valueOf()) {\n                endDate = DH.add(endDate, DH.DAY, -1);\n            }\n            else if (startDate.valueOf() !== endDate.valueOf()) {\n                endDate = DH.clearTime(endDate, true);\n            }\n        }\n        return endDate;\n    }\n    /**\n     * Defines if the given event field should be manually editable in UI.\n     * You can override this method to provide your own logic.\n     *\n     * By default, the method defines {@link #field-endDate}, {@link #field-duration} and {@link #field-fullDuration}\n     * fields editable for leaf events only (in case the event is part of a tree store) and all other fields as\n     * editable.\n     *\n     * @param {String} fieldName Name of the field\n     * @returns {Boolean} Returns `true` if the field is editable, `false` if it is not and `undefined` if the event has\n     * no such field.\n     * @category Editing\n     */\n    isEditable(fieldName) {\n        switch (fieldName) {\n            // end/duration is allowed to edit for leafs\n            case 'endDate' :\n            case 'duration' :\n            case 'fullDuration' :\n                return this.isLeaf;\n        }\n        return super.isEditable(fieldName);\n    }\n    //endregion\n};\n", "import { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { CorePartOfProjectModelMixin } from \"../mixin/CorePartOfProjectModelMixin.js\";\nimport DateHelper from \"../../../../Core/helper/DateHelper.js\";\n/**\n * Core event entity mixin type.\n *\n * At this level event is only aware about its dates\n * The functionality, related to the assignments etc is provided in other mixins.\n */\nexport class CoreEventMixin extends Mixin([CorePartOfProjectModelMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreEventMixin extends base {\n        constructor() {\n            super(...arguments);\n            this._startDate = null;\n            this._endDate = null;\n            this._duration = null;\n        }\n        // Proper engine defines these fields since they enter graph, thus we need them\n        static get fields() {\n            return [\n                { name: 'startDate', type: 'date' },\n                { name: 'endDate', type: 'date' },\n                { name: 'duration', type: 'number' },\n                { name: 'durationUnit', type: 'durationunit', defaultValue: 'day' }\n            ];\n        }\n        // Getters return current or proposed value\n        get startDate() { return this._startDate ?? this.get('startDate') ?? null; }\n        get endDate() { return this._endDate ?? this.get('endDate') ?? null; }\n        get duration() { return this._duration ?? this.get('duration') ?? null; }\n        // Route all setting through applyXX (setStartDate, startDate = , set('startDate'), batching)\n        set startDate(value) { this.proposeStartDate(value); }\n        set endDate(value) { this.proposeEndDate(value); }\n        set duration(value) { this.proposeDuration(value); }\n        //region Edge case normalization\n        inSet(field, value, silent, fromRelationUpdate, skipAccessors) {\n            const me = this;\n            // Catch \"normal\" set calls\n            if (me.project && !me.project.isWritingData && typeof field !== 'string' && !skipAccessors) {\n                // Flag fields as changed even if we are given a no-change value, to let calculations take decision on\n                // whether to keep duration or not\n                if ('startDate' in field && !('startDate' in me.$changed)) {\n                    me.$changed.startDate = true;\n                    me.invalidate();\n                }\n                if ('endDate' in field && !('endDate' in me.$changed)) {\n                    me.$changed.endDate = true;\n                    me.invalidate();\n                }\n            }\n            // @ts-ignore\n            return superProto.inSet.call(me, field, value, silent, fromRelationUpdate, skipAccessors);\n        }\n        //endregion\n        //region StartDate\n        getStartDate() {\n            return this.startDate;\n        }\n        proposeStartDate(startDate, keepDuration = !('endDate' in this.$changed)) {\n            if (this.inSetting || startDate?.getTime() !== this.startDate?.getTime()) {\n                this._startDate = startDate;\n                this.propose({ startDate, keepDuration });\n            }\n        }\n        async setStartDate(startDate, keepDuration = true) {\n            this.proposeStartDate(startDate, keepDuration);\n            return this.project?.commitAsync();\n        }\n        //endregion\n        //region EndDate\n        getEndDate() {\n            return this.endDate;\n        }\n        proposeEndDate(endDate, keepDuration = false) {\n            if (this.inSetting || endDate?.getTime() !== this.endDate?.getTime()) {\n                this._endDate = endDate;\n                this.propose({ endDate, keepDuration });\n            }\n        }\n        async setEndDate(endDate, keepDuration = false) {\n            this.proposeEndDate(endDate, keepDuration);\n            return this.project?.commitAsync();\n        }\n        //endregion\n        //region Duration\n        getDuration() {\n            return this.duration;\n        }\n        proposeDuration(duration, unit, keepStart = true) {\n            this._duration = duration;\n            this.propose({ duration, keepStart });\n            if (unit)\n                this.propose({ durationUnit: unit });\n        }\n        async setDuration(duration, unit, keepStart = true) {\n            this.proposeDuration(duration, unit, keepStart);\n            return this.project?.commitAsync();\n        }\n        getDurationUnit() {\n            return this.durationUnit;\n        }\n        //endregion\n        // When joining as part of inline data, store is available. If joining through load, it is passed\n        joinProject() {\n            const me = this;\n            const changed = me.$changed;\n            const startDate = me.getCurrentOrProposed('startDate');\n            const endDate = me.getCurrentOrProposed('endDate');\n            const duration = me.getCurrentOrProposed('duration');\n            // Initial values should be considered changed, to be normalized\n            if (startDate != null)\n                changed.startDate = me._startDate = startDate;\n            if (endDate != null)\n                changed.endDate = me._endDate = endDate;\n            if (duration != null)\n                changed.duration = me._duration = duration;\n            // Resolve assignments when event joins project after load\n            if (me.eventStore && !me.eventStore.isLoadingData) {\n                const unresolved = me.assignmentStore?.storage.findItem('event', null);\n                if (unresolved) {\n                    // To avoid n\u00B2 iterations over raw assignments we cache them by raw eventId, which saves us\n                    // some iterations over the storage\n                    // https://github.com/bryntum/support/issues/3141\n                    const cachedAssignments = me.assignmentStore?.storage.findItem('eventId', me.id);\n                    if (cachedAssignments) {\n                        for (const assignment of cachedAssignments) {\n                            assignment.setChanged('event', me);\n                        }\n                    }\n                    else {\n                        for (const assignment of unresolved) {\n                            if (assignment.getCurrentOrProposed('event') === me.id) {\n                                assignment.setChanged('event', me);\n                            }\n                        }\n                    }\n                }\n            }\n            superProto.joinProject.call(me);\n        }\n        // Mimic how proper engine applies values\n        applyValue(useProp, key, value, skipAccessors, field) {\n            // @ts-ignore\n            if ((this.project || this.recurringTimeSpan?.project) && field) {\n                const { name } = field;\n                if (name === 'startDate' || name == 'duration' || name === 'endDate') {\n                    useProp = true;\n                    // Update cached value\n                    this['_' + name] = value;\n                }\n                if (skipAccessors) {\n                    useProp = false;\n                }\n            }\n            superProto.applyValue.call(this, useProp, key, value, skipAccessors, field);\n        }\n        // Catch changes from batches etc. In which case it is sometimes expected for data to be available directly\n        afterChange(toSet, wasSet, silent, fromRelationUpdate, skipAccessors) {\n            if (!this.$isCalculating && !skipAccessors) {\n                // In certain scenarios data is expected to be available of the bat, messy!\n                this.setData({\n                    startDate: this.getCurrentOrProposed('startDate'),\n                    endDate: this.getCurrentOrProposed('endDate'),\n                    duration: this.getCurrentOrProposed('duration'),\n                    durationUnit: this.getCurrentOrProposed('durationUnit')\n                });\n            }\n            superProto.afterChange.call(this, toSet, wasSet, silent, fromRelationUpdate, skipAccessors);\n        }\n        // Normalizes dates & duration\n        calculateInvalidated() {\n            const me = this;\n            const changed = me.$changed;\n            const changedStart = 'startDate' in changed;\n            const changedEnd = 'endDate' in changed;\n            const changedDuration = 'duration' in changed;\n            const { startDate, endDate, duration, keepDuration, keepStart } = changed;\n            let calculate = null;\n            // Only start changed\n            if (changedStart && !changedEnd && !changedDuration) {\n                // Also null end when nulling start (keeping duration)\n                if (startDate === null) {\n                    changed.endDate = null;\n                }\n                // Start after end without keeping duration -> move end to start\n                else if (me.hasCurrentOrProposed('endDate') && startDate > me.getCurrentOrProposed('endDate') && !keepDuration) {\n                    changed.endDate = startDate;\n                    changed.duration = 0;\n                }\n                // Start changed and we either have a duration that we want to keep or no end -> calculate end\n                else if (me.hasCurrentOrProposed('duration') && (keepDuration || !me.hasCurrentOrProposed('endDate'))) {\n                    calculate = 'endDate';\n                }\n                // Start change and we have an end already -> calculate duration\n                else if (me.hasCurrentOrProposed('endDate')) {\n                    calculate = 'duration';\n                }\n            }\n            // Only end changed\n            else if (!changedStart && changedEnd && !changedDuration) {\n                // Also null start when nulling end (keeping duration)\n                if (endDate === null) {\n                    changed.startDate = null;\n                }\n                // End before start without keeping duration -> move start to end\n                else if (me.hasCurrentOrProposed('startDate') && !keepDuration && endDate !== true && endDate < me.getCurrentOrProposed('startDate')) {\n                    changed.startDate = endDate;\n                    changed.duration = 0;\n                }\n                // End changed and we either have a duration that we want to keep or no start -> calculate start\n                else if (me.hasCurrentOrProposed('duration') && (keepDuration || !me.hasCurrentOrProposed('startDate'))) {\n                    calculate = 'startDate';\n                }\n                // End changed and we have a start already -> calculate duration\n                else if (me.hasCurrentOrProposed('startDate')) {\n                    calculate = 'duration';\n                }\n            }\n            // Only duration changed\n            else if (!changedStart && !changedEnd && changedDuration) {\n                // Also null end when nulling duration (keeping start)\n                if (duration === null) {\n                    changed.endDate = null;\n                }\n                // Duration changed and we either have a start that we want to keep or no end -> calculate end\n                else if (me.hasCurrentOrProposed('startDate') && (keepStart || !me.hasCurrentOrProposed('endDate'))) {\n                    if (keepStart && changed.duration < 0) {\n                        changed.duration = 0;\n                    }\n                    calculate = 'endDate';\n                }\n                // Duration changed and we have an end already -> calculate start\n                else if (me.hasCurrentOrProposed('endDate')) {\n                    calculate = 'startDate';\n                }\n            }\n            // Start and end change, affect duration\n            else if (changedStart && changedEnd && !changedDuration) {\n                // Both nulled, null duration\n                if (startDate === null && endDate === null) {\n                    changed.duration = null;\n                }\n                // Other cases -> calculate duration\n                else {\n                    calculate = 'duration';\n                }\n            }\n            // Start and duration change -> calculate end\n            else if (changedStart && !changedEnd && changedDuration) {\n                calculate = 'endDate';\n            }\n            // End and duration changed -> calculate start\n            else if (!changedStart && changedEnd && changedDuration) {\n                calculate = 'startDate';\n            }\n            // All changed -> calculate whichever is null or by default end to be sure things add up\n            else if (changedStart && changedEnd && changedDuration) {\n                if (duration == null) {\n                    calculate = 'duration';\n                }\n                else if (startDate == null) {\n                    calculate = 'startDate';\n                }\n                else {\n                    calculate = 'endDate';\n                }\n            }\n            // Normalize if needed\n            const currentOrProposedStartDate = me.getCurrentOrProposed('startDate');\n            const currentOrProposedEndDate = me.getCurrentOrProposed('endDate');\n            const currentOrProposedDuration = me.getCurrentOrProposed('duration');\n            const currentOrProposedDurationUnit = me.getCurrentOrProposed('durationUnit');\n            const adjustDurationToDST = me.getProject()?.adjustDurationToDST ?? false;\n            switch (calculate) {\n                case 'startDate':\n                    const newStartDate = DateHelper.add(currentOrProposedEndDate, -currentOrProposedDuration, currentOrProposedDurationUnit);\n                    if (adjustDurationToDST) {\n                        const dstDiff = currentOrProposedEndDate.getTimezoneOffset() - newStartDate.getTimezoneOffset();\n                        newStartDate.setTime(newStartDate.getTime() - dstDiff * 60 * 1000);\n                    }\n                    changed.startDate = newStartDate;\n                    break;\n                case 'endDate':\n                    const newEndDate = DateHelper.add(currentOrProposedStartDate, currentOrProposedDuration, currentOrProposedDurationUnit);\n                    if (adjustDurationToDST) {\n                        const dstDiff = currentOrProposedStartDate.getTimezoneOffset() - newEndDate.getTimezoneOffset();\n                        newEndDate.setTime(newEndDate.getTime() - dstDiff * 60 * 1000);\n                    }\n                    changed.endDate = newEndDate;\n                    break;\n                case 'duration':\n                    let newDuration = DateHelper.diff(currentOrProposedStartDate, currentOrProposedEndDate, 'millisecond');\n                    if (adjustDurationToDST) {\n                        const dstDiff = currentOrProposedStartDate.getTimezoneOffset() - currentOrProposedEndDate.getTimezoneOffset();\n                        newDuration += dstDiff * 60 * 1000;\n                    }\n                    changed.duration = DateHelper.as(currentOrProposedDurationUnit, newDuration, 'millisecond');\n                    break;\n            }\n            if ('startDate' in changed && changed.startDate !== true)\n                this._startDate = changed.startDate;\n            if ('endDate' in changed && changed.endDate !== true)\n                this._endDate = changed.endDate;\n            if ('duration' in changed && changed.duration !== true)\n                this._duration = changed.duration;\n            // Clean up flags, not intended to be actually set\n            if (changed.startDate === true)\n                delete changed.startDate;\n            if (changed.endDate === true)\n                delete changed.endDate;\n            delete changed.keepDuration;\n            delete changed.keepStart;\n        }\n    }\n    return CoreEventMixin;\n}) {\n}\n", "import { Mixin } from \"../../../ChronoGraph/class/Mixin.js\";\nimport { AbstractPartOfProjectModelMixin } from './mixin/AbstractPartOfProjectModelMixin.js';\n/**\n * This is a mixin enabling events to handle assignments. It is mixed by CoreHasAssignmentsMixin and\n * BaseHasAssignmentsMixin. It provides a collection of all assignments, which reference this event.\n *\n * Doesn't affect scheduling.\n */\nexport class AbstractHasAssignmentsMixin extends Mixin([AbstractPartOfProjectModelMixin], (base) => {\n    const superProto = base.prototype;\n    class HasAssignmentsMixin extends base {\n        /**\n         * If a given resource is assigned to this task, returns a [[BaseAssignmentMixin]] instance for it.\n         * Otherwise returns `null`\n         */\n        getAssignmentFor(resource) {\n            // Bucket `assigned` might not be set up yet when using delayed calculations\n            for (const assignment of this.assigned ?? []) {\n                if (assignment.resource === resource)\n                    return assignment;\n            }\n            return null;\n        }\n        isAssignedTo(resource) {\n            return Boolean(this.getAssignmentFor(resource));\n        }\n        /**\n         * A method which assigns a resource to the current event\n         */\n        async assign(resource) {\n            const assignmentCls = this.project.assignmentStore.modelClass;\n            this.addAssignment(new assignmentCls({\n                event: this,\n                resource: resource\n            }));\n            return this.commitAsync();\n        }\n        /**\n         * A method which unassigns a resource from the current event\n         */\n        async unassign(resource) {\n            const assignment = this.getAssignmentFor(resource);\n            this.removeAssignment(assignment);\n            return this.commitAsync();\n        }\n        leaveProject() {\n            // `this.assigned` will be empty if model is added to project and then removed immediately\n            // w/o any propagations\n            // @ts-ignore\n            if (this.isInActiveTransaction && this.assigned) {\n                const eventStore = this.getEventStore();\n                // to batch the assignments removal, we don't remove the assignments right away, but instead\n                // add them for the batched removal to the `assignmentsForRemoval` property of the event store\n                this.assigned.forEach(assignment => eventStore.assignmentsForRemoval.add(assignment));\n            }\n            superProto.leaveProject.call(this, ...arguments);\n        }\n        remove() {\n            if (this.parent) {\n                // need to get the event store in advance, because after removal the project reference will be cleared (all that is what provide\n                // references to all stores\n                const eventStore = this.getEventStore();\n                superProto.remove.call(this);\n                eventStore && eventStore.afterEventRemoval();\n            }\n            else {\n                return superProto.remove.call(this);\n            }\n        }\n        // template methods, overridden in scheduling modes mixins\n        // should probably be named something like \"onEventAssignmentAdded\"\n        // should be a listener for the `add` event of the assignment store instead\n        addAssignment(assignment) {\n            this.getProject().assignmentStore.add(assignment);\n            return assignment;\n        }\n        // should be a listener for the `remove` event of the assignment store instead\n        removeAssignment(assignment) {\n            this.getProject().assignmentStore.remove(assignment);\n            return assignment;\n        }\n    }\n    return HasAssignmentsMixin;\n}) {\n}\n", "import { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { CoreEventMixin } from \"./CoreEventMixin.js\";\nimport ObjectHelper from \"../../../../Core/helper/ObjectHelper.js\";\nimport { AbstractHasAssignmentsMixin } from '../AbstractHasAssignmentsMixin.js';\n/**\n * This is a mixin, which can be applied to the [[CoreEventMixin]]. It provides the collection of all assignments,\n * which reference this event.\n *\n * Doesn't affect scheduling.\n */\nexport class CoreHasAssignmentsMixin extends Mixin([CoreEventMixin, AbstractHasAssignmentsMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreHasAssignmentsMixin extends base {\n        get assigned() {\n            return this.project?.assignmentStore.getEventsAssignments(this) ?? this.$cachedAssignments;\n        }\n        leaveProject(isReplacing = false) {\n            // Expected to still be able to return assignments when removed from project\n            this.$cachedAssignments = this.assigned;\n            super.leaveProject(isReplacing);\n        }\n        applyValue(useProp, key, value, skipAccessor, field) {\n            // Changing id on an event should update resourceId on its assignments\n            if (key === 'id') {\n                this.assigned?.forEach(assignment => assignment.set('eventId', value));\n            }\n            superProto.applyValue.call(this, useProp, key, value, skipAccessor, field);\n        }\n        copy(newId = null, deep = null) {\n            const copy = superProto.copy.call(this, newId, deep);\n            // If deep is everything but object - use default behavior, which is to invoke accessors\n            // If deep is an object, check if it has certain field disabled\n            if ((ObjectHelper.isObject(deep) && !deep.skipFieldIdentifiers) || !ObjectHelper.isObject(deep)) {\n                // Copy current assignments, used for occurrences\n                copy.$cachedAssignments = this.assigned;\n            }\n            return copy;\n        }\n    }\n    return CoreHasAssignmentsMixin;\n}) {\n}\n", "import { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { CoreEventMixin } from \"./CoreEventMixin.js\";\n/**\n * This is a mixin, which can be applied to the [[CoreEventMixin]]. It provides the collection of all dependencies,\n * which reference this event.\n *\n * Doesn't affect scheduling.\n */\nexport class CoreHasDependenciesMixin extends Mixin([CoreEventMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreHasDependenciesMixin extends base {\n        get outgoingDeps() {\n            return this.project.dependencyStore.getOutgoingDepsForEvent(this);\n        }\n        get incomingDeps() {\n            return this.project.dependencyStore.getIncomingDepsForEvent(this);\n        }\n        leaveProject() {\n            const eventStore = this.eventStore;\n            // the buckets may be empty if a model is removed from the project immediately after adding\n            // (without propagation)\n            if (this.outgoingDeps) {\n                this.outgoingDeps.forEach(dependency => eventStore.dependenciesForRemoval.add(dependency));\n            }\n            if (this.incomingDeps) {\n                this.incomingDeps.forEach(dependency => eventStore.dependenciesForRemoval.add(dependency));\n            }\n            superProto.leaveProject.call(this);\n        }\n    }\n    return CoreHasDependenciesMixin;\n}) {\n}\n", "import { Mixin } from '../../../../ChronoGraph/class/BetterMixin.js';\nimport { CoreEventMixin } from './CoreEventMixin.js';\nimport { CoreHasAssignmentsMixin } from \"./CoreHasAssignmentsMixin.js\";\nimport { CoreHasDependenciesMixin } from './CoreHasDependenciesMixin.js';\n/**\n * This is an event class, [[SchedulerCoreProjectMixin]] is working with.\n * It is constructed as [[CoreEventMixin]], enhanced with [[CoreHasAssignmentsMixin]] and [[CoreHasDependenciesMixin]]\n */\nexport class SchedulerCoreEvent extends Mixin([\n    CoreEventMixin,\n    CoreHasAssignmentsMixin,\n    CoreHasDependenciesMixin\n], (base) => {\n    const superProto = base.prototype;\n    class SchedulerCoreEvent extends base {\n    }\n    return SchedulerCoreEvent;\n}) {\n}\n", "import TimeSpan from './TimeSpan.js';\nimport RecurringTimeSpan from './mixin/RecurringTimeSpan.js';\nimport EventModelMixin from './mixin/EventModelMixin.js';\nimport PartOfProject from '../data/mixin/PartOfProject.js';\nimport { SchedulerCoreEvent } from '../../Engine/quark/model/scheduler_core/SchedulerCoreEvent.js';\nconst EngineMixin = SchedulerCoreEvent;\n/**\n * @module Scheduler/model/EventModel\n */\n/**\n * This class represent a single event in your schedule, usually added to a {@link Scheduler.data.EventStore}.\n *\n * It is a subclass of the {@link Scheduler.model.TimeSpan}, which is in turn subclass of {@link Core.data.Model}.\n * Please refer to documentation of that class to become familiar with the base interface of the event.\n *\n * ## Async date calculations\n *\n * A record created from an {@link Scheduler/model/EventModel} is normally part of an {@link Scheduler.data.EventStore},\n * which in turn is part of a project. When dates or the duration of an event is changed, the project performs async calculations\n * to normalize the other fields.\n * For example if {@link #field-duration} is changed, it will calculate {@link #field-endDate}.\n *\n * As a result of this being an async operation, the values of other fields are not guaranteed to be up to date\n * immediately after a change. To ensure data is up to date, await the calculations to finish.\n *\n * For example, {@link #field-endDate} is not up to date after this operation:\n *\n * ```javascript\n * eventRecord.duration = 5;\n * // endDate not yet calculated\n * ```\n *\n * But if calculations are awaited it is up to date:\n *\n * ```javascript\n * eventRecord.duration = 5;\n * await eventRecord.project.commitAsync();\n * // endDate is calculated\n * ```\n *\n * As an alternative, you can also use `setAsync()` to trigger calculations directly after the change:\n *\n * ```javascript\n * await eventRecord.setAsync({ duration : 5});\n * // endDate is calculated\n * ```\n *\n * ## Subclassing the Event model class\n * The Event model has a few predefined fields as seen below. If you want to add new fields or change the options for the existing fields,\n * you can do that by subclassing this class (see example below).\n *\n * ```javascript\n * class MyEvent extends EventModel {\n *\n *     static get fields() {\n *         return [\n *            // Add new field\n *            { name: 'myField', type : 'number', defaultValue : 0 }\n *         ];\n *     },\n *\n *     myCheckMethod() {\n *         return this.myField > 0\n *     },\n *\n *     ...\n * });\n * ```\n *\n * If you in your data want to use other names for the {@link #field-startDate}, {@link #field-endDate}, {@link #field-resourceId} and name fields you can configure\n * them as seen below:\n *\n * ```javascript\n * class MyEvent extends EventModel {\n *\n *     static get fields() {\n *         return [\n *            { name: 'startDate', dataSource : 'taskStart' },\n *            { name: 'endDate', dataSource : 'taskEnd', format: 'YYYY-MM-DD' },\n *            { name: 'resourceId', dataSource : 'userId' },\n *            { name: 'name', dataSource : 'taskTitle' },\n *         ];\n *     },\n *     ...\n * });\n * ```\n *\n * Please refer to {@link Core.data.Model} for additional details.\n *\n * @extends Scheduler/model/TimeSpan\n * @mixes Scheduler/model/mixin/RecurringTimeSpan\n * @mixes Scheduler/model/mixin/EventModelMixin\n */\nexport default class EventModel extends EngineMixin.derive(TimeSpan).mixin(\n    RecurringTimeSpan,\n    PartOfProject,\n    EventModelMixin\n) {\n    static get $name() {\n        return 'EventModel';\n    }\n}\nEventModel.exposeProperties();\nEventModel._$name = 'EventModel';", "import DayTime from '../../../Core/util/DayTime.js';\nimport EventDayIndex from '../util/EventDayIndex.js';\n/**\n * @module Scheduler/data/mixin/DayIndexMixin\n */\nconst { MIDNIGHT } = DayTime;\n/**\n * Mixing handling Calendars day indices.\n *\n * Consumed by EventStore in Scheduler & Scheduler Pro and TaskStore in Gantt.\n *\n * @mixin\n * @internal\n */\nexport default Target => class DayIndexMixin extends Target {\n    static $name = 'DayIndexMixin';\n    construct(config) {\n        super.construct(config);\n        this.dayIndices = null;\n    }\n    //region Keeping index in sync\n    // Override to syncIndices on initial load\n    afterLoadData() {\n        this.syncIndices('splice', this.storage.allValues);\n        super.afterLoadData?.();\n    }\n    /**\n     * Responds to mutations of the underlying storage Collection.\n     *\n     * Maintain indices for fast finding of events by date.\n     * @param {Object} event\n     * @private\n     */\n    onDataChange({ action, added, removed, replaced }) {\n        // Indices must be synced before responding to change\n        this.syncIndices(action, added, removed, replaced);\n        super.onDataChange(...arguments);\n    }\n    onDataReplaced(action, data) {\n        // Indices must be synced before responding to change\n        this.syncIndices('clear');\n        this.syncIndices('splice', this.storage.values);\n        super.onDataReplaced(action, data);\n    }\n    onModelChange(record, toSet, wasSet, silent, fromRelationUpdate) {\n        // Ensure by-date indices are up to date.\n        if (('startDate' in wasSet) || ('endDate' in wasSet)) {\n            this.syncIndices('reschedule', [record], null, null, wasSet);\n        }\n        super.onModelChange(...arguments);\n    }\n    //endregion\n    //region Index\n    /**\n     * Invalidates associated day indices.\n     * @internal\n     */\n    invalidateDayIndices() {\n        this.dayIndices?.forEach(dayIndex => dayIndex.invalidate());\n    }\n    /**\n     * Registers a `DayTime` instance, creating an `EventDayIndex` for each distinct `startShift`. This index is\n     * maintained until all instances with a matching `startShift` are {@link #function-unregisterDayIndex unregistered}.\n     * @param {Core.util.DayTime} dayTime The instance to register.\n     * @internal\n     * @category Indexing\n     */\n    registerDayIndex(dayTime) {\n        const\n            me = this,\n            dayIndices = me.dayIndices || (me.dayIndices = []);\n        let dayIndex, i;\n        for (i = 0; !dayIndex && i < dayIndices.length; ++i) {\n            if (dayIndices[i].matches(dayTime)) {\n                (dayIndex = dayIndices[i]).register(dayTime);\n            }\n        }\n        !dayIndex && dayIndices.push(dayIndex = new EventDayIndex(me, dayTime));\n        return dayIndex;\n    }\n    syncIndices(...args) {\n        this.dayIndices?.forEach(dayIndex => dayIndex.sync(...args));\n    }\n    /**\n     * Removes a registered `DayTime` instance. If this is the last instance registered to an `EventDayIndex`, that\n     * index is removed.\n     * @param {Core.util.DayTime} dayTime The instance to unregister.\n     * @internal\n     * @category Indexing\n     */\n    unregisterDayIndex(dayTime) {\n        const\n            me = this,\n            { dayIndices } = me;\n        for (let i = dayIndices?.length; i-- > 0; /* empty */) {\n            if (dayIndices[i].matches(dayTime)) {\n                if (dayIndices[i].unregister(dayTime)) {\n                    dayIndices.splice(i, 1);\n                }\n                break;\n            }\n        }\n    }\n    /**\n     * Returns the `EventDayIndex` to use for the given `DayTime` instance. This may be the primary instance or a\n     * child instance created by {@link #function-registerDayIndex}.\n     * @param {Core.util.DayTime} dayTime The `DayTime` of the desired index.\n     * @returns {Scheduler.data.util.EventDayIndex}\n     * @private\n     * @category Indexing\n     */\n    useDayIndex(dayTime) {\n        const\n            me             = this,\n            { dayIndices } = me;\n        dayTime = dayTime || MIDNIGHT;\n        for (let i = 0; dayIndices && i < dayIndices.length; ++i) {\n            if (dayIndices[i].matches(dayTime)) {\n                return dayIndices[i];\n            }\n        }\n        if (dayTime.startShift) {\n            throw new Error(`No day index registered for ${dayTime} on ${me.id}`);\n        }\n        return me.registerDayIndex(MIDNIGHT);\n    }\n    //endregion\n};\n", "import { Mixin } from \"../../../ChronoGraph/class/Mixin.js\";\nimport { AbstractPartOfProjectStoreMixin } from \"./mixin/AbstractPartOfProjectStoreMixin.js\";\nconst dataAddRemoveActions = {\n    splice: 1,\n    clear: 1\n};\n// Shared functionality for CoreEventStore & ChronoEventStore\nexport class AbstractEventStoreMixin extends Mixin([AbstractPartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class AbstractEventStoreMixin extends base {\n        constructor() {\n            super(...arguments);\n            this.assignmentsForRemoval = new Set();\n            this.dependenciesForRemoval = new Set();\n        }\n        // we need `onDataChange` for `syncDataOnLoad` option to work\n        onDataChange(event) {\n            // remove from a filter action must be ignored.\n            const isAddRemove = dataAddRemoveActions[event.action];\n            super.onDataChange(event);\n            if (isAddRemove && event.removed?.length)\n                this.afterEventRemoval();\n        }\n        // it seems `onDataChange` is not triggered for `remove` with `silent` flag\n        remove(records, silent) {\n            const res = superProto.remove.call(this, records, silent);\n            this.afterEventRemoval();\n            return res;\n        }\n        // it seems `onDataChange` is not triggered for `TreeStore#removeAll()`\n        removeAll(silent) {\n            const res = superProto.removeAll.call(this, silent);\n            this.afterEventRemoval();\n            return res;\n        }\n        onNodeRemoveChild(parent, children, index, flags) {\n            // @ts-ignore\n            const removed = superProto.onNodeRemoveChild.call(this, ...arguments);\n            this.afterEventRemoval();\n            return removed;\n        }\n        afterEventRemoval() {\n            const { assignmentsForRemoval, dependenciesForRemoval } = this;\n            // Can be called from `set data` during construction\n            if (!assignmentsForRemoval)\n                return;\n            // ORDER IS IMPORTANT!\n            // First remove assignments\n            const assignmentStore = this.getAssignmentStore();\n            if (assignmentStore && !assignmentStore.allAssignmentsForRemoval && assignmentsForRemoval.size) {\n                const toRemove = [...assignmentsForRemoval].filter(assignment => !assignmentStore.assignmentsForRemoval.has(assignment));\n                toRemove.length > 0 && assignmentStore.remove(toRemove);\n            }\n            assignmentsForRemoval.clear();\n            // Then remove dependencies\n            const dependencyStore = this.getDependencyStore();\n            if (dependencyStore && !dependencyStore.allDependenciesForRemoval && dependenciesForRemoval.size) {\n                const toRemove = [...dependenciesForRemoval].filter(dependency => !dependencyStore.dependenciesForRemoval.has(dependency));\n                toRemove.length > 0 && dependencyStore.remove(toRemove);\n            }\n            dependenciesForRemoval.clear();\n        }\n        processRecord(eventRecord, isDataset = false) {\n            if (!this.project?.isRepopulatingStores) {\n                const existingRecord = this.getById(eventRecord.id);\n                const isReplacing = existingRecord && existingRecord !== eventRecord;\n                //@ts-ignore\n                if (isReplacing && existingRecord.assigned) {\n                    //@ts-ignore\n                    for (const assignment of existingRecord.assigned) {\n                        assignment.event = eventRecord;\n                    }\n                }\n            }\n            return eventRecord;\n        }\n    }\n    return AbstractEventStoreMixin;\n}) {\n}\n", "import { Mixin } from \"../../../ChronoGraph/class/BetterMixin.js\";\nimport { SchedulerCoreEvent } from \"../model/scheduler_core/SchedulerCoreEvent.js\";\nimport { CorePartOfProjectStoreMixin } from \"./mixin/CorePartOfProjectStoreMixin.js\";\nimport { AbstractEventStoreMixin } from \"./AbstractEventStoreMixin.js\";\n/**\n * A store mixin class, that represent collection of all events in the [[SchedulerCoreProjectMixin|project]].\n */\nexport class CoreEventStoreMixin extends Mixin([AbstractEventStoreMixin, CorePartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreEventStoreMixin extends base {\n        static get defaultConfig() {\n            return {\n                modelClass: SchedulerCoreEvent\n            };\n        }\n        joinProject() {\n            this.assignmentStore?.linkAssignments(this, 'event');\n        }\n        afterLoadData() {\n            this.afterEventRemoval();\n            this.assignmentStore?.linkAssignments(this, 'event');\n        }\n    }\n    return CoreEventStoreMixin;\n}) {\n}\n// /**\n//  * The tree store version of [[EventStoreMixin]].\n//  */\n// export class EventTreeStoreMixin extends Mixin(\n//     [ EventStoreMixin ],\n//     (base : AnyConstructor<EventStoreMixin, typeof EventStoreMixin>) => {\n//\n//     const superProto : InstanceType<typeof base> = base.prototype\n//\n//\n//         class EventTreeStoreMixin extends base {\n//             rootNode            : SchedulerBasicProjectMixin\n//\n//             buildRootNode () : object {\n//                 return this.getProject() || {}\n//             }\n//\n//\n//             static get defaultConfig () : object {\n//                 return {\n//                     tree        : true\n//                 }\n//             }\n//         }\n//\n//         return EventTreeStoreMixin\n//     }){}\n//\n", "import AjaxStore from '../../Core/data/AjaxStore.js';\nimport EventStoreMixin from './mixin/EventStoreMixin.js';\nimport GetEventsMixin from './mixin/GetEventsMixin.js';\nimport DayIndexMixin from './mixin/DayIndexMixin.js';\nimport RecurringEventsMixin from './mixin/RecurringEventsMixin.js';\nimport EventModel from '../model/EventModel.js';\nimport PartOfProject from './mixin/PartOfProject.js';\nimport { CoreEventStoreMixin } from '../../Engine/quark/store/CoreEventStoreMixin.js';\nimport PartOfBaseProject from './mixin/PartOfBaseProject.js';\nconst EngineMixin = PartOfProject(CoreEventStoreMixin.derive(AjaxStore));\n/**\n * @module Scheduler/data/EventStore\n */\n/**\n * A store holding all the {@link Scheduler.model.EventModel events} to be rendered into a {@link Scheduler.view.Scheduler Scheduler}.\n *\n * This store only accepts a model class inheriting from {@link Scheduler.model.EventModel}.\n *\n * An EventStore is usually connected to a project, which binds it to other related stores (AssignmentStore,\n * ResourceStore and DependencyStore). The project also handles normalization/calculation of the data on the records in\n * the store. For example if a record is added with a `startDate` and an `endDate`, it will calculate the `duration`.\n *\n * The calculations happens async, records are not guaranteed to have up to date data until they are finished. To be\n * certain that calculations have finished, call `await project.commitAsync()` after store actions. Or use one of the\n * `xxAsync` functions, such as `loadDataAsync()`.\n *\n * Using `commitAsync()`:\n *\n * ```javascript\n * eventStore.data = [{ startDate, endDate }, ...];\n *\n * // duration of the record is not yet calculated\n *\n * await eventStore.project.commitAsync();\n *\n * // now it is\n * ```\n *\n * Using `loadDataAsync()`:\n *\n * ```javascript\n * await eventStore.loadDataAsync([{ startDate, endDate }, ...]);\n *\n * // duration is calculated\n * ```\n *\n * ## Using recurring events\n * When recurring events are in the database, **all recurring event definitions** which started before\n * the requested start date, and have not yet finished recurring MUST be loaded into the EventStore.\n *\n * Only the **base** recurring event **definitions** are stored in the EventStore. You do not\n * need to calculate the future occurrence dates of these events. This is all handled by the EventStore.\n *\n * When asked to yield a set of events for a certain date range for creating a UI through\n * {@link #function-getEvents}, the EventStore *automatically* interpolates any occurrences of\n * recurring events into the results. They do not occupy slots in the EventStore for every date\n * in their repetition range (that would be very inefficient, and *might* be infinite).\n *\n * @mixes Scheduler/data/mixin/PartOfProject\n * @mixes Scheduler/data/mixin/EventStoreMixin\n * @mixes Scheduler/data/mixin/RecurringEventsMixin\n * @mixes Scheduler/data/mixin/GetEventsMixin\n * @extends Core/data/AjaxStore\n */\nexport default class EventStore extends EngineMixin.mixin(\n    RecurringEventsMixin,\n    EventStoreMixin,\n    DayIndexMixin,\n    GetEventsMixin\n) {\n    static $name = 'EventStore';\n    static get defaultConfig() {\n        return {\n            /**\n             * Class used to represent records\n             * @config {Scheduler.model.EventModel}\n             * @typings {typeof EventModel}\n             * @default\n             * @category Common\n             */\n            modelClass : EventModel\n        };\n    }\n}\nEventStore._$name = 'EventStore';", "/**\n * @module Scheduler/model/mixin/AssignmentModelMixin\n */\n/**\n * Mixin that holds configuration shared between assignments in Scheduler and Scheduler Pro.\n * @mixin\n */\nexport default Target => class AssignmentModelMixin extends Target {\n    static get $name() {\n        return 'AssignmentModelMixin';\n    }\n    /**\n     * Set value for the specified field(s), triggering engine calculations immediately. See\n     * {@link Core.data.Model#function-set Model#set()} for arguments.\n     *\n     * ```javascript\n     * assignment.set('resourceId', 2);\n     * // assignment.resource is not yet resolved\n     *\n     * await assignment.setAsync('resourceId', 2);\n     * // assignment.resource is resolved\n     * ```\n     *\n     * @param {String|Object} field The field to set value for, or an object with multiple values to set in one call\n     * @param {*} [value] Value to set\n     * @param {Boolean} [silent=false] Set to true to not trigger events\n     * automatically.\n     * @function setAsync\n     * @category Editing\n     * @async\n     */\n    //region Fields\n    static get fields() {\n        return [\n            /**\n             * Id for the resource to assign to\n             * @field {String|Number} resourceId\n             * @category Common\n             */\n            'resourceId',\n            /**\n             * Id for the event to assign\n             * @field {String|Number} eventId\n             * @category Common\n             */\n            'eventId',\n            /**\n             * Specify `false` to opt out of drawing dependencies from/to this assignment\n             * @field {Boolean} drawDependencies\n             * @category Common\n             */\n            { name : 'drawDependencies', type : 'boolean' },\n            'event',\n            'resource'\n        ];\n    }\n    //endregion\n    construct(data, ...args) {\n        data = data || {};\n        const\n            { fieldMap }    = this,\n            eventIdField    = fieldMap.eventId.dataSource,\n            resourceIdField = fieldMap.resourceId.dataSource,\n            eventField      = fieldMap.event.dataSource,\n            resourceField   = fieldMap.resource.dataSource,\n            eventId         = data[eventIdField],\n            resourceId      = data[resourceIdField],\n            event           = data[eventField],\n            resource        = data[resourceField];\n        // Engine expects event and resource, not eventId and resourceId. We need to support both\n        if (eventId != null) {\n            data[eventField] = eventId;\n        }\n        else if (event != null) {\n            data[eventIdField] = event.isModel ? event.id : event;\n        }\n        if (resourceId != null) {\n            data[resourceField] = resourceId;\n        }\n        else if (resource != null) {\n            data[resourceIdField] = resource.isModel ? resource.id : resource;\n        }\n        super.construct(data, ...args);\n    }\n    //region Event & resource\n    /**\n     * A key made up from the event id and the id of the resource assigned to.\n     * @property eventResourceKey\n     * @readonly\n     * @internal\n     */\n    get eventResourceKey() {\n        return this.buildEventResourceKey(this.event, this.resource);\n    }\n    buildEventResourceKey(event, resource) {\n        let eventKey, resourceKey;\n        if (event) {\n            eventKey = event.isModel ? event.id : event;\n        }\n        else {\n            eventKey = this.internalId;\n        }\n        if (resource) {\n            resourceKey = resource.isModel ? resource.id : resource;\n        }\n        else {\n            resourceKey = this.internalId;\n        }\n        return `${eventKey}-${resourceKey}`;\n    }\n    buildIndexKey({ event, resource }) {\n        return this.buildEventResourceKey(event, resource);\n    }\n    set(field, value, ...args) {\n        const toSet = this.fieldToKeys(field, value);\n        // If resource was set, store its id as resourceId and announce it\n        if ('resource' in toSet) {\n            if (toSet.resource?.id !== undefined) {\n                toSet.resourceId = toSet.resource.id;\n            }\n        }\n        // If resourceId was set, we need to replace resource to have it re-referenced in engine\n        else if ('resourceId' in toSet && this.constructor.isProAssignmentModel) {\n            toSet.resource = toSet.resourceId;\n        }\n        // Same for event\n        if ('event' in toSet) {\n            if (toSet.event?.id !== undefined) {\n                toSet.eventId = toSet.event.id;\n            }\n        }\n        else if ('eventId' in toSet && this.constructor.isProAssignmentModel) {\n            toSet.event = toSet.eventId;\n        }\n        return super.set(toSet, null, ...args);\n    }\n    afterChange(toSet, wasSet, silent, fromRelationUpdate, skipAccessors) {\n        const me = this;\n        // Make sure Core Engine implementation notices \"resourceId\" change\n        // and updates \"resource\" field value respectively\n        if (!me.constructor.isProAssignmentModel && wasSet?.resourceId &&\n            me.resource?.id !== wasSet.resourceId.value) {\n            me.resource = wasSet.resourceId.value;\n        }\n        // If that's non-Core Engine and we have \"eventId\" indicated as just set\n        // and there was also \"event\" passed to set but it was not set\n        // and if that happens when propagating after sync-response applied\n        // - this means an event has changed its identifier\n        // (this fixes 11_backend.t.js in the Gantt)\n        else if (me.constructor.isProAssignmentModel && me.project?.propagatingSyncChanges &&\n            wasSet?.eventId && !wasSet?.event &&\n            (toSet.event.value === wasSet.eventId.value || toSet.event.value.id === wasSet.eventId.value)\n        ) {\n            // sanitize both wasSet and meta.modified\n            delete wasSet.eventId;\n            delete me.meta.modified.eventId;\n        }\n        return super.afterChange(...arguments);\n    }\n    // Settings resourceId relays to `resource`. Underlying data will be updated in `afterChange()` above\n    set resourceId(value) {\n        const { resource } = this;\n        // When assigning a new id to a resource, it will update the resourceId of the assignment. But the assignments\n        // resource is still the same so we need to announce here\n        if (resource?.isModel && resource.id === value) {\n            this.set('resourceId', value);\n        }\n        else {\n            this.resource = value;\n        }\n    }\n    get resourceId() {\n        // If assigned using `resource` and not `resourceId` there will be no resourceId\n        return this.resource?.id ?? this.get('resourceId');\n    }\n    // Same for event as for resourceId\n    set eventId(value) {\n        const { event } = this;\n        // When assigning a new id to an event, it will update the eventId of the assignment. But the assignments\n        // event is still the same so we need to announce here\n        if (event?.isModel && event.id === value) {\n            this.set('eventId', value);\n        }\n        else {\n            this.event = value;\n        }\n    }\n    get eventId() {\n        // If assigned using `event` and not `eventId` there will be no eventId\n        return this.event?.id ?? this.get('eventId');\n    }\n    /**\n     * Convenience property to get the name of the associated event.\n     * @property {String}\n     * @readonly\n     */\n    get eventName() {\n        return this.event?.name;\n    }\n    /**\n     * Convenience property to get the name of the associated resource.\n     * @property {String}\n     * @readonly\n     */\n    get resourceName() {\n        return this.resource?.name;\n    }\n    /**\n     * Returns the resource associated with this assignment.\n     *\n     * @returns {Scheduler.model.ResourceModel} Instance of resource\n     */\n    getResource() {\n        return this.resource;\n    }\n    //endregion\n    // Convenience getter to not have to check `instanceof AssignmentModel`\n    get isAssignment() {\n        return true;\n    }\n    /**\n     * Returns true if the Assignment can be persisted (e.g. task and resource are not 'phantoms')\n     *\n     * @property {Boolean}\n     */\n    get isPersistable() {\n        const\n            {\n                event,\n                resource,\n                unjoinedStores,\n                assignmentStore\n            }           = this,\n            crudManager = assignmentStore?.crudManager;\n        let result;\n        if (assignmentStore) {\n            // If the owning event is not persistable, this assignment is also not persistable.\n            // if crud manager is used it can deal with phantom event/resource since it persists all records in one batch\n            // if no crud manager used we have to wait till event/resource are persisted\n            result = this.isValid && event.isPersistable && (crudManager || !event.hasGeneratedId && !resource.hasGeneratedId);\n        }\n        // if we remove the record\n        else {\n            result = !this.isPhantom && Boolean(unjoinedStores[0]);\n        }\n        // Records not yet fully created cannot be persisted\n        return result && super.isPersistable && !this.event?.isCreating;\n    }\n    get isValid() {\n        return this.resource != null && this.event != null;\n    }\n    /**\n     * Returns a textual representation of this assignment (e.g. Mike 50%).\n     * @returns {String}\n     */\n    toString() {\n        if (this.resourceName) {\n            return `${this.resourceName} ${Math.round(this.units)}%`;\n        }\n        return '';\n    }\n    //region STM hooks\n    shouldRecordFieldChange(fieldName, oldValue, newValue) {\n        if (!super.shouldRecordFieldChange(fieldName, oldValue, newValue)) {\n            return false;\n        }\n        if (fieldName === 'event' || fieldName === 'eventId') {\n            const eventStore = this.project?.eventStore;\n            if (eventStore && eventStore.oldIdMap[oldValue] === eventStore.getById(newValue)) {\n                return false;\n            }\n        }\n        if (fieldName === 'resource' || fieldName === 'resourceId') {\n            const resourceStore = this.project?.resourceStore;\n            if (resourceStore && resourceStore.oldIdMap[oldValue] === resourceStore.getById(newValue)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    //endregion\n};\n", "import { Mixin, isInstanceOf } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { CorePartOfProjectModelMixin } from \"../mixin/CorePartOfProjectModelMixin.js\";\nimport { CoreEventMixin } from \"./CoreEventMixin.js\";\nimport { CoreResourceMixin } from \"./CoreResourceMixin.js\";\nfunction asId(recordOrId) {\n    return recordOrId?.isModel ? recordOrId.id : recordOrId;\n}\n/**\n * Core assignment model class. It just contains references to the [[CoreEventMixin|event]] and [[CoreResourceMixin|resource]] being assigned.\n */\nexport class CoreAssignmentMixin extends Mixin([CorePartOfProjectModelMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreAssignmentMixin extends base {\n        // Fields declared in the Model way, existing decorators all assume ChronoGraph is used\n        static get fields() {\n            return [\n                // isEqual required to properly detect changed resource / event\n                { name: 'resource', isEqual: (a, b) => a === b, persist: false },\n                { name: 'event', isEqual: (a, b) => a === b, persist: false }\n            ];\n        }\n        // Resolve early + update indices to have buckets ready before commit\n        setChanged(field, value, invalidate) {\n            const { assignmentStore, eventStore, resourceStore, project } = this;\n            let update = false;\n            if (field === 'event') {\n                const event = isInstanceOf(value, CoreEventMixin) ? value : eventStore?.$master.getById(value);\n                if (event)\n                    update = true;\n                value = event || value;\n            }\n            if (field === 'resource') {\n                const resource = isInstanceOf(value, CoreResourceMixin) ? value : resourceStore?.$master.getById(value);\n                if (resource)\n                    update = true;\n                value = resource || value;\n            }\n            // Passing true as last arg, bucket expected to work before commit\n            superProto.setChanged.call(this, field, value, invalidate, true);\n            // Update on resolve, if this is a single operation and record is part of project (might be standalone record)\n            if (assignmentStore && update && !project.isPerformingCommit && !assignmentStore.isLoadingData && !resourceStore?.isLoadingData && !assignmentStore.skipInvalidateIndices) {\n                assignmentStore.invalidateIndices();\n            }\n        }\n        // Resolve event and resource when joining project\n        joinProject() {\n            superProto.joinProject.call(this);\n            this.setChanged('event', this.get('event'));\n            this.setChanged('resource', this.get('resource'));\n        }\n        // Resolved resource & event as part of commit\n        // Normally done earlier in setChanged, but stores might not have been available yet at that point\n        calculateInvalidated() {\n            // Changed values, should be used instead of current where available\n            let { event = this.event, resource = this.resource } = this.$changed;\n            if (event !== null && !(isInstanceOf(event, CoreEventMixin))) {\n                const resolved = this.eventStore?.getById(event);\n                if (resolved)\n                    this.setChanged('event', resolved, false);\n            }\n            if (resource !== null && !(isInstanceOf(resource, CoreResourceMixin))) {\n                const resolved = this.resourceStore?.getById(resource);\n                if (resolved)\n                    this.setChanged('resource', resolved, false);\n            }\n        }\n        // resourceId and eventId required to be available for new datasets\n        finalizeInvalidated(silent) {\n            const changed = this.$changed;\n            if ('resource' in changed) {\n                changed.resourceId = asId(changed.resource);\n            }\n            if ('event' in changed) {\n                changed.eventId = asId(changed.event);\n            }\n            superProto.finalizeInvalidated.call(this, silent);\n        }\n        //region Event\n        set event(event) {\n            this.setChanged('event', event);\n            this.setChanged('eventId', asId(event));\n        }\n        get event() {\n            const event = this.get('event');\n            // Engine returns null instead of id when unresolved\n            return event?.id != null ? event : null;\n        }\n        //endregion\n        //region Resource\n        set resource(resource) {\n            this.setChanged('resource', resource);\n            this.setChanged('resourceId', asId(resource));\n        }\n        get resource() {\n            const resource = this.get('resource');\n            // Engine returns null instead of id when unresolved\n            return resource?.id != null ? resource : null;\n        }\n    }\n    return CoreAssignmentMixin;\n}) {\n}\n", "import Model from '../../Core/data/Model.js';\nimport PartOfProject from '../data/mixin/PartOfProject.js';\nimport AssignmentModelMixin from './mixin/AssignmentModelMixin.js';\nimport { CoreAssignmentMixin } from '../../Engine/quark/model/scheduler_core/CoreAssignmentMixin.js';\nconst EngineMixin = CoreAssignmentMixin;\n/**\n * @module Scheduler/model/AssignmentModel\n */\n/**\n * This model represents a single assignment of a resource to an event in the scheduler, usually added to a\n * {@link Scheduler.data.AssignmentStore}.\n *\n * It is a subclass of the {@link Core.data.Model} class. Please refer to the documentation for that class to become\n * familiar with the base interface of this class.\n *\n * ## Fields and references\n *\n * An Assignment has the following fields:\n * - `id` - The id of the assignment\n * - `resourceId` - The id of the resource assigned (optionally replaced with `resource` for load)\n * - `eventId` - The id of the event to which the resource is assigned (optionally replaced with `event` for load)\n *\n * The data source for these fields can be customized by subclassing this class:\n *\n * ```javascript\n * class MyAssignment extends AssignmentModel {\n *   static get fields() {\n *       return [\n *          { name : 'resourceId', dataSource : 'linkedResource' }\n *       ];\n *   }\n * }\n * ```\n *\n * After load and project normalization, these references are accessible (assuming their respective stores are loaded):\n * - `event` - The linked event record\n * - `resource` - The linked resource record\n *\n * ## Async resolving of references\n *\n * As described above, an assignment links an event to a resource. It holds references to an event record and a resource\n * record. These references are populated async, using the calculation engine of the project that the assignment via\n * its store is a part of. Because of this asyncness, references cannot be used immediately after modifications:\n *\n * ```javascript\n * assignment.resourceId = 2;\n * // assignment.resource is not yet available\n * ```\n *\n * To make sure references are updated, wait for calculations to finish:\n *\n * ```javascript\n * assignment.resourceId = 2;\n * await assignment.project.commitAsync();\n * // assignment.resource is available\n * ```\n *\n * As an alternative, you can also use `setAsync()` to trigger calculations directly after the change:\n *\n * ```javascript\n * await assignment.setAsync({ resourceId : 2});\n * // assignment.resource is available\n * ```\n *\n * @extends Core/data/Model\n * @mixes Scheduler/model/mixin/AssignmentModelMixin\n * @uninherit Core/data/mixin/TreeNode\n */\nexport default class AssignmentModel extends AssignmentModelMixin(PartOfProject(EngineMixin.derive(Model))) {\n    // NOTE: Leave field defs at top to be picked up by jsdoc\n    /**\n     * Id for event to assign. Can be used as an alternative to `eventId`, but please note that after\n     * load it will be populated with the actual event and not its id. This field is not persistable.\n     * @field {Scheduler.model.EventModel} event\n     * @accepts {String|Number|Scheduler.model.EventModel}\n     * @typings {String||Number||Scheduler.model.EventModel||Scheduler.model.TimeSpan}\n     * @category Common\n     */\n    /**\n     * Id for resource to assign to. Can be used as an alternative to `resourceId`, but please note that after\n     * load it will be populated with the actual resource and not its id. This field is not persistable.\n     * @field {Scheduler.model.ResourceModel} resource\n     * @accepts {String|Number|Scheduler.model.ResourceModel}\n     * @category Common\n     */\n    static get $name() {\n        return 'AssignmentModel';\n    }\n}\nAssignmentModel.exposeProperties();\nAssignmentModel._$name = 'AssignmentModel';", "import Model from '../../../Core/data/Model.js';\nimport ArrayHelper from '../../../Core/helper/ArrayHelper.js';\n/**\n * @module Scheduler/data/mixin/AssignmentStoreMixin\n */\n/**\n * This is a mixin, containing functionality related to managing assignments.\n *\n * It is consumed by the regular {@link Scheduler.data.AssignmentStore} class and Scheduler Pros counterpart.\n *\n * @mixin\n */\nexport default Target => class AssignmentStoreMixin extends Target {\n    static get $name() {\n        return 'AssignmentStoreMixin';\n    }\n    /**\n     * Add assignments to the store.\n     *\n     * NOTE: References (event, resource) on the assignments are determined async by a calculation engine. Thus they\n     * cannot be directly accessed after using this function.\n     *\n     * For example:\n     *\n     * ```javascript\n     * const [assignment] = assignmentStore.add({ eventId, resourceId });\n     * // assignment.event is not yet available\n     * ```\n     *\n     * To guarantee references are set up, wait for calculations for finish:\n     *\n     * ```javascript\n     * const [assignment] = assignmentStore.add({ eventId, resourceId });\n     * await assignmentStore.project.commitAsync();\n     * // assignment.event is available (assuming EventStore is loaded and so on)\n     * ```\n     *\n     * Alternatively use `addAsync()` instead:\n     *\n     * ```javascript\n     * const [assignment] = await assignmentStore.addAsync({ eventId, resourceId });\n     * // assignment.event is available (assuming EventStore is loaded and so on)\n     * ```\n     *\n     * @param {Scheduler.model.AssignmentModel|Scheduler.model.AssignmentModel[]|AssignmentModelConfig|AssignmentModelConfig[]} records\n     * Array of records/data or a single record/data to add to store\n     * @param {Boolean} [silent] Specify `true` to suppress events\n     * @returns {Scheduler.model.AssignmentModel[]} Added records\n     * @function add\n     * @category CRUD\n     */\n    /**\n     * Add assignments to the store and triggers calculations directly after. Await this function to have up to date\n     * references on the added assignments.\n     *\n     * ```javascript\n     * const [assignment] = await assignmentStore.addAsync({ eventId, resourceId });\n     * // assignment.event is available (assuming EventStore is loaded and so on)\n     * ```\n     *\n     * @param {Scheduler.model.AssignmentModel|Scheduler.model.AssignmentModel[]|AssignmentModelConfig|AssignmentModelConfig[]} records\n     * Array of records/data or a single record/data to add to store\n     * @param {Boolean} [silent] Specify `true` to suppress events\n     * @returns {Scheduler.model.AssignmentModel[]} Added records\n     * @function addAsync\n     * @category CRUD\n     * @async\n     */\n    /**\n     * Applies a new dataset to the AssignmentStore. Use it to plug externally fetched data into the store.\n     *\n     * NOTE: References (assignments, resources) on the assignments are determined async by a calculation engine. Thus\n     * they cannot be directly accessed after assigning the new dataset.\n     *\n     * For example:\n     *\n     * ```javascript\n     * assignmentStore.data = [{ eventId, resourceId }];\n     * // assignmentStore.first.event is not yet available\n     * ```\n     *\n     * To guarantee references are available, wait for calculations for finish:\n     *\n     * ```javascript\n     * assignmentStore.data = [{ eventId, resourceId  }];\n     * await assignmentStore.project.commitAsync();\n     * // assignmentStore.first.event is available\n     * ```\n     *\n     * Alternatively use `loadDataAsync()` instead:\n     *\n     * ```javascript\n     * await assignmentStore.loadDataAsync([{ eventId, resourceId }]);\n     * // assignmentStore.first.event is available\n     * ```\n     *\n     * @member {AssignmentModelConfig[]} data\n     * @category Records\n     */\n    /**\n     * Applies a new dataset to the AssignmentStore and triggers calculations directly after. Use it to plug externally\n     * fetched data into the store.\n     *\n     * ```javascript\n     * await assignmentStore.loadDataAsync([{ eventId, resourceId }]);\n     * // assignmentStore.first.event is available\n     * ```\n     *\n     * @param {AssignmentModelConfig[]} data Array of AssignmentModel data objects\n     * @function loadDataAsync\n     * @category CRUD\n     * @async\n     */\n    static get defaultConfig() {\n        return {\n            /**\n             * CrudManager must load stores in the correct order. Lowest first.\n             * @private\n             */\n            loadPriority : 300,\n            /**\n             * CrudManager must sync stores in the correct order. Lowest first.\n             * @private\n             */\n            syncPriority : 300,\n            storeId : 'assignments'\n        };\n    }\n    add(newAssignments, ...args) {\n        newAssignments = ArrayHelper.asArray(newAssignments);\n        for (let i = 0; i < newAssignments.length; i++) {\n            let assignment = newAssignments[i];\n            if (!(assignment instanceof Model)) {\n                newAssignments[i] = assignment = this.createRecord(assignment);\n            }\n            if (!this.isSyncingDataOnLoad && this.storage.findIndex('eventResourceKey', assignment.eventResourceKey, true) !== -1) {\n                throw new Error(`Duplicate assignment Event: ${assignment.eventId} to resource: ${assignment.resourceId}`);\n            }\n            if (assignment.event?.isCreating) {\n                assignment.isCreating = true;\n            }\n        }\n        return super.add(newAssignments, ...args);\n    }\n    includesAssignment(eventId, resourceId) {\n        return this.storage.findIndex('eventResourceKey', `${eventId}-${resourceId}`, true) !== -1;\n    }\n    setStoreData(data) {\n        if (this.usesSingleAssignment) {\n            throw new Error('Data loading into AssignmentStore (multi-assignment mode) cannot be combined EventStore data containing resourceId (single-assignment mode)');\n        }\n        super.setStoreData(data);\n    }\n    //region Init & destroy\n    // This index fixes poor performance when you add large number of events to an event store with large number of\n    // events - if cache is missing existing records are iterated n\u00B2 times.\n    // https://github.com/bryntum/support/issues/3154#issuecomment-881336588\n    set storage(storage) {\n        super.storage = storage;\n        // This allows a map based, fast lookup of assignments by their eventResourceKey.\n        // This is so that the test for duplicate assignment adding is fast.\n        this.storage.addIndex({\n            property    : 'eventResourceKey',\n            dependentOn : { event : true, resource : true },\n            onDuplicate(assignment) {\n                console.warn(`Duplicate assignment of event ${assignment.eventId} to resource ${assignment.resourceId}`);\n            }\n        });\n    }\n    get storage() {\n        // Micro optimization to avoid expensive super call\n        return this._storage || super.storage;\n    }\n    //endregion\n    //region Stores\n    // To not have to do instanceof checks\n    get isAssignmentStore() {\n        return true;\n    }\n    //endregion\n    //region Recurrence\n    /**\n     * Returns a \"fake\" assignment used to identify a certain occurrence of a recurring event.\n     * If passed the original event, it returns `originalAssignment`.\n     * @param {Scheduler.model.AssignmentModel} originalAssignment\n     * @param {Scheduler.model.EventModel} occurrence\n     * @returns {Object} Temporary assignment\n     * @internal\n     */\n    getOccurrence(originalAssignment, occurrence) {\n        // Pass along the original assignment for non occurrence related calls\n        if (!originalAssignment || !occurrence?.isOccurrence) {\n            return originalAssignment;\n        }\n        // Not for saving chars, needed in fn below\n        const me = this;\n        return {\n            id                     : `${occurrence.id}:a${originalAssignment.id}`,\n            event                  : occurrence,\n            resource               : originalAssignment.resource,\n            eventId                : occurrence.id,\n            resourceId             : originalAssignment.resource.id,\n            isAssignment           : true,\n            // This field is required to distinguish this fake assignment when event is being removed from UI\n            isOccurrenceAssignment : true,\n            // Not being an actual record, instanceMeta is stored on the store instead\n            instanceMeta(instanceOrId) {\n                return me.occurrenceInstanceMeta(this, instanceOrId);\n            }\n        };\n    }\n    // Per fake assignment instance meta, stored on store since fakes are always generated on demand\n    occurrenceInstanceMeta(occurrenceAssignment, instanceOrId) {\n        const\n            me         = this,\n            instanceId = instanceOrId.id || instanceOrId,\n            { id }     = occurrenceAssignment;\n        let { occurrenceMeta } = me;\n        if (!occurrenceMeta) {\n            occurrenceMeta = me.occurrenceMeta = {};\n        }\n        if (!occurrenceMeta[id]) {\n            occurrenceMeta[id] = {};\n        }\n        return occurrenceMeta[id][instanceId] || (occurrenceMeta[id][instanceId] = {});\n    }\n    //endregion\n    //region Mapping\n    /**\n     * Maps over event assignments.\n     *\n     * @param {Scheduler.model.EventModel} event\n     * @param {Function} [fn]\n     * @param {Function} [filterFn]\n     * @returns {Scheduler.model.EventModel[]|Array}\n     * @category Assignments\n     */\n    mapAssignmentsForEvent(event, fn, filterFn) {\n        event = this.eventStore.getById(event);\n        const\n            fnSet           = Boolean(fn),\n            filterFnSet     = Boolean(filterFn);\n        if (fnSet || filterFnSet) {\n            return event.assignments.reduce((result, assignment) => {\n                const mapResult = fnSet ? fn(assignment) : assignment;\n                if (!filterFnSet || filterFn(mapResult)) {\n                    result.push(mapResult);\n                }\n                return result;\n            }, []);\n        }\n        return event.assignments;\n    }\n    /**\n     * Maps over resource assignments.\n     *\n     * @param {Scheduler.model.ResourceModel|Number|String} resource\n     * @param {Function} [fn]\n     * @param {Function} [filterFn]\n     * @returns {Scheduler.model.ResourceModel[]|Array}\n     * @category Assignments\n     */\n    mapAssignmentsForResource(resource, fn, filterFn) {\n        resource = this.resourceStore.getById(resource);\n        const\n            fnSet           = Boolean(fn),\n            filterFnSet     = Boolean(filterFn);\n        if (fnSet || filterFnSet) {\n            return resource.assignments.reduce((result, assignment) => {\n                const mapResult = fnSet ? fn(assignment) : assignment;\n                if (!filterFnSet || filterFn(mapResult)) {\n                    result.push(mapResult);\n                }\n                return result;\n            }, []);\n        }\n        return resource.assignments;\n    }\n    /**\n     * Returns all assignments for a given event.\n     *\n     * @param {Scheduler.model.TimeSpan} event\n     * @returns {Scheduler.model.AssignmentModel[]}\n     * @category Assignments\n     */\n    getAssignmentsForEvent(event) {\n        return event.assignments;\n    }\n    /**\n     * Removes all assignments for given event\n     *\n     * @param {Scheduler.model.TimeSpan} event\n     * @category Assignments\n     */\n    removeAssignmentsForEvent(event) {\n        return this.remove(event.assignments);\n    }\n    /**\n     * Returns all assignments for a given resource.\n     *\n     * @param {Scheduler.model.ResourceModel} resource\n     * @returns {Scheduler.model.AssignmentModel[]}\n     * @category Assignments\n     */\n    getAssignmentsForResource(resource) {\n        resource = this.resourceStore.getById(resource);\n        return resource.assignments;\n    }\n    /**\n     * Removes all assignments for given resource\n     *\n     * @param {Scheduler.model.ResourceModel|*} resource\n     * @category Assignments\n     */\n    removeAssignmentsForResource(resource) {\n        this.remove(this.getAssignmentsForResource(resource));\n    }\n    /**\n     * Returns all resources assigned to an event.\n     *\n     * @param {Scheduler.model.EventModel} event\n     * @returns {Scheduler.model.ResourceModel[]}\n     * @category Assignments\n     */\n    getResourcesForEvent(event) {\n        return event.resources;\n    }\n    /**\n     * Returns all events assigned to a resource\n     *\n     * @param {Scheduler.model.ResourceModel|String|Number} resource\n     * @returns {Scheduler.model.TimeSpan[]}\n     * @category Assignments\n     */\n    getEventsForResource(resource) {\n        resource = this.resourceStore.getById(resource);\n        return resource?.events;\n    }\n    /**\n     * Creates and adds assignment record(s) for a given event and resource(s).\n     *\n     * @param {Scheduler.model.TimeSpan} event\n     * @param {Scheduler.model.ResourceModel|Scheduler.model.ResourceModel[]} resources The resource(s) to assign to the event\n     * @param {Function} [assignmentSetupFn] A hook function which takes an assignment as its argument and must return an assignment.\n     * @param {Boolean} [removeExistingAssignments] `true` to remove assignments for other resources\n     * @returns {Scheduler.model.AssignmentModel[]} An array with the created assignment(s)\n     * @category Assign\n     */\n    assignEventToResource(event, resources, assignmentSetupFn = null, removeExistingAssignments = false) {\n        const\n            me       = this,\n            toRemove = removeExistingAssignments ? new Set(event.assignments) : null;\n        resources = ArrayHelper.asArray(resources).map(r => r.$original ?? r);\n        if (me.eventStore?.usesSingleAssignment) {\n            // Use same code path as other single assignments if already assigned\n            if (event.assignments?.length) {\n                if (!me.isEventAssignedToResource(event, resources[0])) {\n                    event.resource = resources[0];\n                }\n                return [];\n            }\n            // otherwise - set \"resourceId\" and proceed to assignment creation\n            else {\n                event.resourceId = resources[0]?.id;\n            }\n        }\n        let newAssignments = [];\n        me.suspendAutoCommit();\n        // Assign\n        resources.forEach(resource => {\n            const existingAssignment = me.getAssignmentForEventAndResource(event, resource);\n            if (!existingAssignment) {\n                const assignment = {\n                    event,\n                    resource\n                };\n                newAssignments.push(assignmentSetupFn?.(assignment) ?? assignment);\n            }\n            else if (removeExistingAssignments) {\n                toRemove.delete(existingAssignment);\n            }\n        });\n        newAssignments = me.add(newAssignments);\n        if (removeExistingAssignments) {\n            me.remove(Array.from(toRemove));\n        }\n        // If true, will trigger a commit\n        me.resumeAutoCommit();\n        return newAssignments;\n    }\n    /**\n     * Removes assignment record for a given event and resource.\n     *\n     * @param {Scheduler.model.TimeSpan|String|Number} event\n     * @param {Scheduler.model.ResourceModel|String|Number} [resources] The resource to unassign the event from. If omitted, all resources of the events will be unassigned\n     * @returns {Scheduler.model.AssignmentModel|Scheduler.model.AssignmentModel[]}\n     * @category Assign\n     */\n    unassignEventFromResource(event, resources) {\n        const\n            me = this,\n            assignmentsToRemove = [];\n        if (!resources) {\n            return me.removeAssignmentsForEvent(event);\n        }\n        resources = ArrayHelper.asArray(resources);\n        for (let i = 0; i < resources.length; i++) {\n            if (me.isEventAssignedToResource(event, resources[i])) {\n                assignmentsToRemove.push(me.getAssignmentForEventAndResource(event, resources[i]));\n            }\n        }\n        return me.remove(assignmentsToRemove);\n    }\n    /**\n     * Checks whether an event is assigned to a resource.\n     *\n     * @param {Scheduler.model.EventModel|String|Number} event Event record or id\n     * @param {Scheduler.model.ResourceModel|String|Number} resource Resource record or id\n     * @returns {Boolean}\n     * @category Assignments\n     */\n    isEventAssignedToResource(event, resource) {\n        return Boolean(this.getAssignmentForEventAndResource(event, resource));\n    }\n    /**\n     * Returns an assignment record for a given event and resource\n     *\n     * @param {Scheduler.model.EventModel|String|Number} event The event or its id\n     * @param {Scheduler.model.ResourceModel|String|Number} resource The resource or its id\n     * @returns {Scheduler.model.AssignmentModel}\n     * @category Assignments\n     */\n    getAssignmentForEventAndResource(event, resource) {\n        let assignments;\n        // Note: In order to not evaluate conditions which do not have to be evaluated each condition is assigned to a\n        // variable within the condition.\n        if (\n            !(event = this.eventStore.getById(event)) ||\n            !(assignments = event.assignments) ||\n            // Also note that resources are looked for in the master store if chained, to handle dragging between\n            // schedulers using chained versions of the same resource store. Needed since assignmentStore is shared and\n            // might point to wrong resourceStore (can only point to one)\n            !(resource = this.resourceStore.$master.getById(resource))\n        ) {\n            return null;\n        }\n        return this.getOccurrence(assignments.find(a => a.resource?.$original === resource.$original), event);\n    }\n    //endregion\n};\n", "import { CI } from \"../../ChronoGraph/collection/Iterator.js\";\nexport const isNotNumber = (value) => Number(value) !== value;\nexport const CIFromSetOrArrayOrValue = (value) => {\n    if (value instanceof Set || value instanceof Array)\n        return CI(value);\n    return CI([value]);\n};\nexport const delay = (value) => new Promise(resolve => setTimeout(resolve, value));\nexport const format = (format, ...values) => {\n    return format.replace(/{(\\d+)}/g, (match, number) => typeof values[number] !== 'undefined' ? values[number] : match);\n};\n", "import { Mixin } from \"../../../ChronoGraph/class/Mixin.js\";\nimport { AbstractPartOfProjectStoreMixin } from \"./mixin/AbstractPartOfProjectStoreMixin.js\";\nimport { CIFromSetOrArrayOrValue } from \"../../util/Functions.js\";\n// Shared functionality for CoreAssignmentStore & ChronoAssignmentStore\nexport class AbstractAssignmentStoreMixin extends Mixin([AbstractPartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class AbstractAssignmentStoreMixin extends base {\n        constructor() {\n            super(...arguments);\n            this.assignmentsForRemoval = new Set();\n            this.allAssignmentsForRemoval = false;\n        }\n        remove(records, silent) {\n            this.assignmentsForRemoval = CIFromSetOrArrayOrValue(records).toSet();\n            const res = superProto.remove.call(this, records, silent);\n            this.assignmentsForRemoval.clear();\n            return res;\n        }\n        removeAll(silent) {\n            this.allAssignmentsForRemoval = true;\n            const res = superProto.removeAll.call(this, silent);\n            this.allAssignmentsForRemoval = false;\n            return res;\n        }\n    }\n    return AbstractAssignmentStoreMixin;\n}) {\n}\n", "import { CoreAssignmentMixin } from \"../model/scheduler_core/CoreAssignmentMixin.js\";\nimport { Mixin } from \"../../../ChronoGraph/class/BetterMixin.js\";\nimport { CorePartOfProjectStoreMixin } from \"./mixin/CorePartOfProjectStoreMixin.js\";\nimport { AbstractAssignmentStoreMixin } from \"./AbstractAssignmentStoreMixin.js\";\nconst emptySet = new Set();\n/**\n * A store mixin class, that represent collection of all assignments in the [[SchedulerCoreProjectMixin|project]].\n */\nexport class CoreAssignmentStoreMixin extends Mixin([AbstractAssignmentStoreMixin, CorePartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreAssignmentStoreMixin extends base {\n        constructor() {\n            super(...arguments);\n            this.skipInvalidateIndices = false;\n        }\n        static get defaultConfig() {\n            return {\n                modelClass: CoreAssignmentMixin,\n                storage: {\n                    extraKeys: [\n                        { property: 'event', unique: false },\n                        { property: 'resource', unique: false },\n                        { property: 'eventId', unique: false }\n                    ]\n                }\n            };\n        }\n        set data(value) {\n            this.allAssignmentsForRemoval = true;\n            super.data = value;\n            this.allAssignmentsForRemoval = false;\n        }\n        getEventsAssignments(event) {\n            return this.storage.findItem('event', event, true) || emptySet;\n        }\n        getResourcesAssignments(resource) {\n            return this.storage.findItem('resource', resource.$original, true) || emptySet;\n        }\n        updateIndices() {\n            this.storage.rebuildIndices();\n        }\n        invalidateIndices() {\n            this.storage.invalidateIndices();\n        }\n        afterLoadData() {\n            this.eventStore && this.linkAssignments(this.eventStore, 'event');\n            this.resourceStore && this.linkAssignments(this.resourceStore, 'resource');\n        }\n        // Link events/resources to assignments, called when those stores are populated or joined to project\n        linkAssignments(store, modelName) {\n            // If we are passed a chained store, the ultimate source of truth is the masterStore\n            store = store.masterStore || store;\n            const unresolved = this.count && this.storage.findItem(modelName, null, true);\n            if (unresolved) {\n                for (const assignment of unresolved) {\n                    const record = store.getById(assignment.getCurrentOrProposed(modelName));\n                    if (record)\n                        assignment.setChanged(modelName, record);\n                }\n                this.invalidateIndices();\n            }\n        }\n        // Unlink events/resources from assignments, called when those stores are cleared\n        unlinkAssignments(modelName) {\n            // Invalidate links to events/resources, need to link to new records so set it back to the id (might be resource or resourceId)\n            // As assignment.resource returns null if it's an id, need to check for that in data\n            this.forEach(assignment => assignment.setChanged(modelName, assignment[modelName]?.id ?? assignment?.getData(modelName) ?? assignment[modelName + 'Id']));\n            this.invalidateIndices();\n        }\n        onCommitAsync() {\n            this.updateIndices();\n        }\n    }\n    return CoreAssignmentStoreMixin;\n}) {\n}\n", "import AjaxStore from '../../Core/data/AjaxStore.js';\nimport AssignmentModel from '../model/AssignmentModel.js';\nimport PartOfProject from './mixin/PartOfProject.js';\nimport PartOfBaseProject from './mixin/PartOfBaseProject.js';\nimport AssignmentStoreMixin from './mixin/AssignmentStoreMixin.js';\nimport { CoreAssignmentStoreMixin } from '../../Engine/quark/store/CoreAssignmentStoreMixin.js';\nconst EngineMixin = PartOfProject(CoreAssignmentStoreMixin.derive(AjaxStore));\n/**\n * @module Scheduler/data/AssignmentStore\n */\n/**\n * A store representing a collection of assignments between events in the {@link Scheduler.data.EventStore} and resources\n * in the {@link Scheduler.data.ResourceStore}.\n *\n * This store only accepts a model class inheriting from {@link Scheduler.model.AssignmentModel}.\n *\n * An AssignmentStore is usually connected to a project, which binds it to other related stores (EventStore,\n * ResourceStore and DependencyStore). The project also handles references (event, resource) to related records for the\n * records in the store.\n *\n * Resolving the references happens async, records are not guaranteed to have up to date references until calculations\n * are finished. To be certain that references are resolved, call `await project.commitAsync()` after store actions. Or\n * use one of the `xxAsync` functions, such as `loadDataAsync()`.\n *\n * Using `commitAsync()`:\n *\n * ```javascript\n * assignmentStore.data = [{ eventId, resourceId }, ...];\n *\n * // references (event, resource) not resolved yet\n *\n * await assignmentStore.project.commitAsync();\n *\n * // now they are\n * ```\n *\n * Using `loadDataAsync()`:\n *\n * ```javascript\n * await assignmentStore.loadDataAsync([{ eventId, resourceId }, ...]);\n *\n * // references (event, resource) are resolved\n * ```\n *\n * @mixes Scheduler/data/mixin/AssignmentStoreMixin\n * @mixes Scheduler/data/mixin/PartOfProject\n * @extends Core/data/AjaxStore\n */\nexport default class AssignmentStore extends AssignmentStoreMixin(EngineMixin) {\n    static $name = 'AssignmentStore';\n    static get defaultConfig() {\n        return {\n            modelClass : AssignmentModel\n        };\n    }\n}\nAssignmentStore._$name = 'AssignmentStore';", "import DateHelper from '../../Core/helper/DateHelper.js';\nimport Model from '../../Core/data/Model.js';\nimport Duration from '../../Core/data/Duration.js';\n/**\n * @module Scheduler/model/DependencyBaseModel\n */\nconst canonicalDependencyTypes = [\n    'SS',\n    'SF',\n    'FS',\n    'FF'\n];\n/**\n * Base class used for both Scheduler and Gantt. Not intended to be used directly\n *\n * @extends Core/data/Model\n */\nexport default class DependencyBaseModel extends Model {\n    static get $name() {\n        return 'DependencyBaseModel';\n    }\n    /**\n     * Set value for the specified field(s), triggering engine calculations immediately. See\n     * {@link Core.data.Model#function-set Model#set()} for arguments.\n     **\n     * ```javascript\n     * dependency.set('from', 2);\n     * // dependency.fromEvent is not yet up to date\n     *\n     * await dependency.setAsync('from', 2);\n     * // dependency.fromEvent is up to date\n     * ```\n     *\n     * @param {String|Object} field The field to set value for, or an object with multiple values to set in one call\n     * @param {*} [value] Value to set\n     * @param {Boolean} [silent=false] Set to true to not trigger events\n     * automatically.\n     * @function setAsync\n     * @category Editing\n     * @async\n     */\n    //region Fields\n    /**\n     * An enumerable object, containing names for the dependency types integer constants.\n     * - 0 StartToStart\n     * - 1 StartToEnd\n     * - 2 EndToStart\n     * - 3 EndToEnd\n     * @property {Object}\n     * @readonly\n     * @category Dependency\n     */\n    static get Type() {\n        return {\n            StartToStart : 0,\n            StartToEnd   : 1,\n            EndToStart   : 2,\n            EndToEnd     : 3\n        };\n    }\n    static get fields() {\n        return [\n            // 3 mandatory fields\n            /**\n             * From event, id of source event\n             * @field {String|Number} from\n             * @category Dependency\n             */\n            { name : 'from' },\n            /**\n             * To event, id of target event\n             * @field {String|Number} to\n             * @category Dependency\n             */\n            { name : 'to' },\n            /**\n             * Dependency type, see static property {@link #property-Type-static}\n             * @field {Number} type=2\n             * @category Dependency\n             */\n            { name : 'type', type : 'int', defaultValue : 2 },\n            /**\n             * CSS class to apply to lines drawn for the dependency\n             * @field {String} cls\n             * @category Styling\n             */\n            { name : 'cls', defaultValue : '' },\n            /**\n             * Bidirectional, drawn with arrows in both directions\n             * @field {Boolean} bidirectional\n             * @category Dependency\n             */\n            { name : 'bidirectional', type : 'boolean' },\n            /**\n             * Start side on source (top, left, bottom, right)\n             * @field {'top'|'left'|'bottom'|'right'} fromSide\n             * @category Dependency\n             */\n            { name : 'fromSide', type : 'string' },\n            /**\n             * End side on target (top, left, bottom, right)\n             * @field {'top'|'left'|'bottom'|'right'} toSide\n             * @category Dependency\n             */\n            { name : 'toSide', type : 'string' },\n            /**\n             * The magnitude of this dependency's lag (the number of units).\n             * @field {Number} lag\n             * @category Dependency\n             */\n            { name : 'lag', type : 'number', allowNull : true, defaultValue : 0 },\n            /**\n             * The units of this dependency's lag, defaults to \"d\" (days). Valid values are:\n             *\n             * - \"ms\" (milliseconds)\n             * - \"s\" (seconds)\n             * - \"m\" (minutes)\n             * - \"h\" (hours)\n             * - \"d\" (days)\n             * - \"w\" (weeks)\n             * - \"M\" (months)\n             * - \"y\" (years)\n             *\n             * This field is readonly after creation, to change `lagUnit` use {@link #function-setLag setLag()}.\n             * @field {'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y'} lagUnit\n             * @category Dependency\n             * @readonly\n             */\n            {\n                name         : 'lagUnit',\n                type         : 'string',\n                defaultValue : 'd'\n            },\n            { name : 'highlighted', persist : false, internal : true }\n        ];\n    }\n    // fromEvent/toEvent defined in CoreDependencyMixin in engine\n    /**\n     * Gets/sets the source event of the dependency.\n     *\n     * Accepts multiple formats but always returns an {@link Scheduler.model.EventModel}.\n     *\n     * **NOTE:** This is not a proper field but rather an alias, it will be serialized but cannot be remapped. If you\n     * need to remap, consider using {@link #field-from} instead.\n     *\n     * @field {Scheduler.model.EventModel} fromEvent\n     * @accepts {String|Number|Scheduler.model.EventModel}\n     * @category Dependency\n     */\n    /**\n     * Gets/sets the target event of the dependency.\n     *\n     * Accepts multiple formats but always returns an {@link Scheduler.model.EventModel}.\n     *\n     * **NOTE:** This is not a proper field but rather an alias, it will be serialized but cannot be remapped. If you\n     * need to remap, consider using {@link #field-to} instead.\n     *\n     * @field {Scheduler.model.EventModel} toEvent\n     * @accepts {String|Number|Scheduler.model.EventModel}\n     * @category Dependency\n     */\n    //endregion\n    //region Init\n    construct(data) {\n        const\n            from = data[this.fieldMap.from.dataSource],\n            to   = data[this.fieldMap.to.dataSource];\n        // Engine expects fromEvent and toEvent, not from and to. We need to support both\n        if (from != null) {\n            data.fromEvent = from;\n        }\n        if (to != null) {\n            data.toEvent = to;\n        }\n        super.construct(...arguments);\n    }\n    //endregion\n    get eventStore() {\n        return this.eventStore || this.unjoinedStores[0]?.eventStore;\n    }\n    set from(value) {\n        const { fromEvent } = this;\n        // When assigning a new id to an event, it will update the eventId of the assignment. But the assignments\n        // event is still the same so we need to announce here\n        if (fromEvent?.isModel && fromEvent.id === value) {\n            this.set('from', value);\n        }\n        else {\n            this.fromEvent = value;\n        }\n    }\n    get from() {\n        return this.get('from');\n    }\n    set to(value) {\n        const { toEvent } = this;\n        // When assigning a new id to an event, it will update the eventId of the assignment. But the assignments\n        // event is still the same so we need to announce here\n        if (toEvent?.isModel && toEvent.id === value) {\n            this.set('to', value);\n        }\n        else {\n            this.toEvent = value;\n        }\n    }\n    get to() {\n        return this.get('to');\n    }\n    /**\n     * Alias to dependency type, but when set resets {@link #field-fromSide} & {@link #field-toSide} to null as well.\n     *\n     * @property {Number}\n     * @category Dependency\n     */\n    get hardType() {\n        return this.getHardType();\n    }\n    set hardType(type) {\n        this.setHardType(type);\n    }\n    /**\n     * Returns dependency hard type, see {@link #property-hardType}.\n     *\n     * @returns {Number}\n     * @category Dependency\n     */\n    getHardType() {\n        return this.get('type');\n    }\n    /**\n     * Sets dependency {@link #field-type} and resets {@link #field-fromSide} and {@link #field-toSide} to null.\n     *\n     * @param {Number} type\n     * @category Dependency\n     */\n    setHardType(type) {\n        let result;\n        if (type !== this.hardType) {\n            result = this.set({\n                type,\n                fromSide : null,\n                toSide   : null\n            });\n        }\n        return result;\n    }\n    get lag() {\n        return this.get('lag');\n    }\n    set lag(lag) {\n        this.setLag(lag);\n    }\n    /**\n     * Sets lag and lagUnit in one go. Only allowed way to change lagUnit, the lagUnit field is readonly after creation\n     * @param {Number|String|Object} lag The lag value. May be just a numeric magnitude, or a full string descriptor eg '1d'\n     * @param {'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y'} [lagUnit] Unit for numeric lag value, see\n     * {@link #field-lagUnit} for valid values\n     * @category Dependency\n     */\n    setLag(lag, lagUnit = this.lagUnit) {\n        // Either they're only setting the magnitude\n        // or, if it's a string, parse the full duration.\n        if (arguments.length === 1) {\n            if (typeof lag === 'number') {\n                this.lag = lag;\n            }\n            else {\n                lag = DateHelper.parseDuration(lag);\n                this.set({\n                    lag     : lag.magnitude,\n                    lagUnit : lag.unit\n                });\n            }\n            return;\n        }\n        // Must be a number\n        lag = parseFloat(lag);\n        this.set({\n            lag,\n            lagUnit\n        });\n    }\n    getLag() {\n        if (this.lag) {\n            return `${this.lag < 0 ? '-' : '+'}${Math.abs(this.lag)}${DateHelper.getShortNameOfUnit(this.lagUnit)}`;\n        }\n        return '';\n    }\n    /**\n     * Property which encapsulates the lag's magnitude and units. An object which contains two properties:\n     * @property {Core.data.Duration}\n     * @property {Number} fullLag.magnitude The magnitude of the duration\n     * @property {'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y'} fullLag.unit The unit in which the duration is measured, eg\n     * `'d'` for days\n     * @category Dependency\n     */\n    get fullLag() {\n        return new Duration({\n            unit      : this.lagUnit,\n            magnitude : this.lag\n        });\n    }\n    set fullLag(lag) {\n        if (typeof lag === 'string') {\n            this.setLag(lag);\n        }\n        else {\n            this.setLag(lag.magnitude, lag.unit);\n        }\n    }\n    /**\n     * Returns true if the linked events have been persisted (e.g. neither of them are 'phantoms')\n     *\n     * @property {Boolean}\n     * @readonly\n     * @category Editing\n     */\n    get isPersistable() {\n        const\n            me = this,\n            { stores, unjoinedStores } = me,\n            store = stores[0];\n        let result;\n        if (store) {\n            const\n                { fromEvent, toEvent } = me,\n                crudManager            = store.crudManager;\n            // if crud manager is used it can deal with phantom source/target since it persists all records in one batch\n            // if no crud manager used we have to wait till source/target are persisted\n            result = fromEvent && (crudManager || !fromEvent.hasGeneratedId) && toEvent && (crudManager || !toEvent.hasGeneratedId);\n        }\n        else {\n            result = Boolean(unjoinedStores[0]);\n        }\n        return result && super.isPersistable;\n    }\n    getDateRange() {\n        const { fromEvent, toEvent } = this;\n        if (fromEvent?.isScheduled && toEvent?.isScheduled) {\n            const Type = DependencyBaseModel.Type;\n            let sourceDate,\n                targetDate;\n            switch (this.type) {\n                case Type.StartToStart:\n                    sourceDate = fromEvent.startDateMS;\n                    targetDate = toEvent.startDateMS;\n                    break;\n                case Type.StartToEnd:\n                    sourceDate = fromEvent.startDateMS;\n                    targetDate = toEvent.endDateMS;\n                    break;\n                case Type.EndToEnd:\n                    sourceDate = fromEvent.endDateMS;\n                    targetDate = toEvent.endDateMS;\n                    break;\n                case Type.EndToStart:\n                    sourceDate = fromEvent.endDateMS;\n                    targetDate = toEvent.startDateMS;\n                    break;\n                default:\n                    throw new Error('Invalid dependency type: ' + this.type);\n            }\n            return {\n                start : Math.min(sourceDate, targetDate),\n                end   : Math.max(sourceDate, targetDate)\n            };\n        }\n        return null;\n    }\n    /**\n     * Applies given CSS class to dependency, the value doesn't persist\n     *\n     * @param {String} cls\n     * @category Dependency\n     */\n    highlight(cls) {\n        const classes = this.highlighted?.split(' ') ?? [];\n        if (!classes.includes(cls)) {\n            this.highlighted = classes.concat(cls).join(' ');\n        }\n    }\n    /**\n     * Removes given CSS class from dependency if applied, the value doesn't persist\n     *\n     * @param {String} cls\n     * @category Dependency\n     */\n    unhighlight(cls) {\n        const { highlighted } = this;\n        if (highlighted) {\n            const\n                classes = highlighted.split(' '),\n                index   = classes.indexOf(cls);\n            if (index >= 0) {\n                classes.splice(index, 1);\n                this.highlighted = classes.join(' ');\n            }\n        }\n    }\n    /**\n     * Checks if the given CSS class is applied to dependency.\n     *\n     * @param {String} cls\n     * @returns {Boolean}\n     * @category Dependency\n     */\n    isHighlightedWith(cls) {\n        return this.highlighted && this.highlighted.split(' ').includes(cls);\n    }\n    getConnectorString(raw) {\n        const rawValue = canonicalDependencyTypes[this.type];\n        if (raw) {\n            return rawValue;\n        }\n        // FS => empty string; it's the default\n        if (this.type === DependencyBaseModel.Type.EndToStart) {\n            return '';\n        }\n        return rawValue;\n    }\n    // getConnectorStringFromType(type, raw) {\n    //     const rawValue = canonicalDependencyTypes[type];\n    //\n    //     if (raw) {\n    //         return rawValue;\n    //     }\n    //\n    //     // FS => empty string; it's the default\n    //     if (type === DependencyBaseModel.Type.EndToStart) {\n    //         return '';\n    //     }\n    //\n    //     const locale = LocaleManager.locale;\n    //\n    //     // See if there is a local version of SS, SF or FF\n    //     if (locale) {\n    //         const localized = locale.Scheduler && locale.Scheduler[rawValue];\n    //         if (localized) {\n    //             return localized;\n    //         }\n    //     }\n    //\n    //     return rawValue;\n    // }\n    // getConnectorString(raw) {\n    //     return this.getConnectorStringFromType(this.type);\n    // }\n    // * getConnectorStringGenerator(raw) {\n    //     return this.getConnectorStringFromType(yield this.$.type);\n    // }\n    toString() {\n        return `${this.from}${this.getConnectorString()}${this.getLag()}`;\n    }\n    /**\n     * Returns `true` if the dependency is valid. It is considered valid if it has a valid type and both from and to\n     * events are set and pointing to different events.\n     *\n     * @property {Boolean}\n     * @typings ignore\n     * @category Editing\n     */\n    get isValid() {\n        const { fromEvent, toEvent, type } = this;\n        return typeof type === 'number' && fromEvent && toEvent && fromEvent !== toEvent;\n    }\n    get fromEventName() {\n        return this.fromEvent?.name || '';\n    }\n    get toEventName() {\n        return this.toEvent?.name || '';\n    }\n    //region STM hooks\n    shouldRecordFieldChange(fieldName, oldValue, newValue) {\n        if (!super.shouldRecordFieldChange(fieldName, oldValue, newValue)) {\n            return false;\n        }\n        if (fieldName === 'from' || fieldName === 'to' || fieldName === 'fromEvent' || fieldName === 'toEvent') {\n            const eventStore = this.project?.eventStore;\n            if (eventStore && eventStore.oldIdMap[oldValue] === eventStore.getById(newValue)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    //endregion\n}\nDependencyBaseModel.exposeProperties();\nDependencyBaseModel._$name = 'DependencyBaseModel';", "import { CorePartOfProjectModelMixin } from \"../mixin/CorePartOfProjectModelMixin.js\";\nimport { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { CoreEventMixin } from \"./CoreEventMixin.js\";\nimport { isInstanceOf } from '../../../../ChronoGraph/class/Mixin.js';\nexport class CoreDependencyMixin extends Mixin([CorePartOfProjectModelMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreDependencyMixin extends base {\n        static get fields() {\n            return [\n                { name: 'fromEvent', isEqual: (a, b) => a === b, persist: false },\n                { name: 'toEvent', isEqual: (a, b) => a === b, persist: false }\n            ];\n        }\n        // Resolve early + update indices to have buckets ready before commit\n        setChanged(field, value, invalidate) {\n            let update = false;\n            if (field === 'fromEvent' || field === 'toEvent') {\n                const event = isInstanceOf(value, CoreEventMixin) ? value : this.eventStore?.getById(value);\n                if (event)\n                    update = true;\n                value = event || value;\n            }\n            superProto.setChanged.call(this, field, value, invalidate, true);\n            if (update && !this.project.isPerformingCommit && !this.dependencyStore?.isLoadingData) {\n                this.dependencyStore?.invalidateIndices();\n            }\n        }\n        // Resolve events when joining project\n        joinProject() {\n            superProto.joinProject.call(this);\n            // Initial values should be considered changed, to be normalized\n            // (needs to pass through setChanged for early normalization expected for buckets)\n            this.setChanged('fromEvent', this.get('fromEvent'));\n            this.setChanged('toEvent', this.get('toEvent'));\n        }\n        // Resolved events as part of commit\n        // Normally done earlier in setChanged, but stores might not have been available yet at that point\n        calculateInvalidated() {\n            // Changed values, should be used instead of current where available\n            let { fromEvent, toEvent } = this.$changed;\n            if (fromEvent !== null && !(isInstanceOf(fromEvent, CoreEventMixin))) {\n                const resolved = this.eventStore?.getById(fromEvent);\n                if (resolved)\n                    this.$changed.fromEvent = resolved;\n            }\n            if (toEvent !== null && !(isInstanceOf(toEvent, CoreEventMixin))) {\n                const resolved = this.eventStore?.getById(toEvent);\n                if (resolved)\n                    this.$changed.toEvent = resolved;\n            }\n        }\n        //region Events\n        // Not using \"propose\" mechanism from CoreEventMixin, because buckets are expected to be up to date right away\n        set fromEvent(fromEvent) {\n            this.setChanged('fromEvent', fromEvent);\n        }\n        get fromEvent() {\n            const fromEvent = this.get('fromEvent');\n            // Engine returns null instead of id when unresolved\n            return fromEvent?.id != null ? fromEvent : null;\n        }\n        set toEvent(toEvent) {\n            this.setChanged('toEvent', toEvent);\n        }\n        get toEvent() {\n            const toEvent = this.get('toEvent');\n            // Engine returns null instead of id when unresolved\n            return toEvent?.id != null ? toEvent : null;\n        }\n    }\n    return CoreDependencyMixin;\n}) {\n}\n", "import DependencyBaseModel from './DependencyBaseModel.js';\nimport PartOfProject from '../data/mixin/PartOfProject.js';\nimport { CoreDependencyMixin } from '../../Engine/quark/model/scheduler_core/CoreDependencyMixin.js';\nconst EngineMixin = CoreDependencyMixin;\n/**\n * @module Scheduler/model/DependencyModel\n */\n/**\n * This model represents a dependency between two events, usually added to a {@link Scheduler.data.DependencyStore}.\n *\n * It is a subclass of the {@link Scheduler.model.DependencyBaseModel} class, which in its turn subclasses\n * {@link Core.data.Model}. Please refer to documentation of those classes to become familiar with the base interface of\n * this class.\n *\n * ## Fields and references\n *\n * A Dependency has a few predefined fields, see Fields below.  The name of any fields data source can be customized in\n * the subclass, see the example below. Please also refer to {@link Core.data.Model} for details.\n *\n * ```javascript\n * class MyDependency extends DependencyModel {\n *   static get fields() {\n *     return [\n *       { name: 'to', dataSource: 'targetId' },\n *       { name: 'from', dataSource: 'sourceId' }\n *     ]);\n *   }\n * }\n * ```\n *\n * After load and project normalization, these references are accessible (assuming their respective stores are loaded):\n * - `fromEvent` - The event on the start side of the dependency\n * - `toEvent` - The event on the end side of the dependency\n *\n * ## Async resolving of references\n *\n * As described above, a dependency has links to events. These references are populated async, using the calculation\n * engine of the project that the resource via its store is a part of. Because of this asyncness, references cannot be\n * used immediately after modifications:\n *\n * ```javascript\n * dependency.from = 2;\n * // dependency.fromEvent is not yet up to date\n * ```\n *\n * To make sure references are updated, wait for calculations to finish:\n *\n * ```javascript\n * dependency.from = 2;\n * await dependency.project.commitAsync();\n * // dependency.fromEvent is up to date\n * ```\n *\n * As an alternative, you can also use `setAsync()` to trigger calculations directly after the change:\n *\n * ```javascript\n * await dependency.setAsync({ from : 2});\n * // dependency.fromEvent is up to date\n * ```\n *\n * @extends Scheduler/model/DependencyBaseModel\n * @uninherit Core/data/mixin/TreeNode\n */\nexport default class DependencyModel extends PartOfProject(EngineMixin.derive(DependencyBaseModel)) {\n    static get $name() {\n        return 'DependencyModel';\n    }\n    // Determines the type of dependency based on fromSide and toSide\n    getTypeFromSides(fromSide, toSide, rtl) {\n        const\n            types     = DependencyBaseModel.Type,\n            startSide = rtl ? 'right' : 'left',\n            endSide   = rtl ? 'left' : 'right';\n        if (fromSide === startSide) {\n            return (toSide === startSide) ? types.StartToStart : types.StartToEnd;\n        }\n        return (toSide === endSide) ? types.EndToEnd : types.EndToStart;\n    }\n}\nDependencyModel.exposeProperties();\nDependencyModel._$name = 'DependencyModel';", "import ArrayHelper from '../../../Core/helper/ArrayHelper.js';\nimport Model from '../../../Core/data/Model.js';\n/**\n * @module Scheduler/data/mixin/DependencyStoreMixin\n */\n/**\n * This is a mixin, containing functionality related to managing dependencies.\n *\n * It is consumed by the regular {@link Scheduler.data.DependencyStore} class and Scheduler Pros counterpart.\n *\n * @mixin\n */\nexport default Target => class DependencyStoreMixin extends Target {\n    static get $name() {\n        return 'DependencyStoreMixin';\n    }\n    /**\n     * Add dependencies to the store.\n     *\n     * NOTE: References (fromEvent, toEvent) on the dependencies are determined async by a calculation engine. Thus they\n     * cannot be directly accessed after using this function.\n     *\n     * For example:\n     *\n     * ```javascript\n     * const [dependency] = dependencyStore.add({ from, to });\n     * // dependency.fromEvent is not yet available\n     * ```\n     *\n     * To guarantee references are set up, wait for calculations for finish:\n     *\n     * ```javascript\n     * const [dependency] = dependencyStore.add({ from, to });\n     * await dependencyStore.project.commitAsync();\n     * // dependency.fromEvent is available (assuming EventStore is loaded and so on)\n     * ```\n     *\n     * Alternatively use `addAsync()` instead:\n     *\n     * ```javascript\n     * const [dependency] = await dependencyStore.addAsync({ from, to });\n     * // dependency.fromEvent is available (assuming EventStore is loaded and so on)\n     * ```\n     *\n     * @param {Scheduler.model.DependencyModel|Scheduler.model.DependencyModel[]|DependencyModelConfig|DependencyModelConfig[]} records\n     * Array of records/data or a single record/data to add to store\n     * @param {Boolean} [silent] Specify `true` to suppress events\n     * @returns {Scheduler.model.DependencyModel[]} Added records\n     * @function add\n     * @category CRUD\n     */\n    /**\n     * Add dependencies to the store and triggers calculations directly after. Await this function to have up to date\n     * references on the added dependencies.\n     *\n     * ```javascript\n     * const [dependency] = await dependencyStore.addAsync({ from, to });\n     * // dependency.fromEvent is available (assuming EventStore is loaded and so on)\n     * ```\n     *\n     * @param {Scheduler.model.DependencyModel|Scheduler.model.DependencyModel[]|DependencyModelConfig|DependencyModelConfig[]} records\n     * Array of records/data or a single record/data to add to store\n     * @param {Boolean} [silent] Specify `true` to suppress events\n     * @returns {Scheduler.model.DependencyModel[]} Added records\n     * @function addAsync\n     * @category CRUD\n     * @async\n     */\n    /**\n     * Applies a new dataset to the DependencyStore. Use it to plug externally fetched data into the store.\n     *\n     * NOTE: References (fromEvent, toEvent) on the dependencies are determined async by a calculation engine. Thus\n     * they cannot be directly accessed after assigning the new dataset.\n     *\n     * For example:\n     *\n     * ```javascript\n     * dependencyStore.data = [{ from, to }];\n     * // dependencyStore.first.fromEvent is not yet available\n     * ```\n     *\n     * To guarantee references are available, wait for calculations for finish:\n     *\n     * ```javascript\n     * dependencyStore.data = [{ from, to }];\n     * await dependencyStore.project.commitAsync();\n     * // dependencyStore.first.fromEvent is available\n     * ```\n     *\n     * Alternatively use `loadDataAsync()` instead:\n     *\n     * ```javascript\n     * await dependencyStore.loadDataAsync([{ from, to }]);\n     * // dependencyStore.first.fromEvent is available\n     * ```\n     *\n     * @member {DependencyModelConfig[]} data\n     * @category Records\n     */\n    /**\n     * Applies a new dataset to the DependencyStore and triggers calculations directly after. Use it to plug externally\n     * fetched data into the store.\n     *\n     * ```javascript\n     * await dependencyStore.loadDataAsync([{ from, to }]);\n     * // dependencyStore.first.fromEvent is available\n     * ```\n     *\n     * @param {DependencyModelConfig[]} data Array of DependencyModel data objects\n     * @function loadDataAsync\n     * @category CRUD\n     * @async\n     */\n    static get defaultConfig() {\n        return {\n            /**\n             * CrudManager must load stores in the correct order. Lowest first.\n             * @private\n             */\n            loadPriority : 400,\n            /**\n             * CrudManager must sync stores in the correct order. Lowest first.\n             * @private\n             */\n            syncPriority : 400,\n            storeId : 'dependencies'\n        };\n    }\n    reduceEventDependencies(event, reduceFn, result, flat = true, depsGetterFn) {\n        depsGetterFn = depsGetterFn || (event => this.getEventDependencies(event));\n        event = ArrayHelper.asArray(event);\n        event.reduce((result, event) => {\n            if (event.children && !flat) {\n                event.traverse(evt => {\n                    result = depsGetterFn(evt).reduce(reduceFn, result);\n                });\n            }\n            else {\n                result = depsGetterFn(event).reduce(reduceFn, result);\n            }\n        }, result);\n        return result;\n    }\n    mapEventDependencies(event, fn, filterFn, flat, depsGetterFn) {\n        return this.reduceEventDependencies(event, (result, dependency) => {\n            filterFn(dependency) && result.push(dependency);\n            return result;\n        }, [], flat, depsGetterFn);\n    }\n    mapEventPredecessors(event, fn, filterFn, flat) {\n        return this.reduceEventPredecessors(event, (result, dependency) => {\n            filterFn(dependency) && result.push(dependency);\n            return result;\n        }, [], flat);\n    }\n    mapEventSuccessors(event, fn, filterFn, flat) {\n        return this.reduceEventSuccessors(event, (result, dependency) => {\n            filterFn(dependency) && result.push(dependency);\n            return result;\n        }, [], flat);\n    }\n    /**\n     * Returns all dependencies for a certain event (both incoming and outgoing)\n     *\n     * @param {Scheduler.model.EventModel} event\n     * @returns {Scheduler.model.DependencyModel[]}\n     */\n    getEventDependencies(event) {\n        return [].concat(event.predecessors || [], event.successors || []);\n    }\n    removeEventDependencies(event) {\n        this.remove(this.getEventDependencies(event));\n    }\n    removeEventPredecessors(event) {\n        this.remove(event.predecessors);\n    }\n    removeEventSuccessors(event, flat) {\n        this.remove(event.successors);\n    }\n    getBySourceTargetId(key) {\n        return this.records.find(r =>\n            key == this.constructor.makeDependencySourceTargetCompositeKey(r.from, r.to)\n        );\n    }\n    /**\n     * Returns dependency model instance linking tasks with given ids. The dependency can be forward (from 1st\n     * task to 2nd) or backward (from 2nd to 1st).\n     *\n     * @param {Scheduler.model.EventModel|String} sourceEvent 1st event\n     * @param {Scheduler.model.EventModel|String} targetEvent 2nd event\n     * @returns {Scheduler.model.DependencyModel}\n     */\n    getDependencyForSourceAndTargetEvents(sourceEvent, targetEvent) {\n        sourceEvent = Model.asId(sourceEvent);\n        targetEvent = Model.asId(targetEvent);\n        return this.getBySourceTargetId(this.constructor.makeDependencySourceTargetCompositeKey(sourceEvent, targetEvent));\n    }\n    /**\n     * Returns a dependency model instance linking given events if such dependency exists in the store.\n     * The dependency can be forward (from 1st event to 2nd) or backward (from 2nd to 1st).\n     *\n     * @param {Scheduler.model.EventModel|String} sourceEvent\n     * @param {Scheduler.model.EventModel|String} targetEvent\n     * @returns {Scheduler.model.DependencyModel}\n     */\n    getEventsLinkingDependency(sourceEvent, targetEvent) {\n        return this.getDependencyForSourceAndTargetEvents(sourceEvent, targetEvent) ||\n            this.getDependencyForSourceAndTargetEvents(targetEvent, sourceEvent);\n    }\n    /**\n     * Validation method used to validate a dependency. Override and return `true` to indicate that an\n     * existing dependency between two tasks is valid. For a new dependency being created please see\n     * {@link #function-isValidDependencyToCreate}.\n     *\n     * @param {Scheduler.model.DependencyModel|Scheduler.model.TimeSpan|Number|String} dependencyOrFromId The dependency\n     * model, the from task/event or the id of the from task/event\n     * @param {Scheduler.model.TimeSpan|Number|String} [toId] To task/event or id thereof if the first parameter is not\n     * a dependency record\n     * @param {Number} [type] Dependency {@link Scheduler.model.DependencyBaseModel#property-Type-static} if the first\n     * parameter is not a dependency model instance.\n     * @returns {Boolean}\n     */\n    async isValidDependency(dependencyOrFromId, toId, type) {\n        let fromEvent = dependencyOrFromId, toEvent = toId;\n        if (dependencyOrFromId == null) {\n            return false;\n        }\n        // Accept dependency model\n        if (dependencyOrFromId.isDependencyModel) {\n            ({ fromEvent, toEvent } = dependencyOrFromId);\n        }\n        // Accept from as id\n        fromEvent = this.eventStore.getById(fromEvent);\n        // Accept to as id\n        toEvent = this.eventStore.getById(toEvent);\n        // This condition is supposed to map all model instances to be validated by project. Lowest common ancestor\n        // for scheduler event, scheduler pro event and gantt task is TimeSpan\n        if (fromEvent && toEvent) {\n            // Block creating dependencies to display only tasks in Gantt\n            if (!fromEvent.project || !toEvent.project) {\n                return false;\n            }\n            // Not asserting dependency type here. Default value should normally suffice.\n            return this.project.isValidDependency(fromEvent, toEvent, type);\n        }\n        return dependencyOrFromId !== toId;\n    }\n    /**\n     * Validation method used to validate a dependency while creating. Override and return `true` to indicate that\n     * a new dependency is valid to be created.\n     *\n     * @param {Scheduler.model.TimeSpan|Number|String} fromId From event/task or id\n     * @param {Scheduler.model.TimeSpan|Number|String} toId To event/task or id\n     * @param {Number} type Dependency {@link Scheduler.model.DependencyBaseModel#property-Type-static}\n     * @returns {Boolean}\n     */\n    isValidDependencyToCreate(fromId, toId, type) {\n        return this.isValidDependency(fromId, toId, type);\n    }\n    /**\n     * Returns all dependencies highlighted with the given CSS class\n     *\n     * @param {String} cls\n     * @returns {Scheduler.model.DependencyBaseModel[]}\n     */\n    getHighlightedDependencies(cls) {\n        return this.records.reduce((result, dep) => {\n            if (dep.isHighlightedWith(cls)) result.push(dep);\n            return result;\n        }, []);\n    }\n    static makeDependencySourceTargetCompositeKey(from, to) {\n        return `source(${from})-target(${to})`;\n    }\n    //region Product neutral\n    getTimeSpanDependencies(record) {\n        return this.getEventDependencies(record);\n    }\n    //endregion\n};\n", "import { Mixin } from \"../../../ChronoGraph/class/Mixin.js\";\nimport { AbstractPartOfProjectStoreMixin } from \"./mixin/AbstractPartOfProjectStoreMixin.js\";\nimport { CIFromSetOrArrayOrValue } from '../../util/Functions.js';\n// Shared functionality for CoreDependencyStore & ChronoDependencyStore\nexport class AbstractDependencyStoreMixin extends Mixin([AbstractPartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class AbstractDependencyStoreMixin extends base {\n        constructor() {\n            super(...arguments);\n            this.dependenciesForRemoval = new Set();\n            this.allDependenciesForRemoval = false;\n        }\n        remove(records, silent) {\n            this.dependenciesForRemoval = CIFromSetOrArrayOrValue(records).toSet();\n            const res = superProto.remove.call(this, records, silent);\n            this.dependenciesForRemoval.clear();\n            return res;\n        }\n        removeAll(silent) {\n            this.allDependenciesForRemoval = true;\n            const res = superProto.removeAll.call(this, silent);\n            this.allDependenciesForRemoval = false;\n            return res;\n        }\n    }\n    return AbstractDependencyStoreMixin;\n}) {\n}\n", "import { Mixin } from \"../../../ChronoGraph/class/BetterMixin.js\";\nimport { CorePartOfProjectStoreMixin } from \"./mixin/CorePartOfProjectStoreMixin.js\";\nimport { CoreDependencyMixin } from \"../model/scheduler_core/CoreDependencyMixin.js\";\nimport { AbstractDependencyStoreMixin } from \"./AbstractDependencyStoreMixin.js\";\nconst emptySet = new Set();\n/**\n * A store mixin class, that represent collection of all dependencies in the [[SchedulerCoreProjectMixin|project]].\n */\nexport class CoreDependencyStoreMixin extends Mixin([AbstractDependencyStoreMixin, CorePartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreDependencyStoreMixin extends base {\n        constructor() {\n            super(...arguments);\n            this.dependenciesForRemoval = new Set();\n            this.allDependenciesForRemoval = false;\n        }\n        static get defaultConfig() {\n            return {\n                modelClass: CoreDependencyMixin,\n                storage: {\n                    extraKeys: [\n                        { property: 'fromEvent', unique: false },\n                        { property: 'toEvent', unique: false }\n                    ]\n                }\n            };\n        }\n        getIncomingDepsForEvent(event) {\n            return this.storage.findItem('toEvent', event) || emptySet;\n        }\n        getOutgoingDepsForEvent(event) {\n            return this.storage.findItem('fromEvent', event) || emptySet;\n        }\n        set data(value) {\n            this.allDependenciesForRemoval = true;\n            super.data = value;\n            this.allDependenciesForRemoval = false;\n        }\n        updateIndices() {\n            this.storage.rebuildIndices();\n        }\n        invalidateIndices() {\n            this.storage.invalidateIndices();\n        }\n        onCommitAsync() {\n            this.updateIndices();\n        }\n    }\n    return CoreDependencyStoreMixin;\n}) {\n}\n", "import AjaxStore from '../../Core/data/AjaxStore.js';\nimport DependencyModel from '../model/DependencyModel.js';\nimport PartOfProject from './mixin/PartOfProject.js';\nimport DependencyStoreMixin from './mixin/DependencyStoreMixin.js';\nimport { CoreDependencyStoreMixin } from '../../Engine/quark/store/CoreDependencyStoreMixin.js';\nimport PartOfBaseProject from './mixin/PartOfBaseProject.js';\nconst EngineMixin = PartOfProject(CoreDependencyStoreMixin.derive(AjaxStore));\n/**\n * @module Scheduler/data/DependencyStore\n */\n/**\n * A store representing a collection of dependencies between events in the {@link Scheduler.data.EventStore}.\n *\n * This store only accepts a model class inheriting from {@link Scheduler.model.DependencyModel}.\n *\n * A DependencyStore is usually connected to a project, which binds it to other related stores (EventStore,\n * AssignmentStore and ResourceStore). The project also handles references (fromEvent, toEvent) to related records\n * for the records in the store.\n *\n * Resolving the references happens async, records are not guaranteed to have up to date references until calculations\n * are finished. To be certain that references are resolved, call `await project.commitAsync()` after store actions. Or\n * use one of the `xxAsync` functions, such as `loadDataAsync()`.\n *\n * Using `commitAsync()`:\n *\n * ```javascript\n * dependencyStore.data = [{ from, to }, ...];\n *\n * // references (fromEvent, toEvent) not resolved yet\n *\n * await dependencyStore.project.commitAsync();\n *\n * // now they are\n * ```\n *\n * Using `loadDataAsync()`:\n *\n * ```javascript\n * await dependencyStore.loadDataAsync([{ from, to }, ...]);\n *\n * // references (fromEvent, toEvent) are resolved\n * ```\n *\n * @mixes Scheduler/data/mixin/PartOfProject\n * @mixes Scheduler/data/mixin/DependencyStoreMixin\n * @extends Core/data/AjaxStore\n */\nexport default class DependencyStore extends DependencyStoreMixin(EngineMixin.derive(AjaxStore)) {\n    static get defaultConfig() {\n        return {\n            modelClass : DependencyModel\n        };\n    }\n}\nDependencyStore._$name = 'DependencyStore';", "/**\n * @module Scheduler/crud/mixin/AbstractCrudManagerValidation\n */\n/**\n * Mixin proving responses validation API to Crud Manager.\n * @mixin\n */\nexport default Target => class AbstractCrudManagerValidation extends Target {\n    static get $name() {\n        return 'AbstractCrudManagerValidation';\n    }\n    static get configurable() {\n        return {\n            /**\n             * This config validates the response structure for requests made by the Crud Manager.\n             * When `true`, the Crud Manager checks every parsed response structure for errors\n             * and if the response format is invalid, a warning is logged to the browser console.\n             *\n             * The config is intended to help developers implementing backend integration.\n             *\n             * @config {Boolean}\n             * @default\n             * @category CRUD\n             */\n            validateResponse : true,\n            /**\n             * When `true` treats parsed responses without `success` property as successful.\n             * In this mode a parsed response is treated as invalid if it has explicitly set `success : false`.\n             * @config {Boolean}\n             * @default\n             * @category CRUD\n             */\n            skipSuccessProperty : true,\n            crudLoadValidationWarningPrefix : 'CrudManager load response error(s):',\n            crudSyncValidationWarningPrefix : 'CrudManager sync response error(s):',\n            supportShortSyncResponseNote : 'Note: Please consider enabling \"supportShortSyncResponse\" option to allow less detailed sync responses (https://bryntum.com/products/scheduler/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-supportShortSyncResponse)',\n            disableValidationNote : 'Note: To disable this validation please set the \"validateResponse\" config to false'\n        };\n    }\n    get crudLoadValidationMandatoryStores() {\n        return [];\n    }\n    getStoreLoadResponseWarnings(storeInfo, responded, expectedResponse) {\n        const\n            messages        = [],\n            { storeId }     = storeInfo,\n            mandatoryStores = this.crudLoadValidationMandatoryStores,\n            result          = { [storeId] : {} };\n        // if the store section is responded\n        if (responded) {\n            if (!responded.rows) {\n                messages.push(`- \"${storeId}\" store section should have a \"rows\" property with an array of the store records.`);\n                result[storeId].rows = ['...'];\n            }\n        }\n        // if the store is mandatory\n        else if (mandatoryStores?.includes(storeId)) {\n            messages.push(`- No \"${storeId}\" store section found. It should contain the store data.`);\n            result[storeId].rows = ['...'];\n        }\n        // extend expected response w/ this store part\n        if (messages.length) {\n            Object.assign(expectedResponse, result);\n        }\n        return messages;\n    }\n    getLoadResponseWarnings(response) {\n        const\n            messages         = [],\n            expectedResponse = {};\n        if (!this.skipSuccessProperty) {\n            expectedResponse.success = true;\n        }\n        // iterate stores to check properties validity\n        this.forEachCrudStore((store, storeId, storeInfo) => {\n            messages.push(...this.getStoreLoadResponseWarnings(storeInfo, response?.[storeId], expectedResponse));\n        });\n        if (messages.length) {\n            messages.push('Please adjust your response to look like this:\\n' +\n                JSON.stringify(expectedResponse, null, 4).replace(/\"\\.\\.\\.\"/g, '...'));\n            messages.push(this.disableValidationNote);\n        }\n        return messages;\n    }\n    validateLoadResponse(response) {\n        const messages = this.getLoadResponseWarnings(response);\n        if (messages.length) {\n            console.warn(this.crudLoadValidationWarningPrefix + '\\n' + messages.join('\\n'));\n        }\n    }\n    getStoreSyncResponseWarnings(storeInfo, requested, responded, expectedResponse) {\n        const\n            messages         = [],\n            missingRows      = [],\n            missingRemoved   = [],\n            { storeId }      = storeInfo,\n            result           = { [storeId] : {} },\n            phantomIdField   = storeInfo.phantomIdField || this.phantomIdField,\n            { modelClass }   = storeInfo.store,\n            { idField }      = modelClass,\n            respondedRows    = responded?.rows || [],\n            respondedRemoved = responded?.removed || [];\n        let showSupportShortSyncResponseNote = false;\n        // if added records were passed in the request they should be mentioned in the response\n        if (requested?.added) {\n            missingRows.push(\n                ...requested.added.filter(record => {\n                    return !respondedRows.find(row => row[phantomIdField] == record[phantomIdField]) &&\n                        !respondedRemoved.find(row => row[phantomIdField] == record[phantomIdField] || row[idField] == record[phantomIdField]);\n                }).map(record => ({ [phantomIdField] : record[phantomIdField], [idField] : '...' }))\n            );\n            if (missingRows.length) {\n                const missingIds = missingRows.map(row => '#' + row[phantomIdField]).join(', ');\n                messages.push(`- \"${storeId}\" store \"rows\" section should mention added record(s) ${missingIds} sent in the request. ` +\n                    'It should contain the added records identifiers (both phantom and \"real\" ones assigned by the backend).');\n            }\n        }\n        // if short responses are enabled\n        if (this.supportShortSyncResponse) {\n            // if the data is not object, will return error\n            if (!missingRows.length && responded) {\n                if (typeof responded !== 'object' || Array.isArray(responded)) {\n                    messages.push(`- \"${storeId}\" store section should be an Object.`);\n                    result[storeId]['...'] = '...';\n                }\n                // for request to edit records, if rows is present, it must be an array\n                if (responded.rows && !Array.isArray(responded.rows)) {\n                    messages.push(`- \"${storeId}\" store \"rows\" section should be an array`);\n                    missingRows.push('...');\n                }\n                // removed if presented must be an array\n                if (responded.removed && !Array.isArray(responded.removed)) {\n                    messages.push(`- \"${storeId}\" store \"removed\" section should be an array:`);\n                    missingRemoved.push('...');\n                }\n            }\n        }\n        // if short responses are disabled\n        else {\n            // if updated records were passed in the request they should be mentioned in the response\n            if (requested?.updated) {\n                const missingUpdatedRows = requested.updated.filter(record => !respondedRows.find(row => row[idField] == record[idField]))\n                    .map(record => ({ [idField] : record[idField] }));\n                missingRows.push(...missingUpdatedRows);\n                if (missingUpdatedRows.length) {\n                    const missingIds = missingUpdatedRows.map(row => '#' + row[idField]).join(', ');\n                    messages.push(`- \"${storeId}\" store \"rows\" section should mention updated record(s) ${missingIds} sent in the request. ` +\n                        `It should contain the updated record identifiers.`);\n                    showSupportShortSyncResponseNote = true;\n                }\n            }\n            if (missingRows.length) {\n                missingRows.push('...');\n            }\n            // if removed records were passed in the request they should be mentioned in the response\n            if (requested?.removed) {\n                missingRemoved.push(\n                    ...requested.removed.filter(record => !respondedRows.find(row => row[idField] == record[idField]))\n                        .map(record => ({ [idField] : record[idField] }))\n                );\n                if (missingRemoved.length) {\n                    const missingIds = missingRemoved.map(row => '#' + row[idField]).join(', ');\n                    messages.push(`- \"${storeId}\" store \"removed\" section should mention removed record(s) ${missingIds} sent in the request. ` +\n                        `It should contain the removed record identifiers.`);\n                    result[storeId].removed = missingRemoved;\n                    missingRemoved.push('...');\n                    showSupportShortSyncResponseNote = true;\n                }\n            }\n        }\n        if (missingRows.length) {\n            result[storeId].rows = missingRows;\n        }\n        // get rid of store section if no rows/removed there\n        if (!messages.length) {\n            delete result[storeId];\n        }\n        // extend expected response w/ this store part\n        Object.assign(expectedResponse, result);\n        return { messages, showSupportShortSyncResponseNote };\n    }\n    getSyncResponseWarnings(response, requestDesc) {\n        const\n            messages         = [],\n            expectedResponse = {},\n            request          = requestDesc.pack;\n        if (!this.skipSuccessProperty) {\n            expectedResponse.success = true;\n        }\n        let showSupportShortSyncResponseNote = false;\n        // iterate stores to check properties validity\n        this.forEachCrudStore((store, storeId, storeInfo) => {\n            const warnings = this.getStoreSyncResponseWarnings(storeInfo, request?.[storeId], response[storeId], expectedResponse);\n            showSupportShortSyncResponseNote = showSupportShortSyncResponseNote || warnings.showSupportShortSyncResponseNote;\n            messages.push(...warnings.messages);\n        });\n        if (messages.length) {\n            messages.push('Please adjust your response to look like this:\\n' +\n                JSON.stringify(expectedResponse, null, 4).replace(/\"\\.\\.\\.\":\\s*\"\\.\\.\\.\"/g, ',,,').replace(/\"\\.\\.\\.\"/g, '...'));\n            if (showSupportShortSyncResponseNote) {\n                messages.push(this.supportShortSyncResponseNote);\n            }\n            messages.push(this.disableValidationNote);\n        }\n        return messages;\n    }\n    validateSyncResponse(response, request) {\n        const messages = this.getSyncResponseWarnings(response, request);\n        if (messages.length) {\n            console.warn(this.crudSyncValidationWarningPrefix + '\\n' + messages.join('\\n'));\n        }\n    }\n};\n", "import Store from '../../Core/data/Store.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\nimport ArrayHelper from '../../Core/helper/ArrayHelper.js';\nimport Objects from '../../Core/helper/util/Objects.js';\nimport Base from '../../Core/Base.js';\nimport Events from '../../Core/mixin/Events.js';\nimport AbstractCrudManagerValidation from './mixin/AbstractCrudManagerValidation.js';\n/**\n * @module Scheduler/crud/AbstractCrudManagerMixin\n */\nexport class AbstractCrudManagerError extends Error {}\nexport class CrudManagerRequestError extends AbstractCrudManagerError {\n    constructor(cfg = {}) {\n        super(cfg.message || cfg.request && StringHelper.capitalize(cfg.request?.type) + ' failed' || 'Crud Manager request failed');\n        Object.assign(this, cfg);\n        this.action = this.request?.type;\n    }\n}\nconst\n    storeSortFn     = function(lhs, rhs, sortProperty) {\n        if (lhs.store) {\n            lhs = lhs.store;\n        }\n        if (rhs.store) {\n            rhs = rhs.store;\n        }\n        lhs = lhs[sortProperty] || 0;\n        rhs = rhs[sortProperty] || 0;\n        return (lhs < rhs) ? -1 : ((lhs > rhs) ? 1 : 0);\n    },\n    // Sorter function to keep stores in loadPriority order\n    storeLoadSortFn = function(lhs, rhs) {\n        return storeSortFn(lhs, rhs, 'loadPriority');\n    },\n    // Sorter function to keep stores in syncPriority order\n    storeSyncSortFn = function(lhs, rhs) {\n        return storeSortFn(lhs, rhs, 'syncPriority');\n    };\n/**\n * An abstract mixin that supplies most of the CrudManager functionality.\n * It implements basic mechanisms of collecting stores to organize batch communication with a server.\n * It does not contain methods related to _data transfer_ nor _encoding_.\n * These methods are to be provided in sub-classes.\n * Out of the box there are mixins implementing {@link Scheduler/crud/transport/AjaxTransport support of AJAX for data transferring}\n * and {@link Scheduler/crud/encoder/JsonEncoder JSON for data encoding system}.\n * For example this is how we make a model that will implement CrudManager protocol and use AJAX/JSON to pass the data\n * to the server:\n *\n * ```javascript\n * class SystemSettings extends JsonEncode(AjaxTransport(AbstractCrudManagerMixin(Model))) {\n *     ...\n * }\n * ```\n *\n * ## Data transfer and encoding methods\n *\n * These are methods that must be provided by subclasses of this class:\n *\n * - {@link #function-sendRequest}\n * - {@link #function-cancelRequest}\n * - {@link #function-encode}\n * - {@link #function-decode}\n *\n * @mixin\n * @mixes Core/mixin/Delayable\n * @mixes Core/mixin/Events\n * @mixes Scheduler/crud/mixin/AbstractCrudManagerValidation\n * @abstract\n */\nexport default Target => {\n    // Trigger $meta calculation to get up-to-date is \"isXXX\" flags\n    // (kinky construction to avoid production minification faced in Angular https://github.com/bryntum/support/issues/2889)\n    Target.$$meta = Target.$meta;\n    const mixins = [];\n    // These two mixins are mixed in the Scheduling Engine code ..but in its own way\n    // so that Base.mixin() cannot understand that they are already there and applies them 2nd time\n    if (!Target.isEvents) {\n        mixins.push(Events);\n    }\n    if (!Target.isDelayable) {\n        mixins.push(Delayable);\n    }\n    mixins.push(AbstractCrudManagerValidation);\n    return class AbstractCrudManagerMixin extends (Target || Base).mixin(...mixins) {\n        /**\n         * Fires before server response gets applied to the stores. Return `false` to prevent data applying.\n         * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.\n         * @event beforeResponseApply\n         * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n         * @param {'sync'|'load'} requestType The request type (`sync` or `load`).\n         * @param {Object} response The decoded server response object.\n         */\n        /**\n         * Fires before loaded data get applied to the stores. Return `false` to prevent data applying.\n         * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.\n         * @event beforeLoadApply\n         * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n         * @param {Object} response The decoded server response object.\n         * @param {Object} options Options provided to the {@link #function-load} method.\n         */\n        /**\n         * Fires before sync response data get applied to the stores. Return `false` to prevent data applying.\n         * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.\n         * @event beforeSyncApply\n         * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n         * @param {Object} response The decoded server response object.\n         */\n        static get $name() {\n            return 'AbstractCrudManagerMixin';\n        }\n        //region Default config\n        static get defaultConfig() {\n            return {\n                /**\n                 * The server revision stamp.\n                 * The _revision stamp_ is a number which should be incremented after each server-side change.\n                 * This property reflects the current version of the data retrieved from the server and gets updated\n                 * after each {@link #function-load} and {@link #function-sync} call.\n                 * @property {Number}\n                 * @readonly\n                 * @category CRUD\n                 */\n                crudRevision : null,\n                /**\n                 * A list of registered stores whose server communication will be collected into a single batch.\n                 * Each store is represented by a _store descriptor_.\n                 * @member {CrudManagerStoreDescriptor[]} crudStores\n                 * @category CRUD\n                 */\n                /**\n                 * Sets the list of stores controlled by the CRUD manager.\n                 *\n                 * When adding a store to the CrudManager, make sure the server response format is correct for `load`\n                 * and `sync` requests. Learn more in the\n                 * [Working with data](#Scheduler/guides/data/crud_manager.md#loading-data) guide.\n                 *\n                 * Store can be provided by itself, its storeId or as a _store descriptor_.\n                 * @config {Core.data.Store[]|String[]|CrudManagerStoreDescriptor[]}\n                 * @category CRUD\n                 */\n                crudStores : [],\n                /**\n                 * Name of a store property to retrieve store identifiers from. Make sure you have an instance of a\n                 * store to use it by id. Store identifier is used as a container name holding corresponding store data\n                 * while transferring them to/from the server. By default, `storeId` property is used. And in case a\n                 * container identifier has to differ this config can be used:\n                 *\n                 * ```javascript\n                 * class CatStore extends Store {\n                 *     static configurable = {\n                 *         // store id is \"meow\" but for sending/receiving store data\n                 *         // we want to have \"cats\" container in JSON, so we create a new property \"storeIdForCrud\"\n                 *         id             : 'meow',\n                 *         storeIdForCrud : 'cats'\n                 *     }\n                 * });\n                 *\n                 * // create an instance to use a store by id\n                 * new CatStore();\n                 *\n                 * class MyCrudManager extends CrudManager {\n                 *     ...\n                 *     crudStores           : ['meow'],\n                 *     // crud manager will get store identifier from \"storeIdForCrud\" property\n                 *     storeIdProperty  : 'storeIdForCrud'\n                 * });\n                 * ```\n                 * The `storeIdProperty` property can also be specified directly on a store:\n                 *\n                 * ```javascript\n                 * class CatStore extends Store {\n                 *     static configurable = {\n                 *         // storeId is \"meow\" but for sending/receiving store data\n                 *         // we want to have \"cats\" container in JSON\n                 *         id              : 'meow',\n                 *         // so we create a new property \"storeIdForCrud\"..\n                 *         storeIdForCrud  : 'cats',\n                 *         // and point CrudManager to use it as the store identifier source\n                 *         storeIdProperty  : 'storeIdForCrud'\n                 *     }\n                 * });\n                 *\n                 * class DogStore extends Store {\n                 *     static configurable = {\n                 *         // storeId is \"dogs\" and it will be used as a container name for the store data\n                 *         storeId : 'dogs',\n                 *         // id is set to get a store by identifier\n                 *         id      : 'dogs'\n                 *     }\n                 * });\n                 *\n                 * // create an instance to use a store by id\n                 * new CatStore();\n                 * new DogStore();\n                 *\n                 * class MyCrudManager extends CrudManager {\n                 *     ...\n                 *     crudStores : ['meow', 'dogs']\n                 * });\n                 * ```\n                 * @config {String}\n                 * @category CRUD\n                 */\n                storeIdProperty : 'storeId',\n                crudFilterParam : 'filter',\n                /**\n                 * Sends request to the server.\n                 * @function sendRequest\n                 * @param {Object} request The request to send. An object having following properties:\n                 * @param {'load'|'sync'} request.type Request type, can be either `load` or `sync`\n                 * @param {String} request.data {@link #function-encode Encoded} request.\n                 * @param {Function} request.success Callback to be started on successful request transferring\n                 * @param {Function} request.failure Callback to be started on request transfer failure\n                 * @param {Object} request.thisObj `this` reference for the above `success` and `failure` callbacks\n                 * @returns {Promise} The request promise.\n                 * @abstract\n                 */\n                /**\n                 * Cancels request to the server.\n                 * @function cancelRequest\n                 * @param {Promise} promise The request promise to cancel (a value returned by corresponding\n                 * {@link #function-sendRequest} call).\n                 * @param {Function} reject Reject handle of the corresponding promise\n                 * @abstract\n                 */\n                /**\n                 * Encodes request to the server.\n                 * @function encode\n                 * @param {Object} request The request to encode.\n                 * @returns {String} The encoded request.\n                 * @abstract\n                 */\n                /**\n                 * Decodes response from the server.\n                 * @function decode\n                 * @param {String} response The response to decode.\n                 * @returns {Object} The decoded response.\n                 * @abstract\n                 */\n                transport : {},\n                /**\n                 * When `true` forces the CRUD manager to process responses depending on their `type` attribute.\n                 * So `load` request may be responded with `sync` response for example.\n                 * Can be used for smart server logic allowing the server to decide when it's better to respond with a\n                 * complete data set (`load` response) or it's enough to return just a delta (`sync` response).\n                 * @config {Boolean}\n                 * @default\n                 * @category CRUD\n                 */\n                trackResponseType : false,\n                /**\n                 * When `true` the Crud Manager does not require all updated and removed records to be mentioned in the\n                 * *sync* response. In this case response should include only server side changes.\n                 *\n                 * **Please note that added records should still be mentioned in response to provide real identifier\n                 * instead of the phantom one.**\n                 * @config {Boolean}\n                 * @default\n                 * @category CRUD\n                 */\n                supportShortSyncResponse : true,\n                /**\n                 * Field name to be used to transfer a phantom record identifier.\n                 * @config {String}\n                 * @default\n                 * @category CRUD\n                 */\n                phantomIdField : '$PhantomId',\n                /**\n                 * Field name to be used to transfer a phantom parent record identifier.\n                 * @config {String}\n                 * @default\n                 * @category CRUD\n                 */\n                phantomParentIdField : '$PhantomParentId',\n                /**\n                 * Specify `true` to automatically call {@link #function-load} method on the next frame after creation.\n                 *\n                 * Called on the next frame to allow a Scheduler (or similar) linked to a standalone CrudManager to\n                 * register its stores before loading starts.\n                 *\n                 * @config {Boolean}\n                 * @default\n                 * @category CRUD\n                 */\n                autoLoad : false,\n                /**\n                 * The timeout in milliseconds to wait before persisting changes to the server.\n                 * Used when {@link #config-autoSync} is set to `true`.\n                 * @config {Number}\n                 * @default\n                 * @category CRUD\n                 */\n                autoSyncTimeout : 100,\n                /**\n                 * `true` to automatically persist store changes after edits are made in any of the stores monitored.\n                 * Please note that sync request will not be invoked immediately but only after\n                 * {@link #config-autoSyncTimeout} interval.\n                 * @config {Boolean}\n                 * @default\n                 * @category CRUD\n                 */\n                autoSync : false,\n                /**\n                 * `True` to reset identifiers (defined by `idField` config) of phantom records before submitting them\n                 * to the server.\n                 * @config {Boolean}\n                 * @default\n                 * @category CRUD\n                 */\n                resetIdsBeforeSync : true,\n                /**\n                 * @member {CrudManagerStoreDescriptor[]} syncApplySequence\n                 * An array of stores presenting an alternative sync responses apply order.\n                 * Each store is represented by a _store descriptor_.\n                 * @category CRUD\n                 */\n                /**\n                 * An array of store identifiers sets an alternative sync responses apply order.\n                 * By default, the order in which sync responses are applied to the stores is the same as they\n                 * registered in. But in case of some tricky dependencies between stores this order can be changed:\n                 *\n                 *```javascript\n                 * class MyCrudManager extends CrudManager {\n                 *     // register stores (will be loaded in this order: 'store1' then 'store2' and finally 'store3')\n                 *     crudStores : ['store1', 'store2', 'store3'],\n                 *     // but we apply changes from server to them in an opposite order\n                 *     syncApplySequence : ['store3', 'store2', 'store1']\n                 * });\n                 *```\n                 * @config {String[]}\n                 * @category CRUD\n                 */\n                syncApplySequence : [],\n                orderedCrudStores : [],\n                /**\n                 * `true` to write all fields from the record to the server.\n                 * If set to `false` it will only send the fields that were modified.\n                 * Note that any fields that have {@link Core/data/field/DataField#config-persist} set to `false` will\n                 * still be ignored and fields having {@link Core/data/field/DataField#config-alwaysWrite} set to `true`\n                 * will always be included.\n                 * @config {Boolean}\n                 * @default\n                 * @category CRUD\n                 */\n                writeAllFields : false,\n                crudIgnoreUpdates : 0,\n                autoSyncSuspendCounter : 0,\n                // Flag that shows if crud manager performed successful load request\n                crudLoaded : false,\n                applyingLoadResponse : false,\n                applyingSyncResponse : false,\n                callOnFunctions : true\n            };\n        }\n        static configurable = {\n            /**\n             * Convenience shortcut to set only the url to load from, when you do not need to supply any other config\n             * options in the `load` section of the `transport` config.\n             *\n             * Using `loadUrl`:\n             * ```javascript\n             * {\n             *     loadUrl : 'read.php\n             * }\n             * ```\n             *\n             * Equals the following `transport` config:\n             * ```javascript\n             * {\n             *     transport : {\n             *         load : {\n             *             url : 'read.php'\n             *         }\n             *     }\n             * }\n             * ```\n             *\n             * When read at runtime, it will return the value from `transport.load.url`.\n             *\n             * @prp {String}\n             */\n            loadUrl : null,\n            /**\n             * Convenience shortcut to set only the url to sync to, when you do not need to supply any other config\n             * options in the `sync` section of the `transport` config.\n             *\n             * Using `loadUrl`:\n             * ```javascript\n             * {\n             *     syncUrl : 'sync.php\n             * }\n             * ```\n             *\n             * Equals the following `transport` config:\n             * ```javascript\n             * {\n             *     transport : {\n             *         load : {\n             *             url : 'sync.php'\n             *         }\n             *     }\n             * }\n             * ```\n             *\n             * When read at runtime, it will return the value from `transport.sync.url`.\n             *\n             * @prp {String}\n             */\n            syncUrl : null,\n            /**\n             * Specify as `true` to force sync requests to be sent when calling `sync()`, even if there are no local\n             * changes. Useful in a polling scenario, to keep client up to date with the backend.\n             * @prp {Boolean}\n             */\n            forceSync : null\n        };\n        static delayable = {\n            // Postponed to next frame, to allow Scheduler created after CrudManager to inject its stores\n            // (timeRanges, resourceTimeRanges)\n            doAutoLoad : 'raf'\n        };\n        get isCrudManager() {\n            return true;\n        }\n        //endregion\n        //region Init\n        construct(config = {}) {\n            this._requestId = 0;\n            this.activeRequests = {};\n            this.crudStoresIndex = {};\n            super.construct(config);\n        }\n        afterConstruct() {\n            super.afterConstruct();\n            if (this.autoLoad) {\n                this._autoLoadPromise = this.doAutoLoad();\n            }\n        }\n        //endregion\n        //region Configs\n        get loadUrl() {\n            return this.transport?.load?.url;\n        }\n        updateLoadUrl(url) {\n            ObjectHelper.setPath(this, 'transport.load.url', url);\n        }\n        get syncUrl() {\n            return this.transport?.sync?.url;\n        }\n        updateSyncUrl(url) {\n            ObjectHelper.setPath(this, 'transport.sync.url', url);\n        }\n        //endregion\n        //region Store descriptors & index\n        /**\n         * Returns a registered store descriptor.\n         * @param {String|Core.data.Store} storeId The store identifier or registered store instance.\n         * @returns {CrudManagerStoreDescriptor} The descriptor of the store.\n         * @category CRUD\n         */\n        getStoreDescriptor(storeId) {\n            if (!storeId) return null;\n            if (storeId instanceof Store) return this.crudStores.find(storeDesc => storeDesc.store === storeId);\n            if (typeof storeId === 'object') return this.crudStoresIndex[storeId.storeId];\n            return this.crudStoresIndex[storeId] || this.getStoreDescriptor(Store.getStore(storeId));\n        }\n        fillStoreDescriptor(descriptor) {\n            const\n                { store } = descriptor,\n                {\n                    storeIdProperty = this.storeIdProperty,\n                    modelClass\n                }         = store;\n            if (!descriptor.storeId) {\n                descriptor.storeId = store[storeIdProperty] || store.id;\n            }\n            if (!descriptor.idField) {\n                descriptor.idField = modelClass.idField;\n            }\n            if (!descriptor.phantomIdField) {\n                descriptor.phantomIdField = modelClass.phantomIdField;\n            }\n            if (!descriptor.phantomParentIdField) {\n                descriptor.phantomParentIdField = modelClass.phantomParentIdField;\n            }\n            if (!('writeAllFields' in descriptor)) {\n                descriptor.writeAllFields = store.writeAllFields;\n            }\n            return descriptor;\n        }\n        updateCrudStoreIndex() {\n            const\n                crudStoresIndex = this.crudStoresIndex = {};\n            this.crudStores.forEach(store => store.storeId && (crudStoresIndex[store.storeId] = store));\n        }\n        //endregion\n        //region Store collection (add, remove, get & iterate)\n        /**\n         * Returns a registered store.\n         * @param {String} storeId Store identifier.\n         * @returns {Core.data.Store} Found store instance.\n         * @category CRUD\n         */\n        getCrudStore(storeId) {\n            const storeDescriptor = this.getStoreDescriptor(storeId);\n            return storeDescriptor?.store;\n        }\n        forEachCrudStore(fn, thisObj = this) {\n            if (!fn) {\n                throw new Error('Iterator function must be provided');\n            }\n            this.crudStores.every(store =>\n                fn.call(thisObj, store.store, store.storeId, store) !== false\n            );\n        }\n        set crudStores(stores) {\n            this._crudStores = [];\n            this.addCrudStore(stores);\n            // Ensure preconfigured stores stay stable at the start of the array when\n            // addPrioritizedStore attempts to insert in order. Only featured gantt/scheduler stores\n            // must participate in the ordering. If they were configured in, they must not move.\n            for (const store of this._crudStores) {\n                store.loadPriority = store.syncPriority = 0;\n            }\n        }\n        get crudStores() {\n            return this._crudStores;\n        }\n        get orderedCrudStores() {\n            return this._orderedCrudStores;\n        }\n        set orderedCrudStores(stores) {\n            return this._orderedCrudStores = stores;\n        }\n        set syncApplySequence(stores) {\n            this._syncApplySequence = [];\n            this.addStoreToApplySequence(stores);\n        }\n        get syncApplySequence() {\n            return this._syncApplySequence;\n        }\n        internalAddCrudStore(store) {\n            const\n                me = this;\n            let storeInfo;\n            // if store instance provided\n            if (store instanceof Store) {\n                storeInfo = { store };\n            }\n            else if (typeof store === 'object') {\n                if (!store.store) {\n                    // not a store descriptor, assume it is a store config\n                    store = {\n                        storeId : store.id,\n                        store   : new Store(store)\n                    };\n                }\n                storeInfo = store;\n            }\n            // if it's a store identifier\n            else {\n                storeInfo = { store : Store.getStore(store) };\n            }\n            me.fillStoreDescriptor(storeInfo);\n            // store instance\n            store = storeInfo.store;\n            // if the store has \"setCrudManager\" hook - use it\n            if (store.setCrudManager) {\n                store.setCrudManager(me);\n            }\n            // otherwise decorate the store w/ \"crudManager\" property\n            else {\n                store.crudManager = me;\n            }\n            // Stores have a defaultConfig for pageSize. CrudManager does not support that.\n            store.pageSize = null;\n            // Prevent AjaxStores from performing their own CRUD operations if CrudManager is configured with an URL\n            if (me.loadUrl || me.syncUrl) {\n                store.autoCommit = false;\n                store.autoLoad = false;\n                if (store.createUrl || store.updateUrl || store.deleteUrl || store.readUrl) {\n                    console.warn('You have configured an URL on a Store that is handled by a CrudManager that is also configured with an URL. The Store URL\\'s should be removed.');\n                }\n            }\n            // listen to store changes\n            me.bindCrudStoreListeners(store);\n            return storeInfo;\n        }\n        /**\n         * Adds a store to the collection.\n         *\n         *```javascript\n         * // append stores to the end of collection\n         * crudManager.addCrudStore([\n         *     store1,\n         *     // storeId\n         *     'bar',\n         *     // store descriptor\n         *     {\n         *         storeId : 'foo',\n         *         store   : store3\n         *     },\n         *     {\n         *         storeId         : 'bar',\n         *         store           : store4,\n         *         // to write all fields of modified records\n         *         writeAllFields  : true\n         *     }\n         * ]);\n         *```\n         *\n         * **Note:** Order in which stores are kept in the collection is very essential sometimes.\n         * Exactly in this order the loaded data will be put into each store.\n         *\n         * When adding a store to the CrudManager, make sure the server response format is correct for `load` and `sync`\n         * requests. Learn more in the [Working with data](#Scheduler/guides/data/crud_manager.md#loading-data) guide.\n         *\n         * @param {Core.data.Store|String|CrudManagerStoreDescriptor|Core.data.Store[]|String[]|CrudManagerStoreDescriptor[]} store\n         * A store or list of stores. Each store might be specified by its instance, `storeId` or _descriptor_.\n         * @param {Number} [position] The relative position of the store. If `fromStore` is specified the position\n         * will be taken relative to it. If not specified then store(s) will be appended to the end of collection.\n         * Otherwise, it will be just a position in stores collection.\n         *\n         * ```javascript\n         * // insert stores store4, store5 to the start of collection\n         * crudManager.addCrudStore([ store4, store5 ], 0);\n         * ```\n         *\n         * @param {String|Core.data.Store|CrudManagerStoreDescriptor} [fromStore] The store relative to which position\n         * should be calculated. Can be defined as a store identifier, instance or descriptor (the result of\n         * {@link #function-getStoreDescriptor} call).\n         *\n         * ```javascript\n         * // insert store6 just before a store having storeId equal to 'foo'\n         * crudManager.addCrudStore(store6, 0, 'foo');\n         *\n         * // insert store7 just after store3 store\n         * crudManager.addCrudStore(store7, 1, store3);\n         * ```\n         * @category CRUD\n         */\n        addCrudStore(store, position, fromStore) {\n            store = ArrayHelper.asArray(store);\n            if (!store?.length) {\n                return;\n            }\n            const\n                me     = this,\n                stores = store.map(me.internalAddCrudStore, me);\n            // if no position specified then append stores to the end\n            if (typeof position === 'undefined') {\n                me.crudStores.push(...stores);\n            }\n            // if position specified\n            else {\n                // if specified the store relative to which we should insert new one(-s)\n                if (fromStore) {\n                    if (fromStore instanceof Store || typeof fromStore !== 'object') fromStore = me.getStoreDescriptor(fromStore);\n                    // get its position\n                    position += me.crudStores.indexOf(fromStore);\n                }\n                // insert new store(-s)\n                me.crudStores.splice(position, 0, ...stores);\n            }\n            me.orderedCrudStores.push(...stores);\n            me.updateCrudStoreIndex();\n        }\n        // Adds configured scheduler stores to the store collection ensuring correct order\n        // unless they're already registered.\n        addPrioritizedStore(store) {\n            const me = this;\n            if (!me.hasCrudStore(store)) {\n                me.addCrudStore(store, ArrayHelper.findInsertionIndex(store, me.crudStores, storeLoadSortFn));\n            }\n            if (!me.hasApplySequenceStore(store)) {\n                me.addStoreToApplySequence(store, ArrayHelper.findInsertionIndex(store, me.syncApplySequence, storeSyncSortFn));\n            }\n        }\n        hasCrudStore(store) {\n            return this.crudStores?.some(s => s === store || s.store === store || s.storeId === store);\n        }\n        /**\n         * Removes a store from collection. If the store was registered in alternative sync sequence list\n         * it will be removed from there as well.\n         *\n         * ```javascript\n         * // remove store having storeId equal to \"foo\"\n         * crudManager.removeCrudStore(\"foo\");\n         *\n         * // remove store3\n         * crudManager.removeCrudStore(store3);\n         * ```\n         *\n         * @param {CrudManagerStoreDescriptor|String|Core.data.Store} store The store to remove. Either the store\n         * descriptor, store identifier or store itself.\n         * @category CRUD\n         */\n        removeCrudStore(store) {\n            const\n                me         = this,\n                stores     = me.crudStores,\n                foundStore = stores.find(s => s === store || s.store === store || s.storeId === store);\n            if (foundStore) {\n                // unbind store listeners\n                me.unbindCrudStoreListeners(foundStore.store);\n                delete me.crudStoresIndex[foundStore.storeId];\n                ArrayHelper.remove(stores, foundStore);\n                if (me.syncApplySequence) {\n                    me.removeStoreFromApplySequence(store);\n                }\n            }\n            else {\n                throw new Error('Store not found in stores collection');\n            }\n        }\n        //endregion\n        //region Store listeners\n        bindCrudStoreListeners(store) {\n            store.ion({\n                name : store.id,\n                // When a tentatively added record gets confirmed as permanent, this signals a change\n                addConfirmed : 'onCrudStoreChange',\n                change       : 'onCrudStoreChange',\n                destroy      : 'onCrudStoreDestroy',\n                thisObj      : this\n            });\n        }\n        unbindCrudStoreListeners(store) {\n            this.detachListeners(store.id);\n        }\n        //endregion\n        //region Apply sequence\n        /**\n         * Adds a store to the alternative sync responses apply sequence.\n         * By default, the order in which sync responses are applied to the stores is the same as they registered in.\n         * But this order can be changes either on construction step using {@link #config-syncApplySequence} option\n         * or by calling this method.\n         *\n         * **Please note**, that if the sequence was not initialized before this method call then\n         * you will have to do it yourself like this for example:\n         *\n         * ```javascript\n         * // alternative sequence was not set for this crud manager\n         * // so let's fill it with existing stores keeping the same order\n         * crudManager.addStoreToApplySequence(crudManager.crudStores);\n         *\n         * // and now we can add our new store\n         *\n         * // we will load its data last\n         * crudManager.addCrudStore(someNewStore);\n         * // but changes to it will be applied first\n         * crudManager.addStoreToApplySequence(someNewStore, 0);\n         * ```\n         * add registered stores to the sequence along with the store(s) you want to add\n         *\n         * @param {Core.data.Store|CrudManagerStoreDescriptor|Core.data.Store[]|CrudManagerStoreDescriptor[]} store The\n         * store to add or its _descriptor_ (or array of stores or descriptors).\n         * @param {Number} [position] The relative position of the store. If `fromStore` is specified the position\n         * will be taken relative to it. If not specified then store(s) will be appended to the end of collection.\n         * Otherwise, it will be just a position in stores collection.\n         *\n         * ```javascript\n         * // insert stores store4, store5 to the start of sequence\n         * crudManager.addStoreToApplySequence([ store4, store5 ], 0);\n         * ```\n         * @param {String|Core.data.Store|CrudManagerStoreDescriptor} [fromStore] The store relative to which position\n         * should be calculated. Can be defined as a store identifier, instance or its descriptor (the result of\n         * {@link #function-getStoreDescriptor} call).\n         *\n         * ```javascript\n         * // insert store6 just before a store having storeId equal to 'foo'\n         * crudManager.addStoreToApplySequence(store6, 0, 'foo');\n         *\n         * // insert store7 just after store3 store\n         * crudManager.addStoreToApplySequence(store7, 1, store3);\n         * ```\n         * @category CRUD\n         */\n        addStoreToApplySequence(store, position, fromStore) {\n            if (!store) {\n                return;\n            }\n            store = ArrayHelper.asArray(store);\n            const\n                me   = this,\n                // loop over list of stores to add\n                data = store.reduce((collection, store) => {\n                    const s = me.getStoreDescriptor(store);\n                    s && collection.push(s);\n                    return collection;\n                }, []);\n            // if no position specified then append stores to the end\n            if (typeof position === 'undefined') {\n                me.syncApplySequence.push(...data);\n                // if position specified\n            }\n            else {\n                let pos = position;\n                // if specified the store relative to which we should insert new one(-s)\n                if (fromStore) {\n                    if (fromStore instanceof Store || typeof fromStore !== 'object') fromStore = me.getStoreDescriptor(fromStore);\n                    // get its position\n                    pos += me.syncApplySequence.indexOf(fromStore);\n                }\n                // insert new store(-s)\n                //me.syncApplySequence.splice.apply(me.syncApplySequence, [].concat([pos, 0], data));\n                me.syncApplySequence.splice(pos, 0, ...data);\n            }\n            const sequenceKeys = me.syncApplySequence.map(({ storeId }) => storeId);\n            me.orderedCrudStores = [...me.syncApplySequence];\n            me.crudStores.forEach(storeDesc => {\n                if (!sequenceKeys.includes(storeDesc.storeId)) {\n                    me.orderedCrudStores.push(storeDesc);\n                }\n            });\n        }\n        /**\n         * Removes a store from the alternative sync sequence.\n         *\n         * ```javascript\n         * // remove store having storeId equal to \"foo\"\n         * crudManager.removeStoreFromApplySequence(\"foo\");\n         * ```\n         *\n         * @param {CrudManagerStoreDescriptor|String|Core.data.Store} store The store to remove. Either the store\n         * descriptor, store identifier or store itself.\n         * @category CRUD\n         */\n        removeStoreFromApplySequence(store) {\n            const index = this.syncApplySequence.findIndex(s => s === store || s.store === store || s.storeId === store);\n            if (index > -1) {\n                this.syncApplySequence.splice(index, 1);\n                // ordered crud stores list starts with syncApplySequence, we can use same index\n                this.orderedCrudStores.splice(index, 1);\n            }\n        }\n        hasApplySequenceStore(store) {\n            return this.syncApplySequence.some(s => s === store || s.store === store || s.storeId === store);\n        }\n        //endregion\n        //region Events\n        // Remove stores that are destroyed, to not try and apply response changes etc. to them\n        onCrudStoreDestroy({ source : store }) {\n            this.removeCrudStore(store);\n        }\n        onCrudStoreChange(event) {\n            const me = this;\n            if (me.crudIgnoreUpdates) {\n                return;\n            }\n            /**\n             * Fires when data in any of the registered data stores is changed.\n             * ```javascript\n             *     crudManager.on('hasChanges', function (crud) {\n             *         // enable persist changes button when some store gets changed\n             *         saveButton.enable();\n             *     });\n             * ```\n             *\n             * You can suspend this event with {@link #function-suspendChangeTracking} API call.\n             *\n             * @event hasChanges\n             * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n             */\n            if (me.crudStoreHasChanges(event?.source)) {\n                me.trigger('hasChanges');\n                if (me.autoSync) {\n                    me.scheduleAutoSync();\n                }\n            }\n            else {\n                me.trigger('noChanges');\n            }\n        }\n        /**\n         * Suspends automatic sync upon store changes. Can be called multiple times (it uses an internal counter).\n         * @category CRUD\n         */\n        suspendAutoSync() {\n            this.autoSyncSuspendCounter++;\n        }\n        /**\n         * Resumes automatic sync upon store changes. Will schedule a sync if the internal counter is 0.\n         * @param {Boolean} [doSync=true] Pass `true` to schedule a sync after resuming (if there are pending\n         * changes) and `false` to not persist the changes.\n         * @category CRUD\n         */\n        resumeAutoSync(doSync = true) {\n            const me = this;\n            me.autoSyncSuspendCounter--;\n            if (me.autoSyncSuspendCounter <= 0) {\n                me.autoSyncSuspendCounter = 0;\n                // if configured to trigger persisting and there are changes\n                if (doSync && me.autoSync && me.crudStoreHasChanges()) {\n                    me.scheduleAutoSync();\n                }\n            }\n        }\n        get isAutoSyncSuspended() {\n            return this.autoSyncSuspendCounter > 0;\n        }\n        scheduleAutoSync() {\n            const me = this;\n            // add deferred call if it's not scheduled yet\n            if (!me.hasTimeout('autoSync') && !me.isAutoSyncSuspended) {\n                me.setTimeout({\n                    name : 'autoSync',\n                    fn   : () => {\n                        me.sync().catch(error => {\n                        });\n                    },\n                    delay : me.autoSyncTimeout\n                });\n            }\n        }\n        async triggerFailedRequestEvents(request, response, responseText, fetchOptions) {\n            const { options, type : requestType } = request;\n            /**\n             * Fires when a request fails.\n             * @event requestFail\n             * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager instance.\n             * @param {'sync'|'load'} requestType The request type (`sync` or `load`).\n             * @param {Object} response The decoded server response object.\n             * @param {String} responseText The raw server response text\n             * @param {Object} responseOptions The response options.\n             */\n            this.trigger('requestFail', { requestType, response, responseText, responseOptions : fetchOptions });\n            /**\n             * Fires when a {@link #function-load load request} fails.\n             * @event loadFail\n             * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager instance.\n             * @param {Object} response The decoded server response object.\n             * @param {String} responseText The raw server response text\n             * @param {Object} responseOptions The response options.\n             * @params {Object} options Options provided to the {@link #function-load} method.\n             */\n            /**\n             * Fires when a {@link #function-sync sync request} fails.\n             * @event syncFail\n             * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager instance.\n             * @param {Object} response The decoded server response object.\n             * @param {String} responseText The raw server response text\n             * @param {Object} responseOptions The response options.\n             */\n            this.trigger(requestType + 'Fail', { response, responseOptions : fetchOptions, responseText, options });\n        }\n        async internalOnResponse(request, responseText, fetchOptions) {\n            const\n                me                              = this,\n                response                        = responseText ? me.decode(responseText) : null,\n                { options, type : requestType } = request;\n            if (responseText && !response) {\n                console.error('Failed to parse response: ' + responseText);\n            }\n            if (!response || (me.skipSuccessProperty ? response.success === false : !response.success)) {\n                me.triggerFailedRequestEvents(request, response, responseText, fetchOptions);\n            }\n            else if (\n                me.trigger('beforeResponseApply', { requestType, response }) !== false &&\n                me.trigger(`before${StringHelper.capitalize(requestType)}Apply`, { response, options }) !== false\n            ) {\n                me.crudRevision = response.revision;\n                await me.applyResponse(request, response, options);\n                // Might have been destroyed while applying response\n                if (me.isDestroyed) {\n                    return;\n                }\n                /**\n                 * Fires on successful request completion after data gets applied to the stores.\n                 * @event requestDone\n                 * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n                 * @param {'sync'|'load'} requestType The request type (`sync` or `load`).\n                 * @param {Object} response The decoded server response object.\n                 * @param {Object} responseOptions The server response options.\n                 */\n                me.trigger('requestDone', { requestType, response, responseOptions : fetchOptions });\n                /**\n                 * Fires on successful {@link #function-load load request} completion after data gets loaded to the stores.\n                 * @event load\n                 * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n                 * @param {Object} response The decoded server response object.\n                 * @param {Object} responseOptions The server response options.\n                 * @params {Object} options Options provided to the {@link #load} method.\n                 */\n                /**\n                 * Fires on successful {@link #function-sync sync request} completion.\n                 * @event sync\n                 * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n                 * @param {Object} response The decoded server response object.\n                 * @param {Object} responseOptions The server response options.\n                 */\n                me.trigger(requestType, { response, responseOptions : fetchOptions, options });\n                if (requestType === 'load' || !me.crudStoreHasChanges()) {\n                    /**\n                     * Fires when registered stores get into state when they don't have any\n                     * not persisted change. This happens after {@link #function-load} or {@link #function-sync} request\n                     * completion. Or this may happen after a record update which turns its fields back to their original state.\n                     *\n                     * ```javascript\n                     * crudManager.on('nochanges', function (crud) {\n                     *     // disable persist changes button when there is no changes\n                     *     saveButton.disable();\n                     * });\n                     * ```\n                     *\n                     * You can suspend this event with {@link #function-suspendChangeTracking} API call.\n                     *\n                     * @event noChanges\n                     * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n                     */\n                    me.trigger('noChanges');\n                    if (requestType === 'load') {\n                        me.emitCrudStoreEvents(request.pack.stores, 'afterRequest');\n                    }\n                }\n            }\n            return response;\n        }\n        //endregion\n        //region Changes tracking\n        /**\n         * Suspends {@link #event-hasChanges} and {@link #event-noChanges} events.\n         * @category CRUD\n         */\n        suspendChangeTracking() {\n            this.crudIgnoreUpdates++;\n        }\n        /**\n         * Resumes {@link #event-hasChanges} and {@link #event-noChanges} events. By default, it will check for changes\n         * and if there are any, `hasChanges` or `noChanges` event will be triggered.\n         * @param {Boolean} [skipChangeCheck]\n         * @category CRUD\n         */\n        resumeChangeTracking(skipChangeCheck) {\n            if (this.crudIgnoreUpdates && !--this.crudIgnoreUpdates && !skipChangeCheck) {\n                this.onCrudStoreChange();\n            }\n        }\n        /**\n         * Returns `true` if changes tracking is suspended\n         * @property {Boolean}\n         * @readonly\n         * @category CRUD\n         */\n        get isChangeTrackingSuspended() {\n            return this.crudIgnoreUpdates > 0;\n        }\n        /**\n         * Returns `true` if any of registered stores (or some particular store) has non persisted changes.\n         *\n         * ```javascript\n         * // if we have any unsaved changes\n         * if (crudManager.crudStoreHasChanges()) {\n         *     // persist them\n         *     crudManager.sync();\n         * // otherwise\n         * } else {\n         *     alert(\"There are no unsaved changes...\");\n         * }\n         * ```\n         *\n         * @param {String|Core.data.Store} [storeId] The store identifier or store instance to check changes for.\n         * If not specified then will check changes for all of the registered stores.\n         * @returns {Boolean} `true` if there are not persisted changes.\n         * @category CRUD\n         */\n        crudStoreHasChanges(storeId) {\n            return storeId\n                ? this.isCrudStoreDirty(this.getCrudStore(storeId))\n                : this.crudStores.some(config => this.isCrudStoreDirty(config.store));\n        }\n        isCrudStoreDirty(store) {\n            return Boolean(store.changes);\n        }\n        //endregion\n        //region Load\n        doAutoLoad() {\n            return this.load().catch(error => {\n            });\n        }\n        emitCrudStoreEvents(stores, eventName, eventParams) {\n            const event = { action : 'read' + eventName, ...eventParams };\n            for (const store of this.crudStores) {\n                if (stores.includes(store.storeId)) {\n                    store.store.trigger(eventName, event);\n                }\n            }\n        }\n        getLoadPackage(options) {\n            const\n                pack        = {\n                    type      : 'load',\n                    requestId : this.requestId\n                },\n                stores      = this.crudStores,\n                optionsCopy = Object.assign({}, options);\n            // This is a special option which does not apply to a store.\n            // It's used as options to the AjaxTransport#sendRequest method\n            delete optionsCopy.request;\n            pack.stores = stores.map(store => {\n                const\n                    opts     = optionsCopy?.[store.storeId],\n                    pageSize = store.pageSize || store.store?.pageSize;\n                if (opts || pageSize) {\n                    const\n                        params = Object.assign({\n                            storeId : store.storeId,\n                            page    : 1\n                        }, opts);\n                    if (pageSize) {\n                        params.pageSize = pageSize;\n                    }\n                    store.currentPage = params.page;\n                    // Remove from common request options\n                    if (opts) {\n                        delete optionsCopy[store.storeId];\n                    }\n                    return params;\n                }\n                return store.storeId;\n            });\n            // Apply common request options\n            Object.assign(pack, optionsCopy);\n            return pack;\n        }\n        loadCrudStore(store, data, options) {\n            const rows = data?.rows;\n            if (options?.append || data?.append) {\n                // Add records clean - that is they are not treated as new, syncable records\n                // which need syncing with the server. They are *from* the server.\n                store.add(rows, false, { clean : true });\n            }\n            else {\n                store.data = rows;\n            }\n            store.trigger('load', { data : rows });\n        }\n        loadDataToCrudStore(storeDesc, data, options) {\n            const\n                store = storeDesc.store,\n                rows  = data?.rows;\n            store.__loading = true;\n            if (rows) {\n                this.loadCrudStore(store, data, options, storeDesc);\n            }\n            store.__loading = false;\n        }\n        /**\n         * Loads data to the Crud Manager\n         * @param {Object} response A simple object representing the data.\n         * The object structure matches the decoded `load` response structure:\n         *\n         * ```js\n         * // load static data into crudManager\n         * crudManager.loadCrudManagerData({\n         *     success   : true,\n         *     resources : {\n         *         rows : [\n         *             { id : 1, name : 'John' },\n         *             { id : 2, name : 'Abby' }\n         *         ]\n         *     }\n         * });\n         * ```\n         * @param {Object} [options] Extra data loading options.\n         * @category CRUD\n         */\n        loadCrudManagerData(response, options = {}) {\n            const me = this;\n            me.trigger('beforeLoadCrudManagerData');\n            // we don't want to react to store changes during loading of them\n            me.suspendChangeTracking();\n            // we load data to the stores in the order they're kept in this.stores array\n            me.crudStores.forEach(storeDesc => {\n                const\n                    storeId = storeDesc.storeId,\n                    data    = response[storeId];\n                if (data) {\n                    me.loadDataToCrudStore(storeDesc, data, options[storeId]);\n                }\n            });\n            me.resumeChangeTracking(true);\n            me.trigger('loadCrudManagerData');\n        }\n        /**\n         * Returns true if the crud manager is currently loading data\n         * @property {Boolean}\n         * @readonly\n         * @category CRUD\n         */\n        get isCrudManagerLoading() {\n            return Boolean(this.activeRequests.load || this.applyingLoadResponse);\n        }\n        /**\n         * Returns true if the crud manager is currently syncing data\n         * @property {Boolean}\n         * @readonly\n         * @category CRUD\n         */\n        get isCrudManagerSyncing() {\n            return Boolean(this.activeRequests.sync || this.applyingSyncResponse);\n        }\n        get isLoadingOrSyncing() {\n            return Boolean(this.isCrudManagerLoading || this.isCrudManagerSyncing);\n        }\n        /**\n         * Loads data to the stores registered in the crud manager. For example:\n         *\n         * ```javascript\n         * crudManager.load(\n         *     // here are request parameters\n         *     {\n         *         store1 : { append : true, page : 3, smth : 'foo' },\n         *         store2 : { page : 2, bar : '!!!' }\n         *     }\n         * ).then(\n         *     () => alert('OMG! It works!'),\n         *     ({ response, cancelled }) => console.log(`Error: ${cancelled ? 'Cancelled' : response.message}`)\n         * );\n         * ```\n         *\n         * ** Note: ** If there is an incomplete load request in progress then system will try to cancel it by calling {@link #function-cancelRequest}.\n         * @param {Object|String} [options] The request parameters or a URL.\n         * @param {Object} [options.request] An object which contains options to merge\n         * into the options which are passed to {@link Scheduler/crud/transport/AjaxTransport#function-sendRequest}.\n         * ```javascript\n         * {\n         *     store1 : { page : 3, append : true, smth : 'foo' },\n         *     store2 : { page : 2, bar : '!!!' },\n         *     request : {\n         *         params : {\n         *             startDate : '2021-01-01'\n         *         }\n         *     }\n         * },\n         * ```\n         *\n         * Omitting request arg:\n         * ```javascript\n         * crudManager.load().then(\n         *     () => alert('OMG! It works!'),\n         *     ({ response, cancelled }) => console.log(`Error: ${cancelled ? 'Cancelled' : response.message}`)\n         * );\n         * ```\n         *\n         * When presented it should be an object where keys are store Ids and values are, in turn, objects\n         * of parameters related to the corresponding store. These parameters will be transferred in each\n         * store's entry in the `stores` property of the POST data.\n         *\n         * Additionally, for flat stores `append: true` can be specified to add loaded records to the existing records,\n         * default is to remove corresponding store's existing records first.\n         * **Please note** that for delta loading you can also use an {@link #config-trackResponseType alternative approach}.\n         * @param {'sync'|'load'} [options.request.type] The request type. Either `load` or `sync`.\n         * @param {String} [options.request.url] The URL for the request. Overrides the URL defined in the `transport`\n         * object\n         * @param {String} [options.request.data] The encoded _Crud Manager_ request data.\n         * @param {Object} [options.request.params] An object specifying extra HTTP params to send with the request.\n         * @param {Function} [options.request.success] A function to be started on successful request transferring.\n         * @param {String} [options.request.success.rawResponse] `Response` object returned by the\n         * [fetch api](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n         * @param {Function} [options.request.failure] A function to be started on request transfer failure.\n         * @param {String} [options.request.failure.rawResponse] `Response` object returned by the\n         * [fetch api](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n         * @param {Object} [options.request.thisObj] `this` reference for the above `success` and `failure` functions.\n         * @returns {Promise} Promise, which is resolved if request was successful.\n         * Both the resolve and reject functions are passed a `state` object. State object has following structure:\n         *\n         * ```\n         * {\n         *     cancelled       : Boolean, // **optional** flag, which is present when promise was rejected\n         *     rawResponse     : String,  // raw response from ajax request, either response xml or text\n         *     rawResponseText : String,  // raw response text as String from ajax request\n         *     response        : Object,  // processed response in form of object\n         *     options         : Object   // options, passed to load request\n         * }\n         * ```\n         *\n         * If promise was rejected by {@link #event-beforeLoad} event, `state` object will have the following structure:\n         *\n         * ```\n         * {\n         *     cancelled : true\n         * }\n         * ```\n         * @category CRUD\n         * @async\n         */\n        load(options) {\n            if (typeof options === 'string') {\n                options = {\n                    request : {\n                        url : options\n                    }\n                };\n            }\n            const\n                me   = this,\n                pack = me.getLoadPackage(options);\n            me._autoLoadPromise = null;\n            return new Promise((resolve, reject) => {\n                /**\n                 * Fires before {@link #function-load load request} is sent. Return `false` to cancel load request.\n                 * @event beforeLoad\n                 * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n                 * @param {Object} pack The data package which contains data for all stores managed by the crud manager.\n                 */\n                if (me.trigger('beforeLoad', { pack }) !== false) {\n                    // if another load request is in progress let's cancel it\n                    const { load } = me.activeRequests;\n                    if (load) {\n                        me.cancelRequest(load.desc, load.reject);\n                        me.trigger('loadCanceled', { pack });\n                    }\n                    const request = Objects.assign({\n                        id      : pack.requestId,\n                        data    : me.encode(pack),\n                        type    : 'load',\n                        success : me.onCrudRequestSuccess,\n                        failure : me.onCrudRequestFailure,\n                        thisObj : me\n                    }, options?.request);\n                    me.activeRequests.load = {\n                        type : 'load',\n                        options,\n                        pack,\n                        resolve,\n                        reject(...args) {\n                            // sendRequest will start a fetch promise, which we cannot reject from here. In fact what we\n                            // need to do, is to make fetch.then() to not call any real handlers. Which is what we do here.\n                            request.success = request.failure = null;\n                            reject(...args);\n                        },\n                        id   : pack.requestId,\n                        desc : me.sendRequest(request)\n                    };\n                    me.emitCrudStoreEvents(pack.stores, 'loadStart');\n                    me.trigger('loadStart', { pack });\n                }\n                else {\n                    /**\n                     * Fired after {@link #function-load load request} was canceled by some {@link #event-beforeLoad}\n                     * listener or due to incomplete prior load request.\n                     * @event loadCanceled\n                     * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n                     * @param {Object} pack The data package which contains data for all stores managed by the crud\n                     * manager.\n                     */\n                    me.trigger('loadCanceled', { pack });\n                    reject({ cancelled : true });\n                }\n            });\n        }\n        getActiveCrudManagerRequest(requestType) {\n            let request = this.activeRequests[requestType];\n            if (!request && this.trackResponseType) {\n                request = Object.values(this.activeRequests)[0];\n            }\n            return request;\n        }\n        //endregion\n        //region Changes (prepare, process, get)\n        prepareAddedRecordData(record, storeInfo) {\n            const\n                me                   = this,\n                { store }            = storeInfo,\n                { isTree }           = store,\n                phantomIdField       = storeInfo.phantomIdField || me.phantomIdField,\n                phantomParentIdField = storeInfo.phantomParentIdField || me.phantomParentIdField,\n                subStoreFields       = store.modelClass.allFields.filter(field => field.subStore),\n                cls                  = record.constructor,\n                data                 = Object.assign(record.persistableData, {\n                    [phantomIdField] : record.id\n                });\n            if (isTree) {\n                const { parent } = record;\n                if (parent && !parent.isRoot && parent.isPhantom) {\n                    data[phantomParentIdField] = parent.id;\n                }\n            }\n            if (me.resetIdsBeforeSync) {\n                ObjectHelper.deletePath(data, cls.idField);\n            }\n            // If we have store fields that should be persisted w/ Crud Manager protocol\n            subStoreFields.forEach(field => {\n                const subStore = record.get(field.name);\n                if (subStore.allCount) {\n                    data[field.dataSource] = {\n                        added : subStore.getRange()\n                            .map(record => me.prepareAddedRecordData(record, { store : subStore }))\n                    };\n                }\n            });\n            return data;\n        }\n        prepareAdded(list, storeInfo) {\n            return list.filter(record => record.isValid).map(record => this.prepareAddedRecordData(record, storeInfo));\n        }\n        prepareUpdated(list, storeInfo) {\n            const\n                { store }            = storeInfo,\n                { isTree }           = store,\n                writeAllFields       = storeInfo.writeAllFields || (storeInfo.writeAllFields !== false && this.writeAllFields),\n                phantomParentIdField = storeInfo.phantomParentIdField || this.phantomParentIdField,\n                subStoreFields       = store.modelClass.allFields.filter(field => field.subStore);\n            if (storeInfo.store.tree) {\n                const rootNode = storeInfo.store.rootNode;\n                list = list.filter(record => record !== rootNode);\n            }\n            return list.filter(record => record.isValid).reduce((data, record) => {\n                let recordData;\n                // write all fields\n                if (writeAllFields) {\n                    recordData = record.persistableData;\n                }\n                else {\n                    recordData = record.modificationDataToWrite;\n                }\n                if (isTree) {\n                    const { parent } = record;\n                    if (parent && !parent.isRoot && parent.isPhantom) {\n                        recordData[phantomParentIdField] = parent.id;\n                    }\n                }\n                // If we have store fields that should be persisted w/ Crud Manager protocal\n                subStoreFields.forEach(field => {\n                    const subStore = record.get(field.name);\n                    recordData[field.dataSource] = this.getCrudStoreChanges({ store : subStore });\n                });\n                // recordData can be null\n                if (!ObjectHelper.isEmpty(recordData)) {\n                    data.push(recordData);\n                }\n                return data;\n            }, []);\n        }\n        prepareRemoved(list) {\n            return list.map(record => {\n                const cls = record.constructor;\n                return ObjectHelper.setPath({}, cls.idField, record.id);\n            });\n        }\n        getCrudStoreChanges(storeDescriptor) {\n            const { store } = storeDescriptor;\n            let { added = [], modified : updated = [], removed = [] } = (store.changes || {}),\n                result;\n            if (added.length) added = this.prepareAdded(added, storeDescriptor);\n            if (updated.length) updated = this.prepareUpdated(updated, storeDescriptor);\n            if (removed.length) removed = this.prepareRemoved(removed);\n            // if this store has changes\n            if (added.length || updated.length || removed.length) {\n                result = {};\n                if (added.length) result.added = added;\n                if (updated.length) result.updated = updated;\n                if (removed.length) result.removed = removed;\n            }\n            return result;\n        }\n        getChangesetPackage() {\n            const { changes } = this;\n            return changes || this.forceSync\n                ? {\n                    type      : 'sync',\n                    requestId : this.requestId,\n                    revision  : this.crudRevision,\n                    ...changes\n                } : null;\n        }\n        //endregion\n        //region Apply\n        /**\n         * Returns current changes as an object consisting of added/modified/removed arrays of records for every\n         * managed store, keyed by each store's `id`. Returns `null` if no changes exist. Format:\n         *\n         * ```javascript\n         * {\n         *     resources : {\n         *         added    : [{ name : 'New guy' }],\n         *         modified : [{ id : 2, name : 'Mike' }],\n         *         removed  : [{ id : 3 }]\n         *     },\n         *     events : {\n         *         modified : [{  id : 12, name : 'Cool task' }]\n         *     },\n         *     ...\n         * }\n         * ```\n         *\n         * @property {Object}\n         * @readonly\n         * @category CRUD\n         */\n        get changes() {\n            const data = {};\n            this.crudStores.forEach(store => {\n                const changes = this.getCrudStoreChanges(store);\n                if (changes) {\n                    data[store.storeId] = changes;\n                }\n            });\n            return Object.keys(data).length > 0 ? data : null;\n        }\n        getRowsToApplyChangesTo({ store, storeId }, storeResponse, storePack) {\n            const\n                me             = this,\n                { modelClass } = store,\n                idDataSource   = modelClass.idField,\n                // request data\n                {\n                    updated : requestUpdated,\n                    removed : requestRemoved\n                }              = storePack || {};\n            let rows, removed, remote;\n            // If the response contains the store section\n            if (storeResponse) {\n                remote = true;\n                const respondedIds = {};\n                // responded record changes/removals\n                rows    = storeResponse.rows?.slice() || [];\n                removed = storeResponse.removed?.slice() || [];\n                // Collect hash w/ identifiers of responded records\n                [...rows, ...removed].forEach(responseRecord => {\n                    const id = ObjectHelper.getPath(responseRecord, idDataSource);\n                    respondedIds[id] = true;\n                });\n                // If it's told to support providing server changes only in response\n                // CrudManager should collect other records to commit from current requested data\n                if (me.supportShortSyncResponse) {\n                    // append records requested to update (if not there already)\n                    requestUpdated?.forEach(data => {\n                        const id = ObjectHelper.getPath(data, idDataSource);\n                        // if response doesn't include\n                        if (!respondedIds[id]) {\n                            rows.push({ [idDataSource] : id });\n                        }\n                    });\n                    // append records requested to remove (if not there already)\n                    requestRemoved?.forEach(data => {\n                        const id = ObjectHelper.getPath(data, idDataSource);\n                        // if response doesn't include\n                        if (!respondedIds[id]) {\n                            removed.push({ [idDataSource] : id });\n                        }\n                    });\n                }\n            }\n            // If there is no this store section we use records mentioned in the current request\n            else if (requestUpdated || requestRemoved) {\n                remote  = false;\n                rows    = requestUpdated;\n                removed = requestRemoved;\n            }\n            // return nullish \"rows\"/\"removed\" if no entries\n            rows    = rows?.length ? rows : null;\n            removed = removed?.length ? removed : null;\n            return {\n                rows,\n                removed,\n                remote\n            };\n        }\n        applyChangesToStore(storeDesc, storeResponse, storePack) {\n            const\n                me                = this,\n                phantomIdField    = storeDesc.phantomIdField || me.phantomIdField,\n                { store }         = storeDesc,\n                idField           = store.modelClass.getFieldDataSource('id'),\n                subStoreFields    = store.modelClass.allFields.filter(field => field.subStore),\n                // collect records we need to process\n                { rows, removed, remote } = me.getRowsToApplyChangesTo(storeDesc, storeResponse, storePack),\n                added = [],\n                updated = [];\n            // Convert to the { updated, added } format accepted by stores\n            if (rows) {\n                for (const data of rows) {\n                    // Existing records are updated\n                    if (store.getById(data[phantomIdField] ?? data[idField])) {\n                        updated.push(data);\n                    }\n                    // Others added\n                    else {\n                        added.push(data);\n                    }\n                }\n            }\n            const extraLogEntries = [];\n            // Handle sub-stores (if any)\n            if (updated.length && subStoreFields.length) {\n                updated.forEach(updateData => {\n                    const\n                        record = store.getById(updateData[phantomIdField] ?? updateData[idField]),\n                        // find the request portion related to the record\n                        recordRequest = storePack.added?.find(t => t[phantomIdField] == updateData[phantomIdField]) ||\n                            storePack.updated?.find(t => t[idField] == updateData[idField]);\n                    const extraLogInfo = {};\n                    subStoreFields.forEach(field => {\n                        const store = record.get(field.name);\n                        me.applyChangesToStore({ store }, updateData[field.dataSource],\n                            recordRequest?.[field.dataSource]\n                        );\n                        // We're putting the store field entry to the log\n                        // just to indicate the fact it was actually changed.\n                        // The value will not be used for comparison so we can use any.\n                        extraLogInfo[field.dataSource] = 'foo';\n                        delete updateData[field.dataSource];\n                    });\n                    extraLogEntries.push([record, extraLogInfo]);\n                });\n            }\n            // process added/updated records\n            const log = store.applyChangeset({ removed, added, updated }, null, phantomIdField, remote, true);\n            extraLogEntries.forEach(([record, logEntry]) => Object.assign(log.get(record.id), logEntry));\n            return log;\n        }\n        applySyncResponse(response, request) {\n            const\n                me     = this,\n                stores = me.orderedCrudStores;\n            me.applyingChangeset = me.applyingSyncResponse = true;\n            me.suspendChangeTracking();\n            for (const store of stores) {\n                me.applyChangesToStore(store, response[store.storeId], request?.pack?.[store.storeId]);\n            }\n            me.resumeChangeTracking(true);\n            me.applyingChangeset = me.applyingSyncResponse = false;\n        }\n        applyLoadResponse(response, options) {\n            this.applyingLoadResponse = true;\n            this.loadCrudManagerData(response, options);\n            this.applyingLoadResponse = false;\n        }\n        async applyResponse(request, response, options) {\n            const\n                me = this,\n                // in trackResponseType mode we check response type before deciding how to react on the response\n                responseType = me.trackResponseType && response.type || request.type;\n            switch (responseType) {\n                case 'load' :\n                    if (me.validateResponse) {\n                        me.validateLoadResponse(response);\n                    }\n                    me.applyLoadResponse(response, options);\n                    break;\n                case 'sync' :\n                    if (me.validateResponse) {\n                        me.validateSyncResponse(response, request);\n                    }\n                    me.applySyncResponse(response, request);\n                    break;\n            }\n        }\n        /**\n         * Applies a set of changes, as an object keyed by store id, to the affected stores. This function is intended\n         * to use in apps that handle their own data syncing, it is not needed when using the CrudManager approach.\n         *\n         * Example of a changeset:\n         * ```javascript\n         * project.applyChangeset({\n         *     events : {\n         *         added : [\n         *             { id : 10, name : 'Event 10', startDate : '2022-06-07' }\n         *         ],\n         *         updated : [\n         *             { id : 5, name : 'Changed' }\n         *         ],\n         *         removed : [\n         *             { id : 1 }\n         *         ]\n         *     },\n         *     resources : { ... },\n         *     ...\n         * });\n         * ```\n         *\n         * Optionally accepts a `transformFn` to convert an incoming changeset to the expected format.\n         * See {@link Core/data/Store#function-applyChangeset} for more details.\n         *\n         * @param {Object} changes Changeset to apply, an object keyed by store id where each value follows the\n         * format described in {@link Core/data/Store#function-applyChangeset}\n         * @param {Function} [transformFn] Optional function used to preprocess a changeset per store in a different\n         * format, should return an object with the format expected by {@link Core/data/Store#function-applyChangeset}\n         * @param {String} [phantomIdField] Field used by the backend when communicating a record being assigned a\n         * proper id instead of a phantom id\n         */\n        applyChangeset(changes, transformFn = null, phantomIdField, logChanges = false) {\n            const\n                me  = this,\n                log = logChanges ? new Map() : undefined;\n            me.suspendAutoSync();\n            me.suspendChangeTracking();\n            for (const { store, phantomIdField } of me.orderedCrudStores) {\n                if (changes[store.id]) {\n                    const storeLog = store.applyChangeset(\n                        changes[store.id],\n                        transformFn,\n                        phantomIdField || me.phantomIdField,\n                        // mark this changeset as remote to enforce it\n                        true,\n                        logChanges\n                    );\n                    if (storeLog) {\n                        log.set(store.id, storeLog);\n                    }\n                }\n            }\n            me.resumeChangeTracking(true);\n            me.resumeAutoSync(false);\n            return log;\n        }\n        //endregion\n        /**\n         * Generates unique request identifier.\n         * @internal\n         * @template\n         * @returns {Number} The request identifier.\n         * @category CRUD\n         */\n        get requestId() {\n            return Number.parseInt(`${Date.now()}${(this._requestId++)}`);\n        }\n        /**\n         * Persists changes made on the registered stores to the server and/or receives changes made on the backend.\n         * Usage:\n         *\n         * ```javascript\n         * // persist and run a callback on request completion\n         * crud.sync().then(\n         *     () => console.log(\"Changes saved...\"),\n         *     ({ response, cancelled }) => console.log(`Error: ${cancelled ? 'Cancelled' : response.message}`)\n         * );\n         * ```\n         *\n         * ** Note: ** If there is an incomplete sync request in progress then system will queue the call and delay it\n         * until previous request completion.\n         * In this case {@link #event-syncDelayed} event will be fired.\n         *\n         * ** Note: ** Please take a look at {@link #config-autoSync} config. This option allows to persist changes\n         * automatically after any data modification.\n         *\n         * ** Note: ** By default a sync request is only sent if there are any local {@link #property-changes}. To\n         * always send a request when calling this function, configure {@link #config-forceSync} as `true`.\n         *\n         * @returns {Promise} Promise, which is resolved if request was successful.\n         * Both the resolve and reject functions are passed a `state` object. State object has the following structure:\n         * ```\n         * {\n         *     cancelled       : Boolean, // **optional** flag, which is present when promise was rejected\n         *     rawResponse     : String,  // raw response from ajax request, either response xml or text\n         *     rawResponseText : String,  // raw response text as String from ajax request\n         *     response        : Object,  // processed response in form of object\n         * }\n         * ```\n         * If promise was rejected by the {@link #event-beforeSync} event, `state` object will have this structure:\n         * ```\n         * {\n         *     cancelled : true\n         * }\n         * ```\n         * @category CRUD\n         * @async\n         */\n        sync() {\n            const me = this;\n            // A direct call to sync cancels any outstanding autoSync\n            me.clearTimeout('autoSync');\n            if (me.activeRequests.sync) {\n                // let's delay this call and start it only after server response\n                /**\n                 * Fires after {@link #function-sync sync request} was delayed due to incomplete previous one.\n                 * @event syncDelayed\n                 * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n                 * @param {Object} arguments The arguments of {@link #function-sync} call.\n                 */\n                me.trigger('syncDelayed');\n                // Queue sync request after current one\n                return me.activeSyncPromise = me.activeSyncPromise.finally(() => me.sync());\n            }\n            // Store current request promise. While this one is pending, all following sync requests will create chain\n            // of sequential promises\n            return me.activeSyncPromise = new Promise((resolve, reject) => {\n                // get current changes set package\n                const pack = me.getChangesetPackage();\n                // if no data to persist we resolve immediately\n                if (!pack) {\n                    resolve(null);\n                    return;\n                }\n                /**\n                 * Fires before {@link #function-sync sync request} is sent. Return `false` to cancel sync request.\n                 *\n                 * ```javascript\n                 * crudManager.on('beforesync', function() {\n                 *     // cannot persist changes before at least one record is added\n                 *     // to the `someStore` store\n                 *     if (!someStore.getCount()) return false;\n                 * });\n                 * ```\n                 * @event beforeSync\n                 * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n                 * @param {Object} pack The data package which contains data for all stores managed by the crud manager.\n                 */\n                if (me.trigger('beforeSync', { pack }) !== false) {\n                    me.trigger('syncStart', { pack });\n                    // keep active request details\n                    me.activeRequests.sync = {\n                        type : 'sync',\n                        pack,\n                        resolve,\n                        reject,\n                        id   : pack.requestId,\n                        desc : me.sendRequest({\n                            id      : pack.requestId,\n                            data    : me.encode(pack),\n                            type    : 'sync',\n                            success : me.onCrudRequestSuccess,\n                            failure : me.onCrudRequestFailure,\n                            thisObj : me\n                        })\n                    };\n                }\n                else {\n                    /**\n                     * Fires after {@link #function-sync sync request} was canceled by some {@link #event-beforeSync} listener.\n                     * @event syncCanceled\n                     * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n                     * @param {Object} pack The data package which contains data for all stores managed by the crud manager.\n                     */\n                    me.trigger('syncCanceled', { pack });\n                    reject({ cancelled : true });\n                }\n            }).catch(error => {\n                // If the request was not cancelled in beforeSync listener, forward the error so the user's `catch` handler can catch it\n                if (error && !error.cancelled) {\n                    throw error;\n                }\n                // Pass the error object as a param to the next `then` chain\n                return error;\n            });\n        }\n        async onCrudRequestSuccess(rawResponse, fetchOptions, request) {\n            const\n                me = this,\n                {\n                    type : requestType,\n                    id   : requestId\n                }  = request;\n            if (me.isDestroyed) return;\n            let responseText = '';\n            request = me.activeRequests[requestType];\n            // we throw exception below to let events trigger first in internalOnResponse() call\n            try {\n                responseText = await rawResponse.text();\n            }\n            catch (e) {\n            }\n            // since we break the method w/ promises chain ..need to check if the instance is not destroyed in the meantime\n            if (me.isDestroyed) return;\n            // This situation should never occur.\n            // In the load() method, if a load is called while there is a load\n            // ongoing, the ongoing Transport request is cancelled and loadCanceled triggered.\n            // But having got here, it's too late to cancel a Transport request, so\n            // the operation is unregistered below.\n            // In the sync() method, if a sync is called while there is a sync\n            // ongoing, it waits until completion, before syncing.\n            // The activeRequest for any operation should NEVER be able to be\n            // replaced while this operation is ongoing, so this must be fatal.\n            if (request?.id !== requestId) {\n                throw new Error(`Interleaved ${requestType} operation detected`);\n            }\n            // Reset the active request info before we enter async code which could allow\n            // application code to run which could potentially call another request.\n            // It is too late for this request to be canceled - the activeRequest represented\n            // the Transport object and that has completed now.\n            me.activeRequests[requestType] = null;\n            const response = await me.internalOnResponse(request, responseText, fetchOptions);\n            // since we break the method w/ promises chain ..need to check if the instance is not destroyed in the meantime\n            if (me.isDestroyed) return;\n            if (!response || (me.skipSuccessProperty ? response?.success === false : !response?.success)) {\n                const error = {\n                    rawResponse,\n                    response,\n                    request\n                };\n                if (response?.message) {\n                    error.message = response.message;\n                }\n                request.reject(new CrudManagerRequestError(error));\n            }\n            // Successful request type done flag (this.crudLoaded or this.crudSynced)..\n            me['crud' + StringHelper.capitalize(request.type) + 'ed'] = true;\n            request.resolve({ response, rawResponse, responseText, request });\n        }\n        async onCrudRequestFailure(rawResponse, fetchOptions, request) {\n            const me = this;\n            if (me.isDestroyed) return;\n            request = me.activeRequests[request.type];\n            const\n                signal      = fetchOptions?.abortController?.signal,\n                wasAborted  = Boolean(signal?.aborted);\n            if (!wasAborted) {\n                let response,\n                    responseText = '';\n                try {\n                    responseText = await rawResponse.text();\n                    response = me.decode(responseText);\n                }\n                catch (e) {\n                }\n                // since we break the method w/ promises chain ..need to check if the instance is not destroyed in the meantime\n                if (me.isDestroyed) return;\n                me.triggerFailedRequestEvents(request, response, responseText, fetchOptions);\n                // since we break the method w/ promises chain ..need to check if the instance is not destroyed in the meantime\n                if (me.isDestroyed) return;\n                request.reject(new CrudManagerRequestError({\n                    rawResponse,\n                    request\n                }));\n            }\n            // reset the active request info\n            me.activeRequests[request.type] = null;\n        }\n        /**\n         * Accepts all changes in all stores, resets the modification tracking:\n         * * Clears change tracking for all records\n         * * Clears added\n         * * Clears modified\n         * * Clears removed\n         * Leaves the store in an \"unmodified\" state.\n         * @category CRUD\n         */\n        acceptChanges() {\n            this.crudStores.forEach(store => store.store.acceptChanges());\n        }\n        /**\n         * Reverts all changes in all stores and re-inserts any records that were removed locally. Any new uncommitted\n         * records will be removed.\n         * @category CRUD\n         */\n        revertChanges() {\n            // the method aliases revertCrudStoreChanges\n            this.revertCrudStoreChanges();\n        }\n        revertCrudStoreChanges() {\n            const { usesSingleAssignment } = this.eventStore;\n            // Ignore assignment store if using single assignment, otherwise reverting changes will undo changes from\n            // reverting the event store after reassignment\n            this.orderedCrudStores.forEach(({ store }) => (!store.isAssignmentStore || !usesSingleAssignment) && store.revertChanges());\n        }\n        /**\n         * Removes all stores and cancels active requests.\n         * @category CRUD\n         * @internal\n         */\n        doDestroy() {\n            const\n                me             = this,\n                { load, sync } = me.activeRequests;\n            load && me.cancelRequest(load.desc, load.reject);\n            sync && me.cancelRequest(sync.desc, sync.reject);\n            while (me.crudStores.length > 0) {\n                me.removeCrudStore(me.crudStores[0]);\n            }\n            super.doDestroy && super.doDestroy();\n        }\n    };\n};\n", "import Base from '../../../Core/Base.js';\nimport AjaxHelper from '../../../Core/helper/AjaxHelper.js';\nimport Objects from '../../../Core/helper/util/Objects.js';\n/**\n * @module Scheduler/crud/transport/AjaxTransport\n */\n/**\n * Implements data transferring functional that can be used for {@link Scheduler.crud.AbstractCrudManager} super classing.\n * Uses the fetch API for transport, https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n *\n * ```javascript\n * // create a new CrudManager using AJAX as a transport system and JSON for encoding\n * class MyCrudManager extends AjaxTransport(JsonEncode(AbstractCrudManager)) {}\n * ```\n *\n * @abstract\n * @mixin\n */\nexport default Target => class AjaxTransport extends (Target || Base) {\n    static get $name() {\n        return 'AjaxTransport';\n    }\n    /**\n     * Configuration of the AJAX requests used by _Crud Manager_ to communicate with a server-side.\n     *\n     * ```javascript\n     * transport : {\n     *     load : {\n     *         url       : 'http://mycool-server.com/load.php',\n     *         // HTTP request parameter used to pass serialized \"load\"-requests\n     *         paramName : 'data',\n     *         // pass extra HTTP request parameter\n     *         params    : {\n     *             foo : 'bar'\n     *         }\n     *     },\n     *     sync : {\n     *         url     : 'http://mycool-server.com/sync.php',\n     *         // specify Content-Type for requests\n     *         headers : {\n     *             'Content-Type' : 'application/json'\n     *         }\n     *     }\n     * }\n     *```\n     * Since the class uses Fetch API you can use\n     * any its [Request interface](https://developer.mozilla.org/en-US/docs/Web/API/Request) options:\n     *\n     * ```javascript\n     * transport : {\n     *     load : {\n     *         url         : 'http://mycool-server.com/load.php',\n     *         // HTTP request parameter used to pass serialized \"load\"-requests\n     *         paramName   : 'data',\n     *         // pass few Fetch API options\n     *         method      : 'GET',\n     *         credentials : 'include',\n     *         cache       : 'no-cache'\n     *     },\n     *     sync : {\n     *         url         : 'http://mycool-server.com/sync.php',\n     *         // specify Content-Type for requests\n     *         headers     : {\n     *             'Content-Type' : 'application/json'\n     *         },\n     *         credentials : 'include'\n     *     }\n     * }\n     *```\n     *\n     * An object where you can set the following possible properties:\n     * @config {Object} transport\n     * @property {Object} [transport.load] Load requests configuration:\n     * @property {String} [transport.load.url] URL to request for data loading.\n     * @property {String} [transport.load.method='GET'] HTTP method to be used for load requests.\n     * @property {String} [transport.load.paramName='data'] Name of the parameter that will contain a serialized `load`\n     * request. The value is mandatory for requests using `GET` method (default for `load`) so if the value is not\n     * provided `data` string is used as default.\n     * This value is optional for HTTP methods like `POST` and `PUT`, the request body will be used for data\n     * transferring in these cases.\n     * @property {Object} [transport.load.params] An object containing extra HTTP parameters to pass to the server when\n     * sending a `load` request.\n     *\n     * ```javascript\n     * transport : {\n     *     load : {\n     *         url       : 'http://mycool-server.com/load.php',\n     *         // HTTP request parameter used to pass serialized \"load\"-requests\n     *         paramName : 'data',\n     *         // pass extra HTTP request parameter\n     *         // so resulting URL will look like: http://mycool-server.com/load.php?userId=123456&data=...\n     *         params    : {\n     *             userId : '123456'\n     *         }\n     *     },\n     *     ...\n     * }\n     * ```\n     * @property {Object<String,String>} [transport.load.headers] An object containing headers to pass to each server request.\n     *\n     * ```javascript\n     * transport : {\n     *     load : {\n     *         url       : 'http://mycool-server.com/load.php',\n     *         // HTTP request parameter used to pass serialized \"load\"-requests\n     *         paramName : 'data',\n     *         // specify Content-Type for \"load\" requests\n     *         headers   : {\n     *             'Content-Type' : 'application/json'\n     *         }\n     *     },\n     *     ...\n     * }\n     * ```\n     * @property {Object} [transport.load.fetchOptions] **DEPRECATED:** Any Fetch API options can be simply defined on\n     * the upper configuration level:\n     * ```javascript\n     * transport : {\n     *     load : {\n     *         url          : 'http://mycool-server.com/load.php',\n     *         // HTTP request parameter used to pass serialized \"load\"-requests\n     *         paramName    : 'data',\n     *         // Fetch API options\n     *         method       : 'GET',\n     *         credentials  : 'include'\n     *     },\n     *     ...\n     * }\n     * ```\n     * @property {Object} [transport.load.requestConfig] **DEPRECATED:** The config options can be defined on the upper\n     * configuration level.\n     * @property {Object} [transport.sync] Sync requests (`sync` in further text) configuration:\n     * @property {String} [transport.sync.url] URL to request for `sync`.\n     * @property {String} [transport.sync.method='POST'] HTTP request method to be used for `sync`.\n     * @property {String} [transport.sync.paramName=undefined] Name of the parameter in which `sync` data will be\n     * transferred. This value is optional for requests using methods like `POST` and `PUT`, the request body will be\n     * used for data transferring in this case (default for `sync`). And the value is mandatory for requests using `GET`\n     * method (if the value is not provided `data` string will be used as fallback).\n     * @property {Object} [transport.sync.params] HTTP parameters to pass with an HTTP request handling `sync`.\n     *\n     * ```javascript\n     * transport : {\n     *     sync : {\n     *         url    : 'http://mycool-server.com/sync.php',\n     *         // extra HTTP request parameter\n     *         params : {\n     *             userId : '123456'\n     *         }\n     *     },\n     *     ...\n     * }\n     * ```\n     * @property {Object<String,String>} [transport.sync.headers] HTTP headers to pass with an HTTP request handling `sync`.\n     *\n     * ```javascript\n     * transport : {\n     *     sync : {\n     *         url     : 'http://mycool-server.com/sync.php',\n     *         // specify Content-Type for \"sync\" requests\n     *         headers : {\n     *             'Content-Type' : 'application/json'\n     *         }\n     *     },\n     *     ...\n     * }\n     * ```\n     * @property {Object} [transport.sync.fetchOptions] **DEPRECATED:** Any Fetch API options can be simply defined on\n     * the upper configuration level:\n     * ```javascript\n     * transport : {\n     *     sync : {\n     *         url         : 'http://mycool-server.com/sync.php',\n     *         credentials : 'include'\n     *     },\n     *     ...\n     * }\n     * ```\n     * @property {Object} [transport.sync.requestConfig] **DEPRECATED:** The config options can be defined on the upper\n     * configuration level.\n     * @category CRUD\n     */\n    static get defaultMethod() {\n        return {\n            load : 'GET',\n            sync : 'POST'\n        };\n    }\n    /**\n     * Cancels a sent request.\n     * @param {Promise} requestPromise The Promise object wrapping the Request to be cancelled.\n     * The _requestPromise_ is the value returned from the corresponding {@link #function-sendRequest} call.\n     * @category CRUD\n     */\n    cancelRequest(requestPromise, reject) {\n        requestPromise.abort?.();\n        if (!this.isDestroying) {\n            reject({ cancelled : true });\n        }\n    }\n    shouldUseBodyForRequestData(packCfg, method, paramName) {\n        return !(method === 'HEAD' || method === 'GET') && !paramName;\n    }\n    /**\n     * Sends a _Crud Manager_ request to the server.\n     * @param {Object} request The request configuration object having following properties:\n     * @param {'load'|'sync'} request.type The request type. Either `load` or `sync`.\n     * @param {String} request.url The URL for the request. Overrides the URL defined in the `transport` object\n     * @param {String} request.data The encoded _Crud Manager_ request data.\n     * @param {Object} request.params An object specifying extra HTTP params to send with the request.\n     * @param {Function} request.success A function to be started on successful request transferring.\n     * @param {String} request.success.rawResponse `Response` object returned by the [fetch api](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n     * @param {Function} request.failure A function to be started on request transfer failure.\n     * @param {String} request.failure.rawResponse `Response` object returned by the [fetch api](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n     * @param {Object} request.thisObj `this` reference for the above `success` and `failure` functions.\n     * @returns {Promise} The fetch Promise object.\n     * @fires beforeSend\n     * @async\n     * @category CRUD\n     */\n    sendRequest(request) {\n        const\n            me              = this,\n            { data }        = request,\n            transportConfig = me.transport[request.type] || {},\n            // clone parameters defined for this type of request\n            requestConfig   = Objects.assign({}, transportConfig, transportConfig.requestConfig);\n        if (request.url) {\n            requestConfig.url = request.url;\n        }\n        requestConfig.method = requestConfig.method || AjaxTransport.defaultMethod[request.type];\n        requestConfig.params = Objects.assign(requestConfig.params || {}, request.params);\n        let { paramName } = requestConfig;\n        // transfer package in the request body for some types of HTTP requests\n        if (me.shouldUseBodyForRequestData(transportConfig, requestConfig.method, paramName)) {\n            requestConfig.body = data;\n            // for requests having body we set Content-Type to 'application/json' by default\n            requestConfig.headers = requestConfig.headers || {};\n            requestConfig.headers['Content-Type'] = requestConfig.headers['Content-Type'] || 'application/json';\n        }\n        else {\n            // when we don't use body paramName is mandatory so fallback to 'data' as name\n            paramName = paramName || 'data';\n            requestConfig.params[paramName] = data;\n        }\n        if (!requestConfig.url) {\n            throw new Error('Trying to request without URL specified');\n        }\n        // sanitize request config\n        delete requestConfig.requestConfig;\n        delete requestConfig.paramName;\n        let ajaxPromise, resultPromise;\n        function performSend() {\n            // AjaxHelper.fetch call it \"queryParams\"\n            requestConfig.queryParams = requestConfig.params;\n            delete requestConfig.params;\n            let cancelled = false;\n            const fetchOptions = Objects.assign({}, requestConfig, requestConfig.fetchOptions);\n            ajaxPromise  = AjaxHelper.fetch(requestConfig.url, fetchOptions);\n            return ajaxPromise.catch(error => {\n                ajaxPromise.done = true;\n                me.trigger?.('responseReceived', { success : false });\n                const signal = fetchOptions.abortController?.signal;\n                if (signal) {\n                    cancelled = signal.aborted;\n                    if (!cancelled) {\n                        console.warn(error);\n                    }\n                }\n                return { error, cancelled };\n            }).then(response => {\n                ajaxPromise.done = true;\n                me.trigger?.('responseReceived', { success : Boolean(response?.ok) });\n                const callback = response?.ok ? request.success : request.failure;\n                return callback?.call(request.thisObj || me, response, fetchOptions, request);\n            });\n        }\n        /**\n         * Fires before a request is sent to the server.\n         *\n         * ```javascript\n         * crudManager.on('beforeSend', function ({ params, type }) {\n         *     // let's set \"sync\" request parameters\n         *     if (type == 'sync') {\n         *         // dynamically depending on \"flag\" value\n         *         if (flag) {\n         *             params.foo = 'bar';\n         *         }\n         *         else {\n         *             params.foo = 'smth';\n         *         }\n         *     }\n         * });\n         * ```\n         * @event beforeSend\n         * @param {Scheduler.crud.AbstractCrudManager} crudManager The CRUD manager.\n         * @param {Object} params HTTP request params to be passed in the request URL.\n         * @param {'sync'|'load'} requestType CrudManager request type (`load`/`sync`)\n         * @param {Object} requestConfig Configuration object for Ajax request call\n         * @async\n         */\n        const beforeSendResult = me.trigger('beforeSend', {\n            params      : requestConfig.params,\n            requestType : request.type,\n            requestConfig,\n            config      : request\n        });\n        if (Objects.isPromise(beforeSendResult)) {\n            resultPromise = beforeSendResult.then(performSend);\n        }\n        else {\n            resultPromise = performSend();\n        }\n        resultPromise.abort = () => {\n            if (!ajaxPromise.done) {\n                ajaxPromise.abort?.();\n            }\n        };\n        return resultPromise;\n    }\n};\n", "import Base from '../../../Core/Base.js';\nimport StringHelper from '../../../Core/helper/StringHelper.js';\n/**\n * @module Scheduler/crud/encoder/JsonEncoder\n */\n/**\n * Implements data encoding functional that should be mixed to a {@link Scheduler.crud.AbstractCrudManager} sub-class.\n * Uses _JSON_ as an encoding system.\n *\n * ```javascript\n * // create a new CrudManager using AJAX as a transport system and JSON for encoding\n * class MyCrudManager extends JsonEncode(AjaxTransport(AbstractCrudManager)) {}\n * ```\n *\n * @mixin\n */\nexport default Target => class JsonEncoder extends (Target || Base) {\n    static get $name() {\n        return 'JsonEncoder';\n    }\n    static get defaultConfig() {\n        return {\n            /**\n             * Configuration of the JSON encoder used by the _Crud Manager_.\n             *\n             * @config {Object}\n             * @property {Object} encoder.requestData Static data to send with the data request.\n             *\n             * ```js\n             * new CrudManager({\n             *     // add static \"foo\" property to all requests data\n             *     encoder : {\n             *         requestData : {\n             *             foo : 'Bar'\n             *         }\n             *     },\n             *     ...\n             * });\n             * ```\n             *\n             * The above snippet will result adding \"foo\" property to all requests data:\n             *\n             * ```json\n             *     {\n             *         \"requestId\"   : 756,\n             *         \"type\"        : \"load\",\n             *\n             *         \"foo\"         : \"Bar\",\n             *\n             *         \"stores\"      : [\n             *             ...\n             * ```\n             * @category CRUD\n             */\n            encoder : {}\n        };\n    }\n    /**\n     * Encodes a request object to _JSON_ encoded string. If encoding fails (due to circular structure), it returns null.\n     * Supposed to be overridden in case data provided by the _Crud Manager_ has to be transformed into format requested by server.\n     * @param {Object} requestData The request to encode.\n     * @returns {String} The encoded request.\n     * @category CRUD\n     */\n    encode(requestData) {\n        requestData = Object.assign({}, this.encoder?.requestData, requestData);\n        return StringHelper.safeJsonStringify(requestData);\n    }\n    /**\n     * Decodes (parses) a _JSON_ response string to an object. If parsing fails, it returns null.\n     * Supposed to be overridden in case data provided by server has to be transformed into format requested by the _Crud Manager_.\n     * @param {String} responseText The response text to decode.\n     * @returns {Object} The decoded response.\n     * @category CRUD\n     */\n    decode(responseText) {\n        return StringHelper.safeJsonParse(responseText);\n    }\n};\n", "import AbstractCrudManagerMixin from '../../../Scheduler/crud/AbstractCrudManagerMixin.js';\nimport StringHelper from '../../../Core/helper/StringHelper.js';\nimport Base from '../../../Core/Base.js';\nimport AjaxTransport from '../../crud/transport/AjaxTransport.js';\nimport JsonEncoder from '../../crud/encoder/JsonEncoder.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\n/**\n * @module Scheduler/data/mixin/ProjectCrudManager\n */\n/**\n * This mixin provides Crud Manager functionality supporting loading of scheduling engine projects.\n *\n * @mixin\n * @mixes Scheduler/crud/AbstractCrudManagerMixin\n * @mixes Scheduler/crud/transport/AjaxTransport\n * @mixes Scheduler/crud/encoder/JsonEncoder\n */\nexport default Target => class ProjectCrudManager extends (Target || Base).mixin(AbstractCrudManagerMixin, AjaxTransport, JsonEncoder) {\n    //region Config\n    static get defaultConfig() {\n        return {\n            project : null\n        };\n    }\n    startConfigure(config) {\n        // process the project first which ingests any configured data sources,\n        this.getConfig('project');\n        super.startConfigure(config);\n        this._changesToClear = new Map();\n    }\n    async doAutoLoad() {\n        const { project } = this;\n        // Delay autoLoad to after projects initial commit if configured with a project\n        if (project) {\n            await project.commitAsync();\n        }\n        return super.doAutoLoad();\n    }\n    applyProjectResponse(response) {\n        const\n            me = this,\n            { project } = me;\n        me.applyingProjectResponse = true;\n        const\n            startDateField = project.fieldMap.startDate,\n            endDateField   = project.fieldMap.endDate,\n            startDate      = ObjectHelper.getPath(response, startDateField.dataSource),\n            endDate        = ObjectHelper.getPath(response, endDateField.dataSource);\n        // With early rendering engine won't convert project dates in time, do it manually first\n        if (typeof startDate === 'string') {\n            ObjectHelper.setPath(response, startDateField.dataSource, startDateField.convert(startDate));\n        }\n        if (typeof endDate === 'string') {\n            ObjectHelper.setPath(response, endDateField.dataSource, endDateField.convert(endDate));\n        }\n        project.setByDataSource(response);\n        me._changesToClear.set(me, response);\n        me.applyingProjectResponse = false;\n    }\n    loadCrudManagerData(response, options = {}) {\n        const\n            me = this,\n            { project } = me;\n        // We don't want to react on store changes while loading them\n        me.suspendChangeTracking();\n        super.loadCrudManagerData(...arguments);\n        // If there is project data provided\n        if (response?.project) {\n            // If the project is delaying its linking to a new graph instance\n            // wait till it detaches all records from the old graph\n            // and then apply the project data.\n            // Otherwise, the project changes we apply here will be overridden when detaching from the old graph.\n            // Since the code copies last identifier values from the graph when detaching.\n            if (project.delayEnteringReplica && project.hasDataInStores) {\n                project.ion({\n                    recordsUnlinked : () => {\n                        me.suspendChangeTracking();\n                        me.applyProjectResponse(response.project);\n                        me.resumeChangeTracking();\n                    },\n                    once : true\n                });\n            }\n            else {\n                me.applyProjectResponse(response.project);\n            }\n        }\n        me.resumeChangeTracking();\n    }\n    async sync() {\n        const { project } = this;\n        // Suspend Crud Manager autoSync to not react on changes during commitAsync() call\n        this.suspendAutoSync();\n        // Make sure data is in a calculated state before syncing\n        if (project) {\n            await project.commitAsync();\n        }\n        if (this.isDestroying) {\n            return;\n        }\n        // resume autoSync silently\n        this.resumeAutoSync(false);\n        return super.sync();\n    }\n    async applyResponse(request, response, options) {\n        const me = this;\n        if (me.isDestroyed || me.project?.isDestroyed) {\n            return;\n        }\n        me.trigger('beforeApplyResponse');\n        await super.applyResponse(request, response, options);\n        // If there is the project data provided or it's not provided but short responses are enabled\n        // in such cases we treat a successful response covering all sent changes as much as that's possible\n        // so responding `project : { ... }` should not be really needed\n        if (response?.project || (me.supportShortSyncResponse && request?.pack?.project)) {\n            // apply the responded changes (or accept the requested ones)\n            me.applyProjectResponse(response.project || request?.pack?.project);\n        }\n        // if we have a project\n        if (me.project) {\n            let requestType = request.type;\n            // response can force its type\n            if (me.trackResponseType) {\n                requestType = response.type || requestType;\n            }\n            // Make a boolean flag indicating what has triggered the propagation (\"propagatingLoadChanges\" or  \"propagatingSyncChanges\")\n            const propagationFlag = `propagating${StringHelper.capitalize(requestType)}Changes`;\n            me.suspendAutoSync();\n            me[propagationFlag] = true;\n            const loud = me.project.isInitialCommit && !me.project.silenceInitialCommit;\n            // Wait till calculation gets done\n            await me.project.commitAsync();\n            me[propagationFlag] = false;\n            // for initial commit we still trigger the sync, but not for following\n            me.resumeAutoSync?.(loud);\n            // Accept changes came from the server (might have been destroyed while waiting above)\n            me.commitRespondedChanges?.();\n        }\n        // Trigger if we did not get destroyed while waiting above\n        me.trigger?.('applyResponse');\n    }\n    applySyncResponse(...args) {\n        const\n            me          = this,\n            stmDisabled = me.project?.stm.disabled;\n        if (stmDisabled === false && me.ignoreRemoteChangesInSTM) {\n            me.project.stm.disable();\n        }\n        super.applySyncResponse(...args);\n        if (stmDisabled === false) {\n            me.project.stm.enable();\n        }\n    }\n    shouldClearRecordFieldChange(record, field, value) {\n        const oldValue = record.getValue(field);\n        field = record.getFieldDefinition(field);\n        // If the field value matches the one responded from the server\n        // we silently accept it\n        return field?.isEqual ? field.isEqual(oldValue, value) : ObjectHelper.isEqual(oldValue, value);\n    }\n    commitRespondedChanges() {\n        // We silently accept changes came from the server\n        this._changesToClear.forEach((changes, record) => {\n            Object.entries(changes).forEach(([key, value]) => {\n                // If the field value matches the one responded from the server\n                // we silently accept it\n                if (this.shouldClearRecordFieldChange(record, key, value)) {\n                    delete record.meta.modified[key];\n                }\n            });\n        });\n        this._changesToClear.clear();\n    }\n    applyChangesToStore(storeDesc, storeResponse, storePack, ...rest) {\n        const changesMap = super.applyChangesToStore(storeDesc, storeResponse, storePack, ...rest);\n        // The changes enter graph first but not store until later, clearing changes in StoreChanges might still leave\n        // records modified. We need to clean up after the next propagation, so we store record changes in a map for now\n        if (changesMap.size && this.project) {\n            for (const [id, changes] of changesMap) {\n                const record = storeDesc.store.getById(id);\n                record && this._changesToClear.set(record, changes);\n            }\n        }\n        return changesMap;\n    }\n};\n", "import Base from '../../Core/Base.js';\nimport AbstractCrudManagerMixin from './AbstractCrudManagerMixin.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\n/**\n * @module Scheduler/crud/AbstractCrudManager\n */\n/**\n * @typedef {Object} CrudManagerStoreDescriptor\n * @property {String} storeId Unique store identifier. Store related requests/responses will be sent under this name.\n * @property {Core.data.Store} store The store itself.\n * @property {String} [phantomIdField] Set this if the store model has a predefined field to keep phantom record identifier.\n * @property {String} [idField] id field name, if it's not specified then class will try to get it from store model.\n * @property {Boolean} [writeAllFields] Set to true to write all fields from modified records\n */\n/**\n * This is an abstract class serving as the base for the {@link Scheduler.data.CrudManager} class.\n * It implements basic mechanisms to organize batch communication with a server.\n * Yet it does not contain methods related to _data transfer_ nor _encoding_.\n * These methods are to be provided in sub-classes by consuming the appropriate mixins.\n *\n * For example, this is how the class can be used to implement an JSON encoding system:\n *\n * ```javascript\n * // let's make new CrudManager using AJAX as a transport system and JSON for encoding\n * class MyCrudManager extends JsonEncode(AjaxTransport(AbstractCrudManager)) {\n *\n * }\n * ```\n *\n * ## Data transfer and encoding methods\n *\n * These are methods that must be provided by subclasses of this class:\n *\n * - [#sendRequest](#Scheduler/crud/AbstractCrudManagerMixin#function-sendRequest)\n * - [#cancelRequest](#Scheduler/crud/AbstractCrudManagerMixin#function-cancelRequest)\n * - [#encode](#Scheduler/crud/AbstractCrudManagerMixin#function-encode)\n * - [#decode](#Scheduler/crud/AbstractCrudManagerMixin#function-decode)\n *\n * @extends Core/Base\n * @mixes Scheduler/crud/AbstractCrudManagerMixin\n * @abstract\n */\nexport default class AbstractCrudManager extends Base.mixin(AbstractCrudManagerMixin) {\n    //region Default config\n    /**\n     * The server revision stamp.\n     * The _revision stamp_ is a number which should be incremented after each server-side change.\n     * This property reflects the current version of the data retrieved from the server and gets updated after each\n     * {@link Scheduler/crud/AbstractCrudManagerMixin#function-load} and {@link Scheduler/crud/AbstractCrudManagerMixin#function-sync} call.\n     * @property {Number}\n     * @readonly\n     */\n    get revision() {\n        return this.crudRevision;\n    }\n    set revision(value) {\n        this.crudRevision = value;\n    }\n    /**\n     * Get or set data of {@link #property-crudStores} as a JSON string.\n     *\n     * Get a JSON string:\n     * ```javascript\n     *\n     * const jsonString = scheduler.crudManager.json;\n     *\n     * // returned jsonString:\n     * '{\"eventsData\":[...],\"resourcesData\":[...],...}'\n     *\n     * // object representation of the returned jsonString:\n     * {\n     *     resourcesData    : [...],\n     *     eventsData       : [...],\n     *     assignmentsData  : [...],\n     *     dependenciesData : [...],\n     *     timeRangesData   : [...],\n     *     // data from other stores\n     * }\n     * ```\n     *\n     * Set a JSON string (to populate the CrudManager stores):\n     *\n     * ```javascript\n     * scheduler.crudManager.json = '{\"eventsData\":[...],\"resourcesData\":[...],...}'\n     * ```\n     *\n     * @property {String}\n     */\n    get json() {\n        return StringHelper.safeJsonStringify(this);\n    }\n    set json(json) {\n        if (typeof json === 'string') {\n            json = StringHelper.safeJsonParse(json);\n        }\n        this.forEachCrudStore(store => {\n            const dataName = `${store.storeId}Data`;\n            if (json[dataName]) {\n                store.data = json[dataName];\n            }\n        });\n    }\n    static get defaultConfig() {\n        return {\n            /**\n             * Sets the list of stores controlled by the CRUD manager.\n             *\n             * When adding a store to the CrudManager, make sure the server response format is correct for `load` and `sync` requests.\n             * Learn more in the [Working with data](#Scheduler/guides/data/crud_manager.md#loading-data) guide.\n             *\n             * Store can be provided as in instance, using its `storeId` or as an {@link #typedef-CrudManagerStoreDescriptor}\n             * object.\n             * @config {Core.data.Store[]|String[]|CrudManagerStoreDescriptor[]}\n             */\n            stores : null\n            /**\n             * Encodes request to the server.\n             * @function encode\n             * @param {Object} request The request to encode.\n             * @returns {String} The encoded request.\n             * @abstract\n             */\n            /**\n             * Decodes response from the server.\n             * @function decode\n             * @param {String} response The response to decode.\n             * @returns {Object} The decoded response.\n             * @abstract\n             */\n        };\n    }\n    //endregion\n    //region Init\n    construct(config = {}) {\n        if (config.stores) {\n            config.crudStores = config.stores;\n            delete config.stores;\n        }\n        super.construct(config);\n    }\n    //endregion\n    //region inline data\n    /**\n     * Returns the data from all CrudManager `crudStores` in a format that can be consumed by `inlineData`.\n     *\n     * Used by JSON.stringify to correctly convert this CrudManager to json.\n     *\n     * The returned data is identical to what {@link Scheduler/crud/AbstractCrudManager#property-inlineData} contains.\n     *\n     * ```javascript\n     *\n     * const json = scheduler.crudManager.toJSON();\n     *\n     * // json:\n     * {\n     *     eventsData : [...],\n     *     resourcesData : [...],\n     *     dependenciesData : [...],\n     *     assignmentsData : [...],\n     *     timeRangesData : [...],\n     *     resourceTimeRangesData : [...],\n     *     // ... other stores data\n     * }\n     * ```\n     *\n     * Output can be consumed by `inlineData`.\n     *\n     * ```javascript\n     * const json = scheduler.crudManager.toJSON();\n     *\n     * // Plug it back in later\n     * scheduler.crudManager.inlineData = json;\n     * ```\n     *\n     * @function toJSON\n     * @returns {Object}\n     * @category JSON\n     */\n    toJSON() {\n        // Collect data from crudStores\n        const result = {};\n        this.forEachCrudStore((store, storeId) => result[`${storeId}Data`] = store.toJSON());\n        return result;\n    }\n    /**\n     * Get or set data of CrudManager stores. The returned data is identical to what\n     * {@link Scheduler/crud/AbstractCrudManager#function-toJSON} returns:\n     *\n     * ```javascript\n     *\n     * const data = scheduler.crudManager.inlineData;\n     *\n     * // data:\n     * {\n     *     eventsData : [...],\n     *     resourcesData : [...],\n     *     dependenciesData : [...],\n     *     assignmentsData : [...],\n     *     timeRangesData : [...],\n     *     resourceTimeRangesData : [...],\n     *     ... other stores data\n     * }\n     *\n     *\n     * // Plug it back in later\n     * scheduler.crudManager.inlineData = data;\n     * ```\n     *\n     * @property {Object}\n     */\n    get inlineData() {\n        return this.toJSON();\n    }\n    set inlineData(data) {\n        this.json = data;\n    }\n    //endregion\n    //region Store collection (add, remove, get & iterate)\n    set stores(stores) {\n        if (stores !== this.crudStores) {\n            this.crudStores = stores;\n        }\n    }\n    /**\n     * A list of registered stores whose server communication will be collected into a single batch.\n     * Each store is represented by a _store descriptor_.\n     * @member {CrudManagerStoreDescriptor[]} stores\n     */\n    get stores() {\n        return this.crudStores;\n    }\n    //endregion\n    /**\n     * Returns true if the crud manager is currently loading data\n     * @property {Boolean}\n     * @readonly\n     * @category CRUD\n     */\n    get isLoading() {\n        return this.isCrudManagerLoading;\n    }\n    /**\n     * Adds a store to the collection.\n     *\n     *```javascript\n     * // append stores to the end of collection\n     * crudManager.addStore([\n     *     store1,\n     *     // storeId\n     *     'bar',\n     *     // store descriptor\n     *     {\n     *         storeId : 'foo',\n     *         store   : store3\n     *     },\n     *     {\n     *         storeId         : 'bar',\n     *         store           : store4,\n     *         // to write all fields of modified records\n     *         writeAllFields  : true\n     *     }\n     * ]);\n     *```\n     *\n     * **Note:** Order in which stores are kept in the collection is very essential sometimes.\n     * Exactly in this order the loaded data will be put into each store.\n     *\n     * When adding a store to the CrudManager, make sure the server response format is correct for `load` and `sync`\n     * requests. Learn more in the [Working with data](#Scheduler/guides/data/crud_manager.md#loading-data) guide.\n     *\n     * @param {Core.data.Store|String|CrudManagerStoreDescriptor|Core.data.Store[]|String[]|CrudManagerStoreDescriptor[]} store\n     * A store or list of stores. Each store might be specified by its instance, `storeId` or _descriptor_.\n     * @param {Number} [position] The relative position of the store. If `fromStore` is specified the position will be\n     * taken relative to it.\n     * If not specified then store(s) will be appended to the end of collection.\n     * Otherwise, it will be an index in stores collection.\n     *\n     * ```javascript\n     * // insert stores store4, store5 to the start of collection\n     * crudManager.addStore([ store4, store5 ], 0);\n     * ```\n     *\n     * @param {String|Core.data.Store|CrudManagerStoreDescriptor} [fromStore] The store relative to which position\n     * should be calculated. Can be defined as a store identifier, instance or descriptor (the result of\n     * {@link Scheduler/crud/AbstractCrudManagerMixin#function-getStoreDescriptor} call).\n     *\n     * ```javascript\n     * // insert store6 just before a store having storeId equal to 'foo'\n     * crudManager.addStore(store6, 0, 'foo');\n     *\n     * // insert store7 just after store3 store\n     * crudManager.addStore(store7, 1, store3);\n     * ```\n     */\n    addStore(...args) {\n        return this.addCrudStore(...args);\n    }\n    removeStore(...args) {\n        return this.removeCrudStore(...args);\n    }\n    getStore(...args) {\n        return this.getCrudStore(...args);\n    }\n    hasChanges(...args) {\n        return this.crudStoreHasChanges(...args);\n    }\n    loadData(...args) {\n        return this.loadCrudManagerData(...args);\n    }\n}\nAbstractCrudManager._$name = 'AbstractCrudManager';", "import Model from '../../../Core/data/Model.js';\n/**\n * @module Scheduler/model/mixin/ProjectModelCommon\n */\n/**\n * Mixin that provides helpful methods and properties for a `ProjectModel`. This mixin applies to all Bryntum products.\n * @mixin\n * @internal\n */\nexport default Target => class ProjectModelCommon extends (Target || Model) {\n    static $name = 'ProjectModelCommon';\n    static get configurable() {\n        return {\n            // Documented in Gantt/Scheduler/SchedulerPro version of ./model/ProjectModel since types differ\n            assignments  : null,\n            dependencies : null,\n            resources    : null,\n            timeRanges   : null\n        };\n    }\n    // Project is a Model which triggers events, therefore it can define event handlers using `onEvent` syntax. Event\n    // handler can be a string (for another instance property), or a function. Therefore, it is impossible to tell them\n    // apart and project model can not expose fields.\n    // https://github.com/bryntum/support/issues/7457\n    static get autoExposeFields() {\n        return false;\n    }\n    //region Inline data\n    get assignments() {\n        return this.assignmentStore.allRecords;\n    }\n    updateAssignments(assignments) {\n        this.assignmentStore.data = assignments;\n    }\n    get dependencies() {\n        return this.dependencyStore.allRecords;\n    }\n    updateDependencies(dependencies) {\n        this.dependencyStore.data = dependencies;\n    }\n    get resources() {\n        return this.resourceStore.allRecords;\n    }\n    updateResources(resources) {\n        this.resourceStore.data = resources;\n    }\n    get timeRanges() {\n        return this.timeRangeStore.allRecords;\n    }\n    getTimeRanges(startDate, endDate) {\n        const\n            store = this.timeRangeStore,\n            ret = [];\n        for (const timeSpan of store) {\n            // Collect occurrences for the recurring events in the record set\n            if (timeSpan.isRecurring) {\n                ret.push(...timeSpan.getOccurrencesForDateRange(startDate, endDate));\n            }\n            else if (timeSpan.startDate < endDate && startDate < timeSpan.endDate) {\n                ret.push(timeSpan);\n            }\n        }\n        return ret;\n    }\n    updateTimeRanges(timeRanges) {\n        this.timeRangeStore.data = timeRanges;\n    }\n    getResourceTimeRanges(startDate, endDate) {\n        const\n            store = this.resourceTimeRangeStore,\n            ret = [];\n        for (const timeSpan of store) {\n            // Collect occurrences for the recurring events in the record set\n            if (timeSpan.isRecurring) {\n                ret.push(...timeSpan.getOccurrencesForDateRange(startDate, endDate));\n            }\n            // A timerange may consist of just a startDate if it is intended to be a line.\n            else if (timeSpan.startDate < endDate && (!timeSpan.endDate || startDate < timeSpan.endDate)) {\n                ret.push(timeSpan);\n            }\n        }\n        return ret;\n    }\n    //endregion\n};\n", "import TimeSpan from './TimeSpan.js';\nimport RecurringTimeSpan from './mixin/RecurringTimeSpan.js';\n/**\n * @module Scheduler/model/ResourceTimeRangeModel\n */\n/**\n * This class represent a single resource time range in your schedule.\n * To style the rendered elements, use {@link Scheduler.model.TimeSpan#field-cls} or {@link #field-timeRangeColor} field.\n * The class is used by the {@link Scheduler.feature.ResourceTimeRanges} feature.\n *\n * ## Recurring ranges support\n *\n * You can also make ranges recurring by adding a `recurrenceRule` to the range data.\n *\n * ```javascript\n *\n * // Make new store that supports time ranges recurrence\n * const store = new ResourceTimeRangeStore({\n *     data : [{        {\n *         id             : 1,\n *         resourceId     : 'r1',\n *         startDate      : '2019-01-01T11:00',\n *         endDate        : '2019-01-01T13:00',\n *         name           : 'Coffee break',\n *         // this time range should repeat every day\n *         recurrenceRule : 'FREQ=DAILY'\n *     }]\n * });\n * ```\n *\n * @extends Scheduler/model/TimeSpan\n */\nexport default class ResourceTimeRangeModel extends TimeSpan.mixin(RecurringTimeSpan) {\n    static $name = 'ResourceTimeRangeModel';\n    //region Fields\n    static fields = [\n        /**\n         * Id of the resource this time range is associated with\n         * @field {String|Number} resourceId\n         */\n        'resourceId',\n        /**\n         * Controls this time range's primary color, defaults to using current themes default time range color.\n         * @field {String} timeRangeColor\n         */\n        'timeRangeColor'\n    ];\n    static relations = {\n        /**\n         * The associated resource, retrieved using a relation to a ResourceStore determined by the value assigned\n         * to `resourceId`. The relation also lets you access all time ranges on a resource through\n         * `ResourceModel#timeRanges`.\n         * @member {Scheduler.model.ResourceModel} resource\n         */\n        resource : {\n            foreignKey            : 'resourceId',\n            foreignStore          : 'resourceStore',\n            relatedCollectionName : 'timeRanges',\n            nullFieldOnRemove     : true\n        }\n    };\n    static domIdPrefix = 'resourcetimerange';\n    get domId() {\n        return `${this.constructor.domIdPrefix}-${this.id}`;\n    }\n    //endregion\n    // Used internally to differentiate between Event and ResourceTimeRange\n    get isResourceTimeRange() {\n        return true;\n    }\n    // To match EventModel API\n    get resources() {\n        return this.resource ? [this.resource] : [];\n    }\n    // To match EventModel API\n    get $linkedResources() {\n        return this.resources;\n    }\n}\nResourceTimeRangeModel._$name = 'ResourceTimeRangeModel';", "import AjaxStore from '../../Core/data/AjaxStore.js';\nimport ResourceTimeRangeModel from '../model/ResourceTimeRangeModel.js';\nimport RecurringTimeSpansMixin from './mixin/RecurringTimeSpansMixin.js';\n/**\n * @module Scheduler/data/ResourceTimeRangeStore\n */\n/**\n * A class representing a collection of resource time ranges.\n * Contains a collection of {@link Scheduler.model.ResourceTimeRangeModel} records.\n * The class is used by the {@link Scheduler.feature.ResourceTimeRanges} feature.\n *\n * ## Recurring ranges support\n *\n * This class supports recurrence:\n *\n * ```javascript\n * const store = new ResourceTimeRangeStore({\n *     data : [{        {\n *         id             : 1,\n *         resourceId     : 'r1',\n *         startDate      : '2019-01-01T11:00',\n *         endDate        : '2019-01-01T13:00',\n *         name           : 'Coffee break',\n *         // this time range should repeat every day\n *         recurrenceRule : 'FREQ=DAILY'\n *     }]\n * });\n * ```\n * @mixes Scheduler/data/mixin/RecurringTimeSpansMixin\n * @extends Core/data/AjaxStore\n */\nexport default class ResourceTimeRangeStore extends AjaxStore.mixin(RecurringTimeSpansMixin) {\n    static $name = 'ResourceTimeRangeStore';\n    static get defaultConfig() {\n        return {\n            /**\n             * CrudManager must load stores in the correct order. Lowest first.\n             * @private\n             */\n            loadPriority : 500,\n            /**\n             * CrudManager must sync stores in the correct order. Lowest first.\n             * @private\n             */\n            syncPriority : 500,\n            /**\n             * This store should be linked to a ResourceStore to link the time ranges to resources\n             * @config {Scheduler.data.ResourceStore}\n             */\n            resourceStore : null,\n            modelClass : ResourceTimeRangeModel,\n            storeId    : 'resourceTimeRanges'\n        };\n    }\n    set resourceStore(store) {\n        this._resourceStore = store;\n        // If store is assigned after configuration we need to init relations\n        if (!this.isConfiguring) {\n            this.initRelations(true);\n        }\n    }\n    get resourceStore() {\n        return this._resourceStore;\n    }\n    // Matching signature in EventStore to allow reusage of SchedulerStores#onInternalEventStoreChange()\n    getResourcesForEvent(resourceTimeRange) {\n        return [resourceTimeRange.resource];\n    }\n    /**\n     * Get resource time ranges intersecting the specified date range for a resource.\n     *\n     * The result is sorted by `startDate`.\n     *\n     * @param {Object} options Options\n     * @param {Scheduler.model.ResourceModel} options.resourceRecord Resource record\n     * @param {Date} options.startDate Start date of the range\n     * @param {Date} options.endDate End date of the range\n     * @returns {Scheduler.model.ResourceTimeRangeModel[]}\n     */\n    getRanges({ resourceRecord, startDate, endDate }) {\n        const rangesInDateRange = resourceRecord.timeRanges.flatMap(range => {\n            if (range.supportsRecurring) {\n                return range.getOccurrencesForDateRange(startDate, endDate);\n            }\n            if (range.intersectsRange(startDate, endDate)) {\n                return range;\n            }\n            return [];\n        });\n        return rangesInDateRange.sort((span1, span2) => span1.startDate - span2.startDate);\n    }\n}\nResourceTimeRangeStore._$name = 'ResourceTimeRangeStore';", "import InstancePlugin from '../../../Core/mixin/InstancePlugin.js';\n/**\n * @module Scheduler/data/plugin/ProjectModelMixin\n */\n/**\n * Plugs in to a time zone convertable Store to affect and add some functionality.\n * @plugin\n * @private\n */\nexport default class StoreTimeZonePlugin extends InstancePlugin {\n    static $name = 'storeTimeZonePlugin';\n    static pluginConfig = {\n        before : ['processRecord'],\n        assign : ['beforeSyncRecord', 'afterSyncRecord']\n    };\n    get timeZone() {\n        return this.client.project.timeZone;\n    }\n    // Overrides a Store's processRecord function to be able to convert records added by a dataset\n    // before they are processed by the engine\n    processRecord(record, isDataSet) {\n        if (isDataSet || this.client.isLoadingData || record.timeZone !== undefined) {\n            // When loading or changing dataset, de data is treated as local dates and need to be converted\n            // Also convert when adding a record with a timeZone specified (null means local time zone)\n            this.convertRecordToTimeZone(record);\n        }\n    }\n    convertRecordToTimeZone(record, timeZone = this.timeZone) {\n        if (record.timeZone !== timeZone) {\n            record.$ignoreChange = true; // Used to ignore changes in NestedEvents feature\n            // Convert baselines if exists\n            if (record.baselines?.count) {\n                for (const bl of record.baselines) {\n                    // The baseline records is not marked with a timezone when they are created\n                    if (record.timeZone !== bl.timeZone) {\n                        bl.timeZone = record.timeZone;\n                    }\n                    bl.convertToTimeZone(timeZone);\n                }\n            }\n            if (record.occurrences?.length) {\n                for (const o of record.occurrences) {\n                    if (record.timeZone !== o.timeZone) {\n                        o.timeZone = record.timeZone;\n                    }\n                    o.convertToTimeZone(timeZone);\n                }\n            }\n            record.convertToTimeZone(timeZone);\n            record.$ignoreChange = false;\n        }\n    }\n    beforeSyncRecord({ record }) {\n        if (record.timeZone != null) {\n            record.$restoreTimeZone = record.timeZone;\n            record.convertToTimeZone();\n        }\n    }\n    afterSyncRecord({ record }) {\n        if (record.$restoreTimeZone) {\n            record.convertToTimeZone(record.$restoreTimeZone);\n            record.$restoreTimeZone = null;\n        }\n    }\n}\nStoreTimeZonePlugin._$name = 'StoreTimeZonePlugin';", "import Model from '../../../Core/data/Model.js';\nimport TimeZoneHelper from '../../../Core/helper/TimeZoneHelper.js';\nimport StoreTimeZonePlugin from '../../data/plugin/StoreTimeZonePlugin.js';\n/**\n * @module Scheduler/model/mixin/ProjectModelTimeZoneMixin\n */\n/**\n * Mixin that holds TimeZone functionality shared between projects in Scheduler, Scheduler Pro, Gantt and Calendar\n * @mixin\n */\nexport default Target => class ProjectModelTimeZoneMixin extends (Target || Model) {\n    static $name = 'ProjectModelTimeZoneMixin';\n    static configurable = {\n        /**\n         * Set to a IANA time zone (i.e. `Europe/Stockholm`) or a UTC offset in minutes (i.e. `-120`). This will\n         * convert all events, tasks and time ranges to the specified time zone or offset. It will also affect the\n         * displayed timeline's headers as well at the start and end date of it.\n         *\n         * There is currently no built-in time zone support in JavaScript which means that the converted dates\n         * technically still are in the local system time zone, but adjusted to match the configured time zone.\n         *\n         * ### DST\n         * If a IANA time zone is provided, there will be support for DST. But if local system time zone has DST that\n         * will affect the time zone conversion at the exact hour when the local system time zone switches DST on and\n         * off.\n         *\n         * *For example:*\n         * 1. The local system time zone is `Europe/Stockholm` (which is UTC+1 or UTC+2 when DST).\n         * 2. The date `2022-03-27T07:00:00Z` (which is UTC) is converted to `America/Chicago` (which is UTC-6 or UTC-5\n         *    when DST).\n         * 3. The converted JS date will be created from `2022-03-27T02:00:00` which is exactly the hour when\n         *    `Europe/Stockholm` adds an DST hour. This has the effect that the converted date shows up incorrectly as\n         *    `2022-03-27T03:00` instead.\n         *\n         * If a UTC offset is provided, there is no DST support at all.\n         *\n         * ### Editing\n         * If creating new records or editing existing record dates, the dates will be interpreted as in the selected\n         * time zone.\n         *\n         * If you want to create new records with dates that either should be interpreted as local system time zone or\n         * from any other time zone, specify the {@link Scheduler.model.mixin.TimeZonedDatesMixin#field-timeZone} field\n         * on the record.\n         *\n         * ### Saving\n         * When saving or syncing data, the dates will be restored to local system time and converted to JSON\n         * ISO formatted.\n         *\n         * @prp {String|Number} [timeZone]\n         * @category Advanced\n         */\n        timeZone : {\n            // Don't ingest the config eagerly because it relies on project being present.\n            // Lazy means it waits for ingestion until timeZone property is referenced.\n            $config : 'lazy',\n            value   : null\n        }\n    };\n    get _storesWithDates() {\n        return [this.taskStore, this.timeRangeStore, this.resourceTimeRangeStore].filter(s => s);\n    }\n    plugStore(store) {\n        if (!store.hasPlugin(StoreTimeZonePlugin)) {\n            store.addPlugins(StoreTimeZonePlugin);\n        }\n    }\n    unplugStore(store) {\n        store.plugins.storeTimeZonePlugin?.destroy();\n    }\n    attachStore(store) {\n        super.attachStore(store);\n        // If a new store is attached, convert it to the configured timezone\n        if (store && this.timeZone != null && this._storesWithDates.includes(store)) {\n            this.plugStore(store);\n            this.convertStoresToTimeZone([store]);\n        }\n    }\n    detachStore(store) {\n        super.detachStore(store);\n        // When a store is detached, the records isn't timezone converted anymore\n        if (store && !store.isDestroyed && this.timeZone != null) {\n            // Convert records back to local system timezone\n            this.convertStoresToTimeZone([store], null);\n            // Removes the plugin\n            this.unplugStore(store);\n        }\n    }\n    relayStoreChange({ source, action, records, replaced }) {\n        const me = this;\n        if (me.timeZone != null && me._storesWithDates.includes(source)) {\n            // When a record is added or replaced, it is treated as in current configured timezone\n            if (['add', 'replace'].includes(action)) {\n                if (!records?.length && replaced?.length) {\n                    records = replaced;\n                }\n                if (records.length) {\n                    records.forEach(record => record.timeZone = me.timeZone);\n                }\n            }\n        }\n    }\n    convertStoresToTimeZone(stores, timeZone = this.timeZone) {\n        const\n            me            = this,\n            stmAutoRecord = me.stm?.autoRecord;\n        // Disable STM while updating timezone values\n        if (stmAutoRecord) {\n            me.stm.autoRecord = false;\n        }\n        for (const store of stores) {\n            store?.forEach(r => store.plugins.storeTimeZonePlugin.convertRecordToTimeZone(r, timeZone));\n        }\n        if (stmAutoRecord) {\n            // Restore original value\n            me.stmAutoRecord = stmAutoRecord;\n        }\n    }\n    updateTimeZone(timeZone, oldTimeZone) {\n        const\n            me            = this,\n            isConfiguring = me._isConfiguringTimeZone || me.isConfiguring;\n        me.trigger('beforeTimeZoneChange', {\n            timeZone,\n            oldTimeZone,\n            isConfiguring\n        });\n        me.calendarManagerStore.forEach(calendar => calendar.bumpVersion());\n        me._storesWithDates.forEach(store => me.plugStore(store));\n        // Convert data to time zone\n        me.convertStoresToTimeZone(me._storesWithDates);\n        // Convert project startdate\n        if (me.startDate) {\n            const startDate = oldTimeZone != null ? TimeZoneHelper.fromTimeZone(me.startDate, oldTimeZone) : me.startDate;\n            me.startDate = timeZone != null ? TimeZoneHelper.toTimeZone(startDate, timeZone) : startDate;\n        }\n        me.ignoreRecordChanges = true;\n        me.commitAsync().then(() => {\n            if (!me.isDestroyed) {\n                me.trigger('timeZoneChange', {\n                    timeZone,\n                    oldTimeZone,\n                    isConfiguring\n                });\n            }\n            delete me._isConfiguringTimeZone;\n        });\n    }\n};\n", "import TimeSpan from './TimeSpan.js';\nimport RecurringTimeSpan from './mixin/RecurringTimeSpan.js';\n/**\n * @module Scheduler/model/TimeRangeModel\n */\n/**\n * This class represents a named time range. It is used by the {@link Scheduler.feature.TimeRanges} feature.\n *\n * This class inherits most of its fields from {@link Scheduler.model.TimeSpan}. The most important of these fields are\n * the following:\n *\n * - {@link #field-name}\n * - {@link #field-startDate}\n * - {@link #field-endDate}\n * - {@link #field-iconCls}\n *\n * It's an indirect subclass of {@link Core.data.Model}. Please refer to documentation of those classes to become\n * familiar with the base interface of this class.\n * The data source of any field can be customized in the subclass. Please refer to {@link Core.data.Model} for details.\n *\n * Time ranges may recur. See the {@link #field-recurrenceRule} field.\n *\n * @extends Scheduler/model/TimeSpan\n * @mixes Scheduler/model/mixin/RecurringTimeSpan\n * @uninherit Core/data/mixin/TreeNode\n */\nexport default class TimeRangeModel extends TimeSpan.mixin(RecurringTimeSpan) {\n    static $name = 'TimeRangeModel';\n    /**\n     * @hidefields children, parentId, parentIndex\n     */\n    afterConstruct() {\n        if (!this.endDate) {\n            this.endDate = this.startDate;\n        }\n        super.afterConstruct();\n    }\n}\nTimeRangeModel._$name = 'TimeRangeModel';", "import AjaxStore from '../../Core/data/AjaxStore.js';\nimport TimeRangeModel from '../model/TimeRangeModel.js';\nimport RecurringTimeSpansMixin from './mixin/RecurringTimeSpansMixin.js';\n/**\n * @module Scheduler/data/TimeRangeStore\n */\n/**\n * A class representing a collection of time ranges.\n * Contains a collection of {@link Scheduler.model.TimeRangeModel} records.\n * The class is used by the {@link Scheduler.feature.TimeRanges} feature.\n *\n * ## Recurring ranges support\n *\n * This class supports recurrence:\n *\n * ```javascript\n * const store = new TimeRangeStore({\n *     data : [{        {\n *         id             : 1,\n *         startDate      : '2019-01-01T11:00',\n *         endDate        : '2019-01-01T13:00',\n *         name           : 'Coffee break',\n *         // this time range should repeat every day\n *         recurrenceRule : 'FREQ=DAILY'\n *     }]\n * });\n * ```\n *\n * @mixes Scheduler/data/mixin/RecurringTimeSpansMixin\n * @extends Core/data/AjaxStore\n */\nexport default class TimeRangeStore extends AjaxStore.mixin(RecurringTimeSpansMixin) {\n    static $name = 'TimeRangeStore';\n    static defaultConfig = {\n        /**\n         * CrudManager must load stores in the correct order. Lowest first.\n         * @private\n         */\n        loadPriority : 500,\n        /**\n         * CrudManager must sync stores in the correct order. Lowest first.\n         * @private\n         */\n        syncPriority : 500,\n        modelClass : TimeRangeModel,\n        storeId    : 'timeRanges'\n    };\n}\nTimeRangeStore._$name = 'TimeRangeStore';", "import Model from '../../../Core/data/Model.js';\nimport ProjectModelCommon from './ProjectModelCommon.js';\nimport ResourceTimeRangeModel from '../ResourceTimeRangeModel.js';\nimport StringHelper from '../../../Core/helper/StringHelper.js';\nimport ResourceTimeRangeStore from '../../data/ResourceTimeRangeStore.js';\nimport ProjectModelTimeZoneMixin from './ProjectModelTimeZoneMixin.js';\nimport TimeRangeStore from '../../data/TimeRangeStore.js';\nimport TimeRangeModel from '../TimeRangeModel.js';\n/**\n * @module Scheduler/model/mixin/ProjectModelMixin\n */\n/**\n * Mixin that holds configuration shared between projects in Scheduler and Scheduler Pro.\n * @mixes Scheduler/model/mixin/ProjectModelTimeZoneMixin\n *\n * @typings extends Core.data.Model\n *\n * @mixin\n */\nexport default Target => class ProjectModelMixin extends (Target || Model).mixin(\n    ProjectModelCommon,\n    ProjectModelTimeZoneMixin\n) {\n    static get $name() {\n        return 'ProjectModelMixin';\n    }\n    //region Config\n    static get defaultConfig() {\n        return {\n            /**\n             * State tracking manager instance the project relies on\n             * @member {Core.data.stm.StateTrackingManager} stm\n             * @category Advanced\n             */\n            /**\n             * Configuration options to provide to the STM manager\n             *\n             * @config {StateTrackingManagerConfig|Core.data.stm.StateTrackingManager}\n             * @category Advanced\n             */\n            stm : {},\n            timeRangeModelClass         : TimeRangeModel,\n            resourceTimeRangeModelClass : ResourceTimeRangeModel,\n            /**\n             * The constructor to create a time range store instance with. Should be a class subclassing the\n             * {@link Scheduler.data.TimeRangeStore}\n             * @config {Scheduler.data.TimeRangeStore|Object}\n             * @typings {typeof TimeRangeStore|object}\n             * @category Models & Stores\n             */\n            timeRangeStoreClass : TimeRangeStore,\n            /**\n             * The constructor to create a resource time range store instance with. Should be a class subclassing the\n             * {@link Scheduler.data.ResourceTimeRangeStore}\n             * @config {Scheduler.data.ResourceTimeRangeStore|Object}\n             * @typings {typeof ResourceTimeRangeStore|object}\n             * @category Models & Stores\n             */\n            resourceTimeRangeStoreClass : ResourceTimeRangeStore,\n            /**\n             * The initial data, to fill the {@link #property-timeRangeStore timeRangeStore} with.\n             * Should be an array of {@link Scheduler.model.TimeSpan TimeSpan} or its configuration objects.\n             *\n             * @config {Scheduler.model.TimeSpan[]} [timeRangesData]\n             * @category Legacy inline data\n             */\n            /**\n             * The initial data, to fill the {@link #property-resourceTimeRangeStore resourceTimeRangeStore} with.\n             * Should be an array of {@link Scheduler.model.ResourceTimeRangeModel ResourceTimeRangeModel} or it's\n             * configuration objects.\n             *\n             * @config {Scheduler.model.ResourceTimeRangeModel[]} [resourceTimeRangesData]\n             * @category Legacy inline data\n             */\n            eventStore             : {},\n            assignmentStore        : {},\n            dependencyStore        : {},\n            resourceStore          : {},\n            timeRangesData         : null,\n            resourceTimeRangesData : null\n        };\n    }\n    static configurable = {\n        /**\n         * Project data as a JSON string, used to populate its stores.\n         *\n         * ```javascript\n         * const project = new ProjectModel({\n         *     json : '{\"eventsData\":[...],\"resourcesData\":[...],...}'\n         * }\n         * ```\n         *\n         * @config {String}\n         * @category Inline data\n         */\n        json : null,\n        /**\n         * The {@link Core.data.Store store} holding the time ranges information.\n         *\n         * See also {@link Scheduler.model.TimeSpan}\n         *\n         * @member {Core.data.Store} timeRangeStore\n         * @category Models & Stores\n         */\n        /**\n         * A {@link Core.data.Store} instance or a config object.\n         * @config {Core.data.Store|StoreConfig}\n         * @category Models & Stores\n         */\n        timeRangeStore : {\n            value   : {},\n            $config : 'nullify'\n        },\n        /**\n         * The {@link Scheduler.data.ResourceTimeRangeStore store} holding the resource time ranges information.\n         *\n         * See also {@link Scheduler.model.ResourceTimeRangeModel}\n         *\n         * @member {Scheduler.data.ResourceTimeRangeStore} resourceTimeRangeStore\n         * @category Models & Stores\n         */\n        /**\n         * A {@link Scheduler.data.ResourceTimeRangeStore} instance or a config object.\n         * @config {Scheduler.data.ResourceTimeRangeStore|ResourceTimeRangeStoreConfig}\n         * @category Models & Stores\n         */\n        resourceTimeRangeStore : {\n            value   : {},\n            $config : 'nullify'\n        },\n        // Documented in Scheduler/SchedulerPro versions of model/ProjectModel since types differ\n        events             : null,\n        resourceTimeRanges : null\n    };\n    //endregion\n    //region Properties\n    /**\n     * Get or set data of project stores. The returned data is identical to what\n     * {@link #function-toJSON} returns:\n     *\n     * ```javascript\n     *\n     * const data = scheduler.project.inlineData;\n     *\n     * // data:\n     * {\n     *     eventsData             : [...],\n     *     resourcesData          : [...],\n     *     dependenciesData       : [...],\n     *     assignmentsData        : [...],\n     *     resourceTimeRangesData : [...],\n     *     timeRangesData         : [...]\n     * }\n     *\n     *\n     * // Plug it back in later\n     * scheduler.project.inlineData = data;\n     * ```\n     *\n     * @property {Object}\n     * @category Inline data\n     */\n    get inlineData() {\n        return StringHelper.safeJsonParse(super.json);\n    }\n    set inlineData(inlineData) {\n        this.json = inlineData;\n    }\n    //endregion\n    //region Functions\n    /**\n     * Accepts a \"data package\" consisting of data for the projects stores, which is then loaded into the stores.\n     *\n     * The package can hold data for `EventStore`, `AssignmentStore`, `ResourceStore`, `DependencyStore`,\n     * `TimeRangeStore` and `ResourceTimeRangeStore`. It uses the same format as when creating a project with inline\n     * data:\n     *\n     * ```javascript\n     * await project.loadInlineData({\n     *     eventsData             : [...],\n     *     resourcesData          : [...],\n     *     assignmentsData        : [...],\n     *     dependenciesData       : [...],\n     *     resourceTimeRangesData : [...],\n     *     timeRangesData         : [...]\n     * });\n     * ```\n     *\n     * After populating the stores it commits the project, starting its calculations. By awaiting `loadInlineData()` you\n     * can be sure that project calculations are finished.\n     *\n     * @function loadInlineData\n     * @param {Object} dataPackage A data package as described above\n     * @fires load\n     * @async\n     * @category Inline data\n     */\n    /**\n     * Project changes (CRUD operations to records in its stores) are automatically committed on a buffer to the\n     * underlying graph based calculation engine. The engine performs it calculations async.\n     *\n     * By calling this function, the commit happens right away. And by awaiting it you are sure that project\n     * calculations are finished and that references between records are up to date.\n     *\n     * The returned promise is resolved with an object. If that object has `rejectedWith` set, there has been a conflict and the calculation failed.\n     *\n     * ```javascript\n     * // Move an event in time\n     * eventStore.first.shift(1);\n     *\n     * // Trigger calculations directly and wait for them to finish\n     * const result = await project.commitAsync();\n     *\n     * if (result.rejectedWith) {\n     *     // there was a conflict during the scheduling\n     * }\n     * ```\n     *\n     * @async\n     * @function commitAsync\n     * @category Common\n     */\n    //endregion\n    //region Init\n    construct(config = {}) {\n        super.construct(...arguments);\n        // These stores are not handled by engine, but still held on project\n        if (config.timeRangesData) {\n            this.timeRangeStore.data = config.timeRangesData;\n        }\n        if (config.resourceTimeRangesData) {\n            this.resourceTimeRangeStore.data = config.resourceTimeRangesData;\n        }\n    }\n    afterConstruct() {\n        super.afterConstruct();\n        const me = this;\n        !me.timeRangeStore.stm && me.stm.addStore(me.timeRangeStore);\n        !me.resourceTimeRangeStore.stm && me.stm.addStore(me.resourceTimeRangeStore);\n    }\n    //endregion\n    //region Attaching stores\n    // Attach to a store, relaying its change events\n    attachStore(store) {\n        if (store) {\n            store.ion({\n                name    : store.$$name,\n                change  : 'relayStoreChange',\n                thisObj : this\n            });\n        }\n        super.attachStore(store);\n    }\n    // Detach a store, stop relaying its change events\n    detachStore(store) {\n        if (store) {\n            this.detachListeners(store.$$name);\n            super.detachStore(store);\n        }\n    }\n    relayStoreChange(event) {\n        super.relayStoreChange(event);\n        /**\n         * Fired when data in any of the projects stores changes.\n         *\n         * Basically a relayed version of each stores own change event, decorated with which store it originates from.\n         * See the {@link Core.data.Store#event-change store change event} documentation for more information.\n         *\n         * @event change\n         * @param {Scheduler.model.ProjectModel} source This project\n         * @typings source -> {Scheduler.model.ProjectModel||any}\n         * @param {Core.data.Store} store Affected store\n         * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} action\n         * Name of action which triggered the change. May be one of:\n         * * `'remove'`\n         * * `'removeAll'`\n         * * `'add'`\n         * * `'updatemultiple'`\n         * * `'clearchanges'`\n         * * `'filter'`\n         * * `'update'`\n         * * `'dataset'`\n         * * `'replace'`\n         * @param {Core.data.Model} record Changed record, for actions that affects exactly one record (`'update'`)\n         * @param {Core.data.Model[]} records Changed records, passed for all actions except `'removeAll'`\n         * @param {Object} changes Passed for the `'update'` action, info on which record fields changed\n         */\n        return this.trigger('change', { store : event.source, ...event, source : this });\n    }\n    updateTimeRangeStore(store, oldStore) {\n        this.detachStore(oldStore);\n        this.attachStore(store);\n        if (oldStore) {\n            oldStore.project = null;\n        }\n        if (store) {\n            store.project = this;\n        }\n    }\n    setTimeRangeStore(store) {\n        this.timeRangeStore = store;\n    }\n    changeTimeRangeStore(store) {\n        // If it's not being nullified, upgrade a config object to be a full store\n        if (store && !store.isStore) {\n            store = this.timeRangeStoreClass.new({\n                modelClass : this.timeRangeModelClass\n            }, store);\n        }\n        return store;\n    }\n    updateResourceTimeRangeStore(store, oldStore) {\n        this.detachStore(oldStore);\n        this.attachStore(store);\n        if (oldStore) {\n            oldStore.project = null;\n        }\n        if (store) {\n            store.project = this;\n        }\n    }\n    changeResourceTimeRangeStore(store) {\n        // If it's not being nullified, upgrade a config object to be a full store\n        if (store && !store.isStore) {\n            store = this.resourceTimeRangeStoreClass.new({\n                modelClass : this.resourceTimeRangeModelClass\n            }, store);\n        }\n        return store;\n    }\n    setResourceTimeRangeStore(store) {\n        this.resourceTimeRangeStore = store;\n    }\n    //endregion\n    //region Inline data\n    get events() {\n        return this.eventStore.allRecords;\n    }\n    updateEvents(events) {\n        this.eventStore.data = events;\n    }\n    get resourceTimeRanges() {\n        return this.resourceTimeRangeStore.allRecords;\n    }\n    updateResourceTimeRanges(resourceTimeRanges) {\n        this.resourceTimeRangeStore.data = resourceTimeRanges;\n    }\n    async loadInlineData(data) {\n        // Flag reset in super\n        this.isLoadingInlineData = true;\n        // Stores not handled by engine\n        if (data.resourceTimeRangesData) {\n            this.resourceTimeRangeStore.data = data.resourceTimeRangesData;\n        }\n        if (data.timeRangesData) {\n            this.timeRangeStore.data = data.timeRangesData;\n        }\n        return super.loadInlineData(data);\n    }\n    //endregion\n    //region JSON\n    /**\n     * Returns the data from the records of the projects stores, in a format that can be consumed by `loadInlineData()`.\n     *\n     * Used by JSON.stringify to correctly convert this record to json.\n     *\n     *\n     * ```javascript\n     * const project = new ProjectModel({\n     *     eventsData             : [...],\n     *     resourcesData          : [...],\n     *     assignmentsData        : [...],\n     *     dependenciesData       : [...],\n     *     resourceTimeRangesData : [...],\n     *     timeRangesData         : [...]\n     * });\n     *\n     * const json = project.toJSON();\n     *\n     * // json:\n     * {\n     *     eventsData             : [...],\n     *     resourcesData          : [...],\n     *     dependenciesData       : [...],\n     *     assignmentsData        : [...],\n     *     resourceTimeRangesData : [...],\n     *     timeRangesData         : [...]\n     * }\n     * ```\n     *\n     * Output can be consumed by `loadInlineData()`:\n     *\n     * ```javascript\n     * const json = project.toJSON();\n     *\n     * // Plug it back in later\n     * project.loadInlineData(json);\n     * ```\n     *\n     * @returns {Object}\n     * @category Inline data\n     */\n    toJSON() {\n        const\n            me = this,\n            result = {\n                eventsData             : me.eventStore.toJSON(),\n                resourcesData          : me.resourceStore.toJSON(),\n                dependenciesData       : me.dependencyStore.toJSON(),\n                timeRangesData         : me.timeRangeStore.toJSON(),\n                resourceTimeRangesData : me.resourceTimeRangeStore.toJSON()\n            };\n        if (!me.eventStore.usesSingleAssignment) {\n            result.assignmentsData = me.assignmentStore.toJSON();\n        }\n        return result;\n    }\n    /**\n     * Get or set project data (records from its stores) as a JSON string.\n     *\n     * Get a JSON string:\n     *\n     * ```javascript\n     * const project = new ProjectModel({\n     *     eventsData             : [...],\n     *     resourcesData          : [...],\n     *     assignmentsData        : [...],\n     *     dependenciesData       : [...],\n     *     resourceTimeRangesData : [...],\n     *     timeRangesData         : [...]\n     * });\n     *\n     * const jsonString = project.json;\n     *\n     * // jsonString:\n     * '{\"eventsData\":[...],\"resourcesData\":[...],...}'\n     * ```\n     *\n     * Set a JSON string (to populate the project stores):\n     *\n     * ```javascript\n     * project.json = '{\"eventsData\":[...],\"resourcesData\":[...],...}'\n     * ```\n     *\n     * @property {String}\n     * @category Inline data\n     */\n    get json() {\n        return super.json;\n    }\n    changeJson(json) {\n        if (typeof json === 'string') {\n            json = StringHelper.safeJsonParse(json);\n        }\n        return json;\n    }\n    updateJson(json) {\n        json && this.loadInlineData(json);\n    }\n    //endregion\n    afterChange(toSet, wasSet) {\n        super.afterChange(...arguments);\n        if (wasSet.calendar) {\n            this.trigger('calendarChange');\n        }\n    }\n    doDestroy() {\n        this.timeRangeStore.destroy();\n        this.resourceTimeRangeStore.destroy();\n        super.doDestroy();\n    }\n};\n", "/**\n * @module Scheduler/model/mixin/ProjectCurrentConfig\n */\n/**\n * Mixin that makes sure current config for a project includes store data and is cleaned up properly.\n *\n * @mixin\n * @private\n */\nexport default Target => class ProjectCurrentConfig extends Target {\n    // This function is not meant to be called by any code other than Base#getCurrentConfig().\n    // It extracts the current configs/fields for the project, with special handling for inline data\n    getCurrentConfig(options) {\n        const\n            me     = this,\n            result = super.getCurrentConfig(options);\n        if (result) {\n            for (const storeName of ['eventStore', 'resourceStore', 'assignmentStore', 'dependencyStore', 'timeRangeStore', 'resourceTimeRangeStore']) {\n                const store = me[storeName];\n                if (store) {\n                    if (store.count) {\n                        result[store.id + 'Data'] = store.getInlineData(options);\n                    }\n                    // Get stores current state, in case it has filters etc. added at runtime\n                    const storeState = store.getCurrentConfig(options);\n                    if (storeState && Object.keys(storeState).length > 0) {\n                        result[storeName] = Object.assign(result[storeName] || {}, storeState);\n                    }\n                    // Remove empty store configs\n                    else if (result[storeName] && Object.keys(result[storeName]).length === 0) {\n                        delete result[storeName];\n                    }\n                }\n            }\n            // Gantt specifics\n            if (me.taskStore.isTaskStore) {\n                delete result.eventModelClass;\n                delete result.eventStoreClass;\n                delete result.children;\n            }\n            return result;\n        }\n    }\n};\n", "import Base from '../../../Core/Base.js';\n/**\n * @module Scheduler/data/util/ModelPersistencyManager\n */\n/**\n * This class manages model persistency, it listens to model stores' beforesync event and removes all non persistable\n * records from sync operation. The logic has meaning only for CRUD-less sync operations.\n *\n * @private\n */\nexport default class ModelPersistencyManager extends Base {\n    // region Event attachers\n    set eventStore(newEventStore) {\n        const me = this;\n        me.eventStoreDetacher && me.eventStoreDetacher();\n        me._eventStore = newEventStore;\n        if (newEventStore && newEventStore.autoCommit) {\n            me.eventStoreDetacher = newEventStore.ion({\n                beforecommit : me.onEventStoreBeforeSync,\n                thisObj      : me,\n                detachable   : true,\n                // Just in case\n                prio         : 100\n            });\n        }\n    }\n    get eventStore() {\n        return this._eventStore;\n    }\n    set resourceStore(newResourceStore) {\n        const me = this;\n        me.resourceStoreDetacher && me.resourceStoreDetacher();\n        me._resourceStore = newResourceStore;\n        if (newResourceStore && newResourceStore.autoCommit) {\n            me.resourceStoreDetacher = newResourceStore.ion({\n                beforecommit : me.onResourceStoreBeforeSync,\n                thisObj      : me,\n                detachable   : true,\n                // Just in case\n                prio         : 100\n            });\n        }\n    }\n    get resourceStore() {\n        return this._resourceStore;\n    }\n    set assignmentStore(newAssignmentStore) {\n        const me = this;\n        me.assignmentStoreDetacher && me.assignmentStoreDetacher();\n        me._assignmentStore = newAssignmentStore;\n        if (newAssignmentStore && newAssignmentStore.autoSync) {\n            me.assignmentStoreDetacher = newAssignmentStore.ion({\n                beforecommit : me.onAssignmentStoreBeforeSync,\n                thisObj      : me,\n                detachable   : true,\n                // Just in case\n                prio         : 100\n            });\n        }\n    }\n    get assignmentStore() {\n        return this._assignmentStore;\n    }\n    set dependencyStore(newDependencyStore) {\n        const me = this;\n        me.dependencyStoreDetacher && me.dependencyStoreDetacher();\n        me._dependencyStore = newDependencyStore;\n        if (newDependencyStore && newDependencyStore.autoSync) {\n            me.dependencyStoreDetacher = newDependencyStore.ion({\n                beforecommit : me.onDependencyStoreBeforeSync,\n                thisObj      : me,\n                detachable   : true,\n                // Just in case\n                prio         : 100\n            });\n        }\n    }\n    get dependencyStore() {\n        return this._dependencyStore;\n    }\n    // endregion\n    // region Event handlers\n    onEventStoreBeforeSync({ changes }) {\n        const me = this;\n        me.removeNonPersistableRecordsToCreate(changes);\n        return me.shallContinueSync(changes);\n    }\n    onResourceStoreBeforeSync({ changes }) {\n        const me = this;\n        me.removeNonPersistableRecordsToCreate(changes);\n        return me.shallContinueSync(changes);\n    }\n    onAssignmentStoreBeforeSync({ changes }) {\n        const me = this;\n        me.removeNonPersistableRecordsToCreate(changes);\n        return me.shallContinueSync(changes);\n    }\n    onDependencyStoreBeforeSync({ changes }) {\n        const me = this;\n        me.removeNonPersistableRecordsToCreate(changes);\n        return me.shallContinueSync(changes);\n    }\n    // endregion\n    // region Management rules\n    removeNonPersistableRecordsToCreate(changes) {\n        const recordsToCreate = changes.added || [];\n        let r, i;\n        // We remove from the array we iterate thus we iterate from end to start\n        for (i = recordsToCreate.length - 1; i >= 0; --i) {\n            r = recordsToCreate[i];\n            if (!r.isPersistable) {\n                recordsToCreate.splice(recordsToCreate.indexOf(r), 1);\n            }\n        }\n        // Prevent empty create request\n        if (recordsToCreate.length === 0) {\n            changes.added.length = 0;\n        }\n    }\n    shallContinueSync(options) {\n        return Boolean((options.added && options.added.length > 0) ||\n            (options.modified && options.modified.length > 0) ||\n            (options.removed && options.removed.length > 0));\n    }\n    // endregion\n}\nModelPersistencyManager._$name = 'ModelPersistencyManager';", "// @ts-nocheck\nconst diffSecond = (date, diff) => {\n    return new Date(\n        date.getFullYear(),\n        date.getMonth(),\n        date.getDate(),\n        date.getHours(),\n        date.getMinutes(),\n        date.getSeconds() + diff,\n        date.getMilliseconds()\n    );\n};\n/**\n * The code just copy/pasted from pre-built later.js file and made exported\n *\n * @private\n */\nexport const later = (function () {\n    \"use strict\";\n    var later = {\n        version: \"1.2.0\"\n    };\n    if (!Array.prototype.indexOf) {\n        Array.prototype.indexOf = function (searchElement) {\n            \"use strict\";\n            if (this == null) {\n                throw new TypeError();\n            }\n            var t = Object(this);\n            var len = t.length >>> 0;\n            if (len === 0) {\n                return -1;\n            }\n            var n = 0;\n            if (arguments.length > 1) {\n                n = Number(arguments[1]);\n                if (n != n) {\n                    n = 0;\n                }\n                else if (n != 0 && n != Infinity && n != -Infinity) {\n                    n = (n > 0 || -1) * Math.floor(Math.abs(n));\n                }\n            }\n            if (n >= len) {\n                return -1;\n            }\n            var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);\n            for (; k < len; k++) {\n                if (k in t && t[k] === searchElement) {\n                    return k;\n                }\n            }\n            return -1;\n        };\n    }\n    if (!String.prototype.trim) {\n        String.prototype.trim = function () {\n            return this.replace(/^\\s+|\\s+$/g, \"\");\n        };\n    }\n    later.array = {};\n    later.array.sort = function (arr, zeroIsLast) {\n        arr.sort(function (a, b) {\n            return +a - +b;\n        });\n        if (zeroIsLast && arr[0] === 0) {\n            arr.push(arr.shift());\n        }\n    };\n    later.array.next = function (val, values, extent) {\n        var cur, zeroIsLargest = extent[0] !== 0, nextIdx = 0;\n        for (var i = values.length - 1; i > -1; --i) {\n            cur = values[i];\n            if (cur === val) {\n                return cur;\n            }\n            if (cur > val || cur === 0 && zeroIsLargest && extent[1] > val) {\n                nextIdx = i;\n                continue;\n            }\n            break;\n        }\n        return values[nextIdx];\n    };\n    later.array.nextInvalid = function (val, values, extent) {\n        var min = extent[0], max = extent[1], len = values.length, zeroVal = values[len - 1] === 0 && min !== 0 ? max : 0, next = val, i = values.indexOf(val), start = next;\n        while (next === (values[i] || zeroVal)) {\n            next++;\n            if (next > max) {\n                next = min;\n            }\n            i++;\n            if (i === len) {\n                i = 0;\n            }\n            if (next === start) {\n                return undefined;\n            }\n        }\n        return next;\n    };\n    later.array.prev = function (val, values, extent) {\n        var cur, len = values.length, zeroIsLargest = extent[0] !== 0, prevIdx = len - 1;\n        for (var i = 0; i < len; i++) {\n            cur = values[i];\n            if (cur === val) {\n                return cur;\n            }\n            if (cur < val || cur === 0 && zeroIsLargest && extent[1] < val) {\n                prevIdx = i;\n                continue;\n            }\n            break;\n        }\n        return values[prevIdx];\n    };\n    later.array.prevInvalid = function (val, values, extent) {\n        var min = extent[0], max = extent[1], len = values.length, zeroVal = values[len - 1] === 0 && min !== 0 ? max : 0, next = val, i = values.indexOf(val), start = next;\n        while (next === (values[i] || zeroVal)) {\n            next--;\n            if (next < min) {\n                next = max;\n            }\n            i--;\n            if (i === -1) {\n                i = len - 1;\n            }\n            if (next === start) {\n                return undefined;\n            }\n        }\n        return next;\n    };\n    later.day = later.D = {\n        name: \"day\",\n        range: 86400,\n        val: function (d) {\n            return d.D || (d.D = later.date.getDate.call(d));\n        },\n        isValid: function (d, val) {\n            return later.D.val(d) === (val || later.D.extent(d)[1]);\n        },\n        extent: function (d) {\n            if (d.DExtent)\n                return d.DExtent;\n            var month = later.M.val(d), max = later.DAYS_IN_MONTH[month - 1];\n            if (month === 2 && later.dy.extent(d)[1] === 366) {\n                max = max + 1;\n            }\n            return d.DExtent = [1, max];\n        },\n        start: function (d) {\n            return d.DStart || (d.DStart = later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d)));\n        },\n        end: function (d) {\n            return d.DEnd || (d.DEnd = later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d)));\n        },\n        next: function (d, val) {\n            val = val > later.D.extent(d)[1] ? 1 : val;\n            var month = later.date.nextRollover(d, val, later.D, later.M), DMax = later.D.extent(month)[1];\n            val = val > DMax ? 1 : val || DMax;\n            return later.date.next(later.Y.val(month), later.M.val(month), val);\n        },\n        prev: function (d, val) {\n            var month = later.date.prevRollover(d, val, later.D, later.M), DMax = later.D.extent(month)[1];\n            return later.date.prev(later.Y.val(month), later.M.val(month), val > DMax ? DMax : val || DMax);\n        }\n    };\n    later.dayOfWeekCount = later.dc = {\n        name: \"day of week count\",\n        range: 604800,\n        val: function (d) {\n            return d.dc || (d.dc = Math.floor((later.D.val(d) - 1) / 7) + 1);\n        },\n        isValid: function (d, val) {\n            return later.dc.val(d) === val || val === 0 && later.D.val(d) > later.D.extent(d)[1] - 7;\n        },\n        extent: function (d) {\n            return d.dcExtent || (d.dcExtent = [1, Math.ceil(later.D.extent(d)[1] / 7)]);\n        },\n        start: function (d) {\n            return d.dcStart || (d.dcStart = later.date.next(later.Y.val(d), later.M.val(d), Math.max(1, (later.dc.val(d) - 1) * 7 + 1 || 1)));\n        },\n        end: function (d) {\n            return d.dcEnd || (d.dcEnd = later.date.prev(later.Y.val(d), later.M.val(d), Math.min(later.dc.val(d) * 7, later.D.extent(d)[1])));\n        },\n        next: function (d, val) {\n            val = val > later.dc.extent(d)[1] ? 1 : val;\n            var month = later.date.nextRollover(d, val, later.dc, later.M), dcMax = later.dc.extent(month)[1];\n            val = val > dcMax ? 1 : val;\n            var next = later.date.next(later.Y.val(month), later.M.val(month), val === 0 ? later.D.extent(month)[1] - 6 : 1 + 7 * (val - 1));\n            if (next.getTime() <= d.getTime()) {\n                month = later.M.next(d, later.M.val(d) + 1);\n                return later.date.next(later.Y.val(month), later.M.val(month), val === 0 ? later.D.extent(month)[1] - 6 : 1 + 7 * (val - 1));\n            }\n            return next;\n        },\n        prev: function (d, val) {\n            var month = later.date.prevRollover(d, val, later.dc, later.M), dcMax = later.dc.extent(month)[1];\n            val = val > dcMax ? dcMax : val || dcMax;\n            return later.dc.end(later.date.prev(later.Y.val(month), later.M.val(month), 1 + 7 * (val - 1)));\n        }\n    };\n    later.dayOfWeek = later.dw = later.d = {\n        name: \"day of week\",\n        range: 86400,\n        val: function (d) {\n            return d.dw || (d.dw = later.date.getDay.call(d) + 1);\n        },\n        isValid: function (d, val) {\n            return later.dw.val(d) === (val || 7);\n        },\n        extent: function () {\n            return [1, 7];\n        },\n        start: function (d) {\n            return later.D.start(d);\n        },\n        end: function (d) {\n            return later.D.end(d);\n        },\n        next: function (d, val) {\n            val = val > 7 ? 1 : val || 7;\n            return later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d) + (val - later.dw.val(d)) + (val <= later.dw.val(d) ? 7 : 0));\n        },\n        prev: function (d, val) {\n            val = val > 7 ? 7 : val || 7;\n            return later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d) + (val - later.dw.val(d)) + (val >= later.dw.val(d) ? -7 : 0));\n        }\n    };\n    later.dayOfYear = later.dy = {\n        name: \"day of year\",\n        range: 86400,\n        val: function (d) {\n            return d.dy || (d.dy = Math.ceil(1 + (later.D.start(d).getTime() - later.Y.start(d).getTime()) / later.DAY));\n        },\n        isValid: function (d, val) {\n            return later.dy.val(d) === (val || later.dy.extent(d)[1]);\n        },\n        extent: function (d) {\n            var year = later.Y.val(d);\n            return d.dyExtent || (d.dyExtent = [1, year % 4 ? 365 : 366]);\n        },\n        start: function (d) {\n            return later.D.start(d);\n        },\n        end: function (d) {\n            return later.D.end(d);\n        },\n        next: function (d, val) {\n            val = val > later.dy.extent(d)[1] ? 1 : val;\n            var year = later.date.nextRollover(d, val, later.dy, later.Y), dyMax = later.dy.extent(year)[1];\n            val = val > dyMax ? 1 : val || dyMax;\n            return later.date.next(later.Y.val(year), later.M.val(year), val);\n        },\n        prev: function (d, val) {\n            var year = later.date.prevRollover(d, val, later.dy, later.Y), dyMax = later.dy.extent(year)[1];\n            val = val > dyMax ? dyMax : val || dyMax;\n            return later.date.prev(later.Y.val(year), later.M.val(year), val);\n        }\n    };\n    later.hour = later.h = {\n        name: \"hour\",\n        range: 3600,\n        val: function (d) {\n            return d.h || (d.h = later.date.getHour.call(d));\n        },\n        isValid: function (d, val) {\n            return later.h.val(d) === val;\n        },\n        extent: function () {\n            return [0, 23];\n        },\n        start: function (d) {\n            return d.hStart || (d.hStart = later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d)));\n        },\n        end: function (d) {\n            return d.hEnd || (d.hEnd = later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d)));\n        },\n        next: function (d, val) {\n            val = val > 23 ? 0 : val;\n            var next = later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d) + (val <= later.h.val(d) ? 1 : 0), val);\n            if (!later.date.isUTC && next.getTime() <= d.getTime()) {\n                next = later.date.next(later.Y.val(next), later.M.val(next), later.D.val(next), val + 1);\n            }\n            return next;\n        },\n        prev: function (d, val) {\n            val = val > 23 ? 23 : val;\n            return later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d) + (val >= later.h.val(d) ? -1 : 0), val);\n        }\n    };\n    later.minute = later.m = {\n        name: \"minute\",\n        range: 60,\n        val: function (d) {\n            return d.m || (d.m = later.date.getMin.call(d));\n        },\n        isValid: function (d, val) {\n            return later.m.val(d) === val;\n        },\n        extent: function (d) {\n            return [0, 59];\n        },\n        start: function (d) {\n            return d.mStart || (d.mStart = later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d), later.m.val(d)));\n        },\n        end: function (d) {\n            return d.mEnd || (d.mEnd = later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d), later.m.val(d)));\n        },\n        next: function (d, val) {\n            var m = later.m.val(d), s = later.s.val(d), inc = val > 59 ? 60 - m : val <= m ? 60 - m + val : val - m, next = new Date(d.getTime() + inc * later.MIN - s * later.SEC);\n            if (!later.date.isUTC && next.getTime() <= d.getTime()) {\n                next = new Date(d.getTime() + (inc + 120) * later.MIN - s * later.SEC);\n            }\n            return next;\n        },\n        prev: function (d, val) {\n            val = val > 59 ? 59 : val;\n            return later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d) + (val >= later.m.val(d) ? -1 : 0), val);\n        }\n    };\n    later.month = later.M = {\n        name: \"month\",\n        range: 2629740,\n        val: function (d) {\n            return d.M || (d.M = later.date.getMonth.call(d) + 1);\n        },\n        isValid: function (d, val) {\n            return later.M.val(d) === (val || 12);\n        },\n        extent: function () {\n            return [1, 12];\n        },\n        start: function (d) {\n            return d.MStart || (d.MStart = later.date.next(later.Y.val(d), later.M.val(d)));\n        },\n        end: function (d) {\n            return d.MEnd || (d.MEnd = later.date.prev(later.Y.val(d), later.M.val(d)));\n        },\n        next: function (d, val) {\n            val = val > 12 ? 1 : val || 12;\n            return later.date.next(later.Y.val(d) + (val > later.M.val(d) ? 0 : 1), val);\n        },\n        prev: function (d, val) {\n            val = val > 12 ? 12 : val || 12;\n            return later.date.prev(later.Y.val(d) - (val >= later.M.val(d) ? 1 : 0), val);\n        }\n    };\n    later.second = later.s = {\n        name: \"second\",\n        range: 1,\n        val: function (d) {\n            return d.s || (d.s = later.date.getSec.call(d));\n        },\n        isValid: function (d, val) {\n            return later.s.val(d) === val;\n        },\n        extent: function () {\n            return [0, 59];\n        },\n        start: function (d) {\n            return d;\n        },\n        end: function (d) {\n            return d;\n        },\n        next: function (d, val) {\n            var s = later.s.val(d), inc = val > 59 ? 60 - s : val <= s ? 60 - s + val : val - s, next = new Date(d.getTime() + inc * later.SEC);\n            if (!later.date.isUTC && next.getTime() <= d.getTime()) {\n                next = new Date(d.getTime() + (inc + 7200) * later.SEC);\n            }\n            return next;\n        },\n        prev: function (d, val, cache) {\n            val = val > 59 ? 59 : val;\n            return later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d), later.m.val(d) + (val >= later.s.val(d) ? -1 : 0), val);\n        }\n    };\n    later.time = later.t = {\n        name: \"time\",\n        range: 1,\n        val: function (d) {\n            return d.t || (d.t = later.h.val(d) * 3600 + later.m.val(d) * 60 + later.s.val(d));\n        },\n        isValid: function (d, val) {\n            return later.t.val(d) === val;\n        },\n        extent: function () {\n            return [0, 86399];\n        },\n        start: function (d) {\n            return d;\n        },\n        end: function (d) {\n            return d;\n        },\n        next: function (d, val) {\n            val = val > 86399 ? 0 : val;\n            var next = later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d) + (val <= later.t.val(d) ? 1 : 0), 0, 0, val);\n            if (!later.date.isUTC && next.getTime() < d.getTime()) {\n                next = later.date.next(later.Y.val(next), later.M.val(next), later.D.val(next), later.h.val(next), later.m.val(next), val + 7200);\n            }\n            return next;\n        },\n        prev: function (d, val) {\n            val = val > 86399 ? 86399 : val;\n            return later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d) + (val >= later.t.val(d) ? -1 : 0), 0, 0, val);\n        }\n    };\n    later.weekOfMonth = later.wm = {\n        name: \"week of month\",\n        range: 604800,\n        val: function (d) {\n            return d.wm || (d.wm = (later.D.val(d) + (later.dw.val(later.M.start(d)) - 1) + (7 - later.dw.val(d))) / 7);\n        },\n        isValid: function (d, val) {\n            return later.wm.val(d) === (val || later.wm.extent(d)[1]);\n        },\n        extent: function (d) {\n            return d.wmExtent || (d.wmExtent = [1, (later.D.extent(d)[1] + (later.dw.val(later.M.start(d)) - 1) + (7 - later.dw.val(later.M.end(d)))) / 7]);\n        },\n        start: function (d) {\n            return d.wmStart || (d.wmStart = later.date.next(later.Y.val(d), later.M.val(d), Math.max(later.D.val(d) - later.dw.val(d) + 1, 1)));\n        },\n        end: function (d) {\n            return d.wmEnd || (d.wmEnd = later.date.prev(later.Y.val(d), later.M.val(d), Math.min(later.D.val(d) + (7 - later.dw.val(d)), later.D.extent(d)[1])));\n        },\n        next: function (d, val) {\n            val = val > later.wm.extent(d)[1] ? 1 : val;\n            var month = later.date.nextRollover(d, val, later.wm, later.M), wmMax = later.wm.extent(month)[1];\n            val = val > wmMax ? 1 : val || wmMax;\n            return later.date.next(later.Y.val(month), later.M.val(month), Math.max(1, (val - 1) * 7 - (later.dw.val(month) - 2)));\n        },\n        prev: function (d, val) {\n            var month = later.date.prevRollover(d, val, later.wm, later.M), wmMax = later.wm.extent(month)[1];\n            val = val > wmMax ? wmMax : val || wmMax;\n            return later.wm.end(later.date.next(later.Y.val(month), later.M.val(month), Math.max(1, (val - 1) * 7 - (later.dw.val(month) - 2))));\n        }\n    };\n    later.weekOfYear = later.wy = {\n        name: \"week of year (ISO)\",\n        range: 604800,\n        val: function (d) {\n            if (d.wy)\n                return d.wy;\n            var wThur = later.dw.next(later.wy.start(d), 5), YThur = later.dw.next(later.Y.prev(wThur, later.Y.val(wThur) - 1), 5);\n            return d.wy = 1 + Math.ceil((wThur.getTime() - YThur.getTime()) / later.WEEK);\n        },\n        isValid: function (d, val) {\n            return later.wy.val(d) === (val || later.wy.extent(d)[1]);\n        },\n        extent: function (d) {\n            if (d.wyExtent)\n                return d.wyExtent;\n            var year = later.dw.next(later.wy.start(d), 5), dwFirst = later.dw.val(later.Y.start(year)), dwLast = later.dw.val(later.Y.end(year));\n            return d.wyExtent = [1, dwFirst === 5 || dwLast === 5 ? 53 : 52];\n        },\n        start: function (d) {\n            return d.wyStart || (d.wyStart = later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d) - (later.dw.val(d) > 1 ? later.dw.val(d) - 2 : 6)));\n        },\n        end: function (d) {\n            return d.wyEnd || (d.wyEnd = later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d) + (later.dw.val(d) > 1 ? 8 - later.dw.val(d) : 0)));\n        },\n        next: function (d, val) {\n            val = val > later.wy.extent(d)[1] ? 1 : val;\n            var wyThur = later.dw.next(later.wy.start(d), 5), year = later.date.nextRollover(wyThur, val, later.wy, later.Y);\n            if (later.wy.val(year) !== 1) {\n                year = later.dw.next(year, 2);\n            }\n            var wyMax = later.wy.extent(year)[1], wyStart = later.wy.start(year);\n            val = val > wyMax ? 1 : val || wyMax;\n            return later.date.next(later.Y.val(wyStart), later.M.val(wyStart), later.D.val(wyStart) + 7 * (val - 1));\n        },\n        prev: function (d, val) {\n            var wyThur = later.dw.next(later.wy.start(d), 5), year = later.date.prevRollover(wyThur, val, later.wy, later.Y);\n            if (later.wy.val(year) !== 1) {\n                year = later.dw.next(year, 2);\n            }\n            var wyMax = later.wy.extent(year)[1], wyEnd = later.wy.end(year);\n            val = val > wyMax ? wyMax : val || wyMax;\n            return later.wy.end(later.date.next(later.Y.val(wyEnd), later.M.val(wyEnd), later.D.val(wyEnd) + 7 * (val - 1)));\n        }\n    };\n    later.year = later.Y = {\n        name: \"year\",\n        range: 31556900,\n        val: function (d) {\n            return d.Y || (d.Y = later.date.getYear.call(d));\n        },\n        isValid: function (d, val) {\n            return later.Y.val(d) === val;\n        },\n        extent: function () {\n            return [1970, 2099];\n        },\n        start: function (d) {\n            return d.YStart || (d.YStart = later.date.next(later.Y.val(d)));\n        },\n        end: function (d) {\n            return d.YEnd || (d.YEnd = later.date.prev(later.Y.val(d)));\n        },\n        next: function (d, val) {\n            return val > later.Y.val(d) && val <= later.Y.extent()[1] ? later.date.next(val) : later.NEVER;\n        },\n        prev: function (d, val) {\n            return val < later.Y.val(d) && val >= later.Y.extent()[0] ? later.date.prev(val) : later.NEVER;\n        }\n    };\n    later.fullDate = later.fd = {\n        name: \"full date\",\n        range: 1,\n        val: function (d) {\n            return d.fd || (d.fd = d.getTime());\n        },\n        isValid: function (d, val) {\n            return later.fd.val(d) === val;\n        },\n        extent: function () {\n            return [0, 3250368e7];\n        },\n        start: function (d) {\n            return d;\n        },\n        end: function (d) {\n            return d;\n        },\n        next: function (d, val) {\n            return later.fd.val(d) < val ? new Date(val) : later.NEVER;\n        },\n        prev: function (d, val) {\n            return later.fd.val(d) > val ? new Date(val) : later.NEVER;\n        }\n    };\n    later.modifier = {};\n    later.modifier.after = later.modifier.a = function (constraint, values) {\n        var value = values[0];\n        return {\n            name: \"after \" + constraint.name,\n            range: (constraint.extent(new Date())[1] - value) * constraint.range,\n            val: constraint.val,\n            isValid: function (d, val) {\n                return this.val(d) >= value;\n            },\n            extent: constraint.extent,\n            start: constraint.start,\n            end: constraint.end,\n            next: function (startDate, val) {\n                if (val != value)\n                    val = constraint.extent(startDate)[0];\n                return constraint.next(startDate, val);\n            },\n            prev: function (startDate, val) {\n                val = val === value ? constraint.extent(startDate)[1] : value - 1;\n                return constraint.prev(startDate, val);\n            }\n        };\n    };\n    later.modifier.before = later.modifier.b = function (constraint, values) {\n        var value = values[values.length - 1];\n        return {\n            name: \"before \" + constraint.name,\n            range: constraint.range * (value - 1),\n            val: constraint.val,\n            isValid: function (d, val) {\n                return this.val(d) < value;\n            },\n            extent: constraint.extent,\n            start: constraint.start,\n            end: constraint.end,\n            next: function (startDate, val) {\n                val = val === value ? constraint.extent(startDate)[0] : value;\n                return constraint.next(startDate, val);\n            },\n            prev: function (startDate, val) {\n                val = val === value ? value - 1 : constraint.extent(startDate)[1];\n                return constraint.prev(startDate, val);\n            }\n        };\n    };\n    later.compile = function (schedDef) {\n        var constraints = [], constraintsLen = 0, tickConstraint;\n        for (var key in schedDef) {\n            var nameParts = key.split(\"_\"), name = nameParts[0], mod = nameParts[1], vals = schedDef[key], constraint = mod ? later.modifier[mod](later[name], vals) : later[name];\n            constraints.push({\n                constraint: constraint,\n                vals: vals\n            });\n            constraintsLen++;\n        }\n        constraints.sort(function (a, b) {\n            var ra = a.constraint.range, rb = b.constraint.range;\n            return rb < ra ? -1 : rb > ra ? 1 : 0;\n        });\n        tickConstraint = constraints[constraintsLen - 1].constraint;\n        function compareFn(dir) {\n            return dir === \"next\" ? function (a, b) {\n                return a.getTime() > b.getTime();\n            } : function (a, b) {\n                return b.getTime() > a.getTime();\n            };\n        }\n        return {\n            start: function (dir, startDate) {\n                var next = startDate, nextVal = later.array[dir], maxAttempts = 1e3, done;\n                while (maxAttempts-- && !done && next) {\n                    done = true;\n                    for (var i = 0; i < constraintsLen; i++) {\n                        var constraint = constraints[i].constraint, curVal = constraint.val(next), extent = constraint.extent(next), newVal = nextVal(curVal, constraints[i].vals, extent);\n                        if (!constraint.isValid(next, newVal)) {\n                            next = constraint[dir](next, newVal);\n                            done = false;\n                            break;\n                        }\n                    }\n                }\n                if (next !== later.NEVER) {\n                    next = dir === \"next\" ? tickConstraint.start(next) : tickConstraint.end(next);\n                }\n                return next;\n            },\n            end: function (dir, startDate) {\n                var result, nextVal = later.array[dir + \"Invalid\"], compare = compareFn(dir);\n                for (var i = constraintsLen - 1; i >= 0; i--) {\n                    var constraint = constraints[i].constraint, curVal = constraint.val(startDate), extent = constraint.extent(startDate), newVal = nextVal(curVal, constraints[i].vals, extent), next;\n                    if (newVal !== undefined) {\n                        next = constraint[dir](startDate, newVal);\n                        if (next && (!result || compare(result, next))) {\n                            result = next;\n                        }\n                    }\n                }\n                return result;\n            },\n            tick: function (dir, date) {\n                return new Date(dir === \"next\" ? tickConstraint.end(date).getTime() + later.SEC : tickConstraint.start(date).getTime() - later.SEC);\n            },\n            // PATCH\n            tickSafe: function (dir, date) {\n                return dir === \"next\"\n                    ? diffSecond(tickConstraint.end(date), 1)\n                    : diffSecond(tickConstraint.start(date), -1)\n                ;\n            },\n            // EOF PATCH\n            tickStart: function (date) {\n                return tickConstraint.start(date);\n            }\n        };\n    };\n    later.schedule = function (sched) {\n        if (!sched)\n            throw new Error(\"Missing schedule definition.\");\n        if (!sched.schedules)\n            throw new Error(\"Definition must include at least one schedule.\");\n        var schedules = [], schedulesLen = sched.schedules.length, exceptions = [], exceptionsLen = sched.exceptions ? sched.exceptions.length : 0;\n        for (var i = 0; i < schedulesLen; i++) {\n            schedules.push(later.compile(sched.schedules[i]));\n        }\n        for (var j = 0; j < exceptionsLen; j++) {\n            exceptions.push(later.compile(sched.exceptions[j]));\n        }\n        function getInstances(dir, count, startDate, endDate, isRange) {\n            var compare = compareFn(dir), loopCount = count, maxAttempts = 1e6, schedStarts = [], exceptStarts = [], next, end, results = [], isForward = dir === \"next\", lastResult, rStart = isForward ? 0 : 1, rEnd = isForward ? 1 : 0;\n            startDate = startDate ? new Date(startDate) : new Date();\n            if (!startDate || !startDate.getTime())\n                throw new Error(\"Invalid start date.\");\n            setNextStarts(dir, schedules, schedStarts, startDate);\n            setRangeStarts(dir, exceptions, exceptStarts, startDate);\n            while (maxAttempts-- && loopCount && (next = findNext(schedStarts, compare))) {\n                if (endDate && compare(next, endDate)) {\n                    break;\n                }\n                if (exceptionsLen) {\n                    updateRangeStarts(dir, exceptions, exceptStarts, next);\n                    if (end = calcRangeOverlap(dir, exceptStarts, next)) {\n                        updateNextStarts(dir, schedules, schedStarts, end);\n                        continue;\n                    }\n                }\n                if (isRange) {\n                    var maxEndDate = calcMaxEndDate(exceptStarts, compare);\n                    end = calcEnd(dir, schedules, schedStarts, next, maxEndDate);\n                    var r = isForward ? [new Date(Math.max(startDate, next)), end ? new Date(endDate ? Math.min(end, endDate) : end) : undefined] : [end ? new Date(endDate ? Math.max(endDate, end.getTime() + later.SEC) : end.getTime() + later.SEC) : undefined, new Date(Math.min(startDate, next.getTime() + later.SEC))];\n                    if (lastResult && r[rStart].getTime() === lastResult[rEnd].getTime()) {\n                        lastResult[rEnd] = r[rEnd];\n                        loopCount++;\n                    }\n                    else {\n                        lastResult = r;\n                        results.push(lastResult);\n                    }\n                    if (!end)\n                        break;\n                    updateNextStarts(dir, schedules, schedStarts, end);\n                }\n                else {\n                    results.push(isForward ? new Date(Math.max(startDate, next)) : getStart(schedules, schedStarts, next, endDate));\n                    tickStarts(dir, schedules, schedStarts, next);\n                }\n                loopCount--;\n            }\n            for (var i = 0, len = results.length; i < len; i++) {\n                var result = results[i];\n                results[i] = Object.prototype.toString.call(result) === \"[object Array]\" ? [cleanDate(result[0]), cleanDate(result[1])] : cleanDate(result);\n            }\n            return results.length === 0 ? later.NEVER : count === 1 ? results[0] : results;\n        }\n        function cleanDate(d) {\n            if (d instanceof Date && !isNaN(d.valueOf())) {\n                return new Date(d);\n            }\n            return undefined;\n        }\n        function setNextStarts(dir, schedArr, startsArr, startDate) {\n            for (var i = 0, len = schedArr.length; i < len; i++) {\n                startsArr[i] = schedArr[i].start(dir, startDate);\n            }\n        }\n        function updateNextStarts(dir, schedArr, startsArr, startDate) {\n            var compare = compareFn(dir);\n            for (var i = 0, len = schedArr.length; i < len; i++) {\n                if (startsArr[i] && !compare(startsArr[i], startDate)) {\n                    startsArr[i] = schedArr[i].start(dir, startDate);\n                }\n            }\n        }\n        function setRangeStarts(dir, schedArr, rangesArr, startDate) {\n            var compare = compareFn(dir);\n            for (var i = 0, len = schedArr.length; i < len; i++) {\n                var nextStart = schedArr[i].start(dir, startDate);\n                if (!nextStart) {\n                    rangesArr[i] = later.NEVER;\n                }\n                else {\n                    rangesArr[i] = [nextStart, schedArr[i].end(dir, nextStart)];\n                }\n            }\n        }\n        function updateRangeStarts(dir, schedArr, rangesArr, startDate) {\n            var compare = compareFn(dir);\n            for (var i = 0, len = schedArr.length; i < len; i++) {\n                if (rangesArr[i] && !compare(rangesArr[i][0], startDate)) {\n                    var nextStart = schedArr[i].start(dir, startDate);\n                    if (!nextStart) {\n                        rangesArr[i] = later.NEVER;\n                    }\n                    else {\n                        rangesArr[i] = [nextStart, schedArr[i].end(dir, nextStart)];\n                    }\n                }\n            }\n        }\n        function tickStarts(dir, schedArr, startsArr, startDate) {\n            for (var i = 0, len = schedArr.length; i < len; i++) {\n                if (startsArr[i] && startsArr[i].getTime() === startDate.getTime()) {\n                    // PATCH\n                    const newStart = schedArr[i].start(dir, schedArr[i].tick(dir, startDate));\n                    // if the calculated `newStart` is the same as previous, this is probably\n                    // an endless loop caused by the DST shift (the browser won't halt because later.js\n                    // has a limit of 100000 iterations, but the calculated schedules will be all wrong)\n                    if (newStart !== later.NEVER && newStart.getTime() === startsArr[i].getTime()) {\n                        // in such case we use our own \"safe\" implementation of the \"tick\" method\n                        // which performs symbolic date manipulation\n                        // (instead of advancing on milliseconds since epoch timeaxis)\n                        // the former seems to be slower, that's why we only switch to it\n                        // in the case of infinite loop\n                        startsArr[i] = schedArr[i].start(dir, schedArr[i].tickSafe(dir, startDate));\n                    } else {\n                        startsArr[i] = newStart\n                    }\n                    // EOF PATCH\n                }\n            }\n        }\n        function getStart(schedArr, startsArr, startDate, minEndDate) {\n            var result;\n            for (var i = 0, len = startsArr.length; i < len; i++) {\n                if (startsArr[i] && startsArr[i].getTime() === startDate.getTime()) {\n                    var start = schedArr[i].tickStart(startDate);\n                    if (minEndDate && start < minEndDate) {\n                        return minEndDate;\n                    }\n                    if (!result || start > result) {\n                        result = start;\n                    }\n                }\n            }\n            return result;\n        }\n        function calcRangeOverlap(dir, rangesArr, startDate) {\n            var compare = compareFn(dir), result;\n            for (var i = 0, len = rangesArr.length; i < len; i++) {\n                var range = rangesArr[i];\n                if (range && !compare(range[0], startDate) && (!range[1] || compare(range[1], startDate))) {\n                    if (!result || compare(range[1], result)) {\n                        result = range[1];\n                    }\n                }\n            }\n            return result;\n        }\n        function calcMaxEndDate(exceptsArr, compare) {\n            var result;\n            for (var i = 0, len = exceptsArr.length; i < len; i++) {\n                if (exceptsArr[i] && (!result || compare(result, exceptsArr[i][0]))) {\n                    result = exceptsArr[i][0];\n                }\n            }\n            return result;\n        }\n        function calcEnd(dir, schedArr, startsArr, startDate, maxEndDate) {\n            var compare = compareFn(dir), result;\n            for (var i = 0, len = schedArr.length; i < len; i++) {\n                var start = startsArr[i];\n                if (start && start.getTime() === startDate.getTime()) {\n                    var end = schedArr[i].end(dir, start);\n                    if (maxEndDate && (!end || compare(end, maxEndDate))) {\n                        return maxEndDate;\n                    }\n                    if (!result || compare(end, result)) {\n                        result = end;\n                    }\n                }\n            }\n            return result;\n        }\n        function compareFn(dir) {\n            return dir === \"next\" ? function (a, b) {\n                return !b || a.getTime() > b.getTime();\n            } : function (a, b) {\n                return !a || b.getTime() > a.getTime();\n            };\n        }\n        function findNext(arr, compare) {\n            var next = arr[0];\n            for (var i = 1, len = arr.length; i < len; i++) {\n                if (arr[i] && compare(next, arr[i])) {\n                    next = arr[i];\n                }\n            }\n            return next;\n        }\n        return {\n            isValid: function (d) {\n                return getInstances(\"next\", 1, d, d) !== later.NEVER;\n            },\n            next: function (count, startDate, endDate) {\n                return getInstances(\"next\", count || 1, startDate, endDate);\n            },\n            prev: function (count, startDate, endDate) {\n                return getInstances(\"prev\", count || 1, startDate, endDate);\n            },\n            nextRange: function (count, startDate, endDate) {\n                return getInstances(\"next\", count || 1, startDate, endDate, true);\n            },\n            prevRange: function (count, startDate, endDate) {\n                return getInstances(\"prev\", count || 1, startDate, endDate, true);\n            }\n        };\n    };\n    later.setTimeout = function (fn, sched) {\n        var s = later.schedule(sched), t;\n        if (fn) {\n            scheduleTimeout();\n        }\n        function scheduleTimeout() {\n            var now = Date.now(), next = s.next(2, now);\n            if (!next[0]) {\n                t = undefined;\n                return;\n            }\n            var diff = next[0].getTime() - now;\n            if (diff < 1e3) {\n                diff = next[1] ? next[1].getTime() - now : 1e3;\n            }\n            if (diff < 2147483647) {\n                t = setTimeout(fn, diff);\n            }\n            else {\n                t = setTimeout(scheduleTimeout, 2147483647);\n            }\n        }\n        return {\n            isDone: function () {\n                return !t;\n            },\n            clear: function () {\n                clearTimeout(t);\n            }\n        };\n    };\n    later.setInterval = function (fn, sched) {\n        if (!fn) {\n            return;\n        }\n        var t = later.setTimeout(scheduleTimeout, sched), done = t.isDone();\n        function scheduleTimeout() {\n            if (!done) {\n                fn();\n                t = later.setTimeout(scheduleTimeout, sched);\n            }\n        }\n        return {\n            isDone: function () {\n                return t.isDone();\n            },\n            clear: function () {\n                done = true;\n                t.clear();\n            }\n        };\n    };\n    later.date = {};\n    later.date.timezone = function (useLocalTime) {\n        later.date.build = useLocalTime ? function (Y, M, D, h, m, s) {\n            return new Date(Y, M, D, h, m, s);\n        } : function (Y, M, D, h, m, s) {\n            return new Date(Date.UTC(Y, M, D, h, m, s));\n        };\n        var get = useLocalTime ? \"get\" : \"getUTC\", d = Date.prototype;\n        later.date.getYear = d[get + \"FullYear\"];\n        later.date.getMonth = d[get + \"Month\"];\n        later.date.getDate = d[get + \"Date\"];\n        later.date.getDay = d[get + \"Day\"];\n        later.date.getHour = d[get + \"Hours\"];\n        later.date.getMin = d[get + \"Minutes\"];\n        later.date.getSec = d[get + \"Seconds\"];\n        later.date.isUTC = !useLocalTime;\n    };\n    later.date.UTC = function () {\n        later.date.timezone(false);\n    };\n    later.date.localTime = function () {\n        later.date.timezone(true);\n    };\n    later.date.UTC();\n    later.SEC = 1e3;\n    later.MIN = later.SEC * 60;\n    later.HOUR = later.MIN * 60;\n    later.DAY = later.HOUR * 24;\n    later.WEEK = later.DAY * 7;\n    later.DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    later.NEVER = 0;\n    later.date.next = function (Y, M, D, h, m, s) {\n        return later.date.build(Y, M !== undefined ? M - 1 : 0, D !== undefined ? D : 1, h || 0, m || 0, s || 0);\n    };\n    later.date.nextRollover = function (d, val, constraint, period) {\n        var cur = constraint.val(d), max = constraint.extent(d)[1];\n        return (val || max) <= cur || val > max ? new Date(period.end(d).getTime() + later.SEC) : period.start(d);\n    };\n    later.date.prev = function (Y, M, D, h, m, s) {\n        var len = arguments.length;\n        M = len < 2 ? 11 : M - 1;\n        D = len < 3 ? later.D.extent(later.date.next(Y, M + 1))[1] : D;\n        h = len < 4 ? 23 : h;\n        m = len < 5 ? 59 : m;\n        s = len < 6 ? 59 : s;\n        return later.date.build(Y, M, D, h, m, s);\n    };\n    later.date.prevRollover = function (d, val, constraint, period) {\n        var cur = constraint.val(d);\n        return val >= cur || !val ? period.start(period.prev(d, period.val(d) - 1)) : period.start(d);\n    };\n    later.parse = {};\n    later.parse.cron = function (expr, hasSeconds) {\n        var NAMES = {\n            JAN: 1,\n            FEB: 2,\n            MAR: 3,\n            APR: 4,\n            MAY: 5,\n            JUN: 6,\n            JUL: 7,\n            AUG: 8,\n            SEP: 9,\n            OCT: 10,\n            NOV: 11,\n            DEC: 12,\n            SUN: 1,\n            MON: 2,\n            TUE: 3,\n            WED: 4,\n            THU: 5,\n            FRI: 6,\n            SAT: 7\n        };\n        var REPLACEMENTS = {\n            \"* * * * * *\": \"0/1 * * * * *\",\n            \"@YEARLY\": \"0 0 1 1 *\",\n            \"@ANNUALLY\": \"0 0 1 1 *\",\n            \"@MONTHLY\": \"0 0 1 * *\",\n            \"@WEEKLY\": \"0 0 * * 0\",\n            \"@DAILY\": \"0 0 * * *\",\n            \"@HOURLY\": \"0 * * * *\"\n        };\n        var FIELDS = {\n            s: [0, 0, 59],\n            m: [1, 0, 59],\n            h: [2, 0, 23],\n            D: [3, 1, 31],\n            M: [4, 1, 12],\n            Y: [6, 1970, 2099],\n            d: [5, 1, 7, 1]\n        };\n        function getValue(value, offset, max) {\n            return isNaN(value) ? NAMES[value] || null : Math.min(+value + (offset || 0), max || 9999);\n        }\n        function cloneSchedule(sched) {\n            var clone = {}, field;\n            for (field in sched) {\n                if (field !== \"dc\" && field !== \"d\") {\n                    clone[field] = sched[field].slice(0);\n                }\n            }\n            return clone;\n        }\n        function add(sched, name, min, max, inc) {\n            var i = min;\n            if (!sched[name]) {\n                sched[name] = [];\n            }\n            while (i <= max) {\n                if (sched[name].indexOf(i) < 0) {\n                    sched[name].push(i);\n                }\n                i += inc || 1;\n            }\n            sched[name].sort(function (a, b) {\n                return a - b;\n            });\n        }\n        function addHash(schedules, curSched, value, hash) {\n            if (curSched.d && !curSched.dc || curSched.dc && curSched.dc.indexOf(hash) < 0) {\n                schedules.push(cloneSchedule(curSched));\n                curSched = schedules[schedules.length - 1];\n            }\n            add(curSched, \"d\", value, value);\n            add(curSched, \"dc\", hash, hash);\n        }\n        function addWeekday(s, curSched, value) {\n            var except1 = {}, except2 = {};\n            if (value === 1) {\n                add(curSched, \"D\", 1, 3);\n                add(curSched, \"d\", NAMES.MON, NAMES.FRI);\n                add(except1, \"D\", 2, 2);\n                add(except1, \"d\", NAMES.TUE, NAMES.FRI);\n                add(except2, \"D\", 3, 3);\n                add(except2, \"d\", NAMES.TUE, NAMES.FRI);\n            }\n            else {\n                add(curSched, \"D\", value - 1, value + 1);\n                add(curSched, \"d\", NAMES.MON, NAMES.FRI);\n                add(except1, \"D\", value - 1, value - 1);\n                add(except1, \"d\", NAMES.MON, NAMES.THU);\n                add(except2, \"D\", value + 1, value + 1);\n                add(except2, \"d\", NAMES.TUE, NAMES.FRI);\n            }\n            s.exceptions.push(except1);\n            s.exceptions.push(except2);\n        }\n        function addRange(item, curSched, name, min, max, offset) {\n            var incSplit = item.split(\"/\"), inc = +incSplit[1], range = incSplit[0];\n            if (range !== \"*\" && range !== \"0\") {\n                var rangeSplit = range.split(\"-\");\n                min = getValue(rangeSplit[0], offset, max);\n                max = getValue(rangeSplit[1], offset, max) || max;\n            }\n            add(curSched, name, min, max, inc);\n        }\n        function parse(item, s, name, min, max, offset) {\n            var value, split, schedules = s.schedules, curSched = schedules[schedules.length - 1];\n            if (item === \"L\") {\n                item = min - 1;\n            }\n            if ((value = getValue(item, offset, max)) !== null) {\n                add(curSched, name, value, value);\n            }\n            else if ((value = getValue(item.replace(\"W\", \"\"), offset, max)) !== null) {\n                addWeekday(s, curSched, value);\n            }\n            else if ((value = getValue(item.replace(\"L\", \"\"), offset, max)) !== null) {\n                addHash(schedules, curSched, value, min - 1);\n            }\n            else if ((split = item.split(\"#\")).length === 2) {\n                value = getValue(split[0], offset, max);\n                addHash(schedules, curSched, value, getValue(split[1]));\n            }\n            else {\n                addRange(item, curSched, name, min, max, offset);\n            }\n        }\n        function isHash(item) {\n            return item.indexOf(\"#\") > -1 || item.indexOf(\"L\") > 0;\n        }\n        function itemSorter(a, b) {\n            return isHash(a) && !isHash(b) ? 1 : a - b;\n        }\n        function parseExpr(expr) {\n            var schedule = {\n                schedules: [{}],\n                exceptions: []\n            }, components = expr.replace(/(\\s)+/g, \" \").split(\" \"), field, f, component, items;\n            for (field in FIELDS) {\n                f = FIELDS[field];\n                component = components[f[0]];\n                if (component && component !== \"*\" && component !== \"?\") {\n                    items = component.split(\",\").sort(itemSorter);\n                    var i, length = items.length;\n                    for (i = 0; i < length; i++) {\n                        parse(items[i], schedule, field, f[1], f[2], f[3]);\n                    }\n                }\n            }\n            return schedule;\n        }\n        function prepareExpr(expr) {\n            var prepared = expr.toUpperCase();\n            return REPLACEMENTS[prepared] || prepared;\n        }\n        var e = prepareExpr(expr);\n        return parseExpr(hasSeconds ? e : \"0 \" + e);\n    };\n    later.parse.recur = function () {\n        var schedules = [], exceptions = [], cur, curArr = schedules, curName, values, every, modifier, applyMin, applyMax, i, last;\n        function add(name, min, max) {\n            name = modifier ? name + \"_\" + modifier : name;\n            if (!cur) {\n                curArr.push({});\n                cur = curArr[0];\n            }\n            if (!cur[name]) {\n                cur[name] = [];\n            }\n            curName = cur[name];\n            if (every) {\n                values = [];\n                for (i = min; i <= max; i += every) {\n                    values.push(i);\n                }\n                last = {\n                    n: name,\n                    x: every,\n                    c: curName.length,\n                    m: max\n                };\n            }\n            values = applyMin ? [min] : applyMax ? [max] : values;\n            var length = values.length;\n            for (i = 0; i < length; i += 1) {\n                var val = values[i];\n                if (curName.indexOf(val) < 0) {\n                    curName.push(val);\n                }\n            }\n            values = every = modifier = applyMin = applyMax = 0;\n        }\n        return {\n            schedules: schedules,\n            exceptions: exceptions,\n            on: function () {\n                values = arguments[0] instanceof Array ? arguments[0] : arguments;\n                return this;\n            },\n            every: function (x) {\n                every = x || 1;\n                return this;\n            },\n            after: function (x) {\n                modifier = \"a\";\n                values = [x];\n                return this;\n            },\n            before: function (x) {\n                modifier = \"b\";\n                values = [x];\n                return this;\n            },\n            first: function () {\n                applyMin = 1;\n                return this;\n            },\n            last: function () {\n                applyMax = 1;\n                return this;\n            },\n            time: function () {\n                for (var i = 0, len = values.length; i < len; i++) {\n                    var split = values[i].split(\":\");\n                    if (split.length < 3)\n                        split.push(0);\n                    values[i] = +split[0] * 3600 + +split[1] * 60 + +split[2];\n                }\n                add(\"t\");\n                return this;\n            },\n            second: function () {\n                add(\"s\", 0, 59);\n                return this;\n            },\n            minute: function () {\n                add(\"m\", 0, 59);\n                return this;\n            },\n            hour: function () {\n                add(\"h\", 0, 23);\n                return this;\n            },\n            dayOfMonth: function () {\n                add(\"D\", 1, applyMax ? 0 : 31);\n                return this;\n            },\n            dayOfWeek: function () {\n                add(\"d\", 1, 7);\n                return this;\n            },\n            onWeekend: function () {\n                values = [1, 7];\n                return this.dayOfWeek();\n            },\n            onWeekday: function () {\n                values = [2, 3, 4, 5, 6];\n                return this.dayOfWeek();\n            },\n            dayOfWeekCount: function () {\n                add(\"dc\", 1, applyMax ? 0 : 5);\n                return this;\n            },\n            dayOfYear: function () {\n                add(\"dy\", 1, applyMax ? 0 : 366);\n                return this;\n            },\n            weekOfMonth: function () {\n                add(\"wm\", 1, applyMax ? 0 : 5);\n                return this;\n            },\n            weekOfYear: function () {\n                add(\"wy\", 1, applyMax ? 0 : 53);\n                return this;\n            },\n            month: function () {\n                add(\"M\", 1, 12);\n                return this;\n            },\n            year: function () {\n                add(\"Y\", 1970, 2450);\n                return this;\n            },\n            fullDate: function () {\n                for (var i = 0, len = values.length; i < len; i++) {\n                    values[i] = values[i].getTime();\n                }\n                add(\"fd\");\n                return this;\n            },\n            customModifier: function (id, vals) {\n                var custom = later.modifier[id];\n                if (!custom)\n                    throw new Error(\"Custom modifier \" + id + \" not recognized!\");\n                modifier = id;\n                values = arguments[1] instanceof Array ? arguments[1] : [arguments[1]];\n                return this;\n            },\n            customPeriod: function (id) {\n                var custom = later[id];\n                if (!custom)\n                    throw new Error(\"Custom time period \" + id + \" not recognized!\");\n                add(id, custom.extent(new Date())[0], custom.extent(new Date())[1]);\n                return this;\n            },\n            startingOn: function (start) {\n                return this.between(start, last.m);\n            },\n            between: function (start, end) {\n                cur[last.n] = cur[last.n].splice(0, last.c);\n                every = last.x;\n                add(last.n, start, end);\n                return this;\n            },\n            and: function () {\n                cur = curArr[curArr.push({}) - 1];\n                return this;\n            },\n            except: function () {\n                curArr = exceptions;\n                cur = null;\n                return this;\n            }\n        };\n    };\n    later.parse.text = function (str) {\n        var recur = later.parse.recur, pos = 0, input = \"\", error;\n        var TOKENTYPES = {\n            eof: /^$/,\n            fullDate: /^(\\d\\d\\d\\d-\\d\\d-\\d\\dt\\d\\d:\\d\\d:\\d\\d)\\b/,\n            rank: /^((\\d\\d\\d\\d)|([2-5]?1(st)?|[2-5]?2(nd)?|[2-5]?3(rd)?|(0|[1-5]?[4-9]|[1-5]0|1[1-3])(th)?))\\b/,\n            time: /^((([0]?[1-9]|1[0-2]):[0-5]\\d(\\s)?(am|pm))|(([0]?\\d|1\\d|2[0-3]):[0-5]\\d))\\b/,\n            dayName: /^((sun|mon|tue(s)?|wed(nes)?|thu(r(s)?)?|fri|sat(ur)?)(day)?)\\b/,\n            monthName: /^(jan(uary)?|feb(ruary)?|ma((r(ch)?)?|y)|apr(il)?|ju(ly|ne)|aug(ust)?|oct(ober)?|(sept|nov|dec)(ember)?)\\b/,\n            yearIndex: /^(\\d\\d\\d\\d)\\b/,\n            every: /^every\\b/,\n            after: /^after\\b/,\n            before: /^before\\b/,\n            second: /^(s|sec(ond)?(s)?)\\b/,\n            minute: /^(m|min(ute)?(s)?)\\b/,\n            hour: /^(h|hour(s)?)\\b/,\n            day: /^(day(s)?( of the month)?)\\b/,\n            dayInstance: /^day instance\\b/,\n            dayOfWeek: /^day(s)? of the week\\b/,\n            dayOfYear: /^day(s)? of the year\\b/,\n            weekOfYear: /^week(s)?( of the year)?\\b/,\n            weekOfMonth: /^week(s)? of the month\\b/,\n            weekday: /^weekday\\b/,\n            weekend: /^weekend\\b/,\n            month: /^month(s)?\\b/,\n            year: /^year(s)?\\b/,\n            between: /^between (the)?\\b/,\n            start: /^(start(ing)? (at|on( the)?)?)\\b/,\n            at: /^(at|@)\\b/,\n            and: /^(,|and\\b)/,\n            except: /^(except\\b)/,\n            also: /(also)\\b/,\n            first: /^(first)\\b/,\n            last: /^last\\b/,\n            \"in\": /^in\\b/,\n            of: /^of\\b/,\n            onthe: /^on the\\b/,\n            on: /^on\\b/,\n            through: /(-|^(to|through)\\b)/\n        };\n        var NAMES = {\n            jan: 1,\n            feb: 2,\n            mar: 3,\n            apr: 4,\n            may: 5,\n            jun: 6,\n            jul: 7,\n            aug: 8,\n            sep: 9,\n            oct: 10,\n            nov: 11,\n            dec: 12,\n            sun: 1,\n            mon: 2,\n            tue: 3,\n            wed: 4,\n            thu: 5,\n            fri: 6,\n            sat: 7,\n            \"1st\": 1,\n            fir: 1,\n            \"2nd\": 2,\n            sec: 2,\n            \"3rd\": 3,\n            thi: 3,\n            \"4th\": 4,\n            \"for\": 4\n        };\n        function t(start, end, text, type) {\n            return {\n                startPos: start,\n                endPos: end,\n                text: text,\n                type: type\n            };\n        }\n        function peek(expected) {\n            var scanTokens = expected instanceof Array ? expected : [expected], whiteSpace = /\\s+/, token, curInput, m, scanToken, start, len;\n            scanTokens.push(whiteSpace);\n            start = pos;\n            while (!token || token.type === whiteSpace) {\n                len = -1;\n                curInput = input.substring(start);\n                token = t(start, start, input.split(whiteSpace)[0]);\n                var i, length = scanTokens.length;\n                for (i = 0; i < length; i++) {\n                    scanToken = scanTokens[i];\n                    m = scanToken.exec(curInput);\n                    if (m && m.index === 0 && m[0].length > len) {\n                        len = m[0].length;\n                        token = t(start, start + len, curInput.substring(0, len), scanToken);\n                    }\n                }\n                if (token.type === whiteSpace) {\n                    start = token.endPos;\n                }\n            }\n            return token;\n        }\n        function scan(expectedToken) {\n            var token = peek(expectedToken);\n            pos = token.endPos;\n            return token;\n        }\n        function parseThroughExpr(tokenType) {\n            var start = +parseTokenValue(tokenType), end = checkAndParse(TOKENTYPES.through) ? +parseTokenValue(tokenType) : start, nums = [];\n            for (var i = start; i <= end; i++) {\n                nums.push(i);\n            }\n            return nums;\n        }\n        function parseRanges(tokenType) {\n            var nums = parseThroughExpr(tokenType);\n            while (checkAndParse(TOKENTYPES.and)) {\n                nums.push.apply(nums, parseThroughExpr(tokenType));\n            }\n            // https://github.com/bryntum/support/issues/7233\n            // always sort the provided set of day names, otherwise\n            // the `next` function returns unpredictable values\n            if (tokenType === TOKENTYPES.dayName) {\n                nums.sort((a, b) => a - b)\n            }\n            return nums;\n        }\n        function parseEvery(r) {\n            var num, period, start, end;\n            if (checkAndParse(TOKENTYPES.weekend)) {\n                r.on(NAMES.sun, NAMES.sat).dayOfWeek();\n            }\n            else if (checkAndParse(TOKENTYPES.weekday)) {\n                r.on(NAMES.mon, NAMES.tue, NAMES.wed, NAMES.thu, NAMES.fri).dayOfWeek();\n            }\n            else {\n                num = parseTokenValue(TOKENTYPES.rank);\n                r.every(num);\n                period = parseTimePeriod(r);\n                if (checkAndParse(TOKENTYPES.start)) {\n                    num = parseTokenValue(TOKENTYPES.rank);\n                    r.startingOn(num);\n                    parseToken(period.type);\n                }\n                else if (checkAndParse(TOKENTYPES.between)) {\n                    start = parseTokenValue(TOKENTYPES.rank);\n                    if (checkAndParse(TOKENTYPES.and)) {\n                        end = parseTokenValue(TOKENTYPES.rank);\n                        r.between(start, end);\n                    }\n                }\n            }\n        }\n        function parseOnThe(r) {\n            if (checkAndParse(TOKENTYPES.first)) {\n                r.first();\n            }\n            else if (checkAndParse(TOKENTYPES.last)) {\n                r.last();\n            }\n            else {\n                r.on(parseRanges(TOKENTYPES.rank));\n            }\n            parseTimePeriod(r);\n        }\n        function parseScheduleExpr(str) {\n            pos = 0;\n            input = str;\n            error = -1;\n            var r = recur();\n            while (pos < input.length && error < 0) {\n                var token = parseToken([TOKENTYPES.every, TOKENTYPES.after, TOKENTYPES.before, TOKENTYPES.onthe, TOKENTYPES.on, TOKENTYPES.of, TOKENTYPES[\"in\"], TOKENTYPES.at, TOKENTYPES.and, TOKENTYPES.except, TOKENTYPES.also]);\n                switch (token.type) {\n                    case TOKENTYPES.every:\n                        parseEvery(r);\n                        break;\n                    case TOKENTYPES.after:\n                        if (peek(TOKENTYPES.time).type !== undefined) {\n                            r.after(parseTokenValue(TOKENTYPES.time));\n                            r.time();\n                        }\n                        else if (peek(TOKENTYPES.fullDate).type !== undefined) {\n                            r.after(parseTokenValue(TOKENTYPES.fullDate));\n                            r.fullDate();\n                        }\n                        else {\n                            r.after(parseTokenValue(TOKENTYPES.rank));\n                            parseTimePeriod(r);\n                        }\n                        break;\n                    case TOKENTYPES.before:\n                        if (peek(TOKENTYPES.time).type !== undefined) {\n                            r.before(parseTokenValue(TOKENTYPES.time));\n                            r.time();\n                        }\n                        else if (peek(TOKENTYPES.fullDate).type !== undefined) {\n                            r.before(parseTokenValue(TOKENTYPES.fullDate));\n                            r.fullDate();\n                        }\n                        else {\n                            r.before(parseTokenValue(TOKENTYPES.rank));\n                            parseTimePeriod(r);\n                        }\n                        break;\n                    case TOKENTYPES.onthe:\n                        parseOnThe(r);\n                        break;\n                    case TOKENTYPES.on:\n                        r.on(parseRanges(TOKENTYPES.dayName)).dayOfWeek();\n                        break;\n                    case TOKENTYPES.of:\n                        r.on(parseRanges(TOKENTYPES.monthName)).month();\n                        break;\n                    case TOKENTYPES[\"in\"]:\n                        r.on(parseRanges(TOKENTYPES.yearIndex)).year();\n                        break;\n                    case TOKENTYPES.at:\n                        r.on(parseTokenValue(TOKENTYPES.time)).time();\n                        while (checkAndParse(TOKENTYPES.and)) {\n                            r.on(parseTokenValue(TOKENTYPES.time)).time();\n                        }\n                        break;\n                    case TOKENTYPES.and:\n                        break;\n                    case TOKENTYPES.also:\n                        r.and();\n                        break;\n                    case TOKENTYPES.except:\n                        r.except();\n                        break;\n                    default:\n                        error = pos;\n                }\n            }\n            return {\n                schedules: r.schedules,\n                exceptions: r.exceptions,\n                error: error\n            };\n        }\n        function parseTimePeriod(r) {\n            var timePeriod = parseToken([TOKENTYPES.second, TOKENTYPES.minute, TOKENTYPES.hour, TOKENTYPES.dayOfYear, TOKENTYPES.dayOfWeek, TOKENTYPES.dayInstance, TOKENTYPES.day, TOKENTYPES.month, TOKENTYPES.year, TOKENTYPES.weekOfMonth, TOKENTYPES.weekOfYear]);\n            switch (timePeriod.type) {\n                case TOKENTYPES.second:\n                    r.second();\n                    break;\n                case TOKENTYPES.minute:\n                    r.minute();\n                    break;\n                case TOKENTYPES.hour:\n                    r.hour();\n                    break;\n                case TOKENTYPES.dayOfYear:\n                    r.dayOfYear();\n                    break;\n                case TOKENTYPES.dayOfWeek:\n                    r.dayOfWeek();\n                    break;\n                case TOKENTYPES.dayInstance:\n                    r.dayOfWeekCount();\n                    break;\n                case TOKENTYPES.day:\n                    r.dayOfMonth();\n                    break;\n                case TOKENTYPES.weekOfMonth:\n                    r.weekOfMonth();\n                    break;\n                case TOKENTYPES.weekOfYear:\n                    r.weekOfYear();\n                    break;\n                case TOKENTYPES.month:\n                    r.month();\n                    break;\n                case TOKENTYPES.year:\n                    r.year();\n                    break;\n                default:\n                    error = pos;\n            }\n            return timePeriod;\n        }\n        function checkAndParse(tokenType) {\n            var found = peek(tokenType).type === tokenType;\n            if (found) {\n                scan(tokenType);\n            }\n            return found;\n        }\n        function parseToken(tokenType) {\n            var t = scan(tokenType);\n            if (t.type) {\n                t.text = convertString(t.text, tokenType);\n            }\n            else {\n                error = pos;\n            }\n            return t;\n        }\n        function parseTokenValue(tokenType) {\n            return parseToken(tokenType).text;\n        }\n        function convertString(str, tokenType) {\n            var output = str;\n            switch (tokenType) {\n                case TOKENTYPES.time:\n                    var parts = str.split(/(:|am|pm)/), hour = parts[3] === \"pm\" && parts[0] < 12 ? parseInt(parts[0], 10) + 12 : parts[0], min = parts[2].trim();\n                    output = (hour.length === 1 ? \"0\" : \"\") + hour + \":\" + min;\n                    break;\n                case TOKENTYPES.rank:\n                    output = parseInt(/^\\d+/.exec(str)[0], 10);\n                    break;\n                case TOKENTYPES.monthName:\n                case TOKENTYPES.dayName:\n                    output = NAMES[str.substring(0, 3)];\n                    break;\n                case TOKENTYPES.fullDate:\n                    output = new Date(str.toUpperCase());\n                    break;\n                }\n            return output;\n        }\n        return parseScheduleExpr(str.toLowerCase());\n    };\n    return later;\n})();\n// Set the local time mode for \"later\" library\nlater.date.localTime();\nexport default later;\n", "import { Mixin } from \"../../ChronoGraph/class/BetterMixin.js\";\nimport later from \"../vendor/later/later.js\";\nimport { AbstractPartOfProjectModelMixin } from \"../quark/model/mixin/AbstractPartOfProjectModelMixin.js\";\n/**\n * This is a calendar interval mixin.\n *\n * Can be either a static time interval (if [[startDate]]/[[endDate]] are specified) or recurrent time interval\n * ([[recurrentStartDate]]/[[recurrentEndDate]]).\n *\n * By default it defines a non-working period ([[isWorking]] field has default value `false`),\n * but can also define an explicit working time, for example to override some previous period.\n *\n * You probably don't need to create instances of this mixin directly, instead you pass its configuration object to the [[AbstractCalendarMixin.addInterval]]\n */\nexport class CalendarIntervalMixin extends Mixin([AbstractPartOfProjectModelMixin], (base) => {\n    const superProto = base.prototype;\n    class CalendarIntervalMixin extends base {\n        static get fields() {\n            return [\n                'name',\n                { name: 'startDate', type: 'date' },\n                { name: 'endDate', type: 'date' },\n                'recurrentStartDate',\n                'recurrentEndDate',\n                'cls',\n                'iconCls',\n                { name: 'isWorking', type: 'boolean', defaultValue: false },\n                { name: 'priority', type: 'number' }\n            ];\n        }\n        getCalendar() {\n            return this.stores[0].calendar;\n        }\n        resetPriority() {\n            this.priorityField = null;\n            this.getCalendar().getDepth();\n        }\n        // not just `getPriority` to avoid clash with auto-generated getter in the subclasses\n        getPriorityField() {\n            if (this.priorityField != null)\n                return this.priorityField;\n            // 0 - 10000 interval is reserved for \"unspecified time\" intervals\n            // then 10000 - 10100, 10100-10200, ... etc intervals are for the calendars at depth 0, 1, ... etc\n            let base = 10000 + this.getCalendar().getDepth() * 100;\n            let priority = this.priority;\n            if (priority == null) {\n                // recurrent intervals are considered \"base\" and have lower priority\n                // static intervals are considered special case overrides and have higher priority\n                priority = this.isRecurrent() ? 20 : 30;\n            }\n            // intervals from parent calendars will have lower priority\n            return this.priorityField = base + priority;\n        }\n        /**\n         * Whether this interval is recurrent (both [[recurrentStartDate]] and [[recurrentEndDate]] are present and parsed correctly\n         * by the `later` library)\n         */\n        isRecurrent() {\n            return Boolean(this.recurrentStartDate && this.recurrentEndDate && this.getStartDateSchedule() && this.getEndDateSchedule());\n        }\n        /**\n         * Whether this interval is static - both [[startDate]] and [[endDate]] are present.\n         */\n        isStatic() {\n            return Boolean(this.startDate && this.endDate);\n        }\n        /**\n         * Helper method to parse [[recurrentStartDate]] and [[recurrentEndDate]] field values.\n         * @param {Object|String} schedule Recurrence schedule\n         * @returns {Object} Processed schedule ready to be used by later.schedule() method.\n         * @private\n         */\n        parseDateSchedule(value) {\n            let schedule = value;\n            if (value && value !== Object(value)) {\n                schedule = later.parse.text(value);\n                if (schedule !== Object(schedule) || schedule.error >= 0) {\n                    // can be provided as JSON text\n                    try {\n                        schedule = JSON.parse(value);\n                    }\n                    catch (e) {\n                        return null;\n                    }\n                }\n            }\n            return schedule;\n        }\n        getStartDateSchedule() {\n            if (this.startDateSchedule)\n                return this.startDateSchedule;\n            const schedule = this.parseDateSchedule(this.recurrentStartDate);\n            return this.startDateSchedule = later.schedule(schedule);\n        }\n        getEndDateSchedule() {\n            if (this.endDateSchedule)\n                return this.endDateSchedule;\n            if (this.recurrentEndDate === 'EOD')\n                return 'EOD';\n            const schedule = this.parseDateSchedule(this.recurrentEndDate);\n            return this.endDateSchedule = later.schedule(schedule);\n        }\n    }\n    return CalendarIntervalMixin;\n}) {\n}\n", "import { Mixin } from \"../../ChronoGraph/class/BetterMixin.js\";\nimport { CalendarIntervalMixin } from \"./CalendarIntervalMixin.js\";\nimport { AbstractPartOfProjectStoreMixin } from \"../quark/store/mixin/AbstractPartOfProjectStoreMixin.js\";\n/**\n * This a collection of [[CalendarIntervalMixin]] items. Its a dumb collection though, the \"real\" calendar\n * is a [[AbstractCalendarMixin]] model, which is part of the [[AbstractCalendarManagerStoreMixin]].\n */\nexport class CalendarIntervalStore extends Mixin([AbstractPartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class CalendarIntervalStore extends base {\n        constructor() {\n            super(...arguments);\n            this.disableHasLoadedDataToCommitFlag = true;\n        }\n        static get defaultConfig() {\n            return {\n                modelClass: CalendarIntervalMixin\n            };\n        }\n    }\n    return CalendarIntervalStore;\n}) {\n}\n", "/**\n * The enumeration for the time units\n */\nexport var TimeUnit;\n(function (TimeUnit) {\n    TimeUnit[\"Millisecond\"] = \"millisecond\";\n    TimeUnit[\"Second\"] = \"second\";\n    TimeUnit[\"Minute\"] = \"minute\";\n    TimeUnit[\"Hour\"] = \"hour\";\n    TimeUnit[\"Day\"] = \"day\";\n    TimeUnit[\"Week\"] = \"week\";\n    TimeUnit[\"Month\"] = \"month\";\n    TimeUnit[\"Quarter\"] = \"quarter\";\n    TimeUnit[\"Year\"] = \"year\";\n})(TimeUnit || (TimeUnit = {}));\n/**\n * The enumeration for the project constraint resolution ways.\n */\nexport var ProjectConstraintResolution;\n(function (ProjectConstraintResolution) {\n    /**\n     * Adjust the event dates to honor the constraint.\n     */\n    ProjectConstraintResolution[\"Honor\"] = \"honor\";\n    /**\n     * Ignore the constraint date and keep the event dates.\n     */\n    ProjectConstraintResolution[\"Ignore\"] = \"ignore\";\n    /**\n     * Yield a conflict to pick a resolution based on some application logic\n     * (like UI dialog allowing user to choose a resolution).\n     */\n    ProjectConstraintResolution[\"Conflict\"] = \"conflict\";\n})(ProjectConstraintResolution || (ProjectConstraintResolution = {}));\n/**\n * The enumeration for the supported constraint types\n */\nexport var ConstraintType;\n(function (ConstraintType) {\n    /**\n     * \"Must start on\" constraint.\n     * Restricts an event to start on a [[HasDateConstraintMixin.constraintDate|specified date]].\n     * The constraint cannot be used for a summary event.\n     */\n    ConstraintType[\"MustStartOn\"] = \"muststarton\";\n    /**\n     * \"Must finish on\" constraint.\n     * Restricts an event to finish on a [[HasDateConstraintMixin.constraintDate|specified date]].\n     * The constraint cannot be used for a summary event.\n     */\n    ConstraintType[\"MustFinishOn\"] = \"mustfinishon\";\n    /**\n     * \"Start no earlier than\" constraint.\n     * Restricting an event to start on or after a [[HasDateConstraintMixin.constraintDate|specified date]].\n     */\n    ConstraintType[\"StartNoEarlierThan\"] = \"startnoearlierthan\";\n    /**\n     * \"Start no later than\" constraint.\n     * Restricting an event to start on or before a [[HasDateConstraintMixin.constraintDate|specified date]].\n     *\n     * The constraint cannot be used for a summary task.\n     */\n    ConstraintType[\"StartNoLaterThan\"] = \"startnolaterthan\";\n    /**\n     * \"Finish no earlier than\" constraint.\n     * Restricting an event to finish on or after a [[HasDateConstraintMixin.constraintDate|specified date]].\n     *\n     * The constraint cannot be used for a summary task.\n     */\n    ConstraintType[\"FinishNoEarlierThan\"] = \"finishnoearlierthan\";\n    /**\n     * \"Finish no later than\" constraint.\n     * Restricting an event to finish on or before a [[HasDateConstraintMixin.constraintDate|specified date]].\n     */\n    ConstraintType[\"FinishNoLaterThan\"] = \"finishnolaterthan\";\n    /**\n     * \"As soon as possible\" constraint.\n     * Note this is not a date constraint per se, but a flag, that indicates that a task \"gravitates\" (is \"stickying\")\n     * to the project's start date.\n     */\n    ConstraintType[\"AsSoonAsPossible\"] = \"assoonaspossible\";\n    /**\n     * \"As late as possible\" constraint.\n     * Note this is not a date constraint per se, but a flag, that indicates that a task \"gravitates\" (is \"stickying\")\n     * to the project's end date.\n     */\n    ConstraintType[\"AsLateAsPossible\"] = \"aslateaspossible\";\n})(ConstraintType || (ConstraintType = {}));\n/**\n * The enumeration for the supported scheduling modes\n */\nexport var SchedulingMode;\n(function (SchedulingMode) {\n    SchedulingMode[\"Normal\"] = \"Normal\";\n    SchedulingMode[\"FixedDuration\"] = \"FixedDuration\";\n    SchedulingMode[\"FixedEffort\"] = \"FixedEffort\";\n    SchedulingMode[\"FixedUnits\"] = \"FixedUnits\";\n})(SchedulingMode || (SchedulingMode = {}));\n/**\n * The enumeration for the dependency validation result\n */\nexport var DependencyValidationResult;\n(function (DependencyValidationResult) {\n    /**\n     * Dependency has no errors\n     */\n    DependencyValidationResult[DependencyValidationResult[\"NoError\"] = 0] = \"NoError\";\n    /**\n     * Indicates that the validated dependency builds a cycle\n     */\n    DependencyValidationResult[DependencyValidationResult[\"CyclicDependency\"] = 1] = \"CyclicDependency\";\n    /**\n     * Indicates that a dependency with the same predecessor and successor as validated one's already exists\n     */\n    DependencyValidationResult[DependencyValidationResult[\"DuplicatingDependency\"] = 2] = \"DuplicatingDependency\";\n})(DependencyValidationResult || (DependencyValidationResult = {}));\n/**\n * The enumeration for the supported dependency types\n */\nexport var DependencyType;\n(function (DependencyType) {\n    /**\n     * Start-to-Start (_SS_)\n     *\n     * With this dependency type, the succeeding event is delayed to start not earlier than the preceding event starts.\n     */\n    DependencyType[DependencyType[\"StartToStart\"] = 0] = \"StartToStart\";\n    /**\n     * Start-to-Finish (_SF_)\n     *\n     * The finish of the succeeding event is constrained by the start of the preceding event.\n     * So the successor cannot finish before the predecessor starts.\n     */\n    DependencyType[DependencyType[\"StartToEnd\"] = 1] = \"StartToEnd\";\n    /**\n     * Finish-to-Start (_FS_)\n     *\n     * This type of dependency, restricts the dependent event to not start earlier than the preceding event finishes.\n     */\n    DependencyType[DependencyType[\"EndToStart\"] = 2] = \"EndToStart\";\n    /**\n     * Finish-to-Finish (_FF_)\n     *\n     * The succeeding event cannot finish before the completion of the preceding event.\n     */\n    DependencyType[DependencyType[\"EndToEnd\"] = 3] = \"EndToEnd\";\n})(DependencyType || (DependencyType = {}));\n/**\n * The enumeration for the supported sources of the calendar for the dependency.\n */\nexport var DependenciesCalendar;\n(function (DependenciesCalendar) {\n    DependenciesCalendar[\"Project\"] = \"Project\";\n    DependenciesCalendar[\"FromEvent\"] = \"FromEvent\";\n    DependenciesCalendar[\"ToEvent\"] = \"ToEvent\";\n})(DependenciesCalendar || (DependenciesCalendar = {}));\n/**\n * Engine provides with different project types, the enumeration describes the types currently available\n */\nexport var ProjectType;\n(function (ProjectType) {\n    ProjectType[ProjectType[\"SchedulerBasic\"] = 1] = \"SchedulerBasic\";\n    ProjectType[ProjectType[\"SchedulerPro\"] = 2] = \"SchedulerPro\";\n    ProjectType[ProjectType[\"Gantt\"] = 3] = \"Gantt\";\n})(ProjectType || (ProjectType = {}));\n/**\n * The enumeration for the scheduling direction\n */\nexport var Direction;\n(function (Direction) {\n    /**\n     * Forward (or As Soon As Possible (ASAP)) scheduling.\n     */\n    Direction[\"Forward\"] = \"Forward\";\n    /**\n     * Backward (or As Late As Possible (ALAP)) scheduling.\n     */\n    Direction[\"Backward\"] = \"Backward\";\n    Direction[\"None\"] = \"None\";\n})(Direction || (Direction = {}));\nexport const isEqualEffectiveDirection = (a, b) => {\n    if (a && !b || !a && b)\n        return false;\n    if (!a && !b)\n        return true;\n    return (a.direction === b.direction)\n        && (a.kind === 'own' && b.kind === 'own'\n            || (a.kind === 'enforced' && b.kind === 'enforced' && a.enforcedBy === b.enforcedBy)\n            || (a.kind === 'inherited' && b.kind === 'inherited' && a.inheritedFrom === b.inheritedFrom));\n};\nexport var ConstraintIntervalSide;\n(function (ConstraintIntervalSide) {\n    ConstraintIntervalSide[\"Start\"] = \"Start\";\n    ConstraintIntervalSide[\"End\"] = \"End\";\n})(ConstraintIntervalSide || (ConstraintIntervalSide = {}));\n", "// http://ecma-international.org/ecma-262/5.1/#sec-15.9.1.1\n/**\n * Minimal date representable with native Date class\n */\nexport const MIN_DATE = new Date(-8640000000000000);\n/**\n * Maximal date representable with native Date class\n */\nexport const MAX_DATE = new Date(8640000000000000);\nexport const isDateFinite = (date) => {\n    if (!date)\n        return false;\n    const time = date.getTime();\n    return time !== MIN_DATE.getTime() && time !== MAX_DATE.getTime();\n};\n", "/**\n * The date intervals in the scheduling engine are always inclusive on one end and opened on another.\n * The \"opened\" end is not considered to be a part of the interval.\n *\n * Depending from the scheduling direction (forward/backward) this property may need to be inverted.\n *\n * This enum specifies what edge of the interval is inclusive.\n */\nexport var EdgeInclusion;\n(function (EdgeInclusion) {\n    EdgeInclusion[EdgeInclusion[\"Left\"] = 0] = \"Left\";\n    EdgeInclusion[EdgeInclusion[\"Right\"] = 1] = \"Right\";\n})(EdgeInclusion || (EdgeInclusion = {}));\n", "import DateHelper from \"../../Core/helper/DateHelper.js\";\nimport { TimeUnit } from \"../scheduling/Types.js\";\nimport { MAX_DATE, MIN_DATE } from \"../util/Constants.js\";\nimport { EdgeInclusion } from \"../util/Types.js\";\n/**\n * The enum type for result of [[forEachAvailabilityInterval]].\n */\nexport var CalendarIteratorResult;\n(function (CalendarIteratorResult) {\n    /**\n     * Indicates the iteration has completed by iterating the whole given timespan or has reached the MAX_DATE or MIN_DATE.\n     */\n    CalendarIteratorResult[CalendarIteratorResult[\"FullRangeIterated\"] = 0] = \"FullRangeIterated\";\n    /**\n     * Indicates the iteration has been stopped by returning `false` from the iterator.\n     */\n    CalendarIteratorResult[CalendarIteratorResult[\"StoppedByIterator\"] = 1] = \"StoppedByIterator\";\n    /**\n     * Indicates the iteration has exceeded the `maxRange` option\n     */\n    CalendarIteratorResult[CalendarIteratorResult[\"MaxCacheExtendCyclesReached\"] = 2] = \"MaxCacheExtendCyclesReached\";\n    /**\n     * Indicates the iteration has exceeded the `maxRange` option\n     */\n    CalendarIteratorResult[CalendarIteratorResult[\"MaxRangeReached\"] = 3] = \"MaxRangeReached\";\n})(CalendarIteratorResult || (CalendarIteratorResult = {}));\n/**\n * Calendar cache.\n */\nexport class CalendarCache {\n    constructor(config) {\n        this.cacheFilledStartDate = MAX_DATE;\n        this.cacheFilledEndDate = MIN_DATE;\n        this.intervalsCachingChunkDuration = 30;\n        this.intervalsCachingChunkUnit = TimeUnit.Day;\n        this.maxCacheExtendCycles = 1000;\n        // max range for the iteration - 5 years\n        this.maxRange = 5 * 365 * 24 * 60 * 60 * 1000;\n        config && Object.assign(this, config);\n    }\n    includeWrappingRangeFrom(cache, startDate, endDate) {\n        cache.ensureCacheFilledForInterval(startDate, endDate);\n        this.intervalCache.includeWrappingRange(cache.intervalCache, startDate, endDate);\n    }\n    // after this method, we guarantee, that for every point between `startDate` and `endDate` (_inclusive_)\n    // we'll have a final representation of the cache, that is, we'll be able to get an interval to which this point belongs\n    // _both_ for forward and backward directions\n    ensureCacheFilledForInterval(startDate, endDate) {\n        const cacheFilledStartDateN = this.cacheFilledStartDate.getTime();\n        const cacheFilledEndDateN = this.cacheFilledEndDate.getTime();\n        if (cacheFilledStartDateN !== MAX_DATE.getTime()) {\n            const startDateN = startDate.getTime();\n            const endDateN = endDate.getTime();\n            if (cacheFilledStartDateN <= startDateN && endDateN <= cacheFilledEndDateN)\n                return;\n            // asked to cache an interval which is to the left from the cached area - extend to the right\n            if (endDateN <= cacheFilledStartDateN) {\n                endDate = new Date(cacheFilledStartDateN - 1);\n            }\n            else if (startDateN >= cacheFilledEndDateN) {\n                startDate = new Date(cacheFilledEndDateN);\n            }\n            else if (cacheFilledStartDateN <= startDateN && startDateN <= cacheFilledEndDateN) {\n                startDate = new Date(cacheFilledEndDateN + 1);\n            }\n            else if (cacheFilledStartDateN <= endDateN && endDateN <= cacheFilledEndDateN) {\n                endDate = new Date(cacheFilledStartDateN - 1);\n            }\n            else {\n                this.ensureCacheFilledForInterval(startDate, new Date(cacheFilledStartDateN - 1));\n                this.ensureCacheFilledForInterval(new Date(cacheFilledEndDateN + 1), endDate);\n                return;\n            }\n        }\n        if (cacheFilledStartDateN === MAX_DATE.getTime() || startDate.getTime() < cacheFilledEndDateN) {\n            this.cacheFilledStartDate = startDate;\n        }\n        if (cacheFilledEndDateN === MIN_DATE.getTime() || cacheFilledEndDateN < endDate.getTime()) {\n            this.cacheFilledEndDate = endDate;\n        }\n        this.fillCache(startDate, endDate);\n    }\n    fillCache(_1 /* startDate */, _2 /* endDate */) {\n        throw new Error(\"Abstract method\");\n    }\n    clear() {\n        this.cacheFilledStartDate = MAX_DATE;\n        this.cacheFilledEndDate = MIN_DATE;\n        this.intervalCache.clear();\n    }\n    /**\n     * The core iterator method of the calendar cache.\n     *\n     * @param options The options for iterator. Should contain at least one of the `startDate`/`endDate` properties\n     * which indicates what timespan to examine for availability intervals. If one of boundaries is not provided\n     * iterator function should return `false` at some point, to avoid infinite loops.\n     *\n     * Another recognized option is `isForward`, which indicates the direction in which to iterate through the timespan.\n     *\n     * Another recognized option is `maxRange`, which indicates the maximum timespan for this iterator (in milliseconds). When iterator\n     * exceeds this timespan, the iteration is stopped and [[CalendarIteratorResult.MaxRangeReached]] value is returned.\n     * Default value is 5 years.\n     *\n     * @param func The iterator function to call. It will be called for every distinct set of availability intervals, found\n     * in the given timespan. All the intervals, which are \"active\" for current interval are collected in the 3rd argument\n     * for this function. If iterator returns `false` (checked with `===`) the iteration stops.\n     *\n     * @param scope The scope (`this` value) to execute the iterator in.\n     */\n    forEachAvailabilityInterval(options, func, scope) {\n        scope = scope || this;\n        const startDate = options.startDate;\n        const endDate = options.endDate;\n        const startDateN = startDate && startDate.getTime();\n        const endDateN = endDate && endDate.getTime();\n        const maxRange = options.maxRange ?? this.maxRange;\n        // `isForward = true` by default\n        const isForward = options.isForward !== false;\n        if (isForward ? !startDate : !endDate) {\n            throw new Error(\"At least `startDate` or `endDate` is required, depending from the `isForward` option\");\n        }\n        const intervalCache = this.intervalCache;\n        let cacheCursorDate = isForward ? startDate : endDate;\n        let cursorDate = isForward ? startDate : endDate;\n        const rangeStart = cursorDate.getTime();\n        // this is generally an endless loop, but we artificially limit it to `maxCacheExtendCycles` iterations\n        // to avoid freezing in unforeseen edge cases\n        for (let cycle = 1; cycle < this.maxCacheExtendCycles; cycle++) {\n            if (isForward) {\n                this.ensureCacheFilledForInterval(cacheCursorDate, endDate || DateHelper.add(cacheCursorDate, this.intervalsCachingChunkDuration, this.intervalsCachingChunkUnit));\n            }\n            else {\n                this.ensureCacheFilledForInterval(startDate || DateHelper.add(cacheCursorDate, -this.intervalsCachingChunkDuration, this.intervalsCachingChunkUnit), cacheCursorDate);\n            }\n            let interval = intervalCache.getIntervalOf(cursorDate, isForward ? EdgeInclusion.Left : EdgeInclusion.Right);\n            while (interval) {\n                const intervalStartDate = interval.startDate;\n                const intervalEndDate = interval.endDate;\n                // out of requested range - all done\n                if ((isForward && endDateN && intervalStartDate.getTime() >= endDateN)\n                    ||\n                        (!isForward && startDateN && intervalEndDate.getTime() <= startDateN)) {\n                    return CalendarIteratorResult.FullRangeIterated;\n                }\n                if ((isForward && intervalStartDate.getTime() - rangeStart >= maxRange)\n                    ||\n                        (!isForward && rangeStart - intervalEndDate.getTime() >= maxRange)) {\n                    return CalendarIteratorResult.MaxRangeReached;\n                }\n                // we are out of cached area, need to extend the cache,\n                // using `>=, <=` here, because, as an edge case the cache can be filled exactly up to that interval\n                // and following interval will be infinity, which will trigger premature loop exit\n                // caused by the https://github.com/bryntum/support/issues/6406\n                if ((isForward && intervalStartDate.getTime() >= this.cacheFilledEndDate.getTime())\n                    ||\n                        (!isForward && intervalEndDate.getTime() <= this.cacheFilledStartDate.getTime())) {\n                    break;\n                }\n                // save the last processed point, from which we should start after cache will be extended\n                cursorDate = isForward ? intervalEndDate : intervalStartDate;\n                // adjust to start / end date limits in iterator\n                const countFrom = startDateN && intervalStartDate.getTime() < startDateN ? startDate : intervalStartDate;\n                const countTill = endDateN && intervalEndDate.getTime() > endDateN ? endDate : intervalEndDate;\n                if (func.call(scope, countFrom, countTill, interval.cacheInterval) === false) {\n                    // indicates premature exit if iterator returns `false`\n                    return CalendarIteratorResult.StoppedByIterator;\n                }\n                interval = isForward ? intervalCache.getNextInterval(interval) : intervalCache.getPrevInterval(interval);\n            }\n            if (isForward && cursorDate.getTime() === MAX_DATE.getTime() || !isForward && cursorDate.getTime() === MIN_DATE.getTime()) {\n                return CalendarIteratorResult.FullRangeIterated;\n            }\n            cacheCursorDate = isForward ? this.cacheFilledEndDate : this.cacheFilledStartDate;\n        }\n        return CalendarIteratorResult.MaxCacheExtendCyclesReached;\n    }\n}\n", "export const stripDuplicates = (array) => Array.from(new Set(array));\n", "import { stripDuplicates } from \"../util/StripDuplicates.js\";\n/**\n * A class, that represent a cached set of availability intervals. One can use the [[getIsWorking]] method\n * to determine if this set intervals represents working time or non-working.\n */\nexport class CalendarCacheInterval {\n    constructor(config) {\n        this.intervals = [];\n        config && Object.assign(this, config);\n        if (!this.calendar)\n            throw new Error(\"Required attribute `calendar` is missing\");\n    }\n    includeInterval(interval) {\n        if (this.intervals.indexOf(interval) == -1) {\n            const copy = this.intervals.slice();\n            copy.push(interval);\n            return new CalendarCacheInterval({ intervals: copy, calendar: this.calendar });\n        }\n        else\n            return this;\n    }\n    combineWith(interval) {\n        return new CalendarCacheInterval({ intervals: this.intervals.concat(interval.intervals), calendar: this.calendar });\n    }\n    /**\n     * Returns the working status of this intervals set. It is determined as a working status\n     * of the most prioritized interval (intervals are prioritized from child to parent)\n     */\n    getIsWorking() {\n        if (this.isWorking != null)\n            return this.isWorking;\n        const intervals = this.intervals = this.normalizeIntervals(this.intervals);\n        // return the value of the interval with the highest priority\n        return this.isWorking = intervals[0].isWorking;\n    }\n    normalizeIntervals(intervals) {\n        const filtered = stripDuplicates(intervals);\n        // sort in decreasing order\n        filtered.sort((interval1, interval2) => interval2.getPriorityField() - interval1.getPriorityField());\n        return filtered;\n    }\n}\n", "// Generic binary search\nexport const binarySearch = (value, array, comparator = (a, b) => a - b) => {\n    let left = 0;\n    let right = array.length;\n    while (left < right) {\n        // | 0 to make it integer, faster according to: https://jsperf.com/or-vs-floor/2\n        const mid = (left + right) / 2 | 0;\n        const compare = comparator(value, array[mid]);\n        if (compare === 0)\n            return { found: true, index: mid };\n        else if (compare < 0)\n            right = mid;\n        else\n            left = mid + 1;\n    }\n    return { found: false, index: right };\n};\n", "import { binarySearch } from \"../util/BinarySearch.js\";\nexport var IndexPosition;\n(function (IndexPosition) {\n    IndexPosition[IndexPosition[\"Exact\"] = 0] = \"Exact\";\n    IndexPosition[IndexPosition[\"Next\"] = 1] = \"Next\";\n})(IndexPosition || (IndexPosition = {}));\nexport class SortedMap {\n    constructor(comparator) {\n        this.keys = [];\n        this.values = [];\n        this.comparator = comparator || ((a, b) => a - b);\n    }\n    set(key, value) {\n        const search = binarySearch(key, this.keys, this.comparator);\n        if (search.found) {\n            this.values[search.index] = value;\n        }\n        else {\n            this.keys.splice(search.index, 0, key);\n            this.values.splice(search.index, 0, value);\n        }\n        return search.index;\n    }\n    // you need to know what you are doing when using this method\n    insertAt(index, key, value) {\n        this.keys.splice(index, 0, key);\n        this.values.splice(index, 0, value);\n    }\n    setValueAt(index, value) {\n        this.values[index] = value;\n    }\n    get(key) {\n        const search = binarySearch(key, this.keys, this.comparator);\n        return search.found ? this.values[search.index] : undefined;\n    }\n    getEntryAt(index) {\n        return index < this.keys.length ? { key: this.keys[index], value: this.values[index] } : undefined;\n    }\n    getKeyAt(index) {\n        return this.keys[index];\n    }\n    getValueAt(index) {\n        return this.values[index];\n    }\n    delete(key) {\n        const search = binarySearch(key, this.keys, this.comparator);\n        if (search.found)\n            this.deleteAt(search.index);\n    }\n    size() {\n        return this.keys.length;\n    }\n    deleteAt(index) {\n        this.keys.splice(index, 1);\n        this.values.splice(index, 1);\n    }\n    indexOfKey(key) {\n        const search = binarySearch(key, this.keys, this.comparator);\n        return {\n            found: search.found ? IndexPosition.Exact : IndexPosition.Next,\n            index: search.index\n        };\n    }\n    map(func) {\n        const keys = this.keys;\n        const values = this.values;\n        const result = [];\n        for (let i = 0; i < keys.length; i++)\n            result.push(func(values[i], keys[i], i));\n        return result;\n    }\n    getAllEntries() {\n        return this.map((value, key) => { return { value, key }; });\n    }\n    clear() {\n        this.keys.length = 0;\n        this.values.length = 0;\n    }\n}\n", "import { MAX_DATE, MIN_DATE } from \"../util/Constants.js\";\nimport { EdgeInclusion } from \"../util/Types.js\";\nimport { IndexPosition, SortedMap } from \"./SortedMap.js\";\nexport class IntervalCache {\n    constructor(config) {\n        this.points = new SortedMap((a, b) => a.getTime() - b.getTime());\n        this.leftInfinityKey = MIN_DATE;\n        this.rightInfinityKey = MAX_DATE;\n        Object.assign(this, config);\n        if (this.emptyInterval === undefined || !this.combineIntervalsFn)\n            throw new Error(\"All of `emptyPoint`, `combineIntervalsFn` are required\");\n        this.points.set(this.leftInfinityKey, this.emptyInterval);\n    }\n    size() {\n        return this.points.size();\n    }\n    indexOf(date) {\n        return this.points.indexOfKey(date);\n    }\n    getDateAt(index) {\n        return this.points.getKeyAt(index);\n    }\n    getPointAt(index) {\n        return this.points.getValueAt(index);\n    }\n    getIntervalOf(date, edgeInclusion = EdgeInclusion.Left) {\n        // the `index` here is guaranteed to be > 0, because at index 0 there's a `emptyPoint`\n        let { found, index } = this.indexOf(date);\n        let startDateIndex;\n        if (edgeInclusion === EdgeInclusion.Left) {\n            startDateIndex = found === IndexPosition.Exact ? index : index - 1;\n        }\n        else {\n            startDateIndex = index - 1;\n        }\n        return this.getIntervalWithStartDateIndex(startDateIndex);\n    }\n    getPrevInterval(interval) {\n        if (interval.startDateIndex === 0)\n            return null;\n        return this.getIntervalWithStartDateIndex(interval.startDateIndex - 1);\n    }\n    getNextInterval(interval) {\n        if (interval.startDateIndex >= this.size() - 1)\n            return null;\n        return this.getIntervalWithStartDateIndex(interval.startDateIndex + 1);\n    }\n    getIntervalWithStartDateIndex(startDateIndex) {\n        return {\n            startDateIndex: startDateIndex,\n            startDate: this.getDateAt(startDateIndex),\n            endDate: startDateIndex + 1 < this.size() ? this.getDateAt(startDateIndex + 1) : this.rightInfinityKey,\n            cacheInterval: this.getPointAt(startDateIndex)\n        };\n    }\n    addInterval(startDate, endDate, extendInterval) {\n        const points = this.points;\n        // there is always \"leftInfinityKey\" empty point, so `index >= 0`\n        const { found, index } = points.indexOfKey(startDate);\n        let curIndex;\n        let lastUpdatedPoint;\n        if (found == IndexPosition.Exact) {\n            const inclusion = extendInterval(lastUpdatedPoint = points.getValueAt(index));\n            points.setValueAt(index, inclusion);\n            curIndex = index + 1;\n        }\n        else {\n            const inclusion = extendInterval(lastUpdatedPoint = points.getValueAt(index - 1));\n            points.insertAt(index, startDate, inclusion);\n            curIndex = index + 1;\n        }\n        while (curIndex < points.size()) {\n            const curDate = points.getKeyAt(curIndex);\n            if (curDate.getTime() >= endDate.getTime())\n                break;\n            const inclusion = extendInterval(lastUpdatedPoint = points.getValueAt(curIndex));\n            points.setValueAt(curIndex, inclusion);\n            curIndex++;\n        }\n        if (curIndex === points.size()) {\n            points.insertAt(points.size(), endDate, this.emptyInterval);\n        }\n        else {\n            const curDate = points.getKeyAt(curIndex);\n            if (curDate.getTime() === endDate.getTime()) {\n                // we advanced till some point, which matches `endDate` config\n                // this point will setup a new label, no need to add an explicit end date point,\n                // we are done, do nothing\n            }\n            else {\n                points.insertAt(curIndex, endDate, lastUpdatedPoint);\n            }\n        }\n    }\n    includeWrappingRange(intervalCache, startDate, endDate) {\n        let interval = intervalCache.getIntervalOf(startDate);\n        while (interval) {\n            this.addInterval(interval.startDate, interval.endDate, existingInterval => this.combineIntervalsFn(existingInterval, interval.cacheInterval));\n            if (interval.endDate.getTime() > endDate.getTime())\n                break;\n            interval = intervalCache.getNextInterval(interval);\n        }\n    }\n    getSummary() {\n        return this.points.map((label, date) => { return { label, date }; });\n    }\n    clear() {\n        this.points.clear();\n        this.points.set(this.leftInfinityKey, this.emptyInterval);\n    }\n}\n", "import later from \"../vendor/later/later.js\";\nimport { CalendarCache } from \"./CalendarCache.js\";\nimport { CalendarCacheInterval } from \"./CalendarCacheInterval.js\";\nimport { IntervalCache } from \"./IntervalCache.js\";\nimport DateHelper from \"../../Core/helper/DateHelper.js\";\nimport TimeZoneHelper from \"../../Core/helper/TimeZoneHelper.js\";\nexport class CalendarCacheSingle extends CalendarCache {\n    constructor(config) {\n        super(config);\n        this.staticIntervalsCached = false;\n        if (!this.unspecifiedTimeInterval)\n            throw new Error(\"Required attribute `unspecifiedTimeInterval` is missing\");\n        this.intervalCache = new IntervalCache({\n            emptyInterval: new CalendarCacheInterval({\n                intervals: [this.unspecifiedTimeInterval],\n                calendar: this.calendar\n            }),\n            combineIntervalsFn: (interval1, interval2) => {\n                return interval1.combineWith(interval2);\n            }\n        });\n    }\n    fillCache(startDate, endDate) {\n        if (!this.staticIntervalsCached) {\n            this.cacheStaticIntervals();\n            this.staticIntervalsCached = true;\n        }\n        if (this.parentCache)\n            this.includeWrappingRangeFrom(this.parentCache, startDate, endDate);\n        const startDateN = startDate.getTime();\n        const endDateN = endDate.getTime();\n        const timeZone = this.calendar.ignoreTimeZone ? null : this.calendar.project?.timeZone;\n        if (startDateN > endDateN)\n            throw new Error(\"Invalid cache fill interval\");\n        const NEVER = later.NEVER;\n        this.forEachRecurrentInterval(interval => {\n            const startSchedule = interval.getStartDateSchedule();\n            const endSchedule = interval.getEndDateSchedule();\n            let wrappingStartDate = startSchedule.prev(1, startDate);\n            let wrappingEndDate;\n            if (endSchedule === 'EOD') {\n                const nextEndDate = startSchedule.next(1, endDate);\n                if (nextEndDate !== NEVER) {\n                    wrappingEndDate = DateHelper.getStartOfNextDay(nextEndDate, true);\n                }\n                else {\n                    wrappingEndDate = NEVER;\n                }\n            }\n            else {\n                wrappingEndDate = endSchedule.next(1, endDate);\n            }\n            // if the `startDate` is an occurrence in the interval's schedule, we need to advance one point prior\n            // this is to provide the backward-scheduling information for the `startDate` point\n            if (wrappingStartDate !== NEVER && wrappingStartDate.getTime() === startDateN) {\n                const wrappingStartDates = startSchedule.prev(2, startDate);\n                if (wrappingStartDates !== NEVER && wrappingStartDates.length === 2)\n                    wrappingStartDate = wrappingStartDates[1];\n            }\n            if (wrappingEndDate !== NEVER && wrappingEndDate.getTime() === endDateN) {\n                const wrappingEndDates = endSchedule.next(2, endDate);\n                if (wrappingEndDates !== NEVER && wrappingEndDates.length === 2)\n                    wrappingEndDate = wrappingEndDates[1];\n            }\n            const startDates = startSchedule.next(Infinity, wrappingStartDate !== NEVER ? wrappingStartDate : startDate, wrappingEndDate !== NEVER ? new Date(wrappingEndDate.getTime() - 1) : endDate);\n            // schedule is empty for the interval of interest, do nothing\n            if (startDates === NEVER)\n                return;\n            // at this point `startDates` is a non-empty array\n            const endDates = endSchedule === 'EOD'\n                ? startDates.map(date => DateHelper.getStartOfNextDay(date, true))\n                : endSchedule.next(Infinity, new Date(startDates[0].getTime() + 1), wrappingEndDate !== NEVER ? wrappingEndDate : endDate);\n            if (endDates === NEVER)\n                return;\n            if (endDates.length > startDates.length) {\n                // safe to ignore \"extra\" end dates\n                endDates.length = startDates.length;\n            }\n            else if (endDates.length < startDates.length) {\n                // monkey patch\n                startDates.length = endDates.length;\n                // throw new Error(\"Recurrent interval inconsistency: \" + interval + \", caching startDate: \" + startDate + \", caching endDate: \" + endDate)\n            }\n            startDates.forEach((startDate, index) => {\n                let recStartDate = startDate;\n                let recEndDate = endDates[index];\n                // Adjust calendar intervals when changing time zone\n                if (timeZone != null) {\n                    recStartDate = TimeZoneHelper.toTimeZone(recStartDate, timeZone);\n                    recEndDate = TimeZoneHelper.toTimeZone(recEndDate, timeZone);\n                }\n                // if (recStartDate.getTime() > recEndDate.getTime())\n                //     throw new Error(\"Recurrent interval inconsistency: \" + interval + \", startDate: \" + startDate + \", endDate: \" + endDates[ index ])\n                this.intervalCache.addInterval(recStartDate, recEndDate, existingCacheInterval => existingCacheInterval.includeInterval(interval));\n            });\n        });\n    }\n    clear() {\n        this.staticIntervalsCached = false;\n        super.clear();\n    }\n    cacheStaticIntervals() {\n        this.forEachStaticInterval(interval => {\n            const timeZone = this.calendar.project?.timeZone;\n            let { startDate, endDate } = interval;\n            // Adjust calendar intervals when changing time zone\n            if (timeZone != null) {\n                startDate = TimeZoneHelper.toTimeZone(startDate, timeZone);\n                endDate = TimeZoneHelper.toTimeZone(endDate, timeZone);\n            }\n            this.intervalCache.addInterval(startDate, endDate, existingCacheInterval => existingCacheInterval.includeInterval(interval));\n        });\n    }\n    forEachStaticInterval(func) {\n        this.intervalStore.forEach((interval) => {\n            if (interval.isStatic())\n                func(interval);\n        });\n    }\n    forEachRecurrentInterval(func) {\n        this.intervalStore.forEach((interval) => {\n            if (interval.isRecurrent())\n                func(interval);\n        });\n    }\n}\n", "import { Mixin } from \"../../ChronoGraph/class/BetterMixin.js\";\nimport { CalendarIntervalMixin } from \"./CalendarIntervalMixin.js\";\n// Calendar interval model denoting unspecified interval\nexport class UnspecifiedTimeIntervalModel extends Mixin([CalendarIntervalMixin], (base) => {\n    const superProto = base.prototype;\n    class UnspecifiedTimeIntervalModel extends base {\n        getCalendar() {\n            return this.calendar;\n        }\n        // NOTE: See parent class implementation for further comments\n        getPriorityField() {\n            if (this.priorityField != null)\n                return this.priorityField;\n            return this.priorityField = this.getCalendar().getDepth();\n        }\n    }\n    return UnspecifiedTimeIntervalModel;\n}) {\n}\n", "import { Mixin } from \"../../../ChronoGraph/class/BetterMixin.js\";\nimport { CalendarIntervalStore } from \"../../calendar/CalendarIntervalStore.js\";\nimport { CalendarIteratorResult } from \"../../calendar/CalendarCache.js\";\nimport { TimeUnit } from \"../../scheduling/Types.js\";\nimport { CalendarCacheSingle } from \"../../calendar/CalendarCacheSingle.js\";\nimport { UnspecifiedTimeIntervalModel } from \"../../calendar/UnspecifiedTimeIntervalModel.js\";\nimport DateHelper from \"../../../Core/helper/DateHelper.js\";\nimport { AbstractPartOfProjectModelMixin } from \"./mixin/AbstractPartOfProjectModelMixin.js\";\n/**\n * Calendar for project scheduling, mixed by CoreCalendarMixin and BaseCalendarMixin. It is used to mark certain time\n * intervals as \"non-working\" and ignore them during scheduling.\n *\n * The calendar consists from several [[CalendarIntervalMixin|intervals]]. The intervals can be either static or recurrent.\n */\nexport class AbstractCalendarMixin extends Mixin([AbstractPartOfProjectModelMixin], (base) => {\n    const superProto = base.prototype;\n    class CalendarMixin extends base {\n        constructor() {\n            super(...arguments);\n            this.version = 1;\n        }\n        static get fields() {\n            return [\n                { name: 'version', type: 'number' },\n                'name',\n                { name: 'unspecifiedTimeIsWorking', type: 'boolean', defaultValue: true },\n                { name: 'intervals', type: 'store', subStore: true },\n                'cls',\n                'iconCls'\n            ];\n        }\n        get intervalStoreClass() {\n            return CalendarIntervalStore;\n        }\n        get intervalStore() {\n            // @ts-ignore\n            return this.meta.intervalsStore;\n        }\n        // Not a typo, name is generated from the fields name = intervals\n        initIntervalsStore(config) {\n            config.storeClass = this.intervalStoreClass;\n            // @ts-ignore\n            config.modelClass = this.getDefaultConfiguration().calendarIntervalModelClass || this.intervalStoreClass.defaultConfig.modelClass;\n            config.calendar = this;\n        }\n        // this method is called when the new value for the `intervals` field of this model is assigned\n        // the type of the `intervals` field is \"store\" that's why this magic\n        processIntervalsStoreData(intervals) {\n            this.bumpVersion();\n        }\n        isDefault() {\n            const project = this.getProject();\n            if (project) {\n                return this === project.defaultCalendar;\n            }\n            return false;\n        }\n        getDepth() {\n            return this.childLevel + 1;\n        }\n        /**\n         * The core iterator method of the calendar.\n         *\n         * @param options The options for iterator. Should contain at least one of the `startDate`/`endDate` properties\n         * which indicates what timespan to examine for availability intervals. If one of boundaries is not provided\n         * iterator function should return `false` at some point, to avoid infinite loops.\n         *\n         * Another recognized option is `isForward`, which indicates the direction in which to iterate through the timespan.\n         *\n         * @param func The iterator function to call. It will be called for every distinct set of availability intervals, found\n         * in the given timespan. All the intervals, which are \"active\" for current interval are collected in the 3rd argument\n         * for this function - [[CalendarCacheInterval|calendarCacheInterval]]. If iterator returns `false` (checked with `===`)\n         * the iteration stops.\n         *\n         * @param scope The scope (`this` value) to execute the iterator in.\n         */\n        forEachAvailabilityInterval(options, func, scope) {\n            const maxRange = options.maxRange ?? this.getProject()?.maxCalendarRange;\n            if (maxRange) {\n                options = { ...options, maxRange };\n            }\n            return this.calendarCache.forEachAvailabilityInterval(options, func, scope);\n        }\n        /**\n         * This method starts at the given `date` and moves forward or backward in time, depending on `isForward`.\n         * It stops moving as soon as it accumulates the `durationMs` milliseconds of working time and returns the date\n         * at which it has stopped and remaining duration - the [[AccumulateWorkingTimeResult]] object.\n         *\n         * Normally, the remaining duration will be 0, indicating the full `durationMs` has been accumulated.\n         * However, sometimes, calendar might not be able to accumulate enough working time due to various reasons,\n         * like if it does not contain enough working time - this case will be indicated with remaining duration bigger than 0.\n         *\n         * @param date\n         * @param durationMs\n         * @param isForward\n         */\n        accumulateWorkingTime(date, durationMs, isForward) {\n            // if duration is 0 - return the same date\n            if (durationMs === 0)\n                return { finalDate: new Date(date), remainingDurationInMs: 0 };\n            if (isNaN(durationMs))\n                throw new Error(\"Invalid duration\");\n            let finalDate = date;\n            const adjustDurationToDST = this.getProject()?.adjustDurationToDST ?? this.adjustDurationToDST ?? false;\n            this.forEachAvailabilityInterval(isForward ? { startDate: date, isForward: true } : { endDate: date, isForward: false }, (intervalStartDate, intervalEndDate, calendarCacheInterval) => {\n                let result = true;\n                if (calendarCacheInterval.getIsWorking()) {\n                    let diff = intervalEndDate.getTime() - intervalStartDate.getTime();\n                    if (durationMs <= diff) {\n                        if (adjustDurationToDST) {\n                            const dstDiff = isForward\n                                ? intervalStartDate.getTimezoneOffset() - (new Date(intervalStartDate.getTime() + durationMs)).getTimezoneOffset()\n                                : (new Date(intervalEndDate.getTime() - durationMs)).getTimezoneOffset() - intervalEndDate.getTimezoneOffset();\n                            durationMs -= dstDiff * 60 * 1000;\n                        }\n                        finalDate = isForward\n                            ? new Date(intervalStartDate.getTime() + durationMs)\n                            : new Date(intervalEndDate.getTime() - durationMs);\n                        durationMs = 0;\n                        result = false;\n                    }\n                    else {\n                        if (adjustDurationToDST) {\n                            const dstDiff = intervalStartDate.getTimezoneOffset() - intervalEndDate.getTimezoneOffset();\n                            diff += dstDiff * 60 * 1000;\n                        }\n                        finalDate = isForward ? intervalEndDate : intervalStartDate;\n                        durationMs -= diff;\n                    }\n                }\n                return result;\n            });\n            return { finalDate: new Date(finalDate), remainingDurationInMs: durationMs };\n        }\n        /**\n         * Calculate the working time duration between the 2 dates, in milliseconds.\n         *\n         * @param {Date} startDate\n         * @param {Date} endDate\n         * @param {Boolean} [allowNegative] Method ignores negative values by default, returning 0. Set to true to get\n         * negative duration.\n         */\n        calculateDurationMs(startDate, endDate, allowNegative = false) {\n            let duration = 0;\n            const multiplier = startDate.getTime() <= endDate.getTime() || !allowNegative ? 1 : -1;\n            if (multiplier < 0) {\n                [startDate, endDate] = [endDate, startDate];\n            }\n            const adjustDurationToDST = this.getProject()?.adjustDurationToDST ?? this.adjustDurationToDST ?? false;\n            this.forEachAvailabilityInterval({ startDate: startDate, endDate: endDate }, (intervalStartDate, intervalEndDate, calendarCacheInterval) => {\n                if (calendarCacheInterval.getIsWorking()) {\n                    duration += intervalEndDate.getTime() - intervalStartDate.getTime();\n                    if (adjustDurationToDST) {\n                        const dstDiff = intervalStartDate.getTimezoneOffset() - intervalEndDate.getTimezoneOffset();\n                        duration += dstDiff * 60 * 1000;\n                    }\n                }\n            });\n            return duration * multiplier;\n        }\n        /**\n         * Calculate the end date of the time interval which starts at `startDate` and has `durationMs` working time duration\n         * (in milliseconds).\n         *\n         * @param startDate\n         * @param durationMs\n         */\n        calculateEndDate(startDate, durationMs) {\n            // the method goes forward by default ..unless a negative duration provided\n            const isForward = durationMs >= 0;\n            const res = this.accumulateWorkingTime(startDate, Math.abs(durationMs), isForward);\n            return res.remainingDurationInMs === 0 ? res.finalDate : null;\n        }\n        /**\n         * Calculate the start date of the time interval which ends at `endDate` and has `durationMs` working time duration\n         * (in milliseconds).\n         *\n         * @param endDate\n         * @param durationMs\n         */\n        calculateStartDate(endDate, durationMs) {\n            // the method goes backwards by default ..unless a negative duration provided\n            const isForward = durationMs <= 0;\n            const res = this.accumulateWorkingTime(endDate, Math.abs(durationMs), isForward);\n            return res.remainingDurationInMs === 0 ? res.finalDate : null;\n        }\n        /**\n         * Returns the earliest point at which a working period of time starts, following the given date.\n         * Can be the date itself, if it comes on the working time.\n         *\n         * @param date The date after which to skip the non-working time.\n         * @param isForward Whether the \"following\" means forward in time or backward.\n         */\n        skipNonWorkingTime(date, isForward = true) {\n            let workingDate;\n            const res = this.forEachAvailabilityInterval(isForward ? { startDate: date, isForward: true } : { endDate: date, isForward: false }, (intervalStartDate, intervalEndDate, calendarCacheInterval) => {\n                if (calendarCacheInterval.getIsWorking()) {\n                    workingDate = isForward ? intervalStartDate : intervalEndDate;\n                    return false;\n                }\n            });\n            if (res === CalendarIteratorResult.MaxRangeReached || res === CalendarIteratorResult.FullRangeIterated)\n                return 'empty_calendar';\n            return workingDate ? new Date(workingDate) : new Date(date);\n        }\n        /**\n         * This method adds a single [[CalendarIntervalMixin]] to the internal collection of the calendar\n         */\n        addInterval(interval) {\n            return this.addIntervals([interval]);\n        }\n        /**\n         * This method adds an array of [[CalendarIntervalMixin]] to the internal collection of the calendar\n         */\n        addIntervals(intervals) {\n            this.bumpVersion();\n            return this.intervalStore.add(intervals);\n        }\n        /**\n         * This method removes a single [[CalendarIntervalMixin]] from the internal collection of the calendar\n         */\n        removeInterval(interval) {\n            return this.removeIntervals([interval]);\n        }\n        /**\n         * This method removes an array of [[CalendarIntervalMixin]] from the internal collection of the calendar\n         */\n        removeIntervals(intervals) {\n            this.bumpVersion();\n            return this.intervalStore.remove(intervals);\n        }\n        /**\n         * This method removes all intervals from the internal collection of the calendar\n         */\n        clearIntervals(silent) {\n            if (!silent) {\n                this.bumpVersion();\n            }\n            return this.intervalStore.removeAll(silent);\n        }\n        bumpVersion() {\n            this.clearCache();\n            this.version++;\n        }\n        get calendarCache() {\n            if (this.$calendarCache !== undefined)\n                return this.$calendarCache;\n            const unspecifiedTimeInterval = new UnspecifiedTimeIntervalModel({\n                isWorking: this.unspecifiedTimeIsWorking\n            });\n            unspecifiedTimeInterval.calendar = this;\n            return this.$calendarCache = new CalendarCacheSingle({\n                calendar: this,\n                unspecifiedTimeInterval: unspecifiedTimeInterval,\n                intervalStore: this.intervalStore,\n                parentCache: this.parent && !this.parent.isRoot ? this.parent.calendarCache : null\n            });\n        }\n        clearCache() {\n            // not strictly needed, we just help garbage collector\n            this.$calendarCache && this.$calendarCache.clear();\n            this.$calendarCache = undefined;\n        }\n        resetPriorityOfAllIntervals() {\n            this.traverse((calendar) => {\n                calendar.intervalStore.forEach((interval) => interval.resetPriority());\n            });\n        }\n        insertChild(child, before, silent) {\n            let res = superProto.insertChild.call(this, ...arguments);\n            if (!Array.isArray(res)) {\n                res = [res];\n            }\n            // invalidate cache of the child record, since now it should take parent into account\n            res.forEach((r) => {\n                r.bumpVersion();\n                r.resetPriorityOfAllIntervals();\n            });\n            return res;\n        }\n        joinProject() {\n            superProto.joinProject.call(this);\n            this.intervalStore.setProject(this.getProject());\n        }\n        leaveProject() {\n            superProto.leaveProject.call(this);\n            this.intervalStore.setProject(null);\n            this.clearCache();\n        }\n        doDestroy() {\n            this.leaveProject();\n            this.intervalStore.destroy();\n            super.doDestroy();\n        }\n        isDayHoliday(day) {\n            const startDate = DateHelper.clearTime(day), endDate = DateHelper.getNext(day, TimeUnit.Day);\n            let hasWorkingTime = false;\n            this.forEachAvailabilityInterval({ startDate, endDate, isForward: true }, (_intervalStartDate, _intervalEndDate, calendarCacheInterval) => {\n                hasWorkingTime = calendarCacheInterval.getIsWorking();\n                return !hasWorkingTime;\n            });\n            return !hasWorkingTime;\n        }\n        getDailyHolidaysRanges(startDate, endDate) {\n            const result = [];\n            startDate = DateHelper.clearTime(startDate);\n            while (startDate < endDate) {\n                if (this.isDayHoliday(startDate)) {\n                    result.push({\n                        startDate,\n                        endDate: DateHelper.getStartOfNextDay(startDate, true, true)\n                    });\n                }\n                startDate = DateHelper.getNext(startDate, TimeUnit.Day);\n            }\n            return result;\n        }\n        /**\n         * Returns working time ranges between the provided dates.\n         * @param {Date} startDate Start of the period to get ranges from.\n         * @param {Date} endDate End of the period to get ranges from.\n         */\n        getWorkingTimeRanges(startDate, endDate, maxRange) {\n            const result = [];\n            this.forEachAvailabilityInterval({ startDate, endDate, isForward: true, maxRange }, (intervalStartDate, intervalEndDate, calendarCacheInterval) => {\n                if (calendarCacheInterval.getIsWorking()) {\n                    const entry = calendarCacheInterval.intervals[0];\n                    result.push({\n                        name: entry.name,\n                        startDate: intervalStartDate,\n                        endDate: intervalEndDate\n                    });\n                }\n            });\n            return result;\n        }\n        /**\n         * Returns non-working time ranges between the provided dates.\n         * @param {Date} startDate Start of the period to get ranges from.\n         * @param {Date} endDate End of the period to get ranges from.\n         */\n        getNonWorkingTimeRanges(startDate, endDate, maxRange) {\n            const result = [];\n            this.forEachAvailabilityInterval({ startDate, endDate, isForward: true, maxRange }, (intervalStartDate, intervalEndDate, calendarCacheInterval) => {\n                if (!calendarCacheInterval.getIsWorking()) {\n                    const entry = calendarCacheInterval.intervals[0];\n                    result.push({\n                        name: entry.name,\n                        iconCls: entry.iconCls,\n                        cls: entry.cls,\n                        startDate: intervalStartDate,\n                        endDate: intervalEndDate\n                    });\n                }\n            });\n            return result;\n        }\n        /**\n         * Checks if there is a working time interval in the provided time range (or when just startDate is provided,\n         * checks if the date is contained inside a working time interval in this calendar)\n         * @param startDate\n         * @param [endDate]\n         * @param [fullyContained] Pass true to check if the range is fully covered by a single continuous working time block\n         */\n        isWorkingTime(startDate, endDate, fullyContained) {\n            if (fullyContained) {\n                let found;\n                const res = this.forEachAvailabilityInterval({ startDate, endDate, isForward: true }, (intervalStartDate, intervalEndDate, calendarCacheInterval) => {\n                    if (calendarCacheInterval.getIsWorking() && intervalStartDate <= startDate && intervalEndDate >= endDate) {\n                        found = true;\n                        return false;\n                    }\n                });\n                if (res === CalendarIteratorResult.MaxRangeReached || res === CalendarIteratorResult.FullRangeIterated)\n                    return false;\n                return found;\n            }\n            else {\n                // Can be Date | null | 'empty_calendar'\n                const workingTimeStart = this.skipNonWorkingTime(startDate);\n                return workingTimeStart && workingTimeStart !== 'empty_calendar' ? (endDate ? workingTimeStart < endDate : workingTimeStart.getTime() === startDate.getTime()) : false;\n            }\n        }\n    }\n    return CalendarMixin;\n}) {\n}\n", "import { CorePartOfProjectModelMixin } from '../mixin/CorePartOfProjectModelMixin.js';\nimport { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { AbstractCalendarMixin } from \"../AbstractCalendarMixin.js\";\n/**\n * The calendar for project scheduling, it is used to mark certain time intervals as \"non-working\" and ignore them during scheduling.\n *\n * The calendar consists from several [[CalendarIntervalMixin|intervals]]. The intervals can be either static or recurrent.\n */\nexport class CoreCalendarMixin extends Mixin([AbstractCalendarMixin, CorePartOfProjectModelMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreCalendarMixin extends base {\n    }\n    return CoreCalendarMixin;\n}) {\n}\n", "import { Mixin } from \"../../../ChronoGraph/class/Mixin.js\";\nimport { AbstractPartOfProjectStoreMixin } from \"./mixin/AbstractPartOfProjectStoreMixin.js\";\n/**\n * Shared functionality for [[CoreCalendarManagerStoreMixin]] and [[ChronoCalendarManagerStoreMixin]]\n */\nexport class AbstractCalendarManagerStoreMixin extends Mixin([AbstractPartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class AbstractCalendarManagerStoreMixin extends base {\n        // special handling to destroy calendar models as part of destroying this store\n        doDestroy() {\n            const records = [];\n            // When chained, traverse can be called on destroyed nodes.\n            if (!this.rootNode?.isDestroyed) {\n                this.traverse(record => records.push(record));\n            }\n            super.doDestroy();\n            records.forEach(record => record.destroy());\n        }\n    }\n    return AbstractCalendarManagerStoreMixin;\n}) {\n}\n", "import { Mixin } from \"../../../ChronoGraph/class/BetterMixin.js\";\nimport { CorePartOfProjectStoreMixin } from './mixin/CorePartOfProjectStoreMixin.js';\nimport { CoreCalendarMixin } from '../model/scheduler_core/CoreCalendarMixin.js';\nimport { AbstractCalendarManagerStoreMixin } from \"./AbstractCalendarManagerStoreMixin.js\";\n/**\n * A store mixin class, that represent collection of all calendars in the [[SchedulerCoreProjectMixin|project]].\n */\nexport class CoreCalendarManagerStoreMixin extends Mixin([AbstractCalendarManagerStoreMixin, CorePartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreCalendarManagerStoreMixin extends base {\n        static get defaultConfig() {\n            return {\n                tree: true,\n                modelClass: CoreCalendarMixin\n            };\n        }\n    }\n    return CoreCalendarManagerStoreMixin;\n}) {\n}\n", "import { Mixin } from \"../../../ChronoGraph/class/BetterMixin.js\";\nimport Delayable from \"../../../Core/mixin/Delayable.js\";\nimport Events from \"../../../Core/mixin/Events.js\";\nimport Model from \"../../../Core/data/Model.js\";\nexport class EventsWrapper extends Mixin([], Events) {\n}\nexport class DelayableWrapper extends Mixin([], Delayable) {\n}\n/**\n * This is an abstract project, which just lists the available stores.\n *\n * The actual project classes are [[SchedulerCoreProjectMixin]], [[SchedulerBasicProjectMixin]],\n * [[SchedulerProProjectMixin]], [[GanttProjectMixin]].\n */\nexport class AbstractProjectMixin extends Mixin([\n    EventsWrapper,\n    DelayableWrapper,\n    Model\n], (base) => {\n    const superProto = base.prototype;\n    class AbstractProjectMixin extends base {\n        constructor() {\n            super(...arguments);\n            this.isRestoringData = false;\n        }\n        get isRepopulatingStores() {\n            return false;\n        }\n        get isInitialCommit() {\n            return !this.isInitialCommitPerformed || this.hasLoadedDataToCommit;\n        }\n        construct(config = {}) {\n            // Define default values for these flags here\n            // if defined where declared then TS compiles them this way:\n            // constructor() {\n            //     super(...arguments)\n            //     this.isInitialCommitPerformed   = false\n            //     this.isLoadingInlineData        = false\n            //     this.isWritingData              = false\n            //\n            // }\n            // which messes the flags values for inline data loading (since it's async)\n            this.isInitialCommitPerformed = false;\n            this.isLoadingInlineData = false;\n            this.isWritingData = false;\n            this.hasLoadedDataToCommit = false;\n            const silenceInitialCommit = ('silenceInitialCommit' in config) ? config.silenceInitialCommit : true;\n            const adjustDurationToDST = ('adjustDurationToDST' in config) ? config.adjustDurationToDST : false;\n            // 5 years roughly === 5 * 365 * 24 * 60 * 60 * 1000\n            this.maxCalendarRange = ('maxCalendarRange' in config) ? config.maxCalendarRange : 157680000000;\n            // delete configs otherwise super.construct() call treat them as fields and makes accessors for them\n            delete config.maxCalendarRange;\n            delete config.silenceInitialCommit;\n            delete config.adjustDurationToDST;\n            superProto.construct.call(this, config);\n            this.silenceInitialCommit = silenceInitialCommit;\n            this.adjustDurationToDST = adjustDurationToDST;\n        }\n        // Template method called when a stores dataset is replaced. Implemented in SchedulerBasicProjectMixin\n        repopulateStore(store) { }\n        // Template method called when replica should be repopulated. Implemented in SchedulerBasicProjectMixin\n        repopulateReplica() { }\n        deferUntilRepopulationIfNeeded(deferId, func, args) {\n            // no deferring at this level (happens in projects using engine)\n            func(...args);\n        }\n        // Template method called when a store is attached to the project\n        attachStore(store) { }\n        // Template method called when a store is detached to the project\n        detachStore(store) { }\n        async commitAsync() {\n            throw new Error(\"Abstract method called\");\n        }\n        // Different implementations for Core and Basic engines\n        isEngineReady() {\n            throw new Error(\"Abstract method called\");\n        }\n        getStm() {\n            throw new Error(\"Abstract method called\");\n        }\n    }\n    return AbstractProjectMixin;\n}) {\n}\n", "import { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { SchedulerCoreEvent } from \"./SchedulerCoreEvent.js\";\nimport Store from \"../../../../Core/data/Store.js\";\nimport Model from \"../../../../Core/data/Model.js\";\nimport Delayable from \"../../../../Core/mixin/Delayable.js\";\nimport { CoreEventStoreMixin } from \"../../store/CoreEventStoreMixin.js\";\nimport { CoreAssignmentMixin } from \"./CoreAssignmentMixin.js\";\nimport { CoreAssignmentStoreMixin } from \"../../store/CoreAssignmentStoreMixin.js\";\nimport { CoreResourceMixin } from \"./CoreResourceMixin.js\";\nimport { CoreResourceStoreMixin } from \"../../store/CoreResourceStoreMixin.js\";\nimport { CorePartOfProjectGenericMixin } from \"../../CorePartOfProjectGenericMixin.js\";\nimport { CoreDependencyStoreMixin } from \"../../store/CoreDependencyStoreMixin.js\";\nimport { CoreDependencyMixin } from \"./CoreDependencyMixin.js\";\nimport { CoreCalendarMixin } from './CoreCalendarMixin.js';\nimport { CoreCalendarManagerStoreMixin } from '../../store/CoreCalendarManagerStoreMixin.js';\nimport { delay } from \"../../../util/Functions.js\";\nimport StateTrackingManager from \"../../../../Core/data/stm/StateTrackingManager.js\";\nimport { AbstractProjectMixin } from \"../AbstractProjectMixin.js\";\nimport ObjectHelper from \"../../../../Core/helper/ObjectHelper.js\";\nexport class DelayableWrapper extends Mixin([], Delayable) {\n}\n/**\n * This is a project, implementing _basic scheduling_ as [[SchedulerBasicProjectMixin]] does.\n * Yet this class does not use _chronograph_ based engine.\n */\nexport class SchedulerCoreProjectMixin extends Mixin([\n    AbstractProjectMixin,\n    CorePartOfProjectGenericMixin,\n    DelayableWrapper,\n    Model\n], (base) => {\n    const superProto = base.prototype;\n    class SchedulerCoreProjectMixin extends base {\n        static get configurable() {\n            return {\n                stm: {},\n                eventStore: {},\n                assignmentStore: {},\n                resourceStore: {},\n                dependencyStore: {},\n                calendarManagerStore: {},\n                eventModelClass: SchedulerCoreEvent,\n                assignmentModelClass: CoreAssignmentMixin,\n                resourceModelClass: CoreResourceMixin,\n                dependencyModelClass: CoreDependencyMixin,\n                calendarModelClass: CoreCalendarMixin,\n                eventStoreClass: CoreEventStoreMixin,\n                assignmentStoreClass: CoreAssignmentStoreMixin,\n                resourceStoreClass: CoreResourceStoreMixin,\n                dependencyStoreClass: CoreDependencyStoreMixin,\n                calendarManagerStoreClass: CoreCalendarManagerStoreMixin,\n                assignmentsData: null,\n                calendarsData: null,\n                dependenciesData: null,\n                eventsData: null,\n                resourcesData: null\n            };\n        }\n        //endregion\n        //region Init\n        construct(config = {}) {\n            const me = this;\n            // Cannot be created with declaration, because of how TS is compiled to JS. Ends up after `construct()`\n            me.$invalidated = new Set();\n            // Define default values for these flags here\n            // if defined where declared then TS compiles them this way:\n            // constructor() {\n            //     super(...arguments)\n            //     this.isPerformingCommit   = false\n            //     this.silenceInitialCommit = true\n            //     this.ongoing              = Promise.resolve()\n            // }\n            // which messes the flags values for inline data loading (since it's async)\n            me.isPerformingCommit = false;\n            me.silenceInitialCommit = true;\n            me.ongoing = Promise.resolve();\n            if (config.eventStore && !config.assignmentStore) {\n                const eventStore = config.eventStore.masterStore || config.eventStore;\n                // If chained from a CrudManager, the assignment store might not be part of a project, and we might\n                // need to ingest it from the CrudManager\n                // @ts-ignore\n                const assignmentStore = eventStore.assignmentStore || eventStore.crudManager?.assignmentStore;\n                // In this case we must ingest the assignment store from the eventStore\n                if (assignmentStore?.isAssignmentStore) {\n                    config.assignmentStore = assignmentStore;\n                    me.isSharingAssignmentStore = true;\n                }\n            }\n            superProto.construct.call(me, config);\n            // not part of the CalendarManagerStore intentionally, not persisted\n            me.defaultCalendar = new me.calendarManagerStore.modelClass({\n                unspecifiedTimeIsWorking: me.unspecifiedTimeIsWorking\n            });\n            me.defaultCalendar.project = me;\n            const { calendarsData, eventsData, dependenciesData, resourcesData, assignmentsData } = me;\n            const hasInlineData = Boolean(calendarsData || eventsData || dependenciesData || resourcesData || assignmentsData);\n            if (hasInlineData) {\n                me.loadInlineData({\n                    calendarsData,\n                    eventsData,\n                    dependenciesData,\n                    resourcesData,\n                    assignmentsData\n                });\n                delete me.calendarsData;\n                delete me.eventsData;\n                delete me.dependenciesData;\n                delete me.resourcesData;\n                delete me.assignmentsData;\n            }\n            else {\n                // Trigger initial commit\n                me.bufferedCommitAsync();\n            }\n        }\n        doDestroy() {\n            const me = this;\n            me.eventStore?.destroy();\n            me.dependencyStore?.destroy();\n            me.assignmentStore?.destroy();\n            me.resourceStore?.destroy();\n            me.calendarManagerStore?.destroy();\n            me.defaultCalendar.destroy();\n            me.stm?.destroy();\n            superProto.doDestroy.call(this);\n        }\n        /**\n         * This method loads the \"raw\" data into the project. The loading is basically happening by\n         * assigning the individual data entries to the `data` property of the corresponding store.\n         *\n         * @param data\n         */\n        async loadInlineData(data) {\n            const me = this;\n            me.isLoadingInlineData = true;\n            if (data.calendarsData) {\n                me.calendarManagerStore.data = data.calendarsData;\n            }\n            if (data.resourcesData) {\n                me.resourceStore.data = data.resourcesData;\n            }\n            if (data.assignmentsData) {\n                me.assignmentStore.data = data.assignmentsData;\n            }\n            if (data.eventsData) {\n                me.eventStore.data = data.eventsData;\n            }\n            if (data.tasksData) {\n                me.eventStore.data = data.tasksData;\n            }\n            if (data.dependenciesData) {\n                me.dependencyStore.data = data.dependenciesData;\n            }\n            await me.commitLoad();\n            me.isLoadingInlineData = false;\n            return;\n        }\n        //endregion\n        //region Join\n        async commitLoad() {\n            await this.commitAsync();\n            // Might have been destroyed during the async operation above\n            if (!this.isDestroyed)\n                this.trigger('load');\n        }\n        joinStoreRecords(store) {\n            const fn = (record) => {\n                record.setProject(this);\n                record.joinProject();\n            };\n            if (store.rootNode) {\n                store.rootNode.traverse(fn);\n            }\n            else {\n                store.forEach(fn);\n            }\n        }\n        unJoinStoreRecords(store) {\n            const fn = (record) => {\n                record.leaveProject();\n                record.setProject(this);\n            };\n            if (store.rootNode) {\n                store.rootNode.traverse(node => {\n                    // do not unjoin/leave project for the root node, which is the project itself\n                    if (node !== store.rootNode)\n                        fn(node);\n                });\n            }\n            else {\n                store.forEach(fn);\n            }\n        }\n        //endregion\n        //region EventStore\n        resolveStoreAndModelClass(name, config) {\n            // storeClass from supplied config or our properties\n            const storeClass = config?.storeClass || this[`${name}StoreClass`];\n            // modelClass from supplied config\n            let modelClass = config?.modelClass;\n            if (!modelClass) {\n                // or from storeClass.modelClass if customized\n                // @ts-ignore\n                if (this.getDefaultConfiguration()[`${name}ModelClass`] !== storeClass.getDefaultConfiguration().modelClass) {\n                    modelClass = storeClass.getDefaultConfiguration().modelClass;\n                }\n                // and if none of the above, use from our properties\n                else {\n                    modelClass = this[`${name}ModelClass`];\n                }\n            }\n            return { storeClass, modelClass };\n        }\n        setEventStore(eventStore) {\n            this.eventStore = eventStore;\n        }\n        changeEventStore(eventStore, oldStore) {\n            const me = this, { stm } = me;\n            me.detachStore(oldStore);\n            if (!(eventStore instanceof Store)) {\n                const { storeClass, modelClass } = me.resolveStoreAndModelClass('event', eventStore);\n                eventStore = new storeClass(ObjectHelper.assign({\n                    modelClass,\n                    project: me,\n                    stm\n                }, eventStore));\n            }\n            else {\n                eventStore.project = me;\n                stm.addStore(eventStore);\n                me.joinStoreRecords(eventStore);\n            }\n            if (oldStore && stm.hasStore(oldStore)) {\n                stm.removeStore(oldStore);\n                me.unJoinStoreRecords(oldStore);\n                const { assignmentsForRemoval } = oldStore;\n                // remap the assignment\n                assignmentsForRemoval.forEach(assignment => {\n                    const oldEvent = assignment.event;\n                    if (oldEvent) {\n                        const newEvent = eventStore.getById(oldEvent.id);\n                        if (newEvent) {\n                            assignment.event = newEvent;\n                            // keep the assignment\n                            assignmentsForRemoval.delete(assignment);\n                        }\n                    }\n                });\n                oldStore.afterEventRemoval();\n            }\n            eventStore.setProject(me);\n            return eventStore;\n        }\n        updateEventStore(eventStore, oldStore) {\n            this.attachStore(eventStore);\n            this.trigger('eventStoreChange', { store: eventStore });\n        }\n        //endregion\n        //region AssignmentStore\n        setAssignmentStore(assignmentStore) {\n            this.assignmentStore = assignmentStore;\n        }\n        changeAssignmentStore(assignmentStore, oldStore) {\n            const me = this, { stm } = me;\n            me.detachStore(oldStore);\n            if (oldStore && stm.hasStore(oldStore)) {\n                stm.removeStore(oldStore);\n                me.unJoinStoreRecords(oldStore);\n            }\n            if (!(assignmentStore instanceof Store)) {\n                const { storeClass, modelClass } = me.resolveStoreAndModelClass('assignment', assignmentStore);\n                assignmentStore = new storeClass(ObjectHelper.assign({\n                    modelClass,\n                    project: me,\n                    stm\n                }, assignmentStore));\n            }\n            else {\n                assignmentStore.project = me;\n                stm.addStore(assignmentStore);\n                me.joinStoreRecords(assignmentStore);\n            }\n            assignmentStore.setProject(me);\n            return assignmentStore;\n        }\n        updateAssignmentStore(assignmentStore, oldStore) {\n            this.attachStore(assignmentStore);\n            this.trigger('assignmentStoreChange', { store: assignmentStore });\n        }\n        //endregion\n        //region ResourceStore\n        setResourceStore(resourceStore) {\n            this.resourceStore = resourceStore;\n        }\n        changeResourceStore(resourceStore, oldStore) {\n            const me = this, { stm } = me;\n            me.detachStore(oldStore);\n            if (!(resourceStore instanceof Store)) {\n                const { storeClass, modelClass } = me.resolveStoreAndModelClass('resource', resourceStore);\n                resourceStore = new storeClass(ObjectHelper.assign({\n                    modelClass,\n                    project: me,\n                    stm\n                }, resourceStore));\n            }\n            else {\n                resourceStore.project = me;\n                stm.addStore(resourceStore);\n                me.joinStoreRecords(resourceStore);\n            }\n            if (oldStore && stm.hasStore(oldStore)) {\n                stm.removeStore(oldStore);\n                me.unJoinStoreRecords(oldStore);\n                const { assignmentsForRemoval } = oldStore;\n                // remap the assignment\n                assignmentsForRemoval.forEach(assignment => {\n                    const oldResource = assignment.resource;\n                    if (oldResource) {\n                        const newResource = resourceStore.getById(oldResource.id);\n                        if (newResource) {\n                            assignment.resource = newResource;\n                            // keep the assignment\n                            assignmentsForRemoval.delete(assignment);\n                        }\n                    }\n                });\n                oldStore.afterResourceRemoval();\n            }\n            resourceStore.setProject(me);\n            return resourceStore;\n        }\n        updateResourceStore(resourceStore, oldStore) {\n            this.attachStore(resourceStore);\n            this.trigger('resourceStoreChange', { store: resourceStore });\n        }\n        //endregion\n        //region DependencyStore\n        setDependencyStore(dependencyStore) {\n            this.dependencyStore = dependencyStore;\n        }\n        changeDependencyStore(dependencyStore, oldStore) {\n            const me = this;\n            me.detachStore(oldStore);\n            if (!(dependencyStore instanceof Store)) {\n                const { storeClass, modelClass } = me.resolveStoreAndModelClass('dependency', dependencyStore);\n                dependencyStore = new storeClass(ObjectHelper.assign({\n                    modelClass,\n                    project: me,\n                    stm: me.stm\n                }, dependencyStore));\n            }\n            else {\n                dependencyStore.project = me;\n                me.stm.addStore(dependencyStore);\n                me.joinStoreRecords(dependencyStore);\n            }\n            return dependencyStore;\n        }\n        updateDependencyStore(dependencyStore, oldStore) {\n            this.attachStore(dependencyStore);\n            this.trigger('dependencyStoreChange', { store: dependencyStore });\n        }\n        //endregion\n        //region CalendarManagerStore\n        setCalendarManagerStore(calendarManagerStore) {\n            this.calendarManagerStore = calendarManagerStore;\n        }\n        changeCalendarManagerStore(calendarManagerStore, oldStore) {\n            const me = this;\n            me.detachStore(oldStore);\n            if (!(calendarManagerStore instanceof Store)) {\n                // @ts-ignore\n                const storeClass = calendarManagerStore?.storeClass || me.calendarManagerStoreClass;\n                // @ts-ignore\n                const modelClass = calendarManagerStore?.modelClass || storeClass.getDefaultConfiguration().modelClass || me.calendarModelClass;\n                calendarManagerStore = new storeClass(ObjectHelper.assign({\n                    modelClass,\n                    project: me,\n                    stm: me.stm\n                }, calendarManagerStore));\n            }\n            else {\n                me.stm.addStore(calendarManagerStore);\n            }\n            calendarManagerStore.setProject(me);\n            return calendarManagerStore;\n        }\n        updateCalendarManagerStore(calendarManagerStore, oldStore) {\n            this.attachStore(calendarManagerStore);\n            this.trigger('calendarManagerStoreChange', { store: calendarManagerStore });\n        }\n        //endregion\n        //region Calendar\n        get calendar() {\n            return this.$calendar || this.defaultCalendar;\n        }\n        set calendar(calendar) {\n            this.$calendar = calendar;\n        }\n        get effectiveCalendar() {\n            return this.calendar;\n        }\n        //endregion\n        //region Add records\n        async addEvent(event) {\n            this.eventStore.add(event);\n            return this.commitAsync();\n        }\n        async addAssignment(assignment) {\n            this.assignmentStore.add(assignment);\n            return this.commitAsync();\n        }\n        async addResource(resource) {\n            this.resourceStore.add(resource);\n            return this.commitAsync();\n        }\n        async addDependency(dependency) {\n            this.dependencyStore.add(dependency);\n            return this.commitAsync();\n        }\n        //endregion\n        //region Auto commit\n        // Buffer commitAsync using setTimeout. Not using `buffer` on purpose, for performance reasons and to better\n        // mimic how graph does it\n        bufferedCommitAsync() {\n            if (!this.hasPendingAutoCommit) {\n                this.setTimeout({\n                    fn: 'commitAsync',\n                    delay: 10\n                });\n            }\n        }\n        get hasPendingAutoCommit() {\n            return this.hasTimeout('commitAsync');\n        }\n        unScheduleAutoCommit() {\n            this.clearTimeout('commitAsync');\n        }\n        //endregion\n        //region Commit\n        async commitAsync() {\n            if (this.isPerformingCommit)\n                return this.ongoing;\n            return this.ongoing = this.doCommitAsync();\n        }\n        async doCommitAsync() {\n            const me = this;\n            me.isPerformingCommit = true;\n            // Cancel any outstanding commit\n            me.unScheduleAutoCommit();\n            await delay(0);\n            if (!me.isDestroyed) {\n                // Calculate all invalidated records, updates their data silently\n                for (const record of me.$invalidated) {\n                    record.calculateInvalidated();\n                }\n                const { isInitialCommit, silenceInitialCommit } = me;\n                // apply changes silently if this is initial commit and \"silenceInitialCommit\" option is enabled\n                const silenceCommit = isInitialCommit && silenceInitialCommit;\n                // Notify stores that care about commit (internal)\n                me.assignmentStore.onCommitAsync();\n                me.dependencyStore.onCommitAsync();\n                me.isInitialCommitPerformed = true;\n                me.hasLoadedDataToCommit = false;\n                me.isPerformingCommit = false;\n                const stores = [me.assignmentStore, me.dependencyStore, me.eventStore, me.resourceStore, me.calendarManagerStore];\n                stores.forEach(store => store.suspendAutoCommit?.());\n                me.isWritingData = true;\n                // \"Real\" project triggers refresh before data is written back to records\n                me.trigger('refresh', { isInitialCommit, isCalculated: true });\n                // If we are not announcing changes, take a cheaper path\n                if (silenceCommit) {\n                    for (const record of me.$invalidated) {\n                        record.finalizeInvalidated(true);\n                    }\n                }\n                else {\n                    // Two loops looks a bit weird, but needed since editing assignment might affect event etc.\n                    // And we do only want a single update in the end\n                    // 1. Start batches and perform all calculations\n                    for (const record of me.$invalidated) {\n                        record.beginBatch(true);\n                        record.finalizeInvalidated();\n                    }\n                    // 2. End batches, announcing changes (unless initial commit)\n                    for (const record of me.$invalidated) {\n                        record.endBatch(false, true);\n                    }\n                }\n                me.isWritingData = false;\n                me.$invalidated.clear();\n                // Mimic real projects events\n                me.trigger('dataReady');\n                stores.forEach(store => store.resumeAutoCommit?.());\n                // Chrono version triggers \"dataReady\" only if there were no commit rejection\n                // (in case of a rejection it triggers \"commitRejected\" event)\n                // but in both cases it triggers \"commitFinalized\" afterwards\n                me.trigger('commitFinalized');\n                return true;\n            }\n        }\n        async propagateAsync() {\n            return this.commitAsync();\n        }\n        // Called when a record invalidates itself, queues it for calculation\n        invalidate(record) {\n            this.$invalidated.add(record);\n            this.bufferedCommitAsync();\n        }\n        // this does not account for possible scheduling conflicts\n        async isValidDependency() {\n            return true;\n        }\n        //endregion\n        //region STM\n        getStm() {\n            return this.stm;\n        }\n        /**\n         * State tracking manager instance the project relies on\n         */\n        set stm(stm) {\n            stm = this.$stm = new StateTrackingManager(ObjectHelper.assign({\n                disabled: true\n            }, stm));\n            stm.ion({\n                // Propagate on undo/redo\n                restoringStop: async () => {\n                    // Disable STM meanwhile to not pick it up as a new STM transaction\n                    stm.disable();\n                    await this.commitAsync();\n                    if (!this.isDestroyed) {\n                        stm.enable();\n                        this.trigger('stateRestoringDone');\n                    }\n                }\n            });\n        }\n        get stm() {\n            return this.$stm;\n        }\n        //endregion\n        isEngineReady() {\n            return !this.hasPendingAutoCommit && !this.isPerformingCommit && this.isInitialCommitPerformed;\n        }\n    }\n    //region Config\n    SchedulerCoreProjectMixin.applyConfigs = true;\n    return SchedulerCoreProjectMixin;\n}) {\n}\n", "import VersionHelper from '../../Core/helper/VersionHelper.js';\nimport ProjectModelMixin from './mixin/ProjectModelMixin.js';\nimport ProjectCurrentConfig from './mixin/ProjectCurrentConfig.js';\nimport ModelPersistencyManager from '../data/util/ModelPersistencyManager.js';\nimport { SchedulerCoreProjectMixin } from '../../Engine/quark/model/scheduler_core/SchedulerCoreProjectMixin.js';\nimport EventModel from './EventModel.js';\nimport DependencyModel from './DependencyModel.js';\nimport ResourceModel from './ResourceModel.js';\nimport AssignmentModel from './AssignmentModel.js';\nimport EventStore from '../data/EventStore.js';\nimport DependencyStore from '../data/DependencyStore.js';\nimport ResourceStore from '../data/ResourceStore.js';\nimport AssignmentStore from '../data/AssignmentStore.js';\nconst EngineMixin = SchedulerCoreProjectMixin;\n/**\n * @module Scheduler/model/ProjectModel\n */\n/**\n * This class represents a global project of your Scheduler - a central place for all data.\n *\n * It holds and links the stores usually used by Scheduler:\n *\n * - {@link Scheduler.data.EventStore}\n * - {@link Scheduler.data.ResourceStore}\n * - {@link Scheduler.data.AssignmentStore}\n * - {@link Scheduler.data.DependencyStore}\n * - {@link Scheduler.data.TimeRangeStore}\n * - {@link Scheduler.data.ResourceTimeRangeStore}\n *\n * The project uses a calculation engine to normalize dates and durations. It is also responsible for\n * handling references between models, for example to link an event via an assignment to a resource. These operations\n * are asynchronous, a fact that is hidden when working in the Scheduler UI but which you must know about when performing\n * more advanced operations on the data level.\n *\n * When there is a change to data that requires something else to be recalculated, the project schedules a calculation (a\n * commit) which happens moments later. It is also possible to trigger these calculations directly. This snippet illustrate\n * the process:\n *\n 1. Something changes which requires the project to recalculate, for example adding a new task:\n *\n * ```javascript\n * const [event] = project.eventStore.add({ startDate, endDate });\n * ```\n *\n * 2. A recalculation is scheduled, thus:\n *\n * ```javascript\n * event.duration; // <- Not yet calculated\n * ```\n *\n * 3. Calculate now instead of waiting for the scheduled calculation\n *\n * ```javascript\n * await project.commitAsync();\n *\n * event.duration; // <- Now available\n * ```\n *\n * ## Using inline data\n *\n * The project provides settable property {@link Scheduler.crud.AbstractCrudManager#property-inlineData} that can\n * be used to get data from all its stores at once and to set this data as well. Populating the stores this way can\n * be useful if you cannot or you do not want to use CrudManager for server requests but you pull the data by other\n * means and have it ready outside of ProjectModel. Also, the data from all stores is available in a single\n * assignment statement.\n *\n * ### Getting data\n * ```javascript\n * const data = scheduler.project.inlineData;\n *\n * // use the data in your application\n * ```\n *\n * ### Setting data\n * ```javascript\n * const data = // your function to pull server data\n *\n * scheduler.project.inlineData = data;\n * ```\n *\n * ## Monitoring data changes\n *\n * While it is possible to listen for data changes on the projects individual stores, it is sometimes more convenient\n * to have a centralized place to handle all data changes. By listening for the {@link #event-change change event} your\n * code gets notified when data in any of the stores changes. Useful for example to keep an external data model up to\n * date:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     project: {\n *         listeners : {\n *             change({ store, action, records }) {\n *                 const { $name } = store.constructor;\n *\n *                 if (action === 'add') {\n *                     externalDataModel.add($name, records);\n *                 }\n *\n *                 if (action === 'remove') {\n *                     externalDataModel.remove($name, records);\n *                 }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * ## Built-in StateTrackingManager\n *\n * The project also has a built-in {@link Core.data.stm.StateTrackingManager StateTrackingManager} (STM for short), that\n * handles undo/redo for the project stores (additional stores can also be added). You can enable it to track all\n * project store changes:\n *\n * ```javascript\n * // Turn on auto recording when you create your Scheduler:\n * const scheduler = new Scheduler({\n *    project : {\n *        stm : {\n *            autoRecord : true\n *        }\n *    }\n * });\n *\n * // Undo a transaction\n * project.stm.undo();\n *\n * // Redo\n * project.stm.redo();\n * ```\n *\n * Check out the `undoredo` demo to see it in action.\n *\n * @extends Core/data/Model\n * @mixes Scheduler/model/mixin/ProjectModelMixin\n * @uninherit Core/data/mixin/TreeNode\n */\nexport default class ProjectModel extends ProjectCurrentConfig(ProjectModelMixin(EngineMixin)) {\n    static get $name() {\n        return 'ProjectModel';\n    }\n    //region Inline data configs & properties\n    /**\n     * @hidefields id, readOnly, children, parentId, parentIndex\n     */\n    /**\n     * A flag, indicating whether the dates and duration calculations should adjust the result to DST time shift.\n     *\n     * @config {Boolean} adjustDurationToDST\n     * @default false\n     */\n    /**\n     * Get/set {@link #property-eventStore} data.\n     *\n     * Always returns an array of {@link Scheduler.model.EventModel EventModels} but also accepts an array of\n     * its configuration objects as input.\n     *\n     * @member {Scheduler.model.EventModel[]} events\n     * @accepts {Scheduler.model.EventModel[]|EventModelConfig[]}\n     * @category Inline data\n     */\n    /**\n     * Data use to fill the {@link #property-eventStore}. Should be an array of\n     * {@link Scheduler.model.EventModel EventModels} or its configuration objects.\n     *\n     * @config {Scheduler.model.EventModel[]|EventModelConfig[]} events\n     * @category Inline data\n     */\n    /**\n     * Get/set {@link #property-resourceStore} data.\n     *\n     * Always returns an array of {@link Scheduler.model.ResourceModel ResourceModels} but also accepts an array\n     * of its configuration objects as input.\n     *\n     * @member {Scheduler.model.ResourceModel[]} resources\n     * @accepts {Scheduler.model.ResourceModel[]|ResourceModelConfig[]}\n     * @category Inline data\n     */\n    /**\n     * Data use to fill the {@link #property-resourceStore}. Should be an array of\n     * {@link Scheduler.model.ResourceModel ResourceModels} or its configuration objects.\n     *\n     * @config {Scheduler.model.ResourceModel[]|ResourceModelConfig[]} resources\n     * @category Inline data\n     */\n    /**\n     * Get/set {@link #property-assignmentStore} data.\n     *\n     * Always returns an array of {@link Scheduler.model.AssignmentModel AssignmentModels} but also accepts an\n     * array of its configuration objects as input.\n     *\n     * @member {Scheduler.model.AssignmentModel[]} assignments\n     * @accepts {Scheduler.model.AssignmentModel[]|AssignmentModelConfig[]}\n     * @category Inline data\n     */\n    /**\n     * Data use to fill the {@link #property-assignmentStore}. Should be an array of\n     * {@link Scheduler.model.AssignmentModel AssignmentModels} or its configuration objects.\n     *\n     * @config {Scheduler.model.AssignmentModel[]|AssignmentModelConfig[]} assignments\n     * @category Inline data\n     */\n    /**\n     * Get/set {@link #property-dependencyStore} data.\n     *\n     * Always returns an array of {@link Scheduler.model.DependencyModel DependencyModels} but also accepts an\n     * array of its configuration objects as input.\n     *\n     * @member {Scheduler.model.DependencyModel[]} dependencies\n     * @accepts {Scheduler.model.DependencyModel[]|DependencyModelConfig[]}\n     * @category Inline data\n     */\n    /**\n     * Data use to fill the {@link #property-dependencyStore}. Should be an array of\n     * {@link Scheduler.model.DependencyModel DependencyModels} or its configuration objects.\n     *\n     * @config {Scheduler.model.DependencyModel[]|DependencyModelConfig[]} dependencies\n     * @category Inline data\n     */\n    /**\n     * Get/set {@link #property-timeRangeStore} data.\n     *\n     * Always returns an array of {@link Scheduler.model.TimeRangeModel TimeRangeModels} but also accepts an\n     * array of its configuration objects as input.\n     *\n     * @member {Scheduler.model.TimeRangeModel[]} timeRanges\n     * @accepts {Scheduler.model.TimeRangeModel[]|TimeRangeModelConfig[]}\n     * @category Inline data\n     */\n    /**\n     * Data use to fill the {@link #property-timeRangeStore}. Should be an array of\n     * {@link Scheduler.model.TimeRangeModel TimeRangeModels} or its configuration objects.\n     *\n     * @config {Scheduler.model.TimeRangeModel[]|TimeRangeModelConfig[]} timeRanges\n     * @category Inline data\n     */\n    /**\n     * Get/set {@link #property-resourceTimeRangeStore} data.\n     *\n     * Always returns an array of {@link Scheduler.model.ResourceTimeRangeModel ResourceTimeRangeModels} but\n     * also accepts an array of its configuration objects as input.\n     *\n     * @member {Scheduler.model.ResourceTimeRangeModel[]} resourceTimeRanges\n     * @accepts {Scheduler.model.ResourceTimeRangeModel[]|ResourceTimeRangeModelConfig[]}\n     * @category Inline data\n     */\n    /**\n     * Data use to fill the {@link #property-resourceTimeRangeStore}. Should be an array\n     * of {@link Scheduler.model.ResourceTimeRangeModel ResourceTimeRangeModels} or its configuration objects.\n     *\n     * @config {Scheduler.model.ResourceTimeRangeModel[]|ResourceTimeRangeModelConfig[]} resourceTimeRanges\n     * @category Inline data\n     */\n    //endregion\n    //region Legacy inline data configs & properties\n    /**\n     * The initial data, to fill the {@link #property-eventStore} with.\n     * Should be an array of {@link Scheduler.model.EventModel EventModels} or its configuration objects.\n     *\n     * @config {Scheduler.model.EventModel[]|EventModelConfig[]} eventsData\n     * @category Legacy inline data\n     */\n    /**\n     * The initial data, to fill the {@link #property-dependencyStore} with.\n     * Should be an array of {@link Scheduler.model.DependencyModel DependencyModels} or its configuration\n     * objects.\n     *\n     * @config {Scheduler.model.DependencyModel[]|DependencyModelConfig[]} [dependenciesData]\n     * @category Legacy inline data\n     */\n    /**\n     * The initial data, to fill the {@link #property-resourceStore} with.\n     * Should be an array of {@link Scheduler.model.ResourceModel ResourceModels} or its configuration objects.\n     *\n     * @config {Scheduler.model.ResourceModel[]|ResourceModelConfig[]} [resourcesData]\n     * @category Legacy inline data\n     */\n    /**\n     * The initial data, to fill the {@link #property-assignmentStore} with.\n     * Should be an array of {@link Scheduler.model.AssignmentModel AssignmentModels} or its configuration\n     * objects.\n     *\n     * @config {Scheduler.model.AssignmentModel[]|AssignmentModelConfig[]} [assignmentsData]\n     * @category Legacy inline data\n     */\n    //endregion\n    //region Store configs & properties\n    /**\n     * The {@link Scheduler.data.EventStore store} holding the events information.\n     *\n     * See also {@link Scheduler.model.EventModel}\n     *\n     * @member {Scheduler.data.EventStore} eventStore\n     * @category Models & Stores\n     */\n    /**\n     * An {@link Scheduler.data.EventStore} instance or a config object.\n     * @config {Scheduler.data.EventStore|EventStoreConfig} eventStore\n     * @category Models & Stores\n     */\n    /**\n     * The {@link Scheduler.data.DependencyStore store} holding the dependencies information.\n     *\n     * See also {@link Scheduler.model.DependencyModel}\n     *\n     * @member {Scheduler.data.DependencyStore} dependencyStore\n     * @category Models & Stores\n     */\n    /**\n     * A {@link Scheduler.data.DependencyStore} instance or a config object.\n     * @config {Scheduler.data.DependencyStore|DependencyStoreConfig} dependencyStore\n     * @category Models & Stores\n     */\n    /**\n     * The {@link Scheduler.data.ResourceStore store} holding the resources that can be assigned to the events in the event store.\n     *\n     * See also {@link Scheduler.model.ResourceModel}\n     *\n     * @member {Scheduler.data.ResourceStore} resourceStore\n     * @category Models & Stores\n     */\n    /**\n     * A {@link Scheduler.data.ResourceStore} instance or a config object.\n     * @config {Scheduler.data.ResourceStore|ResourceStoreConfig} resourceStore\n     * @category Models & Stores\n     */\n    /**\n     * The {@link Scheduler.data.AssignmentStore store} holding the assignments information.\n     *\n     * See also {@link Scheduler.model.AssignmentModel}\n     *\n     * @member {Scheduler.data.AssignmentStore} assignmentStore\n     * @category Models & Stores\n     */\n    /**\n     * An {@link Scheduler.data.AssignmentStore} instance or a config object.\n     * @config {Scheduler.data.AssignmentStore|AssignmentStoreConfig} assignmentStore\n     * @category Models & Stores\n     */\n    //endregion\n    //region Configs\n    static get defaultConfig() {\n        return {\n            /**\n             * The constructor of the event model class, to be used in the project. Will be set as the\n             * {@link Core.data.Store#config-modelClass modelClass} property of the {@link #property-eventStore}\n             *\n             * @config {Scheduler.model.EventModel}\n             * @typings {typeof EventModel}\n             * @category Models & Stores\n             */\n            eventModelClass : EventModel,\n            /**\n             * The constructor of the dependency model class, to be used in the project. Will be set as the\n             * {@link Core.data.Store#config-modelClass modelClass} property of the {@link #property-dependencyStore}\n             *\n             * @config {Scheduler.model.DependencyModel}\n             * @typings {typeof DependencyModel}\n             * @category Models & Stores\n             */\n            dependencyModelClass : DependencyModel,\n            /**\n             * The constructor of the resource model class, to be used in the project. Will be set as the\n             * {@link Core.data.Store#config-modelClass modelClass} property of the {@link #property-resourceStore}\n             *\n             * @config {Scheduler.model.ResourceModel}\n             * @typings {typeof ResourceModel}\n             * @category Models & Stores\n             */\n            resourceModelClass : ResourceModel,\n            /**\n             * The constructor of the assignment model class, to be used in the project. Will be set as the\n             * {@link Core.data.Store#config-modelClass modelClass} property of the {@link #property-assignmentStore}\n             *\n             * @config {Scheduler.model.AssignmentModel}\n             * @typings {typeof AssignmentModel}\n             * @category Models & Stores\n             */\n            assignmentModelClass : AssignmentModel,\n            /**\n             * The constructor to create an event store instance with. Should be a class, subclassing the\n             * {@link Scheduler.data.EventStore}\n             * @config {Scheduler.data.EventStore|Object}\n             * @typings {typeof EventStore|object}\n             * @category Models & Stores\n             */\n            eventStoreClass : EventStore,\n            /**\n             * The constructor to create a dependency store instance with. Should be a class, subclassing the\n             * {@link Scheduler.data.DependencyStore}\n             * @config {Scheduler.data.DependencyStore|Object}\n             * @typings {typeof DependencyStore|object}\n             * @category Models & Stores\n             */\n            dependencyStoreClass : DependencyStore,\n            /**\n             * The constructor to create a resource store instance with. Should be a class, subclassing the\n             * {@link Scheduler.data.ResourceStore}\n             * @config {Scheduler.data.ResourceStore|Object}\n             * @typings {typeof ResourceStore|object}\n             * @category Models & Stores\n             */\n            resourceStoreClass : ResourceStore,\n            /**\n             * The constructor to create an assignment store instance with. Should be a class, subclassing the\n             * {@link Scheduler.data.AssignmentStore}\n             * @config {Scheduler.data.AssignmentStore|Object}\n             * @typings {typeof AssignmentStore|object}\n             * @category Models & Stores\n             */\n            assignmentStoreClass : AssignmentStore\n        };\n    }\n    //endregion\n    //region Events\n    /**\n     * Fired when the engine has finished its calculations and the results has been written back to the records.\n     *\n     * ```javascript\n     * scheduler.project.on({\n     *     dataReady() {\n     *        console.log('Calculations finished');\n     *     }\n     * });\n     *\n     * scheduler.eventStore.first.duration = 10;\n     *\n     * // At some point a bit later it will log 'Calculations finished'\n     * ```\n     *\n     * @event dataReady\n     * @param {Scheduler.model.ProjectModel} source The project\n     * @typings source -> {Scheduler.model.ProjectModel||any}\n     * @param {Boolean} isInitialCommit Flag that shows if this commit is initial\n     * @param {Set} records Set of all {@link Core.data.Model}s that were modified in the completed transaction.\n     * Use the {@link Core.data.Model#property-modifications} property of each Model to identify\n     * modified fields.\n     */\n    //endregion\n    /**\n     * Silences propagations caused by the project loading.\n     *\n     * Applying the loaded data to the project occurs in two basic stages:\n     *\n     * 1. Data gets into the engine graph which triggers changes propagation\n     * 2. The changes caused by the propagation get written to related stores\n     *\n     * Setting this flag to `true` makes the component perform step 2 silently without triggering events causing reactions on those changes\n     * (like sending changes back to the server if `autoSync` is enabled) and keeping stores in unmodified state.\n     *\n     * This is safe if the loaded data is consistent so propagation doesn't really do any adjustments.\n     * By default the system treats the data as consistent so this option is `true`.\n     *\n     * ```js\n     * new Scheduler({\n     *     project : {\n     *         // We want scheduling engine to recalculate the data properly\n     *         // so then we could save it back to the server\n     *         silenceInitialCommit : false\n     *     }\n     *     ...\n     * })\n     * ```\n     *\n     * @config {Boolean} silenceInitialCommit\n     * @default true\n     * @category Advanced\n     */\n    construct(...args) {\n        super.construct(...args);\n        if (VersionHelper.isTestEnv) {\n            globalThis.bryntum.testProject = this;\n        }\n        // Moved here from EventStore, since project is now the container instead of it\n        this.modelPersistencyManager = this.createModelPersistencyManager();\n    }\n    /**\n     * Creates and returns model persistency manager\n     *\n     * @returns {Scheduler.data.util.ModelPersistencyManager}\n     * @internal\n     */\n    createModelPersistencyManager() {\n        return new ModelPersistencyManager({\n            eventStore      : this,\n            resourceStore   : this.resourceStore,\n            assignmentStore : this.assignmentStore,\n            dependencyStore : this.dependencyStore\n        });\n    }\n    doDestroy() {\n        this.modelPersistencyManager.destroy();\n        super.doDestroy();\n    }\n    // To comply with TaskBoards expectations\n    get taskStore() {\n        return this.eventStore;\n    }\n}\nProjectModel.applyConfigs = true;\nProjectModel.initClass();\nProjectModel._$name = 'ProjectModel';", "import ResourceStore from './ResourceStore.js';\nimport EventStore from './EventStore.js';\nimport AssignmentStore from './AssignmentStore.js';\nimport DependencyStore from './DependencyStore.js';\nimport Store from '../../Core/data/Store.js';\nimport ProjectCrudManager from './mixin/ProjectCrudManager.js';\nimport AbstractCrudManager from '../crud/AbstractCrudManager.js';\nimport AjaxTransport from '../crud/transport/AjaxTransport.js';\nimport JsonEncoder from '../crud/encoder/JsonEncoder.js';\nimport ProjectModel from '../model/ProjectModel.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\n/**\n * @module Scheduler/data/CrudManager\n */\n/**\n * The Crud Manager (or \"CM\") is a class implementing centralized loading and saving of data in multiple stores.\n * Loading the stores and saving all changes is done using a single request. The stores managed by CRUD manager should\n * not be configured with their own CRUD URLs or use {@link Core/data/AjaxStore#config-autoLoad}/{@link Core/data/AjaxStore#config-autoCommit}.\n *\n * This class uses JSON as its data encoding format.\n *\n * ## Scheduler stores\n *\n * The class supports Scheduler specific stores (namely: resource, event, assignment and dependency stores).\n * For these stores, the CM has separate configs ({@link #config-resourceStore}, {@link #config-eventStore},\n * {@link #config-assignmentStore}) to register them.\n *\n * ```javascript\n * const crudManager = new CrudManager({\n *     autoLoad        : true,\n *     resourceStore   : resourceStore,\n *     eventStore      : eventStore,\n *     assignmentStore : assignmentStore,\n *     transport       : {\n *         load : {\n *             url : 'php/read.php'\n *         },\n *         sync : {\n *             url : 'php/save.php'\n *         }\n *     }\n * });\n * ```\n *\n * ## AJAX request configuration\n *\n * To configure AJAX request parameters please take a look at the\n * {@link Scheduler/crud/transport/AjaxTransport} docs.\n *\n * ```javascript\n * const crudManager = new CrudManager({\n *     autoLoad        : true,\n *     resourceStore,\n *     eventStore,\n *     assignmentStore,\n *     transport       : {\n *         load    : {\n *             url         : 'php/read.php',\n *             // use GET request\n *             method      : 'GET',\n *             // pass request JSON in \"rq\" parameter\n *             paramName   : 'rq',\n *             // extra HTTP request parameters\n *             params      : {\n *                 foo     : 'bar'\n *             },\n *             // pass some extra Fetch API option\n *             credentials : 'include'\n *         },\n *         sync : {\n *             url : 'php/save.php'\n *         }\n *     }\n * });\n * ```\n *\n * ## Using inline data\n *\n * The CrudManager provides settable property {@link #property-inlineData} that can\n * be used to get data from all {@link #property-crudStores} at once and to set this\n * data as well. Populating the stores this way can be useful if you cannot or you do not want to use CrudManager for\n * server requests but you pull the data by other means and have it ready outside CrudManager. Also, the data from all\n * stores is available in a single assignment statement.\n *\n * ### Getting data\n * ```javascript\n * const data = scheduler.crudManager.inlineData;\n *\n * // use the data in your application\n * ```\n *\n * ### Setting data\n * ```javascript\n * const data = // your function to pull server data\n *\n * scheduler.crudManager.inlineData = data;\n * ```\n *\n * ## Load order\n *\n * The CM is aware of the proper load order for Scheduler specific stores so you don't need to worry about it.\n * If you provide any extra stores (using {@link #config-stores} config) they will be\n * added to the start of collection before the Scheduler specific stores.\n * If you need a different loading order, you should use {@link #function-addStore} method to\n * register your store:\n *\n * ```javascript\n * const crudManager = new CrudManager({\n *     resourceStore   : resourceStore,\n *     eventStore      : eventStore,\n *     assignmentStore : assignmentStore,\n *     // extra user defined stores will get to the start of collection\n *     // so they will be loaded first\n *     stores          : [ store1, store2 ],\n *     transport       : {\n *         load : {\n *             url : 'php/read.php'\n *         },\n *         sync : {\n *             url : 'php/save.php'\n *         }\n *     }\n * });\n *\n * // append store3 to the end so it will be loaded last\n * crudManager.addStore(store3);\n *\n * // now when we registered all the stores let's load them\n * crudManager.load();\n * ```\n *\n * ## Assignment store\n *\n * The Crud Manager is designed to use {@link Scheduler/data/AssignmentStore} for assigning events to one or multiple resources.\n * However if server provides `resourceId` for any of the `events` then the Crud Manager enables backward compatible mode when\n * an event could have a single assignment only. This also disables multiple assignments in Scheduler UI.\n * In order to use multiple assignments server backend should be able to receive/send `assignments` for `load` and `sync` requests.\n *\n * ## Project\n *\n * The Crud Manager automatically consumes stores of the provided project (namely its {@link Scheduler/model/ProjectModel#property-eventStore},\n * {@link Scheduler/model/ProjectModel#property-resourceStore}, {@link Scheduler/model/ProjectModel#property-assignmentStore},\n * {@link Scheduler/model/ProjectModel#property-dependencyStore}, {@link Scheduler/model/ProjectModel#property-timeRangeStore} and\n * {@link Scheduler/model/ProjectModel#property-resourceTimeRangeStore}):\n *\n * ```javascript\n * const crudManager = new CrudManager({\n *     // crud manager will get stores from myAppProject project\n *     project   : myAppProject,\n *     transport : {\n *         load : {\n *             url : 'php/read.php'\n *         },\n *         sync : {\n *             url : 'php/save.php'\n *         }\n *     }\n * });\n * ```\n *\n * @mixes Scheduler/data/mixin/ProjectCrudManager\n * @mixes Scheduler/crud/encoder/JsonEncoder\n * @mixes Scheduler/crud/transport/AjaxTransport\n * @extends Scheduler/crud/AbstractCrudManager\n */\nexport default class CrudManager extends AbstractCrudManager.mixin(ProjectCrudManager, AjaxTransport, JsonEncoder) {\n    static $name = 'CrudManager';\n    //region Config\n    static get defaultConfig() {\n        return {\n            projectClass         : ProjectModel,\n            resourceStoreClass   : ResourceStore,\n            eventStoreClass      : EventStore,\n            assignmentStoreClass : AssignmentStore,\n            dependencyStoreClass : DependencyStore,\n            /**\n             * A store with resources (or a config object).\n             * @config {Scheduler.data.ResourceStore|ResourceStoreConfig}\n             */\n            resourceStore : {},\n            /**\n             * A store with events (or a config object).\n             *\n             * ```\n             * crudManager : {\n             *      eventStore {\n             *          storeClass : MyEventStore\n             *      }\n             * }\n             * ```\n             * @config {Scheduler.data.EventStore|EventStoreConfig}\n             */\n            eventStore : {},\n            /**\n             * A store with assignments (or a config object).\n             * @config {Scheduler.data.AssignmentStore|AssignmentStoreConfig}\n             */\n            assignmentStore : {},\n            /**\n             * A store with dependencies(or a config object).\n             * @config {Scheduler.data.DependencyStore|DependencyStoreConfig}\n             */\n            dependencyStore : {},\n            /**\n             * A project that holds and links stores\n             * @config {Scheduler.model.ProjectModel}\n             */\n            project : null\n        };\n    }\n    //endregion\n    buildProject() {\n        return new this.projectClass(this.buildProjectConfig());\n    }\n    buildProjectConfig() {\n        return ObjectHelper.cleanupProperties({\n            eventStore             : this.eventStore,\n            resourceStore          : this.resourceStore,\n            assignmentStore        : this.assignmentStore,\n            dependencyStore        : this.dependencyStore,\n            resourceTimeRangeStore : this.resourceTimeRangeStore\n        });\n    }\n    //region Stores\n    set project(project) {\n        const me = this;\n        if (project !== me._project) {\n            me.detachListeners('beforeDataReady');\n            me.detachListeners('afterDataReady');\n            me._project = project;\n            if (project) {\n                me.eventStore             = project.eventStore;\n                me.resourceStore          = project.resourceStore;\n                me.assignmentStore        = project.assignmentStore;\n                me.dependencyStore        = project.dependencyStore;\n                me.timeRangeStore         = project.timeRangeStore;\n                me.resourceTimeRangeStore = project.resourceTimeRangeStore;\n                // When adding multiple events to the store it will trigger multiple change events each of which will\n                // call crudManager.hasChanges, which will try to actually get the changeset package. It takes some time\n                // and we better skip that part for the dataready event, suspending changes tracking.\n                project.ion({\n                    name      : 'beforeDataReady',\n                    dataReady : () => me.suspendChangeTracking(),\n                    prio      : 100,\n                    thisObj   : me\n                });\n                project.ion({\n                    name      : 'afterDataReady',\n                    dataReady : () => me.resumeChangeTracking(),\n                    prio      : -100,\n                    thisObj   : me\n                });\n            }\n            if (!me.eventStore) {\n                me.eventStore = {};\n            }\n            if (!me.resourceStore) {\n                me.resourceStore = {};\n            }\n            if (!me.assignmentStore) {\n                me.assignmentStore = {};\n            }\n            if (!me.dependencyStore) {\n                me.dependencyStore = {};\n            }\n        }\n    }\n    get project() {\n        return this._project;\n    }\n    /**\n     * Store for {@link Scheduler/feature/TimeRanges timeRanges} feature.\n     * @property {Core.data.Store}\n     */\n    get timeRangeStore() {\n        return this._timeRangeStore?.store;\n    }\n    set timeRangeStore(store) {\n        this.setFeaturedStore('_timeRangeStore', store, this.project?.timeRangeStoreClass);\n    }\n    /**\n     * Store for {@link Scheduler/feature/ResourceTimeRanges resourceTimeRanges} feature.\n     * @property {Core.data.Store}\n     */\n    get resourceTimeRangeStore() {\n        return this._resourceTimeRangeStore?.store;\n    }\n    set resourceTimeRangeStore(store) {\n        this.setFeaturedStore('_resourceTimeRangeStore', store, this.project?.resourceTimeRangeStoreClass);\n    }\n    /**\n     * Get/set the resource store bound to the CRUD manager.\n     * @property {Scheduler.data.ResourceStore}\n     */\n    get resourceStore() {\n        return this._resourceStore?.store;\n    }\n    set resourceStore(store) {\n        const me = this;\n        me.setFeaturedStore('_resourceStore', store, me.resourceStoreClass);\n    }\n    /**\n     * Get/set the event store bound to the CRUD manager.\n     * @property {Scheduler.data.EventStore}\n     */\n    get eventStore() {\n        return this._eventStore?.store;\n    }\n    set eventStore(store) {\n        const me = this;\n        me.setFeaturedStore('_eventStore', store, me.eventStoreClass);\n    }\n    /**\n     * Get/set the assignment store bound to the CRUD manager.\n     * @property {Scheduler.data.AssignmentStore}\n     */\n    get assignmentStore() {\n        return this._assignmentStore?.store;\n    }\n    set assignmentStore(store) {\n        this.setFeaturedStore('_assignmentStore', store, this.assignmentStoreClass);\n    }\n    /**\n     * Get/set the dependency store bound to the CRUD manager.\n     * @property {Scheduler.data.DependencyStore}\n     */\n    get dependencyStore() {\n        return this._dependencyStore?.store;\n    }\n    set dependencyStore(store) {\n        this.setFeaturedStore('_dependencyStore', store, this.dependencyStoreClass);\n    }\n    setFeaturedStore(property, store, storeClass) {\n        const\n            me       = this,\n            oldStore = me[property]?.store;\n        // if not the same store\n        if (oldStore !== store) {\n            // normalize store value (turn it into a storeClass instance if needed)\n            store = Store.getStore(store, store?.storeClass || storeClass);\n            if (oldStore) {\n                me.removeStore(oldStore);\n            }\n            me[property] = store && { store } || null;\n            // Adds configured scheduler stores to the store collection ensuring correct order\n            // unless they're already registered.\n            me.addPrioritizedStore(me[property]);\n        }\n        return me[property];\n    }\n    getChangesetPackage() {\n        const pack = super.getChangesetPackage();\n        // Remove assignments from changes if using single assignment mode (resourceId) or resourceIds\n        if (pack && (this.eventStore.usesSingleAssignment || this.eventStore.modelClass.fieldMap?.resourceIds?.persist)) {\n            delete pack[this.assignmentStore.storeId];\n            // No other changes?\n            if (!this.crudStores.some(storeInfo => pack[storeInfo.storeId])) {\n                return null;\n            }\n        }\n        return pack;\n    }\n    //endregion\n    get crudLoadValidationMandatoryStores() {\n        return [this._eventStore.storeId, this._resourceStore.storeId];\n    }\n};\nCrudManager._$name = 'CrudManager';", "/**\n * @module Scheduler/crud/mixin/CrudManagerView\n */\nimport LoadMaskable from '../../../Core/mixin/LoadMaskable.js';\nimport Mask from '../../../Core/widget/Mask.js';\n/**\n * Mixin to track Crud Manager requests to the server and mask the view during them. For masking, it\n * uses the {@link Core.mixin.LoadMaskable#config-loadMask} and {@link Core.mixin.LoadMaskable#config-syncMask}\n * properties.\n *\n * @mixin\n * @extends Core/mixin/LoadMaskable\n */\nexport default Target => class CrudManagerView extends Target.mixin(LoadMaskable) {\n    static get $name() {\n        return 'CrudManagerView';\n    }\n    static config = {\n        clearMaskDelay : null,\n        // Test environment may be in a poll wait for mask to disappear.\n        // Hiding the mask immediately, before the load sequence ends releases it too early\n        testConfig : {\n            clearMaskDelay : 0\n        }\n    };\n    //region Init\n    afterConstruct() {\n        super.afterConstruct();\n        const { crudManager, project } = this;\n        if (this.loadMask && (crudManager || project).isCrudManagerLoading) {\n            // Show loadMask if crud manager is already loading\n            this.onCrudManagerLoadStart();\n        }\n    }\n    //endregion\n    /**\n     * Applies the {@link Scheduler.crud.mixin.CrudManagerView#config-syncMask} as the\n     * {@link Core.widget.Widget#config-masked mask} for this widget.\n     * @internal\n     */\n    applySyncMask() {\n        const { syncMask } = this;\n        if (syncMask) {\n            this.masked = Mask.mergeConfigs(this.loadMaskDefaults, syncMask);\n        }\n    }\n    /**\n     * Hooks up crud manager listeners\n     * @private\n     * @category Store\n     */\n    bindCrudManager(crudManager) {\n        this.detachListeners('crudManager');\n        let additionalListeners = {};\n        // TaskBoard does not need suspending/resuming refreshes\n        if (!this.isTaskBoardBase) {\n            additionalListeners = {\n                beforeApplyResponse       : 'onCrudManagerBeforeApplyResponse',\n                applyResponse             : 'onCrudManagerApplyResponse',\n                beforeLoadCrudManagerData : 'onCrudManagerBeforeLoadCrudManagerData',\n                loadCrudManagerData       : 'onCrudManagerLoadCrudManagerData'\n            };\n        }\n        crudManager?.ion({\n            name             : 'crudManager',\n            loadStart        : 'onCrudManagerLoadStart',\n            beforeSend       : 'onCrudManagerBeforeSend',\n            load             : 'onCrudManagerLoad',\n            loadCanceled     : 'onCrudManagerLoadCanceled',\n            syncStart        : 'onCrudManagerSyncStart',\n            sync             : 'onCrudManagerSync',\n            syncCanceled     : 'onCrudManagerSyncCanceled',\n            requestFail      : 'onCrudManagerRequestFail',\n            responseReceived : 'onAjaxTransportResponseReceived',\n            ...additionalListeners,\n            thisObj          : this\n        });\n    }\n    onCrudManagerBeforeSend({ params }) {\n        this.applyStartEndParameters?.(params);\n    }\n    onCrudManagerLoadStart() {\n        // Show loadMask before crud manager starts loading\n        this.applyLoadMask();\n        this.toggleEmptyText?.();\n    }\n    onCrudManagerSyncStart() {\n        this.applySyncMask();\n    }\n    onCrudManagerBeforeApplyResponse() {\n        // Prevent redrawing for each applied change, instead do it once after all changes are applied\n        this.suspendRefresh();\n    }\n    onCrudManagerApplyResponse() {\n        // Repaint rows once after applying changes\n        this.resumeRefresh(true);\n    }\n    onCrudManagerBeforeLoadCrudManagerData() {\n        // Suspend when app calls loadCrudManagerData() directly\n        if (!this.crudManager.applyingLoadResponse) {\n            this.suspendRefresh();\n        }\n    }\n    async onCrudManagerLoadCrudManagerData() {\n        if (!this.crudManager.applyingLoadResponse) {\n            await this.project.commitAsync();\n            !this.isDestroyed && this.resumeRefresh(true);\n        }\n    }\n    onCrudManagerRequestFinalize(successful = true, requestType, response) {\n        const me = this;\n        if (successful) {\n            me.toggleEmptyText?.();\n        }\n        else {\n            if (!me.masked) {\n                me.applyLoadMask();\n            }\n            me.applyMaskError(\n                `<div class=\"b-grid-load-failure\">\n                    <div class=\"b-grid-load-fail\">${me.L(`L{GridBase.${requestType}FailedMessage}`)}</div>\n                    ${response && response.message ? `<div class=\"b-grid-load-fail\">${me.L('L{CrudManagerView.serverResponseLabel}')} ${response.message}</div>` : ''}\n                </div>`);\n        }\n    }\n    onCrudManagerLoadCanceled() {\n        this.onCrudManagerRequestFinalize(true, 'load');\n    }\n    onCrudManagerSyncCanceled() {\n        this.onCrudManagerRequestFinalize(true, 'sync');\n    }\n    onCrudManagerLoad() {\n        this.onCrudManagerRequestFinalize(true, 'load');\n    }\n    onCrudManagerSync() {\n        this.onCrudManagerRequestFinalize(true, 'sync');\n    }\n    onCrudManagerRequestFail({ requestType, response }) {\n        this.onCrudManagerRequestFinalize(false, requestType, response);\n    }\n    onAjaxTransportResponseReceived() {\n        const me = this;\n        if (me.clearMaskDelay != null) {\n            me.setTimeout(() => me.masked = null, me.clearMaskDelay);\n        }\n        else {\n            me.masked = null;\n        }\n    }\n    get widgetClass() {}\n};\n"],
  "mappings": "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",
  "names": ["dateFieldsToConvert", "TimeZonedDatesMixin_default", "Target", "_a", "timeZone", "field", "date", "me", "TimeZoneHelper", "rawChanges", "_b", "fieldName", "metaModified", "convertFields", "ObjectHelper", "store", "__publicField", "TimeSpan", "Model", "data", "args", "magnitude", "unit", "endDate", "duration", "durationUnit", "DateHelper", "startDate", "hasDuration", "s", "cls", "DomClassList", "result", "doNotRound", "Duration", "keepDuration", "toSet", "calcEndDate", "calcStartDate", "start", "end", "silent", "dates", "endDateMS", "startDateMS", "fieldOrClone", "value", "fromRelationUpdate", "skipAccessors", "validOnly", "triggerBeforeUpdate", "invalid", "useProp", "key", "func", "thisObj", "amount", "u", "timeSpan", "myStart", "myEnd", "splitPoint", "clone", "fullDuration", "eventStore", "assignmentStore", "oldDuration", "cloneDuration", "ownNewDuration", "unitsChanged", "assignment", "clonedData", "icsEventConfig", "timestamp", "startEnd", "version", "VersionHelper", "icsWrapConfig", "eventConfig", "icsItems", "eventItems", "blob", "BrowserHelper", "ResourceStoreMixin_default", "Base", "config", "record", "oldValue", "resource", "PartOfProject_default", "ResourceModelMixin_default", "events", "assignments", "name", "names", "firstInitial", "lastInitial", "calendar", "split", "iterable", "gen1Pending", "gen2Pending", "iterator", "gen1", "done", "gen2", "inBatchesBySize", "batchSize", "runningBatch", "el", "filter", "i", "drop", "howMany", "every", "some", "map", "reduce", "initialAcc", "acc", "uniqueOnly", "seen", "uniqueOnlyBy", "uniqueBy", "takeWhile", "concat", "iterators", "concatIterable", "iteratorsProducer", "ChainedIteratorClass", "_ChainedIteratorClass", "iter1", "iter2", "order", "element", "MemoizedIteratorClass", "ChainedIterator", "CI", "elements", "alreadyConsumed", "MemoizedIterator", "MI", "MixinInstanceOfProperty", "MixinStateProperty", "MixinWalkDepthState", "props", "level1", "level2", "topoLevel", "elementsAtLevel", "maxTopoLevel", "baseElements", "mixin", "elementsByTopoLevel", "mixins", "level", "mixin1", "mixin2", "MIXIN_ID", "identity", "a", "ZeroBaseClass", "MixinState", "getMixinState", "mixinLambda", "symbol", "mixinLambdaWrapper", "base", "extendedClass", "isInstanceOfStatic", "baseClass", "constructor", "mixinId", "newId", "self", "baseCls", "minimalClassConstructor", "hash", "nextHash", "wrapperCls", "minimalClass", "Mixin", "isMixinClass", "required", "lastRequirement", "requirements", "requirement", "index", "mixinState", "currentBaseClass", "currentIsSub", "currentIsSuper", "instance", "isInstanceOf", "MixinAny", "AbstractPartOfProjectGenericMixin", "superProto", "project", "CorePartOfProjectGenericMixin", "id", "AbstractPartOfProjectStoreMixin", "Store", "eventName", "param", "asyncEvents", "asyncEvent", "scope", "records", "AbstractPartOfProjectModelMixin", "joinedProject", "isReplacing", "isLeavingProjectStore", "CorePartOfProjectModelMixin", "changes", "keys", "invalidate", "setData", "CoreResourceMixin", "unresolved", "resourceStore", "skipAccessor", "EngineMixin", "ResourceModel", "GridRowModel", "PartOfBaseProject_default", "CorePartOfProjectStoreMixin", "dataAddRemoveActions", "AbstractResourceStoreMixin", "event", "isAddRemove", "res", "assignmentsForRemoval", "resourceRecord", "isDataset", "existingRecord", "CoreResourceStoreMixin", "removing", "AjaxStore", "ResourceStore", "EventStoreMixin_default", "filtersFunction", "FunctionHelper", "r", "options", "added", "eventRecord", "fn", "earliest", "latest", "excludeEvent", "allEvents", "eventToRemove", "all", "removeExistingAssignments", "oldResource", "newResource", "newResourceId", "eventRecords", "assignmentsToAdd", "resourceId", "resourceIds", "assignmentSet", "_c", "eventId", "rId", "toRemove", "assignmentRecord", "indexToRemove", "action", "params", "returnTrue", "notRecurring", "GetEventsMixin_default", "startOnly", "includeOccurrences", "allowPartial", "onlyAssigned", "dateMap", "dayTime", "getDateIndex", "lastDateRange", "passedFilter", "e", "eventStartDate", "eventEndDate", "isMilestone", "newDateRange", "Objects", "dateFilter", "storeFilterFn", "candidateEvents", "dateIndex", "eventSet", "indexName", "coincidingEvents", "length", "recurringEvents", "baseEventFilter", "occurrences", "lastDate", "bucket", "occurrence", "lastIntersectingDate", "indexNameMap", "indexProps", "emptyArray", "MILLIS_PER_DAY", "DayTime", "EventDayIndex", "dateMS", "returnKey", "ret", "entry", "removed", "replaced", "wasSet", "addedCount", "removedCount", "replacedCount", "newEvent", "outgoingEvent", "users", "proto", "RecurringTimeSpansMixin_default", "isRecurrenceRelatedFieldChange", "RecurringEventsMixin_default", "dayParseRegExp", "days", "RecurrenceDayRuleEncoder", "rawDay", "parsedDay", "day", "position", "rawDays", "frequencyToUnitRe", "frequencyToUnit", "frequency", "counter", "isFirst", "captureLastOccurrence", "lastOccurrenceDate", "AbstractRecurrenceIterator", "recurrence", "interval", "until", "count", "intervalEndDate", "timeSpanStart", "earliestVisibleDate", "sign", "borderDate", "delta", "year", "month", "dt", "positions", "datesLength", "processed", "occurrenceDate", "durationMS", "occurenceDate", "occurrenceDateMS", "earliestVisibleDateMS", "DailyRecurrenceIterator", "spansStart", "extraArgs", "delay", "intervalDuration", "delayInIntervals", "inView", "WeeklyRecurrenceIterator", "timeSpanStartMS", "weekStartDay", "startHours", "startMinutes", "startSeconds", "startMS", "weekDays", "weekStartDate", "b", "MonthlyRecurrenceIterator", "dayNum", "daysInMonth", "hasPositions", "processedDate", "monthDays", "weekDayPosition", "monthStartDate", "monthEndDate", "weekDay", "from", "till", "sortedMonthDates", "YearlyRecurrenceIterator", "months", "yearStartDate", "yearEndDate", "recurrenceIterators", "it", "convertStringOfIntegerItemsValue", "item", "convertStringOfItemsValue", "isEqualAsString", "value1", "value2", "convertInteger", "RecurrenceModel", "format", "rule", "values", "parts", "len", "part", "first", "timeSpanStartDate", "convertExceptionDatesValue", "dateFormat", "ArrayHelper", "serializeExceptionDatesValue", "RecurringTimeSpan_default", "recurringTimeSpan", "model", "recurrenceEnd", "recurrenceRule", "dateOrTimeSpan", "dateKey", "exceptionDates", "occurrenceMap", "meta", "globalOccurrences", "occurrenceKey", "onStartDate", "fieldMap", "occurrenceEndDate", "occurrenceIndex", "newExceptionDate", "oneDayMS", "EventModelMixin_default", "resources", "newResourceIds", "existingResourceIds", "toAdd", "wasPersistable", "copy", "ids", "fromApplyValue", "eventsSuspended", "resourceIdToUpdate", "mapping", "removingResource", "oldResourceId", "eventStartMidnight", "CoreEventMixin", "keepStart", "changed", "cachedAssignments", "changedStart", "changedEnd", "changedDuration", "calculate", "currentOrProposedStartDate", "currentOrProposedEndDate", "currentOrProposedDuration", "currentOrProposedDurationUnit", "adjustDurationToDST", "newStartDate", "dstDiff", "newEndDate", "newDuration", "AbstractHasAssignmentsMixin", "HasAssignmentsMixin", "assignmentCls", "CoreHasAssignmentsMixin", "deep", "CoreHasDependenciesMixin", "dependency", "SchedulerCoreEvent", "EventModel", "MIDNIGHT", "DayIndexMixin_default", "dayIndex", "dayIndices", "AbstractEventStoreMixin", "parent", "children", "flags", "dependenciesForRemoval", "dependencyStore", "CoreEventStoreMixin", "EventStore", "AssignmentModelMixin_default", "eventIdField", "resourceIdField", "eventField", "resourceField", "eventKey", "resourceKey", "unjoinedStores", "crudManager", "newValue", "asId", "recordOrId", "CoreAssignmentMixin", "update", "resolved", "AssignmentModel", "AssignmentStoreMixin_default", "newAssignments", "storage", "originalAssignment", "instanceOrId", "occurrenceAssignment", "instanceId", "occurrenceMeta", "filterFn", "fnSet", "filterFnSet", "mapResult", "assignmentSetupFn", "existingAssignment", "assignmentsToRemove", "isNotNumber", "CIFromSetOrArrayOrValue", "resolve", "match", "number", "AbstractAssignmentStoreMixin", "emptySet", "CoreAssignmentStoreMixin", "modelName", "AssignmentStore", "canonicalDependencyTypes", "DependencyBaseModel", "_DependencyBaseModel", "to", "fromEvent", "toEvent", "type", "lag", "lagUnit", "stores", "Type", "sourceDate", "targetDate", "classes", "highlighted", "raw", "rawValue", "CoreDependencyMixin", "DependencyModel", "fromSide", "toSide", "rtl", "types", "startSide", "endSide", "DependencyStoreMixin_default", "reduceFn", "flat", "depsGetterFn", "evt", "sourceEvent", "targetEvent", "dependencyOrFromId", "toId", "fromId", "dep", "AbstractDependencyStoreMixin", "CoreDependencyStoreMixin", "DependencyStore", "AbstractCrudManagerValidation_default", "storeInfo", "responded", "expectedResponse", "messages", "storeId", "mandatoryStores", "response", "requested", "missingRows", "missingRemoved", "phantomIdField", "modelClass", "idField", "respondedRows", "respondedRemoved", "showSupportShortSyncResponseNote", "row", "missingIds", "missingUpdatedRows", "requestDesc", "request", "warnings", "AbstractCrudManagerError", "CrudManagerRequestError", "cfg", "StringHelper", "storeSortFn", "lhs", "rhs", "sortProperty", "storeLoadSortFn", "storeSyncSortFn", "AbstractCrudManagerMixin_default", "Events_default", "Delayable_default", "url", "storeDesc", "descriptor", "storeIdProperty", "crudStoresIndex", "storeDescriptor", "fromStore", "foundStore", "collection", "pos", "sequenceKeys", "doSync", "error", "responseText", "fetchOptions", "requestType", "skipChangeCheck", "eventParams", "pack", "optionsCopy", "opts", "pageSize", "rows", "reject", "load", "isTree", "phantomParentIdField", "subStoreFields", "subStore", "list", "writeAllFields", "rootNode", "recordData", "updated", "storeResponse", "storePack", "idDataSource", "requestUpdated", "requestRemoved", "remote", "respondedIds", "responseRecord", "extraLogEntries", "updateData", "recordRequest", "t", "extraLogInfo", "log", "logEntry", "transformFn", "logChanges", "storeLog", "rawResponse", "requestId", "signal", "usesSingleAssignment", "sync", "AjaxTransport_default", "AjaxTransport", "requestPromise", "packCfg", "method", "paramName", "transportConfig", "requestConfig", "ajaxPromise", "resultPromise", "performSend", "cancelled", "AjaxHelper", "callback", "beforeSendResult", "JsonEncoder_default", "requestData", "ProjectCrudManager_default", "startDateField", "endDateField", "_d", "_e", "_f", "propagationFlag", "loud", "stmDisabled", "rest", "changesMap", "AbstractCrudManager", "json", "dataName", "ProjectModelCommon_default", "dependencies", "timeRanges", "ResourceTimeRangeModel", "ResourceTimeRangeStore", "resourceTimeRange", "range", "span1", "span2", "StoreTimeZonePlugin", "InstancePlugin", "isDataSet", "bl", "o", "ProjectModelTimeZoneMixin_default", "source", "stmAutoRecord", "oldTimeZone", "isConfiguring", "TimeRangeModel", "TimeRangeStore", "ProjectModelMixin_default", "inlineData", "oldStore", "resourceTimeRanges", "ProjectCurrentConfig_default", "storeName", "storeState", "ModelPersistencyManager", "newEventStore", "newResourceStore", "newAssignmentStore", "newDependencyStore", "recordsToCreate", "diffSecond", "diff", "later", "searchElement", "n", "k", "arr", "zeroIsLast", "val", "extent", "cur", "zeroIsLargest", "nextIdx", "min", "max", "zeroVal", "next", "prevIdx", "d", "DMax", "dcMax", "dyMax", "m", "inc", "cache", "wmMax", "wThur", "YThur", "dwFirst", "dwLast", "wyThur", "wyMax", "wyStart", "wyEnd", "constraint", "schedDef", "constraints", "constraintsLen", "tickConstraint", "nameParts", "mod", "vals", "ra", "rb", "compareFn", "dir", "nextVal", "maxAttempts", "curVal", "newVal", "compare", "sched", "schedules", "schedulesLen", "exceptions", "exceptionsLen", "j", "getInstances", "isRange", "loopCount", "schedStarts", "exceptStarts", "results", "isForward", "lastResult", "rStart", "rEnd", "setNextStarts", "setRangeStarts", "findNext", "updateRangeStarts", "calcRangeOverlap", "updateNextStarts", "maxEndDate", "calcMaxEndDate", "calcEnd", "getStart", "tickStarts", "cleanDate", "schedArr", "startsArr", "rangesArr", "nextStart", "newStart", "minEndDate", "exceptsArr", "scheduleTimeout", "now", "useLocalTime", "Y", "M", "D", "h", "get", "period", "expr", "hasSeconds", "NAMES", "REPLACEMENTS", "FIELDS", "getValue", "offset", "cloneSchedule", "add", "addHash", "curSched", "addWeekday", "except1", "except2", "addRange", "incSplit", "rangeSplit", "parse", "isHash", "itemSorter", "parseExpr", "schedule", "components", "f", "component", "items", "prepareExpr", "prepared", "curArr", "curName", "modifier", "applyMin", "applyMax", "last", "x", "custom", "str", "recur", "input", "TOKENTYPES", "text", "peek", "expected", "scanTokens", "whiteSpace", "token", "curInput", "scanToken", "scan", "expectedToken", "parseThroughExpr", "tokenType", "parseTokenValue", "checkAndParse", "nums", "parseRanges", "parseEvery", "num", "parseTimePeriod", "parseToken", "parseOnThe", "parseScheduleExpr", "timePeriod", "found", "convertString", "output", "hour", "later_default", "CalendarIntervalMixin", "priority", "CalendarIntervalStore", "TimeUnit", "ProjectConstraintResolution", "ConstraintType", "SchedulingMode", "DependencyValidationResult", "DependencyType", "DependenciesCalendar", "ProjectType", "Direction", "isEqualEffectiveDirection", "ConstraintIntervalSide", "MIN_DATE", "MAX_DATE", "isDateFinite", "time", "EdgeInclusion", "CalendarIteratorResult", "CalendarCache", "cacheFilledStartDateN", "cacheFilledEndDateN", "startDateN", "endDateN", "_1", "_2", "maxRange", "intervalCache", "cacheCursorDate", "cursorDate", "rangeStart", "cycle", "intervalStartDate", "countFrom", "countTill", "stripDuplicates", "array", "CalendarCacheInterval", "_CalendarCacheInterval", "intervals", "filtered", "interval1", "interval2", "binarySearch", "comparator", "left", "right", "mid", "IndexPosition", "SortedMap", "search", "IntervalCache", "edgeInclusion", "startDateIndex", "extendInterval", "points", "curIndex", "lastUpdatedPoint", "inclusion", "existingInterval", "label", "CalendarCacheSingle", "NEVER", "startSchedule", "endSchedule", "wrappingStartDate", "wrappingEndDate", "nextEndDate", "wrappingStartDates", "wrappingEndDates", "startDates", "endDates", "recStartDate", "recEndDate", "existingCacheInterval", "UnspecifiedTimeIntervalModel", "AbstractCalendarMixin", "CalendarMixin", "durationMs", "finalDate", "calendarCacheInterval", "allowNegative", "multiplier", "workingDate", "unspecifiedTimeInterval", "child", "before", "hasWorkingTime", "_intervalStartDate", "_intervalEndDate", "fullyContained", "workingTimeStart", "CoreCalendarMixin", "AbstractCalendarManagerStoreMixin", "CoreCalendarManagerStoreMixin", "EventsWrapper", "DelayableWrapper", "AbstractProjectMixin", "silenceInitialCommit", "deferId", "SchedulerCoreProjectMixin", "calendarsData", "eventsData", "dependenciesData", "resourcesData", "assignmentsData", "node", "storeClass", "stm", "oldEvent", "calendarManagerStore", "isInitialCommit", "silenceCommit", "StateTrackingManager", "ProjectModel", "CrudManager", "property", "CrudManagerView_default", "LoadMaskable_default", "syncMask", "Mask", "additionalListeners", "successful"]
}
