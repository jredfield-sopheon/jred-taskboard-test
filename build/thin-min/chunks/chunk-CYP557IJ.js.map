{
  "version": 3,
  "sources": ["../../../../Core/lib/Core/widget/Slider.js"],
  "sourcesContent": ["import Widget from './Widget.js';\nimport Tooltip from './Tooltip.js';\nimport Rectangle from '../helper/util/Rectangle.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\n/**\n * @module Core/widget/Slider\n */\nconst arrowKeys = {\n    ArrowUp    : 1,\n    ArrowDown  : 1,\n    ArrowLeft  : 1,\n    ArrowRight : 1\n};\n/**\n * Wraps native &lt;input type=\"range\"&gt;\n *\n * ```javascript\n * let slider = new Slider({\n *   text: 'Choose value'\n * });\n * ```\n *\n * {@inlineexample Core/widget/Slider.js}\n *\n * @extends Core/widget/Widget\n * @classtype slider\n * @widget\n */\nexport default class Slider extends Widget {\n    //region Config\n    static $name = 'Slider';\n    static type = 'slider';\n    static get configurable() {\n        return {\n            /**\n             * Get input element.\n             * @readonly\n             * @member {HTMLInputElement} input\n             */\n            /**\n             * Get/set text. Appends value if Slider.showValue is true\n             * @member {String} text\n             */\n            /**\n             * Slider label text\n             * @config {String}\n             */\n            text : null,\n            /**\n             * Show value in label (appends in () if text is set)\n             * @config {Boolean}\n             * @default\n             */\n            showValue : true,\n            /**\n             * Show the slider value in a tooltip\n             * @config {Boolean}\n             * @default\n             */\n            showTooltip : false,\n            /**\n             * Get/set min value\n             * @member {Number} min\n             */\n            /**\n             * Minimum value\n             * @config {Number}\n             * @default\n             */\n            min : 0,\n            /**\n             * Get/set max value\n             * @member {Number} max\n             */\n            /**\n             * Maximum value\n             * @config {Number}\n             * @default\n             */\n            max : 100,\n            /**\n             * Get/set step size\n             * @member {Number} step\n             */\n            /**\n             * Step size\n             * @config {Number}\n             * @default\n             */\n            step : 1,\n            /**\n             * Get/set value\n             * @member {Number} value\n             */\n            /**\n             * Initial value\n             * @config {Number}\n             */\n            value : 50,\n            /**\n             * Unit to display next to the value, when configured with `showValue : true`\n             * @config {String}\n             * @default\n             */\n            unit : null,\n            // The value is set in the Light theme. The Material theme will have different value.\n            thumbSize : 20,\n            /**\n             * A config object for the tooltip to show while hovering the slider.\n             * @config {TooltipConfig}\n             */\n            tooltip : {\n                $config : ['lazy', 'nullify'],\n                value   : {\n                    type     : 'tooltip',\n                    align    : 'b-t',\n                    anchor   : false, // No anchor displayed since thumbSize is different for different themes\n                    axisLock : true\n                }\n            },\n            localizableProperties : ['text'],\n            /**\n             * By default, the {@link #event-change} event is fired when a change gesture is completed, ie: on\n             * the mouse up gesture of a drag.\n             *\n             * Configure this as `true` to fire the {@link #event-change} event as the value changes *during* a drag.\n             * @prp {Boolean}\n             */\n            triggerChangeOnInput : null,\n            defaultBindProperty : 'value'\n        };\n    }\n    //endregion\n    //region Init\n    compose() {\n        const\n            { id, min, max, showValue, step, text, value, unit = '', disabled } = this,\n            inputId = `${id}-input`,\n            hasText = Boolean(text || showValue);\n        return {\n            class : {\n                'b-has-label' : hasText,\n                'b-text'      : hasText,\n                'b-disabled'  : disabled\n            },\n            children : {\n                input : {\n                    tag                          : 'input',\n                    type                         : 'range',\n                    id                           : inputId,\n                    reference                    : 'input',\n                    [disabled ? 'disabled' : ''] : disabled,\n                    min,\n                    max,\n                    step,\n                    value,\n                    // eslint-disable-next-line bryntum/no-listeners-in-lib\n                    listeners : {\n                        input     : 'onInternalInput',\n                        change    : 'onInternalChange',\n                        mouseover : 'onInternalMouseOver',\n                        mouseout  : 'onInternalMouseOut'\n                    }\n                },\n                label : {\n                    tag  : 'label',\n                    for  : inputId,\n                    html : showValue ? (text ? `${text} (${value}${unit})` : value + unit) : text\n                }\n            }\n        };\n    }\n    get focusElement() {\n        return this.input;\n    }\n    get percentProgress() {\n        return (this.value - this.min) / (this.max - this.min) * 100;\n    }\n    //endregion\n    //region Events\n    /**\n     * Fired while slider thumb is being dragged.\n     * @event input\n     * @param {Core.widget.Slider} source The slider\n     * @param {Number} value The value\n     */\n    /**\n     * Fired after the slider value changes (on mouse up following slider interaction).\n     * @event change\n     * @param {Number} value The value\n     * @param {Boolean} userAction Triggered by user taking an action (`true`) or by setting a value (`false`)\n     * @param {Core.widget.Slider} source The slider\n     */\n    /* break from doc comment */\n    onInternalKeyDown(e) {\n        // Contain arrow keys to be processed by the <input type=\"range\">, do not allow them to bubble\n        // up to by any owning container.\n        if (!this.readOnly && arrowKeys[e.key]) {\n            e.stopImmediatePropagation();\n        }\n    }\n    onInternalChange() {\n        this.updateUI();\n        this.triggerChange(true);\n        this.trigger('action', { value : this.value });\n    }\n    onInternalInput() {\n        const me = this;\n        if (me.readOnly) {\n            // Undo the change if we are readOnly.\n            // readOnly input attribute will not work for non-text fields: https://github.com/w3c/html/issues/89\n            me.input.value = me.value;\n            return;\n        }\n        me.value = parseInt(me.input.value, 10);\n        me.trigger('input', { value : me.value });\n        if (me.triggerChangeOnInput) {\n            me.triggerChange(me);\n        }\n    }\n    onInternalMouseOver() {\n        const\n            me            = this,\n            thumbPosition = me.rtl ? 100 - me.percentProgress : me.percentProgress;\n        me.tooltip?.showBy({\n            target : Rectangle.from(me.input).inflate(me.thumbSize / 2, -me.thumbSize / 2),\n            align  : `b-t${Math.round(thumbPosition)}`\n        });\n    }\n    onInternalMouseOut() {\n        this.tooltip?.hide();\n    }\n    triggerChange(userAction) {\n        this.triggerFieldChange({\n            value : this.value,\n            valid : true,\n            userAction\n        });\n    }\n    //endregion\n    //region Config Handling\n    // max\n    updateMax(max) {\n        const me = this;\n        if (me.input && me._value > max) {\n            me.value = max;\n            me.trigger('input', { value : me.value });\n        }\n    }\n    // min\n    updateMin(min) {\n        const me = this;\n        if (me.input && me._value < min) {\n            me.value = min;\n            me.trigger('input', { value : me.value });\n        }\n    }\n    // tooltip\n    changeTooltip(config, existingTooltip) {\n        if (config) {\n            config.owner = this;\n        }\n        return this.showTooltip ? Tooltip.reconfigure(existingTooltip, config, {\n            owner    : this,\n            defaults : {\n                forElement : this.input,\n                html       : String(this.value) + (this.unit ?? '')\n            }\n        }) : null;\n    }\n    changeValue(value) {\n        const\n            me            = this,\n            { min, step } = me;\n        value = Math.min(Math.max(value, min), me.max);\n        // Round the passed value so that it is in sync with our steps.\n        // For example, if our min is 10, and our step is 3, then\n        // passing 12 should get 13. Rounding the value directly to the closest\n        // step would fail this requirement.\n        if (value > min) {\n            return min + ObjectHelper.roundTo(value - min, step);\n        }\n        return ObjectHelper.roundTo(value, step);\n    }\n    updateValue(value) {\n        const\n            me = this,\n            { input, _tooltip } = me;\n        if (_tooltip) {\n            _tooltip.html = me.value + (me.unit ?? '');\n        }\n        if (input && input.value !== String(value)) {\n            input.value = value;\n            me.triggerChange(false);\n        }\n        me.updateUI();\n    }\n    //endregion\n    //region Util\n    updateUI() {\n        const me = this;\n        // Don't measure the UI unless we need to\n        me._tooltip?.isVisible && me._tooltip?.alignTo({\n            target : Rectangle.from(me.input).inflate(me.thumbSize / 2, -me.thumbSize / 2),\n            align  : `b-t${Math.round(me.percentProgress)}`\n        });\n    }\n    //endregion\n}\n// Register this widget type with its Factory\nSlider.initClass();\nSlider._$name = 'Slider';"],
  "mappings": "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",
  "names": ["arrowKeys", "Slider", "Widget", "id", "min", "max", "showValue", "step", "text", "value", "unit", "disabled", "inputId", "hasText", "e", "me", "_a", "thumbPosition", "Rectangle", "userAction", "config", "existingTooltip", "Tooltip", "ObjectHelper", "input", "_tooltip", "_b", "__publicField"]
}
