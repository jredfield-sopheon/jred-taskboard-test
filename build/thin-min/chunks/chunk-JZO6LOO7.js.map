{
  "version": 3,
  "sources": ["../../../../Grid/lib/Grid/feature/RowReorder.js", "../../../../Grid/lib/Grid/feature/mixin/SummaryFormatter.js", "../../../../Grid/lib/Grid/feature/Summary.js"],
  "sourcesContent": ["/**\n * @module Grid/feature/RowReorder\n */\nimport GridFeatureManager from './GridFeatureManager.js';\nimport DragHelper from '../../Core/helper/DragHelper.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\n/**\n * Object with information about a tree position\n * @typedef {Object} RecordPositionContext\n * @property {Core.data.Model} record Tree node\n * @property {Number} parentIndex Index among parents children\n * @property {String|Number} parentId Parent node's id\n */\n/**\n * Allows user to reorder rows by dragging them. To get notified about row reorder listen to `change` event\n * on the grid {@link Core.data.Store store}.\n *\n * This feature is **disabled** by default. For info on enabling it, see {@link Grid.view.mixin.GridFeatures}.\n * This feature is **enabled** by default for Gantt.\n *\n * {@inlineexample Grid/feature/RowReorder.js}\n *\n * If the grid is set to {@link Grid.view.Grid#config-readOnly}, reordering is disabled. Inside all event listeners you\n * have access a `context` object which has a `record` property (the dragged record).\n *\n * ## Usage when grouping\n * Note that row reordering is not possible in a grid which is grouped using the {@link Grid.feature.TreeGroup}\n * feature because when this is in use, all records presented to the UI are linked records, **not** the\n * real records.\n *\n * Row reordering is also disabled when the store is grouped using the {@link Grid.feature.Group} feature and\n * the \"group by\" field is an array value. In this case records may also be present in more than one group\n * and so some records will be linked records, **not** the real records.\n *\n * ## Validation\n * You can validate the drag drop flow by listening to the `gridrowdrag` event. Inside this listener you have access to\n * the `index` property which is the target drop position. For trees you get access to the `parent` record and `index`,\n * where index means the child index inside the parent.\n *\n * You can also have an async finalization step using the {@link #event-gridRowBeforeDropFinalize}, for showing a\n * confirmation dialog or making a network request to decide if drag operation is valid (see code snippet below)\n *\n * ```javascript\n * features : {\n *     rowReorder : {\n *         showGrip : true\n *     },\n *     listeners : {\n *        gridRowDrag : ({ context }) => {\n *           // Here you have access to context.insertBefore, and additionally context.parent for trees\n *        },\n *\n *        gridRowBeforeDropFinalize : async ({ context }) => {\n *           const result = await MessageDialog.confirm({\n *               title   : 'Please confirm',\n *               message : 'Did you want the row here?'\n *           });\n *\n *           // true to accept the drop or false to reject\n *           return result === MessageDialog.yesButton;\n *        }\n *    }\n * }\n * ```\n *\n * Note, that this feature uses the concept of \"insert before\" when choosing a drop point in the data. So the dropped\n * record's position is *before the visual next record's position*.\n *\n * This may look like a pointless distinction, but consider the case when a Store is filtered. The record *above* the\n * drop point may have several filtered out records below it. When unfiltered, the dropped record will be *below* these\n * because of the \"insert before\" behaviour.\n *\n * ## Behavior with multiple subgrids\n *\n * For grids with multiple subgrids, row reordering is only enabled for the first subgrid.\n *\n * NOTE: This feature cannot be used simultaneously with the `enableTextSelection` config.\n *\n * @extends Core/mixin/InstancePlugin\n * @demo Grid/rowreordering\n * @classtype rowReorder\n * @feature\n */\nexport default class RowReorder extends Delayable(InstancePlugin) {\n    //region Events\n    /**\n     * Fired before dragging starts, return false to prevent the drag operation.\n     * @preventable\n     * @event gridRowBeforeDragStart\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {Core.data.Model[]} context.records The dragged row records\n     * @param {MouseEvent|TouchEvent} event\n     * @on-owner\n     */\n    /**\n     * Fired when dragging starts.\n     * @event gridRowDragStart\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {Core.data.Model[]} context.records The dragged row records\n     * @param {MouseEvent|TouchEvent} event\n     * @on-owner\n     */\n    /**\n     * Fired while the row is being dragged, in the listener function you have access to `context.insertBefore` a grid /\n     * tree record, and additionally `context.parent` (a TreeNode) for trees. You can signal that the drop position is\n     * valid or invalid by setting `context.valid = false;`\n     * @event gridRowDrag\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {Boolean} context.valid Set this to true or false to indicate whether the drop position is valid.\n     * @param {Core.data.Model} context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)\n     * @param {Core.data.Model} context.parent The parent record of the current drop position (only applicable for trees)\n     * @param {Core.data.Model[]} context.records The dragged row records\n     * @param {MouseEvent} event\n     * @on-owner\n     */\n    /**\n     * Fired before the row drop operation is finalized. You can return false to abort the drop operation, or a\n     * Promise yielding `true` / `false` which allows for asynchronous abort (e.g. first show user a confirmation dialog).\n     * @event gridRowBeforeDropFinalize\n     * @preventable\n     * @async\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {Boolean} context.valid Set this to true or false to indicate whether the drop position is valid\n     * @param {Core.data.Model} context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)\n     * @param {Core.data.Model} context.parent The parent record of the current drop position (only applicable for trees)\n     * @param {Core.data.Model[]} context.records The dragged row records\n     * @param {RecordPositionContext[]} context.oldPositionContext An array of objects with information about the previous tree position.\n     * Objects contain the `record`, and its original `parentIndex` and `parentId` values\n     * @param {MouseEvent} event\n     * @on-owner\n     */\n    /**\n     * Fired after the row drop operation has completed, regardless of validity\n     * @event gridRowDrop\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {Boolean} context.valid true or false depending on whether the drop position was valid\n     * @param {Core.data.Model} context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)\n     * @param {Core.data.Model} context.parent The parent record of the current drop position (only applicable for trees)\n     * @param {Core.data.Model} context.record [DEPRECATED] The dragged row record\n     * @param {Core.data.Model[]} context.records The dragged row records\n     * @param {RecordPositionContext[]} context.oldPositionContext An array of objects with information about the previous tree position.\n     * Objects contain the record, and its original `parentIndex` and `parentId` values\n     * @param {MouseEvent} event\n     * @on-owner\n     */\n    /**\n     * Fired when a row drag operation is aborted\n     * @event gridRowAbort\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {MouseEvent} event\n     * @on-owner\n     */\n    //endregion\n    //region Init\n    static $name = 'RowReorder';\n    static configurable = {\n        /**\n         * Set to `true` to show a grip icon on the left side of each row.\n         * @config {Boolean}\n         */\n        showGrip : null,\n        /**\n         * Set to `true` to only allow reordering by the {@link #config-showGrip} config\n         * @config {Boolean}\n         */\n        gripOnly : null,\n        /**\n         * If hovering over a parent node for this period of a time in a tree, the node will expand\n         * @config {Number}\n         */\n        hoverExpandTimeout : 1000,\n        /**\n         * The amount of milliseconds to wait after a touchstart, before a drag gesture will be allowed to start.\n         * @config {Number}\n         * @default\n         */\n        touchStartDelay : 300,\n        /**\n         * Enables creation of parents by dragging a row and dropping it onto a leaf row. Only works in a Grid with\n         * a tree store.\n         * @config {Boolean}\n         */\n        dropOnLeaf : false,\n        /**\n         * An object used to configure the internal {@link Core.helper.DragHelper} class\n         * @config {DragHelperConfig}\n         */\n        dragHelperConfig : null\n    };\n    static get deprecatedEvents() {\n        return {\n            gridRowBeforeDragStart : {\n                product            : 'Grid',\n                invalidAsOfVersion : '6.0.0',\n                message            : '`gridRowBeforeDragStart` event is deprecated, listen on this event on the Grid instead.'\n            },\n            gridRowDragStart : {\n                product            : 'Grid',\n                invalidAsOfVersion : '6.0.0',\n                message            : '`gridRowDragStart` event is deprecated, listen on this event on the Grid instead.'\n            },\n            gridRowDrag : {\n                product            : 'Grid',\n                invalidAsOfVersion : '6.0.0',\n                message            : '`gridRowDrag` event is deprecated, listen on this event on the Grid instead.'\n            },\n            gridRowBeforeDropFinalize : {\n                product            : 'Grid',\n                invalidAsOfVersion : '6.0.0',\n                message            : '`gridRowBeforeDropFinalize` event is deprecated, listen on this event on the Grid instead.'\n            },\n            gridRowDrop : {\n                product            : 'Grid',\n                invalidAsOfVersion : '6.0.0',\n                message            : '`gridRowDrop` event is deprecated, listen on this event on the Grid instead.'\n            },\n            gridRowAbort : {\n                product            : 'Grid',\n                invalidAsOfVersion : '6.0.0',\n                message            : '`gridRowAbort` event is deprecated, listen on this event on the Grid instead.'\n            }\n        };\n    }\n    construct(grid, config) {\n        this.grid = grid;\n        super.construct(...arguments);\n    }\n    doDestroy() {\n        this.dragHelper?.destroy();\n        super.doDestroy();\n    }\n    /**\n     * Initialize drag & drop (called on first paint)\n     * @private\n     */\n    init() {\n        const\n            me       = this,\n            { grid } = me;\n        me.dragHelper = DragHelper.new({\n            name               : 'rowReorder',\n            cloneTarget        : true,\n            dragThreshold      : 10,\n            proxyTopOffset     : 10,\n            targetSelector     : '.b-grid-row',\n            lockX              : true,\n            dragWithin         : grid.bodyContainer,\n            allowDropOutside   : true,\n            scrollManager      : grid.scrollManager,\n            outerElement       : me.targetSubGridElement,\n            touchStartDelay    : me.touchStartDelay,\n            isElementDraggable : me.isElementDraggable.bind(me),\n            monitoringConfig   : {\n                scrollables : [\n                    {\n                        element   : grid.scrollable.element,\n                        direction : 'vertical'\n                    }\n                ]\n            },\n            setXY(element, x, y) {\n                const { context } = this;\n                if (!context.started) {\n                    const\n                        elementRect       = Rectangle.from(context.element, this.dragWithin),\n                        pointerDownOffset = context.startPageY - globalThis.pageYOffset - context.element.getBoundingClientRect().top;\n                    // manually position the row a bit below the cursor\n                    y = elementRect.top + pointerDownOffset + this.proxyTopOffset;\n                }\n                DomHelper.setTranslateXY(element, x, y);\n            },\n            // Since parent nodes can expand after hovering, meaning original drag start position now refers to a different point in the tree\n            ignoreSamePositionDrop : false,\n            createProxy(element) {\n                const\n                    clone     = element.cloneNode(true),\n                    container = document.createElement('div');\n                container.classList.add('b-row-reorder-proxy');\n                clone.removeAttribute('id');\n                // The containing element will be positioned instead, and sized using CSS\n                clone.style.transform = '';\n                clone.style.width = '';\n                container.appendChild(clone);\n                if (grid.selectedRecords.length > 1) {\n                    const clone2 = clone.cloneNode(true);\n                    clone2.classList.add('b-row-dragging-multiple');\n                    container.appendChild(clone2);\n                }\n                DomHelper.removeClsGlobally(container, 'b-selected', 'b-hover', 'b-focused');\n                return container;\n            },\n            internalListeners : {\n                beforedragstart : 'onBeforeDragStart',\n                dragstart       : 'onDragStart',\n                drag            : 'onDrag',\n                drop            : 'onDrop',\n                abort           : 'onAbort',\n                reset           : 'onReset',\n                prio            : 10000, // To ensure our listener is run before the relayed listeners (for the outside world)\n                thisObj         : me\n            }\n        }, me.dragHelperConfig);\n        // Remove in 6.0\n        me.relayEvents(me.dragHelper, ['beforeDragStart', 'dragStart', 'drag', 'abort'], 'gridRow');\n        grid.relayEvents(me.dragHelper, ['beforeDragStart', 'dragStart', 'drag', 'abort'], 'gridRow');\n        me.dropIndicator = DomHelper.createElement({\n            className : 'b-row-drop-indicator'\n        });\n        me.dropOverTargetCls = ['b-row-reordering-target', 'b-hover'];\n    }\n    //endregion\n    //region Plugin config\n    static pluginConfig = {\n        after : ['onInternalPaint']\n    };\n    get targetSubGridElement() {\n        const targetSubGrid = this.grid.regions[0];\n        return this.grid.subGrids[targetSubGrid].element;\n    }\n    //endregion\n    //region Events (drop)\n    isElementDraggable(el, event) {\n        if (!el.closest('.b-grid-cell .b-widget')) {\n            if (this.gripOnly) {\n                const firstCell = el.closest('.b-grid-cell:first-child');\n                // Event is in the first cell. Now check if it's on the handle\n                if (firstCell) {\n                    const\n                        gripperStyle = getComputedStyle(firstCell, ':before'),\n                        offsetX      = this.grid.rtl ? firstCell.getBoundingClientRect().width - event.borderOffsetX : event.borderOffsetX,\n                        onGrip       = offsetX <= parseFloat(gripperStyle.width);\n                    // Prevent drag select if mousedown on grip, would collide with reordering\n                    // (reset by GridSelection)\n                    if (onGrip) {\n                        this.client.preventDragSelect = true;\n                    }\n                    return onGrip;\n                }\n            }\n            else {\n                return true;\n            }\n        }\n    }\n    onBeforeDragStart({ event, source, context }) {\n        const\n            me        = this,\n            { grid }  = me,\n            { group } = grid.features,\n            subGridEl = me.targetSubGridElement;\n        // Only dragging enabled in the leftmost grid section\n        if (event.target.classList.contains('b-rowexpander-shadowroot-container') || me.disabled || grid.readOnly || grid.isTreeGrouped || !subGridEl.contains(context.element)) {\n            return false;\n        }\n        const startRecord = context.startRecord = grid.getRecordFromElement(context.element);\n        // If store is grouped by an array field, then we cannot drag because any record may be\n        // a member of more than one group and without the StoreGroup#move method cannot add the correct new\n        // group value because the \"after\" record it is passed is always an original, never\n        // the linked record dropped upon.\n        if (group?.enabled && Array.isArray(startRecord[grid.features.group.field])) {\n            return false;\n        }\n        // Don't allow starting drag on a readOnly record nor on special rows\n        if (startRecord.readOnly || startRecord.isSpecialRow) {\n            return false;\n        }\n        context.originalRowTop = grid.rowManager.getRowFor(startRecord).top;\n        // Don't select row if checkboxOnly is set\n        if (!grid.selectionMode.checkboxOnly) {\n            if (source.startEvent.pointerType === 'touch') {\n                // Touchstart doesn't focus/navigate on its own, so we do it at the last moment before drag start\n                if (!grid.isSelected(startRecord)) {\n                    grid.selectRow({\n                        record         : startRecord,\n                        addToSelection : false\n                    });\n                }\n            }\n            else if (!grid.isSelected(startRecord) && !event.shiftKey && !event.ctrlKey) {\n                // If record is not selected and shift/ctrl is not pressed then select single row\n                grid.selectRow({\n                    record : startRecord\n                });\n            }\n        }\n        // Read-only records will not be moved\n        const selectedRecords = grid.selectedRecords.filter(r => !r.readOnly);\n        context.records       = [startRecord];\n        // If clicked record is selected, move all selected records\n        if (selectedRecords.includes(startRecord)) {\n            context.records.push(...selectedRecords.filter(r => r !== startRecord));\n            context.records.sort((r1, r2) => grid.store.indexOf(r1) - grid.store.indexOf(r2));\n        }\n        return true;\n    }\n    onDragStart({ context }) {\n        const\n            me                                 = this,\n            { grid }                           = me,\n            { cellEdit, cellMenu, headerMenu } = grid.features;\n        if (cellEdit) {\n            me.cellEditDisabledState = cellEdit.disabled;\n            cellEdit.disabled        = true; // prevent editing from being started through keystroke during row reordering\n        }\n        cellMenu?.hideContextMenu?.(false);\n        headerMenu?.hideContextMenu?.(false);\n        grid.element.classList.add('b-row-reordering');\n        const focusedCell = context.element.querySelector('.b-focused');\n        focusedCell?.classList.remove('b-focused');\n        context.element.firstElementChild.classList.remove('b-selected', 'b-hover');\n        grid.bodyContainer.appendChild(me.dropIndicator);\n    }\n    onDrag({ context, event }) {\n        const\n            me                    = this,\n            { grid }              = me,\n            { store, rowManager } = grid,\n            { clientY }           = event;\n        let valid = true,\n            row   = rowManager.getRowAt(clientY),\n            overRecord,\n            dataIndex,\n            after,\n            over,\n            insertBefore;\n        if (row) {\n            const\n                rowTop        = row.top + grid.scrollable.element.getBoundingClientRect().top - grid.scrollable.y,\n                quarter       = row.height / 4,\n                topQuarter    = rowTop + quarter,\n                middleY       = rowTop + row.height / 2,\n                bottomQuarter = rowTop + quarter * 3;\n            dataIndex  = row.dataIndex;\n            overRecord = store.getAt(dataIndex);\n            // If Tree and pointer is in quarter 2 and 3, add as child of hovered row\n            if (store.tree) {\n                over = (overRecord.isParent || me.dropOnLeaf) && clientY > topQuarter && clientY < bottomQuarter;\n            }\n            else if (store.isGrouped) {\n                over = overRecord.isGroupHeader && overRecord.meta.collapsed;\n            }\n            // Else, drop after row below if mouse is in bottom half of hovered row\n            after = !over && event.clientY >= middleY;\n        }\n        // User dragged below last row or above the top row.\n        else {\n            if (event.pageY < grid._bodyRectangle.y) {\n                dataIndex  = 0;\n                overRecord = store.first;\n                after      = false;\n            }\n            else {\n                dataIndex  = store.count - 1;\n                overRecord = store.last;\n                after      = true;\n            }\n            row = grid.rowManager.getRow(dataIndex);\n        }\n        if (overRecord === me.overRecord && me.after === after && me.over === over) {\n            context.valid = me.reorderValid;\n            // nothing's changed\n            return;\n        }\n        if (me.overRecord !== overRecord) {\n            rowManager.getRowById(me.overRecord)?.removeCls(me.dropOverTargetCls);\n        }\n        me.overRecord = overRecord;\n        me.after      = after;\n        me.over       = over;\n        if (\n            // Hovering the dragged record. This is a no-op.\n            // But still gather the contextual data.\n            overRecord === context.startRecord ||\n            // Not allowed to drop above topmost group header or below a collapsed header\n            (!after && !over && dataIndex === 0 && store.isGrouped) ||\n            // Not allowed to drop after last collapsed group\n            (after && overRecord.isGroupHeader && overRecord.meta.collapsed && store.indexOf(overRecord) === store.count - 1)\n        ) {\n            valid = false;\n        }\n        if (store.tree) {\n            insertBefore = after ? overRecord.nextSibling : overRecord;\n            // For trees, prevent moving a parent into its own hierarchy\n            if (context.records.some(rec => rec.contains(overRecord))) {\n                valid = false;\n            }\n            context.parent = valid && over ? overRecord : overRecord.parent;\n            me.clearTimeout(me.hoverTimer);\n            if (overRecord && overRecord.isParent && !overRecord.isExpanded(store)) {\n                me.hoverTimer = me.setTimeout(() => grid.expand(overRecord), me.hoverExpandTimeout);\n            }\n        }\n        else {\n            insertBefore = after ? store.getAt(dataIndex + 1) : overRecord;\n        }\n        row.toggleCls(me.dropOverTargetCls, valid && over);\n        // If hovering results in same dataIndex, regardless of what row is hovered, and parent has not changed\n        if (!over && dataIndex === store.indexOf(context.startRecord) + (after ? -1 : 1) &&\n            context.parent && context.startRecord.parent === context.parent) {\n            valid = false;\n        }\n        // Provide visual clue to user of the drop position\n        // In FF (in tests) it might not have had time to redraw rows after scroll before getting here\n        row && DomHelper.setTranslateY(me.dropIndicator, Math.max(row.top + (after ? row.element.getBoundingClientRect().height : 0), 1));\n        // Don't show dropIndicator if holding over a row\n        me.dropIndicator.style.visibility = over ? 'hidden' : 'visible';\n        me.dropIndicator.classList.toggle('b-drag-invalid', !valid);\n        // Public property used for validation\n        context.insertBefore = insertBefore;\n        context.valid = me.reorderValid = valid;\n    }\n    /**\n     * Handle drop\n     * @private\n     */\n    async onDrop(event) {\n        const\n            me          = this,\n            { client }  = me,\n            { context } = event;\n        context.valid = context.valid && me.reorderValid;\n        if (context.valid) {\n            context.async = true;\n            if (client.store.tree) {\n                // For tree scenario, add context about previous positions of dragged tree nodes\n                context.oldPositionContext = context.records.map((record) => ({\n                    record,\n                    parentId    : record.parent?.id,\n                    parentIndex : record.parentIndex\n                }));\n            }\n            // Remove for 6.0\n            let result = await me.trigger('gridRowBeforeDropFinalize', event);\n            if (result === false) {\n                context.valid = false;\n            }\n            // Outside world provided us one or more Promises to wait for\n            result = await client.trigger('gridRowBeforeDropFinalize', event);\n            if (result === false) {\n                context.valid = false;\n            }\n            await me.dragHelper.animateProxyTo(me.dropIndicator, { align : 'l0-l0' });\n            await me.finalizeReorder(context);\n        }\n        // already dropped the node, don't have to expand any node hovered anymore\n        // (cancelling expand action after timeout)\n        me.clearTimeout(me.hoverTimer);\n        me.overRecord = me.after = me.over = null;\n        me.trigger('gridRowDrop', event);\n        client.trigger('gridRowDrop', event);\n    }\n    onAbort(event) {\n        this.client.trigger('gridRowDragAbort', event);\n    }\n    async finalizeReorder(context) {\n        const\n            me                     = this,\n            { grid }               = me,\n            { store, focusedCell } = grid;\n        let { records } = context;\n        context.valid = context.valid && !records.some(rec => !store.includes(rec));\n        if (context.valid) {\n            let result;\n            if (store.tree) {\n                // Remove any selected child records of parent nodes\n                records = records.filter(record => !record.parent || record.bubbleWhile(parent => !records.includes(parent), true));\n                result = await context.parent.tryInsertChild(records, me.over ? context.parent.children?.[0] : context.insertBefore);\n                // remove reorder cls from preview parent element dropped\n                grid.rowManager.forEach(r => r.removeCls(me.dropOverTargetCls));\n                // If parent wasn't expanded, expand it if it now has children\n                if (!context.parent.isExpanded() && context.parent.children?.length) {\n                    grid.expand(context.parent);\n                }\n                context.valid = result !== false;\n            }\n            else if (store.isGrouped && me.over) {\n                store.move(records, store.getAt(store.indexOf(context.insertBefore) + 1));\n            }\n            else {\n                // When dragging multiple rows, ensure the insertBefore reference is not one of the selected records\n                if (records.length > 1) {\n                    while (context.insertBefore && records.includes(context.insertBefore)) {\n                        context.insertBefore = store.getNext(context.insertBefore, false, true);\n                    }\n                }\n                store.move(records, context.insertBefore);\n            }\n            if (focusedCell?._rowIndex >= 0) {\n                grid._focusedCell = null;\n                // Refresh focused cell\n                grid.focusCell({\n                    grid,\n                    record   : focusedCell.record,\n                    columnId : focusedCell.columnId\n                });\n            }\n            store.clearSorters();\n        }\n        context.finalize(context.valid);\n        grid.element.classList.remove('b-row-reordering');\n    }\n    /**\n     * Clean up on reset\n     * @private\n     */\n    onReset() {\n        const\n            me       = this,\n            { grid } = me,\n            cellEdit = grid.features.cellEdit;\n        grid.element.classList.remove('b-row-reordering');\n        if (cellEdit) {\n            cellEdit.disabled = me.cellEditDisabledState;\n        }\n        me.dropIndicator.remove();\n        DomHelper.removeClsGlobally(\n            grid.element,\n            ...me.dropOverTargetCls\n        );\n    }\n    //endregion\n    //region Render\n    onInternalPaint({ firstPaint }) {\n        // columns shown, hidden or reordered\n        if (firstPaint) {\n            this.init();\n        }\n    }\n    //endregion\n    updateShowGrip(show) {\n        this.grid.element.classList.toggle('b-row-reorder-with-grip', show);\n    }\n    get isDragging() {\n        return this.dragHelper.isDragging;\n    }\n}\nRowReorder.featureClass = '';\nRowReorder._$name = 'RowReorder'; GridFeatureManager.registerFeature(RowReorder, false);\n", "import Base from '../../../Core/Base.js';\n/**\n * @module Grid/feature/mixin/SummaryFormatter\n */\n/**\n * Mixin for Summary and GroupSummary that handles formatting sums.\n * @mixin\n * @private\n */\nexport default Target => class SummaryFormatter extends (Target || Base) {\n    static get $name() {\n        return 'SummaryFormatter';\n    }\n    /**\n     * Calculates sums and returns as a html table\n     * @param {Grid.column.Column} column Column to calculate sum for\n     * @param {Core.data.Model[]} records Records to include in calculation\n     * @param {String} cls CSS class to apply to summary table\n     * @param {Core.data.Model} groupRecord current group row record\n     * @param {String} groupField Current groups field name\n     * @param {String} groupValue Current groups value\n     * @returns {String} html content\n     */\n    generateHtml(column, records, cls, groupRecord, groupField, groupValue) {\n        const\n            store = this.store,\n            summaries = column.summaries ||\n                  (column.sum ? [{ sum : column.sum, renderer : column.summaryRenderer }] : []);\n        let html = `<div class=\"b-summary-wrap ${cls}\">`;\n        summaries.forEach(config => {\n            let type = config.sum,\n                sum  = null;\n            if (type === true) type = 'sum';\n            switch (type) {\n                case 'sum':\n                case 'add':\n                    sum = store.sum(column.field, records);\n                    break;\n                case 'max':\n                    sum = store.max(column.field, records);\n                    break;\n                case 'min':\n                    sum = store.min(column.field, records);\n                    break;\n                case 'average':\n                case 'avg':\n                    sum = store.average(column.field, records);\n                    break;\n                case 'count':\n                    sum = records.length;\n                    break;\n                case 'countNotEmpty':\n                    sum = records.reduce((sum, record) => {\n                        const value = record.getValue(column.field);\n                        return sum + (value != null ? 1 : 0);\n                    }, 0);\n                    break;\n            }\n            if (typeof type === 'function') {\n                sum = records.reduce(type, 'seed' in config ? config.seed : 0);\n            }\n            if (sum !== null) {\n                const\n                    valueCls  = 'b-grid-summary-value',\n                    // optional label\n                    labelHtml = config.label\n                        ? `<div class=\"b-grid-summary-label\">${config.label}</div>`\n                        : '';\n                // value to display, either using renderer or as is\n                let valueHtml = config.renderer\n                        ? config.renderer({ config, sum })\n                        : sum,\n                    summaryHtml;\n                if (valueHtml == null) {\n                    valueHtml = '';\n                }\n                // no <div>s in html, wrap it (always the case when not using renderer)\n                if (!String(valueHtml).includes('<div>')) {\n                    summaryHtml = labelHtml\n                        // has label, use returned html as value cell\n                        ? `${labelHtml}<div class=\"${valueCls}\">${valueHtml}</div>`\n                        // no label, span entire table\n                        : `<div class=\"${valueCls} b-nolabel\">${valueHtml}</div>`;\n                }\n                // user is in charge of giving correct formatting\n                else {\n                    summaryHtml = valueHtml;\n                }\n                html += summaryHtml;\n            }\n        });\n        return `${html}</div>`;\n    }\n};\n", "import DomHelper from '../../Core/helper/DomHelper.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\nimport SummaryFormatter from './mixin/SummaryFormatter.js';\n/**\n * @module Grid/feature/Summary\n */\n/**\n * @typedef {Object} ColumnSummaryConfig\n * @property {'sum'|'add'|'count'|'countNotEmpty'|'average'|Function} sum Summary type, see\n * {@link Grid/column/Column#config-sum} for details\n * @property {Function} renderer Renderer function for summary, see\n * {@link Grid/column/Column#config-summaryRenderer} for details\n * @property {*} seed Initial value when using a function as `sum`\n */\n/**\n * Displays a summary row in the grid footer.\n *\n * {@inlineexample Grid/feature/Summary.js}\n *\n * Specify type of summary on columns, available types are:\n * <dl class=\"wide\">\n * <dt>sum <dd>Sum of all values in the column\n * <dt>add <dd>Alias for sum\n * <dt>count <dd>Number of rows\n * <dt>countNotEmpty <dd>Number of rows containing a value\n * <dt>average <dd>Average of all values in the column\n * <dt>function <dd>A custom function, used with store.reduce. Should take arguments (sum, record)\n * </dl>\n * Columns can also specify a summaryRenderer to format the calculated sum.\n *\n * This feature is <strong>disabled</strong> by default.\n *\n * ```javascript\n * { text : 'Score', data : 'score', width : 80, sum : 'sum' }\n * { text : 'Rank', data : 'rank', width : 80, sum : 'average', summaryRenderer: ({ sum }) => return 'Average rank ' + sum }\n * ```\n *\n * Also, it is possible to set up multiple summaries as array of summary configs:\n * ```javascript\n * { text : 'Rank', data : 'rank', summaries : [{ sum : 'average', label : 'Average' }, { sum : 'count', label : 'Count' }] }\n * ```\n *\n * @extends Core/mixin/InstancePlugin\n * @demo Grid/features\n * @classtype summary\n * @feature\n */\nexport default class Summary extends SummaryFormatter(InstancePlugin) {\n    //region Config\n    static get configurable() {\n        return {\n            /**\n             * Set to `true` to sum values of selected row records\n             * @prp {Boolean}\n             */\n            selectedOnly : null,\n            hideFooters : false\n        };\n    }\n    // Plugin configuration. This plugin chains some of the functions in Grid.\n    static get pluginConfig() {\n        return {\n            chain : ['renderRows', 'bindStore']\n        };\n    }\n    //endregion\n    //region Init\n    static get $name() {\n        return 'Summary';\n    }\n    construct(grid, config) {\n        this.grid = grid;\n        super.construct(grid, config);\n        this.bindStore(grid.store);\n        grid.hideFooters = this.hideFooters;\n    }\n    bindStore(store) {\n        this.detachListeners('store');\n        store.ion({\n            name    : 'store',\n            change  : 'onStoreChange',\n            thisObj : this\n        });\n    }\n    get store() {\n        return this.grid.store;\n    }\n    doDestroy() {\n        super.doDestroy();\n    }\n    doDisable(disable) {\n        super.doDisable(disable);\n        const { client } = this;\n        if (disable) {\n            client.element.classList.add('b-summary-disabled');\n        }\n        else {\n            this.updateSummaries();\n            client.element.classList.remove('b-summary-disabled');\n            client.eachSubGrid(subGrid => subGrid.scrollable.syncPartners());\n        }\n    }\n    //endregion\n    //region Render\n    renderRows() {\n        this.updateSummaries();\n    }\n    /**\n     * Updates summaries. Summaries are displayed as tables in footer (styling left out to keep brief):\n     * ```\n     * <table>\n     *     <tr><td colspan=\"2\">0</td></tr> // { sum : 'min' } Only a calculation, span entire table\n     *     <tr><td>Max</td><td>10</td></tr> // { sum : 'max', label: 'Max' } Label + calculation\n     *     <tr><td>Max</td><td>10</td></tr> // { sum : 'sum', label: 'Max' } Label + calculation\n     * </table>\n     * ```\n     * @private\n     */\n    updateSummaries() {\n        const\n            me              = this,\n            { grid, store } = me,\n            cells           = DomHelper.children(grid.element, '.b-grid-footer'),\n            selectedOnly    = me.selectedOnly && grid.selectedRecords.length > 0,\n            records         = (store.isFiltered ? store.storage.values : store.allRecords).filter(r => !r.isSpecialRow && (!selectedOnly || grid.isSelected(r)));\n        // reset seeds, to not have ever increasing sums :)\n        grid.columns.forEach(column => {\n            column.summaries?.forEach(config => {\n                if ('seed' in config) {\n                    if (!('initialSeed' in config)) {\n                        config.initialSeed = config.seed;\n                    }\n                    if (['number', 'string', 'date'].includes(typeof config.initialSeed)) {\n                        config.seed = config.initialSeed;\n                    }\n                    else {\n                        // create shallow copy\n                        config.seed = Object.assign({}, config.initialSeed);\n                    }\n                }\n            });\n        });\n        cells.forEach(cellElement => {\n            // Skip for special columns like checkbox selection\n            if (!cellElement.dataset.column) {\n                return;\n            }\n            const\n                column = grid.columns.get(cellElement.dataset.column),\n                html   = me.generateHtml(column, records, 'b-grid-footer-summary');\n            if (column.summaries ? column.summaries.length : column.sum ? 1 : 0) {\n                // First time, set table\n                if (!cellElement.children.length) {\n                    cellElement.innerHTML = html;\n                }\n                // Following times, sync changes\n                else {\n                    DomHelper.sync(html, cellElement.firstElementChild);\n                }\n            }\n        });\n    }\n    //endregion\n    //region Events\n    /**\n     * Updates summaries on store changes (except record update, handled below)\n     * @private\n     */\n    onStoreChange({ action, changes }) {\n        let shouldUpdate = true;\n        if (this.disabled) {\n            return;\n        }\n        if (action === 'update') {\n            // only update summary when a field that affects summary is changed\n            shouldUpdate = Object.keys(changes).some(field => {\n                const colField = this.grid.columns.get(field);\n                // check existence, since a field not used in a column might have changed\n                return Boolean(colField) && (Boolean(colField.sum) || Boolean(colField.summaries));\n            });\n        }\n        if (shouldUpdate) {\n            this.updateSummaries();\n        }\n    }\n    //endregion\n    updateSelectedOnly(value) {\n        const me = this;\n        me.detachListeners('selectionChange');\n        if (value) {\n            me.grid.ion({\n                name            : 'selectionChange',\n                selectionChange : me.refresh,\n                thisObj         : me\n            });\n        }\n        me.refresh();\n    }\n    /**\n     * Refreshes the summaries\n     */\n    refresh() {\n        this.updateSummaries();\n    }\n}\nSummary.featureClass = 'b-summary';\nSummary._$name = 'Summary'; GridFeatureManager.registerFeature(Summary);\n"],
  "mappings": "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",
  "names": ["RowReorder", "Delayable_default", "InstancePlugin", "grid", "config", "_a", "me", "DragHelper", "element", "x", "y", "context", "elementRect", "Rectangle", "pointerDownOffset", "DomHelper", "clone", "container", "clone2", "targetSubGrid", "el", "event", "firstCell", "gripperStyle", "offsetX", "onGrip", "source", "group", "subGridEl", "startRecord", "selectedRecords", "r", "r1", "r2", "_b", "cellEdit", "cellMenu", "headerMenu", "focusedCell", "store", "rowManager", "clientY", "valid", "row", "overRecord", "dataIndex", "after", "over", "insertBefore", "rowTop", "quarter", "topQuarter", "middleY", "bottomQuarter", "rec", "client", "record", "result", "records", "parent", "firstPaint", "show", "__publicField", "GridFeatureManager", "SummaryFormatter_default", "Target", "Base", "column", "cls", "groupRecord", "groupField", "groupValue", "summaries", "html", "type", "sum", "value", "valueCls", "labelHtml", "valueHtml", "summaryHtml", "Summary", "disable", "subGrid", "cells", "selectedOnly", "cellElement", "action", "changes", "shouldUpdate", "field", "colField"]
}
