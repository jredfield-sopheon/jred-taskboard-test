{
  "version": 3,
  "sources": ["../../../../Core/lib/Core/data/stm/state/StateBase.js", "../../../../Core/lib/Core/data/stm/Transaction.js", "../../../../Core/lib/Core/data/stm/action/ActionBase.js", "../../../../Core/lib/Core/data/stm/action/UpdateAction.js", "../../../../Core/lib/Core/data/stm/action/InsertChildAction.js", "../../../../Core/lib/Core/data/stm/action/RemoveChildAction.js", "../../../../Core/lib/Core/data/stm/action/AddAction.js", "../../../../Core/lib/Core/data/stm/action/InsertAction.js", "../../../../Core/lib/Core/data/stm/action/RemoveAction.js", "../../../../Core/lib/Core/data/stm/action/RemoveAllAction.js", "../../../../Core/lib/Core/data/stm/Props.js", "../../../../Core/lib/Core/data/stm/state/Registry.js", "../../../../Core/lib/Core/data/stm/Helpers.js", "../../../../Core/lib/Core/data/stm/state/DisabledState.js", "../../../../Core/lib/Core/data/stm/state/ReadyState.js", "../../../../Core/lib/Core/data/stm/state/RecordingState.js", "../../../../Core/lib/Core/data/stm/state/RestoringState.js", "../../../../Core/lib/Core/data/stm/state/AutoReadyState.js", "../../../../Core/lib/Core/data/stm/state/AutoRecordingState.js", "../../../../Core/lib/Core/data/stm/StateTrackingManager.js", "../../../../Core/lib/Core/mixin/Finalizable.js", "../../../../Core/lib/Core/util/drag/DragContext.js", "../../../../Core/lib/Core/util/drag/DragProxy.js", "../../../../Core/lib/Core/mixin/Draggable.js", "../../../../Core/lib/Core/mixin/Droppable.js", "../../../../Core/lib/Core/widget/ColorField.js", "../../../../Core/lib/Core/widget/SlideToggle.js", "../../../../Core/lib/Core/widget/util/AvatarRendering.js"],
  "sourcesContent": ["/**\n * @module Core/data/stm/state/StateBase\n */\nimport Base from '../../../Base.js';\nexport const throwAbstractMethodCall = () => {\n    throw new Error('Abstract method call!');\n};\nexport const throwInvalidMethodCall = () => {\n    throw new Error('Method cannot be called at this state!');\n};\n/**\n * Abstract class for STM states\n *\n * Every on* method should return a state for the STM which it should switch to\n * or throw an exception that this call at this state is illegal.\n *\n * Interface of this class mirrors interface of {@link Core.data.stm.StateTrackingManager}.\n *\n * @abstract\n */\nexport default class StateBase extends Base {\n    canUndo(stm) {\n        throwAbstractMethodCall();\n    }\n    canRedo(stm) {\n        throwAbstractMethodCall();\n    }\n    onUndo(stm) {\n        throwAbstractMethodCall();\n    }\n    onRedo(stm) {\n        throwAbstractMethodCall();\n    }\n    onStartTransaction(stm) {\n        throwAbstractMethodCall();\n    }\n    onStopTransaction(stm) {\n        throwAbstractMethodCall();\n    }\n    onStopTransactionDelayed(stm) {\n        throwAbstractMethodCall();\n    }\n    onRejectTransaction(stm) {\n        throwAbstractMethodCall();\n    }\n    onEnable(stm) {\n        throwAbstractMethodCall();\n    }\n    onDisable(stm) {\n        throwAbstractMethodCall();\n    }\n    onAutoRecordOn(stm) {\n        throwAbstractMethodCall();\n    }\n    onAutoRecordOff(stm) {\n        throwAbstractMethodCall();\n    }\n    onResetQueue(stm) {\n        throwAbstractMethodCall();\n    }\n    onModelUpdate(stm) {\n        throwAbstractMethodCall();\n    }\n    onStoreModelAdd(stm) {\n        throwAbstractMethodCall();\n    }\n    onStoreModelInsert(stm) {\n        throwAbstractMethodCall();\n    }\n    onStoreModelRemove(stm) {\n        throwAbstractMethodCall();\n    }\n    onStoreModelRemoveAll(stm) {\n        throwAbstractMethodCall();\n    }\n    onModelInsertChild(stm) {\n        throwAbstractMethodCall();\n    }\n    onModelRemoveChild(stm) {\n        throwAbstractMethodCall();\n    }\n}\nStateBase._$name = 'StateBase';", "/**\n * @module Core/data/stm/Transaction\n */\nimport Base from '../../Base.js';\nconst ACTION_QUEUE_PROP = Symbol('ACTION_QUEUE_PROP');\n/**\n * STM transaction class, holds list of actions constituting a transaction.\n *\n * A transaction can be undone and redone. Upon undo all the actions being held\n * are undone in reverse order. Upon redo all the actions being held are redone\n * in forward order.\n */\nexport default class Transaction extends Base {\n    get defaultConfig() {\n        return {\n            /**\n             * Transaction title\n             *\n             * @config {String}\n             */\n            title : null\n        };\n    }\n    construct(...args) {\n        this[ACTION_QUEUE_PROP] = [];\n        super.construct(...args);\n    }\n    /**\n     * Gets transaction's actions queue\n     *\n     * @property {Core.data.stm.action.ActionBase[]}\n     */\n    get queue() {\n        return this[ACTION_QUEUE_PROP].slice(0);\n    }\n    /**\n     * Gets transaction's actions queue length\n     *\n     * @property {Number}\n     */\n    get length() {\n        return this[ACTION_QUEUE_PROP].length;\n    }\n    /**\n     * Adds an action to the transaction.\n     *\n     * @param {Core.data.stm.action.ActionBase|Object} action\n     */\n    addAction(action) {\n        this[ACTION_QUEUE_PROP].push(action);\n    }\n    /**\n     * Undoes actions held\n     */\n    undo() {\n        const queue = this[ACTION_QUEUE_PROP];\n        for (let i = queue.length - 1; i >= 0; --i) {\n            queue[i].undo();\n        }\n    }\n    /**\n     * Redoes actions held\n     */\n    redo() {\n        const queue = this[ACTION_QUEUE_PROP];\n        for (let i = 0, len = queue.length; i < len; ++i) {\n            queue[i].redo();\n        }\n    }\n}\nTransaction._$name = 'Transaction';", "/**\n * @module Core/data/stm/action/ActionBase\n */\nimport Base from '../../../Base.js';\nconst throwAbstractMethodCall = () => {\n    throw new Error('Abstract method call!');\n};\n/**\n * Base class for STM actions.\n *\n * @abstract\n */\nexport default class ActionBase extends Base {\n    /**\n     * Gets the type of the action (stringified class name).\n     * @readonly\n     * @property {String}\n     */\n    get type() {\n        return this.constructor.name;\n    }\n    /**\n     * Undoes an action\n     */\n    undo() {\n        throwAbstractMethodCall();\n    }\n    /**\n     * Redoes an action\n     */\n    redo() {\n        throwAbstractMethodCall();\n    }\n}\nActionBase._$name = 'ActionBase';", "/**\n * @module Core/data/stm/action/UpdateAction\n */\nimport ActionBase from './ActionBase.js';\nconst\n    MODEL_PROP    = Symbol('MODEL_PROP'),\n    NEW_DATA_PROP = Symbol('NEW_DATA_PROP'),\n    OLD_DATA_PROP = Symbol('OLD_DATA_PROP');\n/**\n * Action to record the fact that a model has been updated.\n * @extends Core/data/stm/action/ActionBase\n */\nexport default class UpdateAction extends ActionBase {\n    static get defaultConfig() {\n        return {\n            /**\n             * Reference to a model which has been updated.\n             *\n             * @prp {Core.data.Model}\n             * @readonly\n             * @default\n             */\n            model : undefined,\n            /**\n             * Map of updated properties with new values.\n             *\n             * @prp {Object}\n             * @readonly\n             * @typings {{[key: string]:any}}\n             * @default\n             */\n            newData : undefined,\n            /**\n             * Map of updated properties with old values.\n             *\n             * @prp {Object}\n             * @readonly\n             * @typings {{[key: string]:any}}\n             * @default\n             */\n            oldData : undefined,\n            isInitialUserAction : false\n        };\n    }\n    get type() {\n        return 'UpdateAction';\n    }\n    get model() {\n        return this[MODEL_PROP];\n    }\n    set model(value) {\n        this[MODEL_PROP] = value;\n    }\n    get newData() {\n        return this[NEW_DATA_PROP];\n    }\n    set newData(value) {\n        this[NEW_DATA_PROP] = { ...value };\n    }\n    get oldData() {\n        return this[OLD_DATA_PROP];\n    }\n    set oldData(value) {\n        this[OLD_DATA_PROP] = { ...value };\n    }\n    undo() {\n        const { model, oldData } = this;\n        // engine needs the setters to be activated, since there's some additional logic (for example, invalidate\n        // dispatcher)\n        if (model.$) {\n            Object.assign(model, oldData);\n        }\n        // it seems STM has to use `model.set()` because of `model.inSet` overrides or smth\n        // w/o this call, just with `Object.assign()` above, the view is not refreshed\n        // Since invoking accessor will just forward change to the engine, we need to pass `skipAccessors = true`\n        // to this call to make this change on data level.\n        // Covered by TaskEdit.t `autoSync` subtest\n        // but it seems, bypassing the setters puts the change in the `data` property and does not\n        // modify the engine-like caches, that Core uses\n        // this may lead to change being lost, overwritten by some other change, which does\n        model.set(oldData, null, null, null, Boolean(model.$));\n    }\n    redo() {\n        const { model, newData } = this;\n        // see comments above\n        if (model.$) {\n            Object.assign(model, newData);\n        }\n        model.set(newData, null, null, null, Boolean(model.$));\n    }\n}\nUpdateAction._$name = 'UpdateAction';", "/**\n * @module Core/data/stm/action/InsertChildAction\n */\nimport ActionBase from './ActionBase.js';\nconst\n    PARENT_MODEL_PROP = Symbol('PARENT_MODEL_PROP'),\n    CHILD_MODELS_PROP = Symbol('CHILD_MODELS_PROP'),\n    INSERT_INDEX_PROP = Symbol('INSERT_INDEX_PROP'),\n    CONTEXT_PROP      = Symbol('CONTEXT_PROP');\n/**\n * Action to record the fact of adding a children models into a parent model.\n * @extends Core/data/stm/action/ActionBase\n */\nexport default class InsertChildAction extends ActionBase {\n    static get defaultConfig() {\n        return {\n            /**\n             * Reference to a parent model a child model has been added to.\n             *\n             * @prp {Core.data.Model}\n             * @readonly\n             * @default\n             */\n            parentModel : undefined,\n            /**\n             * Children models inserted.\n             *\n             * @prp {Core.data.Model[]}\n             * @readonly\n             * @default\n             */\n            childModels : undefined,\n            /**\n             * Index a children models are inserted at\n             *\n             * @prp {Number}\n             * @readonly\n             * @default\n             */\n            insertIndex : undefined,\n            /**\n             * Map having children models as keys and values containing previous parent\n             * of each model and index at the previous parent.\n             *\n             * @prp {Object}\n             * @readonly\n             * @default\n             */\n            context : undefined\n        };\n    }\n    get type() {\n        return 'InsertChildAction';\n    }\n    get parentModel() {\n        return this[PARENT_MODEL_PROP];\n    }\n    set parentModel(model) {\n        this[PARENT_MODEL_PROP] = model;\n    }\n    get childModels() {\n        return this[CHILD_MODELS_PROP];\n    }\n    set childModels(models) {\n        this[CHILD_MODELS_PROP] = models.slice(0);\n    }\n    get insertIndex() {\n        return this[INSERT_INDEX_PROP];\n    }\n    set insertIndex(index) {\n        this[INSERT_INDEX_PROP] = index;\n    }\n    get context() {\n        return this[CONTEXT_PROP];\n    }\n    set context(ctx) {\n        this[CONTEXT_PROP] = ctx;\n    }\n    undo() {\n        const\n            { parentModel, context, childModels } = this,\n            byFromParent = new Map(),\n            newlyAdded = new Set();\n        for (const childModel of childModels) {\n            const ctx = context.get(childModel);\n            if (!ctx) {\n                newlyAdded.add(childModel);\n            }\n            else {\n                let undoTaskData = byFromParent.get(ctx.parent);\n                if (!undoTaskData) {\n                    undoTaskData = { moveRight : [], moveLeft : [], moveFromAnotherParent : [] };\n                    byFromParent.set(ctx.parent, undoTaskData);\n                }\n                if (ctx.parent === parentModel) {\n                    if (ctx.index > childModel.parentIndex) {\n                        undoTaskData.moveRight.push({ parent : ctx.parent, model : childModel, index : ctx.index + 1 });\n                    }\n                    else {\n                        undoTaskData.moveLeft.push({ parent : ctx.parent, model : childModel, index : ctx.index });\n                    }\n                }\n                else {\n                    undoTaskData.moveFromAnotherParent.push({ parent : ctx.parent, model : childModel, index : ctx.index });\n                }\n            }\n        }\n        for (const undoTaskData of byFromParent.values()) {\n            const { moveRight, moveLeft } = undoTaskData;\n            moveLeft.sort((a, b) => a.index - b.index);\n            moveRight.sort((a, b) => b.index - a.index);\n        }\n        newlyAdded.forEach(model => model.parent.removeChild(model));\n        for (const undoTaskData of byFromParent.values()) {\n            const { moveRight, moveLeft, moveFromAnotherParent } = undoTaskData;\n            moveLeft.forEach(task => {\n                task.parent.insertChild(task.model, task.index);\n            });\n            moveRight.forEach(task => {\n                task.parent.insertChild(task.model, task.index);\n            });\n            moveFromAnotherParent.forEach(task => {\n                task.parent.insertChild(task.model, task.index);\n            });\n        }\n    }\n    redo() {\n        const\n            { parentModel, insertIndex, childModels } = this,\n            insertBefore = parentModel.children?.[insertIndex];\n        parentModel.insertChild(childModels, insertBefore, false, {\n            orderedBeforeNode : insertBefore?.previousSibling?.nextOrderedSibling\n        });\n    }\n}\nInsertChildAction._$name = 'InsertChildAction';", "/**\n * @module Core/data/stm/action/RemoveChildAction\n */\nimport ActionBase from './ActionBase.js';\nconst\n    PARENT_MODEL_PROP = Symbol('PARENT_MODEL_PROP'),\n    CHILD_MODELS_PROP = Symbol('CHILD_MODELS_PROP'),\n    CONTEXT_PROP      = Symbol('CONTEXT_PROP');\n/**\n * Action to record store remove child operation.\n * @extends Core/data/stm/action/ActionBase\n */\nexport default class RemoveChildAction extends ActionBase {\n    static get defaultConfig() {\n        return {\n            /**\n             * Reference to a parent model a child model has been removed to.\n             *\n             * @prp {Core.data.Model}\n             * @readonly\n             * @default\n             */\n            parentModel : undefined,\n            /**\n             * Children models removed.\n             *\n             * @prp {Core.data.Model[]}\n             * @readonly\n             * @default\n             */\n            childModels : undefined,\n            /**\n             * Map having children models as keys and values containing previous parent\n             * index at the parent.\n             *\n             * @prp {Object}\n             * @readonly\n             * @default\n             */\n            context : undefined\n        };\n    }\n    get type() {\n        return 'RemoveChildAction';\n    }\n    get parentModel() {\n        return this[PARENT_MODEL_PROP];\n    }\n    set parentModel(model) {\n        this[PARENT_MODEL_PROP] = model;\n    }\n    get childModels() {\n        return this[CHILD_MODELS_PROP];\n    }\n    set childModels(models) {\n        this[CHILD_MODELS_PROP] = models.slice(0);\n    }\n    get context() {\n        return this[CONTEXT_PROP];\n    }\n    set context(ctx) {\n        this[CONTEXT_PROP] = ctx;\n    }\n    undo() {\n        const { parentModel, context, childModels } = this;\n        // Let's sort models by parent index such that models with lesser index\n        // were inserted back first, thus making valid parent index of models following.\n        childModels.sort((lhs, rhs) => {\n            const\n                lhsIndex = context.get(lhs),\n                rhsIndex = context.get(rhs);\n            return (lhsIndex - rhsIndex);\n        });\n        // Now let's re-insert records back to where they were\n        childModels.forEach(m => {\n            const ctx = context.get(m);\n            parentModel.insertChild(m, ctx.parentIndex, undefined, { orderedParentIndex : ctx.orderedParentIndex });\n        });\n    }\n    redo() {\n        this.parentModel.removeChild(this.childModels);\n    }\n}\nRemoveChildAction._$name = 'RemoveChildAction';", "import ActionBase from './ActionBase.js';\nimport Store from '../../Store.js';\n/**\n * @module Core/data/stm/action/AddAction\n */\nconst\n    STORE_PROP      = Symbol('STORE_PROP'),\n    MODEL_LIST_PROP = Symbol('MODEL_LIST_PROP');\n/**\n * Action to record the fact of models adding to a store.\n * @extends Core/data/stm/action/ActionBase\n */\nexport default class AddAction extends ActionBase {\n    static get defaultConfig() {\n        return {\n            /**\n             * Reference to a store models have been added into.\n             *\n             * @prp {Core.data.Store}\n             * @readonly\n             * @default\n             */\n            store : undefined,\n            /**\n             * List of models added into the store.\n             *\n             * @prp {Core.data.Model[]}\n             * @readonly\n             * @default\n             */\n            modelList : undefined,\n            /**\n             * Flag showing if undo/redo should be done silently i.e. with events suppressed\n             *\n             * @prp {Boolean}\n             * @readonly\n             * @default\n             */\n            silent : false\n        };\n    }\n    get type() {\n        return 'AddAction';\n    }\n    get store() {\n        return this[STORE_PROP];\n    }\n    set store(store) {\n        this[STORE_PROP] = store;\n    }\n    get modelList() {\n        return this[MODEL_LIST_PROP];\n    }\n    set modelList(list) {\n        this[MODEL_LIST_PROP] = list.slice(0);\n    }\n    undo() {\n        this.store.remove(this.modelList, this.silent);\n    }\n    redo() {\n        this.store.add(this.modelList, this.silent);\n    }\n}\nAddAction._$name = 'AddAction';", "import ActionBase from './ActionBase.js';\nimport Store from '../../Store.js';\n/**\n * @module Core/data/stm/action/InsertAction\n */\nconst\n    STORE_PROP        = Symbol('STORE_PROP'),\n    MODEL_LIST_PROP   = Symbol('MODEL_LIST_PROP'),\n    INSERT_INDEX_PROP = Symbol('INSERT_INDEX_PROP'),\n    CONTEXT_PROP      = Symbol('CONTEXT_PROP');\n/**\n * Action to record the fact of models inserting into a store.\n * @extends Core/data/stm/action/ActionBase\n */\nexport default class InsertAction extends ActionBase {\n    static get defaultConfig() {\n        return {\n            /**\n             * Reference to a store models have been inserted into.\n             *\n             * @prp {Core.data.Store}\n             * @readonly\n             * @default\n             */\n            store : undefined,\n            /**\n             * List of models inserted into the store.\n             *\n             * @prp {Core.data.Model[]}\n             * @readonly\n             * @default\n             */\n            modelList : undefined,\n            /**\n             * Index the models have been inserted at.\n             *\n             * @prp {Number}\n             * @readonly\n             * @default\n             */\n            insertIndex : undefined,\n            /**\n             * Models move context (if models has been moved), if any.\n             * Map this {@link Core/data/Model} instances as keys and their\n             * previous index as values\n             *\n             * @prp {Map}\n             * @readonly\n             * @default\n             */\n            context : undefined,\n            /**\n             * Flag showing if undo/redo should be done silently i.e. with events suppressed\n             *\n             * @prp {Boolean}\n             * @readonly\n             * @default\n             */\n            silent : false\n        };\n    }\n    get type() {\n        return 'InsertAction';\n    }\n    get store() {\n        return this[STORE_PROP];\n    }\n    set store(store) {\n        this[STORE_PROP] = store;\n    }\n    get modelList() {\n        return this[MODEL_LIST_PROP];\n    }\n    set modelList(list) {\n        this[MODEL_LIST_PROP] = list.slice(0);\n    }\n    get insertIndex() {\n        return this[INSERT_INDEX_PROP];\n    }\n    set insertIndex(index) {\n        this[INSERT_INDEX_PROP] = index;\n    }\n    get context() {\n        return this[CONTEXT_PROP];\n    }\n    set context(context) {\n        this[CONTEXT_PROP] = context;\n    }\n    undo() {\n        const { store, modelList, context, silent } = this;\n        // Let's sort models by index such that models with lesser index\n        // were inserted back first, thus making valid index of models following.\n        modelList.sort((lhs, rhs) => {\n            const\n                lhsIndex = context.get(lhs),\n                rhsIndex = context.get(rhs);\n            return lhsIndex !== undefined && rhsIndex !== undefined ? lhsIndex - rhsIndex : 0;\n        });\n        modelList.forEach(m => {\n            const index = context.get(m);\n            // Flag the inserted record that we undo to skip adding it to \"store.removed\"\n            m._undoingInsertion = true;\n            if (index !== undefined) {\n                // Insert at previous index\n                store.insert(index, m, silent);\n            }\n            else {\n                // Just remove\n                store.remove(m, silent);\n            }\n            m._undoingInsertion = false;\n        });\n    }\n    redo() {\n        const me = this;\n        me.store.insert(me.insertIndex, me.modelList, me.silent);\n    }\n}\nInsertAction._$name = 'InsertAction';", "/**\n * @module Core/data/stm/action/RemoveAction\n */\nimport ActionBase from './ActionBase.js';\nimport Store from '../../Store.js';\nconst\n    STORE_PROP      = Symbol('STORE_PROP'),\n    MODEL_LIST_PROP = Symbol('MODEL_LIST_PROP'),\n    CONTEXT_PROP    = Symbol('CONTEXT_PROP');\n/**\n * Action to record the fact of models removed from a store.\n * @extends Core/data/stm/action/ActionBase\n */\nexport default class RemoveAction extends ActionBase {\n    static get defaultConfig() {\n        return {\n            /**\n             * Reference to a store models have been removed from.\n             *\n             * @prp {Core.data.Store}\n             * @readonly\n             * @default\n             */\n            store : undefined,\n            /**\n             * List of models removed from the store.\n             *\n             * @prp {Core.data.Model[]}\n             * @readonly\n             * @default\n             */\n            modelList : undefined,\n            /**\n             * Models removing context.\n             *\n             * @prp {Object}\n             * @readonly\n             * @default\n             */\n            context : undefined,\n            /**\n             * Flag showing if undo/redo should be done silently i.e. with events suppressed\n             *\n             * @prp {Boolean}\n             * @readonly\n             * @default\n             */\n            silent : false\n        };\n    }\n    get type() {\n        return 'RemoveAction';\n    }\n    get store() {\n        return this[STORE_PROP];\n    }\n    set store(store) {\n        this[STORE_PROP] = store;\n    }\n    get modelList() {\n        return this[MODEL_LIST_PROP];\n    }\n    set modelList(list) {\n        this[MODEL_LIST_PROP] = list.slice(0);\n    }\n    get context() {\n        return this[CONTEXT_PROP];\n    }\n    set context(context) {\n        this[CONTEXT_PROP] = context;\n    }\n    undo() {\n        const { store, context, modelList, silent } = this;\n        // Let's sort models by index such that models with lesser index\n        // were inserted back first, thus making valid index of models following.\n        modelList.sort((lhs, rhs) => {\n            const\n                lhsIndex = context.get(lhs),\n                rhsIndex = context.get(rhs);\n            // Here, in contrast to InsertAction, index is always present\n            return lhsIndex - rhsIndex;\n        });\n        modelList.forEach(m => {\n            const index = context.get(m);\n            // Insert at previous index\n            store.insert(index, m, silent);\n        });\n    }\n    redo() {\n        this.store.remove(this.modelList, this.silent);\n    }\n}\nRemoveAction._$name = 'RemoveAction';", "/**\n * @module Core/data/stm/action/RemoveAllAction\n */\nimport ActionBase from './ActionBase.js';\nimport Store from '../../Store.js';\nconst\n    STORE_PROP       = Symbol('STORE_PROP'),\n    ALL_RECORDS_PROP = Symbol('ALL_RECORDS_PROP');\n/**\n * Action to record store remove all operation.\n * @extends Core/data/stm/action/ActionBase\n */\nexport default class RemoveAllAction extends ActionBase {\n    static get defaultConfig() {\n        return {\n            /**\n             * Reference to a store cleared.\n             *\n             * @prp {Core.data.Store}\n             * @readonly\n             * @default\n             */\n            store : undefined,\n            /**\n             * All store records removed\n             *\n             * @prp {Core.data.Model[]}\n             * @readonly\n             * @default\n             */\n            allRecords : undefined,\n            /**\n             * Flag showing if undo/redo should be done silently i.e. with events suppressed\n             *\n             * @prp {Boolean}\n             * @readonly\n             * @default\n             */\n            silent : false\n        };\n    }\n    get type() {\n        return 'RemoveAllAction';\n    }\n    get store() {\n        return this[STORE_PROP];\n    }\n    set store(store) {\n        this[STORE_PROP] = store;\n    }\n    get allRecords() {\n        return this[ALL_RECORDS_PROP];\n    }\n    set allRecords(records) {\n        this[ALL_RECORDS_PROP] = records.slice(0);\n    }\n    undo() {\n        const { store, allRecords, silent } = this;\n        store.add(allRecords, silent);\n    }\n    redo() {\n        this.store.removeAll(this.silent);\n    }\n}\nRemoveAllAction._$name = 'RemoveAllAction';", "/**\n * @module Core/data/stm/Props.js\n * @internal\n */\nexport const STATE_PROP             = Symbol('STATE_PROP');\nexport const STORES_PROP            = Symbol('STORES_PROP');\nexport const QUEUE_PROP             = Symbol('QUEUE_PROP');\nexport const POS_PROP               = Symbol('POS_PROP');\nexport const TRANSACTION_PROP       = Symbol('TRANSACTION_PROP');\nexport const TRANSACTION_TIMER_PROP = Symbol('TRANSACTION_TIMER_PROP');\nexport const AUTO_RECORD_PROP       = Symbol('AUTO_RECORD_PROP');\nexport const IS_APPLYING_STASH      = Symbol('IS_APPLYING_STASH');\nexport const PROPS                  = Object.freeze([\n    STATE_PROP,\n    STORES_PROP,\n    QUEUE_PROP,\n    POS_PROP,\n    TRANSACTION_PROP,\n    TRANSACTION_TIMER_PROP,\n    AUTO_RECORD_PROP,\n    IS_APPLYING_STASH\n]);\n", "import StateBase from './StateBase.js';\n/**\n * @module Core/data/stm/state/Registry\n *\n * Provides map of registered STM states.\n *\n * Needed to remove states circular dependency.\n *\n * @internal\n */\nconst registry = new Map();\n/**\n * Registers STM state class with the given name.\n *\n * @private\n *\n * @param {String} name\n * @param {Core.data.stm.state.StateBase} state\n */\nexport const registerStmState = (name, state) => {\n    registry.set(name, state);\n};\n/**\n * Resolves STM state class with the given name.\n *\n * @private\n *\n * @param {String} name\n * @returns {Core.data.stm.state.StateBase} state\n */\nexport const resolveStmState = (state) => {\n    if (typeof state === 'string') {\n        state = registry.get(state);\n    }\n    return state;\n};\n// UMD/module compatible export\n// NOTE: the most compatible way of exporting is:\n//       import registry from './Registry.js';\n//       { registerStmState, resolveStmState } = registry;\n//          or\n//       registry.registerStmState(...);\nexport default {\n    registerStmState,\n    resolveStmState\n};\n", "import { QUEUE_PROP, POS_PROP } from './Props.js';\nexport const resetQueue = (stm, options) => {\n    const { undo, redo } = options;\n    let newProps;\n    if (undo && !redo) {\n        newProps = {\n            [QUEUE_PROP] : stm[QUEUE_PROP].slice(stm.position),\n            [POS_PROP]   : 0\n        };\n    }\n    else if (redo && !undo) {\n        newProps = {\n            [QUEUE_PROP] : stm[QUEUE_PROP].slice(0, stm.position)\n        };\n    }\n    else {\n        newProps = {\n            [QUEUE_PROP] : [],\n            [POS_PROP]   : 0\n        };\n    };\n    return [\n        newProps,\n        () => {\n            stm.notifyStoresAboutQueueReset(options);\n        }\n    ];\n};\n", "/**\n * @module Core/data/stm/state/DisabledState\n */\nimport StateBase, { throwInvalidMethodCall } from './StateBase.js';\nimport { AUTO_RECORD_PROP } from '../Props.js';\nimport Registry from './Registry.js';\nimport { resetQueue } from '../Helpers.js';\n/**\n * STM disabled state class.\n *\n * @internal\n */\nexport class DisabledStateClass extends StateBase {\n    canUndo() {\n        return false;\n    }\n    canRedo() {\n        return false;\n    }\n    onUndo() {\n        throwInvalidMethodCall();\n    }\n    onRedo() {\n        throwInvalidMethodCall();\n    }\n    onEnable(stm) {\n        return stm.autoRecord ? 'autoreadystate' : 'readystate';\n    }\n    onDisable() {\n        throwInvalidMethodCall();\n    }\n    onAutoRecordOn() {\n        return {\n            [AUTO_RECORD_PROP] : true\n        };\n    }\n    onAutoRecordOff() {\n        return {\n            [AUTO_RECORD_PROP] : false\n        };\n    }\n    onStartTransaction() {\n        throwInvalidMethodCall();\n    }\n    onStopTransaction()  {\n        throwInvalidMethodCall();\n    }\n    onStopTransactionDelayed() {\n        throwInvalidMethodCall();\n    }\n    onRejectTransaction() {\n        throwInvalidMethodCall();\n    }\n    onResetQueue(stm, options) {\n        return resetQueue(stm, options);\n    }\n    onModelUpdate()      {}\n    onModelInsertChild() {}\n    onModelRemoveChild() {}\n    onStoreModelAdd()    {}\n    onStoreModelInsert() {}\n    onStoreModelRemove() {}\n    onStoreRemoveAll()   {}\n}\n/**\n * STM disabled state.\n *\n * @internal\n */\nconst DisabledState = new DisabledStateClass();\nexport default DisabledState;\nRegistry.registerStmState('disabledstate', DisabledState);\n", "import StateBase, { throwInvalidMethodCall } from './StateBase.js';\nimport Transaction from '../Transaction.js';\nimport { STATE_PROP, QUEUE_PROP, POS_PROP, TRANSACTION_PROP, AUTO_RECORD_PROP } from '../Props.js';\nimport Registry from './Registry.js';\nimport { resetQueue } from '../Helpers.js';\n/**\n * @module Core/data/stm/state/ReadyState\n */\n/**\n * STM ready state class.\n *\n * @internal\n */\nexport class ReadyStateClass extends StateBase {\n    canUndo(stm) {\n        //      v\n        // |*|*|\n        return 0 < stm.position && stm.position <= stm.length;\n    }\n    canRedo(stm) {\n        //  v\n        // |*|*|\n        return 0 <= stm.position && stm.position < stm.length;\n    }\n    onUndo(stm, steps) {\n        let curPos = stm.position;\n        const\n            queue  = stm[QUEUE_PROP],\n            newPos = Math.max(0, curPos - steps),\n            next = () => {\n                stm.notifyStoresAboutStateRestoringStart();\n                const undoneTransactions = [];\n                while (curPos !== newPos) {\n                    const transaction = queue[--curPos];\n                    transaction.undo();\n                    undoneTransactions.push(transaction);\n                }\n                return [stm.autoRecord ? 'autoreadystate' : 'readystate', () => {\n                    stm.notifyStoresAboutStateRestoringStop({ cause : 'undo', transactions : undoneTransactions });\n                }];\n            };\n        return [{\n            [STATE_PROP] : 'restoringstate',\n            [POS_PROP]   : newPos\n        }, next];\n    }\n    onRedo(stm, steps) {\n        let curPos = stm.position;\n        const\n            queue  = stm[QUEUE_PROP],\n            newPos = Math.min(queue.length, curPos + steps);\n        const next = () => {\n            stm.notifyStoresAboutStateRestoringStart();\n            const redoneTransactions = [];\n            do {\n                const transaction = queue[curPos++];\n                transaction.redo();\n                redoneTransactions.push(transaction);\n            }\n            while (curPos !== newPos);\n            return [stm.autoRecord ? 'autoreadystate' : 'readystate', () => {\n                stm.notifyStoresAboutStateRestoringStop({ cause : 'redo', transactions : redoneTransactions });\n            }];\n        };\n        return [{\n            [STATE_PROP] : 'restoringstate',\n            [POS_PROP]   : newPos\n        }, next];\n    }\n    onEnable() {\n        throwInvalidMethodCall();\n    }\n    onDisable() {\n        return 'disabledstate';\n    }\n    onAutoRecordOn() {\n        return {\n            [STATE_PROP]       : 'autoreadystate',\n            [AUTO_RECORD_PROP] : true\n        };\n    }\n    onAutoRecordOff() {\n        throwInvalidMethodCall();\n    }\n    onStartTransaction(stm, title) {\n        const transaction = new Transaction({ title });\n        return [{\n            [STATE_PROP]       : 'recordingstate',\n            [TRANSACTION_PROP] : transaction\n        }, () => {\n            stm.notifyStoresAboutStateRecordingStart(transaction);\n        }];\n    }\n    onStopTransaction() {\n        throwInvalidMethodCall();\n    }\n    onStopTransactionDelayed() {\n        throwInvalidMethodCall();\n    }\n    onRejectTransaction() {\n        throwInvalidMethodCall();\n    }\n    onResetQueue(stm, options) {\n        return resetQueue(stm, options);\n    }\n    onModelUpdate()      {}\n    onModelInsertChild() {}\n    onModelRemoveChild() {}\n    onStoreModelAdd()    {}\n    onStoreModelInsert() {}\n    onStoreModelRemove() {}\n    onStoreRemoveAll()   {}\n}\n/**\n * STM ready state.\n *\n * @internal\n */\nconst ReadyState = new ReadyStateClass();\nexport default ReadyState;\nRegistry.registerStmState('readystate', ReadyState);\n", "/**\n * @module Core/data/stm/state/RecordingState\n */\nimport StateBase, { throwInvalidMethodCall } from './StateBase.js';\nimport { STATE_PROP, TRANSACTION_PROP, QUEUE_PROP, POS_PROP, AUTO_RECORD_PROP } from '../Props.js';\nimport Registry from './Registry.js';\nimport { resetQueue } from '../Helpers.js';\n/**\n * STM recording state class.\n *\n * @internal\n */\nexport class RecordingStateClass extends StateBase {\n    canUndo() {\n        return false;\n    }\n    canRedo() {\n        return false;\n    }\n    onEnable() {}\n    onDisable(stm) {\n        const transaction = stm[TRANSACTION_PROP];\n        stm.notifyStoresAboutStateRecordingStop(transaction, { disabled : true });\n        return {\n            [STATE_PROP]       : 'disabledstate',\n            [TRANSACTION_PROP] : null\n        };\n    }\n    onAutoRecordOn(stm) {\n        return [{\n            [STATE_PROP]       : 'autorecordingstate',\n            [AUTO_RECORD_PROP] : true\n        }, () => {\n            stm.stopTransactionDelayed();\n        }];\n    }\n    onAutoRecordOff() {\n        throwInvalidMethodCall();\n    }\n    onStartTransaction() {\n        throwInvalidMethodCall();\n    }\n    onStopTransaction(stm, title) {\n        const\n            transaction = stm[TRANSACTION_PROP],\n            queue       = stm[QUEUE_PROP];\n        let position = stm[POS_PROP];\n        if (transaction.length) {\n            if (!transaction.title && !title && stm.getTransactionTitle) {\n                transaction.title = stm.getTransactionTitle(transaction);\n            }\n            else if (title) {\n                transaction.title = title;\n            }\n            queue[position] = transaction;\n            queue.length    = ++position;\n        }\n        return [{\n            [STATE_PROP]       : 'readystate',\n            [POS_PROP]         : position,\n            [TRANSACTION_PROP] : null\n        }, () => {\n            stm.notifyStoresAboutStateRecordingStop(transaction, { stop : true });\n        }];\n    }\n    onRejectTransaction(stm) {\n        const transaction = stm[TRANSACTION_PROP];\n        return [{\n            [STATE_PROP]       : 'restoringstate',\n            [TRANSACTION_PROP] : null\n        }, () => {\n            if (transaction.length) {\n                transaction.undo();\n            }\n            return [\n                'readystate',\n                () => {\n                    stm.notifyStoresAboutStateRecordingStop(transaction, { rejected : true });\n                }\n            ];\n        }];\n    }\n    onStopTransactionDelayed() {\n        throwInvalidMethodCall();\n    }\n    onResetQueue(stm, options) {\n        return resetQueue(stm, options);\n    }\n    onModelUpdate(stm, model, newData, oldData, isInitialUserAction) {\n        const transaction = stm[TRANSACTION_PROP];\n        transaction.addAction(stm.makeModelUpdateAction(model, newData, oldData, isInitialUserAction));\n    }\n    onModelInsertChild(stm, parentModel, index, childModel, previousParent, previousIndex) {\n        const transaction = stm[TRANSACTION_PROP];\n        transaction.addAction(stm.makeModelInsertChildAction(parentModel, index, childModel, previousParent, previousIndex));\n    }\n    onModelRemoveChild(stm, parentModel, childModels, context) {\n        const transaction = stm[TRANSACTION_PROP];\n        transaction.addAction(stm.makeModelRemoveChildAction(parentModel, childModels, context));\n    }\n    onStoreModelAdd(stm, store, models, silent)    {\n        const transaction = stm[TRANSACTION_PROP];\n        transaction.addAction(stm.makeStoreModelAddAction(store, models, silent));\n    }\n    onStoreModelInsert(stm, store, index, models, context, silent) {\n        const transaction = stm[TRANSACTION_PROP];\n        transaction.addAction(stm.makeStoreModelInsertAction(store, index, models, context, silent));\n    }\n    onStoreModelRemove(stm, store, models, context, silent) {\n        const transaction = stm[TRANSACTION_PROP];\n        transaction.addAction(stm.makeStoreModelRemoveAction(store, models, context, silent));\n    }\n    onStoreRemoveAll(stm, store, allRecords, silent)   {\n        const transaction = stm[TRANSACTION_PROP];\n        transaction.addAction(stm.makeStoreRemoveAllAction(store, allRecords, silent));\n    }\n}\n/**\n * STM recording state.\n *\n * @internal\n */\nconst RecordingState = new RecordingStateClass();\nexport default RecordingState;\nRegistry.registerStmState('recordingstate', RecordingState);\n", "/**\n * @module Core/data/stm/state/RestoringState\n */\nimport StateBase, { throwInvalidMethodCall } from './StateBase.js';\nimport { AUTO_RECORD_PROP } from '../Props.js';\nimport Registry from './Registry.js';\n/**\n * STM restoring state class.\n *\n * @internal\n */\nexport class RestoringStateClass extends StateBase {\n    static get $name() {\n        return 'RestoringStateClass';\n    }\n    canUndo() {\n        return false;\n    }\n    canRedo() {\n        return false;\n    }\n    onUndo() {\n        throwInvalidMethodCall();\n    }\n    onRedo() {\n        throwInvalidMethodCall();\n    }\n    onEnable() {\n        throwInvalidMethodCall();\n    }\n    onDisable() {\n        throwInvalidMethodCall();\n    }\n    onAutoRecordOn() {\n        return {\n            [AUTO_RECORD_PROP] : true\n        };\n    }\n    onAutoRecordOff() {\n        return {\n            [AUTO_RECORD_PROP] : false\n        };\n    }\n    onStartTransaction() {\n        throwInvalidMethodCall();\n    }\n    onStopTransaction()  {\n        throwInvalidMethodCall();\n    }\n    onStopTransactionDelayed() {\n        throwInvalidMethodCall();\n    }\n    onRejectTransaction() {\n        throwInvalidMethodCall();\n    }\n    onQueueReset() {\n        throwInvalidMethodCall();\n    }\n    onModelUpdate()      {}\n    onModelInsertChild() {}\n    onModelRemoveChild() {}\n    onStoreModelAdd()    {}\n    onStoreModelInsert() {}\n    onStoreModelRemove() {}\n    onStoreRemoveAll()   {}\n}\n/**\n * STM restoring state.\n *\n * @internal\n */\nconst RestoringState = new RestoringStateClass();\nexport default RestoringState;\nRegistry.registerStmState('restoringstate', RestoringState);\n", "import { throwInvalidMethodCall } from './StateBase.js';\nimport Transaction from '../Transaction.js';\nimport { ReadyStateClass } from './ReadyState.js';\nimport { STATE_PROP, TRANSACTION_PROP, AUTO_RECORD_PROP } from '../Props.js';\nimport Registry from './Registry.js';\n/**\n * @module Core/data/stm/state/AutoReadyState\n */\n/**\n * STM transaction autostart ready state class.\n *\n * @internal\n */\nexport class AutoReadyStateClass extends ReadyStateClass {\n    onAutoRecordOn() {\n        throwInvalidMethodCall();\n    }\n    onAutoRecordOff() {\n        return {\n            [STATE_PROP]       : 'readystate',\n            [AUTO_RECORD_PROP] : false\n        };\n    }\n    onStartTransaction(stm, title) {\n        const transaction = new Transaction({ title });\n        return [{\n            [STATE_PROP]       : 'autorecordingstate',\n            [TRANSACTION_PROP] : transaction\n        }, () => {\n            stm.notifyStoresAboutStateRecordingStart(transaction);\n            stm.stopTransactionDelayed();\n        }];\n    }\n    onModelUpdate(stm, model, newData, oldData) {\n        stm.startTransaction();\n        stm.onModelUpdate(model, newData, oldData);\n    }\n    onModelInsertChild(stm, parentModel, index, childModels, context) {\n        stm.startTransaction();\n        stm.onModelInsertChild(parentModel, index, childModels, context);\n    }\n    onModelRemoveChild(stm, parentModel, childModels, context) {\n        stm.startTransaction();\n        stm.onModelRemoveChild(parentModel, childModels, context);\n    }\n    onStoreModelAdd(stm, store, models, silent) {\n        stm.startTransaction();\n        stm.onStoreModelAdd(store, models, silent);\n    }\n    onStoreModelInsert(stm, store, index, models, context, silent) {\n        stm.startTransaction();\n        stm.onStoreModelInsert(store, index, models, context, silent);\n    }\n    onStoreModelRemove(stm, store, models, context, silent) {\n        stm.startTransaction();\n        stm.onStoreModelRemove(store, models, context, silent);\n    }\n    onStoreRemoveAll(stm, store, allRecords, silent) {\n        stm.startTransaction();\n        stm.onStoreRemoveAll(store, allRecords, silent);\n    }\n}\n/**\n * STM transaction autostart ready state.\n *\n * @internal\n */\nconst AutoReadyState = new AutoReadyStateClass();\nexport default AutoReadyState;\nRegistry.registerStmState('autoreadystate', AutoReadyState);\n", "/**\n * @module Core/data/stm/state/AutoRecordingState\n */\nimport Delayable from '../../../mixin/Delayable.js';\nimport { throwInvalidMethodCall } from './StateBase.js';\nimport { RecordingStateClass } from './RecordingState.js';\nimport { STATE_PROP, TRANSACTION_PROP, TRANSACTION_TIMER_PROP, QUEUE_PROP, POS_PROP, AUTO_RECORD_PROP } from '../Props.js';\nimport Registry from './Registry.js';\nimport { resetQueue } from '../Helpers.js';\n/**\n * STM recording state class.\n *\n * @internal\n */\nexport class AutoRecordingStateClass extends RecordingStateClass.mixin(Delayable) {\n    onDisable(stm) {\n        const\n            transaction = stm[TRANSACTION_PROP],\n            timer       = stm[TRANSACTION_TIMER_PROP];\n        if (timer) {\n            this.clearTimeout(timer);\n        }\n        stm.notifyStoresAboutStateRecordingStop(transaction, { disabled : true });\n        return {\n            [STATE_PROP]             : 'disabledstate',\n            [TRANSACTION_PROP]       : null,\n            [TRANSACTION_TIMER_PROP] : null\n        };\n    }\n    onAutoRecordOn(stm) {\n        throwInvalidMethodCall();\n    }\n    onAutoRecordOff(stm) {\n        const timer       = stm[TRANSACTION_TIMER_PROP];\n        if (timer) {\n            this.clearTimeout(timer);\n        }\n        return {\n            [STATE_PROP]             : 'recordingstate',\n            [AUTO_RECORD_PROP]       : false,\n            [TRANSACTION_TIMER_PROP] : null\n        };\n    }\n    onStopTransaction(stm, title) {\n        const\n            transaction = stm[TRANSACTION_PROP],\n            timer       = stm[TRANSACTION_TIMER_PROP],\n            queue       = stm[QUEUE_PROP];\n        let position = stm[POS_PROP];\n        if (timer) {\n            this.clearTimeout(timer);\n        }\n        if (transaction.length) {\n            if (!transaction.title && !title && stm.getTransactionTitle) {\n                transaction.title = stm.getTransactionTitle(transaction);\n            }\n            else if (title) {\n                transaction.title = title;\n            }\n            queue[position] = transaction;\n            queue.length    = ++position;\n        }\n        return [{\n            [STATE_PROP]             : 'autoreadystate',\n            [POS_PROP]               : position,\n            [TRANSACTION_PROP]       : null,\n            [TRANSACTION_TIMER_PROP] : null\n        }, () => {\n            stm.notifyStoresAboutStateRecordingStop(transaction, { stop : true });\n        }];\n    }\n    onStopTransactionDelayed(stm) {\n        let timer = stm[TRANSACTION_TIMER_PROP];\n        if (timer) {\n            this.clearTimeout(timer);\n        }\n        timer = this.setTimeout(\n            () => {\n                stm.stopTransaction();\n            },\n            stm.autoRecordTransactionStopTimeout\n        );\n        return {\n            [STATE_PROP]             : AutoRecordingState,\n            [TRANSACTION_TIMER_PROP] : timer\n        };\n    }\n    onResetQueue(stm, options) {\n        return resetQueue(stm, options);\n    }\n    onRejectTransaction(stm) {\n        const\n            transaction = stm[TRANSACTION_PROP],\n            timer = stm[TRANSACTION_TIMER_PROP];\n        if (timer) {\n            this.clearTimeout(timer);\n        }\n        return [{\n            [STATE_PROP]             : 'restoringstate',\n            [TRANSACTION_PROP]       : null,\n            [TRANSACTION_TIMER_PROP] : null\n        }, () => {\n            if (transaction.length) {\n                transaction.undo();\n            }\n            return [\n                'autoreadystate',\n                () => {\n                    stm.notifyStoresAboutStateRecordingStop(transaction, { rejected : true });\n                }\n            ];\n        }];\n    }\n    onModelUpdate(stm, ...rest) {\n        super.onModelUpdate(stm, ...rest);\n        stm.stopTransactionDelayed();\n    }\n    onModelInsertChild(stm, ...rest) {\n        super.onModelInsertChild(stm, ...rest);\n        stm.stopTransactionDelayed();\n    }\n    onModelRemoveChild(stm, ...rest) {\n        super.onModelRemoveChild(stm, ...rest);\n        stm.stopTransactionDelayed();\n    }\n    onStoreModelAdd(stm, ...rest)    {\n        super.onStoreModelAdd(stm, ...rest);\n        stm.stopTransactionDelayed();\n    }\n    onStoreModelInsert(stm, ...rest) {\n        super.onStoreModelInsert(stm, ...rest);\n        stm.stopTransactionDelayed();\n    }\n    onStoreModelRemove(stm, ...rest) {\n        super.onStoreModelRemove(stm, ...rest);\n        stm.stopTransactionDelayed();\n    }\n    onStoreRemoveAll(stm, ...rest)   {\n        super.onStoreRemoveAll(stm, ...rest);\n        stm.stopTransactionDelayed();\n    }\n}\n/**\n * STM recording state.\n *\n * @internal\n */\nconst AutoRecordingState = new AutoRecordingStateClass();\nexport default AutoRecordingState;\nRegistry.registerStmState('autorecordingstate', AutoRecordingState);\n", "/**\n * @module Core/data/stm/StateTrackingManager\n */\nimport Base from '../../Base.js';\nimport IdHelper from '../../helper/IdHelper.js';\nimport Events from '../../mixin/Events.js';\nimport StateBase from './state/StateBase.js';\nimport DisabledState from './state/DisabledState.js';\nimport ReadyState from './state/ReadyState.js';\nimport RecordingState from './state/RecordingState.js';\nimport RestoringState from './state/RestoringState.js';\nimport AutoReadyState from './state/AutoReadyState.js';\nimport AutoRecordingState from './state/AutoRecordingState.js';\nimport Registry from './state/Registry.js';\nimport UpdateAction from './action/UpdateAction.js';\nimport InsertChildAction from './action/InsertChildAction.js';\nimport RemoveChildAction from './action/RemoveChildAction.js';\nimport AddAction from './action/AddAction.js';\nimport InsertAction from './action/InsertAction.js';\nimport RemoveAction from './action/RemoveAction.js';\nimport RemoveAllAction from './action/RemoveAllAction.js';\nimport { STATE_PROP, STORES_PROP, QUEUE_PROP, POS_PROP, TRANSACTION_PROP, TRANSACTION_TIMER_PROP, AUTO_RECORD_PROP, IS_APPLYING_STASH } from './Props.js';\nexport const makeModelUpdateAction = (model, newData, oldData, isInitialUserAction) => {\n    return new UpdateAction({\n        model,\n        newData,\n        oldData,\n        isInitialUserAction\n    });\n};\nexport const makeModelInsertChildAction = (parentModel, insertIndex, childModels, context) => {\n    return new InsertChildAction({\n        parentModel,\n        childModels,\n        insertIndex,\n        context\n    });\n};\nexport const makeModelRemoveChildAction = (parentModel, childModels, context) => {\n    return new RemoveChildAction({\n        parentModel,\n        childModels,\n        context\n    });\n};\nexport const makeStoreModelAddAction = (store, modelList, silent) => {\n    return new AddAction({\n        store,\n        modelList,\n        silent\n    });\n};\nexport const makeStoreModelInsertAction = (store, insertIndex, modelList, context, silent) => {\n    return new InsertAction({\n        store,\n        insertIndex,\n        modelList,\n        context,\n        silent\n    });\n};\nexport const makeStoreModelRemoveAction = (store, modelList, context, silent) => {\n    return new RemoveAction({\n        store,\n        modelList,\n        context,\n        silent\n    });\n};\nexport const makeStoreRemoveAllAction = (store, allRecords, silent) => {\n    return new RemoveAllAction({\n        store,\n        allRecords,\n        silent\n    });\n};\nconst stateTransition = (stm, event, ...args) => {\n    const\n        oldState = stm.state,\n        newState = event.call(stm[STATE_PROP], stm, ...args);\n    if (typeof newState === 'string') {\n        stm[STATE_PROP] = Registry.resolveStmState(newState);\n    }\n    else if (newState instanceof StateBase) {\n        stm[STATE_PROP] = newState;\n    }\n    else if (Array.isArray(newState)) {\n        const [state, next] = newState;\n        if (typeof state === 'string') {\n            stm[STATE_PROP] = Registry.resolveStmState(state);\n        }\n        else if (state instanceof StateBase) {\n            stm[STATE_PROP] = state;\n        }\n        else if (state && typeof state === 'object') {\n            stm = Object.assign(stm, state);\n            stm[STATE_PROP] = Registry.resolveStmState(stm[STATE_PROP]);\n        }\n        if (typeof next === 'function') {\n            stateTransition(stm, next, ...args);\n        }\n    }\n    else if (newState && typeof newState === 'object') {\n        stm = Object.assign(stm, newState);\n        stm[STATE_PROP] = Registry.resolveStmState(stm[STATE_PROP]);\n    }\n    if (oldState !== ReadyState && oldState !== AutoReadyState && (newState !== ReadyState && newState !== AutoReadyState)) {\n        stm.trigger('ready');\n    }\n};\n/**\n * Tracks the state of every store registered via {@link #function-addStore}. It is {@link #config-disabled} by default\n * so remember to call {@link #function-enable} when your stores are registered and initial dataset is loaded.\n * Use {@link #function-undo} / {@link #function-redo} method calls to restore state to a particular\n * point in time\n *\n * ```javascript\n * stm = new StateTrackingManager({\n *     autoRecord : true,\n *     listeners  : {\n *        'recordingstop' : () => {\n *            // your custom code to update undo/redo GUI controls\n *            updateUndoRedoControls();\n *        },\n *        'restoringstop' : ({ stm }) => {\n *            // your custom code to update undo/redo GUI controls\n *            updateUndoRedoControls();\n *        },\n *        'disabled' : () => {\n *            // in Gantt, Scheduler and other scheduling products,\n *            // also need to update the undo/redo controls on `disabled`\n *            // event, due to implementation details\n *            updateUndoRedoControls();\n *        }\n *    },\n *    getTransactionTitle : (transaction) => {\n *        // your custom code to analyze the transaction and return custom transaction title\n *        const lastAction = transaction.queue[transaction.queue.length - 1];\n *\n *        if (lastAction instanceof AddAction) {\n *            let title = 'Add new record';\n *        }\n *\n *        return title;\n *    }\n * });\n *\n * stm.addStore(userStore);\n * stm.addStore(companyStore);\n * stm.addStore(otherStore);\n *\n * stm.enable();\n * ```\n *\n * **Note:** STM currently does not support undoing server side added and saved records.\n * Therefore it's recommended to {@link #function-resetQueue reset the queue}\n * each time a tracked store(s) loads from or saves its changes to the server.\n * If Crud Manager is used it can be done like this:\n *\n * ```javascript\n * crudManager.on({\n *     requestDone() {\n *         stm.resetQueue();\n *     }\n * });\n * ```\n *\n * and in case individual stores are used:\n *\n * ```javascript\n * ajaxStore.on({\n *     afterRequest({ exception }) {\n *         if (!exception) {\n *             stm.resetQueue();\n *         }\n *     }\n * });\n * ```\n *\n * @mixes Core/mixin/Events\n * @extends Core/Base\n */\nexport default class StateTrackingManager extends Events(Base) {\n    static get defaultConfig() {\n        return {\n            /**\n             * Default manager disabled state\n             *\n             * @config {Boolean}\n             * @default\n             */\n            disabled : true,\n            /**\n             * Whether to start transaction recording automatically in case the Manager is enabled.\n             *\n             * In the auto recording mode, the manager waits for the first change in any store being managed and starts a transaction, i.e.\n             * records any changes in its monitored stores. The transaction lasts for {@link #config-autoRecordTransactionStopTimeout} and\n             * afterwards creates one undo/redo step, including all changes in the stores during that period of time.\n             *\n             * In non auto recording mode you have to call {@link #function-startTransaction} / {@link #function-stopTransaction} to start and end\n             * a transaction.\n             *\n             * @config {Boolean}\n             * @default\n             */\n            autoRecord : false,\n            /**\n             * The transaction duration (in ms) for the auto recording mode {@link #config-autoRecord}\n             *\n             * @config {Number}\n             * @default\n             */\n            autoRecordTransactionStopTimeout : 100,\n            /**\n             * Store model update action factory\n             *\n             * @config {Function}\n             * @default\n             * @private\n             */\n            makeModelUpdateAction,\n            /**\n             * Store insert child model action factory.\n             *\n             * @config {Function}\n             * @default\n             * @private\n             */\n            makeModelInsertChildAction,\n            /**\n             * Store remove child model action factory.\n             *\n             * @config {Function}\n             * @default\n             * @private\n             */\n            makeModelRemoveChildAction,\n            /**\n             * Store add model action factory.\n             *\n             * @config {Function}\n             * @default\n             * @private\n             */\n            makeStoreModelAddAction,\n            /**\n             * Store insert model action factory.\n             *\n             * @config {Function}\n             * @default\n             * @private\n             */\n            makeStoreModelInsertAction,\n            /**\n             * Store remove model action factory.\n             *\n             * @config {Function}\n             * @default\n             * @private\n             */\n            makeStoreModelRemoveAction,\n            /**\n             * Store remove all models action factory.\n             *\n             * @config {Function}\n             * @default\n             * @private\n             */\n            makeStoreRemoveAllAction,\n            /**\n             * Function to create a transaction title if none is provided.\n             * The function receives a transaction and should return a title.\n             *\n             * @config {Function}\n             * @param {Core.data.stm.Transaction} transaction\n             * @returns {String}\n             * @default\n             */\n            getTransactionTitle : null\n        };\n    }\n    construct(...args) {\n        Object.assign(this, {\n            [STATE_PROP]             : ReadyState,\n            [STORES_PROP]            : [],\n            [QUEUE_PROP]             : [],\n            [POS_PROP]               : 0,\n            [TRANSACTION_PROP]       : null,\n            [TRANSACTION_TIMER_PROP] : null,\n            [AUTO_RECORD_PROP]       : false,\n            [IS_APPLYING_STASH]      : false,\n            stashedTransactions      : {}\n        });\n        super.construct(...args);\n    }\n    /**\n     * Gets current state of the manager\n     *\n     * @property {Core.data.stm.state.StateBase}\n     */\n    get state() {\n        return this[STATE_PROP];\n    }\n    /**\n     * Gets current undo/redo queue position\n     *\n     * @property {Number}\n     */\n    get position() {\n        return this[POS_PROP];\n    }\n    /**\n     * Gets current undo/redo queue length\n     *\n     * @property {Number}\n     */\n    get length() {\n        return this[QUEUE_PROP].length;\n    }\n    /**\n     * Gets all the stores registered in STM\n     *\n     * @property {Core.data.Store[]}\n     */\n    get stores() {\n        return Array.from(this[STORES_PROP]);\n    }\n    /**\n     * Checks if a store has been added to the manager\n     *\n     * @param  {Core.data.Store} store\n     * @returns {Boolean}\n     */\n    hasStore(store) {\n        return this[STORES_PROP].includes(store);\n    }\n    /**\n     * Adds a store to the manager\n     *\n     * @param {Core.data.Store} store\n     */\n    addStore(store) {\n        if (!this.hasStore(store)) {\n            this[STORES_PROP].push(store);\n            store.stm = this;\n            store.forEach(model => model.stm = this);\n            // The above forEach iterates all models in the store except the root model, then, for tree structure store,\n            // it needs to assign stm prop manually to the root, in order to avoid bug like this one: https://github.com/bryntum/support/issues/7581\n            if (store.isTree) {\n                store.rootNode.stm = this;\n            }\n        }\n    }\n    /**\n     * Removes a store from the manager\n     *\n     * @param {Core.data.Store} store\n     */\n    removeStore(store) {\n        if (this.hasStore(store)) {\n            this[STORES_PROP] = this[STORES_PROP].filter(s => s !== store);\n            store.stm = null;\n            store.forEach(model => model.stm = null);\n        }\n    }\n    /**\n     * Calls `fn` for each store registered in STM.\n     *\n     * @param {Function} fn (store, id) => ...\n     */\n    forEachStore(fn) {\n        this[STORES_PROP].forEach(s => fn(s, s.id));\n    }\n    //#region Disabled state\n    /**\n     * Get/set manager disabled state\n     *\n     * @property {Boolean}\n     */\n    get disabled() {\n        return this.state === DisabledState;\n    }\n    set disabled(val) {\n        const me = this;\n        if (me.disabled !== val) {\n            if (val) {\n                stateTransition(me, me.state.onDisable, me);\n            }\n            else {\n                stateTransition(me, me.state.onEnable, me);\n            }\n            me.trigger('stmDisabled', { disabled : val });\n            /**\n             * Fired when the disabled state of the STM changes\n             *\n             * @event disabled\n             * @param {Core.data.stm.StateTrackingManager} source\n             * @param {Boolean} disabled The current disabled state of the STM\n             */\n            me.trigger('disabled', { disabled : val });\n        }\n    }\n    get enabled() {\n        return !this.disabled;\n    }\n    /**\n     * Enables manager\n     */\n    enable() {\n        this.disabled = false;\n    }\n    /**\n     * Disables manager\n     */\n    disable() {\n        this.disabled = true;\n    }\n    //#endregion\n    /**\n     * Checks manager ready state\n     * @readonly\n     * @property {Boolean}\n     */\n    get isReady() {\n        return this.state === ReadyState || this.state === AutoReadyState;\n    }\n    waitForReadiness() {\n        return this.await('ready', false);\n    }\n    /**\n     * Checks manager recording state\n     * @readonly\n     * @property {Boolean}\n     */\n    get isRecording() {\n        return this.state === RecordingState || this.state === AutoRecordingState;\n    }\n    /**\n     * Checks if STM is restoring a stash\n     * @readonly\n     * @property {Boolean}\n     * @internal\n     */\n    get isApplyingStash() {\n        return this[IS_APPLYING_STASH];\n    }\n    /**\n     * Gets/sets manager auto record option\n     *\n     * @property {Boolean}\n     */\n    get autoRecord() {\n        return this[AUTO_RECORD_PROP];\n    }\n    set autoRecord(value) {\n        const me = this;\n        if (me.autoRecord != value) {\n            if (value) {\n                stateTransition(me, me.state.onAutoRecordOn, me);\n            }\n            else {\n                stateTransition(me, me.state.onAutoRecordOff, me);\n            }\n        }\n    }\n    /**\n     * Starts undo/redo recording transaction.\n     *\n     * @param {String} [title]\n     */\n    startTransaction(title = null) {\n        stateTransition(this, this.state.onStartTransaction, title);\n    }\n    /**\n     * Stops undo/redo recording transaction\n     *\n     * @param {String} [title]\n     */\n    stopTransaction(title = null) {\n        stateTransition(this, this.state.onStopTransaction, title);\n    }\n    /**\n     * Stops undo/redo recording transaction after {@link #config-autoRecordTransactionStopTimeout} delay.\n     *\n     * @private\n     */\n    stopTransactionDelayed() {\n        stateTransition(this, this.state.onStopTransactionDelayed);\n    }\n    /**\n     * Rejects currently recorded transaction.\n     */\n    rejectTransaction() {\n        stateTransition(this, this.state.onRejectTransaction);\n    }\n    /**\n     * Gets currently recording STM transaction.\n     * @readonly\n     * @property {Core.data.stm.Transaction}\n     */\n    get transaction() {\n        return this[TRANSACTION_PROP];\n    }\n    /**\n     * Gets titles of all recorded undo/redo transactions\n     * @readonly\n     * @property {String[]}\n     */\n    get queue() {\n        return this[QUEUE_PROP].map((t) => t.title);\n    }\n    get rawQueue() {\n        return this[QUEUE_PROP];\n    }\n    /**\n     * Gets manager restoring state.\n     * @readonly\n     * @property {Boolean}\n     */\n    get isRestoring() {\n        return this.state === RestoringState || this.isApplyingStash;\n    }\n    /**\n     * Checks if the manager can undo.\n     *\n     * @property {Boolean}\n     */\n    get canUndo() {\n        return this.state.canUndo(this);\n    }\n    /**\n     * Checks if the manager can redo.\n     *\n     * @property {Boolean}\n     */\n    get canRedo() {\n        return this.state.canRedo(this);\n    }\n    /**\n     * Undoes current undo/redo transaction.\n     * @param {Number} [steps=1]\n     * @returns {Promise} A promise which is resolved when undo action has been performed\n     */\n    async undo(steps = 1) {\n        if (!this.isReady) {\n            await this.waitForReadiness();\n        }\n        stateTransition(this, this.state.onUndo, steps);\n    }\n    /**\n     * Undoes all transactions.\n     * @returns {Promise} A promise which is resolved when undo actions has been performed\n     */\n    async undoAll() {\n        if (!this.isReady) {\n            await this.waitForReadiness();\n        }\n        this.undo(this.length);\n    }\n    /**\n     * Redoes current undo/redo transaction.\n     *\n     * @param {Number} [steps=1]\n     * @returns {Promise} A promise which is resolved when redo action has been performed\n     */\n    async redo(steps = 1) {\n        if (!this.isReady) {\n            await this.waitForReadiness();\n        }\n        stateTransition(this, this.state.onRedo, steps);\n    }\n    /**\n     * Redoes all transactions.\n     * @returns {Promise} A promise which is resolved when redo actions has been performed\n     */\n    async redoAll() {\n        if (!this.isReady) {\n            await this.waitForReadiness();\n        }\n        this.redo(this.length);\n    }\n    /**\n     * Resets undo/redo queue.\n     */\n    resetQueue(/* private */options = { undo : true, redo : true }) {\n        stateTransition(this, this.state.onResetQueue, options);\n    }\n    /**\n     * Resets undo queue.\n     */\n    resetUndoQueue() {\n        this.resetQueue({ undo : true });\n    }\n    /**\n     * Resets redo queue.\n     */\n    resetRedoQueue() {\n        this.resetQueue({ redo : true });\n    }\n    notifyStoresAboutStateRecordingStart(transaction) {\n        this.forEachStore((store) => store.onStmRecordingStart?.(this, transaction));\n        /**\n         * Fired upon state recording operation starts.\n         *\n         * @event recordingStart\n         * @param {Core.data.stm.StateTrackingManager} stm\n         * @param {Core.data.stm.Transaction} transaction\n         */\n        this.trigger('recordingStart', { stm : this, transaction });\n    }\n    notifyStoresAboutStateRecordingStop(transaction, reason) {\n        this.forEachStore((store) => store.onStmRecordingStop?.(this, transaction, reason));\n        /**\n         * Fired upon state recording operation stops.\n         *\n         * @event recordingStop\n         * @param {Core.data.stm.StateTrackingManager} stm\n         * @param {Core.data.stm.Transaction} transaction\n         * @param {Object} reason Transaction stop reason\n         * @param {Boolean} reason.stop Transaction recording has been stopped in a normal way.\n         * @param {Boolean} reason.disabled Transaction recording has been stopped due to STM has been disabled.\n         * @param {Boolean} reason.rejected Transaction recording has been stopped due to transaction has been rejected.\n         */\n        this.trigger('recordingStop', { stm : this, transaction, reason });\n    }\n    notifyStoresAboutStateRestoringStart() {\n        this.forEachStore((store) => store.onStmRestoringStart?.(this));\n        /**\n         * Fired upon state restoration operation starts.\n         *\n         * @event restoringStart\n         * @param {Core.data.stm.StateTrackingManager} stm\n         */\n        this.trigger('restoringStart', { stm : this });\n    }\n    /**\n     * @param {'undo'|'redo'} cause The cause of the restore, if applicable\n     * @internal\n     */\n    notifyStoresAboutStateRestoringStop({ cause, transactions }) {\n        this.forEachStore((store) => store.onStmRestoringStop?.(this));\n        /**\n         * Fired upon state restoration operation stops.\n         *\n         * @event restoringStop\n         * @param {Core.data.stm.StateTrackingManager} stm\n         */\n        this.trigger('restoringStop', { stm : this, cause, transactions });\n    }\n    notifyStoresAboutQueueReset(options) {\n        this.forEachStore((store) => store.onStmQueueReset?.(this, options));\n        /**\n         * Fired upon state undo/redo queue reset.\n         *\n         * @event queueReset\n         * @param {Core.data.stm.StateTrackingManager} stm\n         */\n        this.trigger('queueReset', { stm : this, options });\n    }\n    /**\n     * Method to call from model STM mixin upon model update\n     *\n     * @param {Core.data.Model} model\n     * @param {Object} newData\n     * @param {Object} oldData\n     *\n     * @private\n     */\n    onModelUpdate(model, newData, oldData, isInitialUserAction) {\n        stateTransition(this, this.state.onModelUpdate, model, newData, oldData, isInitialUserAction);\n    }\n    /**\n     * Method to call from model STM mixin upon tree model child insertion\n     *\n     * @param {Core.data.Model} parentModel Parent model\n     * @param {Number} index Insertion index\n     * @param {Core.data.Model[]} childModels Array of models inserted\n     * @param {Map} context Map with inserted models as keys and objects with previous parent,\n     *                      and index at previous parent.\n     *\n     * @private\n     */\n    onModelInsertChild(parentModel, index, childModels, context) {\n        stateTransition(this, this.state.onModelInsertChild, parentModel, index, childModels, context);\n    }\n    /**\n     * Method to call from model STM mixin upon tree model child removal\n     *\n     * @param {Core.data.Model} parentModel\n     * @param {Core.data.Model[]} childModels\n     * @param {Map} context\n     *\n     * @private\n     */\n    onModelRemoveChild(parentModel, childModels, context) {\n        stateTransition(this, this.state.onModelRemoveChild, parentModel, childModels, context);\n    }\n    /**\n     * Method to call from store STM mixin upon store models adding\n     *\n     * @param {Core.data.Store} store\n     * @param {Core.data.Model[]} models\n     * @param {Boolean} silent\n     *\n     * @private\n     */\n    onStoreModelAdd(store, models, silent) {\n        stateTransition(this, this.state.onStoreModelAdd, store, models, silent);\n    }\n    /**\n     * Method to call from store STM mixin upon store models insertion\n     *\n     * @param {Core.data.Store} store\n     * @param {Number} index\n     * @param {Core.data.Model[]} models\n     * @param {Map} context\n     * @param {Boolean} silent\n     *\n     * @private\n     */\n    onStoreModelInsert(store, index, models, context, silent) {\n        stateTransition(this, this.state.onStoreModelInsert, store, index, models, context, silent);\n    }\n    /**\n     * Method to call from store STM mixin upon store models removal\n     *\n     * @param {Core.data.Store} store\n     * @param {Core.data.Model[]} models\n     * @param {Object} context\n     * @param {Boolean} silent\n     *\n     * @private\n     */\n    onStoreModelRemove(store, models, context, silent) {\n        stateTransition(this, this.state.onStoreModelRemove, store, models, context, silent);\n    }\n    /**\n     * Method to call from store STM mixin upon store clear\n     *\n     * @param {Core.data.Store} store\n     * @param {Core.data.Model[]} allRecords\n     * @param {Boolean} silent\n     *\n     * @private\n     */\n    onStoreRemoveAll(store, allRecords, silent) {\n        stateTransition(this, this.state.onStoreRemoveAll, store, allRecords, silent);\n    }\n    // UI key event handling\n    onUndoKeyPress(event) {\n        const me = this;\n        if (me.enabled) {\n            if (event.shiftKey) {\n                if (me.canRedo) {\n                    event.preventDefault();\n                    me.redo();\n                }\n            }\n            else if (me.canUndo) {\n                event.preventDefault();\n                me.undo();\n            }\n        }\n    }\n    stash() {\n        const me = this;\n        if (this.transaction) {\n            const id = IdHelper.generateId('_stashedTransactionGeneratedId_');\n            me.stashedTransactions[id] = me.transaction;\n            me.rejectTransaction();\n            return id;\n        }\n    }\n    applyStash(id) {\n        const\n            me          = this,\n            transaction = me.stashedTransactions[id];\n        me[IS_APPLYING_STASH] = true;\n        if (transaction) {\n            me.startTransaction(transaction.title);\n            transaction.redo();\n            delete me.stashedTransactions[id];\n        }\n        me[IS_APPLYING_STASH] = false;\n    }\n}\nStateTrackingManager._$name = 'StateTrackingManager';", "import Base from '../Base.js';\n/**\n * @module Core/mixin/Finalizable\n */\n/**\n * This mixin provides an asynchronous completion mechanism. This allows a process to coordinate its async actions\n * (such as Ajax requests or user interaction) with cleanup.\n *\n * Consider a context tracking helper class, for example:\n *\n * ```javascript\n *  class Context extends Base.mixin(Finalizable) {\n *      // ...\n *\n *      async finish() {\n *          this.owner.trigger('finish', {\n *              context : this\n *          });\n *\n *          // Wait for any scheduled finalizer to run...\n *          await this.finalize();\n *      }\n *\n *      doFinalize() {\n *          this.destroy();\n *      }\n *  }\n * ```\n *\n * When the `finish` event is processed, the receiver can register a promise for whatever processing it would like to\n * perform:\n *\n * ```javascript\n *  class Foo {\n *      onFinish({ context }) {\n *          context.finalizer = this.askUser(context);\n *      }\n *\n *      async askUser(context) {\n *          //\n *      }\n *  }\n * ```\n *\n * @mixin\n * @internal\n */\nexport default Target => class Finalizable extends (Target || Base) {\n    static get $name() {\n        return 'Finalizable';\n    }\n    construct(...args) {\n        super.construct(...args);\n        /**\n         * This property can be set any time prior to calling {@link #function-finalize} (i.e., when the\n         * {@link #property-isFinalizing} property goes to `true`). When set, this instance will `await` this\n         * promise before completing the finalization process by calling {@link #function-doFinalize}.\n         * @member {Promise} finalizer\n         */\n        this.finalizer = null;\n        /**\n         * This property holds the `Promise` that will resolve when {@link #function-finalize} has completed. It is\n         * set when {@link #function-finalize} is called and cleared on return.\n         * @member {Boolean} finalizing\n         * @readonly\n         * @private\n         */\n        this.finalizing = null;\n        /**\n         * This property is `true` once the instance completes the {@link #function-finalize} method.\n         * @member {Boolean} isFinalized\n         * @readonly\n         */\n        this.isFinalized = false;\n        /**\n         * This property is set to `true` when {@link #function-finalize} is called.\n         * @member {Boolean} isFinalizing\n         * @readonly\n         */\n        this.isFinalizing = false;\n    }\n    /**\n     * This template method is called at the end of {@link #function-finalize}. By default it calls `destroy()`, but\n     * can be replaced by the derived class. This can be useful if it is not the `Finalizable` instance that awaits\n     * the {@link #function-finalize} method.\n     */\n    doFinalize() {\n        this.destroy();\n    }\n    /**\n     * This method is called (typically by this instance or its owner) to cleanup this instance while possibly first\n     * waiting for the {@link #property-finalizer} promise to settle. Once settled, the {@link #function-doFinalize}\n     * method is called.\n     * @async\n     */\n    finalize() {\n        const me = this;\n        let ret = me.finalizing;\n        if (!ret && !me.isFinalized) {\n            me.isFinalizing = true;  // note: we never clear this flag (use isFinalized to know if we're done)\n            // If we are called during finalization, we want to return the same promise, so we cache it away.\n            me.finalizing = ret = me._awaitFinalizer();\n        }\n        return ret;\n    }\n    async _awaitFinalizer() {\n        const me = this;\n        try {\n            await me.finalizer;\n        }\n        finally {\n            // be sure we clean up even if an exception is thrown by the finalizer...\n            me.finalizing = null;\n            me.isFinalized = true;\n            me.doFinalize();\n        }\n    }\n};\n", "import Base from '../../Base.js';\nimport BrowserHelper from '../../helper/BrowserHelper.js';\nimport DomHelper from '../../helper/DomHelper.js';\nimport EventHelper from '../../helper/EventHelper.js';\nimport Delayable from '../../mixin/Delayable.js';\nimport Finalizable from '../../mixin/Finalizable.js';\nimport Identifiable from '../../mixin/Identifiable.js';\nimport DomDataStore from '../../data/DomDataStore.js';\nimport Objects from '../../helper/util/Objects.js';\n/**\n * @module Core/util/drag/DragContext\n */\nconst\n    ABORTED  = Symbol('dragAbort'), // Drag has been aborted\n    INIT     = Symbol('dragInit'),  // Button is down but insufficient movement to start the drag\n    DRAGGING = Symbol('dragDrag'),  // Button is down and movement has started a drag\n    DROPPED  = Symbol('dragDrop'),  // Button has been released and drop has occurred\n    lockDirections = {\n        x : 'horizontal',\n        y : 'vertical'\n    };\n/**\n * This class is created during drag operations of {@link Core/mixin/Draggable}. It holds the state of an ongoing drag\n * operation.\n * @extends Core/Base\n */\nexport default class DragContext extends Base.mixin(Finalizable, Delayable, Identifiable) {\n    static $name = 'DragContext';\n    static get configurable() {\n        return {\n            /**\n             * The element that will have the {@link Core.mixin.Draggable#property-draggingItemCls}. This element is\n             * determined by the {@link Core.mixin.Draggable#config-dragItemSelector}.\n             * @config {HTMLElement}\n             */\n            itemElement : null,\n            /**\n             * The `ScrollManager` instance to use for scrolling while dragging.\n             * @config {Core.util.ScrollManager}\n             * @private\n             */\n            scrollManager : null,\n            /**\n             * Config for `startMonitoring` call.\n             * @config {Object}\n             * @private\n             */\n            monitoringConfig : null,\n            /**\n             * The source of the drag operation.\n             * @config {Core.mixin.Draggable}\n             * @default\n             * @readonly\n             * @private\n             */\n            source : null,\n            /**\n             * The current target of the drag.\n             * @member {Core.mixin.Droppable}\n             * @readonly\n             * @private\n             */\n            target : null,\n            /**\n             * The current target element of the drag.\n             * @member {HTMLElement}\n             * @private\n             */\n            targetElement : null,\n            /**\n             * The minimum distance from the touchstart/mousedown/pointerdown that must be moved to actually start a\n             * drag operation.\n             * @config {Number}\n             * @default\n             * @readonly\n             */\n            threshold : 5,\n            /**\n             * The minimum amount of time a touch must be maintained before it will initiate a drag. Movement prior to\n             * this time will cancel the drag in order to allow touch scrolling.\n             * @config {Number}\n             * @default\n             */\n            touchStartDelay : 300\n        };\n    }\n    static get identifiable() {\n        return {};\n    }\n    /**\n     * The current DOM event being processed.\n     * @member {Event} event\n     * @readonly\n     */\n    construct(...args) {\n        super.construct(...args);\n        const\n            me = this,\n            { event } = me;\n        Object.assign(me, {\n            /**\n             * This property holds the `altKey` state of the most recent event.\n             * @member {Boolean}\n             */\n            altKey : null,\n            /**\n             * An array of functions to call when cleaning up the context instance.\n             * @member {Function[]}\n             * @private\n             */\n            cleaners : [],\n            /**\n             * This property holds the `ctrlKey` state of the most recent event.\n             * @member {Boolean}\n             */\n            ctrlKey : null,\n            /**\n             * Container for data associated with the drag. Data items are added by the {@link Core.mixin.Draggable}\n             * when the drag starts.\n             * @member {Map}\n             * @private\n             */\n            data : new Map(),\n            /**\n             * The element from which the drag operation started.\n             * @member {HTMLElement}\n             * @readonly\n             */\n            element : event.target,\n            /**\n             * The event that completed the drag (a `mouseup`, `pointerup` or `touchend`).\n             * @member {Event}\n             * @readonly\n             */\n            endEvent : null,\n            /**\n             * The most recent `mousemove`, `pointermove` or `touchmove` event.\n             * @member {Event}\n             * @private\n             */\n            lastMoveEvent : null,\n            /**\n             * This property holds the `metaKey` state of the most recent event.\n             * @member {Boolean}\n             */\n            metaKey : null,\n            /**\n             * The previous {@link #property-target} of the drag.\n             * @member {Core.mixin.Droppable}\n             * @readonly\n             * @private\n             */\n            previousTarget : null,\n            /**\n             * The scroll actions reported by the {@link #config-scrollManager}.\n             * @member {Object}\n             * @private\n             */\n            scrollerAction : null,\n            /**\n             * This property holds the `shiftKey` state of the most recent event.\n             * @member {Boolean}\n             */\n            shiftKey : null,\n            /**\n             * This property holds the current state of the drag process.\n             *\n             * This will be one of the following values:\n             *\n             *  - `DragContext.STATE.INIT` - The button is down but there is insufficient movement to start the drag.\n             *  - `DragContext.STATE.DRAGGING` - The button is down and movement has started the drag.\n             *  - `DragContext.STATE.DROPPED` - The button has been released and drop has occurred.\n             *  - `DragContext.STATE.ABORTED` - The drag has been aborted (this happens if the user presses the `ESC`\n             *    key or if the {@link #function-abort} method is called).\n             *\n             * @member {Symbol}\n             * @readonly\n             * @internal\n             */\n            state : INIT,\n            /**\n             * The event that started the drag operation.\n             * @member {Event}\n             * @readonly\n             */\n            startEvent : event,\n            /**\n             * The timer that fires when a touch pointermove is allowed to start the drag. A touch pointermove event\n             * prior to this will `abort()` the drag to allow touch scrolling.\n             * @member {Number}\n             * @private\n             */\n            touchStartTimer : null,\n            /**\n             * Stores the value from writes to the {@link #property-valid} property.\n             * @member {Boolean}\n             * @private\n             */\n            _valid : true\n        });\n        if (('touches' in event) && me.touchStartDelay) {\n            me.touchStartTimer = me.setTimeout(() => me.touchStartTimer = null, me.touchStartDelay, 'touchStartDelay');\n        }\n        EventHelper.on({\n            element : globalThis,\n            blur    : 'onWindowBlur',\n            thisObj : me\n        });\n    }\n    doDestroy() {\n        const\n            me = this,\n            { source, target } = me;\n        me.cleanup();\n        if (target?.dropping === me) {\n            target.dropping = null;\n        }\n        if (source?.dragging === me) {\n            source.dragging = null;\n        }\n        super.doDestroy();\n    }\n    onWindowBlur() {\n        if (this.started) {\n            this.abort();\n        }\n    }\n    /**\n     * This property is `true` if the {@link #function-abort} method was called and `false` otherwise. This\n     * is typically because the user pressed the ESC key, however, a drag can be aborted for other reasons.\n     * @property {Boolean}\n     * @readonly\n     */\n    get aborted() {\n        return this.state === ABORTED;\n    }\n    /**\n     * Returns `true` if the drag has completed either by mouse/pointerup or the {@link #function-abort} method.\n     * @property {Boolean}\n     * @readonly\n     */\n    get completed() {\n        return this.isDestroying || this.aborted || this.endEvent !== null;\n    }\n    /**\n     * This property is `true` if the drag {@link #config-threshold} has not yet been reached.\n     * @property {Boolean}\n     * @readonly\n     */\n    get pending() {\n        return this.state === INIT;\n    }\n    /**\n     * This property is `true` if the drag {@link #config-threshold} has been reached and the drag operation is active.\n     * @property {Boolean}\n     * @readonly\n     */\n    get started() {\n        return this.state !== INIT && !this.aborted;\n    }\n    /**\n     * This property is `true` when the drag is in a valid drop state. This can be set to `false` to indicate the drop\n     * is invalid. Setting to `true` does not ensure that the property will be `true` when next read due to other factors\n     * that are required to make the drop valid. For example, setting `valid = true` will still return `false` if called\n     * before the drag {@link #config-threshold} has not been reached or if the {@link #function-abort} method has been\n     * called.\n     * @property {Boolean}\n     */\n    get valid() {\n        return this.started && this.targetElement != null && this._valid;\n    }\n    set valid(v) {\n        this._valid = v;\n    }\n    //region Data Access\n    /**\n     * Retrieves a data item from the drag source. This method can only be called after the drag has completed.\n     * @param {String|String[]} name The name of the data item.\n     * @returns {*}\n     */\n    async get(name) {\n        if (this.aborted) {\n            throw new Error('Data is not available on aborted drag');\n        }\n        if (!this.completed) {\n            throw new Error('Data is not available until drag completion');\n        }\n        if (Array.isArray(name)) {\n            return Promise.all(name.map(s => this.get(s)));\n        }\n        let value = this.data.get(name);\n        if (typeof value === 'function') {\n            value = await value();\n            this.data.set(name, value);\n        }\n        return value;\n    }\n    /**\n     * Returns `true` if the named data item is present.\n     * @param {String} name The name of the data item.\n     * @returns {Boolean}\n     */\n    has(name) {\n        return this.data.has(name);\n    }\n    /**\n     * Retrieves a data item from the drag source if it is available. This will return `true` for an item that was\n     * {@link #function-set} using a renderer function.\n     * @param {String|String[]} name The name of the data item.\n     * @returns {*}\n     */\n    peek(name) {\n        if (this.aborted) {\n            throw new Error('Data is not available on aborted drag');\n        }\n        if (Array.isArray(name)) {\n            return name.map(s => this.peek(s));\n        }\n        let value = this.data.get(name);\n        if (typeof value === 'function') {\n            value = true;\n        }\n        return value;\n    }\n    /**\n     * Sets a data item for the drag. If a function is passed, it is called to render the data only if that data is\n     * actually requested via the {@link #function-get} method. A data renderer function can be `async`.\n     * @param {String} name The name of the data item.\n     * @param {*} value The value of the data item.\n     */\n    set(name, value) {\n        this.data.set(name, value);\n    }\n    //endregion\n    //region Configs\n    changeTarget(target, was) {\n        if (target !== was) {\n            const me = this;\n            me._target = target;\n            me.previousTarget = was;\n            if (was) {\n                was.dropping = null;\n            }\n            if (target) {\n                target.dropping = me;  // calls dragEnter/Leave on the target\n                if (target.dropping !== me) {  // if (target did not accept us)\n                    target = null;\n                    me.valid = false;\n                }\n            }\n            me._target = was;\n        }\n        return target;\n    }\n    updateTarget(target, was) {\n        const me = this;\n        if (was) {\n            me.source.dragLeaveTarget(me, was);\n        }\n        if (target) {\n            me.valid = true;\n            // Always give the target an initial dragMove since feedback/indicators will need to update on move and\n            // the lack of a move on entry will just make that a special case.\n            target.dragMove(me);\n            me.source.dragEnterTarget(me);\n        }\n    }\n    updateTargetElement(targetElement) {\n        let droppable,\n            droppables,\n            droppableSelector,\n            i,\n            t;\n        // We interrogate all encapsulating DOM elements to see if we are in a Droppable's element.\n        // If we find an element which has Droppables registered for it, we attempt to set each as\n        // our target, and go with the first one that accepts us.\n        // changeTarget sets target.dropping to this Context, and the target's dragEnter implementation\n        // may reject it by returning false.\n        for (t = targetElement; t; t = t.parentElement) {\n            droppables = DomDataStore.get(t, 'droppables');\n            if (droppables) {\n                for (i = 0; i < droppables.length; ++i) {\n                    droppable = droppables[i];\n                    // If the event target is *inside* the Droppable's root, we can ask the Droppable\n                    // to accept this DragContext.\n                    // Otherwise we can get a hit on borders.\n                    if (droppable.dropRootElement.contains(targetElement)) {\n                        droppableSelector = droppable.droppableSelector;\n                        // If the target element is not inside the Droppable's selector, give up.\n                        if (!droppableSelector || targetElement.closest(`#${DomHelper.getId(droppable.dropRootElement)} ${droppableSelector}`)) {\n                            this.target = droppable;\n                            // The found Droppable accepted this DragContext, so we're done -\n                            // we are using this Droppable.\n                            if (this.target === droppable) {\n                                return;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    //endregion\n    //region Operations\n    /**\n     * Aborts the drag. After calling this method, {@link #property-aborted} will be `true`, {@link #property-valid}\n     * will be `false` and {@link #property-completed} will be `true`.\n     */\n    abort() {\n        const\n            me = this,\n            { element, source } = me;\n        // Force a synchronous layout so that transitions from this point will work.\n        element?.getBoundingClientRect();\n        if (me.state !== DROPPED) {\n            me.state = ABORTED;\n            me.cleanup();\n        }\n        source?.endDrag(me);\n    }\n    begin() {\n        const\n            me = this,\n            { source } = me,\n            ret = source.beforeDrag(me);\n        if (ret !== false) {\n            source.dragging = me;\n        }\n        return ret;\n    }\n    cleanup() {\n        let cleaner;\n        while ((cleaner = this.cleaners.pop())) {\n            cleaner();\n        }\n    }\n    end(event) {\n        const\n            me = this,\n            { lastMoveEvent : lastEvent, target } = me,\n            { dragSwallowClickTime } = me.source;\n        me.event = me.domEvent = me.endEvent = event;\n        me.syncFlags();\n        if (me.started) {\n            if (lastEvent?.clientX !== event.clientX || lastEvent?.clientY !== event.clientY ||\n                lastEvent?.target !== event.target) {\n                // Make sure the drop event is preceded by a move to the final position...\n                me.track();\n            }\n            if (dragSwallowClickTime) {\n                // Prevent the impending document click from the mouseup event from propagating\n                // into a click on our element.\n                EventHelper.on({\n                    element : document,\n                    capture : true,\n                    expires : dragSwallowClickTime, // In case a click did not ensue, remove the listener\n                    once    : true,\n                    click(event) {\n                        event.stopPropagation();\n                    }\n                });\n            }\n            me.state = DROPPED;\n            if (target !== me.source) {\n                // If we are the target and not also the source, we need to call dragDrop() now. If we are\n                // the source, dragDrop() will be called by Draggable.\n                target?.dragDrop(me);\n            }\n        }\n    }\n    fakeKey(event, down) {\n        const\n            me = this,\n            { lastMoveEvent } = me;\n        if (lastMoveEvent && me.element) {\n            let changed;\n            // Indicate that this is a 'fake' mousemove event as a result of the keydown\n            lastMoveEvent.isKey = true;\n            if (event.key === 'Alt') {\n                if (me.altKey !== down) {\n                    me.altKey = down;\n                    changed = true;\n                }\n            }\n            else if (event.key === 'Control') {\n                if (me.ctrlKey !== down) {\n                    me.ctrlKey = down;\n                    changed = true;\n                }\n            }\n            if (changed) {\n                me.event = me.domEvent = lastMoveEvent;\n                me.track();\n            }\n        }\n    }\n    keyDown(event) {\n        if (!this.completed) {\n            if (event.key === 'Escape') {\n                this.abort();\n            }\n            else if (this.isDragToggleKey(event.key)) {\n                this.fakeKey(event, true);\n            }\n        }\n    }\n    keyUp(event) {\n        if (!this.completed && this.isDragToggleKey(event.key)) {\n            this.fakeKey(event, false);\n        }\n    }\n    getDistance(event) {\n        return EventHelper.getDistanceBetween(this.startEvent, event);\n    }\n    isDragToggleKey(key) {\n        return key === 'Control' || key === 'Alt';\n    }\n    move(event) {\n        const\n            me = this,\n            { target } = event,\n            distance = me.getDistance(event),\n            significant = distance >= me.threshold;\n        me.syncFlags();\n        if (me.touchStartTimer) {\n            if (significant) {\n                me.abort();\n            }\n            return;\n        }\n        if (target && target.nodeType === Node.ELEMENT_NODE) {\n            if (significant && !me.started) {\n                me.event = me.domEvent = event;\n                // triggers beforeDragStart, dragStart. returning false from beforeDragStart aborts drag\n                if (me.start() === false) {\n                    me.abort();\n                    return;\n                }\n            }\n            // With resize observer polyfill scroll event might fire after drop is completed but before listener is\n            // removed\n            if (me.started && !me.completed) {\n                me.lastMoveEvent = me.event = me.domEvent = event;\n                // to prevent view drag (scroll) on ipad\n                if (event.type === 'touchmove') {\n                    event.preventDefault();\n                    event.stopImmediatePropagation();\n                }\n                me.track();\n            }\n        }\n    }\n    start() {\n        const\n            me = this,\n            { scrollManager, monitoringConfig, source } = me,\n            { draggingBodyCls : activeCls, dragLock } = source,\n            element = /* source.dragWithin || */ source.dragRootElement;\n        me.state = DRAGGING;\n        // To avoid scrolling on touchmove, set all scrolling ancestors to overflow : hidden\n        if (me.startEvent.type === 'touchstart' && BrowserHelper.isMobileSafari) {\n            for (let node = me.startEvent.target.parentElement; node; node = node.parentElement) {\n                const\n                    { style } = node,\n                    overflow  = DomHelper.getStyleValue(node, 'overflow');\n                if (overflow === 'auto' || overflow == 'scroll') {\n                    if (!me.scrollingAncestors) {\n                        me.scrollingAncestors = [];\n                    }\n                    me.scrollingAncestors.push([node, style.overflow, style.overflowX, style.overflowY]);\n                    style.overflow = 'hidden';\n                }\n            }\n            me.requestAnimationFrame(() => {\n                me.scrollingAncestors.forEach(([{ style }, overflow, overflowX, overflowY]) => {\n                    style.overflow  = overflow;\n                    style.overflowX = overflowX;\n                    style.overflowY = overflowY;\n                });\n                me.scrollingAncestors = null;\n            });\n        }\n        // Now that the drag drop is confirmed to be starting, activate the configured scrollManager if present\n        if (scrollManager) {\n            const detacher = scrollManager.startMonitoring(Objects.merge({\n                scrollables : [{\n                    element\n                }],\n                direction : lockDirections[dragLock] || dragLock || 'both',\n                callback(scrollerAction) {\n                    const { lastMoveEvent } = me;\n                    if (lastMoveEvent && me.element) {\n                        // Indicate that this is a 'fake' mousemove event as a result of the scrolling\n                        lastMoveEvent.isScroll = true;\n                        me.event = me.domEvent = lastMoveEvent;\n                        me.scrollerAction = scrollerAction;\n                        me.track();\n                        me.scrollerAction = null;\n                    }\n                }\n            }, monitoringConfig));\n            me.cleaners.push(detacher);\n        }\n        // Global informational class for when DragHelper is dragging\n        const rootEl = source.dragRootElement.closest('.b-outer') || document.body;\n        rootEl.classList.add(activeCls);\n        me.cleaners.push(() => rootEl.classList.remove(activeCls));\n        if (source.startDrag(me) === false) {\n            me.cleanup();\n            return false;\n        }\n    }\n    syncFlags() {\n        const\n            me = this,\n            { event } = me;\n        me.altKey = event.altKey;\n        // Our EventHelper events are \"unfixed\" after processing, so the meta->ctrl\n        // modifier mapping will not persist. We must do the mapping here.\n        me.ctrlKey = event.ctrlKey || event.metaKey;\n        me.metaKey = event.metaKey;\n        me.shiftKey = event.shiftKey;\n    }\n    track() {\n        const\n            me = this,\n            { event, source, target } = me;\n        let targetElement = event.target,\n            touch;\n        // NOTE: we cannot syncFlags here since we are called to pass along keydown events as movement updates\n        // \"pointer-events:none\" touchmove has no effect for the touchmove event target, meaning we cannot know\n        // what's under the cursor as easily in touch devices\n        if (event.type === 'touchmove') {\n            touch = event.changedTouches[0];\n            // From MDN:\n            //  * clientX/Y - the coordinates of the touch point relative to the left/top edge of the browser viewport,\n            //    not including any scroll offset.\n            //  * The elementFromPoint() method returns the topmost Element at the specified coordinates (relative to\n            //    the viewport).\n            targetElement = DomHelper.elementFromPoint(touch.clientX, touch.clientY);\n        }\n        me.targetElement = targetElement;  // when we change elements, update me.target\n        if (target === me.target) {\n            // if we have a target and that did not change due to setting targetElement, we need to inform the target\n            // of the drag move\n            target?.dragMove(me);\n        }\n        source.trackDrag(me);\n    }\n    //endregion\n}\nDragContext.prototype.STATE = DragContext.STATE = Object.freeze({\n    ABORTED,\n    INIT,\n    DRAGGING,\n    DROPPED\n});\nDragContext._$name = 'DragContext';", "import Base from '../../Base.js';\nimport Factoryable from '../../mixin/Factoryable.js';\n/**\n * @module Core/util/drag/DragProxy\n */\n/**\n * Drag proxies are helper classes that represent the object being dragged in some visual way. This is an abstract\n * base with which particular drag proxy classes (such as, {@link Core.util.drag.DragTipProxy} are registered.\n *\n * Derived classes the various template methods of this class to manage their particular form of visual feedback.\n * @extends Core/Base\n * @internal\n */\nexport default class DragProxy extends Base.mixin(Factoryable) {\n    static get type() {\n        return 'default';\n    }\n    static get configurable() {\n        return {\n            /**\n             * The currently active `DragContext`. This context will be active prior to be passed to the proxy. This\n             * config is set by {@link #function-dragStart} and cleared by {@link #function-dragEnd}.\n             * @config {Core.util.drag.DragContext}\n             */\n            dragging : null\n        };\n    }\n    static get factoryable() {\n        return {\n            defaultType : DragProxy\n        };\n    }\n    /**\n     * The `Draggable` instance that owns this drag proxy.\n     * @member {Core.mixin.Draggable} owner\n     * @readonly\n     */\n    //region Configs\n    updateDragging(drag, was) {\n        if (was) {\n            this.close(was);\n        }\n        if (drag) {\n            this.open(drag);\n        }\n    }\n    //endregion\n    //region Operations\n    /**\n     * This template method is called when {@link #config-dragging} is reset to `null`.\n     * @param {Core.util.drag.DragContext} drag The drag instance.\n     */\n    close(drag) {\n        // template\n    }\n    /**\n     * This template method is called when {@link #config-dragging} is set to a non-`null` value.\n     * @param {Core.util.drag.DragContext} drag The drag instance.\n     */\n    open(drag) {\n        // template\n    }\n    //endregion\n    //region Drag Processing\n    /**\n     * This template method is called by the `Draggable` instance when the drag officially starts.\n     * This sets the {@link #config-dragging} config to `drag`, which triggers the call to {@link #function-open}.\n     * @param {Core.util.drag.DragContext} drag The drag instance.\n     */\n    dragStart(drag) {\n        this.dragging = drag;\n    }\n    /**\n     * This template method is called by the `Draggable` instance as drag movement occurs.\n     * @param {Core.util.drag.DragContext} drag The drag instance.\n     */\n    dragMove(drag) {\n        // template\n    }\n    /**\n     * This template method is called by the `Draggable` instance when the drag completes.\n     *\n     * This sets the {@link #config-dragging} config to `null`, which triggers the call to {@link #function-close}.\n     * @param {Core.util.drag.DragContext} drag The drag instance.\n     */\n    dragEnd(drag) {\n        this.dragging = null;\n    }\n    //endregion\n}\nDragProxy.initClass();\nDragProxy._$name = 'DragProxy';", "import Base from '../Base.js';\nimport EventHelper from '../helper/EventHelper.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\nimport DragContext from '../util/drag/DragContext.js';\nimport DragProxy from '../util/drag/DragProxy.js';\n/**\n * @module Core/mixin/Draggable\n */\n/**\n * Mix this into another class to enable drag/drop support.\n *\n * To use a draggable, it must be associated with an element that contains draggable content:\n *\n * ```javascript\n *  let draggable = new MyDraggable({\n *      dragRootElement : someElement\n *  });\n * ```\n *\n * Once the `dragRootElement` is assigned, any element inside that root is a candidate for dragging. To limit the\n * allowed element, set the {@link #config-dragSelector} config.\n *\n * ```javascript\n *  let draggable = new MyDraggable({\n *      dragRootElement : someElement,\n *      dragSelector    : '.drag-this'\n *  });\n * ```\n *\n * @mixin\n * @internal\n */\nexport default Target => class Draggable extends (Target || Base) {\n    static get $name() {\n        return 'Draggable';\n    }\n    //region Configs\n    static get configurable() {\n        return {\n            /**\n             * The current `DragContext`. This is created immediately on pointerdown but does not become active until\n             * some movement occurs. This {@link #config-dragThreshold threshold} is configurable.\n             * @member {Core.util.drag.DragContext}\n             * @readonly\n             */\n            dragging : {\n                $config : 'nullify',\n                value   : null\n            },\n            /**\n             * A CSS selector to use to ascend from the {@link #config-dragRootElement} to find the element that will\n             * gain the {@link #property-draggingCls} and {@link #property-draggingStartedCls} CSS classes.\n             * @config {String}\n             */\n            draggingClsSelector : null,\n            /**\n             * The listeners to add to the `document` during a drag.\n             * @config {Object}\n             * @private\n             */\n            dragDocumentListeners : {\n                element : document,\n                keydown : 'onDragKeyDown',\n                keyup   : 'onDragKeyUp',\n                // On mobile, a long-press will (sometimes) trigger a context menu, so we suppress it:\n                contextmenu : 'onDragContextMenu',\n                // We don't use pointermove/up because they get snared in the \"touch-action\" vs \"pan-x/y\" trap and we\n                // cannot prevent panning (aka scrolling) in response to move events if we go that way:\n                mousemove : 'onDragPointerMove',\n                mouseup   : 'onDragPointerUp',\n                // Touch desktops don't fire touchend event when touch has ended, instead pointerup is fired. iOS does\n                // fire touchend:\n                pointerup : 'onDragPointerUp',\n                touchend  : 'onDragPointerUp',\n                touchmove : {\n                    handler : 'onDragPointerMove',\n                    passive : false // We need to be able to preventDefault on the touchmove\n                }\n            },\n            /**\n             * A CSS selector to use to ascend from the drag element to find the element that will gain the\n             * {@link #property-draggingItemCls} CSS class. If not supplied, the drag element will gain this CSS\n             * class.\n             * @config {String}\n             */\n            dragItemSelector : null,\n            /**\n             * A CSS class to add to items identified by the {@link #config-dragItemSelector} when the mouse\n             * enters.\n             * @config {String}\n             */\n            dragItemOverCls : null,\n            /**\n             * A function to call when the pointer enters a {@link #config-dragItemSelector}.\n             * @config {Function} onDragItemMouseEnter\n             * @param {MouseEvent} event Pointer event\n             * @param {HTMLElement} element Over element\n             * @returns {void}\n             */\n            /**\n             * A function to call when the pointer moves inside a {@link #config-dragItemSelector}.\n             * @config {Function} onDragItemMouseMove\n             * @param {MouseEvent} event Pointer event\n             * @param {HTMLElement} element Over element\n             * @returns {void}\n             */\n            /**\n             * A function to call when the pointer leaves a {@link #config-dragItemSelector}.\n             * @config {Function} onDragItemMouseLeave\n             * @param {MouseEvent} event Pointer event\n             * @param {HTMLElement} element Over element\n             * @returns {void}\n             */\n            /**\n             * Configure as `'x'` to lock dragging to the `X` axis (the drag will only move horizontally) or `'y'`\n             * to lock dragging to the `Y` axis (the drag will only move vertically).\n             * @config {'x'|'y'|null}\n             */\n            dragLock : null,\n            /**\n             * The minimum distance a drag must move to be considered a drop and not\n             * {@link Core.util.drag.DragContext#property-aborted}.\n             * @config {Number}\n             * @default\n             */\n            dragMinDistance : 1,\n            /**\n             * The {@link Core.util.drag.DragProxy drag proxy} is a helper object that can be used to display feedback\n             * during a drag.\n             * @config {DragProxyConfig|Core.util.drag.DragProxy}\n             */\n            dragProxy : {\n                $config : ['lazy', 'nullify'],\n                value : null\n            },\n            /**\n             * The outer element where dragging will operate (attach events to it and use as root limit when looking\n             * for ancestors).\n             * @config {HTMLElement}\n             */\n            dragRootElement : {\n                $config : 'nullify',\n                value : null\n            },\n            /**\n             * Set to `true` to allow a drag to drop on to the same element from which the drag started.\n             * @config {Boolean}\n             * @default\n             */\n            dragSameTargetDrop : false,\n            /**\n             * A CSS selector used to determine which element(s) can be dragged.\n             * @config {String}\n             * @default\n             */\n            dragSelector : null,\n            /**\n             * A CSS selector used to identify child element(s) that should not trigger drag.\n             * @config {String}\n             */\n            ignoreSelector : null,\n            /**\n             * The number of milliseconds after a pointerup to ignore click events on the document. This\n             * is used to avoid the \"up\" event itself generating a `click` on the target.\n             * @config {Number}\n             * @default\n             */\n            dragSwallowClickTime : 50,\n            /**\n             * The amount of pixels to move pointer/mouse before it counts as a drag operation.\n             * @config {Number}\n             * @default\n             */\n            dragThreshold : 5,\n            /**\n             * The number of milliseconds that must elapse after a `touchstart` event before it is considered a drag. If\n             * movement occurs before this time, the drag is aborted. This is to allow touch swipes and scroll gestures.\n             * @config {Number}\n             * @default\n             */\n            dragTouchStartDelay : 300,\n            /**\n             * The CSS selector to use to identify the closest valid target from the event target.\n             * @config {String}\n             */\n            dropTargetSelector : null,\n            /**\n             * The {@link #config-dragSelector} item the mouse is currently over.\n             * @member {HTMLElement} overItem\n             * @readonly\n             */\n            overItem : null,\n            testConfig : {\n                dragSwallowClickTime : 50\n            }\n        };\n    }\n    static get properties() {\n        return {\n            /**\n             * The CSS class to add to the {@link #config-dragRootElement} (or {@link #config-draggingClsSelector} from\n             * there) as soon as the pointerdown event occurs.\n             * @member {String}\n             * @readonly\n             */\n            draggingCls : 'b-draggable-active',\n            /**\n             * The CSS class to add to the `body` element as soon as the {@link #config-dragThreshold} is reached and\n             * an actual drag is in progress.\n             * @member {String}\n             * @readonly\n             */\n            draggingBodyCls : 'b-draghelper-active',  // match DragHelper since we need the same treatment\n            /**\n             * The CSS class to add to the element being dragged as soon as the pointerdown event occurs.\n             * @member {String}\n             * @readonly\n             */\n            draggingItemCls : 'b-dragging-item',\n            /**\n             * The CSS class to add to the {@link #config-dragRootElement} (or {@link #config-draggingClsSelector} from\n             * there) as soon as the {@link #config-dragThreshold} is reached and an actual drag is in progress.\n             * @member {String}\n             * @readonly\n             */\n            draggingStartedCls : 'b-draggable-started',\n            /**\n             * The CSS class that is added to the {@link #config-dragRootElement}, i.e., `'b-draggable'`.\n             * @property {String}\n             * @readonly\n             */\n            draggableCls : 'b-draggable'\n        };\n    }\n    //endregion\n    //region Drag Processing\n    // These template methods are implemented by derived classes as desired. There is only one overlap with Droppable's\n    // template methods (dragDrop) so that a class can easily mixin both Draggable and Droppable and always distinguish\n    // whether it is acting as the source, the target, or both.\n    /**\n     * This template method is called when the mousedown of a potential drag operation occurs. This happens before the\n     * gesture is known to be a drag, meaning the {@link #config-dragThreshold} has not been reached. This method\n     * should initialize the {@link Core.util.drag.DragContext} using the {@link Core.util.drag.DragContext#function-set}\n     * method. Alternatively, this method may return `false` to prevent the drag operation.\n     *\n     * *Important:* Because no drag has occurred at the time this method is called, only minimal processing should be\n     * done (such as initializing the {@link Core.util.drag.DragContext}). Anything more should be done in the\n     * {@link #function-dragStart} method or in response to the {@link #event-dragStart} event which happen only if\n     * the user drags the mouse before releasing the mouse button.\n     * @param {Core.util.drag.DragContext} drag\n     */\n    beforeDrag(drag) {\n        const\n            { dragRootElement, dragSelector, ignoreSelector } = this,\n            target = dragSelector && drag.element.closest(dragSelector);\n        return !dragSelector || Boolean(target &&\n            target === dragRootElement ||\n            (dragRootElement.contains(target) && (!ignoreSelector || !drag.element.matches(ignoreSelector)))\n        );\n    }\n    /**\n     * This template method is called when the drag operation starts. This occurs when the {@link #config-dragThreshold}\n     * has been reached.\n     * Your implementation may return `false` to prevent the startup of the drag operation.\n     * @param {Core.util.drag.DragContext} drag\n     */\n    dragStart(drag) {\n        // template\n    }\n    /**\n     * This template method is called as the drag moves. This occurs on each mouse/pointer/touchmove event.\n     * @param {Core.util.drag.DragContext} drag\n     */\n    dragOver(drag) {\n        // template\n    }\n    /**\n     * This template method is called when the drag enters a {@link Core.mixin.Droppable target}.\n     * @param {Core.util.drag.DragContext} drag\n     */\n    dragEnterTarget(drag) {\n        // template\n    }\n    /**\n     * This template method is called when the drag leaves a {@link Core.mixin.Droppable target}.\n     * @param {Core.util.drag.DragContext} drag\n     * @param {Core.mixin.Droppable} oldTarget The previous value of `drag.target`.\n     */\n    dragLeaveTarget(drag, oldTarget) {\n        // template\n    }\n    /**\n     * This template method is called when the drag operation completes. This occurs on the pointerup event.\n     *\n     * This method is not called if the drag is {@link Core.util.drag.DragContext#property-aborted}.\n     * @param {Core.util.drag.DragContext} drag\n     */\n    dragDrop(drag) {\n        // template\n    }\n    /**\n     * This template method is called when the drag operation completes. This occurs on the pointerup event or perhaps\n     * a keypress event.\n     *\n     * This method is always called, even if the drag is {@link Core.util.drag.DragContext#property-aborted}.\n     * @param {Core.util.drag.DragContext} drag\n     */\n    dragEnd(drag) {\n        // template\n    }\n    //endregion\n    //region Drag Management\n    // These methods are called by the DragContext and generally manage element updates (adding/removing classes) or\n    // event firing. In most cases these methods then call a corresponding Drag Processing template method intended\n    // for derived classes to implement.\n    get activeDrag() {\n        const { dragging : drag } = this;\n        return (drag?.started && !drag.completed) ? drag : null;\n    }\n    /**\n     * Return the `Events` instance from which drag events are fired.\n     * @internal\n     * @property {Core.mixin.Events}\n     */\n    get dragEventer() {\n        return this.trigger ? this : null;  // simple Events feature detector\n    }\n    get draggingClassElement() {\n        const { draggingClsSelector, dragRootElement } = this;\n        return draggingClsSelector ? dragRootElement?.closest(draggingClsSelector) : dragRootElement;\n    }\n    beginDrag(drag) {\n        const { draggingCls, draggingClassElement } = this;\n        if (draggingCls && draggingClassElement) {\n            draggingClassElement.classList.add(draggingCls);\n            drag.cleaners.push(() => draggingClassElement.classList.remove(draggingCls));\n        }\n    }\n    async endDrag(drag) {\n        const\n            me = this,\n            { dragEventer, dragProxy } = me;\n        if (drag.valid) {\n            // The implementation may be async. If so, any Promise must always be\n            // propagated back to a point which may have to await it\n            await me.dragDrop(drag);\n        }\n        if (me.isDestroyed) {\n            return;\n        }\n        if (drag.pending) {\n            drag.destroy();\n        }\n        else {\n            me.dragEnd(drag);\n            dragProxy?.dragEnd(drag);\n            /**\n             * This event is fired when a drag gesture is completed due to the user aborting it (with the `ESC` key) or\n             * if the {@link Core.util.drag.DragContext#function-abort} method was called.\n             * @event dragCancel\n             * @param {Core.mixin.Draggable} source The draggable instance that fired the event.\n             * @param {Core.util.drag.DragContext} drag The drag context.\n             * @param {Event} event The browser event.\n             */\n            /**\n             * This event is fired when a drag gesture is completed successfully.\n             *\n             * This event is **not** fired if the drag was aborted by the user pressing the `ESC` key or if the\n             * {@link Core.util.drag.DragContext#function-abort} method was called.\n             * @event drop\n             * @param {Core.mixin.Draggable} source The draggable instance that fired the event.\n             * @param {Core.util.drag.DragContext} drag The drag context.\n             * @param {Event} event The browser event.\n             */\n            dragEventer?.trigger(drag.valid ? 'drop' : 'dragCancel', { drag, event : drag.event });\n            // The drag context could have registered finalizers added by the above methods or event. If so, we need to\n            // wait for finalization of the drag before we clear our \"dragging\" config.\n            me.finalizeDrag(drag);\n        }\n    }\n    async finalizeDrag(drag) {\n        await drag.finalize?.();\n        // The doFinalize() method of DragContext is called by the above await... which nulls our \"dragging\" config\n    }\n    moveDrag(drag) {\n        if (this.dragOver(drag) !== false) {\n            const { dragEventer, dragProxy } = this;\n            dragProxy?.dragMove(drag);\n            /**\n             * This event is fired as a drag gesture progresses due to cursor movement.\n             * @event drag\n             * @param {Core.mixin.Draggable} source The draggable instance that fired the event.\n             * @param {Core.util.drag.DragContext} drag The drag context.\n             * @param {Event} event The browser event.\n             */\n            dragEventer?.trigger('drag', { drag, event : drag.event });\n        }\n    }\n    setupDragContext(event) {\n        const\n            me = this,\n            { dragItemSelector, id } = me,\n            { target } = event;\n        return {\n            event,\n            id              : id ? `${id}-drag-${me._nextDragId = (me._nextDragId || 0) + 1}` : null,\n            itemElement     : dragItemSelector ? target.closest(dragItemSelector) : target,\n            touchStartDelay : me.dragTouchStartDelay,\n            source          : me,\n            threshold       : me.dragThreshold\n        };\n    }\n    startDrag(drag) {\n        const\n            { draggingStartedCls, draggingClassElement, draggingItemCls, dragEventer, dragProxy } = this,\n            { itemElement } = drag;\n        /**\n         * This event is fired prior to starting a drag gesture. This does not occur immediately after the user\n         * performs the pointer/mousedown/touchstart but only after the {@link #config-dragThreshold} amount of\n         * movement has taken place.\n         *\n         * The drag is canceled if a listener returns `false`.\n         * @event beforeDragStart\n         * @param {Core.mixin.Draggable} source The draggable instance that fired the event.\n         * @param {Core.util.drag.DragContext} drag The drag context.\n         * @param {Event} event The browser event.\n         * @preventable\n         */\n        if (dragEventer?.trigger('beforeDragStart', { drag, event : drag.event }) === false) {\n            return false;\n        }\n        if (draggingStartedCls && draggingClassElement) {\n            draggingClassElement.classList.add(draggingStartedCls);\n            drag.cleaners.push(() => draggingClassElement.classList.remove(draggingStartedCls));\n        }\n        if (draggingItemCls && itemElement) {\n            itemElement.classList.add(draggingItemCls);\n            drag.cleaners.push(() => itemElement.classList.remove(draggingItemCls));\n        }\n        dragProxy?.dragStart(drag);\n        const result = this.dragStart(drag);\n        if (result !== false) {\n            /**\n             * This event is fired when a drag gesture has started. This does not occur immediately after the user\n             * performs the pointer/mousedown/touchstart but only after the {@link #config-dragThreshold} amount of\n             * movement has taken place.\n             * @event dragStart\n             * @param {Core.mixin.Draggable} source The draggable instance that fired the event.\n             * @param {Core.util.drag.DragContext} drag The drag context.\n             * @param {Event} event The browser event.\n             */\n            dragEventer?.trigger('dragStart', { drag, event : drag.event });\n        }\n        return result;\n    }\n    trackDrag(drag) {\n        const { dropTargetSelector } = this;\n        drag.valid = !(dropTargetSelector && !drag.targetElement?.closest(dropTargetSelector));\n        this.moveDrag(drag);\n    }\n    //endregion\n    //region Configs\n    configureListeners(drag) {\n        const\n            me = this,\n            listeners = ObjectHelper.assign({\n                thisObj : me\n            }, me.dragDocumentListeners);\n        // Only listen for the events related to how the drag was initiated:\n        if ('touches' in drag.startEvent) {\n            delete listeners.mousemove;\n            delete listeners.mouseup;\n        }\n        else {\n            delete listeners.contextmenu;\n            delete listeners.touchmove;\n            delete listeners.touchend;\n            delete listeners.pointerup;\n        }\n        return listeners;\n    }\n    //endregion\n    //region Configs\n    updateDragging(drag, old) {\n        const me = this;\n        if (drag) {\n            const listeners = me.configureListeners(drag);\n            drag.cleaners.push(EventHelper.on(listeners));\n            me.beginDrag(drag);\n        }\n        else if (old) {\n            old.destroy();\n        }\n    }\n    changeDragProxy(config, existing) {\n        return DragProxy.reconfigure(existing, config, {\n            owner : this,\n            defaults : {\n                owner : this\n            }\n        });\n    }\n    updateDragRootElement(rootEl, was) {\n        const\n            me = this,\n            {\n                draggableCls,\n                dragItemSelector,\n                onDragItemMouseMove\n            }  = me;\n        was?.classList.remove(draggableCls);\n        me._dragRootDetacher?.();\n        if (rootEl) {\n            const listeners = {\n                thisObj    : me,\n                element    : rootEl,\n                mousedown  : 'onDragMouseDown',\n                // We have touchstart listener in place since Siesta/Chrome can send these events even on non-touch\n                // devices:\n                touchstart : 'onDragTouchStart',\n                // On iOS, because we use pointerup to represent the drop gesture,\n                // the initiating pointerdown event is captured, and its target is\n                // the original start target. We must always release pointer capture.\n                // https://github.com/bryntum/support/issues/4111\n                pointerdown : e => e.pointerId && e.target.releasePointerCapture?.(e.pointerId)\n            };\n            if (onDragItemMouseMove) {\n                listeners.mousemove = {\n                    delegate : dragItemSelector,\n                    handler  : 'onDragItemMouseMove'\n                };\n            }\n            if (me.dragItemOverCls || onDragItemMouseMove || me.onDragItemMouseEnter || me.onDragItemMouseLeave) {\n                Object.assign(listeners, {\n                    mouseover : {\n                        delegate : dragItemSelector,\n                        handler  : 'onDragItemMouseOver'\n                    },\n                    mouseout : {\n                        delegate : dragItemSelector,\n                        handler  : 'onDragItemMouseOut'\n                    }\n                });\n            }\n            rootEl.classList.add(draggableCls);\n            me._dragRootDetacher = EventHelper.on(listeners);\n        }\n    }\n    //endregion\n    //region Events\n    onDragItemMouseOver(event) {\n        this.overItem = event;\n    }\n    onDragItemMouseOut(event) {\n        if (!this.dragging) {\n            this.overItem = event;\n        }\n    }\n    changeOverItem(event) {\n        this.enterLeaveEvent = event;\n        if (event.type === 'mouseout') {\n            // Must return null, not undefined to unset the overItem property\n            return event.relatedTarget?.closest(this.dragItemSelector) || null;\n        }\n        else {\n            return event.target.closest(this.dragItemSelector);\n        }\n    }\n    updateOverItem(overItem, oldOverItem) {\n        const\n            me                  = this,\n            { dragItemOverCls } = me;\n        if (oldOverItem) {\n            dragItemOverCls && oldOverItem.classList.remove(dragItemOverCls);\n            me.onDragItemMouseLeave?.(me.enterLeaveEvent, oldOverItem);\n        }\n        if (overItem) {\n            dragItemOverCls && overItem.classList.add(dragItemOverCls);\n            me.onDragItemMouseEnter?.(me.enterLeaveEvent, overItem);\n        }\n    }\n    onDragContextMenu(event) {\n        event.preventDefault();\n    }\n    onDragKeyDown(event) {\n        this.dragging.keyDown(event);\n    }\n    onDragKeyUp(event) {\n        this.dragging.keyUp(event);\n    }\n    /**\n     * Grab draggable element on mouse down.\n     * @param {Event} event\n     * @private\n     */\n    onDragMouseDown(event) {\n        // only dragging with left mouse button\n        if (event.button === 0) {\n            this.onDragPointerDown(event);\n        }\n    }\n    /**\n     * Grab draggable element on pointerdown.\n     * @param {Event} event\n     * @private\n     */\n    onDragPointerDown(event) {\n        let { dragging : drag } = this;\n        // If a drag is ongoing already, finalize it and don't proceed with new drag (happens if user does pointerup\n        // outside browser window). Also handles the edge case of trying to start a new drag while previous is awaiting\n        // finalization, in which case it just bails out.\n        if (!drag) {\n            drag = this.setupDragContext(event);\n            // The DragContext consults our beforeDrag handler, and if that succeeds, the Context injects itself into\n            // this instance as our draggable (\"this.dragging\").\n            // NOTE: This is not yet an actual drag. At this stage, the context is used to detect movement prior to\n            // mouseup (aka \"a drag\"). Should the requisite amount of movement occur, the drag will be started.\n            if (drag) {\n                drag = new DragContext(drag);\n                if (drag.begin() === false) {\n                    drag.destroy();\n                }\n            }\n        }\n        else if (!drag.isFinalizing) {\n            drag.abort();\n        }\n    }\n    // Set by the DragContext in its begin method, and auto-nullified at destruction.\n    changeDragging(value, was) {\n        was?.destroy();\n        return value;\n    }\n    onDragPointerMove(event) {\n        const { dragging : drag } = this;\n        if (drag && !drag.completed) {\n            drag?.move(event);\n        }\n    }\n    onDragPointerUp(event) {\n        const { dragging : drag } = this;\n        if (drag && !drag.completed) {\n            drag.end(event);\n            this.endDrag(drag);\n        }\n    }\n    /**\n     * @param {Event} event\n     * @private\n     */\n    onDragTouchStart(event) {\n        // only allowing one finger for now...\n        if (event.touches.length === 1) {\n            this.onDragPointerDown(event);\n        }\n    }\n    //endregion\n};\n", "import Base from '../Base.js';\nimport DomDataStore from '../data/DomDataStore.js';\n/**\n * @module Core/mixin/Droppable\n */\n/**\n * Mix this into another class to enable drop support and receive drops from {@link Core.mixin.Draggable draggables}.\n *\n * There are 4 basic methods that a droppable implements. These methods are called as drag operations occur:\n *\n * ```javascript\n *  class MyDroppable extends Base.mixin(Droppable) {\n *      dragEnter(drag) {\n *          // a drag has entered the drop zone... create some type of drop indicator perhaps\n *      }\n *\n *      dragMove(drag) {\n *          // a drag has changed position... update drop indicators\n *      }\n *\n *      dragDrop(drag) {\n *          // drop has occurred... process data from the drag context\n *      }\n *\n *      dragLeave(drag) {\n *          // the drag has left the drop zone... cleanup indicators\n *      }\n *  }\n * ```\n *\n * Instances of `Droppable` are associated with an element to receive drag operations:\n *\n * ```javascript\n *  let target = new MyDroppable({\n *      dropRootElement : someElement\n *  });\n * ```\n *\n * @mixin\n * @internal\n */\nexport default Target => class Droppable extends (Target || Base) {\n    static get $name() {\n        return 'Droppable';\n    }\n    //region Configs\n    static get configurable() {\n        return {\n            /**\n             * A selector, which, if specified, narrows the dropability to child elements of the\n             * {@link #config-dropRootElement} which match this selector.\n             * @config {String}\n             */\n            droppableSelector : null,\n            /**\n             * The current `DragContext`. This is set when a drag enters this target. Changing this config causes the\n             * {@link #function-dragEnter} and {@link #function-dragLeave} methods to be called. If `dragEnter` returns\n             * `false` for a drag, this value will be set to `null`.\n             * @member {Core.util.drag.DragContext}\n             * @readonly\n             */\n            dropping : null,\n            /**\n             * Set this config to the element where drops should be received. When set, the `b-droppable` CSS class is\n             * added to the element and the `Droppable` instance is associated with that element so that it can be\n             * found by {@link Core.mixin.Draggable draggables}.\n             * @config {HTMLElement}\n             */\n            dropRootElement : {\n                $config : 'nullify',\n                value : null\n            }\n        };\n    }\n    /**\n     * Return the `Events` instance from which drop events are fired.\n     * @internal\n     * @property {Core.mixin.Events}\n     */\n    get dropEventer() {\n        return this.trigger ? this : null;  // simple Events feature detector\n    }\n    /**\n     * Returns the CSS class that is added to the {@link #config-dropRootElement}, i.e., `'b-droppable'`.\n     * @property {String}\n     * @readonly\n     */\n    get droppableCls() {\n        return 'b-droppable';\n    }\n    //endregion\n    //region Drop Management\n    /**\n     * This method is called when a drag enters this droppable's `dropRootElement`. In many cases, this method is used\n     * to create some sort of drop indicator to provide user feedback.\n     *\n     * If this method does not return `false`, the {@link #property-dropping} config will retain the given `drag` context\n     * which was set prior to this method being called.\n     *\n     * If this method returns `false`, the drop will not be accepted. Neither {@link #function-dragDrop} nor\n     * {@link #function-dragLeave} will be called for this drop. If the drag leaves this target and re-enters, this\n     * method will be called again. While `dropping` will already be updated before this method is called, it will be\n     * reset to `null` in this case.\n     *\n     * The base class implementation of this method fires the {@link #event-dragEnter} event.\n     * @param {Core.util.drag.DragContext} drag\n     * @returns {Boolean}\n     */\n    dragEnter(drag) {\n        /**\n         * This event is fired when a drag enters this droppable's `dropRootElement`. It is fired by the droppable's\n         * {@link #function-dragEnter} method.\n         * @event dragEnter\n         * @param {Core.mixin.Draggable} source The draggable instance that fired the event.\n         * @param {Core.util.drag.DragContext} drag The drag context.\n         * @param {Event} event The browser event.\n         */\n        return this.dropEventer?.trigger('dragEnter', { drag, event : drag.event });\n    }\n    /**\n     * This method is called when the drag that was previously announced via {@link #function-dragEnter} moves to a new\n     * position. This is typically where drop indicators are updated to reflect the new position.\n     *\n     * The base class implementation of this method fires the {@link #event-dragMove} event.\n     * @param {Core.util.drag.DragContext} drag\n     */\n    dragMove(drag) {\n        /**\n         * This event is fired when the drag that was previously announced via {@link #event-dragEnter} moves to a new\n         * position. It is fired by the droppable's {@link #function-dragMove} method.\n         * @event dragMove\n         * @param {Core.mixin.Draggable} source The draggable instance that fired the event.\n         * @param {Core.util.drag.DragContext} drag The drag context.\n         * @param {Event} event The browser event.\n         */\n        return this.dropEventer?.trigger('dragMove', { drag, event : drag.event });\n    }\n    /**\n     * This method is called when the drag that was previously announced via {@link #function-dragEnter} has ended with\n     * a drop. In addition to any cleanup (since {@link #function-dragLeave} will not be called), this method handles\n     * any updates associated with the data from the drag context and the position of the drop.\n     *\n     * The base class implementation of this method fires the {@link #event-drop} event.\n     * @param {Core.util.drag.DragContext} drag\n     */\n    dragDrop(drag) {\n        /**\n         * This event is fired when the drag that was previously announced via {@link #event-dragEnter} has ended with\n         * a drop. It is fired by the droppable's {@link #function-dragDrop} method.\n         *\n         * This event is **not** fired when a drag gesture is aborted by the user pressing the `ESC` key or if the\n         * {@link Core.util.drag.DragContext#function-abort} method is called.\n         * @event drop\n         * @param {Core.mixin.Draggable} source The draggable instance that fired the event.\n         * @param {Core.util.drag.DragContext} drag The drag context.\n         * @param {Event} event The browser event.\n         */\n        return this.dropEventer?.trigger('drop', { drag, event : drag.event });\n    }\n    /**\n     * This method is called when the drag that was previously announced via {@link #function-dragEnter} leaves this\n     * droppable's `dropRootElement`, or the drag is {@link Core.util.drag.DragContext#property-aborted} by the user\n     * pressing the `ESC` key, or the {@link Core.util.drag.DragContext#function-abort} method is called.\n     *\n     * This is the time to cleanup anything created by `dragEnter`.\n     *\n     * The base class implementation of this method fires the {@link #event-dragLeave} event.\n     * @param {Core.util.drag.DragContext} drag\n     */\n    dragLeave(drag) {\n        /**\n         * This event is fired when the drag that was previously announced via {@link #event-dragEnter} leaves this\n         * droppable's `dropRootElement`. It is fired by the droppable's {@link #function-dragLeave} method.\n         * @event dragLeave\n         * @param {Core.mixin.Draggable} source The draggable instance that fired the event.\n         * @param {Core.util.drag.DragContext} drag The drag context.\n         * @param {Event} event The browser event.\n         */\n        return this.dropEventer?.trigger('dragLeave', { drag, event : drag.event });\n    }\n    //endregion\n    //region Configs\n    changeDropping(dropping, was) {\n        if (dropping !== was) {\n            const me = this;\n            if (was) {\n                if (was.aborted || !was.completed) {\n                    me.dragLeave(was);\n                }\n            }\n            if (dropping) {\n                me._dropping = dropping;  // update config value early in case dragEnter et al refer to it\n                if (me.dragEnter(dropping) === false) {\n                    dropping = null;\n                }\n                me._dropping = was;  // restore the value so that updateDropping is called as it should be\n            }\n        }\n        return dropping;\n    }\n    updateDropRootElement(rootEl, was) {\n        const\n            me = this,\n            { droppableCls } = me;\n        let droppables, i, removeCls;\n        if (was) {\n            droppables = DomDataStore.get(was, 'droppables');\n            removeCls = true;\n            if (Array.isArray(droppables) && (i = droppables.indexOf(me)) > -1) {\n                if (droppables.length < 2) {\n                    DomDataStore.remove(was, 'droppables');\n                }\n                else {\n                    droppables.splice(i, 1);\n                    droppables.forEach(d => {\n                        if (droppableCls === d.droppableCls) {\n                            removeCls = false;  // our droppableCls may need to stay\n                        }\n                    });\n                }\n            }\n            removeCls && was.classList.remove(droppableCls);\n        }\n        if (rootEl) {\n            droppables = DomDataStore.get(rootEl, 'droppables');\n            if (droppables) {\n                droppables.push(me);\n            }\n            else {\n                DomDataStore.set(rootEl, 'droppables', [me]);\n            }\n            rootEl.classList.add(droppableCls);\n        }\n    }\n    //endregion\n};\n", "import Combo from './Combo.js';\nimport './ColorPicker.js';\n/**\n * @module Core/widget/ColorField\n */\n/**\n * Field that displays a CSS color and lets the user select from a pre-defined\n * {@link #config-colors range of CSS colors}.\n *\n * {@inlineexample Core/widget/ColorField.js}\n *\n * This field can be used as an {@link Grid.column.Column#config-editor} for the {@link Grid.column.Column}.\n *\n * This widget may be operated using the keyboard. `ArrowDown` opens the color picker, which itself is keyboard\n * navigable.\n *\n * ```javascript\n * let colorField = new ColorField({\n *   field: 'color'\n * });\n * ```\n *\n * @extends Core/widget/PickerField\n * @classtype colorfield\n * @inputfield\n */\nexport default class ColorField extends Combo {\n    static $name = 'ColorField';\n    static type = 'colorfield';\n    static configurable = {\n        /*\n         * @hideconfigs text,color,editable,picker\n         */\n        displayField : 'text',\n        valueField   : 'color',\n        editable     : false,\n        picker       : {\n            type  : 'colorpicker',\n            align : {\n                align     : 't100-b100',\n                matchSize : false\n            }\n        },\n        showBoxForNoColor : true,\n        /**\n         * Array of CSS color strings to be able to chose from. This will override the\n         * {@link Core.widget.ColorPicker#config-colors pickers default colors}.\n         *\n         * Provide an array of string CSS colors:\n         * ```javascript\n         * new ColorField({\n         *     colors : ['#00FFFF', '#F0FFFF', '#89CFF0', '#0000FF', '#7393B3']\n         * });\n         * ```\n         *\n         * @prp {String[]}\n         */\n        colors : null,\n        /**\n         * Adds an option in the picker to set no background color\n         * @prp {Boolean}\n         */\n        addNoColorItem : true\n    };\n    configure(config) {\n        const pickerCfg = config.picker ?? {};\n        if (config.colors) {\n            pickerCfg.colors = config.colors;\n        }\n        if ('addNoColorItem' in config) {\n            pickerCfg.addNoColorItem = config.addNoColorItem;\n        }\n        config.picker = pickerCfg;\n        super.configure(config);\n    }\n    updatePicker(picker) {\n        if (picker) {\n            this.items = picker.store.records;\n        }\n    }\n    updateColors(colors) {\n        if (!this.isConfiguring) {\n            this.picker.colors = colors;\n        }\n    }\n    updateAddNoColorItem(addNoColorItem) {\n        if (!this.isConfiguring) {\n            this.picker.addNoColorItem = addNoColorItem;\n        }\n    }\n    set value(value) {\n        if (!this.store) {\n            this.items = [];\n            this.store = this.picker.store;\n        }\n        if (!value) {\n            value = this.store.findRecord('color', null);\n        }\n        super.value = value;\n    }\n    showPicker() {\n        // Not happy about this. Previously selected value doesn't trigger refresh\n        this.picker.refresh();\n        super.showPicker(...arguments);\n    }\n    get value() {\n        return super.value;\n    }\n    syncInputFieldValue(...args) {\n        const\n            me        = this,\n            { value } = me;\n        let className = me.picker?.getColorClassName(value);\n        if (!className) {\n            me.colorBox.style.color = value;\n        }\n        className = 'b-colorbox ' + className;\n        me.colorBox.className = className;\n        if (!me.showBoxForNoColor) {\n            me.element.classList.toggle('b-colorless', !value);\n        }\n        super.syncInputFieldValue(...args);\n    }\n    get innerElements() {\n        return [\n            {\n                reference : 'colorBox',\n                className : 'b-colorbox'\n            },\n            ...super.innerElements\n        ];\n    }\n}\n// Register this widget type with its Factory\nColorField.initClass();\nColorField._$name = 'ColorField';", "import DomClassList from '../helper/util/DomClassList.js';\nimport Checkbox from './Checkbox.js';\n/**\n * @module Core/widget/SlideToggle\n */\n/**\n * SlideToggle field is a variation of {@link Core.widget.Checkbox} with a sliding toggle instead of box with check mark.\n * It wraps <code>&lt;input type=\"checkbox\"&gt;</code>.\n * Color can be specified and you can optionally configure {@link #config-text} to display in a label to the right of\n * the toggle in addition to a standard field {@link #config-label}.\n *\n * {@inlineexample Core/widget/SlideToggle.js vertical}\n *\n * This field can be used as an {@link Grid.column.Column#config-editor} for the {@link Grid.column.Column}.\n *\n * @extends Core/widget/Checkbox\n * @classtype slidetoggle\n * @inputfield\n */\nexport default class SlideToggle extends Checkbox {\n    static $name = 'SlideToggle';\n    static type = 'slidetoggle';\n    static get properties() {\n        return {\n            toggledCls : 'b-slidetoggle-checked'\n        };\n    }\n    construct(config) {\n        if (config.checked) {\n            config.cls = DomClassList.from(config.cls) || {};\n            config.cls[this.constructor.properties.toggledCls] = 1;\n        }\n        super.construct(config);\n    }\n    get innerElements() {\n        const innerEls = super.innerElements;\n        innerEls.splice(1, 0, this.toggleElement);\n        if (this.text) {\n            innerEls[innerEls.length - 1].class = 'b-slidetoggle-label';\n        }\n        else {\n            // Remove label, not used\n            innerEls.pop();\n        }\n        return innerEls;\n    }\n    get toggleElement() {\n        return {\n            class     : 'b-slidetoggle-toggle',\n            reference : 'slideToggle',\n            children  : [\n                {\n                    class     : 'b-slidetoggle-thumb',\n                    reference : 'slideThumb'\n                }\n            ]\n        };\n    }\n    internalOnChange() {\n        super.internalOnChange();\n        this.element.classList[this.value ? 'add' : 'remove'](this.toggledCls);\n    }\n}\nSlideToggle.initClass();\nSlideToggle._$name = 'SlideToggle';", "import Base from '../../Base.js';\nimport DomHelper from '../../helper/DomHelper.js';\nimport EventHelper from '../../helper/EventHelper.js';\nimport Tooltip from '../../widget/Tooltip.js';\nimport StringHelper from '../../helper/StringHelper.js';\n/**\n * @module Core/widget/util/AvatarRendering\n */\n/**\n * An object that describes properties of an avatar.\n *\n * @typedef {Object} AvatarConfig\n * @property {String} initials Resource initials\n * @property {String} color Background color for initials\n * @property {String} iconCls Icon cls\n * @property {String} imageUrl Image url\n * @property {String} defaultImageUrl Default image url, fallback if image fails to load or there is none\n * specified. Leave out to show initials instead.\n * @property {Object} [dataset] Dataset to apply to the resulting element\n * @property {String} [alt] Image description\n */\n/**\n * A utility class providing rendering of avatars / resource initials.\n *\n * {@inlineexample Core/widget/AvatarRendering.js}\n *\n * @extends Core/Base\n */\nexport default class AvatarRendering extends Base {\n    static $name = 'AvatarRendering';\n    static get configurable() {\n        return {\n            /**\n             * Element used to listen for load errors. Normally the owning widgets own element.\n             * @config {HTMLElement}\n             */\n            element : null,\n            /**\n             * Prefix prepended to a supplied color to create a CSS class applied when showing initials.\n             * @config {String}\n             * @default\n             */\n            colorPrefix : 'b-sch-',\n            /**\n             * A tooltip config object to enable using a custom tooltip for the avatars. Listen for `beforeShow` and set\n             * your html there.\n             * @config {TooltipConfig}\n             */\n            tooltip : null,\n            size : null\n        };\n    }\n    doDestroy() {\n        this.tooltip?.destroy();\n        super.doDestroy();\n    }\n    updateElement(element) {\n        // Error listener\n        EventHelper.on({\n            element,\n            delegate : '.b-resource-image',\n            error    : 'onImageErrorEvent',\n            thisObj  : this,\n            capture  : true\n        });\n    }\n    changeTooltip(config) {\n        return Tooltip.new({\n            forElement  : this.element,\n            forSelector : '.b-resource-avatar',\n            cls         : 'b-resource-avatar-tooltip'\n        }, config);\n    }\n    static get failedUrls() {\n        if (!this._failedUrls) {\n            this._failedUrls = new Set();\n        }\n        return this._failedUrls;\n    }\n    /**\n     * Returns a DOM config object containing a resource avatar, icon or resource initials. Display priority in that\n     * order.\n     * @param {AvatarConfig|AvatarConfig[]} options A single avatar config object or an array of the same.\n     * @returns {DomConfig}\n     */\n    getResourceAvatar(options) {\n        if (Array.isArray(options)) {\n            return options.map(item => this.getResourceAvatar(item));\n        }\n        const\n            { initials, color, iconCls, imageUrl, defaultImageUrl, dataset = {}, resourceRecord, alt = StringHelper.encodeHtml(resourceRecord?.name) } = options,\n            config = this.getImageConfig(initials, color, imageUrl, defaultImageUrl, dataset, alt) ||\n                this.getIconConfig(iconCls, dataset) ||\n                this.getResourceInitialsConfig(initials, color, dataset),\n            { size } = this;\n        Object.assign(config.style, {\n            ...(size ? { height : size, width : size } : undefined)\n        });\n        return config;\n    }\n    getImageConfig(initials, color, imageUrl, defaultImageUrl, dataset, alt) {\n        // Fall back to defaultImageUrl if imageUrl is known to fail\n        imageUrl = AvatarRendering.failedUrls.has(imageUrl) ? defaultImageUrl : (imageUrl  || defaultImageUrl);\n        if (imageUrl) {\n            return {\n                tag       : 'img',\n                draggable : 'false',\n                loading   : 'lazy',\n                class     : {\n                    'b-resource-avatar' : 1,\n                    'b-resource-image'  : 1\n                },\n                style       : {},\n                alt,\n                elementData : {\n                    defaultImageUrl,\n                    imageUrl,\n                    initials,\n                    color,\n                    dataset\n                },\n                src : imageUrl,\n                dataset\n            };\n        }\n    }\n    getIconConfig(iconCls, dataset) {\n        if (iconCls) {\n            return iconCls && {\n                tag   : 'i',\n                style : {},\n                class : {\n                    'b-resource-avatar' : 1,\n                    'b-resource-icon'   : 1,\n                    [iconCls]           : 1\n                },\n                dataset\n            };\n        }\n    }\n    getResourceInitialsConfig(initials, color, dataset) {\n        const\n            // eventColor = #FF5555, apply as background-color\n            namedColor = DomHelper.isNamedColor(color) && color,\n            // eventColor = red, add b-sch-red cls\n            hexColor   = !namedColor && color,\n            { size }   = this;\n        return {\n            tag   : 'div',\n            class : {\n                'b-resource-avatar'                  : 1,\n                'b-resource-initials'                : 1,\n                [`${this.colorPrefix}${namedColor}`] : namedColor\n            },\n            style : {\n                backgroundColor : hexColor || null,\n                ...(size ? { height : size, width : size } : undefined)\n            },\n            children : [initials],\n            dataset\n        };\n    }\n    onImageErrorEvent({ target }) {\n        if (!target.matches('.b-resource-avatar')) {\n            return;\n        }\n        const { defaultImageUrl, initials, color, imageUrl, dataset } = target.elementData;\n        if (defaultImageUrl && !target.src.endsWith(defaultImageUrl.replace(/^[./]*/gm, ''))) {\n            target.src = defaultImageUrl;\n        }\n        else {\n            const initialsEl = DomHelper.createElement(this.getResourceInitialsConfig(initials, color, dataset));\n            initialsEl.elementData = target.elementData;\n            target.parentElement.replaceChild(initialsEl, target);\n        }\n        // Remember failed urls, to avoid trying to load them again next time\n        AvatarRendering.failedUrls.add(imageUrl);\n    }\n}\nAvatarRendering._$name = 'AvatarRendering';"],
  "mappings": "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",
  "names": ["throwAbstractMethodCall", "throwInvalidMethodCall", "StateBase", "Base", "stm", "ACTION_QUEUE_PROP", "Transaction", "args", "action", "queue", "i", "len", "ActionBase", "MODEL_PROP", "NEW_DATA_PROP", "OLD_DATA_PROP", "UpdateAction", "value", "model", "oldData", "newData", "PARENT_MODEL_PROP", "CHILD_MODELS_PROP", "INSERT_INDEX_PROP", "CONTEXT_PROP", "InsertChildAction", "models", "index", "ctx", "parentModel", "context", "childModels", "byFromParent", "newlyAdded", "childModel", "undoTaskData", "moveRight", "moveLeft", "a", "b", "moveFromAnotherParent", "task", "_a", "_b", "insertIndex", "insertBefore", "RemoveChildAction", "lhs", "rhs", "lhsIndex", "rhsIndex", "m", "STORE_PROP", "MODEL_LIST_PROP", "AddAction", "store", "list", "InsertAction", "modelList", "silent", "me", "RemoveAction", "ALL_RECORDS_PROP", "RemoveAllAction", "records", "allRecords", "STATE_PROP", "STORES_PROP", "QUEUE_PROP", "POS_PROP", "TRANSACTION_PROP", "TRANSACTION_TIMER_PROP", "AUTO_RECORD_PROP", "IS_APPLYING_STASH", "PROPS", "registry", "registerStmState", "name", "state", "resolveStmState", "Registry_default", "resetQueue", "options", "undo", "redo", "newProps", "DisabledStateClass", "DisabledState", "DisabledState_default", "ReadyStateClass", "steps", "curPos", "newPos", "next", "undoneTransactions", "transaction", "redoneTransactions", "title", "ReadyState", "ReadyState_default", "RecordingStateClass", "position", "isInitialUserAction", "previousParent", "previousIndex", "RecordingState", "RecordingState_default", "RestoringStateClass", "RestoringState", "RestoringState_default", "AutoReadyStateClass", "AutoReadyState", "AutoReadyState_default", "AutoRecordingStateClass", "Delayable_default", "timer", "AutoRecordingState", "rest", "AutoRecordingState_default", "makeModelUpdateAction", "makeModelInsertChildAction", "makeModelRemoveChildAction", "makeStoreModelAddAction", "makeStoreModelInsertAction", "makeStoreModelRemoveAction", "makeStoreRemoveAllAction", "stateTransition", "event", "oldState", "newState", "StateTrackingManager", "Events_default", "s", "fn", "val", "t", "reason", "cause", "transactions", "id", "IdHelper", "Finalizable_default", "Target", "ret", "ABORTED", "INIT", "DRAGGING", "DROPPED", "lockDirections", "DragContext", "Identifiable_default", "EventHelper", "source", "target", "v", "was", "targetElement", "droppable", "droppables", "droppableSelector", "DomDataStore", "DomHelper", "element", "cleaner", "lastEvent", "dragSwallowClickTime", "down", "lastMoveEvent", "changed", "key", "distance", "significant", "scrollManager", "monitoringConfig", "activeCls", "dragLock", "BrowserHelper", "node", "style", "overflow", "overflowX", "overflowY", "detacher", "Objects", "scrollerAction", "rootEl", "touch", "__publicField", "DragProxy", "_DragProxy", "Factoryable_default", "drag", "Draggable_default", "dragRootElement", "dragSelector", "ignoreSelector", "oldTarget", "draggingClsSelector", "draggingCls", "draggingClassElement", "dragEventer", "dragProxy", "dragItemSelector", "draggingStartedCls", "draggingItemCls", "itemElement", "result", "dropTargetSelector", "listeners", "ObjectHelper", "old", "config", "existing", "draggableCls", "onDragItemMouseMove", "e", "overItem", "oldOverItem", "dragItemOverCls", "Droppable_default", "dropping", "droppableCls", "removeCls", "d", "ColorField", "Combo", "pickerCfg", "picker", "colors", "addNoColorItem", "className", "SlideToggle", "Checkbox", "DomClassList", "innerEls", "_AvatarRendering", "Tooltip", "item", "initials", "color", "iconCls", "imageUrl", "defaultImageUrl", "dataset", "resourceRecord", "alt", "StringHelper", "size", "namedColor", "hexColor", "initialsEl", "AvatarRendering"]
}
