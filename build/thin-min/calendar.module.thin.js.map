{
  "version": 3,
  "sources": ["../../../Calendar/lib/Calendar/column/AgendaColumn.js", "../../../Calendar/lib/Calendar/column/EventColumn.js", "../../../Calendar/lib/Calendar/model/TimeRangeModel.js", "../../../Calendar/lib/Calendar/data/TimeRangeStore.js", "../../../Calendar/lib/Calendar/model/ProjectModel.js", "../../../Calendar/lib/Calendar/data/CrudManager.js", "../../../Calendar/lib/Calendar/feature/CalendarFeature.js", "../../../Calendar/lib/Calendar/feature/CalendarZone.js", "../../../Calendar/lib/Calendar/widget/ResourceChipView.js", "../../../Calendar/lib/Calendar/widget/EventTip.js", "../../../Calendar/lib/Calendar/feature/CalendarDrag.js", "../../../Calendar/lib/Calendar/widget/EventEditor.js", "../../../Calendar/lib/Calendar/feature/EventEdit.js", "../../../Calendar/lib/Calendar/feature/EventMenu.js", "../../../Calendar/lib/Calendar/feature/EventTooltip.js", "../../../Calendar/lib/Calendar/feature/ExternalEventSource.js", "../../../Calendar/lib/Calendar/feature/LoadOnDemand.js", "../../../Calendar/lib/Calendar/feature/print/printer/Printer.js", "../../../Calendar/lib/Calendar/feature/print/printer/CalendarPrinter.js", "../../../Calendar/lib/Calendar/feature/print/Print.js", "../../../Calendar/lib/Calendar/feature/ScheduleMenu.js", "../../../Calendar/lib/Calendar/layout/LayoutDim.js", "../../../Calendar/lib/Calendar/feature/TimeRanges.js", "../../../Calendar/lib/Calendar/feature/WeekExpander.js", "../../../Calendar/lib/Calendar/layout/day/DayLayout.js", "../../../Calendar/lib/Calendar/layout/day/FluidDayLayout.js", "../../../Calendar/lib/Calendar/mixin/CalendarStores.js", "../../../Calendar/lib/Calendar/util/EventSlots.js", "../../../Calendar/lib/Calendar/util/EventSorter.js", "../../../Calendar/lib/Calendar/mixin/SchedulerInterface.js", "../../../Calendar/lib/Calendar/widget/mixin/EventRenderer.js", "../../../Calendar/lib/Calendar/localization/En.js", "../../../Calendar/lib/Calendar/widget/mixin/CalendarMixin.js", "../../../Calendar/lib/Calendar/widget/mixin/DayCellCollecter.js", "../../../Calendar/lib/Calendar/widget/OverflowPopup.js", "../../../Calendar/lib/Calendar/widget/mixin/DayCellRenderer.js", "../../../Calendar/lib/Calendar/widget/mixin/DateRangeOwner.js", "../../../Calendar/lib/Calendar/widget/CalendarRow.js", "../../../Calendar/lib/Calendar/widget/DaySelector.js", "../../../Calendar/lib/Calendar/widget/mixin/DaySelectable.js", "../../../Calendar/lib/Calendar/widget/EventList.js", "../../../Calendar/lib/Calendar/widget/AgendaView.js", "../../../Calendar/lib/Calendar/widget/CalendarDatePicker.js", "../../../Calendar/lib/Calendar/widget/DayView.js", "../../../Calendar/lib/Calendar/widget/DayResourceCalendarRow.js", "../../../Calendar/lib/Calendar/widget/DayResourceView.js", "../../../Calendar/lib/Calendar/widget/ModeSelector.js", "../../../Calendar/lib/Calendar/widget/MonthView.js", "../../../Calendar/lib/Calendar/widget/ResourceView.js", "../../../Calendar/lib/Calendar/widget/Sidebar.js", "../../../Calendar/lib/Calendar/widget/WeekView.js", "../../../Calendar/lib/Calendar/widget/YearView.js", "../../../Calendar/lib/Calendar/view/mixin/EventNavigation.js", "../../../Calendar/lib/Calendar/view/mixin/EventSelection.js", "../../../Calendar/lib/Calendar/view/Calendar.js", "../../../Calendar/bundle/entry.thin.js"],
  "sourcesContent": ["import Column from '../../Grid/column/Column.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\nimport DomSync from '../../Core/helper/DomSync.js';\nimport DH from '../../Core/helper/DateHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\n/**\n * @module Calendar/column/AgendaColumn\n */\n/**\n * A column that displays events for a day.\n *\n * This is not intended to be used directly, it is used by the {@link Calendar.widget.AgendaView} which\n * is a specialized {@link Grid.view.Grid} subclass.\n *\n * @extends Grid/column/Column\n *\n * @classtype agendacolumn\n * @column\n */\nexport default class AgendaColumn extends Column {\n    //region Config\n    static $name = 'AgendaColumn';\n    static get type() {\n        return 'agendacolumn';\n    }\n    static get defaults() {\n        return {\n            id         : 'agenda', \n            text       : 'Agenda',\n            filterable : false,\n            sortable   : false,\n            editor     : false,\n            searchable : false,\n            // With its defaultRenderer, and no eventRenderer, AgendaColumn measures\n            // once then is able to calculate row heights from the cell's event count.\n            // This field is automatically set to true if a column renderer or eventRenderer\n            // is found.\n            autoHeight      : false,\n            alwaysClearCell : false\n        };\n    }\n    //endregion\n    construct() {\n        super.construct(...arguments);\n        this.grid.ion({\n            beforeResponsiveStateChange : 'onBeforeGridResponsiveStateChange',\n            thisObj                     : this\n        });\n    }\n    //region Render\n    /**\n     * Renderer that shows a list of events for a single date.\n     *\n     * Note that all {@link Calendar.widget.AgendaView} columns are automatically set to\n     * {@link Grid.column.Column#config-autoHeight} because an unpredictable number of events may appear in\n     * any cell.\n     *\n     * @param {Object} renderData Object containing renderer parameters\n     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc. Can be `null` in case of export\n     * @param {*} renderData.value Value to be displayed in the cell\n     * @param {DayCell} renderData.record A {@link Calendar.widget.mixin.DayCellCollecter#typedef-DayCell} context object\n     *   which contains contextual information about the date being rendered and an `events` property encapsulating\n     *   all the events which coincide with the date.\n     * @param {Grid.column.Column} renderData.column This column\n     * @param {Grid.view.Grid} renderData.grid This grid\n     * @param {Grid.row.Row} renderData.row Row object. Can be null in case of export. Use the\n     *   {@link Grid.row.Row#function-assignCls row's API} to manipulate CSS class names.\n     * @param {Boolean} renderData.isExport True if record is being exported to allow special handling during export\n     * @param {Boolean} renderData.isMeasuring True if the column is being measured for a `resizeToFitContent` call.\n     *   In which case an advanced renderer might need to take different actions.\n     * @returns {DomConfig|String|null}\n     */\n    defaultRenderer({ cellElement : targetElement, record, grid, size }) {\n        const\n            me = this,\n            {\n                events,\n                date\n            } = record,\n            children = [];\n        for (let i = 0; i < events.length; i++) {\n            const\n                eventRecord = events[i],\n                eventEndDate = eventRecord.endDate || DH.add(eventRecord.startDate, eventRecord.duration, eventRecord.durationUnit),\n                isOverflow = eventRecord.startDate < date,\n                overflows = eventEndDate > record.tomorrow,\n                eventDomConfig = grid.createEventDomConfig({\n                    date     : record.date,\n                    isAllDay : eventRecord.allDay || overflows || isOverflow,\n                    eventRecord\n                });\n            // Arrow shows that it continues\n            eventDomConfig.className['b-continues-future'] = overflows;\n            eventDomConfig.className['b-continues-past'] = isOverflow;\n            children.push({\n                className : {\n                    'b-cal-agenda-event-row' : 1\n                },\n                dataset : {\n                    rowId : eventRecord.id\n                },\n                children : [\n                    grid.eventListEventTimeRenderer(eventRecord, date),\n                    eventDomConfig\n                ],\n                // Match existing data-rowId elements first and ensure DOM order matches\n                // children order.\n                syncOptions : {\n                    syncIdField      : 'rowId',\n                    releaseThreshold : 0,\n                    strict           : true\n                }\n            });\n        }\n        grid._cellRenderer?.(...arguments);\n        // cellRenderer may update the cellData record, so test after.\n        targetElement.classList[record.isNonWorking ? 'add' : 'remove'](grid.nonWorkingDayCls);\n        DomSync.sync({\n            domConfig : {\n                onlyChildren : true,\n                children     : [\n                    grid.agendaEventDateRenderer(date),\n                    {\n                        className : {\n                            'b-cal-event-bar-container' : 1\n                        },\n                        children\n                    }\n                ],\n                // Match existing data-row-id elements first and ensure DOM order matches\n                // children order.\n                syncOptions : {\n                    syncIdField      : 'date',\n                    releaseThreshold : 0,\n                    strict           : true\n                }\n            },\n            targetElement\n        });\n        targetElement.dataset.date = record.id;\n        if (!me.autoHeight) {\n            const\n                dateBlock = targetElement.querySelector('.b-cal-agenda-date'),\n                cellTbPadding = me._cellTbPadding != null ? me._cellTbPadding : (\n                    me._cellTbPadding = DomHelper.getEdgeSize(targetElement, 'padding', 'tb').height\n                ),\n                containerPadding = me._containerPadding != null ? me._containerPadding : (\n                    me._containerPadding = DomHelper.getEdgeSize(targetElement.querySelector('.b-cal-event-bar-container'), 'margin', 'tb').height\n                ),\n                dateBlockHeight = me._dateBlockHeight != null ? me._dateBlockHeight : (\n                    me._dateBlockHeight = Rectangle.outer(dateBlock).height\n                );\n            size.height = Math.max(record.events.length * (grid.eventHeightInPixels + grid.eventRowSpacing) - grid.eventRowSpacing + cellTbPadding + containerPadding + (grid.responsiveState === 'small' ? dateBlockHeight : 0), 86);\n        }\n    }\n    onBeforeGridResponsiveStateChange() {\n        // Invalidate cached measurements\n        this._cellTbPadding = this._containerPadding = this._dateBlockHeight = this._dateBlockHeight = null;\n    }\n    getCellClass(cellContext) {\n        const result = super.getCellClass(cellContext);\n        result['b-sticky-cell'] = result[`b-day-of-week-${cellContext.record.day}`] = 1;\n        return result;\n    }\n    //endregion\n    //region Other\n    headerRenderer({ headerElement : targetElement }) {\n        targetElement.innerHTML = '';\n        DomSync.sync({\n            domConfig : {\n                className : {\n                    'b-cal-agenda-header' : 1,\n                    'b-grid-header'       : 1,\n                    'b-last-leaf'         : 1\n                },\n                children : [{\n                    className : {\n                        'b-cal-agenda-header-date' : 1\n                    },\n                    text : 'Date'\n                }, {\n                    className : {\n                        'b-cal-agenda-header-time' : 1\n                    },\n                    text : 'Time'\n                }, {\n                    className : {\n                        'b-cal-agenda-header-event' : 1\n                    },\n                    text : 'Event'\n                }]\n            },\n            targetElement\n        });\n    }\n    //endregion\n}\nColumnStore.registerColumnType(AgendaColumn);\nAgendaColumn._$name = 'AgendaColumn';", "import Column from '../../Grid/column/Column.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\nimport DomSync from '../../Core/helper/DomSync.js';\n/**\n * @module Calendar/column/EventColumn\n */\n/**\n * A column that displays a formatted event with details of name, times, and assigned resources in a\n * grid cell.\n *\n * This is not intended to be used directly, it is used by the {@link Calendar.widget.EventList} which\n * is a specialized {@link Grid.view.Grid} subclass.\n *\n * @extends Grid/column/Column\n *\n * @classtype calendarevents\n * @column\n */\nexport default class EventColumn extends Column {\n    //region Config\n    static get type() {\n        return 'calendarevents';\n    }\n    static get defaults() {\n        return {\n            id              : 'calendarevents', \n            text            : 'Event Details',\n            filterable      : false,\n            sortable        : false,\n            editor          : false,\n            searchable      : false,\n            autoHeight      : true,\n            alwaysClearCell : false\n        };\n    }\n    //endregion\n    //region Render\n    /**\n     * Renderer that shows resource avatars of assigned resources next to event names for a single date.\n     *\n     * Note that all {@link Calendar.widget.AgendaView} columns are automatically set to\n     * {@link Grid.column.Column#config-autoHeight} because an unpredictable number of events may appear in\n     * any cell.\n     *\n     * @config {Function} renderer\n     * @param {Object} renderData Object containing renderer parameters\n     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc. Can be `null` in case of export\n     * @param {*} renderData.value Value to be displayed in the cell\n     * @param {DayCell} renderData.record A {@link Calendar.widget.mixin.DayCellCollecter#typedef-DayCell} context object\n     *   which contains contextual information about the date being rendered and an `events` property encapsulating\n     *   all the events which coincide with the date.\n     * @param {Grid.column.Column} renderData.column This column\n     * @param {Grid.view.Grid} renderData.grid This grid\n     * @param {Grid.row.Row} renderData.row Row object. Can be null in case of export. Use the\n     *   {@link Grid.row.Row#function-assignCls row's API} to manipulate CSS class names.\n     * @param {Boolean} renderData.isExport True if record is being exported to allow special handling during export\n     * @param {Boolean} renderData.isMeasuring True if the column is being measured for a `resizeToFitContent` call.\n     *   In which case an advanced renderer might need to take different actions.\n     * @returns {DomConfig|String|null}\n     */\n    renderer({ cellElement : targetElement, record, grid }) {\n        const\n            resourceFilter = grid.calendar?.widgetMap.resourceFilter,\n            resources      = resourceFilter ? record.resources.filter(r => resourceFilter.selected.includes(r)) : record.resources;\n        grid._cellRenderer?.(...arguments);\n        grid.showResourceAvatars = true;\n        DomSync.sync({\n            domConfig : {\n                onlyChildren : true,\n                children     : [\n                    {\n                        class    : 'b-cal-event-resource-avatars',\n                        children : resources.map(resource => {\n                            return {\n                                class    : 'b-cal-event-resource-avatar-row',\n                                children : [\n                                    grid.getResourceAvatar(resource),\n                                    {\n                                        class    : 'b-cal-event-resource-avatar-desc',\n                                        children : [{\n                                            class : 'b-event-column-resource-name',\n                                            text  : resource.name\n                                        }, {\n                                            class : 'b-event-column-resource-role',\n                                            text  : resource.role\n                                        }]\n                                    }\n                                ]\n                            };\n                        })\n                    },\n                    {\n                        class    : 'b-cal-event-column-event-desc',\n                        children : [{\n                            class : 'b-cal-event-column-event-name',\n                            text  : record.name\n                        }]\n                    },\n                    {\n                        class    : 'b-cal-event-column-times',\n                        children : [grid.eventListEventTimeRenderer(record)]\n                    }\n                ],\n                // Match existing data-row-id elements first and ensure DOM order matches\n                // children order.\n                syncOptions : {\n                    syncIdField      : 'date',\n                    releaseThreshold : 0,\n                    strict           : true\n                }\n            },\n            targetElement\n        });\n    }\n    //endregion\n}\nColumnStore.registerColumnType(EventColumn);\nEventColumn.exposeProperties();\nEventColumn._$name = 'EventColumn';", "import SchedulerTimeRangeModel from '../../Scheduler/model/TimeRangeModel.js';\n/**\n * @module Calendar/model/TimeRangeModel\n */\n/**\n * This class represents a named time range with additional, Calendar-specific fields. It is used by the\n * {@link Calendar.feature.TimeRanges} feature.\n *\n * This class inherits most of its fields from {@link Scheduler.model.TimeSpan}. The most important of these fields are\n * the following:\n *\n * - {@link #field-name}\n * - {@link #field-startDate}\n * - {@link #field-endDate}\n * - {@link #field-iconCls}\n *\n * It's an indirect subclass of {@link Core.data.Model}. Please refer to documentation of those classes to become\n * familiar with the base interface of this class.\n *\n * This class defines the following fields:\n *\n * - {@link #field-alignment}\n * - {@link #field-color}\n * - {@link #field-footer}\n * - {@link #field-rotation}\n *\n * The data source of any field can be customized in the subclass. Please refer to {@link Core.data.Model} for details.\n *\n * @extends Scheduler/model/TimeRangeModel\n * @uninherit Core/data/mixin/TreeNode\n * @typings Scheduler.model.TimeRangeModel -> Scheduler.model.SchedulerTimeRangeModel\n */\nexport default class TimeRangeModel extends SchedulerTimeRangeModel {\n    /**\n     * @hidefields children, parentId, parentIndex\n     */\n    //region Fields\n    static fields = [\n        /**\n         * The side of the time range on which the header will be displayed The default value is `'start'`.\n         *\n         * This value determines where to place the time range header relative to events. A value of `'start'` will\n         * place the header on the left side, while `'end'` will place the time range on the right side (these will\n         * be reversed in RTL mode).\n         *\n         * @field {'start'|'end'} alignment\n         * @category Styling\n         * @default 'start'\n         */\n        {\n            name         : 'alignment',\n            defaultValue : 'start',\n            internal     : true\n        },\n        /**\n         * The primary color of the header element.\n         * @field {'red'|'pink'|'purple'|'violet'|'indigo'|'blue'|'cyan'|'teal'|'magenta'|'green'|'lime'|'yellow'|'orange'|'deep-orange'|'gray'|'gantt-green'|'light-gray'} color\n         * @category Styling\n         */\n        {\n            name     : 'color',\n            internal : true\n        },\n        /**\n         * The text for the footer.\n         * @field {String} footer\n         * @category Styling\n         */\n        {\n            name     : 'footer',\n            internal : true\n        },\n        /**\n         * The direction to rotate header/footer text.\n         * @field {'neg'|'pos'} rotation\n         * @category Styling\n         */\n        {\n            name     : 'rotation',\n            internal : true\n        }\n    ];\n    //endregion\n}\nTimeRangeModel._$name = 'TimeRangeModel';", "import SchedulerTimeRangeStore from '../../Scheduler/data/TimeRangeStore.js';\nimport TimeRangeModel from '../model/TimeRangeModel.js';\n/**\n * @module Calendar/data/TimeRangeStore\n */\n/**\n * A store representing a collection of time ranges.\n *\n * @extends Scheduler/data/TimeRangeStore\n * @typings Scheduler.data.TimeRangeStore -> Scheduler.data.SchedulerTimeRangeStore\n */\nexport default class TimeRangeStore extends SchedulerTimeRangeStore {\n    static defaultConfig = {\n        modelClass : TimeRangeModel\n    };\n}\nTimeRangeStore.initClass();\nTimeRangeStore._$name = 'TimeRangeStore';", "import SchedulerProjectModel from '../../Scheduler/model/ProjectModel.js';\nimport TimeRangeModel from '../model/TimeRangeModel.js';\nimport TimeRangeStore from '../data/TimeRangeStore.js';\n/**\n * @module Calendar/model/ProjectModel\n */\n// noinspection JSClosureCompilerSyntax\n/**\n * This class represents a global project of your Calendar - a central place for all data.\n *\n * For more information, see {@link Scheduler.model.ProjectModel}.\n *\n * @extends Scheduler/model/ProjectModel\n *\n * @typings Scheduler.model.ProjectModel -> Scheduler.model.SchedulerProjectModel\n */\nexport default class ProjectModel extends SchedulerProjectModel {\n    static $name = 'ProjectModel';\n    //region Configs\n    static configurable = {\n        timeRangeStore : {\n            modelClass : TimeRangeModel\n        }\n    };\n    static defaultConfig = {\n        /**\n         * The constructor of the time range model class, to be used in the project. Will be set as the\n         * {@link Core.data.Store#config-modelClass modelClass} property of the {@link #property-timeRangeStore}\n         *\n         * @config {Calendar.model.TimeRangeModel}\n         * @typings {typeof TimeRangeModel}\n         * @category Models & Stores\n         */\n        timeRangeModelClass : TimeRangeModel,\n        /**\n         * The constructor to create an timeRange store instance with. Should be a class, subclassing the\n         * {@link Core.data.Store}\n         * @config {Core.data.Store|Object}\n         * @typings {typeof Store|object}\n         * @category Models & Stores\n         */\n        timeRangeStoreClass : TimeRangeStore\n    };\n    //endregion\n}\nProjectModel.applyConfigs = true;\nProjectModel.initClass();\nProjectModel._$name = 'ProjectModel';", "import ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport SchedulerCrudManager from '../../Scheduler/data/CrudManager.js';\nimport ProjectModel from '../model/ProjectModel.js';\nimport TimeRangeModel from '../model/TimeRangeModel.js';\n/**\n * @module Calendar/data/CrudManager\n */\n// noinspection JSClosureCompilerSyntax\n/**\n * A Calendar-specific implementation of a `CrudManager`.\n *\n * For more information, see {@link Scheduler.data.CrudManager}.\n *\n * @extends Scheduler/data/CrudManager\n *\n * @typings Scheduler.data.CrudManager -> Scheduler.data.SchedulerCrudManager\n */\nexport default class CrudManager extends SchedulerCrudManager {\n    static $name = 'CrudManager';\n    //region Config\n    static configurable = {\n        projectClass   : ProjectModel,\n        timeRangeClass : TimeRangeModel\n    };\n    //endregion\n    buildProjectConfig() {\n        const\n            ret = super.buildProjectConfig(),\n            { timeRangeStore } = this;\n        if (timeRangeStore) {\n            ret.timeRangeStore = timeRangeStore;\n        }\n        return ret;\n    }\n    //region Stores\n    get timeRangeStore() {\n        return super.timeRangeStore;\n    }\n    set timeRangeStore(store) {\n        if (store && ObjectHelper.isObject(store)) {\n            store = ObjectHelper.assign({\n                modelClass : this.timeRangeClass\n            }, store);\n        }\n        this.setFeaturedStore('_timeRangeStore', store, this.project?.timeRangeStoreClass);\n    }\n    //endregion\n};\nCrudManager.initClass();\nCrudManager._$name = 'CrudManager';", "import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport Factoryable from '../../Core/mixin/Factoryable.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\n/**\n * @module Calendar/feature/CalendarFeature\n */\n/**\n * The base abstract class for Calendar features.\n *\n * @extends Core/mixin/InstancePlugin\n * @abstract\n */\nexport default class CalendarFeature extends InstancePlugin.mixin(Factoryable) {\n    static get factoryable() {\n        return {\n            // establish this class as the Factoryable base\n        };\n    }\n    static get configurable() {\n        return {\n            clientListeners : {\n                paint : 'onCalendarPaint'\n            },\n            disableOnReadOnly : null,\n            zoneTypes : null\n        };\n    }\n    getViewZoneType(view) {\n        const { zoneTypes } = this;\n        let ret;\n        if (zoneTypes && (ret = zoneTypes[view.type]) === undefined) {\n            if (view.isWeekView && zoneTypes.week !== undefined) {\n                ret = zoneTypes.week;\n            }\n            else if (view.isDayView) {  // also covers WeekView\n                ret = zoneTypes.day;\n            }\n            else if (view.isMonthView) {\n                ret = zoneTypes.month;\n            }\n            else if (view.isYearView) {\n                ret = zoneTypes.year;\n            }\n            else if (view.isResourceView) {\n                ret = zoneTypes.resource;\n            }\n            else if (view.isAgendaView) {\n                ret = zoneTypes.agenda;\n            }\n        }\n        return ret;\n    }\n    updateDisableOnReadOnly(disable) {\n        const\n            me = this,\n            { client } = me,\n            name = 'readonlyToggle',\n            handler = 'onClientReadOnlyToggle';\n        if (disable) {\n            me[handler]({ readOnly : client.readOnly });\n            client.ion({\n                name,\n                readOnly : handler,\n                thisObj  : me\n            });\n        }\n        else {\n            me.detachListeners(name);\n        }\n    }\n    doDestroy() {\n        this.syncModes();\n        super.doDestroy();\n    }\n    createZone(type, config) {\n        return new type({\n            owner : this,\n            ...config\n        });\n    }\n    onClientReadOnlyToggle({ readOnly }) {\n        this.disabled = readOnly;\n    }\n    updateDisabled(disabled, was) {\n        super.updateDisabled(disabled, was);\n        if (this.client.isPainted) {\n            this.syncModes();\n        }\n    }\n    onCalendarPaint({ firstPaint }) {\n        if (firstPaint) {\n            this.syncModes();\n        }\n    }\n    syncModes() {\n        const\n            me = this,\n            { client, _modeDetacher, zones } = me;\n        let newZones = null,\n            modes, name, view, type, zone;\n        // Tear down the modes when the feature is disabled... that's not worth optimizing for nor writing special\n        // code in the zone helpers and since they need to be destroyable, just destroy them.\n        if (me.disabled || me.isDestroying || !me.zoneTypes) {\n            _modeDetacher?.();\n        }\n        else {\n            if (client.isCalendar) {\n                if (!_modeDetacher) {\n                    me._modeDetacher = client.ion({\n                        addMode : () => me.syncModes()\n                    });\n                }\n                modes = client.modes;\n            }\n            else {\n                modes = {\n                    view : client\n                };\n            }\n            for (name in modes) {\n                zone = zones?.[name];\n                view = modes[name];\n                type = me.getViewZoneType(view);\n                if (type) {\n                    if ((ObjectHelper.isObject(zone) ? zone.type : zone?.constructor) === type) {\n                        delete zones[name];  // keep this zone around...\n                    }\n                    else if (view.isPainted) {\n                        zone = me.createZone(type, {\n                            view\n                        });\n                    }\n                    else {\n                        // Unpainted calendar views are not fully initialized, so we wait for them to paint before\n                        // creating the zone helper instance.\n                        zone = me.whenPainted(name, view, type);\n                    }\n                    (newZones || (newZones = {}))[name] = zone;\n                }\n            }\n        }\n        me.zones = newZones;\n        if (zones) {\n            for (name in zones) {\n                zones[name].destroy();\n            }\n        }\n    }\n    whenPainted(name, view, type) {\n        const\n            me = this,\n            proxy = {\n                type,\n                destroy : view.ion({\n                    once : true,\n                    // Must create zone first\n                    prio : 10000,\n                    paint() {\n                        if (me.zones[name] === proxy) {\n                            me.zones[name] = me.createZone(type, {\n                                view\n                            });\n                        }\n                    }\n                })\n            };\n        return proxy;\n    }\n}\nCalendarFeature._$name = 'CalendarFeature';", "import Base from '../../Core/Base.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\n/**\n * @module Calendar/feature/CalendarZone\n */\n/**\n * Base class for calendar feature helper classes that track per-mode state.\n * @internal\n */\nexport default class CalendarZone extends Base {\n    static $name = 'CalendarZone';\n    static configurable = {\n        /**\n         * The owning feature of this zone instance.\n         * @config {Calendar.feature.CalendarFeature}\n         * @readonly\n         */\n        owner : null,\n        /**\n         * The associated view of this zone instance.\n         * @config {Calendar.widget.mixin.CalendarMixin}\n         * @readonly\n         */\n        view : {\n            $config : 'nullify',\n            value : null\n        },\n        /**\n         * A listener config object to attach to this object's {@link #config-view}\n         * @config {Object}\n         */\n        viewListeners : null\n    };\n    updateView(view) {\n        const\n            me        = this,\n            listeners = view && me.viewListeners;\n        me.detachListeners('viewListeners');\n        // Not all views have an overflowPopup, but if they don't then they simply will never fire the event...\n        listeners && view?.ion(ObjectHelper.merge({\n            thisObj : me,\n            name    : 'viewListeners'\n        }, listeners));\n    }\n}\nCalendarZone.initClass();\nCalendarZone._$name = 'CalendarZone';", "import DomHelper from '../../Core/helper/DomHelper.js';\nimport ChipView from '../../Core/widget/ChipView.js';\n/**\n * @module Calendar/widget/ResourceChipView\n */\n/**\n * A ChipView used to display resources as chips in Calendar UIs.\n *\n * This class is not meant to be used directly.\n *\n * @extends Core/widget/ChipView\n * @classtype resourcechipview\n * @internal\n */\nexport default class ResourceChipView extends ChipView {\n    static $name = 'ResourceChipView';\n    // Factoryable type name\n    static type = 'resourcechipview';\n    static configurable = {\n        navigator      : null,\n        itemsFocusable : false,\n        closable       : false,\n        scrollable     : false,\n        itemTpl(resource) {\n            return DomHelper.createElement({\n                className : 'b-cal-event-resource-avatar-desc',\n                children  : [{\n                    class : 'b-event-column-resource-name',\n                    text  : resource.name\n                }, resource.role?.length ? {\n                    class : 'b-event-column-resource-role',\n                    text  : resource.role\n                } : null]\n            }).outerHTML;\n        }\n    };\n    getItemCls(r) {\n        return DomHelper.isNamedColor(r.eventColor) ? ` b-sch-${r.eventColor}` : '';\n    }\n    getItemStyle(r) {\n        return `color:#fff;${r.eventColor && !DomHelper.isNamedColor(r.eventColor) ? `background-color:${r.eventColor}` : ''}`;\n    }\n    iconTpl(resourceRecord) {\n        return DomHelper.createElement(this.owner.ownerFeature.client.activeView.getResourceAvatar(resourceRecord)).outerHTML;\n    }\n}\nResourceChipView.initClass();\nResourceChipView._$name = 'ResourceChipView';", "import Tooltip from '../../Core/widget/Tooltip.js';\nimport ClockTemplate from '../../Scheduler/tooltip/ClockTemplate.js';\nimport DH from '../../Core/helper/DateHelper.js';\nimport FunctionHelper from '../../Core/helper/FunctionHelper.js';\nimport RecurrenceLegend from '../../Scheduler/data/util/recurrence/RecurrenceLegend.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\nimport ResourceChipView from '../widget/ResourceChipView.js';\n/**\n * @module Calendar/widget/EventTip\n */\nconst hasEventStore = w => w.eventStore;\n/**\n * Displays a tooltip containing extra info and options on either event click or event hover.\n *\n * See the {@link Calendar.feature.EventTooltip} feature for more information and an example of\n * customizing the displayed event tooltip.\n *\n * The EventTip is provided with two standard {@link #config-tools}:\n *\n * * `edit` - A tool which is linked to the {@link Calendar.feature.EventEdit EventEdit} feature\n * to initiate editing when clicked.\n * * `delete` - A tool which removes the current event record\n * function of the active view to enable event deletion.\n *\n * New tools may be added, or properties of existing tools may be changed by configuring the\n * {@link Calendar.feature.EventTooltip} feature.\n *\n * Content may be customized using the {@link #config-titleRenderer} and {@link #config-renderer}\n * which may create complex content by returning a {@link DomConfig}:\n *\n * ```javascript\n *     features : {\n *         eventTooltip : {\n *             tools : {\n *                 // Just override handler of existing tool - all else is OK\n *                 edit : {\n *                     handler : () => console.log(`Handle editing ${this.eventRecord.name} our way`);\n *                 },\n *                 // Add a new tool for our own operation\n *                 newTool : {\n *                     cls     : 'b-icon-add',\n *                     tooltip : 'Test',\n *                     handler() {\n *                         console.log(`Test ${this.eventRecord.name}`);\n *                     }\n *                 }\n *             },\n *             renderer({ eventRecord }) {\n *                 return {\n *                     text : `From ${DateHelper.format(eventRecord.startDate, 'l')} to ${DateHelper.format(eventRecord.endDate, 'l')}`\n *                 },\n *             },\n *             titleRenderer( eventRecord ) {\n *                 return {\n *                     text      : `${eventRecord.name} ${eventRecord.resource.name}`,\n *                     className : {\n *                         'b-urgent'    : eventRecord.isUrgent,\n *                         'b-completed' : eventRecord.isCompleted\n *                     }\n *                 };\n *             }\n *         }\n *     }\n * ```\n *\n * @extends Core/widget/Tooltip\n * @classtype eventTooltip\n */\nexport default class EventTip extends Tooltip {\n    //region Config\n    static get $name() {\n        return 'EventTip';\n    }\n    static get type() {\n        return 'eventtip';\n    }\n    static get configurable() {\n        return {\n            localizableProperties : ['timeFormat'],\n            align : {\n                monitorResize : true // Needed because DayView events change size\n            },\n            /**\n             * A {@link Core.helper.DateHelper} format string used to format dates displayed in this tooltip.\n             *\n             * @config {String}\n             * @default\n             */\n            dateFormat : 'll',\n            /**\n             * The event which the tooltip feature has been shown for.\n             * @member {Scheduler.model.EventModel} eventRecord\n             * @readonly\n             */\n            /**\n             * The event record for this tip to display\n             * @config {Scheduler.model.EventModel} eventRecord\n             */\n            eventRecord : {\n                $config : 'nullify',  // ensure we remove our afterChange hook\n                value : null\n            },\n            recurrenceHint : '',\n            /**\n             * A {@link Core.helper.DateHelper} format string used to format the time displayed in this tooltip.\n             *\n             * @config {String}\n             * @default 'LST'\n             */\n            timeFormat : {\n                value   : 'LST',\n                $config : {\n                    localeKey : 'L{timeFormat}'\n                }\n            },\n            // Allow it to fall back from its initial alignment axis to the cross axis.\n            // So if aligned l-r or r-l and shown by a long multiday event, it allows\n            // itself to be fall back to being aligned t-b\n            axisLock : 'flexible',\n            closable     : null,\n            forSelector  : '.b-cal-event-wrap',\n            maxWidth     : '30em',\n            minWidth     : '14em',\n            scrollAction : 'realign',\n            cls : {\n                'b-sch-event-tooltip' : 1\n            },\n            tools : {\n                edit : {\n                    cls     : 'b-icon-edit',\n                    handler : 'up.onEditClick',\n                    tooltip : 'L{EventEdit.Edit event}',\n                    weight  : 100\n                },\n                delete : {\n                    cls     : 'b-icon-trash',\n                    handler : 'up.onDeleteClick',\n                    tooltip : 'L{SchedulerBase.Delete event}',\n                    weight  : 0\n                },\n                maximize : null\n            },\n            /**\n             * A function, or name of a function in the ownership hierarchy which is used to create\n             * the content of the tooltip's header.\n             *\n             * @prp {Function|String}\n             * @param {Scheduler.model.EventModel} eventRecord The event record\n             * @returns {String|DomConfig} The content of the header element.\n             */\n            titleRenderer : eventRecord => StringHelper.encodeHtml(eventRecord.name),\n            /**\n             * A function, or name of a function in the ownership hierarchy which is used to create\n             * the content of the tooltip's body.\n             *\n             * @prp {Function|String}\n             * @param {Object} data Contextual data about the current tooltip activation\n             * @param {HTMLElement} data.activeTarget The event bar element being aligned to\n             * @param {Scheduler.model.EventModel} data.eventRecord The event record\n             * @param {Event} data.event The DOM event which initiated the tooltip show\n             * @param {Calendar.widget.EventTip} data.tip The tooltip instance being shown\n             * @returns {String|DomConfig} The content of the body element.\n             */\n            renderer : null,\n            /**\n             * By default, the end date of an all day event is displayed in the tooltip UI as\n             * the last calendar date on which the event falls. For most end users, this is the\n             * expected value.\n             *\n             * Technically, the {@link Scheduler.model.EventModel#field-endDate} is a timestamp\n             * which represents the exact point in time at which an event ends. To use this instead,\n             * configure `extendAllDayEndDay` as `true`.\n             *\n             * To be clear, this would mean that an {@link Scheduler.model.EventModel#field-allDay}\n             * event starting and ending on the 7th of February 2020, would show the end date in the\n             * tooltip as 8th of February 2020.\n             * @prp {Boolean}\n             * @default false\n             */\n            extendAllDayEndDay : null,\n            activeClient : null,\n            /**\n             * By default, if the tip's target event is in a cluster of overlapping events and therefore\n             * narrow, activating the tip will expand it to full width temporarily.\n             *\n             * Configure this as `false` to disable this.\n             * @prp {Boolean}\n             * @default true\n             */\n            revealEventsInCluster : true\n        };\n    }\n    static get delayable() {\n        return {\n            refreshContent : 20\n        };\n    }\n    clockTemplate = new ClockTemplate({});\n    //endregion\n    get owner() {\n        return Tooltip.fromElement(this.activeTarget) || this.ownerFeature.client;\n    }\n    onEditClick() {\n        this.trigger('edit');\n    }\n    onDeleteClick() {\n        this.trigger('delete');\n    }\n    getHtml(data) {\n        const\n            me              = this,\n            { eventRecord } = me;\n        if (eventRecord) {\n            data.eventRecord = eventRecord;\n            me.title = me.titleRenderer ? me.callback(me.titleRenderer, me, [eventRecord]) : '';\n            return me.callback(me.renderer || me.internalRenderer, me, [{\n                ...data,\n                eventRecord\n            }]);\n        }\n    }\n    internalRenderer({ eventRecord }) {\n        const\n            {\n                clockTemplate,\n                dateFormat,\n                recurrenceHint,\n                timeFormat\n            }                = this,\n            {\n                allDay,\n                endDate,\n                startDate,\n                recurrence\n            }                = eventRecord,\n            // For allDay events round eg 2020-10-18T12:00 up to 2020-10-19T00:00:00.000\n            lastDay          = allDay ? (this.extendAllDayEndDay ? DH.ceil(endDate, '1 day') : DH.add(endDate, -1, 'day')) : endDate,\n            startMidnight    = DH.clearTime(startDate),\n            lastMidnight     = DH.clearTime(lastDay),\n            multiDay         = startMidnight < lastMidnight,\n            hasTime          = !allDay && startMidnight < startDate || lastMidnight < lastDay,\n            format           = hasTime ? (multiDay ? `${dateFormat} ${timeFormat}` : timeFormat) : dateFormat,\n            recurrenceLegend = recurrence ? RecurrenceLegend.getLegend(recurrence) : recurrenceHint,\n            duration         = DH.formatDelta(DH.diff(startDate, endDate), allDay ? { precision : 'd' } : null),\n            onlyStartDate    = eventRecord.isMilestone || (allDay && !multiDay);\n        clockTemplate.mode = multiDay ? 'day' : 'hour';\n        return (\n            clockTemplate.template({\n                date : startDate,\n                text : DH.format(startDate, format),\n                cls  : 'b-sch-tooltip-startdate'\n            }) +\n            (onlyStartDate ? '' : clockTemplate.template({\n                date : lastDay,\n                text : DH.format(lastDay, format),\n                cls  : 'b-sch-tooltip-enddate'\n            })) +\n            (eventRecord.isMilestone ? '' : `<div class=\"b-cal-tooltip-duration b-icon b-icon-duration\">${duration}</div>`) +\n            (recurrenceLegend ? `<div class=\"b-cal-tooltip-recurrence b-icon b-icon-recurring\">${recurrenceLegend}</div>` : '')\n        );\n    }\n    showByEvent(event, element = event.target) {\n        const me = this;\n        me.activeTarget = element;\n        me.pointerEvent = event;\n        me.updateContent();\n        if (event.type === 'contextmenu') {\n            return me.showBy({\n                domEvent : event,\n                anchor   : false\n            });\n        }\n        return me.showBy(element);\n    }\n    afterShowByTarget() {\n        const { delete : deleteTool } = this.tools;\n        // Capture the active client only when we are visible.\n        this.activeClient = Tooltip.fromElement(this.activeTarget)?.closest(hasEventStore);\n        super.afterShowByTarget();\n        // The delete tool is disabled if the Calendar is readOnly\n        deleteTool && (deleteTool.disabled = this.ownerFeature.client.readOnly);\n    }\n    afterHide() {\n        super.afterHide(...arguments);\n        this.activeClient = null;\n    }\n    updateActiveTarget(element, was) {\n        super.updateActiveTarget(...arguments);\n        was?.classList.remove('b-cal-event-reveal');\n        // The activating event element is lifted to the top of the z-index stack while\n        // it is the target of the tooltip.\n        if (element?.classList.contains('b-cal-in-cluster') && this.revealEventsInCluster) {\n            element.classList.add('b-cal-event-reveal');\n        }\n    }\n    refreshContent() {\n        // this method is just a buffered wrapper of updateContent\n        this.updateContent();\n    }\n    updateEventRecord(eventRecord) {\n        const me = this;\n        me._changeHook?.();\n        me._changeHook = eventRecord && FunctionHelper.after(eventRecord, 'afterChange', me.refreshContent, me);\n        if (eventRecord) {\n            if (me.tools.delete) {\n                me.tools.delete.hidden = eventRecord.readOnly;\n            }\n            if (me.tools.edit) {\n                me.tools.edit.hidden = eventRecord.readOnly;\n            }\n        }\n    }\n    updateContent() {\n        const\n            { clockTemplate, element, eventRecord } = this,\n            result                                 = super.updateContent(),\n            startElement                           = element.querySelector('.b-sch-tooltip-startdate'),\n            endElement                             = element.querySelector('.b-sch-tooltip-enddate'),\n            { edit, delete : del }                 = this.tools,\n            { client }                             = this.ownerFeature,\n            { eventEdit }                          = client.features,\n            readOnly                               = client.readOnly || eventRecord.readOnly;\n        startElement && clockTemplate.updateDateIndicator(startElement, eventRecord.startDate);\n        endElement && clockTemplate.updateDateIndicator(endElement, eventRecord.endDate);\n        // Hide the edit tool if the Calendar or event is readOnly or there is no editFeature or it's disabled\n        edit && (edit.hidden = readOnly || !eventEdit?.enabled);\n        // Hide delete tool if the Calendar or event is readOnly\n        del && (del.hidden = readOnly);\n        if (this.resources) {\n            const { chipView } = this;\n            chipView.items = eventRecord.resources;\n            this.contentElement.querySelector('.b-resourcechipview')?.remove();\n            this.contentElement.appendChild(chipView.element.cloneNode(true));\n        }\n        return result;\n    }\n    realign() {\n        const { lastAlignSpec } = this;\n        // If the event bar to which we were attached is recycled by another event\n        // Our tenure in the current guise is over.\n        if (this.isVisible && lastAlignSpec?.aligningToElement && lastAlignSpec.target.dataset.eventId !== String(this.eventRecord.id)) {\n            this.hide();\n        }\n        super.realign(...arguments);\n    }\n    updateActiveClient(activeClient) {\n        this.detachListeners('clientOverflowChange');\n        // We may have to hide when the active client changes its possible overflow threshold\n        if (activeClient) {\n            activeClient.ion({\n                name                : 'clientOverflowChange',\n                eventsPerCellChange : 'onClientOverflowChange',\n                thisObj             : this\n            });\n        }\n    }\n    onClientOverflowChange() {\n        // If that caused the target to no longer be visible, we must hide.\n        // For example aligned to an event which is now in overflow.\n        // Or aligned to an event in the overflow popup which has now hidden.\n        if (!DomHelper.isVisible(this.lastAlignSpec.target)) {\n            this.hide();\n        }\n    }\n    onDocumentMouseDown({ event }) {\n        // Ignore mousedown on active element if we show on a click.\n        if (!event.button && this.ownerFeature.showOn === 'click' && this.activeTarget.contains(event.target)) {\n            return;\n        }\n        return super.onDocumentMouseDown(...arguments);\n    }\n    get chipView() {\n        const me = this;\n        if (!me._chipView) {\n            me._chipView = new ResourceChipView({\n                parent : me\n            });\n            // The List class only refreshes itself when visible, so\n            // since this is an offscreen, rendering element\n            // we have to fake visibility.\n            Object.defineProperty(me.chipView, 'isVisible', {\n                get() {\n                    return true;\n                }\n            });\n            // Complete the initialization, which is finalized on first paint.\n            // In particular the lazy scrollable config is ingested on paint.\n            me.chipView.triggerPaint();\n        }\n        return me._chipView;\n    }\n}\n// Register this feature type with its Factory\nEventTip.initClass();\nEventTip._$name = 'EventTip';", "import Base from '../../Core/Base.js';\nimport CalendarFeature from './CalendarFeature.js';\nimport DH from '../../Core/helper/DateHelper.js';\nimport DomSync from '../../Core/helper/DomSync.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport EventHelper from '../../Core/helper/EventHelper.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\nimport DomClassList from '../../Core/helper/util/DomClassList.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\nimport Draggable from '../../Core/mixin/Draggable.js';\nimport Droppable from '../../Core/mixin/Droppable.js';\nimport Hoverable from '../../Core/mixin/Hoverable.js';\nimport Widget from '../../Core/widget/Widget.js';\nimport RecurrenceConfirmationPopup from '../../Scheduler/view/recurrence/RecurrenceConfirmationPopup.js';\nimport CalendarZone from './CalendarZone.js';\nimport '../../Core/util/drag/DragTipProxy.js';\nimport '../widget/EventTip.js';\n/**\n * @module Calendar/feature/CalendarDrag\n */\n/**\n * An immutable object that describes a calendar drag mode. These objects are used to simplify detecting the drag mode\n * to apply appropriate actions.\n *\n * @typedef {Object} CalendarDragMode\n * @property {'create'|'move'|'resize'} type The value `'create'`, `'move'`, or `'resize'`.\n * @property {Boolean} create The value `true` if `type === 'create'`, otherwise `false`.\n * @property {Boolean} move The value `true` if `type === 'move'`, otherwise `false`.\n * @property {Boolean} resize The value `true` if `type === 'resize'`, otherwise `false`.\n */\nconst\n    tentativeCls      = 'b-cal-tentative-event',\n    SECONDS           = 1000,\n    MINUTES           = 60 * SECONDS,\n    YYYY_MM_DD        = 'YYYY-MM-DD',\n    edgeRe            = /^b-hover-(top|right|bottom|left)$/,\n    eventDragSym      = Symbol('eventDragMode'),\n    appendEventFooter = (domConfig, footer) => {\n        let ret;\n        if (domConfig.className === 'b-cal-event-body') {\n            domConfig.children.push(ret = footer);\n        }\n        else if (Array.isArray(domConfig.children)) {\n            domConfig.children.forEach(c => {\n                if (!ret && c) {\n                    ret = appendEventFooter(c, footer);\n                }\n            });\n        }\n        return ret;\n    },\n    makeMode          = type => Object.freeze({\n        type,\n        create : false,\n        move   : false,\n        resize : false,\n        [type] : true\n    }),\n    modeDescriptor    = {\n        create : {\n            finisher    : 'finishDropCreate',\n            mode        : makeMode('create'),\n            validatorFn : 'validateCreateFn'\n        },\n        move : {\n            finisher    : 'finishDropMove',\n            mode        : makeMode('move'),\n            validatorFn : 'validateMoveFn'\n        },\n        resize : {\n            finisher    : 'finishDropResize',\n            mode        : makeMode('resize'),\n            validatorFn : 'validateResizeFn'\n        }\n    },\n    isAllDayView      = {\n        calendarrow            : true,\n        monthview              : true,\n        dayresourcecalendarrow : true\n    };\n/*\n Base class for all zones, however, not all zones support all capabilities. DayView and WeekView are all of these\n things. Their events can be dragged between days, resized to change times of day, and an event can be dropped on\n to the calendar cells. While the YearView does not have events presented for dragging and so is not actually\n draggable, it is droppable since an event can be dropped on a day cell. MonthView is draggable and droppable,\n however, it is not hoverable since its events cannot be \"resized\". Finally, events in the OverflowPopup can only\n be dragged.\n */\nclass Zone extends CalendarZone.mixin(Draggable, Droppable, Hoverable) {\n    static get $name() {\n        return 'Zone';\n    }\n    static get configurable() {\n        return {\n            // We limit dropping to all *children* of the Droppable, not the Droppable element itself.\n            // So that we avoid triggering \"over\" or \"drop\" on borders which would give incorrect\n            // positional calculations.\n            droppableSelector : '*',\n            droppable : true,\n            hoverable : null,\n            hoverAnimationCls : 'b-hover-anim',\n            days : {\n                $config : {\n                    // DayResourceView includes the resource as part of the days config.\n                    equal : (d1, d2) => ObjectHelper.isEqual(d1, d2) && d1?.resource === d2?.resource\n                },\n                value : null\n            },\n            dragProxy : {\n                type    : 'tip',\n                tooltip : null  // borrowed from the Feature instance's tooltip config\n            },\n            eventRecord : null,\n            hit : null,\n            dragItemSelector : '.b-cal-event-wrap',\n            overflow : {\n                $config : 'nullify',\n                value : null\n            },\n            rootElement : null\n        };\n    }\n    get dayTime() {\n        return this.view?.dayTime;\n    }\n    clearTime(date) {\n        return this.dayTime.startOfDay(date);\n    }\n    findRootElement(view) {\n        return view.contentElement;\n    }\n    getDateFromPosition(clientX, clientY) {\n        return this.view.getDateFromPosition(clientX, clientY, false, this.view.dayTime);\n    }\n    // Draggable behaviors\n    get dragEventer() {\n        return this.owner;\n    }\n    beforeDrag(drag) {\n        const\n            me          = this,\n            { owner }   = me,\n            hit         = me.hitTest(drag),\n            eventRecord = hit?.eventRecord,\n            insetProp   = me.view.rtl ? 'right' : 'left';\n        if (!hit || eventRecord?.readOnly || eventRecord?.isCreating) {\n            return false;\n        }\n        hit.date && drag.set('date', hit.date);\n        hit.resource && drag.set('resource', hit.resource);\n        let mode, veto;\n        switch (hit.type) {\n            case 'event':\n                drag.set('eventRecord', eventRecord);\n                drag.set('eventSourceHit', hit);\n                drag.set('eventInset', hit.eventElement.style[insetProp]);\n                drag.set('eventWidth', hit.eventElement.offsetWidth);\n                mode = 'move';\n                veto = !owner.draggable || !eventRecord.isDraggable || me.draggable === false;\n                if (!veto) {\n                    me.captureDragOffset(eventRecord, hit, drag);\n                }\n                break;\n            case 'resize':\n                drag.set('eventRecord', eventRecord);\n                drag.set('eventSourceHit', hit);\n                drag.set('eventInset', hit.eventWrap.style[insetProp]);\n                drag.set('eventWidth', hit.eventWrap.offsetWidth);\n                mode = 'resize';\n                veto = !owner.resizable || !eventRecord.resizable || me.resizable === false;\n                break;\n            case 'schedule':\n            case 'dayNumber':\n                drag.set('eventCreate', hit);\n                mode = 'create';\n                veto = !owner.creatable || me.creatable === false;\n                break;\n            default:\n                return false;\n        }\n        if (veto) {\n            return false;\n        }\n        drag.set('eventDragMode', drag[eventDragSym] = modeDescriptor[mode].mode);\n    }\n    dragStart() {\n        const\n            me                               = this,\n            { dragging : drag, owner, view } = me,\n            { client }                       = owner,\n            callback                         = () => {\n                drag.lastMoveEvent && drag.move(drag.lastMoveEvent);\n            },\n            config                           = {\n                scrollables : client.scrollManager ? [\n                    {\n                        element : client.viewContainer.element,\n                        callback\n                    }\n                ] : []\n            };\n        // NOTE: Adding b-resizing kicks in display:none which focuses the <body>, so capture it first:\n        if (me.isResizing || me.isMoving) {\n            me.refocus = owner.client.captureFocus();\n        }\n        if (me.isResizing) {\n            drag.itemElement?.classList.add('b-resizing');\n        }\n        if (view.scrollable) {\n            config.scrollables.push({\n                element : view.scrollable.element,\n                callback\n            });\n        }\n        // DayViews may have an extra scroller\n        if (view.horizontalScroller) {\n            config.scrollables.push({\n                element : view.horizontalScroller.element,\n                callback\n            });\n        }\n        client.scrollManager?.startMonitoring(config);\n    }\n    captureDragOffset() {\n        // empty by default\n    }\n    cleanupDrag() {\n        const\n            me                      = this,\n            { dragProxy, dragging } = me,\n            { tooltip }             = dragProxy,\n            view                    = me.view.isOverflowPopup ? me.view.owner : me.view;\n        dragging?.itemElement?.classList.remove('b-resizing');\n        // Do not refocus immediately. The UI will not be in its new state.\n        // Refocus after the impending refresh.\n        view.ion({\n            refresh() {\n                // Try to refocus element without scrolling. In case we scrolled the view while dragging the event.\n                me.refocus?.(false, true);\n                me.refocus = null;\n            },\n            once : true\n        });\n        me.days = null;  // day view resize uses days/times as drag feedback\n        if (tooltip) {\n            tooltip.hide();\n            dragProxy.tooltip = null;\n        }\n    }\n    dragEnd() {\n        this.owner.client?.scrollManager?.stopMonitoring();\n        this.cleanupDrag();\n    }\n    makeDays(startDate, endDate) {\n        const\n            { dayTime, firstVisibleDate, lastVisibleDate } = this.view,\n            days = [];\n        endDate = DH.add(endDate, -1, 'd');  // endDate is exclusive, but lastVisibleDate is inclusive\n        [startDate, endDate] = [startDate, endDate].map(\n            d => d < firstVisibleDate ? firstVisibleDate : (lastVisibleDate < d ? lastVisibleDate : d));\n        let date = dayTime.startOfDay(startDate);\n        // We do ceil(endDate) to handle events that start/end on the same day\n        // Note: \"!(end < date)\" ==> \"date <= end\" but works for Date since they are never ==\n        for (const end = dayTime.ceil(endDate); !(end < date); date = DH.add(date, 1, 'day')) {\n            days.push(dayTime.dateKey(date));\n        }\n        return days;\n    }\n    onShowOverflowPopup({ overflowPopup }) {\n        if (!this.overflow) {\n            this.overflow = new OverflowZone({\n                owner : this.owner,\n                view  : overflowPopup\n            });\n        }\n    }\n    // Droppable behaviors\n    get calendarCellSelector() {\n        return this.view.visibleCellSelector;\n    }\n    get calendarCells() {\n        const container = this.dropRootElement;\n        return container && DomHelper.children(container, this.calendarCellSelector);\n    }\n    get isCreating() {\n        return this.dropping?.[eventDragSym]?.create;\n    }\n    get isMoving() {\n        const mode = this.dropping?.[eventDragSym] || this.dragging?.[eventDragSym];\n        return mode ? mode.move : Boolean(this.dropping?.peek('eventRecord'));\n    }\n    /**\n     * Returns true if a resize operation is active\n     * @property {Boolean}\n     * @readonly\n     */\n    get isResizing() {\n        return this.dragging?.[eventDragSym]?.resize;\n    }\n    get recurrable() {\n        return this.isDayZone || this.isMonthZone;\n    }\n    cleanupDrop() {\n        this.eventRecord = this.eventDom = this.days = null;\n        this.noTip = false;\n    }\n    createEvent(data, dropping = this.dropping) {\n        // We can get here for an AllDay zone when the day detail zone is creating a multi-day event, but that's the\n        // only time we won't be processing our own drop.\n        const mode = dropping?.[eventDragSym] || modeDescriptor.create.mode;\n        this.setupEvent(data, mode.create);\n    }\n    async dragDrop(drag) {\n        if (this.isResizing || drag.target === this) {\n            // finalizer is a Promise that the DragContext (which is a Finalizable) awaits in its finalize() method.\n            return drag.finalizer = this.finishDrop(drag);\n        }\n    }\n    dragEnter(drag) {\n        const\n            me   = this,\n            mode = drag[eventDragSym],\n            hit  = (drag.source === me && drag.peek('eventSourceHit')) || me.hitTest(drag);\n        if (me.isMoving) {\n            // we need to know the hit target at all times during drag, but we're not ready to process updateHit until\n            // we get past setupEvent\n            me._hit = hit;\n            me.startMove(drag.peek('eventRecord'));\n        }\n        else if (!mode || drag.source !== me) {\n            return false;\n        }\n        else if (mode.resize) {\n            me._hit = hit;\n            me.startResize(hit);\n        }\n        else if (mode.create) {\n            me._hit = hit;\n            me.startCreate(drag.peek('date'), drag.peek('eventCreate'));\n        }\n        else {\n            return false;\n        }\n    }\n    dragLeave() {\n        if (!this.isResizing) {\n            this.cleanupDrop();\n        }\n    }\n    dragMove(drag) {\n        this.hit = this.pickDropTarget(drag);  // see updateHit for side effects\n    }\n    dropHitMove(drag, hit, eventRecord) {\n        const\n            me                     = this,\n            { endDate, startDate } = eventRecord.isScheduled ? eventRecord : me.eventRecord,\n            durationSec            = DH.diff(startDate, endDate, 's');\n        let { date, resource } = hit;\n        date = me.clearTime(date);\n        if (!eventRecord.allDay) {\n            date = DH.add(date, DH.diff(me.clearTime(startDate), startDate, 's'), 's');\n        }\n        date = me.applyDragOffset(date, drag);\n        const data = {\n            startDate : date,\n            endDate   : DH.add(date, durationSec, 's')\n        };\n        // If this is a resource-specific view, hit testing will include the resource.\n        if (resource?.eventColor) {\n            data.eventColor = resource.eventColor;\n        }\n        me.setEventData(data);\n    }\n    dropHitNowhere() {\n        this.days = null;\n    }\n    dropHitResize(drag, hit, eventHit) {\n        const\n            me                     = this,\n            { eventRecord }        = me,\n            { startDate, endDate } = eventRecord,\n            date                   = me.clearTime(hit.date);\n        let changes, end;\n        if (eventHit.atEnd) {\n            end = DH.add(date, 1, 'd');\n            changes = {\n                startDate,\n                endDate : (startDate < end) ? end : DH.add(startDate, 1, 'd')\n            };\n        }\n        else {\n            changes = {\n                startDate : (date < endDate) ? date : DH.add(endDate, -1, 'd'),\n                endDate\n            };\n        }\n        changes.duration = DH.diff(changes.startDate, changes.endDate, eventRecord.durationUnit);\n        me.setEventData(changes);\n    }\n    async finishDrop(drag) {\n        const\n            me             = this,\n            {\n                eventRecord,\n                resource,\n                owner,\n                view\n            }              = me,\n            { eventStore } = view,\n            mode           = drag[eventDragSym],\n            descriptor     = modeDescriptor[mode?.type || 'move'];\n        if (descriptor && me.hit) {\n            const validation = descriptor.validatorFn\n                ? await owner.callback(owner[descriptor.validatorFn], owner, [{\n                    drag,\n                    eventRecord,\n                    event : drag.event\n                }])\n                : true;\n            if (validation !== false) {\n                await me[descriptor.finisher](drag, owner, eventRecord, eventStore, validation,\n                    async(eventName, callback, callbackFalse) => {\n                        let info = {\n                            drag,\n                            eventRecord    : drag.peek('eventRecord') || eventRecord,\n                            newStartDate   : eventRecord.startDate,\n                            newEndDate     : eventRecord.endDate,\n                            resourceRecord : resource,\n                            validation,\n                            event          : drag.event,\n                            feature        : owner,\n                            view           : drag[me.isResizing ? 'source' : 'target'].view\n                        };\n                        // First trigger a preventable beforeXXX event to allow outside world to veto this operation\n                        const result = await owner.client.trigger('before' + StringHelper.capitalize(eventName), info);\n                        if (result === false) {\n                            info = false;\n                            await callbackFalse?.();\n                        }\n                        else {\n                            await callback?.();\n                            delete info.newStartDate;\n                            delete info.newEndDate;\n                            owner.client.trigger(eventName, info);\n                        }\n                        // return the event info object to allow event handlers to return data by poking on to that\n                        // object.\n                        return info;\n                    });\n            }\n        }\n        me.cleanupDrop();\n    }\n    async finishDropCreate(drag, owner, eventRecord, eventStore, validation, triggerFn) {\n        const add = validation?.add !== false;\n        /**\n         * This event fires on the owning Calendar before a drag creation gesture is completed. Return `false` to\n         * immediately veto the operation or a Promise yielding `true` or `false` for async vetoing.\n         * @event beforeDragCreateEnd\n         * @preventable\n         * @on-owner\n         * @async\n         * @param {Calendar.view.Calendar} source The Calendar instance that fired the event.\n         * @param {Core.util.drag.DragContext} drag The drag create context.\n         * @param {Event} event The browser event.\n         * @param {Scheduler.model.EventModel} eventRecord The `EventModel` record being created that has not yet been added in the store.\n         * @param {Date} newStartDate The new start date.\n         * @param {Date} newEndDate The new end date.\n         * @param {Scheduler.model.ResourceModel} [resourceRecord] The `ResourceModel` record if the gesture was performed\n         * in a resource-type view.\n         * @param {Calendar.feature.CalendarDrag} feature The Calendar drag feature instance.\n         * @param {Boolean|ValidateCreateResult} validation The result of the {@link #config-validateCreateFn} if one\n         * was provided.\n         * @param {Core.widget.Widget} view The Calendar widget in which the drag completed.\n         */\n        /**\n         * This event fires on the owning Calendar when a drag creation gesture is completed.\n         * @event dragCreateEnd\n         * @on-owner\n         * @param {Calendar.view.Calendar} source The Calendar instance that fired the event.\n         * @param {Core.util.drag.DragContext} drag The drag create context.\n         * @param {Event} event The browser event.\n         * @param {Scheduler.model.EventModel} eventRecord The new `EventModel` record added in the store.\n         * @param {Scheduler.model.ResourceModel} [resourceRecord] The `ResourceModel` record if the gesture was performed\n         * in a resource-type view.\n         * @param {Calendar.feature.CalendarDrag} feature The Calendar drag feature instance.\n         * @param {Boolean|ValidateCreateResult} validation The result of the {@link #config-validateCreateFn} if one\n         * was provided.\n         * @param {Core.widget.Widget} view The Calendar widget in which the drag completed.\n         */\n        // If any handler was async, the promise will be returned.\n        // If not presented with a Promise, await yields the immediate value.\n        const result = await triggerFn('dragCreateEnd');\n        if (result === false) {\n            if (add) {\n                eventStore.remove(eventRecord);\n            }\n        }\n        else if (add && !eventStore.includes(eventRecord)) {\n            eventStore.add(eventRecord);\n        }\n    }\n    async finishDropMove(drag, owner, eventRecord, eventStore, validation, triggerFn) {\n        let dropRec = await drag.get('eventRecord');\n        const\n            me           = this,\n            { view }     = me,\n            storeRec     = dropRec.isOccurrence ? dropRec.recurringTimeSpan : dropRec,\n            { source }   = drag,\n            fromResource = await drag.get('resource'),\n            toResource   = me.hit.resource,\n            interView    = source !== me,\n            // If the sourceStore is not the same as the destination store, maybe they would like the\n            // record to be removed on successful drop depending on how removeFromExternalStore is set.\n            sourceStore  = interView && source.view?.eventStore && view.eventStore && source.view.eventStore !== view.eventStore ? source.view.eventStore : await drag.get('sourceStore'),\n            isReassign   = toResource && toResource !== fromResource;\n        // Return if we detect that it's a no-op.\n        if (!isReassign && drag.source === drag.target &&\n                DH.isEqual(eventRecord.startDate, dropRec.startDate) &&\n                DH.isEqual(eventRecord.endDate, dropRec.endDate)) {\n            if (dropRec.eventStore === eventStore) {\n                return;\n            }\n        }\n        /**\n         * This event fires on the owning Calendar before a drag move gesture is completed. Return `false` to immediately veto the operation\n         * or a Promise yielding `true` or `false` for async vetoing.\n         * @event beforeDragMoveEnd\n         * @preventable\n         * @on-owner\n         * @async\n         * @param {Calendar.view.Calendar} source The Calendar instance that fired the event.\n         * @param {Core.util.drag.DragContext} drag The drag create context.\n         * @param {Event} event The browser event.\n         * @param {Scheduler.model.EventModel} eventRecord The `EventModel` record that has not yet been updated in the store.\n         * @param {Date} newStartDate The new start date.\n         * @param {Date} newEndDate The new end date.\n         * @param {Scheduler.model.ResourceModel} [resourceRecord] The `ResourceModel` record if the gesture was performed\n         * in a resource-type view.\n         * @param {Calendar.feature.CalendarDrag} feature The Calendar drag feature instance.\n         * @param {Boolean|ValidateCreateResult} validation The result of the {@link #config-validateMoveFn} if one was\n         * provided.\n         * @param {Core.widget.Widget} view The Calendar widget in which the drag completed.\n         */\n        /**\n         * This event fires on the owning Calendar when a drag move gesture is completed. The `eventRecord` has already been added\n         * to the `eventStore` of the owning calendar.\n         * @event dragMoveEnd\n         * @on-owner\n         * @param {Calendar.view.Calendar} source The Calendar instance that fired the event.\n         * @param {Core.util.drag.DragContext} drag The drag create context.\n         * @param {Event} event The browser event.\n         * @param {Scheduler.model.EventModel} eventRecord The updated `EventModel` record.\n         * @param {Scheduler.model.ResourceModel} [resourceRecord] The `ResourceModel` record if the gesture was performed\n         * in a resource-type view.\n         * @param {Calendar.feature.CalendarDrag} feature The Calendar drag feature instance.\n         * @param {Boolean|ValidateCreateResult} validation The result of the {@link #config-validateMoveFn} if one was\n         * provided.\n         * @param {Core.widget.Widget} view The Calendar widget in which the drag completed.\n         */\n        await triggerFn('dragMoveEnd', async() => {\n            // It's a drag from an external EventStore.\n            // If a handler sets isCopy in the data, we add the\n            // tentative event as a copy of the original.\n            if (!eventStore.getByInternalId(storeRec.internalId)) {\n                if (sourceStore) {\n                    // Remove from the source store if Feature is configured to do so.\n                    if (me.owner.removeFromExternalStore) {\n                        sourceStore.remove(dropRec);\n                    }\n                    // If we are keeping the source record in the external store, then\n                    // the instance in this store has to be a copy so that dragging it in\n                    // multiple times will create multiple events in the Calendar.\n                    else {\n                        dropRec = dropRec.copy();\n                    }\n                    // Move to the dropped at date and time\n                    await me.moveEventTo(drag, dropRec);\n                }\n                else {\n                    // Use the tentative event which is being used as the drop indicator.\n                    // As long as it has a duration, its start and end will be correct.\n                    dropRec = eventRecord;\n                }\n                delete dropRec.resourceId;\n                eventStore.add(dropRec);\n                // If there's no explicit toResource read from the hit, then assign the Calendar's default\n                // calendar (resource) unless the record is already assigned to a valid resource\n                // in our Project\n                const resource = toResource ?? (!isReassign && !view.project.resourceStore.includes(dropRec.resource) && me.owner.client.defaultCalendarId);\n                if (resource != null && view.project.resourceStore.includes(resource)) {\n                    dropRec.assign(resource);\n                }\n                // If the destination's resourceStore does not include our assigned resource, deassign\n                else if (!view.project.resourceStore.includes(dropRec.resource)) {\n                    dropRec.resources = [];\n                }\n            }\n            else {\n                // Await any decision on converting recurring base/occurrence\n                // to an exception of a new recurring base.\n                dropRec = await me.finishDropConfirm(dropRec);\n                if (dropRec) {\n                    await me.moveEventTo(drag, dropRec);\n                    // If dragging between zones, and the zones have been configured with specific, different\n                    // resources, then this drag is also a reallocation of resource.\n                    if (isReassign) {\n                        // Assign to new resource first, so that it never drops to zero assignments\n                        // because that can cause the eventRecord to exit the Project.\n                        dropRec.assign(toResource);\n                        dropRec.unassign(fromResource);\n                    }\n                    // Dragging between different views, ensure dropped event is focused\n                    if (interView && me.owner.client.activeView.eachView) {\n                        view.refresh();\n                        view.getEventElement(dropRec, dropRec.startDate)?.focus();\n                    }\n                }\n            }\n            await view.project.commitAsync();\n        });\n    }\n    async finishDropResize(drag, owner, eventRecord, eventStore, validation, triggerFn) {\n        const\n            me           = this,\n            { view }     = me;\n        /**\n         * This event fires on the owning Calendar before a drag resize gesture is completed. Return `false` to immediately veto the operation\n         * or a Promise yielding `true` or `false` for async vetoing.\n         * @event beforeDragResizeEnd\n         * @preventable\n         * @on-owner\n         * @async\n         * @param {Calendar.view.Calendar} source The Calendar instance that fired the event.\n         * @param {Core.util.drag.DragContext} drag The drag create context.\n         * @param {Event} event The browser event.\n         * @param {Scheduler.model.EventModel} eventRecord The `EventModel` record that has not yet been updated in the store.\n         * @param {Date} newStartDate The new start date.\n         * @param {Date} newEndDate The new end date.\n         * @param {Calendar.feature.CalendarDrag} feature The Calendar drag feature instance.\n         * @param {Boolean|ValidateCreateResult} validation The result of the {@link #config-validateResizeFn} if one\n         * was provided.\n         * @param {Core.widget.Widget} view The Calendar widget in which the drag completed.\n         */\n        /**\n         * This event fires on the owning Calendar when a drag resize gesture is completed.\n         * @event dragResizeEnd\n         * @on-owner\n         * @param {Calendar.view.Calendar} source The Calendar instance that fired the event.\n         * @param {Core.util.drag.DragContext} drag The drag create context.\n         * @param {Event} event The browser event.\n         * @param {Scheduler.model.EventModel} eventRecord The updated `EventModel` record.\n         * @param {Calendar.feature.CalendarDrag} feature The Calendar drag feature instance.\n         * @param {Boolean|ValidateCreateResult} validation The result of the {@link #config-validateResizeFn} if one\n         * was provided.\n         * @param {Core.widget.Widget} view The Calendar widget in which the drag completed.\n         */\n        await triggerFn('dragResizeEnd', async() => {\n            let { eventRecord : editRec } = await drag.get('eventSourceHit');\n            editRec = await this.finishDropConfirm(editRec);\n            editRec && editRec.set({\n                startDate : eventRecord.startDate,\n                endDate   : eventRecord.endDate,\n                duration  : DH.diff(eventRecord.startDate, eventRecord.endDate, editRec.durationUnit)\n            });\n            await view.project.commitAsync();\n        });\n    }\n    async finishDropConfirm(eventRecord) {\n        if (eventRecord.isOccurrence || eventRecord.isRecurring) {\n            return new Promise(resolve => {\n                const dialog = new RecurrenceConfirmationPopup({\n                    owner : this.owner\n                });\n                dialog.confirm({\n                    actionType : 'update',\n                    eventRecord,\n                    cancelFn() {\n                        resolve(null);\n                    },\n                    changerFn(eventRec) {\n                        resolve(eventRec);\n                    }\n                });\n            });\n        }\n        return eventRecord;\n    }\n    async moveEventTo(drag, eventRecord) {\n        const me = this;\n        let date = me.view.getDateFromElement(drag.targetElement);\n        // If we were not dragging an unscheduled event (for example from an external source)\n        // then copy in its time values.\n        if (eventRecord.startDate) {\n            date = DH.copyTimeValues(me.clearTime(date), eventRecord.startDate);\n        }\n        date = me.applyDragOffset(date, drag);\n        // If it's being movedTo from another store, and it was unscheduled originally...\n        if (!me.view.eventStore.getByInternalId(eventRecord.internalId) && !eventRecord.startDate) {\n            const autoCreate = drag.target.view.autoCreate || me.owner.client.autoCreate;\n            // Move to the autoCreate time if we can find an autoCreate config to give us a hint.\n            date.setHours(autoCreate?.startHour || 8);\n        }\n        await me.setStartDate(eventRecord, date);\n    }\n    pickDropTarget(drag) {\n        let hit = this.hitTest(drag);\n        if (!hit && this.isResizing) {\n            hit = this.hit;\n        }\n        return hit?.date ? hit : null;\n    }\n    setStartDate(eventRecord, date) {\n        return eventRecord.set({\n            startDate : date,\n            endDate   : DH.add(date, this.eventRecord.fullDuration)\n        });\n    }\n    // Hoverable\n    getHoverHandleCls(other) {\n        return other ? '' : 'b-gripper-vert';\n    }\n    hoverEnter() {\n        const\n            me          = this,\n            hit         = me.hitTest(me.hoverTarget),\n            { gripper } = me.owner,\n            cls         = me.getHoverHandleCls(),\n            otherCls    = me.getHoverHandleCls(true);\n        otherCls && gripper.classList.remove(otherCls);\n        if (hit?.eventRecord?.resizable !== false && !hit?.eventRecord?.readOnly) {\n            cls && gripper.classList.add(cls);\n            me.hoverTarget.appendChild(gripper);\n        }\n    }\n    hoverLeave(leaving) {\n        const\n            me          = this,\n            { gripper } = me.owner,\n            cls         = me.getHoverHandleCls();\n        // We may have 2 hoverable zones each grabbing our shared gripper element, so check if we are the current\n        // owner and only cleanup if we are:\n        if (gripper.parentNode === leaving) {\n            cls && gripper.classList.remove(cls);\n            leaving.removeChild(gripper);\n        }\n    }\n    // Misc\n    applyDragOffset(date, drag) {\n        const eventOffset = drag.peek('eventOffset');\n        if (date && eventOffset?.[0]) {\n            if (drag.source.constructor === drag.target?.constructor) {\n                date = DH.add(date, -eventOffset[0], eventOffset[1]);\n            }\n        }\n        return date;\n    }\n    hitTest(at) {\n        const\n            me            = this,\n            isDragContext = at?.isDragContext,\n            event         = isDragContext ? at.event : at,\n            target        = (isDragContext && at.targetElement) || DomHelper.getEventElement(event);\n        let src = me.view,\n            hit = null,\n            edge, wrapEl;\n        if (target) {\n            if (!src.calendarHitTest) {\n                src = me.owner.client;\n            }\n            const horizontalStartEdge = src.rtl ? 'right' : 'left';\n            hit = src.calendarHitTest(target);\n            if (hit) {\n                hit.eventWrap = wrapEl = target.closest('.b-cal-event-wrap');\n                if (target.classList.contains('b-gripper')) {\n                    hit = {\n                        type        : 'resize',\n                        cell        : hit.cell,\n                        date        : hit.date,\n                        edge        : edge = {},\n                        eventRecord : hit.eventRecord,\n                        resource    : hit.resource,\n                        eventWrap   : wrapEl,\n                        gripper     : target,\n                        view        : hit.view\n                    };\n                    DomClassList.normalize(wrapEl.className, 'array').forEach(c => {\n                        c = edgeRe.exec(c);\n                        c && (edge[c[1]] = true);\n                    });\n                    hit.atEnd = !(edge.top || edge[horizontalStartEdge]);\n                }\n                else if (!hit.eventRecord) {\n                    wrapEl = null;\n                }\n                if (wrapEl) {\n                    hit.eventTop = wrapEl.style.top;\n                }\n                if (target !== event) {\n                    hit.date = me.getDateFromPosition(event.clientX, event.clientY) || hit.date;\n                }\n            }\n        }\n        return hit;\n    }\n    renderEvent(eventRecord, first, last) {\n        const { view } = this;\n        // Make the DOM reflect the view's defaultCalendar.\n        // We cannot assign in the normal way when the event is not part of a project\n        // so we need to override the assigned property just while we create the DOM.\n        Object.defineProperty(eventRecord, 'assigned', this.assignmentsProperty);\n        // If we are moving into a view which only renders inter-day events\n        // Set the cell info block's isAllDay flag.\n        const dom = view.createEventDomConfig({\n            eventRecord,\n            isAllDay : isAllDayView[view.type]\n        });\n        dom.className['b-cal-tentative-event'] = 1;\n        dom.className['b-cal-tentative-event-first'] = first;\n        dom.className['b-cal-tentative-event-last'] = last;\n        // Now we can remove the temp resource property getter\n        delete eventRecord.assigned;\n        if (last) {\n            const { footer } = this.owner;\n            if (footer) {\n                appendEventFooter(dom, ObjectHelper.assign({\n                    html : DH.format(eventRecord.endDate, view.timeFormat)\n                }, footer));\n            }\n        }\n        return dom;\n    }\n    setEventData(data, creating) {\n        const\n            me                      = this,\n            { eventRecord, view }   = me,\n            { duration, startDate } = data;\n        if (startDate && duration != null && !data.endDate) {\n            data = {\n                ...data,\n                endDate : DH.add(startDate, duration, eventRecord.durationUnit)\n            };\n        }\n        eventRecord.set(data);\n        // Honour the view's view on what constitutes a short event\n        if (me.eventDom) {\n            me.eventDom.className[view.shortEventCls] = eventRecord.durationMS <= view.shortEventDuration;\n        }\n        else {\n            if (creating) {\n                let { newName } = me.owner;\n                if (typeof newName === 'function') {\n                    newName = newName(eventRecord);\n                }\n                eventRecord.set('name', newName);\n            }\n            me.eventDom = me.renderEvent(eventRecord);\n        }\n    }\n    setupEvent(data, creating) {\n        const\n            me           = this,\n            { owner }    = me,\n            {\n                defaultCalendar,\n                eventStore\n            }            = me.view,\n            { tooltip }  = owner,\n            eventRecord  = me.eventRecord = owner.eventRecord = eventStore.createRecord({\n                // must pass empty object for CalendarStores hook of createRecord() to set resourceId\n                // and because the data passed is field *names*, not dataSources\n            }),\n            assignments  = creating ? new Set([new eventStore.assignmentStore.modelClass({\n                event    : eventRecord,\n                resource : defaultCalendar\n            })]) : data.assigned;\n        // The assignment Set to be used when calling renderEvent so that a fully correct rendition\n        // taking into account the resource can be applied.\n        me.assignmentsProperty = {\n            configurable : true,\n            value        : assignments\n        };\n        delete data.assigned;\n        me.setEventData(data, creating);\n        // Assign the new event to the EventStore's default calendar\n        if (me.isCreating && defaultCalendar) {\n            eventStore.assignmentStore.assignEventToResource(eventRecord, defaultCalendar);\n        }\n        const { eventDom } = me;\n        eventDom.className[tentativeCls] = 1;\n        if (!me.noTip && !tooltip.disabled && me.dragging?.has('eventCreate')) {\n            tooltip.eventRecord = eventRecord;\n            tooltip.recurrenceHint = (creating && me.recurrable) ? owner.recurrenceTip : '';\n            me.dragProxy.tooltip = tooltip;\n        }\n        return eventDom;\n    }\n    startCreate(date) {\n        this.createEvent({\n            allDay       : true,\n            startDate    : date,\n            durationUnit : this.durationUnit,\n            endDate      : DH.add(date, 1, 'd')\n        });\n    }\n    get durationUnit() {\n        // Use view's dragUnit unless it's been configure away, then use the CalendarDrag class's default\n        return this.view.dragUnit || this.owner.durationUnit;\n    }\n    startMove(eventRecord) {\n        const\n            me      = this,\n            data    = ObjectHelper.clone(eventRecord.dataByFieldName),\n            drag    = me.dropping,\n            { hit } = me,\n            // prefer the resource color of the drop and fallback to the drag\n            color   = hit?.resource?.eventColor ?? drag.peek('resource')?.eventColor;\n        if (color && !data.eventColor) {\n            data.eventColor = color;\n        }\n        // Include the Set of assignments in the data for the tentative event\n        data.assigned = eventRecord.assigned;\n        // If an unscheduled event is grabbed (for example from an external source),\n        // we have to normalize it according to current pointer context in order\n        // for the view's createEventDomConfig to be able to process it to create\n        // our drop indicator.\n        if (!data.startDate) {\n            data.startDate = hit?.date || new Date();\n            data.endDate = DH.add(data.startDate, eventRecord.duration || 1, eventRecord.durationUnit || 'h');\n        }\n        // Dragging must always know its resource\n        if (hit?.resource) {\n            data.resourceId = hit.resource.id;\n        }\n        if (!data.resourceId) {\n            data.resourceId = drag.peek('resourceId') || me.owner.client?.defaultCalendarId;\n        }\n        // So as not to have duplicate data-event-id=\"eventId\" nodes in the DOM.\n        delete data.id;\n        me.setupEvent(data);\n    }\n    startResize(eventHit) {\n        const\n            { eventRecord } = eventHit,\n            data            = eventRecord.data;\n        this.createEvent({\n            ...data,\n            id             : `dragResize-event-${data.id}`,\n            eventColor     : data.eventColor || eventRecord.resource?.eventColor,\n            recurrenceRule : null,\n            realEventId    : data.id\n        });\n    }\n    // Configs\n    configureListeners(drag) {\n        const listeners = super.configureListeners(drag);\n        // Listen to the events on the root element\n        listeners.element = this.view.rootElement;\n        return listeners;\n    }\n    updateHit(hit) {\n        const\n            me   = this,\n            drag = me.dropping,\n            mode = hit && drag[eventDragSym];\n        if (hit) {\n            if (me.isMoving) {\n                me.dropHitMove(drag, hit, drag.peek('eventRecord'));\n            }\n            else if (mode?.create) {\n                me.dropHitCreate(drag, hit, drag.peek('eventCreate'));\n            }\n            else if (mode?.resize) {\n                me.dropHitResize(drag, hit, drag.peek('eventSourceHit'));\n            }\n        }\n        else {\n            me.dropHitNowhere(drag);\n        }\n    }\n    updateDays(days) {\n        const\n            me                                     = this,\n            { calendarCells, eventDom, dayValues } = me,\n            newDayValues                           = calendarCells && {};\n        let first = true,\n            cell, date, dayValue, i, lastCell;\n        me.dayValues = newDayValues;\n        if (calendarCells && eventDom) {\n            for (i = 0; i < calendarCells.length; ++i) {\n                cell = calendarCells[i];\n                if (days?.includes(cell.dataset.date)) {\n                    lastCell = cell;\n                }\n            }\n            for (i = 0; i < calendarCells.length; ++i) {\n                cell = calendarCells[i];\n                date = cell.dataset.date;\n                if (days?.includes(date)) {\n                    if (!(dayValue = dayValues?.[date])) {\n                        dayValue = me.includeDay(date, cell, first, cell === lastCell) || true;\n                        first = false;\n                    }\n                    else {\n                        delete dayValues[date];\n                    }\n                    newDayValues[date] = dayValue;\n                }\n            }\n            if (dayValues) {\n                const cleanDom = () => {\n                    for (i in dayValues) {\n                        me.removeDay(i, dayValues[i], me.isCreating);\n                    }\n                };\n                // If creating, and we're not aborted, remove the drag coverage after the\n                // refresh has happened so there's no apparent blink when the coverage is removed.\n                if (!days && me.isCreating && !me.dragging.aborted) {\n                    // Clean the dom when the refresh is done. Wait for a max of 100ms for an upcoming\n                    // refresh before going ahead anyway.\n                    me.view.afterRefresh(cleanDom);\n                }\n                else {\n                    cleanDom();\n                }\n            }\n        }\n    }\n    updateEventRecord(record) {\n        this.owner.eventRecord = record;\n    }\n    updateOverflow(value, instance) {\n        if (!value && instance) {\n            instance.destroy();\n        }\n        return value;\n    }\n    updateOwner(owner) {\n        this.hoverIgnoreElement = owner?.gripper;\n    }\n    updateRootElement(rootEl) {\n        const me = this;\n        me.dragRootElement = rootEl;\n        me.dropRootElement = me.droppable ? rootEl : null;\n        me.hoverRootElement = me.hoverable ? rootEl : null;\n    }\n    updateView(view, was) {\n        super.updateView(view, was);\n        const me = this;\n        me.rootElement = view ? me.findRootElement(view) : null;\n        me._overflowDetacher?.();\n        // Only listen for overflow popup being shown if the view itself offers the event.\n        // We must not listen to the relayed version from the owning DayView of a CalendarRow\n        // otherwise we'd end up with a DayZone owning a duplicate OverflowZone in addition\n        // to the AllDayZone.\n        if (view?.isDayCellRenderer) {\n            me._overflowDetacher = view.ion({\n                thisObj           : me,\n                showOverflowPopup : 'onShowOverflowPopup'\n            });\n        }\n    }\n}\nZone.prototype._eventRecord = null;\n//====================================================================================================\n// DayView\nclass BaseDayZone extends Zone {\n    static get $name() {\n        return 'BaseDayZone';\n    }\n    static get configurable() {\n        return {\n            hoverSelector : '.b-cal-event-wrap',\n            draggingClsSelector : '.b-dayview-content'\n        };\n    }\n    getHoverHandleCls(other) {\n        let vert = this.isAllDayZone;\n        if (other) {\n            vert = !vert;\n        }\n        return `b-gripper-${vert ? 'vert' : 'horz'}`;\n    }\n}\n//-------------------------------------------------------------------------\nclass AllDayZone extends BaseDayZone {\n    static get $name() {\n        return 'AllDayZone';\n    }\n    static get configurable() {\n        return {\n            hoverEdges : 'lr'\n        };\n    }\n    // Drag handling\n    dragEnter(drag) {\n        // If there's no space in which to display the drop indicator,\n        // temporarily expand the gutter to allow for appearance of the drop indicator.\n        if (!this.view.eventsPerCell) {\n            this.view.expandGutter();\n        }\n        return super.dragEnter(drag);\n    }\n    dragLeave(drag) {\n        this.view.collapseGutter();\n        super.dragLeave(drag);\n    }\n    captureDragOffset(eventRecord, hit, drag) {\n        drag.set('eventOffset', [\n            Math.max(Math.floor(DH.diff(eventRecord.startDate, hit.date, 'd')), 0),\n            'd'\n        ]);\n    }\n    // Drop handling\n    dropHitCreate(drag, hit, dragFrom) {\n        let endDate   = this.clearTime(hit.date),\n            startDate = this.clearTime(dragFrom.date);\n        if (endDate < startDate) {\n            [startDate, endDate] = [endDate, startDate];\n        }\n        // Update the final duration in the units the view created the record with.\n        this.setEventData({\n            startDate,\n            duration : DH.as(this.eventRecord.durationUnit, DH.diff(startDate, endDate, 'd') + 1, 'd')\n        });\n    }\n    async moveEventTo(drag, dropRec) {\n        const\n            me      = this,\n            hit     = me.hitTest(drag),\n            date    = me.applyDragOffset(hit?.date, drag),\n            newDate = new Date(dropRec.startDate);\n        if (date) {\n            // We're only changing the date component of the time.\n            // Not the time of day that the event started at.\n            newDate.setFullYear(date.getFullYear());\n            newDate.setMonth(date.getMonth());\n            newDate.setDate(date.getDate());\n            // If the event does not belong in the all day zone, i.e. it's not day-spanning\n            // and does not have the allDay flag set, then set the allDay flag\n            if (me.view.dayTime.startShift) {\n                newDate.setHours(date.getHours());\n                newDate.setMinutes(date.getMinutes());\n                newDate.setSeconds(date.getSeconds());\n                dropRec.duration = 1;\n            }\n            else {\n                if (!me.view.isAllDayEvent(dropRec)) {\n                    dropRec.allDay = true;\n                }\n            }\n            await me.setStartDate(dropRec, newDate);\n        }\n    }\n    // Misc\n    setEventData(data, creating) {\n        super.setEventData(data, creating);\n        const\n            me = this,\n            { eventRecord } = me;\n        const { startDate, endDate } = eventRecord;\n        if (creating && !me.view.dayTime.startShift) {\n            eventRecord.allDay = true;\n        }\n        me.days = me.makeDays(startDate, endDate);\n    }\n    // Configs\n    updateDays(days) {\n        const me = this;\n        let { eventEl } = me;\n        if (days?.length) {\n            if (!eventEl) {\n                me.eventEl = eventEl = DomHelper.createElement({\n                    ...me.eventDom\n                });\n                eventEl.classList.add('b-allday');\n            }\n            const\n                { dropRootElement } = me,\n                { visibleCellSelector, weekLength } = me.view,\n                eventTop = me.dragging?.peek('eventSourceHit')?.eventTop,\n                cells = DomHelper.children(dropRootElement, visibleCellSelector),\n                cell = DomHelper.down(dropRootElement, `${visibleCellSelector}[data-date='${days[days.length - 1]}']`);\n            // The one event element lives in the startDate cell, or the resource sub cell\n            // of the startdate cell.\n            DomHelper.down(cell, '.b-cal-event-bar-container').appendChild(eventEl);\n            eventEl.style[me.view.rtl ? 'right' : 'left'] = DomHelper.percentify(100 * (cells.indexOf(cell) - days.length + 1) / weekLength);\n            eventEl.style.width = DomHelper.percentify(100 * days.length / weekLength);\n            if (eventTop) {\n                eventEl.style.top = eventTop;\n            }\n            // Ensure element is in view in case it's scrolled, and we are dragging\n            // an interday event in the main day part.\n            me.view.scrollable.scrollIntoView(eventEl, true);\n        }\n        else if (eventEl) {\n            if (eventEl.classList.contains('b-cal-tentative-event')) {\n                eventEl.remove();\n            }\n            me.eventEl = null;\n        }\n    }\n    updateView(view, was) {\n        if (view) {\n            const multiDay = DH.diff(view.startDate, view.endDate, 'd') > 1;\n            this.hoverable = multiDay;\n            this.draggable = multiDay || this.view.owner.isDayView;\n        }\n        super.updateView(view, was);\n    }\n}\n//-------------------------------------------------------------------------\nclass DayZone extends BaseDayZone {\n    static get $name() {\n        return 'DayZone';\n    }\n    static get configurable() {\n        return {\n            dragEventId : null,\n            hoverable  : true,\n            hoverEdges : 'tb',\n            times : {\n                $config : {\n                    equal : 'array'\n                },\n                value : null\n            },\n            alDayZoneClass : AllDayZone,\n            // When dragging events, configure the DayZone with constrainToDay : true\n            // to prevent dragging events so that they cross the day start or end boundaries.\n            constrainToDay : false\n        };\n    }\n    construct(...args) {\n        super.construct(...args);\n        const\n            me               = this,\n            { allDayEvents } = me.view;\n        if (allDayEvents) {\n            me.allDayZone = new me.alDayZoneClass({\n                active   : me.active,\n                owner    : me.owner,\n                view     : allDayEvents,\n                resource : me.resource\n            });\n        }\n    }\n    syncDraggingElements(eventId, active) {\n        const\n            { dragging : drag } = this,\n            { draggingItemCls } = drag.source,\n            containerEl         = drag.itemElement.closest('.b-dayview-day-container'),\n            elements            = containerEl?.querySelectorAll(`[data-event-id=\"${eventId}\"]`) ?? [];\n        for (const el of elements) {\n            el.classList.toggle(draggingItemCls, active);\n        }\n    }\n    hitTest(at) {\n        const\n            { view }    = this,\n            { dayTime } = view,\n            hit         = super.hitTest(at);\n        // Cache the the main date for the column we are over.\n        // This is used later in applyDragOffset to constrain the exact datetime to within that date\n        if (hit) {\n            hit.overDate = at?.isDragContext ? view.getDateFromPosition(at.event.clientX, Rectangle.fromScreen(view.dayContainerElement).y, false, dayTime) : dayTime.startOfDay(hit.date);\n        }\n        return hit;\n    }\n    updateDragEventId(eventId, previousEventId) {\n        previousEventId && this.syncDraggingElements(previousEventId, false);\n        eventId && this.syncDraggingElements(eventId, true);\n    }\n    get eventRecord() {\n        return super.eventRecord || this.allDayZone?.eventRecord;\n    }\n    set eventRecord(value) {\n        super.eventRecord = value;\n    }\n    get recurring() {\n        return this.isCreating && this.eventRecord?.recurrenceRule != null;\n    }\n    get droppingAllDay() {\n        const eventRecord = this.dropping?.peek('eventRecord');\n        return eventRecord?.startDate && this.view?.isAllDayEvent(eventRecord) || false;\n    }\n    get useAllDay() {\n        // when an allDay event is being dropping on the hourly part of the day view, relay that to the allDayZone\n        // if it is from an outsider (we want to retain the allDay nature of the event). If it is from _our_ allDayZone,\n        // then the goal is to move it from allDay to not allDay.\n        return this.droppingAllDay && this.view.showAllDayHeader && this.dropping.source !== this.allDayZone;\n    }\n    get wasAllDay() {\n        // when an allDay event is being dropping on the hourly part of the day view, relay that to the allDayZone\n        // if it is from an outsider (we want to retain the allDay nature of the event). If it is from _our_ allDayZone,\n        // then the goal is to move it from allDay to not allDay.\n        return this.droppingAllDay && this.dropping.source === this.allDayZone;\n    }\n    doDestroy() {\n        this.allDayZone?.destroy();\n        super.doDestroy();\n    }\n    dragStart() {\n        super.dragStart();\n        this.dragEventId = this.dragging.peek('eventRecord')?.id ?? null;\n    }\n    findRootElement(view) {\n        return view.eventContentElement;\n    }\n    // Drag handling\n    captureDragOffset(eventRecord, hit, drag) {\n        drag.set('eventOffset', [\n            Math.floor(DH.diff(eventRecord.startDate, hit.date, 'm')),\n            'm'\n        ]);\n    }\n    cleanupDrag() {\n        this.dragEventId = null;\n        super.cleanupDrag();\n        this.allDayZone?.cleanupDrag();\n    }\n    // Drop handling\n    cleanupDrop() {\n        super.cleanupDrop();\n        // Stop monitoring early. With polyfilled resize monitor scroll event\n        // will fire too soon when eventRecord is nullified but monitor is not stopped\n        this.owner.client?.scrollManager?.stopMonitoring();\n        this.allDayZone?.cleanupDrop();\n    }\n    dropHitCreate(drag, hit) {\n        const\n            me               = this,\n            { durationUnit } = me.eventRecord;\n        let endTime   = hit.date,\n            startTime = drag.peek('eventCreate').date,\n            endDate   = endTime,\n            startDate = startTime,\n            duration, recurrenceCount;\n        const\n            sameDay   = !(me.clearTime(startTime) - me.clearTime(endTime)),\n            recurring = drag.ctrlKey && !sameDay;\n        if (recurring || sameDay) {\n            endDate = me.clearTime(endTime);\n            startDate = me.clearTime(startTime);\n            // Now these are just milliseconds from midnight (note: Date - Date = millis):\n            startTime = startTime - startDate;\n            endTime = endTime - endDate;\n            if (endDate < startDate) {\n                [startDate, endDate] = [endDate, startDate];\n            }\n            if (endTime < startTime) {\n                [startTime, endTime] = [endTime, startTime];\n            }\n            startDate.setTime(startDate.getTime() + startTime);\n            // Convert the millisecond value of the duration to the event record\n            duration = DH.as(durationUnit, Math.max(me.view.increment, Math.floor(endTime - startTime)));\n            if (recurring) {\n                recurrenceCount = DH.diff(me.clearTime(startDate), me.clearTime(endDate), 'd') + 1;\n            }\n        }\n        else {\n            if (endDate < startDate) {\n                [startDate, endDate] = [endDate, startDate];\n            }\n            // Convert the millisecond value of the duration to the event record\n            duration = DH.as(durationUnit, Math.floor((endDate - startDate) / MINUTES), 'm');\n        }\n        me.setEventData({\n            startDate,\n            duration,\n            recurrenceRule : recurring ? `FREQ=DAILY;COUNT=${recurrenceCount}` : null\n        });\n    }\n    dropHitMove(drag, hit, eventRecord) {\n        let startDate = hit.date;\n        const\n            me       = this,\n            { view } = me,\n            dayStart = view.dayTime.startOfDay(startDate);\n        if (me.useAllDay) {\n            me.allDayZone.dropHitMove(drag, hit, eventRecord);\n        }\n        else {\n            // use the internal eventRecord since it may have a different durationUnit when dragging between allDay\n            // and non-allDay:\n            eventRecord = me.eventRecord;\n            startDate = me.applyDragOffset(startDate, drag);\n            // Dragging in a DayView must not allow dragging above \"midnight\", otherwise the drop indicator will\n            // become what looks like a 2 day event in the all day header.\n            if (view.showAllDayHeader && startDate < dayStart) {\n                startDate = dayStart;\n            }\n            me.setEventData({\n                startDate,\n                endDate  : DH.add(startDate, eventRecord.duration, eventRecord.durationUnit),\n                duration : eventRecord.duration\n            });\n        }\n    }\n    applyDragOffset(date, drag) {\n        let result = super.applyDragOffset(date, drag);\n        // If we're not using an all day row, constrain the event to within the day\n        if (this.constrainToDay) {\n            const { overDate } = this.hit;\n            result = new Date(\n                Math.max(\n                    Math.min(result, overDate.getTime() + this.view.dayTime.timeEnd - this.eventRecord.durationMS),\n                    overDate\n                )\n            );\n        }\n        return result;\n    }\n    dropHitResize(drag, hit, eventHit) {\n        const\n            me              = this,\n            { eventRecord } = me,\n            date            = hit.date;\n        if (eventHit.atEnd) {\n            if (eventRecord.startDate < date) {\n                me.setEventData({\n                    endDate : date\n                });\n            }\n        }\n        else if (date < eventRecord.endDate) {\n            me.setEventData({\n                startDate : date\n            });\n        }\n    }\n    async moveEventTo(drag, dropRec) {\n        const\n            me   = this,\n            hit  = me.hitTest(drag),\n            date = hit?.date;\n        if (date) {\n            if (me.useAllDay) {\n                await me.allDayZone.moveEventTo(drag, dropRec);\n            }\n            else {\n                if (me.wasAllDay) {\n                    dropRec.allDay = false;\n                }\n                await me.setStartDate(dropRec, me.applyDragOffset(date, drag));\n            }\n        }\n    }\n    startCreate(date) {\n        this.createEvent({\n            duration     : 0,\n            durationUnit : this.durationUnit,\n            startDate    : date,\n            // It's only a provisional event until gesture is completed (possibly longer if an editor dialog is shown after)\n            isCreating : true\n        });\n    }\n    // Misc\n    includeDay(date, cell, first, last) {\n        return DomHelper.createElement({\n            parent : cell.querySelector('.b-dayview-event-container'),\n            ...this.renderEvent(this.eventRecord, first, last)\n        });\n    }\n    removeDay(date, value) {\n        if (value.classList.contains('b-cal-tentative-event')) {\n            value.remove();\n        }\n    }\n    setEventData(data, creating) {\n        const me = this;\n        if (me.useAllDay) {\n            me.allDayZone.setEventData(data, creating);\n            return;\n        }\n        super.setEventData(data, creating);\n        const\n            { eventRecord } = me,\n            { endDate, startDate } = eventRecord,\n            { dayTime } = me.view;\n        let lastDate = endDate;\n        if (me.recurring) {\n            // odd thing here... the way \"days\" works is inclusive endDate (because of events that start/stop in the\n            // same day), so we need the \"-1\":\n            lastDate = DH.add(lastDate, eventRecord.recurrence.count - 1, 'd');\n        }\n        me.days = me.makeDays(startDate, lastDate);  // updates rendered events for these days\n        me.times = [\n            dayTime.delta(startDate, 's'),\n            dayTime.delta(endDate, 's')\n        ];\n    }\n    setupEvent(data, creating) {\n        const me = this;\n        if (me.useAllDay) {\n            me.allDayZone.setupEvent(data, creating);\n        }\n        else {\n            if (this.wasAllDay) {\n                data.allDay = false;\n                data.endDate = DH.add(data.startDate, data.duration = 1, data.durationUnit = 'hour');\n            }\n            super.setupEvent(data, creating);\n        }\n    }\n    // Configs\n    updateDays(days, was) {\n        super.updateDays(days, was);\n        this.updateTimes(this.times, null);\n    }\n    updateTimes(times) {\n        if (!times) {\n            return;\n        }\n        const\n            me = this,\n            { allDayZone, dayValues, dragging, eventRecord, recurring, view } = me,\n            { dayTime, eventSpacing } = view,\n            insetProp   = view.rtl ? 'right' : 'left',\n            { endDate, startDate } = eventRecord,\n            [startOffset, endOffset] = times,\n            // drag move can come from outside our calendar, so only consider the eventWidth if we are the one doing\n            // the dragging:\n            eventInset  = !dragging?.aborted && dragging?.peek('eventInset'),\n            eventWidth  = !dragging?.aborted && dragging?.peek('eventWidth'),\n            firstDay    = dayTime.dateKey(startDate),\n            lastDay     = dayTime.dateKey(endDate),\n            multiDay    = dayTime.startOfDay(startDate) < dayTime.startOfDay(endDate),\n            heightScale = 100 / dayTime.duration('s');  // to give us percent when we multiply by this value\n        let { days } = me,\n            date, first, height, style, top;\n        if (!days) {\n            return;\n        }\n        // Since we may not have changed me.days (time of day only changes), we now need to update the vertical\n        // aspect\n        for (date in dayValues) {\n            first  = date === firstDay;\n            style  = dayValues[date].style;\n            top    = startOffset * heightScale;\n            height = (endOffset - startOffset) * heightScale;\n            DomSync.sync({\n                targetElement : dayValues[date],\n                domConfig     : me.renderEvent(me.eventRecord, first, date === days[days.length - 1])\n            });\n            if (!recurring && multiDay) {\n                if (first) {\n                    height = 100 - top;\n                }\n                else if (date === lastDay) {\n                    height = top + height;\n                }\n                else {\n                    height = 100;\n                }\n            }\n            style.top = (recurring || first) ? DomHelper.percentify(top) : 0;\n            style.height = DomHelper.percentify(height);\n            style.paddingBottom = DomHelper.setLength(eventSpacing);\n            if (eventInset) {\n                style[insetProp] = eventInset;\n            }\n            if (eventWidth) {\n                style.width = `${eventWidth}px`;\n            }\n        }\n        // Now sync \"days\" for the allDayZone:\n        if (!days || days.length < 2 || recurring) {\n            allDayZone?.cleanupDrop();\n            days = null;\n        }\n        else if (allDayZone && view.showAllDayHeader) {\n            if (!allDayZone.eventRecord) {\n                allDayZone.noTip = true;\n                allDayZone.createEvent({\n                    startDate : eventRecord.startDate,\n                    endDate   : eventRecord.endDate\n                }, me.dropping);\n            }\n            allDayZone.eventRecord.set({\n                startDate : eventRecord.startDate,\n                endDate   : DH.add(eventRecord.startDate, days.length - 1, 'd')\n            });\n            allDayZone.days = days;\n        }\n    }\n}\nclass ResourceCalendarRowZone extends AllDayZone {\n    static $name = 'ResourceCalendarRowZone';\n    static configurable = {\n        droppableSelector : '.b-calendarrow-cell-container,.b-dayresourcecalendarrow-cell-resources,.b-dayresource-allday.b-cal-cell-header'\n    };\n    // Disable Hoverable behaviour. Resizing is not allowed.\n    // Event bars are discontiguous, so resizing an event across multiple\n    // cells has ambiguous semantics. We just disallow it.\n    // Events in this view may only be *moved*\n    syncHoverListeners() {}\n    beforeDrag(drag) {\n        const hit = this.hitTest(drag);\n        // Resizing and drag-creating not valid in this view.\n        // Event bars are discontiguous, so resizing an event across multiple\n        // cells has ambiguous semantics. We just disallow it.\n        // Events in this view may only be *moved*\n        if (!hit?.resource || hit.type === 'resize' || hit.type === 'schedule') {\n            return false;\n        }\n        return super.beforeDrag(drag);\n    }\n    setupEvent() {\n        this.view.defaultCalendar = (this.dragging || this.dropping).peek('resource');\n        return super.setupEvent(...arguments);\n    }\n    updateHit(hit, was) {\n        if (!hit || hit.resource) {\n            super.updateHit(hit, was);\n        }\n    }\n    makeDays(startDate) {\n        const\n            me           = this,\n            { isMoving } = me,\n            drag         = me.dragging || me.dropping,\n            date         = isMoving ? new Date(Math.max(startDate, me.view.firstVisibleDate)) : drag.peek('date'),\n            result       = super.makeDays(date, DH.add(date, 1, 'd'));\n        // Cannot create or resize across resources\n        result.resource = me.hit?.resource;\n        return result;\n    }\n    updateDays(days) {\n        const me  = this;\n        let { view, eventEl } = me;\n        if (days?.length) {\n            if (!eventEl) {\n                me.eventEl = eventEl = DomHelper.createElement({\n                    ...me.eventDom\n                });\n                eventEl.classList.add('b-allday');\n            }\n            const\n                eventTop = me.dragging?.peek('eventSourceHit')?.eventTop,\n                resourceCell = DomHelper.down(me.dropRootElement,\n                    `${view.visibleCellSelector}:is(${days.map(d => `[data-date=\"${d}\"]`).join(',')}) [data-resource-id=\"${days.resource.id}\"] > .b-cal-event-bar-container`);\n            // The one event element lives in the resource sub cell\n            resourceCell.appendChild(eventEl);\n            eventEl.style.width = '100%';\n            if (eventTop) {\n                eventEl.style.top = eventTop;\n            }\n            // Ensure element is in view in case it's scrolled, and we are dragging\n            // an interday event in the main day part.\n            view.scrollable.scrollIntoView(eventEl, true);\n        }\n        else if (eventEl) {\n            if (eventEl.classList.contains('b-cal-tentative-event')) {\n                eventEl.remove();\n            }\n            me.eventEl = null;\n        }\n    }\n}\nclass DayResourceZone extends DayZone {\n    static $name = 'DayResourceZone';\n    static configurable = {\n        alDayZoneClass : ResourceCalendarRowZone\n    };\n    beforeDrag(drag) {\n        const hit = this.hitTest(drag);\n        if (!hit?.resource) {\n            return false;\n        }\n        return super.beforeDrag(drag);\n    }\n    setupEvent() {\n        this.view.defaultCalendar = (this.dragging || this.dropping).peek('resource');\n        return super.setupEvent(...arguments);\n    }\n    hitTest(at) {\n        const\n            drag   = this.dragging || this.dropping,\n            result = super.hitTest(at);\n        // We never resize of create across resource columns or date columns\n        if (result && drag && !this.isMoving) {\n            const fromDate = drag.peek('date');\n            result.resource = drag.peek('resource');\n            result.date.setDate(fromDate.getDate());\n            result.date.setMonth(fromDate.getMonth());\n            result.date.setFullYear(fromDate.getFullYear());\n        }\n        return result;\n    }\n    updateHit(hit, was) {\n        if (!hit || hit.resource) {\n            super.updateHit(hit, was);\n        }\n    }\n    makeDays(startDate, endDate) {\n        const\n            me           = this,\n            { isMoving } = me,\n            drag         = me.dragging || me.dropping,\n            date         = isMoving ? startDate : drag.peek('date'),\n            result       = super.makeDays(date, DH.add(date, 1, 'd'));\n        // Cannot create or resize across resources\n        result.resource = me.hit?.resource;\n        return result;\n    }\n    updateDays(days) {\n        const me = this;\n        let { eventEl } = me;\n        if (days?.length) {\n            const cell = DomHelper.down(me.dropRootElement,\n                `:is(${days.map(d => `[data-date=\"${d}\"]`).join(',')}) ${me.view.visibleCellSelector}[data-resource-id=\"${days.resource.id}\"] .b-dayview-event-container`);\n            // Dragging in this view never spans cells, so we only need one eventEl\n            if (!eventEl) {\n                me.eventEl = eventEl = DomHelper.createElement({\n                    ...me.eventDom\n                });\n            }\n            cell.appendChild(eventEl);\n        }\n        else if (eventEl) {\n            if (eventEl.classList.contains('b-cal-tentative-event')) {\n                eventEl.remove();\n            }\n            me.eventEl = null;\n        }\n        me._times = null;\n    }\n    updateTimes(times) {\n        if (!times || !this.days) {\n            return;\n        }\n        const\n            me = this,\n            { dayTime, eventSpacing } = me.view,\n            [startOffset, endOffset] = times,\n            heightScale = 100 / dayTime.duration('s'),  // to give us percent when we multiply by this value\n            { style } = me.eventEl,\n            top    = startOffset * heightScale,\n            height = (endOffset - startOffset) * heightScale;\n        DomSync.sync({\n            targetElement : me.eventEl,\n            domConfig     : me.renderEvent(me.eventRecord, true, true)\n        });\n        style.top = DomHelper.percentify(top);\n        style.height = DomHelper.percentify(height);\n        style.paddingBottom = DomHelper.setLength(eventSpacing);\n        style.width = '100%';\n        // We sidestep cross-date drags for now.\n        // No connection into all day zone.\n    }\n}\n//====================================================================================================\n// MonthView\nclass MonthZone extends Zone {\n    static get $name() {\n        return 'MonthZone';\n    }\n    static get configurable() {\n        return {\n            coverage : {\n                $config : {\n                    equal : ObjectHelper.isEqual\n                },\n                value : null\n            },\n            hoverable     : true,\n            hoverEdges    : 'lr',\n            hoverSelector : '.b-cal-event-wrap.b-allday'\n        };\n    }\n    findRootElement(view) {\n        return view.weeksElement;\n    }\n    // Drag handling\n    captureDragOffset(eventRecord, hit, drag) {\n        drag.set('eventOffset', [\n            Math.floor(DH.diff(this.clearTime(eventRecord.startDate), hit.date, 'd')),\n            'd'\n        ]);\n    }\n    cleanupDrag() {\n        super.cleanupDrag();\n        const cleanDom = () => this.coverage = null;\n        // Delay removal of the coverage element slightly if creating so that the refresh\n        // will happen first and the event element will not appear to blink.\n        if (this.isCreating) {\n            // Wait for a max of 100ms for a refresh to occur before cleaning the DOM\n            this.view.afterRefresh(cleanDom);\n        }\n        else {\n            cleanDom();\n        }\n    }\n    // Drop handling\n    cleanupDrop() {\n        super.cleanupDrop();\n        // Stop monitoring early. With polyfilled resize monitor scroll event\n        // will fire too soon when eventRecord is nullified but monitor is not stopped\n        this.owner.client?.scrollManager?.stopMonitoring();\n        const cleanDom = () => this.coverage = null;\n        // Delay removal of the coverage element slightly if creating so that the refresh\n        // will happen first and the event element will not appear to blink.\n        if (this.isCreating) {\n            // Wait for a max of 100ms for a refresh to occur before cleaning the DOM\n            this.view.afterRefresh(cleanDom);\n        }\n        else {\n            cleanDom();\n        }\n    }\n    dropHitCreate(drag, hit) {\n        const\n            me        = this,\n            recurring = drag.ctrlKey,\n            dragFrom  = drag.peek('eventCreate');\n        let recurrenceRule = null,\n            count, day1, day2, endDate, startDate, week1, week2;\n        endDate = me.clearTime(hit.date);\n        startDate = me.clearTime(dragFrom.date);\n        day1 = dragFrom.dayNumber;\n        day2 = hit.dayNumber;\n        week1 = dragFrom.weekOffset;\n        week2 = hit.weekOffset;\n        if (week2 < week1) {\n            [week1, week2] = [week2, week1];\n        }\n        /*\n         +-----+-----+-----+-----+-----+-----+-----+\n         |  S  |  M  |  Tu |  W  |  Th |  F  |  S  |\n         +-----+-----+-----+-----+-----+-----+-----+\n         |     |  B  |     |  A  |     |  C  |     |\n         +-----+-----+-----+-----+-----+-----+-----+\n         |     |     |     |     |     |     |     |\n         +-----+-----+-----+-----+-----+-----+-----+\n         |     |  D  |     |  x  |     |  E  |     |\n         +-----+-----+-----+-----+-----+-----+-----+\n         |     |     |     |     |     |     |     |\n         +-----+-----+-----+-----+-----+-----+-----+\n         |     |  F  |     |  G  |     |  H  |     |\n         +-----+-----+-----+-----+-----+-----+-----+\n         startDate   day1\n         A   > endDate   = day2\n         B   > endDate   > day2\n         C   > endDate   < day2\n         D   > endDate   > day2\n         E   < endDate   < day2\n         F   < endDate   > day2\n         G   < endDate   = day2\n         H   < endDate   < day2\n         */\n        if (recurring) {\n            // In this mode, the interval [day1, day2] is used to draw the days of the week for each week, so it\n            // must be that day1 <= day2.\n            count = week2 - week1 + 1;\n            recurrenceRule = (count > 1) ? `FREQ=WEEKLY;COUNT=${count}` : null;\n            if (endDate < startDate) {  // if (A, B, C or D)\n                startDate = endDate;  // only startDate matters for recurrence...\n                if (day1 < day2) {  // if (C)\n                    startDate = DH.add(startDate, day1 - day2, 'd');\n                }\n            }\n            else if (day2 < day1) {  // if (F)\n                startDate = DH.add(startDate, day2 - day1, 'd');\n            }\n            if (day2 < day1) {  // if (B, D or F)\n                [day1, day2] = [day2, day1];\n            }\n        }\n        // In this mode, day1 is the day of week the event starts and day2 is the day of week for the end of the\n        // event, so they must adhere to startDate/endDate.\n        else if (endDate < startDate) {\n            [startDate, endDate] = [endDate, startDate];\n            [day1, day2] = [day2, day1];\n        }\n        me.setEventData({\n            startDate,\n            duration : DH.as(me.eventRecord.durationUnit, (recurring ? day2 - day1 : DH.diff(startDate, endDate, 'd')) + 1, 'd'),\n            recurrenceRule\n        });\n    }\n    dropHitNowhere(drag) {\n        super.dropHitNowhere(drag);\n        this.coverage = null;\n    }\n    // Misc\n    setEventData(data, creating) {\n        super.setEventData(data, creating);\n        const\n            { dropping, eventRecord, view } = this,\n            { visibleCellSelector }         = view,\n            weekEls                         = DomHelper.children(view.weeksElement, '> .b-calendar-week'),\n            coverage                        = {\n                // weekNumber : String[] describing the days for a weekEl (in order of weekEls)\n            },\n            add                             = event => {\n                const { startDate, endDate } = event;\n                for (let cells, cover, k, n, i = 0; i < weekEls.length; ++i) {\n                    cells = DomHelper.children(weekEls[i], visibleCellSelector);  // not immediate descendants\n                    n = cells.length;\n                    // cover is a string w/day numbers for every day that intersects the event 0 to N-1 where N is\n                    // the number of days in the week. Day number 0 is preceded by '<' if the event started before\n                    // the week. Day number N-1 is followed by '>' if the event extends beyond the end of the week.\n                    // Ex: '0123' means the event occurs on the first 4 days of the week.\n                    // Ex: '<012' means the event started in the prior week and occurs on the first 3 days.\n                    cover = '';\n                    for (k = 0; k < n; ++k) {\n                        const\n                            dayStart = view.getDateFromElement(cells[k]),\n                            dayEnd   = DH.add(dayStart, 1, 'd');\n                        if (startDate < dayEnd && dayStart < endDate) {  // if (day intersects event)\n                            if (!k && startDate < dayStart) {\n                                cover = '<';\n                            }\n                            cover += k;  // k is converted to a string since cov is a string\n                            if (k === n - 1 && dayEnd < endDate) {\n                                cover += '>';\n                            }\n                        }\n                    }\n                    if (cover) {\n                        (coverage[i] || (coverage[i] = [])).push(cover);\n                    }\n                }\n            };\n        if (dropping?.has('eventRecord') || !eventRecord.recurrence) {\n            add(eventRecord);\n        }\n        else {\n            eventRecord.recurrence.forEachOccurrence(view.startDate, view.endDate, add);\n        }\n        this.coverage = coverage;\n    }\n    // Configs\n    updateCoverage(coverage) {\n        const\n            me               = this,\n            {\n                dragging,\n                weekValues,\n                view\n            }                = me,\n            { rtl }          = view,\n            {\n                visibleCellSelector\n            }                = view,\n            eventSourceHit   = coverage && dragging?.peek('eventSourceHit'),\n            eventTop         = eventSourceHit?.eventTop,\n            newWeekValues    = {},\n            eventRow         = view.getWeekElementFor(eventSourceHit?.eventElement),\n            { weekElements } = view;\n        let cell, cells, cov, cover, el, eventEl, extL, extR, i, k, weekEl;\n        me.weekValues = newWeekValues;\n        for (i = 0; i < weekElements.length; ++i) {\n            if (!(cover = coverage?.[i])) {\n                continue;\n            }\n            weekEl = weekElements[i];\n            cells = DomHelper.children(weekEl, visibleCellSelector);  // not immediate descendants\n            for (k = 0; k < cover.length; ++k) {\n                // we keep an array of elements for each week in case we need to render some sort of recurrence\n                if (!(eventEl = weekValues?.[i]?.shift())) {\n                    eventEl = DomHelper.createElement(me.eventDom);\n                }\n                (newWeekValues[i] || (newWeekValues[i] = [])).push(eventEl);\n                cov = cover[k];\n                extL = cov.includes('<') ? 1 : 0;\n                extR = cov.includes('>') ? 1 : 0;\n                cov = cov.substr(extL, cov.length - extR - extL);  // remove the < > chars if any\n                eventEl.classList[extL ? 'add' : 'remove']('b-continues-past');\n                eventEl.classList[extR ? 'add' : 'remove']('b-continues-future');\n                eventEl.style[rtl ? 'right' : 'left'] = DomHelper.percentify(100 * Number(cov[0]) / cells.length);\n                eventEl.style.width = DomHelper.percentify(100 * cov.length / cells.length);\n                if (eventTop && weekEl === eventRow) {\n                    eventEl.style.top = eventTop;\n                }\n                // We put the el in the last cell so that it is on top of events for that day and all events on prior\n                // days as well\n                cell = cells[Number(cov[cov.length - 1])];\n                el = DomHelper.down(cell, '.b-cal-event-bar-container');\n                if (el !== eventEl.parentNode) {\n                    el.appendChild(eventEl);\n                }\n            }\n        }\n        if (weekValues) {\n            for (i in weekValues) {\n                weekValues[i].forEach(el => {\n                    if (el.classList.contains('b-cal-tentative-event')) {\n                        el.remove();\n                    }\n                });\n            }\n        }\n    }\n}\n//====================================================================================================\n// OverflowZone\nclass OverflowZone extends Zone {\n    static get $name() {\n        return 'OverflowZone';\n    }\n    static get configurable() {\n        return {\n            droppable : false,\n            dragProxy : {\n                type : 'default',\n                open(drag) {\n                    const\n                        me        = this,\n                        { owner } = drag.source.view,\n                        sourceEl  = drag.element.closest('.b-cal-event-wrap');\n                    if (owner.isYearView) {\n                        me.proxyEl = sourceEl.cloneNode(true);\n                        me.proxyEl.classList.add('b-cal-drag-proxy');\n                        me.proxyEl.style.width = `${sourceEl.offsetWidth}px`;\n                        me.proxyOffset = EventHelper.getClientPoint(drag.startEvent).getDelta(Rectangle.from(sourceEl));\n                        owner.contentElement.appendChild(me.proxyEl);\n                    }\n                },\n                dragMove(drag) {\n                    if (this.proxyEl) {\n                        // Align the proxy to [10, 10] from the pointer\n                        DomHelper.alignTo(this.proxyEl, EventHelper.getClientPoint(drag.event).translate(10, 10), {\n                            align : 't0-t0'\n                        });\n                    }\n                },\n                close() {\n                    this.proxyEl?.remove();\n                }\n            }\n        };\n    }\n    findRootElement(view) {\n        return view.contentElement;\n    }\n    beforeDrag(drag) {\n        const hit = this.hitTest(drag);\n        if (hit?.type !== 'event' || !this.owner.draggable || !hit.eventRecord.isDraggable) {\n            return false;\n        }\n        drag.set('eventRecord', hit.eventRecord);\n        drag.set('eventDragMode', drag[eventDragSym] = modeDescriptor.move.mode);\n    }\n    dragStart() {\n        this.view.hide();\n    }\n}\n//====================================================================================================\n// YearView\nclass YearZone extends Zone {\n    static get $name() {\n        return 'YearZone';\n    }\n    startCreate() {\n        // Overflow popup must hide during YearView drag create.\n        this.view._overflowPopup?.hide();\n        super.startCreate(...arguments);\n    }\n    // Drop handling\n    dragEnter(drag) {\n        const result = super.dragEnter(drag);\n        if (result !== false) {\n            this.view.contentElement.classList.add(this.draggingCls);\n        }\n        return result;\n    }\n    dragLeave(drag) {\n        super.dragLeave(drag);\n        this.view.contentElement.classList.remove(this.draggingCls);\n    }\n    dropHitCreate(drag, hit, dragFrom) {\n        const me = this;\n        let endDate   = me.clearTime(hit.date),\n            startDate = me.clearTime(dragFrom.date);\n        if (endDate < startDate) {\n            [startDate, endDate] = [endDate, startDate];\n        }\n        // Helpful to use the dates because of changing DST across large date ranges\n        me.setEventData({\n            startDate,\n            endDate : DH.add(endDate, 1, 'd')\n        });\n        me.days = me.makeDayRange(startDate, endDate);  // updates cell styles for these days\n    }\n    dropHitMove(drag, hit, eventRecord) {\n        super.dropHitMove(drag, hit, eventRecord);\n        const\n            me      = this,\n            tempRec = me.eventRecord;\n        let { endDate } = tempRec;\n        if (tempRec.allDay) {\n            endDate = DH.add(endDate, -1, 'd');  // switch to inclusive\n        }\n        me.days = me.makeDayRange(tempRec.startDate, endDate);\n    }\n    // Misc\n    includeDay(date) {\n        const els = DomHelper.children(this.view.bodyElement, `[data-date='${date}']`);\n        els.forEach(e => e.classList.add(`b-cal-tentative-event${this.view.hideNonWorkingDays ? ':not(.b-nonworking-day)' : ''}`));\n        return els;\n    }\n    makeDayRange(startDate, endDate) {\n        const days = [];\n        for (let date = startDate; date <= endDate; date = DH.add(date, 1, 'd')) {\n            days.push(DH.format(date, YYYY_MM_DD));\n        }\n        return days;\n    }\n    removeDay(date, els) {\n        els.forEach(e => e.classList.remove('b-cal-tentative-event'));\n    }\n}\n//====================================================================================================\n// ResourceViewZone\nclass ResourceViewZone extends Base {\n    static get configurable() {\n        return {\n            view : null,\n            zones : {\n                $config : ['nullify'],\n                value   : []\n            }\n        };\n    }\n    updateView(view) {\n        // Create sub zones for any already existent views.\n        // If project had static data, they will be generated at config time.\n        view.eachView(view => {\n            this.onResourceViewViewCreate({ view });\n        });\n        // If data is loaded async, they will be created when Resources arrive.\n        view.ion({\n            viewCreate : 'onResourceViewViewCreate',\n            thisObj    : this\n        });\n    }\n    onResourceViewViewCreate({ view }) {\n        const\n            me    = this,\n            {\n                zones,\n                owner\n            }     = me,\n            modes = owner.client.constructor.Modes,\n            type  = owner.getViewZoneType(modes.resolveType(view.type));\n        type && zones.push(owner.createZone(type, {\n            view,\n            resource : view.defaultCalendar\n        }));\n    }\n    changeZones(zones, oldZones) {\n        if (oldZones?.length && !zones) {\n            for (let i = 0, { length } = oldZones; i < length; i++) {\n                oldZones[i].destroy();\n            }\n        }\n        return zones;\n    }\n}\n//----------------------------------------------------------------------------------------------------\n/**\n * Format expected to be returned in a `validateCreateFn`\n *\n * @typedef {Object} ValidateCreateResult\n * @property {Boolean} add Allow adding to store\n * @property {Boolean} edit Allow editor to open\n */\n/**\n * This feature provides drag-based event creation and modification for Calendars. When enabled (which is the default\n * for calendars), the user can do the following via the mouse or touch screen:\n *\n *  - Create events by touching (or pressing the mouse button in) an the empty space and dragging. As the drag\n *    progresses, a tentative event is rendered. On release, the {@link Calendar.feature.EventEdit} feature displays\n *    the event edit dialog to complete the process. This can be disabled via the {@link #config-creatable} config.\n *  - Adjust the start or end times of an event in the day or week views by dragging the top or bottom of an event.\n *    This can be disabled via the {@link #config-resizable} config or the {@link Scheduler.model.mixin.EventModelMixin#field-resizable}\n *    field on a per-event basis.\n *  - Adjust the start or end date of an all-day event in the month view by dragging the left-most or right-most end\n *    of an event. This can be disabled via the {@link #config-resizable} config or the\n *    {@link Scheduler.model.mixin.EventModelMixin#field-resizable} field on a per-event basis.\n *  - Move an event from its current time (in day or week views) or date (in all views except agenda) by dragging the\n *    body of an event. This can be disabled via the {@link #config-draggable} config or via the\n *    {@link Scheduler.model.mixin.EventModelMixin#field-draggable} field on a per-event basis.\n *\n * ```javascript\n *  // change name for events created by drag to \"Event\":\n *  let calendar = new Calendar({\n *      features : {\n *          drag : {\n *              newName : 'Event'\n *          }\n *      }\n *  });\n * ```\n *\n * ## Asynchronous validation of resize, move and create operations\n *\n * You can easily add a confirmation step after an operation to show a dialog to the end user. This is done using the\n * {@link #event-beforeDragMoveEnd}, {@link #event-beforeDragCreateEnd} and {@link #event-beforeDragResizeEnd} events.\n *\n * ```javascript\n *  let calendar = new Calendar({\n *      listeners : {\n *          // Async event listeners allowing you to veto drag operations\n *          beforeDragMoveEnd : async({ eventRecord }) => {\n *               const result = await MessageDialog.confirm({\n *                   title   : 'Please confirm',\n *                   message : 'Is this the start time you wanted?'\n *               });\n *\n *               // Return true to accept the drop or false to reject it\n *               return result === MessageDialog.yesButton;\n *           },\n *           beforeDragResizeEnd : async({ eventRecord }) => {\n *               const result = await MessageDialog.confirm({\n *                   title   : 'Please confirm',\n *                   message : 'Is this the duration you wanted?'\n *               });\n *\n *               // Return true to accept the drop or false to reject it\n *               return result === MessageDialog.yesButton;\n *           },\n *           beforeDragCreateEnd : async({ eventRecord }) => {\n *               const result = await MessageDialog.confirm({\n *                   title   : 'Please confirm',\n *                   message : 'Want to create this event?'\n *               });\n *\n *               // Return true to accept the drop or false to reject it\n *               return result === MessageDialog.yesButton;\n *           }\n *       }\n *  });\n * ```\n *\n * This feature is **enabled** by default.\n *\n * The example below demonstrates configuration of the EventEdit feature and implements validation of\n * drag gestures so that no event interrupts fika from 9:30am to 10:30am.\n *\n * {@inlineexample Calendar/feature/CalendarDrag.js}\n *\n * @extends Calendar/feature/CalendarFeature\n * @classtype drag\n * @feature\n */\nexport default class CalendarDrag extends CalendarFeature {\n    static get $name() {\n        return 'CalendarDrag';\n    }\n    static get type() {\n        return 'drag';\n    }\n    static get configurable() {\n        return {\n            disableOnReadOnly : true,\n            localizableProperties : [\n                'newName',\n                'recurrenceTip'\n            ],\n            /**\n             * Specify `false` to disallow creating events by drag gestures.\n             * @config {Boolean}\n             */\n            creatable : true,\n            /**\n             * Specify `false` to disallow dragging events to new times or days.\n             * @config {Boolean}\n             */\n            draggable : true,\n            /**\n             * The {@link Scheduler.model.EventModel#field-durationUnit} to use when drag-creating events.\n             *\n             * If not specified, the `dragUnit` property of the active view's\n             * {@link Calendar.widget.mixin.CalendarMixin#property-autoCreate} is used.\n             *\n             * For {@link Calendar.widget.DayView}s, this is normally `'hour'`, for views with a granularity\n             * level of one day, the default is `'day'`.\n             * @config {String}\n             */\n            durationUnit : null,\n            /**\n             * A {@link Core.helper.DomHelper#typedef-DomConfig DOM config} object used to create an extra element\n             * during event drag to contain the end time of the tentative event. This element contains the CSS class\n             * `'b-cal-event-footer'` which can be used for styling.\n             *\n             * Set this to `null` to remove the end time rendering during drag operations.\n             * @config {DomConfig}\n             * @default\n             */\n            footer : {\n                className : 'b-cal-event-footer'\n            },\n            /**\n             * This is configured as a {@link Core.helper.DomHelper#function-createElement-static DomHelper}\n             * specification and is promoted to an `HTMLElement` during initialization. This element is moved between\n             * calendar event elements on hover in order to show drag handles on the event under the mouse.\n             * @config {HTMLElement|DomConfig}\n             * @private\n             */\n            gripper : {\n                class : 'b-gripper'\n            },\n            /**\n             * The name of new events or a function to call with the event record that will return the event name.\n             * @config {String|Function}\n             * @returns {String} Name of new event\n             */\n            newName : 'L{newEvent}',\n            /**\n             * The text to display as a hint for creating recurring events during drag. This tip is displayed in the\n             * {@link #config-tooltip} in the same place as the recurrence summary (when there is no recurrence to\n             * display).\n             * @config {String}\n             */\n            recurrenceTip : '(L{holdCtrlForRecurrence})',\n            /**\n             * Specify `false` to disallow dragging the edges of events to change their start or end.\n             * @config {Boolean}\n             */\n            resizable : true,\n            /**\n             * The tooltip to display during a drag create process. Disabled by\n             * default, set to `true`, or provide a tooltip / config object, to enable it.\n             * @config {Boolean|EventTipConfig|Calendar.widget.EventTip}\n             */\n            tooltip : {\n                $config : ['lazy', 'nullify'],\n                value : {\n                    type        : 'eventTip',\n                    disabled    : true,\n                    forSelector : null,\n                    tools       : null\n                }\n            },\n            /**\n             * An empty function by default that allows you to perform custom validation on an event being created by\n             * a drag gesture.\n             *\n             * The `drag` context contains the following data items (see {@link Core.util.drag.DragContext#function-get}):\n             *\n             *  - `eventDragMode` : The {@link #typedef-CalendarDragMode} object describing the drag operation.\n             *  - `eventCreate` : The {@link Calendar.view.Calendar#typedef-CalendarHit} object that describes the target of the drag operation.\n             *\n             * Return `false` to cancel the create operation.\n             *\n             * This function can return a `Promise` (i.e., it can be `async`).\n             *\n             * Example:\n             * ```javascript\n             *  let calendar = new Calendar({\n             *      features : {\n             *          drag : {\n             *              async validateCreateFn({ eventRecord, drag }) {\n             *                  // This method can be async so it can make ajax requests or interact\n             *                  // with the user...\n             *\n             *                  // if we return false, the event will be discarded\n             *\n             *                  // The following is equivalent to returning false:\n             *                  //\n             *                  // return {\n             *                  //     // Do not add the event to the store\n             *                  //     add  : false,\n             *                  //     // Do not display the edit dialog (in the eventEdit feature):\n             *                  //     edit : false\n             *                  // };\n             *                  //\n             *                  // This simply adds the event and does not display the editor:\n             *                  //\n             *                  return {\n             *                      edit : false\n             *                  };\n             *\n             *                  // To do delay adding the event until the editor is done (and\n             *                  // not via Cancel):\n             *                  // return {\n             *                  //     add : false\n             *                  // };\n             *              }\n             *          }\n             *      }\n             *  });\n             * ```\n             * or:\n             * ```javascript\n             *  let calendar = new Calendar({\n             *      features : {\n             *          drag : {\n             *              // Will resolve on the Calendar\n             *              validateCreateFn : 'up.validateCreate'\n             *          }\n             *      },\n             *      validateCreate{ eventRecord, drag } {\n             *          ...\n             *      }\n             *  });\n             * ```\n             *\n             * Return `true` if the event should be added to the event store and to inform the\n             * {@link Calendar.feature.EventEdit eventEdit} feature to display the edit dialog.\n             *\n             * If this function returns an object, the `add` property can be set to `false`\n             * to prevent adding to the event store, and the `edit` property can be set to `false` to inform the\n             * `eventEdit` feature not to display the edit dialog.\n             *\n             * @config {Function|String}\n             * @param {Object} info\n             * @param {Core.util.drag.DragContext} info.drag The drag create context.\n             * @param {Event} info.event The browser event object.\n             * @param {Scheduler.model.EventModel} info.eventRecord The Event record.\n             * @returns {Boolean|ValidateCreateResult} Return `false` if this event should be rejected.\n             */\n            validateCreateFn : () => {},\n            /**\n             * An empty function by default that allows you to perform custom validation on the event being moved to a\n             * new date or time via a drag gesture.\n             *\n             * The `drag` context contains the following data items (see {@link Core.util.drag.DragContext#function-get}):\n             *\n             *  - `eventDragMode` : The {@link #typedef-CalendarDragMode} object describing the drag operation.\n             *  - `eventRecord` : The {@link Scheduler.model.EventModel event record} being moved.\n             *  - `eventSourceHit` : The {@link Calendar.view.Calendar#typedef-CalendarHit} object that describes the source of the drag operation.\n             *\n             * Return `false` to cancel the operation.\n             *\n             * This function can return a `Promise` (i.e., it can be `async`).\n             *\n             * Example:\n             * ```javascript\n             *  let calendar = new Calendar({\n             *      features : {\n             *          drag : {\n             *              async validateMoveFn({ eventRecord, drag }) {\n             *                  // This method can be async so it can make ajax requests or interact\n             *                  // with the user...\n             *\n             *                  // if we return false, the event move will be discarded\n             *              }\n             *          }\n             *      }\n             *  });\n             * ```\n             * or:\n             * ```javascript\n             *  let calendar = new Calendar({\n             *      features : {\n             *          drag : {\n             *              // Will resolve on the Calendar\n             *              validateMoveFn : 'up.validateMove'\n             *          }\n             *      },\n             *      validateMove{ eventRecord, drag } {\n             *          ...\n             *      }\n             *  });\n             * ```\n             *\n             * @config {Function|String}\n             * @param {Object} info\n             * @param {Core.util.drag.DragContext} info.drag The drag create context.\n             * @param {Event} info.event The browser event object.\n             * @param {Scheduler.model.EventModel} info.eventRecord The Event record.\n             * @returns {Boolean} Return `false` if this event change should be rejected.\n             */\n            validateMoveFn : () => {},\n            /**\n             * An empty function by default that allows you to perform custom validation on the event whose `startDate`\n             * or `endDate` is being modified via drag gesture.\n             *\n             * The `drag` context contains the following data items (see {@link Core.util.drag.DragContext#function-get}):\n             *\n             *  - `eventDragMode` : The {@link #typedef-CalendarDragMode} object describing the drag operation.\n             *  - `eventSourceHit` : The {@link Calendar.view.Calendar#typedef-CalendarHit} object that describes the source of the drag operation.\n             *\n             * Return `false` to cancel the operation.\n             *\n             * This function can return a `Promise` (i.e., it can be `async`).\n             *\n             * Example:\n             * ```javascript\n             *  let calendar = new Calendar({\n             *      features : {\n             *          drag : {\n             *              async validateResizeFn({ eventRecord, drag }) {\n             *                  // This method can be async so it can make ajax requests or interact\n             *                  // with the user...\n             *\n             *                  // if we return false, the event change will be discarded\n             *              }\n             *          }\n             *      }\n             *  });\n             * ```\n             * or:\n             * ```javascript\n             *  let calendar = new Calendar({\n             *      features : {\n             *          drag : {\n             *              // Will resolve on the Calendar\n             *              validateResizeFn : 'up.validateResize'\n             *          }\n             *      },\n             *      validateResize{ eventRecord, drag } {\n             *          ...\n             *      }\n             *  });\n             * ```\n             *\n             * @config {Function|String}\n             * @param {Object} info\n             * @param {Core.util.drag.DragContext} info.drag The drag create context.\n             * @param {Event} info.event The browser event object.\n             * @param {Scheduler.model.EventModel} info.eventRecord The Event record.\n             * @returns {Boolean|Promise} Return `false` if this event change should be rejected.\n             */\n            validateResizeFn : () => {},\n            zoneTypes : {\n                day         : DayZone,  // also covers WeekView\n                month       : MonthZone,\n                year        : YearZone,\n                resource    : ResourceViewZone,\n                dayresource : DayResourceZone\n                // AgendaView is not supported (though it could be a Draggable just not a Droppable)\n            },\n            /**\n             * By default, when an event is dragged from an external source, the event is removed from the\n             * source EventStore. Configure this as `false` to leave the event in place to allow for the dragging\n             * in of the same event repeatedly.\n             * @prp {Boolean}\n             * @default\n             */\n            removeFromExternalStore : true\n        };\n    }\n    callOnFunctions = true;\n    // Called as a callOnFunctions function by the firing of the beforeDragStart event.\n    // The beforeAutoCreate event is also triggered by CalendarMixin's detection of its own\n    // autoCreate gesture. This event gives a common point for validation of UI-initiated\n    // event creation.\n    onBeforeDragStart(props) {\n        const\n            { drag, event : domEvent, source } = props,\n            resourceRecord = source.owner.activeView.getResourceRecord?.(drag.element);\n        if (drag.peek('eventDragMode').type === 'create') {\n            return this.client.trigger('beforeAutoCreate', { domEvent, date : drag.peek('date'), resourceRecord });\n        }\n    }\n    changeGripper(gripper, was) {\n        was?.remove();\n        return gripper && DomHelper.createElement(gripper);\n    }\n    changeTooltip(config, existing) {\n        if (config) {\n            config = config === true ? this.constructor.configurable.tooltip.value : config;\n            if (this.initialConfig.tooltip) {\n                config.disabled = false;\n            }\n            config.ownerFeature = this;\n        }\n        return Widget.reconfigure(existing, config, /* owner = */ this);\n    }\n}\nCalendarDrag.initClass();\nCalendarDrag._$name = 'CalendarDrag';", "import SchedulerEventEditor from '../../Scheduler/view/EventEditor.js';\n/**\n * @module Calendar/widget/EventEditor\n */\n/**\n * Provided event editor dialog. This is not supposed to be used directly.\n *\n * Using the {@link Scheduler.feature.EventEdit#config-items items} config of the EventEdit feature\n * it is possible to reconfigure the layout of the event editor. See the {@link Calendar.feature.EventEdit}\n * for more information and an example of doing this.\n *\n * @extends Scheduler/view/EventEditor\n * @private\n *\n * @typings Scheduler.view.EventEditor -> Scheduler.view.SchedulerEventEditor\n */\nexport default class EventEditor extends SchedulerEventEditor {\n    //region Config\n    static get $name() {\n        return 'EventEditor';\n    }\n    // Factoryable type name\n    static get type() {\n        return 'calendareventeditor';\n    }\n    static get configurable() {\n        return {\n            align : {\n                monitorResize : true // Needed because DayView events change size\n            }\n        };\n    }\n    //endregion\n    updateRecord(record) {\n        this.fixTimeFieldVisibility(record.allDay);\n        super.updateRecord(record);\n    }\n    onAllDayChange({ value, userAction }) {\n        this.fixTimeFieldVisibility(value, userAction);\n    }\n    fixTimeFieldVisibility(allDay, fromUI) {\n        const\n            hideShowMethod  = allDay ? 'hide' : 'show',\n            {\n                startDateField,\n                startTimeField,\n                endDateField,\n                endTimeField\n            } = this.widgetMap;\n        // Times hidden for allDay events\n        startTimeField?.[hideShowMethod]();\n        endTimeField?.[hideShowMethod]();\n        // Restore the time fields from the underlying data if the UI checkbox is cleared.\n        // If the record was promoted to being allDay, the time portion does not get cleared,\n        // just the date getters return snapped values. So the underlying data restores the fields\n        // to the originally set start and end times so that the save operation will work as expected.\n        if (!allDay && fromUI) {\n            startDateField && (startDateField.value = startTimeField.value = this.record.getData('startDate'));\n            endDateField && (endDateField.value = endTimeField.value = this.record.getData('endDate'));\n        }\n    }\n    onBeforeShow() {\n        const { deleteButton } = this.widgetMap;\n        // Superclass has opinions at this time.\n        super.onBeforeShow(...arguments);\n        // If superclass has not already hidden it for its owm reasons\n        // We hide the delete button for newly created events.\n        // The cancel button removes it.\n        if (deleteButton && !deleteButton.hidden) {\n            if (this.record.isCreating) {\n                deleteButton.hide();\n            }\n        }\n    }\n    onFocusOut() {\n        super.onFocusOut(...arguments);\n        this.owner = this.initialConfig.owner;\n    }\n}\n// Register this widget type with its Factory\nEventEditor.initClass();\nEventEditor._$name = 'EventEditor';", "import CalendarFeature from './CalendarFeature.js';\nimport SchedulerEventEdit from '../../Scheduler/feature/EventEdit.js';\nimport '../widget/EventEditor.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport '../../Core/widget/SlideToggle.js';\n/**\n * @module Calendar/feature/EventEdit\n */\nconst isCalendar = w => w.isCalendar;\n/**\n * Feature that displays a popup containing fields for editing event data.\n *\n * To customize its contents you can:\n *\n * * Reconfigure built-in widgets by providing override configs in the {@link Scheduler.feature.base.EditBase#config-items} config.\n * * Change the date format of the date & time fields: {@link Scheduler.feature.base.EditBase#config-dateFormat} and {@link Scheduler.feature.base.EditBase#config-timeFormat}\n * * Configure provided fields in the editor and add your own in the {@link Scheduler.feature.base.EditBase#config-items} config.\n * * Remove fields related to recurring events configuration (such as `recurrenceCombo`) by setting {@link Scheduler.feature.mixin.RecurringEventEdit#config-showRecurringUI} config to `false`.\n * * Advanced: Reconfigure the whole editor widget using {@link Scheduler.feature.EventEdit#config-editorConfig}\n *\n * For more info on customizing the event editor, please see [Customize event editor](#Calendar/guides/customization/eventedit.md) guide.\n *\n * {@inlineexample Calendar/feature/EventEdit.js}\n *\n * This feature is **enabled** by default.\n *\n * @demo Calendar/eventedit\n *\n * @extends Scheduler/feature/EventEdit\n * @classtype eventEdit\n * @feature\n *\n * @typings Scheduler.feature.EventEdit -> Scheduler.feature.SchedulerEventEdit\n */\nexport default class EventEdit extends SchedulerEventEdit {\n    static get $name() {\n        return 'EventEdit';\n    }\n    static get type() {\n        return 'eventEdit';\n    }\n    static get configurable() {\n        return {\n            editorConfig : {\n                type  : 'calendareventeditor',\n                items : {\n                    resourceField : {\n                        label          : 'L{Calendar}',\n                        showEventColor : true\n                    },\n                    allDay : {\n                        type              : 'checkbox',\n                        cls               : 'b-match-label',\n                        name              : 'allDay',\n                        weight            : 250,\n                        label             : 'L{All day}',\n                        internalListeners : {\n                            change : 'up.onAllDayChange'\n                        }\n                    }\n                }\n            }\n        };\n    }\n    construct(config) {\n        // Legacy constructor signature\n        super.construct(config.client, config);\n    }\n    onDragCreateEnd({ eventRecord, resourceRecord }) {\n        this.editNewlyCreatedEvent(eventRecord, resourceRecord);\n    }\n    onEventAutoCreated({ eventRecord }) {\n        this.editNewlyCreatedEvent(eventRecord);\n    }\n    editNewlyCreatedEvent(eventRecord, resourceRecord) {\n        if (!this.disabled) {\n            // The Drag feature adds the record so we must set the flag here.\n            eventRecord.isCreating = true;\n            // Implementations may be async, so the return value must always be propagated.\n            // also, set the `stmCapture` argument to `false` do disable the STM capturing mechanism\n            // calendar is performing its own handling\n            return this.editEvent(eventRecord, resourceRecord, null, false);\n        }\n    }\n    /**\n     * Opens an editor for the passed event. This function is exposed on Calendar and can be called as\n     * `calendar.editEvent()`.\n     *\n     * If the event is not present in the `eventStore`, the event will be added so that it becomes\n     * visible in the UI. The editor will then shows a \"Cancel\" button which removes the event when\n     * clicked to abort a \"New Event\" operation.\n     * @method editEvent\n     * @param {Scheduler.model.EventModel} eventRecord Event to edit\n     * @param {Scheduler.model.ResourceModel} [resourceRecord] Not used. Inherited from Scheduler.\n     * @param {HTMLElement} [element] Element to anchor editor to (defaults to events element)\n     * @async\n     * @on-owner\n     */\n    // editEvent is the single entry point in the base class.\n    // Subclass implementations of the action may differ, so are implemented in doEditEvent\n    async doEditEvent(eventRecord, resourceRecord, element) {\n        const\n            me             = this,\n            { client }     = me,\n            { eventStore } = client,\n            { startDate, endDate } = eventRecord;\n        // eventSource is the descendant view that is being interacted with.\n        // See Calendar#onViewCatchAll\n        // activeSubView is the lowest level active view in the currently visible view in the\n        // card layout of the viewContainer.\n        // eventSource might be a descendant of the activeView.\n        let view       = client.eventSource || client.activeSubView,\n            // This flag is true if event was created by this feature\n            eventAdded = false;\n        // If we get this event from a Scheduler view, use superclass's edit process.\n        if (view.isScheduler) {\n            me.client = view;\n            await super.doEditEvent(...arguments);\n            me.client = client;\n            return;\n        }\n        // If we get this event from a non-Calendar view, or the view is cell editing, ignore it.\n        if (!view.isCalendarMixin || view.features?.cellEdit?.isEditing) {\n            return;\n        }\n        if (eventRecord.startDate && eventRecord.endDate &&\n            !DateHelper.intersectSpans(\n                startDate,\n                endDate,\n                view.startDate,\n                view.endDate)) {\n            client.date = eventRecord.startDate;\n        }\n        // If we've created in a DayView, and we are editing an inter day event, the responsible\n        // view is the DayView's alldayEvents row **if there is one, and it's being used**.\n        if (view.allDayEvents && view.isAllDayEvent(eventRecord) && view.showAllDayHeader) {\n            view = view.allDayEvents;\n        }\n        // Occurrences are *never* added to the eventStore, but any other event being edited,\n        // make sure it's in and set the `isCreating` flag to show the Cancel UI.\n        if (!eventRecord.isOccurrence && !eventStore.includes(eventRecord)) {\n            eventAdded = eventRecord.isCreating = true;\n            eventStore.add(eventRecord);\n            // We need the view to contain the event's element, not the drag-create proxy.\n            // So wait for refresh for a max of 100ms, if the refresh has not triggered, force the issue.\n            await view.afterRefresh({ forceRefresh : true });\n        }\n        // Special handling if editing from an overflow popup\n        const\n            { _overflowPopup } = view,\n            activeDate         = view.getDateFromElement(element);\n        // Get the element for the date into which the element was rendered.\n        // AgendaView can render multiple elements for day-spanning events\n        // so we must attach to the correct one.\n        let fromOverflow = _overflowPopup?.isVisible,\n            eventElement = fromOverflow ? _overflowPopup.getEventElement(eventRecord) : view.getEventElement(eventRecord, activeDate);\n        if (fromOverflow) {\n            if (eventElement) {\n                fromOverflow = false;\n            }\n            else {\n                eventElement = _overflowPopup.getEventElement(eventRecord);\n            }\n        }\n        // Call Calendar template method\n        if (eventRecord.isCreating) {\n            client.onEventCreated?.(eventRecord);\n        }\n        // If called from eventlist\n        if (!eventElement && view.isEventList) {\n            eventElement = view?.rowManager?.getRowFor(eventRecord)?.element;\n        }\n        // This flag is meant to prevent scrolling the element into the view if we dragcreate event and scroll the\n        // view in the process. If we're creating event, then check if event was already added. If event was not\n        // created allow scrolling - we haven't dragcreated event and should try to scroll to the element\n        const scrollingAllowed = (eventElement && !DomHelper.isInView(eventElement)) || !eventRecord.isCreating || !eventAdded;\n        // If editing triggered from overflow popup, ensure that the eventElement is focused.\n        if (fromOverflow) {\n            eventElement.focus();\n        }\n        else if (eventElement) {\n            if (scrollingAllowed && view.scrollable?.hasOverflow()) {\n                // If we found a rendered element, just ensure it is visible in the scroll viewport\n                await view.scrollable?.scrollIntoView(eventElement, { animate : true, focus : true });\n            }\n            else {\n                DomHelper.focusWithoutScrolling(eventElement);\n            }\n        }\n        // If no element found, then we have to ask the view to navigate in time to encompass that event\n        else {\n            // If it's a single day event on a hidden, non-working day, show it centered.\n            // align : { target : true } means centered.\n            if (!view.isAllDayEvent(eventRecord) && (!startDate || view.hiddenNonWorkingDays[startDate.getDay()])) {\n                me.internalShowEditor(eventRecord, null, {\n                    target : true\n                });\n                return;\n            }\n            if (startDate && scrollingAllowed) {\n                // Ensure we have an in-view element to align to - data change response is async.\n                // scrollTo refreshes if the element is not present\n                await view.scrollTo(eventRecord);\n            }\n            // scrollTo might have to refresh to create the target.\n            eventElement = view.getEventElement(eventRecord);\n        }\n        // If event element is missing and we render days (month, year), try to align editor to the date\n        if (!eventElement && !element && view.isDayCellRenderer) {\n            eventElement = view.getCell(eventRecord.startDate);\n        }\n        me.internalShowEditor(eventRecord, null, {\n            target         : eventElement || element,\n            allowTargetOut : view.isAnimating\n        });\n        // Only on first show do we ignore clipping.\n        // If target is scrolled out of view, editor must hide.\n        if (me.editor?.lastAlignSpec) {\n            me.editor.lastAlignSpec.allowTargetOut = false;\n        }\n    }\n    async onSaveClick() {\n        const\n            me              = this,\n            { eventRecord } = me,\n            { isCreating }  = eventRecord.meta;\n        if (me.isValid) {\n            eventRecord.isCreating = false;\n        }\n        // So that resetting editing context doesn't remove the record\n        const saved = await super.onSaveClick(...arguments);\n        if (isCreating && saved) {\n            me.eventStore.added.add(eventRecord);\n            if (!me.eventStore.usesSingleAssignment) {\n                me.assignmentStore.added.add(eventRecord.assignments);\n            }\n            if (me.client.crudManager?.autoSync) {\n                me.client.crudManager.scheduleAutoSync();\n            }\n        }\n    }\n    internalShowEditor() {\n        const\n            {\n                client,\n                editor,\n                startTimeField,\n                endTimeField\n            }                 = this,\n            calendar          = client.closest(isCalendar) || client,\n            autoCreate        = calendar.activeView?.autoCreate ?? (calendar.autoCreate || client.constructor.configurable.autoCreate),\n            step              = autoCreate?.step,\n            { activeSubView } = calendar,\n            _overflowPopup    = activeSubView?._overflowPopup;\n        // In case the tooltip is visible, we must hide it.\n        // This reverts focus so that we pick up focusIn from the event.\n        (client.isSchedulerBase ? client.calendar : client).features.eventTooltip?._tooltip?.hide();\n        // Always hook the closest owning widget as our owner because there may be intervening\n        // focused widgets between the Calendar (our default), and us.\n        // For example, the all day row of a DayView may show an OverflowPopup. We have\n        // to be owned by the OverflowPopup so that our owner chain is correct.\n        editor.owner = _overflowPopup?.isVisible ? _overflowPopup : activeSubView;\n        if (super.internalShowEditor(...arguments) === false) {\n            // Editing was vetoed\n            editor.owner = editor.initialConfig.owner;\n            return;\n        }\n        if (step) {\n            startTimeField && (startTimeField.step = step);\n            endTimeField && (endTimeField.step = step);\n        }\n    }\n    // calendar drag/auto create is different enough from scheduler's, so we just override this method\n    // to empty function to opt-out of the STM capture mechanism\n    async finalizeStmCapture(saved) {\n    }\n}\n// Register this feature type with its Factory\nCalendarFeature.register(EventEdit.type, EventEdit);\nEventEdit._$name = 'EventEdit';", "import CalendarFeature from './CalendarFeature.js';\nimport SchedulerEventMenu from '../../Scheduler/feature/EventMenu.js';\n/**\n * @module Calendar/feature/EventMenu\n */\nconst hasEventStore = w => w.eventStore;\n/**\n * A feature which shows a context menu when right-clicking events in the calendar.\n *\n * There are three predefined {@link #config-items} provided by default:\n *\n * - `deleteEvent` Delete the event clicked upon.\n * - `editEvent` Edit the event clicked upon __Only present if the {@link Calendar.feature.EventEdit}\n * feature is present__ (which it is by default).\n * - `duplicate` Duplicate the event clicked upon with the same time and duration, the same\n * resource(s) assigned and a slightly edited name - `\"<old name> (copy)\"`.\n *\n * {@inlineexample Calendar/feature/EventMenu.js}\n *\n * The {@link #config-items} set can be reconfigured by providing an `items` property to this feature:\n *```javascript\n * const calendar = new Calendar({\n *     features : {\n *         eventMenu : {\n *             items : {\n *                 // Removes the predefined deleteEvent item\n *                 deleteEvent : null,\n *\n *                 // Add our own custom item\n *                 postpone : {\n *                     text   : 'Postpone 1h',\n *                     weight : 300,\n *                     icon   : 'b-fa b-fa-fw b-fa-arrow-down',\n *                         onItem({ item, eventRecord }) {\n *                         eventRecord.shift(1, 'h');\n *                     }\n *                 }\n *             }\n *         }\n *     }\n * });\n *```\n *\n * Items may also be reconfigured dynamically at run time:\n *\n * ```javascript\n * const calendar = new Calendar({\n *     features : {\n *         eventMenu : {\n *             // Process items before menu is shown\n *             processItems({eventRecord, items}) {\n *                  // Push an extra item for conferences\n *                  if (eventRecord.type === 'conference') {\n *                      items.showSessionItem = {\n *                          text : 'Show sessions',\n *                          onItem({eventRecord}) {\n *                              // ...\n *                          }\n *                      };\n *                  }\n *\n *                  // Do not show menu for secret events\n *                  if (eventRecord.type === 'secret') {\n *                      return false;\n *                  }\n *             }\n *         }\n *     }\n * });\n * ```\n * <div class=\"note\">The `processItems` implementation my be an `async` function which `awaits` a result to\n * mutate the `items` object.</div>\n *\n * This feature is **enabled** by default.\n *\n * @demo Calendar/custom-menus\n * @extends Scheduler/feature/EventMenu\n * @classtype eventMenu\n * @feature\n *\n * @typings Scheduler.feature.EventMenu -> Scheduler.feature.SchedulerEventMenu\n */\nexport default class EventMenu extends SchedulerEventMenu {\n    static get $name() {\n        return 'EventMenu';\n    }\n    static get type() {\n        return 'eventMenu';\n    }\n    static configurable = {\n        /**\n         * This is a preconfigured set of items used to create the default context menu. The default options are\n         * listed at the top of the page.\n         *\n         * To remove existing items, set corresponding keys `null`:\n         *\n         * ```javascript\n         * const calendar = new Calendar({\n         *     features : {\n         *         eventMenu : {\n         *             items : {\n         *                 deleteEvent : null,\n         *                 duplicate : null\n         *             }\n         *         }\n         *     }\n         * });\n         * ```\n         *\n         * See the feature config in the above example for more details.\n         *\n         * @config {Object<String,MenuItemConfig|Boolean|null>} items\n         */\n        items : {\n            duplicate : {\n                text   : 'L{EventMenu.duplicateEvent}',\n                icon   : 'b-icon b-icon-copy',\n                weight : 400,\n                onItem({ eventRecord }) {\n                    const\n                        dupe           = eventRecord.copy(null, { skipFieldIdentifiers : true }),\n                        { eventStore } = this.up(hasEventStore),\n                        { resources }  = eventRecord;\n                    // Make a new name\n                    dupe.name = `${eventRecord.name} (${this.L('copy')})`;\n                    // In case it was a recurring event, the dupe will be a one-off.\n                    dupe.recurrence = null;\n                    // Dupe has same assignments initially handle usesSingleAssign as well as multiassign.\n                    // If an event without a resource is duplicated\n                    if (resources?.length) {\n                        eventStore.assignmentStore.assignEventToResource(dupe, resources);\n                    }\n                    eventStore.add(dupe);\n                }\n            }\n        }\n    };\n    // Superclass registers this as a chained function.\n    populateEventMenu({ items, eventRecord, assignmentRecord }) {\n        super.populateEventMenu(...arguments);\n        const { client } = this;\n        // Hide the duplicate\n        items.duplicate = {\n            disabled : eventRecord.readOnly || assignmentRecord?.readOnly,\n            hidden   : client.readOnly\n        };\n    }\n    getDataFromEvent(event) {\n        const\n            { client }     = this,\n            { activeView } = client;\n        // Base class is SchedulerEventMenu\n        if (activeView.isScheduler) {\n            this.client = activeView;\n        }\n        else {\n            // Contextual event must be focused.\n            event.target.closest('.b-cal-event-wrap')?.focus();\n        }\n        const result = super.getDataFromEvent(event);\n        this.client = client;\n        return result;\n    }\n    changeMenu() {\n        const\n            me     = this,\n            result = super.changeMenu(...arguments);\n        // Set the owner to be the currently active view (or its active OverflowPopup)\n        // so that focus stays in that view's ownership tree.\n        result?.ion({\n            beforeShow({ source }) {\n                const\n                    { activeSubView }  = me.client,\n                    { _overflowPopup } = activeSubView;\n                source.owner = _overflowPopup?.containsFocus ? _overflowPopup : activeSubView;\n            }\n        });\n        return result;\n    }\n    changeItems(items) {\n        items = super.changeItems(...arguments);\n        // UnassignEvent is not valid where there is no contextual resource as there is in Scheduler where\n        // the row denotes the contextual resource\n        items.unassignEvent = null;\n        return items;\n    }\n}\n// Register this feature type with its Factory\nCalendarFeature.register(EventMenu.type, EventMenu);\nEventMenu._$name = 'EventMenu';", "import CalendarFeature from './CalendarFeature.js';\nimport Widget from '../../Core/widget/Widget.js';\nimport EventTip from '../widget/EventTip.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\nimport { parseAlign } from '../../Core/helper/util/Rectangle.js';\nimport '../../Scheduler/view/recurrence/RecurrenceConfirmationPopup.js';\n/**\n * @module Calendar/feature/EventTooltip\n */\nconst\n    hasEventStore = w => w.eventStore,\n    ownConfigs = [\n        'activeElement',\n        'client',\n        'clientListeners',\n        'disabled',\n        'showOn',\n        'tooltip'\n    ];\n/**\n * A feature which displays a {@link #config-tooltip} containing extra information. The tooltip can\n * be triggered by clicking or hovering an event bar element (see {@link #config-showOn}).\n *\n * Configuration options from this feature are used to configure the {@link Calendar.widget.EventTip}\n * instance:\n *\n * ```javascript\n * new Calendar({\n *    features : {\n *        eventTooltip : {\n *            tools : {\n *                // Do not show the Delete tool in the tooltip header\n *                delete : false,\n *                // Add a new tool for our own operation\n *                newTool : {\n *                    cls     : 'b-icon-add',\n *                    tooltip : 'Test',\n *                    handler() {\n *                        console.log(`Test ${this.eventRecord.name}`);\n *                    }\n *                }\n *            },\n *            renderer({ eventRecord }) {\n *                return {\n *                    text : `From ${DateHelper.format(eventRecord.startDate, 'l')} to ${DateHelper.format(eventRecord.endDate, 'l')}`\n *                },\n *            },\n *            titleRenderer( eventRecord ) {\n *                return {\n *                    text      : `${eventRecord.name} ${eventRecord.resource.name}`,\n *                    className : {\n *                        'b-urgent'    : eventRecord.isUrgent,\n *                        'b-completed' : eventRecord.isCompleted\n *                    }\n *                };\n *            }\n *        }\n *    }\n * })\n * ```\n *\n * You can hide tools conditionally:\n * ```javascript\n * new Calendar({\n *     features : {\n *         eventTooltip : {\n *             listeners : {\n *                 beforeShow({ source }) {\n *                     source.tools.delete = false;\n *                 }\n *             }\n *         }\n *     }\n * })\n * ```\n *\n * This feature is **enabled** by default.\n *\n * {@inlineexample Calendar/feature/EventTooltip.js}\n *\n * @demo Calendar/tooltips\n *\n * @extends Calendar/feature/CalendarFeature\n * @classtype eventTooltip\n * @feature\n *\n * @typings Scheduler.feature.EventTooltip -> Scheduler.feature.SchedulerEventTooltip\n */\nexport default class EventTooltip extends CalendarFeature {\n    static get $name() {\n        return 'EventTooltip';\n    }\n    static get type() {\n        return 'eventTooltip';\n    }\n    static get configurable() {\n        return {\n            /**\n             * The gesture which activates the event tooltip. Defaults to `'click'`, but may be set to\n             * `'contextmenu'` or `'mouseover`'. The tip persists until closed.\n             *\n             * If set to `'hover'`, the tip shows on mouseover and hides on mouseout.\n             *\n             * If set to `'contextmenu'`, the tip shows at the mouse/touch contact point, otherwise\n             * it aligns to the target event bar.\n             * @config {'click'|'contextmenu'|'mouseover'|'hover'}\n             * @default\n             */\n            showOn : 'click',\n            closable : true,\n            // Allow it to fall back from its initial alignment axis to the cross axis.\n            // So if aligned l-r or r-l and shown by a long multiday event, it allows\n            // itself to be fall back to being aligned t-b\n            axisLock : 'flexible',\n            /**\n             * Gets the Tooltip instance that this feature is using.\n             * @member {Calendar.widget.EventTip} tooltip\n             * @readonly\n             */\n            /**\n             * This config is used to directly configure the associated {@link Calendar.widget.EventTip tooltip}.\n             * @config {Calendar.widget.EventTip}\n             */\n            tooltip : {\n                $config : ['lazy', 'nullify'],\n                value : {\n                    type : 'eventTip',\n                    // Event elements may dynamically change width in DayView. Must maintain alignment.\n                    align : {\n                        monitorResize : true\n                    }\n                }\n            },\n            /**\n             * A function, or the *name* of a function which, when passed the active\n             * {@link Scheduler.model.EventModel}, returns a value to use as the tooltip's\n             * {@link Core.widget.Panel#config-title}.\n             *\n             * The function may return either an HTML string, or a {@link DomConfig} object.\n             * _Defaults to using the event `name`_\n             *\n             * @config {Function|String}\n             * @param {Scheduler.model.EventModel} record Event record\n             * @returns {String|DomConfig}\n             */\n            titleRenderer : eventRecord => StringHelper.encodeHtml(eventRecord.name),\n            /**\n             * A function, or the *name* of a function called to update the tooltip's content when the\n             * cursor is moved over a target.\n             *\n             * It receives one argument containing context about the tooltip and show operation.\n             * The function may return either an HTML string, or a {@link DomConfig} object, or\n             * a Promise yielding one of these.\n             *\n             * ```javascript\n             * new Calendar({\n             *     features : {\n             *         eventTooltip : {\n             *             renderer : 'up.getEventTip'\n             *         }\n             *     },\n             *     getEventTip({ eventRecord }) {\n             *         return {\n             *             className : 'tooltip-content',\n             *             text      : eventRecord.name\n             *         }\n             *     }\n             * });\n             * ```\n             *\n             * or\n             *\n             * ```javascript\n             * new Calendar({\n             *     features : {\n             *         eventTooltip : {\n             *             renderer : 'up.getEventTip'\n             *         }\n             *     },\n             *     getEventTip({ eventRecord }) {\n             *         return '<div class=\"tooltip-content> + eventRecord.name + '</div>';\n             *     }\n             * });\n             * ```\n             *\n             * or\n             *\n             * ```javascript\n             * new Calendar({\n             *     features : {\n             *         eventTooltip : {\n             *             renderer : 'up.getEventTip'\n             *         }\n             *     },\n             *     getEventTip : async function({ eventRecord }) {\n             *         // Use a web service which returns a JSON DomConfig block\n             *         const response = await fetch(`getEventTipContent?event=${eventRecord.id}`);\n             *         return response.json();\n             *     }\n             * });\n             * ```\n             *\n             * @config {Function|String}\n             * @param {Object} context\n             * @param {Scheduler.model.EventModel} context.eventRecord The event record which the tooltip is being shown for.\n             * @param {Core.widget.Tooltip} context.tip The tooltip instance\n             * @param {HTMLElement} context.element The Element for which the Tooltip is monitoring mouse movement\n             * @param {HTMLElement} context.activeTarget The target element that triggered the show\n             * @param {Event} context.event The raw DOM event\n             * @returns {String|Promise|DomConfig}\n             */\n            renderer : null,\n            /**\n             * This config is used to directly configure the associated recurrence confirmation popup used\n             * when a delete is requested.\n             * @config {RecurrenceConfirmationPopupConfig}\n             * @private\n             */\n            recurrenceConfirmation : {\n                $config : ['lazy', 'nullify'],\n                value : {\n                    type : 'recurrenceconfirmation'\n                }\n            },\n            /**\n             * By default, the end date of an all day event is displayed in the tooltip UI as\n             * the last calendar date on which the event falls. For most end users, this is the\n             * expected value.\n             *\n             * Technically, the {@link Scheduler.model.EventModel#field-endDate} is a timestamp\n             * which represents the exact point in time at which an event ends. To use this instead,\n             * configure `extendAllDayEndDay` as `true`.\n             *\n             * To be clear, this would mean that an {@link Scheduler.model.EventModel#field-allDay}\n             * event starting and ending on the 7th of February 2020, would show the end date in the\n             * tooltip as 8th of February 2020.\n             * @config {Boolean}\n             * @default false\n             */\n            extendAllDayEndDay : null,\n            /**\n             * Defines how to align the EventTooltip to its event.\n             *\n             * The value can be either a simple string or a full configuration object.\n             *\n             * When using a simple string, the format is `'[trblc]n-[trblc]n'` and it specifies tooltip edge and\n             * the event edge plus optional offsets from 0 to 100 along the edges to align to. Also supports direction\n             * independent edges horizontally, `s` for start and `e` for end (maps to `l` and `r` for LTR, `r` and `l`\n             * for RTL).\n             *\n             * For more details about using the object form, see {@link Core.widget.Widget#function-showBy}.\n             *\n             * Once set, this is stored internally in object form.\n             * @config {AlignSpec|String} align\n             * @default 't-b'\n             */\n            align : null,\n            /**\n             * By default, if the tip's target event is in a cluster of overlapping events and therefore\n             * narrow, activating the tip will expand it to full width temporarily.\n             *\n             * Configure this as `false` to disable this.\n             * @prp {Boolean}\n             * @default true\n             */\n            revealEventsInCluster : true,\n            resources : null\n        };\n    }\n    static get pluginConfig() {\n        return {\n            chain : ['render']\n        };\n    }\n    // Because we insert ourself into the owner hierarchy, isVisible consults us\n    get isVisible() {\n        return true;\n    }\n    changeRecurrenceConfirmation(recurrenceConfirmation, existingInstance) {\n        if (recurrenceConfirmation) {\n            recurrenceConfirmation.rootElement = this.owner.rootElement;\n        }\n        return Widget.reconfigure(existingInstance, recurrenceConfirmation, {\n            owner : this\n        });\n    }\n    changeTooltip(config, existingInstance) {\n        return Widget.reconfigure(existingInstance, config, {\n            owner : this,\n            setup : 'setupTooltip'\n        });\n    }\n    setupTooltip(config) {\n        const\n            me  = this,\n            ret = me.config;\n        ownConfigs.forEach(c => delete ret[c]);\n        return EventTip.mergeConfigs(ret, {\n            ownerFeature : me,\n            forElement   : me.client.element,\n            id           : `${me.client.id}-event-tip`,\n            // The Tooltip must activate on embedded widgets from other product families\n            forSelector       : me.showOn === 'hover' && '.b-cal-event-wrap,.b-sch-event-wrap,.b-gantt-task-wrap,.b-taskboard-card',\n            resources         : me.resources,\n            disabled          : me.disabled,\n            internalListeners : {\n                thisObj     : me,\n                delete      : 'onDeleteClick',\n                edit        : 'onEditClick',\n                pointerOver : 'onTipPointerOver'\n            }\n        }, config);\n    }\n    render() {\n        const\n            me              = this,\n            clientListeners = {\n                eventsPerCellChange : 'onClientEventsPerCellChange',\n                navigate            : 'onClientNavigate',\n                renderEvents        : 'onRenderEvents',\n                thisObj             : me\n            };\n        if (me.showOn === 'hover') {\n            // The tooltip needs to exist to take care of its own show/hide lifecycle if\n            // we are configured to use the hover gesture.\n            me.getConfig('tooltip');\n        }\n        else {\n            // Some embedded widget from other product families use 'taskClick'\n            clientListeners[`event${me.showOn}`] = clientListeners[`task${me.showOn}`] = 'onClientTooltipGesture';\n        }\n        me.client.ion(clientListeners);\n    }\n    get owner() {\n        if (this.client.activeView._overflowPopup?.containsFocus) {\n            return this.client.activeView.overflowPopup;\n        }\n        else {\n            return this.client;\n        }\n    }\n    //region Events\n    addListener(...args) {\n        // Add listener to the `tooltip` instance\n        this.tooltip?.addListener(...args);\n    }\n    removeListener(...args) {\n        // Remove listener from the `tooltip` instance\n        this.tooltip?.removeListener(...args);\n    }\n    onEditClick() {\n        const\n            { client, activeClient, tooltip } = this,\n            { overflowPopup } = activeClient,\n            eventEdit = activeClient?.features?.eventEdit || client.features.eventEdit,\n            fromPopup = overflowPopup?.element?.contains(tooltip.activeTarget),\n            target    = fromPopup ? overflowPopup.targetCell : tooltip.activeTarget;\n        if (eventEdit && !eventEdit.disabled) {\n            eventEdit.editEvent(this.eventRecord, null, target, false);\n            tooltip.hide();\n        }\n    }\n    onDeleteClick() {\n        this.activeClient.calendar.removeEvents([this.eventRecord], () => this.tooltip?.hide(), this.tooltip);\n    }\n    onClientEventsPerCellChange() {\n        // Overflow popup hides on this, so we must hide too.\n        // Access the property directly so as not to create the tooltip.\n        // We got here through a ResizeObserver so we must allow the notification to reach the\n        // overflow popup before it hides to avoid the nonsensically fatal\n        // \"ResizeObserver loop completed with undelivered notifications\" on FF.\n        // Delayable.requestAnimationFrame uses itself as the thisObj,\n        // so using the function reference will work.\n        this._tooltip?.requestAnimationFrame(this._tooltip?.hide);\n    }\n    onClientNavigate(navEvent) {\n        // Access the property directly so as not to create the tooltip\n        const { _tooltip } = this;\n        // If we are exiting the calendar or navigating to a new item that is not in the tooltip, hide the tooltip\n        if (_tooltip?.activeTarget && (!this.owner.owns(navEvent.event) || navEvent.item !== _tooltip.activeTarget) && !_tooltip.owns(navEvent.event?.relatedTarget)) {\n            _tooltip.hide();\n        }\n    }\n    onRenderEvents(e) {\n        const { _tooltip } = this;\n        // If the target element is no longer part of the activating view, hide the tooltip\n        if (_tooltip?.activeTarget && !this.activeClient.element.contains(this.tooltip.activeTarget)) {\n            _tooltip.hide();\n        }\n    }\n    onClientTooltipGesture({ domEvent, event, eventElement, eventRecord, source : owningCalendarWidget }) {\n        const { tooltip } = this;\n        // Foreign objects (like a Scheduler) may not use \"domEvent\", so fallback to \"event\" if necessary:\n        domEvent = domEvent || event;\n        // Pass already known parts from the Widget gesture into onTipPointerOver\n        if (this.onTipPointerOver({ event : domEvent, target : eventElement, eventRecord, owningCalendarWidget }) !== false) {\n            // If the event is part of a cluster (overlaps others, and will expand)\n            // and tooltip is aligned to the side, then delay the show to avoid a realign after expand.\n            if (eventElement.classList.contains('b-cal-in-cluster') && parseAlign(tooltip.align.align).edgeAligned === 2) {\n                tooltip.setTimeout({\n                    fn    : 'showByEvent',\n                    args  : [domEvent, eventElement],\n                    delay : 130\n                });\n            }\n            else {\n                // Handle products where the eventElement is passed as the \"inner\" instead of the wrap\n                tooltip.showByEvent(domEvent, eventElement.closest('[data-event-id],[data-task-id]'));\n            }\n        }\n    }\n    onTipPointerOver({\n        event,\n        target,\n        owningCalendarWidget,\n        eventRecord\n    }) {\n        const { tooltip, client } = this;\n        if (!owningCalendarWidget) {\n            owningCalendarWidget = Widget.fromElement(target)?.closest(hasEventStore);\n        }\n        if (!eventRecord) {\n            eventRecord = owningCalendarWidget.getEventRecord(target);\n        }\n        if (client.features?.eventEdit?.isEditing) {\n            return false;\n        }\n        // Embedded views from other products may be showing their own editors\n        if (client.floatRoot.querySelector('.b-eventeditor,.b-taskeditor')) {\n            return false;\n        }\n        if (owningCalendarWidget) {\n            tooltip.triggeredByEvent = event;\n            tooltip.activeTarget = target;\n            this.activeClient = owningCalendarWidget;\n            eventRecord = owningCalendarWidget.getEventRecord(target);\n            /**\n             * The event which the tooltip feature has been activated for.\n             * @member {Scheduler.model.EventModel} eventRecord\n             * @readonly\n             */\n            tooltip.eventRecord = this.eventRecord = eventRecord;\n        }\n        return eventRecord != null;\n    }\n    //endregion\n    //region Internal\n    updateDisabled(disabled, was) {\n        super.updateDisabled(disabled, was);\n        if (this._tooltip) {\n            this._tooltip.disabled = disabled;\n        }\n    }\n    //endregion\n}\n// Register this feature type with its Factory\nEventTooltip.initClass();\nEventTooltip._$name = 'EventTooltip';", "import Base from '../../Core/Base.js';\nimport CalendarFeature from './CalendarFeature.js';\nimport Draggable from '../../Core/mixin/Draggable.js';\nimport Droppable from '../../Core/mixin/Droppable.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport EventHelper from '../../Core/helper/EventHelper.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\nimport Widget from '../../Core/widget/Widget.js';\n/**\n * @module Calendar/feature/ExternalEventSource\n */\nconst oneHour = {\n    magnitude : 1,\n    unit      : 'hour'\n};\nclass ExternalZone extends Base.mixin(Draggable, Droppable) {\n    static get $name() {\n        return 'ExternalZone';\n    }\n    static get configurable() {\n        return {\n            // Default to dragging grid rows\n            dragItemSelector : '.b-grid-row',\n            dragProxy : {\n                type : 'default',\n                open(drag) {\n                    // Use the Feature's openProxy\n                    const\n                        feature = this.owner.owner,\n                        proxyEl = feature.openProxy(drag);\n                    drag.cleaners.push(() => {\n                        feature.insertionPoint = null;\n                        proxyEl.remove();\n                    });\n                    return proxyEl;\n                },\n                dragMove(drag) {\n                    // Use the Feature's moveProxy\n                    return this.owner.owner.moveProxy(drag);\n                },\n                close() {\n                    this.owner.owner.proxyEl?.remove();\n                }\n            }\n        };\n    }\n    beforeDrag(drag) {\n        return this.owner.onDragStart(drag);\n    }\n    dragEnter(drag) {\n        if (drag.source.isMoving) {\n            drag.element = drag.targetElement;\n            this.dragProxy.open(drag);\n        }\n    }\n    dragMove(drag) {\n        if (drag.source.isMoving) {\n            this.dragProxy.dragMove(drag);\n        }\n        if (drag.source.isMoving || drag.source.isExternalZone) {\n            return this.owner.onDragMove(drag);\n        }\n    }\n    dragDrop(drag) {\n        if (drag.source.isMoving) {\n            this.dragProxy.close();\n        }\n        // Only react if we're dropping on our own ExternalZone.\n        // If dropping on the Calendar, we listen to its beforeDragMoveEnd and dragMoveEnd events\n        if (drag.target === this && (drag.source.isMoving || drag.source.isExternalZone)) {\n            return this.owner.onDragDrop(drag);\n        }\n    }\n}\n/**\n * A Calendar feature which allows new events to be dragged into the Calendar from an external source.\n *\n * The default source type is a Bryntum {@link Grid.view.Grid grid} which is loaded with\n * {@link Scheduler.model.EventModel event records}.\n *\n * Optionally, the source can be specified by configuring a {@link #config-dragRootElement}\n * and a {@link #config-dragItemSelector} which together, identify elements which represent\n * draggable events.\n *\n * In this case, a {@link #config-getRecordFromElement} may be specified to yield the details of\n * the record to be dragged.\n *\n * In the simplest case the `textContent` of the identified element is used as the event name and\n * {@link #config-getRecordFromElement} is not required. The event duration in this case will be\n * that specified in the receiving Calendar's {@link Calendar.view.Calendar#config-autoCreate} setting.\n *\n * When dropping an unscheduled event (An event that has no start and end date specified) into\n * a day cell (For example a MonthView or YearView), the start *time* set within the day cell\n * will default to the `startHour` property of the receiving Calendar's {@link Calendar.view.Calendar#config-autoCreate} setting.\n *\n * This feature is **disabled** by default.\n *\n * {@inlineexample Calendar/feature/ExternalEventSource.js}\n *\n * @demo Calendar/dragfromgrid\n *\n * @extends Calendar/feature/CalendarFeature\n * @classtype externalEventSource\n * @feature\n */\nexport default class ExternalEventSource extends CalendarFeature.mixin(Delayable) {\n    static get $name() {\n        return 'ExternalEventSource';\n    }\n    static get delayable() {\n        return {\n            onCalendarPaint : 'raf'\n        };\n    }\n    static get type() {\n        return 'externalEventSource';\n    }\n    static get configurable() {\n        return {\n            /**\n             * The grid, or `id` of a grid from which events are to be dragged.\n             * @config {Grid.view.Grid|String}\n             */\n            grid : {\n                $config : ['lazy'],\n                value   : null\n            },\n            /**\n             * If not dragging from a grid, which is the default mode, then an element from which\n             * dragging can take place must be supplied in the `dragRootElement` config.\n             *\n             * May also be specified as a selector which matches a unique element, or a simple element id.\n             *\n             * In this case a {@link #config-dragItemSelector} string, and {@link #config-getRecordFromElement}\n             * function must be supplied to allow event records to be sourced from the element, for example:\n             *\n             * ```javascript\n             * features : {\n             *     externalEventSource : {\n             *         dragRootElement  : '#mySourceElementId',\n             *         dragItemSelector : '.my-item-class'\n             *     }\n             * }```\n             * @config {HTMLElement|String}\n             */\n            dragRootElement : null,\n            /**\n             * If not dragging from a grid, which is the default mode, then a selector which identifies\n             * draggable elements within the {@link #config-dragRootElement}.\n             *\n             * In the simplest case, the identified element may contain simply a string which is used\n             * as the event name, for example:\n             *\n             * ```javascript\n             * features : {\n             *     externalEventSource : {\n             *         dragRootElement  : '#mySourceElementId',\n             *         dragItemSelector : '.my-item-class'\n             *     }\n             * }```\n             * @config {String}\n             */\n            dragItemSelector : null,\n            /**\n             * If not dragging from a grid, which is the default mode, then a function which returns\n             * an event record to drag from a passed element must be supplied.\n             *\n             * In this case a {@link #config-dragRootElement} and a {@link #config-dragItemSelector} string\n             * may be supplied to allow event records to be sourced from the element.\n             *\n             * If the element identified by the {@link #config-dragItemSelector} just contains an event\n             * name to create, this configuration is optional. A new event will be created by that name, for example:\n             *\n             * ```javascript\n             * features : {\n             *     externalEventSource : {\n             *         dragRootElement  : '#mySourceElementId',\n             *         dragItemSelector : '.my-item-class',\n             *         getRecordFromElement(element) {\n             *             // Return an object from which an EventModel can be created.\n             *             // Same format as loading an EventStore. { name : 'name', startDate: ''} etc\n             *             return myController.createRecordFromElement(element);\n             *         }\n             *     }\n             * }```\n             *\n             * @config {Function|String}\n             * @param {HTMLElement} element HTML element\n             * @returns {Scheduler.model.EventModel|null}\n             */\n            getRecordFromElement : function(element) {\n                const grid = this.grid || (this.grid = Widget.fromElement(element, 'grid'));\n                if (grid) {\n                    return grid.getRecordFromElement(element);\n                }\n                // The simplest implementation is that the elements identified by\n                // the selector yield the event name.\n                return element.innerText;\n            },\n            /**\n             * By default, the proxy shown when \"picking up\" the grid row is hidden\n             * when dragging over the calendar because the {@link Calendar.feature.CalendarDrag}\n             * feature automatically shows a drop position indicator which shows where the\n             * proposed new event will be.\n             * @config {Boolean}\n             * @default\n             */\n            hideExternalProxy : true,\n            /**\n             * An object which overrides or augments the default configuration for the\n             * {@link Core.mixin.Draggable} which handles picking up events.\n             *\n             * This is only necessary if there is no {@link #config-grid} specified.\n             * @config {Object} [draggable]\n             * @default\n             */\n            draggable : {\n                $config : ['lazy'],\n                value   : {}\n            },\n            /**\n             * An object which, if present, causes creation of a {@link Core.mixin.Droppable} which\n             * handles dropping events *from* the Calendar into the external location.\n             *\n             * In the simplest configuration, configure this as `true`.\n             *\n             * __Important:__ when dropping on an external source, the record is _not_ removed\n             * from the Calendar's `eventStore`. You will need to listen for the {@link #event-dropExternal} event.\n             * @config {Object|Boolean} [droppable]\n             * @default\n             */\n            droppable : {\n                $config : ['lazy'],\n                value   : null\n            },\n            /**\n             * Used when {@link #config-droppable} is used, and the external source is a Grid. This\n             * allows us to track the over row to highlight the insertion point.\n             * @private\n             */\n            insertionPoint : null\n        };\n    }\n    // This is deferred to the next AF to allow the configured grid ID to be available\n    onCalendarPaint({ source : calendar, firstPaint }) {\n        // Ingestion of Draggable, and within that, grid is deferred until the host Calendar is painted\n        if (firstPaint) {\n            const {\n                    draggable = {},\n                    droppable = {}\n                }    = this,\n                zone = new ExternalZone({\n                    view : this.grid,\n                    ...draggable,\n                    ...droppable\n                });\n            if (this._draggable) {\n                this._draggable = zone;\n            }\n            if (this._droppable) {\n                this._droppable = zone;\n            }\n        }\n        // We neede to hook into the CalendarDrag's move ending events which are fired through the client.\n        // We need to get in at that point so that we can veto the \"before\" event and fire our own\n        // completion event after the event transfer has been completed.\n        calendar.ion({\n            beforeDragMoveEnd : 'onBeforeDragMoveEnd',\n            dragMoveEnd       : 'onDragMoveEnd',\n            thisObj           : this\n        });\n    }\n    onBeforeDragMoveEnd({ drag }) {\n        // A before drop on the Calendar. We only react if it is in fact an external drop.\n        if (drag.source === this.draggable) {\n            drag.dropOnCalendar = true;\n            const\n                gridStore = this.grid?.store,\n                result    = this.client.trigger('dropExternal', drag);\n            // Handler may change state. If a chained store, it may need refilling\n            gridStore?.isChained && gridStore.fillFromMaster();\n            return result;\n        }\n    }\n    onDragMoveEnd({ drag }) {\n        // An after drop on the Calendar. We only react if it is in fact an external drop.\n        if (drag.source === this.draggable) {\n            return this.client.trigger('afterDropExternal', drag);\n        }\n    }\n    onDragStart(drag) {\n        const\n            me             = this,\n            {\n                client,\n                grid\n            }              = me,\n            { eventStore } = client,\n            { modelClass } = eventStore;\n        // If mousedown was not on our Draggable's dragItemSelector, veto drag start\n        if (!drag.itemElement) {\n            return false;\n        }\n        let eventRecord = me.callback(me.getRecordFromElement, me, [drag.itemElement]);\n        if (eventRecord.isModel) {\n            // CalendarDrag interrogates this to see if it should \"removeFromExternalStore\"\n            if (grid) {\n                drag.set('sourceStore', grid.store);\n            }\n            if (!eventRecord.isEventModel) {\n                eventRecord = eventStore.createRecord(eventRecord.data);\n            }\n        }\n        else {\n            if (typeof eventRecord === 'string') {\n                const\n                    autoCreate = client.activeView.autoCreate || client.autoCreate,\n                    duration   = DateHelper.parseDuration(autoCreate?.duration || oneHour);\n                eventRecord = {\n                    [modelClass.getFieldDataSource('name')]         : eventRecord,\n                    [modelClass.getFieldDataSource('duration')]     : duration.magnitude,\n                    [modelClass.getFieldDataSource('durationUnit')] : duration.unit\n                };\n            }\n            eventRecord = eventStore.createRecord(eventRecord);\n        }\n        drag.set('sourceStore', me.grid?.store);\n        drag.set('eventRecord', eventRecord);\n        drag.eventRecord = eventRecord;\n    }\n    onDragMove(drag) {\n        const { grid } = this;\n        if (grid) {\n            const\n                row    = grid.rowManager.getRowFor(drag.targetElement),\n                record = row && grid.store.getAt(row.index);\n            // If we over a row, that is *not* the row for the dragging record...\n            if (row) {\n                const isAbove = drag.lastMoveEvent.clientY < row.getRectangle(Object.keys(grid.subGrids)[0]).center.y;\n                drag.overIndex  = row.index;\n                drag.overRecord = record;\n                drag.isAbove    = isAbove;\n                this.insertionPoint = record === drag.peek('eventRecord') ? {} : { row, isAbove };\n            }\n            // If not over a row, see if we're dropping in free space after the bottom row (if present)\n            // After the headerContainer if no rows present.\n            else if (grid.contains(drag.targetElement)) {\n                const hcCls = grid.headerContainer.classList;\n                drag.overIndex = -1;\n                this.insertionPoint = {\n                    row : grid.rowManager.bottomRow || {\n                        addCls    : c => hcCls.add(c),\n                        removeCls : c => hcCls.remove(c)\n                    }\n                };\n            }\n            // We've exited the Grid\n            else {\n                drag.overIndex = NaN;\n                this.insertionPoint = null;\n            }\n        }\n        drag.eventRecord = drag.data.get('eventRecord');\n        /**\n         * This event is fired on the owning Calendar when dragging an event from the calendar over the\n         * external source __if the {@link #config-droppable} was configured__.\n         *\n         * __If a {@link #config-grid} was configured as the external source, a dropping\n         * insertion point will be displayed in the grid__.\n         *\n         * If the external source is simply a set of HTML elements, your application must\n         * process this gesture.\n         * @event dragMoveExternal\n         * @on-owner\n         * @param {Scheduler.model.EventModel} eventRecord The event record being dragged.\n         * @param {HTMLElement} itemElement The element in which the drag gesture started.\n         * @param {HTMLElement} targetElement The current over element.\n         * @param {Event} domEvent The pointer event associated with the drag point.\n         * @param {Number} overIndex *If {@link #config-grid} was specified*, the index of the row\n         * being moved over;\n         * @param {Core.data.Model} overRecord *If {@link #config-grid} was specified*, the record\n         * being moved over;\n         * @param {Boolean} isAbove *If {@link #config-grid} was specified*, `true` if the pointer\n         * position is above the halfway line of the over row.\n         * @param {Boolean} altKey `true` if the Alt key was down when the last event was processed.\n         * @param {Boolean} ctrlKey `true` if the Ctrl key was down when the last event was processed.\n         * @param {Boolean} metaKey `true` if the Meta key was down when the last event was processed.\n         * @param {Boolean} shiftKey `true` if the Shift key was down when the last event was processed.\n         */\n        this.client.trigger('dragMoveExternal', drag);\n    }\n    changeInsertionPoint(ip, was) {\n        if (ip?.row !== was?.row || ip?.isAbove !== was?.isAbove) {\n            return ip;\n        }\n    }\n    updateInsertionPoint(ip, was) {\n        was?.row?.removeCls(was.isAbove ? 'b-drop-above' : 'b-drop-below');\n        ip?.row?.addCls(ip.isAbove ? 'b-drop-above' : 'b-drop-below');\n    }\n    async onDragDrop(drag) {\n        const\n            {\n                client,\n                grid\n            }               = this,\n            { eventStore }  = client,\n            { eventRecord } = drag,\n            gridStore       = grid?.store,\n            sameStore       = gridStore === eventStore || gridStore?.masterStore === eventStore;\n        /**\n         * This event is fired on the owning Calendar when dropping an event from the calendar on the\n         * external source __if the {@link #config-droppable} was configured__. Returning `false`\n         * prevents the gesture from being completed.\n         *\n         * __If a {@link #config-grid} was configured as the external source, the record will be\n         * removed from the Calendar's event store and inserted to the grid's store__.\n         *\n         * If the external source is simply a set of HTML elements, your application must\n         * process this gesture.\n         * @event dropExternal\n         * @preventable\n         * @on-owner\n         * @param {Scheduler.model.EventModel} eventRecord The event record being dragged.\n         * @param {Boolean} dropOnCalendar `true` if the drop gesture is over the client Calendar.\n         * This feature also allows drag *out* of the Calendar and onto the external event source\n         * if the {@link #config-droppable} config is set.\n         * @param {HTMLElement} itemElement The element in which the drag gesture started.\n         * @param {HTMLElement} targetElement The current over element.\n         * @param {Event} domEvent The pointer event associated with the drag point.\n         * @param {Number} overIndex *If {@link #config-grid} was specified*, the index of the row\n         * being moved over;\n         * @param {Core.data.Model} overRecord *If {@link #config-grid} was specified*, the record\n         * being moved over;\n         * @param {Boolean} isAbove *If {@link #config-grid} was specified*, `true` if the pointer\n         * position is above the halfway line of the over row.\n         * @param {Boolean} altKey `true` if the Alt key was down when the last event was processed.\n         * @param {Boolean} ctrlKey `true` if the Ctrl key was down when the last event was processed.\n         * @param {Boolean} metaKey `true` if the Meta key was down when the last event was processed.\n         * @param {Boolean} shiftKey `true` if the Shift key was down when the last event was processed.\n         */\n        if (client.trigger('dropExternal', drag) === false) {\n            // Handler may change state. If a chained store, it may need refilling\n            gridStore?.isChained && gridStore.fillFromMaster();\n            return;\n        }\n        // It is a drop on an external Grid\n        if (!isNaN(drag.overIndex)) {\n            // The event is being dragged out from the Calendar's eventStore\n            // and our store is *not* based on the Calendar's eventStore.\n            // If the source view is a resource-specific view, this gesture is\n            // just a deassign, so only remove if the source view is not resource-specific.\n            if (eventStore.includes(eventRecord) && !sameStore && !drag.source.view.resource) {\n                eventStore.remove(eventRecord);\n            }\n            // The source store is chained off the main calendar eventStore.\n            // In this case (Assuming the dropExternal handler set the record state to change its\n            // filtered in/out status), this is a move event.\n            if (sameStore) {\n                eventStore.move(eventRecord, eventStore.getAt(drag.overIndex + drag.isAbove ? 1 : 0));\n            }\n            else {\n                gridStore.insert(drag.overIndex + (drag.isAbove ? 0 : 1), eventRecord);\n            }\n            gridStore?.isChained && gridStore.fillFromMaster();\n        }\n        client.trigger('afterDropExternal', drag);\n    }\n    openProxy(drag) {\n        const\n            { grid } = this,\n            sourceEl = drag.element.closest(this.draggable.dragItemSelector) || drag.element,\n            nameCell = grid ? sourceEl.querySelector('[data-column=\"name\"]') : sourceEl,\n            proxyEl  = this.proxyEl || (this.proxyEl = DomHelper.createElement({\n                className : 'b-grid-to-cal-drag-proxy'\n            }));\n        proxyEl.innerHTML = drag.peek('eventRecord')?.name || nameCell?.innerHTML || this.owner.L('newEvent');\n        this.proxyOffset = EventHelper.getClientPoint(drag.event).getDelta(Rectangle.from(sourceEl));\n        (grid?.element || this.dragRootElement).parentNode.appendChild(proxyEl);\n        return proxyEl;\n    }\n    moveProxy(drag) {\n        const { proxyEl } = this;\n        if (proxyEl) {\n            // Hide the proxy if the target droppable is a Calendar and we are configured to do so\n            if (this.client.owns(drag.targetElement) && this.hideExternalProxy) {\n                proxyEl.classList.add('b-hide-display');\n            }\n            else {\n                // Align the proxy to [10, 10] from the pointer\n                proxyEl.classList.remove('b-hide-display');\n                DomHelper.alignTo(proxyEl, EventHelper.getClientPoint(drag.event).translate(10, 10), {\n                    align : 't0-t0'\n                });\n            }\n        }\n    }\n    changeDragRootElement(dragRootElement) {\n        if (typeof dragRootElement === 'string') {\n            dragRootElement = document.querySelector(dragRootElement) || document.getElementById(dragRootElement);\n        }\n        return dragRootElement;\n    }\n    changeDraggable(draggable) {\n        const\n            { grid }             = this,\n            dragRootElement      = grid?.contentElement || this.dragRootElement,\n            { dragItemSelector } = this;\n        draggable = ExternalEventSource.mergeConfigs({\n            owner : this,\n            grid\n        }, draggable);\n        if (dragRootElement) {\n            draggable.dragRootElement = dragRootElement;\n        }\n        if (dragItemSelector) {\n            draggable.dragItemSelector = dragItemSelector;\n        }\n        return draggable;\n    }\n    changeDroppable(droppable) {\n        const\n            { grid }             = this,\n            dropRootElement      = grid?.contentElement || this.dropRootElement;\n        if (droppable) {\n            droppable = ExternalEventSource.mergeConfigs({\n                owner : this,\n                grid\n            }, droppable);\n            if (dropRootElement) {\n                droppable.dropRootElement = dropRootElement;\n            }\n        }\n        return droppable;\n    }\n    changeGrid(grid) {\n        if (typeof grid === 'string') {\n            grid = Widget.getById(grid);\n        }\n        return grid;\n    }\n}\nExternalEventSource.initClass();\nExternalEventSource._$name = 'ExternalEventSource';", "import CalendarFeature from './CalendarFeature.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport MessageDialog from '../../Core/widget/MessageDialog.js';\n/**\n * @module Calendar/feature/LoadOnDemand\n */\n/**\n * Loads the host Calendar's {@link Scheduler.view.mixin.SchedulerStores#config-crudManager CrudManager} on demand\n * as the date range required to produce the UI changes.\n *\n * Passes the requested `startDate` and `endDate` as extra HTTP parameters along with the load request.\n *\n * By default, the HTTP parameters are called `'startDate'` and `'endDate'`. This is configurable using the\n * {@link #config-startDateParamName} and {@link #config-endDateParamName} configs.\n *\n * The date values are formatted according to the {@link #config-dateFormat} config.\n *\n * Usage:\n *\n * ```javascript\n * new Calendar({\n *     features : {\n *         loadOnDemand : true\n *     }\n * });\n * ```\n *\n * ## Using recurring events\n * When using this feature when recurring events are in the database, *all recurring events* which\n * started before the requested start date, and have not yet finished recurring MUST be sent as part\n * of the return packet so that the Calendar is able to populate its UI.\n *\n * Only the base recurring event *definition* is stored in the Calendar's EventStore.\n *\n * When asked to yield a set of events for a certain date range for creating a UI, the EventStore\n * *automatically* interpolates any occurrences of recurring events into the results. They do not\n * occupy slots in the EventStore for every date in their repetition range (that would be very\n * inefficient, and *might* be infinite).\n *\n * ## Handling data load failures\n * If a network or server error is detected, the {@link Calendar.view.Calendar} will fire a\n * {@link #event-loadOnDemandFail} event so that an application can produce an error UI and\n * handle the situation.\n *\n * A handler should return `false` to prevent the default provided error UI from showing.\n *\n * If there is no handler, or the handler __does not__ return `false`, a default error UI is\n * shown using `{@link Core.widget.MessageDialog#function-alert MessageDialog}`.\n *\n * This feature is **disabled** by default.\n *\n * @extends Calendar/feature/CalendarFeature\n * @classtype loadOnDemand\n * @feature\n */\nexport default class LoadOnDemand extends CalendarFeature {\n    static $name = 'LoadOnDemand';\n    static type = 'loadOnDemand';\n    static get configurable() {\n        return {\n            /**\n             * The name of the HTTP parameter which contains the start date of the view requiring new data.\n             * @config {String}\n             * @default\n             */\n            startDateParamName : 'startDate',\n            /**\n             * The name of the HTTP parameter which contains the end date of the view requiring new data.\n             * @config {String}\n             * @default\n             */\n            endDateParamName : 'endDate',\n            /**\n             * The {@link Core.helper.DateHelper#function-format-static DateHelper} format string to use to\n             * encode the start date and end date of the events to load when the view requires a new date range.\n             * @config {String}\n             * @default\n             */\n            dateFormat : 'YYYY-MM-DD',\n            /**\n             * A function, or name of a function in the ownership hierarchy which may be called\n             * to mutate the `options` packet that is passed to the {@link Scheduler.data.CrudManager}\n             * {@link Scheduler.crud.AbstractCrudManagerMixin#function-load} method.\n             * One possible use of this function is to mutate the `options.request.params` object to add extra\n             * parameters for the server.\n             *\n             * @config {Function|String}\n             * @param {Object} options The `options` parameter to be sent to the {@link Scheduler.data.CrudManager}\n             *   {@link Scheduler.crud.AbstractCrudManagerMixin#function-load} method.\n             * @param {Object} options.dateRangeRequested An object containing the start and end dates of the range to load.\n             * @param {Date} options.dateRangeRequested.startDate The start date of the range to request.\n             * @param {Date} options.dateRangeRequested.endDate The end date of the range to request. **Note that Dates are timestamps**.\n             * @param {Object} options.request A configuration object for the CrudManager load request\n             * @param {Object} options.request.params An object where the property name is the HTTP parameter name and the property value is the parameter value.\n             * @returns {void}\n             */\n            beforeRequest : null,\n            /**\n             * By default, if a view requests a date range that we have already loaded, no\n             * network request is made, and the events will be loaded from the current content\n             * of the event store.\n             *\n             * To make the feature load a new event block on every request for a __new__ date range,\n             * configure this as `true`.\n             * @config {Boolean}\n             * @default false\n             */\n            alwaysLoadNewRange : null,\n            /**\n             * Configure this as `true` to clear the event store when a new date range has been requested\n             * instead of leaving it until the load of the new data to correct the store contents,\n             *\n             * Setting this to true clears the event store prior to requesting the data load.\n             * @config {Boolean}\n             * @default false\n             */\n            clearOnNewRange : null\n        };\n    }\n    construct(config) {\n        const { client } = config;\n        // The purpose of this feature is to load fresh data, so it should not use syncDataOnLoad.\n        // This can be automatically set by framework wrapper, so we must ensure it is false.\n        client.eventStore.syncDataOnLoad = false;\n        // When the client requests a range of dates from its eventStore, we get notified.\n        // If the eventStore has not successfully loaded that range, we load that range.\n        client.ion({\n            dateRangeRequested : 'onClientDateRangeRequested',\n            thisObj            : this\n        });\n        // This to register the date range that the operation just successfully loaded.\n        // We register the loaded date range *before* the response is applied so that\n        // when UI requests which emanate from the impending application of the new dataset\n        // ask for date ranges requests, the range will be detected as already present.\n        client.crudManager.ion({\n            beforeLoadApply : 'onCrudManagerBeforeApply',\n            thisObj         : this,\n            prio            : 9999\n        });\n        super.construct(...arguments);\n    }\n    // Tests if the CrudManager has an outstanding load request which would satisfy the passed date range\n    hasOutstandingLoadFor(startDate, endDate) {\n        const { load } = this.client.crudManager.activeRequests;\n        if (load) {\n            const otherDateRangeRequested = load.options?.dateRangeRequested;\n            // If the outstanding load request encompasses ours, allow it to go through\n            // We do not need to do anything.\n            if (otherDateRangeRequested && DateHelper.timeSpanContains(\n                otherDateRangeRequested.startDate,\n                otherDateRangeRequested.endDate,\n                startDate,\n                endDate\n            )) {\n                return true;\n            }\n        }\n    }\n    // We observe our CrudManager's successful loads and register the date range requested.\n    // This is so that when a client dateRangeChange event is encountered, we can only\n    // trigger a load if the date range is not already loaded unless alwaysLoadNewRange is set..\n    onCrudManagerBeforeApply({ response, options }) {\n        // If it was a full load from a mode which doesn't know about this feature such as\n        // a Scheduler, that will have requested an unranged load and the last range loaded\n        // will be unknown. In this case the next request will *always* trigger a load.\n        this.lastRangeLoaded = response.success && options?.dateRangeRequested;\n    }\n    onClientDateRangeRequested({\n        new : {\n            startDate,\n            endDate\n        },\n        changed\n    }) {\n        const\n            me         = this,\n            { client } = me;\n        // alwaysLoadNewRange is only valid for responding to *new* date range requests.\n        // Otherwise it responds even if the request was satisfied, and an infinite\n        // load->refresh->getEvents->rangeRequested->load loop would occur.\n        if (!changed && me.alwaysLoadNewRange) {\n            return;\n        }\n        // Setting to clear the store down on range change.\n        // Long running events from one month will show up in the next month.\n        // Set this to clear the store. Of course the same events will only get loaded again\n        // because they are long running and intrude into the new month but\n        // this is a cosmetic issue for app developers to choose.\n        if (changed) {\n            DomHelper.addTemporaryClass(client.element, 'b-notransition', 100, client);\n            if (me.clearOnNewRange) {\n                client.eventStore.clear(true);\n                me.lastRangeLoaded = null;\n            }\n        }\n        const { lastRangeLoaded } = me;\n        // Check for whether we have already loaded the requested range unless we are configured to always load.\n        if (lastRangeLoaded && !me.alwaysLoadNewRange) {\n            const {\n                startDate : lastStartDate,\n                endDate   : lastEndDate\n            } = me.lastRangeLoaded;\n            // Our loaded range already contains this range\n            if (DateHelper.timeSpanContains(lastStartDate, lastEndDate, startDate, endDate)) {\n                return;\n            }\n        }\n        if (!me.disabled && !me.hasOutstandingLoadFor(startDate, endDate)) {\n            // Register the range that the view needs.\n            // All requested date ranged will be merged into one load\n            me.loadDateRange(startDate, endDate);\n        }\n    }\n    /**\n     * Reloads the currently loaded date range.\n     *\n     * If your app detects that the data may be stale, or needs to periodically refresh the data,\n     * this method may be used to issue a server request to reload the currently loaded date range.\n     */\n    refresh() {\n        const { lastRangeLoaded } = this;\n        if (lastRangeLoaded) {\n            this.loadDateRange(lastRangeLoaded.startDate, lastRangeLoaded.endDate);\n        }\n    }\n    loadDateRange(startDate, endDate) {\n        const\n            me              = this,\n            { pendingLoad } = me;\n        // We gather the widest date range that is asked for, and the final range\n        // is requested in the next time frame.\n        if (pendingLoad) {\n            pendingLoad.startDate = DateHelper.min(startDate, pendingLoad.startDate);\n            pendingLoad.endDate = DateHelper.max(endDate, pendingLoad.endDate);\n        }\n        else {\n            me.pendingLoad = {\n                startDate,\n                endDate\n            };\n            me.client.requestAnimationFrame(() => me.load());\n        }\n    }\n    async load() {\n        const\n            me = this,\n            {\n                client,\n                beforeRequest,\n                dateFormat\n            }  = me,\n            {\n                crudManager\n            }  = client,\n            {\n                load\n            }  = crudManager.activeRequests,\n            {\n                startDate,\n                endDate\n            }  = me.pendingLoad;\n        const options = {\n            dateRangeRequested : me.pendingLoad,\n            request            : {\n                params : {\n                    [me.startDateParamName] : DateHelper.format(startDate, dateFormat),\n                    [me.endDateParamName]   : DateHelper.format(endDate, dateFormat)\n                }\n            }\n        };\n        // Ensure that subsequent loadDateRange requests queue up.\n        me.pendingLoad = null;\n        // allow app developers to mutate the request\n        if (beforeRequest) {\n            me.callback(beforeRequest, client, [options]);\n        }\n        if (load) {\n            // If there is already a load request in flight which would satisfy the date range\n            // Alow it to go through.\n            if (me.hasOutstandingLoadFor(startDate, endDate)) {\n                return;\n            }\n            try {\n                await crudManager.cancelRequest(load.desc, load.reject);\n            }\n            catch (e) {\n                // swallow rejected load Promise exception\n            }\n        }\n        let result;\n        try {\n            result = await crudManager.load(options);\n        }\n        catch (e) {\n            /**\n             * Fires when the {@link Calendar.feature.LoadOnDemand} feature detects that a request\n             * for data from the server has failed.\n             *\n             * An event listener handler may produce an error UI.\n             *\n             * If no handler returns `false`, then a default error UI is shown\n             * using `{@link Core.widget.MessageDialog#function-alert MessageDialog}`.\n             * @event loadOnDemandFail\n             * @param {Response} rawResponse The HTTP `fetch` response object.\n             * @param {Object} request The CrudManager load data block.\n             * @param {Object} response The decoded JSON response.\n             * @on-owner\n             */\n            if (!client.isDestroyed && client.trigger('loadOnDemandFail', e) !== false) {\n                MessageDialog.alert({\n                    title   : client.L('L{Calendar.loadFail}'),\n                    message : e.message\n                });\n            }\n        }\n        /**\n         * Fires when the {@link Calendar.feature.LoadOnDemand} feature has loaded a range of events.\n         * @event dateRangeLoad\n         * @param {Object} response The decoded JSON response.\n         * @param {Object} options The options object passed into the CrudManager {@link Scheduler.data.CrudManager}\n         * {@link Scheduler.crud.AbstractCrudManagerMixin#function-load} method.\n         * @param {Date} startDate The start date of the range to request.\n         * @param {Date} endDate The end date of the range to request. **Note that Dates are timestamps**.\n         * @on-owner\n         */\n        (result && !client.isDestroyed) && client.trigger('dateRangeLoad', { response : result.response, options, startDate, endDate });\n    }\n}\n// Register this feature type with its Factory\nLoadOnDemand.initClass();\nLoadOnDemand._$name = 'LoadOnDemand';", "import Exporter from '../../../../Grid/feature/export/exporter/Exporter.js';\nimport TemplateHelper from '../../../../Core/helper/TemplateHelper.js';\nimport Widget from '../../../../Core/widget/Widget.js';\nimport BrowserHelper from '../../../../Core/helper/BrowserHelper.js';\n/**\n * @module Calendar/feature/print/printer/Printer\n */\n/**\n * Base class for all printers\n * @extends Grid/feature/export/exporter/Exporter\n * @internal\n */\nexport default class Printer extends Exporter {\n    restoreState({ client }) {}\n    saveState({ client }) {}\n    cloneElement(element, target = this.element, clear = true) {\n        if (clear) {\n            target.innerHTML = '';\n        }\n        target.appendChild(element.cloneNode(true));\n    }\n    /**\n     * Template of an extracted page.\n     * @param {Object} data Data for the page template\n     * @returns {String}\n     */\n    pageTpl(data) {\n        const\n            {\n                config,\n                title,\n                header,\n                footer,\n                styles,\n                htmlClasses,\n                bodyStyle,\n                bodyClasses = [`b-${this.constructor.type}`, ...this.owner.bodyClasses, ...Widget.outerCls],\n                paperHeight,\n                paperWidth,\n                html\n            }          = data,\n            // Safari's print returns immediately, so we can't immediately remove the window.\n            // It is removed if ever needed again.\n            afterPrint = BrowserHelper.isSafari ? '' : 'window.removeElement && window.removeElement();',\n            // Don't run print script in debug mode\n            script     = !config?.debug ? `<script type=\"text/javascript\">window.addEventListener('load', function() { window.print(); ${afterPrint} });</script>` : '';\n        return TemplateHelper.tpl`\n            <!DOCTYPE html>\n            <html class=\"${htmlClasses}\" style=\"width: ${paperWidth}in; height: ${paperHeight}in;\">\n                <head>\n                    <meta content=\"text/html; charset=UTF-8\" http-equiv=\"Content-Type\" />\n                    <title>${title}</title>\n                    ${styles.join('')}\n                </head>\n                <body class=\"b-print ${bodyClasses.join(' ')}\" style=\"width: ${paperWidth}in; height: ${paperHeight}in; ${bodyStyle}\">\n                    <div class=\"b-print-content\">\n                        ${header && `<div class=\"b-print-header\" style=\"width: 100%\">${header}</div>`}\n                        <div class=\"b-print-body\"><div class=\"b-print-viewport\">${html}</div></div>\n                        ${footer && `<div class=\"b-print-footer\" style=\"width: 100%\">${footer}</div>`}\n                    </div>\n                    ${script}\n                </body>\n            </html>`;\n    }\n}\nPrinter._$name = 'Printer';", "import Printer from './Printer.js';\nimport { PaperFormat } from '../../../../Grid/feature/export/Utils.js';\n/**\n * @module Calendar/feature/print/printer/CalendarPrinter\n */\nconst bigNumberProperty = {\n    configurable : true,\n    get          : () => Number.MAX_SAFE_INTEGER\n};\n/**\n * Helper class for the Calendar print feature.\n * @private\n */\nexport default class CalendarPrinter extends Printer {\n    static get $name() {\n        return 'CalendarPrinter';\n    }\n    static get type() {\n        return 'calendar';\n    }\n    getTotalHeight(client) {\n        const { activeView } = client;\n        switch (client.mode) {\n            case 'agenda':\n                return activeView.virtualScrollHeight;\n            case 'day' :\n                return activeView.dayContentElement.scrollHeight + activeView.alldayRowElement.offsetHeight;\n            case 'week':\n                return activeView.dayContentElement.scrollHeight + activeView.alldayRowElement.offsetHeight;\n            case 'month':\n                // Duplicating screen week row heights exactly.\n                if (this.owner.wysiwyg) {\n                    return activeView.weeksElement.scrollHeight + activeView.weekdaysHeader.offsetHeight + 10;\n                }\n                // If we're not doing wysiwyg, total height is set during content cloning.\n                break;\n            case 'year' :\n                return this.inchToPx(PaperFormat.A4.width);\n        }\n    }\n    getTotalWidth(client) {\n        switch (client.mode) {\n            case 'year' :\n                return this.inchToPx(PaperFormat.A4.height);\n            default:\n                return this.inchToPx(PaperFormat.A4.width);\n        }\n    }\n    async prepareComponent(config) {\n        const\n            me                   = this,\n            { owner }            = me,\n            { wysiwyg }          = owner,\n            shrinkwrapRowHeights = !wysiwyg,\n            { client }           = config,\n            { activeView }       = client;\n        me.exportMeta = {\n            title       : owner.callback(owner.titleRenderer, owner, [activeView]),\n            totalWidth  : me.getTotalWidth(client),\n            totalHeight : me.getTotalHeight(client),\n            subGrids    : {}\n        };\n        if (client.mode === 'month' && shrinkwrapRowHeights) {\n            Object.defineProperty(activeView, 'eventsPerCell', bigNumberProperty);\n            // Refresh with eventsPerCell at a Very Large Number so that all are rendered\n            // since we are shrinkwrapping the week rows.\n            activeView.doRefresh();\n        }\n        me.cloneElement(activeView.currentElement);\n        if (client.mode === 'month') {\n            let rowHeights;\n            // Measure the row heights based upon the number of rendered events (which will be all for that day)\n            // and the event height.\n            if (shrinkwrapRowHeights) {\n                rowHeights = activeView.shrinkwrapRowHeights;\n                delete activeView.eventsPerCell;\n                activeView.doRefresh();\n                // Total exported height must be all calculated heights\n                me.exportMeta.totalHeight = activeView.weekdaysHeader.offsetHeight + rowHeights.reduce((sum, r) => {\n                    return sum + r;\n                }, 5);\n            }\n            activeView.weekElements.forEach((el, i) => {\n                const clonedElement = me.element.querySelector(`[data-week=\"${el.dataset.week}\"]`);\n                clonedElement.style.minHeight = '';\n                if (shrinkwrapRowHeights) {\n                    clonedElement.style.flex = `0 0 ${rowHeights[i]}px`;\n                }\n                else if (wysiwyg) {\n                    clonedElement.style.flex = `1 0 ${el.offsetHeight}px`;\n                }\n                else {\n                    clonedElement.style.flex = `1 0 ${250 / 6}mm`;\n                }\n            });\n        }\n    }\n    pxToInch(value) {\n        return (value / 96).toFixed(2);\n    }\n}\n// HACK: terser/obfuscator doesn't yet support async generators, when processing code it converts async generator to regular async\n// function.\nCalendarPrinter.prototype.pagesExtractor = async function * pagesExtractor(config) {\n    const\n        me = this,\n        {\n            totalHeight,\n            totalWidth,\n            title\n        }  = me.exportMeta;\n    yield {\n        html : me.pageTpl({\n            config,\n            title,\n            html        : me.prepareExportElement(),\n            styles      : me.stylesheets,\n            paperWidth  : me.pxToInch(totalWidth),\n            paperHeight : me.pxToInch(totalHeight)\n        })\n    };\n};\nCalendarPrinter._$name = 'CalendarPrinter';", "import CalendarFeature from '../CalendarFeature.js';\nimport CalendarPrinter from './printer/CalendarPrinter.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\nimport DomHelper from '../../../Core/helper/DomHelper.js';\nimport '../../../Grid/feature/export/Print.js';\n/**\n * @module Calendar/feature/print/Print\n */\nconst emptyArray = Object.freeze([]);\n/**\n * This feature enables printing of the current Calendar mode.\n *\n * ## Usage\n *\n * ```javascript\n * const calendar = new Calendar({\n *     features : {\n *         print : true\n *     }\n * });\n *\n * // Simple print\n * calendar.print();\n * ```\n *\n * This feature is **disabled** by default.\n *\n * @demo Calendar/basic\n * @classtype print\n * @feature\n * @typings Grid.feature.export.Print -> Grid.feature.export.GridPrint\n * @typings Scheduler.feature.export.Print -> Scheduler.feature.export.SchedulerPrint\n */\nexport default class Print extends CalendarFeature {\n    static get $name() {\n        return 'Print';\n    }\n    static get type() {\n        return 'print';\n    }\n    static get configurable() {\n        return {\n            /**\n             * Config for printer.\n             * @config {Object}\n             * @private\n             */\n            printer : {\n                $config : ['lazy', 'nullify'],\n                value   : {\n                    type : 'calendar'\n                }\n            },\n            /**\n             * By default, a {@link Calendar.widget.MonthView} is rendered with the week rows\n             * shrinkwrapping their event content. That is, rows with no events are small, and rows\n             * containing events are expanded to make all events visible.\n             *\n             * To duplicate the on-screen appearance in terms of week row heights where empty rows\n             * are flexed to consume an equal amount of height, configure this as `true`.\n             * @config {Boolean}\n             * @default\n             */\n            wysiwyg : false,\n            /**\n             * The function to use to create the [&lt;title&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title) element for the print document.\n             * Defaults to using the {@link Scheduler.view.mixin.Describable#config-descriptionRenderer}\n             * of the active view. Note that this does not process HTML source.\n             *\n             * @config {Function|String}\n             * @param {Calendar.widget.mixin.CalendarMixin} source The view which triggered the event.\n             * @typings source -> {typeof CalendarMixin}\n             * @returns {String}\n             * @default\n             */\n            titleRenderer : activeView => activeView.description,\n            /**\n             * Map of printer classes to use in print feature\n             * @config {Map}\n             * @private\n             * @default\n             */\n            printers : new Map([[CalendarPrinter.type, CalendarPrinter]]),\n            /**\n             * This config is passed to the Grid print feature. Print dialog is ignored, instead Grid is printed with\n             * best default configs.\n             * @config {Object}\n             * @private\n             */\n            gridPrintConfig : null\n        };\n    }\n    construct() {\n        super.construct(...arguments);\n        this.client.print = this.print.bind(this);\n    }\n    changePrinter(config) {\n        const\n            me          = this,\n            printersMap = me.printersMap || (me.printersMap = new Map());\n        if (config) {\n            let printer;\n            const { type } = config;\n            if (printersMap.has(type)) {\n                printer = printersMap.get(type);\n                printer.setConfig(config);\n            }\n            else {\n                const printerClass = me.printers.get(type);\n                if (!printerClass) {\n                    throw new Error(`Printer type ${type} is not found. Make sure you've configured it`);\n                }\n                config = ObjectHelper.clone(config);\n                config.owner = me;\n                printer = new printerClass(config);\n                printer.relayAll(me);\n                printersMap.set(type, printer);\n            }\n            return printer;\n        }\n        else {\n            printersMap.forEach(printer => printer.destroy());\n        }\n    }\n    get bodyClasses() {\n        if (this.shrinkwrapRowHeights) {\n            return ['b-shrinkwrap-row-heights'];\n        }\n        return emptyArray;\n    }\n    /**\n     * Prints the current active view of the Calendar\n     * @privateparam config A config object for the Printer\n     */\n    async print(config = {}) {\n        const\n            me = this,\n            {\n                client,\n                printer\n            }  = me,\n            iframeId = `${client.id}-print-iframe`;\n        /**\n         * Fires on the owning Calendar before print starts. Return `false` to cancel the print.\n         * @event beforePrint\n         * @on-owner\n         * @preventable\n         * @param {Object} config Print config\n         */\n        if (client.trigger('beforePrint', { config, printer }) !== false) {\n            if (client.activeView.isEventList) {\n                await client.activeView.print(ObjectHelper.assign({\n                    exporterType           : 'multipagevertical',\n                    useRenderedColumnWidth : true\n                }, this.gridPrintConfig || {}));\n                client.trigger('print');\n            }\n            else {\n                config.client = client;\n                const pages = await me.printer.export(config);\n                if (config.debug) {\n                    client.trigger('print', pages);\n                }\n                else {\n                    // Remove existing iframe if it's there.\n                    // Safari can't wait until after print has finished, so it does not remove iframe after print\n                    document.getElementById(iframeId)?.remove();\n                    const iframe = DomHelper.createElement({\n                        id     : iframeId,\n                        class  : 'b-calendar-print-iframe',\n                        tag    : 'iframe',\n                        parent : document.body\n                    });\n                    iframe.contentWindow.removeElement = () => {\n                        iframe.remove();\n                        /**\n                         * Fires when print has finished\n                         * @event print\n                         */\n                        client.trigger('print', pages);\n                    };\n                    iframe.contentWindow.document.write(pages[0].html);\n                    iframe.contentWindow.document.close();\n                    return pages;\n                }\n            }\n        }\n    }\n}\nPrint.initClass();\nPrint._$name = 'Print';", "import CalendarFeature from './CalendarFeature.js';\nimport SchedulerScheduleMenu from '../../Scheduler/feature/ScheduleMenu.js';\n/**\n * @module Calendar/feature/ScheduleMenu\n */\n/**\n * A feature which adds a context menu to the unoccupied parts of calendar views.\n *\n * There is one predefined {@link #config-items item} provided by default:\n *\n * - `addEvent` Adds an event at the time point indicated by the click\n *\n * If the timepoint has only date-level granularity (Such as when clicking in a MonthView or\n * AgendaView, or YearView), the start time of the event will default to the configured\n * {@link Calendar.view.Calendar#config-autoCreate}'s `startHour` property.\n *\n * If the {@link Calendar.feature.EventEdit EventEdit} feature is enabled, the new event is passed for editing.\n *\n * {@inlineexample Calendar/feature/ScheduleMenu.js}\n *\n * The {@link #config-items} set can be reconfigured by providing an `items` property to this feature:\n *\n *```javascript\n * features : {\n *     scheduleMenu : {\n *         items : {\n *             // Knocks out the predefined addEvent item\n *             addEvent : null,\n *\n *             // Add our own custom item\n *             disableDate : {\n *                  icon    : 'b-fa b-fa-calendar-times',\n *                  text    : 'Mark date unavailable',\n *\n *                  // Will look up ownership chain and find the Calendar\n *                  handler : 'up.makeDateUnavailable'\n *             }\n *         }\n *     }\n * },\n * makeDateUnavailable({ date }) {\n *     // Pass to our own app logic\n *     this.disableDate(date);\n * }\n *```\n *\n * This feature is **enabled** by default.\n *\n * @demo Calendar/custom-menus\n * @extends Scheduler/feature/ScheduleMenu\n * @classtype scheduleMenu\n * @feature\n *\n * @typings Scheduler.feature.ScheduleMenu -> Scheduler.feature.SchedulerScheduleMenu\n */\nexport default class ScheduleMenu extends SchedulerScheduleMenu {\n    static get $name() {\n        return 'ScheduleMenu';\n    }\n    static get type() {\n        return 'scheduleMenu';\n    }\n    getDataFromEvent(event) {\n        const\n            { client }     = this,\n            { activeView } = client,\n            // Calendar has a defaultCalendar property for defaulting the resource\n            resourceRecord = client.resolveResourceRecord(event) || client.defaultCalendar;\n        // Base class is SchedulerScheduleMenu\n        if (activeView.isScheduler) {\n            this.client = activeView;\n        }\n        const result = super.getDataFromEvent(event);\n        // Only inject the resourceRecord as the Calendar's detected version if the superclass didn't find one.\n        // We may be hosting a Scheduler as a view which has its own opinions on this.\n        if (!result.resourceRecord) {\n            result.resourceRecord = resourceRecord;\n        }\n        this.client = client;\n        return result;\n    }\n    shouldShowMenu({ date, targetElement }) {\n        const\n            { client }     = this,\n            { activeView } = client;\n        if (activeView.isEventList && !activeView.isAgendaView) {\n            return false;\n        }\n        // Base class is SchedulerScheduleMenu\n        if (activeView.isScheduler) {\n            this.client = activeView;\n            const result = super.shouldShowMenu(...arguments);\n            this.client = client;\n            return result;\n        }\n        // We need a date and *not* an event element.\n        return Boolean(date && !targetElement.closest(client.eventSelector));\n    }\n    populateScheduleMenu({ items, domEvent, date }) {\n        super.populateScheduleMenu(...arguments);\n        const\n            { client }   = this,\n            { addEvent } = items;\n        if (addEvent) {\n            addEvent.onItem = () => {\n                const resourceRecord = client.activeView.getResourceRecord(domEvent);\n                // We must offer the preventable beforeAutoCreate event\n                if (client.activeView.trigger('beforeAutoCreate', { domEvent, date, resourceRecord }) !== false) {\n                    client.createEvent(date, resourceRecord);\n                }\n            };\n        }\n    }\n    changeMenu() {\n        const\n            me     = this,\n            result = super.changeMenu(...arguments);\n        // Set the owner to be the currently active view (or its active OverflowPopup)\n        // so that focus stays in that view's ownership tree.\n        result?.ion({\n            beforeShow({ source }) {\n                const\n                    { activeSubView }  = me.client,\n                    { _overflowPopup } = activeSubView;\n                source.owner = _overflowPopup?.containsFocus ? _overflowPopup : activeSubView;\n            }\n        });\n        return result;\n    }\n}\n// Register this feature type with its Factory\nCalendarFeature.register(ScheduleMenu.type, ScheduleMenu, true);\nScheduleMenu._$name = 'ScheduleMenu';", "import DomHelper from '../../Core/helper/DomHelper.js';\n/**\n * @module Calendar/layout/LayoutDim\n */\nconst\n    noCalcRe = /^[+-]?\\d+(?:\\.\\d+)?(?:%|px)?$/;\n/**\n * Helper class for layout size pairs.\n * @internal\n */\nexport default class LayoutDim {\n    static from(value) {\n        if (value == null) {\n            return null;\n        }\n        if (value instanceof LayoutDim) {\n            return value;\n        }\n        // isNaN('4')=false, isNaN('4%')=true (preserve strings like \"5% + 10px\")\n        if (!(Array.isArray(value) || (typeof value === 'string' && isNaN(value)))) {\n            value = Number(value);\n            value = (value < 1) ? [value, 0] : [0, value];\n        }\n        return new LayoutDim(...value);\n    }\n    static get(value) {\n        return LayoutDim.from(value) || LayoutDim.ZERO;\n    }\n    constructor(ratio, delta) {\n        this.r = ratio;\n        this.d = delta;\n    }\n    add(v) {\n        v = LayoutDim.from(v);\n        return v ? new LayoutDim(this.r + v.r, this.d + v.d) : this;\n    }\n    adjust(r, d) {\n        this.r += r || 0;\n        this.d += d || 0;\n        return this;\n    }\n    freeze() {\n        return Object.freeze(this);\n    }\n    px(range) {\n        return this.r * (range || 100) + this.d;\n    }\n    sub(v) {\n        v = LayoutDim.from(v);\n        return v ? new LayoutDim(this.r - v.r, this.d - v.d) : this;\n    }\n    * [Symbol.iterator]() {\n        yield 'r';\n        yield 'd';\n    }\n    stringify() {\n        const str = this.toString();\n        return noCalcRe.test(str) ? str : `calc(${str})`;\n    }\n    toString() {\n        const { r, d } = this;\n        let str;\n        if (r) {\n            str = DomHelper.percentify(r * 100);\n            if (d) {\n                str = `${str} + ${d}px`.replace('+ -', '- ');\n            }\n        }\n        else {\n            str = d ? `${d}px` : '0';\n        }\n        return str;\n    }\n}\nLayoutDim.ZERO = new LayoutDim(0, 0).freeze();\nLayoutDim._$name = 'LayoutDim';", "import DomHelper from '../../Core/helper/DomHelper.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport CalendarFeature from './CalendarFeature.js';\nimport CalendarZone from './CalendarZone.js';\nimport LayoutDim from '../layout/LayoutDim.js';\nimport AttachToProjectMixin from '../../Scheduler/data/mixin/AttachToProjectMixin.js';\n/**\n * @module Calendar/feature/TimeRanges\n */\n/**\n * A mutable object used to render an element of the time range.\n *\n * @typedef {Object} TimeRangeRenderData\n * @property {Calendar.model.TimeRangeModel} record The record being rendered\n * @property {String} color The color to be applied to the element\n * @property {Object} cls An object whose truthy property names will be added to the element's CSS `classList`\n * @property {Object} style An object containing style properties for the element\n * @property {TimeRangeRenderData} [outer] The render data for the outermost element. This property is present when\n * rendering any of the inner elements. The outer element is rendered after all inner elements, meaning this object\n * can be modified by an inner element renderer function.\n * @property {TimeRangeRenderData} [header] The render data for the header element. This property is present when\n * rendering the outermost element. The corresponding element has already been rendered, meaning that this object\n * should be considered read only.\n * @property {TimeRangeRenderData} [body] The render data for the body element. This property is present when\n * rendering the outermost element. The corresponding element has already been rendered, meaning that this object\n * should be considered read only.\n * @property {TimeRangeRenderData} [footer] The render data for the footer element. This property is present when\n * rendering the outermost element. The corresponding element has already been rendered, meaning that this object\n * should be considered read only.\n */\n/**\n * The object passed to a {@link Calendar.feature.TimeRanges#config-renderer} function.\n * @typedef {Object} TimeRangeRenderInfo\n * @property {TimeRangeRenderData} renderData The render data object to modify\n * @property {Calendar.model.TimeRangeModel} timeRange The record being rendered\n * @property {DomConfig} [domConfig] The default DOM config. This is only passed to the `outer` renderer and represents\n * the DOM config that will be used for the element. The `className` and `style` properties are applied after the\n * renderer returns.\n */\n/**\n * An object containing rendering methods for the various elements of a time range. All functions are optional. The\n * `footer` function is special in that there is no footer element by default. If a footer is desired, a `footer`\n * renderer function must be provided.\n *\n * @typedef {Object} TimeRangeRenderer\n * @property {Function} [outer] An optional function to be called to render the outermost element. This function is\n * passed a {@link Calendar.feature.TimeRanges#typedef-TimeRangeRenderInfo} object.\n * @property {Function} [body] An optional function to be called to render the body element. This function is passed\n * a {@link Calendar.feature.TimeRanges#typedef-TimeRangeRenderInfo} object.\n * @property {Function} [header] An optional function to be called to render the header element. This function is passed\n * a {@link Calendar.feature.TimeRanges#typedef-TimeRangeRenderInfo} object.\n * @property {Function} [footer] An optional function to be called to render the footer element. This function is passed\n * a {@link Calendar.feature.TimeRanges#typedef-TimeRangeRenderInfo} object.\n */\nconst\n    genericRenderer = renderData => ({\n        className : renderData.cls,\n        style     : renderData.style\n    }),\n    defaultRotation = {\n        end   : 'pos',\n        start : 'neg'\n    },\n    oppositeAlign = {\n        end   : 'start',\n        start : 'end'\n    },\n    valueFields = Object.entries({\n        alignment : 'alignment',\n        color     : 'color',\n        footer    : 'footer',\n        header    : 'name',\n        rotation  : 'rotation'\n    });\n/*\n    This class manages rendering time ranges in a Day/WeekView. Instances of this class are created by the\n    CalendarFeature via zoneTypes map.\n */\nclass DayZone extends CalendarZone {\n    static $name = 'DayZone';\n    static configurable = {\n        viewListeners : {\n            beforeLayoutEvents : 'onBeforeLayoutEvents'\n            // renderEvents       : 'onRenderEvents'\n        }\n    };\n    onBeforeLayoutEvents({ source, context }) {\n        // This event is fired by DayView.renderEvents\n        // We hook into that event which fires for each day even if there are no events so we can decorate the day\n        // with appropriate time ranges\n        const ranges = source.getTimeRanges(context.cellData.date, context.cellData.tomorrow);\n        if (ranges.length) {\n            const\n                { layout } = context,\n                footers = {},\n                headers = {},\n                clusters = [],\n                items    = [];\n            let children, item;\n            context.timeRangeHeaders = headers;\n            context.timeRanges = ranges;\n            for (const timeRange of ranges) {\n                item = layout.createLayoutItem(timeRange, context);\n                item.values = Object.fromEntries(valueFields.map(([name, fieldName]) => [name, timeRange[fieldName]]));\n                item.values.rotation = item.values.rotation || defaultRotation[item.values.alignment];\n                layout.clusterize(clusters, items, item, context);\n                children = context.dayDomConfig.children.inset;\n                children = children.children || (children.children = []);\n                children.push(this.renderTimeSpan(context, item, headers, footers));\n            }\n            if (headers.end || footers.end) {\n                context.dayDomConfig.className['b-dayview-inset-after'] = 1;\n            }\n            if (headers.start || footers.start) {\n                context.dayDomConfig.className['b-dayview-inset-before'] = 1;\n            }\n        }\n    }\n    renderPart(defaultRenderer, renderer, renderData, part, headerFooter, align, extraData) {\n        const\n            isFooter = part === 'footer',\n            { record } = renderData,\n            renderInfo = {\n                timeRange : record\n            };\n        let data = renderData,\n            domConfig, extraDom, value;\n        if (typeof part === 'string') {\n            renderData[part] = data = ObjectHelper.merge({\n                part,\n                record,\n                outer : renderData,\n                cls   : {\n                    [`b-cal-timerange-${part}`] : 1\n                }\n            }, extraData);\n            value = renderData.values[part];\n            if (value != null) {\n                renderInfo.value = data.value = value;\n            }\n        }\n        else {\n            extraDom = part;\n            part = 'outer';\n        }\n        defaultRenderer = defaultRenderer?.[part];\n        renderer = renderer?.[part];\n        renderInfo.renderData = data;\n        renderInfo.domConfig  = extraDom;\n        if (renderer) {\n            data.style = {};\n            const ret = renderer(renderInfo);\n            if (typeof ret === 'string') {\n                extraDom = Object.assign({ html : ret }, extraDom);\n            }\n            else if (ObjectHelper.isObject(ret)) {\n                domConfig = ret;\n            }\n        }\n        domConfig = domConfig || defaultRenderer?.(renderInfo);\n        if (extraDom) {\n            domConfig = ObjectHelper.merge(domConfig || {}, extraDom);\n        }\n        if (headerFooter && domConfig) {\n            align = (isFooter && oppositeAlign[align]) || align;\n            headerFooter[align] = (headerFooter[align] || 0) + 1;\n        }\n        data.domConfig = domConfig;\n        return domConfig;\n    }\n    renderTimeSpan(context, item, headers, footers) {\n        const\n            me = this,\n            { owner } = me,  // our feature\n            { defaultRenderer, renderer } = owner,\n            timeRange = item.eventRecord,\n            sizeSeconds = isNaN(item.end) ? 0 : Math.abs(item.end - item.start), // seconds\n            isRange = sizeSeconds > 1,\n            isLine = !isRange,\n            { rtl } = context.layout.owner,\n            { values } = item,\n            { alignment : align, color, rotation } = values,\n            renderData = {\n                color,\n                values,\n                record        : timeRange,\n                layoutContext : context,\n                cls           : {\n                    'b-readonly'                           : timeRange.readOnly,\n                    'b-rtl'                                : rtl,\n                    'b-cal-timerange'                      : 1,\n                    'b-cal-timerange-line'                 : isLine,\n                    'b-cal-timerange-narrow'               : isRange && sizeSeconds <= owner.narrowThreshold * 60,\n                    [`b-cal-timerange-align-${align}`]     : align,\n                    [`b-cal-timerange-rotate-${rotation}`] : isRange && rotation\n                }\n            };\n        // This minor fudge allows the background grid lines to show through (better aesthetically)\n        isRange && item.height.adjust(0, -1);\n        const styles = item.getStyles(rtl);\n        return DomHelper.normalizeChildren(me.renderPart(defaultRenderer, renderer, renderData, {\n            dataset : {\n                'timerange-id' : timeRange.id,\n                btip           : isLine && values.header || null\n            },\n            className : {\n                [timeRange.cls] : timeRange.cls\n            },\n            elementData : {\n                timeRange\n            },\n            style : {\n                top    : styles.top,\n                height : styles.height\n            },\n            children : isRange && {\n                header : me.renderPart(defaultRenderer, renderer, renderData, 'header', headers, align, {\n                    cls : {\n                        [timeRange.iconCls] : timeRange.iconCls\n                    }\n                }),\n                body   : me.renderPart(defaultRenderer, renderer, renderData, 'body'),\n                footer : me.renderPart(defaultRenderer, renderer, renderData, 'footer', footers, align)\n            }\n        }));\n    }\n}\n/**\n * This feature provides an easy way to highlight ranges of time in a calendar's day and week views. Each time range is\n * represented using the {@link Calendar.model.TimeRangeModel}.\n *\n * {@inlineexample Calendar/feature/TimeRanges.js}\n *\n * Time ranges can take a few different forms:\n *\n * - A line at the {@link Calendar.model.TimeRangeModel#field-startDate} with optional tooltip based on the\n *  {@link Calendar.model.TimeRangeModel#field-name}.\n * - A styled region between the {@link Calendar.model.TimeRangeModel#field-startDate} and\n *   {@link Calendar.model.TimeRangeModel#field-endDate}. The {@link Calendar.model.TimeRangeModel#field-cls} field is\n *   used to apply the desired style to the time range element.\n * - A titled region based on the {@link Calendar.model.TimeRangeModel#field-name} field, between the\n *   {@link Calendar.model.TimeRangeModel#field-startDate} and {@link Calendar.model.TimeRangeModel#field-endDate}. The\n *   {@link Calendar.model.TimeRangeModel#field-cls} field can be used to apply the styling to the time range element.\n *   The {@link Calendar.model.TimeRangeModel#field-color} and {@link Calendar.model.TimeRangeModel#field-iconCls}\n *   fields can be used to apply a background color and icon to the header element. An optional\n *   {@link Calendar.model.TimeRangeModel#field-footer} can also be added.\n *\n * ## ResourceTimeRanges\n *\n * If `resourceTimeRanges` are included in the loaded data, the results are only applied to views\n * which display that resource. This means subviews of a {@link Calendar.widget.ResourceView}.\n *\n * Be sure to see additional examples on Mar 4 (Wed) in the Live Demo.\n *\n * This feature is **disabled** by default.\n *\n * @demo Calendar/timeranges\n * @extends Scheduler/feature/TimeRanges\n * @classtype timeRanges\n * @feature\n *\n * @typings Scheduler.feature.TimeRanges -> Scheduler.feature.SchedulerTimeRanges\n */\nexport default class TimeRanges extends CalendarFeature.mixin(AttachToProjectMixin) {\n    static $name = 'TimeRanges';\n    static type = 'timeRanges';\n    static configurable = {\n        defaultRenderer : {\n            outer({ renderData }) {\n                const\n                    ret = genericRenderer(renderData),\n                    { color } = renderData;\n                if (color) {\n                    if (DomHelper.isNamedColor(color)) {\n                        ret.className[`b-cal-color-${color}`] = 1;\n                    }\n                    else {\n                        // Background color is in a pseudo element whose styles\n                        // come from CSS vars, so set the var locally to the element.\n                        (ret.style || (ret.style = {}))['--timerange-color'] = color;\n                    }\n                }\n                ret.className['b-cal-timerange-has-header'] = renderData.header?.domConfig;\n                return ret;\n            },\n            body : ({ renderData }) => genericRenderer(renderData),\n            header : ({ renderData, value }) => value ? {\n                ...genericRenderer(renderData),\n                children : [{\n                    className : {\n                        'b-cal-timerange-header-text' : 1\n                    },\n                    text : value\n                }]\n            } : null,\n            footer : ({ renderData, value }) => value ? {\n                ...genericRenderer(renderData),\n                children : [{\n                    className : {\n                        'b-cal-timerange-footer-text' : 1\n                    },\n                    text : value\n                }]\n            } : null\n        },\n        /**\n         * The number of pixels or proportion of the overall width to allocate for time range headers.\n         *\n         * Values less than 1 are the fractional proportion of the width (for example, 0.04 is 4% of the width),\n         * while values greater than or equal to 1 are a number of pixels.\n         * @config {Number}\n         * @default\n         */\n        headerWidth : 40,\n        narrowThreshold : 60,\n        /**\n         * An empty function by default, but provided so that you can override it.\n         *\n         * This function is called each time a time range is rendered to allow developers to mutate the element metadata,\n         * or the CSS classes to be applied to the rendered element.\n         *\n         * It's called with a {@link #typedef-TimeRangeRenderInfo} object containing the time span record, and a\n         * {@link #typedef-TimeRangeRenderData renderData} object which allows you to mutate event metadata such as\n         * `cls` and `style`.\n         *\n         * A non-null return value from the renderer is used as the element body content. A nullish return value results\n         * in the default renderer for the element.\n         *\n         * ```javascript\n         *  timeRanges : {\n         *      renderer ({ timeRange, renderData }) {\n         *          if (timeRange.name === 'Doctors appointment') {\n         *              renderData.style.fontWeight = 'bold';\n         *              renderData.cls['custom-cls'] = 1;\n         *\n         *              return 'Special doctors appointment';\n         *          }\n         *      }\n         *  }\n         * ```\n         * <div class=\"note\">When returning content, be sure to consider how that content should be encoded to avoid XSS\n         * (Cross-Site Scripting) attacks. This is especially important when including user-controlled data such as\n         * the event's `name`. The function {@link Core.helper.StringHelper#function-encodeHtml-static} as well as\n         * {@link Core.helper.StringHelper#function-xss-static} can be helpful in these cases.</div>\n         *\n         * For example:\n         * ```javascript\n         *  timeRanges : {\n         *      renderer ({ timeRange, renderData }) {\n         *          return StringHelper.xss`Special ${timeRange.name}`;\n         *      }\n         *  }\n         * ```\n         *\n         * For advanced rendering, this config can be a {@link #typedef-TimeRangeRenderer} object with rendering\n         * functions for individual elements: `header`, `body`, `footer`, and `outer`. When a function is provided,\n         * that is equivalent to passing the `header` renderer. In other words, the above example is equivalent to\n         * the following:\n         *\n         * ```javascript\n         *  timeRanges : {\n         *      renderer : {\n         *          header({ timeRange, renderData }) {\n         *              return StringHelper.xss`Special ${timeRange.name}`;\n         *          }\n         *      }\n         *  }\n         * ```\n         *\n         * @config {Function|TimeRangeRenderer} renderer\n         * @param {TimeRangeRenderInfo} info An object that contains data about the time span being rendered.\n         * @returns {String}\n         * @default\n         */\n        renderer : null,\n        zoneTypes : {\n            day      : DayZone,  // also covers WeekView\n            resource : DayZone\n        }\n    };\n    attachToProject(project) {\n        super.attachToProject(project);\n        this.detachListeners('project');\n        project.timeRangeStore?.ion({\n            name    : 'project',\n            change  : 'refresh',\n            thisObj : this\n        });\n        project.resourceTimeRangeStore?.ion({\n            name    : 'project',\n            change  : 'refresh',\n            thisObj : this\n        });\n    }\n    changeRenderer(renderer) {\n        if (typeof renderer === 'function') {\n            renderer = {\n                header : renderer\n            };\n        }\n        return renderer;\n    }\n    updateHeaderWidth(width) {\n        const el = this.owner?.element;\n        if (el) {\n            el.style.setProperty('--timerange-header-width', LayoutDim.from(width)?.toString());\n        }\n    }\n    refresh() {\n        this.client.refresh();\n    }\n}\n// Register this feature type with its Factory\nCalendarFeature.register(TimeRanges.type, TimeRanges);\nTimeRanges._$name = 'TimeRanges';", "import CalendarFeature from './CalendarFeature.js';\nimport FunctionHelper from '../../Core/helper/FunctionHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\n/**\n * @module Calendar/feature/WeekExpander\n */\n/**\n *\n * A Feature which, when present, adds a week row expansion tool to week rows in\n * {@link Calendar.widget.MonthView MonthView}s so that a row which contains overflowing cells\n * can be expanded to show all events with no overflow.\n *\n * ```javascript\n * const calendar = new Calendar({\n *     appendTo : 'container',\n *\n *     // Start life looking at this date\n *     date : new Date(2020, 9, 12),\n *\n *     features : {\n *         weekExpander : true\n *     },\n *\n *     // CrudManager arranges loading and syncing of data in JSON form from/to a web service\n *     crudManager : {\n *         transport : {\n *             load : {\n *                 url : 'data/data.json'\n *             }\n *         },\n *         autoLoad : true\n *     }\n * });```\n *\n * <div class=\"note\">\n * *Expanding* a week row using this feature may cause the MonthView to have vertical overflow.\n * </div>\n *\n * <div class=\"note\">\n * When combined with  {@link Calendar.widget.MonthView#config-autoRowHeight}, *collapsing* a\n * week row sets the `autoRowHeight` property to `false`. Detect this state change using the\n * {@link Calendar.widget.MonthView#event-weekFlex} event.\n * </div>\n *\n * This feature is **disabled** by default\n * @extends Calendar/feature/CalendarFeature\n * @classtype weekExpander\n * @feature\n */\nexport default class WeekExpander extends CalendarFeature {\n    static get $name() {\n        return 'WeekExpander';\n    }\n    static get type() {\n        return 'weekExpander';\n    }\n    static get pluginConfig() {\n        return {\n            chain : ['render']\n        };\n    }\n    render() {\n        const\n            { client } = this,\n            monthView  = this.monthView = client.isMonthView ? client : client.modes.month;\n        if (monthView) {\n            const { weekRenderer } = this;\n            monthView.showWeekColumn = true;\n            monthView.weekRenderer = monthView.weekRenderer ? FunctionHelper.createSequence(monthView.weekRenderer, weekRenderer) : weekRenderer;\n            monthView.ion({\n                weeknumberclick : 'onWeekNumberClick',\n                thisObj         : this,\n                // We must get in first so we can veto the switch to week view if we toggle a row.\n                prio : 10000\n            });\n        }\n    }\n    weekRenderer(parent, [year, week]) {\n        if (!parent.querySelector('.b-week-toggle-tool-wrap')) {\n            DomHelper.createElement({\n                parent,\n                className : 'b-week-toggle-tool-wrap',\n                children  : [{\n                    className : 'b-icon b-week-toggle-tool',\n                    dataset   : {\n                        btip : this.L('L{WeekExpander.expandTip}')\n                    }\n                }]\n            });\n        }\n    }\n    onWeekNumberClick({ domEvent, date }) {\n        const toggleTool = domEvent.target.closest('.b-week-toggle-tool');\n        if (toggleTool && !this.disabled) {\n            const weekRow = domEvent.target.closest('.b-calendar-row');\n            // Shrinkwrapped means the row is expanded, toggle it to collapsed\n            if (weekRow.classList.contains('b-shrinkwrapped')) {\n                this.monthView.flexWeekRow(date, true);\n                toggleTool.dataset.btip = this.L('L{expandTip}');\n            }\n            // And if it's collapsed, toggle it to expanded\n            else if (weekRow.classList.contains('b-has-overflow')) {\n                this.monthView.shrinkwrapWeekRow(date);\n                toggleTool.dataset.btip = this.L('L{collapseTip}');\n            }\n            return false;\n        }\n    }\n    updateDisabled(disabled, was) {\n        super.updateDisabled(disabled, was);\n        // Remove class when disabled. Eliminates toggling UI.\n        this.client.element.classList.toggle('b-weekexpander', !disabled);\n    }\n}\n// Register this feature type with its Factory\nWeekExpander.initClass();\nWeekExpander._$name = 'WeekExpander';", "import Base from '../../../Core/Base.js';\nimport Factoryable from '../../../Core/mixin/Factoryable.js';\nimport LayoutDim from '../LayoutDim.js';\n/**\n * @module Calendar/layout/day/DayLayout\n */\nconst\n    getStyles = function(rtl) {\n        const me  = this;   // a DayLayoutItem (also why we cannot use => fn here)\n        return {\n            [rtl ? 'right' : 'left'] : me.left?.stringify(),\n            top                      : me.top.stringify(),\n            width                    : me.width?.stringify(),\n            height                   : me.height.stringify(),\n            minWidth                 : me.minWidth\n        };\n    };\n/**\n * The item returned by the `layoutEvents` method.\n *\n * @typedef {Object} DayLayoutItem\n * @property {Scheduler.model.EventModel} eventRecord The `event` being displayed.\n * @property {DayLayoutCluster} cluster The cluster of events with overlapping times.\n * @property {Number} start The start time (as the number seconds since midnight) of the item.\n * @property {Number} end The end time (as the number seconds since midnight) of the item.\n * @property {Calendar.layout.LayoutDim} left The left position of the item.\n * @property {Calendar.layout.LayoutDim} top The top position of the item.\n * @property {Calendar.layout.LayoutDim} width The width of the item.\n * @property {Calendar.layout.LayoutDim} height The height of the item.\n * @property {Boolean} startsBefore Set to `true` if the event started in a previous day.\n * @property {Boolean} endsAfter Set to `true` if the event end in a future day.\n * @internal\n */\n/**\n * A set of `items` that overlap. This object is passed to the `layoutCluster` method.\n *\n * @typedef {Object} DayLayoutCluster\n * @property {DayLayoutContext} context The layout context\n * @property {DayLayoutItem[]} items The items in this event cluster.\n * @property {Number} start The start time (as the number seconds since midnight) of the item.\n * @property {Number} end The end time (as the number seconds since midnight) of the item.\n * @internal\n */\n/**\n * The object returned by `createLayoutContext`.\n *\n * @typedef {Object} DayLayoutContext\n * @property {DayCell} cellData An object containing information about the day cell being created.\n * @property {DayLayoutCluster[]} clusters The item clusters produced by `layoutEvents`.\n * @property {DayLayoutItem[]} items The items created by the `layoutEvents` method.\n * @property {Calendar.layout.day.DayLayout} layout The owing layout instance.\n * @internal\n */\n/**\n * The base class for {@link Calendar.widget.DayView} layout algorithms.\n * @extends Core/Base\n * @abstract\n */\nexport default class DayLayout extends Base.mixin(Factoryable) {\n    static factoryable = {\n        // establish this class as the Factoryable base\n    };\n    static configurable = {\n        /**\n         * Set to `false` to disable the gap on the right-most edge of events. See {@link #config-gutterWidth} to\n         * control the size of the gutter.\n         *\n         * The gutter allows the user to select the times overlapped by events, for example, to create new events.\n         * @config {Boolean}\n         * @default\n         */\n        gutter : true,\n        /**\n         * The number of pixels or proportion of the overall width to allocate to the {@link #config-gutter}.\n         *\n         * Values less than 1 are the fractional proportion of the width (for example, 0.04 is 4% of the width),\n         * while values greater than or equal to 1 are a number of pixels.\n         * @config {Number}\n         * @default\n         */\n        gutterWidth : 5,\n        /**\n         * The number of pixels or proportion of the overall width to allocate for rendering on outside the area where\n         * events are displayed. This space is used by {@link Calendar.feature.TimeRanges} to render arbitrary spans of\n         * time on either side of the day's events.\n         *\n         * Values less than 1 are the fractional proportion of the width (for example, 0.04 is 4% of the width),\n         * while values greater than or equal to 1 are a number of pixels.\n         * @config {Number}\n         * @default\n         */\n        inset : 40,\n        /**\n         * The minimum number of minutes an event must overlap another event before it is considered an overlap\n         * for layout purposes.\n         *\n         * The default value of 0 treats any overlap in time as an overlap in the layout.\n         * @config {Number}\n         * @default 0\n         * @internal\n         */\n        overlapTolerance : null,\n        owner : null\n    };\n    /**\n     * This method is called prior to performing the layout in {@link #function-layoutEvents}.\n     * @param {DayLayoutContext} context The layout context\n     * @returns {DayLayoutContext}\n     * @internal\n     */\n    beforeLayoutEvents(context) {\n        this.owner.trigger('beforeLayoutEvents', {\n            context\n        });\n        return context;\n    }\n    /**\n     * This method packages items into clusters of overlapping items.\n     * @param {DayLayoutCluster[]} clusters The cluster array being produced. This method adds to this array.\n     * @param {DayLayoutItem[]} items The items array being produced. This method adds `item` to this array.\n     * @param {DayLayoutItem} item The item to add and pack into a cluster.\n     * @param {DayLayoutContext} context The layout context\n     * @internal\n     */\n    clusterize(clusters, items, item, context) {\n        const cluster = clusters[clusters.length - 1] || null;  // undefined => null when clusters.length=0\n        items.push(item);\n        // Because items are in order of increasing start times, we don't have to worry about coalescing clusters.\n        if (cluster && this.overlaps(cluster, item)) {\n            item.cluster = cluster;\n            cluster.end = Math.max(cluster.end, item.end);\n            cluster.items.push(item);\n            // If the item overlaps a cluster, we simply add it there and return. No other items can overlap\n            // since items are added in order of start time.\n        }\n        else {\n            // Item does not overlap, so make a new cluster.\n            clusters.push(item.cluster = {\n                context,\n                start : item.start,\n                end   : item.end,\n                items : [item]\n            });\n        }\n    }\n    /**\n     * Populates and returns a layout context used for the layout process.\n     * @param {DayCell} cellData An object containing information about the day cell being created.\n     * @param {DomConfig} [dayDomConfig] The DomConfig element definition for the day cell into which events are being\n     * rendered.\n     * @returns {DayLayoutContext}\n     * @internal\n     */\n    createLayoutContext(cellData, dayDomConfig) {\n        const events = cellData?.events;\n        return {\n            cellData,\n            dayDomConfig,\n            // We need the events for the day to be sorted by startDate but limited to the start of the day. In\n            // other words, all events that start before \"midnight\" are equally considered as starting at midnight.\n            // This order of events is an assumption that runs deep in FluidDayLayout but also in clusterization.\n            events : events?.length > 1 ? cellData.dayTime.sortEvents(cellData.date, events.slice()) : (events || []),\n            clusters : [],\n            items    : [],\n            layout   : this\n        };\n    }\n    /**\n     * Calculate the placements for the given events within the specified time range.\n     * @param {DayCell} cellData An object containing information about the day cell being created.\n     * @param {DomConfig} [dayDomConfig] The DomConfig element definition for the day cell into which events are being\n     * rendered.\n     * @returns {DayLayoutContext}\n     * @internal\n     */\n    layoutEvents(cellData, dayDomConfig) {\n        const\n            me         = this,\n            context    = me.beforeLayoutEvents(me.createLayoutContext(cellData, dayDomConfig)),\n            { clusters, events, items } = context;\n        let event, i, item, n;\n        // As the base class, we simply pick up the events and wrap them in a layout item to contain their positions:\n        for (event of events) {\n            item = me.createLayoutItem(event, context);\n            me.clusterize(clusters, items, item, context);\n        }\n        // cluster layouts are done in seconds:\n        for (i = 0, n = clusters.length; i < n; ++i) {\n            me.layoutCluster(clusters[i]);\n        }\n        me.owner.trigger('layoutEvents', {\n            context\n        });\n        return context;\n    }\n    /**\n     * Returns the base of a {@link Calendar.layout.day.DayLayout#typedef-DayLayoutItem} for the passed\n     * event record.\n     * @param {Scheduler.model.EventModel} eventRecord The event record for which to create a layout item.\n     * @param {DayLayoutContext} context The layout context\n     * @returns {DayLayoutItem}\n     * @internal\n     */\n    createLayoutItem(eventRecord, context) {\n        // Note: DH.diff() does not produce the correct layout position if DST adjustment lands on \"date\"\n        const\n            { date, tomorrow, dayEnd, dayTime } = context.cellData,\n            { allDay, startDate, endingDate } = eventRecord,\n            startSec = (allDay || startDate < date) ? 0 : dayTime.delta(startDate, 's');\n        let endSec = (allDay || endingDate >= tomorrow) ? dayEnd : dayTime.delta(endingDate, 's');\n        // Milestones must grow to appear to have \"milestoneDuration\"\n        if (eventRecord.isMilestone && !eventRecord.isTimeRangeModel && !eventRecord.allDay) {\n            endSec = startSec + (this.owner.milestoneDuration / 1000);\n        }\n        const\n            start    = Math.max(startSec, 0),\n            end      = Math.min(endSec, dayEnd),\n            top      = LayoutDim.from(start / dayEnd);\n        return {\n            eventRecord,\n            getStyles,\n            start,\n            end,\n            top,\n            id           : eventRecord.id,\n            height       : new LayoutDim(end / dayEnd, 0).sub(top),\n            startsBefore : startDate < date || startSec < 0,\n            endsAfter    : tomorrow < endingDate || endSec > dayEnd\n        };\n    }\n    overlaps(a, b, tolerance, end) {  // minutes => seconds\n        if (typeof tolerance === 'string') {\n            end = tolerance;\n            tolerance = null;\n        }\n        end = end || 'end';\n        tolerance = tolerance ?? (this.overlapTolerance * 60 || 0); // avoid NaN\n        return a.start < (b[end] - tolerance) && b.start < (a[end] - tolerance);\n    }\n    syncGutter() {\n        this.owner.setStyle('--dayview-cell-gutter', String(LayoutDim.get(this.gutter && this.gutterWidth)));\n    }\n    updateGutter() {\n        this.syncGutter();\n    }\n    updateGutterWidth() {\n        this.syncGutter();\n    }\n    updateInset(inset) {\n        this.owner.setStyle('--dayview-cell-inset-size', String(LayoutDim.get(inset)));\n    }\n}\nDayLayout._$name = 'DayLayout';", "import DayLayout from './DayLayout.js';\nimport PackMixin from '../../../Scheduler/eventlayout/PackMixin.js';\nimport LayoutDim from '../LayoutDim.js';\n/**\n * @module Calendar/layout/day/FluidDayLayout\n */\nclass Packer extends PackMixin() {\n    static get defaultConfig() {\n        return {\n            coordProp : 'left',\n            sizeProp  : 'width'\n        };\n    }\n    pack(items) {\n        const\n            wrappedItems = items.map(item => {\n                const\n                    { startDate } = item.eventRecord,\n                    endDate = new Date(startDate);\n                endDate.setSeconds(endDate.getSeconds() + item.maxEnd - item.start);\n                return {\n                    item,\n                    start : startDate,\n                    end   : endDate,\n                    x     : 0\n                };\n            });\n        this.packEventsInBands(wrappedItems, (itemData, clusterIndex, slot, slotSize) => {\n            // This logic was extracted from Scheduler/eventlayout/VerticalLayout#applyLayout\n            itemData.width = slotSize;\n            itemData.w = slotSize * COLUMN_WIDTH;\n            itemData.x += (itemData.left = slot.start + (clusterIndex * slotSize)) * COLUMN_WIDTH;\n            itemData.item.x = itemData.x;\n            itemData.item.w = itemData.w;\n        });\n    }\n}\nconst\n    COLUMN_WIDTH = 10000,\n    EMPTY = Object.freeze([]),\n    packer = new Packer();\n/**\n * This class positions events for a `DayView` by maximizing the visible area of each event. When events overlap, this\n * class determines the minimum amount of horizontal indent required for the overlapping events so that as much of\n * their content as possible is unobstructed.\n *\n * @extends Calendar/layout/day/DayLayout\n */\nexport default class FluidDayLayout extends DayLayout {\n    static type = 'fluid';\n    static configurable = {\n        /**\n         * The number of minutes of an event that must be (vertically) cleared by another event before it is\n         * allowed to be significantly overlapped by it (horizontally).\n         *\n         * For example:\n         *\n         * ```text\n         *       >= clearanceMinutes          < clearanceMinutes\n         *      +--------------+            +----------------+\n         *      | Event 1      |            | Event 3        |\n         *      | 9am-11am     |            | 9am-11am +-------------+\n         *      |  +----------------+       |          | Event 4     |\n         *      |  | Event 2        |       |          | 9:30am-12pm |\n         *      |  | 10am-12pm      |       |          |             |\n         *      |  |                |       |          |             |\n         *      +--|                |       +----------|             |\n         *         |                |                  |             |\n         *         +----------------+                  +-------------+\n         * ```\n         *\n         * In the example above, the start time of Event 2 is more than `clearanceMinutes` after the start time of\n         * Event 1, therefore it is displayed with a minimal indent from the left of Event 1. The start time of\n         * Event 4, however, is less than `clearanceMinutes` after Event 3 and so they both share the space evenly.\n         * @config {Number}\n         * @default\n         */\n        clearanceMinutes : 45,\n        /**\n         * The maximum number of possible solutions to evaluate when calculating an event's width.\n         * @config {Number}\n         * @internal\n         * @default\n         */\n        complexityLimit : 2000,\n        /**\n         * The number of minutes of an overlapping event that must be (vertically) cleared by another event before\n         * it is allowed to be fully overlapped by it (horizontally). THis value is a number of minutes _beyond_\n         * {@link #config-clearanceMinutes}. In other words, if `clearanceMinutes` is 45 and this config is set to\n         * 75, the start time of an event must be two hours (45+75 = 120 minutes) after the prior event to fully\n         * overlap it.\n         *\n         * For example:\n         *\n         * ```text\n         *       >= escapeMinutes                    < escapeMinutes\n         *      +----------------+                 +----------------+\n         *      | Event 1        |                 | Event 5        |\n         *      | 9am-11am +-------------+         | 9am-11am +-------------+\n         *      |          | Event 2     |         |          | Event 6     |\n         *      |          | 9:30am-12pm |         |          | 9:30am-12pm |\n         *      |          |             |         |          |  +-------------+\n         *      |  + --------------------+         |          |  | Event 7     |\n         *      +--| Event 3             |         +----------|  | 10:15am     |\n         *         | 10:30am             |                    |  |             |\n         *         |                     |                    +--|             |\n         *         +---------------------+                       +-------------+\n         * ```\n         *\n         * In the example above, the start time of Event 3 is more than `escapeMinutes` after the start time of\n         * Event 2, therefore it is allowed to fully overlap the bottom of Event 2. As can be seen above, this does\n         * not allow Event 3 to overlap the top-most overlapping event (Event 1). In the case of Event 7, the event\n         * starts less than `escapeMinutes` after Event 6 and so the left edge of Event 6 remains exposed. The\n         * positioning of Event 7 is determined by {@link #config-clearanceMinutes}.\n         * @config {Number}\n         * @default\n         * @internal\n         */\n        escapeMinutes : null,\n        /**\n         * The number of pixels or proportion of the overall width to indent overlapping events that overlap by at\n         * least {@link #config-clearanceMinutes}. Events that overlap by less than `clearanceMinutes` will split\n         * the available space.\n         *\n         * Values less than 1 are the fractional proportion of the width (for example, 0.04 is 4% of the width),\n         * while values greater than or equal to 1 are a number of pixels.\n         * @config {Number}\n         * @default\n         * @internal\n         */\n        indentWidth : 10,\n        /**\n         * The maximum amount of width reduction due to overlapping items. If {@link #config-gutterWidth} is a\n         * number of pixels, this value must also be in pixels (i.e., >= 1). Otherwise, this value is a proportional\n         * value between 0 and 1.\n         *\n         * Even though this value limits the width reduction from overlapping items, it is possible that this\n         * value exceeds the event width due to its nesting level (the number of prior events this event overlaps).\n         * In this case, the {@link #config-staggerMinimum} value will prevent the width from becoming too small.\n         * @config {Number}\n         * @default\n         * @internal\n         */\n        staggerMaximum : null,\n        /**\n         * This is the minimum width to which `staggerWidth` will size an event. For example, if an event has many\n         * overlapping events, its width may be reduced a number of steps due to `staggerWidth`. This value limits\n         * how much the event's width will be reduced.\n         *\n         * This value is expressed as a decimal proportion of the width of 1. For example, the value 0.4 is 40% of\n         * the actual width. With this setting, the `staggerWidth` calculation will not reduce an event's width\n         * below 40%.\n         * @config {Number}\n         * @default\n         */\n        staggerMinimum : 0.4,\n        /**\n         * When enabled, the width of an event is reduced in steps based on the number of events that overlap it.\n         * Set this config to `false` or 0 to disable this effect.\n         *\n         * If this value is a boolean, the `gutterWidth` is used for the size of the reduction. If this value is a\n         * number, it is the size of the reduction. For example, a value of 0.05 would cause an event to reduce in\n         * steps of 5% width based on the number of events that overlap it. A number >= 1 is a number of pixels,\n         * however, this is only valid if `gutterWidth` is also a number of pixels.\n         *\n         * By default, events are reduced by the `gutterWidth` based on the number of events that overlap them.\n         * @config {Boolean|Number}\n         * @default\n         */\n        staggerWidth : true,\n        /**\n         * Set this to `true` to use the full day width for events. By default, overlapping events equally split the\n         * width.\n         * @config {Boolean}\n         * @default false\n         */\n        stretch : null\n    };\n    createLayoutContext(cellData, dayDomConfig) {\n        const\n            me = this,\n            context = super.createLayoutContext(cellData, dayDomConfig),\n            { staggerWidth } = me;\n        // These values are consistent for all clusters in a given day, so cache them on the layout context (also\n        // allows for event listeners to tweak these prior to our using them - lookin' at you timeRanges):\n        return Object.assign(context, {\n            indentWidth    : LayoutDim.get(me.indentWidth),\n            stagger        : new LayoutDim(),  // just a reused instance\n            staggerMaximum : LayoutDim.from(me.staggerMaximum),   // can be null\n            staggerMinimum : me.staggerMinimum,\n            staggerWidth   : LayoutDim.from((staggerWidth === true) ? me.gutterWidth : staggerWidth),\n            stretch        : me.stretch\n        });\n    }\n    layoutCluster(cluster /* , parentItem */) {\n        const\n            me = this,\n            { context, items } = cluster,\n            {\n                indentWidth, stagger, staggerMaximum, staggerMinimum, staggerWidth, stretch\n            } = context,\n            treeLevels = me.treeify(items);\n        me._assignSizes(items, treeLevels);\n        for (const item of items) {\n            /*\n                    +---------------------------------------+                          :\n                    |                                       |                          :\n                    |      +-----------------------------------------+                 :\n                    |      |                                         |                 :\n                    |      |                                         |                 :\n                    |      |      +-------------------------------------------+        :\n                    +------|      |                                           |        :\n                           |      |                                           |        :\n                           |      |                                           |        :\n                           |      +-------------------------------------------+        :\n                           |                                         |                 :\n                           +-----------------------------------------+        ^        :\n                                                                              |        :\n                           ^                                         ^        |\n                    ^      |                                         |        |        ^\n                    |<---->|                                         |<------>|<------>|\n                    |indent|                                         | stagger  gutter |\n                    |      |<--------------------------------------->|                 |\n                    |               width                                              |\n                    |<---------------------------------------------------------------->|\n                                    root.w\n             */\n            const\n                // { children } = item.eventRecord,\n                depth = item.depth,\n                left = new LayoutDim(),\n                width = new LayoutDim(),\n                root = item.majorParent || item;\n            for (const k of stagger) {\n                stagger[k] = staggerWidth[k] * (depth.height + depth.overlap);\n                stagger[k] = staggerMaximum?.[k] ? Math.min(staggerMaximum[k], stagger[k]) : stagger[k];\n            }\n            left.r = root.x + depth.minor * indentWidth.r * root.w;\n            left.d = depth.minor * indentWidth.d;\n            width.r = stretch ? 1 - left.r : (root.w - left.r + root.x);\n            width.d = -left.d;\n            // if (parentItem) {\n            //     left.r += parentItem.left.r;\n            //     left.d += parentItem.left.d + parentItem.width.d;\n            //\n            //     width.r *= parentItem.blockWidth.r;\n            //     width.d += parentItem.blockWidth.d - parentItem.width.d;\n            // }\n            if (staggerMinimum) {\n                // The staggerMinimum is a proportion of the ideal width, which is the column's width minus the left\n                // edge (i.e., the width w/o accounting for stagger).\n                item.minWidth = `calc(${staggerMinimum} * (${width}))`;\n            }\n            width.r -= stagger.r * root.w;\n            width.d -= stagger.d;\n            item.left = left;\n            item.width = width;\n        }\n    }\n    treeify(items) {\n        const treeLevels = [];\n        // Organize items as a tree where parents can have two kinds of children: minor overlap and major overlap.\n        // The tree starts as a sorted list which can be seen as each parent having one child.\n        for (let i = 0; i < items.length; i++) {\n            this._addChild(items[i], i, treeLevels);\n        }\n        return treeLevels;\n    }\n    _addChild(item, order, treeLevels) {\n        const\n            me = this,\n            { clearanceMinutes, escapeMinutes, stretch } = me,\n            clearanceSeconds = clearanceMinutes * 60,\n            escapeSeconds = clearanceSeconds + escapeMinutes * 60,\n            overlapTolerance = (me.overlapTolerance || 0) * 60,  // minutes => seconds\n            isMinor = (a, b) => Math.abs(b.start - a.start) >= clearanceSeconds,\n            scoreFn = item => item.depth.minor * 10 + item.depth.major * (stretch ? 1 : 0),\n            depth = {\n                // The true depth from the root of the tree, regardless of major/minor distinctions.\n                depth : 0,\n                // The number of steps up from the deepest minor child to this node.\n                height : 0,\n                // The number of steps up from the deepest major child to this node.\n                heightMajor : 0,\n                // The number of items this item overlaps. This happens when a node clears the end time of a higher\n                // level node and is elevated. This ensures that the bottom of these overlapped events are exposed\n                // by the staggered width of this item. See item 2 in example C below.\n                overlap : 0,\n                // The number of major overlaps for this item and its ancestry. More space is allocated in this case\n                // then for minor overlaps. The number of minor overlaps per major overlap is held in \"clearanceScale\".\n                major : 0,\n                // The number of minor overlaps for this item and its ancestry. When there is sufficient content shown\n                // for a parent, a child can be indented by much less without hiding those details. This minimal amount\n                // of overlap is specified in seconds via \"clearanceSeconds\".\n                minor : 0\n            };\n        // Each item's parent is determined below, but initially we assign items as root (left-most).\n        item.parent = null;\n        item.maxEnd = item.maxEndMajor = item.end;\n        item.depth = depth;\n        item.order = order;\n        if (!treeLevels.length) {\n            // Nothing much to do with the first item...\n            treeLevels[0] = item;\n            item.barriers = EMPTY;\n            return;\n        }\n        let best = 0,  // actual value isn't important when !parent, however we get warnings w/o assigning a value\n            child, major, minor, p, parent, score;\n        // The goal of this loop is to determine the best parent for item\n        for (p of treeLevels) {\n            child = p.lastItem || p;\n            if (!me.overlaps(item, p, overlapTolerance, 'maxEnd')) {\n                /*\n                    treeLevels\n                           [0]             [1]             [2]             [3]\n                    +---------------+---------------+---------------+---------------+\n                    : +-----------+ : +-----------+ :               :               :\n                    : |           | : |           | : +-----------+ : +-----------+ :\n                    : |           | : |           | : |           | : |           | :\n                    : |           | : +-----------+ : |           | : |           | :\n                    : |           | :               : |           | : |           | :\n                    : |           | : +-----------+ : |           | : +-----------+ :\n                    : +-----------+ : |    item   | : +-----------+ :               :\n                    :               : +-----------+ :               :               :\n                    If there is a tree level that item does not overlap, attach item there. We want to put item at the\n                    highest level of the tree (aka left-most) so we break the loop now.\n                */\n                parent = p.parent;\n                major = true;\n                break;\n            }\n            if (isMinor(item, child)) {\n                /*\n                    treeLevels\n                           [0]             [1]             [2]             [3]\n                    +---------------+---------------+---------------+---------------+\n                    : +-----------+ : +----------+  :               :               :\n                    : |           | : |          |  : +----------+  : +----------+  :\n                    : |           | : |          |  : |          |  : |          |  :\n                    : |           | : |          |  : | +---------+ : | +---------+ :\n                    : |           | : |          |  : | |         | : | |         | :\n                    : |           | : | +---------+ : | |         | : | |         | :\n                    : |           | : | |         | : | |         | : | |         | :\n                    : |           | : +-|   item  | : | |         | : | |         | :\n                    : |           | :   +---------+ : | |         | : | |         | :\n                    : |           | :               : | +---------+ : | +---------+ :\n                    : |           | :               : |          |  : |          |  :\n                    : |           | :               : |          |  : +----------+  :\n                    : +-----------+ :               : +----------+  :               :\n                    :               :               :               :               :\n                    If we have a minor overlap with a level, we want to attach item where we minimize the depth of the\n                    minor overlap. Set the minor flag to note that we should no longer consider major overlaps.\n                */\n                minor = true;\n                if (major) {\n                    // The current candidate is a major overlap, so clear the major flag and reset parent so that we\n                    // pick this level as the initial best choice.\n                    major = false;\n                    parent = null;\n                }\n                for (/* empty */; child !== p; child = child.parent) {\n                    // For scoring purposes, we don't include \"escape\" climbing, just overlapping.\n                    if (me.overlaps(child, item, overlapTolerance)) {\n                        break;\n                    }\n                }\n                score = scoreFn(child);\n                if (!parent || score < best) {\n                    // either we had no current winner (!parent) or this child has a better score (lower, like golf).\n                    parent = child;\n                    best = score;\n                }\n            }\n            else if (!minor) {\n                /*\n                    treeLevels\n                           [0]             [1]             [2]             [3]\n                    +---------------+---------------+---------------+---------------+\n                    : +-----------+ : +-----------+ :               :               :\n                    : |           | : |           | : +-----------+ : +-----------+ : +-----------+\n                    : |           | : |           | : |           | : |           | : |           |\n                    : |           | : +-----------+ : |           | : |  parent <--------  item   |\n                    : |           | :               : |           | : |           | : |           |\n                    : |           | :               : |           | : |           | : +-----------+\n                    : |           | :               : |           | : +-----------+ :\n                    : +-----------+ :               : +-----------+ :               :\n                    :               :               :               :               :\n                    If we have no minor overlaps (yet), the deepest (right-most) major overlap will be the parent\n                */\n                major = true;\n                parent = p;\n            }\n        }\n        // Since we have at least one item in treeLevels, the above loop will always end with the major or minor flag\n        // set to true.\n        if (major) {\n            // In a major overlap parent could be null (if item does not overlap treeLevels[0])\n            minor = 0;\n            major = parent ? parent.depth.major + 1 : 0;\n            p = parent = treeLevels[major - 1] || null;\n        }\n        else {\n            // In a minor overlap parent will be the child item that we overlapped.\n            p = parent.majorParent || parent;\n            // Now account for escaping\n            for (/* empty */; escapeSeconds && parent !== p; parent = parent.parent) {\n                if (me.overlaps(parent, item, overlapTolerance) && item.start - parent.start < escapeSeconds) {\n                    break;\n                }\n            }\n            minor = parent.depth.minor + 1;\n            major = parent.depth.major;\n        }\n        // major is the number of major parent items (i.e., the depth including only major parents)\n        // minor is the depth of the item below its major parent (!minor indicates that item is a major overlap)\n        // p is the major parent (the parent that is not a minor overlap of another item)\n        // parent is the immediate parent (maybe the major parent or a child)\n        // p and parent may be null (when major = 0 and !minor)\n        item.parent = parent;\n        depth.major = major;\n        depth.minor = minor;\n        depth.depth = parent ? parent.depth.depth + 1 : 0;\n        if (minor) {  // now that major and minor are depths, only minor can be treated as a boolean\n            item.majorParent = p;\n            item.previousItem = p.lastItem;\n            p.lastItem = item;\n        }\n        else {\n            me._addMajor(item, treeLevels);\n        }\n        me._adjustOverlap(item);\n        me._adjustParents(item);\n    }\n    _addMajor(item, treeLevels) {\n        const\n            me          = this,\n            { stretch } = me,\n            level       = item.depth.major;\n        treeLevels[level] = item;\n        item.barriers = me._getOverlaps(treeLevels, item, 1);\n        if (stretch || item.barriers.length) {\n            // Barriers are prior overlapping events that are deeper in the tree which restrict the width of item. If\n            // these barrier events are in the list of barriers for items higher in the tree, replace them with this\n            // item.\n            //\n            // To calculate stretch overlap we need to track all paths. For non-stretch mode, we can skip this for\n            // items that have no barriers (in essence, these provide their contribution in heightMajor of the item's\n            // depth). Further, this optimization is important for use cases with lots of overlapping events (see\n            // https://github.com/bryntum/support/issues/3140)\n            for (const prior of me._getOverlaps(treeLevels, item, -1)) {\n                // Remove common barriers:\n                const barriers = prior.barriers.filter(b => !item.barriers.includes(b));\n                if (stretch || barriers.length < prior.barriers.length) { // if (we have common barriers)\n                    prior.barriers = barriers;\n                    barriers.push(item);\n                }\n            }\n        }\n    }\n    _adjustOverlap(item) {\n        if (item.depth.minor) {\n            let overlap, p;\n            for (p = item; p.depth.minor > 1; p = p.parent) {\n                // empty\n            }\n            // p is the top-most minor child of item in our parent\n            for (overlap = 0; (p = p.previousItem); /* empty */) {\n                if (this.overlaps(p, item)) {\n                    overlap = Math.max(overlap, p.depth.height + p.depth.overlap + 1);\n                }\n            }\n            item.depth.overlap = overlap;\n        }\n    }\n    _adjustParents(item) {\n        const\n            { depth, end } = item,\n            level = depth.minor + depth.overlap;\n        for (let parentDepth, p = item; (p = p.parent); /* empty */) {\n            parentDepth = p.depth;\n            if (parentDepth.major !== depth.major) {\n                parentDepth.heightMajor = Math.max(parentDepth.heightMajor, depth.major - parentDepth.major);\n                continue;\n            }\n            // Update the parent's maxEnd to include the new child\n            p.maxEnd = Math.max(p.maxEnd, end);\n            // Also update the height of all parent nodes to account for the new child\n            while (parentDepth.height < level - parentDepth.minor) {  // may be > 1 loop w/overlap\n                ++parentDepth.height;\n                if (parentDepth.overlap) {\n                    --parentDepth.overlap;\n                }\n            }\n        }\n    }\n    _assignSizes(items, treeLevels) {\n        const\n            { complexityLimit, stretch } = this,\n            topLevelItems = items.filter(it => !it.depth.minor);\n        if (!complexityLimit) {\n            packer.pack(topLevelItems);\n            for (const item of topLevelItems) {\n                item.x /= COLUMN_WIDTH;\n                item.w /= COLUMN_WIDTH;\n            }\n        }\n        else {\n            for (const item of topLevelItems) {\n                const\n                    paths = item.barriers.map(b => [b]),\n                    { parent } = item,\n                    height = item.depth.heightMajor + 1; // the height of this subtree; +1 to include item\n                item.x = parent ? parent.x + parent.w : 0;\n                let\n                    w = (1 - item.x) / height,  // best-case width (excluding prior overlapping events)\n                    i, include, longest, path, tail, v, x;\n                if (paths.length) {\n                    // Here we are treating the prior overlapping events as children of a sort, which converts our\n                    // tree into a DAG (directed, acyclic graph). We want to consider all paths from item to terminal\n                    // items in the DAG (items with no children). Each path provides a possible space allocation. It\n                    // is the minimum space allocation we are after.\n                    for (i = 0; i < paths.length;) {\n                        path = paths[i];\n                        longest = longest || path;  // may hit complexityLimit or never improve on best case\n                        if (i > complexityLimit) {\n                            w = 1 / treeLevels.length;  // worst-case width\n                            break;\n                        }\n                        tail = path[path.length - 1];\n                        if (tail.order < item.order) {\n                            // A path is a terminal path if the tail item is a prior event (order is just a number like\n                            // 1, 2, 3, etc. that we set on each event as we process it).\n                            ++i;\n                            x = tail.x;     // that prior event has an x coordinate, so we must not overlap it\n                            include = 0;    // do not include the tail event as we divvy up the space\n                        }\n                        else if (!tail.barriers.length) {\n                            // The tail event has no barriers, but because item is prior to tail, tail has no x value\n                            // determined yet.\n                            ++i;\n                            x = 1;          // divvy up all remaining space\n                            include = 1;    // but include the tail item in the split\n                        }\n                        else {\n                            // There could be too many levels to the tree to directly recurse, so we just replace this\n                            // non-terminal path with the set of paths that include the next layer. These may be either\n                            // terminal, non-terminal or both, but we'll explore them by not incrementing \"i\".\n                            paths.splice(i, 1, ...tail.barriers.map(b => path.concat(b)));\n                            if (longest === path) {\n                                longest = null;  // non-terminal path cannot be the longest path\n                            }\n                            continue;\n                        }\n                        v = (x - item.x) / (include + path.length);  // the width of item for this path\n                        if (v < w) {\n                            w = v;\n                            longest = path;\n                        }\n                    }\n                    if (stretch) {\n                        // In stretch mode, the idea is to expand the width of columns to cover the width of the view,\n                        // but we need to account for overlapping items in the way. We use the longest path (the path\n                        // that determined the item's width) to calculate additional overlaps for this item and its\n                        // minor children:\n                        v = longest.reduce((s, it) => s + it.depth.height + 1, 0);  // sum of minor stacking depths\n                        for (i = item.lastItem; i; i = i.previousItem) {\n                            i.depth.overlap += v;\n                        }\n                        item.depth.overlap += v;\n                    }\n                }\n                item.w = w;\n            }\n        }\n    }\n    _getOverlaps(treeLevels, item, step) {\n        const\n            { end } = item,  // item has no minor children yet, so end === maxEnd for item...\n            stop = (step < 0) ? -1 : treeLevels.length;\n        let { start } = item,\n            i, other, ret;\n        for (i = item.depth.major + step; i !== stop && start < end; i += step) {\n            other = treeLevels[i];\n            /*\n                Consider (step = 1):\n                                      other[1]            other[2]    other[3]\n                                       -+- other.start\n                                        |                  -+-\n                                        |                   |          -+-\n                            item        |                   |           |\n                     start  -+-         |                   |           |\n                             |         -+- other.end        |           |\n                             |                             -+-         -+-\n                             |\n                       end  -+-\n                item overlaps other[1] and other[2] but not other[2] because you cannot draw a horizontal line that\n                intersects item and other[3] w/o crossing through other[0] or other[1].\n                Consider (step = -1):\n                           other[-3]           other[-2]   other[-1]\n                            -+- other.start\n                             |                  -+-\n                             |                   |          -+-            item\n                             |                   |           |             -+-  start\n                             |                   |           |              |\n                             |                  -+-         -+-             |\n                             |                                             -+-  end\n                            -+- other.end\n                In the reverse case, we are likewise looking for items that pass the horizontal line test. So the\n                overlaps are other[-1] and other[-3].\n             */\n            if (start < other.maxEnd && other.start < end) {\n                (ret || (ret = [])).push(other);\n                start = other.maxEnd;\n            }\n        }\n        return ret || EMPTY;\n    }\n}\nFluidDayLayout.initClass();\nFluidDayLayout._$name = 'FluidDayLayout';", "import Base from '../../Core/Base.js';\nimport ProjectConsumer from '../../Scheduler/data/mixin/ProjectConsumer.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport CrudManager from '../data/CrudManager.js';\nimport ProjectModel from '../model/ProjectModel.js';\nimport TimeRangeModel from '../model/TimeRangeModel.js';\nimport TimeZoneHelper from '../../Core/helper/TimeZoneHelper.js';\nimport ResourceTimeRangeModel from '../../Scheduler/model/ResourceTimeRangeModel.js';\n/**\n * @module Calendar/mixin/CalendarStores\n */\n/**\n * Functions for store assignment and store event listeners.\n *\n * @mixin\n * @extends Scheduler/data/mixin/ProjectConsumer\n */\nexport default Target => class CalendarStores extends ProjectConsumer(Target || Base) {\n    static $name = 'CalendarStores';\n    static configurable = {\n        /**\n         * The calendar ({@link Scheduler.model.ResourceModel Resource}), (or its `id`) to use as the\n         * default calendar for new events created using {@link Calendar.view.Calendar#config-autoCreate dblclick}\n         * or {@link Calendar.feature.CalendarDrag drag-create}, or {@link Calendar.feature.ExternalEventSource dragging in}.\n         *\n         * May be specified as the `id` of an existing resource, or a resource record that is present in the project.\n         *\n         * If not specified, the first record in the {@link #property-resourceStore} will be used.\n         *\n         * If specified as `null`, then new events created using {@link Calendar.view.Calendar#config-autoCreate dblclick}\n         * or {@link Calendar.feature.CalendarDrag drag-create}, or {@link Calendar.feature.ExternalEventSource dragging in}\n         * will not be automatically assigned a calendar.\n         * @config {String|Scheduler.model.ResourceModel}\n         */\n        defaultCalendar : null,\n        /**\n         * Class that should be used to instantiate a CrudManager in case it's provided as a simple object to\n         * {@link #config-crudManager} config.\n         * @config {Scheduler.data.CrudManager}\n         * @category Data\n         */\n        crudManagerClass : CrudManager,\n        /**\n         * Get/set the CrudManager instance\n         * @member {Scheduler.data.CrudManager} crudManager\n         * @category Data\n         */\n        /**\n         * Supply a {@link Scheduler.data.CrudManager} instance or a config object if you want to use\n         * CrudManager for handling data.\n         * @config {CrudManagerConfig|Scheduler.data.CrudManager}\n         * @category Data\n         */\n        crudManager : null,\n        /**\n         * Set to a time zone or a UTC offset. This will set the projects\n         * {@link Scheduler.model.ProjectModel#config-timeZone} config accordingly. As this config is only a referer,\n         * please se project's config {@link Scheduler.model.ProjectModel#config-timeZone documentation} for more\n         * information.\n         *\n         * ```javascript\n         * new Calendar(){\n         *   timeZone : 'America/Chicago'\n         * }\n         * ```\n         * @config {String|Number} timeZone\n         * @category Misc\n         */\n        timeZone : {\n            // Don't ingest the config eagerly because it relies on project being present.\n            // Lazy means it waits for ingestion until timeZone property is referenced.\n            $config : 'lazy',\n            value   : null\n        }\n    };\n    static defaultConfig = {\n        projectModelClass : ProjectModel\n    };\n    //region Default config\n    // This is the static definition of the Stores we consume from the project, and\n    // which we must provide *TO* the project if we or our CrudManager is configured\n    // with them.\n    // The property name is the store name, and within that there is the dataName which\n    // is the property which provides static data definition. And there is a listeners\n    // definition which specifies the listeners *on this object* for each store.\n    //\n    // To process incoming stores, implement an updateXxxxxStore method such\n    // as `updateEventStore(eventStore)`.\n    //\n    // To process an incoming Project implement `updateProject`. __Note that\n    // `super.updateProject(...arguments)` must be called first.__\n    static get projectStores() {\n        return {\n            resourceStore : {\n                dataName  : 'resources',\n                // eslint-disable-next-line bryntum/no-listeners-in-lib\n                listeners : {\n                    changePreCommit : 'onCalendarStoreChange'\n                }\n            },\n            eventStore : {\n                dataName  : 'events',\n                // eslint-disable-next-line bryntum/no-listeners-in-lib\n                listeners : {\n                    changePreCommit : 'onCalendarStoreChange'\n                }\n            },\n            assignmentStore : {\n                dataName : 'assignments'\n            },\n            timeRangeStore : {\n                dataName   : 'timeRanges',\n                modelClass : TimeRangeModel\n            },\n            resourceTimeRangeStore : {\n                dataName   : 'resourceTimeRanges',\n                modelClass : ResourceTimeRangeModel\n            }\n        };\n    }\n    /**\n     * Inline events, will be loaded into the {@link #property-eventStore}.\n     * @prp {Scheduler.model.EventModel[]|EventModelConfig[]} events\n     * @category Data\n     */\n    /**\n     * The {@link Scheduler.data.EventStore} or a reconfiguring object for a store which will hold\n     * the events to be rendered into the Calendar.\n     * @config {Scheduler.data.EventStore|EventStoreConfig} eventStore\n     * @category Data\n     */\n    /**\n     * The {@link Scheduler.data.EventStore} holding the events to be rendered into the Calendar.\n     * @member {Scheduler.data.EventStore} eventStore\n     * @readonly\n     * @category Data\n     */\n    /**\n     * Inline resources, will be loaded into the {@link #property-resourceStore}.\n     * @prp {Scheduler.model.ResourceModel[]|ResourceModelConfig[]} resources\n     * @category Data\n     */\n    /**\n     * The {@link Scheduler.data.ResourceStore} or a reconfiguring object for a store which will hold the resources to be rendered into the Calendar.\n     * @config {Scheduler.data.ResourceStore|ResourceStoreConfig} resourceStore\n     * @category Data\n     */\n    /**\n     * The {@link Scheduler.data.ResourceStore} holding the resources to be rendered into the Calendar.\n     * @member {Scheduler.data.ResourceStore} resourceStore\n     * @readonly\n     * @category Data\n     */\n    /**\n     * Inline assignments, will be loaded into the {@link #property-assignmentStore}.\n     * @prp {Scheduler.model.AssignmentModel[]|AssignmentModelConfig[]} assignments\n     * @category Data\n     */\n    /**\n     * The {@link Scheduler.data.AssignmentStore} or a reconfiguring object for a store which will hold assignments linking resources to events.\n     * @config {Scheduler.data.AssignmentStore|AssignmentStoreConfig} assignmentStore\n     * @category Data\n     */\n    /**\n     * The {@link Scheduler.data.AssignmentStore} holding assignments linking resources to events.\n     * @member {Scheduler.data.AssignmentStore} assignmentStore\n     * @readonly\n     * @category Data\n     */\n    /**\n     * Inline time ranges, will be loaded into the {@link #property-timeRangeStore}.\n     *\n     * Time ranges are rendered in Calendar {@link Calendar.widget.DayView} or\n     * {@link Calendar.widget.WeekView} when the Calendar has the {@link Calendar.feature.TimeRanges}\n     * feature enabled.\n     *\n     * Time ranges are rendered into a {@link Scheduler.view.Scheduler} subview when that subview\n     * has the {@link Scheduler.feature.TimeRanges} feature enabled.\n     *\n     * @prp {Calendar.model.TimeRangeModel[]|TimeRangeModelConfig[]} timeRanges\n     * @accepts {Calendar.model.TimeRangeModel[]|TimeRangeModelConfig[]}\n     * @category Data\n     */\n    /**\n     * The {@link Calendar.data.TimeRangeStore} or a reconfiguring object for a store which will hold time ranges.\n     * These may be used by the {@link Calendar.feature.TimeRanges} feature.\n     * @config {Calendar.data.TimeRangeStore|TimeRangeStoreConfig} timeRangeStore\n     * @category Data\n     */\n    /**\n     * The {@link Calendar.data.TimeRangeStore} holding time ranges.\n     * These may be used by the {@link Calendar.feature.TimeRanges} feature.\n     * @member {Calendar.data.TimeRangeStore} timeRangeStore\n     * @readonly\n     * @category Data\n     */\n    /**\n     * Inline resource time ranges, will be loaded into {@link #property-resourceTimeRangeStore}.\n     *\n     * Resource time ranges are rendered in a Calendar {@link Calendar.widget.ResourceView} when the\n     * Calendar has the {@link Calendar.feature.TimeRanges} feature enabled.\n     *\n     * Resource time ranges are rendered into a {@link Scheduler.view.Scheduler} subview when that subview\n     * has the {@link Scheduler.feature.ResourceTimeRanges} feature enabled.\n     *\n     * @prp {Scheduler.model.ResourceTimeRangeModel[]|ResourceTimeRangeModelConfig[]} resourceTimeRanges\n     * @accepts {Scheduler.model.ResourceTimeRangeModel[]|ResourceTimeRangeModelConfig[]}\n     * @category Data\n     */\n    /**\n     * The {@link Scheduler.data.ResourceTimeRangeStore} or a reconfiguring object for a store which will hold resource time ranges.\n     * These may be used by the {@link Calendar.feature.TimeRanges} feature.\n     * @config {Scheduler.data.ResourceTimeRangeStore|ResourceTimeRangeStoreConfig} resourceTimeRangeStore\n     * @category Data\n     */\n    /**\n     * The {@link Scheduler.data.ResourceTimeRangeStore} holding resource time ranges.\n     * These may be used by the {@link Calendar.feature.TimeRanges} feature.\n     * @member {Scheduler.data.ResourceTimeRangeStore} resourceTimeRangeStore\n     * @readonly\n     * @category Data\n     */\n    //endregion\n    //region CrudManager\n    changeCrudManager(crudManager) {\n        const me = this;\n        if (crudManager && !crudManager.isCrudManager) {\n            const type = crudManager.type || me.crudManagerClass;\n            // CrudManager injects itself into is Scheduler's _crudManager property\n            // because code it triggers needs to access it through its getter.\n            crudManager = type.new({\n                scheduler : me\n            }, crudManager);\n        }\n        // config setter will veto because of above described behaviour\n        // of setting the property early on creation\n        me._crudManager = crudManager;\n        me.bindCrudManager?.(crudManager);\n    }\n    //endregion\n    updateTimeZone(timeZone) {\n        this.project.timeZone = timeZone;\n    }\n    get timeZone() {\n        return this.project.timeZone;\n    }\n    // When project changes time zone, change Calendar date\n    onBeforeTimeZoneChange({ timeZone, oldTimeZone }) {\n        if (this.isConfiguring) {\n            // Too early\n            return;\n        }\n        const\n            me = this,\n            // Only one receiver of this event should change Calendar date.\n            // The Calendar's activeView if we are inside a Calendar, or this view if not\n            target = me.isCalendar ? me.activeView : (!me.calendar && me);\n        // Only change view date if dayView\n        if (target?.duration === 1) {\n            // Get events in current dayView\n            const currentEvents =  target.events.filter(e => e.startDate >= target.startDate && e.endDate && e.endDate <= target.endDate);\n            if (currentEvents.length) {\n                // If there is events, calculate an average date of those events\n                const\n                    eventsCenterMs  = currentEvents.map(e => (e.startDate.getTime() + e.endDate.getTime()) / 2),\n                    avgCenterDate   = new Date(Math.floor(eventsCenterMs.reduce((sum, e) => sum + e, 0) / eventsCenterMs.length)),\n                    // If already converted, revert that date to local time zone\n                    centerDateLocal = oldTimeZone != null ? TimeZoneHelper.fromTimeZone(avgCenterDate, oldTimeZone) : avgCenterDate,\n                    // And then convert it to the new time zone (or not)\n                    centerDateTZ    = timeZone != null ? TimeZoneHelper.toTimeZone(centerDateLocal, timeZone) : centerDateLocal;\n                // If different date from current, change\n                if (centerDateTZ < target.startDate || centerDateTZ > target.endDate) {\n                    (target.calendar || target).date = centerDateTZ;\n                }\n            }\n        }\n    }\n    // Need this to not run conversion in ProjectConsumer\n    onTimeZoneChange() {}\n    /**\n     * The default Calendar to be used when creating new events which do not initially have a resource.\n     *\n     * This includes {@link Calendar.view.Calendar#config-autoCreate dblclick-created} events and\n     * {@link Calendar.feature.CalendarDrag drag-created} events and\n     * {@link Calendar.feature.ExternalEventSource dragged in} events.\n     * @property {Scheduler.model.ResourceModel}\n     */\n    get defaultCalendar() {\n        const\n            { eventStore }  = this,\n            defaultCalendar = ObjectHelper.hasOwn(this, '_defaultCalendar') ? this._defaultCalendar : eventStore.defaultCalendarId;\n        if (defaultCalendar !== null) {\n            return defaultCalendar != undefined ? (defaultCalendar.isResourceModel ? defaultCalendar : eventStore.resourceStore.getById(defaultCalendar)) : eventStore.resourceStore.first;\n        }\n    }\n    get defaultCalendarId() {\n        return this.eventStore.modelClass.asId(this.defaultCalendar);\n    }\n    //region Project\n    updateProject(project, oldProject) {\n        super.updateProject(project, oldProject);\n        const me = this;\n        // Now is the time to force timeZone ingestion. When we have all our stores.\n        me.getConfig('timeZone');\n        me.detachListeners('CalendarStores');\n        project.ion({\n            name      : 'CalendarStores',\n            dataReady : 'onCalendarStoreChange',\n            refresh   : 'onProjectRefresh',\n            thisObj   : me\n        });\n        // Assigned a project at runtime\n        if (!me.isConfiguring) {\n            me.eachView(view => {\n                view.project = project;\n            });\n        }\n    }\n    onProjectRefresh({ source : project, isInitialCommit }) {\n        // Force reevaluation of date indices next time requested because the\n        // initial project commit may have rescheduled the events.\n        if (isInitialCommit) {\n            project.eventStore.invalidateDayIndices();\n        }\n    }\n    updateEventStore(eventStore) {\n        // Decorate the eventStore's createRecord method to inject our defaultCalendar into new\n        // events as the default resource.\n        if (eventStore && !eventStore.isCalendarEventStore) {\n            const storeOwner = this;\n            Object.defineProperty(eventStore, 'defaultCalendar', {\n                get : () => storeOwner.defaultCalendar\n            });\n            eventStore.isCalendarEventStore = true;\n            // Events should stay available when they are deassigned unless requested otherwise\n            if (!('removeUnassignedEvent' in eventStore.initialConfig)) {\n                eventStore.removeUnassignedEvent = false;\n            }\n        }\n    }\n    //endregion\n    //region WidgetClass\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n    //endregion\n};\n", "/**\n * @module Calendar/util/EventSlots\n */\n/**\n * An Array which allows prefilling of some slots and automatic filling\n * of vacant slots.\n *\n * Used by the Calendar to fill event slots in day cells in the MonthView\n * @internal\n */\nexport default class EventSlots extends Array {\n    firstFreeSlot = 0;\n    set(index, event) {\n        const me = this;\n        if (index == null) {\n            return me.add(event);\n        }\n        else {\n            me[index] = event;\n        }\n        // Stepped on the first free slot pointer, move it on.\n        if (me.firstFreeSlot === index) {\n            // Move onwards while the pointer references an occupied slot\n            while (me[me.firstFreeSlot]) {\n                me.firstFreeSlot++;\n            }\n        }\n    }\n    add(event) {\n        const result = this.firstFreeSlot;\n        this[result] = event;\n        // Move onwards while the pointer references an occupied slot\n        while (this[this.firstFreeSlot]) {\n            this.firstFreeSlot++;\n        }\n        return result;\n    }\n    setEvents(events) {\n        const length = this.length = this.firstFreeSlot = events.length;\n        for (let i = 0; i < length; i++) {\n            this[i] = events[i];\n        }\n    }\n}\nEventSlots._$name = 'EventSlots';", "import Base from '../../Core/Base.js';\n/**\n * @module Calendar/util/EventSorter\n */\n/**\n * This class contains methods to sort events into appropriate order within a day for display\n * in all contexts.\n *\n * Whenever a day's events are rendered, those events are sorted with {@link #function-defaultSorterFn-static} method.\n */\nexport default class EventSorter extends Base {\n    /**\n     * This sorting method implement following rules:\n     *\n     *  0. Unscheduled events go before scheduled ones\n     *  1. Compare by floored start date\n     *  2. If equal, compare by floored duration\n     *  3. If equal, compare by start date\n     *  4. If equal, compare by duration\n     * @param {Scheduler.model.EventModel|EventBar} event1\n     * @param {Scheduler.model.EventModel|EventBar} event2\n     * @returns {Number}\n     */\n    static defaultSorterFn(event1, event2) {\n        // Handle event wrapping which is what MonthView does.\n        event1 = event1.eventRecord || event1;\n        event2 = event2.eventRecord || event2;\n        const\n            { startDate  : start1 } = event1,\n            { startDate  : start2 } = event2;\n        // Unscheduled events sort to the top.\n        if (!start1) {\n            return -1;\n        }\n        if (!start2) {\n            return 1;\n        }\n        // Sort by start timestamp first, then duration.\n        // This is *in-cell* sorting.\n        return start1 - start2 || event2.durationMS - event1.durationMS;\n    }\n    /**\n     * This sorting method implement following rules:\n     *\n     *  0. Unscheduled events go before scheduled ones\n     *  1. An {@link Scheduler.model.EventModel#property-isInterDay} event sorts before events that are not.\n     *  2. Compare floored start date, if the events have different values\n     *  3. Compare floored duration, if the events have different values\n     *  4. Compare start date, if the events have different values\n     *  5. Compare duration\n     *\n     * This is used by {@link Calendar.widget.MonthView} and {@link Calendar.widget.AgendaView} since these views mix\n     * both interday and intraday events in the same view but render them differently.\n     * @param {Scheduler.model.EventModel|EventBar} event1\n     * @param {Scheduler.model.EventModel|EventBar} event2\n     * @returns {Number}\n     * @internal\n     */\n    static interDaySorterFn(event1, event2) {\n        // Handle event wrapping which is what MonthView does.\n        event1 = event1.eventRecord || event1;\n        event2 = event2.eventRecord || event2;\n        const\n            {\n                startDate  : start1,\n                isInterDay : event1InterDay\n            } = event1,\n            {\n                startDate  : start2,\n                isInterDay : event2InterDay\n            } = event2;\n        // Unscheduled events sort to the top.\n        if (!start1) {\n            return -1;\n        }\n        if (!start2) {\n            return 1;\n        }\n        // InterDay events sort to the top (https://github.com/bryntum/support/issues/1693).\n        if (event1InterDay !== event2InterDay) {\n            return Number(event2InterDay) - Number(event1InterDay);\n        }\n        // If both events fit inside one day cell, the only sort order we care about is start time.\n        if (!event1InterDay && !event2InterDay) {\n            return start1 - start2;\n        }\n        // Sort Duration (longest first), then by ending date (furthest in future first), then by start timestamp.\n        // This is *in-cell* sorting.\n        return event2.durationMS - event1.durationMS || event2.endingDate - event1.endingDate || start1 - start2;\n    }\n}\nEventSorter._$name = 'EventSorter';", "import Base from '../../Core/Base.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\n/**\n * @module Calendar/mixin/SchedulerInterface\n */\nconst\n    hasEventStore     = w => w.isCalendarMixin && w.eventStore,\n    eventNameSplitter = /(touch|mouse|pointer|key|context|dbl)(.*)/,\n    eventPartReplacer = (match, prefix, remainder) => `${StringHelper.capitalize(prefix)}${StringHelper.capitalize(remainder)}`,\n    capitalizeEvent   = domEvent => domEvent.type.replace(eventNameSplitter, eventPartReplacer);\n/**\n * Exposes an interface similar to a {@link Scheduler.view.Scheduler} so that Calendar Features which\n * extend Scheduler Features can treat their client in a standard manner.\n * @private\n * @mixin\n */\nexport default Target => class SchedulerInterface extends (Target || Base) {\n    static get $name() {\n        return 'SchedulerInterface';\n    }\n    /**\n     * Determines what is under the cursor of the specified event or what is described by the given element.\n     * @param {Event|Element} domEvent The event or element\n     * @returns {CalendarHit}\n     */\n    calendarHitTest(domEvent) {\n        const\n            { activeView } = this,\n            target         = DomHelper.getEventElement(domEvent);\n        return activeView?.element.contains(target) ? activeView.calendarHitTest(domEvent) : null;\n    }\n    // Hack to expose part of the Scheduler API that features and mixins inherited from Scheduler use.\n    get timeAxis() {\n        const me = this;\n        if (!me._timeAxis) {\n            me._timeAxis = {\n                get startDate() {\n                    return me.activeView.startDate;\n                },\n                get endDateDate() {\n                    return me.activeView.endDate;\n                },\n                isTimeSpanInAxis(event) {\n                    return DateHelper.intersectSpans(event.startDate, event.endDate, this.startDate, this.endDate);\n                }\n            };\n        }\n        return this._timeAxis;\n    }\n    // Hack to expose part of the Scheduler API that features use.\n    get timeAxisViewModel() {\n        const me = this;\n        if (!me._timeAxisViewModel) {\n            me._timeAxisViewModel = {\n                get timeResolution() {\n                    return me.activeView.timeResolution || {};\n                }\n            };\n        }\n        return this._timeAxisViewModel;\n    }\n    /**\n     * Interface method required for navigation/selection.\n     * Returns the event record for a DOM element.\n     * @param {HTMLElement|Event} elementOrEvent The DOM node to lookup, or a DOM event whose target to lookup.\n     * @returns {Scheduler.model.EventModel} The event record\n     */\n    resolveEventRecord(elementOrEvent) {\n        if (elementOrEvent instanceof Event) {\n            elementOrEvent = elementOrEvent.target;\n        }\n        const activeClient = this.constructor.fromElement(elementOrEvent)?.closest(hasEventStore);\n        return activeClient?.getEventRecord(elementOrEvent);\n    }\n    /**\n     * Interface method required for navigation/selection\n     * Assignment not supported in Calendar.\n     * @private\n     */\n    resolveAssignmentRecord() {\n    }\n    /**\n     * Interface method required for navigation/selection.\n     * Returns the resource (calendar) record for a DOM element.\n     * @param {HTMLElement|Event} elementOrEvent The DOM node to lookup, or a DOM event whose target to lookup.\n     * @returns {Scheduler.model.ResourceModel} Any corresponding event record's resource if any.\n     */\n    resolveResourceRecord(elementOrEvent) {\n        const { activeView } = this;\n        // For a resource view, return the subView's configured resource.\n        // If the target element is within an overflow popup, the subView is the popup's owner.\n        // Otherwise, just look up the DOM parentNode axis to find an instance of the view type.\n        if (activeView.isResourceView) {\n            const\n                element     = elementOrEvent.nodeType === Node.ELEMENT_NODE ? elementOrEvent : elementOrEvent.target,\n                sourcePopup = element.closest('.b-overflowpopup'),\n                subView     = sourcePopup ? bryntum.fromElement(sourcePopup, 'overflowpopup').owner : bryntum.fromElement(elementOrEvent, activeView.viewType.type);\n            if (subView) {\n                return subView.resource;\n            }\n        }\n        return this.resolveEventRecord(elementOrEvent)?.resource;\n    }\n    handleEvent(domEvent) {\n        // Map event names, eg: contextmenu -> ContextMenu\n        const eventName = capitalizeEvent(domEvent);\n        // We are a Grid. Our superclass handleEvent distributes to onElementXxxx\n        // This is called directly as part of the GridElementEvents mixin\n        if (super.handleEvent) {\n            super.handleEvent(domEvent);\n        }\n        // We are a regular CalendarMixin. We implement the interface of the Feature host as defined\n        // in GridElementEvents.\n        // We get here via Calendar's onViewCatchAll which directs allDomEvents through here\n        // so ensure we only process each domEvent once.\n        // For example, contextmenu in a Scheduler causes schedulecontextmenu\n        // and cellcontextmenu both from the same initial DOM event.\n        else  if (!domEvent.handled && !domEvent.schedulerRedirected) {\n            if (this.trigger(`beforeElement${eventName}`, { event : domEvent }) !== false) {\n                this[`onElement${eventName}`]?.(domEvent);\n            }\n            // Sets this flag to avoid double invocation\n            domEvent.schedulerRedirected = true;\n        }\n    }\n    onInternalKeyDown(domEvent) {\n        this.onCalendarPointerInteraction?.(domEvent);\n    }\n    getCellDataFromEvent(domEvent) {\n        return super.getCellDataFromEvent?.(domEvent);\n    }\n    getDateFromDomEvent(domEvent) {\n        const activeClient = this.constructor.fromElement(domEvent)?.closest(hasEventStore);\n        if (activeClient) {\n            return activeClient.getDateFromDomEvent(domEvent);\n        }\n    }\n    getDateFromXY(xy, roundingMethod, local = true, allowOutOfRange) {\n        const activeClient = this.activeSubView;\n        if (activeClient) {\n            return activeClient.getDateFromPosition(xy[0] - globalThis.scrollX, xy[1] - globalThis.scrollY, local);\n        }\n    }\n    // Used by shared feature code.\n    // Route to view's create implementation.\n    createEvent() {\n        this.activeView.createEvent(...arguments);\n    }\n    // It's fixed to be enabled for now\n    get enableRecurringEvents() {\n        return true;\n    }\n    // Used by shared feature code. Not relevant in Calendar\n    getRowFor() { }\n    // Used by shared feature code. Could implement if needed.\n    suspendRefresh() { }\n    // Used by shared feature code. Could implement if needed.\n    resumeRefresh() { }\n    get widgetClass() {}\n};\n", "import Base from '../../../Core/Base.js';\nimport ArrayHelper from '../../../Core/helper/ArrayHelper.js';\nimport DomClassList from '../../../Core/helper/util/DomClassList.js';\nimport DomHelper from '../../../Core/helper/DomHelper.js';\nimport StringHelper from '../../../Core/helper/StringHelper.js';\nimport DH from '../../../Core/helper/DateHelper.js';\n/**\n * @module Calendar/widget/mixin/EventRenderer\n */\nconst emptyString = new String('');\n/**\n * Mixin that can be used to generate DomConfig blocks for events.\n *\n * @mixin\n */\nexport default Target => class EventRenderer extends (Target || Base) {\n    static $name = 'EventRenderer';\n    static configurable = {\n        /**\n         * A function, or the name of a function in the ownership hierarchy which you\n         * can specify to customize event DOM content.\n         *\n         * This function is called each time an event is rendered to allow developers to mutate\n         * the cell metadata, or the CSS classes to be applied to the event element.\n         *\n         * It's called with the event record, and a eventData object which allows you to mutate event metadata\n         * such as `cls`, `style`.\n         *\n         * The `cls` property is an object whose property names will be added to the event element if the property\n         * value is truthy.\n         *\n         * The `style` property is an object containing style properties for the event element.\n         *\n         * A non-null return value from the renderer is used as the event body content. A nullish\n         * return value causes the default renderer to be used which just uses the event name.\n         *\n         * If a string is returned, it is used as the HTML content of the event body element.\n         *\n         * If an object is returned, it is used as a {@link Core.helper.DomHelper#typedef-DomConfig} object to\n         * create complex content in the event body element.\n         *\n         * ```javascript\n         *  eventRenderer({ eventRecord, renderData }) {\n         *      if (eventRecord.name === 'Doctors appointment') {\n         *          eventData.style.fontWeight = 'bold';\n         *          eventData.cls['custom-cls'] = 1;\n         *\n         *          return 'Special doctors appointment';\n         *      }\n         *  }\n         * ```\n         *\n         * IMPORTANT: When returning content, be sure to consider how that content should be encoded to avoid XSS\n         * (Cross-Site Scripting) attacks. This is especially important when including user-controlled data such as\n         * the event's `name`. The function {@link Core.helper.StringHelper#function-encodeHtml-static} as well as\n         * {@link Core.helper.StringHelper#function-xss-static} can be helpful in these cases.\n         *\n         * For example:\n         *\n         * ```javascript\n         *  eventRenderer({ eventRecord }) {\n         *      return StringHelper.xss`Event: ${eventRecord.name}`;\n         *  }\n         * ```\n         *\n         * @param {Object} detail An object that contains data about the event being rendered\n         * @param {Calendar.widget.mixin.CalendarMixin} detail.view The view rendering the event\n         * @typings detail.view -> {typeof CalendarMixin}\n         * @param {Scheduler.model.EventModel} detail.eventRecord The event record\n         * @param {Scheduler.model.ResourceModel} detail.resourceRecord The event record\n         * @param {Object} detail.renderData A data object containing properties that will be used to create the event element\n         * @param {Object} detail.renderData.style The style property is an object containing style properties for the event element\n         * @param {Object} detail.renderData.cls The cls property is an object whose property names will be added to\n         * the event element if the property value is truthy\n         * @param {Object} detail.renderData.iconStyle The iconStyle property is an object containing style properties for\n         * the icon element if an icon element is to be used\n         * @param {Object} detail.renderData.iconCls The iconCls property is an object whose property names will be added to\n         * the icon element. Initially set from the event record's {@link Scheduler.model.EventModel#field-iconCls}.\n         * Can be mutated by the renderer. If null, or no properties are set, no icon will be rendered\n         * @param {String} detail.renderData.eventColor Color to be applied to the event\n         * @param {Object} detail.renderData.dataset An object which produces the `dataset` of the resulting event bar\n         * @param {Boolean} detail.renderData.solidBar This is valid for views which create event bars.\n         * This is set to `true` by default for all day and interday events so that these appear as a solid block of background color.\n         * An eventRenderer may mutate this flag to change in what manner the event bar is coloured - as a solid bar of colour,\n         * or using the foreground colour (text and icons) such as the MonthView, the CalendarRow (all day events in a DayView), and OverflowPopups\n         * @param {String} detail.renderData.bodyColor When used in a {@link Calendar.widget.DayView},\n         * this color is applied to the body of the event element. Note that this must be light enough\n         * that the text colour (From the SASS variable `$dayview-event-color`) is visible\n         * @param {Boolean} detail.showBullet If there is no `iconCls`, and the event is not recurring, then by default\n         * a \"bullet\" circular icon is shown if the view's {@link Calendar.widget.mixin.CalendarMixin#config-showBullet}\n         * if set. Setting this property in an event renderer overrides this behaviour.\n         * @returns {DomConfig|DomConfig[]|String|null}\n         * @config {Function|String}\n         */\n        eventRenderer : null,\n        /**\n         * If this is set to `true`, then when determining which assigned resource of a multi assigned event\n         * to use to create the event UI, the first resource which is still selected in the\n         * {@link Calendar.widget.Sidebar#property-resourceFilter} is used.\n         *\n         * The default is to use the first resource in the assigned list.\n         *\n         * The resource's {@link Scheduler.model.ResourceModel#field-eventColor} is used as the colour for the\n         * event unless the event has its own {@link Scheduler.model.EventModel#field-eventColor}.\n         *\n         * The resource's {@link Scheduler.model.ResourceModel#field-eventStyle} is used as the base of the style\n         * for the event, and the event's {@link Scheduler.model.EventModel#field-style} is applied to it.\n         * @prp {Boolean}\n         */\n        filterEventResources : null,\n        /**\n         * A Function (or name of a function in the ownership hierarchy) which returns the\n         * {@link Scheduler.model.ResourceModel resource record} to use to create the UI for an event.\n         *\n         * The resource's {@link Scheduler.model.ResourceModel#field-eventColor} is used as the colour for the\n         * event unless the event has its own {@link Scheduler.model.EventModel#field-eventColor}.\n         *\n         * The resource's {@link Scheduler.model.ResourceModel#field-eventStyle} is used as the base of the style\n         * for the event, and the event's {@link Scheduler.model.EventModel#field-style} is applied to it.\n         *\n         * For views which are linked to a single resource such as `ResourceView` and `DayResourceView`, the\n         * default implementation always returns the view's resource.\n         *\n         * If multi assignment is used, the default is to pick the first resource in the assigned resource list.\n         *\n         * If this view's {@link #property-filterEventResources} is `true`,\n         * then the first assigned event which is still filtered __in__ is chosen.\n         *\n         * An implementation of this function may be configured in to your {@link Calendar.view.Calendar#config-modes}\n         * to customize how the resource is chosen from a multi assigned event.\n         *\n         * @config {Function|String} [getPrimaryResource]\n         * @param {Scheduler.model.EventModel} eventRecord The event from which to extract the primary resource.\n         * @returns {Scheduler.model.ResourceModel} The resource to be used to render the event.\n         */\n        getPrimaryResource({ resources }) {\n            // If we are a view type which shows events only for one resource, choose that\n            // as the primary resource for the event\n            if (this.resource) {\n                return this.resource;\n            }\n            // Normally, just pick the first resource.\n            // If filterEventResources is set, we pick the first one which is still selected in the ResourceFilter\n            if (resources.length) {\n                const resourceFilter = this.filterEventResources && this.calendar?.widgetMap?.resourceFilter;\n                return resourceFilter ? resources.find(r => resourceFilter.selected.includes(r)) : resources[0];\n            }\n        }\n    };\n    /**\n     * This is the standard way to create a {@link Core.helper.DomHelper#typedef-DomConfig}\n     * element definition object for creating event bars in all view types.\n     *\n     * This may be used by application code which needs to create DOM structure for event bars, such\n     * as in custom cell renderers in an {@link Calendar.widget.AgendaView}.\n     *\n     * @param {Object} renderData Context for the event bar config creation.\n     * @param {Scheduler.model.EventModel} renderData.eventRecord The event record to create a {@link DomConfig} block for.\n     * @param {Boolean} renderData.minimal If this is set, no inner content is rendered, only\n     * the wrap and body element. This is to enable rendering placeholders such as bullets\n     * to represent the presence of events.\n     * @param {Date} renderData.date The date to create th DOM config for.\n     * @param {Date} [renderData.eventEndDate] An optional override to the event's ending date.\n     * @param {Function} [eventRenderer] Optionally a function which created content HTML for the\n     * event body. Defaults to any {@link #config-eventRenderer} configured into this view.\n     * @returns {DomConfig} A {@link Core.helper.DomHelper#typedef-DomConfig} element definition object\n     */\n    createEventDomConfig(renderData, eventRenderer = this.eventRenderer) {\n        const\n            me = this,\n            {\n                eventHeight,\n                intradayCls,\n                alldayCls,\n                solidBarCls,\n                pastEventCls,\n                showTime,\n                timeFormat,\n                rtl\n            }               = me,\n            calendar        = me.up('calendar'),\n            {\n                eventRecord,\n                minimal\n            }               = renderData,\n            eventEndDate    = renderData.eventEndDate || eventRecord.endingDate,\n            resourceRecord  = me.callback(me.getPrimaryResource, me, [eventRecord.isOccurrence ? eventRecord.recurringEvent : eventRecord]),\n            isRecurring     = eventRecord.isRecurring || eventRecord.isOccurrence,\n            isAllDay        = ('isAllDay' in renderData) ? renderData.isAllDay : me.isAllDayEvent?.(eventRecord),\n            eventInnerStyle = {\n                height : eventHeight !== 'auto' ? DomHelper.setLength(eventHeight) : null\n            },\n            eventSelectedCls = calendar?.eventSelectedCls,\n            dataset          = renderData.dataset = {\n                eventId : eventRecord.id\n            };\n        // Allow subclasses to create body content differently.\n        // DayView will create different content layout.\n        let\n            bodyContent     = me.internalBodyContentRenderer(eventRecord),\n            complexContent  = typeof bodyContent !== 'string',\n            bodyContentType = complexContent ? 'children' : 'html',\n            color           = eventRecord.color || eventRecord.eventColor || resourceRecord?.eventColor || emptyString,\n            eventStyle      = Object.assign(DomHelper.parseStyle(resourceRecord?.eventStyle), DomHelper.parseStyle(eventRecord.style)); ;\n        // Make DomClassList copies for renderers to mutate.\n        // We add our essential classes in after the renderer has run\n        // then use these in the DomConfig object\n        renderData.cls = eventRecord.cls.clone();\n        renderData.solidBar = isAllDay || minimal;\n        renderData.iconStyle = me.iconTarget === 'header' && me.showTime && !DomHelper.isNamedColor(color) ? { color } : {};\n        renderData.iconCls = new DomClassList(eventRecord.iconCls); // Not a DomClassList, so not cloneable\n        renderData.style = eventStyle;\n        renderData.eventColor = color;\n        renderData.eventHeight = eventHeight;\n        renderData.cls[me.shortEventCls] = eventRecord.durationMS <= me.shortEventDuration;\n        renderData.bodyStyle = {};\n        if (resourceRecord?.cls) {\n            renderData.cls.add(resourceRecord.cls);\n        }\n        if (eventRenderer && !minimal) {\n            // Renderer may set renderedEvent style and cls\n            const rendererValue = me.callback(eventRenderer, me, [{\n                view : me,\n                eventRecord,\n                resourceRecord,\n                renderData\n            }]);\n            // Allow renderer to change the event height\n            if (renderData.eventHeight !== eventHeight) {\n                eventInnerStyle.height = DomHelper.setLength(renderData.eventHeight);\n            }\n            if (rendererValue != null) {\n                // We don't know what the renderer returned. A string value\n                // may yield multiple elements so switch to complex desc content mode\n                // which makes the .b-cal-event-desc flexbox to lay content out.\n                complexContent = true;\n                bodyContent = rendererValue;\n                // If the renderer returns a DomSync object, use it as the child(ren).\n                if (typeof bodyContent !== 'string') {\n                    bodyContent = ArrayHelper.asArray(bodyContent);\n                    bodyContentType = 'children';\n                }\n            }\n            // If the renderer has replaced the DomClassList with a string, promote back to a DomClassList\n            if (typeof renderData.cls === 'string') {\n                renderData.cls = new DomClassList(renderData.cls);\n            }\n            // Same goes for iconCls\n            if (typeof renderData.iconCls === 'string') {\n                renderData.iconCls = new DomClassList(renderData.iconCls);\n            }\n            // If the renderer set it to be a string, reinstate it as an object so we can add our essential styles\n            if (typeof renderData.style === 'string') {\n                renderData.style = DomHelper.parseStyle(renderData.style);\n            }\n            // If the renderer set it to be a string, reinstate it as an object so we can add our essential styles\n            if (typeof renderData.bodyStyle === 'string') {\n                renderData.bodyStyle = DomHelper.parseStyle(renderData.bodyStyle);\n            }\n        }\n        bodyContent = [{\n            className : {\n                'b-cal-event-desc'         : 1,\n                'b-cal-event-desc-complex' : complexContent\n            },\n            [bodyContentType] : bodyContent\n        }];\n        // Add essential classes for eventWrap *after* the renderer has run\n        Object.assign(renderData.cls, {\n            'b-cal-event-wrap' : 1,\n            'b-iscreating'     : eventRecord.isCreating,\n            'b-readonly'       : eventRecord.readOnly,\n            'b-minimal'        : minimal,\n            'b-milestone'      : eventRecord.isMilestone && !isAllDay,\n            [alldayCls]        : alldayCls && isAllDay,\n            [solidBarCls]      : solidBarCls && renderData.solidBar,\n            [intradayCls]      : intradayCls && !isAllDay,\n            [pastEventCls]     : pastEventCls && eventEndDate < new Date(),\n            [eventSelectedCls] : eventSelectedCls && calendar?.isEventSelected(eventRecord),\n            'b-rtl'            : rtl\n        });\n        color = renderData.eventColor;\n        const { bodyColor } = renderData;\n        if (bodyColor?.length) {\n            renderData.cls['b-custom-body-color'] = 1;\n            renderData.bodyStyle['--dayview-body-background-color'] = bodyColor;\n        }\n        if (color?.length) {\n            // DomHelper.createColorStyle takes Non-CSS colors to be one of the predefined colors\n            eventStyle['--cal-event-color'] = DomHelper.createColorStyle(color);\n        }\n        // All day event *bars* don't have a header.\n        // But DayView can now be configured to not show the allDayHeader which means allDay events\n        // go into tye day schedule as normal intraday event elements which *do* have a header.\n        if (showTime && !(isAllDay && this.showAllDayHeader)) {\n            bodyContent.unshift({\n                className : 'b-event-header',\n                children  : [\n                    {\n                        className : 'b-event-time',\n                        html      : DH.format(eventRecord.startDate, timeFormat)\n                    }\n                ]\n            });\n        }\n        const\n            // Presence of icon classes triggers inclusion of an icon\n            hasIcon             = Boolean(renderData.iconCls?.length),\n            useIconAsRecurrIcon = !hasIcon && isRecurring,\n            showBullet          = ('showBullet' in renderData) ? renderData.showBullet : me.showBullet === true || ((me.showBullet?.bar && renderData.solidBar) || (me.showBullet?.noBar && !renderData.solidBar)),\n            showCircle          = !hasIcon && !isRecurring && showBullet,\n            iconElement         = {\n                tag       : 'i',\n                className : Object.assign({\n                    'b-cal-event-icon'      : !useIconAsRecurrIcon,\n                    'b-cal-recurrence-icon' : useIconAsRecurrIcon,\n                    'b-icon'                : 1,\n                    'b-fw-icon'             : 1,\n                    'b-icon-circle'         : showCircle,\n                    'b-icon-recurring'      : useIconAsRecurrIcon\n                }, renderData.iconCls),\n                style : renderData.iconStyle\n            },\n            eventInnerContent   = [{\n                className : 'b-cal-event-body',\n                children  : bodyContent,\n                style     : renderData.bodyStyle\n            }],\n            iconParent          =\n                me.iconTarget === 'header' && me.showTime\n                    ? (bodyContent[0].children.length > 0 ? bodyContent[0].children : bodyContent)\n                    : eventInnerContent;\n        // Only insert the icon DOM if we are showing any kind of icon, either\n        // from an iconCls spec, or a recurrence icon, or showing a bullet via the showBullet config.\n        if (hasIcon || useIconAsRecurrIcon || showCircle) {\n            if (me.iconTarget === 'header' && me.showTime) {\n                iconParent.push(iconElement);\n            }\n            else {\n                iconParent.unshift(iconElement);\n            }\n        }\n        // If the event had its own icon and is recurring, the recurrence icon is extra\n        if (hasIcon && isRecurring) {\n            iconParent.push({\n                tag       : 'i',\n                className : {\n                    'b-cal-recurrence-icon' : 1,\n                    'b-icon'                : 1,\n                    'b-fw-icon'             : 1,\n                    'b-icon-recurring'      : 1\n                },\n                style : renderData.iconStyle\n            });\n        }\n        return {\n            // Events are tabbable unless minimally rendered (dots)\n            tabIndex : minimal ? null : 0,\n            dataset,\n            className : renderData.cls,\n            style     : renderData.style,\n            children  : [{\n                className : 'b-cal-event',\n                style     : eventInnerStyle,\n                children  : minimal ? null : eventInnerContent\n            }]\n        };\n    }\n    internalBodyContentRenderer(eventRecord) {\n        const\n            // If creating a DayView event block, we inject <br> for newlines\n            eventNameHtml           = StringHelper[this.eventHeight === 'auto' ? 'encodeHtmlBR' : 'encodeHtml'](eventRecord.name),\n            { showResourceAvatars } = this;\n        // Only attempt to show avatars if there is an assignment Set.\n        if (showResourceAvatars && eventRecord.assigned?.size) {\n            const content = [{\n                class    : 'b-cal-event-resource-avatars',\n                children : eventRecord.resources.map(resource => this.getResourceAvatar(resource))\n            }, {\n                tag   : 'span',\n                class : 'b-cal-event-name',\n                html  : eventNameHtml\n            }];\n            return showResourceAvatars === 'last' ? content.reverse() : content;\n        }\n        else {\n            return eventNameHtml;\n        }\n    }\n};\n", "import LocaleHelper from '../../Core/localization/LocaleHelper.js';\nimport '../../Scheduler/localization/En.js';\nconst locale = {\n    localeName : 'En',\n    localeDesc : 'English (US)',\n    localeCode : 'en-US',\n    EventEdit : {\n        Calendar  : 'Calendar',\n        'All day' : 'All day',\n        day       : 'Day',\n        week      : 'Week',\n        month     : 'Month',\n        year      : 'Year',\n        decade    : 'Decade'\n    },\n    EventMenu : {\n        duplicateEvent : 'Duplicate event',\n        copy           : 'copy'\n    },\n    Calendar : {\n        Today      : 'Today',\n        next       : range => `Next ${range}`,\n        previous   : range => `Previous ${range}`,\n        plusMore   : value => `+${value} more`,\n        allDay     : 'All day',\n        endsOn     : d => `Ends ${d}`,\n        weekOfYear : ([y, w]) => `Week ${w}, ${y}`,\n        loadFail   : 'Calendar data load failed. Please contact your system administrator'\n    },\n    CalendarDrag : {\n        holdCtrlForRecurrence : 'Hold CTRL for a recurring event'\n    },\n    CalendarMixin : {\n        eventCount : count => `${count || 'No'} event${count === 1 ? '' : 's'}`\n    },\n    EventTip : {\n        'Edit event' : 'Edit event',\n        timeFormat   : 'LST'\n    },\n    ModeSelector : {\n        includeWeekends : 'Include weekends',\n        weekends        : 'Weekends'\n    },\n    AgendaView : {\n        Agenda : 'Agenda'\n    },\n    MonthView : {\n        Month     : 'Month',\n        monthUnit : 'month'\n    },\n    WeekView : {\n        weekUnit : 'week'\n    },\n    YearView : {\n        Year     : 'Year',\n        yearUnit : 'year',\n        noEvents : 'No events'\n    },\n    EventList : {\n        List   : 'List',\n        Start  : 'Start',\n        Finish : 'End',\n        days   : count => `${count > 1 ? `${count} ` : ''}day${count === 1 ? '' : 's'}`\n    },\n    DayView : {\n        Day               : 'Day',\n        dayUnit           : 'day',\n        daysUnit          : 'days',\n        expandAllDayRow   : 'Expand all-day section',\n        collapseAllDayRow : 'Collapse all-day section',\n        timeFormat        : 'LST'\n    },\n    DayResourceView : {\n        dayResourceView : 'Day resources'\n    },\n    Sidebar : {\n        'Filter events' : 'Filter events'\n    },\n    WeekExpander : {\n        expandTip   : 'Click to expand row',\n        collapseTip : 'Click to collapse row'\n    }\n};\nexport default LocaleHelper.publishLocale(locale);\n", "import Base from '../../../Core/Base.js';\nimport Config from '../../../Core/Config.js';\nimport Featureable from '../../../Core/mixin/Featureable.js';\nimport StringHelper from '../../../Core/helper/StringHelper.js';\nimport DomHelper from '../../../Core/helper/DomHelper.js';\nimport EventHelper from '../../../Core/helper/EventHelper.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\nimport Responsive from '../../../Core/widget/mixin/Responsive.js';\nimport Rectangle from '../../../Core/helper/util/Rectangle.js';\nimport DH from '../../../Core/helper/DateHelper.js';\nimport CalendarFeature from '../../feature/CalendarFeature.js';\nimport CalendarStores from '../../mixin/CalendarStores.js';\nimport SchedulerInterface from '../../mixin/SchedulerInterface.js';\nimport EventRenderer from './EventRenderer.js';\nimport AvatarRendering from '../../../Core/widget/util/AvatarRendering.js';\nimport Describable from '../../../Scheduler/view/mixin/Describable.js';\n// This Mixin is the basis of the Calendar package, so it must load the default locale\nimport '../../localization/En.js';\nimport EventSorter from '../../util/EventSorter.js';\n/**\n * @module Calendar/widget/mixin/CalendarMixin\n */\nconst\n    immediatePromise       = Promise.resolve(),\n    emptyObject            = Object.freeze({}),\n    { eventNameMap }       = EventHelper,\n    isFocusedCalendarMixin = w => w.isCalendarMixin && w.containsFocus;\n/**\n * Mixin that provides common handling methods and configs for Calendar widgets.\n *\n * This mixin also brings in the {@link Core.mixin.Featureable} mixin.\n *\n * @mixin\n * @mixes Scheduler/view/mixin/Describable\n * @mixes Calendar/widget/mixin/EventRenderer\n */\nexport default Target => class CalendarMixin extends (Target || Base).mixin(\n    Describable,\n    SchedulerInterface,\n    Featureable,\n    CalendarStores,\n    EventRenderer,\n    Responsive\n) {\n    static $name = 'CalendarMixin';\n    static get configurable() {\n        return {\n            //region Hidden configs\n            /**\n             * @event eventSelectionChange\n             * @hide\n             */\n            /**\n             * @hideconfigs htmlCls, autoUpdateRecord, record, textContent, content, html\n             */\n            /**\n             * @hideproperties  content, html\n             */\n            /**\n             * A String which describes how much the {@link #function-next} and {@link #function-previous}\n             * methods will move this view forwards or backwards in time.\n             *\n             * This is used to create the tooltip hints for the `nextButton` and `prevButton` in the\n             * {@link Calendar.view.Calendar#property-tbar Calendar's toolbar}. If this property\n             * is not defined, the `nextButton` and `prevButton` will be disabled when this view is active.\n             *\n             * Note that {@link Calendar.widget.WeekView} and {@link Calendar.widget.YearView} use a localized\n             * string property to yield this value. Other view types implement a `get stepUnit` getter because\n             * their step increments are variable.\n             * @member {String} stepUnit\n             * @readonly\n             */\n            //endregion\n            localizableProperties : [\n                'autoCreate.newName', 'timeFormat', 'shortDateFormat', 'shortDateTimeFormat'\n            ],\n            eventStore : null,\n            resourceStore : null,\n            /**\n             * A function which compares events which some views use to decide upon rendering order.\n             *\n             * Default sorter function are provided from the {@link Calendar.util.EventSorter} class.\n             *\n             * A custom sort function may be configured.\n             *\n             * Note that the two objects to compare may either be {@link Scheduler.model.EventModel}s\n             * or {@link EventBar}s which contain an `eventRecord` property which is the {@link Scheduler.model.EventModel}.\n             * @config {Function}\n             * @param {Scheduler.model.EventModel|EventBar} lhs The left side value to conpare\n             * @param {Scheduler.model.EventModel|EventBar} rhs The right side value to conpare\n             * @returns {Number}\n             */\n            eventSorter : EventSorter.defaultSorterFn,\n            responsive : {},  // brand as responsive so b-responsive-xxx CSS classes get added\n            /**\n             * Configure as `true` to hide {@link #config-nonWorkingDays}\n             * @config {Boolean}\n             */\n            hideNonWorkingDays : null,\n            hideNonWorkingDaysCls : 'b-hide-nonworking-days',\n            /**\n             * The week start day, 0 meaning Sunday, 6 meaning Saturday.\n             * Defaults to {@link Core.helper.DateHelper#property-weekStartDay-static}.\n             * @config {Number}\n             */\n            weekStartDay : DH.weekStartDay,\n            /**\n             * Non-working days as an object where keys are day indices, 0-6 (Sunday-Saturday), and the value is `true`.\n             * Defaults to {@link Core.helper.DateHelper#property-nonWorkingDays-static}.\n             * @config {Object<Number,Boolean>}\n             */\n            nonWorkingDays : {\n                value : DH.nonWorkingDays,\n                $config : {\n                    merge : 'replace'\n                }\n            },\n            /**\n             * The class name to add to calendar cells which are non working days.\n             * @config {String}\n             * @private\n             */\n            nonWorkingDayCls : 'b-nonworking-day',\n            /**\n             * The class name to add to calendar cells.\n             * @member {String} dayCellCls\n             */\n            /**\n             * The class name to add to calendar cells.\n             * @config {String}\n             * @private\n             */\n            dayCellCls : 'b-calendar-cell',\n            /**\n             * The class name to add to calendar cells which are weekend days.\n             * @config {String}\n             * @private\n             */\n            weekendCls : 'b-weekend',\n            todayCls : 'b-today',\n            pastEventCls : 'b-past-event',\n            /**\n             * The class name to add to events which have duration less than or equal to\n             * {@link #config-shortEventDuration}.\n             * @config {String}\n             */\n            shortEventCls : 'b-short-event',\n            /**\n             * The duration at which below and equal to this value, an event's encapsulating element gets\n             * the {@link #config-shortEventCls} added to it so that small event bars can have style rearrangements.\n             *\n             * In {@link Calendar.widget.DayView}s, short events have compressed layout so that the event name is\n             * visible on the top line next to the start time.\n             *\n             * This may be a string in the format required by {@link Core.helper.DateHelper#function-parseDuration-static}.\n             *\n             * It may also be configured as a millisecond value.\n             * @config {String|Number}\n             * @default\n             */\n            shortEventDuration : '30 minutes',\n            /**\n             * The height of event bars if this view creates event bars.\n             *\n             * {@link Calendar.widget.MonthView MonthView}, {@link Calendar.widget.MonthView CalendarRow}\n             * (the {@link Calendar.widget.DayView#config-allDayEvents all day row} in a\n             * {@link Calendar.widget.WeekView WeekView}) and {@link Calendar.widget.AgendaView AgendaView}\n             * use this config.\n             *\n             * In {@link Calendar.widget.DayView DayView} and {@link Calendar.widget.WeekView WeekView},\n             * the event element's height is part of the widget's layout and signifies the event's duration,\n             * so these use a default value of `'auto'`.\n             * @config {Number|String}\n             * @default\n             */\n            eventHeight : 25,\n            eventSpacing : 2,\n            intradayCls : 'b-intraday',\n            alldayCls : 'b-allday',\n            solidBarCls : 'b-solid-bar',\n            dayNameSelector : '.b-day-name',    // MonthView widens this to be the whole cell header\n            // if it's showing a separate week number column.\n            // CalendarRow always widens this to the cell header.\n            showTime : false,\n            /**\n             * A {@link Core.helper.DateHelper} format string used to format the time displayed in events\n             *\n             * @config {String}\n             * @default 'LT'\n             */\n            timeFormat : {\n                value   : 'LT',\n                $config : {\n                    localeKey : 'L{timeFormat}'\n                }\n            },\n            /**\n             * __Not applicable in a `DayView`__\n             *\n             * This specifies whether to show a circular \"bullet\" icon if there is no\n             * {@link Scheduler.model.EventModel#field-iconCls} defined for an event.\n             *\n             * By default, events which are rendered as solid blocks of colour (such as all day events) do __not__\n             * show the bullet icon.\n             *\n             * By default, events which do not show as a colour block show the bullet icon as a means of showing\n             * the event's defined `eventColor`.\n             *\n             * This property may contain two properties which define whether to show the bullet icon for both\n             * event types.\n             *\n             * If configured as `true`, all event bars will show a bullet icon if they do not have an\n             * {@link Scheduler.model.EventModel#field-iconCls}\n             * @config {Boolean|Object}\n             * @param {Boolean} [bar] This is `false` by default. Set this to `true` in modes where a solid event\n             * bar should show a bullet icon\n             * @param {Boolean} [noBar] This is `true` by default. Events with no background colour, use this to\n             * show the event's defined `eventColor`\n             * @default\n             */\n            showBullet : {\n                bar   : false,\n                noBar : true\n            },\n            eventColourStyleProperty : 'color', // By default the event color becomes the colour\n            // DayView uses backgroundColor\n            handlePointerInteraction : true,\n            /**\n             * A {@link Core.helper.DateHelper} format string to use to create date output for\n             * abbreviated view descriptions.\n             * @prp {String}\n             * @default 'll'\n             */\n            shortDateFormat : {\n                value   : 'll',\n                $config : {\n                    localeKey : 'L{shortDateFormat}'\n                }\n            },\n            /**\n             * A {@link Core.helper.DateHelper} format string to use to create date and time output for\n             * abbreviated view descriptions.\n             * @prp {String}\n             * @default 'll LT'\n             */\n            shortDateTimeFormat : {\n                value   : 'll LT',\n                $config : {\n                    localeKey : 'L{shortDateTimeFormat}'\n                }\n            },\n            /**\n             * Configure as `true` to make the view read-only, by disabling any UIs for modifying data.\n             *\n             * __Note that checks MUST always also be applied at the server side.__\n             * @config {Boolean}\n             */\n            readOnly : null,\n            /**\n             * If this config is set, then the `gesture` configured (which defaults to `dblclick`) creates a\n             * new event at the mouse or touch event's time point.\n             *\n             * The exact time is rounded to the closest specified `step` value. This value is also used\n             * for the {@link Core.widget.TimeField#property-step} value in the {@link Calendar.feature.EventEdit}'s\n             * time input field.\n             *\n             * The duration of the created event is the specified `duration` value.\n             *\n             * If this is specified as `true`, the `gesture` becomes `dblclick`, and the other properties\n             * are the default values listed below.\n             *\n             * If this is specified as a string, the string becomes the `gesture`, and the other properties\n             * are the default values listed below.\n             *\n             * @prp {Object}\n             * @property {String} [gesture='dblclick'] The DOM event name which initiates event creation at the event's position.\n             * @property {String|Function} [newName='New Event'] The name of an event created using `autoCreate` or a function to call which yields the name.\n             * @property {String} [step='15 minutes'] The time unit by which to snap the start click point of auto created events.\n             * __Only for views which have a granularity of less than one day such as `WeekView` and `DayView`__.\n             *\n             * For views which show whole days, the start defaults to 8am.\n             *\n             * This is a string in the format required by {@link Core.helper.DateHelper#function-parseDuration-static}.\n             *\n             * This value is also used for the {@link Core.widget.TimeField#property-step} value in the\n             * {@link Calendar.feature.EventEdit}'s time input field.\n             *\n             * @property {'round'|'ceil'|'floor'} [snapType='round'] How to snap a precise gesture time to a boundary specified by the `step` property.\n             * __Only for views which have a granularity of less than one day such as `WeekView` and `DayView`__.\n             * @property {String} [duration='1 hour'] The default start hour for auto created events in the form accepted by {@link Core.helper.DateHelper#function-parseDuration-static}\n             * @property {Number} [startHour=8] The default start hour for auto created events\n             * in views where the time granularity is one day. In a `DayView` or `WeekView` where a mouse event position\n             * will translate to a time of day, this is not used.\n             *\n             * This is the hour of the day to start the event at. It may be fractional.\n             * @accepts {Object|String|Boolean}\n             * @default\n             */\n            autoCreate : {\n                gesture   : 'dblclick',\n                newName   : 'L{Object.newEvent}',\n                step      : '15 minutes',\n                snapType  : 'round',\n                duration  : '1 hour',\n                startHour : 8\n            },\n            /**\n             * The {@link Scheduler.model.EventModel#field-durationUnit} to use when drag-creating events\n             * in this view.\n             *\n             * For {@link Calendar.widget.DayView}s, this is normally `'hour'`, for views with a granularity\n             * level of one day, the default is `'day'`.\n             * @config {String}\n             */\n            dragUnit : 'hour',\n            autoRefresh : {\n                $config : {\n                    merge : 'classList'\n                },\n                value : null\n            },\n            /**\n             * Set to false if you don't want to allow events overlapping times for any one resource (defaults to true).\n             * @config {Boolean}\n             * @default\n             * @private\n             */\n            allowOverlap : true,\n            /**\n             * When used as a {@link Calendar.view.Calendar#config-modes mode} of a Calendar, the\n             * date will automatically be kept synced with the Calendar's\n             * {@link Calendar.view.Calendar#property-date}.\n             *\n             * Configure this as `false` to opt out of this.\n             *\n             * __Note that this places the onus on the application developer to control the\n             * viewed date range in this widget.__\n             * @config {Boolean} syncViewDate\n             * @default\n             */\n            syncViewDate : true,\n            // For views which are Panels, make them not include a tabIndex\n            focusable : false,\n            // Allow an AvatarRendering instance to be specified\n            avatarRendering : {\n                $config : 'lazy',\n                value   : null\n            },\n            /**\n             * Configure as `true` to show avatars of the assigned resources (calendars) at the\n             * start of the event bar.\n             *\n             * Configure as `'last'` to show avatars of the assigned resources (calendars) at the\n             * end of the event bar.\n             *\n             * Note that the avatars are `2.22em` diameter circles, and this may not be suitable\n             * for rendering in short events inside a DayView.\n             *\n             * In a view which renders event bars, the {@link #config-eventHeight} should be\n             * increased from the default to accommodate the extra information.\n             *\n             * Note that you must set {@link #config-resourceImagePath} in order that the system\n             * knows where to access the resource's image file from.\n             *\n             * If no image is set, or the image is not found, the resource's initials are shown instead.\n             *\n             * By default it is inherited from the owning Calendar:\n             * ```javascript\n             * new Calendar({\n             *     resourceImagePath   : 'images/resources/'\n             *     modes : {\n             *         month : {\n             *             showResourceAvatars : true,\n             *         },\n             *         week : {\n             *             // Images go at the end of the body with name first\n             *             showResourceAvatars : 'last,\n             *         }\n             *     }\n             * });\n             * ```\n             * @config {Boolean|String}\n             * @default false\n             */\n            showResourceAvatars : null,\n            /**\n             * Path to load resource images from. Used by the {@link #config-showResourceAvatars} config\n             * to create URLs using the resource's\n             * {@link Scheduler/model/ResourceModel#field-image} or\n             * {@link Scheduler/model/ResourceModel#field-imageUrl} fields:\n             *\n             * * `image` represents image name inside the specified `resourceImagePath`,\n             * * `imageUrl` represents fully qualified image URL.\n             *\n             * **NOTE**: The path should end with a `/`:\n             *\n             * ```javascript\n             * new Calendar({\n             *     modeDefaults : {\n             *         showResourceAvatars : true,\n             *         resourceImagePath   : 'images/resources/'\n             *     }\n             * });\n             * ```\n             * @config {String}\n             */\n            resourceImagePath : null,\n            /**\n             * The minimum date to which the `startDate` of this view may be navigated.\n             * @member {Date} minDate\n             */\n            /**\n             * The minimum date to which the `startDate` of this view may be navigated.\n             * @config {Date|String}\n             */\n            minDate : null,\n            /**\n             * The maximum date to which the `endDate` of this view may be navigated.\n             * @member {Date} maxDate\n             */\n            /**\n             * The maximum date to which the `endDate` of this view may be navigated.\n             * @config {Date|String}\n             */\n            maxDate : null,\n            /**\n             * By default, when navigating through time, the next time\n             * block will be animated in from the appropriate direction.\n             *\n             * Configure this as `false` to disable this.\n             * @prp {Boolean} animateTimeShift\n             * @default\n             */\n            animateTimeShift : true,\n            // Private at this level, it's only processed for a ResourceView\n            includeTimeRanges : null,\n            testConfig : {\n                animateTimeShift : false\n            }\n        };\n    }\n    static get delayable() {\n        return {\n            refreshSoon : {\n                type              : 'raf',\n                cancelOutstanding : true\n            }\n        };\n    }\n    static get featureable() {\n        return {\n            factory : CalendarFeature\n        };\n    }\n    construct(config) {\n        const me = this;\n        super.construct(config);\n        // Not tabbable, but conducts focus.\n        // We have not implemented Calendar Cell navigation which is external\n        // to event-to-event navigation, so YearView does not receive focus yet.\n        // Only add tabIndex if we don't already have it\n        if (!me.isYearView && me.element.tabIndex !== -1 && me.contentElement?.tabIndex !== -1) {\n            (me.contentElement || me.element).tabIndex = -1;\n        }\n        // Pull any the AvatarRendering instance through\n        me.getConfig('avatarRendering');\n        EventHelper.on({\n            element : me.element,\n            keydown : 'onCalendarKeyDown',\n            thisObj : me\n        });\n        if (me.handlePointerInteraction) {\n            EventHelper.on({\n                element   : me.element,\n                mouseover : 'onEventMouseOverOut',\n                mouseout  : 'onEventMouseOverOut',\n                mousedown : 'onCalendarPointerInteraction',\n                mouseup   : 'onCalendarPointerInteraction',\n                // Block subsequent clicks before 300ms has elapsed\n                click : {\n                    handler : 'onCalendarPointerInteraction',\n                    block   : 300\n                },\n                dblclick    : 'onCalendarPointerInteraction',\n                contextmenu : 'onCalendarPointerInteraction',\n                thisObj     : me\n            });\n        }\n    }\n    /**\n     * For use by the {@link Calendar.feature.TimeRanges} feature. This yields the set of\n     * {@link Calendar.model.TimeRangeModel}s and {@link Scheduler.model.ResourceTimeRangeModel}s\n     * to be rendered in the passed date range.\n     * @param {Date} startDate The start date of the range to be returned\n     * @param {Date} endDate The end date of the range to be returned.\n     * @returns {Calendar.model.TimeRangeModel[]}\n     * @private\n     */\n    getTimeRanges(startDate, endDate) {\n        const\n            {\n                resourceId,\n                project\n            }                 = this,\n            includeTimeRanges = resourceId ? this.owner.includeTimeRanges : true,\n            ranges            = (resourceId == null || includeTimeRanges) ? project?.getTimeRanges(startDate, endDate) : [];\n        // Add in resourceTimeRanges for this view if this view is for a certain resource\n        if (resourceId != null) {\n            const resourceRanges = project?.getResourceTimeRanges(startDate, endDate).filter(r => r.resourceId == resourceId);\n            // Default color to event color for resource\n            resourceRanges.forEach(r => {\n                if (!r.color) {\n                    r.color = this.resource.eventColor;\n                }\n            });\n            ranges.push(...resourceRanges);\n        }\n        return ranges;\n    }\n    updateIncludeTimeRanges() {\n        if (!this.isConfiguring) {\n            this.refresh();\n        }\n    }\n    onConfigChange(info) {\n        if (this.autoRefresh?.[info?.name]) {\n            this.refreshSoon();\n        }\n        super.onConfigChange(info);\n    }\n    changeAvatarRendering(avatarRendering) {\n        return AvatarRendering.new({\n            element : this.element\n        }, avatarRendering);\n    }\n    updateShowResourceAvatars(showResourceAvatars) {\n        if (showResourceAvatars) {\n            // We need the AvatarRendering utility if we are showing avatars.\n            this.avatarRendering || (this.avatarRendering = true);\n        }\n        this.refresh();\n    }\n    getResourceAvatar(resourceRecord) {\n        return this.avatarRendering.getResourceAvatar({\n            resourceRecord,\n            imageUrl : resourceRecord.image === false ? null : (resourceRecord.imageUrl || resourceRecord.image && (this.resourceImagePath + resourceRecord.image)),\n            color    : resourceRecord.eventColor,\n            initials : resourceRecord.initials,\n            dataset  : {\n                btip       : StringHelper.encodeHtml(resourceRecord.name),\n                resourceId : resourceRecord.id\n            }\n        });\n    }\n    updateEventHeight(eventHeight) {\n        const { style } = this.element;\n        // Force a recalculate on next access\n        this._eventHeightInPixels = null;\n        style.setProperty('--event-height', DomHelper.setLength(eventHeight));\n        style.setProperty('--arrow-width', 'calc(var(--event-height) / 3)');\n        style.setProperty('--arrow-margin', 'calc(var(--event-height) / -3)');\n        // Schedule a refresh\n        if (!this.isConfiguring) {\n            this.refreshSoon();\n        }\n    }\n    /**\n     * Returns the pixel value of the {@link #config-eventHeight} in case it was configured as a\n     * CSS measurement in other units.\n     * @private\n     */\n    get eventHeightInPixels() {\n        const\n            me              = this,\n            { eventHeight } = me;\n        let eventHeightInPixels = me._eventHeightInPixels;\n        // Some views, like DayView don't have a defined event height.\n        if (eventHeight !== 'auto') {\n            if (!eventHeightInPixels) {\n                eventHeightInPixels = me._eventHeight;\n                // Measure the height if it's a string value.\n                // Value is cached until eventHeight is changed again.\n                if (typeof eventHeightInPixels === 'string') {\n                    eventHeightInPixels = DomHelper.measureSize(eventHeightInPixels, me.contentElement.querySelector(`.${me.eventBarContainerCls}`), false);\n                }\n                me._eventHeightInPixels = eventHeightInPixels;\n            }\n        }\n        return eventHeightInPixels;\n    }\n    /**\n     * This property yields the base selector to use to find visible cell elements in this view.\n     *\n     * It's based upon the {@link #property-dayCellCls}, but also takes into account the\n     * {@link #config-hideNonWorkingDays} setting.\n     *\n     * If this is a MonthView, it also takes into account the\n     * {@link Calendar.widget.MonthView#config-hideOtherMonthCells} setting.\n     * @property {String}\n     * @readonly\n     */\n    get visibleCellSelector() {\n        const excludes = [];\n        if (this.hideOtherMonthCells) {\n            excludes.push(`.${this.otherMonthCls}`);\n        }\n        if (this.hideNonWorkingDays) {\n            excludes.push(`.${this.nonWorkingDayCls}`);\n        }\n        return `.${this.dayCellCls}${excludes.length ? `:not(${excludes.join(',')})` : ''}`;\n    }\n    /**\n     * This property yields this widget. This is to enable Calendar Features to be able to attach\n     * to standalone Calendar widgets as their owning client, and to access a currently active view\n     * in a standard way.\n     * @property {Calendar.widget.mixin.CalendarMixin}\n     * @typings {typeof CalendarMixin}\n     * @readonly\n     * @internal\n     */\n    get activeView() {\n        return this;\n    }\n    /**\n     * This property yields this widget. This is to enable Calendar Features to be able to attach\n     * to standalone Calendar widgets as their owning client, and to access a currently active view\n     * in a standard way.\n     * @property {Calendar.widget.mixin.CalendarMixin}\n     * @typings {typeof CalendarMixin}\n     * @readonly\n     * @internal\n     */\n    get activeSubView() {\n        const\n            { items } = this,\n            // If we're a multi-CalendarWidget view (Such as a ResourceView), narrow down activeView\n            // to the active subView which contains focus.\n            activeSubView  = items.filter(isFocusedCalendarMixin)?.[0];\n        return activeSubView || this;\n    }\n    /**\n     * Calendar mode that this view represents (eg. \"day\", \"month\" etc). Only accessible when used within a Calendar.\n     * @member {String} modeName\n     * @readonly\n     */\n    /**\n     * This function allows a Calendar widget to act as a Feature host by exposing the same interface\n     * as a {@link Calendar.view.Calendar}. It executes the passed function on this widget.\n     * @internal\n     * @param {Function} fn The function to call.\n     * @param {Object[]} [args] The arguments to pass. Defaults to this view.\n     * @param {Object} [thisObj] The `this` reference for the function. Defaults to this view.\n     */\n    eachView(fn, args, thisObj = null) {\n        this.callback(fn, thisObj || this, args || [this]);\n    }\n    get focusElement() {\n        const { calendar } = this;\n        if (calendar) {\n            const { navigator } = calendar;\n            return navigator.activeItem || navigator.previousActiveItem || this.element.querySelector(navigator.itemSelector) || super.focusElement;\n        }\n    }\n    captureFocusItem(activeElement) {\n        const\n            activeEvent = this.getEventRecord(activeElement),\n            base = super.captureFocusItem(activeElement);\n        return (scrollIntoView = true) => {\n            const newEl = activeEvent && this.getEventElement(activeEvent);\n            if (newEl) {\n                scrollIntoView ? newEl.focus() : DomHelper.focusWithoutScrolling(newEl);\n            }\n            else {\n                base?.(scrollIntoView);\n            }\n        };\n    }\n    /**\n     * Refreshes the UI after a change to the EventStore, or to a configuration that requires\n     * the UI to change.\n     *\n     * Only updates the UI if this widget is visible. If it is not visible, the refresh is\n     * deferred until it next becomes visible.\n     */\n    refresh() {\n        // If we're being called programmatically, cancel upcoming delayed refreshes.\n        this.refreshSoon.cancel();\n        this.month && this.element.style.setProperty('--week-length', this.month.weekLength);\n        // Only refresh immediately if we are visible.\n        this.whenVisible('refreshNow');\n    }\n    refreshNow() {\n        const refocus = this.captureFocus();\n        this.doRefresh();\n        refocus();\n    }\n    /**\n     * Executes the passed callback after the next refresh, but waits only for a maximum number of\n     * milliseconds before optionally performing a refresh and executing the callback.\n     *\n     * When awaited, the function resolves after the refresh or timeout and after any callback have been executed\n     * and the Promise yields `true` if a refresh has been performed.\n     *\n     * @param {String|Function} [callback] A function or the name of a function in the ownership hierarchy\n     * to run after the next refresh operation. May be omitted, and `options` passed as the sole parameter.\n     * @param {Object} [options] How long to wait and what to do on timeout.\n     * @param {Number} [options.delay=100] The number of milliseconds to wait for a refresh.\n     * @param {Boolean} [options.forceRefresh=false] If the refresh does not happen within the timer, call refresh.\n     * @async\n     * @internal\n     */\n    afterRefresh(callback, options = { delay : 100, forceRefresh : false }) {\n        if (typeof callback === 'object') {\n            options = callback;\n            callback = null;\n        }\n        else if (callback) {\n            callback = this.resolveCallback(callback, this);\n            callback = callback.handler.bind(callback.thisObj);\n        }\n        if (typeof options === 'number') {\n            options = { delay : options };\n        }\n        return new Promise(resolve => {\n            this.ion({\n                refresh : () => {\n                    callback?.();\n                    resolve(true);\n                },\n                once    : true,\n                expires : {\n                    delay : options.delay || 100,\n                    alt   : () => {\n                        options.forceRefresh && this.refresh();\n                        callback?.();\n                        resolve(options.forceRefresh);\n                    }\n                }\n            });\n        });\n    }\n    get displayName() {\n        return StringHelper.capitalize(this.title || this.type);\n    }\n    get hiddenNonWorkingDays() {\n        return this.hideNonWorkingDays ? (this.nonWorkingDays || this.month.nonWorkingDays) : emptyObject;\n    }\n    changeAutoCreate(autoCreate) {\n        const defaults = CalendarMixin.$meta.config.autoCreate;\n        if (autoCreate === true) {\n            return defaults;\n        }\n        if (typeof autoCreate === 'string') {\n            autoCreate = {\n                gesture : autoCreate\n            };\n        }\n        return Config.merge(autoCreate, defaults);\n    }\n    updateDateSeparator() {\n        this.refreshCalendarDescription();\n    }\n    updateDescriptionFormat() {\n        this.refreshCalendarDescription();\n    }\n    refreshCalendarDescription() {\n        const { calendar } = this;\n        if (calendar?.isPainted && calendar.activeView === this) {\n            calendar.updateViewDescription();\n        }\n    }\n    changeShortEventDuration(shortEventDuration) {\n        return isNaN(shortEventDuration) ? DH.as('ms', shortEventDuration) : Number(shortEventDuration);\n    }\n    updateShortEventDuration() {\n        if (!this.isConfiguring) {\n            this.refresh();\n        }\n    }\n    updateLocalization() {\n        // If user configured calendar with specific config, then prefer it to the localized value\n        if (!('weekStartDay' in this.initialConfig)) {\n            this.weekStartDay = DH.weekStartDay;\n        }\n        if (!('nonWorkingDays' in this.initialConfig)) {\n            this.nonWorkingDays = DH.nonWorkingDays;\n        }\n        super.updateLocalization();\n        this.refreshCalendarDescription();\n    }\n    updateAutoCreate(autoCreate) {\n        // The autocreate.newEvent property must be processed\n        this.updateLocalization();\n    }\n    updateWeekStartDay(weekStartDay) {\n        const { refreshCount, month } = this;\n        super.updateWeekStartDay?.(weekStartDay);\n        // This can be called from changeMonth during initialization of the Month object\n        // and at that time, obviously the property will not be present.\n        if (month) {\n            month.weekStartDay = weekStartDay;\n        }\n        if (this.isPainted && this.refreshCount === refreshCount) {\n            this.refresh();\n        }\n    }\n    changeNonWorkingDays(nonWorkingDays) {\n        const\n            me          = this,\n            result      = new Proxy(ObjectHelper.assign({}, nonWorkingDays), {\n                set(target) {\n                    const result = Reflect.set(...arguments);\n                    me.updateNonWorkingDays(target);\n                    return result;\n                },\n                deleteProperty(target) {\n                    const result = Reflect.deleteProperty(...arguments);\n                    me.updateNonWorkingDays(target);\n                    return result;\n                }\n            });\n        return result;\n    }\n    updateNonWorkingDays(nonWorkingDays) {\n        const { refreshCount, month } = this;\n        super.updateNonWorkingDays?.(nonWorkingDays);\n        // This can be called from changeMonth during initialization of the Month object\n        // and at that time, obviously the property will not be present.\n        if (month) {\n            month.nonWorkingDays = nonWorkingDays;\n        }\n        if (this.isPainted && this.refreshCount === refreshCount) {\n            this.refresh();\n        }\n    }\n    dayOfDate(date) {\n        return DH.clearTime(date);\n    }\n    ingestDate(date) {\n        date = typeof date === 'string' ? DH.parse(date) : new Date(date);\n        if (isNaN(date)) {\n            throw new Error('Calendar widget date ingestion must be passed a Date, or a YYYY-MM-DD date string');\n        }\n        return this.dayOfDate(date);\n    }\n    changeDate(date, oldDate) {\n        date = this.ingestDate(date);\n        // Honour minDate and maxDate\n        // isValidTargetDate always needs the answer.\n        if (!this.isInIsValidTargetDate && !this.isValidTargetDate(date)) {\n            return;\n        }\n        // Don't fire the beforeDateChange event for a no-change.\n        if (!oldDate || (date - oldDate)) {\n            /**\n             * Triggered before a view's orientating date changes.\n             *\n             * return `false` from an event handler to veto the temporal navigation.\n             * @preventable\n             * @event beforeChangeDate\n             * @param {Date} oldDate The current orientating date of this view.\n             * @param {Date} date The new date to which this view is to be orientated.\n             */\n            if (this.trigger('beforeDateChange', { date, oldDate }) !== false) {\n                return date;\n            }\n        }\n    }\n    isValidTargetDate(date, end) {\n        const\n            me      = this,\n            minDate = me.minDate || me.calendar?.minDate,\n            maxDate = me.maxDate || me.calendar?.maxDate;\n        if (!isNaN(minDate) || !isNaN(maxDate)) {\n            // flag so that changers don't ask for validation.\n            this.isInIsValidTargetDate = true;\n            // We need to call changer here so that subclasses can snap to their range start.\n            // But the base changer above must not ask for validation.\n            const newDate = end ? me[`change${StringHelper.capitalize(end)}Date`](date, null) : date;\n            me.isInIsValidTargetDate = false;\n            // Veto navigation to before minDate.\n            if (!isNaN(minDate) && newDate < minDate) {\n                return false;\n            }\n            // Veto navigation to after maxDate.\n            if (!isNaN(maxDate)) {\n                return !(end === 'end' ? newDate > maxDate : newDate >= maxDate);\n            }\n        }\n        return true;\n    }\n    changeStartDate(startDate) {\n        // Subclass may already have vetoed the change\n        if (startDate) {\n            startDate = this.ingestDate(startDate);\n            // Honour minDate and maxDate\n            // isValidTargetDate always needs the answer.\n            if (this.isInIsValidTargetDate || this.isValidTargetDate(startDate, 'start')) {\n                return startDate;\n            }\n        }\n    }\n    changeEndDate(endDate) {\n        // Subclass may already have vetoed the change\n        if (endDate) {\n            endDate = this.ingestDate(endDate);\n            // Honour minDate and maxDate\n            // isValidTargetDate always needs the answer.\n            if (this.isInIsValidTargetDate || this.isValidTargetDate(endDate, 'end')) {\n                return endDate;\n            }\n        }\n    }\n    /**\n     * Brings an event or a time into view. Optionally visually highlights the target.\n     *\n     * __This may change the date range encompassed by this view to bring the date or event into its\n     * ownership__.\n     *\n     * Scrolling may or may not be required, depending on the type and size constraints of the view.\n     * @param {Scheduler.model.EventModel|Date} target The event or Date to scroll to.\n     * @param {Object} [options] How to scroll.\n     * @param {'start'|'end'|'center'|'nearest'} [options.block] How far to scroll the target.\n     * @param {Number} [options.edgeOffset] edgeOffset A margin around the target to bring into view.\n     * @param {Object|Boolean|Number} [options.animate] Set to `true` to animate the scroll by 300ms,\n     * or the number of milliseconds to animate over, or an animation config object.\n     * @param {Number} [options.animate.duration] The number of milliseconds to animate over.\n     * @param {String} [options.animate.easing] The name of an easing function.\n     * @param {Boolean|Function} [options.highlight] Set to `true` to highlight the resulting element\n     * when it is in view. May be a function which is called passing the resulting element\n     * to provide customized highlighting.\n     * @param {Boolean} [options.focus] Set to `true` to focus the element when it is in view.\n     * @param {Boolean} [options.x] Pass as `false` to disable scrolling in the `X` axis.\n     * @param {Boolean} [options.y] Pass as `false` to disable scrolling in the `Y` axis.\n     * @returns {Promise} A promise which is resolved when the target has been scrolled into view.\n     */\n    async scrollTo(target, options = { animate : true }) {\n        const\n            me             = this,\n            { scrollable } = me;\n        let promise = immediatePromise;\n        if (me.scrollPromise) {\n            await me.scrollPromise;\n        }\n        // Scrolling to an event. Make sure it's in our date range first\n        if (target.isEvent) {\n            const eventRecord = target;\n            // If we do not encompass the event, move to the event's startDate.\n            if (!DH.intersectSpans(me.startDate, me.endDate, target.startDate, target.endDate)) {\n                me.date = target.startDate;\n            }\n            target = me.getEventElement(target);\n            if (!target) {\n                me.refresh();\n                target = me.getEventElement(eventRecord);\n            }\n        }\n        // The only other option is scrolling to a Date\n        else {\n            target = me.changeDate(target);\n            // If we do not own the date, move to that date.\n            if (!DH.betweenLesser(target, me.startDate, me.endDate) || !me.getDayElement(target, true)) {\n                me.date = target;\n            }\n            target = me.getDayElement(target);\n        }\n        // If this view does scrolling, scroll the target into view\n        if (scrollable) {\n            promise = scrollable.scrollIntoView(target, options);\n        }\n        // Otherwise, we are responsible for any highlight\n        else if (options.highlight) {\n            if (typeof options.highlight === 'boolean') {\n                DomHelper.highlight(Rectangle.from(target));\n            }\n            else {\n                me.callback(options.highlight, me, [target, me]);\n            }\n        }\n        return me.scrollPromise = promise;\n    }\n    async checkAutoCreateGesture(domEvent, date, resourceRecord) {\n        const\n            me             = this,\n            { autoCreate } = me;\n        // If the gesture is on a known date, and we are visible, and not readOnly and it's an autoCreate.gesture...\n        if (date && me.isVisible && !me.readOnly && domEvent.type === autoCreate?.gesture?.toLowerCase()) {\n            const\n                dateStart      = DH.startOf(date, undefined, undefined, me.weekStartDay),\n                startHourMS    = isNaN(autoCreate.startHour) ? DH.getTimeOfDay(DH.parse(autoCreate.startHour, 'HH:mm:ss')) : autoCreate.startHour * 1000 * 60 * 60;\n            /**\n             * This event fires whenever the {@link #config-autoCreate autoCreate gesture} is detected\n             * and also when a {@link Calendar.feature.CalendarDrag drag-create} gesture is detected.\n             *\n             * This event is preventable and may be used to validate UI-initiated event creation.\n             * @event beforeAutoCreate\n             * @preventable\n             * @param {Event} domEvent The DOM event which initiated the creation.\n             * @param {Date} date The starting time of the event to be created. If this is in a\n             * `DayView, this will be snapped according to the specification in {@link #property-autoCreate}\n             */\n            if (me.trigger('beforeAutoCreate', { domEvent, date : me.isDayView ? DH[autoCreate.snapType](date, autoCreate.step) : DH.add(dateStart, startHourMS) }) !== false) {\n                return me.createEvent(date, resourceRecord);\n            }\n        }\n    }\n    /**\n     * Creates an event on the specified date which conforms to this view's {@link #config-autoCreate}\n     * setting.\n     *\n     * This method may be called programmatically by application code if the `autoCreate` setting\n     * is `false`, in which case the default values for `autoCreate` will be used.\n     *\n     * If the {@link Calendar.feature.EventEdit EventEdit} feature is active, the new event\n     * will be displayed in the event editor.\n     * @param {Date} date The date to add the event at. If there's no time component, the\n     * {@link #config-autoCreate}'s `startHour` will be used.\n     */\n    createEvent(date, resourceRecord) {\n        const handler = this.calendar || this.owner?.calendar || this;\n        // If contained by a Calendar the Calendar may have opinions about which view\n        // to pass to doCreateEvent as the editing view.\n        handler.doCreateEvent(date, resourceRecord, this);\n    }\n    async doCreateEvent(date, resourceRecord, editingView = this) {\n        resourceRecord = resourceRecord ?? this.defaultCalendar;\n        const\n            me             = this,\n            { isDayView }  = (me.viewType || me),\n            // We are either a mode or a CalendarRow\n            calendar       = me.calendar || me.owner?.calendar,\n            // Some views may be created with a chained EventStore.\n            // We must use the Calendar's EventStore.\n            eventStore     = calendar?.eventStore || me.eventStore,\n            autoCreate     = editingView.autoCreate || editingView.changeAutoCreate(true),\n            { modelClass } = eventStore,\n            { newName }    = autoCreate,\n            dateStart      = new Date(date.getTime() + (me.dayStartShift || 0)),\n            startHourMS    = isNaN(autoCreate.startHour) ? DH.getTimeOfDay(DH.parse(autoCreate.startHour, 'HH:mm:ss')) : autoCreate.startHour * 1000 * 60 * 60,\n            // If this view has high definition time granularity (isa DayView), then round the precise date\n            // passed to this view's autoCreate.step and snapType.\n            // Otherwise default to an event starting at autoCreate.startHour.\n            startDate   = isDayView ? DH[autoCreate.snapType](date, autoCreate.step) : DH.add(dateStart, startHourMS),\n            duration    = DH.parseDuration(autoCreate.duration),\n            endDate     = DH.add(startDate, duration.magnitude, duration.unit),\n            name        = me.resolveCallback(newName, me, false) ? me.callback(newName, me, [me, startDate]) : newName,\n            recordData  = {\n                [modelClass.getFieldDataSource('name')]         : name,\n                [modelClass.getFieldDataSource('startDate')]    : startDate,\n                [modelClass.getFieldDataSource('endDate')]      : endDate,\n                [modelClass.getFieldDataSource('duration')]     : duration.magnitude,\n                [modelClass.getFieldDataSource('durationUnit')] : duration.unit,\n                // If the view's settings resulted in a midnight to midnight event, flag it as allDay\n                allDay : DH.diff(startDate, endDate, 'day') === 1\n            },\n            // For EventLists, when we are using a startDate->endDate range as opposed to a fixed\n            // range, the dates are *inclusive*, so pick the correct date containment function.\n            dateContainmentFn = editingView.isEventList && !editingView.range ? 'betweenLesserEqual' : 'betweenLesser';\n        const newRecord = eventStore.createRecord(recordData);\n        // If an editor is available, mark the event as non-persistable while it is being edited\n        if (calendar?.features.eventEdit && !calendar.features.eventEdit.disabled) {\n            newRecord.isCreating = true;\n        }\n        if (resourceRecord) {\n            eventStore.assignmentStore.assignEventToResource(newRecord, resourceRecord);\n        }\n        await eventStore.addAsync(newRecord);\n        // If the date we are being asked to create at is in view, edit the event when\n        // the view has rendered it.\n        if (DH[dateContainmentFn](startDate, editingView.startDate, editingView.endDate)) {\n            if (editingView.getEventElement(newRecord, startDate)) {\n                editingView.editAutoCreatedEvent(newRecord);\n            }\n            else {\n                editingView.ion({\n                    refresh({ source }) {\n                        // Conditionally call. May have been destroyed\n                        source.editAutoCreatedEvent?.(newRecord);\n                    },\n                    once    : true,\n                    prio    : -10000,\n                    buffer  : 100,\n                    expires : 500\n                });\n            }\n        }\n    }\n    editAutoCreatedEvent(eventRecord) {\n        /**\n         * Fired when an {@link #config-autoCreate} gesture has created a new event\n         * and added it to the event store.\n         *\n         * If the {@link Calendar.feature.EventEdit} feature is present, it listens for\n         * this event and initiates an edit operation. Adding a high `prio` listener which\n         * returns `false` can prevent this event from reaching the `eventEdit` processing.\n         * @event eventAutoCreated\n         * @param {Calendar.widget.mixin.CalendarMixin} source This Calendar view instance.\n         * @typings source -> {typeof CalendarMixin}\n         * @param {Scheduler.model.EventModel} eventRecord The new event record.\n         */\n        this.trigger('eventAutoCreated', {\n            eventRecord\n        });\n    }\n    get duration() {\n        // All views have a startDate and endDate property, so duration can be calculated.\n        // The endDate is \"exclusive\" because it means 00:00:00 of that day.\n        return this.endDate ? this.calculateDuration(this.startDate, this.endDate) : 1;\n    }\n    calculateDuration(startDate, endDate) {\n        // This is overridden in WeekView to enforce the correct duration.\n        // This enables updaters to \"calculate\" the duration and therefore share code.\n        return DH.diff(startDate, endDate, 'day');\n    }\n    /**\n     * Moves this view forwards in time by its configured (or intrinsic if it's a\n     * {@link Calendar.widget.WeekView} or a {@link Calendar.widget.YearView}) duration.\n     */\n    next() {\n        this.date = DH.add(this.date, this.duration, 'day');\n    }\n    /**\n     * Moves this view backwards in time by its configured (or intrinsic if it's a\n     * {@link Calendar.widget.WeekView} or a {@link Calendar.widget.YearView}) duration.\n     */\n    previous() {\n        this.date = DH.add(this.date, -this.duration, 'day');\n    }\n    get eventContentElement() {\n        return this.contentElement;\n    }\n    /**\n     * The first *visible* event-bearing element in this view. So if the first day defined in the\n     * range is a Sunday, and {@link #config-hideNonWorkingDays} is set, then the first visible\n     * cell will be for the Monday.\n     * @property {HTMLElement}\n     */\n    get firstVisibleCell() {\n        return this.eventContentElement.querySelector(this.visibleCellSelector);\n    }\n    /**\n     * The last *visible* event-bearing element in this view. So if the last day defined in the\n     * range is a Sunday, and {@link #config-hideNonWorkingDays} is set, then the last visible\n     * cell will be for the Friday.\n     * @property {HTMLElement}\n     */\n    get lastVisibleCell() {\n        const visibleCells = this.contentElement.querySelectorAll(this.visibleCellSelector);\n        return visibleCells[visibleCells.length - 1];\n    }\n    /**\n     * The date of the first *visible* event-bearing element in this view. So if the first day defined\n     * in the range is a Sunday, and {@link #config-hideNonWorkingDays} is set, then the first visible\n     * date will be the date of the Monday.\n     * @property {Date}\n     */\n    get firstVisibleDate() {\n        const\n            me        = this,\n            date      = new Date(me.startDate),\n            // Extracting the month index from our instance of the Month helper class\n            { month } = me.month;\n        while ((me.hideOtherMonthCells && date.getMonth() !== month) || me.hiddenNonWorkingDays[date.getDay()]) {\n            date.setDate(date.getDate() + 1);\n        }\n        return date;\n    }\n    /**\n     * The date of the last *visible* event-bearing element in this view. So if the last day defined\n     * in the range is a Sunday, and {@link #config-hideNonWorkingDays} is set, then the last visible\n     * date will be the date of the Friday.\n     * @property {Date}\n     */\n    get lastVisibleDate() {\n        const\n            me        = this,\n            date      = DH.add(me.endDate, -1, 'd'),\n            // Extracting the month index from our instance of the Month helper class\n            { month } = me.month;\n        while ((me.hideOtherMonthCells && date.getMonth() !== month) || me.hiddenNonWorkingDays[date.getDay()]) {\n            date.setDate(date.getDate() - 1);\n        }\n        return date;\n    }\n    updateHideNonWorkingDays(hideNonWorkingDays) {\n        const\n            me = this,\n            {\n                month,\n                calendar\n            }  = me;\n        me.contentElement?.classList[hideNonWorkingDays ? 'add' : 'remove'](me.hideNonWorkingDaysCls);\n        // Bail out for view types not supporting this (ResourceView)\n        if (month == null) {\n            return;\n        }\n        let activeColumnIndex, date, activeDay;\n        // Our active date is going to be hidden\n        if (!me.isConfiguring && hideNonWorkingDays) {\n            date = me.date;\n            activeDay = date?.getDay();\n            if (date && me.nonWorkingDays[activeDay] && me.getDayElement(date)) {\n                activeColumnIndex = month.visibleDayColumnIndex[activeDay];\n            }\n        }\n        month.hideNonWorkingDays = hideNonWorkingDays;\n        super.updateHideNonWorkingDays?.(hideNonWorkingDays);\n        // Active date has been hidden by hiding nonworking days, we must move it.\n        if (typeof activeColumnIndex === 'number') {\n            const\n                weekStart            = month.getWeekStart(month.getWeekNumber(date)),\n                newActiveColumnIndex = Math.min(activeColumnIndex, month.visibleColumnCount - 1);\n            // Find the date for the new visible column index\n            for (let i = -1; ; weekStart.setDate(weekStart.getDate() + 1)) {\n                // Entry may be zero, cannot use truthiness test\n                if (typeof month.visibleDayColumnIndex[weekStart.getDay()] === 'number') {\n                    if (++i === newActiveColumnIndex) {\n                        break;\n                    }\n                }\n            }\n            me.date = weekStart;\n            // Owning active date should change\n            calendar && (calendar.date = date);\n        }\n    }\n    onCalendarStoreChange({ source, action }) {\n        const me = this;\n        // Draw on project refresh instead of on dataset.\n        // Unless it's a chained store; they change dataset upon master store change\n        if (action === 'dataset' && !source.isChained) {\n            return;\n        }\n        // Only refresh once initial commit is performed and change is not cause by project writing back data\n        if (me.project.isInitialCommitPerformed && !me.project.isWritingData && me.project.isEngineReady()) {\n            // CellMap must be rebuilt when data changes\n            me._cellMap?.clear();\n            me.refreshSoon();\n        }\n    }\n    /**\n     * Schedules a refresh of the UI for the next animation frame. This is a useful method to call when\n     * making multiple data changes, so that each change merely *schedules* a refresh for the next AF and\n     * DOM churn is kept to a minimum.\n     *\n     * Calling {@link #function-refresh} directly cancels any scheduled refresh operation and updates\n     * the UI immediately\n     */\n    refreshSoon() {\n        this.refresh();\n    }\n    /**\n     * Called when new event is created.\n     * \u0421an be overridden to supply default record values etc.\n     * @param {Scheduler.model.EventModel} eventRecord Newly created event\n     */\n    onEventCreated(eventRecord) {\n        // template method\n    }\n    /**\n     * Returns the event record for a DOM element or DOM event.\n     * @param {HTMLElement|Event} elementOrEvent The DOM node to lookup, or a DOM event whose target to lookup.\n     * @returns {Scheduler.model.EventModel} The event record\n     */\n    getEventRecord(elementOrEvent) {\n        let element = (elementOrEvent instanceof Event) ? elementOrEvent.target : elementOrEvent;\n        element = element?.closest?.('[data-event-id]');\n        return element && this.eventStore.getById(element.dataset.eventId);\n    }\n    /**\n     * Returns the resource record for a DOM element or DOM event if the element is inside a view\n     * which displays events for one resource such as a {@link Calendar.widget.ResourceView}\n     * or a {@link Calendar.widget.DayResourceView}.\n     * @param {HTMLElement|Event} elementOrEvent The DOM node to lookup, or a DOM event whose target to lookup.\n     * @returns {Scheduler.model.ResourceModel} The resource record\n     */\n    getResourceRecord(elementOrEvent) {\n        let element = (elementOrEvent instanceof Event) ? elementOrEvent.target : elementOrEvent;\n        element = element?.closest('[data-resource-id]') || null;\n        return element && this.resourceStore.getById(element.dataset.resourceId);\n    }\n    /**\n     * Returns the event record for a DOM element or DOM event.\n     * @param {HTMLElement|Event} elementOrEvent The DOM node to lookup, or a DOM event whose target to lookup.\n     * @returns {Scheduler.model.EventModel} The event record\n     */\n    resolveEventRecord(elementOrEvent) {\n        // this method is added for symmetry w/SchedulerInterface\n        return this.getEventRecord(elementOrEvent);\n    }\n    getDateFromElement(element, keyParser = null, raw = false) {\n        // Month headers also yield the start date for that month\n        let dateElement = element?.closest('[data-date],[data-header-date],[data-month-date]');\n        // Clicked on an element with a data-date or data-header-date, or data-month-date value.\n        // Callers who need a more granular date WRT time shifting, such as CalendarDrag should pass\n        // a DayTime instance with the correct startShift.\n        // As a default, most views use DateHelper, a DayView uses its own DayTime.\n        if (dateElement) {\n            const rawDate = dateElement.dataset.date || dateElement.dataset.headerDate || dateElement.dataset.monthDate;\n            return raw ? rawDate : (keyParser || (this.isDayView ? this.dayTime : DH)).parseKey(rawDate);\n        }\n        dateElement = element?.closest('[data-week]');\n        // Clicked on an element with a data-week value, that should yield the week start date.\n        if (dateElement) {\n            return this.month?.getWeekStart(dateElement.dataset.week.split(',').map(Number));\n        }\n    }\n    getDateFromDomEvent(domEvent) {\n        return this.getDateFromElement(DomHelper.getEventElement(domEvent));\n    }\n    getDateFromPosition() {\n        return null;\n    }\n    dateKey(date) {\n        return DH.makeKey(date);\n    }\n    /**\n     * Returns the cell associated with the passed date.\n     *\n     * In certain views, the strict definition if whether the view owns the date may be optionally enforced.\n     *\n     * For example, in a YearView or MonthView, dates outside the configured year or month may be displayed.\n     *\n     * To exclude these, pass the `strict` parameter as `true`\n     * @param {Date|String} date The date to find the element for or a key in the format `YYYY-MM-DD`\n     * @param {Boolean} strict Only return the element if this view *owns* the date. (MonthView and YearView)\n     */\n    getDayElement(date, strict) {\n        if (typeof date !== 'string') {\n            date = this.dateKey(date);\n        }\n        return this.eventContentElement.querySelector(`[data-date=\"${date}\"]`);\n    }\n    // Used by DayView and CalendarRow to see which day cell the X position relates to.\n    getDayElementFromX(x) {\n        const dayCells = this.eventContentElement.querySelectorAll('[data-date]');\n        for (let rect, el, i = 0, { length } = dayCells; i < length; i++) {\n            rect = (el = dayCells[i]).getBoundingClientRect();\n            if (x >= rect.x && x <= rect.x + rect.width) {\n                return el;\n            }\n        }\n        return dayCells[0];\n    }\n    /**\n     * Returns the outermost element which represents the first block of the passed event in the view. *If the\n     * event is represented within the view*.\n     *\n     * *Note* if the event covers multiple weeks, this will only return the first element.\n     *\n     * To return all elements use {@link #function-getEventElements}.\n     *\n     * To return an event element at a particular date, pass the date as the second parameter.\n     * @param {Scheduler.model.EventModel|String|Number} eventRecord The event, or event ID to find the element for.\n     * @param {Date} [date] Optionally, the event element at the specified date.\n     * @returns {HTMLElement} The first element which corresponds to the event. Note that *some* views,\n     * such as {@link Calendar.widget.MonthView MonthView} and {@link Calendar.widget.CalendarRow CalendarRow}\n     * may render multiple elements for long events.\n     */\n    getEventElement(eventRecord, date = Math.max(eventRecord.startDate, this.firstVisibleDate || this.startDate)) {\n        const\n            me                 = this,\n            activeEventElement = me.calendar?.navigator.activeItem,\n            activeDate         = me.getDateFromElement(activeEventElement),\n            eventId            = me.eventStore.modelClass.asId(eventRecord);\n        // If the navigated to event is still in the document and is the event being asked for,\n        // and on the active date, then use that element.\n        // Some views have multiple elements representing one event.\n        if (document.contains(activeEventElement) && activeEventElement?.dataset.eventId === String(eventId) && (activeDate && !(date - activeDate))) {\n            return activeEventElement;\n        }\n        if (date) {\n            const dayCell = me.getDayElement(date);\n            if (dayCell) {\n                // In EventList, the day cell is the event el.\n                // In all other views the day cell *contains* the event el.\n                return DomHelper.down(dayCell, `[data-event-id=\"${eventId}\"]`);\n            }\n        }\n        return me.getEventElements(eventRecord)[0];\n    }\n    /**\n     * Returns all outermost elements which represents the passed event in the view. *If the\n     * event is represented within the view*\n     * @param {Scheduler.model.EventModel|String|Number} eventRecord The event, or event ID to find the elements for.\n     * @returns {HTMLElement[]} The elements which corresponds to the event. Note that *some* views,\n     * such as {@link Calendar.widget.MonthView MonthView} and {@link Calendar.widget.CalendarRow CalendarRow}\n     * may render multiple elements for long events.\n     */\n    getEventElements(eventRecord) {\n        const eventId = this.eventStore.modelClass.asId(eventRecord);\n        return this.eventContentElement.querySelectorAll(`[data-event-id=\"${eventId}\"]`);\n    }\n    onEventMouseOverOut(domEvent) {\n        const\n            me        = this,\n            {\n                currentOverEventEl\n            }         = me,\n            isOut     = domEvent.type === 'mouseout',\n            toElement = domEvent[isOut ? 'relatedTarget' : 'target'],\n            toEventEl = toElement?.closest('.b-cal-event-wrap') || null,\n            isChange  = toEventEl !== (currentOverEventEl || null);\n        if (isChange) {\n            if (isOut) {\n                me.currentOverEventEl = null;\n                if (currentOverEventEl) {\n                    Object.defineProperty(domEvent, 'target', {\n                        configurable : true,\n                        get          : () => currentOverEventEl\n                    });\n                }\n                return me.onCalendarPointerInteraction(domEvent);\n            }\n            else {\n                me.currentOverEventEl = toEventEl;\n                return me.onCalendarPointerInteraction(domEvent);\n            }\n        }\n    }\n    /**\n     * Determines what is under the cursor of the specified event or what is described by the given element.\n     * @param {Event|Element} domEvent The event or element\n     * @returns {CalendarHit}\n     */\n    calendarHitTest(domEvent) {\n        const\n            me                = this,\n            { monthSelector } = me,\n            date              = me.getDateFromDomEvent(domEvent),\n            target            = DomHelper.getEventElement(domEvent);\n        let ret = null,\n            closest,\n            eventRecord;\n        // Only a hit on an event if the event could be found in the EventStore.\n        // May be a transient event added solely to the UI and not backed by the store.\n        if ((closest /* assignment */ = target.closest('.b-cal-event-wrap')) && (eventRecord /* assignment */ = me.eventStore.getById(closest.dataset.eventId))) {\n            ret = {\n                type         : 'event',\n                eventElement : closest,\n                eventRecord\n            };\n        }\n        // If we are showing week number in its own column, then the whole cell header represents the day.\n        // Otherwise just the .b-day-name represents it.\n        else if ((closest /* assignment */ = target.closest(me.dayNameSelector))) {\n            ret = {\n                type             : 'dayNumber',\n                dayNumberElement : closest\n            };\n        }\n        else if ((closest /* assignment */ = target.closest('.b-week-num,.b-week-number-cell'))) {\n            const weekElement = target.closest('.b-calendar-week');\n            // Week number cell in the day name row has no week.\n            if (weekElement && weekElement.dataset.week) {\n                ret = {\n                    type              : 'weekNumber',\n                    week              : weekElement.dataset.week.split(',').map(Number),\n                    weekNumberElement : closest,\n                    weekElement\n                };\n            }\n        }\n        else if (monthSelector && target.closest(monthSelector)) {\n            ret = {\n                type  : 'monthName',\n                month : date.getMonth(),\n                date\n            };\n        }\n        if (!ret) {\n            if ((closest /* assignment */ = target.closest('.b-cal-cell-overflow'))) {\n                ret = {\n                    type                : 'cellOverflow',\n                    cellOverflowElement : closest\n                };\n            }\n            else if (date) {\n                ret = {\n                    type : 'schedule'\n                };\n            }\n        }\n        if (ret) {\n            ret.resource = me.getResourceRecord(domEvent);\n            ret.cell = target.closest('.b-calendar-cell');\n            ret.date = date;\n            ret.view = me;\n        }\n        return ret;\n    }\n    onCalendarPointerInteraction(domEvent) {\n        const\n            me                = this,\n            { monthSelector } = me,\n            { target }        = domEvent,\n            fromOverflowPopup = Boolean(target.closest('.b-overflowpopup')),\n            domEventName      = eventNameMap[domEvent.type],\n            date              = me.getDateFromDomEvent(domEvent),\n            eventWrap         = target.closest('.b-cal-event-wrap'),\n            eventRecord       = eventWrap ? me.eventStore.getById(eventWrap.dataset.eventId) : me.getEventRecord(target),\n            eventElement      = eventWrap || (eventRecord && me.getEventElement(eventRecord, date)),\n            resourceElement   = target.closest('[data-resource-id]'),\n            resourceRecord    = resourceElement && me.resourceStore.getById(resourceElement.dataset.resourceId);\n        let result;\n        // Mouse interaction was on a resource.\n        // These can be outside of the eventContentElement.\n        // Resource is a property of an event, so it triggers first.\n        if (resourceRecord) {\n            result = me.trigger(`resource${domEventName}`, {\n                domEvent,\n                date,\n                eventElement,\n                eventRecord,\n                resourceRecord,\n                fromOverflowPopup\n            });\n        }\n        // If we are showing week number in its own column, then the whole cell header represents the day.\n        // Otherwise just the .b-day-name represents it.\n        if (target.closest(me.dayNameSelector)) {\n            result = me.trigger(`dayNumber${domEventName}`, {\n                domEvent,\n                date,\n                cellData : me.cellMap.get(date) || me.createCellData(date),\n                resourceRecord,\n                fromOverflowPopup\n            });\n            if (result === false) {\n                return result;\n            }\n        }\n        // All other interaction must be in content element or our overflow popup.\n        if (!fromOverflowPopup && !me.eventContentElement.contains(target)) {\n            return;\n        }\n        // Mouse interaction was on an event\n        if (result !== false && eventRecord) {\n            const eventResult = me.trigger(`event${domEventName}`, {\n                domEvent,\n                date,\n                eventElement,\n                eventRecord,\n                resourceRecord,\n                fromOverflowPopup\n            });\n            if (eventResult) {\n                result = eventResult;\n            }\n        }\n        // Interacted with an event. No further interaction.\n        if (eventRecord) {\n            return result;\n        }\n        // Interaction was with a week number\n        if (target.closest('.b-week-num,.b-week-number-cell')) {\n            const weekElement = domEvent.target.closest('[data-week]');\n            // If we find an element we can ask the week.\n            if (weekElement) {\n                return me.trigger(`weekNumber${domEventName}`, {\n                    domEvent,\n                    week : weekElement.dataset.week.split(',').map(Number),\n                    date : me.getDateFromElement(weekElement.querySelector('.b-calendar-cell')),\n                    fromOverflowPopup\n                });\n            }\n        }\n        // Interaction was with a month in the YearView.\n        if (monthSelector && target.closest(monthSelector)) {\n            return me.trigger(`monthName${domEventName}`, {\n                domEvent,\n                month : date.getMonth(),\n                date,\n                fromOverflowPopup\n            });\n        }\n        // Interacting with a cell overflow indicator\n        if (target.closest('.b-cal-cell-overflow')) {\n            if (me.trigger(`cellOverflow${domEventName}`, {\n                domEvent,\n                date,\n                fromOverflowPopup,\n                resourceRecord\n            }) !== false) {\n                return;\n            }\n        }\n        // It's only a schedule{event} if the event is in a day cell.\n        // Pure Grid views like ListView don't have a schedule area - it's all events.\n        if (date && me.dayCellCls && domEvent.target.closest(`.${me.dayCellCls}`)) {\n            result = me.trigger(`schedule${domEventName}`, {\n                domEvent,\n                date,\n                fromOverflowPopup,\n                resourceRecord\n            });\n            if (result === false) {\n                return result;\n            }\n        }\n        // Finally check if the gesture matches the autoCreate gesture.\n        // A precise time is passed to autoCreate if possible (Only DayView offers a precise time)\n        // This is so that the autoCreate's configure snapType may be applied\n        me.checkAutoCreateGesture(domEvent, me.getDateFromDomEvent(domEvent, true), resourceRecord || undefined);\n        return result;\n    }\n    onCalendarKeyDown(keyEvent) {\n        if (keyEvent.ctrlKey && keyEvent.key.toLowerCase() === 'z' && this.calendar?.enableUndoRedoKeys) {\n            this.project?.stm?.onUndoKeyPress(keyEvent);\n        }\n        else {\n            this.onCalendarPointerInteraction(keyEvent);\n        }\n    }\n    isAllDayEvent(eventRecord) {\n        return eventRecord.allDay || (eventRecord.isScheduled && this.dayTime ? this.dayTime.isInterDay(eventRecord) : eventRecord.isInterDay);\n    }\n    /**\n     * Sort the given array of `events` in the desired order for this view.\n     * @param {Scheduler.model.EventModel[]} events\n     * @internal\n     */\n    sortEvents(events) {\n        events.sort(this.eventSorter);\n    }\n    //region Extract configs\n    // These functions are not meant to be called by any code other than Base#getCurrentConfig().\n    // This excludes project and calendar from being serialized,\n    // they are always assigned on creation not actually configurable\n    preProcessCurrentConfigs(configs) {\n        super.preProcessCurrentConfigs(configs);\n        delete configs.calendar;\n        delete configs.project;\n    }\n    // Extracts the current configs for the calendar view, with special handling to exclude project\n    getCurrentConfig(options) {\n        const result = super.getCurrentConfig(options);\n        delete result.project;\n        return result;\n    }\n    //endregion\n};\n", "import Base from '../../../Core/Base.js';\nimport DH from '../../../Core/helper/DateHelper.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\nimport DayTime from '../../../Core/util/DayTime.js';\nimport Month from '../../../Core/util/Month.js';\nimport EventSlots from '../../util/EventSlots.js';\n/**\n * @module Calendar/widget/mixin/DayCellCollecter\n */\nconst\n    byKey = ({ key : lhs }, { key : rhs }) => {\n        return lhs < rhs ? -1 : rhs < lhs ? 1 : 0;\n    },\n    extractEndDate = e => e.endDate || DH.add(e.startDate, e.duration, e.durationUnit);\n/**\n * A data block created by all {@link Calendar.widget.mixin.DayCellCollecter} Calendar views to\n * encapsulate occupied day cells and the events which intersect with each date to be shown in the UI.\n * All useful data about the date and the shape of the UI is included.\n * @typedef {Object} DayCell\n * @property {Date} date The date of the cell.\n * @property {String} key a `YYYY-MM-DD` formatted date key for the cell.\n * @property {Number} cellIndex The overall cell index in the cell-based UI being created.\n * @property {Number} day The day of week for the cell: 0=Sunday, 6=Saturday\n * @property {Number} columnIndex The column index in the cell-based UI being created.\n * @property {Number} visibleColumnIndex The visible column index (eg 0 for a Monday if Sunday is the week start day, but was hidden)\n * @property {Boolean} isNonWorking `true` if the owning view considers the date a non-working day.\n * @property {Number[]} week The `[year, week]` encapsulating the cell.\n * @property {Boolean} isOtherMonth The cell is outside the view's primary time range. Only significant\n * when used by a CalendarPanel which encapsulates a single month.\n * @property {Boolean} visible `true` if the date cell is not for a hidden day.\n * @property {Date} tomorrow The date of the following cell.\n * @property {Boolean} isRowStart `true` if the cell is at the start of a visible row.\n * @property {Boolean} isRowEnd `true` if the cell is at the end of a visible row.\n * @property {Boolean} hasOverflow `true` if the `renderedEvents` overflow the cell height and\n * require a `+n more` button.\n * @property {Scheduler.model.EventModel[]} events The events which are to be shown for this date.\n * @property {EventBar[]} renderedEvents If this view renders event bars ({@link Calendar.widget.MonthView},\n * {@link Calendar.widget.CalendarRow}, {@link Calendar.widget.AgendaView}), then this is an array of\n * {@link EventBar event bar} definitions which belong in the cell. Whether all can be rendered depends\n * upon the view's configured {@link Calendar.widget.mixin.CalendarMixin#config-eventHeight} and whether\n * the cell is of fixed height. The `hasOverflow` property is set if the rendered events overflow\n * a cell's fixed capacity.\n */\n/**\n * A data block which describes how an event bar is to be rendered into a day cell.\n * @typedef {Object} EventBar\n * @property {Scheduler.model.EventModel} eventRecord The event record for which the event bar is being rendered.\n * @property {Date} propagateEndDate The date of the last cell into which the event bar will extend.\n * @property {Core.helper.util.DomClassList} cls The CSS classes to apply to the event bar.\n * @property {Core.helper.util.DomClassList} iconCls The CSS classes to apply to an event icon.\n * @property {Object} dataset Property names and values to be applied to the Event bar's DOM `dataset`\n * @property {String} eventColor Either a predefined colour name, or a DOM colour value to apply to the event bar.\n * @property {Boolean} isAllDay `true` if the event is flagged as an all day event in its data, or\n * if it spans a day boundary and occupies more than one cell.\n * @property {Boolean} isOverflow `true` if this event bar is a continuation from a previous cell.\n * @property {Boolean} overflows `true` if this event bar flows into the next cell.\n * @property {Boolean} solidBar `true` if the event bar is to be rendered with a solid background of\n * its defined colour. All day events are solid by default.\n */\n/**\n * Mixin that provides the ability to collect {@link DayCell day cell} data containing the events\n * of interest to a Calendar widget.\n *\n * This is used by all implemented Calendar widgets Except {@link Calendar.widget.AgendaView}\n * which creates its cellMap from the events it finds in the eventStore.\n *\n * @mixin\n */\nexport default Target => class DayCellCollecter extends (Target || Base) {\n    static get $name() {\n        return 'DayCellCollecter';\n    }\n    static get configurable() {\n        return {\n            /**\n             * A function, or the name of a function in the ownership hierarchy to filter which events\n             * are collected into the day cell data blocks.\n             * Return `true` to include the passed event, or a *falsy* value to exclude the event.\n             *\n             * @config {Function|String}\n             * @param {Scheduler.model.EventModel} event the passed event\n             * @returns {Boolean}\n             */\n            eventFilter : {\n                $config : 'lazy',\n                value   : null\n            }\n        };\n    }\n    get dayTime() {\n        return DayTime.MIDNIGHT;\n    }\n    get cellMonth() {\n        return this._cellMonth || (this._cellMonth = new Month({}));\n    }\n    changeEventFilter(eventFilter) {\n        if (typeof eventFilter === 'string') {\n            const { handler, thisObj } = this.resolveCallback(eventFilter);\n            eventFilter = handler.bind(thisObj);\n        }\n        return eventFilter;\n    }\n    createCellMap(getEventsOptions = {}) {\n        const\n            me         = this,\n            {\n                filter,\n                skipPropagate\n            }          = getEventsOptions,\n            {\n                eventFilter,\n                cellMonth,\n                lastVisibleDate\n            }          = me,\n            cellMap    = getEventsOptions.cellMap || me._cellMap || (me._cellMap = new CellMap());\n        // For data purposes, last visible Date is 00:00 on the following day\n        if (lastVisibleDate) {\n            lastVisibleDate.setDate(lastVisibleDate.getDate() + 1);\n        }\n        let startDate = getEventsOptions.startDate || me.firstVisibleDate || me.startDate,\n            endDate   = getEventsOptions.endDate || lastVisibleDate || me.endDate;\n        // We need a separate Month object to iterate through the cells to create cell context objects\n        cellMonth.configure({\n            weekBase           : null,\n            weekStartDay       : me.weekStartDay,\n            nonWorkingDays     : me.nonWorkingDays,\n            hideNonWorkingDays : me.hideNonWorkingDays,\n            sixWeeks           : me.sixWeeks,\n            date               : startDate\n        });\n        if (me.eventStore) {\n            // Create  mutable copy so that collectEvents implementations may intervene\n            getEventsOptions = ObjectHelper.assign({\n                dayTime : DayTime.MIDNIGHT\n            }, getEventsOptions, {\n                filter  : filter && eventFilter ? e => filter(e) && eventFilter(e) : (filter || eventFilter),\n                dateMap : cellMap,\n                startDate,\n                endDate\n            });\n            me.collectEvents(getEventsOptions);\n            // collectEvents may manipulate the exact view start and end.\n            // For example MonthView.hideOtherMonthCells\n            startDate = getEventsOptions.startDate;\n            endDate = getEventsOptions.endDate;\n            // Create a cell entry for every date which this view encapsulates which intersects\n            // with an event.\n            // To be completely clear: depending upon the requirements of the widget that\n            // mixes there will likely be some cell entries created\n            // here which may never have any events *STARTING* in them.\n            // But they may exist because they have events from previous days\n            // flowing into them.\n            // These must exist because they still need to propagate their overflowing\n            // events forward into visible cells.\n            // All cells which require visible event bars will be represented here.\n            // Multi day events will be propagated forward into their following cells\n            // further down.\n            //\n            // Extract the keys() iterator into an array first because the cellMap will be\n            // added to during the iteration because of forward-propagation cells being added\n            // when events reach forward in time. We only want to iterate the *preexisting*\n            // set of event dates. The new entries created for propagation will be be added\n            // containing empty cellData blocks.\n            for (const key of [...cellMap.keys()]) {\n                let lastEventEndDate = 0;\n                const\n                    dayTime    = getEventsOptions.dayTime,\n                    date       = dayTime.dayOfDate(DH.parseKey(key)),\n                    cellData   = me.createCellData(date),\n                    sortEvent  = {\n                        events : cellMap.get(key),\n                        date\n                    };\n                me.sortEvents(sortEvent.events, date);\n                /**\n                 * Fired after one day cell's events are collected in sorted order according to the\n                 * {@link Calendar.widget.mixin.CalendarMixin#config-eventSorter}\n                 *\n                 * An application may use this to intervene in the event load received by the UI\n                 * by mutating the `events` array.\n                 * @event dayCellPopulated\n                 * @param {Scheduler.model.EventModel[]} events The events to be shown for the passed date\n                 * @param {Date} The date the events are to be shown in.\n                 */\n                me.trigger('dayCellPopulated', sortEvent);\n                // In case an event handler mutated the event\n                const events = sortEvent.events;\n                if (getEventsOptions.rawEvents) {\n                    lastEventEndDate = Math.min(endDate, Math.max.apply(Math, events.map(extractEndDate)));\n                    cellData.events = events;\n                }\n                else {\n                    cellData.events = events.map(eventRecord => {\n                        const\n                            eventEndDate = eventRecord.endingDate,\n                            overflows    = eventEndDate > cellData.tomorrow,\n                            eventData    = {\n                                isAllDay   : me.isAllDayEvent(eventRecord),\n                                isOverflow : eventRecord.startDate < cellData.date && (date - startDate),\n                                eventRecord,\n                                eventEndDate,\n                                overflows,\n                                date\n                            };\n                        if (!skipPropagate) {\n                            lastEventEndDate = Math.min(endDate, Math.max(lastEventEndDate, eventEndDate));\n                            if (overflows) {\n                                eventData.propagateEndDate = me.calculatePropagateEndDate(eventData, endDate);\n                            }\n                        }\n                        return eventData;\n                    });\n                }\n                // Create the cells to propagate into based on the latest ending of the events just found.\n                // Cells after the first cell are collected on a startDate only basis, so the cells they\n                // will extend into will need to be created.\n                // This operation mutates the cellMap but the ongoing iteration must not be affected.\n                if (!skipPropagate) {\n                    for (; date < lastEventEndDate; date.setDate(date.getDate() + 1)) {\n                        const key = dayTime.dateKey(date);\n                        // At the end of the outer cellMap iteration, it is expected that all\n                        // entries will consist of cellData blocks, *not* raw arrays\n                        // of events, so when creating the cells for propagation, create\n                        // cell data blocks for any currently non-existent dates.\n                        cellMap.has(key) || cellMap.set(key, me.createCellData(date));\n                    }\n                }\n                // Change the raw event array to a cellData object\n                cellMap.set(key, cellData);\n            }\n            // Pre-fill slots for all days that the events for this day cover\n            if (cellMap.size) {\n                // Sort the day entries into ascending date order.\n                // The creation of the cells to propagate into may create some out of order\n                const cellMapEntries = [...cellMap.values()].sort(byKey);\n                let previousEvents;\n                // Replace entries in order while linking them up to form a linked list.\n                cellMap.clear();\n                cellMapEntries.forEach(entry => {\n                    cellMap.set(entry.key, entry);\n                    if (previousEvents) {\n                        previousEvents.nextEvents = entry;\n                        entry.previousEvents = previousEvents;\n                    }\n                    previousEvents = entry;\n                });\n                // Pre-fill slots for all days that the events for this day cover\n                if (!skipPropagate) {\n                    me.propagateCellEvents(cellMapEntries[0], cellMap);\n                }\n            }\n        }\n        // The getter kicks off a new create for cellMaps which are not populated.\n        // A cellMap with zero size may still have been populated.\n        cellMap.populated = true;\n        /**\n         * Fired when a new set of events has been gathered for this view's date range.\n         * @event cellMapPopulated\n         */\n        me.trigger('cellMapPopulated', {\n            cellMap\n        });\n        return cellMap;\n    }\n    /**\n     * Calculates the end date (EXCLUSIVE) to which an event must be propagated based upon the\n     * event's data in order to create a day-spanning event bar.\n     *\n     * If an event overflows into 2011-01-02T01:00, then the exclusive propagateEndDate\n     * is 2011-01-03T00:00:00 so the event will be propagated into 2011-01-02.\n     *\n     * But if an event ends on 2011-01-02T00:00:00, its propagateEndDate will be 2011-01-02T00:00:00\n     * so it will be propagated as far as 2011-01-01\n     *\n     * This may be overridden in subclasses to customize how events are propagated forwards.\n     *\n     * example:\n     * ```javascript\n     * class OvernightEventMonthView extends MonthView {\n     *     static get name() {\n     *         return 'OvernightEventMonthView';\n     *     }\n     *\n     *     static get type() {\n     *         return 'overnighteventmonthview';\n     *     }\n     *\n     *     calculatePropagateEndDate(eventData) {\n     *         // If the event only spills into the next day but not further\n     *         // then we do not want an extended event bar.\n     *         // It will still get an arrow indicating that it continues rightwards.\n     *         if (eventData.eventEndDate < DateHelper.add(eventData.date, 1, 'd')) {\n     *             return DateHelper.add(DateHelper.clearTime(eventData.eventRecord.startDate), 1, 'd');\n     *         }\n     *         // Default case, propagate event into the future as usual\n     *         return super.calculatePropagateEndDate(eventData);\n     *     }\n     * }\n     * // Register the type name\n     * OvernightEventMonthView.initClass();\n     *\n     * new Calendar({\n     *     modes : {\n     *         // Use our MonthView subclass as the month mode.\n     *         month : {\n     *             type :'overnighteventmonthview'\n     *         }\n     *     }\n     * })\n     * ```\n     *\n     * Note that this is implemented by both {@link Calendar.widget.MonthView} and {Calendar.widget.CalendarRow}\n     * which is the \"all day\" row in a week or day view.\n     *\n     * @param {Object} eventData A data block describing the time context of an event.\n     * @param {Date} eventData.eventEndDate The end date for which to calculate the propagate end date.\n     * @param {Boolean} eventData.isAllDay `true` if the event is an all day event, or spans multiple days.\n     * @param {Boolean} eventData.isOverflow `true` if this is being called as part of further propagation.\n     * @param {Boolean} eventData.overflows `true` if the event extends into future cells.\n     * @param {Scheduler.model.EventModel} eventData.eventRecord The event record being propagated.\n     * @param {Date} eventData.date The date from which the event is being propagated.\n     * @returns {Date} The date (as a timepoint, *not* a reference to a 24 hour time block)\n     * to which the event bar should be propagated\n     * @internal\n     */\n    calculatePropagateEndDate(eventData, viewEndDate = this.endDate) {\n        const\n            { eventEndDate : endDate } = eventData,\n            startOfDay                 = this.dayTime.startOfDay(endDate);\n        // Round a timeStamp after midnight to the next midnight.\n        // Then minimize with our end date. No point collecting cells after the view's last cell\n        eventData.propagateEndDate = new Date(Math.min((endDate > startOfDay) ? DH.add(startOfDay, 1, 'day') : endDate, viewEndDate));\n        /**\n         * Fires when a day spanning event is found, and the date to which its encapsulating event bar\n         * extends has been calculated.\n         *\n         * The default result in the event's `propagateEndDate` property may be mutated by a listener.\n         *\n         * Note that this is an ending point in time, it does *not* refer to a 24 hour block. So setting\n         * the `propagateEndDate` to `new Date(2022, 1, 10)` means that the event bar will occupy cells\n         * up to and including February 9 2022 and no further.\n         *\n         * This is relayed through the owning {@link Calendar.view.Calendar}, so a single listener\n         * may be used, for example:\n         *\n         * ```javascript\n         * new Calendar({\n         *     listeners : {\n         *         eventPropagate(eventData) {\n         *             // If the event only spills into the next day but not further\n         *             // then we do not want an extended event bar.\n         *             // An arrow will indicate that it continues rightwards.\n         *             if (eventData.eventEndDate < DateHelper.add(eventData.date, 2, 'd')) {\n         *                 eventData.propagateEndDate = DateHelper.add(DateHelper.clearTime(eventData.eventRecord.startDate), 1, 'd');\n         *             }\n         *         }\n         *     }\n         * })\n         * ```\n         *\n         * The `eventEndDate` in the data block may also be changed to override the event's real end date.\n         * This will mean that there will be no arrow indicating that the event continues:\n         *\n         * ```javascript\n         * new Calendar({\n         *     listeners : {\n         *         eventPropagate(eventData) {\n         *             // If the event spills into the next day but not further\n         *             // then we do not want an extended event bar.\n         *             // Because we override the eventEndDate, no arrow will be present\n         *             // to indicate any continuation.\n         *             if (eventData.eventEndDate < DateHelper.add(eventData.date, 2, 'd')) {\n         *                 eventData.propagateEndDate = eventData.eventEndDate = DateHelper.add(DateHelper.clearTime(eventData.eventRecord.startDate), 1, 'd');\n         *             }\n         *         }\n         *     }\n         * });\n         * ```\n         *\n         * @event eventPropagate\n         * @param {Date} eventEndDate The end date for which to calculate the propagate end date.\n         * @param {Date} propagateEndDate The system-calculated end point of the event bar.\n         * @param {Boolean} isAllDay `true` if the event is an all day event, or spans multiple days.\n         * @param {Boolean} isOverflow `true` if this is being called as part of further propagation.\n         * @param {Boolean} overflows `true` if the event extends into future cells.\n         * @param {Scheduler.model.EventModel} eventRecord The event record being propagated.\n         * @param {Date} date The date from which the event is being propagated.\n         */\n        this.trigger('eventPropagate', eventData);\n        return eventData.propagateEndDate;\n    }\n    // Overrideable in subclasses.\n    collectEvents(options) {\n        return this.eventStore.getEvents(options);\n    }\n    propagateCellEvents(cellData, cellMap) {\n        const\n            {\n                events,\n                renderedEvents,\n                previousEvents,\n                nextEvents,\n                date\n            }             = cellData,\n            eventsPerCell = this.getEventsPerCell(date),\n            { length }    = events;\n        for (let i = 0; i < length; i++) {\n            const\n                event = events[i],\n                {\n                    eventRecord,\n                    propagateEndDate,\n                    eventEndDate\n                } = event;\n            // This is its start slot in its starting cell.\n            // For the rest of the week, it must occupy the same slot in cells\n            // that iot flow into.\n            // Once wrapped to a new week, it just stacks up in available space.\n            let renderedSlot = renderedEvents.add(event);\n            // The event overflows into future cells.\n            // We need to claim the event's slot in any future cells which it covers.\n            if (event.overflows) {\n                // It's only overflow in cells which come *after* it has become visible\n                let isVisible = cellData.visible, lastEvent;\n                // Walk forwards until we are on a cell which is not covered by this event.\n                for (let nextDay = nextEvents; nextDay && nextDay.date < propagateEndDate; nextDay = nextDay.nextEvents) {\n                    // On move to a new week, we no longer have to maintain the same event slot\n                    if (!nextDay.columnIndex) {\n                        renderedSlot = nextDay.renderedEvents.firstFreeSlot;\n                    }\n                    // For each day into which the event extends, occupy its slot\n                    nextDay.renderedEvents.set(renderedSlot, lastEvent = {\n                        eventRecord,\n                        eventEndDate,\n                        propagateEndDate,\n                        isAllDay   : event.isAllDay,\n                        isOverflow : isVisible,\n                        overflows  : true\n                    });\n                    // Once it's visible, all future cell slots have isOverflow: true\n                    isVisible = isVisible || nextDay.visible;\n                }\n                // Obviously the last one we propagated to does not overflow\n                lastEvent && (lastEvent.overflows = false);\n            }\n        }\n        // The loop end when rendering\n        cellData.maxRow = renderedEvents.length;\n        const lastEvent = renderedEvents[eventsPerCell - 1];\n        // If we're just filling our cell, but the last one is an overflow from the previous cell\n        // AND the previous cell vertically overflowed, we must show the +1 more indicator to match.\n        // This is the *ONLY* case where we ever show a \"+1 more\" indicator.\n        // We show \"+2 more\" at least because an overflow indicator is the same height as an event bar.\n        if (renderedEvents.length === eventsPerCell) {\n            if (lastEvent?.isOverflow && previousEvents?.hasOverflow) {\n                cellData.maxRow--;\n                cellData.hasOverflow = true;\n            }\n        }\n        // Decide whether the cell's rendered events overflow its height.\n        else if (renderedEvents.length > eventsPerCell) {\n            cellData.maxRow = eventsPerCell - 1;\n            cellData.hasOverflow = true;\n            // If the last slot is an overflow, its originating cell and all intervening ones\n            // must be flagged as overflowing so that they get a +\"1 more\" indicator.\n            // The originating cell and all intervening cells must display the overflow indicator\n            // if its last visible slot overflows and any future cells that it flows into overflow.\n            // See below. We are processing that 3rd cell.\n            // If the 3rd cell was not overflowing, it would be fine.\n            // But because it needs its own \"+2 More\" indicator, that originating\n            // cell and all intervening ones must also get a \"+1 More\" indicator even\n            // if they're not overflowing because there must be no long event bar to\n            // obscure Oct 12's \"+2 More indicator\".\n            // +----------+----------+----------+----------+\n            // |  Oct 10  |  Oct 11  |  Oct 12  |          |\n            // +----------+----------+----------+----------+\n            // |  Event   |  Event   |  Event   |          |\n            // |  Event   |  Event   |  Event   |          |\n            // |  Event   |  Event   |  Event   |          |\n            // |  EventWhichIsExtremelyLong     |          |\n            // +----------+----------+----------+----------+\n            //                          Event\n            if (lastEvent?.isOverflow) {\n                const\n                    // Jump back to row's start cell. That will depend what a row is.\n                    // If we can find a weekContext (this isa MonthView), use the week start date\n                    // else use the view's start date.\n                    weekStartValue  = this.getWeekContext?.(date).visibleWeekStart || this.firstVisibleDate,\n                    eventStartValue = DH.clearTime(lastEvent.eventRecord.startDate).valueOf();\n                // Only go back as far as the start of the current week.\n                let originatingCell = cellMap.get(DH.makeKey(new Date(Math.max(weekStartValue, eventStartValue))));\n                // So if Oct 12's lastEvent isOverflow, we loop through Oct 10 and 11th's cells\n                // and reduce the number of available visual slots\n                while (originatingCell.key !== cellData.key) {\n                    originatingCell.hasOverflow = true;\n                    originatingCell.maxRow = eventsPerCell - 1;\n                    originatingCell = originatingCell.nextEvents;\n                }\n            }\n        }\n        // Walk on to the next one\n        nextEvents && this.propagateCellEvents(nextEvents, cellMap);\n    }\n    createCellData(date) {\n        return Object.assign(this.cellMonth.getCellData(date, this.month, this.dayTime), {\n            events : [],\n            // Events can forward-occupy slots if they\n            // overrun their start day.\n            // So the next step is to propagate forward\n            // multi day events into future cells they cover.\n            renderedEvents : new EventSlots()\n        });\n    }\n};\n// We need a cell map which can be flagged as being populated even if it is empty\n// so that the cellMap getter can only actually refill the cell map if it is not populated.\n// A cell map may be empty but populated if there are no eligible events in the date range.\nclass CellMap extends Map {\n    populated = false;\n    get(d, value) {\n        return super.get(DH.makeKey(d), value);\n    }\n    set(d, value) {\n        d = DH.makeKey(d);\n        if (!this.has(d)) {\n            this.generation = (this.generation || 0) + 1;\n        }\n        return super.set(d, value);\n    }\n    delete(d, value) {\n        d = DH.makeKey(d);\n        if (this.has(d)) {\n            this.generation++;\n        }\n        return super.delete(d, value);\n    }\n    has(d) {\n        return super.has(DH.makeKey(d));\n    }\n    clear() {\n        if (this.populated) {\n            this.populated = false;\n            this.generation = (this.generation || 0) + 1;\n            return super.clear();\n        }\n    }\n}\n", "import Popup from '../../Core/widget/Popup.js';\nimport DH from '../../Core/helper/DateHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport DomSync from '../../Core/helper/DomSync.js';\n/**\n * @module Calendar/widget/OverflowPopup\n */\n/**\n * This class is not supposed to be used directly. It is used by Calendar views which need to show\n * more events than will fit into a day cell.\n *\n * A Popup which displays events which will not fit into their container in a View\n *\n * @extends Core/widget/Popup\n * @classtype overflowpopup\n */\nexport default class OverflowPopup extends Popup {\n    static get $name() {\n        return 'OverflowPopup';\n    }\n    // Factoryable type name\n    static get type() {\n        return 'overflowpopup';\n    }\n    static get configurable() {\n        return {\n            textContent : false,\n            autoShow    : false,\n            floating    : false,\n            cls         : 'b-cal-event-list',\n            closable    : true,\n            draggable   : {\n                handleSelector : ':not(.b-cal-event-wrap)'\n            },\n            anchor : true,\n            layout : 'vbox',\n            /**\n             * An empty function by default, but provided so that you can override it.\n             *\n             * This function is called each time an event is rendered to allow developers to mutate\n             * the cell metadata, or the CSS classes to be applied to the event element.\n             *\n             * It's called with the event record, and a eventData object which allows you to mutate event metadata\n             * such as 'cls', 'style'.\n             *\n             * The cls property is an object whose property names will be added to the event element if the property\n             * value is truthy.\n             *\n             * The style property is an object containing style properties for the event element.\n             *\n             * A non-null return value from the renderer is used as the event body content. A nullish\n             * return value causes the default renderer to be used which just uses the event name.\n             *\n             * If a string is returned, it is used as the HTML content of the event body element.\n             *\n             * If an object is returned, it is used as a {@link Core.helper.DomHelper#typedef-DomConfig} object to\n             * create complex content in the event body element.\n             *\n             * ```javascript\n             *  eventRenderer({ eventRecord, renderData }) {\n             *      if (eventRecord.name === 'Doctors appointment') {\n             *          eventData.style.fontWeight = 'bold';\n             *          eventData.cls['custom-cls'] = 1;\n             *\n             *          return 'Special doctors appointment';\n             *      }\n             *  }\n             * ```\n             * IMPORTANT: When returning content, be sure to consider how that content should be encoded to avoid XSS\n             * (Cross-Site Scripting) attacks. This is especially important when including user-controlled data such as\n             * the event's `name`. The function {@link Core.helper.StringHelper#function-encodeHtml-static} as well as\n             * {@link Core.helper.StringHelper#function-xss-static} can be helpful in these cases.\n             *\n             * For example:\n             * ```javascript\n             *  eventRenderer({ eventRecord }) {\n             *      return StringHelper.xss`Event: ${eventRecord.name}`;\n             *  }\n             * ```\n             * @config {Function} eventRenderer\n             * @param {Object} detail An object that contains data about the event being rendered.\n             * @param {Scheduler.model.EventModel} detail.eventRecord The event record\n             * @param {Scheduler.model.ResourceModel} detail.resourceRecord The event record\n             * @param {Object} detail.renderData A data object containing properties that will be used to create the event element.\n             * @param {Object} detail.renderData.style The style property is an object containing style properties for\n             * the event element.\n             * @param {Object} detail.renderData.cls The cls property is an object whose property names will be added to\n             * the event element if the property value is truthy.\n             * @param {String} detail.renderData.eventColor Color to be applied to the event\n             * @returns {String|DomConfig|DomConfig[]|null} A simple string, or a DomConfig object defining the actual HTML\n             */\n            eventRenderer : null,\n            /**\n             * A function which compares events to decide upon rendering order.\n             *\n             * By default, this class uses the sorted order of its owning view and does *not* perform\n             * a sort, but this may be configured to override that behaviour.\n             *\n             * Note that the two objects to compare may either be {@link Scheduler.model.EventModel}s\n             * or {@link EventBar}s which __contain__ an `eventRecord` property which is the {@link Scheduler.model.EventModel}.\n             * @config {Function}\n             * @param {Scheduler.model.EventModel|EventBar} lhs The left side value to conpare.\n             * @param {Scheduler.model.EventModel|EventBar} rhs The right side value to conpare.\n             * @returns {Number}\n             */\n            eventSorter : null,\n            /**\n             * A {@link Core.widget.Widget} config object used to show the inner list of overflowing events\n             * shown in this popup.\n             *\n             * This widget has a {@link Core.widget.Widget#config-weight} of `500`, so to insert widgets above\n             * this, use `weight` less than 500, and to insert widgets below it use `weight` greater than 500.\n             * @config {Object}\n             * @default\n             */\n            eventList : {\n                type   : 'widget',\n                cls    : 'b-cal-event-bar-container',\n                weight : 500\n            },\n            items : {},\n            tools : {\n                maximize : null\n            },\n            /**\n             * The {@link Core.helper.DateHelper#function-format-static DateHelper} format string to use to\n             * create the {@link #config-title} of this dialog.\n             * @config {String}\n             * @default\n             */\n            dateFormat : 'dddd, MMM DD',\n            activeDate : {\n                $config : {\n                    equal : 'date'\n                },\n                value : null\n            },\n            scrollAction : 'hide',\n            align        : {\n                axisLock         : 'flexible',\n                constrainPadding : 20,\n                minHeight        : 400\n            },\n            scrollable : {\n                overflowY : 'auto'\n            },\n            /**\n             * By default an event overflow popup shows all the events for the activated date.\n             *\n             * Configure this as `true` to only display the events which were hidden due to overflow.\n             * @config {Boolean}\n             */\n            onlyShowOverflow : null\n        };\n    }\n    calendarHitTest(domEvent) {\n        const\n            target = DomHelper.getEventElement(domEvent),\n            closest = target.closest('.b-cal-event-wrap');\n        let eventRecord;\n        // It's only an event hit if the id exists in the event store.\n        // May be a transient event added solely to the UI and not backed by the store.\n        if (closest && (eventRecord /* assignment */ = this.owner.eventStore.getById(closest.dataset.eventId))) {\n            return {\n                eventRecord,\n                type         : 'event',\n                eventElement : closest,\n                view         : this\n            };\n        }\n        return null;\n    }\n    onHeaderClick({ event : domEvent }) {\n        if (domEvent.target.closest('.b-header-title')) {\n            this.owner?.trigger('dayNumberClick', {\n                domEvent,\n                date              : this.activeDate,\n                cellData          : this.cellData,\n                source            : this.owner,\n                fromOverflowPopup : true\n            });\n        }\n        else {\n            super.onHeaderClick(...arguments);\n        }\n    }\n    get focusElement() {\n        const activeElement = DomHelper.getActiveElement(this);\n        return this.element.contains(activeElement)\n            ? activeElement\n            : (this.eventList?.element?.firstElementChild || super.focusElement);\n    }\n    getDateFromPosition() {\n        // This View only shows one date, so the answer is easy.\n        return this.activeDate;\n    }\n    getEventElement(eventRecord) {\n        return this.contentElement.querySelector(`[data-event-id=\"${eventRecord.id}\"]`);\n    }\n    showOverflow(cell, cellData) {\n        /**\n         * The date for which overflow is being shown.\n         * @readonly\n         * @member {Date} activeDate\n         */\n        const date = this.activeDate = cellData.date;\n        /**\n         * A data block containing information about the day for which overflow is being shown.\n         * @readonly\n         * @member {DayCell} cellData\n         */\n        this.cellData = cellData;\n        this.targetCell = cell;\n        this.refresh(cellData);\n        this.showBy(cell);\n        if (this.isVisible) {\n            // Fired on the owning view. Documented in DayCellRenderer\n            this.owner?.trigger('showOverflowPopup', { cell, cellData, date, overflowPopup : this });\n        }\n    }\n    // Owning view calls this from its own onCalendarStoreChange implementation\n    onCalendarStoreChange() {\n        const me = this;\n        if (me.isVisible) {\n            me.cellData = me.owner.cellMap.get(DH.makeKey(me.activeDate));\n            me.refresh(me.cellData);\n        }\n    }\n    refresh(cellData) {\n        // eventList might be configured away\n        if (!this.eventList) {\n            return;\n        }\n        // Allow the caller to update the overflow state\n        if (cellData) {\n            this.cellData = cellData;\n        }\n        else {\n            cellData = this.cellData;\n        }\n        const\n            me          = this,\n            {\n                owner,\n                eventRenderer,\n                eventSorter\n            }           = me,\n            { element } = me.eventList,\n            // Slice using eventsPerCell - 1 because if there's one event that won't fit,\n            // the last event fitting will be evicted to make room for the overflow indicator.\n            // If there's no overflow indicator (like in YearView), eventsPerCell will be\n            // zero, so sanitize value up to 0.\n            slicePoint = me.onlyShowOverflow ? Math.max(owner.eventsPerCell - 1, 0) : 0,\n            // Because of long running events overflowing, allDay events and intraday\n            // events could be interleaved in the cells slots.\n            // In the event list, we sort them into the required order with\n            // oldest and longest at the top.\n            events      = cellData?.renderedEvents.slice(slicePoint),\n            children    = [];\n        // We can delete events from the Popup, so when we've exhausted the events, we must hide.\n        // Also, if a refresh was called from the owner's resize handling, that may have caused\n        // the overflow state to have changed to not overflowing.\n        // YearView can't not overflow. It's just a heat map.\n        if (!events?.length || (!cellData?.hasOverflow && !owner.isYearView)) {\n            return me.hide();\n        }\n        // If we have been configured with an overriding eventSorter, apply it now.\n        // Otherwise, we are using the data as shown in our owning view.\n        if (eventSorter) {\n            events.sort(eventSorter);\n        }\n        for (let i = 0, eventRow = 0, { length } = events; i < length; i++, eventRow++) {\n            const renderedEvent = events[i];\n            // If the slot is occupied, add a child event element.\n            // These just flow down the Popup's bodyElement\n            if (renderedEvent) {\n                const eventDomConfig = owner.createEventDomConfig(renderedEvent, eventRenderer);\n                Object.assign(eventDomConfig.className, {\n                    // The event started in a previous day\n                    'b-continues-past' : renderedEvent.eventRecord.startDate < cellData.date,\n                    // The event ends in a future day\n                    'b-continues-future' : renderedEvent.eventRecord.endDate > cellData.tomorrow\n                });\n                eventDomConfig.style.marginBottom = `${owner.eventSpacing}px`;\n                children.push(eventDomConfig);\n            }\n        }\n        DomSync.sync({\n            domConfig : {\n                children\n            },\n            targetElement : element\n        });\n        // Fix up cell's time info.\n        element.dataset.date = cellData.key;\n        element.classList.add(`b-day-of-week-${cellData.day}`);\n        element.classList.remove(`b-day-of-week-${me.lastRefreshDay}`);\n        me.lastRefreshDay = cellData.day;\n        me.realign();\n    }\n    changeItems(items) {\n        const { eventList } = this;\n        if (eventList) {\n            items.eventList = eventList;\n        }\n        const result = super.changeItems(items);\n        if (eventList) {\n            this.eventList = this.widgetMap.eventList;\n        }\n        return result;\n    }\n    changeActiveDate(activeDate, oldActiveDate) {\n        activeDate = typeof date === 'string' ? DH.parse(activeDate) : new Date(activeDate);\n        if (isNaN(activeDate)) {\n            throw new Error('OverflowPopup date ingestion must be passed a Date, or a YYYY-MM-DD date string');\n        }\n        return activeDate;\n    }\n    updateActiveDate(activeDate) {\n        this.element.dataset.date = DH.makeKey(activeDate);\n        this.title = DH.format(activeDate, this.dateFormat);\n    }\n    onDocumentMouseDown({ event }) {\n        const\n            alignedTo  = this.lastAlignSpec?.target,\n            { target } = event;\n        // On mousedown of our own activating element, do not focusout\n        if (alignedTo?.contains(target)) {\n            const cellOverflowButton = target.closest('.b-cal-cell-overflow');\n            // If it's a click inside the overflowing cell, or inside the overflow button\n            // then ignore it, we're clicking on our own data or overflow button.\n            if (target.closest('.b-cal-event-bar-container') || target.matches('.b-cal-cell-overflow') || (cellOverflowButton?.children.length === 1)) {\n                return event.preventDefault();\n            }\n        }\n        super.onDocumentMouseDown(...arguments);\n    }\n}\nOverflowPopup.initClass();\nOverflowPopup._$name = 'OverflowPopup';", "import Base from '../../../Core/Base.js';\nimport DH from '../../../Core/helper/DateHelper.js';\nimport DayTime from '../../../Core/util/DayTime.js';\nimport DomClassList from '../../../Core/helper/util/DomClassList.js';\nimport ArrayHelper from '../../../Core/helper/ArrayHelper.js';\nimport DomHelper from '../../../Core/helper/DomHelper.js';\nimport DomSync from '../../../Core/helper/DomSync.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\nimport EventHelper from '../../../Core/helper/EventHelper.js';\nimport StringHelper from '../../../Core/helper/StringHelper.js';\nimport OverflowPopup from '../OverflowPopup.js';\n/**\n * @module Calendar/widget/mixin/DayCellRenderer\n */\nconst\n    emptyFn           = () => {},\n    { eventNameMap }  = EventHelper;\n/**\n * Mixin that provides the ability to render a calendar cell.\n *\n * This is used by the MonthView and also CalendarRow. It expects its\n * host class to include the {@link Calendar.widget.mixin.CalendarMixin} mixin.\n *\n * @mixin\n */\nexport default Target => class DayCellRenderer extends (Target || Base) {\n    static get $name() {\n        return 'DayCellRenderer';\n    }\n    static get configurable() {\n        return {\n            monitorResize : true, // we need to adjust the \"+ 2 more\" overflow indicator\n            /**\n             * This may be specified to create the content for the date and day name section of calendar cells.\n             *\n             * This function is called for each cell rendered. It can return an HTML string which will become the\n             * content of the header section of the cell above any events.\n             *\n             * It can also return a {@link Core.helper.DomHelper#typedef-DomConfig} element creation object (or array of\n             * same) to specify content to create in the header section of the cell.\n             *\n             * It also allows developers to mutate the cell metadata, or the CSS classes to be applied to the cell.\n             *\n             * The {@link Core.helper.DomHelper#typedef-DomConfig} definition passed as the first parameter may be\n             * mutated to create a different cell header.\n             *\n             * ```javascript\n             * dayCellRenderer : function(cellData, dayCellDomConfig) {\n             *     // I don't like Mondays!\n             *     if (cellData.day === 1) {\n             *         dayCellDomConfig.className['hackathon-dayoff'] = true;\n             *         dayCellDomConfig.style.fontWeight = 'bold';\n             *\n             *         cellData.isNonWorking = true;\n             *\n             *         return `${cellData.date.getDate()} Day off yay!`;\n             *     }\n             * }\n             *```\n             *\n             * A non-null return value from the renderer is used as the content of the day number element.\n             *\n             * @config {Function} dayCellRenderer\n             * @param {DayCell} dayCellRenderer.cellData An object that contains data about the cell.\n             * @param {DomConfig} dayCellDomConfig An object to sync the day cell element.\n             * @param {Object} dayCellDomConfig.className An object who's truthy property names will be applied as class\n             * names.\n             * @param {Object} dayCellDomConfig.style A CSS style definition object.\n             * @param {Object} dayCellDomConfig.dataset The DOM data properties to set.\n             * @param {DomConfig[]} dayCellDomConfig.children The {@link DomConfig} definitions for the content of the\n             * cell.\n             * @returns {String|Object|Object[]} The definition of the cell header content.\n             */\n            dayCellRenderer : null,\n            // Must still be visible if dynamically set to non working to keep\n            // column arrangement correct.\n            dynamicHideNonWorkingdayCls : 'b-dynamic-nonworking-day',\n            /**\n             * The {@link Calendar.widget.OverflowPopup} instance that this view may show when events\n             * for one day overflow the available space.\n             * @member {Calendar.widget.OverflowPopup} overflowPopup\n             * @readonly\n             */\n            /**\n             * A config object used to create the {@link Calendar.widget.OverflowPopup} that this view\n             * may show when events for one day overflow the available space.\n             *\n             * For example\n             *\n             *```javascript\n             *     modes : {\n             *         month : {\n             *             overflowPopup : {\n             *                 closable   : false,\n             *                 dateFormat : 'dddd, MMM M',\n             *                 eventRenderer({ eventRecord, renderData }) {\n             *                     if (calendarUtils.isImportantEvent(eventRecord)) {\n             *                         // Add CSS class to important events\n             *                         renderData.cls['b-important'] = 1;\n             *                     }\n             *                 }\n             *             }\n             *         }\n             *     }\n             *```\n             * @config {OverflowPopupConfig}\n             */\n            overflowPopup : {\n                $config : ['lazy', 'nullify'],\n                value : {\n                    type : 'overflowpopup'\n                }\n            },\n            /**\n             * The pointer gesture which shows the popup containing any overflowing events\n             * in the current view.\n             *\n             * This means events which will not fit into a `MonthView` day cell, or *all* events\n             * for a `YearView` cell.\n             *\n             * Useful values are `'click'` (the default), and `'mouseover'`\n             * @config {'click'|'mouseover'|'hover'}\n             * @default\n             */\n            overflowPopupTrigger : 'click',\n            eventBarContainerCls : 'b-cal-event-bar-container',\n            /**\n             * A function, or name of a function which is passed the {@link DomConfig} object which\n             * will be used to create the \"+n more\" button which indicates that a day cell has\n             * overflowing events.\n             *\n             * ```javascript\n             * overflowButtonRenderer : function(domConfig) {\n             *     domConfig.className['b-fa'] = domConfig.className['b-fa-list'] = 1;\n             *     return domConfig;\n             * }\n             *```\n             *\n             * The result is used to create the overflow button element.\n             *\n             * To target the element using custom CSS, use the class name `b-cal-cell-overflow`.\n             *\n             * @config {Function} overflowButtonRenderer\n             * @param {DomConfig} domConfig A {@link DomConfig} config object which is used to\n             * create the overflow button.\n             * @param {String} domConfig.tag=button The tag name of the element to create.\n             * @param {Object} domConfig.className An object who's truthy property names will be applied as class names.\n             * @param {String} domConfig.text The inner content of the element. **Note that this\n             * will be HTML encoded for XSS safety**\n             * @param {Object} domConfig.style A CSS style definition object.\n             * @param {Object} domConfig.dataset The DOM data properties to set.\n             * @param {Number} overflowCount The number of overflowing events.\n             * @returns {DomConfig|String|null}\n             */\n            overflowButtonRenderer : null,\n            /**\n             * The {@link Core.helper.DateHelper} format string to format the day names\n             * in the header part of each calendar cell.\n             * @config {String}\n             */\n            dayCellNameFormat : null,\n            /**\n             * How much vertical space in pixels to leave between event bars in a cell.\n             * @member {Number} eventSpacing\n             */\n            /**\n             * How much vertical space in pixels to leave between event bars in a cell.\n             * @config {Number}\n             * @default\n             */\n            eventSpacing : 2,\n            emptyCellCls : 'b-cal-empty-cell',\n            /**\n             * A {@link DomConfig} object which will be used to create the content of a clickable\n             * element which is present when no events are in a cell.\n             *\n             * Or a function, or name of a function which returns a {@link DomConfig} object.\n             *\n             * See the {@link Calendar.view.Calendar#event-emptyCellClick} event.\n             *\n             * @config {Function|Object|String} emptyCellRenderer\n             * @param {DayCell} dayCellRenderer.cellData An object that contains data about the cell.\n             * @returns {DomConfig|null} DomConfig object representing the HTML markup\n             */\n            emptyCellRenderer : null\n        };\n    }\n    onCalendarStoreChange() {\n        super.onCalendarStoreChange(...arguments);\n        // Ensure any overflow popup is informed immediately after its owning View has been informed.\n        if (this._overflowPopup?.isVisible) {\n            this._overflowPopup.onCalendarStoreChange(...arguments);\n        }\n    }\n    // Called automatically on the CellOverflow${overflowPopupTrigger} event because of callOnFunctions\n    onCellOverflowGesture({ domEvent, date }) {\n        const\n            me       = this,\n            cellData = me.cellMap.get(DH.makeKey(date));\n        if (cellData) {\n            const\n                { overflowPopup } = me,\n                cell              = me.getCellFromEvent(domEvent);\n            /**\n             * Fired after an {@link Calendar.widget.OverflowPopup} has been shown when an a\n             * \"+ n more\" overflow button is activated by an {@link #config-overflowPopupTrigger} event.\n             * @event showOverflowPopup\n             * @param {HTMLElement} cell The day cell for which the overflow popup is going to be shown.\n             * @param {DayCell} cellData An object that contains data about the cell.\n             * @param {Date} date The date which has overflowing events\n             * @param {Calendar.widget.OverflowPopup} overflowPopup The overflow `Popup`.\n             */\n            /**\n             * Fired before an {@link Calendar.widget.OverflowPopup} is shown when an a\n             * \"+ n more\" overflow button is activated by an {@link #config-overflowPopupTrigger} event.\n             * @event beforeShowOverflowPopup\n             * @param {HTMLElement} cell The day cell for which the overflow popup is going to be shown.\n             * @param {DayCell} cellData An object that contains data about the cell.\n             * @param {Date} date The date which has overflowing events\n             * @param {Calendar.widget.OverflowPopup} overflowPopup The overflow `Popup`.\n             * @preventable\n             */\n            if (overflowPopup && me.trigger('beforeShowOverflowPopup', { cell, cellData, date, overflowPopup })) {\n                overflowPopup.showOverflow(cell, cellData);\n            }\n        }\n    }\n    getCellFromEvent(domEvent) {\n        return domEvent.target.closest('.b-calendar-cell[data-date]');\n    }\n    changeOverflowPopupTrigger(overflowPopupTrigger) {\n        // Must be correctly camel cased so the we can create the `onCellOverflow${gesture}` method name.\n        // So mouseover => mouseOver so that we inject an onCellOverflowMouseOver method.\n        overflowPopupTrigger = overflowPopupTrigger.toLowerCase();\n        if (overflowPopupTrigger === 'mouseover' || overflowPopupTrigger === 'hover') {\n            overflowPopupTrigger = 'mouseOver';\n        }\n        return overflowPopupTrigger;\n    }\n    updateOverflowPopupTrigger(overflowPopupTrigger, was) {\n        if (was) {\n            this[`onCellOverflow${StringHelper.capitalize(was)}`] = emptyFn;\n        }\n        this[`onCellOverflow${StringHelper.capitalize(overflowPopupTrigger)}`] = this.onCellOverflowGesture;\n    }\n    onEventMouseOverOut({ target, relatedTarget, type }) {\n        if (this.overflowPopupTrigger === 'mouseOver' && target.closest('.b-cal-cell-overflow') && !relatedTarget.closest('.b-cal-cell-overflow')) {\n            if (type === 'mouseover') {\n                // CalendarMixin's implementation triggers for overflow button gestures\n                return this.onCalendarPointerInteraction(...arguments);\n            }\n            else {\n                this._overflowPopup?.hide();\n            }\n        }\n        return this.onCalendarPointerInteraction(...arguments);\n    }\n    changeOverflowPopup(config, instance) {\n        const\n            me         = this,\n            popupOwner = me.up('calendar') || me.owner || me,\n            // We use OverflowPopup instead of Widget since that will have any additional configs and will use the\n            // correct merge procedure for them (if any were customized). The actual type can be derived and if so,\n            // those config merge fns will not be consulted but that's very unlikely and not worth solving for in\n            // general (though it could be).\n            ret = OverflowPopup.reconfigure(instance, config, {\n                owner    : me,  // so that we'll destroy our instances on reconfigure to null\n                defaults : {\n                    owner : me,\n                    align : {\n                        constrainTo : globalThis\n                    }\n                }\n            });\n        if (ret) {\n            const\n                { element }             = ret,\n                { eventHeightInPixels } = me;\n            // Make popup selectable\n            ret.element.classList.add(`b-${me.type}-overflowpopup`);\n            // OverflowPopup is not a global floater by default. It's rendered inside of the Calendar\n            // element so that focus stays within, and the Navigator can follow focus.\n            // If that has not been overridden by configuration, render inside calendar content.\n            if (!ret.floating) {\n                ret.positioned = true;\n                ret.render(popupOwner.isCalendar ? popupOwner.element : popupOwner.contentElement);\n            }\n            // Some views, like DayView don't have a pixel event height.\n            if (eventHeightInPixels) {\n                element.style.setProperty('--event-height', `${eventHeightInPixels}px`);\n                element.style.setProperty('--arrow-width', `${eventHeightInPixels / 3}px`);\n            }\n            // We have to relay interaction events upwards from the overflow popup if it's\n            // not rendered into this view. If it is, then the events will bubble.\n            if (ret !== instance && popupOwner !== me) {\n                EventHelper.on({\n                    thisObj     : me,\n                    element     : ret.bodyElement,\n                    delegate    : '.b-cal-event-wrap',\n                    mouseover   : 'onEventMouseOverOut',\n                    mouseout    : 'onEventMouseOverOut',\n                    mousedown   : 'onCalendarPointerInteraction',\n                    mouseup     : 'onCalendarPointerInteraction',\n                    click       : 'onCalendarPointerInteraction',\n                    dblclick    : 'onCalendarPointerInteraction',\n                    contextmenu : 'onCalendarPointerInteraction'\n                });\n                // Header may have been configured away.\n                if (ret.headerElement) {\n                    EventHelper.on({\n                        thisObj     : me,\n                        element     : ret.headerElement,\n                        mousedown   : 'onCalendarPointerInteraction',\n                        mouseup     : 'onCalendarPointerInteraction',\n                        click       : 'onCalendarPointerInteraction',\n                        dblclick    : 'onCalendarPointerInteraction',\n                        contextmenu : 'onCalendarPointerInteraction'\n                    });\n                }\n            }\n        }\n        return ret;\n    }\n    onInternalResize(element, width, height, oldWidth, oldHeight) {\n        const\n            {\n                _eventsPerCell,\n                _eventContainerTop\n            }  = this;\n        super.onInternalResize(element, width, height, oldWidth, oldHeight);\n        if (this.rendered && height !== oldHeight) {\n            // Calculates new values for eventsPerCell and eventContainerTop\n            // and handles changes to either.\n            this.performResizeRefresh(_eventsPerCell, _eventContainerTop);\n        }\n    }\n    performResizeRefresh(prevEventsPerCell, prevEventContainerTop, now) {\n        // Invalidate the values so that they are recalculated\n        this._eventsPerCell = this._eventContainerTop = this._eventContainerHeight = null;\n        const\n            me = this,\n            {\n                eventsPerCell,\n                _overflowPopup\n            } = me;\n        if (eventsPerCell !== prevEventsPerCell) {\n            /**\n             * Fires when number of events which could be placed in one cell is changed.\n             * Has place when the height of the Month view is changed.\n             * @event eventsPerCellChange\n             * @param {Calendar.widget.MonthView} source This `MonthView` instance.\n             * @param {Number} value New number of events per cell.\n             * @param {Number} oldValue Previous number of events per cell.\n             * @private\n             */\n            me.trigger('eventsPerCellChange', {\n                value    : eventsPerCell,\n                oldValue : prevEventsPerCell\n            });\n        }\n        // If the component height change caused the event start position to change\n        // or the eventsPerCell to change, refresh.\n        if (me.eventContainerTop !== prevEventContainerTop || eventsPerCell !== prevEventsPerCell) {\n            // If now passed as true, use doRefresh rather than refresh which waits until visible.\n            now ? me.doRefresh() : me.refresh();\n            // The overflow state may have changed. If we are visible, refresh will have happened.\n            // OverflowPopup will hide itself if the ext cellData block has no overflow\n            if (_overflowPopup?.isVisible) {\n                _overflowPopup.refresh(me._cellMap.get(DH.makeKey(_overflowPopup.activeDate)));\n            }\n        }\n    }\n    updateEventHeight() {\n        // CalendarMixin class needs to know\n        super.updateEventHeight(...arguments);\n        // Force a recalculate on next access\n        this._eventsPerCell = null;\n        this.element.style.setProperty('--event-height-px', `${this.eventHeightInPixels}px`);\n    }\n    updateEventSpacing(eventSpacing) {\n        // Force a recalculate on next access\n        this._eventsPerCell = null;\n        // Schedule a refresh\n        if (!this.isConfiguring) {\n            this.refreshSoon();\n        }\n        this.element.style.setProperty('--event-spacing', `${eventSpacing}px`);\n    }\n    get weeksElement() {\n        return this.contentElement;\n    }\n    get eventContainerHeight() {\n        // Must not bake the property in as zero if called during configuration.\n        if (this._eventContainerHeight == null && this.isVisible && !this.isConfiguring) {\n            const { firstVisibleCell } = this;\n            this._eventContainerHeight = firstVisibleCell ? firstVisibleCell.offsetHeight - this.eventContainerTop : NaN;\n        }\n        return this._eventContainerHeight;\n    }\n    get eventContainerTop() {\n        const me = this;\n        // Must not bake the property in as zero if called during configuration.\n        if (me._eventContainerTop == null && me.isVisible && !me.isConfiguring) {\n            const\n                { firstVisibleCell } = me,\n                c = firstVisibleCell && firstVisibleCell.querySelector('.b-cal-cell-header'),\n                top = c ? c.getBoundingClientRect().height : 0;\n            me._eventContainerTop = top === 0 ? null : top;\n            me.element.style.setProperty('--event-top', `${me._eventContainerTop}px`);\n        }\n        return me._eventContainerTop || 0;\n    }\n    /**\n     * Returns the number of complete event bars which will fit inside the referenced cell.\n     *\n     * The base implementation assumes all cells are the same height. In most views, most of the time,\n     * this is true.\n     *\n     * It's only in MonthView when some rows are shrinkwrapped round their event content (meaning\n     * either expanded or contracted away from the 1/6 height default) that there may be a customized\n     * eventsPerCell for a certain date. So only MonthView has an overriding implementation.\n     * @internal\n     */\n    getEventsPerCell(date) {\n        return this.eventsPerCell;\n    }\n    get eventsPerCell() {\n        const me = this;\n        if (me._eventsPerCell == null) {\n            me._eventsPerCell = Math.floor((me.eventContainerHeight + me.eventSpacing) / (me.eventHeightInPixels + me.eventSpacing));\n        }\n        return me._eventsPerCell;\n    }\n    get cellMap() {\n        // If the cellMap has not been populated, create it.\n        return this._cellMap?.populated ? this._cellMap : this.createCellMap();\n    }\n    cellRenderer({ cell }) {\n        const domConfig = this.getCellDomConfig(...arguments);\n        DomSync.sync({\n            domConfig,\n            targetElement : cell\n        });\n    }\n    getCellDomConfig({ cell, columnIndex, row, date, day, dayTime = DayTime.MIDNIGHT, visibleColumnIndex, key }) {\n        const\n            me        = this,\n            {\n                eventHeightInPixels,\n                eventSpacing,\n                weekLength,\n                todayCls,\n                emptyCellRenderer\n            }               = me,\n            today           = me.dayTime.startOfDay(me.calendar?.dateTimeNow || new Date()),\n            isToday         = date.getTime() === today.getTime(),\n            dayNumber       = date.getDate(),\n            eventContainer = {\n                className : me.eventBarContainerCls,\n                role      : 'presentation',\n                children  : [],\n                // Match existing data-event-id elements first and ensure DOM order matches\n                // children order.\n                syncOptions : {\n                    syncIdField      : 'eventId',\n                    releaseThreshold : 0,\n                    strict           : true\n                }\n            },\n            cellHeader = {\n                style     : {},\n                className : new DomClassList({\n                    'b-cal-cell-header' : true,\n                    [todayCls]          : isToday\n                })\n            },\n            domConfig = {\n                dataset   : {},\n                style     : {},\n                className : new DomClassList(cell?.className),\n                children  : [cellHeader, eventContainer]\n            },\n            isFirstVisibleCell = !(date - (me.firstVisibleDate || -1));\n        domConfig.className[todayCls] = isToday;\n        // Some views may create a day name element into which a dayCellRenderer may add content.\n        // MonthView does this. CalendarRow does not. It has a separate concept of dayHeaderRenderer\n        let dayName,\n            dayEvents = !me.isConfiguring && me.cellMap.get(DH.makeKey(date));\n        if (me.addCellHeaderContent) {\n            // addCellHeaderContent mutates the cellHeader DomConfig block.\n            // And if we are to have a day name element, returns the DomConfig for it.\n            dayName = me.addCellHeaderContent(cellHeader, dayEvents || (dayEvents = me.createCellData(date)));\n        }\n        else {\n            cellHeader.children = [dayName = {\n                className : {\n                    'b-day-name' : true\n                }\n            }];\n        }\n        let dynamicallySetToNonWorking;\n        // Give the dayCellRenderer access to the configuration object for the cell header\n        if (me.dayCellRenderer && !me.isConfiguring) {\n            // If they have a cell renderer, there must be cell info to give it.\n            if (!dayEvents) {\n                dayEvents = me.createCellData(date);\n            }\n            // Allow dayCellRenderer to access cell style and classes\n            dayEvents.style = domConfig.style;\n            dayEvents.cls = domConfig.className;\n            // Allow dayCellRenderer to access cell header style and classes\n            dayEvents.headerStyle = cellHeader.style;\n            dayEvents.headerCls = cellHeader.className;\n            const\n                wasNonWorking = dayEvents && dayEvents.isNonWorking,\n                dayNameContent = me.callback(me.dayCellRenderer, me, [dayEvents, domConfig]);\n            // If renderer changed the cls or style properties, propagate the values back into place\n            if (typeof dayEvents.cls == 'string') {\n                domConfig.className = new DomClassList(dayEvents.cls);\n            }\n            if (typeof dayEvents.style === 'string') {\n                domConfig.style = DomHelper.parseStyle(dayEvents.style);\n            }\n            if (typeof dayEvents.headerCls == 'string') {\n                cellHeader.className = new DomClassList(dayEvents.headerCls);\n            }\n            if (typeof dayEvents.headerStyle === 'string') {\n                cellHeader.style = DomHelper.parseStyle(dayEvents.headerStyle);\n            }\n            if (dayNameContent != null) {\n                if (typeof dayNameContent === 'string') {\n                    dayName.html = dayNameContent;\n                }\n                // Assuming Object or Object Array.\n                else {\n                    dayName.text = null;\n                    dayName.children = ArrayHelper.asArray(dayNameContent);\n                }\n            }\n            dynamicallySetToNonWorking = !wasNonWorking && dayEvents.isNonWorking;\n        }\n        if (dayName) {\n            // If there was no renderer, use the date as the textContent\n            if (!(dayName.text || dayName.html)) {\n                dayName.text = me.dayCellNameFormat ? DH.format(date, me.dayCellNameFormat) : dayNumber;\n            }\n            // If all there is in there is the date, give it the day number CSS rendition\n            // This makes it a 2emX2em circular element.\n            if ((dayName.text || dayName.html) == dayNumber) {\n                dayName.className['b-day-num'] = true;\n            }\n        }\n        // If there's a cell entry which is visible (within this month and not a hidden nonworking day)\n        // then we add the child entries to the eventContainer's children array.\n        if (dayEvents.visible) {\n            const\n                {\n                    hasOverflow,\n                    renderedEvents,\n                    maxRow\n                }          = dayEvents,\n                events     = renderedEvents,\n                { length } = events,\n                children   = eventContainer.children;\n            // Sync the non working day CSS class.\n            // But if a dayCellRenderer changed isNonWorking to true, the cell must remain\n            // visible in certain views, to maintain cell arrangement, so add extra CSS class\n            // to enable views to override the rule from Core/calendarpanel.scss.\n            domConfig.className[me.nonWorkingDayCls] = dayEvents.isNonWorking;\n            domConfig.className[me.dynamicHideNonWorkingdayCls] = dynamicallySetToNonWorking;\n            domConfig.className[me.weekendCls] = DH.weekends[day];\n            // How many events we find below the eventsPerCell point\n            let i = 0, eventRow = 0, overflowCount = 0;\n            for (; i < maxRow; i++, eventRow++) {\n                const renderedEvent = events[i];\n                // If the slot is occupied, add a child event element.\n                // The event's .b-cal-event-wrap is position:absolute, so its offsetParent is the closest\n                // position:relative element which is the .b-calendar-days row.\n                // This is so that the events can use %age widths and need no intervention\n                // for width changes. The left position is the .b-cal-event-bar-container's left.\n                // Only height changes which result in a change to this.eventsPerCell require\n                // a refresh.\n                if (renderedEvent) {\n                    const\n                        {\n                            eventRecord,\n                            isOverflow,\n                            propagateEndDate\n                        }                = renderedEvent,\n                        eventEndDate     = renderedEvent.eventEndDate || eventRecord.endingDate,\n                        renderedDaySpan  = Math.max(1, me.getDaySpan(date, propagateEndDate || eventEndDate, dayTime)),\n                        daySpan          = me.getDaySpan(date, eventEndDate, dayTime, true),\n                        remainingColumns = weekLength - visibleColumnIndex,\n                        isHiddenOverflow = visibleColumnIndex && isOverflow,\n                        width            = DomHelper.percentify(ObjectHelper.round((\n                            isHiddenOverflow ? 1 : Math.min(renderedDaySpan, remainingColumns)) / weekLength * 100, 4)),\n                        eventDomConfig   = me.createEventDomConfig(renderedEvent);\n                    Object.assign(eventDomConfig.style, {\n                        width,\n                        top : `${eventRow * eventHeightInPixels + (eventRow * eventSpacing) + me.eventContainerTop}px`\n                    });\n                    Object.assign(eventDomConfig.className, {\n                        // If flowing in from a previous cell\n                        'b-overflow' : isHiddenOverflow,\n                        // We're in the first cell, and it was from a previous week\n                        'b-continues-past' : !isHiddenOverflow && (!visibleColumnIndex || isFirstVisibleCell) && eventRecord.startDate < date,\n                        // The event ends in a future week\n                        'b-continues-future' : !isHiddenOverflow && (daySpan > remainingColumns || daySpan > renderedDaySpan)\n                    });\n                    children.push(eventDomConfig);\n                }\n            }\n            // Continue after the maxRow has been reached\n            // keeping track of how many events are below the fold\n            while (i < length) {\n                if (events[i++]) {\n                    overflowCount++;\n                }\n            }\n            // The cell was found to need an overflow link by propagateCellEvents.\n            // This could be because it has more renderedEvents than me.eventsPerCell\n            // Or it could be because its last visible event flowed forwards into a cell\n            // whose own events only *filled*\n            if (hasOverflow) {\n                row.classList.add('b-has-overflow');\n                domConfig.children.push(me.getOverflowButtonDomConfig(overflowCount));\n            }\n            else if (!columnIndex) {\n                row.classList.remove('b-has-overflow');\n            }\n            // Flag the event container element as empty if necessary\n            const emptyCell = domConfig.className[me.emptyCellCls] = !events.length;\n            if (emptyCell && emptyCellRenderer) {\n                const\n                    rType     = typeof emptyCellRenderer,\n                    rCallback = rType === 'function' || rType === 'string' ? me.resolveCallback(emptyCellRenderer, me, false) : null,\n                    noEvents  = rCallback?.handler ? rCallback.handler.call(rCallback.thisObj, dayEvents) : emptyCellRenderer;\n                // By default, a single line no events button will appear similar to\n                // a \"+n more\" overflow button. It will be the size and shape of an event pill.\n                if (noEvents) {\n                    eventContainer.children[0] = {\n                        tag      : 'button',\n                        class    : 'b-cal-cell-no-content',\n                        children : [\n                            rCallback?.handler ? rCallback.handler.call(rCallback.thisObj, dayEvents) : emptyCellRenderer\n                        ]\n                    };\n                }\n            }\n        }\n        return domConfig;\n    }\n    onCalendarPointerInteraction(domEvent) {\n        const\n            me         = this,\n            { target } = domEvent;\n        // Broadcast a click on content in an empty cell.\n        if (target.closest(`.${me.emptyCellCls} .${me.eventBarContainerCls}`)) {\n            // If they have an emptyCellRenderer, then that must be the click target\n            if (!me.emptyCellRenderer || target.closest('.b-cal-cell-no-content')) {\n                /**\n                 * Fired when an empty cell content area is clicked on. If the handler returns\n                 * `false` the current pointer event is not processed further.\n                 * @event emptyCellClick\n                 * @param {Event} domEvent The triggering DOM event.\n                 * @param {Date} date The date which has no visible events\n                 */\n                if (me.trigger(`emptyCell${eventNameMap[domEvent.type]}`, {\n                    date : me.getDateFromDomEvent(domEvent),\n                    domEvent\n                }) === false) {\n                    return false;\n                };\n            }\n        }\n        return super.onCalendarPointerInteraction(domEvent);\n    }\n    getDaySpan(startDate, endDate, dayTime, ignoreNonWorkingDays) {\n        if (this.hideNonWorkingDays && !ignoreNonWorkingDays) {\n            let result = 0;\n            for (const date = new Date(startDate), spanEnd = dayTime.ceil(endDate, '1 day'); date < spanEnd; date.setDate(date.getDate() + 1)) {\n                if (!this.nonWorkingDays[date.getDay()]) {\n                    result++;\n                }\n            }\n            return result;\n        }\n        else {\n            return Math.max(DH.diff(startDate, dayTime.ceil(endDate, '1 day'), 'day'), 1);\n        }\n    }\n    getOverflowButtonDomConfig(overflowCount) {\n        const\n            { overflowButtonRenderer } = this,\n            domConfig                  = {\n                tag       : 'button',\n                className : {\n                    'b-cal-cell-overflow' : 1\n                },\n                text  : this.L('L{Calendar.plusMore}', overflowCount),\n                style : {\n                    lineHeight   : `${this.eventHeightInPixels}px`,\n                    marginBottom : `${this.eventSpacing}px`\n                },\n                dataset : {\n                    eventId : 'overflow'\n                }\n            };\n        return overflowButtonRenderer ? this.callback(overflowButtonRenderer, this, [domConfig, overflowCount]) : domConfig;\n    }\n    getCell(date) {\n        if (typeof date !== 'string') {\n            date = this.dayTime.dateKey(date);\n        }\n        return this.contentElement.querySelector(`[data-date=\"${date}\"]`);\n    }\n    getCellOverflowButton(date) {\n        return this.getCell(date)?.querySelector('.b-cal-cell-overflow');\n    }\n};\n", "import Base from '../../../Core/Base.js';\nimport DateHelper from '../../../Core/helper/DateHelper.js';\nimport Month from '../../../Core/util/Month.js';\n/**\n * @module Calendar/widget/mixin/DateRangeOwner\n */\nconst\n    validRangeUnits = {\n        day    : 1,\n        week   : 1,\n        month  : 1,\n        year   : 1,\n        decade : 1\n    },\n    compareRange = (r1, r2) => r1?.unit === r2?.unit && r1?.magnitude === r2?.magnitude;\n/**\n * Mixin that provides the ability to collect encapsulate a range of dates specified by a\n * {@link #config-startDate} and a {@link #config-range}.\n *\n * @mixin\n */\nexport default Target => class DateRangeOwner extends (Target || Base) {\n    static $name = 'DateRangeOwner';\n    static configurable = {\n        month : true,\n        /**\n         * Setting this property may change the encapsulated range if the date is outside the current\n         * range.\n         *\n         * It also causes this view to scroll the view to the passed date, or closest date.\n         * See {@link Calendar.widget.mixin.CalendarMixin#function-scrollTo}\n         * @member {Date} date\n         */\n        /**\n         * The date to orient this view's {@link #config-range} around.\n         *\n         * When using a {@link #config-range} of weeks, months, years or decades, the {@link #config-startDate} snaps\n         * to the closest lower range boundary, and the end date snaps to the closest larger\n         * range boundary.\n         *\n         * When using a {@link #config-range} of days, the {@link #config-startDate} is set to the passed date.\n         * @config {Date}\n         */\n        date : {\n            $config : {\n                equal : 'date'\n            },\n            value : null\n        },\n        /**\n         * The time range encapsulated by the current {@link #property-date}.\n         *\n         * When a range is used, changing the {@link #config-date} snaps the {@link #config-startDate}\n         * to the closest starting date of the range. For Example if the range was configured as `'1 week'`\n         * then setting the date to the date of next Wednesday would mean that the {@link #property-startDate}\n         * would be the __start__ of next week, and an entire week would be encapsulated by this view.\n         * @member {DurationConfig} range\n         */\n        /**\n         * The time range around the {@link #config-date} to display events for.\n         *\n         * Valid values are:\n         * - day\n         * - week\n         * - month\n         * - year\n         * - decade\n         *\n         * This may also be specified as a duration with a magnitude part and a unit part. For\n         * example `'1m'` would mean one month, and `'4w'` would mean four weeks.\n         * See {@link Core.helper.DateHelper#function-parseDuration-static} for details\n         * of syntax.\n         *\n         * When using a range of weeks, months, years or decades, then when this widget's\n         * {@link #config-date} is synced with its owning {@link Calendar.view.Calendar}'s\n         * {@link Calendar.view.Calendar#property-date}, this widget's {@link #config-startDate}\n         * is snapped to the closest start point of the range which encompasses that date.\n         *\n         * So if using `range : '1w'`, then setting the date to Thursday, 28th October 2021\n         * Would mean that the `startDate` snaps to Sunday 24th October 2021 (assuming the locale\n         * uses Sunday as the week start day).\n         *\n         * If configured to use a range of *days*, no snapping is done. There's no defined start point\n         * so the {@link #config-startDate} is set to the incoming Calendar date.\n         *\n         * __Note:__ If an {@link #config-endDate} is specified, any range is ignored. The encompassed range\n         * will be specified by the {@link #config-startDate} and {@link #config-endDate}, and when the\n         * {@link #config-startDate} changes, the {@link #config-endDate} is changed to keep the duration\n         * the same.\n         * @config {String|DurationConfig}\n         */\n        range : {\n            $config : {\n                lazy  : true,\n                equal : compareRange\n            },\n            value : null\n        },\n        /**\n         * Gets the start date of the {@link #config-range} that this view covers.\n         * @member {Date} startDate\n         * @readonly\n         */\n        /**\n         * The start date (Time component is zeroed) of this view.\n         * @config {Date}\n         */\n        startDate : {\n            $config : {\n                equal : 'date'\n            }\n        },\n        /**\n         * Gets the end date of the {@link #config-range} that this view covers.\n         * Note that Date objects are time points, not a representation of a 24 hour period,\n         * So `{startDate : '2020-10-24', endDate : '2020-10-25' }` spans the __single__ day\n         * 24th October 2020. The end point is `2020-10-25T00:00:00`\n         * @member {Date} endDate\n         * @readonly\n         */\n        /**\n         * The end date (Time component is zeroed) of this view. Note that in terms of full days,\n         * this is exclusive, ie: 2020-01-012 to 2020-01-08 is *seven* days. The end is 00:00:00 on\n         * the 8th.\n         *\n         * __Note:__ This configuration takes precedence over any {@link #config-range} specified.\n         * If used, the {@link #config-range} is ignored, and after configuration, the `endDate` is\n         * locked to the {@link #config-startDate} when the {@link #config-startDate} is changed.\n         * @config {Date}\n         */\n        endDate : {\n            $config : {\n                equal : 'date'\n            }\n        }\n    };\n    /**\n     * Interface method used by an encapsulating Calendar view to implement the \"prev\" button.\n     */\n    previous() {\n        const { range } = this;\n        if (range) {\n            this.date = DateHelper.add(this.date, -range.magnitude, range.unit);\n        }\n        else {\n            this.startDate = DateHelper.add(this.startDate, -this.duration, 'day');\n        }\n    }\n    /**\n     * Interface method used by an encapsulating Calendar view to implement the \"next\" button.\n     */\n    next() {\n        const { range } = this;\n        if (range) {\n            this.date = DateHelper.add(this.date, range.magnitude, range.unit);\n        }\n        else {\n            this.startDate = DateHelper.add(this.startDate, this.duration, 'day');\n        }\n    }\n    changeDate(date) {\n        date = super.changeDate(date || this.startDate);\n        if (this.isConfiguring || this.isValidRange(this.range, date)) {\n            return date;\n        }\n    }\n    updateDate(date) {\n        const\n            me           = this,\n            {\n                startDate,\n                _month\n            }            = me,\n            newStartDate = me.changeStartDate(date),\n            generation   = _month?.generation;\n        // Move range so that it encapsulates the target date if necessary\n        if (!startDate || (newStartDate - startDate)) {\n            // Having an endDate configured takes precedence over a range.\n            // Shift the range forward or back so that the target date is in\n            if (me.hasConfig('endDate')) {\n                const\n                    { endDate, duration } = me,\n                    // For EventLists, when we are using a startDate->endDate range as opposed to a fixed\n                    // range, the dates are *inclusive*, so pick the correct date containment function.\n                    dateContainmentFn = me.isEventList && !me.range ? 'betweenLesserEqual' : 'betweenLesser';\n                if (!me.isConfiguring || !DateHelper[dateContainmentFn](date, startDate, endDate)) {\n                    // Need to scroll left\n                    if (!startDate || !endDate || date < startDate) {\n                        me.startDate = date;\n                    }\n                    // Need to scroll right.\n                    // EventList range is *inclusive*\n                    else if (me.isEventList ? (date > endDate) : (date >= endDate)) {\n                        me.startDate = DateHelper.add(date, -(duration - 1), 'day');\n                    }\n                }\n            }\n            // If there's no endDate, we MUST be configured with a range, so snap\n            // the date to the closest range start.\n            else {\n                me.startDate = DateHelper.floor(date, me.range, me.startDate, me.weekStartDay);\n            }\n        }\n        // If we have not already updated our month by setting startDate above\n        // then update the month now.\n        // We must only update it once because we react to month mutation to refresh the UI.\n        if (_month && (_month.generation === generation)) {\n            _month.date = date;\n        }\n        super.updateDate?.(...arguments);\n    }\n    changeStartDate(startDate, oldStartDate) {\n        return super.changeStartDate(this.snapDate(this.ingestDate(startDate)), oldStartDate);\n    }\n    updateStartDate(startDate, oldStartDate) {\n        const\n            me               = this,\n            {\n                refreshCount,\n                _month\n            } = me;\n        if (!me.date) {\n            me.date = startDate;\n        }\n        if (_month) {\n            _month.date = startDate;\n        }\n        // Some views inherit startDate\n        super.updateStartDate?.(...arguments);\n        // If we are bounded by an endDate configuration, but are not in the process of being passed\n        // a new endDate (unless we are at configure time), keep the end date synced with current duration.\n        if (me.hasConfig('endDate') && (!me.peekConfig('endDate') || this.isConfiguring)) {\n            const duration = DateHelper.diff(oldStartDate || startDate, me.endDate, 'day');\n            me.endDate = DateHelper.add(startDate, duration, 'day');\n        }\n        if (!me.isConfiguring) {\n            // If that changed the end date, the updater will have done a refresh.\n            // If there was no change to the endDate, so no refresh, we have to refresh here.\n            if (me.refreshCount === refreshCount) {\n                me._cellMap?.clear();\n                me.refresh();\n            }\n        }\n        me.triggerRangeChange(startDate, me.endDate);\n    }\n    updateEndDate(endDate) {\n        super.updateEndDate?.(...arguments);\n        this.triggerRangeChange(this.startDate, endDate);\n    }\n    triggerRangeChange(startDate, endDate) {\n        const { lastRangeAnnounced } = this;\n        if (!lastRangeAnnounced || (lastRangeAnnounced.startDate - startDate) || (lastRangeAnnounced.endDate - endDate)) {\n            /**\n             * Fired when the range of dates encapsulated by this view changes.\n             *\n             * This will be when initially configured with a {@link #config-startDate} and {@link #config-endDate},\n             * and when moving a view in time by changing its {@link #property-date}, or its {@link #property-range},\n             * or its {@link #property-startDate}, or its {@link #property-endDate}.\n             *\n             * This will happen when moving in time using the Calendar's previous and next\n             * buttons in its {@link Calendar.view.Calendar#property-tbar}.\n             * @event rangeChange\n             * @param {Scheduler.view.TimelineBase} source This Scheduler/Gantt instance.\n             * @param {Object} [old] The old date range __if any__.\n             * @param {Date} old.startDate the old start date.\n             * @param {Date} old.endDate the old end date.\n             * @param {Object} new The new date range\n             * @param {Date} new.startDate the new start date.\n             * @param {Date} new.endDate the new end date.\n             */\n            this.trigger('rangeChange', {\n                old : lastRangeAnnounced,\n                new : this.lastRangeAnnounced = {\n                    startDate,\n                    endDate\n                }\n            });\n        }\n    }\n    get range() {\n        return this.hasConfig('endDate') ? null : this._range;\n    }\n    get endDate() {\n        const me = this;\n        return me.hasConfig('endDate')\n            ? me._endDate\n            : me.startDate && DateHelper.add(me.startDate, me.range.magnitude, me.range.unit);\n    }\n    // Snap the passed date to the start or end of our configured range block if we have one.\n    snapDate(date, end) {\n        const\n            me = this,\n            range = me._endDate || me.peekConfig('endDate') ? null : me.range;\n        // If we have been configured with a range which needs snapping, snap the date to the required end\n        return range && range.unit !== 'day' &&  date\n            ? DateHelper[end ? 'ceil' : 'floor'](date, range, undefined, me.weekStartDay)\n            : date;\n    }\n    changeRange(range) {\n        if (range && !this.hasConfig('endDate')) {\n            // '1d' or '1 day' or '4 weeks', '1\u0434\u0435\u0441\u044F\u0442\u0438\u043B\u0435\u0442\u0438\u0435' etc.\n            // We parse to an object.\n            if (typeof range === 'string') {\n                if (DateHelper.parseTimeUnit(range)) {\n                    range = {\n                        magnitude : 1,\n                        unit      : range\n                    };\n                }\n                else {\n                    range = DateHelper.parseDuration(range);\n                }\n            }\n            else if (typeof range === 'number') {\n                return {\n                    magnitude : range,\n                    unit      : 'day'\n                };\n            }\n            // range : '100ms' would be invalid.\n            if (!validRangeUnits[range.unit]) {\n                throw new Error('Range must be in days, weeks, months, years or decades');\n            }\n            // Veto invalid navigation\n            if (this._date && !this.isValidRange(range)) {\n                return;\n            }\n        }\n        return range;\n    }\n    isValidRange(range, date = this.date) {\n        const\n            minDate = this.minDate || this.calendar?.minDate,\n            maxDate = this.maxDate || this.calendar?.maxDate;\n        // Only do date arithmetic if we need to.\n        if (range && !isNaN(minDate) || !isNaN(maxDate)) {\n            const newRange = this.calculateDateRange(range, date);\n            if (!isNaN(minDate)) {\n                // Veto navigation to before minDate.\n                if (newRange.startDate < minDate) {\n                    return false;\n                }\n            }\n            if (!isNaN(maxDate)) {\n                // Veto navigation to after maxDate.\n                if (newRange.endDate > maxDate) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    updateRange(range) {\n        const\n            me       = this,\n            { date } = me;\n        // Change the start and end dates depending on the range size around the current date\n        if (range && date && !me.hasConfig('endDate')) {\n            // If we have a range, then endDate is derived\n            me.startDate = date;\n        }\n    }\n    calculateDateRange(range, date) {\n        // Calculate the start and end dates depending on the range size around the requested date\n        if (date) {\n            // Only snap for units with definite start points\n            if (range.unit !== 'day') {\n                return {\n                    startDate : DateHelper.floor(date, range, undefined, this.weekStartDay),\n                    endDate   : DateHelper.ceil(DateHelper.add(date, 1, 'day'), range, undefined, this.weekStartDay)\n                };\n            }\n            return {\n                startDate : date,\n                endDate   : DateHelper.add(date, range.magnitude, 'day')\n            };\n        }\n    }\n    changeMonth(month) {\n        const\n            me       = this,\n            { date } = me;\n        // MonthView, based on CalendarPanel has its own opinions\n        if (super.changeMonth) {\n            return super.changeMonth(...arguments);\n        }\n        if (!month?.isMonth) {\n            month = new Month({\n                date,\n                weekStartDay       : me.weekStartDay,\n                hideNonWorkingDays : me.hideNonWorkingDays,\n                nonWorkingDays     : me.nonWorkingDays\n            });\n            if (me.nonWorkingDays == null) {\n                me.nonWorkingDays = month.nonWorkingDays;\n            }\n            if (me.weekStartDay == null) {\n                me.weekStartDay = month.weekStartDay;\n            }\n        }\n        return month;\n    }\n    /**\n     * Returns the range of included dates in the range as a two-element array, i.e., `[0]` is {@link #config-startDate}\n     * and `[1]` is {@link #property-lastDate}.\n     * @member {Date[]}\n     * @internal\n     */\n    get dateBounds() {\n        return [this.startDate, this.lastDate];\n    }\n    get duration() {\n        const { range } = this;\n        return range ? DateHelper.as('d', range.magnitude, range.unit) : super.duration;\n    }\n    /**\n     * The last day that is included in the date range. This is different than {@link #config-endDate} since that date\n     * is not inclusive. For example, an `endDate` of 2022-07-21 00:00:00 indicates that the time range ends at that\n     * time, and so 2022-07-21 is _not_ in the range. In this example, `lastDate` would be 2022-07-20 since that is the\n     * last day included in the range.\n     * @member {Date}\n     * @internal\n     */\n    get lastDate() {\n        const lastDate = this.endDate;\n        // endDate is \"exclusive\" because it means 00:00:00 of that day, so subtract 1\n        // to keep description consistent with human expectations.\n        return lastDate && DateHelper.add(lastDate, -1, 'day');\n    }\n};\n", "import Widget from '../../Core/widget/Widget.js';\nimport DayCellCollecter from './mixin/DayCellCollecter.js';\nimport CalendarMixin from './mixin/CalendarMixin.js';\nimport DayCellRenderer from './mixin/DayCellRenderer.js';\nimport DH from '../../Core/helper/DateHelper.js';\nimport EventSlots from '../util/EventSlots.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport DomSync from '../../Core/helper/DomSync.js';\nimport EventHelper from '../../Core/helper/EventHelper.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport DayTime from '../../Core/util/DayTime.js';\nimport Scroller from '../../Core/helper/util/Scroller.js';\nimport Objects from '../../Core/helper/util/Objects.js';\nimport DateRangeOwner from './mixin/DateRangeOwner.js';\n/**\n * @module Calendar/widget/CalendarRow\n */\nconst\n    emptyObject    = Object.freeze({}),\n    expandGestures = {\n        shrinkwrap : 1,\n        expand     : 1\n    },\n    formatDayPart = (format, sep, d1, d2, compress) => {\n        const s1 = DH.format(d1, format);\n        return d2 ? `${s1}${compress ? sep.trim() : sep}${DH.format(d2, format).slice(compress ? -1 : 0)}` : s1;\n    };\n/**\n * This is normally used as the \"All day events\" section of a {@link Calendar.widget.DayView} or\n * {@link Calendar.widget.WeekView}. But it may be used standalone as a regular Widget.\n *\n * As a standalone widget, it will lack the capabilities of the {@link Calendar.view.Calendar Calendar}\n * class, such as keyboard-based event to event navigation and drag/drop features.\n *\n * A Widget which displays a single row of calendar cells for a configured range of dates.\n *\n * Cell rendering can be customized using the {@link #config-dayCellRenderer} method.\n *\n * Event rendering can be customized using the {@link #config-eventRenderer} method.\n *\n * @extends Core/widget/Widget\n * @mixes Core/widget/mixin/Responsive\n * @mixes Calendar/widget/mixin/DayCellRenderer\n * @mixes Calendar/widget/mixin/CalendarMixin\n * @mixes Calendar/widget/mixin/DateRangeOwner\n * @classtype calendarrow\n */\nexport default class CalendarRow extends Widget.mixin(\n    CalendarMixin, DayCellCollecter, DayCellRenderer, DateRangeOwner\n) {\n    static get $name() {\n        return 'CalendarRow';\n    }\n    // Factoryable type name\n    static get type() {\n        return 'calendarrow';\n    }\n    static get configurable() {\n        return {\n            // region Hidden configs\n            /**\n             * @config dayCellRenderer\n             * @hide\n             */\n            // endRegion\n            cls : 'b-calendar-days',\n            dragUnit : 'day',\n            /**\n             * Set this to `false` to not use transition for this Widget as it changes height\n             *\n             * @config {Boolean}\n             * @default\n             */\n            animate : true,\n            /**\n             * By default, this widget displays a maximum of {@link #config-defaultEventRowCount} events\n             * before showing overflow indicators, and becoming {@link #function-toggleExpandCollapse expandable}.\n             *\n             * Configuring this as `true` makes this widget accommodate all events with no overflow.\n             * @config {Boolean}\n             */\n            autoHeight : null,\n            autoRefresh : [\n                'dayNameFormat',\n                'dayNumberCompress',\n                'dayNumberFormat',\n                'daySeparator',\n                'hideEmptyDays'\n            ],\n            descriptionFormat : [true, true],\n            /**\n             * Either the start hour of the day, or a *24 hour* `HH:MM` string denoting the start of the first rendered\n             * daily time block.\n             *\n             * @config {String|Number}\n             * @default 0\n             */\n            dayStartShift : null,\n            dayTime : 0,\n            /**\n             * The number of events to show to define the height of this widget by default if this widget\n             * {@link #config-autoHeight} is *not* defined as `true`. The widget may be expanded to accommodate all\n             * the events if there are overflowing events.\n             * @config {Number}\n             * @default\n             */\n            defaultEventRowCount : 3,\n            /**\n             * When `true`, a full week of dates is rendered for a single day range. This should not be applied when\n             * the `duration` spans multiple days.\n             * @prp {Boolean}\n             */\n            fullWeek : null,\n            /**\n             * By default, the day columns flex to all fit within the width of this widget.\n             *\n             * configuring a `minDayWidth` means that if the day columns do not fit within this\n             * widget's width, it becomes horizontally scrollable.\n             * @config {Number}\n             */\n            minDayWidth : null,\n            scrollable : {\n                overflowX     : 'hidden',\n                overflowY     : 'hidden',\n                propagateSync : true\n            },\n            headerScroller : {\n                $config : ['lazy', 'nullify'],\n                value   : {\n                    overflowX     : 'hidden',\n                    overflowY     : 'hidden',\n                    propagateSync : true\n                }\n            },\n            /**\n             * The {@link Core.helper.DateHelper} format string for day names (e.g., \"ddd\" for \"Mon\", \"Tue\", ...)\n             * @config {String}\n             * @default\n             */\n            dayNameFormat : 'ddd',\n            /**\n             * Specify `true` to textually compress day number pairs. For example, compress \"11/12\" to \"11/2\". Also\n             * when `true`, the {@link #config-daySeparator} is trimmed of any whitespace.\n             * @config {Boolean}\n             * @default false\n             */\n            dayNumberCompress : null,\n            /**\n             * The {@link Core.helper.DateHelper} format string for day numbers (e.g., \"D\" for \"9\", \"10\", ...)\n             * @config {String}\n             * @default\n             */\n            dayNumberFormat : 'D',\n            /**\n             * The separator between day names and numbers. If a single string is provided, it applies to both day\n             * names and day numbers. If an array of 2 strings is provided, the [0] element is the separator for day\n             * names and [1] element is the separator for day numbers.\n             * @config {String|String[]}\n             */\n            daySeparator : '-',\n            responsive : {\n                small : {\n                    // dayNameFormat     : 'd1/d1',\n                    // dayNumberFormat   : 'D/D',\n                    dayNameFormat     : 'd1',\n                    dayNumberCompress : true,\n                    daySeparator      : '/'\n                },\n                '*' : {\n                    // dayNameFormat     : 'ddd-ddd',\n                    // dayNumberFormat   : 'D-D',\n                    dayNameFormat     : 'ddd',\n                    dayNumberCompress : false,\n                    daySeparator      : '-'\n                }\n            },\n            dayNameSelector : '.b-cal-cell-header',\n            // We are in control of our size. Once we can calculate our maxEventCount, then from\n            // that and the eventContainerTop and the defaultEventRowCount and the autoHeight and\n            // expanded settings we calculate our height.\n            // We have to have been through one initial refresh cycle to measure eventContainerTop\n            // which is handled in onInternalPaint.\n            monitorResize : false,\n            /**\n             * How much extra space in pixels or other DOM units to allow below the event bars to\n             * facilitate drag-create gestures.\n             * @config {Number|String}\n             * @default\n             */\n            gutterHeight : null,\n            expanded : null,\n            /**\n             * How the view responds to clicking on a `+n more` button in an overflowing day cell.\n             *\n             * The default value, `'popup'`, means that a small dialog box showing the full complement\n             * of events for that cell is shown aligned to the cell.\n             *\n             * When set to `'expand'`, then clicking the `+n more` button causes the encapsulating\n             * row to expand to accommodate all events in that row with no overflow.\n             *\n             * Navigating to a new month resets the row to its default, flexed height.\n             * @config {'popup'|'expand'} overflowClickAction\n             * @default\n             */\n            overflowClickAction : 'popup',\n            /**\n             * A function, or name of a function which is passed the {@link DomConfig} object which\n             * will be used to sync with a day cell header.\n             *\n             * ```javascript\n             * dayHeaderRenderer : function(headerDomConfig, cellData) {\n             *     if (this.isSpecialDate(cellData.date)) {\n             *         headerDomConfig.className['b-is-special-date'] = 1;\n             *\n             *         // Add to the content element's children\n             *         headerDomConfig.children.push({\n             *             text : 'Special day',\n             *             className : 'b-special-day\n             *         });\n             *     }\n             * }\n             *```\n             *\n             * The result is used to sync the DOM of the day column.\n             *\n             * @config {Function|String} dayHeaderRenderer\n             * @param {DomConfig} headerDomConfig A {@link DomConfig} config object which is used to sync the day header element.\n             * @param {Object} headerDomConfig.className An object who's truthy property names will be applied as class names.\n             * @param {Object} headerDomConfig.style A CSS style definition object.\n             * @param {Object} headerDomConfig.dataset The DOM data properties to set.\n             * @param {DomConfig[]} headerDomConfig.children The {@link DomConfig} definitions the header content.\n             *   There will be 2 `children` encapsulating the day name and the date.\n             * @param {DayCell} cellData An object that contains data about the cell.\n             * @returns {String}\n             */\n            dayHeaderRenderer : null,\n            /**\n             * Configure this as `true` to hide day columns which contain no events.\n             *\n             * {@note}Use with care. This may result in no day columns being rendered\n             * for completely empty time ranges.{/@note}\n             * @prp {Boolean}\n             * @default false\n             */\n            hideEmptyDays : null\n        };\n    }\n    /**\n     * A Promise which will be in _Pending_ state only when the `minHeight` is animating to a new value.\n     * @property {Promise}\n     */\n    heightAnimation = Promise.resolve;\n    compose() {\n        return {\n            children : {\n                headerElement : {\n                    className : 'b-calendarrow-header',\n                    children  : {\n                        headerCellContainer : {\n                            className : 'b-calendarrow-header-container'\n                        },\n                        scrollPadElement : {\n                            // retainElement : true, // DomSync should leave this alone\n                            ...DomHelper.scrollBarPadElement\n                        }\n                    }\n                },\n                bodyElement : {\n                    className : 'b-calendarrow-body',\n                    children  : {\n                        cellContainer : {\n                            reference : 'cellContainer',\n                            className : 'b-calendarrow-cell-container'\n                        }\n                    }\n                }\n            }\n        };\n    }\n    onInternalPaint({ firstPaint }) {\n        // On first paint, create measurable elements, the refresh measures and caches uninitialized\n        // heights, so delete the cached values so that they get measured again\n        if (firstPaint) {\n            const\n                me           = this,\n                { fonts }    = document,\n                onFirstPaint = () => {\n                    // In case we are arriving here after the font load. Need to remeasure\n                    // elements that are sized by text.\n                    me._eventContainerTop = me._eventContainerHeight = null;\n                    if (me.eventStore.count) {\n                        me.performResizeRefresh(null, null, true);\n                    }\n                };\n            // If the API is available, we need to remeasure when fonts become ready\n            if (fonts?.status !== 'loaded') {\n                fonts.ready.then(() => !me.isDestroyed && onFirstPaint());\n            }\n            onFirstPaint();\n        }\n    }\n    changeDaySeparator(daySeparator) {\n        return Array.isArray(daySeparator) ? daySeparator : [daySeparator, daySeparator];\n    }\n    changeElement() {\n        const result = super.changeElement(...arguments);\n        // Ensure header scroller is in sync in the X axis with the main scroller\n        this.scrollable.addPartner(this.headerScroller, 'x');\n        return result;\n    }\n    changeHeaderScroller(headerScroller, oldHeaderScroller) {\n        if (headerScroller) {\n            headerScroller = Scroller.new({\n                _id     : `${this.id}-header-scroller`,\n                element : this.headerCellContainer,\n                widget  : this\n            }, headerScroller);\n        }\n        else {\n            oldHeaderScroller?.destroy();\n        }\n        return headerScroller;\n    }\n    /**\n     * Brings an event or a time into view.\n     * @param {Scheduler.model.EventModel|Date|Number} target The event to scroll to or\n     * a `Date` to read the hour value from, or an hour number.\n     * @param {BryntumScrollOptions} [options] How to scroll.\n     * @returns {Promise} A promise which is resolved when the target has been scrolled into view.\n     */\n    async scrollTo(target) {\n        const\n            me              = this,\n            { eventFilter } = me;\n        // If it's an event and filtered in, and intersects our date range, but we don't have an element\n        // for it, then it must be because we are collapsed. Expand so it is rendered.\n        if (target.isEvent && (!eventFilter || eventFilter(target)) && DH.intersectSpans(me.startDate, me.endDate, target.startDate, target.endDate)) {\n            if (!me.getEventElement(target)) {\n                if (!(me.expanded || me.autoHeight)) {\n                    me.toggleExpandCollapse();\n                }\n            }\n        }\n        return super.scrollTo(...arguments);\n    }\n    updateDate(date, oldDate) {\n        const me = this;\n        let el = oldDate && me.getDayHeader(oldDate);\n        el?.classList.remove('b-selected-date');\n        // Base class may move our range if new date is outside of current range.\n        super.updateDate?.(date, oldDate);\n        el = date && me.getDayHeader(date);\n        el?.classList.add('b-selected-date');\n    }\n    getDayHeader(date) {\n        if (typeof date !== 'string') {\n            date = this.dateKey(date);\n        }\n        return this.headerCellContainer.querySelector(`.b-cal-cell-header[data-header-date=\"${date}\"]`);\n    }\n    get overflowElement() {\n        return this.bodyElement;\n    }\n    createCellMap(getEventsOptions = {}) {\n        const\n            me                = this,\n            hiddenDays        = me.hideNonWorkingDays ? me.nonWorkingDays : emptyObject,\n            { maxEventCount } = me,\n            options           = ObjectHelper.assign({\n                dayTime      : me.dayTime,\n                // Only the first *visible* cell needs overflows flowing into it.\n                // from after that, propagateCellEvents copies events forward, so\n                // the getEvents will use the \"startDate\" index to extract events for a date.\n                getDateIndex : date => date > (me.firstVisibleDate || me.startDate) ? 'startDate' : 'date'\n            }, getEventsOptions),\n            cellMap           = super.createCellMap(options),\n            { owner }         = me;\n        let newMaxEventCount = 0,\n            lastVisibleCellData;\n        cellMap.forEach(cellData => {\n            if (!hiddenDays[cellData.day]) {\n                lastVisibleCellData = cellData;\n            }\n            newMaxEventCount = Math.max(newMaxEventCount, cellData.renderedEvents.length);\n        });\n        me.maxEventCount = newMaxEventCount;\n        // If we changed maxEventCount, recreate the data\n        if (newMaxEventCount !== maxEventCount) {\n            cellMap.clear();\n            return me.createCellMap(options);\n        }\n        // Have to set this on the last cellData entry which is visible\n        lastVisibleCellData && (lastVisibleCellData.isRowEnd = true);\n        owner?.element.classList.toggle('b-has-allday-events', Boolean(cellMap.size));\n        return cellMap;\n    }\n    collectEvents(options) {\n        // Only the first cell needs overflows flowing into it.\n        // from after that, propagateCellEvents copies events forward\n        options = ObjectHelper.assign({\n            dayTime : this.dayTime\n        }, options, {\n            // Only the first *visible* cell needs overflows flowing into it.\n            // from after that, propagateCellEvents copies events forward, so\n            // the getEvents will use the \"startDate\" index to extract events for a date.\n            getDateIndex : date => date > (this.firstVisibleDate || this.startDate) ? 'startDate' : 'date'\n        });\n        return super.collectEvents(options);\n    }\n    createCellData(date) {\n        const\n            me = this,\n            columnIndex = DH.diff(me.startDate, date, 'day'),\n            visibleColumnIndex = columnIndex;\n        return Object.assign(super.createCellData(date), {\n            visibleColumnIndex,\n            columnIndex,\n            isRowStart : visibleColumnIndex === 0,\n            isRowEnd   : false,\n            // Events can forward-occupy slots if they\n            // overrun their start day.\n            // So the next step is to propagate forward\n            // multi day events into future cells they cover.\n            renderedEvents : new EventSlots()\n        });\n    }\n    get dayStartShift() {\n        return this.dayTime?.startShift ?? this._dayStartShift;\n    }\n    updateDayStartShift(dayStartShift) {\n        // Day number circle needs to be oval to accommodate 00-00\n        this.element.classList.toggle('b-shifted-day', Boolean(dayStartShift));\n        this.dayTime = new DayTime(dayStartShift);\n    }\n    changeDayTime(dayTime) {\n        if (!dayTime) {\n            dayTime = new DayTime(this.dayStartShift);\n        }\n        // Allow DayTime config object to be passed\n        if (!dayTime.isDayTime) {\n            dayTime = new DayTime(dayTime);\n        }\n        if (!this._dayTime?.equals(dayTime)) {\n            return dayTime;\n        }\n    }\n    dayOfDate(date) {\n        return this.dayTime.dayOfDate(date);\n    }\n    updateMinDayWidth(minDayWidth) {\n        const\n            {\n                scrollable,\n                headerScroller\n            }           = this,\n            { element } = scrollable,\n            { style }   = this.element;\n        // Need min-width : 0 to allow the element to shrink\n        style.setProperty('--min-day-width', minDayWidth ? DomHelper.setLength(minDayWidth) : 0);\n        style.setProperty('--cell-container-overflow', minDayWidth ? 'visible' : 'hidden');\n        // Forced synchronous layout here, but we need to ascertain horizontal overflow state\n        if (minDayWidth && element.scrollWidth > element.clientWidth) {\n            // Overflow 'hidden-scroll' is a special Scroller setting.\n            // With overlayed scrollbars it just means 'auto'\n            // With space-consuming scrollbars, it hides scrollbars using CSS while using auto.\n            // But if the two axes scroll, then both scrollbars should not be hidden so it will\n            // fall back to using overflow:hidden and a `wheel` listener.\n            scrollable.overflowX = headerScroller.overflowX = 'hidden-scroll';\n        }\n        else {\n            scrollable.overflowX = headerScroller.overflowX = false;\n        }\n    }\n    updateEventHeight() {\n        // CalendarMixin needs to know first\n        super.updateEventHeight(...arguments);\n        if (!this.autoHeight && !this.isConfiguring && !this.expanded) {\n            this.setEventContentHeight(this.cellContentHeight);\n        }\n    }\n    updateGutterHeight() {\n        if (!this.isConfiguring) {\n            this.setEventContentHeight(this.cellContentHeight);\n        }\n    }\n    get stepUnit() {\n        return this.duration > 1 ? `${this.duration} ${this.L('L{DayView.daysUnit}')}` : this.L('L{DayView.dayUnit}');\n    }\n    updateNonWorkingDays() {\n        this.onVisibleDateRangeChange();\n    }\n    updateHideNonWorkingDays() {\n        super.updateHideNonWorkingDays(...arguments);\n        this.onVisibleDateRangeChange();\n    }\n    // Override from DayCellRenderer\n    // Called automatically on the CellOverflow${overflowPopupTrigger} event because of callOnFunctions\n    onCellOverflowGesture({ date }) {\n        if (expandGestures[this.overflowClickAction.toLowerCase()]) {\n            this.expanded = true;\n        }\n        else {\n            super.onCellOverflowGesture(...arguments);\n        }\n    }\n    onVisibleDateRangeChange() {\n        if (!this.isConfiguring) {\n            this._cellMap?.clear();\n            this.refresh();\n        }\n    }\n    changeAutoHeight(autoHeight) {\n        const\n            me                = this,\n            // Must be cached before property changes. This is calculated in this class\n            { eventsPerCell } = me;\n        // We need to update in the changer because we need to cache conditions that\n        // applied before the change: eventsPerCell\n        me._autoHeight = autoHeight;\n        me.setEventContentHeight(me.cellContentHeight);\n        // Calculates new values for eventsPerCell and eventContainerTop\n        // and handles changes to either.\n        if (!me.isConfiguring) {\n            me.performResizeRefresh(eventsPerCell, me.eventContainerTop, true);\n        }\n    }\n    async setEventContentHeight(eventContentHeight, syncingSiblings) {\n        const\n            me = this,\n            {\n                cellContainer : element,\n                parent\n            }  = me;\n        // Reject non-changes.\n        // This isn't a config because setting it is an async awaitable method.\n        if (me._eventContentHeight !== eventContentHeight) {\n            // Update any smaller sibling rows unless that is what is being done to us\n            if (!syncingSiblings && parent?.isDayView && parent.parent?.isResourceView) {\n                const siblings = parent.parent.items.map(v => v.allDayEvents).filter(v => v && v !== me);\n                // If we are the allDayEvents of a DayView which has siblings, we must consult\n                // all siblings which are not time axes/scrollers and find the max so that we all\n                // stay in sync.\n                // This may be the case in a ResourceView of several DayViews side-by-side.\n                eventContentHeight = Math.max(eventContentHeight || 0, ...siblings.filter(v => !v.owner.isResourceDayViewTimeAxis).map(v => v.calculateCellContentHeight() || 0));\n                siblings?.forEach(v => {\n                    v.setEventContentHeight(eventContentHeight, true);\n                });\n            }\n            const { height : oldHeight }  = me;\n            let { animate } = me;\n            // Set this widget to the animating state if we are configured to animate the height\n            me.isAnimating = animate;\n            // Once we have set the animating flag which sets the CSS class, we can detect any duration\n            const duration = DomHelper.getPropertyTransitionDuration(element, 'height');\n            if (!duration) {\n                me.isAnimating = animate = false;\n            }\n            // Only show the scrollbar when we need to - if there's a space-consuming scrollbar shown.\n            // We pre-change the cell heights in unanimated mode and see if there's overflow so that\n            // we can set overflowY appropriately before the animation is kicked off.\n            // Needs to be at least 1px so that horizontal scrolling can stay in sync\n            element.style.height = `${eventContentHeight || 1}px`;\n            // If it's zero height, the top border will not be shown because this border would collide\n            // with the border-top of the day content element below.\n            me.bodyElement.classList.toggle('b-zero-height', !Boolean(eventContentHeight));\n            if (animate) {\n                await (me.heightAnimation = EventHelper.waitForTransitionEnd({\n                    property : 'height',\n                    element,\n                    duration\n                }));\n            }\n            if (!me.isDestroyed) {\n                const { height } = me;\n                me.isAnimating = false;\n                me._eventContentHeight = eventContentHeight;\n                me.owner?.syncScrollbarPadding?.();\n                /**\n                 * Fires when this CalendarRow has completely changed its height.\n                 * This fires *after* the animation has finished.\n                 * @param {Calendar.widget.CalendarRow} source The triggering instance.\n                 * @param {Number} oldHeight The old height.\n                 * @param {Number} height The new height.\n                 * @event heightChange\n                 */\n                if (height !== oldHeight) {\n                    me.trigger('heightChange', {\n                        height,\n                        oldHeight\n                    });\n                }\n            }\n        }\n    }\n    get hasOverflow() {\n        return !this.autoHeight && this.maxEventCount > this.defaultEventRowCount;\n    }\n    get eventsPerCell() {\n        const\n            me = this,\n            { maxEventCount } = me;\n        return (me.expanded || me.autoHeight) ? maxEventCount : Math.min(maxEventCount, me.defaultEventRowCount);\n    }\n    get cellContentHeight() {\n        return this.calculateCellContentHeight();\n    }\n    calculateCellContentHeight() {\n        // The minHeight must accommodate at least one row, but by default, defaultEventRowCount rows of events.\n        // The all day section is expandable. If autoHeight, the minHeight must accommodate all events.\n        const\n            me = this,\n            { gutterHeight } = me;\n        let result = Math.ceil(me.eventContainerTop + me.eventsPerCell * (me.eventHeightInPixels + me.eventSpacing));\n        // Allow gutterHeight : 1em to result in a 'calc(100px + 5em)' type value\n        if (gutterHeight) {\n            // The gutter is *instead of* the ${eventSpacing}px below the last event\n            if (me.eventsPerCell) {\n                result -= me.eventSpacing;\n            }\n            if (isNaN(gutterHeight)) {\n                result = `calc(${result}px + ${gutterHeight})`;\n            }\n            else {\n                result += Number(gutterHeight);\n            }\n        }\n        return result;\n    }\n    getDateFromPosition(clientX, clientY, local = false, keyParser) {\n        const\n            me         = this,\n            {\n                eventContentElement\n            }          = me,\n            rowRect    = eventContentElement.getBoundingClientRect(),\n            dx         = me.rtl ? rowRect.right - clientX : clientX - rowRect.left,\n            width      = eventContentElement.scrollWidth,\n            // We have to compare element position because day columns may have different widths\n            overCell   = me.getDayElementFromX(clientX);\n        if (dx < 0 || width < dx || clientY < rowRect.top || rowRect.bottom < clientY) {\n            return null;\n        }\n        return me.getDateFromElement(overCell, keyParser);\n    }\n    /**\n     * If not {@link #config-autoHeight}, this toggles between the collapsed state where it shows\n     * the {@link #config-defaultEventRowCount} even if more event rows exist, and the expanded state\n     * (which is equivalent to {@link #config-autoHeight}) where all event rows are shown.\n     */\n    async toggleExpandCollapse() {\n        const { expanded } = this;\n        // Do not go through the setter because this method is async and needs to be awaited\n        await this.updateExpanded(!Boolean(expanded), expanded);\n    }\n    async updateExpanded(expanded, wasExpanded) {\n        const me = this;\n        // Temporarily set the property so that eventsPerCell yields the \"from\" count.\n        me._expanded = wasExpanded;\n        const { eventsPerCell } = me;\n        me._expanded = expanded;\n        // If we are expanding, a refresh will update the height *after* the refresh\n        // which is what we want: it will \"reveal\" existing event bars\n        if (me.expanded) {\n            // If not yet visible, this will be called on paint.\n            if (me.isVisible) {\n                me.performResizeRefresh(eventsPerCell, me.eventContainerTop, true);\n                await me.heightAnimation;\n            }\n        }\n        // If we are collapsing however, we want to hide the overflowing event bars\n        // and *only then* refresh to cut the event bars back.\n        else {\n            me.scrollable.overflowY = 'hidden';\n            await me.setEventContentHeight(me.cellContentHeight);\n            // Calculates new values for eventsPerCell and eventContainerTop\n            // and handles changes to either.\n            if (wasExpanded && !me.isDestroyed) {\n                me.performResizeRefresh(eventsPerCell, me.eventContainerTop, true);\n            }\n        }\n    }\n    get visibleDateHeaders() {\n        const me = this;\n        let firstDate, lastDate;\n        if (me.fullWeek) {\n            firstDate = me.month.getWeekStart(me.month.getWeekNumber(me.startDate));\n            while (me.hiddenNonWorkingDays[firstDate.getDay()]) {\n                firstDate.setDate(firstDate.getDate() + 1);\n            }\n            lastDate = DH.add(firstDate, 6, 'd');  // inclusive\n            while (me.hiddenNonWorkingDays[lastDate.getDay()]) {\n                lastDate.setDate(lastDate.getDate() - 1);\n            }\n        }\n        else {\n            firstDate = me.firstVisibleDate;\n            lastDate = me.lastVisibleDate;\n        }\n        return [firstDate, lastDate];\n    }\n    // We must implement the CalendarMixin interface.\n    // All views must expose a doRefresh method.\n    doRefresh() {\n        this._cellMap?.clear();\n        const\n            me             = this,\n            {\n                dayTime,\n                fullWeek,\n                startDate,\n                endDate,\n                headerCellContainer,\n                cellContainer,\n                dayHeaderRenderer,\n                hiddenNonWorkingDays,\n                hideEmptyDays,\n                owner\n            } = me,\n            [from, to]     = me.visibleDateHeaders,\n            cellMap        = (startDate || endDate) && me.cellMap,\n            nonWorkingDays = me.nonWorkingDays ?? me.month.nonWorkingDays,\n            cellDataBlocks = [],\n            eventCells     = [],\n            headerCells    = [];\n        if (!cellMap) {\n            return;\n        }\n        let columnIndex = 0,\n            visibleColumnIndex = 0,\n            currentDay, i, lastWorkingDayCell;\n        // Collect all our cell data blocks and measure our week length\n        // Note: \"!(to < date)\" ==> \"date <= to\" but works for Date since they are never ==\n        for (const date = from; !(to < date); date.setDate(date.getDate() + 1), columnIndex++) {\n            const\n                cellData     = cellMap.get(dayTime.dateKey(date)) || me.createCellData(date),\n                { day, key } = cellData,\n                dayEvents    = hideEmptyDays && (owner ? owner.getEventsForDay(key, me.startDate) : cellData.renderedEvents),\n                skipDay      = hideEmptyDays && !dayEvents?.length;\n            // There'll be no cell if it's a hidden, nonworking day or an empty date that we are hiding\n            if (!(hiddenNonWorkingDays[day] || skipDay)) {\n                cellData.columnIndex = cellData.cellIndex = columnIndex++;\n                cellData.isRowStart = visibleColumnIndex === 0;\n                cellData.visibleColumnIndex = visibleColumnIndex;\n                if (!fullWeek) {\n                    visibleColumnIndex++;\n                }\n                cellDataBlocks.push(cellData);\n            }\n        }\n        // Needed for event bar %age width calculation in getCellDomConfig\n        me.weekLength = fullWeek ? 1 : visibleColumnIndex;\n        const length = cellDataBlocks.length;\n        for (i = 0; i < length; i++) {\n            const\n                cellData     = cellDataBlocks[i],\n                { day, key } = cellData,\n                isNonWorking = nonWorkingDays[day],\n                dayCls       = `b-day-of-week-${day}`;\n            currentDay = !(cellData.date - me.date);\n            cellData.cell = me.getCell(key);\n            // The contract of DayCellRenderer is defined in Core/widget/CalendarPanel.\n            cellData.row = me.cellContainer;\n            const cellDomConfig = me.getCellDomConfig(cellData);\n            // Falsy means omit the column\n            if (cellDomConfig) {\n                const headerDomConfig = Objects.merge({\n                    dataset : {\n                        // The [data-date] property marks an event content cell.\n                        headerDate : key\n                    }\n                }, cellDomConfig.children[0]);\n                headerDomConfig.className['b-selected-date'] = currentDay;\n                headerDomConfig.className['b-current-date']  = fullWeek && currentDay;\n                headerDomConfig.className[dayCls]            = 1;\n                // Show the dayHeaderRenderer the day header domConfig\n                dayHeaderRenderer && me.callback(dayHeaderRenderer, me, [headerDomConfig, cellData]);\n                cellDomConfig.dataset.date = key;\n                Object.assign(cellDomConfig.className, {\n                    'b-dayview-allday'    : 1,\n                    [me.nonWorkingDayCls] : isNonWorking,\n                    [me.weekendCls]       : DH.weekends[day],\n                    [me.dayCellCls]       : 1,\n                    [dayCls]              : 1\n                });\n                // Remove header child from cell config\n                cellDomConfig.children.shift();\n                headerCells.push(headerDomConfig);\n                if (!fullWeek || currentDay) {\n                    eventCells.push(cellDomConfig);\n                    if (!isNonWorking) {\n                        lastWorkingDayCell = cellDomConfig;\n                    }\n                }\n            }\n        }\n        // Identify last working day in row if there were any.\n        lastWorkingDayCell && (lastWorkingDayCell.className['b-last-working-day'] = 1);\n        DomSync.sync({\n            targetElement : headerCellContainer,\n            domConfig     : {\n                children : headerCells,\n                // Ensure DOM order matches children order.\n                syncOptions : {\n                    releaseThreshold : 0,\n                    strict           : true\n                }\n            }\n        });\n        DomSync.sync({\n            targetElement : cellContainer,\n            domConfig     : {\n                children : eventCells,\n                // Ensure DOM order matches children order.\n                syncOptions : {\n                    releaseThreshold : 0,\n                    strict           : true\n                }\n            }\n        });\n        me.refreshCount = (me.refreshCount || 0) + 1;\n        // Must only ever be a temporary state to accommodate dropping into an empty row.\n        // As soon as a refresh happens, the state must be revoked.\n        me.collapseGutter();\n        // Needs day elements to be in place before this can be measured and fixed.\n        me.setEventContentHeight(me.cellContentHeight);\n        /**\n         * Fires when this CalendarRow refreshes.\n         * @param {Calendar.widget.CalendarRow} source The triggering instance.\n         * @event refresh\n         */\n        me.trigger('refresh');\n    }\n    get eventContainerTop() {\n        return 0;\n    }\n    async expandGutter() {\n        const me = this;\n        if (!me._isTemporarilyExpanded) {\n            me.gutterHeight = (me.gutterHeight || 0) + me.eventHeightInPixels + me.eventSpacing;\n            await me.setEventContentHeight(me.cellContentHeight);\n            me._isTemporarilyExpanded = true;\n        }\n    }\n    async collapseGutter() {\n        const me = this;\n        if (me._isTemporarilyExpanded) {\n            me.gutterHeight = me.gutterHeight - (me.eventHeightInPixels + me.eventSpacing);\n            await me.setEventContentHeight(me.cellContentHeight);\n            me._isTemporarilyExpanded = false;\n        }\n    }\n    // addCellHeaderContent mutates the cellHeader DomConfig block.\n    // And if we are to have a day name element, returns the DomConfig for it.\n    // It's called from DayCellRenderer#getCellDomConfig\n    addCellHeaderContent(cellHeader, cellData) {\n        const\n            me  = this,\n            { date, day, tomorrow }  = cellData,\n            { dayNameFormat, dayNumberCompress, daySeparator } = me,\n            shifted = me?.dayTime?.startShift;\n        cellHeader.children = [{\n            className : `b-day-name-part b-day-name-day${dayNumberCompress ? ' b-day-name-short' : ''}`,\n            html      : formatDayPart(dayNameFormat, daySeparator[0], date, shifted && tomorrow)\n        }, {\n            className : `b-day-name-part b-day-name-date`,\n            html      : formatDayPart(me.dayNumberFormat, daySeparator[1], date, shifted && tomorrow, dayNumberCompress)\n        }];\n        cellHeader.className[me.nonWorkingDayCls] = cellData.isNonWorking;\n        cellHeader.className[me.weekendCls] = DH.weekends[day];\n    }\n    updateLocalization() {\n        if (!this.isConfiguring) {\n            this.refresh();\n        }\n        super.updateLocalization();\n    }\n    updateFullWeek() {\n        if (!this.isConfiguring) {\n            this.refresh();\n        }\n    }\n}\nCalendarRow.initClass();\nCalendarRow._$name = 'CalendarRow';", "import CalendarRow from './CalendarRow.js';\nimport FunctionHelper from '../../Core/helper/FunctionHelper.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\n/**\n * @module Calendar/widget/DaySelector\n */\n/**\n * This is used as the day selector header in an {@link Calendar.widget.EventList}\n * or {@link Calendar.widget.DayView}. It should not be used standalone as a regular Widget.\n *\n * @internal\n * @extends Calendar/widget/CalendarRow\n * @classtype dayselector\n */\nexport default class DaySelector extends CalendarRow {\n    static $name = 'DaySelector';\n    // Factoryable type name\n    static type = 'dayselector';\n    static configurable = {\n        readOnly   : true,\n        autoCreate : false,\n        flex       : '0 0 auto',\n        dock       : 'top'\n    };\n    afterConfigure() {\n        const\n            me        = this,\n            { owner } = me;\n        super.afterConfigure();\n        owner.scrollable?.ion({\n            overflowChange : 'onOwnerOverflowChange',\n            thisObj        : me\n        });\n        // We take over our owner's descriptionRenderer\n        owner.descriptionRenderer = me.descriptionRenderer.bind(me);\n        // We take over control over our owner's next and previous methods.\n        // \"this\" within these functions will refer to the owner widget\n        owner.previous = function() {\n            this.date = DateHelper.add(owner.date, -owner.duration, 'd');\n        };\n        owner.next = function() {\n            this.date = DateHelper.add(owner.date, owner.duration, 'd');\n        };\n        // We need to update ourselves in sync with our owner's date\n        FunctionHelper.before(owner, 'updateDate', this.beforeOwnerDateUpdate, this);\n    }\n    beforeOwnerDateUpdate(date) {\n        this.date = date;\n    }\n    onOwnerOverflowChange({ y }) {\n        this.headerElement.classList.toggle('b-show-yscroll-padding', Boolean(y));\n    }\n    onDayNumberClick({ date }) {\n        if (this.owner) {\n            this.owner.date = date;\n        }\n        // No further navigation must take place. Note that this is not a scheduleClick - this\n        // widget is merely a slave of its owning Calendar widget. This is an internal gesture\n        // which sets the owning Calendar widget's date.\n        return false;\n    }\n    descriptionRenderer() {\n        const\n            {\n                startDate,\n                endDate,\n                owner\n            }          = this,\n            startMonth = startDate.getMonth(),\n            endMonth   = endDate.getMonth(),\n            monthDesc  = startMonth === endMonth ? DateHelper.format(startDate, 'MMMM') : `${DateHelper.format(startDate, 'MMM')} - ${DateHelper.format(endDate, 'MMM')}`,\n            week       = owner.month.getWeekNumber(startDate);\n        return `${this.L('L{Object.Week}')} ${week[1]}, ${monthDesc} ${week[0]}`;\n    }\n}\nDaySelector.initClass();\nDaySelector._$name = 'DaySelector';", "import Base from '../../../Core/Base.js';\nimport DaySelector from '../DaySelector.js';\n/**\n * @module Calendar/widget/mixin/DaySelectable\n */\n/**\n * Mixin that provides the ability to add a {@link Calendar.widget.DaySelector} as a\n * {@link Core.widget.Panel#config-tbar}.\n *\n * This is used by the {@link Calendar.widget.EventList} and also {@link Calendar.widget.DayView} to\n * optionally be able to show a day selector row docked at the top.\n *\n * @mixin\n */\nexport default Target => class DaySelectable extends (Target || Base) {\n    static get $name() {\n        return 'CalendarMixin';\n    }\n    static get configurable() {\n        return {\n            /**\n             * If {@link #config-daySelector} is set, then this will be an instance\n             * of {@link Calendar.widget.DaySelector} which encapsulates the day selector at the top\n             * of this view.\n             * @member {Calendar.widget.DaySelector} daySelector\n             * @readonly\n             * @internal\n             */\n            /**\n             * A Configure this as `true` to show a {@link Calendar.widget.DaySelector} docked at the top to\n             * act as a day selector. By default, the DaySelector will be seven days in duration and locked\n             * to start a the `weekStartDay`\n             * @config {Boolean|DaySelectorConfig}\n             * @internal\n             */\n            daySelector : null\n        };\n    }\n    changeDaySelector(daySelector, oldDaySelector) {\n        const me = this;\n        if (daySelector) {\n            // Whatever we are mixed into, it's because it is showing only one day.\n            me.range = '1 day';\n            // In case we are mixed into an EventList.\n            me.settings = null;\n            me.hideHeaders = true;\n            const\n                startDate = me.dayTime.shiftDate(me.month.getWeekStart(me.month.getWeekNumber(me.startDate))),\n                result    = DaySelector.reconfigure(oldDaySelector, daySelector, {\n                    owner    : me,\n                    defaults : {\n                        type     : 'dayselector',\n                        calendar : me.calendar,\n                        parent   : me,\n                        cls : {\n                            [`b-${me.type}-dayselector`] : 1\n                        },\n                        dayStartShift      : me.dayStartShift,\n                        dayTime            : me.dayTime,\n                        month              : me.month,\n                        date               : me.date,\n                        startDate,\n                        range              : { magnitude : 1, unit : 'week' },\n                        hideNonWorkingDays : me.hideNonWorkingDays,\n                        nonWorkingDays     : me.nonWorkingDays,\n                        nonWorkingDayCls   : me.nonWorkingDayCls,\n                        weekendCls         : me.weekendCls,\n                        weekStartDay       : me.weekStartDay\n                    }\n                });\n            me.element.classList.add(`b-${me.type}-with-dayselector`);\n            me.tbar = result;\n            return result;\n        }\n        else {\n            oldDaySelector?.destroy();\n        }\n    }\n    //region Current config\n    getCurrentConfig(options) {\n        const result = super.getCurrentConfig(options);\n        // Internal matter\n        delete result.daySelector;\n        return result;\n    }\n    //endregion\n};\n", "import DateHelper from '../../Core/helper/DateHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport Toast from '../../Core/widget/Toast.js';\nimport Grid from '../../Grid/view/Grid.js';\nimport CalendarMixin from '../../Calendar/widget/mixin/CalendarMixin.js';\nimport '../../Grid/column/DateColumn.js';\nimport '../../Core/widget/DateTimeField.js';\nimport Store from '../../Core/data/Store.js';\nimport Button from '../../Core/widget/Button.js';\nimport Config from '../../Core/Config.js';\nimport DayCellCollecter from './mixin/DayCellCollecter.js';\nimport DaySelectable from './mixin/DaySelectable.js';\nimport DateRangeOwner from './mixin/DateRangeOwner.js';\nimport Collection from '../../Core/util/Collection.js';\n/**\n * @module Calendar/widget/EventList\n */\nconst\n    byStartDate  = (lhs, rhs) => lhs.startDate.valueOf() - rhs.startDate.valueOf(),\n    mergeColumns = (configuredColumns, defaultColumns) => {\n        if (defaultColumns) {\n            // Support  columns : { data : { name : { field : 'name', text : 'Name' }}}\n            // or       columns : { data : [{ field : 'name', text : 'Name' }] }\n            configuredColumns = configuredColumns.data || configuredColumns;\n            // Object form { name : { field : 'name', text : 'Name' }}\n            if (ObjectHelper.isObject(configuredColumns)) {\n                const result = defaultColumns.slice();\n                for (const id in configuredColumns) {\n                    const\n                        newColumn = configuredColumns[id],\n                        // Match incoming column with existing by field name if there, or, if not, by name\n                        matchIndex = result.findIndex(c => c.id === id || c.field === id);\n                    // Configuration wants to add or override matched column\n                    if (newColumn) {\n                        const v = Config.merge(newColumn, result[matchIndex]);\n                        // So that it can be looked up in future merges\n                        v.id = id;\n                        result[matchIndex === -1 ? result.length : matchIndex] = v;\n                    }\n                    // Configuration wants to remove matched column\n                    else if (matchIndex > -1) {\n                        result.splice(matchIndex, 1);\n                    }\n                }\n                return result;\n            }\n            // Array form  [{ field : 'name', text : 'Name' }]\n            else {\n                defaultColumns = new Collection({\n                    values     : defaultColumns,\n                    idProperty : 'field'\n                });\n                // Iterate the configured column set\n                for (let i = 0, { length } = configuredColumns; i < length; i++) {\n                    const\n                        newColumn             = configuredColumns[i],\n                        matchedExistingColumn = defaultColumns.get(newColumn.field);\n                    // Configuration wants to override matched column\n                    if (matchedExistingColumn) {\n                        configuredColumns[i] = Config.merge(newColumn, matchedExistingColumn);\n                        defaultColumns.remove(matchedExistingColumn);\n                    }\n                }\n                // Now append the remaining default columns\n                configuredColumns.push(...defaultColumns.values);\n                return configuredColumns;\n            }\n        }\n        else {\n            return configuredColumns;\n        }\n    };\n/**\n * A Grid view of the EventStore.\n *\n * This shows a configured range of events from the event store.\n *\n * When used as a {@link Calendar.view.Calendar#config-modes mode} of a Calendar, the configured\n * {@link #config-range} is snapped to encapsulate the Calendar's current\n * {@link Calendar.view.Calendar#config-date}.\n *\n * If configured with an explicit {@link #config-startDate} and {@link #config-endDate}, the\n * {@link #config-range} is not used. When setting the {@link #property-date}, the duration\n * of the configured range is preserved, but the range is shifted backwards or forwards in time\n * just enough to bring the passed `Date` into view.\n *\n * The EventList's header context menu is extended to allow the user to change the range type. This\n * may be disabled by configuring the {@link #config-listRangeMenu} as `null`.\n *\n * For further information about features available to be configured directly into `EventList`\n * calendar views, see the {@link Grid.view.Grid} documentation and the associated examples.\n *\n * {@inlineexample Calendar/widget/ListView.js}\n *\n * @demo Calendar/listview\n *\n * @extends Grid/view/Grid\n * @mixes Core/widget/mixin/Responsive\n * @mixes Calendar/widget/mixin/CalendarMixin\n * @mixes Calendar/widget/mixin/DayCellCollecter\n * @mixes Calendar/widget/mixin/DateRangeOwner\n * @classtype eventlist\n  */\nexport default class EventList extends Grid.mixin(CalendarMixin, DayCellCollecter, DaySelectable, DateRangeOwner) {\n    static get $name() {\n        return 'EventList';\n    }\n    static get type() {\n        return 'eventlist';\n    }\n    static get configurable() {\n        return {\n            preserveScrollOnDatasetChange : true,\n            cls : 'b-slide-vertical',\n            eventFilter : null,\n            localizableProperties : ['title', 'text'],\n            title : 'L{List}',\n            range : '1 month',\n            // We have a Month utility object.\n            // It helps us with week values and week change events\n            month : true,\n            /**\n             * Column definitions to add to the default columns, or column definitions which override\n             * the provided, default columns.\n             *\n             * By default, the `EventList` shows three columns:\n             *\n             * ```javascript:\n             * columns : [{\n             *     text  : 'Name',\n             *     field : 'name'\n             * }, {\n             *     text  : 'Start',\n             *     field : 'startDate'\n             * }, {\n             *     text  : 'End',\n             *     field : 'endDate'\n             * }]\n             * ```\n             *\n             * Your `columns` config is appended to the default columns *unless you provide\n             * columns for the `name`, `startDate` and `endDate` fields*, in which case your\n             * column definitions are merged into the default column definitions.\n             *\n             * In this way you can provide a `renderer` for the default columns, or otherwise\n             * configure them in a customizable way.\n             *\n             * You can also supply columns keyed by field, to reconfigure / remove / add similar to how you would manage\n             * items in containers and menus:\n             *\n             * ```javascript\n             * columns : {\n             *   // Remove the name column\n             *   name : null,\n             *   // Change the format of the startDate column\n             *   startDate : {\n             *      format : 'YYYY'\n             *   },\n             *   // Add a description column\n             *   description : {\n             *      renderer : ({ record }) => record.description.substring(0, 10)\n             *   }\n             * }\n             * ```\n             *\n             * @config {Object<String,GridColumnConfig>|GridColumnConfig[]}\n             */\n            columns : {\n                $config : {\n                    // Columns with matching field names are merged.\n                    // Non-matching columns are added\n                    merge : mergeColumns\n                },\n                value : [{\n                    text  : 'L{EventEdit.Name}',\n                    field : 'name',\n                    flex  : 1\n                }, {\n                    text   : 'L{EventList.Start}',\n                    //type       : 'startDate', // When column is hoisted from Gantt to Scheduler\n                    type   : 'date',\n                    editor : {\n                        type      : 'datetime',\n                        dateField : {\n                            step : null\n                        },\n                        timeField : {\n                            step : null\n                        }\n                    },\n                    field  : 'startDate',\n                    width  : '16.5em',\n                    format : 'L LT',\n                    renderer({ record, value }) {\n                        return record.allDay ? DateHelper.format(value, 'L') : this.defaultRenderer(...arguments);\n                    }\n                }, {\n                    text   : 'L{EventList.Finish}',\n                    //type       : 'endDate', // When column is hoisted from Gantt to Scheduler\n                    type   : 'date',\n                    editor : {\n                        type      : 'datetime',\n                        dateField : {\n                            step : null\n                        },\n                        timeField : {\n                            step : null\n                        }\n                    },\n                    field  : 'endDate',\n                    width  : '16.5em',\n                    format : 'L LT',\n                    renderer({ record, value }) {\n                        return record.allDay ? DateHelper.format(value, 'L') : this.defaultRenderer(...arguments);\n                    }\n                }, {\n                    type       : 'widget',\n                    text       : 'Resources',\n                    field      : 'resources',\n                    minWidth   : 250,\n                    autoHeight : true,\n                    widgets    : [{\n                        type           : 'chipview',\n                        valueProperty  : 'items',\n                        displayField   : 'name',\n                        itemsFocusable : false,\n                        navigator      : null,\n                        closable       : false,\n                        style          : {\n                            flexFlow : 'row nowrap',\n                            display  : 'flex',\n                            padding  : '5px 0 3px 0'\n                        },\n                        scrollable : {\n                            overflowX : 'hidden-scroll',\n                            overflowY : false\n                        },\n                        getItemCls   : r => DomHelper.isNamedColor(r.eventColor) ? ` b-sch-${r.eventColor}` : '',\n                        getItemStyle : r => `color:#fff;${r.eventColor && !DomHelper.isNamedColor(r.eventColor) ? `background-color:${r.eventColor}` : ''}`\n                    }],\n                    editor : false\n                }]\n            },\n            features : {\n                group        : false,\n                rowCopyPaste : false,\n                columnPicker : {\n                    createColumnsFromModel : true\n                }\n            },\n            internalListeners : {\n                beforeCellEditStart({ editorContext }) {\n                    const { editor, record } = editorContext;\n                    if (record.isRecurring || record.isOccurrence) {\n                        Toast.show({\n                            html : 'Please use EventEdit to edit recurring events'\n                        });\n                        return false;\n                    }\n                    // Hide event tooltip if present.\n                    this.calendar?.features.eventTooltip?._tooltip?.hide();\n                    editor.timeField?.[record.allDay ? 'hide' : 'show']();\n                }\n            },\n            settings : {\n                $config : 'lazy',\n                value   : null\n            },\n            /**\n             * A {@link Core.widget.Menu#configs MenuConfig} block which configures the {@link #property-listRangeMenu} property which\n             * is the range choosing menu provided which by default selects one of the following:\n             * - day\n             * - week\n             * - month\n             * - year\n             * - decade\n             *\n             * This may be used to either reconfigure that menu, or, by configuring it as `null`, could remove\n             * the menu entirely if the date range of this view is controlled by other means.\n             *\n             * The individual range menu items are under the `items` property and have the following\n             * property names:\n             * - `listRangeDayItem`\n             * - `listRangeWeekItem`\n             * - `listRangeMonthItem`\n             * - `listRangeYearItem`\n             * - `listRangeDecadeItem`\n             *\n             * These may be reconfigured:\n             *\n             * ```javascript\n             * calendar = new Calendar({\n             *     ...\n             *     modes : {\n             *         agenda : {\n             *             listRangeMenu : {\n             *                 items : {\n             *                     // We don't want the decade range option\n             *                     listRangeDecadeItem : null\n             *                 }\n             *             }\n             *         }\n             *     }\n             * });\n             * ```\n             *\n             * @config {MenuConfig} listRangeMenu\n             */\n            listRangeMenu : {\n                $config : 'lazy',\n                value   : {\n                    anchor : true,\n                    items  : {\n                        listRangeDayItem : {\n                            range : 'day',\n                            text  : 'L{EventEdit.day}',\n                            _unit : 'day'\n                        },\n                        listRangeWeekItem : {\n                            range : 'week',\n                            text  : 'L{EventEdit.week}',\n                            _unit : 'week'\n                        },\n                        listRangeMonthItem : {\n                            range : 'month',\n                            text  : 'L{EventEdit.month}',\n                            _unit : 'month'\n                        },\n                        listRangeYearItem : {\n                            range : 'year',\n                            text  : 'L{EventEdit.year}',\n                            _unit : 'year'\n                        },\n                        listRangeDecadeItem : {\n                            range : 'decade',\n                            text  : 'L{EventEdit.decade}',\n                            _unit : 'decade'\n                        }\n                    }\n                }\n            },\n            /**\n             * A {@link Core.helper.DateHelper} format string used to format the time displayed\n             * next to event bars in the custom columns which {@link Calendar.widget.EventList}\n             * based views use - {@link Calendar.widget.EventList} and {@link Calendar.widget.AgendaView}.\n             * @config {String}\n             * @default\n             */\n            eventListTimeFormat : 'HH:mm'\n        };\n    }\n    /**\n     * Returns the resource associated with this event list when used inside a {@link Calendar.widget.ResourceView}\n     * @readonly\n     * @member {Scheduler.model.ResourceModel} resource\n     */\n    static get delayable() {\n        return {\n            populateStoreSoon : {\n                type              : 'raf',\n                cancelOutstanding : true\n            }\n        };\n    }\n    construct(...args) {\n        const\n            me           = this,\n            featuresProp = ObjectHelper.getPropertyDescriptor(this, 'features');\n        // Enable print feature on EventList view if it was configured directly or on the calendar\n        Object.defineProperty(me, 'features', {\n            get : () => {\n                return featuresProp.get.call(this) || {};\n            },\n            set : features => {\n                if (features === true) {\n                    features = {};\n                }\n                if (!features.print) {\n                    features.print = Boolean(this.calendar?.features.print);\n                }\n                featuresProp.set.call(this, features);\n            },\n            configurable : true\n        });\n        super.construct(...args);\n    }\n    // We must implement the CalendarMixin interface.\n    // All views must expose a doRefresh method.\n    doRefresh() {\n        this.refreshRows();\n    }\n    // Returns true is this EventList encapsulates this date\n    containsDate(date) {\n        const dateContainmentFn = this.range ? 'betweenLesser' : 'betweenLesserEqual';\n        return DateHelper[dateContainmentFn](date, this.startDate, this.endDate);\n    }\n    /**\n     * This method produces the event time details next to the event bar in\n     * {@link Calendar.widget.EventList} and {@link Calendar.widget.AgendaView}\n     * as a {@link DomConfig} object.\n     *\n     * The content is encapsulated in an element with CSS class `b-cal-eventlist-event-time`.\n     * For multi day events, the ending date is shown. For intra-day events, the start and end\n     * times are shown.\n     * @param {Scheduler.model.EventModel} eventRecord\n     * @returns {DomConfig}\n     */\n    eventListEventTimeRenderer(eventRecord) {\n        const\n            me         = this,\n            daySpan    = DateHelper.diff(DateHelper.clearTime(eventRecord.startDate), DateHelper.clearTime(eventRecord.endDate), 'day'),\n            timeString = me.eventTimeRenderer ? me.callback(me.eventTimeRenderer, me, arguments)\n                : daySpan > 1\n                    ? me.L('L{Calendar.endsOn}', DateHelper.format(eventRecord.endDate, 'DD MMM'))\n                    : eventRecord.allDay\n                        ? me.L('L{Calendar.allDay}')\n                        : `${DateHelper.format(eventRecord.startDate, me.eventListTimeFormat)} - ${DateHelper.format(eventRecord.endDate, me.eventListTimeFormat)}`;\n        return {\n            className : {\n                'b-cal-eventlist-event-time' : 1\n            },\n            text : timeString\n        };\n    }\n    /**\n     * This method produces the date details block in {@link Calendar.widget.AgendaView} cells\n     * as a {@link DomConfig} object.\n     *\n     * The content is encapsulated in an element with CSS class `b-cal-agenda-date`.\n     * @param {Date} date\n     * @returns {DomConfig}\n     */\n    agendaEventDateRenderer(date) {\n        return {\n            className : {\n                'b-day-name'        : 1,\n                'b-cal-agenda-date' : 1,\n                'b-today'           : !Boolean(DateHelper.clearTime(new Date()) - DateHelper.clearTime(date))\n            },\n            children : [{\n                className : {\n                    'b-cal-agenda-date-date-number' : 1\n                },\n                text : date.getDate()\n            }, {\n                className : {\n                    'b-cal-agenda-date-date-text' : 1\n                },\n                children : [{\n                    text : DateHelper.format(date, 'dddd')\n                }, {\n                    text : DateHelper.format(date, 'MMM YYYY')\n                }]\n            }]\n        };\n    }\n    // Override because our Featurable mixin which comes before GridBase sets features to null\n    // to destroy them, so we must ensure the inherited Grid features are cleaned up.\n    destroy() {\n        for (const feature of Object.values(this.features)) {\n            feature.destroy?.();\n        }\n        super.destroy();\n    }\n    populateHeaderMenu({ items }) {\n        const { listRangeMenu : menu } = this;\n        if (menu) {\n            items.listRangeItem = {\n                weight : -1000,\n                icon   : 'b-icon-calendar-week',\n                text   : 'List Range',\n                menu\n            };\n        }\n        super.populateHeaderMenu(...arguments);\n    }\n    refreshVirtualScrollbars() {\n        super.refreshVirtualScrollbars();\n        // Our floating settings button needs to be inset a little more if there is a visible scrollbar\n        this.bodyElement.classList[DomHelper.scrollBarWidth && this.hasVerticalOverflow ? 'add' : 'remove']('b-has-scrollbar');\n    }\n    /**\n     * This property yields a {@link Core.widget.Menu} config object which encapsulates the range choices\n     * which this widget may be set to encapsulate:\n     * - day\n     * - week\n     * - month\n     * - year\n     * - decade\n     *\n     * By default a `list` view adds these choices to the header context menu.\n     * An `agenda` view creates a floating settings button which offers this menu.\n     * The property may be used to create a custom UI for changing the range.\n     * The value yielded by the default `get listRangeMenu()` implementation looks like this:\n     *\n     *```javascript\n     * {\n     *     items : {\n     *         listRangeDayItem    : {config for DAY range menu item },\n     *         listRangWeekItem    : {config for WEEK range menu item },\n     *         listRangMonthItem   : {config for MONTH range menu item },\n     *         listRangeYearItem   : {config for YEAR range menu item },\n     *         listRangeDecadeItem : {config for DECADE range menu item }\n     *     }\n     * }\n     *```\n     *\n     * A subclass can override `get listRangeMenu()` and mutate the object returned by the `super` call.\n     *\n     * For example, it could `delete` properties of the `items` block to limit which ranges may be selected.\n     *\n     * @member {MenuConfig} listRangeMenu\n     * @readonly\n     */\n    changeListRangeMenu(listRangeMenu) {\n        if (listRangeMenu) {\n            const\n                me          = this,\n                toggleGroup = `${me.id}-range-items`;\n            listRangeMenu = ObjectHelper.merge({\n                onToggle : e => {\n                    if (e.checked) {\n                        me.range = e.item.range;\n                        e.bubbles = false;\n                    }\n                    // We may lose or gain a scrollbar which will move the button\n                    if (DomHelper.scrollBarWidth) {\n                        e.menu.realign();\n                    }\n                },\n                items : {\n                    listRangeDayItem : {\n                        toggleGroup\n                    },\n                    listRangeWeekItem : {\n                        toggleGroup\n                    },\n                    listRangeMonthItem : {\n                        toggleGroup\n                    },\n                    listRangeYearItem : {\n                        toggleGroup\n                    },\n                    listRangeDecadeItem : {\n                        toggleGroup\n                    }\n                }\n            }, listRangeMenu);\n            return listRangeMenu;\n        }\n    }\n    get listRangeMenu() {\n        const\n            me            = this,\n            listRangeMenu = me._listRangeMenu;\n        if (listRangeMenu) {\n            for (const i of Object.values(listRangeMenu.items)) {\n                if (i) {\n                    i.checked = i._unit === me.range?.unit;\n                }\n            }\n        }\n        return listRangeMenu;\n    }\n    updateRowManager(rowManager) {\n        super.updateRowManager?.(...arguments);\n        // Make sure rows which represent EventModels have [data-event-id=\"?\"] stamped into them.\n        rowManager.ion({\n            beforeRenderRow : 'onBeforeRenderRow',\n            thisObj         : this\n        });\n    }\n    onBeforeRenderRow({ row, record }) {\n        const\n            { _elementsArray } = row,\n            { id, startDate }  = record;\n        if (record.isSpecialRow) {\n            // If it's a group header, cleanse it of any connection to an eventRecord\n            row.eachElement(e => delete e.dataset.eventId);\n        }\n        // Only if it represents an EventModel.\n        // In AgendaView, there are event bars with the event id, and the cells encapsulate dates.\n        else if (record.isEventModel) {\n            for (let i = 0, { length } = _elementsArray; i < length; i++) {\n                _elementsArray[i].dataset.eventId = id;\n                _elementsArray[i].dataset.date = DateHelper.makeKey(startDate);\n            }\n            row.cls[`b-day-of-week-${startDate.getDay()}`] = 1;\n        }\n    }\n    // Scheduler interface usually routes this to handleEvent.\n    // If we're a Grid, GridElementEvents routes events to handleEvent, so override it to do nothing.\n    // Otherwise keydown events would be handled twice\n    onInternalKeyDown(domEvent) {}\n    handleEvent(domEvent) {\n        // Don't cause scroll when clicking in event list\n        this.preventScroll = true;\n        super.handleEvent(domEvent);\n        this.preventScroll = false;\n    }\n    get displayName() {\n        let s = this.title;\n        if (typeof s !== 'string') {\n            s = this.type;\n        }\n        return StringHelper.capitalize(s);\n    }\n    /**\n     * Scrolls vertically to bring an event or a time into view.\n     * @param {Scheduler.model.EventModel|Date} target The event to scroll to or a `Date` to scroll to.\n     * @param {Object} [options] How to scroll.\n     * @param {String} [options.block] How far to scroll the target: `start/end/center/nearest`.\n     * @param {Number} [options.edgeOffset] edgeOffset A margin around the target to bring into view.\n     * @param {Object|Boolean|Number} [options.animate] Set to `true` to animate the scroll by 300ms,\n     * or the number of milliseconds to animate over, or an animation config object.\n     * @param {Number} [options.animate.duration] The number of milliseconds to animate over.\n     * @param {String} [options.animate.easing] The name of an easing function.\n     * @param {Boolean|Function} [options.highlight] Set to `true` to highlight the resulting element\n     * when it is in view. May be a function which is called passing the resulting element\n     * to provide customized highlighting.\n     * @param {Boolean} [options.focus] Set to `true` to focus the element when it is in view.\n     * @param {Boolean} [options.y] Pass as `false` to disable scrolling in the `Y` axis.\n     * @returns {Promise} A promise which is resolved when the target has been scrolled into view.\n     */\n    async scrollTo(target, options = { animate : true }) {\n        const me = this;\n        if (target instanceof me.store.modelClass) {\n            // Scroll the passed record into view\n            await me.scrollRowIntoView(target, Object.assign({}, options, { highlight : false }));\n            if (options.highlight) {\n                target = me.getEventElement(target, target.startDate);\n                if (typeof options.highlight === 'boolean') {\n                    DomHelper.highlight(target, me);\n                }\n                else {\n                    (me.widget || me).callback(options.highlight, null, [target]);\n                }\n            }\n        }\n        else if (ObjectHelper.isDate(target) && me.store.count) {\n            const\n                index = me.dateIndex,\n                key   = DateHelper.makeKey(target);\n            // We have a row for this date...\n            if (index[key]) {\n                await me.scrollRowIntoView(index[key], options);\n                me.scrolledToDate = target;\n            }\n            // Otherwise, find the closest in time\n            else {\n                let closest = Number.MAX_SAFE_INTEGER;\n                const keys = Object.keys(index);\n                for (let i = 0, { length } = keys; i < length; i++) {\n                    const d = DateHelper.parseKey(keys[i]);\n                    if (Math.abs(d - target) < Math.abs(closest - target)) {\n                        closest = d;\n                    }\n                }\n                // Recurse with a known-to-exist date\n                await me.scrollTo(closest);\n            }\n        }\n    }\n    updateStartDate() {\n        const { refreshCount } = this;\n        // Prevent this.onMonthChange from trying to scroll when we update our month's active date\n        this.preventScroll = true;\n        super.updateStartDate(...arguments);\n        this.preventScroll = false;\n        // Superclass's updateStartDate will most likely cause a refresh due to changing the date.\n        // But if we're moving to a larger encapsulating range (eg 1w to 1y), the date may\n        // not be forced to change, so kick off a refresh if it has not been done.\n        if (!this.isConfiguring && this.refreshCount === refreshCount) {\n            this.populateStoreSoon();\n        }\n    }\n    updateEndDate() {\n        const { refreshCount } = this;\n        super.updateEndDate?.(...arguments);\n        // Superclass's updateEndDate will most likely cause a refresh due to changing the date.\n        // But if we're moving to a larger encapsulating range (eg 1w to 1y), the date may\n        // not be forced to change, so kick off a refresh if it has not been done.\n        if (!this.isConfiguring && this.refreshCount === refreshCount) {\n            this.populateStoreSoon();\n        }\n    }\n    updateRange() {\n        const { refreshCount } = this;\n        super.updateRange?.(...arguments);\n        // Superclass's updateRange will most likely cause a refresh due to changing the date.\n        // But if we're moving to a larger encapsulating range (eg 1w to 1y), the date may\n        // not be forced to change, so kick off a refresh if it has not been done.\n        if (!this.isConfiguring && this.refreshCount === refreshCount) {\n            this.populateStoreSoon();\n        }\n    }\n    // Interface method used by the Describable Scheduler mixin which renders the date(s) of a view\n    // If the result is an array, it creates a range description based on the descriptionFormat.\n    get dateBounds() {\n        return [this.startDate, this.endDate];\n    }\n    // We default the range description format to using the shortDateFormat each side (from and to)\n    // but this can be configured.\n    get descriptionFormat() {\n        return super.descriptionFormat || [this.shortDateFormat, `S{${this.shortDateFormat}} - E{${this.shortDateFormat}}`];\n    }\n    set descriptionFormat(descriptionFormat) {\n        super.descriptionFormat = descriptionFormat;\n    }\n    descriptionRenderer() {\n        const\n            me = this,\n            {\n                date,\n                startDate,\n                endDate,\n                range,\n                count\n            }  = me;\n        let rangeDesc;\n        if (range?.magnitude === 1) {\n            switch (range.unit) {\n                case 'day':\n                    rangeDesc = DateHelper.format(date, 'L');\n                    break;\n                case 'week':\n                {\n                    const\n                        startMonth = startDate.getMonth(),\n                        endMonth   = endDate.getMonth(),\n                        monthDesc  = startMonth === endMonth ? DateHelper.format(startDate, 'MMMM') : `${DateHelper.format(startDate, 'MMM')} - ${DateHelper.format(endDate, 'MMM')}`,\n                        week       = me.month.getWeekNumber(startDate);\n                    rangeDesc = `${me.L('L{Object.Week}')} ${week[1]}, ${monthDesc} ${week[0]}`;\n                    break;\n                }\n                case 'month':\n                    rangeDesc = DateHelper.format(date, 'MMMM, YYYY');\n                    break;\n                case 'year':\n                    rangeDesc = DateHelper.format(date, 'YYYY');\n                    break;\n                case 'decade':\n                    rangeDesc = `${DateHelper.format(startDate, 'YYYY')}s`;\n            }\n        }\n        else {\n            rangeDesc = me.formattedDescription;\n        }\n        return `${rangeDesc}. ${me.L('eventCount', count)}`;\n    }\n    /**\n     * The number of events that this View currently encapsulates in its {@link #config-range date range}.\n     * @member {Number}\n     * @readonly\n     */\n    get count() {\n        return this.store.count - (this.store.groupRecords?.count || 0);\n    }\n    get stepUnit() {\n        const { range } = this;\n        // If just one unit, return the unit name\n        return range ? range.magnitude === 1 ? range.unit : this.range : this.L('L{days}', this.duration);\n    }\n    get store() {\n        return super.store;\n    }\n    set store(store) {\n        if (store && !store.modelClass && this.project) {\n            store.modelClass = this.project.eventStore.modelClass;\n        }\n        super.store = store;\n    }\n    /**\n     * When an EventStore arrives, chain off a slave store from that which we can then\n     * filter to only show the week we are focused upon.\n     */\n    updateEventStore(eventStore) {\n        super.updateEventStore?.(eventStore);\n        // We monitor changes to the EventStore and repopulate our store if it needs it.\n        eventStore.ion({\n            refresh : 'onCalendarStoreChange',\n            thisObj : this\n        });\n        this.populateStoreSoon();\n    }\n    changeStore(store) {\n        const me = this;\n        if (store) {\n            store = Store.mergeConfigs({\n                useRawData : {\n                    ignoreDefaults        : true,\n                    disableDefaultValue   : true,\n                    disableTypeConversion : true,\n                    enabled               : true\n                },\n                modelClass : me.modelClass\n            }, store);\n        }\n        store = super.changeStore(store);\n        // Ensure our subclass, AgendaView is able to use its own filter\n        if (store?.modelClass.isEventModel) {\n            me.nonWorkingDaysFilter = store.addFilter({\n                id       : `${me.id}-nonworkingday-filter`,\n                filterBy : event => !me.dayTime.isIntraDay(event) || !me.hiddenNonWorkingDays[event.startDate.getDay()],\n                disabled : !me.hideNonWorkingDays\n            }, true);\n        }\n        return store;\n    }\n    updateHideNonWorkingDays(hideNonWorkingDays) {\n        const\n            me        = this,\n            { store } = me;\n        super.updateHideNonWorkingDays(hideNonWorkingDays);\n        // We do it by filtering the generated day records by the isNonWorking flag\n        if (store) {\n            me.nonWorkingDaysFilter.disabled = !hideNonWorkingDays;\n            store.filter();\n        }\n        me.trigger('refresh');\n    }\n    afterRemove({ records }) {\n        // If they remove records from the Grid Store, assume they want to remove the underlying\n        // events from the eventStore.\n        this.eventStore.remove(records);\n        super.afterRemove(...arguments);\n    }\n    get modelClass() {\n        return this.eventStore.modelClass;\n    }\n    /**\n     * This is called when our store needs to be repopulated from the eventStore\n     * @private\n     */\n    populateStoreSoon() {\n        const\n            me          = this,\n            { project } = me;\n        // Only refresh immediately if we are visible.\n        if (me.isVisible) {\n            // Only populate if initial commit is performed and change is not triggered by project writing back data\n            if ((project.isInitialCommitPerformed && !project.isWritingData) || !project.eventStore.count) {\n                me.populateStore();\n            }\n        }\n        // Otherwise wait till next time we get painted (shown, or a hidden ancestor shown)\n        else {\n            me.whenVisible('populateStore');\n        }\n    }\n    get duration() {\n        // If we are in startDate->endDate mode, as opposed to using a fixed \"range\"\n        // around a date, then to provide a more intuitive interface, we *include* the endDate\n        // for EventLists\n        return super.duration + (this.range ? 0 : 1);\n    }\n    populateStore() {\n        const\n            me           = this,\n            { cellEdit } = me.features,\n            ec           = cellEdit?.editorContext,\n            events       = me.eventStore.getEvents({\n                startDate : me.startDate,\n                // If we are being set a startDate and endDate, as opposed to using a fixed \"range\"\n                // around a date, then to provide a more intuitive interface, we *include* the endDate\n                // for EventLists\n                endDate : DateHelper.add(me.endDate, me.range ? 0 : 1, 'd'),\n                filter  : me.eventFilter\n            }).sort(byStartDate);\n        // Create our date index by which we can scroll to dates.\n        me.dateIndex = events.reduce((result, event) => {\n            const key = DateHelper.makeKey(event.startDate);\n            if (!result[key]) {\n                result[key] = event;\n            }\n            return result;\n        }, {});\n        // The complete data replacement disturbs CellEdit\n        // If editing is in progress, cache the context and cancel it\n        // to resume after the refresh.\n        if (ec) {\n            cellEdit.cancelEditing();\n        }\n        me.store.data = events;\n        me.trigger('refresh');\n        if (ec) {\n            cellEdit.startEditing(ec);\n        }\n        // The owning Calendar's UI may need to sync with the new state\n        me.calendar?.syncUIWithActiveView(this);\n    }\n    /**\n     * Creates the Month utility object. We use it to track what week we are looking at.\n     */\n    changeMonth() {\n        const result = super.changeMonth(...arguments);\n        // Update when the month changes.\n        result.ion({\n            dateChange : 'onMonthChange',\n            thisObj    : this\n        });\n        return result;\n    }\n    /**\n     * When the date we have been told to look at changes, recalculate the date range.\n     * If the date range changes, this will cause a refill of our grid store from the\n     * master event store.\n     */\n    onMonthChange({ newDate }) {\n        const\n            me            = this,\n            { startDate } = me,\n            newStartDate  = me.changeStartDate(newDate);\n        // Move range so that it encapsulates the target date if necessary\n        if (!startDate || (newStartDate - startDate && !me.containsDate(newStartDate))) {\n            me.updateRange(me.range);\n        }\n        // Only attempt if the store got populated and we are visible.\n        if (!me.preventScroll && me.isVisible && me.store.count) {\n            // Ensure any store rebuild triggered by reconfiguring is flushed before\n            // we attempt to scroll to that date\n            me.populateStoreSoon.flush();\n            me.scrollTo(newDate);\n        }\n    }\n    /**\n     * This is added as a listener by the CalendarStores mixin.\n     *\n     * Our store is chained off of the EventStore; refill it if the EventStore changes.\n     * The store will fire events which cause UI update.\n     * We must fire a refresh event so that the encapsulating Calendar view knows about this.\n     */\n    onCalendarStoreChange({ source : eventStore }) {\n        if (!this.date) {\n            this.date = eventStore.map(r => r.startDate).sort((lhs, rhs) => lhs.valueOf() - rhs.valueOf())[0];\n        }\n        // Only refresh immediately if we are visible.\n        this.populateStoreSoon();\n    }\n    changeSettings(settings, oldSettings) {\n        return settings && Button.reconfigure(oldSettings, Button.mergeConfigs({\n            type       : 'button',\n            positioned : true,\n            icon       : 'b-icon-cog',\n            menuIcon   : null,\n            cls        : 'b-blue b-cal-widget-settings-button',\n            appendTo   : this.bodyElement\n        }, settings), this);\n    }\n    //region Current config\n    getCurrentConfig(options) {\n        const result = super.getCurrentConfig(options);\n        // Internally assigned\n        delete result.store;\n        delete result.data;\n        return result;\n    }\n    //endregion\n}\nEventList.initClass();\nEventList._$name = 'EventList';", "import EventList from '../../Calendar/widget/EventList.js';\nimport DH from '../../Core/helper/DateHelper.js';\nimport ArrayHelper from '../../Core/helper/ArrayHelper.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport Responsive from '../../Core/widget/mixin/Responsive.js';\nimport GridRowModel from '../../Grid/data/GridRowModel.js';\nimport EventSorter from '../util/EventSorter.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport '../column/AgendaColumn.js';\n/**\n * @module Calendar/widget/AgendaView\n */\nconst\n    isMouseOverOut = {\n        mouseover : 1,\n        mouseout  : 1\n    },\n    isMouseInteraction = {\n        mousedown   : 1,\n        mouseup     : 1,\n        click       : 1,\n        dblclick    : 1,\n        contextmenu : 1\n    };\n/**\n * This is normally used as a {@link Calendar.view.Calendar#config-modes mode} of a Calendar (as seen in the live\n * demo below) but may be used standalone as a regular Widget.\n *\n * {@inlineexample Calendar/widget/CalendarAgendaView.js}\n *\n * As a standalone widget, it will lack the capabilities of the {@link Calendar.view.Calendar Calendar}\n * class, such as keyboard-based event to event navigation and drag/drop features. As seen in this demo:\n *\n * {@inlineexample Calendar/widget/AgendaView.js}\n *\n * A Grid which displays an agenda view of the events in an EventStore.\n *\n * When used as a {@link Calendar.view.Calendar#config-modes mode} of a Calendar, the configured\n * {@link #config-range} is snapped to encapsulate the Calendar's current\n * {@link Calendar.view.Calendar#config-date}.\n *\n * If configured with an explicit {@link #config-startDate} and {@link #config-endDate}, the\n * {@link #config-range} is not used. When setting the {@link #property-date}, the duration\n * of the configured range is preserved, but the range is shifted backwards or forwards in time\n * just enough to bring the passed `Date` into view.\n *\n * The AgendaView offers a floating settings button to allow the user to change the range type. This\n * may be disabled by configuring the {@link #config-listRangeMenu} as `null`.\n *\n * ### Column renderer\n * The content of each agenda cell is created by the {@link Calendar.column.AgendaColumn}'s\n * {@link Calendar.column.AgendaColumn#function-defaultRenderer}\n *\n * To inject content or manipulate the cell's DOM, you may configure the column with a renderer:\n *\n * ```javascript\n * modes : {\n *     agenda : {\n *         columns : {\n *             agenda : {\n *                 renderer({ cellElement, record : cellData }) {\n *                     // Manipulate the cell as we need\n *                     cellElement.classList.toggle('is-sunday', cellData.day === 0);\n *\n *                     // We need the system-provided cell rendering\n *                     return this.defaultRenderer(...arguments);\n *                 }\n *             }\n *         }\n *     }\n * }\n * ```\n *\n * @extends Calendar/widget/EventList\n * @classtype agendaview\n * @classtypealias agenda\n * @typingswidget\n */\nexport default class AgendaView extends EventList.mixin(Responsive) {\n    static $name = 'AgendaView';\n    static type = 'agendaview';\n    static configurable = {\n        eventSorter : EventSorter.interDaySorterFn,\n        /**\n         * The spacing between event bars in the default rendering of a day cell.\n         * @config {Number|String}\n         * @default\n         */\n        eventRowSpacing : 8,\n        title : 'L{Agenda}',\n        range : 'year',\n        /**\n         * By default, long running events are repeated in all rows that the event covers.\n         *\n         * Configure this as `true` to only see the start of a long running event in its\n         * start day.\n         * @config {Boolean}\n         */\n        hideEventOverflow : null,\n        /**\n         * This view lines up the textual content of event bars by shifting event bars of\n         * events which start before the bar's cell leftwards by the arrow width.\n         *\n         * Set this config to `false` to prevent this.\n         * @prp {Boolean}\n         * @default\n         */\n        offsetStartsBeforeEvents : true,\n        // We handle this internally using the notifications from the GridElementEvents mixin\n        handlePointerInteraction : false,\n        /**\n         * Specify `false` to display column headers\n         * @config {Boolean}\n         * @default\n         * @category Misc\n         */\n        hideHeaders : true,\n        /**\n         * Column definitions.\n         *\n         * By default, a single {@link Calendar.column.AgendaColumn} is configured which creates\n         * the default cell content for one day's events.\n         *\n         * You may configure the default agenda column away, and provide a custom column type\n         * to produce the day's content where the `record` passed is a\n         * {@link Calendar.widget.mixin.DayCellCollecter#typedef-DayCell}.\n         *\n         * Because cells may contain varying numbers of events, all columns in an AgendaView are\n         * set to {@link Grid.column.Column#config-autoHeight}\n         *\n         * ```javascript\n         * class MyAgendaColumn extends Column {\n         *     // So we automatically get b-myagenda-cell class on the cells\n         *     static get type() {\n         *         return 'myagenda';\n         *     }\n         *\n         *     renderer({ cellElement, record : cellData }) {\n         *         // Create a DomHelper element configuration object here using cellData\n         *         // cellData contains date contextual info and an events array.\n         *     }\n         * }\n         *\n         * ...\n         *\n         * {\n         *     columns : {\n         *         agenda : null,\n         *         {\n         *             type : 'mycolumntype'\n         *         }\n         *     }\n         * }\n         *\n         * // Register this Column type so that in the app we can use type : 'myagendacolumn'\n         * ColumnStore.registerColumnType(MyAgendaColumn);\n         *```\n         * @config {Object|Object[]}\n         * @default { agenda : { type : 'agendacolumn' } }\n         */\n        columns : {\n            // We knock out the columns we inherit from EventList.\n            name      : null,\n            startDate : null,\n            endDate   : null,\n            resources : null,\n            agenda    : {\n                type : 'agendacolumn'\n            }\n        },\n        /**\n         * A function, or name of a function in the ownership hierarchy which is used to create\n         * the time output next to event bars in an agenda cell.\n         *\n         * @config {Function|String}\n         * @param {Scheduler.model.EventModel} eventRecord The event record for which to create a time string.\n         * @param {Date} date The date of the cell in which the event is being rendered.\n         * @returns {String}\n         */\n        eventTimeRenderer : null,\n        enableSticky                  : true,\n        preserveScrollOnDatasetChange : true,\n        positionMode                  : 'position',\n        settings : {},\n        cellTabIndex : null,\n        rowCls : {\n            'b-cal-agenda-grid-row' : 1\n        },\n        cellCls : {\n            'b-calendar-cell' : 1\n        },\n        eventBarContainerCls : 'b-cal-event-bar-container',\n        // No GridNavigation key events in an AgendaView. It is natural, event-to-event navigation.\n        keyMap : null,\n        // Our rows encapsulate dates and *contain* events, so they are raw GridRowModels\n        store : {\n            modelClass : GridRowModel\n        },\n        listRangeMenu : {\n            align : {\n                align : 't100-b100'\n            }\n        }\n    };\n    /**\n     * Returns the resource associated with this agenda view when used inside a {@link Calendar.widget.ResourceView}\n     * @readonly\n     * @member {Scheduler.model.ResourceModel} resource\n     */\n    construct(config) {\n        const\n            me           = this,\n            featuresProp = ObjectHelper.getPropertyDescriptor(this, 'features');\n        // Disable GridFeatures in AgendaView.\n        // This is necessary in the built version where the features are all included\n        // because of the needs of the docs app to use Grid for its own UI and because\n        // many documentation examples run Grid examples.\n        // This should change when https://github.com/bryntum/bryntum-suite/issues/1475 is addressed\n        Object.defineProperty(me, 'features', {\n            get : () => {\n                return featuresProp.get.call(this);\n            },\n            set : features => {\n                const f = GridFeatureManager.getInstanceDefaultFeatures(this);\n                // Kill all the defaults\n                for (const ft in f) {\n                    f[ft] = false;\n                }\n                // We want to pass print config to the agenda view or simply enable print\n                // feature if it is enabled on the calendar\n                f.print = features?.print || Boolean(this.calendar?.features.print);\n                featuresProp.set.call(this, f);\n            },\n            configurable : true\n        });\n        super.construct(config);\n        // CalendarNavigation focuses event bars\n        me.bodyContainer.removeAttribute('tabIndex');\n    }\n    onResponsiveStateChange({ state, oldState }) {\n        super.onResponsiveStateChange?.(...arguments);\n        // Moving between small and non-small state requires a refresh because the cell\n        // layout changes and the rows need remeasuring and repositioning.\n        if (oldState && (oldState === 'small' || state === 'small')) {\n            this.refresh();\n        }\n    }\n    changeColumns() {\n        const result = super.changeColumns(...arguments);\n        // Custom columns and AgendaColumns with custom renderer will be autoHeight\n        result?.forEach?.(c => {\n            c.autoHeight = Boolean(!c.isAgendaColumn || (c.renderer || this.eventRenderer));\n        });\n        return result;\n    }\n    // Override these because CalendarNavigation focuses and navigates *events*, not grid cells.\n    onFocusGesture() {}\n    onGridElementFocus() {}\n    onGridBodyFocusIn() {}\n    focusCell() {}\n    setHoveredRow() {}\n    onElementKeyDown() {}\n    onElementMouseDown() {}\n    editAutoCreatedEvent(event, eventRecord) {\n        // Uniquely, AgendaView has to regenerate its Grid store on event add so that\n        // there is an event element to edit by.\n        this.populateStoreSoon.now();\n        super.editAutoCreatedEvent(event, eventRecord);\n    }\n    handleEvent(event) {\n        const { type } = event;\n        super.handleEvent(event);\n        // Implement eventMouseover/eventMouseout.\n        // All else is handled at the EventList level.\n        if (isMouseOverOut[event.type]) {\n            this.onEventMouseOverOut(event);\n        }\n        else if (isMouseInteraction[type]) {\n            this.onCalendarPointerInteraction(event);\n        }\n    }\n    getCellDataFromEvent(domEvent) {\n        if (domEvent.target.closest('.b-grid-cell')) {\n            const result = super.getCellDataFromEvent(domEvent);\n            result && (result.record = this.getEventRecord(domEvent.target));\n            return result;\n        }\n    }\n    updateOffsetStartsBeforeEvents(offsetStartsBeforeEvents) {\n        // Must case to Boolean because undefined defaults to true\n        this.element.classList.toggle('b-offset-continues-past', Boolean(offsetStartsBeforeEvents));\n    }\n    updateEventRowSpacing(eventRowSpacing) {\n        this.contentElement.style.setProperty('--event-row-spacing', DomHelper.setLength(eventRowSpacing));\n    }\n    updateSuppressLongEvents() {\n        this.fillFromMaster();\n    }\n    onCalendarStoreChange({ action, oldCount, records, removed, added }) {\n        const me = this;\n        if (me.isPainted) {\n            // A filter which resulted in no filtering. Ignore it.\n            if (action === 'filter' && !removed?.length && !added?.length) {\n                return;\n            }\n            // Draw on project refresh instead of on dataset\n            if (action === 'dataset') {\n                return;\n            }\n            // Single record remove just updates the generated records that the event covers\n            if (action === 'remove' && records.length === 1 && records[0].isEventModel) {\n                const\n                    { store }    = me,\n                    eventRecord  = records[0],\n                    date         = DH.clearTime(eventRecord.startDate),\n                    endDate      = DH.clearTime(eventRecord.endDate);\n                do {\n                    const\n                        key          = DH.makeKey(date),\n                        cellData     = me.cellMap.get(key);\n                    if (cellData) {\n                        ArrayHelper.remove(cellData.events, eventRecord);\n                        // Update the row for this date\n                        if (cellData.events.length) {\n                            me.onStoreUpdateRecord({\n                                source  : store,\n                                record  : me.store.getById(key),\n                                changes : {}\n                            });\n                        }\n                        // No events on this date\n                        else {\n                            me.cellMap.delete(key);\n                            delete me.dateIndex[key];\n                            store.remove(key, true);\n                        }\n                    }\n                    date.setDate(date.getDate() + 1);\n                } while (date < endDate);\n                return;\n            }\n        }\n        me.populateStoreSoon();\n    }\n    get cellMap() {\n        const me = this;\n        // If the cellMap has not been populated, create it.\n        return me._cellMap?.populated ? me._cellMap : me.createCellMap({\n            // If we are being set a startDate and endDate, as opposed to using a fixed \"range\"\n            // around a date, then to provide a more intuitive interface, we *include* the endDate\n            // for EventLists\n            endDate       : DH.add(me.endDate, me.range ? 0 : 1, 'd'),\n            rawEvents     : true,\n            skipPropagate : true\n        });\n    }\n    populateStore() {\n        this._cellMap?.clear();\n        const\n            me = this,\n            {\n                store,\n                eventStore,\n                rowManager\n            }             = me,\n            { rowHeight } = rowManager,\n            rowCount      = rowManager.rows?.length,\n            eventHeight   = isNaN(me.eventHeight) ? 25 : me.eventHeight;\n        me.eventCount = 0;\n        if (!me.date) {\n            // Avoid recursion into populateStore\n            me.isConfiguring = true;\n            me.date = eventStore.map(r => r.startDate).sort((lhs, rhs) => lhs.valueOf() - rhs.valueOf())[0];\n            me.isConfiguring = false;\n        }\n        const\n            { cellMap }    = me,\n            cellMapEntries = [...cellMap.values()];\n        me.dateIndex = {};\n        for (let i = 0, { length } = cellMapEntries; i < length; i++) {\n            const\n                cellData         = cellMapEntries[i],\n                { events, date } = cellData;\n            // Count unique events\n            for (let j = 0, { length } = events; j < length; j++) {\n                const event = events[j];\n                if (!me.isAllDayEvent(event) || !i || DH.clearTime(event.startDate).valueOf() === date.valueOf()) {\n                    me.eventCount++;\n                }\n            }\n            // build date index\n            me.dateIndex[cellData.id] = cellMapEntries[i] = store.createRecord(cellData);\n        }\n        const avgEventsPerCell = me.eventCount ? cellMapEntries.map(e => e.events.length).reduce((a, b) => a + b, 0) / cellMapEntries.length : 0;\n        store.suspendEvents();\n        store.loadData(cellMapEntries);\n        store.resumeEvents();\n        // Give RowManager a clue so that it can calculate an appropriate rowCount.\n        // If the rows are tall, we do not need many to cover the viewport.\n        rowManager._rowHeight = 20;\n        // RowManager#set rowHeight does not tolerate no rows.\n        if (store.count) {\n            rowManager.rowHeight = Math.max(avgEventsPerCell * (eventHeight + me.eventSpacing), 70);\n        }\n        // Setting the rowHeight does a refresh if there are existing rows and the height actually changed.\n        // Otherwise, we explicitly refresh now.\n        if (!rowCount || !store.count || rowManager.rowHeight === rowHeight) {\n            rowManager.calculateRowCount();\n            rowManager.estimateTotalHeight(true);\n        }\n        me.refreshCount = (me.refreshCount || 0) + 1;\n        /**\n         * Fires when this AgendaView refreshes.\n         * @param {Calendar.widget.AgendaView} source The triggering instance.\n         * @event refresh\n         */\n        me.trigger('refresh');\n        // The owning Calendar's UI may need to sync with the new state\n        me.calendar?.syncUIWithActiveView(me);\n        me.columns.forEach(c => c.constructor.exposeProperties?.());\n        // Evaluate this late so that it doesn't change the order of date config evaluation\n        // Ensure that the menu stays aligned if scrollbar causes button movement.\n        me.settings?._menu?.realign();\n    }\n    get count() {\n        return this.eventCount;\n    }\n    collectEvents(options) {\n        // Only the first cell, or !hideEventOverflow needs overflows flowing into it.\n        options.getDateIndex = date => date > this.startDate && this.hideEventOverflow ? 'startDate' : 'date';\n        return super.collectEvents(options);\n    }\n    changeStore(store) {\n        store = super.changeStore(store);\n        if (store) {\n            this.nonWorkingDaysFilter = store.addFilter({\n                id       : `${this.id}-nonworkingday-filter`,\n                filterBy : rec => !rec.isNonWorking,\n                disabled : !this.hideNonWorkingDays\n            }, true);\n            this.detachListeners('agendaStoreFilter');\n            store.ion({\n                name    : 'agendaStoreFilter',\n                filter  : 'onAgendaStoreFilter',\n                thisObj : this\n            });\n        }\n        return store;\n    }\n    onAgendaStoreFilter() {\n        const me = this;\n        // Count unique events\n        me.eventCount = me.store.reduce((result, rec, i) => {\n            const { events, date } = rec;\n            for (let j = 0, { length } = events; j < length; j++) {\n                const event = events[j];\n                if (!me.isAllDayEvent(event) || !i || DH.clearTime(event.startDate).valueOf() === date.valueOf()) {\n                    result++;\n                }\n            }\n            return result;\n        }, 0);\n    }\n    updateHideEventOverflow() {\n        this.populateStore();\n    }\n    // We must implement the CalendarMixin interface.\n    // All views must expose a doRefresh method.\n    // Override from EventList. We need to repopulate our store to create day cells.\n    doRefresh() {\n        this.populateStore();\n    }\n    createCellData(date) {\n        return Object.assign(this.cellMonth.getCellData(date, this.month), {\n            id     : DH.makeKey(date),\n            events : []\n        });\n    }\n    set cellRenderer(cellRenderer) {\n        this._cellRenderer = cellRenderer;\n    }\n    changeSettings(settings) {\n        const { listRangeMenu : menu } = this;\n        return settings && menu && super.changeSettings({\n            menu\n        });\n    }\n}\nAgendaView.initClass();\nAgendaView._$name = 'AgendaView';", "import EventRenderer from './mixin/EventRenderer.js';\nimport SchedulerDatePicker from '../../Scheduler/widget/SchedulerDatePicker.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\n/**\n * @module Calendar/widget/CalendarDatePicker\n */\n/**\n * A subclass of {@link Core.widget.DatePicker} which is able to show the presence of\n * events in its cells if contained in a Calendar, and {@link #config-showEvents} is set\n * to a truthy value.\n *\n * The `datepicker` Widget type is implemented by this class when this class is imported, or built\n * into a bundle, and so any {@link Core.widget.DateField} may have its\n * {@link Core.widget.PickerField#config-picker} configured to use its capabilities of showing\n * the presence of events in its date cells.\n *\n * @extends Scheduler/widget/SchedulerDatePicker\n * @mixes Calendar/widget/mixin/EventRenderer\n * @classtype datepicker\n * @widget\n */\nexport default class CalendarDatePicker extends SchedulerDatePicker.mixin(EventRenderer) {\n    static $name = 'CalendarDatePicker';\n    // Factoryable type name\n    static type = 'datepicker';\n    static configurable = {\n        /**\n         * How to show presence of events in the configured {@link #config-eventStore} in the\n         * day cells. Values may be:\n         *\n         * * `false` - Do not show events in cells.\n         * * `true` - Show a themeable bullet to indicate the presence of events for a date.\n         * * `'count'` - Show a themeable badge containing the event count for a date.\n         * * `'dots'` - Show small event-coloured bullets up to a maximum of {@link #config-maxDots} to indicate event presence.\n         * @prp {Boolean|'count'|'dots'}\n         * @default false\n         */\n        showEvents : null,\n        /**\n         * When {@link #config-showEvents} is `'dots'`, this is the maximum number of dots to show\n         * below the date number in the cell.\n         *\n         * The default is four. Note that increasing this may lead to a cluttered UI in which the dots\n         * obscure the date figure in the cell.\n         *\n         * @prp {Number}\n         * @default\n         */\n        maxDots : 4,\n        /**\n         * When {@link #config-showEvents} is __not__ `'count'`, setting this to\n         * `true` means that a tooltip containing the event count will be shown on hover of\n         * a day cell.\n         *\n         * @prp {Boolean}\n         * @default\n         */\n        eventCountTip : null,\n        alwaysRefreshOnMonthChange : true,\n        /**\n         * Configure as `true` to add a highlighted border and background to the week row which\n         * encapsulates the selected date.\n         * @prp {Boolean}\n         * @default false\n         */\n        highlightSelectedWeek : null\n    };\n    construct(config) {\n        const calendar = (config.owner || config.parent)?.up('calendar');\n        if (calendar && !config.eventStore) {\n            config.eventStore = calendar.eventStore;\n        }\n        super.construct(...arguments);\n    }\n    updateHighlightSelectedWeek(highlightSelectedWeek) {\n        this.element.classList.toggle('b-highlight-selected-week', Boolean(highlightSelectedWeek));\n    }\n    updateMaxDots() {\n        this.refresh();\n    }\n    refreshEventsMap() {\n        const me = this;\n        if (me.showEvents) {\n            me.eventsMap = me.eventStore[me.showEvents === 'dots' ? 'getEvents' : 'getEventCounts']({\n                startDate : me.startDate,\n                endDate   : me.endDate,\n                dateMap   : me.eventsMap || (me.eventsMap = new Map()),\n                filter    : me.eventFilter\n            });\n        }\n    }\n    cellRenderer({ cell, date }) {\n        const\n            { showEvents } = this,\n            isCount        = showEvents === 'count',\n            isDots         = showEvents === 'dots',\n            eventInfo      = this.eventsMap?.get?.(DateHelper.makeKey(date)),\n            count          = isDots ? eventInfo?.length : eventInfo,\n            countCls       = isCount ? 'b-cell-events-badge' : isDots ? 'b-cal-minimal-event-container' : 'b-icon b-icon-circle';\n        if (isDots) {\n            // We replace the text-only date with an element so it can carry the background\n            // and the background will not obscure the dots.\n            cell.innerHTML = '';\n            DomHelper.createElement({\n                class  : 'b-date-cell-inner',\n                text   : date.getDate(),\n                parent : cell\n            });\n        }\n        delete cell.parentNode.dataset.btip;\n        if (count) {\n            if (!isCount && this.eventCountTip) {\n                cell.parentNode.dataset.btip = this.L('L{ResourceInfoColumn.eventCountText}', count);\n            }\n            const cellContent = {\n                dataset : {\n                    count\n                },\n                class : {\n                    [countCls]                                      : 1,\n                    [SchedulerDatePicker.getEventCountClass(count)] : 1\n                },\n                parent                  : cell,\n                [isCount ? 'text' : ''] : count\n            };\n            if (isDots) {\n                const children = cellContent.children = [];\n                for (let i = 0; i < Math.min(eventInfo?.length || 0, this.maxDots); i++) {\n                    const eventDomConfig = this.createEventDomConfig({\n                        eventRecord : eventInfo[i],\n                        // renders without content with just background colour\n                        minimal : true\n                    });\n                    children.push(eventDomConfig);\n                }\n            }\n            DomHelper.createElement(cellContent);\n        }\n    }\n    static setupClass(meta) {\n        // We take over the type name 'datepicker' when we are in the app\n        meta.replaceType = true;\n        super.setupClass(meta);\n    }\n}\nCalendarDatePicker.initClass();\nCalendarDatePicker._$name = 'CalendarDatePicker';", "import CalendarMixin from './mixin/CalendarMixin.js';\nimport DayCellCollecter from './mixin/DayCellCollecter.js';\nimport DayTime from '../../Core/util/DayTime.js';\nimport Panel from '../../Core/widget/Panel.js';\nimport DH from '../../Core/helper/DateHelper.js';\nimport EventHelper from '../../Core/helper/EventHelper.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\nimport DomSync from '../../Core/helper/DomSync.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport BrowserHelper from '../../Core/helper/BrowserHelper.js';\nimport Scroller from '../../Core/helper/util/Scroller.js';\nimport ResizeMonitor from '../../Core/helper/ResizeMonitor.js';\nimport CalendarRow from './CalendarRow.js';\nimport DayLayout from '../layout/day/DayLayout.js';\nimport DaySelectable from './mixin/DaySelectable.js';\nimport '../layout/day/FluidDayLayout.js';\nimport GlobalEvents from '../../Core/GlobalEvents.js';\nimport DateRangeOwner from './mixin/DateRangeOwner.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport ArrayHelper from '../../Core/helper/ArrayHelper.js';\n/**\n * @module Calendar/widget/DayView\n */\nconst\n    { MILLIS_PER_HOUR } = DayTime,\n    // We need the full longest date because intervening ticks may now be shown.\n    widestDate          = new Date(2020, 10, 22, 22, 59, 59),\n    blockedAllDayEvents = {\n        paint               : 1,\n        refresh             : 1,\n        resize              : 1,\n        eventspercellchange : 1\n    },\n    stopEvent = e => {\n        e.stopImmediatePropagation();\n        e.cancelBubble = true;\n    },\n    preventDefault = e => e.ctrlKey && e.preventDefault(),\n    hourHeightLevelZero = {\n        level : 0,\n        step  : '1 hour'\n    },\n    zeroRect = new Rectangle(0, 0, 0, 0),\n    fiveMinuteSteps = [\n        '30 minutes',\n        '15 minutes',\n        '10 minutes',\n        '5 minutes'\n    ],\n    sixMinuteSteps = [\n        '30 minutes',\n        '12 minutes',\n        '6 minutes'\n    ],\n    extractEventRecord = e => e.eventRecord || e,\n    emptyArray = Object.freeze([]);\n/**\n * An object which contains properties which encapsulate hour height breakpoints which dictate\n * when intervening time indicators are introduced into the DayView's time axis.\n *\n * @typedef {Object} HourHeightBreakPoints\n * @property {Number} thirty The height at which half hour time is displayed.\n * @property {Number} fifteen The height at which all fifteen minute times are displayed.\n * @property {Number} ten The height at which all ten minute times are displayed.\n * @property {Number} five The height at which all five minute times are displayed.\n */\n/**\n * An object which describes the properties of action buttons injected into event blocks.\n *\n * @typedef {Object<String,String|Function>} ActionButtonsConfig\n * @property {String} cls A class name to add to the button element. It may be of the form\n * `b-icon-xxxx` which will use a font-awesome icon by that name.\n * @property {String} tooltip The tooltip to show when the button is hovered.\n * @property {String|Function} handler A function, or the name of a function in the ownership hierarchy\n * to call when the button is clicked.\n */\n/**\n * This is normally used as a {@link Calendar.view.Calendar#config-modes mode} of a Calendar (as seen in the live\n * demo below), but may be used standalone as a regular Widget.\n *\n * {@inlineexample Calendar/widget/CalendarDayView.js}\n *\n * As a standalone widget, it will lack the capabilities of the {@link Calendar.view.Calendar Calendar}\n * class, such as keyboard-based event to event navigation and drag/drop features. As seen in this demo:\n *\n * {@inlineexample Calendar/widget/DayView.js}\n *\n * A Panel which displays one or more columns of days with events for each day arranged in ascending\n * time order in each column.\n *\n * This view is *not* limited to showing weeks. The {@link #config-startDate} and {@link #config-endDate}\n * may be configured to any date value. When the {@link #config-startDate} is changed dynamically,\n * the duration remains the same.\n *\n * This view can be configured to scroll to the specific time on first render, which defaults to 7 AM. This behavior\n * is controlled by the {@link #config-visibleStartTime} config.\n *\n * A {@link Calendar.widget.WeekView WeekView} is a subclass of this view which is tied to showing\n * weeks as defined by the {@link Calendar.widget.mixin.CalendarMixin#config-weekStartDay}.\n *\n * ## Multi day events.\n *\n * All day events, and multi day events are displayed in a {@link #config-allDayEvents row at the top}.\n *\n * Intraday events are arranged in ascending time order down day columns from the {@link #config-dayStartTime} to\n * the {@link #config-dayEndTime}.\n *\n * The {@link #config-showAllDayHeader} config option can be used to *not* show multi day events at\n * the top, but have them wrap across multiple day columns.\n *\n * The following configs which apply to the all day row are passed into the configuration of the\n * {@link #config-allDayEvents} widget:\n * - {@link Calendar.widget.CalendarRow#config-overflowPopup}\n * - {@link Calendar.widget.CalendarRow#config-overflowButtonRenderer}\n * - {@link Calendar.widget.CalendarRow#config-overflowClickAction}\n * - {@link Calendar.widget.CalendarRow#config-dayHeaderRenderer}\n *\n * Event rendering can be customized using the {@link #config-eventRenderer} method.\n *\n * @extends Core/widget/Panel\n * @mixes Core/widget/mixin/Responsive\n * @mixes Calendar/widget/mixin/CalendarMixin\n * @mixes Calendar/widget/mixin/DayCellCollecter\n * @mixes Calendar/widget/mixin/DateRangeOwner\n *\n * @classtype dayview\n * @classtypealias day\n * @typingswidget\n */\nexport default class DayView extends Panel.mixin(\n    CalendarMixin, DayCellCollecter, DaySelectable, DateRangeOwner) {\n    static $name = 'DayView';\n    static type = 'dayview';\n    static get delayable() {\n        return {\n            updateElementLayout : {\n                type              : 'raf',\n                cancelOutstanding : true\n            },\n            refreshDayBackground : {\n                type              : 'raf',\n                cancelOutstanding : true\n            },\n            adjustCoreHours : {\n                type              : 'raf',\n                cancelOutstanding : true\n            }\n        };\n    }\n    static get configurable() {\n        // region Hidden configs\n        /**\n         * @hideconfigs shortEventDuration\n         * @hide\n         */\n        /**\n         * @hideconfigs eventHeight\n         */\n        // endRegion\n        return {\n            // have to add `timeFormat` property to `localizableProperties` even if the iterator in `Localizable` mixin\n            // will be iterating over configs with `localeKey` in addition to `localizableProperties`\n            // completely unclear why - the property value is localized, but rendering seem to use the old value\n            localizableProperties : ['timeFormat'],\n            layout : 'vbox',\n            textContent : false,\n            scrollable : {\n                overflowY : true\n            },\n            title : 'L{Day}',\n            eventHeight : 'auto',\n            /**\n             * The height __in pixels__ of one hour cell in a day column.\n             *\n             * Hour cells are bounded by lines, and there is a fainter half hour line in the middle.\n             * @prp {Number}\n             * @default\n             */\n            hourHeight : 42,\n            range : {\n                magnitude : 1,\n                unit      : 'day'\n            },\n            /**\n             * By default, reconfiguring the {@link #config-startDate} maintains the current duration\n             * of the view and moves the {@link #config-endDate}.\n             *\n             * But for flexibility, reconfiguring the {@link #config-endDate} changes the duration.\n             *\n             * Setting `fixedDuration` to `true` locks this down to changing either end just moves\n             * the view.\n             * @config {Boolean}\n             */\n            fixedDuration : null,\n            /**\n             * Either the start hour of the day, or a *24 hour * `HH:MM` string denoting the initially visible start\n             * time of the day. Configure this as `null` to not have the view scroll to an initial position.\n             * @default\n             * @config {String|Number} [visibleStartTime]\n             */\n            visibleStartTime : 7,\n            /**\n             * Either the start hour of the day, or a *24 hour* `HH:MM` string denoting the start time for days. This\n             * is midnight by default.\n             *\n             * Setting this value to 12, for example, indicates that the 24 hour \"day\" runs from noon on one day, to\n             * noon on the following day. This causes events in this span of time to layout in the same day column. In\n             * this example, a two hour event that spanned midnight would be rendered in the same way a normal, 2 hour\n             * event spanning noon would be rendered without this option.\n             *\n             * When this config is non-zero, the headings that display the day name and number are adjusted to indicate\n             * the range of days for the column. For example, the \"Wed\" column for the 12th of the month will now show\n             * \"Wed-Thu\" for the day name and \"12-13\" for the day number.\n             *\n             * @config {String|Number}\n             * @default 0\n             */\n            dayStartShift : null,\n            /**\n             * The **configured** start time of the day, expressed in ms (8am would be represented as 8 * 60 * 60 * 1000).\n             * You can set this value to either an hour value (0-23), a *24 hour* `HH:MM` string denoting the start of\n             * the first rendered daily time block or to a ms timestamp representing time from midnight.\n             *\n             * Note that this is only granular to the hour level. The value will be rounded __down__\n             * to the starting hour of the specified time.\n             * @member {Number} dayStartTime\n             */\n            /**\n             * Either the start hour of the day, or a *24 hour* `HH:MM` string denoting the start of the first rendered\n             * daily time block. You can also set this value to a ms timestamp representing time from midnight.\n             *\n             * This config, along with {@link #config-dayEndTime} determines which hours are displayed in a day column.\n             *\n             * Note that this is only granular to the hour level. The value will be rounded __down__\n             * to the starting hour of the configured time.\n             * @config {String|Number}\n             * @default 0\n             */\n            dayStartTime : null,\n            /**\n             * The **configured** end time of the day, expressed in ms (6pm would be represented as 18 * 60 * 60 * 1000).\n             * You can set this value to either an hour value (1-24), a *24 hour* `HH:MM` string denoting the end of\n             * the last rendered daily time block or to a ms timestamp representing time from midnight.\n             *\n             * Note that this is only granular to the hour level. The value will be rounded __up__\n             * to the ending hour of the specified time.\n             * @member {String|Number} dayEndTime\n             */\n            /**\n             * Either the end hour of the day, or a *24 hour* `HH:MM` string denoting the end date of the last rendered time block.\n             * You can also set this value to a ms timestamp representing time from midnight.\n             *\n             * This config, along with {@link #config-dayStartTime} determines which hours are displayed in a day column.\n             *\n             * Note that this is only granular to the hour level. The value will be rounded __up__\n             * to the ending hour of the configured time.\n             * @config {String|Number}\n             * @default 24\n             */\n            dayEndTime : null,\n            dayTime : 0,   // ensure the change/update cycle runs using dayStart/EndTime and dayStartShift\n            /**\n             * A millisecond value to which to snap pointer times when clicking or dragging within a day column.\n             *\n             * May be specified in string form eg: `'15 minutes'`\n             *\n             * By default, the pointer position is __rounded__ to the nearest `increment`, but this can be\n             * configured using the {@link #config-timeSnapType} option.\n             * @prp {Number}\n             * @accepts {String|Number}\n             * @default\n             */\n            increment : '15 min',\n            /**\n             * The type of rounding to apply when calculating a date from a pointer position in a day\n             * column.\n             *\n             * This defaults to `'round`', but may also be `'floor'` or `'ceil'`. A pointer position will\n             * be snapped to the appropriate {@link #config-increment}.\n             * @prp {'round'|'ceil'|'floor'}\n             * @default\n             */\n            timeSnapType : 'round',\n            intradayCls : null,\n            /**\n             * Configure as `false` to hide the start time normally shown at the top of the events.\n             *\n             * @config {Boolean}\n             * @default\n             */\n            showTime   : true,\n            showBullet : false,\n            iconTarget : 'header',\n            /**\n             * Configuration to manage event layout class.\n             * See {@link Calendar.layout.day.FluidDayLayout} class docs to see all possible configurations.\n             *\n             * Defaults to `{ type : 'fluid' }`.\n             *\n             * @config {FluidDayLayoutConfig}\n             */\n            eventLayout : {\n                type : 'fluid'\n            },\n            /**\n             * The minimum width of a day column.\n             *\n             * If this is set, and the day columns overflow the horizontal space available, the columns\n             * will be scrollable horizontally in the normal way.\n             *\n             * There is a {@link #property-horizontalScroller} property which handles scrolling in this\n             * dimension.\n             * @prp {Number|String}\n             */\n            minDayWidth : null,\n            // In days, event colour means background color\n            eventColourStyleProperty : 'backgroundColor',\n            monitorResize : Boolean(DomHelper.scrollBarWidth), // Need to adjust the width of the header\n            eventFilter : undefined,\n            timeFormat : {\n                value   : 'LST',\n                $config : {\n                    localeKey : 'L{timeFormat}'\n                }\n            },\n            /**\n             * If {@link #config-showAllDayHeader} is not set to `false`, then this will be an instance\n             * of {@link Calendar.widget.CalendarRow} which encapsulates the all day events at the top\n             * of this view.\n             * @member {Calendar.widget.CalendarRow} allDayEvents\n             * @readonly\n             */\n            /**\n             * A {@link Calendar.widget.CalendarRow} widget containing the horizontal series of calendar cells with the\n             * day headers and any all-day, or day-spanning events which fall inside this view's time range.\n             *\n             * Note that this component calculates its height depending on its\n             * {@link Calendar.widget.CalendarRow#config-eventHeight},\n             * {@link Calendar.widget.CalendarRow#config-defaultEventRowCount} and\n             * {@link Calendar.widget.CalendarRow#config-autoHeight} settings, therefore any configured `height`\n             * and `flex` values will be ignored.\n             *\n             * ```javascript\n             *     modes : {\n             *         day : {\n             *             // Do not show the whole week in the header for the one day view\n             *             allDayEvents : {\n             *                 fullWeek : false\n             *             }\n             *         }\n             *     }\n             * ```\n             * @config {Calendar.widget.CalendarRow|CalendarRowConfig}\n             */\n            allDayEvents : {\n                $config : ['lazy', 'nullify'],\n                value : {\n                    type : 'calendarrow'\n                }\n            },\n            /**\n             * A config object used to create the {@link Calendar.widget.OverflowPopup} that the\n             * {@link #property-allDayEvents} may show when events for one day overflow the available space.\n             *\n             * For example\n             *\n             *```javascript\n             *     modes : {\n             *         week : {\n             *             overflowPopup : {\n             *                 closable   : false,\n             *                 dateFormat : 'dddd, MMM M',\n             *                 eventRenderer({ eventRecord, renderData }) {\n             *                     if (calendarUtils.isImportantEvent(eventRecord)) {\n             *                         // Add CSS class to important events\n             *                         renderData.cls['b-important'] = 1;\n             *                     }\n             *                 }\n             *             }\n             *         }\n             *     }\n             *```\n             * @config {OverflowPopupConfig}\n             */\n            overflowPopup : null,\n            /**\n             * Shows an all day header above the main schedule for All Day events.\n             * Set to `false` to not show all day, or multi-day events in an all day header, but\n             * to have them showing wrapping through the day cells.\n             * @config {Boolean}\n             * @default true\n             */\n            showAllDayHeader : {\n                value   : null,\n                $config : null,\n                default : true\n            },\n            /**\n             * Number of pixels to reduce the height of events by, to leave a gap between them.\n             * @config {Number}\n             * @default\n             */\n            eventSpacing : 1,\n            responsive : {\n                small : {\n                    descriptionFormat : 'MMMM YYYY'\n                },\n                '*' : {\n                    descriptionFormat : null\n                }\n            },\n            /**\n             * The maximum height the all day event row is allowed to grow within this view\n             * when it is expanded to show all its \"all day\" events.\n             *\n             * This defaults to `50%`, but can also be set to any CSS size value. A numeric\n             * value will be taken as pixels.\n             * @config {Number|String}\n             * @default 50%\n             */\n            maxAllDayHeight : null,\n            /**\n             * When set to `true`, the hours in the day will be sized so that they fit in the available\n             * height.\n             *\n             * In the Object form, the value may contain `minHeight` as the minimum hour height to which\n             * the hour cells may shrink:\n             *\n             * ```javascript\n             * fitHours : {\n             *     minHeight : 31\n             * }\n             * ```\n             *\n             * Note that if the all day events row at the top changes size, the space available for the\n             * hours will change too, and the hour cell height will change.\n             * @prp {Boolean|Object}\n             * @default false\n             */\n            fitHours : null,\n            /**\n             * A function, or name of a function which is passed the {@link DomConfig} object which\n             * will be used to sync with a day column.\n             *\n             * ```javascript\n             * dayCellRenderer : function(domConfig, cellData) {\n             *     if (this.isSpecialDate(cellData.date)) {\n             *         domConfig.className['b-fa'] =\n             *         domConfig.className['b-fa-birthday-cake'] = 1;\n             *     }\n             *     return domConfig;\n             * }\n             *```\n             *\n             * The result is used to sync the DOM of the day column.\n             *\n             * @config {Function|String} dayCellRenderer\n             * @param {DomConfig} domConfig A {@link DomConfig} config object which is used to sync the day column element.\n             * @param {Object} domConfig.className An object who's truthy property names will be applied as class names.\n             * @param {Object} domConfig.style A CSS style definition object.\n             * @param {Object} domConfig.dataset The DOM data properties to set.\n             * @param {DomConfig[]} children The {@link DomConfig} definitions for the events in the day.\n             * @param {DayCell} cellData An object that contains data about the cell.\n             * @returns {String}\n             */\n            dayCellRenderer : null,\n            /**\n             * An object containing two properties, `start` and `end` representing the start and\n             * end of core working hours.\n             *\n             * This causes the non core hours to be covered by a themeable translucent grey mask\n             * in the time axis.\n             *\n             * This may be configured to also mask the non core hours in the day part of the view\n             * by setting the `overlayDay` property.\n             *\n             * ```javascript\n             * {\n             *     coreHours : {\n             *         start      : 9,\n             *         end        : 17,\n             *         overlayDay : true\n             *     }\n             * }\n             * ```\n             *\n             * If this is configured as an array of less than seven elements, it is taken to be\n             * describing __multiple__ core hours blocks within one day, so it could be\n             *\n             * ```javascript\n             * {\n             *     coreHours : [{\n             *         start      : 8,\n             *         end        : 12,\n             *     }, {\n             *         start      : 14,\n             *         end        : 18\n             *     }\n             * }\n             * ```\n             *\n             * This may also be a __seven element__ array so as to have different core hours for\n             * each JavaScript day of the week (Meaning `0` for Sunday to `6` for Saturday).\n             * This causes only the hours in the day columns to be masked:\n             *\n             * ```javascript\n             * {\n             *     coreHours : [{\n             *         start : 10,\n             *         end   : 15\n             *     },{\n             *         start : 9,\n             *         end   : 17\n             *     },{\n             *         start : 9,\n             *         end   : 17\n             *     },{\n             *         start : 9,\n             *         end   : 17\n             *     },{\n             *         start : 9,\n             *         end   : 17\n             *     },{\n             *         start : 9,\n             *         end   : 17\n             *     },{\n             *         start : 10,\n             *         end   : 15\n             *     }]\n             * }\n             * ```\n             *\n             * This may also be a function to return calculated core hours for every date.\n             * This causes only the hours in the day columns to be masked:\n             *\n             * ```javascript\n             * {\n             *     coreHours : function(date) {\n             *         // Shorter core hours at weekends\n             *         if (date.getDay() === 0 || date.getDay() === 6) {\n             *             return {\n             *                 start : '10:00',\n             *                 end   : '15:00'\n             *             };\n             *         }\n             *         // Pre-lunch and post-lunch working blocks in the week\n             *         return [{\n             *             start : '08:00',\n             *             end   : '12:00'\n             *         }, {\n             *             start : '14:00',\n             *             end   : '18:00'\n             *         };\n             *     }\n             * }\n             * ```\n             *\n             * This may also be a __seven element__ array which contains s seperate core hours\n             * specification for each day of the week as returned from the `Date` class.\n             *\n             * This may also be a function, which, when passed a `Date`, returns a core hours\n             * specification for that date.\n             *\n             * In the simplest case an object containing two properties, `start` and `end`:\n             *\n             * - `coreHours.start` - The start hour or start time string `HH:MM` of the core working hours. `Date` or `String` value allowed.\n             * - `coreHours.end` - The end hour or start time string `HH:MM` of the core working hours. `Date` or `String` value allowed\n             * - `coreHours.overlayDay` - Set to `true` to have the greyed zone cover the day part of the view.\n             *\n             * __Only valid when this config is specified as a simple Object__.\n             *\n             * @prp {Object|Function|String} coreHours\n             *\n             * @param {Date} date Date for hours calculation\n             * @returns {Array<Object>}\n             */\n            coreHours : null,\n            /**\n             * You can zoom in and out on the time axis using CTRL-key + mouse wheel.\n             * See also the {@link #config-hourHeightBreakpoints} config option.\n             *\n             * You cannot zoom so far out that the day height falls below the available height.\n             *\n             * __Note that zooming necessarily sets {@link #config-fitHours} to `false`.__\n             *\n             * Configure this as `false` to disable this behaviour.\n             * @config {Boolean}\n             * @default\n             */\n            zoomOnMouseWheel : !BrowserHelper.isTouchDevice,\n            /**\n             * An array which encapsulates a set of {@link #config-hourHeight} breakpoints which\n             * dictate when subticks - intervening time indicators - are introduced into the DayView's\n             * time axis.\n             *\n             * Entries are in ascending granularity order, so the values must ascend.\n             *\n             * Subtick visibility is updated dynamically during {@link #config-zoomOnMouseWheel zooming}.\n             *\n             * When an {@link #property-hourHeight} change causes a change of sub tick granularity, a\n             * {@link #event-tickChange} event is fired.\n             *\n             * @prp {Number[]}\n             * @default\n             */\n            hourHeightBreakpoints : [70, 140, 300, 500],\n            /**\n             * By default, the most granular time tick level in the DayView's time axis is five minutes.\n             *\n             * Set this property to `true` to have the hour split into six minute ticks.\n             * @prp {Boolean}\n             * @default false\n             */\n            sixMinuteTicks : null,\n            /**\n             * The minimum height to which event blocks in a day cell may shrink. If an event has very\n             * short duration, whatever the {@link #config-hourHeight}, and regardless of\n             * {@link #function-zoomTo timeline zooming}, the event block will never drop below this height.\n             * @prp {Number|String}\n             * @default\n             */\n            minEventHeight : '1em',\n            /**\n             * The event block height at which the event display rendition switches to \"compact\"\n             * mode with the name, then start time both on the top line with a slightly smaller font.\n             * @prp {Number}\n             * @default\n             * @private\n             */\n            shortEventHeight : 32,\n            /**\n             * A function, or name of a function which produces a {@link DomConfig} block to create the current time indicator\n             * which is displayed in a day column which represents the current date. It is the developer's responsibility\n             * to add CSS classes and the appropriate CSS rules to produce the desire appearance.\n             *\n             * ```javascript\n             * currentTimeIndicatorRenderer : function() {\n             *     return {\n             *         className : 'my-current-time',\n             *         text      : 'NOW'\n             *     };\n             * }\n             *```\n             *\n             * The result is used to sync the DOM of the day column.\n             *\n             * @config {Function|String} currentTimeIndicatorRenderer\n             * @returns {DomConfig} An object which describes the DOM structure of the today indicator element.\n             */\n            currentTimeIndicatorRenderer : () => {\n                return {\n                    // Don't use a div so that :last-of-type can be used for multiple divs\n                    // inside a day column (Such as injected by the DayResourceView)\n                    tag           : 'span',\n                    className     : 'b-current-time-indicator',\n                    retainElement : true\n                };\n            },\n            /**\n             * An array of button specifications which add clickable icon buttons to the rendered\n             * event blocks which contain the following properties.\n             * @config {ActionButtonsConfig[]}\n             */\n            actionButtons : null,\n            /**\n             * Configure this as `true` to hide day columns which contain no events.\n             *\n             * <div class=\"note\">Use with care. This may result in no day columns being rendered\n             * for completely empty time ranges.</div>\n             * @prp {Boolean}\n             * @default false\n             */\n            hideEmptyDays : null,\n            autoRefresh : [\n                'hideEmptyDays'\n            ]\n        };\n    }\n    /**\n     * Returns the resource associated with this day view when used inside a {@link Calendar.widget.ResourceView}\n     * @readonly\n     * @member {Scheduler.model.ResourceModel} resource\n     */\n    construct(config) {\n        const me = this;\n        // If we are configured to not show vertical scrolling, we must know this so that\n        // scrollbar equalization can adjust to this.\n        me.configuredHiddenVerticalScroll = config.scrollable?.overflowY === 'hidden-scroll';\n        // Needs scope\n        me.cellMapEventFilter = me.cellMapEventFilter.bind(me);\n        super.construct(...arguments);\n        if (!me.startDate) {\n            me.startDate = me.month.date;\n        }\n        GlobalEvents.ion({\n            theme   : 'onThemeChange',\n            thisObj : me\n        });\n    }\n    get hasNonWorkingDays() {\n        return true;\n    }\n    updateZoomOnMouseWheel(zoomOnMouseWheel) {\n        if (zoomOnMouseWheel) {\n            // Only respond every 50ms to keep zooming response sane to a user.\n            this.zoomListener = EventHelper.on({\n                element   : this.dayContentElement,\n                wheel     : 'onDayContentMousewheel',\n                thisObj   : this,\n                throttled : {\n                    buffer : 100,\n                    alt    : preventDefault\n                }\n            });\n        }\n        else {\n            this.zoomListener?.();\n        }\n    }\n    get childItems() {\n        const\n            { allDayEvents } = this,\n            result           = super.childItems;\n        if (allDayEvents) {\n            result.push(allDayEvents);\n        }\n        return result;\n    }\n    get dayEndTime() {\n        return this.dayTime?.timeEnd ?? this._dayEndTime;\n    }\n    get dayStartTime() {\n        return this.dayTime?.timeStart ?? this._dayStartTime;\n    }\n    get dayStartShift() {\n        return this.dayTime?.startShift ?? this._dayStartShift;\n    }\n    changeDayEndTime(dayEndTime) {\n        // Update the UI on AF if needed\n        this.adjustCoreHours();\n        // Due to how the time axis is rendered with twelve flexed ticks in each hour tick, the view\n        // can only support day start and end times in whole hour granularity.\n        // Any end time is rounded *up*.\n        return Math.ceil((this.configuredDayEndTime = DayTime.parse(dayEndTime)) / MILLIS_PER_HOUR) * MILLIS_PER_HOUR;\n    }\n    updateDayEndTime(dayEndTime) {\n        // When more than one of these 3 configs changes at the same time, the following will trigger the yet to be\n        // realized configs, which will in turn call their updaters until the last of the batch runs its updater. In\n        // that updater call, the dayTime config will be set to the new DayTime instance that has all of the correct\n        // config values. The changeDayTime() method will detect a not-equals() DayTime and return it, which will run\n        // updateDayTime(). The updates for the non-final configs will also call changeDayTime() but their DayTime\n        // instances will all have the same properties and will not result in a call of updateDayTime().\n        //\n        // We also clear _dayTime so that the getters won't use the old value in our getter calls.\n        this._dayTime = null;\n        this.dayTime = new DayTime({\n            startShift : this.dayStartShift,\n            timeStart  : this.dayStartTime,\n            timeEnd    : dayEndTime\n        });\n    }\n    changeDayStartTime(dayStartTime) {\n        // Update the UI on AF if needed\n        this.adjustCoreHours();\n        // Due to how the time axis is rendered with twelve flexed ticks in each hour tick, the view\n        // can only support day start and end times in whole hour granularity.\n        // Any start time is rounded *down*.\n        return Math.floor((this.configuredDayStartTime = DayTime.parse(dayStartTime)) / MILLIS_PER_HOUR) * MILLIS_PER_HOUR;\n    }\n    adjustCoreHours() {\n        // If the app has not configured any coreHours, a start/end hour was rounded, then set the coreHours\n        // to the configured day so that the out of range parts are grayed out.\n        if (this.initialConfig.coreHours == null) {\n            const { _dayStartTime, _dayEndTime, configuredDayStartTime, configuredDayEndTime } = this;\n            if (_dayStartTime < configuredDayStartTime || _dayEndTime > configuredDayEndTime) {\n                this.coreHours = {\n                    start      : configuredDayStartTime || 0,\n                    end        : configuredDayEndTime   || 24,\n                    overlayDay : true\n                };\n            }\n            else {\n                this.coreHours = null;\n            }\n        }\n    }\n    updateDate(date, was) {\n        const { allDayEvents } = this;\n        if (allDayEvents) {\n            allDayEvents.date = date;\n        }\n        super.updateDate(date, was);\n    }\n    updateDayStartTime(dayStartTime) {\n        this._dayTime = null;\n        this.dayTime = new DayTime({\n            startShift : this.dayStartShift,\n            timeStart  : dayStartTime,\n            timeEnd    : this.dayEndTime\n        });\n    }\n    updateDayStartShift(dayStartShift) {\n        this._dayTime = null;\n        this.dayTime = new DayTime({\n            startShift : dayStartShift,\n            timeStart  : this.dayStartTime,\n            timeEnd    : this.dayEndTime\n        });\n    }\n    // dayTime\n    changeDayTime(dayTime) {\n        if (!dayTime) {\n            dayTime = new DayTime(this);\n        }\n        if (!this._dayTime?.equals(dayTime)) {\n            return dayTime;\n        }\n    }\n    updateDayTime(dayTime, was) {\n        const\n            me             = this,\n            { eventStore } = me;\n        if (eventStore) {\n            eventStore.registerDayIndex(dayTime);\n            was && eventStore.unregisterDayIndex(was);\n        }\n        if (!me.isConfiguring) {\n            const { startDate } = me;\n            me.syncHours();\n            me.setConfig({\n                date : startDate,\n                startDate\n            });\n            me.allDayEvents?.setConfig({\n                date : startDate,\n                dayTime,\n                startDate\n            });\n        }\n    }\n    dateKey(date) {\n        return this.dayTime.dateKey(date);\n    }\n    dayOfDate(date) {\n        return date && this.dayTime.dayOfDate(date);\n    }\n    /**\n     * Scrolls vertically to bring an event or a time into view.\n     * @param {Scheduler.model.EventModel|Date|Number} target The event to scroll to or\n     * a `Date` to read the hour value from, or an hour number.\n     * @param {Object} [options] How to scroll.\n     * @param {'start'|'end'|'center'|'nearest'} [options.block] How far to scroll the target.\n     * @param {Number} [options.edgeOffset] edgeOffset A margin around the target to bring into view.\n     * @param {Object|Boolean|Number} [options.animate] Set to `true` to animate the scroll by 300ms,\n     * or the number of milliseconds to animate over, or an animation config object.\n     * @param {Number} [options.animate.duration] The number of milliseconds to animate over.\n     * @param {String} [options.animate.easing] The name of an easing function.\n     * @param {Boolean} [options.highlight] Set to `true` to highlight the target when it is in view, _if the target is an `EventModel`_.\n     * @param {Boolean} [options.focus] Set to `true` to focus the target when it is in view.\n     * @param {Boolean} [options.x] Pass as `false` to disable scrolling in the `X` axis.\n     * @param {Boolean} [options.y] Pass as `false` to disable scrolling in the `Y` axis.\n     * @returns {Promise} A promise which is resolved when the target has been scrolled into view.\n     */\n    async scrollTo(target, options = { animate : true }) {\n        const\n            me             = this,\n            {\n                allDayEvents,\n                minDayWidth\n            }              = me,\n            scrollPromises = [];\n        if (me.scrollPromise) {\n            await me.scrollPromise;\n        }\n        // If the all day event row is in transition, wait until it's done\n        await allDayEvents?.heightAnimation;\n        // Component might get destroyed by the time promises above get resolved\n        if (me.isDestroyed) {\n            return;\n        }\n        // Convert hour number to a time in our start date\n        if (typeof target === 'number') {\n            target = DH.add(me.startDate, target, 'hour');\n        }\n        const targetIsDate = Boolean(target.getHours);\n        // CalendarMixin knows how to do this.\n        // If it's a Date It must not scroll vertically; we do that below.\n        await super.scrollTo(target, Object.assign({}, options, { y : !targetIsDate }));\n        // Scrolling to a Date is more granular in this view\n        if (targetIsDate) {\n            // If we are showing more than one day, ensure the date column is in view\n            if (me.duration > 1 && minDayWidth) {\n                scrollPromises.push(me.horizontalScroller.scrollIntoView(me.getDayElement(target), options));\n            }\n            target = target.getHours() + (target.getMinutes() / 60);\n            scrollPromises.push(me.scrollable.scrollTo(null, me.getPositionFromTime(target), options));\n            // There may be a horizontal as well as vertical component if we are in a multi day\n            // view with minDayWidth set causing overflow.\n            return Promise.all(scrollPromises);\n        }\n    }\n    getEventElement(event, date) {\n        return super.getEventElement(event, date) || this.allDayEvents?.getEventElement(event, date);\n    }\n    getEventElements(event) {\n        return super.getEventElements(event) || this.allDayEvents?.getEventElements(event);\n    }\n    /**\n     * Returns the pixel coordinate on the time axis for the passed time of day.\n     * @param {Date|Number|String} time The hour number, 'HH:MM' time or a `Date` instance.\n     * @internal\n     * @returns {Number}\n     */\n    getPositionFromTime(time) {\n        // If it's not possible, return 0. DayTime returns the positive delta.\n        if (DayTime.parse(time) < DayTime.parse(this.dayStartTime) - this.dayStartShift) {\n            return 0;\n        }\n        return this.dayTime.delta(time, 'h') * this.hourHeight;\n    }\n    updateShowAllDayHeader(showAllDayHeader) {\n        const\n            me = this,\n            { _allDayEvents } = me;\n        me._cellMap?.clear();\n        if (_allDayEvents) {\n            _allDayEvents._cellMap?.clear();\n            _allDayEvents.element.classList.toggle('b-hide-allday-header', !showAllDayHeader);\n            _allDayEvents.refresh();\n        }\n        me.refresh();\n    }\n    changeAllDayEvents(alldayEvents, oldAlldayEvents) {\n        // Shortcut nullifying the allDayEvents property\n        if (!alldayEvents) {\n            return oldAlldayEvents?.destroy();\n        }\n        this.getConfig('date');  // ensure we have startDate/endDate setup if we were given a date\n        // CalendarRow controls its own height based on event count and expanded/collapsed state.\n        // But the max height it may scroll in within a DayView is controlled by us, so treat maxHeight\n        // configured on the allDayEvents as a request for maxAllDayHeight\n        if (alldayEvents.maxHeight) {\n            this.maxAllDayHeight = alldayEvents.maxHeight;\n            alldayEvents.maxHeight = null;\n        }\n        const\n            me = this,\n            {\n                autoCreate,\n                dayHeaderRenderer,\n                overflowButtonRenderer,\n                overflowClickAction,\n                overflowPopup,\n                avatarRendering,\n                range\n            }      = me,\n            result = CalendarRow.reconfigure(oldAlldayEvents, alldayEvents, {\n                owner : me,\n                defaults : {\n                    calendar : me.calendar,\n                    parent   : me,\n                    rtl      : me.rtl,\n                    cls : {\n                        'b-dayview-schedule-container' : 1,\n                        'b-dayview-initializing'       : 1\n                    },\n                    // If we were configured with any of the following, they were obviously intended for use\n                    // by the all day row\n                    [overflowPopup !== undefined ? 'overflowPopup' : '_']     : overflowPopup,\n                    [overflowButtonRenderer ? 'overflowButtonRenderer' : '_'] : overflowButtonRenderer,\n                    [overflowClickAction ? 'overflowClickAction' : '_']       : overflowClickAction,\n                    [dayHeaderRenderer ? 'dayHeaderRenderer' : '_']           : dayHeaderRenderer,\n                    [avatarRendering ? 'avatarRendering' : '_']               : avatarRendering,\n                    // This view always autoCreates allDay events starting at midnight\n                    autoCreate : autoCreate !== false ? {\n                        newName   : autoCreate.newName,\n                        gesture   : autoCreate.gesture,\n                        startHour : 0,\n                        duration  : '1 day'\n                    } : false,\n                    // Only signal a dayNumberClick on a click on the day number element.\n                    // Allow clicks in the surrounding header to be used to create new events.\n                    dayNameSelector : '.b-day-name-date',\n                    // Must use the same configured event filter as us in addition to only showing\n                    // the all day and interDay events\n                    eventFilter : e => me.showAllDayHeader && me.isAllDayEvent(e) && (!me.eventFilter || me.eventFilter(e)),\n                    dayStartTime         : me.dayStartTime,\n                    dayEndTime           : me.dayEndTime,\n                    dayStartShift        : me.dayStartShift,\n                    eventRenderer        : me.eventRenderer,\n                    eventStore           : me.eventStore,\n                    month                : me.month,\n                    fullWeek             : me.duration === 1 && !me.dayTime.startShift,\n                    filterEventResources : me.filterEventResources,\n                    startDate                 : me.startDate,\n                    [range ? 'range' : '_']   : range,\n                    [range ? '_' : 'endDate'] : me.endDate,\n                    nonWorkingDays    : me.nonWorkingDays,\n                    nonWorkingDayCls  : me.nonWorkingDayCls,\n                    weekendCls        : me.weekendCls,\n                    weekStartDay      : me.weekStartDay,\n                    defaultCalendar   : me.defaultCalendar,\n                    emptyCellRenderer : me.emptyCellRenderer,\n                    hideEmptyDays     : me.hideEmptyDays,\n                    internalListeners : {\n                        heightChange      : 'updateElementLayout',\n                        refresh           : 'updateElementLayout',\n                        catchall          : 'relayAllDayEvents',\n                        showoverflowpopup : 'onAllDayOverflowPopupShown',\n                        thisObj           : me\n                    },\n                    // If all day row does not render events, the day part must fire\n                    // the creation signal so that responders such as EventEdit can do right things.\n                    editAutoCreatedEvent(eventRecord) {\n                        (me.showAllDayHeader ? this : me).trigger('eventAutoCreated', {\n                            eventRecord\n                        });\n                    },\n                    // If we are not showing all day events, always return an empty Map\n                    createCellMap() {\n                        return me.showAllDayHeader ? this.constructor.prototype.createCellMap.call(this, ...arguments) : (me.emptyMap || (me.emptyMap = new Map()));\n                    }\n                },\n                setup(config) {\n                    // We need to postprocess the inheriting of hideNonWorkingDays after\n                    // we know how external configurations have played into the full config.\n                    // If we are showing only one day, then hiding non working days is invalid\n                    config.hideNonWorkingDays = me.duration === 1 && !config.fullWeek ? false : me._hideNonWorkingDays;\n                }\n            });\n        // It's null on destroy\n        if (result) {\n            // The all day row must control its own height.\n            // These configs must be ignored.\n            result.height = result.flex = null;\n            // The all day row is not in control of its date range.\n            // If we ever have to scroll to another date, this entire view does that\n            // before handing control on to the all day row widget.\n            me.originalAllDayEventsScrollTo = result.scrollTo;\n            result.scrollTo = me.allDayEventsScrollTo.bind(me);\n        }\n        return result;\n    }\n    // We have to be able to yield the underbar property so that Calendar can ask if there is an\n    // overflowPopup for a child view without triggering its creation.\n    onAllDayOverflowPopupShown({ overflowPopup }) {\n        this._overflowPopup = overflowPopup;\n    }\n    // This is what gets called when the all day row is asked to scrollTo\n    // We have control of what it does. It does not have control of its date range.\n    allDayEventsScrollTo(target) {\n        const\n            me             = this,\n            newDate        = target.isEvent ? target.startDate : me.changeEndDate(target),\n            dateIntersects = target.isEvent ? DH.intersectSpans(me.startDate, me.endDate, target.startDate, target.endDate) : DH.betweenLesser(newDate, me.startDate, me.endDate);\n        // If we do not encompass the date, move to the date.\n        if (!dateIntersects) {\n            me.date = newDate;\n        }\n        // Now CalendarRow can have at it.\n        return me.originalAllDayEventsScrollTo.call(me.allDayEvents, ...arguments);\n    }\n    updateAutoCreate(autoCreate) {\n        // Use the property name so as not to ingest the lazy config at configure time\n        const { _allDayEvents } = this;\n        super.updateAutoCreate?.(autoCreate);\n        if (_allDayEvents) {\n            _allDayEvents.autoCreate = autoCreate ? {\n                newName   : autoCreate.newName,\n                gesture   : autoCreate.gesture,\n                startHour : 0,\n                duration  : '1 day'\n            } : false;\n        }\n    }\n    updateWeekStartDay(weekStartDay, oldWeekStartDay) {\n        super.updateWeekStartDay?.(weekStartDay);\n        if (!this.isConfiguring && this.allDayEvents) {\n            this.allDayEvents.weekStartDay = weekStartDay;\n        }\n    }\n    updateEventStore(eventStore, was) {\n        super.updateEventStore(eventStore, was);\n        const { dayTime } = this;\n        if (dayTime) {\n            eventStore?.registerDayIndex(dayTime);\n            was?.unregisterDayIndex(dayTime);\n        }\n    }\n    /**\n     * The {@link Calendar.widget.OverflowPopup} instance that the {@link #property-allDayEvents}\n     * may show when events for one day overflow the available space.\n     * @member {Calendar.widget.OverflowPopup} overflowPopup\n     * @readonly\n     */\n    get overflowPopup() {\n        // If we don't have _allDayEvents yet, return the underlying config.\n        return this._allDayEvents?.overflowPopup || this._overflowPopup;\n    }\n    get stepUnit() {\n        return this.duration > 1 ? `${this.duration} ${this.L('L{daysUnit}')}` : this.L('L{dayUnit}');\n    }\n    get eventContentElement() {\n        return this.dayContainerElement;\n    }\n    getDateFromDomEvent(domEvent, precise = false) {\n        let date = super.getDateFromDomEvent(domEvent);\n        const\n            me = this,\n            el = DomHelper.getEventElement(domEvent);\n        // Override to add a time component to the DOM event's date if we receive and event (not an element) and\n        // the event was in the day container.\n        if (date && el !== domEvent && me.dayContainerElement.contains(el)) {\n            date = DH.add(date,\n                me.dayStartHour - me.dayStartShift / 3600000 +\n                   (domEvent.clientY - me.scrollable.element.getBoundingClientRect().y + me.scrollable.y) / me.hourHeight,\n                'hour');\n            if (!precise) {\n                date = DH[me.timeSnapType](date, me.increment);\n            }\n        }\n        return date;\n    }\n    getDateFromPosition(clientX, clientY, local = false, keyParser) {\n        const\n            me       = this,\n            {\n                eventContentElement,\n                allDayEvents\n            }        = me,\n            rect     = local ? zeroRect : Rectangle.fromScreen(eventContentElement).roundPx().translate(-eventContentElement.scrollLeft),\n            width    = eventContentElement.scrollWidth,\n            height   = me.hourHeight * me.getDayLength('hour'),\n            localX   = local ? clientX : clientX - rect.x,\n            dx       = me.rtl ? me.eventContentElement.offsetWidth - localX : localX,\n            dy       = clientY - rect.y,\n            // We have to compare element position because day columns may have different widths\n            overCell = me.getDayElementFromX(clientX),\n            date     = me.getDateFromElement(overCell, keyParser);\n        if (allDayEvents && (dx < 0 || width < dx || dy < 0 || height < dy)) {\n            // CalendarDrag will pass this view's DayTime so pass it into CalendarRow\n            return allDayEvents.getDateFromPosition(clientX, clientY, keyParser);\n        }\n        // DateHelper.add() operates in UTC and therefore does not respect DST, so we cannot do this:\n        //   DH.add(DH.clearTime(date), me.dayStartMs + Math.floor(dy / height * me.getDayLength()), 'ms')\n        // Instead, we leverage setMilliseconds()'s ability to handle denormalized values:\n        DH.clearTime(date, /*clone = */false);\n        date.setMilliseconds(date.getMilliseconds() + me.dayStartMs + Math.floor(dy / height * me.getDayLength()));\n        return DH[me.timeSnapType](date, me.increment);\n    }\n    // We must implement the CalendarMixin interface.\n    // All views must expose a doRefresh method.\n    doRefresh() {\n        const me = this;\n        if (me.isVisible) {\n            // Opt out of animations while we refresh to avoid reused elements resizing\n            DomHelper.addTemporaryClass(me.element, 'b-no-transitions', 200, me);\n            const children = [];\n            // Calculate this for getDayDomConfig only once per refresh.\n            me.today = me.dayTime.startOfDay(me.calendar?.dateTimeNow || new Date());\n            // Create day cell child array. DomSync ignores null array entries which is what\n            // getDayDomConfig returns for hidden days.\n            for (const date = new Date(me.startDate); date < me.endDate; date.setDate(date.getDate() + 1)) {\n                children.push(me.getDayDomConfig(date));\n            }\n            DomSync.sync({\n                targetElement : me.dayContainerElement,\n                domConfig     : {\n                    onlyChildren : true,\n                    children,\n                    // Match existing data-date elements first and ensure DOM order matches\n                    // children order.\n                    syncOptions : {\n                        syncIdField      : 'date',\n                        releaseThreshold : 0,\n                        strict           : true\n                    }\n                }\n            });\n            // In case height has changed since last refresh.\n            me.refreshDayBackground();\n            me.refreshCount = (me.refreshCount || 0) + 1;\n            me.syncCurrentTimeIndicator();\n            /**\n             * Fires when this DayView refreshes.\n             * @param {Calendar.widget.DayView} source The triggering instance.\n             * @event refresh\n             */\n            me.trigger('refresh');\n        }\n    }\n    /**\n     * Gets the full event load which the passed date contains for this view. Includes events\n     * in the all day row as well as in the main day area.\n     * @param {Date|String} date The date or `YYYY-MM-DD` key for which to gather events.\n     * @param {Date} startDate To sync this view's range with the caller's range. Used by\n     * this view's {@link #property-allDayEvents} view.\n     * @returns {Scheduler.model.EventModel[]}\n     * @private\n     */\n    getEventsForDay(date, startDate) {\n        const\n            me               = this,\n            key              = typeof date === 'string' ? date : me.dayTime.dateKey(date),\n            { allDayEvents } = me;\n        // Ensure we are in sync with our caller\n        if (startDate && me.startDate - startDate) {\n            me._cellMap?.clear();\n            me.startDate = startDate;\n        }\n        const result = me.cellMap.get(key)?.events?.slice() || [];\n        if (allDayEvents) {\n            if (allDayEvents.startDate - me.startDate) {\n                allDayEvents._cellMap?.clear();\n                allDayEvents.startDate = me.startDate;\n            }\n            result.push.apply(result, allDayEvents.cellMap.get(key)?.renderedEvents || emptyArray);\n        }\n        // Some events arrays are raw EventModels, some are event info blocks.\n        // We extract into an array of EventModels.\n        return result.map(extractEventRecord);\n    }\n    getBaseDayDomConfig(date) {\n        const\n            me      = this,\n            key     = me.dayTime.dateKey(date),\n            day     = date.getDay(),\n            // Skip hidden, nonworking days (unless we're a single day view).\n            // Skip empty days if configured to do so.\n            skipDay = (me.hiddenNonWorkingDays[day] && me.duration !== 1) || (me.hideEmptyDays && !me.getEventsForDay(key).length);\n        // Return nullish for skipped days.\n        if (!skipDay) {\n            const\n                cellData       = me.cellMap.get(key) || me.createCellData(date), // dayCellRenderer & timeRanges need one\n                nonWorkingDays = me.nonWorkingDays || me.month.nonWorkingDays;\n            return [cellData, {\n                dataset : {\n                    date : key\n                },\n                className : {\n                    'b-dayview-day-detail'   : 1,\n                    [me.dayCellCls]          : 1,\n                    [me.nonWorkingDayCls]    : nonWorkingDays[day] || false,\n                    [me.weekendCls]          : DH.weekends[day],\n                    [me.todayCls]            : !(date - me.today),\n                    'b-last-cell'            : !(date - me.lastVisibleDate),\n                    [`b-day-of-week-${day}`] : 1\n                },\n                style    : {},\n                children : {\n                    inset : {\n                        className : {\n                            'b-dayview-inset' : 1\n                        }\n                    },\n                    events : {\n                        className : {\n                            'b-dayview-event-container' : 1\n                        },\n                        children : []\n                    }\n                },\n                // Match existing data-event-id elements first and ensure DOM order matches\n                // children order.\n                syncOptions : {\n                    syncIdField      : 'eventId',\n                    releaseThreshold : 0,\n                    strict           : true\n                }\n            }];\n        }\n    }\n    getDayDomConfig(date) {\n        const\n            me   = this,\n            base = me.getBaseDayDomConfig(date);\n        if (base) {\n            const\n                { dayCellRenderer } = me,\n                [cellData, dayDomConfig] = base;\n            if (me.coreHours) {\n                // If our coreHours yields a callable function, ask it the coreHours for this date.\n                // If it is an array, extract the coreHours for the day.\n                // Set up the background image to create the effect.\n                dayDomConfig.style.backgroundImage = me.getCoreHoursGradient(me.getCoreHoursForDate(date));\n            }\n            // Render events if any. Call even if we have no events to allow beforeLayoutEvents event to fire and\n            // listeners to act (e.g., timeRanges)\n            me.renderEvents(cellData, dayDomConfig);\n            return DomHelper.normalizeChildren(\n                dayCellRenderer ? me.callback(dayCellRenderer, me, [dayDomConfig, cellData]) : dayDomConfig);\n        }\n    }\n    /**\n     * Calculates A CSS `linear-gradient` specification from a {@link #config-coreHours} definition object.\n     *\n     * A core hours object consists ot two properties, `start` and `end`. It may also be an array containing\n     * multiple core hours definitions.\n     * @param {Object} coreHours\n     * @param {Number|String} coreHours.start The start hour or start time string `HH:MM` of the core working hours.\n     * @param {Number|String} coreHours.end The start hour or end time string `HH:MM` of the core working hours.\n     * @returns A String containing a `linear-gradient` style which shades non-working times using the\n     * `--dayview-outside-core-hours-color` CSS variable.\n     * @internal\n     */\n    getCoreHoursGradient(coreHours) {\n        // No background image gradient if no core hours specified.\n        if (!coreHours) {\n            return '';\n        }\n        const\n            me          = this,\n            { dayTime } = me,\n            dayEnd      = dayTime.duration('h'),\n            result      = ['linear-gradient(to bottom'];\n        // Convert a single time block into an array, we need to handle multiple\n        // time blocks.\n        coreHours = ArrayHelper.asArray(coreHours);\n        let lastEnd = 0;\n        for (let i = 0, { length } = coreHours; i < length; i++) {\n            const\n                c       = coreHours[i],\n                start   = Math.max(dayTime.delta(c.start, 'h'), 0)    / dayEnd * 100,\n                end     = Math.min(dayTime.delta(c.end, 'h'), dayEnd) / dayEnd * 100;\n            // If the working block for the day is the whole day, we don't need a background\n            if (length === 1 && start === 0 && end === 100) {\n                return '';\n            }\n            // Blocked hours prior to this working block\n            if (lastEnd < start) {\n                result.push(`var(--dayview-outside-core-hours-color) ${DomHelper.percentify(lastEnd)}, var(--dayview-outside-core-hours-color) ${DomHelper.percentify(start)}`);\n            }\n            result.push(`transparent ${DomHelper.percentify(start)}, transparent ${DomHelper.percentify(end)}`);\n            lastEnd = end;\n        }\n        // Closing blocked out hours if any\n        if (lastEnd < 100) {\n            result.push(`var(--dayview-outside-core-hours-color) ${DomHelper.percentify(lastEnd)}, var(--dayview-outside-core-hours-color) 100%`);\n        }\n        return result.join(',') + ')';\n    }\n    getCoreHoursForDate(date) {\n        const { coreHours } = this;\n        // It's an array for each day\n        if (coreHours.length === 7) {\n            return coreHours[date.getDay()];\n        }\n        // Object or array of objects\n        if (typeof coreHours === 'object') {\n            // Core hours as a simple object only applies to dates if overlayDay set.\n            return coreHours.overlayDay ? coreHours : null;\n        }\n        // Must be a callback\n        return this.callback(coreHours, this, [date]);\n    }\n    /**\n     * Refreshes the event layout inside a day column in case the stacking order becomes incorrect.\n     * @param {Date} date\n     * @internal\n     */\n    refreshDayEvents(date) {\n        const me = this;\n        // Promote YYYY-MM-DD keys to Dates\n        date = me.changeEndDate(date);\n        // getDayDomConfig reads this.\n        me.today = me.dayTime.startOfDay(new Date());\n        const domConfig = me.getDayDomConfig(date);\n        // Opt out of animations while we refresh to avoid reused elements resizing\n        DomHelper.addTemporaryClass(me.element, 'b-no-transitions', 200, me);\n        domConfig.onlyChildren = true;\n        DomSync.sync({\n            targetElement : me.getDayElement(date),\n            domConfig\n        });\n    }\n    /**\n     * Pushes event bar DomConfig definitions into the `children` property of the passed\n     * `dayDomConfig` object\n     * @param {DayCell} cellData An object containing information about the day cell being created.\n     * @param {DomConfig} dayDomConfig The DomConfig element definition for the day cell.\n     * @internal\n     */\n    renderEvents(cellData, dayDomConfig) {\n        const\n            me                    = this,\n            context               = me.eventLayout.layoutEvents(cellData, dayDomConfig),\n            { items }             = context,\n            { eventSpacing, rtl } = me;\n        for (const item of items) {\n            const eventDomConfig = me.createEventDomConfig({ eventRecord : item.eventRecord });\n            me.insertActionButtons(eventDomConfig, item.eventRecord, cellData);\n            // Set the classes for the event overflowing the *visible* day if it's cropped.\n            eventDomConfig.className['b-starts-above'] = item.startsBefore;\n            eventDomConfig.className['b-ends-below'] = item.endsAfter;\n            if (item.cluster.items.length > 1) {\n                eventDomConfig.className['b-cal-in-cluster'] = 1;\n            }\n            Object.assign(eventDomConfig.style, {\n                // Leave eventSpacing pixels at the bottom by reducing the available content height.\n                // The event-wrap's default background-color is transparent.\n                // This is to create the appearance of the event-spacing config.\n                [eventSpacing ? 'padding-bottom' : ''] : `${eventSpacing}px`,\n                ...item.getStyles(rtl)\n            });\n            dayDomConfig.children.events.children.push(eventDomConfig);\n        }\n        me.trigger('renderEvents', {\n            context\n        });\n    }\n    insertActionButtons(eventDomConfig, eventRecord, cellData) {\n        const { actionButtons } = this;\n        if (actionButtons) {\n            eventDomConfig.children.push({\n                className : 'b-event-action-buttons',\n                children  : actionButtons.map((actionButton, index) => {\n                    return {\n                        tag       : 'button',\n                        className : {\n                            'b-tool'           : 1,\n                            'b-icon'           : 1,\n                            [actionButton.cls] : 1\n                        },\n                        dataset : {\n                            index,\n                            btip : actionButton.tooltip\n                        }\n                    };\n                })\n            });\n        }\n    }\n    onEventClick({ domEvent }) {\n        const button = domEvent.target.closest('.b-event-action-buttons [data-index]');\n        if (button) {\n            this.callback(this.actionButtons[Number(button.dataset.index)].handler, this, arguments);\n            return false;\n        }\n    }\n    get overflowElement() {\n        // The vertical scrolling element\n        return this.dayContentElement;\n    }\n    get cellMap() {\n        // If the cellMap has not been populated, create it.\n        return this._cellMap?.populated ? this._cellMap : this.createCellMap();\n    }\n    get bodyConfig() {\n        const\n            me            = this,\n            {\n                allDayEvents,\n                maxAllDayHeight\n            }             = me;\n        return Object.assign(super.bodyConfig, {\n            children : {\n                alldayRowElement : allDayEvents ? {\n                    className : {\n                        'b-dayview-allday-row' : 1\n                    },\n                    style : {\n                        [maxAllDayHeight ? 'maxHeight' : ''] : DomHelper.setLength(maxAllDayHeight)\n                    },\n                    children : {\n                        cornerElement : {\n                            className : {\n                                'b-dayview-allday-row-start'  : 1,\n                                'b-dayview-allday-autoheight' : allDayEvents.autoHeight\n                            },\n                            children : {\n                                allDayTextElement : {\n                                    className : 'b-dayview-allday-text',\n                                    html      : me.L('L{EventEdit.All day}')\n                                },\n                                allDayToggleIcon : {\n                                    tag       : 'button',\n                                    className : 'b-expand-allday-button b-icon b-icon-expand-row',\n                                    dataset   : {\n                                        btip : 'L{DayView.expandAllDayRow}'\n                                    }\n                                }\n                            }\n                        },\n                        allDayEvents : allDayEvents?.element,           // May have been configured away\n                        $scrollerPad : DomHelper.scrollBarPadElement    // $ prefix -> not a reference\n                    }\n                } : null,\n                dayContentElement : {\n                    tabIndex  : -1,\n                    className : {\n                        'b-dayview-day-content' : 1\n                    },\n                    children : {\n                        timeAxisElement : {\n                            children  : me.getTimeElementConfigs(),\n                            className : {\n                                'b-timeaxis-container' : 1\n                            }\n                        },\n                        dayContainerElement : {\n                            className : {\n                                'b-dayview-day-container' : 1\n                            }\n                        }\n                    }\n                },\n                horizontalScrollerElement : {\n                    className : 'b-virtual-scrollers b-hide-display',\n                    children  : [{\n                        className : 'b-virtual-scroller'\n                    }, DomHelper.scrollBarPadElement]\n                }\n            }\n        });\n    }\n    onDayContentMousewheel(e) {\n        if (e.ctrlKey) {\n            e.preventDefault();\n            const\n                pointerOffsetY = e.clientY - this.scrollable.element.getBoundingClientRect().y,\n                reqDelta       = -Math.min(Math.abs(e.deltaY), 10) * Math.sign(e.deltaY);\n            this.zoomBy(reqDelta, pointerOffsetY);\n        }\n    }\n    /**\n     * Zooms the timeline by incrementing the {@link #property-hourHeight} by the requested pixel delta.\n     * @param {Number} reqDelta The number of pixels by which to increment the {@link #property-hourHeight}\n     * @param {Number|String} [zoomCenter] The center time to zoom in to. This may be a number of pixels\n     * down the DayView viewport, or it may be a time to use as the center in the format `HH:MM:ss`.\n     * __If omitted, the visual central time in the viewport is used__.\n     *\n     * Note that this will usually require a layout update which happens in the next animation frame\n     * so to postprocess the new state of the view, the returned Promise must be awaited.\n     * @async\n     */\n    zoomBy(reqDelta, zoomCenter = Math.min(this.scrollable.scrollHeight, this.scrollable.clientHeight) / 2 - 1) {\n        return new Promise(resolve => {\n            // Ensure the layout is up to date before we measure things\n            this.updateElementLayout.cancel();\n            const\n                me             = this,\n                {\n                    scrollable,\n                    hourHeight : oldHourHeight\n                }              = me,\n                // Round the zoom center date to our configured snap point so that the view stays steady.\n                // Use x as center to 99% likely avoid Sundays which are DST switch days which break fixed timepoint\n                zoomCenterTime = DH.round(typeof zoomCenter === 'number' ? me.getDateFromPosition(me.dayContainerElement.offsetWidth / 2, zoomCenter + scrollable.y, true) : DH.parse(zoomCenter, 'HH:mm:ss'), me.increment),\n                hoursInDay     = me.getDayLength('h'),\n                newHourHeight  = Math.max(oldHourHeight + reqDelta, me.dayContentClientHeight / hoursInDay),\n                pointerOffsetY = me.getPositionFromTime(zoomCenterTime) - scrollable.y;\n            if (oldHourHeight !== newHourHeight) {\n                // When the day layout has been done, keep the zoom center time still.\n                me.ion({\n                    layoutUpdate : () => {\n                        scrollable.scrollTo(null, me.getPositionFromTime(zoomCenterTime) - pointerOffsetY);\n                        // Sync partners synchronously so there's no delay in a multi-view mode like ResourceView\n                        scrollable.syncPartners(false, true);\n                        resolve();\n                    },\n                    once : true,\n                    prio : 1000\n                });\n                // Zooming obviously breaks fitting the hours into the space.\n                me.fitHours = false;\n                // Invalidate the day layout\n                me.hourHeight = newHourHeight;\n            }\n            else {\n                resolve();\n            }\n        });\n    }\n    /**\n     * Zooms the timeline by setting the {@link #property-hourHeight} to the requested pixel value.\n     * @param {Number} newHourHeight The new {@link #property-hourHeight} in pixels.\n     * @param {Number|String} [zoomCenter] The center time to zoom in to. This may be a number of pixels\n     * down the DayView viewport, or it may be a time to use as the center in the format `HH:MM:ss`.\n     * __If omitted, the visual center of the viewport is used__.\n     *\n     * Note that this will usually require a layout update which happens in the next animation frame\n     * so to postprocess the new state of the view, the returned Promise must be awaited.\n     * @async\n     */\n    zoomTo(newHourHeight, zoomCenter) {\n        return this.zoomBy(newHourHeight - this.hourHeight, zoomCenter);\n    }\n    /**\n     * Zooms to fit all visible events within the vertical scroll viewport.\n     * @param {Object} [options] How to scroll.\n     * @param {Number} [options.edgeOffset] edgeOffset A margin around the target to bring into view.\n     * @param {Object|Boolean|Number} [options.animate] Set to `true` to animate the scroll by 300ms,\n     * or the number of milliseconds to animate over, or an animation config object.\n     * @param {Number} [options.animate.duration] The number of milliseconds to animate over.\n     * @param {String} [options.animate.easing] The name of an easing function.\n     * @returns {Promise} A promise which is resolved when the target has been scrolled into view.\n     * @async\n     */\n    async zoomToFit(options) {\n        const\n            me     = this,\n            events = me.eventStore.getEvents({\n                startDate : me.startDate,\n                endDate   : me.endDate,\n                filter    : e => !e.isInterDay\n            }),\n            [start, end] = events.reduce((r, e) => {\n                // Round times to nearest half hour\n                const\n                    startHour = DH.getTimeOfDay(DH.floor(e.startDate, '0.5h'), 'h'),\n                    endHour   = DH.getTimeOfDay(DH.ceil(e.endDate, '0.5h'), 'h');\n                return [(startHour < r[0]) ? startHour : r[0], (endHour > r[1]) ? endHour : r[1]];\n            }, [24, 0]);\n        await me.zoomTo(Math.floor(me.scrollable.clientHeight / (end - start)));\n        await me.scrollTo(start, options);\n    }\n    createCellMap() {\n        const { showAllDayHeader } = this;\n        // We only want events which start and end *in* each date.\n        // These will not propagate forwards anyway, so skip propagation.\n        // By default filter by our dayFilter which skips events in non working days\n        // and events outside of our configured start/end time range.\n        // We must also honour any configured eventFilter\n        return super.createCellMap({\n            dayTime : this.dayTime,\n            // Normally, DayView only displays intraday events, so only those which start *on*\n            // the cell's date and only those which fit completely *inside* the cell's date.\n            // showDayHeader flips those assumptions because all intersecting events need to\n            // be collected because we have nowhere else to show interday events.\n            startOnly     : showAllDayHeader,\n            allowPartial  : !showAllDayHeader,\n            skipPropagate : true,\n            rawEvents     : true,\n            filter        : this.cellMapEventFilter\n        });\n    }\n    cellMapEventFilter(eventRecord) {\n        const { dayTime, hiddenNonWorkingDays, showAllDayHeader } = this;\n        // DayView rejects events which span days unless showAllDayHeader is false.\n        // In which case we have to show them across multiple day cells.\n        return (!showAllDayHeader || (dayTime.isIntraDay(eventRecord) && !eventRecord.allDay)) &&\n            // Event is eligible if it's within our view's day start/end range\n            dayTime.intersects(eventRecord) &&\n            // AND it's not in a hidden nonworking day\n            !hiddenNonWorkingDays[dayTime.dayOfWeek(eventRecord.startDate)];\n    }\n    getDayLength(as = 'ms') {\n        return this.dayTime.duration(as);\n    }\n    changeIncrement(increment) {\n        if (typeof increment === 'string') {\n            increment = DH.parseDuration(increment);\n            return DH.as('ms', increment.magnitude, increment.unit);\n        }\n        return increment;\n    }\n    get dayStartHour() {\n        return this.dayStartTime == null ? 0 : Math.floor(this.dayStartTime / MILLIS_PER_HOUR);\n    }\n    get dayEndHour() {\n        return this.dayEndTime == null ? 24 : Math.ceil(this.dayEndTime / MILLIS_PER_HOUR);\n    }\n    get dayStartMs() {\n        return this.dayStartTime == null ? 0 : this.dayStartTime;\n    }\n    get dayEndMs() {\n        return this.dayEndTime == null ? 24 * MILLIS_PER_HOUR : this.dayEndTime;\n    }\n    /**\n     * This is the increment in milliseconds from the floored day start hour to the configured day start time.\n     *\n     * This is used to calculate the offset by which to move the timeAxis ticks when the start is not on an hour boundary.\n     * @internal\n     */\n    get dayStartOffset() {\n        return (this.dayTime.startTimeOffsetMs / MILLIS_PER_HOUR) * this.hourHeight;\n    }\n    changeEventFilter(filter) {\n        if (filter === undefined) {\n            filter = event => !this.isAllDayEvent(event);\n        }\n        return filter;\n    }\n    changeEventLayout(config, existing) {\n        return DayLayout.reconfigure(existing, config, {\n            owner    : this,\n            defaults : {\n                owner : this\n            }\n        });\n    }\n    updateHideEmptyDays(hideEmptyDays) {\n        if (!this.isConfiguring) {\n            this._allDayEvents && (this._allDayEvents.hideEmptyDays = hideEmptyDays);\n        }\n    }\n    updateNonWorkingDays(nonWorkingDays) {\n        const me = this;\n        super.updateNonWorkingDays?.(nonWorkingDays);\n        me._allDayEvents && (me._allDayEvents.nonWorkingDays = nonWorkingDays);\n        if (!me.isConfiguring) {\n            me._cellMap?.clear();\n            me.refresh();\n        }\n    }\n    updateMaxAllDayHeight(maxAllDayHeight) {\n        if (this.alldayRowElement) {\n            DomHelper.setLength(this.alldayRowElement, 'max-height', maxAllDayHeight);\n        }\n    }\n    get hideNonWorkingDays() {\n        // Hiding non working days is only valid for multi day views\n        return (this._hideNonWorkingDays === true && this.duration === 1) ? false : this._hideNonWorkingDays;\n    }\n    set hideNonWorkingDays(hideNonWorkingDays) {\n        super.hideNonWorkingDays = hideNonWorkingDays;\n    }\n    updateHideNonWorkingDays(hideNonWorkingDays) {\n        const\n            me                = this,\n            { _allDayEvents } = me;\n        super.updateHideNonWorkingDays(hideNonWorkingDays);\n        // Pass out *property* here, because if we're a single day view, hideNonWorkingDays\n        // always yields false. Hiding non working days is only valid for multi day views\n        _allDayEvents && (_allDayEvents.hideNonWorkingDays = me.duration === 1 && !_allDayEvents.fullWeek ? false : me._hideNonWorkingDays);\n        if (!me.isConfiguring) {\n            me._cellMap?.clear();\n            me.refresh();\n        }\n    }\n    syncHours() {\n        const me = this;\n        me._cellMap?.clear();\n        DomSync.sync({\n            targetElement : me.timeAxisElement,\n            domConfig     : {\n                onlyChildren : true,\n                children     : me.getTimeElementConfigs()\n            }\n        });\n        // We need to update and measure immediately, before the refresh\n        me.updateElementLayout.now();\n        me.refresh();\n    }\n    syncCurrentTimeIndicator() {\n        const\n            me          = this,\n            now         = me.calendar?.dateTimeNow || new Date(),\n            dayElement  = me.getDayElement(now),\n            {\n                currentTimeIndicator,\n                dayTime,\n                endDate,\n                startDate\n            }           = me;\n        if (startDate && endDate) {\n            if (dayElement && DH.betweenLesser(now, startDate, endDate) && dayTime.contains(now)) {\n                const\n                    dayLengthMs = me.getDayLength('ms'),\n                    nowMS       = dayTime.delta(now, 'ms');\n                if (currentTimeIndicator.parentNode !== dayElement) {\n                    dayElement?.appendChild(currentTimeIndicator);\n                }\n                currentTimeIndicator.style.top = DomHelper.percentify(nowMS / dayLengthMs * 100);\n            }\n            else {\n                currentTimeIndicator.remove();\n            }\n        }\n    }\n    get currentTimeIndicator() {\n        return this._currentTimeIndicator || (this._currentTimeIndicator = DomHelper.createElement(this.callback(this.currentTimeIndicatorRenderer, this)));\n    }\n    getTimeElementConfigs() {\n        const\n            me            = this,\n            result        = [],\n            { dayTime }   = me,\n            { startHour } = dayTime,\n            date          = new Date(2000, 5, 15, startHour, 0, 0),\n            hours         = dayTime.duration('h');\n        for (let h, i = 1; i <= hours; i++) {\n            // Ticks come from the previous hour.\n            // The hour value is the ending tick of the hour cell\n            const ticks = me.createLeafTicks(date);\n            // Move to the ending hour\n            date.setHours(h = (date.getHours() + 1));\n            date.setMinutes(0);\n            result.push({\n                className : `b-dayview-timeaxis-time b-dayview-timeaxis-time-${h < 10 ? '0' : ''}${h}`,\n                children  : ticks.concat([{\n                    className : 'b-dayview-timeaxis-tick b-dayview-hour-tick',\n                    text      : DH.format(date, me.timeFormat)\n                }])\n            });\n        }\n        // TimeAxis can only show the core hours if they are the same for every day\n        if (me.coreHours && me._simpleCoreHours) {\n            result.unshift({\n                className : 'b-dayview-timeaxis-background',\n                style     : {\n                    backgroundImage : me.getCoreHoursGradient(me.coreHours)\n                }\n            });\n        }\n        return result;\n    }\n    createLeafTicks(date) {\n        return this[this.sixMinuteTicks ? 'createSixMinuteTicks' : 'createFiveMinuteTicks'](date);\n    }\n    createFiveMinuteTicks(date) {\n        const result = [];\n        for (let i = 1; i < 12; i++) {\n            date.setMinutes(i * 5);\n            result.push({\n                className : {\n                    'b-dayview-timeaxis-tick' : 1,\n                    'b-dayview-tick-level-4'  : 1,          // Five minutes\n                    'b-dayview-tick-level-3'  : !(i & 1),   // Ten minutes\n                    'b-dayview-tick-level-2'  : !(i % 3),   // Fifteen minutes\n                    'b-dayview-tick-level-1'  : i === 6     // Half hour\n                },\n                text : DH.format(date, this.timeFormat)\n            });\n        }\n        return result;\n    }\n    createSixMinuteTicks(date) {\n        const result = [];\n        for (let i = 1; i < 10; i++) {\n            date.setMinutes(i * 6);\n            result.push({\n                className : {\n                    'b-dayview-timeaxis-tick' : 1,\n                    'b-dayview-tick-level-3'  : 1,          // Six minutes\n                    'b-dayview-tick-level-2'  : !(i & 1),   // Twelve minutes\n                    'b-dayview-tick-level-1'  : i === 5     // Half hour\n                },\n                text : DH.format(date, this.timeFormat)\n            });\n        }\n        return result;\n    }\n    changeCoreHours(coreHours) {\n        const me = this;\n        // Same core hours for every day\n        me._simpleCoreHours = ObjectHelper.isObject(coreHours) || (Array.isArray(coreHours) && coreHours.length !== 7);\n        if (me._simpleCoreHours) {\n            // In case we are sharing this via modeDefaults. We must own a copy\n            coreHours = ObjectHelper.clone(coreHours);\n            coreHours._overlayDay = coreHours.overlayDay;\n            Object.defineProperty(coreHours, 'overlayDay', {\n                set(v) {\n                    this._overlayDay = v;\n                    me.updateCoreHours();\n                },\n                get(v) {\n                    return this._overlayDay;\n                }\n            });\n        }\n        return coreHours;\n    }\n    updateCoreHours() {\n        if (!this.isConfiguring) {\n            this.syncHours();\n        }\n    }\n    changeStartDate() {\n        // Base class gets a chance to veto the change\n        return this.dayOfDate(super.changeStartDate(...arguments));\n    }\n    updateStartDate(startDate) {\n        // Keep all day row in time sync\n        this._allDayEvents?.setConfig({\n            startDate\n        });\n        super.updateStartDate(...arguments);\n    }\n    changeEndDate() {\n        // Base class gets a chance to veto the change\n        return this.dayOfDate(super.changeEndDate(...arguments));\n    }\n    updateEndDate(endDate) {\n        super.updateEndDate?.(...arguments);\n        // Keep all day row in time sync\n        if (!this.updatingRange) {\n            this._allDayEvents?.setConfig({\n                date : this.date,\n                endDate\n            });\n        }\n    }\n    changeMinDayWidth(minDayWidth) {\n        // null must be returned to mean no minWidth because undefined signals no change.\n        return typeof minDayWidth === 'number' ? Math.max(minDayWidth, 50) : typeof minDayWidth === 'string' ? minDayWidth : null;\n    }\n    updateMinDayWidth(minDayWidth) {\n        this.element.style.setProperty('--min-day-width', minDayWidth ? DomHelper.setLength(minDayWidth) : null);\n        this._allDayEvents && (this._allDayEvents.minDayWidth = minDayWidth);\n        this.updateElementLayout();\n    }\n    updateHourHeight(hourHeight) {\n        // Set up milestone height initially as half the hour Height, but at least 22px\n        if (this.isConfiguring) {\n            this.milestoneHeight = Math.max(Math.min(hourHeight / 2, this.shortEventHeight), 22);\n        }\n        this.milestoneDuration = 3600000 / (hourHeight / this.milestoneHeight);\n        if (!this.isConfiguring) {\n            this.shortEventDuration = 3600000 / (hourHeight / this.shortEventHeight);\n            // All we need to do is recalculate our CSS properties and hour height class indicator\n            this.updateElementLayout();\n            // hourHeight may have changed, some events may change their b-short-event state\n            if (this.fitHours) {\n                this.refresh();\n            }\n        }\n    }\n    updateShortEventHeight(shortEventHeight) {\n        this.updateHourHeight(this.hourHeight);\n    }\n    updateMinEventHeight(minEventHeight) {\n        this.contentElement.style.setProperty('--dayview-min-event-height', DomHelper.setLength(minEventHeight));\n    }\n    get hourHeight() {\n        // Order of the boolean expression is important:\n        // We do not want to interrogate this.fitHours if we are configuring.\n        return !this.isConfiguring && this.fitHours ? Math.max(this.dayContentClientHeight / this.getDayLength('hour'), this.minHourHeight) : this._hourHeight;\n    }\n    changeFitHours(fitHours) {\n        if (fitHours?.minHeight) {\n            // Set a hard minimum. Even a phone in portrait mode could show a schedule at 9px per hour\n            this.minHourHeight = Math.max(fitHours.minHeight, 9);\n        }\n        else {\n            // If they don't specify a minimum, we use 17.\n            // Odd numbers are better. Avoids fractional pixels in background line generation.\n            this.minHourHeight = 17;\n        }\n        return fitHours;\n    }\n    get dayContentClientHeight() {\n        return DomHelper.floorPx(Rectangle.client(this.dayContentElement).height);\n    }\n    updateFitHours(fitHours) {\n        const me = this;\n        if (!me.isConfiguring) {\n            // We only need to change the hourHeight if we are moving *to* fitting\n            fitHours && (me.hourHeight = Math.max(me.dayContentClientHeight / me.getDayLength('hour'), me.minHourHeight));\n        }\n        me.element.classList.toggle('b-fit-hours', Boolean(fitHours));\n        me.monitorResize = DomHelper.scrollBarWidth || fitHours;\n    }\n    updateEventSpacing() {\n        if (!this.isConfiguring) {\n            this._cellMap?.clear();\n            this.refresh();\n        }\n    }\n    onInternalPaint({ firstPaint }) {\n        const\n            me = this,\n            {\n                dayContainerElement,\n                horizontalScrollerElement\n            }  = me,\n            {\n                scrollBarWidth\n            }  = DomHelper;\n        if (firstPaint) {\n            // This will be the first read of the allDayEvents property and will\n            // trigger ingestion of allDayEvents and its upgrade into an instance of CalendarRow\n            const { allDayEvents } = me;\n            /**\n             * A Scroller which encapsulates horizontal scrolling of the view in case a {@link #config-minDayWidth}\n             * setting causes the days to overflow the available width.\n             * @member {Core.helper.util.Scroller} horizontalScroller\n             */\n            me.horizontalScroller = new Scroller({\n                widget            : me,\n                element           : dayContainerElement,\n                overflowX         : scrollBarWidth ? 'hidden-scroll' : true,\n                overflowY         : 'clip',\n                propagateSync     : true,\n                internalListeners : {\n                    overflowChange : 'updateElementLayout',\n                    thisObj        : me\n                }\n            });\n            if (allDayEvents) {\n                allDayEvents.element.classList.remove('b-dayview-initializing');\n                me.horizontalScroller.addPartner(allDayEvents.headerScroller);\n            }\n            ResizeMonitor.addResizeListener(me.dayContainerElement, me.onDayContainerResize.bind(me));\n            // We need the scroller even if the UI is overlay scrollbars.\n            // Because the scrollbar needs to be docked at the bottom while content scrolls.\n            me.scrollbarScroller = new Scroller({\n                widget      : me,\n                element     : horizontalScrollerElement.firstChild,\n                scrollWidth : dayContainerElement.scrollWidth - scrollBarWidth,\n                overflowX   : true,\n                overflowY   : false\n            });\n            me.horizontalScroller.addPartner(me.scrollbarScroller);\n            me.refresh();\n            me.updateElementLayout.now();\n            me.setInterval(me.syncCurrentTimeIndicator.bind(me), 30 * 1000, 'syncCurrentTimeIndicator');\n            if (allDayEvents) {\n                EventHelper.on({\n                    click : {\n                        element : me.cornerElement,\n                        handler : 'onCornerClick'\n                    },\n                    // The scrollbar padding must not bubble any mousemove events to dragdrop.\n                    // This is because a mouseover of the allDay row *may*, if there are no\n                    // all day events, cause expansion of the allDay row, which *may* cause\n                    // vertical overflow, which *may* on some platforms cause this padding element\n                    // to pop into visibility below the cursor which would then cause\n                    // a dragleave.\n                    mousemove : {\n                        element : me.allDayEvents.element.nextSibling,\n                        handler : stopEvent,\n                        capture : true\n                    },\n                    thisObj : me\n                });\n                // If, through window resizing, or changing hourHeight, the scrollbar status flips\n                // we have to run the scrollbar syncing.\n                me.scrollable.ion({\n                    overflowChange : 'syncScrollbarPadding',\n                    thisObj        : me\n                });\n            }\n            me.scrollToVisibleStartTime();\n        }\n    }\n    scrollToVisibleStartTime() {\n        if (this.visibleStartTime != null) {\n            const\n                me             = this,\n                { scrollable } = me,\n                startScrollPos = me.getPositionFromTime(me.visibleStartTime),\n                doScroll       = () => {\n                    scrollable.scrollTo(null, startScrollPos, {\n                        animate : false,\n                        block   : 'start'\n                    });\n                };\n            // If at this startup phase, the scroll was not possible due to the clientHeight\n            // being too high, it *may* become possible after the allDayEvents animates to\n            // a new height because of its events, so wait a short time for that scenario.\n            if (startScrollPos > scrollable.maxY && !me.scrollToStartTimer && me.allDayEvents) {\n                me.scrollToStartTimer = me.allDayEvents.ion({\n                    heightChange : doScroll,\n                    once         : true,\n                    expires      : {\n                        delay : 5000,\n                        alt   : doScroll\n                    },\n                    name : 'scrollToVisibleStartTime'\n                });\n            }\n            else {\n                doScroll();\n            }\n        }\n    }\n    relayAllDayEvents(event) {\n        const { type } = event;\n        // Don't relay every type of event\n        if (!blockedAllDayEvents[type]) {\n            return this.trigger(type, event);\n        }\n    }\n    async onCornerClick() {\n        const { allDayEvents } = this;\n        if (!allDayEvents.isAnimating) {\n            await allDayEvents.toggleExpandCollapse();\n            if (!this.isDestroyed) {\n                this.allDayToggleIcon.dataset.btip = allDayEvents.expanded ? this.L('L{collapseAllDayRow}') : this.L('L{expandAllDayRow}');\n            }\n        }\n    }\n    syncScrollbarPadding() {\n        // configuredHiddenVerticalScroll means that we must not show a scrollbar, so none of this\n        // must execute. ResourceView uses this and docks a fake scroller at its trailing edge.\n        // We only have anything to sync if we have an allDayEvents widget.\n        if (!this.configuredHiddenVerticalScroll && this.allDayEvents) {\n            if (DomHelper.scrollBarWidth) {\n                if (!this.allDayEvents.isAnimating) {\n                    const\n                        {\n                            allDayEvents,\n                            alldayRowElement,\n                            scrollable\n                        }                 = this,\n                        fitHours          = this.fitHours && scrollable.clientHeight / this.getDayLength('hour') >= this.minHourHeight,\n                        // fitHours means we'll never overflow\n                        hasOverflow       = !fitHours && scrollable.hasOverflow(),\n                        {\n                            headerElement,\n                            scrollable : verticalScroller\n                        }                 = allDayEvents,\n                        expanded          = allDayEvents.expanded || allDayEvents.autoHeight,\n                        // Will only have overflow if it's expanded\n                        allDayHasOverflow = Boolean(expanded && verticalScroller.hasOverflow());\n                    // Day view AND all day view both have vertical overflow.\n                    // Only the all day view *header* has to fake one to match.\n                    if (hasOverflow && allDayHasOverflow) {\n                        headerElement.classList.add('b-show-yscroll-padding');\n                        alldayRowElement.classList.remove('b-show-yscroll-padding');\n                        scrollable.overflowY = verticalScroller.overflowY = 'auto';\n                    }\n                    // Both in different overflowY states.\n                    else if (allDayHasOverflow !== hasOverflow) {\n                        // ONLY the all day view overflows, so allday *header* must show padding\n                        // and the day view must show a scrollbar\n                        if (allDayHasOverflow) {\n                            headerElement.classList.add('b-show-yscroll-padding');\n                            verticalScroller.overflowY = 'auto';\n                            scrollable.overflowY = 'scroll';\n                        }\n                        // ONLY the day view overflows, so that all day must show its scrollbar padding\n                        // But the all day header must not.\n                        else {\n                            headerElement.classList.remove('b-show-yscroll-padding');\n                            alldayRowElement.classList.add('b-show-yscroll-padding');\n                            verticalScroller.overflowY = 'hidden';\n                            scrollable.overflowY = !fitHours && 'auto';\n                        }\n                    }\n                    // Neither of the two views overflow\n                    else {\n                        alldayRowElement.classList.remove('b-show-yscroll-padding');\n                        headerElement.classList.remove('b-show-yscroll-padding');\n                        scrollable.overflowY = !fitHours && 'auto';\n                        verticalScroller.overflowY = 'hidden';\n                    }\n                }\n            }\n            // If scrollbars are overlayed when scrolling we can always have the two views scrollable\n            else {\n                this.scrollable.overflowY = this.allDayEvents.scrollable.overflowY = 'auto';\n            }\n        }\n    }\n    onInternalResize(element, width, height, oldWidth, oldHeight) {\n        const { _allDayEvents : allDayEvents } = this;\n        super.onInternalResize(element, width, height, oldWidth, oldHeight);\n        // Don't update on the initial render resize from no dimensions.\n        // That is handled by onInternalPaint({ firstPaint })\n        if (oldHeight) {\n            allDayEvents?.performResizeRefresh(allDayEvents.eventsPerCell, allDayEvents.eventContainerTop);\n            if (height !== oldHeight) {\n                this.updateElementLayout();\n                this.syncScrollbarPadding();\n            }\n        }\n    }\n    onThemeChange() {\n        this.updateElementLayout();\n    }\n    // Only the day container *height* is of interest generally.\n    // Unless we have had a minDayWidth set and we show scrollbars, in which case horizontal scrolling\n    // may come and go and the horizontalScrollerElement which shows a scrollbar might need toggling.\n    onDayContainerResize(el, { height : oldHeight } = {}, { height }) {\n        if (oldHeight && (height !== oldHeight || (DomHelper.scrollBarWidth && this.minDayWidth))) {\n            this.updateElementLayout();\n            // Must recalculate the hour height if fitHours is set.\n            if (this.fitHours) {\n                this.updateFitHours(this.fitHours);\n            }\n        }\n    }\n    async updateElementLayout() {\n        if (!this.refreshCount || this.owner?.isDestroyed) {\n            return;\n        }\n        const\n            me                 = this,\n            {\n                dayContainerElement,\n                horizontalScrollerElement,\n                horizontalScroller,\n                allDayEvents\n            }                  = me,\n            dayElements        = dayContainerElement.querySelectorAll('[data-date]'),\n            { scrollBarWidth } = DomHelper;\n        let i, end;\n        // AllDayEVents expander needs to know whether there's overflow\n        if (allDayEvents) {\n            const cornerElementClassList = me.cornerElement.classList;\n            if (allDayEvents.hasOverflow) {\n                cornerElementClassList.add('b-has-cell-overflow');\n                cornerElementClassList.toggle('b-expanded', Boolean(allDayEvents.expanded));\n            }\n            else {\n                cornerElementClassList.remove('b-has-cell-overflow');\n            }\n        }\n        // Hour lines now. We are in an AF.\n        me.refreshDayBackground.now();\n        for (i = 0, end = dayElements.length - 1; i <= end; i++) {\n            dayElements[i].classList.toggle('b-last-cell', i === end);\n        }\n        // Hide/show the pseudo horizontal scrollbar that we show on scrollbar displaying platforms.\n        if (allDayEvents) {\n            me.syncScrollbarPadding();\n        }\n        if (scrollBarWidth) {\n            horizontalScrollerElement.classList.toggle('b-show-yscroll-padding', me.scrollable.hasOverflow());\n        }\n        // Handle DayViews with zero days. These can be used as standalone TimeAxes.\n        // Horizontal scrollbar has to be present if there's overflow even if scrollbars overlayed\n        // in this case they are position:absolute.\n        if (dayElements.length) {\n            const\n                r           = Rectangle.from(dayElements[dayElements.length - 1], dayContainerElement),\n                clientWidth = DomHelper.roundPx(Rectangle.client(dayContainerElement).width),\n                scrollWidth = DomHelper.roundPx(me.rtl ? clientWidth - r.left : r.right - 1);\n            // Forced synchronous layout here, but we need to ascertain horizontal overflow state\n            if (scrollWidth > clientWidth) {\n                horizontalScrollerElement.classList.remove('b-hide-display');\n                me.scrollbarScroller.scrollWidth = scrollWidth;\n                horizontalScroller.overflowX = 'hidden-scroll';\n            }\n            else {\n                horizontalScrollerElement.classList.add('b-hide-display');\n                me.scrollbarScroller.scrollWidth = null;\n                horizontalScroller.overflowX = false;\n            }\n        }\n        /**\n         * Fires when this DayView changes an aspect of its layout. This happens when changing\n         * {@link #property-hourHeight}, {@link #property-minDayWidth}, and when the available\n         * day container height changes.\n         * @event layoutUpdate\n         * @param {Calendar.widget.DayView} source The triggering instance.\n         */\n        me.trigger('layoutUpdate');\n    }\n    refreshDayBackground() {\n        const\n            me                       = this,\n            {\n                contentElement,\n                hourHeight,\n                dayStartOffset,\n                _hourHeightLevel,\n                hourHeightLevel\n            }                        = me,\n            dayContentCls            = me.dayContentElement.classList,\n            dayLength                = me.getDayLength('hour'),\n            dayHeight                = hourHeight * dayLength,\n            halfHourHeight           = (hourHeight - 2) / 2,\n            fifteenMinuteHeight      = (hourHeight - 4) / 4,\n            twelveMinuteHeight       = (hourHeight - 5) / 5,\n            tenMinuteHeight          = (hourHeight - 6) / 6,\n            sixMinuteHeight          = (hourHeight - 10) / 10,\n            fiveMinuteHeight         = (hourHeight - 12) / 12,\n            contentElementStyle      = contentElement.style,\n            // Take the longest possible date and format it with the `timeFormat`, then estimate approximate space\n            // required for the time.\n            timeAxisWidth            = Math.ceil(DH.format(widestDate, me.timeFormat).length / 2);\n        dayContentCls.remove('b-dayview-hourheight-level-1', 'b-dayview-hourheight-level-2', 'b-dayview-hourheight-level-3', 'b-dayview-hourheight-level-4');\n        hourHeightLevel.level && dayContentCls.add(`b-dayview-hourheight-level-${hourHeightLevel.level}`);\n        contentElement.classList.toggle('b-six-minute-ticks', Boolean(me.sixMinuteTicks));\n        // The allDayRow needs to know this width\n        me.element.style.setProperty('--time-axis-width', `${timeAxisWidth}em`);\n        contentElementStyle.setProperty('--day-length', dayLength);\n        contentElementStyle.setProperty('--day-height', `${dayHeight}px`);\n        contentElementStyle.setProperty('--hour-height', `${hourHeight}px`);\n        contentElementStyle.setProperty('--half-hour-height', `${halfHourHeight}px`);\n        contentElementStyle.setProperty('--fifteen-minute-height', `${fifteenMinuteHeight}px`);\n        contentElementStyle.setProperty('--twelve-minute-height', `${twelveMinuteHeight}px`);\n        contentElementStyle.setProperty('--ten-minute-height', `${tenMinuteHeight}px`);\n        contentElementStyle.setProperty('--six-minute-height', `${sixMinuteHeight}px`);\n        contentElementStyle.setProperty('--five-minute-height', `${fiveMinuteHeight}px`);\n        contentElementStyle.setProperty('--leaf-tick-height', `${me.sixMinuteTicks ? sixMinuteHeight : fiveMinuteHeight}px`);\n        contentElementStyle.setProperty('--day-start-offset', `${dayStartOffset}px`);\n        if (hourHeightLevel.level !== _hourHeightLevel?.level) {\n            /**\n             * Triggered when changing the {@link #property-hourHeight} causes an\n             * {@link #config-hourHeightBreakpoints hour height breakpoint} to be crossed\n             * and the displayed subTick intervals in the time axis change.\n             *\n             * @event tickChange\n             * @param {Object} old The old hour height tick resolution object.\n             * @param {Number} old.level The level `0` to `4` where `0` is the default with no\n             * subTick times displayed, and `4` means every 5 minute time is displayed.\n             * @param {String} old.step The time duration of visible subTicks. This is a string in the format\n             * required by {@link Core.helper.DateHelper#function-parseDuration-static}\n             * @param {Object} new The new hour height tick resolution object.\n             * @param {Number} new.level The level `0` to `4` where `0` is the default with no\n             * subTick times displayed, and `4` means every 5 minute time is displayed.\n             * @param {String} new.step The time duration of visible subTicks. This is a string in the format\n             * required by {@link Core.helper.DateHelper#function-parseDuration-static}\n             */\n            me.trigger('tickChange', {\n                old : _hourHeightLevel || hourHeightLevelZero,\n                new : hourHeightLevel\n            });\n        }\n    }\n    updateSixMinuteTicks(sixMinuteTicks) {\n        if (!this.isConfiguring) {\n            this.updateElementLayout();\n        }\n    }\n    changeHourHeightBreakpoints(hourHeightBreakpoints) {\n        // Convert from 5.2.x object format\n        if (!Array.isArray(hourHeightBreakpoints)) {\n            return Object.values(hourHeightBreakpoints);\n        }\n        return hourHeightBreakpoints;\n    }\n    updateHourHeightBreakpoints() {\n        if (!this.isConfiguring) {\n            this.updateElementLayout();\n        }\n    }\n    get hourHeightLevel() {\n        const\n            me   = this,\n            {\n                hourHeight,\n                hourHeightBreakpoints,\n                sixMinuteTicks\n            }     = me,\n            steps = sixMinuteTicks ? sixMinuteSteps : fiveMinuteSteps;\n        // Convert object format\n        for (let i = sixMinuteTicks ? 2 : 3; i >= 0; i--) {\n            if (hourHeight >= hourHeightBreakpoints[i]) {\n                return me._hourHeightLevel = {\n                    level : i + 1,\n                    step  : steps[i]\n                };\n            }\n        }\n        return me._hourHeightLevel = hourHeightLevelZero;\n    }\n    updateLocalization() {\n        if (!this.isConfiguring && this.allDayTextElement) {\n            DomSync.sync({\n                targetElement : this.allDayTextElement,\n                domConfig     : {\n                    html : this.L('L{EventEdit.All day}')\n                }\n            });\n        }\n        super.updateLocalization();\n    }\n}\nDayView.initClass();\nDayView._$name = 'DayView';", "import DateHelper from '../../Core/helper/DateHelper.js';\nimport CalendarRow from './CalendarRow.js';\n/**\n * @module Calendar/widget/DayResourceCalendarRow\n */\n/**\n * This is normally used as the \"All day events\" section of a {@link Calendar.widget.DayResourceView}.\n * It is not designed to be used standalone as a regular Widget.\n *\n * A Widget which displays date and resource headers, and all day events at the top of a\n * {@link Calendar.widget.DayResourceView}.\n *\n * Cell rendering can be customized using the {@link #config-dayCellRenderer} method.\n *\n * Event rendering can be customized using the {@link #config-eventRenderer} method.\n *\n * {@inlineexample Calendar/widget/DayResourceView.js}\n *\n * @demo Calendar/date-resource\n *\n * @extends Calendar/widget/CalendarRow\n * @classtype dayresourcecalendarrow\n */\nexport default class DayResourceCalendarRow extends CalendarRow {\n    static $name = 'DayResourceCalendarRow';\n    // Factoryable type name\n    static type = 'dayresourcecalendarrow';\n    static configurable = {\n        /**\n         * Configure as `true` to show avatars of the resources (calendars) alongside\n         * resource names in resource column headers.\n         *\n         * Configure as `'last'` to show avatars of the assigned resources (calendars) after the name.\n         *\n         * Note that you must set {@link #config-resourceImagePath} in order that the system\n         * knows where to access the resource's image file from.\n         *\n         * If no image is set, or the image is not found, the resource's initials are shown instead.\n         *\n         * By default it is inherited from the owning Calendar:\n         * ```javascript\n         * new Calendar({\n         *     resourceImagePath   : 'images/resources/'\n         *     modes : {\n         *         dayresource : {\n         *             showHeaderAvatars : true,\n         *         }\n         *     }\n         * });\n         * ```\n         * @config {Boolean|'last'}\n         * @default\n         */\n        showHeaderAvatars : true,\n        responsive : {\n            // We can use \"large\" formats here because the cell will be wide\n            // to accommodate multiple resources.\n            small : {\n                dayNameFormat     : 'ddd',\n                dayNumberCompress : false\n            }\n        },\n        autoRefresh : [\n            'hideEmptyResources'\n        ],\n        /**\n         * Configure this as `true` to hide resource columns which contain no events.\n         *\n         * <div class=\"note\">Use with care. This may result in no resource columns being rendered\n         * for completely empty dates.</div>\n         * @prp {Boolean}\n         * @default false\n         */\n        hideEmptyResources : null\n    };\n    get eventContentElement() {\n        return this.bodyElement;\n    }\n    // Dragging can drag to the resource header cells. This view does not need to open\n    // up temporarily to accept a drop gesture\n    expandGutter() {}\n    get viewResources() {\n        const\n            me                = this,\n            { resourceStore } = me,\n            resourceFilter    = me.calendar?.widgetMap.resourceFilter;\n        return resourceFilter ? resourceStore.records.filter(c => resourceFilter.value.includes(c)) : resourceStore.records;\n    }\n    onCellOverflowGesture({ resourceRecord, date }) {\n        const\n            cellData           = this.cellMap.get(DateHelper.makeKey(date)),\n            { renderedEvents } = cellData;\n        cellData.renderedEvents = renderedEvents.filter(e => e.eventRecord.resources?.includes(resourceRecord));\n        super.onCellOverflowGesture(...arguments);\n        cellData.renderedEvents = renderedEvents;\n    }\n    getCellFromEvent(domEvent) {\n        return domEvent.target.closest('.b-calendar-cell[data-date] [data-resource-id]');\n    }\n    createCellMap() {\n        const\n            cellMap           = super.createCellMap(...arguments),\n            { viewResources } = this;\n        // We need to recalculate maxEventCount due to them being split and stacked by resource\n        this.maxEventCount = 0;\n        cellMap.forEach(cellData => {\n            for (let i = 0, { length } = viewResources; i < length; i++) {\n                // Filter down day's events to only those for this resource to calculate max stacking height\n                this.maxEventCount = Math.max(this.maxEventCount, cellData.renderedEvents.filter(e => e.eventRecord.resources?.includes(viewResources[i])).length);\n            }\n        });\n        return cellMap;\n    }\n    getCellDomConfig(cellData) {\n        const\n            me               = this,\n            {\n                viewResources,\n                eventsPerCell,\n                showHeaderAvatars,\n                hideEmptyResources\n            }                = me,\n            renderedEvents   = cellData.renderedEvents,\n            bodyChildren     = [],\n            today            = me.dayTime.startOfDay(me.calendar?.dateTimeNow || new Date()),\n            isToday          = cellData.date.getTime() === today.getTime(),\n            {\n                maxRow,\n                day\n            }                = cellData,\n            nonWorkingDays   = me.nonWorkingDays || me.month.nonWorkingDays,\n            dayEvents        = hideEmptyResources && (me.owner?.getEventsForDay(cellData.key, me.startDate) || renderedEvents),\n            // If we are hiding empty resource columns, filter down visibleResources to only those resources\n            // which have events for this day\n            visibleResources = hideEmptyResources ? viewResources.reduce((result, resource) => {\n                const resourceEvents = dayEvents.filter(e => e.resources?.includes(resource));\n                if (resourceEvents.length) {\n                    result.push(resource);\n                }\n                return result;\n            }, []) : viewResources;\n        me.weekLength = 1;\n        // One sub-column for each resource\n        for (let i = 0, { length } = visibleResources; i < length; i++) {\n            // Filter down day's events to only those for this resource column\n            cellData.renderedEvents = renderedEvents.filter(e => e.eventRecord.resources?.includes(visibleResources[i]));\n            // There is only one column in this view. It is a single day column.\n            cellData.visibleColumnIndex = cellData.columnIndex = 0;\n            cellData.maxRow = cellData.renderedEvents.length > eventsPerCell ? maxRow : eventsPerCell;\n            const dayCell = super.getCellDomConfig(cellData);\n            dayCell.children[1].dataset = {\n                resourceId : visibleResources[i].id\n            };\n            // We only need the cell content\n            bodyChildren.push({\n                className : 'b-resourcecalendarrow-column-resource-cell',\n                dataset   : {\n                    resourceId : visibleResources[i].id\n                },\n                children : [\n                    dayCell.children[1],\n                    // Add the overflow button\n                    cellData.hasOverflow && cellData.renderedEvents.length > eventsPerCell ? dayCell.children[2] : null\n                ]\n            });\n        }\n        // Restore day's full event load\n        cellData && (cellData.renderedEvents = renderedEvents);\n        if (visibleResources.length || !hideEmptyResources) {\n            // A single day's column encapsulates all resources.\n            // The outer element becomes the content cell.\n            // children[0] is extracted to use as the header cell.\n            const result = {\n                className : {\n                    'b-dayresourcecalendarrow-column' : 1\n                },\n                style : {\n                    '--visible-resource-count' : visibleResources.length\n                },\n                children : [{\n                    style : {\n                        // This element is extracted into the event content element\n                        // so it does not inherit --visible-resource-count in the final DOM structure\n                        '--visible-resource-count' : visibleResources.length\n                    },\n                    className : {\n                        'b-dayresource-allday'   : 1,\n                        'b-cal-cell-header'      : 1,\n                        [me.todayCls]            : isToday,\n                        [me.nonWorkingDayCls]    : nonWorkingDays[day] || false,\n                        [me.weekendCls]          : DateHelper.weekends[day],\n                        [`b-day-of-week-${day}`] : 1\n                    },\n                    children : [{\n                        className : {\n                            'b-dayname-date' : 1\n                        }\n                    }, ...visibleResources.map(r => {\n                        return {\n                            className : {\n                                'b-dayresourcecalendarrow-resource-header' : 1,\n                                'b-avatar-after'                           : showHeaderAvatars === 'last'\n                            },\n                            children : [\n                                showHeaderAvatars ? me.getResourceAvatar(r) : null,\n                                {\n                                    className : 'b-dayresourcecalendarrow-resource-name',\n                                    text      : me.resourceHeaderRenderer(r)\n                                }\n                            ],\n                            dataset : {\n                                resourceId : r.id\n                            }\n                        };\n                    })]\n                },\n                ...bodyChildren\n                ],\n                dataset : {}\n            };\n            me.addCellHeaderContent(result.children[0].children[0], cellData);\n            return result;\n        }\n    }\n    updateMinResourceWidth(minResourceWidth) {\n        const\n            {\n                scrollable,\n                headerScroller\n            }           = this,\n            { element } = headerScroller;\n        this.element.style.setProperty('--cell-container-overflow', minResourceWidth ? 'visible' : 'hidden');\n        // Forced synchronous layout here, but we need to ascertain horizontal overflow state\n        if (minResourceWidth && element.scrollWidth > element.clientWidth) {\n            // Overflow 'hidden-scroll' is a special Scroller setting.\n            // With overlayed scrollbars it just means 'auto'\n            // With space-consuming scrollbars, it hides scrollbars using CSS while using auto.\n            // But if the two axes scroll, then both scrollbars should not be hidden so it will\n            // fall back to using overflow:hidden and a `wheel` listener.\n            scrollable.overflowX = headerScroller.overflowX = 'hidden-scroll';\n        }\n        else {\n            scrollable.overflowX = headerScroller.overflowX = false;\n        }\n    }\n    resourceHeaderRenderer(resource) {\n        return resource.name;\n    }\n    updateShowHeaderAvatars(showHeaderAvatars) {\n        if (showHeaderAvatars) {\n            // We need the AvatarRendering utility if we are showing avatars.\n            this.avatarRendering || (this.avatarRendering = true);\n        }\n        this.refresh();\n    }\n    // This is never fullWeek\n    changeFullWeek() {}\n}\nDayResourceCalendarRow.initClass();\nDayResourceCalendarRow._$name = 'DayResourceCalendarRow';", "import DayView from './DayView.js';\nimport './DayResourceCalendarRow.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\n/**\n * @module Calendar/widget/DayResourceView\n */\n/**\n * A calendar view showing resources grouped by date, it is normally used as a {@link Calendar.view.Calendar#config-modes mode}\n * of a Calendar but may be used standalone as a regular Widget.\n *\n * By default, it shows a one week range encapsulating the Calendar's current {@link Calendar.view.Calendar#property-date}.\n * This can be configured using the {@link #config-range} config property.\n *\n * {@inlineexample Calendar/widget/DayResourceView.js}\n *\n * @demo Calendar/date-resource\n *\n * @extends Calendar/widget/DayView\n * @classtype dayresource\n * @typingswidget\n */\nexport default class DayResourceView extends DayView {\n    static $name = 'DayResourceView';\n    static type = 'dayresource';\n    static configurable = {\n        /**\n         * The minimum width of a resource column. This must be a non-zero value to ensure that space\n         * is allocated even when there are many resources and a narrow viewport.\n         *\n         * The default value is `4em`\n         *\n         * If the day columns columns overflow the horizontal space available, the columns\n         * will be scrollable horizontally in the normal way.\n         *\n         * There is a {@link #property-horizontalScroller} property which handles scrolling in this\n         * dimension.\n         * @prp {Number|String}\n         */\n        minResourceWidth : '4em',\n        /**\n         * By default, resource avatars are shown in the resource header if there is horizontal space.\n         * Configure this as `false` to inhibit this.\n         * @prp {Boolean}\n         */\n        showAvatars : true,\n        title : 'L{dayResourceView}',\n        allDayEvents : {\n            type : 'dayresourcecalendarrow'\n        },\n        range : '1w',\n        /**\n         * Configure as `true` to show avatars of the resources (calendars) alongside\n         * resource names in resource column headers.\n         *\n         * Configure as `'last'` to show avatars of the assigned resources (calendars) after the name.\n         *\n         * Note that you must set {@link #config-resourceImagePath} in order that the system\n         * knows where to access the resource's image file from.\n         *\n         * If no image is set, or the image is not found, the resource's initials are shown instead.\n         *\n         * By default it is inherited from the owning Calendar:\n         * ```javascript\n         * new Calendar({\n         *     resourceImagePath   : 'images/resources/'\n         *     modes : {\n         *         dayresource : {\n         *             showHeaderAvatars : true,\n         *         }\n         *     }\n         * });\n         * ```\n         * @config {Boolean|'last'}\n         */\n        showHeaderAvatars : true,\n        autoRefresh : [\n            'hideEmptyResources'\n        ],\n        /**\n         * Configure this as `true` to hide resource columns which contain no events.\n         *\n         * <div class=\"note\">Use with care. This may result in no resource columns being rendered\n         * for completely empty dates.</div>\n         * @prp {Boolean}\n         * @default false\n         */\n        hideEmptyResources : null\n    };\n    changeAllDayEvents() {\n        const result = super.changeAllDayEvents(...arguments);\n        if (result) {\n            result.hideEmptyResources = this.hideEmptyResources;\n        }\n        return result;\n    }\n    checkAutoCreateGesture(domEvent, date, resourceRecord) {\n        if (resourceRecord) {\n            return super.checkAutoCreateGesture(...arguments);\n        }\n    }\n    // Called as an onFunction by updateElementLayout triggering 'layoutUpdate'.\n    onLayoutUpdate() {\n        this.syncNarrowResourceWidth();\n        super.onLayoutUpdate?.(...arguments);\n    }\n    onDayContainerResize() {\n        this.syncNarrowResourceWidth();\n        return super.onDayContainerResize?.(...arguments);\n    }\n    syncNarrowResourceWidth() {\n        const resourceHeader = this.element.querySelector('.b-dayresourcecalendarrow-resource-header');\n        if (resourceHeader) {\n            this.allDayEvents.element.classList.toggle('b-narrow-resource-header', resourceHeader.offsetWidth < 100);\n        }\n    }\n    updateHideEmptyResources(hideEmptyResources) {\n        if (!this.isConfiguring) {\n            this._allDayEvents && (this._allDayEvents.hideEmptyResources = hideEmptyResources);\n        }\n    }\n    changeMinResourceWidth(minResourceWidth) {\n        // Falsy/zero means use class default\n        return minResourceWidth || this.constructor.configurable.minResourceWidth;\n    }\n    updateMinResourceWidth(minResourceWidth) {\n        this.element.style.setProperty('--min-resource-width', DomHelper.setLength(minResourceWidth));\n        this.updateElementLayout();\n        this.allDayEvents?.updateMinResourceWidth(minResourceWidth);\n    }\n    updateShowHeaderAvatars(showHeaderAvatars) {\n        const { allDayEvents : a } = this;\n        if (a) {\n            a.resourceImagePath   = this.resourceImagePath;\n            a.showHeaderAvatars = showHeaderAvatars;\n        }\n    }\n    updateWeekStartDay(weekStartDay, oldWeekStartDay) {\n        super.updateWeekStartDay?.(weekStartDay);\n        if (!this.isConfiguring) {\n            const startDate = new Date(this.startDate);\n            startDate.setDate(startDate.getDate() + weekStartDay - oldWeekStartDay);\n            this.startDate = startDate;\n        }\n    }\n    // Override from DayView.\n    // This returns a DayView day column config for each resource\n    getDayDomConfig(date) {\n        const\n            me            = this,\n            {\n                hideEmptyDays,\n                hideEmptyResources\n            }             = me,\n            key           = me.dayTime.dateKey(date),\n            day           = date.getDay(),\n            eventsForDate = (hideEmptyDays || hideEmptyResources) && me.getEventsForDay(key),\n            // Skip hidden, nonworking days (unless we're a single day view).\n            // Skip empty days if configured to do so.\n            skipDay       = (me.hiddenNonWorkingDays[day] && me.duration !== 1) || (hideEmptyDays && !eventsForDate.length);\n        // Return nullish for skipped days.\n        if (!skipDay) {\n            const\n                key            = me.dayTime.dateKey(date),\n                cellData       = me.cellMap.get(key) || me.createCellData(date),\n                events         = cellData.events,\n                children       = [],\n                {\n                    calendar,\n                    resourceStore\n                }              = me,\n                resourceFilter = calendar?.widgetMap.resourceFilter,\n                resources      = resourceFilter ? resourceStore.records.filter(c => resourceFilter.value.includes(c)) : resourceStore.records;\n            // One sub-column for each resource\n            for (let i = 0, { length } = resources, dayColumn; i < length; i++) {\n                const\n                    resource        = me.resource = resources[i],\n                    filterResources = e => e.resources?.includes(resource);\n                // Various renderers detect whether the view owns a Resource.\n                // While processing a resource column for this day, we must own that resource.\n                me.resourceId = resource.id;\n                // Filter down day's events to only those for this resource column\n                cellData.events = events.filter(filterResources);\n                // Skip the resource if it's empty and we are configured to skip empty resources\n                if (!hideEmptyResources || eventsForDate.filter(filterResources).length) {\n                    // The super call must not process hideEmptyDays. We might have just filtered\n                    // cellData.events to empty if current resource has no events for the day.\n                    me._hideEmptyDays = false;\n                    dayColumn = super.getDayDomConfig(date);\n                    me._hideEmptyDays = hideEmptyDays;\n                    delete dayColumn.dataset.date;\n                    dayColumn.dataset.resourceId = resource.id;\n                    children.push(dayColumn);\n                }\n                // We only own a resource when creating a resource column for a day\n                me.resource = me.resourceId = null;\n            }\n            // Restore day's full event load\n            cellData.events = events;\n            // A single day's column encapsulates all resources.\n            // Do not return a DomSync object if all resources have been skipped as empty.\n            if (children.length || !hideEmptyResources) {\n                return {\n                    className : {\n                        'b-dayresourceview-column'        : 1,\n                        [`b-day-of-week-${cellData.day}`] : 1\n                    },\n                    dataset : {\n                        date : key\n                    },\n                    children\n                };\n            }\n        }\n    }\n}\nDayResourceView.initClass();\nDayResourceView._$name = 'DayResourceView';", "import Fencible from '../../Core/mixin/Fencible.js';\nimport Button from '../../Core/widget/Button.js';\nimport ButtonGroup from '../../Core/widget/ButtonGroup.js';\nimport MenuItem from '../../Core/widget/MenuItem.js';\nimport Container from '../../Core/widget/Container.js';\nimport Minifiable from '../../Core/widget/mixin/Minifiable.js';\nimport Responsive from '../../Core/widget/mixin/Responsive.js';\nimport '../../Core/widget/layout/Box.js';\n/**\n * @module Calendar/widget/ModeSelector\n */\n/**\n * Displays the set of calendar modes. The modes can be displayed as a {@link Core.widget.ButtonGroup} or a single\n * {@link Core.widget.Button} with a {@link Core.widget.Button#config-menu}. Which presentation is used depends on\n * the {@link #config-minified} config property. By default, this is set\n * {@link Core.widget.mixin.Responsive#config-responsive responsively} in order to present the best UI for different\n * screen sizes.\n *\n * @extends Core/widget/Container\n * @classtype calendarModeSelector\n * @widget\n */\nexport default class ModeSelector extends Container.mixin(Fencible, Minifiable, Responsive) {\n    //region Config\n    static $name = 'ModeSelector';\n    static type = 'calendarmodeselector';\n    static configurable = {\n        // Since Minifiable is @internal for now\n        /**\n         * Set to `false` to prevent this widget from assuming is {@link #config-minified} form automatically (for\n         * example, due to {@link Core.widget.Toolbar#config-overflow} handling.\n         *\n         * When this value is `true` (the default), the minifiable widget's {@link #config-minified} config may be\n         * set to `true` to reduce toolbar overflow.\n         *\n         * @config {Boolean}\n         * @default\n         */\n        minifiable : true,\n        /**\n         * Set to `true` to present this widget in its minimal form.\n         * @config {Boolean}\n         * @default false\n         */\n        minified : null,\n        /**\n         * The button or button config object that will display a popup menu to select the calendar mode.\n         * @config {Core.widget.Button}\n         */\n        button : {\n            type              : 'button',\n            icon              : 'b-icon-calendar-days',  // avoid b-icon-menu since toolbar overflow also uses that icon\n            cls               : 'b-calendar-mode-button',\n            menuIcon          : null,\n            menu              : [],\n            internalListeners : {\n                beforeShowMenu : 'up.onBeforeFirstShowModeMenu',\n                once           : true\n            }\n        },\n        /**\n         * The button group or button group config object that will display the calendar modes, one per button.\n         * @config {Core.widget.ButtonGroup}\n         */\n        buttonBar : {\n            type                 : 'buttongroup',\n            ignoreParentReadOnly : true\n        },\n        calendar : {\n            value   : 'calendar',\n            $config : 'lazy'\n        },\n        includeWeekendsButton : {\n            $config : 'lazy',\n            value : {\n                type        : 'button',\n                cls         : 'b-calendar-fullweek-button',\n                toggleGroup : `no`,  // so ButtonGroup does not take over\n                text        : 'L{ModeSelector.weekends}',\n                tooltip     : 'L{ModeSelector.includeWeekends}',\n                onToggle    : 'up.onToggleWorkingDaysButton',\n                weight      : -1\n            }\n        },\n        includeWeekendsMenuItem : {\n            $config : 'lazy',\n            value : {\n                separator : true,\n                text      : 'L{ModeSelector.includeWeekends}',\n                checked   : false,\n                onToggle  : 'up.onToggleWorkingDaysMenu',\n                weight    : 10\n            }\n        },\n        layout : {\n            type : 'box',\n            wrap : false\n        },\n        overflowable : 'none',\n        responsive : {\n            large : {\n                // Allow toolbar overflow to kick us into minified state\n                minifiable : true,\n                minified   : null\n            },\n            '*' : {\n                // Don't allow toolbar overflow to kick us out of minified state\n                minifiable : false,\n                minified   : true\n            }\n        },\n        responsiveTarget : '@calendar'\n    };\n    static fenced = {\n        onToggleButton   : true,\n        onToggleMenuItem : true,\n        syncFullWeek     : true,\n        syncActiveMode   : {\n            all  : 'syncActiveMode',\n            lock : ['onToggleButton', 'onToggleMenuItem', 'syncActiveMode']\n        }\n    };\n    get hideNonWorkingDays() {\n        return this.calendar?.hideNonWorkingDays;\n    }\n    set hideNonWorkingDays(value) {\n        const { calendar } = this;\n        // If the current value of calendar.hideNonWorkingDays is null, it is acting as false, so don't bother to\n        // set it if value is also false. If we do, that would push the value down to each mode which would mask a\n        // value that may be set directly on the child view.\n        if (calendar && !(!value && calendar.hideNonWorkingDays == null)) {\n            calendar.hideNonWorkingDays = value;\n        }\n    }\n    changeIncludeWeekendsButton(config, existing) {\n        const\n            me = this,\n            includeWeekendsButton = config && me.calendar?.includeWeekendsButton;\n        if (includeWeekendsButton) {\n            // Calendar may have false/null for its config but we ignore such values. In that case, the button will be\n            // hidden by CSS rules (not destroyed)\n            config = Button.mergeConfigs(config, includeWeekendsButton);\n        }\n        if (config && !existing) {\n            return me.add(config);\n        }\n        return Button.reconfigure(existing, config, /* owner = */me);\n    }\n    updateIncludeWeekendsButton(includeWeekendsButton) {\n        if (includeWeekendsButton) {\n            includeWeekendsButton.toggleGroup = null;\n        }\n        this.syncFullWeek();\n    }\n    changeIncludeWeekendsMenuItem(config, existing) {\n        const menu = this?.button?.menu;\n        if (config && !existing) {\n            return menu?.add(config);\n        }\n        return MenuItem.reconfigure(existing, config, /* owner = */menu);\n    }\n    updateIncludeWeekendsMenuItem() {\n        this.syncFullWeek();\n    }\n    onBeforeFirstShowModeMenu({ menu }) {\n        const\n            me             = this,\n            { calendar }   = me,\n            { activeView } = calendar,\n            modes          = Object.values(calendar.modes);\n        let menuItem, mode;\n        for (mode of modes) {\n            menuItem = mode.$modeMenuItem;\n            menu.add(menuItem);\n            // We cannot set the check state until after adding to the menu or else we will fail to find the correct\n            // rootElement and toggle group\n            menuItem.checked = mode === activeView;\n            // Wire up handler after setting \"checked\" (we don't want to be called as we set things up)\n            menuItem.onToggle = 'up.onToggleMenuItem';\n        }\n        me.getConfig('includeWeekendsMenuItem');\n        me.syncFullWeek();\n        me.menuReady = true;\n    }\n    addMode(name, view, options) {\n        const\n            me = this,\n            { buttonBar } = me,\n            // We cannot add items to the menu at this time because the menu will not be assigned to a rootElement\n            // as yet which is problematic for floated widgets. So, instead we create the MenuItem widgets and attach\n            // them to their view and add them to the button's menu just before it is shown.\n            //  NOPE - menuItem = me.button.menu.add(MenuItem.mergeConfigs({\n            menuItem = view.$modeMenuItem = MenuItem.reconfigure(view.$modeMenuItem, MenuItem.mergeConfigs({\n                type        : MenuItem,\n                view, // Button carries a reference to the view it shows\n                ref         : `${name}ShowMenuItem`,\n                checked     : false,\n                closeParent : true,\n                toggleGroup : `${me.id}-modeSelectorMenuItem`,\n                localizable : false,\n                text        : view.displayName,\n                weight      : 0\n            }, options)),\n            button = buttonBar.add(Button.mergeConfigs({\n                view, // Button carries a reference to the view it shows\n                ref            : `${name}ShowButton`,\n                toggleGroup    : `${me.id}-modeSelectorButton`,\n                text           : view.displayName,\n                localizable    : false,\n                onBeforeToggle : 'up.onBeforeToggleButton',\n                onToggle       : 'up.onToggleButton',\n                weight         : 0\n            }, options));\n        me.getConfig('includeWeekendsButton');\n        view.ion({\n            thisObj : me,\n            localized() {\n                button.text = view.displayName;\n                menuItem.text = view.displayName;\n            }\n        });\n    }\n    onBeforeToggleButton({ pressed }) {\n        // Effectively disable button toggling during animated card change\n        if (pressed && this.calendar.viewContainer.layout.isChangingCard) {\n            return false;\n        }\n    }\n    onToggleButton({ source, pressed }) {\n        if (pressed) {\n            this.calendar.mode = source.view;\n        }\n    }\n    updateDisabled(disabled) {\n        // When disabling, disable all buttons except the one that just got pressed - the focused one.\n        this.buttonBar.items.forEach(button => {\n            if (!disabled || !button.containsFocus) {\n                button.disabled = disabled;\n            }\n        });\n    }\n    onToggleMenuItem({ source, checked }) {\n        if (checked) {\n            this.calendar.mode = source.view;\n        }\n    }\n    onToggleWorkingDaysButton({ pressed }) {\n        this.hideNonWorkingDays = !pressed;\n    }\n    onToggleWorkingDaysMenu({ checked }) {\n        this.hideNonWorkingDays = !checked;\n    }\n    syncActiveMode(activeView) {\n        const\n            me = this,\n            buttons = me.buttonBar.items;\n        let item;\n        me.button.text = activeView.displayName;\n        me.includeWeekendsButton.hidden = !activeView.hasNonWorkingDays;\n        me.syncFullWeek();\n        // These loops would call onToggleButton/MenuItem if it weren't for Fencible\n        for (item of buttons) {\n            if (item.view) {\n                item.pressed = item.view === activeView;\n            }\n        }\n        if (me.menuReady) {\n            for (item of me.button.menu.items) {\n                if (item.view?.$modeMenuItem === item) { // if (a calendar mode item)\n                    item.checked = item.view === activeView;\n                }\n            }\n        }\n        // Don't show the mode selector if there's only one view\n        me[buttons.length > 1 ? 'show' : 'hide']();\n    }\n    syncFullWeek() {\n        const\n            {\n                calendar,\n                hideNonWorkingDays,\n                _includeWeekendsButton   : includeWeekendsButton,\n                _includeWeekendsMenuItem : includeWeekendsMenuItem\n            } = this,\n            fullWeek = !hideNonWorkingDays;\n        if (!calendar.isConfiguring) {\n            if (includeWeekendsButton) {\n                includeWeekendsButton.pressed = fullWeek;\n            }\n            if (includeWeekendsMenuItem) {\n                includeWeekendsMenuItem.checked = fullWeek;\n            }\n        }\n    }\n    changeButton(config, existing) {\n        return Button.reconfigure(existing, config);\n    }\n    updateButton(button) {\n        button && this.add(button);\n    }\n    changeButtonBar(config, existing) {\n        return ButtonGroup.reconfigure(existing, config);\n    }\n    updateButtonBar(buttonBar) {\n        buttonBar && this.add(buttonBar);\n    }\n    changeCalendar(calendar) {\n        if (calendar && !calendar.isWidget) {\n            calendar = this.up(calendar);\n        }\n        return calendar;\n    }\n    updateCalendar(calendar) {\n        this.detachListeners('cal');\n        this.syncFullWeek();\n        calendar?.ion({\n            name                     : 'cal',\n            changeHideNonWorkingDays : 'syncFullWeek',\n            thisObj                  : this\n        });\n    }\n}\n// Register this feature type with its Factory\nModeSelector.initClass();\nModeSelector._$name = 'ModeSelector';", "import CalendarMixin from './mixin/CalendarMixin.js';\nimport DayCellCollecter from './mixin/DayCellCollecter.js';\nimport DayCellRenderer from './mixin/DayCellRenderer.js';\nimport CalendarPanel from '../../Core/widget/CalendarPanel.js';\nimport DH from '../../Core/helper/DateHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport Scroller from '../../Core/helper/util/Scroller.js';\nimport EventHelper from '../../Core/helper/EventHelper.js';\nimport EventSorter from '../util/EventSorter.js';\n/**\n * @module Calendar/widget/MonthView\n */\nconst\n    evRegexp       = /^(\\d+)ev$/,\n    expandGestures = {\n        shrinkwrap : 1,\n        expand     : 1\n    };\n/**\n * This is normally used as a {@link Calendar.view.Calendar#config-modes mode} of a Calendar (as seen in the live\n * demo below) but may be used standalone as a regular Widget.\n *\n * {@inlineexample Calendar/widget/CalendarMonthView.js}\n *\n * As a standalone widget, it will lack the capabilities of the {@link Calendar.view.Calendar Calendar}\n * class, such as keyboard-based event to event navigation and drag/drop features.  As seen in this demo:\n *\n * {@inlineexample Calendar/widget/MonthView.js}\n *\n * A Panel which displays a single month in a calendar like view.\n *\n * Cell rendering can be customized using the {@link #config-dayCellRenderer} method.\n *\n * Event rendering can be customized using the {@link Calendar.widget.mixin.EventRenderer#config-eventRenderer} method.\n *\n * @extends Core/widget/CalendarPanel\n * @mixes Core/widget/mixin/Responsive\n * @mixes Calendar/widget/mixin/DayCellCollecter\n * @mixes Calendar/widget/mixin/DayCellRenderer\n * @mixes Calendar/widget/mixin/CalendarMixin\n * @classtype monthview\n * @classtypealias month\n * @typingswidget\n */\nexport default class MonthView extends CalendarPanel.mixin(CalendarMixin, DayCellCollecter, DayCellRenderer) {\n    static $name = 'MonthView';\n    static type = 'monthview';\n    static get configurable() {\n        return {\n            eventSorter : EventSorter.interDaySorterFn,\n            localizableProperties : ['title', 'stepUnit'],\n            title : 'L{Month}',\n            stepUnit : 'L{monthUnit}',\n            dragUnit : 'day',\n            localeClass : this,\n            descriptionFormat : 'MMMM, YYYY',\n            dayNumberCentered : null,\n            /**\n             * The height of event bars in this view. This can be a numeric value in pixels or a CSS unit measure such\n             * as `'2em'`.\n             * @config {Number|String}\n             * @default\n             */\n            eventHeight : 20,\n            minHeight : 485,\n            /**\n             * By default, weeks rows all flex to share the available height equally.\n             *\n             * To make them shrinkwrap their events to show all events in every row, configure this as `true`\n             * @prp {Boolean}\n             * @default false\n             */\n            autoRowHeight : {\n                $config : 'lazy',\n                value   : false\n            },\n            /**\n             * By default, rows which have been modified by the {@link Calendar.feature.WeekExpander}\n             * feature, __not by the {@link #config-autoRowHeight} setting__, to shinkwrap large content\n             * are reset to flexed height on month change.\n             *\n             * To have rows persist their shrinkwrapped status across month changes, confgure this as `true`.\n             *\n             * If {@link #config-autoRowHeight} is set, then the new month always has auto heighted rows.\n             * @prp {Boolean}\n             * @default false\n             */\n            persistShrinkWrappedRows : null,\n            /**\n             * The maximum number of events to show in a cell when the row is shrinkwrapped.\n             * Use this to keep rows to a sane size when using {@link #config-autoRowHeight},\n             * or the {@link Calendar.feature.WeekExpander} feature.\n             * @config {Number}\n             * @default\n             */\n            maxEventsPerCell : 100,\n            /**\n             * By default, week rows flex to share available Panel height equally.\n             *\n             * This may be configured as a number, in which case it means pixels, or a CSS length.\n             *\n             * The non-standard unit `ev` may also be specified to mean \"events\". For example\n             * `'3ev'` means rows will always be three events bars (plus the day header)\n             * tall.\n             *\n             * This is a useful config when using {@link #config-autoRowHeight}, or using\n             * {@link #config-overflowClickAction} when rows may be switched to shrinkwrapping\n             * their event content and may shrink in height.\n             *\n             * Setting this config causes the month grid to become scrollable in the `Y` axis.\n             * @config {Number|String}\n             */\n            minRowHeight : null,\n            /**\n             * How the view responds to clicking on a `+n more` button in an overflowing day cell.\n             *\n             * The default value, `'popup'`, means that a small dialog box showing the full complement\n             * of events for that cell is shown aligned to the cell.\n             *\n             * When set to `'expand'`, then clicking the `+n more` button causes the encapsulating\n             * row to expand to accommodate all events in that row with no overflow.\n             *\n             * Navigating to a new month resets the row to its default, flexed height.\n             * @config {'popup'|'expand'} overflowClickAction\n             * @default\n             */\n            overflowClickAction : 'popup',\n            // So that when clicking the prev and next buttons, the UI will change\n            // even if a cell for the new date is present.\n            alwaysRefreshOnMonthChange : true\n        };\n    }\n    static delayable = {\n        syncCalendarWeekDaysWithScrollable : {\n            type              : 'raf',\n            cancelOutstanding : true\n        },\n        // Need to handle cleanup after the row collapse animation\n        // in the next AF so that all scrolling has been recalculated\n        // and the overflowY can be set accurately\n        onAllWeekElementsFlexed : {\n            type              : 'raf',\n            cancelOutstanding : true\n        }\n    };\n    get eventContainerHeight() {\n        const\n            me            = this,\n            { classList } = me.weeksElement;\n        // Must not bake the property in as zero if called during configuration.\n        if (me._eventContainerHeight == null && me.isVisible && !me.isConfiguring) {\n            // Rows must revert topstrictly flexed heights during measuring.\n            // This class uses a !important CSS rule to ensure that.\n            classList.add('b-measuring-container-height');\n            me._eventContainerHeight = super.eventContainerHeight;\n            classList.remove('b-measuring-container-height');\n        }\n        return me._eventContainerHeight;\n    }\n    onCalendarStoreChange() {\n        super.onCalendarStoreChange(...arguments);\n        // Keep any shrinkwrapped rows in the correct shape\n        this.syncShrinkwrappedRows();\n    }\n    onDateChange({ changes }) {\n        // When month changes, keep any shrinkwrapped rows in the correct shape if configured to do so\n        if (changes.m) {\n            const\n                me                = this,\n                { autoRowHeight } = me;\n            // If we are auto heighting rows, then it must be applied on each month change.\n            if (autoRowHeight) {\n                me.weekElements.forEach(({ classList }) => classList.add('b-shrinkwrapped'));\n            }\n            if (me.persistShrinkWrappedRows || autoRowHeight) {\n                me.syncShrinkwrappedRows();\n            }\n            else {\n                me.shrinkwrappedRows.forEach(r => me.flexWeekRow(r));\n            }\n        }\n    }\n    /**\n     * Returns the resource associated with this month view when used inside a {@link Calendar.widget.ResourceView}\n     * @readonly\n     * @member {Scheduler.model.ResourceModel} resource\n     */\n    // Override from DayCellRenderer\n    // Called automatically on the CellOverflow${overflowPopupTrigger} event because of callOnFunctions\n    onCellOverflowGesture({ date }) {\n        if (expandGestures[this.overflowClickAction.toLowerCase()]) {\n            this.shrinkwrapWeekRow(date);\n        }\n        else {\n            super.onCellOverflowGesture(...arguments);\n        }\n    }\n    // addCellHeaderContent mutates the cellHeader DomConfig block.\n    // And if we are to have a day name element, returns the DomConfig for it.\n    // It's called from DayCellRenderer#getCellDomConfig\n    addCellHeaderContent(cellHeader, cellData) {\n        const dayName = {\n            className : {\n                'b-day-name' : true\n            }\n        };\n        // showWeekColumn refers to the extra week number cell.\n        // MonthView shows the week in the first day cell if that's *false*\n        cellHeader.children = [\n            cellData.visibleColumnIndex || this.showWeekColumn ? null : {\n                className : 'b-week-num',\n                text      : cellData.week[1]\n            },\n            dayName\n        ];\n        return dayName;\n    }\n    get shrinkwrappedRows() {\n        return this.weeksElement.querySelectorAll('.b-shrinkwrapped');\n    }\n    get shrinkwrapRowHeights() {\n        const\n            me          = this,\n            rowHeights  = [],\n            { cellMap } = me;\n        me.month.eachWeek((week, [date]) => {\n            let eventCount = 0;\n            for (let i = 0; i < 7; i++, date.setDate(date.getDate() + 1)) {\n                const cellData = cellMap.get(DH.makeKey(date));\n                if (cellData) {\n                    eventCount = Math.max(eventCount, cellData.renderedEvents.length);\n                }\n            }\n            rowHeights.push(eventCount);\n        });\n        return rowHeights.map(maxEventCount => me.eventHeightInPixels * maxEventCount + (me.eventSpacing * (maxEventCount + 1)) + Math.ceil(me._eventContainerTop));\n    }\n    /**\n     * Returns the number of complete event bars which will fit inside the referenced cell.\n     *\n     * It's only in MonthView when some rows are shrinkwrapped round their event content (meaning\n     * either expanded or contracted away from the 1/6 height default) that there may be a customized\n     * eventsPerCell for a certain date.\n     * @internal\n     */\n    getEventsPerCell(date) {\n        const me =  this;\n        if (me.hasShrinkwrappedRows) {\n            const rowIndex = Math.floor(DH.diff(me.startDate, date, 'd') / 7);\n            // For a shrinkwrapped row, all events are rendered, so use the configured upper limit\n            if (me.weekElements[rowIndex].classList.contains('b-shrinkwrapped')) {\n                return me.maxEventsPerCell;\n            }\n            // If there are shrinkwrapped rows, other row heights are unpredictable.\n            // Some may be flexed, but they also have a minRowHeight.\n            else {\n                const\n                    firstCell            = me.weekElements[rowIndex].querySelector(me.visibleCellSelector),\n                    eventContainerHeight = firstCell.offsetHeight - me.eventContainerTop;\n                return Math.floor((eventContainerHeight + me.eventSpacing) / (me.eventHeightInPixels + me.eventSpacing));\n            }\n        }\n        else {\n            return me.eventsPerCell;\n        }\n    }\n    getMaxEventsForWeek(week) {\n        const { row } = this.getWeekContext(week);\n        return Math.max(...Array.from(row.querySelectorAll(this.visibleCellSelector)).map(c => {\n            const cellData = this.cellMap.get(c.dataset.date);\n            return cellData?.renderedEvents.length || 0;\n        }));\n    }\n    getWeekContext(week) {\n        let weekStart, visibleWeekStart, rowIndex;\n        // Zero-based row index used. Extract the date of its first cell\n        if (typeof week === 'number') {\n            rowIndex  = week;\n            visibleWeekStart = weekStart = DH.parseKey(this.weekElements[week].querySelector(this.visibleCellSelector).dataset.date);\n        }\n        // Element passed\n        else if (week.nodeType === 1) {\n            visibleWeekStart = weekStart = DH.parseKey(week.closest('.b-calendar-row').querySelector('[data-date]').dataset.date);\n            rowIndex  = Math.floor(DH.diff(this.startDate, weekStart, 'd') / 7);\n        }\n        // Date passed\n        else {\n            const incr = ((week.getDay(week) - DH.weekStartDay) + 7) % 7;\n            visibleWeekStart = weekStart = DH.add(DH.clearTime(week), -incr, 'd');\n            rowIndex  = Math.floor(DH.diff(this.startDate, week, 'd') / 7);\n        }\n        // Step over initial hidden days. For example, US has Sunday as the week start day.\n        // If that's hidden, then the Monday is the *visible* week start.\n        while (this.hiddenNonWorkingDays[visibleWeekStart.getDay()]) {\n            visibleWeekStart.setDate(weekStart.getDate() + 1);\n        }\n        return {\n            rowIndex,\n            weekStart,\n            visibleWeekStart,\n            row : this.weekElements[rowIndex]\n        };\n    }\n    /**\n     * Causes the week row referenced by the parameter (Either a Date, or the **zero based** row index)\n     * to size itself to exactly wrap the maximum number of events for any day of that week.\n     *\n     * If there are a *lot* of events, the row may grow in height. If few, or none, the row will shrink\n     * in height. The day name header along the top will always be visible by default.\n     *\n     * The row has the CSS class `'b-shrinkwrapped'` added when it is in the shrinkwrapped state\n     * to allow querying, and custom styling.\n     *\n     * See {@link #function-flexWeekRow} for the converse operation.\n     *\n     * @param {Date|Number} week Either the date of a day within the week, or the **zero based** week row\n     * to shrinkwrap.\n     */\n    shrinkwrapWeekRow(week, /* private */ isLastCall = true) {\n        const\n            me               = this,\n            {\n                weekStart,\n                row\n            }                = me.getWeekContext(week),\n            {\n                maxEventsPerCell,\n                eventContainerTop\n            } = me,\n            wasShrinkwrapped = row.classList.contains('b-shrinkwrapped'),\n            maxEventsForWeek = me.getMaxEventsForWeek(week),\n            maxEventCount    = maxEventsPerCell ? Math.min(maxEventsPerCell, maxEventsForWeek) : maxEventsForWeek,\n            shrinkwrapHeight = me.eventHeightInPixels * maxEventCount + (me.eventSpacing * (maxEventCount + 1)) + Math.ceil(eventContainerTop),\n            expanded         = maxEventsForWeek > me.eventsPerCell,\n            t                = row.querySelector('.b-week-toggle-tool');\n        // Create, or reconfigure any existing scrollable in the read phase\n        if (isLastCall) {\n            me.scrollable = {\n                overflowY : 'auto'\n            };\n        }\n        // All rows get the class. It's mainly a flag to indicate that the row\n        // *should* be measured and re-flexed when any data changes.\n        row.classList.add('b-shrinkwrapped');\n        // Empty rows do not get a calculated size\n        if (!row.classList.contains('b-empty-row')) {\n            t && (t.dataset.btip = me.L('L{WeekExpander.collapseTip}'));\n            row.classList.remove('b-has-overflow');\n            // We need to know if it's expanded\n            row.classList.toggle('b-expanded', expanded);\n            // If we need to expand, gir and shrink must be 0.\n            // If it was not a full row, it's allowed to grow.\n            row.style.flex = expanded ? `0 0 ${shrinkwrapHeight}px` : `1 0 ${shrinkwrapHeight}px`;\n        }\n        // Keep a flag so that our getEventsPerCell(date) can shortcut is answer\n        // if all rows are evenly flexed without having to query.\n        me.hasShrinkwrappedRows = true;\n        // Refresh content before it achieves its new height.\n        // Content will be revealed by the transition.\n        if (isLastCall) {\n            me.refresh();\n        }\n        /**\n         * This event is fired as soon as a week row is requested to be shrinkwrapped.\n         *\n         * It's not called if we are just re-synching the height of shrinkwrapped rows\n         * which needs to be done if the shape of the data changes.\n         *\n         * The animated transition to the new height will still be in progress, but the row's\n         * flex style is set to its calculated height.\n         *\n         * To wait until the animated transition is finished, use the Promise returned\n         * from {@link #function-shrinkwrapWeekRow}\n         *\n         * ```javascript\n         *     monthView.shrinkwrapWeekRow(0).then() => Toast.show('Row zero shrinkwraps event content);\n         * ```\n         * @event weekShrinkwrap\n         * @param {Date} weekStart The start date of the week being shrinkwrapped.\n         * @param {HTMLElement} element The week row being shrinkwrapped.\n         */\n        if (!wasShrinkwrapped) {\n            me.trigger('weekShrinkwrap', {\n                weekStart,\n                element : row\n            });\n        }\n        // Sets the flag class on the widget which warns all and sundry that styles may be in flux.\n        if (isLastCall) {\n            if (!me.isAnimating) {\n                me.isAnimating = true;\n            }\n            return new Promise(resolve => {\n                EventHelper.onTransitionEnd({\n                    element  : row,\n                    property : 'flex-basis',\n                    handler  : 'onAllWeekElementsExpanded',\n                    thisObj  : me,\n                    args     : [resolve]\n                });\n            });\n        }\n    }\n    onAllWeekElementsExpanded(element, property, resolve) {\n        this.isAnimating = false;\n        // Account for any scrollbar.\n        // The call from the refresh in shrinkwrapWeekRow will find that there is no overflow yet\n        // due to animated nature of expansion. We must check when expansion has finished.\n        this.syncCalendarWeekDaysWithScrollable();\n        resolve();\n    }\n    /**\n     * Causes the week row referenced by the parameter (Either a Date, or the **zero-based** row index)\n     * to become flexed in height to share the available height of the Calendar equally with other\n     * flexed rows.\n     *\n     * See {@link #function-shrinkwrapWeekRow} for the converse operation.\n     *\n     * @param {Date|Number} date Either the date of a day within the week, or the **zero based** week row\n     * to flex.\n     */\n    flexWeekRow(date, /* private */ isLastCall = true, allRows = false) {\n        const\n            me = this,\n            {\n                weekStart,\n                row\n            }  = me.getWeekContext(date),\n            t  = row.querySelector('.b-week-toggle-tool');\n        if (row.classList.contains('b-shrinkwrapped')) {\n            // Week will transition back to flex-basis : 1/6 * 100% from CSS\n            row.style.flex = '';\n            row.classList.add('b-flexing');\n            t && (t.dataset.btip = this.L('L{WeekExpander.expandTip}'));\n            /**\n             * This event is fired as soon as a week row is requested to be flexed. The animated\n             * transition to the new height will still be in progress, but the row's flex style is\n             * set to its evenly shared flex value.\n             *\n             * To wait until the animated transition is finished, use the Promise returned\n             * from {@link #function-flexWeekRow}\n             *\n             * ```javascript\n             *     monthView.flexWeekRow(0).then() => Toast.show('Row zero flexed);\n             * ```\n             * @event weekFlex\n             * @param {Date} weekStart The start date of the week being reverted to a flexed height.\n             * @param {HTMLElement} element The week row being reverted to a flexed height.\n             */\n            me.trigger('weekFlex', {\n                weekStart,\n                element : row\n            });\n            // Set the underlying property. We do not want to trigger a full switch to all flexed.\n            me._autoRowHeight = false;\n            // Sets the flag class on the widget which warns all and sundry that styles may be in flux.\n            if (isLastCall && !me.isAnimating) {\n                me.isAnimating = true;\n            }\n            const result = new Promise(resolve => {\n                EventHelper.onTransitionEnd({\n                    element  : row,\n                    property : 'flex-basis',\n                    handler  : isLastCall ? 'onAllWeekElementsFlexed' : 'onWeekElementFlexed',\n                    thisObj  : me,\n                    args     : [resolve, allRows]\n                });\n            });\n            return result;\n        }\n    }\n    onWeekElementFlexed(weekElement, property, resolve) {\n        weekElement.classList.remove('b-shrinkwrapped', 'b-flexing', 'b-expanded');\n        resolve();\n    }\n    onAllWeekElementsFlexed(weekElement, property, resolve, allRows) {\n        const me = this;\n        // Reconfigure any existing scrollable.\n        me.scrollable.overflowY = me.scrollable.hasOverflow('y');\n        // If we are flexing *all* rows, ensure they are all fixed.\n        if (allRows) {\n            me.shrinkwrappedRows.forEach(r => r.classList.remove('b-shrinkwrapped', 'b-flexing', 'b-expanded'));\n        }\n        else {\n            weekElement.classList.remove('b-shrinkwrapped', 'b-flexing', 'b-expanded');\n        }\n        // Fire animationEnd event after element classes have been fixed up.\n        me.isAnimating = false;\n        // Keep a flag so that our getEventsPerCell(date) can shortcut is answer\n        // if all rows are evenly flexed without having to query.\n        me.hasShrinkwrappedRows = me.shrinkwrappedRows.length;\n        // Refresh after the height shrink animation has ended.\n        // Old, overflowing data will be clipped. The visual effect will just be\n        // the +n more appearing\n        me.refresh();\n        // Account for any scrollbar.\n        // The call from the refresh in flexWeekRow will find that there is still overflow\n        // due to animated nature of collapse. We must check when collapse has finished.\n        me.syncCalendarWeekDaysWithScrollable();\n        resolve();\n    }\n    // The header must allow a scrollbar width if the platform displays scrollbars\n    syncCalendarWeekDaysWithScrollable() {\n        this.weekdaysHeader.classList[this.scrollable?.hasScrollbar() ? 'add' : 'remove']('b-show-yscroll-padding');\n    }\n    updateHideOtherMonthCells() {\n        super.updateHideOtherMonthCells(...arguments);\n        this.refresh();\n    }\n    updateEventHeight(height, oldHeight) {\n        const me = this;\n        super.updateEventHeight(height, oldHeight);\n        if (!me.isConfiguring) {\n            // If the minRowHeight is expressed in evs, it has to be reavaluated.\n            if (me.minRowHeight?.match(evRegexp)) {\n                me.updateMinRowHeight(me._minRowHeight);\n            }\n            // Keep any shrinkwrapped rows in the correct shape\n            me.syncShrinkwrappedRows();\n            const padding = DomHelper.getEdgeSize(me.element, 'padding', 'tb');\n            // Always leave room for at least two events\n            me.minHeight =\n                // Month is usually 6 weeks\n                ((me.eventHeightInPixels + 1) * 2 + me.eventSpacing * 3 + Math.ceil(me.eventContainerTop)) * 6 +\n                // Add header height with borders\n                me.weekdaysHeader.offsetHeight + 7 +\n                // And view padding\n                padding.height;\n        }\n    }\n    updateMinRowHeight(minRowHeight) {\n        const\n            me         = this,\n            eventCount = parseInt(minRowHeight?.match?.(evRegexp)?.[1]);\n        // See if they configured it in evs which is our own \"CSS\" units meaning events\n        if (!isNaN(eventCount)) {\n            if (me.isConfiguring) {\n                return me.ion({\n                    paint : 'updateMinRowHeight',\n                    args  : [minRowHeight],\n                    once  : true\n                });\n            }\n            minRowHeight = me.eventHeightInPixels * eventCount + (me.eventSpacing * (eventCount + 1)) + Math.ceil(me.eventContainerTop);\n        }\n        super.updateMinRowHeight(minRowHeight);\n        // If we are in the middle of a flexWeekRow or shrinkwrapWeekRow animation\n        // We cannot do this as it needs to measure a final value\n        if (me.isAnimating) {\n            me.ion({\n                animationEnd : 'performResizeRefresh',\n                thisObj      : me,\n                args         : [me._eventsPerCell, me._eventContainerTop],\n                once         : true\n            });\n        }\n        else {\n            // Calculates new values for eventsPerCell and eventContainerTop\n            // and handles changes to either.\n            me.performResizeRefresh(me._eventsPerCell, me._eventContainerTop);\n        }\n    }\n    changeMaxEventsPerCell(maxEventsPerCell) {\n        return maxEventsPerCell == null ? this.constructor.configurable.maxEventsPerCell : maxEventsPerCell;\n    }\n    updateMaxEventsPerCell() {\n        if (!this.isConfiguring) {\n            this.syncShrinkwrappedRows();\n        }\n    }\n    async updateAutoRowHeight(autoRowHeight, wasAutoRowHeight) {\n        // The change from undefined to false during initialization is a noop.\n        if (this.initializingAutoRowHeight && autoRowHeight === Boolean(wasAutoRowHeight)) {\n            return;\n        }\n        const\n            me               = this,\n            { weekElements } = me,\n            { length }       = weekElements,\n            weekExpander     = (me.features || me.calendar?.features)?.weekExpander;\n        let finalPromise;\n        // Disable WeekExpander *before*() we shrinkwrap so that the WeekExpander's\n        // UI disappears immediately.\n        if (weekExpander && autoRowHeight) {\n            weekExpander.disabled = weekExpander.disabledByAutoRowHeight = true;\n        }\n        // Either shrinkwrap or reset to flex all week rows.\n        // autoRowHeight disables weekExpander and decides row heights.\n        if (autoRowHeight) {\n            for (let i = 0; i < length; i++) {\n                finalPromise = me.shrinkwrapWeekRow(i, i === length - 1);\n            }\n        }\n        else {\n            for (let i = 0; i < length; i++) {\n                finalPromise = me.flexWeekRow(i, i === length - 1, true);\n            }\n        }\n        // Wait for the last row to finish.\n        await finalPromise;\n        // Re-enable *after* collapsing so that WeekExpander UI only\n        // appears if needed.\n        if (weekExpander && autoRowHeight && weekExpander.disabledByAutoRowHeight) {\n            weekExpander.disabled = weekExpander.disabledByAutoRowHeight = false;\n        }\n        // Will need to redraw when we reach all flexed row heights because\n        // the eventsPerCell will need to be recalculated\n        if (!autoRowHeight) {\n            me._eventContainerHeight = me._eventsPerCell = null;\n            me.refresh();\n        }\n    }\n    // When data changes or eventHeight changes, any shrinkwrapped rows need to be\n    // kept in the correct shape;\n    syncShrinkwrappedRows() {\n        if (this.isVisible) {\n            const { shrinkwrappedRows } = this;\n            for (let i = 0, { length } = shrinkwrappedRows; i < length; i++) {\n                this.shrinkwrapWeekRow(shrinkwrappedRows[i], i === length - 1);\n            }\n        }\n        else {\n            this.whenVisible(this.syncShrinkwrappedRows);\n        }\n    }\n    changeScrollable(scrollable, oldScrollable) {\n        scrollable = super.changeScrollable(scrollable, oldScrollable);\n        if (scrollable?.overflowX) {\n            // Create a Scroller to scroll the day header's X axis in sync with the month grid\n            this.weekdaysScrollable || (this.weekdaysScrollable = new Scroller({\n                widget    : this,\n                element   : this.weekdaysHeader,\n                overflowX : 'hidden-scroll'\n            }));\n            scrollable.addPartner(this.weekdaysScrollable, 'x');\n        }\n        return scrollable;\n    }\n    collectEvents(options) {\n        if (this.hideOtherMonthCells) {\n            const { year, month } = this.month;\n            // use strict bounds of the month, not of the cells in the UI.\n            // The \"other month\" cells in the UI are not visible in this mode.\n            options.startDate = new Date(year, month, 1);\n            options.endDate = new Date(year, month + 1, 1);\n        }\n        // Only the first *visible* cell needs overflows flowing into it.\n        // from after that, propagateCellEvents copies events forward, so\n        // the getEvents will use the \"startDate\" index to extract events for a date.\n        options.getDateIndex = date => date > (this.firstVisibleDate || this.startDate) ? 'startDate' : 'date';\n        return super.collectEvents(options);\n    }\n    getDayElement(date, strict) {\n        if (typeof date !== 'string') {\n            date = DH.makeKey(date);\n        }\n        // Enforce strict meaning this view must own that date.\n        // month.month is the *zero based* index that the Date class uses.\n        if (strict && parseInt(date.substr(5, 2)) !== this.month.month + 1) {\n            return;\n        }\n        return super.getDayElement(date);\n    }\n    /**\n     * Determines what is under the cursor of the specified event or what is described by the given element.\n     * @param {Event|Element} domEvent The event or element\n     * @returns {CalendarHit}\n     */\n    calendarHitTest(domEvent) {\n        const\n            hit = super.calendarHitTest(domEvent),\n            target = DomHelper.getEventElement(domEvent);\n        if (hit) {\n            // Two levels of disabling other month cells.\n            // Disabled means they are visible but unresponsive.\n            // hidden means they are invisible\n            if (hit.date.getMonth() !== this.month.month && (this.disableOtherMonthCells || this.hideOtherMonthCells)) {\n                return;\n            }\n            const\n                weekElement = target.closest('.b-calendar-week'),\n                week = weekElement?.dataset.week?.split(',').map(Number);\n            if (week) {\n                hit.cell = hit.cell || target.closest('.b-calendar-cell');\n                hit.dayNumber = Number(hit.cell?.dataset.columnIndex);\n                hit.week = week;\n                hit.weekElement = weekElement;\n                hit.weekNumber = week[1];\n                hit.weekOffset = week[1] - Number(this.weeksElement.firstElementChild.dataset.week.split(',')[1]);\n            }\n        }\n        return hit;\n    }\n    getDateFromPosition(clientX, clientY) {\n        const\n            me = this,\n            weekEls = me.weeksElement.childNodes;\n        for (let rect, i = 0; i < weekEls.length; ++i) {\n            rect = weekEls[i].getBoundingClientRect();\n            if (rect.top <= clientY && clientY < rect.bottom) {\n                if (rect.left <= clientX && clientX < rect.right) {\n                    const\n                        dx     = me.rtl ? rect.right - clientX : clientX - rect.x,\n                        column = Math.floor(dx * me.weekLength / rect.width);\n                    // Some days may be hidden.\n                    if (me.hideNonWorkingDays) {\n                        const cellDates = Array.from(weekEls[i].querySelectorAll(me.visibleCellSelector)).map(e => me.getDateFromElement(e));\n                        return cellDates[column];\n                    }\n                    else {\n                        const date = me.getDateFromElement(weekEls[i].querySelector(me.visibleCellSelector));\n                        date.setDate(date.getDate() + column);\n                        return date;\n                    }\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Determines the week container element of the specified event or the given element.\n     * @param {Event|Element} domEvent The event or element\n     * @returns {Element}\n     * @internal\n     */\n    getWeekElementFor(domEvent) {\n        const target = DomHelper.getEventElement(domEvent);\n        return target?.closest('.b-calendar-week') || null;\n    }\n    updateEventStore(eventStore, was) {\n        super.updateEventStore?.(eventStore, was);\n        // Create the empty cell structure before the first refresh with data\n        // so that boilerplate elements may be measured.\n        CalendarPanel.prototype.doRefresh.call(this);\n    }\n    updateOverflowClickAction() {\n        this.refresh();\n    }\n    updateSixWeeks() {\n        // Invalidate the values so that they are recalculated in the superclass's refresh\n        this._eventsPerCell = this._eventContainerTop = this._eventContainerHeight = null;\n        super.updateSixWeeks(...arguments);\n    }\n    onMonthDateChange({ changes }) {\n        // Month's row count with respect to the sixWeeks setting has changed...\n        if (changes.r && !this.sixWeeks) {\n            // Invalidate the values so that they are recalculated in the superclass's refresh\n            this._eventsPerCell = this._eventContainerTop = this._eventContainerHeight = null;\n        }\n        super.onMonthDateChange(...arguments);\n    }\n    doRefresh() {\n        const\n            me = this,\n            {\n                weekElements\n            }  = me;\n        // Only ingest and process autoRowHeight when we have visibility\n        if (!me.isConfiguring) {\n            me.getConfig('autoRowHeight');\n            me._cellMap?.clear();\n        }\n        const result = super.doRefresh();\n        // Mark rows with no events. These are willing to flex-shrink to a CSS-defined minimum\n        for (let i = 0, { length } = weekElements; i < length; i++) {\n            const\n                row = weekElements[i],\n                maxEvents = Array.prototype.reduce.call(row.querySelectorAll(me.visibleCellSelector), (result, cell) => {\n                    const cellData = me.cellMap.get(cell.dataset.date);\n                    return result + (cellData?.renderedEvents.length || 0);\n                }, 0);\n            row.classList.toggle('b-empty-row', !maxEvents);\n        }\n        // Account for any scrollbar\n        me.syncCalendarWeekDaysWithScrollable();\n        return result;\n    }\n    showEvent(eventRecord) {\n        this.setDate(eventRecord.startDate);\n    }\n    changeDayNumberCentered(dayNumberCentered) {\n        return Boolean(dayNumberCentered);\n    }\n    updateShowWeekColumn(showWeekColumn) {\n        // If we are hiding the week column and we never created any in-cell week number\n        // elements (They are not rendered if not required), we have to refresh to get them.\n        if (!showWeekColumn && !this.element.querySelector('.b-week-num')) {\n            this.doRefresh();\n        }\n        super.updateShowWeekColumn(showWeekColumn);\n    }\n    updateHideNonWorkingDays(hideNonWorkingDays) {\n        super.updateHideNonWorkingDays?.(hideNonWorkingDays);\n        // Widths will change, so a refresh is needed.\n        if (!this.isConfiguring) {\n            this.refresh();\n        }\n    }\n    updateDayNumberCentered(dayNumberCentered) {\n        const me = this;\n        // First time we flip to center, cache was the week number showing was\n        // so that we can restore it.\n        if (!me._dayNumberCentered && !('nonCenteredDayNumShowWeekColumn' in me)) {\n            me.nonCenteredDayNumShowWeekColumn = me.showWeekColumn;\n        }\n        me._dayNumberCentered = dayNumberCentered;\n        me.element.classList[dayNumberCentered ? 'add' : 'remove']('day-number-center');\n        // Centered day number with week number inside the cell header looks bad.\n        me.showWeekColumn = dayNumberCentered ? true : me.nonCenteredDayNumShowWeekColumn;\n    }\n    get dayNameSelector() {\n        return this.showWeekColumn ? '.b-cal-cell-header' : super.dayNameSelector;\n    }\n    set dayNameSelector(dayNameSelector) {\n        this._dayNameSelector = dayNameSelector;\n    }\n    isValidTargetDate(date) {\n        const newMonth = date.getMonth();\n        if (newMonth !== this.month.month) {\n            const\n                minDate = this.minDate || this.calendar?.minDate,\n                maxDate = this.maxDate || this.calendar?.maxDate;\n            // Only do date arithmetic if we need to.\n            if (!isNaN(minDate) || !isNaN(maxDate)) {\n                const { cellMonth } = this;\n                cellMonth.date = date;\n                if (!isNaN(minDate)) {\n                    // Veto navigation to before minDate.\n                    if (cellMonth.startDate < minDate) {\n                        return false;\n                    }\n                }\n                if (!isNaN(maxDate)) {\n                    // Veto navigation to after maxDate.\n                    // Month class's concept of date is inclusive. Its dates\n                    // refer to a 24 hour block unlike scheduling UIs so increment it.\n                    if (DH.add(cellMonth.endDate, 1, 'd') > maxDate) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n    set startDate(date) {\n        this.date = date;\n    }\n    get startDate() {\n        return super.startDate;\n    }\n    next() {\n        this.date = DH.add(this.date || this.startDate, 1, 'month');\n    }\n    previous() {\n        this.date = DH.add(this.date || this.startDate, -1, 'month');\n    }\n}\nMonthView.initClass();\nMonthView._$name = 'MonthView';", "import Panel from '../../Core/widget/Panel.js';\nimport CalendarMixin from './mixin/CalendarMixin.js';\nimport Objects from '../../Core/helper/util/Objects.js';\nimport Bag from '../../Core/util/Bag.js';\nimport DayView from './DayView.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport AvatarRendering from '../../Core/widget/util/AvatarRendering.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport CalendarRow from './CalendarRow.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport ResizeMonitor from '../../Core/helper/ResizeMonitor.js';\nimport FunctionHelper from '../../Core/helper/FunctionHelper.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\n/**\n * @module Calendar/widget/ResourceView\n */\nconst\n    day0              = new Date(0),\n    day1              = DateHelper.add(day0, 1, 'day'),\n    emptyMap          = Object.freeze(new Map()),\n    scrollAxesConfigs = {\n        hourHeight       : 1,\n        showAllDayHeader : 1,\n        dayStartTime     : 1,\n        dayEndTime       : 1\n    },\n    sharedConfigs     = ['allowOverlap', 'timeFormat', 'coreHours', 'fitHours', 'hourHeight', 'visibleStartTime', 'dateFormat', 'dayStartTime', 'dayEndTime', 'hideNonWorkingDays', 'nonWorkingDays', 'readOnly', 'zoomOnMouseWheel', 'filterEventResources'];\n/**\n * A Calendar view which encapsulates a series of child Calendar views, one for each resource (often\n * referred to as \"calendar\") in the project.\n *\n * The type of view displayed defaults to `'week'`, but this can be changed using the {@link #config-view}\n * config object.\n *\n * Usage :\n *\n * ```javascript\n * new Calendar({\n *     appendTo : domElement,\n *\n *     // Resource avatar images are loaded from this path\n *     resourceImagePath : '../shared/images/users/',\n *\n *     modes : {\n *         // Let's not show the default views\n *         day    : null,\n *         week   : null,\n *         month  : null,\n *         year   : null,\n *         agenda : null,\n *\n *         // Mode name can be anything if it contains a \"type\" property.\n *         monthResourceview : {\n *             // Type has the final say over which view type is created\n *             type : 'resource',\n *\n *             // This is a config object for the subviews; one for each resource\n *             view : {\n *                 // We show a month view for each resource in the project\n *                 type : 'month'\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * {@inlineexample Calendar/widget/ResourceView.js}\n *\n * @demo Calendar/resourceview\n *\n * @extends Core/widget/Panel\n * @mixes Core/widget/mixin/Responsive\n * @mixes Calendar/widget/mixin/CalendarMixin\n * @classtype resourceview\n * @classtypealias resource\n * @typingswidget\n */\nexport default class ResourceView extends Panel.mixin(CalendarMixin) {\n    static $name = 'ResourceView';\n    static type = 'resourceview';\n    static get configurable() {\n        return {\n            layout : 'box',\n            textContent : false,\n            scrollable : {\n                overflowX : true\n            },\n            date : {\n                $config : {\n                    equal : 'date'\n                },\n                value : null\n            },\n            /**\n             * A config object used to configure the sub views. The default `type` used is `'weekview'`\n             *\n             * After instantiation, while in use, changes to the `view` property, will be propagated\n             * to all child {@link #config-view views}.\n             *\n             * This property may be used to adjust properties of every child view of the resource\n             * view in one statement.\n             * @prp {ContainerItemConfig|Object} view\n             * @typings {ContainerItemConfig|Record<string, any>}\n             */\n            view : {\n                type : 'weekview'\n            },\n            /**\n             * By default, the resource views are displayed in the order that the resources appear\n             * in the project's `resourceStore`, so they will appear in a stable position, meaning\n             * when a view is filtered out, then filtering it in will replace it in the same position.\n             *\n             * If this config is `false`, re-adding a view will place it at the end.\n             * @config {Boolean}\n             * @default\n             */\n            stableResourceOrder : true,\n            /**\n             * The width of a resource calendar panel (view always stretches to fill window)\n             * @member {Number|String} resourceWidth\n             */\n            /**\n             * The width of a resource calendar panel (view always stretches to fill window)\n             * @config {Number|String}\n             */\n            resourceWidth : null,\n            /**\n             * Set to true to hide non-working days\n             * @member {Boolean} hideNonWorkingDays\n             */\n            /**\n             * Set to true to hide non-working days\n             * @config {Boolean}\n             */\n            hideNonWorkingDays : null,\n            viewCache : {\n                $config : ['lazy', 'nullify'],\n                value   : true\n            },\n            avatarRendering : {},\n            /**\n             * A field name or a function returning a string to be displayed below resource name in the resource view\n             * headers.\n             *\n             * ```javascript\n             * const calendar = new Calendar({\n             *     modes : {\n             *         // Mode name can be anything if it contains a \"type\" property.\n             *         weekResources : {\n             *             type  : 'resource',\n             *             // Get meta string to display\n             *             meta : resource => resource.title\n             *         }\n             *     }\n             * });\n             * ```\n             *\n             * @config {String|Function}\n             * @param {Scheduler.model.ResourceModel} resource Displayed resource\n             * @returns {String} Text to be displayed below resource name\n             */\n            meta : null,\n            /**\n             * Display an avatar in the resource view headers, either as an image or using resource initials.\n             *\n             * Looks for an image name in the {@link Scheduler/model/ResourceModel#field-imageUrl} and\n             * {@link Scheduler/model/ResourceModel#field-image} fields on the resource. Set\n             * {@link Calendar/view/Calendar#config-resourceImagePath} on Calendar to specify where to load images from.\n             * If no image is found, resource initials are displayed.\n             *\n             * @config {Boolean}\n             * @default\n             */\n            showAvatars : true,\n            /**\n             * When {@link Scheduler.model.ResourceTimeRangeModel}s are included in the data, they\n             * are only rendered in subviews of {@link Calendar.widget.ResourceView}s and normal\n             * {@link Calendar.model.TimeRangeModel}s are __not__ rendered in subviews of\n             * {@link Calendar.widget.ResourceView}s.\n             *\n             * Set this to `true` to render normal {@link Calendar.model.TimeRangeModel}s in subviews of\n             * this view.\n             * @config {Boolean}\n             * @default false\n             */\n            includeTimeRanges : null\n        };\n    }\n    // Use config system properties because these are *always available, including during construction.\n    static properties = {\n        sharedConfigs,\n        timeAxisConfigs : ['allDayEvents'].concat(sharedConfigs)\n    };\n    construct() {\n        super.construct(...arguments);\n        // If the built-in resource filter changes the resources visible, we have to react\n        // to that by refreshing which may add/remove some child views.\n        // Note this is a filter operation on the eventStore.\n        // We don't subscribe to the filter operation on the eventStore because that may happen\n        // often for other reasons (filtering based on other criteria), and we do not want to\n        // invoke this expensive refresh unnecessarily.\n        this.calendar?.sidebar?.widgetMap.resourceFilter?.ion({\n            change  : 'onResourceFilterSelectionChange',\n            thisObj : this\n        });\n    }\n    // This view is animating if any of its child views are animating\n    get isAnimating() {\n        return super.isAnimating || this.items.some(v => v.isAnimating);\n    }\n    get hasNonWorkingDays() {\n        return true;\n    }\n    changeScrollable(scrollable) {\n        scrollable = super.changeScrollable(...arguments);\n        // Our horizontal scroll range must be within the dayViewTimeAxis and dayViewScroller\n        // which are positioned sticky to the edges, thus narrowing the true visible range.\n        if (scrollable) {\n            Object.defineProperty(scrollable, 'viewport', {\n                get : this.getScrollingViewport.bind(this)\n            });\n        }\n        return scrollable;\n    }\n    // The scrolling viewport calculation method injected as the getter for the `viewport`\n    // property in our scrollable. It has to account for the time axis and the scroller\n    // which are docked at left and right using position : sticky.\n    getScrollingViewport() {\n        const\n            {\n                dayViewTimeAxis,\n                dayViewScroller\n            }       = this,\n            result  = Rectangle.client(this.scrollable.element);\n        return this.rtl ? result.adjust(dayViewScroller.width, 0, -dayViewTimeAxis.width, 0)\n            : result.adjust(dayViewTimeAxis.width, 0, -dayViewScroller.width, 0);\n    }\n    changeView(view) {\n        const\n            me     = this,\n            result = new Proxy(ObjectHelper.assign({}, view), {\n                set(target, prop, value) {\n                    const result = Reflect.set(...arguments);\n                    // Pass new property setting in to child views\n                    me.syncViewConfig(prop, value);\n                    return result;\n                },\n                deleteProperty(target, prop) {\n                    const result = Reflect.deleteProperty(...arguments);\n                    // Pass new property setting in to child views\n                    me.syncViewConfig(prop, null);\n                    return result;\n                }\n            });\n        me.viewType = bryntum.Calendar.Modes.resolveType(view.type);\n        return result;\n    }\n    /**\n     * Executes the passed function for each child view corresponding to each resource in the `resourceStore`.\n     * @param {Function} fn The function to call.\n     * @param {Object[]} [args] The arguments to pass. Defaults to the view being called followed by its index.\n     * @param {Object} [thisObj] The `this` reference for the function. Defaults to the view being called.\n     */\n    eachView(fn, args, thisObj = null) {\n        const\n            passView = args == null,\n            items    = [...this.viewCache];\n        for (let i = 0, { length } = items; i < length; i++) {\n            const view = items[i];\n            if (passView) {\n                args = [view, i];\n            }\n            if (view.callback(fn, thisObj || view, args) === false) {\n                return;\n            }\n        }\n    }\n    /**\n     * Yields the views which this ResourceView owns.\n     * @property {Calendar.widget.mixin.CalendarMixin[]}\n     * @readonly\n     */\n    get views() {\n        return [...this.viewCache];\n    }\n    updateResourceStore(resourceStore) {\n        this.detachListeners('resourceViewResourceChange');\n        super.updateResourceStore?.(resourceStore);\n        resourceStore.ion({\n            name    : 'resourceViewResourceChange',\n            change  : 'onResourceStoreChange',\n            sort    : 'onResourceStoreSort',\n            thisObj : this\n        });\n        this.refreshSoon();\n    }\n    onResourceStoreChange() {\n        this.refreshSoon();\n    }\n    onResourceStoreSort({ source }) {\n        const\n            visibleViews    = this.items.filter(v => v.isVisible && !v.isResourceDayViewTimeAxis),\n            resourceIdOrder = source.map(r => this.createViewId(r)),\n            viewIdOrder     = visibleViews.map(v => v.id);\n        // If the visible views are out of order, remove them then refresh\n        if (!ObjectHelper.isEqual(resourceIdOrder, viewIdOrder)) {\n            // Remove the views (not the timeaxis and scroller).\n            // refresh will add them in the right order\n            this.remove(...visibleViews);\n            this.refreshSoon();\n        }\n    }\n    onResourceFilterSelectionChange() {\n        this.refreshSoon();\n    }\n    changeViewCache(viewCache, oldViewCache) {\n        if (viewCache) {\n            return new Bag();\n        }\n        else if (oldViewCache) {\n            oldViewCache.forEach(v => v.destroy());\n            oldViewCache.clear();\n        }\n    }\n    getResourceView(resource) {\n        return this.viewCache.get(this.createViewId(resource)) || this.createView(resource);\n    }\n    doRefresh() {\n        const\n            me                 = this,\n            { scrollBarWidth } = DomHelper,\n            {\n                calendar,\n                _items,\n                resourceStore\n            }                  = me,\n            resourceFilter     = calendar?.widgetMap.resourceFilter,\n            // Filter available resources by the owning Calendar's ResourceFilter\n            calendars          = resourceFilter ? me.resourceStore.records.filter(c => resourceFilter.value.includes(c)) : me.resourceStore.records,\n            { length }         = calendars,\n            toAdd              = [],\n            toRemove           = [],\n            usedIds            = {};\n        // We need to have some resources loaded for us to know what resources we have to create views for.\n        // If the Calendar is using the loadOnDemand feature, we need to \"prime the pump\"\n        // by kicking off a load to get this information. We load a month's worth of\n        // events under the assumption that yearViews will not be used.\n        if (!resourceStore.count) {\n            const\n                { weekStartDay } = me,\n                monthStart       = DateHelper.getFirstDateOfMonth(me.date),\n                nextMonthStart   = DateHelper.add(monthStart, 1, 'month');\n            // Load a whole visible month block as displayed in a MonthView.\n            // Note that these are snapped to week starts as in a Calendar.\n            me.eventStore.getEvents({\n                startDate : DateHelper.add(monthStart, -(monthStart.getDay() - weekStartDay + 7) % 7, 'd'),\n                endDate   : DateHelper.add(nextMonthStart, 7 - (nextMonthStart.getDay() - weekStartDay + 7) % 7, 'd')\n            });\n        }\n        // If this was called directly, cancel any queued call.\n        me.refreshSoon.cancel();\n        let hitCount = 0;\n        for (let i = 0; i < length; i++) {\n            const\n                view    = me.getResourceView(calendars[i]),\n                isShown = _items.includes(view);\n            // If the ResourceStore was updated and the view is orphaned\n            // by the resource no longer being in there, we have to remove the view.\n            if (resourceStore.getById(view.resourceId)) {\n                view.title = me.titleTemplate(view.resource);\n                // View is present in our items..\n                if (isShown) {\n                    hitCount++;\n                }\n                // Not in our items; add\n                else {\n                    toAdd.push(view);\n                }\n                usedIds[view.id] = 1;\n            }\n            else if (isShown) {\n                toRemove.push(view);\n            }\n        }\n        // Check removals, unless all records were visited above\n        if (hitCount < _items.count) {\n            me.eachView(view => {\n                if (!usedIds[view.id]) {\n                    toRemove.push(view);\n                }\n            });\n            me.remove(toRemove);\n        }\n        // Ensure the docked left and right axes are present in correct positions for DayViews\n        if (me.viewType.isDayView) {\n            if (!_items.includes(me.dayViewTimeAxis)) {\n                toAdd.unshift(me.dayViewTimeAxis);\n            }\n            if (scrollBarWidth && !_items.includes(me.dayViewScroller)) {\n                toAdd.push(me.dayViewScroller);\n            }\n        }\n        const y = me.items[0]?.scrollable?.y;\n        me.add(...toAdd);\n        // Sync incoming view with the common scroll position\n        if (y != null) {\n            toAdd.forEach(v => {\n                // Must go directly to DOM because the config value will be equal on a re-show\n                v.scrollable.element.scrollTop = y;\n            });\n        }\n        // If we have added or removed any views, we need to sync some things.\n        if (toAdd.length || toRemove.length) {\n            let lastView;\n            for (let i = 0, { items } = me, { length } = items; i < length; i++) {\n                const\n                    view           = items[i],\n                    { scrollable } = view;\n                // Border collisions mean that a view's CSS may need to know whether\n                // it is first, last, or in between.\n                view.element.classList.remove('b-last-resource-view');\n                // isResourceDayViewTimeAxis is set in the dayViewTimeAxis, and the dayViewScroller\n                if (!view.isResourceDayViewTimeAxis) {\n                    view.element.classList[i > 1 ? 'remove' : 'add']('b-first-resource-view');\n                    lastView = view;\n                }\n                // Keep the Y axis of any scrollers synced.\n                if (scrollable) {\n                    scrollable.clearPartners();\n                    if (i) {\n                        view.scrollable.addPartner(items[i - 1].scrollable, 'y');\n                    }\n                }\n                // In case the view add/remove caused differences in the heights of the all day rows.\n                // All views must be in sync WRT the height of their all day rows.\n                view.allDayEvents?.refresh();\n            }\n            if (lastView) {\n                lastView.element.classList.add('b-last-resource-view');\n            }\n            // If some views have been added or removed, we need to resync the all day row heights\n            // because until all views are present, the sync cannot be valid.\n            if (me.viewType.isDayView) {\n                const\n                    allDayRows = me.views.filter(v => v.allDayEvents && v.isVisible),\n                    maxHeight  = allDayRows.length && Math.max(...allDayRows.map(v => v.allDayEvents.cellContentHeight));\n                // The allDayEvents refreshes might have caused one of them to be taller\n                // than any others. We have to resync them after their refresh.\n                if (maxHeight) {\n                    _items.forEach(v => {\n                        v.allDayEvents?.setEventContentHeight(maxHeight, false, true);\n                    });\n                }\n            }\n        }\n        if (me.viewType.isDayView) {\n            // Show/hide our fake scroller\n            me.syncDayViewScrollerVisibility();\n        }\n        me.refreshCount = (me.refreshCount || 0) + 1;\n        /**\n         * Fires when this ResourceView refreshes.\n         * @param {Calendar.widget.ResourceView} source The triggering instance.\n         * @event refresh\n         */\n        me.trigger('refresh');\n    }\n    // Override at this level. Child views process events\n    onCalendarPointerInteraction() {}\n    // Override at this level. Child views process data mutations\n    onCalendarStoreChange() {}\n    onChildAdd(child) {\n        super.onChildAdd(child);\n        // We get a look at child view config changes to see if we need to propagate them to their siblings\n        FunctionHelper.before(child, 'onConfigChange', 'onChildViewConfigChange', this, { return : false });\n    }\n    onChildViewConfigChange({ name, value }) {\n        // Propagate timeAxisConfig settings between all siblings.\n        // Do not proceed if we're already responding, *or* if this config change\n        // is the result of a syncViewConfig call and will be applied to all views anyway.\n        if (!this.syncingChildViewConfigs && !this.syncingViewConfig && this.timeAxisConfigs.includes(name)) {\n            // We need *all* sub views. Hidden (filtered out) subviews\n            // from the view cache have to be included. Use Set to uniquify them.\n            const items = new Set(this.items.concat([...this.viewCache]));\n            this.syncingChildViewConfigs = true;\n            items.forEach(i => {\n                if (name in i) {\n                    i[name] = value;\n                }\n            });\n            this.syncingChildViewConfigs = false;\n        }\n    }\n    createView(resource) {\n        const\n            me                  = this,\n            { id : resourceId } = resource,\n            {\n                resourceStore,\n                viewCache\n            }                   = me,\n            { project }         = resourceStore,\n            config              = Objects.merge({\n                project,\n                // All views must have a reference to the Calendar\n                calendar : me.calendar,\n                // IDs are matched so that a minimal Container update can be done\n                id  : me.createViewId(resource),\n                cls : 'b-resourceview-resource',\n                // The view must know which resource it is showing.\n                defaultCalendar : resourceId,\n                // Resource is configured in initially because it may be needed during\n                // configuration before we set a getter for it.\n                resource,\n                resourceId,\n                includeTimeRanges : me.includeTimeRanges,\n                weekStartDay      : me.weekStartDay,\n                parent            : me,\n                date              : me.date,\n                dateFormat        : me.dateFormat,\n                title             : me.titleTemplate(resource)\n            }, me.view);\n        // Copy in shared configs like hourHeight, dateFormat, dayStartTime, readOnly etc\n        if (me.calendar) {\n            ObjectHelper.copyPropertiesIf(config, [...viewCache][0] || me, me.sharedConfigs);\n        }\n        // DayViews must not show scrollers\n        if (DomHelper.scrollBarWidth && me.viewType.isDayView) {\n            config.scrollable = {\n                overflowX : false,\n                overflowY : 'hidden-scroll'\n            };\n        }\n        const result = bryntum.Calendar.Modes.create(config);\n        result.ion({\n            catchAll : 'onChildViewCatchAll',\n            thisObj  : me\n        });\n        result.element.removeAttribute('tabIndex');\n        result.element.dataset.resourceId = resourceId;\n        result.contentElement?.removeAttribute('tabIndex');\n        // The item's weight is its store index if we are using stableResourceOrder\n        Object.defineProperty(result, 'weight', {\n            get() {\n                return me.stableResourceOrder ? resourceStore.allIndexOf(resourceId) : 0;\n            }\n        });\n        // The item's resource should be dynamically accessed from the resourceStore\n        Object.defineProperty(result, 'resource', {\n            get() {\n                return resourceStore.getById(resourceId);\n            }\n        });\n        // The item's eventFilter filters in events assigned to its resource\n        Object.defineProperty(result, 'eventFilter', {\n            get() {\n                return e => e.resources.includes(this.resource);\n            }\n        });\n        viewCache.add(result);\n        /**\n         * Fires when a new sub view is created.\n         * @param {Calendar.widget.ResourceView} source The triggering instance.\n         * @param {Calendar.widget.mixin.CalendarMixin} view The newly created sub view.\n         * @typings view -> {typeof CalendarMixin}\n         * @event viewCreate\n         */\n        me.trigger('viewCreate', { view : result });\n        return result;\n    }\n    onChildViewCatchAll(e) {\n        // Inject the child view's resource into the event as the resourceRecord\n        e.resourceRecord = e.source.resource;\n        if (e.type !== 'paint') {\n            this.trigger(e.eventName, e);\n        }\n        if (e.type === 'heightchange') {\n            this.syncDayViewScrollerVisibility();\n        }\n    }\n    //region Title\n    changeAvatarRendering(config) {\n        if (config) {\n            return AvatarRendering.new({\n                element : this.element\n            }, config);\n        }\n    }\n    titleTemplate(resource) {\n        const\n            me         = this,\n            { meta }   = me,\n            metaValue  = typeof meta === 'string' ? resource[meta] : meta?.(resource),\n            // eventColor = #FF5555, apply as background-color\n            namedColor = DomHelper.isNamedColor(resource.eventColor) && resource.eventColor,\n            // eventColor = red, add b-sch-red cls\n            hexColor   = !namedColor && resource.eventColor;\n        return {\n            class : {\n                'b-resourceview-title' : 1,\n                'b-has-meta'           : metaValue\n            },\n            children : [\n                me.showAvatars && {\n                    class : {\n                        'b-resource-avatar-container'      : 1,\n                        [`b-sch-foreground-${namedColor}`] : namedColor\n                    },\n                    style : {\n                        color : hexColor || null\n                    },\n                    children : [\n                        me.getResourceAvatar(resource)\n                    ]\n                },\n                {\n                    class : 'b-resource-name',\n                    text  : resource.name\n                },\n                metaValue && {\n                    class : 'b-resource-meta',\n                    text  : metaValue\n                }\n            ]\n        };\n    }\n    //endregion\n    // Override here because we need to delegate the request to the subview for the\n    // event's resource\n    getEventElement(eventRecord, date = eventRecord.startDate, resourceRecord) {\n        return this.getResourceView(eventRecord.resource || resourceRecord)?.getEventElement(eventRecord, date);\n    }\n    /**\n     * This creates a specially styled DayView which matches the view config (so that\n     * dayStartTime, hourHeight etc. is synced) which shows nothing but its time axis.\n     * This acts as the single visible time axis on the left.\n     * @private\n     */\n    get dayViewTimeAxis() {\n        const me = this;\n        if (!me._dayViewTimeAxis) {\n            const viewConfig = ObjectHelper.copyProperties({}, me.view, me.timeAxisConfigs);\n            me._dayViewTimeAxis = ResourceDayViewTimeAxis.create({\n                ...viewConfig,\n                // Must always be at the beginning\n                weight : -1,\n                // This view must update its shape on data change but it won't contain any events.\n                // All it has to do is keep its allDayEventsHeight in sync with all its siblings\n                // which happens on refresh.\n                project    : me.project,\n                type       : 'resourcedayviewtimeaxis',\n                minWidth   : 0,\n                cls        : 'b-resource-dayview-timeaxis',\n                startDate  : day0,\n                endDate    : day1,\n                scrollable : {\n                    overflowX : false,\n                    overflowY : 'hidden-scroll'\n                },\n                // This toggles all the allDayEvents rows in synchrony\n                onCornerClick() {\n                    const\n                        { expanded } = me.firstChild.allDayEvents,\n                        toRefresh    = [];\n                    let drivingView = null;\n                    me.eachView(({ allDayEvents }) => {\n                        // Collapsing, do the one with least overflow first\n                        if (expanded) {\n                            if (!drivingView || allDayEvents.maxEventCount < drivingView.maxEventCount) {\n                                drivingView = allDayEvents;\n                            }\n                        }\n                        // Expanding, we have to do the one with most overflow first\n                        else {\n                            if (!drivingView || allDayEvents.maxEventCount > drivingView.maxEventCount) {\n                                drivingView = allDayEvents;\n                            }\n                        }\n                    });\n                    // Toggle the driving one\n                    const r = drivingView.refreshCount;\n                    drivingView.expanded = !expanded;\n                    // If it found nothing to do, it will not have refreshed. They all must refresh eventually.\n                    if (drivingView.refreshCount === r) {\n                        toRefresh.push(drivingView);\n                    }\n                    // Now do the rest\n                    me.items.forEach(v => {\n                        if (v !== drivingView) {\n                            const\n                                { allDayEvents } = v,\n                                r                = allDayEvents.refreshCount;\n                            // Don't recurse into this, call the real one.\n                            v.allDayEvents.expanded = !expanded;\n                            // If it found nothing to do, it will not have refreshed. They all must refresh eventually.\n                            if (allDayEvents.refreshCount === r) {\n                                toRefresh.push(allDayEvents);\n                            }\n                        }\n                    });\n                    // Some will not have found that they needed to refresh.\n                    // Force the issue so that they too correct their cellContentHeights\n                    for (let i = 0, { length } = toRefresh; i < length; i++) {\n                        toRefresh[i].doRefresh();\n                    }\n                }\n            }, me);\n            // If the time axis changes size, we may acquire or lose overflow\n            ResizeMonitor.addResizeListener(me._dayViewTimeAxis.timeAxisElement, me.syncDayViewScrollerVisibility.bind(me));\n        }\n        return me._dayViewTimeAxis;\n    }\n    /**\n     * This creates a specially styled DayView which matches the view config (so that\n     * dayStartTime, hourHeight etc. is synced) which shows nothing but its scrollbar.\n     * This acts as the single visible scrollbar on the right of the ResourceView.\n     * We cannot have the last DayView `overflowY : true` because then its flexed width\n     * being equal to the others, its content area would be <scrollBarWidth> narrower\n     * than the others.\n     * @private\n     */\n    get dayViewScroller() {\n        const me = this;\n        if (!me._dayViewScroller) {\n            const viewConfig = ObjectHelper.copyProperties({}, me.view, me.timeAxisConfigs);\n            me._dayViewScroller = ResourceDayViewTimeAxis.create({\n                ...viewConfig,\n                // Must always be at the end\n                weight : 999,\n                // This view must update its shape on data change but it won't contain any events.\n                // All it has to do is keep its allDayEventsHeight in sync with all its siblings\n                // which happens on refresh.\n                project    : me.project,\n                type       : 'resourcedayviewtimeaxis',\n                flex       : `0 0 ${DomHelper.scrollBarWidth}px`,\n                minWidth   : DomHelper.scrollBarWidth,\n                cls        : 'b-resource-dayview-scroller',\n                startDate  : day0,\n                endDate    : day1,\n                scrollable : {\n                    overflowX : false,\n                    overflowY : 'scroll'\n                }\n            }, me);\n            me._dayViewScroller.scrollable.addPartner(me.dayViewTimeAxis.scrollable, 'y');\n            // This may have to show/hide as we need/don't need a scrollbar\n            me.monitorResize = true;\n        }\n        return me._dayViewScroller;\n    }\n    onElementResize() {\n        super.onElementResize();\n        this.syncDayViewScrollerVisibility();\n    }\n    syncDayViewScrollerVisibility() {\n        // Show/hide our fake scroller if we have one\n        if (this.dayViewScroller) {\n            const needsScroller = this.dayViewTimeAxis.scrollable.hasOverflow('y');\n            if (this.dayViewScroller.isVisible !== needsScroller) {\n                this.dayViewScroller[needsScroller ? 'show' : 'hide']();\n            }\n        }\n    }\n    async scrollTo(target, options) {\n        const { views } = this;\n        if (target.isEventModel) {\n            const owningView = views.find(v => v.eventStore.includes(target));\n            owningView?.scrollTo(...arguments);\n            target = owningView.getEventElement(target);\n            // If the owning view was able to got to the passed event, ensure we\n            // scroll it into view.\n            if (target) {\n                return this.scrollable.scrollIntoView(target, options);\n            }\n        }\n        return views[0].scrollTo(...arguments);\n    }\n    createViewId(resource) {\n        return `${this.id}-resource${this.config.view.type}-${resource.id}`;\n    }\n    updateDate(date) {\n        // Inhibit any refreshes during multiple subview updates\n        this.suspendVisibility();\n        // Keep *all* views in sync, not just visible ones.\n        // Hidden ones will not refresh immediately. If a view is not currently visible,\n        // CalendarMixin's refresh schedules a refresh for the next time the view is painted.\n        this.viewCache.forEach(v => {\n            // We must skip the time axis and scroller that are added to handle Day/Week view scrolling\n            if (!v.isResourceDayViewTimeAxis) {\n                v.date = date;\n            }\n        });\n        // Trigger one round of refreshes.\n        this.resumeVisibility();\n        if (this.viewType.isDayView) {\n            // The allDayEvents refreshes might have caused one of them to be taller\n            // than any others. We have to resync them after their refresh.\n            this.items.forEach(v => {\n                v.allDayEvents?.setEventContentHeight(v.allDayEvents?.cellContentHeight);\n            });\n        }\n    }\n    updateResourceWidth(value) {\n        this.contentElement.style.setProperty('--resource-width', DomHelper.setLength(value));\n    }\n    updateWeekStartDay(weekStartDay, oldWeekStartDay) {\n        super.updateWeekStartDay?.(weekStartDay);\n        if (!this.isConfiguring) {\n            this.syncViewConfig('weekStartDay', weekStartDay);\n        }\n    }\n    updateHideNonWorkingDays(value) {\n        if (!this.isConfiguring) {\n            this.syncViewConfig('hideNonWorkingDays', value);\n        }\n    }\n    updateNonWorkingDays(value) {\n        if (!this.isConfiguring) {\n            this.syncViewConfig('nonWorkingDays', value);\n        }\n    }\n    updateIncludeTimeRanges(value) {\n        if (!this.isConfiguring) {\n            this.syncViewConfig('includeTimeRanges', value);\n        }\n    }\n    syncViewConfig(configName, value) {\n        const update = view => {\n            view[configName] = value;\n        };\n        // Cache this during the run so that onChildViewConfigChange doesn't bounce\n        this.syncingViewConfig = true;\n        // Some configs must affect the DayView scroller axes.\n        if (scrollAxesConfigs[configName]) {\n            this.items.forEach(update);\n        }\n        // Most only go to the real child views.\n        else {\n            this.eachView(update);\n        }\n        this.syncingViewConfig = false;\n    }\n    descriptionRenderer() {\n        return [...this.viewCache.items][0]?.description || 'No resources';\n    }\n    get startDate() {\n        return new Date(Math.min(...this.items.reduce((result, v) => {\n            if (!v.isResourceDayViewTimeAxis) {\n                result.push(v.startDate);\n            }\n            return result;\n        }, [])));\n    }\n    get endDate() {\n        return new Date(Math.max(...this.items.reduce((result, v) => {\n            if (!v.isResourceDayViewTimeAxis) {\n                result.push(v.endDate);\n            }\n            return result;\n        }, [])));\n    }\n    get stepUnit() {\n        const firstItem = [...this.viewCache][0];\n        return firstItem?.stepUnit;\n    }\n    get firstChild() {\n        return this.items.filter(w => !w.isResourceDayViewTimeAxis)[0];\n    }\n    previous() {\n        const firstItem = [...this.viewCache][0];\n        // We may never have created a child view.\n        if (firstItem) {\n            this.date = DateHelper.add(this.date, -firstItem.duration, 'day');\n        }\n    }\n    next() {\n        const firstItem = [...this.viewCache][0];\n        // We may never have created a child view.\n        if (firstItem) {\n            this.date = DateHelper.add(this.date, firstItem.duration, 'day');\n        }\n    }\n}\n// Special non-data reading classes to create the scrollers\n// either side of a series of DayViews.\nclass ResourceDayViewAllDayEvents extends CalendarRow {\n    static get $name() {\n        return 'ResourceDayViewAllDayEvents';\n    }\n    // Factoryable type name\n    static get type() {\n        return 'resourcedayviewalldayevents';\n    }\n    // The timeAxis's allDayEvents has overflow if any of the\n    // real sibling DayView allDayEvents has overflow\n    get hasOverflow() {\n        return this.up('resourceview').views.some(v => v.allDayEvents?.hasOverflow);\n    }\n    createCellMap() {\n        return emptyMap;\n    }\n}\nclass ResourceDayViewTimeAxis extends DayView {\n    static get $name() {\n        return 'ResourceDayViewTimeAxis';\n    }\n    // Factoryable type name\n    static get type() {\n        return 'resourcedayviewtimeaxis';\n    }\n    static get configurable() {\n        return {\n            allDayEvents : {\n                type : 'resourcedayviewalldayevents'\n            }\n        };\n    }\n    compose() {\n        const result          = super.compose();\n        result['aria-hidden'] = true;\n        return result;\n    }\n    // These axes have no say in this\n    scrollToVisibleStartTime() {}\n    createCellMap() {\n        return emptyMap;\n    }\n    calculateCellContentHeight() {\n        return 0;\n    }\n    getDateFromPosition(clientX, clientY, local = false) {\n        const\n            me     = this,\n            date   = me.startDate,\n            top    = local ? 0 : me.dayContentElement.getBoundingClientRect().y,\n            height = me.timeAxisElement.offsetHeight,\n            dy     = clientY - top;\n        return DateHelper.round(\n            DateHelper.add(DateHelper.clearTime(date), me.dayStartMs + Math.floor(dy / height * me.getDayLength()), 'ms'),\n            me.increment);\n    }\n}\nResourceDayViewAllDayEvents.initClass();\nResourceDayViewTimeAxis.initClass();\nResourceView.initClass();\nResourceView._$name = 'ResourceView';", "import DateHelper from '../../Core/helper/DateHelper.js';\nimport Responsive from '../../Core/widget/mixin/Responsive.js';\nimport Panel from '../../Core/widget/Panel.js';\nimport '../../Calendar/widget/CalendarDatePicker.js';\nimport '../../Scheduler/widget/ResourceFilter.js';\nimport '../../Core/widget/FilterField.js';\n/**\n * @module Calendar/widget/Sidebar\n */\n/**\n * This class is not supposed to be used directly. This widget provides the utility UI as the\n * {@link Calendar.view.Calendar#config-sidebar} of a {@link Calendar.view.Calendar Calendar} widget.\n *\n * Sidebar items provided by default:\n *\n * | Widget ref       | Type                                         | Weight | Description                                 |\n * |------------------|----------------------------------------------|--------|---------------------------------------------|\n * | `datePicker`     | {@link Calendar.widget.CalendarDatePicker}   | 100    | Used to pick Calendar's active date         |\n * | `eventFilter`    | {@link Core.widget.FilterField}              | 150    | Used to filter events by name               |\n * | `resourceFilter` | {@link Scheduler.widget.ResourceFilter}      | 200    | Used to select resources to show events for |\n *\n * The configuration of these items may be overridden:\n *\n * ```javascript\n * new Calendar({\n *     sidebar : {\n *         items : {\n *             datePicker : {\n *                 // Never go to dates in the past\n *                 minDate : new Date()\n *             },\n *             eventFilter : {\n *                 // Let's have this at the top\n *                 weight : 50\n *             },\n *             resourceFilter : {\n *                 store : {\n *                     sorters : [{\n *                         field     : 'name',\n *                         // By default this is in ascending name order\n *                         // Let's change that round.\n *                         ascending : false\n *                     }]\n *                 }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * The {@link #config-bbar} is used to hold the navigation buttons (\"Today\" and next/previous) when the owning\n * `Calendar` is configured with {@link Calendar.view.Calendar#config-navigatorPlacement} set to `'sidebar'`. The\n * location of the `bbar`, as well as other options, can be changed via the `bbar` config, like so:\n *\n * ```javascript\n *  new Calendar({\n *      sidebar : {\n *          bbar : {\n *              dock : 'top'\n *          }\n *      }\n *  });\n * ```\n *\n * {@inlineexample Calendar/widget/Sidebar.js}\n *\n * @extends Core/widget/Panel\n * @mixes Core/widget/mixin/Responsive\n * @classtype sidebar\n */\nexport default class Sidebar extends Panel.mixin(Responsive) {\n    static get $name() {\n        return 'Sidebar';\n    }\n    // Factoryable type name\n    static get type() {\n        return 'sidebar';\n    }\n    static get configurable() {\n        return {\n            focusable            : false,\n            ignoreParentReadOnly : true,\n            bbar : {\n                cls    : 'b-cal-nav-item',\n                layout : {\n                    justify : 'center'\n                },\n                items : {\n                    todayButtonSidebar : {\n                        text    : 'L{Calendar.Today}',\n                        onClick : 'up.shiftToNow',\n                        weight  : 200\n                    },\n                    prevButtonSidebar : {\n                        onClick : 'up.shiftPrevious',\n                        cls     : 'b-borderless',\n                        icon    : 'b-icon-previous',\n                        weight  : 300\n                    },\n                    nextButtonSidebar : {\n                        onClick : 'up.shiftNext',\n                        cls     : 'b-borderless',\n                        icon    : 'b-icon-next',\n                        weight  : 400\n                    }\n                }\n            },\n            items : {\n                datePicker : {\n                    type              : 'datepicker',\n                    weight            : 100,\n                    internalListeners : {\n                        selectionChange : 'up.onDatePickerSelectionChange'\n                    }\n                },\n                eventFilter : {\n                    type        : 'filterfield',\n                    field       : 'name',\n                    // We want this in second position\n                    weight      : 150,\n                    placeholder : 'L{Filter events}',\n                    localeClass : this\n                },\n                resourceFilter : {\n                    ignoreParentReadOnly : true\n                }\n            },\n            date : {\n                $config : {\n                    equal : 'date'\n                },\n                value : null\n            },\n            eventStore : null,\n            responsive : {},  // brand us as responsive so \"collapsed\" is tracked per responsive state\n            stepUnitText : null,\n            /**\n             * May be configured with `'left'` or `'right'` to dock the Sidebar to either side.\n             *\n             * Defaults to `'left'`.\n             * @config {'left'|'right'}\n             * @default\n             */\n            side : 'left',\n            collapsible : {\n                tool : null\n            },\n            /**\n             * The resource filtering widget which hides and shows events based upon\n             * whether they are assigned to the selected resources.\n             * @member {Scheduler.widget.ResourceFilter} resourceFilter\n             */\n            /**\n             * A configuration object specifying options to change how the sidebar's resourcefilter is configured.\n             * @config {ResourceFilterConfig}\n             */\n            resourceFilter : {\n                type       : 'resourcefilter',\n                flex       : '1 1 auto',\n                weight     : 200,\n                minHeight  : 110,\n                scrollable : {\n                    overflowY : 'auto'\n                },\n                store : {\n                    sorters : [{\n                        field     : 'name',\n                        ascending : true\n                    }]\n                },\n                // We must only see the resources that are filtered in\n                masterFilter(r) {\n                    return this.eventStore.resourceStore.isAvailable(r);\n                }\n            }\n        };\n    }\n    setupWidgetConfig(widgetConfig, type) {\n        let result = super.setupWidgetConfig(...arguments);\n        // A string becomes the defaultType (see below) with the html set to the string.\n        if (result.ref === 'eventFilter') {\n            result.store = this.initialConfig.eventStore;\n        }\n        // Apply our configuration to the resourceFilter if it has not been configured to be\n        // a completely different type of widget\n        if (result.ref === 'resourceFilter') {\n            if (!result.type || result.type === this.resourceFilter.type) {\n                result = Sidebar.mergeConfigs(this.resourceFilter, result);\n            }\n        }\n        // Sidebar has to know these so it can set an optimum minWidth to prevent\n        // the DatePicker from being crushed into a bad UX.\n        if (result.type === 'datepicker') {\n            this.element.classList.add('b-has-datepicker');\n            this.element.classList.toggle('b-datepicker-with-events', Boolean(result.events));\n            // Monitor rangeChange events from EventLists\n            this.up('calendar')?.ion({\n                rangeChange : 'onCalendarViewRangeChange',\n                thisObj     : this\n            });\n        }\n        return result;\n    }\n    updateSide(side, oldSide) {\n        const { classList } = this.element;\n        classList.remove(`b-sidebar-${oldSide}`);\n        classList.add(`b-sidebar-${side}`);\n        if (this.collapsible) {\n            this.collapsible.direction = side;\n        }\n    }\n    updateStepUnitText(stepUnitText) {\n        const\n            me                         = this,\n            { prevButtonSidebar, nextButtonSidebar } = me.widgetMap;\n        if (prevButtonSidebar) {\n            prevButtonSidebar.tooltip = stepUnitText ? me.L('L{Calendar.previous}', stepUnitText) : '';\n            prevButtonSidebar.disabled = !stepUnitText;\n        }\n        if (nextButtonSidebar) {\n            nextButtonSidebar.tooltip = stepUnitText ? me.L('L{Calendar.next}', stepUnitText) : '';\n            nextButtonSidebar.disabled = !stepUnitText;\n        }\n    }\n    updateEventStore(eventStore) {\n        const { resourceFilter, datePicker } = this.widgetMap;\n        if (resourceFilter) {\n            resourceFilter.eventStore = eventStore;\n        }\n        if (datePicker) {\n            datePicker.eventStore = eventStore;\n        }\n    }\n    // Called when a DateRangeOwner mode changes its range. The event is relayed by the Calendar.\n    // If the mode is an EventList in startDate->endDate mode, the date picker should match it\n    onCalendarViewRangeChange({ source, new : { startDate, endDate } }) {\n        const { datePicker } = this.widgetMap;\n        // If the source is an event list, and *not* being driven by a fixed range around a date\n        // and if datePicker is selecting a range, then datePicker must match the view's range.\n        if (source.isEventList && !source.range && datePicker?.multiSelect === 'range') {\n            datePicker.selection = [startDate, endDate];\n        }\n    }\n    onDatePickerSelectionChange({ source, selection : [startDate, endDate], userAction }) {\n        this.UIdateChange = userAction;\n        // If the datePicker is selecting a range, apply the range to ListView modes\n        // which are in startDate->endDate mode as opposed to showing a fixed range.\n        if (source.multiSelect === 'range') {\n            this.up('calendar')?.eachView(v => {\n                if (v.isEventList && !v.range) {\n                    v.setConfig({\n                        startDate,\n                        endDate\n                    });\n                }\n            });\n        }\n        this.date = startDate;\n        this.UIdateChange = false;\n    }\n    changeDate(date, oldDate) {\n        date = typeof date === 'string' ? DateHelper.parse(date) : new Date(date);\n        if (isNaN(date)) {\n            throw new Error('Calendar widget date ingestion must be passed a Date, or a YYYY-MM-DD date string');\n        }\n        date = DateHelper.clearTime(date);\n        // Protect the setter from processing a no-change.\n        if (!oldDate || (date - oldDate)) {\n            return date;\n        }\n    }\n    updateDate(date, oldDate) {\n        const { datePicker } = this.widgetMap;\n        datePicker && (datePicker.value = date);\n        this.trigger('dateChange', {\n            date,\n            oldDate,\n            userAction : Boolean(this.UIdateChange)\n        });\n    }\n}\nSidebar.initClass();\nSidebar._$name = 'Sidebar';", "import DayView from './DayView.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\n/**\n * @module Calendar/widget/WeekView\n */\n/**\n * This is normally used as a {@link Calendar.view.Calendar#config-modes mode} of a Calendar (as seen in the live\n * demo below) but may be used standalone as a regular Widget.\n *\n * {@inlineexample Calendar/widget/CalendarWeekView.js}\n *\n * As a standalone widget, it will lack the capabilities of the {@link Calendar.view.Calendar Calendar}\n * class, such as keyboard-based event to event navigation and drag/drop features. As seen in this demo:\n *\n * {@inlineexample Calendar/widget/WeekView.js}\n *\n * A Panel which displays up to 7 columns of days with events for each day arranged in ascending\n * time order in each column.\n *\n * All day events, and multi day events which intersect that day are displayed in a row at the top.\n *\n * Intra day events are arranged in ascending time order down the column from the {@link Calendar.widget.DayView#config-dayStartTime} to\n * the {@link Calendar.widget.DayView#config-dayEndTime}\n *\n * Event rendering can be customized using the {@link #config-eventRenderer} method.\n *\n * @extends Calendar/widget/DayView\n *\n * @classtype weekview\n * @classtypealias week\n * @typingswidget\n */\nexport default class WeekView extends DayView {\n    static $name = 'WeekView';\n    static type = 'weekview';\n    static get configurable() {\n        return {\n            localizableProperties : ['title', 'stepUnit'],\n            title : 'L{Week}',\n            stepUnit : 'L{weekUnit}',\n            range : {\n                magnitude : 1,\n                unit      : 'week'\n            },\n            responsive : {\n                small : {\n                    descriptionFormat : 'Wp YYYY'\n                },\n                large : {\n                    descriptionFormat : ['MMMM YYYY (Wp)', 'S{MMM} - E{MMM YYYY} (S{Wp})']\n                },\n                '*' : {\n                    descriptionFormat : ['MMMM YYYY', 'S{MMM} - E{MMM YYYY}']\n                }\n            },\n            week : null,\n            // Override from DayView. This means that in addition to endDate being\n            // locked to startDate, and being changed when startDate changes, startDate\n            // is also locked to endDate and is changed when the endDate changes.\n            fixedDuration : true\n        };\n    }\n    /**\n     * Returns the resource associated with this week view when used inside a {@link Calendar.widget.ResourceView}\n     * @readonly\n     * @member {Scheduler.model.ResourceModel} resource\n     */\n    calculateDuration() {\n        // Override from CalendarMixin where the value is calculated from two passed dates.\n        return 7;\n    }\n    updateWeekStartDay(weekStartDay, oldWeekStartDay) {\n        super.updateWeekStartDay?.(weekStartDay);\n        if (!this.isConfiguring) {\n            const startDate = new Date(this.startDate);\n            startDate.setDate(startDate.getDate() + weekStartDay - oldWeekStartDay);\n            this.startDate = startDate;\n        }\n    }\n    changeMonth() {\n        const result = super.changeMonth(...arguments);\n        result.ion({\n            weekChange : 'onMonthWeekChange',\n            thisObj    : this\n        });\n        return result;\n    }\n    onMonthWeekChange({ source, newDate }) {\n        // We have to keep the week number in sync\n        this.week = source.getWeekNumber(newDate);\n    }\n    changeWeek(week, oldWeek) {\n        const me = this;\n        // If not an array, assume it's the week number\n        week = Array.isArray(week) ? week : [me.month.year, week];\n        // Only return a value if a change has been requested\n        if (!ObjectHelper.isEqual(week, oldWeek)) {\n            const\n                minDate = me.minDate || me.calendar?.minDate,\n                maxDate = me.maxDate || me.calendar?.maxDate;\n            // Only do date arithmetic if we need to validate.\n            if (!isNaN(minDate) || !isNaN(maxDate)) {\n                const\n                    weekStart = me.month.getWeekStart(week),\n                    weekEnd   = DateHelper.add(weekStart, me.duration, 'd');\n                if (!isNaN(minDate) && weekStart < minDate) {\n                    return;\n                }\n                if (!isNaN(maxDate) && weekEnd > maxDate) {\n                    return;\n                }\n            }\n            return week;\n        }\n    }\n    updateWeek(week) {\n        const\n            me                       = this,\n            { month, date, dayTime } = me,\n            weekStartDate            = dayTime.shiftDate(month.getWeekStart(week));\n        // If our current date is outside of the requested week, move it\n        // to the week start which will set the startDate\n        if (!date || !ObjectHelper.isEqual(month.getWeekNumber(date), week)) {\n            me.date = weekStartDate;\n        }\n        else {\n            me.startDate = weekStartDate;\n        }\n        // In case a beforeDateChange handler.\n        // vetoed the date change - we have to sync the week to our date.\n        me.week = month.getWeekNumber(me.date);\n    }\n}\nWeekView.initClass();\nWeekView._$name = 'WeekView';", "import CalendarMixin from './mixin/CalendarMixin.js';\nimport DayCellCollecter from './mixin/DayCellCollecter.js';\nimport DayCellRenderer from './mixin/DayCellRenderer.js';\nimport Panel from '../../Core/widget/Panel.js';\nimport DH from '../../Core/helper/DateHelper.js';\nimport Month from '../../Core/util/Month.js';\nimport DomSync from '../../Core/helper/DomSync.js';\nimport SDP from '../../Scheduler/widget/SchedulerDatePicker.js';\nimport Tooltip from '../../Core/widget/Tooltip.js';\n/**\n * @module Calendar/widget/YearView\n */\nconst isHoverGesture = {\n    hover     : 1,\n    mouseover : 1\n};\n/**\n * This is normally used as a {@link Calendar.view.Calendar#config-modes mode} of a Calendar (as seen in the live\n * demo below) but may be used standalone as a regular Widget.\n *\n * {@inlineexample Calendar/widget/CalendarYearView.js}\n *\n * As a standalone widget, it will lack the capabilities of the {@link Calendar.view.Calendar Calendar}\n * class, such as keyboard-based event to event navigation and drag/drop features. As seen in this demo:\n *\n * {@inlineexample Calendar/widget/YearView.js}\n *\n * A Panel which displays a year's worth of months with days which have events highlighted.\n *\n * @extends Core/widget/Panel\n * @mixes Core/widget/mixin/Responsive\n * @mixes Calendar/widget/mixin/CalendarMixin\n * @mixes Calendar/widget/mixin/DayCellCollecter\n * @mixes Calendar/widget/mixin/DayCellRenderer\n *\n * @classtype yearview\n * @classtypealias year\n * @typingswidget\n */\nexport default class YearView extends Panel.mixin(CalendarMixin, DayCellCollecter, DayCellRenderer) {\n    static $name = 'YearView';\n    static type = 'yearview';\n    static get configurable() {\n        return {\n            textContent : false,\n            localizableProperties : ['title', 'stepUnit'],\n            title : 'L{Year}',\n            scrollable : {\n                overflowY : true\n            },\n            stepUnit : 'L{yearUnit}',\n            dragUnit : 'day',\n            month : true,\n            /**\n             * A date which specifies the year to display. All types of calendar view have a `date`\n             * config which they use to set their visible date range according to their configuration\n             * and type.\n             * @config {Date}\n             */\n            date : {\n                $config : {\n                    equal : 'date'\n                },\n                value : null\n            },\n            descriptionFormat : 'YYYY',\n            /**\n             * The year to display\n             * @config {Number}\n             */\n            year : null,\n            monitorResize : false,\n            showWeekColumn : true,\n            hideWeekColumnCls : 'b-hide-week-numbers',\n            /**\n             * The class name to add to calendar cells which are in the previous or next month.\n             * @config {String}\n             * @private\n             */\n            otherMonthCls : 'b-other-month',\n            /**\n             * By default, all months show six week rows. Pass `false` to only render as many rows\n             * as needed.\n             * @config {Boolean}\n             */\n            sixWeeks : true,\n            /**\n             * An empty function by default, but provided so that you can override it.\n             *\n             * This function is called for each cell rendered to allow developers to mutate the cell metadata, or\n             * the CSS classes to be applied to the cell.\n             *\n             * The cellConfig (a {@link Core.helper.DomHelper#typedef-DomConfig}) definition passed as part of the\n             * single parameter may be mutated to add `style` and `className`.\n             *\n             * ```javascript\n             * dayCellRenderer : function(cellData) {\n             *     // I don't like Mondays!\n             *     if (cellData.date === 1) {\n             *         cellData.cls['dayoff'] = true;\n             *     }\n             * }\n             *\n             *```\n             *\n             * A non-null return value from the renderer is used as the content of the day cell element.\n             *\n             * @config {Function} dayCellRenderer\n             * @param {Object} cellData An object that contains data about the cell.\n             * @param {Date} cellData.date The Date of this cell\n             * @param {Scheduler.model.EventModel[]} cellData.events The array of events in this cell\n             * @param {DomConfig} cellData.cellConfig A {@link Core.helper.DomHelper#typedef-DomConfig}\n             *   object that contains data about the cells element.\n             * @param {String} cellData.cellConfig.style The style property is an object containing\n             *   style properties for the cell header element.\n             * @param {String} cellData.cellConfig.cls The cls property is an object whose property\n             *   names will be added to the cell element if the property value is truthy.\n             * @returns {DomConfig|String|null}\n             *\n             * @category Rendering\n             */\n            dayCellRenderer : null,\n            monthSelector : '.b-yearview-month-name',\n            focusable : false,\n            /**\n             * How to indicate the presence of events for a date. The default is `heatmap` which adds\n             * classes depending on how many events intersect the date.Values may be:\n             *\n             * * `false` - Do not show events in cells.\n             * * `true` - Show a heatmap of colours the intensity of which indicates event load.\n             * * `'heatmap'` - Show a heatmap of colours the intensity of which indicates event load.\n             * * `'count'` - Show a themeable badge containing the event count for a date.\n             * * `'dots'` - Show small event-coloured bullets up to a maximum of {@link #config-maxDots}\n             * to indicate event presence.\n             * @prp {Boolean|'heatmap'|'dots'}\n             * @default\n             */\n            showEvents : 'heatmap',\n            /**\n             * When {@link #config-showEvents} is `'dots'`, this is the maximum number of dots to show\n             * below the date number in the cell.\n             *\n             * The default is four. Note that increasing this may lead to a cluttered UI in which the dots\n             * obscure the date figure in the cell.\n             *\n             * @prp {Number}\n             * @default\n             */\n            maxDots : 4,\n            /**\n             * When {@link #config-overflowPopupTrigger} is not a mouseover gesture, setting this to\n             * a truthy value means that a tooltip containing the event count will be shown on hover of\n             * a day cell.\n             *\n             * It may be specified as an Object which contains {@link Core.widget.Tooltip} config options,\n             * and also the following option:\n             *\n             * - showNoEvents - When set to `true`, a tooltip containing \"No events\" is shown when\n             * hovering empty day cells.\n             *\n             * For example:\n             *\n             * ```javascript\n             * {\n             *     modes : {\n             *         year : {\n             *             // We want it to show if there are no visible events for that date.\n             *             // And we want the tip showing to the right of the cell\n             *             eventCountTip : {\n             *                 showNoEvents : true,\n             *                 align        : 'l-r\n             *             }\n             *         }\n             *     }\n             * }\n             * ```\n             * @prp {Boolean|Object<String,Boolean|String>}\n             * @default\n             */\n            eventCountTip : null\n        };\n    }\n    /**\n     * Returns the resource associated with this year view when used inside a {@link Calendar.widget.ResourceView}\n     * @readonly\n     * @member {Scheduler.model.ResourceModel} resource\n     */\n    // Override from DayCellCollecter\n    // We don't propagate. We copy all events into renderedEvents.\n    createCellMap(options) {\n        // We use the dateIndex, so gather all events which intersect. No need for propagation.\n        const result = super.createCellMap(options = {\n            skipPropagate : true,\n            ...options\n        });\n        // YearView always places all its events as rendered events because we use skipPropagate\n        // when creating the cell map, and just copy them all in so that the overflowPopup uses\n        // them all. Any number of events is overflow for a YearView\n        for (const cellData of result.values()) {\n            cellData.renderedEvents.setEvents(cellData.events);\n        }\n        return result;\n    }\n    get date() {\n        // If we have been injected with a specific date (Such from the Calendar Sidebar)\n        // then use that as our anchor point. Fall back to the first visible event. If we are\n        // without orientation use 1st January\n        return this._date || (!this.isConfiguring && this.firstEventDate) || this.startDate;\n    }\n    next() {\n        this.date = new Date(this.year + 1, this.date.getMonth(), this.date.getDate());\n    }\n    previous() {\n        this.date = new Date(this.year - 1, this.date.getMonth(), this.date.getDate());\n    }\n    get firstEventDate() {\n        const entries = [...this.cellMap.values()];\n        if (entries.length) {\n            return entries[0].date;\n        }\n    }\n    get lastEventDate() {\n        const entries = [...this.cellMap.values()];\n        if (entries.length) {\n            return entries[entries.length - 1].date;\n        }\n    }\n    onCalendarPointerInteraction(domEvent) {\n        const\n            me        = this,\n            superCall = super.onCalendarPointerInteraction,\n            {\n                target,\n                type\n            }         = domEvent;\n        if (type === 'mousedown' || type.endsWith('click')) {\n            // Any clicking after kicking off the overflow timer cancels it\n            me.clearTimeout(me.cellOverflowTimer);\n        }\n        // Veto focusing out of the overflowPopup when mousedowning overflow button\n        // (which is a cell which contains elements) so that the overflow popup doesn't flicker.\n        if (type === 'mousedown' && me._overflowPopup?.isVisible && target.closest('.b-cal-cell-overflow')) {\n            domEvent.preventDefault();\n        }\n        // If we're showing the overflow popup on click, and they clicked on an empty\n        // cell, then they *might* be intending a dblclick, so we need to pause the\n        // propagation of the click event into the processing\n        if (me.overflowPopupTrigger === 'click' && me.autoCreate?.gesture === 'dblclick' && type === 'click' && target.closest(`.${me.emptyCellCls}`) && !me.emptyCellRenderer) {\n            me.cellOverflowTimer = me.setTimeout({\n                fn    : superCall,\n                delay : 300,\n                args  : [domEvent]\n            });\n        }\n        else {\n            return superCall.apply(me, arguments);\n        }\n    }\n    changeMonth(month, oldMonth) {\n        const\n            me = this,\n            listeners = {\n                name       : 'yearChangeListener',\n                yearChange : 'onMonthYearChange',\n                thisObj    : me\n            };\n        me.detachListeners('yearChangeListener');\n        if (month instanceof Month) {\n            month.ion(listeners);\n            me._year = month.year;\n        }\n        else {\n            month = new Month({\n                date               : new Date(me.year || new Date().getFullYear(), 0, 1),\n                weekStartDay       : me.weekStartDay,\n                hideNonWorkingDays : me.hideNonWorkingDays,\n                nonWorkingDays     : me.nonWorkingDays,\n                sixWeeks           : me.sixWeeks,\n                internalListeners  : listeners\n            });\n        }\n        if (me.nonWorkingDays == null) {\n            me.nonWorkingDays = me._month.nonWorkingDays;\n        }\n        // Keep our property in line with reality\n        me._year = month.year;\n        return month;\n    }\n    onMonthYearChange({ source : { year, date } }) {\n        const me = this;\n        // Keep our property in line with reality\n        me._year = year;\n        if (!me.isConfiguring) {\n            me._cellMap?.clear();\n            me.date = date;\n            me.refresh();\n        }\n    }\n    // Override for the YearView. We have to scroll *months* into view\n    scrollTo(date, options = { animate : true }) {\n        const me = this;\n        // We do not display events. If passed an event, scroll to its start date.\n        date = me.ingestDate(date.isEventModel ? date.startDate : date);\n        // If we do not own the date, move to that date.\n        if (!DH.betweenLesser(date, me.startDate, me.endDate) || !me.getDayElement(date, true)) {\n            me.date = date;\n        }\n        else {\n            const monthEl = me.eventContentElement.querySelector(`[data-month-index=\"${date.getMonth()}\"]`);\n            monthEl && me.scrollable.scrollIntoView(monthEl, options);\n        }\n    }\n    get eventsPerCell() {\n        return 0;\n    }\n    get startDate() {\n        return this.month.getOtherMonth(new Date(this.year, 0, 1)).startDate;\n    }\n    get endDate() {\n        // It's exclusive of the day itself - this is a timepoint; 00:00 on the day after\n        return DH.add(this.month.getOtherMonth(new Date(this.year, 11, 1)).endDate, 1, 'day');\n    }\n    /**\n     * For a consistent API, allow startDate to set the year\n     * @internal\n     */\n    set startDate(startDate) {\n        this.date = startDate;\n    }\n    isValidTargetDate(date) {\n        const newYear = date.getFullYear();\n        if (newYear !== this.year) {\n            const\n                minDate = this.minDate || this.calendar?.minDate,\n                maxDate = this.maxDate || this.calendar?.maxDate;\n            // Only do date arithmetic if we need to.\n            if (!isNaN(minDate) || !isNaN(maxDate)) {\n                const { cellMonth } = this;\n                if (!isNaN(minDate)) {\n                    // Work out what our new startDate would be.\n                    // eg startDate of Jan 2021 as a Calendar view is 27th Dec 20221.\n                    const newStartDate = cellMonth.getWeekStart(cellMonth.getWeekNumber(new Date(newYear, 0, 1)));\n                    // Veto navigation to before minDate.\n                    if (newStartDate < minDate) {\n                        return false;\n                    }\n                }\n                if (!isNaN(maxDate)) {\n                    // Move month to December to see what our new end date would be.\n                    // eg endDate of Dec 2021 as a Calendar view is 8th Jan 2022.\n                    cellMonth.date = new Date(newYear, 11, 31);\n                    // Veto navigation to after maxDate.\n                    // Month class's concept of date is inclusive. Its dates\n                    // refer to a 24 hour block unlike scheduling UIs so increment it.\n                    if (DH.add(cellMonth.endDate, 1, 'd') > maxDate) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n    updateDate(date) {\n        this.month.date = date;\n        // Only scroll to the date if we are visible.\n        // onInternalPaint will scroll the active date into view when we are shown\n        if (this.isVisible && !this.isConfiguring) {\n            this.scrollTo(date);\n        }\n    }\n    changeYear(year) {\n        if (this.isConfiguring) {\n            return year;\n        }\n        this.month.year = year;\n        return this.month.year;\n    }\n    changeShowEvents(showEvents, oldShowEvents) {\n        return showEvents === true ? 'heatmap' : showEvents;\n    }\n    updateShowEvents(showEvents, oldShowEvents) {\n        const { classList } = this.contentElement;\n        showEvents && classList.add(`b-show-events-${showEvents}`);\n        classList.remove(`b-show-events-${oldShowEvents}`);\n        if (!this.isConfiguring) {\n            this.doRefresh();\n        }\n    }\n    updateShowWeekNumber() {\n        this.bodyElement.classList[this.showWeekColumn ? 'remove' : 'add'](this.hideWeekColumnCls);\n    }\n    createCellData(date) {\n        // So that createCellData can evaluate if the cell is \"other month\"\n        // For YearView, the month needs to be moved along as the cells are created.\n        this.month.month = date.getMonth();\n        return super.createCellData(date);\n    }\n    // We must implement the CalendarMixin interface.\n    // All views must expose a doRefresh method.\n    doRefresh() {\n        const\n            me = this,\n            {\n                bodyElement : targetElement,\n                month,\n                dayCellCls,\n                otherMonthCls,\n                weekendCls,\n                todayCls,\n                nonWorkingDayCls,\n                emptyCellCls,\n                cellMap,\n                showEvents,\n                eventCountTip\n            } = me,\n            children = [],\n            today = me.calendar?.today || new Date(),\n            todayKey = DH.makeKey(today);\n        for (let monthIndex = 0; monthIndex < 12; monthIndex++) {\n            month.month = monthIndex;\n            const\n                monthHeader = {\n                    tag       : 'button',\n                    className : 'b-yearview-month-name',\n                    html      : DH.getMonthName(monthIndex),\n                    dataset   : {\n                        // Month names must not look like day cells which have data-date=\"YYYY-MM-DD\"\n                        monthDate : DH.makeKey(new Date(me.year, monthIndex, 1))\n                    }\n                },\n                weeknameCells = [{\n                    className : 'b-week-number-cell'\n                }],\n                weekNameRow = {\n                    className : 'b-calendar-week b-calendar-weekdays',\n                    children  : weeknameCells\n                },\n                monthElement = {\n                    className : 'b-yearview-month',\n                    children  : [monthHeader, weekNameRow],\n                    dataset   : {\n                        monthIndex\n                    }\n                },\n                weeks = monthElement.children;\n            children.push(monthElement);\n            let cellIndex = 0;\n            month.eachWeek((week, dates) => {\n                // Populate week day cells when processing first week of month.\n                if (weeknameCells.length === 1) {\n                    for (let columnIndex = 0; columnIndex < 7; columnIndex++) {\n                        weeknameCells.push({\n                            className : {\n                                'b-yearview-weekday-cell' : 1,\n                                [nonWorkingDayCls]        : me.nonWorkingDays[month.canonicalDayNumbers[columnIndex]]\n                            },\n                            text : DH.format(dates[columnIndex], 'd1')\n                        });\n                    }\n                }\n                const\n                    weekElement = {\n                        className : 'b-calendar-week',\n                        dataset   : {\n                            week : `${week[0]},${week[1]}`\n                        }\n                    },\n                    dayCells = weekElement.children = [{\n                        tag       : 'button',\n                        ariaLabel : me.L('L{Calendar.weekOfYear}', week),\n                        className : 'b-week-number-cell',\n                        html      : week[1]\n                    }];\n                weeks.push(weekElement);\n                for (let columnIndex = 0; columnIndex < 7; columnIndex++) {\n                    const\n                        date          = dates[columnIndex],\n                        isOtherMonth  = date.getMonth() !== month.month,\n                        key           = DH.makeKey(date),\n                        day           = date.getDay(),\n                        cellData      = !me.isConfiguring && cellMap.get(key),\n                        events        = cellData?.events,\n                        eventCount    = isOtherMonth ? 0 : events?.length || 0,\n                        showOverflow  = eventCount,\n                        cell          = {\n                            // tabIndex  : -1, When we implement Calendar Cell navigation\n                            style     : {},\n                            className : {\n                                'b-day-name'   : 1,\n                                [dayCellCls]   : 1,\n                                [emptyCellCls] : !eventCount\n                            },\n                            dataset : {\n                                date : key,\n                                cellIndex,\n                                columnIndex\n                            }\n                        };\n                    let content = String(date.getDate());\n                    Object.assign(cell.className, {\n                        [weekendCls]                         : DH.weekends[day],\n                        [todayCls]                           : key === todayKey && !isOtherMonth,\n                        [nonWorkingDayCls]                   : me.nonWorkingDays[day],\n                        [otherMonthCls]                      : isOtherMonth,\n                        'b-cal-cell-overflow'                : showOverflow,\n                        [SDP.getEventCountClass(eventCount)] : showOverflow,\n                        [`b-day-of-week-${day}`]             : 1\n                    });\n                    if (me.dayCellRenderer) {\n                        const result = me.callback(me.dayCellRenderer, me, [{ cellConfig : cell, date, events : cellData?.events?.map(data => data.eventRecord) || [] }]);\n                        if (result != null) {\n                            content = result;\n                        }\n                    }\n                    // Event count tooltip to show only if the overflow popup is not shown on hover.\n                    if (eventCountTip && !(isHoverGesture[me.overflowPopupTrigger])) {\n                        const btip = eventCount ? me.L('L{ResourceInfoColumn.eventCountText}', eventCount) : eventCountTip.showNoEvents ? me.L('L{noEvents}') : null;\n                        if (btip) {\n                            const tipData = Tooltip.encodeConfig(eventCountTip);\n                            cell.dataset = {\n                                ...cell.dataset,\n                                ...tipData,\n                                btip\n                            };\n                        }\n                    }\n                    if (showEvents === 'dots') {\n                        const children = [];\n                        for (let i = 0; i < Math.min(eventCount || 0, me.maxDots); i++) {\n                            const eventDomConfig = me.createEventDomConfig({\n                                eventRecord : events[i].eventRecord,\n                                // renders without content with just background colour\n                                minimal : true\n                            });\n                            children.push(eventDomConfig);\n                        }\n                        content = [typeof content === 'object' ? content : {\n                            tag  : 'span',\n                            html : content\n                        }, {\n                            className : 'b-cal-minimal-event-container',\n                            children\n                        }];\n                    }\n                    else if (showEvents === 'count') {\n                        const count = eventCount;\n                        content = [typeof content === 'object' ? content : {\n                            tag  : 'span',\n                            html : content\n                        }, count ? {\n                            dataset : {\n                                count\n                            },\n                            class : {\n                                'b-cell-events-badge' : 1\n                            },\n                            text : count\n                        } : null];\n                    }\n                    // Cell content\n                    cell.children = [{\n                        className                                           : 'b-calendar-cell-inner',\n                        [typeof content === 'string' ? 'html' : 'children'] : content\n                    }];\n                    dayCells.push(cell);\n                    cellIndex++;\n                }\n            });\n        }\n        DomSync.sync({\n            targetElement,\n            domConfig : {\n                children\n            }\n        });\n        me.refreshCount = (me.refreshCount || 0) + 1;\n        /**\n         * Fires when this YearView refreshes.\n         * @param {Calendar.widget.YearView} source The triggering instance.\n         * @event refresh\n         */\n        me.trigger('refresh');\n    }\n    getDayElement(date, strict) {\n        if (typeof date !== 'string') {\n            date = DH.makeKey(date);\n        }\n        // Enforce strict meaning this view must own that date\n        if (strict && parseInt(date.substr(0, 4)) !== this.year) {\n            return;\n        }\n        // In a multi month view, we must filter out dates which are in the \"other month\" category.\n        return this.contentElement.querySelector(`.b-calendar-cell[data-date=\"${date}\"]:not(.b-other-month)`);\n    }\n    // Override in this class to eliminate \"other\" month cells.\n    getCell() {\n        return this.getDayElement(...arguments);\n    }\n    onInternalPaint({ firstPaint }) {\n        if (firstPaint) {\n            this.refresh();\n        }\n        // If we are animating into view, we have to jump over that.\n        this.setTimeout(() => this.scrollTo(this.date, { animate : false }), 10);\n    }\n}\nYearView.initClass();\nYearView._$name = 'YearView';", "import Base from '../../../Core/Base.js';\nimport DomHelper from '../../../Core/helper/DomHelper.js';\nimport SchedulerEventNavigation from '../../../Scheduler/view/mixin/EventNavigation.js';\n/**\n * @module Calendar/view/mixin/EventNavigation\n */\nconst isCalendarMixin = w => w.isCalendarMixin;\n/**\n * Mixin that tracks event selection by clicking on one or more events in the calendar.\n * @mixin\n * @extends Scheduler/view/mixin/EventNavigation\n *\n * @typings Scheduler.view.mixin.EventNavigation -> Scheduler.view.mixin.SchedulerEventNavigation\n */\nexport default Target => class EventNavigation extends SchedulerEventNavigation(Target || Base) {\n    // region Hidden configs\n    /**\n     * @method beforeAssignmentDelete\n     * @hide\n     */\n    // endRegion\n    static get configurable() {\n        return {\n            /**\n             * A config object to use when creating the {@link Core.helper.util.Navigator}\n             * to use to perform keyboard navigation in the timeline.\n             * @config {NavigatorConfig}\n             * @default\n             * @category Misc\n             * @internal\n             */\n            navigator : {\n                allowCtrlKey      : true,\n                scrollSilently    : true,\n                datasetIdProperty : 'eventId',\n                // TAB navigation is used, so the Navigator *reacts* to navigation rather than\n                // listens for keystrokes and moves focus.\n                itemsTabbable : true,\n                // Override inherited SchedulerEventNavigation handlers\n                keys : {\n                    ArrowUp     : null,\n                    ArrowDown   : null,\n                    Escape      : null,\n                    Tab         : null,\n                    'SHIFT+Tab' : null\n                }\n            }\n        };\n    }\n    normalizeTarget(event) {\n        return event.eventRecord;\n    }\n    changeNavigator(navigator) {\n        const me = this;\n        // Force evaluation to create the eventSelector\n        me.getConfig('eventCls');\n        return super.changeNavigator(me.constructor.mergeConfigs({\n            target : me.element,\n            itemSelector : `.b-cal-cell-overflow,.b-cal-cell-no-content,${me.eventSelector}`,\n            // Calendar doesn't have a scrollable.\n            skipScrollIntoView : true\n        }, navigator));\n    }\n    onViewRefresh() {\n        super.onViewRefresh?.(...arguments);\n        // If the view refreshed while active, correct the active element\n        if (this.navigator.activeItem && !this.activeView._overflowPopup?.containsFocus) {\n            const activeEvent = this.getEventRecord(this.navigator.activeItem);\n            if (activeEvent) {\n                this.navigator.updateActiveItem(this.getElementFromEventRecord(activeEvent));\n            }\n        }\n    }\n    onCalendarStoreChange({ action, records }) {\n        const\n            me            = this,\n            { navigator } = me,\n            activeItem    = navigator?.activeItem;\n        // Handle keeping a close activeItem if the activeItem ever leaves the store\n        if (activeItem && !me.eventStore.includes(activeItem.dataset.eventId)) {\n            const\n                activeView         = me.constructor.fromElement(activeItem, isCalendarMixin) || me.activeView,\n                { _overflowPopup } = activeView,\n                nextItem           = navigator.next;\n            // If we're in a contiguous range of event bars and not using syncId to map\n            // events to the same element, then the following events will just \"move up\".\n            // Only the last element will be removed, so we \"navigate\" to the same element.\n            if (nextItem === activeItem.nextSibling && !nextItem.parentNode.syncIdMap) {\n                // Trigger a navigation event because focus will remain in the document\n                // so we are silently navigating to the next item.\n                navigator.triggerNavigate({\n                    eventPhase : Event.BUBBLING_PHASE,\n                    target     : nextItem\n                }, nextItem);\n            }\n            else {\n                // First, navigate forwards or back\n                let fallback = nextItem || navigator.previous;\n                // But if we are in the overflow popup and that took us out because it was empty,\n                // navigate forwards or back from the popup's source cell.\n                if (_overflowPopup?.containsFocus && !_overflowPopup.contentElement.contains(fallback)) {\n                    const { target } = _overflowPopup.lastAlignSpec;\n                    // Move forward or backward from the cell.\n                    fallback = navigator.getAdjacent(1, target.nextSibling) || navigator.getAdjacent(-1, target);\n                }\n                // If a previous or next event element was not found, push focus\n                // to where it came in from with a forced outward focus reversion if they clicked straight\n                // in and there was no relatedTarget.\n                if (!fallback) {\n                    me.widgetMap.viewContainer.revertFocus(true);\n                }\n                else {\n                    // Capture the full context of the soon-to-be-active fallback event.\n                    // We will need to recapture the corresponding element after the refresh.\n                    const\n                        nextActiveDate    = activeView.getDateFromElement(fallback),\n                        nextActiveEventId = fallback.dataset.eventId,\n                        nextActiveView    = me.constructor.fromElement(fallback).closest(isCalendarMixin);\n                    // Must keep focus in the Calendar if possible.\n                    // This item *should* remain undisturbed by a DomSync refresh\n                    fallback.focus();\n                    // After the impending refresh, restore focus\n                    nextActiveView.ion({\n                        refresh : () => {\n                            // Recapture the matching element after the refresh\n                            fallback = nextActiveView.getEventElement(nextActiveEventId, nextActiveDate);\n                            // May not always be one. YearView is not yet keyboard-navigable.\n                            if (fallback) {\n                                if (fallback === DomHelper.getActiveElement(fallback)) {\n                                    // Trigger a navigation event because focus has remained in the document\n                                    // so it was a silent navigate to the next item.\n                                    navigator.triggerNavigate({\n                                        eventPhase : Event.BUBBLING_PHASE,\n                                        target     : fallback\n                                    }, fallback);\n                                }\n                                else {\n                                    fallback.focus();\n                                }\n                            }\n                            navigator.updateActiveItem(fallback, activeItem);\n                        },\n                        once : true\n                    });\n                }\n            }\n        }\n        super.onCalendarStoreChange?.(...arguments);\n    }\n    onElementKeyDown(keyEvent) {\n        if (keyEvent.target.closest(this.navigator.itemSelector)) {\n            super.onElementKeyDown?.(keyEvent);\n        }\n    }\n    /**\n     * The currently focused event record.\n     * @property {Scheduler.model.EventModel}\n     * @readonly\n     */\n    get activeEvent() {\n        const { activeItem } = this.navigator;\n        if (activeItem) {\n            return this.resolveEventRecord(activeItem);\n        }\n    }\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n", "import Base from '../../../Core/Base.js';\nimport ArrayHelper from '../../../Core/helper/ArrayHelper.js';\nimport SchedulerEventSelection from '../../../Scheduler/view/mixin/EventSelection.js';\nimport GlobalEvents from '../../../Core/GlobalEvents.js';\n/**\n * @module Calendar/view/mixin/EventSelection\n */\n/**\n * Mixin that tracks event selection by clicking on one or more events in the calendar.\n * @mixin\n * @extends Scheduler/view/mixin/EventSelection\n *\n * @typings Scheduler.view.mixin.EventSelection -> Scheduler.view.mixin.SchedulerEventSelection\n */\nexport default Target => class EventSelection extends SchedulerEventSelection(Target || Base) {\n    //region Hidden configs\n    /**\n     * @event eventSelectionChange\n     * @hide\n     */\n    /**\n     * @event assignmentSelectionChange\n     * @hide\n     */\n    /**\n     * @member {Scheduler.model.AssignmentModel[]} selectedAssignments\n     * @hide\n     */\n    /**\n     * @config {String} eventAssignHighlightCls\n     * @hide\n     */\n    /**\n     * @method deselectAssignment\n     * @param {Scheduler.model.AssignmentModel} assignment The assignment to deselect\n     * @hide\n     */\n    /**\n     * @method deselectAssignments\n     * @param {Scheduler.model.AssignmentModel[]} assignments Assignments  to be deselected\n     * @hide\n     */\n    /**\n     * @method isAssignmentSelected\n     * @param {Scheduler.model.AssignmentModel} assignment The assignment\n     * @hide\n     */\n    /**\n     * @method selectAssignment\n     * @param {Scheduler.model.AssignmentModel} assignment The assignment to select\n     * @param {Boolean} [preserveSelection] Pass `true` to preserve any other selected assignments\n     * @hide\n     */\n    /**\n     * @method selectAssignments\n     * @param {Scheduler.model.AssignmentModel[]} assignments Assignments to be selected\n     * @hide\n     */\n    //endregion\n    static configurable = {\n        eventSelectedCls : 'b-selected'\n    };\n    //region Events\n    /**\n     * Fired any time there is a change to the events selected in the Calendar.\n     * @event selectionChange\n     * @param {Calendar.view.Calendar} source The Calendar instance.\n     * @param {'select'|'deselect'|'update'|'clear'} action One of the actions 'select', 'deselect', 'update',\n     * 'clear'\n     * @param {Scheduler.model.EventModel[]} selected An array of the Events added to the selection.\n     * @param {Scheduler.model.EventModel[]} deselected An array of the Event removed from the selection.\n     * @param {Scheduler.model.EventModel[]} selection The new selection.\n     */\n    //endregion\n    normalizeTarget(event) {\n        return event.eventRecord;\n    }\n    /**\n     * Responds to mutations of the underlying selection Collection.\n     * Keeps the UI synced, selectionChange event is fired when `me.silent` is falsy.\n     * @private\n     */\n    onSelectedCollectionChange({ added, removed }) {\n        const\n            me         = this,\n            selection  = me.selectedCollection,\n            selected   = added || [],\n            deselected = removed || [];\n        me.updateSelected();\n        if (!me.silent) {\n            const action = (selection.count > 0)\n                ? ((selected.length > 0 && deselected.length > 0)\n                    ? 'update'\n                    : (selected.length > 0\n                        ? 'select'\n                        : 'deselect'))\n                : 'clear';\n            me.trigger('selectionChange', {\n                action,\n                selection : selection.values,\n                selected,\n                deselected\n            });\n        }\n    }\n    onCalendarStoreChange({ action, records }) {\n        // Deselect on remove, not load.\n        // Calendar can load and discard many time periods during navigation.\n        // Only events which are actually removed become unselected.\n        if (action === 'remove') {\n            this.selectedCollection.remove(...records);\n        }\n        super.onCalendarStoreChange?.(...arguments);\n    }\n    /**\n     * Deselects all {@link Scheduler.model.EventModel events}.\n     * @category Selection\n     */\n    clearEventSelection() {\n        this.selectedCollection.clear();\n    }\n    /**\n     * The {@link Scheduler.model.EventModel events} which are selected.\n     * @property {Scheduler.model.EventModel[]}\n     * @category Selection\n     */\n    get selectedEvents() {\n        return this.selectedCollection.values;\n    }\n    set selectedEvents(events) {\n        events = ArrayHelper.asArray(events);\n        // Replace the entire selected collection with the new record set\n        this.selectedCollection.splice(0, this.selectedCollection.count, events);\n    }\n    /**\n     * Returns `true` if the {@link Scheduler.model.EventModel event} is selected.\n     * @param {Scheduler.model.EventModel} event The event\n     * @returns {Boolean} Returns `true` if the event is selected\n     * @category Selection\n     */\n    isEventSelected(event) {\n        return this.selectedCollection.includes(event);\n    }\n    /**\n     * Selects the passed {@link Scheduler.model.EventModel event} *if it is not selected*.\n     * @param {Scheduler.model.EventModel} event The event to select\n     * @param {Boolean} [preserveSelection] Pass `true` to preserve any other selected events\n     * @category Selection\n     */\n    select(event, preserveSelection = false) {\n        this.selectEvent(event, preserveSelection);\n    }\n    /**\n     * Selects the passed {@link Scheduler.model.EventModel event} *if it is not selected*.\n     * @param {Scheduler.model.EventModel} event The event select\n     * @param {Boolean} [preserveSelection] Pass `true` to preserve any other selected events\n     * @category Selection\n     */\n    selectEvent(event, preserveSelection = false) {\n        const { selectedCollection } = this;\n        // If the event is already selected, this is a no-op.\n        // In this case, selection must not be cleared even in the absence of preserveSelection\n        if (!this.isEventSelected(event) && this.isEventSelectable(event) !== false) {\n            preserveSelection ? selectedCollection.add(event) : selectedCollection.splice(0, selectedCollection.count, event);\n        }\n    }\n    /**\n     * Deselects the passed {@link Scheduler.model.EventModel event}*if it is selected*.\n     * @param {Scheduler.model.EventModel} event The event to deselect.\n     * @category Selection\n     */\n    deselect(event) {\n        this.deselectEvent(event);\n    }\n    /**\n     * Deselects the passed {@link Scheduler.model.EventModel event} *if it is selected*.\n     * @param {Scheduler.model.EventModel} event The event to deselect.\n     * @category Selection\n     */\n    deselectEvent(event) {\n        if (this.isEventSelected(event)) {\n            this.selectedCollection.remove(event);\n        }\n    }\n    /**\n     * Adds {@link Scheduler.model.EventModel events} to the selection.\n     * @param {Scheduler.model.EventModel[]} events Events to be selected\n     * @category Selection\n     */\n    selectEvents(events) {\n        this.selectedCollection.add(events.filter(event => this.isEventSelectable(event) !== false));\n    }\n    /**\n     * Removes {@link Scheduler.model.EventModel events} from the selection.\n     * @param {Scheduler.model.EventModel[]} events Events to be deselected\n     * @category Selection\n     */\n    deselectEvents(events) {\n        this.selectedCollection.remove(events);\n    }\n    /**\n     * Mouse listener to update selection.\n     * @private\n     */\n    onEventSelectionClick(clickedRecord) {\n        // Multi selection: CTRL means preserve selection, just add or remove the event.\n        // Single selection: CTRL deselects already selected event\n        if (this.isEventSelected(clickedRecord)) {\n            if (GlobalEvents.ctrlKeyDown) {\n                this.deselectEvent(clickedRecord);\n            }\n        }\n        else {\n            this.selectEvent(clickedRecord,  this.multiEventSelect && GlobalEvents.ctrlKeyDown);\n        }\n    }\n    /**\n     * Navigation listener to update selection.\n     * @private\n     */\n    onEventNavigate({ event, item }) {\n        // Navigating out of the navigation domain leaves selection unchanged.\n        if (item) {\n            const eventRecord = this.activeView.getEventRecord(item);\n            if (eventRecord) {\n                // Normally, mousedown on a selected record with no modifier deselects.\n                // Context menu should never deselect.\n                if (event.button === 2 && this.isEventSelected(eventRecord)) {\n                    return;\n                }\n                this.onEventSelectionClick(eventRecord);\n            }\n            // Click outside of an event;\n            else {\n                this.clearEventSelection();\n            }\n        }\n    }\n    // we do not need this class to participate in widget CSS classes\n    get widgetClass() {}\n};\n", "import VersionHelper from '../../Core/helper/VersionHelper.js';\nimport Factoryable from '../../Core/mixin/Factoryable.js';\nimport Featureable from '../../Core/mixin/Featureable.js';\nimport State from '../../Core/mixin/State.js';\nimport Base from '../../Core/Base.js';\nimport Panel from '../../Core/widget/Panel.js';\nimport Widget from '../../Core/widget/Widget.js';\nimport Responsive from '../../Core/widget/mixin/Responsive.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport TimeZoneHelper from '../../Core/helper/TimeZoneHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\nimport DynamicObject from '../../Core/util/DynamicObject.js';\nimport ScrollManager from '../../Core/util/ScrollManager.js';\nimport CalendarFeature from '../feature/CalendarFeature.js';\nimport CrudManagerView from '../../Scheduler/crud/mixin/CrudManagerView.js';\nimport CurrentConfig from '../../Scheduler/view/mixin/CurrentConfig.js';\nimport Sidebar from '../widget/Sidebar.js';\nimport AgendaView from '../widget/AgendaView.js';\nimport DayView from '../widget/DayView.js';\nimport MonthView from '../widget/MonthView.js';\nimport WeekView from '../widget/WeekView.js';\nimport YearView from '../widget/YearView.js';\nimport EventList from '../widget/EventList.js';\nimport ResourceView from '../widget/ResourceView.js';\nimport DayResourceView from '../widget/DayResourceView.js';\nimport CalendarStores from '../mixin/CalendarStores.js';\nimport SchedulerInterface from '../mixin/SchedulerInterface.js';\nimport EventNavigation from './mixin/EventNavigation.js';\nimport EventSelection from './mixin/EventSelection.js';\nimport RecurringEvents from '../../Scheduler/view/mixin/RecurringEvents.js';\nimport '../localization/En.js';\nimport '../widget/ModeSelector.js';\nimport '../../Core/widget/layout/Card.js';\nimport '../../Core/widget/ButtonGroup.js';\nimport '../../Core/widget/panel/PanelCollapserOverlay.js';\nimport '../feature/CalendarDrag.js';\nimport '../feature/EventEdit.js';\nimport '../feature/EventMenu.js';\nimport '../feature/EventTooltip.js';\nimport '../feature/ScheduleMenu.js';\n/**\n * @module Calendar/view/Calendar\n */\nconst\n    byWeight               = (l, r) => (l.weight || 0) - (r.weight || 0),\n    relayedEvents          = /^.*event.*|.*resource.*|.*cell.*|.*row.*|.*schedule.*|daynumber.*|weeknumber.*|monthname.*|weekname.*$|beforedatechange|tickchange|.*showoverflowpopup|beforeautocreate|rangechange|weekflex/,\n    isFocusedCalendarMixin = w => w.isCalendarMixin && w.containsFocus,\n    // These are the configs which, when applied to the calendar are propagated down to child views.\n    // modeDefaults *could* handle this task, but some configs make sense as Calendar-wide settings.\n    propagatedConfigs      = ['date', 'coreHours', 'resourceImagePath', 'hideNonWorkingDays', 'nonWorkingDays', 'dateFormat', 'visibleStartTime', 'filterEventResources'],\n    emptyArray             = Object.freeze([]),\n    hasWeight              = m => m.weight > 0;\n/**\n * @typedef {Object} CalendarHit\n * @property {'event'|'dayNumber'|'weekNumber'|'cellOverflow'|'schedule'} type The type of the target:\n * `'event'`, `'dayNumber'`, `'weekNumber'`, `'cellOverflow'`, or `'schedule'`.\n * @property {Date} date The date of the target.\n * @property {Scheduler.model.EventModel} eventRecord The target event record.\n */\n/**\n * A configurable, aggregated view of a {@link Scheduler.data.EventStore} which may comprise several\n * view types to display the events in different ways.\n *\n * This is the primary way of creating a calendar UI.\n *\n * {@inlineexample Calendar/view/Calendar.js}\n *\n * ## Calendar modes\n * A Calendar may be configured with {@link #config-modes} which describe the types of views of the\n * calendar data which should be shown.\n *\n * These are:\n *  - `'agenda'`\n *  - `'year'`\n *  - `'month'`\n *  - `'week'`\n *  - `'day'`\n *  - `'list'`\n *  - `'resource'`\n *  - `'dayresource'`\n *\n * All except `'list'` and `'resource'` and `'dayresource'` are included by default.\n *\n * The modes are instances of the following classes:\n *\n * - {@link Calendar.widget.AgendaView}\n * - {@link Calendar.widget.YearView}\n * - {@link Calendar.widget.MonthView}\n * - {@link Calendar.widget.WeekView}\n * - {@link Calendar.widget.DayView}\n * - {@link Calendar.widget.EventList}\n * - {@link Calendar.widget.ResourceView}\n * - {@link Calendar.widget.DayResourceView}\n *\n * Each may be reconfigured from its default configuration by specifying its mode value as an object:\n *\n * ```javascript\n * new Calendar({\n *     appendTo : domElement,\n *     modes : {\n *         month : {\n *             // Week number in a separate, clickable column\n *             showWeekColumn : true\n *         },\n *         week : {\n *             // Day columns start at 8am. No events shown before this\n *             dayStartTime : 8\n *         }\n *     }\n * });\n * ```\n *\n * Modes may be omitted from the view by specifying its mode value as `null`.\n * To specify the initial active mode, {@link #config-mode} config should be used, to manage mode at runtime, {@link #property-mode} property is available.\n *\n * ```javascript\n * new Calendar({\n *     appendTo : domElement,\n *     mode  : 'week',\n *     modes : {\n *         agenda : null,\n *         year   : null\n *     }\n * });\n * ```\n *\n * Other provided UI elements may be omitted from the view by specifying their configuration values as `null`:\n *\n * ```javascript\n * new Calendar({\n *     appendTo : domElement,\n *\n *     // Do not show the top toolbar\n *     tbar : null,\n *\n *     // Do not show the sidebar\n *     sidebar : null\n * });\n * ```\n *\n * Or, for more granularity:\n *\n * ```javascript\n * new Calendar({\n *     appendTo : domElement,\n *\n *     tbar : {\n *         items : {\n *             // Do not show the \"Today\" button in the top toolbar\n *             todayButton : null\n *         }\n *     },\n *\n *     sidebar : {\n *         items : {\n *             // Do not show the mini calendar in the sidebar\n *             datePicker : null\n *         }\n *     }\n * });\n * ```\n *\n * ## Toolbar, sidebar and viewContainer\n * A Calendar is basically a {@link Core.widget.Panel} which contains nested widgets which implement\n * the complex UI. By default it has three immediate child widgets which may be accessed through the\n * following properties:\n *\n * - {@link #property-tbar} references the top toolbar, which is an instance of {@link Core.widget.Toolbar}.\n * - {@link #property-sidebar} references the sidebar, which is an instance of {@link Calendar.widget.Sidebar}.\n * - {@link #property-viewContainer} references the subordinate {@link Core.widget.Container} which manages the modes\n * and changes which mode is active through its {@link Core.widget.Container#property-layout}.\n *\n * These three child widgets may be reconfigured at instantiation time using their config options\n * {@link #config-tbar}, {@link #config-sidebar} and {@link #config-viewContainer}.\n *\n * ## Loading data\n *\n * Fundamentally, all data stores mentioned below are subordinate to the Calendar's\n * {@link #property-project Project} which is the managing object for the {@link #property-eventStore},\n * {@link #property-resourceStore}, {@link #property-assignmentStore}, {@link #property-timeRangeStore} and\n * {@link #property-resourceTimeRangeStore}\n *\n * A Calendar loads its events into an {@link Scheduler.data.EventStore}.\n *\n * The recommended way to load and sync data is to use a {@link Scheduler.data.CrudManager} configured with\n * the URL of web services:\n *\n * ```javascript\n * new Calendar({\n *     appendTo : domElement,\n *     crudManager : {\n *         transport : {\n *             load : {\n *                 url : '/data-providing-url'\n *             }\n *             sync : {\n *                 url : '/data-update-url'\n *             }\n *         },\n *         autoLoad : true,\n *         autoSync : true\n *     }\n * });\n * ```\n *\n * JSON data should use this format:\n *\n * ```json\n * {\n *     \"success\" : true,\n *     \"resources\" : {\n *         \"rows\" : [\n *             {\n *                 \"id\" : 1,\n *                 \"name\" : 'Default Calendar',\n *                 \"eventColor\" : 'green'\n *             }\n *         ]\n *     },\n *     \"events\" : {\n *         \"rows\" : [\n *             {\n *                 \"id\" : 1,\n *                 \"name\" : 'Meeting',\n *                 \"startDate\" : '2020-10-01T10:00:00',\n *                 \"endDate\" : '2020-10-01T11:00:00',\n *                 \"resourceId\" : 1\n *             }\n *         ]\n *     }\n * }\n * ```\n *\n * ### Multiple assignment\n *\n * When multiple resource assignment is required, data should look as below. Assignments\n * are seperate records which link events to resources by connecting the ids of each.\n *\n * In this example, event id `1` is assigned to resources `1` and `2`\n *\n * Note that there is __no__ `resourceId` field in the event data:\n *\n * ```json\n * {\n *     \"success\" : true,\n *     \"resources\" : {\n *         \"rows\" : [\n *             {\n *                 \"id\" : 1,\n *                 \"name\" : 'Default Calendar',\n *                 \"eventColor\" : 'green'\n *             }, {\n *                 \"id\" : 2,\n *                 \"name\" : 'Alternative Calendar',\n *                 \"eventColor\" : 'red'\n *             }\n *         ]\n *     },\n *     \"events\" : {\n *         \"rows\" : [\n *             {\n *                 \"id\" : 1,\n *                 \"name\" : 'Meeting',\n *                 \"startDate\" : '2020-10-01T10:00:00',\n *                 \"endDate\" : '2020-10-01T11:00:00'\n *             }\n *         ]\n *     },\n *     \"assignments\" : {\n *         \"rows\" : [\n *             {\n *                 id         : 1,\n *                 eventId    : 1,\n *                 resourceId : 1\n *             }, {\n *                 id         : 2,\n *                 eventId    : 1,\n *                 resourceId : 2\n *             }\n *         ]\n *     }\n * }\n * ```\n *\n * ### Loading time ranges\n *\n * When using the {@link Calendar.feature.TimeRanges} feature, the time ranges are included in\n * named data blocks:\n *\n * ```json\n * {\n *     success : true,\n *     events : {...},\n *     resources : {...},\n *     timeRanges : {\n *         rows : [\n *             {\n *                 \"id\"        : 1,\n *                 \"name\"      : \"Post-conference\",\n *                 \"alignment\" : \"end\",\n *                 \"startDate\" : \"2020-10-15 15:00\",\n *                 \"endDate\"   : \"2020-10-15 20:00\",\n *                 \"color\"     : \"red\"\n *             }\n *         ]\n *     }\n * }\n * ```\n *\n * When using a {@link Calendar.widget.ResourceView}, resource-specific time ranges may\n * also be included in the data. These are only rendered in subviews of the resource view\n * with matching resource ids:\n *\n * ```json\n * {\n *     success : true,\n *     events : {...},\n *     resources : {...},\n *     resourceTimeRanges : {\n *         rows : [\n *             {\n *                 \"id\"         : 1,\n *                 \"resourceId\" : 1\n *                 \"name\"       : \"Post-conference\",\n *                 \"alignment\"  : \"end\",\n *                 \"startDate\"  : \"2020-10-15 15:00\",\n *                 \"endDate\"    : \"2020-10-15 20:00\",\n *                 \"color\"      : \"red\"\n *             }\n *         ]\n *     }\n * }\n * ```\n *\n * For more information on loading events and resources, see the {@link Scheduler.view.Scheduler}\n * documentation. Calendar uses the same data classes.\n *\n * ## Listening to events\n * The events emitted by the Calendar are documented {@link #event-eventClick here}. Note that in\n * addition to `click`, all other mouse events are also covered and all significant UI elements\n * are active, and follow the same naming convention.\n *\n * So there is a `dayNumberClick` event and a `weekNumberClick` event and a\n * `monthNameClick` event and so on.\n *\n * ## Specifying a default calendar\n *\n * To set the default calendar for your events, please use the {@link #config-defaultCalendar} config.\n *\n * ```javascript\n * new Calendar({\n *     defaultCalendar : 123 // the id of your default calendar\n * });\n * ```\n *\n * You may specify {@link #config-defaultCalendar} as `null` to specify that when an event is\n * {@link #config-autoCreate auto created}, it is not automatically assigned to a calendar.\n *\n * ## State saving\n *\n * By default the {@link #property-mode} and {@link #property-hideNonWorkingDays} properties are saved\n * when a {@link #config-stateProvider} is used.\n *\n * You can configure other properties to be part of the persistent state:\n *\n * ```javascript\n * new Calendar({\n *     stateful : [ 'date' ]\n * })\n * ```\n *\n * @extends Core/widget/Panel\n *\n * @mixes Core/widget/mixin/Responsive\n * @mixes Calendar/mixin/CalendarStores\n * @mixes Scheduler/crud/mixin/CrudManagerView\n * @mixes Scheduler/view/mixin/RecurringEvents\n * @mixes Calendar/view/mixin/EventNavigation\n * @mixes Calendar/view/mixin/EventSelection\n *\n * @features Calendar/feature/CalendarDrag\n * @features Calendar/feature/EventEdit\n * @features Calendar/feature/EventMenu\n * @features Calendar/feature/EventTooltip\n * @features Calendar/feature/ExternalEventSource\n * @features Calendar/feature/LoadOnDemand\n * @features Calendar/feature/ScheduleMenu\n * @features Calendar/feature/TimeRanges\n * @features Calendar/feature/WeekExpander\n *\n * @features Calendar/feature/print/Print\n *\n * @classtype calendar\n *\n * @widget\n */\nexport default class Calendar extends Panel.mixin(\n    SchedulerInterface,\n    CalendarStores,\n    Featureable,\n    CrudManagerView,\n    EventNavigation,\n    EventSelection,\n    CurrentConfig,\n    Responsive,\n    State,\n    RecurringEvents\n) {\n    //region Config\n    static get $name() {\n        return 'Calendar';\n    }\n    // Factoryable type name\n    static get type() {\n        return 'calendar';\n    }\n    static get configurable() {\n        return {\n            // region Hidden configs\n            /**\n             * @event eventSelectionChange\n             * @hide\n             */\n            /**\n             * @hideconfigs htmlCls, autoUpdateRecord, record, textContent, content, html\n             */\n            /**\n             * @hideproperties content, html\n             */\n            // endRegion\n            // Insert features config here because it is inherited from Featurable, which is @internal\n            // and therefore does not show up in the API docs in its default state.\n            /**\n             * Specifies the features to create and associate with the Calendar.\n             *\n             * The keys of this object are the names of features. The values are config objects for those features.\n             *\n             * ```javascript\n             *     features : {\n             *         // Exclude the CalendarDrag feature from the Calendar\n             *         drag : false,\n             *\n             *         // Change the default configuration of a feature\n             *         eventTooltip : {\n             *             showOn : 'hover'\n             *         }\n             *     }\n             * ```\n             * @config {Object} features\n             */\n            /**\n             *\n             * After construction, this property can be used to access the Calendar's features and\n             * reconfigure them.\n             *\n             * For example:\n             *\n             * ```javascript\n             *  myCalendar.features.eventTooltip.disabled = true;\n             * ```\n             * @member {Object} features\n             */\n            layout : 'hbox',\n            /**\n             * Enables events being recurring and also adds extra recurrence UI fields in the built-in event editor.\n             * @config {Boolean}\n             * @default true\n             * @category Scheduled events\n             */\n            enableRecurringEvents : true,\n            localizableProperties : [\n                'autoCreate.newName'\n            ],\n            crudManager : null,\n            features : {\n                drag         : {},\n                eventEdit    : {},\n                eventTooltip : {},\n                scheduleMenu : {},\n                eventMenu    : {}\n            },\n            /**\n             * Indicates where the Next/Previous/Today buttons should be placed.\n             * @config {'toolbar'|'sidebar'}\n             * @default 'toolbar'\n             */\n            navigatorPlacement : null,\n            responsive : {\n                small : {\n                    when : 600,\n                    once : {\n                        mode : 'day'\n                    }\n                },\n                medium : {\n                    when : 800\n                },\n                large : {\n                    overlaySidebar : false\n                },\n                '*' : {\n                    overlaySidebar : true,\n                    once : {\n                        mode : 'week'\n                    }\n                }\n            },\n            responsiveRoot : true,\n            stateful : [\n                'hideNonWorkingDays',\n                'mode'\n            ],\n            /**\n             * A {@link Core.widget.Toolbar} which displays and manages the calendar title\n             * and the buttons which manipulate the Calendar's temporal navigation and\n             * active mode.\n             *\n             * Provided widgets include:\n             *\n             * - `toggleSidebar` A button to collapse and expand the {@link #config-sidebar}\n             * - `todayButton` A button which moves the active view to include today's date.\n             * - `prevButton` A button which moves the active view to its previous time span.\n             * <br>__Note:__ The active view must yield a {@link Calendar.widget.mixin.CalendarMixin#property-stepUnit}\n             * to use as the tooltip hint for this button, otherwise it will be disabled.\n             * - `nextButton` A button which moves the active view to its next time span.\n             * <br>__Note:__ The active view must yield a {@link Calendar.widget.mixin.CalendarMixin#property-stepUnit}\n             * to use as the tooltip hint for this button, otherwise it will be disabled.\n             * - `viewDescription` A widget which is used to display the `description` property of the active view.\n             * - `spacer` A spacer widget which pushes following items to be aligned to the right.\n             * - `modeSelector` A {@link Calendar.widget.ModeSelector} which contains buttons for selecting which\n             *   view is active. This is hidden if only one {@link #config-modes mode} is enabled in the Calendar.\n             *\n             * These have `weight` values 100 to 700. New items can be inserted at any position by\n             * configuring them with an appropriate `weight`.\n             *\n             * @member {Core.widget.Toolbar} tbar\n             * @readonly\n             * @category Content\n             */\n            /**\n             * A config object containing definitions of the toolbar of the Calendar.\n             *\n             * Its `items` property defines the buttons and informational widgets\n             * provided by default.\n             *\n             * There are several provided widgets, each of which may be reconfigured using\n             * an object, or disabled by configuring them as `null`.\n             *\n             * ```javascript\n             * tbar : {\n             *     items : {\n             *         prevButton    : null,\n             *         toggleSidebar : null\n             *     }\n             * }\n             * ```\n             *\n             * Provided widgets include:\n             *\n             * - `toggleSidebar` A button to collapse and expand the {@link #config-sidebar}\n             * - `todayButton` A button which moves the active view to include today's date.\n             * - `prevButton` A button which moves the active view to its previous time span.\n             * <br>__Note:__ The active view must yield a {@link Calendar.widget.mixin.CalendarMixin#property-stepUnit}\n             * to use as the tooltip hint for this button, otherwise it will be disabled.\n             * - `nextButton` A button which moves the active view to its next time span.\n             * <br>__Note:__ The active view must yield a {@link Calendar.widget.mixin.CalendarMixin#property-stepUnit}\n             * to use as the tooltip hint for this button, otherwise it will be disabled.\n             * - `viewDescription` A widget which is used to display the `description` property of the active view.\n             * - `spacer` A spacer widget which pushes following items to be aligned to the right.\n             * - `modeSelector` A {@link Calendar.widget.ModeSelector} which contains buttons for selecting which\n             *   view is active. This is hidden if only one {@link #config-modes mode} is enabled in the Calendar.\n             *\n             * These have `weight` values 100 to 800. New items can be inserted at any position by\n             * configuring them with an appropriate `weight`.\n             *\n             * Configure this as `null` to remove the toolbar entirely.\n             * @config {ToolbarConfig}\n             */\n            tbar : {\n                cls   : 'b-calendar-toolbar',\n                items : {\n                    toggleSideBar : {\n                        icon    : 'b-icon-menu-vertical',\n                        cls     : 'b-sidebar-toggle b-borderless b-transparent',\n                        onClick : 'up.onToggleSidebarClick',\n                        weight  : 100\n                    },\n                    todayButton : {\n                        text    : 'L{Calendar.Today}',\n                        cls     : 'b-cal-nav-item b-calendar-today-button',\n                        icon    : 'b-icon-calendar-day',\n                        onClick : 'up.shiftToNow',\n                        weight  : 200\n                    },\n                    prevButton : {\n                        onClick : 'up.shiftPrevious',\n                        cls     : 'b-cal-nav-item b-borderless b-transparent',\n                        icon    : 'b-icon-previous',\n                        weight  : 300\n                    },\n                    nextButton : {\n                        onClick : 'up.shiftNext',\n                        cls     : 'b-cal-nav-item b-borderless b-transparent b-cal-nav-next',\n                        icon    : 'b-icon-next',\n                        weight  : 400\n                    },\n                    viewDescription : {\n                        cls          : 'b-calendar-view-desc',\n                        type         : 'widget',\n                        flex         : '',\n                        html         : '\\xa0',\n                        overflowable : 'none',\n                        weight       : 500\n                    },\n                    spacer : {\n                        type   : 'widget',\n                        cls    : 'b-toolbar-fill',\n                        weight : 600\n                    },\n                    modeSelector : {\n                        type   : 'calendarModeSelector',\n                        weight : 700\n                    }\n                }\n            },\n            /**\n             * The child items of the Calendar view.\n             *\n             * The Calendar contains two child items:\n             *\n             * - `sidebar` The sidebar which by default contains a clickable date picker to show and/or select\n             * the active date, and a Calendar filter UI to filter events belonging to the calendars\n             * defined in the {@link Calendar.mixin.CalendarStores#config-resourceStore}.\n             * - `viewContainer` A {@link Core.widget.layout.Card card layout}\n             * {@link Core.widget.Container container} which contains the enabled {@link #config-modes}.\n             *\n             * These items may be reconfigured by specifying them as an object, for example:\n             *\n             * ```javascript\n             * new Calendar({\n             *     appendTo : document.body,\n             *\n             *     crudManager : {\n             *         transport : {\n             *             load : {\n             *                 url : '/data-providing-url'\n             *             }\n             *             sync : {\n             *                 url : '/data-update-url'\n             *             }\n             *         },\n             *         autoLoad : true,\n             *         autoSync : true\n             *     },\n             *\n             *     // Reconfigure our viewContainer to change which \"mode\" is active upon startup\n             *     items : {\n             *         viewContainer : {\n             *             // Start looking at the week - its the fourth \"mode\" by default.\n             *             layout : {\n             *                 activeIndex : 3\n             *             }\n             *         }\n             *     }\n             * });\n             * ```\n             * @config {Object}\n             * @private\n             */\n            items : {},\n            /**\n             * Configuration options to change how the subordinate {@link Core.widget.Container} which contains\n             * the calendar's child views is created.\n             *\n             * After instantiation, this Container may be referenced using the {@link #property-viewContainer} property\n             *\n             * For example:\n             * ```javascript\n             * new Calendar({\n             *     appendTo : document.body,\n             *\n             *     crudManager : {\n             *         loadUrl  : '/data-providing-url',\n             *         syncUrl  : '/data-update-url',\n             *         autoLoad : true,\n             *         autoSync : true\n             *     },\n             *\n             *     // Reconfigure our viewContainer to change which \"mode\" is active upon startup\n             *     items : {\n             *         viewContainer : {\n             *         // No sliding in or out of child views\n             *             layout : {\n             *                 animateCardChange : false\n             *             }\n             *         }\n             *     }\n             * });\n             * ```\n             * @config {ContainerConfig} viewContainer\n             */\n            viewContainer : {\n                $config : 'lazy',\n                value   : {\n                    type : 'container',\n                    cls  : {\n                        'b-calendar-viewcontainer' : 1\n                    },\n                    flex   : '1 1 100%',\n                    layout : {\n                        type : 'card'\n                    },\n                    scrollable : {\n                        overflowY : true,\n                        overflowX : true\n                    },\n                    suppressChildHeaders : true,\n                    layoutStyle          : {\n                        padding : 0\n                    },\n                    internalListeners : {\n                        beforeActiveItemChange : 'up.onBeforeModeChange',\n                        activeItemChange       : 'up.onModeChange'\n                    }\n                }\n            },\n            /**\n             * Set to `true` to show the \"Weekends\" toggle button of the mode selector. Alternatively, this config\n             * can be a {@link Core.widget.Button} config object to configure the button.\n             * @config {Boolean|ButtonConfig}\n             * @default\n             */\n            includeWeekendsButton : false,\n            layoutStyle : {\n                padding  : 0,\n                flexFlow : 'row nowrap'\n            },\n            /**\n             * The {@link #config-modes} as widget instances.\n             * @member {Object<String,Core.widget.Widget>} modes\n             */\n            /**\n             * Configures the view modes which are to be available in this Calendar.\n             *\n             * Normally, the property names in this object are the `type` names of the eight standard\n             * Calendar views, and so the corresponding configuration object should be an object which\n             * configures that type:\n             *\n             * - agenda - Configuration for a {@link Calendar.widget.AgendaView}\n             * - year - Configuration for a {@link Calendar.widget.YearView}\n             * - month - Configuration for a {@link Calendar.widget.MonthView}\n             * - week - Configuration for a {@link Calendar.widget.WeekView}\n             * - day - Configuration for a {@link Calendar.widget.DayView}\n             * - list - Configuration for a {@link Calendar.widget.EventList}\n             * - resource - Configuration for a {@link Calendar.widget.ResourceView}\n             * - dayresource - Configuration for a {@link Calendar.widget.DayResourceView}\n             *\n             * By default, the following modes are included:\n             *\n             * - day\n             * - week\n             * - month\n             * - year\n             * - agenda\n             *\n             * Any of these may be reconfigured from its default, or omitted from the UI, by configuring the\n             * property as `null`:\n             *\n             * ```javascript\n             * modes : {\n             *     agenda : {\n             *         title : 'Conference events'\n             *     },\n             *     // Remove year view completely\n             *     year : null,\n             *     // Add an event list. This type of view is not included by default\n             *     list : {\n             *         range : 'month'\n             *     }\n             * }\n             * ```\n             *\n             * Note that the default order of the modes as listed above can be changed by configuring the\n             * modes with a `weight` value which causes them to be sorted into ascending weight order.\n             *\n             * Non-Calendar widgets, outside of those eight types may be specified by including a `type` property\n             * in the configuration block. This is the type string of any widget.\n             *\n             * If using a non-Calendar widget the widget must contain the following properties:\n             *\n             * - `displayName` A string used as the button text in the mode activation button.\n             * - `description` A string used as the Calendar title when the mode is activated.\n             *\n             * For example, you might want to use a scheduler as a calendar mode. This can be done like this:\n             *\n             * ```javascript\n             *     modes : {\n             *         myScheduler : {\n             *             // If the mode name is not a standard Calender view\n             *             // we need to specify the type of Widget we are configuring here.\n             *             type        : 'scheduler',\n             *\n             *             // This text goes into the activation button\n             *             displayName : 'Timeline',\n             *             columns : [\n             *                 { type : 'resourceInfo', field : 'name', text : 'Staff/Resource', width : 175 }\n             *             ],\n             *\n             *             features : {\n             *                 nonWorkingTime     : true,\n             *                 timeRanges         : true,\n             *                 resourceTimeRanges : true\n             *             },\n             *\n             *             workingTime : {\n             *                 fromHour : 7,\n             *                 toHour   : 22\n             *             },\n             *         }\n             *     }\n             * ```\n             *\n             * @property {ContainerItemConfig} [modes.custom] Settings specific to custom mode. `custom` may be any `String` property within this configuration object.\n             * @typings modes.custom -> {[mode: string]}:{Partial<ContainerItemConfig>|boolean|null|undefined}\n             *\n             * @property {AgendaViewConfig|Boolean|null} [modes.agenda] Settings specific to `agenda` mode. Specify `null` or `false` to disable this mode.\n             * @property {YearViewConfig|Boolean|null} [modes.year] Settings specific to `year` mode. Specify `null` or `false` to disable this mode.\n             * @property {MonthViewConfig|Boolean|null} [modes.month] Settings specific to `month` mode. Specify `null` or `false` to disable this mode.\n             * @property {WeekViewConfig|Boolean|null} [modes.week] Settings specific to `week` mode. Specify `null` or `false` to disable this mode.\n             * @property {DayViewConfig|Boolean|null} [modes.day] Settings specific to `day` mode. Specify `null` or `false` to disable this mode.\n             * @property {EventListConfig|Boolean|null} [modes.list] Settings specific to `list` mode. This mode is disabled by default.\n             * @property {ResourceViewConfig|Boolean|null} [modes.resource] Settings specific to `resource` mode. This mode is disabled by default.\n             * @property {DayResourceViewConfig|Boolean|null} [modes.dayresourceview] Settings specific to `dayresourceview` mode. This mode is disabled by default.\n             * @config {Object} [modes]\n             * @default\n             */\n            modes : {\n                day : {\n                    // This view is locked to one day duration\n                    fixedDuration : true\n                },\n                week   : {},\n                month  : {},\n                year   : {},\n                agenda : {}\n            },\n            /**\n             * Which of the built-in {@link #config-modes} should be the initially active view.\n             * @config {'agenda'|'year'|'month'|'week'|'day'|'list'|'resource'|'dayresourceview'|String}\n             * @default week\n             */\n            mode : {\n                $config : 'lazy',\n                value   : 'week'\n            },\n            /**\n             * The default settings applied to all child views.\n             *\n             * This is a dynamic object, and mutations of it will reapply the new value to all\n             * child views.\n             * @member {Object} modeDefaults\n             */\n            /**\n             * An object to use to configure common properties for all {@link #config-modes} prior to their construction.\n             * @config {Object}\n             */\n            modeDefaults : {\n                value : null  // use the value config so that the changer always runs so that Proxy is created\n            },\n            /**\n             * The {@link #config-sidebar} as an instance of {@link Calendar.widget.Sidebar}.\n             * @member {Core.widget.Container} sidebar\n             * @readonly\n             */\n            /**\n             * An optional config object to configure the {@link Calendar.widget.Sidebar} which is\n             * shown next to the calendar views specified by the {@link #config-modes}.\n             *\n             * To disable the sidebar, configure it as `null`.\n             *\n             * To reconfigure it, specify this config value as an object. The following parameters include\n             * several commonly reconfigured properties.\n             * @config {Object|Boolean}\n             * @param {'left'|'right'} side Which {@link Calendar.widget.Sidebar#config-side} to dock to.\n             * @param {Boolean} collapsed May be initially {@link Calendar.widget.Sidebar#config-collapsed}.\n             * @param {Object<String,ContainerItemConfig>} items Reconfigure or add to the sidebar UI.\n             * @param {DatePickerConfig} items.datePicker The {@link Core.widget.DatePicker} may be reconfigured using\n             * an object, or configured away using `null`. Its default {@link Core.widget.Widget#config-weight} is 100.\n             * @param {TextFieldConfig} items.eventFilter The eventFilter is a {@link Core.widget.TextField} which may\n             * be used to filter the events by matched name. It may be reconfigured using an object, or configured away\n             * using `null`. Its default {@link Core.widget.Widget#config-weight} is 150.\n             * @param {ResourceFilterConfig} items.resourceFilter The {@link Scheduler.widget.ResourceFilter} may be\n             * reconfigured using an object, or configured away using `null`. Its default\n             * {@link Core.widget.Widget#config-weight} is 200.\n             * @param {Object} items.resourceFilter.scrollable By default it scrolls in the Y axis.\n             * @param {String|Number} items.resourceFilter.flex By default it uses flex `1 1 auto`.\n             * @param {Function} items.resourceFilter.masterFilter The filter function to apply when loading resources\n             * from the project's `resourceStore`. Defaults to only including resources which are filtered into the Project's\n             * `resourceStore`. Configure this as `() => true` to always include all resources.\n             */\n            sidebar : {\n                $config : {\n                    merge : 'objects'\n                },\n                value : {\n                    type       : 'sidebar',\n                    side       : 'left',\n                    scrollable : {\n                        overflowY : true\n                    },\n                    internalListeners : {\n                        dateChange : 'up.onCalendarDateChange'\n                    }\n                }\n            },\n            /**\n             * An optional config object to configure the {@link Calendar.widget.CalendarDatePicker} which is\n             * shown in the {@link #property-sidebar} next to the calendar views.\n             *\n             * To disable the datePicker, configure it as `null`.\n             *\n             * To reconfigure it, specify this config value as an object.\n             *\n             * Note that when `showEvents` is set in the `datePicker`, the cells are slightly larger,\n             * therefore the `datePicker` takes up more space and so will make the\n             * {@link #property-sidebar} a little wider than normal.\n             * @config {Object|Boolean}\n             * @param {Boolean|'count'|'dots'} [datePicker.showEvents] Displays the presence of events in each cell.\n             * values may be:\n             *\n             * * `false` - Do not show events in cells.\n             * * `true` - Show a themeable bullet to indicate the presence of events for a date.\n             * * `'count'` - Show a themeable badge containing the event count for a date.\n             * * '`dots'` - Show small event-coloured bullets (to a maximum of three) below the date.\n             * @param {Boolean} [datePicker.collapsible] `true` to enable collapse into a header.\n             * @param {String} [datePicker.title] The text to place in a header above the picker.\n             * @param {Boolean} [datePicker.editMonth] `true` to enable setting the date using the controls\n             * in the DatePicker header.\n             */\n            datePicker : {\n                $config : {\n                    merge : 'objects'\n                },\n                value : {\n                    weight        : 100,\n                    dayNameFormat : 'd1',\n                    editMonth     : null,\n                    focusable     : false,\n                    trapFocus     : false\n                }\n            },\n            /**\n             * By default, the {@link #property-sidebar} expands and collapses taking width from the\n             * calendar UI. Configure `overlaySidebar` as `true` to have it start collapsed, and then\n             * **overlay** the calendar UI when the expand/collapse button is toggled.\n             * @config {Boolean}\n             * @default false\n             */\n            overlaySidebar : null,\n            /**\n             * The date which this Calendar encapsulates as its active date.\n             *\n             * This is usually selected by clicking in the {@link #property-sidebar}'s date picker\n             * or by navigating the view forwards or backwards in time.\n             *\n             * This is also changed by clicking in day cells of the active view.\n             *\n             * This may be set programatically which will cause the currently active view to navigate to\n             * encapsulate that date.\n             * @member {Date} date\n             */\n            /**\n             * The date which the Calendar, its {@link #property-sidebar}'s date picker, and\n             * its active view should encapsulate upon creation. Defaults to current date.\n             * @config {Date}\n             */\n            date : {\n                $config : {\n                    equal : 'date'\n                },\n                value : new Date()\n            },\n            /**\n             * A {@link Core.helper.DateHelper} format string to use to create date output for\n             * view descriptions.\n             * @prp {String}\n             */\n            dateFormat : 'MMMM DD, YYYY',\n            scrollManager : {\n                $config : ['lazy', 'nullify'],\n                value   : {\n                    direction : 'vertical'\n                }\n            },\n            viewUpdateDelay : 2000,\n            /**\n             * Get/set the calendar's read-only state. When set to `true`, any UIs for modifying data are disabled.\n             * @member {Boolean} readOnly\n             */\n            /**\n             * Configure as `true` to make the calendar read-only, by disabling any UIs for modifying data.\n             *\n             * __Note that checks MUST always also be applied at the server side.__\n             * @config {Boolean}\n             * @default false\n             */\n            readOnly : null,\n            /**\n             * Set to false if you don't want to allow events overlapping times for any one resource (defaults to true).\n             * @config {Boolean}\n             * @default\n             */\n            allowOverlap : true,\n            testConfig : {\n                viewUpdateDelay : 5,\n                // Test environment must be prevented from clicking the UI very fast while network IO\n                // is in flight. LoadOnDemand testing was susceptible to this.\n                loadMask : {\n                    text      : 'L{GridBase.loadMask}',\n                    showDelay : 0\n                }\n            },\n            /**\n             * Configure this as `true` to make picking a date in the {@link #config-sidebar}'s\n             * date picker highlight the date cell in the active view.\n             *\n             * May also be specified as a function which will be passed the date cell element to enable\n             * performing customized highlighting.\n             *\n             * @config {Boolean|Function}\n             * @param {Date} date Cell date\n             * @returns {Boolean} Returns `true` to make picking a date in a date picker\n             */\n            highlightDate : null,\n            /**\n             * If this config is set, then the `gesture` configured (which defaults to `dblclick`) creates a\n             * new event at the mouse or touch event's time point.\n             *\n             * The exact time is rounded to the closest specified `step` value. This value is also used\n             * for the {@link Core.widget.TimeField#property-step} value in the {@link Calendar.feature.EventEdit}'s\n             * time input field.\n             *\n             * The duration of the created event is the specified `duration` value.\n             *\n             * If this is specified as `true`, the `gesture` becomes `dblclick`, and the other properties\n             * are the default values listed below.\n             *\n             * If this is specified as a string, the string becomes the `gesture`, and the other properties\n             * are the default values listed below.\n             *\n             * @property {String} [autoCreate.gesture='dblclick'] The event name which should trigger event creation at the event's position.\n             * @property {String} [autoCreate.newName='New Event'] The name of an event created using `autoCreate` or a function to call which yields the name.\n             * @property {String} [autoCreate.step='15 minutes'] The time unit by which to round the start click point of auto created events.\n             * _Only for views which have a granularity of less than one day such as `WeekView` and `DayView'_.\n             *\n             * For views which show whole days, the start defaults to 8am.\n             *\n             * This is a string in the format required by {@link Core.helper.DateHelper#function-parseDuration-static}.\n             *\n             * This value is also used for the {@link Core.widget.TimeField#property-step} value in the\n             * {@link Calendar.feature.EventEdit}'s time input field.\n             *\n             * @property {String} [autoCreate.duration='1 hour'] The default duration for auto created events.\n             * @property {Number | String} [autoCreate.startHour=8] The default start hour for auto created events\n             * in views where the time granularity is one day. In a DayView or WeekView where a mouse event position\n             * will translate to a time of day, this is not used.\n             *\n             * This is the hour of the day to start the event at. It can be fractional or an HH:MM:SS time string.\n             * @config {Object|String|Boolean}\n             * @default\n             */\n            autoCreate : {\n                gesture   : 'dblclick',\n                newName   : 'L{Object.newEvent}',\n                step      : '15 minutes',\n                duration  : '1 hour',\n                startHour : 8\n            },\n            focusable : false,\n            // The common Navigator needs to know this\n            eventCls : 'b-cal-event',\n            /**\n             * The week start day to be used throughout this Calendar, 0 meaning Sunday, 6 meaning Saturday.\n             *\n             * This propagates into all owned {@link #config-modes}.\n             *\n             * Defaults to {@link Core.helper.DateHelper#property-weekStartDay-static}. When the default value is used, changing locale\n             * will dynamically change the week start day for the calendar and all {@link #config-modes}.\n             *\n             * __If__ this is configured in from the start, then locale values for the week start day\n             * will __not__ apply.\n             *\n             * For example:\n             * ```javascript\n             * new Calendar({\n             *     // Apply to this Calendar only\n             *     weekStartDay : 1 // Week starts on Monday\n             *     //....\n             * });\n             * ```\n             *\n             * @config {Number} [weekStartDay]\n             */\n            weekStartDay : false,\n            /**\n             * Configure as `true` to hide {@link #config-nonWorkingDays} for each calendar view\n             * @prp {Boolean}\n             */\n            hideNonWorkingDays : null,\n            /**\n             * Non-working days as an object where keys are day indices, 0-6 (Sunday-Saturday), and the value is `true`.\n             *\n             * This propagates into all owned {@link #config-modes}.\n             *\n             * Defaults to {@link Core.helper.DateHelper#property-nonWorkingDays-static}. When the default value is used, changing locale\n             * will dynamically change the week start day for the calendar and all {@link #config-modes}.\n             *\n             * __If__ this is configured in from the start, then locale values for the week start day\n             * will __not__ apply.\n             *\n             * Both header and event cells for non working days get the CSS class `b-nonworking-day` added.\n             *\n             * Note that this is independent of and in addition to weekend days. Cells for Saturday and\n             * Sunday always get the CSS class `b-weekend` added.\n             *\n             * For example:\n             * ```javascript\n             * new Calendar({\n             *     // Apply to this Calendar only\n             *     nonWorkingDays : {\n             *         0 : true // Only Sunday is non-working day\n             *     },\n             *     //....\n             * });\n             * ```\n             *\n             * @config {Object<Number,Boolean>} [nonWorkingDays]\n             */\n            nonWorkingDays : false,\n            coreHours : null,\n            /**\n             * Event which is used to show context menus via the context menu features\n             * {@link Calendar.feature.EventMenu} and {@link Calendar.feature.ScheduleMenu}.\n             * Available options are: 'contextmenu', 'click', 'dblclick'.\n             * @config {'contextmenu'|'click'|'dblclick'}\n             * @default\n             * @category Misc\n             */\n            contextMenuTriggerEvent : 'contextmenu',\n            /**\n             * Set to true to listen for CTRL-Z (CMD-Z on Mac OS) keyboard event and trigger undo (redo when SHIFT is pressed).\n             * Only applicable when using a {@link Core.data.stm.StateTrackingManager}.\n             * @config {Boolean}\n             * @default\n             * @category Misc\n             */\n            enableUndoRedoKeys : true,\n            /**\n             * Path to load resource images from. Used by the resource headers in ResourceView and by\n             * {@link Calendar.widget.mixin.CalendarMixin#config-showResourceAvatars} in event-displaying\n             * modes.\n             *\n             * This is used to show resource avatars using the resource's\n             * {@link Scheduler/model/ResourceModel#field-image} or\n             * {@link Scheduler/model/ResourceModel#field-imageUrl} fields:\n             *\n             * * `image` represents image name inside the specified `resourceImagePath`,\n             * * `imageUrl` represents fully qualified image URL.\n             *\n             * If an image is not specified for a resource, or the image is not found, the resource's\n             * initials will be displayed.\n             * @config {String}\n             * @category Misc\n             */\n            resourceImagePath : null,\n            /**\n             * The minimum date to which the `startDate` of any child view may be navigated.\n             * @member {Date} minDate\n             */\n            /**\n             * The minimum date to which the `startDate` of any child view may be navigated.\n             * @config {Date|String}\n             */\n            minDate : null,\n            /**\n             * The maximum date to which the `endDate` of any child view may be navigated.\n             * @member {Date} maxDate\n             */\n            /**\n             * The maximum date to which the `endDate` of any child view may be navigated.\n             * @config {Date|String}\n             */\n            maxDate : null,\n            /**\n             * If this is set to `true`, then when determining which assigned resource of a multi assigned event\n             * to use to create the event UI, the first resource which is still selected in the\n             * {@link Calendar.widget.Sidebar#property-resourceFilter} is used.\n             *\n             * The default is to use the first resource in the assigned list.\n             *\n             * The resource's {@link Scheduler.model.ResourceModel#field-eventColor} is used as the colour for the\n             * event unless the event has its own {@link Scheduler.model.EventModel#field-eventColor}.\n             *\n             * The resource's {@link Scheduler.model.ResourceModel#field-eventStyle} is used as the base of the style\n             * for the event, and the event's {@link Scheduler.model.EventModel#field-style} is applied to it.\n             * @config {Boolean}\n             * @default false\n             */\n            filterEventResources : null,\n            /**\n             * An optional CSS class name to add to calendar date cells which encapsulate the calendar's\n             * active {@link #property-date}.\n             *\n             * There is no theme rule connected to this date, so no built-in rendition of the active date.\n             * The application may add view-specific CSS rules to provide visual indications.\n             * @prp {String}\n             */\n            activeDateCls : null\n        };\n    }\n    static get delayable() {\n        return {\n            refresh : {\n                type              : 'raf',\n                cancelOutstanding : true\n            },\n            syncUIWithActiveView : {\n                type              : 'buffer',\n                delay             : 1,\n                cancelOutstanding : true\n            }\n        };\n    }\n    //endregion\n    compose() {\n        const { includeWeekendsButton, navigatorPlacement } = this;\n        return {\n            class : {\n                [`b-calendar-nav-${navigatorPlacement || 'toolbar'}`] : 1,\n                'b-calendar-include-weekends-button'                  : includeWeekendsButton\n            }\n        };\n    }\n    //region Overrides\n    applyState() {\n        // We want to inhibit multiple refreshes during the config changes that this will apply.\n        // If we set the _hidden flag, views will queue any refreshes until we trigger the paint event.\n        this._hidden = true;\n        super.applyState(...arguments);\n        this._hidden = false;\n        this.triggerPaint();\n    }\n    onPaintOverride() {\n        // Internal procedure used for paint method overrides\n        // Not used in onInternalPaint() because it may be chained on instance and Override won't be applied\n    }\n    onInternalPaint() {\n        if (this.onPaintOverride()) {\n            return;\n        }\n        super.onInternalPaint();\n    }\n    onShowOverflowPopup({ overflowPopup }) {\n        this.element.classList.add('b-overflow-popup-visible');\n        overflowPopup.ion({\n            hide : () => this.element.classList.remove('b-overflow-popup-visible'),\n            once : true\n        });\n    }\n    //endregion\n    //region events\n    /**\n     * Fires before an event is removed. Can be triggered by user pressing [DELETE] or [BACKSPACE] or by the\n     * event editor. Can for example be used to display a custom dialog to confirm deletion, in which case\n     * records should be \"manually\" removed after confirmation:\n     *\n     * ```javascript\n     * calendar.on({\n     *    beforeEventDelete({ eventRecords, context }) {\n     *        // Show custom confirmation dialog (pseudo code)\n     *        confirm.show({\n     *            listeners : {\n     *                onOk() {\n     *                    // Remove the events on confirmation\n     *                    context.finalize(true);\n     *                },\n     *                onCancel() {\n     *                    // do not remove the events if \"Cancel\" clicked\n     *                    context.finalize(false);\n     *                }\n     *            }\n     *        });\n     *\n     *        // Prevent default behaviour\n     *        return false;\n     *    }\n     * });\n     * ```\n     *\n     * @event beforeEventDelete\n     * @param {Calendar.view.Calendar} source  The Calendar instance\n     * @param {Scheduler.model.EventModel[]} eventRecords  The records about to be deleted\n     * @param {Object} context  Additional removal context:\n     * @param {Function} context.finalize  Function to call to finalize the removal.\n     *      Used to asynchronously decide to remove the records or not. Provide `false` to the function to\n     *      prevent the removal.\n     * @param {Boolean} [context.finalize.removeRecords = true]  Provide `false` to the function to prevent\n     *      the removal.\n     * @preventable\n     */\n    /**\n     * Fires when a day spanning event is found, and the date to which its encapsulating event bar\n     * extends has been calculated.\n     *\n     * The default result in the event's `propagateEndDate` property may be mutated by a listener.\n     *\n     * Note that this is an ending point in time, it does *not* refer to a 24 hour block. So setting\n     * the `propagateEndDate` to `new Date(2022, 1, 10)` means that the event bar will occupy cells\n     * up to and including February 9 2022 and no further.\n     *\n     * This is relayed from all modes, so a single listener may be used, for example:\n     *\n     * ```javascript\n     * new Calendar({\n     *     listeners : {\n     *         eventPropagate(eventData) {\n     *             // If the event spills into the next day but not further\n     *             // then we do not want an extended event bar.\n     *             // An arrow will indicate that it continues rightwards.\n     *             if (eventData.eventEndDate < DateHelper.add(eventData.date, 2, 'd')) {\n     *                 eventData.propagateEndDate = DateHelper.add(DateHelper.clearTime(eventData.eventRecord.startDate), 1, 'd');\n     *             }\n     *         }\n     *     }\n     * });\n     * ```\n     *\n     * The `eventEndDate` in the data block may also be changed to override the event's real end date.\n     * This will mean that there will be no arrow indicating that the event continues:\n     *\n     * ```javascript\n     * new Calendar({\n     *     listeners : {\n     *         eventPropagate(eventData) {\n     *             // If the event spills into the next day but not further\n     *             // then we do not want an extended event bar.\n     *             // Because we override the eventEndDate, no arrow will be present\n     *             // to indicate any continuation.\n     *             if (eventData.eventEndDate < DateHelper.add(eventData.date, 2, 'd')) {\n     *                 eventData.propagateEndDate = eventData.eventEndDate = DateHelper.add(DateHelper.clearTime(eventData.eventRecord.startDate), 1, 'd');\n     *             }\n     *         }\n     *     }\n     * });\n     * ```\n     *\n     * @event eventPropagate\n     * @param {Date} eventEndDate The end date for which to calculate the propagate end date.\n     * @param {Date} propagateEndDate The system-calculated end point of the event bar.\n     * @param {Boolean} isAllDay `true` if the event is an all day event, or spans multiple days.\n     * @param {Boolean} isOverflow `true` if this is being called as part of further propagation.\n     * @param {Boolean} overflows `true` if the event extends into future cells.\n     * @param {Scheduler.model.EventModel} eventRecord The event record being propagated.\n     * @param {Date} date The date from which the event is being propagated.\n     */\n    /**\n     * Fires when an event bar is mouseovered in any view.\n     * @event eventMouseOver\n     * @param {Calendar.widget.mixin.CalendarMixin} source The view which triggered the event.\n     * @typings source -> {typeof CalendarMixin}\n     * @param {Event} domEvent The initiating DOM event.\n     * @param {Date} date The date of the UI element which contains the event.\n     * @param {HTMLElement} eventElement The UI element which represents the event.\n     * @param {Scheduler.model.EventModel} eventRecord The event mouseovered.\n     * @param {Scheduler.model.ResourceModel} resourceRecord The resource mouseovered if the UI includes a resource.\n     * @param {Boolean} fromOverflowPopup `true` if the interaction was through the source view's\n     * {@link Calendar.widget.mixin.DayCellRenderer#property-overflowPopup}.\n     */\n    /**\n     * Fires when an event bar is mousedowned in any view.\n     * @event eventMouseDown\n     * @param {Calendar.widget.mixin.CalendarMixin} source The view which triggered the event.\n     * @typings source -> {typeof CalendarMixin}\n     * @param {Event} domEvent The initiating DOM event.\n     * @param {Date} date The date of the UI element which contains the event.\n     * @param {HTMLElement} eventElement The UI element which represents the event.\n     * @param {Scheduler.model.EventModel} eventRecord The event mousedowned on.\n     * @param {Scheduler.model.ResourceModel} resourceRecord The resource mousedowned on if the UI includes a resource.\n     * @param {Boolean} fromOverflowPopup `true` if the interaction was through the source view's\n     * {@link Calendar.widget.mixin.DayCellRenderer#property-overflowPopup}.\n     */\n    /**\n     * Fires when an event bar is mouseupped in any view.\n     * @event eventMouseUp\n     * @param {Calendar.widget.mixin.CalendarMixin} source The view which triggered the event.\n     * @typings source -> {typeof CalendarMixin}\n     * @param {Event} domEvent The initiating DOM event.\n     * @param {Date} date The date of the UI element which contains the event.\n     * @param {HTMLElement} eventElement The UI element which represents the event.\n     * @param {Scheduler.model.EventModel} eventRecord The event mouseupped.\n     * @param {Scheduler.model.ResourceModel} resourceRecord The resource mouseupped if the UI includes a resource.\n     * @param {Boolean} fromOverflowPopup `true` if the interaction was through the source view's\n     * {@link Calendar.widget.mixin.DayCellRenderer#property-overflowPopup}.\n     */\n    /**\n     * Fires when an event bar is clicked in any view.\n     * @event eventClick\n     * @param {Calendar.widget.mixin.CalendarMixin} source The view which triggered the event.\n     * @typings source -> {typeof CalendarMixin}\n     * @param {Event} domEvent The initiating DOM event.\n     * @param {Date} date The date of the UI element which contains the event.\n     * @param {HTMLElement} eventElement The UI element which represents the event.\n     * @param {Scheduler.model.EventModel} eventRecord The event clicked on.\n     * @param {Scheduler.model.ResourceModel} resourceRecord The resource clicked on if the UI includes a resource.\n     * @param {Boolean} fromOverflowPopup `true` if the interaction was through the source view's\n     * {@link Calendar.widget.mixin.DayCellRenderer#property-overflowPopup}.\n     */\n    /**\n     * Fires when an event bar is double clicked in any view.\n     * @event eventDblClick\n     * @param {Calendar.widget.mixin.CalendarMixin} source The view which triggered the event.\n     * @typings source -> {typeof CalendarMixin}\n     * @param {Event} domEvent The initiating DOM event.\n     * @param {Date} date The date of the UI element which contains the event.\n     * @param {HTMLElement} eventElement The UI element which represents the event.\n     * @param {Scheduler.model.EventModel} eventRecord The event double clicked on.\n     * @param {Scheduler.model.ResourceModel} resourceRecord The resource double clicked on if the UI includes a resource.\n     * @param {Boolean} fromOverflowPopup `true` if the interaction was through the source view's\n     * {@link Calendar.widget.mixin.DayCellRenderer#property-overflowPopup}.\n     */\n    /**\n     * Fires when an event bar is mouseouted in any view.\n     * @event eventMouseOut\n     * @param {Calendar.widget.mixin.CalendarMixin} source The view which triggered the event.\n     * @typings source -> {typeof CalendarMixin}\n     * @param {Event} domEvent The initiating DOM event.\n     * @param {Date} date The date of the UI element which contains the event.\n     * @param {HTMLElement} eventElement The UI element which represents the event.\n     * @param {Scheduler.model.EventModel} eventRecord The event mouseouted.\n     * @param {Scheduler.model.ResourceModel} resourceRecord The resource mouseouted if the UI includes a resource.\n     * @param {Boolean} fromOverflowPopup `true` if the interaction was through the source view's\n     * {@link Calendar.widget.mixin.DayCellRenderer#property-overflowPopup}.\n     */\n    /**\n     * Fires when an event bar is right clicked in any view.\n     * @event eventContextMenu\n     * @param {Calendar.widget.mixin.CalendarMixin} source The view which triggered the event.\n     * @typings source -> {typeof CalendarMixin}\n     * @param {Event} domEvent The initiating DOM event.\n     * @param {Date} date The date of the UI element which contains the event.\n     * @param {HTMLElement} eventElement The UI element which represents the event.\n     * @param {Scheduler.model.EventModel} eventRecord The event right clicked on.\n     * @param {Scheduler.model.ResourceModel} resourceRecord The resource right clicked on if the UI includes a resource.\n     * @param {Boolean} fromOverflowPopup `true` if the interaction was through the source view's\n     * {@link Calendar.widget.mixin.DayCellRenderer#property-overflowPopup}.\n     */\n    /**\n     * Fires when a day number is clicked in a view which shows day numbers. This will include\n     * the cells of a {@link Calendar.widget.YearView YearView}, the cell header of cells\n     * in a {@link Calendar.widget.MonthView MonthView}, and the day header in a\n     * {@link Calendar.widget.DayView}.\n     * @event dayNumberClick\n     * @param {Calendar.widget.mixin.CalendarMixin} source The view which triggered the event.\n     * @typings source -> {typeof CalendarMixin}\n     * @param {Event} domEvent The initiating DOM event.\n     * @param {Date} date The date clicked on.\n     * @param {DayCell} cellData An object that contains data about the calendar cell for the date.\n     * @param {Boolean} fromOverflowPopup `true` if the interaction was through the source view's\n     * {@link Calendar.widget.mixin.DayCellRenderer#property-overflowPopup}.\n     */\n    /**\n     * Fires when a week number is clicked. This will include the week number cells of a\n     * {@link Calendar.widget.YearView YearView}, the week number in the first cell\n     * in each row of a {@link Calendar.widget.MonthView MonthView}\n     * @event weekNumberClick\n     * @param {Calendar.widget.mixin.CalendarMixin} source The view which triggered the event.\n     * @typings source -> {typeof CalendarMixin}\n     * @param {Event} domEvent The initiating DOM event.\n     * @param {Number[]} week The `[year, week]` clicked on.\n     * @param {Date} date The date clicked on.\n     */\n    /**\n     * Fires when a month name header in a {@link Calendar.widget.YearView YearView} is clicked on.\n     * @event monthNameClick\n     * @param {Calendar.widget.mixin.CalendarMixin} source The view which triggered the event.\n     * @typings source -> {typeof CalendarMixin}\n     * @param {Event} domEvent The initiating DOM event.\n     * @param {Number} month The month index _(zero based)_ clicked on.\n     * @param {Date} date The date of the first of the month clicked on.\n     */\n    /**\n     * Fires when a cell overflow indicator is clicked in any view. This will include\n     * the cells of a {@link Calendar.widget.YearView YearView} and the `+ n more` overflow\n     * indicator of cells in a {@link Calendar.widget.MonthView MonthView}, and \"all day\" events section\n     * of a {@link Calendar.widget.DayView}.\n     * @event cellOverflowClick\n     * @param {Calendar.widget.mixin.CalendarMixin} source The view which triggered the event.\n     * @typings source -> {typeof CalendarMixin}\n     * @param {Event} domEvent The initiating DOM event.\n     * @param {Date} date The date clicked on.\n     */\n    /**\n     * Fires when a mouseover made its way through to an empty part of any view.\n     * @event scheduleMouseOver\n     * @param {Calendar.widget.mixin.CalendarMixin} source The view which triggered the event.\n     * @typings source -> {typeof CalendarMixin}\n     * @param {Event} domEvent The initiating DOM event.\n     * @param {Date} date The date mouseovered. _Note that in a {@link Calendar.widget.DayView},\n     * this will include granular time information. For other views, this is the *start* of the date.\n     */\n    /**\n     * Fires when a mousedown made its way through to an empty part of any view.\n     * @event scheduleMouseDown\n     * @param {Calendar.widget.mixin.CalendarMixin} source The view which triggered the event.\n     * @typings source -> {typeof CalendarMixin}\n     * @param {Event} domEvent The initiating DOM event.\n     * @param {Date} date The date mousedowned on. _Note that in a {@link Calendar.widget.DayView},\n     * this will include granular time information. For other views, this is the *start* of the date.\n     */\n    /**\n     * Fires when a mouseup made its way through to an empty part of any view.\n     * @event scheduleMouseUp\n     * @param {Calendar.widget.mixin.CalendarMixin} source The view which triggered the event.\n     * @typings source -> {typeof CalendarMixin}\n     * @param {Event} domEvent The initiating DOM event.\n     * @param {Date} date The date mouseupped on. _Note that in a {@link Calendar.widget.DayView},\n     * this will include granular time information. For other views, this is the *start* of the date.\n     */\n    /**\n     * Fires when a click made its way through to an empty part of any view.\n     * @event scheduleClick\n     * @param {Calendar.widget.mixin.CalendarMixin} source The view which triggered the event.\n     * @typings source -> {typeof CalendarMixin}\n     * @param {Event} domEvent The initiating DOM event.\n     * @param {Date} date The date clicked on. _Note that in a {@link Calendar.widget.DayView},\n     * this will include granular time information. For other views, this is the *start* of the date.\n     */\n    /**\n     * Fires when a dblclick made its way through to an empty part of any view.\n     * @event scheduleDblClick\n     * @param {Calendar.widget.mixin.CalendarMixin} source The view which triggered the event.\n     * @typings source -> {typeof CalendarMixin}\n     * @param {Event} domEvent The initiating DOM event.\n     * @param {Date} date The date double clicked on. _Note that in a {@link Calendar.widget.DayView},\n     * this will include granular time information. For other views, this is the *start* of the date.\n     */\n    /**\n     * Fires when a context menu made its way through to an empty part of any view.\n     * @event scheduleContextMenu\n     * @param {Calendar.widget.mixin.CalendarMixin} source The view which triggered the event.\n     * @typings source -> {typeof CalendarMixin}\n     * @param {Event} domEvent The initiating DOM event.\n     * @param {Date} date The date clicked on. _Note that in a {@link Calendar.widget.DayView},\n     * this will include granular time information. For other views, this is the *start* of the date.\n     */\n    /**\n     * Fires when a mouseout made it's way through to an empty part of any view.\n     * @event scheduleMouseOut\n     * @param {Calendar.widget.mixin.CalendarMixin} source The view which triggered the event.\n     * @typings source -> {typeof CalendarMixin}\n     * @param {Event} domEvent The initiating DOM event.\n     * @param {Date} date The date mouseouted. _Note that in a {@link Calendar.widget.DayView},\n     * this will include granular time information. For other views, this is the *start* of the date.\n     */\n    /**\n     * Fires when one of the views in this Calendar refreshes.\n     * @event refresh\n     * @param {Calendar.widget.mixin.CalendarMixin} source The view which refreshed.\n     * @typings source -> {typeof CalendarMixin}\n     */\n    /**\n     * Fired when an {@link Calendar.widget.mixin.CalendarMixin#config-autoCreate} gesture has\n     * created a new event and added it to the event store.\n     *\n     * If the {@link Calendar.feature.EventEdit} feature is present, it listens for\n     * this event and initiates an edit operation. Adding a high `prio` listener which\n     * returns `false` can prevent this event from reaching the `eventEdit` processing.\n     * @event eventAutoCreated\n     * @param {Calendar.widget.mixin.CalendarMixin} source The child view on which the event was initiated.\n     * @typings source -> {typeof CalendarMixin}\n     * @param {Scheduler.model.EventModel} eventRecord The new event record.\n     */\n    /**\n     * Fired when an empty cell content area is clicked on in a {@link Calendar.widget.MonthView} or a\n     * {@link Calendar.widget.CalendarRow}.\n     * @event emptyCellClick\n     * @param {Event} domEvent The triggering DOM event.\n     * @param {Date} date The date which has no visible events\n     */\n    /**\n     * This event fires whenever a child view's {@link Calendar.widget.mixin.CalendarMixin#config-autoCreate\n     * autoCreate gesture} is detected and also when a {@link Calendar.feature.CalendarDrag\n     * drag-create} gesture is detected.\n     *\n     * This event is preventable and may be used to validate UI-initiated event creation.\n     * @event beforeAutoCreate\n     * @preventable\n     * @param {Event} domEvent The DOM event which initiated the creation.\n     * @param {Date} date The starting time of the event to be created.\n     * @param {Scheduler.model.ResourceModel} resourceRecord The resource if the UI includes a resource.\n     */\n    //endregion\n    static get featureable() {\n        return {\n            factory : CalendarFeature\n        };\n    }\n    // Gets current date time, time zone converted if time zone is set\n    get dateTimeNow() {\n        if (this.timeZone != null) {\n            return TimeZoneHelper.toTimeZone(new Date(), this.timeZone);\n        }\n        return new Date();\n    }\n    // Gets current date with day info only. Time zone converted if time zone is set\n    get today() {\n        const today = this.dateTimeNow;\n        today.setHours(0, 0, 0, 0);\n        return today;\n    }\n    finalizeInit() {\n        super.finalizeInit();\n        const\n            me                 = this,\n            hideNonWorkingDays = me.activeView?.hideNonWorkingDays;\n        if (hideNonWorkingDays != null && me.hideNonWorkingDays == null) {\n            me.hideNonWorkingDays = hideNonWorkingDays;\n        }\n    }\n    toggleEmptyText() {\n        const\n            { crudManager } = this,\n            { eventStore }  = crudManager || this;\n        DomHelper.toggleClasses(this.contentElement, 'b-calendar-empty', !(eventStore.count || (crudManager?.isLoading)));\n    }\n    /**\n     * Schedules a refresh of the UI for the next animation frame. This is a useful method to call when\n     * making multiple data changes, so that each change merely *schedules* a refresh for the next AF and\n     * DOM churn is kept to a minimum.\n     */\n    refresh() {\n        this.eachView(v => v.refresh?.());\n    }\n    /**\n     * The {@link #property-modes} as an Array.\n     * @property {Core.widget.Widget[]}\n     */\n    get views() {\n        // Do not invoke the DynamicObject twice\n        const { modes } = this;\n        return modes ? Object.values(modes) : [];\n    }\n    /**\n     * Returns the currently active mode as a {@link Core.widget.Widget} instance.\n     *\n     * Similar to the {@link #property-mode} property which is the active mode's name as a string.\n     * @property {Core.widget.Widget}\n     */\n    get activeView() {\n        return this.viewContainer.layout.activeItem;\n    }\n    /**\n     * Returns the lowest level of active view in the mode container.\n     *\n     * For example, if a {@link Calendar.widget.ResourceView} is the active view, this would\n     * return the sub view of that which is currently focused. Or the resourceView if none\n     * of the sub views were focused.\n     * @property {Core.widget.Widget}\n     */\n    get activeSubView() {\n        const\n            { activeView } = this,\n            { items }      = activeView,\n            // If its a multi-CalendarWidget view (Such as a ResourceView), narrow down activeView\n            // to the active subView which contains focus.\n            activeSubView  = items.filter(isFocusedCalendarMixin)?.[0];\n        return activeSubView || activeView;\n    }\n    captureFocus() {\n        return this.activeView.captureFocus();\n    }\n    /**\n     * Returns the event record for a DOM element or DOM event.\n     * @param {HTMLElement|Event} elementOrEvent The DOM node to lookup, or a DOM event whose target to lookup.\n     * @returns {Scheduler.model.EventModel} The event record\n     */\n    getEventRecord(elementOrEvent) {\n        return this.activeView.getEventRecord(elementOrEvent);\n    }\n    /**\n     * Returns the event record for a DOM element or DOM event.\n     * @param {HTMLElement|Event} elementOrEvent The DOM node to lookup, or a DOM event whose target to lookup.\n     * @returns {Scheduler.model.EventModel} The event record\n     */\n    resolveEventRecord(elementOrEvent) {\n        // this method is added for symmetry w/SchedulerInterface\n        return this.getEventRecord(elementOrEvent);\n    }\n    onBeforeModeChange({\n        prevActiveItem,\n        activeItem\n    }) {\n        /**\n         * Fired before a change of view is initiated.\n         * @event beforeActiveItemChange\n         * @param {Calendar.view.Calendar} source This Calendar instance.\n         * @param {Core.widget.Widget} prevActiveItem The previously active view.\n         * @param {Core.widget.Widget} activeItem The new active view.\n         * @preventable\n         */\n        if (this.trigger('beforeActiveItemChange', arguments[0]) === false) {\n            return false;\n        }\n        // Access the property name directly because this is a lazy config.\n        // We do not want to cause ingestion and update here.\n        // It might be still the initial config form, so might not have hide()\n        prevActiveItem._overflowPopup?.hide?.();\n        // In case some of the modes are not standard Calendar widgets which\n        // all implement a date setter. Allow them to opt-out of syncing date.\n        if (('date' in activeItem) && activeItem.syncViewDate !== false) {\n            const date = this.date || prevActiveItem.date;\n            // activeItem's config system will protect it from non-changes.\n            if (date) {\n                activeItem.date = date;\n            }\n        }\n    }\n    onModeChange(event) {\n        /**\n         * Fired when a change of view has completed. By default, view changes are animated and this\n         * event fires when the view is fully visible.\n         * @event activeItemChange\n         * @param {Calendar.view.Calendar} source This Calendar instance.\n         * @param {Core.widget.Widget} prevActiveItem The previously active view.\n         * @param {Core.widget.Widget} activeItem The new active view.\n         */\n        this.trigger('activeItemChange', event);\n    }\n    onToggleSidebarClick() {\n        const\n            { sidebar } = this,\n            { collapsible } = sidebar;\n        // If we are overlaying the sidebar, the button toggles between collapsed and revealed\n        // state rather than expanded and collapsed.\n        if (collapsible?.isPanelCollapserOverlay) {\n            if (!collapsible.revealing) {\n                collapsible.toggleReveal(!sidebar.revealed);\n            }\n        }\n        else {\n            sidebar.toggleCollapsed();\n        }\n    }\n    /**\n     * Navigates Calendar's {@link #property-activeView active view} to the current local date\n     */\n    shiftToNow() {\n        const\n            me          = this,\n            datePicker  = me.sidebar?.widgetMap.datePicker,\n            { dayTime } = me.activeView,\n            now         = new Date(),\n            today       = dayTime ? dayTime.startOfDay(now) : DateHelper.clearTime(now);\n        // Reaction to this to change the activeView's date happens in onCalendarDateChange.\n        // updateDate changes the sidebar date if there is a sidebar, else it calls\n        // onCalendarDateChange directly.\n        // Make sure we use the current view's conception of where a day begins\n        me.date = today;\n        // Our updateDate will only have done this if our current date is *not* today\n        // The sidebar's date picker can be navigated around, but clicking the \"today\"\n        // button must bring all views into line.\n        datePicker && (datePicker.date = today);\n        me.updateViewDescription();\n    }\n    /**\n     * Navigates back in time in a step unit specific to the Calendar's {@link #property-activeView active view}\n     */\n    shiftPrevious() {\n        const { activeItem } = this.viewContainer.layout;\n        if (activeItem?.previous) {\n            activeItem.previous();\n            this.updateViewDescription(activeItem);\n            if (activeItem.animateTimeShift) {\n                DomHelper.slideIn(activeItem.contentElement, -1);\n            }\n        }\n    }\n    /**\n     * Navigates forward in time in a step unit specific to the Calendar's {@link #property-activeView active view}\n     */\n    shiftNext() {\n        const { activeItem } = this.viewContainer.layout;\n        if (activeItem?.next) {\n            activeItem.next();\n            this.updateViewDescription(activeItem);\n            if (activeItem.animateTimeShift) {\n                DomHelper.slideIn(activeItem.contentElement, 1);\n            }\n        }\n    }\n    async onCalendarDateChange({ date, oldDate, userAction }) {\n        const\n            me             = this,\n            { layout }     = me.viewContainer,\n            // If the card layout is changing, use the item it is changing *to*\n            { activeItem } = layout.isChangingCard ? layout.animateDetacher.event : layout,\n            {\n                highlightDate\n            }              = me;\n        // Allow calendar views to opt out of being in sync with Calendar's date\n        if (activeItem && activeItem.syncViewDate !== false && ('date' in activeItem)) {\n            const { getDayElement } = activeItem;\n            // In case triggered from header click the overflow popup for an \"other month\" cell.\n            // Use \"_overflowPopup\" so as not to call it into existence if it's not created.\n            // It might be still the initial config form, so might not have hide()\n            if (!DateHelper.betweenLesser(date, activeItem.startDate, activeItem.endDate)) {\n                activeItem._overflowPopup?.hide?.();\n            }\n            activeItem.date = date;\n            // We must match the active item's date.\n            // If the date change caused a refresh, that will have happened, and this will be a no-op\n            // If the active item already contained the date, this will not have happened.\n            me.date = activeItem.date;\n            // Highlight the date element if the date change was triggered by user interaction\n            // with the date picker. If the date picker was updated from one of the modes\n            // then highlighting will not be expected.\n            if (userAction && highlightDate && getDayElement) {\n                // Some views need to scroll to a date.\n                // Agenda, Month (if constrained size), and CalendarRow\n                if (activeItem.scrollTo) {\n                    await activeItem.scrollTo(date);\n                    // EventList might not contain the exact date. It will scroll to the\n                    // closest date. If it did that, the scrolledToDate property will be set.\n                    if (activeItem.scrolledToDate) {\n                        date = activeItem.scrolledToDate;\n                    }\n                }\n                // The date's element might not exist until after the scroll.\n                const cell = activeItem.getDayElement?.(date);\n                // AgendaView might not have a representation of the date\n                if (cell) {\n                    // Not coercible to a number means its a function or name of a function\n                    if (isNaN(highlightDate)) {\n                        me.callback(highlightDate, me, [cell, me]);\n                    }\n                    // Otherwise, it's truthy or falsy\n                    else {\n                        DomHelper.highlight(Rectangle.from(cell));\n                    }\n                }\n            }\n        }\n        me.syncViewActiveDates(oldDate, date);\n        /**\n         * Fires when the calendar changes the date that it orientates its views around.\n         *\n         * The Calendar tracks which date the user interacts with so that on mode change,\n         * the user is shown the view for the date being interacted with.\n         *\n         * This is updated on any interaction with the UI. Clicking in the\n         * {@link #property-sidebar}'s date picker, clicking on an event, or clicking on a\n         * day cell in any view updates the date which the Calendar is using as its orientating date.\n         * @event dateChange\n         * @param {Calendar.view.Calendar} source This Calendar.\n         * @param {Date} oldDate The previous Calendar date.\n         * @param {Date} date The new Calendar date.\n         */\n        me.trigger('dateChange', { oldDate, date });\n    }\n    updateActiveDateCls(activeDateCls, oldActiveDateCls) {\n        this.syncViewActiveDates(this.date, this.date, oldActiveDateCls);\n    }\n    syncViewActiveDates(oldDate, date = this.date, oldActiveDateCls = this.activeDateCls) {\n        const\n            me                 = this,\n            { activeDateCls }  = me,\n            { contentElement } = me.viewContainer;\n        // Keep all view's active date synced\n        if (oldActiveDateCls) {\n            const oldDateCells = oldDate ? contentElement.querySelectorAll(`[data-date=\"${DateHelper.makeKey(oldDate)}\"],[data-header-date=\"${DateHelper.makeKey(oldDate)}\"]`) : emptyArray;\n            for (let i = 0, { length } = oldDateCells; i < length; i++) {\n                oldDateCells[i].classList.remove(oldActiveDateCls);\n            }\n        }\n        if (activeDateCls) {\n            const newDateCells = contentElement.querySelectorAll(`[data-date=\"${DateHelper.makeKey(date)}\"],[data-header-date=\"${DateHelper.makeKey(date)}\"]`);\n            for (let i = 0, { length } = newDateCells; i < length; i++) {\n                newDateCells[i].classList.add(activeDateCls);\n            }\n        }\n    }\n    updateViewDescription(activeView = this.activeView) {\n        const\n            me = this,\n            { tbar, widgetMap } = me,\n            { viewDescription } = widgetMap,\n            description = `<span class=\"b-calendar-view-desc-text\">${activeView?.description || ''}</span>`;\n        // Allow the Calendar's active mode to be targeted by CSS selectors.\n        // Use the activeView property because the passed view might not be a mode\n        // it might be a child view of a resource view.\n        me.element.dataset.mode = me.activeView.modeName;\n        // Keep the sidebar's concept of date of interest in sync with current activeView\n        if (activeView) {\n            if (tbar && viewDescription) {\n                // Even if tbar is present, our predefined tbar widgets may have been configured away.\n                // Need the change check to avoid adding the changed class upon initialization.\n                // Note that viewDescription?. cannot be used here because the result of\n                // viewDescription?.description, if viewDescription is null will not be ===\n                // description, so it will then attempt to set the content property. And\n                // `viewDescription?.content = description` results in \"invalid assignment left-hand side\" error.\n                if (viewDescription.content !== description) {\n                    viewDescription.content = description;\n                }\n            }\n            const viewDate = activeView.date || activeView.startDate;\n            if (viewDate) {\n                // Reaction to this to change the activeView's date happens in onCalendarDateChange.\n                // updateDate changes the sidebar date if there is a sidebar, else it calls\n                // onCalendarDateChange directly.\n                this.date = viewDate;\n            }\n        }\n    }\n    getStepUnitText(activeView = this.activeView) {\n        // stepUnit is localized by views.\n        // Views must normalize the returned property value for use in\n        // \"Next ${stepUnit}\" button text, eg \"1 day\" to \"day\"\n        return activeView.stepUnit;\n    }\n    syncUIWithActiveView(activeView = this.activeView) {\n        const\n            me                           = this,\n            { tbar, sidebar, widgetMap } = me,\n            { toggleSideBar }            = widgetMap;\n        // tbar may have been configured away\n        if (tbar && activeView?.isVisible) {\n            const\n                {\n                    prevButton,\n                    nextButton,\n                    modeSelector\n                }             = widgetMap,\n                stepUnitText  = me.getStepUnitText(activeView);\n            modeSelector?.syncActiveMode(activeView);\n            if (sidebar) {\n                sidebar.stepUnitText = stepUnitText;\n            }\n            me.updateViewDescription(activeView);\n            // Each view localizes its own stepUnit\n            // Also, any widget may be configured away, so must be truthy.\n            if (prevButton) {\n                prevButton.tooltip = stepUnitText ? me.L('L{previous}', stepUnitText) : '';\n                prevButton.disabled = !stepUnitText;\n            }\n            if (nextButton) {\n                nextButton.tooltip = stepUnitText ? me.L('L{next}', stepUnitText) : '';\n                nextButton.disabled = !stepUnitText;\n            }\n        }\n        if (!sidebar) {\n            toggleSideBar?.hide();\n        }\n    }\n    updateEventStore(eventStore) {\n        this.detachListeners('eventStoreDateRange');\n        // The loadOnDemand feature needs to be initialized as soon as we get our\n        // event store so that it can hook *all* loadDateRange events.\n        this.features.loadOnDemand;\n        // Ensure the listeners are present\n        this.processConfiguredListeners();\n        eventStore.ion({\n            loadDateRange : 'onEventStoreDateRangeRequested',\n            name          : 'eventStoreDateRange',\n            thisObj       : this\n        });\n        // This is all we have to do.\n        // The ProjectConsumer mixin implements a changeEventStore which updates the Project\n        // and our project which we configure into all our views will update any subscribers.\n        if (this.sidebar) {\n            this.sidebar.eventStore = eventStore;\n        }\n    }\n    /**\n     * Executes the passed function for each child calendar view in {@link #config-modes}\n     * @param {Function} fn The function to call.\n     * @param {Object[]} [args] The arguments to pass. Defaults to the view being called.\n     * @param {Object} [thisObj] The `this` reference for the function. Defaults to the view being called.\n     */\n    eachView(fn, args, thisObj = null) {\n        const passView = args == null;\n        for (const view of this.views) {\n            if (passView) {\n                args = [view];\n            }\n            if (view.callback(fn, thisObj || view, args) === false) {\n                return;\n            }\n        }\n    }\n    onEventStoreDateRangeRequested(event) {\n        /**\n         * Fired when the eventStore is queried for events by date range, and the date range\n         * requested is different from the last time the store was queried.\n         *\n         * This may not be triggered when moving to a different view. If a `MonthView` has been\n         * displayed, and the `WeekView` is then shown, the date range is already available.\n         *\n         * When moving a view through time, and into a time range which has not previously been\n         * loaded, this will be triggered.\n         * @event dateRangeChange\n         * @param {Calendar.view.Calendar} source This Calendar instance.\n         * @param {Object} old The old date range\n         * @param {Date} old.startDate the old start date.\n         * @param {Date} old.endDate the old end date.\n         * @param {Object} new The new date range\n         * @param {Date} new.startDate the new start date.\n         * @param {Date} new.endDate the new end date.\n         * @deprecated 6.0 Use {@link #event-dateRangeRequested} instead and interrogate its `changed` property.\n         */\n        if (event.changed) {\n            this.trigger('dateRangeChange', event);\n        }\n        /**\n         * Fired every time the eventStore is queried for events by date range.\n         *\n         * This will always be triggered when changing the active view or when navigating\n         * the calendar backwards or forwards in time.\n         * @event dateRangeRequested\n         * @param {Calendar.view.Calendar} source This Calendar instance.\n         * @param {Object} old The old date range\n         * @param {Date} old.startDate the old start date.\n         * @param {Date} old.endDate the old end date.\n         * @param {Object} new The new date range\n         * @param {Date} new.startDate the new start date.\n         * @param {Date} new.endDate the new end date.\n         * @param {Boolean} changed `true` if the date range is different from the last time a request was made.\n         */\n        this.trigger('dateRangeRequested', event);\n    }\n    async onModeSelectorToggle({ source : button, pressed }) {\n        if (pressed) {\n            const\n                me                = this,\n                { layout    }     = me.viewContainer,\n                { view }          = button;\n            // First await any ongoing mode switching\n            await me.modeSelectionPromise;\n            me.modeSelectionPromise = layout.setActiveItem(view).promise;\n        }\n    }\n    /**\n     * Sets and gets which of the configured {@link #property-modes} is the current active view.\n     *\n     * When read, this yields the string name of the currently active mode.\n     *\n     * When setting, this accepts either the name, or the actual widget instance:\n     *\n     * ```javascript\n     * calendar.mode = 'week';\n     * ```\n     *\n     * or\n     *\n     * ```javascript\n     * calendar.mode = calendar.modes.agenda;\n     * ```\n     * @member {String} mode\n     */\n    updateMode(mode) {\n        const\n            me      = this,\n            configs = me.initialConfig || {};\n        // If the user configured activeIndex or mode, ignore the (one-time) responsiveUpdate of mode\n        if (!(me.isConfiguring || (me._responsiveUpdating && ('mode' in configs || 'activeIndex' in configs)))) {\n            mode = typeof mode === 'string' ? me.modes[mode] : mode;\n            if (mode && mode !== me.activeView) {\n                // Do not animate the mode if we are updating responsive state\n                me.viewContainer.layout.setActiveItem(mode, undefined, {\n                    animation : !me.isResponsiveUpdating\n                });\n            }\n        }\n    }\n    // Handle eventStore load or full datachange.\n    // It will have refreshed all our views, so keep the Calendar UI synced.\n    onEventStoreRefresh() {\n        if (!this.isConfiguring) {\n            this.syncUIWithActiveView(this.viewContainer.layout.activeItem);\n        }\n    }\n    handleViewPaint({ source : view }) {\n        this.syncUIWithActiveView(view);\n        // Keep the property in line with reality.\n        this._mode = view.modeName;\n        /**\n         * Fires when one of the child views is painted. That is when it becomes visible.\n         * Note that due to the slide-in animation, while the view is visible, it will not\n         * yet be in its final position.\n         * @event viewPaint\n         * @param {Core.widget.Widget} source The widget being painted.\n         * @param {Boolean} firstPaint `true` if this is the first paint.\n         */\n        this.trigger('viewPaint', { ...arguments[0] });\n    }\n    onViewRefresh({ source : view }) {\n        super.onViewRefresh?.(...arguments);\n        if (view.isVisible) {\n            // The activeView refreshed\n            if (view === this.activeView) {\n                this.updateViewDescription(view);\n            }\n            // A child view of the current active view refreshed.\n            else if (this.activeView.owns(view)) {\n                this.syncUIWithActiveView(this.activeView);\n            }\n        }\n        this.syncViewActiveDates();\n    }\n    updateEventCls(eventCls) {\n        if (!this.initialConfig.eventInnerSelector) {\n            this.eventInnerSelector = `.${eventCls}`;\n        }\n        if (!this.initialConfig.eventSelector) {\n            this.eventSelector = `${this.eventInnerSelector}-wrap`;\n        }\n    }\n    changeModes(modes, was) {\n        const\n            me        = this,\n            modeArray = [];\n        // This will bring in any configured CrudManager which will give us our stores.\n        me.getConfig('crudManager');\n        me.getConfig('defaultCalendar');\n        // Sort the modes into weight order if there are weights configured\n        let modeConfig;\n        for (const modeType in modes) {\n            modeConfig = modes[modeType];\n            if (modeConfig) {\n                modeArray.push(ObjectHelper.assign({\n                    modeType,\n                    weight : modeConfig.weight ?? 0\n                }, modeConfig));\n            }\n        }\n        // Weights found, so sort and rebuild of modes object in requested order needed\n        if (modeArray.some(hasWeight)) {\n            modes = {};\n            modeArray.sort(byWeight);\n            for (let i = 0, { length } = modeArray; i < length; i++) {\n                modeConfig = modeArray[i];\n                modes[modeConfig.modeType] = modeConfig;\n            }\n        }\n        const\n            { tbar, element } = me,\n            listeners = {\n                thisObj : me,\n                // When a mode has an internal change that requires the description shown in the tbar to be refreshed\n                descriptionChange : 'onViewDescriptionChange',\n                // These are for implementing drilling from higher to lower level views\n                weekNumberClick : 'onViewWeekNumberClick',\n                monthNameClick  : 'onViewMonthNameClick',\n                dayNumberClick  : 'onViewDayNumberClick',\n                // Handle a double click gesture inside a scheduler child mode\n                beforeEventAdd : 'onViewBeforeEventAdd',\n                // This is how the Calendar relays events from modes to the outside world\n                // The Calendar listeners get first look at the events so that app code gets\n                // a chance to intervene early.\n                catchAll : {\n                    fn   : 'onViewCatchAll',\n                    prio : 10000\n                },\n                paint   : 'handleViewPaint',\n                refresh : 'onViewRefresh'\n            },\n            manager = me.$modes || (me.$modes = new DynamicObject({\n                factory   : Modes,\n                inferType : true,  // the name of a mode is its default type (allow its config object to override it)\n                owner     : me,\n                // All instances have this.calendar pointing to this\n                ownerName : 'calendar',\n                created(mode, name) {\n                    // Each one must know what mode it represents\n                    mode.modeName = name;\n                    // Attach our eventEdit feature to Schedulers\n                    if (mode.isScheduler) {\n                        const { eventEdit } = me.features;\n                        if (eventEdit) {\n                            eventEdit.applyPluginConfig(mode);\n                            mode.editEvent = me.editEvent.bind(me);\n                        }\n                    }\n                    // Allows selection by what views are present\n                    element.classList.add(`b-cal-${name}`);\n                    // We need to sync our UI when the view changes.\n                    mode.ion(listeners);\n                    // Give app code a shot at affecting the propagate end date for DayCellCollecters\n                    me.relayEvents(mode, ['eventPropagate']);\n                    if (!me.isConfiguring) {\n                        me.trigger('addMode', { mode });\n                    }\n                    // Allow tbar to be configured away.\n                    // Note that tbar may be configured away using tbar : null, so tbar?.widgetMap.modeSelector\n                    // won't work since it will interrogate the widgetMap of null in that case,\n                    const modeSelector = tbar?.widgetMap?.modeSelector;\n                    if (modeSelector) {\n                        modeSelector.calendar = me;  // in case the up() traversal is needed too early\n                        modeSelector.addMode(name, mode);\n                    }\n                },\n                setup(config) {\n                    const\n                        { defaultCalendar, modeDefaults } = me,\n                        viewType = Modes.resolveType(config.type);\n                    if (modeDefaults) {\n                        config = ObjectHelper.merge({}, modeDefaults, config);\n                    }\n                    // Inhibit Scheduler features which our features override.\n                    if (viewType.isScheduler) {\n                        const features = config.features || (config.features = {});\n                        features.eventTooltip =\n                            features.eventMenu =\n                            features.eventEdit =\n                            features.scheduleMenu = false;\n                    }\n                    else {\n                        config.eventSelector = me.eventSelector;\n                        config.eventInnerSelector = me.eventInnerSelector;\n                    }\n                    config.rtl = me.rtl;\n                    config.project = me.project;\n                    config.readOnly = me.readOnly;\n                    config.allowOverlap = me.allowOverlap;\n                    config.hidden = true;\n                    config.weekStartDay = me.weekStartDay;\n                    config.nonWorkingDays = me.nonWorkingDays;\n                    config.timeZone = me.timeZone;\n                    // Only inject into the child view if our config overrode the default\n                    if ('autoCreate' in me.initialConfig) {\n                        config.autoCreate = me.autoCreate;\n                    }\n                    if (ObjectHelper.hasOwn(me, '_defaultCalendar')) {\n                        config.defaultCalendar = me._defaultCalendar;\n                    }\n                    else if (defaultCalendar != null) {\n                        config.defaultCalendar = defaultCalendar;\n                    }\n                    // Copy in configs which are propagated from the calendar into child views.\n                    // This does *not* override any existing configs.\n                    ObjectHelper.copyPropertiesIf(config, me, propagatedConfigs);\n                    return config;\n                }\n            }));\n        manager.update(modes);\n        if (!was) {\n            // Only return the target once. Further calls are processed above so we need to return undefined to ensure\n            // onConfigChange is called. By returning the same target on 2nd+ call, it passes the === test and won't\n            // trigger onConfigChange.\n            return manager.target;\n        }\n    }\n    changeModeDefaults(modeDefaults) {\n        const\n            me     = this,\n            result = new Proxy(ObjectHelper.assign({}, modeDefaults), {\n                set(target, prop, value) {\n                    const result = Reflect.set(...arguments);\n                    // Pass new property setting in to child views\n                    me.updateModeDefaults({\n                        [prop] : value\n                    });\n                    return result;\n                },\n                deleteProperty(target, prop) {\n                    const result = Reflect.deleteProperty(...arguments);\n                    // Pass new property setting in to child views\n                    me.updateModeDefaults({\n                        [prop] : null\n                    });\n                    return result;\n                }\n            });\n        return result;\n    }\n    updateModeDefaults(modeDefaults) {\n        if (!this.isConfiguring) {\n            this.eachView(v => v.setConfig(modeDefaults));\n        }\n    }\n    get collapsibleConfig() {\n        const\n            overlaySidebar = this.peekConfig('overlaySidebar'),\n            config = {\n                type : overlaySidebar ? 'overlay' : 'inline',\n                tool : null\n            };\n        if (overlaySidebar) {\n            config.recollapseTool = null;\n        }\n        return config;\n    }\n    updateOverlaySidebar(overlaySidebar) {\n        const\n            { sidebar, collapsibleConfig } = this,\n            collapsible = sidebar?.collapsible;\n        if (collapsible) {\n            if (collapsible.type !== collapsibleConfig.type) {\n                sidebar.collapsible = collapsibleConfig;\n            }\n            if (overlaySidebar) {\n                if (!sidebar.collapsed) {\n                    sidebar.collapsed = true;\n                    sidebar.collapsedDueToOverlay = true;\n                }\n            }\n            // If moving back to inline sidebar, then if it was\n            // collapsed only due to being made overlayed, or it's been overlayed into visibility at this time\n            // then expand it again.\n            else if (sidebar.collapsedDueToOverlay || (sidebar.isVisible && collapsible.isPanelCollapserOverlay)) {\n                sidebar.collapsed = false;\n                sidebar.collapsedDueToOverlay = false;\n            }\n        }\n    }\n    changeSidebar(config, sidebar) {\n        const\n            me                                   = this,\n            { datePicker, statefulId : stateId } = me;\n        if (config) {\n            const\n                sidebarItems      = config.items || (config.items = {}),\n                sidebarDatePicker = sidebarItems.datePicker;\n            // If the developer nulled out the datePicker in her sidebar config\n            // we cannot impose our default datePicker.\n            if (datePicker) {\n                if (sidebarDatePicker !== null && sidebarDatePicker !== false) {\n                    sidebarItems.datePicker = Calendar.mergeConfigs(sidebarItems.datePicker, datePicker);\n                }\n            }\n            else {\n                sidebarItems.datePicker = null;\n            }\n        }\n        return Sidebar.reconfigure(sidebar, config, {\n            owner : me,\n            setup : (cfg, type) => me.setupWidgetConfig(cfg, type),\n            // These are combined with \"config\" prior to calling our setup() above (so they are part of the \"cfg\"\n            // parameter passed to setup():\n            defaults : {\n                stateId     : stateId && `${stateId}:sidebar`,\n                eventStore  : me.eventStore,\n                date        : me.date,\n                weight      : config?.side === 'right' ? 10 : -10,\n                collapsible : me.collapsibleConfig,\n                items       : {\n                    datePicker : {\n                        weekStartDay : me.weekStartDay\n                    }\n                }\n            }\n        });\n    }\n    changeDatePicker(config) {\n        if (config) {\n            return Object.assign(config, {\n                eventStore : this.eventStore,\n                date       : this.date\n            });\n        }\n    }\n    /**\n     * The {@link #config-datePicker} as an instance of {@link Calendar.widget.CalendarDatePicker}.\n     * @member {Calendar.widget.CalendarDatePicker} datePicker\n     * @readonly\n     */\n    get datePicker() {\n        return this.isConfiguring ? this._datePicker : this.sidebar?.widgetMap?.datePicker;\n    }\n    changeItems(items) {\n        const { modes, sidebar } = this;\n        // Add our sidebar if it was not configured away.\n        if (sidebar) {\n            items.sidebar = sidebar;\n        }\n        // Add the configured viewContainer to our items\n        items.viewContainer = this.viewContainer;\n        // Add our modes.\n        items.viewContainer.items = modes;\n        items.viewContainer.activeIndex = Math.max(Object.keys(modes).indexOf(this.mode), 0);\n        // Set the viewContainer layout's activeIndex to the requested mode's index\n        if (this.activeModeIndex) {\n            items.viewContainer.layout.activeIndex = this.activeModeIndex;\n        }\n        const result = super.changeItems(items);\n        /**\n         * @member {Core.widget.Container} viewContainer\n         * A {@link Core.widget.Container} which contains the configured {@link #config-modes} and\n         * manages the currently active mode through its {@link Core.widget.Container#property-layout}.\n         * @readonly\n         */\n        this._viewContainer = this.widgetMap.viewContainer;\n        return result;\n    }\n    onViewCatchAll(event) {\n        const\n            me = this,\n            {\n                fromOverflowPopup,\n                type,\n                source : view\n            }  = event;\n        // Reject events which have bubbled up from other things than our views (MenuItem events bubble).\n        // We are only forwarding events from our owned Calendar widgets.\n        if (event.bubbles) {\n            return;\n        }\n        let result, date, { domEvent } = event;\n        // If the event was from another type of view, such as a Scheduler, they pass\n        // DOM events as \"event\", so use that.\n        if (!domEvent && DomHelper.isDOMEvent(event.event)) {\n            domEvent = event.event;\n        }\n        /**\n         * When a child calendar view is being interacted with, this property\n         * yields a reference to the child being interacted with.\n         * @member {Calendar.widget.mixin.CalendarMixin} eventSource\n         * @typings {typeof CalendarMixin}\n         * @readonly\n         */\n        me.eventSource = view;\n        // Implement the interface which the inherited Feature structure requires.\n        // Features hook into client element event handling methods\n        if (!domEvent || me.handleEvent(domEvent) !== false) {\n            const\n                isEmptyCell = type.startsWith('emptycell'),\n                // For EventLists, when we are using a startDate->endDate range as opposed to a fixed\n                // range, the dates are *inclusive*, so pick the correct date containment function.\n                dateContainmentFn = view.isEventList && !view.range ? 'betweenLesserEqual' : 'betweenLesser';\n            // Only change date when click originates from a calendar view (not an embedded scheduler for example)\n            if (type.endsWith('click') && me.activeView.isCalendarMixin && (date = (event.date || view.getDateFromDomEvent?.(domEvent)))) {\n                // If it's a DayView, it could be a shifted day, so move it back to the day start.\n                // If the day starts at 18:00, and the click is on 2020-06-17T06:00, the date must\n                // be 2020-06-16T18:00 so that the Calendar's date is stable.\n                if (view.isDayView && view.dayTime) {\n                    date = view.dayTime.startOfDay(date);\n                }\n                const\n                    isOverflowClick = fromOverflowPopup || type === 'celloverflowclick' || domEvent.target.closest('.b-cal-cell-overflow'),\n                    isOtherMonth = (view.getDayElement && !view.getDayElement(date, true)) || (view.isDateRangeOwner && !DateHelper[dateContainmentFn](date, view.startDate, view.endDate)),\n                    // Only move onto the clicked date if it's explicitly a dayNumber Click.\n                    // Any other kind of click must not change date. Mats, 07/07/2022\n                    changeDate   = view.isCalendarRow || !(fromOverflowPopup && isOtherMonth) && !isEmptyCell && !(view.isDateRangeOwner && isOtherMonth) && (type === 'daynumberclick' || !(isOtherMonth && (isOverflowClick || type.startsWith('event') || type.startsWith('schedule'))));\n                // Set our date to the event date if we contain it.\n                // If the above fell back to startDate, and it starts before the\n                // view start, this must not happen.\n                // Note that custom model may not implement getDayElement.\n                if (changeDate) {\n                    me.date = date;\n                }\n            }\n            if (isEmptyCell || relayedEvents.test(type)) {\n                event.view = view;\n                result = me.trigger(event.eventName, event);\n            }\n        }\n        me.eventSource = null;\n        return result;\n    }\n    // A mode had an internal change that requires updating the description shown in the tbar\n    onViewDescriptionChange() {\n        this.updateViewDescription();\n    }\n    // Implement drilling down from a MonthView week number click to a WeekView\n    // or a child view which encapsulates WeekViews via its view.type config.\n    onViewWeekNumberClick({ week }) {\n        const weekView = this.modes.week || this.viewContainer.query(v => v.view?.type.toLowerCase() === 'weekview');\n        if (weekView) {\n            weekView.week = week;\n            this.viewContainer.layout.activeItem = weekView;\n        }\n    }\n    // Implement drilling down from a YearView month name click to the MonthView\n    // or a child view which encapsulates MonthViews via its view.type config.\n    onViewMonthNameClick({ date }) {\n        const monthView = this.modes.month || this.viewContainer.query(v => v.view?.type.toLowerCase() === 'monthview');\n        if (monthView) {\n            monthView.date = date;\n            this.viewContainer.layout.activeItem = monthView;\n        }\n    }\n    // Implement drilling down from a DayView's header day number click to the DayView\n    // or a child view which encapsulates DayViews via its view.type config.\n    onViewDayNumberClick({ source, date, cellData, fromOverflowPopup, domEvent }) {\n        // For a year view, we are clear to go ahead and navigate to the day on click if the overflow popup\n        // trigger is not click, or if the overflow popup has been configured away or if there are no\n        // events for the date and there's no empty cell renderer which would show some UI about there\n        // being no events. Or if the click was on an overflow popup header.\n        const validYearViewNavigate = source.isYearView &&\n            (source.overflowPopupTrigger !== 'click' || fromOverflowPopup || !source.overflowPopup || cellData.isOtherMonth || (!cellData.events?.length && !source.emptyCellRenderer));\n        if (source.isCalendarRow || source.isMonthView || validYearViewNavigate || source.isAgendaView) {\n            const\n                { viewContainer } = this,\n                dayView           = this.modes.day || viewContainer.query(v => v.view?.type.toLowerCase() === 'dayview');\n            if (dayView && source !== dayView.allDayEvents) {\n                const\n                    { layout }                     = viewContainer,\n                    { activeItem : oldActiveItem } = layout,\n                    { syncViewDate }               = oldActiveItem;\n                // Don't sync the outgoing item with our date.\n                // It will be synced on its way back in next time.\n                oldActiveItem.syncViewDate = false;\n                // Must update our date before we attempt the card change because\n                // *before* changing card, the incoming card gets its date set.\n                // See onBeforeModeChange. New card must be synced with us from the start.\n                this.date = date;\n                viewContainer.layout.activeItem = dayView;\n                // Restore the outgoing item so that when it comes back in\n                // onBeforeModeChange will sync it.\n                oldActiveItem.syncViewDate = syncViewDate;\n                return false;\n            }\n        }\n    }\n    onViewBeforeEventAdd({ eventRecord, assignmentRecords }) {\n        const\n            { eventEdit } = this.features,\n            isCreating    = eventEdit && !eventEdit.disabled;\n        // If double clicking in a Scheduler child view, it has its eventEdit feature off, so help it know that\n        // the created records are being edited\n        eventRecord.isCreating = isCreating;\n        assignmentRecords?.forEach(assignmentRecord => assignmentRecord.isCreating = isCreating);\n    }\n    /**\n     * Uses the current active mode to create an event on the specified date which conforms to that mode's\n     * {@link Calendar.widget.mixin.CalendarMixin#config-autoCreate} setting.\n     *\n     * This method may be called programmatically by application code if the `autoCreate` setting\n     * is `false`, in which case the default values for `autoCreate` will be used.\n     *\n     * If the {@link Calendar.feature.EventEdit EventEdit} feature is active, the new event\n     * will be displayed in the event editor.\n     *\n     * This is a utility method to use as a shortcut to {@link Calendar.widget.mixin.CalendarMixin#function-createEvent}\n     * @param {Date} [date] Optionally, the date to add the event at. Uses the Calendar's currently\n     * active date, as set in the {@link #config-sidebar}'s date picker.\n     *\n     * If there's no time component, and the current active mode is a calendar view, the\n     * {@link Calendar.widget.mixin.CalendarMixin#config-autoCreate}'s `startHour` will be used.\n     */\n    createEvent(date = this.date, resourceRecord) {\n        this.doCreateEvent(date, resourceRecord);\n    }\n    // This is separate because its signature is fixed. Second parameter is an optional view to use\n    // to do the creating. The createEvent method may be called by Features which pass extra parameters.\n    doCreateEvent(date, resourceRecord, source = this.activeView) {\n        const\n            { modes }   = this,\n            // Yearview defers to other views present in its owning calendar to handle auto creating\n            // events. This method finds a suitable host view to postprocess the creation.\n            editingView = source.isYearView ? modes.week || modes.month || modes.day || source : source;\n        // Ensure the view which is going to postprocess the new event (such as editing it) is active\n        if (!this.activeView.owns(editingView)) {\n            const\n                { viewContainer } = this.widgetMap,\n                { layout }        = viewContainer;\n            if (editingView) {\n                // activeItemChange fires after the animation, so it will be fully ready.\n                viewContainer.ion({\n                    activeItemChange : 'doCreateEvent',\n                    thisObj          : source,\n                    once             : true,\n                    args             : [date, resourceRecord, editingView]\n                });\n                this.date = date;\n                layout.activeItem = editingView;\n                return false;\n            }\n        }\n        else {\n            // Calendar vs Scheduler\n            source.doCreateEvent ? source.doCreateEvent(date, resourceRecord) : source.createEvent(date, resourceRecord);\n        }\n    }\n    changeDate(date, oldDate) {\n        date = typeof date === 'string' ? DateHelper.parse(date) : new Date(date);\n        if (isNaN(date)) {\n            throw new Error('Calendar widget date ingestion must be passed a Date, or a YYYY-MM-DD date string');\n        }\n        date = DateHelper.clearTime(date);\n        // Protect the setter from processing a no-change.\n        if (!oldDate || (date - oldDate)) {\n            return date;\n        }\n    }\n    updateAutoCreate() {\n        if (!this.isConfiguring) {\n            this.syncCommonConfig('autoCreate');\n        }\n    }\n    updateDate(date, oldDate) {\n        if (!this.isConfiguring) {\n            const { sidebar } = this;\n            if (sidebar) {\n                // The sidebar's datechange event is listened by onCalendarDateChange\n                sidebar.date = date;\n            }\n            else {\n                this.onCalendarDateChange({ date, oldDate });\n            }\n        }\n    }\n    updateDateFormat() {\n        if (!this.isConfiguring) {\n            this.syncCommonConfig('dateFormat');\n        }\n    }\n    changeIncludeWeekendsButton(value) {\n        return (value === true) ? {} : value;\n    }\n    updateIncludeWeekendsButton(value) {\n        // we don't pass null/false down because we only want to configure the button not destroy it\n        if (!this.isConstructing && value && ObjectHelper.isObject(value)) {\n            this.widgetMap.modeSelector.includeWeekendsButton = value;\n        }\n    }\n    changeScrollManager(scrollManager, oldScrollManager) {\n        oldScrollManager?.destroy();\n        if (this.isDestroying) {\n            return;\n        }\n        return new ScrollManager(Object.assign({\n            element : this.element\n        }, scrollManager));\n    }\n    updateDefaultCalendar() {\n        if (!this.isConfiguring) {\n            this.syncCommonConfig('defaultCalendar');\n        }\n    }\n    changeWeekStartDay(weekStartDay) {\n        // Apply the default from DateHelper which draws its value from the locale.\n        if (weekStartDay === false) {\n            weekStartDay = DateHelper.weekStartDay;\n        }\n        return weekStartDay;\n    }\n    updateReadOnly() {\n        super.updateReadOnly(...arguments);\n        if (!this.isConfiguring) {\n            this.syncCommonConfig('readOnly');\n        }\n    }\n    updateWeekStartDay(weekStartDay) {\n        if (!this.isConfiguring) {\n            this.syncCommonConfig('weekStartDay');\n            if (this.sidebar?.widgetMap.datePicker) {\n                this.sidebar.widgetMap.datePicker.weekStartDay = weekStartDay;\n            }\n        }\n    }\n    changeHideNonWorkingDays(hideNonWorkingDays) {\n        // Falsy must be coerced to false so that non-changes do not propagate\n        return Boolean(hideNonWorkingDays);\n    }\n    updateHideNonWorkingDays(hideNonWorkingDays, was) {\n        if (!this.isConfiguring) {\n            this.syncCommonConfig('hideNonWorkingDays');\n            this.trigger('changeHideNonWorkingDays', {\n                value : hideNonWorkingDays,\n                was\n            });\n        }\n    }\n    changeNonWorkingDays(nonWorkingDays) {\n        // Apply the default from DateHelper which draws its value from the locale.\n        if (nonWorkingDays === false) {\n            nonWorkingDays = ObjectHelper.assign({}, DateHelper.nonWorkingDays);\n        }\n        return nonWorkingDays;\n    }\n    updateNonWorkingDays() {\n        if (!this.isConfiguring) {\n            this.syncCommonConfig('nonWorkingDays');\n        }\n    }\n    updateCoreHours() {\n        if (!this.isConfiguring) {\n            this.syncCommonConfig('coreHours');\n        }\n    }\n    /**\n     * Syncs configs which are passed down into child views when changed here.\n     * @param {String} name The name of teh config to pass from this Calendar into every child view\n     * @private\n     */\n    syncCommonConfig(name) {\n        this.eachView(v => {\n            v[name] = this[name];\n        });\n    }\n    onCalendarStoreChange() {\n        // Keep mixins informed.\n        super.onCalendarStoreChange?.(...arguments);\n    }\n    updateSelected() {\n        const eventEls = this.viewContainer.contentElement.querySelectorAll('.b-cal-event-wrap');\n        for (let i = 0, { length } = eventEls; i < length; i++) {\n            eventEls[i].classList.toggle(this.eventSelectedCls, this.isEventSelected(eventEls[i].dataset.eventId));\n        }\n    }\n    getElementFromEventRecord(eventRecord, resourceRecord) {\n        return this.activeView.getEventElement(eventRecord, null, resourceRecord);\n    }\n    getElementsFromEventRecord(eventRecord, resourceRecord) {\n        return [this.getElementFromEventRecord(eventRecord, resourceRecord)];\n    }\n    updateLocalization() {\n        const me = this;\n        if (me.isPainted) {\n            let refreshed = false;\n            // Only go with locale's weekStartDay if we were not initially configured with a weekStartDay\n            if (!('weekStartDay' in me.initialConfig) && me.weekStartDay !== DateHelper.weekStartDay) {\n                me.weekStartDay = DateHelper.weekStartDay;\n                // weekStartDay change will cause a refresh\n                refreshed = true;\n            }\n            // Only go with locale's nonWorkingDays if we were not initially configured with nonWorkingDays\n            if (!('nonWorkingDays' in me.initialConfig) && !ObjectHelper.isEqual(me.nonWorkingDays, DateHelper.nonWorkingDays)) {\n                me.nonWorkingDays = DateHelper.nonWorkingDays;\n                // nonWorkingDays change will cause a refresh\n                refreshed = true;\n            }\n            if (!refreshed) {\n                me.refresh();\n            }\n            me.syncUIWithActiveView();\n        }\n        super.updateLocalization();\n    }\n}\nCalendar.initClass();\n// Views which we import may need to access Calendar at runtime. They do it through the bryntum global.\nif (globalThis.bryntum) {\n    globalThis.bryntum.Calendar = Calendar;\n}\nclass Modes extends Base.mixin(Factoryable) {\n    static get factoryable() {\n        return {\n            // Allow any widget type:\n            extends : Widget\n        };\n    }\n}\nModes.register('agenda', AgendaView);\nModes.register('year', YearView);\nModes.register('month', MonthView);\nModes.register('week', WeekView);\nModes.register('day', DayView);\nModes.register('list', EventList);\nModes.register('resource', ResourceView);\nModes.register('dayresource', DayResourceView);\nCalendar.Modes = Modes;\nVersionHelper.setVersion('calendar', '5.6.2');\nCalendar._$name = 'Calendar';", "// column\nexport { default as AgendaColumn } from '../lib/Calendar/column/AgendaColumn.js';\nexport { default as EventColumn } from '../lib/Calendar/column/EventColumn.js';\n// data\nexport { default as CrudManager } from '../lib/Calendar/data/CrudManager.js';\nexport { default as TimeRangeStore } from '../lib/Calendar/data/TimeRangeStore.js';\n// feature\nexport { default as CalendarDrag } from '../lib/Calendar/feature/CalendarDrag.js';\nexport { default as CalendarFeature } from '../lib/Calendar/feature/CalendarFeature.js';\nexport { default as EventEdit } from '../lib/Calendar/feature/EventEdit.js';\nexport { default as EventMenu } from '../lib/Calendar/feature/EventMenu.js';\nexport { default as EventTooltip } from '../lib/Calendar/feature/EventTooltip.js';\nexport { default as ExternalEventSource } from '../lib/Calendar/feature/ExternalEventSource.js';\nexport { default as LoadOnDemand } from '../lib/Calendar/feature/LoadOnDemand.js';\nexport { default as Print } from '../lib/Calendar/feature/print/Print.js';\nexport { default as ScheduleMenu } from '../lib/Calendar/feature/ScheduleMenu.js';\nexport { default as TimeRanges } from '../lib/Calendar/feature/TimeRanges.js';\nexport { default as WeekExpander } from '../lib/Calendar/feature/WeekExpander.js';\n// layout\nexport { default as LayoutDim } from '../lib/Calendar/layout/LayoutDim.js';\nexport { default as DayLayout } from '../lib/Calendar/layout/day/DayLayout.js';\nexport { default as FluidDayLayout } from '../lib/Calendar/layout/day/FluidDayLayout.js';\n// mixin\nexport { default as CalendarStores } from '../lib/Calendar/mixin/CalendarStores.js';\n// model\nexport { default as ProjectModel } from '../lib/Calendar/model/ProjectModel.js';\nexport { default as TimeRangeModel } from '../lib/Calendar/model/TimeRangeModel.js';\n// util\nexport { default as EventSlots } from '../lib/Calendar/util/EventSlots.js';\nexport { default as EventSorter } from '../lib/Calendar/util/EventSorter.js';\n// widget\nexport { default as AgendaView } from '../lib/Calendar/widget/AgendaView.js';\nexport { default as CalendarDatePicker } from '../lib/Calendar/widget/CalendarDatePicker.js';\nexport { default as CalendarRow } from '../lib/Calendar/widget/CalendarRow.js';\nexport { default as DaySelector } from '../lib/Calendar/widget/DaySelector.js';\nexport { default as DayView } from '../lib/Calendar/widget/DayView.js';\nexport { default as DayResourceCalendarRow } from '../lib/Calendar/widget/DayResourceCalendarRow.js';\nexport { default as DayResourceView } from '../lib/Calendar/widget/DayResourceView.js';\nexport { default as EventEditor } from '../lib/Calendar/widget/EventEditor.js';\nexport { default as EventList } from '../lib/Calendar/widget/EventList.js';\nexport { default as EventTip } from '../lib/Calendar/widget/EventTip.js';\nexport { default as ModeSelector } from '../lib/Calendar/widget/ModeSelector.js';\nexport { default as MonthView } from '../lib/Calendar/widget/MonthView.js';\nexport { default as OverflowPopup } from '../lib/Calendar/widget/OverflowPopup.js';\nexport { default as ResourceView } from '../lib/Calendar/widget/ResourceView.js';\nexport { default as Sidebar } from '../lib/Calendar/widget/Sidebar.js';\nexport { default as WeekView } from '../lib/Calendar/widget/WeekView.js';\nexport { default as YearView } from '../lib/Calendar/widget/YearView.js';\n// widget mixin\nexport { default as CalendarMixin } from '../lib/Calendar/widget/mixin/CalendarMixin.js';\nexport { default as DateRangeOwner } from '../lib/Calendar/widget/mixin/DateRangeOwner.js';\nexport { default as DayCellCollecter } from '../lib/Calendar/widget/mixin/DayCellCollecter.js';\nexport { default as DayCellRenderer } from '../lib/Calendar/widget/mixin/DayCellRenderer.js';\nexport { default as EventRenderer } from '../lib/Calendar/widget/mixin/EventRenderer.js';\nexport { default as DaySelectable } from '../lib/Calendar/widget/mixin/DaySelectable.js';\n// view mixin\nexport { default as EventNavigation } from '../lib/Calendar/view/mixin/EventNavigation.js';\nexport { default as EventSelection } from '../lib/Calendar/view/mixin/EventSelection.js';\n// view\nexport { default as Calendar } from '../lib/Calendar/view/Calendar.js';\n\n\nimport GlobalEvents from '../lib/Core/GlobalEvents.js';\nimport BrowserHelper from '../lib/Core/helper/BrowserHelper.js';\nimport VersionHelper from '../lib/Core/helper/VersionHelper.js';\nimport Widget from '../lib/Core/widget/Widget.js';\nimport Toast from '../lib/Core/widget/Toast.js';\nimport Override from '../lib/Core/mixin/Override.js';\nimport DomHelper from '../lib/Core/helper/DomHelper.js';\nimport Calendar from '../lib/Calendar/view/Calendar.js';\n(() => {\n    //region Common\n    const\n        HOSTS            = [\n            'bryntum.com',\n            'cdpn.io',\n            'react-gantt.com',\n            'vue-gantt.com',\n            'vue-scheduler.com',\n            'react-scheduler.com',\n            'angular-scheduler.com',\n            'angular-calendar.com',\n            'vue-calendar.com',\n            'react-calendar.com',\n            'lmctfy.net',\n            'bryntum-dev-ed.develop.lightning.force.com'\n        ],\n        ONE_DAY          = 1000 * 60 * 60 * 24,\n        EXPIRING_CLASSES = [],\n        location = (globalThis || self).location;\n    if (!VersionHelper.isTestEnv && (HOSTS.some(host => location.host.includes(host)) || /\\/docs/.test(location.href))) {\n        return;\n    }\n    let initialized;\n    function initExpiryHelper(owner, baseClass) {\n        if (!initialized) {\n            initialized = true;\n            ExpiryHelper.construct({\n                widget : owner\n            });\n        }\n        // do not remove this line (used to distinguish trial bundles by regexp)\n        owner.__foo = 'THISISTRIAL';\n    }\n    //endregion\n    //region ExpiryHelper\n    class ExpiryHelper {\n        static construct(config) {\n            const\n                me            = this,\n                product       = 'taskboard',\n                productName   = 'TaskBoard',\n                version       = VersionHelper.getVersion(product),\n                callHomeDelay = VersionHelper.isTestEnv ? 3000 : 1000 * 60,\n                blockUrl      = BrowserHelper.queryString.blockUrl;\n            Object.assign(me, {\n                version,\n                product,\n                Product          : productName,\n                verifyUrl        : VersionHelper.isTestEnv ? blockUrl : 'https://bryntum.com/verify/',\n                blocked          : false,\n                lastVersionCheck : 0,\n                trialKey         : `b-${product}-trial-start`,\n                versionCheckKey  : `b-${product}-verify-date`\n            }, config);\n            if (!VersionHelper.isTestEnv) {\n                console.log(`Bryntum ${productName} Trial Version`);\n            }\n            me.cacheTrialStartTime();\n            if (me.isExpired) {\n                if (document.readyState === 'complete') {\n                    me.onTrialExpired();\n                }\n                else {\n                    document.addEventListener('readystatechange', () => {\n                        if (document.readyState === 'complete') {\n                            me.onTrialExpired();\n                        }\n                    });\n                }\n            }\n            // Call home to log trial usage, assuming localStorage access works reliably\n            // 1 min delay to be less easily detected\n            setTimeout(() => {\n                me.updateBlockedStatus();\n            }, callHomeDelay);\n        }\n        static cacheTrialStartTime() {\n            const\n                me         = this,\n                timeString = BrowserHelper.getLocalStorageItem(me.trialKey),\n                time       = Number(timeString);\n            if (time && !isNaN(time)) {\n                me.trialStartTime = time;\n            }\n            me.trialStartTime = me.trialStartTime || Date.now();\n            // First trial access, or no localstorage (no local storage meaning our expiration mechanism won't work. Only remote blocking will end the trial)\n            BrowserHelper.setLocalStorageItem(me.trialKey, me.trialStartTime);\n        }\n        static get isExpired() {\n            return this.blocked || (Date.now() - this.trialStartTime > ONE_DAY * 45) || window.bryntum?.[this.product]?.expired;\n        }\n        static updateBlockedStatus() {\n            const\n                me                  = this,\n                saveVersionCheckKey = () => BrowserHelper.setLocalStorageItem(me.versionCheckKey, Date.now());\n            me.lastVersionCheck = me.lastVersionCheck || BrowserHelper.getLocalStorageItem(me.versionCheckKey) || 0;\n            // Max 1 version check per session / day\n            if (me.lastVersionCheck && Date.now() - me.lastVersionCheck < ONE_DAY) {\n                return;\n            }\n            if (me.verifyUrl) {\n                const\n                    url    = encodeURIComponent(location.href),\n                    logUrl = `${me.verifyUrl}?id=${window.bryntum.license}&url=${url}`,\n                    img    = new Image();\n                img.onload = () => {\n                    // 2x2 image means trial is blocked due to violation\n                    if (img.naturalWidth === 2) {\n                        me.blockTrial();\n                    }\n                    else {\n                        // Just in case\n                        saveVersionCheckKey();\n                    }\n                };\n                img.onerror = () => {\n                    saveVersionCheckKey();\n                };\n                img.src = logUrl;\n            }\n            else {\n                saveVersionCheckKey();\n            }\n        }\n        static onTrialExpired() {\n            const rootEl = this.widget.rootElement;\n            if (!this.expirationShown) {\n                this.expirationShown = true;\n                if (!VersionHelper.isTestEnv) {\n                    console.warn(`Bryntum ${this.Product} trial version expired. Purchase a license at https://bryntum.com/store or contact us at https://bryntum.com/contact/ for licensing options.`);\n                }\n                rootEl.floatRoot && Toast.show({\n                    html        : `Psst! Your Bryntum ${this.Product} trial has expired. Please see <a href=\"https://bryntum.com/store\">our store</a> for licensing options`,\n                    timeout     : 20000,\n                    rootElement : rootEl\n                });\n            }\n            DomHelper.removeEachSelector(rootEl, '.b-sch-dependency');\n            DomHelper.forEachSelector(rootEl, '.b-container', element => {\n                const widget = Widget.fromElement(element, 'widget');\n                if (EXPIRING_CLASSES.some(cls => widget instanceof cls)) {\n                    this.maskExpiredWidget(widget);\n                }\n            });\n        }\n        static blockTrial() {\n            this.blocked = true;\n            // Get rid of version check timestamp\n            BrowserHelper.removeLocalStorageItem(this.versionCheckKey);\n            // To force expired state: Set a fake early trial timestamp\n            BrowserHelper.setLocalStorageItem(this.trialKey, 1);\n            this.onTrialExpired();\n        }\n        static maskExpiredWidget(widget) {\n            widget.mask({\n                text  : '<h3 style=\"margin:0\">Trial expired, <a href=\"https://bryntum.com/store\" style=\"margin:0 3px; color:inherit\">click here</a> to buy a license.</h3>',\n                icon  : 'b-fa b-fa-frown',\n                type  : 'trial',\n                cover : 'target'\n            });\n        }\n        static setWaterMark(element, {\n            darkColor = 'rgba(255, 255, 255, 0.03)',\n            lightColor = 'rgba(240, 240, 240, 0.54)'\n        } = {}) {\n            // Used for thumbnails\n            if (BrowserHelper.queryString.thumb != null) {\n                return;\n            }\n            const\n                color     = DomHelper.themeInfo?.name?.toLowerCase().endsWith('-dark') ? darkColor : lightColor,\n                svgString = `\n                   <svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"100%\" height=\"100%\" style=\"font-family:sans-serif;font-weight:900;fill:${color}\">\n                    <defs>\n                        <pattern id=\"company\" patternUnits=\"userSpaceOnUse\" width=\"400\" height=\"200\">\n                            <text y=\"30\" font-size=\"40\" id=\"name\">Bryntum</text>\n                            <text y=\"120\" x=\"200\" font-size=\"24\" id=\"trial\">Trial Version</text>\n                        </pattern>\n                        <pattern id=\"pattern\" xlink:href=\"#company\" patternTransform=\"rotate(-45)\">\n                            <use xlink:href=\"#name\" /><use xlink:href=\"#trial\" />\n                        </pattern>\n                    </defs>\n                    <rect width=\"100%\" height=\"100%\" fill=\"url(#pattern)\" />\n                </svg>`;\n            element.style.backgroundImage = `url('data:image/svg+xml;base64,${window.btoa(svgString)}')`;\n        };\n    }\n    //endregion\n    //region Common override\n    const applyBaseOverride = baseClass => {\n        EXPIRING_CLASSES.push(baseClass);\n        Override.apply(class {\n            static get target() {\n                return {\n                    class : baseClass\n                };\n            }\n            onPaintOverride() {\n                const\n                    me            = this,\n                    setWatermarks = () => {\n                        const targets = me.subGrids ? Object.values(me.subGrids) : [me];\n                        for (const target of targets) {\n                            if (target.element) {\n                                ExpiryHelper.setWaterMark(target.element);\n                            }\n                        }\n                    };\n                initExpiryHelper(me, baseClass);\n                setWatermarks();\n                // React to theme changes\n                GlobalEvents.on('theme', () => {\n                    setWatermarks();\n                });\n                if (ExpiryHelper.isExpired) {\n                    ExpiryHelper.maskExpiredWidget(me);\n                }\n            }\n        });\n    };\n    //endregion\n    if (typeof Calendar !== 'undefined') {\n        EXPIRING_CLASSES.push(Calendar);\n        const watermarkCalendar = calendar => {\n            const\n                { element, mode } = calendar,\n                setWatermark      = selector => [...element.querySelectorAll(selector)].forEach(ExpiryHelper.setWaterMark);\n            switch (mode) {\n                case 'year' :\n                    setWatermark('.b-yearview-content');\n                    break;\n                case 'agenda' :\n                    setWatermark('.b-grid-subgrid');\n                    break;\n                default:\n                    setWatermark('.b-dayview-day-detail');\n            }\n            setWatermark('.b-weeks-container');\n        };\n        Override.apply(class {\n            static get target() {\n                return {\n                    class : Calendar\n                };\n            }\n            onPaintOverride() {\n                initExpiryHelper(this, Calendar);\n                watermarkCalendar(this);\n                // React to theme changes\n                GlobalEvents.on('theme', () => {\n                    watermarkCalendar(this);\n                });\n                if (ExpiryHelper.isExpired) {\n                    ExpiryHelper.maskExpiredWidget(this);\n                    this.queryAll(widget => widget.isCalendarMixin).forEach(widget => widget.collectEvents = () => new Map());\n                }\n            }\n            onModeChange() {\n                this._overridden.onModeChange.apply(this, arguments);\n                watermarkCalendar(this);\n            }\n        });\n    }\n})();\n(() => {\n    // do not load analytics code for specific domains\n    const ignoreDomainRe = /(.force.com|.lightning.com|.salesforce.com|lmctfy.net|qa.bryntum.com|qa2.bryntum.com)/;\n    // document location might be null in firefox in salesforce\n    if (!document.location || ignoreDomainRe.test(document.location.href) || window.top !== window) {\n        return;\n    }\n    let id;\n    const websiteUrls = [\n        'bryntum.com',\n        'cdpn.io'\n    ];\n    const\n        products   = ['calendar', 'grid', 'gantt', 'scheduler', 'schedulerpro', 'taskboard'],\n        frameworks = ['angular', 'react', 'vue', 'ionic'];\n    websiteUrls.splice(0, 0, ...products.map(prod => frameworks.map(framework => `${framework}-${prod}`)).concat('bryntum.com').flat());\n    if (document.location.host.match(websiteUrls.join('|'))) {\n        id = 'G-1VY6776VJP';\n    }\n    else {\n        id = 'G-H465KZDH8S';\n    }\n    const newScript = document.createElement('script');\n    newScript.onload = function() {\n        window.dataLayer = window.dataLayer || [];\n        function gtag() {\n            window.dataLayer.push(arguments);\n        }\n        gtag('js', new Date());\n        gtag('config', id);\n    };\n    document.head.appendChild(newScript);\n    newScript.src = 'https://www.googletagmanager.com/gtag/js?id=' + id;\n})();\n"],
  "mappings": "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",
  "names": ["AgendaColumn", "Column", "targetElement", "record", "grid", "size", "_a", "me", "events", "date", "children", "i", "eventRecord", "eventEndDate", "DateHelper", "isOverflow", "overflows", "eventDomConfig", "DomSync", "dateBlock", "cellTbPadding", "DomHelper", "containerPadding", "dateBlockHeight", "Rectangle", "cellContext", "result", "__publicField", "ColumnStore", "EventColumn", "_b", "resourceFilter", "resources", "r", "resource", "TimeRangeModel", "TimeRangeStore", "ProjectModel", "CrudManager", "ret", "timeRangeStore", "store", "ObjectHelper", "CalendarFeature", "InstancePlugin", "Factoryable_default", "view", "zoneTypes", "disable", "client", "name", "handler", "type", "config", "readOnly", "disabled", "was", "firstPaint", "_modeDetacher", "zones", "newZones", "modes", "zone", "proxy", "CalendarZone", "Base", "listeners", "ResourceChipView", "ChipView", "resourceRecord", "hasEventStore", "w", "EventTip", "Tooltip", "ClockTemplate", "StringHelper", "data", "clockTemplate", "dateFormat", "recurrenceHint", "timeFormat", "allDay", "endDate", "startDate", "recurrence", "lastDay", "startMidnight", "lastMidnight", "multiDay", "hasTime", "format", "recurrenceLegend", "RecurrenceLegend", "duration", "onlyStartDate", "event", "element", "deleteTool", "FunctionHelper", "startElement", "endElement", "edit", "del", "eventEdit", "chipView", "lastAlignSpec", "activeClient", "tentativeCls", "SECONDS", "MINUTES", "YYYY_MM_DD", "edgeRe", "eventDragSym", "appendEventFooter", "domConfig", "footer", "c", "makeMode", "modeDescriptor", "isAllDayView", "Zone", "Draggable_default", "Droppable_default", "Hoverable_default", "d1", "d2", "clientX", "clientY", "drag", "owner", "hit", "insetProp", "mode", "veto", "callback", "dragProxy", "dragging", "tooltip", "dayTime", "firstVisibleDate", "lastVisibleDate", "days", "d", "end", "overflowPopup", "OverflowZone", "container", "_c", "dropping", "durationSec", "eventHit", "changes", "eventStore", "descriptor", "validation", "eventName", "callbackFalse", "info", "triggerFn", "add", "dropRec", "storeRec", "source", "fromResource", "toResource", "interView", "sourceStore", "isReassign", "editRec", "resolve", "RecurrenceConfirmationPopup", "eventRec", "autoCreate", "other", "gripper", "cls", "otherCls", "leaving", "eventOffset", "at", "isDragContext", "target", "src", "edge", "wrapEl", "horizontalStartEdge", "DomClassList", "first", "last", "dom", "creating", "newName", "defaultCalendar", "assignments", "eventDom", "_d", "color", "calendarCells", "dayValues", "newDayValues", "cell", "dayValue", "lastCell", "cleanDom", "value", "instance", "rootEl", "BaseDayZone", "vert", "AllDayZone", "dragFrom", "newDate", "eventEl", "dropRootElement", "visibleCellSelector", "weekLength", "eventTop", "cells", "DayZone", "args", "allDayEvents", "eventId", "active", "draggingItemCls", "containerEl", "elements", "el", "previousEventId", "durationUnit", "endTime", "startTime", "recurrenceCount", "sameDay", "recurring", "dayStart", "overDate", "lastDate", "times", "allDayZone", "eventSpacing", "startOffset", "endOffset", "eventInset", "eventWidth", "firstDay", "heightScale", "height", "style", "top", "ResourceCalendarRowZone", "isMoving", "DayResourceZone", "fromDate", "MonthZone", "recurrenceRule", "count", "day1", "day2", "week1", "week2", "weekEls", "coverage", "cover", "k", "n", "dayEnd", "weekValues", "rtl", "eventSourceHit", "newWeekValues", "eventRow", "weekElements", "cov", "extL", "extR", "weekEl", "sourceEl", "EventHelper", "YearZone", "tempRec", "els", "e", "ResourceViewZone", "oldZones", "length", "CalendarDrag", "props", "domEvent", "existing", "Widget", "EventEditor", "userAction", "fromUI", "hideShowMethod", "startDateField", "startTimeField", "endDateField", "endTimeField", "deleteButton", "isCalendar", "EventEdit", "_e", "_f", "_g", "_h", "eventAdded", "_overflowPopup", "activeDate", "fromOverflow", "eventElement", "scrollingAllowed", "isCreating", "saved", "editor", "calendar", "step", "activeSubView", "EventMenu", "items", "assignmentRecord", "activeView", "dupe", "ownConfigs", "EventTooltip", "recurrenceConfirmation", "existingInstance", "clientListeners", "fromPopup", "navEvent", "_tooltip", "owningCalendarWidget", "parseAlign", "oneHour", "ExternalZone", "feature", "proxyEl", "ExternalEventSource", "_ExternalEventSource", "Delayable_default", "draggable", "droppable", "gridStore", "modelClass", "row", "isAbove", "hcCls", "ip", "sameStore", "nameCell", "dragRootElement", "dragItemSelector", "LoadOnDemand", "load", "otherDateRangeRequested", "response", "options", "changed", "lastRangeLoaded", "lastStartDate", "lastEndDate", "pendingLoad", "beforeRequest", "crudManager", "MessageDialog_default", "Printer", "Exporter", "clear", "title", "header", "styles", "htmlClasses", "bodyStyle", "bodyClasses", "paperHeight", "paperWidth", "html", "afterPrint", "BrowserHelper", "script", "TemplateHelper", "bigNumberProperty", "CalendarPrinter", "PaperFormat", "wysiwyg", "shrinkwrapRowHeights", "rowHeights", "sum", "clonedElement", "totalHeight", "totalWidth", "emptyArray", "Print", "printersMap", "printer", "printerClass", "iframeId", "pages", "iframe", "ScheduleMenu", "addEvent", "noCalcRe", "LayoutDim", "_LayoutDim", "ratio", "delta", "v", "range", "str", "genericRenderer", "renderData", "defaultRotation", "oppositeAlign", "valueFields", "context", "ranges", "layout", "footers", "headers", "clusters", "item", "timeRange", "fieldName", "defaultRenderer", "renderer", "part", "headerFooter", "align", "extraData", "isFooter", "renderInfo", "extraDom", "sizeSeconds", "isRange", "isLine", "values", "rotation", "TimeRanges", "AttachToProjectMixin_default", "project", "width", "WeekExpander", "monthView", "weekRenderer", "parent", "year", "week", "toggleTool", "weekRow", "getStyles", "DayLayout", "cluster", "cellData", "dayDomConfig", "tomorrow", "endingDate", "startSec", "endSec", "start", "a", "b", "tolerance", "inset", "Packer", "PackMixin_default", "wrappedItems", "itemData", "clusterIndex", "slot", "slotSize", "COLUMN_WIDTH", "EMPTY", "packer", "FluidDayLayout", "staggerWidth", "indentWidth", "stagger", "staggerMaximum", "staggerMinimum", "stretch", "treeLevels", "depth", "left", "root", "order", "clearanceMinutes", "escapeMinutes", "clearanceSeconds", "escapeSeconds", "overlapTolerance", "isMinor", "scoreFn", "best", "child", "major", "minor", "p", "score", "level", "prior", "barriers", "overlap", "parentDepth", "complexityLimit", "topLevelItems", "it", "paths", "include", "longest", "path", "tail", "x", "s", "stop", "CalendarStores_default", "Target", "ProjectConsumer_default", "ResourceTimeRangeModel", "timeZone", "oldTimeZone", "currentEvents", "eventsCenterMs", "avgCenterDate", "centerDateLocal", "TimeZoneHelper", "centerDateTZ", "oldProject", "isInitialCommit", "storeOwner", "EventSlots", "index", "EventSorter", "event1", "event2", "start1", "start2", "event1InterDay", "event2InterDay", "eventNameSplitter", "eventPartReplacer", "match", "prefix", "remainder", "capitalizeEvent", "SchedulerInterface_default", "elementOrEvent", "sourcePopup", "subView", "xy", "roundingMethod", "local", "allowOutOfRange", "emptyString", "EventRenderer_default", "eventRenderer", "eventHeight", "intradayCls", "alldayCls", "solidBarCls", "pastEventCls", "showTime", "minimal", "isRecurring", "isAllDay", "eventInnerStyle", "eventSelectedCls", "dataset", "bodyContent", "complexContent", "bodyContentType", "eventStyle", "rendererValue", "ArrayHelper", "bodyColor", "hasIcon", "useIconAsRecurrIcon", "showBullet", "showCircle", "iconElement", "eventInnerContent", "iconParent", "eventNameHtml", "showResourceAvatars", "content", "locale", "y", "En_default", "LocaleHelper", "immediatePromise", "emptyObject", "eventNameMap", "isFocusedCalendarMixin", "CalendarMixin_default", "Describable_default", "Featureable_default", "Responsive_default", "resourceId", "includeTimeRanges", "resourceRanges", "avatarRendering", "AvatarRendering", "eventHeightInPixels", "excludes", "fn", "thisObj", "navigator", "activeElement", "activeEvent", "base", "scrollIntoView", "newEl", "refocus", "defaults", "Config", "shortEventDuration", "weekStartDay", "refreshCount", "month", "nonWorkingDays", "oldDate", "minDate", "maxDate", "scrollable", "promise", "dateStart", "startHourMS", "editingView", "isDayView", "recordData", "dateContainmentFn", "newRecord", "visibleCells", "hideNonWorkingDays", "activeColumnIndex", "activeDay", "weekStart", "newActiveColumnIndex", "action", "keyParser", "raw", "dateElement", "rawDate", "strict", "dayCells", "rect", "activeEventElement", "dayCell", "currentOverEventEl", "isOut", "toElement", "toEventEl", "monthSelector", "closest", "weekElement", "fromOverflowPopup", "domEventName", "eventWrap", "resourceElement", "eventResult", "keyEvent", "configs", "byKey", "lhs", "rhs", "extractEndDate", "DayCellCollecter_default", "DayTime", "Month", "eventFilter", "getEventsOptions", "filter", "skipPropagate", "cellMonth", "cellMap", "CellMap", "key", "lastEventEndDate", "sortEvent", "eventData", "cellMapEntries", "previousEvents", "entry", "viewEndDate", "startOfDay", "renderedEvents", "nextEvents", "eventsPerCell", "propagateEndDate", "renderedSlot", "isVisible", "lastEvent", "nextDay", "weekStartValue", "eventStartValue", "originatingCell", "OverflowPopup", "Popup", "eventSorter", "slicePoint", "renderedEvent", "eventList", "oldActiveDate", "alignedTo", "cellOverflowButton", "emptyFn", "DayCellRenderer_default", "overflowPopupTrigger", "relatedTarget", "popupOwner", "oldWidth", "oldHeight", "_eventsPerCell", "_eventContainerTop", "prevEventsPerCell", "prevEventContainerTop", "now", "firstVisibleCell", "columnIndex", "day", "visibleColumnIndex", "todayCls", "emptyCellRenderer", "today", "isToday", "dayNumber", "eventContainer", "cellHeader", "isFirstVisibleCell", "dayName", "dayEvents", "dynamicallySetToNonWorking", "wasNonWorking", "dayNameContent", "hasOverflow", "maxRow", "overflowCount", "renderedDaySpan", "daySpan", "remainingColumns", "isHiddenOverflow", "rType", "rCallback", "ignoreNonWorkingDays", "spanEnd", "overflowButtonRenderer", "validRangeUnits", "compareRange", "r1", "r2", "DateRangeOwner_default", "_month", "newStartDate", "generation", "oldStartDate", "lastRangeAnnounced", "newRange", "expandGestures", "formatDayPart", "sep", "compress", "s1", "CalendarRow", "fonts", "onFirstPaint", "daySeparator", "headerScroller", "oldHeaderScroller", "Scroller", "hiddenDays", "maxEventCount", "newMaxEventCount", "lastVisibleCellData", "dayStartShift", "minDayWidth", "autoHeight", "eventContentHeight", "syncingSiblings", "siblings", "animate", "gutterHeight", "eventContentElement", "rowRect", "dx", "overCell", "expanded", "wasExpanded", "firstDate", "fullWeek", "headerCellContainer", "cellContainer", "dayHeaderRenderer", "hiddenNonWorkingDays", "hideEmptyDays", "from", "to", "cellDataBlocks", "eventCells", "headerCells", "currentDay", "lastWorkingDayCell", "skipDay", "isNonWorking", "dayCls", "cellDomConfig", "headerDomConfig", "Objects", "dayNameFormat", "dayNumberCompress", "shifted", "DaySelector", "startMonth", "endMonth", "monthDesc", "DaySelectable_default", "daySelector", "oldDaySelector", "byStartDate", "mergeColumns", "configuredColumns", "defaultColumns", "id", "newColumn", "matchIndex", "Collection", "matchedExistingColumn", "EventList", "Grid", "editorContext", "Toast", "featuresProp", "features", "timeString", "menu", "listRangeMenu", "toggleGroup", "rowManager", "_elementsArray", "keys", "descriptionFormat", "rangeDesc", "Store", "records", "cellEdit", "ec", "settings", "oldSettings", "Button", "isMouseOverOut", "isMouseInteraction", "AgendaView", "f", "GridFeatureManager", "ft", "state", "oldState", "offsetStartsBeforeEvents", "eventRowSpacing", "oldCount", "removed", "added", "rowHeight", "rowCount", "j", "avgEventsPerCell", "rec", "cellRenderer", "GridRowModel", "CalendarDatePicker", "SchedulerDatePicker", "highlightSelectedWeek", "showEvents", "isCount", "isDots", "eventInfo", "countCls", "cellContent", "meta", "MILLIS_PER_HOUR", "widestDate", "blockedAllDayEvents", "stopEvent", "preventDefault", "hourHeightLevelZero", "zeroRect", "fiveMinuteSteps", "sixMinuteSteps", "extractEventRecord", "DayView", "Panel", "GlobalEvents_default", "zoomOnMouseWheel", "dayEndTime", "dayStartTime", "_dayStartTime", "_dayEndTime", "configuredDayStartTime", "configuredDayEndTime", "scrollPromises", "targetIsDate", "time", "showAllDayHeader", "_allDayEvents", "alldayEvents", "oldAlldayEvents", "overflowClickAction", "oldWeekStartDay", "precise", "localX", "dy", "dayCellRenderer", "coreHours", "lastEnd", "actionButtons", "actionButton", "button", "maxAllDayHeight", "pointerOffsetY", "reqDelta", "zoomCenter", "oldHourHeight", "zoomCenterTime", "hoursInDay", "newHourHeight", "startHour", "endHour", "as", "increment", "dayElement", "currentTimeIndicator", "dayLengthMs", "nowMS", "hours", "h", "ticks", "hourHeight", "shortEventHeight", "minEventHeight", "fitHours", "dayContainerElement", "horizontalScrollerElement", "scrollBarWidth", "ResizeMonitor", "startScrollPos", "doScroll", "alldayRowElement", "headerElement", "verticalScroller", "allDayHasOverflow", "horizontalScroller", "dayElements", "cornerElementClassList", "clientWidth", "scrollWidth", "contentElement", "dayStartOffset", "_hourHeightLevel", "hourHeightLevel", "dayContentCls", "dayLength", "dayHeight", "halfHourHeight", "fifteenMinuteHeight", "twelveMinuteHeight", "tenMinuteHeight", "sixMinuteHeight", "fiveMinuteHeight", "contentElementStyle", "timeAxisWidth", "sixMinuteTicks", "hourHeightBreakpoints", "steps", "DayResourceCalendarRow", "resourceStore", "viewResources", "showHeaderAvatars", "hideEmptyResources", "bodyChildren", "visibleResources", "minResourceWidth", "DayResourceView", "resourceHeader", "eventsForDate", "dayColumn", "filterResources", "ModeSelector", "Container", "Fencible_default", "Minifiable_default", "includeWeekendsButton", "MenuItem", "menuItem", "buttonBar", "pressed", "checked", "buttons", "includeWeekendsMenuItem", "ButtonGroup", "evRegexp", "MonthView", "CalendarPanel", "classList", "autoRowHeight", "eventCount", "rowIndex", "firstCell", "eventContainerHeight", "visibleWeekStart", "incr", "isLastCall", "maxEventsPerCell", "eventContainerTop", "wasShrinkwrapped", "maxEventsForWeek", "shrinkwrapHeight", "t", "property", "allRows", "padding", "minRowHeight", "wasAutoRowHeight", "weekExpander", "finalPromise", "shrinkwrappedRows", "oldScrollable", "column", "maxEvents", "dayNumberCentered", "showWeekColumn", "dayNameSelector", "day0", "emptyMap", "scrollAxesConfigs", "sharedConfigs", "ResourceView", "dayViewTimeAxis", "dayViewScroller", "prop", "passView", "visibleViews", "resourceIdOrder", "viewIdOrder", "viewCache", "oldViewCache", "Bag", "_items", "calendars", "toAdd", "toRemove", "usedIds", "monthStart", "nextMonthStart", "hitCount", "isShown", "lastView", "allDayRows", "maxHeight", "metaValue", "namedColor", "hexColor", "viewConfig", "ResourceDayViewTimeAxis", "toRefresh", "drivingView", "needsScroller", "views", "owningView", "configName", "update", "firstItem", "ResourceDayViewAllDayEvents", "Sidebar", "_Sidebar", "widgetConfig", "side", "oldSide", "stepUnitText", "prevButtonSidebar", "nextButtonSidebar", "datePicker", "WeekView", "oldWeek", "weekEnd", "weekStartDate", "isHoverGesture", "YearView", "entries", "superCall", "oldMonth", "monthEl", "newYear", "oldShowEvents", "dayCellCls", "otherMonthCls", "weekendCls", "nonWorkingDayCls", "emptyCellCls", "eventCountTip", "todayKey", "monthIndex", "monthHeader", "weeknameCells", "weekNameRow", "monthElement", "weeks", "cellIndex", "dates", "isOtherMonth", "showOverflow", "btip", "tipData", "isCalendarMixin", "EventNavigation_default", "activeItem", "nextItem", "fallback", "nextActiveDate", "nextActiveEventId", "nextActiveView", "EventSelection_default", "selection", "selected", "deselected", "preserveSelection", "selectedCollection", "clickedRecord", "byWeight", "l", "relayedEvents", "propagatedConfigs", "hasWeight", "m", "Calendar", "_Calendar", "CrudManagerView_default", "CurrentConfig_default", "State_default", "RecurringEvents_default", "navigatorPlacement", "prevActiveItem", "sidebar", "collapsible", "highlightDate", "getDayElement", "activeDateCls", "oldActiveDateCls", "oldDateCells", "newDateCells", "tbar", "widgetMap", "viewDescription", "description", "viewDate", "toggleSideBar", "prevButton", "nextButton", "modeSelector", "eventCls", "modeArray", "modeConfig", "modeType", "manager", "DynamicObject", "Modes", "modeDefaults", "viewType", "overlaySidebar", "collapsibleConfig", "stateId", "sidebarItems", "sidebarDatePicker", "cfg", "isEmptyCell", "isOverflowClick", "weekView", "validYearViewNavigate", "viewContainer", "dayView", "oldActiveItem", "syncViewDate", "assignmentRecords", "scrollManager", "oldScrollManager", "ScrollManager", "eventEls", "refreshed", "VersionHelper", "HOSTS", "EXPIRING_CLASSES", "location", "host", "initialized", "initExpiryHelper", "baseClass", "ExpiryHelper", "product", "productName", "version", "callHomeDelay", "blockUrl", "saveVersionCheckKey", "url", "logUrl", "img", "widget", "darkColor", "lightColor", "svgString", "applyBaseOverride", "Override", "setWatermarks", "targets", "watermarkCalendar", "setWatermark", "selector", "ignoreDomainRe", "websiteUrls", "products", "frameworks", "prod", "framework", "newScript", "gtag"]
}
