{
  "version": 3,
  "sources": ["../../../SchedulerPro/lib/SchedulerPro/column/ResourceCalendarColumn.js", "../../../SchedulerPro/lib/SchedulerPro/model/EventModel.js", "../../../SchedulerPro/lib/SchedulerPro/data/EventStore.js", "../../../SchedulerPro/lib/SchedulerPro/model/ResourceUtilizationModel.js", "../../../SchedulerPro/lib/SchedulerPro/data/ResourceUtilizationStore.js", "../../../SchedulerPro/lib/SchedulerPro/eventlayout/ProHorizontalLayout.js", "../../../SchedulerPro/lib/SchedulerPro/eventlayout/ProHorizontalLayoutStack.js", "../../../SchedulerPro/lib/SchedulerPro/eventlayout/ProHorizontalLayoutPack.js", "../../../SchedulerPro/lib/SchedulerPro/feature/CalendarHighlight.js", "../../../SchedulerPro/lib/SchedulerPro/feature/DependencyEdit.js", "../../../SchedulerPro/lib/SchedulerPro/feature/EventBuffer.js", "../../../SchedulerPro/lib/SchedulerPro/feature/EventSegmentDrag.js", "../../../SchedulerPro/lib/SchedulerPro/feature/NestedEvents.js", "../../../SchedulerPro/lib/SchedulerPro/feature/ResourceNonWorkingTime.js", "../../../SchedulerPro/lib/SchedulerPro/feature/TimeSpanHighlight.js", "../../../SchedulerPro/lib/SchedulerPro/model/changelog/ChangeLogPropertyUpdate.js", "../../../SchedulerPro/lib/SchedulerPro/model/ProjectModel.js", "../../../SchedulerPro/lib/SchedulerPro/view/mixin/SchedulerProEventRendering.js", "../../../SchedulerPro/lib/SchedulerPro/view/ResourceHistogram.js", "../../../SchedulerPro/lib/SchedulerPro/view/ResourceUtilization.js", "../../../SchedulerPro/lib/SchedulerPro/view/orientation/ProHorizontalRendering.js", "../../../SchedulerPro/lib/SchedulerPro/view/orientation/ProVerticalRendering.js", "../../../SchedulerPro/lib/SchedulerPro/view/SchedulerProBase.js", "../../../SchedulerPro/lib/SchedulerPro/view/SchedulerPro.js", "../../../SchedulerPro/lib/SchedulerPro/widget/Timeline.js", "../../../SchedulerPro/lib/SchedulerPro/widget/VersionGrid.js", "../../../SchedulerPro/bundle/entry.thin.js"],
  "sourcesContent": ["import Column from '../../Grid/column/Column.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\nimport AttachToProjectMixin from '../../Scheduler/data/mixin/AttachToProjectMixin.js';\nimport CalendarField from '../widget/CalendarField.js';\n/**\n * @module SchedulerPro/column/ResourceCalendarColumn\n */\n/**\n * A column that displays (and allows user to update) the current {@link SchedulerPro.model.CalendarModel calendar} of\n * the resource.\n *\n * Default editor is a {@link SchedulerPro.widget.CalendarField CalendarField}.\n *\n * {@inlineexample SchedulerPro/column/ResourceCalendarColumn.js}\n *\n * @mixes Scheduler/data/mixin/AttachToProjectMixin\n * @extends Grid/column/Column\n * @classtype resourceCalendar\n * @column\n */\nexport default class ResourceCalendarColumn extends Column.mixin(AttachToProjectMixin) {\n    //region Config\n    static get $name() {\n        return 'ResourceCalendarColumn';\n    }\n    static get type() {\n        return 'resourceCalendar';\n    }\n    static get defaults() {\n        return {\n            field  : 'calendar',\n            text   : 'Calendar',\n            editor : {\n                type         : CalendarField.type,\n                clearable    : true,\n                allowInvalid : false\n            }\n        };\n    }\n    //endregion\n    //region Init\n    attachToProject(project) {\n        if (project) {\n            // Store default calendar to filter out this value\n            this.defaultCalendar = project.defaultCalendar;\n            this.editor.store = project.calendarManagerStore;\n        }\n    }\n    attachToResourceStore(resourceStore) {\n        super.attachToResourceStore(resourceStore);\n        if (resourceStore) {\n            resourceStore.ion({\n                name    : 'resourceStore',\n                update  : 'onResourceUpdate',\n                thisObj : this\n            });\n        }\n    }\n    //endregion\n    //region Events\n    // Event rendering does not update cells when engine updates a resource, instead we do a minimal update here\n    onResourceUpdate({ record, changes }) {\n        const change = changes[this.field];\n        if (change) {\n            // Ignore \"normalization\" of id -> instance, won't affect our appearance\n            if (typeof change.oldValue === 'string' && change.value?.id === change.oldValue) {\n                return;\n            }\n            this.refreshCell(record);\n        }\n    }\n    //endregion\n    //region Render\n    renderer({ value }) {\n        if (value?.id) {\n            const record = this.editor.store.getById(value.id);\n            return record?.getValue(this.editor.displayField) || '';\n        }\n        else {\n            return '';\n        }\n    }\n    //endregion\n}\nColumnStore.registerColumnType(ResourceCalendarColumn);\nResourceCalendarColumn._$name = 'ResourceCalendarColumn';", "import PartOfProject from '../data/mixin/PartOfProject.js';\nimport PercentDoneMixin from './mixin/PercentDoneMixin.js';\nimport { SchedulerProEvent } from '../../Engine/quark/model/scheduler_pro/SchedulerProEvent.js';\nimport Duration from '../../Core/data/Duration.js';\nimport EventModelMixin from '../../Scheduler/model/mixin/EventModelMixin.js';\nimport TimeSpan from '../../Scheduler/model/TimeSpan.js';\nimport RecurringTimeSpan from '../../Scheduler/model/mixin/RecurringTimeSpan.js';\nimport EventSegmentModel from './EventSegmentModel.js';\n/**\n * @module SchedulerPro/model/EventModel\n */\n/**\n * This class represent a single event in your schedule, usually added to a {@link SchedulerPro.data.EventStore}.\n *\n * It is a subclass of the {@link Scheduler.model.TimeSpan}, which is in turn subclass of {@link Core.data.Model}.\n * Please refer to documentation of that class to become familiar with the base interface of the event.\n *\n * ## Async date calculations\n *\n * A record created from an `EventModel` is normally part of an `EventStore`, which in turn is part of a project. When\n * dates or the duration of an event is changed, the project performs async calculations to normalize the other fields.\n * For example if `duration` is change, it will calculate `endDate`.\n *\n * As a result of this being an async operation, the values of other fields are not guaranteed to be up to date\n * immediately after a change. To ensure data is up to date, await the calculations to finish.\n *\n * For example, `endDate` is not up to date after this operation:\n *\n * ```javascript\n * eventRecord.duration = 5;\n * // endDate not yet calculated\n * ```\n *\n * But if calculations are awaited it is up to date:\n *\n * ```javascript\n * eventRecord.duration = 5;\n * await eventRecord.project.commitAsync();\n * // endDate is calculated\n * ```\n *\n * As an alternative, you can also use `setAsync()` to trigger calculations directly after the change:\n *\n * ```javascript\n * await eventRecord.setAsync({ duration : 5});\n * // endDate is calculated\n * ```\n *\n * ## Subclassing the Event model class\n * The Event model has a few predefined fields as seen below. If you want to add new fields or change the options for\n * the existing fields, you can do that by subclassing this class (see example below).\n *\n * ```javascript\n * class MyEvent extends EventModel {\n *\n *     static get fields() {\n *         return [\n *            // Add new field\n *            { name: 'myField', type : 'number', defaultValue : 0 }\n *         ];\n *     },\n *\n *     myCheckMethod() {\n *         return this.myField > 0\n *     },\n *\n *     ...\n * });\n * ```\n *\n * If you in your data want to use other names for the startDate, endDate, resourceId and name fields you can configure\n * them as seen below:\n * ```javascript\n * class MyEvent extends EventModel {\n *\n *     static get fields() {\n *         return [\n *            { name: 'startDate', dataSource 'taskStart' },\n *            { name: 'endDate', dataSource 'taskEnd', format: 'YYYY-MM-DD' },\n *            { name: 'resourceId', dataSource 'userId' },\n *            { name: 'name', dataSource 'taskTitle' },\n *         ];\n *     },\n *     ...\n * });\n * ```\n *\n * Please refer to {@link Core.data.Model} for additional details.\n *\n * @extends Scheduler/model/TimeSpan\n * @mixes Scheduler/model/mixin/RecurringTimeSpan\n * @mixes Scheduler/model/mixin/EventModelMixin\n * @mixes SchedulerPro/model/mixin/PercentDoneMixin\n * @mixes SchedulerPro/data/mixin/PartOfProject\n *\n * @typings Scheduler.model.EventModel -> Scheduler.model.SchedulerEventModel\n */\nexport default class EventModel extends SchedulerProEvent.derive(TimeSpan).mixin(\n    RecurringTimeSpan,\n    PartOfProject,\n    EventModelMixin,\n    PercentDoneMixin\n) {\n    /**\n     * Returns the event store this event is part of.\n     *\n     * @member {SchedulerPro.data.EventStore} eventStore\n     * @readonly\n     * @typings Scheduler.model.TimeSpan:eventStore -> {Scheduler.data.EventStore||SchedulerPro.data.EventStore}\n     */\n    /**\n     * If given resource is assigned to this event, returns a {@link SchedulerPro.model.AssignmentModel} record.\n     * Otherwise, returns `null`\n     *\n     * @method getAssignmentFor\n     * @param {SchedulerPro.model.ResourceModel} resource The instance of {@link SchedulerPro.model.ResourceModel}\n     *\n     * @returns {SchedulerPro.model.AssignmentModel|null}\n     */\n    /**\n     * This method assigns a resource to this event.\n     *\n     * Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method assign\n     * @param {SchedulerPro.model.ResourceModel|String|Number|SchedulerPro.model.ResourceModel[]|String[]|Number[]} resource A new resource for this event, either as a full\n     * Resource record or an id (or an array of such).\n     * @param {Number} [units=100] The `units` field of the new assignment\n     *\n     * @async\n     * @propagating\n     */\n    /**\n     * This method unassigns a resource from this event.\n     *\n     * Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method unassign\n     * @param {SchedulerPro.model.ResourceModel} resource The instance of {@link SchedulerPro.model.ResourceModel}\n     *\n     * @async\n     * @propagating\n     */\n    /**\n     * Sets the calendar of the event. Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method setCalendar\n     * @param {SchedulerPro.model.CalendarModel} calendar The new calendar. Provide `null` to fall back to the project calendar.\n     * @async\n     * @propagating\n     */\n    /**\n     * Returns the event calendar.\n     *\n     * @method getCalendar\n     * @returns {SchedulerPro.model.CalendarModel} The event calendar.\n     */\n    /**\n     * Either activates or deactivates the task depending on the passed value.\n     * Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method setInactive\n     * @param {Boolean} inactive `true` to deactivate the task, `false` to activate it.\n     * @async\n     * @propagating\n     */\n    /**\n     * Sets the start date of the event. Will cause the schedule to be updated - returns a `Promise`\n     *\n     * Note, that the actually set start date may be adjusted, according to the calendar, by skipping the non-working time forward.\n     *\n     * @method setStartDate\n     * @param {Date} date The new start date.\n     * @param {Boolean} [keepDuration=true] Whether to keep the duration (and update the end date), while changing the start date, or vice-versa.\n     * @async\n     * @propagating\n     */\n    /**\n     * Sets the end date of the event. Will cause the schedule to be updated - returns a `Promise`\n     *\n     * Note, that the actually set end date may be adjusted, according to the calendar, by skipping the non-working time backward.\n     *\n     * @method setEndDate\n     * @param {Date} date The new end date.\n     * @param {Boolean} [keepDuration=false] Whether to keep the duration (and update the start date), while changing the end date, or vice-versa.\n     * @async\n     * @propagating\n     */\n    /**\n     * Updates the duration (and optionally unit) of the event. Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method setDuration\n     * @param {Number} duration New duration value\n     * @param {String} [unit] New duration unit\n     * @async\n     * @propagating\n     */\n    /**\n     * Sets the constraint type and (optionally) constraining date to the event.\n     *\n     * @method setConstraint\n     * @param {'finishnoearlierthan'|'finishnolaterthan'|'mustfinishon'|'muststarton'|'startnoearlierthan'|'startnolaterthan'|null} constraintType\n     * Constraint type, please refer to the {@link #field-constraintType} for the valid\n     * values.\n     * @param {Date} [constraintDate] Constraint date.\n     * @async\n     * @propagating\n     */\n    /**\n     * Updates the {@link #field-effort} (and optionally {@link #field-effortUnit unit}) of the event.\n     * Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method setEffort\n     * @param {Number} effort New effort value\n     * @param {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} [unit] New effort\n     * unit\n     * @async\n     * @propagating\n     */\n    /**\n     * Sets {@link #field-segments} field value.\n     *\n     * @method\n     * @name setSegments\n     * @param {SchedulerPro.model.EventSegmentModel[]} segments Array of segments or null to make the event not segmented.\n     * @returns {Promise}\n     * @propagating\n     */\n    /**\n     * Splits the event into segments.\n     * @method splitToSegments\n     * @param {Date} from The date to split this event at.\n     * @param {Number} [lag=1] Split duration.\n     * @param {String} [lagUnit] Split duration unit.\n     * @returns {Promise}\n     * @propagating\n     */\n    /**\n     * Merges the event segments.\n     * The method merges two provided event segments (and all the segment between them if any).\n     * @method mergeSegments\n     * @param {SchedulerPro.model.EventSegmentModel} [segment1] First segment to merge.\n     * @param {SchedulerPro.model.EventSegmentModel} [segment2] Second segment to merge.\n     * @returns {Promise}\n     * @propagating\n     */\n    /**\n     * Sets the event {@link #field-ignoreResourceCalendar} field value and triggers rescheduling.\n     *\n     * @method setIgnoreResourceCalendar\n     * @param {Boolean} ignore Provide `true` to ignore the calendars of the assigned resources\n     * when scheduling the event. If `false` the event performs only when\n     * its own {@link #field-calendar} and some of the assigned\n     * resource calendars allow that.\n     * @async\n     * @propagating\n     */\n    /**\n     * Returns the event {@link #field-ignoreResourceCalendar} field value.\n     *\n     * @method getIgnoreResourceCalendar\n     * @returns {Boolean} The event {@link #field-ignoreResourceCalendar} field value.\n     */\n    /**\n     * The event first segment or null if the event is not segmented.\n     * @member {SchedulerPro.model.EventSegmentModel} firstSegment\n     */\n    /**\n     * The event last segment or null if the event is not segmented.\n     * @member {SchedulerPro.model.EventSegmentModel} lastSegment\n     */\n    //region Config\n    static get $name() {\n        return 'EventModel';\n    }\n    static isProEventModel = true;\n    static get fields() {\n        return [\n            /**\n             * Amount of time to delay a nested event from its parent. Expressed in {@link #field-durationUnit} units\n             * (defaults to days).\n             *\n             * Example dataset:\n             *\n             * ```javascript\n             * {\n             *   \"name\"      : \"Parent\",\n             *   \"startDate\" : \"2023-08-24\",\n             *   \"children\" : [\n             *     { name : \"One\", \"delayFromParent\" : 0 } // starts 2023-08-24\n             *     { name : \"Two\", \"delayFromParent\" : 2 } // starts 2023-08-26\n             *   ]\n             * }\n             * ```\n             *\n             * Intended for loading & serializing data when using nested events, at runtime it is enforced using\n             * constraints. See {@link SchedulerPro/feature/NestedEvents} for more information\n             *\n             * @field {Number} delayFromParent\n             * @category Scheduling\n             * @readonly\n             */\n            /**\n             * This field is automatically set to `true` when the event is \"unscheduled\" - user has provided an empty\n             * string in one of the UI editors for start date, end date or duration. Such event is not rendered,\n             * and does not affect the schedule of its successors.\n             *\n             * To schedule the event back, enter one of the missing values, so that there's enough information\n             * to calculate start date, end date and duration.\n             *\n             * Note, that setting this field manually does nothing. This field should be persisted, but not updated\n             * manually.\n             *\n             * @field {Boolean} unscheduled\n             * @readonly\n             * @category Scheduling\n             */\n            /**\n             * Segments of the event that appear when the event gets {@link #function-splitToSegments}.\n             * @field {SchedulerPro.model.EventSegmentModel[]} segments\n             * @category Scheduling\n             */\n            /**\n             * The current status of a task, expressed as the percentage completed (integer from 0 to 100)\n             *\n             * UI fields representing this data field are disabled for summary events.\n             * See {@link #function-isEditable} for details.\n             *\n             * @field {Number} percentDone\n             * @category Scheduling\n             */\n            /**\n             * The start date of a time span (or Event / Task).\n             *\n             * Uses {@link Core/helper/DateHelper#property-defaultFormat-static DateHelper.defaultFormat} to convert a\n             * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and\n             * change the dateFormat for this field.\n             *\n             * UI fields representing this data field are disabled for summary events\n             * except the {@link #field-manuallyScheduled manually scheduled} events.\n             * See {@link #function-isEditable} for details.\n             *\n             * Note that the field always returns a `Date`.\n             *\n             * @field {Date} startDate\n             * @accepts {String|Date}\n             * @category Scheduling\n             */\n            /**\n             * The end date of a time span (or Event / Task).\n             *\n             * Uses {@link Core/helper/DateHelper#property-defaultFormat-static DateHelper.defaultFormat} to convert a\n             * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and\n             * change the dateFormat for this field.\n             *\n             * UI fields representing this data field are disabled for summary events\n             * except the {@link #field-manuallyScheduled manually scheduled} events.\n             * See {@link #function-isEditable} for details.\n             *\n             * Note that the field always returns a `Date`.\n             *\n             * @field {Date} endDate\n             * @accepts {String|Date}\n             * @category Scheduling\n             */\n            /**\n             * The numeric part of the timespan's duration (the number of units).\n             *\n             * UI fields representing this data field are disabled for summary events\n             * except the {@link #field-manuallyScheduled manually scheduled} events.\n             * See {@link #function-isEditable} for details.\n             *\n             * @field {Number} duration\n             * @category Scheduling\n             */\n            /**\n             * Field storing the event constraint alias or NULL if not constraint set.\n             * Valid values are:\n             * - \"finishnoearlierthan\"\n             * - \"finishnolaterthan\"\n             * - \"mustfinishon\"\n             * - \"muststarton\"\n             * - \"startnoearlierthan\"\n             * - \"startnolaterthan\"\n             *\n             * @field {'finishnoearlierthan'|'finishnolaterthan'|'mustfinishon'|'muststarton'|'startnoearlierthan'|'startnolaterthan'|null} constraintType\n             * @category Scheduling\n             */\n            /**\n             * Field defining the constraint boundary date, if applicable.\n             * @field {Date} constraintDate\n             * @category Scheduling\n             */\n            /**\n             * When set to `true`, the `startDate` of the event will not be changed by any of its incoming dependencies\n             * or constraints.\n             *\n             * @field {Boolean} manuallyScheduled\n             * @category Scheduling\n             */\n            /**\n             * When set to `true` the event becomes inactive and stops taking part in the project scheduling (doesn't\n             * affect linked events and affect its assigned resources allocation).\n             *\n             * @field {Boolean} inactive\n             * @category Scheduling\n             */\n            /**\n             * When set to `true` the calendars of the assigned resources\n             * are not taken into account when scheduling the event.\n             *\n             * By default the field value is `false` resulting in that the event performs only when\n             * its own {@link #field-calendar} and some of the assigned\n             * resource calendars allow that.\n             * @field {Boolean} ignoreResourceCalendar\n             * @category Scheduling\n             */\n            /**\n             * A calculated field storing the _early start date_ of the event.\n             * The _early start date_ is the earliest possible date the event can start.\n             * This value is calculated based on the earliest dates of the event predecessors and the event own constraints.\n             * If the event has no predecessors nor other constraints, its early start date matches the project start date.\n             *\n             * UI fields representing this data field are naturally disabled since the field is readonly.\n             * See {@link #function-isEditable} for details.\n             *\n             * @field {Date} earlyStartDate\n             * @calculated\n             * @readonly\n             * @category Scheduling\n             */\n            /**\n             * A calculated field storing the _early end date_ of the event.\n             * The _early end date_ is the earliest possible date the event can finish.\n             * This value is calculated based on the earliest dates of the event predecessors and the event own constraints.\n             * If the event has no predecessors nor other constraints, its early end date matches the project start date plus the event duration.\n             *\n             * UI fields representing this data field are naturally disabled since the field is readonly.\n             * See {@link #function-isEditable} for details.\n             *\n             * @field {Date} earlyEndDate\n             * @calculated\n             * @readonly\n             * @category Scheduling\n             */\n            /**\n             * The calendar, assigned to the entity. Allows you to set the time when entity can perform the work.\n             *\n             * All entities are by default assigned to the project calendar, provided as the {@link SchedulerPro.model.ProjectModel#field-calendar} option.\n             *\n             * @field {SchedulerPro.model.CalendarModel} calendar\n             * @category Scheduling\n             */\n            /**\n             * The numeric part of the event effort (the number of units).\n             *\n             * @field {Number} effort\n             * @category Scheduling\n             */\n            /**\n             * The unit part of the event effort, defaults to \"h\" (hours). Valid values are:\n             *\n             * - \"millisecond\" - Milliseconds\n             * - \"second\" - Seconds\n             * - \"minute\" - Minutes\n             * - \"hour\" - Hours\n             * - \"day\" - Days\n             * - \"week\" - Weeks\n             * - \"month\" - Months\n             * - \"quarter\" - Quarters\n             * - \"year\"- Years\n             *\n             * This field is readonly after creation, to change it use the {@link #function-setEffort} call.\n             * @field {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} effortUnit\n             * @default \"hour\"\n             * @category Scheduling\n             * @readonly\n             */\n            /**\n             * This field defines the event scheduling mode. Based on this field some fields of the event\n             * will be \"fixed\" (should be provided by the user) and some - computed.\n             *\n             * Possible values are:\n             *\n             * - `Normal` is the default (and backward compatible) mode. It means the event will be scheduled based on\n             * information about its start/end dates, event own calendar (project calendar if there's no one) and\n             * calendars of the assigned resources.\n             *\n             * - `FixedDuration` mode means, that event has fixed start and end dates, but its effort will be computed\n             * dynamically, based on the assigned resources information. When duration of such event increases,\n             * its effort is increased too. The mode tends to preserve user provided duration so changing effort\n             * results adjusting assignment units and vise-versa assignment changes adjusts effort.\n             *\n             * @field {'Normal'|'FixedDuration'} schedulingMode\n             * @category Scheduling\n             */\n            /**\n             * This boolean flag defines what part the data should be updated in the `FixedDuration` scheduling\n             * mode.\n             * If it is `true`, then {@link #field-effort} is kept intact when new duration is provided and\n             * assignment {@link SchedulerPro.model.AssignmentModel#field-units} is updated.\n             * If it is `false`, then assignment {@link SchedulerPro.model.AssignmentModel#field-units} is kept\n             * intact when new duration is provided and {@link #field-effort} is updated.\n             *\n             * @field {Boolean} effortDriven\n             * @default false\n             * @category Scheduling\n             */\n            /**\n             * The event effective calendar. Returns the\n             * {@link SchedulerPro.model.ProjectModel#field-calendar project calendar} if the event has no own\n             * {@link #field-calendar} provided.\n             * @member {SchedulerPro.model.CalendarModel} effectiveCalendar\n             */\n            /**\n             * Set this to true if this task should be shown in the Timeline widget\n             * @field {Boolean} showInTimeline\n             * @category Common\n             */\n            { name : 'showInTimeline', type : 'boolean', defaultValue : false },\n            /**\n             * Note about the event\n             * @field {String} note\n             * @category Common\n             */\n            'note',\n            /**\n             * Buffer time before event start. Specified in a human-friendly form as accepted by\n             * {@link Core.helper.DateHelper#function-parseDuration-static}:\n             * ```javascript\n             * // Create event model with a 30 minutes buffer time before the event start\n             * new EventModel({ startDate : '2020-01-01', endDate : '2020-01-02', preamble : '30 minutes' })\n             * ```\n             *\n             * Used by the {@link SchedulerPro.feature.EventBuffer} feature.\n             *\n             * @field {Core.data.Duration} preamble\n             * @accepts {String}\n             * @category Scheduling\n             */\n            {\n                name      : 'preamble',\n                convert   : value => value ? new Duration(value) : null,\n                serialize : value => !value?.magnitude ? null : value\n            },\n            /**\n             * Buffer time after event end. Specified in a human-friendly form as accepted by\n             * {@link Core.helper.DateHelper#function-parseDuration-static}:\n             * ```javascript\n             * // Create event model with a 1 hour buffer time after the event end\n             * new EventModel({ startDate : '2020-01-01', endDate : '2020-01-02', postamble : '1 hour' })\n             * ```\n             *\n             * Used by the {@link SchedulerPro.feature.EventBuffer} feature.\n             *\n             * @field {String} postamble\n             * @accepts {String}\n             * @category Scheduling\n             */\n            {\n                name      : 'postamble',\n                convert   : value => value ? new Duration(value) : null,\n                serialize : value => !value?.magnitude ? null : value\n            }\n        ];\n    }\n    getDefaultSegmentModelClass() {\n        return EventSegmentModel;\n    }\n    //endregion\n    //region EventBuffer\n    updateWrapDate(date, duration, forward = true) {\n        duration = new Duration(duration);\n        return new Date(date.getTime() + (forward ? 1 : -1) * duration.milliseconds);\n    }\n    get startDate() {\n        let dt;\n        if (this.isOccurrence) {\n            dt = this.get('startDate');\n        }\n        else {\n            // Micro optimization to avoid expensive super call. super will be hit in Scheduler Pro\n            dt = this._startDate ?? super.startDate;\n        }\n        if (this.allDay) {\n            dt = this.constructor.getAllDayStartDate(dt);\n        }\n        return dt;\n    }\n    set startDate(startDate) {\n        const me = this;\n        if (me.batching) {\n            me._startDate = startDate;\n            me.set({ startDate });\n        }\n        else {\n            super.startDate = startDate;\n            if (me.preamble) {\n                me.wrapStartDate = null;\n                me.wrapEndDate   = null;\n            }\n        }\n    }\n    get endDate() {\n        let dt;\n        if (this.isOccurrence) {\n            dt = this.get('endDate');\n        }\n        else {\n            // Micro optimization to avoid expensive super call. super will be hit in Scheduler Pro\n            dt = this._endDate ?? super.endDate;\n        }\n        if (this.allDay) {\n            dt = this.constructor.getAllDayEndDate(dt);\n        }\n        return dt;\n    }\n    set endDate(endDate) {\n        const me = this;\n        if (me.batching) {\n            me._endDate = endDate;\n            me.set({ endDate });\n        }\n        else {\n            super.endDate = endDate;\n            if (me.postamble) {\n                me.wrapStartDate = null;\n                me.wrapEndDate   = null;\n            }\n        }\n    }\n    /**\n     * Property which encapsulates the effort's magnitude and units.\n     *\n     * UI fields representing this property are disabled for summary events.\n     * See {@link #function-isEditable} for details.\n     *\n     * @property {Core.data.Duration}\n     */\n    get fullEffort() {\n        return new Duration({\n            unit      : this.effortUnit,\n            magnitude : this.effort\n        });\n    }\n    set fullEffort(effort) {\n        this.setEffort(effort.magnitude, effort.unit);\n    }\n    // Cannot use `convert` method because it might be disabled by `useRawData : true` and we always need to calculate\n    // that value\n    get wrapStartDate() {\n        const\n            me                      = this,\n            { preamble, startDate } = me,\n            wrapStartDate           = me._wrapStartDate;\n        let result;\n        if (wrapStartDate) {\n            result = wrapStartDate;\n        }\n        else {\n            if (preamble) {\n                result            = me.updateWrapDate(startDate, preamble, false);\n                me._wrapStartDate = result;\n            }\n            else {\n                result = startDate;\n            }\n        }\n        return result;\n    }\n    set wrapStartDate(value) {\n        this._wrapStartDate = value;\n    }\n    get wrapEndDate() {\n        const\n            me                     = this,\n            { postamble, endDate } = me,\n            wrapEndDate            = me._wrapEndDate;\n        let result;\n        if (wrapEndDate) {\n            result = wrapEndDate;\n        }\n        else {\n            if (postamble) {\n                result          = me.updateWrapDate(endDate, postamble, true);\n                me._wrapEndDate = result;\n            }\n            else {\n                result = endDate;\n            }\n        }\n        return result;\n    }\n    set wrapEndDate(value) {\n        this._wrapEndDate = value;\n    }\n    set(data) {\n        const isObject = typeof data === 'object';\n        if (data === 'preamble' || (isObject && 'preamble' in data)) {\n            this.wrapStartDate = null;\n        }\n        if (data === 'postamble' || (isObject && 'postamble' in data)) {\n            this.wrapEndDate = null;\n        }\n        return super.set(...arguments);\n    }\n    /**\n     * Returns event start date adjusted by {@link #field-preamble} (start date - duration).\n     * @property {Date}\n     * @readonly\n     */\n    get outerStartDate() {\n        return this.wrapStartDate;\n    }\n    /**\n     * Returns event end date adjusted by {@link #field-postamble} (end date + duration).\n     * @property {Date}\n     * @readonly\n     */\n    get outerEndDate() {\n        return this.wrapEndDate;\n    }\n    //endregion\n    /**\n     * Defines if the given event field should be manually editable in UI.\n     * You can override this method to provide your own logic.\n     *\n     * By default, the method defines:\n     * - {@link #field-earlyStartDate}, {@link #field-earlyEndDate} as not editable;\n     * - {@link #field-endDate}, {@link #field-duration} and {@link #field-fullDuration} fields\n     *   as not editable for summary events except the {@link #field-manuallyScheduled manually scheduled} ones;\n     * - {@link #field-percentDone} as not editable for summary events.\n     *\n     * @param {String} fieldName Name of the field\n     * @returns {Boolean} Returns `true` if the field is editable, `false` if it is not and `undefined` if the event has\n     * no such field.\n     */\n    isEditable(fieldName) {\n        switch (fieldName) {\n            // r/o fields\n            case 'earlyStartDate':\n            case 'earlyEndDate':\n            case 'delayFromParent':\n                return false;\n            // disable percentDone editing for summary tasks\n            case 'percentDone' :\n            case 'renderedPercentDone' :\n                return this.isLeaf;\n            // end/duration is allowed to edit for leafs and manually scheduled summaries\n            case 'endDate' :\n            case 'duration' :\n            case 'fullDuration' :\n                return this.isLeaf || this.manuallyScheduled;\n        }\n        return super.isEditable(fieldName);\n    }\n    // Avoid persisting delayFromParent on parents, no point\n    getFieldPersistentValue(nameOrField) {\n        const\n            field = typeof nameOrField === 'string' ? this.getFieldDefinition(nameOrField) : nameOrField,\n            name  = field?.name || nameOrField;\n        if (name === 'delayFromParent' && this.parent?.isRoot) {\n            return;\n        }\n        return super.getFieldPersistentValue(nameOrField);\n    }\n    // Occurrences are not part of the project, when requesting their stm we retrieve it from the master event instead\n    get stm() {\n        return this.recurringEvent?.stm ?? super.stm;\n    }\n    set stm(stm) {\n        super.stm = stm;\n    }\n    //region Early render\n    get assigned() {\n        const\n            { project } = this,\n            assigned    = super.assigned;\n        // Figure assigned events out before buckets are created  (if part of project)\n        if (project?.isDelayingCalculation && !assigned) {\n            return project.assignmentStore.storage.findItem('event', this);\n        }\n        return assigned;\n    }\n    set assigned(assigned) {\n        super.assigned = assigned;\n    }\n    //endregion\n    getCurrentConfig(options) {\n        const\n            { segments } = this,\n            result       = super.getCurrentConfig(options);\n        // include segments\n        if (result && segments) {\n            result.segments = segments.map(segment => segment.getCurrentConfig(options));\n        }\n        return result;\n    }\n    endBatch(silent, skipAccessors, triggerBeforeUpdate) {\n        const\n            me = this,\n            { meta : { batchChanges } } = me;\n        super.endBatch(silent, skipAccessors, triggerBeforeUpdate);\n        // Remove cached values\n        // https://github.com/bryntum/support/issues/3358\n        if (batchChanges) {\n            if ('endDate' in batchChanges) {\n                delete me._endDate;\n                // When project recalculates start/end date and committing changes to record it calls endBatch. In this\n                // case wrap dates become invalid and should be reset on the record. We do it by forcing `null` value.\n                // Possible scenarios include adding dependency or moving first event in a dependency chain.\n                // Covered by pro/features/BufferTimeDependencies.t\n                // wrap date is an internal field we should be fine without mapping\n                if (me.postamble) {\n                    me.wrapEndDate = null;\n                }\n            }\n            if ('startDate' in batchChanges) {\n                delete me._startDate;\n                if (me.preamble) {\n                    me.wrapStartDate = null;\n                }\n            }\n        }\n    }\n}\nEventModel._$name = 'EventModel';", "import AjaxStore from '../../Core/data/AjaxStore.js';\nimport GetEventsMixin from '../../Scheduler/data/mixin/GetEventsMixin.js';\nimport DayIndexMixin from '../../Scheduler/data/mixin/DayIndexMixin.js';\nimport EventStoreMixin from '../../Scheduler/data/mixin/EventStoreMixin.js';\nimport RecurringEventsMixin from '../../Scheduler/data/mixin/RecurringEventsMixin.js';\nimport EventModel from '../model/EventModel.js';\nimport PartOfProject from './mixin/PartOfProject.js';\nimport { ChronoEventStoreMixin } from '../../Engine/quark/store/ChronoEventStoreMixin.js';\n/**\n * @module SchedulerPro/data/EventStore\n */\n/**\n * A store holding all the {@link SchedulerPro.model.EventModel events} to be rendered into a {@link SchedulerPro.view.SchedulerPro Scheduler Pro}.\n *\n * This store only accepts a model class inheriting from {@link SchedulerPro.model.EventModel}.\n *\n * An EventStore is usually connected to a project, which binds it to other related stores (AssignmentStore,\n * ResourceStore and DependencyStore). The project also handles normalization/calculation of the data on the records in\n * the store. For example if a record is added with a `startDate` and an `endDate`, it will calculate the `duration`.\n *\n * The calculations happens async, records are not guaranteed to have up to date data until they are finished. To be\n * certain that calculations have finished, call `await project.commitAsync()` after store actions. Or use one of the\n * `xxAsync` functions, such as `loadDataAsync()`.\n *\n * Using `commitAsync()`:\n *\n * ```javascript\n * eventStore.data = [{ startDate, endDate }, ...];\n *\n * // duration of the record is not yet calculated\n *\n * await eventStore.project.commitAsync();\n *\n * // now it is\n * ```\n *\n * Using `loadDataAsync()`:\n *\n * ```javascript\n * await eventStore.loadDataAsync([{ startDate, endDate }, ...]);\n *\n * // duration is calculated\n * ```\n *\n * @mixes SchedulerPro/data/mixin/PartOfProject\n * @mixes Scheduler/data/mixin/GetEventsMixin\n * @mixes Scheduler/data/mixin/EventStoreMixin\n * @mixes Scheduler/data/mixin/RecurringEventsMixin\n * @extends Core/data/AjaxStore\n *\n * @typings Scheduler.data.EventStore -> Scheduler.data.SchedulerEventStore\n */\nexport default class EventStore extends PartOfProject(RecurringEventsMixin(GetEventsMixin(DayIndexMixin(EventStoreMixin(ChronoEventStoreMixin.derive(AjaxStore)))))) {\n    static $name = 'EventStore';\n    static get defaultConfig() {\n        return {\n            /**\n             * Class used to represent records\n             * @config {SchedulerPro.model.EventModel}\n             * @typings {typeof EventModel}\n             * @default\n             * @category Common\n             */\n            modelClass : EventModel\n        };\n    }\n    //endregion\n}\nEventStore._$name = 'EventStore';", "import Model from '../../Core/data/Model.js';\n/**\n * @module SchedulerPro/model/ResourceUtilizationModel\n */\n/**\n * A model representing a {@link SchedulerPro/view/ResourceUtilization} view row.\n * The view rows are of two possible types __resources__ and __assignments__.\n * The model wraps either a resource or an assignment model. And each wrapped resource keeps its corresponding\n * wrapped assignments as its __children__.\n *\n * **NOTE:** You don't normally need to construct this class instances. The view does that automatically\n * by processing the project resources and assignments, wrapping them with this model instances and\n * putting them to its {@link SchedulerPro/view/ResourceUtilization#property-store}.\n *\n * The wrapped model is provided to {@link #config-origin} config and can be retrieved from it:\n *\n * ```javascript\n * // get the real resource representing the first row of the view\n * resourceUtilizationView.store.first.origin\n * ```\n *\n * @extends Core/data/Model\n */\nexport default class ResourceUtilizationModel extends Model {\n    static $name = 'ResourceUtilizationModel';\n    static fields = [\n        /**\n         * Name of the represented resource or the assigned event.\n         * If the model represents an assignment the field value is\n         * automatically set to the assigned event {@link SchedulerPro/model/EventModel#field-name}.\n         * @field {String} name\n         * @category Common\n         */\n        'name',\n        /**\n         * Icon for the corresponding row.\n         * If the model represents an assignment the field value is\n         * automatically set to the assigned event {@link SchedulerPro/model/EventModel#field-iconCls}.\n         * @field {String} iconCls\n         * @category Styling\n         */\n        'iconCls'\n    ];\n    /**\n     * A resource or an assignment wrapped by this model.\n     *\n     * ```javascript\n     * // get the real resource representing the first row of the view\n     * resourceUtilizationView.store.first.origin\n     * ```\n     * @prp {SchedulerPro.model.ResourceModel|SchedulerPro.model.AssignmentModel} origin\n     * @readonly\n     */\n    construct(data, ...args) {\n        this._childrenIndex = new Map();\n        // copy some field values from origin to this model\n        if (data.origin) {\n            Object.assign(data, this.mapOriginValues(data.origin));\n        }\n        super.construct(data, ...args);\n        if (this.origin && !this.generatedParent) {\n            this.fillChildren();\n        }\n    }\n    mapOriginValues(origin) {\n        const result = {};\n        if (origin.isResourceModel) {\n            result.name = origin.name;\n        }\n        else if (origin.isAssignmentModel) {\n            result.name    = origin.event?.name;\n            result.iconCls = origin.event?.iconCls;\n        }\n        return result;\n    }\n    fillChildren() {\n        const\n            me           = this,\n            { children } = me,\n            toRemove     = new Set(children),\n            toAdd        = [];\n        if (me.origin?.isResourceModel) {\n            const { assigned } = me.origin;\n            for (const assignment of assigned) {\n                if (!me._childrenIndex.has(assignment)) {\n                    toAdd.push(me.constructor.new({ origin : assignment }));\n                }\n                else {\n                    toRemove.delete(me._childrenIndex.get(assignment));\n                }\n            }\n        }\n        if (toRemove.size) {\n            this.removeChild([...toRemove]);\n        }\n        if (toAdd.length) {\n            this.appendChild(toAdd);\n        }\n    }\n    afterRemoveChild(records) {\n        records.forEach(record => this._childrenIndex.delete(record.origin));\n    }\n    insertChild(...args) {\n        let added = super.insertChild(...args);\n        if (added) {\n            const { stores } = this;\n            if (!Array.isArray(added)) {\n                added = [added];\n            }\n            if (this.origin?.isResourceModel) {\n                for (const record of added) {\n                    if (record.origin && !this._childrenIndex.has(record.origin)) {\n                        this._childrenIndex.set(record.origin, record);\n                    }\n                }\n            }\n            // if the model is already in a store\n            // fill the store real_model -> wrapper_model map\n            if (stores?.length) {\n                for (const store of stores) {\n                    for (const record of added) {\n                        record.traverse(node => node.origin && store.setModelByOrigin(node.origin, node));\n                    }\n                }\n            }\n        }\n        return added;\n    }\n    getChildByOrigin(origin) {\n        return this._childrenIndex.get(origin);\n    }\n}\n// convert empty parents to leaves to allow them to be handled by TreeGroup feature\nResourceUtilizationModel.convertEmptyParentToLeaf = true;\nResourceUtilizationModel.exposeProperties();\nResourceUtilizationModel._$name = 'ResourceUtilizationModel';", "import AjaxStore from '../../Core/data/AjaxStore.js';\nimport ResourceUtilizationModel from '../model/ResourceUtilizationModel.js';\nimport { AbstractPartOfProjectStoreMixin } from '../../Engine/quark/store/mixin/AbstractPartOfProjectStoreMixin.js';\n/**\n * @module SchedulerPro/data/ResourceUtilizationStore\n */\n/**\n * A store representing {@link SchedulerPro/view/ResourceUtilization} view records.\n * This store accepts a model class inheriting from {@link SchedulerPro/model/ResourceUtilizationModel}.\n *\n * The store is a tree of nodes representing resources on the root level with\n * sub-nodes representing corresponding resource assignments.\n * The store tracks changes made in the {@link #config-project} stores and rebuilds its content automatically.\n * Thus the project config is mandatory and has to be provided.\n *\n * @extends Core/data/AjaxStore\n */\nexport default class ResourceUtilizationStore extends AbstractPartOfProjectStoreMixin.derive(AjaxStore) {\n    static $name = 'ResourceUtilizationStore';\n    static configurable = {\n        modelClass : ResourceUtilizationModel,\n        /**\n         * Project instance to retrieve resources and assignments data from.\n         * @config {SchedulerPro.model.ProjectModel} project\n         */\n        project : null,\n        tree : true\n    };\n    // Cannot use `static properties = {}`, new Map would pollute the prototype\n    static get properties() {\n        return {\n            _modelByOrigin : new Map()\n        };\n    }\n    updateProject(project) {\n        this.setResourceStore(project?.resourceStore);\n        this.setAssignmentStore(project?.assignmentStore);\n        this.setEventStore(project?.eventStore);\n        this.fillStoreFromProject();\n    }\n    setResourceStore(store) {\n        this.detachListeners('resourceStore');\n        store?.ion({\n            name    : 'resourceStore',\n            change  : this.onResourceStoreDataChanged,\n            thisObj : this\n        });\n    }\n    setEventStore(store) {\n        this.detachListeners('eventStore');\n        store?.ion({\n            name    : 'eventStore',\n            update  : this.onEventUpdate,\n            thisObj : this\n        });\n    }\n    setAssignmentStore(store) {\n        this.detachListeners('assignmentStore');\n        store?.ion({\n            name    : 'assignmentStore',\n            change  : this.onAssignmentsChange,\n            refresh : this.onAssignmentsRefresh,\n            add     : this.onAssignmentsAdd,\n            update  : this.onAssignmentUpdate,\n            remove  : this.onAssignmentsRemove,\n            thisObj : this\n        });\n    }\n    onResourceStoreDataChanged(event) {\n        // 'move' action triggers a remove event first, we wait for the 'add' - no need to fill twice\n        if (event.isMove && event.action === 'remove') {\n            return;\n        }\n        this.fillStoreFromProject();\n    }\n    onAssignmentsChange() {\n        this.forEach(resourceWrapper => resourceWrapper.fillChildren());\n    }\n    onAssignmentsRefresh(event) {\n        if (event.action === 'batch') {\n            this.forEach(resourceWrapper => resourceWrapper.fillChildren());\n        }\n    }\n    onAssignmentsAdd({ records }) {\n        records.forEach(record => {\n            const resourceWrapper = this.getModelByOrigin(record?.resource);\n            resourceWrapper?.fillChildren();\n        });\n    }\n    onAssignmentUpdate({ record, changes }) {\n        // if assignment moved to another resource\n        if ('resource' in changes) {\n            const\n                // get assignment wrapper record\n                assignmentWrapper = this.getModelByOrigin(record),\n                // get new resource wrapper record\n                newResourceWrapper = this.getModelByOrigin(record?.resource);\n            // move assignment wrapper to new resource wrapper\n            if (assignmentWrapper && newResourceWrapper) {\n                newResourceWrapper.appendChild(assignmentWrapper);\n            }\n        }\n    }\n    onAssignmentsRemove({ records }) {\n        this.remove(records.map(record => this.getModelByOrigin(record)));\n    }\n    onEventUpdate({ record, changes }) {\n        if ('name' in changes) {\n            for (const assignment of record.assigned) {\n                const assignmentWrapper = this.getModelByOrigin(assignment);\n                assignmentWrapper.set('name', record.name);\n            }\n        }\n    }\n    fillStoreFromProject() {\n        const toAdd = [];\n        this._project?.resourceStore.forEach(resource => {\n            if (!resource.isSpecialRow) {\n                toAdd.push(this.modelClass.new({ origin : resource }));\n            }\n        });\n        this.removeAll();\n        this.add(toAdd);\n        /**\n         * Fires when store completes synchronization with original (Event/Resource/Assignment) stores\n         * @event fillFromProject\n         * @internal\n         */\n        this.trigger('fillFromProject');\n    }\n    remove() {\n        const removed = super.remove(...arguments);\n        // sanitize internal origin->wrapper Map\n        removed?.forEach(record => {\n            this._modelByOrigin.delete(record.origin);\n        });\n        return removed;\n    }\n    removeAll() {\n        super.removeAll(...arguments);\n        this._modelByOrigin.clear();\n    }\n    getModelByOrigin(origin) {\n        return this._modelByOrigin.get(origin);\n    }\n    setModelByOrigin(origin, model) {\n        return this._modelByOrigin.set(origin, model);\n    }\n}\nResourceUtilizationStore._$name = 'ResourceUtilizationStore';", "import Base from '../../Core/Base.js';\nconst sortFn = (a, b) => {\n    if (a < b) {\n        return -1;\n    }\n    else if (a > b) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n};\n/**\n * @module SchedulerPro/eventlayout/ProHorizontalLayout\n */\n/**\n * Mixin for SchedulerPro horizontal layouts ({@link SchedulerPro.eventlayout.ProHorizontalLayoutPack} and\n * {@link SchedulerPro.eventlayout.ProHorizontalLayoutStack}). Should not be used directly, instead specify\n * {@link Scheduler.view.mixin.SchedulerEventRendering#config-eventLayout} in the SchedulerPro config (`stack`, `pack`\n * or `none`):\n *\n * ```javascript\n * new SchedulerPro({\n *   eventLayout: 'stack'\n * });\n * ```\n *\n * ## Grouping events\n *\n * By default events are not grouped and are laid out inside the row using start and end dates. Using\n * {@link #config-groupBy} config you can group events inside the resource row. Every group will be laid out on its own\n * band, as if layout was applied to each group of events separately.\n *\n * {@inlineexample SchedulerPro/eventlayout/ProHorizontalLayout.js}\n *\n * ### By field value\n *\n * You can specify field name to group events by. The following snippet would put *high* prio events at the top:\n *\n * ```javascript\n * new SchedulerPro({\n *     eventLayout : {\n *         type    : 'stack',\n *         groupBy : 'prio'\n *     },\n *     project : {\n *         eventsData : [\n *             { id : 1, startDate : '2017-02-08', duration : 1, prio : 'low' },\n *             { id : 2, startDate : '2017-02-09', duration : 1, prio : 'high' },\n *             { id : 3, startDate : '2017-02-10', duration : 1, prio : 'high' },\n *         ],\n *         resourcesData : [\n *             { id : 1, name : 'Resource 1' }\n *         ],\n *         assignmentsData : [\n *             { id : 1, resource : 1, event : 1 },\n *             { id : 2, resource : 1, event : 2 },\n *             { id : 3, resource : 1, event : 3 }\n *         ]\n *     }\n * })\n * ```\n *\n * ### Order of groups\n *\n * Groups are **always** sorted ascending. In the example above *high* prio events are above *low* prio events because:\n *\n * ```javascript\n * 'high' < 'low' // true\n * ```\n *\n * If you want to group events in a specific order, you can define it in a\n * special {@link #config-weights} config:\n *\n * ```javascript\n * new SchedulerPro({\n *     eventLayout : {\n *         type    : 'stack',\n *         weights : {\n *             low  : 100,\n *             high : 200\n *         },\n *         groupBy : 'prio'\n *     }\n * });\n * ```\n *\n * This will put *low* prio events at the top.\n *\n * The weight value defaults to `Infinity` unless specified in the weights config explicitly.\n *\n * ### Using a function\n *\n * You can use a custom function to group events. The group function receives an event record as a single argument and\n * is expected to return a non-null value for the group. This allows you to arrange events in any order you like,\n * including grouping by multiple properties at once.\n *\n * The snippet below groups events by duration and priority by creating 4 weights:\n *\n * |       | high prio | low prio |\n * |-------|-----------|----------|\n * | long  |     2     |    10    |\n * | short |     3     |    15    |\n *\n * ```javascript\n * new SchedulerPro({\n *     eventLayout : {\n *         type    : 'stack',\n *         groupBy : event => {\n *             return (event.duration > 2 ? 2 : 3) * (event.prio === 'high' ? 1 : 5);\n *         }\n *     }\n * })\n * ```\n *\n * This will divide events into 4 groups as seen in this demo:\n *\n * {@inlineexample SchedulerPro/eventlayout/ProHorizontalLayout2.js}\n *\n * ## Manual event layout\n *\n * You can provide a custom function to layout events inside the row and set the row size as required using\n * {@link #config-layoutFn}. The function is called with an array of {@link EventRenderData render data} objects. The\n * custom function can iterate over those objects and position them inside the row using `top` and `height` attributes.\n * The function should return the total row height in pixels.\n *\n * Please note that using a custom layout function makes {@link SchedulerPro.view.SchedulerPro#config-rowHeight}\n * obsolete.\n *\n * {@inlineexample SchedulerPro/eventlayout/ProHorizontalLayoutFn.js}\n *\n * ```javascript\n * new SchedulerPro({\n *     eventLayout : {\n *         layoutFn : items => {\n *             // Put event element at random top position\n *             item.top = 100 * Math.random();\n *         }\n *     }\n * });\n * ```\n *\n * @mixin\n */\nexport default Target => class ProHorizontalLayout extends (Target || Base) {\n    static get configurable() {\n        return {\n            /**\n             * Type of horizontal layout. Supported values are `stack`, `pack` and `none`.\n             * @config {'stack'|'pack'|'none'}\n             */\n            type : null,\n            /**\n             * The weights config allows you to specify order of the event groups inside the row. Higher weights are\n             * placed further down in the row. If field value is not specified in the weights object, it will be\n             * assigned `Infinity` value and pushed to the bottom.\n             *\n             * Only applicable when {@link #config-groupBy} config is not a function:\n             *\n             * ```javascript\n             * new SchedulerPro({\n             *     eventLayout : {\n             *         type    : 'stack',\n             *         weights : {\n             *             // Events with high prio will be placed at the top, then medium,\n             *             // then low prio events.\n             *             high   : 100,\n             *             medium : 150,\n             *             low    : 200\n             *         },\n             *         groupBy : 'prio'\n             *     }\n             * });\n             * ```\n             *\n             * Only explicitly defined groups are put in separate bands inside the row:\n             *\n             * ```javascript\n             * new SchedulerPro({\n             *     eventLayout : {\n             *         // Pack layout is also supported\n             *         type : 'pack',\n             *         weights : {\n             *             // Events with high prio will be placed at the top. All other\n             *             // events will be put to the same group at the bottom\n             *             high : 100\n             *         },\n             *         groupBy : 'prio'\n             *     }\n             * });\n             * ```\n             * @config {Object<String,Number>}\n             */\n            weights : null,\n            /**\n             * Specifies a way to group events inside the row. Can accept either a model field name or a function which\n             * is provided with event record as a single argument and is expected to return group for the event.\n             *\n             * @config {String|Function}\n             * @param {SchedulerPro.model.EventModel} event Event record\n             * @returns {String} Group name for the event\n             */\n            groupBy : null,\n            groupByThisObj : null,\n            /**\n             * Supply a function to manually layout events. It accepts event layout data and should set `top`\n             * and `height` for every provided data item (left and width are calculated according to the event start\n             * date and duration). The function should return the total row height in pixels.\n             *\n             * For example, we can arrange events randomly in the row:\n             * ```javascript\n             * new SchedulerPro({\n             *     eventLayout : {\n             *         layoutFn : items => {\n             *             items.forEach(item => {\n             *                 item.top = Math.round(Math.random() * 100);\n             *                 item.height = Math.round(Math.random() * 100);\n             *             });\n             *\n             *             return 50;\n             *         }\n             *     }\n             * })\n             * ```\n             *\n             * If you need a reference to the scheduler pro instance, you can get that from the function scope (arrow\n             * function doesn't work here):\n             *\n             * ```javascript\n             * new SchedulerPro({\n             *     eventLayout : {\n             *         layoutFn(items) {\n             *             items.forEach(item => {\n             *                 item.top = Math.round(Math.random() * 100);\n             *                 item.height = Math.round(Math.random() * 100);\n             *             });\n             *\n             *             // note `scheduler`, not `schedulerPro`\n             *             return this.scheduler.rowHeight;\n             *         }\n             *     }\n             * })\n             * ```\n             *\n             * @config {Function}\n             * @param {EventRenderData[]} events Unordered array of event render data, sorting may be required\n             * @param {Scheduler.model.ResourceModel} resource The resource for which the events are being laid out.\n             * @returns {Number} Returns total row height\n             */\n            layoutFn : null\n        };\n    }\n    /**\n     * This method performs layout on an array of event render data and returns amount of _bands_. Band is a multiplier of a\n     * configured {@link Scheduler.view.Scheduler#config-rowHeight} to calculate total row height required to fit all\n     * events.\n     * This method should not be used directly, it is called by the Scheduler during the row rendering process.\n     * @method applyLayout\n     * @param {EventRenderData[]} events\n     * @param {Scheduler.model.ResourceModel} resource\n     * @returns {Number}\n     */\n    /**\n     * This method iterates over events and calculates top position for each of them. Default layouts calculate\n     * positions to avoid events overlapping horizontally (except for the 'none' layout). Pack layout will squeeze events to a single\n     * row by reducing their height, Stack layout will increase the row height and keep event height intact.\n     * This method should not be used directly, it is called by the Scheduler during the row rendering process.\n     * @method layoutEventsInBands\n     * @param {EventRenderData[]} events\n     */\n    /**\n     * Returns `true` if event {@link #config-groupBy grouper} is defined.\n     * @type {Boolean}\n     * @readonly\n     */\n    get grouped() {\n        return Boolean(this.groupBy);\n    }\n    /**\n     * Returns group for the passed event render data.\n     * @param {EventRenderData} layoutData\n     * @returns {*}\n     */\n    getGroupValue(layoutData) {\n        let result;\n        if (layoutData.group != null) {\n            result = layoutData.group;\n        }\n        else {\n            const\n                { groupBy, weights, groupByThisObj = this } = this,\n                { eventRecord }                             = layoutData;\n            if (typeof groupBy === 'function') {\n                result = groupBy.call(groupByThisObj, eventRecord);\n            }\n            else {\n                result = eventRecord.getValue(groupBy);\n                if (weights) {\n                    // If record value is null or undefined, use infinite weight to move record to the bottom\n                    result = weights[result] ?? Infinity;\n                }\n            }\n            layoutData.group = result;\n        }\n        return result;\n    }\n    /**\n     * Sorts events by group and returns ordered array of groups, or empty array if events are not grouped.\n     * @param {EventRenderData[]} events\n     * @returns {String[]}\n     */\n    getEventGroups(events) {\n        // If group fn is defined, we need to sort events array according to groups\n        if (this.grouped) {\n            const groups = new Set();\n            events.sort((a, b) => {\n                const\n                    aValue = this.getGroupValue(a),\n                    bValue = this.getGroupValue(b);\n                groups.add(aValue);\n                groups.add(bValue);\n                return sortFn(aValue, bValue);\n            });\n            return Array.from(groups).sort(sortFn);\n        }\n        else {\n            return [];\n        }\n    }\n};\n", "import ProHorizontalLayout from './ProHorizontalLayout.js';\nimport HorizontalLayoutStack from '../../Scheduler/eventlayout/HorizontalLayoutStack.js';\n/**\n * @module SchedulerPro/eventlayout/ProHorizontalLayoutStack\n */\n/**\n * Handles layout of events within a row (resource) in horizontal mode. Stacks events, increasing row height to fit\n * all overlapping events.\n *\n * This layout is used by default in horizontal mode.\n *\n * This layout supports grouping events inside the resource row. See\n * {@link SchedulerPro.eventlayout.ProHorizontalLayout} for more info.\n *\n * @mixes SchedulerPro/eventlayout/ProHorizontalLayout\n */\nexport default class ProHorizontalLayoutStack extends HorizontalLayoutStack.mixin(ProHorizontalLayout) {\n    static get $name() {\n        return 'ProHorizontalLayoutStack';\n    }\n    /**\n     * @hideconfigs type, weights, groupBy, layoutFn\n     */\n    // heightRun is used when pre-calculating row heights, taking a cheaper path\n    layoutEventsInBands(events, heightRun = false) {\n        this.getEventGroups(events);\n        return super.layoutEventsInBands(events, heightRun);\n    }\n}\nProHorizontalLayoutStack._$name = 'ProHorizontalLayoutStack';", "import ProHorizontalLayout from './ProHorizontalLayout.js';\nimport HorizontalLayoutPack from '../../Scheduler/eventlayout/HorizontalLayoutPack.js';\n/**\n * @module SchedulerPro/eventlayout/ProHorizontalLayoutPack\n */\n/**\n * Handles layout of events within a row (resource) in horizontal mode. Packs events (adjusts their height) to fit\n * available row height.\n *\n * This layout supports grouping events inside the resource row. See\n * {@link SchedulerPro.eventlayout.ProHorizontalLayout} for more info.\n *\n * @mixes SchedulerPro/eventlayout/ProHorizontalLayout\n */\nexport default class ProHorizontalLayoutPack extends HorizontalLayoutPack.mixin(ProHorizontalLayout) {\n    static get $name() {\n        return 'ProHorizontalLayoutPack';\n    }\n    /**\n     * @hideconfigs type, weights, groupBy, layoutFn\n     */\n    layoutEventsInBands(events) {\n        const\n            groups = this.getEventGroups(events),\n            // If we don't have any groups, treat it like we have a single group including all events\n            groupCount = groups.length || 1;\n        const result = this.packEventsInBands(events, (event, j, slot, slotSize) => {\n            const\n                size              = slotSize / groupCount,\n                groupIndex        = groupCount === 1 ? 0 : groups.indexOf(event.group),\n                adjustedSlotStart = groupIndex / groupCount;\n            // This height and top are used to position event in the grouped row\n            event.height = size;\n            event.top    = adjustedSlotStart + slot.start / groupCount + j * size;\n            // This height and top are used to layout events in the same band. They emulate a single row which is what\n            // pack logic expects\n            event.inBandHeight = slotSize;\n            event.inBandTop = slot.start + j * slotSize;\n        });\n        events.forEach(event => {\n            Object.assign(\n                event,\n                this.bandIndexToPxConvertFn.call(\n                    this.bandIndexToPxConvertThisObj || this,\n                    event.top,\n                    event.height,\n                    event.eventRecord,\n                    event.resourceRecord\n                )\n            );\n        });\n        return result;\n    }\n}\nProHorizontalLayoutPack._$name = 'ProHorizontalLayoutPack';", "import ArrayHelper from '../../Core/helper/ArrayHelper.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport ResourceTimeRangesBase from '../../Scheduler/feature/base/ResourceTimeRangesBase.js';\nimport ResourceTimeRangeModel from '../../Scheduler/model/ResourceTimeRangeModel.js';\n/**\n * @module SchedulerPro/feature/CalendarHighlight\n */\nlet counter = 0;\nclass CalendarHighlightModel extends ResourceTimeRangeModel {\n    static get $name() {\n        return 'CalendarHighlightModel';\n    }\n    static domIdPrefix = 'calendarhighlight';\n    // For nicer DOM, since the records are transient we do not need a fancy UUID\n    static generateId() {\n        return ++counter;\n    }\n}\n/**\n * This feature temporarily visualizes {@link SchedulerPro/model/CalendarModel calendars} for the event or resource\n * calendar (controlled by the {@link #config-calendar} config). The calendars are highlighted while a user is creating,\n * dragging or resizing a task. Enabling this feature makes it easier for the end user to understand the underlying\n * rules of the schedule.\n *\n * {@inlineexample SchedulerPro/feature/CalendarHighlight.js}\n *\n * ## Example usage\n *\n * ```javascript\n * new SchedulerPro({\n *     features : {\n *         calendarHighlight : {\n *             // visualize resource calendars while interacting with events\n *             calendar : 'resource'\n *         }\n *     }\n * })\n * ```\n *\n * This feature is **disabled** by default.\n *\n * @extends Scheduler/feature/base/ResourceTimeRangesBase\n * @classtype calendarHighlight\n * @feature\n * @demo SchedulerPro/highlight-event-calendars\n */\nexport default class CalendarHighlight extends ResourceTimeRangesBase {\n    //region Config\n    static get $name() {\n        return 'CalendarHighlight';\n    }\n    static get configurable() {\n        return {\n            /**\n             * A string defining which calendar(s) to highlight during drag drop, resize or create flows.\n             * Valid values are `event` or `resource`.\n             *\n             * @config {'event'|'resource'}\n             * @default\n             */\n            calendar : 'event',\n            /**\n             * A string defining which calendar(s) to highlight during drag drop, resize or create flows.\n             * Valid values are `event` or `resource`.\n             *\n             * @config {'event'|'resource'}\n             */\n            unhighlightOnDrop : null,\n            /**\n             * A callback function which is called when you interact with one or more events (e.g. drag drop) to\n             * highlight only available resources.\n             *\n             * ```javascript\n             * new SchedulerPro({\n             *     features : {\n             *         calendarHighlight : {\n             *             collectAvailableResources({ scheduler, eventRecords }) {\n             *                  const mainEvent = eventRecords[0];\n             *                  return scheduler.resourceStore.query(resource => resource.role === mainEvent.requiredRole || !mainEvent.requiredRole);\n             *              }\n             *         }\n             *     }\n             * });\n             * ```\n             *\n             * @param {Object} context A context object\n             * @param {SchedulerPro.view.SchedulerPro} context.scheduler The scheduler instance\n             * @param {Scheduler.model.EventModel[]} context.eventRecords The event records\n             * @returns {Scheduler.model.ResourceModel[]} An array with the available resource records\n             * @config {Function}\n             */\n            collectAvailableResources : null,\n            rangeCls                    : 'b-sch-highlighted-calendar-range',\n            resourceTimeRangeModelClass : CalendarHighlightModel,\n            inflate                     : 3\n        };\n    }\n    static get pluginConfig() {\n        const config  = super.pluginConfig;\n        config.assign = [\n            'highlightEventCalendars',\n            'highlightResourceCalendars',\n            'unhighlightCalendars'\n        ];\n        return config;\n    }\n    afterConstruct() {\n        super.afterConstruct();\n        this.client.ion({\n            eventDragStart   : 'onEventDragStart',\n            eventDragReset   : 'unhighlightCalendars',\n            eventResizeStart : 'onEventResizeStart',\n            eventResizeEnd   : 'unhighlightCalendars',\n            dragCreateStart  : 'onDragCreateStart',\n            afterDragCreate  : 'unhighlightCalendars',\n            thisObj          : this\n        });\n    }\n    //endregion\n    highlightCalendar(eventRecords, resourceRecords) {\n        eventRecords = ArrayHelper.asArray(eventRecords);\n        resourceRecords = ArrayHelper.asArray(resourceRecords);\n        if (this.calendar === 'event') {\n            this.highlightEventCalendars(eventRecords, resourceRecords);\n        }\n        else {\n            this.highlightResourceCalendars(resourceRecords);\n        }\n    }\n    // region public APIs\n    /**\n     * Highlights the time spans representing the calendars of the passed event records, and resource records.\n     * @on-owner\n     * @param {Scheduler.model.EventModel[]} eventRecords The event records\n     * @param {Scheduler.model.ResourceModel[]} [resourceRecords] The resource records\n     * @param {Boolean} [clearExisting] Provide `false` to leave previous highlight elements\n     */\n    highlightEventCalendars(eventRecords, resourceRecords, clearExisting = true) {\n        const\n            me                     = this,\n            { client }             = me,\n            { startDate, endDate } = client;\n        if (me.disabled) {\n            return;\n        }\n        if (clearExisting) {\n            me.unhighlightCalendars();\n        }\n        eventRecords = ArrayHelper.asArray(eventRecords);\n        if (!resourceRecords) {\n            resourceRecords = eventRecords.flatMap(event => event.$linkedResources);\n        }\n        me.highlight = new Map();\n        resourceRecords = ArrayHelper.asArray(resourceRecords);\n        eventRecords.forEach(eventRecord => {\n            if (!eventRecord.calendar) {\n                return;\n            }\n            const timespans = eventRecord.calendar\n                ?.getWorkingTimeRanges(startDate, endDate)\n                .map(timespan => new CalendarHighlightModel(timespan));\n            if (timespans) {\n                for (const resourceRecord of resourceRecords) {\n                    me.highlight.set(resourceRecord, timespans);\n                    client.currentOrientation.refreshEventsForResource(resourceRecord, true, false);\n                }\n                if (resourceRecords.length > 0) {\n                    client.currentOrientation.onRenderDone();\n                }\n            }\n        });\n        client.syncSplits?.(split => split.highlightEventCalendars(eventRecords, resourceRecords, clearExisting));\n    }\n    /**\n     * Highlights the time spans representing the working time calendars of the passed resource records.\n     * @on-owner\n     * @param {Scheduler.model.ResourceModel[]} resourceRecords The resource records\n     * @param {Boolean} [clearExisting] Provide `false` to leave previous highlight elements\n     */\n    highlightResourceCalendars(resourceRecords, clearExisting = true) {\n        const\n            me                                         = this,\n            { startDate, endDate, currentOrientation } = me.client;\n        if (me.disabled) {\n            return;\n        }\n        if (clearExisting) {\n            me.unhighlightCalendars();\n        }\n        // Highlight resource calendars\n        me.highlight = new Map();\n        for (const resourceRecord of resourceRecords) {\n            const timespans = resourceRecord.calendar\n                ?.getWorkingTimeRanges(startDate, endDate)\n                .map(timespan => new CalendarHighlightModel(timespan));\n            if (timespans) {\n                me.highlight.set(resourceRecord, timespans);\n                currentOrientation.refreshEventsForResource(resourceRecord, true, false);\n            }\n        }\n        if (resourceRecords.length > 0) {\n            currentOrientation.onRenderDone();\n        }\n        me.client.syncSplits?.(split => split.highlightResourceCalendars(resourceRecords, clearExisting));\n    }\n    /**\n     * Removes all highlight elements.\n     * @on-owner\n     */\n    unhighlightCalendars() {\n        const me = this;\n        if (!me.highlight) {\n            // We're not highlighting anything, bail out\n            return;\n        }\n        const\n            { currentOrientation } = me.client,\n            resources              = me.highlight.keys();\n        me.highlight = null;\n        for (const resource of resources) {\n            currentOrientation.refreshEventsForResource(resource, true, false);\n        }\n        currentOrientation.onRenderDone();\n        me.client.syncSplits?.(split => split.unhighlightCalendars());\n    }\n    // endregion\n    // region event listeners\n    onEventDragStart({ context }) {\n        if (this.disabled) {\n            return;\n        }\n        const\n            me               = this,\n            { client }       = me,\n            { eventRecords } = context,\n            resourceRecords  = context.availableResources =\n                client.features.eventDrag.constrainDragToResource\n                    ? [context.resourceRecord]\n                    : me.collectAvailableResources?.({\n                        scheduler : client,\n                        eventRecords\n                    }) ?? client.resourceStore.records;\n        me.highlightCalendar(eventRecords, resourceRecords);\n    }\n    onEventResizeStart({ eventRecord, resourceRecord }) {\n        if (!this.disabled) {\n            this.highlightCalendar(eventRecord, [resourceRecord]);\n        }\n    }\n    onDragCreateStart({ eventRecord, resourceRecord }) {\n        if (!this.disabled) {\n            this.highlightCalendar(eventRecord, [resourceRecord]);\n        }\n    }\n    // endregion\n    // Called on render of resources events to get events to render. Add any ranges\n    // (chained function from Scheduler)\n    getEventsToRender(resource, events) {\n        const timespans = this.highlight?.get(resource);\n        timespans && events.push(...timespans);\n        return events;\n    }\n    onEventDataGenerated(renderData) {\n        const { eventRecord } = renderData;\n        if (eventRecord.isCalendarHighlightModel) {\n            const { inflate } = this;\n            // Flag that we should fill entire row/col\n            renderData.fillSize = this.client.isVertical;\n            // Add our own cls\n            renderData.wrapperCls['b-sch-highlighted-calendar-range'] = 1;\n            // Add label\n            renderData.children.push({\n                className : 'b-sch-event-content',\n                html      : eventRecord.name,\n                dataset   : {\n                    taskBarFeature : 'content'\n                }\n            });\n            // Inflate\n            renderData.width += inflate * 2;\n            renderData.height += inflate * 2;\n            renderData.left -= inflate;\n            renderData.top -= inflate;\n            // Event data for DOMSync comparison, unique per calendar & resource combination\n            renderData.eventId = `${this.generateElementId(eventRecord)}-resource-${renderData.resourceRecord.id}`;\n        }\n    }\n    updateDisabled(disabled, was) {\n        super.updateDisabled(disabled, was);\n        if (disabled) {\n            this.unhighlightCalendars();\n        }\n    }\n    shouldInclude(eventRecord) {\n        return eventRecord.isCalendarHighlightModel;\n    }\n    // No classname on Scheduler's/Gantt's element\n    get featureClass() {}\n}\nCalendarHighlight._$name = 'CalendarHighlight'; GridFeatureManager.registerFeature(CalendarHighlight, false, 'SchedulerPro');\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport SchedulerDependencyEdit from '../../Scheduler/feature/DependencyEdit.js';\nimport '../../Core/widget/Checkbox.js';\nimport TransactionalFeature from '../../Scheduler/feature/mixin/TransactionalFeature.js';\n/**\n * @module SchedulerPro/feature/DependencyEdit\n */\n/**\n * Feature that displays a popup containing fields for editing dependency data.\n *\n * This feature is **disabled** by default.\n *\n * For info on enabling it, see {@link Grid/view/mixin/GridFeatures}.\n *\n * {@inlineexample SchedulerPro/feature/DependencyEdit.js}\n *\n * @demo SchedulerPro/dependencies/\n *\n * @extends Scheduler/feature/DependencyEdit\n * @classtype dependencyEdit\n * @feature\n *\n * @typings Scheduler.feature.DependencyEdit -> Scheduler.feature.SchedulerDependencyEdit\n */\nexport default class DependencyEdit extends TransactionalFeature(SchedulerDependencyEdit) {\n    //region Config\n    static get $name() {\n        return 'DependencyEdit';\n    }\n    static get configurable() {\n        return {\n            /**\n             * True to show the lag field for the dependency\n             * @config {Boolean}\n             * @default\n             * @category Editor widgets\n             */\n            showLagField : true,\n            editorConfig : {\n                items : {\n                    activeField : {\n                        type  : 'checkbox',\n                        name  : 'active',\n                        label : 'L{Active}'\n                    }\n                }\n            }\n        };\n    }\n    //endregion\n    async editDependency(record) {\n        if (await super.editDependency(record)) {\n            await this.startFeatureTransaction();\n        }\n    }\n    afterSave() {\n        this.finishFeatureTransaction().then(() => {\n            super.afterSave();\n        });\n    }\n    afterDelete() {\n        this.finishFeatureTransaction().then(() => {\n            super.afterDelete();\n        });\n    }\n    afterCancel() {\n        this.rejectFeatureTransaction();\n        super.afterCancel();\n    }\n}\nDependencyEdit._$name = 'DependencyEdit'; GridFeatureManager.registerFeature(DependencyEdit, false);\n", "import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport Tooltip from '../../Core/widget/Tooltip.js';\n/**\n * @module SchedulerPro/feature/EventBuffer\n */\n/**\n * Feature that allows showing additional time before & after an event, to visualize things like travel time - or the time you\n * need to prepare a room for a meeting + clean it up after.\n *\n * The feature relies on two model fields: {@link SchedulerPro.model.EventModel#field-preamble} and\n * {@link SchedulerPro.model.EventModel#field-postamble} which are used to calculate overall start and end dates used to\n * position the event. Buffer time overlaps the same way events overlap (as you can see in the inline demo below). It\n * should also be noted that buffer time is ignored for milestones.\n *\n * {@inlineexample SchedulerPro/feature/EventBuffer.js}\n *\n * This feature is **disabled** by default\n *\n * @extends Core/mixin/InstancePlugin\n * @classtype eventBuffer\n * @feature\n * @demo SchedulerPro/travel-time\n */\nexport default class EventBuffer extends InstancePlugin {\n    static get $name() {\n        return 'EventBuffer';\n    }\n    static get configurable() {\n        return {\n            /**\n             * Show buffer duration labels\n             * @config {Boolean}\n             * @default\n             */\n            showDuration : true,\n            /**\n             * A function which receives data about the buffer time and returns a html string to show in a tooltip when\n             * hovering a buffer time element\n             *\n             * @config {Function}\n             * @param {Object} data Data\n             * @param {Core.data.Duration} data.duration Buffer time duration\n             * @param {Boolean} data.before `true` if this is a buffer time before the event start, `false` if after\n             * @param {SchedulerPro.model.EventModel} data.eventRecord The event record\n             * @returns {String} String representing the HTML markup\n             */\n            tooltipTemplate : {\n                value   : null,\n                $config : 'nullify'\n            }\n        };\n    }\n    static get pluginConfig() {\n        return {\n            chain : ['onEventDataGenerated']\n        };\n    }\n    //region Chained methods\n    updateTooltipTemplate(tooltipTemplate) {\n        const me = this;\n        if (tooltipTemplate) {\n            me.tooltip = Tooltip.new({\n                forElement  : me.client.timeAxisSubGridElement,\n                forSelector : '.b-sch-event-buffer-before,.b-sch-event-buffer-after',\n                align       : {\n                    align  : 'b-t',\n                    offset : [0, 10]\n                },\n                getHtml({ activeTarget }) {\n                    const\n                        eventRecord = me.client.resolveEventRecord(activeTarget),\n                        before      = activeTarget.matches('.b-sch-event-buffer-before'),\n                        duration    = before ? eventRecord.preamble : eventRecord.postamble;\n                    return me.tooltipTemplate({ eventRecord, duration, before });\n                }\n            });\n        }\n        else {\n            me.tooltip?.destroy();\n        }\n    }\n    onEventDataGenerated({ useEventBuffer, bufferBeforeWidth, bufferAfterWidth, eventRecord, wrapperChildren }) {\n        if (this.enabled && useEventBuffer) {\n            const\n                { isHorizontal }        = this.client,\n                { showDuration }        = this,\n                sizeProp                = isHorizontal ? 'width' : 'height',\n                preambleConfig          = {},\n                postambleConfig         = {};\n            let { preamble, postamble } = eventRecord;\n            this.renderer?.({ eventRecord, preambleConfig, postambleConfig });\n            if (!preamble?.magnitude) {\n                preamble = null;\n            }\n            if (!postamble?.magnitude) {\n                postamble = null;\n            }\n            wrapperChildren.push(\n                {\n                    className : {\n                        'b-sch-event-buffer'        : 1,\n                        'b-sch-event-buffer-before' : 1,\n                        'b-buffer-thin'             : !bufferBeforeWidth,\n                        [preambleConfig.cls]        : preambleConfig.cls\n                    },\n                    style : {\n                        [`${sizeProp}`] : `${bufferBeforeWidth}px`\n                    },\n                    children : (showDuration && preamble) ? [\n                        preambleConfig.icon ? {\n                            tag       : 'i',\n                            className : preambleConfig.icon\n                        } : undefined,\n                        {\n                            tag       : 'span',\n                            className : 'b-buffer-label',\n                            text      : preambleConfig.text ?? preamble.toString(true)\n                        }\n                    ] : undefined\n                },\n                {\n                    className : {\n                        'b-sch-event-buffer'       : 1,\n                        'b-sch-event-buffer-after' : 1,\n                        'b-buffer-thin'            : !bufferAfterWidth,\n                        [postambleConfig.cls]      : postambleConfig.cls\n                    },\n                    style : {\n                        [`${sizeProp}`] : `${bufferAfterWidth}px`\n                    },\n                    children : (showDuration && postamble) ? [\n                        {\n                            tag       : 'span',\n                            className : 'b-buffer-label',\n                            text      : postambleConfig.text ?? postamble.toString(true)\n                        },\n                        postambleConfig.icon ? {\n                            tag       : 'i',\n                            className : postambleConfig.icon\n                        } : undefined\n                    ] : undefined\n                }\n            );\n        }\n    }\n    //endregion\n    updateShowDuration() {\n        if (!this.isConfiguring) {\n            this.client.refreshWithTransition();\n        }\n    }\n    doDisable(disable) {\n        super.doDisable(disable);\n        const { client } = this;\n        if (!client.isConfiguring && client.isPainted) {\n            // Add a special CSS class to disable certain transitions\n            client.element.classList.add('b-eventbuffer-transition');\n            client.refreshWithTransition();\n            client.waitForAnimations().then(() => {\n                client.element.classList.remove('b-eventbuffer-transition');\n            });\n        }\n    }\n}\nEventBuffer._$name = 'EventBuffer'; GridFeatureManager.registerFeature(EventBuffer, false, 'SchedulerPro');\n", "import EventDrag from '../../Scheduler/feature/EventDrag.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\n/**\n * @module SchedulerPro/feature/EventSegmentDrag\n */\n/**\n * Allows user to drag and drop event segments within the row.\n *\n * {@inlineexample SchedulerPro/feature/EventSegments.js}\n *\n * This feature is **enabled** by default\n *\n * @extends Scheduler/feature/EventDrag\n * @classtype eventSegmentDrag\n * @feature\n */\nexport default class EventSegmentDrag extends EventDrag {\n    //region Config\n    static $name = 'EventSegmentDrag';\n    static get defaultConfig() {\n        return {\n            constrainDragToResource : true\n        };\n    }\n    static get configurable() {\n        return {\n            capitalizedEventName : 'EventSegment'\n        };\n    }\n    static get pluginConfig() {\n        return {\n            chain : ['onInternalPaint', 'isEventElementDraggable']\n        };\n    }\n    //endregion\n    //region Events\n    /**\n     * Fired on the owning Scheduler to allow implementer to use asynchronous finalization by setting\n     * `context.async = true` in the listener, to show a confirmation popup etc.\n     * ```javascript\n     *  scheduler.on('beforeEventSegmentDropFinalize', ({ context }) => {\n     *      context.async = true;\n     *      setTimeout(() => {\n     *          // async code don't forget to call finalize\n     *          context.finalize();\n     *      }, 1000);\n     *  })\n     * ```\n     *\n     * For synchronous one-time validation, simply set `context.valid` to true or false.\n     * ```javascript\n     *  scheduler.on('beforeEventSegmentDropFinalize', ({ context }) => {\n     *      context.valid = false;\n     *  })\n     * ```\n     * @event beforeEventSegmentDropFinalize\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source Scheduler instance\n     * @param {Object} context\n     * @param {Boolean} context.async Set true to not finalize the drag-drop operation immediately (e.g. to wait for user confirmation)\n     * @param {Scheduler.model.EventModel[]} context.eventRecords Dragged segments\n     * @param {Boolean} context.valid Set this to `false` to abort the drop immediately.\n     * @param {Function} context.finalize Call this method after an **async** finalization flow, to finalize the drag-drop operation. This method accepts one\n     * argument: pass `true` to update records, or `false` to ignore changes\n     */\n    /**\n     * Fired on the owning Scheduler after an event segment is dropped\n     * @event afterEventSegmentDrop\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source\n     * @param {Scheduler.model.EventModel[]} eventRecords Dropped segments\n     * @param {Boolean} valid\n     * @param {Object} context\n     */\n    /**\n     * Fired on the owning Scheduler when an event segment is dropped\n     * @event eventSegmentDrop\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source\n     * @param {Scheduler.model.EventModel[]} eventRecords Dropped segments\n     */\n    /**\n     * Fired on the owning Scheduler before event segment dragging starts. Return `false` to prevent the action.\n     * @event beforeEventSegmentDrag\n     * @on-owner\n     * @preventable\n     * @param {Scheduler.view.Scheduler} source Scheduler instance\n     * @param {Scheduler.model.EventModel[]} eventRecords Segments to drag\n     * @param {MouseEvent} event Browser event\n     */\n    /**\n     * Fired on the owning Scheduler when event segment dragging starts\n     * @event eventSegmentDragStart\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source Scheduler instance\n     * @param {Scheduler.model.EventModel[]} eventRecords Dragged segments\n     * @param {MouseEvent} event Browser event\n     */\n    /**\n     * Fired on the owning Scheduler when event segments are dragged\n     * @event eventSegmentDrag\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source Scheduler instance\n     * @param {Scheduler.model.EventModel[]} eventRecords Dragged segments\n     * @param {Date} startDate Start date for the current location\n     * @param {Date} endDate End date for the current location\n     * @param {Object} context\n     * @param {Boolean} context.valid Set this to `false` to signal that the current drop position is invalid.\n     */\n    /**\n     * Fired on the owning Scheduler after an event segment drag operation has been aborted\n     * @event eventSegmentDragAbort\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source Scheduler instance\n     * @param {Scheduler.model.EventModel[]} eventRecords Dragged segments\n     */\n    /**\n     * Fired on the owning Scheduler after an event segment drag operation regardless of the operation being cancelled\n     * or not\n     * @event eventSegmentDragReset\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source Scheduler instance\n     */\n    //endregion\n    //region Drag events\n    getTriggerParams(dragData) {\n        const { assignmentRecords, eventRecords, resourceRecord, browserEvent: event } = dragData;\n        return {\n            // `context` is now private, but used in WebSocketHelper\n            context : dragData,\n            eventRecords,\n            resourceRecord,\n            assignmentRecords,\n            event\n        };\n    }\n    triggerEventDrag(dragData, start) {\n        this.scheduler.trigger('eventSegmentDrag', Object.assign(this.getTriggerParams(dragData), {\n            startDate : dragData.startDate,\n            endDate   : dragData.endDate\n        }));\n    }\n    triggerDragStart(dragData) {\n        this.scheduler.navigator.skipNextClick = true;\n        this.scheduler.trigger('eventSegmentDragStart', this.getTriggerParams(dragData));\n    }\n    triggerDragAbort(dragData) {\n        this.scheduler.trigger('eventSegmentDragAbort', this.getTriggerParams(dragData));\n    }\n    triggerDragAbortFinalized(dragData) {\n        this.scheduler.trigger('eventSegmentDragAbortFinalized', this.getTriggerParams(dragData));\n    }\n    triggerAfterDrop(dragData, valid) {\n        this.scheduler.trigger('afterEventSegmentDrop', Object.assign(this.getTriggerParams(dragData), {\n            valid\n        }));\n        if (!valid) {\n            // Edge cases:\n            // 1. If this drag was a no-op, and underlying data was changed while drag was ongoing (e.g. web socket\n            // push), we need to manually force a view refresh to ensure a correct render state\n            //\n            // or\n            // 2. Events were removed before we dropped at an invalid point\n            const\n                { assignmentStore, eventStore } = this.client,\n                needRefresh                     = this.dragData.initialAssignmentsState.find(({\n                    resource, assignment\n                }, i) => {\n                    return !assignmentStore.includes(assignment) ||\n                        !eventStore.includes(assignment.event) ||\n                        resource.id !== this.dragData.assignmentRecords[i]?.resourceId;\n                });\n            if (needRefresh) {\n                this.client.refresh();\n            }\n        }\n    }\n    //endregion\n    //region Update records\n    /**\n     * Update events being dragged.\n     * @private\n     * @param context Drag data.\n     * @async\n     */\n    async updateRecords(context) {\n        const\n            me             = this,\n            { client }     = me,\n            copyKeyPressed = false;\n        let result;\n        if (!context.externalDropTarget) {\n            client.eventStore.suspendAutoCommit();\n            result = await me.updateSegment(client, context, copyKeyPressed);\n            client.eventStore.resumeAutoCommit();\n        }\n        // Tell the world there was a successful drop\n        client.trigger('eventSegmentDrop', Object.assign(me.getTriggerParams(context), {\n            isCopy               : copyKeyPressed,\n            event                : context.browserEvent,\n            targetEventRecord    : context.targetEventRecord,\n            targetResourceRecord : context.newResource,\n            externalDropTarget   : context.externalDropTarget\n        }));\n        return result;\n    }\n    /**\n     * Update assignments being dragged\n     * @private\n     * @async\n     */\n    async updateSegment(client, context) {\n        // The code is written to emit as few store events as possible\n        const\n            me                  = this,\n            isVertical          = client.mode === 'vertical',\n            {\n                eventRecords,\n                assignmentRecords,\n                timeDiff\n            }                   = context;\n        client.suspendRefresh();\n        let updated = false;\n        if (isVertical) {\n            eventRecords.forEach((draggedEvent, i) => {\n                const eventBar = context.eventBarEls[i];\n                delete draggedEvent.instanceMeta(client).hasTemporaryDragElement;\n                // If it was created by a call to scheduler.currentOrientation.addTemporaryDragElement\n                // then release it back to be available to DomSync next time the rendered event block\n                // is synced.\n                if (eventBar.dataset.transient) {\n                    eventBar.remove();\n                }\n            });\n        }\n        const\n            eventBarEls  = context.eventBarEls.slice(),\n            draggedEvent = context.eventRecord,\n            newStartDate = me.adjustStartDate(context.origStart, timeDiff);\n        if (!DateHelper.isEqual(draggedEvent.startDate, newStartDate)) {\n            client.endListeningForBatchedUpdates();\n            me.cancelBatchUpdate(draggedEvent);\n            draggedEvent.startDate = newStartDate;\n            updated = true;\n            await client.project.commitAsync();\n            me.endBatchUpdate?.(draggedEvent);\n        }\n        client.resumeRefresh(false);\n        if (assignmentRecords.length > 0) {\n            if (!updated) {\n                context.valid = false;\n            }\n            else {\n                // https://github.com/bryntum/support/issues/630\n                // Force re-render when using fillTicks. If date changed within same tick the element won't actually\n                // change and since we hijacked it for drag it won't be returned to its original position\n                if (client.fillTicks) {\n                    eventBarEls.forEach(el => delete el.lastDomConfig);\n                }\n                // Not doing full refresh above, to allow for animations\n                client.refreshWithTransition();\n            }\n        }\n    }\n    //endregion\n    //region Drag data\n    // Prevent event draggind when it starts over a resize handle\n    isEventElementDraggable(eventElement, eventRecord, el, event) {\n        const me = this;\n        // ALLOW event drag:\n        // - if segments dragging is disabled or event is not segmented\n        if (me.disabled || !(eventRecord.isEventSegment || eventRecord.segments)) {\n            return true;\n        }\n        // otherwise make sure EventDrag is not trying to handle a segment element drag\n        return !el.closest(me.drag.targetSelector);\n    }\n    buildDragHelperConfig() {\n        const config = super.buildDragHelperConfig();\n        config.targetSelector = '.b-sch-event-segment:not(.b-first)';\n        return config;\n    }\n    getMinimalDragData(info) {\n        const\n            me                = this,\n            { client }        = me,\n            element           = me.getElementFromContext(info),\n            eventRecord       = client.resolveEventRecord(element),\n            resourceRecord    = client.resolveResourceRecord(element),\n            assignmentRecord  = client.resolveAssignmentRecord(element),\n            assignmentRecords = assignmentRecord ? [assignmentRecord] : [],\n            eventRecords      = [eventRecord];\n        return {\n            eventRecord,\n            resourceRecord,\n            assignmentRecord,\n            eventRecords,\n            assignmentRecords\n        };\n    }\n    beginBatchUpdate(eventRecord) {\n        eventRecord.event.beginBatch();\n        eventRecord.beginBatch();\n    }\n    endBatchUpdate(eventRecord) {\n        // could be no \"event\" if segments got merged after dragging\n        eventRecord.event?.endBatch();\n        eventRecord.endBatch();\n    }\n    cancelBatchUpdate(eventRecord) {\n        eventRecord.event?.cancelBatch();\n        eventRecord.cancelBatch();\n    }\n    setupProductDragData(info) {\n        const\n            me            = this,\n            { client }    = me,\n            element       = me.getElementFromContext(info),\n            {\n                eventRecord,\n                resourceRecord\n            }             = me.getMinimalDragData(info),\n            eventBarEls   = [],\n            mainEventElement = client.getElementsFromEventRecord(eventRecord.event, resourceRecord, true)[0];\n        if (me.constrainDragToResource && !resourceRecord) {\n            throw new Error('Resource could not be resolved for event: ' + eventRecord.id);\n        }\n        // We tweak last segment drag in RTL mode so its X-ccordinate is always zero\n        // so we have to tell DragHelper to still process corresponding drop event though\n        // the coordinate hasn't changed\n        me.drag.ignoreSamePositionDrop = !client.rtl || eventRecord.nextSegment;\n        // During this batch we want the client's UI to update itself using the proposed changes\n        // Only if startDrag has not already done it\n        if (!client.listenToBatchedUpdates) {\n            client.beginListeningForBatchedUpdates();\n        }\n        // Do changes in batch mode while dragging\n        me.beginBatchUpdate(eventRecord);\n        const\n            dateConstraints    = me.getDateConstraints?.(resourceRecord, eventRecord),\n            constrainRectangle = me.constrainRectangle = me.getConstrainingRectangle(dateConstraints, resourceRecord, eventRecord),\n            eventRegion        = Rectangle.from(element, client.foregroundCanvas, true),\n            mainEventRegion    = Rectangle.from(mainEventElement, client.foregroundCanvas, true);\n        // For segment we shift constrainRectangle by the main event offset\n        constrainRectangle.translate(-mainEventRegion.x);\n        super.setupConstraints(\n            constrainRectangle,\n            eventRegion,\n            client.timeAxisViewModel.snapPixelAmount,\n            Boolean(dateConstraints.start)\n        );\n        eventBarEls.push(element);\n        return {\n            record          : eventRecord,\n            draggedEntities : [eventRecord],\n            dateConstraints : dateConstraints?.start ? dateConstraints : null,\n            eventBarEls,\n            mainEventElement\n        };\n    }\n    suspendRecordElementRedrawing() {}\n    suspendElementRedrawing() {}\n    getDateConstraints(resourceRecord, eventRecord) {\n        let { minDate, maxDate } = super.getDateConstraints(resourceRecord, eventRecord);\n        // A segment movement is constrained by its neighbour segments if any\n        if (eventRecord.previousSegment && (!minDate || minDate < eventRecord.previousSegment.endDate)) {\n            minDate = eventRecord.previousSegment.endDate;\n        }\n        if (eventRecord.nextSegment && (!maxDate || maxDate < eventRecord.nextSegment.startDate)) {\n            maxDate = eventRecord.nextSegment.startDate;\n        }\n        return {\n            start : minDate,\n            end   : maxDate\n        };\n    }\n    get tipId() {\n        return `${this.client.id}-segment-drag-tip`;\n    }\n    internalSnapToPosition(snapTo) {\n        super.internalSnapToPosition();\n        // for RTL we pin last segment to 0px offset ..the main event element will get updated\n        if (this.client.rtl && !this.dragData.eventRecord.nextSegment) {\n            snapTo.x = 0;\n        }\n    }\n    updateDragContext(context, event) {\n        super.updateDragContext(...arguments);\n        const\n            { client } = this,\n            {\n                dirty,\n                eventRecord,\n                endDate\n            } = this.dragData;\n        // If dragging the last segment update the main event width accordingly\n        // need this to update dependency properly while dragging\n        if (dirty && !eventRecord.nextSegment) {\n            const { enableEventAnimations } = client;\n            client.enableEventAnimations = false;\n            eventRecord.event.set('endDate', endDate);\n            if (client.features.eventBuffer?.enabled) {\n                eventRecord.event.wrapEndDate = endDate;\n            }\n            client.enableEventAnimations = enableEventAnimations;\n        }\n    }\n    //endregion\n}\nEventSegmentDrag._$name = 'EventSegmentDrag'; GridFeatureManager.registerFeature(EventSegmentDrag, true, 'SchedulerPro');\nGridFeatureManager.registerFeature(EventSegmentDrag, false, 'ResourceHistogram');\n", "import ArrayHelper from '../../Core/helper/ArrayHelper.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport DomSync from '../../Core/helper/DomSync.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport AttachToProjectMixin from '../../Scheduler/data/mixin/AttachToProjectMixin.js';\n/**\n * @module SchedulerPro/feature/NestedEvents\n */\nconst borderWidths     = {\n    border : 1,\n    hollow : 2\n};\n// Future improvements might include:\n// * Add info to EventTooltip, parent could display number of children, child could display parent name\n// * Add parent picker to EventEdit\n// * Handle reassigning in editor, what happens if you reassign to a resource that events parent is not assigned to...\n/**\n * A feature that renders child events nested inside their parent. Requires Scheduler Pro to use a tree event store\n * (normally handled automatically when events in data has children).\n *\n * {@inlineexample SchedulerPro/feature/NestedEvents.js}\n *\n * The feature has configs for {@link #config-eventLayout}, {@link #config-resourceMargin} and {@link #config-barMargin}\n * that are separate from those on Scheduler Pro and only affect nested events.\n *\n * You can by default drag nested events out of their parents and drop any event onto root level events to nest. The\n * drag and drop behaviour can be customized using the {@link #config-constrainDragToParent},\n * {@link #config-allowNestingOnDrop} and {@link #config-allowDeNestingOnDrop} configs.\n *\n * <div class=\"note\">Note that for a nested event to show up for a resource both the parent and the nested event has to\n * be assigned to that resource.</div>\n *\n * ## Parent / children scheduling\n *\n * Scheduler Pro uses a scheduling engine closely related to the one used by Gantt (a subset of it). It for example\n * schedules based on calendars (skipping non-working time), dependencies and constraints.\n *\n * ### Scheduling parents\n *\n * Part of the scheduling engines default logic is that parent events' start and end dates (and thus duration) is\n * defined by their children. This means that if you remove the latest scheduled child of a parent, the parents end date\n * and duration will be adjusted to match the new latest scheduled child (shrink-wrapping children).\n *\n * Depending on what you plan to use nested events for in your application, this might not be the desired behaviour. If\n * you want the parent event to keep its dates regardless of its children, you should flag it as\n * {@link SchedulerPro/model/EventModel#field-manuallyScheduled}.\n *\n * {@note}\n * Not that by flagging an event as manually scheduled, it will no longer take non-working time or constraints into\n * account either.\n * {/@note}\n *\n * A parent defined like this will shrink / grow with its children:\n *\n * ```json\n * {\n *     \"id\"        : 1,\n *     \"startDate\" : \"2022-03-24\",\n *     \"children\"  : [\n *         ...\n *     ]\n * }\n * ```\n *\n * Try removing an event here to see what happens:\n *\n * {@inlineexample SchedulerPro/feature/NestedEventsNotManually.js}\n *\n * A parent with `manuallyScheduled : true` will **not** shrink / grow with is children:\n *\n * ```json\n * {\n *     \"id\"                : 1,\n *     \"startDate\"         : \"2022-03-24\",\n *     \"duration\"          : 10,\n *     \"manuallyScheduled\" : true\n *     \"children\"          : [\n *         ...\n *     ]\n * }\n * ```\n *\n * Try the same thing here:\n *\n * {@inlineexample SchedulerPro/feature/NestedEventsManually.js}\n *\n * {@note}Note that this also makes resizing a parent event that is not manually scheduled useless, it would only snap\n * back to the dates defined by its children. To avoid confusion, resizing is turned off for parent events unless they\n * have <code>manuallyScheduled: true</code>{/@note}\n *\n * #### Drag and drop for parent events\n *\n * Normally the dates of a parent event is defined by its children (as described above), with exception for when drag\n * dropping a parent event along the time axis. In this case the operation will update the dates of all the children,\n * which will thus also move the parent event in time.\n *\n * If a parent event is dragged to a new resource, all its children will also be assigned to that resource.\n *\n * ### Scheduling children (nested events)\n *\n * Nested events are scheduled using much of the same logic as normal/parent events, but with some differences:\n *\n * * To maintain the relative position in time of nested events within their parent, they utilize a `delayFromParent`\n *   field. The field accepts a magnitude of `durationUnit` (defaults to days). Sample dataset (note that supplying\n *   `delayFromParent` is optional, see the next bullet):\n *\n *   ```json\n *   {\n *     \"name\" : \"Parent\",\n *     \"startDate\" : \"2023-08-21\", // Monday\n *     \"children\" : [\n *       { \"name\" : \"Child 1\", \"delayFromParent\" : 0 }\n *       { \"name\" : \"Child 2\", \"delayFromParent\" : 2 }\n *     ]\n *   }\n *   ```\n *\n *   Parent starts on 2023-08-21, the first child will start on the same date, the second child will start 2 days later\n *   (2023-08-23).\n *\n *   If the parent instead started on a Friday, the outcome would be that the second child starts 2 working days later,\n *   which would be the following Tuesday.\n *\n *   Note that when supplying `delayFromParent` in data, since parent events shrink wrap their children, the earliest\n *   child must have `\"delayFromParent\": 0`.\n *\n * * If `delayFromParent` is not present in the loaded data, the field is calculated as `nestedStart - parentStart -\n *   non-working time` (for example if parent starts on a Friday, and nested event on a Monday, `delayFromParent` will\n *   be 1). Sample dataset:\n *\n *    ```json\n *   {\n *     \"name\" : \"Parent\",\n *     \"startDate\" : \"2023-08-21\", // Monday\n *     \"children\" : [\n *       { \"name\" : \"Child 1\", \"startDate\" : \"2023-08-21\" },\n *       { \"name\" : \"Child 2\", \"startDate\" : \"2023-08-23\" }\n *     ]\n *   }\n *   ```\n *\n *   Yields the same result as above, parent and first child starts on 2023-08-21, second child starts 2 days later.\n *   Child 1 gets `delayFromParent: 0` and child 2 gets `delayFromParent: 2` from the calculation.\n *\n * ## Dependencies\n *\n * Nested events support dependencies, with some caveats:\n *\n * * Dependency lines are by default drawn on the top of events, instead of behind them. This is to ensure they are\n *   visible when drawn into a parent (or fully within one). The Dependencies feature can be configured with\n *   {@link Scheduler/feature/Dependencies#config-drawAroundParents} set to `true` to instead attempt to draw around\n *   parents when possible.\n * * When using dependencies, the body of parent events with overflowing nested children is not scrollable. This is\n *   because there is no tracking of the scrolling of parent events, and thus dependency lines would not be drawn\n *   correctly on scroll.\n * * Dependencies are only supported for one level of nesting (with `maxNesting: 1`, which is the default).\n *\n * {@inlineexample SchedulerPro/feature/NestedEventsDependencies.js}\n *\n * ## Caveats\n *\n * Usage of the feature comes with some requirements/caveats:\n * * As already mentioned, it requires a tree event store\n * * Requires using an AssignmentStore, the legacy single assignment mode does not handle tree stores\n * * Scheduler must use stack or overlap {@link SchedulerPro/view/SchedulerPro#config-eventLayout}, pack not supported\n * * {@link Scheduler/feature/EventDragSelect} is not supported\n * * Multi event drag is not supported for nested events\n * * Cannot {@link Scheduler/feature/EventDragCreate} within parent events\n * * {@link Scheduler/feature/Labels} are not supported for nested events\n * * {@link SchedulerPro/feature/EventBuffer} won't work with nested events\n * * {@link SchedulerPro/feature/TaskEdit} does not allow assigning resources or dependencies to nested events\n *\n * This feature is **disabled** by default.\n * For info on enabling it, see {@link Grid.view.mixin.GridFeatures}.\n *\n * @classtype nestedEvents\n *\n * @extends Core/mixin/InstancePlugin\n * @feature\n */\nexport default class NestedEvents extends InstancePlugin.mixin(AttachToProjectMixin, Delayable) {\n    static $name = 'NestedEvents';\n    //region Config\n    static configurable = {\n        /**\n         * This config defines how to handle overlapping nested events. Valid values are:\n         * - `stack`, events use fixed height and stack on top of each other (not supported in vertical mode)\n         * - `pack`, adjusts event height\n         * - `none`, allows events to overlap\n         *\n         * <div class=\"note\">Note that stacking works differently for nested events as compared to normal events (and\n         * not at all in vertical mode). The height of the parent event will never change, all nested events use\n         * {@link #config-eventHeight fixed height} and will stack until all available space is consumed, after which\n         * they will overflow the parent.</div>\n         *\n         * <div class=\"note\">Also note that stacked nested events are clipped by the parent, making it scrollable on\n         * vertical overflow. This cannot be combined with sticky events. If stacking events in your app won't overflow\n         * the parent, you can specify `overflow: visible` on `.b-nested-events-container.b-nested-events-layout-stack`\n         * to not clip and make sticky events work.</div>\n         *\n         * @prp {'stack'|'pack'|'none'}\n         * @default\n         */\n        eventLayout : 'pack',\n        /**\n         * Vertical (horizontal in vertical mode) space between nested event bars, in px\n         * @prp {Number}\n         * @default\n         */\n        barMargin : 5,\n        /**\n         * Control how much space to leave between the first nested event bar/last nested event and the parent event (top/bottom\n         * margin within the parent event row in horizontal mode, left/right margin within the parent event column in\n         * vertical mode), in px.\n        *\n        * It's also possible to set different values for top/left and bottom/right\n        * by assigning  an object to `resourceMargin` with `start` (margin top in horizontal mode,\n        * margin left in vertical mode) and `end` (margin bottom / margin right) properties:\n        * ```javascript\n        * scheduler = new SchedulerPro({\n        *     features : {\n        *         nestedEvents : {\n        *             resourceMargin : {\n        *                 start : 15,\n        *                 end   : 1\n        *             }\n        *         }\n        *     }\n        * });\n        * ```\n        *\n        * @prp {Number|ResourceMarginConfig}\n        * @category Scheduled events\n        */\n        resourceMargin : 0,\n        /**\n         * Fixed event height (width in vertical mode) to use when configured with `eventLayout : 'stack'`.\n         *\n         * Also accepts an array, used to control height for each level if nesting deeper than 1 level. Make sure you\n         * supply a value for each level, where later values are smaller than earlier ones.\n         *\n         * ```javascript\n         * const scheduler = new SchedulerPro({\n         *     features : {\n         *         nestedEvents : {\n         *         eventHeight : [40, 20]\n         *     }\n         * });\n         * ```\n         *\n         * @prp {Number|Number[]}\n         * @default\n         */\n        eventHeight : 30,\n        /**\n         * Space (in px) in a parent element reserved for displaying a title etc. Used to compute available space for\n         * the nested events container inside the parent.\n         *\n         * Setting this config updates the ` --schedulerpro-nested-event-header-height` CSS variable.\n         *\n         * @prp {Number}\n         * @default\n         */\n        headerHeight : 20,\n        /**\n         * Constrains dragging of nested events within their parent when configured as `true`, allows them to be\n         * dragged out of it when configured as `false` (the default).\n         * @prp {Boolean}\n         * @default\n         */\n        constrainDragToParent : false,\n        /**\n         * Allow an event to be dropped on another to nest it.\n         *\n         * Dropping an event on another will add the dropped event as a child of the target, turning the target into a\n         * parent if it was not already.\n         *\n         * Parent events dropped on another event are ignored.\n         *\n         * @prp {Boolean}\n         * @default\n         */\n        allowNestingOnDrop : true,\n        /**\n         * Allow dropping a nested event directly on a resource to de-nest it, turning it into an ordinary event.\n         *\n         * Requires {@link #config-constrainDragToParent} to be configured with `false` to be applicable.\n         *\n         * @prp {Boolean}\n         * @default\n         */\n        allowDeNestingOnDrop : true,\n        /**\n         * Constrains resizing of nested events to their parents start and end dates when configured as `true` (the\n         * default), preventing them from changing their parents dates.\n         *\n         * Configure as `false` if you want to allow resizing operations to extend the parents dates (only applies for\n         * parents not configured with `manuallyScheduled: true`).\n         *\n         * <div class=\"note\">Note that when using `eventLayout: stack` the nested events are clipped by the parent, the\n         * part extending outside if not constrained to parent will not be shown until it re-renders after resize. If\n         * stacking events in your app won't overflow the parent, you can specify `overflow: visible` on\n         * `.b-nested-events-container.b-nested-events-layout-stack` to not clip.</div>\n         *\n         * @prp {Boolean}\n         * @default\n         */\n        constrainResizeToParent : true,\n        /**\n         * Maximum nesting level for events.\n         *\n         * Larger depths than 2 are not recommended, even if technically possible.\n         *\n         * @prp {Number}\n         * @default\n         */\n        maxNesting : 1\n    };\n    static pluginConfig = {\n        before : ['onEventStoreBatchedUpdate'],\n        chain  : [\n            'getEventsToRender', 'processEventDrop', 'processCrossSchedulerEventDrop',\n            'beforeEventDragStart', 'afterEventDragStart', 'afterEventDragAbortFinalized',\n            'checkEventDragValidity', 'afterEventResizeStart', 'afterRenderEvent'\n        ],\n        override : [\n            'getResourceMarginObject', 'getBarMargin', 'getAppliedResourceHeight', 'getResourceWidth', 'getEventLayout',\n            'getElementFromAssignmentRecord', 'scheduleEvent'\n        ]\n    };\n    static delayable = {\n        refreshClient : 'raf'\n    };\n    //endregion\n    construct(client, config) {\n        super.construct(client, config);\n        // EventStore has to be a tree store for the feature to work.\n        // If it starts empty, it might not be flagged as such. Help it out.\n        this.client.eventStore.tree = true;\n    }\n    refreshClient() {\n        this.client.refreshWithTransition();\n    }\n    possiblyRefreshClient() {\n        !this.client.isConfiguring && this.refreshClient();\n    }\n    doDisable() {\n        this.possiblyRefreshClient();\n    }\n    //region Props\n    updateEventLayout(layout) {\n        if (layout === 'stack' && this.client.isVertical) {\n            console.warn('Stacked nested events are not supported in vertical mode');\n        }\n        this.possiblyRefreshClient();\n    }\n    updateBarMargin() {\n        this.possiblyRefreshClient();\n    }\n    updateResourceMargin() {\n        this.possiblyRefreshClient();\n    }\n    changeEventHeight(height) {\n        // Always an array for internal use, would be breaking to change it externally\n        this._eventHeights = ArrayHelper.asArray(height);\n        return height;\n    }\n    updateEventHeight() {\n        this.possiblyRefreshClient();\n    }\n    updateHeaderHeight(height) {\n        this.client.element.style.setProperty('--schedulerpro-nested-event-header-height', `${height}px`);\n        this.possiblyRefreshClient();\n    }\n    // Nested events has their own layout setting\n    getEventLayout(resourceRecord, parentEventRecord) {\n        if (parentEventRecord) {\n            return { type : this.eventLayout };\n        }\n        return this.overridden.getEventLayout(resourceRecord);\n    }\n    // Specific resource margin for nested events\n    getResourceMarginObject(resourceRecord, parentEventRecord) {\n        if (parentEventRecord && !parentEventRecord.isRoot) {\n            const margin = this.resourceMargin;\n            if (typeof margin === 'number') {\n                return {\n                    start : margin,\n                    end   : margin,\n                    total : margin * 2\n                };\n            }\n            else {\n                margin.total = margin.start + margin.end;\n                return margin;\n            }\n        }\n        return this.overridden.getResourceMarginObject(resourceRecord);\n    }\n    // Specific bar margin for nested events\n    getBarMargin(resourceRecord, parentEventRecord) {\n        if (parentEventRecord && !parentEventRecord.isRoot) {\n            return this.barMargin;\n        }\n        return this.overridden.getBarMargin(resourceRecord);\n    }\n    // Use height available inside the parent event\n    getAppliedResourceHeight(resourceRecord, parentEventRecord) {\n        const me = this;\n        if (parentEventRecord && !parentEventRecord.isRoot) {\n            if (me.eventLayout === 'stack') {\n                const\n                    eventHeight = me._eventHeights[parentEventRecord.childLevel],\n                    { total } = me.getResourceMarginObject(resourceRecord, parentEventRecord);\n                // Layout subtracts resourceMargin.start + resourceMargin.end, added here to get eventHeight correct after\n                return eventHeight + total;\n            }\n            else {\n                const borderWidth = borderWidths[me.client.getEventStyle(parentEventRecord, resourceRecord)] ?? 0;\n                return me.currentParentsHeight - me.headerHeight - borderWidth;\n            }\n        }\n        return me.overridden.getAppliedResourceHeight(resourceRecord);\n    }\n    getResourceWidth(resourceRecord, parentEventRecord) {\n        if (parentEventRecord && !parentEventRecord.isRoot) {\n            return this.currentParentsWidth - this.headerHeight;\n        }\n        return this.overridden.getResourceWidth(resourceRecord);\n    }\n    //endregion\n    //region CRUD listeners\n    attachToEventStore(eventStore) {\n        eventStore?.ion({\n            name    : 'eventStore',\n            change  : 'onEventStoreChange',\n            thisObj : this\n        });\n    }\n    onEventStoreChange({ records }) {\n        // Refresh if a nested event was changed (but not if it is aborting a drag, which might occur if there is\n        // dependency pinning the nested event & drop changes delayFromParent in a way that the dep still pins it)\n        if (!this.client.features?.eventDrag.isDragging && records?.some(r => r.parent && !r.parent.isRoot)) {\n            this.refreshClient();\n        }\n    }\n    onEventStoreBatchedUpdate({ records }) {\n        // Refresh if a nested event was changed, and we are listening for batched changes (resizing)\n        if (this.client.listenToBatchedUpdates && records?.some(r => r.parent && !r.parent.isRoot)) {\n            this.refreshClient();\n            // Prevent default handler\n            return false;\n        }\n    }\n    //endregion\n    //region Drag\n    // Move event element to foreground canvas during drag. Has to happen before drag starts for the feature to pick up\n    // correct coordinates to resolve resource by, transition back to on abort etc.\n    beforeEventDragStart(context, dragData) {\n        const\n            me                                 = this,\n            { client }                         = me,\n            { eventRecord, assignmentRecords } = dragData,\n            { parentElement }                  = context.element;\n        // Dragging nested events?\n        if (eventRecord.parent && parentElement !== client.foregroundCanvas) {\n            me.isDraggingNestedEvent = true;\n            // Remember origin to be able to restore on abort (success redraws so that will be covered anyway)\n            context.originalParentElement = parentElement;\n            context.originalBounds = [];\n            for (const assignment of assignmentRecords) {\n                const { event } = assignment;\n                // UI should not allow selecting nested events from different parents, but it is programmatically\n                // possible. We only include from the dragged events parent here, behaviour for mixed parents are for\n                // now undefined\n                if (event.parent === eventRecord.parent) {\n                    const eventElement = client.getElementFromAssignmentRecord(assignment, true);\n                    context.originalBounds.push({\n                        element : eventElement,\n                        bounds  : Rectangle.from(eventElement, parentElement)\n                    });\n                    if (!me.constrainDragToParent && client.features.eventDrag.constrainDragToTimeline) {\n                        // Pull nested events out\n                        const relativeBounds = Rectangle.from(eventElement, client.timeAxisSubGridElement);\n                        eventElement.style.top = `${relativeBounds.top}px`;\n                        eventElement.style.left = `${relativeBounds.left}px`;\n                        DomSync.addChild(client.foregroundCanvas, eventElement, assignment.id);\n                    }\n                }\n            }\n        }\n        else {\n            me.isDraggingNestedEvent = false;\n        }\n    }\n    // Setup constraints when drag starts if needed\n    afterEventDragStart(context, dragData) {\n        // Constrain to current parent?\n        if (this.isDraggingNestedEvent && this.constrainDragToParent) {\n            const\n                { eventDrag } = this.client.features,\n                { parent }    = dragData.eventRecord,\n                parentBounds  = context.originalParentElement.getBoundingClientRect();\n            // Constrain top / bottom\n            eventDrag.setYConstraint(0, parentBounds.height - context.originalBounds[0].bounds.height);\n            // For left / right we also have to constrain the dates, otherwise only the element will be constrained\n            eventDrag.setXConstraint(0, parentBounds.width - context.originalBounds[0].bounds.width);\n            dragData.dateConstraints = { start : parent.startDate, end : parent.endDate };\n        }\n    }\n    checkEventDragValidity({ targetEventRecord, eventRecord, timeDiff, newResource, resourceRecord }) {\n        const me = this;\n        // Disallow dropping on a blank space in a resource if configured to not allow de-nesting\n        // (ignore first round, targetEventRecord cannot be resolved until on next, which we determine here by checking\n        // timeDiff or resource change)\n        if (me.isDraggingNestedEvent && !me.allowDeNestingOnDrop && !targetEventRecord && (timeDiff || newResource !== resourceRecord)) {\n            return {\n                valid   : false,\n                message : me.L('L{deNestingNotAllowed}')\n            };\n        }\n        // Disallow dropping on a new parent if configured to not allow nesting\n        if (!me.allowNestingOnDrop && targetEventRecord && targetEventRecord !== eventRecord.parent) {\n            return {\n                valid   : false,\n                message : me.L('L{nestingNotAllowed}')\n            };\n        }\n        if (targetEventRecord && targetEventRecord !== eventRecord.parent) {\n            const\n                maxLevel           = me.maxNesting,\n                targetLevel        = targetEventRecord.isParent ? targetEventRecord.childLevel : targetEventRecord.parent.childLevel,\n                maxChildLevel      = Math.max(...eventRecord.allChildren.map(child => child.childLevel)),\n                relativeChildLevel = maxChildLevel - eventRecord.childLevel;\n            if (targetLevel + relativeChildLevel >= maxLevel) {\n                return {\n                    valid   : false,\n                    message : me.L('L{nestingNotAllowed}')\n                };\n            }\n        }\n    }\n    // Move event to new parent if dropped on a parent or moved out of one\n    processEventDrop({ context, toScheduler, eventRecord, resourceRecord, reassignedFrom, element, eventsToAdd, addedEvents, draggedAssignment }) {\n        const\n            { parent }            = eventRecord,\n            { targetEventRecord } = context;\n        let newParent = parent;\n        // targetEventRecord is resolved using mouse coords, it might be outside of parent when constrained thus\n        // we have to check if constrained here to not move it out by mistake\n        if (parent !== targetEventRecord && !this.constrainDragToParent) {\n            // Dropped on a new parent and allowed to nest\n            if (targetEventRecord && this.allowNestingOnDrop) {\n                // Allow creating a new parent if dropped on a child of root, otherwise add to the parent\n                newParent = targetEventRecord.isParent ? targetEventRecord : targetEventRecord.parent.isRoot ? targetEventRecord : targetEventRecord.parent;\n                // We resolve resource and targetEventRecord differently (mouse vs element), might get next resource so\n                // we re-resolve here to be sure it is correct\n                const targetResource = this.client.resolveResourceRecord(context.browserEvent);\n                if (targetResource !== resourceRecord) {\n                    resourceRecord = draggedAssignment.resource = targetResource;\n                }\n            }\n            // Dropped directly on resource and allowed to de-nest (cant get here if not allowed, blocked in validation)\n            else {\n                newParent = toScheduler.eventStore.rootNode;\n            }\n            if (newParent && newParent !== parent) {\n                addedEvents.push(newParent.appendChild(eventRecord));\n                // Don't want to add it to root when dragging to another scheduler\n                ArrayHelper.remove(eventsToAdd, eventRecord);\n            }\n        }\n        // Moved parent to new resource, reassign all children assigned to its previous resource\n        if (eventRecord.isParent && reassignedFrom && reassignedFrom !== resourceRecord) {\n            for (const child of eventRecord.allChildren) {\n                const existingAssignment = child.assignments.find(a => a.resource === reassignedFrom);\n                if (existingAssignment) {\n                    existingAssignment.resource = resourceRecord;\n                }\n            }\n        }\n        // Add to new parent (or put back in old) matching outer position. If we don't do this element might get released\n        // on DomSync of foregroundCanvas (also this lets it transition within the parent)\n        if (newParent && !newParent.isRoot) {\n            const newParentElement = this.client.getElementFromEventRecord(newParent, resourceRecord).syncIdMap.nestedEventsContainer;\n            // If dropped on a root level leaf it has no nested events container yet\n            if (newParentElement) {\n                const\n                    containerBounds = Rectangle.from(newParentElement, this.client.foregroundCanvas),\n                    intersection    = Rectangle.from(element, newParentElement);\n                // To move proxy to correct position (relative to new parent) on abort\n                context.context.elementStartX -= containerBounds.x;\n                context.context.elementStartY -= containerBounds.y;\n                // Position proxy inside new parent, at where it was dropped\n                element.style.top = `${intersection.top}px`;\n                element.style.left = `${intersection.left}px`;\n                // If dropped at the same position in a new parent it won't transition into place if it thinks nothing\n                // changed\n                element.lastDomConfig = null;\n                DomSync.addChild(newParentElement, element, element.dataset.syncId);\n            }\n        }\n    }\n    // Assign all children to same resource when dropping on another scheduler\n    processCrossSchedulerEventDrop({ eventRecord }) {\n        if (eventRecord.isParent) {\n            for (const child of eventRecord.allChildren) {\n                child.resource = eventRecord.resource;\n            }\n        }\n    }\n    // Restore element after abort (back to original parent and position)\n    async afterEventDragAbortFinalized({ originalParentElement, originalBounds }) {\n        if (this.isDraggingNestedEvent) {\n            // Wait for any position transition\n            for (const animation of originalBounds[0].element.getAnimations()) {\n                if (animation.transitionProperty === 'top' || animation.transitionProperty === 'left') {\n                    await animation.finished;\n                }\n            }\n            for (const { element, bounds } of originalBounds) {\n                // Move it back\n                element.style.top = `${bounds.top}px`;\n                element.style.left = `${bounds.left}px`;\n                originalParentElement.appendChild(element);\n            }\n        }\n    }\n    // Limit resizing to parent bounds if configured to do so (it is the default)\n    afterEventResizeStart(context) {\n        if (this.constrainResizeToParent) {\n            const { parent } = context.timespanRecord;\n            if (parent && !parent.isRoot) {\n                let { startDate, endDate } = parent;\n                if (context.dateConstraints) {\n                    startDate = DateHelper.max(startDate, context.dateConstraints.start);\n                    endDate = DateHelper.min(endDate, context.dateConstraints.end);\n                }\n                context.dateConstraints = {\n                    start : startDate,\n                    end   : endDate\n                };\n            }\n        }\n    }\n    //endregion\n    //region Overrides to make scheduler work with nested events\n    // Let Scheduler resolve nested events too\n    getElementFromAssignmentRecord(assignmentRecord, returnWrapper) {\n        if (assignmentRecord?.event?.parent && !assignmentRecord.event.parent.isRoot) {\n            const parentElement = this.client.getElementFromEventRecord(assignmentRecord.event.parent, assignmentRecord.resource);\n            return parentElement && DomSync.getChild(parentElement, `nestedEventsContainer.${assignmentRecord.id}${returnWrapper ? '' : '.event'}`);\n        }\n        return this.overridden.getElementFromAssignmentRecord(assignmentRecord, returnWrapper);\n    }\n    // Allow scheduling nested events by overriding Schedulers implementation\n    async scheduleEvent({ eventRecord, parentEventRecord, startDate, element }) {\n        // When passed a parent, append to it and assign to its resource\n        if (parentEventRecord) {\n            eventRecord.startDate = startDate;\n            eventRecord = parentEventRecord.appendChild(eventRecord);\n            eventRecord.assign(parentEventRecord.resource);\n            // When given an element, it is positioned inside the parent and adopted by DomSync, letting it transition\n            if (element) {\n                const\n                    parentElement = this.client.getElementFromEventRecord(parentEventRecord).syncIdMap.nestedEventsContainer,\n                    eventRect     = Rectangle.from(element, parentElement);\n                // Clear translate styles used by DragHelper\n                DomHelper.setTranslateXY(element, 0, 0);\n                DomHelper.setTopLeft(element, eventRect.y, eventRect.x);\n                DomSync.addChild(parentElement, element, eventRecord.assignments[0].id);\n            }\n            await this.client.project.commitAsync();\n        }\n        else {\n            return this.overridden.scheduleEvent(...arguments);\n        }\n    }\n    //endregion\n    //region Rendering\n    // Hook into event collection to filter out children, since they will be rendered inside their parents\n    getEventsToRender(resourceRecord, eventRecords) {\n        if (!this.disabled) {\n            // Only keep direct children of the root (?. in case someone tries to use a flat store)\n            ArrayHelper.remove(eventRecords, ...eventRecords.filter(eventRecord => eventRecord.isEventModel && !eventRecord.parent.isRoot));\n        }\n        return eventRecords;\n    }\n    afterRenderEvent({ renderData }) {\n        const\n            { eventRecord } = renderData,\n            { childLevel }  = eventRecord;\n        if (eventRecord.isParent) {\n            const\n                me = this,\n                { resourceRecord, width, height, left, top, wrapperCls } = renderData;\n            wrapperCls.add('b-nested-events-parent');\n            me.currentParentsHeight = height;\n            me.currentParentsWidth = width;\n            const\n                {\n                    currentOrientation,\n                    isVertical\n                }                      = me.client,\n                assignedChildren       = eventRecord.children.filter(e => e.$linkedResources?.includes(resourceRecord)),\n                // This call uses the same render path as normal events, applying event layout etc. The layout is then\n                // as needed patched up below (to be relative to parent etc)\n                layouts                = currentOrientation.layoutEvents(resourceRecord, assignedChildren, { viewport : true }, eventRecord, me.overlappingEventSorter),\n                nestedEvents           = [];\n            let eventsData;\n            if (isVertical) {\n                eventsData = [];\n                for (const layout of Object.values(layouts)) {\n                    eventsData.push(layout.renderData);\n                }\n            }\n            else {\n                eventsData = layouts?.eventsData;\n            }\n            if (eventsData) {\n                for (const layout of eventsData) {\n                    // Positioned inside parent\n                    if (isVertical) {\n                        layout.left -= left;\n                        layout.top -= top;\n                        layout.absoluteTop = layout.top;\n                    }\n                    else {\n                        // Special handling for overlap, it does not use the same render path as other layouts\n                        if (me.eventLayout === 'none') {\n                            layout.top = 0;\n                            layout.height = me.getAppliedResourceHeight(resourceRecord, eventRecord);\n                        }\n                        // Stack also needs some special handling of height, since it uses fixed event height\n                        else if (me.eventLayout === 'stack') {\n                            layout.height = me._eventHeights[childLevel];\n                        }\n                        layout.absoluteLeft = layout.left;\n                        layout.left -= (renderData.absoluteLeft ?? left);\n                        layout.absoluteTop = layout.top;\n                    }\n                    const domConfig = currentOrientation.renderEvent(isVertical ? { renderData : layout } : layout, height);\n                    domConfig.className['b-nested-event'] = 1;\n                    nestedEvents.push(domConfig);\n                }\n            }\n            const containerDomConfig = {\n                className : {\n                    'b-nested-events-container'                  : 1,\n                    [`b-nested-events-layout-${me.eventLayout}`] : 1\n                },\n                dataset : {\n                    taskBarFeature : 'nestedEventsContainer'\n                },\n                children    : nestedEvents,\n                syncOptions : {\n                    syncIdField      : 'syncId',\n                    releaseThreshold : 0\n                }\n            };\n            // renderData is reused, children are cached. We want ours to be up to date\n            const\n                { children } = renderData,\n                index        = children.findIndex(child => child.dataset.taskBarFeature === 'nestedEventsContainer');\n            if (index === -1) {\n                children.push(containerDomConfig);\n            }\n            else {\n                children.splice(index, 1, containerDomConfig);\n            }\n        }\n        renderData.elementConfig.dataset.level = childLevel;\n    }\n    //endregion\n}\nNestedEvents._$name = 'NestedEvents'; GridFeatureManager.registerFeature(NestedEvents, false, 'SchedulerPro');\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport ResourceTimeRangesBase from '../../Scheduler/feature/base/ResourceTimeRangesBase.js';\nimport ResourceTimeRangeModel from '../../Scheduler/model/ResourceTimeRangeModel.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\n/**\n * @module SchedulerPro/feature/ResourceNonWorkingTime\n */\n/**\n * Feature that highlights the non-working intervals for resources based on their {@link SchedulerPro.model.ResourceModel#field-calendar}.\n * If a resource has no calendar defined, the project's calendar will be used. The non-working time interval can\n * also be recurring. You can find a live example showing how to achieve this in the [Resource Non-Working Time Demo](../examples/resource-non-working-time/).\n *\n * {@inlineexample SchedulerPro/feature/ResourceNonWorkingTime.js}\n *\n * ## Data structure\n * Example data defining calendars and assigning the resources a calendar:\n * ```javascript\n * {\n *   \"success\"   : true,\n *   \"calendars\" : {\n *       \"rows\" : [\n *           {\n *               \"id\"                       : \"day\",\n *               \"name\"                     : \"Day shift\",\n *               \"unspecifiedTimeIsWorking\" : false,\n *               \"cls\"                      : \"dayshift\",\n *               \"intervals\"                : [\n *                   {\n *                       \"recurrentStartDate\" : \"at 8:00\",\n *                       \"recurrentEndDate\"   : \"at 17:00\",\n *                       \"isWorking\"          : true,\n *                   }\n *               ]\n *           }\n *    ],\n *    \"resources\" : {\n *       \"rows\" : [\n *           {\n *               \"id\"         : 1,\n *               \"name\"       : \"George\",\n *               \"calendar\"   : \"day\",\n *               \"role\"       : \"Office\",\n *               \"eventColor\" : \"blue\"\n *           },\n *           {\n *               \"id\"         : 2,\n *               \"name\"       : \"Rob\",\n *               \"calendar\"   : \"day\",\n *               \"role\"       : \"Office\",\n *               \"eventColor\" : \"blue\"\n *           }\n *        ]\n *   [...]\n * ```\n *\n * ```javascript\n * const scheduler = new SchedulerPro({\n *   // A Project holding the data and the calculation engine for Scheduler Pro. It also acts as a CrudManager, allowing\n *   // loading data into all stores at once\n *   project : {\n *       autoLoad  : true,\n *       transport : {\n *           load : {\n *               url : './data/data.json'\n *           }\n *       }\n *   },\n *   features : {\n *       resourceNonWorkingTime : true\n *   },\n *   [...]\n * }):\n * ```\n *\n * ## Styling non-working time interval elements\n *\n * To style the elements representing the non-working time elements you can set the {@link SchedulerPro.model.CalendarModel#field-cls}\n * field in your data. This will add a CSS class to all non-working time elements for the calendar. You can also add\n * an {@link SchedulerPro.model.CalendarModel#field-iconCls} value specifying an icon to display inside the interval.\n *\n * ```javascript\n * {\n *   \"success\"   : true,\n *   \"calendars\" : {\n *       \"rows\" : [\n *           {\n *               \"id\"                       : \"day\",\n *               \"name\"                     : \"Day shift\",\n *               \"unspecifiedTimeIsWorking\" : false,\n *               \"cls\"                      : \"dayshift\",\n *               \"intervals\"                : [\n *                   {\n *                       \"recurrentStartDate\" : \"at 8:00\",\n *                       \"recurrentEndDate\"   : \"at 17:00\",\n *                       \"isWorking\"          : true\n *                   }\n *               ]\n *           }\n *       ]\n *    }\n * }\n * ```\n *\n * You can also add a `cls` value and an `iconCls` to **individual** intervals:\n *\n * ```javascript\n * {\n *   \"success\"   : true,\n *   \"calendars\" : {\n *       \"rows\" : [\n *           {\n *               \"id\"                       : \"day\",\n *               \"name\"                     : \"Day shift\",\n *               \"unspecifiedTimeIsWorking\" : true,\n *               \"intervals\"                : [\n *                   {\n *                      \"startDate\"          : \"2022-03-23T02:00\",\n *                      \"endDate\"            : \"2022-03-23T04:00\",\n *                      \"isWorking\"          : false,\n *                      \"cls\"                : \"factoryShutdown\",\n *                      \"iconCls\"            : \"warningIcon\"\n *                  }\n *               ]\n *           }\n *       ]\n *    }\n * }\n * ```\n *\n * This feature is **disabled** by default.\n * For info on enabling it, see {@link Grid.view.mixin.GridFeatures}.\n *\n * @extends Scheduler/feature/base/ResourceTimeRangesBase\n * @demo SchedulerPro/resource-non-working-time\n * @classtype resourceNonWorkingTime\n * @feature\n */\nexport default class ResourceNonWorkingTime extends ResourceTimeRangesBase {\n    //region Config\n    static $name = 'ResourceNonWorkingTime';\n    static configurable = {\n        rangeCls : 'b-sch-resourcenonworkingtime',\n        /**\n         * The largest time axis unit to display non working ranges for ('hour' or 'day' etc).\n         * When zooming to a view with a larger unit, no non-working time elements will be rendered.\n         *\n         * **Note:** Be careful with setting this config to big units like 'year'. When doing this,\n         * make sure the timeline {@link Scheduler.view.TimelineBase#config-startDate start} and\n         * {@link Scheduler.view.TimelineBase#config-endDate end} dates are set tightly.\n         * When using a long range (for example many years) with non-working time elements rendered per hour,\n         * you will end up with millions of elements, impacting performance.\n         * When zooming, use the {@link Scheduler.view.mixin.TimelineZoomable#config-zoomKeepsOriginalTimespan} config.\n         * @config {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'}\n         * @default\n         */\n        maxTimeAxisUnit : 'hour',\n        /**\n         * Set to `true` to allow mouse interactions with the rendered range elements. By default, the range elements\n         * are not reachable with the mouse, and only serve as a static background.\n         * @prp {Boolean}\n         * @default\n         */\n        enableMouseEvents : false,\n        /**\n         * The Model class to use for representing a {@link Scheduler.model.ResourceTimeRangeModel}\n         * @config {Scheduler.model.ResourceTimeRangeModel}\n         * @typings {typeof ResourceTimeRangeModel}\n         */\n        resourceTimeRangeModelClass : ResourceTimeRangeModel,\n        entityName : 'resourceNonWorkingTime'\n    };\n    // Cannot use `static properties = {}`, new Map would pollute the prototype\n    static get properties() {\n        return {\n            resourceMap : new Map()\n        };\n    };\n    //endregion\n    //region Constructor\n    construct() {\n        super.construct(...arguments);\n        this.resourceTimeRangeModelClass = class ResourceNonWorkingTimeModel extends this.resourceTimeRangeModelClass {\n            static $name = 'ResourceNonWorkingTimeModel';\n            static domIdPrefix = 'resourcenonworkingtimemodel';\n        };\n        this.client.timeAxis.ion({\n            name        : 'timeAxis',\n            reconfigure : 'onTimeAxisReconfigure',\n            // should trigger before event rendering chain\n            prio        : 100,\n            thisObj     : this\n        });\n    }\n    //endregion\n    //region Events\n    /**\n     * Triggered for mouse down ona resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured\n     * with `enableMouseEvents: true`.\n     * @event resourceNonWorkingTimeMouseDown\n     * @param {SchedulerPro.view.SchedulerPro} source This Scheduler\n     * @param {SchedulerPro.feature.ResourceNonWorkingTime} feature The ResourceNonWorkingTime feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n    /**\n     * Triggered for mouse up ona resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured\n     * with `enableMouseEvents: true`.\n     * @event resourceNonWorkingTimeMouseUp\n     * @param {SchedulerPro.view.SchedulerPro} source This Scheduler\n     * @param {SchedulerPro.feature.ResourceNonWorkingTime} feature The ResourceNonWorkingTime feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n    /**\n     * Triggered for click on a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured with\n     * `enableMouseEvents: true`.\n     * @event resourceNonWorkingTimeClick\n     * @param {SchedulerPro.view.SchedulerPro} source This Scheduler\n     * @param {SchedulerPro.feature.ResourceNonWorkingTime} feature The ResourceNonWorkingTime feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n    /**\n     * Triggered for double-click on a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured\n     * with `enableMouseEvents: true`.\n     * @event resourceNonWorkingTimeDblClick\n     * @param {SchedulerPro.view.SchedulerPro} source This Scheduler\n     * @param {SchedulerPro.feature.ResourceNonWorkingTime} feature The ResourceNonWorkingTime feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n    /**\n     * Triggered for right-click on a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured\n     * with `enableMouseEvents: true`.\n     * @event resourceNonWorkingTimeContextMenu\n     * @param {SchedulerPro.view.SchedulerPro} source This Scheduler\n     * @param {SchedulerPro.feature.ResourceNonWorkingTime} feature The ResourceNonWorkingTime feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n    /**\n     * Triggered for mouse over on a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured\n     * with `enableMouseEvents: true`.\n     * @event resourceNonWorkingTimeMouseOver\n     * @param {SchedulerPro.view.SchedulerPro} source This Scheduler\n     * @param {SchedulerPro.feature.ResourceNonWorkingTime} feature The ResourceNonWorkingTime feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n    /**\n     * Triggered for mouse out of a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured\n     * with `enableMouseEvents: true`.\n     * @event resourceNonWorkingTimeMouseOut\n     * @param {SchedulerPro.view.SchedulerPro} source This Scheduler\n     * @param {SchedulerPro.feature.ResourceNonWorkingTime} feature The ResourceNonWorkingTime feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n    //endregion\n    //region Init\n    attachToResourceStore(resourceStore) {\n        super.attachToResourceStore(resourceStore);\n        resourceStore?.ion({\n            name            : 'resourceStore',\n            changePreCommit : 'onResourceChange',\n            thisObj         : this\n        });\n    }\n    attachToCalendarManagerStore(calendarManagerStore) {\n        super.attachToCalendarManagerStore(calendarManagerStore);\n        calendarManagerStore?.ion({\n            name            : 'calendarManagerStore',\n            changePreCommit : 'onCalendarChange',\n            thisObj         : this\n        });\n    }\n    //endregion\n    //region Events\n    onTimeAxisReconfigure() {\n        // reset ranges cache on timeAxis change\n        this.resourceMap.clear();\n    }\n    onResourceChange({ action, records, record, changes }) {\n        const me = this;\n        // Might need to redraw on update\n        if (action === 'update') {\n            const change = changes.calendar;\n            // Ignore calendar normalization\n            if (change && (typeof change.oldValue !== 'string' || change.value?.id !== change.oldValue)) {\n                me.resourceMap.delete(record.id);\n                // Redraw row in case calendar change did not affect any events\n                me.client.runWithTransition(() => {\n                    me.client.currentOrientation.refreshEventsForResource(record);\n                });\n            }\n        }\n        // Keep map up to date on removals (adds are handled through rendering in getEventsToRender)\n        if (action === 'remove') {\n            records.forEach(record => me.resourceMap.delete(record.id));\n        }\n        if (action === 'removeall') {\n            me.resourceMap.clear();\n        }\n    }\n    onCalendarChange({ action, records, record, changes }) {\n        this.resourceMap.clear();\n        this.client.refresh();\n    }\n    //endregion\n    //region Internal\n    // Called on render of resources events to get events to render. Add any ranges\n    // (chained function from Scheduler)\n    getEventsToRender(resource, events) {\n        const\n            me                      = this,\n            { resourceMap, client } = me,\n            { timeAxis }            = client,\n            shouldPaint             = !me.maxTimeAxisUnit || DateHelper.compareUnits(timeAxis.unit, me.maxTimeAxisUnit) <= 0;\n        if (!me.disabled && shouldPaint && resource.effectiveCalendar) {\n            if (!resourceMap.has(resource.id)) {\n                const\n                    ranges  = resource.effectiveCalendar.getNonWorkingTimeRanges(\n                        client.startDate,\n                        client.endDate\n                    ),\n                    records = ranges.map((range, i) => new me.resourceTimeRangeModelClass({\n                        id           : `r${resource.id}i${i}`,\n                        iconCls      : range.iconCls || resource.effectiveCalendar.iconCls || '',\n                        cls          : `${resource.effectiveCalendar.cls || ''} ${range.cls || ''}`,\n                        startDate    : range.startDate,\n                        endDate      : range.endDate,\n                        name         : range.name || '',\n                        resourceId   : resource.id,\n                        isNonWorking : true\n                    }));\n                resourceMap.set(resource.id, records);\n            }\n            events.push(...resourceMap.get(resource.id));\n        }\n        return events;\n    }\n    shouldInclude({ isNonWorking }) {\n        return isNonWorking;\n    }\n    /**\n     * Returns a resource nonworking time range record from the passed element\n     * @param {HTMLElement} rangeElement\n     * @returns {Scheduler.model.ResourceTimeRangeModel}\n     * @category DOM\n     */\n    resolveResourceNonWorkingTimeInterval(rangeElement) {\n        return rangeElement?.closest('.b-sch-resourcenonworkingtime')?.elementData.eventRecord;\n    }\n    //endregion\n}\n// No feature based styling needed, do not add a cls to Scheduler\nResourceNonWorkingTime.featureClass = '';\nResourceNonWorkingTime._$name = 'ResourceNonWorkingTime'; GridFeatureManager.registerFeature(ResourceNonWorkingTime, false, 'SchedulerPro');\n", "import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport DomSync from '../../Core/helper/DomSync.js';\nimport EventHelper from '../../Core/helper/EventHelper.js';\n/**\n * @module SchedulerPro/feature/TimeSpanHighlight\n */\nconst\n    timespanDefaults = {\n        isHighlightConfig : true,\n        clearExisting     : false\n    },\n    emptyObject = {};\n/**\n * An object describing the time span region to highlight.\n *\n * @typedef {Object} HighlightTimeSpan\n * @property {Date} startDate A start date constraining the region\n * @property {Date} endDate An end date constraining the region\n * @property {String} name A name to show in the highlight element\n * @property {Scheduler.model.ResourceModel} [resourceRecord] The resource record (applicable for Scheduler only)\n * @property {Core.data.Model} [taskRecord] The task record (applicable for Gantt only)\n * @property {String} [cls] A CSS class to add to the highlight element\n * @property {Boolean} [clearExisting=true] `false` to keep existing highlight elements\n * @property {String} [animationId] An id to enable animation of highlight elements\n * @property {Boolean} [surround=false] True to shade the time axis areas before and after the time span\n * (adds a `b-unavailable` CSS class which you can use for styling)\n * @property {Number} [padding] Inflates the non-timeaxis sides of the region by this many pixels\n */\n/**\n * This feature exposes methods on the owning Scheduler or Gantt widget which you can use to highlight one or multiple time spans\n * in the schedule. Please see {@link #function-highlightTimeSpan} and {@link #function-highlightTimeSpans} to learn\n * more or try the demo below:\n *\n * {@inlineexample SchedulerPro/feature/TimeSpanHighlight.js}\n *\n * ## Example usage with Scheduler Pro\n *\n * ```javascript\n * const scheduler = new SchedulerPro({\n *     features : {\n *         timeSpanHighlight : true\n *     }\n * })\n *\n * scheduler.highlightTimeSpan({\n *      startDate : new Date(2022, 4, 1),\n *      endDate   : new Date(2022, 4, 5),\n *      name      : 'Time off'\n * });\n * ```\n *\n * ## Example usage with Gantt\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         timeSpanHighlight : true\n *     }\n * })\n *\n * gantt.highlightTimeSpan({\n *      startDate : new Date(2022, 4, 1),\n *      endDate   : new Date(2022, 4, 5),\n *      padding   : 10, // Some \"air\" around the rectangle\n *      taskRecord, // You can also highlight an area specific to a Gantt task\n *      name      : 'Time off'\n * });\n * ```\n *\n * This feature is **disabled** by default.\n *\n * @extends Core/mixin/InstancePlugin\n * @classtype timeSpanHighlight\n * @feature\n * @demo SchedulerPro/highlight-time-spans\n */\nexport default class TimeSpanHighlight extends InstancePlugin {\n    //region Config\n    domConfigs = [];\n    configs = [];\n    static get $name() {\n        return 'TimeSpanHighlight';\n    }\n    static get configurable() {\n        return {\n            padding : 0\n        };\n    }\n    static get pluginConfig() {\n        return {\n            assign : [\n                'highlightTimeSpan',\n                'highlightTimeSpans',\n                'unhighlightTimeSpans'\n            ],\n            chain : [\n                'onTimeAxisViewModelUpdate'\n            ]\n        };\n    }\n    //endregion\n    construct() {\n        super.construct(...arguments);\n        this.client.rowManager.ion({\n            renderDone : this.onViewChanged,\n            thisObj    : this\n        });\n    }\n    /**\n     * Highlights the region representing the passed time span and optionally for a single certain resource.\n     * @on-owner\n     * @param {HighlightTimeSpan} options A single options object describing the time span to highlight.\n     */\n    highlightTimeSpan(config, draw = true) {\n        const\n            me         = this,\n            {\n                startDate,\n                endDate,\n                name,\n                surround,\n                padding       = me.padding,\n                clearExisting = true\n            }          = config,\n            { client } = me,\n            taskRecord = config.isTimeSpan ? config : config.taskRecord;\n        // The resource property allows an actual TaskRecord to be used as a config.\n        let resourceRecord  = config.resourceRecord || config.resource;\n        const { animationId } = config;\n        if (animationId) {\n            DomHelper.addTemporaryClass(client.element, 'b-transition-highlight', 500, client);\n        }\n        if (clearExisting) {\n            me.domConfigs.length = me.configs.length = 0;\n        }\n        if (me.disabled) {\n            // nothing to highlight\n            return;\n        }\n        if (surround) {\n            me.surroundTimeSpan(config);\n            return;\n        }\n        me.configs.push(config);\n        let rect;\n        if (client.isGanttBase) {\n            rect = client.getScheduleRegion(taskRecord, true, { start : startDate, end : endDate });\n        }\n        else {\n            if (resourceRecord) {\n                // Allows resolving link from original in TreeGrouped scheduler\n                resourceRecord = client.store.getById(resourceRecord);\n            }\n            rect = client.getScheduleRegion(resourceRecord, null, true, { start : startDate, end : endDate }, !resourceRecord);\n        }\n        if (!rect) {\n            // nothing to highlight\n            return;\n        }\n        if (padding) {\n            if (client.isHorizontal) {\n                rect.inflate(padding, 0, padding, 0);\n            }\n            else {\n                rect.inflate(0, padding, 0, padding);\n            }\n        }\n        me.domConfigs.push(\n            rect.visualize({\n                children : [\n                    {\n                        class : 'b-sch-highlighted-range-name',\n                        html  : name\n                    }\n                ],\n                dataset : animationId ? {\n                    syncId : animationId\n                } : emptyObject,\n                class : {\n                    'b-sch-highlighted-range'                           : 1,\n                    [config.cls]                                        : config.cls,\n                    [config.class || 'b-sch-highlighted-range-default'] : 1\n                }\n            }, true)\n        );\n        if (draw) {\n            me.draw();\n        }\n        client.syncSplits?.(split => split.highlightTimeSpan(config, draw));\n    }\n    draw() {\n        DomSync.sync({\n            targetElement : this.containerEl,\n            domConfig     : {\n                onlyChildren : true,\n                children     : this.domConfigs\n            }\n        });\n    }\n    surroundTimeSpan(timeSpan) {\n        this.highlightTimeSpans([\n            Object.assign({}, timeSpan, {\n                animationId : (timeSpan.animationId || '') + 'Before',\n                class       : 'b-unavailable',\n                surround    : false,\n                startDate   : this.client.startDate,\n                endDate     : timeSpan.startDate\n            }),\n            Object.assign({}, timeSpan, {\n                animationId : (timeSpan.animationId || '') + 'After',\n                class       : 'b-unavailable',\n                surround    : false,\n                startDate   : timeSpan.endDate,\n                endDate     : this.client.endDate\n            })\n        ], { clearExisting : timeSpan.clearExisting });\n    }\n    /**\n     * Highlights the regions representing the passed time spans.\n     * @on-owner\n     * @param {HighlightTimeSpan[]} timeSpans An array of objects with start/end dates describing the rectangle to highlight.\n     * @param {Object} [options] A single options object\n     * @param {Boolean} [options.clearExisting=true] Set to `false` to preserve previously highlighted elements\n     */\n    highlightTimeSpans(timeSpans, options = {}) {\n        const\n            me = this,\n            {\n                clearExisting = true\n            }  = options;\n        if (clearExisting) {\n            timeSpans = timeSpans.slice();\n            me.domConfigs.length = me.configs.length = 0;\n        }\n        if (me.disabled) {\n            return;\n        }\n        timeSpans.forEach(timeSpan => {\n            // If we are *re*drawing a set of configs, they will have the isHighlightConfig\n            // property, so we can pass them straight in. If its a config from the outside,\n            // then apply the defaults and the isHighlightConfig flag.\n            me.highlightTimeSpan(timeSpan.isHighlightConfig ? timeSpan : Object.setPrototypeOf(timeSpan, timespanDefaults), false);\n        });\n        me.draw();\n    }\n    /**\n     * Removes any highlighting elements.\n     * @param {Boolean} [fadeOut] `true` to fade out the highlight elements before removing\n     * @on-owner\n     */\n    async unhighlightTimeSpans(fadeOut = false) {\n        const\n            me         = this,\n            { client } = me;\n        if (fadeOut) {\n            DomHelper.addTemporaryClass(client.element, 'b-transition-highlight', 500, client);\n        }\n        Array.from(me.containerEl.children).forEach(element => {\n            if (fadeOut) {\n                element.style.opacity = 0;\n                me.fadeOutDetacher    = EventHelper.onTransitionEnd({\n                    element,\n                    property : 'opacity',\n                    thisObj  : client,\n                    handler  : () => {\n                        me.domConfigs.length = me.configs.length = 0;\n                        me.draw();\n                    }\n                });\n            }\n            else {\n                me.domConfigs.length = me.configs.length = 0;\n                me.draw();\n            }\n        });\n        client.syncSplits?.(split => split.unhighlightTimeSpans(fadeOut));\n    }\n    get containerEl() {\n        if (!this._containerEl) {\n            this._containerEl = DomHelper.createElement({\n                parent        : this.client.foregroundCanvas,\n                retainElement : true,\n                class         : 'b-sch-highlight-container'\n            });\n        }\n        return this._containerEl;\n    }\n    onTimeAxisViewModelUpdate() {\n        this.onViewChanged();\n    }\n    onViewChanged() {\n        if (this.configs.length > 0) {\n            this.highlightTimeSpans(this.configs);\n        }\n    }\n    updateDisabled(disabled, was) {\n        if (disabled) {\n            this.unhighlightTimeSpans();\n        }\n        super.updateDisabled(disabled, was);\n    }\n    // No classname on Scheduler's/Gantt's element\n    get featureClass() {}\n}\nTimeSpanHighlight._$name = 'TimeSpanHighlight'; GridFeatureManager.registerFeature(TimeSpanHighlight, false, ['SchedulerPro', 'Gantt']);\n", "/**\n * @module SchedulerPro/model/changelog/ChangeLogPropertyUpdate\n */\n/**\n * An immutable, serializable object that describes an update to a single object property from one value to another.\n */\nexport default class ChangeLogPropertyUpdate {\n    static $name = 'ChangeLogPropertyUpdate';\n    constructor({ property, before, after }) {\n        Object.assign(this, {\n            /**\n             * @member {String} property A descriptor for the entity (object) affected by this action.\n             * @readonly\n             * @category Common\n             */\n            property,\n            /**\n             * @member {String|Number|Object} before The property's value before the action.\n             * @readonly\n             * @immutable\n             * @category Common\n             */\n            before,\n            /**\n             * @member {String|Number|Object} after The property's value after the action.\n             * @readonly\n             * @immutable\n             * @category Common\n             */\n            after\n        });\n        Object.freeze(this);\n    }\n}\nChangeLogPropertyUpdate._$name = 'ChangeLogPropertyUpdate';", "import { SchedulerProProjectMixin } from '../../Engine/quark/model/scheduler_pro/SchedulerProProjectMixin.js';\nimport ProjectModelMixin from '../../Scheduler/model/mixin/ProjectModelMixin.js';\nimport ProjectChangeHandlerMixin from './mixin/ProjectChangeHandlerMixin.js';\nimport ProjectCrudManager from '../data/mixin/ProjectCrudManager.js';\nimport AssignmentModel from './AssignmentModel.js';\nimport CalendarModel from './CalendarModel.js';\nimport DependencyModel from './DependencyModel.js';\nimport EventModel from './EventModel.js';\nimport ResourceModel from './ResourceModel.js';\nimport CalendarManagerStore from '../data/CalendarManagerStore.js';\nimport DependencyStore from '../data/DependencyStore.js';\nimport EventStore from '../data/EventStore.js';\nimport ResourceStore from '../data/ResourceStore.js';\nimport AssignmentStore from '../data/AssignmentStore.js';\nimport StateTrackingManager from '../data/stm/StateTrackingManager.js';\n/**\n * @module SchedulerPro/model/ProjectModel\n */\n/**\n * Scheduler Pro Project model class - a central place for all data.\n *\n * It holds and links the stores usually used by Scheduler Pro:\n *\n * - {@link SchedulerPro/data/EventStore}\n * - {@link SchedulerPro/data/ResourceStore}\n * - {@link SchedulerPro/data/AssignmentStore}\n * - {@link SchedulerPro/data/DependencyStore}\n * - {@link SchedulerPro/data/CalendarManagerStore}\n * - {@link Scheduler/data/ResourceTimeRangeStore}\n * - {@link #config-timeRangeStore TimeRangeStore}\n *\n * The project uses a scheduling engine to calculate dates, durations and such. It is also responsible for\n * handling references between models, for example to link an event via an assignment to a resource. These operations\n * are asynchronous, a fact that is hidden when working in the Scheduler Pro UI but which you must know about when\n * performing operations on the data level.\n *\n * When there is a change to data that requires something else to be recalculated, the project schedules a calculation\n * (a commit) which happens moments later. It is also possible to trigger these calculations directly. This flow\n * illustrates the process:\n *\n * 1. Something changes which requires the project to recalculate, for example adding a new task:\n *\n * ```javascript\n * const [event] = project.eventStore.add({ startDate, endDate });\n * ```\n *\n * 2. A recalculation is scheduled, thus:\n *\n * ```javascript\n * event.duration; // <- Not yet calculated\n * ```\n *\n * 3. Calculate now instead of waiting for the scheduled calculation\n *\n * ```javascript\n * await project.commitAsync();\n *\n * event.duration; // <- Now available\n * ```\n *\n * Please refer to [this guide](#SchedulerPro/guides/basics/project_data.md) for more information.\n *\n * ## Built-in CrudManager\n *\n * Scheduler Pro's project has a {@link Scheduler/crud/AbstractCrudManagerMixin CrudManager} built-in. Using it is the recommended\n * way of syncing data between Scheduler Pro and a backend. Example usage:\n *\n * ```javascript\n * const scheduler = new SchedulerPro({\n *     project : {\n *         // Configure urls used by the built-in CrudManager\n *         transport : {\n *             load : {\n *                 url : 'php/load.php'\n *             },\n *             sync : {\n *                 url : 'php/sync.php'\n *             }\n *         }\n *     }\n * });\n *\n * // Load data from the backend\n * scheduler.project.load()\n * ```\n *\n * For more information on CrudManager, see Schedulers docs on {@link Scheduler/data/CrudManager}.\n * For a detailed description of the protocol used by CrudManager, see the [Crud manager guide](#Scheduler/guides/data/crud_manager.md)\n *\n * You can access the current Project data changes anytime using the {@link #property-changes} property.\n *\n * ## Working with inline data\n *\n * The project provides an {@link #property-inlineData} getter/setter that can\n * be used to manage data from all Project stores at once. Populating the stores this way can\n * be useful if you do not want to use the CrudManager for server communication but instead load data using Axios\n * or similar.\n *\n * ### Getting data\n * ```javascript\n * const data = scheduler.project.inlineData;\n *\n * // use the data in your application\n * ```\n *\n * ### Setting data\n * ```javascript\n * // Get data from server manually\n * const data = await axios.get('/project?id=12345');\n *\n * // Feed it to the project\n * scheduler.project.inlineData = data;\n * ```\n *\n * See also {@link #function-loadInlineData}\n *\n * ### Getting changed records\n *\n * You can access the changes in the current Project dataset anytime using the {@link #property-changes} property. It\n * returns an object with all changes:\n *\n * ```javascript\n * const changes = project.changes;\n *\n * console.log(changes);\n *\n * > {\n *   tasks : {\n *       updated : [{\n *           name : 'My task',\n *           id   : 12\n *       }]\n *   },\n *   assignments : {\n *       added : [{\n *           event      : 12,\n *           resource   : 7,\n *           units      : 100,\n *           $PhantomId : 'abc123'\n *       }]\n *     }\n * };\n * ```\n *\n * ## Monitoring data changes\n *\n * While it is possible to listen for data changes on the projects individual stores, it is sometimes more convenient\n * to have a centralized place to handle all data changes. By listening for the {@link #event-change change event} your\n * code gets notified when data in any of the stores changes. Useful for example to keep an external data model up to\n * date:\n *\n * ```javascript\n * const scheduler = new SchedulerPro({\n *     project: {\n *         listeners : {\n *             change({ store, action, records }) {\n *                 const { $name } = store.constructor;\n *\n *                 if (action === 'add') {\n *                     externalDataModel.add($name, records);\n *                 }\n *\n *                 if (action === 'remove') {\n *                     externalDataModel.remove($name, records);\n *                 }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * ## Processing the data loaded from the server\n *\n * If you want to process the data received from the server after loading, you can use\n * the {@link #event-beforeLoadApply} or {@link #event-beforeSyncApply} events:\n *\n * ```javascript\n * const gantt = new Gantt({\n *     project: {\n *         listeners : {\n *             beforeLoadApply({ response }) {\n *                 // do something with load-response object before data is fed to the stores\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * ## Built-in StateTrackingManager\n *\n * The project also has a built-in {@link Core/data/stm/StateTrackingManager} (STM for short), that\n * handles undo/redo for the project stores (additional stores can also be added). By default, it is only used while\n * editing tasks using the task editor, the editor updates tasks live and uses STM to rollback changes if canceled. But\n * you can enable it to track all project store changes:\n *\n * ```javascript\n * // Enable automatic transaction creation and start recording\n * project.stm.autoRecord = true;\n * project.stm.enable();\n *\n * // Undo a transaction\n * project.stm.undo();\n *\n * // Redo\n * project.stm.redo();\n * ```\n *\n * Check out the `undoredo` demo to see it in action.\n *\n * @mixes Core/mixin/Events\n * @mixes SchedulerPro/data/mixin/PartOfProject\n * @mixes SchedulerPro/data/mixin/ProjectCrudManager\n * @mixes SchedulerPro/model/mixin/ProjectChangeHandlerMixin\n *\n * @extends Scheduler/model/mixin/ProjectModelMixin\n *\n * @typings Scheduler.model.ProjectModel -> Scheduler.model.SchedulerProjectModel\n */\nexport default class ProjectModel extends ProjectChangeHandlerMixin(ProjectCrudManager(ProjectModelMixin(SchedulerProProjectMixin))) {\n    //region Events\n    /**\n     * Fired when the engine has finished its calculations and the results has been written back to the records.\n     *\n     * ```javascript\n     * scheduler.project.on({\n     *     dataReady() {\n     *        console.log('Calculations finished');\n     *     }\n     * });\n     *\n     * scheduler.eventStore.first.duration = 10;\n     *\n     * // At some point a bit later it will log 'Calculations finished'\n     * ```\n     *\n     * @event dataReady\n     * @param {SchedulerPro.model.ProjectModel} source The project\n     * @param {Boolean} isInitialCommit Flag that shows if this commit is initial\n     * @param {Set} records Set of all {@link Core.data.Model}s that were modified in the completed transaction.\n     * Use the {@link Core.data.Model#property-modifications} property of each Model to identify\n     * modified fields.\n     */\n    /**\n     * Fired during the Engine calculation if {@link #config-enableProgressNotifications enableProgressNotifications} config is `true`\n     * @event progress\n     * @param {Number} total The total number of operations\n     * @param {Number} remaining The number of remaining operations\n     * @param {'storePopulation'|'propagating'} phase The phase of the calculation, either 'storePopulation'\n     * when data is getting loaded, or 'propagating' when data is getting calculated\n     */\n    /**\n     * Fired when the Engine detects a computation cycle.\n     * @event cycle\n     * @param {Object} schedulingIssue Scheduling error describing the case:\n     * @param {Function} schedulingIssue.getDescription Returns the cycle description\n     * @param {Object} schedulingIssue.cycle Object providing the cycle info\n     * @param {Function} schedulingIssue.getResolutions Returns possible resolutions\n     * @param {Function} continueWithResolutionResult Function to call after a resolution is chosen to\n     * proceed with the Engine calculations:\n     * ```js\n     * project.on('cycle', ({ continueWithResolutionResult }) => {\n     *     // cancel changes in case of a cycle\n     *     continueWithResolutionResult(EffectResolutionResult.Cancel);\n     * })\n     * ```\n     */\n    /**\n     * Fired when the Engine detects a scheduling conflict.\n     * @event schedulingConflict\n     * @param {Object} schedulingIssue The conflict details:\n     * @param {Function} schedulingIssue.getDescription Returns the conflict description\n     * @param {Object[]} schedulingIssue.intervals Array of conflicting intervals\n     * @param {Function} schedulingIssue.getResolutions Function to get possible resolutions\n     * @param {Function} continueWithResolutionResult Function to call after a resolution is chosen to\n     * proceed with the Engine calculations:\n     * ```js\n     * project.on('schedulingConflict', ({ schedulingIssue, continueWithResolutionResult }) => {\n     *     // apply the first resolution and continue\n     *     schedulingIssue.getResolutions()[0].resolve();\n     *     continueWithResolutionResult(EffectResolutionResult.Resume);\n     * })\n     * ```\n     */\n    /**\n     * Fired when the Engine detects a calendar misconfiguration when the calendar does\n     * not provide any working periods of time which makes the calendar usage impossible.\n     * @event emptyCalendar\n     * @param {Object} schedulingIssue Scheduling error describing the case:\n     * @param {Function} schedulingIssue.getDescription Returns the error description\n     * @param {Function} schedulingIssue.getCalendar Returns the calendar that must be fixed\n     * @param {Function} schedulingIssue.getResolutions Returns possible resolutions\n     * @param {Function} continueWithResolutionResult Function to call after a resolution is chosen to\n     * proceed with the Engine calculations:\n     * ```js\n     * project.on('emptyCalendar', ({ schedulingIssue, continueWithResolutionResult }) => {\n     *     // apply the first resolution and continue\n     *     schedulingIssue.getResolutions()[0].resolve();\n     *     continueWithResolutionResult(EffectResolutionResult.Resume);\n     * })\n     * ```\n     */\n    //endregion\n    //region Config\n    static get $name() {\n        return 'ProjectModel';\n    }\n    /**\n     * Class implementing resource allocation report used by\n     * {@link SchedulerPro.view.ResourceHistogram resource histogram} and\n     * {@link SchedulerPro.view.ResourceUtilization resource utilization} views\n     * for collecting resource allocation.\n     * @config {ResourceAllocationInfo} resourceAllocationInfoClass\n     */\n    /**\n     * Silences propagations caused by the project loading.\n     *\n     * Applying the loaded data to the project occurs in two basic stages:\n     *\n     * 1. Data gets into the engine graph which triggers changes propagation\n     * 2. The changes caused by the propagation get written to related stores\n     *\n     * Setting this flag to `true` makes the component perform step 2 silently without triggering events causing reactions on those changes\n     * (like sending changes back to the server if `autoSync` is enabled) and keeping stores in unmodified state.\n     *\n     * This is safe if the loaded data is consistent so propagation doesn't really do any adjustments.\n     * By default the system treats the data as consistent so this option is `true`.\n     *\n     * ```js\n     * new SchedulerPro{\n     *     project : {\n     *         // We want scheduling engine to recalculate the data properly\n     *         // so then we could save it back to the server\n     *         silenceInitialCommit : false,\n     *         ...\n     *     }\n     *     ...\n     * })\n     * ```\n     *\n     * @config {Boolean} silenceInitialCommit\n     * @default true\n     * @category Advanced\n     */\n    /**\n     * Maximum range the project calendars can iterate.\n     * The value is defined in milliseconds and by default equals `5 years` roughly.\n     * ```javascript\n     * new SchedulerPro({\n     *     project : {\n     *         // adjust calendar iteration limit to 10 years roughly:\n     *         // 10 years expressed in ms\n     *         maxCalendarRange : 10 * 365 * 24 * 3600000,\n     *         ...\n     *     }\n     * });\n     * ```\n     * @config {Number} maxCalendarRange\n     * @default 157680000000\n     * @category Advanced\n     */\n    /**\n     * When `true` the project manually scheduled tasks will adjust their proposed start/end dates\n     * to skip non working time.\n     *\n     * @field {Boolean} skipNonWorkingTimeWhenSchedulingManually\n     * @default false\n     */\n    /**\n     * When `true` the project's manually scheduled tasks adjust their duration by excluding the non-working time from it,\n     * according to the calendar. However, this may lead to inconsistencies, when moving an event which both starts\n     * and ends on the non-working time. For such cases you can disable this option.\n     *\n     * Default value is `true`\n     *\n     * IMPORTANT: Setting this option to `false` also forcefully sets the {@link #field-skipNonWorkingTimeWhenSchedulingManually} option\n     * to `false`.\n     * IMPORTANT: This option is going to be disabled by default from version 6.0.0.\n     *\n     * @field {Boolean} skipNonWorkingTimeInDurationWhenSchedulingManually\n     * @default true\n     */\n    /**\n     * This config manages DST correction in the scheduling engine. It only has effect when DST transition hour is\n     * working time. Usually DST transition occurs on Sunday, so with non working weekends the DST correction logic\n     * is not involved.\n     *\n     * If **true**, it will add/remove one hour when calculating end date. For example:\n     * Assume weekends are working and on Sunday, 2020-10-25 at 03:00 clocks are set back 1 hour. Assume there is an event:\n     *\n     * ```javascript\n     * {\n     *     startDate    : '2020-10-20',\n     *     duration     : 10 * 24 + 1,\n     *     durationUnit : 'hour'\n     * }\n     * ```\n     * It will end on 2020-10-30 01:00 (which is wrong) but duration will be reported correctly. Because of the DST\n     * transition the SchedulerPro project will add one more hour when calculating the end date.\n     *\n     * Also this may occur when day with DST transition is working but there are non-working intervals between that day\n     * and event end date.\n     *\n     * ```javascript\n     * {\n     *     calendar         : 1,\n     *     calendarsData    : [\n     *         {\n     *             id           : 1,\n     *             startDate    : '2020-10-26',\n     *             endDate      : '2020-10-27',\n     *             isWorking    : false\n     *         }\n     *     ],\n     *     eventsData       : [\n     *         {\n     *             id           : 1,\n     *             startDate    : '2020-10-20',\n     *             endDate      : '2020-10-30'\n     *         },\n     *         {\n     *             id           : 2,\n     *             startDate    : '2020-10-20',\n     *             duration     : 10 * 24 + 1,\n     *             durationUnit : 'hour'\n     *         }\n     *     ]\n     * }\n     * ```\n     *\n     * Event 1 duration will be incorrectly reported as 9 days * 24 hours, missing 1 extra hour added by DST transition.\n     * Event 2 end date will be calculated to 2020-10-30 01:00, adding one extra hour.\n     *\n     * If **false**, the SchedulerPro project will not add DST correction which fixes the quirk mentioned above.\n     * Event 1 duration will be correctly reported as 9 days * 24 hours + 1 hour. Event 2 end date will be calculated\n     * to 2020-10-30.\n     *\n     * Also, for those events days duration will be a floating point number due to extra (or missing) hour:\n     *\n     * ```javascript\n     * eventStore.getById(1).getDuration('day')  // 10.041666666666666\n     * eventStore.getById(1).getDuration('hour') // 241\n     * ```\n     *\n     * @config {Boolean} adjustDurationToDST\n     * @default false\n     */\n    /**\n     * The number of hours per day.\n     *\n     * **Please note:** the value **does not define** the amount of **working** time per day\n     * for that purpose one should use calendars.\n     *\n     * The value is used when converting the duration from one unit to another.\n     * So when user enters a duration of, for example, `5 days` the system understands that it\n     * actually means `120 hours` and schedules accordingly.\n     * @field {Number} hoursPerDay\n     * @default 24\n     */\n    /**\n     * The number of days per week.\n     *\n     * **Please note:** the value **does not define** the amount of **working** time per week\n     * for that purpose one should use calendars.\n     *\n     * The value is used when converting the duration from one unit to another.\n     * So when user enters a duration of, for example, `2 weeks` the system understands that it\n     * actually means `14 days` (which is then converted to {@link #field-hoursPerDay hours}) and\n     * schedules accordingly.\n     * @field {Number} daysPerWeek\n     * @default 7\n     */\n    /**\n     * The number of days per month.\n     *\n     * **Please note:** the value **does not define** the amount of **working** time per month\n     * for that purpose one should use calendars.\n     *\n     * The value is used when converting the duration from one unit to another.\n     * So when user enters a duration of, for example, `1 month` the system understands that it\n     * actually means `30 days` (which is then converted to {@link #field-hoursPerDay hours}) and\n     * schedules accordingly.\n     * @field {Number} daysPerMonth\n     * @default 30\n     */\n    /**\n     * The source of the calendar for dependencies (the calendar used for taking dependencies lag into account).\n     * Possible values are:\n     *\n     * - `ToEvent` - successor calendar will be used (default);\n     * - `FromEvent` - predecessor calendar will be used;\n     * - `Project` - the project calendar will be used.\n     *\n     * @field {'ToEvent'|'FromEvent'|'Project'} dependenciesCalendar\n     * @default 'ToEvent'\n     */\n    /**\n     * The project calendar.\n     * @field {SchedulerPro.model.CalendarModel} calendar\n     * @accepts {String|CalendarModelConfig|SchedulerPro.model.CalendarModel}\n     */\n    /**\n     * Returns current Project changes as an object consisting of added/modified/removed arrays of records for every\n     * managed store. Returns `null` if no changes exist. Format:\n     *\n     * ```javascript\n     * {\n     *     resources : {\n     *         added    : [{ name : 'New guy' }],\n     *         modified : [{ id : 2, name : 'Mike' }],\n     *         removed  : [{ id : 3 }]\n     *     },\n     *     events : {\n     *         modified : [{  id : 12, name : 'Cool task' }]\n     *     },\n     *     ...\n     * }\n     * ```\n     *\n     * @member {Object} changes\n     * @readonly\n     * @category Models & Stores\n     */\n    /**\n     * Project changes (CRUD operations to records in its stores) are automatically committed on a buffer to the\n     * underlying graph based calculation engine. The engine performs it calculations async.\n     *\n     * By calling this function, the commit happens right away. And by awaiting it you are sure that project\n     * calculations are finished and that references between records are up to date.\n     *\n     * The returned promise is resolved with an object. If that object has `rejectedWith` set, there has been a conflict and the calculation failed.\n     *\n     * ```javascript\n     * // Move an event in time\n     * eventStore.first.shift(1);\n     *\n     * // Trigger calculations directly and wait for them to finish\n     * const result = await project.commitAsync();\n     *\n     * if (result.rejectedWith) {\n     *     // there was a conflict during the scheduling\n     * }\n     * ```\n     *\n     * @async\n     * @function commitAsync\n     * @category Common\n     */\n    /**\n     * Set to `true` to enable calculation progress notifications.\n     * When enabled the project fires {@link #event-progress progress} event.\n     *\n     * **Note**: Enabling progress notifications will impact calculation performance, since it needs to pause calculations to allow redrawing the UI.\n     * @config {Boolean} enableProgressNotifications\n     * @category Advanced\n     */\n    /**\n     * Enables/disables the calculation progress notifications.\n     * @member {Boolean} enableProgressNotifications\n     * @category Advanced\n     */\n    /**\n     * If this flag is set to `true` (default) when a start/end date is set on the event, a corresponding\n     * `start-no-earlier/later-than` constraint is added, automatically. This is done in order to\n     * keep the event \"attached\" to this date, according to the user intention.\n     *\n     * Depending on your use case, you might want to disable this behaviour.\n     *\n     * @field {Boolean} addConstraintOnDateSet\n     * @default true\n     */\n    static get defaultConfig() {\n        return {\n            /**\n             * @hideproperties project, taskStore\n             */\n            //region Inline data configs & properties\n            /**\n             * Get/set {@link #property-eventStore} data.\n             *\n             * Always returns an array of {@link SchedulerPro.model.EventModel EventModels} but also accepts an array of\n             * its configuration objects as input.\n             *\n             * @member {SchedulerPro.model.EventModel[]} events\n             * @accepts {SchedulerPro.model.EventModel[]|EventModelConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-eventStore}. Should be an array of\n             * {@link SchedulerPro.model.EventModel EventModels} or its configuration objects.\n             *\n             * @config {SchedulerPro.model.EventModel[]|EventModelConfig[]} events\n             * @category Inline data\n             */\n            /**\n             * Get/set {@link #property-resourceStore} data.\n             *\n             * Always returns an array of {@link SchedulerPro.model.ResourceModel ResourceModels} but also accepts an\n             * array of its configuration objects as input.\n             *\n             * @member {SchedulerPro.model.ResourceModel[]} resources\n             * @accepts {SchedulerPro.model.ResourceModel[]|ResourceModelConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-resourceStore}. Should be an array of\n             * {@link SchedulerPro.model.ResourceModel ResourceModels} or its configuration objects.\n             *\n             * @config {SchedulerPro.model.ResourceModel[]|ResourceModelConfig[]} resources\n             * @category Inline data\n             */\n            /**\n             * Get/set {@link #property-assignmentStore} data.\n             *\n             * Always returns an array of {@link SchedulerPro.model.AssignmentModel AssignmentModels} but also accepts\n             * an array of its configuration objects as input.\n             *\n             * @member {SchedulerPro.model.AssignmentModel[]} assignments\n             * @accepts {SchedulerPro.model.AssignmentModel[]|AssignmentModelConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-assignmentStore}. Should be an array of\n             * {@link SchedulerPro.model.AssignmentModel AssignmentModels} or its configuration objects.\n             *\n             * @config {SchedulerPro.model.AssignmentModel[]|AssignmentModelConfig[]} assignments\n             * @category Inline data\n             */\n            /**\n             * Get/set {@link #property-dependencyStore} data.\n             *\n             * Always returns an array of {@link SchedulerPro.model.DependencyModel DependencyModels} but also accepts an\n             * array of its configuration objects as input.\n             *\n             * @member {SchedulerPro.model.DependencyModel[]} dependencies\n             * @accepts {SchedulerPro.model.DependencyModel[]|DependencyModelConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-dependencyStore}. Should be an array of\n             * {@link SchedulerPro.model.DependencyModel DependencyModels} or its configuration objects.\n             *\n             * @config {SchedulerPro.model.DependencyModel[]|DependencyModelConfig[]} dependencies\n             * @category Inline data\n             */\n            /**\n             * Get/set {@link #property-timeRangeStore} data.\n             *\n             * Always returns an array of {@link Scheduler.model.TimeSpan TimeSpans} but also accepts an\n             * array of its configuration objects as input.\n             *\n             * @member {Scheduler.model.TimeSpan[]} timeRanges\n             * @accepts {Scheduler.model.TimeSpan[]|TimeSpanConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-timeRangeStore}. Should be an array of\n             * {@link Scheduler.model.TimeSpan TimeSpans} or its configuration objects.\n             *\n             * @config {Scheduler.model.TimeSpan[]|TimeSpanConfig[]} timeRanges\n             * @category Inline data\n             */\n            /**\n             * Get/set {@link #property-resourceTimeRangeStore} data.\n             *\n             * Always returns an array of {@link Scheduler.model.ResourceTimeRangeModel ResourceTimeRangeModels} but\n             * also accepts an array of its configuration objects as input.\n             *\n             * @member {Scheduler.model.ResourceTimeRangeModel[]} resourceTimeRanges\n             * @accepts {Scheduler.model.ResourceTimeRangeModel[]|ResourceTimeRangeModelConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-resourceTimeRangeStore}. Should be an array\n             * of {@link Scheduler.model.ResourceTimeRangeModel ResourceTimeRangeModels} or its configuration objects.\n             *\n             * @config {Scheduler.model.ResourceTimeRangeModel[]|ResourceTimeRangeModelConfig[]} resourceTimeRanges\n             * @category Inline data\n             */\n            //endregion\n            //region Legacy inline data configs & properties\n            /**\n             * The initial data, to fill the {@link #property-eventStore eventStore} with.\n             * Should be an array of {@link SchedulerPro.model.EventModel EventModels} or its configuration objects.\n             *\n             * @config {SchedulerPro.model.EventModel[]} eventsData\n             * @category Legacy inline data\n             */\n            /**\n             * The initial data, to fill the {@link #property-dependencyStore dependencyStore} with.\n             * Should be an array of {@link SchedulerPro.model.DependencyModel DependencyModels} or its configuration\n             * objects.\n             *\n             * @config {SchedulerPro.model.DependencyModel[]} [dependenciesData]\n             * @category Legacy inline data\n             */\n            /**\n             * The initial data, to fill the {@link #property-resourceStore resourceStore} with.\n             * Should be an array of {@link SchedulerPro.model.ResourceModel ResourceModels} or its configuration objects.\n             *\n             * @config {SchedulerPro.model.ResourceModel[]} [resourcesData]\n             * @category Legacy inline data\n             */\n            /**\n             * The initial data, to fill the {@link #property-assignmentStore assignmentStore} with.\n             * Should be an array of {@link SchedulerPro.model.AssignmentModel AssignmentModels} or its configuration\n             * objects.\n             *\n             * @config {SchedulerPro.model.AssignmentModel[]} [assignmentsData]\n             * @category Legacy inline data\n             */\n            //endregion\n            //region Store configs and properties\n            /**\n             * The {@link SchedulerPro.data.EventStore store} holding the event information.\n             *\n             * See also {@link SchedulerPro.model.EventModel}\n             *\n             * @member {SchedulerPro.data.EventStore} eventStore\n             * @category Models & Stores\n             */\n            /**\n             * An {@link SchedulerPro.data.EventStore} instance or a config object.\n             * @config {SchedulerPro.data.EventStore|EventStoreConfig} eventStore\n             * @category Models & Stores\n             */\n            /**\n             * The {@link SchedulerPro.data.DependencyStore store} holding the dependency information.\n             *\n             * See also {@link SchedulerPro.model.DependencyModel}\n             *\n             * @member {SchedulerPro.data.DependencyStore} dependencyStore\n             * @category Models & Stores\n             */\n            /**\n             * A {@link SchedulerPro.data.DependencyStore} instance or a config object.\n             * @config {SchedulerPro.data.DependencyStore|DependencyStoreConfig} dependencyStore\n             * @category Models & Stores\n             */\n            /**\n             * The {@link SchedulerPro.data.ResourceStore store} holding the resources that can be assigned to the\n             * events in the event store.\n             *\n             * See also {@link SchedulerPro.model.ResourceModel}\n             *\n             * @member {SchedulerPro.data.ResourceStore} resourceStore\n             * @category Models & Stores\n             */\n            /**\n             * A {@link SchedulerPro.data.ResourceStore} instance or a config object.\n             * @config {SchedulerPro.data.ResourceStore|ResourceStoreConfig} resourceStore\n             * @category Models & Stores\n             */\n            /**\n             * The {@link SchedulerPro.data.AssignmentStore store} holding the assignment information.\n             *\n             * See also {@link SchedulerPro.model.AssignmentModel}\n             *\n             * @member {SchedulerPro.data.AssignmentStore} assignmentStore\n             * @category Models & Stores\n             */\n            /**\n             * An {@link SchedulerPro.data.AssignmentStore} instance or a config object.\n             * @config {SchedulerPro.data.AssignmentStore|AssignmentStoreConfig} assignmentStore\n             * @category Models & Stores\n             */\n            /**\n             * The {@link SchedulerPro.data.CalendarManagerStore store} holding the calendar information.\n             *\n             * See also {@link SchedulerPro.model.CalendarModel}\n             * @member {SchedulerPro.data.CalendarManagerStore} calendarManagerStore\n             * @category Models & Stores\n             */\n            /**\n             * A {@link SchedulerPro.data.CalendarManagerStore} instance or a config object.\n             * @config {SchedulerPro.data.CalendarManagerStore|CalendarManagerStoreConfig} calendarManagerStore\n             * @category Models & Stores\n             */\n            //endregion\n            //region Model & store class configs\n            /**\n             * The constructor of the calendar model class, to be used in the project. Will be set as the\n             * {@link Core.data.Store#config-modelClass modelClass} property of the\n             * {@link #property-calendarManagerStore}\n             *\n             * @config {SchedulerPro.model.CalendarModel} [calendarModelClass]\n             * @typings {typeof CalendarModel}\n             * @category Models & Stores\n             */\n            calendarModelClass : CalendarModel,\n            /**\n             * The constructor of the dependency model class, to be used in the project. Will be set as the\n             * {@link Core.data.Store#config-modelClass modelClass} property of the {@link #property-dependencyStore}\n             *\n             * @config {SchedulerPro.model.DependencyModel}\n             * @typings {typeof DependencyModel}\n             * @category Models & Stores\n             */\n            dependencyModelClass : DependencyModel,\n            /**\n             * The constructor of the event model class, to be used in the project. Will be set as the\n             * {@link Core.data.Store#config-modelClass modelClass} property of the {@link #property-eventStore}\n             *\n             * @config {SchedulerPro.model.EventModel}\n             * @typings {typeof EventModel}\n             * @category Models & Stores\n             */\n            eventModelClass : EventModel,\n            /**\n             * The constructor of the assignment model class, to be used in the project. Will be set as the\n             * {@link Core.data.Store#config-modelClass modelClass} property of the {@link #property-assignmentStore}\n             *\n             * @config {SchedulerPro.model.AssignmentModel}\n             * @typings {typeof AssignmentModel}\n             * @category Models & Stores\n             */\n            assignmentModelClass : AssignmentModel,\n            /**\n             * The constructor of the resource model class, to be used in the project. Will be set as the\n             * {@link Core.data.Store#config-modelClass modelClass} property of the {@link #property-resourceStore}\n             *\n             * @config {SchedulerPro.model.ResourceModel}\n             * @typings {typeof ResourceModel}\n             * @category Models & Stores\n             */\n            resourceModelClass : ResourceModel,\n            /**\n             * The constructor to create a calendar store instance with. Should be a class, subclassing the\n             * {@link SchedulerPro.data.CalendarManagerStore}\n             * @config {SchedulerPro.data.CalendarManagerStore|Object}\n             * @typings {typeof CalendarManagerStore|object}\n             * @category Models & Stores\n             */\n            calendarManagerStoreClass : CalendarManagerStore,\n            /**\n             * The constructor to create a dependency store instance with. Should be a class, subclassing the\n             * {@link SchedulerPro.data.DependencyStore}\n             * @config {SchedulerPro.data.DependencyStore|Object}\n             * @typings {typeof DependencyStore|object}\n             * @category Models & Stores\n             */\n            dependencyStoreClass : DependencyStore,\n            /**\n             * The constructor to create an event store instance with. Should be a class, subclassing the\n             * {@link SchedulerPro.data.EventStore}\n             * @config {SchedulerPro.data.EventStore|Object}\n             * @typings {typeof EventStore|object}\n             * @category Models & Stores\n             */\n            eventStoreClass : EventStore,\n            /**\n             * The constructor to create an assignment store instance with. Should be a class, subclassing the\n             * {@link SchedulerPro.data.AssignmentStore}\n             * @config {SchedulerPro.data.AssignmentStore|Object}\n             * @typings {typeof AssignmentStore|object}\n             * @category Models & Stores\n             */\n            assignmentStoreClass : AssignmentStore,\n            /**\n             * The constructor to create a resource store instance with. Should be a class, subclassing the\n             * {@link SchedulerPro.data.ResourceStore}\n             * @config {SchedulerPro.data.ResourceStore|Object}\n             * @typings {typeof ResourceStore|object}\n             * @category Models & Stores\n             */\n            resourceStoreClass : ResourceStore,\n            //endregion\n            /**\n             * The initial data, to fill the {@link #property-calendarManagerStore} with.\n             * Should be an array of {@link SchedulerPro.model.CalendarModel} or it's configuration objects.\n             *\n             * @config {SchedulerPro.model.CalendarModel[]}\n             * @category Legacy inline data\n             */\n            calendarsData : null,\n            /**\n             * Set to `true` to reset the undo/redo queues of the internal {@link Core.data.stm.StateTrackingManager}\n             * after the Project has loaded. Defaults to `false`\n             * @config {Boolean} resetUndoRedoQueuesAfterLoad\n             * @category Advanced\n             */\n            supportShortSyncResponseNote : 'Note: Please consider enabling \"supportShortSyncResponse\" option to allow less detailed sync responses (https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#config-supportShortSyncResponse)',\n            /**\n             * Enables early rendering in SchedulerPro, by postponing calculations to after the first refresh.\n             *\n             * Requires event data loaded to be pre-normalized to function as intended, since it will be used to render\n             * before engine has normalized the data. Given un-normalized data events will snap into place when\n             * calculations are finished.\n             *\n             * The Gantt chart will be read-only until the initial calculations are finished.\n             *\n             * @config {Boolean}\n             * @default\n             * @category Advanced\n             */\n            delayCalculation : true,\n            calendarManagerStore : {},\n            stmClass : StateTrackingManager\n        };\n    }\n    static get configurable() {\n        return {\n            /**\n             * Get/set {@link #property-calendarManagerStore} data.\n             *\n             * Always returns a {@link SchedulerPro.model.CalendarModel} array but also accepts an array of\n             * its configuration objects as input.\n             *\n             * @member {SchedulerPro.model.CalendarModel[]} calendars\n             * @accepts {SchedulerPro.model.CalendarModel[]|CalendarModelConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-eventStore}. Should be a {@link SchedulerPro.model.CalendarModel}\n             * array or its configuration objects.\n             *\n             * @config {SchedulerPro.model.CalendarModel[]|CalendarModelConfig[]} calendars\n             * @category Inline data\n             */\n            calendars : null\n        };\n    }\n    // For TaskBoard compatibility\n    get taskStore() {\n        return this.eventStore;\n    }\n    //endregion\n    //region Inline data\n    get calendars() {\n        return this.calendarManagerStore.allRecords;\n    }\n    updateCalendars(calendars) {\n        this.calendarManagerStore.data = calendars;\n    }\n    //endregion\n}\nProjectModel._$name = 'ProjectModel';", "import Base from '../../../Core/Base.js';\nimport ProHorizontalLayoutStack from '../../eventlayout/ProHorizontalLayoutStack.js';\nimport ProHorizontalLayoutPack from '../../eventlayout/ProHorizontalLayoutPack.js';\n/**\n * @module SchedulerPro/view/mixin/SchedulerProEventRendering\n */\n/**\n * Config for event layout\n * @typedef {Object} EventLayoutConfig\n * @property {'stack'|'pack'|'mixed'|'none'} type Event layout type. Possible values for horizontal mode are\n * `stack`, `pack` and `none`. For vertical mode: `pack`, `mixed` and `none`.\n * @property {Function} layoutFn Horizontal mode only. This function allows to manually position events inside the row.\n * @property {Object} weights Horizontal mode only. Specifies groups order.\n * @property {String|Function} groupBy Horizontal mode only. Specifies a way to group events inside a row.\n */\n/**\n * Functions to handle event rendering in Scheduler Pro (EventModel -> dom elements).\n *\n * @mixin\n */\nexport default Target => class SchedulerProEventRendering extends (Target || Base) {\n    static get $name() {\n        return 'SchedulerProEventRendering';\n    }\n    static get configurable() {\n        return {\n            /**\n             * This config defines how to handle overlapping events. Valid values are:\n             * - `stack`, adjusts row height (only horizontal)\n             * - `pack`, adjusts event height\n             * - `mixed`, allows two events to overlap, more packs (only vertical)\n             * - `none`, allows events to overlap\n             *\n             * You can also provide a configuration object accepted by\n             * {@link SchedulerPro.eventlayout.ProHorizontalLayout} to group events or even take control over the\n             * layout (i.e. vertical position and height):\n             *\n             * To group events:\n             *\n             * ```javascript\n             * new SchedulerPro({\n             *     eventLayout : {\n             *         type    : 'stack',\n             *         weights : {\n             *             high   : 100,\n             *             normal : 150,\n             *             low    : 200\n             *         },\n             *         groupBy : 'prio'\n             *     }\n             * });\n             * ```\n             *\n             * To take control over the layout:\n             *\n             * ```javascript\n             * new SchedulerPro({\n             *     eventLayout : {\n             *         layoutFn : items => {\n             *             items.forEach(item => {\n             *                 item.top = 100 * Math.random();\n             *                 item.height = 100 * Math.random();\n             *             });\n             *\n             *             return 100;\n             *         }\n             *     }\n             * });\n             * ```\n             *\n             * For more info on grouping and layout please refer to {@link SchedulerPro.eventlayout.ProHorizontalLayout}\n             * doc article.\n             *\n             * @prp {'stack'|'pack'|'mixed'|'none'|EventLayoutConfig}\n             * @default\n             * @category Scheduled events\n             */\n            eventLayout : 'stack',\n            /**\n             * The class responsible for the packing horizontal event layout process.\n             * Override this to take control over the layout process.\n             * @config {Scheduler.eventlayout.HorizontalLayout}\n             * @typings {typeof HorizontalLayout}\n             * @default\n             * @private\n             * @category Misc\n             */\n            horizontalLayoutPackClass : ProHorizontalLayoutPack,\n            /**\n             * The class name responsible for the stacking horizontal event layout process.\n             * Override this to take control over the layout process.\n             * @config {Scheduler.eventlayout.HorizontalLayout}\n             * @typings {typeof HorizontalLayout}\n             * @default\n             * @private\n             * @category Misc\n             */\n            horizontalLayoutStackClass : ProHorizontalLayoutStack\n        };\n    }\n    //region Config\n    updateInternalEventLayout(eventLayout, oldEventLayout) {\n        const me = this;\n        if (!me.isConfiguring) {\n            me.clearLayouts();\n        }\n        super.updateInternalEventLayout(eventLayout, oldEventLayout);\n    }\n    //endregion\n    getEventLayout(config) {\n        config = super.getEventLayout(config);\n        if ('layoutFn' in config) {\n            config.type = 'layoutFn';\n        }\n        return config;\n    }\n    clearLayouts() {\n        const me = this;\n        if (me.layouts) {\n            for (const key in me.layouts) {\n                me.layouts[key].destroy();\n                delete me.layouts[key];\n            }\n        }\n    }\n    /**\n     * Get event layout handler. The handler decides the vertical placement of events within a resource.\n     * Returns null if no eventLayout is used (if {@link #config-eventLayout} is set to \"none\")\n     * @internal\n     * @returns {Scheduler.eventlayout.HorizontalLayout}\n     * @readonly\n     * @category Scheduled events\n     */\n    getEventLayoutHandler(eventLayout) {\n        const me = this;\n        if (!me.isHorizontal) {\n            return null;\n        }\n        const { timeAxisViewModel, horizontal } = me;\n        if (!me.layouts) {\n            me.layouts = {};\n        }\n        const { layouts } = me;\n        switch (eventLayout.type) {\n            // stack, adjust row height to fit all events\n            case 'stack': {\n                if (!layouts.horizontalStack) {\n                    layouts.horizontalStack = me.horizontalLayoutStackClass.new({\n                        scheduler                   : me,\n                        timeAxisViewModel,\n                        bandIndexToPxConvertFn      : horizontal.layoutEventVerticallyStack,\n                        bandIndexToPxConvertThisObj : horizontal,\n                        groupByThisObj              : me\n                    }, eventLayout);\n                }\n                return layouts.horizontalStack;\n            }\n            // pack, fit all events in available height by adjusting their height\n            case 'pack': {\n                if (!layouts.horizontalPack) {\n                    layouts.horizontalPack = me.horizontalLayoutPackClass.new({\n                        scheduler                   : me,\n                        timeAxisViewModel,\n                        bandIndexToPxConvertFn      : horizontal.layoutEventVerticallyPack,\n                        bandIndexToPxConvertThisObj : horizontal,\n                        groupByThisObj              : me\n                    }, eventLayout);\n                }\n                return layouts.horizontalPack;\n            }\n            case 'layoutFn': {\n                // Both methods are called on a layout\n                return {\n                    type                : 'layoutFn',\n                    scheduler           : me,\n                    applyLayout         : eventLayout.layoutFn,\n                    layoutEventsInBands : eventLayout.layoutFn\n                };\n            }\n            default:\n                return null;\n        }\n    }\n    get widgetClass() {}\n};\n", "import StringHelper from '../../Core/helper/StringHelper.js';\nimport '../../Scheduler/feature/NonWorkingTime.js';\nimport '../localization/En.js';\n// Always required features\nimport { TimeUnit } from '../../Engine/scheduling/Types.js';\nimport { CalculatedValueGen } from '../../ChronoGraph/chrono/Identifier.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport { BaseCalendarMixin } from '../../Engine/quark/model/scheduler_basic/BaseCalendarMixin.js';\nimport NumberFormat from '../../Core/helper/util/NumberFormat.js';\nimport TimelineHistogram from '../../Scheduler/view/TimelineHistogram.js';\nimport SchedulerStores from '../../Scheduler/view/mixin/SchedulerStores.js';\nimport SchedulerResourceRendering from '../../Scheduler/view/mixin/SchedulerResourceRendering.js';\nimport CrudManagerView from '../../Scheduler/crud/mixin/CrudManagerView.js';\nimport Objects from '../../Core/helper/util/Objects.js';\nimport ProjectModel from '../model/ProjectModel.js';\n// Imitates ResourceAllocationInfo structure\nfunction buildReturnedValue(total) {\n    return {\n        allocation : {\n            total\n        }\n    };\n}\n/**\n * @module SchedulerPro/view/ResourceHistogram\n */\n/**\n * This view displays a read-only timeline report of the workload for the resources in a\n * {@link SchedulerPro/model/ProjectModel project}. The resource allocation is visualized as bars along the time axis\n * with an optional line indicating the maximum available time for each resource. A {@link Scheduler/column/ScaleColumn}\n * is also added automatically.\n *\n * To create a standalone histogram, simply configure it with a Project instance:\n *\n * ```javascript\n * const project = new ProjectModel({\n *     autoLoad : true,\n *     loadUrl  : 'examples/schedulerpro/view/data.json'\n * });\n *\n * const histogram = new ResourceHistogram({\n *     project,\n *     appendTo    : 'targetDiv',\n *     rowHeight   : 60,\n *     minHeight   : '20em',\n *     flex        : '1 1 50%',\n *     showBarTip  : true,\n *     columns     : [\n *         {\n *             width : 200,\n *             field : 'name',\n *             text  : 'Resource'\n *         }\n *     ]\n * });\n * ```\n *\n * {@inlineexample SchedulerPro/view/ResourceHistogram.js}\n *\n * ## Pairing the component\n *\n * You can also pair the histogram with other timeline views such as the Gantt or Scheduler,\n * using the {@link Scheduler/view/TimelineBase#config-partner} config.\n *\n * You can configure (or hide completely) the built-in scale column easily:\n *\n * ```javascript\n * const histogram = new ResourceHistogram({\n *    project,\n *    appendTo    : 'targetDiv',\n *    columns     : [\n *        {\n *            width : 200,\n *            field : 'name',\n *            text  : 'Resource'\n *        },\n *        // Hide the scale column (or add any other column configs)\n *        {\n *            type   : 'scale',\n *            hidden : true\n *        }\n *    ]\n * });\n * ```\n *\n * ## Changing displayed values\n *\n * To change the histogram bar texts, supply a {@link #config-getBarText} function.\n * Here for example the provided function displays resources time **left** instead of\n * allocated time\n *\n * ```javascript\n * new ResourceHistogram({\n *     getBarText(datum) {\n *         const resourceHistogram = this.owner;\n *\n *         // get default bar text\n *         let result = resourceHistogram.getBarTextDefault(...arguments);\n *\n *         // and if some work is done in the tick\n *         if (result) {\n *\n *             const unit = resourceHistogram.getBarTextEffortUnit();\n *\n *             // display the resource available time\n *             result = resourceHistogram.getEffortText(datum.maxEffort - datum.effort, unit);\n *         }\n *\n *         return result;\n *     },\n *     ...\n * })\n * ```\n *\n * @features SchedulerPro/feature/CellEdit\n * @features SchedulerPro/feature/ResourceNonWorkingTime\n * @features SchedulerPro/feature/TimeSpanHighlight\n *\n * @extends Scheduler/view/TimelineHistogram\n * @mixes Scheduler/view/mixin/SchedulerStores\n * @mixes Scheduler/view/mixin/SchedulerResourceRendering\n * @mixes Scheduler/crud/mixin/CrudManagerView\n *\n * @classtype resourcehistogram\n * @widget\n */\nexport default class ResourceHistogram extends TimelineHistogram.mixin(SchedulerStores, SchedulerResourceRendering, CrudManagerView) {\n    //region Config\n    static $name = 'ResourceHistogram';\n    static type = 'resourcehistogram';\n    /**\n     * @hideconfigs durationDisplayPrecision, resourceColumns, enableRecurringEvents, eventBarTextField,\n     * eventBodyTemplate, eventColor, eventLayout, eventRenderer, eventRendererThisObj, eventStyle,\n     * horizontalEventSorterFn, horizontalLayoutPackClass, horizontalLayoutStackClass, milestoneAlign,\n     * milestoneTextPosition, highlightPredecessors, highlightSuccessors, removeUnassignedEvent,\n     * eventAssignHighlightCls, eventCls, eventSelectedCls, fixedEventCls, overScheduledEventClass,\n     * timeZone\n     */\n    static configurable = {\n        projectModelClass : ProjectModel,\n        sortFeatureStore      : 'store',\n        timeAxisColumnCellCls : 'b-sch-timeaxis-cell b-resourcehistogram-cell',\n        /**\n         * Effort value format string.\n         * Must be a template supported by {@link Core/helper/util/NumberFormat} class.\n         * @config {String}\n         * @default\n         */\n        effortFormat : '0.#',\n        getRecordData : 'getRecordAllocationData',\n        aggregateDataEntry : 'aggregateAllocationEntry',\n        initAggregatedDataEntry : 'initAggregatedAllocationEntry',\n        hardRefreshOnTimeAxisReconfigure : false,\n        /**\n         * Specifies whether effort values should display units or not.\n         * @config {Boolean}\n         * @default\n         */\n        showEffortUnit : true,\n        useProjectTimeUnitsForScale : false,\n        /**\n         * Default time unit to display resources effort values.\n         * The value is used as default when displaying effort in tooltips and bars text.\n         * Yet the effective time unit used might change dynamically when zooming in the histogram\n         * so its ticks unit gets smaller than the default unit.\n         * Please use {@link #config-barTipEffortUnit} to customize default units for tooltips only\n         * and {@link #config-barTextEffortUnit} to customize default units in bar texts.\n         * @config {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'}\n         * @default hour\n         */\n        effortUnit : TimeUnit.Hour,\n        /**\n         * Default time unit used for displaying resources effort in bars.\n         * Yet the effective time unit used might change dynamically when zooming in the histogram\n         * so its ticks unit gets smaller than the default unit.\n         * Please use {@link #config-barTipEffortUnit} to customize default units for tooltips\n         * (or {@link #config-effortUnit} to customize both texts and tooltips default units).\n         * @config {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'}\n         * @default hour\n         */\n        barTextEffortUnit : null,\n        /**\n         * Default time unit used when displaying resources effort in tooltips.\n         * Yet the effective time unit used might change dynamically when zooming in the histogram\n         * so its ticks unit gets smaller than the default unit.\n         * Please use {@link #config-barTextEffortUnit} to customize default units for bar texts\n         * (or {@link #config-effortUnit} to customize both texts and tooltips default units).\n         * @config {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'}\n         * @default hour\n         */\n        barTipEffortUnit : null,\n        /**\n         * Set to `true` if you want to display the maximum resource allocation line.\n         * @config {Boolean}\n         * @default\n         */\n        showMaxEffort : true,\n        series : {\n            maxEffort : {\n                type  : 'outline',\n                field : 'maxEffort'\n            },\n            effort : {\n                type  : 'bar',\n                field : 'effort'\n            }\n        },\n        /**\n         * A Function which returns the tooltip text to display when hovering a bar.\n         * The following parameters are passed:\n         * @param {Object} context The tooltip context info\n         * @param {ResourceAllocationInterval} context.datum The histogram bar being hovered info\n         * @param {Core.widget.Tooltip} context.tip The tooltip instance\n         * @param {HTMLElement} context.element The Element for which the Tooltip is monitoring mouse movement\n         * @param {HTMLElement} context.activeTarget The target element that triggered the show\n         * @param {Event} context.event The raw DOM event\n         * @param {SchedulerPro.model.ResourceModel} data.record The record which effort\n         * the hovered bar displays.\n         * @returns {String} Tooltip HTML content\n         * @config {Function}\n         */\n        barTooltipTemplate({ datum }) {\n            let result = '';\n            const { inEventTimeSpan, isGroup } = datum;\n            if (inEventTimeSpan) {\n                if (isGroup) {\n                    result = this.getGroupBarTip(...arguments);\n                }\n                else {\n                    result = this.getResourceBarTip(...arguments);\n                }\n            }\n            return result;\n        },\n        /**\n         * Set to `true` if you want to display resources effort values in bars\n         * (for example: `24h`, `7d`, `60min` etc.).\n         * The text contents can be changed by providing {@link #config-getBarText} function.\n         * @config {Boolean}\n         */\n        showBarText : false,\n        /**\n         * A Function which returns the text to render inside a bar.\n         *\n         * Here for example the provided function displays resources time **left** instead of\n         * allocated time\n         *\n         * ```javascript\n         * new ResourceHistogram({\n         *     getBarText(datum) {\n         *         const resourceHistogram = this.owner;\n         *\n         *         const { showBarText } = resourceHistogram;\n         *\n         *         let result = '';\n         *\n         *         // respect existing API - show bar texts only when \"showBarText\" is true\n         *         // and if some work is done in the tick\n         *         if (showBarText && datum.effort) {\n         *\n         *             const unit = resourceHistogram.getBarTextEffortUnit();\n         *\n         *             // display the resource available time\n         *             result = resourceHistogram.getEffortText(datum.maxEffort - datum.effort, unit);\n         *         }\n         *\n         *         return result;\n         *     },\n         * })\n         * ```\n         *\n         * **Please note** that the function will be injected into the underlying\n         * {@link Core/widget/graph/Histogram} component that is used under the hood\n         * to render actual charts.\n         * So `this` will refer to the {@link Core/widget/graph/Histogram} instance, not\n         * this class instance.\n         * To access the view please use `this.owner` in the function:\n         *\n         * ```javascript\n         * new ResourceHistogram({\n         *     getBarText(datum) {\n         *         // \"this\" in the method refers core Histogram instance\n         *         // get the view instance\n         *         const resourceHistogram = this.owner;\n         *\n         *         .....\n         *     },\n         * })\n         * ```\n         * The following parameters are passed:\n         * @param {ResourceAllocationInterval} datum The datum being rendered\n         * @param {Number} index The index of the datum being rendered\n         * @returns {String} Text to render inside the bar\n         * @config {Function} getBarText\n         */\n        groupBarTipAssignmentLimit : 5,\n        /**\n         * Set to `true` to include inactive tasks allocation and `false` to not take such tasks into account.\n         * @config {Boolean}\n         * @default\n         */\n        includeInactiveEvents : false,\n        histogramWidget : {\n            cls : 'b-hide-offscreen b-resourcehistogram-histogram'\n        },\n        fixedRowHeight : true\n    };\n    //endregion\n    //region Constructor/Destructor\n    get timeAxis() {\n        return super.timeAxis;\n    }\n    set timeAxis(timeAxis) {\n        const currentTimeAxis = this._timeAxis;\n        super.timeAxis = timeAxis;\n        if (this.partner && !timeAxis || (currentTimeAxis && currentTimeAxis === timeAxis)) {\n            return;\n        }\n        this._timeAxis.ion({\n            name           : 'timeAxis',\n            endReconfigure : 'onTimeAxisEndReconfigure',\n            thisObj        : this\n        });\n    }\n    afterConfigure() {\n        super.afterConfigure();\n        const me = this;\n        me.onRecordAllocationCalculated = me.onRecordAllocationCalculated.bind(me);\n        me.onCommitAsyncCompletion = me.onCommitAsyncCompletion.bind(me);\n    }\n    onDestroy() {\n        super.onDestroy(...arguments);\n        // get graph ..if the project is not destroyed yet\n        const graph = this.project.getGraph?.();\n        if (graph && this.ticksIdentifier) {\n            graph.removeIdentifier(this.ticksIdentifier);\n        }\n    }\n    clearHistogramDataCache(record) {\n        if (!record) {\n            // remove cached histogram data (which is a set of graph entities) from the graph\n            for (const [record, entity] of this.getHistogramDataCache()?.entries()) {\n                record.removeEntity?.(entity);\n            }\n        }\n        super.clearHistogramDataCache(...arguments);\n    }\n    //endregion\n    //region Project\n    bindProject(project) {\n        this.detachListeners('resourceHistogramProject');\n        project.ion({\n            name                  : 'resourceHistogramProject',\n            refresh               : 'internalOnProjectRefresh',\n            delayCalculationStart : 'onProjectDelayCalculationStart',\n            delayCalculationEnd   : 'onProjectDelayCalculationEnd',\n            repopulateReplica     : 'onRepopulateReplica',\n            thisObj : this\n        });\n    }\n    updateProject(project) {\n        this.bindProject(project);\n        // project implements CrudManager API\n        this.crudManager = project;\n        this.store = project.resourceStore;\n    }\n    //endregion\n    //region Internal\n    getRowHeight() {\n        return this.rowHeight;\n    }\n    convertEffortUnit(value, unit, toUnit) {\n        return this.project.run('$convertDuration', value, unit, toUnit);\n    }\n    updateUseProjectTimeUnitsForScale() {\n        const me = this;\n        // Below this.scalePoints assignment of doesn't work until ResourceHistogram is painted\n        // since ScaleWidget being constructed tries to read its rootElement which results:\n        // \"Floating Widgets must have \"rootElement\" to be ...\"\n        if (me.isPainted) {\n            // we need to regenerate ScaleColumn points according to new unit values\n            const eventParams = { scalePoints : me.generateScalePoints() };\n            /**\n             * Fires when the component generates points for the {@link #property-scaleColumn scale column}.\n             *\n             * Use a listeners to override the generated scale points:\n             *\n             * ```javascript\n             * new ResourceHistogram({\n             *     ...\n             *     listeners : {\n             *         generateScalePoints(params) {\n             *             // provide text for each scale point (if not provided already)\n             *             params.scalePoints.forEach(point => {\n             *                 point.text = point.text || point.value;\n             *             });\n             *         }\n             *     }\n             * })\n             * ```\n             *\n             * @param {SchedulerPro.view.ResourceHistogram} source The component instance\n             * @param {ScalePoint[]} scalePoints Array of objects representing scale points. Each entry can have properties:\n             * - `value` - point value\n             * - `unit` - point value unit\n             * - `text` - label text (if not provided the point will not have a label displayed)\n             * @event generateScalePoints\n             * @category Scale column\n             */\n            me.trigger('generateScalePoints', eventParams);\n            // allow to override the points in a listener\n            me._generatedScalePoints = me.scalePoints = eventParams.scalePoints;\n            me.scheduleRefreshRows();\n        }\n    }\n    updateShowBarText(value) {\n        this.scheduleRefreshRows();\n    }\n    get eventStore() {\n        return this.project?.eventStore;\n    }\n    set eventStore(eventStore) {\n        super.eventStore = eventStore;\n    }\n    convertUnitsToHistogramValue(value, unit) {\n        return this.useProjectTimeUnitsForScale\n            ? this.convertEffortUnit(value, unit, TimeUnit.Millisecond)\n            : DateHelper.asMilliseconds(value, unit);\n    }\n    convertHistogramValueToUnits(value, unit) {\n        return this.useProjectTimeUnitsForScale\n            ? this.convertEffortUnit(value, TimeUnit.Millisecond, unit)\n            : DateHelper.as(unit, value);\n    }\n    buildScalePointText(scalePoint) {\n        return `${scalePoint.value}${DateHelper.getShortNameOfUnit(scalePoint.unit)}`;\n    }\n    /**\n     * Generates points for the {@link #property-scaleColumn scale column}.\n     *\n     * **Override the method to customize the scale column points.**\n     *\n     * @param {Number} [scaleMax] Maximum value for the scale. Uses current timeaxis increment if not provided.\n     * @param {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} [unit] Time\n     * unit `scaleMax` argument is expressed in.\n     * Uses current timeaxis unit if not provided.\n     * @returns {ScalePoint[]} Array of objects representing scale points. Each entry can have properties:\n     * - `value` - point value\n     * - `unit` - point value unit\n     * - `text` - label text (if not provided the point will not have a label displayed)\n     * @category Scale column\n     */\n    generateScalePoints(scaleMax, unit) {\n        // bail out if there is no project or it's not in the graph\n        if (!this.project?.graph) {\n            return;\n        }\n        const\n            { timeAxis } = this,\n            scalePoints           = [];\n        scaleMax = scaleMax || timeAxis.increment;\n        unit = unit || timeAxis.unit;\n        let scaleStep;\n        // If the ticks are defined as 1 unit let's break it down to smaller units\n        if (scaleMax === 1) {\n            // getting timeaxis tick sub-unit and number of them in a tick\n            unit     = DateHelper.getSmallerUnit(unit);\n            scaleMax = Math.round(\n                this.useProjectTimeUnitsForScale ? this.convertEffortUnit(scaleMax, timeAxis.unit, unit)\n                    : DateHelper.as(unit, scaleMax, timeAxis.unit)\n            );\n        }\n        // Let's try to guess how many points in the scale will work nicely\n        for (const factor of [7, 5, 4, 3, 2]) {\n            // unitsNumber is multiple of \"factor\" -> we generate \"factor\"-number of points\n            if (!(scaleMax % factor)) {\n                scaleStep = scaleMax / factor;\n                break;\n            }\n        }\n        // fallback to a single point equal to maximum value\n        if (!scaleStep) {\n            scaleStep = scaleMax;\n        }\n        for (let value = scaleStep; value <= scaleMax; value += scaleStep) {\n            scalePoints.push({\n                value\n            });\n        }\n        const lastPoint = scalePoints[scalePoints.length - 1];\n        // put unit and label to the last point\n        lastPoint.unit = unit;\n        lastPoint.text = this.buildScalePointText(lastPoint);\n        return scalePoints;\n    }\n    updateViewPreset(viewPreset) {\n        const me = this;\n        // Set a flag indicating that we're inside of `updateViewPreset` so our `onTimeAxisEndReconfigure` will skip its call.\n        // We call it here later.\n        me._updatingViewPreset = true;\n        super.updateViewPreset(...arguments);\n        me._updatingViewPreset = false;\n        // In `super.updateViewPreset` function `this.render` is called which checks if the engine is not dirty\n        // ..and we modify `ticksIdentifier` atom in `onTimeAxisEndReconfigure`\n        // so the engine state gets dirty and rendering gets delayed which ends up an exception.\n        // So we call `onTimeAxisEndReconfigure` after super `updateViewPreset` code\n        // to keep the engine non-dirty while zooming/setting a preset.\n        // This scenario is covered w/ SchedulerPro/tests/pro/view/ResourceHistogramZoom.t.js\n        if (me.project.isInitialCommitPerformed && me.isPainted) {\n            me.onTimeAxisEndReconfigure();\n        }\n    }\n    onRepopulateReplica() {\n        this.ticksIdentifier = null;\n        this.clearHistogramDataCache();\n    }\n    buildTicksIdentifier() {\n        const\n            me    = this,\n            graph = me.project.getGraph();\n        if (!me.ticksIdentifier) {\n            me.ticksIdentifier = graph.addIdentifier(CalculatedValueGen.new());\n        }\n        else {\n            const prevTicksCalendar = graph.read(me.ticksIdentifier);\n            me.project.clearCombinationsWith(prevTicksCalendar);\n        }\n        me.ticksIdentifier.writeToGraph(graph, new BaseCalendarMixin({\n            unspecifiedTimeIsWorking : false,\n            intervals                : me.timeAxis.ticks.map(tick => {\n                return {\n                    startDate : tick.startDate,\n                    endDate   : tick.endDate,\n                    isWorking : true\n                };\n            })\n        }));\n        // process ticks to detect if their widths are monotonous\n        // or some tick has a different width value\n        me.collectTicksWidth();\n        return me.ticksIdentifier;\n    }\n    onProjectDelayCalculationStart() {\n        this.suspendRefresh();\n    }\n    onProjectDelayCalculationEnd() {\n        this.resumeRefresh(false);\n    }\n    projectUnitsHasChanged() {\n        const { project } = this;\n        return project.daysPerMonth !== this._projectDaysPerMonth ||\n            project.daysPerWeek !== this._projectDaysPerWeek ||\n            project.hoursPerDay !== this._projectHoursPerDay;\n    }\n    internalOnProjectRefresh({ source, isInitialCommit, isCalculated }) {\n        if (isCalculated) {\n            const me = this;\n            if (!me.ticksIdentifier) {\n                me.onTimeAxisEndReconfigure();\n            }\n            // if project units has changed and we use them for scale points\n            if (me.useProjectTimeUnitsForScale && me.projectUnitsHasChanged()) {\n                me._projectDaysPerMonth = source.daysPerMonth;\n                me._projectDaysPerWeek = source.daysPerWeek;\n                me._projectHoursPerDay = source.hoursPerDay;\n                // regenerate scale points\n                const eventParams = { scalePoints : me.generateScalePoints() };\n                me.trigger('generateScalePoints', eventParams);\n                // allow to override the points in a listener\n                me._generatedScalePoints = me.scalePoints = eventParams.scalePoints;\n            }\n            // If rowManager got no topRow yet - reinitialize it otherwise refresh does nothing\n            if (!me.rowManager.topRow || me.rowManager.topRow.id == null) {\n                me.rowManager.reinitialize();\n            }\n            // enable view refreshing back (trigger refresh if that's an initial commit)\n            else if (isInitialCommit) {\n                me.refreshRows();\n            }\n        }\n    }\n    relayStoreDataChange(event) {\n        super.relayStoreDataChange(event);\n        if (this.store.count === 0) {\n            // To clear histogram when no rows to refresh\n            this.histogramWidget.data = [];\n            this.histogramWidget.refresh();\n        }\n    }\n    changeHistogramWidget(widget, oldWidget) {\n        const me = this;\n        if (!oldWidget) {\n            const { series } = me;\n            if (!me.showMaxEffort && series.maxEffort) {\n                series.maxEffort = false;\n            }\n            widget = super.changeHistogramWidget(...arguments);\n        }\n        return widget;\n    }\n    getRectConfig(rectConfig, datum, index, series) {\n        if (datum.inEventTimeSpan) {\n            const\n                { topValue } = this,\n                value = datum[series.field],\n                forceHeight = series.stretch ? 1 : datum.height;\n            rectConfig.height = forceHeight || (value > topValue ? topValue : value) / topValue;\n            rectConfig.y = 1 - rectConfig.height;\n            return rectConfig;\n        }\n    }\n    // Injectable method.\n    getRectClassDefault(series, rectConfig, datum) {\n        if (series.id === 'effort') {\n            switch (true) {\n                case datum.isOverallocated :\n                    return 'b-overallocated';\n                case datum.isUnderallocated :\n                    return 'b-underallocated';\n            }\n        }\n        return '';\n    }\n    get effortFormatter() {\n        const\n            me     = this,\n            format = me.effortFormat;\n        let formatter = me._effortFormatter;\n        if (!formatter || me._effortFormat !== format) {\n            formatter = NumberFormat.get(me._lastFormat = format);\n            me._effortFormatter = formatter;\n        }\n        return formatter;\n    }\n    /**\n     * Formats effort value to display in the component bars and tooltips.\n     * @param {Number} effort Effort value\n     * @param {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} unit Effort value unit\n     * @param {Boolean} [showEffortUnit=this.showEffortUnit] Provide `true` to include effort unit. If not provided\n     * uses {@link #config-showEffortUnit} value.\n     * @returns {String} Formatted effort value.\n     */\n    getEffortText(effort, unit, showEffortUnit = this.showEffortUnit) {\n        // bail out if there is no project or it's not in the graph\n        if (!this.project?.graph) {\n            return;\n        }\n        const { scaleUnit, effortFormatter } = this;\n        unit = unit || scaleUnit;\n        const\n            localizedUnit = DateHelper.getShortNameOfUnit(unit),\n            effortInUnits = this.convertHistogramValueToUnits(effort, unit);\n        return effortFormatter.format(effortInUnits) + (showEffortUnit ? localizedUnit : '');\n    }\n    getBarTipEffortUnit() {\n        const\n            { effortUnit, barTipEffortUnit, timeAxis } = this,\n            defaultUnit                                = barTipEffortUnit || effortUnit;\n        return DateHelper.compareUnits(timeAxis.unit, defaultUnit) < 0 ? timeAxis.unit : defaultUnit;\n    }\n    getGroupBarTip({ datum }) {\n        const\n            me           = this,\n            { timeAxis } = me;\n        let result = '';\n        if (datum.inEventTimeSpan) {\n            const\n                unit          = me.getBarTipEffortUnit(...arguments),\n                allocated     = me.getEffortText(datum.effort, unit),\n                available     = me.getEffortText(datum.maxEffort, unit),\n                assignmentTpl = me.L('L{groupBarTipAssignment}');\n            let\n                dateFormat        = 'L',\n                resultFormat      = me.L('L{groupBarTipInRange}'),\n                assignmentsSuffix = '';\n            if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Day) === 0) {\n                resultFormat = me.L('L{groupBarTipOnDate}');\n            }\n            else if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Second) <= 0) {\n                dateFormat = 'HH:mm:ss A';\n            }\n            else if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Hour) <= 0) {\n                dateFormat = 'LT';\n            }\n            let assignmentsArray = [...datum.resourceAllocation.entries()]\n                .filter(([resource, data]) => data.effort)\n                .sort(([key1, value1], [key2, value2]) => value1.effort > value2.effort ? -1 : 1);\n            if (assignmentsArray.length > me.groupBarTipAssignmentLimit) {\n                assignmentsSuffix = '<br>' + me.L('L{plusMore}').replace('{value}', assignmentsArray.length - me.groupBarTipAssignmentLimit);\n                assignmentsArray = assignmentsArray.slice(0, this.groupBarTipAssignmentLimit);\n            }\n            const assignments = assignmentsArray.map(([resource, info]) => {\n                return assignmentTpl.replace('{resource}', StringHelper.encodeHtml(resource.name))\n                    .replace('{allocated}', me.getEffortText(info.effort, unit))\n                    .replace('{available}', me.getEffortText(info.maxEffort, unit))\n                    .replace('{cls}', info.isOverallocated ? 'b-overallocated' : info.isUnderallocated ? 'b-underallocated' : '');\n            }).join('<br>') + assignmentsSuffix;\n            result = resultFormat\n                .replace('{assignments}', assignments)\n                .replace('{startDate}', DateHelper.format(datum.tick.startDate, dateFormat))\n                .replace('{endDate}', DateHelper.format(datum.tick.endDate, dateFormat))\n                .replace('{allocated}', allocated)\n                .replace('{available}', available)\n                .replace('{cls}', datum.isOverallocated ? 'b-overallocated' : datum.isUnderallocated ? 'b-underallocated' : '');\n            result = `<div class=\"b-histogram-bar-tooltip\">${result}</div>`;\n        }\n        return result;\n    }\n    getResourceBarTip({ datum }) {\n        const\n            me           = this,\n            { timeAxis } = me;\n        let result = '';\n        if (datum.inEventTimeSpan) {\n            const\n                unit       = me.getBarTipEffortUnit(),\n                allocated  = me.getEffortText(datum.effort, unit),\n                available  = me.getEffortText(datum.maxEffort, unit);\n            let\n                dateFormat   = 'L',\n                resultFormat = me.L('L{barTipInRange}');\n            if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Day) === 0) {\n                resultFormat = me.L('L{barTipOnDate}');\n            }\n            else if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Second) <= 0) {\n                dateFormat = 'HH:mm:ss A';\n            }\n            else if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Hour) <= 0) {\n                dateFormat = 'LT';\n            }\n            result = resultFormat\n                .replace('{startDate}', DateHelper.format(datum.tick.startDate, dateFormat))\n                .replace('{endDate}', DateHelper.format(datum.tick.endDate, dateFormat))\n                .replace('{allocated}', allocated)\n                .replace('{available}', available)\n                .replace('{cls}', datum.isOverallocated ? 'b-overallocated' : datum.isUnderallocated ? 'b-underallocated' : '');\n            if (datum.resource) {\n                result = result\n                    .replace('{resource}', StringHelper.encodeHtml(datum.resource.name));\n            }\n            result = `<div class=\"b-histogram-bar-tooltip\">${result}</div>`;\n        }\n        return result;\n    }\n    /**\n     * Returns unit to display effort values in when rendering the histogram bars.\n     * The method by default returns {@link #config-barTextEffortUnit} value if provided\n     * and if not falls back to {@link #config-effortUnit} value.\n     * But it also takes zooming into account and when\n     * the timeaxis ticks unit gets smaller than the default value the ticks unit is returned.\n     *\n     * @returns {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} Time unit to display\n     * effort values in.\n     */\n    getBarTextEffortUnit() {\n        const\n            { effortUnit, barTextEffortUnit, timeAxis } = this,\n            defaultUnit                                 = barTextEffortUnit || effortUnit;\n        return DateHelper.compareUnits(timeAxis.unit, defaultUnit) < 0 ? timeAxis.unit : defaultUnit;\n    }\n    /**\n     * The default method that returns the text to render inside a bar if no\n     * {@link #config-getBarText} function was provided.\n     *\n     * The method can be used in a {@link #config-getBarText} function\n     * to invoke the default implementation:\n     *\n     * ```javascript\n     * new ResourceHistogram({\n     *     getBarText(datum) {\n     *         const resourceHistogram = this.owner;\n     *\n     *         // get default bar text\n     *         let result = resourceHistogram.getBarTextDefault();\n     *\n     *         // if the resource is overallocated in that tick display \"Overallocated! \" string\n     *         // before the allocation value\n     *         if (result && datum.maxEffort < datum.effort) {\n     *             result = 'Overallocated! ' + result;\n     *         }\n     *\n     *         return result;\n     *     },\n     * })\n     * ```\n     * The following parameters are passed:\n     * @param {ResourceAllocationInterval} datum The data of the bar being rendered\n     * @param {Number} index The index of the datum being rendered\n     * @param {String} series Identifier of the series (provided only if the histogram widget\n     * {@link Core/widget/graph/Histogram#config-singleTextForAllBars} is `false`)\n     * @param {HistogramRenderData} renderData Current render data giving access to the record, row and cell\n     * being rendered.\n     * @returns {String} Text to render inside the bar\n     */\n    getBarTextDefault(datum, index) {\n        const\n            view            = this.owner,\n            { showBarText } = view;\n        let result = '';\n        if (showBarText && datum.inEventTimeSpan) {\n            const unit = view.getBarTextEffortUnit();\n            result     = view.getEffortText(datum.effort, unit);\n        }\n        return result;\n    }\n    updateShowMaxEffort(value) {\n        const me = this;\n        me._showMaxEffort = value;\n        const widget = me._histogramWidget;\n        // bail out in case there is no widget constructed yet\n        if (!widget) {\n            return;\n        }\n        const { series } = me;\n        if (!value) {\n            if (series.maxEffort) {\n                me._seriesMaxEffort = series.maxEffort;\n                series.maxEffort = false;\n            }\n        }\n        else if (typeof value === 'object') {\n            series.maxEffort = value;\n        }\n        else if (typeof me._seriesMaxEffort === 'object') {\n            series.maxEffort = me._seriesMaxEffort;\n        }\n        else {\n            series.maxEffort = {\n                id    : 'maxEffort', \n                type  : 'outline',\n                field : 'maxEffort'\n            };\n        }\n        me.scheduleRefreshRows();\n    }\n    updateIncludeInactiveEvents(value) {\n        // update collected reports wih new includeInactiveEvents flag state\n        this.getHistogramDataCache()?.forEach(allocationReport => allocationReport.includeInactiveEvents = value);\n    }\n    //endregion\n    //region Events\n    onTimeAxisEndReconfigureInternal() {\n        const me = this;\n        // Skip call triggered by viewPreset setting we have `updateViewPreset` method overridden where we call `onTimeAxisEndReconfigure` later\n        if (!me._updatingViewPreset) {\n            const { unit, increment } = me.timeAxis;\n            // re-generate scale point on zooming in/out\n            if (unit !== me._lastTimeAxisUnit || increment !== me._lastTimeAxisIncrement) {\n                // remember last used unit & increment to distinguish zooming from timespan changes\n                me._lastTimeAxisUnit = unit;\n                me._lastTimeAxisIncrement = increment;\n                // regenerate scale points\n                const\n                    scalePoints = me.generateScalePoints(),\n                    eventParams = { scalePoints };\n                // allow to override the points in a listener\n                me.trigger('generateScalePoints', eventParams);\n                me._generatedScalePoints = me.scalePoints = eventParams.scalePoints;\n            }\n            me.buildTicksIdentifier();\n        }\n    }\n    calculateRowHeights() {}\n    onTimeAxisEndReconfigure() {\n        const me = this;\n        // Skip call triggered by viewPreset setting we have `updateViewPreset` method overridden where we call `onTimeAxisEndReconfigure` later\n        if (!me._updatingViewPreset) {\n            if (me.project.graph) {\n                me.onTimeAxisEndReconfigureInternal();\n            }\n            // In delayed calculation mode (the default) we might not be in graph yet, postpone buildTicksIdentifier until we are\n            else {\n                me.project.ion({\n                    graphReady() {\n                        me.onTimeAxisEndReconfigureInternal();\n                    },\n                    thisObj : me,\n                    once    : true\n                });\n            }\n        }\n    }\n    //endregion\n    //region Render\n    extractHistogramDataArray(allocationReport, record) {\n        return allocationReport.allocation.total;\n    }\n    renderRows() {\n        const me = this;\n        if (!me.ticksIdentifier && me.project.isInitialCommitPerformed) {\n            // If we render rows but have no ticksIdentifier means data loading and 1st commit\n            // happened before the histogram was created.\n            // Handle timeaxis settings to build ticksIdentifier and scale column points.\n            me.onTimeAxisEndReconfigure();\n            // If timeView range is not defined then the timeaxis header looks empty so fill it in here (it triggers the column refresh)\n            if (!me.timeView.startDate || !me.timeView.endDate) {\n                me.timeView.range = {\n                    startDate : me.startDate,\n                    endDate   : me.endDate\n                };\n            }\n        }\n        return super.renderRows(...arguments);\n    }\n    async shiftPrevious() {\n        super.shiftPrevious(...arguments);\n        await this.project.commitAsync();\n    }\n    async shiftNext() {\n        super.shiftNext(...arguments);\n        await this.project.commitAsync();\n    }\n    onCommitAsyncCompletion() {\n        // trigger rendering after the Engine finishes a transaction\n        this.renderScheduledRecords();\n        this._renderOnCommitPromise = null;\n    }\n    onRecordAllocationCalculated(allocation) {\n        if (!this.isDestroying) {\n            // update cache to trigger histogramDataCacheSet event\n            this.setHistogramDataCache(allocation.resource, allocation.owner);\n        }\n    }\n    buildResourceAllocationReport(resource) {\n        return this.project.resourceAllocationInfoClass.new({\n            includeInactiveEvents : this.includeInactiveEvents,\n            ticks                 : this.ticksIdentifier,\n            resource\n        });\n    }\n    /**\n     * Returns the provided record's allocation data.\n     * The process of allocation collecting is asynchronous so the method returns a `Promise`\n     * that provides the data once resolved.\n     *\n     * The method used as the default value of {@link #config-getRecordData} config.\n     * @param {SchedulerPro.model.ResourceModel} record Resource record to collect allocation for.\n     * @returns {Promise} A `Promise` that provides the provided resource\n     * {@link SchedulerPro/model/ResourceModel#typedef-ResourceAllocationInfo allocation info} when resolved.\n     */\n    async getRecordAllocationData(record) {\n        const\n            me = this,\n            { project } = me;\n        // No drawing before engine's initial commit\n        while (!me.ticksIdentifier || !project.isInitialCommitPerformed) {\n            await project.await('commitFinalized');\n        }\n        // Ignore resources not in the graph\n        if (record.graph) {\n            const\n                graph            = project.getGraph(),\n                allocationReport = me.buildResourceAllocationReport(record);\n            record.addEntity(allocationReport);\n            await graph.readAsync(allocationReport.$.allocation);\n            // after this transaction finishes we will\n            // track further allocation report changes with onRecordAllocationCalculated method\n            graph.ongoing.then(() => {\n                graph.addListener(allocationReport.$.allocation, me.onRecordAllocationCalculated);\n            });\n            return allocationReport;\n        }\n    }\n    onHistogramDataCacheSet() {\n        super.onHistogramDataCacheSet(...arguments);\n        const me = this;\n        // trigger rendering right after the Engine finishes its current commitAsync() call\n        if (!me._renderOnCommitPromise) {\n            me._renderOnCommitPromise = me.project.graph.ongoing.then(me.onCommitAsyncCompletion);\n        }\n    }\n    aggregateRecordsHistogramData(records, aggregationContext) {\n        const result = super.aggregateRecordsHistogramData(records, aggregationContext);\n        if (Objects.isPromise(result)) {\n            return result.then(buildReturnedValue);\n        }\n        return buildReturnedValue(result);\n    }\n    /**\n     * The default function that initializes a target group record entry.\n     *\n     * The method is used as {@link #config-initAggregatedDataEntry} default value.\n     * @returns {ResourceAllocationInterval} Returns an empty allocation entry.\n     * @category Parent histogram data collecting\n     */\n    initAggregatedAllocationEntry() {\n        return {\n            tick               : null,\n            effort             : 0,\n            maxEffort          : 0,\n            units              : 0,\n            isGroup            : true,\n            inEventTimeSpan    : false,\n            resourceAllocation : new Map()\n        };\n    }\n    /**\n     * The default function used for aggregating a child record histogram data values to its parent entry.\n     * The function sums up `effort` and `maxEffort` series values. It also propagates\n     * {@link SchedulerPro/model/ResourceModel#typedef-ResourceAllocationInterval isOverallocated} and\n     * {@link SchedulerPro/model/ResourceModel#typedef-ResourceAllocationInterval isUnderallocated} values so if there\n     * is a child having the corresponding value as `true` it will be `true` on the parent level as well.\n     *\n     * All children {@link SchedulerPro/model/ResourceModel#typedef-ResourceAllocationInterval assignments} are united\n     * on the parent level {@link SchedulerPro/model/ResourceModel#typedef-ResourceAllocationInterval assignments}\n     * property.\n     *\n     * The method is used as {@link #config-aggregateDataEntry} default value.\n     *\n     * @param {ResourceAllocationInterval} aggregated Target parent data entry to aggregate the entry into.\n     * @param {ResourceAllocationInterval} entry Current entry to aggregate into `aggregated`.\n     * @param {Number} arrayIndex Index of the current record (among other\n     * records being aggregated).\n     * @param {Number} colIndex `entry` index in the current array\n     * @returns {ResourceAllocationInterval} Resulting parent data entry.\n     * @category Parent histogram data collecting\n     */\n    aggregateAllocationEntry(acc, entry, _recordIndex, _entryIndex, aggregationContext) {\n        acc.resourceAllocation.set(entry.resource, entry);\n        acc.tick             = entry.tick;\n        acc.isOverallocated  = acc.isOverallocated || entry.isOverallocated;\n        acc.isUnderallocated = acc.isUnderallocated || entry.isUnderallocated;\n        acc.inEventTimeSpan  = acc.inEventTimeSpan || entry.inEventTimeSpan;\n        if (entry.assignments) {\n            if (acc.assignments) {\n                entry.assignments.forEach(assignment => acc.assignments.add(assignment));\n            }\n            else {\n                acc.assignments = new Set(entry.assignments);\n            }\n        }\n        return acc;\n    }\n    generateGroupScalePoints(record) {\n        const\n            me          = this,\n            children    = me.getGroupChildren(record),\n            scalePoints = me.generateScalePoints(me.timeAxis.increment * children.length),\n            eventParams = { scalePoints, groupParent : record };\n        me.trigger('generateScalePoints', eventParams);\n        return eventParams.scalePoints;\n    }\n    processRecordRenderData(renderData) {\n        // Override histogram topValue and scalePoints for group records\n        if (this.isGroupRecord(renderData.record)) {\n            const\n                scalePoints = this.generateGroupScalePoints(renderData.record),\n                topValue    = this.getTopValueByScalePoints(scalePoints);\n            renderData.scaleWidgetConfig = { scalePoints };\n            renderData.histogramConfig = { ...renderData.histogramConfig, topValue };\n        }\n        else {\n            renderData = super.processRecordRenderData(renderData);\n        }\n        return renderData;\n    }\n    //endregion\n    //region Localization\n    updateLocalization() {\n        const me = this;\n        // Translate scale points if we have them (update localization on construction step is called too early)\n        // and the scale points is generated by the histogram which means their labels use localized unit abbreviations\n        if (me._generatedScalePoints === me.scalePoints && me.scalePoints) {\n            me.scalePoints.forEach(scalePoint => {\n                // if the point is labeled let's rebuild its text using new locale\n                if (scalePoint.text && scalePoint.unit) {\n                    scalePoint.text = me.buildScalePointText(scalePoint);\n                }\n            });\n        }\n        super.updateLocalization(...arguments);\n    }\n    //endregion\n}\nResourceHistogram.initClass();\nResourceHistogram._$name = 'ResourceHistogram';", "import StringHelper from '../../Core/helper/StringHelper.js';\nimport ResourceHistogram from './ResourceHistogram.js';\nimport ResourceUtilizationStore from '../data/ResourceUtilizationStore.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport { TimeUnit } from '../../Engine/scheduling/Types.js';\nimport '../../Grid/column/TreeColumn.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport Tree from '../../Grid/feature/Tree.js';\n/**\n * @module SchedulerPro/view/ResourceUtilization\n */\n/**\n * View showing the utilization levels of the project resources.\n * The resources are displayed in a summary list where each row can\n * be expanded to show the events assigned for the resource.\n *\n * This demo shows the Resource utilization widget:\n * {@inlineexample SchedulerPro/view/ResourceUtilization.js}\n *\n * The view requires a {@link #config-project Project instance} to be provided:\n *\n * ```javascript\n * const project = new ProjectModel({\n *     autoLoad  : true,\n *     transport : {\n *         load : {\n *             url : 'examples/schedulerpro/view/data.json'\n *         }\n *     }\n * });\n *\n * const resourceUtilization = new ResourceUtilization({\n *     project,\n *     appendTo    : 'targetDiv',\n *     rowHeight   : 60,\n *     minHeight   : '20em',\n *     flex        : '1 1 50%',\n *     showBarTip  : true\n * });\n * ```\n *\n * ## Pairing the component\n *\n * You can also pair the view with other timeline views such as the Gantt or Scheduler,\n * using the {@link #config-partner} config.\n *\n  * ## Changing displayed values\n *\n * To change the displayed bar texts, supply a {@link #config-getBarText} function.\n * Here for example the provided function displays resources time **left** instead of\n * allocated time\n *\n * ```javascript\n * new ResourceUtilization({\n *     getBarText(datum) {\n *         const view = this.owner;\n *\n *         // get default bar text\n *         let result = view.getBarTextDefault(...arguments);\n *\n *         // For resource records we will display the time left for allocation\n *         if (result && datum.resource) {\n *\n *             const unit = view.getBarTextEffortUnit();\n *\n *             // display the resource available time\n *             result = view.getEffortText(datum.maxEffort - datum.effort, unit);\n *         }\n *\n *         return result;\n *     },\n * })\n * ```\n *\n * @extends SchedulerPro/view/ResourceHistogram\n * @classtype resourceutilization\n * @widget\n */\nexport default class ResourceUtilization extends ResourceHistogram {\n    //region Config\n    static $name = 'ResourceUtilization';\n    static type = 'resourceutilization';\n    static configurable = {\n        /**\n         * @hideconfigs crudManager, crudManagerClass, assignments, resources, events, dependencies, assignmentStore,\n         * resourceStore, eventStore, dependencyStore, data, timeZone\n         */\n        scaleColumn : null,\n        /**\n         * A Function which returns the text to render inside a bar.\n         *\n         * Here for example the provided function displays resources time **left** instead of\n         * allocated time\n         *\n         * ```javascript\n         * new ResourceUtilization({\n         *     getBarText(datum) {\n         *         const resourceUtilization = this.owner;\n         *\n         *         // get default bar text\n         *         let result = view.getBarTextDefault();\n         *\n         *         // For resource records we will display the time left for allocation\n         *         if (result && datum.resource) {\n         *\n         *             const unit = resourceUtilization.getBarTextEffortUnit();\n         *\n         *             // display the resource available time\n         *             result = resourceUtilization.getEffortText(datum.maxEffort - datum.effort, unit);\n         *         }\n         *\n         *         return result;\n         *     },\n         * })\n         * ```\n         *\n         * **Please note** that the function will be injected into the underlying\n         * {@link Core/widget/graph/Histogram} component that is used under the hood\n         * to render actual charts.\n         * So `this` in the function will refer to the {@link Core/widget/graph/Histogram} instance.\n         * To access the `ResourceUtilization` instance please use `this.owner` in the function body:\n         *\n         * ```javascript\n         * new ResourceUtilization({\n         *     getBarText(datum) {\n         *         // \"this\" in the method refers core Histogram instance\n         *         // get the view instance\n         *         const view = this.owner;\n         *\n         *         .....\n         *     },\n         * })\n         * ```\n         * The following parameters are passed:\n         * @param {ResourceAllocationInterval|AssignmentAllocationInterval} datum The datum being rendered.\n         * Either {@link SchedulerPro.model.ResourceModel#typedef-ResourceAllocationInterval} object for resource records (root level records)\n         * or {@link SchedulerPro.model.ResourceModel#typedef-AssignmentAllocationInterval} object for assignment records\n         * @param {Number} index The index of the datum being rendered\n         * @returns {String} Text to render inside the bar\n         * @config {Function} getBarText\n         */\n        /* */\n        timeAxisColumnCellCls : 'b-sch-timeaxis-cell b-resourceutilization-cell',\n        /**\n         * A ProjectModel instance (or a config object) to display resource allocation of.\n         *\n         * Note: This config is mandatory.\n         * @config {ProjectModelConfig|SchedulerPro.model.ProjectModel} project\n         */\n        rowHeight : 30,\n        showEffortUnit : false,\n        /**\n         * @config {Boolean} showMaxEffort\n         * @hide\n         */\n        showMaxEffort : false,\n        /**\n         * Set to `true` if you want to display resources effort values in bars\n         * (for example: `24h`, `7d`, `60min` etc.).\n         * The text contents can be changed by providing {@link #config-getBarText} function.\n         * @config {Boolean}\n         * @default\n         */\n        showBarText : true,\n        /**\n         * A Function which returns the tooltip text to display when hovering a bar.\n         * The following parameters are passed:\n         * @param {Object} data The backing data of the histogram rectangle\n         * @param {Object} data.rectConfig The rectangle configuration object\n         * @param {Object} data.datum The hovered bar data\n         * @param {Number} data.index The index of the hovered bar data\n         * @param {SchedulerPro.model.ResourceUtilizationModel} data.record The record which effort\n         * the hovered bar displays.\n         * @returns {String} Tooltip HTML content\n         * @config {Function}\n         */\n        barTooltipTemplate({ datum }) {\n            let result = '';\n            const { inEventTimeSpan, isGroup, resource, assignment } = datum;\n            // const barTip = this.callback('getBarTextTip', me, [renderData, data[index], index]);\n            if (inEventTimeSpan) {\n                if (isGroup) {\n                    result = this.getGroupBarTip(...arguments);\n                }\n                else if (assignment) {\n                    result = this.getAssignmentBarTip(...arguments);\n                }\n                else if (resource) {\n                    result = this.getResourceBarTip(...arguments);\n                }\n            }\n            return result;\n        },\n        series : {\n            effort : {\n                // We don't want the histogram bar heights based on effort\n                // so set \"stretch\" here to make bars to take the whole row height\n                stretch : true\n            }\n        },\n        readOnly : true,\n        columns : [\n            {\n                type        : 'tree',\n                field       : 'name',\n                text        : 'L{nameColumnText}',\n                localeClass : this\n            }\n        ],\n        histogramWidget : {\n            cls : 'b-hide-offscreen b-resourceutilization-histogram'\n        }\n    };\n    //endregion\n    /**\n     * @event generateScalePoints\n     * @hide\n     */\n    /**\n     * @function generateScalePoints\n     * @hide\n     */\n    /**\n     * @member {Scheduler.column.ScaleColumn} scaleColumn\n     * @hide\n     */\n    construct() {\n        super.construct(...arguments);\n        this.rowManager.ion({\n            renderRow : 'onRowManagerRenderRow',\n            thisObj   : this\n        });\n    }\n    updateProject(project) {\n        const store = this.store;\n        super.updateProject(project);\n        // Super call sets this.store to resource store\n        // 1) revert if a store was provided explicitly\n        // 2) otherwise generating ResourceUtilizationStore\n        this.store = store || this.buildStore(project);\n    }\n    updateResourceStore(resourceStore) {\n        this._resourceStore = resourceStore;\n    }\n    buildStore(project) {\n        project = this.project;\n        return ResourceUtilizationStore.new({ project });\n    }\n    //region Render\n    async getTipHtml(tooltipContext) {\n        const\n            index          = tooltipContext.activeTarget.dataset.index,\n            record         = this.getRecordFromElement(tooltipContext.activeTarget),\n            allocationData = await this.getRecordHistogramData(record),\n            datum          = this.extractHistogramDataArray(allocationData, record)[parseInt(index, 10)];\n        return this.barTooltipTemplate({ ...tooltipContext, record, index, datum });\n    }\n    getRecordAllocationData(record, ...args) {\n        record = this.resolveRecordToOrigin(record);\n        if (record.isResourceModel) {\n            return super.getRecordAllocationData(record, ...args);\n        }\n        else if (record.isAssignmentModel) {\n            // if that's an assignment re-invoke this.getRecordHistogramData() for resource\n            return this.getRecordHistogramData(record.resource, ...args);\n        }\n    }\n    onDestroy() {\n        if (this.destroyStores) {\n            this.store?.destroy();\n        }\n        super.onDestroy();\n    }\n    onRecordAllocationCalculated(allocation) {\n        const me = this;\n        if (!me.isDestroying) {\n            const\n                allocationReport  = allocation.owner,\n                assignmentRecords = [...allocation.byAssignments.keys()]\n                    .reduce((acc, assignment) => {\n                        const record = me.resolveOriginToRecord(assignment);\n                        if (record) {\n                            acc.push(record);\n                        }\n                        return acc;\n                    }, []),\n                resourceRecord = me.resolveOriginToRecord(allocation.resource);\n            if (resourceRecord) {\n                me.setHistogramDataCache(resourceRecord, allocationReport);\n            }\n            for (const assignmentRecord of assignmentRecords) {\n                me.setHistogramDataCache(assignmentRecord, allocationReport);\n            }\n            // trigger rendering right after the Engine finishes its current commitAsync() call\n            if (!me._renderOnCommitPromise) {\n                me._renderOnCommitPromise = me.project.graph.ongoing.then(me.onCommitAsyncCompletion.bind(me));\n            }\n        }\n    }\n    onRowManagerRenderRow({ row, record }) {\n        const isGroup = this.isGroupRecord(record);\n        record = this.resolveRecordToOrigin(record);\n        // indicate row kinds\n        row.assignCls({\n            'b-resource-row'   : record.isResourceModel || isGroup,\n            'b-assignment-row' : !isGroup && record.isAssignmentModel\n        });\n    }\n    /**\n     * The view store records wrap \"real\" resources and assignments.\n     * This method resolves a record to its original record resource or assignment.\n     * If the record does not wrap any record (happens for example for parent records when\n     * using {@link Grid/feature/TreeGroup} feature) then the method returns the record itself.\n     * @param {SchedulerPro.model.ResourceUtilizationModel} record The view store record\n     * @returns {SchedulerPro.model.ResourceModel|SchedulerPro.model.AssignmentModel|SchedulerPro.model.ResourceUtilizationModel} Original model\n     */\n    resolveRecordToOrigin(record) {\n        return record.origin || record.$original || record;\n    }\n    resolveOriginToRecord(origin) {\n        let record = origin;\n        if (this.store.isResourceUtilizationStore) {\n            record = this.store.getModelByOrigin(origin) || record;\n        }\n        else if (origin.hasLinks) {\n            for (const link of origin.$links) {\n                if (this.store.includes(link)) {\n                    return link;\n                }\n            }\n        }\n        return record;\n    }\n    getHistogramDataCache(record) {\n        if (record) {\n            record = this.resolveRecordToOrigin(record);\n        }\n        return super.getHistogramDataCache(record);\n    }\n    setHistogramDataCache(record, data) {\n        record = this.resolveRecordToOrigin(record);\n        return super.setHistogramDataCache(record, data);\n    }\n    scheduleRecordRefresh(record) {\n        record = this.resolveOriginToRecord(record);\n        return super.scheduleRecordRefresh(record);\n    }\n    scheduleRecordParentsRefresh(record) {\n        record = this.resolveOriginToRecord(record);\n        return super.scheduleRecordParentsRefresh(record);\n    }\n    getCell(data) {\n        // if real resource or assignment is provided\n        if (data.record?.isResourceModel || data.record?.isAssignmentModel) {\n            // use its wrapper record to find proper cell\n            data.record = this.resolveOriginToRecord(data.record);\n        }\n        return super.getCell(data);\n    }\n    changeHistogramWidget(widget) {\n        if (widget && !widget.isHistogram) {\n            if (!this.getBarTextRenderData && !widget?.getBarTextRenderData) {\n                widget.getBarTextRenderData = this.getBarTextRenderDataDefault;\n            }\n            widget.height = this.rowHeight;\n        }\n        return super.changeHistogramWidget(widget);\n    }\n    getBarTextRenderDataDefault(renderData, datum, index) {\n        // place effort text centered vertically\n        renderData.y = '50%';\n        return renderData;\n    }\n    extractHistogramDataArray(allocationReport, record) {\n        let data;\n        const origin = this.resolveRecordToOrigin(record);\n        if (this.isGroupRecord(record)) {\n            data = allocationReport.allocation.total;\n        }\n        else if (origin.isResourceModel) {\n            data = allocationReport.allocation.total;\n        }\n        else if (origin.isAssignmentModel) {\n            // Not having an assignment in the report could mean\n            // we've just added the assignment and it's not yet processed by the Engine.\n            // So in this case we just do and empty row rendering\n            data = allocationReport.allocation.byAssignments.get(origin) || [];\n        }\n        return data;\n    }\n    initAggregatedAllocationEntry(_entryIndex, aggregationContext) {\n        // keep list of resources met when aggregating children\n        if (!aggregationContext.targetArray.$resources) {\n            aggregationContext.targetArray.$resources = new Set();\n        }\n        return {\n            tick            : null,\n            effort          : 0,\n            maxEffort       : 0,\n            units           : 0,\n            isGroup         : true,\n            inEventTimeSpan : false,\n            members         : new Map(),\n            resources       : new Set()\n        };\n    }\n    aggregateAllocationEntry(acc, entry, recordIndex, entryIndex, aggregationContext) {\n        const\n            { targetArray } = aggregationContext,\n            recordArray = aggregationContext.arrays[recordIndex];\n        acc.tick             = entry.tick;\n        acc.isOverallocated  = acc.isOverallocated  || entry.isOverallocated;\n        acc.isUnderallocated = acc.isUnderallocated || entry.isUnderallocated;\n        acc.inEventTimeSpan  = acc.inEventTimeSpan || entry.inEventTimeSpan;\n        // For a group entry we add members property that includes child records regardless of their types\n        if (entry.members) {\n            acc.members = new Map([...acc.members, ...entry.members]);\n        }\n        else {\n            acc.members.set(entry.resource || entry.assignment, entry);\n        }\n        // If that's a group entry that already met resources\n        if (recordArray.$resources) {\n            // inherit the resources\n            targetArray.$resources = new Set([...targetArray.$resources, ...recordArray.$resources]);\n        }\n        // If that's a resource or assignment row entry\n        else if (entry.assignment || entry.resource) {\n            const resource = entry.resource || entry.assignment.resource;\n            // remember we met the resource (we need this to correctly calculate maxEffort on upper levels)\n            targetArray.$resources.add(resource);\n            const resourceEntry = this.getHistogramDataCache(resource).allocation.total[entryIndex];\n            acc.isOverallocated  = acc.isOverallocated || resourceEntry.isOverallocated;\n            acc.isUnderallocated  = acc.isUnderallocated || resourceEntry.isUnderallocated;\n        }\n        return acc;\n    }\n    aggregateHistogramData() {\n        const result = super.aggregateHistogramData(...arguments);\n        // post process aggregated row data to find proper maxEffort\n        for (let i = 0, l = result.length; i < l; i++) {\n            const entry = result[i];\n            entry.maxEffort = 0;\n            for (const resource of result.$resources) {\n                const resourceEntry = this.getHistogramDataCache(resource).allocation.total[i];\n                // get nested resources maxEffort sum\n                entry.maxEffort += resourceEntry.maxEffort;\n            }\n        }\n        return result;\n    }\n    //endregion\n    getResourceBarTip({ datum }) {\n        const\n            me                       = this,\n            { showBarTip, timeAxis } = me;\n        let result = '';\n        if (showBarTip && datum.inEventTimeSpan) {\n            const\n                unit          = me.getBarTipEffortUnit(...arguments),\n                allocated     = me.getEffortText(datum.effort, unit, true),\n                available     = me.getEffortText(datum.maxEffort, unit, true),\n                assignmentTpl = me.L('L{groupBarTipAssignment}');\n            let\n                dateFormat        = 'L',\n                resultFormat      = me.L('L{groupBarTipInRange}'),\n                assignmentsSuffix = '';\n            if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Day) === 0) {\n                resultFormat = me.L('L{groupBarTipOnDate}');\n            }\n            else if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Second) <= 0) {\n                dateFormat = 'HH:mm:ss A';\n            }\n            else if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Hour) <= 0) {\n                dateFormat = 'LT';\n            }\n            let assignmentsArray = [...datum.assignmentIntervals.entries()]\n                .filter(([assignment, data]) => data.effort)\n                .sort(([key1, value1], [key2, value2]) => value1.effort > value2.effort ? -1 : 1);\n            if (assignmentsArray.length > me.groupBarTipAssignmentLimit) {\n                assignmentsSuffix = '<br>' + me.L('L{plusMore}').replace('{value}', assignmentsArray.length - me.groupBarTipAssignmentLimit);\n                assignmentsArray = assignmentsArray.slice(0, this.groupBarTipAssignmentLimit);\n            }\n            const assignments = assignmentsArray.map(([assignment, info]) => {\n                return assignmentTpl.replace('{event}', StringHelper.encodeHtml(assignment.event.name))\n                    .replace('{allocated}', me.getEffortText(info.effort, unit, true))\n                    .replace('{available}', me.getEffortText(info.maxEffort, unit, true))\n                    .replace('{cls}', info.isOverallocated ? 'b-overallocated' : info.isUnderallocated ? 'b-underallocated' : '');\n            }).join('<br>') + assignmentsSuffix;\n            result = resultFormat\n                .replace('{assignments}', assignments)\n                .replace('{startDate}', DateHelper.format(datum.tick.startDate, dateFormat))\n                .replace('{endDate}', DateHelper.format(datum.tick.endDate, dateFormat))\n                .replace('{allocated}', allocated)\n                .replace('{available}', available)\n                .replace('{cls}', datum.isOverallocated ? 'b-overallocated' : datum.isUnderallocated ? 'b-underallocated' : '');\n            result = `<div class=\"b-histogram-bar-tooltip\">${result}</div>`;\n        }\n        return result;\n    }\n    getGroupBarTip({ datum }) {\n        const\n            me                       = this,\n            { showBarTip, timeAxis } = me;\n        let result = '';\n        if (showBarTip && datum.inEventTimeSpan) {\n            const\n                unit          = me.getBarTipEffortUnit(...arguments),\n                allocated     = me.getEffortText(datum.effort, unit),\n                available     = me.getEffortText(datum.maxEffort, unit),\n                assignmentTpl = me.L('L{groupBarTipAssignment}');\n            let\n                dateFormat        = 'L',\n                resultFormat      = me.L('L{groupBarTipInRange}'),\n                assignmentsSuffix = '';\n            if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Day) === 0) {\n                resultFormat = me.L('L{groupBarTipOnDate}');\n            }\n            else if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Second) <= 0) {\n                dateFormat = 'HH:mm:ss A';\n            }\n            else if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Hour) <= 0) {\n                dateFormat = 'LT';\n            }\n            let memberArray = [...datum.members.entries()]\n                .filter(([member, data]) => data.effort)\n                .sort(([key1, value1], [key2, value2]) => value1.effort > value2.effort ? -1 : 1);\n            if (memberArray.length > me.groupBarTipAssignmentLimit) {\n                assignmentsSuffix = '<br>' + me.L('L{plusMore}').replace('{value}', memberArray.length - me.groupBarTipAssignmentLimit);\n                memberArray = memberArray.slice(0, this.groupBarTipAssignmentLimit);\n            }\n            const members = memberArray.map(([member, info]) => {\n                return assignmentTpl\n                    .replace('{resource}', StringHelper.encodeHtml(member.resource?.name || member.name))\n                    .replace('{event}', StringHelper.encodeHtml(member.event?.name || member.name))\n                    .replace('{allocated}', me.getEffortText(info.effort, unit))\n                    .replace('{available}', me.getEffortText(info.maxEffort, unit))\n                    .replace('{cls}', info.isOverallocated ? 'b-overallocated' : info.isUnderallocated ? 'b-underallocated' : '');\n            }).join('<br>') + assignmentsSuffix;\n            result = resultFormat\n                .replace('{assignments}', members)\n                .replace('{startDate}', DateHelper.format(datum.tick.startDate, dateFormat))\n                .replace('{endDate}', DateHelper.format(datum.tick.endDate, dateFormat))\n                .replace('{allocated}', allocated)\n                .replace('{available}', available)\n                .replace('{cls}', datum.isOverallocated ? 'b-overallocated' : datum.isUnderallocated ? 'b-underallocated' : '');\n            result = `<div class=\"b-histogram-bar-tooltip\">${result}</div>`;\n        }\n        return result;\n    }\n    getAssignmentBarTip({ datum }) {\n        const\n            me                       = this,\n            { showBarTip, timeAxis } = me;\n        let result = '';\n        if (showBarTip && datum.inEventTimeSpan) {\n            const\n                unit      = me.getBarTipEffortUnit(...arguments),\n                allocated = me.getEffortText(datum.effort, unit, true),\n                available = me.getEffortText(datum.maxEffort, unit, true);\n            let\n                dateFormat   = 'L',\n                resultFormat = me.L('L{barTipInRange}');\n            if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Day) === 0) {\n                resultFormat = me.L('L{barTipOnDate}');\n            }\n            else if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Second) <= 0) {\n                dateFormat = 'HH:mm:ss A';\n            }\n            else if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Hour) <= 0) {\n                dateFormat = 'LT';\n            }\n            result = resultFormat\n                .replace('{startDate}', DateHelper.format(datum.tick.startDate, dateFormat))\n                .replace('{endDate}', DateHelper.format(datum.tick.endDate, dateFormat))\n                .replace('{allocated}', allocated)\n                .replace('{available}', available)\n                .replace('{cls}', datum.cls || '');\n            if (datum.assignment) {\n                result = result.replace('{event}', StringHelper.encodeHtml(datum.assignment.event.name));\n            }\n            result = `<div class=\"b-histogram-bar-tooltip\">${result}</div>`;\n        }\n        return result;\n    }\n}\nResourceUtilization.initClass();\n// enable tree feature for the utilization panel by default\nResourceUtilization._$name = 'ResourceUtilization'; GridFeatureManager.registerFeature(Tree, true, 'ResourceUtilization');\n", "import HorizontalRendering from '../../../Scheduler/view/orientation/HorizontalRendering.js';\n/**\n * @module SchedulerPro/view/orientation/ProHorizontalRendering\n */\n/**\n * Handles event rendering in Scheduler Pro horizontal mode. Populates render data with buffer duration.\n *\n * @internal\n */\nexport default class ProHorizontalRendering extends HorizontalRendering {\n    static $name = 'ProHorizontalRendering';\n    /**\n     * Populates render data with buffer data rendering.\n     * @param {HorizontalRenderData} renderData\n     * @returns {Boolean}\n     * @private\n     */\n    fillInnerSpanHorizontalPosition(renderData) {\n        const\n            me              = this,\n            { eventRecord } = renderData,\n            {\n                startMS    : innerStartMS,\n                endMS      : innerEndMS,\n                durationMS : innerDurationMS\n            }               = me.calculateMS(eventRecord, 'startDate', 'endDate'),\n            position        = me.calculateHorizontalPosition(renderData, innerStartMS, innerEndMS, innerDurationMS);\n        if (position) {\n            const { left, width } = position;\n            Object.assign(renderData, {\n                innerStartMS,\n                innerEndMS,\n                innerDurationMS,\n                bufferBeforeWidth : Math.max(left - renderData.left, 0),\n                // This could yield a really small number due to floating point accuracy, we can round the result\n                bufferAfterWidth  : Math.max(Math.floor(renderData.left + renderData.width - left - width), 0)\n            });\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    getTimeSpanRenderData(timeSpan, rowRecord, includeOutside = false) {\n        const data = super.getTimeSpanRenderData(timeSpan, rowRecord, includeOutside);\n        if (data?.useEventBuffer) {\n            if (!this.fillInnerSpanHorizontalPosition(data)) {\n                return null;\n            }\n        }\n        return data;\n    }\n}\nProHorizontalRendering._$name = 'ProHorizontalRendering';", "import VerticalRendering from '../../../Scheduler/view/orientation/VerticalRendering.js';\n/**\n * @module SchedulerPro/view/orientation/ProVerticalRendering\n */\n/**\n * Handles event rendering in Scheduler Pro horizontal mode. Populates render data with buffer duration.\n *\n * @internal\n */\nexport default class ProVerticalRendering extends VerticalRendering {\n    static $name = 'ProVerticalRendering';\n    /**\n     * Populates render data with buffer data rendering.\n     * @param {HorizontalRenderData} renderData\n     * @returns {Boolean}\n     * @private\n     */\n    fillInnerSpanVerticalPosition(renderData) {\n        const\n            me                  = this,\n            { scheduler }       = me,\n            { eventRecord }     = renderData,\n            { isBatchUpdating } = eventRecord,\n            startDate           = isBatchUpdating ? eventRecord.get('startDate') : eventRecord.startDate,\n            endDate             = isBatchUpdating ? eventRecord.get('endDate') : eventRecord.endDate,\n            top                 = scheduler.getCoordinateFromDate(startDate),\n            innerStartMS        = startDate.getTime(),\n            innerEndMS          = endDate.getTime(),\n            innerDurationMS     = innerEndMS - innerStartMS;\n        let bottom = scheduler.getCoordinateFromDate(endDate),\n            height = bottom - top;\n        // Below, estimate height\n        if (bottom === -1) {\n            height = Math.round(innerDurationMS * scheduler.timeAxisViewModel.getSingleUnitInPixels('millisecond'));\n            bottom = top + height;\n        }\n        Object.assign(renderData, {\n            innerStartMS,\n            innerEndMS,\n            innerDurationMS,\n            bufferBeforeWidth : top - renderData.top,\n            bufferAfterWidth  : renderData.top + renderData.height - top - height\n        });\n        return true;\n    }\n    getTimeSpanRenderData(timeSpan, rowRecord, includeOutside = false) {\n        const data = super.getTimeSpanRenderData(timeSpan, rowRecord, includeOutside);\n        if (data?.useEventBuffer) {\n            if (!this.fillInnerSpanVerticalPosition(data)) {\n                return null;\n            }\n        }\n        return data;\n    }\n}\nProVerticalRendering._$name = 'ProVerticalRendering';", "import '../localization/En.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport VersionHelper from '../../Core/helper/VersionHelper.js';\nimport SchedulingIssueResolution from './mixin/SchedulingIssueResolution.js';\nimport ProjectProgressMixin from './mixin/ProjectProgressMixin.js';\nimport SchedulerBase from '../../Scheduler/view/SchedulerBase.js';\nimport ProjectModel from '../model/ProjectModel.js';\nimport SchedulerProEventRendering from './mixin/SchedulerProEventRendering.js';\nimport ProHorizontalRendering from './orientation/ProHorizontalRendering.js';\nimport ProVerticalRendering from './orientation/ProVerticalRendering.js';\n/**\n * @module SchedulerPro/view/SchedulerProBase\n */\n/**\n * A thin base class for {@link SchedulerPro/view/SchedulerPro}. Includes fewer features by default, allowing smaller\n * custom-built bundles if used in place of {@link SchedulerPro/view/SchedulerPro}.\n *\n * **NOTE:** In most scenarios you should use SchedulerPro instead of SchedulerProBase.\n *\n * @features SchedulerPro/feature/CalendarHighlight\n * @features SchedulerPro/feature/CellEdit\n * @features SchedulerPro/feature/Dependencies\n * @features SchedulerPro/feature/DependencyEdit\n * @features SchedulerPro/feature/EventBuffer\n * @features SchedulerPro/feature/EventResize\n * @features SchedulerPro/feature/EventSegmentDrag\n * @features SchedulerPro/feature/EventSegmentResize\n * @features SchedulerPro/feature/EventSegments\n * @features SchedulerPro/feature/NestedEvents\n * @features SchedulerPro/feature/PercentBar\n * @features SchedulerPro/feature/ResourceNonWorkingTime\n * @features SchedulerPro/feature/TaskEdit\n * @features SchedulerPro/feature/TimeSpanHighlight\n * @features SchedulerPro/feature/Versions\n *\n * @extends Scheduler/view/SchedulerBase\n * @mixes SchedulerPro/view/mixin/ProjectProgressMixin\n * @mixes SchedulerPro/view/mixin/SchedulerProEventRendering\n * @mixes SchedulerPro/view/mixin/SchedulingIssueResolution\n * @widget\n */\nexport default class SchedulerProBase extends SchedulerBase.mixin(\n    ProjectProgressMixin,\n    SchedulerProEventRendering,\n    SchedulingIssueResolution\n) {\n    //region Config\n    static $name = 'SchedulerProBase';\n    static type = 'schedulerprobase';\n    static configurable =  {\n        projectModelClass : ProjectModel,\n        /**\n         * A task field (id, wbsCode, sequenceNumber etc) that will be used when displaying and editing linked tasks.\n         * @config {String} dependencyIdField\n         * @default 'id'\n         */\n        dependencyIdField : 'id',\n        /**\n         * If set to `true` this will show a color field in the {@link SchedulerPro.feature.TaskEdit} editor and also a\n         * picker in the {@link Scheduler.feature.EventMenu}. Both enables the user to choose a color which will be\n         * applied to the event bar's background. See EventModel's\n         * {@link Scheduler.model.mixin.EventModelMixin#field-eventColor} config.\n         * config.\n         * @config {Boolean}\n         * @category Misc\n         */\n        showTaskColorPickers : false\n    };\n    static isSchedulerPro = true;\n    //endregion\n    //region Store & model docs\n    // Configs\n    /**\n     * A {@link SchedulerPro.model.ProjectModel} instance or a config object. The project holds all SchedulerPro data.\n     * @config {SchedulerPro.model.ProjectModel|ProjectModelConfig} project\n     * @category Data\n     */\n    /**\n     * Inline events, will be loaded into the backing project's EventStore.\n     * @config {SchedulerPro.model.EventModel[]|Object[]} events\n     * @category Data\n     */\n    /**\n     * The {@link SchedulerPro.data.EventStore} holding the events to be rendered into the scheduler.\n     * @config {SchedulerPro.data.EventStore|EventStoreConfig} eventStore\n     * @category Data\n     */\n    /**\n     * Inline resources, will be loaded into the backing project's ResourceStore.\n     * @config {SchedulerPro.model.ResourceModel[]|ResourceModelConfig[]} resources\n     * @category Data\n     */\n    /**\n     * The {@link SchedulerPro.data.ResourceStore} holding the resources to be rendered into the scheduler.\n     * @config {SchedulerPro.data.ResourceStore|ResourceStoreConfig} resourceStore\n     * @category Data\n     */\n    // For some reason Typings won't accept AssignmentModelConfig here. Object will be turned into it though\n    /**\n     * Inline assignments, will be loaded into the backing project's AssignmentStore.\n     * @config {SchedulerPro.model.AssignmentModel[]|SchedulerPro.model.AssignmentModelConfig[]} assignments\n     * @category Data\n     */\n    /**\n     * The optional {@link SchedulerPro.data.AssignmentStore}, holding assignments between resources and events.\n     * Required for multi assignments.\n     * @config {SchedulerPro.data.AssignmentStore|AssignmentStoreConfig} assignmentStore\n     * @category Data\n     */\n    /**\n     * Inline dependencies, will be loaded into the backing project's DependencyStore.\n     * @config {SchedulerPro.model.DependencyModel[]|DependencyModelConfig[]} dependencies\n     * @category Data\n     */\n    /**\n     * The optional {@link SchedulerPro.data.DependencyStore}.\n     * @config {SchedulerPro.data.DependencyStore|DependencyStoreConfig} dependencyStore\n     * @category Data\n     */\n    /**\n     * Inline calendars, will be loaded into the backing project's CalendarManagerStore.\n     * @config {SchedulerPro.model.CalendarModel[]|CalendarModelConfig[]} calendars\n     * @category Data\n     */\n    // Properties\n    /**\n     * Get/set ProjectModel instance, containing the data visualized by the SchedulerPro.\n     * @member {SchedulerPro.model.ProjectModel} project\n     * @typings {ProjectModel}\n     * @category Data\n     */\n    /**\n     * Get/set events, applies to the backing project's EventStore.\n     * @member {SchedulerPro.model.EventModel[]} events\n     * @accepts {SchedulerPro.model.EventModel[]|SchedulerPro.model.EventModelConfig[]}\n     * @category Data\n     */\n    /**\n     * Get/set the event store instance of the backing project.\n     * @member {SchedulerPro.data.EventStore} eventStore\n     * @category Data\n     */\n    /**\n     * Get/set resources, applies to the backing project's ResourceStore.\n     * @member {SchedulerPro.model.ResourceModel[]} resources\n     * @accepts {SchedulerPro.model.ResourceModel[]|SchedulerPro.model.ResourceModelConfig[]}\n     * @category Data\n     */\n    /**\n     * Get/set the resource store instance of the backing project\n     * @member {SchedulerPro.data.ResourceStore} resourceStore\n     * @category Data\n     */\n    // For some reason Typings won't accept AssignmentModelConfig here. Object will be turned into it though\n    /**\n     * Get/set assignments, applies to the backing project's AssignmentStore.\n     * @member {SchedulerPro.model.AssignmentModel[]} assignments\n     * @accepts {SchedulerPro.model.AssignmentModel[]|SchedulerPro.model.AssignmentModelConfig[]}\n     * @category Data\n     */\n    /**\n     * Get/set the event store instance of the backing project.\n     * @member {SchedulerPro.data.AssignmentStore} assignmentStore\n     * @category Data\n     */\n    /**\n     * Get/set dependencies, applies to the backing projects DependencyStore.\n     * @member {SchedulerPro.model.DependencyModel[]} dependencies\n     * @accepts {SchedulerPro.model.DependencyModel[]|DependencyModelConfig[]}\n     * @category Data\n     */\n    /**\n     * Get/set the dependencies store instance of the backing project.\n     * @member {SchedulerPro.data.DependencyStore} dependencyStore\n     * @category Data\n     */\n    /**\n     * Get/set calendars, applies to the backing projects CalendarManagerStore.\n     * @member {SchedulerPro.model.CalendarModel[]} calendars\n     * @accepts {SchedulerPro.model.CalendarModel[]|CalendarModelConfig[]}\n     * @category Data\n     */\n    //endregion\n    //region Overrides\n    onPaintOverride() {\n        // Internal procedure used for paint method overrides\n        // Not used in onInternalPaint() because it may be chained on instance and Override won't be applied\n    }\n    //endregion\n    //region Inline data\n    // Pro specific extension of SchedulerStores\n    set calendars(calendars) {\n        this.project.calendars = calendars;\n    }\n    get calendars() {\n        return this.project.calendars;\n    }\n    //endregion\n    //region Mode\n    /**\n     * Get mode (horizontal/vertical)\n     * @property {'horizontal'|'vertical'}\n     * @readonly\n     * @category Common\n     */\n    get mode() {\n        return this._mode;\n    }\n    set mode(mode) {\n        const me = this;\n        me._mode = mode;\n        if (!me[mode]) {\n            me.element.classList.add(`b-sch-${mode}`);\n            if (mode === 'horizontal') {\n                me.horizontal = new ProHorizontalRendering(me);\n                if (me.isPainted) {\n                    me.horizontal.init();\n                }\n            }\n            else if (mode === 'vertical') {\n                me.vertical = new ProVerticalRendering(me);\n                if (me.rendered) {\n                    me.vertical.init();\n                }\n            }\n        }\n    }\n    //endregion\n    //region Internal\n    // Overrides grid to take project loading into account\n    toggleEmptyText() {\n        const\n            me = this;\n        if (me.bodyContainer && me.rowManager) {\n            DomHelper.toggleClasses(me.bodyContainer, 'b-grid-empty', !(me.rowManager.rowCount || me.project.isLoadingOrSyncing));\n        }\n    }\n    // Needed to work with Gantt features\n    get taskStore() {\n        return this.project.eventStore;\n    }\n    //endregion\n    createEvent(startDate, resourceRecord, row) {\n        // For resources with a calendar, ensure the date is inside a working time range\n        if (!resourceRecord.isWorkingTime(startDate)) {\n            return;\n        }\n        // If task editor is active dblclick will trigger number of async actions:\n        // store add which would schedule project commit\n        // editor cancel on next animation frame\n        // editor hide\n        // rejecting previous transaction\n        // and there is also dependency feature listening to transitionend on scheduler to draw lines after\n        // It can happen that user dblclicks too fast, then event will be added, then dependency will schedule itself\n        // to render, and then event will be removed as part of transaction rejection from editor. So we cannot add\n        // event before active transaction is done.\n        if (this.taskEdit && this.taskEdit.isEditing) {\n            this.ion({\n                aftertaskedit : () => super.createEvent(startDate, resourceRecord, row),\n                once          : true\n            });\n        }\n        else {\n            return super.createEvent(startDate, resourceRecord, row);\n        }\n    }\n}\nSchedulerProBase.initClass();\nVersionHelper.setVersion('schedulerpro', '5.6.2');\nSchedulerProBase._$name = 'SchedulerProBase';", "import SchedulerProBase from './SchedulerProBase.js';\n// Since SchedulerPro is based on thin XXBase classes, default features needs to be pulled in here\nimport '../../Scheduler/feature/ColumnLines.js';\nimport '../../Scheduler/feature/EventCopyPaste.js';\nimport '../../Scheduler/feature/EventDrag.js';\nimport '../../Scheduler/feature/EventDragCreate.js';\nimport '../../Scheduler/feature/EventFilter.js';\nimport '../../Scheduler/feature/EventMenu.js';\nimport '../../Scheduler/feature/EventTooltip.js';\nimport '../../Scheduler/feature/NonWorkingTime.js';\nimport '../../Scheduler/feature/ScheduleMenu.js';\nimport '../../Scheduler/feature/ScheduleTooltip.js';\nimport '../../Scheduler/feature/StickyEvents.js';\nimport '../../Scheduler/feature/TimeAxisHeaderMenu.js';\nimport '../../Grid/feature/CellEdit.js';\nimport '../../Grid/feature/CellMenu.js';\nimport '../../Grid/feature/ColumnDragToolbar.js';\nimport '../../Grid/feature/ColumnPicker.js';\nimport '../../Grid/feature/ColumnReorder.js';\nimport '../../Grid/feature/ColumnResize.js';\nimport '../../Grid/feature/Filter.js';\nimport '../../Grid/feature/FilterBar.js';\nimport '../../Grid/feature/Group.js';\nimport '../../Grid/feature/HeaderMenu.js';\nimport '../../Grid/feature/Sort.js';\nimport '../../Grid/feature/Stripe.js';\n// For checkbox selection mode\nimport '../../Grid/column/CheckColumn.js';\nimport '../feature/CellEdit.js';\nimport '../feature/Dependencies.js';\nimport '../feature/DependencyEdit.js';\nimport '../feature/EventResize.js';\nimport '../feature/TaskEdit.js';\nimport '../feature/EventSegmentDrag.js';\nimport '../feature/EventSegmentResize.js';\nimport '../feature/EventSegments.js';\n/**\n * @module SchedulerPro/view/SchedulerPro\n */\n/**\n * ## Intro\n *\n * The Scheduler Pro is an extension of the [Bryntum Scheduler](#Scheduler/view/Scheduler), and combines the visualisation capabilities\n * of the Scheduler with the powerful scheduling engine from the Gantt. This means it can manage {@link SchedulerPro/model/ProjectModel project} data composed by\n * tasks, dependencies, resources, assignments and calendars (for working / non-working time). If you have inter-task dependencies,\n * task updates will be propagated to any successors after a task is moved. The engine will reschedule tasks\n * according to the constraints, dependencies and calendars defined in the project. To familiarize yourself with the various APIs and data structures\n * of the Scheduler Pro, we recommend starting with these resources:\n *\n * * [Project data model guide](#SchedulerPro/guides/basics/project_data.md)\n * * [Bryntum Scheduler API docs](#Scheduler/view/Scheduler)\n * * [Bryntum Grid API docs](#Grid/view/Grid)\n * * [Localization](#SchedulerPro/guides/customization/localization.md)\n *\n * ## Basic setup\n *\n * To create an instance of this class, simply configure it with:\n *\n * * The {@link Grid/column/Column columns} you want\n * * The {@link Grid/view/Grid#config-features} you want, quite a lot to choose from, and you can build your own too\n * * A {@link SchedulerPro/model/ProjectModel Project} instance:\n * * A {@link Scheduler/preset/ViewPreset viewPreset} identifier, specifying the granularity of the time axis.\n *\n * ```javascript\n * const scheduler = new SchedulerPro({\n *    // A Project holds the data and the calculation engine for Scheduler Pro. It also acts as a CrudManager, allowing\n *    // loading data into all stores at once\n *    project : {\n *        autoLoad  : true,\n *        transport : {\n *            load : {\n *                url : './data/data.json'\n *            }\n *       }\n *    },\n *\n *    adopt             : 'container',\n *    startDate         : '2020-05-01',\n *    endDate           : '2020-09-30',\n *    resourceImagePath : '../shared/images/users/',\n *    viewPreset        : 'dayAndWeek'\n *    features : {\n *       columnLines  : false,\n *       dependencies : true\n *   },\n *\n *   columns : [\n *       {\n *           type           : 'resourceInfo',\n *           text           : 'Worker',\n *           showEventCount : true\n *       }\n *   ]\n * });\n * ```\n *\n * {@inlineexample SchedulerPro/view/SchedulerPro.js}\n *\n * ## Inheriting from Bryntum Grid\n * Bryntum Scheduler Pro inherits from Bryntum Grid, meaning that most features available in the grid are also available\n * for the scheduler. Common features include columns, cell editing, context menus, row grouping, sorting and more.\n * Note: If you want to use the Grid component standalone, e.g. to use drag-from-grid functionality, you need a separate\n * license for the Grid component.\n *\n * ## Customisation\n *\n * You can style any aspect of the Scheduler using plain CSS or modify our themes using our built-in SASS variables.\n * Using the {@link Scheduler/view/mixin/SchedulerEventRendering#config-eventRenderer} you can customize the HTML output for\n * each event bar. The Scheduler comes with a few different {@link #config-eventStyle event styles} which you can\n * define globally on the Scheduler, in the resource data, or on individual events.\n *\n * {@inlineexample SchedulerPro/view/EventStyles.js}\n *\n * For more information about styling, please refer to the [styling guide](#SchedulerPro/guides/customization/styling.md).\n *\n * ## Partnering with other timeline widgets\n *\n * You can also pair the Scheduler Pro with other timeline based widgets such as the {@link SchedulerPro/view/ResourceHistogram histogram widget}\n * to view resource allocation levels, using the {@link #config-partner} config.\n *\n * {@inlineexample SchedulerPro/view/ResourceHistogram.js}\n *\n * ### Differences between Scheduler and Scheduler Pro\n * Scheduler Pro extends Scheduler and schedules tasks based on the Project, Resource and Event calendars, while also taking into account\n * dependencies and constraints. Scheduler Pro also comes with more demos showing off advanced use cases. Below is a list\n * of technical differences between the two versions:\n *\n * - Scheduler uses an EventStore, ResourceStore (optionally an AssignmentStore and a DependencyStore), whereas Scheduler Pro always\n * uses an AssignmentStore to manage event assignments.\n * - Scheduler Pro uses the same data model as the Gantt and can visualise a Project side by side with the Gantt.\n * - Scheduler supports showing dependencies but they are just visual elements, they do not impact scheduling. In Scheduler Pro,\n * adding a dependency between two tasks will affect the scheduling of the successor task.\n * - Scheduler Pro supports visualising a task completion progress bar.\n * - Scheduler Pro includes a Timeline widget and a Resource Histogram widget.\n *\n * @extends SchedulerPro/view/SchedulerProBase\n * @classtype schedulerpro\n * @widget\n */\nexport default class SchedulerPro extends SchedulerProBase {\n    //region Config\n    static get $name() {\n        return 'SchedulerPro';\n    }\n    static get type() {\n        return 'schedulerpro';\n    }\n    //endregion\n}\nSchedulerPro.initClass();\nSchedulerPro._$name = 'SchedulerPro';", "import ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport SchedulerBase from '../../Scheduler/view/SchedulerBase.js';\nimport '../../Scheduler/feature/TimeRanges.js';\nimport Store from '../../Core/data/Store.js';\nimport { SchedulerProProjectMixin } from '../../Engine/quark/model/scheduler_pro/SchedulerProProjectMixin.js';\n/**\n * @module SchedulerPro/widget/Timeline\n */\n/**\n * A visual component showing an overview timeline of events having the {@link SchedulerPro.model.EventModel#field-showInTimeline showInTimeline}\n * field set to true. The timeline component subclasses the {@link Scheduler.view.Scheduler Scheduler} and to use it,\n * simply provide it with a {@link SchedulerPro.model.ProjectModel}:\n *\n * ```javascript\n * const timeline = new Timeline({\n *     appendTo  : 'container',\n *     project   : project\n * });\n * ```\n *\n * {@inlineexample SchedulerPro/widget/Timeline.js}\n *\n * @extends Scheduler/view/Scheduler\n * @classtype timeline\n * @widget\n */\nexport default class Timeline extends SchedulerBase {\n    static get $name() {\n        return 'Timeline';\n    }\n    // Factoryable type name\n    static get type() {\n        return 'timeline';\n    }\n    static get configurable() {\n        return {\n            /**\n             * Project config object or a Project instance\n             *\n             * @config {SchedulerPro.model.ProjectModel|ProjectModelConfig} project\n             */\n            /**\n             * @hideconfigs timeZone\n             */\n            height      : '13em',\n            eventLayout : 'pack',\n            barMargin   : 1,\n            // We need timeline width to be exact, because with `overflow: visible` content will look awful.\n            // Flow is like this:\n            // 1. zoomToFit is trying to set timespan to eventStore total time span. Assume start in on tuesday and end is on friday\n            // 2. zooming mixin is calculating tick width, which is e.g. 37px to fit all the ticks to the available space\n            // 3. timeAxis is configured with this new time span. By default it adjusts start and end to monday.\n            // 4. since timespan was increased, it now overflows with original tick size of 37. It requires smth smaller, like 34.\n            // 5. timeAxisViewModel is calculating fitting size. Which is correct value of 34, but value is ignored unless `forceFit` is true\n            // But apparently forceFit + zoomToSpan IS NOT SUPPORTED. So alternative approach is to disable autoAdjust\n            // on time axis to prevent increased size in #3. But then time axis start/end won't be even date, it could be\n            // smth random like `Thu Feb 07 2019 22:13:20`.\n            //\n            // On the other hand, without force-fit content might overflow and timeline is styled to show overflowing content.\n            // And that would require more additional configs\n            forceFit : true,\n            timeAxis : { autoAdjust : false },\n            readOnly                  : true,\n            zoomOnMouseWheel          : false,\n            zoomOnTimeAxisDoubleClick : false,\n            // eventColor                : null,\n            // eventStyle                : null,\n            rowHeight                 : 48,\n            displayDateFormat         : 'L',\n            // A fake resource\n            resources : [\n                {\n                    id : 1\n                }\n            ],\n            columns : []\n        };\n    }\n    static get delayable() {\n        return {\n            fillFromTaskStore : 100\n        };\n    }\n    construct(config = {}) {\n        const me = this;\n        me.startDateLabel           = document.createElement('label');\n        me.startDateLabel.className = 'b-timeline-startdate';\n        me.endDateLabel             = document.createElement('label');\n        me.endDateLabel.className   = 'b-timeline-enddate';\n        let initialCommitPerformed = true;\n        if ('project' in config) {\n            if (!config.project) {\n                throw new Error('You need to configure the Timeline with a Project');\n            }\n            // In case instance of project is provided, just take store right away and delete config, falling back to\n            // default\n            else if (config.project instanceof SchedulerProProjectMixin) {\n                me.taskStore = config.project.eventStore;\n                if (!config.project.isInitialCommitPerformed) {\n                    initialCommitPerformed = false;\n                    // For schedulerpro it is important to listen to first project commit\n                    config.project.ion({\n                        name : 'initialCommit',\n                        refresh({ isInitialCommit }) {\n                            if (isInitialCommit) {\n                                me.fillFromTaskStore();\n                                me.detachListeners('initialCommit');\n                            }\n                        },\n                        thisObj : me\n                    });\n                }\n                delete config.project;\n            }\n        }\n        // Despite the fact Timeline extends SchedulerBase, we still need to disable all these features.\n        // Because in case timeline gets into the same scope as scheduler or gantt, some features might be enabled\n        // by default. SchedulerBase jut means that we don't import anything extra. But other components might.\n        config.features = ObjectHelper.assign({\n            cellEdit            : false,\n            cellMenu            : false,\n            columnAutoWidth     : false,\n            columnLines         : false,\n            columnPicker        : false,\n            columnReorder       : false,\n            columnResize        : false,\n            contextMenu         : false,\n            eventContextMenu    : false,\n            eventDrag           : false,\n            eventDragCreate     : false,\n            eventEdit           : false,\n            eventFilter         : false,\n            eventMenu           : false,\n            eventResize         : false,\n            eventTooltip        : false,\n            group               : false,\n            headerMenu          : false,\n            regionResize        : false,\n            scheduleContextMenu : false,\n            scheduleMenu        : false,\n            scheduleTooltip     : false,\n            sort                : false,\n            timeAxisHeaderMenu  : false,\n            timeRanges          : false\n        }, config.features);\n        super.construct(config);\n        if (me.features.timeRanges) {\n            // We don't want to show timeRanges relating to Project\n            me.features.timeRanges.store = new Store();\n        }\n        // If original project is not committed by this time, we should not try to fill timeline from the task store,\n        // because project listener will do it itself. And also to not do extra suspendRefresh which would break project\n        // refresh event listener behavior.\n        // https://github.com/bryntum/support/issues/2665\n        initialCommitPerformed && me.fillFromTaskStore.now();\n        me.taskStore.ion({\n            refreshPreCommit : me.fillFromTaskStore,\n            changePreCommit  : me.onTaskStoreChange,\n            thisObj          : me\n        });\n        me.ion({\n            resize  : me.onSizeChanged,\n            thisObj : me\n        });\n        me.bodyContainer.appendChild(me.startDateLabel);\n        me.bodyContainer.appendChild(me.endDateLabel);\n    }\n    onSizeChanged({ width, oldWidth }) {\n        const\n            me    = this,\n            reFit = width !== oldWidth;\n        // Save a refresh, will come from fit. Don't suspend if we won't re-fit, we need the refresh for events\n        // to not disappear (since updating row height clears cache)\n        reFit && me.suspendRefresh();\n        me.syncRowHeight();\n        if (reFit) {\n            me.resumeRefresh(false);\n            me.fitTimeline();\n        }\n    }\n    syncRowHeight() {\n        if (this.bodyContainer.isConnected) {\n            this.rowHeight = this.bodyContainer.offsetHeight;\n        }\n    }\n    fitTimeline() {\n        if (this.eventStore.count > 0) {\n            this.forceFit = false;\n            this.zoomToFit(\n                {\n                    leftMargin  : 50,\n                    rightMargin : 50\n                }\n            );\n            this.forceFit = true;\n        }\n        this.updateStartEndLabels();\n    }\n    updateStartEndLabels() {\n        const me                    = this;\n        me.startDateLabel.innerHTML = me.getFormattedDate(me.startDate);\n        me.endDateLabel.innerHTML   = me.getFormattedDate(me.endDate);\n    }\n    async onTaskStoreChange({ action, record, records, changes, isCollapse }) {\n        const\n            me         = this,\n            eventStore = me.eventStore;\n        let needsFit;\n        switch (action) {\n            case 'add':\n                records.forEach(task => {\n                    if (task.showInTimeline) {\n                        eventStore.add(me.cloneTask(task));\n                        needsFit = true;\n                    }\n                });\n                break;\n            case 'remove':\n                if (!isCollapse) {\n                    records.forEach(task => {\n                        if (task.showInTimeline) {\n                            eventStore.remove(task.id);\n                            needsFit = true;\n                        }\n                    });\n                }\n                break;\n            case 'removeall':\n                me.fillFromTaskStore.now();\n                break;\n            case 'update': {\n                const task = record;\n                if (changes.showInTimeline) {\n                    // Add or remove from our eventStore\n                    if (task.showInTimeline) {\n                        eventStore.add(me.cloneTask(task));\n                    }\n                    else {\n                        const timelineEvent = eventStore.getById(task.id);\n                        if (timelineEvent) {\n                            eventStore.remove(timelineEvent);\n                        }\n                    }\n                    needsFit = true;\n                }\n                else if (task.showInTimeline) {\n                    // Just sync with existing clone\n                    const clone = eventStore.getById(task.id);\n                    if (clone) {\n                        // Fields might have been remapped\n                        clone.set(me.cloneTask(task));\n                        needsFit = true;\n                    }\n                }\n                break;\n            }\n        }\n        if (needsFit) {\n            me.fitTimeline();\n        }\n    }\n    cloneTask(task) {\n        return {\n            id         : task.id,\n            resourceId : 1,\n            name       : task.name,\n            startDate  : task.startDate,\n            endDate    : task.endDate,\n            cls        : task.cls\n        };\n    }\n    render() {\n        super.render(...arguments);\n        this.syncRowHeight();\n    }\n    async fillFromTaskStore() {\n        const\n            me            = this,\n            timelineTasks = [];\n        me.taskStore.traverse(task => {\n            if (task.showInTimeline && task.isScheduled) {\n                timelineTasks.push(me.cloneTask(task));\n            }\n        });\n        me.events = timelineTasks;\n        await me.project.commitAsync();\n        if (me.isDestroyed) {\n            return;\n        }\n        me.fitTimeline();\n    }\n    onLocaleChange() {\n        this.updateStartEndLabels();\n        super.onLocaleChange();\n    }\n};\n// Register this widget type with its Factory\nTimeline.initClass();\nTimeline._$name = 'Timeline';", "import StringHelper from '../../Core/helper/StringHelper.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport GridRowModel from '../../Grid/data/GridRowModel.js';\nimport TreeGrid from '../../Grid/view/TreeGrid.js';\nimport ArrayHelper from '../../Core/helper/ArrayHelper.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\n/**\n * @module SchedulerPro/widget/VersionGrid\n */\nconst\n    EMPTY_ARRAY = [],\n    actionTypeOrder = { remove : 1, add : 2, update : 3 },\n    entityTypeOrder = { TaskModel : 1, DependencyModel : 2, AssignmentModel : 3, ProjectModel : 4 },\n    // For moves, describe the former and current locations\n    describePosition = ({ parent, index }) => `${parent.name}[${index}]`,\n    knownEntityTypes = {\n        AssignmentModel : 'Assignment',\n        DependencyModel : 'Dependency'\n    };\nclass VersionGridRow extends GridRowModel {\n    static fields = [\n        {\n            name : 'description',\n            type : 'string'\n        }, {\n            name : 'occurredAt',\n            type : 'date'\n        }, {\n            name : 'versionModel'\n        }, {\n            name : 'transactionModel'\n        }, {\n            name : 'propertyUpdate'\n        }, {\n            name : 'action'\n        }\n    ];\n}\n/**\n * Displays a list of versions and the transactions they contain. For use with the {@link SchedulerPro.feature.Versions}\n * feature.\n *\n * Configure the VersionGrid with a {@link SchedulerPro.model.ProjectModel} using the {@link #config-project} config.\n *\n * @extends Grid/view/TreeGrid\n * @classtype versiongrid\n * @widget\n */\nexport default class VersionGrid extends TreeGrid {\n    static $name = 'VersionGrid';\n    static type = 'versiongrid';\n    static configurable = {\n        store : {\n            tree       : true,\n            modelClass : VersionGridRow,\n            sorters    : [\n                {\n                    field     : 'occurredAt',\n                    ascending : false\n                },\n                VersionGrid.sortActionRows\n            ],\n            reapplySortersOnAdd : true\n        },\n        /**\n         * The {@link SchedulerPro.model.ProjectModel} whose versions and changes are being observed in this grid.\n         * @config {SchedulerPro.model.ProjectModel}\n         */\n        project : null,\n        /**\n         * Whether to display transactions not yet associated with a version.\n         * @prp {Boolean}\n         */\n        showUnattachedTransactions : true,\n        /**\n         * Whether to show only versions that have been assigned a specific name.\n         * @prp {Boolean}\n         */\n        showNamedVersionsOnly : false,\n        /**\n         * Whether to include version rows in the display.\n         * @prp {Boolean}\n         */\n        showVersions : true,\n        /**\n         * The id of the version currently being compared, if any.\n         * @prp {Boolean}\n         */\n        comparingVersionId : null,\n        flex : 0,\n        features : {\n            group : {\n                field : 'id'\n            },\n            cellEdit : {\n                continueEditingOnCellClick : false,\n                editNextOnEnterPress       : false\n            },\n            cellMenu : {\n                items : {\n                    removeRow    : false,\n                    cut          : false,\n                    copy         : false,\n                    paste        : false,\n                    renameButton : {\n                        text   : 'L{VersionGrid.rename}',\n                        icon   : 'b-icon b-icon-edit',\n                        onItem : ({ record, source : grid }) => {\n                            grid.startEditing({\n                                id     : record.id,\n                                column : grid.columns.get('description')\n                            });\n                        }\n                    },\n                    restoreButton : {\n                        text   : 'L{VersionGrid.restore}',\n                        icon   : 'b-icon b-icon-undo',\n                        onItem : ({ record, source : grid }) => {\n                            grid.triggerRestore(record.versionModel);\n                        }\n                    },\n                    compareButton : {\n                        text   : 'L{VersionGrid.compare}',\n                        icon   : 'b-icon b-icon-compare',\n                        onItem : ({ record, source : grid }) => {\n                            grid.triggerCompare(record.versionModel);\n                        }\n                    },\n                    stopComparingButton : {\n                        text   : 'L{VersionGrid.stopComparing}',\n                        onItem : ({ record, source : grid }) => {\n                            grid.triggerStopCompare();\n                        }\n                    }\n                }\n            },\n            rowCopyPaste : false\n        },\n        columns : [\n            { type : 'tree', text : 'L{VersionGrid.description}', field : 'description', flex : 4, groupable : false, renderer : ({ grid, ...rest }) => grid.renderDescription({ grid, ...rest }), autoHeight : true },\n            { text : 'L{VersionGrid.occurredAt}', field : 'occurredAt', type : 'date', flex : 1, groupable : false }\n        ],\n        /**\n         * The date format used for displaying date values in change actions.\n         * @config {String}\n         */\n        dateFormat : 'M/D/YY h:mm a',\n        internalListeners : {\n            beforeCellEditStart({ editorContext : { column, record } }) {\n                // Only version descriptions are editable\n                if (!(column.field === 'description' && record.versionModel)) {\n                    return false;\n                }\n            },\n            finishCellEdit({ editorContext : { record, value } }) {\n                record.versionModel.name = (value != null && value.trim()) ? value : null;\n            },\n            cellMenuBeforeShow({ source, record, items }) {\n                items.stopComparingButton.disabled = !source.comparingVersionId;\n                return Boolean(record.versionModel);\n            },\n            toggleNode({ record, collapse }) {\n                this._expandedById.set(record.id, !collapse);\n            }\n        }\n    };\n    static delayable = {\n        processUpdates : {\n            type              : 'raf',\n            cancelOutstanding : true\n        }\n    };\n    // Bookkeeping fields\n    static get properties() {\n        return {\n            _rowsByUnderlyingRecord : new WeakMap(),\n            _expandedById           : new Map()\n        };\n    };\n    _transactionChanges = [];\n    _versionChanges = [];\n    comparingRowCls = `b-${VersionGrid.type}-comparing`;\n    construct(config) {\n        super.construct({\n            ...config,\n            features : ObjectHelper.merge({}, VersionGrid.configurable.features, config.features)\n        });\n    }\n    afterConstruct() {\n        if (!this.project) {\n            throw new Error(`${VersionGrid.$name} requires the project config.`);\n        }\n        this.refreshGrid();\n    }\n    updateDateFormat(newDateFormat) {\n        const occurredAtColumn = this.columns.get('occurredAt');\n        if (occurredAtColumn) {\n            occurredAtColumn.format = newDateFormat;\n        }\n    }\n    updateProject(newProject) {\n        const me = this;\n        me.detachListeners('storeChange');\n        me._versionStore = newProject.getCrudStore('versions');\n        me._transactionStore = newProject.getCrudStore('changelogs');\n        me._versionStore.ion({\n            name    : 'storeChange',\n            change  : me.onVersionStoreChange,\n            thisObj : me\n        });\n        me._transactionStore.ion({\n            name    : 'storeChange',\n            change  : me.onTransactionStoreChange,\n            thisObj : me\n        });\n    }\n    updateShowNamedVersionsOnly() {\n        if (this.isPainted) {\n            this.refreshGrid();\n        }\n    }\n    updateShowUnattachedTransactions() {\n        if (this.isPainted) {\n            this.refreshGrid();\n        }\n    }\n    updateShowVersions() {\n        if (this.isPainted) {\n            this.refreshGrid();\n        }\n    }\n    updateComparingVersionId(newVersionId, oldVersionId) {\n        const [oldHighlightedRow, newHighlightedRow] = [oldVersionId, newVersionId].map(versionId =>\n            this.store.getById(`v-${versionId}`));\n        if (oldHighlightedRow) {\n            oldHighlightedRow.cls = '';\n            oldHighlightedRow.iconCls = 'b-icon b-icon-version';\n        }\n        if (newHighlightedRow) {\n            newHighlightedRow.cls = this.comparingRowCls;\n            newHighlightedRow.iconCls = 'b-icon b-icon-compare';\n        }\n    }\n    onVersionStoreChange({ action, records }) {\n        this._versionChanges.push({ action, records });\n        this.processUpdates();\n    }\n    onTransactionStoreChange({ action, records }) {\n        this._transactionChanges.push({ action, records });\n        this.processUpdates();\n    }\n    /**\n     * This is an optimization to more efficiently replace grid rows when the underlying stores change.\n     * We wait a tick, then replace the set of rows corresponding to the modified records with the new\n     * projected rowset.\n     *\n     * The code below does not handle record remove, or updating transactions without their version in the\n     * same tick. (Versions can be updated without their transactions, as when renamed.)\n     * @private\n     */\n    processUpdates() {\n        const\n            me = this,\n            versions = ArrayHelper.unique(me._versionChanges.flatMap(({ records }) => records)),\n            versionIds = new Set(versions.map(version => String(version.id))),\n            transactions = ArrayHelper.unique(\n                me._transactionChanges.flatMap(({ records }) => records)\n                    // Expand to all transactions for incoming versions\n                    .concat(versions.length === 0 ? []\n                        : me._transactionStore.query(txn => versionIds.has(txn.versionId))));\n        // Expand to all versions for incoming transaction\n        for (const transaction of transactions) {\n            if (transaction.versionId && !versionIds.has(transaction.versionId)) {\n                versions.push(me._versionStore.getById(transaction.versionId));\n                versionIds.add(transaction.versionId);\n            }\n        }\n        me.replaceRows(ArrayHelper.unique(versions), transactions);\n        me._transactionChanges = [];\n        me._versionChanges = [];\n    }\n    replaceRows(versions, transactions) {\n        const\n            me = this,\n            { showNamedVersionsOnly, showUnattachedTransactions, store } = me,\n            rowsToReplaceSet = new Set(),\n            transactionsByVersionId = ArrayHelper.groupBy(transactions, 'versionId'),\n            allRecords = transactions.concat(versions),\n            versionsToShow = showNamedVersionsOnly\n                ? versions.filter(version => version.name != null)\n                : versions;\n        for (const record of allRecords) {\n            for (const row of me._rowsByUnderlyingRecord.get(record) ?? EMPTY_ARRAY) {\n                rowsToReplaceSet.add(row);\n            }\n        }\n        me.suspendRefresh();\n        store.remove(Array.from(rowsToReplaceSet));\n        for (const version of versionsToShow) {\n            const newRows = store.add(me.getGridRows(version, transactionsByVersionId[version.id]));\n            me._rowsByUnderlyingRecord.set(version, newRows);\n        }\n        if (showUnattachedTransactions) {\n            for (const transaction of transactions.filter(txn => txn.versionId == null)) {\n                const newRows = store.add(me.getGridRows(null, [transaction]));\n                me._rowsByUnderlyingRecord.set(transaction, newRows);\n            }\n        }\n        me.resumeRefresh(false);\n        store.sort(store.sorters);\n    }\n    /**\n     * Does a full replace of all rows in the grid using all records currently in the two stores.\n     * @private\n     */\n    refreshGrid() {\n        this.replaceRows(this._versionStore.records, this._transactionStore.records);\n    }\n    /**\n     * Transform a set of transactions (and optional parent version) into tree structure needed by grid\n     * @private\n     */\n    getGridRows(version, transactions) {\n        const\n            me = this,\n            { showVersions, comparingVersionId } = me,\n            transactionRows = transactions?.map(transaction => {\n                const id = `t-${transaction.id}`;\n                return {\n                    id,\n                    expanded         : Boolean(me._expandedById?.get(id)),\n                    description      : transaction.description,\n                    occurredAt       : transaction.occurredAt,\n                    transactionModel : transaction,\n                    rootVersionModel : version,\n                    children         : transaction.actions.map((action, index) => {\n                        const id = `a-${transaction.id}-${index}`;\n                        return {\n                            id,\n                            expanded         : Boolean(me._expandedById?.get(id)),\n                            action,\n                            rootVersionModel : version,\n                            children         : action.propertyUpdates?.map(propertyUpdate => ({\n                                rootVersionModel : version,\n                                propertyUpdate\n                            })) ?? []\n                        };\n                    })\n                };\n            }) || [],\n            id = `v-${version?.id}`;\n        return version && showVersions ? {\n            id,\n            expanded     : Boolean(me._expandedById.get(id)),\n            description  : version.description,\n            occurredAt   : version.savedAt,\n            children     : transactionRows,\n            versionModel : version,\n            iconCls      : 'b-icon-version',\n            cls          : version.id === comparingVersionId ? me.comparingRowCls : null\n        } : transactionRows;\n    }\n    renderDescription(event) {\n        const { record } = event;\n        if (record.propertyUpdate) {\n            return this.renderPropertyUpdate(record.propertyUpdate);\n        }\n        else if (record.action) {\n            return this.renderActionDescription(record.action);\n        }\n        return record.description;\n    }\n    renderPropertyUpdate(propertyUpdate) {\n        const\n            clsPrefix = VersionGrid.type,\n            { property, before, after } = propertyUpdate;\n        return {\n            children : [{\n                tag      : 'div',\n                class    : `b-${clsPrefix}-property-update-desc`,\n                children : [\n                    {\n                        tag   : 'span',\n                        class : `b-${clsPrefix}-property-name`,\n                        html  : `${this.formatPropertyName(property)}`\n                    },\n                    this.renderPropertyValue(before, 'before'),\n                    {\n                        tag   : 'i',\n                        class : 'b-icon b-icon-right'\n                    },\n                    this.renderPropertyValue(after, 'after')\n                ]\n            }]\n        };\n    }\n    /**\n     * Return DomConfig for an individual data value.\n     * @param {*} value\n     * @param {'before'|'after'} side\n     * @returns {DomConfig}\n     * @private\n     */\n    renderPropertyValue(value, side) {\n        return {\n            tag   : 'span',\n            class : [\n                `b-${VersionGrid.type}-property-${side}`,\n                value == null && `b-${VersionGrid.type}-empty-value`\n            ],\n            html : value == null ? this.L('L{Versions.nullValue}') : this.formatValueString(value) ?? ``\n        };\n    }\n    /**\n     * Convert an individual data value to a string.\n     * @param {*} value The raw data value\n     * @returns {String} A string representing the value, for display\n     * @private\n     */\n    formatValueString(value) {\n        if (DateHelper.isDate(value)) {\n            return DateHelper.format(value, this.dateFormat);\n        }\n        else if (typeof (value) === 'number') {\n            return value.toFixed(2);\n        }\n        return value;\n    }\n    /**\n     * Format a property name in the change log to a displayable string. By default,\n     * converts e.g. \"camelCase\" to \"Camel case\".\n     * @param {String} propertyName The raw field name\n     * @returns {String} A string formatted for display\n     * @private\n     */\n    formatPropertyName(propertyName) {\n        return StringHelper.separate(propertyName);\n    }\n    getAssignmentTextTokens(assignmentChange) {\n        return {\n            event    : assignmentChange.event.name,\n            resource : assignmentChange.resource.name\n        };\n    }\n    getDependencyTextTokens(dependencyChange) {\n        return {\n            from : dependencyChange.fromTask.name,\n            to   : dependencyChange.toTask.name\n        };\n    }\n    /**\n     * Produces a text description to show in the description column for an 'action' row.\n     * @param {SchedulerPro.model.changelog.ChangeLogAction} action The action to describe\n     * @returns DomConfig of description text with highlightable entity names\n     * @private\n     */\n    renderActionDescription(action) {\n        const\n            me = this,\n            { actionType, entity } = action,\n            entityNames = me.L(`L{Versions.entityNames}`);\n        let description,\n            tokens = {\n                type : entityNames[entity.type],\n                name : entity.name\n            };\n        if (actionType === 'move') {\n            tokens.from = describePosition(action.from);\n            tokens.to = describePosition(action.to);\n        }\n        // Concatenate action and entity type to get description pattern from localizations\n        // e.g. 'L{Versions.addDependency}' | 'L{Versions.updateEntity}'\n        description = me.L(`L{Versions.${actionType}${knownEntityTypes[entity.type] ?? 'Entity'}}`);\n        if (entity.type === 'DependencyModel') {\n            tokens = me.getDependencyTextTokens(entity);\n        }\n        else if (entity.type === 'AssignmentModel') {\n            tokens = me.getAssignmentTextTokens(entity);\n        }\n        description = description.replace(/\\{(\\w+)\\}/g, (_, variable) => tokens[variable] ?? variable);\n        if (action.isUser) {\n            description = `[!] ${description}`;\n        }\n        return me.renderHighlightedTextElements(StringHelper.capitalize(description), tokens);\n    }\n    /**\n     * Sorts the actions within a transaction using precedence heuristic to show most \"significant\"\n     * actions first.\n     * @param {SchedulerPro.model.changelog.ChangeLogAction[]} actions\n     */\n    static sortActionRows(row1, row2) {\n        if (row1.parent === row2.parent && row1.action && row2.action) {\n            const\n                isUser1 = Boolean(row1.action.isUser),\n                isUser2 = Boolean(row2.action.isUser),\n                { actionType : type1, entity : { type : entityType1 } } = row1.action,\n                { actionType : type2, entity : { type : entityType2 } } = row2.action;\n            // Initial user actions first\n            if (isUser1 !== isUser2) {\n                return isUser1 ? -1 : 1;\n            }\n            // Adds/removes first, then updates; within those groups, tasks first\n            return Math.sign(actionTypeOrder[type1] - actionTypeOrder[type2]) ||\n                Math.sign(entityTypeOrder[entityType1] - entityTypeOrder[entityType2]) ||\n                0;\n        }\n        return 0;\n    }\n    triggerRestore(version) {\n        /**\n         * Fires when the user chooses to restore a selected version.\n         * @event restore\n         * @param {SchedulerPro.model.VersionModel} version The {@link SchedulerPro.model.VersionModel} being restored\n         */\n        this.trigger('restore', { version });\n    }\n    triggerCompare(version) {\n        /**\n         * Fires when the user chooses to compare a selected version.\n         * @event compare\n         * @param {SchedulerPro.model.VersionModel} version The {@link SchedulerPro.model.VersionModel} being restored\n         */\n        this.trigger('compare', { version });\n    }\n    triggerStopCompare(version) {\n        /**\n         * Fires when the user chooses to stop comparing a currently compared version.\n         * @event stopCompare\n         */\n        this.trigger('stopCompare');\n    }\n    /**\n     * Produce a DomConfig for cell text where **-delimited tokens are replaced by specified values. Used to\n     * allow CSS styling of replaced tokens (e.g. task names) in the changelog.\n     *\n     * @param {String} text Text string containing optional **delimited tokens**, taken from localizations\n     * @returns {DomConfig} DomConfig with text string broken into <span>s and tokens replaced\n     * @internal\n     */\n    renderHighlightedTextElements(text) {\n        const clsPrefix = this.constructor.type;\n        return {\n            children : [{\n                tag      : 'span',\n                class    : `b-${clsPrefix}-highlighted-text`,\n                children : text.split(/\\*\\*/g).reduce((out, chunk) => {\n                    out.children.push({\n                        tag   : 'span',\n                        text  : chunk,\n                        class : out.isEntity ? `b-${clsPrefix}-highlighted-entity` : null\n                    });\n                    out.isEntity = !out.isEntity;\n                    return out;\n                }, { children : [], isEntity : false }).children\n            }]\n        };\n    }\n}\nVersionGrid.initClass();\nVersionGrid._$name = 'VersionGrid';", "// column\nexport { default as ResourceCalendarColumn } from '../lib/SchedulerPro/column/ResourceCalendarColumn.js';\n// data\nexport { default as AssignmentStore } from '../lib/SchedulerPro/data/AssignmentStore.js';\nexport { default as CalendarManagerStore } from '../lib/SchedulerPro/data/CalendarManagerStore.js';\nexport { default as DependencyStore } from '../lib/SchedulerPro/data/DependencyStore.js';\nexport { default as EventStore } from '../lib/SchedulerPro/data/EventStore.js';\nexport { default as EventUpdateAction } from '../lib/SchedulerPro/data/stm/action/EventUpdateAction.js';\nexport { default as ResourceStore } from '../lib/SchedulerPro/data/ResourceStore.js';\nexport { default as ResourceUtilizationStore } from '../lib/SchedulerPro/data/ResourceUtilizationStore.js';\nexport { default as StateTrackingManager } from '../lib/SchedulerPro/data/stm/StateTrackingManager.js';\nexport { default as VersionStore } from '../lib/SchedulerPro/data/VersionStore.js';\nexport { default as ChangeLogStore } from '../lib/SchedulerPro/data/ChangeLogStore.js';\n// data mixin\nexport { default as PartOfProject } from '../lib/SchedulerPro/data/mixin/PartOfProject.js';\nexport { default as ProjectCrudManager } from '../lib/SchedulerPro/data/mixin/ProjectCrudManager.js';\n// event layout\nexport { default as ProHorizontalLayout } from '../lib/SchedulerPro/eventlayout/ProHorizontalLayout.js';\nexport { default as ProHorizontalLayoutStack } from '../lib/SchedulerPro/eventlayout/ProHorizontalLayoutStack.js';\nexport { default as ProHorizontalLayoutPack } from '../lib/SchedulerPro/eventlayout/ProHorizontalLayoutPack.js';\n// feature\nexport { default as CalendarHighlight } from '../lib/SchedulerPro/feature/CalendarHighlight.js';\nexport { default as CellEdit } from '../lib/SchedulerPro/feature/CellEdit.js';\nexport { default as Dependencies } from '../lib/SchedulerPro/feature/Dependencies.js';\nexport { default as DependencyEdit } from '../lib/SchedulerPro/feature/DependencyEdit.js';\nexport { default as EventBuffer } from '../lib/SchedulerPro/feature/EventBuffer.js';\nexport { default as EventResize } from '../lib/SchedulerPro/feature/EventResize.js';\nexport { default as EventSegmentDrag } from '../lib/SchedulerPro/feature/EventSegmentDrag.js';\nexport { default as EventSegmentResize } from '../lib/SchedulerPro/feature/EventSegmentResize.js';\nexport { default as EventSegments } from '../lib/SchedulerPro/feature/EventSegments.js';\nexport { default as NestedEvents } from '../lib/SchedulerPro/feature/NestedEvents.js';\nexport { default as PercentBar } from '../lib/SchedulerPro/feature/PercentBar.js';\nexport { default as ResourceNonWorkingTime } from '../lib/SchedulerPro/feature/ResourceNonWorkingTime.js';\nexport { default as TaskEdit } from '../lib/SchedulerPro/feature/TaskEdit.js';\nexport { default as TimeSpanHighlight } from '../lib/SchedulerPro/feature/TimeSpanHighlight.js';\nexport { default as Versions } from '../lib/SchedulerPro/feature/Versions.js';\n// model\nexport { default as AssignmentModel } from '../lib/SchedulerPro/model/AssignmentModel.js';\nexport { default as CalendarIntervalModel } from '../lib/SchedulerPro/model/CalendarIntervalModel.js';\nexport { default as CalendarModel } from '../lib/SchedulerPro/model/CalendarModel.js';\nexport { default as ChangeLogAction } from '../lib/SchedulerPro/model/changelog/ChangeLogAction.js';\nexport { default as ChangeLogPropertyUpdate } from '../lib/SchedulerPro/model/changelog/ChangeLogPropertyUpdate.js';\nexport { default as ChangeLogEntity } from '../lib/SchedulerPro/model/changelog/ChangeLogEntity.js';\nexport { default as ChangeLogDependencyEntity } from '../lib/SchedulerPro/model/changelog/ChangeLogDependencyEntity.js';\nexport { default as ChangeLogAssignmentEntity } from '../lib/SchedulerPro/model/changelog/ChangeLogAssignmentEntity.js';\nexport { default as ChangeLogTransactionModel } from '../lib/SchedulerPro/model/changelog/ChangeLogTransactionModel.js';\nexport { default as DependencyModel } from '../lib/SchedulerPro/model/DependencyModel.js';\nexport { default as EventModel } from '../lib/SchedulerPro/model/EventModel.js';\nexport { default as ProjectModel } from '../lib/SchedulerPro/model/ProjectModel.js';\nexport { default as ResourceModel } from '../lib/SchedulerPro/model/ResourceModel.js';\nexport { default as ResourceUtilizationModel } from '../lib/SchedulerPro/model/ResourceUtilizationModel.js';\nexport { default as EventSegmentModel } from '../lib/SchedulerPro/model/EventSegmentModel.js';\nexport { default as VersionModel } from '../lib/SchedulerPro/model/VersionModel.js';\n// model mixin\nexport { default as PercentDoneMixin } from '../lib/SchedulerPro/model/mixin/PercentDoneMixin.js';\nexport { default as ProjectChangeHandlerMixin } from '../lib/SchedulerPro/model/mixin/ProjectChangeHandlerMixin.js';\nexport { default as ProjectWebSocketHandlerMixin } from '../lib/SchedulerPro/model/mixin/ProjectWebSocketHandlerMixin.js';\n// view mixin\nexport { default as ProjectProgressMixin } from '../lib/SchedulerPro/view/mixin/ProjectProgressMixin.js';\nexport { default as SchedulerProEventRendering } from '../lib/SchedulerPro/view/mixin/SchedulerProEventRendering.js';\nexport { default as SchedulingIssueResolution } from '../lib/SchedulerPro/view/mixin/SchedulingIssueResolution.js';\n// view\nexport { default as ResourceHistogram } from '../lib/SchedulerPro/view/ResourceHistogram.js';\nexport { default as ResourceUtilization } from '../lib/SchedulerPro/view/ResourceUtilization.js';\nexport { default as SchedulerProBase } from '../lib/SchedulerPro/view/SchedulerProBase.js';\nexport { default as SchedulerPro } from '../lib/SchedulerPro/view/SchedulerPro.js';\n// widget\nexport { default as CalendarField } from '../lib/SchedulerPro/widget/CalendarField.js';\nexport { default as ConstraintTypePicker } from '../lib/SchedulerPro/widget/ConstraintTypePicker.js';\nexport { default as CycleResolutionPopup } from '../lib/SchedulerPro/widget/CycleResolutionPopup.js';\nexport { default as DependencyTypePicker } from '../lib/SchedulerPro/widget/DependencyTypePicker.js';\nexport { default as EffortField } from '../lib/SchedulerPro/widget/EffortField.js';\nexport { default as EndDateField } from '../lib/SchedulerPro/widget/EndDateField.js';\nexport { default as GanttTaskEditor } from '../lib/SchedulerPro/widget/GanttTaskEditor.js';\nexport { default as ModelCombo } from '../lib/SchedulerPro/widget/ModelCombo.js';\nexport { default as SchedulerTaskEditor } from '../lib/SchedulerPro/widget/SchedulerTaskEditor.js';\nexport { default as SchedulingDirectionPicker } from '../lib/SchedulerPro/widget/SchedulingDirectionPicker.js';\nexport { default as SchedulingIssueResolutionPopup } from '../lib/SchedulerPro/widget/SchedulingIssueResolutionPopup.js';\nexport { default as SchedulingModePicker } from '../lib/SchedulerPro/widget/SchedulingModePicker.js';\nexport { default as StartDateField } from '../lib/SchedulerPro/widget/StartDateField.js';\nexport { default as TaskEditorBase } from '../lib/SchedulerPro/widget/TaskEditorBase.js';\nexport { default as Timeline } from '../lib/SchedulerPro/widget/Timeline.js';\nexport { default as VersionGrid } from '../lib/SchedulerPro/widget/VersionGrid.js';\n// widget taskeditor\nexport { default as AdvancedTab } from '../lib/SchedulerPro/widget/taskeditor/AdvancedTab.js';\nexport { default as DependencyTab } from '../lib/SchedulerPro/widget/taskeditor/DependencyTab.js';\nexport { default as EditorTab } from '../lib/SchedulerPro/widget/taskeditor/EditorTab.js';\nexport { default as FormTab } from '../lib/SchedulerPro/widget/taskeditor/FormTab.js';\nexport { default as GeneralTab } from '../lib/SchedulerPro/widget/taskeditor/GeneralTab.js';\nexport { default as NotesTab } from '../lib/SchedulerPro/widget/taskeditor/NotesTab.js';\nexport { default as PredecessorsTab } from '../lib/SchedulerPro/widget/taskeditor/PredecessorsTab.js';\nexport { default as RecurrenceTab } from '../lib/SchedulerPro/widget/taskeditor/RecurrenceTab.js';\nexport { default as ResourcesTab } from '../lib/SchedulerPro/widget/taskeditor/ResourcesTab.js';\nexport { default as SchedulerAdvancedTab } from '../lib/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab.js';\nexport { default as SchedulerGeneralTab } from '../lib/SchedulerPro/widget/taskeditor/SchedulerGeneralTab.js';\nexport { default as SuccessorsTab } from '../lib/SchedulerPro/widget/taskeditor/SuccessorsTab.js';\n// widget taskeditor mixin\nexport { default as EventLoader } from '../lib/SchedulerPro/widget/taskeditor/mixin/EventLoader.js';\nexport { default as ReadyStatePropagator } from '../lib/SchedulerPro/widget/taskeditor/mixin/ReadyStatePropagator.js';\n\n\nimport GlobalEvents from '../lib/Core/GlobalEvents.js';\nimport BrowserHelper from '../lib/Core/helper/BrowserHelper.js';\nimport VersionHelper from '../lib/Core/helper/VersionHelper.js';\nimport Widget from '../lib/Core/widget/Widget.js';\nimport Toast from '../lib/Core/widget/Toast.js';\nimport Override from '../lib/Core/mixin/Override.js';\nimport DomHelper from '../lib/Core/helper/DomHelper.js';\nimport SchedulerProBase from '../lib/SchedulerPro/view/SchedulerProBase.js';\nimport SchedulerEventRendering from '../lib/Scheduler/view/mixin/SchedulerEventRendering.js';\nimport Dependencies from '../lib/SchedulerPro/feature/Dependencies.js';\n(() => {\n    //region Common\n    const\n        HOSTS            = [\n            'bryntum.com',\n            'cdpn.io',\n            'react-gantt.com',\n            'vue-gantt.com',\n            'vue-scheduler.com',\n            'react-scheduler.com',\n            'angular-scheduler.com',\n            'angular-calendar.com',\n            'vue-calendar.com',\n            'react-calendar.com',\n            'lmctfy.net',\n            'bryntum-dev-ed.develop.lightning.force.com'\n        ],\n        ONE_DAY          = 1000 * 60 * 60 * 24,\n        EXPIRING_CLASSES = [],\n        location = (globalThis || self).location;\n    if (!VersionHelper.isTestEnv && (HOSTS.some(host => location.host.includes(host)) || /\\/docs/.test(location.href))) {\n        return;\n    }\n    let initialized;\n    function initExpiryHelper(owner, baseClass) {\n        if (!initialized) {\n            initialized = true;\n            ExpiryHelper.construct({\n                widget : owner\n            });\n        }\n        // do not remove this line (used to distinguish trial bundles by regexp)\n        owner.__foo = 'THISISTRIAL';\n    }\n    //endregion\n    //region ExpiryHelper\n    class ExpiryHelper {\n        static construct(config) {\n            const\n                me            = this,\n                product       = 'taskboard',\n                productName   = 'TaskBoard',\n                version       = VersionHelper.getVersion(product),\n                callHomeDelay = VersionHelper.isTestEnv ? 3000 : 1000 * 60,\n                blockUrl      = BrowserHelper.queryString.blockUrl;\n            Object.assign(me, {\n                version,\n                product,\n                Product          : productName,\n                verifyUrl        : VersionHelper.isTestEnv ? blockUrl : 'https://bryntum.com/verify/',\n                blocked          : false,\n                lastVersionCheck : 0,\n                trialKey         : `b-${product}-trial-start`,\n                versionCheckKey  : `b-${product}-verify-date`\n            }, config);\n            if (!VersionHelper.isTestEnv) {\n                console.log(`Bryntum ${productName} Trial Version`);\n            }\n            me.cacheTrialStartTime();\n            if (me.isExpired) {\n                if (document.readyState === 'complete') {\n                    me.onTrialExpired();\n                }\n                else {\n                    document.addEventListener('readystatechange', () => {\n                        if (document.readyState === 'complete') {\n                            me.onTrialExpired();\n                        }\n                    });\n                }\n            }\n            // Call home to log trial usage, assuming localStorage access works reliably\n            // 1 min delay to be less easily detected\n            setTimeout(() => {\n                me.updateBlockedStatus();\n            }, callHomeDelay);\n        }\n        static cacheTrialStartTime() {\n            const\n                me         = this,\n                timeString = BrowserHelper.getLocalStorageItem(me.trialKey),\n                time       = Number(timeString);\n            if (time && !isNaN(time)) {\n                me.trialStartTime = time;\n            }\n            me.trialStartTime = me.trialStartTime || Date.now();\n            // First trial access, or no localstorage (no local storage meaning our expiration mechanism won't work. Only remote blocking will end the trial)\n            BrowserHelper.setLocalStorageItem(me.trialKey, me.trialStartTime);\n        }\n        static get isExpired() {\n            return this.blocked || (Date.now() - this.trialStartTime > ONE_DAY * 45) || window.bryntum?.[this.product]?.expired;\n        }\n        static updateBlockedStatus() {\n            const\n                me                  = this,\n                saveVersionCheckKey = () => BrowserHelper.setLocalStorageItem(me.versionCheckKey, Date.now());\n            me.lastVersionCheck = me.lastVersionCheck || BrowserHelper.getLocalStorageItem(me.versionCheckKey) || 0;\n            // Max 1 version check per session / day\n            if (me.lastVersionCheck && Date.now() - me.lastVersionCheck < ONE_DAY) {\n                return;\n            }\n            if (me.verifyUrl) {\n                const\n                    url    = encodeURIComponent(location.href),\n                    logUrl = `${me.verifyUrl}?id=${window.bryntum.license}&url=${url}`,\n                    img    = new Image();\n                img.onload = () => {\n                    // 2x2 image means trial is blocked due to violation\n                    if (img.naturalWidth === 2) {\n                        me.blockTrial();\n                    }\n                    else {\n                        // Just in case\n                        saveVersionCheckKey();\n                    }\n                };\n                img.onerror = () => {\n                    saveVersionCheckKey();\n                };\n                img.src = logUrl;\n            }\n            else {\n                saveVersionCheckKey();\n            }\n        }\n        static onTrialExpired() {\n            const rootEl = this.widget.rootElement;\n            if (!this.expirationShown) {\n                this.expirationShown = true;\n                if (!VersionHelper.isTestEnv) {\n                    console.warn(`Bryntum ${this.Product} trial version expired. Purchase a license at https://bryntum.com/store or contact us at https://bryntum.com/contact/ for licensing options.`);\n                }\n                rootEl.floatRoot && Toast.show({\n                    html        : `Psst! Your Bryntum ${this.Product} trial has expired. Please see <a href=\"https://bryntum.com/store\">our store</a> for licensing options`,\n                    timeout     : 20000,\n                    rootElement : rootEl\n                });\n            }\n            DomHelper.removeEachSelector(rootEl, '.b-sch-dependency');\n            DomHelper.forEachSelector(rootEl, '.b-container', element => {\n                const widget = Widget.fromElement(element, 'widget');\n                if (EXPIRING_CLASSES.some(cls => widget instanceof cls)) {\n                    this.maskExpiredWidget(widget);\n                }\n            });\n        }\n        static blockTrial() {\n            this.blocked = true;\n            // Get rid of version check timestamp\n            BrowserHelper.removeLocalStorageItem(this.versionCheckKey);\n            // To force expired state: Set a fake early trial timestamp\n            BrowserHelper.setLocalStorageItem(this.trialKey, 1);\n            this.onTrialExpired();\n        }\n        static maskExpiredWidget(widget) {\n            widget.mask({\n                text  : '<h3 style=\"margin:0\">Trial expired, <a href=\"https://bryntum.com/store\" style=\"margin:0 3px; color:inherit\">click here</a> to buy a license.</h3>',\n                icon  : 'b-fa b-fa-frown',\n                type  : 'trial',\n                cover : 'target'\n            });\n        }\n        static setWaterMark(element, {\n            darkColor = 'rgba(255, 255, 255, 0.03)',\n            lightColor = 'rgba(240, 240, 240, 0.54)'\n        } = {}) {\n            // Used for thumbnails\n            if (BrowserHelper.queryString.thumb != null) {\n                return;\n            }\n            const\n                color     = DomHelper.themeInfo?.name?.toLowerCase().endsWith('-dark') ? darkColor : lightColor,\n                svgString = `\n                   <svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"100%\" height=\"100%\" style=\"font-family:sans-serif;font-weight:900;fill:${color}\">\n                    <defs>\n                        <pattern id=\"company\" patternUnits=\"userSpaceOnUse\" width=\"400\" height=\"200\">\n                            <text y=\"30\" font-size=\"40\" id=\"name\">Bryntum</text>\n                            <text y=\"120\" x=\"200\" font-size=\"24\" id=\"trial\">Trial Version</text>\n                        </pattern>\n                        <pattern id=\"pattern\" xlink:href=\"#company\" patternTransform=\"rotate(-45)\">\n                            <use xlink:href=\"#name\" /><use xlink:href=\"#trial\" />\n                        </pattern>\n                    </defs>\n                    <rect width=\"100%\" height=\"100%\" fill=\"url(#pattern)\" />\n                </svg>`;\n            element.style.backgroundImage = `url('data:image/svg+xml;base64,${window.btoa(svgString)}')`;\n        };\n    }\n    //endregion\n    //region Common override\n    const applyBaseOverride = baseClass => {\n        EXPIRING_CLASSES.push(baseClass);\n        Override.apply(class {\n            static get target() {\n                return {\n                    class : baseClass\n                };\n            }\n            onPaintOverride() {\n                const\n                    me            = this,\n                    setWatermarks = () => {\n                        const targets = me.subGrids ? Object.values(me.subGrids) : [me];\n                        for (const target of targets) {\n                            if (target.element) {\n                                ExpiryHelper.setWaterMark(target.element);\n                            }\n                        }\n                    };\n                initExpiryHelper(me, baseClass);\n                setWatermarks();\n                // React to theme changes\n                GlobalEvents.on('theme', () => {\n                    setWatermarks();\n                });\n                if (ExpiryHelper.isExpired) {\n                    ExpiryHelper.maskExpiredWidget(me);\n                }\n            }\n        });\n    };\n    //endregion\n    if (typeof SchedulerProBase !== 'undefined') {\n        applyBaseOverride(SchedulerProBase);\n        Override.apply(class {\n            static get target() {\n                return {\n                    class : SchedulerEventRendering\n                };\n            }\n            getEventsToRender() {\n                if (ExpiryHelper.isExpired && this.isSchedulerPro) {\n                    return [];\n                }\n                else {\n                    return this._overridden.getEventsToRender.apply(this, arguments);\n                }\n            }\n        });\n    }\n})();\n(() => {\n    // do not load analytics code for specific domains\n    const ignoreDomainRe = /(.force.com|.lightning.com|.salesforce.com|lmctfy.net|qa.bryntum.com|qa2.bryntum.com)/;\n    // document location might be null in firefox in salesforce\n    if (!document.location || ignoreDomainRe.test(document.location.href) || window.top !== window) {\n        return;\n    }\n    let id;\n    const websiteUrls = [\n        'bryntum.com',\n        'cdpn.io'\n    ];\n    const\n        products   = ['calendar', 'grid', 'gantt', 'scheduler', 'schedulerpro', 'taskboard'],\n        frameworks = ['angular', 'react', 'vue', 'ionic'];\n    websiteUrls.splice(0, 0, ...products.map(prod => frameworks.map(framework => `${framework}-${prod}`)).concat('bryntum.com').flat());\n    if (document.location.host.match(websiteUrls.join('|'))) {\n        id = 'G-1VY6776VJP';\n    }\n    else {\n        id = 'G-H465KZDH8S';\n    }\n    const newScript = document.createElement('script');\n    newScript.onload = function() {\n        window.dataLayer = window.dataLayer || [];\n        function gtag() {\n            window.dataLayer.push(arguments);\n        }\n        gtag('js', new Date());\n        gtag('config', id);\n    };\n    document.head.appendChild(newScript);\n    newScript.src = 'https://www.googletagmanager.com/gtag/js?id=' + id;\n})();\n"],
  "mappings": "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",
  "names": ["ResourceCalendarColumn", "Column", "AttachToProjectMixin_default", "CalendarField", "project", "resourceStore", "record", "changes", "_a", "change", "value", "ColumnStore", "EventModel", "SchedulerProEvent", "TimeSpan", "RecurringTimeSpan_default", "PartOfProject_default", "EventModelMixin_default", "PercentDoneMixin_default", "Duration", "EventSegmentModel", "date", "duration", "forward", "dt", "startDate", "me", "endDate", "effort", "preamble", "wrapStartDate", "result", "postamble", "wrapEndDate", "data", "isObject", "fieldName", "nameOrField", "field", "_b", "stm", "assigned", "options", "segments", "segment", "silent", "skipAccessors", "triggerBeforeUpdate", "batchChanges", "__publicField", "EventStore", "RecurringEventsMixin_default", "GetEventsMixin_default", "DayIndexMixin_default", "EventStoreMixin_default", "ChronoEventStoreMixin", "AjaxStore", "ResourceUtilizationModel", "Model", "args", "origin", "children", "toRemove", "toAdd", "assignment", "records", "added", "stores", "store", "node", "ResourceUtilizationStore", "AbstractPartOfProjectStoreMixin", "event", "resourceWrapper", "assignmentWrapper", "newResourceWrapper", "resource", "removed", "model", "sortFn", "a", "b", "ProHorizontalLayout_default", "Target", "Base", "layoutData", "groupBy", "weights", "groupByThisObj", "eventRecord", "events", "groups", "aValue", "bValue", "ProHorizontalLayoutStack", "HorizontalLayoutStack", "heightRun", "ProHorizontalLayoutPack", "HorizontalLayoutPack", "groupCount", "j", "slot", "slotSize", "size", "groupIndex", "adjustedSlotStart", "counter", "CalendarHighlightModel", "ResourceTimeRangeModel", "CalendarHighlight", "ResourceTimeRangesBase", "config", "eventRecords", "resourceRecords", "ArrayHelper", "clearExisting", "client", "timespans", "timespan", "resourceRecord", "split", "_c", "currentOrientation", "resources", "context", "renderData", "inflate", "disabled", "was", "GridFeatureManager", "DependencyEdit", "TransactionalFeature_default", "EventBuffer", "InstancePlugin", "tooltipTemplate", "Tooltip", "activeTarget", "before", "useEventBuffer", "bufferBeforeWidth", "bufferAfterWidth", "wrapperChildren", "isHorizontal", "showDuration", "sizeProp", "preambleConfig", "postambleConfig", "disable", "EventSegmentDrag", "EventDrag", "dragData", "assignmentRecords", "start", "valid", "assignmentStore", "eventStore", "i", "copyKeyPressed", "isVertical", "timeDiff", "updated", "draggedEvent", "eventBar", "eventBarEls", "newStartDate", "DateHelper", "el", "eventElement", "info", "element", "assignmentRecord", "mainEventElement", "dateConstraints", "constrainRectangle", "eventRegion", "Rectangle", "mainEventRegion", "minDate", "maxDate", "snapTo", "dirty", "enableEventAnimations", "borderWidths", "NestedEvents", "Delayable_default", "layout", "height", "parentEventRecord", "margin", "eventHeight", "total", "borderWidth", "r", "parentElement", "relativeBounds", "DomSync", "eventDrag", "parent", "parentBounds", "targetEventRecord", "newResource", "maxLevel", "targetLevel", "maxChildLevel", "child", "relativeChildLevel", "toScheduler", "reassignedFrom", "eventsToAdd", "addedEvents", "draggedAssignment", "newParent", "targetResource", "existingAssignment", "newParentElement", "containerBounds", "intersection", "originalParentElement", "originalBounds", "animation", "bounds", "returnWrapper", "eventRect", "DomHelper", "childLevel", "width", "left", "top", "wrapperCls", "assignedChildren", "e", "layouts", "nestedEvents", "eventsData", "domConfig", "containerDomConfig", "index", "ResourceNonWorkingTime", "calendarManagerStore", "action", "resourceMap", "timeAxis", "shouldPaint", "ranges", "range", "isNonWorking", "rangeElement", "timespanDefaults", "emptyObject", "TimeSpanHighlight", "draw", "name", "surround", "padding", "taskRecord", "animationId", "rect", "timeSpan", "timeSpans", "fadeOut", "EventHelper", "ChangeLogPropertyUpdate", "property", "after", "ProjectModel", "ProjectChangeHandlerMixin_default", "ProjectCrudManager_default", "ProjectModelMixin_default", "SchedulerProProjectMixin", "CalendarModel", "DependencyModel", "AssignmentModel", "ResourceModel", "CalendarManagerStore", "DependencyStore", "AssignmentStore", "ResourceStore", "StateTrackingManager", "calendars", "SchedulerProEventRendering_default", "eventLayout", "oldEventLayout", "key", "timeAxisViewModel", "horizontal", "buildReturnedValue", "ResourceHistogram", "TimelineHistogram", "SchedulerStores_default", "SchedulerResourceRendering_default", "CrudManagerView_default", "currentTimeAxis", "graph", "entity", "unit", "toUnit", "eventParams", "TimeUnit", "scalePoint", "scaleMax", "scalePoints", "scaleStep", "factor", "lastPoint", "viewPreset", "CalculatedValueGen", "prevTicksCalendar", "BaseCalendarMixin", "tick", "source", "isInitialCommit", "isCalculated", "widget", "oldWidget", "series", "rectConfig", "datum", "topValue", "forceHeight", "format", "formatter", "NumberFormat", "showEffortUnit", "scaleUnit", "effortFormatter", "localizedUnit", "effortInUnits", "effortUnit", "barTipEffortUnit", "defaultUnit", "allocated", "available", "assignmentTpl", "dateFormat", "resultFormat", "assignmentsSuffix", "assignmentsArray", "key1", "value1", "key2", "value2", "assignments", "StringHelper", "barTextEffortUnit", "view", "showBarText", "allocationReport", "increment", "allocation", "aggregationContext", "Objects", "acc", "entry", "_recordIndex", "_entryIndex", "inEventTimeSpan", "isGroup", "_ResourceUtilization", "tooltipContext", "allocationData", "row", "link", "recordIndex", "entryIndex", "targetArray", "recordArray", "resourceEntry", "l", "showBarTip", "memberArray", "member", "members", "ResourceUtilization", "Tree", "ProHorizontalRendering", "HorizontalRendering", "innerStartMS", "innerEndMS", "innerDurationMS", "position", "rowRecord", "includeOutside", "ProVerticalRendering", "VerticalRendering", "scheduler", "isBatchUpdating", "bottom", "SchedulerProBase", "SchedulerBase", "ProjectProgressMixin_default", "SchedulingIssueResolution_default", "mode", "VersionHelper", "SchedulerPro", "Timeline", "initialCommitPerformed", "ObjectHelper", "Store", "oldWidth", "reFit", "isCollapse", "needsFit", "task", "timelineEvent", "clone", "timelineTasks", "EMPTY_ARRAY", "actionTypeOrder", "entityTypeOrder", "describePosition", "knownEntityTypes", "VersionGridRow", "GridRowModel", "_VersionGrid", "TreeGrid", "newDateFormat", "occurredAtColumn", "newProject", "newVersionId", "oldVersionId", "oldHighlightedRow", "newHighlightedRow", "versionId", "versions", "versionIds", "version", "transactions", "txn", "transaction", "showNamedVersionsOnly", "showUnattachedTransactions", "rowsToReplaceSet", "transactionsByVersionId", "allRecords", "versionsToShow", "newRows", "showVersions", "comparingVersionId", "transactionRows", "id", "propertyUpdate", "clsPrefix", "side", "propertyName", "assignmentChange", "dependencyChange", "actionType", "entityNames", "description", "tokens", "_", "variable", "row1", "row2", "isUser1", "isUser2", "type1", "entityType1", "type2", "entityType2", "text", "out", "chunk", "grid", "rest", "column", "items", "collapse", "VersionGrid", "HOSTS", "EXPIRING_CLASSES", "location", "host", "initialized", "initExpiryHelper", "owner", "baseClass", "ExpiryHelper", "product", "productName", "callHomeDelay", "blockUrl", "BrowserHelper", "timeString", "time", "saveVersionCheckKey", "url", "logUrl", "img", "rootEl", "Toast", "Widget", "cls", "darkColor", "lightColor", "color", "svgString", "Override", "setWatermarks", "targets", "target", "GlobalEvents_default", "SchedulerEventRendering_default", "ignoreDomainRe", "websiteUrls", "products", "frameworks", "prod", "framework", "newScript", "gtag"]
}
