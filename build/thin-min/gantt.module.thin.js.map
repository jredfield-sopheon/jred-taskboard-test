{
  "version": 3,
  "sources": ["../../../Gantt/lib/Gantt/column/AddNewColumn.js", "../../../Gantt/lib/Gantt/column/GanttDateColumn.js", "../../../Gantt/lib/Gantt/column/BaselineStartDateColumn.js", "../../../Gantt/lib/Gantt/column/BaselineEndDateColumn.js", "../../../Gantt/lib/Gantt/column/BaselineDurationColumn.js", "../../../Gantt/lib/Gantt/column/BaselineDurationVarianceColumn.js", "../../../Gantt/lib/Gantt/column/BaselineStartVarianceColumn.js", "../../../Gantt/lib/Gantt/column/BaselineEndVarianceColumn.js", "../../../Gantt/lib/Gantt/widget/CalendarPicker.js", "../../../Gantt/lib/Gantt/column/CalendarColumn.js", "../../../Gantt/lib/Gantt/column/ConstraintDateColumn.js", "../../../Gantt/lib/Gantt/column/ConstraintTypeColumn.js", "../../../Gantt/lib/Gantt/column/DeadlineDateColumn.js", "../../../Gantt/lib/Gantt/column/EarlyEndDateColumn.js", "../../../Gantt/lib/Gantt/column/EarlyStartDateColumn.js", "../../../Gantt/lib/Gantt/column/EffortColumn.js", "../../../Gantt/lib/Gantt/column/EndDateColumn.js", "../../../Gantt/lib/Gantt/column/IgnoreResourceCalendarColumn.js", "../../../Gantt/lib/Gantt/column/InactiveColumn.js", "../../../Gantt/lib/Gantt/column/LateEndDateColumn.js", "../../../Gantt/lib/Gantt/column/LateStartDateColumn.js", "../../../Gantt/lib/Gantt/column/ManuallyScheduledColumn.js", "../../../Gantt/lib/Gantt/column/MilestoneColumn.js", "../../../Gantt/lib/Gantt/column/NameColumn.js", "../../../Gantt/lib/Gantt/column/NoteColumn.js", "../../../Gantt/lib/Gantt/column/PercentDoneColumn.js", "../../../Gantt/lib/Gantt/widget/DependencyField.js", "../../../Gantt/lib/Gantt/column/DependencyColumn.js", "../../../Gantt/lib/Gantt/column/PredecessorColumn.js", "../../../Gantt/lib/Gantt/data/AssignmentsManipulationStore.js", "../../../Gantt/lib/Gantt/model/AssignmentModel.js", "../../../Gantt/lib/Gantt/localization/En.js", "../../../Gantt/lib/Gantt/column/ResourceAssignmentGridResourceColumn.js", "../../../Gantt/lib/Gantt/widget/AssignmentGrid.js", "../../../Gantt/lib/Gantt/widget/AssignmentPicker.js", "../../../Gantt/lib/Gantt/widget/AssignmentField.js", "../../../Gantt/lib/Gantt/column/ResourceAssignmentColumn.js", "../../../Gantt/lib/Gantt/column/RollupColumn.js", "../../../Gantt/lib/Gantt/column/SchedulingDirectionColumn.js", "../../../Gantt/lib/Gantt/column/SchedulingModeColumn.js", "../../../Gantt/lib/Gantt/column/SequenceColumn.js", "../../../Gantt/lib/Gantt/column/ShowInTimelineColumn.js", "../../../Gantt/lib/Gantt/column/StartDateColumn.js", "../../../Gantt/lib/Gantt/column/SuccessorColumn.js", "../../../Gantt/lib/Gantt/column/TotalSlackColumn.js", "../../../Gantt/lib/Gantt/column/WBSColumn.js", "../../../Gantt/lib/Gantt/column/AllColumns.js", "../../../Gantt/lib/Gantt/column/EventModeColumn.js", "../../../Gantt/lib/Gantt/column/TimeAxisColumn.js", "../../../Gantt/lib/Gantt/data/AssignmentStore.js", "../../../Gantt/lib/Gantt/model/CalendarModel.js", "../../../Gantt/lib/Gantt/data/CalendarManagerStore.js", "../../../Gantt/lib/Gantt/model/DependencyModel.js", "../../../Gantt/lib/Gantt/data/DependencyStore.js", "../../../Gantt/lib/Gantt/model/ResourceModel.js", "../../../Gantt/lib/Gantt/data/ResourceStore.js", "../../../Engine/lib/Engine/quark/model/gantt/ConstrainedByParentMixin.js", "../../../Engine/lib/Engine/quark/model/gantt/ConstrainedLateEventMixin.js", "../../../Engine/lib/Engine/quark/model/gantt/ScheduledByDependenciesLateEventMixin.js", "../../../Engine/lib/Engine/quark/model/gantt/InactiveEventMixin.js", "../../../Engine/lib/Engine/quark/model/gantt/scheduling_modes/FixedEffortDispatcher.js", "../../../Engine/lib/Engine/quark/model/gantt/scheduling_modes/FixedEffortMixin.js", "../../../Engine/lib/Engine/quark/model/gantt/scheduling_modes/FixedUnitsDispatcher.js", "../../../Engine/lib/Engine/quark/model/gantt/scheduling_modes/FixedUnitsMixin.js", "../../../Engine/lib/Engine/quark/model/gantt/GanttEvent.js", "../../../Gantt/lib/Gantt/model/Baseline.js", "../../../Gantt/lib/Gantt/data/field/WbsField.js", "../../../Gantt/lib/Gantt/model/TaskModel.js", "../../../Gantt/lib/Gantt/data/TaskStore.js", "../../../Gantt/lib/Gantt/feature/Baselines.js", "../../../Gantt/lib/Gantt/feature/CellEdit.js", "../../../Gantt/lib/Gantt/feature/CriticalPaths.js", "../../../Gantt/lib/Gantt/feature/Dependencies.js", "../../../Gantt/lib/Gantt/feature/Indicators.js", "../../../Gantt/lib/Gantt/feature/Labels.js", "../../../Gantt/lib/Gantt/feature/ParentArea.js", "../../../Gantt/lib/Gantt/feature/ProgressLine.js", "../../../Gantt/lib/Gantt/feature/ProjectLines.js", "../../../Gantt/lib/Gantt/feature/Rollups.js", "../../../Gantt/lib/Gantt/feature/ScrollButtons.js", "../../../Gantt/lib/Gantt/feature/Summary.js", "../../../Gantt/lib/Gantt/feature/TaskCopyPaste.js", "../../../Gantt/lib/Gantt/feature/TaskDrag.js", "../../../Gantt/lib/Gantt/feature/TaskDragCreate.js", "../../../Gantt/lib/Gantt/widget/TaskEditor.js", "../../../Gantt/lib/Gantt/feature/TaskEdit.js", "../../../Gantt/lib/Gantt/feature/TaskMenu.js", "../../../Gantt/lib/Gantt/feature/TaskNonWorkingTime.js", "../../../Gantt/lib/Gantt/feature/TaskResize.js", "../../../Gantt/lib/Gantt/feature/TaskSegmentDrag.js", "../../../Gantt/lib/Gantt/feature/TaskSegmentResize.js", "../../../Gantt/lib/Gantt/feature/TaskTooltip.js", "../../../Gantt/lib/Gantt/feature/TreeGroup.js", "../../../Gantt/lib/Gantt/feature/Versions.js", "../../../Gantt/lib/Gantt/feature/export/exporter/GanttExporterMixin.js", "../../../Gantt/lib/Gantt/feature/export/exporter/MultiPageExporter.js", "../../../Gantt/lib/Gantt/feature/export/exporter/MultiPageVerticalExporter.js", "../../../Gantt/lib/Gantt/feature/export/exporter/SinglePageExporter.js", "../../../Gantt/lib/Gantt/feature/export/PdfExport.js", "../../../Gantt/lib/Gantt/feature/export/Print.js", "../../../Gantt/lib/Gantt/model/CalendarIntervalModel.js", "../../../Engine/lib/Engine/quark/model/gantt/HasCriticalPathsMixin.js", "../../../Engine/lib/Engine/quark/model/gantt/GanttProjectMixin.js", "../../../Gantt/lib/Gantt/model/ProjectModel.js", "../../../Gantt/lib/Gantt/model/WebSocketProjectModel.js", "../../../Gantt/lib/Gantt/util/ProjectGenerator.js", "../../../Gantt/lib/Gantt/util/ResourceAssignmentParser.js", "../../../Gantt/lib/Gantt/feature/export/MspExport.js", "../../../Gantt/lib/Gantt/view/mixin/GanttDom.js", "../../../Gantt/lib/Gantt/view/mixin/GanttRegions.js", "../../../Gantt/lib/Gantt/view/mixin/GanttScroll.js", "../../../Gantt/lib/Gantt/view/mixin/GanttState.js", "../../../Gantt/lib/Gantt/view/mixin/GanttStores.js", "../../../Gantt/lib/Gantt/view/mixin/GanttTimelineDateMapper.js", "../../../Gantt/lib/Gantt/view/mixin/TaskNavigation.js", "../../../Gantt/lib/Gantt/view/orientation/NewTaskRendering.js", "../../../Gantt/lib/Gantt/view/GanttBase.js", "../../../Gantt/lib/Gantt/view/Gantt.js", "../../../Gantt/bundle/entry.thin.js"],
  "sourcesContent": ["import Column from '../../Grid/column/Column.js';\nimport Store from '../../Core/data/Store.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\nimport Combo from '../../Core/widget/Combo.js';\n/**\n * @module Gantt/column/AddNewColumn\n */\n/**\n * This column allows user to dynamically add columns to the Gantt chart by clicking the column header\n * and picking columns from a combobox.\n *\n * ## Adding a custom column to the combobox\n *\n * In order to appear in the column combobox list a column class have to fulfill these conditions:\n *\n * 1. the class should have a static property `type` with unique string value that will identify the column.\n * 2. the class should be registered with the call to {@link Grid/data/ColumnStore#function-registerColumnType-static ColumnStore.registerColumnType}.\n * 3. the class should have a static property `isGanttColumn` with truthy value.\n * 4. the class should have a static `text` property with column name.\n *\n * For example:\n *\n * ```javascript\n * import ColumnStore from 'gantt-distr/lib/Grid/data/ColumnStore.js';\n * import Column from 'gantt-distr/lib/Grid/column/Column.js';\n *\n * // New column class to display task priority\n * export default class TaskPriorityColumn extends Column {\n *     // unique alias of the column\n *     static get type() {\n *         return 'priority';\n *     }\n *\n *     // indicates that the column should be present in \"Add New...\" column\n *     static get isGanttColumn() {\n *         return true;\n *     }\n *\n *     static get defaults() {\n *         return {\n *             // the column is mapped to \"priority\" field of the Task model\n *             field : 'priority',\n *             // the column title\n *             text  : 'Priority'\n *         };\n *     }\n * }\n *\n * // register new column\n * ColumnStore.registerColumnType(TaskPriorityColumn);\n * ```\n *\n * @extends Grid/column/Column\n * @classtype addnew\n * @column\n */\nexport default class AddNewColumn extends Column {\n    static get $name() {\n        return 'AddNewColumn';\n    }\n    static get type() {\n        return 'addnew';\n    }\n    static get defaults() {\n        return {\n            text       : 'L{New Column}',\n            cls        : 'b-new-column-column',\n            draggable  : false,\n            sortable   : false,\n            exportable : false,\n            field      : null,\n            editor     : null\n        };\n    }\n    doDestroy() {\n        this._combo?.destroy();\n        super.doDestroy();\n    }\n    /**\n     * Returns the combo box field rendered into the header of this column\n     * @property {Core.widget.Combo}\n     * @readonly\n     */\n    get combo() {\n        const\n            me      = this,\n            columns = me.grid.columns;\n        return me._combo || (\n            me._combo = new Combo({\n                owner         : me.grid,\n                cls           : 'b-new-column-combo',\n                placeholder   : me.L('L{New Column}'),\n                triggers      : false,\n                autoExpand    : true,\n                store         : me.ganttColumnStore,\n                displayField  : 'text',\n                monitorResize : false,\n                picker        : {\n                    align : {\n                        align    : 't0-b0',\n                        axisLock : true\n                    },\n                    minWidth : 200,\n                    onItem({ record : columnRecord }) {\n                        const newColumn = new columnRecord.value({\n                            region : me.region\n                        }, columns);\n                        // Insert the new column before the \"New Column\" column\n                        // then focus it to ensure it is in view.\n                        columns.insert(columns.indexOf(me), newColumn);\n                        newColumn.element.focus();\n                    },\n                    // Column elements are rerendered, so the forElement must be kept up to date\n                    onBeforeShow() {\n                        this.forElement = me.element;\n                    }\n                },\n                syncInputFieldValue() {\n                    this.input.value = '';\n                },\n                internalListeners : {\n                    // Keystrokes must not leak up to the Grid where its Navigator will react\n                    keydown({ event }) {\n                        event.stopImmediatePropagation();\n                    }\n                }\n            })\n        );\n    }\n    get ganttColumnStore() {\n        // Create a store containing the Gantt column classes.\n        // A filter ensures that column types which are already\n        // present in the grid are not shown.\n        return new Store({\n            data : Object.values(ColumnStore.columnTypes).reduce((result, col) => {\n                // We must ensure that the defaultValues property is calculated\n                // so that we can detect a text property.\n                if (!col.$meta.fields.exposedData) {\n                    col.exposeProperties({});\n                }\n                // To be included, a column must have a static isGanttColumn\n                // property which yields a truthy value, and a text value.\n                if (col.isGanttColumn && col.text) {\n                    result.push({\n                        id    : col.type,\n                        text  : col.optionalL(col.text),\n                        value : col\n                    });\n                }\n                return result;\n            }, []),\n            filters : [\n                // A colRecord is only filtered in if the grid columns do not contain an instance.\n                colRecord => !this.grid.columns.some(gridCol => gridCol.constructor === colRecord.value)\n            ],\n            sorters : [\n                { field : 'text' }\n            ]\n        });\n    }\n    headerRenderer({ column, headerElement }) {\n        column.combo.render(headerElement);\n    }\n    onKeyDown(event) {\n        if (event.key === 'Enter') {\n            this.combo.focus();\n        }\n    }\n    updateLocalization() {\n        // reset cached combo to rebuild options store w/ new translated column names\n        if (this._combo) {\n            this._combo.destroy();\n            this._combo = null;\n        }\n        super.updateLocalization();\n    }\n}\nColumnStore.registerColumnType(AddNewColumn);\nAddNewColumn._$name = 'AddNewColumn';", "import DateColumn from '../../Grid/column/DateColumn.js';\n/**\n * @module Gantt/column/GanttDateColumn\n */\n/**\n * Base column class that displays dates, in the `ll` format by default. If set to `null` uses Gantt's {@link Scheduler.view.mixin.TimelineViewPresets#config-displayDateFormat date format} as a default.\n * The format will be dynamically updated while zooming according to the {@link Scheduler.preset.ViewPreset#field-displayDateFormat} value specified for the ViewPreset being selected.\n *\n * By default, this class hides the left/right arrows to modify the date incrementally, you can enable this with the {@link Grid.column.DateColumn#config-step} config\n * of the {@link #config-editor} config.\n *\n * Default editor is a {@link Core.widget.DateField DateField}.\n *\n * @extends Grid/column/DateColumn\n * @abstract\n */\nexport default class GanttDateColumn extends DateColumn {\n    static $name = 'GanttDateColumn';\n    static isGanttColumn = true;\n    static get defaults() {\n        return {\n            instantUpdate : true,\n            width         : 130,\n            step          : null,\n            /**\n             * The date format used to display dates in this column. If `format` is set to `null`,\n             * the current value of the Gantt's {@link Scheduler.view.mixin.TimelineViewPresets#config-displayDateFormat} will be used to format the date value.\n             * @config {String|null}\n             * @category Common\n             */\n            format : 'll'\n        };\n    }\n    construct(data, store) {\n        const me = this;\n        me.gantt = store.grid;\n        super.construct(data, store);\n        // If a format is specified, always stick to it\n        if (me.format) {\n            me.explicitFormat = true;\n        }\n        // Otherwise adapt to gantt's format when it changes\n        else {\n            me.gantt.ion({\n                displayDateFormatChange({ format }) {\n                    if (!me.explicitFormat) {\n                        me.set('format', format);\n                    }\n                }\n            });\n        }\n    }\n    set format(format) {\n        this.explicitFormat = true;\n        this.set('format', format);\n    }\n    get format() {\n        return (this.explicitFormat && this.data.format) || this.gantt.displayDateFormat;\n    }\n    get defaultEditor() {\n        const result = super.defaultEditor;\n        result.project = this.gantt.project;\n        return result;\n    }\n}\nGanttDateColumn._$name = 'GanttDateColumn';", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport GanttDateColumn from '../../Gantt/column/GanttDateColumn.js';\n/**\n * @module Gantt/column/BaselineStartDateColumn\n */\n/**\n * A column that displays the task baseline start date.\n *\n * @extends Gantt/column/GanttDateColumn\n * @classtype baselinestartdate\n * @column\n */\nexport default class BaselineStartDateColumn extends GanttDateColumn {\n    static $name = 'BaselineStartDateColumn';\n    static type = 'baselinestartdate';\n    static defaults = {\n        text  : 'L{baselineStart}',\n        field : 'baselines[0].startDate'\n    };\n}\nColumnStore.registerColumnType(BaselineStartDateColumn);\nBaselineStartDateColumn._$name = 'BaselineStartDateColumn';", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport GanttDateColumn from '../../Gantt/column/GanttDateColumn.js';\nimport '../../SchedulerPro/widget/StartDateField.js';\n/**\n * @module Gantt/column/BaselineEndDateColumn\n */\n/**\n * A column that displays the task baseline finish date.\n *\n * @extends Gantt/column/GanttDateColumn\n * @classtype baselineenddate\n * @column\n */\nexport default class BaselineEndDateColumn extends GanttDateColumn {\n    static $name = 'BaselineEndDateColumn';\n    static type = 'baselineenddate';\n    static defaults = {\n        text  : 'L{baselineEnd}',\n        field : 'baselines[0].endDate'\n    };\n}\nColumnStore.registerColumnType(BaselineEndDateColumn);\nBaselineEndDateColumn._$name = 'BaselineEndDateColumn';", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport DurationColumn from '../../Scheduler/column/DurationColumn.js';\n/**\n * @module Gantt/column/BaselineDurationColumn\n */\n/**\n * A column that displays the task baseline duration.\n *\n * @extends Scheduler/column/DurationColumn\n * @classtype baselineduration\n * @column\n */\nexport default class BaselineDurationColumn extends DurationColumn {\n    static $name = 'BaselineDurationColumn';\n    static type = 'baselineduration';\n    static defaults = {\n        text  : 'L{baselineDuration}',\n        field : 'baselines[0].fullDuration'\n    };\n}\nColumnStore.registerColumnType(BaselineDurationColumn);\nBaselineDurationColumn._$name = 'BaselineDurationColumn';", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport DurationColumn from '../../Scheduler/column/DurationColumn.js';\n/**\n * @module Gantt/column/BaselineDurationVarianceColumn\n */\n/**\n * A column that displays the task Duration Variance. The duration variance field is \"0 days\" until the\n * task duration varies from the baseline duration. This field is calculated as:\n *\n * ```\n * Duration Variance = Duration - Baseline Duration\n * ```\n *\n * @extends Scheduler/column/DurationColumn\n * @classtype baselinedurationvariance\n * @column\n */\nexport default class BaselineDurationVarianceColumn extends DurationColumn {\n    static $name = 'BaselineDurationVarianceColumn';\n    static type = 'baselinedurationvariance';\n    static defaults = {\n        editor : false,\n        text   : 'L{durationVariance}',\n        field  : 'baselines[0].durationVariance'\n    };\n}\nColumnStore.registerColumnType(BaselineDurationVarianceColumn);\nBaselineDurationVarianceColumn._$name = 'BaselineDurationVarianceColumn';", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport DurationColumn from '../../Scheduler/column/DurationColumn.js';\n/**\n * @module Gantt/column/BaselineStartVarianceColumn\n */\n/**\n * A column that displays the task Start Variance. The start variance field is \"0 days\" until the\n * task start date varies from the baseline start date. This field is calculated as:\n *\n * ```\n * Start Variance = Start - Baseline Start\n * ```\n *\n * @extends Scheduler/column/DurationColumn\n * @classtype baselinestartvariance\n * @column\n */\nexport default class BaselineStartVarianceColumn extends DurationColumn {\n    static $name = 'BaselineStartVarianceColumn';\n    static type = 'baselinestartvariance';\n    static defaults = {\n        editor : false,\n        text   : 'L{startVariance}',\n        field  : 'baselines[0].startVariance'\n    };\n}\nColumnStore.registerColumnType(BaselineStartVarianceColumn);\nBaselineStartVarianceColumn._$name = 'BaselineStartVarianceColumn';", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport DurationColumn from '../../Scheduler/column/DurationColumn.js';\n/**\n * @module Gantt/column/BaselineEndVarianceColumn\n */\n/**\n * A column that displays the task End Variance. The end variance field is \"0 days\" until the\n * task start date varies from the baseline end date. This field is calculated as:\n *\n * ```\n * End Variance = End - Baseline End\n * ```\n *\n * @extends Scheduler/column/DurationColumn\n * @classtype baselineendvariance\n * @column\n */\nexport default class BaselineEndVarianceColumn extends DurationColumn {\n    static $name = 'BaselineEndVarianceColumn';\n    static type = 'baselineendvariance';\n    static defaults = {\n        editor : false,\n        text   : 'L{endVariance}',\n        field  : 'baselines[0].endVariance'\n    };\n}\nColumnStore.registerColumnType(BaselineEndVarianceColumn);\nBaselineEndVarianceColumn._$name = 'BaselineEndVarianceColumn';", "import Combo from '../../Core/widget/Combo.js';\nimport Store from '../../Core/data/Store.js';\n/**\n * @module Gantt/widget/CalendarPicker\n */\n/**\n * Combo box preconfigured with possible calendar values.\n *\n * This field can be used as an editor for the {@link Grid.column.Column Column}.\n * It is used as the default editor for the {@link Gantt.column.CalendarColumn CalendarColumn}.\n * Note: This picker doesn't support {@link Core/widget/Combo#config-multiSelect multiSelect}\n *\n * {@inlineexample Gantt/widget/CalendarPicker.js}\n *\n * @extends Core/widget/Combo\n * @classtype calendarpicker\n * @widget\n */\nexport default class CalendarPicker extends Combo {\n    static get $name() {\n        return 'CalendarPicker';\n    }\n    // Factoryable type name\n    static get type() {\n        return 'calendarpicker';\n    }\n    /**\n     * Replaces the field store records with the provided ones.\n     * @param {Gantt.model.CalendarModel[]} calendars New contents for the widget store.\n     */\n    refreshCalendars(calendars) {\n        this.store.data = calendars.map(c => {\n            return {\n                id   : c.id,\n                text : c.name\n            };\n        });\n    }\n    get store() {\n        if (!this._store) {\n            this.store = new Store();\n        }\n        return this._store;\n    }\n    set store(store) {\n        super.store = store;\n    }\n    get value() {\n        return super.value;\n    }\n    set value(value) {\n        if (value) {\n            if (value.isDefault && value.isDefault()) {\n                value = null;\n            }\n            else if (value.id) {\n                value = value.id;\n            }\n        }\n        super.value = value;\n    }\n}\n// Register this widget type with its Factory\nCalendarPicker.initClass();\nCalendarPicker._$name = 'CalendarPicker';", "import Column from '../../Grid/column/Column.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\nimport CalendarPicker from '../widget/CalendarPicker.js';\n/**\n * @module Gantt/column/CalendarColumn\n */\n/**\n * A column that displays (and allows user to update) the current {@link Gantt.model.CalendarModel calendar} of the task.\n *\n * Default editor is a {@link Gantt.widget.CalendarPicker CalendarPicker}.\n *\n * @extends Grid/column/Column\n * @classtype calendar\n * @column\n */\nexport default class CalendarColumn extends Column {\n    static get $name() {\n        return 'CalendarColumn';\n    }\n    static get type() {\n        return 'calendar';\n    }\n    static get isGanttColumn() {\n        return true;\n    }\n    static get defaults() {\n        return {\n            field  : 'calendar',\n            text   : 'L{Calendar}',\n            editor : {\n                type         : CalendarPicker.type,\n                clearable    : true,\n                allowInvalid : false\n            }\n        };\n    }\n    afterConstruct() {\n        super.afterConstruct();\n        const\n            me      = this,\n            project = me.grid.project;\n        // Store default calendar to filter out this value\n        me.defaultCalendar = project.defaultCalendar;\n        me.refreshCalendars();\n        project.calendarManagerStore.ion({\n            changePreCommit : me.refreshCalendars,\n            refresh         : me.refreshCalendars,\n            thisObj         : me\n        });\n    }\n    // region Events\n    refreshCalendars() {\n        if (this.editor) {\n            const project = this.grid.project;\n            this.editor.refreshCalendars(project.calendarManagerStore.allRecords);\n        }\n    }\n    // endregion\n    renderer({ value }) {\n        if (value !== this.defaultCalendar && value?.id != null) {\n            const model = this.grid.project.calendarManagerStore.getById(value.id);\n            return model?.name ?? '';\n        }\n        return '';\n    }\n    fromClipboardString({ string, record }) {\n        return this.grid.project.calendarManagerStore.find(rec => rec.name === string);\n    }\n}\nColumnStore.registerColumnType(CalendarColumn);\nCalendarColumn._$name = 'CalendarColumn';", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport GanttDateColumn from '../../Gantt/column/GanttDateColumn.js';\n/**\n * @module Gantt/column/ConstraintDateColumn\n */\n/**\n * A column showing the {@link Gantt/model/TaskModel#field-constraintDate date} of the constraint, applied to the task.\n * The type of the constraint can be displayed with the {@link Gantt/column/ConstraintTypeColumn}.\n *\n * Default editor is a {@link Core/widget/DateField}.\n *\n * If {@link #config-format} is omitted, Gantt's {@link Scheduler/view/mixin/TimelineViewPresets#config-displayDateFormat} will be used as a default value and\n * the format will be dynamically updated while zooming according to the {@link Scheduler/preset/ViewPreset#field-displayDateFormat} value specified for the ViewPreset being selected.\n *\n * @extends Gantt/column/GanttDateColumn\n * @classtype constraintdate\n * @column\n */\nexport default class ConstraintDateColumn extends GanttDateColumn {\n    static get $name() {\n        return 'ConstraintDateColumn';\n    }\n    static get type() {\n        return 'constraintdate';\n    }\n    static get defaults() {\n        return {\n            field : 'constraintDate',\n            text  : 'L{Constraint Date}',\n            width : 146\n        };\n    }\n}\nColumnStore.registerColumnType(ConstraintDateColumn);\nConstraintDateColumn._$name = 'ConstraintDateColumn';", "import Column from '../../Grid/column/Column.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\nimport ConstraintTypePicker from '../../SchedulerPro/widget/ConstraintTypePicker.js';\n/**\n * @module Gantt/column/ConstraintTypeColumn\n */\nconst directionMap = { Forward : 'assoonaspossible', Backward : 'aslateaspossible' };\n/**\n * {@link Gantt/model/TaskModel#field-constraintType Constraint type} column.\n *\n * Default editor is a {@link SchedulerPro/widget/ConstraintTypePicker}.\n *\n * The constraint can be one of:\n *\n * - Must start on [date]\n * - Must finish on [date]\n * - Start no earlier than [date]\n * - Start no later than [date]\n * - Finish no earlier than [date]\n * - Finish no later than [date]\n *\n * The date of the constraint can be specified with the {@link Gantt/column/ConstraintDateColumn}\n *\n * @extends Grid/column/Column\n * @classtype constrainttype\n * @column\n */\nexport default class ConstraintTypeColumn extends Column {\n    static get $name() {\n        return 'ConstraintTypeColumn';\n    }\n    static get type() {\n        return 'constrainttype';\n    }\n    static get isGanttColumn() {\n        return true;\n    }\n    static get defaults() {\n        return {\n            field  : 'constraintType',\n            text   : 'L{Constraint Type}',\n            width  : 146,\n            editor : {\n                type         : 'constrainttypepicker',\n                clearable    : true,\n                allowInvalid : false\n            },\n            filterable : {\n                filterField : {\n                    type : 'constrainttypepicker'\n                }\n            }\n        };\n    }\n    get editor() {\n        const editor = super.editor;\n        editor.includeAsapAlapAsConstraints = this.grid.project.includeAsapAlapAsConstraints;\n        return editor;\n    }\n    renderer({ record, value }) {\n        return ConstraintTypePicker.localize((this.grid.project.includeAsapAlapAsConstraints && directionMap[record.direction]) || value) || '';\n    }\n}\nColumnStore.registerColumnType(ConstraintTypeColumn);\nConstraintTypeColumn._$name = 'ConstraintTypeColumn';", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport GanttDateColumn from '../../Gantt/column/GanttDateColumn.js';\n/**\n * @module Gantt/column/DeadlineDateColumn\n */\n/**\n * A column showing the {@link Gantt/model/TaskModel#field-deadlineDate} field.\n *\n * Default editor is a {@link Core/widget/DateField}.\n *\n * If {@link #config-format} is omitted, Gantt's {@link Scheduler/view/mixin/TimelineViewPresets#config-displayDateFormat}\n * will be used as a default value and the format will be dynamically updated while zooming according to the\n * {@link Scheduler/preset/ViewPreset#field-displayDateFormat} value specified for the ViewPreset being selected.\n *\n * @extends Gantt/column/GanttDateColumn\n * @classtype deadlinedate\n * @column\n */\nexport default class DeadlineDateColumn extends GanttDateColumn {\n    static get $name() {\n        return 'DeadlineDateColumn';\n    }\n    static get type() {\n        return 'deadlinedate';\n    }\n    static get defaults() {\n        return {\n            field : 'deadlineDate',\n            text  : 'L{Deadline}',\n            width : 146\n        };\n    }\n}\nColumnStore.registerColumnType(DeadlineDateColumn);\nDeadlineDateColumn._$name = 'DeadlineDateColumn';", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport GanttDateColumn from './GanttDateColumn.js';\n/**\n * @module Gantt/column/EarlyEndDateColumn\n */\n/**\n * A column that displays the task's {@link Gantt.model.TaskModel#field-earlyEndDate early end date}.\n *\n * Default editor is a {@link Core.widget.DateField DateField}.\n *\n * If {@link #config-format} is omitted, Gantt's {@link Scheduler.view.mixin.TimelineViewPresets#config-displayDateFormat} will be used as a default value and\n * the format will be dynamically updated while zooming according to the {@link Scheduler.preset.ViewPreset#field-displayDateFormat} value specified for the ViewPreset being selected.\n *\n * @extends Gantt/column/GanttDateColumn\n * @classtype earlyenddate\n * @column\n */\nexport default class EarlyEndDateColumn extends GanttDateColumn {\n    static get $name() {\n        return 'EarlyEndDateColumn';\n    }\n    static get type() {\n        return 'earlyenddate';\n    }\n    static get defaults() {\n        return {\n            field : 'earlyEndDate',\n            text  : 'L{Early End}'\n        };\n    }\n}\nColumnStore.registerColumnType(EarlyEndDateColumn);\nEarlyEndDateColumn._$name = 'EarlyEndDateColumn';", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport GanttDateColumn from './GanttDateColumn.js';\n/**\n * @module Gantt/column/EarlyStartDateColumn\n */\n/**\n * A column that displays the task's {@link Gantt.model.TaskModel#field-earlyStartDate early start date}.\n *\n * Default editor is a {@link Core.widget.DateField DateField}.\n *\n * If {@link #config-format} is omitted, Gantt's {@link Scheduler.view.mixin.TimelineViewPresets#config-displayDateFormat} will be used as a default value and\n * the format will be dynamically updated while zooming according to the {@link Scheduler.preset.ViewPreset#field-displayDateFormat} value specified for the ViewPreset being selected.\n *\n * @extends Gantt/column/GanttDateColumn\n * @classtype earlystartdate\n * @column\n */\nexport default class EarlyStartDateColumn extends GanttDateColumn {\n    static get $name() {\n        return 'EarlyStartDateColumn';\n    }\n    static get type() {\n        return 'earlystartdate';\n    }\n    static get defaults() {\n        return {\n            field : 'earlyStartDate',\n            text  : 'L{Early Start}'\n        };\n    }\n}\nColumnStore.registerColumnType(EarlyStartDateColumn);\nEarlyStartDateColumn._$name = 'EarlyStartDateColumn';", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport DurationColumn from '../../Scheduler/column/DurationColumn.js';\nimport EffortField from '../../SchedulerPro/widget/EffortField.js';\n/**\n * @module Gantt/column/EffortColumn\n */\n/**\n * A column showing the task {@link Gantt.model.TaskModel#field-effort effort} and {@link Gantt.model.TaskModel#field-effortUnit units}.\n * The editor of this column understands the time units, so user can enter \"4d\" indicating 4 days effort, or \"4h\" indicating 4 hours, etc.\n * The numeric magnitude can be either an integer or a float value. Both \",\" and \".\" are valid decimal separators.\n * For example, you can enter \"4.5d\" indicating 4.5 days duration, or \"4,5h\" indicating 4.5 hours.\n *\n * Default editor is a {@link Core.widget.DurationField DurationField}.\n *\n * @extends Scheduler/column/DurationColumn\n * @classtype effort\n * @column\n */\nexport default class EffortColumn extends DurationColumn {\n    static get $name() {\n        return 'EffortColumn';\n    }\n    static get type() {\n        return 'effort';\n    }\n    //region Config\n    static get defaults() {\n        return {\n            field : 'fullEffort',\n            text  : 'L{Effort}'\n        };\n    }\n    //endregion\n    get defaultEditor() {\n        return {\n            type : EffortField.type,\n            name : this.field\n        };\n    }\n}\nColumnStore.registerColumnType(EffortColumn);\nEffortColumn._$name = 'EffortColumn';", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport GanttDateColumn from '../../Gantt/column/GanttDateColumn.js';\nimport '../../SchedulerPro/widget/EndDateField.js';\n/**\n * @module Gantt/column/EndDateColumn\n */\n/**\n * A column that displays (and allows user to update) the task's {@link Gantt.model.TaskModel#field-endDate end date}.\n *\n * Default editor is a {@link SchedulerPro.widget.EndDateField EndDateField}.\n *\n * If {@link #config-format} is omitted, Gantt's {@link Scheduler.view.mixin.TimelineViewPresets#config-displayDateFormat} will be used as a default value and\n * the format will be dynamically updated while zooming according to the {@link Scheduler.preset.ViewPreset#field-displayDateFormat} value specified for the ViewPreset being selected.\n *\n * @extends Gantt/column/GanttDateColumn\n * @classtype enddate\n * @column\n */\nexport default class EndDateColumn extends GanttDateColumn {\n    static get $name() {\n        return 'EndDateColumn';\n    }\n    static get type() {\n        return 'enddate';\n    }\n    static get defaults() {\n        return {\n            field : 'endDate',\n            text  : 'L{Finish}'\n        };\n    }\n    get defaultEditor() {\n        const editorCfg = super.defaultEditor;\n        editorCfg.type = 'enddate';\n        return editorCfg;\n    }\n}\nColumnStore.registerColumnType(EndDateColumn);\nEndDateColumn._$name = 'EndDateColumn';", "import CheckColumn from '../../Grid/column/CheckColumn.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\n/**\n * @module Gantt/column/IgnoreResourceCalendarColumn\n */\n/**\n * A column that displays (and allows user to change) whether the task ignores its assigned resource calendars\n * when scheduling or not ({@link Gantt.model.TaskModel#field-ignoreResourceCalendar} field).\n *\n * This column uses a {@link Core.widget.Checkbox checkbox} as its editor, and it is not intended to be changed.\n *\n * @extends Grid/column/CheckColumn\n * @classtype ignoreresourcecalendar\n * @column\n */\nexport default class IgnoreResourceCalendarColumn extends CheckColumn {\n    static $name = 'IgnoreResourceCalendarColumn';\n    static type = 'ignoreresourcecalendar';\n    static isGanttColumn = true;\n    static get defaults() {\n        return {\n            field : 'ignoreResourceCalendar',\n            text  : 'L{Ignore resource calendar}'\n        };\n    }\n}\nColumnStore.registerColumnType(IgnoreResourceCalendarColumn);\nIgnoreResourceCalendarColumn._$name = 'IgnoreResourceCalendarColumn';", "import CheckColumn from '../../Grid/column/CheckColumn.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\n/**\n * @module Gantt/column/InactiveColumn\n */\n/**\n * A column that displays (and allows user to update) the task's\n * {@link Gantt/model/TaskModel#field-inactive} field.\n *\n * This column uses a {@link Core/widget/Checkbox} as its editor, and it is not intended to be changed.\n *\n * @extends Grid/column/CheckColumn\n * @classtype inactive\n * @column\n */\nexport default class InactiveColumn extends CheckColumn {\n    static get $name() {\n        return 'InactiveColumn';\n    }\n    static get type() {\n        return 'inactive';\n    }\n    static get isGanttColumn() {\n        return true;\n    }\n    static get defaults() {\n        return {\n            field : 'inactive',\n            text  : 'L{Inactive}'\n        };\n    }\n}\nColumnStore.registerColumnType(InactiveColumn);\nInactiveColumn._$name = 'InactiveColumn';", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport GanttDateColumn from './GanttDateColumn.js';\n/**\n * @module Gantt/column/LateEndDateColumn\n */\n/**\n * A column that displays the task's {@link Gantt.model.TaskModel#field-lateEndDate late end date}.\n *\n * Default editor is a {@link Core.widget.DateField DateField}.\n *\n * If {@link #config-format} is omitted, Gantt's {@link Scheduler.view.mixin.TimelineViewPresets#config-displayDateFormat} will be used as a default value and\n * the format will be dynamically updated while zooming according to the {@link Scheduler.preset.ViewPreset#field-displayDateFormat} value specified for the ViewPreset being selected.\n *\n * @extends Gantt/column/GanttDateColumn\n * @classtype lateenddate\n * @column\n */\nexport default class LateEndDateColumn extends GanttDateColumn {\n    static get $name() {\n        return 'LateEndDateColumn';\n    }\n    static get type() {\n        return 'lateenddate';\n    }\n    static get defaults() {\n        return {\n            field : 'lateEndDate',\n            text  : 'L{Late End}'\n        };\n    }\n}\nColumnStore.registerColumnType(LateEndDateColumn);\nLateEndDateColumn._$name = 'LateEndDateColumn';", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport GanttDateColumn from './GanttDateColumn.js';\n/**\n * @module Gantt/column/LateStartDateColumn\n */\n/**\n * A column that displays the task's {@link Gantt.model.TaskModel#field-lateStartDate late start date}.\n *\n * Default editor is a {@link Core.widget.DateField DateField}.\n *\n * If {@link #config-format} is omitted, Gantt's {@link Scheduler.view.mixin.TimelineViewPresets#config-displayDateFormat} will be used as a default value and\n * the format will be dynamically updated while zooming according to the {@link Scheduler.preset.ViewPreset#field-displayDateFormat} value specified for the ViewPreset being selected.\n *\n * @extends Gantt/column/GanttDateColumn\n * @classtype latestartdate\n * @column\n */\nexport default class LateStartDateColumn extends GanttDateColumn {\n    static get $name() {\n        return 'LateStartDateColumn';\n    }\n    static get type() {\n        return 'latestartdate';\n    }\n    static get defaults() {\n        return {\n            field : 'lateStartDate',\n            text  : 'L{Late Start}'\n        };\n    }\n}\nColumnStore.registerColumnType(LateStartDateColumn);\nLateStartDateColumn._$name = 'LateStartDateColumn';", "import CheckColumn from '../../Grid/column/CheckColumn.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\n/**\n * @module Gantt/column/ManuallyScheduledColumn\n */\n/**\n * A column that displays (and allows user to update) the task's\n * {@link Gantt.model.TaskModel#field-manuallyScheduled} field.\n *\n * This column uses a {@link Core.widget.Checkbox checkbox} as its editor, and it is not intended to be changed.\n *\n * @extends Grid/column/CheckColumn\n * @classtype manuallyscheduled\n * @column\n */\nexport default class ManuallyScheduledColumn extends CheckColumn {\n    static get $name() {\n        return 'ManuallyScheduledColumn';\n    }\n    static get type() {\n        return 'manuallyscheduled';\n    }\n    static get isGanttColumn() {\n        return true;\n    }\n    static get defaults() {\n        return {\n            field : 'manuallyScheduled',\n            text  : 'L{Manually scheduled}'\n        };\n    }\n}\nColumnStore.registerColumnType(ManuallyScheduledColumn);\nManuallyScheduledColumn._$name = 'ManuallyScheduledColumn';", "import CheckColumn from '../../Grid/column/CheckColumn.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\n/**\n * @module Gantt/column/MilestoneColumn\n */\n/**\n * A Column that indicates whether a task is a milestone. This column uses a {@link Core.widget.Checkbox checkbox} as\n * its editor.\n *\n * @extends Grid/column/CheckColumn\n * @classtype milestone\n * @column\n */\nexport default class MilestoneColumn extends CheckColumn {\n    static suppressNoModelFieldWarning = true;\n    static get $name() {\n        return 'MilestoneColumn';\n    }\n    static get type() {\n        return 'milestone';\n    }\n    static get isGanttColumn() {\n        return true;\n    }\n    static get defaults() {\n        return {\n            field : 'milestone',\n            text  : 'L{Milestone}'\n        };\n    }\n}\nColumnStore.registerColumnType(MilestoneColumn);\nMilestoneColumn._$name = 'MilestoneColumn';", "import TreeColumn from '../../Grid/column/TreeColumn.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\n/**\n * @module Gantt/column/NameColumn\n */\n/**\n * A tree column showing (and allowing user to edit) the task's {@link Gantt.model.TaskModel#field-name name} field.\n *\n * Default editor is a {@link Core.widget.TextField TextField}.\n *\n * @extends Grid/column/TreeColumn\n * @classtype name\n * @column\n */\nexport default class NameColumn extends TreeColumn {\n    static get $name() {\n        return 'NameColumn';\n    }\n    static get type() {\n        return 'name';\n    }\n    static get isGanttColumn() {\n        return true;\n    }\n    //region Config\n    static get defaults() {\n        return {\n            width : 200,\n            field : 'name',\n            text  : 'L{Name}'\n        };\n    }\n    //endregion\n}\nColumnStore.registerColumnType(NameColumn);\nNameColumn._$name = 'NameColumn';", "import Column from '../../Grid/column/Column.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\nimport '../../Core/widget/TextAreaPickerField.js';\n/**\n * @module Gantt/column/NoteColumn\n */\n/**\n * A column which displays a task's {@link Gantt.model.TaskModel#field-note note} field.\n *\n * Default editor is a {@link Core.widget.TextAreaPickerField}.\n *\n * @extends Grid/column/Column\n * @classtype note\n * @column\n */\nexport default class NoteColumn extends Column {\n    static get $name() {\n        return 'NoteColumn';\n    }\n    static get type() {\n        return 'note';\n    }\n    static get isGanttColumn() {\n        return true;\n    }\n    static get defaults() {\n        return {\n            field  : 'note',\n            text   : 'L{Note}',\n            width  : 150,\n            editor : {\n                type : 'textareapickerfield'\n            }\n        };\n    }\n    renderer({ value }) {\n        return (value || '').trim();\n    }\n}\nColumnStore.registerColumnType(NoteColumn);\nNoteColumn._$name = 'NoteColumn';", "import NumberColumn from '../../Grid/column/NumberColumn.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\nimport '../../Core/widget/NumberField.js';\n/**\n * @module Gantt/column/PercentDoneColumn\n */\n/**\n * A column representing the {@link SchedulerPro.model.mixin.PercentDoneMixin#field-percentDone percentDone} field of the task.\n *\n * Default editor is a {@link Core.widget.NumberField NumberField}.\n *\n * @extends Grid/column/NumberColumn\n * @classtype percentdone\n * @column\n */\nexport default class PercentDoneColumn extends NumberColumn {\n    circleHeightPercentage = 0.75;\n    static get $name() {\n        return 'PercentDoneColumn';\n    }\n    static get type() {\n        return 'percentdone';\n    }\n    static get isGanttColumn() {\n        return true;\n    }\n    //region Config\n    static get fields() {\n        return [\n            /**\n             * Set to `true` to render a circular progress bar to visualize the task progress\n             * @config {Boolean} showCircle\n             */\n            'showCircle'\n        ];\n    }\n    static get defaults() {\n        return {\n            field : 'percentDone',\n            text  : 'L{% Done}',\n            unit  : '%',\n            step  : 1,\n            min   : 0,\n            max   : 100,\n            width : 90\n        };\n    }\n    //endregion\n    construct(config) {\n        super.construct(...arguments);\n        if (this.showCircle) {\n            this.htmlEncode = false;\n        }\n    }\n    defaultRenderer({ record, isExport, value }) {\n        value = record.getFormattedPercentDone(value);\n        if (isExport) {\n            return value;\n        }\n        if (this.showCircle) {\n            return {\n                tabIndex        : 0,\n                role            : 'progressbar',\n                'aria-valuemin' : 0,\n                'aria-valuemax' : 100,\n                'aria-valuenow' : value,\n                'aria-label'    : `${record.name} ${value}${this.L('% Done')}`,\n                className       : {\n                    'b-percentdone-circle' : 1,\n                    'b-full'               : value === 100,\n                    'b-empty'              : value === 0\n                },\n                style : {\n                    // Math.round to work around Chrome bug: https://bugs.chromium.org/p/chromium/issues/detail?id=1468916\n                    height                      : Math.round(this.circleHeightPercentage * this.grid.rowHeight) + 'px',\n                    width                       : Math.round(this.circleHeightPercentage * this.grid.rowHeight) + 'px',\n                    '--gantt-percentdone-angle' : `${value / 100}turn`\n                },\n                dataset : {\n                    value\n                }\n            };\n        }\n        return value + this.unit;\n    }\n    // formatValue(value) {\n    //     if (value <= 99) {\n    //         return Math.round(value);\n    //     }\n    //     else {\n    //         return Math.floor(value);\n    //     }\n    // }\n}\nColumnStore.registerColumnType(PercentDoneColumn);\nPercentDoneColumn._$name = 'PercentDoneColumn';", "import Combo from '../../Core/widget/Combo.js';\nimport List from '../../Core/widget/List.js';\nimport Collection from '../../Core/util/Collection.js';\nimport TextField from '../../Core/widget/TextField.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport LocaleManager from '../../Core/localization/LocaleManager.js';\nimport Objects from '../../Core/helper/util/Objects.js';\nimport Dependencies from '../../Scheduler/feature/Dependencies.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\n/**\n * @module Gantt/widget/DependencyField\n */\n// Enables toggling of link type for each side\nconst\n    toggleTypes = {\n        from : [2, 3, 0, 1],\n        to   : [1, 0, 3, 2]\n    },\n    fromTo = {\n        from : 1,\n        to   : 1\n    },\n    buildDependencySuffixRe = () => new RegExp(`(${dependencyTypes.join('|')})?((?:[+-])\\\\d+[a-z]*)?`, 'i');\n// For parsing dependency strings and converting string to type.\n// dependencyTypes may be localized in the Gantt class domain\n// in which case the Regex is generated from the four local values.\nlet dependencyTypes = [\n        'SS',\n        'SF',\n        'FS',\n        'FF'\n    ],\n    dependencySuffixRe = buildDependencySuffixRe();\n/**\n * Chooses dependencies, connector sides and lag time for dependencies of a Task.\n *\n * This field can be used as an editor for a {@link Grid/column/Column}.\n * It is used as the default editor for the {@link Gantt/column/DependencyColumn}.\n *\n * The contextual task is the `record` property of this field's {@link Core/widget/Widget#property-owner}.\n *\n * {@inlineexample Gantt/widget/DependencyField.js}\n *\n * @extends Core/widget/Combo\n * @classtype dependencyfield\n * @inputfield\n */\nexport default class DependencyField extends Combo {\n    //region Config\n    static $name = 'DependencyField';\n    // Factoryable type name\n    static type = 'dependencyfield';\n    static configurable = {\n        listCls : 'b-predecessor-list',\n        displayField : 'name',\n        valueField : 'name',\n        // Filtering down to zero using the captive filter field in the picker\n        // should not make the overall field invalid.\n        validateFilter : false,\n        // The filtering field is in the picker.\n        // Don't hide it when the input length drops below minChars\n        minChars : 0,\n        // The main input's text is not the filter string, so it must not be cleared on picker hide\n        clearTextOnPickerHide : false,\n        picker : {\n            floating            : true,\n            scrollAction        : 'realign',\n            itemsFocusable      : false,\n            activateOnMouseover : true,\n            align               : {\n                align    : 't0-b0',\n                axisLock : true\n            },\n            maxHeight  : 324,\n            minHeight  : 161,\n            scrollable : {\n                overflowY : true\n            },\n            autoShow     : false,\n            focusOnHover : false\n        },\n        /**\n         * Delimiter between dependency ids in the field\n         * @config {String}\n         * @default\n         */\n        delimiter : ';',\n        /**\n         * The dependency store\n         * @config {Gantt.data.DependencyStore}\n         * @default\n         */\n        dependencyStore : null,\n        /**\n         * The other task's relationship with this field's contextual task.\n         * This will be `'from'` if we are editing predecessors, and `'to'` if\n         * we are editing successors.\n         * @config {'from'|'to'}\n         */\n        otherSide : null,\n        /**\n         * This field's contextual task's relationship with the other task.\n         * This will be `'to'` if we are editing predecessors, and `'from'` if\n         * we are editing successors.\n         * @config {'from'|'to'}\n         */\n        ourSide : null,\n        multiSelect : true,\n        chipView : null,\n        validateOnInput : false,\n        /**\n         * A task field (id, wbsCode, sequenceNumber etc) that will be used when displaying and editing linked\n         * tasks. Defaults to {@link Gantt/view/GanttBase#config-dependencyIdField Gantt#dependencyIdField}\n         * @config {String}\n         */\n        dependencyIdField : null,\n        /**\n         * The task whose dependencies are being edited (used to filter out invalid options)\n         * @config {String}\n         * @internal\n         */\n        eventRecord : null,\n        /**\n         * The sorters defining how to sort tasks in the drop down list, defaults to sorting by `name` field\n         * ascending. See {@link Core.data.mixin.StoreSort} for more information.\n         * @config {Sorter[]|String[]}\n         */\n        sorters : [\n            {\n                field : 'name'\n            }\n        ]\n    };\n    //endregion\n    construct(config) {\n        const\n            me                     = this,\n            { ourSide, otherSide } = config;\n        me.dependencies = new Collection({\n            extraKeys : otherSide\n        });\n        me.startCollection = new Collection({\n            extraKeys : otherSide\n        });\n        super.construct(config);\n        me.delimiterRegEx = new RegExp(`\\\\s*${me.delimiter}\\\\s*`);\n        const localizeDependencies = () => {\n            dependencyTypes = me.L('L{DependencyType.short}');\n            dependencySuffixRe = buildDependencySuffixRe();\n            me.syncInputFieldValue();\n        };\n        // Update when changing locale\n        LocaleManager.ion({ locale : localizeDependencies, thisObj : me });\n        localizeDependencies();\n    }\n    internalOnInput() {\n        this.clearError(undefined, true);\n        if (this.isValid) {\n            // Avoid combo filtering. That's done from our FilterField\n            TextField.prototype.internalOnInput.call(this);\n        }\n    }\n    get invalidValueError() {\n        return 'L{invalidDependencyFormat}';\n    }\n    onInternalKeyDown(keyEvent) {\n        const { key } = keyEvent;\n        // Don't pass Enter down, that selects when ComboBox passes it down\n        // to its list. We want default action on Enter.\n        // Our list has its own, built-in filter field which provides key events.\n        if (key === 'Enter') {\n            this.syncInvalid();\n        }\n        else {\n            super.onInternalKeyDown?.(keyEvent);\n        }\n        if (this.pickerVisible && key === 'ArrowDown') {\n            this.filterField.focus();\n        }\n    }\n    onTriggerClick() {\n        if (this.pickerVisible) {\n            super.onTriggerClick(...arguments);\n        }\n        else {\n            this.doFilter(this.filterInput ? this.filterInput.value : null);\n        }\n    }\n    changeStore(store) {\n        // Filter the store to hide the field's Task\n        store = store.chain(record => !this.eventRecord || (record.id !== this.eventRecord.id), null, {\n            excludeCollapsedRecords : false,\n            sorters                 : this.sorters\n        });\n        return super.changeStore(store);\n    }\n    changePicker(picker, oldPicker) {\n        const\n            me          = this,\n            filterField = me.filterField || (me.filterField = new TextField({\n                cls         : 'b-dependency-list-filter',\n                clearable   : true,\n                placeholder : 'Filter',\n                triggers    : {\n                    filter : {\n                        cls   : 'b-icon b-icon-filter',\n                        align : 'start'\n                    }\n                },\n                internalListeners : {\n                    input({ event }) {\n                        me.filterOnInput(event);\n                    },\n                    clear({ event }) {\n                        Object.defineProperty(event, 'target', {\n                            configurable : true,\n                            value        : filterFieldInput\n                        });\n                        me.filterOnInput.now(event);\n                    }\n                }\n            })),\n            filterFieldInput = me.filterInput = filterField.input,\n            result = DependencyField.reconfigure(oldPicker, picker ? Objects.merge({\n                owner      : me,\n                store      : me.store,\n                cls        : `b-dependency-list ${me.listCls}`,\n                itemTpl    : me.listItemTpl,\n                forElement : me[me.pickerAlignElement],\n                align      : {\n                    anchor    : me.overlayAnchor,\n                    target    : me[me.pickerAlignElement],\n                    // Reasonable minimal height to fit few combo items below the combo.\n                    // When height is not enough, list will appear on top. That works for windows higher than 280px,\n                    // worrying about shorter windows sounds overkill.\n                    // We cannot use relative measures here, each combo list item is ~40px high\n                    minHeight : me.inlinePicker ? null : Math.min(3, me.store.count) * 40\n                },\n                navigator : {\n                    keyEventTarget : filterFieldInput,\n                    processEvent   : e => {\n                        if (e.key === 'Escape') {\n                            me.hidePicker();\n                        }\n                        else {\n                            return e;\n                        }\n                    }\n                },\n                onItem         : me.onPredecessorClick.bind(me),\n                getItemClasses : function(task) {\n                    const\n                        result     = List.prototype.getItemClasses.call(this, task),\n                        dependency = me.dependencies.getBy(me.otherSide + 'Event', task),\n                        cls        = dependency ? ` b-selected b-${dependency.getConnectorString(1).toLowerCase()}` : '';\n                    return result + cls;\n                }\n            }, picker) : null, me);\n        // May have been set to null (destroyed)\n        if (result) {\n            // Avoid pulling scrollable in too early to not trigger ResizeObserver in FF\n            result.ion({\n                show() {\n                    // The scrolling viewport is obscured by the filterField\n                    Object.defineProperty(result.scrollable, 'viewport', {\n                        get() {\n                            return Rectangle.client(this.element).deflate(filterField.height, 0, 0, 0);\n                        }\n                    });\n                },\n                once    : true,\n                thisObj : me\n            });\n            filterField.owner = result;\n            filterField.render(result.contentElement);\n        }\n        // If it has been destroyed, destroy orphaned filterField\n        else {\n            me.destroyProperties('filterField');\n        }\n        return result;\n    }\n    updateEventRecord() {\n        // Ensure this field's Task is filtered out.\n        // See our changeStore which owns the chainedFilterFn.\n        this.store.fillFromMaster();\n    }\n    onPickerShow({ source : picker }) {\n        const\n            me                 = this,\n            { element }        = me.filterField,\n            { contentElement } = picker;\n        picker.minWidth = me[me.pickerAlignElement].offsetWidth;\n        if (contentElement.firstChild !== element) {\n            contentElement.insertBefore(element, contentElement.firstChild);\n        }\n        super.onPickerShow(...arguments);\n    }\n    listItemTpl(task) {\n        const\n            taskName              = StringHelper.encodeHtml(task.name),\n            { dependencyIdField } = this.owner,\n            idField               = (dependencyIdField && dependencyIdField !== task.constructor.idField) ? dependencyIdField : task.constructor.idField,\n            // Don't output generated ids in the list\n            taskIdentifier        = !task.isPhantom ? String(task[idField]) : '';\n        return `<div class=\"b-predecessor-item-text\">${taskName} ${taskIdentifier.length ? `(${taskIdentifier})` : ''}</div>\n            <div class=\"b-sch-box b-from\" data-side=\"from\"></div>\n            <div class=\"b-sch-box b-to\" data-side=\"to\"></div>`;\n    }\n    get isValid() {\n        return Boolean(!this.task || this.parseDependencies(this.input.value)) && super.isValid;\n    }\n    set value(dependencies) {\n        const\n            me                     = this,\n            dependenciesCollection = me.dependencies;\n        // Convert strings, eg: '1fs-2h;2ss+1d' to Dependency records\n        if (typeof dependencies === 'string') {\n            me.input.value = dependencies;\n            dependencies = me.parseDependencies(dependencies);\n            if (!dependencies) {\n                me.syncInvalid();\n                return;\n            }\n            dependencies = dependencies.map(dep => new me.dependencyStore.modelClass(dep));\n        }\n        else {\n            me.startCollection.clear();\n            if (dependencies !== null) {\n                me.startCollection.values = dependencies;\n            }\n        }\n        dependenciesCollection.clear();\n        // Allow clearing the value by passing null (happens when clicking clear button)\n        if (dependencies !== null) {\n            dependenciesCollection.values = dependencies;\n        }\n        // If there has been a change, update the textual value.\n        if (!me.inputting) {\n            me.syncInputFieldValue();\n        }\n    }\n    get value() {\n        return this.dependencies.values;\n    }\n    get inputValue() {\n        const\n            me        = this,\n            { value } = me;\n        return value == null ? '' : me.constructor.dependenciesToString(value, me.otherSide, me.delimiter, me.dependencyIdField);\n    }\n    onPredecessorClick({ source : list, item, record : task, event }) {\n        const\n            me               = this,\n            { dependencies } = me,\n            box              = event.target.closest('.b-sch-box'),\n            side             = box?.dataset.side;\n        let dependency = dependencies.getBy(me.otherSide + 'Event', task);\n        // Prevent regular selection continuing after this click handler.\n        item.dataset.noselect = true;\n        // As we bypass List's selection, we trigger a manual change event to allow any prior error message to be cleared\n        me.trigger('change', { value : me.value, event, userAction : true });\n        // Click text to remove predecessor completely\n        if (dependency && !box) {\n            dependencies.remove(dependency);\n        }\n        else {\n            // Clicking a connect side box toggles that\n            if (dependency) {\n                // We must create a clone because the record is \"live\".\n                // Updates to it go back to the UI.\n                // Also we cannot really modify record here. When editing will finish editor will compare `toJSON`\n                // output of models, which refers to the `model.data` field. And if we modify record instance, change\n                // won't go to the data object, it will be kept in the field though. Only way to sync model.data.type and\n                // model.type here is to instantiate model with correct data already\n                const\n                    { id, type } = dependency;\n                // Using private argument here to avoid copying record current values, we're only interested in data object\n                dependency = dependency.copy({ id, type : toggleTypes[side][type] }, { skipFieldIdentifiers : true });\n                // HACK: Above code results having serialized values in `${me.otherSide}Event` field\n                // and we expect to find task instance when doing code like:\n                //     dependencies.getBy(me.otherSide + 'Event', task)\n                // So let's put the task instance there manually.\n                dependency[`${me.otherSide}Event`] = task;\n                dependency[`${me.ourSide}Event`] = me.task;\n                // Replace the old predecessor link with the new, modified one.\n                // Collection will *replace* in-place due to ID matching.\n                dependencies.add(dependency);\n            }\n            // Create a new dependency to/from the clicked task\n            else {\n                dependencies.add(me.dependencyStore.createRecord({\n                    [`${me.otherSide}Event`] : task,\n                    [`${me.ourSide}Event`]   : me.task\n                }, true));\n            }\n        }\n        me.syncInputFieldValue();\n        list.refresh();\n    }\n    static dependenciesToString(dependencies, side, delimiter = ';', eventIdField = 'id') {\n        const eventField = `${side}Event`;\n        const getEventId = dependency => {\n            const event = dependency[eventField];\n            return event?.isModel ? event[eventIdField] : (event || '');\n        };\n        if (dependencies?.length) {\n            const result = dependencies.sort((a, b) => getEventId(a) - getEventId(b)).map(dependency =>\n                `${getEventId(dependency)}${Dependencies.getLocalizedDependencyType(dependency.getConnectorString())}${dependency.getLag()}`\n            );\n            return result.join(delimiter);\n        }\n        return '';\n    }\n    // static * dependenciesToStringGenerator(dependencies, otherSide, delimiter = ';') {\n    //     const result = [];\n    //\n    //     if (dependencies && dependencies.length) {\n    //         for (const dependency of dependencies) {\n    //             const\n    //                 otherSideEvent = yield dependency.$[otherSide + 'Event'],\n    //                 otherSideEventId = otherSideEvent ? otherSideEvent.id : (otherSideEvent || '');\n    //\n    //             result.push(`${otherSideEventId}${yield dependency.getConnectorString()}${dependency.getLag()}`);\n    //         }\n    //     }\n    //\n    //     return result.join(delimiter);\n    // }\n    get task() {\n        return this.owner?.record;\n    }\n    parseDependencies(value) {\n        const  me = this;\n        return me.constructor.parseDependencies({\n            value,\n            taskStore         : me.store,\n            task              : me.task,\n            dependencyStore   : me.dependencyStore,\n            delimiterRegEx    : me.delimiterRegEx,\n            dependencyIdField : me.dependencyIdField,\n            ourSide           : me.ourSide,\n            otherSide         : me.otherSide\n        });\n    }\n    static parseDependencies({\n        value,\n        taskStore,\n        task,\n        dependencyStore,\n        delimiterRegEx,\n        dependencyIdField,\n        ourSide,\n        otherSide\n    }) {\n        const\n            dependencies    = value.split(delimiterRegEx),\n            DependencyModel = dependencyStore.modelClass,\n            result          = [];\n        for (let i = 0; i < dependencies.length; i++) {\n            const dependencyText = dependencies[i];\n            if (dependencyText) {\n                let idLen      = dependencyText.length + 1,\n                    linkedTask = null,\n                    linkedTaskId;\n                for (; idLen && !linkedTask; idLen--) {\n                    linkedTaskId = dependencyText.substr(0, idLen);\n                    linkedTask = taskStore.find(task => String(task[dependencyIdField]) === linkedTaskId, true);\n                }\n                if (!linkedTask) {\n                    return null;\n                }\n                // Chop off connector and lag specification, i.e. the \"SS-1h\" part\n                const\n                    remainder = dependencyText.substr(idLen + 1),\n                    // Start the structure of the dependency we are describing\n                    dependency = {\n                        // This will be \"from\" if we're editing predecessors\n                        // and \"to\" if we're editing successors\n                        [`${otherSide}Event`] : linkedTask,\n                        // This will be \"to\" if we're editing predecessors\n                        // and \"from\" if we're editing successors\n                        [`${ourSide}Event`] : task,\n                        type : DependencyModel.Type.EndToStart\n                    };\n                // There's a trailing edge/lag spec\n                if (remainder.length) {\n                    const edgeAndLag = dependencySuffixRe.exec(remainder);\n                    if (edgeAndLag && (edgeAndLag[1] || edgeAndLag[2])) {\n                        // The SS/FF bit\n                        if (edgeAndLag[1]) {\n                            dependency.type = dependencyTypes.indexOf(edgeAndLag[1].toUpperCase());\n                        }\n                        // The -1h bit\n                        if (edgeAndLag[2]) {\n                            const\n                                parsedLag = DateHelper.parseDuration(edgeAndLag[2], true, task.durationUnit);\n                            dependency.lag = parsedLag.magnitude;\n                            dependency.lagUnit = parsedLag.unit;\n                        }\n                    }\n                    else {\n                        return null;\n                    }\n                }\n                result.push(dependency);\n            }\n        }\n        return result;\n    }\n    get needsInputSync() {\n        return super.needsInputSync || (!this.isValid && this.inputValue !== this.input.value);\n    }\n    doDestroy() {\n        this.dependencies.destroy();\n        this.startCollection.destroy();\n        super.doDestroy();\n    }\n};\n// Register this widget type with its Factory\nDependencyField.initClass();\nDependencyField._$name = 'DependencyField';", "import Column from '../../Grid/column/Column.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\nimport DependencyField from '../widget/DependencyField.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\n/**\n * @module Gantt/column/DependencyColumn\n */\nconst\n    hasNoProject = v => !v.project,\n    depIsValid   = v => v;\n/**\n * A column which displays, in textual form, the dependencies which either link to the\n * contextual task from other, preceding tasks, or dependencies which link the\n * contextual task to successor tasks.\n *\n * Default editor is a {@link Gantt/widget/DependencyField}.\n *\n * The {@link Grid/column/Column#config-field} MUST be either `predecessors` or `successors` in order\n * for this column to know what kind of dependency it is showing.\n *\n * By default predecessors and successors have a task ID as a value. But it's configurable and any field may be used to display there (as example: wbsCode or sequenceNumber)\n * using {@link #config-dependencyIdField}\n *\n * @classtype dependency\n * @extends Grid/column/Column\n * @column\n */\nexport default class DependencyColumn extends Delayable(Column) {\n    static get $name() {\n        return 'DependencyColumn';\n    }\n    static get type() {\n        return 'dependency';\n    }\n    static get fields() {\n        return [\n            /**\n             * Delimiter used for displayed value and editor\n             * @config {String} delimiter\n             */\n            { name : 'delimiter', defaultValue : ';' },\n            /**\n             * A task field (id, wbsCode, sequenceNumber etc) that will be used when displaying and editing linked tasks. Defaults to {@link Gantt/view/GanttBase#config-dependencyIdField}\n             * @config {String} dependencyIdField\n             */\n            { name : 'dependencyIdField', defaultValue : null }\n        ];\n    }\n    static get defaults() {\n        return {\n            htmlEncode : false,\n            width      : 120,\n            renderer({ record, grid }) {\n                const dependencyIdField = this.dependencyIdField || grid.dependencyIdField;\n                return DependencyField.dependenciesToString(record[this.field], this.field === 'predecessors' ? 'from' : 'to', this.delimiter, dependencyIdField);\n            },\n            filterable({ value, record : taskRecord, column }) {\n                const dependencyIdField = column.dependencyIdField || column.grid.dependencyIdField;\n                value = value.toLowerCase();\n                return taskRecord[`${column.field === 'predecessors' ? 'predecessorTasks' : 'successorTasks'}`].some(linkedTask => {\n                    return linkedTask && value.includes(linkedTask[dependencyIdField]?.toString().toLowerCase());\n                });\n            }\n        };\n    }\n    afterConstruct() {\n        super.afterConstruct();\n    }\n    getFilterableValue(record) {\n        return this.renderer({ record, grid : this.grid });\n    }\n    async finalizeCellEdit({ grid, record, inputField, value, oldValue, editorContext }) {\n        inputField.clearError();\n        if (record && value) {\n            const\n                toValidate      = value.filter(hasNoProject),\n                project         = grid.dependencyStore.getProject(),\n                oldDependencies = record[this.field];\n            await project.commitAsync();\n            if (project.isDestroyed) return;\n            const\n                results  = await Promise.all(\n                    toValidate.map(dependency => project.isValidDependencyModel(dependency, oldDependencies))\n                ),\n                valid = results.every(depIsValid);\n            if (!valid) {\n                return editorContext.column.L('L{Invalid dependency}');\n            }\n            return true;\n        }\n    }\n    get defaultEditor() {\n        const\n            me = this,\n            { grid } = me,\n            isPredecessor = me.field === 'predecessors';\n        return {\n            type              : 'dependencyfield',\n            grid,\n            name              : me.field,\n            delimiter         : me.delimiter,\n            dependencyIdField : me.dependencyIdField || grid.dependencyIdField,\n            ourSide           : isPredecessor ? 'to' : 'from',\n            otherSide         : isPredecessor ? 'from' : 'to',\n            store             : grid.eventStore || grid.taskStore,\n            dependencyStore   : grid.dependencyStore\n        };\n    }\n    toClipboardString({ record, grid }) {\n        if (record?.[this.field]) {\n            const dependencyIdField = this.dependencyIdField || grid.dependencyIdField;\n            return DependencyField.dependenciesToString(record[this.field], this.field === 'predecessors' ? 'from' : 'to', this.delimiter, dependencyIdField);\n        }\n    }\n    fromClipboardString({ string, record }) {\n        const { editor } = this;\n        if (editor) {\n            return DependencyField.parseDependencies({\n                value             : string,\n                taskStore         : this.grid.taskStore,\n                task              : record,\n                dependencyStore   : this.grid.dependencyStore,\n                delimiterRegEx    : /\\s*,\\s*/,\n                ourSide           : editor.ourSide,\n                otherSide         : editor.otherSide,\n                dependencyIdField : editor.dependencyIdField\n            }) || [];\n        }\n    }\n}\nColumnStore.registerColumnType(DependencyColumn);\nDependencyColumn._$name = 'DependencyColumn';", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport DependencyColumn from './DependencyColumn.js';\n/**\n * @module Gantt/column/PredecessorColumn\n */\n/**\n * A column which displays, in textual form, the dependencies which link from tasks\n * upon which the contextual task depends.\n *\n * This type of column is editable by default. Default editor is a {@link Gantt/widget/DependencyField}.\n *\n * This column will be ignored if using {@link Grid/feature/CellCopyPaste} to paste or {@link Grid/feature/FillHandle}\n * to fill values.\n *\n * @classtype predecessor\n * @extends Gantt/column/DependencyColumn\n * @column\n */\nexport default class PredecessorColumn extends DependencyColumn {\n    static get $name() {\n        return 'PredecessorColumn';\n    }\n    static get type() {\n        return 'predecessor';\n    }\n    static get isGanttColumn() {\n        return true;\n    }\n    static get defaults() {\n        return {\n            text  : 'L{Predecessors}',\n            field : 'predecessors'\n        };\n    }\n    canFillValue = () => false;\n}\nColumnStore.registerColumnType(PredecessorColumn);\nPredecessorColumn._$name = 'PredecessorColumn';", "import AssignmentStore from '../../SchedulerPro/data/AssignmentStore.js';\n/**\n * @module Gantt/data/AssignmentsManipulationStore\n */\n/**\n * Special store class for _single_ task/event assignments manipulation, used by {@link Gantt/widget/AssignmentGrid}\n *\n * Contains a collection of {@link Gantt/model/AssignmentModel} records.\n *\n * @extends Scheduler/data/AssignmentStore\n * @internal\n */\nexport default class AssignmentsManipulationStore extends AssignmentStore {\n    //region Config\n    static get defaultConfig() {\n        return {\n            storage : {\n                extraKeys : ['resource']\n            },\n            callOnFunctions : true,\n            /**\n             * Event model to manipulate assignments of, the event should be part of a project.\n             *\n             * @config {Gantt.model.TaskModel}\n             */\n            projectEvent : null,\n            /**\n             * Flag indicating whether assigned resources should be placed (floated) before unassigned ones.\n             *\n             * @config {Boolean}\n             * @private\n             */\n            floatAssignedResources : true,\n            /**\n             * Flag indicating whether assigned resources should be floated live\n             *\n             * @config {Boolean}\n             * @private\n             */\n            liveFloatAssignedResources : false\n        };\n    }\n    afterConfigure() {\n        const me = this;\n        super.afterConfigure();\n        me.addSorter({\n            fn : me.defaultSort.bind(me)\n        });\n    }\n    //endregion\n    get projectEvent() {\n        return this._projectEvent;\n    }\n    set projectEvent(projectEvent) {\n        const me = this;\n        // If the event is the same, but some underlying data has changed, we must still update\n        if (\n            projectEvent != me._projectEvent ||\n            (projectEvent && (projectEvent.generation !== me._projectEventGeneration)) ||\n            (projectEvent?.getProject()?.assignmentStore.storage.generation !== me._assignmentStoreGeneration)\n        ) {\n            me._projectEvent = projectEvent;\n            me._projectEventGeneration = projectEvent?.generation;\n            me._assignmentStoreGeneration = projectEvent?.getProject()?.assignmentStore.storage.generation;\n            if (projectEvent) {\n                me.fillFromMaster();\n                me.sort();\n            }\n            else {\n                me.removeAll();\n            }\n        }\n    }\n    get floatAssignedResources() {\n        return this._floatAssignedResources;\n    }\n    set floatAssignedResources(value) {\n        const me = this;\n        if (value !== me.floatAssignedResources) {\n            me._floatAssignedResources = value;\n            me.sort();\n        }\n    }\n    /**\n     * Fills this store from master {@link Gantt/data/ResourceStore resource} store and {@link Gantt/data/AssignmentStore assignment} store.\n     * @internal\n     */\n    fillFromMaster() {\n        const\n            me               = this,\n            { projectEvent } = me;\n        if (projectEvent) {\n            const\n                {\n                    assignmentStore,\n                    resourceStore\n                }                  = projectEvent,\n                resourceDataSource = assignmentStore.modelClass.getFieldDefinition('resource').dataSource,\n                eventDataSource    = assignmentStore.modelClass.getFieldDefinition('event').dataSource,\n                storeData          = [];\n            // For each excludes group header records - ResourceStore might be grouped externally\n            resourceStore.forEach(\n                resource => {\n                    const\n                        existingAssignment = assignmentStore.getAssignmentForEventAndResource(projectEvent, resource),\n                        data               = Object.assign(\n                            { units : 0 },\n                            existingAssignment?.data\n                        );\n                    delete data.id;\n                    delete data.eventId;\n                    delete data.resourceId;\n                    // handle data mapping cases\n                    delete data[resourceDataSource];\n                    delete data[eventDataSource];\n                    // apply resource and event after cleaning data mapping\n                    Object.assign(data, { resource, event : projectEvent });\n                    storeData.push(data);\n                },\n                this,\n                {\n                    includeFilteredOutRecords    : true,\n                    includeCollapsedGroupRecords : true\n                }\n            );\n            me.data = storeData;\n        }\n    }\n    toValue() {\n        return this.query(a => a.units > 0);\n    }\n    toValueString() {\n        return this.toValue().join(', ');\n    }\n    defaultSort(lhs, rhs) {\n        let result = 0;\n        if (this.floatAssignedResources) {\n            if (!rhs.units && lhs.units) {\n                result = -1;\n            }\n            else if (!lhs.units && rhs.units) {\n                result = 1;\n            }\n            else {\n                result = lhs.resourceName.localeCompare(rhs.resourceName);\n            }\n        }\n        else {\n            result = lhs.resourceName.localeCompare(rhs.resourceName);\n        }\n        return result;\n    }\n    onUpdate({ changes }) {\n        const me = this;\n        if (!me.isConfiguring) {\n            if (Object.hasOwnProperty.call(changes, 'event')) {\n                if (me.floatAssignedResources && me.liveFloatAssignedResources) {\n                    me.sort();\n                }\n            }\n        }\n    }\n}\nAssignmentsManipulationStore._$name = 'AssignmentsManipulationStore';", "import SchedulerProAssignmentModel from '../../SchedulerPro/model/AssignmentModel.js';\nimport { isSerializableEqual } from '../../Engine/chrono/ModelFieldAtom.js';\n/**\n * @module Gantt/model/AssignmentModel\n */\n/**\n * This class represent a single assignment of a {@link Gantt.model.ResourceModel resource} to a\n * {@link Gantt.model.TaskModel task} in your gantt chart.\n *\n * @extends SchedulerPro/model/AssignmentModel\n *\n * @uninherit Core/data/mixin/TreeNode\n *\n * @typings SchedulerPro.model.AssignmentModel -> SchedulerPro.model.SchedulerProAssignmentModel\n *\n */\nexport default class AssignmentModel extends SchedulerProAssignmentModel {\n    //region Fields\n    static get fields() {\n        /**\n         * The numeric, percent-like value, indicating what is the \"contribution level\"\n         * of the resource availability to the task.\n         * Number 100, means that the assigned resource spends 100% of its working time to the task.\n         * Number 50 means that the resource spends only half of its available time for the assigned task.\n         * @field {Number} units\n         */\n        return [\n            /**\n             * Id for event to assign. Note that after load it will be populated with the actual event.\n             * @field {Gantt.model.TaskModel} event\n             * @accepts {String|Number|Gantt.model.TaskModel}\n             */\n            {\n                name      : 'event',\n                persist   : true,\n                serialize : record => record?.id,\n                isEqual   : isSerializableEqual\n            },\n            /**\n             * Id for resource to assign to. Note that after load it will be populated with the actual resource.\n             * @field {Gantt.model.ResourceModel} resource\n             * @accepts {String|Number|Gantt.model.ResourceModel}\n             */\n            {\n                name      : 'resource',\n                persist   : true,\n                serialize : record => record?.id,\n                isEqual   : isSerializableEqual\n            },\n            /**\n             * Hidden\n             * @field {String|Number} eventId\n             * @hide\n             */\n            'eventId',\n            /**\n             * Hidden\n             * @field {String|Number} resourceId\n             * @hide\n             */\n            'resourceId'\n        ];\n    }\n    //endregion\n}\nAssignmentModel._$name = 'AssignmentModel';", "import LocaleHelper from '../../Core/localization/LocaleHelper.js';\nimport '../../SchedulerPro/localization/En.js';\nconst locale = {\n    localeName : 'En',\n    localeDesc : 'English (US)',\n    localeCode : 'en-US',\n    Object : {\n        Save : 'Save'\n    },\n    IgnoreResourceCalendarColumn : {\n        'Ignore resource calendar' : 'Ignore resource calendar'\n    },\n    InactiveColumn : {\n        Inactive : 'Inactive'\n    },\n    AddNewColumn : {\n        'New Column' : 'New Column'\n    },\n    BaselineStartDateColumn : {\n        baselineStart : 'Baseline Start'\n    },\n    BaselineEndDateColumn : {\n        baselineEnd : 'Baseline Finish'\n    },\n    BaselineDurationColumn : {\n        baselineDuration : 'Baseline Duration'\n    },\n    BaselineStartVarianceColumn : {\n        startVariance : 'Start Variance'\n    },\n    BaselineEndVarianceColumn : {\n        endVariance : 'Finish Variance'\n    },\n    BaselineDurationVarianceColumn : {\n        durationVariance : 'Duration Variance'\n    },\n    CalendarColumn : {\n        Calendar : 'Calendar'\n    },\n    EarlyStartDateColumn : {\n        'Early Start' : 'Early Start'\n    },\n    EarlyEndDateColumn : {\n        'Early End' : 'Early End'\n    },\n    LateStartDateColumn : {\n        'Late Start' : 'Late Start'\n    },\n    LateEndDateColumn : {\n        'Late End' : 'Late End'\n    },\n    TotalSlackColumn : {\n        'Total Slack' : 'Total Slack'\n    },\n    ConstraintDateColumn : {\n        'Constraint Date' : 'Constraint Date'\n    },\n    ConstraintTypeColumn : {\n        'Constraint Type' : 'Constraint Type'\n    },\n    DeadlineDateColumn : {\n        Deadline : 'Deadline'\n    },\n    DependencyColumn : {\n        'Invalid dependency' : 'Invalid dependency'\n    },\n    DurationColumn : {\n        Duration : 'Duration'\n    },\n    EffortColumn : {\n        Effort : 'Effort'\n    },\n    EndDateColumn : {\n        Finish : 'Finish'\n    },\n    EventModeColumn : {\n        'Event mode' : 'Event mode',\n        Manual       : 'Manual',\n        Auto         : 'Auto'\n    },\n    ManuallyScheduledColumn : {\n        'Manually scheduled' : 'Manually scheduled'\n    },\n    MilestoneColumn : {\n        Milestone : 'Milestone'\n    },\n    NameColumn : {\n        Name : 'Name'\n    },\n    NoteColumn : {\n        Note : 'Note'\n    },\n    PercentDoneColumn : {\n        '% Done' : '% Done'\n    },\n    PredecessorColumn : {\n        Predecessors : 'Predecessors'\n    },\n    ResourceAssignmentColumn : {\n        'Assigned Resources' : 'Assigned Resources',\n        'more resources'     : 'more resources'\n    },\n    RollupColumn : {\n        Rollup : 'Rollup'\n    },\n    SchedulingModeColumn : {\n        'Scheduling Mode' : 'Scheduling Mode'\n    },\n    SchedulingDirectionColumn : {\n        schedulingDirection : 'Scheduling direction',\n        inheritedFrom       : 'Inherited from',\n        enforcedBy          : 'Enforced by'\n    },\n    SequenceColumn : {\n        Sequence : 'Sequence'\n    },\n    ShowInTimelineColumn : {\n        'Show in timeline' : 'Show in timeline'\n    },\n    StartDateColumn : {\n        Start : 'Start'\n    },\n    SuccessorColumn : {\n        Successors : 'Successors'\n    },\n    TaskCopyPaste : {\n        copyTask  : 'Copy',\n        cutTask   : 'Cut',\n        pasteTask : 'Paste'\n    },\n    WBSColumn : {\n        WBS      : 'WBS',\n        renumber : 'Renumber'\n    },\n    DependencyField : {\n        invalidDependencyFormat : 'Invalid dependency format'\n    },\n    ProjectLines : {\n        'Project Start' : 'Project start',\n        'Project End'   : 'Project end'\n    },\n    TaskTooltip : {\n        Start    : 'Start',\n        End      : 'End',\n        Duration : 'Duration',\n        Complete : 'Complete'\n    },\n    AssignmentGrid : {\n        Name     : 'Resource name',\n        Units    : 'Units',\n        unitsTpl : ({ value }) => value ? value + '%' : ''\n    },\n    Gantt : {\n        Edit                   : 'Edit',\n        Indent                 : 'Indent',\n        Outdent                : 'Outdent',\n        'Convert to milestone' : 'Convert to milestone',\n        Add                    : 'Add...',\n        'New task'             : 'New task',\n        'New milestone'        : 'New milestone',\n        'Task above'           : 'Task above',\n        'Task below'           : 'Task below',\n        'Delete task'          : 'Delete',\n        Milestone              : 'Milestone',\n        'Sub-task'             : 'Subtask',\n        Successor              : 'Successor',\n        Predecessor            : 'Predecessor',\n        changeRejected         : 'Scheduling engine rejected the changes',\n        linkTasks              : 'Add dependencies',\n        unlinkTasks            : 'Remove dependencies',\n        color                  : 'Color'\n    },\n    EventSegments : {\n        splitTask : 'Split task'\n    },\n    Indicators : {\n        earlyDates   : 'Early start/end',\n        lateDates    : 'Late start/end',\n        Start        : 'Start',\n        End          : 'End',\n        deadlineDate : 'Deadline'\n    },\n    Versions : {\n        indented     : 'Indented',\n        outdented    : 'Outdented',\n        cut          : 'Cut',\n        pasted       : 'Pasted',\n        deletedTasks : 'Deleted tasks'\n    }\n};\nexport default LocaleHelper.publishLocale(locale);\n", "import ResourceInfoColumn from '../../Scheduler/column/ResourceInfoColumn.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\n/**\n * @module Gantt/column/ResourceAssignmentGridResourceColumn.js\n */\n/**\n * Column showing the resource name / avatar inside the AssignmentGrid\n *\n * @internal\n * @extends Scheduler/column/ResourceInfoColumn\n * @classtype resourceassignment\n * @column\n */\nexport default class ResourceAssignmentGridResourceColumn extends ResourceInfoColumn {\n    static get $name() {\n        return 'ResourceAssignmentGridResourceColumn';\n    }\n    static get type() {\n        return 'assignmentResource';\n    }\n    static get defaults() {\n        return {\n            showEventCount     : false,\n            cls                : 'b-assignmentgrid-resource-column',\n            field              : 'resourceName',\n            flex               : 1,\n            editor             : null,\n            useNameAsImageName : false,\n            filterable         : {\n                filterField : {\n                    placeholder : 'L{AssignmentGrid.Name}',\n                    triggers    : {\n                        filter : {\n                            align : 'start',\n                            cls   : 'b-icon b-icon-filter'\n                        }\n                    }\n                }\n            }\n        };\n    }\n    defaultRenderer({ grid, record, cellElement, value, isExport }) {\n        if (!record.isSpecialRow) {\n            record = record.resource;\n        }\n        return super.defaultRenderer({ grid, record, cellElement, value, isExport });\n    }\n}\nColumnStore.registerColumnType(ResourceAssignmentGridResourceColumn);\nResourceAssignmentGridResourceColumn._$name = 'ResourceAssignmentGridResourceColumn';", "import Grid from '../../Grid/view/Grid.js';\nimport NumberColumn from '../../Grid/column/NumberColumn.js';\nimport Objects from '../../Core/helper/util/Objects.js';\nimport AssignmentManipulationStore from '../data/AssignmentsManipulationStore.js';\nimport AssignmentModel from '../model/AssignmentModel.js';\nimport '../../Core/widget/Checkbox.js';\nimport '../../Grid/feature/FilterBar.js';\nimport '../../Gantt/localization/En.js';\nimport '../../Gantt/column/ResourceAssignmentGridResourceColumn.js';\n/**\n * @module Gantt/widget/AssignmentGrid\n */\n/**\n * This grid visualizes and lets users edit assignments of an {@link #config-projectEvent event}. Used by the\n * {@link Gantt.widget.AssignmentField}. This grid shows one column showing the resource name, and one showing\n * the units assigned. You can add additional columns by providing a {@link Grid.view.Grid#config-columns} array in your grid config.\n *\n * {@inlineexample Gantt/widget/AssignmentGrid.js}\n *\n * @extends Grid/view/Grid\n * @classtype assignmentgrid\n * @widget\n */\nexport default class AssignmentGrid extends Grid {\n    static get $name() {\n        return 'AssignmentGrid';\n    }\n    // Factoryable type name\n    static get type() {\n        return 'assignmentgrid';\n    }\n    //region Config\n    static get configurable() {\n        return {\n            // Required by ResourceInfo column\n            resourceImageExtension : '.jpg',\n            minHeight              : 200,\n            /**\n             * A {@link Grid.column.Column} config object for the resource column. You can pass a `renderer` which\n             * gives you access to the `resource` record.\n             *\n             * @config {ResourceAssignmentColumnConfig}\n             */\n            resourceColumn : {\n                type : 'assignmentResource'\n            },\n            /**\n             * A config object for the units column\n             *\n             * @config {NumberColumnConfig}\n             */\n            unitsColumn : {\n                field       : 'units',\n                type        : NumberColumn.type,\n                text        : 'L{Units}',\n                localeClass : this,\n                width       : 70,\n                min         : 0,\n                max         : 100,\n                step        : 10,\n                unit        : '%',\n                renderer    : ({ value }) => this.L('L{unitsTpl}', { value : Math.round(value) }),\n                filterable  : false\n            }\n        };\n    }\n    static get defaultConfig() {\n        return {\n            selectionMode : {\n                checkboxOnly : true,\n                multiSelect  : true,\n                showCheckAll : true\n            },\n            // If enabled blocks header checkbox click event\n            features : {\n                group       : false,\n                filterBar   : true,\n                contextMenu : false\n            },\n            disableGridRowModelWarning : true,\n            /**\n             * Event model to manipulate assignments of, the task should be part of a task store.\n             * Either task or {@link Grid/view/Grid#config-store store} should be given.\n             *\n             * @config {Gantt.model.TaskModel}\n             */\n            projectEvent : null\n        };\n    }\n    //endregion\n    construct() {\n        super.construct(...arguments);\n        this.ion({\n            selectionChange : ({ selected, deselected }) => {\n                selected.forEach(assignment => assignment.units = assignment.units || assignment.getFieldDefinition('units').defaultValue);\n                deselected.forEach(assignment => {\n                    if (this.store.includes(assignment)) {\n                        assignment.units = 0;\n                    }\n                });\n            }\n        });\n    }\n    get projectEvent() {\n        const me = this,\n            store = me.store;\n        let projectEvent = me._projectEvent;\n        if (store && (projectEvent !== store.projectEvent)) {\n            projectEvent = me._projectEvent = store.projectEvent;\n        }\n        return projectEvent;\n    }\n    set projectEvent(projectEvent) {\n        const me = this;\n        me._projectEvent = projectEvent;\n        me.store.projectEvent = projectEvent;\n        if (projectEvent) {\n            me.selectedRecords = me.store.query(as => projectEvent.assignments.find(existingAs => existingAs.resource === as.resource));\n        }\n    }\n    get store() {\n        return super.store;\n    }\n    set store(store) {\n        const\n            me       = this,\n            oldStore = me.store;\n        if (store && oldStore !== store) {\n            if (!(store instanceof AssignmentManipulationStore)) {\n                store = AssignmentManipulationStore.new({\n                    modelClass   : me._projectEvent?.assignmentStore.modelClass || AssignmentModel,\n                    projectEvent : me._projectEvent\n                }, store);\n            }\n            super.store = store;\n            me.storeDetacher?.();\n            me.storeDetacher = store.ion({ update : 'onAssignmentUpdate', thisObj : me });\n        }\n    }\n    set columns(columns) {\n        if (columns) {\n            // Clone is needed to flatten the properties from the prototype chain, the Model class wants data\n            // in a flat simple object\n            columns.unshift(Objects.clone(this.resourceColumn), Objects.clone(this.unitsColumn));\n        }\n        super.columns = columns;\n    }\n    get columns() {\n        return super.columns;\n    }\n    onAssignmentUpdate({ record, changes }) {\n        const { units } = changes;\n        // Sync selection while cell editing\n        if (units) {\n            if (!units.value) {\n                this.deselectRow(record);\n            }\n            else if (units.oldValue === 0) {\n                this.selectRow({\n                    record,\n                    scrollIntoView : false,\n                    addToSelection : this.selectionMode.multiSelect // keep selection only if multiSelect\n                });\n            }\n        }\n    }\n}\n// Register this widget type with its Factory\nAssignmentGrid.initClass();\nAssignmentGrid._$name = 'AssignmentGrid';", "import AssignmentGrid from './AssignmentGrid.js';\nimport '../../Core/widget/Container.js';\nimport '../../Core/widget/Button.js';\n/**\n * @module Gantt/widget/AssignmentPicker\n */\n/**\n * Class for assignment field dropdown, wraps {@link Gantt/widget/AssignmentGrid} within a frame and adds two buttons: Save and Cancel\n * @private\n */\nexport default class AssignmentPicker extends AssignmentGrid {\n    static get $name() {\n        return 'AssignmentPicker';\n    }\n    // Factoryable type name\n    static get type() {\n        return 'assignmentpicker';\n    }\n    static get defaultConfig() {\n        return {\n            trapFocus : true,\n            height    : '20em',\n            minWidth  : '25em',\n            bbar      : [\n                {\n                    type        : 'button',\n                    text        : this.L('L{Object.Save}'),\n                    localeClass : this,\n                    ref         : 'saveBtn',\n                    color       : 'b-green'\n                },\n                {\n                    type        : 'button',\n                    text        : this.L('L{Object.Cancel}'),\n                    localeClass : this,\n                    ref         : 'cancelBtn',\n                    color       : 'b-gray'\n                }\n            ],\n            /**\n             * The Event to load resource assignments for.\n             * Either an Event or {@link #config-store store} should be given.\n             *\n             * @config {Gantt.model.TaskModel}\n             */\n            projectEvent : null,\n            /**\n             * Store for the picker.\n             * Either store or {@link #config-projectEvent projectEvent} should be given\n             *\n             * @config {Gantt.data.AssignmentsManipulationStore}\n             */\n            store : null\n        };\n    }\n    configure(config) {\n        config.selectedRecordCollection = config.assignments;\n        super.configure(config);\n    }\n    show() {\n        this.originalSelected = this.selectedRecords.map(a => a.copy());\n        return super.show(...arguments);\n    }\n    afterConfigure() {\n        const me = this;\n        super.afterConfigure();\n        me.bbar.widgetMap.saveBtn?.ion({ click : 'onSaveClick', thisObj : me });\n        me.bbar.widgetMap.cancelBtn?.ion({ click : 'onCancelClick', thisObj : me });\n    }\n    //region Event handlers\n    onSaveClick() {\n        this.hide();\n    }\n    onCancelClick() {\n        this.hide();\n    }\n    //endregion\n}\n// Register this widget type with its Factory\nAssignmentPicker.initClass();\nAssignmentPicker._$name = 'AssignmentPicker';", "import Combo from '../../Core/widget/Combo.js';\nimport PickerField from '../../Core/widget/PickerField.js';\nimport AssignmentPicker from './AssignmentPicker.js';\nimport AssignmentsManipulationStore from '../data/AssignmentsManipulationStore.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\n/**\n * @module Gantt/widget/AssignmentField\n */\n/**\n * A special field widget used to edit single event assignments.\n *\n * This field is used as the default editor for the {@link Gantt.column.ResourceAssignmentColumn}\n *\n * {@inlineexample Gantt/widget/AssignmentField.js}\n *\n * ## Customizing the drop-down grid\n *\n * The field is a {@link Core/widget/Combo} which has a {@link Gantt/widget/AssignmentGrid} as its picker. Here's a\n * snippet showing how to configure the grid:\n *\n * ```javascript\n * const gantt = new Gantt({\n *     appendTo                : 'container',\n *     resourceImageFolderPath : '../_shared/images/users/',\n *     columns                 : [\n *         { type : 'name', field : 'name', text : 'Name', width : 250 },\n *         {\n *             type        : 'resourceassignment',\n *             width       : 250,\n *             showAvatars : true,\n *             editor      : {\n *                 type   : 'assignmentfield',\n *                 // The picker config is applied to the Grid\n *                 picker : {\n *                     height   : 350,\n *                     width    : 450,\n *                     features : {\n *                         filterBar  : true,\n *                         group      : 'resource.city',\n *                         headerMenu : false,\n *                         cellMenu   : false\n *                     },\n *                     // The extra columns are concatenated onto the base column set.\n *                     columns : [{\n *                         text       : 'Calendar',\n *                         // Read a nested property (name) from the resource calendar\n *                         field      : 'resource.calendar.name',\n *                         filterable : false,\n *                         editor     : false,\n *                         width      : 85\n *                     }]\n *                 }\n *             }\n *         }\n *     ],\n *\n *     project\n *  });\n * ```\n *\n * @extends Core/widget/Combo\n * @classtype assignmentfield\n * @demo Gantt/resourceassignment\n * @inputfield\n */\nexport default class AssignmentField extends Combo {\n    static get $name() {\n        return 'AssignmentField';\n    }\n    // Factoryable type name\n    static get type() {\n        return 'assignmentfield';\n    }\n    //region Config\n    static get configurable() {\n        return {\n            // Let the editor know that the selectable records are also editable\n            editingRecords : true,\n            chipView : {\n                cls : 'b-assignment-chipview',\n                itemTpl(assignment) {\n                    return StringHelper.xss`${assignment.resourceName} ${Math.round(assignment.units)}%`;\n                },\n                scrollable : {\n                    overflowX : 'hidden-scroll'\n                }\n            },\n            triggers : {\n                expand : {\n                    cls     : 'b-icon-down',\n                    handler : 'onTriggerClick'\n                }\n            },\n            multiSelect : true,\n            clearable   : false,\n            editable    : false,\n            value       : null,\n            /**\n             * A config object used to configure the {@link Gantt.widget.AssignmentGrid assignment grid}\n             * used to select resources to assign.\n             *\n             * Any `columns` provided are concatenated onto the default column set.\n             * @config {AssignmentGridConfig|Gantt.widget.AssignmentGrid} picker\n             */\n            picker : {\n                type         : AssignmentPicker.type,\n                floating     : true,\n                scrollAction : 'realign'\n            },\n            /**\n             * Width of picker, defaults to this field's {@link Core/widget/PickerField#config-pickerAlignElement} width\n             *\n             * @config {Number}\n             */\n            pickerWidth : null,\n            /**\n             * Event to load resource assignments for.\n             * Either event or {@link #config-store store} should be given.\n             *\n             * @config {Gantt.model.TaskModel}\n             */\n            projectEvent : null,\n            /**\n             * Assignment manipulation store to use, or it's configuration object.\n             * Either store or {@link #config-projectEvent projectEvent} should be given\n             *\n             * @config {Core.data.Store|StoreConfig}\n             */\n            store : {},\n            /**\n             * A template function used to generate the tooltip contents when hovering this field. Defaults to\n             * showing \"[Name] [%]\"\n             * ```javascript\n             * const gantt = new Gantt({\n             *   columns                 : [\n             *         { type : 'name', field : 'name', text : 'Name', width : 250 },\n             *         {\n             *             type        : 'resourceassignment',\n             *             editor      : {\n             *                 type   : 'assignmentfield',\n             *                 tooltipTemplate({ taskRecord, assignmentRecords }) {\n             *                     return assignmentRecords.map(as => as.resource?.name).join(', ');\n             *                 }\n             *             }\n             *         }\n             *     ]\n             * });\n             * ```\n             * @config {Function} tooltipTemplate\n             * @param {Object} data Tooltip data\n             * @param {Gantt.model.TaskModel} data.taskRecord The taskRecord the assignments are associated with\n             * @param {Gantt.model.AssignmentModel} data.assignmentRecords The field value represented as assignment\n             * records\n             * @returns {String|DomConfig|DomConfig[]}\n             */\n            tooltipTemplate() {\n                return StringHelper.encodeHtml(this.store.toValueString());\n            }\n        };\n    }\n    //endregion\n    // Any change must offer the save/cancel UI since THAT is what actually makes the edit\n    onChipClose(records) {\n        this.showPicker();\n        this.picker.deselectRows(records);\n    }\n    syncInputFieldValue() {\n        super.syncInputFieldValue();\n        const { store } = this;\n        if (store && this.tooltipTemplate) {\n            this.tooltip = this.tooltipTemplate({ taskRecord : store.projectEvent, assignmentRecords : store.toValue() });\n        }\n    }\n    //region Picker\n    // Override. This field does not have a primary filter, so\n    // down arrow/trigger click should just show the picker.\n    onTriggerClick(event) {\n        if (this.pickerVisible) {\n            this.hidePicker();\n        }\n        else {\n            PickerField.prototype.showPicker.call(this, event && ('key' in event));\n        }\n    }\n    focusPicker() {\n        this.picker.focus();\n    }\n    changePicker(picker, oldPicker) {\n        const me = this;\n        return super.changePicker(picker && ObjectHelper.assign({\n            projectEvent      : me.projectEvent,\n            store             : me.store,\n            readOnly          : me.readOnly,\n            resourceImagePath : me.resourceImageFolderPath,\n            assignments       : me.valueCollection,\n            onCancelClick() {\n                me.value = this.originalSelected;\n                this.hide();\n            },\n            align : {\n                anchor : me.overlayAnchor,\n                target : me[me.pickerAlignElement]\n            }\n        }, picker) || null, oldPicker);\n    }\n    //endregion\n    //region Value\n    changeProjectEvent(projectEvent) {\n        // NOTE: This kind of thing would normally be handled in updateProjectEvent, however, the setter of the\n        //  AssignmentManipulationStore pulls double duty and resyncs some fields, even if presented with the same\n        //  projectEvent.\n        const { picker, store }      = this;\n        this._projectEvent           = projectEvent;\n        if (store) {\n            store.projectEvent = projectEvent;\n        }\n        if (picker) {\n            picker.projectEvent = projectEvent;\n        }\n        return projectEvent;\n    }\n    changeStore(store) {\n        if (store && !(store instanceof AssignmentsManipulationStore)) {\n            store = new AssignmentsManipulationStore(store);\n        }\n        return store;\n    }\n    updateStore(store) {\n        const me = this;\n        me.detachListeners('storeMutation');\n        if (store instanceof AssignmentsManipulationStore) {\n            const { projectEvent } = store;\n            if (projectEvent) {\n                me.projectEvent = projectEvent;\n            }\n            else {\n                // This is to not do the store::fillFromMaster() call, otherwise editor will be unhappy\n                store.projectEvent = me.projectEvent;\n            }\n        }\n        store.ion({\n            name    : 'storeMutation',\n            change  : 'syncInputFieldValue',\n            thisObj : me\n        });\n    }\n    // This return an array of special Assignment records created\n    // by the picker / grid\n    get value() {\n        return super.value;\n    }\n    set value(assignments) {\n        // either real (=== currently assigned resources)\n        // Or to-be assigned resources coming from the assignment grid\n        // Map over to the special assignment records created by the AssignmentGrid store\n        assignments = assignments?.map(as => {\n            const\n                ourStoreVersion = this.store.find(a => a.resource === as.resource, true);\n            ourStoreVersion?.copyData(as);\n            return ourStoreVersion;\n        });\n        super.value = assignments;\n    }\n    hasChanged(initialValue, value) {\n        return !ObjectHelper.isEqual(initialValue, value);\n    }\n    //endregion\n    // Override. Picker is completely self-contained. Prevent any\n    // field action on its key events.\n    onPickerKeyDown(event) {\n        const grid = this.picker;\n        // Move \"down\" into the grid body\n        if (event.key === 'ArrowDown' && event.target.compareDocumentPosition(grid.bodyContainer) === document.DOCUMENT_POSITION_FOLLOWING) {\n            grid.element.focus();\n        }\n        else if (event.key === 'Escape' && !grid.focusedCell.isActionable) {\n            this.hidePicker();\n        }\n    }\n    // Caching a copy of each record since the grid picker of this class will allow editing\n    // A change to the records will constitute a change of this field\n    cacheCurrentValue(records) {\n        if (Array.isArray(records)) {\n            return this._value = records.map(rec => rec.copy(rec.id));\n        }\n        return super.cacheCurrentValue(records);\n    }\n}\n// Register this widget type with its Factory\nAssignmentField.initClass();\nAssignmentField._$name = 'AssignmentField';", "import Column from '../../Grid/column/Column.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\nimport AssignmentField from '../widget/AssignmentField.js';\nimport AssignmentModel from '../model/AssignmentModel.js';\nimport ChipView from '../../Core/widget/ChipView.js';\nimport '../../Core/widget/NumberField.js';\nimport AvatarRendering from '../../Core/widget/util/AvatarRendering.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport DragHelper from '../../Core/helper/DragHelper.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\n/**\n * @module Gantt/column/ResourceAssignmentColumn\n */\nconst resourceNameRegExp = a => a.resourceName.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n/**\n * Column allowing resource manipulation (assignment/unassignment/units changing) on a task. In the column cells,\n * assignments are either shown as badges or avatars. To show avatars, set {@link #config-showAvatars} to `true`. When\n * showing avatars there are two options for how to specify image paths:\n *\n * * You may provide a {@link Gantt.view.Gantt#config-resourceImageFolderPath} on your Gantt panel pointing to where\n *   resource images are located. Set the resource image filename in the `image` field of the resource data.\n * * And/or you may provide an `imageUrl` on your record, which then will take precedence when showing images.\n *\n * If a resource has no name, or its image cannot be loaded, the resource initials are rendered. If the resource has\n * an {@link Scheduler/model/mixin/ResourceModelMixin#field-eventColor} specified, it will be used as the background\n * color of the initials.\n *\n * Default editor is a {@link Gantt.widget.AssignmentField}.\n *\n * ## Customizing displayed elements\n *\n * If {@link #config-showAvatars} is false, column will render resource name and utilization wrapped in a\n * small element called _a chip_. Content of the chip can be customized. For example, if you don't want to see percent\n * value, or want to display different resource name, you can specify an {@link #config-itemTpl} config. Please keep in\n * mind that when you start editing the cell, chip will be rendered by the default editor. If you want chips to be\n * consistent, you need to customize the editor too.\n *\n * ```javascript\n * new Gantt({\n *     columns: [\n *         {\n *             type     : 'resourceassignment',\n *             itemTpl  : (assignment) => assignment.resourceName,\n *             editor   : {\n *                 chipView : {\n *                     itemTpl : assignment => assignment.resourceName\n *                 }\n *             }\n *         }\n *     ]\n * });\n * ```\n *\n * {@inlineexample Gantt/column/ResourceAssignment.js}\n *\n * @extends Grid/column/Column\n * @classtype resourceassignment\n * @column\n */\nexport default class ResourceAssignmentColumn extends Column {\n    internalCellCls = 'b-resourceassignment-cell';\n    static get $name() {\n        return 'ResourceAssignmentColumn';\n    }\n    static get type() {\n        return 'resourceassignment';\n    }\n    static get isGanttColumn() {\n        return true;\n    }\n    static get fields() {\n        return [\n            /**\n             * True to show a resource avatar for every assignment. Note that you also have to provide a\n             * {@link Gantt.view.Gantt#config-resourceImageFolderPath} for where to load images from. And/or you may\n             * provide an `imageUrl` on your record, which then will take precedence when showing images.\n             * @config {Boolean} showAvatars\n             * @category Common\n             */\n            'showAvatars',\n            'sideMargin',\n            /**\n             * A function which produces the content to put in the resource assignment cell.\n             * May be overridden in subclasses, or injected into the column\n             * to customize the Chip content.\n             *\n             * Defaults to returning `${assignment.resourceName} ${assignment.units}%`\n             *\n             * @config {Function} itemTpl\n             * @param {Gantt.model.AssignmentModel} assignment The assignment\n             * @param {Number} index The index - zero based.\n             * @returns {DomConfig|String|null}\n             * @category Rendering\n             */\n            {\n                name         : 'itemTpl',\n                defaultValue : (assignment, index, htmlEncode = true) => {\n                    return htmlEncode ? StringHelper.encodeHtml(assignment.toString()) : assignment.toString();\n                }\n            },\n            /**\n             * A function which receives data about the resource and returns a html string to be displayed in the\n             * tooltip.\n             *\n             * ```javascript\n             * const gantt = new Gantt({\n             *     columns : [\n             *          {\n             *              type          : 'resourceassignment',\n             *              showAvatars : true,\n             *              avatarTooltipTemplate({ resourceRecord }) {\n             *                  return `<b>${resourceRecord.name}</b>`;\n             *              }\n             *          }\n             *     ]\n             * });\n             * ```\n             *\n             * This function will be called with an object containing the fields below:\n             * @config {Function} avatarTooltipTemplate\n             * @param {Object} data\n             * @param {Gantt.model.TaskModel} data.taskRecord Hovered task\n             * @param {Gantt.model.ResourceModel} data.resourceRecord Hovered resource\n             * @param {Gantt.model.AssignmentModel} data.assignmentRecord Hovered assignment\n             * @param {Core.widget.Tooltip} data.tooltip The tooltip instance\n             * @param {Number} data.overflowCount Number of overflowing resources, only valid for last shown resource\n             * @param {Gantt.model.AssignmentModel[]} data.overflowAssignments Array of overflowing assignments, only\n             * valid for last shown resource\n             * @returns {DomConfig|String|null}\n             */\n            'avatarTooltipTemplate',\n            /**\n             * When `true`, the names of all overflowing resources are shown in the tooltip. When `false`, the number of\n             * overflowing resources is displayed instead.\n             * Only valid for last shown resource, if there are overflowing resources.\n             * @config {Boolean} showAllNames\n             * @default true\n             * @category Common\n             */\n            { name : 'showAllNames', type : 'boolean', defaultValue : true },\n            /**\n             * True to allow drag-drop of resource avatars between rows. Dropping a resource outside the\n             * resource assignment cells will unassign the resource.\n             * @config {Boolean} enableResourceDragging\n             * @category Common\n             */\n            { name : 'enableResourceDragging' },\n            /**\n             * A config object passed to the avatar {@link Core.widget.Tooltip}\n             *\n             * ```javascript\n             * const gantt = new Gantt({\n             *     columns : [\n             *          {\n             *              type          : 'resourceassignment',\n             *              showAvatars : true,\n             *              avatarTooltip : {\n             *                  // Allow moving mouse over the tooltip\n             *                  allowOver : true\n             *              }\n             *          }\n             *     ]\n             * });\n             * ```\n             *\n             * This function will be called with an object containing the fields below:\n             *\n             * @config {TooltipConfig} avatarTooltip\n             */\n            'avatarTooltip',\n            { name : 'avatarMaxSize', defaultValue : 50 }\n        ];\n    }\n    static get defaults() {\n        return {\n            field         : 'assignments',\n            instantUpdate : false,\n            text          : 'L{Assigned Resources}',\n            width         : 250,\n            showAvatars   : false,\n            sideMargin    : 20,\n            sortable(task1, task2) {\n                const\n                    a1 = task1.assignments.join(''),\n                    a2 = task2.assignments.join('');\n                if (a1 === a2) {\n                    return 0;\n                }\n                return a1 < a2 ? -1 : 1;\n            },\n            filterable({ value, record }) {\n                // We're being passed an array of Assignments\n                if (Array.isArray(value)) {\n                    // Shortcut if we're matching no assignments.\n                    if (!value.length) {\n                        return Boolean(!record.assignments.length);\n                    }\n                    // Create a multi resource name Regexp, eg /Macy|Lee|George/.\n                    value = value.map(resourceNameRegExp).join('|');\n                }\n                const regexp = new RegExp(value, 'gi');\n                return record.assignments.some(assignment => regexp.test(assignment.resourceName));\n            },\n            alwaysClearCell : false\n        };\n    }\n    construct() {\n        super.construct(...arguments);\n        const\n            me       = this,\n            { grid } = me;\n        if (me.showAvatars) {\n            Object.assign(me, {\n                repaintOnResize : true,\n                htmlEncode      : false,\n                renderer        : me.rendererWithAvatars,\n                avatarRendering : new AvatarRendering({\n                    element : grid.element,\n                    tooltip : ObjectHelper.assign({\n                        forSelector       : '.b-resourceassignment-cell .b-resource-avatar',\n                        internalListeners : {\n                            beforeShow({ source : tooltip }) {\n                                const\n                                    {\n                                        taskRecord,\n                                        resourceRecord,\n                                        assignmentRecord,\n                                        overflowCount,\n                                        overflowAssignments\n                                    }      = tooltip.activeTarget.elementData,\n                                    result = me.avatarTooltipTemplate?.({\n                                        taskRecord, resourceRecord, assignmentRecord, overflowCount, tooltip, overflowAssignments\n                                    });\n                                if (tooltip.items.length === 0) {\n                                    const text   = me.showAllNames\n                                        ? `${StringHelper.encodeHtml(assignmentRecord)}<br />${overflowAssignments.join('<br />')}`\n                                        : StringHelper.xss`${assignmentRecord}${overflowCount ? ` (+${overflowCount} ${me.L('L{more resources}')})` : ''}`;\n                                    tooltip.html = result ?? text;\n                                }\n                            }\n                        }\n                    }, me.avatarTooltip)\n                })\n            });\n        }\n        if (me.enableResourceDragging) {\n            me.grid.ion({\n                paint   : me.setupDragging,\n                thisObj : me,\n                once    : true\n            });\n        }\n        grid.ion({\n            beforeCellEditStart : me.onBeforeCellEditStart,\n            finishCellEdit      : me.onDoneCellEdit,\n            cancelCellEdit      : me.onDoneCellEdit,\n            thisObj             : me\n        });\n        if (me.showAvatars) {\n            grid.ion({\n                beforeRenderRows : me.calculateAvatarSize,\n                once             : true,\n                thisObj          : me\n            });\n            grid.rowManager.ion({\n                beforeRowHeight : me.calculateAvatarSize,\n                thisObj         : me\n            });\n        }\n        grid.resourceStore.ion({\n            name    : 'resourceStore',\n            update  : me.onResourceUpdate,\n            thisObj : me\n        });\n    }\n    calculateAvatarSize({ height }) {\n        const\n            { grid }        = this,\n            rowHeight       = height || grid.rowHeight,\n            { cellElement } = grid.beginGridMeasuring();\n        cellElement.classList.add(this.internalCellCls);\n        const\n            cellStyles = globalThis.getComputedStyle(cellElement),\n            padding    = parseInt(cellStyles.paddingTop, 10);\n        this.avatarRendering.size = Math.min(this.avatarMaxSize, rowHeight - (2 * padding));\n        cellElement.classList.remove(this.internalCellCls);\n        grid.endGridMeasuring();\n    }\n    doDestroy() {\n        super.doDestroy();\n        this.avatarRendering?.destroy();\n        this.dragHelper?.destroy();\n    }\n    get defaultEditor() {\n        return {\n            type  : AssignmentField.type,\n            store : {\n                modelClass : this.grid.project.assignmentStore.modelClass\n            }\n        };\n    }\n    onBeforeCellEditStart({ editorContext : { record, column } }) {\n        const me = this;\n        if (column === me) {\n            const { editor } = me;\n            editor.resourceImageFolderPath = me.grid.resourceImageFolderPath;\n            editor.projectEvent            = record;\n            me.detachListeners('editorStore');\n            editor.store.ion({\n                name           : 'editorStore',\n                changesApplied : me.onEditorChangesApplied,\n                thisObj        : me\n            });\n        }\n    }\n    onDoneCellEdit() {\n        this.detachListeners('editorStore');\n    }\n    onEditorChangesApplied() {\n        const\n            me          = this,\n            cellElement = me.grid.getCell({ id : me.editor.projectEvent.id, columnId : me.id });\n        if (cellElement) {\n            me.renderer({ value : me.editor.projectEvent.assignments, cellElement });\n        }\n    }\n    onResourceUpdate({ source }) {\n        // no need for this listener when the gantt is loading data\n        if (!source.project?.propagatingLoadChanges) {\n            this.grid.refreshColumn(this);\n        }\n    }\n    get chipView() {\n        const me = this;\n        if (!me._chipView) {\n            me._chipView = new ChipView({\n                parent         : me,\n                cls            : 'b-assignment-chipview',\n                navigator      : null,\n                itemsFocusable : false,\n                closable       : false,\n                itemTpl        : me.itemTpl,\n                store          : {},\n                scrollable     : {\n                    overflowX : 'hidden-scroll'\n                }\n            });\n            // The List class only refreshes itself when visible, so\n            // since this is an offscreen, rendering element\n            // we have to fake visibility.\n            Object.defineProperty(me.chipView, 'isVisible', {\n                get() {\n                    return true;\n                }\n            });\n            // Complete the initialization, which is finalized on first paint.\n            // In particular the lazy scrollable config is ingested on paint.\n            me.chipView.triggerPaint();\n        }\n        return me._chipView;\n    }\n    renderer({ cellElement, value, isExport }) {\n        value = value.filter(a => a.resource)\n            .sort((lhs, rhs) => lhs.resourceName.localeCompare(rhs.resourceName));\n        if (isExport) {\n            return value.map((val, i) => this.itemTpl(val, i, false)).join(',');\n        }\n        else {\n            const\n                { chipView } = this,\n                chipViewWrap = cellElement.querySelector('.b-assignment-chipview-wrap') || (\n                    DomHelper.createElement({\n                        parent    : cellElement,\n                        className : 'b-assignment-chipview-wrap'\n                    })\n                );\n            chipView.store.storage.replaceValues({\n                values : value,\n                silent : true\n            });\n            chipView.refresh();\n            const chipCloneElement = chipView.element.cloneNode(true);\n            chipCloneElement.removeAttribute('id');\n            chipViewWrap.innerHTML = '';\n            chipViewWrap.appendChild(chipCloneElement);\n        }\n    }\n    rendererWithAvatars({ record : taskRecord, value, isExport }) {\n        value = value.filter(a => a.resource)\n            .sort((lhs, rhs) => lhs.resourceName.localeCompare(rhs.resourceName));\n        const\n            me                  = this,\n            { size }            = me.avatarRendering,\n            nbrVisible          = Math.floor((me.width - me.sideMargin) / (size + 2)),\n            overflowCount       = value.length > nbrVisible ? value.length - nbrVisible : 0,\n            overflowAssignments = value.length > nbrVisible ? value.filter(assignment => value.indexOf(assignment) >= nbrVisible) : [];\n        if (isExport) {\n            return value.map((as, i) => this.itemTpl(as, i, false)).join(',');\n        }\n        return {\n            className : 'b-resource-avatar-container',\n            children  : value.map((assignmentRecord, i) => {\n                const { resource : resourceRecord } = assignmentRecord;\n                if (i < nbrVisible) {\n                    const\n                        isLastOverflowing = overflowCount > 0 && i === nbrVisible - 1,\n                        imgConfig         = me.renderAvatar({\n                            taskRecord,\n                            resourceRecord,\n                            assignmentRecord,\n                            overflowCount       : isLastOverflowing ? overflowCount : 0,\n                            overflowAssignments : isLastOverflowing ? overflowAssignments : []\n                        });\n                    if (isLastOverflowing) {\n                        return {\n                            className : 'b-overflow-img b-resource-avatar',\n                            style     : {\n                                height : size + 'px',\n                                width  : size + 'px'\n                            },\n                            children : [\n                                imgConfig,\n                                {\n                                    tag       : 'span',\n                                    className : 'b-overflow-count',\n                                    html      : `+${overflowCount}`\n                                }\n                            ]\n                        };\n                    }\n                    return imgConfig;\n                }\n            })\n        };\n    }\n    renderAvatar({ taskRecord, resourceRecord, assignmentRecord, overflowCount, overflowAssignments }) {\n        const\n            {\n                resourceImageFolderPath\n            }        = this.grid,\n            imageUrl = resourceRecord.imageUrl || resourceRecord.image && resourceImageFolderPath && (resourceImageFolderPath + resourceRecord.image),\n            avatar   = this.avatarRendering.getResourceAvatar({\n                resourceRecord,\n                initials        : resourceRecord.initials,\n                color           : resourceRecord.eventColor,\n                iconCls         : resourceRecord.iconCls,\n                defaultImageUrl : this.defaultAvatar,\n                imageUrl\n            });\n        // Some paths in avatarRendering does not yield elementData\n        if (!avatar.elementData) {\n            avatar.elementData = {};\n        }\n        Object.assign(avatar.elementData, { taskRecord, resourceRecord, assignmentRecord, overflowCount, overflowAssignments });\n        return avatar;\n    }\n    get defaultAvatar() {\n        const { grid } = this;\n        return grid.defaultResourceImageName ? grid.resourceImageFolderPath + grid.defaultResourceImageName : '';\n    }\n    // Used with CellCopyPaste to be able to copy assignments from one task to another\n    toClipboardString({ record }) {\n        return StringHelper.safeJsonStringify(record[this.field]);\n    }\n    // Used with CellCopyPaste to be able to copy assignments from one task to another\n    fromClipboardString({ string, record }) {\n        const\n            parsedAssignments = StringHelper.safeJsonParse(string),\n            newAssignments    = [];\n        if (parsedAssignments?.length) {\n            for (const assignmentData of parsedAssignments) {\n                delete assignmentData.id;\n                delete assignmentData.event;\n                delete assignmentData.resource;\n                assignmentData.eventId = record.id;\n                newAssignments.push(new AssignmentModel(assignmentData));\n            }\n        }\n        return newAssignments;\n    }\n    // Only allow if complete range is only inside this column\n    canFillValue({ range }) {\n        return range.every(cs => cs.column === this);\n    }\n    calculateFillValue({ record, value }) {\n        const string = JSON.stringify(value);\n        return this.fromClipboardString({ string, record });\n    }\n    setupDragging() {\n        const\n            me       = this,\n            { grid } = me;\n        // Prevent row reorders from resource assignment cell\n        if (grid.features.rowReorder) {\n            grid.features.rowReorder.dragHelper.targetSelector += ' .b-grid-cell:not(.b-resourceassignment-cell)';\n        }\n        me.subGrid.element.classList.add('b-draggable-resource-avatars');\n        me.dragHelper = new DragHelper({\n            callOnFunctions : true,\n            // Don't drag the actual element, clone the avatar instead\n            cloneTarget     : true,\n            // Allow drag of row elements inside the resource grid\n            targetSelector  : '.b-resource-avatar-container > .b-resource-avatar',\n            onDragStart({ context }) {\n                const { grabbed } = context;\n                context.resourceRecord = grabbed.elementData.resourceRecord;\n                grid.enableScrollingCloseToEdges();\n            },\n            onDrag({ context, event }) {\n                const targetTask = context.targetTask = grid.resolveTaskRecord(event.target);\n                context.valid = Boolean(targetTask && !targetTask.resources.includes(context.resourceRecord));\n            },\n            // Drop callback after a mouse up. If drop is valid, the element is animated to its final position before the data transfer\n            async onDrop({ context, event }) {\n                const\n                    { targetTask, resourceRecord, valid, grabbed, element } = context,\n                    { assignmentRecord, taskRecord }                        = grabbed.elementData,\n                    validDropTarget                                         = event.target.closest('.b-resourceassignment-cell');\n                // We handle case of \"invalid\" drop ourselves, and when you don't drop on a resource\n                // assignment cell it means unassign (i.e. DragHelper never aborts a drop)\n                if (valid) {\n                    grabbed.style.display = 'none';\n                }\n                if (!validDropTarget) {\n                    element.style.display = 'none';\n                    // Invalid drop target means unassign\n                    taskRecord.unassign(resourceRecord);\n                }\n                else if (valid) {\n                    // Valid drop, provide a point to animate the proxy to before finishing the operation\n                    const\n                        resourceAssignmentCell = grid.getCell({\n                            column : me,\n                            record : targetTask\n                        }),\n                        avatarContainer        = resourceAssignmentCell?.querySelector('.b-resource-avatar-container');\n                    // Before we finalize the drop and update the task record, transition the element to the target point\n                    if (avatarContainer) {\n                        await this.animateProxyTo(avatarContainer, {\n                            align : 'l0-r0'\n                        });\n                    }\n                    if (!targetTask.resources.includes(resourceRecord)) {\n                        assignmentRecord.event = targetTask;\n                    }\n                }\n                grid.disableScrollingCloseToEdges();\n            }\n        });\n    }\n}\nColumnStore.registerColumnType(ResourceAssignmentColumn);\nResourceAssignmentColumn._$name = 'ResourceAssignmentColumn';", "import CheckColumn from '../../Grid/column/CheckColumn.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\n/**\n * @module Gantt/column/RollupColumn\n */\n/**\n * A column that displays a checkbox to edit the {@link Gantt.model.TaskModel#field-rollup rollup} data field.\n * This field indicates if a task should rollup to its closest parent or not.\n * Requires the {@link Gantt.feature.Rollups Rollups} feature to be enabled.\n *\n * This column uses a {@link Core.widget.Checkbox checkbox} as its editor, and it is not intended to be changed.\n *\n * @extends Grid/column/CheckColumn\n * @classtype rollup\n * @column\n */\nexport default class RollupColumn extends CheckColumn {\n    static get $name() {\n        return 'RollupColumn';\n    }\n    static get type() {\n        return 'rollup';\n    }\n    static get isGanttColumn() {\n        return true;\n    }\n    static get defaults() {\n        return {\n            field : 'rollup',\n            text  : 'L{Rollup}'\n        };\n    }\n}\nColumnStore.registerColumnType(RollupColumn);\nRollupColumn._$name = 'RollupColumn';", "import Column from '../../Grid/column/Column.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\nimport SchedulingDirectionPicker from '../../SchedulerPro/widget/SchedulingDirectionPicker.js';\n/**\n * @module Gantt/column/SchedulingDirectionColumn\n */\n/**\n * This is a column class for the {@link Gantt/model/TaskModel#field-direction scheduling direction}\n * field of the task model. Please refer to the documentation of that field for more details.\n *\n * Default editor is a {@link SchedulerPro/widget/SchedulingDirectionPicker}.\n *\n * The direction can be one of:\n *\n * - Forward\n * - Backward\n *\n * @extends Grid/column/Column\n * @classtype schedulingdirection\n * @column\n */\nexport default class SchedulingDirectionColumn extends Column {\n    static $name = 'SchedulingDirectionColumn';\n    static type = 'schedulingdirection';\n    static isGanttColumn = true;\n    // has to be a getter for the localization test to pick up the `L{schedulingDirection}` usage\n    static get defaults() {\n        return {\n            field  : 'direction',\n            text   : 'L{schedulingDirection}',\n            width  : 146,\n            editor : {\n                type         : 'schedulingdirectionpicker',\n                allowInvalid : false\n            },\n            filterable : {\n                filterField : {\n                    type : 'schedulingdirectionpicker'\n                }\n            }\n        };\n    }\n    getEnforcedName(task) {\n        return task.name || (task.isRoot ? 'Project' : `Task #${ task.id }`);\n    }\n    get tooltipRenderer() {\n        if (this._tooltipRenderer !== undefined) {\n            return this._tooltipRenderer;\n        }\n        return this._tooltipRenderer = ({ record }) => {\n            const { effectiveDirection } = record;\n            if (!effectiveDirection) {\n                return false;\n            }\n            if (effectiveDirection.kind === 'enforced') {\n                return this.L('L{enforcedBy}') + ` \"${ this.getEnforcedName(effectiveDirection.enforcedBy) }\"`;\n            }\n            else if (effectiveDirection.kind === 'inherited') {\n                return this.L('L{inheritedFrom}') + ` \"${ this.getEnforcedName(effectiveDirection.inheritedFrom) }\"`;\n            }\n            else {\n                return undefined;\n            }\n        };\n    }\n    renderer({ record }) {\n        const { effectiveDirection } = record;\n        if (!effectiveDirection) {\n            return '';\n        }\n        let value;\n        if (effectiveDirection.kind === 'enforced') {\n            value = effectiveDirection.direction;\n        }\n        else if (effectiveDirection.kind === 'inherited') {\n            value = effectiveDirection.direction;\n        }\n        else {\n            value = record.direction;\n        }\n        return SchedulingDirectionPicker.localize(value) || '';\n    }\n}\nColumnStore.registerColumnType(SchedulingDirectionColumn);\nSchedulingDirectionColumn._$name = 'SchedulingDirectionColumn';", "import Column from '../../Grid/column/Column.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\nimport SchedulingModePicker from '../../SchedulerPro/widget/SchedulingModePicker.js';\n/**\n * @module Gantt/column/SchedulingModeColumn\n */\n/**\n * A column which displays a task's scheduling {@link Gantt.model.TaskModel#field-schedulingMode mode} field.\n *\n * Default editor is a {@link SchedulerPro.widget.SchedulingModePicker SchedulingModePicker}.\n *\n * @extends Grid/column/Column\n * @classtype schedulingmodecolumn\n * @column\n */\nexport default class SchedulingModeColumn extends Column {\n    static get $name() {\n        return 'SchedulingModeColumn';\n    }\n    static get type() {\n        return 'schedulingmodecolumn';\n    }\n    static get isGanttColumn() {\n        return true;\n    }\n    static get defaults() {\n        return {\n            field  : 'schedulingMode',\n            text   : 'L{Scheduling Mode}',\n            editor : {\n                type         : SchedulingModePicker.type,\n                allowInvalid : false,\n                picker       : {\n                    minWidth : '8.5em'\n                }\n            }\n        };\n    }\n    afterConstruct() {\n        const me = this;\n        super.afterConstruct();\n        let store;\n        if (me.editor) {\n            store = me.editor.store;\n        }\n        else {\n            store = new SchedulingModePicker().store;\n        }\n        this.store = store;\n    }\n    renderer({ value }) {\n        const model = this.store.getById(value);\n        return model && model.text || '';\n    }\n    // Refreshes the column **after** the editor locale change\n    // to display properly translated scheduling modes\n    onEditorLocaleChange() {\n        this.grid.refreshColumn(this);\n    }\n    // Only allow if complete range is only inside this column\n    canFillValue({ range }) {\n        return range.every(cs => cs.column === this);\n    }\n}\nColumnStore.registerColumnType(SchedulingModeColumn);\nSchedulingModeColumn._$name = 'SchedulingModeColumn';", "import Column from '../../Grid/column/Column.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\n/**\n * @module Gantt/column/SequenceColumn\n */\n/**\n * A \"calculated\" column which displays the sequential position of the task in the project.\n *\n * There is no `editor`, since value is read-only.\n *\n * See {@link Gantt.model.TaskModel#property-sequenceNumber} for details.\n *\n * @extends Grid/column/Column\n * @classtype sequence\n * @column\n */\nexport default class SequenceColumn extends Column {\n    static get $name() {\n        return 'SequenceColumn';\n    }\n    static get type() {\n        return 'sequence';\n    }\n    static get isGanttColumn() {\n        return true;\n    }\n    static get defaults() {\n        return {\n            field      : 'sequenceNumber',\n            text       : 'L{Sequence}',\n            sortable   : false,\n            groupable  : false,\n            filterable : false,\n            width      : 70,\n            editor     : null\n        };\n    }\n}\nColumnStore.registerColumnType(SequenceColumn);\nSequenceColumn._$name = 'SequenceColumn';", "import CheckColumn from '../../Grid/column/CheckColumn.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\n/**\n * @module Gantt/column/ShowInTimelineColumn\n */\n/**\n * Column that shows if a task should be shown in the {@link SchedulerPro.widget.Timeline Timeline} widget.\n *\n * This column uses a {@link Core.widget.Checkbox checkbox} as its editor, and it is not intended to be changed.\n *\n * @extends Grid/column/CheckColumn\n * @classtype showintimeline\n * @column\n */\nexport default class ShowInTimelineColumn extends CheckColumn {\n    static get $name() {\n        return 'ShowInTimelineColumn';\n    }\n    static get type() {\n        return 'showintimeline';\n    }\n    static get isGanttColumn() {\n        return true;\n    }\n    static get defaults() {\n        return {\n            field : 'showInTimeline',\n            text  : 'L{Show in timeline}'\n        };\n    }\n}\nColumnStore.registerColumnType(ShowInTimelineColumn);\nShowInTimelineColumn._$name = 'ShowInTimelineColumn';", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport GanttDateColumn from '../../Gantt/column/GanttDateColumn.js';\nimport '../../SchedulerPro/widget/StartDateField.js';\n/**\n * @module Gantt/column/StartDateColumn\n */\n/**\n * A column that displays (and allows user to update) the task's {@link Gantt.model.TaskModel#field-startDate start date}.\n *\n * Default editor is a {@link SchedulerPro.widget.StartDateField StartDateField}.\n *\n * If {@link #config-format} is omitted, Gantt's {@link Scheduler.view.mixin.TimelineViewPresets#config-displayDateFormat} will be used as a default value and\n * the format will be dynamically updated while zooming according to the {@link Scheduler.preset.ViewPreset#field-displayDateFormat} value specified for the ViewPreset being selected.\n *\n * @extends Gantt/column/GanttDateColumn\n * @classtype startdate\n * @column\n */\nexport default class StartDateColumn extends GanttDateColumn {\n    static get $name() {\n        return 'StartDateColumn';\n    }\n    static get type() {\n        return 'startdate';\n    }\n    static get defaults() {\n        return {\n            field : 'startDate',\n            text  : 'L{Start}'\n        };\n    }\n    get defaultEditor() {\n        const editorCfg = super.defaultEditor;\n        editorCfg.type = 'startdate';\n        return editorCfg;\n    }\n}\nColumnStore.registerColumnType(StartDateColumn);\nStartDateColumn._$name = 'StartDateColumn';", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport DependencyColumn from './DependencyColumn.js';\n/**\n * @module Gantt/column/SuccessorColumn\n */\n/**\n * A column which displays, in textual form, the dependencies which link from the\n * contextual to successor tasks.\n *\n * This type of column is editable by default. Default editor is a {@link Gantt/widget/DependencyField}.\n *\n * This column will be ignored if using {@link Grid/feature/CellCopyPaste} to paste or {@link Grid/feature/FillHandle}\n * to fill values.\n *\n * @classtype successor\n * @extends Gantt/column/DependencyColumn\n * @column\n */\nexport default class SuccessorColumn extends DependencyColumn {\n    static get $name() {\n        return 'SuccessorColumn';\n    }\n    static get type() {\n        return 'successor';\n    }\n    static get isGanttColumn() {\n        return true;\n    }\n    static get defaults() {\n        return {\n            text  : 'L{Successors}',\n            field : 'successors'\n        };\n    }\n    canFillValue = () => false;\n}\nColumnStore.registerColumnType(SuccessorColumn);\nSuccessorColumn._$name = 'SuccessorColumn';", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport DurationColumn from '../../Scheduler/column/DurationColumn.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport Duration from '../../Core/data/Duration.js';\n/**\n * @module Gantt/column/TotalSlackColumn\n */\n/**\n * A column that displays the task's {@link Gantt.model.TaskModel#field-totalSlack total slack}.\n *\n * Default editor is a {@link Core.widget.DurationField DurationField}.\n *\n * @extends Scheduler/column/DurationColumn\n * @classtype totalslack\n * @column\n */\nexport default class TotalSlackColumn extends DurationColumn {\n    static get $name() {\n        return 'TotalSlackColumn';\n    }\n    static get type() {\n        return 'totalslack';\n    }\n    static get isGanttColumn() {\n        return true;\n    }\n    get durationUnitField() {\n        return 'slackUnit';\n    }\n    static get defaults() {\n        return {\n            field : 'totalSlack',\n            text  : 'L{Total Slack}',\n            filterable({ value, record, operator, column }) {\n                const\n                    a = DateHelper.asMilliseconds(column.roundValue(record.totalSlack), record.slackUnit),\n                    b = value.milliseconds;\n                switch (operator) {\n                    case '='  : return a === b;\n                    case '<'  : return a < b;\n                    case '<=' : return a <= b;\n                    case '>'  : return a > b;\n                    case '>=' : return a >= b;\n                    default   : throw new Error('Invalid operator ' + operator);\n                }\n            }\n        };\n    }\n    getFilterableValue(record) {\n        return new Duration({\n            magnitude : record.totalSlack,\n            unit      : record.slackUnit\n        });\n    }\n}\nColumnStore.registerColumnType(TotalSlackColumn);\nTotalSlackColumn._$name = 'TotalSlackColumn';", "import Column from '../../Grid/column/Column.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\n/**\n * @module Gantt/column/WBSColumn\n */\n/**\n * A calculated column which displays the _WBS_ (_Work Breakdown Structure_) for the tasks - the position of the task\n * in the project tree structure.\n *\n * While there is no `editor`, since the WBS is a calculated value, there is a `renumber` item in the `headerMenuItems`\n * that allows the user to {@link Gantt.model.TaskModel#function-refreshWbs refresh} the WBS values.\n *\n * @extends Grid/column/Column\n * @classtype wbs\n * @column\n */\nexport default class WBSColumn extends Column {\n    static get $name() {\n        return 'WBSColumn';\n    }\n    static get type() {\n        return 'wbs';\n    }\n    static get isGanttColumn() {\n        return true;\n    }\n    static get defaults() {\n        return {\n            field  : 'wbsValue',\n            text   : 'L{WBS}',\n            width  : 70,\n            editor : null,\n            filterable({ value, record }) {\n                // value might be WBS instance\n                return record.wbsValue.match(String(value));\n            },\n            headerMenuItems : {\n                renumber : {\n                    text : 'L{WBSColumn.renumber}',\n                    icon : 'b-icon-renumber',\n                    onItem({ source }) {\n                        source.taskStore.rootNode.refreshWbs();\n                    }\n                }\n            },\n            // This renderer is required to force string WBS value for TableExporter. zipcelx will call `valueOf` (value + '')\n            // which would return padded value.\n            renderer({ value }) {\n                return String(value);\n            }\n        };\n    }\n    canFillValue = () => false;\n}\nColumnStore.registerColumnType(WBSColumn);\nWBSColumn._$name = 'WBSColumn';", "import AddNewColumn from './AddNewColumn.js';\nimport BaselineStartDateColumn from './BaselineStartDateColumn.js';\nimport BaselineEndDateColumn from './BaselineEndDateColumn.js';\nimport BaselineDurationColumn from './BaselineDurationColumn.js';\nimport BaselineDurationVarianceColumn from './BaselineDurationVarianceColumn.js';\nimport BaselineStartVarianceColumn from './BaselineStartVarianceColumn.js';\nimport BaselineEndVarianceColumn from './BaselineEndVarianceColumn.js';\nimport CalendarColumn from './CalendarColumn.js';\nimport ConstraintDateColumn from './ConstraintDateColumn.js';\nimport ConstraintTypeColumn from './ConstraintTypeColumn.js';\nimport DeadlineDateColumn from './DeadlineDateColumn.js';\nimport DurationColumn from '../../Scheduler/column/DurationColumn.js';\nimport EarlyEndDateColumn from './EarlyEndDateColumn.js';\nimport EarlyStartDateColumn from './EarlyStartDateColumn.js';\nimport EffortColumn from './EffortColumn.js';\nimport EndDateColumn from './EndDateColumn.js';\n// Not including EventModelColumn on purpose\nimport IgnoreResourceCalendarColumn from './IgnoreResourceCalendarColumn.js';\nimport InactiveColumn from './InactiveColumn.js';\nimport LateEndDateColumn from './LateEndDateColumn.js';\nimport LateStartDateColumn from './LateStartDateColumn.js';\nimport ManuallyScheduledColumn from './ManuallyScheduledColumn.js';\nimport MilestoneColumn from './MilestoneColumn.js';\nimport NameColumn from './NameColumn.js';\nimport NoteColumn from './NoteColumn.js';\nimport PercentDoneColumn from './PercentDoneColumn.js';\nimport PredecessorColumn from './PredecessorColumn.js';\nimport ResourceAssignmentColumn from './ResourceAssignmentColumn.js';\nimport RollupColumn from './RollupColumn.js';\nimport SchedulingDirectionColumn from './SchedulingDirectionColumn.js';\nimport SchedulingModeColumn from './SchedulingModeColumn.js';\nimport SequenceColumn from './SequenceColumn.js';\nimport ShowInTimelineColumn from './ShowInTimelineColumn.js';\nimport StartDateColumn from './StartDateColumn.js';\nimport SuccessorColumn from './SuccessorColumn.js';\nimport TotalSlackColumn from './TotalSlackColumn.js';\nimport WBSColumn from './WBSColumn.js';\n/**\n * @module Gantt/column/AllColumns\n *\n * Imports all currently developed Gantt columns and re-exports them in an object.\n * Should be used to import and register all Gantt columns.\n */\nexport default {\n    AddNewColumn,\n    BaselineStartDateColumn,\n    BaselineEndDateColumn,\n    BaselineDurationColumn,\n    BaselineStartVarianceColumn,\n    BaselineEndVarianceColumn,\n    BaselineDurationVarianceColumn,\n    CalendarColumn,\n    ConstraintDateColumn,\n    ConstraintTypeColumn,\n    DeadlineDateColumn,\n    DurationColumn,\n    EarlyEndDateColumn,\n    EarlyStartDateColumn,\n    EffortColumn,\n    EndDateColumn,\n    IgnoreResourceCalendarColumn,\n    InactiveColumn,\n    LateEndDateColumn,\n    LateStartDateColumn,\n    ManuallyScheduledColumn,\n    MilestoneColumn,\n    NameColumn,\n    NoteColumn,\n    PercentDoneColumn,\n    PredecessorColumn,\n    ResourceAssignmentColumn,\n    RollupColumn,\n    SchedulingDirectionColumn,\n    SchedulingModeColumn,\n    SequenceColumn,\n    ShowInTimelineColumn,\n    StartDateColumn,\n    SuccessorColumn,\n    TotalSlackColumn,\n    WBSColumn\n};\n", "import CheckColumn from '../../Grid/column/CheckColumn.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\n/**\n * A column that displays (and allows user to update) the task's\n * {@link Gantt.model.TaskModel#field-manuallyScheduled manuallyScheduled} field.\n *\n * This column uses a {@link Core.widget.Checkbox checkbox} as its editor, and it is not intended to be changed.\n *\n * @extends Grid/column/CheckColumn\n * @classtype eventmode\n * @column\n */\nexport default class EventModeColumn extends CheckColumn {\n    static get $name() {\n        return 'EventModeColumn';\n    }\n    static get type() {\n        return 'eventmode';\n    }\n    static get isGanttColumn() {\n        return true;\n    }\n    static get defaults() {\n        return {\n            field : 'manuallyScheduled',\n            align : 'left',\n            text  : 'L{Event mode}'\n        };\n    }\n    internalRenderer({ value, cellElement, column, isExport }) {\n        super.internalRenderer(...arguments);\n        if (isExport) {\n            return this.renderText(value);\n        }\n        else {\n            if (cellElement.widget) {\n                cellElement.widget.text = this.renderText(value);\n            }\n        }\n    }\n    onCheckboxChange({ source, checked }) {\n        super.onCheckboxChange(...arguments);\n        source.text = this.renderText(checked);\n    }\n    renderText(value) {\n        return value ? this.L('L{Manual}') : this.L('L{Auto}');\n    }\n}\nColumnStore.registerColumnType(EventModeColumn);\nEventModeColumn._$name = 'EventModeColumn';", "import SchedulerTimeAxisColumn from '../../Scheduler/column/TimeAxisColumn.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\n/**\n * @module Gantt/column/TimeAxisColumn\n */\n/**\n * A column containing the timeline \"viewport\", in which tasks, dependencies etc. are drawn.\n * Normally you do not need to interact with or create this column, it is handled by Gantt.\n *\n * @extends Scheduler/column/TimeAxisColumn\n * @column\n *\n * @typings Scheduler.column.TimeAxisColumn -> Scheduler.column.SchedulerTimeAxisColumn\n */\nexport default class TimeAxisColumn extends SchedulerTimeAxisColumn {\n    static get defaults() {\n        return {\n            /**\n             * Set to `false` to disable the {@link Gantt.feature.TaskMenu} for the cell elements in this column.\n             * @config {Boolean} enableCellContextMenu\n             * @default\n             * @category Menu\n             */\n            enableCellContextMenu : true\n        };\n    }\n}\nColumnStore.registerColumnType(TimeAxisColumn);\nTimeAxisColumn._$name = 'TimeAxisColumn';", "import SchedulerProAssignmentStore from '../../SchedulerPro/data/AssignmentStore.js';\nimport AssignmentModel from '../model/AssignmentModel.js';\n/**\n * @module Gantt/data/AssignmentStore\n */\n/**\n * A class representing a collection of assignments between tasks in the {@link Gantt/data/TaskStore} and resources\n * in the {@link Gantt/data/ResourceStore}.\n *\n * ```javascript\n * const assignmentStore = new AssignmentStore({\n *     data : [\n *         { \"id\" : 1, \"event\" : 11,  \"resource\" : 1 },\n *         { \"id\" : 2, \"event\" : 12,  \"resource\" : 1 },\n *     ]\n * })\n * ```\n *\n * Contains a collection of the {@link Gantt/model/AssignmentModel} records.\n *\n * @extends SchedulerPro/data/AssignmentStore\n *\n * @typings SchedulerPro.data.AssignmentStore -> SchedulerPro.data.SchedulerProAssignmentStore\n */\nexport default class AssignmentStore extends SchedulerProAssignmentStore {\n    static get defaultConfig() {\n        return {\n            modelClass : AssignmentModel,\n            /**\n             * CrudManager must load stores in the correct order. Lowest first.\n             * @private\n             */\n            loadPriority : 500,\n            /**\n             * CrudManager must sync stores in the correct order. Lowest first.\n             * @private\n             */\n            syncPriority : 400\n        };\n    }\n}\nAssignmentStore._$name = 'AssignmentStore';", "import SchedulerProCalendarModel from '../../SchedulerPro/model/CalendarModel.js';\n/**\n * @module Gantt/model/CalendarModel\n */\n/**\n * This class represents a calendar in the Gantt project. It contains a collection of the {@link SchedulerPro.model.CalendarIntervalModel}.\n * Every interval can be either recurrent (regularly repeating in time) or static.\n *\n * Please refer to the [calendars guide](#Gantt/guides/basics/calendars.md) for details\n *\n * @extends SchedulerPro/model/CalendarModel\n *\n * @typings SchedulerPro.model.CalendarModel -> SchedulerPro.model.SchedulerProCalendarModel\n */\nexport default class CalendarModel extends SchedulerProCalendarModel {}\nCalendarModel._$name = 'CalendarModel';", "import SchedulerProCalendarManagerStore from '../../SchedulerPro/data/CalendarManagerStore.js';\nimport CalendarModel from '../model/CalendarModel.js';\n/**\n * @module Gantt/data/CalendarManagerStore\n */\n/**\n * A class representing the tree of calendars in the Gantt chart. An individual calendar is represented as an instance of the\n * {@link Gantt.model.CalendarModel} class. The store expects the data loaded to be hierarchical. Each parent node should\n * contain its children in a property called 'children'.\n *\n * Please refer to the [calendars guide](#Gantt/guides/basics/calendars.md) for details\n *\n * @extends SchedulerPro/data/CalendarManagerStore\n *\n * @typings SchedulerPro.data.CalendarManagerStore -> SchedulerPro.data.SchedulerProCalendarManagerStore\n */\nexport default class CalendarManagerStore extends SchedulerProCalendarManagerStore {\n    static get defaultConfig() {\n        return {\n            modelClass : CalendarModel\n        };\n    }\n}\nCalendarManagerStore._$name = 'CalendarManagerStore';", "import SchedulerProDependencyModel from '../../SchedulerPro/model/DependencyModel.js';\n/**\n * @module Gantt/model/DependencyModel\n */\n/**\n * This class represents a single dependency between the tasks in your Gantt project.\n *\n * ## Subclassing the Dependency class\n *\n * The name of any field in data can be customized in the subclass, see the example below.\n *\n * ```javascript\n * class MyDependencyModel extends DependencyModel {\n *   static get fields() {\n *     return [\n *       { name: 'to', dataSource : 'targetId' },\n *       { name: 'from', dataSource : 'sourceId' }\n *     ];\n *   }\n * }\n * ```\n *\n * @extends SchedulerPro/model/DependencyModel\n *\n * @typings Scheduler.model.DependencyModel -> Scheduler.model.SchedulerDependencyModel\n * @typings SchedulerPro.model.DependencyModel -> SchedulerPro.model.SchedulerProDependencyModel\n */\nexport default class DependencyModel extends SchedulerProDependencyModel {\n    constructor(...args) {\n        const [config] = args;\n        if (config?.fromTask) {\n            config.fromEvent = config.fromTask;\n        }\n        if (config?.toTask) {\n            config.toEvent = config.toTask;\n        }\n        super(...args);\n    }\n    get from() {\n        return this.fromEvent?.id;\n    }\n    set from(value) {\n        super.from = value;\n    }\n    /**\n     * The origin task of this dependency.\n     *\n     * Accepts multiple formats but always returns an {@link Gantt.model.TaskModel}.\n     *\n     * **NOTE:** This is not a proper field but rather an alias, it will be serialized but cannot be remapped. If you\n     * need to remap, consider using {@link #field-from} instead.\n     *\n     * @field {Gantt.model.TaskModel} fromTask\n     * @accepts {String|Number|Gantt.model.TaskModel}\n     * @category Dependency\n     */\n    /**\n     * The destination task of this dependency.\n     *\n     * Accepts multiple formats but always returns an {@link Gantt.model.TaskModel}.\n     *\n     * **NOTE:** This is not a proper field but rather an alias, it will be serialized but cannot be remapped. If you\n     * need to remap, consider using {@link #field-to} instead.\n     *\n     * @field {Gantt.model.TaskModel} toTask\n     * @accepts {String|Number|Gantt.model.TaskModel}\n     * @category Dependency\n     */\n    get fromTask() {\n        return this.fromEvent;\n    }\n    set fromTask(task) {\n        this.fromEvent = task;\n    }\n    get to() {\n        return this.toEvent?.id;\n    }\n    set to(value) {\n        super.to = value;\n    }\n    get toTask() {\n        return this.toEvent;\n    }\n    set toTask(task) {\n        this.toEvent = task;\n    }\n    get persistableData() {\n        const\n            data                 = super.persistableData,\n            { fromTask, toTask } = data;\n        if (fromTask) {\n            data.fromTask = fromTask.id;\n        }\n        if (toTask) {\n            data.toTask = toTask.id;\n        }\n        return data;\n    }\n    shouldRecordFieldChange(fieldName, oldValue, newValue) {\n        if (fieldName === 'from' || fieldName === 'to') {\n            // we don't need to record the changes in the computed `to/from` fields\n            // note, that at the scheduler basic level, we do record changes in those fields,\n            // because there the fields are \"real\"\n            return false;\n        }\n        else {\n            return super.shouldRecordFieldChange(fieldName, oldValue, newValue);\n        }\n    }\n}\nDependencyModel._$name = 'DependencyModel';", "import SchedulerProDependencyStore from '../../SchedulerPro/data/DependencyStore.js';\nimport DependencyModel from '../model/DependencyModel.js';\n/**\n * @module Gantt/data/DependencyStore\n */\n/**\n * A class representing a collection of dependencies between tasks in the {@link Gantt.data.TaskStore}.\n * Contains a collection of {@link Gantt.model.DependencyModel} records.\n *\n * ```javascript\n * const dependencyStore = new DependencyStore({\n *     data : [\n *         {\n *             \"id\"       : 1,\n *             \"fromTask\" : 11,\n *             \"toTask\"   : 15,\n *             \"lag\"      : 2\n *         },\n *         {\n *             \"id\"       : 2,\n *             \"fromTask\" : 12,\n *             \"toTask\"   : 15\n *         }\n *     ]\n * })\n * ```\n *\n * @extends SchedulerPro/data/DependencyStore\n *\n * @typings SchedulerPro.data.DependencyStore -> SchedulerPro.data.SchedulerProDependencyStore\n */\nexport default class DependencyStore extends SchedulerProDependencyStore {\n    static get defaultConfig() {\n        return {\n            modelClass : DependencyModel,\n            /**\n             * CrudManager must load stores in the correct order. Lowest first.\n             * @private\n             */\n            loadPriority : 300,\n            /**\n             * CrudManager must sync stores in the correct order. Lowest first.\n             * @private\n             */\n            syncPriority : 500\n        };\n    }\n}\nDependencyStore._$name = 'DependencyStore';", "import SchedulerProResourceModel from '../../SchedulerPro/model/ResourceModel.js';\n/**\n * @module Gantt/model/ResourceModel\n */\n/**\n * This class represents a single resource in your Gantt project.\n *\n * If you want to add or change some fields, describing resources - subclass this class:\n *\n * ```javascript\n * class MyResourceModel extends ResourceModel {\n *\n *   static get fields() {\n *     return [\n *       { name: 'company', type: 'string' }\n *     ]\n *   }\n * }\n * ```\n *\n * See also: {@link Gantt.model.AssignmentModel}\n * @extends SchedulerPro/model/ResourceModel\n *\n * @typings SchedulerPro.model.ResourceModel -> SchedulerPro.model.SchedulerProResourceModel\n */\nexport default class ResourceModel extends SchedulerProResourceModel {\n    /**\n     * Get associated tasks\n     *\n     * @member {SchedulerPro.model.EventModel[]} events\n     * @readonly\n     */\n}\nResourceModel._$name = 'ResourceModel';", "import SchedulerProResourceStore from '../../SchedulerPro/data/ResourceStore.js';\nimport ResourceModel from '../model/ResourceModel.js';\n/**\n * @module Gantt/data/ResourceStore\n */\n/**\n * A class representing the collection of the resources - {@link Gantt.model.ResourceModel} records.\n *\n * ```javascript\n * const resourceStore = new ResourceStore({\n *     data : [\n *         { \"id\" : 1, \"name\" : \"John Doe\" },\n *         { \"id\" : 2, \"name\" : \"Jane Doe\" }\n *     ]\n * })\n * ```\n *\n * @extends SchedulerPro/data/ResourceStore\n *\n * @typings SchedulerPro.data.ResourceStore -> SchedulerPro.data.SchedulerProResourceStore\n */\nexport default class ResourceStore extends SchedulerProResourceStore {\n    static get defaultConfig() {\n        return {\n            modelClass : ResourceModel,\n            /**\n             * CrudManager must load stores in the correct order. Lowest first.\n             * @private\n             */\n            loadPriority : 400,\n            /**\n             * CrudManager must sync stores in the correct order. Lowest first.\n             * @private\n             */\n            syncPriority : 200\n        };\n    }\n}\nResourceStore._$name = 'ResourceStore';", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Mixin } from '../../../../ChronoGraph/class/Mixin.js';\nimport { prototypeValue } from '../../../../ChronoGraph/util/Helpers.js';\nimport DateHelper from '../../../../Core/helper/DateHelper.js';\nimport Localizable from '../../../../Core/localization/Localizable.js';\nimport { ConflictResolution, ConstraintInterval, ConstraintIntervalDescription } from '../../../chrono/Conflict.js';\nimport { ConstraintIntervalSide, Direction } from \"../../../scheduling/Types.js\";\nimport { format } from '../../../util/Functions.js';\nimport { BaseEventMixin } from '../scheduler_basic/BaseEventMixin.js';\nimport { HasChildrenMixin } from '../scheduler_basic/HasChildrenMixin.js';\nimport { ConstrainedEarlyEventMixin } from '../scheduler_pro/ConstrainedEarlyEventMixin.js';\nimport \"../../../localization/En.js\";\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * This mixin makes the event to \"inherit\" the constraints from its parent event.\n */\nexport class ConstrainedByParentMixin extends Mixin([\n    BaseEventMixin,\n    HasChildrenMixin,\n    ConstrainedEarlyEventMixin\n], (base) => {\n    const superProto = base.prototype;\n    class ConstrainedByParentMixin extends base {\n        *maybeSkipNonWorkingTime(date, isForward = true) {\n            const childEvents = yield this.$.childEvents;\n            // summary tasks are simply aligned by their children so they should not skip non-working time at all\n            if (childEvents.size > 0)\n                return date;\n            return yield* superProto.maybeSkipNonWorkingTime.call(this, date, isForward);\n        }\n        *calculateStartDateConstraintIntervals() {\n            const intervals = yield* superProto.calculateStartDateConstraintIntervals.call(this);\n            const parentEvent = yield this.$.parentEvent;\n            if (parentEvent?.graph) {\n                // Child inherits its parent task constraints\n                const parentIntervals = yield parentEvent.$.startDateConstraintIntervals;\n                intervals.push.apply(intervals, parentIntervals);\n            }\n            return intervals;\n        }\n        *calculateEndDateConstraintIntervals() {\n            const intervals = yield* superProto.calculateEndDateConstraintIntervals.call(this);\n            const parentEvent = yield this.$.parentEvent;\n            if (parentEvent?.graph) {\n                // Child inherits its parent task constraints\n                const parentIntervals = yield parentEvent.$.endDateConstraintIntervals;\n                intervals.push.apply(intervals, parentIntervals);\n            }\n            return intervals;\n        }\n        *calculateEarlyStartDateConstraintIntervals() {\n            const intervals = yield* superProto.calculateEarlyStartDateConstraintIntervals.call(this);\n            const parentEvent = yield this.$.parentEvent;\n            if (parentEvent?.graph) {\n                // Child inherits its parent task constraints\n                const parentIntervals = yield parentEvent.$.earlyStartDateConstraintIntervals;\n                intervals.push.apply(intervals, parentIntervals);\n                // If the parent is scheduled manually it should still restrict its children (even though it has no a constraint set)\n                // so we append an artificial constraining interval\n                if ((yield parentEvent.$.manuallyScheduled) && (yield this.$.effectiveDirection).direction === Direction.Forward) {\n                    intervals.push(ManuallyScheduledParentConstraintInterval.new({\n                        owner: parentEvent,\n                        side: ConstraintIntervalSide.Start,\n                        startDate: yield parentEvent.$.startDate\n                    }));\n                }\n            }\n            return intervals;\n        }\n        *calculateEarlyEndDateConstraintIntervals() {\n            const intervals = yield* superProto.calculateEarlyEndDateConstraintIntervals.call(this);\n            const parentEvent = yield this.$.parentEvent;\n            if (parentEvent?.graph) {\n                // Child inherits its parent task constraints\n                const parentIntervals = yield parentEvent.$.earlyEndDateConstraintIntervals;\n                intervals.push.apply(intervals, parentIntervals);\n            }\n            return intervals;\n        }\n    }\n    return ConstrainedByParentMixin;\n}) {\n}\n/**\n * Class implements resolving a scheduling conflict happened due to a parent event\n * [[ConstrainedByParentMixin.manuallyScheduled|manually scheduled state]].\n * It resolves the conflict by setting the event [[ConstrainedByParentMixin.manuallyScheduled|manuallyScheduled]] to `false`.\n */\nexport class DisableManuallyScheduledConflictResolution extends Localizable(ConflictResolution) {\n    static get $name() {\n        return 'RemoveManuallyScheduledParentConstraintConflictResolution';\n    }\n    construct() {\n        super.construct(...arguments);\n        this.event = this.interval.owner;\n    }\n    getDescription() {\n        const { event } = this;\n        return format(this.L('L{descriptionTpl}'), event.name || event.id);\n    }\n    /**\n     * Resolves the conflict by setting the event [[ConstrainedByParentMixin.manuallyScheduled|manuallyScheduled]] to `false`.\n     */\n    resolve() {\n        this.event.manuallyScheduled = false;\n    }\n}\n/**\n * Description builder for an [[ManuallyScheduledParentConstraintInterval|manual parent constraint interval]].\n */\nexport class ManuallyScheduledParentConstraintIntervalDescription extends ConstraintIntervalDescription {\n    static get $name() {\n        return 'ManuallyScheduledParentConstraintIntervalDescription';\n    }\n    /**\n     * Returns description for the provided event constraint interval.\n     * @param interval Constraint interval\n     */\n    static getDescription(interval) {\n        let tpl;\n        switch (interval.side) {\n            case ConstraintIntervalSide.Start:\n                tpl = this.L('L{startDescriptionTpl}');\n                break;\n            case ConstraintIntervalSide.End:\n                tpl = this.L('L{endDescriptionTpl}');\n                break;\n        }\n        return format(tpl, ...this.getDescriptionParameters(interval));\n    }\n    static getDescriptionParameters(interval) {\n        const event = interval.owner;\n        return [\n            DateHelper.format(interval.startDate, this.L('L{dateFormat}')),\n            DateHelper.format(interval.endDate, this.L('L{dateFormat}')),\n            event.name || event.id\n        ];\n    }\n}\n/**\n * Class implements an interval applied by a [[ConstrainedByParentMixin.manuallyScheduled|manually scheduled]] parent event.\n * The interval suggests the only resolution option - disabling [[ConstrainedByParentMixin.manuallyScheduled|manually scheduled]] mode.\n */\nexport class ManuallyScheduledParentConstraintInterval extends ConstraintInterval {\n    get isManuallyScheduledParentConstraintInterval() {\n        return true;\n    }\n    getDescription() {\n        return this.descriptionBuilderClass.getDescription(this);\n    }\n    isAffectedByTransaction(transaction) {\n        const event = this.owner;\n        transaction = transaction || event.graph.activeTransaction;\n        const manuallyScheduledQuark = transaction.entries.get(event.$.manuallyScheduled);\n        // new constrained event or modified constraint\n        return !transaction.baseRevision.hasIdentifier(event.$$) ||\n            manuallyScheduledQuark && !manuallyScheduledQuark.isShadow();\n    }\n    /**\n     * Returns possible resolution options for cases when\n     * the interval takes part in a conflict.\n     *\n     * The interval suggests the only resolution option - disabling manual scheduling.\n     */\n    getResolutions() {\n        return this.resolutions || (this.resolutions = [\n            this.resetManuallyScheduledConflictResolutionClass.new({ interval: this })\n        ]);\n    }\n}\n__decorate([\n    prototypeValue(DisableManuallyScheduledConflictResolution)\n], ManuallyScheduledParentConstraintInterval.prototype, \"resetManuallyScheduledConflictResolutionClass\", void 0);\n__decorate([\n    prototypeValue(ManuallyScheduledParentConstraintIntervalDescription)\n], ManuallyScheduledParentConstraintInterval.prototype, \"descriptionBuilderClass\", void 0);\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Reject } from \"../../../../ChronoGraph/chrono/Effect.js\";\nimport { Mixin } from '../../../../ChronoGraph/class/BetterMixin.js';\nimport { calculate, field } from '../../../../ChronoGraph/replica/Entity.js';\nimport DateHelper from '../../../../Core/helper/DateHelper.js';\nimport { dateConverter, model_field } from '../../../chrono/ModelFieldAtom.js';\nimport { Direction, TimeUnit, ConstraintIntervalSide } from '../../../scheduling/Types.js';\nimport { MAX_DATE, MIN_DATE, isDateFinite } from \"../../../util/Constants.js\";\nimport { HasChildrenMixin } from '../scheduler_basic/HasChildrenMixin.js';\nimport { ConstrainedEarlyEventMixin, EarlyLateLazyness } from \"../scheduler_pro/ConstrainedEarlyEventMixin.js\";\nimport { ConflictEffect } from '../../../chrono/Conflict.js';\nimport { EffectResolutionResult } from \"../../../chrono/SchedulingIssueEffect.js\";\nimport { ManuallyScheduledParentConstraintInterval } from \"./ConstrainedByParentMixin.js\";\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * This mixin provides the constraint-based as-late-as-possible scheduling. See the [[ConstrainedEarlyEventMixin]]\n * for the description of the ASAP constraints-based scheduling. See [[GanttProjectMixin]] for more details about\n * forward/backward, ASAP/ALAP scheduling.\n *\n * It also provides the facilities for calculating the event's [[totalSlack]] and the [[critical]] flag.\n *\n * The ALAP-specific constraints are accumulated in [[lateStartDateConstraintIntervals]], [[lateEndDateConstraintIntervals]] fields.\n */\nexport class ConstrainedLateEventMixin extends Mixin([ConstrainedEarlyEventMixin, HasChildrenMixin], (base) => {\n    const superProto = base.prototype;\n    class ConstrainedLateEventMixin extends base {\n        /**\n         * Calculation method for the [[lateStartDateConstraintIntervals]]. Returns empty array by default.\n         * Override this method to return some extra constraints for the start date during the ALAP scheduling.\n         */\n        *calculateLateStartDateConstraintIntervals() {\n            const intervals = [];\n            const parentEvent = yield this.$.parentEvent;\n            if (parentEvent) {\n                // Child inherits its parent task constraints\n                const parentIntervals = yield parentEvent.$.lateStartDateConstraintIntervals;\n                intervals.push.apply(intervals, parentIntervals);\n            }\n            return intervals;\n        }\n        /**\n         * Calculation method for the [[lateEndDateConstraintIntervals]]. Returns empty array by default.\n         * Override this method to return some extra constraints for the end date during the ALAP scheduling.\n         */\n        *calculateLateEndDateConstraintIntervals() {\n            const intervals = [];\n            const parentEvent = yield this.$.parentEvent;\n            if (parentEvent) {\n                // Child inherits its parent task constraints\n                const parentIntervals = yield parentEvent.$.lateEndDateConstraintIntervals;\n                intervals.push.apply(intervals, parentIntervals);\n                // If the parent is scheduled manually it should still restrict its children (even though it has no a constraint set)\n                // so we append an artificial constraining interval\n                if ((yield parentEvent.$.manuallyScheduled) && (yield this.$.effectiveDirection).direction === Direction.Backward) {\n                    intervals.push(ManuallyScheduledParentConstraintInterval.new({\n                        side: ConstraintIntervalSide.End,\n                        endDate: yield parentEvent.$.endDate\n                    }));\n                }\n            }\n            return intervals;\n        }\n        /**\n         * The method defines wether the provided child event should be\n         * taken into account when calculating this summary event [[lateStartDate]].\n         * Child events roll up their [[lateStartDate]] values to their summary tasks.\n         * So a summary task [[lateStartDate]] date gets equal to its minimal child [[lateStartDate]].\n         *\n         * If the method returns `true` the child event is taken into account\n         * and if the method returns `false` it's not.\n         * By default the method returns `true` to include all child events data.\n         * @param childEvent Child event to consider.\n         * @returns `true` if the provided event should be taken into account, `false` if not.\n         */\n        *shouldRollupChildLateStartDate(childEvent) {\n            return true;\n        }\n        *calculateMinChildrenLateStartDate() {\n            let result = MAX_DATE;\n            const subEventsIterator = yield* this.subEventsIterable();\n            for (let childEvent of subEventsIterator) {\n                if (!(yield* this.shouldRollupChildLateStartDate(childEvent)))\n                    continue;\n                let childDate;\n                if ((yield childEvent.$.manuallyScheduled) && (yield* childEvent.hasSubEvents())) {\n                    childDate = yield childEvent.$.minChildrenLateStartDate;\n                }\n                childDate = childDate || (yield childEvent.$.lateStartDate);\n                if (childDate && childDate < result)\n                    result = childDate;\n            }\n            return result.getTime() - MAX_DATE.getTime() ? result : null;\n        }\n        *calculateLateStartDateRaw() {\n            // Manually scheduled task treat its current start date as late start date\n            // in case of backward scheduling.\n            // Early dates in that case are calculated the same way it happens for automatic tasks\n            if ((yield this.$.manuallyScheduled) && (yield this.$.effectiveDirection).direction === Direction.Backward) {\n                return yield this.$.startDate;\n            }\n            // Parent task calculate its late start date as minimal late start date of its children\n            if (yield* this.hasSubEvents()) {\n                return yield this.$.minChildrenLateStartDate;\n            }\n            if (!(yield* this.isConstrainedLate())) {\n                return yield this.$.startDate;\n            }\n            // need to use concat instead of directly mutating the `startDateConstraintIntervals` since that is\n            // used as storage for `this.$.lateStartDateConstraintIntervals`\n            const startDateConstraintIntervals = (yield this.$.lateStartDateConstraintIntervals).concat(yield this.$.startDateConstraintIntervals);\n            const endDateConstraintIntervals = (yield this.$.lateEndDateConstraintIntervals).concat(yield this.$.endDateConstraintIntervals);\n            let effectiveInterval = yield* this.calculateEffectiveConstraintInterval(true, startDateConstraintIntervals, endDateConstraintIntervals);\n            if (effectiveInterval === null) {\n                return null;\n            }\n            else if (effectiveInterval.isIntervalEmpty()) {\n                // re-calculate effective resulting interval gathering intersection history\n                effectiveInterval = yield* this.calculateEffectiveConstraintInterval(true, startDateConstraintIntervals, endDateConstraintIntervals, true);\n                const conflict = ConflictEffect.new({\n                    intervals: [...effectiveInterval.intersectionOf]\n                });\n                if ((yield conflict) === EffectResolutionResult.Cancel) {\n                    yield Reject(conflict);\n                }\n                else {\n                    return null;\n                }\n            }\n            return isDateFinite(effectiveInterval.endDate) ? effectiveInterval.endDate : null;\n        }\n        /**\n         * The method defines wether the provided child event should be\n         * taken into account when calculating this summary event [[lateEndDate]].\n         * Child events roll up their [[lateEndDate]] values to their summary tasks.\n         * So a summary task [[lateEndDate]] gets equal to its maximal child [[lateEndDate]].\n         *\n         * If the method returns `true` the child event is taken into account\n         * and if the method returns `false` it's not.\n         * By default the method returns `true` to include all child events data.\n         * @param childEvent Child event to consider.\n         * @returns `true` if the provided event should be taken into account, `false` if not.\n         */\n        *shouldRollupChildLateEndDate(childEvent) {\n            return true;\n        }\n        *calculateMaxChildrenLateEndDate() {\n            let result = MIN_DATE;\n            const subEventsIterator = yield* this.subEventsIterable();\n            for (let childEvent of subEventsIterator) {\n                if (!(yield* this.shouldRollupChildLateEndDate(childEvent)))\n                    continue;\n                let childDate;\n                if ((yield childEvent.$.manuallyScheduled) && (yield* childEvent.hasSubEvents())) {\n                    childDate = yield childEvent.$.maxChildrenLateEndDate;\n                }\n                childDate = childDate || (yield childEvent.$.lateEndDate);\n                if (childDate && childDate > result)\n                    result = childDate;\n            }\n            return result.getTime() - MIN_DATE.getTime() ? result : null;\n        }\n        *calculateLateStartDate() {\n            return yield this.$.lateStartDateRaw;\n        }\n        *calculateLateEndDateRaw() {\n            // Manually scheduled task treat its current end date as late end date\n            // in case of backward scheduling.\n            // Early dates in that case are calculated the same way it happens for automatic tasks\n            if ((yield this.$.manuallyScheduled) && (yield this.$.effectiveDirection).direction === Direction.Backward) {\n                return yield this.$.endDate;\n            }\n            // Parent task calculate its late end date as minimal early end date of its children\n            if (yield* this.hasSubEvents()) {\n                return yield this.$.maxChildrenLateEndDate;\n            }\n            if (!(yield* this.isConstrainedLate())) {\n                return yield this.$.endDate;\n            }\n            const startDateConstraintIntervals = yield this.$.lateStartDateConstraintIntervals;\n            const endDateConstraintIntervals = yield this.$.lateEndDateConstraintIntervals;\n            let effectiveInterval = (yield* this.calculateEffectiveConstraintInterval(false, \n            // need to use concat instead of directly mutating the `startDateConstraintIntervals` since that is\n            // used as storage for `this.$.lateStartDateConstraintIntervals`\n            startDateConstraintIntervals.concat(yield this.$.startDateConstraintIntervals), endDateConstraintIntervals.concat(yield this.$.endDateConstraintIntervals)));\n            if (effectiveInterval === null) {\n                return null;\n            }\n            else if (effectiveInterval.isIntervalEmpty()) {\n                // re-calculate effective resulting interval gathering intersection history\n                effectiveInterval = (yield* this.calculateEffectiveConstraintInterval(false, \n                // need to use concat instead of directly mutating the `startDateConstraintIntervals` since that is\n                // used as storage for `this.$.lateStartDateConstraintIntervals`\n                (yield this.$.lateStartDateConstraintIntervals).concat(yield this.$.startDateConstraintIntervals), (yield this.$.lateEndDateConstraintIntervals).concat(yield this.$.endDateConstraintIntervals), true));\n                const conflict = ConflictEffect.new({\n                    intervals: [...effectiveInterval.intersectionOf]\n                });\n                if ((yield conflict) === EffectResolutionResult.Cancel) {\n                    yield Reject(conflict);\n                }\n                else {\n                    return null;\n                }\n            }\n            return isDateFinite(effectiveInterval.endDate) ? effectiveInterval.endDate : null;\n        }\n        *calculateLateEndDate() {\n            const date = yield this.$.lateEndDateRaw;\n            return yield* this.maybeSkipNonWorkingTime(date, false);\n        }\n        *calculateTotalSlack() {\n            const earlyStartDate = yield this.$.earlyStartDateRaw;\n            const lateStartDate = yield this.$.lateStartDateRaw;\n            const earlyEndDate = yield this.$.earlyEndDateRaw;\n            const lateEndDate = yield this.$.lateEndDateRaw;\n            const slackUnit = yield this.$.slackUnit;\n            let endSlack, result;\n            if ((earlyStartDate && lateStartDate) || (earlyEndDate && lateEndDate)) {\n                if (earlyStartDate && lateStartDate) {\n                    result = yield* this.calculateProjectedDuration(earlyStartDate, lateStartDate, slackUnit);\n                    if (earlyEndDate && lateEndDate) {\n                        endSlack = yield* this.calculateProjectedDuration(earlyEndDate, lateEndDate, slackUnit);\n                        if (endSlack < result)\n                            result = endSlack;\n                    }\n                }\n                else if (earlyEndDate && lateEndDate) {\n                    result = yield* this.calculateProjectedDuration(earlyEndDate, lateEndDate, slackUnit);\n                }\n            }\n            return result;\n        }\n        *calculateCritical() {\n            const totalSlack = yield this.$.totalSlack;\n            return totalSlack <= 0;\n        }\n        *isConstrainedLate() {\n            const startDateIntervals = yield this.$.startDateConstraintIntervals;\n            const endDateIntervals = yield this.$.endDateConstraintIntervals;\n            const lateStartDateConstraintIntervals = yield this.$.lateStartDateConstraintIntervals;\n            const lateEndDateConstraintIntervals = yield this.$.lateEndDateConstraintIntervals;\n            return Boolean(startDateIntervals?.length || endDateIntervals?.length || lateStartDateConstraintIntervals?.length || lateEndDateConstraintIntervals?.length);\n        }\n        *calculateStartDatePure() {\n            const direction = yield this.$.effectiveDirection;\n            if (direction.direction === Direction.Backward) {\n                // early exit if this mixin is not applicable, but only after(!) the direction check\n                // this is because the `isConstrainedLate` yield early constraint intervals, which are generally lazy,\n                // depending on the direction\n                if (!(yield* this.isConstrainedLate()) || (yield this.$.manuallyScheduled) || (yield this.$.unscheduled)) {\n                    return yield* superProto.calculateStartDatePure.call(this);\n                }\n                if (yield* this.hasSubEvents()) {\n                    return yield* this.calculateMinChildrenStartDate();\n                }\n                else\n                    return yield this.$.lateStartDate;\n            }\n            else {\n                return yield* superProto.calculateStartDatePure.call(this);\n            }\n        }\n        *calculateStartDateProposed() {\n            const direction = yield this.$.effectiveDirection;\n            switch (direction.direction) {\n                case Direction.Backward:\n                    // early exit if this mixin is not applicable, but only after(!) the direction check\n                    // this is because the `isConstrainedLate` yield early constraint intervals, which are generally lazy,\n                    // depending on the direction\n                    if (!(yield* this.isConstrainedLate()) || (yield this.$.manuallyScheduled) || (yield this.$.unscheduled)) {\n                        return yield* superProto.calculateStartDateProposed.call(this);\n                    }\n                    if (yield* this.hasSubEvents()) {\n                        return yield* this.calculateMinChildrenStartDate();\n                    }\n                    return (yield this.$.lateStartDate) || (yield* superProto.calculateStartDateProposed.call(this));\n                default:\n                    return yield* superProto.calculateStartDateProposed.call(this);\n            }\n        }\n        *calculateEndDatePure() {\n            const direction = yield this.$.effectiveDirection;\n            if (direction.direction === Direction.Backward) {\n                // early exit if this mixin is not applicable, but only after(!) the direction check\n                // this is because the `isConstrainedLate` yield early constraint intervals, which are generally lazy,\n                // depending on the direction\n                if (!(yield* this.isConstrainedLate()) || (yield this.$.manuallyScheduled) || (yield this.$.unscheduled)) {\n                    return yield* superProto.calculateEndDatePure.call(this);\n                }\n                if (yield* this.hasSubEvents()) {\n                    return yield* this.calculateMaxChildrenEndDate();\n                }\n                else\n                    return yield this.$.lateEndDate;\n            }\n            else {\n                return yield* superProto.calculateEndDatePure.call(this);\n            }\n        }\n        *calculateEndDateProposed() {\n            const direction = yield this.$.effectiveDirection;\n            switch (direction.direction) {\n                case Direction.Backward:\n                    // early exit if this mixin is not applicable, but only after(!) the direction check\n                    // this is because the `isConstrainedLate` yield early constraint intervals, which are generally lazy,\n                    // depending on the direction\n                    if (!(yield* this.isConstrainedLate()) || (yield this.$.manuallyScheduled) || (yield this.$.unscheduled)) {\n                        return yield* superProto.calculateEndDateProposed.call(this);\n                    }\n                    if (yield* this.hasSubEvents()) {\n                        return yield* this.calculateMaxChildrenEndDate();\n                    }\n                    return (yield this.$.lateEndDate) || (yield* superProto.calculateEndDateProposed.call(this));\n                default:\n                    return yield* superProto.calculateEndDateProposed.call(this);\n            }\n        }\n    }\n    __decorate([\n        field({ lazy: EarlyLateLazyness })\n    ], ConstrainedLateEventMixin.prototype, \"minChildrenLateStartDate\", void 0);\n    __decorate([\n        field({ lazy: EarlyLateLazyness })\n    ], ConstrainedLateEventMixin.prototype, \"lateStartDateRaw\", void 0);\n    __decorate([\n        model_field({ type: 'date', persist: false }, { lazy: EarlyLateLazyness, converter: dateConverter, persistent: false })\n    ], ConstrainedLateEventMixin.prototype, \"lateStartDate\", void 0);\n    __decorate([\n        field({ lazy: EarlyLateLazyness })\n    ], ConstrainedLateEventMixin.prototype, \"maxChildrenLateEndDate\", void 0);\n    __decorate([\n        field({ lazy: EarlyLateLazyness })\n    ], ConstrainedLateEventMixin.prototype, \"lateEndDateRaw\", void 0);\n    __decorate([\n        model_field({ type: 'date', persist: false }, { lazy: EarlyLateLazyness, converter: dateConverter, persistent: false })\n    ], ConstrainedLateEventMixin.prototype, \"lateEndDate\", void 0);\n    __decorate([\n        field({ lazy: EarlyLateLazyness })\n    ], ConstrainedLateEventMixin.prototype, \"lateStartDateConstraintIntervals\", void 0);\n    __decorate([\n        field({ lazy: EarlyLateLazyness })\n    ], ConstrainedLateEventMixin.prototype, \"lateEndDateConstraintIntervals\", void 0);\n    __decorate([\n        model_field({ type: 'number', persist: false }, { lazy: EarlyLateLazyness, persistent: false })\n    ], ConstrainedLateEventMixin.prototype, \"totalSlack\", void 0);\n    __decorate([\n        model_field({ type: 'string', defaultValue: TimeUnit.Day, persist: false }, { lazy: EarlyLateLazyness, converter: DateHelper.normalizeUnit, persistent: false })\n    ], ConstrainedLateEventMixin.prototype, \"slackUnit\", void 0);\n    __decorate([\n        model_field({ type: 'boolean', defaultValue: false, persist: false }, { persistent: false, lazy: EarlyLateLazyness })\n    ], ConstrainedLateEventMixin.prototype, \"critical\", void 0);\n    __decorate([\n        calculate('lateStartDateConstraintIntervals')\n    ], ConstrainedLateEventMixin.prototype, \"calculateLateStartDateConstraintIntervals\", null);\n    __decorate([\n        calculate('lateEndDateConstraintIntervals')\n    ], ConstrainedLateEventMixin.prototype, \"calculateLateEndDateConstraintIntervals\", null);\n    __decorate([\n        calculate('minChildrenLateStartDate')\n    ], ConstrainedLateEventMixin.prototype, \"calculateMinChildrenLateStartDate\", null);\n    __decorate([\n        calculate('lateStartDateRaw')\n    ], ConstrainedLateEventMixin.prototype, \"calculateLateStartDateRaw\", null);\n    __decorate([\n        calculate('maxChildrenLateEndDate')\n    ], ConstrainedLateEventMixin.prototype, \"calculateMaxChildrenLateEndDate\", null);\n    __decorate([\n        calculate('lateStartDate')\n    ], ConstrainedLateEventMixin.prototype, \"calculateLateStartDate\", null);\n    __decorate([\n        calculate('lateEndDateRaw')\n    ], ConstrainedLateEventMixin.prototype, \"calculateLateEndDateRaw\", null);\n    __decorate([\n        calculate('lateEndDate')\n    ], ConstrainedLateEventMixin.prototype, \"calculateLateEndDate\", null);\n    __decorate([\n        calculate('totalSlack')\n    ], ConstrainedLateEventMixin.prototype, \"calculateTotalSlack\", null);\n    __decorate([\n        calculate('critical')\n    ], ConstrainedLateEventMixin.prototype, \"calculateCritical\", null);\n    return ConstrainedLateEventMixin;\n}) {\n}\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Mixin } from '../../../../ChronoGraph/class/BetterMixin.js';\nimport { calculate } from '../../../../ChronoGraph/replica/Entity.js';\nimport { isAtomicValue } from '../../../../ChronoGraph/util/Helpers.js';\nimport { ConstraintType, DependencyType, Direction, TimeUnit } from '../../../scheduling/Types.js';\nimport { ScheduledByDependenciesEarlyEventMixin } from \"../scheduler_pro/ScheduledByDependenciesEarlyEventMixin.js\";\nimport { ConstrainedLateEventMixin } from \"./ConstrainedLateEventMixin.js\";\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * This mixin adds support for scheduling event ALAP, by dependencies. All it does is\n * create the \"late\" constraint interval for every outgoing dependency.\n *\n * See [[ConstrainedEarlyEventMixin]] for more details about constraint-based scheduling.\n * See also [[ScheduledByDependenciesEarlyEventMixin]].\n */\nexport class ScheduledByDependenciesLateEventMixin extends Mixin([ScheduledByDependenciesEarlyEventMixin, ConstrainedLateEventMixin], (base) => {\n    const superProto = base.prototype;\n    class ScheduledByDependenciesLateEventMixin extends base {\n        *shouldSuccessorAffectScheduling(dependency) {\n            const toEvent = yield dependency.$.toEvent;\n            // ignore missing target events and inactive dependencies\n            return toEvent && !isAtomicValue(toEvent) && (yield dependency.$.active)\n                // and inactive target events (unless this event is also inactive)\n                && (!(yield toEvent.$.inactive) || (yield this.$.inactive));\n        }\n        *calculateLateStartDateConstraintIntervals() {\n            const intervals = yield* superProto.calculateLateStartDateConstraintIntervals.call(this);\n            const project = this.getProject();\n            const dependencyConstraintIntervalClass = project.dependencyConstraintIntervalClass;\n            let dependency;\n            for (dependency of (yield this.$.outgoingDeps)) {\n                // ignore missing target events and inactive dependencies\n                if (!(yield* this.shouldSuccessorAffectScheduling(dependency)))\n                    continue;\n                const successor = yield dependency.$.toEvent;\n                const manuallyScheduled = yield successor.$.manuallyScheduled;\n                let successorDate;\n                switch (yield dependency.$.type) {\n                    case DependencyType.StartToStart:\n                        successorDate = manuallyScheduled\n                            ? yield successor.$.startDate\n                            : yield successor.$.lateStartDateRaw;\n                        break;\n                    case DependencyType.StartToEnd:\n                        successorDate = manuallyScheduled\n                            ? yield successor.$.endDate\n                            : yield successor.$.lateEndDateRaw;\n                        break;\n                }\n                if (successorDate) {\n                    const lag = yield dependency.$.lag;\n                    const lagUnit = yield dependency.$.lagUnit;\n                    const lagMS = yield* project.$convertDuration(lag, lagUnit, TimeUnit.Millisecond);\n                    const calendar = yield dependency.$.calendar;\n                    // this \"subscribes\" on the calendar's `version` field (which is incremented\n                    // every time when the intervals of the calendar changes)\n                    yield calendar.$.version;\n                    let endDate = successorDate;\n                    // Take lag into account\n                    if (lagMS) {\n                        // Skip non-wroking time forward to constrain the event as late as possible\n                        // (could affect if the event and successor use different calendars)\n                        endDate = calendar.skipNonWorkingTime(calendar.calculateStartDate(successorDate, lagMS));\n                    }\n                    const interval = dependencyConstraintIntervalClass.new({\n                        owner: dependency,\n                        startDate: null,\n                        endDate,\n                    });\n                    intervals.unshift(interval);\n                }\n            }\n            return intervals;\n        }\n        *calculateLateEndDateConstraintIntervals() {\n            const intervals = yield* superProto.calculateLateEndDateConstraintIntervals.call(this);\n            const project = this.getProject();\n            const dependencyConstraintIntervalClass = project.dependencyConstraintIntervalClass;\n            let dependency;\n            for (dependency of (yield this.$.outgoingDeps)) {\n                // ignore missing target events and inactive dependencies\n                if (!(yield* this.shouldSuccessorAffectScheduling(dependency)))\n                    continue;\n                const successor = yield dependency.$.toEvent;\n                const manuallyScheduled = yield successor.$.manuallyScheduled;\n                let successorDate;\n                switch (yield dependency.$.type) {\n                    case DependencyType.EndToEnd:\n                        successorDate = manuallyScheduled\n                            ? yield successor.$.endDate\n                            : yield successor.$.lateEndDateRaw;\n                        break;\n                    case DependencyType.EndToStart:\n                        successorDate = manuallyScheduled\n                            ? yield successor.$.startDate\n                            : yield successor.$.lateStartDateRaw;\n                        break;\n                }\n                if (successorDate) {\n                    const lag = yield dependency.$.lag;\n                    const lagUnit = yield dependency.$.lagUnit;\n                    const lagMS = yield* project.$convertDuration(lag, lagUnit, TimeUnit.Millisecond);\n                    const calendar = yield dependency.$.calendar;\n                    // this \"subscribes\" on the calendar's `version` field (which is incremented\n                    // every time when the intervals of the calendar changes)\n                    yield calendar.$.version;\n                    let endDate = successorDate;\n                    // Take lag into account\n                    if (lagMS) {\n                        // Skip non-wroking time forward to constrain the event as late as possible\n                        // (could affect if the event and successor use different calendars)\n                        endDate = calendar.skipNonWorkingTime(calendar.calculateStartDate(successorDate, lagMS));\n                    }\n                    const interval = dependencyConstraintIntervalClass.new({\n                        owner: dependency,\n                        startDate: null,\n                        endDate,\n                    });\n                    intervals.unshift(interval);\n                }\n            }\n            return intervals;\n        }\n        *calculateEffectiveDirection() {\n            const projectDirection = yield this.getProject().$.effectiveDirection;\n            const ownConstraintType = yield this.$.constraintType;\n            if (projectDirection.direction === Direction.Backward\n                && !(yield this.$.manuallyScheduled)\n                && !((ownConstraintType === ConstraintType.MustStartOn || ownConstraintType === ConstraintType.MustFinishOn)\n                    && Boolean(yield this.$.constraintDate))) {\n                for (const dependency of (yield this.$.outgoingDeps)) {\n                    const successor = yield dependency.$.toEvent;\n                    const hasSuccessor = successor != null && !isAtomicValue(successor);\n                    const constraintType = hasSuccessor ? yield successor.$.constraintType : undefined;\n                    // ignore missing from events, unresolved from events (id given but not resolved),\n                    // inactive dependencies and manually scheduled successors\n                    if (!hasSuccessor || !(yield dependency.$.active) || (yield successor.$.manuallyScheduled)\n                        || ((constraintType === ConstraintType.MustStartOn || constraintType === ConstraintType.MustFinishOn)\n                            && Boolean(yield successor.$.constraintDate)))\n                        continue;\n                    // pick the direction of the successor from the right side\n                    const dependencyType = yield dependency.$.type;\n                    const successorDirection = dependencyType === DependencyType.EndToEnd || dependencyType === DependencyType.StartToEnd\n                        ? yield successor.$.endDateDirection\n                        : yield successor.$.startDateDirection;\n                    if (successorDirection.direction === Direction.Forward)\n                        return {\n                            // our TS version is a bit too old\n                            kind: 'enforced',\n                            direction: Direction.Forward,\n                            enforcedBy: successorDirection.kind === 'enforced'\n                                ? successorDirection.enforcedBy\n                                : successorDirection.kind === 'own'\n                                    ? successor\n                                    : successorDirection.inheritedFrom\n                        };\n                }\n            }\n            return yield* super.calculateEffectiveDirection();\n        }\n    }\n    __decorate([\n        calculate('lateStartDateIntervals')\n    ], ScheduledByDependenciesLateEventMixin.prototype, \"calculateLateStartDateConstraintIntervals\", null);\n    return ScheduledByDependenciesLateEventMixin;\n}) {\n}\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { ProposedOrPrevious } from \"../../../../ChronoGraph/chrono/Effect.js\";\nimport { Mixin } from \"../../../../ChronoGraph/class/Mixin.js\";\nimport { calculate, write } from \"../../../../ChronoGraph/replica/Entity.js\";\nimport { ScheduledByDependenciesLateEventMixin } from \"../gantt/ScheduledByDependenciesLateEventMixin.js\";\nexport class InactiveEventMixin extends Mixin([ScheduledByDependenciesLateEventMixin], (base) => {\n    const superProto = base.prototype;\n    class InactiveEventMixin extends base {\n        writeInactive(me, transaction, quark, inactive) {\n            const isLoading = !transaction.baseRevision.hasIdentifier(me);\n            me.constructor.prototype.write.call(this, me, transaction, quark, inactive);\n            // @ts-ignore\n            // Apply parent inactive state to children unless we are loading data or undoing/redoing some changes\n            // in such cases both parent and children data are supposed to be provided\n            if (!isLoading && this.children && !this.stm?.isRestoring) {\n                for (const child of this.children) {\n                    child.inactive = inactive;\n                }\n            }\n        }\n        *calculateInactive() {\n            const inactive = yield ProposedOrPrevious;\n            // A summary task is active if it has at least one active sub-event\n            if (yield* this.hasSubEvents()) {\n                const subEvents = yield* this.subEventsIterable();\n                let activeCnt = 0;\n                for (const subEvent of subEvents) {\n                    // calculate active sub-events count\n                    if (!(yield subEvent.$.inactive))\n                        activeCnt++;\n                }\n                // inactive if it has no active sub-events\n                return !activeCnt;\n            }\n            return inactive;\n        }\n        *shouldRollupChildEffort(child) {\n            return !(yield child.$.inactive) || (yield this.$.inactive);\n        }\n        *shouldRollupChildPercentDoneSummaryData(child) {\n            return !(yield child.$.inactive) || (yield this.$.inactive);\n        }\n        *shouldRollupChildStartDate(child) {\n            // Do not take into account inactive children dates when calculating\n            // their parent start/end dates (unless the parent is also inactive)\n            return !(yield child.$.inactive) || (yield this.$.inactive);\n        }\n        *shouldRollupChildEndDate(child) {\n            // Do not take into account inactive children dates when calculating\n            // their parent start/end dates (unless the parent is also inactive)\n            return !(yield child.$.inactive) || (yield this.$.inactive);\n        }\n        *shouldRollupChildEarlyStartDate(childEvent) {\n            // Do not take into account inactive children dates when calculating\n            // their parent start end dates (unless the parent is also inactive)\n            return !(yield childEvent.$.inactive) || (yield this.$.inactive);\n        }\n        *shouldRollupChildEarlyEndDate(childEvent) {\n            // Do not take into account inactive children dates when calculating\n            // their parent start end dates (unless the parent is also inactive)\n            return !(yield childEvent.$.inactive) || (yield this.$.inactive);\n        }\n        *shouldRollupChildLateStartDate(childEvent) {\n            // Do not take into account inactive children dates when calculating\n            // their parent start end dates (unless the parent is also inactive)\n            return !(yield childEvent.$.inactive) || (yield this.$.inactive);\n        }\n        *shouldRollupChildLateEndDate(childEvent) {\n            // Do not take into account inactive children dates when calculating\n            // their parent start end dates (unless the parent is also inactive)\n            return !(yield childEvent.$.inactive) || (yield this.$.inactive);\n        }\n    }\n    __decorate([\n        write('inactive')\n    ], InactiveEventMixin.prototype, \"writeInactive\", null);\n    __decorate([\n        calculate('inactive')\n    ], InactiveEventMixin.prototype, \"calculateInactive\", null);\n    return InactiveEventMixin;\n}) {\n}\n", "import { CycleResolution, CycleDescription } from \"../../../../../ChronoGraph/cycle_resolver/CycleResolver.js\";\nimport { durationFormula, DurationVar, endDateFormula, EndDateVar, startDateFormula, StartDateVar } from \"../../scheduler_basic/BaseEventDispatcher.js\";\nimport { effortFormula, EffortVar, endDateByEffortFormula, startDateByEffortFormula, unitsFormula, UnitsVar } from \"../../scheduler_pro/HasEffortDispatcher.js\";\n//---------------------------------------------------------------------------------------------------------------------\nexport const fixedEffortSEDWUGraphDescription = CycleDescription.new({\n    variables: new Set([StartDateVar, EndDateVar, DurationVar, EffortVar, UnitsVar]),\n    formulas: new Set([\n        // the order of formulas is important here - the earlier ones are preferred\n        endDateByEffortFormula,\n        durationFormula,\n        unitsFormula,\n        effortFormula,\n        startDateByEffortFormula,\n        startDateFormula,\n        endDateFormula\n    ])\n});\n//---------------------------------------------------------------------------------------------------------------------\nexport const fixedEffortSEDWUForward = CycleResolution.new({\n    description: fixedEffortSEDWUGraphDescription,\n    defaultResolutionFormulas: new Set([endDateByEffortFormula, durationFormula])\n});\nexport const fixedEffortSEDWUBackward = CycleResolution.new({\n    description: fixedEffortSEDWUGraphDescription,\n    defaultResolutionFormulas: new Set([startDateByEffortFormula, durationFormula])\n});\n", "import { HasProposedValue } from \"../../../../../ChronoGraph/chrono/Effect.js\";\nimport { Mixin } from \"../../../../../ChronoGraph/class/BetterMixin.js\";\nimport { Direction, SchedulingMode } from \"../../../../scheduling/Types.js\";\nimport { EffortVar, UnitsVar } from \"../../scheduler_pro/HasEffortDispatcher.js\";\nimport { HasSchedulingModeMixin } from \"../../scheduler_pro/HasSchedulingModeMixin.js\";\nimport { fixedEffortSEDWUBackward, fixedEffortSEDWUForward } from \"./FixedEffortDispatcher.js\";\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * This mixin provides the fixed effort scheduling mode facility. The scheduling mode is controlled with the\n * [[HasSchedulingModeMixin.schedulingMode]] field.\n *\n * See [[HasSchedulingModeMixin]] for more details.\n *\n * In this mode, the effort of the task remains \"fixed\" as the name suggest. It is changed only if there's no other options,\n * for example if both \"duration\" and \"units\" has changed. In other cases, some other variable is updated.\n */\nexport class FixedEffortMixin extends Mixin([HasSchedulingModeMixin], (base) => {\n    const superProto = base.prototype;\n    class FixedEffortMixin extends base {\n        *prepareDispatcher(YIELD) {\n            const schedulingMode = yield* this.effectiveSchedulingMode();\n            if (schedulingMode === SchedulingMode.FixedEffort) {\n                const cycleDispatcher = yield* superProto.prepareDispatcher.call(this, YIELD);\n                if (yield HasProposedValue(this.$.assigned))\n                    cycleDispatcher.addProposedValueFlag(UnitsVar);\n                cycleDispatcher.addKeepIfPossibleFlag(EffortVar);\n                return cycleDispatcher;\n            }\n            else {\n                return yield* superProto.prepareDispatcher.call(this, YIELD);\n            }\n        }\n        cycleResolutionContext(Y) {\n            const schedulingMode = this.effectiveSchedulingModeSync(Y);\n            if (schedulingMode === SchedulingMode.FixedEffort) {\n                const direction = Y(this.$.effectiveDirection);\n                return direction.direction === Direction.Forward || direction.direction === Direction.None ? fixedEffortSEDWUForward : fixedEffortSEDWUBackward;\n            }\n            else {\n                return superProto.cycleResolutionContext.call(this, Y);\n            }\n        }\n    }\n    return FixedEffortMixin;\n}) {\n}\n", "import { CycleResolution, CycleDescription } from \"../../../../../ChronoGraph/cycle_resolver/CycleResolver.js\";\nimport { durationFormula, DurationVar, endDateFormula, EndDateVar, startDateFormula, StartDateVar } from \"../../scheduler_basic/BaseEventDispatcher.js\";\nimport { effortFormula, EffortVar, endDateByEffortFormula, startDateByEffortFormula, unitsFormula, UnitsVar } from \"../../scheduler_pro/HasEffortDispatcher.js\";\n//---------------------------------------------------------------------------------------------------------------------\nexport const fixedUnitsSEDWUGraphDescription = CycleDescription.new({\n    variables: new Set([StartDateVar, EndDateVar, DurationVar, EffortVar, UnitsVar]),\n    formulas: new Set([\n        // the order of formulas is important here - the earlier ones are preferred\n        endDateByEffortFormula,\n        durationFormula,\n        effortFormula,\n        unitsFormula,\n        startDateByEffortFormula,\n        startDateFormula,\n        endDateFormula\n    ])\n});\n//---------------------------------------------------------------------------------------------------------------------\nexport const fixedUnitsSEDWUForwardNonEffortDriven = CycleResolution.new({\n    description: fixedUnitsSEDWUGraphDescription,\n    defaultResolutionFormulas: new Set([endDateByEffortFormula, endDateFormula, effortFormula])\n});\nexport const fixedUnitsSEDWUForwardEffortDriven = CycleResolution.new({\n    description: fixedUnitsSEDWUGraphDescription,\n    defaultResolutionFormulas: new Set([endDateByEffortFormula, endDateFormula, durationFormula])\n});\nexport const fixedUnitsSEDWUBackwardNonEffortDriven = CycleResolution.new({\n    description: fixedUnitsSEDWUGraphDescription,\n    defaultResolutionFormulas: new Set([startDateByEffortFormula, startDateFormula, effortFormula])\n});\nexport const fixedUnitsSEDWUBackwardEffortDriven = CycleResolution.new({\n    description: fixedUnitsSEDWUGraphDescription,\n    defaultResolutionFormulas: new Set([startDateByEffortFormula, startDateFormula, durationFormula])\n});\n", "import { HasProposedValue } from \"../../../../../ChronoGraph/chrono/Effect.js\";\nimport { Mixin } from \"../../../../../ChronoGraph/class/BetterMixin.js\";\nimport { Direction, SchedulingMode } from \"../../../../scheduling/Types.js\";\nimport { EffortVar, UnitsVar } from \"../../scheduler_pro/HasEffortDispatcher.js\";\nimport { HasSchedulingModeMixin } from \"../../scheduler_pro/HasSchedulingModeMixin.js\";\nimport { fixedUnitsSEDWUBackwardEffortDriven, fixedUnitsSEDWUBackwardNonEffortDriven, fixedUnitsSEDWUForwardEffortDriven, fixedUnitsSEDWUForwardNonEffortDriven } from \"./FixedUnitsDispatcher.js\";\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * This mixin provides the fixed units scheduling mode facility. The scheduling mode is controlled with the\n * [[HasSchedulingModeMixin.schedulingMode]] field.\n *\n * See [[HasSchedulingModeMixin]] for more details.\n *\n * In this mode, the assignment units of the task's assignments remains \"fixed\" as the name suggest.\n * Those are changed only if there's no other options, for example if both \"duration\" and \"effort\" has changed.\n *\n * If the [[HasSchedulingModeMixin.effortDriven]] flag is enabled, effort variable becomes \"fixed\" as well, so normally the \"duration\"\n * variable will change. If that flag is disabled, then \"effort\" will be changed.\n */\nexport class FixedUnitsMixin extends Mixin([HasSchedulingModeMixin], (base) => {\n    const superProto = base.prototype;\n    class FixedUnitsMixin extends base {\n        *prepareDispatcher(YIELD) {\n            const schedulingMode = yield* this.effectiveSchedulingMode();\n            if (schedulingMode === SchedulingMode.FixedUnits) {\n                const cycleDispatcher = yield* superProto.prepareDispatcher.call(this, YIELD);\n                if (yield HasProposedValue(this.$.assigned))\n                    cycleDispatcher.addProposedValueFlag(UnitsVar);\n                if (yield this.$.effortDriven)\n                    cycleDispatcher.addKeepIfPossibleFlag(EffortVar);\n                cycleDispatcher.addKeepIfPossibleFlag(UnitsVar);\n                return cycleDispatcher;\n            }\n            else {\n                return yield* superProto.prepareDispatcher.call(this, YIELD);\n            }\n        }\n        cycleResolutionContext(Y) {\n            const schedulingMode = this.effectiveSchedulingModeSync(Y);\n            if (schedulingMode === SchedulingMode.FixedUnits) {\n                const direction = Y(this.$.effectiveDirection);\n                const effortDriven = Y(this.$.effortDriven);\n                if (direction.direction === Direction.Forward || direction.direction === Direction.None) {\n                    return effortDriven ? fixedUnitsSEDWUForwardEffortDriven : fixedUnitsSEDWUForwardNonEffortDriven;\n                }\n                else {\n                    return effortDriven ? fixedUnitsSEDWUBackwardEffortDriven : fixedUnitsSEDWUBackwardNonEffortDriven;\n                }\n            }\n            else {\n                return superProto.cycleResolutionContext.call(this, Y);\n            }\n        }\n    }\n    return FixedUnitsMixin;\n}) {\n}\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { ProposedOrPrevious, ProposedOrPreviousValueOf, Reject } from \"../../../../ChronoGraph/chrono/Effect.js\";\nimport { MixinAny } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { CalculateProposed } from \"../../../../ChronoGraph/cycle_resolver/CycleResolver.js\";\nimport { calculate, field } from \"../../../../ChronoGraph/replica/Entity.js\";\nimport { prototypeValue } from \"../../../../ChronoGraph/util/Helpers.js\";\nimport Base from \"../../../../Core/Base.js\";\nimport DateHelper from \"../../../../Core/helper/DateHelper.js\";\nimport Localizable from \"../../../../Core/localization/Localizable.js\";\nimport { ConflictEffect, ConflictResolution } from \"../../../chrono/Conflict.js\";\nimport { model_field } from \"../../../chrono/ModelFieldAtom.js\";\nimport { EffectResolutionResult } from \"../../../chrono/SchedulingIssueEffect.js\";\nimport { ConstraintIntervalSide, Direction, ProjectConstraintResolution } from \"../../../scheduling/Types.js\";\nimport { format } from \"../../../util/Functions.js\";\nimport { DurationVar, EndDateVar, StartDateVar } from \"../scheduler_basic/BaseEventDispatcher.js\";\nimport { SchedulerProEvent } from \"../scheduler_pro/SchedulerProEvent.js\";\nimport { ConstrainedByParentMixin } from \"./ConstrainedByParentMixin.js\";\nimport { ConstrainedLateEventMixin } from \"./ConstrainedLateEventMixin.js\";\nimport { InactiveEventMixin } from \"./InactiveEventMixin.js\";\nimport { ScheduledByDependenciesLateEventMixin } from \"./ScheduledByDependenciesLateEventMixin.js\";\nimport { FixedEffortMixin } from \"./scheduling_modes/FixedEffortMixin.js\";\nimport { FixedUnitsMixin } from \"./scheduling_modes/FixedUnitsMixin.js\";\n/**\n * This is an event class, [[GanttProjectMixin]] is working with.\n * It is constructed as [[SchedulerProEvent]], enhanced with extra functionality.\n */\nexport class GanttEvent extends MixinAny([\n    SchedulerProEvent,\n    ConstrainedByParentMixin,\n    ConstrainedLateEventMixin,\n    ScheduledByDependenciesLateEventMixin,\n    FixedEffortMixin,\n    FixedUnitsMixin,\n    InactiveEventMixin\n], (base) => {\n    class GanttEvent extends base {\n        *calculateCheckProjectConstraint() {\n            let value = yield ProposedOrPrevious;\n            if (value) {\n                yield* this.validateProjectConstraint();\n                value = false;\n            }\n            return value;\n        }\n        *calculateStartDate() {\n            // project border should be validated before we report final start date value\n            yield this.$.checkProjectConstraint;\n            return yield* super.calculateStartDate();\n        }\n        *calculateEndDate() {\n            // project border should be validated before we report final end date value\n            yield this.$.checkProjectConstraint;\n            return yield* super.calculateEndDate();\n        }\n        writeStartDate(me, transaction, quark, date, keepDuration = true) {\n            const fieldName = this.constructor.getFieldDataSource('projectConstraintResolution');\n            // If writing a date (not caused by STM changes undoing/redoing)\n            // and if that's and initial task processing check if projectConstraintResolution has \"conflict\"\n            // to not add extra work to initial data loading\n            if (date && !this.stm?.isRestoring && (transaction.graph.hasIdentifier(this.$.effectiveDirection) ||\n                (this.projectConstraintResolution || this.data[fieldName]) === ProjectConstraintResolution.Conflict)) {\n                // raise a flag causing provided date validation\n                this.checkProjectConstraint = true;\n            }\n            return super.writeStartDate(me, transaction, quark, date, keepDuration);\n        }\n        writeEndDate(me, transaction, quark, date, keepDuration = false) {\n            const fieldName = this.constructor.getFieldDataSource('projectConstraintResolution');\n            // If writing a date (not caused by STM changes undoing/redoing)\n            // and if that's and initial task processing check if projectConstraintResolution has \"conflict\"\n            // to not add extra work to initial data loading\n            if (date && !this.stm?.isRestoring && (transaction.graph.hasIdentifier(this.$.effectiveDirection) ||\n                (this.projectConstraintResolution || this.data[fieldName]) === ProjectConstraintResolution.Conflict)) {\n                // raise a flag causing provided date validation\n                this.checkProjectConstraint = true;\n            }\n            return super.writeEndDate(me, transaction, quark, date, keepDuration);\n        }\n        *calculateEarlyStartDateConstraintIntervals() {\n            const result = yield* super.calculateEarlyStartDateConstraintIntervals();\n            const projectConstraintResolution = yield this.$.projectConstraintResolution;\n            // If the event is not configured to honor the project constraint\n            // and it's configured to ignore the constraint or we are moving the event\n            if (projectConstraintResolution === ProjectConstraintResolution.Ignore) {\n                // skip the project constraint for it so we could calculate the event start/end dates w/o that constraint effect\n                return result.filter(interval => !interval.isProjectConstraintInterval);\n            }\n            return result;\n        }\n        *calculateLateEndDateConstraintIntervals() {\n            const result = yield* super.calculateLateEndDateConstraintIntervals();\n            const projectConstraintResolution = yield this.$.projectConstraintResolution;\n            // If the event is not configured to honor the project constraint\n            // and it's configured to ignore the constraint or we are moving the event\n            if (projectConstraintResolution === ProjectConstraintResolution.Ignore) {\n                // skip the project constraint for it so we could calculate the event start/end dates w/o that constraint effect\n                return result.filter(interval => !interval.isProjectConstraintInterval);\n            }\n            return result;\n        }\n        *validateProjectConstraint() {\n            const project = this.getProject();\n            const direction = yield project.$.effectiveDirection;\n            const projectConstraintResolution = yield this.$.projectConstraintResolution;\n            const manuallyScheduled = yield this.$.manuallyScheduled;\n            // the constraint should be checked\n            if (projectConstraintResolution === ProjectConstraintResolution.Conflict && !manuallyScheduled) {\n                const dispatcher = yield this.$.dispatcher;\n                const startDateResolution = dispatcher.resolution.get(StartDateVar);\n                const endDateResolution = dispatcher.resolution.get(EndDateVar);\n                const durationResolution = dispatcher.resolution.get(DurationVar);\n                const proposedStartDate = yield ProposedOrPreviousValueOf(this.$.startDate);\n                const proposedEndDate = yield ProposedOrPreviousValueOf(this.$.endDate);\n                // event is scheduled\n                if (proposedEndDate || proposedStartDate) {\n                    let projectDate, eventDate, passed, side;\n                    // it's scheduled forward so is constrained by the project start\n                    if (direction.direction === Direction.Forward) {\n                        if (startDateResolution === CalculateProposed) {\n                            eventDate = proposedStartDate;\n                        }\n                        else {\n                            let effectiveDuration = yield* (durationResolution === CalculateProposed\n                                ? this.calculateDurationProposed()\n                                : this.calculateDurationPure());\n                            if (effectiveDuration != null) {\n                                eventDate = yield* this.calculateProjectedXDateWithDuration(proposedEndDate, false, effectiveDuration);\n                            }\n                        }\n                        projectDate = yield project.$.startDate;\n                        // event start should be >= project start\n                        passed = !projectDate || !eventDate || eventDate >= projectDate;\n                        side = ConstraintIntervalSide.Start;\n                    }\n                    else if (direction.direction === Direction.Backward) {\n                        if (endDateResolution === CalculateProposed) {\n                            eventDate = proposedEndDate;\n                        }\n                        else {\n                            let effectiveDuration = yield* (durationResolution === CalculateProposed\n                                ? this.calculateDurationProposed()\n                                : this.calculateDurationPure());\n                            if (effectiveDuration != null) {\n                                eventDate = yield* this.calculateProjectedXDateWithDuration(proposedStartDate, true, effectiveDuration);\n                            }\n                        }\n                        projectDate = yield project.$.endDate;\n                        passed = !projectDate || !eventDate || eventDate <= projectDate;\n                        side = ConstraintIntervalSide.End;\n                    }\n                    if (!passed) {\n                        const conflict = ProjectConstraintConflictEffect.new({\n                            event: this,\n                            projectDate,\n                            eventDate,\n                            side\n                        });\n                        if ((yield conflict) === EffectResolutionResult.Cancel) {\n                            yield Reject(conflict);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    GanttEvent.usesDelayFromParent = false;\n    __decorate([\n        model_field({ defaultValue: ProjectConstraintResolution.Honor })\n    ], GanttEvent.prototype, \"projectConstraintResolution\", void 0);\n    __decorate([\n        field()\n    ], GanttEvent.prototype, \"checkProjectConstraint\", void 0);\n    __decorate([\n        calculate('checkProjectConstraint')\n    ], GanttEvent.prototype, \"calculateCheckProjectConstraint\", null);\n    return GanttEvent;\n}) {\n}\n/**\n * Class implements resolving a project border violation conflict.\n * It resolves the conflict by ignoring the project border.\n */\nexport class IgnoreProjectConstraintResolution extends Localizable(ConflictResolution) {\n    static get $name() {\n        return 'IgnoreProjectConstraintResolution';\n    }\n    getDescription() {\n        return this.L('L{descriptionTpl}');\n    }\n    resolve() {\n        this.event.projectConstraintResolution = ProjectConstraintResolution.Ignore;\n    }\n}\n/**\n * Class implements resolving a project border violation conflict.\n * It resolves the conflict by rescheduling the event to respect the project border.\n */\nexport class HonorProjectConstraintResolution extends Localizable(ConflictResolution) {\n    static get $name() {\n        return 'HonorProjectConstraintResolution';\n    }\n    getDescription() {\n        return this.L('L{descriptionTpl}');\n    }\n    resolve() {\n        this.event.projectConstraintResolution = ProjectConstraintResolution.Honor;\n    }\n}\n/**\n * Description builder for a [[ProjectConstraintConflictEffect|project border scheduling conflict]].\n */\nexport class ProjectConstraintConflictEffectDescription extends Localizable(Base) {\n    static get $name() {\n        return 'ProjectConstraintConflictEffectDescription';\n    }\n    static getDescription(conflict) {\n        const dateFormat = this.dateFormat || DateHelper.defaultFormat;\n        return format(this.L(conflict.side === ConstraintIntervalSide.Start ? 'L{startDescriptionTpl}' : 'L{endDescriptionTpl}'), conflict.event.name, DateHelper.format(conflict.eventDate, dateFormat), DateHelper.format(conflict.projectDate, dateFormat));\n    }\n}\nProjectConstraintConflictEffectDescription.dateFormat = 'lll';\n/**\n * Special [[Effect|effect]] indicating an event gets scheduled violating the project fixed border\n * (before the project start date if the project is scheduled forwards and after the project end date otherwise).\n *\n * By default the conflict suggests two ways to resolve it:\n *\n * - ignore the project border and proceed with the suggested event changes\n * - honor the project border and adjust the event start/end dates to not violate it\n */\nexport class ProjectConstraintConflictEffect extends ConflictEffect {\n    // we don't need this method and intervals in general\n    filterConflictingIntervals(intervals) {\n        return;\n    }\n    /**\n     * Returns possible resolutions for the _conflict_.\n     */\n    getResolutions() {\n        if (!this._resolutions) {\n            this._resolutions = [\n                this.ignoreProjectConstraintConflictResolutionClass.new({ event: this.event }),\n                this.honorProjectConstraintConflictResolutionClass.new({ event: this.event })\n            ];\n        }\n        return this._resolutions;\n    }\n}\n__decorate([\n    prototypeValue(IgnoreProjectConstraintResolution)\n], ProjectConstraintConflictEffect.prototype, \"ignoreProjectConstraintConflictResolutionClass\", void 0);\n__decorate([\n    prototypeValue(HonorProjectConstraintResolution)\n], ProjectConstraintConflictEffect.prototype, \"honorProjectConstraintConflictResolutionClass\", void 0);\n__decorate([\n    prototypeValue(ProjectConstraintConflictEffectDescription)\n], ProjectConstraintConflictEffect.prototype, \"_descriptionBuilderClass\", void 0);\n", "import TimeSpan from '../../Scheduler/model/TimeSpan.js';\nimport Duration from '../../Core/data/Duration.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\n/**\n * @module Gantt/model/Baseline\n */\n/**\n * This class represents a baseline of a Task.\n *\n * Records based on this model are initially created when tasks are loaded into the TaskStore. If dates (startDate and\n * endDate) are left out, the task's dates will be used. If dates are `null`, dates will be empty and the baseline bar\n * won't be displayed in the UI.\n *\n * @extends Scheduler/model/TimeSpan\n */\nexport default class Baseline extends TimeSpan {\n    //region Fields\n    static fields = [\n        /**\n         * The owning Task of the Baseline\n         * @field {Gantt.model.TaskModel} task\n         */\n        {\n            name    : 'task',\n            persist : false\n        }\n        /**\n         * Start date of the baseline in ISO 8601 format.\n         *\n         * Note that the field always returns a `Date`.\n         *\n         * @field {Date} startDate\n         * @accepts {String|Date}\n         */\n        /**\n         * End date of the baseline in ISO 8601 format.\n         *\n         * Note that the field always returns a `Date`.\n         *\n         * @field {Date} endDate\n         * @accepts {String|Date}\n         */\n        /**\n         * An encapsulation of the CSS classes to be added to the rendered baseline element.\n         *\n         * Always returns a {@link Core.helper.util.DomClassList}, but may still be treated as a string. For\n         * granular control of adding and removing individual classes, it is recommended to use the\n         * {@link Core.helper.util.DomClassList} API.\n         *\n         * @field {Core.helper.util.DomClassList} cls\n         * @accepts {Core.helper.util.DomClassList|String}\n         */\n    ];\n    //endregion\n    isBaseline = true;\n    //region Milestone\n    get milestone() {\n        // a summary baseline may have zero duration when \"recalculateParents\" is on\n        // and a child baseline has working time on the summary baseline non-working time\n        // so we operate start and end date pair here\n        if (!this.isLeaf) {\n            const { startDate, endDate } = this;\n            if (startDate && endDate) {\n                return endDate.getTime() === startDate.getTime();\n            }\n        }\n        return this.duration === 0;\n    }\n    set milestone(value) {\n        value ? this.convertToMilestone() : this.convertToRegular();\n    }\n    async setMilestone(value) {\n        return value ? this.convertToMilestone() : this.convertToRegular();\n    }\n    /**\n     * Converts this baseline to a milestone (start date will match the end date).\n     *\n     * @propagating\n     */\n    async convertToMilestone() {\n        return this.setDuration(0, this.durationUnit, false);\n    }\n    /**\n     * Converts a milestone baseline to a regular baseline with a duration of 1 (keeping current `durationUnit`).\n     *\n     * @propagating\n     */\n    async convertToRegular() {\n        if (this.milestone) {\n            return this.setDuration(1, this.durationUnit, false);\n        }\n    }\n    //endregion\n    internalCalculateStartDate(endDate, duration, durationUnit = this.durationUnit) {\n        if (this.task.graph) {\n            return this.task.run('calculateProjectedXDateWithDuration', endDate, false, duration);\n        }\n        return super.internalCalculateStartDate(endDate, duration, durationUnit);\n    }\n    internalCalculateEndDate(startDate, duration, durationUnit = this.durationUnit) {\n        if (this.task.graph) {\n            return this.task.run('calculateProjectedXDateWithDuration', startDate, true, duration);\n        }\n        return super.internalCalculateEndDate(startDate, duration, durationUnit);\n    }\n    internalCalculateDuration(startDate, endDate, durationUnit = this.durationUnit) {\n        if (this.task.graph) {\n            return this.task.run('calculateProjectedDuration', startDate, endDate);\n        }\n        return super.internalCalculateDuration(startDate, endDate, durationUnit);\n    }\n    // Uses engine to calculate dates and/or duration.\n    normalize() {\n        const { task, startDate, endDate, duration } = this;\n        if (!task.graph) {\n            // Baselines are initialized on first access (first render), for initially visible tasks we need to\n            // normalize after first commit, since we render early before entering graph.\n            // Tasks rendered later will take the cheaper code path below\n            task.project?.once('dataReady', () => this.internalNormalize(startDate, endDate, duration));\n        }\n        super.normalize();\n    }\n    //region Baseline APIs\n    /**\n     * Baseline start variance in the task's duration unit.\n     * @member {Core.data.Duration}\n     * @category Scheduling\n     */\n    get startVariance() {\n        const\n            { task } = this,\n            variance = DateHelper.getDurationInUnit(this.startDate, task.startDate, task.durationUnit);\n        return new Duration({ magnitude : variance, unit : task.durationUnit });\n    }\n    /**\n     * Baseline end variance in the task's duration unit.\n     * @member {Core.data.Duration}\n     * @category Scheduling\n     */\n    get endVariance() {\n        const\n            { task } = this,\n            variance = DateHelper.getDurationInUnit(this.endDate, task.endDate, task.durationUnit);\n        return new Duration({ magnitude : variance, unit : task.durationUnit });\n    }\n    /**\n     * Baseline duration variance in the task's duration unit.\n     * @member {Core.data.Duration}\n     * @category Scheduling\n     */\n    get durationVariance() {\n        return this.fullDuration && this.task.fullDuration.diff(this.fullDuration);\n    }\n    //endregion\n}\nBaseline._$name = 'Baseline';", "import DataField from '../../../Core/data/field/DataField.js';\nimport Wbs from '../../../Core/data/Wbs.js';\n/**\n * @module Gantt/data/field/WbsField\n */\n/**\n * This class is used for a WBS (Work Breakdown Structure) field. These fields hold a {@link Gantt.data.Wbs}\n * object for their value.\n *\n * @extends Core/data/field/DataField\n * @inputfield\n */\nexport default class WbsField extends DataField {\n    static get type() {\n        return 'wbs';\n    }\n    convert(value) {\n        return Wbs.from(value);\n    }\n    serialize(value) {\n        // the wbsValue field is not persistent, so this is likely not going to be called... however, the user could\n        // flip that option so we implement this method in case that happens.\n        return String(value);\n    }\n}\nWbsField.prototype.compare = Wbs.compare;\nWbsField.initClass();\nWbsField._$name = 'WbsField';", "import DateHelper from '../../Core/helper/DateHelper.js';\nimport Duration from '../../Core/data/Duration.js';\nimport Store from '../../Core/data/Store.js';\nimport TimeSpan from '../../Scheduler/model/TimeSpan.js';\nimport DependencyBaseModel from '../../Scheduler/model/DependencyBaseModel.js';\nimport PercentDoneMixin from '../../SchedulerPro/model/mixin/PercentDoneMixin.js';\nimport { GanttEvent } from '../../Engine/quark/model/gantt/GanttEvent.js';\nimport PartOfProject from '../data/mixin/PartOfProject.js';\nimport Baseline from './Baseline.js';\nimport Wbs from '../../Core/data/Wbs.js';\nimport '../data/field/WbsField.js';\nimport EventSegmentModel from '../../SchedulerPro/model/EventSegmentModel.js';\n/**\n * @module Gantt/model/TaskModel\n */\nconst\n    // A utility function to populate a Task's baseline with the Task's default values\n    applyBaselineDefaults   = (task, baselines) => {\n        const {\n            startDate, durationUnit, endDate\n        } = task;\n        return baselines ? baselines.map(baseline => {\n            // Baseline has its own data if at least two of the following are defined.\n            // The remaining data, if incomplete, will be calculated in Baseline normalize() method\n            const\n                hasData = (+('startDate' in baseline) + ('endDate' in baseline) + ('duration' in baseline)) > 1,\n                data    = { task, ...baseline };\n            // Don't fill dates that are missing in loaded data\n            // https://github.com/bryntum/support/issues/4309\n            if (!hasData) {\n                Object.assign(data, { startDate, endDate, durationUnit });\n            }\n            return data;\n        }) : [];\n    },\n    descendingWbsSorter     = s => s.field === 'wbsValue' && !s.ascending,\n    isReversed              = children => {\n        for (let firstChildWbs, childWbs, i = 0, n = children.length; i < n; ++i) {\n            childWbs = children[i].wbsValue;\n            if (childWbs) {\n                if (firstChildWbs) {\n                    return childWbs < firstChildWbs;\n                }\n                firstChildWbs = childWbs;\n            }\n        }\n        return false;\n    },\n    // Refresh siblings in depth when it's not initial WBS calculation\n    refreshWbsOptions       = { deep : true },\n    // Record should not be considered modified by initial assignment of wbsValue\n    refreshWbsOnJoinOptions = { deep : true, silent : true };\n/**\n * Options for the `convertEmptyParentToLeaf` static property.\n * @typedef {Object} ConvertEmptyParentToLeafOptions\n * @property {Boolean} onLoad `true` to convert empty parent tasks to leaf tasks on load\n * @property {Boolean} onRemove `true` to convert parent tasks that become empty after removing a child to leaf tasks\n */\n/**\n * This class represents a task in your Gantt project. Extend it to add your own custom task fields and methods.\n *\n * ## Subclassing the TaskModel class\n * To subclass the TaskModel and add extra {@link Core.data.Model#property-fields-static} and API methods, please see\n * the snippet below.\n *\n *```javascript\n * class MyTaskModel extends TaskModel {\n *   static get fields() {\n *       return [\n *           { name: 'importantDate', type: 'date' }\n *       ]\n *   }\n *```\n *\n * After creating your own Task model class, configure the {@link Gantt.model.ProjectModel#config-taskModelClass} on\n * Project to use it:\n *\n *```javascript\n * new Gantt({\n *     project : {\n *         taskModelClass : MyTaskModel\n *     }\n * });\n *```\n *\n * ## Creating a new Task programmatically\n *\n * To create a new task programmatically, simply call the TaskModel constructor and pass in any field values.\n *\n * ```javascript\n * const newTask = new TaskModel({\n *     name          : 'My awesome task',\n *     importantDate : new Date(2022, 0, 1),\n *     percentDone   : 80 // So awesome it's almost done\n *     // ...\n * });\n * ```\n *\n * ## Async scheduling\n *\n * A record created from an {@link Gantt/model/TaskModel} is normally part of a {@link Gantt/data/TaskStore}, which in\n * turn is part of a {@link Gantt/model/ProjectModel project}.\n * When dates or the duration of a task is changed, the project performs async calculations of the other related fields\n * (including the field of other tasks affected by the change).\n * For example if {@link #field-duration} is changed, it will recalculate {@link #field-endDate}.\n *\n * As a result of this being an async operation, the values of other fields are not guaranteed to be up to date\n * immediately after a change. To ensure data is up to date, `await` the calculations to finish.\n *\n * For example, `endDate` is not up to date after this operation:\n *\n * ```javascript\n * taskRecord.duration = 5;\n * // taskRecord.endDate not yet calculated\n * ```\n *\n * But if calculations are awaited it is up to date:\n *\n * ```javascript\n * taskRecord.duration = 5;\n * await taskRecord.project.commitAsync();\n * // endDate is calculated\n * ```\n *\n * In case of multiple changes no need to trigger recalculation after each of them:\n *\n * ```javascript\n * // change taskRecord1 start and duration\n * taskRecord1.startDate = '2021-11-15';\n * taskRecord1.duration = 5;\n * // change taskRecord2 duration\n * taskRecord2.duration = 1;\n * // change taskRecord3 finish date\n * taskRecord3.endDate = '2021-11-17';\n *\n * // now when all changes are done trigger rescheduling\n * await taskRecord.project.commitAsync();\n * ```\n *\n * ## Manually vs automatically scheduled tasks\n *\n * A task can be either **automatically** (default) or **manually** scheduled. This is defined by the\n * {@link #field-manuallyScheduled} field. Manually scheduled tasks are not affected by the automatic scheduling\n * process, which means their start/end dates are meant to be changed by user manually. Such tasks are not shifted\n * by their predecessors nor such summary tasks rollup their children start/end dates.\n * While automatically scheduled tasks start/end dates are calculated by the Gantt.\n *\n * ## Start and end dates\n *\n * For all tasks, the end date is non-inclusive: {@link #field-startDate} <= date < {@link #field-endDate}.\n * Example: a task which starts at 2020/07/18 and has 2 days duration, should have the end date: 2020/07/20, **not**\n * 2018/07/19 23:59:59.\n * The start and end dates of tasks in are *points* on the time axis and if you specify that a task starts\n * 01/01/2020 and has 1 day duration, that means the start point is 01/01/2020 00:00 and end point is 02/01/2020 00:00.\n *\n * @mixes SchedulerPro/data/mixin/PartOfProject\n * @mixes SchedulerPro/model/mixin/PercentDoneMixin\n *\n * @extends Scheduler/model/TimeSpan\n */\nexport default class TaskModel extends GanttEvent.derive(TimeSpan).mixin(\n    PartOfProject,\n    PercentDoneMixin\n) {\n    //region Fields\n    /**\n     * This static configuration option allows you to control whether an empty parent task should be converted into a\n     * leaf. Enable/disable it for a whole class:\n     *\n     * ```javascript\n     * TaskModel.convertEmptyParentToLeaf = false;\n     * ```\n     *\n     * By specifying `true`, all empty parents will be considered leafs. Can also be assigned a configuration object\n     * with the following Boolean properties to customize the behaviour:\n     *\n     * * `onLoad` - Apply the transformation on load to any parents without children (`children : []`)\n     * * `onRemove` - Apply the transformation when all children have been removed from a parent\n     *\n     * ```javascript\n     * TaskModel.convertEmptyParentToLeaf = {\n     *     onLoad   : false,\n     *     onRemove : true\n     * }\n     * ```\n     *\n     * @member {Boolean|ConvertEmptyParentToLeafOptions} convertEmptyParentToLeaf\n     * @default true\n     * @static\n     * @category Parent & children\n     */\n    static get fields() {\n        return [\n            /**\n             * The scheduling direction of this event. The `Forward` direction corresponds to the as-soon-as-possible scheduling (ASAP),\n             * `Backward` - to as-late-as-possible (ALAP). The ASAP tasks \"sticks\" to the project's start date,\n             * and ALAP tasks - to the project's end date.\n             *\n             * If not specified (which is the default), direction is inherited from the parent task (and from the project for top-level tasks).\n             * By default, the project model has forward scheduling mode.\n             *\n             * **Note** The ALAP-scheduled task in the ASAP-scheduled project will turn all of its successors into ALAP-scheduled tasks,\n             * even if their scheduling direction is specified explicitly by the user as ASAP. We can say that ALAP-scheduling\n             * is propagated down through the successors chain. This propagation, however, will stop in the following cases:\n             * - If a successor is manually scheduled\n             * - If a successor has a \"Must start/finish on\" constraint\n             * - If a dependency to successor is inactive\n             *\n             * Similarly, the ASAP-scheduled task in the ALAP-scheduled project will turn all of its predecessors into ASAP-scheduled tasks\n             * (also regardless of the user-provided value).\n             *\n             * When such propagation is in action, the value of this field is ignored and the UI will disable controls for it.\n             *\n             * To determine the actual scheduling direction of the task (which might be different from the user-provided value),\n             * one can use the {@link Gantt/model/TaskModel#field-effectiveDirection} field.\n             *\n             * **Note** For the purposes of compatibility with MS Project and to ease the migration process for users,\n             * by default, scheduling direction can be set using the \"Constraint type\" field on the \"Advanced\"\n             * tab of the task editor. The forward scheduling is specified in it as \"As soon as possible\" option and backward -\n             * \"As late as possible\". One can also disable the {@link Gantt/model/ProjectModel#config-includeAsapAlapAsConstraints}\n             * config to render a separate \"Scheduling direction\" field.\n             *\n             * @field {'Forward'|'Backward'} direction\n             * @default null\n             * @category Common\n             */\n            /**\n             * @typedef {Object} EffectiveDirection\n             * @property {'own'|'enforced'|'inherited'} kind The type of the direction value.\n             * @property {'Forward'|'Backward'} direction The actual direction. Depending on the `kind` value, it might be\n             * a user-provided value (`own`), or value, enforced by the predecessor/successor (`enforced`), or value inherited\n             * from the parent task (or project).\n             * @property {Gantt.model.TaskModel} enforcedBy The task which forces the current direction\n             * @property {Gantt.model.TaskModel} inheritedFrom The task from which the current direction is inherited\n             */\n            /**\n             * The calculated effective scheduling direction of this event. See the {@link Gantt/model/TaskModel#field-direction} field for details.\n             *\n             * @field {EffectiveDirection} effectiveDirection\n             * @category Common\n             */\n            /**\n             * Unique identifier of task (mandatory)\n             * @field {String|Number} id\n             * @category Common\n             */\n            /**\n             * Name of the task\n             * @field {String} name\n             * @category Common\n             */\n            /**\n             * A set of resources assigned to this task\n             * @field {Set} assigned\n             * @readonly\n             * @category Common\n             */\n            /**\n             * This field is automatically set to `true` when the task is \"unscheduled\" - user has provided an empty\n             * string in one of the UI editors for start date, end date or duration. Such task is not rendered,\n             * and does not affect the schedule of its successors.\n             *\n             * To schedule the task back, enter one of the missing values, so that there's enough information\n             * to calculate start date, end date and duration.\n             *\n             * Note, that setting this field manually does nothing. This field should be persisted, but not updated\n             * manually.\n             *\n             * @field {Boolean} unscheduled\n             * @readonly\n             * @category Scheduling\n             */\n            /**\n             * Start date of the task in ISO 8601 format\n             *\n             * UI fields representing this data field are disabled for summary events\n             * except the {@link #field-manuallyScheduled manually scheduled} events.\n             * See {@link #function-isEditable} for details.\n             *\n             * Note that the field always returns a `Date`.\n             *\n             * @field {Date} startDate\n             * @accepts {String|Date}\n             * @category Scheduling\n             */\n            /**\n             * End date of the task in ISO 8601 format\n             *\n             * UI fields representing this data field are disabled for summary events\n             * except the {@link #field-manuallyScheduled manually scheduled} events.\n             * See {@link #function-isEditable} for details.\n             *\n             * Note that the field always returns a `Date`.\n             *\n             * @field {Date} endDate\n             * @accepts {String|Date}\n             * @category Scheduling\n             */\n            /**\n             * The numeric part of the task duration (the number of units).\n             *\n             * UI fields representing this data field are disabled for summary events\n             * except the {@link #field-manuallyScheduled manually scheduled} events.\n             * See {@link #function-isEditable} for details.\n             *\n             * @field {Number} duration\n             * @category Scheduling\n             */\n            /**\n             * Segments of the task that appear when the task gets {@link #function-splitToSegments}.\n             * @field {SchedulerPro.model.EventSegmentModel[]} segments\n             * @category Scheduling\n             */\n            /**\n             * An encapsulation of the CSS classes to be added to the rendered event element.\n             *\n             * Always returns a {@link Core.helper.util.DomClassList}, but may still be treated as a string. For\n             * granular control of adding and removing individual classes, it is recommended to use the\n             * {@link Core.helper.util.DomClassList} API.\n             *\n             * @field {Core.helper.util.DomClassList} cls\n             * @accepts {Core.helper.util.DomClassList|String} cls\n             * @category Styling\n             */\n            {\n                name      : 'cls',\n                serialize : value => value.isDomClassList ? value.toString() : value,\n                persist   : true\n            },\n            /**\n             * The current status of a task, expressed as the percentage completed (integer from 0 to 100)\n             *\n             * UI fields representing this data field are disabled for summary events.\n             * See {@link #function-isEditable} for details.\n             *\n             * @field {Number} percentDone\n             * @category Scheduling\n             */\n            /**\n             * The numeric part of the task effort (the number of units). The effort of the \"parent\" tasks will be automatically set to the sum\n             * of efforts of their \"child\" tasks\n             *\n             * UI fields representing this data field are disabled for summary events.\n             * See {@link #function-isEditable} for details.\n             *\n             * @field {Number} effort\n             * @category Scheduling\n             */\n            /**\n             * The unit part of the task duration, defaults to \"day\" (days). Valid values are:\n             *\n             * - \"millisecond\" - Milliseconds\n             * - \"second\" - Seconds\n             * - \"minute\" - Minutes\n             * - \"hour\" - Hours\n             * - \"day\" - Days\n             * - \"week\" - Weeks\n             * - \"month\" - Months\n             * - \"quarter\" - Quarters\n             * - \"year\"- Years\n             *\n             * This field is readonly after creation, to change it use the {@link #function-setDuration} call.\n             * @field {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} durationUnit\n             * @default \"day\"\n             * @category Scheduling\n             */\n            /**\n             * The unit part of the task's effort, defaults to \"h\" (hours). Valid values are:\n             *\n             * - \"millisecond\" - Milliseconds\n             * - \"second\" - Seconds\n             * - \"minute\" - Minutes\n             * - \"hour\" - Hours\n             * - \"day\" - Days\n             * - \"week\" - Weeks\n             * - \"month\" - Months\n             * - \"quarter\" - Quarters\n             * - \"year\"- Years\n             *\n             * This field is readonly after creation, to change it use the {@link #function-setEffort} call.\n             * @field {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} effortUnit\n             * @default \"hour\"\n             * @category Scheduling\n             */\n            { name : 'fullEffort', persist : false },\n            /**\n             * The effective calendar used by the task.\n             * Returns the task own {@link #field-calendar} if provided or the project {@link Gantt.model.ProjectModel#field-calendar calendar}.\n             *\n             * @field {Gantt.model.CalendarModel} effectiveCalendar\n             * @category Scheduling\n             * @calculated\n             * @readonly\n             */\n            /**\n             * The calendar, assigned to the task. Allows you to set the time when task can be performed.\n             *\n             * @field {Gantt.model.CalendarModel} calendar\n             * @category Scheduling\n             */\n            /**\n             * The getter will yield a {@link Core.data.Store} of {@link Gantt.model.Baseline}s.\n             *\n             * When constructing a task the baselines will be constructed from an array of\n             * {@link Gantt.model.Baseline} data objects.\n             *\n             * When serializing, it will yield an array of {@link Gantt.model.Baseline} data objects.\n             *\n             * @field {Core.data.Store} baselines\n             * @accepts {BaselineConfig[]}\n             * @category Features\n             */\n            { name : 'baselines', type : 'store', modelClass : Baseline, storeClass : Store, lazy : true },\n            /**\n             * A freetext note about the task.\n             * @field {String} note\n             * @category Common\n             */\n            { name : 'note', type : 'string' },\n            'parentId',\n            /**\n             * Field storing the task constraint alias or `null` if not constraint set.\n             * Valid values are:\n             * - \"finishnoearlierthan\"\n             * - \"finishnolaterthan\"\n             * - \"mustfinishon\"\n             * - \"muststarton\"\n             * - \"startnoearlierthan\"\n             * - \"startnolaterthan\"\n             *\n             * @field {'finishnoearlierthan'|'finishnolaterthan'|'mustfinishon'|'muststarton'|'startnoearlierthan'|'startnolaterthan'|null} constraintType\n             * @category Scheduling\n             */\n            /**\n             * Field defining the constraint boundary date or `null` if {@link #field-constraintType} is `null`.\n             * @field {String|Date|null} constraintDate\n             * @category Scheduling\n             */\n            /**\n             * When set to `true`, the {@link #field-startDate} of the task will not be changed by any of its incoming\n             * dependencies or constraints.\n             *\n             * @field {Boolean} manuallyScheduled\n             * @category Scheduling\n             */\n            /**\n             * When set to `true` the task becomes inactive and stops taking part in the project scheduling (doesn't\n             * affect linked tasks, rolls up its attributes and affect its assigned resources allocation).\n             *\n             * @field {Boolean} inactive\n             * @category Scheduling\n             */\n            /**\n             * Specifies how the task should treat the project border (the project start or end depending\n             * if it's scheduled forward or backwards respectively).\n             *\n             * The task can either respect the project border which for example means it cannot be placed\n             * before its forward scheduled project start.\n             * Or the task can ignore the project border and be scheduled regardless of that constraint.\n             *\n             * Possible values are:\n             * - `honor` - task respects the project border.\n             * - `ignore` - task ignores the project border.\n             * - `conflict` - the project triggers {@link Gantt/model/ProjectModel#event-schedulingConflict}\n             * event when the task attempts to violate its border. So if Gantt has\n             * {@link Gantt/view/Gantt#config-displaySchedulingIssueResolutionPopup} enabled it will display a popup\n             * asking user to choose an appropriate resolution. If the option is disabled the application can track\n             * the event and implement some other way to handle the conflict.\n             * @field {'honor'|'ignore'|'conflict'} projectConstraintResolution\n             * @default \"honor\"\n             * @category Scheduling\n             */\n            /**\n             * When set to `true` the calendars of the assigned resources\n             * are not taken into account when scheduling the task.\n             *\n             * By default the field value is `false` resulting in that the task performs only when\n             * its own {@link #field-calendar} and some of the assigned\n             * resource calendars allow that.\n             * @field {Boolean} ignoreResourceCalendar\n             * @category Scheduling\n             */\n            /**\n             * This field defines the scheduling mode for the task. Based on this field some fields of the task\n             * will be \"fixed\" (should be provided by the user) and some - computed.\n             *\n             * Possible values are:\n             *\n             * - `Normal` is the default (and backward compatible) mode. It means the task will be scheduled based on\n             * information about its start/end dates, task own calendar (project calendar if there's no one) and\n             * calendars of the assigned resources.\n             *\n             * - `FixedDuration` mode means, that task has fixed start and end dates, but its effort will be computed\n             * dynamically, based on the assigned resources information. Typical example of such task is - meeting.\n             * Meetings typically have pre-defined start and end dates and the more people are participating in the\n             * meeting, the more effort is spent on the task. When duration of such task increases, its effort is\n             * increased too (and vice-versa). Note: fixed start and end dates here doesn't mean that a user can't\n             * update them via GUI, the only field which won't be editable in GUI is the\n             * {@link #field-effort effort field}, it will be calculated according to duration and resources assigned to\n             * the task.\n             *\n             * - `FixedEffort` mode means, that task has fixed effort and computed duration. The more resources will be\n             * assigned to this task, the less the duration will be. The typical example will be a \"paint the walls\"\n             * task - several painters will complete it faster.\n             *\n             * - `FixedUnits` mode means, that the assignment level of all assigned resources will be kept as provided\n             * by the user, and either {@link #field-effort} or duration of the task is recalculated, based on the\n             * {@link #field-effortDriven} flag.\n             *\n             * @field {'Normal'|'FixedDuration'|'FixedEffort'|'FixedUnits'} schedulingMode\n             * @category Scheduling\n             */\n            /**\n             * This boolean flag defines what part of task data should be updated in the `FixedUnits` scheduling mode.\n             * If it is `true`, then {@link #field-effort} is kept intact, and duration is updated. If it is `false` -\n             * vice-versa.\n             *\n             * @field {Boolean} effortDriven\n             * @default false\n             * @category Scheduling\n             */\n            /**\n             * A calculated field storing the _early start date_ of the task.\n             * The _early start date_ is the earliest possible date the task can start.\n             * This value is calculated based on the earliest dates of the task predecessors and the task own\n             * constraints. If the task has no predecessors nor other constraints, its early start date matches the\n             * project start date.\n             *\n             * UI fields representing this data field are naturally disabled since the field is readonly.\n             * See {@link #function-isEditable} for details.\n             *\n             * @field {Date} earlyStartDate\n             * @calculated\n             * @readonly\n             * @category Scheduling\n             */\n            /**\n             * A calculated field storing the _early end date_ of the task.\n             * The _early end date_ is the earliest possible date the task can finish.\n             * This value is calculated based on the earliest dates of the task predecessors and the task own\n             * constraints. If the task has no predecessors nor other constraints, its early end date matches the\n             * project start date plus the task duration.\n             *\n             * UI fields representing this data field are naturally disabled since the field is readonly.\n             * See {@link #function-isEditable} for details.\n             *\n             * @field {Date} earlyEndDate\n             * @calculated\n             * @readonly\n             * @category Scheduling\n             */\n            /**\n             * A calculated field storing the _late start date_ of the task.\n             * The _late start date_ is the latest possible date the task can start.\n             * This value is calculated based on the latest dates of the task successors and the task own constraints.\n             * If the task has no successors nor other constraints, its late start date matches the project end date\n             * minus the task duration.\n             *\n             * UI fields representing this data field are naturally disabled since the field is readonly.\n             * See {@link #function-isEditable} for details.\n             *\n             * @field {Date} lateStartDate\n             * @calculated\n             * @readonly\n             * @category Scheduling\n             */\n            /**\n             * A calculated field storing the _late end date_ of the task.\n             * The _late end date_ is the latest possible date the task can finish.\n             * This value is calculated based on the latest dates of the task successors and the task own constraints.\n             * If the task has no successors nor other constraints, its late end date matches the project end date.\n             *\n             * UI fields representing this data field are naturally disabled since the field is readonly.\n             * See {@link #function-isEditable} for details.\n             *\n             * @field {Date} lateEndDate\n             * @calculated\n             * @readonly\n             * @category Scheduling\n             */\n            /**\n             * A calculated field storing the _total slack_ (or _total float_) of the task.\n             * The _total slack_ is the amount of working time the task can be delayed without causing a delay\n             * to the project end.\n             * The value is expressed in {@link #field-slackUnit} units.\n             *\n             * ```javascript\n             * // let output slack info to the console\n             * console.log(`The ${task.name} task can be delayed for ${task.totalSlack} ${slackUnit}s`)\n             * ```\n             *\n             * UI fields representing this data field are naturally disabled since the field is readonly.\n             * See {@link #function-isEditable} for details.\n             *\n             *\n             * @field {Number} totalSlack\n             * @calculated\n             * @readonly\n             * @category Scheduling\n             */\n            /**\n             * A calculated field storing unit for the {@link #field-totalSlack} value.\n             * @field {String} slackUnit\n             * @default \"day\"\n             * @category Scheduling\n             */\n            /**\n             * A calculated field indicating if the task is _critical_.\n             * A task considered _critical_ if its delaying causes the project delay.\n             * The field value is calculated based on {@link #field-totalSlack} field value.\n             *\n             * ```javascript\n             * if (task.critical) {\n             *     Toast.show(`The ${task.name} is critical!`);\n             * }\n             * ```\n             *\n             * @field {Boolean} critical\n             * @calculated\n             * @readonly\n             * @category Scheduling\n             */\n            // NOTE: These are not actually fields, they are never set during task lifespan and only used by crud manager\n            // to send changes to the backend\n            // Two fields which specify the relations between \"phantom\" tasks when they are\n            // being sent to the server to be created (e.g. when you create a new task containing a new child task).\n            // { name : 'phantomId', type : 'string' },\n            // { name : 'phantomParentId', type : 'string' },\n            /**\n             * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field\n             * for leaf tasks.\n             *\n             * Note, if the task store loads data from a remote origin, make sure {@link Core/data/AjaxStore#config-readUrl}\n             * is specified, and optionally {@link Core/data/AjaxStore#config-parentIdParamName} is set, otherwise\n             * {@link Core/data/Store#function-loadChildren} has to be implemented.\n             *\n             * @field {Gantt.model.TaskModel[]} children\n             * @accepts {Boolean|Object[]|Gantt.model.TaskModel[]}\n             * @category Parent & children\n             */\n            { name : 'children', persist : false },\n            /**\n             * Set this to true if this task should be shown in the Timeline widget\n             * @field {Boolean} showInTimeline\n             * @category Features\n             */\n            { name : 'showInTimeline', type : 'boolean' },\n            /**\n             * Set this to true to roll up a task to its closest parent\n             * @field {Boolean} rollup\n             * @category Features\n             */\n            { name : 'rollup', type : 'boolean' },\n            /**\n             * The {@link Gantt.data.Wbs WBS} for this task record. This field is automatically calculated and\n             * maintained by the store. This calculation can be refreshed by calling {@link #function-refreshWbs}.\n             *\n             * To get string representation of the WBS value (e.g. '2.1.3'), use {@link Gantt.data.Wbs#property-value}\n             * property.\n             *\n             * @readonly\n             * @field {Gantt.data.Wbs} wbsValue\n             * @accepts {Gantt.data.Wbs|String}\n             * @category Scheduling\n             */\n            { name : 'wbsValue', type : 'wbs', persist : false },\n            /**\n             * A deadline date for this task. Does not affect scheduling logic.\n             *\n             * Note that the field always returns a `Date`.\n             *\n             * @field {Date} deadlineDate\n             * @accepts {String|Date}\n             * @category Scheduling\n             */\n            { name : 'deadlineDate', type : 'date' },\n            // Override TreeNode parentIndex to make it persistable\n            { name : 'parentIndex', type : 'number', persist : true },\n            /**\n             * CSS class specifying an icon to apply to the task row\n             * @field {String} iconCls\n             * @category Styling\n             */\n            'iconCls',\n            /**\n             * CSS class specifying an icon to apply to the task bar\n             * @field {String} taskIconCls\n             * @category Styling\n             */\n            'taskIconCls',\n            /**\n             * Specify false to prevent the event from being dragged (if {@link Gantt/feature/TaskDrag} feature is used)\n             * @field {Boolean} draggable\n             * @default true\n             * @category Interaction\n             */\n            { name : 'draggable', type : 'boolean', persist : false, defaultValue : true },   // true or false\n            /**\n             * Specify false to prevent the task from being resized (if {@link Gantt/feature/TaskResize} feature is\n             * used). You can also specify 'start' or 'end' to only allow resizing in one direction\n             * @field {Boolean|String} resizable\n             * @default true\n             * @category Interaction\n             */\n            { name : 'resizable', persist : false, defaultValue : true },                  // true, false, 'start' or 'end'\n            /**\n             * Changes task's background color. Named colors are applied as a `b-sch-color-{color}` (for example\n             * `b-sch-color-red`) CSS class to the task's bar. Colors specified as hex, `rgb()` etc. are applied as\n             * `style.color` to the bar.\n             *\n             * If no color is specified, any color defined in Gantt's {@link Gantt/view/GanttBase#config-eventColor}\n             * config will apply instead.\n             *\n             * For available standard colors, see\n             * {@link Scheduler/model/mixin/EventModelMixin#typedef-EventColor}.\n             *\n             * Using named colors:\n             *\n             * ```javascript\n             * const gantt = new Gantt({\n             *     project {\n             *         tasksData : [\n             *             { id : 1, name : 'Important task', eventColor : 'red' }\n             *         ]\n             *     }\n             * });\n             * ```\n             *\n             * Will result in:\n             * ```html\n             * <div class=\"b-gantt-task-wrap b-sch-color-red\">\n             * ```\n             *\n             * Using non-named colors:\n             *\n             * ```javascript\n             * const gantt = new Gantt({\n             *     project {\n             *         tasksData : [\n             *             { id : 1, name : 'Important task', eventColor : '#ff0000' }\n             *         ]\n             *     }\n             * });\n             * ```\n             *\n             * Will result in:\n             *\n             * ```html\n             * <div class=\"b-gantt-task-wrap\" style=\"color: #ff0000\">\n             * ```\n             *\n             * @field {EventColor} eventColor\n             */\n            'eventColor'\n        ];\n    }\n    //endregion\n    //region Config\n    // Flag for storing the initial manuallyScheduled value during tree transform. To avoid deoptimizing\n    $manuallyScheduled = null;\n    //endregion\n    getDefaultSegmentModelClass() {\n        return EventSegmentModel;\n    }\n    endBatch() {\n        const { isPersistable : wasPersistable } = this;\n        super.endBatch(...arguments);\n        // If this event newly persistable, its assignments are eligible for syncing.\n        if (this.isPersistable && !wasPersistable) {\n            this.assignments.forEach(assignment => {\n                assignment.stores.forEach(s => {\n                    s.updateModifiedBagForRecord(assignment);\n                });\n            });\n        }\n    }\n    /**\n     * Returns all predecessor dependencies of this task\n     * @member {Gantt.model.DependencyModel[]} predecessors\n     * @readonly\n     */\n    /**\n     * Returns all successor dependencies of this task\n     * @member {Gantt.model.DependencyModel[]} successors\n     * @readonly\n     */\n    get isTask() {\n        return true;\n    }\n    get isTaskModel() {\n        return true;\n    }\n    // To pass as an event when using a Gantt project with Scheduler Pro\n    get isEvent() {\n        return true;\n    }\n    get wbsCode() {\n        return String(this.wbsValue);\n    }\n    set wbsCode(value) {\n        this.wbsValue = Wbs.from(value);\n    }\n    copy(...args) {\n        const copy = super.copy(...args);\n        // Clean wbs but do not mark as dirty\n        copy.setData('wbsValue', null);\n        return copy;\n    }\n    /**\n     * Propagates changes to the dependent tasks. For example:\n     *\n     * ```js\n     * // double a task duration\n     * task.duration *= 2;\n     * // call commitAsync() to do further recalculations caused by the duration change\n     * task.commitAsync().then(() => console.log('Schedule updated'));\n     * ```\n     *\n     * @method commitAsync\n     * @async\n     * @propagating\n     */\n    /**\n     * Either activates or deactivates the task depending on the passed value.\n     * Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method\n     * @name setInactive\n     * @param {Boolean} inactive `true` to deactivate the task, `false` to activate it.\n     * @async\n     * @propagating\n     */\n    /**\n     * Sets {@link #field-segments} field value.\n     *\n     * @method\n     * @name setSegments\n     * @param {SchedulerPro.model.EventSegmentModel[]} segments Array of segments or null to make the task not segmented.\n     * @returns {Promise}\n     * @propagating\n     */\n    /**\n     * Splits the task to segments.\n     * @method splitToSegments\n     * @param {Date} from The date to split this task at.\n     * @param {Number} [lag=1] Split duration.\n     * @param {String} [lagUnit] Split duration unit.\n     * @returns {Promise}\n     * @propagating\n     */\n    /**\n     * Merges the task segments.\n     * The method merges two provided task segments (and all the segment between them if any).\n     * @method mergeSegments\n     * @param {SchedulerPro.model.EventSegmentModel} [segment1] First segment to merge.\n     * @param {SchedulerPro.model.EventSegmentModel} [segment2] Second segment to merge.\n     * @returns {Promise}\n     * @propagating\n     */\n    /**\n     * Sets the task {@link #field-ignoreResourceCalendar} field value and triggers rescheduling.\n     *\n     * @method setIgnoreResourceCalendar\n     * @param {Boolean} ignore Provide `true` to ignore the calendars of the assigned resources\n     * when scheduling the task. If `false` the task performs only when\n     * its own {@link #field-calendar} and some of the assigned\n     * resource calendars allow that.\n     * @async\n     * @propagating\n     */\n    /**\n     * Returns the event {@link #field-ignoreResourceCalendar} field value.\n     *\n     * @method getIgnoreResourceCalendar\n     * @returns {Boolean} The event {@link #field-ignoreResourceCalendar} field value.\n     */\n    /**\n     * The event first segment or null if the event is not segmented.\n     * @member {SchedulerPro.model.EventSegmentModel} firstSegment\n     */\n    /**\n     * The event last segment or null if the event is not segmented.\n     * @member {SchedulerPro.model.EventSegmentModel} lastSegment\n     */\n    // Apply baseline defaults to records added to the baselines store\n    processBaselinesStoreData(data) {\n        return applyBaselineDefaults(this, data);\n    }\n    set baselines(baselines) {\n        this.set({ baselines });\n    }\n    // Tests expect baselines to initialize on first access, not when task is created\n    get baselines() {\n        const me = this;\n        // Baselines field is lazy, we are responsible for initializing it when needed. Which is now, on first access\n        if (!me.$initializedBaselines) {\n            const baselinesField = me.fieldMap.baselines;\n            baselinesField.init(me.data, me);\n            me.assignInitables();\n            me.$initializedBaselines = true;\n        }\n        return me.meta.baselinesStore;\n    }\n    get hasBaselines() {\n        const baselinesField = this.fieldMap.baselines;\n        return Boolean(this.baselines?.count ?? this.originalData[baselinesField.dataSource]);\n    }\n    /**\n     * Applies the start/end dates from the task to the corresponding baseline.\n     *\n     * ```javascript\n     * const task = new TaskModel({\n     *      name: 'New task',\n     *      startDate: '2019-01-14',\n     *      endDate: '2019-01-17',\n     *      duration: 3,\n     *      baselines: [\n     *          // Baseline version 1\n     *          {\n     *              startDate: '2019-01-13',\n     *              endDate: '2019-01-16'\n     *          },\n     *          // Baseline version 2\n     *          {\n     *              startDate: '2019-01-14',\n     *              endDate: '2019-01-17'\n     *          },\n     *          // Baseline version 3\n     *          {\n     *              startDate: '2019-01-15',\n     *              endDate: '2019-01-18'\n     *          }\n     *      ]\n     * });\n     *\n     * // Apply the task's start/end dates to the baseline version 3\n     * task.setBaseline(3);\n     * ```\n     * @param {Number} version The baseline version to update\n     */\n    setBaseline(version) {\n        if (version <= 0) {\n            return;\n        }\n        const\n            { baselines }    = this,\n            missingBaselines = version - baselines.count;\n        // Add missing baselines up to the passed version\n        if (missingBaselines > 0) {\n            baselines.add(applyBaselineDefaults(this, new Array(missingBaselines).fill({})));\n        }\n        else {\n            baselines.getAt(version - 1).set(applyBaselineDefaults(this, [{}])[0]);\n        }\n    }\n    get successors() {\n        return Array.from(this.outgoingDeps || []);\n    }\n    set successors(successors) {\n        this.replaceDependencies(successors, true);\n    }\n    setSuccessors(successors) {\n        return this.replaceDependencies(successors, true);\n    }\n    // Updates either predecessors or successors with a new array, updating existing dependency records and\n    // removing existing dependencies not part of current set\n    replaceDependencies(dependencyRecords, isSuccessors) {\n        const\n            me                  = this,\n            { dependencyStore } = me.project,\n            updated             = new Set(),\n            toAdd               = new Set(),\n            toRemove            = [],\n            currentSet          = isSuccessors ? me.outgoingDeps : me.incomingDeps,\n            depsArr             = Array.from(currentSet);\n        // cannot handle removing and adding the same records at the moment.\n        // We used to have here simple \"removing all current & adding provided\" approach\n        // Collect already existing instances and new ones\n        dependencyRecords.forEach(dependency => {\n            const existingDep = depsArr.find(isSuccessors ? dep => dep.toEvent === dependency.toEvent : dep => dep.fromEvent === dependency.fromEvent);\n            if (existingDep) {\n                updated.add(existingDep);\n                // Copy data using our own internal setters\n                existingDep.copyData(dependency);\n            }\n            else {\n                toAdd.add(dependency);\n            }\n        });\n        // Collect records that should be removed\n        currentSet.forEach(dependency => {\n            if (!updated.has(dependency)) {\n                toRemove.push(dependency);\n            }\n        });\n        // remove records\n        toRemove.forEach(dependency => dependencyStore.remove(dependency));\n        // add new records\n        toAdd.forEach(dependency => {\n            if (isSuccessors) {\n                dependency.fromEvent = me;\n            }\n            else {\n                dependency.toEvent = me;\n            }\n            dependencyStore.add(dependency);\n        });\n        return me.commitAsync();\n    }\n    get predecessors() {\n        return Array.from(this.incomingDeps || []);\n    }\n    set predecessors(predecessors) {\n        return this.replaceDependencies(predecessors, false);\n    }\n    setPredecessors(predecessors) {\n        return this.replaceDependencies(predecessors, false);\n    }\n    get assignments() {\n        return super.assignments;\n    }\n    set assignments(assignments) {\n        const\n            me                  = this,\n            { assignmentStore } = me.project,\n            toAdd               = [],\n            currentAssignments  = me.assignments,\n            removedAssignments  = currentAssignments.filter(current => !assignments?.find(newAss => newAss.resource === current.resource));\n        assignments.forEach(assignment => {\n            const currentAssignment = assignmentStore.getAssignmentForEventAndResource(this, assignment.resource);\n            if (currentAssignment) {\n                currentAssignment.copyData(assignment);\n            }\n            // New one\n            else {\n                assignment.remove();\n                toAdd.push(assignment);\n            }\n        });\n        assignmentStore.remove(removedAssignments);\n        assignmentStore.add(toAdd);\n    }\n    get assigned() {\n        const { project } = this;\n        // Figure assignments out before buckets are created  (if part of project)\n        if (project?.isDelayingCalculation) {\n            return project.assignmentStore.storage.findItem('event', this) ?? new Set();\n        }\n        return super.assigned;\n    }\n    set assigned(assigned) {\n        super.assigned = assigned;\n    }\n    //region Is\n    get isDraggable() {\n        return this.draggable;\n    }\n    get isResizable() {\n        return this.resizable && !this.milestone && this.isEditable('endDate');\n    }\n    // override `isMilestone` on TimeSpan model and make it to return the same value what `milestone` returns\n    get isMilestone() {\n        return this.milestone;\n    }\n    /**\n     * Defines if the given task field should be manually editable in UI.\n     * You can override this method to provide your own logic.\n     *\n     * By default, the method defines:\n     * - {@link #field-earlyStartDate}, {@link #field-earlyEndDate}, {@link #field-lateStartDate},\n     * {@link #field-lateEndDate}, {@link #field-totalSlack} as not editable;\n     * - {@link #field-effort}, {@link #property-fullEffort}, {@link #field-percentDone} as not editable for summary\n     *   tasks;\n     * - {@link #field-endDate}, {@link #field-duration} and {@link #field-fullDuration} fields\n     *   as not editable for summary tasks except the {@link #field-manuallyScheduled manually scheduled} ones.\n     *\n     * @param {String} fieldName Name of the field\n     * @returns {Boolean} Returns `true` if the field is editable, `false` if it is not and `undefined` if the task has\n     * no such field.\n     */\n    isEditable(fieldName) {\n        const me = this;\n        switch (fieldName) {\n            // r/o fields\n            case 'earlyStartDate':\n            case 'earlyEndDate':\n            case 'lateStartDate':\n            case 'lateEndDate':\n            case 'totalSlack':\n                return false;\n            // disable effort & percentDone editing for summary tasks\n            case 'effort' :\n            case 'fullEffort' :\n                return me.isLeaf;\n            case 'percentDone' :\n            case 'renderedPercentDone' :\n                return me.isLeaf || !me.project?.autoCalculatePercentDoneForParentTasks;\n            // end/duration is allowed to edit for leafs and manually scheduled summaries\n            case 'endDate' :\n            case 'duration' :\n            case 'fullDuration' :\n                return me.isLeaf || me.manuallyScheduled;\n        }\n        return super.isEditable(fieldName);\n    }\n    isFieldModified(fieldName) {\n        if (fieldName === 'fullEffort') {\n            return super.isFieldModified('effort') || super.isFieldModified('effortUnit');\n        }\n        return super.isFieldModified(fieldName);\n    }\n    //endregion\n    //region Milestone\n    get milestone() {\n        // a summary task may have zero duration due to working time periods mismatch w/ its children\n        // so we operate start and end date pair here\n        if (!this.isLeaf) {\n            const { startDate, endDate } = this;\n            if (startDate && endDate) {\n                return endDate.getTime() === startDate.getTime();\n            }\n        }\n        return this.duration === 0;\n    }\n    set milestone(value) {\n        value ? this.convertToMilestone() : this.convertToRegular();\n    }\n    async setMilestone(value) {\n        return value ? this.convertToMilestone() : this.convertToRegular();\n    }\n    /**\n     * Converts this task to a milestone (start date will match the end date).\n     * @propagating\n     */\n    async convertToMilestone() {\n        return this.setDuration(0, this.durationUnit, false);\n    }\n    /**\n     * Converts the milestone task to a regular task with a duration of 1 (keeping current {@link #field-durationUnit}).\n     * @propagating\n     */\n    async convertToRegular() {\n        if (this.milestone) {\n            return this.setDuration(1, this.durationUnit, false);\n        }\n    }\n    //endregion\n    //region Dependencies\n    /**\n     * Returns all dependencies of this task (both incoming and outgoing)\n     *\n     * @property {Gantt.model.DependencyModel[]}\n     */\n    get allDependencies() {\n        return this.dependencies;\n    }\n    get dependencies() {\n        // Don't crash when calculations are delayed to after refresh (?. since it might be used outside of project)\n        if (this.project?.isDelayingCalculation) {\n            return [];\n        }\n        return [...this.incomingDeps || [], ...this.outgoingDeps || []];\n    }\n    set dependencies(dependencies) {\n        const\n            me           = this,\n            predecessors = [],\n            successors   = [];\n        dependencies?.forEach(dependency => {\n            if (dependency.fromEvent === me || dependency.fromEvent === me.id) {\n                successors.push(dependency);\n            }\n            else if (dependency.toEvent === me || dependency.toEvent === me.id) {\n                predecessors.push(dependency);\n            }\n        });\n        me.setPredecessors(predecessors);\n        me.setSuccessors(successors);\n    }\n    /**\n     * Returns all predecessor tasks of a task\n     *\n     * @property {Gantt.model.TaskModel[]}\n     */\n    get predecessorTasks() {\n        return [...this.incomingDeps || []].map(dependency => dependency.fromEvent);\n    }\n    /**\n     * Returns all successor tasks of a task\n     *\n     * @readonly\n     * @property {Gantt.model.TaskModel[]}\n     */\n    get successorTasks() {\n        return [...this.outgoingDeps || []].map(dependency => dependency.toEvent);\n    }\n    //endregion\n    //region Calculated fields\n    /**\n     * Returns count of all sibling nodes (including their children).\n     * @property {Number}\n     */\n    get previousSiblingsTotalCount() {\n        let task  = this.previousSibling,\n            count = this.parentIndex;\n        while (task) {\n            count += task.descendantCount;\n            task = task.previousSibling;\n        }\n        return count;\n    }\n    /**\n     * Returns the sequential number of the task. A sequential number means the ordinal position of the task in the\n     * total dataset, regardless of its nesting level and collapse/expand state of any parent tasks. The root node has a\n     * sequential number equal to 0.\n     *\n     * For example, in the following tree data sample sequential numbers are specified in the comments:\n     * ```javascript\n     * root : {\n     *     children : [\n     *         {   // 1\n     *             leaf : true\n     *         },\n     *         {       // 2\n     *             children : [\n     *                 {   // 3\n     *                     children : [\n     *                         {   // 4\n     *                             leaf : true\n     *                         },\n     *                         {   // 5\n     *                             leaf : true\n     *                         }\n     *                     ]\n     *                 }]\n     *         },\n     *         {   // 6\n     *             leaf : true\n     *         }\n     *     ]\n     * }\n     * ```\n     * If we collapse parent tasks, sequential number of collapsed tasks won't change.\n     *\n     * @property {Number}\n     */\n    get sequenceNumber() {\n        // Shortcut when part of a store, much cheaper\n        if (this.taskStore) {\n            return this.taskStore.allIndexOf(this) + 1;\n        }\n        // More expensive calculation when not part of a store, to please tests\n        let code = 0,\n            task = this;\n        while (task.parent) {\n            code += task.previousSiblingsTotalCount + 1;\n            task = task.parent;\n        }\n        return code;\n    }\n    //endregion\n    //region Project related methods\n    get isSubProject() {\n        return false;\n    }\n    get subProject() {\n        const me = this;\n        let project = null;\n        if (me.isProject) {\n            project = me;\n        }\n        else {\n            me.bubbleWhile(t => {\n                if (t.isProject) {\n                    project = t;\n                }\n                return !project;\n            });\n        }\n        return project;\n    }\n    //endregion\n    /**\n     * Property which encapsulates the effort's magnitude and units.\n     *\n     *\n     * UI fields representing this property are disabled for summary events.\n     * See {@link #function-isEditable} for details.\n     *\n     * @property {Core.data.Duration}\n     */\n    get fullEffort() {\n        return new Duration({\n            unit      : this.effortUnit,\n            magnitude : this.effort\n        });\n    }\n    set fullEffort(effort) {\n        this.setEffort(effort.magnitude, effort.unit);\n    }\n    //region Scheduler Pro compatibility\n    /**\n     * Returns all resources assigned to an event.\n     *\n     * @property {Gantt.model.ResourceModel[]}\n     * @readonly\n     */\n    get resources() {\n        // Only include valid resources, to not have nulls in the result\n        return this.assignments.reduce((resources, assignment) => {\n            assignment.resource && resources.push(assignment.resource);\n            return resources;\n        }, []);\n    }\n    // Resources + any links to any of them\n    get $linkedResources() {\n        return this.resources?.flatMap(resourceRecord => ([\n            resourceRecord,\n            ...resourceRecord.$links\n        ])) ?? [];\n    }\n    //endregion\n    /**\n     * A `Set<Gantt.model.DependencyModel>` of the outgoing dependencies for this task\n     * @member {Set} outgoingDeps\n     * @readonly\n     */\n    /**\n     * A `Set<Gantt.model.DependencyModel>` of the incoming dependencies for this task\n     * @member {Set} incomingDeps\n     * @readonly\n     */\n    /**\n     * An array of the assignments, related to this task\n     * @member {Gantt.model.AssignmentModel[]} assignments\n     * @readonly\n     */\n    /**\n     * If given resource is assigned to this task, returns a {@link Gantt.model.AssignmentModel} record.\n     * Otherwise returns `null`\n     *\n     * @method getAssignmentFor\n     * @param {Gantt.model.ResourceModel} resource The instance of {@link Gantt.model.ResourceModel}\n     *\n     * @returns {Gantt.model.AssignmentModel|null}\n     */\n    /**\n     * This method assigns a resource to this task.\n     *\n     * Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method assign\n     * @param {Gantt.model.ResourceModel} resource The instance of {@link Gantt.model.ResourceModel}\n     * @param {Number} [units=100] The `units` field of the new assignment\n     *\n     * @async\n     * @propagating\n     */\n    /**\n     * This method unassigns a resource from this task.\n     *\n     * Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method unassign\n     * @param {Gantt.model.ResourceModel} resource The instance of {@link Gantt.model.ResourceModel}\n     * @async\n     * @propagating\n     */\n    /**\n     * Sets the calendar of the task. Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method setCalendar\n     * @param {Gantt.model.CalendarModel} calendar The new calendar. Provide `null` to return back to the project calendar.\n     * @async\n     * @propagating\n     */\n    /**\n     * Returns the task calendar.\n     *\n     * @method getCalendar\n     * @returns {Gantt.model.CalendarModel} The task calendar.\n     */\n    /**\n     * Sets the start date of the task. Will cause the schedule to be updated - returns a `Promise`\n     *\n     * Note, that the actually set start date may be adjusted, according to the calendar, by skipping the non-working time forward.\n     *\n     * @method setStartDate\n     * @param {Date} date The new start date.\n     * @param {Boolean} [keepDuration=true] Whether to keep the duration (and update the end date), while changing the start date, or vice-versa.\n     * @async\n     * @propagating\n     */\n    /**\n     * Sets the end date of the task. Will cause the schedule to be updated - returns a `Promise`\n     *\n     * Note, that the actually set end date may be adjusted, according to the calendar, by skipping the non-working time backward.\n     *\n     * @method setEndDate\n     * @param {Date} date The new end date.\n     * @param {Boolean} [keepDuration=false] Whether to keep the duration (and update the start date), while changing the end date, or vice-versa.\n     * @async\n     * @propagating\n     */\n    /**\n     * Updates the duration (and optionally unit) of the task. Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method setDuration\n     * @param {Number} duration New duration value\n     * @param {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} [unit] New duration\n     * unit\n     * @async\n     * @propagating\n     */\n    /**\n     * Updates the effort (and optionally unit) of the task. Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method setEffort\n     * @param {Number} effort New effort value\n     * @param {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} [unit] New effort\n     * unit\n     * @async\n     * @propagating\n     */\n    /**\n     * Sets the constraint type and (optionally) constraining date to the task.\n     *\n     * @method setConstraint\n     * @param {'finishnoearlierthan'|'finishnolaterthan'|'mustfinishon'|'muststarton'|'startnoearlierthan'|'startnolaterthan'|null} constraintType\n     * Constraint type, please refer to the {@link Gantt.model.TaskModel#field-constraintType} for the valid values.\n     * @param {Date}   [constraintDate] Constraint date.\n     * @async\n     * @propagating\n     */\n    //region Normalization\n    normalize() {\n        // Do nothing, normalization now happens as part of initial propagate and should use calendar anyway\n    }\n    inSetNormalize(field) {\n        // Do nothing, normalization now happens as part of initial propagate and should use calendar anyway\n    }\n    /**\n     * Not (yet) supported by the underlying scheduling engine\n     * @function setStartEndDate\n     * @hide\n     * @param {Date} start The new start date\n     * @param {Date} end The new end date\n     */\n    //endregion\n    joinStore(store) {\n        const\n            me             = this,\n            useOrderedTree = (me.firstStore || store).useOrderedTreeForWbs;\n        if (!me.wbsValue && !me.generatedParent) {\n            if ((me.taskStore || store).isLoadingData || !(me.nextSibling?.wbsValue || me.previousSibling?.wbsValue)) {\n                // If we are being loaded or have no siblings, then we can just process this node and its children.\n                me.refreshWbs({ useOrderedTree, ...refreshWbsOnJoinOptions });\n            }\n            else {\n                // Otherwise, we need to also refresh this node's siblings. Since we only come here if we have a\n                // sibling, we can be sure we also have a parent.\n                me.parent.refreshWbs(refreshWbsOptions, -1);\n            }\n        }\n        super.joinStore(store);\n    }\n    /**\n     * Refreshes the {@link #field-wbsValue} of this record and its children. This is rarely needed but may be required\n     * after a complex series of filtering, inserting, or removing nodes. In particular, removing nodes does create a\n     * gap in `wbsValue` values that may be undesirable.\n     * @param {Object} [options] A set of options for refreshing.\n     * @param {Boolean} [options.deep=true] Pass `false` to not update the `wbsValue` of this node's children.\n     * @param {Boolean} [options.silent=false] Pass `true` to update the `wbsValue` silently (no events). This is done\n     * at load time since this value represents the clean state. Passing `true` also has the effect of not marking the\n     * change as a dirty state on the record, in the case where `wbsValue` has been flagged as `persist: true`.\n     * @param {Boolean} [options.useOrderedTree=false] Pass `true` to use ordered tree to calculate WBS index.\n     * @param {Number} [index] The index of this node in its parent's children array. Pass -1 to ignore this node's\n     * `wbsValue` and only operate on children (if `options.deep`).\n     */\n    refreshWbs(options, index) {\n        const\n            me         = this,\n            { parent } = me,\n            taskStore  = me.firstStore || null,\n            {\n                useOrderedTree = taskStore?.useOrderedTreeForWbs ?? false,\n                refreshed\n            }          = options || {};\n        if (parent && index !== -1 && me.fieldMap.wbsValue) {\n            if (useOrderedTree) {\n                index = me.orderedParentIndex;\n            }\n            else {\n                index = index ?? me.unfilteredIndex ?? me.parentIndex;\n            }\n            index++;\n            const wbs = parent.isRoot ? new Wbs(index) : parent.wbsValue.append(index);\n            if (options?.silent) {\n                me.setData('wbsValue', wbs);\n            }\n            else {\n                // do not trigger `beforeUpdate` for performance optimization purposes,\n                // events assuming no one will want to cancel the update of the `wbs` field\n                me.set('wbsValue', wbs, false, false, false, false, false);\n            }\n        }\n        refreshed?.add(me);\n        if (options?.deep ?? true) {\n            if (useOrderedTree) {\n                for (const child of me.orderedChildren ?? []) {\n                    child.refreshWbs(options);\n                }\n            }\n            else {\n                const\n                    children = me.unfilteredChildren ?? me.children,\n                    n        = children?.length || 0;\n                if (n) {\n                    // The array may be reversed, and if it is, then the sorter has been applied and we need to reverse\n                    // the WBS assignment to match\n                    const reverse = isReversed(children) && taskStore?.sorters?.findIndex(descendingWbsSorter) === 0;\n                    for (let i = 0; i < n; ++i) {\n                        children[i].refreshWbs(options, reverse ? n - i - 1 : i);\n                    }\n                }\n            }\n        }\n    }\n    async tryInsertChild() {\n        return this.getProject().tryPropagateWithChanges(() => {\n            this.insertChild(...arguments);\n        });\n    }\n    updateDependencies(startDate, endDate) {\n        this.outgoingDeps.forEach(dep => {\n            // filter out wrong\n            if (dep.toEvent.isScheduled) {\n                const {\n                    type,\n                    calendar,\n                    toEvent\n                } = dep;\n                // Calculate lag value for the outgoing dependency to keep successor in place. Lag should be\n                // calculated for future start/end dates and should skip non-working time\n                if (startDate) {\n                    if (type === DependencyBaseModel.Type.StartToStart) {\n                        dep.setLag(DateHelper.as('hour', calendar.calculateDurationMs(startDate, toEvent.startDate, true)), 'hour');\n                    }\n                    else if (type === DependencyBaseModel.Type.StartToEnd) {\n                        dep.setLag(DateHelper.as('hour', calendar.calculateDurationMs(startDate, toEvent.endDate, true)), 'hour');\n                    }\n                }\n                if (endDate) {\n                    if (type === DependencyBaseModel.Type.EndToStart) {\n                        dep.setLag(DateHelper.as('hour', calendar.calculateDurationMs(endDate, toEvent.startDate, true)), 'hour');\n                    }\n                    else if (type === DependencyBaseModel.Type.EndToEnd) {\n                        dep.setLag(DateHelper.as('hour', calendar.calculateDurationMs(endDate, toEvent.endDate, true)), 'hour');\n                    }\n                }\n            }\n        });\n    }\n    async moveTaskPinningSuccessors(date) {\n        const me = this;\n        // set start date, this will put new values to the engine and would allow to recalculate dates before\n        // project is committed\n        me.startDate = date;\n        // Go up the tree processing outgoing dependencies for this task and all its parents\n        me.bubble(node => {\n            if (!node.isRoot) {\n                const\n                    // Peek new start/end dates\n                    startDate = node.run('calculateStartDate'),\n                    endDate   = node.run('calculateEndDate');\n                node.updateDependencies(startDate, endDate);\n            }\n        });\n        return me.project.commitAsync();\n    }\n    async setStartDatePinningSuccessors(date) {\n        const\n            me      = this,\n            promise = me.setStartDate(date, false);\n        // Go up the tree processing outgoing dependencies for this task and all its parents\n        me.bubble(node => {\n            if (!node.isRoot) {\n                // Peek new end date\n                const startDate = node.run('calculateStartDate');\n                node.updateDependencies(startDate, null);\n            }\n        });\n        return promise;\n    }\n    async setEndDatePinningSuccessors(date) {\n        const me = this;\n        me.endDate = date;\n        // Go up the tree processing outgoing dependencies for this task and all its parents\n        me.bubble(node => {\n            if (!node.isRoot) {\n                // Peek new end date\n                const endDate = node.run('calculateEndDate');\n                node.updateDependencies(null, endDate);\n            }\n        });\n        return me.project.commitAsync();\n    }\n    getCurrentConfig(options) {\n        const\n            { segments } = this,\n            result       = super.getCurrentConfig(options);\n        // include segments\n        if (result && segments) {\n            result.segments = segments.map(segment => segment.getCurrentConfig(options));\n        }\n        return result;\n    }\n}\nTaskModel.convertEmptyParentToLeaf = true;\n// TaskModel.$meta.fields.map.wbsCode.defineAccessor(TaskModel.prototype, /* force = */true);\nTaskModel._$name = 'TaskModel';", "import AjaxStore from '../../Core/data/AjaxStore.js';\nimport TaskModel from '../model/TaskModel.js';\nimport { ChronoEventTreeStoreMixin } from '../../Engine/quark/store/ChronoEventStoreMixin.js';\nimport PartOfProject from './mixin/PartOfProject.js';\nimport GetEventsMixin from '../../Scheduler/data/mixin/GetEventsMixin.js'; // To allow using TaskStore in Pro & Calendar\nimport DayIndexMixin from '../../Scheduler/data/mixin/DayIndexMixin.js'; // To allow using TaskStore in Calendar\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport Wbs from '../../Core/data/Wbs.js';\n/**\n * @module Gantt/data/TaskStore\n */\nconst\n    refreshWbsForChildrenOptions = { deep : true },\n    wbsAuto                      = Object.freeze({\n        add    : true,\n        remove : true,\n        sort   : true\n    }),\n    wbsManual                    = Object.freeze({\n        add    : false,\n        remove : false,\n        sort   : false\n    }),\n    sortByWbs = (lhs, rhs) => Wbs.compare(lhs?.wbsCode, rhs?.wbsCode);\n/**\n * An object that describes the actions that should trigger a {@link Gantt.model.TaskModel#function-refreshWbs} to\n * update WBS values. Objects of this type are passed to {@link #config-wbsMode} when the simpler\n * values of `'auto'` or (the default) `'manual'` are not desired.\n *\n * The value `'auto'` is equivalent to all properties of this object being `true`.\n * The value `'manual'` is equivalent to all properties of this object being `false`.\n *\n * @typedef WbsMode\n * @property {Boolean} [add] Set this property to `true` to refresh WBS values when nodes are added.\n * @property {Boolean} [remove] Set this property to `true` to refresh WBS values when nodes are removed.\n * @property {Boolean} [sort] Set this property to `true` to refresh WBS values when nodes are sorted.\n */\n/**\n * A class representing the tree of tasks in the Gantt project. An individual task is represented as an instance of the\n * {@link Gantt.model.TaskModel} class. The store expects the data loaded to be hierarchical. Each parent node should\n * contain its children in a property called 'children'.\n *\n * ```javascript\n * const taskStore = new TaskStore({\n *     data : [\n *         {\n *             \"id\"           : 1000,\n *             \"name\"         : \"Cool project\",\n *             \"percentDone\"  : 50,\n *             \"startDate\"    : \"2019-01-02\",\n *             \"expanded\"     : true,\n *             \"children\"     : [\n *                 {\n *                     \"id\"           : 1,\n *                     \"name\"         : \"A leaf node\",\n *                     \"startDate\"    : \"2019-01-02\",\n *                     \"percentDone\"  : 50,\n *                     \"duration\"     : 10,\n *                 }\n *             ]\n *         }\n *     ]\n * });\n * ```\n *\n * @mixes Scheduler/data/mixin/GetEventsMixin\n * @extends Core/data/AjaxStore\n */\nexport default class TaskStore extends ChronoEventTreeStoreMixin.derive(AjaxStore).mixin(\n    PartOfProject,\n    DayIndexMixin,\n    GetEventsMixin\n) {\n    static $name = 'TaskStore';\n    static get defaultConfig() {\n        return {\n            modelClass : TaskModel,\n            /**\n             * CrudManager must load stores in the correct order. Lowest first.\n             * @config {Number}\n             * @private\n             */\n            loadPriority : 200,\n            /**\n             * CrudManager must sync stores in the correct order. Lowest first.\n             * @config {Number}\n             * @private\n             */\n            syncPriority : 300,\n            storeId : 'tasks',\n            tree : true\n        };\n    }\n    static get configurable() {\n        return {\n            /**\n             * Set to `'auto'` to automatically update {@link Gantt.model.TaskModel#field-wbsValue} as records in the\n             * store are manipulated (e.g., when the user performs drag-and-drop reordering).\n             *\n             * In manual mode, the WBS value is initialized as the store loads and only altered implicitly by the\n             * {@link #function-indent} and {@link #function-outdent} methods. The WBS values are otherwise updated only\n             * by an explicit call to {@link Gantt.model.TaskModel#function-refreshWbs}.\n             *\n             * This can also be a {@link #typedef-WbsMode} object that indicates what operations\n             * should automatically {@link Gantt.model.TaskModel#function-refreshWbs refresh} WBS values.\n             *\n             * The operations that trigger WBS refresh can be enabled explicitly in this object, for example:\n             *\n             * ```javascript\n             *  wbsMode : {\n             *      add : true,\n             *      remove : true\n             *  }\n             * ```\n             * The above is an opt-in list that enable auto WBS refresh for node add and remove operations (these two\n             * operations are associated with dragging to reorder items). No other operation will trigger WBS refresh.\n             * At present, this leaves out only the `sort` operation, but if new auto-refreshing operations were added\n             * in future releases, those would also not be included.\n             *\n             * Alternatively, this object can be an opt-out specification if all values are falsy:\n             *\n             * ```javascript\n             *  wbsMode : {\n             *      sort : false\n             *  }\n             * ```\n             * The above two examples are (currently) equivalent in outcome. The choice between opt-in or opt-out form\n             * is a matter of convenience as well as future-proofing preference.\n             *\n             * The value `'auto'` is equivalent to all properties being `true`.\n             * The value `'manual'` (the default) is equivalent to all properties being `false`.\n             * @config {String|WbsMode}\n             */\n            wbsMode : 'manual',\n            /**\n             * Specifies which tree to use to calculate WBS. Ordered tree is unsortable and unfilterable, it\n             * always holds complete tree hierarchy. By default, it uses sortable and filterable tree.\n             * @config {Boolean}\n             * @default\n             */\n            useOrderedTreeForWbs : false,\n            /**\n             * Controls behavior of the outdent logic regarding siblings. By default, outdent will move child to be\n             * its parent's sibling and will move all previous siblings to the outdented node's children. Visually, node\n             * will remain in place just changing the level. When set to `true` only node with its subtree will be\n             * outdented, siblings will not change parent. Visually, node will be moved as last child of the new parent.\n             * @config {Boolean}\n             * @default\n             */\n            outdentIgnoringSiblings : false,\n            /**\n             * Always return changes in increasing WBS order.\n             * @config {Boolean}\n             * @default\n             */\n            forceWbsOrderForChanges : false\n        };\n    }\n    changeWbsMode(value) {\n        if (value === 'auto') {\n            return wbsAuto;\n        }\n        if (value && typeof value === 'object') {\n            if (ObjectHelper.values(value).every(v => !v)) {   // if (an opt-out list)\n                value = ObjectHelper.assign({}, wbsAuto, value);\n            }\n            return value;\n        }\n        return wbsManual;\n    }\n    /**\n     * For each task in this TaskStore, sets the data in the passed baseline index to the current state of the task.\n     * @param {Number} index The index in the baselines list of the baseline to update.\n     */\n    setBaseline(index) {\n        const data = this.storage.values;\n        this.forEach(task => task.setBaseline(index));\n        this.trigger('refresh', {\n            action  : 'batch',\n            records : data,\n            data\n        });\n    }\n    /**\n     * Increase the indentation level of one or more tasks in the tree\n     * @param {Gantt.model.TaskModel|Gantt.model.TaskModel[]} nodes The nodes to indent.\n     * @returns {Promise} A promise which yields the result of the operation\n     * @fires indent\n     * @fires change\n     */\n    async indent(nodes) {\n        const\n            me                     = this,\n            { taskStore, project } = me;\n        let result = false;\n        nodes = Array.isArray(nodes) ? nodes.slice() : [nodes];\n        // 1. Filter out project nodes\n        nodes = nodes.filter(node => !node.isProjectModel);\n        // 2. Filtering out all nodes which parents are also to be indented as well as the ones having no previous\n        //    sibling since such nodes can't be indented\n        nodes = nodes.filter(node => {\n            let result;\n            result = Boolean(node.previousSibling);\n            while (result && !node.isRoot) {\n                result = !nodes.includes(node.parent);\n                node   = node.parent;\n            }\n            return result;\n        });\n        /**\n         * Fired before tasks in the tree are indented. Return `false` from a listener to prevent the indent.\n         * @event beforeIndent\n         * @preventable\n         * @param {Gantt.data.TaskStore} source The task store\n         * @param {Gantt.model.TaskModel[]} records Tasks to be indented\n         */\n        if (nodes.length && taskStore.trigger('beforeIndent', { records : nodes }) !== false) {\n            // 3. Sorting nodes into tree walk order (visible order)\n            nodes.sort((lhs, rhs) => Math.max(0, me.indexOf(lhs)) - Math.max(0, me.indexOf(rhs)));\n            // No events should go to the UI until we have finished the operation successfully\n            taskStore.beginBatch();\n            // Ask the project to try the indent operation\n            result = await project.tryPropagateWithChanges(() => {\n                for (const node of nodes) {\n                    const newParent = node.previousSibling;\n                    newParent.appendChild(node);\n                    me.toggleCollapse(newParent, false);\n                }\n            });\n            if (me.isDestroyed) {\n                return;\n            }\n            // Now show the successful result\n            taskStore.endBatch();\n            if (result) {\n                me.refreshWbsForChildren({\n                    up : 2,  // the nodes are now deeper but that move affects their grandparent node's WBS\n                    nodes\n                });\n                /**\n                 * Fired after tasks in the tree are indented\n                 * @event indent\n                 * @param {Gantt.data.TaskStore} source The task store\n                 * @param {Gantt.model.TaskModel[]} records Tasks that were indented\n                 */\n                me.trigger('indent', { records : nodes });\n                me.trigger('change', {\n                    action  : 'indent',\n                    records : nodes\n                });\n            }\n        }\n        return result;\n    }\n    /**\n     * Decrease the indentation level of one or more tasks in the tree\n     * @param {Gantt.model.TaskModel|Gantt.model.TaskModel[]} nodes The nodes to outdent.\n     * @returns {Promise} A promise which yields the result of the operation\n     * @fires outdent\n     * @fires change\n     */\n    async outdent(nodes) {\n        const\n            me                     = this,\n            { taskStore, project } = me;\n        let result = false;\n        nodes = Array.isArray(nodes) ? nodes.slice() : [nodes];\n        // 1. Filter out project nodes\n        nodes = nodes.filter(node => !node.isProjectModel);\n        // 2. Filtering out all nodes which parents are also to be outdented as well as the ones having no previous sibling\n        //    since such nodes can't be indented\n        nodes = nodes.filter(node => {\n            let result;\n            result = node.parent && !node.parent.isRoot;\n            while (result && !node.isRoot) {\n                result = !nodes.includes(node.parent);\n                node   = node.parent;\n            }\n            return result;\n        });\n        /**\n         * Fired before tasks in the tree are outdented. Return `false` from a listener to prevent the outdent.\n         * @event beforeOutdent\n         * @preventable\n         * @param {Gantt.data.TaskStore} source The task store\n         * @param {Gantt.model.TaskModel[]} records Tasks to be outdented\n         */\n        if (nodes.length && taskStore.trigger('beforeOutdent', { records : nodes }) !== false) {\n            // 3. Process nodes in reverse tree walk (WBS) order\n            nodes.sort((lhs, rhs) => Wbs.compare(rhs.wbsCode, lhs.wbsCode));\n            // No events should go to the UI until we have finished the operation successfully\n            taskStore.beginBatch();\n            result = await project.tryPropagateWithChanges(() => {\n                for (const node of nodes) {\n                    const newChildren = !this.outdentIgnoringSiblings && node.parent.children.slice(node.parent.children.indexOf(node) + 1);\n                    node.parent.parent.insertChild(node, node.parent.nextSibling, false, {\n                        orderedBeforeNode : node.parent.nextOrderedSibling\n                    });\n                    // https://github.com/bryntum/support/issues/5721\n                    // it seems appending empty array is recorded by stm but can not be correctly restored\n                    // should be fixed in stm of course, but just avoiding this call (as its a no-op anyway)\n                    // is much simpler fix\n                    newChildren.length && node.appendChild(newChildren);\n                    me.toggleCollapse(node, false);\n                }\n            });\n            if (me.isDestroyed) {\n                return;\n            }\n            taskStore.endBatch();\n            if (result) {\n                me.refreshWbsForChildren({\n                    up : 1,  // only need to update the (new) parent\n                    nodes\n                });\n                /**\n                 * Fired after tasks in the tree are outdented\n                 * @event outdent\n                 * @param {Gantt.data.TaskStore} source The task store\n                 * @param {Gantt.model.TaskModel[]} records Tasks that were outdented\n                 */\n                me.trigger('outdent', { records : nodes });\n                me.trigger('change', {\n                    action  : 'outdent',\n                    records : nodes\n                });\n            }\n        }\n        return result;\n    }\n    onNodeAddChild(parent, children, index, isMove, silent = false) {\n        super.onNodeAddChild(parent, children, index, isMove, silent);\n        if (!this.isLoadingData && this.wbsMode.add) {\n            parent.refreshWbs(refreshWbsForChildrenOptions);\n            // Trigger refresh of old & new parent children for moved nodes, if needed\n            const wbsRefreshed = new Set();\n            children.forEach(child => {\n                const oldParent = this.getById(child.meta.oldParentId);\n                if (oldParent && parent !== oldParent && !wbsRefreshed.has(oldParent)) {\n                    wbsRefreshed.add(oldParent);\n                    oldParent.refreshWbs(refreshWbsForChildrenOptions, -1);\n                }\n            });\n        }\n    }\n    onNodeRemoveChild(parent, children, index, flags = { isMove : false, silent : false, unfiltered : false }) {\n        const result = super.onNodeRemoveChild(parent, children, index, flags);\n        if (this.wbsMode.remove && !flags.isMove) {\n            parent.refreshWbs(refreshWbsForChildrenOptions);\n        }\n        return result;\n    }\n    // Preserve outdented nodes' position among new siblings when unsorted (#7135)\n    // Requires forceWbsOrderInChanges=true\n    // NOTE: This code is trying to solve a subset of the problem of keeping visual trees consistent among\n    // different projects. However, since we do not have enough information to tell outdent and cut/paste/move apart,\n    // we erroneously apply same solution to those problems too corrupting WBS (#7311).\n    // When working on a general solution of that problem we need to make sure we keep the tests ensuring behavior and\n    // remove this code which will likely interfere with any solution.\n    applyChangeset(changes, transformFn = null, ...rest) {\n        const\n            me                    = this,\n            { updated, modified } = transformFn?.(changes, me) ?? changes,\n            altered               = updated ?? modified ?? [];\n        // For nodes whose parent ID is changing to their grandparent, remember the original node above and\n        // later, reorder to keep it that way (below)\n        const outdented = (me.forceWbsOrderForChanges && me.tree && !me.isSorted && !me.isGrouped)\n            ? altered.reduce((outdented, { id, parentId }) => {\n                if (parentId !== undefined) {\n                    const\n                        node = me.getById(id),\n                        currentGrandparentId = node?.parent?.parentId;\n                    if (parentId === currentGrandparentId) {\n                        outdented.push({\n                            node,\n                            originalNodeAbove : node.previousSibling ?? node.parent\n                        });\n                    }\n                }\n                return outdented;\n            }, [])\n            : [];\n        const log = super.applyChangeset(changes, transformFn, ...rest);\n        if (outdented.length > 0) {\n            // Restore position of outdented nodes, requires forceWbsOrderInChanges=true (#7135)\n            for (const { node, originalNodeAbove } of outdented) {\n                const\n                    { parent } = node,\n                    nodeAboveIndex = originalNodeAbove.parent === parent ? originalNodeAbove.parentIndex\n                        : (originalNodeAbove.parent?.parent === parent ? originalNodeAbove.parent.parentIndex : undefined);\n                if (nodeAboveIndex !== undefined && parent.children.includes(node)) {\n                    // When moving nodes to their final place ignore ordered tree - ordered tree is already correct\n                    parent.insertChild(node, nodeAboveIndex + 1, false, { orderedParentIndex : { skip : true } });\n                }\n            }\n        }\n        return log;\n    }\n    afterChangesetApplied(modifiedParents) {\n        super.afterChangesetApplied(modifiedParents);\n        const\n            modifiedParentsByDepth = modifiedParents.slice().sort((a, b) => a.childLevel - b.childLevel),\n            refreshed = new Set();\n        modifiedParentsByDepth.forEach(record => {\n            if (!refreshed.has(record)) {\n                // check if it works w/o `useOrderedTree : true`\n                record.refreshWbs({ deep : true, /*useOrderedTree : true,*/ refreshed });\n            }\n        });\n    }\n    afterPerformSort(silent) {\n        if (this.wbsMode.sort) {\n            this.rootNode.refreshWbs(refreshWbsForChildrenOptions);\n        }\n        super.afterPerformSort(silent);\n    }\n    /**\n     * This method updates the WBS values due to changes in the indentation of a given set of child nodes.\n     * @param {Object} options An object containing options in addition to a `nodes` property with the children.\n     * @param {Gantt.model.TaskModel[]} options.nodes The array of child record to refresh. This is required.\n     * @param {Boolean} [options.silent=false] Pass `true` to update the `wbsValue` silently (no events).\n     * @param {Number} [options.up=1] The number of ancestors to ascend when determining the parent(s) to refresh.\n     * By default, this value is 1 which indicates the immediate parent of the supplied nodes. This is suitable for\n     * outdenting. For indenting, this value should be 2. This is because the previous parent node (now grandparent\n     * node) needs to be refreshed, not merely the new parent.\n     * @private\n     */\n    refreshWbsForChildren(options) {\n        const\n            nodes   = options.nodes,\n            opts    = { ...refreshWbsForChildrenOptions, ...options },\n            parents = new Set(),\n            up      = opts.up || 0;\n        let n, parent;\n        nodes.forEach(node => {\n            for (parent = node, n = up; parent && n; --n) {\n                parent = parent.parent;\n            }\n            parents.add(parent);\n        });\n        for (parent of parents) {\n            parent.refreshWbs(opts);\n        }\n    }\n    getTotalTimeSpan() {\n        return {\n            startDate : this.getProject().startDate,\n            endDate   : this.getProject().endDate\n        };\n    }\n    getEventsForResource(resourceId) {\n        const\n            resource    = this.resourceStore.getById(resourceId),\n            assignments = resource?.assignments.filter(assignment => assignment.isPartOfStore(this.assignmentStore)) || [],\n            events      = [];\n        assignments.forEach(({ event }) => event && events.push(event));\n        return events;\n    }\n    /**\n     * Checks if a date range is allocated or not for a given resource.\n     * @param {Date} start The start date\n     * @param {Date} end The end date\n     * @param {Scheduler.model.EventModel|null} excludeEvent An event to exclude from the check (or null)\n     * @param {Scheduler.model.ResourceModel} resource The resource\n     * @returns {Boolean} True if the timespan is available for the resource\n     * @category Resource\n     */\n    isDateRangeAvailable(start, end, excludeEvent, resource) {\n        // NOTE: Also exists in EventStoreMixin.js\n        // This should be a collection of unique event records\n        const allEvents = new Set(this.getEventsForResource(resource));\n        // In private mode we can pass an AssignmentModel. In this case, we assume that multi-assignment is used.\n        // So we need to make sure that other resources are available for this time too.\n        // No matter if the event retrieved from the assignment belongs to the target resource or not.\n        // We gather all events from the resources the event is assigned to except of the one from the assignment record.\n        // Note, events from the target resource are added above.\n        if (excludeEvent?.isAssignment) {\n            const\n                currentEvent = excludeEvent.event,\n                resources    = currentEvent.resources;\n            resources.forEach(resource => {\n                // Ignore events for the resource which is passed as an AssignmentModel to excludeEvent\n                if (resource.id !== excludeEvent.resourceId) {\n                    this.getEventsForResource(resource).forEach(event => allEvents.add(event));\n                }\n            });\n        }\n        if (excludeEvent) {\n            const eventToRemove = excludeEvent.isAssignment ? excludeEvent.event : excludeEvent;\n            allEvents.delete(eventToRemove);\n        }\n        return !Array.from(allEvents).some(event => event.isScheduled && DateHelper.intersectSpans(start, end, event.startDate, event.endDate));\n    }\n    linkTasks(tasks) {\n        for (let i = 1; i < tasks.length; i++) {\n            const\n                from = tasks[i - 1],\n                to   = tasks[i];\n            if (!this.dependencyStore.getEventsLinkingDependency(from, to)) {\n                this.dependencyStore.add({ from, to });\n            }\n        }\n    }\n    unlinkTasks(tasks) {\n        this.dependencyStore.remove(this.dependencyStore.query(({ fromTask, toTask }) => tasks.includes(fromTask) || tasks.includes(toTask)));\n    }\n    /**\n     * Enforce `forceWbsOrderForChanges` if set.\n     * @private\n     */\n    get changes() {\n        const changes = super.changes;\n        if (changes && this.forceWbsOrderForChanges) {\n            changes.added.sort(sortByWbs);\n            changes.modified.sort(sortByWbs);\n            changes.removed.sort(sortByWbs);\n        }\n        return changes;\n    }\n}\nTaskStore._$name = 'TaskStore';", "import TooltipBase from '../../Scheduler/feature/base/TooltipBase.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\n/**\n * @module Gantt/feature/Baselines\n */\nconst baselineSelector = '.b-task-baseline';\n/**\n * Displays a {@link Gantt.model.TaskModel task}'s {@link Gantt.model.TaskModel#field-baselines} below the tasks in the\n * timeline.\n *\n * {@inlineexample Gantt/feature/Baselines.js}\n *\n * This feature also optionally shows a tooltip when hovering any of the task's baseline elements. The\n * tooltip's content may be customized.\n *\n * <div class=\"note\">If dates (startDate and endDate) are left out in the baseline data, the task's dates will be\n * applied. If dates are `null`, they will be kept empty and the baseline bar won't be displayed in the UI.</div>\n *\n * To customize the look of baselines, you can supply `cls` or `style\u00B4 in the baseline data.\n *\n * This feature is **disabled** by default.\n * For info on enabling it, see {@link Grid.view.mixin.GridFeatures}.\n *\n * @extends Scheduler/feature/base/TooltipBase\n * @demo Gantt/baselines\n * @classtype baselines\n * @feature\n */\nexport default class Baselines extends TooltipBase {\n    //region Config\n    static get $name() {\n        return 'Baselines';\n    }\n    // Default configuration.\n    static get defaultConfig() {\n        return {\n            cls         : 'b-gantt-task-tooltip',\n            align       : 't-b',\n            forSelector : baselineSelector,\n            recordType  : 'baseline'\n        };\n    }\n    static configurable = {\n        /**\n         * An empty function by default, but provided so that you can override it. This function is called each time\n         * a task baseline is rendered into the gantt to render the contents of the baseline element.\n         *\n         * Returning a string will display it in the baseline bar, it accepts both plain text or HTML. It is also\n         * possible to return a DOM config object which will be synced to the baseline bars content.\n         *\n         * ```javascript\n         * // using plain string\n         * new Gantt({\n         *     features : {\n         *         baselines : {\n         *             renderer : ({ baselineRecord }) => baselineRecord.startDate\n         *         }\n         *     }\n         * });\n         *\n         * // using DOM config\n         * new Gantt({\n         *     features : {\n         *         baselines : {\n         *             renderer : ({ baselineRecord }) => {\n         *                 return {\n         *                     tag : 'b',\n         *                     html : baselineRecord.startDate\n         *                 };\n         *             }\n         *         }\n         *     }\n         * });\n         * ```\n         *\n         * @param {Object} detail An object containing the information needed to render a Baseline.\n         * @param {Gantt.model.TaskModel} detail.taskRecord The task record.\n         * @param {Gantt.model.Baseline} detail.baselineRecord The baseline record.\n         * @param {DomConfig} detail.renderData An object containing details about the baseline element.\n         * @returns {DomConfig|DomConfig[]|String} A string or an DomObject config object to append to a baseline element children\n         * @prp {Function}\n         */\n        renderer : null\n    };\n    static get pluginConfig() {\n        return {\n            chain : [\n                // onTaskDataGenerated for populating task with baselines\n                'onTaskDataGenerated',\n                // onInternalPaint for creating tooltip (in TooltipBase)\n                'onInternalPaint'\n            ]\n        };\n    }\n    updateRenderer() {\n        this.gantt.refresh();\n    }\n    //endregion\n    //region Init & destroy\n    construct(gantt, config) {\n        this.tipId = `${gantt.id}-baselines-tip`;\n        this.gantt = gantt;\n        super.construct(gantt, config);\n    }\n    doDisable(disable) {\n        // Hide or show the baseline elements\n        this.client.refreshWithTransition();\n        super.doDisable(disable);\n    }\n    //endregion\n    //region Element & template\n    resolveTimeSpanRecord(forElement) {\n        const baselineElement = forElement.closest(baselineSelector);\n        return baselineElement?.elementData.baseline;\n    }\n    /**\n     * Template (a function accepting event data and returning a string) used to display info in the tooltip.\n     * The template will be called with an object as with fields as detailed below\n     * @config {Function}\n     * @param {Object} data A data block containing the information needed to create tooltip content\n     * @param {Gantt.model.Baseline} data.baseline The Baseline record to display\n     * @param {String} data.startClockHtml Predefined HTML to show the start time\n     * @param {String} data.endClockHtml Predefined HTML to show the end time\n     * @returns {DomConfig|String|null}\n     */\n    template(data) {\n        const\n            me              = this,\n            { baseline }    = data,\n            { task }        = baseline,\n            displayDuration = me.client.formatDuration(baseline.duration);\n        return `\n            <div class=\"b-gantt-task-title\">${StringHelper.encodeHtml(task.name)} (baseline ${baseline.parentIndex + 1})</div>\n            <table>\n            <tr><td>${me.L('L{TaskTooltip.Start}')}:</td><td>${data.startClockHtml}</td></tr>\n            ${baseline.milestone ? '' : `\n                <tr><td>${me.L('L{TaskTooltip.End}')}:</td><td>${data.endClockHtml}</td></tr>\n                <tr><td>${me.L('L{TaskTooltip.Duration}')}:</td><td class=\"b-right\">${displayDuration + ' ' + DateHelper.getLocalizedNameOfUnit(baseline.durationUnit, baseline.duration !== 1)}</td></tr>\n            `}\n            </table>\n            `;\n    }\n    getTaskDOMConfig(taskRecord, top) {\n        const\n            me        = this,\n            baselines = taskRecord.baselines.allRecords,\n            { rtl }   = me.client,\n            position  = rtl ? 'right' : 'left';\n        return {\n            className : {\n                'b-baseline-wrap' : true\n            },\n            style : {\n                transform : `translateY(${top}px)`\n            },\n            dataset : {\n                // Prefix task id to allow element reusage also for baseline wrap\n                taskId : `baselinesFor${taskRecord.id}`\n            },\n            children : baselines.map((baseline, i) => {\n                const\n                    baselineBox = me.gantt.taskRendering.getTaskBox(baseline),\n                    inset       = baselineBox ? (rtl ? me.client.timeAxisSubGrid.totalFixedWidth - baselineBox.left : baselineBox.left) : 0;\n                if (baselineBox) {\n                    const renderData = {\n                        className : {\n                            [baseline.cls]              : baseline.cls,\n                            'b-task-baseline'           : 1,\n                            'b-task-baseline-milestone' : baseline.milestone\n                        },\n                        style : {\n                            width      : baselineBox.width,\n                            [position] : inset,\n                            style      : baseline.style\n                        },\n                        dataset : {\n                            index : i\n                        },\n                        elementData : {\n                            baseline\n                        }\n                    };\n                    const value = me.renderer ? me.renderer({ baselineRecord : baseline, taskRecord, renderData }) : '';\n                    if (typeof value === 'string') {\n                        renderData.html = value;\n                    }\n                    else {\n                        renderData.children = [value].flat();\n                    }\n                    return renderData;\n                }\n                else {\n                    return null;\n                }\n            }),\n            syncOptions : {\n                syncIdField : 'index',\n                strict      : true\n            }\n        };\n    }\n    onTaskDataGenerated({ taskRecord, top, extraConfigs, wrapperCls }) {\n        if (!this.disabled && taskRecord.hasBaselines) {\n            wrapperCls['b-has-baselines'] = 1;\n            extraConfigs.push(this.getTaskDOMConfig(taskRecord, top));\n        }\n    }\n    //endregion\n}\nBaselines._$name = 'Baselines'; GridFeatureManager.registerFeature(Baselines, false, 'Gantt');\n", "import ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport SchedulerProCellEdit from '../../SchedulerPro/feature/CellEdit.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport EventHelper from '../../Core/helper/EventHelper.js';\n/**\n * @module Gantt/feature/CellEdit\n */\nconst tabEaterSpec = {\n    element : document,\n    capture : true,\n    keydown : e => e.key === 'Tab' && (e.preventDefault(), e.stopImmediatePropagation())\n};\n/**\n * Extends the {@link Grid.feature.CellEdit} to encapsulate Gantt functionality. This feature is enabled by <b>default</b>\n *\n * {@inlineexample Gantt/feature/CellEdit.js}\n *\n * Editing can be started by a user by double-clicking an editable cell in the gantt's data grid, or it can be started programmatically\n * by calling {@link Grid/feature/CellEdit#function-startEditing} and providing it with correct cell context.\n *\n * See {@link #function-doAddNewAtEnd}.\n *\n * ## Instant update\n * If {@link Grid.column.Column#config-instantUpdate} on the column is set to true, record will be\n * updated instantly as value in the editor is changed. In combination with\n * {@link Gantt.model.ProjectModel#config-autoSync} it could result in excessive requests to the backend.\n *\n * Instant update is enabled for these columns by default:\n * - {@link Scheduler.column.DurationColumn}\n * - {@link Gantt.column.StartDateColumn}\n * - {@link Gantt.column.EndDateColumn}\n * - {@link Gantt.column.ConstraintDateColumn}\n * - {@link Gantt.column.DeadlineDateColumn}\n * - {@link Gantt.column.EarlyStartDateColumn}\n * - {@link Gantt.column.EarlyEndDateColumn}\n * - {@link Gantt.column.LateStartDateColumn}\n * - {@link Gantt.column.LateEndDateColumn}\n *\n * To disable instant update on the column set config to false:\n *\n * ```javascript\n * new Gantt({\n *     columns: [\n *         {\n *             type: 'startdate',\n *             instantUpdate: false\n *         }\n *     ]\n * })\n * ```\n *\n * This feature is **enabled** by default.\n *\n * @extends SchedulerPro/feature/CellEdit\n *\n * @classtype cellEdit\n * @feature\n *\n * @typings SchedulerPro.feature.CellEdit -> SchedulerPro.feature.SchedulerProCellEdit\n */\nexport default class CellEdit extends SchedulerProCellEdit {\n    static get $name() {\n        // NOTE: Even though the class name matches the one defined on the base class\n        // we need this method in order registerFeature() to work properly\n        // (it uses hasOwnProperty when detecting the class name)\n        return 'CellEdit';\n    }\n    // Default configuration\n    static get defaultConfig() {\n        return {\n            addNewAtEnd : {\n                duration : 1\n            }\n        };\n    }\n    static get pluginConfig() {\n        const cfg = super.pluginConfig;\n        cfg.chain = [...cfg.chain, 'onProjectChange'];\n        return cfg;\n    }\n    onProjectChange() {\n        // Cancel editing if project is changed\n        this.cancelEditing(true);\n    }\n    // Provide any editor with access to the current project\n    getEditorForCell({ record }) {\n        const\n            editor         = super.getEditorForCell(...arguments),\n            { inputField } = editor;\n        inputField.project     = record.project;\n        inputField.eventRecord = record;\n        // unified API of data loading between the task editing / cell editing\n        inputField.loadEvent?.(record, false);\n        return editor;\n    }\n    /**\n     * Adds a new, empty record at the end of the TaskStore with the initial\n     * data specified by the {@link Grid.feature.CellEdit#config-addNewAtEnd} setting.\n     *\n     * @on-queue\n     * @returns {Promise} Newly added record wrapped in a promise.\n     */\n    doAddNewAtEnd() {\n        const\n            me                                  = this,\n            gantt                               = me.grid,\n            { addNewAtEnd, addToCurrentParent } = me,\n            { project, newTaskDefaults }        = gantt,\n            tabEater                            = EventHelper.on(tabEaterSpec);\n        return project.queue(async() => {\n            // First finish any ongoing calculations. Promise executor will run in the following microtask, so project\n            // can get destroyed.\n            await (!project.isDestroying && project.commitAsync());\n            // Block adding after destruction (async above) or if using a \"display store\"\n            if (gantt.isDestroyed || gantt.store !== gantt.taskStore) {\n                return null;\n            }\n            const data = ObjectHelper.assign({\n                name      : me.L('L{Gantt.New task}'),\n                startDate : project.startDate\n            }, addNewAtEnd, newTaskDefaults);\n            let newTask;\n            if (!addToCurrentParent) {\n                newTask = gantt.taskStore.rootNode.appendChild(data);\n            }\n            else {\n                newTask = gantt.addTaskBelow(gantt.taskStore.last, { data });\n            }\n            await project.commitAsync();\n            if (gantt.isDestroyed) {\n                return null;\n            }\n            // If the new record was not added due to it being off the end of the rendered block\n            // ensure we force it to be there before we attempt to edit it.\n            if (!gantt.rowManager.getRowFor(newTask)) {\n                gantt.rowManager.displayRecordAtBottom();\n            }\n            // Resume allowing tabbing in a short while when the DOM is in a state to accept focus\n            me.setTimeout(tabEater, 100);\n            return newTask;\n        });\n    }\n    onCellEditStart() {\n        this.client.project.suspendAutoSync();\n    }\n    afterCellEdit() {\n        this.client.project.resumeAutoSync();\n    }\n}\nCellEdit._$name = 'CellEdit'; GridFeatureManager.registerFeature(CellEdit, true, 'Gantt');\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\n/**\n * @module Gantt/feature/CriticalPaths\n */\n/**\n * This feature highlights the project _critical paths_.\n * Every task is important, but only some of them are critical.\n * The critical path is a chain of linked tasks that directly affects the project finish date.\n * If any task on the critical path is late, the whole project is late.\n *\n * For more details on the _critical path method_ please check [this article](https://en.wikipedia.org/wiki/Critical_path_method).\n *\n * This feature is loaded by default, but the visualization needs to be enabled:\n *\n * ```javascript\n * // let's visualize the project critical paths\n * gantt.features.criticalPaths.disabled = false;\n * ```\n *\n * {@inlineexample Gantt/feature/CriticalPaths.js}\n *\n * If you need to get information about critical paths, you can refer to\n * {@link Gantt/model/ProjectModel#property-criticalPaths} property of the project:\n *\n * ```javascript\n * const paths = gantt.project.criticalPaths;\n * ```\n *\n * @extends Core/mixin/InstancePlugin\n * @demo Gantt/criticalpaths\n * @classtype criticalPaths\n * @feature\n */\nexport default class CriticalPaths extends Delayable(InstancePlugin) {\n    //region Config\n    static get $name() {\n        return 'CriticalPaths';\n    }\n    static get defaultConfig() {\n        return {\n            cls                   : 'b-gantt-critical-paths',\n            criticalDependencyCls : 'b-critical',\n            disabled              : true\n        };\n    }\n    static get pluginConfig() {\n        return {\n            chain : ['onTaskDataGenerated']\n        };\n    }\n    //endregion\n    //region Init\n    doDisable(disable) {\n        const me = this;\n        if (disable) {\n            me.unhighlightCriticalPaths();\n        }\n        // Highlight now if we have entered graph\n        else if (me.client.project.graph) {\n            me.highlightCriticalPaths();\n        }\n        // In delayed calculation mode (the default) we might not be in graph yet, postpone highlighting until we are\n        else {\n            me.client.project.ion({\n                graphReady() {\n                    me.highlightCriticalPaths();\n                },\n                thisObj : me,\n                once    : true\n            });\n        }\n        super.doDisable(disable);\n    }\n    getDependenciesFeature() {\n        // return dependencies feature only when it's ready\n        return this.client.foregroundCanvas && this.client.features.dependencies;\n    }\n    setupObserver() {\n        const\n            me = this,\n            { project }  = me.client;\n        let dependencies;\n        // destroy previous observer if any\n        me.destroyObserver();\n        me.criticalPathObserver = project.getGraph().observe(function * () {\n            return yield project.$.criticalPaths;\n        }, criticalPaths => {\n            // if the feature is not disabled\n            if (!me.disabled) {\n                me.removeCriticalCls();\n                // check if dependencies feature is there\n                if ((dependencies = dependencies || me.getDependenciesFeature())) {\n                    for (const path of criticalPaths) {\n                        for (const node of path) {\n                            if (node.dependency) {\n                                dependencies.highlight(node.dependency, me.criticalDependencyCls);\n                            }\n                        }\n                    }\n                }\n                /**\n                 * Fired when critical paths get highlighted.\n                 *\n                 * See also: {@link #event-criticalPathsUnhighlighted}\n                 * @event criticalPathsHighlighted\n                 */\n                me.client.trigger('criticalPathsHighlighted');\n            }\n        });\n    }\n    destroyObserver() {\n        if (this.criticalPathObserver) {\n            this.client.project?.getGraph?.().removeIdentifier(this.criticalPathObserver);\n            this.criticalPathObserver = null;\n        }\n    }\n    doDestroy() {\n        this.destroyObserver();\n        super.doDestroy();\n    }\n    highlightCriticalPaths() {\n        const\n            me          = this,\n            { element } = me.client;\n        // the component has cls set means we had CPs rendered so need to clean them\n        if (element.classList.contains(me.cls)) {\n            me.unhighlightCriticalPaths();\n        }\n        me.setupObserver();\n        // add the feature base cls to enable stylesheets\n        element.classList.add(me.cls);\n    }\n    removeCriticalCls() {\n        const\n            project      = this.client.project,\n            dependencies = this.getDependenciesFeature();\n        // if we have dependencies rendered remove classes from them\n        if (dependencies) {\n            project.dependencyStore.forEach(dependency => dependencies.unhighlight(dependency, this.criticalDependencyCls));\n        }\n    }\n    unhighlightCriticalPaths() {\n        const\n            me     = this,\n            client = me.client;\n        // destroy criticalPath atom observer\n        me.destroyObserver();\n        me.removeCriticalCls();\n        // remove the feature base cls\n        client.element.classList.remove(me.cls);\n        /**\n         * Fired when critical paths get hidden.\n         *\n         * See also: {@link #event-criticalPathsHighlighted}\n         * @event criticalPathsUnhighlighted\n         */\n        client.trigger('criticalPathsUnhighlighted');\n    }\n    //endregion\n    // Add DOMConfigs for enabled indicators as `extraConfigs` on the task. Will in the end be added to the task row\n    onTaskDataGenerated(renderData) {\n        if (!this.disabled) {\n            renderData.cls['b-critical'] = renderData.taskRecord.critical;\n        }\n    }\n}\nCriticalPaths._$name = 'CriticalPaths'; GridFeatureManager.registerFeature(CriticalPaths, true, 'Gantt');\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\nimport VersionHelper from '../../Core/helper/VersionHelper.js';\nimport { DependencyType } from '../../Engine/scheduling/Types.js';\nimport SchedulerProDependencies from '../../SchedulerPro/feature/Dependencies.js';\n/**\n * @module Gantt/feature/Dependencies\n */\nconst\n    // Map dependency type to side of a box, for displaying an icon in the tooltip\n    fromBoxSide        = [\n        'start',\n        'start',\n        'end',\n        'end'\n    ],\n    toBoxSide          = [\n        'start',\n        'end',\n        'start',\n        'end'\n    ],\n    criticalPathSorter = ({ fromTask: a }, { fromTask: b }) => (a?.critical === b?.critical) ? 0 : a?.critical ? 1 : -1,\n    // Round to half pixels, more precise is not reliable x-browser\n    round              = num => Math.round(num * 2) / 2;\n// noinspection JSClosureCompilerSyntax\n/**\n * Feature that draws dependencies between tasks. Uses a dependency {@link Gantt.model.ProjectModel#property-dependencyStore store}\n * to determine which dependencies to draw.\n *\n * {@inlineexample Gantt/guides/gettingstarted/basic.js}\n *\n * To customize the dependency tooltip, you can provide the {@link Scheduler.feature.Dependencies#config-tooltip} config\n * and specify a {@link Core.widget.Tooltip#config-getHtml} function. For example:\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         dependencies : {\n *             tooltip : {\n *                 getHtml({ activeTarget }) {\n *                     const dependencyModel = gantt.resolveDependencyRecord(activeTarget);\n *\n *                     if (!dependencyModel) return null;\n *\n *                     const { fromEvent, toEvent } = dependencyModel;\n *\n *                     return `${fromEvent.name} (${fromEvent.id}) -> ${toEvent.name} (${toEvent.id})`;\n *                 }\n *             }\n *         }\n *     }\n * }\n * ```\n *\n * ## Styling dependency lines\n *\n * You can easily customize the arrows drawn between events. To change all arrows, apply\n * the following basic SVG CSS:\n *\n * ```css\n * .b-sch-dependency {\n *    stroke-width: 2;\n *    stroke : red;\n * }\n *\n * .b-sch-dependency-arrow {\n *     fill: red;\n * }\n * ```\n *\n * To style an individual dependency line, you can provide a [cls](#Scheduler/model/DependencyModel#field-cls) in your\n * data:\n *\n * ```json\n * {\n *     \"id\"   : 9,\n *     \"from\" : 7,\n *     \"to\"   : 8,\n *     \"cls\"  : \"special-dependency\"\n * }\n * ```\n *\n * ```scss\n * // Make line dashed\n * .b-sch-dependency {\n *    stroke-dasharray: 5, 5;\n * }\n * ```\n *\n * By default predecessors and successors in columns and the task editor are displayed using task id and name. The id\n * part is configurable, any task field may be used instead (for example wbsCode or sequence number) by\n * {@link Gantt/view/GanttBase#config-dependencyIdField Gantt#dependencyIdField} property.\n *\n * ```javascript\n * const gantt = new Gantt({\n *    dependencyIdField: 'wbsCode',\n *\n *    project,\n *    columns : [\n *        { type : 'name', width : 250 }\n *    ],\n * });\n * ```\n *\n * Also see {@link Gantt/column/DependencyColumn#config-dependencyIdField DependencyColumn#dependencyIdField} to\n * configure columns only if required.\n *\n * This feature is **enabled** by default\n *\n * @extends SchedulerPro/feature/Dependencies\n * @demo Gantt/basic\n * @classtype dependencies\n * @feature\n *\n * @typings SchedulerPro.feature.Dependencies -> SchedulerPro.feature.SchedulerProDependencies\n */\nexport default class Dependencies extends SchedulerProDependencies {\n    //region Config\n    static $name = 'Dependencies';\n    static configurable = {\n        terminalSides                     : ['left', 'right'],\n        highlightDependenciesOnEventHover : true,\n        tooltipTemplate(dependency) {\n            if (!dependency) {\n                return null;\n            }\n            const\n                me                     = this,\n                { dependencyIdField }  = me.client,\n                { fromEvent, toEvent } = dependency;\n            return {\n                children : [{\n                    className : 'b-sch-dependency-tooltip',\n                    children  : [\n                        { tag : 'label', text : me.L('L{from}') },\n                        { text : `${fromEvent.name} ${fromEvent[dependencyIdField]}` },\n                        { className : `b-sch-box b-${dependency.fromSide || fromBoxSide[dependency.type]}` },\n                        { tag : 'label', text : me.L('L{to}') },\n                        { text : `${toEvent.name} ${toEvent[dependencyIdField]}` },\n                        { className : `b-sch-box b-${dependency.toSide || toBoxSide[dependency.type]}` },\n                        dependency.lag ? { tag : 'label', text : me.L('L{DependencyEdit.Lag}') } : null,\n                        dependency.lag ? { text : dependency.fullLag } : null\n                    ]\n                }]\n            };\n        },\n        pathFinderConfig : {\n            otherHorizontalMargin : 0,\n            otherVerticalMargin   : 0\n        }\n    };\n    //endregion\n    //region Init\n    construct(gantt, config = {}) {\n        // Scheduler might be using gantt's feature, when on same page\n        if (gantt.isGantt) {\n            this.gantt = gantt;\n        }\n        super.construct(gantt, config);\n    }\n    //endregion\n    //region Scheduler overrides\n    // Add critical path marker which has different color\n    createMarkers() {\n        super.createMarkers();\n        const endMarker = this.endMarker.cloneNode(true);\n        endMarker.setAttribute('id', 'arrowEndCritical');\n        endMarker.retainElement = true;\n        this.client.svgCanvas.appendChild(endMarker);\n    }\n    /**\n     * Returns the dependency record for a DOM element\n     * @function resolveDependencyRecord\n     * @param {HTMLElement} element The dependency line element\n     * @returns {Gantt.model.DependencyModel} The dependency record\n     */\n    get rowStore() {\n        return this.client.store;\n    }\n    // We don't care about the resourceStore in gantt\n    attachToResourceStore(...args) {\n        // But we have to care for Scheduler Pro using Gantt:s feature (shared bundle)\n        if (!this.gantt) {\n            super.attachToResourceStore(...args);\n        }\n    }\n    getDependencyKey(dependency, ...args) {\n        if (!this.gantt) {\n            super.getDependencyKey(dependency, ...args);\n        }\n        return dependency.id;\n    }\n    // Gantt draws between tasks, replace Schedulers assignment element lookup\n    getAssignmentElement(task) {\n        if (!this.gantt) {\n            return super.getAssignmentElement(task);\n        }\n        return this.client.getElementFromTaskRecord(task);\n    }\n    // Gantt draws between tasks, replace Schedulers assignment bounds lookup\n    getAssignmentBounds(task) {\n        if (!this.gantt) {\n            return super.getAssignmentBounds(task);\n        }\n        const\n            { client } = this,\n            element    = client.getElementFromTaskRecord(task);\n        if (element && !client.isExporting) {\n            return Rectangle.from(element, this.relativeTo);\n        }\n        return client.isEngineReady && client.getTaskBox(task, true, true);\n    }\n    //region Export\n    // Export calls this fn to determine if a dependency should be included or not\n    isDependencyVisible(dependency) {\n        if (!this.gantt) {\n            return super.isDependencyVisible(dependency);\n        }\n        return dependency.fromEvent?.isScheduled && dependency.toEvent?.isScheduled;\n    }\n    //endregion\n    // Override Schedulers dependency drawing\n    drawDependency(dependency, batch = false, forceBoxes = null) {\n        if (!this.gantt) {\n            return super.drawDependency(dependency, batch, forceBoxes);\n        }\n        const\n            me                     = this,\n            {\n                domConfigs,\n                client\n            } = me,\n            { store }              = client,\n            topIndex               = client.firstVisibleRow.dataIndex,\n            bottomIndex            = client.lastVisibleRow.dataIndex,\n            { startMS, endMS }     = client.visibleDateRange,\n            { fromEvent, toEvent } = dependency;\n        if (store.isAvailable(fromEvent) && store.isAvailable(toEvent)) {\n            const\n                fromIndex  = store.indexOf(fromEvent),\n                toIndex    = store.indexOf(toEvent),\n                fromDateMS = Math.min(fromEvent.startDateMS, toEvent.startDateMS),\n                toDateMS   = Math.max(fromEvent.endDateMS, toEvent.endDateMS);\n            // Draw only if dependency intersects view, unless it is part of an export\n            if (client.isExporting || fromIndex != null && toIndex != null && !(\n                // Both ends above view\n                (fromIndex < topIndex && toIndex < topIndex) ||\n                // Both ends below view\n                (fromIndex > bottomIndex && toIndex > bottomIndex) ||\n                // Both ends before view\n                (fromDateMS < startMS && toDateMS < startMS) ||\n                // Both ends after view\n                (fromDateMS > endMS && toDateMS > endMS)\n            )) {\n                const lineDomConfigs = me.getDomConfigs(dependency, fromEvent, toEvent, forceBoxes);\n                if (lineDomConfigs) {\n                    domConfigs.set(dependency.id, lineDomConfigs);\n                }\n                // No room to draw a line\n                else {\n                    domConfigs.delete(dependency.id);\n                }\n            }\n            // Give mixins a shot at running code after a dependency is drawn. Used by grid cache to cache the\n            // dependency (when needed)\n            me.afterDrawDependency(dependency, fromIndex, toIndex, fromDateMS, toDateMS);\n        }\n        if (!batch) {\n            me.domSync();\n        }\n    }\n    //endregion\n    //region Draw & render\n    getDependenciesToConsider(startMS, endMS, startIndex, endIndex) {\n        const\n            dependencies    = super.getDependenciesToConsider?.(startMS, endMS, startIndex, endIndex),\n            criticalFeature = this.client.features.criticalPaths;\n        if (dependencies && criticalFeature?.enabled) {\n            return Array.from(dependencies).sort(criticalPathSorter);\n        }\n        return dependencies;\n    }\n    adjustLineDef(dependency, lineDef) {\n        const me = this;\n        // Do not adjust for scheduler using Gantts feature\n        if (!me.gantt) {\n            return lineDef;\n        }\n        const\n            { rtl }              = me.gantt,\n            { startBox, endBox } = lineDef,\n            arrowMargin          = me.pathFinder.startArrowMargin,\n            startRowBox          = me.client.getRecordCoords(dependency.fromEvent, true),\n            endRowBox            = me.client.getRecordCoords(dependency.toEvent, true),\n            startBoxEnd          = round(startBox.getEnd(rtl)),\n            endBoxStart          = round(endBox.getStart(rtl)),\n            endBoxEnd            = round(endBox.getEnd(rtl)),\n            // Detecting whether the source box ends before (or at the same point) as the end box start\n            // is different between LRT and RTL\n            sourceEndsBeforeStart = rtl\n                ? (endBoxStart <= startBoxEnd && endBoxEnd <= (startBoxEnd + arrowMargin))\n                : (endBoxStart >= startBoxEnd && endBoxEnd >= (startBoxEnd + arrowMargin));\n        if (\n            dependency.type === DependencyType.EndToStart &&\n            // Target box is below source box\n            startBox.bottom < endBox.y &&\n            // If source box ends before target box start - draw line to target box top edge.\n            // Round coordinates to make behavior more consistent on zoomed page\n            sourceEndsBeforeStart\n        ) {\n            // Arrow to left part of top\n            lineDef.endSide = 'top';\n            // The default entry point for top is the center, but for Gantt Tasks, we join to startArrowMargin inwards\n            // to top-start, so we give the end box a width of arrowMargin.\n            // Milestones always have the top entry point left in the center.\n            if (!dependency.toEvent.milestone) {\n                if (rtl) {\n                    endBox.x = endBox.right - arrowMargin * 2;\n                }\n                else {\n                    endBox.width = arrowMargin * 2;\n                }\n            }\n        }\n        return {\n            ...lineDef,\n            // Reversing start/end endpoints generate more Gantt-friendly arrows\n            startBox      : endBox,\n            endBox        : startBox,\n            endSide       : lineDef.startSide,\n            startSide     : lineDef.endSide,\n            boxesReversed : true,\n            // Add vertical box for each task. They are supposed to push line to row boundary\n            otherBoxes    : [\n                {\n                    start  : startBox.x,\n                    end    : startBox.right,\n                    top    : startRowBox.y,\n                    bottom : startRowBox.bottom\n                },\n                {\n                    start  : endBox.x,\n                    end    : endBox.right,\n                    top    : endRowBox.y,\n                    bottom : endRowBox.bottom\n                }\n            ]\n        };\n    }\n    /**\n     * Draws all dependencies for the specified task.\n     * @deprecated 5.1 The Dependencies feature was refactored and this fn is no longer needed\n     */\n    drawForTask() {\n        VersionHelper.deprecate('Gantt', '6.0.0', 'Dependencies.drawForTask() is no longer needed');\n        this.refresh();\n    }\n    //endregion\n    //region Tooltip\n    /**\n     * Generates html for the tooltip shown when hovering a dependency\n     * @param {Object} tooltipConfig\n     * @returns {String} Html to display in the tooltip\n     * @private\n     */\n    getHoverTipHtml({ activeTarget }) {\n        const dependency = this.resolveDependencyRecord(activeTarget);\n        return this.tooltipTemplate(dependency);\n    }\n    //endregion\n    //region Dependency creation\n    /**\n     * Create a new dependency from source terminal to target terminal\n     * @internal\n     */\n    async createDependency(data) {\n        const\n            me         = this,\n            {\n                source,\n                target,\n                fromSide,\n                toSide\n            }          = data,\n            type       = (fromSide === 'start' ? 0 : 2) + (toSide === 'end' ? 1 : 0),\n            dependency = me.dependencyStore.add({\n                fromEvent : source,\n                toEvent   : target,\n                type\n            })[0];\n        await me.dependencyStore.project.commitAsync();\n        return dependency;\n    }\n    // endregion\n}\nDependencies._$name = 'Dependencies'; GridFeatureManager.registerFeature(Dependencies, true, 'Gantt');\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport TooltipBase from '../../Scheduler/feature/base/TooltipBase.js';\nimport DomClassList from '../../Core/helper/util/DomClassList.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\n/**\n * @module Gantt/feature/Indicators\n */\n/**\n * The Indicators feature displays indicators (icons) for different dates related to a task in its row. Hovering an\n * indicator will show a tooltip with its name and date(s). The owning task `id` is embedded in the indicator element\n * dataset as `taskRecordId` which can be useful if you want to have custom actions when clicking (showing a menu for example).\n *\n * By default, it includes and displays the following indicators (config name):\n * * Early start/end dates (earlyDates)\n * * Late start/end dates (lateDates)\n * * Constraint date (constraintDate)\n * * Deadline date (deadlineDate)\n *\n * This demo shows the default indicators:\n *\n * {@inlineexample Gantt/feature/Indicators.js}\n *\n * This config will display them all:\n *\n * ```javascript\n * new Gantt({\n *   features : {\n *     indicators : true\n *   }\n * });\n * ```\n *\n * To selectively disable indicators:\n *\n * ```javascript\n * features : {\n *   indicators : {\n *     items : {\n *       earlyDates     : false,\n *       constraintDate : false\n *     }\n *   }\n * }\n * ```\n *\n * They can also be toggled at runtime:\n *\n * ```javascript\n * gantt.features.indicators.items.deadlineDate = true/false;\n * ```\n *\n * The feature also supports adding custom indicators, by adding properties to the `items` config object:\n *\n * ```javascript\n * items : {\n *   lateDates  : false,\n *\n *   // Custom indicator only shown for tasks more than half done\n *   myCustomIndicator : taskRecord => taskRecord.percentDone > 50 ? {\n *      startDate : DateHelper.add(taskRecord.endDate, 2, 'days'),\n *      name : 'My custom indicator',\n *      iconCls : 'b-fa b-fa-alien'\n *   } : null\n * }\n * ```\n *\n * This demo shows a custom indicator:\n *\n * {@inlineexample Gantt/feature/IndicatorsCustom.js}\n *\n * These custom indicators are defined as functions, that accept a task record and return a TimeSpan (or a raw data\n * object). The function will be called for each visible task during rendering, to not show the indicator for certain\n * tasks return `null` from it.\n *\n * When using this feature we recommend that you configure gantt with a larger `rowHeight` + `barMargin` (>15 px), since\n * the indicators are indented to fit below the task bars.\n *\n * Note: When combined with the `fillTicks` mode, indicators are snapped to the time axis ticks.\n *\n * This feature is **disabled** by default.\n *\n * @extends Scheduler/feature/base/TooltipBase\n * @classtype indicators\n * @feature\n * @demo Gantt/indicators\n */\nexport default class Indicators extends TooltipBase {\n    //region Config\n    static get $name() {\n        return 'Indicators';\n    }\n    static get defaultConfig() {\n        return {\n            cls         : 'b-gantt-task-tooltip', // reused on purpose\n            forSelector : '.b-indicator',\n            recordType  : 'indicator',\n            hoverDelay  : 500,\n            layoutStyle : {\n                flexDirection : 'column'\n            },\n            defaultIndicators : {\n                earlyDates : taskRecord => taskRecord.earlyStartDate && !taskRecord.isMilestone ? {\n                    startDate : taskRecord.earlyStartDate,\n                    endDate   : taskRecord.earlyEndDate,\n                    cls       : 'b-bottom b-early-dates',\n                    name      : this.L('L{earlyDates}')\n                } : null,\n                lateDates : taskRecord => taskRecord.lateStartDate && !taskRecord.isMilestone ? {\n                    startDate : taskRecord.lateStartDate,\n                    endDate   : taskRecord.lateEndDate,\n                    cls       : 'b-bottom b-late-dates',\n                    name      : this.L('L{lateDates}')\n                } : null,\n                constraintDate : taskRecord => taskRecord.constraintDate ? {\n                    startDate : taskRecord.constraintDate,\n                    cls       : `b-bottom b-constraint-date b-constraint-type-${taskRecord.constraintType}`,\n                    name      : this.L(`L{ConstraintTypePicker.${taskRecord.constraintType}}`)\n                } : null,\n                deadlineDate : taskRecord => taskRecord.deadlineDate ? {\n                    startDate : taskRecord.deadlineDate,\n                    cls       : `b-bottom b-deadline-date`,\n                    name      : this.L('L{deadlineDate}')\n                } : null\n            },\n            /**\n             * Used to enable/disable built-in indicators and to define custom indicators.\n             *\n             * Custom indicators are defined as functions, that accept a task record and return a\n             * {@link Scheduler.model.TimeSpan}, or a config object thereof.\n             *\n             * ```\n             * new Gantt({\n             *   features : {\n             *     indicators : {\n             *       items : {\n             *         // Disable deadlineDate indicators\n             *         deadlineDate : false,\n             *\n             *         // Add a custom indicator (called prepare)\n             *         prepare : taskRecord => ({\n             *            startDate : taskRecord.startDate,\n             *            iconCls   : 'b-fa b-fa-magnify',\n             *            name      : 'Start task preparations'\n             *         })\n             *       }\n             *     }\n             *   }\n             * });\n             * ```\n             *\n             * For more information, please see the class description at top.\n             *\n             * @config {Object<String,Function|Boolean>}\n             * @category Common\n             */\n            items : null,\n            /**\n             * A function which receives data about the indicator and returns a string,\n             * or a Promise yielding a string (for async tooltips), to be displayed in the tooltip.\n             * This method will be called with an object containing the fields below\n             * @config {Function}\n             * @param {Object} data Indicator data\n             * @param {String} data.name Indicator name\n             * @param {Date} data.startDate Indicator startDate\n             * @param {Date} data.endDate Indicator endDate\n             * @param {Gantt.model.TaskModel} data.taskRecord The task to which the indicator belongs\n             * @param {String} data.startClockHtml Predefined HTML to show the start time\n             * @param {String} data.endClockHtml Predefined HTML to show the end time\n             * @returns {DomConfig|String|null}\n             */\n            tooltipTemplate : data => {\n                const\n                    { indicator } = data,\n                    encodedName   = StringHelper.encodeHtml(indicator.name);\n                if (data.endDate) {\n                    return `\n                        ${indicator.name ? `<div class=\"b-gantt-task-title\">${encodedName}</div>` : ''}\n                        <table>\n                            <tr><td>${this.L('L{Start}')}:</td><td>${data.startClockHtml}</td></tr>\n                            <tr><td>${this.L('L{End}')}:</td><td>${data.endClockHtml}</td></tr>\n                        </table>\n                    `;\n                }\n                return `\n                    ${indicator.name ? `<div class=\"b-gantt-task-title\">${encodedName}</div>` : ''}\n                    ${data.startText}\n                `;\n            }\n        };\n    }\n    static get pluginConfig() {\n        return {\n            chain : ['onTaskDataGenerated', 'onInternalPaint']\n        };\n    }\n    //endregion\n    construct(gantt, config = {}) {\n        this.tipId = `${gantt.id}-indicators-tip`;\n        // Store items to set manually after config, we do not want to pass them along to the base class since it will\n        // apply them to the tooltip\n        config = Object.assign({}, config);\n        const { items } = config;\n        super.construct(gantt, config);\n        this.items = items;\n    }\n    template(...args) {\n        return this.tooltipTemplate(...args);\n    }\n    // Private setter, not supposed to set it during runtime\n    set items(indicators) {\n        const me = this;\n        // All indicators, custom + default\n        me._indicators = ObjectHelper.assign({}, me.defaultIndicators, indicators);\n        // Accessors to toggle the indicators from the outside\n        me._indicatorAccessors = {};\n        // Keep track of enabled/disabled indicators\n        me._indicatorStatus = {};\n        for (const name in me._indicators) {\n            // Store if indicator is enabled/disabled (enabled if true or fn)\n            me._indicatorStatus[name] = Boolean(me._indicators[name]);\n            // If it was configured as true, it means we should use a default implementation\n            if (typeof me._indicators[name] !== 'function') {\n                me._indicators[name] = me.defaultIndicators[name];\n            }\n            // Create accessors so that we can enable/disable on the fly using:\n            // gantt.features.indicators.items.deadlineDate = false;\n            Object.defineProperty(me._indicatorAccessors, name, {\n                enumerable : true,\n                get() {\n                    return me._indicatorStatus[name] ? me._indicators[name] : false;\n                },\n                set(value) {\n                    me._indicatorStatus[name] = value;\n                    me.client.refresh();\n                }\n            });\n        }\n    }\n    /**\n     * Accessors for the indicators that can be used to toggle them at runtime.\n     *\n     * ```\n     * gantt.features.indicators.items.deadlineDate = false;\n     * ```\n     *\n     * @property {Object<String,Boolean>}\n     * @readonly\n     * @category Common\n     */\n    get items() {\n        // These accessors are generated in `set items`, allowing runtime enabling/disabling of indicators\n        return this._indicatorAccessors;\n    }\n    //region Render\n    // Map fn that generates a DOMConfig for an indicator\n    createIndicatorDOMConfig(indicator, index) {\n        const\n            { gantt, renderData }                = this,\n            { taskRecord }                       = renderData,\n            { cls, iconCls }                     = indicator,\n            { rtl, timeAxis, timeAxisViewModel } = gantt;\n        let { startDate, endDate } = indicator;\n        if (endDate) {\n            endDate = Math.min(endDate, timeAxisViewModel.endDate);\n        }\n        if (gantt.fillTicks) {\n            const startTick = timeAxis.getSnappedTickFromDate(startDate);\n            startDate = startTick.startDate;\n            if (endDate) {\n                const endTick = timeAxis.getSnappedTickFromDate(endDate);\n                endDate = endTick.endDate;\n            }\n        }\n        const\n            x                = timeAxisViewModel.getPositionFromDate(startDate),\n            width            = endDate ? Math.abs(timeAxisViewModel.getPositionFromDate(endDate - x)) : null,\n            classList        = cls?.isDomClassList ? cls : new DomClassList(cls),\n            { start, total } = gantt.resourceMarginObject,\n            top              = renderData.top || gantt.store.indexOf(taskRecord) * gantt.rowManager.rowOffsetHeight + start,\n            height           = renderData.height || gantt.rowHeight - total;\n        indicator.taskRecord = taskRecord;\n        return {\n            className : Object.assign(classList, {\n                'b-indicator' : 1,\n                'b-has-icon'  : indicator.iconCls\n            }),\n            style : {\n                [rtl ? 'right' : 'left'] : x,\n                top,\n                height,\n                width,\n                style                    : indicator.style\n            },\n            dataset : {\n                // For sync\n                taskId       : `${renderData.taskId}-indicator-${index}`,\n                // allow users to look up which task this indicator belongs to\n                taskRecordId : renderData.taskId\n            },\n            children : [\n                iconCls ? {\n                    tag       : 'i',\n                    className : iconCls\n                } : null\n            ],\n            elementData : indicator\n        };\n    }\n    // Add DOMConfigs for enabled indicators as `extraConfigs` on the task. Will in the end be added to the task row\n    onTaskDataGenerated(renderData) {\n        if (this.disabled) {\n            return;\n        }\n        const\n            { items } = this,\n            usedIndicators   = [];\n        // Iterate all indicators\n        for (const name in items) {\n            const indicatorFn = items[name];\n            // If it is enabled and a function, call it and store the resulting timespan\n            if (this._indicatorStatus[name] && typeof indicatorFn === 'function') {\n                const timeSpan = indicatorFn(renderData.taskRecord);\n                timeSpan && this.client.timeAxis.timeSpanInAxis(timeSpan.startDate, timeSpan.endDate) && usedIndicators.push(timeSpan);\n            }\n        }\n        // Convert indicator timespans to DOMConfigs for rendering\n        renderData.extraConfigs.push(...usedIndicators.map(this.createIndicatorDOMConfig, {\n            gantt : this.client,\n            renderData\n        }));\n    }\n    //endregion\n    //region Tooltip\n    resolveTimeSpanRecord(forElement) {\n        return forElement.lastDomConfig.elementData;\n    }\n    //endregion\n}\nIndicators._$name = 'Indicators'; GridFeatureManager.registerFeature(Indicators, false);\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport SchedulerLabels from '../../Scheduler/feature/Labels.js';\n/**\n * @module Gantt/feature/Labels\n */\n/**\n * Specialized version of the Labels feature for Scheduler, that handles labels for tasks in Gantt. See\n * {@link Scheduler/feature/Labels Schedulers Labels feature} for more information.\n *\n * This feature is **disabled** by default.\n *\n * For info on enabling it, see {@link Grid.view.mixin.GridFeatures}.\n *\n * @extends Scheduler/feature/Labels\n * @demo Gantt/labels\n * @classtype labels\n * @feature\n *\n * @typings Scheduler.feature.Labels -> Scheduler.feature.SchedulerLabels\n */\nexport default class Labels extends SchedulerLabels {\n    static get $name() {\n        return 'Labels';\n    }\n    static get pluginConfig() {\n        return {\n            chain : ['onTaskDataGenerated']\n        };\n    }\n    onTaskDataGenerated(data) {\n        this.onEventDataGenerated(data);\n    }\n}\nLabels._$name = 'Labels'; GridFeatureManager.registerFeature(Labels, false, 'Gantt');\n", "import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\n/**\n * @module Gantt/feature/ParentArea\n */\n/**\n * Highlights the area encapsulating all child tasks of a parent task in a semi-transparent layer. You can style\n * these layer elements using the `b-parent-area` CSS class.\n *\n * {@inlineexample Gantt/feature/ParentArea.js}\n *\n * This feature is **disabled** by default.\n * For info on enabling it, see {@link Grid.view.mixin.GridFeatures}.\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         parentArea : true\n *     }\n * });\n * ```\n *\n * @extends Core/mixin/InstancePlugin\n * @demo Gantt/parent-area\n * @classtype parentArea\n * @feature\n */\nexport default class ParentArea extends InstancePlugin {\n    static $name = 'ParentArea';\n    static pluginConfig = {\n        chain : ['onBeforeTaskSync']\n    };\n    // Map to keep track of highlighted parents, holds DomConfigs keyed by parentRecord\n    highlighted = new Map();\n    // Recursively highlight self and all unhighlighted ancestors\n    highlightParent(parentRecord) {\n        const { highlighted } = this;\n        if (parentRecord && !parentRecord.isProjectModel && !highlighted.has(parentRecord)) {\n            const\n                { client }          = this,\n                { rowOffsetHeight } = client.rowManager,\n                descendants         = parentRecord.visibleDescendantCount,\n                box                 = client.getTaskBox(parentRecord);\n            if (!box) {\n                return;\n            }\n            const domConfig = {\n                className : {\n                    'b-parent-area' : 1\n                },\n                style : {\n                    top    : box.top,\n                    height : (descendants + 1) * rowOffsetHeight - box.top % rowOffsetHeight, // +1 for self\n                    left   : box.left,\n                    width  : box.width\n                },\n                dataset : {\n                    taskId : `parent-area-${parentRecord.id}`\n                }\n            };\n            highlighted.set(parentRecord, domConfig);\n            this.highlightParent(parentRecord.parent);\n        }\n    }\n    // Called after collecting all task configs, before DomSyncing them\n    onBeforeTaskSync(configs) {\n        if (!this.disabled) {\n            const { highlighted, client } = this;\n            // Start from scratch to not have to keep track of modifications, collecting task area configs is cheap\n            highlighted.clear();\n            // Highlight all parents whose area intersects the view, which we know if a child is among rendered rows\n            for (const row of client.rowManager) {\n                const taskRecord = client.store.getById(row.id);\n                taskRecord && this.highlightParent(taskRecord.parent);\n            }\n            configs.push(...highlighted.values());\n        }\n    }\n    doDisable(disable) {\n        super.doDisable(disable);\n        this.client.refresh();\n    }\n}\nParentArea._$name = 'ParentArea'; GridFeatureManager.registerFeature(ParentArea, false, 'Gantt');\n", "import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport ArrayHelper from '../../Core/helper/ArrayHelper.js';\n/**\n * @module Gantt/feature/ProgressLine\n */\n/**\n *\n * This feature draws project progress line with SVG lines. Requires {@link SchedulerPro/feature/PercentBar} to be enabled (which\n * by default, it is)\n *\n * This feature is **disabled** by default.\n * For info on enabling it, see {@link Grid/view/mixin/GridFeatures}.\n *\n * ```javascript\n * let gantt = new Gantt({\n *     features : {\n *         progressLine : {\n *            statusDate : new Date(2017, 2, 8)\n *         }\n *     }\n * });\n * ```\n *\n * Status date can be changed dynamically:\n *\n * ```javascript\n * gantt.features.progressLine.statusDate = new Date();\n * ```\n *\n * If status date is not in the current Gantt time span, progress line will use view start or end coordinates. This\n * behavior can be customized with {@link #config-drawLineOnlyWhenStatusDateVisible} config. Or you can override {@link #function-shouldDrawProgressLine}\n * method and provide more complex condition.\n *\n * Progress line is a set of SVG <line> elements drawn between all the tasks.\n *\n * {@inlineexample Gantt/feature/ProgressLine.js}\n *\n * @demo Gantt/progressline\n * @extends Core/mixin/InstancePlugin\n * @mixes Core/mixin/Delayable\n * @classtype progressLine\n * @feature\n */\nexport default class ProgressLine extends Delayable(InstancePlugin) {\n    /**\n     * Fired when progress line is rendered\n     * @event progressLineDrawn\n     */\n    //region Config\n    static get $name() {\n        return 'ProgressLine';\n    }\n    static get defaultConfig() {\n        return {\n            /**\n             * Progress line status date. If not provided, current date is used.\n             * @config {Date}\n             */\n            statusDate : new Date(),\n            /**\n             * Set to true to hide progress line, when status date is not in the current time axis.\n             * @config {Boolean}\n             */\n            drawLineOnlyWhenStatusDateVisible : false,\n            lineCls : 'b-gantt-progress-line',\n            containerCls : 'b-progress-line-canvas'\n        };\n    }\n    static get pluginConfig() {\n        return {\n            chain : ['onInternalPaint']\n        };\n    }\n    //endregion\n    //region Init & destroy\n    construct(client, config = {}) {\n        const me = this;\n        // Many things may schedule a draw. Ensure it only happens once, on the next frame.\n        // And Ensure it really is on the *next* frame after invocation by passing\n        // the cancelOutstanding flag.\n        me.scheduleDraw = me.createOnFrame('draw', [], me, true);\n        super.construct(client, config);\n        this.lineSegments = [];\n    }\n    doDisable(disable) {\n        const me = this;\n        // attach/detach listeners\n        me.attachToClient(disable ? null : me.client);\n        if (me.client.rendered) {\n            me.draw();\n        }\n        super.doDisable(disable);\n    }\n    //endregion\n    get statusDate() {\n        return this._statusDate;\n    }\n    /**\n     * Progress line status date. If not provided, current date is used.\n     * @property {Date}\n     */\n    set statusDate(date) {\n        if (date instanceof Date) {\n            this._statusDate = date;\n            if (!this.disabled) {\n                this.scheduleDraw();\n            }\n        }\n    }\n    // cannot use `get svgCanvas` because it will trigger svgCanvas getter on instance too early\n    getSVGCanvas() {\n        const\n            me = this,\n            { client } = me;\n        if (!me._svgCanvas) {\n            const svg = me._svgCanvas = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n            // To not be touched when syncing tasks to DOM\n            svg.retainElement = true;\n            svg.classList.add('b-sch-canvas', me.containerCls);\n            svg.style.width = (client.isHorizontal ? client.timeAxisViewModel.totalSize : client.timeAxisColumn.width) + 'px';\n            client.timeAxisSubGridElement.appendChild(svg);\n        }\n        return me._svgCanvas;\n    }\n    // region Event handlers\n    attachToProject(project) {\n        this.detachListeners('project');\n        project?.ion({\n            name    : 'project',\n            refresh : 'onProjectRefresh',\n            thisObj : this\n        });\n    }\n    attachToRowManager(rowManager) {\n        this.detachListeners('rowManager');\n        rowManager?.ion({\n            name              : 'rowManager',\n            translaterow      : 'onTranslateRow',\n            refresh           : 'scheduleDraw',\n            rerender          : 'scheduleDraw',\n            changetotalheight : 'scheduleDraw',\n            thisObj           : this\n        });\n    }\n    attachToClient(client) {\n        const me = this;\n        me.detachListeners('client');\n        // dependencies are drawn on scroll, both horizontal and vertical\n        client?.ion({\n            name                   : 'client',\n            horizontalscroll       : 'scheduleDraw',\n            togglenode             : 'scheduleDraw',\n            taskdrag               : 'onTaskDrag',\n            taskdragabortfinalized : 'scheduleDraw',\n            aftertaskdrop          : 'scheduleDraw',\n            timelineviewportresize : 'scheduleDraw',\n            thisObj                : me\n        });\n        me.attachToProject(client?.project);\n        me.attachToRowManager(client?.rowManager);\n    }\n    onInternalPaint() {\n        this.attachToProject(this.disabled ? null : this.client.project);\n    }\n    /**\n     * Redraws the line when the project propagation is done\n     * @private\n     */\n    onProjectRefresh() {\n        this.scheduleDraw();\n    }\n    onTranslateRow({ row }) {\n        // a changetotalheight event is fired after translations, if a rowHeight change is detected here it will redraw\n        // the line\n        if (row.lastTop >= 0 && row.top !== row.lastTop) {\n            this.scheduleDraw();\n        }\n    }\n    // Refreshing only lines for dragged task to avoid slowing down drag operation\n    onTaskDrag({ taskRecords, dragData }) {\n        taskRecords.forEach(record => {\n            this.updateLineForTask(record, {\n                [record.id] : DateHelper.add(record.startDate, dragData.timeDiff)\n            });\n        });\n    }\n    // endregion\n    /**\n     * Returns true if progress line should be drawn\n     * @returns {Boolean}\n     */\n    shouldDrawProgressLine() {\n        const me = this;\n        return !me.client.timeAxisSubGrid.collapsed && !me.disabled && (!me.drawLineOnlyWhenStatusDateVisible || me.client.timeAxis.dateInAxis(me.statusDate));\n    }\n    /**\n     * Returns status date horizontal position relative to the foreground canvas\n     * @returns {Number}\n     * @private\n     */\n    getStatusDateX() {\n        let { statusDate } = this;\n        const { client } = this;\n        if (!client.timeAxis.dateInAxis(statusDate)) {\n            statusDate = statusDate < client.timeAxis.startDate ? client.timeAxis.startDate : client.timeAxis.endDate;\n        }\n        return client.getCoordinateFromDate(statusDate);\n    }\n    /**\n     * Returns object with status date local coordinate and view x,y coordinates. Used to convert page coordinates to\n     * view local.\n     * @returns {{statusDateX: Number, viewXY: number[]}}\n     * @private\n     */\n    getRenderData() {\n        const\n            statusDateX = this.getStatusDateX(),\n            // We refer to the DOM to get status date horizontal coordinate (for segmented tasks which are not supported yet)\n            // we need to adjust progress bar element box to view/scroll.\n            viewBox     = this.client.timeAxisSubGridElement.getBoundingClientRect(),\n            viewXY      = [this.client.scrollLeft - viewBox.left, -viewBox.top];\n        return { statusDateX, viewXY };\n    }\n    // region Drawing\n    /**\n     * Renders the progress line.\n     */\n    draw() {\n        const\n            me         = this,\n            { client } = me;\n        me.lineSegments.forEach(el => el.remove());\n        me.lineSegments = [];\n        if (!me.shouldDrawProgressLine()) {\n            return;\n        }\n        if (client.isAnimating) {\n            client.ion({\n                transitionend() {\n                    me.scheduleDraw();\n                },\n                once : true\n            });\n            return;\n        }\n        const\n            data  = me.getRenderData(),\n            lines = [];\n        client.rowManager.forEach(row => lines.push(...me.getLineSegmentRenderData(row, data)));\n        // Batch rendering to avoid constant layout reflows\n        // With batch drawing line takes ~8ms comparing to ~30ms prior\n        lines.forEach(line => me.drawLineSegment(line));\n        client.trigger('progressLineDrawn');\n    }\n    segmentBelongsToTask(el, taskRecord) {\n        // Use getAttribute to not upset Salesforce LockerService\n        return el.getAttribute('data-task-id') == taskRecord.id;\n    }\n    /**\n     * Updates progress line segment for one task\n     * @param {Gantt.model.TaskModel} taskRecord\n     * @param {Object} [renderData] Optional render data, which is an object where keys are task ids and values are\n     * new task start date\n     * @private\n     */\n    updateLineForTask(taskRecord, renderData) {\n        const me = this;\n        if (me.disabled) {\n            return;\n        }\n        const row = me.client.getRowFor(taskRecord);\n        if (row) {\n            const toRemove = [];\n            me.lineSegments.forEach(el => {\n                if (me.segmentBelongsToTask(el, taskRecord)) {\n                    toRemove.push(el);\n                    el.remove();\n                }\n            });\n            ArrayHelper.remove(me.lineSegments, ...toRemove);\n            me.getLineSegmentRenderData(row, me.getRenderData(), renderData)\n                .forEach(line => me.drawLineSegment(line));\n        }\n    }\n    /**\n     * Draws line for a given row\n     * @param {Grid.row.Row} row Row instance\n     * @param {Object} data Output from {@link #function-getRenderData} method\n     * @param {Object} [renderData] Optional render data, which is an object where keys are task ids and values are\n     * new task start date\n     * @internal\n     */\n    getLineSegmentRenderData(row, data, renderData = {}) {\n        const\n            me                      = this,\n            { statusDateX, viewXY } = data,\n            taskRecord              = me.client.getRecordFromElement(row.elements.normal),\n            taskId                  = taskRecord.id,\n            lineDefinitions         = [];\n        let point;\n        if (me.isStatusLineTask(taskRecord, renderData[taskRecord.id])) {\n            point = me.calculateCoordinateForTask(taskRecord, viewXY);\n            // If multiple rows are affected by event update, it could happen, that point\n            // could not be resolved\n            point && lineDefinitions.push(\n                {\n                    dataset : { taskId },\n                    x1      : statusDateX,\n                    y1      : row.top,\n                    x2      : point.x,\n                    y2      : point.y\n                },\n                {\n                    dataset : { taskId },\n                    x1      : point.x,\n                    y1      : point.y,\n                    x2      : statusDateX,\n                    y2      : row.bottom\n                }\n            );\n        }\n        // otherwise we render vertical status line\n        if (!point) {\n            lineDefinitions.push(\n                {\n                    dataset : { taskId },\n                    x1      : statusDateX,\n                    y1      : row.top,\n                    x2      : statusDateX,\n                    y2      : row.bottom\n                }\n            );\n        }\n        return lineDefinitions;\n    }\n    /**\n     * Draws line on svg canvas\n     * @param {Object} data Line render data. Output from {@link #function-getLineSegmentRenderData}\n     * @returns {Element}\n     * @internal\n     */\n    drawLineSegment(data) {\n        const me = this;\n        me.lineSegments.push(DomHelper.createElement(Object.assign({\n            tag    : 'line',\n            ns     : 'http://www.w3.org/2000/svg',\n            // cannot use className when namespace is provided\n            class  : me.lineCls,\n            parent : me.getSVGCanvas()\n        }, data)));\n    }\n    /**\n     * Returns true if task should be connected to the progress line.\n     * @param {Gantt.model.TaskModel} taskRecord\n     * @param {Date} [startDate] Provide to check if task record should be connected to the progress line if it'd\n     * start then\n     * @returns {Boolean}\n     * @internal\n     */\n    isStatusLineTask(taskRecord, startDate) {\n        const statusDate = this.statusDate;\n        startDate = startDate || taskRecord.startDate;\n        // task should be visible and not inactive\n        return taskRecord?.project && !taskRecord.inactive && this.client.timeAxis.isTimeSpanInAxis(taskRecord) &&\n            // - is in progress\n            (taskRecord.isInProgress ||\n                // ...or is not started and its start date is before statusDate\n                (!taskRecord.isStarted && startDate < statusDate) ||\n                // ...or is finished and its start date is after statusDate\n                (taskRecord.isCompleted && startDate > statusDate));\n    }\n    /**\n     * This method will calculate point inside task element to be connected with line.\n     * @param {Gantt.model.TaskModel} record\n     * @param {Number[]} translateBy View xy coordinates to calculate relative point position\n     * @returns {Object} Object containing coordinates for point in progress line, or undefined if no progress bar el is found\n     * @private\n     */\n    calculateCoordinateForTask(record, translateBy) {\n        const\n            { client }     = this,\n            node           = client.getElementFromTaskRecord(record),\n            isZeroDuration = record.milestone,\n            progressBarEl  = isZeroDuration ? node : node?.querySelector('.b-task-percent-bar');\n        if (progressBarEl) {\n            const\n                box       = progressBarEl.getBoundingClientRect(),\n                totalSize = client.timeAxisViewModel.totalSize;\n            return {\n                x : Math.min((isZeroDuration ? box.left : box.right) + translateBy[0], totalSize),\n                y : box.top + box.height / 2 + translateBy[1]\n            };\n        }\n    }\n    // endregion\n}\nProgressLine._$name = 'ProgressLine'; GridFeatureManager.registerFeature(ProgressLine);\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport AbstractTimeRanges from '../../Scheduler/feature/AbstractTimeRanges.js';\nimport AttachToProjectMixin from '../../Scheduler/data/mixin/AttachToProjectMixin.js';\n/**\n * @module Gantt/feature/ProjectLines\n */\n/**\n * This feature draws two vertical lines in the schedule area, indicating project start/end dates.\n *\n * {@inlineexample Gantt/guides/gettingstarted/basic.js}\n *\n * This feature is **enabled** by default\n *\n * @extends Scheduler/feature/TimeRanges\n * @demo Gantt/advanced\n * @classtype projectLines\n * @feature\n */\nexport default class ProjectLines extends AbstractTimeRanges.mixin(AttachToProjectMixin) {\n    //region Config\n    static get $name() {\n        return 'ProjectLines';\n    }\n    static get defaultConfig() {\n        return {\n            showHeaderElements : true,\n            cls                : 'b-gantt-project-line'\n        };\n    }\n    //endregion\n    //region Project\n    attachToProject(project) {\n        super.attachToProject(project);\n        project.ion({\n            name    : 'project',\n            refresh : this.onProjectRefresh,\n            thisObj : this\n        });\n    }\n    //endregion\n    //region Init\n    // We must override the TimeRanges superclass implementation which ingests the client's project's\n    // timeRangeStore. We implement our own store\n    startConfigure() {}\n    updateLocalization() {\n        this.renderRanges();\n    }\n    //endregion\n    onProjectRefresh() {\n        this.renderRanges();\n    }\n    shouldRenderRange(range) {\n        const { client } = this;\n        return client.timeAxis.dateInAxis(range.startDate);\n    }\n    get timeRanges() {\n        const { startDate, endDate } = this.client.project;\n        return startDate && endDate ? [\n            {\n                name : this.L('L{Project Start}'),\n                startDate\n            },\n            {\n                name      : this.L('L{Project End}'),\n                startDate : endDate\n            }\n        ] : [];\n    }\n}\nProjectLines._$name = 'ProjectLines'; GridFeatureManager.registerFeature(ProjectLines, true, 'Gantt');\n", "import TooltipBase from '../../Scheduler/feature/base/TooltipBase.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\n/**\n * @module Gantt/feature/Rollups\n */\nconst\n    rollupCls      = 'b-task-rollup',\n    rollupSelector = `.${rollupCls}`;\n/**\n * If the task's {@link Gantt/model/TaskModel#field-rollup} data field is set to true, it displays a small bar or diamond below its summary task in the timeline.\n * Each of the rollup elements show a tooltip when hovering it with details of the task.\n * The tooltip content is customizable, see {@link #config-template} config for details.\n *\n * To edit the rollup data field, use {@link Gantt/column/RollupColumn} or a checkbox on Advanced tab of {@link Gantt/widget/TaskEditor}.\n *\n * This feature is **disabled** by default.\n * For info on enabling it, see {@link Grid/view/mixin/GridFeatures}.\n *\n * {@inlineexample Gantt/feature/Rollups.js}\n *\n * @demo Gantt/rollups\n *\n * @extends Scheduler/feature/base/TooltipBase\n * @classtype rollups\n * @feature\n */\nexport default class Rollups extends TooltipBase {\n    //region Config\n    static get $name() {\n        return 'Rollups';\n    }\n    // Default configuration.\n    static get defaultConfig() {\n        return {\n            cls         : 'b-gantt-task-tooltip',\n            align       : 't-b',\n            forSelector : rollupSelector\n        };\n    }\n    static get pluginConfig() {\n        return {\n            chain : [\n                // onTaskDataGenerated for decorating task with rollups\n                'onTaskDataGenerated',\n                // render for creating tooltip (in TooltipBase)\n                'onInternalPaint'\n            ]\n        };\n    }\n    //endregion\n    //region Init & destroy\n    construct(gantt, config) {\n        this.tipId = `${gantt.id}-rollups-tip`;\n        super.construct(gantt, config);\n    }\n    attachToTaskStore(store) {\n        this.detachListeners('taskStore');\n        store?.ion({\n            name    : 'taskStore',\n            update  : 'onStoreUpdateRecord',\n            thisObj : this\n        });\n    }\n    doDestroy() {\n        this.attachToTaskStore(null);\n        super.doDestroy();\n    }\n    doDisable(disable) {\n        const me = this;\n        if (me.tooltip) {\n            me.tooltip.disabled = disable;\n        }\n        // attach/detach listeners\n        me.attachToTaskStore(disable ? null : me.client.taskStore);\n        // Hide or show the rollup elements\n        me.client.refresh();\n        super.doDisable(disable);\n    }\n    //endregion\n    getTipHtml({ activeTarget, event }) {\n        const\n            { client }     = this,\n            task           = client.resolveTaskRecord(activeTarget),\n            rawElements    = document.elementsFromPoint(event.pageX + globalThis.pageXOffset, event.pageY + globalThis.pageYOffset),\n            rollupElements = rawElements\n                .filter(e => e.classList.contains(rollupCls))\n                .sort((lhs, rhs) => parseInt(lhs.dataset.index, 10) - parseInt(rhs.dataset.index, 10)),\n            children       = rollupElements.map(el => task.children[parseInt(el.dataset.index, 10)]);\n        return this.template({\n            task,\n            children\n        });\n    }\n    /**\n     * Template (a function accepting event data and returning a string) used to display info in the tooltip.\n     * The template will be called with an object as with fields as detailed below\n     *\n     * @config {Function}\n     * @param {Object} data A data block containing the information needed to create tooltip content.\n     * @param {Gantt.model.TaskModel} data.task The summary task to rollup to.\n     * @param {Gantt.model.TaskModel[]} data.children The array of rollup tasks.\n     * @returns {String} String representing the HTML markup\n     */\n    template({ children }) {\n        const\n            me         = this,\n            { client } = me,\n            pieces     = [];\n        children.map((child, index) => {\n            const\n                { startDate, endDate } = child,\n                startText              = client.getFormattedDate(startDate),\n                endDateValue           = client.getDisplayEndDate(endDate, startDate),\n                endText                = client.getFormattedDate(endDateValue);\n            pieces.push(\n                `<div class=\"b-gantt-task-title ${index ? 'b-follow-on' : ''}\">${StringHelper.encodeHtml(child.name)}</div><table>`,\n                `<tr><td>${me.L('L{TaskTooltip.Start}')}:</td><td>${me.clockTemplate.template({\n                    date : startDate,\n                    text : startText,\n                    cls  : 'b-sch-tooltip-startdate'\n                })}</td></tr>`,\n                `<tr><td>${me.L('L{TaskTooltip.End}')}:</td><td>${child.isMilestone ? '' : me.clockTemplate.template({\n                    date : endDateValue,\n                    text : endText,\n                    cls  : 'b-sch-tooltip-enddate'\n                })}</td></tr></table>`\n            );\n        });\n        return pieces.join('');\n    }\n    //region Events\n    onStoreUpdateRecord({ record, changes }) {\n        // We don't need this listener in case the gantt is loading data\n        if (!this.client.project.propagatingLoadChanges) {\n            // If it's a size or position change, then sync that parent's rollups\n            if (record.parent && (changes.rollup || changes.startDate || changes.endDate)) {\n                this.client.taskRendering.redraw(record.parent);\n            }\n        }\n    }\n    onTaskDataGenerated({ taskRecord, left, wrapperChildren, style }) {\n        // Not checking taskRecord.isParent as it might be a lazy loaded parent (set to `true`)\n        if (!this.disabled && Array.isArray(taskRecord.children)) {\n            const\n                // Shortest last in DOM, so they are on top in the stacking order so that you can hover\n                // them if they overlap with longer ones. Otherwise, they might be below and won't trigger\n                // their own mouseover events.\n                children = taskRecord.children.slice().sort((lhs, rhs) => rhs.durationMS - lhs.durationMS);\n            wrapperChildren.push({\n                className : `${rollupCls}-wrap`,\n                dataset   : {\n                    taskFeature : 'rollups'\n                },\n                children : children.map(child => {\n                    // skip inactive children if the task itself is active, skip unscheduled tasks\n                    // (might be unscheduled because of delayed calculations)\n                    if (child.rollup && child.isScheduled && (!child.inactive || taskRecord.inactive)) {\n                        const positionData = this.client.getSizeAndPosition(child);\n                        if (!positionData) {\n                            return null;\n                        }\n                        const { position, width } = positionData;\n                        return {\n                            dataset : {\n                                index        : child.parentIndex,\n                                rollupTaskId : child.id\n                            },\n                            className : {\n                                [rollupCls]   : rollupCls,\n                                [child.cls]   : child.cls,\n                                'b-milestone' : child.isMilestone,\n                                'b-inactive'  : child.inactive\n                            },\n                            style : {\n                                style,\n                                width : child.isMilestone ? null : width,\n                                left  : position - left\n                            }\n                        };\n                    }\n                    return null;\n                }),\n                syncOptions : {\n                    syncIdField : 'rollupTaskId'\n                }\n            });\n        }\n    }\n    //endregion\n}\nRollups._$name = 'Rollups'; GridFeatureManager.registerFeature(Rollups, false, 'Gantt');\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\n/**\n * @module Gantt/feature/ScrollButtons\n */\n/**\n *\n * This feature injects buttons in each row that scrolls the task bar into view. It can optionally show a label along with the\n * button, using the {@link #config-labelRenderer}.\n *\n * ```javascript\n * new Gantt({\n *     appendTo          : 'container',\n *     features : {\n *         scrollButtons : {\n *             labelRenderer({ taskRecord }) {\n *                 return `${taskRecord.wbsCode} ${StringHelper.encodeHtml(taskRecord.name)}`;\n *             }\n *         }\n *     }\n * ```\n *\n * {@inlineexample Gantt/feature/ScrollButtons.js}\n *\n * This feature is **disabled** by default.\n *\n * @extends Core/mixin/InstancePlugin\n * @demo Gantt/scroll-buttons\n * @classtype scrollButtons\n * @feature\n */\nexport default class ScrollButtons extends InstancePlugin {\n    //region Config\n    static $name = 'ScrollButtons';\n    // Default configuration.\n    static configurable = {\n        /**\n         * The icon to use for the button scrolling into the past\n         * @config {String}\n         * @default\n         */\n        backwardIconCls : 'b-icon-previous',\n        /**\n         The icon to use for the button scrolling into the future\n         * @config {String}\n         * @default\n         */\n        forwardIconCls : 'b-icon-next',\n        /**\n         * A method letting you render a label above the button.\n         *\n         * {@note}When returning content, be sure to consider how that content should be encoded to avoid XSS\n         * (Cross-Site Scripting) attacks. This is especially important when including user-controlled data such as\n         * the task's `name`. The function {@link Core.helper.StringHelper#function-encodeHtml-static} as well as\n         * {@link Core.helper.StringHelper#function-xss-static} can be helpful in these cases.{/@note}\n         *\n         * @config {Function} labelRenderer\n         * @param {Object} detail An object that contains data about the event being rendered.\n         * @param {Gantt.model.TaskModel} detail.taskRecord The task record\n         * @returns {String} The text or HTML\n         */\n        labelRenderer : null,\n        /**\n         * A config object describing how the scroll action should be performed.\n         * @config {BryntumScrollOptions}\n         */\n        scrollOptions : { animate : { duration : 600, easing : 'easeTo' }, y : false, edgeOffset : 100 }\n    };\n    static pluginConfig = {\n        chain : [\n            'onPaint',\n            'onElementClick'\n        ]\n    };\n    //endregion\n    doDisable(disable) {\n        this.client.refresh();\n        super.doDisable(disable);\n    }\n    onPaint({ firstPaint }) {\n        if (firstPaint) {\n            const\n                { client }         = this,\n                { timeAxisColumn } = client;\n            this.client.timeAxisSubGrid.scrollable.ion({ scrollend : () => client.refreshColumn(timeAxisColumn) });\n            timeAxisColumn.externalRenderer = this.renderer.bind(this);\n        }\n    }\n    renderer({ record, grid }) {\n        const\n            taskBefore = record.endDate < grid.visibleDateRange.startDate,\n            taskAfter  = record.startDate > grid.visibleDateRange.endDate;\n        return {\n            class    : 'b-scroll-buttons-container',\n            children : [{\n                class    : 'b-scroll-buttons-content',\n                children : [\n                    this.labelRenderer ? {\n                        tag  : 'label',\n                        html : this.labelRenderer?.({ taskRecord : record })\n                    } : null,\n                    record.isScheduled ? {\n                        tag       : 'i',\n                        className : {\n                            'b-icon'               : 1,\n                            'b-scroll-button'      : 1,\n                            [this.backwardIconCls] : taskBefore,\n                            [this.forwardIconCls]  : taskAfter,\n                            'b-task-visible'       : !taskBefore && !taskAfter\n                        }\n                    } : null\n                ]\n            }]\n        };\n    }\n    onElementClick({ target }) {\n        if (target.matches('.b-scroll-button')) {\n            const\n                { client } = this,\n                record     = client.getRecordFromElement(target);\n            client.scrollTaskIntoView(record, Object.assign(this.scrollOptions, { block : target.classList.contains(this.forwardIconCls) ? 'end' : 'start' }));\n        }\n    }\n}\nScrollButtons._$name = 'ScrollButtons'; GridFeatureManager.registerFeature(ScrollButtons, false, 'Gantt');\n", "import TimelineSummary from '../../Scheduler/feature/TimelineSummary.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\n/**\n * @module Gantt/feature/Summary\n */\n/**\n * Describes a summary level for the time axis in Gantt\n * @typedef GanttSummaryOptions\n * @property {String} label Label for the summary\n * @property {Function} renderer Function to calculate the and render the summary value\n * @property {Date} startDate Tick start date\n * @property {Date} endDate Tick end date\n * @property {Gantt.data.TaskStore} taskStore Task store\n * @property {Gantt.data.TaskStore} store Display store, for when Gantt is configured to display tasks from another\n * store than its task store (for example when using the TreeGroup feature)\n */\n/**\n * A feature displaying a summary bar in the grid footer.\n *\n * ## Summaries in the locked grid\n * For regular columns in the locked section - specify type of summary on columns, available types are:\n * <dl class=\"wide\">\n * <dt>sum <dd>Sum of all values in the column\n * <dt>add <dd>Alias for sum\n * <dt>count <dd>Number of rows\n * <dt>countNotEmpty <dd>Number of rows containing a value\n * <dt>average <dd>Average of all values in the column\n * <dt>function <dd>A custom function, used with store.reduce. Should take arguments (sum, record)\n * </dl>\n * Columns can also specify a {@link Grid.column.Column#config-summaryRenderer} to format the calculated sum.\n *\n * ## Summaries in the time axis grid\n *\n * To output summaries in the ticks of the time axis summary bar, either provide a {@link #config-renderer} or use\n * {@link #config-summaries}. The `renderer` method provides the current tick `startDate` and `endDate` which you\n * can use to output the data you want to present in each summary cell.\n *\n * ```javascript\n * features : {\n *     summary     : {\n *         // Find all intersecting task and render the count in each cell\n *         renderer: ({ taskStore, startDate, endDate }) => {\n *             const intersectingTasks = taskStore.query(task =>\n *                 // Gantt by default renders tasks as early as possible, if loaded with un-normalized data there\n *                 // might not be any start and end dates calculated yet\n *                 task.isScheduled &&\n *                 // Find tasks that intersect the current tick\n *                 DateHelper.intersectSpans(task.startDate, task.endDate, startDate, endDate)\n *             );\n *\n *             return intersectingTasks.length;\n *         }\n *     }\n * }\n * ```\n *\n * {@inlineexample Gantt/feature/Summary.js}\n *\n * This feature is <strong>disabled</strong> by default.\n *\n * @extends Scheduler/feature/TimelineSummary\n * @classtype summary\n * @feature\n * @demo Gantt/summary\n *\n * @typings Grid.feature.Summary -> Grid.feature.GridSummary\n * @typings Scheduler.feature.Summary -> Scheduler.feature.SchedulerSummary\n */\nexport default class Summary extends TimelineSummary {\n    //region Config\n    static get $name() {\n        return 'Summary';\n    }\n    static get configurable() {\n        return {\n            /**\n             * Array of summary configs which consists of a label and a {@link #config-renderer} function\n             *\n             * ```javascript\n             * new Gantt({\n             *     features : {\n             *         summary : {\n             *             summaries : [\n             *                 {\n             *                     label : 'Label',\n             *                     renderer : ({ startDate, endDate, taskStore }) => {\n             *                         // return display value\n             *                         returns '<div>Renderer output</div>';\n             *                     }\n             *                 }\n             *             ]\n             *         }\n             *     }\n             * });\n             * ```\n             *\n             * @config {GanttSummaryOptions[]}\n             */\n            summaries : null,\n            /**\n             * Renderer function for a single time axis tick. Should calculate a sum and return HTML as a result.\n             *\n             * ```javascript\n             * new Gantt({\n             *     features : {\n             *         summary : {\n             *             renderer : ({ startDate, endDate, taskStore }) => {\n             *                 // return display value\n             *                 returns '<div>Renderer output</div>';\n             *             }\n             *         }\n             *     }\n             * });\n             * ```\n             *\n             * @param {Object} context Rendering context object\n             * @param {Date} context.startDate Tick start date\n             * @param {Date} context.endDate Tick end date\n             * @param {Gantt.data.TaskStore} context.taskStore Task store\n             * @param {Gantt.data.TaskStore} context.store Display store, for when Gantt is configured to display tasks from\n             *   another store than its task store (for example when using the TreeGroup feature)\n             * @returns {String} Html content\n             * @config {Function}\n             */\n            renderer : null\n        };\n    }\n    // Plugin configuration. This plugin chains some of the functions in Grid.\n    static get pluginConfig() {\n        const config = super.pluginConfig;\n        config.chain.push('updateTaskStore', 'bindStore');\n        return config;\n    }\n    //endregion\n    //region Init\n    construct(gantt, config) {\n        super.construct(gantt, config);\n        // Feature might be run from Grid (in docs), should not crash\n        if (gantt.isGanttBase) {\n            this.updateTaskStore(gantt.taskStore);\n        }\n    }\n    bindStore() {\n        this.updateTimelineSummaries();\n    }\n    //endregion\n    //region Render\n    updateTaskStore(taskStore) {\n        this.detachListeners('summaryTaskStore');\n        taskStore.ion({\n            name    : 'summaryTaskStore',\n            filter  : 'updateTimelineSummaries',\n            thisObj : this\n        });\n    }\n    /**\n     * Updates summaries.\n     * @private\n     */\n    updateTimelineSummaries() {\n        const\n            me                = this,\n            {\n                client,\n                summaries\n            }                 = me,\n            { timeAxis }      = client,\n            summaryContainer  = me.summaryBarElement;\n        if (summaryContainer && client.isEngineReady) {\n            Array.from(summaryContainer.children).forEach((element, i) => {\n                const tick = timeAxis.getAt(i);\n                let html    = '',\n                    tipHtml = `<header>${me.L('L{Summary for}', client.getFormattedDate(tick.startDate))}</header>`;\n                summaries.forEach(config => {\n                    const\n                        value     = config.renderer({\n                            startDate     : tick.startDate,\n                            endDate       : tick.endDate,\n                            taskStore     : client.taskStore,\n                            store         : client.store,\n                            resourceStore : client.resourceStore,\n                            gantt         : client,\n                            element\n                        }),\n                        valueHtml = `<div class=\"b-timeaxis-summary-value\">${value ?? '&nbsp;'}</div>`;\n                    if (summaries.length > 1 || value !== '') {\n                        html += valueHtml;\n                    }\n                    tipHtml += `<label>${config.label || ''}</label>` + valueHtml;\n                });\n                element.innerHTML = html;\n                element._tipHtml  = tipHtml;\n            });\n        }\n    }\n}\n// Override Grids Summary with this improved version\nSummary._$name = 'Summary'; GridFeatureManager.registerFeature(Summary, false, 'Gantt');\n", "import RowCopyPaste from '../../Grid/feature/RowCopyPaste.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport TransactionalFeature from '../../Scheduler/feature/mixin/TransactionalFeature.js';\n/**\n * @module Gantt/feature/TaskCopyPaste\n */\n/**\n * Allow using [Ctrl/CMD + C/X] and [Ctrl/CMD + V] to copy/cut and paste tasks. You can configure how a newly pasted record\n * is named using {@link #function-generateNewName}\n *\n * This feature is **enabled** by default\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         taskCopyPaste : true\n *     }\n * });\n * ```\n *\n * ## Keyboard shortcuts\n *\n * By default, this feature will react to Ctrl+C, Ctrl+X and Ctrl+V for standard clipboard actions.\n * You can reconfigure the keys used to trigger these actions, see {@link #config-keyMap} for more details.\n *\n * {@inlineexample Gantt/feature/TaskCopyPaste.js}\n *\n * @extends Grid/feature/RowCopyPaste\n * @classtype taskCopyPaste\n * @feature\n */\nexport default class TaskCopyPaste extends TransactionalFeature(RowCopyPaste) {\n    static $name = 'TaskCopyPaste';\n    static type = 'taskCopyPaste';\n    static configurable = {\n        copyRecordText  : 'L{copyTask}',\n        cutRecordText   : 'L{cutTask}',\n        pasteRecordText : 'L{pasteTask}'\n    };\n    //region Events\n    /**\n     * Fires on the owning Gantt after a paste action is performed.\n     * @event paste\n     * @on-owner\n     * @param {Gantt.view.Gantt} source Owner gantt\n     * @param {Gantt.model.TaskModel} referenceRecord The reference task record, the clipboard task records will\n     * be pasted above this row.\n     * @param {Gantt.model.TaskModel[]} records The pasted task records\n     * @param {Gantt.model.TaskModel[]} originalRecords For a copy action, these are the records that were copied.\n     * For cut action, this is same as the `records` param.\n     * @param {Boolean} isCut `true` if this is a cut action\n     * @param {String} entityName 'task' to distinguish this event from other beforePaste events\n     */\n    /**\n     * Fires on the owning Gantt before a paste action is performed, return `false` to prevent the action\n     * @event beforePaste\n     * @preventable\n     * @on-owner\n     * @param {Gantt.view.Gantt} source Owner Gantt\n     * @param {Gantt.model.TaskModel} referenceRecord The reference task record, the clipboard task records will\n     * be pasted above this row.\n     * @param {Gantt.model.TaskModel[]} records The records about to be pasted\n     * @param {Boolean} isCut `true` if this is a cut action\n     * @param {String} entityName 'task' to distinguish this event from other beforePaste events\n     */\n    //endregion\n    construct(gantt, config) {\n        super.construct(gantt, config);\n        gantt.ion({\n            beforeRenderTask : 'onBeforeRenderTask',\n            thisObj          : this\n        });\n    }\n    // Used in events to separate events from different features from each other\n    entityName = 'task';\n    //region Display store adjustments\n    populateCellMenu({ record, items }) {\n        super.populateCellMenu(...arguments);\n        // No copy pasting when using a \"display store\"\n        if (this.client.usesDisplayStore) {\n            items.cut && (items.cut.disabled = true);\n            items.copy && (items.copy.disabled = true);\n            items.paste && (items.paste.disabled = true);\n        }\n    }\n    isActionAvailable({ key, action, event }) {\n        const superIsActionAvailable = super.isActionAvailable({ key, action, event });\n        if (superIsActionAvailable !== undefined) {\n            return superIsActionAvailable && this.client.usesDisplayStore;\n        }\n    }\n    //endregion\n    setIsCut(taskRecord) {\n        super.setIsCut(...arguments);\n        // After a row is cut or copied - also refresh the associated task bar\n        this.client.taskRendering.redraw(taskRecord);\n    }\n    onBeforeRenderTask({ renderData }) {\n        renderData.cls['b-cut-row'] = renderData.row.cls['b-cut-row'];\n    }\n    extractParents(taskRecords, idMap, generateNames = true) {\n        const result = super.extractParents(taskRecords, idMap, generateNames);\n        if (!this.isCut) {\n            this.depsToCopy = this.extractDependencies(taskRecords, idMap);\n        }\n        return result;\n    }\n    async insertCopiedRecords(toInsert, recordReference) {\n        const me = this;\n        await me.startFeatureTransaction();\n        const result = await super.insertCopiedRecords(toInsert, recordReference);\n        toInsert.forEach(parent => parent.refreshWbs({ deep : true, useOrderedTree : true }));\n        me.client.dependencyStore.add(me.depsToCopy);\n        delete me.depsToCopy;\n        await me.finishFeatureTransaction();\n        return result;\n    }\n    /**\n     * Extract dependencies from passed records. The result will include only deps via records and not include deps\n     * with foreign records.\n     * @param {Core.data.Model[]} taskRecords array of records to extract dependencies from\n     * @param {Object} idMap Map linking original node id with its copy\n     * @returns {Object[]} array of dependencies settings via passed records to apply using applyDependencies method\n     * @private\n     */\n    extractDependencies(taskRecords, idMap) {\n        // This map is required to see which tasks are already connected\n        const depsMap = {};\n        return taskRecords.reduce((deps, task) => {\n            task.predecessors.forEach(predecessor => {\n                const key = predecessor.id;\n                if (!(key in depsMap) && taskRecords.includes(predecessor.fromEvent)) {\n                    depsMap[key] = true;\n                    deps.push(Object.assign({}, predecessor.data, {\n                        id        : undefined,\n                        to        : undefined,\n                        toEvent   : idMap[task.id].id,\n                        toTask    : undefined,\n                        from      : undefined,\n                        fromEvent : idMap[predecessor.fromEvent.id].id,\n                        fromTask  : undefined\n                    }));\n                }\n            });\n            task.successors.forEach(successor => {\n                const key = successor.id;\n                if (!(key in depsMap) && taskRecords.includes(successor.toEvent)) {\n                    depsMap[key] = true;\n                    deps.push(Object.assign({}, successor.data, {\n                        id        : undefined,\n                        to        : undefined,\n                        toEvent   : idMap[successor.toEvent.id].id,\n                        toTask    : undefined,\n                        from      : undefined,\n                        fromEvent : idMap[task.id].id,\n                        fromTask  : undefined\n                    }));\n                }\n            });\n            return deps;\n        }, []);\n    }\n}\nTaskCopyPaste._$name = 'TaskCopyPaste'; GridFeatureManager.registerFeature(TaskCopyPaste, true, 'Gantt');\n", "import DragBase from '../../Scheduler/feature/base/DragBase.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\nimport ArrayHelper from '../../Core/helper/ArrayHelper.js';\nimport EventHelper from '../../Core/helper/EventHelper.js';\nimport TransactionalFeature from '../../Scheduler/feature/mixin/TransactionalFeature.js';\n/**\n * @module Gantt/feature/TaskDrag\n */\n/**\n * @typedef ValidationMessage\n * @property {Boolean} valid `true` for valid, `false` for invalid\n * @property {String} message Validation message\n */\n/**\n * Allows user to drag and drop tasks within Gantt, to change their start date.\n *\n * ## Constraining the drag drop area\n *\n * You can constrain how the dragged task is allowed to move by using {@link Gantt.view.Gantt#config-getDateConstraints}.\n * This method is configured on the Gantt instance and lets you define the date range for the dragged task programmatically.\n *\n * ## Drag drop tasks from outside\n *\n * Dragging unplanned tasks from an external grid is a very popular use case. Please refer to the [Drag from grid demo](../examples/drag-from-grid)\n * and study the [Drag from grid guide](#Gantt/guides/dragdrop/drag_tasks_from_grid.md) to learn more.\n *\n * ## Validating a drag drop operation\n *\n * It is easy to programmatically decide what is a valid drag drop operation. Use the {@link #config-validatorFn}\n * and return either `true` / `false` (optionally a message to show to the user).\n *\n * ```javascript\n * features : {\n *     taskDrag : {\n *        validatorFn(draggedTaskRecords, newStartDate) {\n *            const valid = Date.now() >= newStartDate;\n *\n *            return {\n *                valid,\n *                message : valid ? '' : 'Not allow to drag a task into the past'\n *            };\n *        }\n *     }\n * }\n * ```\n *\n * If you instead want to do a single validation upon drop, you can listen to {@link #event-beforeTaskDropFinalize}\n * and set the `valid` flag on the context object provided.\n *\n * ```javascript\n * const gantt = new Gantt({\n *     listeners : {\n *         beforeTaskDropFinalize({ context }) {\n *             const { taskRecords } = context;\n *             // Don't allow dropping a task in the past\n *             context.valid = Date.now() <= eventRecords[0].startDate;\n *         }\n *     }\n * });\n * ```\n *\n * ## Preventing drag of certain tasks\n *\n * To prevent certain tasks from being dragged, you have two options. You can set {@link Gantt.model.TaskModel#field-draggable}\n * to `false` in your data, or you can listen for the {@link Gantt.view.Gantt#event-beforeTaskDrag} event and\n * return `false` to block the drag.\n *\n * ```javascript\n * new Gantt({\n *     listeners : {\n *         beforeTaskDrag({ taskRecord }) {\n *             // Only allow dragging tasks that has not started\n *             return taskRecord.percentDone === 0;\n *         }\n *     }\n * })\n * ```\n *\n * ## Customizing the drag drop tooltip\n *\n * To show custom HTML in the tooltip, please see the {@link #config-tooltipTemplate} config. Example:\n *\n * ```javascript\n * features: {\n *     taskDrag: {\n *         // A minimal start date tooltip\n *         tooltipTemplate : ({ taskRecord, startDate }) => {\n *             return DateHelper.format(startDate, 'HH:mm');\n *         }\n *     }\n * }\n * ```\n *\n * This feature is **enabled** by default\n *\n * @extends Scheduler/feature/base/DragBase\n * @demo Gantt/basic\n * @classtype taskDrag\n * @feature\n */\nexport default class TaskDrag extends TransactionalFeature(DragBase) {\n    //region Config\n    static get $name() {\n        return 'TaskDrag';\n    }\n    static get configurable() {\n        return {\n            /**\n             * An empty function by default, but provided so that you can perform custom validation on\n             * the item being dragged. This function is called during the drag and drop process and also after the drop is made.\n             * Return true if the new position is valid, false to prevent the drag.\n             * @param {Gantt.model.TaskModel[]} taskRecords An array of tasks being dragged\n             * @param {Date} startDate The new start date\n             * @param {Number} duration The duration of the item being dragged\n             * @param {Event} event The event object\n             * @returns {Boolean|ValidationMessage} `true` if this validation passes, `false` if it does not.\n             *\n             * Or an object with 2 properties: `valid` -  Boolean `true`/`false` depending on validity,\n             * and `message` - String with a custom error message to display when invalid.\n             * @config {Function}\n             */\n            validatorFn : (taskRecords, startDate, duration, event) => true,\n            /**\n             * `this` reference for the validatorFn\n             * @config {Object}\n             */\n            validatorFnThisObj : null,\n            /**\n             * Gets or sets special key to activate successor pinning behavior. Supported values are:\n             * * 'ctrl'\n             * * 'shift'\n             * * 'alt'\n             * * 'meta'\n             *\n             * Assign false to disable it.\n             * @member {Boolean|String} pinSuccessors\n             */\n            /**\n             * Set to true to enable dragging task while pinning dependent tasks. By default, this behavior is activated\n             * if you hold CTRL key during drag. Alternatively, you may provide key name to use. Supported values are:\n             * * 'ctrl'\n             * * 'shift'\n             * * 'alt'\n             * * 'meta'\n             *\n             * **Note**: Only supported in forward-scheduled project\n             *\n             * @config {Boolean|String}\n             * @default\n             */\n            pinSuccessors : false,\n            tooltipCls : 'b-gantt-taskdrag-tooltip',\n            capitalizedEventName : null\n        };\n    }\n    afterConstruct() {\n        this.capitalizedEventName = this.capitalizedEventName || this.client.capitalizedEventName;\n        super.afterConstruct(...arguments);\n    }\n    changePinSuccessors(value) {\n        return EventHelper.toSpecialKey(value);\n    }\n    /**\n     * Template used to generate drag tooltip contents.\n     * ```javascript\n     * const gantt = new Gantt({\n     *     features : {\n     *         taskDrag : {\n     *             tooltipTemplate({taskRecord, startText}) {\n     *                 return `${taskRecord.name}: ${startText}`\n     *             }\n     *         }\n     *     }\n     * });\n     * ```\n     * @config {Function} tooltipTemplate\n     * @param {Object} data Tooltip data\n     * @param {Gantt.model.TaskModel} data.taskRecord\n     * @param {Boolean} data.valid Currently over a valid drop target or not\n     * @param {Date} data.startDate New start date\n     * @param {Date} data.endDate New end date\n     * @returns {String}\n     */\n    //endregion\n    //region Events\n    /**\n     * Fires on the owning Gantt before task dragging starts. Return false to prevent the action.\n     * @event beforeTaskDrag\n     * @preventable\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {Gantt.model.TaskModel} taskRecord\n     * @param {Event} event The native browser event\n     */\n    /**\n     * Fires on the owning Gantt when task dragging starts\n     * @event taskDragStart\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {Gantt.model.TaskModel[]} taskRecords\n     */\n    /**\n     * Fires on the owning Gantt while a task is being dragged\n     * @event taskDrag\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {Gantt.model.TaskModel[]} taskRecords\n     * @param {Date} startDate\n     * @param {Date} endDate\n     * @param {Object} dragData\n     * @param {Boolean} changed `true` if startDate has changed.\n     */\n    /**\n     * Fires on the owning Gantt to allow implementer to prevent immediate finalization by setting `data.context.async = true`\n     * in the listener, to show a confirmation popup etc\n     * ```javascript\n     * scheduler.on('beforetaskdropfinalize', ({ context }) => {\n     *     context.async = true;\n     *     setTimeout(() => {\n     *         // async code don't forget to call finalize\n     *         context.finalize();\n     *     }, 1000);\n     * })\n     * ```\n     * @event beforeTaskDropFinalize\n     * @on-owner\n     * @param {Gantt.view.Gantt} source Gantt instance\n     * @param {Object} context\n     * @param {Gantt.model.TaskModel[]} context.taskRecords The dragged task records\n     * @param {Boolean} context.valid Set this to `false` to mark the drop as invalid\n     * @param {Boolean} context.async Set true to handle dragdrop asynchronously (e.g. to wait for user\n     * confirmation)\n     * @param {Function} context.finalize Call this method to finalize dragdrop. This method accepts one\n     * argument: pass true to update records, or false, to ignore changes\n     */\n    /**\n     * Fires on the owning Gantt after a valid task drop\n     * @event taskDrop\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {Gantt.model.TaskModel[]} taskRecords\n     * @param {Boolean} isCopy\n     */\n    /**\n     * Fires on the owning Gantt after a task drop, regardless if the drop validity\n     * @event afterTaskDrop\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {Gantt.model.TaskModel[]} taskRecords\n     * @param {Boolean} valid\n     */\n    //endregion\n    //region Init\n    construct(gantt, config) {\n        this.gantt = gantt;\n        super.construct(gantt, config);\n    }\n    get store() {\n        return this.gantt.store;\n    }\n    //endregion\n    //region Drag events\n    getDraggableElement(el) {\n        return el?.closest(this.drag.targetSelector);\n    }\n    resolveEventRecord(eventElement, client = this.client) {\n        return client.resolveTaskRecord(eventElement);\n    }\n    isElementDraggable(el, event) {\n        const\n            me           = this,\n            { client }   = me,\n            eventElement = me.getDraggableElement(el);\n        if (!eventElement || me.disabled || client.readOnly) {\n            return false;\n        }\n        // displaying something resizable within the event?\n        // if (el.closest(gantt.eventSelector).matches('[class$=\"-handle\"]')) {\n        if (el.matches('[class$=\"-handle\"]')) {\n            return false;\n        }\n        const eventRecord = me.resolveEventRecord(eventElement, client);\n        // Tasks not part of project are transient tasks in a display store, which are not meant to be manipulated\n        if (!eventRecord || !eventRecord.isDraggable || eventRecord.readOnly || !eventRecord.project) {\n            return false;\n        }\n        // Hook for features that need to prevent drag\n        const prevented = client[`is${me.capitalizedEventName}ElementDraggable`]?.(\n            eventElement, eventRecord, el, event\n        ) === false;\n        return !prevented;\n    }\n    triggerBeforeEventDrag(eventType, event) {\n        return this.client.trigger(eventType, event);\n    }\n    triggerEventDrag(dragData, start) {\n        // Trigger the event on every mousemove so that features which need to adjust\n        // Such as dependencies and baselines can keep adjusted.\n        this.client.trigger('taskDrag', {\n            taskRecords : dragData.draggedEntities,\n            startDate   : dragData.startDate,\n            endDate     : dragData.endDate,\n            dragData,\n            changed     : dragData.startDate - start !== 0\n        });\n    }\n    triggerDragStart(dragData) {\n        this.client.trigger('taskDragStart', {\n            taskRecords : dragData.draggedEntities,\n            dragData\n        });\n        return this.startFeatureTransaction();\n    }\n    triggerDragAbort(dragData) {\n        this.client.trigger('taskDragAbort', {\n            taskRecords : dragData.draggedEntities,\n            context     : dragData\n        });\n    }\n    triggerDragAbortFinalized(dragData) {\n        this.rejectFeatureTransaction();\n        this.client.trigger('taskDragAbortFinalized', {\n            taskRecords : dragData.draggedEntities,\n            context     : dragData\n        });\n    }\n    triggerAfterDrop(dragData, valid) {\n        this.finishFeatureTransaction();\n        this.currentOverClient.trigger('afterTaskDrop', {\n            taskRecords : dragData.draggedEntities,\n            context     : dragData,\n            valid\n        });\n    }\n    //endregion\n    //region Drag data\n    getProductDragContext(dd) {\n        return {\n            valid : true\n        };\n    }\n    getMinimalDragData(info) {\n        const\n            element    = this.getElementFromContext(info),\n            taskRecord = this.client.resolveTaskRecord(element);\n        return { taskRecord };\n    }\n    getTaskScheduleRegion(taskRecord, dateConstraints) {\n        return this.client.getScheduleRegion(taskRecord, true, dateConstraints);\n    }\n    getDateConstraints(taskRecord) {\n        return this.client.getDateConstraints?.(taskRecord);\n    }\n    setupProductDragData(context) {\n        // debugger\n        const\n            me              = this,\n            { client }      = me,\n            element         = context.element,\n            taskRecord      = client.resolveTaskRecord(element),\n            taskRegion      = Rectangle.from(element),\n            relatedRecords  = me.getRelatedRecords(taskRecord) || [],\n            dateConstraints = me.getDateConstraints(taskRecord),\n            eventBarEls     = [element],\n            scheduleRegion  = me.getTaskScheduleRegion(taskRecord, dateConstraints);\n        me.setupConstraints(\n            scheduleRegion,\n            taskRegion,\n            client.timeAxisViewModel.snapPixelAmount,\n            Boolean(dateConstraints)\n        );\n        // Collecting additional elements to drag\n        relatedRecords.forEach(r => {\n            ArrayHelper.include(eventBarEls, client.getElementFromTaskRecord(r, false));\n        });\n        const draggedEntities = [taskRecord, ...relatedRecords];\n        return { record : taskRecord, dateConstraints, eventBarEls, draggedEntities, taskRecords : draggedEntities };\n    }\n    /**\n     * Get correct axis coordinate.\n     * @private\n     * @param {Gantt.model.TaskModel} taskRecord Record being dragged\n     * @param {HTMLElement} element Element being dragged\n     * @param {Number[]} coord XY coordinates\n     * @returns {Number|Number[]} X,Y or XY\n     */\n    getCoordinate(taskRecord, element, coord) {\n        return coord[0];\n    }\n    //endregion\n    //region Finalize & validation\n    // Called from EventDragBase to assert if a drag is valid or not\n    checkDragValidity(dragData, event) {\n        return this.validatorFn.call(this.validatorFnThisObj || this,\n            dragData.draggedEntities,\n            dragData.startDate,\n            dragData.duration,\n            event\n        );\n    }\n    /**\n     * Checks if a task can be dropped on the specified location\n     * @private\n     * @returns {Boolean} Valid (true) or invalid (false)\n     */\n    isValidDrop(dragData) {\n        return true;\n    }\n    /**\n     * Update tasks being dragged.\n     * @private\n     * @param {Object} context Drag data.\n     */\n    async updateRecords(context) {\n        const\n            {\n                startDate,\n                browserEvent,\n                draggedEntities : [taskRecord]\n            }                = context,\n            oldStartDate     = taskRecord.startDate;\n        if (this.pinSuccessors && browserEvent[this.pinSuccessors]) {\n            await taskRecord.moveTaskPinningSuccessors(startDate);\n        }\n        else {\n            await taskRecord.setStartDate(startDate, true);\n        }\n        // If not rejected (the startDate has changed), tell the world there was a successful drop.\n        if (taskRecord.startDate - oldStartDate) {\n            this.client.trigger('taskDrop', {\n                taskRecords : context.draggedEntities\n            });\n        }\n        else {\n            this.dragData.valid = false;\n        }\n    }\n    getRecordElement(task) {\n        return this.client.getElementFromTaskRecord(task, true);\n    }\n    get tipId() {\n        return `${this.client.id}-task-drag-tip`;\n    }\n    //endregion\n}\nTaskDrag._$name = 'TaskDrag'; GridFeatureManager.registerFeature(TaskDrag, true, 'Gantt');\n", "import DragCreateBase from '../../Scheduler/feature/base/DragCreateBase.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport Draggable from '../../Core/mixin/Draggable.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\n/**\n * @module Gantt/feature/TaskDragCreate\n */\n/**\n * A feature that allows the user to schedule tasks by dragging in the empty parts of the gantt timeline row. Note, this feature is only applicable for unscheduled tasks.\n *\n * {@inlineexample Gantt/feature/TaskDragCreate.js}\n *\n * This feature is **enabled** by default\n *\n * @demo Gantt/advanced\n *\n * @extends Scheduler/feature/base/DragCreateBase\n * @classtype taskDragCreate\n * @feature\n */\nexport default class TaskDragCreate extends DragCreateBase {\n    //region Config\n    static get $name() {\n        return 'TaskDragCreate';\n    }\n    static get configurable() {\n        return {\n            // used by gantt to only allow one task per row\n            preventMultiple : true\n        };\n    }\n    //endregion\n    //region Events\n    /**\n     * Fires on the owning Gantt after the task has been scheduled.\n     * @event dragCreateEnd\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {Gantt.model.TaskModel} taskRecord\n     * @param {MouseEvent} event The ending mouseup event.\n     * @param {HTMLElement} proxyElement The proxy element showing the drag creation zone.\n     */\n    /**\n     * Fires on the owning Gantt at the beginning of the drag gesture\n     * @event beforeDragCreate\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {Gantt.model.TaskModel} taskRecord\n     * @param {Date} date The datetime associated with the drag start point.\n     */\n    /**\n     * Fires on the owning Gantt after the drag start has created a proxy element.\n     * @event dragCreateStart\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {HTMLElement} proxyElement The proxy representing the new event.\n     */\n    /**\n     * Fires on the owning Gantt to allow implementer to prevent immediate finalization by setting `data.context.async = true`\n     * in the listener, to show a confirmation popup etc\n     * ```\n     *  scheduler.on('beforedragcreatefinalize', ({context}) => {\n     *      context.async = true;\n     *      setTimeout(() => {\n     *          // async code don't forget to call finalize\n     *          context.finalize();\n     *      }, 1000);\n     *  })\n     * ```\n     * @event beforeDragCreateFinalize\n     * @on-owner\n     * @param {Gantt.view.Gantt} source Scheduler instance\n     * @param {HTMLElement} proxyElement Proxy element, representing future event\n     * @param {Object} context\n     * @param {Boolean} context.async Set true to handle drag create asynchronously (e.g. to wait for user\n     * confirmation)\n     * @param {Function} context.finalize Call this method to finalize drag create. This method accepts one\n     * argument: pass true to update records, or false, to ignore changes\n     */\n    /**\n     * Fires on the owning Gantt at the end of the drag create gesture whether or not\n     * a task was scheduled by the gesture.\n     * @event afterDragCreate\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {HTMLElement} proxyElement The element showing the drag creation zone.\n     */\n    //endregion\n    //region Init\n    construct(gantt, config) {\n        this.gantt = gantt;\n        super.construct(gantt, config);\n    }\n    get store() {\n        return this.gantt.store;\n    }\n    //endregion\n    //region Gantt specific implementation\n    setupDragContext(event) {\n        const { client } = this;\n        // Only mousedown on an empty cell can initiate drag-create\n        if (event.target.closest?.(`.${client.timeAxisColumn.cellCls}`)) {\n            const taskRecord = client.getRecordFromElement(event.target);\n            // And there must be a task backing the cell.\n            if (taskRecord) {\n                // Skip the EventResize's setupDragContext. We want the base one.\n                const result = Draggable().prototype.setupDragContext.call(this, event);\n                result.scrollManager = client.scrollManager;\n                result.taskRecord = result.rowRecord = taskRecord;\n                return result;\n            }\n        }\n    }\n    startDrag(drag) {\n        // This flag must be set in startDrag\n        const\n            draggingEnd  = this.draggingEnd = drag.event.pageX > drag.startEvent.pageX,\n            { client }   = this,\n            { timeAxis } = client,\n            {\n                mousedownDate,\n                taskRecord,\n                date\n            }            = drag;\n        client.beginListeningForBatchedUpdates();\n        taskRecord.beginBatch();\n        taskRecord.set('startDate', DateHelper.floor(draggingEnd ? mousedownDate : date, timeAxis.resolution, undefined, client.weekStartDay));\n        taskRecord.set('endDate', DateHelper.ceil(draggingEnd ? date : mousedownDate, timeAxis.resolution, undefined, client.weekStartDay));\n        // This presents the task to be scheduled for validation at the proposed mouse/date point\n        // If rejected, we have to revert the batched changes\n        if (this.handleBeforeDragCreate(drag, taskRecord, drag.event) === false) {\n            this.onAborted(drag);\n            return false;\n        }\n        // Now it will have an element, and that's what we are dragging\n        drag.itemElement = drag.element = client.getElementFromTaskRecord(drag.taskRecord);\n        return super.startDrag.call(this, drag);\n    }\n    handleBeforeDragCreate(drag, taskRecord, event) {\n        const\n            me     = this,\n            result = me.gantt.trigger('beforeDragCreate', {\n                taskRecord,\n                date : drag.mousedownDate,\n                event\n            });\n        // Save date constraints\n        me.dateConstraints = me.gantt.getDateConstraints?.(taskRecord);\n        return result;\n    }\n    checkValidity(context, event) {\n        const me = this;\n        context.taskRecord = me.dragging.taskRecord;\n        return me.createValidatorFn.call(me.validatorFnThisObj || me, context, event);\n    }\n    // Row is not empty if task is scheduled\n    isRowEmpty(taskRecord) {\n        return !taskRecord.startDate || !taskRecord.endDate;\n    }\n    onAborted({ taskRecord }) {\n        taskRecord.cancelBatch();\n        this.client.endListeningForBatchedUpdates();\n    }\n    //endregion\n}\nTaskDragCreate._$name = 'TaskDragCreate'; GridFeatureManager.registerFeature(TaskDragCreate, true, 'Gantt');\n", "import GanttTaskEditor from '../../SchedulerPro/widget/GanttTaskEditor.js';\n/**\n * @module Gantt/widget/TaskEditor\n */\n/**\n * Provides a UI to edit tasks in a popup dialog. It is implemented as a Tab Panel with several preconfigured built-in\n * tabs. Although the default configuration may be adequate in many cases, the Task Editor is easily configurable.\n *\n * This demo shows how to use TaskEditor as a standalone widget:\n *\n * {@inlineexample Gantt/widget/TaskEditor.js}\n *\n * To hide built-in tabs or to add custom tabs, or to append widgets to any of the built-in tabs\n * use the {@link Gantt.feature.TaskEdit#config-items items} config.\n *\n * The Task editor contains tabs by default. Each tab is a container with built-in widgets: text fields, grids, etc.\n *\n * | Tab ref           | Text         | Weight | Description                                           |\n * |-------------------|--------------|--------|-------------------------------------------------------|\n * | `generalTab`      | General      | 100    | Name, start/end dates, duration, percent done, effort |\n * | `predecessorsTab` | Predecessors | 200    | Grid with incoming dependencies                       |\n * | `successorsTab`   | Successors   | 300    | Grid with outgoing dependencies                       |\n * | `resourcesTab`    | Resources    | 400    | Grid with assigned resources                          |\n * | `advancedTab`     | Advanced     | 500    | Assigned calendar, scheduling mode, constraints, etc  |\n * | `notesTab`        | Notes        | 600    | Text area to add notes to the selected task           |\n *\n * ## Task editor customization example\n *\n * This example shows a custom Task Editor configuration. The built-in \"Notes\" tab is hidden, a custom \"Files\" tab is\n * added, the \"General\" tab is renamed to \"Common\" and \"Custom\" field is appended to it. Double-click on a task bar to\n * start editing:\n *\n * {@inlineexample Gantt/feature/TaskEditCustom.js}\n *\n * @extends SchedulerPro/widget/GanttTaskEditor\n */\nexport default class TaskEditor extends GanttTaskEditor {\n    // Factoryable type name\n    static get type() {\n        return 'taskeditor';\n    }\n    static get $name() {\n        return 'TaskEditor';\n    }\n    static get defaultConfig() {\n        return {\n            cls : 'b-gantt-taskeditor b-schedulerpro-taskeditor'\n        };\n    }\n}\n// Register this widget type with its Factory\nTaskEditor.initClass();\nTaskEditor._$name = 'TaskEditor';", "import SchedulerProTaskEdit from '../../SchedulerPro/feature/TaskEdit.js';\nimport TaskEditor from '../widget/TaskEditor.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\n/**\n * @module Gantt/feature/TaskEdit\n */\n/**\n * Feature that allows editing tasks using a {@link Gantt/widget/TaskEditor}, a popup with fields for editing task data.\n *\n * This demo shows the task edit feature, double-click child task bar to start editing:\n *\n * {@inlineexample Gantt/feature/TaskEdit.js}\n *\n * ## Customizing tabs and their widgets\n *\n * To customize tabs you can:\n *\n * * Reconfigure built-in tabs by providing override configs in the {@link #config-items} config.\n * * Remove existing tabs or add your own in the {@link #config-items} config.\n * * Advanced: Reconfigure the whole editor widget using {@link #config-editorConfig} or replace the whole editor\n *   using {@link #config-editorClass}.\n *\n * This example shows a custom Task Editor configuration. The built-in \"Notes\" tab is hidden, a custom \"Files\" tab is\n * added, the \"General\" tab is renamed to \"Common\" and \"Custom\" field is appended to it. Double-click on a task bar to\n * start editing:\n *\n * {@inlineexample Gantt/feature/TaskEditCustom.js}\n *\n * To add extra items to a tab you need to specify {@link Core/widget/Container#config-items} for the tab container.\n * This example shows custom widgets added to \"General\" tab:\n *\n * {@inlineexample Gantt/feature/TaskEditExtraItems.js}\n *\n * {@region Expand to see Default tabs and fields}\n *\n * The {@link Gantt/widget/TaskEditor Task editor} contains tabs by default. Each tab is a container with built-in\n * widgets: text fields, grids, etc.\n *\n * | Tab ref           | Type                                                   | Text         | Weight | Description                                            |\n * |-------------------|--------------------------------------------------------|--------------|--------|--------------------------------------------------------|\n * | `generalTab`      | {@link SchedulerPro/widget/taskeditor/GeneralTab}      | General      | 100    | Name, start/end dates, duration, percent done, effort. |\n * | `predecessorsTab` | {@link SchedulerPro/widget/taskeditor/PredecessorsTab} | Predecessors | 200    | Grid with incoming dependencies                        |\n * | `successorsTab`   | {@link SchedulerPro/widget/taskeditor/SuccessorsTab}   | Successors   | 300    | Grid with outgoing dependencies                        |\n * | `resourcesTab`    | {@link SchedulerPro/widget/taskeditor/ResourcesTab}    | Resources    | 400    | Grid with assigned resources                           |\n * | `advancedTab`     | {@link SchedulerPro/widget/taskeditor/AdvancedTab}     | Advanced     | 500    | Assigned calendar, scheduling mode, constraints, etc.  |\n * | `notesTab`        | {@link SchedulerPro/widget/taskeditor/NotesTab}        | Notes        | 600    | Text area to add notes to the selected task            |\n *\n * ### General tab\n *\n * General tab contains widgets for basic configurations\n *\n * | Widget ref     | Type                                       | Text       | Weight | Description                                                |\n * |----------------|--------------------------------------------|------------|--------|------------------------------------------------------------|\n * | `name`         | {@link Core/widget/TextField}              | Name       | 100    | Task name                                                  |\n * | `percentDone`  | {@link Core/widget/NumberField}            | % Complete | 200    | Shows what part of task is done already in percentage      |\n * | `effort`       | {@link SchedulerPro/widget/EffortField}    | Effort     | 300    | Amount of working time required to complete the whole task |\n * | `divider`      | {@link Core/widget/Widget}                 |            | 400    | Visual splitter between 2 groups of fields                 |\n * | `startDate`    | {@link SchedulerPro/widget/StartDateField} | Start      | 500    | Shows when the task begins                                 |\n * | `endDate`      | {@link SchedulerPro/widget/EndDateField}   | Finish     | 600    | Shows when the task ends                                   |\n * | `duration`     | {@link Core/widget/DurationField}          | Duration   | 700    | Shows how long the task is                                 |\n * | `colorField` \u00B9 | {@link Scheduler.widget.EventColorField}   | Color \u00B9    | 800    | Choose background color for the task bar                   |\n *\n * **\u00B9** Set the {@link Gantt.view.GanttBase#config-showTaskColorPickers} config to `true` to enable this field\n *\n * ### Predecessors tab\n *\n * Predecessors tab contains a grid with incoming dependencies and controls to remove/add dependencies\n *\n * | Widget ref | Type                        | Weight | Description                                                      |\n * |------------|-----------------------------|--------|------------------------------------------------------------------|\n * | `grid`     | {@link Grid/view/Grid}      | 100    | Predecessors task name, dependency type and lag                  |\n * | `toolbar`  | {@link Core/widget/Toolbar} | 200    | Control buttons                                                  |\n * | \\>`add`    | {@link Core/widget/Button}  | 210    | Adds a new predecessor, select task using the name column editor |\n * | \\>`remove` | {@link Core/widget/Button}  | 220    | Removes selected incoming dependency                             |\n *\n * \\> - nested items\n *\n * ### Successors tab\n *\n * Successors tab contains a grid with outgoing dependencies and controls to remove/add dependencies\n *\n * | Widget ref | Type                        | Weight | Description                                                    |\n * |------------|-----------------------------|--------|----------------------------------------------------------------|\n * | `grid`     | {@link Grid/view/Grid}      | 100    | Successors task name, dependency type and lag                  |\n * | `toolbar`  | {@link Core/widget/Toolbar} | 200    | Control buttons                                                |\n * | \\>`add`    | {@link Core/widget/Button}  | 210    | Adds a new successor, select task using the name column editor |\n * | \\>`remove` | {@link Core/widget/Button}  | 220    | Removes selected outgoing dependency                           |\n *\n * \\> - nested items\n *\n * ### Resources tab\n *\n * Resources tab contains a grid with assignments\n *\n * | Widget ref | Type                        | Weight | Description                                                                                                            |\n * |------------|-----------------------------|--------|------------------------------------------------------------------------------------------------------------------------|\n * | `grid`     | {@link Grid/view/Grid}      | 100    | Assignments resource name and units (100 means that the assigned resource spends 100% of its working time to the task) |\n * | `toolbar`  | {@link Core/widget/Toolbar} | 200    | Shows control buttons                                                                                                  |\n * | \\>`add`    | {@link Core/widget/Button}  | 210    | Adds a dummy assignment, select resource using the name column editor                                                  |\n * | \\>`remove` | {@link Core/widget/Button}  | 220    | Removes selected assignment                                                                                            |\n *\n * \\> - nested items\n *\n * ### Advanced tab\n *\n * Advanced tab contains additional task scheduling options\n *\n * | Widget ref                    | Type                                             | Weight | Description                                                                                                                  |\n * |-------------------------------|--------------------------------------------------|--------|------------------------------------------------------------------------------------------------------------------------------|\n * | `calendarField`               | {@link Core/widget/Combo}                        | 100    | Shows a list of available calendars for this task                                                                            |\n * | `manuallyScheduledField`      | {@link Core/widget/Checkbox}                     | 200    | If checked, the task is not considered in scheduling                                                                         |\n * | `schedulingModeField`         | {@link SchedulerPro/widget/SchedulingModePicker} | 300    | Shows a list of available scheduling modes for this task                                                                     |\n * | `effortDrivenField`           | {@link Core/widget/Checkbox}                     | 400    | If checked, the effort of the task is kept intact, and the duration is updated. Works when scheduling mode is \"Fixed Units\". |\n * | `divider`                     | {@link Core/widget/Widget}                       | 500    | Visual splitter between 2 groups of fields                                                                                   |\n * | `constraintTypeField`         | {@link SchedulerPro/widget/ConstraintTypePicker} | 600    | Shows a list of available constraints for this task                                                                          |\n * | `constraintDateField`         | {@link Core/widget/DateField}                    | 700    | Shows a date for the selected constraint type                                                                                |\n * | `rollupField`                 | {@link Core/widget/Checkbox}                     | 800    | If checked, shows a bar below the parent task. Works when the \"Rollup\" feature is enabled.                                   |\n * | `inactiveField`               | {@link Core/widget/Checkbox}                     | 900    | Allows to inactivate the task so it won't take part in the scheduling process.                                               |\n * | `ignoreResourceCalendarField` | {@link Core/widget/Checkbox}                     | 1000   | If checked the task ignores the assigned resource calendars when scheduling                                                  |\n *\n * ### Notes tab\n *\n * Notes tab contains a text area to show notes\n *\n * | Field ref   | Type                              | Weight | Description                                     |\n * |-------------|-----------------------------------|--------|-------------------------------------------------|\n * | `noteField` | {@link Core/widget/TextAreaField} | 100    | Shows a text area to add text notes to the task |\n *\n * {@endregion}\n *\n * ## Removing a built-in item\n *\n * To remove a built-in tab or widget, specify its `ref` as `false` in the {@link #config-items} config:\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         taskEdit : {\n *             items : {\n *                 generalTab      : {\n *                     items : {\n *                         // Remove \"% Complete\",\"Effort\", and the divider in the \"General\" tab\n *                         percentDone : false,\n *                         effort      : false,\n *                         divider     : false\n *                     }\n *                 },\n *                 // Remove all tabs except the \"General\" tab\n *                 notesTab        : false,\n *                 predecessorsTab : false,\n *                 successorsTab   : false,\n *                 resourcesTab    : false,\n *                 advancedTab     : false\n *             }\n *         }\n *     }\n * })\n * ```\n *\n * The built-in buttons are:\n *\n * | Widget ref     | Type                       | Weight | Description                             |\n * |----------------|----------------------------|--------|-----------------------------------------|\n * | `saveButton`   | {@link Core/widget/Button} | 100    | Save event button on the bbar           |\n * | `deleteButton` | {@link Core/widget/Button} | 200    | Delete event button on the bbar         |\n * | `cancelButton` | {@link Core/widget/Button} | 300    | Cancel event editing button on the bbar |\n *\n * Bottom buttons may be hidden using `bbar` config passed to `editorConfig`:\n *\n* ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         taskEdit : {\n *             editorConfig : {\n *                 bbar : {\n *                     items : {\n *                         deleteButton : false\n *                     }\n *                 }\n *             }\n *         }\n *     }\n * })\n * ```\n *\n * ## Customizing a built-in item\n *\n * To customize a built-in tab or field, use its `ref` as the key in the {@link #config-items} config and specify the configs you want\n * to change (they will be merged with the tabs or fields default configs correspondingly):\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         taskEdit : {\n *             items : {\n *                 generalTab      : {\n *                     // Rename \"General\" tab\n *                     title : 'Main',\n *                     items : {\n *                         // Rename \"% Complete\" field\n *                         percentDone : {\n *                             label : 'Status'\n *                         }\n *                     }\n *                 }\n *             }\n *         }\n *     }\n * })\n * ```\n *\n * ## Adding a custom item\n *\n * To add a custom tab or field, add an entry to the {@link #config-items} config. When you add a field,\n * the `name` property links the input field to a field in the loaded task record:\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         taskEdit : {\n *             items : {\n *                 generalTab : {\n *                     items : {\n *                         // Add new field to the last position\n *                         newGeneralField : {\n *                             type   : 'textfield',\n *                             weight : 710,\n *                             label  : 'New field in General Tab',\n *                             // Name of the field matches data field name, so value is loaded/saved automatically\n *                             name   : 'custom'\n *                         }\n *                     }\n *                 },\n *                 // Add a custom tab to the first position\n *                 newTab     : {\n *                     // Tab is a FormTab by default\n *                     title  : 'New tab',\n *                     weight : 90,\n *                     items  : {\n *                         newTabField : {\n *                             type   : 'textfield',\n *                             weight : 710,\n *                             label  : 'New field in New Tab',\n *                             // Name of the field matches data field name, so value is loaded/saved automatically.\n *                             // In this case it is equal to the Task \"name\" field.\n *                             name   : 'name'\n *                         }\n *                     }\n *                 }\n *             }\n *         }\n *     }\n * })\n * ```\n *\n * To turn off the Task Editor just simple disable the feature.\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         taskEdit : false\n *     }\n * })\n * ```\n *\n * For more info on customizing the Task Editor, please see Guides/Customization/Customize task editor\n *\n * This feature is **enabled** by default.\n *\n * @extends SchedulerPro/feature/TaskEdit\n * @demo Gantt/taskeditor\n * @classtype taskEdit\n * @feature\n *\n * @typings SchedulerPro.feature.TaskEdit -> SchedulerPro.feature.SchedulerProTaskEdit\n */\nexport default class TaskEdit extends SchedulerProTaskEdit {\n    static get $name() {\n        return 'TaskEdit';\n    }\n    static configurable = {\n        /**\n         * The event that shall trigger showing the editor. Set to `` or null to disable editing of existing events.\n         * @config {String|null}\n         * @default\n         * @category Editor\n         */\n        triggerEvent : 'taskdblclick',\n        saveAndCloseOnEnter : true,\n        /**\n         * Class to use as the editor. By default it uses {@link Gantt.widget.TaskEditor}\n         * @config {Core.widget.Widget}\n         * @typings {typeof Widget}\n         * @category Editor\n         */\n        editorClass : TaskEditor\n    };\n    static get pluginConfig() {\n        return {\n            chain  : ['populateTaskMenu', 'onTaskEnterKey'],\n            assign : ['editTask']\n        };\n    }\n    /**\n     * Shows a {@link Gantt/widget/TaskEditor} to edit the passed task. This function is exposed on\n     * the Gantt instance and can be called as `gantt.editTask()`.\n     * @param {Gantt.model.TaskModel} taskRecord Task to edit\n     * @param {HTMLElement} [element] The task element\n     * @returns {Promise} Promise which resolves after the editor is shown\n     * @on-owner\n     * @async\n     */\n    editTask(taskRecord, element) {\n        return this.editEvent(taskRecord, null, element);\n    }\n    onActivateEditor({ taskRecord, taskElement }) {\n        this.editTask(taskRecord, taskElement);\n    }\n    getElementFromTaskRecord(taskRecord) {\n        return this.client.getElementFromTaskRecord(taskRecord);\n    }\n    onTaskEnterKey({ taskRecord }) {\n        this.editTask(taskRecord);\n    }\n    //region Context menu\n    populateTaskMenu({ taskRecord, selection, items }) {\n        // Task without project is transient record in a display store and not meant to be manipulated\n        if (!this.client.readOnly && selection.length <= 1 && taskRecord.project) {\n            items.editTask = {\n                text        : 'L{Gantt.Edit}',\n                localeClass : this.client,\n                cls         : 'b-separator',\n                icon        : 'b-icon b-icon-edit',\n                weight      : 100,\n                disabled    : this.disabled || taskRecord.readOnly,\n                onItem      : () => this.editTask(taskRecord)\n            };\n        }\n    }\n    //endregion\n    onEventEnterKey({ taskRecord, target }) {\n        this.editTask(taskRecord);\n    }\n    scrollTaskIntoView(taskRecord) {\n        return this.scrollEventIntoView(taskRecord);\n    }\n    scrollEventIntoView(eventRecord) {\n        return this.client.scrollTaskIntoView(eventRecord);\n    }\n}\nTaskEdit._$name = 'TaskEdit'; GridFeatureManager.registerFeature(TaskEdit, true, 'Gantt');\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport EventMenu from '../../Scheduler/feature/EventMenu.js';\nimport Objects from '../../Core/helper/util/Objects.js';\n/**\n * @module Gantt/feature/TaskMenu\n */\n/**\n * Displays a context menu for tasks. Items are populated by other features and/or application code.\n * Configure it with `false` to disable it completely. If enabled, {@link Grid.feature.CellMenu} feature\n * is not available. Cell context menu items are handled by this feature.\n *\n * ## Default task menu items\n *\n * Here is the list of menu items provided by the Task menu feature and populated by the other features:\n *\n * | Reference                       | Text                 | Weight | Feature                                    | Description                                                                                                      |\n * |---------------------------------|----------------------|--------|--------------------------------------------|------------------------------------------------------------------------------------------------------------------|\n * | `editTask`                      | Edit task            | 100    | {@link Gantt.feature.TaskEdit}             | Edit the task                                                                                                    |\n * | `cut`                           | Cut task             | 110    | {@link Gantt.feature.TaskCopyPaste}        | Cut the task                                                                                                     |\n * | `copy`                          | Copy task            | 120    | {@link Gantt.feature.TaskCopyPaste}        | Copy the task                                                                                                    |\n * | `paste`                         | Paste task           | 130    | {@link Gantt.feature.TaskCopyPaste}        | Paste the task                                                                                                   |\n * | `search`*                       | Search for value     | 200    | {@link Grid.feature.Search}                | Search for cell text                                                                                             |\n * | `filterMenu`                    | Filter               | 400    | {@link Grid/feature/Filter}                | Shows a submenu to control filtering. See [Filter submenu](#Grid/feature/Filter#menu-items).                    |\n * | `add`                           | Add...               | 500    | *This feature*                             | Submenu for adding tasks                                                                                         |\n * | \\>`addTaskAbove`                | Task above           | 510    | *This feature*                             | Add a new task above the selected task                                                                           |\n * | \\>`addTaskBelow`                | Task below           | 520    | *This feature*                             | Add a new task below the selected task                                                                           |\n * | \\>`milestone`                   | Milestone            | 530    | *This feature*                             | Add a new milestone below the selected task                                                                      |\n * | \\>`subtask`                     | Subtask              | 540    | *This feature*                             | Add a new task as a child of the current, turning it into a parent                                               |\n * | \\>`successor`                   | Successor            | 550    | *This feature*                             | Add a new task below current task, linked using an \"Finish-to-Start\" dependency                                  |\n * | \\>`predecessor`                 | Predecessor          | 560    | *This feature*                             | Add a new task above current task, linked using an \"Finish-to-Start\" dependency                                  |\n * | `convertToMilestone`            | Convert to milestone | 600    | *This feature*                             | Turns the selected task into a milestone. Shown for leaf tasks only                                              |\n * | `splitTask`                     | Split task           | 650    | {@link SchedulerPro.feature.EventSegments} | Split the task                                                                                                   |\n * | `indent`                        | Indent               | 700    | *This feature*                             | Add the task as a child of its previous sibling, turning that task into a parent                                 |\n * | `outdent`                       | Outdent              | 800    | *This feature*                             | Turn the task into a sibling of its parent                                                                       |\n * | `deleteTask`                    | Delete task          | 900    | *This feature*                             | Remove the selected task                                                                                         |\n * | `linkTasks`                     | Add dependencies     | 1000   | *This feature*                             | Add dependencies between two or more selected tasks                                                              |\n * | `unlinkTasks`                   | Remove dependencies  | 1010   | *This feature*                             | Removes dependencies between selected tasks                                                                      |\n * | `taskColor` \u00B9                   | Color                | 1100   | *This feature*                             | Choose background color for the task bar                                                                         |\n *\n * **\u00B9** Set {@link Gantt.view.GanttBase#config-showTaskColorPickers} to true to enable this item\n *\n * \\* - items that are shown for the locked grid cells only\n *\n * \\> - first level of submenu\n *\n * ## Customizing the menu items\n *\n * The menu items in the Task menu can be customized, existing items can be changed or removed,\n * and new items can be added. This is handled using the `items` config of the feature.\n *\n * To add extra items for all events:\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         taskMenu : {\n *             // Extra items for all events\n *             items : {\n *                 flagTask : {\n *                     text : 'Extra',\n *                     icon : 'b-fa b-fa-fw b-fa-flag',\n *                     onItem({taskRecord}) {\n *                         taskRecord.flagged = true;\n *                     }\n *                 }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * ## Remove menu/submenu items\n *\n * Items can be removed from the menu:\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         taskMenu : {\n *             items : {\n *                 // Hide delete task option\n *                 deleteTask: false,\n *\n *                 // Hide item from the `add` submenu\n *                 add: {\n *                     menu: {\n *                          subtask: false\n *                     }\n *                 }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * ## Manipulate items for specific tasks\n *\n * Items can behave different depending on the type of the task:\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         taskMenu : {\n *             // Process items before menu is shown\n *             processItems({ items, taskRecord }) {\n *                  // Push an extra item for conferences\n *                  if (taskRecord.type === 'conference') {\n *                      items.showSessions = {\n *                          text : 'Show sessions',\n *                          ontItem({taskRecord}) {\n *                              // ...\n *                          }\n *                      };\n *                  }\n *\n *                  // Do not show menu for secret events\n *                  if (taskRecord.type === 'secret') {\n *                      return false;\n *                  }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * Full information of the menu customization can be found in the \"Customizing the Task menu\" guide.\n *\n * This feature is **enabled** by default\n *\n * {@inlineexample Gantt/feature/TaskMenu.js}\n *\n * @demo Gantt/taskmenu\n *\n * @extends Scheduler/feature/EventMenu\n * @classtype taskMenu\n * @feature\n */\nexport default class TaskMenu extends EventMenu {\n    //region Config\n    static get $name() {\n        return 'TaskMenu';\n    }\n    static get defaultConfig() {\n        return {\n            type : 'task',\n            /**\n             * A function called before displaying the menu that allows manipulations of its items.\n             * Returning `false` from this function prevents the menu being shown.\n             *\n             * ```javascript\n             * features         : {\n             *    taskMenu : {\n             *         processItems({ items, taskRecord }) {\n             *             // Add or hide existing items here as needed\n             *             items.myAction = {\n             *                 text   : 'Cool action',\n             *                 icon   : 'b-fa b-fa-fw b-fa-ban',\n             *                 onItem : () => console.log(`Clicked ${eventRecord.name}`),\n             *                 weight : 1000 // Move to end\n             *             };\n             *\n             *            if (!eventRecord.allowDelete) {\n             *                 items.deleteEvent.hidden = true;\n             *             }\n             *         }\n             *     }\n             * },\n             * ```\n             *\n             * @config {Function}\n             * @param {Object} context An object with information about the menu being shown\n             * @param {Gantt.model.TaskModel} context.taskRecord The record representing the current task\n             * @param {Grid.column.Column} context.column The current column\n             * @param {Object<String,MenuItemConfig|Boolean>} context.items An object containing the\n             *   {@link Core.widget.MenuItem menu item} configs keyed by their id\n             * @param {Event} context.event The DOM event object that triggered the show\n             * @returns {Boolean|null} Returning `false` from this function prevents the menu being shown\n             * @preventable\n             */\n            processItems : null\n            /**\n             * This is a preconfigured set of items used to create the default context menu.\n             *\n             * ```javascript\n             * const gantt = new Gantt({\n             *     features : {\n             *         taskMenu : {\n             *             items : {\n             *                 add                 : false,\n             *                 convertToMilestone  : false\n             *             }\n             *         }\n             *     }\n             * });\n             * ```\n             * The `items` provided by this feature are listed below. These are the property names which you may\n             * configure:\n             *\n             * - `add` A submenu option containing a `menu` config which contains the following named items:\n             *     * `addTaskAbove` Inserts a sibling task above the context task.\n             *     * `addTaskBelow` Inserts a sibling task below the context task.\n             *     * `milestone` Inserts a sibling milestone below the context task.\n             *     * `subtask` Appends a child task to the context task. This menu supports an \"at\" property that\n             *       can be set to 'end' to append new tasks to the end of the parent task's children. By default,\n             *       (at = 'start'), new subtasks are inserted as the firstChild of the parent task.\n             *     * `successor` Adds a sibling task linked by a dependence below the context task.\n             *     * `predecessor` Adds a sibling task linked by a dependence above the context task.\n             *  - `deleteTask` Deletes the context task.\n             *  - `indent` Indents the context task by adding it as a child of its previous sibling.\n             *  - `outdent` Outdents the context task by adding it as the final sibling of its parent.\n             *  - `convertToMilestone` Converts the context task to a zero duration milestone.\n             *\n             * See the feature config in the above example for details.\n             *\n             * @config {Object<String,MenuItemConfig|Boolean|null>} items\n             */\n        };\n    }\n    static get pluginConfig() {\n        const config = super.pluginConfig;\n        config.chain.push('populateTaskMenu');\n        return config;\n    }\n    //endregion\n    construct(gantt, config = {}) {\n        super.construct(...arguments);\n        this.gantt = gantt;\n        if (gantt.features.cellMenu) {\n            console.warn('`CellMenu` feature is ignored, when `TaskMenu` feature is enabled. If you need cell specific menu items, please configure `TaskMenu` feature items instead.');\n            gantt.features.cellMenu.disabled = true;\n        }\n    }\n    //region Events\n    /**\n     * This event fires on the owning Gantt before the context menu is shown for a task. Allows manipulation of the items\n     * to show in the same way as in `processItems`. Returning false from a listener prevents the menu from\n     * being shown.\n     * @event taskMenuBeforeShow\n     * @on-owner\n     * @preventable\n     * @param {Gantt.view.Gantt} source\n     * @param {MenuItemConfig[]} items Menu item configs\n     * @param {Gantt.model.TaskModel} taskRecord Event record for which the menu was triggered\n     * @param {HTMLElement} taskElement\n     */\n    /**\n     * This event fires on the owning Gantt when an item is selected in the context menu.\n     * @event taskMenuItem\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {Core.widget.MenuItem} item\n     * @param {Gantt.model.TaskModel} taskRecord\n     * @param {HTMLElement} taskElement\n     */\n    /**\n     * This event fires on the owning Gantt after showing the context menu for an event\n     * @event taskMenuShow\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {Core.widget.Menu} menu The menu\n     * @param {Gantt.model.TaskModel} taskRecord Event record for which the menu was triggered\n     * @param {HTMLElement} taskElement\n     */\n    //endregion\n    getDataFromEvent(event) {\n        const\n            { client }    = this,\n            targetElement = this.getTargetElementFromEvent(event),\n            // to resolve record from a task element or from a grid cell\n            taskRecord    = client.resolveTaskRecord(targetElement) || client.getRecordFromElement(targetElement),\n            taskElement   = taskRecord && client.getElementFromTaskRecord(taskRecord, false); // get wrapper;\n        return Objects.assign({\n            event,\n            targetElement,\n            taskElement,\n            taskRecord\n        }, client.getCellDataFromEvent(event));\n    }\n    callChainablePopulateMenuMethod(eventParams) {\n        // When context menu is called for a task cell, need to collect items from features\n        // which usually add items to CellMenu in Grid and Scheduler,\n        // since CellMenu feature is disabled when TaskMenu feature is enabled.\n        if (eventParams.cellData && this.client.populateCellMenu) {\n            this.client.populateCellMenu(eventParams);\n        }\n        super.callChainablePopulateMenuMethod(...arguments);\n    }\n    shouldShowMenu(eventParams) {\n        const { column } = eventParams;\n        return eventParams.taskRecord && (!column || column.enableCellContextMenu !== false);\n    }\n    getElementFromRecord(record) {\n        return this.client.getElementFromTaskRecord(record);\n    }\n    populateTaskMenu({ items, column, selection, taskRecord }) {\n        const\n            { client }    = this,\n            {\n                isTreeGrouped,\n                usesDisplayStore\n            }             = client,\n            // Context menu on the selection offers multi actions on the selection.\n            // Context menu on a non-selected record offers single actions on the context record.\n            multiSelected = selection.includes(taskRecord) && selection.length > 1;\n        items.add                = {\n            disabled : client.readOnly || isTreeGrouped || usesDisplayStore,\n            hidden   : multiSelected\n        };\n        items.convertToMilestone = {\n            disabled : client.readOnly || taskRecord.readOnly,\n            hidden   : taskRecord.isParent || taskRecord.milestone\n        };\n        items.indent             = {\n            disabled : client.readOnly || !taskRecord.previousSibling || taskRecord.readOnly || isTreeGrouped || usesDisplayStore\n        };\n        items.outdent            = {\n            disabled : client.readOnly || taskRecord.parent === client.taskStore.rootNode || taskRecord.readOnly || isTreeGrouped || usesDisplayStore\n        };\n        items.deleteTask         = {\n            disabled : client.readOnly || taskRecord.readOnly\n        };\n        items.linkTasks          = {\n            disabled : !multiSelected\n        };\n        items.unlinkTasks        = {\n            disabled : items.linkTasks.disabled\n        };\n        // TaskMenu feature is responsible for cell items\n        if (column?.cellMenuItems) {\n            Objects.merge(items, column.cellMenuItems);\n        }\n        if (client.showTaskColorPickers) {\n            items.taskColor = {\n                disabled : client.readOnly || taskRecord.readOnly\n            };\n        }\n        else {\n            items.taskColor = {\n                hidden : true\n            };\n        }\n    }\n    populateItemsWithData({ items, taskRecord }) {\n        super.populateItemsWithData(...arguments);\n        if (this.client.showTaskColorPickers && items.taskColor?.menu) {\n            Objects.merge(items.taskColor.menu.colorMenu, {\n                value  : taskRecord.eventColor,\n                record : taskRecord\n            });\n        }\n    }\n    // This generates the fixed, unchanging part of the items and is only called once\n    // to generate the baseItems of the feature.\n    // The dynamic parts which are set by populateEventMenu have this merged into them.\n    changeItems(items) {\n        const { client } = this;\n        return Objects.merge({\n            add : {\n                text   : 'L{Gantt.Add}',\n                cls    : 'b-separator',\n                icon   : 'b-icon-add',\n                weight : 500,\n                menu   : {\n                    addTaskAbove : {\n                        text   : 'L{Gantt.Task above}',\n                        weight : 510,\n                        icon   : 'b-icon-up',\n                        onItem({ taskRecord }) {\n                            client.addTaskAbove(taskRecord);\n                        }\n                    },\n                    addTaskBelow : {\n                        text   : 'L{Gantt.Task below}',\n                        weight : 520,\n                        icon   : 'b-icon-down',\n                        onItem({ taskRecord }) {\n                            client.addTaskBelow(taskRecord);\n                        }\n                    },\n                    milestone : {\n                        text   : 'L{Gantt.Milestone}',\n                        weight : 530,\n                        icon   : 'b-icon-milestone',\n                        onItem({ taskRecord }) {\n                            client.addMilestoneBelow(taskRecord);\n                        }\n                    },\n                    subtask : {\n                        text   : 'L{Gantt.Sub-task}',\n                        weight : 540,\n                        icon   : 'b-icon-subtask',\n                        at     : 'start',\n                        onItem({ taskRecord }) {\n                            client.addSubtask(taskRecord, { at : this.at });\n                        }\n                    },\n                    successor : {\n                        text   : 'L{Gantt.Successor}',\n                        weight : 550,\n                        icon   : 'b-icon-successor',\n                        onItem({ taskRecord }) {\n                            client.addSuccessor(taskRecord);\n                        }\n                    },\n                    predecessor : {\n                        text   : 'L{Gantt.Predecessor}',\n                        weight : 560,\n                        icon   : 'b-icon-predecessor',\n                        onItem({ taskRecord }) {\n                            client.addPredecessor(taskRecord);\n                        }\n                    }\n                }\n            },\n            convertToMilestone : {\n                icon   : 'b-icon-milestone',\n                text   : 'L{Gantt.Convert to milestone}',\n                weight : 600,\n                onItem({ taskRecord }) {\n                    taskRecord.convertToMilestone();\n                }\n            },\n            indent : {\n                text      : 'L{Gantt.Indent}',\n                icon      : 'b-icon-indent',\n                weight    : 700,\n                separator : true,\n                onItem({ selection, taskRecord }) {\n                    // Context menu on the selection offers multi actions on the selection.\n                    // Context menu on a non-selected record offers single actions on the context record.\n                    client.indent(selection.includes(taskRecord) ? selection : taskRecord);\n                }\n            },\n            outdent : {\n                text   : 'L{Gantt.Outdent}',\n                icon   : 'b-icon-outdent',\n                weight : 800,\n                onItem({ selection, taskRecord }) {\n                    // Context menu on the selection offers multi actions on the selection.\n                    client.outdent(selection.includes(taskRecord) ? selection : taskRecord);\n                }\n            },\n            deleteTask : {\n                text   : 'L{Gantt.Delete task}',\n                icon   : 'b-icon-trash',\n                cls    : 'b-separator',\n                weight : 900,\n                onItem({ selection, taskRecord }) {\n                    // Context menu on the selection offers multi actions on the selection.\n                    // Context menu on a non-selected record offers single actions on the context record.\n                    client.store.remove(selection.includes(taskRecord) ? selection : taskRecord);\n                }\n            },\n            linkTasks : {\n                text   : 'L{Gantt.linkTasks}',\n                icon   : 'b-icon-link',\n                cls    : 'b-separator',\n                weight : 1000,\n                onItem({ selection }) {\n                    client.store.linkTasks(selection);\n                }\n            },\n            unlinkTasks : {\n                text   : 'L{Gantt.unlinkTasks}',\n                icon   : 'b-icon-unlink',\n                weight : 1010,\n                onItem({ selection }) {\n                    client.store.unlinkTasks(selection);\n                }\n            },\n            taskColor : {\n                text : 'L{Gantt.color}',\n                icon : 'b-icon-palette',\n                menu : {\n                    colorMenu : {\n                        type : 'eventcolorpicker'\n                    }\n                },\n                separator : true,\n                weight    : 1100\n            }\n        }, items);\n    }\n}\nTaskMenu.featureClass = '';\nTaskMenu._$name = 'TaskMenu'; GridFeatureManager.registerFeature(TaskMenu, true, 'Gantt');\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport AttachToProjectMixin from '../../Scheduler/data/mixin/AttachToProjectMixin.js';\nimport Tooltip from '../../Core/widget/Tooltip.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport EventHelper from '../../Core/helper/EventHelper.js';\nconst casedEventName = {\n    click       : 'Click',\n    dblclick    : 'DblClick',\n    contextmenu : 'ContextMenu'\n};\n/**\n * @module Gantt/feature/TaskNonWorkingTime\n */\n/**\n * Feature highlighting the non-working time intervals for tasks, based on their {@link Gantt.model.TaskModel#field-calendar}.\n * If a task has no calendar defined, the project's calendar will be used. The non-working time interval can also be\n * recurring. You can find a live example showing how to achieve this in the [Task Calendars Demo](../examples/calendars/).\n *\n * {@inlineexample Gantt/feature/TaskNonWorkingTime.js}\n *\n * The demo above shows the default `row` mode, but the feature also supports a `bar` {@link #config-mode} that shades\n * parts of the task bars:\n *\n * {@inlineexample Gantt/feature/TaskNonWorkingTimeBar.js}\n *\n * If you want a tooltip to be displayed when hovering over the non-working time interval, you can configure a\n * {@link #config-tooltipTemplate}.\n *\n * ## Data structure\n * Below you see an example of data defining calendars and assigning the tasks a calendar:\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         taskNonWorkingTime : true\n *     },\n *\n *     // A Project holding the data and the calculation engine for the Gantt. It also acts as a CrudManager, allowing\n *     project   : {\n *         tasksData : [\n *             { id : 1, name : 'Task 1' },\n *             { id : 2, name : 'Task 2', calendar : 'break' }\n *         ],\n *         calendarsData : [\n *             {\n *                 id        : 'general',\n *                 name      : 'General',\n *                 intervals : [\n *                     {\n *                         recurrentStartDate : 'on Sat at 0:00',\n *                         recurrentEndDate   : 'on Mon at 0:00',\n *                         isWorking          : false\n *                     }\n *                 ]\n *             },\n *             {\n *                 id        : 'break',\n *                 name      : 'Breaks',\n *                 intervals : [\n *                     {\n *                         startDate : '2022-08-07',\n *                         endDate   : '2022-08-11',\n *                         isWorking : false\n *                     },\n *                     {\n *                         startDate : '2022-08-18',\n *                         endDate   : '2022-08-20',\n *                         isWorking : false\n *                     }\n *                 ]\n *             }\n *         ]\n *     }\n * }):\n * ```\n *\n * ## Styling non-working time interval elements\n *\n * To style the elements representing the non-working time elements you can set the {@link SchedulerPro.model.CalendarModel#field-cls}\n * field in your data. This will add a CSS class to all non-working time elements for the calendar. You can also add an\n * {@link SchedulerPro.model.CalendarModel#field-iconCls} value specifying an icon to display inside the interval.\n *\n * ```javascript\n * {\n *   \"success\"   : true,\n *   \"calendars\" : {\n *       \"rows\" : [\n *           {\n *               \"id\"                       : \"day\",\n *               \"name\"                     : \"Day shift\",\n *               \"unspecifiedTimeIsWorking\" : false,\n *               \"cls\"                      : \"dayshift\",\n *               \"intervals\"                : [\n *                   {\n *                       \"recurrentStartDate\" : \"at 8:00\",\n *                       \"recurrentEndDate\"   : \"at 17:00\",\n *                       \"isWorking\"          : true\n *                   }\n *               ]\n *           }\n *       ]\n *    }\n * }\n * ```\n *\n * You can also add a `cls` value and an `iconCls` to **individual** intervals:\n *\n * ```javascript\n * {\n *   \"success\"   : true,\n *   \"calendars\" : {\n *       \"rows\" : [\n *           {\n *               \"id\"                       : \"day\",\n *               \"name\"                     : \"Day shift\",\n *               \"unspecifiedTimeIsWorking\" : true,\n *               \"intervals\"                : [\n *                   {\n *                      \"startDate\"          : \"2022-03-23T02:00\",\n *                      \"endDate\"            : \"2022-03-23T04:00\",\n *                      \"isWorking\"          : false,\n *                      \"cls\"                : \"factoryShutdown\",\n *                      \"iconCls\"            : \"warningIcon\"\n *                  }\n *               ]\n *           }\n *       ]\n *    }\n * }\n * ```\n *\n * This feature is **disabled** by default.\n * For info on enabling it, see {@link Grid.view.mixin.GridFeatures}.\n *\n * @extends Core/mixin/InstancePlugin\n * @demo Gantt/calendars\n * @classtype taskNonWorkingTime\n * @feature\n */\nexport default class TaskNonWorkingTime extends InstancePlugin.mixin(AttachToProjectMixin) {\n    /**\n     * Triggered when clicking a nonworking time element\n     * @event taskNonWorkingTimeClick\n     * @param {Gantt.view.Gantt} source The Gantt chart instance\n     * @param {Gantt.model.TaskModel} taskRecord Task record\n     * @param {Object} interval The raw data describing the nonworking time interval\n     * @param {String} interval.name The interval name (if any)\n     * @param {Date} interval.startDate The interval start date\n     * @param {Date} interval.endDate The interval end date\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n    /**\n     * Triggered when double-clicking a nonworking time element\n     * @event taskNonWorkingTimeDblClick\n     * @param {Gantt.view.Gantt} source The Gantt chart instance\n     * @param {Gantt.model.TaskModel} taskRecord Task record\n     * @param {Object} interval The raw data describing the nonworking time interval\n     * @param {String} interval.name The interval name (if any)\n     * @param {Date} interval.startDate The interval start date\n     * @param {Date} interval.endDate The interval end date\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n    /**\n     * Triggered when right-clicking a nonworking time element\n     * @event taskNonWorkingTimeContextMenu\n     * @param {Gantt.view.Gantt} source The Gantt chart instance\n     * @param {Gantt.model.TaskModel} taskRecord Task record\n     * @param {Object} interval The raw data describing the nonworking time interval\n     * @param {String} interval.name The interval name (if any)\n     * @param {Date} interval.startDate The interval start date\n     * @param {Date} interval.endDate The interval end date\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n    //region Config\n    static $name = 'TaskNonWorkingTime';\n    static configurable = {\n        idPrefix : 'TaskNonWorkingTime',\n        /**\n         * The largest time axis unit to display non working ranges for ('hour' or 'day' etc).\n         * When zooming to a view with a larger unit, no non-working time elements will be rendered.\n         *\n         * **Note:** Be careful with setting this config to big units like 'year'. When doing this,\n         * make sure the timeline {@link Scheduler.view.TimelineBase#config-startDate start} and\n         * {@link Scheduler.view.TimelineBase#config-endDate end} dates are set tightly.\n         * When using a long range (for example many years) with non-working time elements rendered per hour,\n         * you will end up with millions of elements, impacting performance.\n         * When zooming, use the {@link Scheduler.view.mixin.TimelineZoomable#config-zoomKeepsOriginalTimespan} config.\n         * @config {String}\n         * @default\n         */\n        maxTimeAxisUnit : 'week',\n        /**\n         * A template function used to generate contents for a tooltip when hovering non-working time intervals\n         * ```javascript\n         * const gantt = new Gantt({\n         *     features : {\n         *         taskNonWorkingTime : {\n         *             tooltipTemplate({ taskRecord, startDate, endDate }) {\n         *                 return 'Non-working time';\n         *             }\n         *         }\n         *     ]\n         * });\n         * ```\n         * @config {Function} tooltipTemplate\n         * @param {Object} data Tooltip data\n         * @param {Gantt.model.TaskModel} data.taskRecord The taskRecord\n         * @param {Date} data.startDate The start date of the-non working interval\n         * @param {Date} data.endDate The end date of the non-working interval\n         * @param {String} data.name The name of the non-working interval\n         * @param {String} data.cls The cls of the non-working interval\n         * @param {String} data.iconCls The iconCls of the non-working interval\n         * @returns {String|DomConfig|DomConfig[]}\n         */\n        tooltipTemplate : null,\n        tooltip : {},\n        /**\n         * Rendering mode, one of:\n         * - 'row' - renders non-working time intervals to the task row\n         * - 'bar' - renders non-working time intervals inside the task bar\n         * - 'both - combines 'row' and 'bar' rendering modes\n         * @prp {'row'|'bar'|'both'}\n         */\n        mode : 'row'\n    };\n    // Cannot use `static properties = {}`, new Map/Set would pollute the prototype\n    static get properties() {\n        return {\n            rowMap  : new Map(),\n            taskMap : new Map()\n        };\n    };\n    static pluginConfig = {\n        chain : ['onTaskDataGenerated', 'onInternalPaint']\n    };\n    // No feature based styling needed, do not add a cls to Scheduler\n    static featureClass = '';\n    //endregion\n    //region Init\n    construct() {\n        super.construct(...arguments);\n        const\n            me         = this,\n            { client } = me;\n        client.timeAxis.ion({\n            name        : 'timeAxis',\n            reconfigure : 'onTimeAxisReconfigure',\n            // should trigger before event rendering chain\n            prio        : 100,\n            thisObj     : me\n        });\n        client.timeAxisViewModel.ion({\n            name    : 'timeAxisViewModel',\n            update  : 'onTimeAxisReconfigure',\n            // should trigger before event rendering chain\n            prio    : 100,\n            thisObj : me\n        });\n        client.ion({\n            beforeToggleNode : 'clear',\n            thisObj          : me\n        });\n    }\n    attachToProject(project) {\n        super.attachToProject(project);\n        project.ion({\n            name    : 'project',\n            refresh : 'onProjectRefresh',\n            prio    : 100,\n            thisObj : this\n        });\n    }\n    attachToEventStore(store) {\n        super.attachToEventStore(store);\n        store.ion({\n            name    : 'eventStore',\n            filter  : 'clear',\n            thisObj : this\n        });\n    }\n    onProjectRefresh() {\n        this.clear();\n    }\n    onInternalPaint({ firstPaint }) {\n        if (firstPaint) {\n            this.mouseEventsDetacher = EventHelper.on({\n                element     : this.client.foregroundCanvas,\n                delegate    : '.b-tasknonworkingtime',\n                click       : 'handleMouseEvent',\n                dblclick    : 'handleMouseEvent',\n                contextmenu : 'handleMouseEvent',\n                thisObj     : this\n            });\n        }\n    }\n    doDisable(disable) {\n        super.doDisable(disable);\n        this.clear();\n        this.client.refresh();\n    }\n    updateMode() {\n        if (!this.isConfiguring) {\n            this.clear();\n            this.client.refresh();\n        }\n    }\n    clear() {\n        this.taskMap.clear();\n        this.rowMap.clear();\n    }\n    //endregion\n    //region Events\n    onTimeAxisReconfigure() {\n        this.clear();\n    }\n    //endregion\n    //region Rendering\n    // Called on render of resources events to get events to render. Add any ranges\n    // (chained function from Scheduler)\n    onTaskDataGenerated(renderData) {\n        if (!renderData.task.effectiveVisualCalendar) {\n            return;\n        }\n        if (this.mode !== 'bar') {\n            const calendarIntervals = this.getCalendarIntervalsToRender(renderData, false);\n            // Convert indicator timespans to DOMConfigs for rendering\n            renderData.extraConfigs.push(...calendarIntervals);\n        }\n        if (this.mode !== 'row') {\n            const calendarIntervals = this.getCalendarIntervalsToRender(renderData, true);\n            renderData.children.push(...calendarIntervals);\n        }\n    }\n    getCalendarIntervalsToRender(renderData, barMode = false) {\n        const\n            me           = this,\n            {\n                rowMap,\n                taskMap,\n                client\n            }            = me,\n            { timeAxis } = client,\n            { task }     = renderData,\n            intervals    = [],\n            shouldPaint  = !me.maxTimeAxisUnit || DateHelper.compareUnits(timeAxis.unit, me.maxTimeAxisUnit) <= 0,\n            map          = barMode ? taskMap : rowMap;\n        if (!me.disabled && shouldPaint) {\n            const oneTickMs = timeAxis.first.durationMS;\n            if (!map.has(task.id)) {\n                const\n                    calendar   = task.effectiveVisualCalendar,\n                    // In bar mode we only care about intervals fitting in the task, while in row mode we care about\n                    // all intervals\n                    ranges     = (!barMode || task.isScheduled) ? calendar.getNonWorkingTimeRanges(\n                        barMode ? task.startDate : client.startDate,\n                        barMode ? task.endDate : client.endDate\n                    ) : [],\n                    domConfigs = [];\n                for (let i = 0; i < ranges.length; i++) {\n                    const range = ranges[i];\n                    if (range.endDate - range.startDate >= oneTickMs) {\n                        domConfigs.push(me.createIntervalDOMConfig({\n                            id           : `r${task.id}i${i}`,\n                            iconCls      : range.iconCls || calendar.iconCls || '',\n                            cls          : `${calendar.cls ? `${calendar.cls} ` : ''}${range.cls || ''}`,\n                            startDate    : range.startDate,\n                            endDate      : range.endDate,\n                            name         : range.name,\n                            isNonWorking : true\n                        }, renderData, barMode));\n                    }\n                }\n                map.set(task.id, domConfigs);\n            }\n            intervals.push(...ObjectHelper.clone(map.get(task.id)));\n        }\n        return intervals;\n    }\n    createIntervalDOMConfig(interval, renderData, barMode = false) {\n        const\n            { client : gantt } = this,\n            { taskRecord }     = renderData,\n            {\n                cls,\n                iconCls,\n                name,\n                startDate,\n                endDate\n            }                  = interval,\n            x                  = gantt.getCoordinateFromDate(startDate) - (barMode ? renderData.left : 0),\n            width              = gantt.getCoordinateFromDate(endDate) - x - (barMode ? renderData.left : 0),\n            top                = barMode ? null : gantt.store.indexOf(taskRecord) * gantt.rowManager.rowOffsetHeight,\n            height             = barMode ? null : gantt.rowHeight;\n        return {\n            className : {\n                'b-tasknonworkingtime' : 1,\n                [cls]                  : 1\n            },\n            style : {\n                left  : x,\n                top,\n                height,\n                // Crop to fit task's width in bar mode\n                width : barMode && width + x > renderData.width ? renderData.width - x : width\n            },\n            children : [\n                iconCls ? {\n                    tag       : 'i',\n                    className : iconCls\n                } : null,\n                name\n            ],\n            dataset : {\n                taskId : interval.id\n            },\n            elementData : {\n                taskRecord,\n                interval\n            }\n        };\n    }\n    //endregion\n    //region Tooltip\n    changeTooltip(tooltip, old) {\n        const me = this;\n        old?.destroy();\n        if (!me.tooltipTemplate || !tooltip) {\n            return null;\n        }\n        return Tooltip.new({\n            align          : 'b-t',\n            forSelector    : '.b-timelinebase:not(.b-eventeditor-editing):not(.b-resizing-event):not(.b-dragcreating):not(.b-dragging-event):not(.b-creating-dependency) .b-sch-foreground-canvas > .b-tasknonworkingtime',\n            forElement     : me.client.timeAxisSubGridElement,\n            showOnHover    : true,\n            hideDelay      : 0,\n            anchorToTarget : true,\n            trackMouse     : false,\n            getHtml        : ({ activeTarget }) => {\n                const\n                    {\n                        taskRecord,\n                        interval\n                    } = activeTarget.elementData;\n                return me.tooltipTemplate({ taskRecord, ...interval });\n            }\n        }, tooltip);\n    }\n    //endregion\n    handleMouseEvent(domEvent) {\n        const\n            me                       = this,\n            target                   = domEvent.target.closest('.b-tasknonworkingtime'),\n            { taskRecord, interval } = target.elementData;\n        me.client.trigger('taskNonWorkingTime' + casedEventName[domEvent.type], {\n            feature : me,\n            taskRecord,\n            interval,\n            domEvent\n        });\n    }\n}\nTaskNonWorkingTime._$name = 'TaskNonWorkingTime'; GridFeatureManager.registerFeature(TaskNonWorkingTime, false, 'Gantt');\n", "import EventHelper from '../../Core/helper/EventHelper.js';\nimport EventResize from '../../SchedulerPro/feature/EventResize.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport TransactionalFeature from '../../Scheduler/feature/mixin/TransactionalFeature.js';\n/**\n * @module Gantt/feature/TaskResize\n */\n/**\n * Feature that allows resizing a task by dragging its end date. Resizing a task by dragging its start date is not allowed.\n *\n * This feature is **enabled** by default\n *\n * This feature updates the event's `endDate` live in order to leverage the\n * rendering pathway to always yield a correct appearance. The changes are done in\n * {@link Core.data.Model#function-beginBatch batched} mode so that changes do not become\n * eligible for data synchronization or propagation until the operation is completed.\n *\n * ## Customizing the resize tooltip\n *\n * To show custom HTML in the tooltip, please see the {@link #config-tooltipTemplate} config. Example:\n *\n * ```javascript\n * taskResize : {\n *     // A minimal end date tooltip\n *     tooltipTemplate : ({ record, endDate }) => {\n *         return DateHelper.format(endDate, 'MMM D');\n *     }\n * }\n * ```\n *\n * @extends SchedulerPro/feature/EventResize\n * @demo Gantt/basic\n * @classtype taskResize\n * @feature\n */\nexport default class TaskResize extends TransactionalFeature(EventResize) {\n    static get $name() {\n        return 'TaskResize';\n    }\n    static get configurable() {\n        return {\n            draggingItemCls : 'b-sch-event-resizing',\n            resizingItemInnerCls : null,\n            /**\n             * Gets or sets special key to activate successor pinning behavior. Supported values are:\n             * * 'ctrl'\n             * * 'shift'\n             * * 'alt'\n             * * 'meta'\n             *\n             * Assign false to disable it.\n             * @member {Boolean|String} pinSuccessors\n             */\n            /**\n             * Set to true to enable resizing task while pinning dependent tasks. By default, this behavior is activated\n             * if you hold CTRL key during drag. Alternatively, you may provide key name to use. Supported values are:\n             * * 'ctrl'\n             * * 'shift'\n             * * 'alt'\n             * * 'meta'\n             *\n             * **Note**: Only supported in forward-scheduled project\n             *\n             * @config {Boolean|String}\n             * @default\n             */\n            pinSuccessors : false\n        };\n    }\n    static get pluginConfig() {\n        return {\n            chain : ['render', 'onEventDataGenerated', 'isTaskElementDraggable']\n        };\n    }\n    onDragItemMouseMove() {\n        // internalUpdateRecord is based on the assumption only taskbar end edge can be resized\n        this[`${this.client.rtl ? 'right' : 'left'}Handle`] = false;\n        super.onDragItemMouseMove(...arguments);\n    }\n    changePinSuccessors(value) {\n        return EventHelper.toSpecialKey(value);\n    }\n    //region Events\n    /**\n     * @event beforeEventResize\n     * @hide\n     */\n    /**\n     * @event eventResizeStart\n     * @hide\n     */\n    /**\n     * @event eventPartialResize\n     * @hide\n     */\n    /**\n     * @event beforeEventResizeFinalize\n     * @hide\n     */\n    /**\n     * @event eventResizeEnd\n     * @hide\n     */\n    /**\n     * Fires on the owning Gantt before resizing starts. Return false to prevent the operation.\n     * @event beforeTaskResize\n     * @preventable\n     * @on-owner\n     * @param {Gantt.model.TaskModel} taskRecord\n     * @param {Event} event\n     */\n    /**\n     * Fires on the owning Gantt when task resizing starts\n     * @event taskResizeStart\n     * @on-owner\n     * @param {Gantt.model.TaskModel} taskRecord\n     * @param {Event} event\n     */\n    /**\n     * Fires on the owning Gantt on each resize move event\n     * @event taskPartialResize\n     * @on-owner\n     * @param {Gantt.model.TaskModel} taskRecord\n     * @param {Date} start The start date\n     * @param {Date} end The end date\n     * @param {HTMLElement} element The element\n     */\n    /**\n     * Fires on the owning Gantt to allow implementer to prevent immediate finalization by setting `data.context.async = true`\n     * in the listener, to show a confirmation popup etc\n     * ```javascript\n     *  gantt.on('beforetaskresizefinalize', ({context}) => {\n     *      context.async = true;\n     *      setTimeout(() => {\n     *          // async code don't forget to call finalize\n     *          context.finalize();\n     *      }, 1000);\n     *  })\n     * ```\n     * @event beforeTaskResizeFinalize\n     * @on-owner\n     * @param {Gantt.model.TaskModel} taskRecord\n     * @param {Object} data\n     * @param {Gantt.view.Gantt} data.source Gantt instance\n     * @param {Object} data.context\n     * @param {Boolean} data.context.async Set true to handle resize asynchronously (e.g. to wait for user\n     * confirmation)\n     * @param {Function} data.context.finalize Call this method to finalize resize. This method accepts one\n     * argument: pass true to update records, or false, to ignore changes\n     */\n    /**\n     * Fires on the owning Gantt after the resizing gesture has finished.\n     * @event taskResizeEnd\n     * @on-owner\n     * @param {Boolean} changed\n     * @param {Gantt.model.TaskModel} taskRecord\n     */\n    //endregion\n    //region Gantt specifics\n    isTaskElementDraggable(eventElement, eventRecord, el, event) {\n        return this.isEventElementDraggable(...arguments);\n    }\n    checkValidity() {\n        // Task resize just does basic validity checks which runs the validatorFn\n        return this.basicValidityCheck(...arguments);\n    }\n    getBeforeResizeParams(context) {\n        return {};\n    }\n    // Injects Gantt specific data into the drag context\n    setupProductResizeContext(context, event) {\n        const\n            gantt      = this.client,\n            taskRecord = gantt.resolveTaskRecord(context.element);\n        Object.assign(context, {\n            taskRecord,\n            eventRecord     : taskRecord,\n            dateConstraints : gantt.getDateConstraints?.(taskRecord)\n        });\n    }\n    async internalUpdateRecord(context, timespanRecord) {\n        const\n            { client }     = this,\n            { generation } = timespanRecord,\n            {\n                startDate,\n                endDate\n            }              = context,\n            toSet          = { endDate };\n        // Fix the duration according to the Entity's rules.\n        context.duration = toSet.duration = timespanRecord.run('calculateProjectedDuration', startDate, endDate);\n        // Fix the dragged date point according to the Entity's rules.\n        const value = toSet[context.toSet] = timespanRecord.run('calculateProjectedXDateWithDuration', startDate, true, context.duration);\n        // Update the record to its final correct state using *batched changes*\n        // These will *not* be propagated, it's just to force the dragged event bar\n        // into its corrected shape before the real changes which will propagate are applied below.\n        // We MUST do it like this because the final state may not be a net change if the changes\n        // got rejected, and in that case, the engine will not end up firing any change events.\n        timespanRecord.set(toSet);\n        // Quit listening for batchedUpdate *before* we cancel the batch so that the\n        // change events from the revert do not update the UI.\n        client.endListeningForBatchedUpdates();\n        this.cancelEventRecordBatch(timespanRecord);\n        if (this.pinSuccessors && context.event[this.pinSuccessors]) {\n            await timespanRecord.setEndDatePinningSuccessors(value);\n        }\n        else {\n            await timespanRecord.setEndDate(value, false);\n        }\n        timespanRecord.endBatch();\n        // If the record has been changed\n        return timespanRecord.generation !== generation;\n    }\n    //endregion\n    //#region\n    triggerEventResizeStart(eventType, event, context) {\n        super.triggerEventResizeStart(eventType, event, context);\n        return this.startFeatureTransaction();\n    }\n    triggerEventResizeEnd(eventType, event) {\n        super.triggerEventResizeEnd(eventType, event);\n        if (event.changed) {\n            this.finishFeatureTransaction();\n        }\n        else {\n            this.rejectFeatureTransaction();\n        }\n    }\n    //#endregion\n}\nTaskResize._$name = 'TaskResize'; GridFeatureManager.registerFeature(TaskResize, true, 'Gantt');\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport TaskDrag from './TaskDrag.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\n/**\n * @module Gantt/feature/TaskSegmentDrag\n */\n/**\n * Allows user to drag and drop task segments, to change their start date.\n *\n * {@inlineexample Gantt/feature/TaskSegments.js}\n *\n * This feature is **enabled** by default\n *\n * @extends Gantt/feature/TaskDrag\n * @demo Gantt/split-tasks\n * @classtype taskSegmentDrag\n * @feature\n */\nexport default class TaskSegmentDrag extends TaskDrag {\n    //region Config\n    static $name = 'TaskSegmentDrag';\n    static get configurable() {\n        return {\n            capitalizedEventName : 'TaskSegment'\n        };\n    }\n    static get pluginConfig() {\n        return {\n            chain : ['onInternalPaint', 'isTaskElementDraggable']\n        };\n    }\n    //endregion\n    //region Events\n    /**\n     * Fires on the owning Gantt before segment dragging starts. Return `false` to prevent the action.\n     * @event beforeTaskSegmentDrag\n     * @preventable\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {Gantt.model.TaskModel} taskRecord The segment about to be dragged\n     * @param {Event} event The native browser event\n     */\n    /**\n     * Fires on the owning Gantt when segment dragging starts\n     * @event taskSegmentDragStart\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {Gantt.model.TaskModel[]} taskRecords Dragged segments\n     */\n    /**\n     * Fires on the owning Gantt while a segment is being dragged\n     * @event taskSegmentDrag\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {Gantt.model.TaskModel[]} taskRecords Dragged segments\n     * @param {Date} startDate\n     * @param {Date} endDate\n     * @param {Object} dragData\n     * @param {Boolean} changed `true` if startDate has changed.\n     */\n    /**\n     * Fires on the owning Gantt to allow implementer to prevent immediate finalization by setting `data.context.async = true`\n     * in the listener, to show a confirmation popup etc\n     * ```javascript\n     * scheduler.on('beforetasksegmentdropfinalize', ({ context }) => {\n     *     context.async = true;\n     *     setTimeout(() => {\n     *         // async code don't forget to call finalize\n     *         context.finalize();\n     *     }, 1000);\n     * })\n     * ```\n     * @event beforeTaskSegmentDropFinalize\n     * @on-owner\n     * @param {Gantt.view.Gantt} source Gantt instance\n     * @param {Object} context\n     * @param {Gantt.model.TaskModel[]} context.taskRecords Dragged segments\n     * @param {Boolean} context.valid Set this to `false` to mark the drop as invalid\n     * @param {Boolean} context.async Set true to handle dragdrop asynchronously (e.g. to wait for user\n     * confirmation)\n     * @param {Function} context.finalize Call this method to finalize dragdrop. This method accepts one\n     * argument: pass true to update records, or false, to ignore changes\n     */\n    /**\n     * Fires on the owning Gantt after a valid task drop\n     * @event taskSegmentDrop\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {Gantt.model.TaskModel[]} taskRecords Dropped segments\n     * @param {Boolean} isCopy\n     */\n    /**\n     * Fires on the owning Gantt after a task drop, regardless if the drop validity\n     * @event afterTaskSegmentDrop\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {Gantt.model.TaskModel[]} taskRecords Dropped segments\n     * @param {Boolean} valid\n     */\n    //endregion\n    // Prevent TaskDrag to handle a segment\n    isTaskElementDraggable(taskElement, taskRecord, el, event) {\n        const me = this;\n        // We don't care dragging if that's a task having nothing to do w/ segments\n        if (me.disabled || (!taskRecord.isEventSegment && !taskRecord.isSegmented)) {\n            return true;\n        }\n        // Otherwise make sure TaskDrag is not trying to handle a segment element drag\n        return !el.closest(me.drag.targetSelector);\n    }\n    //region Drag events\n    triggerBeforeEventDrag(eventType, event) {\n        return this.client.trigger('beforeTaskSegmentDrag', event);\n    }\n    triggerBeforeEventDropFinalize(eventType, eventData, client) {\n        client.trigger(`before${this.capitalizedEventName}DropFinalize`, eventData);\n    }\n    triggerEventDrag(dragData, start) {\n        // Trigger the event on every mousemove so that features which need to adjust\n        // Such as dependencies and baselines can keep adjusted.\n        this.client.trigger('taskSegmentDrag', {\n            taskRecords : dragData.draggedEntities,\n            startDate   : dragData.startDate,\n            endDate     : dragData.endDate,\n            dragData,\n            changed     : dragData.startDate - start !== 0\n        });\n    }\n    triggerDragStart(dragData) {\n        this.client.trigger('taskSegmentDragStart', {\n            taskRecords : dragData.draggedEntities,\n            dragData\n        });\n    }\n    triggerDragAbort(dragData) {\n        this.client.trigger('taskSegmentDragAbort', {\n            taskRecords : dragData.draggedEntities,\n            context     : dragData\n        });\n    }\n    triggerDragAbortFinalized(dragData) {\n        this.client.trigger('taskSegmentDragAbortFinalized', {\n            taskRecords : dragData.draggedEntities,\n            context     : dragData\n        });\n    }\n    triggerAfterDrop(dragData, valid) {\n        this.currentOverClient.trigger('afterTaskSegmentDrop', {\n            taskRecords : dragData.draggedEntities,\n            context     : dragData,\n            valid\n        });\n    }\n    onInternalInvalidDrop(abort) {\n        super.onInternalInvalidDrop(...arguments);\n        // revert main task element width changes\n        this.dragData.mainTaskElement.style.width = this.dragData.initialMainTaskElementWidth + 'px';\n    }\n    //endregion\n    //region Drag data\n    buildDragHelperConfig() {\n        const config = super.buildDragHelperConfig();\n        config.targetSelector = '.b-sch-event-segment:not(.b-first)';\n        return config;\n    }\n    getTaskScheduleRegion(taskRecord, dateConstraints) {\n        const\n            { client }      = this,\n            mainTaskElement = client.getElementFromTaskRecord(taskRecord.event),\n            mainTaskRegion  = Rectangle.from(mainTaskElement, client.timeAxisSubGridElement),\n            result          = this.client.getScheduleRegion(taskRecord.event, true, dateConstraints);\n        // For segment we shift constrainRectangle by the main event offset\n        result.translate(-mainTaskRegion.x);\n        return result;\n    }\n    setupProductDragData(context) {\n        const result = super.setupProductDragData(context);\n        result.mainTaskElement = this.client.getElementFromTaskRecord(result.record.event, false);\n        result.initialMainTaskElementWidth = parseFloat(result.mainTaskElement.style.width);\n        return result;\n    }\n    updateDragContext(context, event) {\n        super.updateDragContext(...arguments);\n        const {\n            dirty,\n            record,\n            mainTaskElement,\n            initialMainTaskElementWidth\n        } = this.dragData;\n        // If dragging the last segment update the main task width accordingly\n        // need this to update dependency properly while dragging\n        if (dirty && !record.nextSegment) {\n            // main task width = its origin width + drag distance\n            mainTaskElement.style.width = (initialMainTaskElementWidth + context.clientX - context.startClientX) + 'px';\n        }\n    }\n    get tipId() {\n        return `${this.client.id}-task-segment-drag-tip`;\n    }\n    //endregion\n    //region Finalize & validation\n    /**\n     * Update tasks being dragged.\n     * @private\n     * @param {Object} context Drag data.\n     */\n    async updateRecords(context) {\n        const\n            {\n                startDate,\n                draggedEntities : [taskRecord]\n            }                = context,\n            oldStartDate     = taskRecord.startDate;\n        if (taskRecord.isEventSegment) {\n            await taskRecord.setStartDate(startDate, true);\n            // If not rejected (the startDate has changed), tell the world there was a successful drop.\n            if (taskRecord.startDate - oldStartDate) {\n                this.client.trigger('taskSegmentDrop', {\n                    taskRecords : context.draggedEntities\n                });\n            }\n            else {\n                this.dragData.valid = false;\n            }\n        }\n    }\n    getDateConstraints(taskRecord) {\n        const result = super.getDateConstraints(taskRecord) || {};\n        let { minDate, maxDate } = result;\n        // A segment movement is constrained by its neighbor segments if any\n        if (taskRecord.previousSegment && (!minDate || minDate < taskRecord.previousSegment.endDate)) {\n            minDate = taskRecord.previousSegment.endDate;\n        }\n        if (taskRecord.nextSegment && (!maxDate || maxDate < taskRecord.nextSegment.startDate)) {\n            maxDate = taskRecord.nextSegment.startDate;\n        }\n        return (minDate || maxDate) && {\n            start : minDate,\n            end   : maxDate\n        };\n    }\n    //endregion\n}\nTaskSegmentDrag._$name = 'TaskSegmentDrag'; GridFeatureManager.registerFeature(TaskSegmentDrag, true, 'Gantt');\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport EventSegmentResize from '../../SchedulerPro/feature/EventSegmentResize.js';\n/**\n * @module Gantt/feature/TaskSegmentResize\n */\n/**\n * Feature that allows resizing a task segment by dragging its end.\n *\n * {@inlineexample Gantt/feature/TaskSegments.js}\n *\n * This feature is **enabled** by default.\n *\n * @extends SchedulerPro/feature/EventSegmentResize\n * @classtype taskSegmentResize\n * @feature\n */\nexport default class TaskSegmentResize extends EventSegmentResize {\n    //region Events\n    /**\n     * Fired on the owning Gantt before resizing starts. Return `false` to prevent the action.\n     * @event beforeTaskSegmentResize\n     * @on-owner\n     * @preventable\n     * @param {Gantt.view.Gantt} source Gantt instance\n     * @param {Gantt.model.TaskModel} taskRecord Segment being resized\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record the resize starts within\n     * @param {MouseEvent} event Browser event\n     */\n    /**\n     * Fires on the owning Gantt when event resizing starts\n     * @event taskSegmentResizeStart\n     * @on-owner\n     * @param {Gantt.view.Gantt} source Gantt instance\n     * @param {Gantt.model.TaskModel} taskRecord Segment being resized\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record the resize starts within\n     * @param {MouseEvent} event Browser event\n     */\n    /**\n     * Fires on the owning Gantt on each resize move event\n     * @event taskSegmentPartialResize\n     * @on-owner\n     * @param {Gantt.view.Gantt} source Gantt instance\n     * @param {Gantt.model.TaskModel} taskRecord Segment being resized\n     * @param {Date} startDate\n     * @param {Date} endDate\n     * @param {HTMLElement} element\n     */\n    /**\n     * Fired on the owning Gantt to allow implementer to prevent immediate finalization by setting\n     * `data.context.async = true` in the listener, to show a confirmation popup etc.\n     * ```javascript\n     *  gantt.on('beforeTaskSegmentResizeFinalize', ({context}) => {\n     *      context.async = true;\n     *      setTimeout(() => {\n     *          // async code don't forget to call finalize\n     *          context.finalize();\n     *      }, 1000);\n     *  })\n     * ```\n     * @event beforeTaskSegmentResizeFinalize\n     * @on-owner\n     * @param {Gantt.view.Gantt} source Gantt instance\n     * @param {Object} context\n     * @param {Boolean} context.async Set true to handle resize asynchronously (e.g. to wait for user confirmation)\n     * @param {Function} context.finalize Call this method to finalize resize. This method accepts one argument:\n     *                   pass `true` to update records, or `false`, to ignore changes\n     */\n    /**\n     * Fires on the owning Gantt after the resizing gesture has finished.\n     * @event taskSegmentResizeEnd\n     * @on-owner\n     * @param {Gantt.view.Gantt} source Gantt instance\n     * @param {Boolean} changed Shows if the record has been changed by the resize action\n     * @param {Gantt.model.TaskModel} taskRecord Segment being resized\n     */\n    //endregion\n    //region Config\n    static $name = 'TaskSegmentResize';\n    static get configurable() {\n        return {\n            draggingItemCls : 'b-sch-event-resizing',\n            resizingItemInnerCls : null,\n            leftHandle : false\n        };\n    }\n    static get pluginConfig() {\n        return {\n            chain : ['render', 'onEventDataGenerated', 'isTaskElementDraggable', 'isTaskSegmentElementDraggable']\n        };\n    }\n    //endregion\n    //region Init & destroy\n    // Prevent task dragging when it starts over resize handles\n    isTaskElementDraggable(eventElement, eventRecord, el, event) {\n        return this.isEventElementDraggable(...arguments);\n    }\n    // Prevent segment dragging when it starts over resize handles\n    isTaskSegmentElementDraggable(eventElement, eventRecord, el, event) {\n        return this.isEventElementDraggable(...arguments);\n    }\n    checkValidity() {\n        // Task resize just does basic validity checks which runs the validatorFn\n        return this.basicValidityCheck(...arguments);\n    }\n    getBeforeResizeParams(context) {\n        return {};\n    }\n    // Injects Gantt specific data into the drag context\n    setupProductResizeContext(context, event) {\n        const\n            gantt      = this.client,\n            taskRecord = gantt.resolveTaskRecord(context.element);\n        Object.assign(context, {\n            taskRecord,\n            eventRecord     : taskRecord,\n            dateConstraints : gantt.getDateConstraints?.(taskRecord)\n        });\n    }\n    async internalUpdateRecord(context, timespanRecord) {\n        const\n            { client }     = this,\n            { generation } = timespanRecord,\n            {\n                startDate,\n                endDate\n            }              = context,\n            toSet          = { endDate };\n        // Fix the duration according to the Entity's rules.\n        context.duration = toSet.duration = timespanRecord.run('calculateProjectedDuration', startDate, endDate);\n        // Fix the dragged date point according to the Entity's rules.\n        const value = toSet[context.toSet] = timespanRecord.run('calculateProjectedXDateWithDuration', startDate, true, context.duration);\n        // Update the record to its final correct state using *batched changes*\n        // These will *not* be propagated, it's just to force the dragged event bar\n        // into its corrected shape before the real changes which will propagate are applied below.\n        // We MUST do it like this because the final state may not be a net change if the changes\n        // got rejected, and in that case, the engine will not end up firing any change events.\n        timespanRecord.set(toSet);\n        // Quit listening for batchedUpdate *before* we cancel the batch so that the\n        // change events from the revert do not update the UI.\n        client.endListeningForBatchedUpdates();\n        this.cancelEventRecordBatch(timespanRecord);\n        if (this.pinSuccessors && context.event[this.pinSuccessors]) {\n            await timespanRecord.setEndDatePinningSuccessors(value);\n        }\n        else {\n            await timespanRecord.setEndDate(value, false);\n        }\n        timespanRecord.endBatch();\n        // If the record has been changed\n        return timespanRecord.generation !== generation;\n    }\n    get tipId() {\n        return `${this.client.id}-task-segment-resize-tip`;\n    }\n    //endregion\n}\nTaskSegmentResize._$name = 'TaskSegmentResize'; GridFeatureManager.registerFeature(TaskSegmentResize, true, 'Gantt');\n", "import TooltipBase from '../../Scheduler/feature/base/TooltipBase.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\n/**\n * @module Gantt/feature/TaskTooltip\n */\n/**\n * This feature displays a task tooltip on mouse hover. The template of the tooltip is customizable\n * with the {@link #config-template} function.\n *\n * ## Showing custom HTML in the tooltip\n *```javascript\n * new Gantt({\n *     features : {\n *         taskTooltip : {\n *             template : ({ taskRecord }) => `Tooltip for ${taskRecord.name}`,\n *             // Tooltip configs can be used here\n *             align    : 'l-r' // Align left to right\n *         }\n *     }\n * });\n * ```\n *\n * ## Showing remotely loaded data\n * Loading remote data into the task tooltip is easy. Simply use the {@link #config-template} and return a Promise which yields the content to show.\n * ```javascript\n * new Gantt({\n *     features : {\n *         taskTooltip : {\n *             template : ({ taskRecord }) => AjaxHelper.get(`./fakeServer?name=${taskRecord.name}`).then(response => response.text())\n *         }\n *     }\n * });\n * ```\n *\n * This feature is **enabled** by default.\n *\n * @extends Scheduler/feature/base/TooltipBase\n * @demo Gantt/tooltips\n * @classtype taskTooltip\n * @feature\n */\nexport default class TaskTooltip extends TooltipBase {\n    static get $name() {\n        return 'TaskTooltip';\n    }\n    static get defaultConfig() {\n        return {\n            /**\n             * Template (a function accepting task data and returning a string) used to display info in the tooltip.\n             * The template will be called with an object as with fields as detailed below\n             *\n             * @config {Function} template\n             * @param {Object} data Tooltip data\n             * @param {Gantt.model.TaskModel} data.taskRecord Task record\n             * @param {String} data.startClockHtml Predefined HTML to show the start time\n             * @param {String} data.endClockHtml Predefined HTML to show the end time\n             * @returns {String} String representing the HTML markup\n             */\n            template(data) {\n                const\n                    me              = this,\n                    { taskRecord }  = data,\n                    displayDuration = me.client.formatDuration(taskRecord.duration, me.decimalPrecision);\n                return `\n                    ${taskRecord.name ? `<div class=\"b-gantt-task-title\">${StringHelper.encodeHtml(taskRecord.name)}</div>` : ''}\n                    <table>\n                    <tr><td>${me.L('L{Start}')}:</td><td>${data.startClockHtml}</td></tr>\n                    ${taskRecord.milestone ? '' : `\n                        <tr><td>${me.L('L{End}')}:</td><td>${data.endClockHtml}</td></tr>\n                        <tr><td>${me.L('L{Duration}')}:</td><td class=\"b-right\">${displayDuration} ${DateHelper.getLocalizedNameOfUnit(taskRecord.durationUnit, taskRecord.duration !== 1)}</td></tr>\n                        <tr><td>${me.L('L{Complete}')}:</td><td class=\"b-right\">${taskRecord.renderedPercentDone}%</td></tr>\n                    `}\n                    </table>                 \n                `;\n            },\n            /**\n             * Precision of displayed duration, defaults to use {@link Gantt.view.Gantt#config-durationDisplayPrecision}.\n             * Specify an integer value to override that setting, or `false` to use raw value\n             * @member {Number|Boolean} decimalPrecision\n             */\n            /**\n             * Precision of displayed duration, defaults to use {@link Gantt.view.Gantt#config-durationDisplayPrecision}.\n             * Specify an integer value to override that setting, or `false` to use raw value\n             * @config {Number|Boolean}\n             */\n            decimalPrecision : null,\n            cls : 'b-gantt-task-tooltip',\n            monitorRecordUpdate : true\n        };\n    }\n}\nTaskTooltip._$name = 'TaskTooltip'; GridFeatureManager.registerFeature(TaskTooltip, true, 'Gantt');\n", "import GridTreeGroup from '../../Grid/feature/TreeGroup.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport WalkHelper from '../../Core/helper/WalkHelper.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\nimport AttachToProjectMixin from '../../Scheduler/data/mixin/AttachToProjectMixin.js';\n/**\n * @module Gantt/feature/TreeGroup\n */\n/**\n * Extends Grid's {@link Grid.feature.TreeGroup} (follow the link for more info) feature to enable using it with Gantt.\n * Allows generating a new task tree where parents are determined by the values of specified task fields/functions:\n *\n * {@inlineexample Gantt/feature/TreeGroup.js}\n *\n * ## Important information\n *\n * Using the TreeGroup feature comes with some caveats:\n *\n * * Grouping replaces the store Gantt uses to display tasks with a temporary \"display store\". The original task store\n *   is left intact, when grouping stops Gantt will revert to using it to display tasks.\n * * `gantt.taskStore` points to the original store when this feature is enabled. To apply sorting or filtering programmatically, you should instead interact with the \"display store\" directly, using `gantt.store`.\n * * Generated parents are read-only, they cannot be edited using the default UI.\n * * Leaves in the new tree are still editable as usual, and any changes to them survives the grouping operation.\n * * Moving tasks in the tree (rearranging rows) is not supported while it is grouped.\n *\n * This feature is <strong>disabled</strong> by default.\n *\n * @extends Grid/feature/TreeGroup\n *\n * @classtype treeGroup\n * @feature\n *\n * @typings Grid.feature.TreeGroup -> Grid.feature.GridTreeGroup\n */\nexport default class TreeGroup extends GridTreeGroup.mixin(AttachToProjectMixin, Delayable) {\n    static $name = 'TreeGroup';\n    static delayable = {\n        refresh : 'raf'\n    };\n    updateParents(root) {\n        // Since generated parents are not part of the project we have to manually set their dates etc. Walk them all\n        // (since they are generated we are guaranteed there is no mix of parents and leaves at any give level), and\n        // determine those\n        root.children?.length && WalkHelper.postWalk(root, task => !task.children?.[0].isLeaf && task.children, task => {\n            const { children } = task;\n            let minStartDate = children[0].startDate,\n                maxEndDate   = children[0].endDate,\n                percentDone  = 0;\n            for (const child of children) {\n                if (child.startDate) {\n                    minStartDate = Math.min(child.startDate, minStartDate || Number.MAX_SAFE_INTEGER);\n                }\n                if (child.endDate) {\n                    maxEndDate   = Math.max(child.endDate, maxEndDate);\n                }\n                percentDone += child.percentDone;\n            }\n            task.startDate = new Date(minStartDate);\n            task.endDate = new Date(maxEndDate);\n            task.duration = this.client.project.taskStore.rootNode.run('calculateProjectedDuration', task.startDate, task.endDate);\n            task.percentDone = percentDone / children.length;\n        });\n    }\n    // Generate dates etc. for parents during grouping\n    processTransformedData(transformedData) {\n        this.updateParents(transformedData);\n    }\n    // Update dates etc. for parents when a task is changed\n    onTaskStoreChange({ action, records }) {\n        const { client } = this;\n        if (client.isTreeGrouped && records.some(r => r.isLeaf) && action !== 'dataset') {\n            client.suspendRefresh();\n            this.updateParents(client.store.rootNode);\n            client.resumeRefresh(false);\n            this.refresh();\n        }\n    }\n    refresh() {\n        this.client.refreshWithTransition();\n    }\n    // Add task store listener when grouping, to catch task changes and update parents\n    async applyLevels(levels) {\n        // Detach prior to applying new levels, to avoid triggering old listeners in case tasks are affected\n        // (they should not be, locked down in test, but just in case)\n        this.detachListeners('taskStore');\n        await super.applyLevels(levels);\n        if (this.isDestroyed) {\n            return;\n        }\n        if (levels?.length > 0) {\n            // In case a 2nd called came here before a prior one completing\n            this.detachListeners('taskStore');\n            this.client.taskStore.ion({\n                name    : 'taskStore',\n                change  : 'onTaskStoreChange',\n                thisObj : this\n            });\n        }\n    }\n}\nTreeGroup._$name = 'TreeGroup'; GridFeatureManager.registerFeature(TreeGroup, false, 'Gantt');\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport TaskModel from '../model/TaskModel.js';\nimport SchedulerProVersions from '../../SchedulerPro/feature/Versions.js';\n/**\n * @module Gantt/feature/Versions\n */\n/**\n * Captures versions (snapshots) of the active project, including a detailed log of the changes new in each version.\n *\n * When active, the feature monitors the project for changes and appends them to the changelog. When a version is captured,\n * the version will consist of a complete snapshot of the project data at the time of the capture, in addition to the list\n * of changes in the changelog that have occurred since the last version was captured.\n *\n * For information about the data structure representing a version and how to persist it, see {@link SchedulerPro.model.VersionModel}.\n *\n * For information about the data structures representing the changelog and how to persist them, see\n * {@link SchedulerPro.model.changelog.ChangeLogTransactionModel}.\n *\n * This feature is **disabled** by default.\n * For info on enabling it, see {@link Grid.view.mixin.GridFeatures}.\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         versions : true\n *     }\n * });\n * ```\n *\n * To display versions and their changes, use a {@link SchedulerPro.widget.VersionGrid} configured with a {@link Gantt.model.ProjectModel}.\n *\n * {@inlineexample Gantt/guides/whats-new/5.3.0/versions.js}\n *\n * See also:\n * - {@link SchedulerPro.model.VersionModel} A stored version of a ProjectModel, captured at a point in time, with change log\n * - {@link SchedulerPro.model.changelog.ChangeLogTransactionModel} The set of add/remove/update actions that occurred in response to a user action\n * - {@link SchedulerPro.widget.VersionGrid} Widget for displaying a project's versions and changes\n *\n * @extends SchedulerPro/feature/Versions\n * @classtype versions\n * @feature\n *\n * @typings SchedulerPro.feature.Versions -> SchedulerPro.feature.SchedulerProVersions\n */\nexport default class GanttVersions extends SchedulerProVersions {\n    static $name = 'Versions';\n    static configurable = {\n        /**\n         * The set of Model types whose subtypes should be recorded as the base type in the change log. For example,\n         * by default if a subclassed TaskModelEx exists and an instance of one is updated, it will be recorded in the\n         * changelog as a TaskModel.\n         * @config {Array}\n         * @default [TaskModel, AssignmentModel, DependencyModel, ResourceModel]\n         */\n        knownBaseTypes : [TaskModel, ...SchedulerProVersions.configurable.knownBaseTypes]\n    };\n    construct(gantt, config) {\n        super.construct(gantt, config);\n        gantt.ion({\n            taskMenuItem : ({ item, selection }) => {\n                const\n                    me         = this,\n                    isMultiple = selection.length > 1;\n                if (item.ref === 'deleteTask') {\n                    me.transactionDescription = isMultiple ? me.L('L{Versions.deletedTasks}')\n                        : me.L('L{Versions.deletedTask}');\n                }\n                else if (item.ref === 'indent') {\n                    me.transactionDescription = me.L('L{Versions.indented}');\n                }\n                else if (item.ref === 'outdent') {\n                    me.transactionDescription = me.L('L{Versions.outdented}');\n                }\n                else if (item.ref === 'cut') {\n                    me.transactionDescription = me.L('L{Versions.cut}');\n                }\n                else if (item.ref === 'paste') {\n                    me.transactionDescription = me.L('L{Versions.pasted}');\n                }\n            }\n        });\n    }\n}\nGanttVersions._$name = 'GanttVersions'; GridFeatureManager.registerFeature(GanttVersions, false, 'Gantt');\n", "import Rectangle from '../../../../Core/helper/util/Rectangle.js';\nimport DomHelper from '../../../../Core/helper/DomHelper.js';\nimport DomSync from '../../../../Core/helper/DomSync.js';\n// This value is actually defined in CSS for the Gantt as a height for wrap element when baseline is active. Ideally\n// we should link it to the style\nconst BASELINE_RATIO = 0.4;\n/**\n * This mixin overrides event elements handling in similar scheduler mixin. Uses correct element class names and\n * resolves elements in gantt-way.\n * @private\n */\nexport default base => class GanttExporterMixin extends base {\n    async prepareComponent(config) {\n        await super.prepareComponent(config);\n        const\n            me             = this,\n            // Clear cloned gantt element from task elements\n            fgCanvasEl     = me.element.querySelector('.b-sch-foreground-canvas');\n        DomHelper.removeEachSelector(fgCanvasEl, '.b-gantt-task-wrap');\n        DomHelper.removeEachSelector(fgCanvasEl, '.b-released');\n    }\n    collectEvents(rows, config) {\n        const\n            me         = this,\n            addedRows  = rows.length,\n            { client } = config,\n            normalRows = me.exportMeta.subGrids.normal.rows;\n        rows.forEach((row, index) => {\n            const\n                rowConfig = normalRows[normalRows.length - addedRows + index],\n                event     = client.store.getAt(row.dataIndex),\n                eventsMap = rowConfig[3];\n            if (event.isScheduled) {\n                const el = client.getElementFromTaskRecord(event, false);\n                if (el && !eventsMap.has(event.id)) {\n                    eventsMap.set(event.id, [el.outerHTML, Rectangle.from(el.firstChild, el.offsetParent)]);\n                }\n            }\n        });\n    }\n    renderEvents(config, rows) {\n        const\n            me              = this,\n            { client }      = config,\n            renderBaselines = client.hasActiveFeature('baselines'),\n            normalRows      = me.exportMeta.subGrids.normal.rows;\n        // Unlike Scheduler Gantt calculates elements and boxes for dependencies from the index of the record in the\n        // store. Upside is that it allows to correctly estimate position of the task which is outside of the view.\n        // Downside is that we will have to either move every single element or the entire canvas up by the difference\n        // between first row we rendered and estimated vertical position\n        const offset = me.exportMeta.topRowOffset = rows[0].top - rows[0].dataIndex * rows[0].offsetHeight;\n        rows.forEach((row, index) => {\n            const\n                rowConfig  = normalRows[index],\n                eventsMap  = rowConfig[3],\n                record     = client.store.getAt(row.dataIndex),\n                renderData = client.currentOrientation.getTaskRenderData(row, record),\n                { taskId } = renderData;\n            renderData.top += offset;\n            // If task\n            if (renderData.isTask) {\n                const\n                    taskDOMConfig   = client.currentOrientation.getTaskDOMConfig(renderData),\n                    targetElement   = document.createElement('div'),\n                    { isMilestone } = record,\n                    hasBaselines    = record.baselines.count;\n                DomSync.sync({\n                    targetElement,\n                    domConfig : taskDOMConfig\n                });\n                let { left, top, width, height } = renderData;\n                // for milestone, we need to adjust left coordinate by half height(width)\n                if (isMilestone) {\n                    left = left - height / 2;\n                    width = height;\n                }\n                eventsMap.set(taskId, [\n                    targetElement.outerHTML,\n                    new Rectangle(left, top, width, height * (renderBaselines && hasBaselines ? BASELINE_RATIO : 1)), []\n                ]);\n            }\n            if (renderData.extraConfigs.length) {\n                const\n                    targetElement = document.createElement('div'),\n                    extrasArray   = [];\n                for (const domConfig of renderData.extraConfigs) {\n                    DomSync.sync({\n                        targetElement,\n                        domConfig\n                    });\n                    extrasArray.push(targetElement.outerHTML);\n                }\n                if (!eventsMap.has(taskId)) {\n                    eventsMap.set(taskId, ['', null, []]);\n                }\n                eventsMap.get(taskId)[2] = extrasArray;\n            }\n        });\n    }\n    getEventBox(event) {\n        if (!event) {\n            return;\n        }\n        let result = this.exportMeta.eventsBoxes.get(String(event.id));\n        // If task is not rendered we need to estimate its position\n        if (!result) {\n            const\n                { client }     = this.exportMeta,\n                startX         = client.getCoordinateFromDate(event.startDate),\n                endX           = client.getCoordinateFromDate(event.endDate),\n                { rows }       = this.exportMeta.subGrids.normal,\n                [\n                    firstRowHTML,\n                    firstRowTop,\n                    height\n                ]              = rows[0],\n                [, lastRowTop] = rows[rows.length - 1],\n                // take data index from html\n                firstRowIndex  = parseInt(firstRowHTML.match(/data-index=\"(\\d+)?\"/)[1]),\n                taskIndex      = client.taskStore.indexOf(event),\n                // Push estimated box one extra row to avoid dependency line making turns at the page bottom\n                estimatedY     = taskIndex < firstRowIndex ? firstRowTop - height * 2 : lastRowTop + height * 2;\n            result = new Rectangle(startX, estimatedY, endX - startX, height);\n        }\n        return result;\n    }\n};\n", "import SchedulerMultiPageExporter from '../../../../Scheduler/feature/export/exporter/MultiPageExporter.js';\nimport GanttExporterMixin from './GanttExporterMixin.js';\n/**\n * @module Gantt/feature/export/exporter/MultiPageExporter\n */\n/**\n * A multiple page exporter. Used by the {@link Gantt.feature.export.PdfExport} feature to export to multiple pages. You\n * do not need to use this class directly.\n *\n * ### Extending exporter\n *\n * ```javascript\n * class MyMultiPageExporter extends MultiPageExporter {\n *     // type is required for exporter\n *     static get type() {\n *         return 'mymultipageexporter';\n *     }\n *\n *     get stylesheets() {\n *         const stylesheets = super.stylesheets;\n *\n *         stylesheets.forEach(styleNodeOrLinkTag => doSmth(styleNodeOrLinkTag))\n *\n *         return stylesheets;\n *     }\n * }\n *\n * const gantt = new Gantt({\n *     features : {\n *         pdfExport : {\n *             // this export feature is configured with only one exporter\n *             exporters : [MyMultiPageExporter]\n *         }\n *     }\n * });\n *\n * // run export with the new exporter\n * gantt.features.pdfExport.export({ exporter : 'mymultipageexporter' });\n * ```\n *\n * @classtype multipage\n * @extends Scheduler/feature/export/exporter/MultiPageExporter\n *\n * @typings Scheduler.feature.export.exporter.MultiPageExporter -> Scheduler.feature.export.exporter.SchedulerMultiPageExporter\n */\nexport default class MultiPageExporter extends GanttExporterMixin(SchedulerMultiPageExporter) {\n    static get $name() {\n        return 'MultiPageExporter';\n    }\n    static get type() {\n        return 'multipage';\n    }\n}\nMultiPageExporter._$name = 'MultiPageExporter';", "import SchedulerMultiPageVerticalExporter from '../../../../Scheduler/feature/export/exporter/MultiPageVerticalExporter.js';\nimport GanttExporterMixin from './GanttExporterMixin.js';\n/**\n * @module Gantt/feature/export/exporter/MultiPageVerticalExporter\n */\n/**\n * A vertical multiple page exporter. Used by the {@link Gantt.feature.export.PdfExport} feature to export to multiple\n * pages. Content will be scaled in a horizontal direction to fit the page.\n *\n * You do not need to use this class directly.\n *\n * ### Extending exporter\n *\n * ```javascript\n * class MyMultiPageVerticalExporter extends MultiPageVerticalExporter {\n *     // type is required for exporter\n *     static get type() {\n *         return 'mymultipageverticalexporter';\n *     }\n *\n *     get stylesheets() {\n *         const stylesheets = super.stylesheets;\n *\n *         stylesheets.forEach(styleNodeOrLinkTag => doSmth(styleNodeOrLinkTag))\n *\n *         return stylesheets;\n *     }\n * }\n *\n * const gantt = new Gantt({\n *     features : {\n *         pdfExport : {\n *             // this export feature is configured with only one exporter\n *             exporters : [MyMultiPageVerticalExporter]\n *         }\n *     }\n * });\n *\n * // run export with the new exporter\n * gantt.features.pdfExport.export({ exporter : 'mymultipageverticalexporter' });\n * ```\n *\n * @classtype multipagevertical\n * @extends Scheduler/feature/export/exporter/MultiPageVerticalExporter\n *\n * @typings Scheduler.feature.export.exporter.MultiPageVerticalExporter -> Scheduler.feature.export.exporter.SchedulerMultiPageVerticalExporter\n */\nexport default class MultiPageVerticalExporter extends GanttExporterMixin(SchedulerMultiPageVerticalExporter) {\n    static get $name() {\n        return 'MultiPageVerticalExporter';\n    }\n    static get type() {\n        return 'multipagevertical';\n    }\n}\nMultiPageVerticalExporter._$name = 'MultiPageVerticalExporter';", "import SchedulerSinglePageExporter from '../../../../Scheduler/feature/export/exporter/SinglePageExporter.js';\nimport GanttExporterMixin from './GanttExporterMixin.js';\n/**\n * @module Gantt/feature/export/exporter/SinglePageExporter\n */\n/**\n * A single page exporter. Used by the {@link Gantt.feature.export.PdfExport} feature to export to single page. Content\n * will be scaled in both directions to fit the page.\n *\n * You do not need to use this class directly.\n *\n * ### Extending exporter\n *\n * ```javascript\n * class MySinglePageExporter extends SinglePageExporter {\n *     // type is required for exporter\n *     static get type() {\n *         return 'mysinglepageexporter';\n *     }\n *\n *     get stylesheets() {\n *         const stylesheets = super.stylesheets;\n *\n *         stylesheets.forEach(styleNodeOrLinkTag => doSmth(styleNodeOrLinkTag))\n *\n *         return stylesheets;\n *     }\n * }\n *\n * const gantt = new Gantt({\n *     features : {\n *         pdfExport : {\n *             // this export feature is configured with only one exporter\n *             exporters : [MySinglePageExporter]\n *         }\n *     }\n * });\n *\n * // run export with the new exporter\n * gantt.features.pdfExport.export({ exporter : 'mysinglepageexporter' });\n * ```\n *\n * @classtype singlepage\n * @extends Scheduler/feature/export/exporter/SinglePageExporter\n *\n * @typings Scheduler.feature.export.exporter.SinglePageExporter -> Scheduler.feature.export.exporter.SchedulerSinglePageExporter\n */\nexport default class SinglePageExporter extends GanttExporterMixin(SchedulerSinglePageExporter) {\n    static get $name() {\n        return 'SinglePageExporter';\n    }\n    static get type() {\n        return 'singlepage';\n    }\n}\nSinglePageExporter._$name = 'SinglePageExporter';", "import SchedulerPdfExport from '../../../Scheduler/feature/export/PdfExport.js';\nimport SinglePageExporter from './exporter/SinglePageExporter.js';\nimport MultiPageExporter from './exporter/MultiPageExporter.js';\nimport MultiPageVerticalExporter from './exporter/MultiPageVerticalExporter.js';\nimport GridFeatureManager from '../../../Grid/feature/GridFeatureManager.js';\n/**\n * @module Gantt/feature/export/PdfExport\n */\n/**\n * Generates PDF/PNG files from the Gantt component.\n *\n * <img src=\"Gantt/gantt-export-dialog.png\" style=\"max-width : 300px\" alt=\"Gantt Export dialog\">\n *\n * **NOTE:** Server side is required to make export work!\n *\n * Check out PDF Export Server documentation and installation steps [here](https://github.com/bryntum/pdf-export-server#pdf-export-server)\n *\n * When your server is up and running, it listens to requests. The Export feature sends a request to the specified URL\n * with the HTML fragments. The server generates a PDF (or PNG) file and returns a download link (or binary, depending\n * on {@link #config-sendAsBinary} config). Then the Export feature opens the link in a new tab and the file is\n * automatically downloaded by your browser. This is configurable, see {@link #config-openAfterExport} config.\n *\n * The {@link #config-exportServer} URL must be configured. The URL can be localhost if you start the server locally,\n * or your remote server address.\n *\n * ## Usage\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         pdfExport : {\n *             exportServer : 'http://localhost:8080' // Required\n *         }\n *     }\n * })\n *\n * // Opens popup allowing to customize export settings\n * gantt.features.pdfExport.showExportDialog();\n *\n * // Simple export\n * gantt.features.pdfExport.export({\n *     // Required, set list of column ids to export\n *     columns : gantt.columns.map(c => c.id)\n * }).then(result => {\n *     // Response instance and response content in JSON\n *     let { response, responseJSON } = result;\n * });\n * ```\n *\n * ## Configuring the export dialog\n *\n * To learn about how to customize the export dialog and its default widgets, please refer to the\n * {@link Scheduler.view.export.SchedulerExportDialog} which provides a 'ref' identifier for each child widget so that\n * you can customize them all based on your requirements.\n *\n * ## Loading resources\n *\n * If you face a problem with loading resources when exporting, the cause might be that the application and the export server are hosted on different servers.\n * This is due to [Cross-Origin Resource Sharing](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) (CORS). There are 2 options how to handle this:\n * - Allow cross-origin requests from the server where your export is hosted to the server where your application is hosted;\n * - Copy all resources keeping the folder hierarchy from the server where your application is hosted to the server where your export is hosted\n * and setup paths using {@link Grid.feature.export.PdfExport#config-translateURLsToAbsolute} config and configure the export server to give access to the path:\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         pdfExport : {\n *             exportServer : 'http://localhost:8080',\n *             // '/resources' is hardcoded in WebServer implementation\n *             translateURLsToAbsolute : 'http://localhost:8080/resources'\n *         }\n *     }\n * })\n * ```\n *\n * ```javascript\n * // Following path would be served by this address: http://localhost:8080/resources/\n * node ./src/server.js -h 8080 -r web/application/styles\n * ```\n *\n * where `web/application/styles` is the physical root location of the copied resources, for example:\n *\n * <img src=\"Grid/export-server-resources.png\" style=\"max-width : 500px\" alt=\"Export server structure with copied resources\" />\n *\n * This feature is **disabled** by default.\n * For info on enabling it, see {@link Grid/view/mixin/GridFeatures}.\n *\n * @classtype pdfExport\n *\n * @extends Scheduler/feature/export/PdfExport\n * @feature\n *\n * @typings Scheduler.feature.export.PdfExport -> Scheduler.feature.export.SchedulerPdfExport\n */\nexport default class PdfExport extends SchedulerPdfExport {\n    static get $name() {\n        return 'PdfExport';\n    }\n    static get defaultConfig() {\n        return {\n            exporters : [SinglePageExporter, MultiPageExporter, MultiPageVerticalExporter]\n        };\n    }\n}\nPdfExport._$name = 'PdfExport'; GridFeatureManager.registerFeature(PdfExport, false, 'Gantt');\n", "import PrintMixin from '../../../Grid/feature/export/mixin/PrintMixin.js';\nimport PdfExport from './PdfExport.js';\nimport GridFeatureManager from '../../../Grid/feature/GridFeatureManager.js';\n/**\n * @module Gantt/feature/export/Print\n */\n/**\n * Allows printing Gantt contents using browser print dialog.\n *\n * This feature is based on {@link Gantt.feature.export.PdfExport} with only difference that instead of sending\n * request to a backend it renders content to an IFrame element and requests print dialog for it. For more details about\n * preparing HTML for printing, please refer to the {@link Gantt.feature.export.PdfExport} docs.\n *\n * ## Usage\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         print : true\n *     }\n * })\n *\n * // Opens popup allowing to customize print settings\n * gantt.features.print.showPrintDialog();\n *\n * // Simple print\n * gantt.features.print.print({\n *     columns : scheduler.columns.map(c => c.id)\n * });\n * ```\n *\n * This feature is **disabled** by default.\n * For info on enabling it, see {@link Grid/view/mixin/GridFeatures}.\n *\n * @extends Gantt/feature/export/PdfExport\n * @mixes Grid/feature/export/mixin/PrintMixin\n *\n * @demo Gantt/print\n * @classtype print\n * @feature\n *\n * @typings Scheduler.feature.export.Print -> Scheduler.feature.export.SchedulerPrint\n */\nexport default class Print extends PrintMixin(PdfExport) {\n    /**\n     * @hideConfigs clientURL, exportServer, fetchOptions, fileFormat, fileName, openAfterExport, openInNewTab, sendAsBinary\n     */\n    /**\n     * @hideFunctions processExportContent, receiveExportContent, showExportDialog\n     */\n    static $name = 'Print';\n}\nPrint._$name = 'Print'; GridFeatureManager.registerFeature(Print, false, 'Gantt');\n", "import SchedulerProCalendarIntervalModel from '../../SchedulerPro/model/CalendarIntervalModel.js';\n/**\n * @module Gantt/model/CalendarIntervalModel\n */\n/**\n * This class represents a calendar interval in the Gantt calendar.\n * Every interval can be either recurrent (regularly repeating in time) or static.\n *\n * Please refer to the [calendars guide](#Gantt/guides/basics/calendars.md) for details\n *\n * @extends SchedulerPro/model/CalendarIntervalModel\n *\n * @typings SchedulerPro.model.CalendarIntervalModel -> SchedulerPro.model.SchedulerProCalendarIntervalModel\n */\nexport default class CalendarIntervalModel extends SchedulerProCalendarIntervalModel {}\nCalendarIntervalModel._$name = 'CalendarIntervalModel';", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { calculate, field } from \"../../../../ChronoGraph/replica/Entity.js\";\nimport { HasChildrenMixin } from \"../scheduler_basic/HasChildrenMixin.js\";\n/**\n * This is a mixin, adding critical path calculation to the event node.\n *\n * Scheduling-wise it adds *criticalPaths* field to an entity mixing it.\n *\n * For more details on the _critical path method_ please check this article: https://en.wikipedia.org/wiki/Critical_path_method\n */\nexport class HasCriticalPathsMixin extends Mixin([HasChildrenMixin], (base) => {\n    const superProto = base.prototype;\n    class HasCriticalPathsMixin extends base {\n        *calculateCriticalPaths() {\n            const paths = [], pathsToProcess = [], events = yield this.$.childEvents, eventsToProcess = [...events], projectEndDate = yield this.$.endDate;\n            // First collect events we'll start collecting paths from.\n            // We need to start from critical events w/o incoming dependencies\n            let event;\n            while ((event = eventsToProcess.shift())) {\n                const childEvents = yield event.$.childEvents, eventIsCritical = yield event.$.critical, eventIsActive = !(yield event.$.inactive), eventEndDate = yield event.$.endDate;\n                // register a new path finishing at the event\n                if (eventIsActive && eventEndDate && eventEndDate.getTime() - projectEndDate.getTime() === 0 && eventIsCritical) {\n                    pathsToProcess.push([{ event }]);\n                }\n                eventsToProcess.push(...childEvents);\n            }\n            let path;\n            // fetch paths one by one and process\n            while ((path = pathsToProcess.shift())) {\n                let taskIndex = path.length - 1, node;\n                // get the path last event\n                while ((node = path[taskIndex])) {\n                    const criticalPredecessorNodes = [];\n                    // collect critical successors\n                    for (const dependency of (yield node.event.$.incomingDeps)) {\n                        const event = yield dependency.$.fromEvent;\n                        // if we found a critical predecessor\n                        if (event && (yield dependency.$.active) && !(yield event.$.inactive) && (yield event.$.critical)) {\n                            criticalPredecessorNodes.push({ event, dependency });\n                        }\n                    }\n                    // if critical predecessor(s) found\n                    if (criticalPredecessorNodes.length) {\n                        // make a copy of the path leading part\n                        const pathCopy = path.slice();\n                        // append the found predecessor to the path\n                        path.push(criticalPredecessorNodes[0]);\n                        // if we found more than one predecessor we start new path as: leading path + predecessor\n                        for (let i = 1; i < criticalPredecessorNodes.length; i++) {\n                            pathsToProcess.push(pathCopy.concat(criticalPredecessorNodes[i]));\n                        }\n                        // increment counter to process the predecessor we've appended to the path\n                        taskIndex++;\n                    }\n                    else {\n                        // no predecessors -> stop the loop\n                        taskIndex = -1;\n                    }\n                }\n                // we collected the path backwards so let's reverse it\n                paths.push(path.reverse());\n            }\n            return paths;\n        }\n    }\n    __decorate([\n        field({ lazy: true })\n    ], HasCriticalPathsMixin.prototype, \"criticalPaths\", void 0);\n    __decorate([\n        calculate('criticalPaths')\n    ], HasCriticalPathsMixin.prototype, \"calculateCriticalPaths\", null);\n    return HasCriticalPathsMixin;\n}) {\n}\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { ProposedOrPrevious, UnsafeProposedOrPreviousValueOf } from \"../../../../ChronoGraph/chrono/Effect.js\";\nimport { Mixin } from '../../../../ChronoGraph/class/BetterMixin.js';\nimport { field, calculate } from \"../../../../ChronoGraph/replica/Entity.js\";\nimport { Direction, ProjectType, ConstraintIntervalSide } from '../../../scheduling/Types.js';\nimport { MAX_DATE, MIN_DATE } from '../../../util/Constants.js';\nimport { ChronoEventTreeStoreMixin } from \"../../store/ChronoEventStoreMixin.js\";\nimport { SchedulerProProjectMixin } from \"../scheduler_pro/SchedulerProProjectMixin.js\";\nimport { SchedulerProResourceMixin } from \"../scheduler_pro/SchedulerProResourceMixin.js\";\nimport { ConstrainedLateEventMixin } from \"./ConstrainedLateEventMixin.js\";\nimport { SchedulerProAssignmentMixin } from \"../scheduler_pro/SchedulerProAssignmentMixin.js\";\nimport { GanttEvent } from './GanttEvent.js';\nimport { HasCriticalPathsMixin } from \"./HasCriticalPathsMixin.js\";\nimport { HasEffortMixin } from \"../scheduler_pro/HasEffortMixin.js\";\nimport { ConstraintInterval, ConstraintIntervalDescription } from \"../../../chrono/Conflict.js\";\nimport { format } from \"../../../util/Functions.js\";\nimport \"../../../localization/En.js\";\nimport { prototypeValue } from \"../../../../ChronoGraph/util/Helpers.js\";\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * Gantt project mixin type. At this level, events are called \"tasks\". All scheduling features from the [[SchedulerProProjectMixin]]\n * are preserved. Additionally, tasks inherit constraints from parent tasks. Tasks also receives the [[HasEffortMixin.effort|effort]] field\n * and [[HasSchedulingModeMixin.schedulingMode|schedulingMode]] field.\n *\n * The base event class for this level is [[GanttEvent]]. The base assignment class is [[SchedulerProAssignmentMixin]].\n *\n * At this level, project can be scheduled in backward direction. This is controlled with the [[direction]] field.\n *\n * * Forward ASAP scheduling\n *\n * This is a default, most-used mode. In this mode, the \"base\" date is project start date. If it is not provided,\n * it is calculated as the earliest date of all project tasks. Events are scheduled ASAP, based on the \"early\" constraints\n * (plus \"generic\" constraints).\n *\n * * Forward ALAP scheduling\n *\n * In this mode, the \"base\" date is still project start date. If it is not provided,\n * it is calculated as the earliest date of all project tasks.\n *\n * Events are first scheduled ASAP, based on the \"early\" constraints. This gives the project end date.\n * Now events are scheduled ALAP, using the project end date as the base.\n *\n * The difference between the task position in Forward ASAP and Forward ALAP scheduling is called [[ConstrainedLateEventMixin.totalSlack|\"slack\"]]\n *\n * * Backward ALAP scheduling\n *\n * This is a \"default\" backward scheduling. In this mode, the \"base\" date is project end date. If it is not provided,\n * it is calculated as the latest date of all project tasks. Events are scheduled ALAP, based on the \"late\" constraints\n * (plus \"generic\" constraints).\n *\n * * Backward ASAP scheduling\n *\n * In this mode, the \"base\" date is still project end date. If it is not provided,\n * it is calculated as the latest date of all project tasks.\n *\n * Events are first scheduled ALAP, based on the \"late\" constraints. This gives the project start date.\n * Now events are scheduled ASAP, using the project start date as the base.\n *\n */\nexport class GanttProjectMixin extends Mixin([\n    SchedulerProProjectMixin,\n    HasEffortMixin,\n    ConstrainedLateEventMixin,\n    HasCriticalPathsMixin\n], (base) => {\n    const superProto = base.prototype;\n    class GanttProjectMixin extends base {\n        constructor() {\n            super(...arguments);\n            // this atom is recalculated in every transaction (it is \"self dependent\")\n            // this happens because it is always calculated to the value which is different from\n            // proposed value\n            // this is a \"source of changes\" which we use for `project.startDate/endDate` in case\n            // scanning the children returned `null`\n            // so it will cause the `project.startDate` to always recalculate until it obtain some value\n            this.nonEqual = false;\n        }\n        *calculateNonEqual() {\n            return !(yield ProposedOrPrevious);\n        }\n        get isGanttProjectMixin() {\n            return true;\n        }\n        afterConfigure() {\n            superProto.afterConfigure.apply(this, arguments);\n            this.projectConstraintIntervalClass = this.projectConstraintIntervalClass || ProjectConstraintInterval;\n        }\n        *hasSubEvents() {\n            const childEvents = yield this.$.childEvents;\n            return childEvents.size > 0;\n        }\n        *subEventsIterable() {\n            return yield this.$.childEvents;\n        }\n        *calculateStartDate() {\n            const direction = yield this.$.effectiveDirection;\n            if (direction.direction === Direction.Forward) {\n                let result = yield ProposedOrPrevious;\n                if (!result) {\n                    result = yield* this.unsafeCalculateInitialMinChildrenStartDateDeep();\n                    if (!result)\n                        yield this.$.nonEqual;\n                }\n                return result;\n            }\n            else if (direction.direction === Direction.Backward) {\n                const startDate = yield* this.calculateMinChildrenStartDate();\n                const endDate = yield this.$.endDate;\n                // Calculated startDate can get after the project endDate\n                // (in case its built based on a manually scheduled task that start after the project finishes).\n                // We set the project startDate to its endDate value then.\n                return startDate && endDate > startDate ? startDate : endDate;\n            }\n        }\n        *calculateEndDate() {\n            const direction = yield this.$.effectiveDirection;\n            if (direction.direction === Direction.Forward) {\n                const startDate = yield this.$.startDate;\n                const endDate = yield* this.calculateMaxChildrenEndDate();\n                // Calculated endDate can be before the project startDate\n                // (in case its built based on a manually scheduled task that finishes before the project starts).\n                // Then it leads to an infinite cycle because of these BaseEventMixin.calculateDurationPure lines:\n                //      if (startDate > endDate) {\n                //          yield Write(this.$.duration, 0, null)\n                //      }\n                // So we simply check if the project endDate got earlier than its start date\n                // and set endDate to startDate value then.\n                // This case is reported in: https://github.com/bryntum/support/issues/3127\n                // and asserted by: 031_manually_scheduled.t.ts\n                return endDate && endDate > startDate ? endDate : startDate;\n            }\n            else if (direction.direction === Direction.Backward) {\n                let result = yield ProposedOrPrevious;\n                if (!result) {\n                    result = yield* this.unsafeCalculateInitialMaxChildrenEndDateDeep();\n                    if (!result)\n                        yield this.$.nonEqual;\n                }\n                return result;\n            }\n        }\n        *shouldRollupChildStartDate(child) {\n            // Do not take into account inactive children dates when calculating start date\n            return !(yield child.$.inactive);\n        }\n        *shouldRollupChildEndDate(child) {\n            // Do not take into account inactive children dates when calculating start date\n            return !(yield child.$.inactive);\n        }\n        *calculateEarlyStartDateConstraintIntervals() {\n            const intervals = yield* superProto.calculateEarlyStartDateConstraintIntervals.call(this);\n            const direction = yield this.$.effectiveDirection;\n            if (direction.direction === Direction.Forward) {\n                const startDate = yield this.$.startDate;\n                startDate && intervals.push(this.projectConstraintIntervalClass.new({\n                    owner: this,\n                    side: ConstraintIntervalSide.Start,\n                    startDate\n                }));\n            }\n            else if (direction.direction === Direction.Backward) {\n                const startDate = yield this.$.lateStartDate;\n                startDate && intervals.push(this.projectConstraintIntervalClass.new({\n                    owner: this,\n                    side: ConstraintIntervalSide.Start,\n                    startDate\n                }));\n            }\n            return intervals;\n        }\n        *calculateLateEndDateConstraintIntervals() {\n            const intervals = yield* superProto.calculateLateEndDateConstraintIntervals.call(this);\n            const direction = yield this.$.effectiveDirection;\n            if (direction.direction === Direction.Forward) {\n                const endDate = yield this.$.earlyEndDate;\n                endDate && intervals.push(this.projectConstraintIntervalClass.new({\n                    owner: this,\n                    side: ConstraintIntervalSide.End,\n                    endDate\n                }));\n            }\n            else if (direction.direction === Direction.Backward) {\n                const endDate = yield this.$.endDate;\n                endDate && intervals.push(this.projectConstraintIntervalClass.new({\n                    owner: this,\n                    side: ConstraintIntervalSide.End,\n                    endDate\n                }));\n            }\n            return intervals;\n        }\n        getDefaultEventModelClass() {\n            return GanttEvent;\n        }\n        getDefaultAssignmentModelClass() {\n            return SchedulerProAssignmentMixin;\n        }\n        getDefaultResourceModelClass() {\n            return SchedulerProResourceMixin;\n        }\n        getDefaultEventStoreClass() {\n            return ChronoEventTreeStoreMixin;\n        }\n        getType() {\n            return ProjectType.Gantt;\n        }\n        // this method is only used to calculated \"initial\" project start date only\n        *unsafeCalculateInitialMinChildrenStartDateDeep() {\n            const childEvents = yield this.$.childEvents;\n            // note, that we does not yield here, as we want to calculate \"initial\" project start date\n            // which will be used only if there's no user input or explicit setting for it\n            // such project date should be calculated as earliest date of all tasks, based on the\n            // \"initial\" data (which includes proposed)\n            if (!childEvents.size)\n                return yield UnsafeProposedOrPreviousValueOf(this.$.startDate);\n            let result = MAX_DATE, child;\n            const toProcess = [...childEvents];\n            while ((child = toProcess.shift())) {\n                let childDate = yield UnsafeProposedOrPreviousValueOf(child.$.startDate);\n                // in case a task has no start date but has end date provided - use that value\n                if (!childDate) {\n                    childDate = yield UnsafeProposedOrPreviousValueOf(child.$.endDate);\n                }\n                if (childDate && childDate < result)\n                    result = childDate;\n                toProcess.push(...yield child.$.childEvents);\n            }\n            return (result.getTime() !== MIN_DATE.getTime() && result.getTime() !== MAX_DATE.getTime()) ? result : null;\n        }\n        *unsafeCalculateInitialMaxChildrenEndDateDeep() {\n            const childEvents = yield this.$.childEvents;\n            // note, that we use \"unsafe\" ProposedOrPrevious effect here, because we only get into this method\n            // if there's no user input for the project end date\n            if (!childEvents.size)\n                return yield UnsafeProposedOrPreviousValueOf(this.$.endDate);\n            let result = MIN_DATE, child;\n            const toProcess = [...childEvents];\n            while ((child = toProcess.shift())) {\n                let childDate = yield UnsafeProposedOrPreviousValueOf(child.$.endDate);\n                // in case a task has no end date but has start date provided - use that value\n                if (!childDate) {\n                    childDate = yield UnsafeProposedOrPreviousValueOf(child.$.startDate);\n                }\n                if (childDate && childDate > result)\n                    result = childDate;\n                toProcess.push(...yield child.$.childEvents);\n            }\n            return (result.getTime() !== MIN_DATE.getTime() && result.getTime() !== MAX_DATE.getTime()) ? result : null;\n        }\n        getDependencyCycleDetectionIdentifiers(fromEvent, toEvent) {\n            return [\n                // @ts-ignore\n                toEvent.$.earlyStartDateConstraintIntervals,\n                // @ts-ignore\n                toEvent.$.earlyEndDateConstraintIntervals,\n                // @ts-ignore\n                toEvent.$.lateEndDateConstraintIntervals,\n                // @ts-ignore\n                toEvent.$.lateStartDateConstraintIntervals\n            ];\n        }\n    }\n    __decorate([\n        field({ equality: () => false })\n    ], GanttProjectMixin.prototype, \"nonEqual\", void 0);\n    __decorate([\n        calculate('nonEqual')\n    ], GanttProjectMixin.prototype, \"calculateNonEqual\", null);\n    return GanttProjectMixin;\n}) {\n}\n/**\n * Class providing a [[ProjectConstraintInterval]] instance description.\n */\nexport class ProjectConstraintIntervalDescription extends ConstraintIntervalDescription {\n    static get $name() {\n        return 'ProjectConstraintIntervalDescription';\n    }\n    static getDescription(interval) {\n        return format(interval.startDate ? this.L('L{startDateDescriptionTpl}') : this.L('L{endDateDescriptionTpl}'), ...this.getDescriptionParameters(interval));\n    }\n}\n/**\n * Class implementing constraining interval applied by a project.\n * A forward scheduled project implicitly restricts tasks to start not early than the project start date\n * and a backward scheduled project restricts tasks to finish not later than the project end date.\n */\nexport class ProjectConstraintInterval extends ConstraintInterval {\n    get isProjectConstraintInterval() {\n        return true;\n    }\n    isAffectedByTransaction(transaction) {\n        const project = this.owner;\n        transaction = transaction || project.graph.activeTransaction;\n        const dateQuark = transaction.entries.get(this.startDate ? project.$.startDate : project.$.endDate);\n        // modified project start (end for BW projects) date\n        return dateQuark && !dateQuark.isShadow();\n    }\n}\n__decorate([\n    prototypeValue(ProjectConstraintIntervalDescription)\n], ProjectConstraintInterval.prototype, \"descriptionBuilderClass\", void 0);\n", "import Model from '../../Core/data/Model.js';\nimport Store from '../../Core/data/Store.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\nimport { GanttProjectMixin, ProjectConstraintInterval } from '../../Engine/quark/model/gantt/GanttProjectMixin.js';\nimport ProjectModelTimeZoneMixin from '../../Scheduler/model/mixin/ProjectModelTimeZoneMixin.js';\nimport { DateConstraintInterval } from '../../Engine/quark/model/scheduler_pro/HasDateConstraintMixin.js';\nimport { DependencyConstraintInterval } from '../../Engine/quark/model/scheduler_pro/ScheduledByDependenciesEarlyEventMixin.js';\nimport ProjectCurrentConfig from '../../Scheduler/model/mixin/ProjectCurrentConfig.js';\nimport ProjectModelCommon from '../../Scheduler/model/mixin/ProjectModelCommon.js';\nimport ProjectCrudManager from '../../SchedulerPro/data/mixin/ProjectCrudManager.js';\nimport ProjectChangeHandlerMixin from '../../SchedulerPro/model/mixin/ProjectChangeHandlerMixin.js';\nimport AssignmentStore from '../data/AssignmentStore.js';\nimport CalendarManagerStore from '../data/CalendarManagerStore.js';\nimport DependencyStore from '../data/DependencyStore.js';\nimport ResourceStore from '../data/ResourceStore.js';\nimport TaskStore from '../data/TaskStore.js';\nimport AssignmentModel from './AssignmentModel.js';\nimport CalendarModel from './CalendarModel.js';\nimport DependencyModel from './DependencyModel.js';\nimport ResourceModel from './ResourceModel.js';\nimport TaskModel from './TaskModel.js';\nimport StateTrackingManager from '../../SchedulerPro/data/stm/StateTrackingManager.js';\nimport TimeRangeStore from '../../Scheduler/data/TimeRangeStore.js';\n/**\n * @module Gantt/model/ProjectModel\n */\n/**\n * This class represents a global project of your Project plan or Gantt - a central place for all data.\n *\n * It holds and links the stores usually used by Gantt:\n *\n * - {@link Gantt/data/TaskStore}\n * - {@link Gantt/data/ResourceStore}\n * - {@link Gantt/data/AssignmentStore}\n * - {@link Gantt/data/DependencyStore}\n * - {@link Gantt/data/CalendarManagerStore}\n * - {@link #config-timeRangeStore TimeRangeStore}\n *\n * The project uses a scheduling engine to calculate dates, durations and such. It is also responsible for\n * handling references between models, for example to link an task via an assignment to a resource. These operations\n * are asynchronous, a fact that is hidden when working in the Gantt UI but which you must know about when performing\n * operations on the data level.\n *\n * When there is a change to data that requires something else to be recalculated, the project schedules a calculation\n * (a commit) which happens moments later. It is also possible to trigger these calculations directly. This flow\n * illustrates the process:\n *\n * 1. Something changes which requires the project to recalculate, for example adding a new task:\n *\n * ```javascript\n * const [task] = project.taskStore.add({ startDate, endDate });\n * ```\n *\n * 2. A recalculation is scheduled, thus:\n *\n * ```javascript\n * task.duration; // <- Not yet calculated\n * ```\n *\n * 3. Calculate now instead of waiting for the scheduled calculation\n *\n * ```javascript\n * await project.commitAsync();\n *\n * task.duration; // <- Now available\n * ```\n *\n * Please refer to [this guide](#Gantt/guides/data/project_data.md) for more information.\n *\n * ## Built-in CrudManager\n *\n * Gantt's project has a {@link Scheduler/crud/AbstractCrudManagerMixin CrudManager} built-in. Using it is the recommended way of\n * syncing data between Gantt and a backend. Example usage:\n *\n * ```javascript\n * const gantt = new Gantt({\n *     project : {\n *         // Configure urls used by the built-in CrudManager\n *         transport : {\n *             load : {\n *                 url : 'php/load.php'\n *             },\n *             sync : {\n *                 url : 'php/sync.php'\n *             }\n *         }\n *     }\n * });\n *\n * // Load data from the backend\n * gantt.project.load()\n * ```\n *\n * For more information on CrudManager, see Schedulers docs on {@link Scheduler/data/CrudManager}.\n * For a detailed description of the protocol used by CrudManager, please see the\n * [Crud manager guide](#Gantt/guides/data/crud_manager.md)\n *\n * You can access the current Project data changes anytime using the {@link #property-changes} property.\n *\n * ## Working with inline data\n *\n * The project provides an {@link #property-inlineData} getter/setter that can\n * be used to manage data from all Project stores at once. Populating the stores this way can\n * be useful if you do not want to use the CrudManager for server communication but instead load data using Axios\n * or similar.\n *\n * ### Getting data\n * ```javascript\n * const data = gantt.project.inlineData;\n *\n * // use the data in your application\n * ```\n *\n * ### Setting data\n * ```javascript\n * // Get data from server manually\n * const data = await axios.get('/project?id=12345');\n *\n * // Feed it to the project\n * gantt.project.inlineData = data;\n * ```\n *\n * See also {@link #function-loadInlineData}\n *\n * ### Getting changed records\n *\n * You can access the changes in the current Project dataset anytime using the {@link #property-changes} property. It\n * returns an object with all changes:\n *\n * ```javascript\n * const changes = project.changes;\n *\n * console.log(changes);\n *\n * > {\n *   tasks : {\n *       updated : [{\n *           name : 'My task',\n *           id   : 12\n *       }]\n *   },\n *   assignments : {\n *       added : [{\n *           event      : 12,\n *           resource   : 7,\n *           units      : 100,\n *           $PhantomId : 'abc123'\n *       }]\n *     }\n * };\n * ```\n *\n * ## Monitoring data changes\n *\n * While it is possible to listen for data changes on the projects individual stores, it is sometimes more convenient\n * to have a centralized place to handle all data changes. By listening for the {@link #event-change change event} your\n * code gets notified when data in any of the stores changes. Useful for example to keep an external data model up to\n * date:\n *\n * ```javascript\n * const gantt = new Gantt({\n *     project: {\n *         listeners : {\n *             change({ store, action, records }) {\n *                 const { $name } = store.constructor;\n *\n *                 if (action === 'add') {\n *                     externalDataModel.add($name, records);\n *                 }\n *\n *                 if (action === 'remove') {\n *                     externalDataModel.remove($name, records);\n *                 }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * ## Processing the data loaded from the server\n *\n * If you want to process the data received from the server after loading, you can use\n * the {@link #event-beforeLoadApply} or {@link #event-beforeSyncApply} events:\n *\n * ```javascript\n * const gantt = new Gantt({\n *     project: {\n *         listeners : {\n *             beforeLoadApply({ response }) {\n *                 // do something with load-response object before it is provided to all the project stores\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * ## Built-in StateTrackingManager\n *\n * The project also has a built-in {@link Core/data/stm/StateTrackingManager} (STM for short), that\n * handles undo/redo for the project stores (additional stores can also be added). By default, it is only used while\n * editing tasks using the task editor, the editor updates tasks live and uses STM to rollback changes if canceled. But\n * you can enable it to track all project store changes:\n *\n * ```javascript\n * // Enable automatic transaction creation and start recording\n * project.stm.autoRecord = true;\n * project.stm.enable();\n *\n * // Undo a transaction\n * project.stm.undo();\n *\n * // Redo\n * project.stm.redo();\n * ```\n *\n * Check out the `undoredo` demo to see it in action.\n *\n * @extends Core/data/Model\n *\n * @mixes SchedulerPro/data/mixin/ProjectCrudManager\n * @mixes SchedulerPro/model/mixin/ProjectChangeHandlerMixin\n * @mixes Core/mixin/Events\n * @mixes Scheduler/model/mixin/ProjectModelTimeZoneMixin\n *\n * @typings SchedulerPro.model.ProjectModel -> SchedulerPro.model.SchedulerProProjectModel\n */\nexport default class ProjectModel extends GanttProjectMixin.derive(Model).mixin(\n    ProjectChangeHandlerMixin,\n    ProjectCurrentConfig,\n    ProjectCrudManager,\n    ProjectModelTimeZoneMixin,\n    ProjectModelCommon\n) {\n    //region Config\n    static $name = 'ProjectModel';\n    /**\n     * @hidefields id, readOnly, children, parentId, parentIndex\n     */\n    /**\n     * Silences propagations caused by the project loading.\n     *\n     * Applying the loaded data to the project occurs in two basic stages:\n     *\n     * 1. Data gets into the engine graph which triggers changes propagation\n     * 2. The changes caused by the propagation get written to related stores\n     *\n     * Setting this flag to `true` makes the component perform step 2 silently without triggering events causing reactions on those changes\n     * (like sending changes back to the server if `autoSync` is enabled) and keeping stores in unmodified state.\n     *\n     * This is safe if the loaded data is consistent so propagation doesn't really do any adjustments.\n     * By default the system treats the data as consistent so this option is `true`.\n     *\n     * ```javascript\n     * new Gantt({\n     *     project : {\n     *         // We want scheduling engine to recalculate the data properly\n     *         // so then we could save it back to the server\n     *         silenceInitialCommit : false,\n     *         ...\n     *     }\n     *     ...\n     * })\n     * ```\n     *\n     * @config {Boolean} silenceInitialCommit\n     * @default true\n     * @category Advanced\n     */\n    /**\n     * Maximum range the project calendars can iterate.\n     * The value is defined in milliseconds and by default equals `5 years` roughly.\n     * ```javascript\n     * new Gantt({\n     *     project : {\n     *         // adjust calendar iteration limit to 10 years roughly:\n     *         // 10 years expressed in ms\n     *         maxCalendarRange : 10 * 365 * 24 * 3600000,\n     *         ...\n     *     }\n     * });\n     * ```\n     * @config {Number} maxCalendarRange\n     * @default 157680000000\n     * @category Advanced\n     */\n    /**\n     * When `true` the project manually scheduled tasks will adjust their proposed start/end dates\n     * to skip non working time.\n     *\n     * @field {Boolean} skipNonWorkingTimeWhenSchedulingManually\n     * @default false\n     */\n    /**\n     * This config manages DST correction in the scheduling engine. It only has effect when DST transition hour is\n     * working time. Usually DST transition occurs on Sunday, so with non working weekends the DST correction logic\n     * is not involved.\n     *\n     * If **true**, it will add/remove one hour when calculating duration from start/end dates. For example:\n     * Assume weekends are working and on Sunday, 2020-10-25 at 03:00 clocks are set back 1 hour. Assume there is a task:\n     *\n     * ```javascript\n     * {\n     *     startDate    : '2020-10-20',\n     *     duration     : 10,\n     *     durationUnit : 'day'\n     * }\n     * ```\n     * It will end on 2020-10-29 23:00. Because of the DST transition Sunday is actually 25 hours long and when the\n     * Gantt project calculates the end date it converts days to hours multiplying by 24. If you're setting duration\n     * and want task to end on the end of the day you should manually correct for DST, like so:\n     *\n     * ```javascript\n     * {\n     *     startDate    : '2020-10-20',\n     *     duration     : 10 * 24 + 1,\n     *     durationUnit : 'hour'\n     * },\n     * ```\n     *\n     * If task has start and end dates it will correct for DST twice:\n     *\n     * ```javascript\n     * {\n     *     startDate    : '2020-10-20',\n     *     endDate      : '2020-10-30'\n     * }\n     * ```\n     * This task will end on 2020-10-29 22:00 which is a known quirk.\n     *\n     * If **false**, the Gantt project will not add DST correction which fixes the quirk mentioned above and such task\n     * will end on 2020-10-30 exactly, having hours duration of 10 days * 24 hours + 1 hour.\n     *\n     * Also, for this task days duration will be a floating point number due to extra (or missing) hour:\n     *\n     * ```javascript\n     * task.getDuration('day')  // 10.041666666666666\n     * task.getDuration('hour') // 241\n     * ```\n     *\n     * @config {Boolean} adjustDurationToDST\n     * @default false\n     * @category Advanced\n     */\n    /**\n     * Returns current Project changes as an object consisting of added/modified/removed arrays of records for every\n     * managed store. Returns `null` if no changes exist. Format:\n     *\n     * ```javascript\n     * {\n     *     resources : {\n     *         added    : [{ name : 'New guy' }],\n     *         modified : [{ id : 2, name : 'Mike' }],\n     *         removed  : [{ id : 3 }]\n     *     },\n     *     events : {\n     *         modified : [{  id : 12, name : 'Cool task' }]\n     *     },\n     *     ...\n     * }\n     * ```\n     *\n     * @member {Object} changes\n     * @readonly\n     * @category Models & Stores\n     */\n    // region Events\n    /**\n     * Fired during the Engine calculation if {@link #config-enableProgressNotifications} config is `true`\n     * @event progress\n     * @param {Number} total The total number of operations\n     * @param {Number} remaining The number of remaining operations\n     * @param {'storePopulation'|'propagating'} phase The phase of the calculation, either 'storePopulation'\n     * when data is getting loaded, or 'propagating' when data is getting calculated\n     */\n    /**\n     * Fired when the Engine detects a computation cycle.\n     * @event cycle\n     * @param {Object} schedulingIssue Scheduling error describing the case:\n     * @param {Function} schedulingIssue.getDescription Returns the cycle description\n     * @param {Object} schedulingIssue.cycle Object providing the cycle info\n     * @param {Function} schedulingIssue.getResolutions Returns possible resolutions\n     * @param {Function} continueWithResolutionResult Function to call after a resolution is chosen to\n     * proceed with the Engine calculations:\n     * ```javascript\n     * project.on('cycle', ({ continueWithResolutionResult }) => {\n     *     // cancel changes in case of a cycle\n     *     continueWithResolutionResult(EffectResolutionResult.Cancel);\n     * })\n     * ```\n     */\n    /**\n     * Fired when the Engine detects a scheduling conflict.\n     *\n     * @event schedulingConflict\n     * @param {Object} schedulingIssue The conflict details:\n     * @param {Function} schedulingIssue.getDescription Returns the conflict description\n     * @param {Object[]} schedulingIssue.intervals Array of conflicting intervals\n     * @param {Function} schedulingIssue.getResolutions Function to get possible resolutions\n     * @param {Function} continueWithResolutionResult Function to call after a resolution is chosen to\n     * proceed with the Engine calculations:\n     * ```javascript\n     * project.on('schedulingConflict', ({ schedulingIssue, continueWithResolutionResult }) => {\n     *     // apply the first resolution and continue\n     *     schedulingIssue.getResolutions()[0].resolve();\n     *     continueWithResolutionResult(EffectResolutionResult.Resume);\n     * })\n     * ```\n     */\n    /**\n     * Fired when the Engine detects a calendar misconfiguration when the calendar does\n     * not provide any working periods of time which makes usage impossible.\n     * @event emptyCalendar\n     * @param {Object} schedulingIssue Scheduling error describing the case:\n     * @param {Function} schedulingIssue.getDescription Returns the error description\n     * @param {Function} schedulingIssue.getCalendar Returns the calendar that must be fixed\n     * @param {Function} schedulingIssue.getResolutions Returns possible resolutions\n     * @param {Function} continueWithResolutionResult Function to call after a resolution is chosen to\n     * proceed with the Engine calculations:\n     * ```javascript\n     * project.on('emptyCalendar', ({ schedulingIssue, continueWithResolutionResult }) => {\n     *     // apply the first resolution and continue\n     *     schedulingIssue.getResolutions()[0].resolve();\n     *     continueWithResolutionResult(EffectResolutionResult.Resume);\n     * })\n     * ```\n     */\n    /**\n     * Fired when the engine has finished its calculations and the results has been written back to the records.\n     *\n     * ```javascript\n     * gantt.project.on({\n     *     dataReady({ records }) {\n     *         console.log('Calculations finished');\n     *         for (const record of records) {\n     *             console.log(`Modified #${record.id}: ${JSON.stringify(record.modifications)}`);\n     *         }\n     *         // Output:\n     *         // Modified #12: {\"endDate\":null,\"duration\":7200000,\"id\":12}\n     *         // Modified #1: {\"percentDone\":49.99998611112847,\"id\":1}\n     *         // Modified #1000: {\"percentDone\":49.99965834045124,\"id\":1000}\n     *     }\n     * });\n     *\n     * gantt.project.taskStore.first.duration = 10;\n     *\n     * // At some point a bit later it will log 'Calculations finished', etc.\n     * ```\n     *\n     * @event dataReady\n     * @param {Gantt.model.ProjectModel} source The project\n     * @param {Boolean} isInitialCommit Flag that shows if this commit is initial\n     * @param {Set} records Set of all {@link Core.data.Model}s that were modified in the completed transaction.\n     * Use the {@link Core.data.Model#property-modifications} property of each Model to identify\n     * modified fields.\n     */\n    //endregion\n    static get defaults() {\n        return {\n            /**\n             * If this flag is set to `true` (default) when a start/end date is set on the event, a corresponding\n             * `start-no-earlier/later-than` constraint is added, automatically. This is done in order to\n             * keep the event \"attached\" to this date, according to the user intention.\n             *\n             * Depending on your use case, you might want to disable this behaviour.\n             *\n             * @field {Boolean} addConstraintOnDateSet\n             * @default true\n             */\n            /**\n             * The number of hours per day.\n             *\n             * **Please note:** the value **does not define** the amount of **working** time per day\n             * for that purpose one should use calendars.\n             *\n             * The value is used when converting the duration from one unit to another.\n             * So when user enters a duration of, for example, `5 days` the system understands that it\n             * actually means `120 hours` and schedules accordingly.\n             * @field {Number} hoursPerDay\n             * @default 24\n             */\n            /**\n             * The number of days per week.\n             *\n             * **Please note:** the value **does not define** the amount of **working** time per week\n             * for that purpose one should use calendars.\n             *\n             * The value is used when converting the duration from one unit to another.\n             * So when user enters a duration of, for example, `2 weeks` the system understands that it\n             * actually means `14 days` (which is then converted to {@link #field-hoursPerDay hours}) and\n             * schedules accordingly.\n             * @field {Number} daysPerWeek\n             * @default 7\n             */\n            /**\n             * The number of days per month.\n             *\n             * **Please note:** the value **does not define** the amount of **working** time per month\n             * for that purpose one should use calendars.\n             *\n             * The value is used when converting the duration from one unit to another.\n             * So when user enters a duration of, for example, `1 month` the system understands that it\n             * actually means `30 days` (which is then converted to {@link #field-hoursPerDay hours}) and\n             * schedules accordingly.\n             * @field {Number} daysPerMonth\n             * @default 30\n             */\n            /**\n             * The source of the calendar for dependencies (the calendar used for taking dependencies lag into account).\n             * Possible values are:\n             *\n             * - `ToEvent` - successor calendar will be used (default);\n             * - `FromEvent` - predecessor calendar will be used;\n             * - `Project` - the project calendar will be used.\n             *\n             * @field {String} dependenciesCalendar\n             * @default 'ToEvent'\n             */\n            /**\n             * The project calendar.\n             * @config {String|CalendarModelConfig|Gantt.model.CalendarModel} calendar\n             */\n            /**\n             * The project calendar.\n             * @field {Gantt.model.CalendarModel} calendar\n             */\n            /**\n             * `true` to enable automatic {@link Gantt/model/TaskModel#field-percentDone % done} calculation for summary\n             * tasks, `false` to disable it.\n             * @field {Boolean} autoCalculatePercentDoneForParentTasks\n             * @default true\n             */\n            /**\n             * State tracking manager instance the project relies on\n             * @member {Core.data.stm.StateTrackingManager} stm\n             * @category Advanced\n             */\n            /**\n             * Configuration options to provide to the STM manager\n             *\n             * @config {StateTrackingManagerConfig|Core.data.stm.StateTrackingManager} stm\n             * @category Advanced\n             */\n            /**\n             * The {@link Gantt.data.TaskStore store} holding the task information.\n             *\n             * See also {@link Gantt.model.TaskModel}\n             * @member {Gantt.data.TaskStore} eventStore\n             * @category Models & Stores\n             */\n            /**\n             * A {@link Gantt.data.TaskStore} instance or a config object.\n             * @config {Gantt.data.TaskStore|Object} eventStore\n             * @category Models & Stores\n             */\n            /**\n             * An alias for the {@link #property-eventStore}.\n             *\n             * See also {@link Gantt.model.TaskModel}\n             * @member {Gantt.data.TaskStore} taskStore\n             * @category Models & Stores\n             */\n            /**\n             * An alias for the {@link #config-eventStore}.\n             * @config {Gantt.data.TaskStore|TaskStoreConfig} taskStore\n             * @category Models & Stores\n             */\n            /**\n             * The {@link Gantt.data.DependencyStore store} holding the dependency information.\n             *\n             * See also {@link Gantt.model.DependencyModel}\n             * @member {Gantt.data.DependencyStore} dependencyStore\n             * @category Models & Stores\n             */\n            /**\n             * A {@link Gantt.data.DependencyStore} instance or a config object.\n             * @config {Gantt.data.DependencyStore|DependencyStoreConfig} dependencyStore\n             * @category Models & Stores\n             */\n            /**\n             * The {@link Gantt.data.ResourceStore store} holding the resources that can be assigned to the tasks in the\n             * task store.\n             *\n             * See also {@link Gantt.model.ResourceModel}\n             * @member {Gantt.data.ResourceStore} resourceStore\n             * @category Models & Stores\n             */\n            /**\n             * A {@link Gantt.data.ResourceStore} instance or a config object.\n             * @config {Gantt.data.ResourceStore|ResourceStoreConfig} resourceStore\n             * @category Models & Stores\n             */\n            /**\n             * The {@link Gantt.data.AssignmentStore store} holding the assignment information.\n             *\n             * See also {@link Gantt.model.AssignmentModel}\n             * @member {Gantt.data.AssignmentStore} assignmentStore\n             * @category Models & Stores\n             */\n            /**\n             * An {@link Gantt.data.AssignmentStore} instance or a config object.\n             * @config {Gantt.data.AssignmentStore|AssignmentStoreConfig} assignmentStore\n             * @category Models & Stores\n             */\n            /**\n             * The {@link Gantt.data.CalendarManagerStore store} holding the calendar information.\n             *\n             * See also {@link Gantt.model.CalendarModel}\n             * @member {Gantt.data.CalendarManagerStore} calendarManagerStore\n             * @category Models & Stores\n             */\n            /**\n             * A {@link Gantt.data.CalendarManagerStore} instance or a config object.\n             * @config {Gantt.data.CalendarManagerStore|CalendarManagerStoreConfig} calendarManagerStore\n             * @category Models & Stores\n             */\n            /**\n             * The {@link Core.data.Store store} containing time ranges to be visualized.\n             *\n             * See also {@link Scheduler.model.TimeSpan}\n             * @member {Core.data.Store} timeRangeStore\n             * @category Models & Stores\n             */\n            /**\n             * Returns an array of critical paths.\n             * Each _critical path_ is an array of critical path nodes.\n             * Each _critical path node_ is an object which contains {@link Gantt/model/TaskModel#field-critical critical task}\n             * and {@link Gantt/model/DependencyModel dependency} leading to the next critical path node.\n             * Dependency is missing if it is the last critical path node in the critical path.\n             * To highlight critical paths, enable {@link Gantt/feature/CriticalPaths} feature.\n             *\n             * ```javascript\n             * // This is an example of critical paths structure\n             * [\n             *      // First path\n             *      [\n             *          {\n             *              event : Gantt.model.TaskModel\n             *              dependency : Gantt.model.DependencyModel\n             *          },\n             *          {\n             *              event : Gantt.model.TaskModel\n             *          }\n             *      ],\n             *      // Second path\n             *      [\n             *          {\n             *              event : Gantt.model.TaskModel\n             *          }\n             *      ]\n             *      // and so on....\n             * ]\n             * ```\n             *\n             * For more details on the _critical path method_ theory please check\n             * [this article](https://en.wikipedia.org/wiki/Critical_path_method).\n             *\n             * @member {Array[]} criticalPaths\n             * @category Scheduling\n             */\n            // root should be always expanded\n            expanded : true\n        };\n    }\n    static get defaultConfig() {\n        return {\n            projectConstraintIntervalClass    : ProjectConstraintInterval,\n            dateConstraintIntervalClass       : DateConstraintInterval,\n            dependencyConstraintIntervalClass : DependencyConstraintInterval,\n            /**\n             * The constructor of the event model class, to be used in the project. Will be set as the {@link Core.data.Store#config-modelClass modelClass}\n             * property of the {@link #property-eventStore}\n             *\n             * @config {Gantt.model.TaskModel} [taskModelClass]\n             * @typings {typeof TaskModel}\n             * @category Models & Stores\n             */\n            taskModelClass : TaskModel,\n            /**\n             * The constructor of the dependency model class, to be used in the project. Will be set as the {@link Core.data.Store#config-modelClass modelClass}\n             * property of the {@link #property-dependencyStore}\n             *\n             * @config {Gantt.model.DependencyModel} [dependencyModelClass]\n             * @typings {typeof DependencyModel}\n             * @category Models & Stores\n             */\n            dependencyModelClass : DependencyModel,\n            /**\n             * The constructor of the resource model class, to be used in the project. Will be set as the {@link Core.data.Store#config-modelClass modelClass}\n             * property of the {@link #property-resourceStore}\n             *\n             * @config {Gantt.model.ResourceModel} [resourceModelClass]\n             * @typings {typeof ResourceModel}\n             * @category Models & Stores\n             */\n            resourceModelClass : ResourceModel,\n            /**\n             * The constructor of the assignment model class, to be used in the project. Will be set as the {@link Core.data.Store#config-modelClass modelClass}\n             * property of the {@link #property-assignmentStore}\n             *\n             * @config {Gantt.model.AssignmentModel} [assignmentModelClass]\n             * @typings {typeof AssignmentModel}\n             * @category Models & Stores\n             */\n            assignmentModelClass : AssignmentModel,\n            /**\n             * The constructor of the calendar model class, to be used in the project. Will be set as the {@link Core.data.Store#config-modelClass modelClass}\n             * property of the {@link #property-calendarManagerStore}\n             *\n             * @config {Gantt.model.CalendarModel} [calendarModelClass]\n             * @typings {typeof CalendarModel}\n             * @category Models & Stores\n             */\n            calendarModelClass : CalendarModel,\n            /**\n             * The constructor to create an task store instance with. Should be a class, subclassing the {@link Gantt.data.TaskStore}\n             * @config {Gantt.data.TaskStore}\n             * @typings {typeof TaskStore}\n             * @category Models & Stores\n             */\n            taskStoreClass  : TaskStore,\n            eventStoreClass : TaskStore,\n            /**\n             * The constructor to create a dependency store instance with. Should be a class, subclassing the {@link Gantt.data.DependencyStore}\n             * @config {Gantt.data.DependencyStore}\n             * @typings {typeof DependencyStore}\n             * @category Models & Stores\n             */\n            dependencyStoreClass : DependencyStore,\n            /**\n             * The constructor to create a dependency store instance with. Should be a class, subclassing the {@link Gantt.data.ResourceStore}\n             * @config {Gantt.data.ResourceStore}\n             * @typings {typeof ResourceStore}\n             * @category Models & Stores\n             */\n            resourceStoreClass : ResourceStore,\n            /**\n             * The constructor to create a dependency store instance with. Should be a class, subclassing the {@link Gantt.data.AssignmentStore}\n             * @config {Gantt.data.AssignmentStore}\n             * @typings {typeof AssignmentStore}\n             * @category Models & Stores\n             */\n            assignmentStoreClass : AssignmentStore,\n            /**\n             * The constructor to create a calendar store instance with. Should be a class, subclassing the {@link Gantt.data.CalendarManagerStore}\n             * @config {Gantt.data.CalendarManagerStore}\n             * @typings {typeof CalendarManagerStore}\n             * @category Models & Stores\n             */\n            calendarManagerStoreClass : CalendarManagerStore,\n            /**\n             * Start date of the project in the ISO 8601 format. Setting this date will constrain all other tasks in the\n             * project to start no earlier than it.\n             *\n             * If this date is not provided, it will be calculated as the earliest date among all tasks.\n             *\n             * Note that the field always returns a `Date`.\n             *\n             * @field {Date} startDate\n             * @accepts {String|Date}\n             */\n            /**\n             * End date of the project in the ISO 8601 format.\n             * The value is calculated as the latest date among all tasks.\n             *\n             * Note that the field always returns a `Date`.\n             *\n             * @field {Date} endDate\n             * @accepts {String|Date}\n             */\n            /**\n             * The scheduling direction of the project tasks.\n             * The `Forward` direction corresponds to the As-Soon-As-Possible (ASAP) scheduling,\n             * `Backward` - to As-Late-As-Possible (ALAP).\n             *\n             * <div class=\"note\">When using backward scheduling on the project, you should either make\n             * both start and end date fields persistent on all tasks, or make both start and end date fields on\n             * the project persistent. This is because for initial calculation, Gantt will need to have the project's\n             * end date upfront, before performing calculations.</div>\n             *\n             * To set the scheduling direction of the individual tasks, use the {@link Gantt.model.TaskModel#field-direction}\n             * field of the TaskModel.\n             *\n             * @field {'Forward'|'Backward'} direction\n             * @default 'Forward'\n             */\n            /**\n             * The initial data, to fill the {@link #property-taskStore taskStore} with.\n             * Should be an array of {@link Gantt.model.TaskModel TaskModels} or configuration objects.\n             *\n             * @config {TaskModelConfig[]|Gantt.model.TaskModel[]}\n             * @category Legacy inline data\n             */\n            tasksData : null,\n            // What is actually used to hold initial tasks, tasksData is transformed in construct()\n            /**\n             * Alias to {@link #config-tasksData}.\n             *\n             * @config {TaskModelConfig[]|Gantt.model.TaskModel[]}\n             * @category Legacy inline data\n             */\n            eventsData : null,\n            /**\n             * The initial data, to fill the {@link #property-dependencyStore dependencyStore} with.\n             * Should be an array of {@link Gantt.model.DependencyModel DependencyModels} or configuration objects.\n             *\n             * @config {DependencyModelConfig[]|Gantt.model.DependencyModel[]}\n             * @category Legacy inline data\n             */\n            dependenciesData : null,\n            /**\n             * The initial data, to fill the {@link #property-resourceStore resourceStore} with.\n             * Should be an array of {@link Gantt.model.ResourceModel ResourceModels} or configuration objects.\n             *\n             * @config {ResourceModelConfig[]|Gantt.model.ResourceModel[]}\n             * @category Legacy inline data\n             */\n            resourcesData : null,\n            /**\n             * The initial data, to fill the {@link #property-assignmentStore assignmentStore} with.\n             * Should be an array of {@link Gantt.model.AssignmentModel AssignmentModels} or configuration objects.\n             *\n             * @config {AssignmentModelConfig[]|Gantt.model.AssignmentModel[]}\n             * @category Legacy inline data\n             */\n            assignmentsData : null,\n            /**\n             * The initial data, to fill the {@link #property-calendarManagerStore calendarManagerStore} with.\n             * Should be an array of {@link Gantt.model.CalendarModel CalendarModels} or configuration objects.\n             *\n             * @config {CalendarModelConfig[]|Gantt.model.CalendarModel[]}\n             * @category Legacy inline data\n             */\n            calendarsData : null,\n            /**\n             * Store that holds time ranges - instances of {@link Scheduler.model.TimeRangeModel} for the\n             * {@link Scheduler.feature.TimeRanges} feature. A store will be automatically created if none is specified.\n             * @config {TimeRangeStoreConfig|Scheduler.data.TimeRangeStore}\n             * @category Models & Stores\n             */\n            timeRangeStore : {},\n            /**\n             * Set to `true` to reset the undo/redo queues of the internal {@link Core.data.stm.StateTrackingManager}\n             * after the Project has loaded. Defaults to `false`\n             * @config {Boolean} resetUndoRedoQueuesAfterLoad\n             * @default false\n             * @category Advanced\n             */\n            resetUndoRedoQueuesAfterLoad : false,\n            convertEmptyParentToLeaf : false,\n            supportShortSyncResponseNote : 'Note: Please consider enabling \"supportShortSyncResponse\" option to allow less detailed sync responses (https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-supportShortSyncResponse)',\n            /**\n             * Enables early rendering in Gantt, by postponing calculations to after the first refresh.\n             *\n             * Requires task data loaded in Gantt to be pre-normalized to function as intended, since it will be used to\n             * render tasks before engine has normalized the data. Given un-normalized data tasks will snap into place\n             * when calculations are finished.\n             *\n             * The Gantt chart will be read-only until the initial calculations are finished.\n             *\n             * @config {Boolean}\n             * @default\n             * @category Advanced\n             */\n            delayCalculation : true,\n            eventStore           : {},\n            assignmentStore      : {},\n            resourceStore        : {},\n            dependencyStore      : {},\n            calendarManagerStore : {},\n            /**\n             * Set to `true` to enable calculation progress notifications.\n             * When enabled, the project fires {@link #event-progress} events and the Gantt chart load mask reacts by showing a progress bar for the Engine calculations.\n             *\n             * **Note**: Enabling progress notifications will impact calculation performance, since it needs to pause calculations to allow the UI to redraw.\n             *\n             * @config {Boolean} enableProgressNotifications\n             * @default false\n             * @category Advanced\n             */\n            /**\n             * Enables/disables the calculation progress notifications.\n             * @member {Boolean} enableProgressNotifications\n             * @category Advanced\n             */\n            /**\n             * Whether to include \"As soon as possible\" and \"As late as possible\" in the list of the constraints,\n             * for compatibility with the MS Project. Enabled by default.\n             *\n             * Note, that when enabling this option, you can not have a regular constraint on the task and ASAP/ALAP flag\n             * in the same time.\n             *\n             * See also docs of the {@link Gantt.model.TaskModel#field-direction direction} field.\n             *\n             * @config {Boolean} includeAsapAlapAsConstraints\n             * @default true\n             */\n            includeAsapAlapAsConstraints : true,\n            stmClass : StateTrackingManager\n        };\n    }\n    static get configurable() {\n        return {\n            /**\n             * Get/set {@link #property-taskStore} data.\n             *\n             * Always returns an array of {@link Gantt.model.TaskModel TaskModels} but also accepts an array of\n             * its configuration objects as input.\n             *\n             * @member {Gantt.model.TaskModel[]} tasks\n             * @accepts {Gantt.model.TaskModel[]|TaskModelConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-taskStore}. Should be an array of\n             * {@link Gantt.model.TaskModel TaskModels} or its configuration objects.\n             *\n             * @config {Gantt.model.TaskModel[]|TaskModelConfig[]}\n             * @category Inline data\n             */\n            tasks : null,\n            /**\n             * Get/set {@link #property-resourceStore} data.\n             *\n             * Always returns an array of {@link Gantt.model.ResourceModel ResourceModels} but also accepts an array\n             * of its configuration objects as input.\n             *\n             * @member {Gantt.model.ResourceModel[]} resources\n             * @accepts {Gantt.model.ResourceModel[]|ResourceModelConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-resourceStore}. Should be an array of\n             * {@link Gantt.model.ResourceModel ResourceModels} or its configuration objects.\n             *\n             * @config {Gantt.model.ResourceModel[]|ResourceModelConfig[]}\n             * @category Inline data\n             */\n            resources : null,\n            /**\n             * Get/set {@link #property-assignmentStore} data.\n             *\n             * Always returns an array of {@link Gantt.model.AssignmentModel AssignmentModels} but also accepts an\n             * array of its configuration objects as input.\n             *\n             * @member {Gantt.model.AssignmentModel[]} assignments\n             * @accepts {Gantt.model.AssignmentModel[]|AssignmentModelConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-assignmentStore}. Should be an array of\n             * {@link Gantt.model.AssignmentModel AssignmentModels} or its configuration objects.\n             *\n             * @config {Gantt.model.AssignmentModel[]|AssignmentModelConfig[]}\n             * @category Inline data\n             */\n            assignments : null,\n            /**\n             * Get/set {@link #property-dependencyStore} data.\n             *\n             * Always returns an array of {@link Gantt.model.DependencyModel DependencyModels} but also accepts an\n             * array of its configuration objects as input.\n             *\n             * @member {Gantt.model.DependencyModel[]} dependencies\n             * @accepts {Gantt.model.DependencyModel[]|DependencyModelConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-dependencyStore}. Should be an array of\n             * {@link Gantt.model.DependencyModel DependencyModels} or its configuration objects.\n             *\n             * @config {Gantt.model.DependencyModel[]|DependencyModelConfig[]}\n             * @category Inline data\n             */\n            dependencies : null,\n            /**\n             * Get/set {@link #property-timeRangeStore} data.\n             *\n             * Always returns an array of {@link Scheduler.model.TimeSpan TimeSpans} but also accepts an\n             * array of its configuration objects as input.\n             *\n             * @member {Scheduler.model.TimeRangeModel[]} timeRanges\n             * @accepts {Scheduler.model.TimeRangeModel[]|TimeRangeModelConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-timeRangeStore}. Should be an array of\n             * {@link Scheduler.model.TimeRangeModel TimeRangeModels} or its configuration objects.\n             *\n             * @config {Scheduler.model.TimeRangeModel[]|TimeRangeModelConfig[]}\n             * @category Inline data\n             */\n            timeRanges : null,\n            /**\n             * Get/set {@link #property-calendarManagerStore} data.\n             *\n             * Always returns a {@link Gantt.model.CalendarModel} array but also accepts an array of its configuration\n             * objects as input.\n             *\n             * @member {Gantt.model.CalendarModel[]} calendars\n             * @accepts {Gantt.model.CalendarModel[]|CalendarModelConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-calendarManagerStore}. Should be a\n             * {@link Gantt.model.CalendarModel} array or its configuration objects.\n             *\n             * @config {Gantt.model.CalendarModel[]|CalendarModelConfig[]}\n             * @category Inline data\n             */\n            calendars : null,\n            /**\n             * The initial data, to fill the {@link #property-timeRangeStore} with.\n             * Should be an array of {@link Scheduler.model.TimeRangeModel TimeRangeModels} or configuration objects.\n             *\n             * @config {TimeSpanConfig[]|Scheduler.model.TimeSpan[]}\n             * @category Legacy inline data\n             */\n            timeRangesData : null,\n            syncDataOnLoad : null,\n            /**\n             * Set to `true` to make STM ignore changes coming from the backend. This will allow user to only undo redo\n             * local changes.\n             * @prp {Boolean}\n             */\n            ignoreRemoteChangesInSTM : false\n        };\n    }\n    //endregion\n    construct(...args) {\n        const config = args[0] || {};\n        // put config to arguments (passed to the parent class \"construct\")\n        args[0] = config;\n        if ('tasksData' in config) {\n            config.eventsData   = config.tasksData;\n            delete config.tasksData;\n        }\n        if ('taskStore' in config) {\n            config.eventStore = config.taskStore;\n            delete config.taskStore;\n        }\n        // Maintain backwards compatibility\n        // default config will be exposed later and won't be applied if a value is exists,\n        // but we should sync eventModelClass/eventStoreClass with taskModelClass/taskStoreClass before all further actions\n        // to apply the correct value in all mixins that uses eventModelClass/eventStoreClass properties only\n        config.eventModelClass = config.taskModelClass || config.eventModelClass || this.getDefaultConfiguration().taskModelClass || this.defaultEventModelClass;\n        config.eventStoreClass = config.taskStoreClass || config.eventStoreClass || this.getDefaultConfiguration().taskStoreClass || this.defaultEventStoreClass;\n        super.construct(...args);\n    }\n    //region Attaching stores\n    // Attach to a store, relaying its change events\n    attachStore(store) {\n        if (this.syncDataOnLoad) {\n            store.syncDataOnLoad = this.syncDataOnLoad;\n        }\n        store.ion({\n            name    : store.$$name,\n            change  : 'relayStoreChange',\n            thisObj : this\n        });\n        super.attachStore(store);\n    }\n    // Detach a store, stop relaying its change events\n    detachStore(store) {\n        store && this.detachListeners(store.$$name);\n        super.detachStore(store);\n    }\n    relayStoreChange(event) {\n        super.relayStoreChange(event);\n        /**\n         * Fired when data in any of the projects stores changes.\n         *\n         * Basically a relayed version of each stores own change event, decorated with which store it originates from.\n         * See the {@link Core.data.Store#event-change store change event} documentation for more information.\n         *\n         * @event change\n         * @param {Gantt.model.ProjectModel} source This project\n         * @param {Core.data.Store} store Affected store\n         * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} action\n         * Name of action which triggered the change. May be one of the options listed above.\n         * @param {Core.data.Model} record Changed record, for actions that affects exactly one record (`'update'`)\n         * @param {Core.data.Model[]} records Changed records, passed for all actions except `'removeAll'`\n         * @param {Object} changes Passed for the `'update'` action, info on which record fields changed\n         */\n        return this.trigger('change', { store : event.source, ...event, source : this });\n    }\n    //endregion\n    get defaultEventModelClass() {\n        return TaskModel;\n    }\n    get defaultEventStoreClass() {\n        return TaskStore;\n    }\n    set taskStore(store) {\n        this.eventStore = store;\n    }\n    get taskStore() {\n        return this.eventStore;\n    }\n    get timeRangeStore() {\n        return this._timeRangeStore;\n    }\n    set timeRangeStore(store) {\n        const me = this;\n        me.detachStore(me._timeRangeStore);\n        me._timeRangeStore = Store.getStore(store, TimeRangeStore);\n        if (!me._timeRangeStore.storeId) {\n            me._timeRangeStore.storeId = 'timeRanges';\n        }\n        me.attachStore(me._timeRangeStore);\n    }\n    async tryInsertChild() {\n        return this.tryPropagateWithChanges(() => {\n            this.insertChild(...arguments);\n        });\n    }\n    /**\n     * Overrides the project owned store identifiers calculation and launches rescheduling.\n     * @method setCalculations\n     * @param {Object} calculations Object providing new _engine_ fields calculation function names.\n     * The object is grouped by store identifiers. For example below code\n     * overrides task {@link Gantt/model/TaskModel#field-startDate}, {@link Gantt/model/TaskModel#field-endDate}\n     * and {@link Gantt/model/TaskModel#field-duration} calculation so\n     * the fields will always simply return their current values:\n     *\n     * ```javascript\n     * // task startDate, endDate and duration will use their userProvidedValue method\n     * // which simply returns their current values as-is\n     * const oldCalculations = await project.setCalculations({\n     *     tasks : {\n     *         startDate : \"userProvidedValue\",\n     *         endDate   : \"userProvidedValue\",\n     *         duration  : \"userProvidedValue\"\n     *     }\n     * })\n     * ```\n     * @returns {Promise} Promise that resolves with an object having the overridden calculations.\n     * The object can be used to toggle the calculations back in the future:\n     * ```javascript\n     * // override event duration calculation\n     * const oldCalculations = await project.setCalculations({\n     *     events : {\n     *         duration  : \"userProvidedValue\"\n     *     }\n     * })\n     * // revert the duration calculation back\n     * project.setCalculations(oldCalculations)\n     * ```\n     * @category Advanced\n     */\n    /**\n     * Returns a calendar of the project. If task has never been assigned a calendar a project's calendar will be returned.\n     *\n     * @method getCalendar\n     * @returns {Gantt.model.CalendarModel}\n     * @category Scheduling\n     */\n    /**\n     * Sets the calendar of the project. Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method setCalendar\n     * @param {Gantt.model.CalendarModel} calendar The new calendar.\n     * @async\n     * @propagating\n     * @category Scheduling\n     */\n    /**\n     * Causes the scheduling engine to re-evaluate the task data and all associated data and constraints\n     * and apply necessary changes.\n     * @async\n     * @function propagate\n     * @propagating\n     * @category Scheduling\n     */\n    /**\n     * Suspend {@link #function-propagate propagation} processing. When propagation is suspended,\n     * calls to {@link #function-propagate} do not proceed, instead a propagate call is deferred\n     * until a matching {@link #function-resumePropagate} is called.\n     * @function suspendPropagate\n     * @category Scheduling\n     */\n    /**\n     * Resume {@link #function-propagate propagation}. If propagation is resumed (calls may be nested\n     * which increments a suspension counter), then if a call to propagate was made during suspension,\n     * {@link #function-propagate} is executed.\n     * @param {Boolean} [trigger] Pass `false` to inhibit automatic propagation if propagate was requested during suspension.\n     * @async\n     * @function resumePropagate\n     * @category Scheduling\n     */\n    /**\n     * Accepts a \"data package\" consisting of data for the projects stores, which is then loaded into the stores.\n     *\n     * The package can hold data for EventStore, AssignmentStore, ResourceStore, DependencyStore and Calendar Manager.\n     * It uses the same format as when creating a project with inline data:\n     *\n     * ```javascript\n     * await project.loadInlineData({\n     *     eventsData       : [...],\n     *     resourcesData    : [...],\n     *     assignmentsData  : [...],\n     *     dependenciesData : [...],\n     *     calendarsData    : [...]\n     * });\n     * ```\n     *\n     * After populating the stores it commits the project, starting its calculations. By awaiting `loadInlineData()` you\n     * can be sure that project calculations are finished.\n     *\n     * @function loadInlineData\n     * @param {Object} dataPackage A data package as described above\n     * @fires load\n     * @async\n     * @category Inline data\n     */\n    /**\n     * Project changes (CRUD operations to records in its stores) are automatically committed on a buffer to the\n     * underlying graph based calculation engine. The engine performs it calculations async.\n     *\n     * By calling this function, the commit happens right away. And by awaiting it you are sure that project\n     * calculations are finished and that references between records are up to date.\n     *\n     * The returned promise is resolved with an object. If that object has `rejectedWith` set, there has been a conflict and the calculation failed.\n     *\n     * ```javascript\n     * // Move a task in time\n     * taskStore.first.shift(1);\n     *\n     * // Trigger calculations directly and wait for them to finish\n     * const result = await project.commitAsync();\n     *\n     * if (result.rejectedWith) {\n     *     // there was a conflict during the scheduling\n     * }\n     * ```\n     *\n     * @async\n     * @propagating\n     * @function commitAsync\n     * @category Scheduling\n     */\n    //region JSON\n    /**\n     * Returns the data from the records of the projects stores, in a format that can be consumed by `loadInlineData()`.\n     *\n     * Used by JSON.stringify to correctly convert this record to json.\n     *\n     *\n     * ```javascript\n     * const project = new ProjectModel({\n     *     eventsData       : [...],\n     *     resourcesData    : [...],\n     *     assignmentsData  : [...],\n     *     dependenciesData : [...]\n     * });\n     *\n     * const json = project.toJSON();\n     *\n     * // json:\n     * {\n     *     eventsData : [...],\n     *     resourcesData : [...],\n     *     dependenciesData : [...],\n     *     assignmentsData : [...]\n     * }\n     * ```\n     *\n     * Output can be consumed by `loadInlineData()`:\n     *\n     * ```javascript\n     * const json = project.toJSON();\n     *\n     * // Plug it back in later\n     * project.loadInlineData(json);\n     * ```\n     *\n     * @returns {Object}\n     * @category Inline data\n     */\n    toJSON() {\n        return {\n            eventsData       : this.eventStore.toJSON(),\n            resourcesData    : this.resourceStore.toJSON(),\n            dependenciesData : this.dependencyStore.toJSON(),\n            assignmentsData  : this.assignmentStore.toJSON()\n        };\n    }\n    /**\n     * Get or set project data (records from its stores) as a JSON string.\n     *\n     * Get a JSON string:\n     *\n     * ```javascript\n     * const project = new ProjectModel({\n     *     eventsData       : [...],\n     *     resourcesData    : [...],\n     *     assignmentsData  : [...],\n     *     dependenciesData : [...]\n     * });\n     *\n     * const jsonString = project.json;\n     *\n     * // jsonString:\n     * '{\"eventsData\":[...],\"resourcesData\":[...],...}'\n     * ```\n     *\n     * Set a JSON string (to populate the project stores):\n     *\n     * ```javascript\n     * project.json = '{\"eventsData\":[...],\"resourcesData\":[...],...}'\n     * ```\n     *\n     * @property {String}\n     * @category Inline data\n     */\n    get json() {\n        return super.json;\n    }\n    set json(json) {\n        if (typeof json === 'string') {\n            json = StringHelper.safeJsonParse(json);\n        }\n        this.loadInlineData(json);\n    }\n    //endregion\n    //#region Inline data\n    get tasks() {\n        return this.taskStore.allRecords;\n    }\n    updateTasks(events) {\n        this.taskStore.data = events;\n    }\n    get calendars() {\n        return this.calendarManagerStore.allRecords;\n    }\n    updateCalendars(calendars) {\n        this.calendarManagerStore.data = calendars;\n    }\n    updateTimeRangesData(ranges) {\n        this.timeRangeStore.data = ranges;\n    }\n    /**\n     * Get or set data of project stores. The returned data is identical to what\n     * {@link #function-toJSON} returns:\n     *\n     * ```javascript\n     *\n     * const data = scheduler.project.inlineData;\n     *\n     * // data:\n     * {\n     *     eventsData : [...],\n     *     resourcesData : [...],\n     *     dependenciesData : [...],\n     *     assignmentsData : [...]\n     * }\n     *\n     *\n     * // Plug it back in later\n     * scheduler.project.inlineData = data;\n     * ```\n     *\n     * @member {Object} inlineData\n     * @category Inline data\n     */\n    get inlineData() {\n        return this.toJSON();\n    }\n    set inlineData(inlineData) {\n        this.json = inlineData;\n    }\n    //#endregion\n    afterChange(toSet, wasSet) {\n        super.afterChange(...arguments);\n        if (wasSet.calendar) {\n            this.trigger('calendarChange');\n        }\n    }\n    refreshWbs(options) {\n        const\n            me = this,\n            children = me.unfilteredChildren ?? me.children;\n        if (children?.length) {\n            // We leverage the refreshWbs() method of TaskModel (our children) to do the work. This node does not\n            // have a wbsValue, so we pass -1 for the index to skip on to just our children.\n            children[0].refreshWbs?.call(me, options, -1);\n        }\n    }\n}\nProjectModel.applyConfigs = true;\nProjectModel._$name = 'ProjectModel';", "import ProjectModel from './ProjectModel.js';\nimport ProjectWebSocketHandlerMixin from '../../SchedulerPro/model/mixin/ProjectWebSocketHandlerMixin.js';\nexport default class WebSocketProjectModel extends ProjectWebSocketHandlerMixin(ProjectModel) {\n    static $name = 'WebSocketProjectModel';\n}\nWebSocketProjectModel._$name = 'WebSocketProjectModel';", "import AsyncHelper from '../../Core/helper/AsyncHelper.js';\nimport DH from '../../Core/helper/DateHelper.js';\nimport RandomGenerator from '../../Core/helper/util/RandomGenerator.js';\n/**\n * @module Gantt/util/ProjectGenerator\n */\nconst\n    year                = new Date().getFullYear(),\n    earlyMondayThisYear = DH.add(DH.startOf(new Date(year, 0, 5), 'week'), 1 - DH.weekStartDay, 'day'),\n    rnd                 = new RandomGenerator();\nfunction getNum(id, token) {\n    return parseInt('' + id + token);\n}\n/**\n * An internal utility class which generates sample project data for Examples and Tests.\n */\nexport default class ProjectGenerator {\n    static async generateAsync(requestedTaskCount, maxProjectSize, progressCallback = null, startDate = earlyMondayThisYear, log = true) {\n        const\n            config = {\n                startDate,\n                tasksData        : [],\n                dependenciesData : []\n            },\n            blockCount = Math.ceil(requestedTaskCount / 10),\n            projectSize = Math.ceil(maxProjectSize / 10),\n            generator = this.generateBlocks(blockCount, projectSize, config.startDate);\n        let count = 0,\n            duration = 0,\n            taskCount = 0,\n            dependencyCount = 0;\n        log && console.time('generate');\n        for (const block of generator) {\n            config.tasksData.push(...block.tasksData);\n            config.dependenciesData.push(...block.dependenciesData);\n            if (block.projectDuration) {\n                duration = Math.max(block.projectDuration, duration);\n            }\n            taskCount += block.taskCount;\n            dependencyCount += block.dependencyCount;\n            if (++count % 1000 === 0) {\n                progressCallback?.(taskCount, dependencyCount, false);\n                await AsyncHelper.animationFrame();\n            }\n        }\n        progressCallback?.(taskCount, dependencyCount, true);\n        config.endDate = DH.add(config.startDate, Math.max(duration, 30), 'days');\n        log && console.timeEnd('generate');\n        return config;\n    }\n    static * generateBlocks(count, projectSize, startDate) {\n        let currentId        = 1,\n            dependencyId     = 1,\n            projectDuration  = 0,\n            blockDuration    = 0,\n            sumDuration      = 0,\n            currentDuration  = 0,\n            currentStartDate = startDate,\n            finishedDuration = 0;\n        function rndDuration(addToTotal = true, resetSum = false) {\n            const value = rnd.nextRandom(5) + 2;\n            if (addToTotal) {\n                blockDuration += value;\n            }\n            if (resetSum) {\n                sumDuration = 0;\n            }\n            sumDuration += value;\n            currentDuration = value;\n            return value;\n        }\n        function nextStartDate(offset = currentDuration) {\n            currentStartDate = DH.add(currentStartDate, offset, 'days');\n            return currentStartDate;\n        }\n        function calculateEndDate() {\n            return DH.add(currentStartDate, currentDuration, 'days');\n        }\n        function storePercentDone(children) {\n            finishedDuration = 0;\n            for (const task of children) {\n                finishedDuration += task.duration * task.percentDone;\n            }\n            return children;\n        }\n        for (let i = 0; i < count; i++) {\n            const\n                blockStartId = currentId,\n                block = {\n                    tasksData : [\n                        {\n                            id        : currentId++,\n                            name      : 'Parent ' + blockStartId,\n                            startDate : nextStartDate(i > 0 ? currentDuration : 0),\n                            expanded  : true,\n                            inactive  : false,\n                            children  : [\n                                {\n                                    id        : currentId++,\n                                    name      : 'Sub-parent ' + getNum(blockStartId, 1),\n                                    startDate : nextStartDate(0),\n                                    expanded  : true,\n                                    inactive  : false,\n                                    children  : storePercentDone([\n                                        {\n                                            id          : currentId++,\n                                            name        : 'Task ' + getNum(blockStartId, 11),\n                                            startDate   : nextStartDate(0),\n                                            duration    : rndDuration(true, true),\n                                            effort      : currentDuration,\n                                            effortUnit  : 'day',\n                                            endDate     : calculateEndDate(),\n                                            percentDone : rnd.nextRandom(100),\n                                            inactive    : false\n                                        },\n                                        {\n                                            id          : currentId++,\n                                            name        : 'Task ' + getNum(blockStartId, 12),\n                                            startDate   : nextStartDate(),\n                                            duration    : rndDuration(),\n                                            effort      : currentDuration,\n                                            effortUnit  : 'day',\n                                            endDate     : calculateEndDate(),\n                                            percentDone : rnd.nextRandom(100),\n                                            inactive    : false\n                                        },\n                                        {\n                                            id          : currentId++,\n                                            name        : 'Task ' + getNum(blockStartId, 13),\n                                            startDate   : nextStartDate(),\n                                            duration    : rndDuration(),\n                                            effort      : currentDuration,\n                                            effortUnit  : 'day',\n                                            endDate     : calculateEndDate(),\n                                            percentDone : rnd.nextRandom(100),\n                                            inactive    : false\n                                        },\n                                        {\n                                            id          : currentId++,\n                                            name        : 'Task ' + getNum(blockStartId, 14),\n                                            startDate   : nextStartDate(),\n                                            duration    : rndDuration(),\n                                            effort      : currentDuration,\n                                            effortUnit  : 'day',\n                                            endDate     : calculateEndDate(),\n                                            percentDone : rnd.nextRandom(100),\n                                            inactive    : false\n                                        }\n                                    ]),\n                                    duration    : sumDuration,\n                                    effort      : sumDuration,\n                                    effortUnit  : 'day',\n                                    percentDone : finishedDuration / sumDuration,\n                                    endDate     : calculateEndDate()\n                                },\n                                {\n                                    id        : currentId++,\n                                    name      : 'Sub-parent ' + getNum(blockStartId, 2),\n                                    startDate : nextStartDate(),\n                                    expanded  : true,\n                                    inactive  : false,\n                                    children  : storePercentDone([\n                                        {\n                                            id          : currentId++,\n                                            name        : 'Task ' + getNum(blockStartId, 21),\n                                            startDate   : nextStartDate(0),\n                                            duration    : rndDuration(true, true),\n                                            effort      : currentDuration,\n                                            effortUnit  : 'day',\n                                            endDate     : calculateEndDate(),\n                                            percentDone : rnd.nextRandom(100),\n                                            inactive    : false\n                                        },\n                                        {\n                                            id          : currentId++,\n                                            name        : 'Task ' + getNum(blockStartId, 22),\n                                            startDate   : nextStartDate(),\n                                            duration    : rndDuration(),\n                                            effort      : currentDuration,\n                                            effortUnit  : 'day',\n                                            endDate     : calculateEndDate(),\n                                            percentDone : rnd.nextRandom(100),\n                                            inactive    : false\n                                        },\n                                        {\n                                            id          : currentId++,\n                                            name        : 'Task ' + getNum(blockStartId, 23),\n                                            startDate   : nextStartDate(),\n                                            duration    : rndDuration(),\n                                            effort      : currentDuration,\n                                            effortUnit  : 'day',\n                                            endDate     : calculateEndDate(),\n                                            percentDone : rnd.nextRandom(100),\n                                            inactive    : false\n                                        }\n                                    ]),\n                                    duration    : sumDuration,\n                                    effort      : sumDuration,\n                                    effortUnit  : 'day',\n                                    percentDone : finishedDuration / sumDuration,\n                                    endDate     : calculateEndDate()\n                                }\n                            ],\n                            duration   : blockDuration,\n                            effort     : blockDuration,\n                            effortUnit : 'day',\n                            endDate    : calculateEndDate()\n                        }\n                    ],\n                    dependenciesData : [\n                        { id : dependencyId++, fromEvent : blockStartId + 2, toEvent : blockStartId + 3 },\n                        { id : dependencyId++, fromEvent : blockStartId + 3, toEvent : blockStartId + 4 },\n                        { id : dependencyId++, fromEvent : blockStartId + 4, toEvent : blockStartId + 5 },\n                        { id : dependencyId++, fromEvent : blockStartId + 5, toEvent : blockStartId + 7 },\n                        { id : dependencyId++, fromEvent : blockStartId + 7, toEvent : blockStartId + 8 },\n                        { id : dependencyId++, fromEvent : blockStartId + 8, toEvent : blockStartId + 9 }\n                    ],\n                    taskCount       : 10,\n                    dependencyCount : 5\n                };\n            const\n                parent     = block.tasksData[0],\n                subParent1 = parent.children[0],\n                subParent2 = parent.children[1];\n            parent.percentDone = (subParent1.duration * subParent1.percentDone + subParent2.duration * subParent2.percentDone) / parent.duration;\n            projectDuration += blockDuration;\n            blockDuration = 0;\n            block.projectDuration = projectDuration;\n            if (i % projectSize !== 0) {\n                block.dependenciesData.push({\n                    id        : dependencyId++,\n                    fromEvent : blockStartId - 2,\n                    toEvent   : blockStartId + 2,\n                    type      : 2,\n                    lag       : 0,\n                    lagUnit   : 'd'\n                });\n                block.dependencyCount++;\n            }\n            else {\n                projectDuration = 0;\n            }\n            currentId++;\n            yield block;\n        }\n    }\n}\nProjectGenerator._$name = 'ProjectGenerator';", "import Parser from '../../Core/util/Parser.js';\nconst { defineParser, alt, seq, string, regexp, succeed, red, isSuccess } = Parser;\n/**\n * @module Gantt/util/ResourceAssignmentParser\n */\n/**\n * Consumes string while it won't hit [ or , character, value parsed will be trimmed of spaces\n *\n * Example: Maxim Bazhenov [100%] rest -> Maxim Bazhenov\n */\nconst resourceNamePEG = defineParser(\n    red(\n        regexp('[^\\\\[\\\\,]+'),\n        name => ({\n            resourceName : name.trim(),\n            units        : 100,\n            match        : name\n        })\n    )\n);\n/**\n * Consumes string while it provides numbers or spaces, value parsed them will be filtered of spaces\n * and just compacted number will be used.\n *\n * Example: 12 34 0 rest -> 12340\n */\nconst integerPEG = defineParser(\n    red(\n        regexp('[0-9\\\\s]+'),\n        (value) => ({\n            value : value.split(/\\s*/).join(''),\n            match : value\n        })\n    )\n);\n/**\n * Consumes one character either (decimal separator) '.' or ','\n *\n * Example: , rest -> ,\n */\nconst decimalSeparatorPEG = defineParser(\n    red(\n        alt(\n            string('.'),\n            string(',')\n        ),\n        (value) => ({\n            value,\n            match : value\n        })\n    )\n);\n/**\n * Consumes units number which might be given as:\n * - number with integer, decimal separator and fractional parts\n * - decimal separator and fractional part, so integer part will be considered 0\n * - just integer\n * value parsed will be transformed into Number type\n *\n * Example:\n * 10.2 rest -> 10.2\n * .2 rest -> 0.2\n * 100 rest -> 100\n */\nconst unitsNumberPEG = defineParser(\n    alt(\n        red(\n            seq(\n                () => integerPEG,\n                () => decimalSeparatorPEG,\n                () => integerPEG\n            ),\n            (integer, sep, fractional) => ({\n                value : Number(`${integer.value}.${fractional.value}`),\n                match : [integer.match, sep.match, fractional.match].join('')\n            })\n        ),\n        red(\n            seq(\n                () => decimalSeparatorPEG,\n                () => integerPEG\n            ),\n            (sep, fractional) => ({\n                value : Number(`0.${fractional.value}`),\n                match : [sep.match, fractional.match].join('')\n            })\n        ),\n        red(\n            () => integerPEG,\n            (value) => ({\n                value : Number(`${value.value}`),\n                match : value.match\n            })\n        )\n    )\n);\n/**\n * Consumes units with %, strips spaces between units number and % character.\n *\n * Example:\n * 70.5  % rest -> 70.5\n */\nconst unitsPersentagePEG = defineParser(\n    alt(\n        red(\n            seq(\n                () => unitsNumberPEG,\n                regexp('\\\\s*\\\\%')\n            ),\n            (units, perc) => ({\n                value : units.value,\n                match : [units.match, perc].join('')\n            })\n        ),\n        red(\n            () => unitsNumberPEG,\n            (units) => ({\n                value : units.value,\n                match : units.match\n            })\n        )\n    )\n);\n/**\n * Consumes units designation string, which should look like [ units with or without % ].\n * Strips spaces before and after [, ] characters.\n *\n * Example:\n * [ 70.2 % ] rest -> 70.2\n */\nconst unitsDesignationPEG = defineParser(\n    red(\n        seq(\n            regexp('\\\\s*\\\\[\\\\s*'),\n            () => unitsPersentagePEG,\n            regexp('\\\\s*\\\\]')\n        ),\n        (startSep, units, endSep) => ({\n            units : units.value,\n            match : [startSep, units.match, endSep].join('')\n        })\n    )\n);\n/**\n * Consumes just single , character stripping spaces before and after\n *\n * Example:\n *     ,     rest -> ,\n */\nconst commaPEG = defineParser(\n    red(\n        regexp('\\\\s*,\\\\s*'),\n        (value) => ({\n            value,\n            match : value\n        })\n    )\n);\n/**\n * Consumes resource assignment string which consists of resources assignment entries separated by , character.\n * Each entry contains following parts:\n * - resource name (mandatory)\n * - units designation (optional, default is 100)\n *\n * Example:\n * Maxim Bazhenov, Mats Bryntse [90], Johan Isaksson [50 %] -> Successful parse result\n *\n * See {@link #function-parse} for parse result analysis\n */\nconst raPEG = defineParser(\n    alt(\n        seq(\n            () => resourceNamePEG,\n            () => unitsDesignationPEG,\n            alt(\n                seq(\n                    () => commaPEG,\n                    () => raPEG\n                ),\n                succeed('')\n            )\n        ),\n        seq(\n            () => resourceNamePEG,\n            alt(\n                seq(\n                    () => commaPEG,\n                    () => raPEG\n                ),\n                succeed('')\n            )\n        )\n    )\n);\n/**\n * Parses resource assignment string into structured set of objects\n *\n * The string format is: `Resource Name [Units%], Other name, ...` where units part is optional as well as % sign\n *\n * @returns {Object} Structured information about parsed assignments\n */\nexport const parse = (str) => {\n    let gotSuccess = false, result = [], rest = '';\n    raPEG(str, (possibleResult) => {\n        if (isSuccess(possibleResult)) {\n            const [, structuredResult, unstracturedRest] = possibleResult;\n            if (structuredResult.length > result.length) {\n                result = structuredResult;\n                rest = unstracturedRest;\n                gotSuccess = true;\n            }\n        }\n    });\n    let position = 0;\n    return gotSuccess ? {\n        rest,\n        assignments : result.reduce(\n            (result, part) => {\n                let currentResource;\n                if (typeof part == 'object') {\n                    if (Object.prototype.hasOwnProperty.call(part, 'resourceName')) {\n                        currentResource = Object.assign({ position }, part);\n                        result.push(currentResource);\n                    }\n                    else {\n                        currentResource = result[result.length - 1];\n                        if (Object.prototype.hasOwnProperty.call(part, 'units')) {\n                            currentResource.units = part.units;\n                        }\n                        currentResource.match += part.match;\n                    }\n                    position += part.match.length;\n                }\n                return result;\n            },\n            []\n        )\n    } : false;\n};\n/**\n * Composes parsable string from parse result object\n *\n * @param {Object} result Parse result like object\n * @param {Boolean} [exactIfPossible=false] Set to true to compose exactly like it was given to {@link #function-parse} and if parse result reverse composition information is available.\n * @returns {String}\n */\nexport const compose = (parseResult, exactIfPossible = false) => {\n    let result = '';\n    if (parseResult.assignments) {\n        result += parseResult.assignments.reduce(\n            (str, { resourceName, units, match }) => {\n                if (match && exactIfPossible) {\n                    str += match;\n                }\n                else {\n                    str += (str.length ? ', ' : '') + `${resourceName} [${units}%]`;\n                }\n                return str;\n            },\n            result\n        );\n    }\n    if (parseResult.rest) {\n        result += parseResult.rest;\n    }\n    if (!exactIfPossible) {\n        result = result.trim();\n    }\n    return result;\n};\n/**\n * Normalizes the given string by parsing it and recomposing it back thus omitting all optional parts\n *\n * @param {String} str\n * @returns {String}\n */\nexport const normalize = (str) => compose(parse(str));\nexport default {\n    parse,\n    compose,\n    normalize\n};\n", "import BrowserHelper from '../../../Core/helper/BrowserHelper.js';\nimport DH from '../../../Core/helper/DateHelper.js';\nimport GridFeatureManager from '../../../Grid/feature/GridFeatureManager.js';\nimport InstancePlugin from '../../../Core/mixin/InstancePlugin.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\nimport XMLHelper from '../../../Core/helper/XMLHelper.js';\nimport Model from '../../../Core/data/Model.js';\nconst\n    MIN_DATE = DH.clearTime(new Date(1900, 5, 15)),\n    taskUnitMap = {\n        minute : 3,\n        hour   : 5,\n        day    : 7,\n        week   : 9,\n        month  : 11\n    },\n    projectUnitMap = {\n        minute : 1,\n        hour   : 2,\n        day    : 3,\n        week   : 4,\n        month  : 5\n    },\n    constraintMap = {\n        finishnoearlierthan : 6,\n        finishnolaterthan   : 7,\n        mustfinishon        : 3,\n        muststarton         : 2,\n        startnoearlierthan  : 4,\n        startnolaterthan    : 5\n    },\n    typeMap = {\n        FixedDuration : 1,\n        FixedUnits    : 0,\n        FixedEffort   : 2,\n        Normal        : 0\n    },\n    dependencyTypeMap = {\n        0 : 3,\n        1 : 2,\n        2 : 1,\n        3 : 0\n    };\n/**\n * @module Gantt/feature/export/MspExport\n */\n/**\n * A feature that allows exporting Gantt to Microsoft Project without involving a server.\n *\n * [Microsoft Project XML specification](https://docs.microsoft.com/en-us/office-project/xml-data-interchange/introduction-to-project-xml-data)\n *\n * This feature supports exporting to an XML format that can be imported by MS Project Professional 2013 / 2019.\n *\n * Here is an example of how to add the feature:\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         mspExport : {\n *             // Choose the filename for the exported file\n *             filename : 'Gantt Export'\n *         }\n *     }\n * });\n * ```\n *\n * And how to trigger an export:\n *\n * ```javascript\n * gantt.features.mspExport.export({\n *     filename : 'Gantt Export'\n * })\n * ```\n *\n * ## Processing of exported data\n *\n * Use the {@link #event-dataCollected} event to process exported data before it is written to the XML-file:\n *\n * ```javascript\n * // set listener on Gantt construction step\n * const gantt = new Gantt({\n *     ---\n *     features : {\n *         mspExport : {\n *             listeners : {\n *                 dataCollected : {{ data }} => {\n *                     // patch <Project><Name> tag content\n *                     data.Name = 'My Cool Project';\n *                 }\n *             }\n *         }\n *     }\n * });\n *\n * // set listener at runtime\n * gantt.features.mspExport.on({\n *     dataCollected : {{ data }} => {\n *         // patch <Project><Name> tag content\n *         data.Name = 'My Cool Project';\n *     }\n * })\n * ```\n *\n * This feature is **disabled** by default.\n * For info on enabling it, see {@link Grid/view/mixin/GridFeatures}.\n *\n * @classtype mspExport\n *\n * @extends Core/mixin/InstancePlugin\n * @feature\n * @demo Gantt/msprojectexport\n */\nexport default class MspExport extends InstancePlugin {\n    static $name = 'MspExport';\n    resourceCalendar = new Map();\n    static configurable = {\n        /**\n         * Name of the exported file (including extension)\n         * @config {String}\n         * @default\n         */\n        filename : null,\n        /**\n         * Defines how dates are formatted for MS Project. Information about formats can be found in {@link Core.helper.DateHelper}\n         * @config {String}\n         * @default\n         */\n        dateFormat : 'YYYY-MM-DDTHH:mm:ss',\n        /**\n         * Defines how time is formatted for MSProject. Information about formats can be found in {@link Core.helper.DateHelper}\n         * @config {String}\n         * @default\n         */\n        timeFormat : 'HH:mm:ss',\n        /**\n         * Defines the version used for MSProject (2013 or 2019)\n         * @config {Number}\n         * @default\n         */\n        msProjectVersion : 2019\n    };\n    /**\n     * Generate the export data to generate the XML.\n     * @returns {Object} Gantt data on MS Project structure to generate the XML\n     * @private\n     */\n    generateExportData() {\n        const me = this;\n        me.tasks = me.collectProjectTasks();\n        return {\n            ...me.getMsProjectConfig(),\n            Calendars : {\n                Calendar : me.getCalendarsData()\n            },\n            Tasks : {\n                Task : me.getTasksData()\n            },\n            Resources : {\n                Resource : me.getResourcesData()\n            },\n            Assignments : {\n                Assignment : me.getAssignmentsData()\n            }\n        };\n    }\n    /**\n     * Generates and downloads the .XML file.\n     * @param {Object} [config] Optional configuration object, which overrides the initial settings of the feature/exporter.\n     * @param {String} [config.filename] The filename to use\n     */\n    export(config = {}) {\n        const me = this;\n        if (me.disabled) {\n            return;\n        }\n        me.resourceCalendar.clear();\n        config = ObjectHelper.assign({}, me.config, config);\n        if (!config.filename) {\n            config.filename = `${me.client.$$name}.xml`;\n        }\n        /**\n         * Fires on the owning Gantt before export starts. Return `false` to cancel the export.\n         * @event beforeMspExport\n         * @preventable\n         * @on-owner\n         * @param {Object} config Export config\n         */\n        if (me.client.trigger('beforeMspExport', { config }) !== false) {\n            const data = me.generateExportData(config);\n            /**\n             * Fires when project data is collected to an object\n             * that is going to be exported as XML text.\n             *\n             * The event can be used to modify exported data before it is written to the XML-file:\n             *\n             * ```javascript\n             * const gantt = new Gantt({\n             *     ---\n             *     features : {\n             *         mspExport : {\n             *             listeners : {\n             *                 // listener to process exported data\n             *                 dataCollected : {{ data }} => {\n             *                     // patch <Project><Name> tag content\n             *                     data.Name = 'My Cool Project';\n             *                 }\n             *             }\n             *         }\n             *     }\n             * });\n             * ```\n             * @event dataCollected\n             * @param {Object} config Export config\n             * @param {Object} data Collected data to export\n             */\n            me.trigger('dataCollected', { config, data });\n            const\n                fileContent = me.convertToXml(data),\n                eventParams = { config, data, fileContent };\n            /**\n             * Fires on the owning Gantt when project content is exported\n             * to XML, before the XML is downloaded by the browser.\n             * @event mspExport\n             * @on-owner\n             * @param {Object} config Export config\n             * @param {String} fileContent Exported XML-file content\n             */\n            me.client.trigger('mspExport', eventParams);\n            BrowserHelper.download(config.filename, `data:text/xml;charset=utf-8,${encodeURIComponent(eventParams.fileContent)}`);\n        }\n    }\n    /**\n     * Convert Object data to XML.\n     * @param {Object} data The Object with data.\n     * @returns {String} The XML data.\n     * @private\n     */\n    convertToXml(data) {\n        return XMLHelper.convertFromObject(data, {\n            rootName            : 'Project',\n            elementName         : '',\n            xmlns               : 'http://schemas.microsoft.com/project',\n            rootElementForArray : false\n        });\n    }\n    /**\n     * Get the XML configurations in MS Project format.\n     * @returns {Object} MS Project configurations for the XML\n     * @private\n     */\n    getMsProjectConfig() {\n        const\n            me = this,\n            dateFormat = me.dateFormat,\n            { project } = me.client,\n            fileName = me.filename || me.client.$$name;\n        return {\n            CalendarUID                : me.getCalendarUID(project.effectiveCalendar),\n            CreationDate               : DH.format(new Date(), dateFormat),\n            SplitsInProgressTasks      : 0,\n            MoveCompletedEndsBack      : 0,\n            MoveRemainingStartsBack    : 0,\n            MoveRemainingStartsForward : 0,\n            MoveCompletedEndsForward   : 0,\n            NewTaskStartDate           : 0,\n            DaysPerMonth               : project.daysPerMonth,\n            FinishDate                 : DH.format(project.endDate, dateFormat),\n            MinutesPerDay              : project.hoursPerDay * 60,\n            MinutesPerWeek             : project.daysPerWeek * project.hoursPerDay * 60,\n            Name                       : fileName,\n            ScheduleFromStart          : project.direction === 'Forward' ? 1 : 0,\n            StartDate                  : DH.format(project.startDate, dateFormat),\n            Title                      : fileName,\n            WorkFormat                 : projectUnitMap[project.effortUnit],\n            ProjectExternallyEdited    : 0\n        };\n    }\n    /**\n     * Format Calendars from Gantt to MS Project format.\n     * @returns {Array} Calendars array formatted\n     * @private\n     */\n    getCalendarsData() {\n        const\n            me = this,\n            {\n                calendarManagerStore,\n                project\n            } = me.client,\n            { effectiveCalendar } = project,\n            calendars             = calendarManagerStore.allRecords || [];\n        // if project's calendar is not included on calendars array, include it\n        if (!calendarManagerStore.getByInternalId(effectiveCalendar.internalId)) {\n            calendars.push(effectiveCalendar);\n        }\n        // Each resource in MS Project data model has its own calendar\n        // so let's make dummy calendars for all resources\n        me.client.resources.forEach(resource => {\n            const calendar = new resource.effectiveCalendar.constructor({ name : resource.name });\n            // parent calendar for this dummy will be the real calendar the resource uses\n            calendar.parent = resource.effectiveCalendar;\n            calendar.isResourceCalendar = true;\n            // remember the resource calendar\n            me.resourceCalendar.set(resource, calendar);\n            calendars.push(calendar);\n        });\n        return calendars.map(calendar => {\n            const uid = me.getCalendarUID(calendar);\n            let\n                calendarName    = calendar.name || calendar.internalId,\n                baseCalendarUID = 0,\n                isBaseCalendar  = 0;\n            // MS Project does not support calendars hierarchy fully\n            // it has two level hierarchy:\n            // - first level - so called base calendars\n            // - second level - any other calendars (including resource calendars) that extend the base ones\n            if (!calendar.isResourceCalendar) {\n                calendarName    += ' - imported';\n                // all non-dummy calendars we import as base calendars (the one that can be extended in MSP)\n                isBaseCalendar  = 1;\n            }\n            else {\n                baseCalendarUID = me.getCalendarUID(calendar.parent, 0);\n            }\n            return {\n                ID              : uid,\n                UID             : uid,\n                BaseCalendarUID : baseCalendarUID,\n                // all non-dummy calendars we import as base calendars (the one that can be extended in MSP)\n                IsBaseCalendar  : isBaseCalendar,\n                Name            : calendarName,\n                WeekDays        : {\n                    WeekDay : me.formatWeekDays(calendar)\n                }\n            };\n        });\n    }\n    /**\n     * Format intervals to MS project format for the WeekDays property.\n     * @param {Array} calendar Array of intervals data.\n     * @returns {Array} Array with data formatted\n     * @private\n     */\n    formatWeekDays(calendar) {\n        const\n            { timeFormat } = this,\n            ticks          = [],\n            daysData       = {};\n        let startDate = MIN_DATE,\n            endDate;\n        for (let i = 0; i < 7; i++) {\n            // week day index\n            const day = startDate.getDay();\n            daysData[day] = {\n                DayType    : day + 1,\n                DayWorking : 0\n            };\n            endDate = DH.clearTime(DH.add(startDate, 1, 'day'));\n            ticks.push({ startDate, endDate });\n            // proceed to next day\n            startDate = endDate;\n        }\n        // clone original calendar to get rid of its existing caches\n        calendar = calendar.copy();\n        const\n            // dummy calendar with 7 day borders ..to force forEachAvailabilityInterval to stop on each day start\n            dummyCalendar        = new calendar.constructor({ intervals : ticks }),\n            calendarsCombination = this.client.project.combineCalendars([calendar, dummyCalendar]);\n        calendarsCombination.forEachAvailabilityInterval(\n            { startDate : MIN_DATE, endDate },\n            (startDate, endDate, calendarCacheInterval) => {\n                const\n                    calendarsStatus   = calendarCacheInterval.getCalendarsWorkStatus(),\n                    dayData           = daysData[startDate.getDay()];\n                // if the calendar has working interval for that period\n                if (calendarsStatus.get(calendar)) {\n                    // consider the day as working\n                    dayData.DayWorking = 1;\n                    dayData.WorkingTimes = dayData.WorkingTimes || { WorkingTime : [] };\n                    // put that time range\n                    dayData.WorkingTimes.WorkingTime.push({\n                        FromTime : DH.format(startDate, timeFormat),\n                        ToTime   : DH.format(endDate, timeFormat)\n                    });\n                }\n            }\n        );\n        return Object.values(daysData);\n    }\n    /**\n     * Format intervals to MS project format for the WorkWeeks property.\n     * @param {Array} Array of intervals data.\n     * @returns {Array} Array with data formatted\n     * @private\n     */\n    collectProjectTasks() {\n        const result = [];\n        this.client.store.rootNode.traverse(node => result.push(node), true);\n        return result;\n    }\n    /**\n     * Format Tasks from Gantt to MS Project format.\n     * @returns {Array} Tasks array formatted\n     * @private\n     */\n    getTasksData() {\n        const\n            me             = this,\n            { project }    = me.client,\n            isForward      = project.direction == 'Forward',\n            { dateFormat, tasks } = me;\n        return tasks.map(task => {\n            const\n                { startDate, endDate, wbsCode } = task,\n                // filter out broken dependencies\n                predecessors     = task.predecessors.filter(({ fromEvent }) => fromEvent),\n                durationMs       = project.convertDuration(task.duration, task.durationUnit, 'millisecond'),\n                effortMs         = project.convertDuration(task.effort, task.effortUnit, 'millisecond'),\n                actualDurationMs = task.percentDone * 0.01 * durationMs,\n                startDateStr     = DH.format(startDate, dateFormat),\n                endDateStr       = DH.format(endDate, dateFormat),\n                durationStr      = MspExport.convertDurationToMspDuration(durationMs, 'ms'),\n                uid              = me.getTaskUID(task),\n                result           = {\n                    UID               : uid,\n                    Name              : task.name,\n                    Active            : me.inactive ? 0 : 1,\n                    Manual            : task.manuallyScheduled ? 1 : 0,\n                    Type              : task.isLeaf ? typeMap[task.schedulingMode] : 1,\n                    IsNull            : startDate && endDate ? 0 : 1,\n                    WBS               : wbsCode,\n                    OutlineNumber     : wbsCode,\n                    OutlineLevel      : wbsCode.split('.').length,\n                    Start             : startDateStr,\n                    Finish            : endDateStr,\n                    Duration          : durationStr,\n                    ManualStart       : startDateStr,\n                    ManualFinish      : endDateStr,\n                    ManualDuration    : durationStr,\n                    DurationFormat    : taskUnitMap[task.durationUnit],\n                    Work              : MspExport.convertDurationToMspDuration(effortMs, 'ms'),\n                    EffortDriven      : task.effortDriven ? 1 : 0,\n                    Estimated         : 0,\n                    Milestone         : task.isMilestone ? 1 : 0,\n                    Summary           : task.isLeaf ? 0 : 1,\n                    PercentComplete   : Math.round(task.percentDone),\n                    ActualStart       : startDateStr,\n                    ActualDuration    : MspExport.convertDurationToMspDuration(actualDurationMs, 'ms'),\n                    RemainingDuration : MspExport.convertDurationToMspDuration(durationMs - actualDurationMs, 'ms'),\n                    PredecessorLink   : predecessors.map(predecessor => ({\n                        LagFormat      : taskUnitMap[predecessor.lagUnit],\n                        LinkLag        : project.convertDuration(predecessor.lag, predecessor.lagUnit, 'minute') * 10,\n                        PredecessorUID : me.getTaskUID(predecessor.fromEvent),\n                        Type           : dependencyTypeMap[predecessor.type]\n                    })),\n                    Baseline : task.baselines.map((baseline, index) => ({\n                        Number   : index,\n                        Finish   : DH.format(baseline.endDate, dateFormat),\n                        Start    : DH.format(baseline.startDate, dateFormat),\n                        Duration : MspExport.convertDurationToMspDuration(baseline.duration, baseline.durationUnit)\n                    })),\n                    IgnoreResourceCalendar : task.ignoreResourceCalendar ? 1 : 0,\n                    Rollup                 : task.rollup ? 1 : 0,\n                    ConstraintType         : task.constraintType ? constraintMap[task.constraintType] : (isForward ? 0 : 1),\n                    CalendarUID            : me.getCalendarUID(task.calendar)\n                };\n            if (task.constraintDate) {\n                result.ConstraintDate = DH.format(task.constraintDate, dateFormat);\n            }\n            if (task.deadlineDate) {\n                result.Deadline = DH.format(task.deadlineDate, dateFormat);\n            }\n            if (task.note) {\n                result.Notes = task.note;\n            }\n            return result;\n        });\n    }\n    getTaskUID(task) {\n        return task.internalId;\n    }\n    getCalendarUID(calendar, fallbackValue = -1) {\n        return calendar && !calendar.isRoot ? calendar.internalId : fallbackValue;\n    }\n    /**\n     * Format Resources from Gantt to MS Project format.\n     * @returns {Array} Resources array formatted\n     * @private\n     */\n    getResourcesData() {\n        return this.client.resources.map(resource => ({\n            UID         : resource.internalId,\n            Name        : resource.name,\n            Type        : 1,\n            MaxUnits    : '1.00',\n            PeakUnits   : '1.00',\n            // seems for version 2013 setting the calendar id it breaks so only Project level calendar is importable\n            CalendarUID : this.msProjectVersion === 2013 ? null : this.getCalendarUID(this.resourceCalendar.get(resource))\n        }));\n    }\n    /**\n     * Format Assignments from Gantt to MS Project format.\n     * @returns {Array} Assignments array formatted\n     * @private\n     */\n    getAssignmentsData() {\n        const result = [];\n        // for version 2013 the assignments doesn't work\n        if (this.msProjectVersion === 2013) {\n            return result;\n        }\n        const { project } = this.client;\n        for (const task of this.tasks) {\n            const\n                assigned    = task.assigned,\n                taskUID     = this.getTaskUID(task),\n                percentDone = Math.round(task.percentDone),\n                start       = DH.format(task.startDate, this.dateFormat),\n                finish      = DH.format(task.endDate, this.dateFormat);\n            if (assigned.size) {\n                for (const assignment of assigned) {\n                    const\n                        assignmentWorkMs          = project.convertDuration(assignment.effort, task.effortUnit, 'millisecond'),\n                        actualAssignmentWorkMs    = project.convertDuration(assignment.actualEffort, task.effortUnit, 'millisecond'),\n                        remainingAssignmentWorkMs = assignmentWorkMs - actualAssignmentWorkMs;\n                    result.push({\n                        UpdateNeeded        : 0,\n                        UID                 : assignment.internalId,\n                        TaskUID             : taskUID,\n                        ResourceUID         : assignment.resource.internalId,\n                        PercentWorkComplete : percentDone,\n                        Work                : MspExport.convertDurationToMspDuration(assignmentWorkMs, 'ms'),\n                        ActualWork          : MspExport.convertDurationToMspDuration(actualAssignmentWorkMs, 'ms'),\n                        RemainingWork       : MspExport.convertDurationToMspDuration(remainingAssignmentWorkMs, 'ms'),\n                        Start               : start,\n                        Finish              : finish,\n                        Units               : assignment.units / 100\n                    });\n                }\n            }\n            else {\n                const\n                    effortMs       = project.convertDuration(task.effort, task.effortUnit, 'millisecond'),\n                    actualEffortMs = effortMs * percentDone * 0.01,\n                    effortStr      = MspExport.convertDurationToMspDuration(effortMs, 'ms');\n                result.push({\n                    UID                 : Model._internalIdCounter++,\n                    TaskUID             : taskUID,\n                    ResourceUID         : -65535,\n                    PercentWorkComplete : percentDone,\n                    ActualWork          : MspExport.convertDurationToMspDuration(actualEffortMs, 'ms'),\n                    RemainingWork       : MspExport.convertDurationToMspDuration(effortMs - actualEffortMs, 'ms'),\n                    Start               : start,\n                    Finish              : finish,\n                    Units               : 1,\n                    Work                : effortStr\n                });\n            }\n        }\n        return result;\n    }\n    /**\n     * Convert to MS Project Span Date Time format.\n     * @param {Number} value The value to be converted.\n     * @param {String} unit The unit of the value to be converted\n     * @returns {String} The value formatted to \"PTnHnMnS\". E.g: PT10H30M, PT6H20M13S\n     * @private\n     */\n    static convertDurationToMspDuration(value, unit) {\n        if (value == null) {\n            return '';\n        }\n        const\n            delta = DH.getDelta(DH.as('ms', value, unit), { ignoreLocale : true, maxUnit : 'hour' }),\n            { hour = 0, minute = 0, second = 0 } = delta;\n        return `PT${hour}H${minute}M${second}S`;\n    }\n}\nMspExport._$name = 'MspExport'; GridFeatureManager.registerFeature(MspExport, false, 'Gantt');\n", "import Base from '../../../Core/Base.js';\nimport DomDataStore from '../../../Core/data/DomDataStore.js';\n/**\n * @module Gantt/view/mixin/GanttDom\n */\nconst hyphenRe = /-/g;\n/**\n * An object which encapsulates a Gantt timeline tick context based on a DOM event. This will include\n * the row (task) information and the tick and time information for a DOM pointer event detected\n * in the timeline.\n * @typedef {Object} GanttTimelineContext\n * @property {Event} domEvent The DOM event which triggered the context change.\n * @property {HTMLElement} eventElement If the `domEvent` was on an event bar, this will be the event bar element.\n * @property {HTMLElement} cellElement The cell element under the `domEvent`\n * @property {Date} date The date corresponding to the `domEvent` position in the timeline\n * @property {Scheduler.model.TimeSpan} tick A {@link Scheduler.model.TimeSpan} record which encapsulates the contextual tick\n * @property {Number} tickIndex The contextual tick index. This may be fractional.\n * @property {Number} tickParentIndex The integer contextual tick index.\n * @property {Date} tickStartDate The start date of the contextual tick.\n * @property {Date} tickEndDate The end date of the contextual tick.\n * @property {Grid.row.Row} row The contextual {@link Grid.row.Row}\n * @property {Number} index The contextual row index\n * @property {Gantt.model.TaskModel} [taskRecord] The contextual task record (if any) if the event source is a `Gantt`\n */\n/**\n * Fired when the pointer-activated {@link Scheduler.view.mixin.TimelineDomEvents#property-timelineContext} has changed.\n * @event timelineContextChange\n * @override // this has different TimelineContext type from the one in TimelineDomEvents\n * @param {GanttTimelineContext} oldContext The tick/task context being deactivated.\n * @param {GanttTimelineContext} context The tick/task context being activated.\n */\n/**\n * Mixin with TaskModel <-> HTMLElement mapping functions\n *\n * @mixin\n */\nexport default Target => class GanttDom extends (Target || Base) {\n    static get $name() {\n        return 'GanttDom';\n    }\n    // Alias for resolveTaskRecord method to satisfy the scheduler naming requirements.\n    resolveEventRecord(element) {\n        return this.resolveTaskRecord(element);\n    }\n    /**\n     * Returns the task record for a DOM element\n     * @param {HTMLElement} element The DOM node to lookup\n     * @returns {Gantt.model.TaskModel} The task record\n     */\n    resolveTaskRecord(element) {\n        const eventElement = element.closest(this.eventSelector);\n        return eventElement ? this.store.getById(eventElement.dataset.taskId) : this.getRecordFromElement(element);\n    }\n    /**\n     * Product agnostic method which yields the {@link Gantt.model.TaskModel} record which underpins the row which\n     * encapsulates the passed element. The element can be a grid cell, or an event element, and the result\n     * will be a {@link Gantt.model.TaskModel}\n     * @param {HTMLElement|Event} elementOrEvent The HTML element or DOM event to resolve a record from\n     * @returns {Gantt.model.TaskModel} The resource corresponding to the element, or null if not found.\n     */\n    resolveRowRecord(elementOrEvent) {\n        return this.resolveTaskRecord(elementOrEvent);\n    }\n    /**\n     * Relays keydown events as taskKeyDown if we have a selected task(s).\n     * @private\n     */\n    onElementKeyDown(event) {\n        const taskRecord = this.resolveTaskRecord(event.target);\n        super.onElementKeyDown(event);\n        if (taskRecord) {\n            this.trigger('taskKeyDown', {\n                taskRecord,\n                event\n            });\n        }\n    }\n    /**\n     * Relays keyup events as taskKeyUp if we have a selected task(s).\n     * @private\n     */\n    onElementKeyUp(event) {\n        const taskRecord = this.resolveTaskRecord(event.target);\n        super.onElementKeyUp(event);\n        if (taskRecord) {\n            this.trigger('taskKeyUp', {\n                taskRecord,\n                event\n            });\n        }\n    }\n    /**\n     * Returns the HTMLElement representing a task record.\n     *\n     * @param {Gantt.model.TaskModel} taskRecord A task record\n     * @param {Boolean} [inner] Specify `false` to return the task wrapper element\n     *\n     * @returns {HTMLElement} The element representing the task record\n     */\n    getElementFromTaskRecord(taskRecord, inner = true) {\n        return this.taskRendering.getElementFromTaskRecord(taskRecord, inner);\n    }\n    // Alias to make scheduler features applied to Gantt happy\n    getElementFromEventRecord(eventRecord) {\n        return this.getElementFromTaskRecord(eventRecord);\n    }\n    /**\n     * Generates the element `id` for a task element. This is used when\n     * recycling an event div which has been moved from one resource to\n     * another. The event is assigned its new render id *before* being\n     * returned to the free pool, so that when the render engine requests\n     * a div from the free pool, the same div will be returned and it will\n     * smoothly transition to its new position.\n     * @param {Scheduler.model.EventModel} taskRecord\n     * @private\n     */\n    getEventRenderId(taskRecord) {\n        return `${this.id.toString().replace(hyphenRe, '_')}-${taskRecord.id}`;\n    }\n    /**\n     * In Gantt, the task is the row, so it's valid to resolve a mouse event on a task to the TimeAxisColumn's cell.\n     *\n     * This method find the cell location of the passed event. It returns an object describing the cell.\n     * @param {Event} event A Mouse, Pointer or Touch event targeted at part of the grid.\n     * @returns {Object} An object containing the following properties:\n     * - `cellElement` - The cell element clicked on.\n     * - `columnId` - The `id` of the column clicked under.\n     * - `record` - The {@link Core.data.Model record} clicked on.\n     * - `id` - The `id` of the {@link Core.data.Model record} clicked on.\n     * @private\n     * @category Events\n     */\n    getEventData(event) {\n        const\n            me     = this,\n            record = me.resolveTimeSpanRecord(event.target);\n        // If the event was on a task, then we're in one of the TimeAxisColumn's cells.\n        if (record) {\n            const\n                cellElement = me.getCell({\n                    record,\n                    column : me.timeAxisColumn\n                }),\n                cellData = DomDataStore.get(cellElement),\n                id       = cellData.id,\n                columnId = cellData.columnId;\n            return {\n                cellElement,\n                cellData,\n                columnId,\n                id,\n                record,\n                cellSelector : { id, columnId }\n            };\n        }\n        else {\n            return super.getEventData(event);\n        }\n    }\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n", "import Base from '../../../Core/Base.js';\nimport Rectangle from '../../../Core/helper/util/Rectangle.js';\nimport DH from '../../../Core/helper/DateHelper.js';\n/**\n * @module Gantt/view/mixin/GanttRegions\n */\n/**\n * Functions to get regions (bounding boxes) for gantt, tasks etc.\n *\n * @mixin\n */\nexport default Target => class GanttRegions extends (Target || Base) {\n    static get $name() {\n        return 'GanttRegions';\n    }\n    /**\n     * Gets the region represented by the timeline and optionally only for a single task. Returns `null` if passed a\n     * task that is filtered out or not part of the task store.\n     * @param {Gantt.model.TaskModel} taskRecord (optional) The task record\n     * @returns {Core.helper.util.Rectangle|null} The region of the schedule\n     */\n    getScheduleRegion(taskRecord, local = true, dateConstraints) {\n        const\n            me                                   = this,\n            { timeAxisSubGridElement, timeAxis } = me;\n        let region;\n        if (taskRecord) {\n            const\n                taskElement = me.getElementFromTaskRecord(taskRecord),\n                row         = me.getRowById(taskRecord.id);\n            if (!row) {\n                return null;\n            }\n            region = Rectangle.from(row.getElement('normal'), timeAxisSubGridElement);\n            if (taskElement) {\n                const taskRegion = Rectangle.from(taskElement, timeAxisSubGridElement);\n                region.y      = taskRegion.y;\n                region.bottom = taskRegion.bottom;\n            }\n            else {\n                region.y += me.barMargin;\n                region.bottom -= me.barMargin;\n            }\n        }\n        else {\n            region       = Rectangle.from(timeAxisSubGridElement).moveTo(null, 0);\n            region.width = timeAxisSubGridElement.scrollWidth;\n            region.y      = region.y + me.barMargin;\n            region.bottom = region.bottom - me.barMargin;\n        }\n        const\n            taStart        = timeAxis.startDate,\n            taEnd          = timeAxis.endDate,\n            { start, end } = dateConstraints || {};\n        if (start && end && !timeAxis.timeSpanInAxis(start, end)) {\n            return null;\n        }\n        if (!start && !end) {\n            dateConstraints = me.getDateConstraints?.(taskRecord) || {\n                start : taStart,\n                end   : taEnd\n            };\n        }\n        let startX = me.getCoordinateFromDate(dateConstraints.start ? DH.max(taStart, dateConstraints.start) : taStart),\n            endX   = me.getCoordinateFromDate(dateConstraints.end ? DH.min(taEnd, dateConstraints.end) : taEnd);\n        if (!local) {\n            startX = me.translateToPageCoordinate(startX);\n            endX   = me.translateToPageCoordinate(endX);\n        }\n        region.x     = Math.min(startX, endX);\n        region.width = Math.max(startX, endX) - Math.min(startX, endX);\n        return region;\n    }\n    translateToPageCoordinate(x) {\n        const element = this.timeAxisSubGridElement;\n        return x + element.getBoundingClientRect().left - element.scrollLeft;\n    }\n    // Decide if a record is inside a collapsed tree node, or inside a collapsed group (using grouping feature)\n    isRowVisible(taskRecord) {\n        // records in collapsed groups/branches etc. are removed from processedRecords\n        return this.store.indexOf(taskRecord) >= 0;\n    }\n    /**\n     * Get the region for a specified task\n     * @param {Gantt.model.TaskModel} taskRecord\n     * @param {Boolean} [includeOutside]\n     * @param {Boolean} [inner] Specify true to return the box for the task bar within the wrapper.\n     * @returns {Core.helper.util.Rectangle}\n     */\n    getTaskBox(taskRecord, includeOutside = false, inner = false) {\n        return this.taskRendering.getTaskBox(...arguments);\n    }\n    getSizeAndPosition() {\n        return this.taskRendering.getSizeAndPosition(...arguments);\n    }\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n", "import Base from '../../../Core/Base.js';\nimport DomHelper from '../../../Core/helper/DomHelper.js';\n/**\n * @module Gantt/view/mixin/GanttScroll\n */\nconst defaultScrollOptions = {\n    block      : 'nearest',\n    edgeOffset : 20\n};\n/**\n * Functions for scrolling to tasks, dates etc.\n *\n * @mixin\n */\nexport default Target => class GanttScroll extends (Target || Base) {\n    static get $name() {\n        return 'GanttScroll';\n    }\n    /**\n     * Scrolls a task record into the viewport.\n     *\n     * @param {Gantt.model.TaskModel} taskRecord The task record to scroll into view\n     * @param {BryntumScrollOptions} [options] How to scroll.\n     * @returns {Promise} A Promise which resolves when the scrolling is complete.\n     */\n    async scrollTaskIntoView(taskRecord, options = defaultScrollOptions) {\n        const me = this;\n        let taskStart                                            = taskRecord.startDate,\n            taskEnd                                              = taskRecord.endDate,\n            { startDate : timeAxisStart, endDate : timeAxisEnd } = me.timeAxis;\n        if (options.edgeOffset == null) {\n            options.edgeOffset = 20;\n        }\n        if (!taskRecord.isScheduled) {\n            return this.scrollRowIntoView(taskRecord, options);\n        }\n        if (me.timeAxisSubGrid.collapsed) {\n            return;\n        }\n        // For infinite scroll: treat tasks that are in the buffer area as outside\n        if (me.infiniteScroll) {\n            const\n                scrollable     = me.timelineScroller,\n                { clientSize } = scrollable,\n                requiredSize   = clientSize * me.bufferCoef,\n                bufferPx       = requiredSize * me.bufferThreshold,\n                bufferInMs     = me.timeAxisViewModel.getDateFromPosition(bufferPx) - timeAxisStart;\n            timeAxisStart = new Date(timeAxisStart.valueOf() + bufferInMs);\n            timeAxisEnd   = new Date(timeAxisEnd.valueOf() - bufferInMs);\n        }\n        taskStart = taskStart || taskEnd;\n        taskEnd   = taskEnd || taskStart;\n        const taskIsOutside = taskStart < timeAxisStart | ((taskEnd > timeAxisEnd) << 1);\n        // Make sure task is within TimeAxis time span unless extendTimeAxis passed as false.\n        // The TaskEdit feature passes false because it must not mutate the TimeAxis.\n        // Bitwise flag:\n        //  1 === start is before TimeAxis start.\n        //  2 === end is after TimeAxis end.\n        if (taskIsOutside && options.extendTimeAxis !== false) {\n            const currentTimeSpanRange = me.timeAxis.endDate - me.timeAxis.startDate;\n            let startAnchorPoint, endAnchorPoint;\n            // Event is too wide, expand the range to encompass it.\n            if (taskIsOutside === 3) {\n                await me.timeAxis.setTimeSpan(\n                    new Date(taskStart.valueOf() - currentTimeSpanRange / 2),\n                    new Date(taskEnd.getTime() + currentTimeSpanRange / 2)\n                );\n            }\n            else if (me.infiniteScroll) {\n                const\n                    { visibleDateRange } = me,\n                    visibleMS            = visibleDateRange.endMS - visibleDateRange.startMS,\n                    // If event starts before time axis, scroll to a date one full viewport after target date\n                    // (reverse for an event starting after time axis), to allow a scroll animation\n                    sign                 = taskIsOutside & 1 ? 1 : -1;\n                await me.setTimeSpan(\n                    new Date(taskStart.valueOf() - currentTimeSpanRange / 2),\n                    new Date(taskStart.valueOf() + currentTimeSpanRange / 2),\n                    {\n                        visibleDate : new Date(taskEnd.valueOf() + (sign * visibleMS))\n                    }\n                );\n            }\n            // Event is partially or wholly outside but will fit.\n            // Move the TimeAxis to include it. Attempt to maintain visual position.\n            else {\n                startAnchorPoint = me.getCoordinateFromDate((taskIsOutside & 1) ? taskEnd : taskStart);\n                // Event starts before\n                if (taskIsOutside & 1) {\n                    await me.timeAxis.setTimeSpan(\n                        new Date(taskStart),\n                        new Date(taskStart.valueOf() + currentTimeSpanRange)\n                    );\n                }\n                // Event ends after\n                else {\n                    await me.timeAxis.setTimeSpan(\n                        new Date(taskEnd.valueOf() - currentTimeSpanRange),\n                        new Date(taskEnd)\n                    );\n                }\n                // Restore view to same relative scroll position.\n                endAnchorPoint = (taskIsOutside & 1)\n                    ? me.getCoordinateFromDate(taskEnd)\n                    : me.getCoordinateFromDate(taskStart);\n                await me.timeAxisSubGrid.scrollable.scrollBy(endAnchorPoint - startAnchorPoint);\n            }\n        }\n        // Establishing element to scroll to\n        const el = me.getElementFromTaskRecord(taskRecord);\n        if (el) {\n            const scroller = me.timeAxisSubGrid.scrollable;\n            // Scroll into view with animation and highlighting if needed.\n            await scroller.scrollIntoView(el, options);\n        }\n        else {\n            // Event not rendered, scroll to calculated location\n            await me.scrollUnrenderedTaskIntoView(taskRecord, options);\n        }\n    }\n    /**\n     * Scrolls an unrendered task into view. Internal function used from #scrollTaskIntoView.\n     * @private\n     */\n    async scrollUnrenderedTaskIntoView(taskRec, options = defaultScrollOptions) {\n        if (options.edgeOffset == null) {\n            options.edgeOffset = 20;\n        }\n        const me = this;\n        await me.expandTo(taskRec);\n        const\n            scroller         = me.timeAxisSubGrid.scrollable,\n            box              = me.getTaskBox(taskRec),\n            scrollerViewport = scroller.viewport,\n            targetRect       = box.translate(scrollerViewport.x - scroller.x, scrollerViewport.y - scroller.y);\n        await scroller.scrollIntoView(targetRect, Object.assign({}, options, { highlight : false }));\n        if (options.highlight) {\n            const element = me.getElementFromTaskRecord(taskRec);\n            element && DomHelper.highlight(element);\n        }\n    }\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n", "import Base from '../../../Core/Base.js';\n/**\n * @module Gantt/view/mixin/GanttState\n */\n/**\n * Mixin for Gantt that handles state. It serializes the following gantt properties:\n *\n * * barMargin\n * * tickSize\n * * zoomLevel\n *\n * See {@link Grid.view.mixin.GridState} and {@link Core.mixin.State} for more information on state.\n *\n * @mixin\n */\nexport default Target => class GanttState extends (Target || Base) {\n    static get $name() {\n        return 'GanttState';\n    }\n    updateProject(project, old) {\n        super.updateProject(project, old);\n        this.detachListeners('suspendStateDuringDelayedCalculation');\n        // Delay calculation code path involves changing readOnly of the Gantt panel. This will also\n        // trigger state change, we don't need that. So we pause `triggerUpdate` listener to not trigger `stateChange`\n        if (project?.delayCalculation) {\n            project.ion({\n                name                  : 'suspendStateDuringDelayedCalculation',\n                delayCalculationStart : {\n                    fn   : 'suspendStateListener',\n                    prio : 10\n                },\n                delayCalculationEnd : {\n                    fn   : 'resumeStateListener',\n                    prio : -10\n                },\n                thisObj : this\n            });\n        }\n    }\n    suspendStateListener() {\n        this.stateListenerSuspended = (this.stateListenerSuspended || 0) + 1;\n    }\n    resumeStateListener() {\n        const me = this;\n        me.stateListenerSuspended = (me.stateListenerSuspended || 1) - 1;\n        if (!me.stateListenerSuspended && me.isSaveStatePending) {\n            me.saveState({ immediate : true });\n        }\n    }\n    saveState(...args) {\n        if (!this.stateListenerSuspended) {\n            return super.saveState(...args);\n        }\n    }\n    /**\n     * Gets or sets gantt's state. Check out {@link Gantt.view.mixin.GanttState} mixin for details.\n     * @member {Object} state\n     * @member {Object} state\n     * @property {Object[]} state.columns\n     * @property {Number} state.rowHeight\n     * @property {Object} state.scroll\n     * @property {Number} state.scroll.scrollLeft\n     * @property {Number} state.scroll.scrollTop\n     * @property {Array} state.selectedRecords\n     * @property {String} state.style\n     * @property {String} state.selectedCell\n     * @property {Object} state.store\n     * @property {Object} state.store.sorters\n     * @property {Object} state.store.groupers\n     * @property {Object} state.store.filters\n     * @property {Object} state.subGrids\n     * @property {Number} state.barMargin\n     * @property {Number} state.zoomLevel\n     * @category State\n     */\n    /**\n     * Apply previously stored state.\n     * @param {Object} state\n     * @private\n     */\n    applyState(state) {\n        const me = this;\n        // Applying sorters too early might lead to unexpected results if fields in the incoming dataset will be changed\n        // after initial commit\n        // state.store might be undefined if responsive level is being applied\n        if (!me.project.isInitialCommitPerformed && (state.store?.sorters || state.store?.filters)) {\n            const storeState = state.store;\n            me.project.commitAsync().then(() => {\n                if (!me.isDestroyed) {\n                    me.suspendRefresh();\n                    me.store.state = storeState;\n                    me.resumeRefresh(true);\n                }\n            });\n            delete state.store;\n        }\n        // Restoring selected cell and records during startup attempts to access task DOM elements which are not yet\n        // rendered. So we filter out these props and apply them in onInternalPaint handler\n        const specialKeys = ['selectedCell', 'selectedRecords'];\n        if (specialKeys.some(key => key in state)) {\n            const subState = {};\n            // Copy special keys to a partial state object to apply later\n            specialKeys.forEach(key => {\n                if (key in state) {\n                    subState[key] = state[key];\n                    delete state[key];\n                }\n            });\n            // Create fixer method that will apply state after\n            me._applyStateAfterPaint = () => {\n                me._applyStateAfterPaint = null;\n                me.suspendRefresh();\n                Object.keys(subState).forEach(key => me[key] = subState[key]);\n                me.resumeRefresh(true);\n            };\n        }\n        super.applyState(state);\n    }\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n    onInternalPaint(...args) {\n        super.onInternalPaint(...args);\n        const me = this;\n        if (me._applyStateAfterPaint) {\n            if (!me.project.isInitialCommitPerformed) {\n                me.project.ion({\n                    commitFinalized() {\n                        me._applyStateAfterPaint();\n                    },\n                    thisObj : me,\n                    once    : true\n                });\n            }\n            else {\n                me._applyStateAfterPaint();\n            }\n        }\n    }\n};\n", "import Base from '../../../Core/Base.js';\nimport ProjectConsumer from '../../../Scheduler/data/mixin/ProjectConsumer.js';\nimport ProjectModel from '../../model/ProjectModel.js';\nimport DateHelper from '../../../Core/helper/DateHelper.js';\n/**\n * @module Gantt/view/mixin/GanttStores\n */\n/**\n * Functions for store assignment and store event listeners.\n * Properties are aliases to corresponding\n * ones of Gantt's {@link Gantt.model.ProjectModel project} instance.\n *\n * @mixin\n */\nexport default Target => class GanttStores extends ProjectConsumer(Target || Base) {\n    static get $name() {\n        return 'GanttStores';\n    }\n    // This is the static definition of the Stores we consume from the project, and\n    // which we must provide *TO* the project if we or our CrudManager is configured\n    // with them.\n    // The property name is the store name, and within that there is the dataName which\n    // is the property which provides static data definition. And there is a listeners\n    // definition which specifies the listeners *on this object* for each store.\n    //\n    // To process incoming stores, implement an updateXxxxxStore method such\n    // as `updateEventStore(eventStore)`.\n    //\n    // To process an incoming Project implement `updateProject`. __Note that\n    // `super.updateProject(...arguments)` must be called first.__\n    static get projectStores() {\n        return {\n            calendarManagerStore : {},\n            resourceStore : {\n                dataName : 'resources'\n            },\n            eventStore : {\n                dataName : 'events'\n            },\n            assignmentStore : {\n                dataName : 'assignments'\n            },\n            dependencyStore : {\n                dataName : 'dependencies'\n            }\n        };\n    }\n    static get configurable() {\n        return {\n            // Overridden. ProjectConsumer defaults to Scheduler's ProjectModel\n            projectModelClass : ProjectModel,\n            /**\n             * Inline tasks, will be loaded into an internally created TaskStore.\n             * @config {Gantt.model.TaskModel[]|TaskModelConfig[]}\n             * @category Data\n             */\n            tasks : null,\n            /**\n             * The {@link Gantt.data.TaskStore} holding the tasks to be rendered into the Gantt.\n             * @config {Gantt.data.TaskStore}\n             * @category Data\n             */\n            taskStore : null\n        };\n    }\n    updateProject(project, oldProject) {\n        super.updateProject(project, oldProject);\n        this.detachListeners('ganttStores');\n        this.bindCrudManager(project);\n        project?.ion({\n            name                : 'ganttStores',\n            refresh             : 'internalOnProjectRefresh',\n            startApplyChangeset : 'internalOnProjectStartApplyChangeset',\n            endApplyChangeset   : 'internalOnProjectEndApplyChangeset',\n            thisObj             : this\n        });\n    }\n    get replica() {\n        return this.project.replica;\n    }\n    internalOnProjectStartApplyChangeset() {\n        this.captureScrollTargetRow();\n    }\n    internalOnProjectEndApplyChangeset() {\n        this.restoreScrollTargetRow();\n    }\n    internalOnProjectRefresh({ isInitialCommit, isCalculated }) {\n        const\n            me = this,\n            {\n                project,\n                visibleDate = {}\n            }  = me;\n        if (!me.isPainted) {\n            return;\n        }\n        // Unless user configured startDate, after initial project is loaded - scroll project start into view\n        if (!me.appliedViewStartDate && !('startDate' in me.initialConfig) && project.startDate && project.endDate) {\n            const\n                requestedVisibleDate   = visibleDate?.date,\n                { startDate, endDate } = project,\n                min                    = requestedVisibleDate ? DateHelper.min(startDate, requestedVisibleDate) : startDate,\n                max                    = requestedVisibleDate\n                    ? (endDate\n                        ? DateHelper.max(endDate, requestedVisibleDate)\n                        : DateHelper.add(min, me.visibleDateRange.endDate - me.visibleDateRange.startDate))\n                    : endDate;\n            // if managed to calculated start/end dates\n            if (min && max) {\n                me.setTimeSpan(min, max, { ...visibleDate, visibleDate : requestedVisibleDate });\n                me.appliedViewStartDate = true;\n            }\n        }\n        // Transition all refreshes except the initial one or any used for early rendering\n        if (!isInitialCommit && isCalculated) {\n            me.refreshWithTransition();\n        }\n        // No transition on initial refresh, nothing to transition and don't want to delay dependency drawing more\n        // than necessary\n        else {\n            me.refresh();\n        }\n        me.trigger('projectRefresh', { isInitialCommit, isCalculated });\n    }\n    //endregion\n    //region Inline data\n    //region Store & model docs\n    // Configs\n    /**\n     * Inline resources, will be loaded into the backing project's ResourceStore.\n     * @config {Gantt.model.ResourceModel[]|ResourceModelConfig[]} resources\n     * @category Data\n     */\n    /**\n     * Inline assignments, will be loaded into the backing project's AssignmentStore.\n     * @config {Gantt.model.AssignmentModel[]|AssignmentModelConfig[]} assignments\n     * @category Data\n     */\n    /**\n     * Inline dependencies, will be loaded into the backing project's DependencyStore.\n     * @config {Gantt.model.DependencyModel[]|DependencyModelConfig[]} dependencies\n     * @category Data\n     */\n    /**\n     * Inline time ranges, will be loaded into the backing project's time range store.\n     * @config {Scheduler.model.TimeSpan[]|TimeSpanConfig[]} timeRanges\n     * @category Data\n     */\n    /**\n     * Inline calendars, will be loaded into the backing project's CalendarManagerStore.\n     * @config {Gantt.model.CalendarModel[]|CalendarModelConfig[]} calendars\n     * @category Data\n     */\n    // Properties\n    /**\n     * Get/set resources, applies to the backing project's ResourceStore.\n     * @member {Gantt.model.ResourceModel[]} resources\n     * @accepts {Gantt.model.ResourceModel[]|ResourceModelConfig[]}\n     * @category Data\n     */\n    /**\n     * Get/set assignments, applies to the backing project's AssignmentStore.\n     * @member {Gantt.model.AssignmentModel[]} assignments\n     * @accepts {Gantt.model.AssignmentModel[]|AssignmentModelConfig[]}\n     * @category Data\n     */\n    /**\n     * Get/set dependencies, applies to the backing projects DependencyStore.\n     * @member {Gantt.model.DependencyModel[]} dependencies\n     * @accepts {Gantt.model.DependencyModel[]|DependencyModelConfig[]}\n     * @category Data\n     */\n    /**\n     * Get/set time ranges, applies to the backing project's TimeRangeStore.\n     * @member {Scheduler.model.TimeSpan[]} timeRanges\n     * @accepts {Scheduler.model.TimeSpan[]|TimeSpanConfig[]}\n     * @category Data\n     */\n    /**\n     * Get/set calendars, applies to the backing projects CalendarManagerStore.\n     * @member {Gantt.model.CalendarModel[]} calendars\n     * @accepts {Gantt.model.CalendarModel[]|CalendarModelConfig[]}\n     * @category Data\n     */\n    //endregion\n    get timeRanges() {\n        return this.project.timeRanges;\n    }\n    set timeRanges(timeRanges) {\n        this.project.timeRanges = timeRanges;\n    }\n    get calendars() {\n        return this.project.calendars;\n    }\n    set calendars(calendars) {\n        this.project.calendars = calendars;\n    }\n    //endregion\n    //region TaskStore\n    get usesDisplayStore() {\n        return this.store !== this.taskStore;\n    }\n    /**\n     * Get/set tasks, applies to the backing project's EventStore.\n     * Returns a flat array of all tasks in the task store.\n     * @member {Gantt.model.TaskModel[]} tasks\n     * @accepts {Gantt.model.TaskModel[]|TaskModelConfig[]}\n     * @category Data\n     */\n    get tasks() {\n        return this.project.eventStore.allRecords;\n    }\n    changeTasks(tasks) {\n        const { project } = this;\n        if (this.buildingProjectConfig) {\n            // Set the property in the project config object.\n            project.eventsData = tasks;\n        }\n        else {\n            // Live update the project when in use.\n            project.eventStore.data = tasks;\n        }\n    }\n    /**\n     * Get/set the task store instance of the backing project.\n     * @member {Gantt.data.TaskStore} taskStore\n     * @category Data\n     */\n    changeTaskStore(taskStore) {\n        const { project } = this;\n        if (this.buildingProjectConfig) {\n            // Set the property in the project config object.\n            // Must not go through the updater. It's too early to\n            // inform host of store change.\n            project.eventStore = taskStore;\n            return;\n        }\n        // Live update the project when in use.\n        if (!this.initializingProject) {\n            if (project.eventStore !== taskStore) {\n                project.setEventStore(taskStore);\n                taskStore = project.eventStore;\n            }\n        }\n        return taskStore;\n    }\n    updateEventStore(eventStore) {\n        const me = this;\n        eventStore.metaMapId = me.id;\n        // taskStore is used for rows (store) and tasks\n        me.taskStore = me.store = eventStore;\n    }\n    bindStore(store) {\n        super.bindStore(store);\n        this.timeAxisViewModel.store = store;\n        // Occasionally we need to track batched changes.\n        // TaskResize requires this as it changes the endDate with task batched.\n        this.detachListeners('storeBatchedUpdateListener');\n        store.ion({\n            name          : 'storeBatchedUpdateListener',\n            batchedUpdate : 'onEventStoreBatchedUpdate',\n            thisObj       : this\n        });\n    }\n    /**\n     * Listener to the batchedUpdate event which fires when a field is changed on a record which\n     * is batch updating. Occasionally UIs must keep in sync with batched changes.\n     * For example, the TaskResize feature performs batched updating of the startDate/endDate\n     * and it tells its client to listen to batchedUpdate.\n     * @private\n     */\n    onEventStoreBatchedUpdate(event) {\n        const me = this;\n        if (me.listenToBatchedUpdates) {\n            const wasEnabled = me.enableEventAnimations;\n            // This pathway is used from TaskResize during dragging, so we do not\n            // want the size animating. It should follow the pointer in real time.\n            me.enableEventAnimations = false;\n            me.onStoreUpdateRecord(event);\n            me.enableEventAnimations = wasEnabled;\n        }\n    }\n    //endregion\n    //region Internal\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n    //endregion\n};\n", "import Base from '../../../Core/Base.js';\n/**\n * @module Gantt/view/mixin/GanttTimelineDateMapper\n */\nexport default Target => class GanttTimelineDateMapper extends (Target || Base) {\n    static get $name() {\n        return 'GanttTimelineDateMapper';\n    }\n    /**\n     * Method to get a displayed end date value, see {@link Gantt/view/mixin/GanttTimelineDateMapper#function-getFormattedEndDate} for more info.\n     * @private\n     * @param {Date} endDate The date to format\n     * @param {Date} startDate The start date\n     * @returns {Date} The date value to display\n     */\n    getDisplayEndDate(endDate, startDate) {\n        return endDate;\n    }\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n", "import Base from '../../../Core/Base.js';\n/**\n * @module Gantt/view/mixin/TaskNavigation\n */\nconst animate100 = {\n    animate : 100\n};\n/**\n * Mixin that tracks event or assignment selection by clicking on one or more events in the scheduler.\n * @mixin\n */\nexport default Target => class TaskNavigation extends (Target || Base) {\n    static get $name() {\n        return 'TaskNavigation';\n    }\n    static get defaultConfig() {\n        return {\n            navigator : {\n                inlineFlow : false,\n                prevKey    : 'ArrowUp',\n                nextKey    : 'ArrowDown',\n                keys       : {\n                    Enter : 'onTaskEnterKey'\n                }\n            },\n            isNavigationKey : {\n                ArrowDown  : 1,\n                ArrowUp    : 1,\n                ArrowLeft  : 0,\n                ArrowRight : 0\n            }\n        };\n    }\n    processEvent(event) {\n        const me = this,\n            eventElement = event.target.closest(me.eventSelector);\n        if (!me.navigator.disabled && eventElement) {\n            event.taskRecord = event.eventRecord = me.resolveTaskRecord(eventElement);\n        }\n        return event;\n    }\n    normalizeTarget(event) {\n        return event.taskRecord;\n    }\n    // Makes sure you a click on a task that is already focused will call cell selection\n    onElementMouseDown(event) {\n        const\n            me               = this,\n            { _focusedCell } = me,\n            taskEl           = event.target.closest(me.navigator.itemSelector),\n            isFocused        = taskEl && taskEl === _focusedCell?.target;\n        super.onElementMouseDown(event);\n        if (isFocused && me.lastNavigationEvent !== event) {\n            me.onCellNavigate?.(me, _focusedCell, _focusedCell, true);\n            me.lastNavigationEvent = event; // Saved the navigation event so to not process this event twice\n        }\n    }\n    selectEvent(record, preserveSelection = false) {\n        if (!this.isSelected(record)) {\n            // Select row without scrolling any column into view\n            this.selectRow({\n                record         : record.id,\n                column         : false,\n                addToSelection : preserveSelection\n            });\n        }\n    }\n    deselectEvent(record) {\n        this.deselectRow(record.id);\n    }\n    getNext(taskRecord) {\n        const\n            me        = this,\n            { store } = me;\n        for (let rowIdx = store.indexOf(taskRecord) + 1; rowIdx < store.count; rowIdx++) {\n            const nextTask = store.getAt(rowIdx);\n            // Skip tasks which are outside the TimeAxis\n            if (me.isInTimeAxis(nextTask)) {\n                return nextTask;\n            }\n        }\n    }\n    getPrevious(taskRecord) {\n        const\n            me        = this,\n            { store } = me;\n        for (let rowIdx = store.indexOf(taskRecord) - 1; rowIdx >= 0; rowIdx--) {\n            const prevTask = store.getAt(rowIdx);\n            // Skip tasks which are outside the TimeAxis\n            if (me.isInTimeAxis(prevTask)) {\n                return prevTask;\n            }\n        }\n    }\n    set activeEvent(record) {\n        this.navigator.activeItem = this.getElementFromTaskRecord(record, false);\n    }\n    get activeEvent() {\n        const { activeItem } = this.navigator;\n        if (activeItem) {\n            return this.resolveTaskRecord(activeItem);\n        }\n    }\n    async navigateTo(targetEvent, {\n        scrollIntoView = true,\n        uiEvent        = {}\n    }) {\n        const\n            me                      = this,\n            { navigator }           = me,\n            { skipScrollIntoView }  = navigator;\n        if (targetEvent) {\n            if (scrollIntoView) {\n                // No key processing during scroll\n                navigator.disabled = true;\n                await me.scrollTaskIntoView(targetEvent, animate100);\n                navigator.disabled = false;\n            }\n            else {\n                navigator.skipScrollIntoView = true;\n            }\n            // Panel can be destroyed before promise is resolved\n            if (!me.isDestroyed) {\n                me.activeEvent = targetEvent;\n                navigator.skipScrollIntoView = skipScrollIntoView;\n                navigator.trigger('navigate', {\n                    event : uiEvent,\n                    item  : me.getElementFromTaskRecord(targetEvent, false)\n                });\n            }\n        }\n    }\n    clearEventSelection() {\n        this.deselectAll();\n    }\n    onTaskEnterKey() {\n        // Empty, to be chained by features (used by TaskEdit)\n    }\n    // OVERRIDE for EventNavigation#onDeleteKey\n    onDeleteKey(keyEvent) {\n        const record = keyEvent.eventRecord;\n        if (!this.readOnly && this.enableDeleteKey && record) {\n            this.removeEvents([record]);\n        }\n    }\n    onGridBodyFocusIn(focusEvent) {\n        // Task navigation only has a say when navigation is inside the TimeAxisSubGrid\n        if (this.timeAxisSubGridElement.contains(focusEvent.target)) {\n            const\n                me                  = this,\n                { navigationEvent } = me,\n                { target }          = focusEvent,\n                eventFocus          = target.closest(me.navigator.itemSelector),\n                task                = eventFocus ? me.resolveTaskRecord(target) : me.getRecordFromElement(target),\n                destinationCell     = me.normalizeCellContext({\n                    rowIndex : me.store.indexOf(task),\n                    column   : me.timeAxisColumn,\n                    target\n                });\n            // Don't take over what the event navigator does if it's doing task navigation.\n            // Just silently cache our actionable location.\n            if (eventFocus) {\n                if (me.lastNavigationEvent !== navigationEvent) {\n                    const { _focusedCell } = me;\n                    me._focusedCell = destinationCell;\n                    me.onCellNavigate?.(me, _focusedCell, destinationCell, true);\n                    // Saved the navigation event so to not process this event twice\n                    me.lastNavigationEvent = navigationEvent;\n                }\n                return;\n            }\n            // Try to focus the task.\n            me.navigateTo(task, {\n                scrollIntoView : Boolean(navigationEvent?.type !== 'mousedown'),\n                uiEvent        : navigationEvent\n            });\n            return;\n        }\n        super.onGridBodyFocusIn(focusEvent);\n    }\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n", "import Base from '../../../Core/Base.js';\nimport DomSync from '../../../Core/helper/DomSync.js';\nimport DomClassList from '../../../Core/helper/util/DomClassList.js';\nimport Rectangle from '../../../Core/helper/util/Rectangle.js';\nimport DateHelper from '../../../Core/helper/DateHelper.js';\nimport StringHelper from '../../../Core/helper/StringHelper.js';\nimport DomHelper from '../../../Core/helper/DomHelper.js';\n/**\n * @module Gantt/view/orientation/NewTaskRendering\n * @internal\n */\nconst\n    releaseEventActions  = {\n        releaseElement : 1, // Not used at all at the moment\n        reuseElement   : 1  // Used by some other element\n    },\n    renderEventActions   = {\n        newElement      : 1,\n        reuseOwnElement : 1,\n        reuseElement    : 1\n    };\n/**\n * Handles rendering of tasks, using the following strategy:\n *\n * 1. When a row is rendered, it collects a DOM config for its task bar and stores in a map (row -> config)\n * 2. When a rendering pass is done, it syncs the DOM configs from the map to DOM\n *\n * The need for caching with this approach is minimal, only the map needs to be kept up to date with available rows.\n *\n * @internal\n * @extends Core/Base\n */\nexport default class NewTaskRendering extends Base {\n    //region Config & Init\n    static get properties() {\n        return {\n            rowMap : new Map()\n        };\n    }\n    construct(gantt) {\n        this.gantt = gantt;\n        gantt.rowManager.ion({\n            renderDone      : 'onRenderDone',\n            removeRows      : 'onRemoveRows',\n            beforeRowHeight : 'onBeforeRowHeightChange',\n            thisObj         : this\n        });\n        super.construct({});\n    }\n    init() {}\n    //endregion\n    //region View hooks\n    refreshRows() {}\n    onTimeAxisViewModelUpdate() {\n        // Update view bounds\n        this.updateFromHorizontalScroll(this.gantt.timeAxisSubGrid.scrollable.x);\n    }\n    onViewportResize() {}\n    onDragAbort() {}\n    onBeforeRowHeightChange(event) {\n        const\n            { gantt } = this,\n            { total } = gantt.resourceMarginObject;\n        if (gantt.foregroundCanvas) {\n            //gantt.element.classList.add('b-notransition');\n            gantt.foregroundCanvas.style.fontSize = `${(event?.height ?? gantt.rowHeight) - total}px`;\n            //gantt.element.classList.remove('b-notransition');\n        }\n    }\n    //endregion\n    //region Region & coordinates\n    get visibleDateRange() {\n        return this._visibleDateRange;\n    }\n    getTaskBox(taskRecord, includeOutside = false, inner = false) {\n        const\n            { gantt }           = this,\n            { start, total }    = gantt.resourceMarginObject,\n            { isBatchUpdating } = taskRecord,\n            { store }           = gantt,\n            startDate           = isBatchUpdating ? taskRecord.get('startDate') : taskRecord.startDate,\n            endDate             = isBatchUpdating ? taskRecord.get('endDate') : taskRecord.endDate;\n        if (inner) {\n            const innerElement = this.getElementFromTaskRecord(taskRecord);\n            if (innerElement) {\n                return Rectangle.from(innerElement, gantt.timeAxisSubGridElement);\n            }\n        }\n        // A task that gets startDate during initial propagation, which seems not have happened yet.\n        // Or a removed task (this fn is also used for baselines). Nothing to render then\n        if (!startDate || !endDate || (taskRecord.isTask && (store.isDestroyed || !store.isAvailable(taskRecord)))) {\n            return null;\n        }\n        const positionData = this.getSizeAndPosition(taskRecord, includeOutside, inner);\n        if (!positionData) {\n            return null;\n        }\n        const\n            { position, width } = positionData,\n            top = gantt.rowManager.calculateTop(store.indexOf(taskRecord.isBaseline ? taskRecord.task : taskRecord)) + start,\n            height = gantt.rowHeight - total,\n            bounds = new Rectangle(position, top, width, height);\n        // Position always correct in Gantt, since there is no stacking\n        bounds.layout = true;\n        return bounds;\n    }\n    // returns an object with `position` + `width`. If task is not inside current time axis, position is -1\n    getSizeAndPosition(taskRecord, includeOutside, inner) {\n        const\n            me                        = this,\n            { gantt }                 = me,\n            { total }                 = gantt.resourceMarginObject,\n            { timeAxis }              = gantt,\n            viewStart                 = timeAxis.startDate,\n            viewEnd                   = timeAxis.endDate,\n            isMilestone               = taskRecord.milestone,\n            // Ensure dependencies feature is present (=== false if not)\n            horizontalAdjustment      = isMilestone ? gantt.features.dependencies.pathFinder?.startArrowMargin : 0;\n        let\n            // Must use Model.get in order to get latest values in case we are inside a batch.\n            // TaskResize changes the endDate using batching to enable a tentative change\n            // via the batchedUpdate event which is triggered when changing a field in a batch.\n            // Fall back to accessor if propagation has not populated date fields.\n            taskStart            = taskRecord.isBatchUpdating ? taskRecord.get('startDate') : taskRecord.startDate,\n            // Might get here before engine has normalized\n            taskEnd              = taskRecord.isBatchUpdating\n                ? taskRecord.get('endDate')\n                : taskRecord.endDate || (taskRecord.duration != null\n                    ? DateHelper.add(taskStart, taskRecord.duration, taskRecord.durationUnit) : null),\n            startCoordinate, endCoordinate;\n        // Early bailout for tasks that are fully out of timeaxis\n        if (!includeOutside && (taskEnd < viewStart || taskStart > viewEnd)) {\n            return null;\n        }\n        // The calls using `includeOutside` are not used during task rendering, but when rendering dependencies.\n        // In those cases the lines are expected to be drawn even to tasks fully out of view, clipped to view bounds\n        if (includeOutside && taskStart < viewStart) {\n            startCoordinate = gantt.getCoordinateFromDate(viewStart) - horizontalAdjustment;\n        }\n        else if (includeOutside && taskStart > viewEnd) {\n            startCoordinate = gantt.getCoordinateFromDate(viewEnd) + horizontalAdjustment;\n        }\n        // Starts before view and ends in or after view, approximate startCoordinate\n        else if (taskStart < viewStart) {\n            const\n                // Using seconds instead of ms in a try to not loose to much precision in year views\n                pxPerSecond      = gantt.timeAxisViewModel.getSingleUnitInPixels('second'),\n                secondsOutOfView = (timeAxis.startMS - taskRecord.startDateMS) / 1000, // taskRecord.startDateMS is cached in TimeSpan\n                pxOutOfView      = secondsOutOfView * pxPerSecond;\n            startCoordinate = gantt.getCoordinateFromDate(viewStart) - pxOutOfView;\n        }\n        // The \"normal\" case, somewhere in the timeaxis\n        else {\n            if (gantt.fillTicks && !isMilestone && (!taskRecord.isBatchUpdating || gantt.snap)) {\n                const\n                    tick = timeAxis.getSnappedTickFromDate(taskStart);\n                taskStart = tick.startDate;\n            }\n            startCoordinate = gantt.getCoordinateFromDate(taskStart);\n        }\n        if (!isMilestone) {\n            // Same logic applies to `includeOutside` for end date, clip to view\n            if (includeOutside && taskEnd < viewStart) {\n                endCoordinate = gantt.getCoordinateFromDate(viewStart);\n            }\n            else if (includeOutside && taskEnd > viewEnd) {\n                endCoordinate = gantt.getCoordinateFromDate(viewEnd);\n            }\n            // Starts in or before view and ends outside, approximate end\n            else if (taskEnd > viewEnd) {\n                const\n                    pxPerSecond      = gantt.timeAxisViewModel.getSingleUnitInPixels('second'),\n                    secondsOutOfView = (taskRecord.endDateMS - timeAxis.endMS) / 1000, // taskRecord.endDateMS is cached in TimeSpan\n                    pxOutOfView      = secondsOutOfView * pxPerSecond;\n                endCoordinate = gantt.getCoordinateFromDate(viewEnd) + pxOutOfView;\n            }\n            else {\n                if (gantt.fillTicks && (!taskRecord.isBatchUpdating || gantt.snap)) {\n                    const\n                        tickIdx = Math.ceil(gantt.timeAxis.getTickFromDate(taskEnd)) - 1,\n                        tick    = gantt.timeAxis.getAt(tickIdx);\n                    taskEnd = tick.endDate;\n                }\n                endCoordinate = gantt.getCoordinateFromDate(taskEnd);\n            }\n        }\n        let width = isMilestone ? 0 : Math.abs(startCoordinate - endCoordinate);\n        // Requesting diamond width, in viewport space\n        if (inner && isMilestone && taskStart > viewStart && taskStart < viewEnd) {\n            // By default as wide as it is high\n            width = gantt.rowHeight - total;\n            startCoordinate -= width / 2;\n        }\n        if (!includeOutside && startCoordinate + width < 0) {\n            return null;\n        }\n        return {\n            position : startCoordinate,\n            width\n        };\n    }\n    getRowRegion(taskRecord, startDate, endDate) {\n        const\n            { gantt } = this,\n            row       = gantt.getRowFor(taskRecord);\n        // might not be rendered\n        if (!row) {\n            return null;\n        }\n        const\n            rowElement = row.getElement(gantt.timeAxisSubGrid.region),\n            taStart    = gantt.timeAxis.startDate,\n            taEnd      = gantt.timeAxis.endDate,\n            start      = startDate ? DateHelper.max(taStart, startDate) : taStart,\n            end        = endDate ? DateHelper.min(taEnd, endDate) : taEnd,\n            startX     = gantt.getCoordinateFromDate(start),\n            endX       = gantt.getCoordinateFromDate(end, true, true),\n            y          = row.top + gantt.scrollTop,\n            x          = Math.min(startX, endX),\n            bottom     = y + rowElement.offsetHeight;\n        return new Rectangle(x, y, Math.max(startX, endX) - x, bottom - y);\n    }\n    getDateFromXY(xy, roundingMethod, local) {\n        let coord = xy[0];\n        if (!local) {\n            coord = this.translateToScheduleCoordinate(coord);\n        }\n        return this.gantt.timeAxisViewModel.getDateFromPosition(coord, roundingMethod);\n    }\n    translateToScheduleCoordinate(x) {\n        // Get rid of fractional pixels, to not end up with negative fractional values for pos\n        const pos = x - Math.floor(this.gantt.timeAxisSubGridElement.getBoundingClientRect().left);\n        return pos + this.gantt.scrollLeft;\n    }\n    translateToPageCoordinate(x) {\n        const\n            client = this.gantt,\n            { scrollable } = client.timeAxisSubGrid;\n        let result = x + client.timeAxisSubGridElement.getBoundingClientRect().left;\n        if (client.rtl) {\n            result -= scrollable.maxX - Math.abs(client.scrollLeft);\n        }\n        else {\n            result -= client.scrollLeft;\n        }\n        return result;\n    }\n    //endregion\n    //region Element <-> Record mapping\n    getElementFromTaskRecord(taskRecord, inner = true) {\n        const { syncIdMap } = this.gantt.foregroundCanvas;\n        let wrapper = syncIdMap?.[taskRecord.id];\n        // For linked tasks, we might be trying to find element for the original. If none found, we also check linked\n        // tasks. Needed for dependencies, since they point to original tasks, not linked ones.\n        if (!wrapper && taskRecord.hasLinks && syncIdMap) {\n            taskRecord.forEachLinked((store, linked) => {\n                if (syncIdMap[linked.id]) {\n                    wrapper = syncIdMap[linked.id];\n                }\n            });\n        }\n        return inner ? wrapper?.syncIdMap.task : wrapper;\n    }\n    //endregion\n    //region Dependency connectors\n    // Cannot be moved from this file, called from currentOrientation.xx\n    /**\n     * Gets displaying item start side\n     *\n     * @param {Gantt.model.TaskModel} taskRecord\n     * @returns {String} 'left' / 'right' / 'top' / 'bottom'\n     */\n    getConnectorStartSide(taskRecord) {\n        return this.gantt.rtl ? 'right' : 'left';\n    }\n    /**\n     * Gets displaying item end side\n     *\n     * @param {Gantt.model.TaskModel} taskRecord\n     * @returns {String} 'left' / 'right' / 'top' / 'bottom'\n     */\n    getConnectorEndSide(taskRecord) {\n        return this.gantt.rtl ? 'left' : 'right';\n    }\n    //endregion\n    //region Rendering\n    onRemoveRows({ rows }) {\n        rows.forEach(row => this.rowMap.delete(row));\n        !this.gantt.refreshSuspended && this.onRenderDone();\n    }\n    // Update header range on horizontal scroll. No need to draw any tasks, Gantt only cares about vertical scroll\n    updateFromHorizontalScroll(scrollX) {\n        const\n            me            = this,\n            { gantt }     = me,\n            {\n                timeAxisSubGrid,\n                timeAxis,\n                rtl\n            }             = gantt,\n            { width }     = timeAxisSubGrid,\n            { totalSize } = gantt.timeAxisViewModel,\n            start         = scrollX,\n            // If there are few pixels left from the right most position then just render all remaining ticks,\n            // there wouldn't be many. It makes end date reachable with more page zoom levels while not having any poor\n            // implications.\n            // 5px to make TimeViewRangePageZoom test stable in puppeteer.\n            returnEnd     = timeAxisSubGrid.scrollable.maxX !== 0 && Math.abs(timeAxisSubGrid.scrollable.maxX) <= Math.round(start) + 5,\n            startDate     = gantt.getDateFromCoord({ coord : Math.max(0, start), ignoreRTL : true }),\n            endDate       = returnEnd ? timeAxis.endDate : (gantt.getDateFromCoord({ coord : start + width, ignoreRTL : true }) || timeAxis.endDate);\n        if (startDate && !gantt._viewPresetChanging) {\n            me._visibleDateRange = { startDate, endDate, startMS : startDate.getTime(), endMS : endDate.getTime() };\n            me.viewportCoords  = rtl\n                // RTL starts all the way to the right (and goes in opposite direction)\n                ? { left : totalSize - scrollX - width, right : totalSize - scrollX }\n                // LTR all the way to the left\n                : { left : scrollX, right : scrollX + width };\n            // Update timeaxis header making it display the new dates\n            const range = gantt.timeView.range = { startDate, endDate };\n            gantt.internalOnVisibleDateRangeChange(range);\n        }\n    }\n    internalPopulateTaskRenderData(renderData, taskRecord) {\n        const\n            { gantt }   = this,\n            taskContent = {\n                className : 'b-gantt-task-content',\n                dataset   : {\n                    taskBarFeature : 'content'\n                },\n                children : []\n            };\n        if (renderData) {\n            let resizable = (taskRecord.isResizable === undefined ? true : taskRecord.isResizable);\n            if (renderData.startsOutsideView) {\n                if (resizable === true) {\n                    resizable = 'end';\n                }\n                else if (resizable === 'start') {\n                    resizable = false;\n                }\n            }\n            if (renderData.endsOutsideView) {\n                if (resizable === true) {\n                    resizable = 'start';\n                }\n                else if (resizable === 'end') {\n                    resizable = false;\n                }\n            }\n            Object.assign(renderData, {\n                iconCls    : new DomClassList(taskRecord.taskIconCls),\n                id         : gantt.getEventRenderId(taskRecord),\n                style      : taskRecord.style || '',\n                taskId     : taskRecord.id,\n                // Classes for the wrapping div\n                wrapperCls : new DomClassList({\n                    [gantt.eventCls + '-wrap']   : 1,\n                    [`${gantt.eventCls}-parent`] : taskRecord.isParent,\n                    'b-milestone-wrap'           : taskRecord.milestone,\n                    'b-inactive'                 : taskRecord.inactive,\n                    'b-expanded'                 : taskRecord.isExpanded(gantt.store),\n                    'b-readonly'                 : taskRecord.readOnly,\n                    'b-linked'                   : taskRecord.isLinked,\n                    'b-original'                 : taskRecord.hasLinks,\n                    'b-temporary'                : !taskRecord.project\n                }),\n                // Task record cls property is now a DomClassList, so clone it\n                // so that it can be manipulated here and by renderers.\n                cls          : taskRecord.isResourceTimeRange ? new DomClassList() : taskRecord.cls.clone(),\n                // Extra DOMConfigs to add to the tasks row, for example for indicators\n                extraConfigs : []\n            });\n            // Gather event element classes as keys to add to the renderData.cls DomClassList.\n            // Truthy value means the key will be added as a class name.\n            Object.assign(renderData.cls, {\n                [gantt.eventCls]                       : 1,\n                [gantt.generatedIdCls]                 : taskRecord.hasGeneratedId,\n                [gantt.dirtyCls]                       : taskRecord.modifications,\n                [gantt.committingCls]                  : taskRecord.isCommitting,\n                [gantt.endsOutsideViewCls]             : renderData.endsOutsideView,\n                [gantt.startsOutsideViewCls]           : renderData.startsOutsideView,\n                [gantt.fixedEventCls]                  : taskRecord.isDraggable === false,\n                [`b-sch-event-resizable-${resizable}`] : 1,\n                'b-milestone'                          : taskRecord.milestone,\n                // 'b-critical'                           : taskRecord.critical,\n                'b-task-started'                       : taskRecord.isStarted,\n                'b-task-finished'                      : taskRecord.isCompleted,\n                'b-task-selected'                      : gantt.selectedRecords.includes(taskRecord)\n            });\n            const\n                eventStyle = taskRecord.eventStyle || gantt.eventStyle,\n                eventColor = taskRecord.eventColor || gantt.eventColor;\n            renderData.eventColor = eventColor;\n            renderData.eventStyle = eventStyle;\n            if (gantt.taskRenderer) {\n                // User has specified a renderer fn, either to return a simple string, or an object\n                const value = gantt.taskRenderer.call(gantt.taskRendererThisObj || gantt, {\n                    taskRecord,\n                    renderData\n                });\n                // If the user's renderer coerced it into a string, recreate a DomClassList.\n                if (typeof renderData.cls === 'string') {\n                    renderData.cls = new DomClassList(renderData.cls);\n                }\n                // Same goes for iconCls\n                if (typeof renderData.iconCls === 'string') {\n                    renderData.iconCls = new DomClassList(renderData.iconCls);\n                }\n                if (typeof renderData.wrapperCls === 'string') {\n                    renderData.wrapperCls = new DomClassList(renderData.wrapperCls);\n                }\n                let childContent = null;\n                // Likely HTML content\n                if (StringHelper.isHtml(value)) {\n                    childContent = {\n                        tag  : 'span',\n                        html : value\n                    };\n                }\n                // DOM config or plain string can be used as is\n                else if (typeof value === 'string' || typeof value === 'object') {\n                    childContent = value;\n                }\n                // Other, use string\n                else if (value != null) {\n                    childContent = String(value);\n                }\n                if (childContent) {\n                    if (Array.isArray(childContent)) {\n                        taskContent.children.push(...childContent);\n                    }\n                    else {\n                        taskContent.children.push(childContent);\n                    }\n                    renderData.cls.add('b-has-content');\n                }\n            }\n            // If there are any iconCls entries...\n            renderData.cls['b-sch-event-withicon'] = renderData.iconCls.length;\n            // renderers have last say on style & color\n            renderData.wrapperCls[`b-sch-style-${renderData.eventStyle}`] = renderData.eventStyle;\n            if (DomHelper.isNamedColor(renderData.eventColor)) {\n                renderData.wrapperCls[`b-sch-color-${renderData.eventColor}`] = renderData.eventColor;\n            }\n            else if (renderData.eventColor) {\n                const style = `background-color:${renderData.eventColor};`;\n                renderData.style = style + renderData.style;\n                renderData.wrapperCls['b-sch-custom-color'] = 1;\n                renderData._customColorStyle = style;\n            }\n            else {\n                renderData.wrapperCls['b-sch-color-none'] = 1;\n            }\n            // Milestones has to apply styling to b-sch-task-content\n            if (renderData.style && taskRecord.isMilestone && taskContent) {\n                taskContent.style = renderData.style;\n                delete renderData.style;\n            }\n            if (renderData.iconCls?.length) {\n                taskContent.children.unshift({\n                    tag       : 'i',\n                    className : renderData.iconCls\n                });\n            }\n            // if we have some children collected or it's a milestone (milestone styling needs content element presence)\n            if (taskContent.children.length || taskRecord.milestone) {\n                renderData.children.push(taskContent);\n            }\n        }\n        renderData.taskContent = taskContent;\n        renderData.wrapperChildren = [];\n    }\n    populateTaskRenderData(renderData, taskRecord) {\n        this.internalPopulateTaskRenderData(...arguments);\n        // Method which features may chain in to\n        this.gantt.onTaskDataGenerated(renderData);\n    }\n    // This method is a single entry point to get complete render data for the task\n    getTaskRenderData(row, taskRecord) {\n        const\n            me        = this,\n            { gantt } = me,\n            { start } = gantt.resourceMarginObject,\n            box       = me.getTaskBox(taskRecord, false, false, row),\n            data      = {\n                taskRecord,\n                task     : taskRecord,\n                row,\n                children : []\n            };\n        if (box) {\n            Object.assign(data, {\n                isTask : true,\n                top    : box.top,\n                left   : box.left,\n                width  : box.width,\n                height : box.height\n            });\n        }\n        else {\n            // Calculate top position, used by Baselines feature to position its elements\n            data.top = row.top + start;\n        }\n        me.populateTaskRenderData(data, taskRecord);\n        return data;\n    }\n    // This method generates DOM config from the render data\n    getTaskDOMConfig(data) {\n        return {\n            className : data.wrapperCls,\n            tabIndex  : '0',\n            children  : [\n                {\n                    className : data.cls,\n                    style     : (data.internalStyle || '') + (data.style || ''),\n                    children  : data.children,\n                    dataset   : {\n                        // Each feature putting contents in the task wrap should have this to simplify syncing and\n                        // element retrieval after sync\n                        taskFeature : 'task'\n                    },\n                    syncOptions : {\n                        syncIdField : 'taskBarFeature'\n                    }\n                },\n                ...data.wrapperChildren\n            ],\n            style : {\n                top    : data.top,\n                left   : data.left - (this.gantt.rtl ? data.width : 0),\n                // DomHelper appends px to dimensions when using numbers\n                width  : data.width,\n                zIndex : data.zIndex\n            },\n            dataset : {\n                taskId : data.taskId\n            },\n            // Will not be part of DOM, but attached to the element\n            elementData : data,\n            // Options for this level of sync, lower levels can have their own\n            syncOptions : {\n                syncIdField      : 'taskFeature',\n                // Remove instead of release when a feature is disabled\n                releaseThreshold : 0\n            }\n        };\n    }\n    // Called per row in \"view\", collect configs\n    renderer({ row, record : taskRecord }) {\n        const\n            me   = this,\n            data = me.getTaskRenderData(row, taskRecord);\n        let config;\n        if (data.isTask) {\n            config = me.getTaskDOMConfig(data);\n            me.gantt.trigger('beforeRenderTask', { renderData : data, domConfig : config });\n        }\n        else if (data.extraConfigs.length === 0) {\n            me.rowMap.delete(row);\n            return;\n        }\n        // Store DOM configs\n        me.rowMap.set(row, [config, ...data.extraConfigs]);\n    }\n    // Called when the current row rendering \"pass\" is complete, sync collected configs to DOM\n    onRenderDone() {\n        const\n            { gantt } = this,\n            configs   = Array.from(this.rowMap.values()).flat();\n        // Give features a chance to inject or manipulate task configs\n        gantt.onBeforeTaskSync(configs);\n        DomSync.sync({\n            domConfig : {\n                onlyChildren : true,\n                children     : configs\n            },\n            targetElement : gantt.foregroundCanvas,\n            syncIdField   : 'taskId',\n            // Called by DomHelper when it creates, releases or reuses elements\n            callback({ action, domConfig, lastDomConfig, targetElement : element }) {\n                // If element is a task wrap, trigger appropriate events\n                if (action !== 'none' && domConfig && domConfig.className && domConfig.className[gantt.eventCls + '-wrap']) {\n                    const\n                        // Some actions are considered first a release and then a render (reusing another element).\n                        // This gives clients code a chance to clean up before reusing an element\n                        isRelease = releaseEventActions[action],\n                        isRender  = renderEventActions[action];\n                    // If we are reusing an element that was previously released we should not trigger again\n                    if (isRelease && lastDomConfig?.elementData?.isTask) {\n                        const\n                            event = {\n                                renderData : lastDomConfig.elementData,\n                                taskRecord : lastDomConfig.elementData.taskRecord,\n                                element\n                            };\n                        // This event is documented on Gantt\n                        gantt.trigger('releaseTask', event);\n                    }\n                    // Trigger only for actual tasks, not indicators or baselines\n                    if (isRender && domConfig?.elementData?.isTask) {\n                        const\n                            event = {\n                                renderData     : domConfig.elementData,\n                                taskRecord     : domConfig.elementData.taskRecord,\n                                reusingElement : action === 'reuseElement',\n                                element\n                            };\n                        // This event is documented on Gantt\n                        gantt.trigger('renderTask', event);\n                    }\n                }\n            }\n        });\n    }\n    // Redraws a single task by rerendering its cell\n    redraw(taskRecord) {\n        // Refresh cell, will call `renderer` above and update its DOM config\n        if (this.gantt.rowManager.refreshCell(taskRecord, this.gantt.timeAxisColumn.id)) {\n            // Update DOM\n            this.onRenderDone();\n        }\n    }\n    //endregion\n}\nNewTaskRendering._$name = 'NewTaskRendering';", "import TimelineBase from '../../Scheduler/view/TimelineBase.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport VersionHelper from '../../Core/helper/VersionHelper.js';\nimport NewTaskRendering from './orientation/NewTaskRendering.js';\nimport CrudManagerView from '../../Scheduler/crud/mixin/CrudManagerView.js';\nimport CurrentConfig from '../../Scheduler/view/mixin/CurrentConfig.js';\nimport TransactionalFeatureMixin from '../../Scheduler/view/mixin/TransactionalFeatureMixin.js';\nimport ProjectProgressMixin from '../../SchedulerPro/view/mixin/ProjectProgressMixin.js';\nimport GanttDom from './mixin/GanttDom.js';\nimport GanttRegions from './mixin/GanttRegions.js';\nimport GanttScroll from './mixin/GanttScroll.js';\nimport GanttState from './mixin/GanttState.js';\nimport GanttStores from './mixin/GanttStores.js';\nimport GanttTimelineDateMapper from './mixin/GanttTimelineDateMapper.js';\nimport TaskNavigation from './mixin/TaskNavigation.js';\nimport EventNavigation from '../../Scheduler/view/mixin/EventNavigation.js';\nimport '../localization/En.js';\nimport '../../Gantt/column/TimeAxisColumn.js';\n// Always required features\nimport '../../Grid/feature/Tree.js';\nimport '../../Scheduler/feature/RowReorder.js';\nimport '../feature/Dependencies.js';\nimport NameColumn from '../column/NameColumn.js';\nimport { DependencyType } from '../../Engine/scheduling/Types.js';\nimport Column from '../../Grid/column/Column.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\nimport Toast from '../../Core/widget/Toast.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport DomSync from '../../Core/helper/DomSync.js';\nimport SchedulingIssueResolution from '../../SchedulerPro/view/mixin/SchedulingIssueResolution.js';\n/**\n * @module Gantt/view/GanttBase\n */\nconst emptyObject = Object.freeze({});\nlet newTaskCount = 0;\n/**\n * A thin base class for {@link Gantt/view/Gantt}. Does not include any features by default, allowing smaller\n * custom-built bundles if used in place of {@link Gantt/view/Gantt}.\n *\n * @mixes Gantt/view/mixin/GanttDom\n * @mixes Gantt/view/mixin/GanttRegions\n * @mixes Gantt/view/mixin/GanttScroll\n * @mixes Gantt/view/mixin/GanttState\n * @mixes Gantt/view/mixin/GanttStores\n * @mixes Scheduler/crud/mixin/CrudManagerView\n * @mixes Scheduler/view/mixin/EventNavigation\n * @mixes Scheduler/view/mixin/TransactionalFeatureMixin\n * @mixes Gantt/view/mixin/TaskNavigation\n * @mixes SchedulerPro/view/mixin/ProjectProgressMixin\n * @mixes SchedulerPro/view/mixin/SchedulingIssueResolution\n *\n * @features Scheduler/feature/ColumnLines\n * @features Scheduler/feature/EventFilter\n * @features Scheduler/feature/HeaderZoom\n * @features Scheduler/feature/Labels\n * @features Scheduler/feature/NonWorkingTime\n * @features Scheduler/feature/Pan\n * @features Scheduler/feature/RowReorder\n * @features Scheduler/feature/ScheduleMenu\n * @features Scheduler/feature/ScheduleTooltip\n * @features Scheduler/feature/Summary\n * @features Scheduler/feature/TimeAxisHeaderMenu\n * @features Scheduler/feature/TimeRanges\n *\n * @features SchedulerPro/feature/PercentBar\n * @features SchedulerPro/feature/DependencyEdit\n * @features SchedulerPro/feature/EventSegments\n * @features SchedulerPro/feature/TimeSpanHighlight\n *\n * @features Gantt/feature/Baselines\n * @features Gantt/feature/CellEdit\n * @features Gantt/feature/CriticalPaths\n * @features Gantt/feature/Dependencies\n * @features Gantt/feature/Indicators\n * @features Gantt/feature/Labels\n * @features Gantt/feature/ParentArea\n * @features Gantt/feature/ProgressLine\n * @features Gantt/feature/ProjectLines\n * @features Gantt/feature/Rollups\n * @features Gantt/feature/ScrollButtons\n * @features Gantt/feature/Summary\n * @features Gantt/feature/TaskCopyPaste\n * @features Gantt/feature/TaskDrag\n * @features Gantt/feature/TaskDragCreate\n * @features Gantt/feature/TaskEdit\n * @features Gantt/feature/TaskMenu\n * @features Gantt/feature/TaskNonWorkingTime\n * @features Gantt/feature/TaskResize\n * @features Gantt/feature/TaskSegmentDrag\n * @features Gantt/feature/TaskSegmentResize\n * @features Gantt/feature/TaskTooltip\n * @features Gantt/feature/TreeGroup\n * @features Gantt/feature/Versions\n *\n * @features Gantt/feature/export/MspExport\n * @features Gantt/feature/export/PdfExport\n * @features Gantt/feature/export/Print\n *\n * @extends Scheduler/view/TimelineBase\n * @widget\n */\nexport default class GanttBase extends TimelineBase.mixin(\n    CrudManagerView,\n    GanttDom,\n    GanttRegions,\n    GanttScroll,\n    GanttStores,\n    GanttState,\n    GanttTimelineDateMapper,\n    EventNavigation,\n    TaskNavigation,\n    ProjectProgressMixin,\n    SchedulingIssueResolution,\n    TransactionalFeatureMixin,\n    CurrentConfig\n) {\n    //region Task interaction events\n    /**\n     * Triggered after a mousedown on a task bar.\n     * @event taskMouseDown\n     * @param {Gantt.view.Gantt} source The Gantt instance\n     * @param {Gantt.model.TaskModel} taskRecord The Task record\n     * @param {MouseEvent} event The native browser event\n     */\n    /**\n     * Triggered after a mouseup on a task bar.\n     * @event taskMouseUp\n     * @param {Gantt.view.Gantt} source The Gantt instance\n     * @param {Gantt.model.TaskModel} taskRecord The Task record\n     * @param {MouseEvent} event The native browser event\n     */\n    /**\n     * Triggered after a click on a task bar.\n     * @event taskClick\n     * @param {Gantt.view.Gantt} source The Gantt instance\n     * @param {Gantt.model.TaskModel} taskRecord The Task record\n     * @param {MouseEvent} event The native browser event\n     */\n    /**\n     * Triggered after a doubleclick on a task.\n     * @event taskDblClick\n     * @param {Gantt.view.Gantt} source The Gantt instance\n     * @param {Gantt.model.TaskModel} taskRecord The Task record\n     * @param {MouseEvent} event The native browser event\n     */\n    /**\n     * Triggered after a rightclick (or long press on a touch device) on a task.\n     * @event taskContextMenu\n     * @param {Gantt.view.Gantt} source The Gantt instance\n     * @param {Gantt.model.TaskModel} taskRecord The Task record\n     * @param {MouseEvent} event The native browser event\n     */\n    /**\n     * Triggered after a mouseover on a task.\n     * @event taskMouseOver\n     * @param {Gantt.view.Gantt} source The Gantt instance\n     * @param {Gantt.model.TaskModel} taskRecord The Task record\n     * @param {MouseEvent} event The native browser event\n     */\n    /**\n     * Triggered for mouseout from a task.\n     * @event taskMouseOut\n     * @param {Gantt.view.Gantt} source The Gantt instance\n     * @param {Gantt.model.TaskModel} taskRecord The Task record\n     * @param {MouseEvent} event The native browser event\n     */\n    /**\n     * Triggered when a keydown event is observed if there are selected tasks.\n     * @event taskKeyDown\n     * @param {Gantt.view.Gantt} source This Gantt\n     * @param {Gantt.model.TaskModel} taskRecord Task record\n     * @param {KeyboardEvent} event Browser event\n     */\n    /**\n     * Triggered when a keyup event is observed if there are selected tasks.\n     * @event taskKeyUp\n     * @param {Gantt.view.Gantt} source This Gantt\n     * @param {Gantt.model.TaskModel} eventRecord Task record\n     * @param {KeyboardEvent} event Browser event\n     */\n    //endregion\n    //region Other events\n    /**\n     * Task is rendered, its element is available in DOM.\n     * @event renderTask\n     * @param {Gantt.view.Gantt} source The Gantt instance\n     * @param {Object} renderData Task render data\n     * @param {Gantt.model.TaskModel} taskRecord Rendered task\n     * @param {HTMLElement} element Task element\n     */\n    /**\n     * Task is released, no longer in view/removed. A good spot for cleaning custom things added in a `renderTask`\n     * listener up, if needed.\n     * @event releaseTask\n     * @param {Gantt.view.Gantt} source The Gantt instance\n     * @param {Object} renderData Task render data\n     * @param {Gantt.model.TaskModel} taskRecord Rendered task\n     * @param {HTMLElement} element Task element\n     */\n    //endregion\n    // For documentation & typings purposes\n    /**\n     * Returns the dependency record for a DOM element\n     *\n     * *NOTE: Only available when the {@link Gantt/feature/Dependencies Dependencies} feature is enabled.*\n     *\n     * @function resolveDependencyRecord\n     * @param {HTMLElement} element The dependency line element\n     * @returns {Gantt.model.DependencyModel} The dependency record\n     * @category Feature shortcuts\n     */\n    //endregion\n    //region Config\n    static $name = 'GanttBase';\n    // Factoryable type name\n    static get type() {\n        return 'ganttbase';\n    }\n    static get defaultConfig() {\n        return {\n            /**\n             * Configure as `true` to make the Gantt read-only, by disabling any UIs for modifying data.\n             *\n             * __Note that checks MUST always also be applied at the server side.__\n             * @prp {Boolean} readOnly\n             * @default false\n             * @category Common\n             */\n            /**\n             * The {@link Gantt.model.ProjectModel} instance containing the data visualized by the Gantt chart.\n             * @member {Gantt.model.ProjectModel} project\n             * @category Data\n             */\n            /**\n             * A {@link Gantt.model.ProjectModel} instance or a config object. The project holds all Gantt data.\n             * @config {Gantt.model.ProjectModel|ProjectModelConfig}\n             * @category Data\n             */\n            project : null,\n            /**\n             * The path for resource images, used by various widgets such as the resource assignment column.\n             * @config {String}\n             * @category Common\n             */\n            resourceImageFolderPath : null,\n            /**\n             * The file name of an image file to use when a resource has no image, or its image cannot be loaded.\n             * @config {String}\n             * @category Common\n             */\n            defaultResourceImageName : null,\n            /**\n             * True to toggle the collapsed/expanded state when clicking a parent task bar.\n             * @prp {Boolean}\n             * @category Common\n             * @default\n             */\n            toggleParentTasksOnClick : true,\n            /**\n             * True to scroll the task bar into view when clicking a cell, you can also pass a\n             * {@link #function-scrollTaskIntoView scroll config} object.\n             * @prp {Boolean|BryntumScrollOptions}\n             * @category Common\n             * @default false\n             */\n            scrollTaskIntoViewOnCellClick : null,\n            // data for the stores, in the topological order\n            calendars    : null,\n            resources    : null,\n            tasks        : null,\n            dependencies : null,\n            assignments  : null,\n            eventCls                : 'b-gantt-task',\n            eventBarTextField       : null,\n            eventLayout             : 'none',\n            eventSelectionDisable   : true,\n            /**\n             * Task color used by default. Tasks can specify their own {@link Gantt.model.TaskModel#field-eventColor},\n             * which will override this config.\n             *\n             * For available standard colors, see\n             * {@link Scheduler/model/mixin/EventModelMixin#typedef-EventColor}.\n             *\n             * @prp {EventColor} eventColor\n             * @category Scheduled events\n             */\n            eventColor              : null,\n            eventStyle              : null,\n            rowHeight               : 45,\n            scheduledEventName      : 'task',\n            eventScrollMode         : 'move',\n            overScheduledEventClass : 'b-gantt-task-hover',\n            mode                    : 'horizontal',\n            fixedRowHeight          : true,\n            timeCellCls : 'b-sch-timeaxis-cell',\n            focusCls : 'b-active',\n            /**\n             * An empty function by default, but provided so that you can override it. This function is called each time\n             * a task is rendered into the gantt to render the contents of the task.\n             *\n             * Returning a string will display it in the task bar, it accepts both plain text or HTML. It is also\n             * possible to return a DOM config object which will be synced to the task bars content.\n             *\n             * ```javascript\n             * // using plain string\n             * new Gantt({\n             *    taskRenderer : ({ taskRecord }) => StringHelper.encodeHtml(taskRecord.name)\n             * });\n             *\n             * // using html string\n             * new Gantt({\n             *    taskRenderer : ({ taskRecord }) => StringHelper.xss`${taskRecord.id} <b>${taskRecord.name}</b>`\n             * });\n             *\n             * // using DOM config\n             * new Gantt({\n             *    taskRenderer({ taskRecord }) {\n             *       return {\n             *           tag  : 'b',\n             *           html : StringHelper.encodeHtml(taskRecord.name)\n             *       }\n             *    }\n             * });\n             * ```\n             *\n             * @param {Object} detail An object containing the information needed to render a Task.\n             * @param {Gantt.model.TaskModel} detail.taskRecord The task record.\n             * @param {Object} detail.renderData An object containing details about the task rendering.\n             * @param {Core.helper.util.DomClassList|String} detail.renderData.cls An object whose property names represent the CSS class names\n             * to be added to the tasks's element. Set a property's value to truthy or falsy to add or remove the class\n             * name based on the property name. Using this technique, you do not have to know whether the class is already\n             * there, or deal with concatenation.\n             * @param {String|Object<String,String>} detail.renderData.style Inline styles for the task bar DOM element. Use either\n             * 'border: 1px solid black' or { border: '1px solid black' }\n             * @param {Core.helper.util.DomClassList|String} detail.renderData.wrapperCls An object whose property names represent the CSS class names\n             * to be added to the event wrapper element. Set a property's value to truthy or falsy to add or remove the class\n             * name based on the property name. Using this technique, you do not have to know whether the class is already\n             * there, or deal with concatenation.\n             * @param {Core.helper.util.DomClassList|String} detail.renderData.iconCls An object whose property names represent the CSS class\n             * names to be added to a task icon element.\n             * @param {Scheduler.model.TimeSpan[]|TimeSpanConfig[]} indicators An array that can be populated with\n             * TimeSpan records or their config objects to have them rendered in the task row\n             * @returns {String|DomConfig|DomConfig[]} A simple string, or a DomConfig object defining the actual HTML\n             * @config {Function}\n             * @category Scheduled events\n             */\n            taskRenderer : null,\n            /**\n             * A callback function or a set of `name: value` properties to apply on tasks created using the task context menu.\n             * Be aware that `name` value will be ignored since it's auto generated and may be configured with localization.\n             *\n             * Example:\n             * ```javascript\n             * // Object form:\n             * newTaskDefaults : {\n             *    duration          : 3,\n             *    manuallyScheduled : true,\n             *    percentDone       : 15\n             * }\n             * ```\n             *\n             * ```javascript\n             * // Function form:\n             * newTaskDefaults : (targetRecord) => {\n             *    return {\n             *        duration          : targetRecord.duration,\n             *        manuallyScheduled : targetRecord.manuallyScheduled\n             *    }\n             * }\n             * ```\n             * @config {Gantt.model.TaskModelConfig|Object|Function}\n             * @parameter {Gantt.model.TaskModel} task Reference task\n             * @returns {Gantt.model.TaskModelConfig|Object} Set of properties to apply on tasks created using the task context menu\n             */\n            newTaskDefaults : {},\n            /**\n             * A task field (id, wbsCode, sequenceNumber etc) that will be used when displaying and editing linked tasks.\n             * @config {String} dependencyIdField\n             * @default 'id'\n             * @category Common\n             */\n            dependencyIdField : 'id',\n            /**\n             * Returns dates that will constrain resize and drag operations. The method will be called with the\n             * task being dragged.\n             * @param {Gantt.model.TaskModel} taskRecord The task record being moved or resized.\n             * @returns {Object} Constraining object containing `start` and `end` constraints. Omitting either\n             * will mean that end is not constrained. So you can prevent a resize or move from moving *before*\n             * a certain time while not constraining the end date.\n             * @returns {Date} [return.start] Start date\n             * @returns {Date} [return.end] End date\n             * @config {Function}\n             * @category Scheduled events\n             */\n            getDateConstraints : null,\n            /**\n             * If set to `true` this will show a color field in the {@link Gantt.feature.TaskEdit} editor and also a\n             * picker in the {@link Gantt.feature.TaskMenu}. Both enables the user to choose a color which will be\n             * applied to the task bar's background. See TaskModel's {@link Gantt.model.TaskModel#field-eventColor}\n             * config.\n             * @config {Boolean}\n             * @default false\n             * @category Misc\n             */\n            showTaskColorPickers : null\n        };\n    }\n    static configurable = {\n        /**\n         * See {@link Gantt.view.Gantt#keyboard-shortcuts Keyboard shortcuts} for details\n         * @config {Object<String,String>} keyMap\n         * @category Common\n         */\n        keyMap : {\n            'Alt+Shift+ArrowLeft'  : 'outdent',\n            'Alt+Shift+ArrowRight' : 'indent'\n        }\n    };\n    static bindStoreChangeset = false;\n    timeCellSelector = '.b-sch-timeaxis-cell';\n    get isGantt() {\n        return true;\n    }\n    //endregion\n    //region Init\n    construct(config = {}) {\n        const\n            me              = this,\n            hasInlineStores = Boolean(config.calendars || config.taskStore || config.dependencyStore || config.resourceStore || config.assignmentStore),\n            hasInlineData   = Boolean(config.calendars || config.tasks || config.dependencies || config.resources || config.assignments);\n        if (!config.features) {\n            const defaults = me.getDefaultConfiguration().features;\n            config.features = defaults && typeof defaults === 'object' ? defaults : {};\n        }\n        // gantt is always a tree\n        if (!('tree' in config.features)) {\n            config.features.tree = true;\n        }\n        // disable group feature by default\n        if (!('group' in config.features)) {\n            config.features.group = false;\n        }\n        const { project } = config;\n        if (project && (hasInlineStores || hasInlineData)) {\n            throw new Error('Providing both project and inline data is not supported');\n        }\n        // gather all data in the ProjectModel instance\n        if (!project?.isModel) {\n            config.project = ObjectHelper.assign({\n                calendarsData    : config.calendars,\n                eventsData       : config.tasks,\n                dependenciesData : config.dependencies,\n                resourcesData    : config.resources,\n                assignmentsData  : config.assignments,\n                resourceStore   : config.resourceStore,\n                eventStore      : config.taskStore,\n                assignmentStore : config.assignmentStore,\n                dependencyStore : config.dependencyStore,\n                timeRangeStore  : config.timeRangeStore\n            }, project);\n            delete config.resourceStore;\n            delete config.taskStore;\n            delete config.assignmentStore;\n            delete config.dependencyStore;\n            delete config.timeRangeStore;\n            delete config.calendars;\n            delete config.resources;\n            delete config.tasks;\n            delete config.assignments;\n            delete config.dependencies;\n        }\n        // EOF data gathering\n        super.construct(config);\n        me.ion({\n            taskclick  : 'onTaskBarClick',\n            cellClick  : 'onNonTimeAxisCellClick',\n            toggleNode : 'onToggleParentNode'\n        });\n    }\n    changeColumns(columns, currentStore) {\n        if (columns) {\n            let cols = columns;\n            if (!Array.isArray(columns)) {\n                cols = columns.data;\n                // Need to pull the taskstore in, to make sure any fields added by columns are added to it\n                this._thisIsAUsedExpression(this.taskStore);\n            }\n            // Always include the name column\n            if (!cols.some(column => {\n                const constructor = column instanceof Column ? column.constructor : ColumnStore.getColumnClass(column.type) || Column;\n                return constructor === NameColumn || constructor.prototype instanceof NameColumn;\n            })) {\n                cols.unshift({\n                    type : 'name'\n                });\n            }\n        }\n        return super.changeColumns(columns, currentStore);\n    }\n    // Overrides TimelineBase to supply taskStore as its store (which is only used in passed events)\n    set timeAxisViewModel(timeAxisViewModel) {\n        super.timeAxisViewModel = timeAxisViewModel;\n        if (this.store) {\n            this.timeAxisViewModel.store = this.store;\n        }\n    }\n    get timeAxisViewModel() {\n        return super.timeAxisViewModel;\n    }\n    //endregion\n    //region Overrides\n    onPaintOverride() {\n        // Internal procedure used for paint method overrides\n        // Not used in onInternalPaint() because it may be chained on instance and Override won't be applied\n    }\n    //endregion\n    //region Events\n    resumeRefresh(trigger) {\n        super.resumeRefresh(false);\n        if (!this.refreshSuspended && trigger && this.isPainted) {\n            if (!this.rowManager.topRow) {\n                this.rowManager.reinitialize();\n            }\n            else {\n                this.refreshWithTransition();\n            }\n        }\n    }\n    // Overriding grids behaviour to ignore individual updates caused by propagation\n    onStoreUpdateRecord(params) {\n        if (!this.project.isChangeTrackingSuspended) {\n            let result;\n            this.runWithTransition(() => {\n                result = super.onStoreUpdateRecord(params);\n            }, !this.refreshSuspended);\n            return result;\n        }\n    }\n    // Transition batch changes\n    onStoreDataChange(params) {\n        this.runWithTransition(() => {\n            super.onStoreDataChange(params);\n        }, params.action === 'batch');\n    }\n    // Features can hook into this to add to generated task data\n    onTaskDataGenerated() {}\n    // Features can hook into this to manipulate visible task configs before they are DomSynced\n    onBeforeTaskSync() {}\n    onTaskBarClick({ taskRecord }) {\n        if (this.toggleParentTasksOnClick && !taskRecord.isLeaf) {\n            this.toggleCollapse(taskRecord);\n        }\n    }\n    onNonTimeAxisCellClick({ record, column }) {\n        const { scrollTaskIntoViewOnCellClick } = this;\n        if (column.type !== 'timeAxis' && scrollTaskIntoViewOnCellClick && record.isScheduled) {\n            this.scrollTaskIntoView(record, scrollTaskIntoViewOnCellClick === true\n                ? { animate : true, block : 'center', y : false }\n                : scrollTaskIntoViewOnCellClick\n            );\n        }\n    }\n    onToggleParentNode({ record }) {\n        // Repaint parent node on collapse / expand (unless in a collapsed parent, happens on collapse all)\n        record.parent.isExpanded(this.taskStore) && this.taskRendering.redraw(record);\n    }\n    // Grid row selection change\n    afterSelectionChange({ selectedRecords, deselectedRecords }) {\n        const me = this;\n        function setTaskSelection(record, selected) {\n            const taskElement = me.getElementFromTaskRecord(record);\n            if (taskElement) {\n                DomSync[selected ? 'addCls' : 'removeCls']('b-task-selected', taskElement);\n            }\n        }\n        selectedRecords?.map(record => setTaskSelection(record, true));\n        deselectedRecords?.map(record => setTaskSelection(record, false));\n    }\n    //endregion\n    //region TimelineBase implementations\n    // Overrides grid to take project loading into account\n    toggleEmptyText() {\n        const\n            me = this;\n        if (me.bodyContainer && me.rowManager) {\n            DomHelper.toggleClasses(me.bodyContainer, 'b-grid-empty', !(me.rowManager.rowCount || me.project.isLoadingOrSyncing));\n        }\n    }\n    // Gantt only has one orientation, but TimelineBase expects this to work to call correct rendering code\n    get currentOrientation() {\n        const me = this;\n        if (!me._currentOrientation) {\n            //me.taskRendering = me._currentOrientation = new TaskRendering(me);\n            me.taskRendering = me._currentOrientation = new NewTaskRendering(me);\n        }\n        return me._currentOrientation;\n    }\n    getTimeSpanMouseEventParams(taskElement, event) {\n        const taskRecord = this.resolveTaskRecord(taskElement);\n        return !taskRecord ? null : {\n            taskRecord,\n            taskElement,\n            event\n        };\n    }\n    getScheduleMouseEventParams(cellData) {\n        return {\n            taskRecord : this.store.getById(cellData.id)\n        };\n    }\n    // Used by shared features to resolve an event or task\n    resolveTimeSpanRecord(element) {\n        return this.resolveTaskRecord(element);\n    }\n    repaintEventsForResource(taskRecord) {\n        this.taskRendering.redraw(taskRecord);\n    }\n    // Used by the dependencies feature to keep it orientation (vertical, horizontal) independent\n    get visibleResources() {\n        return {\n            first : this.store.getById(this.firstVisibleRow?.id),\n            last  : this.store.getById(this.lastVisibleRow?.id)\n        };\n    }\n    //endregion\n    //region Feature hooks\n    /**\n     * Populates the task context menu. Chained in features to add menu items.\n     * @param {Object} options Contains menu items and extra data retrieved from the menu target.\n     * @param {Grid.column.Column} options.column Column for which the menu will be shown.\n     * @param {Gantt.model.TaskModel} options.taskRecord The reference task record\n     * @param {Scheduler.model.ResourceModel} options.resourceRecord The context resource.\n     * @param {Scheduler.model.AssignmentModel} options.assignmentRecord The context assignment if any.\n     * @param {Object<String,MenuItemConfig>} options.items A named object to describe menu items.\n     * @internal\n     */\n    populateTaskMenu() {}\n    //endregion\n    // region ContextMenu API\n    async addTask(referenceTask, options = emptyObject) {\n        const\n            me = this,\n            {\n                milestone,\n                asPredecessor,\n                asSuccessor\n            } = options,\n            project   = me.project,\n            parent    = referenceTask.parent,\n            defaults  = typeof me.newTaskDefaults == 'function' ? me.newTaskDefaults(referenceTask) : me.newTaskDefaults,\n            newRecord = me.taskStore.modelClass.new({\n                // use reference task values only if not provided in newTaskDefaults\n                startDate    : referenceTask.startDate,\n                duration     : referenceTask.duration,\n                durationUnit : referenceTask.durationUnit\n            }, defaults, options.data);\n        /**\n         * Fires when adding a task from the UI to allow data mutation.\n         * @event beforeTaskAdd\n         * @param {Gantt.view.Gantt} source The Gantt instance\n         * @param {Gantt.model.TaskModel} taskRecord The task\n         */\n        me.trigger('beforeTaskAdd', { taskRecord : newRecord });\n        if (!newRecord.name) {\n            newRecord.name = `${me.L(milestone ? 'L{Gantt.New milestone}' : 'L{Gantt.New task}')} ${++newTaskCount}`;\n        }\n        project.suspendChangeTracking();\n        if (options.asChild) {\n            referenceTask.insertChild(newRecord, options.at === 'end' ? null : referenceTask.firstChild);\n        }\n        else if (options.above) {\n            parent.insertChild(newRecord, referenceTask);\n        }\n        else {\n            parent.insertChild(\n                newRecord,\n                referenceTask.nextSibling,\n                false,\n                // https://github.com/bryntum/support/issues/7220\n                me.taskStore.useOrderedTreeForWbs ? { orderedBeforeNode : referenceTask.nextOrderedSibling } : {});\n        }\n        // Do not trigger change check, we've added a new record so project will trigger event anyway\n        project.resumeChangeTracking(true);\n        if (milestone) {\n            await project.commitAsync();\n            await newRecord.convertToMilestone();\n        }\n        else {\n            await project.commitAsync();\n        }\n        // run propagation to handle the new task record\n        // and then add a dependency if needed\n        if (asSuccessor) {\n            me.dependencyStore.add({\n                fromEvent : referenceTask,\n                toEvent   : newRecord,\n                type      : DependencyType.EndToStart,\n                fromSide  : 'right',\n                toSide    : 'left'\n            });\n        }\n        else if (asPredecessor) {\n            me.dependencyStore.add({\n                fromEvent : newRecord,\n                toEvent   : referenceTask,\n                type      : DependencyType.EndToStart,\n                fromSide  : 'right',\n                toSide    : 'left'\n            });\n        }\n        if (asSuccessor || asPredecessor) {\n            // wait for immediate commit to handle the new dependency\n            await project.commitAsync();\n        }\n        return newRecord;\n    }\n    /**\n     * Adds a new task above the passed reference task\n     * @param {Gantt.model.TaskModel} taskRecord The reference task record\n     * @param {Object} [options] Options for creating the new task\n     * @param {TaskModelConfig} [options.data] Data for the new task\n     * @returns {Gantt.model.TaskModel} A promise which yields the added task\n     * @async\n     */\n    addTaskAbove(taskRecord, options) {\n        return this.addTask(taskRecord, { ...options, above : true });\n    }\n    /**\n     * Adds a new task below the passed reference task\n     * @param {Gantt.model.TaskModel} taskRecord The reference task record\n     * @param {Object} [options] Options for creating the new task\n     * @param {TaskModelConfig} [options.data] Data for the new task\n     * @returns {Gantt.model.TaskModel} A promise which yields the added task\n     * @async\n     */\n    addTaskBelow(taskRecord, options) {\n        return this.addTask(taskRecord, options);\n    }\n    /**\n     * Adds a new milestone task below the passed reference task\n     * @param {Gantt.model.TaskModel} taskRecord The reference task record\n     * @param {Object} [options] Options for creating the new milestone\n     * @param {TaskModelConfig} [options.data] Data for the new milestone\n     * @returns {Gantt.model.TaskModel} A promise which yields the added task\n     * @async\n     */\n    addMilestoneBelow(taskRecord, options) {\n        return this.addTask(taskRecord, { ...options, milestone : true });\n    }\n    /**\n     * Adds a new subtask to the passed reference task\n     * @param {Gantt.model.TaskModel} taskRecord The reference task record\n     * @param {Object} [options] Options for creating the new subtask\n     * @param {'start'|'end'} [options.at='start'] Where to insert the new subtask in the parent's children.\n     * @param {TaskModelConfig} [options.data] Data for the new task\n     * @returns {Gantt.model.TaskModel} A promise which yields the added task\n     * @async\n     */\n    addSubtask(taskRecord, options) {\n        const promise = this.addTask(taskRecord, { ...options, asChild : true });\n        this.toggleCollapse(taskRecord, false);\n        return promise;\n    }\n    /**\n     * Adds a successor task to the passed reference task\n     * @param {Gantt.model.TaskModel} taskRecord The reference task record\n     * @param {Object} [options] Options for creating the new task\n     * @param {TaskModelConfig} [options.data] Data for the new task\n     * @returns {Gantt.model.TaskModel} A promise which yields the added task\n     * @async\n     */\n    addSuccessor(taskRecord, options) {\n        return this.addTask(taskRecord, { ...options, asSuccessor : true });\n    }\n    /**\n     * Adds a predecessor task to the passed reference task\n     * @param {Gantt.model.TaskModel} taskRecord The reference task record\n     * @param {Object} [options] Options for creating the new task\n     * @param {TaskModelConfig} [options.data] Data for the new task\n     * @returns {Gantt.model.TaskModel} A promise which yields the added task\n     * @async\n     */\n    addPredecessor(taskRecord, options) {\n        return this.addTask(taskRecord, { ...options, above : true, asPredecessor : true });\n    }\n    /**\n     * Increase the indentation level of one or more tasks in the tree. Has no effect if {@link Gantt.feature.TreeGroup}\n     * has regrouped the tree.\n     * @param {Gantt.model.TaskModel[]|Gantt.model.TaskModel} tasks The task(s) to indent.\n     * @returns {Promise} A promise which resolves if operation is successful\n     */\n    async indent(tasks) {\n        const me = this;\n        if (me.isTreeGrouped) {\n            return;\n        }\n        // If called by keyboard shortcut\n        if (!tasks || tasks instanceof Event) {\n            tasks = me.selectedRecords;\n        }\n        // Might be indenting or outdenting already\n        await this.project.commitAsync();\n        const result = await me.taskStore.indent(tasks);\n        // If `false`, the scheduling engine has found a reason that the operation could not happen.\n        if (!result) {\n            Toast.show({\n                rootElement : me.rootElement,\n                html        : me.L('L{Gantt.changeRejected}')\n            });\n        }\n        return result;\n    }\n    /**\n     * Decrease the indentation level of one or more tasks in the tree. Has no effect if {@link Gantt.feature.TreeGroup}\n     * has regrouped the tree.\n     *\n     * @param {Gantt.model.TaskModel[]|Gantt.model.TaskModel} tasks The task(s) to outdent.\n     * @returns {Promise} A promise which resolves if operation is successful\n     */\n    async outdent(tasks) {\n        const me = this;\n        if (me.isTreeGrouped) {\n            return;\n        }\n        // If called by keyboard shortcut\n        if (!tasks || tasks instanceof Event) {\n            tasks = me.selectedRecords;\n        }\n        // Might be indenting or outdenting already\n        await this.project.commitAsync();\n        const result = await me.taskStore.outdent(tasks);\n        // If `false`, the scheduling engine has found a reason that the operation could not happen.\n        if (!result) {\n            Toast.show({\n                rootElement : me.rootElement,\n                html        : me.L('L{Gantt.changeRejected}')\n            });\n        }\n        return result;\n    }\n    // endregion\n    // the 4 methods below are required since super cannot be called from GanttDom mixin\n    onElementKeyDown(event) {\n        super.onElementKeyDown(event);\n    }\n    onElementKeyUp(event) {\n        super.onElementKeyUp(event);\n    }\n    onElementMouseOver(event) {\n        super.onElementMouseOver(event);\n    }\n    onElementMouseOut(event) {\n        super.onElementMouseOut(event);\n    }\n    onStoreAdd() {\n        DomHelper.addTemporaryClass(this.element, 'b-no-transitions', 200, this);\n        super.onStoreAdd(...arguments);\n    }\n    beforeRenderRow(data) {\n        super.beforeRenderRow(data);\n        data.cls['b-inactive'] = data.record.inactive;\n    }\n}\n// Register this widget type with its Factory\nGanttBase.initClass();\nVersionHelper.setVersion('gantt', '5.6.2');\nGanttBase._$name = 'GanttBase';", "import GanttBase from './GanttBase.js';\n// Based on thin GridBase, need to pull in default Grid features also\nimport '../../Grid/feature/ColumnDragToolbar.js';\nimport '../../Grid/feature/ColumnPicker.js';\nimport '../../Grid/feature/ColumnReorder.js';\nimport '../../Grid/feature/ColumnResize.js';\nimport '../../Grid/feature/CellMenu.js';\nimport '../../Grid/feature/HeaderMenu.js';\nimport '../../Grid/feature/Filter.js';\nimport '../../Grid/feature/FilterBar.js';\nimport '../../Grid/feature/Sort.js';\nimport '../../Grid/feature/Stripe.js';\nimport '../../Grid/column/CheckColumn.js'; // For checkbox selection mode\nimport '../../Grid/feature/RowReorder.js';\nimport '../../Scheduler/feature/ColumnLines.js';\nimport '../../Scheduler/feature/EventFilter.js';\nimport '../../Scheduler/feature/EventMenu.js';\nimport '../../Scheduler/feature/NonWorkingTime.js';\nimport '../../Scheduler/feature/ScheduleMenu.js';\nimport '../../Scheduler/feature/ScheduleTooltip.js';\nimport '../../Scheduler/feature/TimeAxisHeaderMenu.js';\nimport '../../SchedulerPro/feature/PercentBar.js';\nimport '../../SchedulerPro/feature/EventSegments.js';\nimport '../feature/CellEdit.js';\nimport '../feature/CriticalPaths.js';\nimport '../feature/Dependencies.js';\nimport '../feature/TaskCopyPaste.js';\nimport '../feature/TaskDrag.js';\nimport '../feature/TaskDragCreate.js';\nimport '../feature/TaskEdit.js';\nimport '../feature/TaskMenu.js';\nimport '../feature/TaskResize.js';\nimport '../feature/TaskSegmentDrag.js';\nimport '../feature/TaskSegmentResize.js';\nimport '../feature/TaskTooltip.js';\n/**\n * @module Gantt/view/Gantt\n */\n/**\n * <h2>Summary</h2>\n * The <b>Gantt</b> widget is the main component that visualizes the project data contained in a\n * {@link Gantt/model/ProjectModel} instance. The Gantt view is implemented as a TreeGrid consisting of a left section\n * showing the task hierarchy (or WBS) and a right section showing a graphical representation of the tasks on the time\n * axis. Task relationships (or \"dependencies\") are rendered as arrows between the tasks and in the background you can\n * (optionally) render non-working time too.\n *\n * The view is very interactive by default:\n *  * hovering over elements shows informative tooltips\n *  * right-clicking various elements shows context menus\n *  * double-clicking the task name shows an inline editor\n *  * double-clicking a task bar opens a detailed task editor popup\n *  * task bars can be dragged and resized\n *  * task progress can be changed by drag drop\n *  * task dependencies can be created by drag drop\n *\n * The Gantt view is very easy to use and is fully functional with minimal configuration yet\n * it is highly configurable through many configuration options and features.\n *\n * The minimum configuration consists of a {@link #config-project} and {@link Grid/view/Grid#config-columns}.\n * (If you only want to show the \"Name\" column, you can even omit `columns` as it's the default column set.)\n *\n * {@inlineexample Gantt/view/Gantt.js}\n *\n * ## Inheriting from Bryntum Grid\n * Bryntum Gantt inherits from Bryntum Grid, meaning that most features available in the grid are also available\n * for the Gantt component. Common features include columns, cell editing, context menus, row grouping, sorting and more.\n * Note: If you want to use the Grid component standalone, e.g. to use drag-from-grid functionality, you need a separate\n * license for the Grid component.\n *\n * For more information on configuring columns, filtering, search etc. please see the {@link Grid.view.Grid Grid API docs}.\n * <h2>Configuring data for Gantt</h2>\n * The central place for all data visualized in the Gantt chart is the {@link Gantt/model/ProjectModel} instance, passed as the {@link #config-project}\n * configuration option when configuring the Gantt.\n *\n * For details related to the Gantt data structure / updating data / loading and saving data to the server,\n * adding custom fields and other information, please refer to the\n * [Project data guide](#Gantt/guides/data/project_data.md).\n *\n * <h2>Configuring columns</h2>\n * The only mandatory column is the <code>name</code> column which is of type {@link Gantt/column/NameColumn}.\n * It is a tree column that shows the project WBS structure, and allows inline editing of the\n * {@link Gantt/model/TaskModel#field-name} field.\n *\n * The Gantt chart ships with lots of predefined columns (such as {@link Gantt/column/PercentDoneColumn}) but you can of course add your own columns too, showing any additional data in your data model.\n *\n * {@inlineexample Gantt/view/GanttColumns.js}\n *\n * <h2>Advanced configurations</h2>\n * Almost any aspect of Bryntum Gantt can be configured. The included examples cover most of the supported configuration options.\n * To see some of the features in action, please click on the links below:\n *\n *  * [Labels](../examples/labels/)\n *  * [Tooltips](../examples/tooltips)\n *  * [Time Ranges](../examples/timeranges/)\n *  * [Resource Picker](../examples/resourceassignment/)\n *  * [Task Menu](../examples/taskmenu/)\n *  * [Task Editor](../examples/taskeditor/)\n *  * [Undo/Redo](../examples/undoredo/)\n *  * [Advanced](../examples/advanced)\n *\n * {@region Keyboard shortcuts}\n * Gantt has the following default keyboard shortcuts:\n *\n * | Keys                       | Action    | Action description                |\n * |----------------------------|-----------|-----------------------------------|\n * | `Alt`+`Shift`+`ArrowRight` | *indent*  | Indents currently selected tasks  |\n * | `Alt`+`Shift`+`ArrowLeft`  | *outdent* | Outdents currently selected tasks |\n *\n * <div class=\"note\">Please note that <code>Ctrl</code> is the equivalent to <code>Command</code> and <code>Alt</code>\n * is the equivalent to <code>Option</code> for Mac users</div>\n *\n * As Gantt is a subclass of Grid, many of Grid's {@link Grid.view.Grid#keyboard-shortcuts keyboard-shortcuts}\n * works for Gantt as well.\n *\n * For more information on how to customize keyboard shortcuts, please see\n * [our guide](#Gantt/guides/customization/keymap.md).\n * {@endregion}\n *\n * @extends Gantt/view/GanttBase\n * @classtype gantt\n * @widget\n */\nexport default class Gantt extends GanttBase {\n    /**\n     * **This config is not used in the Gantt**\n     * @private\n     * @config {Scheduler.crud.AbstractCrudManagerMixin} crudManagerClass\n     */\n    /**\n     * **This config is not used in the Gantt. Please use {@link #config-project} config instead**\n     * @private\n     * @config {Object|Scheduler.crud.AbstractCrudManagerMixin} crudManager\n     */\n    static get $name() {\n        return 'Gantt';\n    }\n    // Factoryable type name\n    static get type() {\n        return 'gantt';\n    }\n}\n// Register this widget type with its Factory\nGantt.initClass();\nGantt._$name = 'Gantt';", "// region Gantt\n// column\nexport { default as AddNewColumn } from '../lib/Gantt/column/AddNewColumn.js';\nexport { default as AllColumns } from '../lib/Gantt/column/AllColumns.js';\nexport { default as BaselineStartDateColumn } from '../lib/Gantt/column/BaselineStartDateColumn.js';\nexport { default as BaselineStartVarianceColumn } from '../lib/Gantt/column/BaselineStartVarianceColumn.js';\nexport { default as BaselineEndDateColumn } from '../lib/Gantt/column/BaselineEndDateColumn.js';\nexport { default as BaselineEndVarianceColumn } from '../lib/Gantt/column/BaselineEndVarianceColumn.js';\nexport { default as BaselineDurationColumn } from '../lib/Gantt/column/BaselineDurationColumn.js';\nexport { default as BaselineDurationVarianceColumn } from '../lib/Gantt/column/BaselineDurationVarianceColumn.js';\nexport { default as CalendarColumn } from '../lib/Gantt/column/CalendarColumn.js';\nexport { default as ConstraintDateColumn } from '../lib/Gantt/column/ConstraintDateColumn.js';\nexport { default as ConstraintTypeColumn } from '../lib/Gantt/column/ConstraintTypeColumn.js';\nexport { default as DeadlineDateColumn } from '../lib/Gantt/column/DeadlineDateColumn.js';\nexport { default as DependencyColumn } from '../lib/Gantt/column/DependencyColumn.js';\nexport { default as EarlyEndDateColumn } from '../lib/Gantt/column/EarlyEndDateColumn.js';\nexport { default as EarlyStartDateColumn } from '../lib/Gantt/column/EarlyStartDateColumn.js';\nexport { default as EffortColumn } from '../lib/Gantt/column/EffortColumn.js';\nexport { default as EndDateColumn } from '../lib/Gantt/column/EndDateColumn.js';\nexport { default as EventModeColumn } from '../lib/Gantt/column/EventModeColumn.js';\nexport { default as GanttDateColumn } from '../lib/Gantt/column/GanttDateColumn.js';\nexport { default as IgnoreResourceCalendarColumn } from '../lib/Gantt/column/IgnoreResourceCalendarColumn.js';\nexport { default as InactiveColumn } from '../lib/Gantt/column/InactiveColumn.js';\nexport { default as LateEndDateColumn } from '../lib/Gantt/column/LateEndDateColumn.js';\nexport { default as LateStartDateColumn } from '../lib/Gantt/column/LateStartDateColumn.js';\nexport { default as ManuallyScheduledColumn } from '../lib/Gantt/column/ManuallyScheduledColumn.js';\nexport { default as MilestoneColumn } from '../lib/Gantt/column/MilestoneColumn.js';\nexport { default as NameColumn } from '../lib/Gantt/column/NameColumn.js';\nexport { default as NoteColumn } from '../lib/Gantt/column/NoteColumn.js';\nexport { default as PercentDoneColumn } from '../lib/Gantt/column/PercentDoneColumn.js';\nexport { default as PredecessorColumn } from '../lib/Gantt/column/PredecessorColumn.js';\nexport { default as ResourceAssignmentColumn } from '../lib/Gantt/column/ResourceAssignmentColumn.js';\nexport { default as ResourceAssignmentGridResourceColumn } from '../lib/Gantt/column/ResourceAssignmentGridResourceColumn.js';\nexport { default as RollupColumn } from '../lib/Gantt/column/RollupColumn.js';\nexport { default as SchedulingDirectionColumn } from '../lib/Gantt/column/SchedulingDirectionColumn.js';\nexport { default as SchedulingModeColumn } from '../lib/Gantt/column/SchedulingModeColumn.js';\nexport { default as SequenceColumn } from '../lib/Gantt/column/SequenceColumn.js';\nexport { default as ShowInTimelineColumn } from '../lib/Gantt/column/ShowInTimelineColumn.js';\nexport { default as StartDateColumn } from '../lib/Gantt/column/StartDateColumn.js';\nexport { default as SuccessorColumn } from '../lib/Gantt/column/SuccessorColumn.js';\nexport { default as TimeAxisColumn } from '../lib/Gantt/column/TimeAxisColumn.js';\nexport { default as TotalSlackColumn } from '../lib/Gantt/column/TotalSlackColumn.js';\nexport { default as WBSColumn } from '../lib/Gantt/column/WBSColumn.js';\n//data\nexport { default as AssignmentsManipulationStore } from '../lib/Gantt/data/AssignmentsManipulationStore.js';\nexport { default as AssignmentStore } from '../lib/Gantt/data/AssignmentStore.js';\nexport { default as CalendarManagerStore } from '../lib/Gantt/data/CalendarManagerStore.js';\nexport { default as DependencyStore } from '../lib/Gantt/data/DependencyStore.js';\nexport { default as ResourceStore } from '../lib/Gantt/data/ResourceStore.js';\nexport { default as TaskStore } from '../lib/Gantt/data/TaskStore.js';\nexport { default as WbsField } from '../lib/Gantt/data/field/WbsField.js';\n// feature\nexport { default as Baselines } from '../lib/Gantt/feature/Baselines.js';\nexport { default as CellEdit } from '../lib/Gantt/feature/CellEdit.js';\nexport { default as CriticalPaths } from '../lib/Gantt/feature/CriticalPaths.js';\nexport { default as Dependencies } from '../lib/Gantt/feature/Dependencies.js';\nexport { default as Indicators } from '../lib/Gantt/feature/Indicators.js';\nexport { default as Labels } from '../lib/Gantt/feature/Labels.js';\nexport { default as ParentArea } from '../lib/Gantt/feature/ParentArea.js';\nexport { default as ProgressLine } from '../lib/Gantt/feature/ProgressLine.js';\nexport { default as ProjectLines } from '../lib/Gantt/feature/ProjectLines.js';\nexport { default as Rollups } from '../lib/Gantt/feature/Rollups.js';\nexport { default as ScrollButtons } from '../lib/Gantt/feature/ScrollButtons.js';\nexport { default as Summary } from '../lib/Gantt/feature/Summary.js';\nexport { default as TaskCopyPaste } from '../lib/Gantt/feature/TaskCopyPaste.js';\nexport { default as TaskDrag } from '../lib/Gantt/feature/TaskDrag.js';\nexport { default as TaskDragCreate } from '../lib/Gantt/feature/TaskDragCreate.js';\nexport { default as TaskEdit } from '../lib/Gantt/feature/TaskEdit.js';\nexport { default as TaskMenu } from '../lib/Gantt/feature/TaskMenu.js';\nexport { default as TaskNonWorkingTime } from '../lib/Gantt/feature/TaskNonWorkingTime.js';\nexport { default as TaskResize } from '../lib/Gantt/feature/TaskResize.js';\nexport { default as TaskSegmentDrag } from '../lib/Gantt/feature/TaskSegmentDrag.js';\nexport { default as TaskSegmentResize } from '../lib/Gantt/feature/TaskSegmentResize.js';\nexport { default as TaskTooltip } from '../lib/Gantt/feature/TaskTooltip.js';\nexport { default as TreeGroup } from '../lib/Gantt/feature/TreeGroup.js';\nexport { default as Versions } from '../lib/Gantt/feature/Versions.js';\n//export\nexport { default as MultiPageExporter } from '../lib/Gantt/feature/export/exporter/MultiPageExporter.js';\nexport { default as MultiPageVerticalExporter } from '../lib/Gantt/feature/export/exporter/MultiPageVerticalExporter.js';\nexport { default as PdfExport } from '../lib/Gantt/feature/export/PdfExport.js';\nexport { default as Print } from '../lib/Gantt/feature/export/Print.js';\nexport { default as SinglePageExporter } from '../lib/Gantt/feature/export/exporter/SinglePageExporter.js';\n// model\nexport { default as AssignmentModel } from '../lib/Gantt/model/AssignmentModel.js';\nexport { default as Baseline } from '../lib/Gantt/model/Baseline.js';\nexport { default as CalendarIntervalModel } from '../lib/Gantt/model/CalendarIntervalModel.js';\nexport { default as CalendarModel } from '../lib/Gantt/model/CalendarModel.js';\nexport { default as DependencyModel } from '../lib/Gantt/model/DependencyModel.js';\nexport { default as ProjectModel } from '../lib/Gantt/model/ProjectModel.js';\nexport { default as ResourceModel } from '../lib/Gantt/model/ResourceModel.js';\nexport { default as TaskModel } from '../lib/Gantt/model/TaskModel.js';\nexport { default as WebSocketProjectModel } from '../lib/Gantt/model/WebSocketProjectModel.js';\n// util\nexport { default as ProjectGenerator } from '../lib/Gantt/util/ProjectGenerator.js';\nexport { default as ResourceAssignmentParser } from '../lib/Gantt/util/ResourceAssignmentParser.js';\n// widget\nexport { default as AssignmentField } from '../lib/Gantt/widget/AssignmentField.js';\nexport { default as AssignmentGrid } from '../lib/Gantt/widget/AssignmentGrid.js';\nexport { default as AssignmentPicker } from '../lib/Gantt/widget/AssignmentPicker.js';\nexport { default as CalendarPicker } from '../lib/Gantt/widget/CalendarPicker.js';\nexport { default as DependencyField } from '../lib/Gantt/widget/DependencyField.js';\nexport { default as TaskEditor } from '../lib/Gantt/widget/TaskEditor.js';\n// feature experimental\nexport { default as MspExport } from '../lib/Gantt/feature/export/MspExport.js';\n// view mixin\nexport { default as GanttDom } from '../lib/Gantt/view/mixin/GanttDom.js';\nexport { default as GanttRegions } from '../lib/Gantt/view/mixin/GanttRegions.js';\nexport { default as GanttScroll } from '../lib/Gantt/view/mixin/GanttScroll.js';\nexport { default as GanttState } from '../lib/Gantt/view/mixin/GanttState.js';\nexport { default as GanttStores } from '../lib/Gantt/view/mixin/GanttStores.js';\nexport { default as GanttTimelineDateMapper } from '../lib/Gantt/view/mixin/GanttTimelineDateMapper.js';\nexport { default as TaskNavigation } from '../lib/Gantt/view/mixin/TaskNavigation.js';\n// view orientation\nexport { default as NewTaskRendering } from '../lib/Gantt/view/orientation/NewTaskRendering.js';\n// view\nexport { default as Gantt } from '../lib/Gantt/view/Gantt.js';\nexport { default as GanttBase } from '../lib/Gantt/view/GanttBase.js';\n//endregion\n\n\nimport GlobalEvents from '../lib/Core/GlobalEvents.js';\nimport BrowserHelper from '../lib/Core/helper/BrowserHelper.js';\nimport VersionHelper from '../lib/Core/helper/VersionHelper.js';\nimport Widget from '../lib/Core/widget/Widget.js';\nimport Toast from '../lib/Core/widget/Toast.js';\nimport Override from '../lib/Core/mixin/Override.js';\nimport DomHelper from '../lib/Core/helper/DomHelper.js';\nimport GanttBase from '../lib/Gantt/view/GanttBase.js';\nimport Dependencies from '../lib/Gantt/feature/Dependencies.js';\n(() => {\n    //region Common\n    const\n        HOSTS            = [\n            'bryntum.com',\n            'cdpn.io',\n            'react-gantt.com',\n            'vue-gantt.com',\n            'vue-scheduler.com',\n            'react-scheduler.com',\n            'angular-scheduler.com',\n            'angular-calendar.com',\n            'vue-calendar.com',\n            'react-calendar.com',\n            'lmctfy.net',\n            'bryntum-dev-ed.develop.lightning.force.com'\n        ],\n        ONE_DAY          = 1000 * 60 * 60 * 24,\n        EXPIRING_CLASSES = [],\n        location = (globalThis || self).location;\n    if (!VersionHelper.isTestEnv && (HOSTS.some(host => location.host.includes(host)) || /\\/docs/.test(location.href))) {\n        return;\n    }\n    let initialized;\n    function initExpiryHelper(owner, baseClass) {\n        if (!initialized) {\n            initialized = true;\n            ExpiryHelper.construct({\n                widget : owner\n            });\n        }\n        // do not remove this line (used to distinguish trial bundles by regexp)\n        owner.__foo = 'THISISTRIAL';\n    }\n    //endregion\n    //region ExpiryHelper\n    class ExpiryHelper {\n        static construct(config) {\n            const\n                me            = this,\n                product       = 'taskboard',\n                productName   = 'TaskBoard',\n                version       = VersionHelper.getVersion(product),\n                callHomeDelay = VersionHelper.isTestEnv ? 3000 : 1000 * 60,\n                blockUrl      = BrowserHelper.queryString.blockUrl;\n            Object.assign(me, {\n                version,\n                product,\n                Product          : productName,\n                verifyUrl        : VersionHelper.isTestEnv ? blockUrl : 'https://bryntum.com/verify/',\n                blocked          : false,\n                lastVersionCheck : 0,\n                trialKey         : `b-${product}-trial-start`,\n                versionCheckKey  : `b-${product}-verify-date`\n            }, config);\n            if (!VersionHelper.isTestEnv) {\n                console.log(`Bryntum ${productName} Trial Version`);\n            }\n            me.cacheTrialStartTime();\n            if (me.isExpired) {\n                if (document.readyState === 'complete') {\n                    me.onTrialExpired();\n                }\n                else {\n                    document.addEventListener('readystatechange', () => {\n                        if (document.readyState === 'complete') {\n                            me.onTrialExpired();\n                        }\n                    });\n                }\n            }\n            // Call home to log trial usage, assuming localStorage access works reliably\n            // 1 min delay to be less easily detected\n            setTimeout(() => {\n                me.updateBlockedStatus();\n            }, callHomeDelay);\n        }\n        static cacheTrialStartTime() {\n            const\n                me         = this,\n                timeString = BrowserHelper.getLocalStorageItem(me.trialKey),\n                time       = Number(timeString);\n            if (time && !isNaN(time)) {\n                me.trialStartTime = time;\n            }\n            me.trialStartTime = me.trialStartTime || Date.now();\n            // First trial access, or no localstorage (no local storage meaning our expiration mechanism won't work. Only remote blocking will end the trial)\n            BrowserHelper.setLocalStorageItem(me.trialKey, me.trialStartTime);\n        }\n        static get isExpired() {\n            return this.blocked || (Date.now() - this.trialStartTime > ONE_DAY * 45) || window.bryntum?.[this.product]?.expired;\n        }\n        static updateBlockedStatus() {\n            const\n                me                  = this,\n                saveVersionCheckKey = () => BrowserHelper.setLocalStorageItem(me.versionCheckKey, Date.now());\n            me.lastVersionCheck = me.lastVersionCheck || BrowserHelper.getLocalStorageItem(me.versionCheckKey) || 0;\n            // Max 1 version check per session / day\n            if (me.lastVersionCheck && Date.now() - me.lastVersionCheck < ONE_DAY) {\n                return;\n            }\n            if (me.verifyUrl) {\n                const\n                    url    = encodeURIComponent(location.href),\n                    logUrl = `${me.verifyUrl}?id=${window.bryntum.license}&url=${url}`,\n                    img    = new Image();\n                img.onload = () => {\n                    // 2x2 image means trial is blocked due to violation\n                    if (img.naturalWidth === 2) {\n                        me.blockTrial();\n                    }\n                    else {\n                        // Just in case\n                        saveVersionCheckKey();\n                    }\n                };\n                img.onerror = () => {\n                    saveVersionCheckKey();\n                };\n                img.src = logUrl;\n            }\n            else {\n                saveVersionCheckKey();\n            }\n        }\n        static onTrialExpired() {\n            const rootEl = this.widget.rootElement;\n            if (!this.expirationShown) {\n                this.expirationShown = true;\n                if (!VersionHelper.isTestEnv) {\n                    console.warn(`Bryntum ${this.Product} trial version expired. Purchase a license at https://bryntum.com/store or contact us at https://bryntum.com/contact/ for licensing options.`);\n                }\n                rootEl.floatRoot && Toast.show({\n                    html        : `Psst! Your Bryntum ${this.Product} trial has expired. Please see <a href=\"https://bryntum.com/store\">our store</a> for licensing options`,\n                    timeout     : 20000,\n                    rootElement : rootEl\n                });\n            }\n            DomHelper.removeEachSelector(rootEl, '.b-sch-dependency');\n            DomHelper.forEachSelector(rootEl, '.b-container', element => {\n                const widget = Widget.fromElement(element, 'widget');\n                if (EXPIRING_CLASSES.some(cls => widget instanceof cls)) {\n                    this.maskExpiredWidget(widget);\n                }\n            });\n        }\n        static blockTrial() {\n            this.blocked = true;\n            // Get rid of version check timestamp\n            BrowserHelper.removeLocalStorageItem(this.versionCheckKey);\n            // To force expired state: Set a fake early trial timestamp\n            BrowserHelper.setLocalStorageItem(this.trialKey, 1);\n            this.onTrialExpired();\n        }\n        static maskExpiredWidget(widget) {\n            widget.mask({\n                text  : '<h3 style=\"margin:0\">Trial expired, <a href=\"https://bryntum.com/store\" style=\"margin:0 3px; color:inherit\">click here</a> to buy a license.</h3>',\n                icon  : 'b-fa b-fa-frown',\n                type  : 'trial',\n                cover : 'target'\n            });\n        }\n        static setWaterMark(element, {\n            darkColor = 'rgba(255, 255, 255, 0.03)',\n            lightColor = 'rgba(240, 240, 240, 0.54)'\n        } = {}) {\n            // Used for thumbnails\n            if (BrowserHelper.queryString.thumb != null) {\n                return;\n            }\n            const\n                color     = DomHelper.themeInfo?.name?.toLowerCase().endsWith('-dark') ? darkColor : lightColor,\n                svgString = `\n                   <svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"100%\" height=\"100%\" style=\"font-family:sans-serif;font-weight:900;fill:${color}\">\n                    <defs>\n                        <pattern id=\"company\" patternUnits=\"userSpaceOnUse\" width=\"400\" height=\"200\">\n                            <text y=\"30\" font-size=\"40\" id=\"name\">Bryntum</text>\n                            <text y=\"120\" x=\"200\" font-size=\"24\" id=\"trial\">Trial Version</text>\n                        </pattern>\n                        <pattern id=\"pattern\" xlink:href=\"#company\" patternTransform=\"rotate(-45)\">\n                            <use xlink:href=\"#name\" /><use xlink:href=\"#trial\" />\n                        </pattern>\n                    </defs>\n                    <rect width=\"100%\" height=\"100%\" fill=\"url(#pattern)\" />\n                </svg>`;\n            element.style.backgroundImage = `url('data:image/svg+xml;base64,${window.btoa(svgString)}')`;\n        };\n    }\n    //endregion\n    //region Common override\n    const applyBaseOverride = baseClass => {\n        EXPIRING_CLASSES.push(baseClass);\n        Override.apply(class {\n            static get target() {\n                return {\n                    class : baseClass\n                };\n            }\n            onPaintOverride() {\n                const\n                    me            = this,\n                    setWatermarks = () => {\n                        const targets = me.subGrids ? Object.values(me.subGrids) : [me];\n                        for (const target of targets) {\n                            if (target.element) {\n                                ExpiryHelper.setWaterMark(target.element);\n                            }\n                        }\n                    };\n                initExpiryHelper(me, baseClass);\n                setWatermarks();\n                // React to theme changes\n                GlobalEvents.on('theme', () => {\n                    setWatermarks();\n                });\n                if (ExpiryHelper.isExpired) {\n                    ExpiryHelper.maskExpiredWidget(me);\n                }\n            }\n        });\n    };\n    //endregion\n    if (typeof GanttBase !== 'undefined') {\n        applyBaseOverride(GanttBase);\n    }\n})();\n(() => {\n    // do not load analytics code for specific domains\n    const ignoreDomainRe = /(.force.com|.lightning.com|.salesforce.com|lmctfy.net|qa.bryntum.com|qa2.bryntum.com)/;\n    // document location might be null in firefox in salesforce\n    if (!document.location || ignoreDomainRe.test(document.location.href) || window.top !== window) {\n        return;\n    }\n    let id;\n    const websiteUrls = [\n        'bryntum.com',\n        'cdpn.io'\n    ];\n    const\n        products   = ['calendar', 'grid', 'gantt', 'scheduler', 'schedulerpro', 'taskboard'],\n        frameworks = ['angular', 'react', 'vue', 'ionic'];\n    websiteUrls.splice(0, 0, ...products.map(prod => frameworks.map(framework => `${framework}-${prod}`)).concat('bryntum.com').flat());\n    if (document.location.host.match(websiteUrls.join('|'))) {\n        id = 'G-1VY6776VJP';\n    }\n    else {\n        id = 'G-H465KZDH8S';\n    }\n    const newScript = document.createElement('script');\n    newScript.onload = function() {\n        window.dataLayer = window.dataLayer || [];\n        function gtag() {\n            window.dataLayer.push(arguments);\n        }\n        gtag('js', new Date());\n        gtag('config', id);\n    };\n    document.head.appendChild(newScript);\n    newScript.src = 'https://www.googletagmanager.com/gtag/js?id=' + id;\n})();\n"],
  "mappings": "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",
  "names": ["AddNewColumn", "Column", "_a", "me", "columns", "Combo", "columnRecord", "newColumn", "event", "Store", "ColumnStore", "result", "col", "colRecord", "gridCol", "column", "headerElement", "GanttDateColumn", "DateColumn", "data", "store", "format", "__publicField", "BaselineStartDateColumn", "BaselineEndDateColumn", "BaselineDurationColumn", "DurationColumn", "BaselineDurationVarianceColumn", "BaselineStartVarianceColumn", "BaselineEndVarianceColumn", "CalendarPicker", "calendars", "c", "value", "CalendarColumn", "project", "model", "string", "record", "rec", "ConstraintDateColumn", "directionMap", "ConstraintTypeColumn", "editor", "ConstraintTypePicker", "DeadlineDateColumn", "EarlyEndDateColumn", "EarlyStartDateColumn", "EffortColumn", "EffortField", "EndDateColumn", "editorCfg", "IgnoreResourceCalendarColumn", "CheckColumn", "InactiveColumn", "LateEndDateColumn", "LateStartDateColumn", "ManuallyScheduledColumn", "MilestoneColumn", "NameColumn", "TreeColumn", "NoteColumn", "PercentDoneColumn", "NumberColumn", "config", "isExport", "toggleTypes", "buildDependencySuffixRe", "dependencyTypes", "dependencySuffixRe", "_DependencyField", "ourSide", "otherSide", "Collection", "localizeDependencies", "LocaleManager_default", "TextField", "keyEvent", "key", "picker", "oldPicker", "filterField", "filterFieldInput", "Objects", "e", "task", "List", "dependency", "cls", "Rectangle", "element", "contentElement", "taskName", "StringHelper", "dependencyIdField", "idField", "taskIdentifier", "dependencies", "dependenciesCollection", "dep", "list", "item", "box", "side", "id", "type", "delimiter", "eventIdField", "eventField", "getEventId", "a", "b", "Dependencies", "taskStore", "dependencyStore", "delimiterRegEx", "DependencyModel", "i", "dependencyText", "idLen", "linkedTask", "linkedTaskId", "remainder", "edgeAndLag", "parsedLag", "DateHelper", "DependencyField", "hasNoProject", "v", "depIsValid", "DependencyColumn", "Delayable_default", "grid", "taskRecord", "inputField", "oldValue", "editorContext", "toValidate", "oldDependencies", "isPredecessor", "PredecessorColumn", "AssignmentsManipulationStore", "AssignmentStore", "projectEvent", "_b", "assignmentStore", "resourceStore", "resourceDataSource", "eventDataSource", "storeData", "resource", "existingAssignment", "lhs", "rhs", "changes", "AssignmentModel", "isSerializableEqual", "locale", "En_default", "LocaleHelper", "ResourceAssignmentGridResourceColumn", "ResourceInfoColumn", "cellElement", "AssignmentGrid", "Grid", "selected", "deselected", "assignment", "as", "existingAs", "oldStore", "units", "AssignmentPicker", "AssignmentField", "records", "PickerField", "ObjectHelper", "assignments", "ourStoreVersion", "initialValue", "resourceNameRegExp", "ResourceAssignmentColumn", "index", "htmlEncode", "task1", "task2", "a1", "a2", "regexp", "AvatarRendering", "tooltip", "resourceRecord", "assignmentRecord", "overflowCount", "overflowAssignments", "text", "height", "rowHeight", "cellStyles", "padding", "source", "ChipView", "val", "chipView", "chipViewWrap", "DomHelper", "chipCloneElement", "size", "nbrVisible", "isLastOverflowing", "imgConfig", "resourceImageFolderPath", "imageUrl", "avatar", "parsedAssignments", "newAssignments", "assignmentData", "range", "cs", "DragHelper", "context", "grabbed", "targetTask", "valid", "validDropTarget", "resourceAssignmentCell", "avatarContainer", "RollupColumn", "SchedulingDirectionColumn", "effectiveDirection", "SchedulingDirectionPicker", "SchedulingModeColumn", "SchedulingModePicker", "SequenceColumn", "ShowInTimelineColumn", "StartDateColumn", "SuccessorColumn", "TotalSlackColumn", "operator", "Duration", "WBSColumn", "AllColumns_default", "EventModeColumn", "checked", "TimeAxisColumn", "CalendarModel", "CalendarManagerStore", "args", "fromTask", "toTask", "fieldName", "newValue", "DependencyStore", "ResourceModel", "ResourceStore", "__decorate", "decorators", "target", "desc", "r", "d", "ConstrainedByParentMixin", "Mixin", "BaseEventMixin", "HasChildrenMixin", "ConstrainedEarlyEventMixin", "base", "superProto", "date", "isForward", "intervals", "parentEvent", "parentIntervals", "Direction", "ManuallyScheduledParentConstraintInterval", "ConstraintIntervalSide", "DisableManuallyScheduledConflictResolution", "Localizable_default", "ConflictResolution", "ManuallyScheduledParentConstraintIntervalDescription", "ConstraintIntervalDescription", "interval", "tpl", "ConstraintInterval", "transaction", "manuallyScheduledQuark", "prototypeValue", "ConstrainedLateEventMixin", "childEvent", "MAX_DATE", "subEventsIterator", "childDate", "startDateConstraintIntervals", "endDateConstraintIntervals", "effectiveInterval", "conflict", "ConflictEffect", "EffectResolutionResult", "Reject", "isDateFinite", "MIN_DATE", "earlyStartDate", "lateStartDate", "earlyEndDate", "lateEndDate", "slackUnit", "endSlack", "startDateIntervals", "endDateIntervals", "lateStartDateConstraintIntervals", "lateEndDateConstraintIntervals", "field", "EarlyLateLazyness", "model_field", "dateConverter", "TimeUnit", "calculate", "ScheduledByDependenciesLateEventMixin", "ScheduledByDependenciesEarlyEventMixin", "toEvent", "isAtomicValue", "dependencyConstraintIntervalClass", "successor", "manuallyScheduled", "successorDate", "DependencyType", "lag", "lagUnit", "lagMS", "calendar", "endDate", "projectDirection", "ownConstraintType", "ConstraintType", "hasSuccessor", "constraintType", "dependencyType", "successorDirection", "InactiveEventMixin", "quark", "inactive", "isLoading", "child", "ProposedOrPrevious", "subEvents", "activeCnt", "subEvent", "write", "fixedEffortSEDWUGraphDescription", "CycleDescription", "StartDateVar", "EndDateVar", "DurationVar", "EffortVar", "UnitsVar", "endDateByEffortFormula", "durationFormula", "unitsFormula", "effortFormula", "startDateByEffortFormula", "startDateFormula", "endDateFormula", "fixedEffortSEDWUForward", "CycleResolution", "fixedEffortSEDWUBackward", "FixedEffortMixin", "HasSchedulingModeMixin", "YIELD", "SchedulingMode", "cycleDispatcher", "HasProposedValue", "Y", "direction", "fixedUnitsSEDWUGraphDescription", "fixedUnitsSEDWUForwardNonEffortDriven", "fixedUnitsSEDWUForwardEffortDriven", "fixedUnitsSEDWUBackwardNonEffortDriven", "fixedUnitsSEDWUBackwardEffortDriven", "FixedUnitsMixin", "effortDriven", "GanttEvent", "MixinAny", "SchedulerProEvent", "keepDuration", "ProjectConstraintResolution", "projectConstraintResolution", "dispatcher", "startDateResolution", "endDateResolution", "durationResolution", "proposedStartDate", "ProposedOrPreviousValueOf", "proposedEndDate", "projectDate", "eventDate", "passed", "CalculateProposed", "effectiveDuration", "ProjectConstraintConflictEffect", "IgnoreProjectConstraintResolution", "HonorProjectConstraintResolution", "ProjectConstraintConflictEffectDescription", "Base", "dateFormat", "Baseline", "TimeSpan", "startDate", "duration", "durationUnit", "variance", "WbsField", "DataField", "Wbs", "applyBaselineDefaults", "baselines", "baseline", "hasData", "descendingWbsSorter", "s", "isReversed", "children", "firstChildWbs", "childWbs", "n", "refreshWbsOptions", "refreshWbsOnJoinOptions", "TaskModel", "PartOfProject_default", "PercentDoneMixin_default", "EventSegmentModel", "wasPersistable", "copy", "baselinesField", "version", "missingBaselines", "successors", "dependencyRecords", "isSuccessors", "updated", "toAdd", "toRemove", "currentSet", "depsArr", "existingDep", "predecessors", "currentAssignments", "removedAssignments", "current", "newAss", "currentAssignment", "assigned", "count", "code", "t", "effort", "resources", "useOrderedTree", "options", "_c", "_d", "_e", "_f", "parent", "refreshed", "wbs", "reverse", "DependencyBaseModel", "node", "promise", "segments", "segment", "refreshWbsForChildrenOptions", "wbsAuto", "wbsManual", "sortByWbs", "TaskStore", "ChronoEventTreeStoreMixin", "AjaxStore", "DayIndexMixin_default", "GetEventsMixin_default", "nodes", "newParent", "newChildren", "isMove", "silent", "wbsRefreshed", "oldParent", "flags", "transformFn", "rest", "modified", "altered", "outdented", "parentId", "currentGrandparentId", "log", "originalNodeAbove", "nodeAboveIndex", "modifiedParents", "modifiedParentsByDepth", "opts", "parents", "up", "resourceId", "events", "start", "end", "excludeEvent", "allEvents", "eventToRemove", "tasks", "from", "to", "baselineSelector", "Baselines", "TooltipBase", "gantt", "disable", "forElement", "baselineElement", "displayDuration", "top", "rtl", "position", "baselineBox", "inset", "renderData", "extraConfigs", "wrapperCls", "GridFeatureManager", "tabEaterSpec", "CellEdit", "cfg", "addNewAtEnd", "addToCurrentParent", "newTaskDefaults", "tabEater", "EventHelper", "newTask", "CriticalPaths", "InstancePlugin", "criticalPaths", "path", "client", "fromBoxSide", "toBoxSide", "criticalPathSorter", "round", "num", "endMarker", "batch", "forceBoxes", "domConfigs", "topIndex", "bottomIndex", "startMS", "endMS", "fromEvent", "fromIndex", "toIndex", "fromDateMS", "toDateMS", "lineDomConfigs", "startIndex", "endIndex", "criticalFeature", "lineDef", "startBox", "endBox", "arrowMargin", "startRowBox", "endRowBox", "startBoxEnd", "endBoxStart", "endBoxEnd", "sourceEndsBeforeStart", "VersionHelper", "activeTarget", "fromSide", "toSide", "Indicators", "indicator", "encodedName", "items", "indicators", "name", "iconCls", "timeAxis", "timeAxisViewModel", "x", "width", "classList", "DomClassList", "total", "usedIndicators", "indicatorFn", "timeSpan", "Labels", "ParentArea", "parentRecord", "highlighted", "rowOffsetHeight", "descendants", "domConfig", "configs", "row", "ProgressLine", "svg", "rowManager", "taskRecords", "dragData", "statusDate", "statusDateX", "viewBox", "viewXY", "el", "lines", "line", "ArrayHelper", "taskId", "lineDefinitions", "point", "translateBy", "isZeroDuration", "progressBarEl", "totalSize", "ProjectLines", "AbstractTimeRanges", "AttachToProjectMixin_default", "rollupCls", "rollupSelector", "Rollups", "rawElements", "rollupElements", "pieces", "startText", "endDateValue", "endText", "left", "wrapperChildren", "style", "positionData", "ScrollButtons", "firstPaint", "timeAxisColumn", "taskBefore", "taskAfter", "Summary", "TimelineSummary", "summaries", "summaryContainer", "tick", "html", "tipHtml", "valueHtml", "TaskCopyPaste", "TransactionalFeature_default", "RowCopyPaste", "action", "superIsActionAvailable", "idMap", "generateNames", "toInsert", "recordReference", "depsMap", "deps", "predecessor", "TaskDrag", "DragBase", "eventElement", "eventRecord", "eventType", "dd", "info", "dateConstraints", "taskRegion", "relatedRecords", "eventBarEls", "scheduleRegion", "draggedEntities", "coord", "browserEvent", "oldStartDate", "TaskDragCreate", "DragCreateBase", "Draggable_default", "drag", "draggingEnd", "mousedownDate", "TaskEditor", "GanttTaskEditor", "TaskEdit", "taskElement", "selection", "TaskMenu", "EventMenu", "targetElement", "eventParams", "isTreeGrouped", "usesDisplayStore", "multiSelected", "casedEventName", "TaskNonWorkingTime", "calendarIntervals", "barMode", "rowMap", "taskMap", "shouldPaint", "map", "oneTickMs", "ranges", "old", "Tooltip", "domEvent", "TaskResize", "EventResize", "timespanRecord", "generation", "toSet", "TaskSegmentDrag", "eventData", "abort", "mainTaskElement", "mainTaskRegion", "dirty", "initialMainTaskElementWidth", "minDate", "maxDate", "TaskSegmentResize", "EventSegmentResize", "TaskTooltip", "TreeGroup", "root", "WalkHelper", "minStartDate", "maxEndDate", "percentDone", "transformedData", "levels", "GanttVersions", "Versions", "isMultiple", "BASELINE_RATIO", "GanttExporterMixin_default", "fgCanvasEl", "rows", "addedRows", "normalRows", "rowConfig", "eventsMap", "renderBaselines", "offset", "taskDOMConfig", "isMilestone", "hasBaselines", "DomSync", "extrasArray", "startX", "endX", "firstRowHTML", "firstRowTop", "lastRowTop", "firstRowIndex", "taskIndex", "estimatedY", "MultiPageExporter", "MultiPageVerticalExporter", "SinglePageExporter", "PdfExport", "Print", "PrintMixin_default", "CalendarIntervalModel", "HasCriticalPathsMixin", "paths", "pathsToProcess", "eventsToProcess", "projectEndDate", "childEvents", "eventIsCritical", "eventIsActive", "eventEndDate", "criticalPredecessorNodes", "pathCopy", "GanttProjectMixin", "SchedulerProProjectMixin", "HasEffortMixin", "ProjectConstraintInterval", "SchedulerProAssignmentMixin", "SchedulerProResourceMixin", "ProjectType", "UnsafeProposedOrPreviousValueOf", "toProcess", "ProjectConstraintIntervalDescription", "dateQuark", "ProjectModel", "Model", "ProjectChangeHandlerMixin_default", "ProjectCurrentConfig_default", "ProjectCrudManager_default", "ProjectModelTimeZoneMixin_default", "ProjectModelCommon_default", "DateConstraintInterval", "DependencyConstraintInterval", "StateTrackingManager", "TimeRangeStore", "json", "inlineData", "wasSet", "WebSocketProjectModel", "ProjectWebSocketHandlerMixin_default", "year", "earlyMondayThisYear", "rnd", "RandomGenerator", "getNum", "token", "ProjectGenerator", "requestedTaskCount", "maxProjectSize", "progressCallback", "blockCount", "projectSize", "generator", "taskCount", "dependencyCount", "block", "AsyncHelper", "currentId", "dependencyId", "projectDuration", "blockDuration", "sumDuration", "currentDuration", "currentStartDate", "finishedDuration", "rndDuration", "addToTotal", "resetSum", "nextStartDate", "calculateEndDate", "storePercentDone", "blockStartId", "subParent1", "subParent2", "defineParser", "alt", "seq", "succeed", "red", "isSuccess", "Parser_default", "resourceNamePEG", "integerPEG", "decimalSeparatorPEG", "unitsNumberPEG", "integer", "sep", "fractional", "unitsPersentagePEG", "perc", "unitsDesignationPEG", "startSep", "endSep", "commaPEG", "raPEG", "parse", "str", "gotSuccess", "possibleResult", "structuredResult", "unstracturedRest", "part", "currentResource", "compose", "parseResult", "exactIfPossible", "resourceName", "match", "normalize", "ResourceAssignmentParser_default", "taskUnitMap", "projectUnitMap", "constraintMap", "typeMap", "dependencyTypeMap", "_MspExport", "fileContent", "BrowserHelper", "XMLHelper", "fileName", "calendarManagerStore", "effectiveCalendar", "uid", "calendarName", "baseCalendarUID", "isBaseCalendar", "timeFormat", "ticks", "daysData", "day", "dummyCalendar", "calendarCacheInterval", "calendarsStatus", "dayData", "wbsCode", "durationMs", "effortMs", "actualDurationMs", "startDateStr", "endDateStr", "durationStr", "fallbackValue", "taskUID", "finish", "assignmentWorkMs", "actualAssignmentWorkMs", "remainingAssignmentWorkMs", "actualEffortMs", "effortStr", "unit", "delta", "hour", "minute", "second", "MspExport", "hyphenRe", "GanttDom_default", "Target", "elementOrEvent", "inner", "cellData", "DomDataStore", "columnId", "GanttRegions_default", "local", "timeAxisSubGridElement", "region", "taStart", "taEnd", "includeOutside", "defaultScrollOptions", "GanttScroll_default", "taskStart", "taskEnd", "timeAxisStart", "timeAxisEnd", "scrollable", "clientSize", "requiredSize", "bufferPx", "bufferInMs", "taskIsOutside", "currentTimeSpanRange", "startAnchorPoint", "endAnchorPoint", "visibleDateRange", "visibleMS", "sign", "taskRec", "scroller", "scrollerViewport", "targetRect", "GanttState_default", "state", "storeState", "specialKeys", "subState", "GanttStores_default", "ProjectConsumer_default", "oldProject", "isInitialCommit", "isCalculated", "visibleDate", "requestedVisibleDate", "min", "max", "timeRanges", "eventStore", "wasEnabled", "GanttTimelineDateMapper_default", "animate100", "TaskNavigation_default", "_focusedCell", "taskEl", "isFocused", "preserveSelection", "rowIdx", "nextTask", "prevTask", "activeItem", "targetEvent", "scrollIntoView", "uiEvent", "navigator", "skipScrollIntoView", "focusEvent", "navigationEvent", "eventFocus", "destinationCell", "releaseEventActions", "renderEventActions", "NewTaskRendering", "isBatchUpdating", "innerElement", "bounds", "viewStart", "viewEnd", "horizontalAdjustment", "startCoordinate", "endCoordinate", "pxPerSecond", "secondsOutOfView", "pxOutOfView", "tickIdx", "rowElement", "y", "bottom", "xy", "roundingMethod", "syncIdMap", "wrapper", "linked", "scrollX", "timeAxisSubGrid", "returnEnd", "taskContent", "resizable", "eventStyle", "eventColor", "childContent", "lastDomConfig", "isRelease", "isRender", "emptyObject", "newTaskCount", "GanttBase", "TimelineBase", "CrudManagerView_default", "EventNavigation_default", "ProjectProgressMixin_default", "SchedulingIssueResolution_default", "TransactionalFeatureMixin_default", "CurrentConfig_default", "hasInlineStores", "hasInlineData", "defaults", "currentStore", "cols", "constructor", "trigger", "params", "scrollTaskIntoViewOnCellClick", "selectedRecords", "deselectedRecords", "setTaskSelection", "referenceTask", "milestone", "asPredecessor", "asSuccessor", "newRecord", "Toast", "Gantt", "HOSTS", "EXPIRING_CLASSES", "location", "host", "initialized", "initExpiryHelper", "owner", "baseClass", "ExpiryHelper", "product", "productName", "callHomeDelay", "blockUrl", "timeString", "time", "saveVersionCheckKey", "url", "logUrl", "img", "rootEl", "widget", "Widget", "darkColor", "lightColor", "color", "svgString", "Override", "setWatermarks", "targets", "GlobalEvents_default", "ignoreDomainRe", "websiteUrls", "products", "frameworks", "prod", "framework", "newScript", "gtag"]
}
