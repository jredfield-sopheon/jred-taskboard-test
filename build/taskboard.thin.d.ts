/*!
 *
 * Bryntum TaskBoard 5.6.2
 *
 * Copyright(c) 2023 Bryntum AB
 * https://bryntum.com/contact
 * https://bryntum.com/license
 *
 */
import { AjaxStore, AlignSpec, Base, Breakpoint, BryntumListenerConfig, BryntumScrollOptions, Button, ChipView, ChipViewConfig, Collection, CollectionConfig, CollectionFilter, CollectionFilterConfig, ColorField, ColorPicker, Combo, Container, ContainerItemConfig, ContainerLayoutConfig, DataField, DomClassList, DomConfig, Duration, DurationConfig, Editor, EditorConfig, EventsClass, Field, FieldContainer, FieldContainerConfig, FieldTriggerConfig, FilterField, Grouper, HttpMethods, InputFieldConfig, InstancePlugin, List, ListConfig, LoadMaskableClass, LocaleHelper, LocaleManager, Mask, MaskConfig, Menu, MenuItem, MenuItemConfig, Model, ModelFieldConfig, Panel, PanelCollapser, PanelCollapserConfig, PanelCollapserOverlay, PanelCollapserOverlayConfig, PanelHeader, Popup, Rectangle, RelationConfig, ScrollManager, ScrollManagerConfig, Scroller, ScrollerConfig, Slider, Sorter, StateProvider, StateTrackingManager, StateTrackingManagerConfig, Store, StoreConfig, SyncDataOnLoadOptions, Tab, TabConfig, Tool, ToolConfig, Toolbar, ToolbarConfig, Tooltip, TooltipConfig, UndoRedoBase, Widget } from '../../Core/build/core.thin'

type AnyConstructor<A = any> = new (...input: any[]) => A

type CrudManagerStoreDescriptor = any & {
    /**
     * Unique store identifier. Store related requests/responses will be sent under this name.
     */
    storeId: string
    /**
     * The store itself.
     */
    store: Store
    /**
     * Set this if the store model has a predefined field to keep phantom record identifier.
     */
    phantomIdField?: string
    /**
     * id field name, if it's not specified then class will try to get it from store model.
     */
    idField?: string
    /**
     * Set to true to write all fields from modified records
     */
    writeAllFields?: boolean
}

/**
 * Predefined named colors (actual color might vary by theme):
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/mixin/EventModelMixin#typedef-EventColor)
 */
type EventColor = 'red'|'pink'|'purple'|'magenta'|'violet'|'indigo'|'blue'|'cyan'|'teal'|'green'|'gantt-green'|'lime'|'yellow'|'orange'|'deep-orange'|'gray'|'light-gray'|string|null

/**
 * Config object used to set different values for top/left and bottom/right margin.
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/mixin/ResourceModelMixin#typedef-ResourceMarginConfig)
 */
type ResourceMarginConfig = any & {
    /**
     * Margin top in horizontal mode, margin left in vertical mode
     */
    start: number
    /**
     * Margin bottom in horizontal mode, margin right in vertical mode
     */
    end: number
}

/**
 * Config options for all TaskItems combined. See respective item classes for more information.
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/TaskItem#typedef-TaskItemOptions)
 */
type TaskItemOptions = any & {
    /**
     * Type of the item
     */
    type: string
    /**
     * Field to display in the item. Usually inferred from the key when supplying items
     */
    field?: string
    /**
     * Style definition in string or object form
     */
    style?: string|object
    /**
     * CSS class to add
     */
    cls?: string
    /**
     * Flex order, can be used to re-order task items
     */
    order?: number
    /**
     * Specify `true` to hide the task item
     */
    hidden?: boolean
    /**
     * Widget type or config to use as the editor for this item. Used in the inline task
     * editor. Set to `null` to not use an editor for this item
     */
    editor?: string|object
    /**
     * For `type : 'image'` - Url prepended to this items value
     */
    baseUrl?: string
    /**
     * For `type : 'template'` - Template function used to generate task content
     */
    template?: Function
    /**
     * For `type : 'progress'` and `type : 'rating'` - Max value
     */
    max?: number
    /**
     * For `type : 'todoList'` - Name of a property on a todo item to display as its text
     */
    textField?: string
    /**
     * For `type : 'todoList'` - Name of a property on a todo item to use for the checkbox
     */
    checkedField?: string
    /**
     * For `type : 'todoList'` - Name of a property on a todo item whose value will be added
     * as a CSS class to the todo item
     */
    clsField?: string
    /**
     * For `type : 'resourceAvatars'` - Maximum avatars to display by default.
     */
    maxAvatars?: number
    /**
     * For `type : 'resourceAvatars'` - Specify `true` to slightly overlap avatars for tasks
     */
    overlap?: boolean
    /**
     * For `type : 'tags'` - Property used to display the tag text
     */
    textProperty?: string
    /**
     * For `type : 'tags'` - Property used to add a CSS class to each tag
     */
    clsProperty?: string
    /**
     * For `type : 'tags'` - Property used to split a value string into tags
     */
    separator?: string
}

/**
 * An object that describes a card size level.
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/ResponsiveCards#typedef-CardSize)
 */
type CardSize = any & {
    /**
     * Level name, applied to the columns element as CSS class `b-[name]-cards`
     */
    name: string
    /**
     * Express in px. This level applies above the previous levels maxWidth and up to this value
     */
    maxWidth: number
    /**
     * Max number of resource avatars to render, when that feature is used
     */
    maxAvatars: number
    /**
     * A config object for items in a card's header, merges with
     * [headerItems](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-headerItems) to determine items for this card size
     */
    headerItems: Record<string, TaskItemOptions>
    /**
     * A config object for items in a card's header, merges with
     * [bodyItems](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-bodyItems) to determine items for this card size
     */
    bodyItems: Record<string, TaskItemOptions>
    /**
     * A config object for items in a card's header, merges with
     * [footerItems](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-footerItems) to determine items for this card size
     */
    footerItems: Record<string, TaskItemOptions>
}

/**
 * Type with configuration options for [GridRowModel](https://bryntum.com/products/grid/docs/api/Grid/data/GridRowModel) class.
 */
type GridRowModelConfig = {
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Grid/data/GridRowModel#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * CSS class (or several classes divided by space) to append to row elements
     */
    cls: string
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * A link to use for this record when rendered into a [TreeColumn](https://bryntum.com/products/grid/docs#Grid/column/TreeColumn).
     */
    href: string
    /**
     * Icon for row (used automatically in tree, feel free to use it in renderer in other cases)
     */
    iconCls: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Grid/data/GridRowModel#config-id)
     */
    id: string|number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Grid/data/GridRowModel#config-readOnly)
     */
    readOnly: boolean
    /**
     * Used by the default implementation of [getRowHeight](https://bryntum.com/products/grid/docs#Grid/view/GridBase#config-getRowHeight) to determine row
     * height. Set it to use another height than the default for a the records row.
     */
    rowHeight: number
    /**
     * The target to use if this tree node provides a value for the [href](https://bryntum.com/products/grid/docs#Grid/data/GridRowModel#field-href) field.
     */
    target: '_self'|'_blank'|'_parent'|'_top'|null
}

/**
 * Model extended with some fields related to grid rendering. Used as default model type in the grids store if nothing
 * else is specified.
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Grid/data/GridRowModel)
 */
export class GridRowModel extends Model {
    /**
     * CSS class (or several classes divided by space) to append to row elements
     */
    cls: string
    /**
     * A link to use for this record when rendered into a [TreeColumn](https://bryntum.com/products/grid/docs#Grid/column/TreeColumn).
     */
    href: string
    /**
     * Icon for row (used automatically in tree, feel free to use it in renderer in other cases)
     */
    iconCls: string
    /**
     * Used by the default implementation of [getRowHeight](https://bryntum.com/products/grid/docs#Grid/view/GridBase#config-getRowHeight) to determine row
     * height. Set it to use another height than the default for a the records row.
     */
    rowHeight: number
    /**
     * The target to use if this tree node provides a value for the [href](https://bryntum.com/products/grid/docs#Grid/data/GridRowModel#field-href) field.
     */
    target: '_self'|'_blank'|'_parent'|'_top'|null
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<GridRowModelConfig>} config Raw model config
     * @param {Store} store Data store
     * @param {object} meta Meta data
     */
    constructor(config?: Partial<GridRowModelConfig>, store?: Store, meta?: object);
}

/**
 * Type with configuration options for [AbstractCrudManager](https://bryntum.com/products/grid/docs/api/Scheduler/crud/AbstractCrudManager) class.
 */
type AbstractCrudManagerConfig = {
    /**
     * Specify `true` to automatically call [load](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) method on the next frame after creation.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/crud/AbstractCrudManager#config-autoLoad)
     */
    autoLoad: boolean
    /**
     * `true` to automatically persist store changes after edits are made in any of the stores monitored.
     * Please note that sync request will not be invoked immediately but only after
     * [autoSyncTimeout](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#config-autoSyncTimeout) interval.
     */
    autoSync: boolean
    /**
     * The timeout in milliseconds to wait before persisting changes to the server.
     * Used when [autoSync](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#config-autoSync) is set to `true`.
     */
    autoSyncTimeout: number
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/crud/AbstractCrudManager#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/crud/AbstractCrudManager#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Sets the list of stores controlled by the CRUD manager.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/crud/AbstractCrudManager#config-crudStores)
     */
    crudStores: Store[]|string[]|CrudManagerStoreDescriptor[]
    /**
     * Specify as `true` to force sync requests to be sent when calling `sync()`, even if there are no local
     * changes. Useful in a polling scenario, to keep client up to date with the backend.
     */
    forceSync: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/crud/AbstractCrudManager#config-listeners)
     */
    listeners: object
    /**
     * Convenience shortcut to set only the url to load from, when you do not need to supply any other config
     * options in the `load` section of the `transport` config.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/crud/AbstractCrudManager#config-loadUrl)
     */
    loadUrl: string
    /**
     * Field name to be used to transfer a phantom record identifier.
     */
    phantomIdField: string
    /**
     * Field name to be used to transfer a phantom parent record identifier.
     */
    phantomParentIdField: string
    /**
     * `True` to reset identifiers (defined by `idField` config) of phantom records before submitting them
     * to the server.
     */
    resetIdsBeforeSync: boolean
    /**
     * When `true` treats parsed responses without `success` property as successful.
     * In this mode a parsed response is treated as invalid if it has explicitly set `success : false`.
     */
    skipSuccessProperty: boolean
    /**
     * Name of a store property to retrieve store identifiers from. Make sure you have an instance of a
     * store to use it by id. Store identifier is used as a container name holding corresponding store data
     * while transferring them to/from the server. By default, `storeId` property is used. And in case a
     * container identifier has to differ this config can be used:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/crud/AbstractCrudManager#config-storeIdProperty)
     */
    storeIdProperty: string
    /**
     * Sets the list of stores controlled by the CRUD manager.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/crud/AbstractCrudManager#config-stores)
     */
    stores: Store[]|string[]|CrudManagerStoreDescriptor[]
    /**
     * When `true` the Crud Manager does not require all updated and removed records to be mentioned in the
     * *sync* response. In this case response should include only server side changes.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/crud/AbstractCrudManager#config-supportShortSyncResponse)
     */
    supportShortSyncResponse: boolean
    /**
     * An array of store identifiers sets an alternative sync responses apply order.
     * By default, the order in which sync responses are applied to the stores is the same as they
     * registered in. But in case of some tricky dependencies between stores this order can be changed:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/crud/AbstractCrudManager#config-syncApplySequence)
     */
    syncApplySequence: string[]
    /**
     * Convenience shortcut to set only the url to sync to, when you do not need to supply any other config
     * options in the `sync` section of the `transport` config.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/crud/AbstractCrudManager#config-syncUrl)
     */
    syncUrl: string
    /**
     * When `true` forces the CRUD manager to process responses depending on their `type` attribute.
     * So `load` request may be responded with `sync` response for example.
     * Can be used for smart server logic allowing the server to decide when it's better to respond with a
     * complete data set (`load` response) or it's enough to return just a delta (`sync` response).
     */
    trackResponseType: boolean
    /**
     * This config validates the response structure for requests made by the Crud Manager.
     * When `true`, the Crud Manager checks every parsed response structure for errors
     * and if the response format is invalid, a warning is logged to the browser console.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/crud/AbstractCrudManager#config-validateResponse)
     */
    validateResponse: boolean
    /**
     * `true` to write all fields from the record to the server.
     * If set to `false` it will only send the fields that were modified.
     * Note that any fields that have [persist](https://bryntum.com/products/taskboard/docs/api/Core/data/field/DataField#config-persist) set to `false` will
     * still be ignored and fields having [alwaysWrite](https://bryntum.com/products/taskboard/docs/api/Core/data/field/DataField#config-alwaysWrite) set to `true`
     * will always be included.
     */
    writeAllFields: boolean
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires before [load request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) is sent. Return `false` to cancel load request.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onBeforeLoad: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires before loaded data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.options Options provided to the [load](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) method.
     */
    onBeforeLoadApply: ((event: { source: AbstractCrudManager, response: object, options: object }) => void)|string
    /**
     * Fires before server response gets applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     */
    onBeforeResponseApply: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object }) => void)|string
    /**
     * Fires before [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) is sent. Return `false` to cancel sync request.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/crud/AbstractCrudManager#event-beforeSync)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onBeforeSync: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires before sync response data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     */
    onBeforeSyncApply: ((event: { source: AbstractCrudManager, response: object }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/crud/AbstractCrudManager#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when data in any of the registered data stores is changed.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/crud/AbstractCrudManager#event-hasChanges)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     */
    onHasChanges: ((event: { source: AbstractCrudManager }) => void)|string
    /**
     * Fires on successful [load request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) completion after data gets loaded to the stores.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onLoad: ((event: { source: AbstractCrudManager, response: object, responseOptions: object }) => void)|string
    /**
     * Fired after [load request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) was canceled by some [beforeLoad](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#event-beforeLoad)
     * listener or due to incomplete prior load request.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onLoadCanceled: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires when a [load request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onLoadFail: ((event: { source: AbstractCrudManager, response: object, responseText: string, responseOptions: object }) => void)|string
    /**
     * Fires when registered stores get into state when they don't have any
     * not persisted change. This happens after [load](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) or [sync](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) request
     * completion. Or this may happen after a record update which turns its fields back to their original state.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/crud/AbstractCrudManager#event-noChanges)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     */
    onNoChanges: ((event: { source: AbstractCrudManager }) => void)|string
    /**
     * Fires on successful request completion after data gets applied to the stores.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onRequestDone: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object, responseOptions: object }) => void)|string
    /**
     * Fires when a request fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onRequestFail: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object, responseText: string, responseOptions: object }) => void)|string
    /**
     * Fires on successful [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) completion.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onSync: ((event: { source: AbstractCrudManager, response: object, responseOptions: object }) => void)|string
    /**
     * Fires after [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) was canceled by some [beforeSync](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#event-beforeSync) listener.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onSyncCanceled: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires after [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) was delayed due to incomplete previous one.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.arguments The arguments of [sync](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) call.
     */
    onSyncDelayed: ((event: { source: AbstractCrudManager, arguments: object }) => void)|string
    /**
     * Fires when a [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onSyncFail: ((event: { source: AbstractCrudManager, response: object, responseText: string, responseOptions: object }) => void)|string
}

/**
 * This is an abstract class serving as the base for the [CrudManager](https://bryntum.com/products/scheduler/docs#Scheduler/data/CrudManager) class.
 * It implements basic mechanisms to organize batch communication with a server.
 * Yet it does not contain methods related to *data transfer* nor *encoding*.
 * These methods are to be provided in sub-classes by consuming the appropriate mixins.
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/crud/AbstractCrudManager)
 */
export abstract class AbstractCrudManager extends Base {
    /**
     * Returns current changes as an object consisting of added/modified/removed arrays of records for every
     * managed store, keyed by each store's `id`. Returns `null` if no changes exist. Format:
     */
    readonly changes: object
    /**
     * The server revision stamp.
     * The *revision stamp* is a number which should be incremented after each server-side change.
     * This property reflects the current version of the data retrieved from the server and gets updated
     * after each [load](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) and [sync](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) call.
     */
    readonly crudRevision: number
    /**
     * A list of registered stores whose server communication will be collected into a single batch.
     * Each store is represented by a *store descriptor*.
     */
    crudStores: CrudManagerStoreDescriptor[]
    /**
     * Specify as `true` to force sync requests to be sent when calling `sync()`, even if there are no local
     * changes. Useful in a polling scenario, to keep client up to date with the backend.
     */
    forceSync: boolean
    /**
     * Get or set data of CrudManager stores. The returned data is identical to what
     * [toJSON](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManager#function-toJSON) returns:
     */
    inlineData: object
    /**
     * Returns `true` if changes tracking is suspended
     */
    readonly isChangeTrackingSuspended: boolean
    /**
     * Returns true if the crud manager is currently loading data
     */
    readonly isCrudManagerLoading: boolean
    /**
     * Returns true if the crud manager is currently syncing data
     */
    readonly isCrudManagerSyncing: boolean
    /**
     * Returns true if the crud manager is currently loading data
     */
    readonly isLoading: boolean
    /**
     * Get or set data of [crudStores](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManager#property-crudStores) as a JSON string.
     */
    json: string
    /**
     * Convenience shortcut to set only the url to load from, when you do not need to supply any other config
     * options in the `load` section of the `transport` config.
     */
    loadUrl: string
    /**
     * The server revision stamp.
     * The *revision stamp* is a number which should be incremented after each server-side change.
     * This property reflects the current version of the data retrieved from the server and gets updated after each
     * [load](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) and [sync](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) call.
     */
    readonly revision: number
    /**
     * A list of registered stores whose server communication will be collected into a single batch.
     * Each store is represented by a *store descriptor*.
     */
    stores: CrudManagerStoreDescriptor[]
    /**
     * An array of stores presenting an alternative sync responses apply order.
     * Each store is represented by a *store descriptor*.
     */
    syncApplySequence: CrudManagerStoreDescriptor[]
    /**
     * Convenience shortcut to set only the url to sync to, when you do not need to supply any other config
     * options in the `sync` section of the `transport` config.
     */
    syncUrl: string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires before [load request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) is sent. Return `false` to cancel load request.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onBeforeLoad: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires before loaded data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.options Options provided to the [load](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) method.
     */
    onBeforeLoadApply: ((event: { source: AbstractCrudManager, response: object, options: object }) => void)|string
    /**
     * Fires before server response gets applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     */
    onBeforeResponseApply: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object }) => void)|string
    /**
     * Fires before [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) is sent. Return `false` to cancel sync request.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/crud/AbstractCrudManager#event-beforeSync)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onBeforeSync: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires before sync response data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     */
    onBeforeSyncApply: ((event: { source: AbstractCrudManager, response: object }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/crud/AbstractCrudManager#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when data in any of the registered data stores is changed.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/crud/AbstractCrudManager#event-hasChanges)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     */
    onHasChanges: ((event: { source: AbstractCrudManager }) => void)|string
    /**
     * Fires on successful [load request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) completion after data gets loaded to the stores.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onLoad: ((event: { source: AbstractCrudManager, response: object, responseOptions: object }) => void)|string
    /**
     * Fired after [load request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) was canceled by some [beforeLoad](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#event-beforeLoad)
     * listener or due to incomplete prior load request.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onLoadCanceled: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires when a [load request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onLoadFail: ((event: { source: AbstractCrudManager, response: object, responseText: string, responseOptions: object }) => void)|string
    /**
     * Fires when registered stores get into state when they don't have any
     * not persisted change. This happens after [load](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) or [sync](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) request
     * completion. Or this may happen after a record update which turns its fields back to their original state.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/crud/AbstractCrudManager#event-noChanges)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     */
    onNoChanges: ((event: { source: AbstractCrudManager }) => void)|string
    /**
     * Fires on successful request completion after data gets applied to the stores.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onRequestDone: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object, responseOptions: object }) => void)|string
    /**
     * Fires when a request fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onRequestFail: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object, responseText: string, responseOptions: object }) => void)|string
    /**
     * Fires on successful [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) completion.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onSync: ((event: { source: AbstractCrudManager, response: object, responseOptions: object }) => void)|string
    /**
     * Fires after [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) was canceled by some [beforeSync](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#event-beforeSync) listener.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onSyncCanceled: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires after [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) was delayed due to incomplete previous one.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.arguments The arguments of [sync](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) call.
     */
    onSyncDelayed: ((event: { source: AbstractCrudManager, arguments: object }) => void)|string
    /**
     * Fires when a [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onSyncFail: ((event: { source: AbstractCrudManager, response: object, responseText: string, responseOptions: object }) => void)|string
    /**
     * Base constructor, passes arguments to [construct](https://bryntum.com/products/taskboard/docs/api/Core/Base#function-construct).
     * @param {object} args Usually called with a config object, but accepts any params
     */
    constructor(...args: object[]);
    /**
     * Accepts all changes in all stores, resets the modification tracking:
     */
    acceptChanges(): void;
    /**
     * Adds a store to the collection.
     * @param {Store|string|CrudManagerStoreDescriptor|Store[]|string[]|CrudManagerStoreDescriptor[]} store A store or list of stores. Each store might be specified by its instance, `storeId` or *descriptor*.
     * @param {number} position The relative position of the store. If `fromStore` is specified the position will be taken relative to it. If not specified then store(s) will be appended to the end of collection. Otherwise, it will be just a position in stores collection. ```javascript // insert stores store4, store5 to the start of collection crudManager.addCrudStore([ store4, store5 ], 0); ```
     * @param {string|Store|CrudManagerStoreDescriptor} fromStore The store relative to which position should be calculated. Can be defined as a store identifier, instance or descriptor (the result of [getStoreDescriptor](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-getStoreDescriptor) call). ```javascript // insert store6 just before a store having storeId equal to 'foo' crudManager.addCrudStore(store6, 0, 'foo');  // insert store7 just after store3 store crudManager.addCrudStore(store7, 1, store3); ```
     */
    addCrudStore(store: Store|string|CrudManagerStoreDescriptor|Store[]|string[]|CrudManagerStoreDescriptor[], position?: number, fromStore?: string|Store|CrudManagerStoreDescriptor): void;
    /**
     * Adds an event listener. This method accepts parameters in the following format:
     * @param {BryntumListenerConfig|string} config An object containing listener definitions, or the event name to listen for
     * @param {object|Function} thisObj Default `this` reference for all listeners in the config object, or the handler function to call if providing a string as the first arg.
     * @param {object} oldThisObj The `this` reference if the old signature starting with a string event name is used..
     */
    addListener(config: BryntumListenerConfig|string, thisObj?: object|Function, oldThisObj?: object): Function;
    /**
     * Adds a store to the collection.
     * @param {Store|string|CrudManagerStoreDescriptor|Store[]|string[]|CrudManagerStoreDescriptor[]} store A store or list of stores. Each store might be specified by its instance, `storeId` or *descriptor*.
     * @param {number} position The relative position of the store. If `fromStore` is specified the position will be taken relative to it. If not specified then store(s) will be appended to the end of collection. Otherwise, it will be an index in stores collection. ```javascript // insert stores store4, store5 to the start of collection crudManager.addStore([ store4, store5 ], 0); ```
     * @param {string|Store|CrudManagerStoreDescriptor} fromStore The store relative to which position should be calculated. Can be defined as a store identifier, instance or descriptor (the result of [getStoreDescriptor](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-getStoreDescriptor) call). ```javascript // insert store6 just before a store having storeId equal to 'foo' crudManager.addStore(store6, 0, 'foo');  // insert store7 just after store3 store crudManager.addStore(store7, 1, store3); ```
     */
    addStore(store: Store|string|CrudManagerStoreDescriptor|Store[]|string[]|CrudManagerStoreDescriptor[], position?: number, fromStore?: string|Store|CrudManagerStoreDescriptor): void;
    /**
     * Adds a store to the alternative sync responses apply sequence.
     * By default, the order in which sync responses are applied to the stores is the same as they registered in.
     * But this order can be changes either on construction step using [syncApplySequence](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#config-syncApplySequence) option
     * or by calling this method.
     * @param {Store|CrudManagerStoreDescriptor|Store[]|CrudManagerStoreDescriptor[]} store The store to add or its *descriptor* (or array of stores or descriptors).
     * @param {number} position The relative position of the store. If `fromStore` is specified the position will be taken relative to it. If not specified then store(s) will be appended to the end of collection. Otherwise, it will be just a position in stores collection. ```javascript // insert stores store4, store5 to the start of sequence crudManager.addStoreToApplySequence([ store4, store5 ], 0); ```
     * @param {string|Store|CrudManagerStoreDescriptor} fromStore The store relative to which position should be calculated. Can be defined as a store identifier, instance or its descriptor (the result of [getStoreDescriptor](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-getStoreDescriptor) call). ```javascript // insert store6 just before a store having storeId equal to 'foo' crudManager.addStoreToApplySequence(store6, 0, 'foo');  // insert store7 just after store3 store crudManager.addStoreToApplySequence(store7, 1, store3); ```
     */
    addStoreToApplySequence(store: Store|CrudManagerStoreDescriptor|Store[]|CrudManagerStoreDescriptor[], position?: number, fromStore?: string|Store|CrudManagerStoreDescriptor): void;
    /**
     * Applies a set of changes, as an object keyed by store id, to the affected stores. This function is intended
     * to use in apps that handle their own data syncing, it is not needed when using the CrudManager approach.
     * @param {object} changes Changeset to apply, an object keyed by store id where each value follows the format described in [applyChangeset](https://bryntum.com/products/taskboard/docs/api/Core/data/Store#function-applyChangeset)
     * @param {Function} transformFn Optional function used to preprocess a changeset per store in a different format, should return an object with the format expected by [applyChangeset](https://bryntum.com/products/taskboard/docs/api/Core/data/Store#function-applyChangeset)
     * @param {string} phantomIdField Field used by the backend when communicating a record being assigned a proper id instead of a phantom id
     */
    applyChangeset(changes: object, transformFn?: Function, phantomIdField?: string): void;
    /**
     * Cancels request to the server.
     * @param {Promise<any>} promise The request promise to cancel (a value returned by corresponding [sendRequest](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sendRequest) call).
     * @param {Function} reject Reject handle of the corresponding promise
     */
    abstract cancelRequest(promise: Promise<any>, reject: Function): void;
    /**
     * Returns `true` if any of registered stores (or some particular store) has non persisted changes.
     * @param {string|Store} storeId The store identifier or store instance to check changes for. If not specified then will check changes for all of the registered stores.
     */
    crudStoreHasChanges(storeId?: string|Store): boolean;
    /**
     * Decodes response from the server.
     * @param {string} response The response to decode.
     */
    abstract decode(response: string): object;
    /**
     * Encodes request to the server.
     * @param {object} request The request to encode.
     */
    abstract encode(request: object): string;
    /**
     * Returns a registered store.
     * @param {string} storeId Store identifier.
     */
    getCrudStore(storeId: string): Store;
    /**
     * Returns a registered store descriptor.
     * @param {string|Store} storeId The store identifier or registered store instance.
     */
    getStoreDescriptor(storeId: string|Store): CrudManagerStoreDescriptor;
    /**
     * Check if any listener is registered for the specified eventName
     * @param {string} eventName
     */
    hasListener(eventName: string): boolean;
    /**
     * Loads data to the stores registered in the crud manager. For example:
     * @param {object|string} options The request parameters or a URL.
     */
    load(options?: {
        request?: object
    }|string): Promise<any>;
    /**
     * Loads data to the Crud Manager
     * @param {object} response A simple object representing the data. The object structure matches the decoded `load` response structure: ```javascript // load static data into crudManager crudManager.loadCrudManagerData({     success   : true,     resources : {         rows : [             { id : 1, name : 'John' },             { id : 2, name : 'Abby' }         ]     } }); ```
     * @param {object} options Extra data loading options.
     */
    loadCrudManagerData(response: object, options?: object): void;
    /**
     * Alias for [addListener](https://bryntum.com/products/taskboard/docs/api/Core/mixin/Events#function-addListener). Adds an event listener. This method accepts parameters in the following format:
     * @param {BryntumListenerConfig|string} config An object containing listener definitions, or the event name to listen for
     * @param {object|Function} thisObj Default `this` reference for all listeners in the config object, or the handler function to call if providing a string as the first arg.
     * @param {object} oldThisObj The `this` reference if the old signature starting with a string event name is used..
     */
    on(config: BryntumListenerConfig|string, thisObj?: object|Function, oldThisObj?: object): Function;
    /**
     * Relays all events through another object that also implements Events mixin. Adds a prefix to the event name
     * before relaying, for example add -&gt; storeAdd
     * @param {EventsClass} through Object to relay the events through, needs to mix Events mixin in
     * @param {string} prefix Prefix to add to event name
     * @param {boolean} transformCase Specify false to prevent making first letter of event name uppercase
     */
    relayAll(through: EventsClass, prefix: string, transformCase?: boolean): void;
    /**
     * Removes all listeners registered to this object by the application.
     */
    removeAllListeners(): void;
    /**
     * Removes a store from collection. If the store was registered in alternative sync sequence list
     * it will be removed from there as well.
     * @param {CrudManagerStoreDescriptor|string|Store} store The store to remove. Either the store descriptor, store identifier or store itself.
     */
    removeCrudStore(store: CrudManagerStoreDescriptor|string|Store): void;
    /**
     * Removes an event listener. Same API signature as [addListener](https://bryntum.com/products/taskboard/docs/api/Core/mixin/Events#function-addListener)
     * @param {object|string} config A config object or the event name
     * @param {object|Function} thisObj `this` reference for all listeners, or the listener function
     * @param {object} oldThisObj `this` The `this` object for the legacy way of adding listeners
     */
    removeListener(config: object|string, thisObj: object|Function, oldThisObj: object): void;
    /**
     * Removes a store from the alternative sync sequence.
     * @param {CrudManagerStoreDescriptor|string|Store} store The store to remove. Either the store descriptor, store identifier or store itself.
     */
    removeStoreFromApplySequence(store: CrudManagerStoreDescriptor|string|Store): void;
    /**
     * Resumes automatic sync upon store changes. Will schedule a sync if the internal counter is 0.
     * @param {boolean} doSync Pass `true` to schedule a sync after resuming (if there are pending changes) and `false` to not persist the changes.
     */
    resumeAutoSync(doSync?: boolean): void;
    /**
     * Resumes [hasChanges](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#event-hasChanges) and [noChanges](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#event-noChanges) events. By default, it will check for changes
     * and if there are any, `hasChanges` or `noChanges` event will be triggered.
     * @param {boolean} skipChangeCheck
     */
    resumeChangeTracking(skipChangeCheck?: boolean): void;
    /**
     * Resume event triggering after a call to [suspendEvents()](https://bryntum.com/products/taskboard/docs/api/Core/mixin/Events#function-suspendEvents). If any triggered events were queued they will be triggered.
     */
    resumeEvents(): boolean;
    /**
     * Reverts all changes in all stores and re-inserts any records that were removed locally. Any new uncommitted
     * records will be removed.
     */
    revertChanges(): void;
    /**
     * Sends request to the server.
     * @param {object} request The request to send. An object having following properties:
     */
    abstract sendRequest(request: {
        type: 'load'|'sync'
        data: string
        success: Function
        failure: Function
        thisObj: object
    }): Promise<any>;
    /**
     * Suspends automatic sync upon store changes. Can be called multiple times (it uses an internal counter).
     */
    suspendAutoSync(): void;
    /**
     * Suspends [hasChanges](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#event-hasChanges) and [noChanges](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#event-noChanges) events.
     */
    suspendChangeTracking(): void;
    /**
     * Prevents events from being triggered until [resumeEvents()](https://bryntum.com/products/taskboard/docs/api/Core/mixin/Events#function-resumeEvents) is called. Optionally queues events that are triggered while
     * suspended. Multiple calls stack to require matching calls to `resumeEvents()` before actually resuming.
     * @param {boolean} queue Specify true to queue events triggered while suspended
     */
    suspendEvents(queue?: boolean): void;
    /**
     * Persists changes made on the registered stores to the server and/or receives changes made on the backend.
     * Usage:
     */
    sync(): Promise<any>;
    /**
     * Returns the data from all CrudManager `crudStores` in a format that can be consumed by `inlineData`.
     */
    toJSON(): object;
    /**
     * Triggers an event, calling all registered listeners with the supplied arguments. Returning false from any listener
     * makes function return false.
     * @param {string} eventName Event name for which to trigger listeners
     * @param {{bubbles?: boolean, [key: string]: any}} param Single parameter passed on to listeners, source property will be added to it (this)
     */
    trigger(eventName: string, param?: {bubbles?: boolean, [key: string]: any}): Promise<boolean|any>;
    /**
     * Shorthand for [removeListener](https://bryntum.com/products/taskboard/docs/api/Core/mixin/Events#function-removeListener)
     * @param {object|string} config A config object or the event name
     * @param {object|Function} thisObj `this` reference for all listeners, or the listener function
     * @param {object} oldThisObj `this` The `this` object for the legacy way of adding listeners
     */
    un(config: object|string, thisObj?: object|Function, oldThisObj?: object): void;
}

/**
 * Type with configuration options for [AbstractCrudManagerMixin](https://bryntum.com/products/grid/docs/api/Scheduler/crud/AbstractCrudManagerMixin) class.
 */
type AbstractCrudManagerMixinClassConfig = {
    /**
     * Specify `true` to automatically call [load](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) method on the next frame after creation.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-autoLoad)
     */
    autoLoad: boolean
    /**
     * `true` to automatically persist store changes after edits are made in any of the stores monitored.
     * Please note that sync request will not be invoked immediately but only after
     * [autoSyncTimeout](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#config-autoSyncTimeout) interval.
     */
    autoSync: boolean
    /**
     * The timeout in milliseconds to wait before persisting changes to the server.
     * Used when [autoSync](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#config-autoSync) is set to `true`.
     */
    autoSyncTimeout: number
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Sets the list of stores controlled by the CRUD manager.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-crudStores)
     */
    crudStores: Store[]|string[]|CrudManagerStoreDescriptor[]
    /**
     * Specify as `true` to force sync requests to be sent when calling `sync()`, even if there are no local
     * changes. Useful in a polling scenario, to keep client up to date with the backend.
     */
    forceSync: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-listeners)
     */
    listeners: object
    /**
     * Convenience shortcut to set only the url to load from, when you do not need to supply any other config
     * options in the `load` section of the `transport` config.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-loadUrl)
     */
    loadUrl: string
    /**
     * Field name to be used to transfer a phantom record identifier.
     */
    phantomIdField: string
    /**
     * Field name to be used to transfer a phantom parent record identifier.
     */
    phantomParentIdField: string
    /**
     * `True` to reset identifiers (defined by `idField` config) of phantom records before submitting them
     * to the server.
     */
    resetIdsBeforeSync: boolean
    /**
     * When `true` treats parsed responses without `success` property as successful.
     * In this mode a parsed response is treated as invalid if it has explicitly set `success : false`.
     */
    skipSuccessProperty: boolean
    /**
     * Name of a store property to retrieve store identifiers from. Make sure you have an instance of a
     * store to use it by id. Store identifier is used as a container name holding corresponding store data
     * while transferring them to/from the server. By default, `storeId` property is used. And in case a
     * container identifier has to differ this config can be used:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-storeIdProperty)
     */
    storeIdProperty: string
    /**
     * When `true` the Crud Manager does not require all updated and removed records to be mentioned in the
     * *sync* response. In this case response should include only server side changes.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-supportShortSyncResponse)
     */
    supportShortSyncResponse: boolean
    /**
     * An array of store identifiers sets an alternative sync responses apply order.
     * By default, the order in which sync responses are applied to the stores is the same as they
     * registered in. But in case of some tricky dependencies between stores this order can be changed:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-syncApplySequence)
     */
    syncApplySequence: string[]
    /**
     * Convenience shortcut to set only the url to sync to, when you do not need to supply any other config
     * options in the `sync` section of the `transport` config.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-syncUrl)
     */
    syncUrl: string
    /**
     * When `true` forces the CRUD manager to process responses depending on their `type` attribute.
     * So `load` request may be responded with `sync` response for example.
     * Can be used for smart server logic allowing the server to decide when it's better to respond with a
     * complete data set (`load` response) or it's enough to return just a delta (`sync` response).
     */
    trackResponseType: boolean
    /**
     * This config validates the response structure for requests made by the Crud Manager.
     * When `true`, the Crud Manager checks every parsed response structure for errors
     * and if the response format is invalid, a warning is logged to the browser console.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-validateResponse)
     */
    validateResponse: boolean
    /**
     * `true` to write all fields from the record to the server.
     * If set to `false` it will only send the fields that were modified.
     * Note that any fields that have [persist](https://bryntum.com/products/taskboard/docs/api/Core/data/field/DataField#config-persist) set to `false` will
     * still be ignored and fields having [alwaysWrite](https://bryntum.com/products/taskboard/docs/api/Core/data/field/DataField#config-alwaysWrite) set to `true`
     * will always be included.
     */
    writeAllFields: boolean
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires before [load request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) is sent. Return `false` to cancel load request.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onBeforeLoad: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires before loaded data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.options Options provided to the [load](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) method.
     */
    onBeforeLoadApply: ((event: { source: AbstractCrudManager, response: object, options: object }) => void)|string
    /**
     * Fires before server response gets applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     */
    onBeforeResponseApply: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object }) => void)|string
    /**
     * Fires before [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) is sent. Return `false` to cancel sync request.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/crud/AbstractCrudManagerMixin#event-beforeSync)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onBeforeSync: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires before sync response data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     */
    onBeforeSyncApply: ((event: { source: AbstractCrudManager, response: object }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/crud/AbstractCrudManagerMixin#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when data in any of the registered data stores is changed.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/crud/AbstractCrudManagerMixin#event-hasChanges)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     */
    onHasChanges: ((event: { source: AbstractCrudManager }) => void)|string
    /**
     * Fires on successful [load request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) completion after data gets loaded to the stores.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onLoad: ((event: { source: AbstractCrudManager, response: object, responseOptions: object }) => void)|string
    /**
     * Fired after [load request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) was canceled by some [beforeLoad](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#event-beforeLoad)
     * listener or due to incomplete prior load request.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onLoadCanceled: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires when a [load request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onLoadFail: ((event: { source: AbstractCrudManager, response: object, responseText: string, responseOptions: object }) => void)|string
    /**
     * Fires when registered stores get into state when they don't have any
     * not persisted change. This happens after [load](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) or [sync](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) request
     * completion. Or this may happen after a record update which turns its fields back to their original state.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/crud/AbstractCrudManagerMixin#event-noChanges)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     */
    onNoChanges: ((event: { source: AbstractCrudManager }) => void)|string
    /**
     * Fires on successful request completion after data gets applied to the stores.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onRequestDone: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object, responseOptions: object }) => void)|string
    /**
     * Fires when a request fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onRequestFail: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object, responseText: string, responseOptions: object }) => void)|string
    /**
     * Fires on successful [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) completion.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onSync: ((event: { source: AbstractCrudManager, response: object, responseOptions: object }) => void)|string
    /**
     * Fires after [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) was canceled by some [beforeSync](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#event-beforeSync) listener.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onSyncCanceled: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires after [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) was delayed due to incomplete previous one.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.arguments The arguments of [sync](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) call.
     */
    onSyncDelayed: ((event: { source: AbstractCrudManager, arguments: object }) => void)|string
    /**
     * Fires when a [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onSyncFail: ((event: { source: AbstractCrudManager, response: object, responseText: string, responseOptions: object }) => void)|string
}

export abstract class AbstractCrudManagerMixinClass {
    /**
     * Returns current changes as an object consisting of added/modified/removed arrays of records for every
     * managed store, keyed by each store's `id`. Returns `null` if no changes exist. Format:
     */
    readonly changes: object
    /**
     * The server revision stamp.
     * The *revision stamp* is a number which should be incremented after each server-side change.
     * This property reflects the current version of the data retrieved from the server and gets updated
     * after each [load](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) and [sync](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) call.
     */
    readonly crudRevision: number
    /**
     * A list of registered stores whose server communication will be collected into a single batch.
     * Each store is represented by a *store descriptor*.
     */
    crudStores: CrudManagerStoreDescriptor[]
    /**
     * Specify as `true` to force sync requests to be sent when calling `sync()`, even if there are no local
     * changes. Useful in a polling scenario, to keep client up to date with the backend.
     */
    forceSync: boolean
    /**
     * Returns `true` if changes tracking is suspended
     */
    readonly isChangeTrackingSuspended: boolean
    /**
     * Returns true if the crud manager is currently loading data
     */
    readonly isCrudManagerLoading: boolean
    /**
     * Returns true if the crud manager is currently syncing data
     */
    readonly isCrudManagerSyncing: boolean
    /**
     * Convenience shortcut to set only the url to load from, when you do not need to supply any other config
     * options in the `load` section of the `transport` config.
     */
    loadUrl: string
    /**
     * An array of stores presenting an alternative sync responses apply order.
     * Each store is represented by a *store descriptor*.
     */
    syncApplySequence: CrudManagerStoreDescriptor[]
    /**
     * Convenience shortcut to set only the url to sync to, when you do not need to supply any other config
     * options in the `sync` section of the `transport` config.
     */
    syncUrl: string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires before [load request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) is sent. Return `false` to cancel load request.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onBeforeLoad: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires before loaded data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.options Options provided to the [load](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) method.
     */
    onBeforeLoadApply: ((event: { source: AbstractCrudManager, response: object, options: object }) => void)|string
    /**
     * Fires before server response gets applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     */
    onBeforeResponseApply: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object }) => void)|string
    /**
     * Fires before [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) is sent. Return `false` to cancel sync request.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/crud/AbstractCrudManagerMixin#event-beforeSync)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onBeforeSync: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires before sync response data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     */
    onBeforeSyncApply: ((event: { source: AbstractCrudManager, response: object }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/crud/AbstractCrudManagerMixin#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when data in any of the registered data stores is changed.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/crud/AbstractCrudManagerMixin#event-hasChanges)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     */
    onHasChanges: ((event: { source: AbstractCrudManager }) => void)|string
    /**
     * Fires on successful [load request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) completion after data gets loaded to the stores.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onLoad: ((event: { source: AbstractCrudManager, response: object, responseOptions: object }) => void)|string
    /**
     * Fired after [load request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) was canceled by some [beforeLoad](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#event-beforeLoad)
     * listener or due to incomplete prior load request.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onLoadCanceled: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires when a [load request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onLoadFail: ((event: { source: AbstractCrudManager, response: object, responseText: string, responseOptions: object }) => void)|string
    /**
     * Fires when registered stores get into state when they don't have any
     * not persisted change. This happens after [load](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) or [sync](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) request
     * completion. Or this may happen after a record update which turns its fields back to their original state.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/crud/AbstractCrudManagerMixin#event-noChanges)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     */
    onNoChanges: ((event: { source: AbstractCrudManager }) => void)|string
    /**
     * Fires on successful request completion after data gets applied to the stores.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onRequestDone: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object, responseOptions: object }) => void)|string
    /**
     * Fires when a request fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onRequestFail: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object, responseText: string, responseOptions: object }) => void)|string
    /**
     * Fires on successful [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) completion.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onSync: ((event: { source: AbstractCrudManager, response: object, responseOptions: object }) => void)|string
    /**
     * Fires after [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) was canceled by some [beforeSync](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#event-beforeSync) listener.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onSyncCanceled: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires after [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) was delayed due to incomplete previous one.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.arguments The arguments of [sync](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) call.
     */
    onSyncDelayed: ((event: { source: AbstractCrudManager, arguments: object }) => void)|string
    /**
     * Fires when a [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onSyncFail: ((event: { source: AbstractCrudManager, response: object, responseText: string, responseOptions: object }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<AbstractCrudManagerMixinClassConfig>} config
     */
    constructor(config?: Partial<AbstractCrudManagerMixinClassConfig>);
    /**
     * Accepts all changes in all stores, resets the modification tracking:
     */
    acceptChanges(): void;
    /**
     * Adds a store to the collection.
     * @param {Store|string|CrudManagerStoreDescriptor|Store[]|string[]|CrudManagerStoreDescriptor[]} store A store or list of stores. Each store might be specified by its instance, `storeId` or *descriptor*.
     * @param {number} position The relative position of the store. If `fromStore` is specified the position will be taken relative to it. If not specified then store(s) will be appended to the end of collection. Otherwise, it will be just a position in stores collection. ```javascript // insert stores store4, store5 to the start of collection crudManager.addCrudStore([ store4, store5 ], 0); ```
     * @param {string|Store|CrudManagerStoreDescriptor} fromStore The store relative to which position should be calculated. Can be defined as a store identifier, instance or descriptor (the result of [getStoreDescriptor](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-getStoreDescriptor) call). ```javascript // insert store6 just before a store having storeId equal to 'foo' crudManager.addCrudStore(store6, 0, 'foo');  // insert store7 just after store3 store crudManager.addCrudStore(store7, 1, store3); ```
     */
    addCrudStore(store: Store|string|CrudManagerStoreDescriptor|Store[]|string[]|CrudManagerStoreDescriptor[], position?: number, fromStore?: string|Store|CrudManagerStoreDescriptor): void;
    /**
     * Adds an event listener. This method accepts parameters in the following format:
     * @param {BryntumListenerConfig|string} config An object containing listener definitions, or the event name to listen for
     * @param {object|Function} thisObj Default `this` reference for all listeners in the config object, or the handler function to call if providing a string as the first arg.
     * @param {object} oldThisObj The `this` reference if the old signature starting with a string event name is used..
     */
    addListener(config: BryntumListenerConfig|string, thisObj?: object|Function, oldThisObj?: object): Function;
    /**
     * Adds a store to the alternative sync responses apply sequence.
     * By default, the order in which sync responses are applied to the stores is the same as they registered in.
     * But this order can be changes either on construction step using [syncApplySequence](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#config-syncApplySequence) option
     * or by calling this method.
     * @param {Store|CrudManagerStoreDescriptor|Store[]|CrudManagerStoreDescriptor[]} store The store to add or its *descriptor* (or array of stores or descriptors).
     * @param {number} position The relative position of the store. If `fromStore` is specified the position will be taken relative to it. If not specified then store(s) will be appended to the end of collection. Otherwise, it will be just a position in stores collection. ```javascript // insert stores store4, store5 to the start of sequence crudManager.addStoreToApplySequence([ store4, store5 ], 0); ```
     * @param {string|Store|CrudManagerStoreDescriptor} fromStore The store relative to which position should be calculated. Can be defined as a store identifier, instance or its descriptor (the result of [getStoreDescriptor](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-getStoreDescriptor) call). ```javascript // insert store6 just before a store having storeId equal to 'foo' crudManager.addStoreToApplySequence(store6, 0, 'foo');  // insert store7 just after store3 store crudManager.addStoreToApplySequence(store7, 1, store3); ```
     */
    addStoreToApplySequence(store: Store|CrudManagerStoreDescriptor|Store[]|CrudManagerStoreDescriptor[], position?: number, fromStore?: string|Store|CrudManagerStoreDescriptor): void;
    /**
     * Applies a set of changes, as an object keyed by store id, to the affected stores. This function is intended
     * to use in apps that handle their own data syncing, it is not needed when using the CrudManager approach.
     * @param {object} changes Changeset to apply, an object keyed by store id where each value follows the format described in [applyChangeset](https://bryntum.com/products/taskboard/docs/api/Core/data/Store#function-applyChangeset)
     * @param {Function} transformFn Optional function used to preprocess a changeset per store in a different format, should return an object with the format expected by [applyChangeset](https://bryntum.com/products/taskboard/docs/api/Core/data/Store#function-applyChangeset)
     * @param {string} phantomIdField Field used by the backend when communicating a record being assigned a proper id instead of a phantom id
     */
    applyChangeset(changes: object, transformFn?: Function, phantomIdField?: string): void;
    /**
     * Cancels request to the server.
     * @param {Promise<any>} promise The request promise to cancel (a value returned by corresponding [sendRequest](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sendRequest) call).
     * @param {Function} reject Reject handle of the corresponding promise
     */
    abstract cancelRequest(promise: Promise<any>, reject: Function): void;
    /**
     * Returns `true` if any of registered stores (or some particular store) has non persisted changes.
     * @param {string|Store} storeId The store identifier or store instance to check changes for. If not specified then will check changes for all of the registered stores.
     */
    crudStoreHasChanges(storeId?: string|Store): boolean;
    /**
     * Decodes response from the server.
     * @param {string} response The response to decode.
     */
    abstract decode(response: string): object;
    /**
     * Encodes request to the server.
     * @param {object} request The request to encode.
     */
    abstract encode(request: object): string;
    /**
     * Returns a registered store.
     * @param {string} storeId Store identifier.
     */
    getCrudStore(storeId: string): Store;
    /**
     * Returns a registered store descriptor.
     * @param {string|Store} storeId The store identifier or registered store instance.
     */
    getStoreDescriptor(storeId: string|Store): CrudManagerStoreDescriptor;
    /**
     * Check if any listener is registered for the specified eventName
     * @param {string} eventName
     */
    hasListener(eventName: string): boolean;
    /**
     * Loads data to the stores registered in the crud manager. For example:
     * @param {object|string} options The request parameters or a URL.
     */
    load(options?: {
        request?: object
    }|string): Promise<any>;
    /**
     * Loads data to the Crud Manager
     * @param {object} response A simple object representing the data. The object structure matches the decoded `load` response structure: ```javascript // load static data into crudManager crudManager.loadCrudManagerData({     success   : true,     resources : {         rows : [             { id : 1, name : 'John' },             { id : 2, name : 'Abby' }         ]     } }); ```
     * @param {object} options Extra data loading options.
     */
    loadCrudManagerData(response: object, options?: object): void;
    /**
     * Alias for [addListener](https://bryntum.com/products/taskboard/docs/api/Core/mixin/Events#function-addListener). Adds an event listener. This method accepts parameters in the following format:
     * @param {BryntumListenerConfig|string} config An object containing listener definitions, or the event name to listen for
     * @param {object|Function} thisObj Default `this` reference for all listeners in the config object, or the handler function to call if providing a string as the first arg.
     * @param {object} oldThisObj The `this` reference if the old signature starting with a string event name is used..
     */
    on(config: BryntumListenerConfig|string, thisObj?: object|Function, oldThisObj?: object): Function;
    /**
     * Relays all events through another object that also implements Events mixin. Adds a prefix to the event name
     * before relaying, for example add -&gt; storeAdd
     * @param {EventsClass} through Object to relay the events through, needs to mix Events mixin in
     * @param {string} prefix Prefix to add to event name
     * @param {boolean} transformCase Specify false to prevent making first letter of event name uppercase
     */
    relayAll(through: EventsClass, prefix: string, transformCase?: boolean): void;
    /**
     * Removes all listeners registered to this object by the application.
     */
    removeAllListeners(): void;
    /**
     * Removes a store from collection. If the store was registered in alternative sync sequence list
     * it will be removed from there as well.
     * @param {CrudManagerStoreDescriptor|string|Store} store The store to remove. Either the store descriptor, store identifier or store itself.
     */
    removeCrudStore(store: CrudManagerStoreDescriptor|string|Store): void;
    /**
     * Removes an event listener. Same API signature as [addListener](https://bryntum.com/products/taskboard/docs/api/Core/mixin/Events#function-addListener)
     * @param {object|string} config A config object or the event name
     * @param {object|Function} thisObj `this` reference for all listeners, or the listener function
     * @param {object} oldThisObj `this` The `this` object for the legacy way of adding listeners
     */
    removeListener(config: object|string, thisObj: object|Function, oldThisObj: object): void;
    /**
     * Removes a store from the alternative sync sequence.
     * @param {CrudManagerStoreDescriptor|string|Store} store The store to remove. Either the store descriptor, store identifier or store itself.
     */
    removeStoreFromApplySequence(store: CrudManagerStoreDescriptor|string|Store): void;
    /**
     * Resumes automatic sync upon store changes. Will schedule a sync if the internal counter is 0.
     * @param {boolean} doSync Pass `true` to schedule a sync after resuming (if there are pending changes) and `false` to not persist the changes.
     */
    resumeAutoSync(doSync?: boolean): void;
    /**
     * Resumes [hasChanges](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#event-hasChanges) and [noChanges](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#event-noChanges) events. By default, it will check for changes
     * and if there are any, `hasChanges` or `noChanges` event will be triggered.
     * @param {boolean} skipChangeCheck
     */
    resumeChangeTracking(skipChangeCheck?: boolean): void;
    /**
     * Resume event triggering after a call to [suspendEvents()](https://bryntum.com/products/taskboard/docs/api/Core/mixin/Events#function-suspendEvents). If any triggered events were queued they will be triggered.
     */
    resumeEvents(): boolean;
    /**
     * Reverts all changes in all stores and re-inserts any records that were removed locally. Any new uncommitted
     * records will be removed.
     */
    revertChanges(): void;
    /**
     * Sends request to the server.
     * @param {object} request The request to send. An object having following properties:
     */
    abstract sendRequest(request: {
        type: 'load'|'sync'
        data: string
        success: Function
        failure: Function
        thisObj: object
    }): Promise<any>;
    /**
     * Suspends automatic sync upon store changes. Can be called multiple times (it uses an internal counter).
     */
    suspendAutoSync(): void;
    /**
     * Suspends [hasChanges](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#event-hasChanges) and [noChanges](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#event-noChanges) events.
     */
    suspendChangeTracking(): void;
    /**
     * Prevents events from being triggered until [resumeEvents()](https://bryntum.com/products/taskboard/docs/api/Core/mixin/Events#function-resumeEvents) is called. Optionally queues events that are triggered while
     * suspended. Multiple calls stack to require matching calls to `resumeEvents()` before actually resuming.
     * @param {boolean} queue Specify true to queue events triggered while suspended
     */
    suspendEvents(queue?: boolean): void;
    /**
     * Persists changes made on the registered stores to the server and/or receives changes made on the backend.
     * Usage:
     */
    sync(): Promise<any>;
    /**
     * Triggers an event, calling all registered listeners with the supplied arguments. Returning false from any listener
     * makes function return false.
     * @param {string} eventName Event name for which to trigger listeners
     * @param {{bubbles?: boolean, [key: string]: any}} param Single parameter passed on to listeners, source property will be added to it (this)
     */
    trigger(eventName: string, param?: {bubbles?: boolean, [key: string]: any}): Promise<boolean|any>;
    /**
     * Shorthand for [removeListener](https://bryntum.com/products/taskboard/docs/api/Core/mixin/Events#function-removeListener)
     * @param {object|string} config A config object or the event name
     * @param {object|Function} thisObj `this` reference for all listeners, or the listener function
     * @param {object} oldThisObj `this` The `this` object for the legacy way of adding listeners
     */
    un(config: object|string, thisObj?: object|Function, oldThisObj?: object): void;
}

export const AbstractCrudManagerMixin : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & AbstractCrudManagerMixinClass>

/**
 * Type with configuration options for [JsonEncoder](https://bryntum.com/products/grid/docs/api/Scheduler/crud/encoder/JsonEncoder) class.
 */
type JsonEncoderClassConfig = {
    /**
     * Configuration of the JSON encoder used by the *Crud Manager*.
     */
    encoder: {
        requestData?: object
    }
}

export class JsonEncoderClass {
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<JsonEncoderClassConfig>} config
     */
    constructor(config?: Partial<JsonEncoderClassConfig>);
    /**
     * Decodes (parses) a *JSON* response string to an object. If parsing fails, it returns null.
     * Supposed to be overridden in case data provided by server has to be transformed into format requested by the *Crud Manager*.
     * @param {string} responseText The response text to decode.
     */
    decode(responseText: string): object;
    /**
     * Encodes a request object to *JSON* encoded string. If encoding fails (due to circular structure), it returns null.
     * Supposed to be overridden in case data provided by the *Crud Manager* has to be transformed into format requested by server.
     * @param {object} requestData The request to encode.
     */
    encode(requestData: object): string;
}

export const JsonEncoder : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & JsonEncoderClass>

/**
 * Type with configuration options for [AbstractCrudManagerValidation](https://bryntum.com/products/grid/docs/api/Scheduler/crud/mixin/AbstractCrudManagerValidation) class.
 */
type AbstractCrudManagerValidationClassConfig = {
    /**
     * When `true` treats parsed responses without `success` property as successful.
     * In this mode a parsed response is treated as invalid if it has explicitly set `success : false`.
     */
    skipSuccessProperty: boolean
    /**
     * This config validates the response structure for requests made by the Crud Manager.
     * When `true`, the Crud Manager checks every parsed response structure for errors
     * and if the response format is invalid, a warning is logged to the browser console.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/crud/mixin/AbstractCrudManagerValidation#config-validateResponse)
     */
    validateResponse: boolean
}

export class AbstractCrudManagerValidationClass {
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<AbstractCrudManagerValidationClassConfig>} config
     */
    constructor(config?: Partial<AbstractCrudManagerValidationClassConfig>);
}

export const AbstractCrudManagerValidation : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & AbstractCrudManagerValidationClass>

/**
 * Type with configuration options for [CrudManagerView](https://bryntum.com/products/grid/docs/api/Scheduler/crud/mixin/CrudManagerView) class.
 */
type CrudManagerViewClassConfig = {
    /**
     * A [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) config object, or a message to be shown when a store is performing a remote
     * operation, or Crud Manager is loading data from the sever. Set to `null` to disable default load mask.
     */
    loadMask: string|Partial<MaskConfig>|null
    /**
     * A [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) config object to adjust the [maskDefaults](#Core/widget/Widget#config-maskDefaults)
     * when data is loading. The message and optional configuration from the
     * [loadMask](https://bryntum.com/products/taskboard/docs/api/Core/mixin/LoadMaskable#config-loadMask) config take priority over these options, just as they do
     * for `maskDefaults`, respectively.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/crud/mixin/CrudManagerView#config-loadMaskDefaults)
     */
    loadMaskDefaults: Partial<MaskConfig>
    /**
     * A [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) config object to adjust the [maskDefaults](#Core/widget/Widget#config-maskDefaults)
     * when an error occurs loading data.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/crud/mixin/CrudManagerView#config-loadMaskError)
     */
    loadMaskError: Partial<MaskConfig>|Mask|boolean
    /**
     * A [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) config object, or a message to be shown when Crud Manager
     * is persisting changes on the server. Set to `null` to disable default sync mask.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/crud/mixin/CrudManagerView#config-syncMask)
     */
    syncMask: string|Partial<MaskConfig>|null
}

export class CrudManagerViewClass extends LoadMaskableClass {
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<CrudManagerViewClassConfig>} config
     */
    constructor(config?: Partial<CrudManagerViewClassConfig>);
}

export const CrudManagerView : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & CrudManagerViewClass>

/**
 * Type with configuration options for [AjaxTransport](https://bryntum.com/products/grid/docs/api/Scheduler/crud/transport/AjaxTransport) class.
 */
type AjaxTransportClassConfig = {
    /**
     * Configuration of the AJAX requests used by *Crud Manager* to communicate with a server-side.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/crud/transport/AjaxTransport#config-transport)
     */
    transport: {
        load?: object
        sync?: object
    }
    /**
     * Fires before a request is sent to the server.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/crud/transport/AjaxTransport#event-beforeSend)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.crudManager The CRUD manager.
     * @param {object} event.params HTTP request params to be passed in the request URL.
     * @param {'sync'|'load'} event.requestType CrudManager request type (`load`/`sync`)
     * @param {object} event.requestConfig Configuration object for Ajax request call
     */
    onBeforeSend: ((event: { crudManager: AbstractCrudManager, params: object, requestType: 'sync'|'load', requestConfig: object }) => Promise<void>)|string
}

export abstract class AjaxTransportClass {
    /**
     * Fires before a request is sent to the server.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/crud/transport/AjaxTransport#event-beforeSend)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.crudManager The CRUD manager.
     * @param {object} event.params HTTP request params to be passed in the request URL.
     * @param {'sync'|'load'} event.requestType CrudManager request type (`load`/`sync`)
     * @param {object} event.requestConfig Configuration object for Ajax request call
     */
    onBeforeSend: ((event: { crudManager: AbstractCrudManager, params: object, requestType: 'sync'|'load', requestConfig: object }) => Promise<void>)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<AjaxTransportClassConfig>} config
     */
    constructor(config?: Partial<AjaxTransportClassConfig>);
    /**
     * Cancels a sent request.
     * @param {Promise<any>} requestPromise The Promise object wrapping the Request to be cancelled. The *requestPromise* is the value returned from the corresponding [sendRequest](https://bryntum.com/products/scheduler/docs#Scheduler/crud/transport/AjaxTransport#function-sendRequest) call.
     */
    cancelRequest(requestPromise: Promise<any>): void;
    /**
     * Sends a *Crud Manager* request to the server.
     * @param {object} request The request configuration object having following properties:
     */
    sendRequest(request: {
        type: 'load'|'sync'
        url: string
        data: string
        params: object
        success: Function
        failure: Function
        thisObj: object
    }): Promise<any>;
}

export const AjaxTransport : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & AjaxTransportClass>

/**
 * Type with configuration options for [AssignmentStore](https://bryntum.com/products/grid/docs/api/Scheduler/data/AssignmentStore) class.
 */
type AssignmentStoreConfig = {
    /**
     * Specify `false` to prevent loading records without ids, a good practise to enforce when syncing with a
     * backend.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/AssignmentStore#config-allowNoId)
     */
    allowNoId: boolean
    /**
     * Specifies target to filter and sort after applying changeset:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/AssignmentStore#config-applyChangesetFilterSortTarget)
     */
    applyChangesetFilterSortTarget: 'changes'|'none'
    /**
     * Commit changes automatically
     */
    autoCommit: boolean
    /**
     * True to initiate a load when the store is instantiated
     */
    autoLoad: boolean
    /**
     * Automatically detect from set data if used as tree store or flat store
     */
    autoTree: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/AssignmentStore#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/AssignmentStore#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Array of field names that should trigger filtering of chained store when the fields are updated.
     */
    chainedFields: string[]
    /**
     * Function used to filter records in the masterStore into a chained store. If not provided,
     * all records from the masterStore will be included in the chained store.
     * Return `true` to include the passed record, or a `false` to exclude it.
     * @param {Model} record
     * @returns {boolean}
     */
    chainedFilterFn: (record: Model) => boolean
    /**
     * Url to post newly created records to.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/AssignmentStore#config-createUrl)
     */
    createUrl: string
    /**
     * Raw data to load initially.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/AssignmentStore#config-data)
     */
    data: object[]|Model[]
    /**
     * Url for deleting records.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/AssignmentStore#config-deleteUrl)
     */
    deleteUrl: string
    /**
     * Method names calls to which should be relayed to master store.
     */
    doRelayToMaster: string[]
    /**
     * Method names calls to which shouldn't be relayed to master store.
     */
    dontRelayToMaster: string
    /**
     * If true, collapsed records in original tree will be excluded from the chained store.
     */
    excludeCollapsedRecords: boolean
    /**
     * An object containing the Fetch options to pass to each server request issued by this store. Use this to
     * control if credentials are sent and other options, read more at
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_request_options).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/AssignmentStore#config-fetchOptions)
     */
    fetchOptions: object
    /**
     * An array of field definitions used to create a [Model](https://bryntum.com/products/taskboard/docs/api/Core/data/Model) (modelClass) subclass. Optional.
     * If the Model already has fields defined, these fields will extend those.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/AssignmentStore#config-fields)
     */
    fields: (string|Partial<ModelFieldConfig>|DataField)[]
    /**
     * The name of the HTTP parameter to use to pass any encoded filters when loading data from the server and a
     * filtered response is required.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/AssignmentStore#config-filterParamName)
     */
    filterParamName: string
    /**
     * Specify one or more [CollectionFilter](https://bryntum.com/products/taskboard/docs/api/Core/util/CollectionFilter) config objects to apply initially.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/AssignmentStore#config-filters)
     */
    filters: Partial<CollectionFilterConfig>|Partial<CollectionFilterConfig>[]
    /**
     * This flag prevents firing of 'remove' event when moving a node in the tree. In 6.0 this will be the default
     * behavior and this flag will be removed.
     */
    fireRemoveEventForMoveAction: boolean
    /**
     * Initial groupers, specify to have store grouped automatically after initially setting data
     */
    groupers: Grouper[]
    /**
     * A string keyed object containing the HTTP headers to add to each server request issued by this store.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/AssignmentStore#config-headers)
     */
    headers: Record<string, string>
    /**
     * The HTTP methods to use for CRUD requests when [useRestfulMethods](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#config-useRestfulMethods) is enabled.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/AssignmentStore#config-httpMethods)
     */
    httpMethods: HttpMethods
    /**
     * Store's unique identifier. When set the store is added to a store map accessible through
     * `Store.getStore(id)`.
     */
    id: string|number
    /**
     * Set to `false` to not record transaction during `applyChangeset` call
     */
    ignoreRemoteChangesInSTM: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/AssignmentStore#config-listeners)
     */
    listeners: object
    /**
     * Master store that a chained store gets its records from.
     */
    masterStore: Store
    /**
     * Class used to represent records in the store, should be a subclass of [Model](https://bryntum.com/products/taskboard/docs/api/Core/data/Model). Only
     * applies when supplying data to the store (load, add), any supplied record instances are kept as is.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/AssignmentStore#config-modelClass)
     */
    modelClass: typeof Model
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>one based</strong> page number
     * required.
     */
    pageParamName: string
    /**
     * When paging of data is requested by setting *either* the [pageParamName](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#config-pageParamName) *or* the
     * [pageStartParamName](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#config-pageStartParamName), this is the value to send in the [pageSizeParamName](#Core/data/AjaxStore#config-pageSizeParamName).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/AssignmentStore#config-pageSize)
     */
    pageSize: number
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageSizeParamName: string
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageStartParamName: string
    /**
     * An object containing key/value pairs that are passed on the request query string.
     */
    params: object
    /**
     * The name of the HTTP parameter passed to this Store's [readUrl](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#config-readUrl) to indicate the node `id`
     * to load when loading child nodes on demand if the node being expanded was created with data containing
     * `children: true`.
     */
    parentIdParamName: string
    /**
     * Url to read data from.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/AssignmentStore#config-readUrl)
     */
    readUrl: string
    /**
     * Specify true to reapply filters when a record is added to the store.
     */
    reapplyFilterOnAdd: boolean
    /**
     * Specify true to reapply filters when a record is updated in the store.
     */
    reapplyFilterOnUpdate: boolean
    /**
     * Specify true to sort this store after records are added.
     */
    reapplySortersOnAdd: boolean
    /**
     * The property name in JSON responses from the server that contains the data for the records
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/AssignmentStore#config-responseDataProperty)
     */
    responseDataProperty: string
    /**
     * The optional property name in JSON responses from the server that contains a boolean
     * success/fail status.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/AssignmentStore#config-responseSuccessProperty)
     */
    responseSuccessProperty: string
    /**
     * The property name in JSON responses from the server that contains the dataset total size
     * <strong>when this store [is paged](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#property-isPaged)</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/AssignmentStore#config-responseTotalProperty)
     */
    responseTotalProperty: string
    /**
     * Set this flag to true if you are filtering remote using restful URLs (e.g.
     * https://nominatim.openstreetmap.org/search/paris?format=json)
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/AssignmentStore#config-restfulFilter)
     */
    restfulFilter: boolean
    /**
     * Specify `true` to send payloads as form data, `false` to send as regular JSON.
     */
    sendAsFormData: boolean
    /**
     * The name of the HTTP parameter to use to pass any encoded sorters when loading data from the server and a
     * sorted response is required.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/AssignmentStore#config-sortParamName)
     */
    sortParamName: string
    /**
     * Initial sorters, format is:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/AssignmentStore#config-sorters)
     */
    sorters: Sorter[]|string[]
    /**
     * To have all groups <strong>initially loaded</strong> start collapsed, configure this as `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/AssignmentStore#config-startGroupsCollapsed)
     */
    startGroupsCollapsed: boolean
    /**
     * Reference to STM manager
     */
    stm: StateTrackingManager
    /**
     * A [Collection](https://bryntum.com/products/taskboard/docs/api/Core/util/Collection), or Collection config object
     * to use to contain this Store's constituent records.
     */
    storage: Collection|Partial<CollectionConfig>
    /**
     * Store class to use when creating the store when it is a part of a
     * [CrudManager](https://bryntum.com/products/scheduler/docs/api/Scheduler/data/CrudManager).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/AssignmentStore#config-storeClass)
     */
    storeClass: typeof Store
    /**
     * Configure with `true` to sync loaded data instead of replacing existing with a new dataset.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/AssignmentStore#config-syncDataOnLoad)
     */
    syncDataOnLoad: boolean|SyncDataOnLoadOptions
    /**
     * Set to `true` to on load transform a flat dataset with raw objects containing `parentId` into the format
     * expected for tree data.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/AssignmentStore#config-transformFlatData)
     */
    transformFlatData: boolean
    /**
     * `true` to act as a tree store.
     */
    tree: boolean
    /**
     * Url to post record modifications to.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/AssignmentStore#config-updateUrl)
     */
    updateUrl: string
    /**
     * Use `localeCompare()` when sorting, which lets the browser sort in a locale specific order. Set to `true`,
     * a locale string or a locale config to enable.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/AssignmentStore#config-useLocaleSort)
     */
    useLocaleSort: boolean|string|object
    /**
     * Retools the loaded data objects instead of making shallow copies of them. This increases performance but
     * pollutes the incoming data and does not allow remapping of fields (dataSource).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/AssignmentStore#config-useRawData)
     * @param {boolean} disableDuplicateIdCheck Data must not contain duplicate ids, check is bypassed.
     * @param {boolean} disableDefaultValue Default values will not be applied to record fields.
     * @param {boolean} disableTypeConversion No type conversions will be performed on record data.
     */
    useRawData: boolean|object
    /**
     * Set to ´true´ to use restful [httpMethods](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#config-httpMethods)
     */
    useRestfulMethods: boolean
    /**
     * Verify that loaded data does not contain any generated ids. If it does, a warning is logged on console.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/AssignmentStore#config-verifyNoGeneratedIds)
     */
    verifyNoGeneratedIds: boolean
    /**
     * Specify `true` to send all model fields when committing modified records (as opposed to just the
     * modified fields)
     */
    writeAllFields: boolean
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Added records. In case of tree store, if branch is added, only branch root is returned
     * @param {Model[]} event.allRecords Flat list of all added records. In case of tree store, if branch is added, all new records are returned, not only branch root
     * @param {Model} event.parent If due to an [appendChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-appendChild) call, this is the parent node added to.
     * @param {number} event.index Insertion point in the store's [Collection](https://bryntum.com/products/taskboard/docs/api/Core/data/Store#config-storage).
     * @param {number} event.oldIndex Not used for tree stores. The index of the first record moved.
     * @param {boolean} event.isChild Flag which is set to true if the records are added to a parent record
     * @param {boolean} event.isExpand Flag which is set to true if records are added to the store by expanding parent
     * @param {object} event.isMove An object keyed by the ids of the records which were moved from another position in the store, or from another parent node in the store. The ids of moved records will be property names with a value `true`.
     */
    onAdd: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, oldIndex?: number, isChild?: boolean, isExpand?: boolean, isMove?: object }) => void)|string
    /**
     * Fired when a temporary record with the [isCreating](https://bryntum.com/products/taskboard/docs/api/Core/data/Model#property-isCreating) property set
     * has been confirmed as a part of this store by having its [isCreating](https://bryntum.com/products/taskboard/docs/api/Core/data/Model#property-isCreating)
     * property cleared.
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {Model} event.record The record confirmed as added.
     */
    onAddConfirmed: ((event: { source: Store, record: Model }) => void)|string
    /**
     * Fired after any remote request has finished whether successfully or unsuccessfully.
     * @param {object} event Event object
     * @param {boolean} event.exception `true`. *Only present if the request triggered an exception.*
     * @param {'create'|'read'|'update'|'delete'} event.action Action that has finished, `'create'`, `'read'`, `'update'` or `'delete'`
     * @param {'network'|'failure'} event.exceptionType The type of failure, `'network'` or `'server'`. <em>Only present if the request triggered an exception.</em>
     * @param {Response} event.response The `Response` object
     * @param {object} event.json The decoded response object if there was no `'network'` exception.
     */
    onAfterRequest: ((event: { exception: boolean, action: 'create'|'read'|'update'|'delete', exceptionType: 'network'|'failure', response: Response, json: object }) => void)|string
    /**
     * Fired before records are added to this store by the [add](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/StoreCRUD#function-add) or [insert](#Core/data/mixin/StoreCRUD#function-insert). In a tree
     * store, also fired by [appendChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-appendChild) and
     * [insertChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-insertChild). The add or insert may be vetoed by returning `false`
     * from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be added
     * @param {Model} event.parent The parent node when using a tree store
     */
    onBeforeAdd: ((event: { source: Store, records: Model[], parent: Model }) => boolean|void)|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onBeforeCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     * @param {object} event Event object
     * @param {Store|any} event.source The
     * @param {(Model|any)[]} event.records The nodes to indent.
     */
    onBeforeIndent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before loading starts. Allows altering parameters and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoad: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * Fired before loading of remote child nodes of a tree node starts. Allows altering parameters and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoadChildren: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * When the store [is paged](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#property-isPaged), this is fired before loading a page and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoadPage: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     * @param {object} event Event object
     * @param {Store|any} event.source This store
     * @param {(Model|any)[]} event.records Nodes to be outdented
     */
    onBeforeOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before records are removed from this store by the [remove](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/StoreCRUD#function-remove) or [removeAll](#Core/data/mixin/StoreCRUD#function-removeAll).
     * Also fired when removing a child record in a tree store using [removeChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-removeChild).
     * The remove may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be removed.
     * @param {Model} event.parent The record from which children are being removed when using a tree store. Only provided when removing a single node.
     * @param {boolean} event.isMove This flag is `true` if the child node is being removed by [appendChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-appendChild) to be moved *within the same tree*.
     * @param {boolean} event.removingAll This flag is `true` if the operation is removing the store's entire data set.
     */
    onBeforeRemove: ((event: { source: Store, records: Model[], parent: Model, isMove: boolean, removingAll: boolean }) => boolean|void)|string
    /**
     * Fired before any remote request is initiated.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing key/value pairs that are passed on the request query string
     * @param {object} event.body The body of the request to be posted to the server.
     * @param {'create'|'read'|'update'|'delete'} event.action Action that is making the request, `'create'`, `'read'`, `'update'` or `'delete'`
     */
    onBeforeRequest: ((event: { source: Store, params: object, body: object, action: 'create'|'read'|'update'|'delete' }) => void)|string
    /**
     * Fired before sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Records to sort
     */
    onBeforeSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fired before record is modified in this store.
     * Modification may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {object} event.changes Modification data
     */
    onBeforeUpdate: ((event: { source: Store, record: Model, changes: object }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/AssignmentStore#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Data in the store was changed. This is a catch-all event which is fired for all changes
     * which take place to the store's data.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/AssignmentStore#event-change)
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} event.action Name of action which triggered the change. May be one of the options listed above
     * @param {Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onChange: ((event: { source: Store, action: 'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Fired after committing changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fired after committing added records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitAdded: ((event: { source: Store }) => void)|string
    /**
     * Fired after committing modified records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitModified: ((event: { source: Store }) => void)|string
    /**
     * Fired after committing removed records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitRemoved: ((event: { source: Store }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when a remote request fails, either at the network level, or the server returns a failure, or an invalid
     * response.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/AssignmentStore#event-exception)
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {boolean} event.exception `true`
     * @param {'create'|'read'|'update'|'delete'|'commit'} event.action Action that failed, `'create'`, `'read'`, `'update'` or `'delete'`. May also be fired with '`commit'` to indicate the failure of an aggregated `create`, `update` and `delete` operation. In this case, the event will contain a property for each operation of the commit named `'create'`, `'update'` and `'delete'`, each containing the individual `exception` events.
     * @param {'network'|'failure'} event.exceptionType The type of failure, `'network'` or `'server'`
     * @param {Response} event.response the `Response` object
     * @param {object} event.json The decoded response object *if the exceptionType is `'server'`*
     */
    onException: ((event: { source: Store, exception: boolean, action: 'create'|'read'|'update'|'delete'|'commit', exceptionType: 'network'|'failure', response: Response, json: object }) => void)|string
    /**
     * Fired after applying filters to the store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Collection} event.filters Filters used by this Store
     * @param {Model[]} event.removed The records which were filtered out by the action.
     * @param {Model[]} event.added The records which were filtered back in by the action.
     * @param {Model[]} event.records Filtered records
     */
    onFilter: ((event: { source: Store, filters: Collection, removed: Model[], added: Model[], records: Model[] }) => void)|string
    /**
     * Fired when grouping changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Grouper[]} event.groupers Applied groupers
     * @param {Model[]} event.records Grouped records
     */
    onGroup: ((event: { source: Store, groupers: Grouper[], records: Model[] }) => void)|string
    /**
     * Fired when the id of a record has changed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {string|number} event.oldValue Old id
     * @param {string|number} event.value New id
     */
    onIdChange: ((event: { source: Store, record: Model, oldValue: string|number, value: string|number }) => void)|string
    /**
     * Fired after tasks in the tree are indented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were indented
     */
    onIndent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired on successful load
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object[]} event.data Data loaded
     * @param {Response} event.response the `Response` object
     * @param {object} event.json The decoded response object.
     */
    onLoad: ((event: { source: Store, data: object[], response: Response, json: object }) => void)|string
    /**
     * Fired on successful load of remote child nodes for a tree node.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object[]} event.data Data loaded
     * @param {object} event.json The decoded response object.
     */
    onLoadChildren: ((event: { source: Store, data: object[], json: object }) => void)|string
    /**
     * Fired when loading of remote child nodes into a tree node is beginning. This is not cancelable. Parameters in the
     * event may still be mutated at this stage.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadChildrenStart: ((event: { source: Store, params: object }) => void)|string
    /**
     * Fired when loading is beginning. This is not cancelable. Parameters in the event may still be
     * mutated at this stage.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadStart: ((event: { source: Store, params: object }) => void)|string
    /**
     * Fired when a block of records has been moved within this Store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record (DEPRECATED) The first record moved (The [move](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/StoreCRUD#function-move) API now accepts an array of records to move).
     * @param {Model[]} event.records The records moved.
     * @param {number} event.from The index from which the record was removed (applicable only for flat store).
     * @param {number} event.to The index at which the record was inserted (applicable only for flat store).
     * @param {Model} event.newParent The new parent record for the dragged records (applicable only for tree stores)
     * @param {Model[]} event.oldParents The old parent records for the dragged records (applicable only for move operations in tree stores)
     */
    onMove: ((event: { source: Store, record: Model, records: Model[], from: number, to: number, newParent?: Model, oldParents?: Model[] }) => void)|string
    /**
     * Fired after tasks in the tree are outdented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were outdented
     */
    onOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Data in the store has completely changed, such as by a filter, or sort or load operation.
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {boolean} event.batch Flag set to `true` when the refresh is triggered by ending a batch
     * @param {'dataset'|'sort'|'clearchanges'|'filter'|'create'|'update'|'delete'|'group'} event.action Name of action which triggered the change. May be one of the options listed above.
     */
    onRefresh: ((event: { source: Store, batch: boolean, action: 'dataset'|'sort'|'clearchanges'|'filter'|'create'|'update'|'delete'|'group' }) => void)|string
    /**
     * Fired when one or more records are removed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Array of removed records. In case of tree store, if branch is removed, only branch root is returned
     * @param {Model[]} event.allRecords Flat array of all removed records. In case of tree store, if branch is removed, all removed records are returned, not only branch root
     * @param {Model} event.parent If due to a [removeChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-removeChild) call, this is the parent node removed from. Only applicable when removing a single tree node.
     * @param {number} event.index Visible index at which record was removed. In case the record was removed from a collapsed branch, -1 is returned. For tree store, this is only provided when removing a single node.
     * @param {boolean} event.isChild Flag which is set to true if the record was removed from a parent record
     * @param {boolean} event.isCollapse Flag which is set to true if records were removed from the store by collapsing parent
     * @param {boolean} event.isMove Passed as `true` if the remove was part of a move operation within this Store.
     */
    onRemove: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, isChild?: boolean, isCollapse?: boolean, isMove?: boolean }) => void)|string
    /**
     * Fired after removing all records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onRemoveAll: ((event: { source: Store }) => void)|string
    /**
     * Fired when the root node is set
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.oldRoot The old root node.
     * @param {Model} event.rootNode The new root node.
     */
    onRootChange: ((event: { source: Store, oldRoot: Model, rootNode: Model }) => void)|string
    /**
     * Fired after sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Sorted records
     */
    onSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fired when a record is modified
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {object} event.changes Modification data
     */
    onUpdate: ((event: { source: Store, record: Model, changes: object }) => void)|string
}

/**
 * A store representing a collection of assignments between events in the [EventStore](https://bryntum.com/products/scheduler/docs#Scheduler/data/EventStore) and resources
 * in the [ResourceStore](https://bryntum.com/products/scheduler/docs#Scheduler/data/ResourceStore).
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/AssignmentStore)
 */
export class AssignmentStore extends AjaxStore {
    /**
     * Returns the assignment store of the project this entity belongs to.
     */
    readonly assignmentStore: AssignmentStore
    /**
     * Applies a new dataset to the AssignmentStore. Use it to plug externally fetched data into the store.
     */
    data: Partial<AssignmentModelConfig>[]
    /**
     * Returns the dependency store of the project this entity belongs to.
     */
    readonly dependencyStore: DependencyStore
    /**
     * Returns the event store of the project this entity belongs to.
     */
    readonly eventStore: EventStore
    /**
     * Returns the project this entity belongs to.
     */
    readonly project: SchedulerProjectModel
    /**
     * Returns the resource store of the project this entity belongs to.
     */
    readonly resourceStore: ResourceStore
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Added records. In case of tree store, if branch is added, only branch root is returned
     * @param {Model[]} event.allRecords Flat list of all added records. In case of tree store, if branch is added, all new records are returned, not only branch root
     * @param {Model} event.parent If due to an [appendChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-appendChild) call, this is the parent node added to.
     * @param {number} event.index Insertion point in the store's [Collection](https://bryntum.com/products/taskboard/docs/api/Core/data/Store#config-storage).
     * @param {number} event.oldIndex Not used for tree stores. The index of the first record moved.
     * @param {boolean} event.isChild Flag which is set to true if the records are added to a parent record
     * @param {boolean} event.isExpand Flag which is set to true if records are added to the store by expanding parent
     * @param {object} event.isMove An object keyed by the ids of the records which were moved from another position in the store, or from another parent node in the store. The ids of moved records will be property names with a value `true`.
     */
    onAdd: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, oldIndex?: number, isChild?: boolean, isExpand?: boolean, isMove?: object }) => void)|string
    /**
     * Fired before records are added to this store by the [add](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/StoreCRUD#function-add) or [insert](#Core/data/mixin/StoreCRUD#function-insert). In a tree
     * store, also fired by [appendChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-appendChild) and
     * [insertChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-insertChild). The add or insert may be vetoed by returning `false`
     * from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be added
     * @param {Model} event.parent The parent node when using a tree store
     */
    onBeforeAdd: ((event: { source: Store, records: Model[], parent: Model }) => boolean|void)|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onBeforeCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     * @param {object} event Event object
     * @param {Store|any} event.source The
     * @param {(Model|any)[]} event.records The nodes to indent.
     */
    onBeforeIndent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     * @param {object} event Event object
     * @param {Store|any} event.source This store
     * @param {(Model|any)[]} event.records Nodes to be outdented
     */
    onBeforeOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before records are removed from this store by the [remove](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/StoreCRUD#function-remove) or [removeAll](#Core/data/mixin/StoreCRUD#function-removeAll).
     * Also fired when removing a child record in a tree store using [removeChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-removeChild).
     * The remove may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be removed.
     * @param {Model} event.parent The record from which children are being removed when using a tree store. Only provided when removing a single node.
     * @param {boolean} event.isMove This flag is `true` if the child node is being removed by [appendChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-appendChild) to be moved *within the same tree*.
     * @param {boolean} event.removingAll This flag is `true` if the operation is removing the store's entire data set.
     */
    onBeforeRemove: ((event: { source: Store, records: Model[], parent: Model, isMove: boolean, removingAll: boolean }) => boolean|void)|string
    /**
     * Fired before sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Records to sort
     */
    onBeforeSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/AssignmentStore#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired after committing changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired after applying filters to the store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Collection} event.filters Filters used by this Store
     * @param {Model[]} event.removed The records which were filtered out by the action.
     * @param {Model[]} event.added The records which were filtered back in by the action.
     * @param {Model[]} event.records Filtered records
     */
    onFilter: ((event: { source: Store, filters: Collection, removed: Model[], added: Model[], records: Model[] }) => void)|string
    /**
     * Fired when grouping changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Grouper[]} event.groupers Applied groupers
     * @param {Model[]} event.records Grouped records
     */
    onGroup: ((event: { source: Store, groupers: Grouper[], records: Model[] }) => void)|string
    /**
     * Fired after tasks in the tree are indented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were indented
     */
    onIndent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired after tasks in the tree are outdented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were outdented
     */
    onOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired when one or more records are removed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Array of removed records. In case of tree store, if branch is removed, only branch root is returned
     * @param {Model[]} event.allRecords Flat array of all removed records. In case of tree store, if branch is removed, all removed records are returned, not only branch root
     * @param {Model} event.parent If due to a [removeChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-removeChild) call, this is the parent node removed from. Only applicable when removing a single tree node.
     * @param {number} event.index Visible index at which record was removed. In case the record was removed from a collapsed branch, -1 is returned. For tree store, this is only provided when removing a single node.
     * @param {boolean} event.isChild Flag which is set to true if the record was removed from a parent record
     * @param {boolean} event.isCollapse Flag which is set to true if records were removed from the store by collapsing parent
     * @param {boolean} event.isMove Passed as `true` if the remove was part of a move operation within this Store.
     */
    onRemove: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, isChild?: boolean, isCollapse?: boolean, isMove?: boolean }) => void)|string
    /**
     * Fired after removing all records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onRemoveAll: ((event: { source: Store }) => void)|string
    /**
     * Fired after sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Sorted records
     */
    onSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<AssignmentStoreConfig>} config
     */
    constructor(config?: Partial<AssignmentStoreConfig>);
    /**
     * Add assignments to the store.
     * @param {AssignmentModel|AssignmentModel[]|Partial<AssignmentModelConfig>|Partial<AssignmentModelConfig>[]} records Array of records/data or a single record/data to add to store
     * @param {boolean} silent Specify `true` to suppress events
     */
    add(records: AssignmentModel|AssignmentModel[]|Partial<AssignmentModelConfig>|Partial<AssignmentModelConfig>[], silent?: boolean): AssignmentModel[];
    /**
     * Add assignments to the store and triggers calculations directly after. Await this function to have up to date
     * references on the added assignments.
     * @param {AssignmentModel|AssignmentModel[]|Partial<AssignmentModelConfig>|Partial<AssignmentModelConfig>[]} records Array of records/data or a single record/data to add to store
     * @param {boolean} silent Specify `true` to suppress events
     */
    addAsync(records: AssignmentModel|AssignmentModel[]|Partial<AssignmentModelConfig>|Partial<AssignmentModelConfig>[], silent?: boolean): Promise<AssignmentModel[]>;
    /**
     * Creates and adds assignment record(s) for a given event and resource(s).
     * @param {TimeSpan} event
     * @param {ResourceModel|ResourceModel[]} resources The resource(s) to assign to the event
     * @param {Function} assignmentSetupFn A hook function which takes an assignment as its argument and must return an assignment.
     * @param {boolean} removeExistingAssignments `true` to remove assignments for other resources
     */
    assignEventToResource(event: TimeSpan, resources: ResourceModel|ResourceModel[], assignmentSetupFn?: Function, removeExistingAssignments?: boolean): AssignmentModel[];
    /**
     * Returns an assignment record for a given event and resource
     * @param {EventModel|string|number} event The event or its id
     * @param {ResourceModel|string|number} resource The resource or its id
     */
    getAssignmentForEventAndResource(event: EventModel|string|number, resource: ResourceModel|string|number): AssignmentModel;
    /**
     * Returns all assignments for a given event.
     * @param {TimeSpan} event
     */
    getAssignmentsForEvent(event: TimeSpan): AssignmentModel[];
    /**
     * Returns all assignments for a given resource.
     * @param {ResourceModel} resource
     */
    getAssignmentsForResource(resource: ResourceModel): AssignmentModel[];
    /**
     * Returns all events assigned to a resource
     * @param {ResourceModel|string|number} resource
     */
    getEventsForResource(resource: ResourceModel|string|number): TimeSpan[];
    /**
     * Returns all resources assigned to an event.
     * @param {EventModel} event
     */
    getResourcesForEvent(event: EventModel): ResourceModel[];
    /**
     * Checks whether an event is assigned to a resource.
     * @param {EventModel|string|number} event Event record or id
     * @param {ResourceModel|string|number} resource Resource record or id
     */
    isEventAssignedToResource(event: EventModel|string|number, resource: ResourceModel|string|number): boolean;
    /**
     * Applies a new dataset to the AssignmentStore and triggers calculations directly after. Use it to plug externally
     * fetched data into the store.
     * @param {Partial<AssignmentModelConfig>[]} data Array of AssignmentModel data objects
     */
    loadDataAsync(data: Partial<AssignmentModelConfig>[]): Promise<void>;
    /**
     * Maps over event assignments.
     * @param {EventModel} event
     * @param {Function} fn
     * @param {Function} filterFn
     */
    mapAssignmentsForEvent(event: EventModel, fn?: Function, filterFn?: Function): EventModel[]|any[];
    /**
     * Maps over resource assignments.
     * @param {ResourceModel|number|string} resource
     * @param {Function} fn
     * @param {Function} filterFn
     */
    mapAssignmentsForResource(resource: ResourceModel|number|string, fn?: Function, filterFn?: Function): ResourceModel[]|any[];
    /**
     * Removes all assignments for given event
     * @param {TimeSpan} event
     */
    removeAssignmentsForEvent(event: TimeSpan): void;
    /**
     * Removes all assignments for given resource
     * @param {ResourceModel|any} resource
     */
    removeAssignmentsForResource(resource: ResourceModel|any): void;
    /**
     * Removes assignment record for a given event and resource.
     * @param {TimeSpan|string|number} event
     * @param {ResourceModel|string|number} resources The resource to unassign the event from. If omitted, all resources of the events will be unassigned
     */
    unassignEventFromResource(event: TimeSpan|string|number, resources?: ResourceModel|string|number): AssignmentModel|AssignmentModel[];
}

/**
 * Type with configuration options for [CrudManager](https://bryntum.com/products/grid/docs/api/Scheduler/data/CrudManager) class.
 */
type CrudManagerConfig = {
    /**
     * A store with assignments (or a config object).
     */
    assignmentStore: AssignmentStore|Partial<AssignmentStoreConfig>
    /**
     * Specify `true` to automatically call [load](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) method on the next frame after creation.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/CrudManager#config-autoLoad)
     */
    autoLoad: boolean
    /**
     * `true` to automatically persist store changes after edits are made in any of the stores monitored.
     * Please note that sync request will not be invoked immediately but only after
     * [autoSyncTimeout](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#config-autoSyncTimeout) interval.
     */
    autoSync: boolean
    /**
     * The timeout in milliseconds to wait before persisting changes to the server.
     * Used when [autoSync](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#config-autoSync) is set to `true`.
     */
    autoSyncTimeout: number
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/CrudManager#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/CrudManager#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Sets the list of stores controlled by the CRUD manager.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/CrudManager#config-crudStores)
     */
    crudStores: Store[]|string[]|CrudManagerStoreDescriptor[]
    /**
     * A store with dependencies(or a config object).
     */
    dependencyStore: DependencyStore|Partial<DependencyStoreConfig>
    /**
     * Configuration of the JSON encoder used by the *Crud Manager*.
     */
    encoder: {
        requestData?: object
    }
    /**
     * A store with events (or a config object).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/CrudManager#config-eventStore)
     */
    eventStore: EventStore|Partial<EventStoreConfig>
    /**
     * Specify as `true` to force sync requests to be sent when calling `sync()`, even if there are no local
     * changes. Useful in a polling scenario, to keep client up to date with the backend.
     */
    forceSync: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/CrudManager#config-listeners)
     */
    listeners: object
    /**
     * Convenience shortcut to set only the url to load from, when you do not need to supply any other config
     * options in the `load` section of the `transport` config.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/CrudManager#config-loadUrl)
     */
    loadUrl: string
    /**
     * Field name to be used to transfer a phantom record identifier.
     */
    phantomIdField: string
    /**
     * Field name to be used to transfer a phantom parent record identifier.
     */
    phantomParentIdField: string
    /**
     * A project that holds and links stores
     */
    project: SchedulerProjectModel
    /**
     * `True` to reset identifiers (defined by `idField` config) of phantom records before submitting them
     * to the server.
     */
    resetIdsBeforeSync: boolean
    /**
     * A store with resources (or a config object).
     */
    resourceStore: ResourceStore|Partial<ResourceStoreConfig>
    /**
     * When `true` treats parsed responses without `success` property as successful.
     * In this mode a parsed response is treated as invalid if it has explicitly set `success : false`.
     */
    skipSuccessProperty: boolean
    /**
     * Name of a store property to retrieve store identifiers from. Make sure you have an instance of a
     * store to use it by id. Store identifier is used as a container name holding corresponding store data
     * while transferring them to/from the server. By default, `storeId` property is used. And in case a
     * container identifier has to differ this config can be used:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/CrudManager#config-storeIdProperty)
     */
    storeIdProperty: string
    /**
     * Sets the list of stores controlled by the CRUD manager.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/CrudManager#config-stores)
     */
    stores: Store[]|string[]|CrudManagerStoreDescriptor[]
    /**
     * When `true` the Crud Manager does not require all updated and removed records to be mentioned in the
     * *sync* response. In this case response should include only server side changes.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/CrudManager#config-supportShortSyncResponse)
     */
    supportShortSyncResponse: boolean
    /**
     * An array of store identifiers sets an alternative sync responses apply order.
     * By default, the order in which sync responses are applied to the stores is the same as they
     * registered in. But in case of some tricky dependencies between stores this order can be changed:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/CrudManager#config-syncApplySequence)
     */
    syncApplySequence: string[]
    /**
     * Convenience shortcut to set only the url to sync to, when you do not need to supply any other config
     * options in the `sync` section of the `transport` config.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/CrudManager#config-syncUrl)
     */
    syncUrl: string
    /**
     * When `true` forces the CRUD manager to process responses depending on their `type` attribute.
     * So `load` request may be responded with `sync` response for example.
     * Can be used for smart server logic allowing the server to decide when it's better to respond with a
     * complete data set (`load` response) or it's enough to return just a delta (`sync` response).
     */
    trackResponseType: boolean
    /**
     * Configuration of the AJAX requests used by *Crud Manager* to communicate with a server-side.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/CrudManager#config-transport)
     */
    transport: {
        load?: object
        sync?: object
    }
    /**
     * This config validates the response structure for requests made by the Crud Manager.
     * When `true`, the Crud Manager checks every parsed response structure for errors
     * and if the response format is invalid, a warning is logged to the browser console.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/CrudManager#config-validateResponse)
     */
    validateResponse: boolean
    /**
     * `true` to write all fields from the record to the server.
     * If set to `false` it will only send the fields that were modified.
     * Note that any fields that have [persist](https://bryntum.com/products/taskboard/docs/api/Core/data/field/DataField#config-persist) set to `false` will
     * still be ignored and fields having [alwaysWrite](https://bryntum.com/products/taskboard/docs/api/Core/data/field/DataField#config-alwaysWrite) set to `true`
     * will always be included.
     */
    writeAllFields: boolean
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires before [load request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) is sent. Return `false` to cancel load request.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onBeforeLoad: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires before loaded data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.options Options provided to the [load](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) method.
     */
    onBeforeLoadApply: ((event: { source: AbstractCrudManager, response: object, options: object }) => void)|string
    /**
     * Fires before server response gets applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     */
    onBeforeResponseApply: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object }) => void)|string
    /**
     * Fires before a request is sent to the server.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/CrudManager#event-beforeSend)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.crudManager The CRUD manager.
     * @param {object} event.params HTTP request params to be passed in the request URL.
     * @param {'sync'|'load'} event.requestType CrudManager request type (`load`/`sync`)
     * @param {object} event.requestConfig Configuration object for Ajax request call
     */
    onBeforeSend: ((event: { crudManager: AbstractCrudManager, params: object, requestType: 'sync'|'load', requestConfig: object }) => Promise<void>)|string
    /**
     * Fires before [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) is sent. Return `false` to cancel sync request.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/CrudManager#event-beforeSync)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onBeforeSync: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires before sync response data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     */
    onBeforeSyncApply: ((event: { source: AbstractCrudManager, response: object }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/CrudManager#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when data in any of the registered data stores is changed.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/CrudManager#event-hasChanges)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     */
    onHasChanges: ((event: { source: AbstractCrudManager }) => void)|string
    /**
     * Fires on successful [load request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) completion after data gets loaded to the stores.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onLoad: ((event: { source: AbstractCrudManager, response: object, responseOptions: object }) => void)|string
    /**
     * Fired after [load request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) was canceled by some [beforeLoad](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#event-beforeLoad)
     * listener or due to incomplete prior load request.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onLoadCanceled: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires when a [load request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onLoadFail: ((event: { source: AbstractCrudManager, response: object, responseText: string, responseOptions: object }) => void)|string
    /**
     * Fires when registered stores get into state when they don't have any
     * not persisted change. This happens after [load](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) or [sync](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) request
     * completion. Or this may happen after a record update which turns its fields back to their original state.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/CrudManager#event-noChanges)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     */
    onNoChanges: ((event: { source: AbstractCrudManager }) => void)|string
    /**
     * Fires on successful request completion after data gets applied to the stores.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onRequestDone: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object, responseOptions: object }) => void)|string
    /**
     * Fires when a request fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onRequestFail: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object, responseText: string, responseOptions: object }) => void)|string
    /**
     * Fires on successful [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) completion.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onSync: ((event: { source: AbstractCrudManager, response: object, responseOptions: object }) => void)|string
    /**
     * Fires after [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) was canceled by some [beforeSync](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#event-beforeSync) listener.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onSyncCanceled: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires after [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) was delayed due to incomplete previous one.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.arguments The arguments of [sync](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) call.
     */
    onSyncDelayed: ((event: { source: AbstractCrudManager, arguments: object }) => void)|string
    /**
     * Fires when a [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onSyncFail: ((event: { source: AbstractCrudManager, response: object, responseText: string, responseOptions: object }) => void)|string
}

/**
 * The Crud Manager (or "CM") is a class implementing centralized loading and saving of data in multiple stores.
 * Loading the stores and saving all changes is done using a single request. The stores managed by CRUD manager should
 * not be configured with their own CRUD URLs or use [autoLoad](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#config-autoLoad)/[autoCommit](#Core/data/AjaxStore#config-autoCommit).
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/CrudManager)
 */
export class CrudManager extends AbstractCrudManager {
    /**
     * Get/set the assignment store bound to the CRUD manager.
     */
    assignmentStore: AssignmentStore
    /**
     * Returns current changes as an object consisting of added/modified/removed arrays of records for every
     * managed store, keyed by each store's `id`. Returns `null` if no changes exist. Format:
     */
    readonly changes: object
    /**
     * The server revision stamp.
     * The *revision stamp* is a number which should be incremented after each server-side change.
     * This property reflects the current version of the data retrieved from the server and gets updated
     * after each [load](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) and [sync](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) call.
     */
    readonly crudRevision: number
    /**
     * A list of registered stores whose server communication will be collected into a single batch.
     * Each store is represented by a *store descriptor*.
     */
    crudStores: CrudManagerStoreDescriptor[]
    /**
     * Get/set the dependency store bound to the CRUD manager.
     */
    dependencyStore: DependencyStore
    /**
     * Get/set the event store bound to the CRUD manager.
     */
    eventStore: EventStore
    /**
     * Specify as `true` to force sync requests to be sent when calling `sync()`, even if there are no local
     * changes. Useful in a polling scenario, to keep client up to date with the backend.
     */
    forceSync: boolean
    /**
     * Returns `true` if changes tracking is suspended
     */
    readonly isChangeTrackingSuspended: boolean
    /**
     * Returns true if the crud manager is currently loading data
     */
    readonly isCrudManagerLoading: boolean
    /**
     * Returns true if the crud manager is currently syncing data
     */
    readonly isCrudManagerSyncing: boolean
    /**
     * Convenience shortcut to set only the url to load from, when you do not need to supply any other config
     * options in the `load` section of the `transport` config.
     */
    loadUrl: string
    /**
     * Get/set the resource store bound to the CRUD manager.
     */
    resourceStore: ResourceStore
    /**
     * Store for [resourceTimeRanges](https://bryntum.com/products/scheduler/docs#Scheduler/feature/ResourceTimeRanges) feature.
     */
    resourceTimeRangeStore: Store
    /**
     * An array of stores presenting an alternative sync responses apply order.
     * Each store is represented by a *store descriptor*.
     */
    syncApplySequence: CrudManagerStoreDescriptor[]
    /**
     * Convenience shortcut to set only the url to sync to, when you do not need to supply any other config
     * options in the `sync` section of the `transport` config.
     */
    syncUrl: string
    /**
     * Store for [timeRanges](https://bryntum.com/products/scheduler/docs#Scheduler/feature/TimeRanges) feature.
     */
    timeRangeStore: Store
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires before [load request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) is sent. Return `false` to cancel load request.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onBeforeLoad: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires before loaded data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.options Options provided to the [load](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) method.
     */
    onBeforeLoadApply: ((event: { source: AbstractCrudManager, response: object, options: object }) => void)|string
    /**
     * Fires before server response gets applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     */
    onBeforeResponseApply: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object }) => void)|string
    /**
     * Fires before a request is sent to the server.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/CrudManager#event-beforeSend)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.crudManager The CRUD manager.
     * @param {object} event.params HTTP request params to be passed in the request URL.
     * @param {'sync'|'load'} event.requestType CrudManager request type (`load`/`sync`)
     * @param {object} event.requestConfig Configuration object for Ajax request call
     */
    onBeforeSend: ((event: { crudManager: AbstractCrudManager, params: object, requestType: 'sync'|'load', requestConfig: object }) => Promise<void>)|string
    /**
     * Fires before [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) is sent. Return `false` to cancel sync request.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/CrudManager#event-beforeSync)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onBeforeSync: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires before sync response data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     */
    onBeforeSyncApply: ((event: { source: AbstractCrudManager, response: object }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/CrudManager#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when data in any of the registered data stores is changed.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/CrudManager#event-hasChanges)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     */
    onHasChanges: ((event: { source: AbstractCrudManager }) => void)|string
    /**
     * Fires on successful [load request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) completion after data gets loaded to the stores.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onLoad: ((event: { source: AbstractCrudManager, response: object, responseOptions: object }) => void)|string
    /**
     * Fired after [load request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) was canceled by some [beforeLoad](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#event-beforeLoad)
     * listener or due to incomplete prior load request.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onLoadCanceled: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires when a [load request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onLoadFail: ((event: { source: AbstractCrudManager, response: object, responseText: string, responseOptions: object }) => void)|string
    /**
     * Fires when registered stores get into state when they don't have any
     * not persisted change. This happens after [load](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) or [sync](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) request
     * completion. Or this may happen after a record update which turns its fields back to their original state.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/CrudManager#event-noChanges)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     */
    onNoChanges: ((event: { source: AbstractCrudManager }) => void)|string
    /**
     * Fires on successful request completion after data gets applied to the stores.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onRequestDone: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object, responseOptions: object }) => void)|string
    /**
     * Fires when a request fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onRequestFail: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object, responseText: string, responseOptions: object }) => void)|string
    /**
     * Fires on successful [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) completion.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onSync: ((event: { source: AbstractCrudManager, response: object, responseOptions: object }) => void)|string
    /**
     * Fires after [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) was canceled by some [beforeSync](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#event-beforeSync) listener.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onSyncCanceled: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires after [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) was delayed due to incomplete previous one.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.arguments The arguments of [sync](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) call.
     */
    onSyncDelayed: ((event: { source: AbstractCrudManager, arguments: object }) => void)|string
    /**
     * Fires when a [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onSyncFail: ((event: { source: AbstractCrudManager, response: object, responseText: string, responseOptions: object }) => void)|string
    /**
     * Base constructor, passes arguments to [construct](https://bryntum.com/products/taskboard/docs/api/Core/Base#function-construct).
     * @param {object} args Usually called with a config object, but accepts any params
     */
    constructor(...args: object[]);
    /**
     * Accepts all changes in all stores, resets the modification tracking:
     */
    acceptChanges(): void;
    /**
     * Adds a store to the collection.
     * @param {Store|string|CrudManagerStoreDescriptor|Store[]|string[]|CrudManagerStoreDescriptor[]} store A store or list of stores. Each store might be specified by its instance, `storeId` or *descriptor*.
     * @param {number} position The relative position of the store. If `fromStore` is specified the position will be taken relative to it. If not specified then store(s) will be appended to the end of collection. Otherwise, it will be just a position in stores collection. ```javascript // insert stores store4, store5 to the start of collection crudManager.addCrudStore([ store4, store5 ], 0); ```
     * @param {string|Store|CrudManagerStoreDescriptor} fromStore The store relative to which position should be calculated. Can be defined as a store identifier, instance or descriptor (the result of [getStoreDescriptor](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-getStoreDescriptor) call). ```javascript // insert store6 just before a store having storeId equal to 'foo' crudManager.addCrudStore(store6, 0, 'foo');  // insert store7 just after store3 store crudManager.addCrudStore(store7, 1, store3); ```
     */
    addCrudStore(store: Store|string|CrudManagerStoreDescriptor|Store[]|string[]|CrudManagerStoreDescriptor[], position?: number, fromStore?: string|Store|CrudManagerStoreDescriptor): void;
    /**
     * Adds an event listener. This method accepts parameters in the following format:
     * @param {BryntumListenerConfig|string} config An object containing listener definitions, or the event name to listen for
     * @param {object|Function} thisObj Default `this` reference for all listeners in the config object, or the handler function to call if providing a string as the first arg.
     * @param {object} oldThisObj The `this` reference if the old signature starting with a string event name is used..
     */
    addListener(config: BryntumListenerConfig|string, thisObj?: object|Function, oldThisObj?: object): Function;
    /**
     * Adds a store to the alternative sync responses apply sequence.
     * By default, the order in which sync responses are applied to the stores is the same as they registered in.
     * But this order can be changes either on construction step using [syncApplySequence](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#config-syncApplySequence) option
     * or by calling this method.
     * @param {Store|CrudManagerStoreDescriptor|Store[]|CrudManagerStoreDescriptor[]} store The store to add or its *descriptor* (or array of stores or descriptors).
     * @param {number} position The relative position of the store. If `fromStore` is specified the position will be taken relative to it. If not specified then store(s) will be appended to the end of collection. Otherwise, it will be just a position in stores collection. ```javascript // insert stores store4, store5 to the start of sequence crudManager.addStoreToApplySequence([ store4, store5 ], 0); ```
     * @param {string|Store|CrudManagerStoreDescriptor} fromStore The store relative to which position should be calculated. Can be defined as a store identifier, instance or its descriptor (the result of [getStoreDescriptor](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-getStoreDescriptor) call). ```javascript // insert store6 just before a store having storeId equal to 'foo' crudManager.addStoreToApplySequence(store6, 0, 'foo');  // insert store7 just after store3 store crudManager.addStoreToApplySequence(store7, 1, store3); ```
     */
    addStoreToApplySequence(store: Store|CrudManagerStoreDescriptor|Store[]|CrudManagerStoreDescriptor[], position?: number, fromStore?: string|Store|CrudManagerStoreDescriptor): void;
    /**
     * Applies a set of changes, as an object keyed by store id, to the affected stores. This function is intended
     * to use in apps that handle their own data syncing, it is not needed when using the CrudManager approach.
     * @param {object} changes Changeset to apply, an object keyed by store id where each value follows the format described in [applyChangeset](https://bryntum.com/products/taskboard/docs/api/Core/data/Store#function-applyChangeset)
     * @param {Function} transformFn Optional function used to preprocess a changeset per store in a different format, should return an object with the format expected by [applyChangeset](https://bryntum.com/products/taskboard/docs/api/Core/data/Store#function-applyChangeset)
     * @param {string} phantomIdField Field used by the backend when communicating a record being assigned a proper id instead of a phantom id
     */
    applyChangeset(changes: object, transformFn?: Function, phantomIdField?: string): void;
    /**
     * Cancels a sent request.
     * @param {Promise<any>} requestPromise The Promise object wrapping the Request to be cancelled. The *requestPromise* is the value returned from the corresponding [sendRequest](https://bryntum.com/products/scheduler/docs#Scheduler/crud/transport/AjaxTransport#function-sendRequest) call.
     */
    cancelRequest(requestPromise: Promise<any>): void;
    /**
     * Returns `true` if any of registered stores (or some particular store) has non persisted changes.
     * @param {string|Store} storeId The store identifier or store instance to check changes for. If not specified then will check changes for all of the registered stores.
     */
    crudStoreHasChanges(storeId?: string|Store): boolean;
    /**
     * Decodes (parses) a *JSON* response string to an object. If parsing fails, it returns null.
     * Supposed to be overridden in case data provided by server has to be transformed into format requested by the *Crud Manager*.
     * @param {string} responseText The response text to decode.
     */
    decode(responseText: string): object;
    /**
     * Encodes a request object to *JSON* encoded string. If encoding fails (due to circular structure), it returns null.
     * Supposed to be overridden in case data provided by the *Crud Manager* has to be transformed into format requested by server.
     * @param {object} requestData The request to encode.
     */
    encode(requestData: object): string;
    /**
     * Returns a registered store.
     * @param {string} storeId Store identifier.
     */
    getCrudStore(storeId: string): Store;
    /**
     * Returns a registered store descriptor.
     * @param {string|Store} storeId The store identifier or registered store instance.
     */
    getStoreDescriptor(storeId: string|Store): CrudManagerStoreDescriptor;
    /**
     * Check if any listener is registered for the specified eventName
     * @param {string} eventName
     */
    hasListener(eventName: string): boolean;
    /**
     * Loads data to the stores registered in the crud manager. For example:
     * @param {object|string} options The request parameters or a URL.
     */
    load(options?: {
        request?: object
    }|string): Promise<any>;
    /**
     * Loads data to the Crud Manager
     * @param {object} response A simple object representing the data. The object structure matches the decoded `load` response structure: ```javascript // load static data into crudManager crudManager.loadCrudManagerData({     success   : true,     resources : {         rows : [             { id : 1, name : 'John' },             { id : 2, name : 'Abby' }         ]     } }); ```
     * @param {object} options Extra data loading options.
     */
    loadCrudManagerData(response: object, options?: object): void;
    /**
     * Alias for [addListener](https://bryntum.com/products/taskboard/docs/api/Core/mixin/Events#function-addListener). Adds an event listener. This method accepts parameters in the following format:
     * @param {BryntumListenerConfig|string} config An object containing listener definitions, or the event name to listen for
     * @param {object|Function} thisObj Default `this` reference for all listeners in the config object, or the handler function to call if providing a string as the first arg.
     * @param {object} oldThisObj The `this` reference if the old signature starting with a string event name is used..
     */
    on(config: BryntumListenerConfig|string, thisObj?: object|Function, oldThisObj?: object): Function;
    /**
     * Relays all events through another object that also implements Events mixin. Adds a prefix to the event name
     * before relaying, for example add -&gt; storeAdd
     * @param {EventsClass} through Object to relay the events through, needs to mix Events mixin in
     * @param {string} prefix Prefix to add to event name
     * @param {boolean} transformCase Specify false to prevent making first letter of event name uppercase
     */
    relayAll(through: EventsClass, prefix: string, transformCase?: boolean): void;
    /**
     * Removes all listeners registered to this object by the application.
     */
    removeAllListeners(): void;
    /**
     * Removes a store from collection. If the store was registered in alternative sync sequence list
     * it will be removed from there as well.
     * @param {CrudManagerStoreDescriptor|string|Store} store The store to remove. Either the store descriptor, store identifier or store itself.
     */
    removeCrudStore(store: CrudManagerStoreDescriptor|string|Store): void;
    /**
     * Removes an event listener. Same API signature as [addListener](https://bryntum.com/products/taskboard/docs/api/Core/mixin/Events#function-addListener)
     * @param {object|string} config A config object or the event name
     * @param {object|Function} thisObj `this` reference for all listeners, or the listener function
     * @param {object} oldThisObj `this` The `this` object for the legacy way of adding listeners
     */
    removeListener(config: object|string, thisObj: object|Function, oldThisObj: object): void;
    /**
     * Removes a store from the alternative sync sequence.
     * @param {CrudManagerStoreDescriptor|string|Store} store The store to remove. Either the store descriptor, store identifier or store itself.
     */
    removeStoreFromApplySequence(store: CrudManagerStoreDescriptor|string|Store): void;
    /**
     * Resumes automatic sync upon store changes. Will schedule a sync if the internal counter is 0.
     * @param {boolean} doSync Pass `true` to schedule a sync after resuming (if there are pending changes) and `false` to not persist the changes.
     */
    resumeAutoSync(doSync?: boolean): void;
    /**
     * Resumes [hasChanges](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#event-hasChanges) and [noChanges](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#event-noChanges) events. By default, it will check for changes
     * and if there are any, `hasChanges` or `noChanges` event will be triggered.
     * @param {boolean} skipChangeCheck
     */
    resumeChangeTracking(skipChangeCheck?: boolean): void;
    /**
     * Resume event triggering after a call to [suspendEvents()](https://bryntum.com/products/taskboard/docs/api/Core/mixin/Events#function-suspendEvents). If any triggered events were queued they will be triggered.
     */
    resumeEvents(): boolean;
    /**
     * Reverts all changes in all stores and re-inserts any records that were removed locally. Any new uncommitted
     * records will be removed.
     */
    revertChanges(): void;
    /**
     * Sends a *Crud Manager* request to the server.
     * @param {object} request The request configuration object having following properties:
     */
    sendRequest(request: {
        type: 'load'|'sync'
        url: string
        data: string
        params: object
        success: Function
        failure: Function
        thisObj: object
    }): Promise<any>;
    /**
     * Suspends automatic sync upon store changes. Can be called multiple times (it uses an internal counter).
     */
    suspendAutoSync(): void;
    /**
     * Suspends [hasChanges](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#event-hasChanges) and [noChanges](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#event-noChanges) events.
     */
    suspendChangeTracking(): void;
    /**
     * Prevents events from being triggered until [resumeEvents()](https://bryntum.com/products/taskboard/docs/api/Core/mixin/Events#function-resumeEvents) is called. Optionally queues events that are triggered while
     * suspended. Multiple calls stack to require matching calls to `resumeEvents()` before actually resuming.
     * @param {boolean} queue Specify true to queue events triggered while suspended
     */
    suspendEvents(queue?: boolean): void;
    /**
     * Persists changes made on the registered stores to the server and/or receives changes made on the backend.
     * Usage:
     */
    sync(): Promise<any>;
    /**
     * Triggers an event, calling all registered listeners with the supplied arguments. Returning false from any listener
     * makes function return false.
     * @param {string} eventName Event name for which to trigger listeners
     * @param {{bubbles?: boolean, [key: string]: any}} param Single parameter passed on to listeners, source property will be added to it (this)
     */
    trigger(eventName: string, param?: {bubbles?: boolean, [key: string]: any}): Promise<boolean|any>;
    /**
     * Shorthand for [removeListener](https://bryntum.com/products/taskboard/docs/api/Core/mixin/Events#function-removeListener)
     * @param {object|string} config A config object or the event name
     * @param {object|Function} thisObj `this` reference for all listeners, or the listener function
     * @param {object} oldThisObj `this` The `this` object for the legacy way of adding listeners
     */
    un(config: object|string, thisObj?: object|Function, oldThisObj?: object): void;
}

/**
 * Type with configuration options for [DependencyStore](https://bryntum.com/products/grid/docs/api/Scheduler/data/DependencyStore) class.
 */
type DependencyStoreConfig = {
    /**
     * Specify `false` to prevent loading records without ids, a good practise to enforce when syncing with a
     * backend.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/DependencyStore#config-allowNoId)
     */
    allowNoId: boolean
    /**
     * Specifies target to filter and sort after applying changeset:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/DependencyStore#config-applyChangesetFilterSortTarget)
     */
    applyChangesetFilterSortTarget: 'changes'|'none'
    /**
     * Commit changes automatically
     */
    autoCommit: boolean
    /**
     * True to initiate a load when the store is instantiated
     */
    autoLoad: boolean
    /**
     * Automatically detect from set data if used as tree store or flat store
     */
    autoTree: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/DependencyStore#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/DependencyStore#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Array of field names that should trigger filtering of chained store when the fields are updated.
     */
    chainedFields: string[]
    /**
     * Function used to filter records in the masterStore into a chained store. If not provided,
     * all records from the masterStore will be included in the chained store.
     * Return `true` to include the passed record, or a `false` to exclude it.
     * @param {Model} record
     * @returns {boolean}
     */
    chainedFilterFn: (record: Model) => boolean
    /**
     * Url to post newly created records to.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/DependencyStore#config-createUrl)
     */
    createUrl: string
    /**
     * Raw data to load initially.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/DependencyStore#config-data)
     */
    data: object[]|Model[]
    /**
     * Url for deleting records.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/DependencyStore#config-deleteUrl)
     */
    deleteUrl: string
    /**
     * Method names calls to which should be relayed to master store.
     */
    doRelayToMaster: string[]
    /**
     * Method names calls to which shouldn't be relayed to master store.
     */
    dontRelayToMaster: string
    /**
     * If true, collapsed records in original tree will be excluded from the chained store.
     */
    excludeCollapsedRecords: boolean
    /**
     * An object containing the Fetch options to pass to each server request issued by this store. Use this to
     * control if credentials are sent and other options, read more at
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_request_options).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/DependencyStore#config-fetchOptions)
     */
    fetchOptions: object
    /**
     * An array of field definitions used to create a [Model](https://bryntum.com/products/taskboard/docs/api/Core/data/Model) (modelClass) subclass. Optional.
     * If the Model already has fields defined, these fields will extend those.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/DependencyStore#config-fields)
     */
    fields: (string|Partial<ModelFieldConfig>|DataField)[]
    /**
     * The name of the HTTP parameter to use to pass any encoded filters when loading data from the server and a
     * filtered response is required.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/DependencyStore#config-filterParamName)
     */
    filterParamName: string
    /**
     * Specify one or more [CollectionFilter](https://bryntum.com/products/taskboard/docs/api/Core/util/CollectionFilter) config objects to apply initially.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/DependencyStore#config-filters)
     */
    filters: Partial<CollectionFilterConfig>|Partial<CollectionFilterConfig>[]
    /**
     * This flag prevents firing of 'remove' event when moving a node in the tree. In 6.0 this will be the default
     * behavior and this flag will be removed.
     */
    fireRemoveEventForMoveAction: boolean
    /**
     * Initial groupers, specify to have store grouped automatically after initially setting data
     */
    groupers: Grouper[]
    /**
     * A string keyed object containing the HTTP headers to add to each server request issued by this store.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/DependencyStore#config-headers)
     */
    headers: Record<string, string>
    /**
     * The HTTP methods to use for CRUD requests when [useRestfulMethods](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#config-useRestfulMethods) is enabled.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/DependencyStore#config-httpMethods)
     */
    httpMethods: HttpMethods
    /**
     * Store's unique identifier. When set the store is added to a store map accessible through
     * `Store.getStore(id)`.
     */
    id: string|number
    /**
     * Set to `false` to not record transaction during `applyChangeset` call
     */
    ignoreRemoteChangesInSTM: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/DependencyStore#config-listeners)
     */
    listeners: object
    /**
     * Master store that a chained store gets its records from.
     */
    masterStore: Store
    /**
     * Class used to represent records in the store, should be a subclass of [Model](https://bryntum.com/products/taskboard/docs/api/Core/data/Model). Only
     * applies when supplying data to the store (load, add), any supplied record instances are kept as is.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/DependencyStore#config-modelClass)
     */
    modelClass: typeof Model
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>one based</strong> page number
     * required.
     */
    pageParamName: string
    /**
     * When paging of data is requested by setting *either* the [pageParamName](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#config-pageParamName) *or* the
     * [pageStartParamName](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#config-pageStartParamName), this is the value to send in the [pageSizeParamName](#Core/data/AjaxStore#config-pageSizeParamName).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/DependencyStore#config-pageSize)
     */
    pageSize: number
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageSizeParamName: string
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageStartParamName: string
    /**
     * An object containing key/value pairs that are passed on the request query string.
     */
    params: object
    /**
     * The name of the HTTP parameter passed to this Store's [readUrl](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#config-readUrl) to indicate the node `id`
     * to load when loading child nodes on demand if the node being expanded was created with data containing
     * `children: true`.
     */
    parentIdParamName: string
    /**
     * Url to read data from.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/DependencyStore#config-readUrl)
     */
    readUrl: string
    /**
     * Specify true to reapply filters when a record is added to the store.
     */
    reapplyFilterOnAdd: boolean
    /**
     * Specify true to reapply filters when a record is updated in the store.
     */
    reapplyFilterOnUpdate: boolean
    /**
     * Specify true to sort this store after records are added.
     */
    reapplySortersOnAdd: boolean
    /**
     * The property name in JSON responses from the server that contains the data for the records
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/DependencyStore#config-responseDataProperty)
     */
    responseDataProperty: string
    /**
     * The optional property name in JSON responses from the server that contains a boolean
     * success/fail status.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/DependencyStore#config-responseSuccessProperty)
     */
    responseSuccessProperty: string
    /**
     * The property name in JSON responses from the server that contains the dataset total size
     * <strong>when this store [is paged](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#property-isPaged)</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/DependencyStore#config-responseTotalProperty)
     */
    responseTotalProperty: string
    /**
     * Set this flag to true if you are filtering remote using restful URLs (e.g.
     * https://nominatim.openstreetmap.org/search/paris?format=json)
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/DependencyStore#config-restfulFilter)
     */
    restfulFilter: boolean
    /**
     * Specify `true` to send payloads as form data, `false` to send as regular JSON.
     */
    sendAsFormData: boolean
    /**
     * The name of the HTTP parameter to use to pass any encoded sorters when loading data from the server and a
     * sorted response is required.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/DependencyStore#config-sortParamName)
     */
    sortParamName: string
    /**
     * Initial sorters, format is:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/DependencyStore#config-sorters)
     */
    sorters: Sorter[]|string[]
    /**
     * To have all groups <strong>initially loaded</strong> start collapsed, configure this as `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/DependencyStore#config-startGroupsCollapsed)
     */
    startGroupsCollapsed: boolean
    /**
     * Reference to STM manager
     */
    stm: StateTrackingManager
    /**
     * A [Collection](https://bryntum.com/products/taskboard/docs/api/Core/util/Collection), or Collection config object
     * to use to contain this Store's constituent records.
     */
    storage: Collection|Partial<CollectionConfig>
    /**
     * Store class to use when creating the store when it is a part of a
     * [CrudManager](https://bryntum.com/products/scheduler/docs/api/Scheduler/data/CrudManager).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/DependencyStore#config-storeClass)
     */
    storeClass: typeof Store
    /**
     * Configure with `true` to sync loaded data instead of replacing existing with a new dataset.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/DependencyStore#config-syncDataOnLoad)
     */
    syncDataOnLoad: boolean|SyncDataOnLoadOptions
    /**
     * Set to `true` to on load transform a flat dataset with raw objects containing `parentId` into the format
     * expected for tree data.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/DependencyStore#config-transformFlatData)
     */
    transformFlatData: boolean
    /**
     * `true` to act as a tree store.
     */
    tree: boolean
    /**
     * Url to post record modifications to.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/DependencyStore#config-updateUrl)
     */
    updateUrl: string
    /**
     * Use `localeCompare()` when sorting, which lets the browser sort in a locale specific order. Set to `true`,
     * a locale string or a locale config to enable.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/DependencyStore#config-useLocaleSort)
     */
    useLocaleSort: boolean|string|object
    /**
     * Retools the loaded data objects instead of making shallow copies of them. This increases performance but
     * pollutes the incoming data and does not allow remapping of fields (dataSource).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/DependencyStore#config-useRawData)
     * @param {boolean} disableDuplicateIdCheck Data must not contain duplicate ids, check is bypassed.
     * @param {boolean} disableDefaultValue Default values will not be applied to record fields.
     * @param {boolean} disableTypeConversion No type conversions will be performed on record data.
     */
    useRawData: boolean|object
    /**
     * Set to ´true´ to use restful [httpMethods](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#config-httpMethods)
     */
    useRestfulMethods: boolean
    /**
     * Verify that loaded data does not contain any generated ids. If it does, a warning is logged on console.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/DependencyStore#config-verifyNoGeneratedIds)
     */
    verifyNoGeneratedIds: boolean
    /**
     * Specify `true` to send all model fields when committing modified records (as opposed to just the
     * modified fields)
     */
    writeAllFields: boolean
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Added records. In case of tree store, if branch is added, only branch root is returned
     * @param {Model[]} event.allRecords Flat list of all added records. In case of tree store, if branch is added, all new records are returned, not only branch root
     * @param {Model} event.parent If due to an [appendChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-appendChild) call, this is the parent node added to.
     * @param {number} event.index Insertion point in the store's [Collection](https://bryntum.com/products/taskboard/docs/api/Core/data/Store#config-storage).
     * @param {number} event.oldIndex Not used for tree stores. The index of the first record moved.
     * @param {boolean} event.isChild Flag which is set to true if the records are added to a parent record
     * @param {boolean} event.isExpand Flag which is set to true if records are added to the store by expanding parent
     * @param {object} event.isMove An object keyed by the ids of the records which were moved from another position in the store, or from another parent node in the store. The ids of moved records will be property names with a value `true`.
     */
    onAdd: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, oldIndex?: number, isChild?: boolean, isExpand?: boolean, isMove?: object }) => void)|string
    /**
     * Fired when a temporary record with the [isCreating](https://bryntum.com/products/taskboard/docs/api/Core/data/Model#property-isCreating) property set
     * has been confirmed as a part of this store by having its [isCreating](https://bryntum.com/products/taskboard/docs/api/Core/data/Model#property-isCreating)
     * property cleared.
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {Model} event.record The record confirmed as added.
     */
    onAddConfirmed: ((event: { source: Store, record: Model }) => void)|string
    /**
     * Fired after any remote request has finished whether successfully or unsuccessfully.
     * @param {object} event Event object
     * @param {boolean} event.exception `true`. *Only present if the request triggered an exception.*
     * @param {'create'|'read'|'update'|'delete'} event.action Action that has finished, `'create'`, `'read'`, `'update'` or `'delete'`
     * @param {'network'|'failure'} event.exceptionType The type of failure, `'network'` or `'server'`. <em>Only present if the request triggered an exception.</em>
     * @param {Response} event.response The `Response` object
     * @param {object} event.json The decoded response object if there was no `'network'` exception.
     */
    onAfterRequest: ((event: { exception: boolean, action: 'create'|'read'|'update'|'delete', exceptionType: 'network'|'failure', response: Response, json: object }) => void)|string
    /**
     * Fired before records are added to this store by the [add](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/StoreCRUD#function-add) or [insert](#Core/data/mixin/StoreCRUD#function-insert). In a tree
     * store, also fired by [appendChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-appendChild) and
     * [insertChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-insertChild). The add or insert may be vetoed by returning `false`
     * from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be added
     * @param {Model} event.parent The parent node when using a tree store
     */
    onBeforeAdd: ((event: { source: Store, records: Model[], parent: Model }) => boolean|void)|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onBeforeCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     * @param {object} event Event object
     * @param {Store|any} event.source The
     * @param {(Model|any)[]} event.records The nodes to indent.
     */
    onBeforeIndent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before loading starts. Allows altering parameters and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoad: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * Fired before loading of remote child nodes of a tree node starts. Allows altering parameters and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoadChildren: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * When the store [is paged](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#property-isPaged), this is fired before loading a page and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoadPage: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     * @param {object} event Event object
     * @param {Store|any} event.source This store
     * @param {(Model|any)[]} event.records Nodes to be outdented
     */
    onBeforeOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before records are removed from this store by the [remove](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/StoreCRUD#function-remove) or [removeAll](#Core/data/mixin/StoreCRUD#function-removeAll).
     * Also fired when removing a child record in a tree store using [removeChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-removeChild).
     * The remove may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be removed.
     * @param {Model} event.parent The record from which children are being removed when using a tree store. Only provided when removing a single node.
     * @param {boolean} event.isMove This flag is `true` if the child node is being removed by [appendChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-appendChild) to be moved *within the same tree*.
     * @param {boolean} event.removingAll This flag is `true` if the operation is removing the store's entire data set.
     */
    onBeforeRemove: ((event: { source: Store, records: Model[], parent: Model, isMove: boolean, removingAll: boolean }) => boolean|void)|string
    /**
     * Fired before any remote request is initiated.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing key/value pairs that are passed on the request query string
     * @param {object} event.body The body of the request to be posted to the server.
     * @param {'create'|'read'|'update'|'delete'} event.action Action that is making the request, `'create'`, `'read'`, `'update'` or `'delete'`
     */
    onBeforeRequest: ((event: { source: Store, params: object, body: object, action: 'create'|'read'|'update'|'delete' }) => void)|string
    /**
     * Fired before sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Records to sort
     */
    onBeforeSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fired before record is modified in this store.
     * Modification may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {object} event.changes Modification data
     */
    onBeforeUpdate: ((event: { source: Store, record: Model, changes: object }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/DependencyStore#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Data in the store was changed. This is a catch-all event which is fired for all changes
     * which take place to the store's data.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/DependencyStore#event-change)
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} event.action Name of action which triggered the change. May be one of the options listed above
     * @param {Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onChange: ((event: { source: Store, action: 'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Fired after committing changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fired after committing added records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitAdded: ((event: { source: Store }) => void)|string
    /**
     * Fired after committing modified records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitModified: ((event: { source: Store }) => void)|string
    /**
     * Fired after committing removed records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitRemoved: ((event: { source: Store }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when a remote request fails, either at the network level, or the server returns a failure, or an invalid
     * response.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/DependencyStore#event-exception)
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {boolean} event.exception `true`
     * @param {'create'|'read'|'update'|'delete'|'commit'} event.action Action that failed, `'create'`, `'read'`, `'update'` or `'delete'`. May also be fired with '`commit'` to indicate the failure of an aggregated `create`, `update` and `delete` operation. In this case, the event will contain a property for each operation of the commit named `'create'`, `'update'` and `'delete'`, each containing the individual `exception` events.
     * @param {'network'|'failure'} event.exceptionType The type of failure, `'network'` or `'server'`
     * @param {Response} event.response the `Response` object
     * @param {object} event.json The decoded response object *if the exceptionType is `'server'`*
     */
    onException: ((event: { source: Store, exception: boolean, action: 'create'|'read'|'update'|'delete'|'commit', exceptionType: 'network'|'failure', response: Response, json: object }) => void)|string
    /**
     * Fired after applying filters to the store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Collection} event.filters Filters used by this Store
     * @param {Model[]} event.removed The records which were filtered out by the action.
     * @param {Model[]} event.added The records which were filtered back in by the action.
     * @param {Model[]} event.records Filtered records
     */
    onFilter: ((event: { source: Store, filters: Collection, removed: Model[], added: Model[], records: Model[] }) => void)|string
    /**
     * Fired when grouping changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Grouper[]} event.groupers Applied groupers
     * @param {Model[]} event.records Grouped records
     */
    onGroup: ((event: { source: Store, groupers: Grouper[], records: Model[] }) => void)|string
    /**
     * Fired when the id of a record has changed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {string|number} event.oldValue Old id
     * @param {string|number} event.value New id
     */
    onIdChange: ((event: { source: Store, record: Model, oldValue: string|number, value: string|number }) => void)|string
    /**
     * Fired after tasks in the tree are indented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were indented
     */
    onIndent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired on successful load
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object[]} event.data Data loaded
     * @param {Response} event.response the `Response` object
     * @param {object} event.json The decoded response object.
     */
    onLoad: ((event: { source: Store, data: object[], response: Response, json: object }) => void)|string
    /**
     * Fired on successful load of remote child nodes for a tree node.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object[]} event.data Data loaded
     * @param {object} event.json The decoded response object.
     */
    onLoadChildren: ((event: { source: Store, data: object[], json: object }) => void)|string
    /**
     * Fired when loading of remote child nodes into a tree node is beginning. This is not cancelable. Parameters in the
     * event may still be mutated at this stage.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadChildrenStart: ((event: { source: Store, params: object }) => void)|string
    /**
     * Fired when loading is beginning. This is not cancelable. Parameters in the event may still be
     * mutated at this stage.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadStart: ((event: { source: Store, params: object }) => void)|string
    /**
     * Fired when a block of records has been moved within this Store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record (DEPRECATED) The first record moved (The [move](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/StoreCRUD#function-move) API now accepts an array of records to move).
     * @param {Model[]} event.records The records moved.
     * @param {number} event.from The index from which the record was removed (applicable only for flat store).
     * @param {number} event.to The index at which the record was inserted (applicable only for flat store).
     * @param {Model} event.newParent The new parent record for the dragged records (applicable only for tree stores)
     * @param {Model[]} event.oldParents The old parent records for the dragged records (applicable only for move operations in tree stores)
     */
    onMove: ((event: { source: Store, record: Model, records: Model[], from: number, to: number, newParent?: Model, oldParents?: Model[] }) => void)|string
    /**
     * Fired after tasks in the tree are outdented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were outdented
     */
    onOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Data in the store has completely changed, such as by a filter, or sort or load operation.
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {boolean} event.batch Flag set to `true` when the refresh is triggered by ending a batch
     * @param {'dataset'|'sort'|'clearchanges'|'filter'|'create'|'update'|'delete'|'group'} event.action Name of action which triggered the change. May be one of the options listed above.
     */
    onRefresh: ((event: { source: Store, batch: boolean, action: 'dataset'|'sort'|'clearchanges'|'filter'|'create'|'update'|'delete'|'group' }) => void)|string
    /**
     * Fired when one or more records are removed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Array of removed records. In case of tree store, if branch is removed, only branch root is returned
     * @param {Model[]} event.allRecords Flat array of all removed records. In case of tree store, if branch is removed, all removed records are returned, not only branch root
     * @param {Model} event.parent If due to a [removeChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-removeChild) call, this is the parent node removed from. Only applicable when removing a single tree node.
     * @param {number} event.index Visible index at which record was removed. In case the record was removed from a collapsed branch, -1 is returned. For tree store, this is only provided when removing a single node.
     * @param {boolean} event.isChild Flag which is set to true if the record was removed from a parent record
     * @param {boolean} event.isCollapse Flag which is set to true if records were removed from the store by collapsing parent
     * @param {boolean} event.isMove Passed as `true` if the remove was part of a move operation within this Store.
     */
    onRemove: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, isChild?: boolean, isCollapse?: boolean, isMove?: boolean }) => void)|string
    /**
     * Fired after removing all records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onRemoveAll: ((event: { source: Store }) => void)|string
    /**
     * Fired when the root node is set
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.oldRoot The old root node.
     * @param {Model} event.rootNode The new root node.
     */
    onRootChange: ((event: { source: Store, oldRoot: Model, rootNode: Model }) => void)|string
    /**
     * Fired after sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Sorted records
     */
    onSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fired when a record is modified
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {object} event.changes Modification data
     */
    onUpdate: ((event: { source: Store, record: Model, changes: object }) => void)|string
}

/**
 * A store representing a collection of dependencies between events in the [EventStore](https://bryntum.com/products/scheduler/docs#Scheduler/data/EventStore).
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/DependencyStore)
 */
export class DependencyStore extends AjaxStore {
    /**
     * Returns the assignment store of the project this entity belongs to.
     */
    readonly assignmentStore: AssignmentStore
    /**
     * Applies a new dataset to the DependencyStore. Use it to plug externally fetched data into the store.
     */
    data: Partial<DependencyModelConfig>[]
    /**
     * Returns the dependency store of the project this entity belongs to.
     */
    readonly dependencyStore: DependencyStore
    /**
     * Returns the event store of the project this entity belongs to.
     */
    readonly eventStore: EventStore
    /**
     * Returns the project this entity belongs to.
     */
    readonly project: SchedulerProjectModel
    /**
     * Returns the resource store of the project this entity belongs to.
     */
    readonly resourceStore: ResourceStore
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Added records. In case of tree store, if branch is added, only branch root is returned
     * @param {Model[]} event.allRecords Flat list of all added records. In case of tree store, if branch is added, all new records are returned, not only branch root
     * @param {Model} event.parent If due to an [appendChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-appendChild) call, this is the parent node added to.
     * @param {number} event.index Insertion point in the store's [Collection](https://bryntum.com/products/taskboard/docs/api/Core/data/Store#config-storage).
     * @param {number} event.oldIndex Not used for tree stores. The index of the first record moved.
     * @param {boolean} event.isChild Flag which is set to true if the records are added to a parent record
     * @param {boolean} event.isExpand Flag which is set to true if records are added to the store by expanding parent
     * @param {object} event.isMove An object keyed by the ids of the records which were moved from another position in the store, or from another parent node in the store. The ids of moved records will be property names with a value `true`.
     */
    onAdd: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, oldIndex?: number, isChild?: boolean, isExpand?: boolean, isMove?: object }) => void)|string
    /**
     * Fired before records are added to this store by the [add](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/StoreCRUD#function-add) or [insert](#Core/data/mixin/StoreCRUD#function-insert). In a tree
     * store, also fired by [appendChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-appendChild) and
     * [insertChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-insertChild). The add or insert may be vetoed by returning `false`
     * from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be added
     * @param {Model} event.parent The parent node when using a tree store
     */
    onBeforeAdd: ((event: { source: Store, records: Model[], parent: Model }) => boolean|void)|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onBeforeCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     * @param {object} event Event object
     * @param {Store|any} event.source The
     * @param {(Model|any)[]} event.records The nodes to indent.
     */
    onBeforeIndent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     * @param {object} event Event object
     * @param {Store|any} event.source This store
     * @param {(Model|any)[]} event.records Nodes to be outdented
     */
    onBeforeOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before records are removed from this store by the [remove](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/StoreCRUD#function-remove) or [removeAll](#Core/data/mixin/StoreCRUD#function-removeAll).
     * Also fired when removing a child record in a tree store using [removeChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-removeChild).
     * The remove may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be removed.
     * @param {Model} event.parent The record from which children are being removed when using a tree store. Only provided when removing a single node.
     * @param {boolean} event.isMove This flag is `true` if the child node is being removed by [appendChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-appendChild) to be moved *within the same tree*.
     * @param {boolean} event.removingAll This flag is `true` if the operation is removing the store's entire data set.
     */
    onBeforeRemove: ((event: { source: Store, records: Model[], parent: Model, isMove: boolean, removingAll: boolean }) => boolean|void)|string
    /**
     * Fired before sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Records to sort
     */
    onBeforeSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/DependencyStore#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired after committing changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired after applying filters to the store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Collection} event.filters Filters used by this Store
     * @param {Model[]} event.removed The records which were filtered out by the action.
     * @param {Model[]} event.added The records which were filtered back in by the action.
     * @param {Model[]} event.records Filtered records
     */
    onFilter: ((event: { source: Store, filters: Collection, removed: Model[], added: Model[], records: Model[] }) => void)|string
    /**
     * Fired when grouping changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Grouper[]} event.groupers Applied groupers
     * @param {Model[]} event.records Grouped records
     */
    onGroup: ((event: { source: Store, groupers: Grouper[], records: Model[] }) => void)|string
    /**
     * Fired after tasks in the tree are indented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were indented
     */
    onIndent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired after tasks in the tree are outdented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were outdented
     */
    onOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired when one or more records are removed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Array of removed records. In case of tree store, if branch is removed, only branch root is returned
     * @param {Model[]} event.allRecords Flat array of all removed records. In case of tree store, if branch is removed, all removed records are returned, not only branch root
     * @param {Model} event.parent If due to a [removeChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-removeChild) call, this is the parent node removed from. Only applicable when removing a single tree node.
     * @param {number} event.index Visible index at which record was removed. In case the record was removed from a collapsed branch, -1 is returned. For tree store, this is only provided when removing a single node.
     * @param {boolean} event.isChild Flag which is set to true if the record was removed from a parent record
     * @param {boolean} event.isCollapse Flag which is set to true if records were removed from the store by collapsing parent
     * @param {boolean} event.isMove Passed as `true` if the remove was part of a move operation within this Store.
     */
    onRemove: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, isChild?: boolean, isCollapse?: boolean, isMove?: boolean }) => void)|string
    /**
     * Fired after removing all records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onRemoveAll: ((event: { source: Store }) => void)|string
    /**
     * Fired after sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Sorted records
     */
    onSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<DependencyStoreConfig>} config
     */
    constructor(config?: Partial<DependencyStoreConfig>);
    /**
     * Add dependencies to the store.
     * @param {DependencyModel|DependencyModel[]|Partial<DependencyModelConfig>|Partial<DependencyModelConfig>[]} records Array of records/data or a single record/data to add to store
     * @param {boolean} silent Specify `true` to suppress events
     */
    add(records: DependencyModel|DependencyModel[]|Partial<DependencyModelConfig>|Partial<DependencyModelConfig>[], silent?: boolean): DependencyModel[];
    /**
     * Add dependencies to the store and triggers calculations directly after. Await this function to have up to date
     * references on the added dependencies.
     * @param {DependencyModel|DependencyModel[]|Partial<DependencyModelConfig>|Partial<DependencyModelConfig>[]} records Array of records/data or a single record/data to add to store
     * @param {boolean} silent Specify `true` to suppress events
     */
    addAsync(records: DependencyModel|DependencyModel[]|Partial<DependencyModelConfig>|Partial<DependencyModelConfig>[], silent?: boolean): Promise<DependencyModel[]>;
    /**
     * Returns dependency model instance linking tasks with given ids. The dependency can be forward (from 1st
     * task to 2nd) or backward (from 2nd to 1st).
     * @param {EventModel|string} sourceEvent 1st event
     * @param {EventModel|string} targetEvent 2nd event
     */
    getDependencyForSourceAndTargetEvents(sourceEvent: EventModel|string, targetEvent: EventModel|string): DependencyModel;
    /**
     * Returns all dependencies for a certain event (both incoming and outgoing)
     * @param {EventModel} event
     */
    getEventDependencies(event: EventModel): DependencyModel[];
    /**
     * Returns a dependency model instance linking given events if such dependency exists in the store.
     * The dependency can be forward (from 1st event to 2nd) or backward (from 2nd to 1st).
     * @param {EventModel|string} sourceEvent
     * @param {EventModel|string} targetEvent
     */
    getEventsLinkingDependency(sourceEvent: EventModel|string, targetEvent: EventModel|string): DependencyModel;
    /**
     * Returns all dependencies highlighted with the given CSS class
     * @param {string} cls
     */
    getHighlightedDependencies(cls: string): DependencyBaseModel[];
    /**
     * Validation method used to validate a dependency. Override and return `true` to indicate that an
     * existing dependency between two tasks is valid. For a new dependency being created please see
     * [isValidDependencyToCreate](https://bryntum.com/products/scheduler/docs#Scheduler/data/mixin/DependencyStoreMixin#function-isValidDependencyToCreate).
     * @param {DependencyModel|TimeSpan|number|string} dependencyOrFromId The dependency model, the from task/event or the id of the from task/event
     * @param {TimeSpan|number|string} toId To task/event or id thereof if the first parameter is not a dependency record
     * @param {number} type Dependency [Type](https://bryntum.com/products/scheduler/docs#Scheduler/model/DependencyBaseModel#property-Type-static) if the first parameter is not a dependency model instance.
     */
    isValidDependency(dependencyOrFromId: DependencyModel|TimeSpan|number|string, toId?: TimeSpan|number|string, type?: number): Promise<boolean>;
    /**
     * Validation method used to validate a dependency while creating. Override and return `true` to indicate that
     * a new dependency is valid to be created.
     * @param {TimeSpan|number|string} fromId From event/task or id
     * @param {TimeSpan|number|string} toId To event/task or id
     * @param {number} type Dependency [Type](https://bryntum.com/products/scheduler/docs#Scheduler/model/DependencyBaseModel#property-Type-static)
     */
    isValidDependencyToCreate(fromId: TimeSpan|number|string, toId: TimeSpan|number|string, type: number): boolean;
    /**
     * Applies a new dataset to the DependencyStore and triggers calculations directly after. Use it to plug externally
     * fetched data into the store.
     * @param {Partial<DependencyModelConfig>[]} data Array of DependencyModel data objects
     */
    loadDataAsync(data: Partial<DependencyModelConfig>[]): Promise<void>;
}

/**
 * Type with configuration options for [EventStore](https://bryntum.com/products/grid/docs/api/Scheduler/data/EventStore) class.
 */
type EventStoreConfig = {
    /**
     * Specify `false` to prevent loading records without ids, a good practise to enforce when syncing with a
     * backend.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/EventStore#config-allowNoId)
     */
    allowNoId: boolean
    /**
     * Specifies target to filter and sort after applying changeset:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/EventStore#config-applyChangesetFilterSortTarget)
     */
    applyChangesetFilterSortTarget: 'changes'|'none'
    /**
     * Commit changes automatically
     */
    autoCommit: boolean
    /**
     * True to initiate a load when the store is instantiated
     */
    autoLoad: boolean
    /**
     * Automatically detect from set data if used as tree store or flat store
     */
    autoTree: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/EventStore#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/EventStore#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Array of field names that should trigger filtering of chained store when the fields are updated.
     */
    chainedFields: string[]
    /**
     * Function used to filter records in the masterStore into a chained store. If not provided,
     * all records from the masterStore will be included in the chained store.
     * Return `true` to include the passed record, or a `false` to exclude it.
     * @param {Model} record
     * @returns {boolean}
     */
    chainedFilterFn: (record: Model) => boolean
    /**
     * Url to post newly created records to.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/EventStore#config-createUrl)
     */
    createUrl: string
    /**
     * Raw data to load initially.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/EventStore#config-data)
     */
    data: object[]|Model[]
    /**
     * Url for deleting records.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/EventStore#config-deleteUrl)
     */
    deleteUrl: string
    /**
     * Method names calls to which should be relayed to master store.
     */
    doRelayToMaster: string[]
    /**
     * Method names calls to which shouldn't be relayed to master store.
     */
    dontRelayToMaster: string
    /**
     * If true, collapsed records in original tree will be excluded from the chained store.
     */
    excludeCollapsedRecords: boolean
    /**
     * An object containing the Fetch options to pass to each server request issued by this store. Use this to
     * control if credentials are sent and other options, read more at
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_request_options).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/EventStore#config-fetchOptions)
     */
    fetchOptions: object
    /**
     * An array of field definitions used to create a [Model](https://bryntum.com/products/taskboard/docs/api/Core/data/Model) (modelClass) subclass. Optional.
     * If the Model already has fields defined, these fields will extend those.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/EventStore#config-fields)
     */
    fields: (string|Partial<ModelFieldConfig>|DataField)[]
    /**
     * The name of the HTTP parameter to use to pass any encoded filters when loading data from the server and a
     * filtered response is required.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/EventStore#config-filterParamName)
     */
    filterParamName: string
    /**
     * Specify one or more [CollectionFilter](https://bryntum.com/products/taskboard/docs/api/Core/util/CollectionFilter) config objects to apply initially.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/EventStore#config-filters)
     */
    filters: Partial<CollectionFilterConfig>|Partial<CollectionFilterConfig>[]
    /**
     * This flag prevents firing of 'remove' event when moving a node in the tree. In 6.0 this will be the default
     * behavior and this flag will be removed.
     */
    fireRemoveEventForMoveAction: boolean
    /**
     * Initial groupers, specify to have store grouped automatically after initially setting data
     */
    groupers: Grouper[]
    /**
     * A string keyed object containing the HTTP headers to add to each server request issued by this store.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/EventStore#config-headers)
     */
    headers: Record<string, string>
    /**
     * The HTTP methods to use for CRUD requests when [useRestfulMethods](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#config-useRestfulMethods) is enabled.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/EventStore#config-httpMethods)
     */
    httpMethods: HttpMethods
    /**
     * Store's unique identifier. When set the store is added to a store map accessible through
     * `Store.getStore(id)`.
     */
    id: string|number
    /**
     * Set to `false` to not record transaction during `applyChangeset` call
     */
    ignoreRemoteChangesInSTM: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/EventStore#config-listeners)
     */
    listeners: object
    /**
     * Master store that a chained store gets its records from.
     */
    masterStore: Store
    /**
     * Class used to represent records
     */
    modelClass: typeof EventModel
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>one based</strong> page number
     * required.
     */
    pageParamName: string
    /**
     * When paging of data is requested by setting *either* the [pageParamName](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#config-pageParamName) *or* the
     * [pageStartParamName](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#config-pageStartParamName), this is the value to send in the [pageSizeParamName](#Core/data/AjaxStore#config-pageSizeParamName).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/EventStore#config-pageSize)
     */
    pageSize: number
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageSizeParamName: string
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageStartParamName: string
    /**
     * An object containing key/value pairs that are passed on the request query string.
     */
    params: object
    /**
     * The name of the HTTP parameter passed to this Store's [readUrl](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#config-readUrl) to indicate the node `id`
     * to load when loading child nodes on demand if the node being expanded was created with data containing
     * `children: true`.
     */
    parentIdParamName: string
    /**
     * Url to read data from.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/EventStore#config-readUrl)
     */
    readUrl: string
    /**
     * Specify true to reapply filters when a record is added to the store.
     */
    reapplyFilterOnAdd: boolean
    /**
     * Specify true to reapply filters when a record is updated in the store.
     */
    reapplyFilterOnUpdate: boolean
    /**
     * Specify true to sort this store after records are added.
     */
    reapplySortersOnAdd: boolean
    /**
     * Configure with `true` to also remove the event when removing the last assignment from the linked
     * AssignmentStore. This config has not effect when using EventStore in legacy `resourceId`-mode.
     */
    removeUnassignedEvent: boolean
    /**
     * The property name in JSON responses from the server that contains the data for the records
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/EventStore#config-responseDataProperty)
     */
    responseDataProperty: string
    /**
     * The optional property name in JSON responses from the server that contains a boolean
     * success/fail status.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/EventStore#config-responseSuccessProperty)
     */
    responseSuccessProperty: string
    /**
     * The property name in JSON responses from the server that contains the dataset total size
     * <strong>when this store [is paged](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#property-isPaged)</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/EventStore#config-responseTotalProperty)
     */
    responseTotalProperty: string
    /**
     * Set this flag to true if you are filtering remote using restful URLs (e.g.
     * https://nominatim.openstreetmap.org/search/paris?format=json)
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/EventStore#config-restfulFilter)
     */
    restfulFilter: boolean
    /**
     * Specify `true` to send payloads as form data, `false` to send as regular JSON.
     */
    sendAsFormData: boolean
    /**
     * Configure with `true` to force single-resource mode, an event can only be assigned to a single resource.
     * If not provided, the mode will be inferred from
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/EventStore#config-singleAssignment)
     */
    singleAssignment: boolean
    /**
     * The name of the HTTP parameter to use to pass any encoded sorters when loading data from the server and a
     * sorted response is required.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/EventStore#config-sortParamName)
     */
    sortParamName: string
    /**
     * Initial sorters, format is:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/EventStore#config-sorters)
     */
    sorters: Sorter[]|string[]
    /**
     * To have all groups <strong>initially loaded</strong> start collapsed, configure this as `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/EventStore#config-startGroupsCollapsed)
     */
    startGroupsCollapsed: boolean
    /**
     * Reference to STM manager
     */
    stm: StateTrackingManager
    /**
     * A [Collection](https://bryntum.com/products/taskboard/docs/api/Core/util/Collection), or Collection config object
     * to use to contain this Store's constituent records.
     */
    storage: Collection|Partial<CollectionConfig>
    /**
     * Store class to use when creating the store when it is a part of a
     * [CrudManager](https://bryntum.com/products/scheduler/docs/api/Scheduler/data/CrudManager).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/EventStore#config-storeClass)
     */
    storeClass: typeof Store
    /**
     * Configure with `true` to sync loaded data instead of replacing existing with a new dataset.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/EventStore#config-syncDataOnLoad)
     */
    syncDataOnLoad: boolean|SyncDataOnLoadOptions
    /**
     * Set to `true` to on load transform a flat dataset with raw objects containing `parentId` into the format
     * expected for tree data.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/EventStore#config-transformFlatData)
     */
    transformFlatData: boolean
    /**
     * `true` to act as a tree store.
     */
    tree: boolean
    /**
     * Url to post record modifications to.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/EventStore#config-updateUrl)
     */
    updateUrl: string
    /**
     * Use `localeCompare()` when sorting, which lets the browser sort in a locale specific order. Set to `true`,
     * a locale string or a locale config to enable.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/EventStore#config-useLocaleSort)
     */
    useLocaleSort: boolean|string|object
    /**
     * Retools the loaded data objects instead of making shallow copies of them. This increases performance but
     * pollutes the incoming data and does not allow remapping of fields (dataSource).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/EventStore#config-useRawData)
     * @param {boolean} disableDuplicateIdCheck Data must not contain duplicate ids, check is bypassed.
     * @param {boolean} disableDefaultValue Default values will not be applied to record fields.
     * @param {boolean} disableTypeConversion No type conversions will be performed on record data.
     */
    useRawData: boolean|object
    /**
     * Set to ´true´ to use restful [httpMethods](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#config-httpMethods)
     */
    useRestfulMethods: boolean
    /**
     * Verify that loaded data does not contain any generated ids. If it does, a warning is logged on console.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/EventStore#config-verifyNoGeneratedIds)
     */
    verifyNoGeneratedIds: boolean
    /**
     * Specify `true` to send all model fields when committing modified records (as opposed to just the
     * modified fields)
     */
    writeAllFields: boolean
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Added records. In case of tree store, if branch is added, only branch root is returned
     * @param {Model[]} event.allRecords Flat list of all added records. In case of tree store, if branch is added, all new records are returned, not only branch root
     * @param {Model} event.parent If due to an [appendChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-appendChild) call, this is the parent node added to.
     * @param {number} event.index Insertion point in the store's [Collection](https://bryntum.com/products/taskboard/docs/api/Core/data/Store#config-storage).
     * @param {number} event.oldIndex Not used for tree stores. The index of the first record moved.
     * @param {boolean} event.isChild Flag which is set to true if the records are added to a parent record
     * @param {boolean} event.isExpand Flag which is set to true if records are added to the store by expanding parent
     * @param {object} event.isMove An object keyed by the ids of the records which were moved from another position in the store, or from another parent node in the store. The ids of moved records will be property names with a value `true`.
     */
    onAdd: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, oldIndex?: number, isChild?: boolean, isExpand?: boolean, isMove?: object }) => void)|string
    /**
     * Fired when a temporary record with the [isCreating](https://bryntum.com/products/taskboard/docs/api/Core/data/Model#property-isCreating) property set
     * has been confirmed as a part of this store by having its [isCreating](https://bryntum.com/products/taskboard/docs/api/Core/data/Model#property-isCreating)
     * property cleared.
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {Model} event.record The record confirmed as added.
     */
    onAddConfirmed: ((event: { source: Store, record: Model }) => void)|string
    /**
     * Fired after any remote request has finished whether successfully or unsuccessfully.
     * @param {object} event Event object
     * @param {boolean} event.exception `true`. *Only present if the request triggered an exception.*
     * @param {'create'|'read'|'update'|'delete'} event.action Action that has finished, `'create'`, `'read'`, `'update'` or `'delete'`
     * @param {'network'|'failure'} event.exceptionType The type of failure, `'network'` or `'server'`. <em>Only present if the request triggered an exception.</em>
     * @param {Response} event.response The `Response` object
     * @param {object} event.json The decoded response object if there was no `'network'` exception.
     */
    onAfterRequest: ((event: { exception: boolean, action: 'create'|'read'|'update'|'delete', exceptionType: 'network'|'failure', response: Response, json: object }) => void)|string
    /**
     * Fired before records are added to this store by the [add](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/StoreCRUD#function-add) or [insert](#Core/data/mixin/StoreCRUD#function-insert). In a tree
     * store, also fired by [appendChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-appendChild) and
     * [insertChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-insertChild). The add or insert may be vetoed by returning `false`
     * from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be added
     * @param {Model} event.parent The parent node when using a tree store
     */
    onBeforeAdd: ((event: { source: Store, records: Model[], parent: Model }) => boolean|void)|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onBeforeCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     * @param {object} event Event object
     * @param {Store|any} event.source The
     * @param {(Model|any)[]} event.records The nodes to indent.
     */
    onBeforeIndent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before loading starts. Allows altering parameters and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoad: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * Fired before loading of remote child nodes of a tree node starts. Allows altering parameters and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoadChildren: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * When the store [is paged](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#property-isPaged), this is fired before loading a page and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoadPage: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     * @param {object} event Event object
     * @param {Store|any} event.source This store
     * @param {(Model|any)[]} event.records Nodes to be outdented
     */
    onBeforeOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before records are removed from this store by the [remove](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/StoreCRUD#function-remove) or [removeAll](#Core/data/mixin/StoreCRUD#function-removeAll).
     * Also fired when removing a child record in a tree store using [removeChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-removeChild).
     * The remove may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be removed.
     * @param {Model} event.parent The record from which children are being removed when using a tree store. Only provided when removing a single node.
     * @param {boolean} event.isMove This flag is `true` if the child node is being removed by [appendChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-appendChild) to be moved *within the same tree*.
     * @param {boolean} event.removingAll This flag is `true` if the operation is removing the store's entire data set.
     */
    onBeforeRemove: ((event: { source: Store, records: Model[], parent: Model, isMove: boolean, removingAll: boolean }) => boolean|void)|string
    /**
     * Fired before any remote request is initiated.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing key/value pairs that are passed on the request query string
     * @param {object} event.body The body of the request to be posted to the server.
     * @param {'create'|'read'|'update'|'delete'} event.action Action that is making the request, `'create'`, `'read'`, `'update'` or `'delete'`
     */
    onBeforeRequest: ((event: { source: Store, params: object, body: object, action: 'create'|'read'|'update'|'delete' }) => void)|string
    /**
     * Fired before sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Records to sort
     */
    onBeforeSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fired before record is modified in this store.
     * Modification may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {object} event.changes Modification data
     */
    onBeforeUpdate: ((event: { source: Store, record: Model, changes: object }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/EventStore#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Data in the store was changed. This is a catch-all event which is fired for all changes
     * which take place to the store's data.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/EventStore#event-change)
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} event.action Name of action which triggered the change. May be one of the options listed above
     * @param {Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onChange: ((event: { source: Store, action: 'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Fired after committing changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fired after committing added records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitAdded: ((event: { source: Store }) => void)|string
    /**
     * Fired after committing modified records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitModified: ((event: { source: Store }) => void)|string
    /**
     * Fired after committing removed records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitRemoved: ((event: { source: Store }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when a remote request fails, either at the network level, or the server returns a failure, or an invalid
     * response.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/EventStore#event-exception)
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {boolean} event.exception `true`
     * @param {'create'|'read'|'update'|'delete'|'commit'} event.action Action that failed, `'create'`, `'read'`, `'update'` or `'delete'`. May also be fired with '`commit'` to indicate the failure of an aggregated `create`, `update` and `delete` operation. In this case, the event will contain a property for each operation of the commit named `'create'`, `'update'` and `'delete'`, each containing the individual `exception` events.
     * @param {'network'|'failure'} event.exceptionType The type of failure, `'network'` or `'server'`
     * @param {Response} event.response the `Response` object
     * @param {object} event.json The decoded response object *if the exceptionType is `'server'`*
     */
    onException: ((event: { source: Store, exception: boolean, action: 'create'|'read'|'update'|'delete'|'commit', exceptionType: 'network'|'failure', response: Response, json: object }) => void)|string
    /**
     * Fired after applying filters to the store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Collection} event.filters Filters used by this Store
     * @param {Model[]} event.removed The records which were filtered out by the action.
     * @param {Model[]} event.added The records which were filtered back in by the action.
     * @param {Model[]} event.records Filtered records
     */
    onFilter: ((event: { source: Store, filters: Collection, removed: Model[], added: Model[], records: Model[] }) => void)|string
    /**
     * Fired when grouping changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Grouper[]} event.groupers Applied groupers
     * @param {Model[]} event.records Grouped records
     */
    onGroup: ((event: { source: Store, groupers: Grouper[], records: Model[] }) => void)|string
    /**
     * Fired when the id of a record has changed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {string|number} event.oldValue Old id
     * @param {string|number} event.value New id
     */
    onIdChange: ((event: { source: Store, record: Model, oldValue: string|number, value: string|number }) => void)|string
    /**
     * Fired after tasks in the tree are indented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were indented
     */
    onIndent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired on successful load
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object[]} event.data Data loaded
     * @param {Response} event.response the `Response` object
     * @param {object} event.json The decoded response object.
     */
    onLoad: ((event: { source: Store, data: object[], response: Response, json: object }) => void)|string
    /**
     * Fired on successful load of remote child nodes for a tree node.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object[]} event.data Data loaded
     * @param {object} event.json The decoded response object.
     */
    onLoadChildren: ((event: { source: Store, data: object[], json: object }) => void)|string
    /**
     * Fired when loading of remote child nodes into a tree node is beginning. This is not cancelable. Parameters in the
     * event may still be mutated at this stage.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadChildrenStart: ((event: { source: Store, params: object }) => void)|string
    /**
     * Fired when a range of events is requested from the [getEvents](https://bryntum.com/products/scheduler/docs#Scheduler/data/mixin/GetEventsMixin#function-getEvents) method.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/EventStore#event-loadDateRange)
     * @param {object} event Event object
     * @param {EventStore} event.source This EventStore
     * @param {object} event.old The old date range
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     * @param {boolean} event.changed `true` if the date range is different from the last time a request was made.
     */
    onLoadDateRange: ((event: { source: EventStore, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date }, changed: boolean }) => void)|string
    /**
     * Fired when loading is beginning. This is not cancelable. Parameters in the event may still be
     * mutated at this stage.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadStart: ((event: { source: Store, params: object }) => void)|string
    /**
     * Fired when a block of records has been moved within this Store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record (DEPRECATED) The first record moved (The [move](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/StoreCRUD#function-move) API now accepts an array of records to move).
     * @param {Model[]} event.records The records moved.
     * @param {number} event.from The index from which the record was removed (applicable only for flat store).
     * @param {number} event.to The index at which the record was inserted (applicable only for flat store).
     * @param {Model} event.newParent The new parent record for the dragged records (applicable only for tree stores)
     * @param {Model[]} event.oldParents The old parent records for the dragged records (applicable only for move operations in tree stores)
     */
    onMove: ((event: { source: Store, record: Model, records: Model[], from: number, to: number, newParent?: Model, oldParents?: Model[] }) => void)|string
    /**
     * Fired after tasks in the tree are outdented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were outdented
     */
    onOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Data in the store has completely changed, such as by a filter, or sort or load operation.
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {boolean} event.batch Flag set to `true` when the refresh is triggered by ending a batch
     * @param {'dataset'|'sort'|'clearchanges'|'filter'|'create'|'update'|'delete'|'group'} event.action Name of action which triggered the change. May be one of the options listed above.
     */
    onRefresh: ((event: { source: Store, batch: boolean, action: 'dataset'|'sort'|'clearchanges'|'filter'|'create'|'update'|'delete'|'group' }) => void)|string
    /**
     * Fired when one or more records are removed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Array of removed records. In case of tree store, if branch is removed, only branch root is returned
     * @param {Model[]} event.allRecords Flat array of all removed records. In case of tree store, if branch is removed, all removed records are returned, not only branch root
     * @param {Model} event.parent If due to a [removeChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-removeChild) call, this is the parent node removed from. Only applicable when removing a single tree node.
     * @param {number} event.index Visible index at which record was removed. In case the record was removed from a collapsed branch, -1 is returned. For tree store, this is only provided when removing a single node.
     * @param {boolean} event.isChild Flag which is set to true if the record was removed from a parent record
     * @param {boolean} event.isCollapse Flag which is set to true if records were removed from the store by collapsing parent
     * @param {boolean} event.isMove Passed as `true` if the remove was part of a move operation within this Store.
     */
    onRemove: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, isChild?: boolean, isCollapse?: boolean, isMove?: boolean }) => void)|string
    /**
     * Fired after removing all records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onRemoveAll: ((event: { source: Store }) => void)|string
    /**
     * Fired when the root node is set
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.oldRoot The old root node.
     * @param {Model} event.rootNode The new root node.
     */
    onRootChange: ((event: { source: Store, oldRoot: Model, rootNode: Model }) => void)|string
    /**
     * Fired after sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Sorted records
     */
    onSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fired when a record is modified
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {object} event.changes Modification data
     */
    onUpdate: ((event: { source: Store, record: Model, changes: object }) => void)|string
}

/**
 * A store holding all the [events](https://bryntum.com/products/scheduler/docs#Scheduler/model/EventModel) to be rendered into a [Scheduler](https://bryntum.com/products/scheduler/docs#Scheduler/view/Scheduler).
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/EventStore)
 */
export class EventStore extends AjaxStore {
    /**
     * Returns the assignment store of the project this entity belongs to.
     */
    readonly assignmentStore: AssignmentStore
    /**
     * Applies a new dataset to the EventStore. Use it to plug externally fetched data into the store.
     */
    data: Partial<EventModelConfig>[]
    /**
     * Returns the dependency store of the project this entity belongs to.
     */
    readonly dependencyStore: DependencyStore
    /**
     * Returns the event store of the project this entity belongs to.
     */
    readonly eventStore: EventStore
    /**
     * Class used to represent records. Defaults to class EventModel.
     */
    modelClass: typeof EventModel
    /**
     * Returns the project this entity belongs to.
     */
    readonly project: SchedulerProjectModel
    /**
     * Returns the resource store of the project this entity belongs to.
     */
    readonly resourceStore: ResourceStore
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Added records. In case of tree store, if branch is added, only branch root is returned
     * @param {Model[]} event.allRecords Flat list of all added records. In case of tree store, if branch is added, all new records are returned, not only branch root
     * @param {Model} event.parent If due to an [appendChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-appendChild) call, this is the parent node added to.
     * @param {number} event.index Insertion point in the store's [Collection](https://bryntum.com/products/taskboard/docs/api/Core/data/Store#config-storage).
     * @param {number} event.oldIndex Not used for tree stores. The index of the first record moved.
     * @param {boolean} event.isChild Flag which is set to true if the records are added to a parent record
     * @param {boolean} event.isExpand Flag which is set to true if records are added to the store by expanding parent
     * @param {object} event.isMove An object keyed by the ids of the records which were moved from another position in the store, or from another parent node in the store. The ids of moved records will be property names with a value `true`.
     */
    onAdd: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, oldIndex?: number, isChild?: boolean, isExpand?: boolean, isMove?: object }) => void)|string
    /**
     * Fired before records are added to this store by the [add](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/StoreCRUD#function-add) or [insert](#Core/data/mixin/StoreCRUD#function-insert). In a tree
     * store, also fired by [appendChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-appendChild) and
     * [insertChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-insertChild). The add or insert may be vetoed by returning `false`
     * from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be added
     * @param {Model} event.parent The parent node when using a tree store
     */
    onBeforeAdd: ((event: { source: Store, records: Model[], parent: Model }) => boolean|void)|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onBeforeCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     * @param {object} event Event object
     * @param {Store|any} event.source The
     * @param {(Model|any)[]} event.records The nodes to indent.
     */
    onBeforeIndent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     * @param {object} event Event object
     * @param {Store|any} event.source This store
     * @param {(Model|any)[]} event.records Nodes to be outdented
     */
    onBeforeOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before records are removed from this store by the [remove](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/StoreCRUD#function-remove) or [removeAll](#Core/data/mixin/StoreCRUD#function-removeAll).
     * Also fired when removing a child record in a tree store using [removeChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-removeChild).
     * The remove may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be removed.
     * @param {Model} event.parent The record from which children are being removed when using a tree store. Only provided when removing a single node.
     * @param {boolean} event.isMove This flag is `true` if the child node is being removed by [appendChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-appendChild) to be moved *within the same tree*.
     * @param {boolean} event.removingAll This flag is `true` if the operation is removing the store's entire data set.
     */
    onBeforeRemove: ((event: { source: Store, records: Model[], parent: Model, isMove: boolean, removingAll: boolean }) => boolean|void)|string
    /**
     * Fired before sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Records to sort
     */
    onBeforeSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/EventStore#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired after committing changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired after applying filters to the store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Collection} event.filters Filters used by this Store
     * @param {Model[]} event.removed The records which were filtered out by the action.
     * @param {Model[]} event.added The records which were filtered back in by the action.
     * @param {Model[]} event.records Filtered records
     */
    onFilter: ((event: { source: Store, filters: Collection, removed: Model[], added: Model[], records: Model[] }) => void)|string
    /**
     * Fired when grouping changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Grouper[]} event.groupers Applied groupers
     * @param {Model[]} event.records Grouped records
     */
    onGroup: ((event: { source: Store, groupers: Grouper[], records: Model[] }) => void)|string
    /**
     * Fired after tasks in the tree are indented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were indented
     */
    onIndent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired when a range of events is requested from the [getEvents](https://bryntum.com/products/scheduler/docs#Scheduler/data/mixin/GetEventsMixin#function-getEvents) method.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/EventStore#event-loadDateRange)
     * @param {object} event Event object
     * @param {EventStore} event.source This EventStore
     * @param {object} event.old The old date range
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     * @param {boolean} event.changed `true` if the date range is different from the last time a request was made.
     */
    onLoadDateRange: ((event: { source: EventStore, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date }, changed: boolean }) => void)|string
    /**
     * Fired after tasks in the tree are outdented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were outdented
     */
    onOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired when one or more records are removed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Array of removed records. In case of tree store, if branch is removed, only branch root is returned
     * @param {Model[]} event.allRecords Flat array of all removed records. In case of tree store, if branch is removed, all removed records are returned, not only branch root
     * @param {Model} event.parent If due to a [removeChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-removeChild) call, this is the parent node removed from. Only applicable when removing a single tree node.
     * @param {number} event.index Visible index at which record was removed. In case the record was removed from a collapsed branch, -1 is returned. For tree store, this is only provided when removing a single node.
     * @param {boolean} event.isChild Flag which is set to true if the record was removed from a parent record
     * @param {boolean} event.isCollapse Flag which is set to true if records were removed from the store by collapsing parent
     * @param {boolean} event.isMove Passed as `true` if the remove was part of a move operation within this Store.
     */
    onRemove: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, isChild?: boolean, isCollapse?: boolean, isMove?: boolean }) => void)|string
    /**
     * Fired after removing all records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onRemoveAll: ((event: { source: Store }) => void)|string
    /**
     * Fired after sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Sorted records
     */
    onSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<EventStoreConfig>} config
     */
    constructor(config?: Partial<EventStoreConfig>);
    /**
     * Add events to the store.
     * @param {EventModel|EventModel[]|Partial<EventModelConfig>|Partial<EventModelConfig>[]} records Array of records/data or a single record/data to add to store
     * @param {boolean} silent Specify `true` to suppress events
     */
    add(records: EventModel|EventModel[]|Partial<EventModelConfig>|Partial<EventModelConfig>[], silent?: boolean): EventModel[];
    /**
     * Add events to the store and triggers calculations directly after. Await this function to have up to date data on
     * the added events.
     * @param {EventModel|EventModel[]|Partial<EventModelConfig>|Partial<EventModelConfig>[]} records Array of records/data or a single record/data to add to store
     * @param {boolean} silent Specify `true` to suppress events
     */
    addAsync(records: EventModel|EventModel[]|Partial<EventModelConfig>|Partial<EventModelConfig>[], silent?: boolean): Promise<EventModel[]>;
    /**
     * Appends a new record to the store
     * @param {EventModel} record The record to append to the store
     */
    append(record: EventModel): void;
    /**
     * Creates and adds assignment record for a given event and a resource.
     * @param {EventModel|string|number} event
     * @param {ResourceModel|string|number|ResourceModel[]|string[]|number[]} resource The resource(s) to assign to the event
     * @param {boolean} removeExistingAssignments `true` to first remove existing assignments
     */
    assignEventToResource(event: EventModel|string|number, resource: ResourceModel|string|number|ResourceModel[]|string[]|number[], removeExistingAssignments?: boolean): AssignmentModel[];
    /**
     * Calls the supplied iterator function once for every scheduled event, providing these arguments
     * @param {Function} fn iterator function
     * @param {object} thisObj `this` reference for the function
     */
    forEachScheduledEvent(fn: Function, thisObj?: object): void;
    /**
     * Returns all assignments for a given event.
     * @param {EventModel|string|number} event
     */
    getAssignmentsForEvent(event: EventModel|string|number): AssignmentModel[];
    /**
     * Returns all assignments for a given resource.
     * @param {ResourceModel|string|number} resource
     */
    getAssignmentsForResource(resource: ResourceModel|string|number): AssignmentModel[];
    /**
     * Returns a `Map`, keyed by `YYYY-MM-DD` date keys containing event counts for all the days
     * between the passed `startDate` and `endDate`. Occurrences of recurring events are included.
     * @param {object} options An options object determining which events to return
     */
    getEventCounts(options: {
        startDate: Date
        endDate?: Date
    }): void;
    /**
     * Returns an array of events for the date range specified by the `startDate` and `endDate` options.
     * @param {object} options An options object determining which events to return
     */
    getEvents(options: {
        date?: Date
        startDate: Date
        endDate?: Date
        resourceRecord?: ResourceModel
        filter?: Function
        ignoreFilters?: boolean
        includeOccurrences?: boolean
        allowPartial?: boolean
        startOnly?: boolean
        onlyAssigned?: boolean
        dateMap?: boolean|Map<any, any>
    }): EventModel[]|Map<any, any>;
    /**
     * Returns all events assigned to a resource.
     * *NOTE:* this does not include occurrences of recurring events. Use the
     * [getEvents](https://bryntum.com/products/scheduler/docs#Scheduler/data/mixin/GetEventsMixin#function-getEvents) API to include occurrences of recurring events.
     * @param {ResourceModel|string|number} resource Resource or resource id.
     */
    getEventsForResource(resource: ResourceModel|string|number): EventModel[];
    /**
     * Returns all the recurring events.
     */
    getRecurringEvents(): EventModel[];
    /**
     * Returns all the recurring timespans.
     */
    getRecurringTimeSpans(): TimeSpan[];
    /**
     * Returns all resources assigned to an event.
     * @param {EventModel|string|number} event
     */
    getResourcesForEvent(event: EventModel|string|number): ResourceModel[];
    /**
     * Returns an object defining the earliest start date and the latest end date of all the events in the store.
     */
    getTotalTimeSpan(): object;
    /**
     * Checks if a date range is allocated or not for a given resource.
     * @param {Date} start The start date
     * @param {Date} end The end date
     * @param {EventModel|null} excludeEvent An event to exclude from the check (or null)
     * @param {ResourceModel} resource The resource
     */
    isDateRangeAvailable(start: Date, end: Date, excludeEvent: EventModel|null, resource: ResourceModel): boolean;
    /**
     * Checks whether an event is assigned to a resource.
     * @param {EventModel|string|number} event
     * @param {ResourceModel|string|number} resource
     */
    isEventAssignedToResource(event: EventModel|string|number, resource: ResourceModel|string|number): boolean;
    /**
     * Checks if given event record is persistable. By default it always is, override EventModels `isPersistable` if you
     * need custom logic.
     * @param {EventModel} event
     */
    isEventPersistable(event: EventModel): boolean;
    /**
     * Applies a new dataset to the EventStore and triggers calculations directly after. Use it to plug externally
     * fetched data into the store.
     * @param {Partial<EventModelConfig>[]} data Array of EventModel data objects
     */
    loadDataAsync(data: Partial<EventModelConfig>[]): Promise<void>;
    /**
     * Reassigns an event from an old resource to a new resource
     * @param {EventModel} event An event or id of the event to reassign
     * @param {ResourceModel|ResourceModel[]} oldResource A resource or id to unassign from
     * @param {ResourceModel|ResourceModel[]} newResource A resource or id to assign to
     */
    reassignEventFromResourceToResource(event: EventModel, oldResource: ResourceModel|ResourceModel[], newResource: ResourceModel|ResourceModel[]): void;
    /**
     * Removes all assignments for given event
     * @param {EventModel|string|number} event
     */
    removeAssignmentsForEvent(event: EventModel|string|number): void;
    /**
     * Removes all assignments for given resource
     * @param {ResourceModel|string|number} resource
     */
    removeAssignmentsForResource(resource: ResourceModel|string|number): void;
    /**
     * Removes assignment record for a given event and a resource.
     * @param {EventModel|string|number} event
     * @param {ResourceModel|string|number} resource
     */
    unassignEventFromResource(event: EventModel|string|number, resource: ResourceModel|string|number): void;
}

/**
 * Type with configuration options for [ResourceStore](https://bryntum.com/products/grid/docs/api/Scheduler/data/ResourceStore) class.
 */
type ResourceStoreConfig = {
    /**
     * Specify `false` to prevent loading records without ids, a good practise to enforce when syncing with a
     * backend.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceStore#config-allowNoId)
     */
    allowNoId: boolean
    /**
     * Specifies target to filter and sort after applying changeset:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceStore#config-applyChangesetFilterSortTarget)
     */
    applyChangesetFilterSortTarget: 'changes'|'none'
    /**
     * Commit changes automatically
     */
    autoCommit: boolean
    /**
     * True to initiate a load when the store is instantiated
     */
    autoLoad: boolean
    /**
     * Automatically detect from set data if used as tree store or flat store
     */
    autoTree: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceStore#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceStore#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Array of field names that should trigger filtering of chained store when the fields are updated.
     */
    chainedFields: string[]
    /**
     * Function used to filter records in the masterStore into a chained store. If not provided,
     * all records from the masterStore will be included in the chained store.
     * Return `true` to include the passed record, or a `false` to exclude it.
     * @param {Model} record
     * @returns {boolean}
     */
    chainedFilterFn: (record: Model) => boolean
    /**
     * Url to post newly created records to.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceStore#config-createUrl)
     */
    createUrl: string
    /**
     * Raw data to load initially.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceStore#config-data)
     */
    data: object[]|Model[]
    /**
     * Url for deleting records.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceStore#config-deleteUrl)
     */
    deleteUrl: string
    /**
     * Method names calls to which should be relayed to master store.
     */
    doRelayToMaster: string[]
    /**
     * Method names calls to which shouldn't be relayed to master store.
     */
    dontRelayToMaster: string
    /**
     * If true, collapsed records in original tree will be excluded from the chained store.
     */
    excludeCollapsedRecords: boolean
    /**
     * An object containing the Fetch options to pass to each server request issued by this store. Use this to
     * control if credentials are sent and other options, read more at
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_request_options).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceStore#config-fetchOptions)
     */
    fetchOptions: object
    /**
     * An array of field definitions used to create a [Model](https://bryntum.com/products/taskboard/docs/api/Core/data/Model) (modelClass) subclass. Optional.
     * If the Model already has fields defined, these fields will extend those.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceStore#config-fields)
     */
    fields: (string|Partial<ModelFieldConfig>|DataField)[]
    /**
     * The name of the HTTP parameter to use to pass any encoded filters when loading data from the server and a
     * filtered response is required.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceStore#config-filterParamName)
     */
    filterParamName: string
    /**
     * Specify one or more [CollectionFilter](https://bryntum.com/products/taskboard/docs/api/Core/util/CollectionFilter) config objects to apply initially.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceStore#config-filters)
     */
    filters: Partial<CollectionFilterConfig>|Partial<CollectionFilterConfig>[]
    /**
     * This flag prevents firing of 'remove' event when moving a node in the tree. In 6.0 this will be the default
     * behavior and this flag will be removed.
     */
    fireRemoveEventForMoveAction: boolean
    /**
     * Initial groupers, specify to have store grouped automatically after initially setting data
     */
    groupers: Grouper[]
    /**
     * A string keyed object containing the HTTP headers to add to each server request issued by this store.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceStore#config-headers)
     */
    headers: Record<string, string>
    /**
     * The HTTP methods to use for CRUD requests when [useRestfulMethods](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#config-useRestfulMethods) is enabled.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceStore#config-httpMethods)
     */
    httpMethods: HttpMethods
    /**
     * Store's unique identifier. When set the store is added to a store map accessible through
     * `Store.getStore(id)`.
     */
    id: string|number
    /**
     * Set to `false` to not record transaction during `applyChangeset` call
     */
    ignoreRemoteChangesInSTM: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceStore#config-listeners)
     */
    listeners: object
    /**
     * Master store that a chained store gets its records from.
     */
    masterStore: Store
    /**
     * Class used to represent records in the store, should be a subclass of [Model](https://bryntum.com/products/taskboard/docs/api/Core/data/Model). Only
     * applies when supplying data to the store (load, add), any supplied record instances are kept as is.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceStore#config-modelClass)
     */
    modelClass: typeof Model
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>one based</strong> page number
     * required.
     */
    pageParamName: string
    /**
     * When paging of data is requested by setting *either* the [pageParamName](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#config-pageParamName) *or* the
     * [pageStartParamName](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#config-pageStartParamName), this is the value to send in the [pageSizeParamName](#Core/data/AjaxStore#config-pageSizeParamName).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceStore#config-pageSize)
     */
    pageSize: number
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageSizeParamName: string
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageStartParamName: string
    /**
     * An object containing key/value pairs that are passed on the request query string.
     */
    params: object
    /**
     * The name of the HTTP parameter passed to this Store's [readUrl](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#config-readUrl) to indicate the node `id`
     * to load when loading child nodes on demand if the node being expanded was created with data containing
     * `children: true`.
     */
    parentIdParamName: string
    /**
     * Url to read data from.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceStore#config-readUrl)
     */
    readUrl: string
    /**
     * Specify true to reapply filters when a record is added to the store.
     */
    reapplyFilterOnAdd: boolean
    /**
     * Specify true to reapply filters when a record is updated in the store.
     */
    reapplyFilterOnUpdate: boolean
    /**
     * Specify true to sort this store after records are added.
     */
    reapplySortersOnAdd: boolean
    /**
     * The property name in JSON responses from the server that contains the data for the records
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceStore#config-responseDataProperty)
     */
    responseDataProperty: string
    /**
     * The optional property name in JSON responses from the server that contains a boolean
     * success/fail status.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceStore#config-responseSuccessProperty)
     */
    responseSuccessProperty: string
    /**
     * The property name in JSON responses from the server that contains the dataset total size
     * <strong>when this store [is paged](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#property-isPaged)</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceStore#config-responseTotalProperty)
     */
    responseTotalProperty: string
    /**
     * Set this flag to true if you are filtering remote using restful URLs (e.g.
     * https://nominatim.openstreetmap.org/search/paris?format=json)
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceStore#config-restfulFilter)
     */
    restfulFilter: boolean
    /**
     * Specify `true` to send payloads as form data, `false` to send as regular JSON.
     */
    sendAsFormData: boolean
    /**
     * The name of the HTTP parameter to use to pass any encoded sorters when loading data from the server and a
     * sorted response is required.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceStore#config-sortParamName)
     */
    sortParamName: string
    /**
     * Initial sorters, format is:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceStore#config-sorters)
     */
    sorters: Sorter[]|string[]
    /**
     * To have all groups <strong>initially loaded</strong> start collapsed, configure this as `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceStore#config-startGroupsCollapsed)
     */
    startGroupsCollapsed: boolean
    /**
     * Reference to STM manager
     */
    stm: StateTrackingManager
    /**
     * A [Collection](https://bryntum.com/products/taskboard/docs/api/Core/util/Collection), or Collection config object
     * to use to contain this Store's constituent records.
     */
    storage: Collection|Partial<CollectionConfig>
    /**
     * Store class to use when creating the store when it is a part of a
     * [CrudManager](https://bryntum.com/products/scheduler/docs/api/Scheduler/data/CrudManager).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceStore#config-storeClass)
     */
    storeClass: typeof Store
    /**
     * Configure with `true` to sync loaded data instead of replacing existing with a new dataset.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceStore#config-syncDataOnLoad)
     */
    syncDataOnLoad: boolean|SyncDataOnLoadOptions
    /**
     * Set to `true` to on load transform a flat dataset with raw objects containing `parentId` into the format
     * expected for tree data.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceStore#config-transformFlatData)
     */
    transformFlatData: boolean
    /**
     * `true` to act as a tree store.
     */
    tree: boolean
    /**
     * Url to post record modifications to.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceStore#config-updateUrl)
     */
    updateUrl: string
    /**
     * Use `localeCompare()` when sorting, which lets the browser sort in a locale specific order. Set to `true`,
     * a locale string or a locale config to enable.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceStore#config-useLocaleSort)
     */
    useLocaleSort: boolean|string|object
    /**
     * Retools the loaded data objects instead of making shallow copies of them. This increases performance but
     * pollutes the incoming data and does not allow remapping of fields (dataSource).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceStore#config-useRawData)
     * @param {boolean} disableDuplicateIdCheck Data must not contain duplicate ids, check is bypassed.
     * @param {boolean} disableDefaultValue Default values will not be applied to record fields.
     * @param {boolean} disableTypeConversion No type conversions will be performed on record data.
     */
    useRawData: boolean|object
    /**
     * Set to ´true´ to use restful [httpMethods](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#config-httpMethods)
     */
    useRestfulMethods: boolean
    /**
     * Verify that loaded data does not contain any generated ids. If it does, a warning is logged on console.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceStore#config-verifyNoGeneratedIds)
     */
    verifyNoGeneratedIds: boolean
    /**
     * Specify `true` to send all model fields when committing modified records (as opposed to just the
     * modified fields)
     */
    writeAllFields: boolean
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Added records. In case of tree store, if branch is added, only branch root is returned
     * @param {Model[]} event.allRecords Flat list of all added records. In case of tree store, if branch is added, all new records are returned, not only branch root
     * @param {Model} event.parent If due to an [appendChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-appendChild) call, this is the parent node added to.
     * @param {number} event.index Insertion point in the store's [Collection](https://bryntum.com/products/taskboard/docs/api/Core/data/Store#config-storage).
     * @param {number} event.oldIndex Not used for tree stores. The index of the first record moved.
     * @param {boolean} event.isChild Flag which is set to true if the records are added to a parent record
     * @param {boolean} event.isExpand Flag which is set to true if records are added to the store by expanding parent
     * @param {object} event.isMove An object keyed by the ids of the records which were moved from another position in the store, or from another parent node in the store. The ids of moved records will be property names with a value `true`.
     */
    onAdd: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, oldIndex?: number, isChild?: boolean, isExpand?: boolean, isMove?: object }) => void)|string
    /**
     * Fired when a temporary record with the [isCreating](https://bryntum.com/products/taskboard/docs/api/Core/data/Model#property-isCreating) property set
     * has been confirmed as a part of this store by having its [isCreating](https://bryntum.com/products/taskboard/docs/api/Core/data/Model#property-isCreating)
     * property cleared.
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {Model} event.record The record confirmed as added.
     */
    onAddConfirmed: ((event: { source: Store, record: Model }) => void)|string
    /**
     * Fired after any remote request has finished whether successfully or unsuccessfully.
     * @param {object} event Event object
     * @param {boolean} event.exception `true`. *Only present if the request triggered an exception.*
     * @param {'create'|'read'|'update'|'delete'} event.action Action that has finished, `'create'`, `'read'`, `'update'` or `'delete'`
     * @param {'network'|'failure'} event.exceptionType The type of failure, `'network'` or `'server'`. <em>Only present if the request triggered an exception.</em>
     * @param {Response} event.response The `Response` object
     * @param {object} event.json The decoded response object if there was no `'network'` exception.
     */
    onAfterRequest: ((event: { exception: boolean, action: 'create'|'read'|'update'|'delete', exceptionType: 'network'|'failure', response: Response, json: object }) => void)|string
    /**
     * Fired before records are added to this store by the [add](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/StoreCRUD#function-add) or [insert](#Core/data/mixin/StoreCRUD#function-insert). In a tree
     * store, also fired by [appendChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-appendChild) and
     * [insertChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-insertChild). The add or insert may be vetoed by returning `false`
     * from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be added
     * @param {Model} event.parent The parent node when using a tree store
     */
    onBeforeAdd: ((event: { source: Store, records: Model[], parent: Model }) => boolean|void)|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onBeforeCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     * @param {object} event Event object
     * @param {Store|any} event.source The
     * @param {(Model|any)[]} event.records The nodes to indent.
     */
    onBeforeIndent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before loading starts. Allows altering parameters and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoad: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * Fired before loading of remote child nodes of a tree node starts. Allows altering parameters and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoadChildren: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * When the store [is paged](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#property-isPaged), this is fired before loading a page and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoadPage: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     * @param {object} event Event object
     * @param {Store|any} event.source This store
     * @param {(Model|any)[]} event.records Nodes to be outdented
     */
    onBeforeOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before records are removed from this store by the [remove](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/StoreCRUD#function-remove) or [removeAll](#Core/data/mixin/StoreCRUD#function-removeAll).
     * Also fired when removing a child record in a tree store using [removeChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-removeChild).
     * The remove may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be removed.
     * @param {Model} event.parent The record from which children are being removed when using a tree store. Only provided when removing a single node.
     * @param {boolean} event.isMove This flag is `true` if the child node is being removed by [appendChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-appendChild) to be moved *within the same tree*.
     * @param {boolean} event.removingAll This flag is `true` if the operation is removing the store's entire data set.
     */
    onBeforeRemove: ((event: { source: Store, records: Model[], parent: Model, isMove: boolean, removingAll: boolean }) => boolean|void)|string
    /**
     * Fired before any remote request is initiated.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing key/value pairs that are passed on the request query string
     * @param {object} event.body The body of the request to be posted to the server.
     * @param {'create'|'read'|'update'|'delete'} event.action Action that is making the request, `'create'`, `'read'`, `'update'` or `'delete'`
     */
    onBeforeRequest: ((event: { source: Store, params: object, body: object, action: 'create'|'read'|'update'|'delete' }) => void)|string
    /**
     * Fired before sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Records to sort
     */
    onBeforeSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fired before record is modified in this store.
     * Modification may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {object} event.changes Modification data
     */
    onBeforeUpdate: ((event: { source: Store, record: Model, changes: object }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceStore#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Data in the store was changed. This is a catch-all event which is fired for all changes
     * which take place to the store's data.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceStore#event-change)
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} event.action Name of action which triggered the change. May be one of the options listed above
     * @param {Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onChange: ((event: { source: Store, action: 'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Fired after committing changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fired after committing added records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitAdded: ((event: { source: Store }) => void)|string
    /**
     * Fired after committing modified records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitModified: ((event: { source: Store }) => void)|string
    /**
     * Fired after committing removed records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitRemoved: ((event: { source: Store }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when a remote request fails, either at the network level, or the server returns a failure, or an invalid
     * response.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceStore#event-exception)
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {boolean} event.exception `true`
     * @param {'create'|'read'|'update'|'delete'|'commit'} event.action Action that failed, `'create'`, `'read'`, `'update'` or `'delete'`. May also be fired with '`commit'` to indicate the failure of an aggregated `create`, `update` and `delete` operation. In this case, the event will contain a property for each operation of the commit named `'create'`, `'update'` and `'delete'`, each containing the individual `exception` events.
     * @param {'network'|'failure'} event.exceptionType The type of failure, `'network'` or `'server'`
     * @param {Response} event.response the `Response` object
     * @param {object} event.json The decoded response object *if the exceptionType is `'server'`*
     */
    onException: ((event: { source: Store, exception: boolean, action: 'create'|'read'|'update'|'delete'|'commit', exceptionType: 'network'|'failure', response: Response, json: object }) => void)|string
    /**
     * Fired after applying filters to the store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Collection} event.filters Filters used by this Store
     * @param {Model[]} event.removed The records which were filtered out by the action.
     * @param {Model[]} event.added The records which were filtered back in by the action.
     * @param {Model[]} event.records Filtered records
     */
    onFilter: ((event: { source: Store, filters: Collection, removed: Model[], added: Model[], records: Model[] }) => void)|string
    /**
     * Fired when grouping changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Grouper[]} event.groupers Applied groupers
     * @param {Model[]} event.records Grouped records
     */
    onGroup: ((event: { source: Store, groupers: Grouper[], records: Model[] }) => void)|string
    /**
     * Fired when the id of a record has changed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {string|number} event.oldValue Old id
     * @param {string|number} event.value New id
     */
    onIdChange: ((event: { source: Store, record: Model, oldValue: string|number, value: string|number }) => void)|string
    /**
     * Fired after tasks in the tree are indented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were indented
     */
    onIndent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired on successful load
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object[]} event.data Data loaded
     * @param {Response} event.response the `Response` object
     * @param {object} event.json The decoded response object.
     */
    onLoad: ((event: { source: Store, data: object[], response: Response, json: object }) => void)|string
    /**
     * Fired on successful load of remote child nodes for a tree node.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object[]} event.data Data loaded
     * @param {object} event.json The decoded response object.
     */
    onLoadChildren: ((event: { source: Store, data: object[], json: object }) => void)|string
    /**
     * Fired when loading of remote child nodes into a tree node is beginning. This is not cancelable. Parameters in the
     * event may still be mutated at this stage.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadChildrenStart: ((event: { source: Store, params: object }) => void)|string
    /**
     * Fired when loading is beginning. This is not cancelable. Parameters in the event may still be
     * mutated at this stage.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadStart: ((event: { source: Store, params: object }) => void)|string
    /**
     * Fired when a block of records has been moved within this Store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record (DEPRECATED) The first record moved (The [move](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/StoreCRUD#function-move) API now accepts an array of records to move).
     * @param {Model[]} event.records The records moved.
     * @param {number} event.from The index from which the record was removed (applicable only for flat store).
     * @param {number} event.to The index at which the record was inserted (applicable only for flat store).
     * @param {Model} event.newParent The new parent record for the dragged records (applicable only for tree stores)
     * @param {Model[]} event.oldParents The old parent records for the dragged records (applicable only for move operations in tree stores)
     */
    onMove: ((event: { source: Store, record: Model, records: Model[], from: number, to: number, newParent?: Model, oldParents?: Model[] }) => void)|string
    /**
     * Fired after tasks in the tree are outdented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were outdented
     */
    onOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Data in the store has completely changed, such as by a filter, or sort or load operation.
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {boolean} event.batch Flag set to `true` when the refresh is triggered by ending a batch
     * @param {'dataset'|'sort'|'clearchanges'|'filter'|'create'|'update'|'delete'|'group'} event.action Name of action which triggered the change. May be one of the options listed above.
     */
    onRefresh: ((event: { source: Store, batch: boolean, action: 'dataset'|'sort'|'clearchanges'|'filter'|'create'|'update'|'delete'|'group' }) => void)|string
    /**
     * Fired when one or more records are removed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Array of removed records. In case of tree store, if branch is removed, only branch root is returned
     * @param {Model[]} event.allRecords Flat array of all removed records. In case of tree store, if branch is removed, all removed records are returned, not only branch root
     * @param {Model} event.parent If due to a [removeChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-removeChild) call, this is the parent node removed from. Only applicable when removing a single tree node.
     * @param {number} event.index Visible index at which record was removed. In case the record was removed from a collapsed branch, -1 is returned. For tree store, this is only provided when removing a single node.
     * @param {boolean} event.isChild Flag which is set to true if the record was removed from a parent record
     * @param {boolean} event.isCollapse Flag which is set to true if records were removed from the store by collapsing parent
     * @param {boolean} event.isMove Passed as `true` if the remove was part of a move operation within this Store.
     */
    onRemove: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, isChild?: boolean, isCollapse?: boolean, isMove?: boolean }) => void)|string
    /**
     * Fired after removing all records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onRemoveAll: ((event: { source: Store }) => void)|string
    /**
     * Fired when the root node is set
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.oldRoot The old root node.
     * @param {Model} event.rootNode The new root node.
     */
    onRootChange: ((event: { source: Store, oldRoot: Model, rootNode: Model }) => void)|string
    /**
     * Fired after sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Sorted records
     */
    onSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fired when a record is modified
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {object} event.changes Modification data
     */
    onUpdate: ((event: { source: Store, record: Model, changes: object }) => void)|string
}

/**
 * A store holding all the [resources](https://bryntum.com/products/scheduler/docs#Scheduler/model/ResourceModel) to be rendered into a
 * [Scheduler](https://bryntum.com/products/scheduler/docs#Scheduler/view/Scheduler).
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceStore)
 */
export class ResourceStore extends AjaxStore {
    /**
     * Returns the assignment store of the project this entity belongs to.
     */
    readonly assignmentStore: AssignmentStore
    /**
     * Applies a new dataset to the ResourceStore. Use it to plug externally fetched data into the store.
     */
    data: Partial<ResourceModelConfig>[]
    /**
     * Returns the dependency store of the project this entity belongs to.
     */
    readonly dependencyStore: DependencyStore
    /**
     * Returns the event store of the project this entity belongs to.
     */
    readonly eventStore: EventStore
    /**
     * Returns the project this entity belongs to.
     */
    readonly project: SchedulerProjectModel
    /**
     * Returns the resource store of the project this entity belongs to.
     */
    readonly resourceStore: ResourceStore
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Added records. In case of tree store, if branch is added, only branch root is returned
     * @param {Model[]} event.allRecords Flat list of all added records. In case of tree store, if branch is added, all new records are returned, not only branch root
     * @param {Model} event.parent If due to an [appendChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-appendChild) call, this is the parent node added to.
     * @param {number} event.index Insertion point in the store's [Collection](https://bryntum.com/products/taskboard/docs/api/Core/data/Store#config-storage).
     * @param {number} event.oldIndex Not used for tree stores. The index of the first record moved.
     * @param {boolean} event.isChild Flag which is set to true if the records are added to a parent record
     * @param {boolean} event.isExpand Flag which is set to true if records are added to the store by expanding parent
     * @param {object} event.isMove An object keyed by the ids of the records which were moved from another position in the store, or from another parent node in the store. The ids of moved records will be property names with a value `true`.
     */
    onAdd: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, oldIndex?: number, isChild?: boolean, isExpand?: boolean, isMove?: object }) => void)|string
    /**
     * Fired before records are added to this store by the [add](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/StoreCRUD#function-add) or [insert](#Core/data/mixin/StoreCRUD#function-insert). In a tree
     * store, also fired by [appendChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-appendChild) and
     * [insertChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-insertChild). The add or insert may be vetoed by returning `false`
     * from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be added
     * @param {Model} event.parent The parent node when using a tree store
     */
    onBeforeAdd: ((event: { source: Store, records: Model[], parent: Model }) => boolean|void)|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onBeforeCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     * @param {object} event Event object
     * @param {Store|any} event.source The
     * @param {(Model|any)[]} event.records The nodes to indent.
     */
    onBeforeIndent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     * @param {object} event Event object
     * @param {Store|any} event.source This store
     * @param {(Model|any)[]} event.records Nodes to be outdented
     */
    onBeforeOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before records are removed from this store by the [remove](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/StoreCRUD#function-remove) or [removeAll](#Core/data/mixin/StoreCRUD#function-removeAll).
     * Also fired when removing a child record in a tree store using [removeChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-removeChild).
     * The remove may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be removed.
     * @param {Model} event.parent The record from which children are being removed when using a tree store. Only provided when removing a single node.
     * @param {boolean} event.isMove This flag is `true` if the child node is being removed by [appendChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-appendChild) to be moved *within the same tree*.
     * @param {boolean} event.removingAll This flag is `true` if the operation is removing the store's entire data set.
     */
    onBeforeRemove: ((event: { source: Store, records: Model[], parent: Model, isMove: boolean, removingAll: boolean }) => boolean|void)|string
    /**
     * Fired before sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Records to sort
     */
    onBeforeSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceStore#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired after committing changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired after applying filters to the store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Collection} event.filters Filters used by this Store
     * @param {Model[]} event.removed The records which were filtered out by the action.
     * @param {Model[]} event.added The records which were filtered back in by the action.
     * @param {Model[]} event.records Filtered records
     */
    onFilter: ((event: { source: Store, filters: Collection, removed: Model[], added: Model[], records: Model[] }) => void)|string
    /**
     * Fired when grouping changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Grouper[]} event.groupers Applied groupers
     * @param {Model[]} event.records Grouped records
     */
    onGroup: ((event: { source: Store, groupers: Grouper[], records: Model[] }) => void)|string
    /**
     * Fired after tasks in the tree are indented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were indented
     */
    onIndent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired after tasks in the tree are outdented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were outdented
     */
    onOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired when one or more records are removed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Array of removed records. In case of tree store, if branch is removed, only branch root is returned
     * @param {Model[]} event.allRecords Flat array of all removed records. In case of tree store, if branch is removed, all removed records are returned, not only branch root
     * @param {Model} event.parent If due to a [removeChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-removeChild) call, this is the parent node removed from. Only applicable when removing a single tree node.
     * @param {number} event.index Visible index at which record was removed. In case the record was removed from a collapsed branch, -1 is returned. For tree store, this is only provided when removing a single node.
     * @param {boolean} event.isChild Flag which is set to true if the record was removed from a parent record
     * @param {boolean} event.isCollapse Flag which is set to true if records were removed from the store by collapsing parent
     * @param {boolean} event.isMove Passed as `true` if the remove was part of a move operation within this Store.
     */
    onRemove: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, isChild?: boolean, isCollapse?: boolean, isMove?: boolean }) => void)|string
    /**
     * Fired after removing all records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onRemoveAll: ((event: { source: Store }) => void)|string
    /**
     * Fired after sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Sorted records
     */
    onSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<ResourceStoreConfig>} config
     */
    constructor(config?: Partial<ResourceStoreConfig>);
    /**
     * Add resources to the store.
     * @param {ResourceModel|ResourceModel[]|Partial<ResourceModelConfig>|Partial<ResourceModelConfig>[]} records Array of records/data or a single record/data to add to store
     * @param {boolean} silent Specify `true` to suppress events
     */
    add(records: ResourceModel|ResourceModel[]|Partial<ResourceModelConfig>|Partial<ResourceModelConfig>[], silent?: boolean): ResourceModel[];
    /**
     * Add resources to the store and triggers calculations directly after. Await this function to have up to date
     * references on the added resources.
     * @param {ResourceModel|ResourceModel[]|Partial<ResourceModelConfig>|Partial<ResourceModelConfig>[]} records Array of records/data or a single record/data to add to store
     * @param {boolean} silent Specify `true` to suppress events
     */
    addAsync(records: ResourceModel|ResourceModel[]|Partial<ResourceModelConfig>|Partial<ResourceModelConfig>[], silent?: boolean): Promise<ResourceModel[]>;
    /**
     * Returns all resources that have no events assigned during the specified time range.
     * @param {Date} startDate Time range start date
     * @param {Date} endDate Time range end date
     */
    getAvailableResources(startDate: Date, endDate: Date): ResourceModel[];
    /**
     * Applies a new dataset to the ResourceStore and triggers calculations directly after. Use it to plug externally
     * fetched data into the store.
     * @param {Partial<ResourceModelConfig>[]} data Array of ResourceModel data objects
     */
    loadDataAsync(data: Partial<ResourceModelConfig>[]): Promise<void>;
}

/**
 * Type with configuration options for [ResourceTimeRangeStore](https://bryntum.com/products/grid/docs/api/Scheduler/data/ResourceTimeRangeStore) class.
 */
type ResourceTimeRangeStoreConfig = {
    /**
     * Specify `false` to prevent loading records without ids, a good practise to enforce when syncing with a
     * backend.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceTimeRangeStore#config-allowNoId)
     */
    allowNoId: boolean
    /**
     * Specifies target to filter and sort after applying changeset:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceTimeRangeStore#config-applyChangesetFilterSortTarget)
     */
    applyChangesetFilterSortTarget: 'changes'|'none'
    /**
     * Commit changes automatically
     */
    autoCommit: boolean
    /**
     * True to initiate a load when the store is instantiated
     */
    autoLoad: boolean
    /**
     * Automatically detect from set data if used as tree store or flat store
     */
    autoTree: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceTimeRangeStore#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceTimeRangeStore#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Array of field names that should trigger filtering of chained store when the fields are updated.
     */
    chainedFields: string[]
    /**
     * Function used to filter records in the masterStore into a chained store. If not provided,
     * all records from the masterStore will be included in the chained store.
     * Return `true` to include the passed record, or a `false` to exclude it.
     * @param {Model} record
     * @returns {boolean}
     */
    chainedFilterFn: (record: Model) => boolean
    /**
     * Url to post newly created records to.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceTimeRangeStore#config-createUrl)
     */
    createUrl: string
    /**
     * Raw data to load initially.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceTimeRangeStore#config-data)
     */
    data: object[]|Model[]
    /**
     * Url for deleting records.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceTimeRangeStore#config-deleteUrl)
     */
    deleteUrl: string
    /**
     * Method names calls to which should be relayed to master store.
     */
    doRelayToMaster: string[]
    /**
     * Method names calls to which shouldn't be relayed to master store.
     */
    dontRelayToMaster: string
    /**
     * If true, collapsed records in original tree will be excluded from the chained store.
     */
    excludeCollapsedRecords: boolean
    /**
     * An object containing the Fetch options to pass to each server request issued by this store. Use this to
     * control if credentials are sent and other options, read more at
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_request_options).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceTimeRangeStore#config-fetchOptions)
     */
    fetchOptions: object
    /**
     * An array of field definitions used to create a [Model](https://bryntum.com/products/taskboard/docs/api/Core/data/Model) (modelClass) subclass. Optional.
     * If the Model already has fields defined, these fields will extend those.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceTimeRangeStore#config-fields)
     */
    fields: (string|Partial<ModelFieldConfig>|DataField)[]
    /**
     * The name of the HTTP parameter to use to pass any encoded filters when loading data from the server and a
     * filtered response is required.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceTimeRangeStore#config-filterParamName)
     */
    filterParamName: string
    /**
     * Specify one or more [CollectionFilter](https://bryntum.com/products/taskboard/docs/api/Core/util/CollectionFilter) config objects to apply initially.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceTimeRangeStore#config-filters)
     */
    filters: Partial<CollectionFilterConfig>|Partial<CollectionFilterConfig>[]
    /**
     * This flag prevents firing of 'remove' event when moving a node in the tree. In 6.0 this will be the default
     * behavior and this flag will be removed.
     */
    fireRemoveEventForMoveAction: boolean
    /**
     * Initial groupers, specify to have store grouped automatically after initially setting data
     */
    groupers: Grouper[]
    /**
     * A string keyed object containing the HTTP headers to add to each server request issued by this store.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceTimeRangeStore#config-headers)
     */
    headers: Record<string, string>
    /**
     * The HTTP methods to use for CRUD requests when [useRestfulMethods](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#config-useRestfulMethods) is enabled.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceTimeRangeStore#config-httpMethods)
     */
    httpMethods: HttpMethods
    /**
     * Store's unique identifier. When set the store is added to a store map accessible through
     * `Store.getStore(id)`.
     */
    id: string|number
    /**
     * Set to `false` to not record transaction during `applyChangeset` call
     */
    ignoreRemoteChangesInSTM: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceTimeRangeStore#config-listeners)
     */
    listeners: object
    /**
     * Master store that a chained store gets its records from.
     */
    masterStore: Store
    /**
     * Class used to represent records in the store, should be a subclass of [Model](https://bryntum.com/products/taskboard/docs/api/Core/data/Model). Only
     * applies when supplying data to the store (load, add), any supplied record instances are kept as is.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceTimeRangeStore#config-modelClass)
     */
    modelClass: typeof Model
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>one based</strong> page number
     * required.
     */
    pageParamName: string
    /**
     * When paging of data is requested by setting *either* the [pageParamName](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#config-pageParamName) *or* the
     * [pageStartParamName](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#config-pageStartParamName), this is the value to send in the [pageSizeParamName](#Core/data/AjaxStore#config-pageSizeParamName).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceTimeRangeStore#config-pageSize)
     */
    pageSize: number
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageSizeParamName: string
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageStartParamName: string
    /**
     * An object containing key/value pairs that are passed on the request query string.
     */
    params: object
    /**
     * The name of the HTTP parameter passed to this Store's [readUrl](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#config-readUrl) to indicate the node `id`
     * to load when loading child nodes on demand if the node being expanded was created with data containing
     * `children: true`.
     */
    parentIdParamName: string
    /**
     * Url to read data from.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceTimeRangeStore#config-readUrl)
     */
    readUrl: string
    /**
     * Specify true to reapply filters when a record is added to the store.
     */
    reapplyFilterOnAdd: boolean
    /**
     * Specify true to reapply filters when a record is updated in the store.
     */
    reapplyFilterOnUpdate: boolean
    /**
     * Specify true to sort this store after records are added.
     */
    reapplySortersOnAdd: boolean
    /**
     * This store should be linked to a ResourceStore to link the time ranges to resources
     */
    resourceStore: ResourceStore
    /**
     * The property name in JSON responses from the server that contains the data for the records
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceTimeRangeStore#config-responseDataProperty)
     */
    responseDataProperty: string
    /**
     * The optional property name in JSON responses from the server that contains a boolean
     * success/fail status.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceTimeRangeStore#config-responseSuccessProperty)
     */
    responseSuccessProperty: string
    /**
     * The property name in JSON responses from the server that contains the dataset total size
     * <strong>when this store [is paged](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#property-isPaged)</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceTimeRangeStore#config-responseTotalProperty)
     */
    responseTotalProperty: string
    /**
     * Set this flag to true if you are filtering remote using restful URLs (e.g.
     * https://nominatim.openstreetmap.org/search/paris?format=json)
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceTimeRangeStore#config-restfulFilter)
     */
    restfulFilter: boolean
    /**
     * Specify `true` to send payloads as form data, `false` to send as regular JSON.
     */
    sendAsFormData: boolean
    /**
     * The name of the HTTP parameter to use to pass any encoded sorters when loading data from the server and a
     * sorted response is required.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceTimeRangeStore#config-sortParamName)
     */
    sortParamName: string
    /**
     * Initial sorters, format is:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceTimeRangeStore#config-sorters)
     */
    sorters: Sorter[]|string[]
    /**
     * To have all groups <strong>initially loaded</strong> start collapsed, configure this as `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceTimeRangeStore#config-startGroupsCollapsed)
     */
    startGroupsCollapsed: boolean
    /**
     * Reference to STM manager
     */
    stm: StateTrackingManager
    /**
     * A [Collection](https://bryntum.com/products/taskboard/docs/api/Core/util/Collection), or Collection config object
     * to use to contain this Store's constituent records.
     */
    storage: Collection|Partial<CollectionConfig>
    /**
     * Store class to use when creating the store when it is a part of a
     * [CrudManager](https://bryntum.com/products/scheduler/docs/api/Scheduler/data/CrudManager).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceTimeRangeStore#config-storeClass)
     */
    storeClass: typeof Store
    /**
     * Configure with `true` to sync loaded data instead of replacing existing with a new dataset.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceTimeRangeStore#config-syncDataOnLoad)
     */
    syncDataOnLoad: boolean|SyncDataOnLoadOptions
    /**
     * Set to `true` to on load transform a flat dataset with raw objects containing `parentId` into the format
     * expected for tree data.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceTimeRangeStore#config-transformFlatData)
     */
    transformFlatData: boolean
    /**
     * `true` to act as a tree store.
     */
    tree: boolean
    /**
     * Url to post record modifications to.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceTimeRangeStore#config-updateUrl)
     */
    updateUrl: string
    /**
     * Use `localeCompare()` when sorting, which lets the browser sort in a locale specific order. Set to `true`,
     * a locale string or a locale config to enable.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceTimeRangeStore#config-useLocaleSort)
     */
    useLocaleSort: boolean|string|object
    /**
     * Retools the loaded data objects instead of making shallow copies of them. This increases performance but
     * pollutes the incoming data and does not allow remapping of fields (dataSource).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceTimeRangeStore#config-useRawData)
     * @param {boolean} disableDuplicateIdCheck Data must not contain duplicate ids, check is bypassed.
     * @param {boolean} disableDefaultValue Default values will not be applied to record fields.
     * @param {boolean} disableTypeConversion No type conversions will be performed on record data.
     */
    useRawData: boolean|object
    /**
     * Set to ´true´ to use restful [httpMethods](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#config-httpMethods)
     */
    useRestfulMethods: boolean
    /**
     * Verify that loaded data does not contain any generated ids. If it does, a warning is logged on console.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceTimeRangeStore#config-verifyNoGeneratedIds)
     */
    verifyNoGeneratedIds: boolean
    /**
     * Specify `true` to send all model fields when committing modified records (as opposed to just the
     * modified fields)
     */
    writeAllFields: boolean
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Added records. In case of tree store, if branch is added, only branch root is returned
     * @param {Model[]} event.allRecords Flat list of all added records. In case of tree store, if branch is added, all new records are returned, not only branch root
     * @param {Model} event.parent If due to an [appendChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-appendChild) call, this is the parent node added to.
     * @param {number} event.index Insertion point in the store's [Collection](https://bryntum.com/products/taskboard/docs/api/Core/data/Store#config-storage).
     * @param {number} event.oldIndex Not used for tree stores. The index of the first record moved.
     * @param {boolean} event.isChild Flag which is set to true if the records are added to a parent record
     * @param {boolean} event.isExpand Flag which is set to true if records are added to the store by expanding parent
     * @param {object} event.isMove An object keyed by the ids of the records which were moved from another position in the store, or from another parent node in the store. The ids of moved records will be property names with a value `true`.
     */
    onAdd: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, oldIndex?: number, isChild?: boolean, isExpand?: boolean, isMove?: object }) => void)|string
    /**
     * Fired when a temporary record with the [isCreating](https://bryntum.com/products/taskboard/docs/api/Core/data/Model#property-isCreating) property set
     * has been confirmed as a part of this store by having its [isCreating](https://bryntum.com/products/taskboard/docs/api/Core/data/Model#property-isCreating)
     * property cleared.
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {Model} event.record The record confirmed as added.
     */
    onAddConfirmed: ((event: { source: Store, record: Model }) => void)|string
    /**
     * Fired after any remote request has finished whether successfully or unsuccessfully.
     * @param {object} event Event object
     * @param {boolean} event.exception `true`. *Only present if the request triggered an exception.*
     * @param {'create'|'read'|'update'|'delete'} event.action Action that has finished, `'create'`, `'read'`, `'update'` or `'delete'`
     * @param {'network'|'failure'} event.exceptionType The type of failure, `'network'` or `'server'`. <em>Only present if the request triggered an exception.</em>
     * @param {Response} event.response The `Response` object
     * @param {object} event.json The decoded response object if there was no `'network'` exception.
     */
    onAfterRequest: ((event: { exception: boolean, action: 'create'|'read'|'update'|'delete', exceptionType: 'network'|'failure', response: Response, json: object }) => void)|string
    /**
     * Fired before records are added to this store by the [add](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/StoreCRUD#function-add) or [insert](#Core/data/mixin/StoreCRUD#function-insert). In a tree
     * store, also fired by [appendChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-appendChild) and
     * [insertChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-insertChild). The add or insert may be vetoed by returning `false`
     * from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be added
     * @param {Model} event.parent The parent node when using a tree store
     */
    onBeforeAdd: ((event: { source: Store, records: Model[], parent: Model }) => boolean|void)|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onBeforeCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     * @param {object} event Event object
     * @param {Store|any} event.source The
     * @param {(Model|any)[]} event.records The nodes to indent.
     */
    onBeforeIndent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before loading starts. Allows altering parameters and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoad: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * Fired before loading of remote child nodes of a tree node starts. Allows altering parameters and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoadChildren: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * When the store [is paged](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#property-isPaged), this is fired before loading a page and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoadPage: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     * @param {object} event Event object
     * @param {Store|any} event.source This store
     * @param {(Model|any)[]} event.records Nodes to be outdented
     */
    onBeforeOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before records are removed from this store by the [remove](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/StoreCRUD#function-remove) or [removeAll](#Core/data/mixin/StoreCRUD#function-removeAll).
     * Also fired when removing a child record in a tree store using [removeChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-removeChild).
     * The remove may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be removed.
     * @param {Model} event.parent The record from which children are being removed when using a tree store. Only provided when removing a single node.
     * @param {boolean} event.isMove This flag is `true` if the child node is being removed by [appendChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-appendChild) to be moved *within the same tree*.
     * @param {boolean} event.removingAll This flag is `true` if the operation is removing the store's entire data set.
     */
    onBeforeRemove: ((event: { source: Store, records: Model[], parent: Model, isMove: boolean, removingAll: boolean }) => boolean|void)|string
    /**
     * Fired before any remote request is initiated.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing key/value pairs that are passed on the request query string
     * @param {object} event.body The body of the request to be posted to the server.
     * @param {'create'|'read'|'update'|'delete'} event.action Action that is making the request, `'create'`, `'read'`, `'update'` or `'delete'`
     */
    onBeforeRequest: ((event: { source: Store, params: object, body: object, action: 'create'|'read'|'update'|'delete' }) => void)|string
    /**
     * Fired before sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Records to sort
     */
    onBeforeSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fired before record is modified in this store.
     * Modification may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {object} event.changes Modification data
     */
    onBeforeUpdate: ((event: { source: Store, record: Model, changes: object }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceTimeRangeStore#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Data in the store was changed. This is a catch-all event which is fired for all changes
     * which take place to the store's data.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceTimeRangeStore#event-change)
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} event.action Name of action which triggered the change. May be one of the options listed above
     * @param {Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onChange: ((event: { source: Store, action: 'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Fired after committing changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fired after committing added records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitAdded: ((event: { source: Store }) => void)|string
    /**
     * Fired after committing modified records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitModified: ((event: { source: Store }) => void)|string
    /**
     * Fired after committing removed records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitRemoved: ((event: { source: Store }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when a remote request fails, either at the network level, or the server returns a failure, or an invalid
     * response.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceTimeRangeStore#event-exception)
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {boolean} event.exception `true`
     * @param {'create'|'read'|'update'|'delete'|'commit'} event.action Action that failed, `'create'`, `'read'`, `'update'` or `'delete'`. May also be fired with '`commit'` to indicate the failure of an aggregated `create`, `update` and `delete` operation. In this case, the event will contain a property for each operation of the commit named `'create'`, `'update'` and `'delete'`, each containing the individual `exception` events.
     * @param {'network'|'failure'} event.exceptionType The type of failure, `'network'` or `'server'`
     * @param {Response} event.response the `Response` object
     * @param {object} event.json The decoded response object *if the exceptionType is `'server'`*
     */
    onException: ((event: { source: Store, exception: boolean, action: 'create'|'read'|'update'|'delete'|'commit', exceptionType: 'network'|'failure', response: Response, json: object }) => void)|string
    /**
     * Fired after applying filters to the store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Collection} event.filters Filters used by this Store
     * @param {Model[]} event.removed The records which were filtered out by the action.
     * @param {Model[]} event.added The records which were filtered back in by the action.
     * @param {Model[]} event.records Filtered records
     */
    onFilter: ((event: { source: Store, filters: Collection, removed: Model[], added: Model[], records: Model[] }) => void)|string
    /**
     * Fired when grouping changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Grouper[]} event.groupers Applied groupers
     * @param {Model[]} event.records Grouped records
     */
    onGroup: ((event: { source: Store, groupers: Grouper[], records: Model[] }) => void)|string
    /**
     * Fired when the id of a record has changed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {string|number} event.oldValue Old id
     * @param {string|number} event.value New id
     */
    onIdChange: ((event: { source: Store, record: Model, oldValue: string|number, value: string|number }) => void)|string
    /**
     * Fired after tasks in the tree are indented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were indented
     */
    onIndent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired on successful load
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object[]} event.data Data loaded
     * @param {Response} event.response the `Response` object
     * @param {object} event.json The decoded response object.
     */
    onLoad: ((event: { source: Store, data: object[], response: Response, json: object }) => void)|string
    /**
     * Fired on successful load of remote child nodes for a tree node.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object[]} event.data Data loaded
     * @param {object} event.json The decoded response object.
     */
    onLoadChildren: ((event: { source: Store, data: object[], json: object }) => void)|string
    /**
     * Fired when loading of remote child nodes into a tree node is beginning. This is not cancelable. Parameters in the
     * event may still be mutated at this stage.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadChildrenStart: ((event: { source: Store, params: object }) => void)|string
    /**
     * Fired when loading is beginning. This is not cancelable. Parameters in the event may still be
     * mutated at this stage.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadStart: ((event: { source: Store, params: object }) => void)|string
    /**
     * Fired when a block of records has been moved within this Store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record (DEPRECATED) The first record moved (The [move](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/StoreCRUD#function-move) API now accepts an array of records to move).
     * @param {Model[]} event.records The records moved.
     * @param {number} event.from The index from which the record was removed (applicable only for flat store).
     * @param {number} event.to The index at which the record was inserted (applicable only for flat store).
     * @param {Model} event.newParent The new parent record for the dragged records (applicable only for tree stores)
     * @param {Model[]} event.oldParents The old parent records for the dragged records (applicable only for move operations in tree stores)
     */
    onMove: ((event: { source: Store, record: Model, records: Model[], from: number, to: number, newParent?: Model, oldParents?: Model[] }) => void)|string
    /**
     * Fired after tasks in the tree are outdented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were outdented
     */
    onOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Data in the store has completely changed, such as by a filter, or sort or load operation.
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {boolean} event.batch Flag set to `true` when the refresh is triggered by ending a batch
     * @param {'dataset'|'sort'|'clearchanges'|'filter'|'create'|'update'|'delete'|'group'} event.action Name of action which triggered the change. May be one of the options listed above.
     */
    onRefresh: ((event: { source: Store, batch: boolean, action: 'dataset'|'sort'|'clearchanges'|'filter'|'create'|'update'|'delete'|'group' }) => void)|string
    /**
     * Fired when one or more records are removed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Array of removed records. In case of tree store, if branch is removed, only branch root is returned
     * @param {Model[]} event.allRecords Flat array of all removed records. In case of tree store, if branch is removed, all removed records are returned, not only branch root
     * @param {Model} event.parent If due to a [removeChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-removeChild) call, this is the parent node removed from. Only applicable when removing a single tree node.
     * @param {number} event.index Visible index at which record was removed. In case the record was removed from a collapsed branch, -1 is returned. For tree store, this is only provided when removing a single node.
     * @param {boolean} event.isChild Flag which is set to true if the record was removed from a parent record
     * @param {boolean} event.isCollapse Flag which is set to true if records were removed from the store by collapsing parent
     * @param {boolean} event.isMove Passed as `true` if the remove was part of a move operation within this Store.
     */
    onRemove: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, isChild?: boolean, isCollapse?: boolean, isMove?: boolean }) => void)|string
    /**
     * Fired after removing all records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onRemoveAll: ((event: { source: Store }) => void)|string
    /**
     * Fired when the root node is set
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.oldRoot The old root node.
     * @param {Model} event.rootNode The new root node.
     */
    onRootChange: ((event: { source: Store, oldRoot: Model, rootNode: Model }) => void)|string
    /**
     * Fired after sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Sorted records
     */
    onSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fired when a record is modified
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {object} event.changes Modification data
     */
    onUpdate: ((event: { source: Store, record: Model, changes: object }) => void)|string
}

/**
 * A class representing a collection of resource time ranges.
 * Contains a collection of [ResourceTimeRangeModel](https://bryntum.com/products/scheduler/docs#Scheduler/model/ResourceTimeRangeModel) records.
 * The class is used by the [ResourceTimeRanges](https://bryntum.com/products/scheduler/docs#Scheduler/feature/ResourceTimeRanges) feature.
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceTimeRangeStore)
 */
export class ResourceTimeRangeStore extends AjaxStore {
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Added records. In case of tree store, if branch is added, only branch root is returned
     * @param {Model[]} event.allRecords Flat list of all added records. In case of tree store, if branch is added, all new records are returned, not only branch root
     * @param {Model} event.parent If due to an [appendChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-appendChild) call, this is the parent node added to.
     * @param {number} event.index Insertion point in the store's [Collection](https://bryntum.com/products/taskboard/docs/api/Core/data/Store#config-storage).
     * @param {number} event.oldIndex Not used for tree stores. The index of the first record moved.
     * @param {boolean} event.isChild Flag which is set to true if the records are added to a parent record
     * @param {boolean} event.isExpand Flag which is set to true if records are added to the store by expanding parent
     * @param {object} event.isMove An object keyed by the ids of the records which were moved from another position in the store, or from another parent node in the store. The ids of moved records will be property names with a value `true`.
     */
    onAdd: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, oldIndex?: number, isChild?: boolean, isExpand?: boolean, isMove?: object }) => void)|string
    /**
     * Fired before records are added to this store by the [add](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/StoreCRUD#function-add) or [insert](#Core/data/mixin/StoreCRUD#function-insert). In a tree
     * store, also fired by [appendChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-appendChild) and
     * [insertChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-insertChild). The add or insert may be vetoed by returning `false`
     * from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be added
     * @param {Model} event.parent The parent node when using a tree store
     */
    onBeforeAdd: ((event: { source: Store, records: Model[], parent: Model }) => boolean|void)|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onBeforeCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     * @param {object} event Event object
     * @param {Store|any} event.source The
     * @param {(Model|any)[]} event.records The nodes to indent.
     */
    onBeforeIndent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     * @param {object} event Event object
     * @param {Store|any} event.source This store
     * @param {(Model|any)[]} event.records Nodes to be outdented
     */
    onBeforeOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before records are removed from this store by the [remove](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/StoreCRUD#function-remove) or [removeAll](#Core/data/mixin/StoreCRUD#function-removeAll).
     * Also fired when removing a child record in a tree store using [removeChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-removeChild).
     * The remove may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be removed.
     * @param {Model} event.parent The record from which children are being removed when using a tree store. Only provided when removing a single node.
     * @param {boolean} event.isMove This flag is `true` if the child node is being removed by [appendChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-appendChild) to be moved *within the same tree*.
     * @param {boolean} event.removingAll This flag is `true` if the operation is removing the store's entire data set.
     */
    onBeforeRemove: ((event: { source: Store, records: Model[], parent: Model, isMove: boolean, removingAll: boolean }) => boolean|void)|string
    /**
     * Fired before sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Records to sort
     */
    onBeforeSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/ResourceTimeRangeStore#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired after committing changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired after applying filters to the store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Collection} event.filters Filters used by this Store
     * @param {Model[]} event.removed The records which were filtered out by the action.
     * @param {Model[]} event.added The records which were filtered back in by the action.
     * @param {Model[]} event.records Filtered records
     */
    onFilter: ((event: { source: Store, filters: Collection, removed: Model[], added: Model[], records: Model[] }) => void)|string
    /**
     * Fired when grouping changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Grouper[]} event.groupers Applied groupers
     * @param {Model[]} event.records Grouped records
     */
    onGroup: ((event: { source: Store, groupers: Grouper[], records: Model[] }) => void)|string
    /**
     * Fired after tasks in the tree are indented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were indented
     */
    onIndent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired after tasks in the tree are outdented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were outdented
     */
    onOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired when one or more records are removed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Array of removed records. In case of tree store, if branch is removed, only branch root is returned
     * @param {Model[]} event.allRecords Flat array of all removed records. In case of tree store, if branch is removed, all removed records are returned, not only branch root
     * @param {Model} event.parent If due to a [removeChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-removeChild) call, this is the parent node removed from. Only applicable when removing a single tree node.
     * @param {number} event.index Visible index at which record was removed. In case the record was removed from a collapsed branch, -1 is returned. For tree store, this is only provided when removing a single node.
     * @param {boolean} event.isChild Flag which is set to true if the record was removed from a parent record
     * @param {boolean} event.isCollapse Flag which is set to true if records were removed from the store by collapsing parent
     * @param {boolean} event.isMove Passed as `true` if the remove was part of a move operation within this Store.
     */
    onRemove: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, isChild?: boolean, isCollapse?: boolean, isMove?: boolean }) => void)|string
    /**
     * Fired after removing all records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onRemoveAll: ((event: { source: Store }) => void)|string
    /**
     * Fired after sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Sorted records
     */
    onSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<ResourceTimeRangeStoreConfig>} config
     */
    constructor(config?: Partial<ResourceTimeRangeStoreConfig>);
    /**
     * Get resource time ranges intersecting the specified date range for a resource.
     * @param {object} options Options
     */
    getRanges(options: {
        resourceRecord: ResourceModel
        startDate: Date
        endDate: Date
    }): ResourceTimeRangeModel[];
    /**
     * Returns all the recurring timespans.
     */
    getRecurringTimeSpans(): TimeSpan[];
}

/**
 * Type with configuration options for [TimeRangeStore](https://bryntum.com/products/grid/docs/api/Scheduler/data/TimeRangeStore) class.
 */
type TimeRangeStoreConfig = {
    /**
     * Specify `false` to prevent loading records without ids, a good practise to enforce when syncing with a
     * backend.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/TimeRangeStore#config-allowNoId)
     */
    allowNoId: boolean
    /**
     * Specifies target to filter and sort after applying changeset:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/TimeRangeStore#config-applyChangesetFilterSortTarget)
     */
    applyChangesetFilterSortTarget: 'changes'|'none'
    /**
     * Commit changes automatically
     */
    autoCommit: boolean
    /**
     * True to initiate a load when the store is instantiated
     */
    autoLoad: boolean
    /**
     * Automatically detect from set data if used as tree store or flat store
     */
    autoTree: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/TimeRangeStore#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/TimeRangeStore#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Array of field names that should trigger filtering of chained store when the fields are updated.
     */
    chainedFields: string[]
    /**
     * Function used to filter records in the masterStore into a chained store. If not provided,
     * all records from the masterStore will be included in the chained store.
     * Return `true` to include the passed record, or a `false` to exclude it.
     * @param {Model} record
     * @returns {boolean}
     */
    chainedFilterFn: (record: Model) => boolean
    /**
     * Url to post newly created records to.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/TimeRangeStore#config-createUrl)
     */
    createUrl: string
    /**
     * Raw data to load initially.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/TimeRangeStore#config-data)
     */
    data: object[]|Model[]
    /**
     * Url for deleting records.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/TimeRangeStore#config-deleteUrl)
     */
    deleteUrl: string
    /**
     * Method names calls to which should be relayed to master store.
     */
    doRelayToMaster: string[]
    /**
     * Method names calls to which shouldn't be relayed to master store.
     */
    dontRelayToMaster: string
    /**
     * If true, collapsed records in original tree will be excluded from the chained store.
     */
    excludeCollapsedRecords: boolean
    /**
     * An object containing the Fetch options to pass to each server request issued by this store. Use this to
     * control if credentials are sent and other options, read more at
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_request_options).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/TimeRangeStore#config-fetchOptions)
     */
    fetchOptions: object
    /**
     * An array of field definitions used to create a [Model](https://bryntum.com/products/taskboard/docs/api/Core/data/Model) (modelClass) subclass. Optional.
     * If the Model already has fields defined, these fields will extend those.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/TimeRangeStore#config-fields)
     */
    fields: (string|Partial<ModelFieldConfig>|DataField)[]
    /**
     * The name of the HTTP parameter to use to pass any encoded filters when loading data from the server and a
     * filtered response is required.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/TimeRangeStore#config-filterParamName)
     */
    filterParamName: string
    /**
     * Specify one or more [CollectionFilter](https://bryntum.com/products/taskboard/docs/api/Core/util/CollectionFilter) config objects to apply initially.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/TimeRangeStore#config-filters)
     */
    filters: Partial<CollectionFilterConfig>|Partial<CollectionFilterConfig>[]
    /**
     * This flag prevents firing of 'remove' event when moving a node in the tree. In 6.0 this will be the default
     * behavior and this flag will be removed.
     */
    fireRemoveEventForMoveAction: boolean
    /**
     * Initial groupers, specify to have store grouped automatically after initially setting data
     */
    groupers: Grouper[]
    /**
     * A string keyed object containing the HTTP headers to add to each server request issued by this store.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/TimeRangeStore#config-headers)
     */
    headers: Record<string, string>
    /**
     * The HTTP methods to use for CRUD requests when [useRestfulMethods](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#config-useRestfulMethods) is enabled.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/TimeRangeStore#config-httpMethods)
     */
    httpMethods: HttpMethods
    /**
     * Store's unique identifier. When set the store is added to a store map accessible through
     * `Store.getStore(id)`.
     */
    id: string|number
    /**
     * Set to `false` to not record transaction during `applyChangeset` call
     */
    ignoreRemoteChangesInSTM: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/TimeRangeStore#config-listeners)
     */
    listeners: object
    /**
     * Master store that a chained store gets its records from.
     */
    masterStore: Store
    /**
     * Class used to represent records in the store, should be a subclass of [Model](https://bryntum.com/products/taskboard/docs/api/Core/data/Model). Only
     * applies when supplying data to the store (load, add), any supplied record instances are kept as is.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/TimeRangeStore#config-modelClass)
     */
    modelClass: typeof Model
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>one based</strong> page number
     * required.
     */
    pageParamName: string
    /**
     * When paging of data is requested by setting *either* the [pageParamName](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#config-pageParamName) *or* the
     * [pageStartParamName](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#config-pageStartParamName), this is the value to send in the [pageSizeParamName](#Core/data/AjaxStore#config-pageSizeParamName).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/TimeRangeStore#config-pageSize)
     */
    pageSize: number
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageSizeParamName: string
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageStartParamName: string
    /**
     * An object containing key/value pairs that are passed on the request query string.
     */
    params: object
    /**
     * The name of the HTTP parameter passed to this Store's [readUrl](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#config-readUrl) to indicate the node `id`
     * to load when loading child nodes on demand if the node being expanded was created with data containing
     * `children: true`.
     */
    parentIdParamName: string
    /**
     * Url to read data from.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/TimeRangeStore#config-readUrl)
     */
    readUrl: string
    /**
     * Specify true to reapply filters when a record is added to the store.
     */
    reapplyFilterOnAdd: boolean
    /**
     * Specify true to reapply filters when a record is updated in the store.
     */
    reapplyFilterOnUpdate: boolean
    /**
     * Specify true to sort this store after records are added.
     */
    reapplySortersOnAdd: boolean
    /**
     * The property name in JSON responses from the server that contains the data for the records
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/TimeRangeStore#config-responseDataProperty)
     */
    responseDataProperty: string
    /**
     * The optional property name in JSON responses from the server that contains a boolean
     * success/fail status.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/TimeRangeStore#config-responseSuccessProperty)
     */
    responseSuccessProperty: string
    /**
     * The property name in JSON responses from the server that contains the dataset total size
     * <strong>when this store [is paged](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#property-isPaged)</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/TimeRangeStore#config-responseTotalProperty)
     */
    responseTotalProperty: string
    /**
     * Set this flag to true if you are filtering remote using restful URLs (e.g.
     * https://nominatim.openstreetmap.org/search/paris?format=json)
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/TimeRangeStore#config-restfulFilter)
     */
    restfulFilter: boolean
    /**
     * Specify `true` to send payloads as form data, `false` to send as regular JSON.
     */
    sendAsFormData: boolean
    /**
     * The name of the HTTP parameter to use to pass any encoded sorters when loading data from the server and a
     * sorted response is required.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/TimeRangeStore#config-sortParamName)
     */
    sortParamName: string
    /**
     * Initial sorters, format is:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/TimeRangeStore#config-sorters)
     */
    sorters: Sorter[]|string[]
    /**
     * To have all groups <strong>initially loaded</strong> start collapsed, configure this as `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/TimeRangeStore#config-startGroupsCollapsed)
     */
    startGroupsCollapsed: boolean
    /**
     * Reference to STM manager
     */
    stm: StateTrackingManager
    /**
     * A [Collection](https://bryntum.com/products/taskboard/docs/api/Core/util/Collection), or Collection config object
     * to use to contain this Store's constituent records.
     */
    storage: Collection|Partial<CollectionConfig>
    /**
     * Store class to use when creating the store when it is a part of a
     * [CrudManager](https://bryntum.com/products/scheduler/docs/api/Scheduler/data/CrudManager).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/TimeRangeStore#config-storeClass)
     */
    storeClass: typeof Store
    /**
     * Configure with `true` to sync loaded data instead of replacing existing with a new dataset.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/TimeRangeStore#config-syncDataOnLoad)
     */
    syncDataOnLoad: boolean|SyncDataOnLoadOptions
    /**
     * Set to `true` to on load transform a flat dataset with raw objects containing `parentId` into the format
     * expected for tree data.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/TimeRangeStore#config-transformFlatData)
     */
    transformFlatData: boolean
    /**
     * `true` to act as a tree store.
     */
    tree: boolean
    /**
     * Url to post record modifications to.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/TimeRangeStore#config-updateUrl)
     */
    updateUrl: string
    /**
     * Use `localeCompare()` when sorting, which lets the browser sort in a locale specific order. Set to `true`,
     * a locale string or a locale config to enable.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/TimeRangeStore#config-useLocaleSort)
     */
    useLocaleSort: boolean|string|object
    /**
     * Retools the loaded data objects instead of making shallow copies of them. This increases performance but
     * pollutes the incoming data and does not allow remapping of fields (dataSource).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/TimeRangeStore#config-useRawData)
     * @param {boolean} disableDuplicateIdCheck Data must not contain duplicate ids, check is bypassed.
     * @param {boolean} disableDefaultValue Default values will not be applied to record fields.
     * @param {boolean} disableTypeConversion No type conversions will be performed on record data.
     */
    useRawData: boolean|object
    /**
     * Set to ´true´ to use restful [httpMethods](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#config-httpMethods)
     */
    useRestfulMethods: boolean
    /**
     * Verify that loaded data does not contain any generated ids. If it does, a warning is logged on console.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/TimeRangeStore#config-verifyNoGeneratedIds)
     */
    verifyNoGeneratedIds: boolean
    /**
     * Specify `true` to send all model fields when committing modified records (as opposed to just the
     * modified fields)
     */
    writeAllFields: boolean
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Added records. In case of tree store, if branch is added, only branch root is returned
     * @param {Model[]} event.allRecords Flat list of all added records. In case of tree store, if branch is added, all new records are returned, not only branch root
     * @param {Model} event.parent If due to an [appendChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-appendChild) call, this is the parent node added to.
     * @param {number} event.index Insertion point in the store's [Collection](https://bryntum.com/products/taskboard/docs/api/Core/data/Store#config-storage).
     * @param {number} event.oldIndex Not used for tree stores. The index of the first record moved.
     * @param {boolean} event.isChild Flag which is set to true if the records are added to a parent record
     * @param {boolean} event.isExpand Flag which is set to true if records are added to the store by expanding parent
     * @param {object} event.isMove An object keyed by the ids of the records which were moved from another position in the store, or from another parent node in the store. The ids of moved records will be property names with a value `true`.
     */
    onAdd: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, oldIndex?: number, isChild?: boolean, isExpand?: boolean, isMove?: object }) => void)|string
    /**
     * Fired when a temporary record with the [isCreating](https://bryntum.com/products/taskboard/docs/api/Core/data/Model#property-isCreating) property set
     * has been confirmed as a part of this store by having its [isCreating](https://bryntum.com/products/taskboard/docs/api/Core/data/Model#property-isCreating)
     * property cleared.
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {Model} event.record The record confirmed as added.
     */
    onAddConfirmed: ((event: { source: Store, record: Model }) => void)|string
    /**
     * Fired after any remote request has finished whether successfully or unsuccessfully.
     * @param {object} event Event object
     * @param {boolean} event.exception `true`. *Only present if the request triggered an exception.*
     * @param {'create'|'read'|'update'|'delete'} event.action Action that has finished, `'create'`, `'read'`, `'update'` or `'delete'`
     * @param {'network'|'failure'} event.exceptionType The type of failure, `'network'` or `'server'`. <em>Only present if the request triggered an exception.</em>
     * @param {Response} event.response The `Response` object
     * @param {object} event.json The decoded response object if there was no `'network'` exception.
     */
    onAfterRequest: ((event: { exception: boolean, action: 'create'|'read'|'update'|'delete', exceptionType: 'network'|'failure', response: Response, json: object }) => void)|string
    /**
     * Fired before records are added to this store by the [add](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/StoreCRUD#function-add) or [insert](#Core/data/mixin/StoreCRUD#function-insert). In a tree
     * store, also fired by [appendChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-appendChild) and
     * [insertChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-insertChild). The add or insert may be vetoed by returning `false`
     * from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be added
     * @param {Model} event.parent The parent node when using a tree store
     */
    onBeforeAdd: ((event: { source: Store, records: Model[], parent: Model }) => boolean|void)|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onBeforeCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     * @param {object} event Event object
     * @param {Store|any} event.source The
     * @param {(Model|any)[]} event.records The nodes to indent.
     */
    onBeforeIndent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before loading starts. Allows altering parameters and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoad: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * Fired before loading of remote child nodes of a tree node starts. Allows altering parameters and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoadChildren: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * When the store [is paged](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#property-isPaged), this is fired before loading a page and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoadPage: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     * @param {object} event Event object
     * @param {Store|any} event.source This store
     * @param {(Model|any)[]} event.records Nodes to be outdented
     */
    onBeforeOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before records are removed from this store by the [remove](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/StoreCRUD#function-remove) or [removeAll](#Core/data/mixin/StoreCRUD#function-removeAll).
     * Also fired when removing a child record in a tree store using [removeChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-removeChild).
     * The remove may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be removed.
     * @param {Model} event.parent The record from which children are being removed when using a tree store. Only provided when removing a single node.
     * @param {boolean} event.isMove This flag is `true` if the child node is being removed by [appendChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-appendChild) to be moved *within the same tree*.
     * @param {boolean} event.removingAll This flag is `true` if the operation is removing the store's entire data set.
     */
    onBeforeRemove: ((event: { source: Store, records: Model[], parent: Model, isMove: boolean, removingAll: boolean }) => boolean|void)|string
    /**
     * Fired before any remote request is initiated.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing key/value pairs that are passed on the request query string
     * @param {object} event.body The body of the request to be posted to the server.
     * @param {'create'|'read'|'update'|'delete'} event.action Action that is making the request, `'create'`, `'read'`, `'update'` or `'delete'`
     */
    onBeforeRequest: ((event: { source: Store, params: object, body: object, action: 'create'|'read'|'update'|'delete' }) => void)|string
    /**
     * Fired before sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Records to sort
     */
    onBeforeSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fired before record is modified in this store.
     * Modification may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {object} event.changes Modification data
     */
    onBeforeUpdate: ((event: { source: Store, record: Model, changes: object }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/TimeRangeStore#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Data in the store was changed. This is a catch-all event which is fired for all changes
     * which take place to the store's data.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/TimeRangeStore#event-change)
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} event.action Name of action which triggered the change. May be one of the options listed above
     * @param {Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onChange: ((event: { source: Store, action: 'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Fired after committing changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fired after committing added records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitAdded: ((event: { source: Store }) => void)|string
    /**
     * Fired after committing modified records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitModified: ((event: { source: Store }) => void)|string
    /**
     * Fired after committing removed records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitRemoved: ((event: { source: Store }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when a remote request fails, either at the network level, or the server returns a failure, or an invalid
     * response.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/TimeRangeStore#event-exception)
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {boolean} event.exception `true`
     * @param {'create'|'read'|'update'|'delete'|'commit'} event.action Action that failed, `'create'`, `'read'`, `'update'` or `'delete'`. May also be fired with '`commit'` to indicate the failure of an aggregated `create`, `update` and `delete` operation. In this case, the event will contain a property for each operation of the commit named `'create'`, `'update'` and `'delete'`, each containing the individual `exception` events.
     * @param {'network'|'failure'} event.exceptionType The type of failure, `'network'` or `'server'`
     * @param {Response} event.response the `Response` object
     * @param {object} event.json The decoded response object *if the exceptionType is `'server'`*
     */
    onException: ((event: { source: Store, exception: boolean, action: 'create'|'read'|'update'|'delete'|'commit', exceptionType: 'network'|'failure', response: Response, json: object }) => void)|string
    /**
     * Fired after applying filters to the store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Collection} event.filters Filters used by this Store
     * @param {Model[]} event.removed The records which were filtered out by the action.
     * @param {Model[]} event.added The records which were filtered back in by the action.
     * @param {Model[]} event.records Filtered records
     */
    onFilter: ((event: { source: Store, filters: Collection, removed: Model[], added: Model[], records: Model[] }) => void)|string
    /**
     * Fired when grouping changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Grouper[]} event.groupers Applied groupers
     * @param {Model[]} event.records Grouped records
     */
    onGroup: ((event: { source: Store, groupers: Grouper[], records: Model[] }) => void)|string
    /**
     * Fired when the id of a record has changed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {string|number} event.oldValue Old id
     * @param {string|number} event.value New id
     */
    onIdChange: ((event: { source: Store, record: Model, oldValue: string|number, value: string|number }) => void)|string
    /**
     * Fired after tasks in the tree are indented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were indented
     */
    onIndent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired on successful load
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object[]} event.data Data loaded
     * @param {Response} event.response the `Response` object
     * @param {object} event.json The decoded response object.
     */
    onLoad: ((event: { source: Store, data: object[], response: Response, json: object }) => void)|string
    /**
     * Fired on successful load of remote child nodes for a tree node.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object[]} event.data Data loaded
     * @param {object} event.json The decoded response object.
     */
    onLoadChildren: ((event: { source: Store, data: object[], json: object }) => void)|string
    /**
     * Fired when loading of remote child nodes into a tree node is beginning. This is not cancelable. Parameters in the
     * event may still be mutated at this stage.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadChildrenStart: ((event: { source: Store, params: object }) => void)|string
    /**
     * Fired when loading is beginning. This is not cancelable. Parameters in the event may still be
     * mutated at this stage.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadStart: ((event: { source: Store, params: object }) => void)|string
    /**
     * Fired when a block of records has been moved within this Store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record (DEPRECATED) The first record moved (The [move](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/StoreCRUD#function-move) API now accepts an array of records to move).
     * @param {Model[]} event.records The records moved.
     * @param {number} event.from The index from which the record was removed (applicable only for flat store).
     * @param {number} event.to The index at which the record was inserted (applicable only for flat store).
     * @param {Model} event.newParent The new parent record for the dragged records (applicable only for tree stores)
     * @param {Model[]} event.oldParents The old parent records for the dragged records (applicable only for move operations in tree stores)
     */
    onMove: ((event: { source: Store, record: Model, records: Model[], from: number, to: number, newParent?: Model, oldParents?: Model[] }) => void)|string
    /**
     * Fired after tasks in the tree are outdented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were outdented
     */
    onOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Data in the store has completely changed, such as by a filter, or sort or load operation.
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {boolean} event.batch Flag set to `true` when the refresh is triggered by ending a batch
     * @param {'dataset'|'sort'|'clearchanges'|'filter'|'create'|'update'|'delete'|'group'} event.action Name of action which triggered the change. May be one of the options listed above.
     */
    onRefresh: ((event: { source: Store, batch: boolean, action: 'dataset'|'sort'|'clearchanges'|'filter'|'create'|'update'|'delete'|'group' }) => void)|string
    /**
     * Fired when one or more records are removed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Array of removed records. In case of tree store, if branch is removed, only branch root is returned
     * @param {Model[]} event.allRecords Flat array of all removed records. In case of tree store, if branch is removed, all removed records are returned, not only branch root
     * @param {Model} event.parent If due to a [removeChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-removeChild) call, this is the parent node removed from. Only applicable when removing a single tree node.
     * @param {number} event.index Visible index at which record was removed. In case the record was removed from a collapsed branch, -1 is returned. For tree store, this is only provided when removing a single node.
     * @param {boolean} event.isChild Flag which is set to true if the record was removed from a parent record
     * @param {boolean} event.isCollapse Flag which is set to true if records were removed from the store by collapsing parent
     * @param {boolean} event.isMove Passed as `true` if the remove was part of a move operation within this Store.
     */
    onRemove: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, isChild?: boolean, isCollapse?: boolean, isMove?: boolean }) => void)|string
    /**
     * Fired after removing all records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onRemoveAll: ((event: { source: Store }) => void)|string
    /**
     * Fired when the root node is set
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.oldRoot The old root node.
     * @param {Model} event.rootNode The new root node.
     */
    onRootChange: ((event: { source: Store, oldRoot: Model, rootNode: Model }) => void)|string
    /**
     * Fired after sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Sorted records
     */
    onSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fired when a record is modified
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {object} event.changes Modification data
     */
    onUpdate: ((event: { source: Store, record: Model, changes: object }) => void)|string
}

/**
 * A class representing a collection of time ranges.
 * Contains a collection of [TimeRangeModel](https://bryntum.com/products/scheduler/docs#Scheduler/model/TimeRangeModel) records.
 * The class is used by the [TimeRanges](https://bryntum.com/products/scheduler/docs#Scheduler/feature/TimeRanges) feature.
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/TimeRangeStore)
 */
export class TimeRangeStore extends AjaxStore {
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Added records. In case of tree store, if branch is added, only branch root is returned
     * @param {Model[]} event.allRecords Flat list of all added records. In case of tree store, if branch is added, all new records are returned, not only branch root
     * @param {Model} event.parent If due to an [appendChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-appendChild) call, this is the parent node added to.
     * @param {number} event.index Insertion point in the store's [Collection](https://bryntum.com/products/taskboard/docs/api/Core/data/Store#config-storage).
     * @param {number} event.oldIndex Not used for tree stores. The index of the first record moved.
     * @param {boolean} event.isChild Flag which is set to true if the records are added to a parent record
     * @param {boolean} event.isExpand Flag which is set to true if records are added to the store by expanding parent
     * @param {object} event.isMove An object keyed by the ids of the records which were moved from another position in the store, or from another parent node in the store. The ids of moved records will be property names with a value `true`.
     */
    onAdd: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, oldIndex?: number, isChild?: boolean, isExpand?: boolean, isMove?: object }) => void)|string
    /**
     * Fired before records are added to this store by the [add](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/StoreCRUD#function-add) or [insert](#Core/data/mixin/StoreCRUD#function-insert). In a tree
     * store, also fired by [appendChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-appendChild) and
     * [insertChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-insertChild). The add or insert may be vetoed by returning `false`
     * from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be added
     * @param {Model} event.parent The parent node when using a tree store
     */
    onBeforeAdd: ((event: { source: Store, records: Model[], parent: Model }) => boolean|void)|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onBeforeCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     * @param {object} event Event object
     * @param {Store|any} event.source The
     * @param {(Model|any)[]} event.records The nodes to indent.
     */
    onBeforeIndent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     * @param {object} event Event object
     * @param {Store|any} event.source This store
     * @param {(Model|any)[]} event.records Nodes to be outdented
     */
    onBeforeOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before records are removed from this store by the [remove](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/StoreCRUD#function-remove) or [removeAll](#Core/data/mixin/StoreCRUD#function-removeAll).
     * Also fired when removing a child record in a tree store using [removeChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-removeChild).
     * The remove may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be removed.
     * @param {Model} event.parent The record from which children are being removed when using a tree store. Only provided when removing a single node.
     * @param {boolean} event.isMove This flag is `true` if the child node is being removed by [appendChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-appendChild) to be moved *within the same tree*.
     * @param {boolean} event.removingAll This flag is `true` if the operation is removing the store's entire data set.
     */
    onBeforeRemove: ((event: { source: Store, records: Model[], parent: Model, isMove: boolean, removingAll: boolean }) => boolean|void)|string
    /**
     * Fired before sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Records to sort
     */
    onBeforeSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/TimeRangeStore#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired after committing changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired after applying filters to the store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Collection} event.filters Filters used by this Store
     * @param {Model[]} event.removed The records which were filtered out by the action.
     * @param {Model[]} event.added The records which were filtered back in by the action.
     * @param {Model[]} event.records Filtered records
     */
    onFilter: ((event: { source: Store, filters: Collection, removed: Model[], added: Model[], records: Model[] }) => void)|string
    /**
     * Fired when grouping changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Grouper[]} event.groupers Applied groupers
     * @param {Model[]} event.records Grouped records
     */
    onGroup: ((event: { source: Store, groupers: Grouper[], records: Model[] }) => void)|string
    /**
     * Fired after tasks in the tree are indented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were indented
     */
    onIndent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired after tasks in the tree are outdented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were outdented
     */
    onOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired when one or more records are removed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Array of removed records. In case of tree store, if branch is removed, only branch root is returned
     * @param {Model[]} event.allRecords Flat array of all removed records. In case of tree store, if branch is removed, all removed records are returned, not only branch root
     * @param {Model} event.parent If due to a [removeChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-removeChild) call, this is the parent node removed from. Only applicable when removing a single tree node.
     * @param {number} event.index Visible index at which record was removed. In case the record was removed from a collapsed branch, -1 is returned. For tree store, this is only provided when removing a single node.
     * @param {boolean} event.isChild Flag which is set to true if the record was removed from a parent record
     * @param {boolean} event.isCollapse Flag which is set to true if records were removed from the store by collapsing parent
     * @param {boolean} event.isMove Passed as `true` if the remove was part of a move operation within this Store.
     */
    onRemove: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, isChild?: boolean, isCollapse?: boolean, isMove?: boolean }) => void)|string
    /**
     * Fired after removing all records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onRemoveAll: ((event: { source: Store }) => void)|string
    /**
     * Fired after sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Sorted records
     */
    onSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<TimeRangeStoreConfig>} config
     */
    constructor(config?: Partial<TimeRangeStoreConfig>);
    /**
     * Returns all the recurring timespans.
     */
    getRecurringTimeSpans(): TimeSpan[];
}

export class AssignmentStoreMixinClass {
    /**
     * Applies a new dataset to the AssignmentStore. Use it to plug externally fetched data into the store.
     */
    data: Partial<AssignmentModelConfig>[]
    /**
     * Add assignments to the store.
     * @param {AssignmentModel|AssignmentModel[]|Partial<AssignmentModelConfig>|Partial<AssignmentModelConfig>[]} records Array of records/data or a single record/data to add to store
     * @param {boolean} silent Specify `true` to suppress events
     */
    add(records: AssignmentModel|AssignmentModel[]|Partial<AssignmentModelConfig>|Partial<AssignmentModelConfig>[], silent?: boolean): AssignmentModel[];
    /**
     * Add assignments to the store and triggers calculations directly after. Await this function to have up to date
     * references on the added assignments.
     * @param {AssignmentModel|AssignmentModel[]|Partial<AssignmentModelConfig>|Partial<AssignmentModelConfig>[]} records Array of records/data or a single record/data to add to store
     * @param {boolean} silent Specify `true` to suppress events
     */
    addAsync(records: AssignmentModel|AssignmentModel[]|Partial<AssignmentModelConfig>|Partial<AssignmentModelConfig>[], silent?: boolean): Promise<AssignmentModel[]>;
    /**
     * Creates and adds assignment record(s) for a given event and resource(s).
     * @param {TimeSpan} event
     * @param {ResourceModel|ResourceModel[]} resources The resource(s) to assign to the event
     * @param {Function} assignmentSetupFn A hook function which takes an assignment as its argument and must return an assignment.
     * @param {boolean} removeExistingAssignments `true` to remove assignments for other resources
     */
    assignEventToResource(event: TimeSpan, resources: ResourceModel|ResourceModel[], assignmentSetupFn?: Function, removeExistingAssignments?: boolean): AssignmentModel[];
    /**
     * Returns an assignment record for a given event and resource
     * @param {EventModel|string|number} event The event or its id
     * @param {ResourceModel|string|number} resource The resource or its id
     */
    getAssignmentForEventAndResource(event: EventModel|string|number, resource: ResourceModel|string|number): AssignmentModel;
    /**
     * Returns all assignments for a given event.
     * @param {TimeSpan} event
     */
    getAssignmentsForEvent(event: TimeSpan): AssignmentModel[];
    /**
     * Returns all assignments for a given resource.
     * @param {ResourceModel} resource
     */
    getAssignmentsForResource(resource: ResourceModel): AssignmentModel[];
    /**
     * Returns all events assigned to a resource
     * @param {ResourceModel|string|number} resource
     */
    getEventsForResource(resource: ResourceModel|string|number): TimeSpan[];
    /**
     * Returns all resources assigned to an event.
     * @param {EventModel} event
     */
    getResourcesForEvent(event: EventModel): ResourceModel[];
    /**
     * Checks whether an event is assigned to a resource.
     * @param {EventModel|string|number} event Event record or id
     * @param {ResourceModel|string|number} resource Resource record or id
     */
    isEventAssignedToResource(event: EventModel|string|number, resource: ResourceModel|string|number): boolean;
    /**
     * Applies a new dataset to the AssignmentStore and triggers calculations directly after. Use it to plug externally
     * fetched data into the store.
     * @param {Partial<AssignmentModelConfig>[]} data Array of AssignmentModel data objects
     */
    loadDataAsync(data: Partial<AssignmentModelConfig>[]): Promise<void>;
    /**
     * Maps over event assignments.
     * @param {EventModel} event
     * @param {Function} fn
     * @param {Function} filterFn
     */
    mapAssignmentsForEvent(event: EventModel, fn?: Function, filterFn?: Function): EventModel[]|any[];
    /**
     * Maps over resource assignments.
     * @param {ResourceModel|number|string} resource
     * @param {Function} fn
     * @param {Function} filterFn
     */
    mapAssignmentsForResource(resource: ResourceModel|number|string, fn?: Function, filterFn?: Function): ResourceModel[]|any[];
    /**
     * Removes all assignments for given event
     * @param {TimeSpan} event
     */
    removeAssignmentsForEvent(event: TimeSpan): void;
    /**
     * Removes all assignments for given resource
     * @param {ResourceModel|any} resource
     */
    removeAssignmentsForResource(resource: ResourceModel|any): void;
    /**
     * Removes assignment record for a given event and resource.
     * @param {TimeSpan|string|number} event
     * @param {ResourceModel|string|number} resources The resource to unassign the event from. If omitted, all resources of the events will be unassigned
     */
    unassignEventFromResource(event: TimeSpan|string|number, resources?: ResourceModel|string|number): AssignmentModel|AssignmentModel[];
}

export const AssignmentStoreMixin : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & AssignmentStoreMixinClass>

export class DependencyStoreMixinClass {
    /**
     * Applies a new dataset to the DependencyStore. Use it to plug externally fetched data into the store.
     */
    data: Partial<DependencyModelConfig>[]
    /**
     * Add dependencies to the store.
     * @param {DependencyModel|DependencyModel[]|Partial<DependencyModelConfig>|Partial<DependencyModelConfig>[]} records Array of records/data or a single record/data to add to store
     * @param {boolean} silent Specify `true` to suppress events
     */
    add(records: DependencyModel|DependencyModel[]|Partial<DependencyModelConfig>|Partial<DependencyModelConfig>[], silent?: boolean): DependencyModel[];
    /**
     * Add dependencies to the store and triggers calculations directly after. Await this function to have up to date
     * references on the added dependencies.
     * @param {DependencyModel|DependencyModel[]|Partial<DependencyModelConfig>|Partial<DependencyModelConfig>[]} records Array of records/data or a single record/data to add to store
     * @param {boolean} silent Specify `true` to suppress events
     */
    addAsync(records: DependencyModel|DependencyModel[]|Partial<DependencyModelConfig>|Partial<DependencyModelConfig>[], silent?: boolean): Promise<DependencyModel[]>;
    /**
     * Returns dependency model instance linking tasks with given ids. The dependency can be forward (from 1st
     * task to 2nd) or backward (from 2nd to 1st).
     * @param {EventModel|string} sourceEvent 1st event
     * @param {EventModel|string} targetEvent 2nd event
     */
    getDependencyForSourceAndTargetEvents(sourceEvent: EventModel|string, targetEvent: EventModel|string): DependencyModel;
    /**
     * Returns all dependencies for a certain event (both incoming and outgoing)
     * @param {EventModel} event
     */
    getEventDependencies(event: EventModel): DependencyModel[];
    /**
     * Returns a dependency model instance linking given events if such dependency exists in the store.
     * The dependency can be forward (from 1st event to 2nd) or backward (from 2nd to 1st).
     * @param {EventModel|string} sourceEvent
     * @param {EventModel|string} targetEvent
     */
    getEventsLinkingDependency(sourceEvent: EventModel|string, targetEvent: EventModel|string): DependencyModel;
    /**
     * Returns all dependencies highlighted with the given CSS class
     * @param {string} cls
     */
    getHighlightedDependencies(cls: string): DependencyBaseModel[];
    /**
     * Validation method used to validate a dependency. Override and return `true` to indicate that an
     * existing dependency between two tasks is valid. For a new dependency being created please see
     * [isValidDependencyToCreate](https://bryntum.com/products/scheduler/docs#Scheduler/data/mixin/DependencyStoreMixin#function-isValidDependencyToCreate).
     * @param {DependencyModel|TimeSpan|number|string} dependencyOrFromId The dependency model, the from task/event or the id of the from task/event
     * @param {TimeSpan|number|string} toId To task/event or id thereof if the first parameter is not a dependency record
     * @param {number} type Dependency [Type](https://bryntum.com/products/scheduler/docs#Scheduler/model/DependencyBaseModel#property-Type-static) if the first parameter is not a dependency model instance.
     */
    isValidDependency(dependencyOrFromId: DependencyModel|TimeSpan|number|string, toId?: TimeSpan|number|string, type?: number): Promise<boolean>;
    /**
     * Validation method used to validate a dependency while creating. Override and return `true` to indicate that
     * a new dependency is valid to be created.
     * @param {TimeSpan|number|string} fromId From event/task or id
     * @param {TimeSpan|number|string} toId To event/task or id
     * @param {number} type Dependency [Type](https://bryntum.com/products/scheduler/docs#Scheduler/model/DependencyBaseModel#property-Type-static)
     */
    isValidDependencyToCreate(fromId: TimeSpan|number|string, toId: TimeSpan|number|string, type: number): boolean;
    /**
     * Applies a new dataset to the DependencyStore and triggers calculations directly after. Use it to plug externally
     * fetched data into the store.
     * @param {Partial<DependencyModelConfig>[]} data Array of DependencyModel data objects
     */
    loadDataAsync(data: Partial<DependencyModelConfig>[]): Promise<void>;
}

export const DependencyStoreMixin : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & DependencyStoreMixinClass>

/**
 * Type with configuration options for [EventStoreMixin](https://bryntum.com/products/grid/docs/api/Scheduler/data/mixin/EventStoreMixin) class.
 */
type EventStoreMixinClassConfig = {
    /**
     * Configure with `true` to also remove the event when removing the last assignment from the linked
     * AssignmentStore. This config has not effect when using EventStore in legacy `resourceId`-mode.
     */
    removeUnassignedEvent: boolean
    /**
     * Configure with `true` to force single-resource mode, an event can only be assigned to a single resource.
     * If not provided, the mode will be inferred from
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/mixin/EventStoreMixin#config-singleAssignment)
     */
    singleAssignment: boolean
}

export class EventStoreMixinClass {
    /**
     * Applies a new dataset to the EventStore. Use it to plug externally fetched data into the store.
     */
    data: Partial<EventModelConfig>[]
    /**
     * Class used to represent records. Defaults to class EventModel.
     */
    modelClass: typeof EventModel
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<EventStoreMixinClassConfig>} config
     */
    constructor(config?: Partial<EventStoreMixinClassConfig>);
    /**
     * Add events to the store.
     * @param {EventModel|EventModel[]|Partial<EventModelConfig>|Partial<EventModelConfig>[]} records Array of records/data or a single record/data to add to store
     * @param {boolean} silent Specify `true` to suppress events
     */
    add(records: EventModel|EventModel[]|Partial<EventModelConfig>|Partial<EventModelConfig>[], silent?: boolean): EventModel[];
    /**
     * Add events to the store and triggers calculations directly after. Await this function to have up to date data on
     * the added events.
     * @param {EventModel|EventModel[]|Partial<EventModelConfig>|Partial<EventModelConfig>[]} records Array of records/data or a single record/data to add to store
     * @param {boolean} silent Specify `true` to suppress events
     */
    addAsync(records: EventModel|EventModel[]|Partial<EventModelConfig>|Partial<EventModelConfig>[], silent?: boolean): Promise<EventModel[]>;
    /**
     * Appends a new record to the store
     * @param {EventModel} record The record to append to the store
     */
    append(record: EventModel): void;
    /**
     * Creates and adds assignment record for a given event and a resource.
     * @param {EventModel|string|number} event
     * @param {ResourceModel|string|number|ResourceModel[]|string[]|number[]} resource The resource(s) to assign to the event
     * @param {boolean} removeExistingAssignments `true` to first remove existing assignments
     */
    assignEventToResource(event: EventModel|string|number, resource: ResourceModel|string|number|ResourceModel[]|string[]|number[], removeExistingAssignments?: boolean): AssignmentModel[];
    /**
     * Calls the supplied iterator function once for every scheduled event, providing these arguments
     * @param {Function} fn iterator function
     * @param {object} thisObj `this` reference for the function
     */
    forEachScheduledEvent(fn: Function, thisObj?: object): void;
    /**
     * Returns all assignments for a given event.
     * @param {EventModel|string|number} event
     */
    getAssignmentsForEvent(event: EventModel|string|number): AssignmentModel[];
    /**
     * Returns all assignments for a given resource.
     * @param {ResourceModel|string|number} resource
     */
    getAssignmentsForResource(resource: ResourceModel|string|number): AssignmentModel[];
    /**
     * Returns a `Map`, keyed by `YYYY-MM-DD` date keys containing event counts for all the days
     * between the passed `startDate` and `endDate`. Occurrences of recurring events are included.
     * @param {object} options An options object determining which events to return
     */
    getEventCounts(options: {
        startDate: Date
        endDate?: Date
    }): void;
    /**
     * Returns all events assigned to a resource.
     * *NOTE:* this does not include occurrences of recurring events. Use the
     * [getEvents](https://bryntum.com/products/scheduler/docs#Scheduler/data/mixin/GetEventsMixin#function-getEvents) API to include occurrences of recurring events.
     * @param {ResourceModel|string|number} resource Resource or resource id.
     */
    getEventsForResource(resource: ResourceModel|string|number): EventModel[];
    /**
     * Returns all resources assigned to an event.
     * @param {EventModel|string|number} event
     */
    getResourcesForEvent(event: EventModel|string|number): ResourceModel[];
    /**
     * Returns an object defining the earliest start date and the latest end date of all the events in the store.
     */
    getTotalTimeSpan(): object;
    /**
     * Checks if a date range is allocated or not for a given resource.
     * @param {Date} start The start date
     * @param {Date} end The end date
     * @param {EventModel|null} excludeEvent An event to exclude from the check (or null)
     * @param {ResourceModel} resource The resource
     */
    isDateRangeAvailable(start: Date, end: Date, excludeEvent: EventModel|null, resource: ResourceModel): boolean;
    /**
     * Checks whether an event is assigned to a resource.
     * @param {EventModel|string|number} event
     * @param {ResourceModel|string|number} resource
     */
    isEventAssignedToResource(event: EventModel|string|number, resource: ResourceModel|string|number): boolean;
    /**
     * Checks if given event record is persistable. By default it always is, override EventModels `isPersistable` if you
     * need custom logic.
     * @param {EventModel} event
     */
    isEventPersistable(event: EventModel): boolean;
    /**
     * Applies a new dataset to the EventStore and triggers calculations directly after. Use it to plug externally
     * fetched data into the store.
     * @param {Partial<EventModelConfig>[]} data Array of EventModel data objects
     */
    loadDataAsync(data: Partial<EventModelConfig>[]): Promise<void>;
    /**
     * Reassigns an event from an old resource to a new resource
     * @param {EventModel} event An event or id of the event to reassign
     * @param {ResourceModel|ResourceModel[]} oldResource A resource or id to unassign from
     * @param {ResourceModel|ResourceModel[]} newResource A resource or id to assign to
     */
    reassignEventFromResourceToResource(event: EventModel, oldResource: ResourceModel|ResourceModel[], newResource: ResourceModel|ResourceModel[]): void;
    /**
     * Removes all assignments for given event
     * @param {EventModel|string|number} event
     */
    removeAssignmentsForEvent(event: EventModel|string|number): void;
    /**
     * Removes all assignments for given resource
     * @param {ResourceModel|string|number} resource
     */
    removeAssignmentsForResource(resource: ResourceModel|string|number): void;
    /**
     * Removes assignment record for a given event and a resource.
     * @param {EventModel|string|number} event
     * @param {ResourceModel|string|number} resource
     */
    unassignEventFromResource(event: EventModel|string|number, resource: ResourceModel|string|number): void;
}

export const EventStoreMixin : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & EventStoreMixinClass>

/**
 * Type with configuration options for [GetEventsMixin](https://bryntum.com/products/grid/docs/api/Scheduler/data/mixin/GetEventsMixin) class.
 */
type GetEventsMixinClassConfig = {
    /**
     * Fired when a range of events is requested from the [getEvents](https://bryntum.com/products/scheduler/docs#Scheduler/data/mixin/GetEventsMixin#function-getEvents) method.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/mixin/GetEventsMixin#event-loadDateRange)
     * @param {object} event Event object
     * @param {EventStore} event.source This EventStore
     * @param {object} event.old The old date range
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     * @param {boolean} event.changed `true` if the date range is different from the last time a request was made.
     */
    onLoadDateRange: ((event: { source: EventStore, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date }, changed: boolean }) => void)|string
}

export class GetEventsMixinClass {
    /**
     * Fired when a range of events is requested from the [getEvents](https://bryntum.com/products/scheduler/docs#Scheduler/data/mixin/GetEventsMixin#function-getEvents) method.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/mixin/GetEventsMixin#event-loadDateRange)
     * @param {object} event Event object
     * @param {EventStore} event.source This EventStore
     * @param {object} event.old The old date range
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     * @param {boolean} event.changed `true` if the date range is different from the last time a request was made.
     */
    onLoadDateRange: ((event: { source: EventStore, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date }, changed: boolean }) => void)|string
    /**
     * Returns an array of events for the date range specified by the `startDate` and `endDate` options.
     * @param {object} options An options object determining which events to return
     */
    getEvents(options: {
        date?: Date
        startDate: Date
        endDate?: Date
        resourceRecord?: ResourceModel
        filter?: Function
        ignoreFilters?: boolean
        includeOccurrences?: boolean
        allowPartial?: boolean
        startOnly?: boolean
        onlyAssigned?: boolean
        dateMap?: boolean|Map<any, any>
    }): EventModel[]|Map<any, any>;
}

export const GetEventsMixin : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & GetEventsMixinClass>

export class PartOfProjectClass {
    /**
     * Returns the assignment store of the project this entity belongs to.
     */
    readonly assignmentStore: AssignmentStore
    /**
     * Returns the dependency store of the project this entity belongs to.
     */
    readonly dependencyStore: DependencyStore
    /**
     * Returns the event store of the project this entity belongs to.
     */
    readonly eventStore: EventStore
    /**
     * Returns the project this entity belongs to.
     */
    readonly project: SchedulerProjectModel
    /**
     * Returns the resource store of the project this entity belongs to.
     */
    readonly resourceStore: ResourceStore
}

export const PartOfProject : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & PartOfProjectClass>

/**
 * Type with configuration options for [ProjectCrudManager](https://bryntum.com/products/grid/docs/api/Scheduler/data/mixin/ProjectCrudManager) class.
 */
type ProjectCrudManagerClassConfig = {
    /**
     * Specify `true` to automatically call [load](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) method on the next frame after creation.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/mixin/ProjectCrudManager#config-autoLoad)
     */
    autoLoad: boolean
    /**
     * `true` to automatically persist store changes after edits are made in any of the stores monitored.
     * Please note that sync request will not be invoked immediately but only after
     * [autoSyncTimeout](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#config-autoSyncTimeout) interval.
     */
    autoSync: boolean
    /**
     * The timeout in milliseconds to wait before persisting changes to the server.
     * Used when [autoSync](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#config-autoSync) is set to `true`.
     */
    autoSyncTimeout: number
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/mixin/ProjectCrudManager#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/mixin/ProjectCrudManager#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Sets the list of stores controlled by the CRUD manager.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/mixin/ProjectCrudManager#config-crudStores)
     */
    crudStores: Store[]|string[]|CrudManagerStoreDescriptor[]
    /**
     * Configuration of the JSON encoder used by the *Crud Manager*.
     */
    encoder: {
        requestData?: object
    }
    /**
     * Specify as `true` to force sync requests to be sent when calling `sync()`, even if there are no local
     * changes. Useful in a polling scenario, to keep client up to date with the backend.
     */
    forceSync: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/mixin/ProjectCrudManager#config-listeners)
     */
    listeners: object
    /**
     * Convenience shortcut to set only the url to load from, when you do not need to supply any other config
     * options in the `load` section of the `transport` config.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/mixin/ProjectCrudManager#config-loadUrl)
     */
    loadUrl: string
    /**
     * Field name to be used to transfer a phantom record identifier.
     */
    phantomIdField: string
    /**
     * Field name to be used to transfer a phantom parent record identifier.
     */
    phantomParentIdField: string
    /**
     * `True` to reset identifiers (defined by `idField` config) of phantom records before submitting them
     * to the server.
     */
    resetIdsBeforeSync: boolean
    /**
     * When `true` treats parsed responses without `success` property as successful.
     * In this mode a parsed response is treated as invalid if it has explicitly set `success : false`.
     */
    skipSuccessProperty: boolean
    /**
     * Name of a store property to retrieve store identifiers from. Make sure you have an instance of a
     * store to use it by id. Store identifier is used as a container name holding corresponding store data
     * while transferring them to/from the server. By default, `storeId` property is used. And in case a
     * container identifier has to differ this config can be used:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/mixin/ProjectCrudManager#config-storeIdProperty)
     */
    storeIdProperty: string
    /**
     * When `true` the Crud Manager does not require all updated and removed records to be mentioned in the
     * *sync* response. In this case response should include only server side changes.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/mixin/ProjectCrudManager#config-supportShortSyncResponse)
     */
    supportShortSyncResponse: boolean
    /**
     * An array of store identifiers sets an alternative sync responses apply order.
     * By default, the order in which sync responses are applied to the stores is the same as they
     * registered in. But in case of some tricky dependencies between stores this order can be changed:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/mixin/ProjectCrudManager#config-syncApplySequence)
     */
    syncApplySequence: string[]
    /**
     * Convenience shortcut to set only the url to sync to, when you do not need to supply any other config
     * options in the `sync` section of the `transport` config.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/mixin/ProjectCrudManager#config-syncUrl)
     */
    syncUrl: string
    /**
     * When `true` forces the CRUD manager to process responses depending on their `type` attribute.
     * So `load` request may be responded with `sync` response for example.
     * Can be used for smart server logic allowing the server to decide when it's better to respond with a
     * complete data set (`load` response) or it's enough to return just a delta (`sync` response).
     */
    trackResponseType: boolean
    /**
     * Configuration of the AJAX requests used by *Crud Manager* to communicate with a server-side.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/mixin/ProjectCrudManager#config-transport)
     */
    transport: {
        load?: object
        sync?: object
    }
    /**
     * This config validates the response structure for requests made by the Crud Manager.
     * When `true`, the Crud Manager checks every parsed response structure for errors
     * and if the response format is invalid, a warning is logged to the browser console.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/mixin/ProjectCrudManager#config-validateResponse)
     */
    validateResponse: boolean
    /**
     * `true` to write all fields from the record to the server.
     * If set to `false` it will only send the fields that were modified.
     * Note that any fields that have [persist](https://bryntum.com/products/taskboard/docs/api/Core/data/field/DataField#config-persist) set to `false` will
     * still be ignored and fields having [alwaysWrite](https://bryntum.com/products/taskboard/docs/api/Core/data/field/DataField#config-alwaysWrite) set to `true`
     * will always be included.
     */
    writeAllFields: boolean
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires before [load request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) is sent. Return `false` to cancel load request.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onBeforeLoad: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires before loaded data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.options Options provided to the [load](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) method.
     */
    onBeforeLoadApply: ((event: { source: AbstractCrudManager, response: object, options: object }) => void)|string
    /**
     * Fires before server response gets applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     */
    onBeforeResponseApply: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object }) => void)|string
    /**
     * Fires before a request is sent to the server.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/mixin/ProjectCrudManager#event-beforeSend)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.crudManager The CRUD manager.
     * @param {object} event.params HTTP request params to be passed in the request URL.
     * @param {'sync'|'load'} event.requestType CrudManager request type (`load`/`sync`)
     * @param {object} event.requestConfig Configuration object for Ajax request call
     */
    onBeforeSend: ((event: { crudManager: AbstractCrudManager, params: object, requestType: 'sync'|'load', requestConfig: object }) => Promise<void>)|string
    /**
     * Fires before [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) is sent. Return `false` to cancel sync request.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/mixin/ProjectCrudManager#event-beforeSync)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onBeforeSync: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires before sync response data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     */
    onBeforeSyncApply: ((event: { source: AbstractCrudManager, response: object }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/mixin/ProjectCrudManager#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when data in any of the registered data stores is changed.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/mixin/ProjectCrudManager#event-hasChanges)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     */
    onHasChanges: ((event: { source: AbstractCrudManager }) => void)|string
    /**
     * Fires on successful [load request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) completion after data gets loaded to the stores.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onLoad: ((event: { source: AbstractCrudManager, response: object, responseOptions: object }) => void)|string
    /**
     * Fired after [load request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) was canceled by some [beforeLoad](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#event-beforeLoad)
     * listener or due to incomplete prior load request.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onLoadCanceled: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires when a [load request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onLoadFail: ((event: { source: AbstractCrudManager, response: object, responseText: string, responseOptions: object }) => void)|string
    /**
     * Fires when registered stores get into state when they don't have any
     * not persisted change. This happens after [load](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) or [sync](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) request
     * completion. Or this may happen after a record update which turns its fields back to their original state.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/mixin/ProjectCrudManager#event-noChanges)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     */
    onNoChanges: ((event: { source: AbstractCrudManager }) => void)|string
    /**
     * Fires on successful request completion after data gets applied to the stores.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onRequestDone: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object, responseOptions: object }) => void)|string
    /**
     * Fires when a request fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onRequestFail: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object, responseText: string, responseOptions: object }) => void)|string
    /**
     * Fires on successful [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) completion.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onSync: ((event: { source: AbstractCrudManager, response: object, responseOptions: object }) => void)|string
    /**
     * Fires after [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) was canceled by some [beforeSync](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#event-beforeSync) listener.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onSyncCanceled: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires after [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) was delayed due to incomplete previous one.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.arguments The arguments of [sync](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) call.
     */
    onSyncDelayed: ((event: { source: AbstractCrudManager, arguments: object }) => void)|string
    /**
     * Fires when a [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onSyncFail: ((event: { source: AbstractCrudManager, response: object, responseText: string, responseOptions: object }) => void)|string
}

export class ProjectCrudManagerClass {
    /**
     * Returns current changes as an object consisting of added/modified/removed arrays of records for every
     * managed store, keyed by each store's `id`. Returns `null` if no changes exist. Format:
     */
    readonly changes: object
    /**
     * The server revision stamp.
     * The *revision stamp* is a number which should be incremented after each server-side change.
     * This property reflects the current version of the data retrieved from the server and gets updated
     * after each [load](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) and [sync](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) call.
     */
    readonly crudRevision: number
    /**
     * A list of registered stores whose server communication will be collected into a single batch.
     * Each store is represented by a *store descriptor*.
     */
    crudStores: CrudManagerStoreDescriptor[]
    /**
     * Specify as `true` to force sync requests to be sent when calling `sync()`, even if there are no local
     * changes. Useful in a polling scenario, to keep client up to date with the backend.
     */
    forceSync: boolean
    /**
     * Returns `true` if changes tracking is suspended
     */
    readonly isChangeTrackingSuspended: boolean
    /**
     * Returns true if the crud manager is currently loading data
     */
    readonly isCrudManagerLoading: boolean
    /**
     * Returns true if the crud manager is currently syncing data
     */
    readonly isCrudManagerSyncing: boolean
    /**
     * Convenience shortcut to set only the url to load from, when you do not need to supply any other config
     * options in the `load` section of the `transport` config.
     */
    loadUrl: string
    /**
     * An array of stores presenting an alternative sync responses apply order.
     * Each store is represented by a *store descriptor*.
     */
    syncApplySequence: CrudManagerStoreDescriptor[]
    /**
     * Convenience shortcut to set only the url to sync to, when you do not need to supply any other config
     * options in the `sync` section of the `transport` config.
     */
    syncUrl: string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires before [load request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) is sent. Return `false` to cancel load request.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onBeforeLoad: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires before loaded data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.options Options provided to the [load](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) method.
     */
    onBeforeLoadApply: ((event: { source: AbstractCrudManager, response: object, options: object }) => void)|string
    /**
     * Fires before server response gets applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     */
    onBeforeResponseApply: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object }) => void)|string
    /**
     * Fires before a request is sent to the server.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/mixin/ProjectCrudManager#event-beforeSend)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.crudManager The CRUD manager.
     * @param {object} event.params HTTP request params to be passed in the request URL.
     * @param {'sync'|'load'} event.requestType CrudManager request type (`load`/`sync`)
     * @param {object} event.requestConfig Configuration object for Ajax request call
     */
    onBeforeSend: ((event: { crudManager: AbstractCrudManager, params: object, requestType: 'sync'|'load', requestConfig: object }) => Promise<void>)|string
    /**
     * Fires before [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) is sent. Return `false` to cancel sync request.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/mixin/ProjectCrudManager#event-beforeSync)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onBeforeSync: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires before sync response data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     */
    onBeforeSyncApply: ((event: { source: AbstractCrudManager, response: object }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/mixin/ProjectCrudManager#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when data in any of the registered data stores is changed.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/mixin/ProjectCrudManager#event-hasChanges)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     */
    onHasChanges: ((event: { source: AbstractCrudManager }) => void)|string
    /**
     * Fires on successful [load request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) completion after data gets loaded to the stores.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onLoad: ((event: { source: AbstractCrudManager, response: object, responseOptions: object }) => void)|string
    /**
     * Fired after [load request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) was canceled by some [beforeLoad](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#event-beforeLoad)
     * listener or due to incomplete prior load request.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onLoadCanceled: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires when a [load request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onLoadFail: ((event: { source: AbstractCrudManager, response: object, responseText: string, responseOptions: object }) => void)|string
    /**
     * Fires when registered stores get into state when they don't have any
     * not persisted change. This happens after [load](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) or [sync](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) request
     * completion. Or this may happen after a record update which turns its fields back to their original state.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/data/mixin/ProjectCrudManager#event-noChanges)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     */
    onNoChanges: ((event: { source: AbstractCrudManager }) => void)|string
    /**
     * Fires on successful request completion after data gets applied to the stores.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onRequestDone: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object, responseOptions: object }) => void)|string
    /**
     * Fires when a request fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onRequestFail: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object, responseText: string, responseOptions: object }) => void)|string
    /**
     * Fires on successful [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) completion.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onSync: ((event: { source: AbstractCrudManager, response: object, responseOptions: object }) => void)|string
    /**
     * Fires after [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) was canceled by some [beforeSync](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#event-beforeSync) listener.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onSyncCanceled: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires after [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) was delayed due to incomplete previous one.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.arguments The arguments of [sync](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) call.
     */
    onSyncDelayed: ((event: { source: AbstractCrudManager, arguments: object }) => void)|string
    /**
     * Fires when a [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onSyncFail: ((event: { source: AbstractCrudManager, response: object, responseText: string, responseOptions: object }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<ProjectCrudManagerClassConfig>} config
     */
    constructor(config?: Partial<ProjectCrudManagerClassConfig>);
    /**
     * Accepts all changes in all stores, resets the modification tracking:
     */
    acceptChanges(): void;
    /**
     * Adds a store to the collection.
     * @param {Store|string|CrudManagerStoreDescriptor|Store[]|string[]|CrudManagerStoreDescriptor[]} store A store or list of stores. Each store might be specified by its instance, `storeId` or *descriptor*.
     * @param {number} position The relative position of the store. If `fromStore` is specified the position will be taken relative to it. If not specified then store(s) will be appended to the end of collection. Otherwise, it will be just a position in stores collection. ```javascript // insert stores store4, store5 to the start of collection crudManager.addCrudStore([ store4, store5 ], 0); ```
     * @param {string|Store|CrudManagerStoreDescriptor} fromStore The store relative to which position should be calculated. Can be defined as a store identifier, instance or descriptor (the result of [getStoreDescriptor](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-getStoreDescriptor) call). ```javascript // insert store6 just before a store having storeId equal to 'foo' crudManager.addCrudStore(store6, 0, 'foo');  // insert store7 just after store3 store crudManager.addCrudStore(store7, 1, store3); ```
     */
    addCrudStore(store: Store|string|CrudManagerStoreDescriptor|Store[]|string[]|CrudManagerStoreDescriptor[], position?: number, fromStore?: string|Store|CrudManagerStoreDescriptor): void;
    /**
     * Adds an event listener. This method accepts parameters in the following format:
     * @param {BryntumListenerConfig|string} config An object containing listener definitions, or the event name to listen for
     * @param {object|Function} thisObj Default `this` reference for all listeners in the config object, or the handler function to call if providing a string as the first arg.
     * @param {object} oldThisObj The `this` reference if the old signature starting with a string event name is used..
     */
    addListener(config: BryntumListenerConfig|string, thisObj?: object|Function, oldThisObj?: object): Function;
    /**
     * Adds a store to the alternative sync responses apply sequence.
     * By default, the order in which sync responses are applied to the stores is the same as they registered in.
     * But this order can be changes either on construction step using [syncApplySequence](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#config-syncApplySequence) option
     * or by calling this method.
     * @param {Store|CrudManagerStoreDescriptor|Store[]|CrudManagerStoreDescriptor[]} store The store to add or its *descriptor* (or array of stores or descriptors).
     * @param {number} position The relative position of the store. If `fromStore` is specified the position will be taken relative to it. If not specified then store(s) will be appended to the end of collection. Otherwise, it will be just a position in stores collection. ```javascript // insert stores store4, store5 to the start of sequence crudManager.addStoreToApplySequence([ store4, store5 ], 0); ```
     * @param {string|Store|CrudManagerStoreDescriptor} fromStore The store relative to which position should be calculated. Can be defined as a store identifier, instance or its descriptor (the result of [getStoreDescriptor](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-getStoreDescriptor) call). ```javascript // insert store6 just before a store having storeId equal to 'foo' crudManager.addStoreToApplySequence(store6, 0, 'foo');  // insert store7 just after store3 store crudManager.addStoreToApplySequence(store7, 1, store3); ```
     */
    addStoreToApplySequence(store: Store|CrudManagerStoreDescriptor|Store[]|CrudManagerStoreDescriptor[], position?: number, fromStore?: string|Store|CrudManagerStoreDescriptor): void;
    /**
     * Applies a set of changes, as an object keyed by store id, to the affected stores. This function is intended
     * to use in apps that handle their own data syncing, it is not needed when using the CrudManager approach.
     * @param {object} changes Changeset to apply, an object keyed by store id where each value follows the format described in [applyChangeset](https://bryntum.com/products/taskboard/docs/api/Core/data/Store#function-applyChangeset)
     * @param {Function} transformFn Optional function used to preprocess a changeset per store in a different format, should return an object with the format expected by [applyChangeset](https://bryntum.com/products/taskboard/docs/api/Core/data/Store#function-applyChangeset)
     * @param {string} phantomIdField Field used by the backend when communicating a record being assigned a proper id instead of a phantom id
     */
    applyChangeset(changes: object, transformFn?: Function, phantomIdField?: string): void;
    /**
     * Cancels a sent request.
     * @param {Promise<any>} requestPromise The Promise object wrapping the Request to be cancelled. The *requestPromise* is the value returned from the corresponding [sendRequest](https://bryntum.com/products/scheduler/docs#Scheduler/crud/transport/AjaxTransport#function-sendRequest) call.
     */
    cancelRequest(requestPromise: Promise<any>): void;
    /**
     * Returns `true` if any of registered stores (or some particular store) has non persisted changes.
     * @param {string|Store} storeId The store identifier or store instance to check changes for. If not specified then will check changes for all of the registered stores.
     */
    crudStoreHasChanges(storeId?: string|Store): boolean;
    /**
     * Decodes (parses) a *JSON* response string to an object. If parsing fails, it returns null.
     * Supposed to be overridden in case data provided by server has to be transformed into format requested by the *Crud Manager*.
     * @param {string} responseText The response text to decode.
     */
    decode(responseText: string): object;
    /**
     * Encodes a request object to *JSON* encoded string. If encoding fails (due to circular structure), it returns null.
     * Supposed to be overridden in case data provided by the *Crud Manager* has to be transformed into format requested by server.
     * @param {object} requestData The request to encode.
     */
    encode(requestData: object): string;
    /**
     * Returns a registered store.
     * @param {string} storeId Store identifier.
     */
    getCrudStore(storeId: string): Store;
    /**
     * Returns a registered store descriptor.
     * @param {string|Store} storeId The store identifier or registered store instance.
     */
    getStoreDescriptor(storeId: string|Store): CrudManagerStoreDescriptor;
    /**
     * Check if any listener is registered for the specified eventName
     * @param {string} eventName
     */
    hasListener(eventName: string): boolean;
    /**
     * Loads data to the stores registered in the crud manager. For example:
     * @param {object|string} options The request parameters or a URL.
     */
    load(options?: {
        request?: object
    }|string): Promise<any>;
    /**
     * Loads data to the Crud Manager
     * @param {object} response A simple object representing the data. The object structure matches the decoded `load` response structure: ```javascript // load static data into crudManager crudManager.loadCrudManagerData({     success   : true,     resources : {         rows : [             { id : 1, name : 'John' },             { id : 2, name : 'Abby' }         ]     } }); ```
     * @param {object} options Extra data loading options.
     */
    loadCrudManagerData(response: object, options?: object): void;
    /**
     * Alias for [addListener](https://bryntum.com/products/taskboard/docs/api/Core/mixin/Events#function-addListener). Adds an event listener. This method accepts parameters in the following format:
     * @param {BryntumListenerConfig|string} config An object containing listener definitions, or the event name to listen for
     * @param {object|Function} thisObj Default `this` reference for all listeners in the config object, or the handler function to call if providing a string as the first arg.
     * @param {object} oldThisObj The `this` reference if the old signature starting with a string event name is used..
     */
    on(config: BryntumListenerConfig|string, thisObj?: object|Function, oldThisObj?: object): Function;
    /**
     * Relays all events through another object that also implements Events mixin. Adds a prefix to the event name
     * before relaying, for example add -&gt; storeAdd
     * @param {EventsClass} through Object to relay the events through, needs to mix Events mixin in
     * @param {string} prefix Prefix to add to event name
     * @param {boolean} transformCase Specify false to prevent making first letter of event name uppercase
     */
    relayAll(through: EventsClass, prefix: string, transformCase?: boolean): void;
    /**
     * Removes all listeners registered to this object by the application.
     */
    removeAllListeners(): void;
    /**
     * Removes a store from collection. If the store was registered in alternative sync sequence list
     * it will be removed from there as well.
     * @param {CrudManagerStoreDescriptor|string|Store} store The store to remove. Either the store descriptor, store identifier or store itself.
     */
    removeCrudStore(store: CrudManagerStoreDescriptor|string|Store): void;
    /**
     * Removes an event listener. Same API signature as [addListener](https://bryntum.com/products/taskboard/docs/api/Core/mixin/Events#function-addListener)
     * @param {object|string} config A config object or the event name
     * @param {object|Function} thisObj `this` reference for all listeners, or the listener function
     * @param {object} oldThisObj `this` The `this` object for the legacy way of adding listeners
     */
    removeListener(config: object|string, thisObj: object|Function, oldThisObj: object): void;
    /**
     * Removes a store from the alternative sync sequence.
     * @param {CrudManagerStoreDescriptor|string|Store} store The store to remove. Either the store descriptor, store identifier or store itself.
     */
    removeStoreFromApplySequence(store: CrudManagerStoreDescriptor|string|Store): void;
    /**
     * Resumes automatic sync upon store changes. Will schedule a sync if the internal counter is 0.
     * @param {boolean} doSync Pass `true` to schedule a sync after resuming (if there are pending changes) and `false` to not persist the changes.
     */
    resumeAutoSync(doSync?: boolean): void;
    /**
     * Resumes [hasChanges](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#event-hasChanges) and [noChanges](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#event-noChanges) events. By default, it will check for changes
     * and if there are any, `hasChanges` or `noChanges` event will be triggered.
     * @param {boolean} skipChangeCheck
     */
    resumeChangeTracking(skipChangeCheck?: boolean): void;
    /**
     * Resume event triggering after a call to [suspendEvents()](https://bryntum.com/products/taskboard/docs/api/Core/mixin/Events#function-suspendEvents). If any triggered events were queued they will be triggered.
     */
    resumeEvents(): boolean;
    /**
     * Reverts all changes in all stores and re-inserts any records that were removed locally. Any new uncommitted
     * records will be removed.
     */
    revertChanges(): void;
    /**
     * Sends a *Crud Manager* request to the server.
     * @param {object} request The request configuration object having following properties:
     */
    sendRequest(request: {
        type: 'load'|'sync'
        url: string
        data: string
        params: object
        success: Function
        failure: Function
        thisObj: object
    }): Promise<any>;
    /**
     * Suspends automatic sync upon store changes. Can be called multiple times (it uses an internal counter).
     */
    suspendAutoSync(): void;
    /**
     * Suspends [hasChanges](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#event-hasChanges) and [noChanges](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#event-noChanges) events.
     */
    suspendChangeTracking(): void;
    /**
     * Prevents events from being triggered until [resumeEvents()](https://bryntum.com/products/taskboard/docs/api/Core/mixin/Events#function-resumeEvents) is called. Optionally queues events that are triggered while
     * suspended. Multiple calls stack to require matching calls to `resumeEvents()` before actually resuming.
     * @param {boolean} queue Specify true to queue events triggered while suspended
     */
    suspendEvents(queue?: boolean): void;
    /**
     * Persists changes made on the registered stores to the server and/or receives changes made on the backend.
     * Usage:
     */
    sync(): Promise<any>;
    /**
     * Triggers an event, calling all registered listeners with the supplied arguments. Returning false from any listener
     * makes function return false.
     * @param {string} eventName Event name for which to trigger listeners
     * @param {{bubbles?: boolean, [key: string]: any}} param Single parameter passed on to listeners, source property will be added to it (this)
     */
    trigger(eventName: string, param?: {bubbles?: boolean, [key: string]: any}): Promise<boolean|any>;
    /**
     * Shorthand for [removeListener](https://bryntum.com/products/taskboard/docs/api/Core/mixin/Events#function-removeListener)
     * @param {object|string} config A config object or the event name
     * @param {object|Function} thisObj `this` reference for all listeners, or the listener function
     * @param {object} oldThisObj `this` The `this` object for the legacy way of adding listeners
     */
    un(config: object|string, thisObj?: object|Function, oldThisObj?: object): void;
}

export const ProjectCrudManager : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & ProjectCrudManagerClass>

export class RecurringEventsMixinClass extends RecurringTimeSpansMixinClass {
    /**
     * Returns all the recurring events.
     */
    getRecurringEvents(): EventModel[];
}

export const RecurringEventsMixin : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & RecurringEventsMixinClass>

export class RecurringTimeSpansMixinClass {
    /**
     * Returns all the recurring timespans.
     */
    getRecurringTimeSpans(): TimeSpan[];
}

export const RecurringTimeSpansMixin : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & RecurringTimeSpansMixinClass>

export class ResourceStoreMixinClass {
    /**
     * Applies a new dataset to the ResourceStore. Use it to plug externally fetched data into the store.
     */
    data: Partial<ResourceModelConfig>[]
    /**
     * Add resources to the store.
     * @param {ResourceModel|ResourceModel[]|Partial<ResourceModelConfig>|Partial<ResourceModelConfig>[]} records Array of records/data or a single record/data to add to store
     * @param {boolean} silent Specify `true` to suppress events
     */
    add(records: ResourceModel|ResourceModel[]|Partial<ResourceModelConfig>|Partial<ResourceModelConfig>[], silent?: boolean): ResourceModel[];
    /**
     * Add resources to the store and triggers calculations directly after. Await this function to have up to date
     * references on the added resources.
     * @param {ResourceModel|ResourceModel[]|Partial<ResourceModelConfig>|Partial<ResourceModelConfig>[]} records Array of records/data or a single record/data to add to store
     * @param {boolean} silent Specify `true` to suppress events
     */
    addAsync(records: ResourceModel|ResourceModel[]|Partial<ResourceModelConfig>|Partial<ResourceModelConfig>[], silent?: boolean): Promise<ResourceModel[]>;
    /**
     * Returns all resources that have no events assigned during the specified time range.
     * @param {Date} startDate Time range start date
     * @param {Date} endDate Time range end date
     */
    getAvailableResources(startDate: Date, endDate: Date): ResourceModel[];
    /**
     * Applies a new dataset to the ResourceStore and triggers calculations directly after. Use it to plug externally
     * fetched data into the store.
     * @param {Partial<ResourceModelConfig>[]} data Array of ResourceModel data objects
     */
    loadDataAsync(data: Partial<ResourceModelConfig>[]): Promise<void>;
}

export const ResourceStoreMixin : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & ResourceStoreMixinClass>

/**
 * Type with configuration options for [AssignmentModel](https://bryntum.com/products/grid/docs/api/Scheduler/model/AssignmentModel) class.
 */
type AssignmentModelConfig = {
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/AssignmentModel#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * Specify `false` to opt out of drawing dependencies from/to this assignment
     */
    drawDependencies: boolean
    /**
     * Id for event to assign. Can be used as an alternative to `eventId`, but please note that after
     * load it will be populated with the actual event and not its id. This field is not persistable.
     */
    event: string|number|EventModel|TimeSpan
    /**
     * Id for the event to assign
     */
    eventId: string|number
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/AssignmentModel#config-id)
     */
    id: string|number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/AssignmentModel#config-readOnly)
     */
    readOnly: boolean
    /**
     * Id for resource to assign to. Can be used as an alternative to `resourceId`, but please note that after
     * load it will be populated with the actual resource and not its id. This field is not persistable.
     */
    resource: string|number|ResourceModel
    /**
     * Id for the resource to assign to
     */
    resourceId: string|number
}

/**
 * This model represents a single assignment of a resource to an event in the scheduler, usually added to a
 * [AssignmentStore](https://bryntum.com/products/scheduler/docs#Scheduler/data/AssignmentStore).
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/AssignmentModel)
 */
export class AssignmentModel extends Model {
    /**
     * Specify `false` to opt out of drawing dependencies from/to this assignment
     */
    drawDependencies: boolean
    /**
     * Id for event to assign. Can be used as an alternative to `eventId`, but please note that after
     * load it will be populated with the actual event and not its id. This field is not persistable.
     */
    event: string|number|EventModel|TimeSpan
    /**
     * Id for the event to assign
     */
    eventId: string|number
    /**
     * Convenience property to get the name of the associated event.
     */
    readonly eventName: string
    /**
     * Returns true if the Assignment can be persisted (e.g. task and resource are not 'phantoms')
     */
    isPersistable: boolean
    /**
     * Id for resource to assign to. Can be used as an alternative to `resourceId`, but please note that after
     * load it will be populated with the actual resource and not its id. This field is not persistable.
     */
    resource: string|number|ResourceModel
    /**
     * Id for the resource to assign to
     */
    resourceId: string|number
    /**
     * Convenience property to get the name of the associated resource.
     */
    readonly resourceName: string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<AssignmentModelConfig>} config Raw model config
     * @param {Store} store Data store
     * @param {object} meta Meta data
     */
    constructor(config?: Partial<AssignmentModelConfig>, store?: Store, meta?: object);
    /**
     * Returns the resource associated with this assignment.
     */
    getResource(): ResourceModel;
    /**
     * Set value for the specified field(s), triggering engine calculations immediately. See
     * [Model#set()](https://bryntum.com/products/taskboard/docs/api/Core/data/Model#function-set) for arguments.
     * @param {string|object} field The field to set value for, or an object with multiple values to set in one call
     * @param {any} value Value to set
     * @param {boolean} silent Set to true to not trigger events automatically.
     */
    setAsync(field: string|object, value?: any, silent?: boolean): Promise<void>;
    /**
     * Returns a textual representation of this assignment (e.g. Mike 50%).
     */
    toString(): string;
}

/**
 * Type with configuration options for [DependencyBaseModel](https://bryntum.com/products/grid/docs/api/Scheduler/model/DependencyBaseModel) class.
 */
type DependencyBaseModelConfig = {
    /**
     * Bidirectional, drawn with arrows in both directions
     */
    bidirectional: boolean
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/DependencyBaseModel#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * CSS class to apply to lines drawn for the dependency
     */
    cls: string
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * From event, id of source event
     */
    from: string|number
    /**
     * Gets/sets the source event of the dependency.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/DependencyBaseModel#config-fromEvent)
     */
    fromEvent: string|number|EventModel
    /**
     * Start side on source (top, left, bottom, right)
     */
    fromSide: 'top'|'left'|'bottom'|'right'
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/DependencyBaseModel#config-id)
     */
    id: string|number
    /**
     * The magnitude of this dependency's lag (the number of units).
     */
    lag: number
    /**
     * The units of this dependency's lag, defaults to "d" (days). Valid values are:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/DependencyBaseModel#config-lagUnit)
     */
    lagUnit: 'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y'
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/DependencyBaseModel#config-readOnly)
     */
    readOnly: boolean
    /**
     * To event, id of target event
     */
    to: string|number
    /**
     * Gets/sets the target event of the dependency.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/DependencyBaseModel#config-toEvent)
     */
    toEvent: string|number|EventModel
    /**
     * End side on target (top, left, bottom, right)
     */
    toSide: 'top'|'left'|'bottom'|'right'
    /**
     * Dependency type, see static property [Type](https://bryntum.com/products/scheduler/docs#Scheduler/model/DependencyBaseModel#property-Type-static)
     */
    type: number
}

/**
 * Base class used for both Scheduler and Gantt. Not intended to be used directly
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/DependencyBaseModel)
 */
export class DependencyBaseModel extends Model {
    /**
     * An enumerable object, containing names for the dependency types integer constants.
     */
    static readonly Type: object
    /**
     * Bidirectional, drawn with arrows in both directions
     */
    bidirectional: boolean
    /**
     * CSS class to apply to lines drawn for the dependency
     */
    cls: string
    /**
     * From event, id of source event
     */
    from: string|number
    /**
     * Gets/sets the source event of the dependency.
     */
    fromEvent: string|number|EventModel
    /**
     * Start side on source (top, left, bottom, right)
     */
    fromSide: 'top'|'left'|'bottom'|'right'
    /**
     * Property which encapsulates the lag's magnitude and units. An object which contains two properties:
     */
    fullLag: Duration
    /**
     * Alias to dependency type, but when set resets [fromSide](https://bryntum.com/products/scheduler/docs#Scheduler/model/DependencyBaseModel#field-fromSide) &amp; [toSide](https://bryntum.com/products/scheduler/docs#Scheduler/model/DependencyBaseModel#field-toSide) to null as well.
     */
    hardType: number
    /**
     * Returns true if the linked events have been persisted (e.g. neither of them are 'phantoms')
     */
    readonly isPersistable: boolean
    /**
     * The magnitude of this dependency's lag (the number of units).
     */
    lag: number
    /**
     * The units of this dependency's lag, defaults to "d" (days). Valid values are:
     */
    readonly lagUnit: 'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y'
    /**
     * To event, id of target event
     */
    to: string|number
    /**
     * Gets/sets the target event of the dependency.
     */
    toEvent: string|number|EventModel
    /**
     * End side on target (top, left, bottom, right)
     */
    toSide: 'top'|'left'|'bottom'|'right'
    /**
     * Dependency type, see static property [Type](https://bryntum.com/products/scheduler/docs#Scheduler/model/DependencyBaseModel#property-Type-static)
     */
    type: number
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<DependencyBaseModelConfig>} config Raw model config
     * @param {Store} store Data store
     * @param {object} meta Meta data
     */
    constructor(config?: Partial<DependencyBaseModelConfig>, store?: Store, meta?: object);
    /**
     * Returns dependency hard type, see [hardType](https://bryntum.com/products/scheduler/docs#Scheduler/model/DependencyBaseModel#property-hardType).
     */
    getHardType(): number;
    /**
     * Applies given CSS class to dependency, the value doesn't persist
     * @param {string} cls
     */
    highlight(cls: string): void;
    /**
     * Checks if the given CSS class is applied to dependency.
     * @param {string} cls
     */
    isHighlightedWith(cls: string): boolean;
    /**
     * Set value for the specified field(s), triggering engine calculations immediately. See
     * [Model#set()](https://bryntum.com/products/taskboard/docs/api/Core/data/Model#function-set) for arguments.
     * *
     * @param {string|object} field The field to set value for, or an object with multiple values to set in one call
     * @param {any} value Value to set
     * @param {boolean} silent Set to true to not trigger events automatically.
     */
    setAsync(field: string|object, value?: any, silent?: boolean): Promise<void>;
    /**
     * Sets dependency [type](https://bryntum.com/products/scheduler/docs#Scheduler/model/DependencyBaseModel#field-type) and resets [fromSide](https://bryntum.com/products/scheduler/docs#Scheduler/model/DependencyBaseModel#field-fromSide) and [toSide](https://bryntum.com/products/scheduler/docs#Scheduler/model/DependencyBaseModel#field-toSide) to null.
     * @param {number} type
     */
    setHardType(type: number): void;
    /**
     * Sets lag and lagUnit in one go. Only allowed way to change lagUnit, the lagUnit field is readonly after creation
     * @param {number|string|object} lag The lag value. May be just a numeric magnitude, or a full string descriptor eg '1d'
     * @param {'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y'} lagUnit Unit for numeric lag value, see [lagUnit](https://bryntum.com/products/scheduler/docs#Scheduler/model/DependencyBaseModel#field-lagUnit) for valid values
     */
    setLag(lag: number|string|object, lagUnit?: 'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y'): void;
    /**
     * Removes given CSS class from dependency if applied, the value doesn't persist
     * @param {string} cls
     */
    unhighlight(cls: string): void;
}

/**
 * Type with configuration options for [DependencyModel](https://bryntum.com/products/grid/docs/api/Scheduler/model/DependencyModel) class.
 */
type DependencyModelConfig = {
    /**
     * Bidirectional, drawn with arrows in both directions
     */
    bidirectional: boolean
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/DependencyModel#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * CSS class to apply to lines drawn for the dependency
     */
    cls: string
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * From event, id of source event
     */
    from: string|number
    /**
     * Gets/sets the source event of the dependency.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/DependencyModel#config-fromEvent)
     */
    fromEvent: string|number|EventModel
    /**
     * Start side on source (top, left, bottom, right)
     */
    fromSide: 'top'|'left'|'bottom'|'right'
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/DependencyModel#config-id)
     */
    id: string|number
    /**
     * The magnitude of this dependency's lag (the number of units).
     */
    lag: number
    /**
     * The units of this dependency's lag, defaults to "d" (days). Valid values are:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/DependencyModel#config-lagUnit)
     */
    lagUnit: 'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y'
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/DependencyModel#config-readOnly)
     */
    readOnly: boolean
    /**
     * To event, id of target event
     */
    to: string|number
    /**
     * Gets/sets the target event of the dependency.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/DependencyModel#config-toEvent)
     */
    toEvent: string|number|EventModel
    /**
     * End side on target (top, left, bottom, right)
     */
    toSide: 'top'|'left'|'bottom'|'right'
    /**
     * Dependency type, see static property [Type](https://bryntum.com/products/scheduler/docs#Scheduler/model/DependencyBaseModel#property-Type-static)
     */
    type: number
}

/**
 * This model represents a dependency between two events, usually added to a [DependencyStore](https://bryntum.com/products/scheduler/docs#Scheduler/data/DependencyStore).
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/DependencyModel)
 */
export class DependencyModel extends DependencyBaseModel {
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<DependencyModelConfig>} config Raw model config
     * @param {Store} store Data store
     * @param {object} meta Meta data
     */
    constructor(config?: Partial<DependencyModelConfig>, store?: Store, meta?: object);
}

/**
 * Type with configuration options for [EventModel](https://bryntum.com/products/grid/docs/api/Scheduler/model/EventModel) class.
 */
type EventModelConfig = {
    /**
     * A field marking event as all day(s) spanning event.
     * For example, a holiday day may be represented by a `startDate`, and the `allDay` flag.
     */
    allDay: boolean
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/EventModel#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * An encapsulation of the CSS classes to add to the rendered time span element.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/EventModel#config-cls)
     */
    cls: DomClassList|string|string[]|object
    /**
     * Specify false to prevent the event from being dragged (if EventDrag feature is used)
     */
    draggable: boolean
    /**
     * The numeric part of the timespan's duration (the number of units).
     */
    duration: number
    /**
     * The unit part of the TimeSpan duration, defaults to "d" (days). Valid values are:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/EventModel#config-durationUnit)
     */
    durationUnit: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'
    /**
     * The end date of a time span (or Event / Task).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/EventModel#config-endDate)
     */
    endDate: string|Date
    /**
     * Controls the primary color of the event. For available standard colors, see
     * [EventColor](https://bryntum.com/products/scheduler/docs#Scheduler/model/mixin/EventModelMixin#typedef-EventColor).
     */
    eventColor: EventColor|string|null
    /**
     * Controls this events appearance, see Schedulers
     * [eventStyle config](https://bryntum.com/products/scheduler/docs#Scheduler/view/mixin/TimelineEventRendering#config-eventStyle) for
     * available options.
     */
    eventStyle: 'plain'|'border'|'colored'|'hollow'|'line'|'dashed'|'minimal'|'rounded'|'calendar'|'interday'|null
    /**
     * A string (either a single date or multiple dates separated by comma) or an array of strings containing
     * the timespan exception dates. The dates that must be skipped when generating occurrences for a repeating
     * timespan. This is used to modify only individual occurrences of the timespan so the further regenerations
     * won't create another copy of this occurrence again.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/EventModel#config-exceptionDates)
     */
    exceptionDates: string|string[]
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Calculated field which encapsulates the duration's magnitude and unit. This field will not be persisted,
     * setting it will update the [duration](https://bryntum.com/products/scheduler/docs#Scheduler/model/TimeSpan#field-duration) and [durationUnit](https://bryntum.com/products/scheduler/docs#Scheduler/model/TimeSpan#field-durationUnit) fields.
     */
    fullDuration: Partial<DurationConfig>|Duration
    /**
     * CSS class specifying an icon to apply to the rendered time span element.
     * <strong>Note</strong>: In case event is a milestone, using `iconCls` with dependency feature might slightly decrease
     * performance because feature will refer to the DOM to get exact size of the element.
     */
    iconCls: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/EventModel#config-id)
     */
    id: string|number
    /**
     * Width (in px) to use for this milestone when using Scheduler#milestoneLayoutMode 'data'.
     */
    milestoneWidth: number
    /**
     * The name of the time span (or Event / Task)
     */
    name: string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/EventModel#config-readOnly)
     */
    readOnly: boolean
    /**
     * The timespan recurrence rule. A string in [RFC-5545](https://tools.ietf.org/html/rfc5545#section-3.3.10)
     * described format ("RRULE" expression).
     */
    recurrenceRule: string
    /**
     * Specify `false` to prevent the event from being resized (if EventResize feature is used). You can also
     * specify `'start'` or `'end'` to only allow resizing in one direction
     */
    resizable: boolean|string
    /**
     * Id of the resource this event is associated with (only usable for single assignments). We recommend
     * using assignments in an AssignmentStore over this approach. Internally any Event using `resourceId`
     * will have an assignment in AssignmentStore generated.
     */
    resourceId: string|number
    /**
     * Ids of the resources this event is associated with (can be used for for multiple assignments).
     * Any event using `resourceIds` will have assignments in AssignmentStore generated automatically.
     * It only applies if is configured with `perist: true`.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/EventModel#config-resourceIds)
     */
    resourceIds: string[]|number[]
    /**
     * The array of [resources](https://bryntum.com/products/scheduler/docs#Scheduler/model/ResourceModel) which are assigned to this event.
     */
    resources: ResourceModel[]
    /**
     * The start date of a time span (or Event / Task).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/EventModel#config-startDate)
     */
    startDate: string|Date
    /**
     * Set this field to `false` to opt out of [sticky event content](https://bryntum.com/products/scheduler/docs#Scheduler/feature/StickyEvents)
     * (keeping event text in view while scrolling).
     */
    stickyContents: boolean
    /**
     * A CSS style string (applied to `style.cssText`) or object (applied to `style`)
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/EventModel#config-style)
     */
    style: string
    /**
     * The current timeZone this record is converted to. Used internally to keep track of time zone conversions.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/EventModel#config-timeZone)
     */
    timeZone: string|number|null
}

/**
 * This class represent a single event in your schedule, usually added to a [EventStore](https://bryntum.com/products/scheduler/docs#Scheduler/data/EventStore).
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/EventModel)
 */
export class EventModel extends TimeSpan {
    /**
     * A field marking event as all day(s) spanning event.
     * For example, a holiday day may be represented by a `startDate`, and the `allDay` flag.
     */
    allDay: boolean
    /**
     * Returns all assignments for the event. Event must be part of the store for this method to work.
     */
    readonly assignments: AssignmentModel[]
    /**
     * Specify false to prevent the event from being dragged (if EventDrag feature is used)
     */
    draggable: boolean
    /**
     * The numeric part of the timespan's duration (the number of units).
     */
    duration: number
    /**
     * The end date of a time span (or Event / Task).
     */
    endDate: string|Date
    /**
     * Controls the primary color of the event. For available standard colors, see
     * [EventColor](https://bryntum.com/products/scheduler/docs#Scheduler/model/mixin/EventModelMixin#typedef-EventColor).
     */
    eventColor: EventColor|string|null
    /**
     * Controls this events appearance, see Schedulers
     * [eventStyle config](https://bryntum.com/products/scheduler/docs#Scheduler/view/mixin/TimelineEventRendering#config-eventStyle) for
     * available options.
     */
    eventStyle: 'plain'|'border'|'colored'|'hollow'|'line'|'dashed'|'minimal'|'rounded'|'calendar'|'interday'|null
    /**
     * A string (either a single date or multiple dates separated by comma) or an array of strings containing
     * the timespan exception dates. The dates that must be skipped when generating occurrences for a repeating
     * timespan. This is used to modify only individual occurrences of the timespan so the further regenerations
     * won't create another copy of this occurrence again.
     */
    exceptionDates: string|string[]
    /**
     * Calculated field which encapsulates the duration's magnitude and unit. This field will not be persisted,
     * setting it will update the [duration](https://bryntum.com/products/scheduler/docs#Scheduler/model/mixin/EventModelMixin#field-duration) and
     * [durationUnit](https://bryntum.com/products/scheduler/docs#Scheduler/model/TimeSpan#field-durationUnit) fields.
     */
    fullDuration: Partial<DurationConfig>|Duration
    /**
     * The unique identifier of a task (mandatory)
     */
    id: string|number
    /**
     * Returns true if event can be drag and dropped
     */
    isDraggable: boolean
    /**
     * Flag which indicates that this event is an interday event. This means that it spans
     * an entire day or multiple days.
     */
    readonly isInterDay: boolean
    /**
     * Indicates if the timespan is an occurrence of another recurring timespan.
     */
    readonly isOccurrence: boolean
    /**
     * Returns false if the event is not persistable. By default it always is, override this getter if you need
     * custom logic.
     */
    readonly isPersistable: boolean
    /**
     * Indicates if the timespan is recurring.
     */
    readonly isRecurring: boolean
    /**
     * Returns true if event can be resized, but can additionally return 'start' or 'end' indicating how this event can
     * be resized.
     */
    readonly isResizable: boolean|string
    /**
     * Width (in px) to use for this milestone when using Scheduler#milestoneLayoutMode 'data'.
     */
    milestoneWidth: number
    /**
     * If this event is an [occurrence](https://bryntum.com/products/scheduler/docs#Scheduler/model/mixin/RecurringTimeSpan#property-isOccurrence) of a recurring event, then this
     * property yields its zero-based occurrence index in the sequence.
     */
    readonly occurrenceIndex: number
    /**
     * Returns all predecessor dependencies of this event
     */
    readonly predecessors: DependencyBaseModel[]
    /**
     * The recurrence model used for the timespan.
     */
    recurrence: RecurrenceModel
    /**
     * Name of the class representing the recurrence model, defaults to [RecurrenceModel](https://bryntum.com/products/scheduler/docs#Scheduler/model/RecurrenceModel)
     */
    recurrenceModel: string
    /**
     * The timespan recurrence rule. A string in [RFC-5545](https://tools.ietf.org/html/rfc5545#section-3.3.10)
     * described format ("RRULE" expression).
     */
    recurrenceRule: string
    /**
     * Specify `false` to prevent the event from being resized (if EventResize feature is used). You can also
     * specify `'start'` or `'end'` to only allow resizing in one direction
     */
    resizable: boolean|string
    /**
     * Returns the first assigned resource, or assigns a resource
     */
    resource: ResourceModel
    /**
     * Id of the resource this event is associated with (only usable for single assignments). We recommend
     * using assignments in an AssignmentStore over this approach. Internally any Event using `resourceId`
     * will have an assignment in AssignmentStore generated.
     */
    resourceId: string|number
    /**
     * Ids of the resources this event is associated with (can be used for for multiple assignments).
     * Any event using `resourceIds` will have assignments in AssignmentStore generated automatically.
     * It only applies if is configured with `perist: true`.
     */
    resourceIds: string[]|number[]
    /**
     * Returns all resources assigned to an event.
     */
    readonly resources: ResourceModel[]
    /**
     * The start date of a time span (or Event / Task).
     */
    startDate: string|Date
    /**
     * Set this field to `false` to opt out of [sticky event content](https://bryntum.com/products/scheduler/docs#Scheduler/feature/StickyEvents)
     * (keeping event text in view while scrolling).
     */
    stickyContents: boolean
    /**
     * Returns all successor dependencies of this event
     */
    readonly successors: DependencyBaseModel[]
    /**
     * Returns `true` if this timespan supports recurring.
     */
    supportsRecurring: boolean
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<EventModelConfig>} config
     */
    constructor(config?: Partial<EventModelConfig>);
    /**
     * Assigns this event to the specified resource.
     * @param {ResourceModel|string|number|ResourceModel[]|string[]|number[]} resource A new resource for this event, either as a full Resource record or an id (or an array of such).
     * @param {boolean|number} removeExistingAssignments `true` to first remove existing assignments
     */
    assign(resource: ResourceModel|string|number|ResourceModel[]|string[]|number[], removeExistingAssignments?: boolean|number): Promise<void>;
    /**
     * Returns the occurrences of this event over the specified time range. If the first
     * occurrence is in the time range `*this*` record is included in that position.
     * @param {Date} startDate The start date of the range for which to include occurrences.
     * @param {Date} endDate The end date of the range for which to include occurrences. Defaults to the startDate.
     */
    getOccurrencesForDateRange(startDate: Date, endDate?: Date): TimeSpan[];
    /**
     * Returns either the resource associated with this event (when called w/o `resourceId`) or resource
     * with specified id.
     * @param {string} resourceId To retrieve a specific resource
     */
    getResource(resourceId?: string): ResourceModel;
    /**
     * Does this recurring event have an exception on the passed date.
     * @param {Date} date The date to find an exception for.
     */
    hasException(date: Date): boolean;
    /**
     * Returns true if this event is assigned to a certain resource.
     * @param {ResourceModel|string|number} resource The resource to query for
     */
    isAssignedTo(resource: ResourceModel|string|number): boolean;
    /**
     * Defines if the given event field should be manually editable in UI.
     * You can override this method to provide your own logic.
     * @param {string} fieldName Name of the field
     */
    isEditable(fieldName: string): boolean;
    /**
     * Reassigns an event from an old resource to a new resource
     * @param {ResourceModel|string|number} oldResourceId A resource to unassign from or its id
     * @param {ResourceModel|string|number} newResourceId A resource to assign to or its id
     */
    reassign(oldResourceId: ResourceModel|string|number, newResourceId: ResourceModel|string|number): void;
    /**
     * Override of [Model](https://bryntum.com/products/taskboard/docs/api/Core/data/Model)'s method. If an [isOccurrence](https://bryntum.com/products/scheduler/docs#Scheduler/model/mixin/RecurringTimeSpan#property-isOccurrence)
     * is passed, it is detached from its parent recurring event. If it still has a recurrence
     * then the recurring event is changed to stop at the occurrence date. If it has no recurrence
     * an exception is added at the occurrence date.
     */
    remove(): void;
    /**
     * Set value for the specified field(s), triggering engine calculations immediately. See
     * [Model#set()](https://bryntum.com/products/taskboard/docs/api/Core/data/Model#function-set) for arguments.
     * @param {string|object} field The field to set value for, or an object with multiple values to set in one call
     * @param {any} value Value to set
     * @param {boolean} silent Set to true to not trigger events. If event is recurring, occurrences won't be updated automatically.
     */
    setAsync(field: string|object, value?: any, silent?: boolean): Promise<void>;
    /**
     * Sets a recurrence for the timespan with a given frequency, interval, and end.
     * @param {Partial<RecurrenceModelConfig>|string|RecurrenceModel} recurrence A data object for an instance of [RecurrenceModel](https://bryntum.com/products/scheduler/docs#Scheduler/model/RecurrenceModel). May also be the frequency string: `DAILY`, `WEEKLY`, `MONTHLY`, or `YEARLY`. ```javascript // repeat the event every other week till Jan 2 2039 event.setRecurrence({     frequency : "WEEKLY",     interval  : 2,     endDate   : new Date(2039, 0, 2) }); ``` Also a [recurrence model](https://bryntum.com/products/scheduler/docs#Scheduler/model/RecurrenceModel) can be provided as the only argument for this method: ```javascript const recurrence = new RecurrenceModel({ frequency : 'DAILY', interval : 5 });  event.setRecurrence(recurrence); ``` or ```javascript event.setRecurrence("WEEKLY", 2, new Date(2039, 0, 2)); ```
     * @param {number} interval The interval between occurrences (instances of this recurrence). For example, a daily recurrence with an interval of 2 occurs every other day. Must be greater than 0.
     * @param {number|Date} recurrenceEnd The end of the recurrence. The value can be specified by a date or by a maximum count of occurrences (has to greater than 1, since 1 means the event itself).
     */
    setRecurrence(recurrence: Partial<RecurrenceModelConfig>|string|RecurrenceModel, interval?: number, recurrenceEnd?: number|Date): void;
    /**
     * Shift the dates for the date range by the passed amount and unit
     * @param {'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y'} unit The unit to shift by, see [DateHelper](https://bryntum.com/products/taskboard/docs/api/Core/helper/DateHelper) for more information on valid formats.
     * @param {number} amount The amount to shift
     */
    shift(unit: 'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y', amount: number): Promise<any>;
    /**
     * Unassigns this event from the specified resource
     * @param {ResourceModel|string|number} resource The resource to unassign from.
     */
    unassign(resource?: ResourceModel|string|number): Promise<void>;
}

/**
 * Type with configuration options for [SchedulerProjectModel](https://bryntum.com/products/grid/docs/api/Scheduler/model/ProjectModel) class.
 */
type SchedulerProjectModelConfig = {
    /**
     * A flag, indicating whether the dates and duration calculations should adjust the result to DST time shift.
     */
    adjustDurationToDST: boolean
    /**
     * The constructor of the assignment model class, to be used in the project. Will be set as the
     * [modelClass](https://bryntum.com/products/taskboard/docs/api/Core/data/Store#config-modelClass) property of the [assignmentStore](https://bryntum.com/products/scheduler/docs#Scheduler/model/ProjectModel#property-assignmentStore)
     */
    assignmentModelClass: typeof AssignmentModel
    /**
     * An [AssignmentStore](https://bryntum.com/products/scheduler/docs#Scheduler/data/AssignmentStore) instance or a config object.
     */
    assignmentStore: AssignmentStore|Partial<AssignmentStoreConfig>
    /**
     * The constructor to create an assignment store instance with. Should be a class, subclassing the
     * [AssignmentStore](https://bryntum.com/products/scheduler/docs#Scheduler/data/AssignmentStore)
     */
    assignmentStoreClass: typeof AssignmentStore
    /**
     * Data use to fill the [assignmentStore](https://bryntum.com/products/scheduler/docs#Scheduler/model/ProjectModel#property-assignmentStore). Should be an array of
     * [AssignmentModels](https://bryntum.com/products/scheduler/docs#Scheduler/model/AssignmentModel) or its configuration objects.
     */
    assignments: AssignmentModel[]|Partial<AssignmentModelConfig>[]
    /**
     * The initial data, to fill the [assignmentStore](https://bryntum.com/products/scheduler/docs#Scheduler/model/ProjectModel#property-assignmentStore) with.
     * Should be an array of [AssignmentModels](https://bryntum.com/products/scheduler/docs#Scheduler/model/AssignmentModel) or its configuration
     * objects.
     */
    assignmentsData: AssignmentModel[]|Partial<AssignmentModelConfig>[]
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/ProjectModel#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * Data use to fill the [dependencyStore](https://bryntum.com/products/scheduler/docs#Scheduler/model/ProjectModel#property-dependencyStore). Should be an array of
     * [DependencyModels](https://bryntum.com/products/scheduler/docs#Scheduler/model/DependencyModel) or its configuration objects.
     */
    dependencies: DependencyModel[]|Partial<DependencyModelConfig>[]
    /**
     * The initial data, to fill the [dependencyStore](https://bryntum.com/products/scheduler/docs#Scheduler/model/ProjectModel#property-dependencyStore) with.
     * Should be an array of [DependencyModels](https://bryntum.com/products/scheduler/docs#Scheduler/model/DependencyModel) or its configuration
     * objects.
     */
    dependenciesData: DependencyModel[]|Partial<DependencyModelConfig>[]
    /**
     * The constructor of the dependency model class, to be used in the project. Will be set as the
     * [modelClass](https://bryntum.com/products/taskboard/docs/api/Core/data/Store#config-modelClass) property of the [dependencyStore](https://bryntum.com/products/scheduler/docs#Scheduler/model/ProjectModel#property-dependencyStore)
     */
    dependencyModelClass: typeof DependencyModel
    /**
     * A [DependencyStore](https://bryntum.com/products/scheduler/docs#Scheduler/data/DependencyStore) instance or a config object.
     */
    dependencyStore: DependencyStore|Partial<DependencyStoreConfig>
    /**
     * The constructor to create a dependency store instance with. Should be a class, subclassing the
     * [DependencyStore](https://bryntum.com/products/scheduler/docs#Scheduler/data/DependencyStore)
     */
    dependencyStoreClass: typeof DependencyStore
    /**
     * The constructor of the event model class, to be used in the project. Will be set as the
     * [modelClass](https://bryntum.com/products/taskboard/docs/api/Core/data/Store#config-modelClass) property of the [eventStore](https://bryntum.com/products/scheduler/docs#Scheduler/model/ProjectModel#property-eventStore)
     */
    eventModelClass: typeof EventModel
    /**
     * An [EventStore](https://bryntum.com/products/scheduler/docs#Scheduler/data/EventStore) instance or a config object.
     */
    eventStore: EventStore|Partial<EventStoreConfig>
    /**
     * The constructor to create an event store instance with. Should be a class, subclassing the
     * [EventStore](https://bryntum.com/products/scheduler/docs#Scheduler/data/EventStore)
     */
    eventStoreClass: typeof EventStore
    /**
     * Data use to fill the [eventStore](https://bryntum.com/products/scheduler/docs#Scheduler/model/ProjectModel#property-eventStore). Should be an array of
     * [EventModels](https://bryntum.com/products/scheduler/docs#Scheduler/model/EventModel) or its configuration objects.
     */
    events: EventModel[]|Partial<EventModelConfig>[]
    /**
     * The initial data, to fill the [eventStore](https://bryntum.com/products/scheduler/docs#Scheduler/model/ProjectModel#property-eventStore) with.
     * Should be an array of [EventModels](https://bryntum.com/products/scheduler/docs#Scheduler/model/EventModel) or its configuration objects.
     */
    eventsData: EventModel[]|Partial<EventModelConfig>[]
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/ProjectModel#config-id)
     */
    id: string|number
    /**
     * Project data as a JSON string, used to populate its stores.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/ProjectModel#config-json)
     */
    json: string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/ProjectModel#config-readOnly)
     */
    readOnly: boolean
    /**
     * The constructor of the resource model class, to be used in the project. Will be set as the
     * [modelClass](https://bryntum.com/products/taskboard/docs/api/Core/data/Store#config-modelClass) property of the [resourceStore](https://bryntum.com/products/scheduler/docs#Scheduler/model/ProjectModel#property-resourceStore)
     */
    resourceModelClass: typeof ResourceModel
    /**
     * A [ResourceStore](https://bryntum.com/products/scheduler/docs#Scheduler/data/ResourceStore) instance or a config object.
     */
    resourceStore: ResourceStore|Partial<ResourceStoreConfig>
    /**
     * The constructor to create a resource store instance with. Should be a class, subclassing the
     * [ResourceStore](https://bryntum.com/products/scheduler/docs#Scheduler/data/ResourceStore)
     */
    resourceStoreClass: typeof ResourceStore
    /**
     * A [ResourceTimeRangeStore](https://bryntum.com/products/scheduler/docs#Scheduler/data/ResourceTimeRangeStore) instance or a config object.
     */
    resourceTimeRangeStore: ResourceTimeRangeStore|Partial<ResourceTimeRangeStoreConfig>
    /**
     * The constructor to create a resource time range store instance with. Should be a class subclassing the
     * [ResourceTimeRangeStore](https://bryntum.com/products/scheduler/docs#Scheduler/data/ResourceTimeRangeStore)
     */
    resourceTimeRangeStoreClass: typeof ResourceTimeRangeStore
    /**
     * Data use to fill the [resourceTimeRangeStore](https://bryntum.com/products/scheduler/docs#Scheduler/model/ProjectModel#property-resourceTimeRangeStore). Should be an array
     * of [ResourceTimeRangeModels](https://bryntum.com/products/scheduler/docs#Scheduler/model/ResourceTimeRangeModel) or its configuration objects.
     */
    resourceTimeRanges: ResourceTimeRangeModel[]|Partial<ResourceTimeRangeModelConfig>[]
    /**
     * The initial data, to fill the [resourceTimeRangeStore](https://bryntum.com/products/scheduler/docs#Scheduler/model/mixin/ProjectModelMixin#property-resourceTimeRangeStore) with.
     * Should be an array of [ResourceTimeRangeModel](https://bryntum.com/products/scheduler/docs#Scheduler/model/ResourceTimeRangeModel) or it's
     * configuration objects.
     */
    resourceTimeRangesData: ResourceTimeRangeModel[]
    /**
     * Data use to fill the [resourceStore](https://bryntum.com/products/scheduler/docs#Scheduler/model/ProjectModel#property-resourceStore). Should be an array of
     * [ResourceModels](https://bryntum.com/products/scheduler/docs#Scheduler/model/ResourceModel) or its configuration objects.
     */
    resources: ResourceModel[]|Partial<ResourceModelConfig>[]
    /**
     * The initial data, to fill the [resourceStore](https://bryntum.com/products/scheduler/docs#Scheduler/model/ProjectModel#property-resourceStore) with.
     * Should be an array of [ResourceModels](https://bryntum.com/products/scheduler/docs#Scheduler/model/ResourceModel) or its configuration objects.
     */
    resourcesData: ResourceModel[]|Partial<ResourceModelConfig>[]
    /**
     * Silences propagations caused by the project loading.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/ProjectModel#config-silenceInitialCommit)
     */
    silenceInitialCommit: boolean
    /**
     * Configuration options to provide to the STM manager
     */
    stm: Partial<StateTrackingManagerConfig>|StateTrackingManager
    /**
     * A [Store](https://bryntum.com/products/taskboard/docs/api/Core/data/Store) instance or a config object.
     */
    timeRangeStore: Store|Partial<StoreConfig>
    /**
     * The constructor to create a time range store instance with. Should be a class subclassing the
     * [TimeRangeStore](https://bryntum.com/products/scheduler/docs#Scheduler/data/TimeRangeStore)
     */
    timeRangeStoreClass: typeof TimeRangeStore
    /**
     * Data use to fill the [timeRangeStore](https://bryntum.com/products/scheduler/docs#Scheduler/model/ProjectModel#property-timeRangeStore). Should be an array of
     * [TimeRangeModels](https://bryntum.com/products/scheduler/docs#Scheduler/model/TimeRangeModel) or its configuration objects.
     */
    timeRanges: TimeRangeModel[]|Partial<TimeRangeModelConfig>[]
    /**
     * The initial data, to fill the [timeRangeStore](https://bryntum.com/products/scheduler/docs#Scheduler/model/mixin/ProjectModelMixin#property-timeRangeStore) with.
     * Should be an array of [TimeSpan](https://bryntum.com/products/scheduler/docs#Scheduler/model/TimeSpan) or its configuration objects.
     */
    timeRangesData: TimeSpan[]
    /**
     * Set to a IANA time zone (i.e. `Europe/Stockholm`) or a UTC offset in minutes (i.e. `-120`). This will
     * convert all events, tasks and time ranges to the specified time zone or offset. It will also affect the
     * displayed timeline's headers as well at the start and end date of it.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/ProjectModel#config-timeZone)
     */
    timeZone: string|number
    /**
     * Fired when data in any of the projects stores changes.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/ProjectModel#event-change)
     * @param {object} event Event object
     * @param {SchedulerProjectModel|any} event.source This project
     * @param {Store} event.store Affected store
     * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} event.action Name of action which triggered the change. May be one of:  * `'remove'` * `'removeAll'` * `'add'` * `'updatemultiple'` * `'clearchanges'` * `'filter'` * `'update'` * `'dataset'` * `'replace'`
     * @param {Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onChange: ((event: { source: SchedulerProjectModel|any, store: Store, action: 'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Fired when the engine has finished its calculations and the results has been written back to the records.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/ProjectModel#event-dataReady)
     * @param {object} event Event object
     * @param {SchedulerProjectModel|any} event.source The project
     * @param {boolean} event.isInitialCommit Flag that shows if this commit is initial
     * @param {Set<any>} event.records Set of all [Model](https://bryntum.com/products/taskboard/docs/api/Core/data/Model)s that were modified in the completed transaction. Use the [modifications](https://bryntum.com/products/taskboard/docs/api/Core/data/Model#property-modifications) property of each Model to identify modified fields.
     */
    onDataReady: ((event: { source: SchedulerProjectModel|any, isInitialCommit: boolean, records: Set<any> }) => void)|string
}

/**
 * This class represents a global project of your Scheduler - a central place for all data.
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/ProjectModel)
 */
export class SchedulerProjectModel extends Model {
    /**
     * An array containing all the *defined* fields for this Model class. This will include all superclass's
     * defined fields.
     */
    static readonly allFields: DataField[]
    /**
     * Flag checked from Store when loading data that determines if fields found in first records should be exposed in
     * same way as predefined fields.
     */
    static autoExposeFields: boolean
    /**
     * The name of the data field which holds children of this Model when used in a tree structure
     */
    static childrenField: string
    /**
     * This static configuration option allows you to control whether an empty parent task should be converted into a
     * leaf. Enable/disable it for a whole class:
     */
    static convertEmptyParentToLeaf: boolean|{
        onLoad: boolean
        onRemove: boolean
    }
    /**
     * Template static getter which is supposed to be overridden to define default field values for the Model class.
     * Overrides `defaultValue` config specified by the [fields](https://bryntum.com/products/taskboard/docs/api/Core/data/Model#property-fields-static) getter.
     * Returns a named object where key is a field name and value is a default value for the field.
     */
    static defaults: object
    /**
     * An object containing all the *defined* fields for this Model class. This will include all superclass's
     * defined fields through its prototype chain. So be aware that `Object.keys` and `Object.entries` will only
     * access this class's defined fields.
     */
    static readonly fieldMap: Record<string, DataField>
    /**
     * Array of defined fields for this model class. Subclasses add new fields by implementing this static
     * getter:
     */
    static readonly fields: (string|Partial<ModelFieldConfig>|DataField)[]
    /**
     * The data source for the id field which provides the ID of instances of this Model.
     */
    static idField: string
    /**
     * Override in a subclass of Model to define relations to records in other stores.
     */
    static relations: Record<string, RelationConfig>
    /**
     * Retrieve all children, not including filtered out nodes (by traversing sub nodes)
     */
    allChildren: Model[]
    /**
     * Same as [allFields](https://bryntum.com/products/taskboard/docs/api/Core/data/Model#property-allFields-static).
     */
    readonly allFields: DataField[]
    /**
     * The [store](https://bryntum.com/products/scheduler/docs#Scheduler/data/AssignmentStore) holding the assignments information.
     */
    assignmentStore: AssignmentStore
    /**
     * Get/set [assignmentStore](https://bryntum.com/products/scheduler/docs#Scheduler/model/ProjectModel#property-assignmentStore) data.
     */
    assignments: AssignmentModel[]|Partial<AssignmentModelConfig>[]
    /**
     * Depth in the tree at which this node exists. First visual level of nodes are at level 0, their direct children at
     * level 1 and so on.
     */
    readonly childLevel: number
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     */
    readonly children: boolean|object[]|Model[]
    /**
     * Get/set [dependencyStore](https://bryntum.com/products/scheduler/docs#Scheduler/model/ProjectModel#property-dependencyStore) data.
     */
    dependencies: DependencyModel[]|Partial<DependencyModelConfig>[]
    /**
     * The [store](https://bryntum.com/products/scheduler/docs#Scheduler/data/DependencyStore) holding the dependencies information.
     */
    dependencyStore: DependencyStore
    /**
     * Count all children (including sub-children) for a node (in its `firstStore´)
     */
    descendantCount: number
    /**
     * The [store](https://bryntum.com/products/scheduler/docs#Scheduler/data/EventStore) holding the events information.
     */
    eventStore: EventStore
    /**
     * Get/set [eventStore](https://bryntum.com/products/scheduler/docs#Scheduler/model/ProjectModel#property-eventStore) data.
     */
    events: EventModel[]|Partial<EventModelConfig>[]
    /**
     * Start expanded or not (only valid for tree data)
     */
    readonly expanded: boolean
    /**
     * Same as [fieldMap](https://bryntum.com/products/taskboard/docs/api/Core/data/Model#property-fieldMap-static).
     */
    readonly fieldMap: Record<string, DataField>
    /**
     * Get the names of all fields in data.
     */
    readonly fieldNames: string[]
    /**
     * Convenience getter to get field definitions from class.
     */
    readonly fields: DataField[]
    /**
     * Get the first child of this node
     */
    readonly firstChild: Model
    /**
     * Get the first store that this model is assigned to.
     */
    readonly firstStore: Store
    /**
     * When called on a group header row returns list of records in that group. Returns `undefined` otherwise.
     */
    readonly groupChildren: Model[]|undefined
    /**
     * Checks if record has a generated id.
     */
    hasGeneratedId: boolean
    /**
     * Are other records linked to this record?
     */
    readonly hasLinks: boolean
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     */
    id: string|number
    /**
     * Get or set data of project stores. The returned data is identical to what
     * [toJSON](https://bryntum.com/products/scheduler/docs#Scheduler/model/mixin/ProjectModelMixin#function-toJSON) returns:
     */
    inlineData: object
    /**
     * Gets the records internalId. It is assigned during creation, guaranteed to be globally unique among models.
     */
    internalId: number
    /**
     * True if this Model is currently batching its changes.
     */
    readonly isBatchUpdating: boolean
    /**
     * True if this models changes are currently being committed.
     */
    isCommitting: boolean
    /**
     * Set this property to `true` when adding a record on a conditional basis, that is, it is yet
     * to be confirmed as an addition.
     */
    isCreating: boolean
    /**
     * Returns true for a group header record
     */
    readonly isGroupHeader: boolean
    /**
     * Is a leaf node in a tree structure?
     */
    readonly isLeaf: boolean
    /**
     * Is this record linked to another record?
     */
    readonly isLinked: boolean
    /**
     * Returns true for parent nodes with children loaded (there might still be no children)
     */
    readonly isLoaded: boolean
    /**
     * True if this model has any uncommitted changes.
     */
    readonly isModified: boolean
    /**
     * Is a parent node in a tree structure?
     */
    readonly isParent: boolean
    /**
     * This yields `true` if this record is eligible for syncing with the server.
     * It can yield `false` if the record is in the middle of a [batched update](https://bryntum.com/products/taskboard/docs/api/Core/data/Model#property-isBatchUpdating),
     * or if it is a [tentative record](https://bryntum.com/products/taskboard/docs/api/Core/data/Model#property-isCreating) yet to be confirmed as a new addition.
     */
    readonly isPersistable: boolean
    /**
     * Returns true if the record is new and has not been persisted (and received a proper id).
     */
    readonly isPhantom: boolean
    /**
     * Returns `true` if this node is the root of the tree
     */
    readonly isRoot: boolean
    /**
     * Check if record has valid data. Default implementation returns true, override in your model to do actual validation.
     */
    isValid: boolean
    /**
     * Get the records data as a json string.
     */
    json: string
    /**
     * Get the last child of this node
     */
    readonly lastChild: Model
    /**
     * Get a map of the modified fields in form of an object. The field´s [dataSource](https://bryntum.com/products/taskboard/docs/api/Core/data/field/DataField#config-dataSource)
     * is used as the property name in the returned object. The record´s id is always included.
     */
    readonly modificationData: object
    /**
     * Get a map of the modified data fields along with any [alwaysWrite](https://bryntum.com/products/taskboard/docs/api/Core/data/field/DataField#config-alwaysWrite) fields,
     * in form of an object. The field´s *dataSource* is used as the property name in the returned object.
     * Used internally by AjaxStore / CrudManager when sending updates.
     */
    readonly modificationDataToWrite: object
    /**
     * Get a map of the modified fields in form of an object. The field *names* are used as the property names
     * in the returned object.
     */
    readonly modifications: object
    /**
     * Get the next sibling of this node
     */
    readonly nextSibling: Model
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    readonly orderedParentIndex: number
    /**
     * This is a read-only property providing access to the parent node.
     */
    readonly parent: Model
    /**
     * Reading this property returns the id of the parent node, if this record is a child of a node.
     */
    parentId: number|string|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    readonly parentIndex: number
    /**
     * Get the previous sibling of this node
     */
    readonly previousSibling: Model
    /**
     * Returns count of all preceding sibling nodes (including their children).
     */
    previousSiblingsTotalCount: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     */
    readOnly: boolean
    /**
     * The [store](https://bryntum.com/products/scheduler/docs#Scheduler/data/ResourceStore) holding the resources that can be assigned to the events in the event store.
     */
    resourceStore: ResourceStore
    /**
     * The [store](https://bryntum.com/products/scheduler/docs#Scheduler/data/ResourceTimeRangeStore) holding the resource time ranges information.
     */
    resourceTimeRangeStore: ResourceTimeRangeStore
    /**
     * Get/set [resourceTimeRangeStore](https://bryntum.com/products/scheduler/docs#Scheduler/model/ProjectModel#property-resourceTimeRangeStore) data.
     */
    resourceTimeRanges: ResourceTimeRangeModel[]|Partial<ResourceTimeRangeModelConfig>[]
    /**
     * Get/set [resourceStore](https://bryntum.com/products/scheduler/docs#Scheduler/model/ProjectModel#property-resourceStore) data.
     */
    resources: ResourceModel[]|Partial<ResourceModelConfig>[]
    /**
     * Reference to STM manager, if used
     */
    stm: StateTrackingManager
    /**
     * The [store](https://bryntum.com/products/taskboard/docs/api/Core/data/Store) holding the time ranges information.
     */
    timeRangeStore: Store
    /**
     * Get/set [timeRangeStore](https://bryntum.com/products/scheduler/docs#Scheduler/model/ProjectModel#property-timeRangeStore) data.
     */
    timeRanges: TimeRangeModel[]|Partial<TimeRangeModelConfig>[]
    /**
     * Set to a IANA time zone (i.e. `Europe/Stockholm`) or a UTC offset in minutes (i.e. `-120`). This will
     * convert all events, tasks and time ranges to the specified time zone or offset. It will also affect the
     * displayed timeline's headers as well at the start and end date of it.
     */
    timeZone: string|number
    /**
     * Count visible (expanded) children (including sub-children) for a node (in its `firstStore`)
     */
    visibleDescendantCount: number
    /**
     * Fired when data in any of the projects stores changes.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/ProjectModel#event-change)
     * @param {object} event Event object
     * @param {SchedulerProjectModel|any} event.source This project
     * @param {Store} event.store Affected store
     * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} event.action Name of action which triggered the change. May be one of:  * `'remove'` * `'removeAll'` * `'add'` * `'updatemultiple'` * `'clearchanges'` * `'filter'` * `'update'` * `'dataset'` * `'replace'`
     * @param {Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onChange: ((event: { source: SchedulerProjectModel|any, store: Store, action: 'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Fired when the engine has finished its calculations and the results has been written back to the records.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/ProjectModel#event-dataReady)
     * @param {object} event Event object
     * @param {SchedulerProjectModel|any} event.source The project
     * @param {boolean} event.isInitialCommit Flag that shows if this commit is initial
     * @param {Set<any>} event.records Set of all [Model](https://bryntum.com/products/taskboard/docs/api/Core/data/Model)s that were modified in the completed transaction. Use the [modifications](https://bryntum.com/products/taskboard/docs/api/Core/data/Model#property-modifications) property of each Model to identify modified fields.
     */
    onDataReady: ((event: { source: SchedulerProjectModel|any, isInitialCommit: boolean, records: Set<any> }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<SchedulerProjectModelConfig>} config Raw model config
     * @param {Store} store Data store
     * @param {object} meta Meta data
     */
    constructor(config?: Partial<SchedulerProjectModelConfig>, store?: Store, meta?: object);
    /**
     * Add a field definition in addition to those predefined in `fields`.
     * @param {string|Partial<ModelFieldConfig>} fieldDef A field name or definition
     */
    static addField(fieldDef: string|Partial<ModelFieldConfig>): void;
    /**
     * Gets the id of specified model or model data object, or the value if passed string/number.
     * @param {Model|string|number} model
     */
    static asId(model: Model|string|number): string|number;
    /**
     * Get the definition for a field by name.
     * @param {string} fieldName Field name
     */
    static getFieldDefinition(fieldName: string): DataField;
    /**
     * Processes input to a field, converting to expected type.
     * @param {string} fieldName Field name
     * @param {any} value Value to process
     */
    static processField(fieldName: string, value: any): any;
    /**
     * Remove a field definition by name.
     * @param {string} fieldName Field name
     */
    static removeField(fieldName: string): void;
    /**
     * This method returns `true` if this record has all expanded ancestors and is therefore
     * eligible for inclusion in a UI.
     * @param {Store} store Optional store, defaults to nodes first store
     */
    ancestorsExpanded(store?: Store): boolean;
    /**
     * Append a child record(s) to any current children.
     * @param {Model|Model[]|object|object[]} childRecord Array of records/data or a single record/data to append
     * @param {boolean} silent Pass `true` to not trigger events during append
     */
    appendChild(childRecord: Model|Model[]|object|object[], silent?: boolean): Model|Model[]|null;
    /**
     * Begin a batch, which stores changes and commits them when the batch ends.
     * Prevents events from being fired during batch.
     */
    beginBatch(): void;
    /**
     * Bubbles up from this node, calling the specified function with each node.
     * @param {Function} fn The function to call for each node
     * @param {boolean} skipSelf True to skip this node in the traversal
     */
    bubble(fn: Function, skipSelf?: boolean): void;
    /**
     * Bubbles up from this node, calling the specified function with each node,
     * while the function returns true.
     * @param {Function} fn The function to call for each node
     * @param {boolean} skipSelf True to skip this node in the traversal
     */
    bubbleWhile(fn: Function, skipSelf?: boolean): boolean;
    /**
     * Cancels current batch operation. Any changes during the batch are discarded.
     */
    cancelBatch(): void;
    /**
     * Clear stored changes, used on commit. Does not revert changes.
     * @param {boolean} includeDescendants Supply `false` to not clear node descendants
     */
    clearChanges(includeDescendants?: boolean): void;
    /**
     * Removes all child nodes from this node.
     * @param {boolean} silent Pass `true` to not fire Store events during the remove.
     */
    clearChildren(silent?: boolean): Model[];
    /**
     * Project changes (CRUD operations to records in its stores) are automatically committed on a buffer to the
     * underlying graph based calculation engine. The engine performs it calculations async.
     */
    commitAsync(): Promise<void>;
    /**
     * Checks if this model contains another model as one of it's descendants
     * @param {Model|string|number} childOrId child node or id
     * @param {boolean} skipSelf True to ignore self in the traversal
     */
    contains(childOrId: Model|string|number, skipSelf?: boolean): boolean;
    /**
     * Converts a leaf node to a parent node, assigning an empty array as its children
     * @param {boolean} silent Pass `true` to not trigger any event
     */
    convertToParent(silent?: boolean): void;
    /**
     * Makes a copy of this model, assigning the specified id or a generated id and also allowing you to pass field values to
     * the created copy.
     * @param {number|string|object} newId The id for the copied instance, or any field values to apply (overriding the values from the source record). If no id provided, one will be auto-generated
     * @param {boolean} deep True to also clone children
     */
    copy(newId?: number|string|object, deep?: boolean): Model;
    /**
     * End a batch, triggering events if data has changed.
     * @param {boolean} silent Specify `true` to not trigger events. If event is recurring, occurrences won't be updated automatically.
     */
    endBatch(silent?: boolean): void;
    /**
     * Compares this Model instance to the passed instance. If they are of the same type, and all fields
     * (except, obviously, `id`) are equal, this returns `true`.
     * @param {Model} other The record to compare this record with.
     */
    equals(other: Model): boolean;
    /**
     * Generates an id for a new record (a phantom id), based on a UUID (starting with `_generated`).
     */
    generateId(): string;
    /**
     * Get value for specified field name. You can also use the generated getters if loading through a Store.
     * If model is currently in batch operation this will return updated batch values which are not applied to Model
     * until endBatch() is called.
     * @param {string} fieldName Field name to get value from
     */
    get(fieldName: string): any;
    /**
     * Returns raw data from the encapsulated data object for the passed field name
     * @param {string} fieldName The field to get data for.
     */
    getData(fieldName: string): any;
    /**
     * Get the data source used by specified field. Returns the fieldName if no data source specified.
     * @param {string} fieldName Field name
     */
    getDataSource(fieldName: string): string;
    /**
     * Count visible (expanded)/all children for this node, optionally specifying for which store.
     * @param {boolean} onlyVisible Specify `true` to only count visible (expanded) children.
     * @param {Store} store A Store to which this node belongs
     */
    getDescendantCount(onlyVisible?: boolean, store?: Store): number;
    /**
     * Convenience function to get the definition for a field from class.
     * @param {string} fieldName Field name
     */
    getFieldDefinition(fieldName: string): DataField;
    /**
     * Returns `true` if this Model currently has outstanding batched changes for the specified field name.
     * @param {string} fieldName The field name to check for batched updates on.
     */
    hasBatchedChange(fieldName: string): boolean;
    /**
     * Insert a child record(s) before an existing child record.
     * @param {Model|Model[]|object|object[]} childRecord Array of records/data or a single record/data to insert
     * @param {Model} before Optional record to insert before, leave out to append to the end
     * @param {boolean} silent Pass `true` to not trigger events during append
     */
    insertChild(childRecord: Model|Model[]|object|object[], before?: Model, silent?: boolean): Model|Model[]|null;
    /**
     * Used by stores to assess the record's collapsed/expanded state in that store.
     * @param {Store} store
     */
    isExpanded(store: Store): boolean;
    /**
     * Returns true if this model has uncommitted changes for the provided field.
     * @param {string} fieldName Field name
     */
    isFieldModified(fieldName: string): boolean;
    /**
     * Creates a proxy record (using native Proxy) linked to this record (the original). The proxy records shares most
     * data with the original, except for its `id` (which is always generated), and ordering fields such as
     * `parentIndex` and `parentId` etc.
     */
    link(): typeof Proxy;
    /**
     * Accepts a "data package" consisting of data for the projects stores, which is then loaded into the stores.
     * @param {object} dataPackage A data package as described above
     */
    loadInlineData(dataPackage: object): Promise<void>;
    /**
     * Removes this record from all stores (and in a tree structure, also from its parent if it has one).
     * @param {boolean} silent Specify `true` to not trigger events. If event is recurring, occurrences won't be updated automatically.
     */
    remove(silent?: boolean): void;
    /**
     * Remove a child record. Only direct children of this node can be removed, others are ignored.
     * @param {Model|Model[]} childRecords The record(s) to remove.
     * @param {boolean} isMove Pass `true` if the record is being moved within the same store.
     * @param {boolean} silent Pass `true` to not trigger events during remove.
     */
    removeChild(childRecords: Model|Model[], isMove?: boolean, silent?: boolean): Model[];
    /**
     * Replaces all child nodes with the new node set.
     * @param {Model|Model[]} childRecords The new child record set.
     */
    replaceChildren(childRecords: Model|Model[]): Model[];
    /**
     * Reverts changes in this back to their original values.
     */
    revertChanges(): void;
    /**
     * Set value for the specified field. You can also use the generated setters if loading through a Store.
     * @param {string|object} field The field to set value for, or an object with multiple values to set in one call
     * @param {any} value Value to set
     * @param {boolean} silent Set to true to not trigger events. If event is recurring, occurrences won't be updated automatically.
     */
    set(field: string|object, value?: any, silent?: boolean): void;
    /**
     * Used by `JSON.stringify()` to correctly convert this record to json.
     */
    toJSON(): object;
    /**
     * Represent the record as a string, by default as a JSON string. Tries to use an abbreviated version of the
     * object's data, using id + name/title/text/label/description. If no such field exists, the full data is used.
     */
    toString(): string;
    /**
     * Traverses all child nodes recursively calling the passed function
     * on a target node <strong>before</strong> iterating the child nodes.
     * @param {Function} fn The function to call
     * @param {boolean} skipSelf True to ignore self
     * @param {object|boolean} options A boolean for includeFilteredOutRecords, or an options object
     */
    traverse(fn: Function, skipSelf?: boolean, options?: {
        includeFilteredOutRecords?: boolean
        useOrderedTree?: boolean
    }|boolean): void;
    /**
     * Traverses all child nodes recursively calling the passed function
     * on child nodes of a target <strong>before</strong> calling it on the node.
     * @param {Function} fn The function to call
     * @param {boolean} skipSelf True to skip this node in the traversal
     * @param {object|boolean} options A boolean for includeFilteredOutRecords, or an options object
     */
    traverseBefore(fn: Function, skipSelf?: boolean, options?: {
        includeFilteredOutRecords?: boolean
    }|boolean): void;
    /**
     * Traverses child nodes recursively while fn returns true
     * @param {Function} fn
     * @param {boolean} skipSelf True to skip this node in the traversal
     * @param {object|boolean} options A boolean for includeFilteredOutRecords, or an options object
     */
    traverseWhile(fn: Function, skipSelf?: boolean, options?: {
        includeFilteredOutRecords?: boolean
    }|boolean): boolean;
}

/**
 * Type with configuration options for [RecurrenceModel](https://bryntum.com/products/grid/docs/api/Scheduler/model/RecurrenceModel) class.
 */
type RecurrenceModelConfig = {
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/RecurrenceModel#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * Specifies the number of occurrences after which the recurrence ends.
     * The value includes the associated timespan itself so values less than 2 make no sense.
     * The field is optional, the recurrence as well can be stopped using [endDate](https://bryntum.com/products/scheduler/docs#Scheduler/model/RecurrenceModel#field-endDate) field value.
     */
    count: number
    /**
     * Specifies days of the week on which the timespan should occur.
     * An array of string values `SU`, `MO`, `TU`, `WE`, `TH`, `FR`, `SA`
     * corresponding to Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, and Saturday days of the week.
     * Each value can also be preceded by a positive (+n) or negative (-n) integer.
     * If present, this indicates the nth occurrence of a specific day within the monthly or yearly recurrence.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/RecurrenceModel#config-days)
     */
    days: string[]
    /**
     * End date of the recurrence. Specifies when the recurrence ends.
     * The value is optional, the recurrence can as well be stopped using [count](https://bryntum.com/products/scheduler/docs#Scheduler/model/RecurrenceModel#field-count) field value.
     */
    endDate: Date
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Field defines the recurrence frequency. Supported values are: `DAILY`, `WEEKLY`, `MONTHLY`, `YEARLY`.
     */
    frequency: 'DAILY'|'WEEKLY'|'MONTHLY'|'YEARLY'
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/RecurrenceModel#config-id)
     */
    id: string|number
    /**
     * Field defines how often the recurrence repeats.
     * For example, if the recurrence is weekly its interval is 2, then the timespan repeats every two weeks.
     */
    interval: number
    /**
     * Specifies days of the month on which the timespan should occur.
     * An array of integer values (-31..-1 - +1..+31, negative values mean counting backwards from the month end).
     * <strong>Applicable only</strong> for monthly [frequency](https://bryntum.com/products/scheduler/docs#Scheduler/model/RecurrenceModel#field-frequency).
     */
    monthDays: number[]
    /**
     * Specifies months of the year on which the timespan should occur.
     * An array of integer values (1 - 12).
     * <strong>Applicable only</strong> for yearly [frequency](https://bryntum.com/products/scheduler/docs#Scheduler/model/RecurrenceModel#field-frequency).
     */
    months: number[]
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * The positions to include in the recurrence. The values operate on a set of recurrence instances <strong>in one interval</strong> of the recurrence rule.
     * An array of integer values (valid values are 1 to 366 or -366 to -1, negative values mean counting backwards from the end of the built list of occurrences).
     * <strong>Not applicable</strong> for daily [frequency](https://bryntum.com/products/scheduler/docs#Scheduler/model/RecurrenceModel#field-frequency).
     */
    positions: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/RecurrenceModel#config-readOnly)
     */
    readOnly: boolean
}

/**
 * This class represents a timespan recurrence settings.
 * It is a subclass of [Model](https://bryntum.com/products/taskboard/docs/api/Core/data/Model) class.
 * Please refer to the documentation for that class to become familiar with the base interface of this class.
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/RecurrenceModel)
 */
export class RecurrenceModel extends Model {
    /**
     * Specifies the number of occurrences after which the recurrence ends.
     * The value includes the associated timespan itself so values less than 2 make no sense.
     * The field is optional, the recurrence as well can be stopped using [endDate](https://bryntum.com/products/scheduler/docs#Scheduler/model/RecurrenceModel#field-endDate) field value.
     */
    count: number
    /**
     * Specifies days of the week on which the timespan should occur.
     * An array of string values `SU`, `MO`, `TU`, `WE`, `TH`, `FR`, `SA`
     * corresponding to Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, and Saturday days of the week.
     * Each value can also be preceded by a positive (+n) or negative (-n) integer.
     * If present, this indicates the nth occurrence of a specific day within the monthly or yearly recurrence.
     */
    days: string[]
    /**
     * End date of the recurrence. Specifies when the recurrence ends.
     * The value is optional, the recurrence can as well be stopped using [count](https://bryntum.com/products/scheduler/docs#Scheduler/model/RecurrenceModel#field-count) field value.
     */
    endDate: Date
    /**
     * Field defines the recurrence frequency. Supported values are: `DAILY`, `WEEKLY`, `MONTHLY`, `YEARLY`.
     */
    frequency: 'DAILY'|'WEEKLY'|'MONTHLY'|'YEARLY'
    /**
     * Field defines how often the recurrence repeats.
     * For example, if the recurrence is weekly its interval is 2, then the timespan repeats every two weeks.
     */
    interval: number
    /**
     * Indicates that this is a `RecurrenceModel` class instance
     * (allows to avoid using `instanceof`).
     */
    readonly isRecurrenceModel: boolean
    /**
     * Specifies days of the month on which the timespan should occur.
     * An array of integer values (-31..-1 - +1..+31, negative values mean counting backwards from the month end).
     * <strong>Applicable only</strong> for monthly [frequency](https://bryntum.com/products/scheduler/docs#Scheduler/model/RecurrenceModel#field-frequency).
     */
    monthDays: number[]
    /**
     * Specifies months of the year on which the timespan should occur.
     * An array of integer values (1 - 12).
     * <strong>Applicable only</strong> for yearly [frequency](https://bryntum.com/products/scheduler/docs#Scheduler/model/RecurrenceModel#field-frequency).
     */
    months: number[]
    /**
     * The positions to include in the recurrence. The values operate on a set of recurrence instances <strong>in one interval</strong> of the recurrence rule.
     * An array of integer values (valid values are 1 to 366 or -366 to -1, negative values mean counting backwards from the end of the built list of occurrences).
     * <strong>Not applicable</strong> for daily [frequency](https://bryntum.com/products/scheduler/docs#Scheduler/model/RecurrenceModel#field-frequency).
     */
    positions: number
    /**
     * The recurrence rule. A string in [RFC-5545](https://tools.ietf.org/html/rfc5545#section-3.3.10) described format
     * ("RRULE" expression).
     */
    rule: string
    /**
     * The timespan this recurrence is associated with.
     */
    timeSpan: TimeSpan
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<RecurrenceModelConfig>} config Raw model config
     * @param {Store} store Data store
     * @param {object} meta Meta data
     */
    constructor(config?: Partial<RecurrenceModelConfig>, store?: Store, meta?: object);
}

/**
 * Type with configuration options for [ResourceModel](https://bryntum.com/products/grid/docs/api/Scheduler/model/ResourceModel) class.
 */
type ResourceModelConfig = {
    /**
     * Margin between stacked event bars for this resource, in px.
     */
    barMargin: number
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/ResourceModel#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * CSS class (or several classes divided by space) to append to row elements
     */
    cls: string
    /**
     * Base width of this resource, in px. If not set, the `columnWidth` specified in
     * the Scheduler's configured [resourceColumns](https://bryntum.com/products/scheduler/docs#Scheduler/view/Scheduler#config-resourceColumns) is used.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/ResourceModel#config-columnWidth)
     */
    columnWidth: number
    /**
     * Controls the primary color used for events assigned to this resource. Can be overridden per event using
     * EventModels [eventColor config](https://bryntum.com/products/scheduler/docs#Scheduler/model/mixin/EventModelMixin#field-eventColor). Also, see
     * Schedulers [eventColor config](https://bryntum.com/products/scheduler/docs#Scheduler/view/mixin/TimelineEventRendering#config-eventColor).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/ResourceModel#config-eventColor)
     */
    eventColor: EventColor
    /**
     * Specify this to use a resource specific event layout in horizontal mode, see
     * [eventLayout](https://bryntum.com/products/scheduler/docs#Scheduler/view/mixin/SchedulerEventRendering#config-eventLayout) for options.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/ResourceModel#config-eventLayout)
     */
    eventLayout: 'stack'|'pack'|'mixed'|'none'
    /**
     * Controls the style used for events assigned to this resource. Can be overridden per event using
     * EventModels [eventStyle config](https://bryntum.com/products/scheduler/docs#Scheduler/model/mixin/EventModelMixin#field-eventStyle). See Schedulers
     * [eventStyle config](https://bryntum.com/products/scheduler/docs#Scheduler/view/mixin/TimelineEventRendering#config-eventStyle) for available
     * options.
     */
    eventStyle: string
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * A link to use for this record when rendered into a [TreeColumn](https://bryntum.com/products/grid/docs#Grid/column/TreeColumn).
     */
    href: string
    /**
     * Icon for row (used automatically in tree, feel free to use it in renderer in other cases)
     */
    iconCls: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/ResourceModel#config-id)
     */
    id: string|number
    /**
     * Image name relative to [resourceImagePath](https://bryntum.com/products/scheduler/docs#Scheduler/view/mixin/SchedulerEventRendering#config-resourceImagePath),
     * used by `ResourceInfoColumn` and vertical modes `ResourceHeader` to display a miniature image
     * for the resource.
     * Set value to `false` to disable image display.
     */
    image: string|boolean
    /**
     * Fully qualified image URL, used by `ResourceInfoColumn` and vertical modes `ResourceHeader` to display a miniature image
     * for the resource.
     */
    imageUrl: string
    /**
     * Get or set resource name
     */
    name: string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/ResourceModel#config-readOnly)
     */
    readOnly: boolean
    /**
     * Control how much space to leave between the first event/last event and the resources edge (top/bottom
     * margin within the resource row in horizontal mode, left/right margin within the resource column in
     * vertical mode), in px.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/ResourceModel#config-resourceMargin)
     */
    resourceMargin: number|Partial<ResourceMarginConfig>
    /**
     * Used by the default implementation of [getRowHeight](https://bryntum.com/products/grid/docs#Grid/view/GridBase#config-getRowHeight) to determine row
     * height. Set it to use another height than the default for a the records row.
     */
    rowHeight: number
    /**
     * The target to use if this tree node provides a value for the [href](https://bryntum.com/products/grid/docs#Grid/data/GridRowModel#field-href) field.
     */
    target: '_self'|'_blank'|'_parent'|'_top'|null
}

/**
 * This class represent a single Resource in scheduler, usually added to a [ResourceStore](https://bryntum.com/products/scheduler/docs#Scheduler/data/ResourceStore).
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/ResourceModel)
 */
export class ResourceModel extends GridRowModel {
    /**
     * Returns all assignments for the resource
     */
    assignments: AssignmentModel[]
    /**
     * Margin between stacked event bars for this resource, in px.
     */
    barMargin: number
    /**
     * Base width of this resource, in px. If not set, the `columnWidth` specified in
     * the Scheduler's configured [resourceColumns](https://bryntum.com/products/scheduler/docs#Scheduler/view/Scheduler#config-resourceColumns) is used.
     */
    columnWidth: number
    /**
     * Controls the primary color used for events assigned to this resource. Can be overridden per event using
     * EventModels [eventColor config](https://bryntum.com/products/scheduler/docs#Scheduler/model/mixin/EventModelMixin#field-eventColor). Also, see
     * Schedulers [eventColor config](https://bryntum.com/products/scheduler/docs#Scheduler/view/mixin/TimelineEventRendering#config-eventColor).
     */
    eventColor: EventColor
    /**
     * Specify this to use a resource specific event layout in horizontal mode, see
     * [eventLayout](https://bryntum.com/products/scheduler/docs#Scheduler/view/mixin/SchedulerEventRendering#config-eventLayout) for options.
     */
    eventLayout: 'stack'|'pack'|'mixed'|'none'
    /**
     * Controls the style used for events assigned to this resource. Can be overridden per event using
     * EventModels [eventStyle config](https://bryntum.com/products/scheduler/docs#Scheduler/model/mixin/EventModelMixin#field-eventStyle). See Schedulers
     * [eventStyle config](https://bryntum.com/products/scheduler/docs#Scheduler/view/mixin/TimelineEventRendering#config-eventStyle) for available
     * options.
     */
    eventStyle: string
    /**
     * Get associated events
     */
    readonly events: EventModel[]
    /**
     * Unique identifier
     */
    id: string|number
    /**
     * Image name relative to [resourceImagePath](https://bryntum.com/products/scheduler/docs#Scheduler/view/mixin/SchedulerEventRendering#config-resourceImagePath),
     * used by `ResourceInfoColumn` and vertical modes `ResourceHeader` to display a miniature image
     * for the resource.
     * Set value to `false` to disable image display.
     */
    image: string|boolean
    /**
     * Fully qualified image URL, used by `ResourceInfoColumn` and vertical modes `ResourceHeader` to display a miniature image
     * for the resource.
     */
    imageUrl: string
    /**
     * Returns the initials (first letter of the first &amp; last space-separated word in the name) or an empty string
     * if this resource has no name. You can override this method in a ResourceModel subclass to provide your own implementation
     */
    readonly initials: string
    /**
     * Returns `true` if the resource can be persisted.
     * In a flat store, a resource is always considered persistable. In a tree store, a resource is considered
     * persistable if its parent node is persistable.
     */
    readonly isPersistable: boolean
    /**
     * Get or set resource name
     */
    name: string
    /**
     * Control how much space to leave between the first event/last event and the resources edge (top/bottom
     * margin within the resource row in horizontal mode, left/right margin within the resource column in
     * vertical mode), in px.
     */
    resourceMargin: number|Partial<ResourceMarginConfig>
    /**
     * Base height of this resource, in px. When unset, Schedulers configured rowHeight is used.
     */
    rowHeight: number
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<ResourceModelConfig>} config Raw model config
     * @param {Store} store Data store
     * @param {object} meta Meta data
     */
    constructor(config?: Partial<ResourceModelConfig>, store?: Store, meta?: object);
    /**
     * Returns an array of events, associated with this resource
     * @deprecated 5.3.6 Use the events property instead
     */
    getEvents(): EventModel[];
    /**
     * Set value for the specified field(s), triggering engine calculations immediately. See
     * [Model#set()](https://bryntum.com/products/taskboard/docs/api/Core/data/Model#function-set) for arguments.
     * @param {string|object} field The field to set value for, or an object with multiple values to set in one call
     * @param {any} value Value to set
     * @param {boolean} silent Set to true to not trigger events automatically.
     */
    setAsync(field: string|object, value?: any, silent?: boolean): Promise<void>;
    /**
     * Unassigns this Resource from all its Events
     */
    unassignAll(): void;
}

/**
 * Type with configuration options for [ResourceTimeRangeModel](https://bryntum.com/products/grid/docs/api/Scheduler/model/ResourceTimeRangeModel) class.
 */
type ResourceTimeRangeModelConfig = {
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/ResourceTimeRangeModel#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * An encapsulation of the CSS classes to add to the rendered time span element.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/ResourceTimeRangeModel#config-cls)
     */
    cls: DomClassList|string|string[]|object
    /**
     * The numeric part of the timespan's duration (the number of units).
     */
    duration: number
    /**
     * The unit part of the TimeSpan duration, defaults to "d" (days). Valid values are:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/ResourceTimeRangeModel#config-durationUnit)
     */
    durationUnit: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'
    /**
     * The end date of a time span (or Event / Task).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/ResourceTimeRangeModel#config-endDate)
     */
    endDate: string|Date
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Calculated field which encapsulates the duration's magnitude and unit. This field will not be persisted,
     * setting it will update the [duration](https://bryntum.com/products/scheduler/docs#Scheduler/model/TimeSpan#field-duration) and [durationUnit](https://bryntum.com/products/scheduler/docs#Scheduler/model/TimeSpan#field-durationUnit) fields.
     */
    fullDuration: Partial<DurationConfig>|Duration
    /**
     * CSS class specifying an icon to apply to the rendered time span element.
     * <strong>Note</strong>: In case event is a milestone, using `iconCls` with dependency feature might slightly decrease
     * performance because feature will refer to the DOM to get exact size of the element.
     */
    iconCls: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/ResourceTimeRangeModel#config-id)
     */
    id: string|number
    /**
     * The name of the time span (or Event / Task)
     */
    name: string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/ResourceTimeRangeModel#config-readOnly)
     */
    readOnly: boolean
    /**
     * Id of the resource this time range is associated with
     */
    resourceId: string|number
    /**
     * The start date of a time span (or Event / Task).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/ResourceTimeRangeModel#config-startDate)
     */
    startDate: string|Date
    /**
     * A CSS style string (applied to `style.cssText`) or object (applied to `style`)
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/ResourceTimeRangeModel#config-style)
     */
    style: string
    /**
     * Controls this time range's primary color, defaults to using current themes default time range color.
     */
    timeRangeColor: string
    /**
     * The current timeZone this record is converted to. Used internally to keep track of time zone conversions.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/ResourceTimeRangeModel#config-timeZone)
     */
    timeZone: string|number|null
}

/**
 * This class represent a single resource time range in your schedule.
 * To style the rendered elements, use [cls](https://bryntum.com/products/scheduler/docs#Scheduler/model/TimeSpan#field-cls) or [timeRangeColor](https://bryntum.com/products/scheduler/docs#Scheduler/model/ResourceTimeRangeModel#field-timeRangeColor) field.
 * The class is used by the [ResourceTimeRanges](https://bryntum.com/products/scheduler/docs#Scheduler/feature/ResourceTimeRanges) feature.
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/ResourceTimeRangeModel)
 */
export class ResourceTimeRangeModel extends TimeSpan {
    /**
     * The associated resource, retrieved using a relation to a ResourceStore determined by the value assigned
     * to `resourceId`. The relation also lets you access all time ranges on a resource through
     * `ResourceModel#timeRanges`.
     */
    resource: ResourceModel
    /**
     * Id of the resource this time range is associated with
     */
    resourceId: string|number
    /**
     * Controls this time range's primary color, defaults to using current themes default time range color.
     */
    timeRangeColor: string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<ResourceTimeRangeModelConfig>} config
     */
    constructor(config?: Partial<ResourceTimeRangeModelConfig>);
}

/**
 * Type with configuration options for [TimeRangeModel](https://bryntum.com/products/grid/docs/api/Scheduler/model/TimeRangeModel) class.
 */
type TimeRangeModelConfig = {
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/TimeRangeModel#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * An encapsulation of the CSS classes to add to the rendered time span element.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/TimeRangeModel#config-cls)
     */
    cls: DomClassList|string|string[]|object
    /**
     * The numeric part of the timespan's duration (the number of units).
     */
    duration: number
    /**
     * The unit part of the TimeSpan duration, defaults to "d" (days). Valid values are:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/TimeRangeModel#config-durationUnit)
     */
    durationUnit: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'
    /**
     * The end date of a time span (or Event / Task).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/TimeRangeModel#config-endDate)
     */
    endDate: string|Date
    /**
     * A string (either a single date or multiple dates separated by comma) or an array of strings containing
     * the timespan exception dates. The dates that must be skipped when generating occurrences for a repeating
     * timespan. This is used to modify only individual occurrences of the timespan so the further regenerations
     * won't create another copy of this occurrence again.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/TimeRangeModel#config-exceptionDates)
     */
    exceptionDates: string|string[]
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Calculated field which encapsulates the duration's magnitude and unit. This field will not be persisted,
     * setting it will update the [duration](https://bryntum.com/products/scheduler/docs#Scheduler/model/TimeSpan#field-duration) and [durationUnit](https://bryntum.com/products/scheduler/docs#Scheduler/model/TimeSpan#field-durationUnit) fields.
     */
    fullDuration: Partial<DurationConfig>|Duration
    /**
     * CSS class specifying an icon to apply to the rendered time span element.
     * <strong>Note</strong>: In case event is a milestone, using `iconCls` with dependency feature might slightly decrease
     * performance because feature will refer to the DOM to get exact size of the element.
     */
    iconCls: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/TimeRangeModel#config-id)
     */
    id: string|number
    /**
     * The name of the time span (or Event / Task)
     */
    name: string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/TimeRangeModel#config-readOnly)
     */
    readOnly: boolean
    /**
     * The timespan recurrence rule. A string in [RFC-5545](https://tools.ietf.org/html/rfc5545#section-3.3.10)
     * described format ("RRULE" expression).
     */
    recurrenceRule: string
    /**
     * The start date of a time span (or Event / Task).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/TimeRangeModel#config-startDate)
     */
    startDate: string|Date
    /**
     * A CSS style string (applied to `style.cssText`) or object (applied to `style`)
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/TimeRangeModel#config-style)
     */
    style: string
    /**
     * The current timeZone this record is converted to. Used internally to keep track of time zone conversions.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/TimeRangeModel#config-timeZone)
     */
    timeZone: string|number|null
}

/**
 * This class represents a named time range. It is used by the [TimeRanges](https://bryntum.com/products/scheduler/docs#Scheduler/feature/TimeRanges) feature.
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/TimeRangeModel)
 */
export class TimeRangeModel extends TimeSpan {
    /**
     * A string (either a single date or multiple dates separated by comma) or an array of strings containing
     * the timespan exception dates. The dates that must be skipped when generating occurrences for a repeating
     * timespan. This is used to modify only individual occurrences of the timespan so the further regenerations
     * won't create another copy of this occurrence again.
     */
    exceptionDates: string|string[]
    /**
     * Indicates if the timespan is an occurrence of another recurring timespan.
     */
    readonly isOccurrence: boolean
    /**
     * Indicates if the timespan is recurring.
     */
    readonly isRecurring: boolean
    /**
     * If this event is an [occurrence](https://bryntum.com/products/scheduler/docs#Scheduler/model/mixin/RecurringTimeSpan#property-isOccurrence) of a recurring event, then this
     * property yields its zero-based occurrence index in the sequence.
     */
    readonly occurrenceIndex: number
    /**
     * The recurrence model used for the timespan.
     */
    recurrence: RecurrenceModel
    /**
     * Name of the class representing the recurrence model, defaults to [RecurrenceModel](https://bryntum.com/products/scheduler/docs#Scheduler/model/RecurrenceModel)
     */
    recurrenceModel: string
    /**
     * The timespan recurrence rule. A string in [RFC-5545](https://tools.ietf.org/html/rfc5545#section-3.3.10)
     * described format ("RRULE" expression).
     */
    recurrenceRule: string
    /**
     * Returns `true` if this timespan supports recurring.
     */
    supportsRecurring: boolean
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<TimeRangeModelConfig>} config
     */
    constructor(config?: Partial<TimeRangeModelConfig>);
    /**
     * Returns the occurrences of this event over the specified time range. If the first
     * occurrence is in the time range `*this*` record is included in that position.
     * @param {Date} startDate The start date of the range for which to include occurrences.
     * @param {Date} endDate The end date of the range for which to include occurrences. Defaults to the startDate.
     */
    getOccurrencesForDateRange(startDate: Date, endDate?: Date): TimeSpan[];
    /**
     * Does this recurring event have an exception on the passed date.
     * @param {Date} date The date to find an exception for.
     */
    hasException(date: Date): boolean;
    /**
     * Override of [Model](https://bryntum.com/products/taskboard/docs/api/Core/data/Model)'s method. If an [isOccurrence](https://bryntum.com/products/scheduler/docs#Scheduler/model/mixin/RecurringTimeSpan#property-isOccurrence)
     * is passed, it is detached from its parent recurring event. If it still has a recurrence
     * then the recurring event is changed to stop at the occurrence date. If it has no recurrence
     * an exception is added at the occurrence date.
     */
    remove(): void;
    /**
     * Sets a recurrence for the timespan with a given frequency, interval, and end.
     * @param {Partial<RecurrenceModelConfig>|string|RecurrenceModel} recurrence A data object for an instance of [RecurrenceModel](https://bryntum.com/products/scheduler/docs#Scheduler/model/RecurrenceModel). May also be the frequency string: `DAILY`, `WEEKLY`, `MONTHLY`, or `YEARLY`. ```javascript // repeat the event every other week till Jan 2 2039 event.setRecurrence({     frequency : "WEEKLY",     interval  : 2,     endDate   : new Date(2039, 0, 2) }); ``` Also a [recurrence model](https://bryntum.com/products/scheduler/docs#Scheduler/model/RecurrenceModel) can be provided as the only argument for this method: ```javascript const recurrence = new RecurrenceModel({ frequency : 'DAILY', interval : 5 });  event.setRecurrence(recurrence); ``` or ```javascript event.setRecurrence("WEEKLY", 2, new Date(2039, 0, 2)); ```
     * @param {number} interval The interval between occurrences (instances of this recurrence). For example, a daily recurrence with an interval of 2 occurs every other day. Must be greater than 0.
     * @param {number|Date} recurrenceEnd The end of the recurrence. The value can be specified by a date or by a maximum count of occurrences (has to greater than 1, since 1 means the event itself).
     */
    setRecurrence(recurrence: Partial<RecurrenceModelConfig>|string|RecurrenceModel, interval?: number, recurrenceEnd?: number|Date): void;
}

/**
 * Type with configuration options for [TimeSpan](https://bryntum.com/products/grid/docs/api/Scheduler/model/TimeSpan) class.
 */
type TimeSpanConfig = {
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/TimeSpan#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * An encapsulation of the CSS classes to add to the rendered time span element.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/TimeSpan#config-cls)
     */
    cls: DomClassList|string|string[]|object
    /**
     * The numeric part of the timespan's duration (the number of units).
     */
    duration: number
    /**
     * The unit part of the TimeSpan duration, defaults to "d" (days). Valid values are:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/TimeSpan#config-durationUnit)
     */
    durationUnit: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'
    /**
     * The end date of a time span (or Event / Task).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/TimeSpan#config-endDate)
     */
    endDate: string|Date
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Calculated field which encapsulates the duration's magnitude and unit. This field will not be persisted,
     * setting it will update the [duration](https://bryntum.com/products/scheduler/docs#Scheduler/model/TimeSpan#field-duration) and [durationUnit](https://bryntum.com/products/scheduler/docs#Scheduler/model/TimeSpan#field-durationUnit) fields.
     */
    fullDuration: Partial<DurationConfig>|Duration
    /**
     * CSS class specifying an icon to apply to the rendered time span element.
     * <strong>Note</strong>: In case event is a milestone, using `iconCls` with dependency feature might slightly decrease
     * performance because feature will refer to the DOM to get exact size of the element.
     */
    iconCls: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/TimeSpan#config-id)
     */
    id: string|number
    /**
     * The name of the time span (or Event / Task)
     */
    name: string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/TimeSpan#config-readOnly)
     */
    readOnly: boolean
    /**
     * The start date of a time span (or Event / Task).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/TimeSpan#config-startDate)
     */
    startDate: string|Date
    /**
     * A CSS style string (applied to `style.cssText`) or object (applied to `style`)
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/TimeSpan#config-style)
     */
    style: string
    /**
     * The current timeZone this record is converted to. Used internally to keep track of time zone conversions.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/TimeSpan#config-timeZone)
     */
    timeZone: string|number|null
}

/**
 * This class represent a simple date range. It is being used in various subclasses and plugins which operate on date ranges.
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/TimeSpan)
 */
export class TimeSpan extends Model {
    /**
     * An encapsulation of the CSS classes to add to the rendered time span element.
     */
    cls: DomClassList|string|string[]|object
    /**
     * Returns an array of dates in this range. If the range starts/ends not at the beginning of day, the whole day will be included.
     */
    readonly dates: Date[]
    /**
     * The numeric part of the timespan's duration (the number of units).
     */
    duration: number
    /**
     * Returns the duration of this Event in milliseconds.
     */
    readonly durationMS: number
    /**
     * The unit part of the TimeSpan duration, defaults to "d" (days). Valid values are:
     */
    durationUnit: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'
    /**
     * The end date of a time span (or Event / Task).
     */
    endDate: string|Date
    /**
     * Calculated field which encapsulates the duration's magnitude and unit. This field will not be persisted,
     * setting it will update the [duration](https://bryntum.com/products/scheduler/docs#Scheduler/model/TimeSpan#field-duration) and [durationUnit](https://bryntum.com/products/scheduler/docs#Scheduler/model/TimeSpan#field-durationUnit) fields.
     */
    fullDuration: Partial<DurationConfig>|Duration
    /**
     * CSS class specifying an icon to apply to the rendered time span element.
     * <strong>Note</strong>: In case event is a milestone, using `iconCls` with dependency feature might slightly decrease
     * performance because feature will refer to the DOM to get exact size of the element.
     */
    iconCls: string
    /**
     * Returns true if record is a milestone.
     */
    readonly isMilestone: boolean
    /**
     * Checks if the range record has both start and end dates set and start &lt;= end
     */
    isScheduled: boolean
    /**
     * The name of the time span (or Event / Task)
     */
    name: string
    /**
     * The start date of a time span (or Event / Task).
     */
    startDate: string|Date
    /**
     * A CSS style string (applied to `style.cssText`) or object (applied to `style`)
     */
    style: string
    /**
     * The current timeZone this record is converted to. Used internally to keep track of time zone conversions.
     */
    timeZone: string|number|null
    /**
     * Returns the WBS code of this model (e.g '2.1.3'). Only relevant when part of a tree store, as in the Gantt chart.
     */
    wbsCode: string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<TimeSpanConfig>} config Raw model config
     * @param {Store} store Data store
     * @param {object} meta Meta data
     */
    constructor(config?: Partial<TimeSpanConfig>, store?: Store, meta?: object);
    /**
     * Triggers a download of this time span in ICS format (for import in Outlook etc.)
     * @param {Record<string, string>} icsEventConfig A config object with properties to be added in to `BEGIN:VEVENT` section of the exported event.
     */
    exportToICS(icsEventConfig?: Record<string, string>): void;
    /**
     * Iterates over the [dates](https://bryntum.com/products/scheduler/docs#Scheduler/model/TimeSpan#property-dates)
     * @param {Function} func The function to call for each date
     * @param {object} thisObj `this` reference for the function
     */
    forEachDate(func: Function, thisObj: object): void;
    /**
     * Defines if the given event field should be manually editable in UI.
     * You can override this method to provide your own logic.
     * @param {string} fieldName Name of the field
     */
    isEditable(fieldName: string): boolean;
    /**
     * Sets duration and durationUnit in one go. Only allowed way to change durationUnit, the durationUnit field is
     * readonly after creation
     * @param {number} duration Duration value
     * @param {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} durationUnit Unit for specified duration value, see [durationUnit](https://bryntum.com/products/scheduler/docs#Scheduler/model/TimeSpan#field-durationUnit) for valid values
     */
    setDuration(duration: number, durationUnit: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'): void;
    /**
     * Sets the range end date
     * @param {Date} date The new end date
     * @param {boolean} keepDuration Pass `true` to keep the duration of the task ("move" the event), `false` to change the duration ("resize" the event). Defaults to `false`
     */
    setEndDate(date: Date, keepDuration?: boolean): void;
    /**
     * Sets the range start date
     * @param {Date} date The new start date
     * @param {boolean} keepDuration Pass `true` to keep the duration of the task ("move" the event), `false` to change the duration ("resize" the event). Defaults to `true`
     */
    setStartDate(date: Date, keepDuration?: boolean): void;
    /**
     * Sets the event start and end dates
     * @param {Date} start The new start date
     * @param {Date} end The new end date
     * @param {boolean} silent Pass `true` to not trigger events
     */
    setStartEndDate(start: Date, end: Date, silent?: boolean): void;
    /**
     * Shift the dates for the date range by the passed amount and unit
     * @param {'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y'} unit The unit to shift by, see [DateHelper](https://bryntum.com/products/taskboard/docs/api/Core/helper/DateHelper) for more information on valid formats.
     * @param {number} amount The amount to shift
     */
    shift(unit: 'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y', amount: number): void;
    /**
     * Splits this event into two pieces at the desired position.
     * @param {number|string} splitPoint The duration point at which to split this event. If less then `1`, this indicates the relative position at which it will be split. 0.5 means cut it in half. If greater than `1`, this indicates the new duration in the current duration units of this event before the split. If this is a string, it will be a duration description as described in [parseDuration](https://bryntum.com/products/taskboard/docs/api/Core/helper/DateHelper#function-parseDuration-static), for example `'15 min'`
     */
    split(splitPoint?: number|string): TimeSpan;
}

/**
 * Type with configuration options for [AssignmentModelMixin](https://bryntum.com/products/grid/docs/api/Scheduler/model/mixin/AssignmentModelMixin) class.
 */
type AssignmentModelMixinClassConfig = {
    /**
     * Specify `false` to opt out of drawing dependencies from/to this assignment
     */
    drawDependencies: boolean
    /**
     * Id for the event to assign
     */
    eventId: string|number
    /**
     * Id for the resource to assign to
     */
    resourceId: string|number
}

export class AssignmentModelMixinClass {
    /**
     * Specify `false` to opt out of drawing dependencies from/to this assignment
     */
    drawDependencies: boolean
    /**
     * Id for the event to assign
     */
    eventId: string|number
    /**
     * Convenience property to get the name of the associated event.
     */
    readonly eventName: string
    /**
     * Returns true if the Assignment can be persisted (e.g. task and resource are not 'phantoms')
     */
    isPersistable: boolean
    /**
     * Id for the resource to assign to
     */
    resourceId: string|number
    /**
     * Convenience property to get the name of the associated resource.
     */
    readonly resourceName: string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<AssignmentModelMixinClassConfig>} config
     */
    constructor(config?: Partial<AssignmentModelMixinClassConfig>);
    /**
     * Returns the resource associated with this assignment.
     */
    getResource(): ResourceModel;
    /**
     * Set value for the specified field(s), triggering engine calculations immediately. See
     * [Model#set()](https://bryntum.com/products/taskboard/docs/api/Core/data/Model#function-set) for arguments.
     * @param {string|object} field The field to set value for, or an object with multiple values to set in one call
     * @param {any} value Value to set
     * @param {boolean} silent Set to true to not trigger events automatically.
     */
    setAsync(field: string|object, value?: any, silent?: boolean): Promise<void>;
    /**
     * Returns a textual representation of this assignment (e.g. Mike 50%).
     */
    toString(): string;
}

export const AssignmentModelMixin : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & AssignmentModelMixinClass>

/**
 * Type with configuration options for [EventModelMixin](https://bryntum.com/products/grid/docs/api/Scheduler/model/mixin/EventModelMixin) class.
 */
type EventModelMixinClassConfig = {
    /**
     * A field marking event as all day(s) spanning event.
     * For example, a holiday day may be represented by a `startDate`, and the `allDay` flag.
     */
    allDay: boolean
    /**
     * Specify false to prevent the event from being dragged (if EventDrag feature is used)
     */
    draggable: boolean
    /**
     * The numeric part of the timespan's duration (the number of units).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/mixin/EventModelMixin#config-duration)
     */
    duration: number
    /**
     * The end date of a time span (or Event / Task).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/mixin/EventModelMixin#config-endDate)
     */
    endDate: string|Date
    /**
     * Controls the primary color of the event. For available standard colors, see
     * [EventColor](https://bryntum.com/products/scheduler/docs#Scheduler/model/mixin/EventModelMixin#typedef-EventColor).
     */
    eventColor: EventColor|string|null
    /**
     * Controls this events appearance, see Schedulers
     * [eventStyle config](https://bryntum.com/products/scheduler/docs#Scheduler/view/mixin/TimelineEventRendering#config-eventStyle) for
     * available options.
     */
    eventStyle: 'plain'|'border'|'colored'|'hollow'|'line'|'dashed'|'minimal'|'rounded'|'calendar'|'interday'|null
    /**
     * Calculated field which encapsulates the duration's magnitude and unit. This field will not be persisted,
     * setting it will update the [duration](https://bryntum.com/products/scheduler/docs#Scheduler/model/mixin/EventModelMixin#field-duration) and
     * [durationUnit](https://bryntum.com/products/scheduler/docs#Scheduler/model/TimeSpan#field-durationUnit) fields.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/mixin/EventModelMixin#config-fullDuration)
     */
    fullDuration: Partial<DurationConfig>|Duration
    /**
     * The unique identifier of a task (mandatory)
     */
    id: string|number
    /**
     * Width (in px) to use for this milestone when using Scheduler#milestoneLayoutMode 'data'.
     */
    milestoneWidth: number
    /**
     * Specify `false` to prevent the event from being resized (if EventResize feature is used). You can also
     * specify `'start'` or `'end'` to only allow resizing in one direction
     */
    resizable: boolean|string
    /**
     * Id of the resource this event is associated with (only usable for single assignments). We recommend
     * using assignments in an AssignmentStore over this approach. Internally any Event using `resourceId`
     * will have an assignment in AssignmentStore generated.
     */
    resourceId: string|number
    /**
     * Ids of the resources this event is associated with (can be used for for multiple assignments).
     * Any event using `resourceIds` will have assignments in AssignmentStore generated automatically.
     * It only applies if is configured with `perist: true`.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/mixin/EventModelMixin#config-resourceIds)
     */
    resourceIds: string[]|number[]
    /**
     * The array of [resources](https://bryntum.com/products/scheduler/docs#Scheduler/model/ResourceModel) which are assigned to this event.
     */
    resources: ResourceModel[]
    /**
     * The start date of a time span (or Event / Task).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/mixin/EventModelMixin#config-startDate)
     */
    startDate: string|Date
    /**
     * Set this field to `false` to opt out of [sticky event content](https://bryntum.com/products/scheduler/docs#Scheduler/feature/StickyEvents)
     * (keeping event text in view while scrolling).
     */
    stickyContents: boolean
}

export class EventModelMixinClass {
    /**
     * A field marking event as all day(s) spanning event.
     * For example, a holiday day may be represented by a `startDate`, and the `allDay` flag.
     */
    allDay: boolean
    /**
     * Returns all assignments for the event. Event must be part of the store for this method to work.
     */
    readonly assignments: AssignmentModel[]
    /**
     * Specify false to prevent the event from being dragged (if EventDrag feature is used)
     */
    draggable: boolean
    /**
     * The numeric part of the timespan's duration (the number of units).
     */
    duration: number
    /**
     * The end date of a time span (or Event / Task).
     */
    endDate: string|Date
    /**
     * Controls the primary color of the event. For available standard colors, see
     * [EventColor](https://bryntum.com/products/scheduler/docs#Scheduler/model/mixin/EventModelMixin#typedef-EventColor).
     */
    eventColor: EventColor|string|null
    /**
     * Controls this events appearance, see Schedulers
     * [eventStyle config](https://bryntum.com/products/scheduler/docs#Scheduler/view/mixin/TimelineEventRendering#config-eventStyle) for
     * available options.
     */
    eventStyle: 'plain'|'border'|'colored'|'hollow'|'line'|'dashed'|'minimal'|'rounded'|'calendar'|'interday'|null
    /**
     * Calculated field which encapsulates the duration's magnitude and unit. This field will not be persisted,
     * setting it will update the [duration](https://bryntum.com/products/scheduler/docs#Scheduler/model/mixin/EventModelMixin#field-duration) and
     * [durationUnit](https://bryntum.com/products/scheduler/docs#Scheduler/model/TimeSpan#field-durationUnit) fields.
     */
    fullDuration: Partial<DurationConfig>|Duration
    /**
     * The unique identifier of a task (mandatory)
     */
    id: string|number
    /**
     * Returns true if event can be drag and dropped
     */
    isDraggable: boolean
    /**
     * Flag which indicates that this event is an interday event. This means that it spans
     * an entire day or multiple days.
     */
    readonly isInterDay: boolean
    /**
     * Returns false if the event is not persistable. By default it always is, override this getter if you need
     * custom logic.
     */
    readonly isPersistable: boolean
    /**
     * Returns true if event can be resized, but can additionally return 'start' or 'end' indicating how this event can
     * be resized.
     */
    readonly isResizable: boolean|string
    /**
     * Width (in px) to use for this milestone when using Scheduler#milestoneLayoutMode 'data'.
     */
    milestoneWidth: number
    /**
     * Returns all predecessor dependencies of this event
     */
    readonly predecessors: DependencyBaseModel[]
    /**
     * Specify `false` to prevent the event from being resized (if EventResize feature is used). You can also
     * specify `'start'` or `'end'` to only allow resizing in one direction
     */
    resizable: boolean|string
    /**
     * Returns the first assigned resource, or assigns a resource
     */
    resource: ResourceModel
    /**
     * Id of the resource this event is associated with (only usable for single assignments). We recommend
     * using assignments in an AssignmentStore over this approach. Internally any Event using `resourceId`
     * will have an assignment in AssignmentStore generated.
     */
    resourceId: string|number
    /**
     * Ids of the resources this event is associated with (can be used for for multiple assignments).
     * Any event using `resourceIds` will have assignments in AssignmentStore generated automatically.
     * It only applies if is configured with `perist: true`.
     */
    resourceIds: string[]|number[]
    /**
     * The array of [resources](https://bryntum.com/products/scheduler/docs#Scheduler/model/ResourceModel) which are assigned to this event.
     */
    resources: ResourceModel[]
    /**
     * The start date of a time span (or Event / Task).
     */
    startDate: string|Date
    /**
     * Set this field to `false` to opt out of [sticky event content](https://bryntum.com/products/scheduler/docs#Scheduler/feature/StickyEvents)
     * (keeping event text in view while scrolling).
     */
    stickyContents: boolean
    /**
     * Returns all successor dependencies of this event
     */
    readonly successors: DependencyBaseModel[]
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<EventModelMixinClassConfig>} config
     */
    constructor(config?: Partial<EventModelMixinClassConfig>);
    /**
     * Assigns this event to the specified resource.
     * @param {ResourceModel|string|number|ResourceModel[]|string[]|number[]} resource A new resource for this event, either as a full Resource record or an id (or an array of such).
     * @param {boolean|number} removeExistingAssignments `true` to first remove existing assignments
     */
    assign(resource: ResourceModel|string|number|ResourceModel[]|string[]|number[], removeExistingAssignments?: boolean|number): Promise<void>;
    /**
     * Returns either the resource associated with this event (when called w/o `resourceId`) or resource
     * with specified id.
     * @param {string} resourceId To retrieve a specific resource
     */
    getResource(resourceId?: string): ResourceModel;
    /**
     * Returns true if this event is assigned to a certain resource.
     * @param {ResourceModel|string|number} resource The resource to query for
     */
    isAssignedTo(resource: ResourceModel|string|number): boolean;
    /**
     * Defines if the given event field should be manually editable in UI.
     * You can override this method to provide your own logic.
     * @param {string} fieldName Name of the field
     */
    isEditable(fieldName: string): boolean;
    /**
     * Reassigns an event from an old resource to a new resource
     * @param {ResourceModel|string|number} oldResourceId A resource to unassign from or its id
     * @param {ResourceModel|string|number} newResourceId A resource to assign to or its id
     */
    reassign(oldResourceId: ResourceModel|string|number, newResourceId: ResourceModel|string|number): void;
    /**
     * Set value for the specified field(s), triggering engine calculations immediately. See
     * [Model#set()](https://bryntum.com/products/taskboard/docs/api/Core/data/Model#function-set) for arguments.
     * @param {string|object} field The field to set value for, or an object with multiple values to set in one call
     * @param {any} value Value to set
     * @param {boolean} silent Set to true to not trigger events. If event is recurring, occurrences won't be updated automatically.
     */
    setAsync(field: string|object, value?: any, silent?: boolean): Promise<void>;
    /**
     * Shift the dates for the date range by the passed amount and unit
     * @param {'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y'} unit The unit to shift by, see [DateHelper](https://bryntum.com/products/taskboard/docs/api/Core/helper/DateHelper) for more information on valid formats.
     * @param {number} amount The amount to shift
     */
    shift(unit: 'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y', amount: number): Promise<any>;
    /**
     * Unassigns this event from the specified resource
     * @param {ResourceModel|string|number} resource The resource to unassign from.
     */
    unassign(resource?: ResourceModel|string|number): Promise<void>;
}

export const EventModelMixin : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & EventModelMixinClass>

/**
 * Type with configuration options for [ProjectModelMixin](https://bryntum.com/products/grid/docs/api/Scheduler/model/mixin/ProjectModelMixin) class.
 */
type ProjectModelMixinClassConfig = {
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/mixin/ProjectModelMixin#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/mixin/ProjectModelMixin#config-id)
     */
    id: string|number
    /**
     * Project data as a JSON string, used to populate its stores.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/mixin/ProjectModelMixin#config-json)
     */
    json: string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/mixin/ProjectModelMixin#config-readOnly)
     */
    readOnly: boolean
    /**
     * A [ResourceTimeRangeStore](https://bryntum.com/products/scheduler/docs#Scheduler/data/ResourceTimeRangeStore) instance or a config object.
     */
    resourceTimeRangeStore: ResourceTimeRangeStore|Partial<ResourceTimeRangeStoreConfig>
    /**
     * The constructor to create a resource time range store instance with. Should be a class subclassing the
     * [ResourceTimeRangeStore](https://bryntum.com/products/scheduler/docs#Scheduler/data/ResourceTimeRangeStore)
     */
    resourceTimeRangeStoreClass: typeof ResourceTimeRangeStore
    /**
     * The initial data, to fill the [resourceTimeRangeStore](https://bryntum.com/products/scheduler/docs#Scheduler/model/mixin/ProjectModelMixin#property-resourceTimeRangeStore) with.
     * Should be an array of [ResourceTimeRangeModel](https://bryntum.com/products/scheduler/docs#Scheduler/model/ResourceTimeRangeModel) or it's
     * configuration objects.
     */
    resourceTimeRangesData: ResourceTimeRangeModel[]
    /**
     * Configuration options to provide to the STM manager
     */
    stm: Partial<StateTrackingManagerConfig>|StateTrackingManager
    /**
     * A [Store](https://bryntum.com/products/taskboard/docs/api/Core/data/Store) instance or a config object.
     */
    timeRangeStore: Store|Partial<StoreConfig>
    /**
     * The constructor to create a time range store instance with. Should be a class subclassing the
     * [TimeRangeStore](https://bryntum.com/products/scheduler/docs#Scheduler/data/TimeRangeStore)
     */
    timeRangeStoreClass: typeof TimeRangeStore
    /**
     * The initial data, to fill the [timeRangeStore](https://bryntum.com/products/scheduler/docs#Scheduler/model/mixin/ProjectModelMixin#property-timeRangeStore) with.
     * Should be an array of [TimeSpan](https://bryntum.com/products/scheduler/docs#Scheduler/model/TimeSpan) or its configuration objects.
     */
    timeRangesData: TimeSpan[]
    /**
     * Set to a IANA time zone (i.e. `Europe/Stockholm`) or a UTC offset in minutes (i.e. `-120`). This will
     * convert all events, tasks and time ranges to the specified time zone or offset. It will also affect the
     * displayed timeline's headers as well at the start and end date of it.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/mixin/ProjectModelMixin#config-timeZone)
     */
    timeZone: string|number
    /**
     * Fired when data in any of the projects stores changes.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/mixin/ProjectModelMixin#event-change)
     * @param {object} event Event object
     * @param {SchedulerProjectModel|any} event.source This project
     * @param {Store} event.store Affected store
     * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} event.action Name of action which triggered the change. May be one of:  * `'remove'` * `'removeAll'` * `'add'` * `'updatemultiple'` * `'clearchanges'` * `'filter'` * `'update'` * `'dataset'` * `'replace'`
     * @param {Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onChange: ((event: { source: SchedulerProjectModel|any, store: Store, action: 'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
}

export class ProjectModelMixinClass extends Model {
    /**
     * Get or set data of project stores. The returned data is identical to what
     * [toJSON](https://bryntum.com/products/scheduler/docs#Scheduler/model/mixin/ProjectModelMixin#function-toJSON) returns:
     */
    inlineData: object
    /**
     * Get or set project data (records from its stores) as a JSON string.
     */
    json: string
    /**
     * The [store](https://bryntum.com/products/scheduler/docs#Scheduler/data/ResourceTimeRangeStore) holding the resource time ranges information.
     */
    resourceTimeRangeStore: ResourceTimeRangeStore
    /**
     * State tracking manager instance the project relies on
     */
    stm: StateTrackingManager
    /**
     * The [store](https://bryntum.com/products/taskboard/docs/api/Core/data/Store) holding the time ranges information.
     */
    timeRangeStore: Store
    /**
     * Set to a IANA time zone (i.e. `Europe/Stockholm`) or a UTC offset in minutes (i.e. `-120`). This will
     * convert all events, tasks and time ranges to the specified time zone or offset. It will also affect the
     * displayed timeline's headers as well at the start and end date of it.
     */
    timeZone: string|number
    /**
     * Fired when data in any of the projects stores changes.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/mixin/ProjectModelMixin#event-change)
     * @param {object} event Event object
     * @param {SchedulerProjectModel|any} event.source This project
     * @param {Store} event.store Affected store
     * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} event.action Name of action which triggered the change. May be one of:  * `'remove'` * `'removeAll'` * `'add'` * `'updatemultiple'` * `'clearchanges'` * `'filter'` * `'update'` * `'dataset'` * `'replace'`
     * @param {Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onChange: ((event: { source: SchedulerProjectModel|any, store: Store, action: 'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<ProjectModelMixinClassConfig>} config Raw model config
     * @param {Store} store Data store
     * @param {object} meta Meta data
     */
    constructor(config?: Partial<ProjectModelMixinClassConfig>, store?: Store, meta?: object);
    /**
     * Project changes (CRUD operations to records in its stores) are automatically committed on a buffer to the
     * underlying graph based calculation engine. The engine performs it calculations async.
     */
    commitAsync(): Promise<void>;
    /**
     * Accepts a "data package" consisting of data for the projects stores, which is then loaded into the stores.
     * @param {object} dataPackage A data package as described above
     */
    loadInlineData(dataPackage: object): Promise<void>;
    /**
     * Returns the data from the records of the projects stores, in a format that can be consumed by `loadInlineData()`.
     */
    toJSON(): object;
}

export const ProjectModelMixin : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & ProjectModelMixinClass>

/**
 * Type with configuration options for [ProjectModelTimeZoneMixin](https://bryntum.com/products/grid/docs/api/Scheduler/model/mixin/ProjectModelTimeZoneMixin) class.
 */
type ProjectModelTimeZoneMixinClassConfig = {
    /**
     * Set to a IANA time zone (i.e. `Europe/Stockholm`) or a UTC offset in minutes (i.e. `-120`). This will
     * convert all events, tasks and time ranges to the specified time zone or offset. It will also affect the
     * displayed timeline's headers as well at the start and end date of it.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/mixin/ProjectModelTimeZoneMixin#config-timeZone)
     */
    timeZone: string|number
}

export class ProjectModelTimeZoneMixinClass {
    /**
     * Set to a IANA time zone (i.e. `Europe/Stockholm`) or a UTC offset in minutes (i.e. `-120`). This will
     * convert all events, tasks and time ranges to the specified time zone or offset. It will also affect the
     * displayed timeline's headers as well at the start and end date of it.
     */
    timeZone: string|number
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<ProjectModelTimeZoneMixinClassConfig>} config
     */
    constructor(config?: Partial<ProjectModelTimeZoneMixinClassConfig>);
}

export const ProjectModelTimeZoneMixin : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & ProjectModelTimeZoneMixinClass>

/**
 * Type with configuration options for [RecurringTimeSpan](https://bryntum.com/products/grid/docs/api/Scheduler/model/mixin/RecurringTimeSpan) class.
 */
type RecurringTimeSpanClassConfig = {
    /**
     * A string (either a single date or multiple dates separated by comma) or an array of strings containing
     * the timespan exception dates. The dates that must be skipped when generating occurrences for a repeating
     * timespan. This is used to modify only individual occurrences of the timespan so the further regenerations
     * won't create another copy of this occurrence again.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/mixin/RecurringTimeSpan#config-exceptionDates)
     */
    exceptionDates: string|string[]
    /**
     * The timespan recurrence rule. A string in [RFC-5545](https://tools.ietf.org/html/rfc5545#section-3.3.10)
     * described format ("RRULE" expression).
     */
    recurrenceRule: string
}

export class RecurringTimeSpanClass {
    /**
     * A string (either a single date or multiple dates separated by comma) or an array of strings containing
     * the timespan exception dates. The dates that must be skipped when generating occurrences for a repeating
     * timespan. This is used to modify only individual occurrences of the timespan so the further regenerations
     * won't create another copy of this occurrence again.
     */
    exceptionDates: string|string[]
    /**
     * Indicates if the timespan is an occurrence of another recurring timespan.
     */
    readonly isOccurrence: boolean
    /**
     * Indicates if the timespan is recurring.
     */
    readonly isRecurring: boolean
    /**
     * If this event is an [occurrence](https://bryntum.com/products/scheduler/docs#Scheduler/model/mixin/RecurringTimeSpan#property-isOccurrence) of a recurring event, then this
     * property yields its zero-based occurrence index in the sequence.
     */
    readonly occurrenceIndex: number
    /**
     * The recurrence model used for the timespan.
     */
    recurrence: RecurrenceModel
    /**
     * Name of the class representing the recurrence model, defaults to [RecurrenceModel](https://bryntum.com/products/scheduler/docs#Scheduler/model/RecurrenceModel)
     */
    recurrenceModel: string
    /**
     * The timespan recurrence rule. A string in [RFC-5545](https://tools.ietf.org/html/rfc5545#section-3.3.10)
     * described format ("RRULE" expression).
     */
    recurrenceRule: string
    /**
     * Returns `true` if this timespan supports recurring.
     */
    supportsRecurring: boolean
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<RecurringTimeSpanClassConfig>} config
     */
    constructor(config?: Partial<RecurringTimeSpanClassConfig>);
    /**
     * Returns the occurrences of this event over the specified time range. If the first
     * occurrence is in the time range `*this*` record is included in that position.
     * @param {Date} startDate The start date of the range for which to include occurrences.
     * @param {Date} endDate The end date of the range for which to include occurrences. Defaults to the startDate.
     */
    getOccurrencesForDateRange(startDate: Date, endDate?: Date): TimeSpan[];
    /**
     * Does this recurring event have an exception on the passed date.
     * @param {Date} date The date to find an exception for.
     */
    hasException(date: Date): boolean;
    /**
     * Override of [Model](https://bryntum.com/products/taskboard/docs/api/Core/data/Model)'s method. If an [isOccurrence](https://bryntum.com/products/scheduler/docs#Scheduler/model/mixin/RecurringTimeSpan#property-isOccurrence)
     * is passed, it is detached from its parent recurring event. If it still has a recurrence
     * then the recurring event is changed to stop at the occurrence date. If it has no recurrence
     * an exception is added at the occurrence date.
     */
    remove(): void;
    /**
     * Sets a recurrence for the timespan with a given frequency, interval, and end.
     * @param {Partial<RecurrenceModelConfig>|string|RecurrenceModel} recurrence A data object for an instance of [RecurrenceModel](https://bryntum.com/products/scheduler/docs#Scheduler/model/RecurrenceModel). May also be the frequency string: `DAILY`, `WEEKLY`, `MONTHLY`, or `YEARLY`. ```javascript // repeat the event every other week till Jan 2 2039 event.setRecurrence({     frequency : "WEEKLY",     interval  : 2,     endDate   : new Date(2039, 0, 2) }); ``` Also a [recurrence model](https://bryntum.com/products/scheduler/docs#Scheduler/model/RecurrenceModel) can be provided as the only argument for this method: ```javascript const recurrence = new RecurrenceModel({ frequency : 'DAILY', interval : 5 });  event.setRecurrence(recurrence); ``` or ```javascript event.setRecurrence("WEEKLY", 2, new Date(2039, 0, 2)); ```
     * @param {number} interval The interval between occurrences (instances of this recurrence). For example, a daily recurrence with an interval of 2 occurs every other day. Must be greater than 0.
     * @param {number|Date} recurrenceEnd The end of the recurrence. The value can be specified by a date or by a maximum count of occurrences (has to greater than 1, since 1 means the event itself).
     */
    setRecurrence(recurrence: Partial<RecurrenceModelConfig>|string|RecurrenceModel, interval?: number, recurrenceEnd?: number|Date): void;
}

export const RecurringTimeSpan : <T extends AnyConstructor<TimeSpan>>(base : T) => AnyConstructor<InstanceType<T> & RecurringTimeSpanClass>

/**
 * Type with configuration options for [ResourceModelMixin](https://bryntum.com/products/grid/docs/api/Scheduler/model/mixin/ResourceModelMixin) class.
 */
type ResourceModelMixinClassConfig = {
    /**
     * Margin between stacked event bars for this resource, in px.
     */
    barMargin: number
    /**
     * Base width of this resource, in px. If not set, the `columnWidth` specified in
     * the Scheduler's configured [resourceColumns](https://bryntum.com/products/scheduler/docs#Scheduler/view/Scheduler#config-resourceColumns) is used.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/mixin/ResourceModelMixin#config-columnWidth)
     */
    columnWidth: number
    /**
     * Controls the primary color used for events assigned to this resource. Can be overridden per event using
     * EventModels [eventColor config](https://bryntum.com/products/scheduler/docs#Scheduler/model/mixin/EventModelMixin#field-eventColor). Also, see
     * Schedulers [eventColor config](https://bryntum.com/products/scheduler/docs#Scheduler/view/mixin/TimelineEventRendering#config-eventColor).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/mixin/ResourceModelMixin#config-eventColor)
     */
    eventColor: EventColor
    /**
     * Specify this to use a resource specific event layout in horizontal mode, see
     * [eventLayout](https://bryntum.com/products/scheduler/docs#Scheduler/view/mixin/SchedulerEventRendering#config-eventLayout) for options.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/mixin/ResourceModelMixin#config-eventLayout)
     */
    eventLayout: 'stack'|'pack'|'mixed'|'none'
    /**
     * Controls the style used for events assigned to this resource. Can be overridden per event using
     * EventModels [eventStyle config](https://bryntum.com/products/scheduler/docs#Scheduler/model/mixin/EventModelMixin#field-eventStyle). See Schedulers
     * [eventStyle config](https://bryntum.com/products/scheduler/docs#Scheduler/view/mixin/TimelineEventRendering#config-eventStyle) for available
     * options.
     */
    eventStyle: string
    /**
     * Unique identifier
     */
    id: string|number
    /**
     * Image name relative to [resourceImagePath](https://bryntum.com/products/scheduler/docs#Scheduler/view/mixin/SchedulerEventRendering#config-resourceImagePath),
     * used by `ResourceInfoColumn` and vertical modes `ResourceHeader` to display a miniature image
     * for the resource.
     * Set value to `false` to disable image display.
     */
    image: string|boolean
    /**
     * Fully qualified image URL, used by `ResourceInfoColumn` and vertical modes `ResourceHeader` to display a miniature image
     * for the resource.
     */
    imageUrl: string
    /**
     * Get or set resource name
     */
    name: string
    /**
     * Control how much space to leave between the first event/last event and the resources edge (top/bottom
     * margin within the resource row in horizontal mode, left/right margin within the resource column in
     * vertical mode), in px.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/mixin/ResourceModelMixin#config-resourceMargin)
     */
    resourceMargin: number|Partial<ResourceMarginConfig>
    /**
     * Base height of this resource, in px. When unset, Schedulers configured rowHeight is used.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/mixin/ResourceModelMixin#config-rowHeight)
     */
    rowHeight: number
}

export class ResourceModelMixinClass {
    /**
     * Returns all assignments for the resource
     */
    assignments: AssignmentModel[]
    /**
     * Margin between stacked event bars for this resource, in px.
     */
    barMargin: number
    /**
     * Base width of this resource, in px. If not set, the `columnWidth` specified in
     * the Scheduler's configured [resourceColumns](https://bryntum.com/products/scheduler/docs#Scheduler/view/Scheduler#config-resourceColumns) is used.
     */
    columnWidth: number
    /**
     * Controls the primary color used for events assigned to this resource. Can be overridden per event using
     * EventModels [eventColor config](https://bryntum.com/products/scheduler/docs#Scheduler/model/mixin/EventModelMixin#field-eventColor). Also, see
     * Schedulers [eventColor config](https://bryntum.com/products/scheduler/docs#Scheduler/view/mixin/TimelineEventRendering#config-eventColor).
     */
    eventColor: EventColor
    /**
     * Specify this to use a resource specific event layout in horizontal mode, see
     * [eventLayout](https://bryntum.com/products/scheduler/docs#Scheduler/view/mixin/SchedulerEventRendering#config-eventLayout) for options.
     */
    eventLayout: 'stack'|'pack'|'mixed'|'none'
    /**
     * Controls the style used for events assigned to this resource. Can be overridden per event using
     * EventModels [eventStyle config](https://bryntum.com/products/scheduler/docs#Scheduler/model/mixin/EventModelMixin#field-eventStyle). See Schedulers
     * [eventStyle config](https://bryntum.com/products/scheduler/docs#Scheduler/view/mixin/TimelineEventRendering#config-eventStyle) for available
     * options.
     */
    eventStyle: string
    /**
     * Unique identifier
     */
    id: string|number
    /**
     * Image name relative to [resourceImagePath](https://bryntum.com/products/scheduler/docs#Scheduler/view/mixin/SchedulerEventRendering#config-resourceImagePath),
     * used by `ResourceInfoColumn` and vertical modes `ResourceHeader` to display a miniature image
     * for the resource.
     * Set value to `false` to disable image display.
     */
    image: string|boolean
    /**
     * Fully qualified image URL, used by `ResourceInfoColumn` and vertical modes `ResourceHeader` to display a miniature image
     * for the resource.
     */
    imageUrl: string
    /**
     * Returns the initials (first letter of the first &amp; last space-separated word in the name) or an empty string
     * if this resource has no name. You can override this method in a ResourceModel subclass to provide your own implementation
     */
    readonly initials: string
    /**
     * Returns `true` if the resource can be persisted.
     * In a flat store, a resource is always considered persistable. In a tree store, a resource is considered
     * persistable if its parent node is persistable.
     */
    readonly isPersistable: boolean
    /**
     * Get or set resource name
     */
    name: string
    /**
     * Control how much space to leave between the first event/last event and the resources edge (top/bottom
     * margin within the resource row in horizontal mode, left/right margin within the resource column in
     * vertical mode), in px.
     */
    resourceMargin: number|Partial<ResourceMarginConfig>
    /**
     * Base height of this resource, in px. When unset, Schedulers configured rowHeight is used.
     */
    rowHeight: number
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<ResourceModelMixinClassConfig>} config
     */
    constructor(config?: Partial<ResourceModelMixinClassConfig>);
    /**
     * Returns an array of events, associated with this resource
     * @deprecated 5.3.6 Use the events property instead
     */
    getEvents(): EventModel[];
    /**
     * Set value for the specified field(s), triggering engine calculations immediately. See
     * [Model#set()](https://bryntum.com/products/taskboard/docs/api/Core/data/Model#function-set) for arguments.
     * @param {string|object} field The field to set value for, or an object with multiple values to set in one call
     * @param {any} value Value to set
     * @param {boolean} silent Set to true to not trigger events automatically.
     */
    setAsync(field: string|object, value?: any, silent?: boolean): Promise<void>;
    /**
     * Unassigns this Resource from all its Events
     */
    unassignAll(): void;
}

export const ResourceModelMixin : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & ResourceModelMixinClass>

/**
 * Type with configuration options for [TimeZonedDatesMixin](https://bryntum.com/products/grid/docs/api/Scheduler/model/mixin/TimeZonedDatesMixin) class.
 */
type TimeZonedDatesMixinClassConfig = {
    /**
     * The current timeZone this record is converted to. Used internally to keep track of time zone conversions.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/model/mixin/TimeZonedDatesMixin#config-timeZone)
     */
    timeZone: string|number|null
}

export class TimeZonedDatesMixinClass {
    /**
     * The current timeZone this record is converted to. Used internally to keep track of time zone conversions.
     */
    timeZone: string|number|null
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<TimeZonedDatesMixinClassConfig>} config
     */
    constructor(config?: Partial<TimeZonedDatesMixinClassConfig>);
}

export const TimeZonedDatesMixin : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & TimeZonedDatesMixinClass>

/**
 * Type with configuration options for [SchedulerProjectCombo](https://bryntum.com/products/grid/docs/api/Scheduler/widget/ProjectCombo) class.
 */
type SchedulerProjectComboConfig = ContainerItemConfig & {
    type: 'projectcombo'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * By default PickerField's picker is transient, and will [hidePicker](https://bryntum.com/products/taskboard/docs/api/Core/widget/PickerField#function-hidePicker) when the user clicks or
     * taps outside or when focus moves outside picker.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-autoClose)
     * @deprecated This will be removed in 6.0
     */
    autoClose: boolean
    /**
     * Sets the native `autocomplete` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)
     */
    autoComplete: string
    /**
     * Configure as `true` to have the picker expand upon focus enter.
     */
    autoExpand: boolean
    /**
     * Specify `true` to auto select field contents on focus
     */
    autoSelect: boolean
    /**
     * Initial text to show in badge.
     */
    badge: string
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Configure as `true` to force case matching when filtering the dropdown list based upon the typed value.
     */
    caseSensitive: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * A config object to configure the [ChipView](https://bryntum.com/products/taskboard/docs/api/Core/widget/ChipView) to display the
     * selected value set when [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) is `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-chipView)
     */
    chipView: Partial<ChipViewConfig>
    /**
     * `true` to clear value typed to a multiselect combo when picker is collapsed
     */
    clearTextOnPickerHide: boolean
    /**
     * Show a trigger to clear field, and allow `SHIFT+BACKSPACE` key to clear field if this field is
     * not [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-readOnly). The trigger is available in the [triggers](#Core/widget/Field#property-triggers) object
     * under the name `clear`. May also be an object which configures the `clear`
     * [trigger](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#property-triggers).
     */
    clearable: boolean|Partial<FieldTriggerConfig>
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-cls)
     */
    cls: string|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The config controls how the value of nested items are handled when a parent container gets or sets its
     * [values](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-containValues)
     * @param {Field} field Field instance
     * @returns {boolean}
     */
    containValues: boolean|string|((field: Field) => boolean)
    /**
     * The configuration for additional items associated to this field. This is typically used to add contextual
     * fields related to a [checkbox](https://bryntum.com/products/taskboard/docs/api/Core/widget/Checkbox) or [radio button](#Core/widget/Radio). See
     * these classes for examples of nested fields.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-container)
     */
    container: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Partial<FieldContainerConfig>|FieldContainer
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * If configured as `true`, this means that when an unmatched string is typed into the
     * combo's input field, and `ENTER`, or the [multiValueSeparator](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiValueSeparator) is typed,
     * a new record will be created using the typed string as the [displayField](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-displayField).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-createOnUnmatched)
     * @param {string} name Record name
     * @param {Combo} combo Combo instance
     * @returns {Model} New record
     */
    createOnUnmatched: ((name: string, combo: Combo) => Model)|string|boolean
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Field used as projects title.
     */
    displayField: string
    /**
     * Template function that can be used to customize the displayed value
     * @param {Model} record The record to provide a textual value for
     * @param {Combo} combo A reference to this Combo
     * @returns {string|void}
     */
    displayValueRenderer: (record: Model, combo: Combo) => string|void
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * User can edit text in text field (otherwise only pick from attached picker)
     */
    editable: boolean
    /**
     * Text to display in the drop down when there are no items in the underlying store
     */
    emptyText: string
    /**
     * A function which creates an array of values for the {#config-filterParamName} to pass
     * any filters to the server upon load.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-encodeFilterParams)
     * @param {<Object>} filters filters
     * @returns {<Object>} array of values
     */
    encodeFilterParams: (filters: object[]) => object[]
    /**
     * If `false`, filtering will be triggered once you exceed [minChars](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-minChars). To filter only when
     * hitting Enter key, set this to `true`;
     */
    filterOnEnter: boolean
    /**
     * The name of an operator type as implemented in [operator](https://bryntum.com/products/taskboard/docs/api/Core/util/CollectionFilter#config-operator)
     * to use when filtering the dropdown list based upon the typed value.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-filterOperator)
     */
    filterOperator: '='|'!='|'>'|'>='|'<'|'<='|'*'|'startsWith'|'endsWith'|'isIncludedIn'
    /**
     * If the dropdown is to be populated with a filtered query to a remote server, specify the
     * name of the parameter to pass the typed string here. By default, the string is simply sent
     * as the value of the parameter. For special encoding, configure the combo with [encodeFilterParams](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-encodeFilterParams)
     */
    filterParamName: string
    /**
     * When [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) is `true`, you may configure `filterSelected` as
     * `true` to hide items in the dropdown when they are added to the selection.
     * It will appear as if the requested item has "moved" into the field's
     * [ChipView](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-chipView).
     */
    filterSelected: boolean
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * By default, the picker is hidden on selection in single select mode, and
     * remains to allow more selections when [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) is `true`.
     * Setting this to a `Boolean` value can override that default.
     */
    hidePickerOnSelect: boolean
    /**
     * Configure as `true` to hide the expand trigger. This is automatically set to `true` if
     * remote filtering is enabled by setting the [filterParamName](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-filterParamName) config.
     */
    hideTrigger: boolean
    /**
     * Specify `false` to prevent field from being highlighted when on external value changes
     */
    highlightExternalChange: boolean
    /**
     * An optional string to display inside the input field as an overlay. This can be useful for displaying
     * a field's units.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-hint)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hint: string|((data: { source: Field, value: any }) => string)
    /**
     * This config is similar to [hint](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-hint) except that this config is used to display HTML content.
     * Since this can allow malicious content to be executed, be sure not to include user-entered data or to
     * encode such data (see [encodeHtml](https://bryntum.com/products/taskboard/docs/api/Core/helper/StringHelper#function-encodeHtml-static)).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-hintHtml)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hintHtml: string|((data: { source: Field, value: any }) => string)
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Set this config to `true` to always display items horizontally along with this field. This assigns an
     * [hbox](https://bryntum.com/products/taskboard/docs/api/Core/widget/layout/Box) as the [layout](#Core/widget/Container#config-layout) to the
     * [container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-container).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-inline)
     */
    inline: boolean
    /**
     * Configure this as `true` to render the dropdown list as a permanently visible list
     * in the document flow immediately below the input area instead of as a popup.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-inlinePicker)
     */
    inlinePicker: boolean
    /**
     * Text alignment for the input field.
     */
    inputAlign: string
    /**
     * Sets custom attributes of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes)
     */
    inputAttributes: object
    /**
     * Sets the `type` attribute of the underlying input element (password, hidden, date, color, etc).
     */
    inputType: string
    /**
     * The width to apply to the `&lt;input&gt;` element. If a number is specified, `px` will be used.
     */
    inputWidth: string|number
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * Rows to display in the dropdown (list items).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-items)
     */
    items: object[]|string[]|object
    /**
     * The delay in milliseconds to wait after the last keystroke before triggering a change event.
     * Set to 0 to not trigger change events from keystrokes (listen for input event instead to have
     * immediate feedback, change will still be triggered on blur).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-keyStrokeChangeDelay)
     */
    keyStrokeChangeDelay: number
    /**
     * The delay in milliseconds to wait after the last keystroke before filtering the list.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-keyStrokeFilterDelay)
     */
    keyStrokeFilterDelay: number
    /**
     * Label, prepended to field
     */
    label: string
    /**
     * CSS class name or class names to add to any configured [label](https://bryntum.com/products/taskboard/docs/api/Core/widget/mixin/Labelable#config-label)
     */
    labelCls: string|object
    /**
     * Label position, either 'before' the field or 'above' the field
     */
    labelPosition: 'before'|'above'
    /**
     * The width to apply to the `&lt;label&gt;` element. If a number is specified, `px` will be used.
     */
    labelWidth: string|number
    /**
     * The labels to add either before or after the input field.
     * Each label may have the following properties:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-labels)
     */
    labels: object[]
    /**
     * CSS class to add to picker
     */
    listCls: string
    /**
     * Template string used to render the list items in the dropdown list
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-listItemTpl)
     * @param {Model} record The record representing the item being rendered
     * @returns {string|void}
     */
    listItemTpl: (record: Model) => string|void
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The max number of characters for the input field
     */
    maxLength: number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * The minimum string length to trigger the filtering, only relevant when [editable](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-editable) is `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-minChars)
     */
    minChars: number
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The min number of characters for the input field
     */
    minLength: number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * Configure as `true` to allow selection of multiple values from the dropdown list.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-multiSelect)
     */
    multiSelect: boolean
    /**
     * A key value which, when typed in a [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) Combo, selects the
     * currently active item in the picker, and clears the input field ready for another
     * match to be typed.
     */
    multiValueSeparator: string
    /**
     * Name of the field which is used as a key to get/set values from/to the field.
     * Used prior to [ref](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-ref) and [id](#Core/widget/Widget#config-id) in
     * [Container.values](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-name)
     */
    name: string
    /**
     * This implies that the picker will display an anchor pointer, but also means that the picker will align closer
     * to the input field so that the pointer pierces the [pickerAlignElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-pickerAlignElement)
     */
    overlayAnchor: boolean
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-owner)
     */
    owner: Widget
    /**
     * Configuration object for the [picker](https://bryntum.com/products/taskboard/docs/api/Core/widget/List) on initialization. Returns the
     * [picker](https://bryntum.com/products/taskboard/docs/api/Core/widget/List) instance at runtime.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-picker)
     */
    picker: Partial<ListConfig>|List
    /**
     * The name of the element property to which the picker should size and align itself.
     */
    pickerAlignElement: string
    /**
     * Width of picker, defaults to this combo's [pickerAlignElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-pickerAlignElement) width
     */
    pickerWidth: number
    /**
     * Text to display in empty field.
     */
    placeholder: string
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Optionally a [Filter](https://bryntum.com/products/taskboard/docs/api/Core/util/CollectionFilter) config object which the combo should use for
     * filtering using the typed value.
     * This may use a `filterBy` property to test its `value` against any field in the passed record.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-primaryFilter)
     */
    primaryFilter: Partial<CollectionFilterConfig>
    /**
     * Project to reconfigure when picking an item.
     */
    project: SchedulerProjectModel
    /**
     * Makes the field unmodifiable by user action. The input area is not editable, and triggers
     * are unresponsive.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-readOnly)
     */
    readOnly: boolean
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to indicate that a `null` field value is to be marked as invalid.
     */
    required: boolean
    /**
     * If this field is not [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-readOnly), then setting this option means that pressing
     * the `ESCAPE` key after editing the field will revert the field to the value it had when
     * the user focused the field. If the field is *not* changed from when focused, the [clearable](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated.
     */
    revertOnEscape: boolean
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * Sets the native `spellcheck` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck)
     */
    spellCheck: boolean
    /**
     * Store used to populate items. Also accepts a Store config object
     */
    store: Store|Partial<StoreConfig>
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/taskboard/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/taskboard/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tab index of the input field
     */
    tabIndex: number
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)
     */
    title: string
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * How to query the store upon click of the expand trigger. Specify one of these values:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-triggerAction)
     */
    triggerAction: 'all'|'last'|null
    /**
     * The triggers to add either before or after the input field. Each property name is the reference by which
     * an instantiated Trigger Widget may be retrieved from the live `[triggers](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#property-triggers)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-triggers)
     */
    triggers: Record<string, FieldTriggerConfig>
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-ui)
     */
    ui: string|object
    /**
     * `true` to cause the field to be in an invalid state while the typed filter string does not match a record in the store.
     */
    validateFilter: boolean
    /**
     * Set to `false` to not highlight a field as invalid while typing, to instead show it on ENTER key press
     * or similar.
     */
    validateOnInput: boolean
    /**
     * The initial value of this Combo box. In single select mode (default) it's a simple string value, for
     * [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) mode, it should be an array of record ids.
     */
    value: string|number|string[]|number[]
    /**
     * Field used as projects load url.
     */
    valueField: string
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#config-y)
     */
    y: number
    /**
     * The default action was performed (an item in the list was selected)
     * @param {object} event Event object
     * @param {Combo} event.source The combo
     * @param {any} event.value The [value](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-valueField) of the selected record
     * @param {Model} event.record Selected record
     * @param {Model[]} event.records Selected records as an array if [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) is `true`
     * @param {boolean} event.userAction `true` if the value change is due to user interaction
     */
    onAction: ((event: { source: Combo, value: any, record: Model, records: Model[], userAction: boolean }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when this field's value changes.
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     * @param {string|number|boolean|any} event.value This field's value
     * @param {string|number|boolean|any} event.oldValue This field's previous value
     * @param {boolean} event.valid True if this field is in a valid state
     * @param {Event} event.event The triggering DOM event if any
     * @param {boolean} event.userAction Triggered by user taking an action (`true`) or by setting a value (`false`)
     * @param {boolean} event.checked
     */
    onChange: ((event: { source: Field|any, value: string|number|boolean|any, oldValue: string|number|boolean|any, valid: boolean, event: Event, userAction: boolean, checked: boolean }) => void)|string
    /**
     * Fired when this field is [cleared](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#function-clear).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#event-clear)
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     */
    onClear: ((event: { source: Field|any }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * User typed into the field. Please note that the value attached to this event is the raw input field value and
     * not the combos value
     * @param {object} event Event object
     * @param {Combo} event.source The combo.
     * @param {string} event.value Raw input value
     * @param {Event} event.event The triggering DOM event if any.
     */
    onInput: ((event: { source: Combo, value: string, event: Event }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * An item in the list was selected
     * @param {object} event Event object
     * @param {Combo} event.source The combo
     * @param {Model} event.record Selected record
     * @param {Model[]} event.records Selected records as an array if [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) is `true`
     * @param {boolean} event.userAction `true` if the value change is due to user interaction
     */
    onSelect: ((event: { source: Combo, record: Model, records: Model[], userAction: boolean }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
    /**
     * User clicked one of this field's [triggers](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#property-triggers)
     * @param {object} event Event object
     * @param {Field|any} event.source This field
     * @param {Widget} event.trigger The trigger activated by click or touch tap.
     */
    onTrigger: ((event: { source: Field|any, trigger: Widget }) => void)|string
}

/**
 * Combo that allows picking a dataset to use for a [ProjectModel](https://bryntum.com/products/scheduler/docs#Scheduler/model/ProjectModel). Each item holds a title and
 * a load url to reconfigure the project with.
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo)
 */
export class SchedulerProjectCombo extends Combo {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/Scheduler/widget/ProjectCombo#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<SchedulerProjectComboConfig>} config
     */
    constructor(config?: Partial<SchedulerProjectComboConfig>);
}

/**
 * Type with configuration options for [ColumnDrag](https://bryntum.com/products/grid/docs/api/TaskBoard/feature/ColumnDrag) class.
 */
type ColumnDragConfig = {
    type: 'columnDrag'|'columndrag'
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/ColumnDrag#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/ColumnDrag#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/ColumnDrag#config-disabled)
     */
    disabled: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/ColumnDrag#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/ColumnDrag#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/ColumnDrag#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/ColumnDrag#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * This feature allows users to drag columns on the TaskBoard to change the column order. Drag is initiated upon
 * mouse down in the column header. Try it out below!
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/ColumnDrag)
 */
export class ColumnDrag extends TaskBoardFeature {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/ColumnDrag#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<ColumnDragConfig>} config
     */
    constructor(config?: Partial<ColumnDragConfig>);
}

/**
 * Type with configuration options for [ColumnHeaderMenu](https://bryntum.com/products/grid/docs/api/TaskBoard/feature/ColumnHeaderMenu) class.
 */
type ColumnHeaderMenuConfig = {
    type: 'columnHeaderMenu'|'columnheadermenu'
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/ColumnHeaderMenu#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/ColumnHeaderMenu#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/ColumnHeaderMenu#config-disabled)
     */
    disabled: boolean
    /**
     * This is a preconfigured set of items used to create the default context menu.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/ColumnHeaderMenu#config-items)
     */
    items: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/ColumnHeaderMenu#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/ColumnHeaderMenu#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/ColumnHeaderMenu#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * A function called before displaying the menu that allows manipulations of its items.
     * Returning `false` from this function prevents the menu from being shown.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/ColumnHeaderMenu#config-processItems)
     * @param {object} context An object with information about the menu being shown
     * @param {ColumnModel} context.columnRecord The column for which the menu will be shown
     * @param {<String, (MenuItemConfig} context.items An object containing the [menu item](https://bryntum.com/products/taskboard/docs/api/Core/widget/MenuItem) configs keyed by their id
     * @param {Event} context.event The DOM event object that triggered the show
     * @returns {boolean|void} Returning `false` from this function prevents the menu being shown
     */
    processItems: (context: { columnRecord: ColumnModel, items: Record<string, Partial<MenuItemConfig>|boolean>, event: Event }) => boolean|void
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/ColumnHeaderMenu#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * Adds a menu button (`···`) to column headers, clicking it displays a menu. Items are populated by other features
 * and/or application code.
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/ColumnHeaderMenu)
 */
export class ColumnHeaderMenu extends TaskBoardFeature {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/ColumnHeaderMenu#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<ColumnHeaderMenuConfig>} config
     */
    constructor(config?: Partial<ColumnHeaderMenuConfig>);
}

/**
 * Type with configuration options for [ColumnToolbars](https://bryntum.com/products/grid/docs/api/TaskBoard/feature/ColumnToolbars) class.
 */
type ColumnToolbarsConfig = {
    type: 'columnToolbars'|'columntoolbars'
    /**
     * Items to add to the bottom toolbar, in object format.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/ColumnToolbars#config-bottomItems)
     */
    bottomItems: Record<string, Partial<ContainerItemConfig>|boolean|null>
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/ColumnToolbars#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/ColumnToolbars#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/ColumnToolbars#config-disabled)
     */
    disabled: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/ColumnToolbars#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/ColumnToolbars#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/ColumnToolbars#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * A function called before displaying the toolbar that allows manipulations of its items.
     * Returning `false` from this function prevents the menu being shown.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/ColumnToolbars#config-processItems)
     * @param {object} context An object with information about the toolbar being shown
     * @param {<String, ContainerItemConfig>} context.items An object containing the toolbar item configs keyed by ref
     * @param {'top'|'bottom'} context.location Toolbar location, "top" or "bottom"
     * @param {ColumnModel} context.columnRecord Record representing toolbars column
     * @param {SwimlaneModel} context.swimlaneRecord Record representing toolbars swimlane
     * @returns {boolean|void} Returning `false` from this function prevents the menu being shown
     */
    processItems: (context: { items: Record<string, Partial<ContainerItemConfig>>, location: 'top'|'bottom', columnRecord: ColumnModel, swimlaneRecord: SwimlaneModel }) => boolean|void
    /**
     * Items to add to the top toolbar, in object format.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/ColumnToolbars#config-topItems)
     */
    topItems: Record<string, Partial<ContainerItemConfig>|boolean|null>
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/ColumnToolbars#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * Adds toolbars to the top and/or bottom of each column. By default it adds a bottom toolbar containing a single button
 * for adding events to that column/swimlane:
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/ColumnToolbars)
 */
export class ColumnToolbars extends TaskBoardFeature {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/ColumnToolbars#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<ColumnToolbarsConfig>} config
     */
    constructor(config?: Partial<ColumnToolbarsConfig>);
}

/**
 * Type with configuration options for [SimpleTaskEdit](https://bryntum.com/products/grid/docs/api/TaskBoard/feature/SimpleTaskEdit) class.
 */
type SimpleTaskEditConfig = {
    type: 'simpleTaskEdit'|'simpletaskedit'
    /**
     * Pressing `Enter` in last item on last task in a column adds a new task.
     */
    addNewAtEnd: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/SimpleTaskEdit#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/SimpleTaskEdit#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/SimpleTaskEdit#config-disabled)
     */
    disabled: boolean
    /**
     * A configuration object for the [Editor](https://bryntum.com/products/taskboard/docs/api/Core/widget/Editor) used by this feature. Useful when you want to
     * validate the value being set by the end user (see [beforeComplete](https://bryntum.com/products/taskboard/docs/api/Core/widget/Editor#event-beforeComplete)).
     */
    editorConfig: Partial<EditorConfig>
    /**
     * See [Keyboard shortcuts](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/SimpleTaskEdit#keyboard-shortcuts) for details
     */
    keyMap: Record<string, string>
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/SimpleTaskEdit#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/SimpleTaskEdit#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/SimpleTaskEdit#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/SimpleTaskEdit#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * This feature allows inline editing of tasks. Double clicking an item starts editing it:
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/SimpleTaskEdit)
 */
export class SimpleTaskEdit extends TaskBoardFeature {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/SimpleTaskEdit#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<SimpleTaskEditConfig>} config
     */
    constructor(config?: Partial<SimpleTaskEditConfig>);
    /**
     * Starts inline editing of the supplied task, optionally for a specific item on its card.
     * @param {TaskModel} taskRecord Task record to edit
     * @param {HTMLElement} element Card element or card item element to edit. Resolves element from the passed record if left out.
     */
    editTask(taskRecord: TaskModel, element?: HTMLElement): boolean;
}

/**
 * Type with configuration options for [SwimlaneDrag](https://bryntum.com/products/grid/docs/api/TaskBoard/feature/SwimlaneDrag) class.
 */
type SwimlaneDragConfig = {
    type: 'swimlaneDrag'|'swimlanedrag'
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/SwimlaneDrag#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/SwimlaneDrag#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/SwimlaneDrag#config-disabled)
     */
    disabled: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/SwimlaneDrag#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/SwimlaneDrag#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/SwimlaneDrag#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/SwimlaneDrag#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * This feature allows users to drag drop swimlanes on the TaskBoard changing their order (by grabbing their header).
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/SwimlaneDrag)
 */
export class SwimlaneDrag extends TaskBoardFeature {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/SwimlaneDrag#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<SwimlaneDragConfig>} config
     */
    constructor(config?: Partial<SwimlaneDragConfig>);
}

/**
 * Type with configuration options for [TaskBoardFeature](https://bryntum.com/products/grid/docs/api/TaskBoard/feature/TaskBoardFeature) class.
 */
type TaskBoardFeatureConfig = {
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskBoardFeature#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskBoardFeature#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskBoardFeature#config-disabled)
     */
    disabled: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskBoardFeature#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskBoardFeature#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskBoardFeature#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskBoardFeature#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * The abstract base class for TaskBoard features.
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskBoardFeature)
 */
export abstract class TaskBoardFeature extends InstancePlugin {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskBoardFeature#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Base constructor, passes arguments to [construct](https://bryntum.com/products/taskboard/docs/api/Core/Base#function-construct).
     * @param {object} args Usually called with a config object, but accepts any params
     */
    constructor(...args: object[]);
}

/**
 * Type with configuration options for [TaskDrag](https://bryntum.com/products/grid/docs/api/TaskBoard/feature/TaskDrag) class.
 */
type TaskDragConfig = {
    type: 'taskDrag'|'taskdrag'
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskDrag#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskDrag#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskDrag#config-disabled)
     */
    disabled: boolean
    /**
     * The number of milliseconds that must elapse after a `touchstart` event before it is considered a drag. If
     * movement occurs before this time, the drag is aborted. This is to allow touch swipes and scroll gestures.
     */
    dragTouchStartDelay: number
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskDrag#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskDrag#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskDrag#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Specify `true` to enable the old behavior of moving tasks in the store on drop.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskDrag#config-reorderTaskRecords)
     */
    reorderTaskRecords: boolean
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskDrag#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * This feature allows cards on the TaskBoard to be dragged across swimlanes and columns but also vertically in the
 * same column to change the order:
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskDrag)
 */
export class TaskDrag extends TaskBoardFeature {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskDrag#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Base constructor, passes arguments to [construct](https://bryntum.com/products/taskboard/docs/api/Core/Base#function-construct).
     * @param {object} args Usually called with a config object, but accepts any params
     */
    constructor(...args: object[]);
}

/**
 * Type with configuration options for [TaskDragSelect](https://bryntum.com/products/grid/docs/api/TaskBoard/feature/TaskDragSelect) class.
 */
type TaskDragSelectConfig = {
    type: 'taskDragSelect'|'taskdragselect'
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskDragSelect#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskDragSelect#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskDragSelect#config-disabled)
     */
    disabled: boolean
    /**
     * The amount of pixels to move pointer/mouse before it counts as a drag select operation.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskDragSelect#config-dragThreshold)
     */
    dragThreshold: number
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskDragSelect#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskDragSelect#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskDragSelect#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskDragSelect#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * Enables users to click and drag to select cards on the TaskBoard (marquee selection).
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskDragSelect)
 */
export class TaskDragSelect extends InstancePlugin {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskDragSelect#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Base constructor, passes arguments to [construct](https://bryntum.com/products/taskboard/docs/api/Core/Base#function-construct).
     * @param {object} args Usually called with a config object, but accepts any params
     */
    constructor(...args: object[]);
}

/**
 * Type with configuration options for [TaskEdit](https://bryntum.com/products/grid/docs/api/TaskBoard/feature/TaskEdit) class.
 */
type TaskEditConfig = {
    type: 'taskEdit'|'taskedit'
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskEdit#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskEdit#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskEdit#config-disabled)
     */
    disabled: boolean
    /**
     * Config object merged with the default configuration of the editor (by default a
     * [TaskEditor](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor)).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskEdit#config-editorConfig)
     */
    editorConfig: Partial<TaskEditorConfig>
    /**
     * Type of widget to use as the editor. Should point to a subclass of [TaskEditor](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor) or
     * a widget mimicking its API.
     */
    editorType: string
    /**
     * Items definition passed on to the configured editor (by default a [TaskEditor](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor)).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskEdit#config-items)
     */
    items: Record<string, Partial<ContainerItemConfig>|boolean|null>
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskEdit#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskEdit#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskEdit#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * A function called before displaying the editor that allows manipulation of its items.
     * Returning `false` from this function prevents the editor from being shown.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskEdit#config-processItems)
     * @param {object} context An object with information about the editor being shown
     * @param {<String, ContainerItemConfig>} context.items An object containing the editor item configs keyed by ref
     * @param {TaskModel} context.taskRecord Record representing task being edited
     * @param {ColumnModel} context.columnRecord Record representing tasks column
     * @param {SwimlaneModel} context.swimlaneRecord Record representing tasks swimlane
     * @returns {boolean|void} Returning `false` from this function prevents the menu being shown
     */
    processItems: (context: { items: Record<string, Partial<ContainerItemConfig>>, taskRecord: TaskModel, columnRecord: ColumnModel, swimlaneRecord: SwimlaneModel }) => boolean|void
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskEdit#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * This features allows the user to edit tasks in a popup editor that can either be shown centered on screen (the
 * default, double click a task to show the editor):
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskEdit)
 */
export class TaskEdit extends TaskBoardFeature {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskEdit#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Base constructor, passes arguments to [construct](https://bryntum.com/products/taskboard/docs/api/Core/Base#function-construct).
     * @param {object} args Usually called with a config object, but accepts any params
     */
    constructor(...args: object[]);
    /**
     * Edit the supplied task in the task editor.
     * @param {TaskModel} taskRecord Task to edit
     * @param {HTMLElement} element Optionally an element to align to, by default it tries to resolve one from the supplied task when the editor is configured to not be centered.
     */
    editTask(taskRecord: TaskModel, element?: HTMLElement): Promise<void>;
}

/**
 * Type with configuration options for [TaskMenu](https://bryntum.com/products/grid/docs/api/TaskBoard/feature/TaskMenu) class.
 */
type TaskMenuConfig = {
    type: 'taskMenu'|'taskmenu'
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskMenu#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskMenu#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskMenu#config-disabled)
     */
    disabled: boolean
    /**
     * This is a preconfigured set of items used to create the default context menu.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskMenu#config-items)
     */
    items: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskMenu#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskMenu#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskMenu#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * A function called before displaying the menu that allows manipulations of its items.
     * Returning `false` from this function prevents the menu from being shown.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskMenu#config-processItems)
     * @param {object} context An object with information about the menu being shown
     * @param {TaskModel} context.taskRecord The task for which the menu will be shown
     * @param {<string, (MenuItemConfig} context.items An object containing the [menu item](https://bryntum.com/products/taskboard/docs/api/Core/widget/MenuItem) configs keyed by their id
     * @param {Event} context.event The DOM event object that triggered the show
     * @returns {boolean|void} Returning `false` from this function prevents the menu being shown
     */
    processItems: (context: { taskRecord: TaskModel, items: Record<string, Partial<MenuItemConfig>|boolean>, event: Event }) => boolean|void
    /**
     * Show avatars/initials in the resource picker menu
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskMenu#config-showAvatars)
     */
    showAvatars: boolean
    /**
     * The mouse / touch gesture which should show this context menu (e.g. 'taskClick' or 'taskContextMenu').
     * Set to `false` to never trigger it from UI.
     */
    triggerEvent: string|boolean
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskMenu#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * Displays a context menu for tasks. Items are populated by other features and/or application code.
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskMenu)
 */
export class TaskMenu extends TaskBoardFeature {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskMenu#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Base constructor, passes arguments to [construct](https://bryntum.com/products/taskboard/docs/api/Core/Base#function-construct).
     * @param {object} args Usually called with a config object, but accepts any params
     */
    constructor(...args: object[]);
    /**
     * Show the context menu for a specific task, aligned to its card. Optionally aligned to an element in the card, using the supplied CSS selector.
     * @param {TaskModel} taskRecord Task to show the menu for
     * @param {string} selector CSS selector, to align to a specific element in the task's card
     */
    showMenuFor(taskRecord: TaskModel, selector?: string): void;
}

/**
 * Type with configuration options for [TaskTooltip](https://bryntum.com/products/grid/docs/api/TaskBoard/feature/TaskTooltip) class.
 */
type TaskTooltipConfig = {
    type: 'taskTooltip'|'tasktooltip'
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskTooltip#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskTooltip#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskTooltip#config-disabled)
     */
    disabled: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskTooltip#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskTooltip#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskTooltip#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Function used to populate the tooltip, supply your own to override the default contents of the tooltip.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskTooltip#config-template)
     * @param {object} tipData
     * @param {TaskModel} tipData.taskRecord Hovered task
     * @param {ColumnModel} tipData.columnRecord The task's column
     * @param {SwimlaneModel} tipData.swimlaneRecord The task's swimlane (if used)
     * @returns {string|DomConfig} Return an HTML string or a DOM config object
     */
    template: (tipData: { taskRecord: TaskModel, columnRecord: ColumnModel, swimlaneRecord: SwimlaneModel }) => string|DomConfig
    /**
     * Tooltip config object used to override the defaults, see [Tooltip#configs](https://bryntum.com/products/taskboard/docs/api/Core/widget/Tooltip#configs) for available
     * configs.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskTooltip#config-tooltip)
     */
    tooltip: Partial<TooltipConfig>
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskTooltip#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * Displays a tooltip when hovering a task. By default the tooltip displays:
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskTooltip)
 */
export class TaskTooltip extends TaskBoardFeature {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskTooltip#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Base constructor, passes arguments to [construct](https://bryntum.com/products/taskboard/docs/api/Core/Base#function-construct).
     * @param {object} args Usually called with a config object, but accepts any params
     */
    constructor(...args: object[]);
}

/**
 * Type with configuration options for [ColumnModel](https://bryntum.com/products/grid/docs/api/TaskBoard/model/ColumnModel) class.
 */
type ColumnModelConfig = {
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ColumnModel#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * Collapsed (`true`) or expanded (`false`)
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ColumnModel#config-collapsed)
     */
    collapsed: boolean
    /**
     * Allow collapsing this column
     */
    collapsible: boolean
    /**
     * Color, named colors are applied as a `b-taskboard-color-{color}` (for example `b-taskboard-color-red`) CSS
     * class to the column. Colors specified as hex, `rgb()` etc. are applied as `style.color` to the column.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ColumnModel#config-color)
     */
    color: string
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Column flex, affects width.
     */
    flex: number
    /**
     * Set to `true` to hide the column, `false` to show it again.
     */
    hidden: boolean
    /**
     * This column's unique id, used to match a task to a column (which field on a task to match is specified using
     * then [columnField](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-columnField) config on TaskBoard).
     */
    id: string|number
    /**
     * Column min-width in px. To override the default min-width specified in CSS.
     */
    minWidth: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ColumnModel#config-readOnly)
     */
    readOnly: boolean
    /**
     * Number of tasks per row to display in this column. Leave blank to use the setting from the
     * [tasksPerRow](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-tasksPerRow) config on TaskBoard.
     */
    tasksPerRow: number
    /**
     * Text displayed in the column header.
     */
    text: string
    /**
     * A tooltip string to show when hovering the column header
     */
    tooltip: string
    /**
     * Column width in px.
     */
    width: number
}

/**
 * Represents a single column on a TaskBoard.
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ColumnModel)
 */
export class ColumnModel extends Model {
    /**
     * Collapsed (`true`) or expanded (`false`)
     */
    readonly collapsed: boolean
    /**
     * Allow collapsing this column
     */
    collapsible: boolean
    /**
     * Color, named colors are applied as a `b-taskboard-color-{color}` (for example `b-taskboard-color-red`) CSS
     * class to the column. Colors specified as hex, `rgb()` etc. are applied as `style.color` to the column.
     */
    color: string
    /**
     * Column flex, affects width.
     */
    flex: number
    /**
     * Set to `true` to hide the column, `false` to show it again.
     */
    hidden: boolean
    /**
     * This column's unique id, used to match a task to a column (which field on a task to match is specified using
     * then [columnField](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-columnField) config on TaskBoard).
     */
    id: string|number
    /**
     * Column min-width in px. To override the default min-width specified in CSS.
     */
    minWidth: number
    /**
     * Get the tasks in this column in visual order.
     */
    readonly tasks: TaskModel[]
    /**
     * Number of tasks per row to display in this column. Leave blank to use the setting from the
     * [tasksPerRow](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-tasksPerRow) config on TaskBoard.
     */
    tasksPerRow: number
    /**
     * Text displayed in the column header.
     */
    text: string
    /**
     * A tooltip string to show when hovering the column header
     */
    tooltip: string
    /**
     * Column width in px.
     */
    width: number
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<ColumnModelConfig>} config Raw model config
     * @param {Store} store Data store
     * @param {object} meta Meta data
     */
    constructor(config?: Partial<ColumnModelConfig>, store?: Store, meta?: object);
    /**
     * Collapse this column.
     */
    collapse(): Promise<any>;
    /**
     * Expand this column.
     */
    expand(): Promise<any>;
}

/**
 * Type with configuration options for [ProjectModel](https://bryntum.com/products/grid/docs/api/TaskBoard/model/ProjectModel) class.
 */
type ProjectModelConfig = {
    /**
     * A flag, indicating whether the dates and duration calculations should adjust the result to DST time shift.
     */
    adjustDurationToDST: boolean
    /**
     * The constructor of the assignment model class, to be used in the project. Will be set as the
     * [modelClass](https://bryntum.com/products/taskboard/docs/api/Core/data/Store#config-modelClass) property of the [assignmentStore](https://bryntum.com/products/scheduler/docs#Scheduler/model/ProjectModel#property-assignmentStore)
     */
    assignmentModelClass: typeof AssignmentModel
    /**
     * An [AssignmentStore](https://bryntum.com/products/scheduler/docs#Scheduler/data/AssignmentStore) instance or a config object.
     */
    assignmentStore: AssignmentStore|Partial<AssignmentStoreConfig>
    /**
     * The constructor to create an assignment store instance with. Should be a class, subclassing the
     * [AssignmentStore](https://bryntum.com/products/scheduler/docs#Scheduler/data/AssignmentStore)
     */
    assignmentStoreClass: typeof AssignmentStore
    /**
     * Data use to fill the [assignmentStore](https://bryntum.com/products/scheduler/docs#Scheduler/model/ProjectModel#property-assignmentStore). Should be an array of
     * [AssignmentModels](https://bryntum.com/products/scheduler/docs#Scheduler/model/AssignmentModel) or its configuration objects.
     */
    assignments: AssignmentModel[]|Partial<AssignmentModelConfig>[]
    /**
     * The initial data, to fill the [assignmentStore](https://bryntum.com/products/scheduler/docs#Scheduler/model/ProjectModel#property-assignmentStore) with.
     * Should be an array of [AssignmentModels](https://bryntum.com/products/scheduler/docs#Scheduler/model/AssignmentModel) or its configuration
     * objects.
     */
    assignmentsData: AssignmentModel[]|Partial<AssignmentModelConfig>[]
    /**
     * Specify `true` to automatically call [load](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) method on the next frame after creation.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel#config-autoLoad)
     */
    autoLoad: boolean
    /**
     * `true` to automatically persist store changes after edits are made in any of the stores monitored.
     * Please note that sync request will not be invoked immediately but only after
     * [autoSyncTimeout](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#config-autoSyncTimeout) interval.
     */
    autoSync: boolean
    /**
     * The timeout in milliseconds to wait before persisting changes to the server.
     * Used when [autoSync](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#config-autoSync) is set to `true`.
     */
    autoSyncTimeout: number
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * Sets the list of stores controlled by the CRUD manager.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel#config-crudStores)
     */
    crudStores: Store[]|string[]|CrudManagerStoreDescriptor[]
    /**
     * Data use to fill the [dependencyStore](https://bryntum.com/products/scheduler/docs#Scheduler/model/ProjectModel#property-dependencyStore). Should be an array of
     * [DependencyModels](https://bryntum.com/products/scheduler/docs#Scheduler/model/DependencyModel) or its configuration objects.
     */
    dependencies: DependencyModel[]|Partial<DependencyModelConfig>[]
    /**
     * The initial data, to fill the [dependencyStore](https://bryntum.com/products/scheduler/docs#Scheduler/model/ProjectModel#property-dependencyStore) with.
     * Should be an array of [DependencyModels](https://bryntum.com/products/scheduler/docs#Scheduler/model/DependencyModel) or its configuration
     * objects.
     */
    dependenciesData: DependencyModel[]|Partial<DependencyModelConfig>[]
    /**
     * The constructor of the dependency model class, to be used in the project. Will be set as the
     * [modelClass](https://bryntum.com/products/taskboard/docs/api/Core/data/Store#config-modelClass) property of the [dependencyStore](https://bryntum.com/products/scheduler/docs#Scheduler/model/ProjectModel#property-dependencyStore)
     */
    dependencyModelClass: typeof DependencyModel
    /**
     * A [DependencyStore](https://bryntum.com/products/scheduler/docs#Scheduler/data/DependencyStore) instance or a config object.
     */
    dependencyStore: DependencyStore|Partial<DependencyStoreConfig>
    /**
     * The constructor to create a dependency store instance with. Should be a class, subclassing the
     * [DependencyStore](https://bryntum.com/products/scheduler/docs#Scheduler/data/DependencyStore)
     */
    dependencyStoreClass: typeof DependencyStore
    /**
     * Configuration of the JSON encoder used by the *Crud Manager*.
     */
    encoder: {
        requestData?: object
    }
    /**
     * The constructor of the event model class, to be used in the project. Will be set as the
     * [modelClass](https://bryntum.com/products/taskboard/docs/api/Core/data/Store#config-modelClass) property of the [eventStore](https://bryntum.com/products/scheduler/docs#Scheduler/model/ProjectModel#property-eventStore)
     */
    eventModelClass: typeof EventModel
    /**
     * An [EventStore](https://bryntum.com/products/scheduler/docs#Scheduler/data/EventStore) instance or a config object.
     */
    eventStore: EventStore|Partial<EventStoreConfig>
    /**
     * The constructor to create an event store instance with. Should be a class, subclassing the
     * [EventStore](https://bryntum.com/products/scheduler/docs#Scheduler/data/EventStore)
     */
    eventStoreClass: typeof EventStore
    /**
     * Data use to fill the [eventStore](https://bryntum.com/products/scheduler/docs#Scheduler/model/ProjectModel#property-eventStore). Should be an array of
     * [EventModels](https://bryntum.com/products/scheduler/docs#Scheduler/model/EventModel) or its configuration objects.
     */
    events: EventModel[]|Partial<EventModelConfig>[]
    /**
     * The initial data, to fill the [eventStore](https://bryntum.com/products/scheduler/docs#Scheduler/model/ProjectModel#property-eventStore) with.
     * Should be an array of [EventModels](https://bryntum.com/products/scheduler/docs#Scheduler/model/EventModel) or its configuration objects.
     */
    eventsData: EventModel[]|Partial<EventModelConfig>[]
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Specify as `true` to force sync requests to be sent when calling `sync()`, even if there are no local
     * changes. Useful in a polling scenario, to keep client up to date with the backend.
     */
    forceSync: boolean
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel#config-id)
     */
    id: string|number
    /**
     * Project data as a JSON string, used to populate its stores.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel#config-json)
     */
    json: string
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel#config-listeners)
     */
    listeners: object
    /**
     * Convenience shortcut to set only the url to load from, when you do not need to supply any other config
     * options in the `load` section of the `transport` config.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel#config-loadUrl)
     */
    loadUrl: string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Field name to be used to transfer a phantom record identifier.
     */
    phantomIdField: string
    /**
     * Field name to be used to transfer a phantom parent record identifier.
     */
    phantomParentIdField: string
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel#config-readOnly)
     */
    readOnly: boolean
    /**
     * `True` to reset identifiers (defined by `idField` config) of phantom records before submitting them
     * to the server.
     */
    resetIdsBeforeSync: boolean
    /**
     * The constructor of the resource model class, to be used in the project. Will be set as the
     * [modelClass](https://bryntum.com/products/taskboard/docs/api/Core/data/Store#config-modelClass) property of the [resourceStore](https://bryntum.com/products/scheduler/docs#Scheduler/model/ProjectModel#property-resourceStore)
     */
    resourceModelClass: typeof ResourceModel
    /**
     * A [ResourceStore](https://bryntum.com/products/scheduler/docs#Scheduler/data/ResourceStore) instance or a config object.
     */
    resourceStore: ResourceStore|Partial<ResourceStoreConfig>
    /**
     * The constructor to create a resource store instance with. Should be a class, subclassing the
     * [ResourceStore](https://bryntum.com/products/scheduler/docs#Scheduler/data/ResourceStore)
     */
    resourceStoreClass: typeof ResourceStore
    /**
     * A [ResourceTimeRangeStore](https://bryntum.com/products/scheduler/docs#Scheduler/data/ResourceTimeRangeStore) instance or a config object.
     */
    resourceTimeRangeStore: ResourceTimeRangeStore|Partial<ResourceTimeRangeStoreConfig>
    /**
     * The constructor to create a resource time range store instance with. Should be a class subclassing the
     * [ResourceTimeRangeStore](https://bryntum.com/products/scheduler/docs#Scheduler/data/ResourceTimeRangeStore)
     */
    resourceTimeRangeStoreClass: typeof ResourceTimeRangeStore
    /**
     * Data use to fill the [resourceTimeRangeStore](https://bryntum.com/products/scheduler/docs#Scheduler/model/ProjectModel#property-resourceTimeRangeStore). Should be an array
     * of [ResourceTimeRangeModels](https://bryntum.com/products/scheduler/docs#Scheduler/model/ResourceTimeRangeModel) or its configuration objects.
     */
    resourceTimeRanges: ResourceTimeRangeModel[]|Partial<ResourceTimeRangeModelConfig>[]
    /**
     * The initial data, to fill the [resourceTimeRangeStore](https://bryntum.com/products/scheduler/docs#Scheduler/model/mixin/ProjectModelMixin#property-resourceTimeRangeStore) with.
     * Should be an array of [ResourceTimeRangeModel](https://bryntum.com/products/scheduler/docs#Scheduler/model/ResourceTimeRangeModel) or it's
     * configuration objects.
     */
    resourceTimeRangesData: ResourceTimeRangeModel[]
    /**
     * Data use to fill the [resourceStore](https://bryntum.com/products/scheduler/docs#Scheduler/model/ProjectModel#property-resourceStore). Should be an array of
     * [ResourceModels](https://bryntum.com/products/scheduler/docs#Scheduler/model/ResourceModel) or its configuration objects.
     */
    resources: ResourceModel[]|Partial<ResourceModelConfig>[]
    /**
     * The initial data, to fill the [resourceStore](https://bryntum.com/products/scheduler/docs#Scheduler/model/ProjectModel#property-resourceStore) with.
     * Should be an array of [ResourceModels](https://bryntum.com/products/scheduler/docs#Scheduler/model/ResourceModel) or its configuration objects.
     */
    resourcesData: ResourceModel[]|Partial<ResourceModelConfig>[]
    /**
     * Silences propagations caused by the project loading.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel#config-silenceInitialCommit)
     */
    silenceInitialCommit: boolean
    /**
     * When `true` treats parsed responses without `success` property as successful.
     * In this mode a parsed response is treated as invalid if it has explicitly set `success : false`.
     */
    skipSuccessProperty: boolean
    /**
     * Configuration options to provide to the STM manager
     */
    stm: Partial<StateTrackingManagerConfig>|StateTrackingManager
    /**
     * Name of a store property to retrieve store identifiers from. Make sure you have an instance of a
     * store to use it by id. Store identifier is used as a container name holding corresponding store data
     * while transferring them to/from the server. By default, `storeId` property is used. And in case a
     * container identifier has to differ this config can be used:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel#config-storeIdProperty)
     */
    storeIdProperty: string
    /**
     * When `true` the Crud Manager does not require all updated and removed records to be mentioned in the
     * *sync* response. In this case response should include only server side changes.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel#config-supportShortSyncResponse)
     */
    supportShortSyncResponse: boolean
    /**
     * An array of store identifiers sets an alternative sync responses apply order.
     * By default, the order in which sync responses are applied to the stores is the same as they
     * registered in. But in case of some tricky dependencies between stores this order can be changed:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel#config-syncApplySequence)
     */
    syncApplySequence: string[]
    /**
     * Convenience shortcut to set only the url to sync to, when you do not need to supply any other config
     * options in the `sync` section of the `transport` config.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel#config-syncUrl)
     */
    syncUrl: string
    /**
     * The constructor of the task model class, to be used in the project.
     * Will be set as the [modelClass](https://bryntum.com/products/taskboard/docs/api/Core/data/Store#config-modelClass)
     * property of the [taskStore](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel#property-taskStore).
     */
    taskModelClass: typeof TaskModel
    /**
     * An [TaskStore](https://bryntum.com/products/taskboard/docs/api/TaskBoard/store/TaskStore) instance or a config object.
     */
    taskStore: Partial<TaskStoreConfig>|TaskStore
    /**
     * The constructor to create a task store instance with.
     * Should be a class, subclassing the [TaskStore](https://bryntum.com/products/taskboard/docs/api/TaskBoard/store/TaskStore).
     */
    taskStoreClass: typeof TaskStore
    /**
     * The initial data, to fill the [taskStore](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel#property-taskStore) with. Should be an array of
     * [TaskModel](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/TaskModel) or its configuration objects.
     */
    tasks: TaskModel[]|Partial<TaskModelConfig>[]
    /**
     * The initial data, to fill the [taskStore](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel#property-taskStore) with.
     * Should be an array of [TaskModel](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/TaskModel) instances or its configuration objects.
     */
    tasksData: TaskModel[]|Partial<TaskModelConfig>[]
    /**
     * A [Store](https://bryntum.com/products/taskboard/docs/api/Core/data/Store) instance or a config object.
     */
    timeRangeStore: Store|Partial<StoreConfig>
    /**
     * The constructor to create a time range store instance with. Should be a class subclassing the
     * [TimeRangeStore](https://bryntum.com/products/scheduler/docs#Scheduler/data/TimeRangeStore)
     */
    timeRangeStoreClass: typeof TimeRangeStore
    /**
     * Data use to fill the [timeRangeStore](https://bryntum.com/products/scheduler/docs#Scheduler/model/ProjectModel#property-timeRangeStore). Should be an array of
     * [TimeRangeModels](https://bryntum.com/products/scheduler/docs#Scheduler/model/TimeRangeModel) or its configuration objects.
     */
    timeRanges: TimeRangeModel[]|Partial<TimeRangeModelConfig>[]
    /**
     * The initial data, to fill the [timeRangeStore](https://bryntum.com/products/scheduler/docs#Scheduler/model/mixin/ProjectModelMixin#property-timeRangeStore) with.
     * Should be an array of [TimeSpan](https://bryntum.com/products/scheduler/docs#Scheduler/model/TimeSpan) or its configuration objects.
     */
    timeRangesData: TimeSpan[]
    /**
     * Set to a IANA time zone (i.e. `Europe/Stockholm`) or a UTC offset in minutes (i.e. `-120`). This will
     * convert all events, tasks and time ranges to the specified time zone or offset. It will also affect the
     * displayed timeline's headers as well at the start and end date of it.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel#config-timeZone)
     */
    timeZone: string|number
    /**
     * When `true` forces the CRUD manager to process responses depending on their `type` attribute.
     * So `load` request may be responded with `sync` response for example.
     * Can be used for smart server logic allowing the server to decide when it's better to respond with a
     * complete data set (`load` response) or it's enough to return just a delta (`sync` response).
     */
    trackResponseType: boolean
    /**
     * Configuration of the AJAX requests used by *Crud Manager* to communicate with a server-side.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel#config-transport)
     */
    transport: {
        load?: object
        sync?: object
    }
    /**
     * This config validates the response structure for requests made by the Crud Manager.
     * When `true`, the Crud Manager checks every parsed response structure for errors
     * and if the response format is invalid, a warning is logged to the browser console.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel#config-validateResponse)
     */
    validateResponse: boolean
    /**
     * `true` to write all fields from the record to the server.
     * If set to `false` it will only send the fields that were modified.
     * Note that any fields that have [persist](https://bryntum.com/products/taskboard/docs/api/Core/data/field/DataField#config-persist) set to `false` will
     * still be ignored and fields having [alwaysWrite](https://bryntum.com/products/taskboard/docs/api/Core/data/field/DataField#config-alwaysWrite) set to `true`
     * will always be included.
     */
    writeAllFields: boolean
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires before [load request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) is sent. Return `false` to cancel load request.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onBeforeLoad: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires before loaded data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.options Options provided to the [load](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) method.
     */
    onBeforeLoadApply: ((event: { source: AbstractCrudManager, response: object, options: object }) => void)|string
    /**
     * Fires before server response gets applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     */
    onBeforeResponseApply: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object }) => void)|string
    /**
     * Fires before a request is sent to the server.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel#event-beforeSend)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.crudManager The CRUD manager.
     * @param {object} event.params HTTP request params to be passed in the request URL.
     * @param {'sync'|'load'} event.requestType CrudManager request type (`load`/`sync`)
     * @param {object} event.requestConfig Configuration object for Ajax request call
     */
    onBeforeSend: ((event: { crudManager: AbstractCrudManager, params: object, requestType: 'sync'|'load', requestConfig: object }) => Promise<void>)|string
    /**
     * Fires before [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) is sent. Return `false` to cancel sync request.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel#event-beforeSync)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onBeforeSync: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires before sync response data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     */
    onBeforeSyncApply: ((event: { source: AbstractCrudManager, response: object }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when data in any of the projects stores changes.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel#event-change)
     * @param {object} event Event object
     * @param {SchedulerProjectModel|any} event.source This project
     * @param {Store} event.store Affected store
     * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} event.action Name of action which triggered the change. May be one of:  * `'remove'` * `'removeAll'` * `'add'` * `'updatemultiple'` * `'clearchanges'` * `'filter'` * `'update'` * `'dataset'` * `'replace'`
     * @param {Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onChange: ((event: { source: SchedulerProjectModel|any, store: Store, action: 'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Fired when the engine has finished its calculations and the results has been written back to the records.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel#event-dataReady)
     * @param {object} event Event object
     * @param {SchedulerProjectModel|any} event.source The project
     * @param {boolean} event.isInitialCommit Flag that shows if this commit is initial
     * @param {Set<any>} event.records Set of all [Model](https://bryntum.com/products/taskboard/docs/api/Core/data/Model)s that were modified in the completed transaction. Use the [modifications](https://bryntum.com/products/taskboard/docs/api/Core/data/Model#property-modifications) property of each Model to identify modified fields.
     */
    onDataReady: ((event: { source: SchedulerProjectModel|any, isInitialCommit: boolean, records: Set<any> }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when data in any of the registered data stores is changed.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel#event-hasChanges)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     */
    onHasChanges: ((event: { source: AbstractCrudManager }) => void)|string
    /**
     * Fires on successful [load request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) completion after data gets loaded to the stores.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onLoad: ((event: { source: AbstractCrudManager, response: object, responseOptions: object }) => void)|string
    /**
     * Fired after [load request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) was canceled by some [beforeLoad](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#event-beforeLoad)
     * listener or due to incomplete prior load request.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onLoadCanceled: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires when a [load request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onLoadFail: ((event: { source: AbstractCrudManager, response: object, responseText: string, responseOptions: object }) => void)|string
    /**
     * Fires when registered stores get into state when they don't have any
     * not persisted change. This happens after [load](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) or [sync](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) request
     * completion. Or this may happen after a record update which turns its fields back to their original state.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel#event-noChanges)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     */
    onNoChanges: ((event: { source: AbstractCrudManager }) => void)|string
    /**
     * Fires on successful request completion after data gets applied to the stores.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onRequestDone: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object, responseOptions: object }) => void)|string
    /**
     * Fires when a request fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onRequestFail: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object, responseText: string, responseOptions: object }) => void)|string
    /**
     * Fires on successful [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) completion.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onSync: ((event: { source: AbstractCrudManager, response: object, responseOptions: object }) => void)|string
    /**
     * Fires after [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) was canceled by some [beforeSync](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#event-beforeSync) listener.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onSyncCanceled: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires after [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) was delayed due to incomplete previous one.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.arguments The arguments of [sync](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) call.
     */
    onSyncDelayed: ((event: { source: AbstractCrudManager, arguments: object }) => void)|string
    /**
     * Fires when a [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onSyncFail: ((event: { source: AbstractCrudManager, response: object, responseText: string, responseOptions: object }) => void)|string
}

/**
 * This class represents a global project of your TaskBoard - a central place for all data.
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel)
 */
export class ProjectModel extends SchedulerProjectModel {
    /**
     * Returns current changes as an object consisting of added/modified/removed arrays of records for every
     * managed store, keyed by each store's `id`. Returns `null` if no changes exist. Format:
     */
    readonly changes: object
    /**
     * The server revision stamp.
     * The *revision stamp* is a number which should be incremented after each server-side change.
     * This property reflects the current version of the data retrieved from the server and gets updated
     * after each [load](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) and [sync](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) call.
     */
    readonly crudRevision: number
    /**
     * A list of registered stores whose server communication will be collected into a single batch.
     * Each store is represented by a *store descriptor*.
     */
    crudStores: CrudManagerStoreDescriptor[]
    /**
     * Specify as `true` to force sync requests to be sent when calling `sync()`, even if there are no local
     * changes. Useful in a polling scenario, to keep client up to date with the backend.
     */
    forceSync: boolean
    /**
     * Returns `true` if changes tracking is suspended
     */
    readonly isChangeTrackingSuspended: boolean
    /**
     * Returns true if the crud manager is currently loading data
     */
    readonly isCrudManagerLoading: boolean
    /**
     * Returns true if the crud manager is currently syncing data
     */
    readonly isCrudManagerSyncing: boolean
    /**
     * Convenience shortcut to set only the url to load from, when you do not need to supply any other config
     * options in the `load` section of the `transport` config.
     */
    loadUrl: string
    /**
     * An array of stores presenting an alternative sync responses apply order.
     * Each store is represented by a *store descriptor*.
     */
    syncApplySequence: CrudManagerStoreDescriptor[]
    /**
     * Convenience shortcut to set only the url to sync to, when you do not need to supply any other config
     * options in the `sync` section of the `transport` config.
     */
    syncUrl: string
    /**
     * The [store](https://bryntum.com/products/taskboard/docs/api/TaskBoard/store/TaskStore) holding the tasks information.
     */
    taskStore: TaskStore
    /**
     * Get/set [taskStore](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel#property-taskStore) data.
     */
    tasks: TaskModel[]|Partial<TaskModelConfig>[]
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires before [load request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) is sent. Return `false` to cancel load request.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onBeforeLoad: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires before loaded data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.options Options provided to the [load](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) method.
     */
    onBeforeLoadApply: ((event: { source: AbstractCrudManager, response: object, options: object }) => void)|string
    /**
     * Fires before server response gets applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     */
    onBeforeResponseApply: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object }) => void)|string
    /**
     * Fires before a request is sent to the server.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel#event-beforeSend)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.crudManager The CRUD manager.
     * @param {object} event.params HTTP request params to be passed in the request URL.
     * @param {'sync'|'load'} event.requestType CrudManager request type (`load`/`sync`)
     * @param {object} event.requestConfig Configuration object for Ajax request call
     */
    onBeforeSend: ((event: { crudManager: AbstractCrudManager, params: object, requestType: 'sync'|'load', requestConfig: object }) => Promise<void>)|string
    /**
     * Fires before [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) is sent. Return `false` to cancel sync request.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel#event-beforeSync)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onBeforeSync: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires before sync response data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     */
    onBeforeSyncApply: ((event: { source: AbstractCrudManager, response: object }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when data in any of the projects stores changes.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel#event-change)
     * @param {object} event Event object
     * @param {SchedulerProjectModel|any} event.source This project
     * @param {Store} event.store Affected store
     * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} event.action Name of action which triggered the change. May be one of:  * `'remove'` * `'removeAll'` * `'add'` * `'updatemultiple'` * `'clearchanges'` * `'filter'` * `'update'` * `'dataset'` * `'replace'`
     * @param {Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onChange: ((event: { source: SchedulerProjectModel|any, store: Store, action: 'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when data in any of the registered data stores is changed.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel#event-hasChanges)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     */
    onHasChanges: ((event: { source: AbstractCrudManager }) => void)|string
    /**
     * Fires on successful [load request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) completion after data gets loaded to the stores.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onLoad: ((event: { source: AbstractCrudManager, response: object, responseOptions: object }) => void)|string
    /**
     * Fired after [load request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) was canceled by some [beforeLoad](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#event-beforeLoad)
     * listener or due to incomplete prior load request.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onLoadCanceled: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires when a [load request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onLoadFail: ((event: { source: AbstractCrudManager, response: object, responseText: string, responseOptions: object }) => void)|string
    /**
     * Fires when registered stores get into state when they don't have any
     * not persisted change. This happens after [load](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-load) or [sync](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) request
     * completion. Or this may happen after a record update which turns its fields back to their original state.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel#event-noChanges)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     */
    onNoChanges: ((event: { source: AbstractCrudManager }) => void)|string
    /**
     * Fires on successful request completion after data gets applied to the stores.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onRequestDone: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object, responseOptions: object }) => void)|string
    /**
     * Fires when a request fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onRequestFail: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object, responseText: string, responseOptions: object }) => void)|string
    /**
     * Fires on successful [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) completion.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onSync: ((event: { source: AbstractCrudManager, response: object, responseOptions: object }) => void)|string
    /**
     * Fires after [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) was canceled by some [beforeSync](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#event-beforeSync) listener.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onSyncCanceled: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires after [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) was delayed due to incomplete previous one.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.arguments The arguments of [sync](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) call.
     */
    onSyncDelayed: ((event: { source: AbstractCrudManager, arguments: object }) => void)|string
    /**
     * Fires when a [sync request](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-sync) fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onSyncFail: ((event: { source: AbstractCrudManager, response: object, responseText: string, responseOptions: object }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<ProjectModelConfig>} config Raw model config
     * @param {Store} store Data store
     * @param {object} meta Meta data
     */
    constructor(config?: Partial<ProjectModelConfig>, store?: Store, meta?: object);
    /**
     * Accepts all changes in all stores, resets the modification tracking:
     */
    acceptChanges(): void;
    /**
     * Adds a store to the collection.
     * @param {Store|string|CrudManagerStoreDescriptor|Store[]|string[]|CrudManagerStoreDescriptor[]} store A store or list of stores. Each store might be specified by its instance, `storeId` or *descriptor*.
     * @param {number} position The relative position of the store. If `fromStore` is specified the position will be taken relative to it. If not specified then store(s) will be appended to the end of collection. Otherwise, it will be just a position in stores collection. ```javascript // insert stores store4, store5 to the start of collection crudManager.addCrudStore([ store4, store5 ], 0); ```
     * @param {string|Store|CrudManagerStoreDescriptor} fromStore The store relative to which position should be calculated. Can be defined as a store identifier, instance or descriptor (the result of [getStoreDescriptor](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-getStoreDescriptor) call). ```javascript // insert store6 just before a store having storeId equal to 'foo' crudManager.addCrudStore(store6, 0, 'foo');  // insert store7 just after store3 store crudManager.addCrudStore(store7, 1, store3); ```
     */
    addCrudStore(store: Store|string|CrudManagerStoreDescriptor|Store[]|string[]|CrudManagerStoreDescriptor[], position?: number, fromStore?: string|Store|CrudManagerStoreDescriptor): void;
    /**
     * Adds an event listener. This method accepts parameters in the following format:
     * @param {BryntumListenerConfig|string} config An object containing listener definitions, or the event name to listen for
     * @param {object|Function} thisObj Default `this` reference for all listeners in the config object, or the handler function to call if providing a string as the first arg.
     * @param {object} oldThisObj The `this` reference if the old signature starting with a string event name is used..
     */
    addListener(config: BryntumListenerConfig|string, thisObj?: object|Function, oldThisObj?: object): Function;
    /**
     * Adds a store to the alternative sync responses apply sequence.
     * By default, the order in which sync responses are applied to the stores is the same as they registered in.
     * But this order can be changes either on construction step using [syncApplySequence](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#config-syncApplySequence) option
     * or by calling this method.
     * @param {Store|CrudManagerStoreDescriptor|Store[]|CrudManagerStoreDescriptor[]} store The store to add or its *descriptor* (or array of stores or descriptors).
     * @param {number} position The relative position of the store. If `fromStore` is specified the position will be taken relative to it. If not specified then store(s) will be appended to the end of collection. Otherwise, it will be just a position in stores collection. ```javascript // insert stores store4, store5 to the start of sequence crudManager.addStoreToApplySequence([ store4, store5 ], 0); ```
     * @param {string|Store|CrudManagerStoreDescriptor} fromStore The store relative to which position should be calculated. Can be defined as a store identifier, instance or its descriptor (the result of [getStoreDescriptor](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#function-getStoreDescriptor) call). ```javascript // insert store6 just before a store having storeId equal to 'foo' crudManager.addStoreToApplySequence(store6, 0, 'foo');  // insert store7 just after store3 store crudManager.addStoreToApplySequence(store7, 1, store3); ```
     */
    addStoreToApplySequence(store: Store|CrudManagerStoreDescriptor|Store[]|CrudManagerStoreDescriptor[], position?: number, fromStore?: string|Store|CrudManagerStoreDescriptor): void;
    /**
     * Applies a set of changes, as an object keyed by store id, to the affected stores. This function is intended
     * to use in apps that handle their own data syncing, it is not needed when using the CrudManager approach.
     * @param {object} changes Changeset to apply, an object keyed by store id where each value follows the format described in [applyChangeset](https://bryntum.com/products/taskboard/docs/api/Core/data/Store#function-applyChangeset)
     * @param {Function} transformFn Optional function used to preprocess a changeset per store in a different format, should return an object with the format expected by [applyChangeset](https://bryntum.com/products/taskboard/docs/api/Core/data/Store#function-applyChangeset)
     * @param {string} phantomIdField Field used by the backend when communicating a record being assigned a proper id instead of a phantom id
     */
    applyChangeset(changes: object, transformFn?: Function, phantomIdField?: string): void;
    /**
     * Cancels a sent request.
     * @param {Promise<any>} requestPromise The Promise object wrapping the Request to be cancelled. The *requestPromise* is the value returned from the corresponding [sendRequest](https://bryntum.com/products/scheduler/docs#Scheduler/crud/transport/AjaxTransport#function-sendRequest) call.
     */
    cancelRequest(requestPromise: Promise<any>): void;
    /**
     * Returns `true` if any of registered stores (or some particular store) has non persisted changes.
     * @param {string|Store} storeId The store identifier or store instance to check changes for. If not specified then will check changes for all of the registered stores.
     */
    crudStoreHasChanges(storeId?: string|Store): boolean;
    /**
     * Decodes (parses) a *JSON* response string to an object. If parsing fails, it returns null.
     * Supposed to be overridden in case data provided by server has to be transformed into format requested by the *Crud Manager*.
     * @param {string} responseText The response text to decode.
     */
    decode(responseText: string): object;
    /**
     * Encodes a request object to *JSON* encoded string. If encoding fails (due to circular structure), it returns null.
     * Supposed to be overridden in case data provided by the *Crud Manager* has to be transformed into format requested by server.
     * @param {object} requestData The request to encode.
     */
    encode(requestData: object): string;
    /**
     * Returns a registered store.
     * @param {string} storeId Store identifier.
     */
    getCrudStore(storeId: string): Store;
    /**
     * Returns a registered store descriptor.
     * @param {string|Store} storeId The store identifier or registered store instance.
     */
    getStoreDescriptor(storeId: string|Store): CrudManagerStoreDescriptor;
    /**
     * Check if any listener is registered for the specified eventName
     * @param {string} eventName
     */
    hasListener(eventName: string): boolean;
    /**
     * Loads data to the stores registered in the crud manager. For example:
     * @param {object|string} options The request parameters or a URL.
     */
    load(options?: {
        request?: object
    }|string): Promise<any>;
    /**
     * Loads data to the Crud Manager
     * @param {object} response A simple object representing the data. The object structure matches the decoded `load` response structure: ```javascript // load static data into crudManager crudManager.loadCrudManagerData({     success   : true,     resources : {         rows : [             { id : 1, name : 'John' },             { id : 2, name : 'Abby' }         ]     } }); ```
     * @param {object} options Extra data loading options.
     */
    loadCrudManagerData(response: object, options?: object): void;
    /**
     * Alias for [addListener](https://bryntum.com/products/taskboard/docs/api/Core/mixin/Events#function-addListener). Adds an event listener. This method accepts parameters in the following format:
     * @param {BryntumListenerConfig|string} config An object containing listener definitions, or the event name to listen for
     * @param {object|Function} thisObj Default `this` reference for all listeners in the config object, or the handler function to call if providing a string as the first arg.
     * @param {object} oldThisObj The `this` reference if the old signature starting with a string event name is used..
     */
    on(config: BryntumListenerConfig|string, thisObj?: object|Function, oldThisObj?: object): Function;
    /**
     * Relays all events through another object that also implements Events mixin. Adds a prefix to the event name
     * before relaying, for example add -&gt; storeAdd
     * @param {EventsClass} through Object to relay the events through, needs to mix Events mixin in
     * @param {string} prefix Prefix to add to event name
     * @param {boolean} transformCase Specify false to prevent making first letter of event name uppercase
     */
    relayAll(through: EventsClass, prefix: string, transformCase?: boolean): void;
    /**
     * Removes all listeners registered to this object by the application.
     */
    removeAllListeners(): void;
    /**
     * Removes a store from collection. If the store was registered in alternative sync sequence list
     * it will be removed from there as well.
     * @param {CrudManagerStoreDescriptor|string|Store} store The store to remove. Either the store descriptor, store identifier or store itself.
     */
    removeCrudStore(store: CrudManagerStoreDescriptor|string|Store): void;
    /**
     * Removes an event listener. Same API signature as [addListener](https://bryntum.com/products/taskboard/docs/api/Core/mixin/Events#function-addListener)
     * @param {object|string} config A config object or the event name
     * @param {object|Function} thisObj `this` reference for all listeners, or the listener function
     * @param {object} oldThisObj `this` The `this` object for the legacy way of adding listeners
     */
    removeListener(config: object|string, thisObj: object|Function, oldThisObj: object): void;
    /**
     * Removes a store from the alternative sync sequence.
     * @param {CrudManagerStoreDescriptor|string|Store} store The store to remove. Either the store descriptor, store identifier or store itself.
     */
    removeStoreFromApplySequence(store: CrudManagerStoreDescriptor|string|Store): void;
    /**
     * Resumes automatic sync upon store changes. Will schedule a sync if the internal counter is 0.
     * @param {boolean} doSync Pass `true` to schedule a sync after resuming (if there are pending changes) and `false` to not persist the changes.
     */
    resumeAutoSync(doSync?: boolean): void;
    /**
     * Resumes [hasChanges](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#event-hasChanges) and [noChanges](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#event-noChanges) events. By default, it will check for changes
     * and if there are any, `hasChanges` or `noChanges` event will be triggered.
     * @param {boolean} skipChangeCheck
     */
    resumeChangeTracking(skipChangeCheck?: boolean): void;
    /**
     * Resume event triggering after a call to [suspendEvents()](https://bryntum.com/products/taskboard/docs/api/Core/mixin/Events#function-suspendEvents). If any triggered events were queued they will be triggered.
     */
    resumeEvents(): boolean;
    /**
     * Reverts all changes in all stores and re-inserts any records that were removed locally. Any new uncommitted
     * records will be removed.
     */
    revertChanges(): void;
    /**
     * Sends a *Crud Manager* request to the server.
     * @param {object} request The request configuration object having following properties:
     */
    sendRequest(request: {
        type: 'load'|'sync'
        url: string
        data: string
        params: object
        success: Function
        failure: Function
        thisObj: object
    }): Promise<any>;
    /**
     * Suspends automatic sync upon store changes. Can be called multiple times (it uses an internal counter).
     */
    suspendAutoSync(): void;
    /**
     * Suspends [hasChanges](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#event-hasChanges) and [noChanges](https://bryntum.com/products/scheduler/docs#Scheduler/crud/AbstractCrudManagerMixin#event-noChanges) events.
     */
    suspendChangeTracking(): void;
    /**
     * Prevents events from being triggered until [resumeEvents()](https://bryntum.com/products/taskboard/docs/api/Core/mixin/Events#function-resumeEvents) is called. Optionally queues events that are triggered while
     * suspended. Multiple calls stack to require matching calls to `resumeEvents()` before actually resuming.
     * @param {boolean} queue Specify true to queue events triggered while suspended
     */
    suspendEvents(queue?: boolean): void;
    /**
     * Persists changes made on the registered stores to the server and/or receives changes made on the backend.
     * Usage:
     */
    sync(): Promise<any>;
    /**
     * Returns the data from the records of the projects stores, in a format that can be consumed by `loadInlineData()`.
     */
    toJSON(): object;
    /**
     * Triggers an event, calling all registered listeners with the supplied arguments. Returning false from any listener
     * makes function return false.
     * @param {string} eventName Event name for which to trigger listeners
     * @param {{bubbles?: boolean, [key: string]: any}} param Single parameter passed on to listeners, source property will be added to it (this)
     */
    trigger(eventName: string, param?: {bubbles?: boolean, [key: string]: any}): Promise<boolean|any>;
    /**
     * Shorthand for [removeListener](https://bryntum.com/products/taskboard/docs/api/Core/mixin/Events#function-removeListener)
     * @param {object|string} config A config object or the event name
     * @param {object|Function} thisObj `this` reference for all listeners, or the listener function
     * @param {object} oldThisObj `this` The `this` object for the legacy way of adding listeners
     */
    un(config: object|string, thisObj?: object|Function, oldThisObj?: object): void;
}

/**
 * Type with configuration options for [SwimlaneModel](https://bryntum.com/products/grid/docs/api/TaskBoard/model/SwimlaneModel) class.
 */
type SwimlaneModelConfig = {
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/SwimlaneModel#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * Collapsed (true) or expanded (False).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/SwimlaneModel#config-collapsed)
     */
    collapsed: boolean
    /**
     * Allow collapsing this swimlane
     */
    collapsible: boolean
    /**
     * Color, named colors are applied as a `b-taskboard-color-{color}` (for example `b-taskboard-color-red`) CSS
     * class to the swimlane. Colors specified as hex, `rgb()` etc. are applied as `style.color` to the swilane.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/SwimlaneModel#config-color)
     */
    color: string
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Swimlane flex, affects height.
     */
    flex: number
    /**
     * Swimlane height in px.
     */
    height: number
    /**
     * Set to `true` to hide the swimlane, `false` to show it again.
     */
    hidden: boolean
    /**
     * The swimlane's unique id, used to match a task to a swimlane (which field on a task to match is specified
     * using then [swimlaneField](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-swimlaneField) config on TaskBoard).
     */
    id: string|number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/SwimlaneModel#config-readOnly)
     */
    readOnly: boolean
    /**
     * Number of tasks per row to display in this swimlane. Leave blank to use the setting from the
     * [tasksPerRow](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-tasksPerRow) config on TaskBoard.
     */
    tasksPerRow: number
    /**
     * Text displayed in the swimlane header.
     */
    text: string
}

/**
 * Represents a single swimlane on a TaskBoard.
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/SwimlaneModel)
 */
export class SwimlaneModel extends Model {
    /**
     * Collapsed (true) or expanded (False).
     */
    readonly collapsed: boolean
    /**
     * Allow collapsing this swimlane
     */
    collapsible: boolean
    /**
     * Color, named colors are applied as a `b-taskboard-color-{color}` (for example `b-taskboard-color-red`) CSS
     * class to the swimlane. Colors specified as hex, `rgb()` etc. are applied as `style.color` to the swilane.
     */
    color: string
    /**
     * Swimlane flex, affects height.
     */
    flex: number
    /**
     * Swimlane height in px.
     */
    height: number
    /**
     * Set to `true` to hide the swimlane, `false` to show it again.
     */
    hidden: boolean
    /**
     * The swimlane's unique id, used to match a task to a swimlane (which field on a task to match is specified
     * using then [swimlaneField](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-swimlaneField) config on TaskBoard).
     */
    id: string|number
    /**
     * Get tasks in this swimlane.
     */
    readonly tasks: TaskModel[]
    /**
     * Number of tasks per row to display in this swimlane. Leave blank to use the setting from the
     * [tasksPerRow](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-tasksPerRow) config on TaskBoard.
     */
    tasksPerRow: number
    /**
     * Text displayed in the swimlane header.
     */
    text: string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<SwimlaneModelConfig>} config Raw model config
     * @param {Store} store Data store
     * @param {object} meta Meta data
     */
    constructor(config?: Partial<SwimlaneModelConfig>, store?: Store, meta?: object);
    /**
     * Collapse this swimlane.
     */
    collapse(): Promise<any>;
    /**
     * Expand this swimlane.
     */
    expand(): Promise<any>;
}

/**
 * Type with configuration options for [TaskModel](https://bryntum.com/products/grid/docs/api/TaskBoard/model/TaskModel) class.
 */
type TaskModelConfig = {
    /**
     * A field marking event as all day(s) spanning event.
     * For example, a holiday day may be represented by a `startDate`, and the `allDay` flag.
     */
    allDay: boolean
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/TaskModel#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * An encapsulation of the CSS classes to add to the rendered time span element.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/TaskModel#config-cls)
     */
    cls: DomClassList|string|string[]|object
    /**
     * Task description, by default shown in tasks body.
     */
    description: string
    /**
     * Specify false to prevent the event from being dragged (if EventDrag feature is used)
     */
    draggable: boolean
    /**
     * The numeric part of the timespan's duration (the number of units).
     */
    duration: number
    /**
     * The unit part of the TimeSpan duration, defaults to "d" (days). Valid values are:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/TaskModel#config-durationUnit)
     */
    durationUnit: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'
    /**
     * The end date of a time span (or Event / Task).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/TaskModel#config-endDate)
     */
    endDate: string|Date
    /**
     * Color, named colors are applied as a `b-taskboard-color-{color}` (for example `b-taskboard-color-red`) CSS
     * class to the tasks card. Colors specified as hex, `rgb()` etc. are applied as `style.color` to the card.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/TaskModel#config-eventColor)
     */
    eventColor: 'red'|'pink'|'purple'|'deep-purple'|'indigo'|'blue'|'light-blue'|'cyan'|'teal'|'green'|'light-green'|'lime'|'yellow'|'amber'|'orange'|'deep-orange'|'gray'|'light-gray'|string|null
    /**
     * Controls this events appearance, see Schedulers
     * [eventStyle config](https://bryntum.com/products/scheduler/docs#Scheduler/view/mixin/TimelineEventRendering#config-eventStyle) for
     * available options.
     */
    eventStyle: 'plain'|'border'|'colored'|'hollow'|'line'|'dashed'|'minimal'|'rounded'|'calendar'|'interday'|null
    /**
     * A string (either a single date or multiple dates separated by comma) or an array of strings containing
     * the timespan exception dates. The dates that must be skipped when generating occurrences for a repeating
     * timespan. This is used to modify only individual occurrences of the timespan so the further regenerations
     * won't create another copy of this occurrence again.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/TaskModel#config-exceptionDates)
     */
    exceptionDates: string|string[]
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Calculated field which encapsulates the duration's magnitude and unit. This field will not be persisted,
     * setting it will update the [duration](https://bryntum.com/products/scheduler/docs#Scheduler/model/TimeSpan#field-duration) and [durationUnit](https://bryntum.com/products/scheduler/docs#Scheduler/model/TimeSpan#field-durationUnit) fields.
     */
    fullDuration: Partial<DurationConfig>|Duration
    /**
     * CSS class specifying an icon to apply to the rendered time span element.
     * <strong>Note</strong>: In case event is a milestone, using `iconCls` with dependency feature might slightly decrease
     * performance because feature will refer to the DOM to get exact size of the element.
     */
    iconCls: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/TaskModel#config-id)
     */
    id: string|number
    /**
     * Width (in px) to use for this milestone when using Scheduler#milestoneLayoutMode 'data'.
     */
    milestoneWidth: number
    /**
     * The name of the time span (or Event / Task)
     */
    name: string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Task priority, for example for linking to a swimlane on the TaskBoard.
     */
    prio: string|number
    /**
     * Set to `true` to make the task read-only, preventing it from being edited in the UI.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/TaskModel#config-readOnly)
     */
    readOnly: boolean
    /**
     * The timespan recurrence rule. A string in [RFC-5545](https://tools.ietf.org/html/rfc5545#section-3.3.10)
     * described format ("RRULE" expression).
     */
    recurrenceRule: string
    /**
     * Specify `false` to prevent the event from being resized (if EventResize feature is used). You can also
     * specify `'start'` or `'end'` to only allow resizing in one direction
     */
    resizable: boolean|string
    /**
     * Id of the resource this event is associated with (only usable for single assignments). We recommend
     * using assignments in an AssignmentStore over this approach. Internally any Event using `resourceId`
     * will have an assignment in AssignmentStore generated.
     */
    resourceId: string|number
    /**
     * Ids of the resources this event is associated with (can be used for for multiple assignments).
     * Any event using `resourceIds` will have assignments in AssignmentStore generated automatically.
     * It only applies if is configured with `perist: true`.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/TaskModel#config-resourceIds)
     */
    resourceIds: string[]|number[]
    /**
     * The array of [resources](https://bryntum.com/products/scheduler/docs#Scheduler/model/ResourceModel) which are assigned to this event.
     */
    resources: ResourceModel[]
    /**
     * The start date of a time span (or Event / Task).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/TaskModel#config-startDate)
     */
    startDate: string|Date
    /**
     * Task status, for example for linking to a column on the TaskBoard.
     */
    status: string
    /**
     * Set this field to `false` to opt out of [sticky event content](https://bryntum.com/products/scheduler/docs#Scheduler/feature/StickyEvents)
     * (keeping event text in view while scrolling).
     */
    stickyContents: boolean
    /**
     * A CSS style string (applied to `style.cssText`) or object (applied to `style`)
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/TaskModel#config-style)
     */
    style: string
    /**
     * The current timeZone this record is converted to. Used internally to keep track of time zone conversions.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/TaskModel#config-timeZone)
     */
    timeZone: string|number|null
    /**
     * Task weight, used by default to determine its index in a column. Higher weights are displayed further down.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/TaskModel#config-weight)
     */
    weight: number
}

/**
 * Represents a single task on your TaskBoard, usually added to a [TaskStore](https://bryntum.com/products/taskboard/docs/api/TaskBoard/store/TaskStore).
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/TaskModel)
 */
export class TaskModel extends EventModel {
    /**
     * Task description, by default shown in tasks body.
     */
    description: string
    /**
     * Color, named colors are applied as a `b-taskboard-color-{color}` (for example `b-taskboard-color-red`) CSS
     * class to the tasks card. Colors specified as hex, `rgb()` etc. are applied as `style.color` to the card.
     */
    eventColor: 'red'|'pink'|'purple'|'deep-purple'|'indigo'|'blue'|'light-blue'|'cyan'|'teal'|'green'|'light-green'|'lime'|'yellow'|'amber'|'orange'|'deep-orange'|'gray'|'light-gray'|string|null
    /**
     * Task priority, for example for linking to a swimlane on the TaskBoard.
     */
    prio: string|number
    /**
     * Set to `true` to make the task read-only, preventing it from being edited in the UI.
     */
    readOnly: boolean
    /**
     * Task status, for example for linking to a column on the TaskBoard.
     */
    status: string
    /**
     * Task weight, used by default to determine its index in a column. Higher weights are displayed further down.
     */
    weight: number
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<TaskModelConfig>} config
     */
    constructor(config?: Partial<TaskModelConfig>);
}

/**
 * Type with configuration options for [TaskStore](https://bryntum.com/products/grid/docs/api/TaskBoard/data/TaskStore) class.
 */
type TaskStoreConfig = {
    /**
     * Specify `false` to prevent loading records without ids, a good practise to enforce when syncing with a
     * backend.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/data/TaskStore#config-allowNoId)
     */
    allowNoId: boolean
    /**
     * Specifies target to filter and sort after applying changeset:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/data/TaskStore#config-applyChangesetFilterSortTarget)
     */
    applyChangesetFilterSortTarget: 'changes'|'none'
    /**
     * Commit changes automatically
     */
    autoCommit: boolean
    /**
     * True to initiate a load when the store is instantiated
     */
    autoLoad: boolean
    /**
     * Automatically detect from set data if used as tree store or flat store
     */
    autoTree: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/data/TaskStore#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/data/TaskStore#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Array of field names that should trigger filtering of chained store when the fields are updated.
     */
    chainedFields: string[]
    /**
     * Function used to filter records in the masterStore into a chained store. If not provided,
     * all records from the masterStore will be included in the chained store.
     * Return `true` to include the passed record, or a `false` to exclude it.
     * @param {Model} record
     * @returns {boolean}
     */
    chainedFilterFn: (record: Model) => boolean
    /**
     * Url to post newly created records to.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/data/TaskStore#config-createUrl)
     */
    createUrl: string
    /**
     * Raw data to load initially.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/data/TaskStore#config-data)
     */
    data: object[]|Model[]
    /**
     * Url for deleting records.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/data/TaskStore#config-deleteUrl)
     */
    deleteUrl: string
    /**
     * Method names calls to which should be relayed to master store.
     */
    doRelayToMaster: string[]
    /**
     * Method names calls to which shouldn't be relayed to master store.
     */
    dontRelayToMaster: string
    /**
     * If true, collapsed records in original tree will be excluded from the chained store.
     */
    excludeCollapsedRecords: boolean
    /**
     * An object containing the Fetch options to pass to each server request issued by this store. Use this to
     * control if credentials are sent and other options, read more at
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_request_options).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/data/TaskStore#config-fetchOptions)
     */
    fetchOptions: object
    /**
     * An array of field definitions used to create a [Model](https://bryntum.com/products/taskboard/docs/api/Core/data/Model) (modelClass) subclass. Optional.
     * If the Model already has fields defined, these fields will extend those.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/data/TaskStore#config-fields)
     */
    fields: (string|Partial<ModelFieldConfig>|DataField)[]
    /**
     * The name of the HTTP parameter to use to pass any encoded filters when loading data from the server and a
     * filtered response is required.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/data/TaskStore#config-filterParamName)
     */
    filterParamName: string
    /**
     * Specify one or more [CollectionFilter](https://bryntum.com/products/taskboard/docs/api/Core/util/CollectionFilter) config objects to apply initially.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/data/TaskStore#config-filters)
     */
    filters: Partial<CollectionFilterConfig>|Partial<CollectionFilterConfig>[]
    /**
     * This flag prevents firing of 'remove' event when moving a node in the tree. In 6.0 this will be the default
     * behavior and this flag will be removed.
     */
    fireRemoveEventForMoveAction: boolean
    /**
     * Initial groupers, specify to have store grouped automatically after initially setting data
     */
    groupers: Grouper[]
    /**
     * A string keyed object containing the HTTP headers to add to each server request issued by this store.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/data/TaskStore#config-headers)
     */
    headers: Record<string, string>
    /**
     * The HTTP methods to use for CRUD requests when [useRestfulMethods](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#config-useRestfulMethods) is enabled.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/data/TaskStore#config-httpMethods)
     */
    httpMethods: HttpMethods
    /**
     * Store's unique identifier. When set the store is added to a store map accessible through
     * `Store.getStore(id)`.
     */
    id: string|number
    /**
     * Set to `false` to not record transaction during `applyChangeset` call
     */
    ignoreRemoteChangesInSTM: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/data/TaskStore#config-listeners)
     */
    listeners: object
    /**
     * Master store that a chained store gets its records from.
     */
    masterStore: Store
    /**
     * Class used to represent records, defaults to [TaskModel](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/TaskModel)
     */
    modelClass: typeof TaskModel
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>one based</strong> page number
     * required.
     */
    pageParamName: string
    /**
     * When paging of data is requested by setting *either* the [pageParamName](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#config-pageParamName) *or* the
     * [pageStartParamName](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#config-pageStartParamName), this is the value to send in the [pageSizeParamName](#Core/data/AjaxStore#config-pageSizeParamName).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/data/TaskStore#config-pageSize)
     */
    pageSize: number
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageSizeParamName: string
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageStartParamName: string
    /**
     * An object containing key/value pairs that are passed on the request query string.
     */
    params: object
    /**
     * The name of the HTTP parameter passed to this Store's [readUrl](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#config-readUrl) to indicate the node `id`
     * to load when loading child nodes on demand if the node being expanded was created with data containing
     * `children: true`.
     */
    parentIdParamName: string
    /**
     * Url to read data from.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/data/TaskStore#config-readUrl)
     */
    readUrl: string
    /**
     * Specify true to reapply filters when a record is added to the store.
     */
    reapplyFilterOnAdd: boolean
    /**
     * Specify true to reapply filters when a record is updated in the store.
     */
    reapplyFilterOnUpdate: boolean
    /**
     * Specify true to sort this store after records are added.
     */
    reapplySortersOnAdd: boolean
    /**
     * Configure with `true` to also remove the event when removing the last assignment from the linked
     * AssignmentStore.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/data/TaskStore#config-removeUnassignedEvent)
     */
    removeUnassignedEvent: boolean
    /**
     * The property name in JSON responses from the server that contains the data for the records
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/data/TaskStore#config-responseDataProperty)
     */
    responseDataProperty: string
    /**
     * The optional property name in JSON responses from the server that contains a boolean
     * success/fail status.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/data/TaskStore#config-responseSuccessProperty)
     */
    responseSuccessProperty: string
    /**
     * The property name in JSON responses from the server that contains the dataset total size
     * <strong>when this store [is paged](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#property-isPaged)</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/data/TaskStore#config-responseTotalProperty)
     */
    responseTotalProperty: string
    /**
     * Set this flag to true if you are filtering remote using restful URLs (e.g.
     * https://nominatim.openstreetmap.org/search/paris?format=json)
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/data/TaskStore#config-restfulFilter)
     */
    restfulFilter: boolean
    /**
     * Specify `true` to send payloads as form data, `false` to send as regular JSON.
     */
    sendAsFormData: boolean
    /**
     * Configure with `true` to force single-resource mode, an event can only be assigned to a single resource.
     * If not provided, the mode will be inferred from
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/data/TaskStore#config-singleAssignment)
     */
    singleAssignment: boolean
    /**
     * The name of the HTTP parameter to use to pass any encoded sorters when loading data from the server and a
     * sorted response is required.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/data/TaskStore#config-sortParamName)
     */
    sortParamName: string
    /**
     * Initial sorters, format is `[{ field: 'name', ascending: false }, ...]`.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/data/TaskStore#config-sorters)
     */
    sorters: Sorter[]|string[]
    /**
     * To have all groups <strong>initially loaded</strong> start collapsed, configure this as `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/data/TaskStore#config-startGroupsCollapsed)
     */
    startGroupsCollapsed: boolean
    /**
     * Reference to STM manager
     */
    stm: StateTrackingManager
    /**
     * A [Collection](https://bryntum.com/products/taskboard/docs/api/Core/util/Collection), or Collection config object
     * to use to contain this Store's constituent records.
     */
    storage: Collection|Partial<CollectionConfig>
    /**
     * Store class to use when creating the store when it is a part of a
     * [CrudManager](https://bryntum.com/products/scheduler/docs/api/Scheduler/data/CrudManager).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/data/TaskStore#config-storeClass)
     */
    storeClass: typeof Store
    /**
     * Configure with `true` to sync loaded data instead of replacing existing with a new dataset.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/data/TaskStore#config-syncDataOnLoad)
     */
    syncDataOnLoad: boolean|SyncDataOnLoadOptions
    /**
     * Set to `true` to on load transform a flat dataset with raw objects containing `parentId` into the format
     * expected for tree data.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/data/TaskStore#config-transformFlatData)
     */
    transformFlatData: boolean
    /**
     * `true` to act as a tree store.
     */
    tree: boolean
    /**
     * Url to post record modifications to.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/data/TaskStore#config-updateUrl)
     */
    updateUrl: string
    /**
     * Use `localeCompare()` when sorting, which lets the browser sort in a locale specific order. Set to `true`,
     * a locale string or a locale config to enable.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/data/TaskStore#config-useLocaleSort)
     */
    useLocaleSort: boolean|string|object
    /**
     * Retools the loaded data objects instead of making shallow copies of them. This increases performance but
     * pollutes the incoming data and does not allow remapping of fields (dataSource).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/data/TaskStore#config-useRawData)
     * @param {boolean} disableDuplicateIdCheck Data must not contain duplicate ids, check is bypassed.
     * @param {boolean} disableDefaultValue Default values will not be applied to record fields.
     * @param {boolean} disableTypeConversion No type conversions will be performed on record data.
     */
    useRawData: boolean|object
    /**
     * Set to ´true´ to use restful [httpMethods](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#config-httpMethods)
     */
    useRestfulMethods: boolean
    /**
     * Verify that loaded data does not contain any generated ids. If it does, a warning is logged on console.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/data/TaskStore#config-verifyNoGeneratedIds)
     */
    verifyNoGeneratedIds: boolean
    /**
     * Specify `true` to send all model fields when committing modified records (as opposed to just the
     * modified fields)
     */
    writeAllFields: boolean
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Added records. In case of tree store, if branch is added, only branch root is returned
     * @param {Model[]} event.allRecords Flat list of all added records. In case of tree store, if branch is added, all new records are returned, not only branch root
     * @param {Model} event.parent If due to an [appendChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-appendChild) call, this is the parent node added to.
     * @param {number} event.index Insertion point in the store's [Collection](https://bryntum.com/products/taskboard/docs/api/Core/data/Store#config-storage).
     * @param {number} event.oldIndex Not used for tree stores. The index of the first record moved.
     * @param {boolean} event.isChild Flag which is set to true if the records are added to a parent record
     * @param {boolean} event.isExpand Flag which is set to true if records are added to the store by expanding parent
     * @param {object} event.isMove An object keyed by the ids of the records which were moved from another position in the store, or from another parent node in the store. The ids of moved records will be property names with a value `true`.
     */
    onAdd: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, oldIndex?: number, isChild?: boolean, isExpand?: boolean, isMove?: object }) => void)|string
    /**
     * Fired when a temporary record with the [isCreating](https://bryntum.com/products/taskboard/docs/api/Core/data/Model#property-isCreating) property set
     * has been confirmed as a part of this store by having its [isCreating](https://bryntum.com/products/taskboard/docs/api/Core/data/Model#property-isCreating)
     * property cleared.
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {Model} event.record The record confirmed as added.
     */
    onAddConfirmed: ((event: { source: Store, record: Model }) => void)|string
    /**
     * Fired after any remote request has finished whether successfully or unsuccessfully.
     * @param {object} event Event object
     * @param {boolean} event.exception `true`. *Only present if the request triggered an exception.*
     * @param {'create'|'read'|'update'|'delete'} event.action Action that has finished, `'create'`, `'read'`, `'update'` or `'delete'`
     * @param {'network'|'failure'} event.exceptionType The type of failure, `'network'` or `'server'`. <em>Only present if the request triggered an exception.</em>
     * @param {Response} event.response The `Response` object
     * @param {object} event.json The decoded response object if there was no `'network'` exception.
     */
    onAfterRequest: ((event: { exception: boolean, action: 'create'|'read'|'update'|'delete', exceptionType: 'network'|'failure', response: Response, json: object }) => void)|string
    /**
     * Fired before records are added to this store by the [add](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/StoreCRUD#function-add) or [insert](#Core/data/mixin/StoreCRUD#function-insert). In a tree
     * store, also fired by [appendChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-appendChild) and
     * [insertChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-insertChild). The add or insert may be vetoed by returning `false`
     * from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be added
     * @param {Model} event.parent The parent node when using a tree store
     */
    onBeforeAdd: ((event: { source: Store, records: Model[], parent: Model }) => boolean|void)|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onBeforeCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     * @param {object} event Event object
     * @param {Store|any} event.source The
     * @param {(Model|any)[]} event.records The nodes to indent.
     */
    onBeforeIndent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before loading starts. Allows altering parameters and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoad: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * Fired before loading of remote child nodes of a tree node starts. Allows altering parameters and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoadChildren: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * When the store [is paged](https://bryntum.com/products/taskboard/docs/api/Core/data/AjaxStore#property-isPaged), this is fired before loading a page and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoadPage: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     * @param {object} event Event object
     * @param {Store|any} event.source This store
     * @param {(Model|any)[]} event.records Nodes to be outdented
     */
    onBeforeOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before records are removed from this store by the [remove](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/StoreCRUD#function-remove) or [removeAll](#Core/data/mixin/StoreCRUD#function-removeAll).
     * Also fired when removing a child record in a tree store using [removeChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-removeChild).
     * The remove may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be removed.
     * @param {Model} event.parent The record from which children are being removed when using a tree store. Only provided when removing a single node.
     * @param {boolean} event.isMove This flag is `true` if the child node is being removed by [appendChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-appendChild) to be moved *within the same tree*.
     * @param {boolean} event.removingAll This flag is `true` if the operation is removing the store's entire data set.
     */
    onBeforeRemove: ((event: { source: Store, records: Model[], parent: Model, isMove: boolean, removingAll: boolean }) => boolean|void)|string
    /**
     * Fired before any remote request is initiated.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing key/value pairs that are passed on the request query string
     * @param {object} event.body The body of the request to be posted to the server.
     * @param {'create'|'read'|'update'|'delete'} event.action Action that is making the request, `'create'`, `'read'`, `'update'` or `'delete'`
     */
    onBeforeRequest: ((event: { source: Store, params: object, body: object, action: 'create'|'read'|'update'|'delete' }) => void)|string
    /**
     * Fired before sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Records to sort
     */
    onBeforeSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fired before record is modified in this store.
     * Modification may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {object} event.changes Modification data
     */
    onBeforeUpdate: ((event: { source: Store, record: Model, changes: object }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/data/TaskStore#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Data in the store was changed. This is a catch-all event which is fired for all changes
     * which take place to the store's data.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/data/TaskStore#event-change)
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} event.action Name of action which triggered the change. May be one of the options listed above
     * @param {Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onChange: ((event: { source: Store, action: 'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Fired after committing changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fired after committing added records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitAdded: ((event: { source: Store }) => void)|string
    /**
     * Fired after committing modified records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitModified: ((event: { source: Store }) => void)|string
    /**
     * Fired after committing removed records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitRemoved: ((event: { source: Store }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when a remote request fails, either at the network level, or the server returns a failure, or an invalid
     * response.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/data/TaskStore#event-exception)
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {boolean} event.exception `true`
     * @param {'create'|'read'|'update'|'delete'|'commit'} event.action Action that failed, `'create'`, `'read'`, `'update'` or `'delete'`. May also be fired with '`commit'` to indicate the failure of an aggregated `create`, `update` and `delete` operation. In this case, the event will contain a property for each operation of the commit named `'create'`, `'update'` and `'delete'`, each containing the individual `exception` events.
     * @param {'network'|'failure'} event.exceptionType The type of failure, `'network'` or `'server'`
     * @param {Response} event.response the `Response` object
     * @param {object} event.json The decoded response object *if the exceptionType is `'server'`*
     */
    onException: ((event: { source: Store, exception: boolean, action: 'create'|'read'|'update'|'delete'|'commit', exceptionType: 'network'|'failure', response: Response, json: object }) => void)|string
    /**
     * Fired after applying filters to the store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Collection} event.filters Filters used by this Store
     * @param {Model[]} event.removed The records which were filtered out by the action.
     * @param {Model[]} event.added The records which were filtered back in by the action.
     * @param {Model[]} event.records Filtered records
     */
    onFilter: ((event: { source: Store, filters: Collection, removed: Model[], added: Model[], records: Model[] }) => void)|string
    /**
     * Fired when grouping changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Grouper[]} event.groupers Applied groupers
     * @param {Model[]} event.records Grouped records
     */
    onGroup: ((event: { source: Store, groupers: Grouper[], records: Model[] }) => void)|string
    /**
     * Fired when the id of a record has changed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {string|number} event.oldValue Old id
     * @param {string|number} event.value New id
     */
    onIdChange: ((event: { source: Store, record: Model, oldValue: string|number, value: string|number }) => void)|string
    /**
     * Fired after tasks in the tree are indented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were indented
     */
    onIndent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired on successful load
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object[]} event.data Data loaded
     * @param {Response} event.response the `Response` object
     * @param {object} event.json The decoded response object.
     */
    onLoad: ((event: { source: Store, data: object[], response: Response, json: object }) => void)|string
    /**
     * Fired on successful load of remote child nodes for a tree node.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object[]} event.data Data loaded
     * @param {object} event.json The decoded response object.
     */
    onLoadChildren: ((event: { source: Store, data: object[], json: object }) => void)|string
    /**
     * Fired when loading of remote child nodes into a tree node is beginning. This is not cancelable. Parameters in the
     * event may still be mutated at this stage.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadChildrenStart: ((event: { source: Store, params: object }) => void)|string
    /**
     * Fired when a range of events is requested from the [getEvents](https://bryntum.com/products/scheduler/docs#Scheduler/data/mixin/GetEventsMixin#function-getEvents) method.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/data/TaskStore#event-loadDateRange)
     * @param {object} event Event object
     * @param {EventStore} event.source This EventStore
     * @param {object} event.old The old date range
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     * @param {boolean} event.changed `true` if the date range is different from the last time a request was made.
     */
    onLoadDateRange: ((event: { source: EventStore, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date }, changed: boolean }) => void)|string
    /**
     * Fired when loading is beginning. This is not cancelable. Parameters in the event may still be
     * mutated at this stage.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadStart: ((event: { source: Store, params: object }) => void)|string
    /**
     * Fired when a block of records has been moved within this Store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record (DEPRECATED) The first record moved (The [move](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/StoreCRUD#function-move) API now accepts an array of records to move).
     * @param {Model[]} event.records The records moved.
     * @param {number} event.from The index from which the record was removed (applicable only for flat store).
     * @param {number} event.to The index at which the record was inserted (applicable only for flat store).
     * @param {Model} event.newParent The new parent record for the dragged records (applicable only for tree stores)
     * @param {Model[]} event.oldParents The old parent records for the dragged records (applicable only for move operations in tree stores)
     */
    onMove: ((event: { source: Store, record: Model, records: Model[], from: number, to: number, newParent?: Model, oldParents?: Model[] }) => void)|string
    /**
     * Fired after tasks in the tree are outdented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were outdented
     */
    onOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Data in the store has completely changed, such as by a filter, or sort or load operation.
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {boolean} event.batch Flag set to `true` when the refresh is triggered by ending a batch
     * @param {'dataset'|'sort'|'clearchanges'|'filter'|'create'|'update'|'delete'|'group'} event.action Name of action which triggered the change. May be one of the options listed above.
     */
    onRefresh: ((event: { source: Store, batch: boolean, action: 'dataset'|'sort'|'clearchanges'|'filter'|'create'|'update'|'delete'|'group' }) => void)|string
    /**
     * Fired when one or more records are removed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Array of removed records. In case of tree store, if branch is removed, only branch root is returned
     * @param {Model[]} event.allRecords Flat array of all removed records. In case of tree store, if branch is removed, all removed records are returned, not only branch root
     * @param {Model} event.parent If due to a [removeChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-removeChild) call, this is the parent node removed from. Only applicable when removing a single tree node.
     * @param {number} event.index Visible index at which record was removed. In case the record was removed from a collapsed branch, -1 is returned. For tree store, this is only provided when removing a single node.
     * @param {boolean} event.isChild Flag which is set to true if the record was removed from a parent record
     * @param {boolean} event.isCollapse Flag which is set to true if records were removed from the store by collapsing parent
     * @param {boolean} event.isMove Passed as `true` if the remove was part of a move operation within this Store.
     */
    onRemove: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, isChild?: boolean, isCollapse?: boolean, isMove?: boolean }) => void)|string
    /**
     * Fired after removing all records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onRemoveAll: ((event: { source: Store }) => void)|string
    /**
     * Fired when the root node is set
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.oldRoot The old root node.
     * @param {Model} event.rootNode The new root node.
     */
    onRootChange: ((event: { source: Store, oldRoot: Model, rootNode: Model }) => void)|string
    /**
     * Fired after sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Sorted records
     */
    onSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fired when a record is modified
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {object} event.changes Modification data
     */
    onUpdate: ((event: { source: Store, record: Model, changes: object }) => void)|string
}

/**
 * Store that holds the tasks of a TaskBoard. By default configured to use [TaskModel](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/TaskModel) for its
 * records.
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/data/TaskStore)
 */
export class TaskStore extends EventStore {
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Added records. In case of tree store, if branch is added, only branch root is returned
     * @param {Model[]} event.allRecords Flat list of all added records. In case of tree store, if branch is added, all new records are returned, not only branch root
     * @param {Model} event.parent If due to an [appendChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-appendChild) call, this is the parent node added to.
     * @param {number} event.index Insertion point in the store's [Collection](https://bryntum.com/products/taskboard/docs/api/Core/data/Store#config-storage).
     * @param {number} event.oldIndex Not used for tree stores. The index of the first record moved.
     * @param {boolean} event.isChild Flag which is set to true if the records are added to a parent record
     * @param {boolean} event.isExpand Flag which is set to true if records are added to the store by expanding parent
     * @param {object} event.isMove An object keyed by the ids of the records which were moved from another position in the store, or from another parent node in the store. The ids of moved records will be property names with a value `true`.
     */
    onAdd: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, oldIndex?: number, isChild?: boolean, isExpand?: boolean, isMove?: object }) => void)|string
    /**
     * Fired before records are added to this store by the [add](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/StoreCRUD#function-add) or [insert](#Core/data/mixin/StoreCRUD#function-insert). In a tree
     * store, also fired by [appendChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-appendChild) and
     * [insertChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-insertChild). The add or insert may be vetoed by returning `false`
     * from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be added
     * @param {Model} event.parent The parent node when using a tree store
     */
    onBeforeAdd: ((event: { source: Store, records: Model[], parent: Model }) => boolean|void)|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onBeforeCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     * @param {object} event Event object
     * @param {Store|any} event.source The
     * @param {(Model|any)[]} event.records The nodes to indent.
     */
    onBeforeIndent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     * @param {object} event Event object
     * @param {Store|any} event.source This store
     * @param {(Model|any)[]} event.records Nodes to be outdented
     */
    onBeforeOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before records are removed from this store by the [remove](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/StoreCRUD#function-remove) or [removeAll](#Core/data/mixin/StoreCRUD#function-removeAll).
     * Also fired when removing a child record in a tree store using [removeChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-removeChild).
     * The remove may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be removed.
     * @param {Model} event.parent The record from which children are being removed when using a tree store. Only provided when removing a single node.
     * @param {boolean} event.isMove This flag is `true` if the child node is being removed by [appendChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-appendChild) to be moved *within the same tree*.
     * @param {boolean} event.removingAll This flag is `true` if the operation is removing the store's entire data set.
     */
    onBeforeRemove: ((event: { source: Store, records: Model[], parent: Model, isMove: boolean, removingAll: boolean }) => boolean|void)|string
    /**
     * Fired before sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Records to sort
     */
    onBeforeSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/data/TaskStore#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired after committing changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired after applying filters to the store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Collection} event.filters Filters used by this Store
     * @param {Model[]} event.removed The records which were filtered out by the action.
     * @param {Model[]} event.added The records which were filtered back in by the action.
     * @param {Model[]} event.records Filtered records
     */
    onFilter: ((event: { source: Store, filters: Collection, removed: Model[], added: Model[], records: Model[] }) => void)|string
    /**
     * Fired when grouping changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Grouper[]} event.groupers Applied groupers
     * @param {Model[]} event.records Grouped records
     */
    onGroup: ((event: { source: Store, groupers: Grouper[], records: Model[] }) => void)|string
    /**
     * Fired after tasks in the tree are indented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were indented
     */
    onIndent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired when a range of events is requested from the [getEvents](https://bryntum.com/products/scheduler/docs#Scheduler/data/mixin/GetEventsMixin#function-getEvents) method.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/data/TaskStore#event-loadDateRange)
     * @param {object} event Event object
     * @param {EventStore} event.source This EventStore
     * @param {object} event.old The old date range
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     * @param {boolean} event.changed `true` if the date range is different from the last time a request was made.
     */
    onLoadDateRange: ((event: { source: EventStore, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date }, changed: boolean }) => void)|string
    /**
     * Fired after tasks in the tree are outdented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were outdented
     */
    onOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired when one or more records are removed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Array of removed records. In case of tree store, if branch is removed, only branch root is returned
     * @param {Model[]} event.allRecords Flat array of all removed records. In case of tree store, if branch is removed, all removed records are returned, not only branch root
     * @param {Model} event.parent If due to a [removeChild](https://bryntum.com/products/taskboard/docs/api/Core/data/mixin/TreeNode#function-removeChild) call, this is the parent node removed from. Only applicable when removing a single tree node.
     * @param {number} event.index Visible index at which record was removed. In case the record was removed from a collapsed branch, -1 is returned. For tree store, this is only provided when removing a single node.
     * @param {boolean} event.isChild Flag which is set to true if the record was removed from a parent record
     * @param {boolean} event.isCollapse Flag which is set to true if records were removed from the store by collapsing parent
     * @param {boolean} event.isMove Passed as `true` if the remove was part of a move operation within this Store.
     */
    onRemove: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, isChild?: boolean, isCollapse?: boolean, isMove?: boolean }) => void)|string
    /**
     * Fired after removing all records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onRemoveAll: ((event: { source: Store }) => void)|string
    /**
     * Fired after sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Sorted records
     */
    onSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<TaskStoreConfig>} config
     */
    constructor(config?: Partial<TaskStoreConfig>);
}

type TaskBoardFeaturesType = {
    columnDrag: ColumnDrag
    columnHeaderMenu: ColumnHeaderMenu
    columnToolbars: ColumnToolbars
    simpleTaskEdit: SimpleTaskEdit
    swimlaneDrag: SwimlaneDrag
    taskDrag: TaskDrag
    taskDragSelect: TaskDragSelect
    taskEdit: TaskEdit
    taskMenu: TaskMenu
    taskTooltip: TaskTooltip
}

type TaskBoardFeaturesConfigType = {
    columnDrag: string|boolean|Partial<ColumnDragConfig>
    columnHeaderMenu: string|boolean|Partial<ColumnHeaderMenuConfig>
    columnToolbars: string|boolean|Partial<ColumnToolbarsConfig>
    simpleTaskEdit: string|boolean|Partial<SimpleTaskEditConfig>
    swimlaneDrag: string|boolean|Partial<SwimlaneDragConfig>
    taskDrag: string|boolean|Partial<TaskDragConfig>
    taskDragSelect: string|boolean|Partial<TaskDragSelectConfig>
    taskEdit: string|boolean|Partial<TaskEditConfig>
    taskMenu: string|boolean|Partial<TaskMenuConfig>
    taskTooltip: string|boolean|Partial<TaskTooltipConfig>
}

/**
 * Type with configuration options for [TaskBoard](https://bryntum.com/products/grid/docs/api/TaskBoard/view/TaskBoard) class.
 */
type TaskBoardConfig = ContainerItemConfig & {
    type: 'taskboard'
    /**
     * The name of the event that should activate a task and trigger editing (if an editing feature is active).
     * Available options are: 'taskClick', 'taskDblClick' or null (disable)
     */
    activateTaskEvent: 'taskClick'|'taskDblClick'|null
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * Inline [assignments](https://bryntum.com/products/scheduler/docs#Scheduler/model/AssignmentModel), will be loaded into an internally created
     * [AssignmentStore](https://bryntum.com/products/scheduler/docs#Scheduler/data/AssignmentStore)  as a part of a [project](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel).
     */
    assignments: AssignmentModel[]|object[]|Partial<AssignmentModelConfig>[]
    /**
     * Set to `true` to auto generate columns when [columns](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardColumns#config-columns) is undefined.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-autoGenerateColumns)
     */
    autoGenerateColumns: boolean
    /**
     * Set to `true` to auto generate swimlanes when [swimlanes](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardSwimlanes#config-swimlanes) is undefined.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-autoGenerateSwimlanes)
     */
    autoGenerateSwimlanes: boolean
    /**
     * Update assigned [record](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#config-record) automatically on field changes
     */
    autoUpdateRecord: boolean
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/taskboard/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-bbar)
     */
    bbar: (Partial<ContainerItemConfig>|string)[]|Partial<ToolbarConfig>
    /**
     * Custom CSS classes to add to the panel's body element.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-bodyCls)
     */
    bodyCls: string|object
    /**
     * Items to add to each card's body.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-bodyItems)
     */
    bodyItems: Record<string, TaskItemOptions>
    /**
     * Defines responsive breakpoints, based on max-width or max-height.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-breakpoints)
     * @param {object} width Max-width breakpoints, with keys as numerical widths (or '*' for larger widths than the largest defined one) and the value as a [breakpoint definition](https://bryntum.com/products/taskboard/docs/api/Core/widget/mixin/Responsive#typedef-Breakpoint)
     * @param {object} height Max-height breakpoints, with keys as numerical heights (or '*' for larger widths than the largest defined one) and the value as a [breakpoint definition](https://bryntum.com/products/taskboard/docs/api/Core/widget/mixin/Responsive#typedef-Breakpoint)
     * @deprecated 5.0 Use [responsive](https://bryntum.com/products/taskboard/docs/api/Core/widget/mixin/Responsive#config-responsive) instead.
     */
    breakpoints: object
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * An array of [CardSize](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/ResponsiveCards#typedef-CardSize) objects to use as responsive levels based on card widths.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-cardSizes)
     */
    cardSizes: CardSize
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-cls)
     */
    cls: string|object
    /**
     * Specify `true` to hide the column title instead of rotating it on collapse.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-collapseTitle)
     */
    collapseTitle: boolean
    /**
     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is
     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel#config-collapsible).
     */
    collapsed: boolean
    /**
     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel#config-collapsed).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-collapsible)
     */
    collapsible: boolean|Partial<PanelCollapserConfig>|Partial<PanelCollapserOverlayConfig>
    /**
     * Field on a task record used to determine which column the task belongs to.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-columnField)
     */
    columnField: string
    /**
     * Store containing the TaskBoard columns. A tasks [columnField](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardColumns#config-columnField) is matched against the `id` of a
     * column to determine in which column it is displayed.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-columns)
     */
    columns: ColumnModel[]|Partial<ColumnModelConfig>[]|string[]|Store|string|Partial<StoreConfig>
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Initial CSS variables to set.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-css)
     */
    css: object
    /**
     * CSS variable prefix, appended to the keys used in [css](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-css).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-cssVarPrefix)
     */
    cssVarPrefix: string
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * A [query](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-defaultFocus)
     * @param {Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus: (widget: Widget) => boolean
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults: object
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * Whether to draw cards on scroll, or only when scrolling ends.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-drawOnScroll)
     */
    drawOnScroll: boolean
    /**
     * An object containing Feature configuration objects (or `true` if no configuration is required)
     * keyed by the Feature class name in all lowercase.
     */
    features: Partial<TaskBoardFeaturesConfigType>
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,
     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-footer)
     */
    footer: {
        dock?: 'top'|'right'|'bottom'|'left'|'start'|'end'
        html?: string
        cls?: string
    }|string
    /**
     * Items to add to each card's footer.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-footerItems)
     */
    footerItems: Record<string, TaskItemOptions>
    /**
     * The function is called for each task as part of the render loop, and is expected to return the height in
     * pixels for the task. Using this function is only recommended when using partial virtualized rendering, see
     * the [virtualize](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardVirtualization#config-virtualize) setting.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-getTaskHeight)
     * @param {TaskModel} taskRecord The task record
     * @returns {number} The height of the task in pixels
     */
    getTaskHeight: (taskRecord: TaskModel) => number
    /**
     * A config [object](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-header)
     */
    header: string|boolean|PanelHeader
    /**
     * Items to add to each card's header.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-headerItems)
     */
    headerItems: Record<string, TaskItemOptions>
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-hideWhenEmpty)
     */
    hideWhenEmpty: boolean
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * A template method (empty by default) allowing you to control if a task can be selected or not.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-isTaskSelectable)
     * @param {TaskModel} taskRecord The task record
     * @returns {boolean} `true` if the task can be selected, otherwise `false`
     */
    isTaskSelectable: (taskRecord: TaskModel) => boolean
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls: string
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-items)
     */
    items: Record<string, Partial<ContainerItemConfig>|Partial<MenuItemConfig>|boolean|null>|(Partial<ContainerItemConfig>|Partial<MenuItemConfig>|Widget)[]
    /**
     * See [Keyboard shortcuts](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#keyboard-shortcuts) for details
     */
    keyMap: Record<string, string>
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-layout)
     */
    layout: string|Partial<ContainerLayoutConfig>
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-layoutStyle)
     */
    layoutStyle: object
    /**
     * An array of [child item](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-lazyItems)
     */
    lazyItems: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-listeners)
     */
    listeners: object
    /**
     * A [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) config object, or a message to be shown when a store is performing a remote
     * operation, or Crud Manager is loading data from the sever. Set to `null` to disable default load mask.
     */
    loadMask: string|Partial<MaskConfig>|null
    /**
     * A [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) config object to adjust the [maskDefaults](#Core/widget/Widget#config-maskDefaults)
     * when data is loading. The message and optional configuration from the
     * [loadMask](https://bryntum.com/products/taskboard/docs/api/Core/mixin/LoadMaskable#config-loadMask) config take priority over these options, just as they do
     * for `maskDefaults`, respectively.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-loadMaskDefaults)
     */
    loadMaskDefaults: Partial<MaskConfig>
    /**
     * A [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) config object to adjust the [maskDefaults](#Core/widget/Widget#config-maskDefaults)
     * when an error occurs loading data.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-loadMaskError)
     */
    loadMaskError: Partial<MaskConfig>|Mask|boolean
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * An object containing named config objects which may be referenced by name in any [items](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#config-items)
     * object. For example, a specialized [Menu](https://bryntum.com/products/taskboard/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-namedItems)
     */
    namedItems: Record<string, Partial<ContainerItemConfig>>
    /**
     * Default values to apply to task records created by task boards features (such as the column header menu and
     * the column toolbar)
     */
    newTaskDefaults: Partial<TaskModelConfig>
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-owner)
     */
    owner: Widget
    /**
     * Specify plugins (an array of classes) in config
     */
    plugins: Function[]
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * A function called on each render before adding items to a tasks card, allowing runtime manipulation of them.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-processItems)
     * @param {object} context
     * @param {TaskItemOptions>} context.headerItems Item config objects for the task header, keyed by ref
     * @param {TaskItemOptions>} context.bodyItems Item config objects for the task body, keyed by ref
     * @param {TaskItemOptions>} context.footerItems Item config objects for the task footer, keyed by ref
     * @param {TaskModel} context.taskRecord Record representing task to be rendered
     * @returns {boolean|void} Returning `false` from this function prevents the menu being shown
     */
    processItems: (context: { headerItems: Record<string, TaskItemOptions>, bodyItems: Record<string, TaskItemOptions>, footerItems: Record<string, TaskItemOptions>, taskRecord: TaskModel }) => boolean|void
    /**
     * A [project config object](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel#configs) or an instance that holds all stores and
     * data used by the TaskBoard.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-project)
     */
    project: ProjectModel|Partial<ProjectModelConfig>
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-readOnly)
     */
    readOnly: boolean
    /**
     * [Record](https://bryntum.com/products/taskboard/docs/api/Core/data/Model) whose values will be used to populate fields in the container.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-record)
     */
    record: Model
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-ref)
     */
    ref: string
    /**
     * Path to load resource images from. Used by the for example the resource picker in the task editor and by the
     * ResourceAvatars task item. Set this to display miniature images for each resource using their `image` field.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-resourceImagePath)
     */
    resourceImagePath: string
    /**
     * Inline [resources](https://bryntum.com/products/scheduler/docs#Scheduler/model/ResourceModel), will be loaded into an internally created
     * [ResourceStore](https://bryntum.com/products/scheduler/docs#Scheduler/data/ResourceStore) as a part of a [project](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel).
     */
    resources: ResourceModel[]|object[]|Partial<ResourceModelConfig>[]
    /**
     * Specifies the various responsive state objects keyed by their name. Each key (except `'*'`, see below) in
     * this object is a state name (see [responsiveState](https://bryntum.com/products/taskboard/docs/api/Core/widget/mixin/Responsive#config-responsiveState)) and its corresponding value is the
     * associated [ResponsiveState](https://bryntum.com/products/taskboard/docs/api/Core/widget/mixin/Responsive#typedef-ResponsiveState) object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-responsive)
     */
    responsive: object
    /**
     * Set to `true` to mark this instance as the default [responsiveTarget](https://bryntum.com/products/taskboard/docs/api/Core/widget/mixin/Responsive#config-responsiveTarget) for descendants that do
     * not specify an explicit [responsiveTarget](https://bryntum.com/products/taskboard/docs/api/Core/widget/mixin/Responsive#config-responsiveTarget) of their own.
     */
    responsiveRoot: boolean
    /**
     * The name of the active state of the [responsive](https://bryntum.com/products/taskboard/docs/api/Core/widget/mixin/Responsive#config-responsive) config. This is assigned internally
     * and should not be assigned directly.
     */
    responsiveState: string
    /**
     * The widget whose size and other properties drive this object's responsive behavior. If this config is not
     * specified, the closest ancestor that specified [responsiveRoot=true](https://bryntum.com/products/taskboard/docs/api/Core/widget/mixin/Responsive#config-responsiveRoot) will be
     * used. If there is no such ancestor, then the instance using this mixin is used.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-responsiveTarget)
     */
    responsiveTarget: string|Widget
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Configuration values for the [ScrollManager](https://bryntum.com/products/taskboard/docs/api/Core/util/ScrollManager) class. It is used to manage column/body
     * scrolling during task, column or swimlane drag.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-scrollManager)
     */
    scrollManager: Partial<ScrollManagerConfig>
    /**
     * Default scroll options, see the options for [scrollIntoView](https://bryntum.com/products/taskboard/docs/api/Core/helper/util/Scroller#function-scrollIntoView)
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-scrollOptions)
     */
    scrollOptions: BryntumScrollOptions
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * Configure with `true` to change the default behaviour of keyboard navigation from moving focus to selecting
     * tasks:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-selectOnNavigation)
     */
    selectOnNavigation: boolean|string
    /**
     * Selected tasks.
     */
    selectedTasks: TaskModel[]
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Show an icon to expand/collapse columns and swimlanes in their headers.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-showCollapseInHeader)
     */
    showCollapseInHeader: boolean
    /**
     * By default, a tooltip showing `Expand XX`/`Collapse XX` is shown when hovering the expand/collapse icon for
     * a column or swimlane. To disable the tooltip, set this to `false`.
     */
    showCollapseTooltip: boolean
    /**
     * Show task count for a column in its header, appended after the title
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-showCountInHeader)
     */
    showCountInHeader: boolean
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/taskboard/docs/api/Core/mixin/State#config-stateProvider). If this config is
     * not assigned, and [stateful](https://bryntum.com/products/taskboard/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)
     * (if explicitly specified) will be used as the `stateId`.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-stateId)
     */
    stateId: string
    /**
     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/taskboard/docs/api/Core/mixin/State#property-state). By default, `state`
     * will be saved using the [default state provider](https://bryntum.com/products/taskboard/docs/api/Core/state/StateProvider#property-instance-static).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-stateProvider)
     */
    stateProvider: StateProvider
    /**
     * This value can be one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-stateful)
     */
    stateful: boolean|object|string[]
    /**
     * The events that, when fired by this component, should trigger it to save its state by calling
     * [saveState](https://bryntum.com/products/taskboard/docs/api/Core/mixin/State#function-saveState).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-statefulEvents)
     */
    statefulEvents: object|string[]
    /**
     * Makes column and swimlane headers sticky
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-stickyHeaders)
     */
    stickyHeaders: boolean
    /**
     * Setting this will cause cards to expand to share the available width if there are fewer than
     * [tasksPerRow](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-tasksPerRow).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-stretchCards)
     */
    stretchCards: boolean
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping: boolean
    /**
     * An object containing widgets keyed by name. By default (when no `type` is given), strips are
     * [toolbars](https://bryntum.com/products/taskboard/docs/api/Core/widget/Toolbar). If the value assigned to a strip is an array, it is converted to
     * the toolbar's [items](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#config-items).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-strips)
     */
    strips: Record<string, Partial<ContainerItemConfig>>
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * Field on a task record used to determine which swimlane the task belongs to.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-swimlaneField)
     */
    swimlaneField: string
    /**
     * An empty function by default, but provided so that you can override it. This function is called each time
     * a swimlane is rendered into the task board. It allows you to manipulate the DOM config object used for the
     * swimlane before it is synced to DOM, thus giving you control over styling and contents.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-swimlaneRenderer)
     * @param {object} detail An object containing the information needed to render a swimlane.
     * @param {SwimlaneModel} detail.swimlaneRecord The swimlane.
     * @param {DomConfig} detail.swimlaneConfig DOM config object for the swimlane
     * @returns {void}
     */
    swimlaneRenderer: (detail: { swimlaneRecord: SwimlaneModel, swimlaneConfig: DomConfig }) => void
    /**
     * Store containing the TaskBoard swimlanes. A tasks [swimlaneField](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardSwimlanes#config-swimlaneField) is matched against the `id`
     * of a swimlane to determine in which swimlane it is displayed.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-swimlanes)
     */
    swimlanes: SwimlaneModel[]|Partial<SwimlaneModelConfig>[]|Store|string|Partial<StoreConfig>
    /**
     * A [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) config object, or a message to be shown when Crud Manager
     * is persisting changes on the server. Set to `null` to disable default sync mask.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-syncMask)
     */
    syncMask: string|Partial<MaskConfig>|null
    /**
     * A configuration for the [tab](https://bryntum.com/products/taskboard/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/taskboard/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * An empty function by default, but provided so that you can override it. This function is called each time
     * a task is rendered into the task board. It allows you to manipulate the DOM config object used for the card
     * before it is synced to DOM, thus giving you control over styling and contents.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-taskRenderer)
     * @param {object} detail An object containing the information needed to render a task.
     * @param {TaskModel} detail.taskRecord The task record.
     * @param {ColumnModel} detail.columnRecord The column the task will be displayed in.
     * @param {SwimlaneModel} detail.swimlaneRecord The swimlane the task will be displayed in.
     * @param {DomConfig} detail.cardConfig DOM config object for the cards element
     * @returns {void}
     */
    taskRenderer: (detail: { taskRecord: TaskModel, columnRecord: ColumnModel, swimlaneRecord: SwimlaneModel, cardConfig: DomConfig }) => void
    /**
     * Allows sorting tasks in the UI independent of how they are sorted in the task store.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-taskSorterFn)
     * @param {TaskModel} first The first task to compare
     * @param {TaskModel} second The second task to compare
     * @returns {number} Return `1` if first task is greater than second task, `-1` if the opposite is true or `0` if they are equal
     */
    taskSorterFn: boolean|((first: TaskModel, second: TaskModel) => number)
    /**
     * Inline [tasks](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/TaskModel), will be loaded into an internally created
     * [TaskStore](https://bryntum.com/products/taskboard/docs/api/TaskBoard/store/TaskStore) as a part of a [project](#TaskBoard/model/ProjectModel).
     */
    tasks: TaskModel[]|object[]|Partial<TaskModelConfig>[]
    /**
     * Controls how many cards are rendered to a row in each column. Can be controlled on a per column basis by
     * setting [tasksPerRow](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ColumnModel#field-tasksPerRow)
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-tasksPerRow)
     */
    tasksPerRow: number
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/taskboard/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-tbar)
     */
    tbar: (Partial<ContainerItemConfig>|string)[]|Partial<ToolbarConfig>
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * Specify `true` for a container used to show text markup. It will apply the CSS class `b-text-content`
     * which specifies a default max-width that makes long text more readable.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-textContent)
     */
    textContent: boolean
    /**
     * A title to display in the header. Causes creation and docking of a header
     * to the top if no header is configured.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-title)
     */
    title: string
    /**
     * The [tools](https://bryntum.com/products/taskboard/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each
     * property name is the reference by which an instantiated tool may be retrieved from the live
     * `[tools](https://bryntum.com/products/taskboard/docs/api/Core/widget/mixin/Toolable#property-tools)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-tools)
     */
    tools: Record<string, Partial<ToolConfig>>
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * By default, tabbing within a Panel is not contained, ie you can TAB out of the Panel
     * forwards or backwards.
     * Configure this as `true` to disallow tabbing out of the Panel, and make tabbing circular within this Panel.
     */
    trapFocus: boolean
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-ui)
     */
    ui: string|object
    /**
     * Experimental, animate actions that cannot be animated using CSS transitions. Currently includes:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-useDomTransition)
     */
    useDomTransition: boolean
    /**
     * By turning on this setting you enable partial virtualized rendering for the board, which reduces initial
     * rendering time and makes interaction less sluggish when using thousands of tasks. The tradeoff is that
     * scrolling in most cases will be slower.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-virtualize)
     */
    virtualize: boolean
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-y)
     */
    y: number
    /**
     * Triggered when a task is "activated" by pressing `Enter` or double clicking it.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#event-activateTask)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {TaskModel} event.taskRecord Task record
     * @param {MouseEvent} event.event Browser event
     */
    onActivateTask: ((event: { source: TaskBoard, taskRecord: TaskModel, event: MouseEvent }) => void)|string
    /**
     * Fires on the owning TaskBoard before column dragging starts. Return `false` to prevent the action
     * @param {object} event Event object
     * @param {TaskBoard} event.source Owning TaskBoard
     * @param {ColumnModel} event.columnRecord Column to be dragged
     */
    onBeforeColumnDrag: ((event: { source: TaskBoard, columnRecord: ColumnModel }) => boolean|void)|string
    /**
     * Fires on the owning TaskBoard when dropping a column, before the operation completes. Handles async
     * listeners, returning `false` from one will abort the operation
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#event-beforeColumnDrop)
     * @param {object} event Event object
     * @param {TaskBoard} event.source Owning TaskBoard
     * @param {ColumnModel} event.columnRecord Dropped column
     * @param {ColumnModel} event.beforeColumn Dropped before this column
     */
    onBeforeColumnDrop: ((event: { source: TaskBoard, columnRecord: ColumnModel, beforeColumn: ColumnModel }) => Promise<boolean|void>)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/taskboard/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onBeforeResponsiveStateChange: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Container} event.source The container
     * @param {Model} event.record The record
     */
    onBeforeSetRecord: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning TaskBoard before displaying an inline editor. Returning `false` stops the editor from
     * being shown.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#event-beforeSimpleTaskEdit)
     * @param {object} event Event object
     * @param {TaskBoard} event.source The task board
     * @param {SimpleTaskEdit} event.simpleTaskEdit The simpleTaskEdit feature
     * @param {TaskModel} event.taskRecord The record about to be shown in the editor
     * @param {string} event.field Field name being edited
     */
    onBeforeSimpleTaskEdit: ((event: { source: TaskBoard, simpleTaskEdit: SimpleTaskEdit, taskRecord: TaskModel, field: string }) => boolean|void)|string
    /**
     * Fires on the owning TaskBoard before task dragging starts. Return `false` to prevent the action
     * @param {object} event Event object
     * @param {TaskBoard} event.source Owning TaskBoard
     * @param {TaskModel[]} event.taskRecords Tasks to be dragged
     * @param {Event} event.domEvent The mouse event
     */
    onBeforeTaskDrag: ((event: { source: TaskBoard, taskRecords: TaskModel[], domEvent: Event }) => boolean|void)|string
    /**
     * Fires on the owning TaskBoard when tasks are dropped, before the operation completes. Handles async
     * listeners, returning `false` from one will abort the operation
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#event-beforeTaskDrop)
     * @param {object} event Event object
     * @param {TaskBoard} event.source Owning TaskBoard
     * @param {TaskModel[]} event.taskRecords Dropped tasks
     * @param {ColumnModel} event.targetColumn Dropped on this column
     * @param {SwimlaneModel} event.targetSwimlane Dropped in this swimlane (if used)
     * @param {Event} event.domEvent The mouse event
     */
    onBeforeTaskDrop: ((event: { source: TaskBoard, taskRecords: TaskModel[], targetColumn: ColumnModel, targetSwimlane: SwimlaneModel, domEvent: Event }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning TaskBoard before a task is displayed in an editor.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#event-beforeTaskEdit)
     * @param {object} event Event object
     * @param {TaskBoard} event.source The owning TaskBoard
     * @param {TaskModel} event.taskRecord The record about to be shown in the task editor
     */
    onBeforeTaskEdit: ((event: { source: TaskBoard, taskRecord: TaskModel }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning TaskBoard when the editor for a task is available, but before it is populated with data
     * and shown. Allows manipulating fields etc.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#event-beforeTaskEditShow)
     * @param {object} event Event object
     * @param {TaskBoard} event.source The owning TaskBoard
     * @param {TaskModel} event.taskRecord The record about to be shown in the task editor
     * @param {TaskEditor} event.editor The editor
     */
    onBeforeTaskEditShow: ((event: { source: TaskBoard, taskRecord: TaskModel, editor: TaskEditor }) => void)|string
    /**
     * Triggered when one or more tasks are to be removed by a call to `removeTask()`.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#event-beforeTaskRemove)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {TaskModel[]} event.taskRecords Task records to be removed
     */
    onBeforeTaskRemove: ((event: { source: TaskBoard, taskRecords: TaskModel[] }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * This event fires on the owning TaskBoard when an item is selected in the column header menu.
     * @param {object} event Event object
     * @param {TaskBoard} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {ColumnModel} event.columnRecord The column
     */
    onCellMenuItem: ((event: { source: TaskBoard, menu: Menu, item: MenuItem, columnRecord: ColumnModel }) => void)|string
    /**
     * This event fires on the owning TaskBoard after the context menu is shown for a column header.
     * @param {object} event Event object
     * @param {TaskBoard} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {ColumnModel} event.columnRecord The column
     */
    onCellMenuShow: ((event: { source: TaskBoard, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, columnRecord: ColumnModel }) => void)|string
    /**
     * This event fires on the owning TaskBoard when a check item is toggled in the column header menu.
     * @param {object} event Event object
     * @param {TaskBoard} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {ColumnModel} event.columnRecord The column
     * @param {boolean} event.checked Checked or not
     */
    onCellMenuToggleItem: ((event: { source: TaskBoard, menu: Menu, item: MenuItem, columnRecord: ColumnModel, checked: boolean }) => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Panel} event.source This Panel.
     */
    onCollapse: ((event: { source: Panel }) => void)|string
    /**
     * Triggered when a column is collapsed.
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {ColumnModel} event.columnRecord Column record
     */
    onColumnCollapse: ((event: { source: TaskBoard, columnRecord: ColumnModel }) => void)|string
    /**
     * Fires on the owning TaskBoard when a column is dragged, if the drag leads to a change compared to
     * the last columnDrag event.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#event-columnDrag)
     * @param {object} event Event object
     * @param {TaskBoard} event.source Owning TaskBoard
     * @param {ColumnModel} event.columnRecord Column being dragged
     * @param {ColumnModel} event.beforeColumn Insert before this column on drop, `null` if last
     */
    onColumnDrag: ((event: { source: TaskBoard, columnRecord: ColumnModel, beforeColumn: ColumnModel }) => void)|string
    /**
     * Fires on the owning TaskBoard when a drag operation is aborted (invalid drop or aborted using ESC)
     * @param {object} event Event object
     * @param {TaskBoard} event.source Owning TaskBoard
     * @param {ColumnModel} event.columnRecord Dragged column
     */
    onColumnDragAbort: ((event: { source: TaskBoard, columnRecord: ColumnModel }) => void)|string
    /**
     * Fires on the owning TaskBoard when a previously started drag operation ends, no matter the
     * outcome of it (whether valid, invalid or aborted)
     * @param {object} event Event object
     * @param {TaskBoard} event.source Owning TaskBoard
     * @param {ColumnModel} event.columnRecord Affected column
     */
    onColumnDragEnd: ((event: { source: TaskBoard, columnRecord: ColumnModel }) => void)|string
    /**
     * Fires on the owning TaskBoard when column dragging starts
     * @param {object} event Event object
     * @param {TaskBoard} event.source Owning TaskBoard
     * @param {ColumnModel} event.columnRecord Column to be dragged
     */
    onColumnDragStart: ((event: { source: TaskBoard, columnRecord: ColumnModel }) => void)|string
    /**
     * Fires on the owning TaskBoard when a column is successfully dropped (after the drop transition
     * has finished)
     * @param {object} event Event object
     * @param {TaskBoard} event.source Owning TaskBoard
     * @param {ColumnModel} event.columnRecord Dropped column
     * @param {ColumnModel} event.beforeColumn Dropped before this column (`null` if last)
     * @param {SwimlaneModel} event.targetSwimlane Dropped in this swimlane (if used)
     */
    onColumnDrop: ((event: { source: TaskBoard, columnRecord: ColumnModel, beforeColumn: ColumnModel, targetSwimlane: SwimlaneModel }) => void)|string
    /**
     * Triggered when a column is expanded.
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {ColumnModel} event.columnRecord Column record
     */
    onColumnExpand: ((event: { source: TaskBoard, columnRecord: ColumnModel }) => void)|string
    /**
     * This event fires on the owning TaskBoard before the menu is shown for a column header.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/ColumnHeaderMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#event-columnHeaderMenuBeforeShow)
     * @param {object} event Event object
     * @param {TaskBoard} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {ColumnModel} event.columnRecord The column
     */
    onColumnHeaderMenuBeforeShow: ((event: { source: TaskBoard, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, columnRecord: ColumnModel }) => boolean|void)|string
    /**
     * Triggered when the column collapsed state is toggled.
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {ColumnModel} event.columnRecord Column record
     * @param {boolean} event.collapse `true` if the column is being collapsed.
     */
    onColumnToggle: ((event: { source: TaskBoard, columnRecord: ColumnModel, collapse: boolean }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Panel} event.source This Panel.
     */
    onExpand: ((event: { source: Panel }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Triggered when a tasks element is removed.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#event-removeTaskElement)
     * @param {object} event Event object
     * @param {TaskBoard} event.source TaskBoard instance
     * @param {string|number} event.taskId Id of the task (not the record itself since it might be removed)
     * @param {HTMLElement} event.element Tasks element
     */
    onRemoveTaskElement: ((event: { source: TaskBoard, taskId: string|number, element: HTMLElement }) => void)|string
    /**
     * Triggered when a task is rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#event-renderTask)
     * @param {object} event Event object
     * @param {TaskBoard} event.source TaskBoard instance
     * @param {TaskModel} event.taskRecord Task being rendered
     * @param {boolean} event.isRefresh `true` if the element was updated, `false` if it was added
     * @param {HTMLElement} event.element Tasks element
     */
    onRenderTask: ((event: { source: TaskBoard, taskRecord: TaskModel, isRefresh: boolean, element: HTMLElement }) => void)|string
    /**
     * Triggered when all tasks in the task board are rendered
     * @param {object} event Event object
     * @param {TaskBoard} event.source TaskBoard instance
     * @param {TaskModel[]} event.taskRecords Tasks being rendered
     */
    onRenderTasks: ((event: { source: TaskBoard, taskRecords: TaskModel[] }) => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered when a new max-height based breakpoint is applied.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     * @param {Breakpoint} event.breakpoint The applied breakpoint
     * @param {Breakpoint} event.prevBreakpoint The previously applied breakpoint
     */
    onResponsiveHeightChange: ((event: { source: Widget, breakpoint: Breakpoint, prevBreakpoint: Breakpoint }) => void)|string
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/taskboard/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onResponsiveStateChange: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Triggered when a new max-width based breakpoint is applied.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     * @param {Breakpoint} event.breakpoint The applied breakpoint
     * @param {Breakpoint} event.prevBreakpoint The previously applied breakpoint
     */
    onResponsiveWidthChange: ((event: { source: Widget, breakpoint: Breakpoint, prevBreakpoint: Breakpoint }) => void)|string
    /**
     * Triggered when task selection changes.
     * @param {object} event Event object
     * @param {TaskBoard} event.source TaskBoard instance
     * @param {'select'|'deselect'} event.action Either 'select' or 'deselect', depending on operation
     * @param {TaskModel[]} event.selection All currently selected tasks
     * @param {TaskModel[]} event.select Tasks selected by the operation
     * @param {TaskModel[]} event.deselect Tasks deselected by the operation
     */
    onSelectionChange: ((event: { source: TaskBoard, action: 'select'|'deselect', selection: TaskModel[], select: TaskModel[], deselect: TaskModel[] }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
    /**
     * Fires on the owning TaskBoard when inline editing of a field is cancelled (by pressing ESC).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#event-simpleTaskEditCancel)
     * @param {object} event Event object
     * @param {TaskBoard} event.source The task board
     * @param {SimpleTaskEdit} event.simpleTaskEdit The simpleTaskEdit feature
     * @param {TaskModel} event.taskRecord Record that was edited
     * @param {string} event.field Field name being edited
     */
    onSimpleTaskEditCancel: ((event: { source: TaskBoard, simpleTaskEdit: SimpleTaskEdit, taskRecord: TaskModel, field: string }) => boolean|void)|string
    /**
     * Fires on the owning TaskBoard when inline editing of a field has successfully finished.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#event-simpleTaskEditComplete)
     * @param {object} event Event object
     * @param {TaskBoard} event.source The task board
     * @param {SimpleTaskEdit} event.simpleTaskEdit The simpleTaskEdit feature
     * @param {TaskModel} event.taskRecord Record that was edited
     * @param {string} event.field Field name being edited
     */
    onSimpleTaskEditComplete: ((event: { source: TaskBoard, simpleTaskEdit: SimpleTaskEdit, taskRecord: TaskModel, field: string }) => boolean|void)|string
    /**
     * Triggered when a swimlane is collapsed.
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record
     */
    onSwimlaneCollapse: ((event: { source: TaskBoard, swimlaneRecord: SwimlaneModel }) => void)|string
    /**
     * Triggered when a swimlane is expanded.
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record
     */
    onSwimlaneExpand: ((event: { source: TaskBoard, swimlaneRecord: SwimlaneModel }) => void)|string
    /**
     * Triggered when a swimlane header is clicked.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#event-swimlaneHeaderClick)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record
     * @param {MouseEvent} event.event Browser event
     */
    onSwimlaneHeaderClick: ((event: { source: TaskBoard, swimlaneRecord: SwimlaneModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when a swimlane header is right-clicked.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#event-swimlaneHeaderContextMenu)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record
     * @param {MouseEvent} event.event Browser event
     */
    onSwimlaneHeaderContextMenu: ((event: { source: TaskBoard, swimlaneRecord: SwimlaneModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when a swimlane header is double-clicked.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#event-swimlaneHeaderDblClick)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record
     * @param {MouseEvent} event.event Browser event
     */
    onSwimlaneHeaderDblClick: ((event: { source: TaskBoard, swimlaneRecord: SwimlaneModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when the swimlane collapsed state is toggled.
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record
     * @param {boolean} event.collapse `true` if the column is being collapsed.
     */
    onSwimlaneToggle: ((event: { source: TaskBoard, swimlaneRecord: SwimlaneModel, collapse: boolean }) => void)|string
    /**
     * Triggered when a card is clicked.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#event-taskClick)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {TaskModel} event.taskRecord Task record
     * @param {ColumnModel} event.columnRecord Column record for the tasks column
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record for the tasks swimlane (if used)
     * @param {MouseEvent} event.event Browser event
     */
    onTaskClick: ((event: { source: TaskBoard, taskRecord: TaskModel, columnRecord: ColumnModel, swimlaneRecord: SwimlaneModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when a card is double clicked
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#event-taskDblClick)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {TaskModel} event.taskRecord Task record
     * @param {ColumnModel} event.columnRecord Column record for the tasks column
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record for the tasks swimlane (if used)
     * @param {MouseEvent} event.event Browser event
     */
    onTaskDblClick: ((event: { source: TaskBoard, taskRecord: TaskModel, columnRecord: ColumnModel, swimlaneRecord: SwimlaneModel, event: MouseEvent }) => void)|string
    /**
     * Fires on the owning TaskBoard when tasks are dragged, if the drag leads to any changes compared to
     * the last taskDrag event (moved to a new column or changed order within a column).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#event-taskDrag)
     * @param {object} event Event object
     * @param {TaskBoard} event.source Owning TaskBoard
     * @param {TaskModel[]} event.taskRecords Dragged tasks
     * @param {ColumnModel} event.targetColumn Currently over this column
     * @param {SwimlaneModel} event.targetSwimlane Currently over this swimlane (if used)
     * @param {Event} event.domEvent The mouse event
     */
    onTaskDrag: ((event: { source: TaskBoard, taskRecords: TaskModel[], targetColumn: ColumnModel, targetSwimlane: SwimlaneModel, domEvent: Event }) => void)|string
    /**
     * Fires on the owning TaskBoard when a drag operation is aborted (invalid drop or aborted using ESC)
     * @param {object} event Event object
     * @param {TaskBoard} event.source Owning TaskBoard
     * @param {TaskModel[]} event.taskRecords Dragged tasks
     */
    onTaskDragAbort: ((event: { source: TaskBoard, taskRecords: TaskModel[] }) => void)|string
    /**
     * Fires on the owning TaskBoard when a previously started drag operation ends, no matter the
     * outcome of it (whether valid, invalid or aborted)
     * @param {object} event Event object
     * @param {TaskBoard} event.source Owning TaskBoard
     * @param {TaskModel[]} event.taskRecords Affected tasks
     * @param {Event} event.domEvent The mouse event
     */
    onTaskDragEnd: ((event: { source: TaskBoard, taskRecords: TaskModel[], domEvent: Event }) => void)|string
    /**
     * Fires on the owning TaskBoard when task dragging starts
     * @param {object} event Event object
     * @param {TaskBoard} event.source Owning TaskBoard
     * @param {TaskModel[]} event.taskRecords Tasks to be dragged
     * @param {Event} event.domEvent The mouse event
     */
    onTaskDragStart: ((event: { source: TaskBoard, taskRecords: TaskModel[], domEvent: Event }) => void)|string
    /**
     * Fires on the owning TaskBoard when tasks are successfully dropped (after the drop transition has
     * finished)
     * @param {object} event Event object
     * @param {TaskBoard} event.source Owning TaskBoard
     * @param {TaskModel[]} event.taskRecords Dropped tasks
     * @param {ColumnModel} event.targetColumn Dropped on this column
     * @param {SwimlaneModel} event.targetSwimlane Dropped in this swimlane (if used)
     * @param {Event} event.domEvent The mouse event
     */
    onTaskDrop: ((event: { source: TaskBoard, taskRecords: TaskModel[], targetColumn: ColumnModel, targetSwimlane: SwimlaneModel, domEvent: Event }) => void)|string
    /**
     * This event fires on the owning TaskBoard before the context menu is shown for a task.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#event-taskMenuBeforeShow)
     * @param {object} event Event object
     * @param {TaskBoard} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {TaskModel} event.taskRecord The task
     */
    onTaskMenuBeforeShow: ((event: { source: TaskBoard, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, taskRecord: TaskModel }) => boolean|void)|string
    /**
     * This event fires on the owning TaskBoard when an item is selected in the task context menu.
     * @param {object} event Event object
     * @param {TaskBoard} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {TaskModel} event.taskRecord The task
     */
    onTaskMenuItem: ((event: { source: TaskBoard, menu: Menu, item: MenuItem, taskRecord: TaskModel }) => void)|string
    /**
     * This event fires on the owning TaskBoard after the context menu is shown for a task.
     * @param {object} event Event object
     * @param {TaskBoard} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {TaskModel} event.taskRecord The task
     */
    onTaskMenuShow: ((event: { source: TaskBoard, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, taskRecord: TaskModel }) => void)|string
    /**
     * This event fires on the owning TaskBoard when a check item is toggled in the task context menu.
     * @param {object} event Event object
     * @param {TaskBoard} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {TaskModel} event.taskRecord The task
     * @param {boolean} event.checked Checked or not
     */
    onTaskMenuToggleItem: ((event: { source: TaskBoard, menu: Menu, item: MenuItem, taskRecord: TaskModel, checked: boolean }) => void)|string
    /**
     * Triggered when the mouse enters a card
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#event-taskMouseEnter)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {TaskModel} event.taskRecord Task record
     * @param {ColumnModel} event.columnRecord Column record for the tasks column
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record for the tasks swimlane (if used)
     * @param {MouseEvent} event.event Browser event
     */
    onTaskMouseEnter: ((event: { source: TaskBoard, taskRecord: TaskModel, columnRecord: ColumnModel, swimlaneRecord: SwimlaneModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when the mouse leaves a card
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#event-taskMouseLeave)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {TaskModel} event.taskRecord Task record
     * @param {ColumnModel} event.columnRecord Column record for the tasks column
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record for the tasks swimlane (if used)
     * @param {MouseEvent} event.event Browser event
     */
    onTaskMouseLeave: ((event: { source: TaskBoard, taskRecord: TaskModel, columnRecord: ColumnModel, swimlaneRecord: SwimlaneModel, event: MouseEvent }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Tool} event.source This Panel.
     * @param {Tool} event.tool The tool which is being clicked.
     */
    onToolClick: ((event: { source: Tool, tool: Tool }) => void)|string
}

/**
 * A kanban board widget that allows you to visualize and mange tasks.
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard)
 */
export class TaskBoard extends TaskBoardBase {
    /**
     * An object containing Features
     */
    features: TaskBoardFeaturesType
    /**
     * Triggered when a task is "activated" by pressing `Enter` or double clicking it.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#event-activateTask)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {TaskModel} event.taskRecord Task record
     * @param {MouseEvent} event.event Browser event
     */
    onActivateTask: ((event: { source: TaskBoard, taskRecord: TaskModel, event: MouseEvent }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/taskboard/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onBeforeResponsiveStateChange: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Triggered when one or more tasks are to be removed by a call to `removeTask()`.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#event-beforeTaskRemove)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {TaskModel[]} event.taskRecords Task records to be removed
     */
    onBeforeTaskRemove: ((event: { source: TaskBoard, taskRecords: TaskModel[] }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Triggered when a column is collapsed.
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {ColumnModel} event.columnRecord Column record
     */
    onColumnCollapse: ((event: { source: TaskBoard, columnRecord: ColumnModel }) => void)|string
    /**
     * Triggered when a column is expanded.
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {ColumnModel} event.columnRecord Column record
     */
    onColumnExpand: ((event: { source: TaskBoard, columnRecord: ColumnModel }) => void)|string
    /**
     * Triggered when the column collapsed state is toggled.
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {ColumnModel} event.columnRecord Column record
     * @param {boolean} event.collapse `true` if the column is being collapsed.
     */
    onColumnToggle: ((event: { source: TaskBoard, columnRecord: ColumnModel, collapse: boolean }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered when a tasks element is removed.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#event-removeTaskElement)
     * @param {object} event Event object
     * @param {TaskBoard} event.source TaskBoard instance
     * @param {string|number} event.taskId Id of the task (not the record itself since it might be removed)
     * @param {HTMLElement} event.element Tasks element
     */
    onRemoveTaskElement: ((event: { source: TaskBoard, taskId: string|number, element: HTMLElement }) => void)|string
    /**
     * Triggered when a task is rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#event-renderTask)
     * @param {object} event Event object
     * @param {TaskBoard} event.source TaskBoard instance
     * @param {TaskModel} event.taskRecord Task being rendered
     * @param {boolean} event.isRefresh `true` if the element was updated, `false` if it was added
     * @param {HTMLElement} event.element Tasks element
     */
    onRenderTask: ((event: { source: TaskBoard, taskRecord: TaskModel, isRefresh: boolean, element: HTMLElement }) => void)|string
    /**
     * Triggered when all tasks in the task board are rendered
     * @param {object} event Event object
     * @param {TaskBoard} event.source TaskBoard instance
     * @param {TaskModel[]} event.taskRecords Tasks being rendered
     */
    onRenderTasks: ((event: { source: TaskBoard, taskRecords: TaskModel[] }) => void)|string
    /**
     * Triggered when a new max-height based breakpoint is applied.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     * @param {Breakpoint} event.breakpoint The applied breakpoint
     * @param {Breakpoint} event.prevBreakpoint The previously applied breakpoint
     */
    onResponsiveHeightChange: ((event: { source: Widget, breakpoint: Breakpoint, prevBreakpoint: Breakpoint }) => void)|string
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/taskboard/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onResponsiveStateChange: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Triggered when a new max-width based breakpoint is applied.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     * @param {Breakpoint} event.breakpoint The applied breakpoint
     * @param {Breakpoint} event.prevBreakpoint The previously applied breakpoint
     */
    onResponsiveWidthChange: ((event: { source: Widget, breakpoint: Breakpoint, prevBreakpoint: Breakpoint }) => void)|string
    /**
     * Triggered when task selection changes.
     * @param {object} event Event object
     * @param {TaskBoard} event.source TaskBoard instance
     * @param {'select'|'deselect'} event.action Either 'select' or 'deselect', depending on operation
     * @param {TaskModel[]} event.selection All currently selected tasks
     * @param {TaskModel[]} event.select Tasks selected by the operation
     * @param {TaskModel[]} event.deselect Tasks deselected by the operation
     */
    onSelectionChange: ((event: { source: TaskBoard, action: 'select'|'deselect', selection: TaskModel[], select: TaskModel[], deselect: TaskModel[] }) => void)|string
    /**
     * Triggered when a swimlane is collapsed.
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record
     */
    onSwimlaneCollapse: ((event: { source: TaskBoard, swimlaneRecord: SwimlaneModel }) => void)|string
    /**
     * Triggered when a swimlane is expanded.
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record
     */
    onSwimlaneExpand: ((event: { source: TaskBoard, swimlaneRecord: SwimlaneModel }) => void)|string
    /**
     * Triggered when a swimlane header is clicked.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#event-swimlaneHeaderClick)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record
     * @param {MouseEvent} event.event Browser event
     */
    onSwimlaneHeaderClick: ((event: { source: TaskBoard, swimlaneRecord: SwimlaneModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when a swimlane header is right-clicked.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#event-swimlaneHeaderContextMenu)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record
     * @param {MouseEvent} event.event Browser event
     */
    onSwimlaneHeaderContextMenu: ((event: { source: TaskBoard, swimlaneRecord: SwimlaneModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when a swimlane header is double-clicked.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#event-swimlaneHeaderDblClick)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record
     * @param {MouseEvent} event.event Browser event
     */
    onSwimlaneHeaderDblClick: ((event: { source: TaskBoard, swimlaneRecord: SwimlaneModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when the swimlane collapsed state is toggled.
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record
     * @param {boolean} event.collapse `true` if the column is being collapsed.
     */
    onSwimlaneToggle: ((event: { source: TaskBoard, swimlaneRecord: SwimlaneModel, collapse: boolean }) => void)|string
    /**
     * Triggered when a card is clicked.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#event-taskClick)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {TaskModel} event.taskRecord Task record
     * @param {ColumnModel} event.columnRecord Column record for the tasks column
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record for the tasks swimlane (if used)
     * @param {MouseEvent} event.event Browser event
     */
    onTaskClick: ((event: { source: TaskBoard, taskRecord: TaskModel, columnRecord: ColumnModel, swimlaneRecord: SwimlaneModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when a card is double clicked
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#event-taskDblClick)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {TaskModel} event.taskRecord Task record
     * @param {ColumnModel} event.columnRecord Column record for the tasks column
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record for the tasks swimlane (if used)
     * @param {MouseEvent} event.event Browser event
     */
    onTaskDblClick: ((event: { source: TaskBoard, taskRecord: TaskModel, columnRecord: ColumnModel, swimlaneRecord: SwimlaneModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when the mouse enters a card
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#event-taskMouseEnter)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {TaskModel} event.taskRecord Task record
     * @param {ColumnModel} event.columnRecord Column record for the tasks column
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record for the tasks swimlane (if used)
     * @param {MouseEvent} event.event Browser event
     */
    onTaskMouseEnter: ((event: { source: TaskBoard, taskRecord: TaskModel, columnRecord: ColumnModel, swimlaneRecord: SwimlaneModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when the mouse leaves a card
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#event-taskMouseLeave)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {TaskModel} event.taskRecord Task record
     * @param {ColumnModel} event.columnRecord Column record for the tasks column
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record for the tasks swimlane (if used)
     * @param {MouseEvent} event.event Browser event
     */
    onTaskMouseLeave: ((event: { source: TaskBoard, taskRecord: TaskModel, columnRecord: ColumnModel, swimlaneRecord: SwimlaneModel, event: MouseEvent }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<TaskBoardConfig>} config
     */
    constructor(config?: Partial<TaskBoardConfig>);
}

type TaskBoardBaseFeaturesType = {
    columnDrag: ColumnDrag
    columnHeaderMenu: ColumnHeaderMenu
    columnToolbars: ColumnToolbars
    simpleTaskEdit: SimpleTaskEdit
    swimlaneDrag: SwimlaneDrag
    taskDrag: TaskDrag
    taskDragSelect: TaskDragSelect
    taskEdit: TaskEdit
    taskMenu: TaskMenu
    taskTooltip: TaskTooltip
}

type TaskBoardBaseFeaturesConfigType = {
    columnDrag: string|boolean|Partial<ColumnDragConfig>
    columnHeaderMenu: string|boolean|Partial<ColumnHeaderMenuConfig>
    columnToolbars: string|boolean|Partial<ColumnToolbarsConfig>
    simpleTaskEdit: string|boolean|Partial<SimpleTaskEditConfig>
    swimlaneDrag: string|boolean|Partial<SwimlaneDragConfig>
    taskDrag: string|boolean|Partial<TaskDragConfig>
    taskDragSelect: string|boolean|Partial<TaskDragSelectConfig>
    taskEdit: string|boolean|Partial<TaskEditConfig>
    taskMenu: string|boolean|Partial<TaskMenuConfig>
    taskTooltip: string|boolean|Partial<TaskTooltipConfig>
}

/**
 * Type with configuration options for [TaskBoardBase](https://bryntum.com/products/grid/docs/api/TaskBoard/view/TaskBoardBase) class.
 */
type TaskBoardBaseConfig = ContainerItemConfig & {
    /**
     * The name of the event that should activate a task and trigger editing (if an editing feature is active).
     * Available options are: 'taskClick', 'taskDblClick' or null (disable)
     */
    activateTaskEvent: 'taskClick'|'taskDblClick'|null
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * Inline [assignments](https://bryntum.com/products/scheduler/docs#Scheduler/model/AssignmentModel), will be loaded into an internally created
     * [AssignmentStore](https://bryntum.com/products/scheduler/docs#Scheduler/data/AssignmentStore)  as a part of a [project](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel).
     */
    assignments: AssignmentModel[]|object[]|Partial<AssignmentModelConfig>[]
    /**
     * Set to `true` to auto generate columns when [columns](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardColumns#config-columns) is undefined.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-autoGenerateColumns)
     */
    autoGenerateColumns: boolean
    /**
     * Set to `true` to auto generate swimlanes when [swimlanes](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardSwimlanes#config-swimlanes) is undefined.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-autoGenerateSwimlanes)
     */
    autoGenerateSwimlanes: boolean
    /**
     * Update assigned [record](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#config-record) automatically on field changes
     */
    autoUpdateRecord: boolean
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/taskboard/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-bbar)
     */
    bbar: (Partial<ContainerItemConfig>|string)[]|Partial<ToolbarConfig>
    /**
     * Custom CSS classes to add to the panel's body element.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-bodyCls)
     */
    bodyCls: string|object
    /**
     * Items to add to each card's body.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-bodyItems)
     */
    bodyItems: Record<string, TaskItemOptions>
    /**
     * Defines responsive breakpoints, based on max-width or max-height.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-breakpoints)
     * @param {object} width Max-width breakpoints, with keys as numerical widths (or '*' for larger widths than the largest defined one) and the value as a [breakpoint definition](https://bryntum.com/products/taskboard/docs/api/Core/widget/mixin/Responsive#typedef-Breakpoint)
     * @param {object} height Max-height breakpoints, with keys as numerical heights (or '*' for larger widths than the largest defined one) and the value as a [breakpoint definition](https://bryntum.com/products/taskboard/docs/api/Core/widget/mixin/Responsive#typedef-Breakpoint)
     * @deprecated 5.0 Use [responsive](https://bryntum.com/products/taskboard/docs/api/Core/widget/mixin/Responsive#config-responsive) instead.
     */
    breakpoints: object
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * An array of [CardSize](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/ResponsiveCards#typedef-CardSize) objects to use as responsive levels based on card widths.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-cardSizes)
     */
    cardSizes: CardSize
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-cls)
     */
    cls: string|object
    /**
     * Specify `true` to hide the column title instead of rotating it on collapse.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-collapseTitle)
     */
    collapseTitle: boolean
    /**
     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is
     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel#config-collapsible).
     */
    collapsed: boolean
    /**
     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel#config-collapsed).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-collapsible)
     */
    collapsible: boolean|Partial<PanelCollapserConfig>|Partial<PanelCollapserOverlayConfig>
    /**
     * Field on a task record used to determine which column the task belongs to.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-columnField)
     */
    columnField: string
    /**
     * Store containing the TaskBoard columns. A tasks [columnField](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardColumns#config-columnField) is matched against the `id` of a
     * column to determine in which column it is displayed.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-columns)
     */
    columns: ColumnModel[]|Partial<ColumnModelConfig>[]|string[]|Store|string|Partial<StoreConfig>
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Initial CSS variables to set.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-css)
     */
    css: object
    /**
     * CSS variable prefix, appended to the keys used in [css](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-css).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-cssVarPrefix)
     */
    cssVarPrefix: string
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * A [query](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-defaultFocus)
     * @param {Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus: (widget: Widget) => boolean
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults: object
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * Whether to draw cards on scroll, or only when scrolling ends.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-drawOnScroll)
     */
    drawOnScroll: boolean
    /**
     * An object containing Feature configuration objects (or `true` if no configuration is required)
     * keyed by the Feature class name in all lowercase.
     */
    features: Partial<TaskBoardBaseFeaturesConfigType>
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,
     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-footer)
     */
    footer: {
        dock?: 'top'|'right'|'bottom'|'left'|'start'|'end'
        html?: string
        cls?: string
    }|string
    /**
     * Items to add to each card's footer.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-footerItems)
     */
    footerItems: Record<string, TaskItemOptions>
    /**
     * The function is called for each task as part of the render loop, and is expected to return the height in
     * pixels for the task. Using this function is only recommended when using partial virtualized rendering, see
     * the [virtualize](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardVirtualization#config-virtualize) setting.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-getTaskHeight)
     * @param {TaskModel} taskRecord The task record
     * @returns {number} The height of the task in pixels
     */
    getTaskHeight: (taskRecord: TaskModel) => number
    /**
     * A config [object](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-header)
     */
    header: string|boolean|PanelHeader
    /**
     * Items to add to each card's header.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-headerItems)
     */
    headerItems: Record<string, TaskItemOptions>
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-hideWhenEmpty)
     */
    hideWhenEmpty: boolean
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * A template method (empty by default) allowing you to control if a task can be selected or not.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-isTaskSelectable)
     * @param {TaskModel} taskRecord The task record
     * @returns {boolean} `true` if the task can be selected, otherwise `false`
     */
    isTaskSelectable: (taskRecord: TaskModel) => boolean
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls: string
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-items)
     */
    items: Record<string, Partial<ContainerItemConfig>|Partial<MenuItemConfig>|boolean|null>|(Partial<ContainerItemConfig>|Partial<MenuItemConfig>|Widget)[]
    /**
     * See [Keyboard shortcuts](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#keyboard-shortcuts) for details
     */
    keyMap: Record<string, string>
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-layout)
     */
    layout: string|Partial<ContainerLayoutConfig>
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-layoutStyle)
     */
    layoutStyle: object
    /**
     * An array of [child item](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-lazyItems)
     */
    lazyItems: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-listeners)
     */
    listeners: object
    /**
     * A [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) config object, or a message to be shown when a store is performing a remote
     * operation, or Crud Manager is loading data from the sever. Set to `null` to disable default load mask.
     */
    loadMask: string|Partial<MaskConfig>|null
    /**
     * A [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) config object to adjust the [maskDefaults](#Core/widget/Widget#config-maskDefaults)
     * when data is loading. The message and optional configuration from the
     * [loadMask](https://bryntum.com/products/taskboard/docs/api/Core/mixin/LoadMaskable#config-loadMask) config take priority over these options, just as they do
     * for `maskDefaults`, respectively.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-loadMaskDefaults)
     */
    loadMaskDefaults: Partial<MaskConfig>
    /**
     * A [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) config object to adjust the [maskDefaults](#Core/widget/Widget#config-maskDefaults)
     * when an error occurs loading data.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-loadMaskError)
     */
    loadMaskError: Partial<MaskConfig>|Mask|boolean
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * An object containing named config objects which may be referenced by name in any [items](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#config-items)
     * object. For example, a specialized [Menu](https://bryntum.com/products/taskboard/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-namedItems)
     */
    namedItems: Record<string, Partial<ContainerItemConfig>>
    /**
     * Default values to apply to task records created by task boards features (such as the column header menu and
     * the column toolbar)
     */
    newTaskDefaults: Partial<TaskModelConfig>
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-owner)
     */
    owner: Widget
    /**
     * Specify plugins (an array of classes) in config
     */
    plugins: Function[]
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * A function called on each render before adding items to a tasks card, allowing runtime manipulation of them.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-processItems)
     * @param {object} context
     * @param {TaskItemOptions>} context.headerItems Item config objects for the task header, keyed by ref
     * @param {TaskItemOptions>} context.bodyItems Item config objects for the task body, keyed by ref
     * @param {TaskItemOptions>} context.footerItems Item config objects for the task footer, keyed by ref
     * @param {TaskModel} context.taskRecord Record representing task to be rendered
     * @returns {boolean|void} Returning `false` from this function prevents the menu being shown
     */
    processItems: (context: { headerItems: Record<string, TaskItemOptions>, bodyItems: Record<string, TaskItemOptions>, footerItems: Record<string, TaskItemOptions>, taskRecord: TaskModel }) => boolean|void
    /**
     * A [project config object](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel#configs) or an instance that holds all stores and
     * data used by the TaskBoard.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-project)
     */
    project: ProjectModel|Partial<ProjectModelConfig>
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-readOnly)
     */
    readOnly: boolean
    /**
     * [Record](https://bryntum.com/products/taskboard/docs/api/Core/data/Model) whose values will be used to populate fields in the container.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-record)
     */
    record: Model
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-ref)
     */
    ref: string
    /**
     * Path to load resource images from. Used by the for example the resource picker in the task editor and by the
     * ResourceAvatars task item. Set this to display miniature images for each resource using their `image` field.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-resourceImagePath)
     */
    resourceImagePath: string
    /**
     * Inline [resources](https://bryntum.com/products/scheduler/docs#Scheduler/model/ResourceModel), will be loaded into an internally created
     * [ResourceStore](https://bryntum.com/products/scheduler/docs#Scheduler/data/ResourceStore) as a part of a [project](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel).
     */
    resources: ResourceModel[]|object[]|Partial<ResourceModelConfig>[]
    /**
     * Specifies the various responsive state objects keyed by their name. Each key (except `'*'`, see below) in
     * this object is a state name (see [responsiveState](https://bryntum.com/products/taskboard/docs/api/Core/widget/mixin/Responsive#config-responsiveState)) and its corresponding value is the
     * associated [ResponsiveState](https://bryntum.com/products/taskboard/docs/api/Core/widget/mixin/Responsive#typedef-ResponsiveState) object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-responsive)
     */
    responsive: object
    /**
     * Set to `true` to mark this instance as the default [responsiveTarget](https://bryntum.com/products/taskboard/docs/api/Core/widget/mixin/Responsive#config-responsiveTarget) for descendants that do
     * not specify an explicit [responsiveTarget](https://bryntum.com/products/taskboard/docs/api/Core/widget/mixin/Responsive#config-responsiveTarget) of their own.
     */
    responsiveRoot: boolean
    /**
     * The name of the active state of the [responsive](https://bryntum.com/products/taskboard/docs/api/Core/widget/mixin/Responsive#config-responsive) config. This is assigned internally
     * and should not be assigned directly.
     */
    responsiveState: string
    /**
     * The widget whose size and other properties drive this object's responsive behavior. If this config is not
     * specified, the closest ancestor that specified [responsiveRoot=true](https://bryntum.com/products/taskboard/docs/api/Core/widget/mixin/Responsive#config-responsiveRoot) will be
     * used. If there is no such ancestor, then the instance using this mixin is used.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-responsiveTarget)
     */
    responsiveTarget: string|Widget
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Configuration values for the [ScrollManager](https://bryntum.com/products/taskboard/docs/api/Core/util/ScrollManager) class. It is used to manage column/body
     * scrolling during task, column or swimlane drag.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-scrollManager)
     */
    scrollManager: Partial<ScrollManagerConfig>
    /**
     * Default scroll options, see the options for [scrollIntoView](https://bryntum.com/products/taskboard/docs/api/Core/helper/util/Scroller#function-scrollIntoView)
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-scrollOptions)
     */
    scrollOptions: BryntumScrollOptions
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * Configure with `true` to change the default behaviour of keyboard navigation from moving focus to selecting
     * tasks:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-selectOnNavigation)
     */
    selectOnNavigation: boolean|string
    /**
     * Selected tasks.
     */
    selectedTasks: TaskModel[]
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Show an icon to expand/collapse columns and swimlanes in their headers.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-showCollapseInHeader)
     */
    showCollapseInHeader: boolean
    /**
     * By default, a tooltip showing `Expand XX`/`Collapse XX` is shown when hovering the expand/collapse icon for
     * a column or swimlane. To disable the tooltip, set this to `false`.
     */
    showCollapseTooltip: boolean
    /**
     * Show task count for a column in its header, appended after the title
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-showCountInHeader)
     */
    showCountInHeader: boolean
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/taskboard/docs/api/Core/mixin/State#config-stateProvider). If this config is
     * not assigned, and [stateful](https://bryntum.com/products/taskboard/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)
     * (if explicitly specified) will be used as the `stateId`.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-stateId)
     */
    stateId: string
    /**
     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/taskboard/docs/api/Core/mixin/State#property-state). By default, `state`
     * will be saved using the [default state provider](https://bryntum.com/products/taskboard/docs/api/Core/state/StateProvider#property-instance-static).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-stateProvider)
     */
    stateProvider: StateProvider
    /**
     * This value can be one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-stateful)
     */
    stateful: boolean|object|string[]
    /**
     * The events that, when fired by this component, should trigger it to save its state by calling
     * [saveState](https://bryntum.com/products/taskboard/docs/api/Core/mixin/State#function-saveState).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-statefulEvents)
     */
    statefulEvents: object|string[]
    /**
     * Makes column and swimlane headers sticky
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-stickyHeaders)
     */
    stickyHeaders: boolean
    /**
     * Setting this will cause cards to expand to share the available width if there are fewer than
     * [tasksPerRow](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-tasksPerRow).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-stretchCards)
     */
    stretchCards: boolean
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping: boolean
    /**
     * An object containing widgets keyed by name. By default (when no `type` is given), strips are
     * [toolbars](https://bryntum.com/products/taskboard/docs/api/Core/widget/Toolbar). If the value assigned to a strip is an array, it is converted to
     * the toolbar's [items](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#config-items).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-strips)
     */
    strips: Record<string, Partial<ContainerItemConfig>>
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * Field on a task record used to determine which swimlane the task belongs to.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-swimlaneField)
     */
    swimlaneField: string
    /**
     * An empty function by default, but provided so that you can override it. This function is called each time
     * a swimlane is rendered into the task board. It allows you to manipulate the DOM config object used for the
     * swimlane before it is synced to DOM, thus giving you control over styling and contents.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-swimlaneRenderer)
     * @param {object} detail An object containing the information needed to render a swimlane.
     * @param {SwimlaneModel} detail.swimlaneRecord The swimlane.
     * @param {DomConfig} detail.swimlaneConfig DOM config object for the swimlane
     * @returns {void}
     */
    swimlaneRenderer: (detail: { swimlaneRecord: SwimlaneModel, swimlaneConfig: DomConfig }) => void
    /**
     * Store containing the TaskBoard swimlanes. A tasks [swimlaneField](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardSwimlanes#config-swimlaneField) is matched against the `id`
     * of a swimlane to determine in which swimlane it is displayed.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-swimlanes)
     */
    swimlanes: SwimlaneModel[]|Partial<SwimlaneModelConfig>[]|Store|string|Partial<StoreConfig>
    /**
     * A [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) config object, or a message to be shown when Crud Manager
     * is persisting changes on the server. Set to `null` to disable default sync mask.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-syncMask)
     */
    syncMask: string|Partial<MaskConfig>|null
    /**
     * A configuration for the [tab](https://bryntum.com/products/taskboard/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/taskboard/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * An empty function by default, but provided so that you can override it. This function is called each time
     * a task is rendered into the task board. It allows you to manipulate the DOM config object used for the card
     * before it is synced to DOM, thus giving you control over styling and contents.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-taskRenderer)
     * @param {object} detail An object containing the information needed to render a task.
     * @param {TaskModel} detail.taskRecord The task record.
     * @param {ColumnModel} detail.columnRecord The column the task will be displayed in.
     * @param {SwimlaneModel} detail.swimlaneRecord The swimlane the task will be displayed in.
     * @param {DomConfig} detail.cardConfig DOM config object for the cards element
     * @returns {void}
     */
    taskRenderer: (detail: { taskRecord: TaskModel, columnRecord: ColumnModel, swimlaneRecord: SwimlaneModel, cardConfig: DomConfig }) => void
    /**
     * Allows sorting tasks in the UI independent of how they are sorted in the task store.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-taskSorterFn)
     * @param {TaskModel} first The first task to compare
     * @param {TaskModel} second The second task to compare
     * @returns {number} Return `1` if first task is greater than second task, `-1` if the opposite is true or `0` if they are equal
     */
    taskSorterFn: boolean|((first: TaskModel, second: TaskModel) => number)
    /**
     * Inline [tasks](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/TaskModel), will be loaded into an internally created
     * [TaskStore](https://bryntum.com/products/taskboard/docs/api/TaskBoard/store/TaskStore) as a part of a [project](#TaskBoard/model/ProjectModel).
     */
    tasks: TaskModel[]|object[]|Partial<TaskModelConfig>[]
    /**
     * Controls how many cards are rendered to a row in each column. Can be controlled on a per column basis by
     * setting [tasksPerRow](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ColumnModel#field-tasksPerRow)
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-tasksPerRow)
     */
    tasksPerRow: number
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/taskboard/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-tbar)
     */
    tbar: (Partial<ContainerItemConfig>|string)[]|Partial<ToolbarConfig>
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * Specify `true` for a container used to show text markup. It will apply the CSS class `b-text-content`
     * which specifies a default max-width that makes long text more readable.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-textContent)
     */
    textContent: boolean
    /**
     * A title to display in the header. Causes creation and docking of a header
     * to the top if no header is configured.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-title)
     */
    title: string
    /**
     * The [tools](https://bryntum.com/products/taskboard/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each
     * property name is the reference by which an instantiated tool may be retrieved from the live
     * `[tools](https://bryntum.com/products/taskboard/docs/api/Core/widget/mixin/Toolable#property-tools)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-tools)
     */
    tools: Record<string, Partial<ToolConfig>>
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * By default, tabbing within a Panel is not contained, ie you can TAB out of the Panel
     * forwards or backwards.
     * Configure this as `true` to disallow tabbing out of the Panel, and make tabbing circular within this Panel.
     */
    trapFocus: boolean
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-ui)
     */
    ui: string|object
    /**
     * Experimental, animate actions that cannot be animated using CSS transitions. Currently includes:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-useDomTransition)
     */
    useDomTransition: boolean
    /**
     * By turning on this setting you enable partial virtualized rendering for the board, which reduces initial
     * rendering time and makes interaction less sluggish when using thousands of tasks. The tradeoff is that
     * scrolling in most cases will be slower.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-virtualize)
     */
    virtualize: boolean
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-y)
     */
    y: number
    /**
     * Triggered when a task is "activated" by pressing `Enter` or double clicking it.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#event-activateTask)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {TaskModel} event.taskRecord Task record
     * @param {MouseEvent} event.event Browser event
     */
    onActivateTask: ((event: { source: TaskBoard, taskRecord: TaskModel, event: MouseEvent }) => void)|string
    /**
     * Fires on the owning TaskBoard before column dragging starts. Return `false` to prevent the action
     * @param {object} event Event object
     * @param {TaskBoard} event.source Owning TaskBoard
     * @param {ColumnModel} event.columnRecord Column to be dragged
     */
    onBeforeColumnDrag: ((event: { source: TaskBoard, columnRecord: ColumnModel }) => boolean|void)|string
    /**
     * Fires on the owning TaskBoard when dropping a column, before the operation completes. Handles async
     * listeners, returning `false` from one will abort the operation
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#event-beforeColumnDrop)
     * @param {object} event Event object
     * @param {TaskBoard} event.source Owning TaskBoard
     * @param {ColumnModel} event.columnRecord Dropped column
     * @param {ColumnModel} event.beforeColumn Dropped before this column
     */
    onBeforeColumnDrop: ((event: { source: TaskBoard, columnRecord: ColumnModel, beforeColumn: ColumnModel }) => Promise<boolean|void>)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/taskboard/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onBeforeResponsiveStateChange: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Container} event.source The container
     * @param {Model} event.record The record
     */
    onBeforeSetRecord: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning TaskBoard before displaying an inline editor. Returning `false` stops the editor from
     * being shown.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#event-beforeSimpleTaskEdit)
     * @param {object} event Event object
     * @param {TaskBoard} event.source The task board
     * @param {SimpleTaskEdit} event.simpleTaskEdit The simpleTaskEdit feature
     * @param {TaskModel} event.taskRecord The record about to be shown in the editor
     * @param {string} event.field Field name being edited
     */
    onBeforeSimpleTaskEdit: ((event: { source: TaskBoard, simpleTaskEdit: SimpleTaskEdit, taskRecord: TaskModel, field: string }) => boolean|void)|string
    /**
     * Fires on the owning TaskBoard before task dragging starts. Return `false` to prevent the action
     * @param {object} event Event object
     * @param {TaskBoard} event.source Owning TaskBoard
     * @param {TaskModel[]} event.taskRecords Tasks to be dragged
     * @param {Event} event.domEvent The mouse event
     */
    onBeforeTaskDrag: ((event: { source: TaskBoard, taskRecords: TaskModel[], domEvent: Event }) => boolean|void)|string
    /**
     * Fires on the owning TaskBoard when tasks are dropped, before the operation completes. Handles async
     * listeners, returning `false` from one will abort the operation
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#event-beforeTaskDrop)
     * @param {object} event Event object
     * @param {TaskBoard} event.source Owning TaskBoard
     * @param {TaskModel[]} event.taskRecords Dropped tasks
     * @param {ColumnModel} event.targetColumn Dropped on this column
     * @param {SwimlaneModel} event.targetSwimlane Dropped in this swimlane (if used)
     * @param {Event} event.domEvent The mouse event
     */
    onBeforeTaskDrop: ((event: { source: TaskBoard, taskRecords: TaskModel[], targetColumn: ColumnModel, targetSwimlane: SwimlaneModel, domEvent: Event }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning TaskBoard before a task is displayed in an editor.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#event-beforeTaskEdit)
     * @param {object} event Event object
     * @param {TaskBoard} event.source The owning TaskBoard
     * @param {TaskModel} event.taskRecord The record about to be shown in the task editor
     */
    onBeforeTaskEdit: ((event: { source: TaskBoard, taskRecord: TaskModel }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning TaskBoard when the editor for a task is available, but before it is populated with data
     * and shown. Allows manipulating fields etc.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#event-beforeTaskEditShow)
     * @param {object} event Event object
     * @param {TaskBoard} event.source The owning TaskBoard
     * @param {TaskModel} event.taskRecord The record about to be shown in the task editor
     * @param {TaskEditor} event.editor The editor
     */
    onBeforeTaskEditShow: ((event: { source: TaskBoard, taskRecord: TaskModel, editor: TaskEditor }) => void)|string
    /**
     * Triggered when one or more tasks are to be removed by a call to `removeTask()`.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#event-beforeTaskRemove)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {TaskModel[]} event.taskRecords Task records to be removed
     */
    onBeforeTaskRemove: ((event: { source: TaskBoard, taskRecords: TaskModel[] }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * This event fires on the owning TaskBoard when an item is selected in the column header menu.
     * @param {object} event Event object
     * @param {TaskBoard} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {ColumnModel} event.columnRecord The column
     */
    onCellMenuItem: ((event: { source: TaskBoard, menu: Menu, item: MenuItem, columnRecord: ColumnModel }) => void)|string
    /**
     * This event fires on the owning TaskBoard after the context menu is shown for a column header.
     * @param {object} event Event object
     * @param {TaskBoard} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {ColumnModel} event.columnRecord The column
     */
    onCellMenuShow: ((event: { source: TaskBoard, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, columnRecord: ColumnModel }) => void)|string
    /**
     * This event fires on the owning TaskBoard when a check item is toggled in the column header menu.
     * @param {object} event Event object
     * @param {TaskBoard} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {ColumnModel} event.columnRecord The column
     * @param {boolean} event.checked Checked or not
     */
    onCellMenuToggleItem: ((event: { source: TaskBoard, menu: Menu, item: MenuItem, columnRecord: ColumnModel, checked: boolean }) => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Panel} event.source This Panel.
     */
    onCollapse: ((event: { source: Panel }) => void)|string
    /**
     * Triggered when a column is collapsed.
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {ColumnModel} event.columnRecord Column record
     */
    onColumnCollapse: ((event: { source: TaskBoard, columnRecord: ColumnModel }) => void)|string
    /**
     * Fires on the owning TaskBoard when a column is dragged, if the drag leads to a change compared to
     * the last columnDrag event.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#event-columnDrag)
     * @param {object} event Event object
     * @param {TaskBoard} event.source Owning TaskBoard
     * @param {ColumnModel} event.columnRecord Column being dragged
     * @param {ColumnModel} event.beforeColumn Insert before this column on drop, `null` if last
     */
    onColumnDrag: ((event: { source: TaskBoard, columnRecord: ColumnModel, beforeColumn: ColumnModel }) => void)|string
    /**
     * Fires on the owning TaskBoard when a drag operation is aborted (invalid drop or aborted using ESC)
     * @param {object} event Event object
     * @param {TaskBoard} event.source Owning TaskBoard
     * @param {ColumnModel} event.columnRecord Dragged column
     */
    onColumnDragAbort: ((event: { source: TaskBoard, columnRecord: ColumnModel }) => void)|string
    /**
     * Fires on the owning TaskBoard when a previously started drag operation ends, no matter the
     * outcome of it (whether valid, invalid or aborted)
     * @param {object} event Event object
     * @param {TaskBoard} event.source Owning TaskBoard
     * @param {ColumnModel} event.columnRecord Affected column
     */
    onColumnDragEnd: ((event: { source: TaskBoard, columnRecord: ColumnModel }) => void)|string
    /**
     * Fires on the owning TaskBoard when column dragging starts
     * @param {object} event Event object
     * @param {TaskBoard} event.source Owning TaskBoard
     * @param {ColumnModel} event.columnRecord Column to be dragged
     */
    onColumnDragStart: ((event: { source: TaskBoard, columnRecord: ColumnModel }) => void)|string
    /**
     * Fires on the owning TaskBoard when a column is successfully dropped (after the drop transition
     * has finished)
     * @param {object} event Event object
     * @param {TaskBoard} event.source Owning TaskBoard
     * @param {ColumnModel} event.columnRecord Dropped column
     * @param {ColumnModel} event.beforeColumn Dropped before this column (`null` if last)
     * @param {SwimlaneModel} event.targetSwimlane Dropped in this swimlane (if used)
     */
    onColumnDrop: ((event: { source: TaskBoard, columnRecord: ColumnModel, beforeColumn: ColumnModel, targetSwimlane: SwimlaneModel }) => void)|string
    /**
     * Triggered when a column is expanded.
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {ColumnModel} event.columnRecord Column record
     */
    onColumnExpand: ((event: { source: TaskBoard, columnRecord: ColumnModel }) => void)|string
    /**
     * This event fires on the owning TaskBoard before the menu is shown for a column header.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/ColumnHeaderMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#event-columnHeaderMenuBeforeShow)
     * @param {object} event Event object
     * @param {TaskBoard} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {ColumnModel} event.columnRecord The column
     */
    onColumnHeaderMenuBeforeShow: ((event: { source: TaskBoard, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, columnRecord: ColumnModel }) => boolean|void)|string
    /**
     * Triggered when the column collapsed state is toggled.
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {ColumnModel} event.columnRecord Column record
     * @param {boolean} event.collapse `true` if the column is being collapsed.
     */
    onColumnToggle: ((event: { source: TaskBoard, columnRecord: ColumnModel, collapse: boolean }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Panel} event.source This Panel.
     */
    onExpand: ((event: { source: Panel }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Triggered when a tasks element is removed.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#event-removeTaskElement)
     * @param {object} event Event object
     * @param {TaskBoard} event.source TaskBoard instance
     * @param {string|number} event.taskId Id of the task (not the record itself since it might be removed)
     * @param {HTMLElement} event.element Tasks element
     */
    onRemoveTaskElement: ((event: { source: TaskBoard, taskId: string|number, element: HTMLElement }) => void)|string
    /**
     * Triggered when a task is rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#event-renderTask)
     * @param {object} event Event object
     * @param {TaskBoard} event.source TaskBoard instance
     * @param {TaskModel} event.taskRecord Task being rendered
     * @param {boolean} event.isRefresh `true` if the element was updated, `false` if it was added
     * @param {HTMLElement} event.element Tasks element
     */
    onRenderTask: ((event: { source: TaskBoard, taskRecord: TaskModel, isRefresh: boolean, element: HTMLElement }) => void)|string
    /**
     * Triggered when all tasks in the task board are rendered
     * @param {object} event Event object
     * @param {TaskBoard} event.source TaskBoard instance
     * @param {TaskModel[]} event.taskRecords Tasks being rendered
     */
    onRenderTasks: ((event: { source: TaskBoard, taskRecords: TaskModel[] }) => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered when a new max-height based breakpoint is applied.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     * @param {Breakpoint} event.breakpoint The applied breakpoint
     * @param {Breakpoint} event.prevBreakpoint The previously applied breakpoint
     */
    onResponsiveHeightChange: ((event: { source: Widget, breakpoint: Breakpoint, prevBreakpoint: Breakpoint }) => void)|string
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/taskboard/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onResponsiveStateChange: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Triggered when a new max-width based breakpoint is applied.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     * @param {Breakpoint} event.breakpoint The applied breakpoint
     * @param {Breakpoint} event.prevBreakpoint The previously applied breakpoint
     */
    onResponsiveWidthChange: ((event: { source: Widget, breakpoint: Breakpoint, prevBreakpoint: Breakpoint }) => void)|string
    /**
     * Triggered when task selection changes.
     * @param {object} event Event object
     * @param {TaskBoard} event.source TaskBoard instance
     * @param {'select'|'deselect'} event.action Either 'select' or 'deselect', depending on operation
     * @param {TaskModel[]} event.selection All currently selected tasks
     * @param {TaskModel[]} event.select Tasks selected by the operation
     * @param {TaskModel[]} event.deselect Tasks deselected by the operation
     */
    onSelectionChange: ((event: { source: TaskBoard, action: 'select'|'deselect', selection: TaskModel[], select: TaskModel[], deselect: TaskModel[] }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
    /**
     * Fires on the owning TaskBoard when inline editing of a field is cancelled (by pressing ESC).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#event-simpleTaskEditCancel)
     * @param {object} event Event object
     * @param {TaskBoard} event.source The task board
     * @param {SimpleTaskEdit} event.simpleTaskEdit The simpleTaskEdit feature
     * @param {TaskModel} event.taskRecord Record that was edited
     * @param {string} event.field Field name being edited
     */
    onSimpleTaskEditCancel: ((event: { source: TaskBoard, simpleTaskEdit: SimpleTaskEdit, taskRecord: TaskModel, field: string }) => boolean|void)|string
    /**
     * Fires on the owning TaskBoard when inline editing of a field has successfully finished.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#event-simpleTaskEditComplete)
     * @param {object} event Event object
     * @param {TaskBoard} event.source The task board
     * @param {SimpleTaskEdit} event.simpleTaskEdit The simpleTaskEdit feature
     * @param {TaskModel} event.taskRecord Record that was edited
     * @param {string} event.field Field name being edited
     */
    onSimpleTaskEditComplete: ((event: { source: TaskBoard, simpleTaskEdit: SimpleTaskEdit, taskRecord: TaskModel, field: string }) => boolean|void)|string
    /**
     * Triggered when a swimlane is collapsed.
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record
     */
    onSwimlaneCollapse: ((event: { source: TaskBoard, swimlaneRecord: SwimlaneModel }) => void)|string
    /**
     * Triggered when a swimlane is expanded.
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record
     */
    onSwimlaneExpand: ((event: { source: TaskBoard, swimlaneRecord: SwimlaneModel }) => void)|string
    /**
     * Triggered when a swimlane header is clicked.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#event-swimlaneHeaderClick)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record
     * @param {MouseEvent} event.event Browser event
     */
    onSwimlaneHeaderClick: ((event: { source: TaskBoard, swimlaneRecord: SwimlaneModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when a swimlane header is right-clicked.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#event-swimlaneHeaderContextMenu)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record
     * @param {MouseEvent} event.event Browser event
     */
    onSwimlaneHeaderContextMenu: ((event: { source: TaskBoard, swimlaneRecord: SwimlaneModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when a swimlane header is double-clicked.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#event-swimlaneHeaderDblClick)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record
     * @param {MouseEvent} event.event Browser event
     */
    onSwimlaneHeaderDblClick: ((event: { source: TaskBoard, swimlaneRecord: SwimlaneModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when the swimlane collapsed state is toggled.
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record
     * @param {boolean} event.collapse `true` if the column is being collapsed.
     */
    onSwimlaneToggle: ((event: { source: TaskBoard, swimlaneRecord: SwimlaneModel, collapse: boolean }) => void)|string
    /**
     * Triggered when a card is clicked.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#event-taskClick)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {TaskModel} event.taskRecord Task record
     * @param {ColumnModel} event.columnRecord Column record for the tasks column
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record for the tasks swimlane (if used)
     * @param {MouseEvent} event.event Browser event
     */
    onTaskClick: ((event: { source: TaskBoard, taskRecord: TaskModel, columnRecord: ColumnModel, swimlaneRecord: SwimlaneModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when a card is double clicked
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#event-taskDblClick)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {TaskModel} event.taskRecord Task record
     * @param {ColumnModel} event.columnRecord Column record for the tasks column
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record for the tasks swimlane (if used)
     * @param {MouseEvent} event.event Browser event
     */
    onTaskDblClick: ((event: { source: TaskBoard, taskRecord: TaskModel, columnRecord: ColumnModel, swimlaneRecord: SwimlaneModel, event: MouseEvent }) => void)|string
    /**
     * Fires on the owning TaskBoard when tasks are dragged, if the drag leads to any changes compared to
     * the last taskDrag event (moved to a new column or changed order within a column).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#event-taskDrag)
     * @param {object} event Event object
     * @param {TaskBoard} event.source Owning TaskBoard
     * @param {TaskModel[]} event.taskRecords Dragged tasks
     * @param {ColumnModel} event.targetColumn Currently over this column
     * @param {SwimlaneModel} event.targetSwimlane Currently over this swimlane (if used)
     * @param {Event} event.domEvent The mouse event
     */
    onTaskDrag: ((event: { source: TaskBoard, taskRecords: TaskModel[], targetColumn: ColumnModel, targetSwimlane: SwimlaneModel, domEvent: Event }) => void)|string
    /**
     * Fires on the owning TaskBoard when a drag operation is aborted (invalid drop or aborted using ESC)
     * @param {object} event Event object
     * @param {TaskBoard} event.source Owning TaskBoard
     * @param {TaskModel[]} event.taskRecords Dragged tasks
     */
    onTaskDragAbort: ((event: { source: TaskBoard, taskRecords: TaskModel[] }) => void)|string
    /**
     * Fires on the owning TaskBoard when a previously started drag operation ends, no matter the
     * outcome of it (whether valid, invalid or aborted)
     * @param {object} event Event object
     * @param {TaskBoard} event.source Owning TaskBoard
     * @param {TaskModel[]} event.taskRecords Affected tasks
     * @param {Event} event.domEvent The mouse event
     */
    onTaskDragEnd: ((event: { source: TaskBoard, taskRecords: TaskModel[], domEvent: Event }) => void)|string
    /**
     * Fires on the owning TaskBoard when task dragging starts
     * @param {object} event Event object
     * @param {TaskBoard} event.source Owning TaskBoard
     * @param {TaskModel[]} event.taskRecords Tasks to be dragged
     * @param {Event} event.domEvent The mouse event
     */
    onTaskDragStart: ((event: { source: TaskBoard, taskRecords: TaskModel[], domEvent: Event }) => void)|string
    /**
     * Fires on the owning TaskBoard when tasks are successfully dropped (after the drop transition has
     * finished)
     * @param {object} event Event object
     * @param {TaskBoard} event.source Owning TaskBoard
     * @param {TaskModel[]} event.taskRecords Dropped tasks
     * @param {ColumnModel} event.targetColumn Dropped on this column
     * @param {SwimlaneModel} event.targetSwimlane Dropped in this swimlane (if used)
     * @param {Event} event.domEvent The mouse event
     */
    onTaskDrop: ((event: { source: TaskBoard, taskRecords: TaskModel[], targetColumn: ColumnModel, targetSwimlane: SwimlaneModel, domEvent: Event }) => void)|string
    /**
     * This event fires on the owning TaskBoard before the context menu is shown for a task.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#event-taskMenuBeforeShow)
     * @param {object} event Event object
     * @param {TaskBoard} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {TaskModel} event.taskRecord The task
     */
    onTaskMenuBeforeShow: ((event: { source: TaskBoard, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, taskRecord: TaskModel }) => boolean|void)|string
    /**
     * This event fires on the owning TaskBoard when an item is selected in the task context menu.
     * @param {object} event Event object
     * @param {TaskBoard} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {TaskModel} event.taskRecord The task
     */
    onTaskMenuItem: ((event: { source: TaskBoard, menu: Menu, item: MenuItem, taskRecord: TaskModel }) => void)|string
    /**
     * This event fires on the owning TaskBoard after the context menu is shown for a task.
     * @param {object} event Event object
     * @param {TaskBoard} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {TaskModel} event.taskRecord The task
     */
    onTaskMenuShow: ((event: { source: TaskBoard, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, taskRecord: TaskModel }) => void)|string
    /**
     * This event fires on the owning TaskBoard when a check item is toggled in the task context menu.
     * @param {object} event Event object
     * @param {TaskBoard} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {TaskModel} event.taskRecord The task
     * @param {boolean} event.checked Checked or not
     */
    onTaskMenuToggleItem: ((event: { source: TaskBoard, menu: Menu, item: MenuItem, taskRecord: TaskModel, checked: boolean }) => void)|string
    /**
     * Triggered when the mouse enters a card
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#event-taskMouseEnter)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {TaskModel} event.taskRecord Task record
     * @param {ColumnModel} event.columnRecord Column record for the tasks column
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record for the tasks swimlane (if used)
     * @param {MouseEvent} event.event Browser event
     */
    onTaskMouseEnter: ((event: { source: TaskBoard, taskRecord: TaskModel, columnRecord: ColumnModel, swimlaneRecord: SwimlaneModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when the mouse leaves a card
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#event-taskMouseLeave)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {TaskModel} event.taskRecord Task record
     * @param {ColumnModel} event.columnRecord Column record for the tasks column
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record for the tasks swimlane (if used)
     * @param {MouseEvent} event.event Browser event
     */
    onTaskMouseLeave: ((event: { source: TaskBoard, taskRecord: TaskModel, columnRecord: ColumnModel, swimlaneRecord: SwimlaneModel, event: MouseEvent }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Tool} event.source This Panel.
     * @param {Tool} event.tool The tool which is being clicked.
     */
    onToolClick: ((event: { source: Tool, tool: Tool }) => void)|string
}

/**
 * A thin base class for [TaskBoard](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard). Does not include any features by default, allowing smaller
 * custom-built bundles if used in place of [TaskBoard](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard).
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase)
 */
export class TaskBoardBase extends Panel {
    /**
     * Inline [assignments](https://bryntum.com/products/scheduler/docs#Scheduler/model/AssignmentModel), will be loaded into an internally created
     * [AssignmentStore](https://bryntum.com/products/scheduler/docs#Scheduler/data/AssignmentStore)  as a part of a [project](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel).
     */
    assignments: AssignmentModel[]|object[]|Partial<AssignmentModelConfig>[]
    /**
     * Items to add to each card's body.
     */
    bodyItems: Record<string, TaskItemOptions>
    /**
     * Field on a task record used to determine which column the task belongs to.
     */
    columnField: string
    /**
     * Store containing the TaskBoard columns.
     */
    columns: Store
    /**
     * Allows runtime manipulating of CSS variables.
     */
    css: typeof Proxy
    /**
     * Whether to draw cards on scroll, or only when scrolling ends.
     */
    drawOnScroll: boolean
    /**
     * Items in card footer.
     */
    footerItems: Record<string, TaskItemOptions>
    /**
     * The function is called for each task as part of the render loop, and is expected to return the height in
     * pixels for the task. Using this function is only recommended when using partial virtualized rendering, see
     * the [virtualize](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardVirtualization#config-virtualize) setting.
     */
    getTaskHeight: Function
    /**
     * Items in card header.
     */
    headerItems: Record<string, TaskItemOptions>
    /**
     * Returns `true` if this instance implements the [State](https://bryntum.com/products/taskboard/docs/api/Core/mixin/State) interface.
     */
    readonly isStateful: boolean
    /**
     * A template method (empty by default) allowing you to control if a task can be selected or not.
     */
    isTaskSelectable: Function
    /**
     * Get the global LocaleHelper
     */
    readonly localeHelper: typeof LocaleHelper
    /**
     * Get the global LocaleManager
     */
    readonly localeManager: typeof LocaleManager
    /**
     * Map of applied plugins
     */
    readonly plugins: Record<string, InstancePlugin>
    /**
     * The [ProjectModel](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel) instance, containing the data visualized by the TaskBoard.
     */
    project: ProjectModel|Partial<ProjectModelConfig>
    /**
     * Inline [resources](https://bryntum.com/products/scheduler/docs#Scheduler/model/ResourceModel), will be loaded into an internally created
     * [ResourceStore](https://bryntum.com/products/scheduler/docs#Scheduler/data/ResourceStore) as a part of a [project](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel).
     */
    resources: ResourceModel[]|object[]|Partial<ResourceModelConfig>[]
    /**
     * Selected tasks.
     */
    selectedTasks: TaskModel[]
    /**
     * By default, a tooltip showing `Expand XX`/`Collapse XX` is shown when hovering the expand/collapse icon for
     * a column or swimlane. To disable the tooltip, set this to `false`.
     */
    showCollapseTooltip: boolean
    /**
     * Gets or sets a component's state
     */
    state: object
    /**
     * Setting this will cause cards to expand to share the available width if there are fewer than
     * [tasksPerRow](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-tasksPerRow).
     */
    stretchCards: boolean
    /**
     * Field on a task record used to determine which swimlane the task belongs to.
     */
    swimlaneField: string
    /**
     * Store containing the TaskBoard swimlanes.
     */
    swimlanes: Store
    /**
     * Inline [tasks](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/TaskModel), will be loaded into an internally created
     * [TaskStore](https://bryntum.com/products/taskboard/docs/api/TaskBoard/store/TaskStore) as a part of a [project](#TaskBoard/model/ProjectModel).
     */
    tasks: TaskModel[]|object[]|Partial<TaskModelConfig>[]
    /**
     * By turning on this setting you enable partial virtualized rendering for the board, which reduces initial
     * rendering time and makes interaction less sluggish when using thousands of tasks. The tradeoff is that
     * scrolling in most cases will be slower.
     */
    virtualize: boolean
    /**
     * An object containing Features
     */
    features: TaskBoardBaseFeaturesType
    /**
     * Triggered when a task is "activated" by pressing `Enter` or double clicking it.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#event-activateTask)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {TaskModel} event.taskRecord Task record
     * @param {MouseEvent} event.event Browser event
     */
    onActivateTask: ((event: { source: TaskBoard, taskRecord: TaskModel, event: MouseEvent }) => void)|string
    /**
     * Fires on the owning TaskBoard before column dragging starts. Return `false` to prevent the action
     * @param {object} event Event object
     * @param {TaskBoard} event.source Owning TaskBoard
     * @param {ColumnModel} event.columnRecord Column to be dragged
     */
    onBeforeColumnDrag: ((event: { source: TaskBoard, columnRecord: ColumnModel }) => boolean|void)|string
    /**
     * Fires on the owning TaskBoard when dropping a column, before the operation completes. Handles async
     * listeners, returning `false` from one will abort the operation
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#event-beforeColumnDrop)
     * @param {object} event Event object
     * @param {TaskBoard} event.source Owning TaskBoard
     * @param {ColumnModel} event.columnRecord Dropped column
     * @param {ColumnModel} event.beforeColumn Dropped before this column
     */
    onBeforeColumnDrop: ((event: { source: TaskBoard, columnRecord: ColumnModel, beforeColumn: ColumnModel }) => Promise<boolean|void>)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/taskboard/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onBeforeResponsiveStateChange: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fires on the owning TaskBoard before displaying an inline editor. Returning `false` stops the editor from
     * being shown.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#event-beforeSimpleTaskEdit)
     * @param {object} event Event object
     * @param {TaskBoard} event.source The task board
     * @param {SimpleTaskEdit} event.simpleTaskEdit The simpleTaskEdit feature
     * @param {TaskModel} event.taskRecord The record about to be shown in the editor
     * @param {string} event.field Field name being edited
     */
    onBeforeSimpleTaskEdit: ((event: { source: TaskBoard, simpleTaskEdit: SimpleTaskEdit, taskRecord: TaskModel, field: string }) => boolean|void)|string
    /**
     * Fires on the owning TaskBoard before task dragging starts. Return `false` to prevent the action
     * @param {object} event Event object
     * @param {TaskBoard} event.source Owning TaskBoard
     * @param {TaskModel[]} event.taskRecords Tasks to be dragged
     * @param {Event} event.domEvent The mouse event
     */
    onBeforeTaskDrag: ((event: { source: TaskBoard, taskRecords: TaskModel[], domEvent: Event }) => boolean|void)|string
    /**
     * Fires on the owning TaskBoard when tasks are dropped, before the operation completes. Handles async
     * listeners, returning `false` from one will abort the operation
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#event-beforeTaskDrop)
     * @param {object} event Event object
     * @param {TaskBoard} event.source Owning TaskBoard
     * @param {TaskModel[]} event.taskRecords Dropped tasks
     * @param {ColumnModel} event.targetColumn Dropped on this column
     * @param {SwimlaneModel} event.targetSwimlane Dropped in this swimlane (if used)
     * @param {Event} event.domEvent The mouse event
     */
    onBeforeTaskDrop: ((event: { source: TaskBoard, taskRecords: TaskModel[], targetColumn: ColumnModel, targetSwimlane: SwimlaneModel, domEvent: Event }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning TaskBoard before a task is displayed in an editor.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#event-beforeTaskEdit)
     * @param {object} event Event object
     * @param {TaskBoard} event.source The owning TaskBoard
     * @param {TaskModel} event.taskRecord The record about to be shown in the task editor
     */
    onBeforeTaskEdit: ((event: { source: TaskBoard, taskRecord: TaskModel }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning TaskBoard when the editor for a task is available, but before it is populated with data
     * and shown. Allows manipulating fields etc.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#event-beforeTaskEditShow)
     * @param {object} event Event object
     * @param {TaskBoard} event.source The owning TaskBoard
     * @param {TaskModel} event.taskRecord The record about to be shown in the task editor
     * @param {TaskEditor} event.editor The editor
     */
    onBeforeTaskEditShow: ((event: { source: TaskBoard, taskRecord: TaskModel, editor: TaskEditor }) => void)|string
    /**
     * Triggered when one or more tasks are to be removed by a call to `removeTask()`.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#event-beforeTaskRemove)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {TaskModel[]} event.taskRecords Task records to be removed
     */
    onBeforeTaskRemove: ((event: { source: TaskBoard, taskRecords: TaskModel[] }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * This event fires on the owning TaskBoard when an item is selected in the column header menu.
     * @param {object} event Event object
     * @param {TaskBoard} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {ColumnModel} event.columnRecord The column
     */
    onCellMenuItem: ((event: { source: TaskBoard, menu: Menu, item: MenuItem, columnRecord: ColumnModel }) => void)|string
    /**
     * This event fires on the owning TaskBoard after the context menu is shown for a column header.
     * @param {object} event Event object
     * @param {TaskBoard} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {ColumnModel} event.columnRecord The column
     */
    onCellMenuShow: ((event: { source: TaskBoard, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, columnRecord: ColumnModel }) => void)|string
    /**
     * This event fires on the owning TaskBoard when a check item is toggled in the column header menu.
     * @param {object} event Event object
     * @param {TaskBoard} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {ColumnModel} event.columnRecord The column
     * @param {boolean} event.checked Checked or not
     */
    onCellMenuToggleItem: ((event: { source: TaskBoard, menu: Menu, item: MenuItem, columnRecord: ColumnModel, checked: boolean }) => void)|string
    /**
     * Triggered when a column is collapsed.
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {ColumnModel} event.columnRecord Column record
     */
    onColumnCollapse: ((event: { source: TaskBoard, columnRecord: ColumnModel }) => void)|string
    /**
     * Fires on the owning TaskBoard when a column is dragged, if the drag leads to a change compared to
     * the last columnDrag event.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#event-columnDrag)
     * @param {object} event Event object
     * @param {TaskBoard} event.source Owning TaskBoard
     * @param {ColumnModel} event.columnRecord Column being dragged
     * @param {ColumnModel} event.beforeColumn Insert before this column on drop, `null` if last
     */
    onColumnDrag: ((event: { source: TaskBoard, columnRecord: ColumnModel, beforeColumn: ColumnModel }) => void)|string
    /**
     * Fires on the owning TaskBoard when a drag operation is aborted (invalid drop or aborted using ESC)
     * @param {object} event Event object
     * @param {TaskBoard} event.source Owning TaskBoard
     * @param {ColumnModel} event.columnRecord Dragged column
     */
    onColumnDragAbort: ((event: { source: TaskBoard, columnRecord: ColumnModel }) => void)|string
    /**
     * Fires on the owning TaskBoard when a previously started drag operation ends, no matter the
     * outcome of it (whether valid, invalid or aborted)
     * @param {object} event Event object
     * @param {TaskBoard} event.source Owning TaskBoard
     * @param {ColumnModel} event.columnRecord Affected column
     */
    onColumnDragEnd: ((event: { source: TaskBoard, columnRecord: ColumnModel }) => void)|string
    /**
     * Fires on the owning TaskBoard when column dragging starts
     * @param {object} event Event object
     * @param {TaskBoard} event.source Owning TaskBoard
     * @param {ColumnModel} event.columnRecord Column to be dragged
     */
    onColumnDragStart: ((event: { source: TaskBoard, columnRecord: ColumnModel }) => void)|string
    /**
     * Fires on the owning TaskBoard when a column is successfully dropped (after the drop transition
     * has finished)
     * @param {object} event Event object
     * @param {TaskBoard} event.source Owning TaskBoard
     * @param {ColumnModel} event.columnRecord Dropped column
     * @param {ColumnModel} event.beforeColumn Dropped before this column (`null` if last)
     * @param {SwimlaneModel} event.targetSwimlane Dropped in this swimlane (if used)
     */
    onColumnDrop: ((event: { source: TaskBoard, columnRecord: ColumnModel, beforeColumn: ColumnModel, targetSwimlane: SwimlaneModel }) => void)|string
    /**
     * Triggered when a column is expanded.
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {ColumnModel} event.columnRecord Column record
     */
    onColumnExpand: ((event: { source: TaskBoard, columnRecord: ColumnModel }) => void)|string
    /**
     * This event fires on the owning TaskBoard before the menu is shown for a column header.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/ColumnHeaderMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#event-columnHeaderMenuBeforeShow)
     * @param {object} event Event object
     * @param {TaskBoard} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {ColumnModel} event.columnRecord The column
     */
    onColumnHeaderMenuBeforeShow: ((event: { source: TaskBoard, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, columnRecord: ColumnModel }) => boolean|void)|string
    /**
     * Triggered when the column collapsed state is toggled.
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {ColumnModel} event.columnRecord Column record
     * @param {boolean} event.collapse `true` if the column is being collapsed.
     */
    onColumnToggle: ((event: { source: TaskBoard, columnRecord: ColumnModel, collapse: boolean }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered when a tasks element is removed.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#event-removeTaskElement)
     * @param {object} event Event object
     * @param {TaskBoard} event.source TaskBoard instance
     * @param {string|number} event.taskId Id of the task (not the record itself since it might be removed)
     * @param {HTMLElement} event.element Tasks element
     */
    onRemoveTaskElement: ((event: { source: TaskBoard, taskId: string|number, element: HTMLElement }) => void)|string
    /**
     * Triggered when a task is rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#event-renderTask)
     * @param {object} event Event object
     * @param {TaskBoard} event.source TaskBoard instance
     * @param {TaskModel} event.taskRecord Task being rendered
     * @param {boolean} event.isRefresh `true` if the element was updated, `false` if it was added
     * @param {HTMLElement} event.element Tasks element
     */
    onRenderTask: ((event: { source: TaskBoard, taskRecord: TaskModel, isRefresh: boolean, element: HTMLElement }) => void)|string
    /**
     * Triggered when all tasks in the task board are rendered
     * @param {object} event Event object
     * @param {TaskBoard} event.source TaskBoard instance
     * @param {TaskModel[]} event.taskRecords Tasks being rendered
     */
    onRenderTasks: ((event: { source: TaskBoard, taskRecords: TaskModel[] }) => void)|string
    /**
     * Triggered when a new max-height based breakpoint is applied.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     * @param {Breakpoint} event.breakpoint The applied breakpoint
     * @param {Breakpoint} event.prevBreakpoint The previously applied breakpoint
     */
    onResponsiveHeightChange: ((event: { source: Widget, breakpoint: Breakpoint, prevBreakpoint: Breakpoint }) => void)|string
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/taskboard/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onResponsiveStateChange: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Triggered when a new max-width based breakpoint is applied.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     * @param {Breakpoint} event.breakpoint The applied breakpoint
     * @param {Breakpoint} event.prevBreakpoint The previously applied breakpoint
     */
    onResponsiveWidthChange: ((event: { source: Widget, breakpoint: Breakpoint, prevBreakpoint: Breakpoint }) => void)|string
    /**
     * Triggered when task selection changes.
     * @param {object} event Event object
     * @param {TaskBoard} event.source TaskBoard instance
     * @param {'select'|'deselect'} event.action Either 'select' or 'deselect', depending on operation
     * @param {TaskModel[]} event.selection All currently selected tasks
     * @param {TaskModel[]} event.select Tasks selected by the operation
     * @param {TaskModel[]} event.deselect Tasks deselected by the operation
     */
    onSelectionChange: ((event: { source: TaskBoard, action: 'select'|'deselect', selection: TaskModel[], select: TaskModel[], deselect: TaskModel[] }) => void)|string
    /**
     * Fires on the owning TaskBoard when inline editing of a field is cancelled (by pressing ESC).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#event-simpleTaskEditCancel)
     * @param {object} event Event object
     * @param {TaskBoard} event.source The task board
     * @param {SimpleTaskEdit} event.simpleTaskEdit The simpleTaskEdit feature
     * @param {TaskModel} event.taskRecord Record that was edited
     * @param {string} event.field Field name being edited
     */
    onSimpleTaskEditCancel: ((event: { source: TaskBoard, simpleTaskEdit: SimpleTaskEdit, taskRecord: TaskModel, field: string }) => boolean|void)|string
    /**
     * Fires on the owning TaskBoard when inline editing of a field has successfully finished.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#event-simpleTaskEditComplete)
     * @param {object} event Event object
     * @param {TaskBoard} event.source The task board
     * @param {SimpleTaskEdit} event.simpleTaskEdit The simpleTaskEdit feature
     * @param {TaskModel} event.taskRecord Record that was edited
     * @param {string} event.field Field name being edited
     */
    onSimpleTaskEditComplete: ((event: { source: TaskBoard, simpleTaskEdit: SimpleTaskEdit, taskRecord: TaskModel, field: string }) => boolean|void)|string
    /**
     * Triggered when a swimlane is collapsed.
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record
     */
    onSwimlaneCollapse: ((event: { source: TaskBoard, swimlaneRecord: SwimlaneModel }) => void)|string
    /**
     * Triggered when a swimlane is expanded.
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record
     */
    onSwimlaneExpand: ((event: { source: TaskBoard, swimlaneRecord: SwimlaneModel }) => void)|string
    /**
     * Triggered when a swimlane header is clicked.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#event-swimlaneHeaderClick)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record
     * @param {MouseEvent} event.event Browser event
     */
    onSwimlaneHeaderClick: ((event: { source: TaskBoard, swimlaneRecord: SwimlaneModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when a swimlane header is right-clicked.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#event-swimlaneHeaderContextMenu)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record
     * @param {MouseEvent} event.event Browser event
     */
    onSwimlaneHeaderContextMenu: ((event: { source: TaskBoard, swimlaneRecord: SwimlaneModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when a swimlane header is double-clicked.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#event-swimlaneHeaderDblClick)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record
     * @param {MouseEvent} event.event Browser event
     */
    onSwimlaneHeaderDblClick: ((event: { source: TaskBoard, swimlaneRecord: SwimlaneModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when the swimlane collapsed state is toggled.
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record
     * @param {boolean} event.collapse `true` if the column is being collapsed.
     */
    onSwimlaneToggle: ((event: { source: TaskBoard, swimlaneRecord: SwimlaneModel, collapse: boolean }) => void)|string
    /**
     * Triggered when a card is clicked.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#event-taskClick)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {TaskModel} event.taskRecord Task record
     * @param {ColumnModel} event.columnRecord Column record for the tasks column
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record for the tasks swimlane (if used)
     * @param {MouseEvent} event.event Browser event
     */
    onTaskClick: ((event: { source: TaskBoard, taskRecord: TaskModel, columnRecord: ColumnModel, swimlaneRecord: SwimlaneModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when a card is double clicked
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#event-taskDblClick)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {TaskModel} event.taskRecord Task record
     * @param {ColumnModel} event.columnRecord Column record for the tasks column
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record for the tasks swimlane (if used)
     * @param {MouseEvent} event.event Browser event
     */
    onTaskDblClick: ((event: { source: TaskBoard, taskRecord: TaskModel, columnRecord: ColumnModel, swimlaneRecord: SwimlaneModel, event: MouseEvent }) => void)|string
    /**
     * Fires on the owning TaskBoard when tasks are dragged, if the drag leads to any changes compared to
     * the last taskDrag event (moved to a new column or changed order within a column).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#event-taskDrag)
     * @param {object} event Event object
     * @param {TaskBoard} event.source Owning TaskBoard
     * @param {TaskModel[]} event.taskRecords Dragged tasks
     * @param {ColumnModel} event.targetColumn Currently over this column
     * @param {SwimlaneModel} event.targetSwimlane Currently over this swimlane (if used)
     * @param {Event} event.domEvent The mouse event
     */
    onTaskDrag: ((event: { source: TaskBoard, taskRecords: TaskModel[], targetColumn: ColumnModel, targetSwimlane: SwimlaneModel, domEvent: Event }) => void)|string
    /**
     * Fires on the owning TaskBoard when a drag operation is aborted (invalid drop or aborted using ESC)
     * @param {object} event Event object
     * @param {TaskBoard} event.source Owning TaskBoard
     * @param {TaskModel[]} event.taskRecords Dragged tasks
     */
    onTaskDragAbort: ((event: { source: TaskBoard, taskRecords: TaskModel[] }) => void)|string
    /**
     * Fires on the owning TaskBoard when a previously started drag operation ends, no matter the
     * outcome of it (whether valid, invalid or aborted)
     * @param {object} event Event object
     * @param {TaskBoard} event.source Owning TaskBoard
     * @param {TaskModel[]} event.taskRecords Affected tasks
     * @param {Event} event.domEvent The mouse event
     */
    onTaskDragEnd: ((event: { source: TaskBoard, taskRecords: TaskModel[], domEvent: Event }) => void)|string
    /**
     * Fires on the owning TaskBoard when task dragging starts
     * @param {object} event Event object
     * @param {TaskBoard} event.source Owning TaskBoard
     * @param {TaskModel[]} event.taskRecords Tasks to be dragged
     * @param {Event} event.domEvent The mouse event
     */
    onTaskDragStart: ((event: { source: TaskBoard, taskRecords: TaskModel[], domEvent: Event }) => void)|string
    /**
     * Fires on the owning TaskBoard when tasks are successfully dropped (after the drop transition has
     * finished)
     * @param {object} event Event object
     * @param {TaskBoard} event.source Owning TaskBoard
     * @param {TaskModel[]} event.taskRecords Dropped tasks
     * @param {ColumnModel} event.targetColumn Dropped on this column
     * @param {SwimlaneModel} event.targetSwimlane Dropped in this swimlane (if used)
     * @param {Event} event.domEvent The mouse event
     */
    onTaskDrop: ((event: { source: TaskBoard, taskRecords: TaskModel[], targetColumn: ColumnModel, targetSwimlane: SwimlaneModel, domEvent: Event }) => void)|string
    /**
     * This event fires on the owning TaskBoard before the context menu is shown for a task.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#event-taskMenuBeforeShow)
     * @param {object} event Event object
     * @param {TaskBoard} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {TaskModel} event.taskRecord The task
     */
    onTaskMenuBeforeShow: ((event: { source: TaskBoard, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, taskRecord: TaskModel }) => boolean|void)|string
    /**
     * This event fires on the owning TaskBoard when an item is selected in the task context menu.
     * @param {object} event Event object
     * @param {TaskBoard} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {TaskModel} event.taskRecord The task
     */
    onTaskMenuItem: ((event: { source: TaskBoard, menu: Menu, item: MenuItem, taskRecord: TaskModel }) => void)|string
    /**
     * This event fires on the owning TaskBoard after the context menu is shown for a task.
     * @param {object} event Event object
     * @param {TaskBoard} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {TaskModel} event.taskRecord The task
     */
    onTaskMenuShow: ((event: { source: TaskBoard, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, taskRecord: TaskModel }) => void)|string
    /**
     * This event fires on the owning TaskBoard when a check item is toggled in the task context menu.
     * @param {object} event Event object
     * @param {TaskBoard} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {TaskModel} event.taskRecord The task
     * @param {boolean} event.checked Checked or not
     */
    onTaskMenuToggleItem: ((event: { source: TaskBoard, menu: Menu, item: MenuItem, taskRecord: TaskModel, checked: boolean }) => void)|string
    /**
     * Triggered when the mouse enters a card
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#event-taskMouseEnter)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {TaskModel} event.taskRecord Task record
     * @param {ColumnModel} event.columnRecord Column record for the tasks column
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record for the tasks swimlane (if used)
     * @param {MouseEvent} event.event Browser event
     */
    onTaskMouseEnter: ((event: { source: TaskBoard, taskRecord: TaskModel, columnRecord: ColumnModel, swimlaneRecord: SwimlaneModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when the mouse leaves a card
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#event-taskMouseLeave)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {TaskModel} event.taskRecord Task record
     * @param {ColumnModel} event.columnRecord Column record for the tasks column
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record for the tasks swimlane (if used)
     * @param {MouseEvent} event.event Browser event
     */
    onTaskMouseLeave: ((event: { source: TaskBoard, taskRecord: TaskModel, columnRecord: ColumnModel, swimlaneRecord: SwimlaneModel, event: MouseEvent }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<TaskBoardBaseConfig>} config
     */
    constructor(config?: Partial<TaskBoardBaseConfig>);
    /**
     * Get localized string, returns value of `text` if no localized string found.
     * @param {string} text String key
     * @param {object} templateData Data to supply to template if localized string is a function
     */
    static L(text: string, templateData?: object): string;
    /**
     * Convenience function to get an optional translation. The difference compared to `L()` is that it won't throw
     * an error when the translation is missing even if configured with `throwOnMissingLocale`
     * @param {string} text String key
     * @param {object} templateData Data to supply to template if localized string is a function
     */
    static optionalL(text: string, templateData?: object): string;
    /**
     * Convenience function that can be called directly on the class that mixes Localizable in
     * @param {string} text String key
     * @param {object} templateData Data to supply to template if localized string is a function
     */
    L(text: string, templateData?: object): string;
    /**
     * Adds an event listener. This method accepts parameters in the following format:
     * @param {BryntumListenerConfig|string} config An object containing listener definitions, or the event name to listen for
     * @param {object|Function} thisObj Default `this` reference for all listeners in the config object, or the handler function to call if providing a string as the first arg.
     * @param {object} oldThisObj The `this` reference if the old signature starting with a string event name is used..
     */
    addListener(config: BryntumListenerConfig|string, thisObj?: object|Function, oldThisObj?: object): Function;
    /**
     * Adds plugins to an instance.
     * @param {Function[]} plugins The plugins to add
     */
    addPlugins(...plugins: Function[]): void;
    /**
     * Add a new task to the specified column / swimlane intersection (swimlane is optional), scroll it into view and
     * start editing it (if an editing feature is enabled).
     * @param {ColumnModel} columnRecord Column to add the task to
     * @param {ColumnModel} swimlaneRecord Swimlane to add the task to
     * @param {object} taskData Data for the new task
     */
    addTask(columnRecord: ColumnModel, swimlaneRecord?: ColumnModel, taskData?: object): Promise<void>;
    /**
     * Applies the given `state` to this instance.
     * @param {object} state The state object to apply to this instance.
     */
    applyState(state: object): void;
    /**
     * Collapse a swimlane or column.
     * @param {SwimlaneModel|ColumnModel} record Swimlane or column
     */
    collapse(record: SwimlaneModel|ColumnModel): Promise<void>;
    /**
     * Deselect all tasks.
     */
    deselectAll(): void;
    /**
     * Deselect the supplied task.
     * @param {TaskModel} taskRecord
     */
    deselectTask(taskRecord: TaskModel): void;
    /**
     * Edit the supplied task in the task editor.
     * @param {TaskModel} taskRecord Task to edit
     * @param {HTMLElement} element Optionally an element to align to, by default it tries to resolve one from the supplied task when the editor is configured to not be centered.
     */
    editTask(taskRecord: TaskModel, element?: HTMLElement): Promise<void>;
    /**
     * Expand a swimlane or column.
     * @param {SwimlaneModel|ColumnModel} record Swimlane or column
     */
    expand(record: SwimlaneModel|ColumnModel): Promise<void>;
    /**
     * Retrieves the element for the supplied column.
     * @param {ColumnModel} columnRecord
     */
    getColumnElement(columnRecord: ColumnModel): HTMLElement;
    /**
     * Retrieves the elements for the supplied column. When using swimlanes, a column has one element per swimlane.
     * @param {ColumnModel} columnRecord
     */
    getColumnElements(columnRecord: ColumnModel): HTMLElement;
    /**
     * Retrieves the header element for the supplied column.
     * @param {ColumnModel} columnRecord
     */
    getColumnHeaderElement(columnRecord: ColumnModel): HTMLElement;
    /**
     * Get a plugin instance.
     * @param {string|Function} pluginClassOrName
     */
    getPlugin(pluginClassOrName: string|Function): InstancePlugin;
    /**
     * Returns this object's state information.
     */
    getState(): object;
    /**
     * Retrieves the element for the supplied swimlane / column intersection.
     * @param {SwimlaneModel} swimlaneRecord
     * @param {ColumnModel} columnRecord
     */
    getSwimlaneColumnElement(swimlaneRecord: SwimlaneModel, columnRecord: ColumnModel): HTMLElement;
    /**
     * Retrieves the element for the supplied swimlane.
     * @param {SwimlaneModel} swimlaneRecord
     */
    getSwimlaneElement(swimlaneRecord: SwimlaneModel): HTMLElement;
    /**
     * Retrieves the element for the column that holds the supplied task record.
     * @param {TaskModel} taskRecord
     */
    getTaskColumnElement(taskRecord: TaskModel): HTMLElement;
    /**
     * Retrieves the task element (card) corresponding to the supplied task record.
     * @param {TaskModel} taskRecord
     */
    getTaskElement(taskRecord: TaskModel): HTMLElement;
    /**
     * Retrieves the element for the swimlane that holds the supplied task record.
     * @param {TaskModel} taskRecord
     */
    getTaskSwimlaneElement(taskRecord: TaskModel): HTMLElement;
    /**
     * Check if any listener is registered for the specified eventName
     * @param {string} eventName
     */
    hasListener(eventName: string): boolean;
    /**
     * Checks if instance has plugin.
     * @param {string|Function} pluginClassOrName Plugin or name to check for
     */
    hasPlugin(pluginClassOrName: string|Function): boolean;
    /**
     * Check if the supplied task is selected or not
     * @param {TaskModel} taskRecord
     */
    isSelected(taskRecord: TaskModel): boolean;
    /**
     * Loads this object's state from its [stateProvider](https://bryntum.com/products/taskboard/docs/api/Core/mixin/State#config-stateProvider) and applies it to its [state](#Core/mixin/State#property-state).
     * @param {string} stateId An overriding key to use instead of this object's [stateId](https://bryntum.com/products/taskboard/docs/api/Core/mixin/State#config-stateId).
     * @param {boolean} reload Pass `true` to load the state even if previously loaded.
     */
    loadState(stateId?: string, reload?: boolean): void;
    /**
     * Alias for [addListener](https://bryntum.com/products/taskboard/docs/api/Core/mixin/Events#function-addListener). Adds an event listener. This method accepts parameters in the following format:
     * @param {BryntumListenerConfig|string} config An object containing listener definitions, or the event name to listen for
     * @param {object|Function} thisObj Default `this` reference for all listeners in the config object, or the handler function to call if providing a string as the first arg.
     * @param {object} oldThisObj The `this` reference if the old signature starting with a string event name is used..
     */
    on(config: BryntumListenerConfig|string, thisObj?: object|Function, oldThisObj?: object): Function;
    /**
     * Relays all events through another object that also implements Events mixin. Adds a prefix to the event name
     * before relaying, for example add -&gt; storeAdd
     * @param {EventsClass} through Object to relay the events through, needs to mix Events mixin in
     * @param {string} prefix Prefix to add to event name
     * @param {boolean} transformCase Specify false to prevent making first letter of event name uppercase
     */
    relayAll(through: EventsClass, prefix: string, transformCase?: boolean): void;
    /**
     * Removes all listeners registered to this object by the application.
     */
    removeAllListeners(): void;
    /**
     * Removes an event listener. Same API signature as [addListener](https://bryntum.com/products/taskboard/docs/api/Core/mixin/Events#function-addListener)
     * @param {object|string} config A config object or the event name
     * @param {object|Function} thisObj `this` reference for all listeners, or the listener function
     * @param {object} oldThisObj `this` The `this` object for the legacy way of adding listeners
     */
    removeListener(config: object|string, thisObj: object|Function, oldThisObj: object): void;
    /**
     * Removes one or more tasks from the linked task store (and thus the TaskBoard).
     * @param {TaskModel|TaskModel[]} taskRecord A single task or an array thereof to remove from the task store.
     */
    removeTask(taskRecord: TaskModel|TaskModel[]): Promise<boolean>;
    /**
     * Retrieves a column record resolved from the supplied element. Has to be a `.b-taskboard-column` element or
     * descendant thereof (such as a card).
     * @param {HTMLElement} element
     */
    resolveColumnRecord(element: HTMLElement): ColumnModel;
    /**
     * Retrieves a swimlane record resolved from the supplied element. Has to be a `.b-taskboard-swimlane` element or
     * descendant thereof.
     * @param {HTMLElement} element
     */
    resolveSwimlaneRecord(element: HTMLElement): SwimlaneModel;
    /**
     * Retrieves a task record corresponding to the supplied element. Has to be a `.b-taskboard-card` element or
     * descendant thereof.
     * @param {HTMLElement} element
     */
    resolveTaskRecord(element: HTMLElement): TaskModel;
    /**
     * Resume event triggering after a call to [suspendEvents()](https://bryntum.com/products/taskboard/docs/api/Core/mixin/Events#function-suspendEvents). If any triggered events were queued they will be triggered.
     */
    resumeEvents(): boolean;
    /**
     * Saves this object's state to its [stateProvider](https://bryntum.com/products/taskboard/docs/api/Core/mixin/State#config-stateProvider).
     * @param {object|string} options Options that affect the state saving process or, if a string, the state `id`.
     */
    saveState(options?: {
        id?: string
        immediate?: boolean
    }|string): void;
    /**
     * Scroll specified column into view.
     * @param {ColumnModel|number|string} columnOrId Column or its id
     * @param {BryntumScrollOptions} options Scroll options, see [scrollOptions](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardScroll#config-scrollOptions)
     */
    scrollToColumn(columnOrId: ColumnModel|number|string, options?: BryntumScrollOptions): Promise<void>;
    /**
     * Scroll to the intersection between specified swimlane and column.
     * @param {SwimlaneModel|number|string} swimlaneOrId Swimlane or its id
     * @param {ColumnModel|number|string} columnOrId Column or its id
     * @param {BryntumScrollOptions} options Scroll options, see [scrollOptions](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardScroll#config-scrollOptions)
     */
    scrollToIntersection(swimlaneOrId: SwimlaneModel|number|string, columnOrId: ColumnModel|number|string, options?: BryntumScrollOptions): Promise<void>;
    /**
     * Scroll specified swimlane into view.
     * @param {SwimlaneModel|number|string} swimlaneOrId Swimlane or its id
     * @param {BryntumScrollOptions} options Scroll options, see [scrollOptions](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardScroll#config-scrollOptions)
     */
    scrollToSwimlane(swimlaneOrId: SwimlaneModel|number|string, options?: BryntumScrollOptions): Promise<void>;
    /**
     * Scroll the specified task into view.
     * @param {TaskModel|number|string} taskOrId
     * @param {BryntumScrollOptions} options Scroll options, see [scrollOptions](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardScroll#config-scrollOptions)
     */
    scrollToTask(taskOrId: TaskModel|number|string, options?: BryntumScrollOptions): Promise<void>;
    /**
     * Select the supplied task, deselecting any previously selected by default.
     * @param {TaskModel} taskRecord Task to select
     * @param {boolean} add Specify `true` to add to selection instead of replacing it
     */
    selectTask(taskRecord: TaskModel, add?: boolean): void;
    /**
     * Prevents events from being triggered until [resumeEvents()](https://bryntum.com/products/taskboard/docs/api/Core/mixin/Events#function-resumeEvents) is called. Optionally queues events that are triggered while
     * suspended. Multiple calls stack to require matching calls to `resumeEvents()` before actually resuming.
     * @param {boolean} queue Specify true to queue events triggered while suspended
     */
    suspendEvents(queue?: boolean): void;
    /**
     * Expand or collapse a swimlane or column.
     * @param {SwimlaneModel|ColumnModel} record Swimlane or column
     * @param {boolean} collapse Specify to force a certain state, leave out to toggle
     */
    toggleCollapse(record: SwimlaneModel|ColumnModel, collapse?: boolean): Promise<void>;
    /**
     * Triggers an event, calling all registered listeners with the supplied arguments. Returning false from any listener
     * makes function return false.
     * @param {string} eventName Event name for which to trigger listeners
     * @param {{bubbles?: boolean, [key: string]: any}} param Single parameter passed on to listeners, source property will be added to it (this)
     */
    trigger(eventName: string, param?: {bubbles?: boolean, [key: string]: any}): Promise<boolean|any>;
    /**
     * Shorthand for [removeListener](https://bryntum.com/products/taskboard/docs/api/Core/mixin/Events#function-removeListener)
     * @param {object|string} config A config object or the event name
     * @param {object|Function} thisObj `this` reference for all listeners, or the listener function
     * @param {object} oldThisObj `this` The `this` object for the legacy way of adding listeners
     */
    un(config: object|string, thisObj?: object|Function, oldThisObj?: object): void;
    /**
     * Method that is triggered when applying a locale to the instance
     * (happens on the instance construction steps and when switching to another locale).
     */
    updateLocalization(): void;
}

/**
 * Type with configuration options for [ImageItem](https://bryntum.com/products/grid/docs/api/TaskBoard/view/item/ImageItem) class.
 */
type ImageItemConfig = {
    type: 'image'
    /**
     * Url prepended to this items value.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/ImageItem#config-baseUrl)
     */
    baseUrl: string
    /**
     * CSS class to add.
     */
    cls: string
    /**
     * Widget type or config to use as the editor for this item. Used in the inline task editor.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/ImageItem#config-editor)
     */
    editor: string|object
    /**
     * Task field whose value item will act on (usually display it). Defaults to use the key in the items object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/ImageItem#config-field)
     */
    field: string
    /**
     * Specify `true` to hide the task item.
     */
    hidden: boolean
    /**
     * Flex order, can be used to re-order task items.
     */
    order: number
    /**
     * Style definition in string or object form.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/ImageItem#config-style)
     */
    style: string|object
}

/**
 * Item displaying an image.
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/ImageItem)
 */
export class ImageItem extends TaskItem {
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<ImageItemConfig>} config
     */
    constructor(config?: Partial<ImageItemConfig>);
}

/**
 * Type with configuration options for [JsxItem](https://bryntum.com/products/grid/docs/api/TaskBoard/view/item/JsxItem) class.
 */
type JsxItemConfig = {
    type: 'jsx'
    /**
     * CSS class to add.
     */
    cls: string
    /**
     * Widget type or config to use as the editor for this item. Used in the inline task editor.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/JsxItem#config-editor)
     */
    editor: string|object
    /**
     * Task field whose value item will act on (usually display it). Defaults to use the key in the items object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/JsxItem#config-field)
     */
    field: string
    /**
     * Specify `true` to hide the task item.
     */
    hidden: boolean
    /**
     * Function used to generate JSX item content.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/JsxItem#config-jsx)
     * @param {TaskModel} taskRecord Task record
     * @param {JsxItemConfig} config Item config
     * @param {object} value Value of the configured field
     */
    jsx: (taskRecord: TaskModel, config: Partial<JsxItemConfig>, value: object) => void
    /**
     * Flex order, can be used to re-order task items.
     */
    order: number
    /**
     * Style definition in string or object form.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/JsxItem#config-style)
     */
    style: string|object
}

/**
 * Item displaying content generated by a React (JSX) component
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/JsxItem)
 */
export class JsxItem extends TaskItem {
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<JsxItemConfig>} config
     */
    constructor(config?: Partial<JsxItemConfig>);
}

/**
 * Type with configuration options for [ProgressItem](https://bryntum.com/products/grid/docs/api/TaskBoard/view/item/ProgressItem) class.
 */
type ProgressItemConfig = {
    type: 'progress'
    /**
     * CSS class to add.
     */
    cls: string
    /**
     * Widget type or config to use as the editor for this item. Used in the inline task editor.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/ProgressItem#config-editor)
     */
    editor: string|object
    /**
     * Task field whose value item will act on (usually display it). Defaults to use the key in the items object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/ProgressItem#config-field)
     */
    field: string
    /**
     * Specify `true` to hide the task item.
     */
    hidden: boolean
    /**
     * Max value, at which the bar is full.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/ProgressItem#config-max)
     */
    max: number
    /**
     * Flex order, can be used to re-order task items.
     */
    order: number
    /**
     * Style definition in string or object form.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/ProgressItem#config-style)
     */
    style: string|object
}

/**
 * Item displaying a progress bar.
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/ProgressItem)
 */
export class ProgressItem extends TaskItem {
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<ProgressItemConfig>} config
     */
    constructor(config?: Partial<ProgressItemConfig>);
}

/**
 * Type with configuration options for [RatingItem](https://bryntum.com/products/grid/docs/api/TaskBoard/view/item/RatingItem) class.
 */
type RatingItemConfig = {
    type: 'rating'
    /**
     * CSS class to add.
     */
    cls: string
    /**
     * Widget type or config to use as the editor for this item. Used in the inline task editor.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/RatingItem#config-editor)
     */
    editor: string|object
    /**
     * Task field whose value item will act on (usually display it). Defaults to use the key in the items object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/RatingItem#config-field)
     */
    field: string
    /**
     * Specify `true` to hide the task item.
     */
    hidden: boolean
    /**
     * Max rating.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/RatingItem#config-max)
     */
    max: number
    /**
     * Flex order, can be used to re-order task items.
     */
    order: number
    /**
     * Style definition in string or object form.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/RatingItem#config-style)
     */
    style: string|object
}

/**
 * Item displaying a star rating.
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/RatingItem)
 */
export class RatingItem extends TaskItem {
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<RatingItemConfig>} config
     */
    constructor(config?: Partial<RatingItemConfig>);
}

/**
 * Type with configuration options for [ResourceAvatarsItem](https://bryntum.com/products/grid/docs/api/TaskBoard/view/item/ResourceAvatarsItem) class.
 */
type ResourceAvatarsItemConfig = {
    type: 'resourceAvatars'|'resourceavatars'
    /**
     * CSS class to add.
     */
    cls: string
    /**
     * Widget type or config to use as the editor for this item. Used in the inline task editor.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/ResourceAvatarsItem#config-editor)
     */
    editor: string|object
    /**
     * Task field whose value item will act on (usually display it). Defaults to use the key in the items object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/ResourceAvatarsItem#config-field)
     */
    field: string
    /**
     * Specify `true` to hide the task item.
     */
    hidden: boolean
    /**
     * Maximum avatars to display by default. The last avatar will render an overflow indicator if the task has more
     * resources assigned.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/ResourceAvatarsItem#config-maxAvatars)
     */
    maxAvatars: number
    /**
     * Flex order, can be used to re-order task items.
     */
    order: number
    /**
     * Specify `true` to slightly overlap avatars for tasks that have multiple resources assigned. By default, they are
     * displayed side by side.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/ResourceAvatarsItem#config-overlap)
     */
    overlap: boolean
    /**
     * Style definition in string or object form.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/ResourceAvatarsItem#config-style)
     */
    style: string|object
}

/**
 * Item displaying avatars or initials for a tasks assigned resources.
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/ResourceAvatarsItem)
 */
export class ResourceAvatarsItem extends TaskItem {
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<ResourceAvatarsItemConfig>} config
     */
    constructor(config?: Partial<ResourceAvatarsItemConfig>);
}

/**
 * Type with configuration options for [SeparatorItem](https://bryntum.com/products/grid/docs/api/TaskBoard/view/item/SeparatorItem) class.
 */
type SeparatorItemConfig = {
    type: 'separator'
    /**
     * CSS class to add.
     */
    cls: string
    /**
     * Widget type or config to use as the editor for this item. Used in the inline task editor.
     * Set to `null` to not use an editor for this item.
     */
    editor: string|object
    /**
     * Task field whose value item will act on (usually display it). Defaults to use the key in the items object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/SeparatorItem#config-field)
     */
    field: string
    /**
     * Specify `true` to hide the task item.
     */
    hidden: boolean
    /**
     * Flex order, can be used to re-order task items.
     */
    order: number
    /**
     * Style definition in string or object form.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/SeparatorItem#config-style)
     */
    style: string|object
}

/**
 * Item displaying a horizontal divider.
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/SeparatorItem)
 */
export class SeparatorItem extends TaskItem {
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<SeparatorItemConfig>} config
     */
    constructor(config?: Partial<SeparatorItemConfig>);
}

/**
 * Type with configuration options for [TagsItem](https://bryntum.com/products/grid/docs/api/TaskBoard/view/item/TagsItem) class.
 */
type TagsItemConfig = {
    type: 'tags'
    /**
     * CSS class to add.
     */
    cls: string
    /**
     * Property used to add a CSS class to each tag. It is plucked from an array of objects that is used as the value
     * for this item.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/TagsItem#config-clsProperty)
     */
    clsProperty: string
    /**
     * Widget type or config to use as the editor for this item. Used in the inline task editor.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/TagsItem#config-editor)
     */
    editor: string|object
    /**
     * Task field whose value item will act on (usually display it). Defaults to use the key in the items object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/TagsItem#config-field)
     */
    field: string
    /**
     * Specify `true` to hide the task item.
     */
    hidden: boolean
    /**
     * Flex order, can be used to re-order task items.
     */
    order: number
    /**
     * Property used to split a value string into tags.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/TagsItem#config-separator)
     */
    separator: string
    /**
     * Style definition in string or object form.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/TagsItem#config-style)
     */
    style: string|object
    /**
     * Property used to determine the text for the tag. It is plucked from an array of objects that is used as the value
     * for this item.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/TagsItem#config-textProperty)
     */
    textProperty: string
}

/**
 * Item displaying tags, either from string split into tags, an array of strings or by plucking a value from an array of
 * objects.
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/TagsItem)
 */
export class TagsItem extends TaskItem {
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<TagsItemConfig>} config
     */
    constructor(config?: Partial<TagsItemConfig>);
}

/**
 * Type with configuration options for [TaskItem](https://bryntum.com/products/grid/docs/api/TaskBoard/view/item/TaskItem) class.
 */
type TaskItemConfig = {
    /**
     * CSS class to add.
     */
    cls: string
    /**
     * Widget type or config to use as the editor for this item. Used in the inline task editor.
     * Set to `null` to not use an editor for this item.
     */
    editor: string|object
    /**
     * Task field whose value item will act on (usually display it). Defaults to use the key in the items object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/TaskItem#config-field)
     */
    field: string
    /**
     * Specify `true` to hide the task item.
     */
    hidden: boolean
    /**
     * Flex order, can be used to re-order task items.
     */
    order: number
    /**
     * Style definition in string or object form.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/TaskItem#config-style)
     */
    style: string|object
}

/**
 * Abstract base class for task items, lightweight "widgets" that can be added to tasks using the
 * [headerItems](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-headerItems), [bodyItems](#TaskBoard/view/TaskBoard#config-bodyItems) and
 * [footerItems](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#config-footerItems) configs.
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/TaskItem)
 */
export abstract class TaskItem {
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<TaskItemConfig>} config
     */
    constructor(config?: Partial<TaskItemConfig>);
}

/**
 * Type with configuration options for [TemplateItem](https://bryntum.com/products/grid/docs/api/TaskBoard/view/item/TemplateItem) class.
 */
type TemplateItemConfig = {
    type: 'template'
    /**
     * CSS class to add.
     */
    cls: string
    /**
     * Widget type or config to use as the editor for this item. Used in the inline task editor.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/TemplateItem#config-editor)
     */
    editor: string|object
    /**
     * Task field whose value item will act on (usually display it). Defaults to use the key in the items object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/TemplateItem#config-field)
     */
    field: string
    /**
     * Specify `true` to hide the task item.
     */
    hidden: boolean
    /**
     * Flex order, can be used to re-order task items.
     */
    order: number
    /**
     * Specify as `true` to render the template item even if the backing field's value is `null` or `undefined`. Useful
     * for example to display some custom string for null values ("Empty", "Unset" etc).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/TemplateItem#config-renderNull)
     */
    renderNull: boolean
    /**
     * Style definition in string or object form.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/TemplateItem#config-style)
     */
    style: string|object
    /**
     * Template function used to generate task content.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/TemplateItem#config-template)
     * @param {TaskModel} taskRecord Task record
     * @param {TemplateItemConfig} config Item config
     * @param {object} value Value of the configured field
     * @returns {string|DomConfig|DomConfig>} HTML string, DomConfig or DomConfig array
     */
    template: (taskRecord: TaskModel, config: Partial<TemplateItemConfig>, value: object) => string|DomConfig|DomConfig[]
}

/**
 * Item displaying content generated by a template function, see [template](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/TemplateItem#config-template)
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/TemplateItem)
 */
export class TemplateItem extends TaskItem {
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<TemplateItemConfig>} config
     */
    constructor(config?: Partial<TemplateItemConfig>);
}

/**
 * Type with configuration options for [TextItem](https://bryntum.com/products/grid/docs/api/TaskBoard/view/item/TextItem) class.
 */
type TextItemConfig = {
    type: 'text'
    /**
     * CSS class to add.
     */
    cls: string
    /**
     * Widget type or config to use as the editor for this item. Used in the inline task editor.
     * Set to `null` to not use an editor for this item.
     */
    editor: string|object
    /**
     * Task field whose value item will act on (usually display it). Defaults to use the key in the items object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/TextItem#config-field)
     */
    field: string
    /**
     * Specify `true` to hide the task item.
     */
    hidden: boolean
    /**
     * Flex order, can be used to re-order task items.
     */
    order: number
    /**
     * Style definition in string or object form.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/TextItem#config-style)
     */
    style: string|object
}

/**
 * Item that displays the value of the configured [field](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/TextItem#config-field) in a XSS safe way.
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/TextItem)
 */
export class TextItem extends TaskItem {
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<TextItemConfig>} config
     */
    constructor(config?: Partial<TextItemConfig>);
}

/**
 * Type with configuration options for [TodoListItem](https://bryntum.com/products/grid/docs/api/TaskBoard/view/item/TodoListItem) class.
 */
type TodoListItemConfig = {
    type: 'todoList'|'todolist'
    /**
     * Name of a property on a todo item to use for the checkbox. The property is expected to be a boolean.
     */
    checkedField: string
    /**
     * CSS class to add.
     */
    cls: string
    /**
     * Name of a property on a todo item whose value will be added as a CSS class to the todo item.
     */
    clsField: string
    /**
     * Widget type or config to use as the editor for this item. Used in the inline task editor.
     * Set to `null` to not use an editor for this item.
     */
    editor: string|object
    /**
     * Task field whose value item will act on (usually display it). Defaults to use the key in the items object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/TodoListItem#config-field)
     */
    field: string
    /**
     * Specify `true` to hide the task item.
     */
    hidden: boolean
    /**
     * Flex order, can be used to re-order task items.
     */
    order: number
    /**
     * Style definition in string or object form.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/TodoListItem#config-style)
     */
    style: string|object
    /**
     * Name of a property on a todo item to display as its text.
     */
    textField: string
}

/**
 * Item displaying a list of todo items with associated checkboxes. It allows users to toggle the checkbox for each item
 * on the card to indicate if that item is completed or not. By adding a [TodoListField](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TodoListField) to the
 * task editor users can also add, edit and remove todo items.
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/TodoListItem)
 */
export class TodoListItem extends TaskItem {
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<TodoListItemConfig>} config
     */
    constructor(config?: Partial<TodoListItemConfig>);
}

/**
 * Type with configuration options for [ExpandCollapse](https://bryntum.com/products/grid/docs/api/TaskBoard/view/mixin/ExpandCollapse) class.
 */
type ExpandCollapseClassConfig = {
    /**
     * Specify `true` to hide the column title instead of rotating it on collapse.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/ExpandCollapse#config-collapseTitle)
     */
    collapseTitle: boolean
    /**
     * Show an icon to expand/collapse columns and swimlanes in their headers.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/ExpandCollapse#config-showCollapseInHeader)
     */
    showCollapseInHeader: boolean
    /**
     * By default, a tooltip showing `Expand XX`/`Collapse XX` is shown when hovering the expand/collapse icon for
     * a column or swimlane. To disable the tooltip, set this to `false`.
     */
    showCollapseTooltip: boolean
    /**
     * Triggered when a column is collapsed.
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {ColumnModel} event.columnRecord Column record
     */
    onColumnCollapse: ((event: { source: TaskBoard, columnRecord: ColumnModel }) => void)|string
    /**
     * Triggered when a column is expanded.
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {ColumnModel} event.columnRecord Column record
     */
    onColumnExpand: ((event: { source: TaskBoard, columnRecord: ColumnModel }) => void)|string
    /**
     * Triggered when the column collapsed state is toggled.
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {ColumnModel} event.columnRecord Column record
     * @param {boolean} event.collapse `true` if the column is being collapsed.
     */
    onColumnToggle: ((event: { source: TaskBoard, columnRecord: ColumnModel, collapse: boolean }) => void)|string
    /**
     * Triggered when a swimlane is collapsed.
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record
     */
    onSwimlaneCollapse: ((event: { source: TaskBoard, swimlaneRecord: SwimlaneModel }) => void)|string
    /**
     * Triggered when a swimlane is expanded.
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record
     */
    onSwimlaneExpand: ((event: { source: TaskBoard, swimlaneRecord: SwimlaneModel }) => void)|string
    /**
     * Triggered when the swimlane collapsed state is toggled.
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record
     * @param {boolean} event.collapse `true` if the column is being collapsed.
     */
    onSwimlaneToggle: ((event: { source: TaskBoard, swimlaneRecord: SwimlaneModel, collapse: boolean }) => void)|string
}

export class ExpandCollapseClass {
    /**
     * By default, a tooltip showing `Expand XX`/`Collapse XX` is shown when hovering the expand/collapse icon for
     * a column or swimlane. To disable the tooltip, set this to `false`.
     */
    showCollapseTooltip: boolean
    /**
     * Triggered when a column is collapsed.
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {ColumnModel} event.columnRecord Column record
     */
    onColumnCollapse: ((event: { source: TaskBoard, columnRecord: ColumnModel }) => void)|string
    /**
     * Triggered when a column is expanded.
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {ColumnModel} event.columnRecord Column record
     */
    onColumnExpand: ((event: { source: TaskBoard, columnRecord: ColumnModel }) => void)|string
    /**
     * Triggered when the column collapsed state is toggled.
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {ColumnModel} event.columnRecord Column record
     * @param {boolean} event.collapse `true` if the column is being collapsed.
     */
    onColumnToggle: ((event: { source: TaskBoard, columnRecord: ColumnModel, collapse: boolean }) => void)|string
    /**
     * Triggered when a swimlane is collapsed.
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record
     */
    onSwimlaneCollapse: ((event: { source: TaskBoard, swimlaneRecord: SwimlaneModel }) => void)|string
    /**
     * Triggered when a swimlane is expanded.
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record
     */
    onSwimlaneExpand: ((event: { source: TaskBoard, swimlaneRecord: SwimlaneModel }) => void)|string
    /**
     * Triggered when the swimlane collapsed state is toggled.
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record
     * @param {boolean} event.collapse `true` if the column is being collapsed.
     */
    onSwimlaneToggle: ((event: { source: TaskBoard, swimlaneRecord: SwimlaneModel, collapse: boolean }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<ExpandCollapseClassConfig>} config
     */
    constructor(config?: Partial<ExpandCollapseClassConfig>);
    /**
     * Collapse a swimlane or column.
     * @param {SwimlaneModel|ColumnModel} record Swimlane or column
     */
    collapse(record: SwimlaneModel|ColumnModel): Promise<void>;
    /**
     * Expand a swimlane or column.
     * @param {SwimlaneModel|ColumnModel} record Swimlane or column
     */
    expand(record: SwimlaneModel|ColumnModel): Promise<void>;
    /**
     * Expand or collapse a swimlane or column.
     * @param {SwimlaneModel|ColumnModel} record Swimlane or column
     * @param {boolean} collapse Specify to force a certain state, leave out to toggle
     */
    toggleCollapse(record: SwimlaneModel|ColumnModel, collapse?: boolean): Promise<void>;
}

export const ExpandCollapse : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & ExpandCollapseClass>

/**
 * Type with configuration options for [ResponsiveCards](https://bryntum.com/products/grid/docs/api/TaskBoard/view/mixin/ResponsiveCards) class.
 */
type ResponsiveCardsClassConfig = {
    /**
     * An array of [CardSize](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/ResponsiveCards#typedef-CardSize) objects to use as responsive levels based on card widths.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/ResponsiveCards#config-cardSizes)
     */
    cardSizes: CardSize
}

export class ResponsiveCardsClass {
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<ResponsiveCardsClassConfig>} config
     */
    constructor(config?: Partial<ResponsiveCardsClassConfig>);
}

export const ResponsiveCards : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & ResponsiveCardsClass>

/**
 * Type with configuration options for [TaskBoardColumns](https://bryntum.com/products/grid/docs/api/TaskBoard/view/mixin/TaskBoardColumns) class.
 */
type TaskBoardColumnsClassConfig = {
    /**
     * Set to `true` to auto generate columns when [columns](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardColumns#config-columns) is undefined.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardColumns#config-autoGenerateColumns)
     */
    autoGenerateColumns: boolean
    /**
     * Field on a task record used to determine which column the task belongs to.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardColumns#config-columnField)
     */
    columnField: string
    /**
     * Store containing the TaskBoard columns. A tasks [columnField](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardColumns#config-columnField) is matched against the `id` of a
     * column to determine in which column it is displayed.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardColumns#config-columns)
     */
    columns: ColumnModel[]|Partial<ColumnModelConfig>[]|string[]|Store|string|Partial<StoreConfig>
}

export class TaskBoardColumnsClass {
    /**
     * Field on a task record used to determine which column the task belongs to.
     */
    columnField: string
    /**
     * Store containing the TaskBoard columns.
     */
    columns: Store
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<TaskBoardColumnsClassConfig>} config
     */
    constructor(config?: Partial<TaskBoardColumnsClassConfig>);
}

export const TaskBoardColumns : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & TaskBoardColumnsClass>

export class TaskBoardDomClass {
    /**
     * Retrieves the element for the supplied column.
     * @param {ColumnModel} columnRecord
     */
    getColumnElement(columnRecord: ColumnModel): HTMLElement;
    /**
     * Retrieves the elements for the supplied column. When using swimlanes, a column has one element per swimlane.
     * @param {ColumnModel} columnRecord
     */
    getColumnElements(columnRecord: ColumnModel): HTMLElement;
    /**
     * Retrieves the header element for the supplied column.
     * @param {ColumnModel} columnRecord
     */
    getColumnHeaderElement(columnRecord: ColumnModel): HTMLElement;
    /**
     * Retrieves the element for the supplied swimlane / column intersection.
     * @param {SwimlaneModel} swimlaneRecord
     * @param {ColumnModel} columnRecord
     */
    getSwimlaneColumnElement(swimlaneRecord: SwimlaneModel, columnRecord: ColumnModel): HTMLElement;
    /**
     * Retrieves the element for the supplied swimlane.
     * @param {SwimlaneModel} swimlaneRecord
     */
    getSwimlaneElement(swimlaneRecord: SwimlaneModel): HTMLElement;
    /**
     * Retrieves the element for the column that holds the supplied task record.
     * @param {TaskModel} taskRecord
     */
    getTaskColumnElement(taskRecord: TaskModel): HTMLElement;
    /**
     * Retrieves the task element (card) corresponding to the supplied task record.
     * @param {TaskModel} taskRecord
     */
    getTaskElement(taskRecord: TaskModel): HTMLElement;
    /**
     * Retrieves the element for the swimlane that holds the supplied task record.
     * @param {TaskModel} taskRecord
     */
    getTaskSwimlaneElement(taskRecord: TaskModel): HTMLElement;
    /**
     * Retrieves a column record resolved from the supplied element. Has to be a `.b-taskboard-column` element or
     * descendant thereof (such as a card).
     * @param {HTMLElement} element
     */
    resolveColumnRecord(element: HTMLElement): ColumnModel;
    /**
     * Retrieves a swimlane record resolved from the supplied element. Has to be a `.b-taskboard-swimlane` element or
     * descendant thereof.
     * @param {HTMLElement} element
     */
    resolveSwimlaneRecord(element: HTMLElement): SwimlaneModel;
    /**
     * Retrieves a task record corresponding to the supplied element. Has to be a `.b-taskboard-card` element or
     * descendant thereof.
     * @param {HTMLElement} element
     */
    resolveTaskRecord(element: HTMLElement): TaskModel;
}

export const TaskBoardDom : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & TaskBoardDomClass>

/**
 * Type with configuration options for [TaskBoardDomEvents](https://bryntum.com/products/grid/docs/api/TaskBoard/view/mixin/TaskBoardDomEvents) class.
 */
type TaskBoardDomEventsClassConfig = {
    /**
     * The name of the event that should activate a task and trigger editing (if an editing feature is active).
     * Available options are: 'taskClick', 'taskDblClick' or null (disable)
     */
    activateTaskEvent: 'taskClick'|'taskDblClick'|null
    /**
     * Triggered when a task is "activated" by pressing `Enter` or double clicking it.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardDomEvents#event-activateTask)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {TaskModel} event.taskRecord Task record
     * @param {MouseEvent} event.event Browser event
     */
    onActivateTask: ((event: { source: TaskBoard, taskRecord: TaskModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when a tasks element is removed.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardDomEvents#event-removeTaskElement)
     * @param {object} event Event object
     * @param {TaskBoard} event.source TaskBoard instance
     * @param {string|number} event.taskId Id of the task (not the record itself since it might be removed)
     * @param {HTMLElement} event.element Tasks element
     */
    onRemoveTaskElement: ((event: { source: TaskBoard, taskId: string|number, element: HTMLElement }) => void)|string
    /**
     * Triggered when a task is rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardDomEvents#event-renderTask)
     * @param {object} event Event object
     * @param {TaskBoard} event.source TaskBoard instance
     * @param {TaskModel} event.taskRecord Task being rendered
     * @param {boolean} event.isRefresh `true` if the element was updated, `false` if it was added
     * @param {HTMLElement} event.element Tasks element
     */
    onRenderTask: ((event: { source: TaskBoard, taskRecord: TaskModel, isRefresh: boolean, element: HTMLElement }) => void)|string
    /**
     * Triggered when all tasks in the task board are rendered
     * @param {object} event Event object
     * @param {TaskBoard} event.source TaskBoard instance
     * @param {TaskModel[]} event.taskRecords Tasks being rendered
     */
    onRenderTasks: ((event: { source: TaskBoard, taskRecords: TaskModel[] }) => void)|string
    /**
     * Triggered when a swimlane header is clicked.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardDomEvents#event-swimlaneHeaderClick)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record
     * @param {MouseEvent} event.event Browser event
     */
    onSwimlaneHeaderClick: ((event: { source: TaskBoard, swimlaneRecord: SwimlaneModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when a swimlane header is right-clicked.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardDomEvents#event-swimlaneHeaderContextMenu)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record
     * @param {MouseEvent} event.event Browser event
     */
    onSwimlaneHeaderContextMenu: ((event: { source: TaskBoard, swimlaneRecord: SwimlaneModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when a swimlane header is double-clicked.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardDomEvents#event-swimlaneHeaderDblClick)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record
     * @param {MouseEvent} event.event Browser event
     */
    onSwimlaneHeaderDblClick: ((event: { source: TaskBoard, swimlaneRecord: SwimlaneModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when a card is clicked.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardDomEvents#event-taskClick)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {TaskModel} event.taskRecord Task record
     * @param {ColumnModel} event.columnRecord Column record for the tasks column
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record for the tasks swimlane (if used)
     * @param {MouseEvent} event.event Browser event
     */
    onTaskClick: ((event: { source: TaskBoard, taskRecord: TaskModel, columnRecord: ColumnModel, swimlaneRecord: SwimlaneModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when a card is double clicked
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardDomEvents#event-taskDblClick)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {TaskModel} event.taskRecord Task record
     * @param {ColumnModel} event.columnRecord Column record for the tasks column
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record for the tasks swimlane (if used)
     * @param {MouseEvent} event.event Browser event
     */
    onTaskDblClick: ((event: { source: TaskBoard, taskRecord: TaskModel, columnRecord: ColumnModel, swimlaneRecord: SwimlaneModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when the mouse enters a card
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardDomEvents#event-taskMouseEnter)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {TaskModel} event.taskRecord Task record
     * @param {ColumnModel} event.columnRecord Column record for the tasks column
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record for the tasks swimlane (if used)
     * @param {MouseEvent} event.event Browser event
     */
    onTaskMouseEnter: ((event: { source: TaskBoard, taskRecord: TaskModel, columnRecord: ColumnModel, swimlaneRecord: SwimlaneModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when the mouse leaves a card
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardDomEvents#event-taskMouseLeave)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {TaskModel} event.taskRecord Task record
     * @param {ColumnModel} event.columnRecord Column record for the tasks column
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record for the tasks swimlane (if used)
     * @param {MouseEvent} event.event Browser event
     */
    onTaskMouseLeave: ((event: { source: TaskBoard, taskRecord: TaskModel, columnRecord: ColumnModel, swimlaneRecord: SwimlaneModel, event: MouseEvent }) => void)|string
}

export class TaskBoardDomEventsClass {
    /**
     * Triggered when a task is "activated" by pressing `Enter` or double clicking it.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardDomEvents#event-activateTask)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {TaskModel} event.taskRecord Task record
     * @param {MouseEvent} event.event Browser event
     */
    onActivateTask: ((event: { source: TaskBoard, taskRecord: TaskModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when a tasks element is removed.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardDomEvents#event-removeTaskElement)
     * @param {object} event Event object
     * @param {TaskBoard} event.source TaskBoard instance
     * @param {string|number} event.taskId Id of the task (not the record itself since it might be removed)
     * @param {HTMLElement} event.element Tasks element
     */
    onRemoveTaskElement: ((event: { source: TaskBoard, taskId: string|number, element: HTMLElement }) => void)|string
    /**
     * Triggered when a task is rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardDomEvents#event-renderTask)
     * @param {object} event Event object
     * @param {TaskBoard} event.source TaskBoard instance
     * @param {TaskModel} event.taskRecord Task being rendered
     * @param {boolean} event.isRefresh `true` if the element was updated, `false` if it was added
     * @param {HTMLElement} event.element Tasks element
     */
    onRenderTask: ((event: { source: TaskBoard, taskRecord: TaskModel, isRefresh: boolean, element: HTMLElement }) => void)|string
    /**
     * Triggered when all tasks in the task board are rendered
     * @param {object} event Event object
     * @param {TaskBoard} event.source TaskBoard instance
     * @param {TaskModel[]} event.taskRecords Tasks being rendered
     */
    onRenderTasks: ((event: { source: TaskBoard, taskRecords: TaskModel[] }) => void)|string
    /**
     * Triggered when a swimlane header is clicked.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardDomEvents#event-swimlaneHeaderClick)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record
     * @param {MouseEvent} event.event Browser event
     */
    onSwimlaneHeaderClick: ((event: { source: TaskBoard, swimlaneRecord: SwimlaneModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when a swimlane header is right-clicked.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardDomEvents#event-swimlaneHeaderContextMenu)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record
     * @param {MouseEvent} event.event Browser event
     */
    onSwimlaneHeaderContextMenu: ((event: { source: TaskBoard, swimlaneRecord: SwimlaneModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when a swimlane header is double-clicked.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardDomEvents#event-swimlaneHeaderDblClick)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record
     * @param {MouseEvent} event.event Browser event
     */
    onSwimlaneHeaderDblClick: ((event: { source: TaskBoard, swimlaneRecord: SwimlaneModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when a card is clicked.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardDomEvents#event-taskClick)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {TaskModel} event.taskRecord Task record
     * @param {ColumnModel} event.columnRecord Column record for the tasks column
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record for the tasks swimlane (if used)
     * @param {MouseEvent} event.event Browser event
     */
    onTaskClick: ((event: { source: TaskBoard, taskRecord: TaskModel, columnRecord: ColumnModel, swimlaneRecord: SwimlaneModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when a card is double clicked
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardDomEvents#event-taskDblClick)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {TaskModel} event.taskRecord Task record
     * @param {ColumnModel} event.columnRecord Column record for the tasks column
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record for the tasks swimlane (if used)
     * @param {MouseEvent} event.event Browser event
     */
    onTaskDblClick: ((event: { source: TaskBoard, taskRecord: TaskModel, columnRecord: ColumnModel, swimlaneRecord: SwimlaneModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when the mouse enters a card
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardDomEvents#event-taskMouseEnter)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {TaskModel} event.taskRecord Task record
     * @param {ColumnModel} event.columnRecord Column record for the tasks column
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record for the tasks swimlane (if used)
     * @param {MouseEvent} event.event Browser event
     */
    onTaskMouseEnter: ((event: { source: TaskBoard, taskRecord: TaskModel, columnRecord: ColumnModel, swimlaneRecord: SwimlaneModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when the mouse leaves a card
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardDomEvents#event-taskMouseLeave)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {TaskModel} event.taskRecord Task record
     * @param {ColumnModel} event.columnRecord Column record for the tasks column
     * @param {SwimlaneModel} event.swimlaneRecord Swimlane record for the tasks swimlane (if used)
     * @param {MouseEvent} event.event Browser event
     */
    onTaskMouseLeave: ((event: { source: TaskBoard, taskRecord: TaskModel, columnRecord: ColumnModel, swimlaneRecord: SwimlaneModel, event: MouseEvent }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<TaskBoardDomEventsClassConfig>} config
     */
    constructor(config?: Partial<TaskBoardDomEventsClassConfig>);
}

export const TaskBoardDomEvents : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & TaskBoardDomEventsClass>

/**
 * Type with configuration options for [TaskBoardScroll](https://bryntum.com/products/grid/docs/api/TaskBoard/view/mixin/TaskBoardScroll) class.
 */
type TaskBoardScrollClassConfig = {
    /**
     * Default scroll options, see the options for [scrollIntoView](https://bryntum.com/products/taskboard/docs/api/Core/helper/util/Scroller#function-scrollIntoView)
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardScroll#config-scrollOptions)
     */
    scrollOptions: BryntumScrollOptions
}

export class TaskBoardScrollClass {
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<TaskBoardScrollClassConfig>} config
     */
    constructor(config?: Partial<TaskBoardScrollClassConfig>);
    /**
     * Scroll specified column into view.
     * @param {ColumnModel|number|string} columnOrId Column or its id
     * @param {BryntumScrollOptions} options Scroll options, see [scrollOptions](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardScroll#config-scrollOptions)
     */
    scrollToColumn(columnOrId: ColumnModel|number|string, options?: BryntumScrollOptions): Promise<void>;
    /**
     * Scroll to the intersection between specified swimlane and column.
     * @param {SwimlaneModel|number|string} swimlaneOrId Swimlane or its id
     * @param {ColumnModel|number|string} columnOrId Column or its id
     * @param {BryntumScrollOptions} options Scroll options, see [scrollOptions](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardScroll#config-scrollOptions)
     */
    scrollToIntersection(swimlaneOrId: SwimlaneModel|number|string, columnOrId: ColumnModel|number|string, options?: BryntumScrollOptions): Promise<void>;
    /**
     * Scroll specified swimlane into view.
     * @param {SwimlaneModel|number|string} swimlaneOrId Swimlane or its id
     * @param {BryntumScrollOptions} options Scroll options, see [scrollOptions](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardScroll#config-scrollOptions)
     */
    scrollToSwimlane(swimlaneOrId: SwimlaneModel|number|string, options?: BryntumScrollOptions): Promise<void>;
    /**
     * Scroll the specified task into view.
     * @param {TaskModel|number|string} taskOrId
     * @param {BryntumScrollOptions} options Scroll options, see [scrollOptions](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardScroll#config-scrollOptions)
     */
    scrollToTask(taskOrId: TaskModel|number|string, options?: BryntumScrollOptions): Promise<void>;
}

export const TaskBoardScroll : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & TaskBoardScrollClass>

/**
 * Type with configuration options for [TaskBoardStores](https://bryntum.com/products/grid/docs/api/TaskBoard/view/mixin/TaskBoardStores) class.
 */
type TaskBoardStoresClassConfig = {
    /**
     * Inline [assignments](https://bryntum.com/products/scheduler/docs#Scheduler/model/AssignmentModel), will be loaded into an internally created
     * [AssignmentStore](https://bryntum.com/products/scheduler/docs#Scheduler/data/AssignmentStore)  as a part of a [project](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel).
     */
    assignments: AssignmentModel[]|object[]|Partial<AssignmentModelConfig>[]
    /**
     * Default values to apply to task records created by task boards features (such as the column header menu and
     * the column toolbar)
     */
    newTaskDefaults: Partial<TaskModelConfig>
    /**
     * A [project config object](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel#configs) or an instance that holds all stores and
     * data used by the TaskBoard.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardStores#config-project)
     */
    project: ProjectModel|Partial<ProjectModelConfig>
    /**
     * Inline [resources](https://bryntum.com/products/scheduler/docs#Scheduler/model/ResourceModel), will be loaded into an internally created
     * [ResourceStore](https://bryntum.com/products/scheduler/docs#Scheduler/data/ResourceStore) as a part of a [project](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel).
     */
    resources: ResourceModel[]|object[]|Partial<ResourceModelConfig>[]
    /**
     * TaskBoard does not use a sync mask by default. If you want one, see
     * [syncMask](https://bryntum.com/products/taskboard/docs/api/Core/mixin/LoadMaskable#config-syncMask) for configuration options.
     */
    syncMask: string|object|null
    /**
     * Inline [tasks](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/TaskModel), will be loaded into an internally created
     * [TaskStore](https://bryntum.com/products/taskboard/docs/api/TaskBoard/store/TaskStore) as a part of a [project](#TaskBoard/model/ProjectModel).
     */
    tasks: TaskModel[]|object[]|Partial<TaskModelConfig>[]
    /**
     * Triggered when one or more tasks are to be removed by a call to `removeTask()`.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardStores#event-beforeTaskRemove)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {TaskModel[]} event.taskRecords Task records to be removed
     */
    onBeforeTaskRemove: ((event: { source: TaskBoard, taskRecords: TaskModel[] }) => Promise<boolean|void>)|string
}

export class TaskBoardStoresClass {
    /**
     * Inline [assignments](https://bryntum.com/products/scheduler/docs#Scheduler/model/AssignmentModel), will be loaded into an internally created
     * [AssignmentStore](https://bryntum.com/products/scheduler/docs#Scheduler/data/AssignmentStore)  as a part of a [project](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel).
     */
    assignments: AssignmentModel[]|object[]|Partial<AssignmentModelConfig>[]
    /**
     * The [ProjectModel](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel) instance, containing the data visualized by the TaskBoard.
     */
    project: ProjectModel|Partial<ProjectModelConfig>
    /**
     * Inline [resources](https://bryntum.com/products/scheduler/docs#Scheduler/model/ResourceModel), will be loaded into an internally created
     * [ResourceStore](https://bryntum.com/products/scheduler/docs#Scheduler/data/ResourceStore) as a part of a [project](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel).
     */
    resources: ResourceModel[]|object[]|Partial<ResourceModelConfig>[]
    /**
     * Inline [tasks](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/TaskModel), will be loaded into an internally created
     * [TaskStore](https://bryntum.com/products/taskboard/docs/api/TaskBoard/store/TaskStore) as a part of a [project](#TaskBoard/model/ProjectModel).
     */
    tasks: TaskModel[]|object[]|Partial<TaskModelConfig>[]
    /**
     * Triggered when one or more tasks are to be removed by a call to `removeTask()`.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardStores#event-beforeTaskRemove)
     * @param {object} event Event object
     * @param {TaskBoard} event.source This TaskBoard
     * @param {TaskModel[]} event.taskRecords Task records to be removed
     */
    onBeforeTaskRemove: ((event: { source: TaskBoard, taskRecords: TaskModel[] }) => Promise<boolean|void>)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<TaskBoardStoresClassConfig>} config
     */
    constructor(config?: Partial<TaskBoardStoresClassConfig>);
    /**
     * Add a new task to the specified column / swimlane intersection (swimlane is optional), scroll it into view and
     * start editing it (if an editing feature is enabled).
     * @param {ColumnModel} columnRecord Column to add the task to
     * @param {ColumnModel} swimlaneRecord Swimlane to add the task to
     * @param {object} taskData Data for the new task
     */
    addTask(columnRecord: ColumnModel, swimlaneRecord?: ColumnModel, taskData?: object): Promise<void>;
    /**
     * Removes one or more tasks from the linked task store (and thus the TaskBoard).
     * @param {TaskModel|TaskModel[]} taskRecord A single task or an array thereof to remove from the task store.
     */
    removeTask(taskRecord: TaskModel|TaskModel[]): Promise<boolean>;
}

export const TaskBoardStores : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & TaskBoardStoresClass>

/**
 * Type with configuration options for [TaskBoardSwimlanes](https://bryntum.com/products/grid/docs/api/TaskBoard/view/mixin/TaskBoardSwimlanes) class.
 */
type TaskBoardSwimlanesClassConfig = {
    /**
     * Set to `true` to auto generate swimlanes when [swimlanes](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardSwimlanes#config-swimlanes) is undefined.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardSwimlanes#config-autoGenerateSwimlanes)
     */
    autoGenerateSwimlanes: boolean
    /**
     * Field on a task record used to determine which swimlane the task belongs to.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardSwimlanes#config-swimlaneField)
     */
    swimlaneField: string
    /**
     * Store containing the TaskBoard swimlanes. A tasks [swimlaneField](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardSwimlanes#config-swimlaneField) is matched against the `id`
     * of a swimlane to determine in which swimlane it is displayed.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardSwimlanes#config-swimlanes)
     */
    swimlanes: SwimlaneModel[]|Partial<SwimlaneModelConfig>[]|Store|string|Partial<StoreConfig>
}

export class TaskBoardSwimlanesClass {
    /**
     * Field on a task record used to determine which swimlane the task belongs to.
     */
    swimlaneField: string
    /**
     * Store containing the TaskBoard swimlanes.
     */
    swimlanes: Store
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<TaskBoardSwimlanesClassConfig>} config
     */
    constructor(config?: Partial<TaskBoardSwimlanesClassConfig>);
}

export const TaskBoardSwimlanes : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & TaskBoardSwimlanesClass>

/**
 * Type with configuration options for [TaskBoardVirtualization](https://bryntum.com/products/grid/docs/api/TaskBoard/view/mixin/TaskBoardVirtualization) class.
 */
type TaskBoardVirtualizationClassConfig = {
    /**
     * Whether to draw cards on scroll, or only when scrolling ends.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardVirtualization#config-drawOnScroll)
     */
    drawOnScroll: boolean
    /**
     * The function is called for each task as part of the render loop, and is expected to return the height in
     * pixels for the task. Using this function is only recommended when using partial virtualized rendering, see
     * the [virtualize](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardVirtualization#config-virtualize) setting.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardVirtualization#config-getTaskHeight)
     * @param {TaskModel} taskRecord The task record
     * @returns {number} The height of the task in pixels
     */
    getTaskHeight: (taskRecord: TaskModel) => number
    /**
     * By turning on this setting you enable partial virtualized rendering for the board, which reduces initial
     * rendering time and makes interaction less sluggish when using thousands of tasks. The tradeoff is that
     * scrolling in most cases will be slower.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardVirtualization#config-virtualize)
     */
    virtualize: boolean
}

export class TaskBoardVirtualizationClass {
    /**
     * Whether to draw cards on scroll, or only when scrolling ends.
     */
    drawOnScroll: boolean
    /**
     * The function is called for each task as part of the render loop, and is expected to return the height in
     * pixels for the task. Using this function is only recommended when using partial virtualized rendering, see
     * the [virtualize](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskBoardVirtualization#config-virtualize) setting.
     */
    getTaskHeight: Function
    /**
     * By turning on this setting you enable partial virtualized rendering for the board, which reduces initial
     * rendering time and makes interaction less sluggish when using thousands of tasks. The tradeoff is that
     * scrolling in most cases will be slower.
     */
    virtualize: boolean
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<TaskBoardVirtualizationClassConfig>} config
     */
    constructor(config?: Partial<TaskBoardVirtualizationClassConfig>);
}

export const TaskBoardVirtualization : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & TaskBoardVirtualizationClass>

/**
 * Type with configuration options for [TaskItems](https://bryntum.com/products/grid/docs/api/TaskBoard/view/mixin/TaskItems) class.
 */
type TaskItemsClassConfig = {
    /**
     * Items to add to each card's body.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskItems#config-bodyItems)
     */
    bodyItems: Record<string, TaskItemOptions>
    /**
     * Items to add to each card's footer.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskItems#config-footerItems)
     */
    footerItems: Record<string, TaskItemOptions>
    /**
     * Items to add to each card's header.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskItems#config-headerItems)
     */
    headerItems: Record<string, TaskItemOptions>
    /**
     * A function called on each render before adding items to a tasks card, allowing runtime manipulation of them.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskItems#config-processItems)
     * @param {object} context
     * @param {TaskItemOptions>} context.headerItems Item config objects for the task header, keyed by ref
     * @param {TaskItemOptions>} context.bodyItems Item config objects for the task body, keyed by ref
     * @param {TaskItemOptions>} context.footerItems Item config objects for the task footer, keyed by ref
     * @param {TaskModel} context.taskRecord Record representing task to be rendered
     * @returns {boolean|void} Returning `false` from this function prevents the menu being shown
     */
    processItems: (context: { headerItems: Record<string, TaskItemOptions>, bodyItems: Record<string, TaskItemOptions>, footerItems: Record<string, TaskItemOptions>, taskRecord: TaskModel }) => boolean|void
}

export class TaskItemsClass {
    /**
     * Items to add to each card's body.
     */
    bodyItems: Record<string, TaskItemOptions>
    /**
     * Items in card footer.
     */
    footerItems: Record<string, TaskItemOptions>
    /**
     * Items in card header.
     */
    headerItems: Record<string, TaskItemOptions>
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<TaskItemsClassConfig>} config
     */
    constructor(config?: Partial<TaskItemsClassConfig>);
}

export const TaskItems : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & TaskItemsClass>

/**
 * Type with configuration options for [TaskNavigation](https://bryntum.com/products/grid/docs/api/TaskBoard/view/mixin/TaskNavigation) class.
 */
type TaskNavigationClassConfig = {
    /**
     * Configure with `true` to change the default behaviour of keyboard navigation from moving focus to selecting
     * tasks:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskNavigation#config-selectOnNavigation)
     */
    selectOnNavigation: boolean|string
}

export class TaskNavigationClass {
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<TaskNavigationClassConfig>} config
     */
    constructor(config?: Partial<TaskNavigationClassConfig>);
}

export const TaskNavigation : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & TaskNavigationClass>

/**
 * Type with configuration options for [TaskSelection](https://bryntum.com/products/grid/docs/api/TaskBoard/view/mixin/TaskSelection) class.
 */
type TaskSelectionClassConfig = {
    /**
     * A template method (empty by default) allowing you to control if a task can be selected or not.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/mixin/TaskSelection#config-isTaskSelectable)
     * @param {TaskModel} taskRecord The task record
     * @returns {boolean} `true` if the task can be selected, otherwise `false`
     */
    isTaskSelectable: (taskRecord: TaskModel) => boolean
    /**
     * Selected tasks.
     */
    selectedTasks: TaskModel[]
    /**
     * Triggered when task selection changes.
     * @param {object} event Event object
     * @param {TaskBoard} event.source TaskBoard instance
     * @param {'select'|'deselect'} event.action Either 'select' or 'deselect', depending on operation
     * @param {TaskModel[]} event.selection All currently selected tasks
     * @param {TaskModel[]} event.select Tasks selected by the operation
     * @param {TaskModel[]} event.deselect Tasks deselected by the operation
     */
    onSelectionChange: ((event: { source: TaskBoard, action: 'select'|'deselect', selection: TaskModel[], select: TaskModel[], deselect: TaskModel[] }) => void)|string
}

export class TaskSelectionClass {
    /**
     * A template method (empty by default) allowing you to control if a task can be selected or not.
     */
    isTaskSelectable: Function
    /**
     * Selected tasks.
     */
    selectedTasks: TaskModel[]
    /**
     * Triggered when task selection changes.
     * @param {object} event Event object
     * @param {TaskBoard} event.source TaskBoard instance
     * @param {'select'|'deselect'} event.action Either 'select' or 'deselect', depending on operation
     * @param {TaskModel[]} event.selection All currently selected tasks
     * @param {TaskModel[]} event.select Tasks selected by the operation
     * @param {TaskModel[]} event.deselect Tasks deselected by the operation
     */
    onSelectionChange: ((event: { source: TaskBoard, action: 'select'|'deselect', selection: TaskModel[], select: TaskModel[], deselect: TaskModel[] }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<TaskSelectionClassConfig>} config
     */
    constructor(config?: Partial<TaskSelectionClassConfig>);
    /**
     * Deselect all tasks.
     */
    deselectAll(): void;
    /**
     * Deselect the supplied task.
     * @param {TaskModel} taskRecord
     */
    deselectTask(taskRecord: TaskModel): void;
    /**
     * Check if the supplied task is selected or not
     * @param {TaskModel} taskRecord
     */
    isSelected(taskRecord: TaskModel): boolean;
    /**
     * Select the supplied task, deselecting any previously selected by default.
     * @param {TaskModel} taskRecord Task to select
     * @param {boolean} add Specify `true` to add to selection instead of replacing it
     */
    selectTask(taskRecord: TaskModel, add?: boolean): void;
}

export const TaskSelection : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & TaskSelectionClass>

/**
 * Type with configuration options for [ColumnCombo](https://bryntum.com/products/grid/docs/api/TaskBoard/widget/ColumnCombo) class.
 */
type ColumnComboConfig = InputFieldConfig & ContainerItemConfig & {
    type: 'columncombo'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * By default PickerField's picker is transient, and will [hidePicker](https://bryntum.com/products/taskboard/docs/api/Core/widget/PickerField#function-hidePicker) when the user clicks or
     * taps outside or when focus moves outside picker.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-autoClose)
     * @deprecated This will be removed in 6.0
     */
    autoClose: boolean
    /**
     * Sets the native `autocomplete` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)
     */
    autoComplete: string
    /**
     * Configure as `true` to have the picker expand upon focus enter.
     */
    autoExpand: boolean
    /**
     * Specify `true` to auto select field contents on focus
     */
    autoSelect: boolean
    /**
     * Initial text to show in badge.
     */
    badge: string
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Configure as `true` to force case matching when filtering the dropdown list based upon the typed value.
     */
    caseSensitive: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * A config object to configure the [ChipView](https://bryntum.com/products/taskboard/docs/api/Core/widget/ChipView) to display the
     * selected value set when [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) is `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-chipView)
     */
    chipView: Partial<ChipViewConfig>
    /**
     * `true` to clear value typed to a multiselect combo when picker is collapsed
     */
    clearTextOnPickerHide: boolean
    /**
     * Show a trigger to clear field, and allow `SHIFT+BACKSPACE` key to clear field if this field is
     * not [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-readOnly). The trigger is available in the [triggers](#Core/widget/Field#property-triggers) object
     * under the name `clear`. May also be an object which configures the `clear`
     * [trigger](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#property-triggers).
     */
    clearable: boolean|Partial<FieldTriggerConfig>
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-cls)
     */
    cls: string|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The config controls how the value of nested items are handled when a parent container gets or sets its
     * [values](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-containValues)
     * @param {Field} field Field instance
     * @returns {boolean}
     */
    containValues: boolean|string|((field: Field) => boolean)
    /**
     * The configuration for additional items associated to this field. This is typically used to add contextual
     * fields related to a [checkbox](https://bryntum.com/products/taskboard/docs/api/Core/widget/Checkbox) or [radio button](#Core/widget/Radio). See
     * these classes for examples of nested fields.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-container)
     */
    container: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Partial<FieldContainerConfig>|FieldContainer
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * If configured as `true`, this means that when an unmatched string is typed into the
     * combo's input field, and `ENTER`, or the [multiValueSeparator](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiValueSeparator) is typed,
     * a new record will be created using the typed string as the [displayField](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-displayField).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-createOnUnmatched)
     * @param {string} name Record name
     * @param {Combo} combo Combo instance
     * @returns {Model} New record
     */
    createOnUnmatched: ((name: string, combo: Combo) => Model)|string|boolean
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Field used for item text when populating from store
     */
    displayField: string
    /**
     * Template function that can be used to customize the displayed value
     * @param {Model} record The record to provide a textual value for
     * @param {Combo} combo A reference to this Combo
     * @returns {string|void}
     */
    displayValueRenderer: (record: Model, combo: Combo) => string|void
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * User can edit text in text field (otherwise only pick from attached picker)
     */
    editable: boolean
    /**
     * Text to display in the drop down when there are no items in the underlying store
     */
    emptyText: string
    /**
     * A function which creates an array of values for the {#config-filterParamName} to pass
     * any filters to the server upon load.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-encodeFilterParams)
     * @param {<Object>} filters filters
     * @returns {<Object>} array of values
     */
    encodeFilterParams: (filters: object[]) => object[]
    /**
     * If `false`, filtering will be triggered once you exceed [minChars](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-minChars). To filter only when
     * hitting Enter key, set this to `true`;
     */
    filterOnEnter: boolean
    /**
     * The name of an operator type as implemented in [operator](https://bryntum.com/products/taskboard/docs/api/Core/util/CollectionFilter#config-operator)
     * to use when filtering the dropdown list based upon the typed value.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-filterOperator)
     */
    filterOperator: '='|'!='|'>'|'>='|'<'|'<='|'*'|'startsWith'|'endsWith'|'isIncludedIn'
    /**
     * If the dropdown is to be populated with a filtered query to a remote server, specify the
     * name of the parameter to pass the typed string here. By default, the string is simply sent
     * as the value of the parameter. For special encoding, configure the combo with [encodeFilterParams](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-encodeFilterParams)
     */
    filterParamName: string
    /**
     * When [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) is `true`, you may configure `filterSelected` as
     * `true` to hide items in the dropdown when they are added to the selection.
     * It will appear as if the requested item has "moved" into the field's
     * [ChipView](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-chipView).
     */
    filterSelected: boolean
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * By default, the picker is hidden on selection in single select mode, and
     * remains to allow more selections when [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) is `true`.
     * Setting this to a `Boolean` value can override that default.
     */
    hidePickerOnSelect: boolean
    /**
     * Configure as `true` to hide the expand trigger. This is automatically set to `true` if
     * remote filtering is enabled by setting the [filterParamName](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-filterParamName) config.
     */
    hideTrigger: boolean
    /**
     * Specify `false` to prevent field from being highlighted when on external value changes
     */
    highlightExternalChange: boolean
    /**
     * An optional string to display inside the input field as an overlay. This can be useful for displaying
     * a field's units.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-hint)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hint: string|((data: { source: Field, value: any }) => string)
    /**
     * This config is similar to [hint](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-hint) except that this config is used to display HTML content.
     * Since this can allow malicious content to be executed, be sure not to include user-entered data or to
     * encode such data (see [encodeHtml](https://bryntum.com/products/taskboard/docs/api/Core/helper/StringHelper#function-encodeHtml-static)).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-hintHtml)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hintHtml: string|((data: { source: Field, value: any }) => string)
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Set this config to `true` to always display items horizontally along with this field. This assigns an
     * [hbox](https://bryntum.com/products/taskboard/docs/api/Core/widget/layout/Box) as the [layout](#Core/widget/Container#config-layout) to the
     * [container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-container).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-inline)
     */
    inline: boolean
    /**
     * Configure this as `true` to render the dropdown list as a permanently visible list
     * in the document flow immediately below the input area instead of as a popup.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-inlinePicker)
     */
    inlinePicker: boolean
    /**
     * Text alignment for the input field.
     */
    inputAlign: string
    /**
     * Sets custom attributes of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes)
     */
    inputAttributes: object
    /**
     * Sets the `type` attribute of the underlying input element (password, hidden, date, color, etc).
     */
    inputType: string
    /**
     * The width to apply to the `&lt;input&gt;` element. If a number is specified, `px` will be used.
     */
    inputWidth: string|number
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * Rows to display in the dropdown (list items).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-items)
     */
    items: object[]|string[]|object
    /**
     * The delay in milliseconds to wait after the last keystroke before triggering a change event.
     * Set to 0 to not trigger change events from keystrokes (listen for input event instead to have
     * immediate feedback, change will still be triggered on blur).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-keyStrokeChangeDelay)
     */
    keyStrokeChangeDelay: number
    /**
     * The delay in milliseconds to wait after the last keystroke before filtering the list.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-keyStrokeFilterDelay)
     */
    keyStrokeFilterDelay: number
    /**
     * Label, prepended to field
     */
    label: string
    /**
     * CSS class name or class names to add to any configured [label](https://bryntum.com/products/taskboard/docs/api/Core/widget/mixin/Labelable#config-label)
     */
    labelCls: string|object
    /**
     * Label position, either 'before' the field or 'above' the field
     */
    labelPosition: 'before'|'above'
    /**
     * The width to apply to the `&lt;label&gt;` element. If a number is specified, `px` will be used.
     */
    labelWidth: string|number
    /**
     * The labels to add either before or after the input field.
     * Each label may have the following properties:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-labels)
     */
    labels: object[]
    /**
     * CSS class to add to picker
     */
    listCls: string
    /**
     * Template string used to render the list items in the dropdown list
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-listItemTpl)
     * @param {Model} record The record representing the item being rendered
     * @returns {string|void}
     */
    listItemTpl: (record: Model) => string|void
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The max number of characters for the input field
     */
    maxLength: number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * The minimum string length to trigger the filtering, only relevant when [editable](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-editable) is `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-minChars)
     */
    minChars: number
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The min number of characters for the input field
     */
    minLength: number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * Configure as `true` to allow selection of multiple values from the dropdown list.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-multiSelect)
     */
    multiSelect: boolean
    /**
     * A key value which, when typed in a [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) Combo, selects the
     * currently active item in the picker, and clears the input field ready for another
     * match to be typed.
     */
    multiValueSeparator: string
    /**
     * Name of the field which is used as a key to get/set values from/to the field.
     * Used prior to [ref](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-ref) and [id](#Core/widget/Widget#config-id) in
     * [Container.values](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-name)
     */
    name: string
    /**
     * This implies that the picker will display an anchor pointer, but also means that the picker will align closer
     * to the input field so that the pointer pierces the [pickerAlignElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-pickerAlignElement)
     */
    overlayAnchor: boolean
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-owner)
     */
    owner: Widget
    /**
     * Configuration object for the [picker](https://bryntum.com/products/taskboard/docs/api/Core/widget/List) on initialization. Returns the
     * [picker](https://bryntum.com/products/taskboard/docs/api/Core/widget/List) instance at runtime.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-picker)
     */
    picker: Partial<ListConfig>|List
    /**
     * The name of the element property to which the picker should size and align itself.
     */
    pickerAlignElement: string
    /**
     * Width of picker, defaults to this combo's [pickerAlignElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-pickerAlignElement) width
     */
    pickerWidth: number
    /**
     * Text to display in empty field.
     */
    placeholder: string
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Optionally a [Filter](https://bryntum.com/products/taskboard/docs/api/Core/util/CollectionFilter) config object which the combo should use for
     * filtering using the typed value.
     * This may use a `filterBy` property to test its `value` against any field in the passed record.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-primaryFilter)
     */
    primaryFilter: Partial<CollectionFilterConfig>
    /**
     * Makes the field unmodifiable by user action. The input area is not editable, and triggers
     * are unresponsive.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-readOnly)
     */
    readOnly: boolean
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to indicate that a `null` field value is to be marked as invalid.
     */
    required: boolean
    /**
     * If this field is not [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-readOnly), then setting this option means that pressing
     * the `ESCAPE` key after editing the field will revert the field to the value it had when
     * the user focused the field. If the field is *not* changed from when focused, the [clearable](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated.
     */
    revertOnEscape: boolean
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * Sets the native `spellcheck` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck)
     */
    spellCheck: boolean
    /**
     * Store used to populate items. Also accepts a Store config object
     */
    store: Store|Partial<StoreConfig>
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/taskboard/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/taskboard/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tab index of the input field
     */
    tabIndex: number
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * Auto detected when used within a TaskBoard. If you add the widget elsewhere, it will try to find an instance
     * of TaskBoard on page. If that fails you have to supply this config to connect it to a TaskBoard manually.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-taskBoard)
     */
    taskBoard: TaskBoard
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)
     */
    title: string
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * How to query the store upon click of the expand trigger. Specify one of these values:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-triggerAction)
     */
    triggerAction: 'all'|'last'|null
    /**
     * The triggers to add either before or after the input field. Each property name is the reference by which
     * an instantiated Trigger Widget may be retrieved from the live `[triggers](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#property-triggers)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-triggers)
     */
    triggers: Record<string, FieldTriggerConfig>
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-ui)
     */
    ui: string|object
    /**
     * `true` to cause the field to be in an invalid state while the typed filter string does not match a record in the store.
     */
    validateFilter: boolean
    /**
     * Set to `false` to not highlight a field as invalid while typing, to instead show it on ENTER key press
     * or similar.
     */
    validateOnInput: boolean
    /**
     * The initial value of this Combo box. In single select mode (default) it's a simple string value, for
     * [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) mode, it should be an array of record ids.
     */
    value: string|number|string[]|number[]
    /**
     * Field used for item value when populating from store. Setting this to `null` will
     * yield the selected record as the Combo's [value](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#property-value).
     */
    valueField: string|null
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#config-y)
     */
    y: number
    /**
     * The default action was performed (an item in the list was selected)
     * @param {object} event Event object
     * @param {Combo} event.source The combo
     * @param {any} event.value The [value](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-valueField) of the selected record
     * @param {Model} event.record Selected record
     * @param {Model[]} event.records Selected records as an array if [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) is `true`
     * @param {boolean} event.userAction `true` if the value change is due to user interaction
     */
    onAction: ((event: { source: Combo, value: any, record: Model, records: Model[], userAction: boolean }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when this field's value changes.
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     * @param {string|number|boolean|any} event.value This field's value
     * @param {string|number|boolean|any} event.oldValue This field's previous value
     * @param {boolean} event.valid True if this field is in a valid state
     * @param {Event} event.event The triggering DOM event if any
     * @param {boolean} event.userAction Triggered by user taking an action (`true`) or by setting a value (`false`)
     * @param {boolean} event.checked
     */
    onChange: ((event: { source: Field|any, value: string|number|boolean|any, oldValue: string|number|boolean|any, valid: boolean, event: Event, userAction: boolean, checked: boolean }) => void)|string
    /**
     * Fired when this field is [cleared](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#function-clear).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#event-clear)
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     */
    onClear: ((event: { source: Field|any }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * User typed into the field. Please note that the value attached to this event is the raw input field value and
     * not the combos value
     * @param {object} event Event object
     * @param {Combo} event.source The combo.
     * @param {string} event.value Raw input value
     * @param {Event} event.event The triggering DOM event if any.
     */
    onInput: ((event: { source: Combo, value: string, event: Event }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * An item in the list was selected
     * @param {object} event Event object
     * @param {Combo} event.source The combo
     * @param {Model} event.record Selected record
     * @param {Model[]} event.records Selected records as an array if [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) is `true`
     * @param {boolean} event.userAction `true` if the value change is due to user interaction
     */
    onSelect: ((event: { source: Combo, record: Model, records: Model[], userAction: boolean }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
    /**
     * User clicked one of this field's [triggers](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#property-triggers)
     * @param {object} event Event object
     * @param {Field|any} event.source This field
     * @param {Widget} event.trigger The trigger activated by click or touch tap.
     */
    onTrigger: ((event: { source: Field|any, trigger: Widget }) => void)|string
}

/**
 * A combo populated with the [columns](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#property-columns) of a [TaskBoard](#TaskBoard/view/TaskBoard).
 * If a column has a [color](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ColumnModel#field-color) defined, that color will be displayed in the combo
 * and its picker.
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo)
 */
export class ColumnCombo extends ColorBoxCombo {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<ColumnComboConfig>} config
     */
    constructor(config?: Partial<ColumnComboConfig>);
}

/**
 * Type with configuration options for [ColumnFilterField](https://bryntum.com/products/grid/docs/api/TaskBoard/widget/ColumnFilterField) class.
 */
type ColumnFilterFieldConfig = ContainerItemConfig & {
    type: 'columnfilterfield'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * Sets the native `autocomplete` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)
     */
    autoComplete: string
    /**
     * Specify `true` to auto select field contents on focus
     */
    autoSelect: boolean
    /**
     * Initial text to show in badge.
     */
    badge: string
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * Show a trigger to clear field, and allow `SHIFT+BACKSPACE` key to clear field if this field is
     * not [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-readOnly). The trigger is available in the [triggers](#Core/widget/Field#property-triggers) object
     * under the name `clear`. May also be an object which configures the `clear`
     * [trigger](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#property-triggers).
     */
    clearable: boolean|Partial<FieldTriggerConfig>
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#config-cls)
     */
    cls: string|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The config controls how the value of nested items are handled when a parent container gets or sets its
     * [values](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#config-containValues)
     * @param {Field} field Field instance
     * @returns {boolean}
     */
    containValues: boolean|string|((field: Field) => boolean)
    /**
     * The configuration for additional items associated to this field. This is typically used to add contextual
     * fields related to a [checkbox](https://bryntum.com/products/taskboard/docs/api/Core/widget/Checkbox) or [radio button](#Core/widget/Radio). See
     * these classes for examples of nested fields.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#config-container)
     */
    container: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Partial<FieldContainerConfig>|FieldContainer
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * Set to false to prevent user from editing the field. For TextFields it is basically the same as setting
     * [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-readOnly), but for PickerFields there is a distinction where it allows you to pick a value
     * but not to type one in the field.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#config-editable)
     */
    editable: boolean
    /**
     * The ColumnModel field name to filter by, defaults to `'text'`.
     */
    field: string
    /**
     * Optional filter function to be called with record and value as parameters for store filtering.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#config-filterFunction)
     * @param {Model} record Record for comparison
     * @param {string} value Value to compare with
     * @returns {boolean} Returns `true` if record matches comparison requirements
     */
    filterFunction: (record: Model, value: string) => boolean
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * Specify `false` to prevent field from being highlighted when on external value changes
     */
    highlightExternalChange: boolean
    /**
     * An optional string to display inside the input field as an overlay. This can be useful for displaying
     * a field's units.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#config-hint)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hint: string|((data: { source: Field, value: any }) => string)
    /**
     * This config is similar to [hint](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-hint) except that this config is used to display HTML content.
     * Since this can allow malicious content to be executed, be sure not to include user-entered data or to
     * encode such data (see [encodeHtml](https://bryntum.com/products/taskboard/docs/api/Core/helper/StringHelper#function-encodeHtml-static)).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#config-hintHtml)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hintHtml: string|((data: { source: Field, value: any }) => string)
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Set this config to `true` to always display items horizontally along with this field. This assigns an
     * [hbox](https://bryntum.com/products/taskboard/docs/api/Core/widget/layout/Box) as the [layout](#Core/widget/Container#config-layout) to the
     * [container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-container).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#config-inline)
     */
    inline: boolean
    /**
     * Text alignment for the input field.
     */
    inputAlign: string
    /**
     * Sets custom attributes of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes)
     */
    inputAttributes: object
    /**
     * Sets the `type` attribute of the underlying input element (password, hidden, date, color, etc).
     */
    inputType: string
    /**
     * The width to apply to the `&lt;input&gt;` element. If a number is specified, `px` will be used.
     */
    inputWidth: string|number
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * The delay in milliseconds to wait after the last keystroke before triggering a change event.
     * Set to 0 to not trigger change events from keystrokes (listen for input event instead to have
     * immediate feedback, change will still be triggered on blur).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#config-keyStrokeChangeDelay)
     */
    keyStrokeChangeDelay: number
    /**
     * Label, defaults to a localized version of `'Filter columns'`.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#config-label)
     */
    label: string
    /**
     * CSS class name or class names to add to any configured [label](https://bryntum.com/products/taskboard/docs/api/Core/widget/mixin/Labelable#config-label)
     */
    labelCls: string|object
    /**
     * Label position, either 'before' the field or 'above' the field
     */
    labelPosition: 'before'|'above'
    /**
     * The width to apply to the `&lt;label&gt;` element. If a number is specified, `px` will be used.
     */
    labelWidth: string|number
    /**
     * The labels to add either before or after the input field.
     * Each label may have the following properties:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#config-labels)
     */
    labels: object[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The max number of characters for the input field
     */
    maxLength: number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The min number of characters for the input field
     */
    minLength: number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * Name of the field which is used as a key to get/set values from/to the field.
     * Used prior to [ref](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-ref) and [id](#Core/widget/Widget#config-id) in
     * [Container.values](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#config-name)
     */
    name: string
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#config-owner)
     */
    owner: Widget
    /**
     * Text to display in empty field.
     */
    placeholder: string
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Makes the field unmodifiable by user action. The input area is not editable, and triggers
     * are unresponsive.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#config-readOnly)
     */
    readOnly: boolean
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to indicate that a `null` field value is to be marked as invalid.
     */
    required: boolean
    /**
     * If this field is not [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-readOnly), then setting this option means that pressing
     * the `ESCAPE` key after editing the field will revert the field to the value it had when
     * the user focused the field. If the field is *not* changed from when focused, the [clearable](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated.
     */
    revertOnEscape: boolean
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * Sets the native `spellcheck` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck)
     */
    spellCheck: boolean
    /**
     * The store to filter.
     */
    store: Store
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/taskboard/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/taskboard/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tab index of the input field
     */
    tabIndex: number
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * Auto detected when used within a TaskBoard. If you add the widget elsewhere, it will try to find an instance
     * of TaskBoard on page. If that fails you have to supply this config to connect it to a TaskBoard manually.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#config-taskBoard)
     */
    taskBoard: TaskBoard
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)
     */
    title: string
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * The triggers to add either before or after the input field. Each property name is the reference by which
     * an instantiated Trigger Widget may be retrieved from the live `[triggers](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#property-triggers)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#config-triggers)
     */
    triggers: Record<string, FieldTriggerConfig>
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#config-ui)
     */
    ui: string|object
    /**
     * Set to `false` to not highlight a field as invalid while typing, to instead show it on ENTER key press
     * or similar.
     */
    validateOnInput: boolean
    /**
     * Default value
     */
    value: string
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#config-y)
     */
    y: number
    /**
     * User performed default action (typed into this field).
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     * @param {string|number|boolean|any} event.value This field's value
     * @param {string|number|boolean|any} event.oldValue This field's previous value
     * @param {boolean} event.valid True if this field is in a valid state
     * @param {Event} event.event The triggering DOM event if any
     * @param {Model} event.record Selected record. Available for fields with records selection functionality
     * @param {Model[]} event.records Selected records as an array. Available for fields with records selection functionality
     * @param {boolean} event.userAction Triggered by user taking an action (`true`) or by setting a value (`false`)
     * @param {boolean} event.checked
     */
    onAction: ((event: { source: Field|any, value: string|number|boolean|any, oldValue: string|number|boolean|any, valid: boolean, event: Event, record: Model, records: Model[], userAction: boolean, checked: boolean }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when this field's value changes.
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     * @param {string|number|boolean|any} event.value This field's value
     * @param {string|number|boolean|any} event.oldValue This field's previous value
     * @param {boolean} event.valid True if this field is in a valid state
     * @param {Event} event.event The triggering DOM event if any
     * @param {boolean} event.userAction Triggered by user taking an action (`true`) or by setting a value (`false`)
     * @param {boolean} event.checked
     */
    onChange: ((event: { source: Field|any, value: string|number|boolean|any, oldValue: string|number|boolean|any, valid: boolean, event: Event, userAction: boolean, checked: boolean }) => void)|string
    /**
     * Fired when this field is [cleared](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#function-clear).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#event-clear)
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     */
    onClear: ((event: { source: Field|any }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Fired when the user types into this field.
     * @param {object} event Event object
     * @param {Field|any} event.source This field
     * @param {string|number|boolean|any} event.value This field's value
     * @param {Event} event.event The triggering DOM event
     */
    onInput: ((event: { source: Field|any, value: string|number|boolean|any, event: Event }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
    /**
     * User clicked one of this field's [triggers](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#property-triggers)
     * @param {object} event Event object
     * @param {Field|any} event.source This field
     * @param {Widget} event.trigger The trigger activated by click or touch tap.
     */
    onTrigger: ((event: { source: Field|any, trigger: Widget }) => void)|string
}

/**
 * A field that filters the columns of a linked [TaskBoard](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard) when typing into it.
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField)
 */
export class ColumnFilterField extends FilterField {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnFilterField#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<ColumnFilterFieldConfig>} config
     */
    constructor(config?: Partial<ColumnFilterFieldConfig>);
}

/**
 * Type with configuration options for [ColumnPickerButton](https://bryntum.com/products/grid/docs/api/TaskBoard/widget/ColumnPickerButton) class.
 */
type ColumnPickerButtonConfig = ContainerItemConfig & {
    type: 'columnpickerbutton'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnPickerButton#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnPickerButton#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnPickerButton#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnPickerButton#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * Initial text to show in badge.
     */
    badge: string
    /**
     * The button behavioral type, will be applied as a `type` attribute to this button's element.
     */
    behaviorType: 'button'|'submit'|'reset'
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnPickerButton#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnPickerButton#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnPickerButton#config-cls)
     */
    cls: string|object
    /**
     * Button color (should have match in button.scss or your custom styling). Valid values in Bryntum themes
     * are:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnPickerButton#config-color)
     */
    color: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnPickerButton#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnPickerButton#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnPickerButton#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnPickerButton#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * If provided, turns the button into a link.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnPickerButton#config-href)
     */
    href: string
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnPickerButton#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Button icon class.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnPickerButton#config-icon)
     */
    icon: string
    /**
     * Button icon alignment. May be `'start'` or `'end'`. Defaults to `'start'`
     */
    iconAlign: 'start'|'end'
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnPickerButton#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnPickerButton#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnPickerButton#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnPickerButton#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnPickerButton#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * A submenu configuration object, or an array of MenuItem configuration objects from which to create a
     * submenu which is shown when this button is pressed.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnPickerButton#config-menu)
     */
    menu: Record<string, Partial<MenuItemConfig>|Partial<ContainerItemConfig>>|(Partial<MenuItemConfig>|Partial<ContainerItemConfig>)[]
    /**
     * The menu icon class to show when the button has a menu. Set to `null` to not show a menu icon.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnPickerButton#config-menuIcon)
     */
    menuIcon: string
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnPickerButton#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnPickerButton#config-owner)
     */
    owner: Widget
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnPickerButton#config-positioned)
     */
    positioned: boolean
    /**
     * Initially pressed or not. Only applies with `toggleable = true`.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnPickerButton#config-pressed)
     */
    pressed: boolean
    /**
     * Icon class for the buttons pressed state. Only applies to toggle buttons
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnPickerButton#config-pressedIcon)
     */
    pressedIcon: string
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnPickerButton#config-readOnly)
     */
    readOnly: boolean
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnPickerButton#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnPickerButton#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnPickerButton#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnPickerButton#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * Set to `true` to perform action on clicking the button if it's already pressed
     * and belongs to a [toggleGroup](https://bryntum.com/products/taskboard/docs/api/Core/widget/Button#config-toggleGroup).
     */
    supportsPressedClick: boolean
    /**
     * A configuration for the [tab](https://bryntum.com/products/taskboard/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/taskboard/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnPickerButton#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * The `target` attribute for the [href](https://bryntum.com/products/taskboard/docs/api/Core/widget/Button#config-href) config
     */
    target: string
    /**
     * Auto detected when used within a TaskBoard. If you add the widget elsewhere, it will try to find an instance
     * of TaskBoard on page. If that fails you have to supply this config to connect it to a TaskBoard manually.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnPickerButton#config-taskBoard)
     */
    taskBoard: TaskBoard
    /**
     * The button's text.
     */
    text: string
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnPickerButton#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)
     */
    title: string
    /**
     * Indicates that this button is part of a group where only one button can be pressed. Assigning a value
     * also sets `toggleable` to `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnPickerButton#config-toggleGroup)
     */
    toggleGroup: string
    /**
     * Enabled toggling of the button (stays pressed when pressed).
     */
    toggleable: boolean
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnPickerButton#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnPickerButton#config-ui)
     */
    ui: string|object
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnPickerButton#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnPickerButton#config-y)
     */
    y: number
    /**
     * Fires when the default action is performed (the button is clicked)
     * @param {object} event Event object
     * @param {Button} event.source The button
     * @param {Event} event.event DOM event
     */
    onAction: ((event: { source: Button, event: Event }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * This event is triggered when the button's menu is about to be shown.
     * @param {object} event Event object
     * @param {Button} event.source This Button instance.
     * @param {Menu} event.menu This button's menu instance.
     */
    onBeforeShowMenu: ((event: { source: Button, menu: Menu }) => void)|string
    /**
     * Fires before the button is toggled (the [pressed](https://bryntum.com/products/taskboard/docs/api/Core/widget/Button#property-pressed) state is changed). If the button is part of
     * a [toggleGroup](https://bryntum.com/products/taskboard/docs/api/Core/widget/Button#config-toggleGroup) and you need to process the pressed button only, consider using
     * [click](https://bryntum.com/products/taskboard/docs/api/Core/widget/Button#event-click) event or [action](#Core/widget/Button#event-action) event.
     * Return `false` to prevent the toggle to the new pressed state.
     * @param {object} event Event object
     * @param {Button} event.source Toggled button
     * @param {boolean} event.pressed New pressed state
     * @param {boolean} event.userAction `true` if the toggle was triggered by a user action (click), `false` if it was triggered programmatically.
     */
    onBeforeToggle: ((event: { source: Button, pressed: boolean, userAction: boolean }) => boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnPickerButton#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when the button is clicked
     * @param {object} event Event object
     * @param {Button} event.source The button
     * @param {Event} event.event DOM event
     */
    onClick: ((event: { source: Button, event: Event }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnPickerButton#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
    /**
     * Fires when the button is toggled via a UI interaction (the [pressed](https://bryntum.com/products/taskboard/docs/api/Core/widget/Button#property-pressed) state is changed). If the button is part of a
     * [toggleGroup](https://bryntum.com/products/taskboard/docs/api/Core/widget/Button#config-toggleGroup) and you need to process the pressed button only, consider using
     * [click](https://bryntum.com/products/taskboard/docs/api/Core/widget/Button#event-click) event or [action](#Core/widget/Button#event-action) event.
     * @param {object} event Event object
     * @param {Button} event.source Toggled button
     * @param {boolean} event.pressed New pressed state
     * @param {boolean} event.userAction `true` if the toggle was triggered by a user action (click), `false` if it was triggered programmatically.
     */
    onToggle: ((event: { source: Button, pressed: boolean, userAction: boolean }) => void)|string
}

/**
 * A button with a menu allowing the user to toggle which columns are shown on the [TaskBoard](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard).
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnPickerButton)
 */
export class ColumnPickerButton extends Button {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnPickerButton#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<ColumnPickerButtonConfig>} config
     */
    constructor(config?: Partial<ColumnPickerButtonConfig>);
}

/**
 * Type with configuration options for [ColumnScrollButton](https://bryntum.com/products/grid/docs/api/TaskBoard/widget/ColumnScrollButton) class.
 */
type ColumnScrollButtonConfig = ContainerItemConfig & {
    type: 'columnScrollButton'|'columnscrollbutton'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnScrollButton#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnScrollButton#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnScrollButton#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnScrollButton#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * Initial text to show in badge.
     */
    badge: string
    /**
     * The button behavioral type, will be applied as a `type` attribute to this button's element.
     */
    behaviorType: 'button'|'submit'|'reset'
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnScrollButton#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnScrollButton#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnScrollButton#config-cls)
     */
    cls: string|object
    /**
     * Button color (should have match in button.scss or your custom styling). Valid values in Bryntum themes
     * are:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnScrollButton#config-color)
     */
    color: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnScrollButton#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnScrollButton#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnScrollButton#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnScrollButton#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * If provided, turns the button into a link.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnScrollButton#config-href)
     */
    href: string
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnScrollButton#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Button icon class.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnScrollButton#config-icon)
     */
    icon: string
    /**
     * Button icon alignment. May be `'start'` or `'end'`. Defaults to `'start'`
     */
    iconAlign: 'start'|'end'
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnScrollButton#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnScrollButton#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnScrollButton#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnScrollButton#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnScrollButton#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * A submenu configuration object, or an array of MenuItem configuration objects from which to create a
     * submenu which is shown when this button is pressed.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnScrollButton#config-menu)
     */
    menu: Record<string, Partial<MenuItemConfig>|Partial<ContainerItemConfig>>|(Partial<MenuItemConfig>|Partial<ContainerItemConfig>)[]
    /**
     * The menu icon class to show when the button has a menu. Set to `null` to not show a menu icon.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnScrollButton#config-menuIcon)
     */
    menuIcon: string
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnScrollButton#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnScrollButton#config-owner)
     */
    owner: Widget
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnScrollButton#config-positioned)
     */
    positioned: boolean
    /**
     * Initially pressed or not. Only applies with `toggleable = true`.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnScrollButton#config-pressed)
     */
    pressed: boolean
    /**
     * Icon class for the buttons pressed state. Only applies to toggle buttons
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnScrollButton#config-pressedIcon)
     */
    pressedIcon: string
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnScrollButton#config-readOnly)
     */
    readOnly: boolean
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnScrollButton#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnScrollButton#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnScrollButton#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnScrollButton#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * Set to `true` to perform action on clicking the button if it's already pressed
     * and belongs to a [toggleGroup](https://bryntum.com/products/taskboard/docs/api/Core/widget/Button#config-toggleGroup).
     */
    supportsPressedClick: boolean
    /**
     * A configuration for the [tab](https://bryntum.com/products/taskboard/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/taskboard/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnScrollButton#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * The `target` attribute for the [href](https://bryntum.com/products/taskboard/docs/api/Core/widget/Button#config-href) config
     */
    target: string
    /**
     * Auto detected when used within a TaskBoard. If you add the widget elsewhere, it will try to find an instance
     * of TaskBoard on page. If that fails you have to supply this config to connect it to a TaskBoard manually.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnScrollButton#config-taskBoard)
     */
    taskBoard: TaskBoard
    /**
     * The button's text.
     */
    text: string
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnScrollButton#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)
     */
    title: string
    /**
     * Indicates that this button is part of a group where only one button can be pressed. Assigning a value
     * also sets `toggleable` to `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnScrollButton#config-toggleGroup)
     */
    toggleGroup: string
    /**
     * Enabled toggling of the button (stays pressed when pressed).
     */
    toggleable: boolean
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnScrollButton#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnScrollButton#config-ui)
     */
    ui: string|object
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnScrollButton#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnScrollButton#config-y)
     */
    y: number
    /**
     * Fires when the default action is performed (the button is clicked)
     * @param {object} event Event object
     * @param {Button} event.source The button
     * @param {Event} event.event DOM event
     */
    onAction: ((event: { source: Button, event: Event }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * This event is triggered when the button's menu is about to be shown.
     * @param {object} event Event object
     * @param {Button} event.source This Button instance.
     * @param {Menu} event.menu This button's menu instance.
     */
    onBeforeShowMenu: ((event: { source: Button, menu: Menu }) => void)|string
    /**
     * Fires before the button is toggled (the [pressed](https://bryntum.com/products/taskboard/docs/api/Core/widget/Button#property-pressed) state is changed). If the button is part of
     * a [toggleGroup](https://bryntum.com/products/taskboard/docs/api/Core/widget/Button#config-toggleGroup) and you need to process the pressed button only, consider using
     * [click](https://bryntum.com/products/taskboard/docs/api/Core/widget/Button#event-click) event or [action](#Core/widget/Button#event-action) event.
     * Return `false` to prevent the toggle to the new pressed state.
     * @param {object} event Event object
     * @param {Button} event.source Toggled button
     * @param {boolean} event.pressed New pressed state
     * @param {boolean} event.userAction `true` if the toggle was triggered by a user action (click), `false` if it was triggered programmatically.
     */
    onBeforeToggle: ((event: { source: Button, pressed: boolean, userAction: boolean }) => boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnScrollButton#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when the button is clicked
     * @param {object} event Event object
     * @param {Button} event.source The button
     * @param {Event} event.event DOM event
     */
    onClick: ((event: { source: Button, event: Event }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnScrollButton#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
    /**
     * Fires when the button is toggled via a UI interaction (the [pressed](https://bryntum.com/products/taskboard/docs/api/Core/widget/Button#property-pressed) state is changed). If the button is part of a
     * [toggleGroup](https://bryntum.com/products/taskboard/docs/api/Core/widget/Button#config-toggleGroup) and you need to process the pressed button only, consider using
     * [click](https://bryntum.com/products/taskboard/docs/api/Core/widget/Button#event-click) event or [action](#Core/widget/Button#event-action) event.
     * @param {object} event Event object
     * @param {Button} event.source Toggled button
     * @param {boolean} event.pressed New pressed state
     * @param {boolean} event.userAction `true` if the toggle was triggered by a user action (click), `false` if it was triggered programmatically.
     */
    onToggle: ((event: { source: Button, pressed: boolean, userAction: boolean }) => void)|string
}

/**
 * A button with a menu allowing the user to pick a column to scroll to.
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnScrollButton)
 */
export class ColumnScrollButton extends Button {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnScrollButton#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<ColumnScrollButtonConfig>} config
     */
    constructor(config?: Partial<ColumnScrollButtonConfig>);
}

/**
 * Type with configuration options for [ProjectCombo](https://bryntum.com/products/grid/docs/api/TaskBoard/widget/ProjectCombo) class.
 */
type ProjectComboConfig = ContainerItemConfig & {
    type: 'taskboardprojectcombo'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * By default PickerField's picker is transient, and will [hidePicker](https://bryntum.com/products/taskboard/docs/api/Core/widget/PickerField#function-hidePicker) when the user clicks or
     * taps outside or when focus moves outside picker.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-autoClose)
     * @deprecated This will be removed in 6.0
     */
    autoClose: boolean
    /**
     * Sets the native `autocomplete` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)
     */
    autoComplete: string
    /**
     * Configure as `true` to have the picker expand upon focus enter.
     */
    autoExpand: boolean
    /**
     * Specify `true` to auto select field contents on focus
     */
    autoSelect: boolean
    /**
     * Initial text to show in badge.
     */
    badge: string
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Configure as `true` to force case matching when filtering the dropdown list based upon the typed value.
     */
    caseSensitive: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * A config object to configure the [ChipView](https://bryntum.com/products/taskboard/docs/api/Core/widget/ChipView) to display the
     * selected value set when [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) is `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-chipView)
     */
    chipView: Partial<ChipViewConfig>
    /**
     * `true` to clear value typed to a multiselect combo when picker is collapsed
     */
    clearTextOnPickerHide: boolean
    /**
     * Show a trigger to clear field, and allow `SHIFT+BACKSPACE` key to clear field if this field is
     * not [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-readOnly). The trigger is available in the [triggers](#Core/widget/Field#property-triggers) object
     * under the name `clear`. May also be an object which configures the `clear`
     * [trigger](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#property-triggers).
     */
    clearable: boolean|Partial<FieldTriggerConfig>
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-cls)
     */
    cls: string|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The config controls how the value of nested items are handled when a parent container gets or sets its
     * [values](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-containValues)
     * @param {Field} field Field instance
     * @returns {boolean}
     */
    containValues: boolean|string|((field: Field) => boolean)
    /**
     * The configuration for additional items associated to this field. This is typically used to add contextual
     * fields related to a [checkbox](https://bryntum.com/products/taskboard/docs/api/Core/widget/Checkbox) or [radio button](#Core/widget/Radio). See
     * these classes for examples of nested fields.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-container)
     */
    container: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Partial<FieldContainerConfig>|FieldContainer
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * If configured as `true`, this means that when an unmatched string is typed into the
     * combo's input field, and `ENTER`, or the [multiValueSeparator](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiValueSeparator) is typed,
     * a new record will be created using the typed string as the [displayField](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-displayField).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-createOnUnmatched)
     * @param {string} name Record name
     * @param {Combo} combo Combo instance
     * @returns {Model} New record
     */
    createOnUnmatched: ((name: string, combo: Combo) => Model)|string|boolean
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Field used as projects title.
     */
    displayField: string
    /**
     * Template function that can be used to customize the displayed value
     * @param {Model} record The record to provide a textual value for
     * @param {Combo} combo A reference to this Combo
     * @returns {string|void}
     */
    displayValueRenderer: (record: Model, combo: Combo) => string|void
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * User can edit text in text field (otherwise only pick from attached picker)
     */
    editable: boolean
    /**
     * Text to display in the drop down when there are no items in the underlying store
     */
    emptyText: string
    /**
     * A function which creates an array of values for the {#config-filterParamName} to pass
     * any filters to the server upon load.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-encodeFilterParams)
     * @param {<Object>} filters filters
     * @returns {<Object>} array of values
     */
    encodeFilterParams: (filters: object[]) => object[]
    /**
     * If `false`, filtering will be triggered once you exceed [minChars](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-minChars). To filter only when
     * hitting Enter key, set this to `true`;
     */
    filterOnEnter: boolean
    /**
     * The name of an operator type as implemented in [operator](https://bryntum.com/products/taskboard/docs/api/Core/util/CollectionFilter#config-operator)
     * to use when filtering the dropdown list based upon the typed value.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-filterOperator)
     */
    filterOperator: '='|'!='|'>'|'>='|'<'|'<='|'*'|'startsWith'|'endsWith'|'isIncludedIn'
    /**
     * If the dropdown is to be populated with a filtered query to a remote server, specify the
     * name of the parameter to pass the typed string here. By default, the string is simply sent
     * as the value of the parameter. For special encoding, configure the combo with [encodeFilterParams](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-encodeFilterParams)
     */
    filterParamName: string
    /**
     * When [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) is `true`, you may configure `filterSelected` as
     * `true` to hide items in the dropdown when they are added to the selection.
     * It will appear as if the requested item has "moved" into the field's
     * [ChipView](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-chipView).
     */
    filterSelected: boolean
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * By default, the picker is hidden on selection in single select mode, and
     * remains to allow more selections when [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) is `true`.
     * Setting this to a `Boolean` value can override that default.
     */
    hidePickerOnSelect: boolean
    /**
     * Configure as `true` to hide the expand trigger. This is automatically set to `true` if
     * remote filtering is enabled by setting the [filterParamName](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-filterParamName) config.
     */
    hideTrigger: boolean
    /**
     * Specify `false` to prevent field from being highlighted when on external value changes
     */
    highlightExternalChange: boolean
    /**
     * An optional string to display inside the input field as an overlay. This can be useful for displaying
     * a field's units.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-hint)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hint: string|((data: { source: Field, value: any }) => string)
    /**
     * This config is similar to [hint](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-hint) except that this config is used to display HTML content.
     * Since this can allow malicious content to be executed, be sure not to include user-entered data or to
     * encode such data (see [encodeHtml](https://bryntum.com/products/taskboard/docs/api/Core/helper/StringHelper#function-encodeHtml-static)).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-hintHtml)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hintHtml: string|((data: { source: Field, value: any }) => string)
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Set this config to `true` to always display items horizontally along with this field. This assigns an
     * [hbox](https://bryntum.com/products/taskboard/docs/api/Core/widget/layout/Box) as the [layout](#Core/widget/Container#config-layout) to the
     * [container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-container).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-inline)
     */
    inline: boolean
    /**
     * Configure this as `true` to render the dropdown list as a permanently visible list
     * in the document flow immediately below the input area instead of as a popup.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-inlinePicker)
     */
    inlinePicker: boolean
    /**
     * Text alignment for the input field.
     */
    inputAlign: string
    /**
     * Sets custom attributes of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes)
     */
    inputAttributes: object
    /**
     * Sets the `type` attribute of the underlying input element (password, hidden, date, color, etc).
     */
    inputType: string
    /**
     * The width to apply to the `&lt;input&gt;` element. If a number is specified, `px` will be used.
     */
    inputWidth: string|number
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * Rows to display in the dropdown (list items).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-items)
     */
    items: object[]|string[]|object
    /**
     * The delay in milliseconds to wait after the last keystroke before triggering a change event.
     * Set to 0 to not trigger change events from keystrokes (listen for input event instead to have
     * immediate feedback, change will still be triggered on blur).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-keyStrokeChangeDelay)
     */
    keyStrokeChangeDelay: number
    /**
     * The delay in milliseconds to wait after the last keystroke before filtering the list.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-keyStrokeFilterDelay)
     */
    keyStrokeFilterDelay: number
    /**
     * Label, prepended to field
     */
    label: string
    /**
     * CSS class name or class names to add to any configured [label](https://bryntum.com/products/taskboard/docs/api/Core/widget/mixin/Labelable#config-label)
     */
    labelCls: string|object
    /**
     * Label position, either 'before' the field or 'above' the field
     */
    labelPosition: 'before'|'above'
    /**
     * The width to apply to the `&lt;label&gt;` element. If a number is specified, `px` will be used.
     */
    labelWidth: string|number
    /**
     * The labels to add either before or after the input field.
     * Each label may have the following properties:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-labels)
     */
    labels: object[]
    /**
     * CSS class to add to picker
     */
    listCls: string
    /**
     * Template string used to render the list items in the dropdown list
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-listItemTpl)
     * @param {Model} record The record representing the item being rendered
     * @returns {string|void}
     */
    listItemTpl: (record: Model) => string|void
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The max number of characters for the input field
     */
    maxLength: number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * The minimum string length to trigger the filtering, only relevant when [editable](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-editable) is `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-minChars)
     */
    minChars: number
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The min number of characters for the input field
     */
    minLength: number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * Configure as `true` to allow selection of multiple values from the dropdown list.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-multiSelect)
     */
    multiSelect: boolean
    /**
     * A key value which, when typed in a [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) Combo, selects the
     * currently active item in the picker, and clears the input field ready for another
     * match to be typed.
     */
    multiValueSeparator: string
    /**
     * Name of the field which is used as a key to get/set values from/to the field.
     * Used prior to [ref](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-ref) and [id](#Core/widget/Widget#config-id) in
     * [Container.values](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-name)
     */
    name: string
    /**
     * This implies that the picker will display an anchor pointer, but also means that the picker will align closer
     * to the input field so that the pointer pierces the [pickerAlignElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-pickerAlignElement)
     */
    overlayAnchor: boolean
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-owner)
     */
    owner: Widget
    /**
     * Configuration object for the [picker](https://bryntum.com/products/taskboard/docs/api/Core/widget/List) on initialization. Returns the
     * [picker](https://bryntum.com/products/taskboard/docs/api/Core/widget/List) instance at runtime.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-picker)
     */
    picker: Partial<ListConfig>|List
    /**
     * The name of the element property to which the picker should size and align itself.
     */
    pickerAlignElement: string
    /**
     * Width of picker, defaults to this combo's [pickerAlignElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-pickerAlignElement) width
     */
    pickerWidth: number
    /**
     * Text to display in empty field.
     */
    placeholder: string
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Optionally a [Filter](https://bryntum.com/products/taskboard/docs/api/Core/util/CollectionFilter) config object which the combo should use for
     * filtering using the typed value.
     * This may use a `filterBy` property to test its `value` against any field in the passed record.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-primaryFilter)
     */
    primaryFilter: Partial<CollectionFilterConfig>
    /**
     * Project to reconfigure when picking an item. Resolved automatically if a TaskBoard is configured or detected.
     */
    project: ProjectModel
    /**
     * Makes the field unmodifiable by user action. The input area is not editable, and triggers
     * are unresponsive.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-readOnly)
     */
    readOnly: boolean
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to indicate that a `null` field value is to be marked as invalid.
     */
    required: boolean
    /**
     * If this field is not [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-readOnly), then setting this option means that pressing
     * the `ESCAPE` key after editing the field will revert the field to the value it had when
     * the user focused the field. If the field is *not* changed from when focused, the [clearable](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated.
     */
    revertOnEscape: boolean
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * Sets the native `spellcheck` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck)
     */
    spellCheck: boolean
    /**
     * Store used to populate items. Also accepts a Store config object
     */
    store: Store|Partial<StoreConfig>
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/taskboard/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/taskboard/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tab index of the input field
     */
    tabIndex: number
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * Auto detected when used within a TaskBoard. If you add the widget elsewhere, it will try to find an instance
     * of TaskBoard on page. If that fails you have to supply this config to connect it to a TaskBoard manually.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-taskBoard)
     */
    taskBoard: TaskBoard
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)
     */
    title: string
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * How to query the store upon click of the expand trigger. Specify one of these values:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-triggerAction)
     */
    triggerAction: 'all'|'last'|null
    /**
     * The triggers to add either before or after the input field. Each property name is the reference by which
     * an instantiated Trigger Widget may be retrieved from the live `[triggers](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#property-triggers)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-triggers)
     */
    triggers: Record<string, FieldTriggerConfig>
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-ui)
     */
    ui: string|object
    /**
     * `true` to cause the field to be in an invalid state while the typed filter string does not match a record in the store.
     */
    validateFilter: boolean
    /**
     * Set to `false` to not highlight a field as invalid while typing, to instead show it on ENTER key press
     * or similar.
     */
    validateOnInput: boolean
    /**
     * The initial value of this Combo box. In single select mode (default) it's a simple string value, for
     * [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) mode, it should be an array of record ids.
     */
    value: string|number|string[]|number[]
    /**
     * Field used as projects load url.
     */
    valueField: string
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#config-y)
     */
    y: number
    /**
     * The default action was performed (an item in the list was selected)
     * @param {object} event Event object
     * @param {Combo} event.source The combo
     * @param {any} event.value The [value](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-valueField) of the selected record
     * @param {Model} event.record Selected record
     * @param {Model[]} event.records Selected records as an array if [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) is `true`
     * @param {boolean} event.userAction `true` if the value change is due to user interaction
     */
    onAction: ((event: { source: Combo, value: any, record: Model, records: Model[], userAction: boolean }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when this field's value changes.
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     * @param {string|number|boolean|any} event.value This field's value
     * @param {string|number|boolean|any} event.oldValue This field's previous value
     * @param {boolean} event.valid True if this field is in a valid state
     * @param {Event} event.event The triggering DOM event if any
     * @param {boolean} event.userAction Triggered by user taking an action (`true`) or by setting a value (`false`)
     * @param {boolean} event.checked
     */
    onChange: ((event: { source: Field|any, value: string|number|boolean|any, oldValue: string|number|boolean|any, valid: boolean, event: Event, userAction: boolean, checked: boolean }) => void)|string
    /**
     * Fired when this field is [cleared](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#function-clear).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#event-clear)
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     */
    onClear: ((event: { source: Field|any }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * User typed into the field. Please note that the value attached to this event is the raw input field value and
     * not the combos value
     * @param {object} event Event object
     * @param {Combo} event.source The combo.
     * @param {string} event.value Raw input value
     * @param {Event} event.event The triggering DOM event if any.
     */
    onInput: ((event: { source: Combo, value: string, event: Event }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * An item in the list was selected
     * @param {object} event Event object
     * @param {Combo} event.source The combo
     * @param {Model} event.record Selected record
     * @param {Model[]} event.records Selected records as an array if [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) is `true`
     * @param {boolean} event.userAction `true` if the value change is due to user interaction
     */
    onSelect: ((event: { source: Combo, record: Model, records: Model[], userAction: boolean }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
    /**
     * User clicked one of this field's [triggers](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#property-triggers)
     * @param {object} event Event object
     * @param {Field|any} event.source This field
     * @param {Widget} event.trigger The trigger activated by click or touch tap.
     */
    onTrigger: ((event: { source: Field|any, trigger: Widget }) => void)|string
}

/**
 * Combo that allows picking a dataset to use for a [ProjectModel](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel). Each item holds a title and
 * a load url to reconfigure the project with.
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo)
 */
export class ProjectCombo extends SchedulerProjectCombo {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ProjectCombo#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<ProjectComboConfig>} config
     */
    constructor(config?: Partial<ProjectComboConfig>);
}

/**
 * Type with configuration options for [ResourcesCombo](https://bryntum.com/products/grid/docs/api/TaskBoard/widget/ResourcesCombo) class.
 */
type ResourcesComboConfig = InputFieldConfig & ContainerItemConfig & {
    type: 'resourcescombo'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * By default PickerField's picker is transient, and will [hidePicker](https://bryntum.com/products/taskboard/docs/api/Core/widget/PickerField#function-hidePicker) when the user clicks or
     * taps outside or when focus moves outside picker.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-autoClose)
     * @deprecated This will be removed in 6.0
     */
    autoClose: boolean
    /**
     * Sets the native `autocomplete` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)
     */
    autoComplete: string
    /**
     * Configure as `true` to have the picker expand upon focus enter.
     */
    autoExpand: boolean
    /**
     * Specify `true` to auto select field contents on focus
     */
    autoSelect: boolean
    /**
     * Initial text to show in badge.
     */
    badge: string
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Configure as `true` to force case matching when filtering the dropdown list based upon the typed value.
     */
    caseSensitive: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * A config object to configure the [ChipView](https://bryntum.com/products/taskboard/docs/api/Core/widget/ChipView) to display the
     * selected value set when [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) is `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-chipView)
     */
    chipView: Partial<ChipViewConfig>
    /**
     * `true` to clear value typed to a multiselect combo when picker is collapsed
     */
    clearTextOnPickerHide: boolean
    /**
     * Show a trigger to clear field, and allow `SHIFT+BACKSPACE` key to clear field if this field is
     * not [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-readOnly). The trigger is available in the [triggers](#Core/widget/Field#property-triggers) object
     * under the name `clear`. May also be an object which configures the `clear`
     * [trigger](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#property-triggers).
     */
    clearable: boolean|Partial<FieldTriggerConfig>
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-cls)
     */
    cls: string|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The config controls how the value of nested items are handled when a parent container gets or sets its
     * [values](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-containValues)
     * @param {Field} field Field instance
     * @returns {boolean}
     */
    containValues: boolean|string|((field: Field) => boolean)
    /**
     * The configuration for additional items associated to this field. This is typically used to add contextual
     * fields related to a [checkbox](https://bryntum.com/products/taskboard/docs/api/Core/widget/Checkbox) or [radio button](#Core/widget/Radio). See
     * these classes for examples of nested fields.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-container)
     */
    container: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Partial<FieldContainerConfig>|FieldContainer
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * If configured as `true`, this means that when an unmatched string is typed into the
     * combo's input field, and `ENTER`, or the [multiValueSeparator](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiValueSeparator) is typed,
     * a new record will be created using the typed string as the [displayField](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-displayField).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-createOnUnmatched)
     * @param {string} name Record name
     * @param {Combo} combo Combo instance
     * @returns {Model} New record
     */
    createOnUnmatched: ((name: string, combo: Combo) => Model)|string|boolean
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Field used for item text when populating from store
     */
    displayField: string
    /**
     * Template function that can be used to customize the displayed value
     * @param {Model} record The record to provide a textual value for
     * @param {Combo} combo A reference to this Combo
     * @returns {string|void}
     */
    displayValueRenderer: (record: Model, combo: Combo) => string|void
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * User can edit text in text field (otherwise only pick from attached picker)
     */
    editable: boolean
    /**
     * Text to display in the drop down when there are no items in the underlying store
     */
    emptyText: string
    /**
     * A function which creates an array of values for the {#config-filterParamName} to pass
     * any filters to the server upon load.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-encodeFilterParams)
     * @param {<Object>} filters filters
     * @returns {<Object>} array of values
     */
    encodeFilterParams: (filters: object[]) => object[]
    /**
     * If `false`, filtering will be triggered once you exceed [minChars](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-minChars). To filter only when
     * hitting Enter key, set this to `true`;
     */
    filterOnEnter: boolean
    /**
     * The name of an operator type as implemented in [operator](https://bryntum.com/products/taskboard/docs/api/Core/util/CollectionFilter#config-operator)
     * to use when filtering the dropdown list based upon the typed value.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-filterOperator)
     */
    filterOperator: '='|'!='|'>'|'>='|'<'|'<='|'*'|'startsWith'|'endsWith'|'isIncludedIn'
    /**
     * If the dropdown is to be populated with a filtered query to a remote server, specify the
     * name of the parameter to pass the typed string here. By default, the string is simply sent
     * as the value of the parameter. For special encoding, configure the combo with [encodeFilterParams](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-encodeFilterParams)
     */
    filterParamName: string
    /**
     * When [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) is `true`, you may configure `filterSelected` as
     * `true` to hide items in the dropdown when they are added to the selection.
     * It will appear as if the requested item has "moved" into the field's
     * [ChipView](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-chipView).
     */
    filterSelected: boolean
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * By default, the picker is hidden on selection in single select mode, and
     * remains to allow more selections when [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) is `true`.
     * Setting this to a `Boolean` value can override that default.
     */
    hidePickerOnSelect: boolean
    /**
     * Configure as `true` to hide the expand trigger. This is automatically set to `true` if
     * remote filtering is enabled by setting the [filterParamName](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-filterParamName) config.
     */
    hideTrigger: boolean
    /**
     * Specify `false` to prevent field from being highlighted when on external value changes
     */
    highlightExternalChange: boolean
    /**
     * An optional string to display inside the input field as an overlay. This can be useful for displaying
     * a field's units.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-hint)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hint: string|((data: { source: Field, value: any }) => string)
    /**
     * This config is similar to [hint](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-hint) except that this config is used to display HTML content.
     * Since this can allow malicious content to be executed, be sure not to include user-entered data or to
     * encode such data (see [encodeHtml](https://bryntum.com/products/taskboard/docs/api/Core/helper/StringHelper#function-encodeHtml-static)).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-hintHtml)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hintHtml: string|((data: { source: Field, value: any }) => string)
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Set this config to `true` to always display items horizontally along with this field. This assigns an
     * [hbox](https://bryntum.com/products/taskboard/docs/api/Core/widget/layout/Box) as the [layout](#Core/widget/Container#config-layout) to the
     * [container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-container).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-inline)
     */
    inline: boolean
    /**
     * Configure this as `true` to render the dropdown list as a permanently visible list
     * in the document flow immediately below the input area instead of as a popup.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-inlinePicker)
     */
    inlinePicker: boolean
    /**
     * Text alignment for the input field.
     */
    inputAlign: string
    /**
     * Sets custom attributes of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes)
     */
    inputAttributes: object
    /**
     * Sets the `type` attribute of the underlying input element (password, hidden, date, color, etc).
     */
    inputType: string
    /**
     * The width to apply to the `&lt;input&gt;` element. If a number is specified, `px` will be used.
     */
    inputWidth: string|number
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * Rows to display in the dropdown (list items).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-items)
     */
    items: object[]|string[]|object
    /**
     * The delay in milliseconds to wait after the last keystroke before triggering a change event.
     * Set to 0 to not trigger change events from keystrokes (listen for input event instead to have
     * immediate feedback, change will still be triggered on blur).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-keyStrokeChangeDelay)
     */
    keyStrokeChangeDelay: number
    /**
     * The delay in milliseconds to wait after the last keystroke before filtering the list.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-keyStrokeFilterDelay)
     */
    keyStrokeFilterDelay: number
    /**
     * Label, prepended to field
     */
    label: string
    /**
     * CSS class name or class names to add to any configured [label](https://bryntum.com/products/taskboard/docs/api/Core/widget/mixin/Labelable#config-label)
     */
    labelCls: string|object
    /**
     * Label position, either 'before' the field or 'above' the field
     */
    labelPosition: 'before'|'above'
    /**
     * The width to apply to the `&lt;label&gt;` element. If a number is specified, `px` will be used.
     */
    labelWidth: string|number
    /**
     * The labels to add either before or after the input field.
     * Each label may have the following properties:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-labels)
     */
    labels: object[]
    /**
     * CSS class to add to picker
     */
    listCls: string
    /**
     * Template string used to render the list items in the dropdown list
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-listItemTpl)
     * @param {Model} record The record representing the item being rendered
     * @returns {string|void}
     */
    listItemTpl: (record: Model) => string|void
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The max number of characters for the input field
     */
    maxLength: number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * The minimum string length to trigger the filtering, only relevant when [editable](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-editable) is `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-minChars)
     */
    minChars: number
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The min number of characters for the input field
     */
    minLength: number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * Configure as `true` to allow selection of multiple values from the dropdown list.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-multiSelect)
     */
    multiSelect: boolean
    /**
     * A key value which, when typed in a [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) Combo, selects the
     * currently active item in the picker, and clears the input field ready for another
     * match to be typed.
     */
    multiValueSeparator: string
    /**
     * Name of the field which is used as a key to get/set values from/to the field.
     * Used prior to [ref](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-ref) and [id](#Core/widget/Widget#config-id) in
     * [Container.values](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-name)
     */
    name: string
    /**
     * This implies that the picker will display an anchor pointer, but also means that the picker will align closer
     * to the input field so that the pointer pierces the [pickerAlignElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-pickerAlignElement)
     */
    overlayAnchor: boolean
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-owner)
     */
    owner: Widget
    /**
     * Configuration object for the [picker](https://bryntum.com/products/taskboard/docs/api/Core/widget/List) on initialization. Returns the
     * [picker](https://bryntum.com/products/taskboard/docs/api/Core/widget/List) instance at runtime.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-picker)
     */
    picker: Partial<ListConfig>|List
    /**
     * The name of the element property to which the picker should size and align itself.
     */
    pickerAlignElement: string
    /**
     * Width of picker, defaults to this combo's [pickerAlignElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-pickerAlignElement) width
     */
    pickerWidth: number
    /**
     * Text to display in empty field.
     */
    placeholder: string
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Optionally a [Filter](https://bryntum.com/products/taskboard/docs/api/Core/util/CollectionFilter) config object which the combo should use for
     * filtering using the typed value.
     * This may use a `filterBy` property to test its `value` against any field in the passed record.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-primaryFilter)
     */
    primaryFilter: Partial<CollectionFilterConfig>
    /**
     * Makes the field unmodifiable by user action. The input area is not editable, and triggers
     * are unresponsive.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-readOnly)
     */
    readOnly: boolean
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to indicate that a `null` field value is to be marked as invalid.
     */
    required: boolean
    /**
     * If this field is not [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-readOnly), then setting this option means that pressing
     * the `ESCAPE` key after editing the field will revert the field to the value it had when
     * the user focused the field. If the field is *not* changed from when focused, the [clearable](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated.
     */
    revertOnEscape: boolean
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * Sets the native `spellcheck` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck)
     */
    spellCheck: boolean
    /**
     * Store used to populate items. Also accepts a Store config object
     */
    store: Store|Partial<StoreConfig>
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/taskboard/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/taskboard/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tab index of the input field
     */
    tabIndex: number
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * Auto detected when used within a TaskBoard. If you add the widget elsewhere, it will try to find an instance
     * of TaskBoard on page. If that fails you have to supply this config to connect it to a TaskBoard manually.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-taskBoard)
     */
    taskBoard: TaskBoard
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)
     */
    title: string
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * How to query the store upon click of the expand trigger. Specify one of these values:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-triggerAction)
     */
    triggerAction: 'all'|'last'|null
    /**
     * The triggers to add either before or after the input field. Each property name is the reference by which
     * an instantiated Trigger Widget may be retrieved from the live `[triggers](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#property-triggers)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-triggers)
     */
    triggers: Record<string, FieldTriggerConfig>
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-ui)
     */
    ui: string|object
    /**
     * `true` to cause the field to be in an invalid state while the typed filter string does not match a record in the store.
     */
    validateFilter: boolean
    /**
     * Set to `false` to not highlight a field as invalid while typing, to instead show it on ENTER key press
     * or similar.
     */
    validateOnInput: boolean
    /**
     * The initial value of this Combo box. In single select mode (default) it's a simple string value, for
     * [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) mode, it should be an array of record ids.
     */
    value: string|number|string[]|number[]
    /**
     * Field used for item value when populating from store. Setting this to `null` will
     * yield the selected record as the Combo's [value](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#property-value).
     */
    valueField: string|null
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#config-y)
     */
    y: number
    /**
     * The default action was performed (an item in the list was selected)
     * @param {object} event Event object
     * @param {Combo} event.source The combo
     * @param {any} event.value The [value](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-valueField) of the selected record
     * @param {Model} event.record Selected record
     * @param {Model[]} event.records Selected records as an array if [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) is `true`
     * @param {boolean} event.userAction `true` if the value change is due to user interaction
     */
    onAction: ((event: { source: Combo, value: any, record: Model, records: Model[], userAction: boolean }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when this field's value changes.
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     * @param {string|number|boolean|any} event.value This field's value
     * @param {string|number|boolean|any} event.oldValue This field's previous value
     * @param {boolean} event.valid True if this field is in a valid state
     * @param {Event} event.event The triggering DOM event if any
     * @param {boolean} event.userAction Triggered by user taking an action (`true`) or by setting a value (`false`)
     * @param {boolean} event.checked
     */
    onChange: ((event: { source: Field|any, value: string|number|boolean|any, oldValue: string|number|boolean|any, valid: boolean, event: Event, userAction: boolean, checked: boolean }) => void)|string
    /**
     * Fired when this field is [cleared](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#function-clear).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#event-clear)
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     */
    onClear: ((event: { source: Field|any }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * User typed into the field. Please note that the value attached to this event is the raw input field value and
     * not the combos value
     * @param {object} event Event object
     * @param {Combo} event.source The combo.
     * @param {string} event.value Raw input value
     * @param {Event} event.event The triggering DOM event if any.
     */
    onInput: ((event: { source: Combo, value: string, event: Event }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * An item in the list was selected
     * @param {object} event Event object
     * @param {Combo} event.source The combo
     * @param {Model} event.record Selected record
     * @param {Model[]} event.records Selected records as an array if [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) is `true`
     * @param {boolean} event.userAction `true` if the value change is due to user interaction
     */
    onSelect: ((event: { source: Combo, record: Model, records: Model[], userAction: boolean }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
    /**
     * User clicked one of this field's [triggers](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#property-triggers)
     * @param {object} event Event object
     * @param {Field|any} event.source This field
     * @param {Widget} event.trigger The trigger activated by click or touch tap.
     */
    onTrigger: ((event: { source: Field|any, trigger: Widget }) => void)|string
}

/**
 * A combo populated with the resources of a [taskboard´s](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard)
 * [resource store](https://bryntum.com/products/scheduler/docs#Scheduler/data/ResourceStore).
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo)
 */
export class ResourcesCombo extends Combo {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ResourcesCombo#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<ResourcesComboConfig>} config
     */
    constructor(config?: Partial<ResourcesComboConfig>);
}

/**
 * Type with configuration options for [SwimlaneCombo](https://bryntum.com/products/grid/docs/api/TaskBoard/widget/SwimlaneCombo) class.
 */
type SwimlaneComboConfig = InputFieldConfig & ContainerItemConfig & {
    type: 'swimlanecombo'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * By default PickerField's picker is transient, and will [hidePicker](https://bryntum.com/products/taskboard/docs/api/Core/widget/PickerField#function-hidePicker) when the user clicks or
     * taps outside or when focus moves outside picker.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-autoClose)
     * @deprecated This will be removed in 6.0
     */
    autoClose: boolean
    /**
     * Sets the native `autocomplete` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)
     */
    autoComplete: string
    /**
     * Configure as `true` to have the picker expand upon focus enter.
     */
    autoExpand: boolean
    /**
     * Specify `true` to auto select field contents on focus
     */
    autoSelect: boolean
    /**
     * Initial text to show in badge.
     */
    badge: string
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Configure as `true` to force case matching when filtering the dropdown list based upon the typed value.
     */
    caseSensitive: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * A config object to configure the [ChipView](https://bryntum.com/products/taskboard/docs/api/Core/widget/ChipView) to display the
     * selected value set when [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) is `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-chipView)
     */
    chipView: Partial<ChipViewConfig>
    /**
     * `true` to clear value typed to a multiselect combo when picker is collapsed
     */
    clearTextOnPickerHide: boolean
    /**
     * Show a trigger to clear field, and allow `SHIFT+BACKSPACE` key to clear field if this field is
     * not [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-readOnly). The trigger is available in the [triggers](#Core/widget/Field#property-triggers) object
     * under the name `clear`. May also be an object which configures the `clear`
     * [trigger](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#property-triggers).
     */
    clearable: boolean|Partial<FieldTriggerConfig>
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-cls)
     */
    cls: string|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The config controls how the value of nested items are handled when a parent container gets or sets its
     * [values](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-containValues)
     * @param {Field} field Field instance
     * @returns {boolean}
     */
    containValues: boolean|string|((field: Field) => boolean)
    /**
     * The configuration for additional items associated to this field. This is typically used to add contextual
     * fields related to a [checkbox](https://bryntum.com/products/taskboard/docs/api/Core/widget/Checkbox) or [radio button](#Core/widget/Radio). See
     * these classes for examples of nested fields.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-container)
     */
    container: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Partial<FieldContainerConfig>|FieldContainer
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * If configured as `true`, this means that when an unmatched string is typed into the
     * combo's input field, and `ENTER`, or the [multiValueSeparator](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiValueSeparator) is typed,
     * a new record will be created using the typed string as the [displayField](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-displayField).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-createOnUnmatched)
     * @param {string} name Record name
     * @param {Combo} combo Combo instance
     * @returns {Model} New record
     */
    createOnUnmatched: ((name: string, combo: Combo) => Model)|string|boolean
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Field used for item text when populating from store
     */
    displayField: string
    /**
     * Template function that can be used to customize the displayed value
     * @param {Model} record The record to provide a textual value for
     * @param {Combo} combo A reference to this Combo
     * @returns {string|void}
     */
    displayValueRenderer: (record: Model, combo: Combo) => string|void
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * User can edit text in text field (otherwise only pick from attached picker)
     */
    editable: boolean
    /**
     * Text to display in the drop down when there are no items in the underlying store
     */
    emptyText: string
    /**
     * A function which creates an array of values for the {#config-filterParamName} to pass
     * any filters to the server upon load.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-encodeFilterParams)
     * @param {<Object>} filters filters
     * @returns {<Object>} array of values
     */
    encodeFilterParams: (filters: object[]) => object[]
    /**
     * If `false`, filtering will be triggered once you exceed [minChars](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-minChars). To filter only when
     * hitting Enter key, set this to `true`;
     */
    filterOnEnter: boolean
    /**
     * The name of an operator type as implemented in [operator](https://bryntum.com/products/taskboard/docs/api/Core/util/CollectionFilter#config-operator)
     * to use when filtering the dropdown list based upon the typed value.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-filterOperator)
     */
    filterOperator: '='|'!='|'>'|'>='|'<'|'<='|'*'|'startsWith'|'endsWith'|'isIncludedIn'
    /**
     * If the dropdown is to be populated with a filtered query to a remote server, specify the
     * name of the parameter to pass the typed string here. By default, the string is simply sent
     * as the value of the parameter. For special encoding, configure the combo with [encodeFilterParams](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-encodeFilterParams)
     */
    filterParamName: string
    /**
     * When [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) is `true`, you may configure `filterSelected` as
     * `true` to hide items in the dropdown when they are added to the selection.
     * It will appear as if the requested item has "moved" into the field's
     * [ChipView](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-chipView).
     */
    filterSelected: boolean
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * By default, the picker is hidden on selection in single select mode, and
     * remains to allow more selections when [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) is `true`.
     * Setting this to a `Boolean` value can override that default.
     */
    hidePickerOnSelect: boolean
    /**
     * Configure as `true` to hide the expand trigger. This is automatically set to `true` if
     * remote filtering is enabled by setting the [filterParamName](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-filterParamName) config.
     */
    hideTrigger: boolean
    /**
     * Specify `false` to prevent field from being highlighted when on external value changes
     */
    highlightExternalChange: boolean
    /**
     * An optional string to display inside the input field as an overlay. This can be useful for displaying
     * a field's units.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-hint)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hint: string|((data: { source: Field, value: any }) => string)
    /**
     * This config is similar to [hint](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-hint) except that this config is used to display HTML content.
     * Since this can allow malicious content to be executed, be sure not to include user-entered data or to
     * encode such data (see [encodeHtml](https://bryntum.com/products/taskboard/docs/api/Core/helper/StringHelper#function-encodeHtml-static)).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-hintHtml)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hintHtml: string|((data: { source: Field, value: any }) => string)
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Set this config to `true` to always display items horizontally along with this field. This assigns an
     * [hbox](https://bryntum.com/products/taskboard/docs/api/Core/widget/layout/Box) as the [layout](#Core/widget/Container#config-layout) to the
     * [container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-container).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-inline)
     */
    inline: boolean
    /**
     * Configure this as `true` to render the dropdown list as a permanently visible list
     * in the document flow immediately below the input area instead of as a popup.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-inlinePicker)
     */
    inlinePicker: boolean
    /**
     * Text alignment for the input field.
     */
    inputAlign: string
    /**
     * Sets custom attributes of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes)
     */
    inputAttributes: object
    /**
     * Sets the `type` attribute of the underlying input element (password, hidden, date, color, etc).
     */
    inputType: string
    /**
     * The width to apply to the `&lt;input&gt;` element. If a number is specified, `px` will be used.
     */
    inputWidth: string|number
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * Rows to display in the dropdown (list items).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-items)
     */
    items: object[]|string[]|object
    /**
     * The delay in milliseconds to wait after the last keystroke before triggering a change event.
     * Set to 0 to not trigger change events from keystrokes (listen for input event instead to have
     * immediate feedback, change will still be triggered on blur).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-keyStrokeChangeDelay)
     */
    keyStrokeChangeDelay: number
    /**
     * The delay in milliseconds to wait after the last keystroke before filtering the list.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-keyStrokeFilterDelay)
     */
    keyStrokeFilterDelay: number
    /**
     * Label, prepended to field
     */
    label: string
    /**
     * CSS class name or class names to add to any configured [label](https://bryntum.com/products/taskboard/docs/api/Core/widget/mixin/Labelable#config-label)
     */
    labelCls: string|object
    /**
     * Label position, either 'before' the field or 'above' the field
     */
    labelPosition: 'before'|'above'
    /**
     * The width to apply to the `&lt;label&gt;` element. If a number is specified, `px` will be used.
     */
    labelWidth: string|number
    /**
     * The labels to add either before or after the input field.
     * Each label may have the following properties:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-labels)
     */
    labels: object[]
    /**
     * CSS class to add to picker
     */
    listCls: string
    /**
     * Template string used to render the list items in the dropdown list
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-listItemTpl)
     * @param {Model} record The record representing the item being rendered
     * @returns {string|void}
     */
    listItemTpl: (record: Model) => string|void
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The max number of characters for the input field
     */
    maxLength: number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * The minimum string length to trigger the filtering, only relevant when [editable](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-editable) is `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-minChars)
     */
    minChars: number
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The min number of characters for the input field
     */
    minLength: number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * Configure as `true` to allow selection of multiple values from the dropdown list.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-multiSelect)
     */
    multiSelect: boolean
    /**
     * A key value which, when typed in a [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) Combo, selects the
     * currently active item in the picker, and clears the input field ready for another
     * match to be typed.
     */
    multiValueSeparator: string
    /**
     * Name of the field which is used as a key to get/set values from/to the field.
     * Used prior to [ref](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-ref) and [id](#Core/widget/Widget#config-id) in
     * [Container.values](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-name)
     */
    name: string
    /**
     * This implies that the picker will display an anchor pointer, but also means that the picker will align closer
     * to the input field so that the pointer pierces the [pickerAlignElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-pickerAlignElement)
     */
    overlayAnchor: boolean
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-owner)
     */
    owner: Widget
    /**
     * Configuration object for the [picker](https://bryntum.com/products/taskboard/docs/api/Core/widget/List) on initialization. Returns the
     * [picker](https://bryntum.com/products/taskboard/docs/api/Core/widget/List) instance at runtime.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-picker)
     */
    picker: Partial<ListConfig>|List
    /**
     * The name of the element property to which the picker should size and align itself.
     */
    pickerAlignElement: string
    /**
     * Width of picker, defaults to this combo's [pickerAlignElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-pickerAlignElement) width
     */
    pickerWidth: number
    /**
     * Text to display in empty field.
     */
    placeholder: string
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Optionally a [Filter](https://bryntum.com/products/taskboard/docs/api/Core/util/CollectionFilter) config object which the combo should use for
     * filtering using the typed value.
     * This may use a `filterBy` property to test its `value` against any field in the passed record.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-primaryFilter)
     */
    primaryFilter: Partial<CollectionFilterConfig>
    /**
     * Makes the field unmodifiable by user action. The input area is not editable, and triggers
     * are unresponsive.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-readOnly)
     */
    readOnly: boolean
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to indicate that a `null` field value is to be marked as invalid.
     */
    required: boolean
    /**
     * If this field is not [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-readOnly), then setting this option means that pressing
     * the `ESCAPE` key after editing the field will revert the field to the value it had when
     * the user focused the field. If the field is *not* changed from when focused, the [clearable](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated.
     */
    revertOnEscape: boolean
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * Sets the native `spellcheck` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck)
     */
    spellCheck: boolean
    /**
     * Store used to populate items. Also accepts a Store config object
     */
    store: Store|Partial<StoreConfig>
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/taskboard/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/taskboard/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tab index of the input field
     */
    tabIndex: number
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * Auto detected when used within a TaskBoard. If you add the widget elsewhere, it will try to find an instance
     * of TaskBoard on page. If that fails you have to supply this config to connect it to a TaskBoard manually.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-taskBoard)
     */
    taskBoard: TaskBoard
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)
     */
    title: string
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * How to query the store upon click of the expand trigger. Specify one of these values:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-triggerAction)
     */
    triggerAction: 'all'|'last'|null
    /**
     * The triggers to add either before or after the input field. Each property name is the reference by which
     * an instantiated Trigger Widget may be retrieved from the live `[triggers](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#property-triggers)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-triggers)
     */
    triggers: Record<string, FieldTriggerConfig>
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-ui)
     */
    ui: string|object
    /**
     * `true` to cause the field to be in an invalid state while the typed filter string does not match a record in the store.
     */
    validateFilter: boolean
    /**
     * Set to `false` to not highlight a field as invalid while typing, to instead show it on ENTER key press
     * or similar.
     */
    validateOnInput: boolean
    /**
     * The initial value of this Combo box. In single select mode (default) it's a simple string value, for
     * [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) mode, it should be an array of record ids.
     */
    value: string|number|string[]|number[]
    /**
     * Field used for item value when populating from store. Setting this to `null` will
     * yield the selected record as the Combo's [value](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#property-value).
     */
    valueField: string|null
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#config-y)
     */
    y: number
    /**
     * The default action was performed (an item in the list was selected)
     * @param {object} event Event object
     * @param {Combo} event.source The combo
     * @param {any} event.value The [value](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-valueField) of the selected record
     * @param {Model} event.record Selected record
     * @param {Model[]} event.records Selected records as an array if [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) is `true`
     * @param {boolean} event.userAction `true` if the value change is due to user interaction
     */
    onAction: ((event: { source: Combo, value: any, record: Model, records: Model[], userAction: boolean }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when this field's value changes.
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     * @param {string|number|boolean|any} event.value This field's value
     * @param {string|number|boolean|any} event.oldValue This field's previous value
     * @param {boolean} event.valid True if this field is in a valid state
     * @param {Event} event.event The triggering DOM event if any
     * @param {boolean} event.userAction Triggered by user taking an action (`true`) or by setting a value (`false`)
     * @param {boolean} event.checked
     */
    onChange: ((event: { source: Field|any, value: string|number|boolean|any, oldValue: string|number|boolean|any, valid: boolean, event: Event, userAction: boolean, checked: boolean }) => void)|string
    /**
     * Fired when this field is [cleared](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#function-clear).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#event-clear)
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     */
    onClear: ((event: { source: Field|any }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * User typed into the field. Please note that the value attached to this event is the raw input field value and
     * not the combos value
     * @param {object} event Event object
     * @param {Combo} event.source The combo.
     * @param {string} event.value Raw input value
     * @param {Event} event.event The triggering DOM event if any.
     */
    onInput: ((event: { source: Combo, value: string, event: Event }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * An item in the list was selected
     * @param {object} event Event object
     * @param {Combo} event.source The combo
     * @param {Model} event.record Selected record
     * @param {Model[]} event.records Selected records as an array if [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) is `true`
     * @param {boolean} event.userAction `true` if the value change is due to user interaction
     */
    onSelect: ((event: { source: Combo, record: Model, records: Model[], userAction: boolean }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
    /**
     * User clicked one of this field's [triggers](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#property-triggers)
     * @param {object} event Event object
     * @param {Field|any} event.source This field
     * @param {Widget} event.trigger The trigger activated by click or touch tap.
     */
    onTrigger: ((event: { source: Field|any, trigger: Widget }) => void)|string
}

/**
 * A combo populated with the [swimlanes](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard#property-swimlanes) of a [TaskBoard](#TaskBoard/view/TaskBoard).
 * If a swimlane has a [color](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/SwimlaneModel#field-color) defined, that color will be displayed in the
 * combo and its picker.
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo)
 */
export class SwimlaneCombo extends ColorBoxCombo {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<SwimlaneComboConfig>} config
     */
    constructor(config?: Partial<SwimlaneComboConfig>);
}

/**
 * Type with configuration options for [SwimlaneFilterField](https://bryntum.com/products/grid/docs/api/TaskBoard/widget/SwimlaneFilterField) class.
 */
type SwimlaneFilterFieldConfig = ContainerItemConfig & {
    type: 'swimlanefilterfield'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * Sets the native `autocomplete` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)
     */
    autoComplete: string
    /**
     * Specify `true` to auto select field contents on focus
     */
    autoSelect: boolean
    /**
     * Initial text to show in badge.
     */
    badge: string
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * Show a trigger to clear field, and allow `SHIFT+BACKSPACE` key to clear field if this field is
     * not [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-readOnly). The trigger is available in the [triggers](#Core/widget/Field#property-triggers) object
     * under the name `clear`. May also be an object which configures the `clear`
     * [trigger](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#property-triggers).
     */
    clearable: boolean|Partial<FieldTriggerConfig>
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField#config-cls)
     */
    cls: string|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The config controls how the value of nested items are handled when a parent container gets or sets its
     * [values](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField#config-containValues)
     * @param {Field} field Field instance
     * @returns {boolean}
     */
    containValues: boolean|string|((field: Field) => boolean)
    /**
     * The configuration for additional items associated to this field. This is typically used to add contextual
     * fields related to a [checkbox](https://bryntum.com/products/taskboard/docs/api/Core/widget/Checkbox) or [radio button](#Core/widget/Radio). See
     * these classes for examples of nested fields.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField#config-container)
     */
    container: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Partial<FieldContainerConfig>|FieldContainer
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * Set to false to prevent user from editing the field. For TextFields it is basically the same as setting
     * [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-readOnly), but for PickerFields there is a distinction where it allows you to pick a value
     * but not to type one in the field.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField#config-editable)
     */
    editable: boolean
    /**
     * The model field name to filter by. Can optionally be replaced by [filterFunction](https://bryntum.com/products/taskboard/docs/api/Core/widget/FilterField#config-filterFunction)
     */
    field: string
    /**
     * Optional filter function to be called with record and value as parameters for store filtering.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField#config-filterFunction)
     * @param {Model} record Record for comparison
     * @param {string} value Value to compare with
     * @returns {boolean} Returns `true` if record matches comparison requirements
     */
    filterFunction: (record: Model, value: string) => boolean
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * Specify `false` to prevent field from being highlighted when on external value changes
     */
    highlightExternalChange: boolean
    /**
     * An optional string to display inside the input field as an overlay. This can be useful for displaying
     * a field's units.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField#config-hint)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hint: string|((data: { source: Field, value: any }) => string)
    /**
     * This config is similar to [hint](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-hint) except that this config is used to display HTML content.
     * Since this can allow malicious content to be executed, be sure not to include user-entered data or to
     * encode such data (see [encodeHtml](https://bryntum.com/products/taskboard/docs/api/Core/helper/StringHelper#function-encodeHtml-static)).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField#config-hintHtml)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hintHtml: string|((data: { source: Field, value: any }) => string)
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Set this config to `true` to always display items horizontally along with this field. This assigns an
     * [hbox](https://bryntum.com/products/taskboard/docs/api/Core/widget/layout/Box) as the [layout](#Core/widget/Container#config-layout) to the
     * [container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-container).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField#config-inline)
     */
    inline: boolean
    /**
     * Text alignment for the input field.
     */
    inputAlign: string
    /**
     * Sets custom attributes of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes)
     */
    inputAttributes: object
    /**
     * Sets the `type` attribute of the underlying input element (password, hidden, date, color, etc).
     */
    inputType: string
    /**
     * The width to apply to the `&lt;input&gt;` element. If a number is specified, `px` will be used.
     */
    inputWidth: string|number
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * The delay in milliseconds to wait after the last keystroke before triggering a change event.
     * Set to 0 to not trigger change events from keystrokes (listen for input event instead to have
     * immediate feedback, change will still be triggered on blur).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField#config-keyStrokeChangeDelay)
     */
    keyStrokeChangeDelay: number
    /**
     * Label, prepended to field
     */
    label: string
    /**
     * CSS class name or class names to add to any configured [label](https://bryntum.com/products/taskboard/docs/api/Core/widget/mixin/Labelable#config-label)
     */
    labelCls: string|object
    /**
     * Label position, either 'before' the field or 'above' the field
     */
    labelPosition: 'before'|'above'
    /**
     * The width to apply to the `&lt;label&gt;` element. If a number is specified, `px` will be used.
     */
    labelWidth: string|number
    /**
     * The labels to add either before or after the input field.
     * Each label may have the following properties:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField#config-labels)
     */
    labels: object[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The max number of characters for the input field
     */
    maxLength: number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The min number of characters for the input field
     */
    minLength: number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * Name of the field which is used as a key to get/set values from/to the field.
     * Used prior to [ref](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-ref) and [id](#Core/widget/Widget#config-id) in
     * [Container.values](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField#config-name)
     */
    name: string
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField#config-owner)
     */
    owner: Widget
    /**
     * Text to display in empty field.
     */
    placeholder: string
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Makes the field unmodifiable by user action. The input area is not editable, and triggers
     * are unresponsive.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField#config-readOnly)
     */
    readOnly: boolean
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to indicate that a `null` field value is to be marked as invalid.
     */
    required: boolean
    /**
     * If this field is not [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-readOnly), then setting this option means that pressing
     * the `ESCAPE` key after editing the field will revert the field to the value it had when
     * the user focused the field. If the field is *not* changed from when focused, the [clearable](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated.
     */
    revertOnEscape: boolean
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * Sets the native `spellcheck` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck)
     */
    spellCheck: boolean
    /**
     * The store to filter.
     */
    store: Store
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/taskboard/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/taskboard/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tab index of the input field
     */
    tabIndex: number
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * Auto detected when used within a TaskBoard. If you add the widget elsewhere, it will try to find an instance
     * of TaskBoard on page. If that fails you have to supply this config to connect it to a TaskBoard manually.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField#config-taskBoard)
     */
    taskBoard: TaskBoard
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)
     */
    title: string
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * The triggers to add either before or after the input field. Each property name is the reference by which
     * an instantiated Trigger Widget may be retrieved from the live `[triggers](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#property-triggers)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField#config-triggers)
     */
    triggers: Record<string, FieldTriggerConfig>
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField#config-ui)
     */
    ui: string|object
    /**
     * Set to `false` to not highlight a field as invalid while typing, to instead show it on ENTER key press
     * or similar.
     */
    validateOnInput: boolean
    /**
     * Default value
     */
    value: string
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField#config-y)
     */
    y: number
    /**
     * User performed default action (typed into this field).
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     * @param {string|number|boolean|any} event.value This field's value
     * @param {string|number|boolean|any} event.oldValue This field's previous value
     * @param {boolean} event.valid True if this field is in a valid state
     * @param {Event} event.event The triggering DOM event if any
     * @param {Model} event.record Selected record. Available for fields with records selection functionality
     * @param {Model[]} event.records Selected records as an array. Available for fields with records selection functionality
     * @param {boolean} event.userAction Triggered by user taking an action (`true`) or by setting a value (`false`)
     * @param {boolean} event.checked
     */
    onAction: ((event: { source: Field|any, value: string|number|boolean|any, oldValue: string|number|boolean|any, valid: boolean, event: Event, record: Model, records: Model[], userAction: boolean, checked: boolean }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when this field's value changes.
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     * @param {string|number|boolean|any} event.value This field's value
     * @param {string|number|boolean|any} event.oldValue This field's previous value
     * @param {boolean} event.valid True if this field is in a valid state
     * @param {Event} event.event The triggering DOM event if any
     * @param {boolean} event.userAction Triggered by user taking an action (`true`) or by setting a value (`false`)
     * @param {boolean} event.checked
     */
    onChange: ((event: { source: Field|any, value: string|number|boolean|any, oldValue: string|number|boolean|any, valid: boolean, event: Event, userAction: boolean, checked: boolean }) => void)|string
    /**
     * Fired when this field is [cleared](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#function-clear).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField#event-clear)
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     */
    onClear: ((event: { source: Field|any }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Fired when the user types into this field.
     * @param {object} event Event object
     * @param {Field|any} event.source This field
     * @param {string|number|boolean|any} event.value This field's value
     * @param {Event} event.event The triggering DOM event
     */
    onInput: ((event: { source: Field|any, value: string|number|boolean|any, event: Event }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
    /**
     * User clicked one of this field's [triggers](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#property-triggers)
     * @param {object} event Event object
     * @param {Field|any} event.source This field
     * @param {Widget} event.trigger The trigger activated by click or touch tap.
     */
    onTrigger: ((event: { source: Field|any, trigger: Widget }) => void)|string
}

/**
 * A field that filters the swimlanes of a linked [TaskBoard](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard) when typing into it.
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField)
 */
export class SwimlaneFilterField extends FilterField {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneFilterField#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<SwimlaneFilterFieldConfig>} config
     */
    constructor(config?: Partial<SwimlaneFilterFieldConfig>);
}

/**
 * Type with configuration options for [SwimlanePickerButton](https://bryntum.com/products/grid/docs/api/TaskBoard/widget/SwimlanePickerButton) class.
 */
type SwimlanePickerButtonConfig = ContainerItemConfig & {
    type: 'swimlanepickerbutton'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlanePickerButton#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlanePickerButton#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlanePickerButton#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlanePickerButton#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * Initial text to show in badge.
     */
    badge: string
    /**
     * The button behavioral type, will be applied as a `type` attribute to this button's element.
     */
    behaviorType: 'button'|'submit'|'reset'
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlanePickerButton#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlanePickerButton#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlanePickerButton#config-cls)
     */
    cls: string|object
    /**
     * Button color (should have match in button.scss or your custom styling). Valid values in Bryntum themes
     * are:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlanePickerButton#config-color)
     */
    color: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlanePickerButton#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlanePickerButton#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlanePickerButton#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlanePickerButton#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * If provided, turns the button into a link.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlanePickerButton#config-href)
     */
    href: string
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlanePickerButton#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Button icon class.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlanePickerButton#config-icon)
     */
    icon: string
    /**
     * Button icon alignment. May be `'start'` or `'end'`. Defaults to `'start'`
     */
    iconAlign: 'start'|'end'
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlanePickerButton#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlanePickerButton#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlanePickerButton#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlanePickerButton#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlanePickerButton#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * A submenu configuration object, or an array of MenuItem configuration objects from which to create a
     * submenu which is shown when this button is pressed.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlanePickerButton#config-menu)
     */
    menu: Record<string, Partial<MenuItemConfig>|Partial<ContainerItemConfig>>|(Partial<MenuItemConfig>|Partial<ContainerItemConfig>)[]
    /**
     * The menu icon class to show when the button has a menu. Set to `null` to not show a menu icon.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlanePickerButton#config-menuIcon)
     */
    menuIcon: string
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlanePickerButton#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlanePickerButton#config-owner)
     */
    owner: Widget
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlanePickerButton#config-positioned)
     */
    positioned: boolean
    /**
     * Initially pressed or not. Only applies with `toggleable = true`.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlanePickerButton#config-pressed)
     */
    pressed: boolean
    /**
     * Icon class for the buttons pressed state. Only applies to toggle buttons
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlanePickerButton#config-pressedIcon)
     */
    pressedIcon: string
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlanePickerButton#config-readOnly)
     */
    readOnly: boolean
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlanePickerButton#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlanePickerButton#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlanePickerButton#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlanePickerButton#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * Set to `true` to perform action on clicking the button if it's already pressed
     * and belongs to a [toggleGroup](https://bryntum.com/products/taskboard/docs/api/Core/widget/Button#config-toggleGroup).
     */
    supportsPressedClick: boolean
    /**
     * A configuration for the [tab](https://bryntum.com/products/taskboard/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/taskboard/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlanePickerButton#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * The `target` attribute for the [href](https://bryntum.com/products/taskboard/docs/api/Core/widget/Button#config-href) config
     */
    target: string
    /**
     * Auto detected when used within a TaskBoard. If you add the widget elsewhere, it will try to find an instance
     * of TaskBoard on page. If that fails you have to supply this config to connect it to a TaskBoard manually.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlanePickerButton#config-taskBoard)
     */
    taskBoard: TaskBoard
    /**
     * The button's text.
     */
    text: string
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlanePickerButton#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)
     */
    title: string
    /**
     * Indicates that this button is part of a group where only one button can be pressed. Assigning a value
     * also sets `toggleable` to `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlanePickerButton#config-toggleGroup)
     */
    toggleGroup: string
    /**
     * Enabled toggling of the button (stays pressed when pressed).
     */
    toggleable: boolean
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlanePickerButton#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlanePickerButton#config-ui)
     */
    ui: string|object
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlanePickerButton#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlanePickerButton#config-y)
     */
    y: number
    /**
     * Fires when the default action is performed (the button is clicked)
     * @param {object} event Event object
     * @param {Button} event.source The button
     * @param {Event} event.event DOM event
     */
    onAction: ((event: { source: Button, event: Event }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * This event is triggered when the button's menu is about to be shown.
     * @param {object} event Event object
     * @param {Button} event.source This Button instance.
     * @param {Menu} event.menu This button's menu instance.
     */
    onBeforeShowMenu: ((event: { source: Button, menu: Menu }) => void)|string
    /**
     * Fires before the button is toggled (the [pressed](https://bryntum.com/products/taskboard/docs/api/Core/widget/Button#property-pressed) state is changed). If the button is part of
     * a [toggleGroup](https://bryntum.com/products/taskboard/docs/api/Core/widget/Button#config-toggleGroup) and you need to process the pressed button only, consider using
     * [click](https://bryntum.com/products/taskboard/docs/api/Core/widget/Button#event-click) event or [action](#Core/widget/Button#event-action) event.
     * Return `false` to prevent the toggle to the new pressed state.
     * @param {object} event Event object
     * @param {Button} event.source Toggled button
     * @param {boolean} event.pressed New pressed state
     * @param {boolean} event.userAction `true` if the toggle was triggered by a user action (click), `false` if it was triggered programmatically.
     */
    onBeforeToggle: ((event: { source: Button, pressed: boolean, userAction: boolean }) => boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlanePickerButton#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when the button is clicked
     * @param {object} event Event object
     * @param {Button} event.source The button
     * @param {Event} event.event DOM event
     */
    onClick: ((event: { source: Button, event: Event }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlanePickerButton#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
    /**
     * Fires when the button is toggled via a UI interaction (the [pressed](https://bryntum.com/products/taskboard/docs/api/Core/widget/Button#property-pressed) state is changed). If the button is part of a
     * [toggleGroup](https://bryntum.com/products/taskboard/docs/api/Core/widget/Button#config-toggleGroup) and you need to process the pressed button only, consider using
     * [click](https://bryntum.com/products/taskboard/docs/api/Core/widget/Button#event-click) event or [action](#Core/widget/Button#event-action) event.
     * @param {object} event Event object
     * @param {Button} event.source Toggled button
     * @param {boolean} event.pressed New pressed state
     * @param {boolean} event.userAction `true` if the toggle was triggered by a user action (click), `false` if it was triggered programmatically.
     */
    onToggle: ((event: { source: Button, pressed: boolean, userAction: boolean }) => void)|string
}

/**
 * A button with a menu allowing the user to toggle which swimlanes are shown on the [TaskBoard](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard).
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlanePickerButton)
 */
export class SwimlanePickerButton extends Button {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlanePickerButton#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<SwimlanePickerButtonConfig>} config
     */
    constructor(config?: Partial<SwimlanePickerButtonConfig>);
}

/**
 * Type with configuration options for [SwimlaneScrollButton](https://bryntum.com/products/grid/docs/api/TaskBoard/widget/SwimlaneScrollButton) class.
 */
type SwimlaneScrollButtonConfig = ContainerItemConfig & {
    type: 'swimlaneScrollButton'|'swimlanescrollbutton'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneScrollButton#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneScrollButton#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneScrollButton#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneScrollButton#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * Initial text to show in badge.
     */
    badge: string
    /**
     * The button behavioral type, will be applied as a `type` attribute to this button's element.
     */
    behaviorType: 'button'|'submit'|'reset'
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneScrollButton#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneScrollButton#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneScrollButton#config-cls)
     */
    cls: string|object
    /**
     * Button color (should have match in button.scss or your custom styling). Valid values in Bryntum themes
     * are:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneScrollButton#config-color)
     */
    color: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneScrollButton#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneScrollButton#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneScrollButton#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneScrollButton#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * If provided, turns the button into a link.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneScrollButton#config-href)
     */
    href: string
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneScrollButton#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Button icon class.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneScrollButton#config-icon)
     */
    icon: string
    /**
     * Button icon alignment. May be `'start'` or `'end'`. Defaults to `'start'`
     */
    iconAlign: 'start'|'end'
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneScrollButton#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneScrollButton#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneScrollButton#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneScrollButton#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneScrollButton#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * A submenu configuration object, or an array of MenuItem configuration objects from which to create a
     * submenu which is shown when this button is pressed.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneScrollButton#config-menu)
     */
    menu: Record<string, Partial<MenuItemConfig>|Partial<ContainerItemConfig>>|(Partial<MenuItemConfig>|Partial<ContainerItemConfig>)[]
    /**
     * The menu icon class to show when the button has a menu. Set to `null` to not show a menu icon.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneScrollButton#config-menuIcon)
     */
    menuIcon: string
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneScrollButton#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneScrollButton#config-owner)
     */
    owner: Widget
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneScrollButton#config-positioned)
     */
    positioned: boolean
    /**
     * Initially pressed or not. Only applies with `toggleable = true`.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneScrollButton#config-pressed)
     */
    pressed: boolean
    /**
     * Icon class for the buttons pressed state. Only applies to toggle buttons
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneScrollButton#config-pressedIcon)
     */
    pressedIcon: string
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneScrollButton#config-readOnly)
     */
    readOnly: boolean
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneScrollButton#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneScrollButton#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneScrollButton#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneScrollButton#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * Set to `true` to perform action on clicking the button if it's already pressed
     * and belongs to a [toggleGroup](https://bryntum.com/products/taskboard/docs/api/Core/widget/Button#config-toggleGroup).
     */
    supportsPressedClick: boolean
    /**
     * A configuration for the [tab](https://bryntum.com/products/taskboard/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/taskboard/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneScrollButton#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * The `target` attribute for the [href](https://bryntum.com/products/taskboard/docs/api/Core/widget/Button#config-href) config
     */
    target: string
    /**
     * Auto detected when used within a TaskBoard. If you add the widget elsewhere, it will try to find an instance
     * of TaskBoard on page. If that fails you have to supply this config to connect it to a TaskBoard manually.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneScrollButton#config-taskBoard)
     */
    taskBoard: TaskBoard
    /**
     * The button's text.
     */
    text: string
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneScrollButton#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)
     */
    title: string
    /**
     * Indicates that this button is part of a group where only one button can be pressed. Assigning a value
     * also sets `toggleable` to `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneScrollButton#config-toggleGroup)
     */
    toggleGroup: string
    /**
     * Enabled toggling of the button (stays pressed when pressed).
     */
    toggleable: boolean
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneScrollButton#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneScrollButton#config-ui)
     */
    ui: string|object
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneScrollButton#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneScrollButton#config-y)
     */
    y: number
    /**
     * Fires when the default action is performed (the button is clicked)
     * @param {object} event Event object
     * @param {Button} event.source The button
     * @param {Event} event.event DOM event
     */
    onAction: ((event: { source: Button, event: Event }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * This event is triggered when the button's menu is about to be shown.
     * @param {object} event Event object
     * @param {Button} event.source This Button instance.
     * @param {Menu} event.menu This button's menu instance.
     */
    onBeforeShowMenu: ((event: { source: Button, menu: Menu }) => void)|string
    /**
     * Fires before the button is toggled (the [pressed](https://bryntum.com/products/taskboard/docs/api/Core/widget/Button#property-pressed) state is changed). If the button is part of
     * a [toggleGroup](https://bryntum.com/products/taskboard/docs/api/Core/widget/Button#config-toggleGroup) and you need to process the pressed button only, consider using
     * [click](https://bryntum.com/products/taskboard/docs/api/Core/widget/Button#event-click) event or [action](#Core/widget/Button#event-action) event.
     * Return `false` to prevent the toggle to the new pressed state.
     * @param {object} event Event object
     * @param {Button} event.source Toggled button
     * @param {boolean} event.pressed New pressed state
     * @param {boolean} event.userAction `true` if the toggle was triggered by a user action (click), `false` if it was triggered programmatically.
     */
    onBeforeToggle: ((event: { source: Button, pressed: boolean, userAction: boolean }) => boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneScrollButton#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when the button is clicked
     * @param {object} event Event object
     * @param {Button} event.source The button
     * @param {Event} event.event DOM event
     */
    onClick: ((event: { source: Button, event: Event }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneScrollButton#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
    /**
     * Fires when the button is toggled via a UI interaction (the [pressed](https://bryntum.com/products/taskboard/docs/api/Core/widget/Button#property-pressed) state is changed). If the button is part of a
     * [toggleGroup](https://bryntum.com/products/taskboard/docs/api/Core/widget/Button#config-toggleGroup) and you need to process the pressed button only, consider using
     * [click](https://bryntum.com/products/taskboard/docs/api/Core/widget/Button#event-click) event or [action](#Core/widget/Button#event-action) event.
     * @param {object} event Event object
     * @param {Button} event.source Toggled button
     * @param {boolean} event.pressed New pressed state
     * @param {boolean} event.userAction `true` if the toggle was triggered by a user action (click), `false` if it was triggered programmatically.
     */
    onToggle: ((event: { source: Button, pressed: boolean, userAction: boolean }) => void)|string
}

/**
 * A button with a menu allowing the user to pick a swimlane to scroll to.
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneScrollButton)
 */
export class SwimlaneScrollButton extends Button {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneScrollButton#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<SwimlaneScrollButtonConfig>} config
     */
    constructor(config?: Partial<SwimlaneScrollButtonConfig>);
}

/**
 * Type with configuration options for [TagCombo](https://bryntum.com/products/grid/docs/api/TaskBoard/widget/TagCombo) class.
 */
type TagComboConfig = InputFieldConfig & ContainerItemConfig & {
    type: 'tagcombo'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * By default PickerField's picker is transient, and will [hidePicker](https://bryntum.com/products/taskboard/docs/api/Core/widget/PickerField#function-hidePicker) when the user clicks or
     * taps outside or when focus moves outside picker.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-autoClose)
     * @deprecated This will be removed in 6.0
     */
    autoClose: boolean
    /**
     * Sets the native `autocomplete` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)
     */
    autoComplete: string
    /**
     * Configure as `true` to have the picker expand upon focus enter.
     */
    autoExpand: boolean
    /**
     * Specify `true` to auto select field contents on focus
     */
    autoSelect: boolean
    /**
     * Initial text to show in badge.
     */
    badge: string
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Configure as `true` to force case matching when filtering the dropdown list based upon the typed value.
     */
    caseSensitive: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * A config object to configure the [ChipView](https://bryntum.com/products/taskboard/docs/api/Core/widget/ChipView) to display the
     * selected value set when [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) is `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-chipView)
     */
    chipView: Partial<ChipViewConfig>
    /**
     * `true` to clear value typed to a multiselect combo when picker is collapsed
     */
    clearTextOnPickerHide: boolean
    /**
     * Show a trigger to clear field, and allow `SHIFT+BACKSPACE` key to clear field if this field is
     * not [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-readOnly). The trigger is available in the [triggers](#Core/widget/Field#property-triggers) object
     * under the name `clear`. May also be an object which configures the `clear`
     * [trigger](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#property-triggers).
     */
    clearable: boolean|Partial<FieldTriggerConfig>
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-cls)
     */
    cls: string|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The config controls how the value of nested items are handled when a parent container gets or sets its
     * [values](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-containValues)
     * @param {Field} field Field instance
     * @returns {boolean}
     */
    containValues: boolean|string|((field: Field) => boolean)
    /**
     * The configuration for additional items associated to this field. This is typically used to add contextual
     * fields related to a [checkbox](https://bryntum.com/products/taskboard/docs/api/Core/widget/Checkbox) or [radio button](#Core/widget/Radio). See
     * these classes for examples of nested fields.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-container)
     */
    container: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Partial<FieldContainerConfig>|FieldContainer
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * If configured as `true`, this means that when an unmatched string is typed into the
     * combo's input field, and `ENTER`, or the [multiValueSeparator](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiValueSeparator) is typed,
     * a new record will be created using the typed string as the [displayField](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-displayField).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-createOnUnmatched)
     * @param {string} name Record name
     * @param {Combo} combo Combo instance
     * @returns {Model} New record
     */
    createOnUnmatched: ((name: string, combo: Combo) => Model)|string|boolean
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Field used for item text when populating from store
     */
    displayField: string
    /**
     * Template function that can be used to customize the displayed value
     * @param {Model} record The record to provide a textual value for
     * @param {Combo} combo A reference to this Combo
     * @returns {string|void}
     */
    displayValueRenderer: (record: Model, combo: Combo) => string|void
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * User can edit text in text field (otherwise only pick from attached picker)
     */
    editable: boolean
    /**
     * Text to display in the drop down when there are no items in the underlying store
     */
    emptyText: string
    /**
     * A function which creates an array of values for the {#config-filterParamName} to pass
     * any filters to the server upon load.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-encodeFilterParams)
     * @param {<Object>} filters filters
     * @returns {<Object>} array of values
     */
    encodeFilterParams: (filters: object[]) => object[]
    /**
     * If `false`, filtering will be triggered once you exceed [minChars](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-minChars). To filter only when
     * hitting Enter key, set this to `true`;
     */
    filterOnEnter: boolean
    /**
     * The name of an operator type as implemented in [operator](https://bryntum.com/products/taskboard/docs/api/Core/util/CollectionFilter#config-operator)
     * to use when filtering the dropdown list based upon the typed value.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-filterOperator)
     */
    filterOperator: '='|'!='|'>'|'>='|'<'|'<='|'*'|'startsWith'|'endsWith'|'isIncludedIn'
    /**
     * If the dropdown is to be populated with a filtered query to a remote server, specify the
     * name of the parameter to pass the typed string here. By default, the string is simply sent
     * as the value of the parameter. For special encoding, configure the combo with [encodeFilterParams](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-encodeFilterParams)
     */
    filterParamName: string
    /**
     * When [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) is `true`, you may configure `filterSelected` as
     * `true` to hide items in the dropdown when they are added to the selection.
     * It will appear as if the requested item has "moved" into the field's
     * [ChipView](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-chipView).
     */
    filterSelected: boolean
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * By default, the picker is hidden on selection in single select mode, and
     * remains to allow more selections when [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) is `true`.
     * Setting this to a `Boolean` value can override that default.
     */
    hidePickerOnSelect: boolean
    /**
     * Configure as `true` to hide the expand trigger. This is automatically set to `true` if
     * remote filtering is enabled by setting the [filterParamName](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-filterParamName) config.
     */
    hideTrigger: boolean
    /**
     * Specify `false` to prevent field from being highlighted when on external value changes
     */
    highlightExternalChange: boolean
    /**
     * An optional string to display inside the input field as an overlay. This can be useful for displaying
     * a field's units.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-hint)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hint: string|((data: { source: Field, value: any }) => string)
    /**
     * This config is similar to [hint](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-hint) except that this config is used to display HTML content.
     * Since this can allow malicious content to be executed, be sure not to include user-entered data or to
     * encode such data (see [encodeHtml](https://bryntum.com/products/taskboard/docs/api/Core/helper/StringHelper#function-encodeHtml-static)).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-hintHtml)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hintHtml: string|((data: { source: Field, value: any }) => string)
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Set this config to `true` to always display items horizontally along with this field. This assigns an
     * [hbox](https://bryntum.com/products/taskboard/docs/api/Core/widget/layout/Box) as the [layout](#Core/widget/Container#config-layout) to the
     * [container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-container).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-inline)
     */
    inline: boolean
    /**
     * Configure this as `true` to render the dropdown list as a permanently visible list
     * in the document flow immediately below the input area instead of as a popup.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-inlinePicker)
     */
    inlinePicker: boolean
    /**
     * Text alignment for the input field.
     */
    inputAlign: string
    /**
     * Sets custom attributes of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes)
     */
    inputAttributes: object
    /**
     * Sets the `type` attribute of the underlying input element (password, hidden, date, color, etc).
     */
    inputType: string
    /**
     * The width to apply to the `&lt;input&gt;` element. If a number is specified, `px` will be used.
     */
    inputWidth: string|number
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * Rows to display in the dropdown (list items).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-items)
     */
    items: object[]|string[]|object
    /**
     * The delay in milliseconds to wait after the last keystroke before triggering a change event.
     * Set to 0 to not trigger change events from keystrokes (listen for input event instead to have
     * immediate feedback, change will still be triggered on blur).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-keyStrokeChangeDelay)
     */
    keyStrokeChangeDelay: number
    /**
     * The delay in milliseconds to wait after the last keystroke before filtering the list.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-keyStrokeFilterDelay)
     */
    keyStrokeFilterDelay: number
    /**
     * Label, prepended to field
     */
    label: string
    /**
     * CSS class name or class names to add to any configured [label](https://bryntum.com/products/taskboard/docs/api/Core/widget/mixin/Labelable#config-label)
     */
    labelCls: string|object
    /**
     * Label position, either 'before' the field or 'above' the field
     */
    labelPosition: 'before'|'above'
    /**
     * The width to apply to the `&lt;label&gt;` element. If a number is specified, `px` will be used.
     */
    labelWidth: string|number
    /**
     * The labels to add either before or after the input field.
     * Each label may have the following properties:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-labels)
     */
    labels: object[]
    /**
     * CSS class to add to picker
     */
    listCls: string
    /**
     * Template string used to render the list items in the dropdown list
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-listItemTpl)
     * @param {Model} record The record representing the item being rendered
     * @returns {string|void}
     */
    listItemTpl: (record: Model) => string|void
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The max number of characters for the input field
     */
    maxLength: number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * The minimum string length to trigger the filtering, only relevant when [editable](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-editable) is `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-minChars)
     */
    minChars: number
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The min number of characters for the input field
     */
    minLength: number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * Configure as `true` to allow selection of multiple values from the dropdown list.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-multiSelect)
     */
    multiSelect: boolean
    /**
     * A key value which, when typed in a [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) Combo, selects the
     * currently active item in the picker, and clears the input field ready for another
     * match to be typed.
     */
    multiValueSeparator: string
    /**
     * Name of the field which is used as a key to get/set values from/to the field.
     * Used prior to [ref](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-ref) and [id](#Core/widget/Widget#config-id) in
     * [Container.values](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-name)
     */
    name: string
    /**
     * This implies that the picker will display an anchor pointer, but also means that the picker will align closer
     * to the input field so that the pointer pierces the [pickerAlignElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-pickerAlignElement)
     */
    overlayAnchor: boolean
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-owner)
     */
    owner: Widget
    /**
     * Configuration object for the [picker](https://bryntum.com/products/taskboard/docs/api/Core/widget/List) on initialization. Returns the
     * [picker](https://bryntum.com/products/taskboard/docs/api/Core/widget/List) instance at runtime.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-picker)
     */
    picker: Partial<ListConfig>|List
    /**
     * The name of the element property to which the picker should size and align itself.
     */
    pickerAlignElement: string
    /**
     * Width of picker, defaults to this combo's [pickerAlignElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-pickerAlignElement) width
     */
    pickerWidth: number
    /**
     * Text to display in empty field.
     */
    placeholder: string
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Optionally a [Filter](https://bryntum.com/products/taskboard/docs/api/Core/util/CollectionFilter) config object which the combo should use for
     * filtering using the typed value.
     * This may use a `filterBy` property to test its `value` against any field in the passed record.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-primaryFilter)
     */
    primaryFilter: Partial<CollectionFilterConfig>
    /**
     * Makes the field unmodifiable by user action. The input area is not editable, and triggers
     * are unresponsive.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-readOnly)
     */
    readOnly: boolean
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to indicate that a `null` field value is to be marked as invalid.
     */
    required: boolean
    /**
     * If this field is not [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-readOnly), then setting this option means that pressing
     * the `ESCAPE` key after editing the field will revert the field to the value it had when
     * the user focused the field. If the field is *not* changed from when focused, the [clearable](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated.
     */
    revertOnEscape: boolean
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * Separator used to split a string into tags. Required if data format uses a single string to represent tags.
     */
    separator: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * Sets the native `spellcheck` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck)
     */
    spellCheck: boolean
    /**
     * Store used to populate items. Also accepts a Store config object
     */
    store: Store|Partial<StoreConfig>
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/taskboard/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/taskboard/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tab index of the input field
     */
    tabIndex: number
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * Auto detected when used within a TaskBoard. If you add the widget elsewhere, it will try to find an instance
     * of TaskBoard on page. If that fails you have to supply this config to connect it to a TaskBoard manually.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-taskBoard)
     */
    taskBoard: TaskBoard
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)
     */
    title: string
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * How to query the store upon click of the expand trigger. Specify one of these values:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-triggerAction)
     */
    triggerAction: 'all'|'last'|null
    /**
     * The triggers to add either before or after the input field. Each property name is the reference by which
     * an instantiated Trigger Widget may be retrieved from the live `[triggers](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#property-triggers)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-triggers)
     */
    triggers: Record<string, FieldTriggerConfig>
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-ui)
     */
    ui: string|object
    /**
     * `true` to cause the field to be in an invalid state while the typed filter string does not match a record in the store.
     */
    validateFilter: boolean
    /**
     * Set to `false` to not highlight a field as invalid while typing, to instead show it on ENTER key press
     * or similar.
     */
    validateOnInput: boolean
    /**
     * The initial value of this Combo box. In single select mode (default) it's a simple string value, for
     * [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) mode, it should be an array of record ids.
     */
    value: string|number|string[]|number[]
    /**
     * Field used for item value when populating from store. Setting this to `null` will
     * yield the selected record as the Combo's [value](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#property-value).
     */
    valueField: string|null
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#config-y)
     */
    y: number
    /**
     * The default action was performed (an item in the list was selected)
     * @param {object} event Event object
     * @param {Combo} event.source The combo
     * @param {any} event.value The [value](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-valueField) of the selected record
     * @param {Model} event.record Selected record
     * @param {Model[]} event.records Selected records as an array if [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) is `true`
     * @param {boolean} event.userAction `true` if the value change is due to user interaction
     */
    onAction: ((event: { source: Combo, value: any, record: Model, records: Model[], userAction: boolean }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when this field's value changes.
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     * @param {string|number|boolean|any} event.value This field's value
     * @param {string|number|boolean|any} event.oldValue This field's previous value
     * @param {boolean} event.valid True if this field is in a valid state
     * @param {Event} event.event The triggering DOM event if any
     * @param {boolean} event.userAction Triggered by user taking an action (`true`) or by setting a value (`false`)
     * @param {boolean} event.checked
     */
    onChange: ((event: { source: Field|any, value: string|number|boolean|any, oldValue: string|number|boolean|any, valid: boolean, event: Event, userAction: boolean, checked: boolean }) => void)|string
    /**
     * Fired when this field is [cleared](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#function-clear).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#event-clear)
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     */
    onClear: ((event: { source: Field|any }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * User typed into the field. Please note that the value attached to this event is the raw input field value and
     * not the combos value
     * @param {object} event Event object
     * @param {Combo} event.source The combo.
     * @param {string} event.value Raw input value
     * @param {Event} event.event The triggering DOM event if any.
     */
    onInput: ((event: { source: Combo, value: string, event: Event }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * An item in the list was selected
     * @param {object} event Event object
     * @param {Combo} event.source The combo
     * @param {Model} event.record Selected record
     * @param {Model[]} event.records Selected records as an array if [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) is `true`
     * @param {boolean} event.userAction `true` if the value change is due to user interaction
     */
    onSelect: ((event: { source: Combo, record: Model, records: Model[], userAction: boolean }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
    /**
     * User clicked one of this field's [triggers](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#property-triggers)
     * @param {object} event Event object
     * @param {Field|any} event.source This field
     * @param {Widget} event.trigger The trigger activated by click or touch tap.
     */
    onTrigger: ((event: { source: Field|any, trigger: Widget }) => void)|string
}

/**
 * A combo for picking tags. Works well to edit fields displayed by a [TagsItem](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/TagsItem), if data
 * uses strings to represent tags:
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo)
 */
export class TagCombo extends Combo {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TagCombo#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<TagComboConfig>} config
     */
    constructor(config?: Partial<TagComboConfig>);
}

/**
 * Type with configuration options for [TaskColorCombo](https://bryntum.com/products/grid/docs/api/TaskBoard/widget/TaskColorCombo) class.
 */
type TaskColorComboConfig = InputFieldConfig & ContainerItemConfig & {
    type: 'taskcolorcombo'
    /**
     * Adds an option in the picker to set no background color
     */
    addNoColorItem: boolean
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * By default PickerField's picker is transient, and will [hidePicker](https://bryntum.com/products/taskboard/docs/api/Core/widget/PickerField#function-hidePicker) when the user clicks or
     * taps outside or when focus moves outside picker.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo#config-autoClose)
     * @deprecated This will be removed in 6.0
     */
    autoClose: boolean
    /**
     * Sets the native `autocomplete` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)
     */
    autoComplete: string
    /**
     * Configure as `true` to have the picker expand upon focus enter.
     */
    autoExpand: boolean
    /**
     * Specify `true` to auto select field contents on focus
     */
    autoSelect: boolean
    /**
     * Initial text to show in badge.
     */
    badge: string
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * Show a trigger to clear field, and allow `SHIFT+BACKSPACE` key to clear field if this field is
     * not [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-readOnly). The trigger is available in the [triggers](#Core/widget/Field#property-triggers) object
     * under the name `clear`. May also be an object which configures the `clear`
     * [trigger](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#property-triggers).
     */
    clearable: boolean|Partial<FieldTriggerConfig>
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo#config-cls)
     */
    cls: string|object
    /**
     * Array of CSS color strings to be able to chose from. This will override the
     * [pickers default colors](https://bryntum.com/products/taskboard/docs/api/Core/widget/ColorPicker#config-colors).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo#config-colors)
     */
    colors: string[]
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The config controls how the value of nested items are handled when a parent container gets or sets its
     * [values](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo#config-containValues)
     * @param {Field} field Field instance
     * @returns {boolean}
     */
    containValues: boolean|string|((field: Field) => boolean)
    /**
     * The configuration for additional items associated to this field. This is typically used to add contextual
     * fields related to a [checkbox](https://bryntum.com/products/taskboard/docs/api/Core/widget/Checkbox) or [radio button](#Core/widget/Radio). See
     * these classes for examples of nested fields.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo#config-container)
     */
    container: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Partial<FieldContainerConfig>|FieldContainer
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * User can edit text in text field (otherwise only pick from attached picker)
     */
    editable: boolean
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * Specify `false` to prevent field from being highlighted when on external value changes
     */
    highlightExternalChange: boolean
    /**
     * An optional string to display inside the input field as an overlay. This can be useful for displaying
     * a field's units.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo#config-hint)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hint: string|((data: { source: Field, value: any }) => string)
    /**
     * This config is similar to [hint](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-hint) except that this config is used to display HTML content.
     * Since this can allow malicious content to be executed, be sure not to include user-entered data or to
     * encode such data (see [encodeHtml](https://bryntum.com/products/taskboard/docs/api/Core/helper/StringHelper#function-encodeHtml-static)).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo#config-hintHtml)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hintHtml: string|((data: { source: Field, value: any }) => string)
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Set this config to `true` to always display items horizontally along with this field. This assigns an
     * [hbox](https://bryntum.com/products/taskboard/docs/api/Core/widget/layout/Box) as the [layout](#Core/widget/Container#config-layout) to the
     * [container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-container).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo#config-inline)
     */
    inline: boolean
    /**
     * Text alignment for the input field.
     */
    inputAlign: string
    /**
     * Sets custom attributes of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes)
     */
    inputAttributes: object
    /**
     * Sets the `type` attribute of the underlying input element (password, hidden, date, color, etc).
     */
    inputType: string
    /**
     * The width to apply to the `&lt;input&gt;` element. If a number is specified, `px` will be used.
     */
    inputWidth: string|number
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * The delay in milliseconds to wait after the last keystroke before triggering a change event.
     * Set to 0 to not trigger change events from keystrokes (listen for input event instead to have
     * immediate feedback, change will still be triggered on blur).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo#config-keyStrokeChangeDelay)
     */
    keyStrokeChangeDelay: number
    /**
     * Label, prepended to field
     */
    label: string
    /**
     * CSS class name or class names to add to any configured [label](https://bryntum.com/products/taskboard/docs/api/Core/widget/mixin/Labelable#config-label)
     */
    labelCls: string|object
    /**
     * Label position, either 'before' the field or 'above' the field
     */
    labelPosition: 'before'|'above'
    /**
     * The width to apply to the `&lt;label&gt;` element. If a number is specified, `px` will be used.
     */
    labelWidth: string|number
    /**
     * The labels to add either before or after the input field.
     * Each label may have the following properties:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo#config-labels)
     */
    labels: object[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The max number of characters for the input field
     */
    maxLength: number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The min number of characters for the input field
     */
    minLength: number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * Name of the field which is used as a key to get/set values from/to the field.
     * Used prior to [ref](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-ref) and [id](#Core/widget/Widget#config-id) in
     * [Container.values](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo#config-name)
     */
    name: string
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo#config-owner)
     */
    owner: Widget
    /**
     * Configuration object for the [picker](https://bryntum.com/products/taskboard/docs/api/Core/widget/List) on initialization. Returns the
     * [picker](https://bryntum.com/products/taskboard/docs/api/Core/widget/List) instance at runtime.
     * A config object which is merged into the generated picker configuration on initialization
     * to allow specific use cases to override behaviour.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo#config-picker)
     */
    picker: object|Widget
    /**
     * The name of the element property to which the picker should size and align itself.
     */
    pickerAlignElement: string
    /**
     * Text to display in empty field.
     */
    placeholder: string
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Makes the field unmodifiable by user action. The input area is not editable, and triggers
     * are unresponsive.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo#config-readOnly)
     */
    readOnly: boolean
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to indicate that a `null` field value is to be marked as invalid.
     */
    required: boolean
    /**
     * If this field is not [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-readOnly), then setting this option means that pressing
     * the `ESCAPE` key after editing the field will revert the field to the value it had when
     * the user focused the field. If the field is *not* changed from when focused, the [clearable](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated.
     */
    revertOnEscape: boolean
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * Sets the native `spellcheck` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck)
     */
    spellCheck: boolean
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/taskboard/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/taskboard/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tab index of the input field
     */
    tabIndex: number
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)
     */
    title: string
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * The triggers to add either before or after the input field. Each property name is the reference by which
     * an instantiated Trigger Widget may be retrieved from the live `[triggers](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#property-triggers)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo#config-triggers)
     */
    triggers: Record<string, FieldTriggerConfig>
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo#config-ui)
     */
    ui: string|object
    /**
     * Set to `false` to not highlight a field as invalid while typing, to instead show it on ENTER key press
     * or similar.
     */
    validateOnInput: boolean
    /**
     * Default value
     */
    value: string
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo#config-y)
     */
    y: number
    /**
     * User performed default action (typed into this field).
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     * @param {string|number|boolean|any} event.value This field's value
     * @param {string|number|boolean|any} event.oldValue This field's previous value
     * @param {boolean} event.valid True if this field is in a valid state
     * @param {Event} event.event The triggering DOM event if any
     * @param {Model} event.record Selected record. Available for fields with records selection functionality
     * @param {Model[]} event.records Selected records as an array. Available for fields with records selection functionality
     * @param {boolean} event.userAction Triggered by user taking an action (`true`) or by setting a value (`false`)
     * @param {boolean} event.checked
     */
    onAction: ((event: { source: Field|any, value: string|number|boolean|any, oldValue: string|number|boolean|any, valid: boolean, event: Event, record: Model, records: Model[], userAction: boolean, checked: boolean }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when this field's value changes.
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     * @param {string|number|boolean|any} event.value This field's value
     * @param {string|number|boolean|any} event.oldValue This field's previous value
     * @param {boolean} event.valid True if this field is in a valid state
     * @param {Event} event.event The triggering DOM event if any
     * @param {boolean} event.userAction Triggered by user taking an action (`true`) or by setting a value (`false`)
     * @param {boolean} event.checked
     */
    onChange: ((event: { source: Field|any, value: string|number|boolean|any, oldValue: string|number|boolean|any, valid: boolean, event: Event, userAction: boolean, checked: boolean }) => void)|string
    /**
     * Fired when this field is [cleared](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#function-clear).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo#event-clear)
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     */
    onClear: ((event: { source: Field|any }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Fired when the user types into this field.
     * @param {object} event Event object
     * @param {Field|any} event.source This field
     * @param {string|number|boolean|any} event.value This field's value
     * @param {Event} event.event The triggering DOM event
     */
    onInput: ((event: { source: Field|any, value: string|number|boolean|any, event: Event }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
    /**
     * User clicked one of this field's [triggers](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#property-triggers)
     * @param {object} event Event object
     * @param {Field|any} event.source This field
     * @param {Widget} event.trigger The trigger activated by click or touch tap.
     */
    onTrigger: ((event: { source: Field|any, trigger: Widget }) => void)|string
}

/**
 * A combo populated with predefined colors usable by a task, see [eventColor](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/TaskModel#field-eventColor).
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo)
 */
export class TaskColorCombo extends ColorField {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorCombo#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<TaskColorComboConfig>} config
     */
    constructor(config?: Partial<TaskColorComboConfig>);
}

/**
 * Type with configuration options for [TaskColorPicker](https://bryntum.com/products/grid/docs/api/TaskBoard/widget/TaskColorPicker) class.
 */
type TaskColorPickerConfig = {
    type: 'colorpicker'
    /**
     * Configure as `true` to activate items on mouseover. This is used by the Combo
     * field when using a List as its dropdown.
     */
    activateOnMouseover: boolean
    /**
     * Adds an option to set no background color
     */
    addNoColorItem: boolean
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorPicker#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorPicker#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * Configure as `true` to allow selecting groups (all the group child records will be toggled). Only
     * applicable when the store is grouped.
     */
    allowGroupSelect: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorPicker#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorPicker#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorPicker#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorPicker#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * Configure as `true` to clear selection when clicking on empty space inside the List´s element.
     */
    clearSelectionOnEmptySpaceClick: boolean
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorPicker#config-cls)
     */
    cls: string|object
    /**
     * True to add a collapse icon to toggle groups being collapsed or expanded
     */
    collapsibleGroups: boolean
    /**
     * A callback function that will be called when the user selects a color in the picker.
     * @param {object} event Object containing event data
     * @param {Model} event.record The selected color's record instance
     * @param {string} event.color The string color value
     * @returns {void}
     */
    colorSelected: (event: { record: Model, color: string }) => void
    /**
     * Array of CSS color strings from which the user can chose from.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorPicker#config-colors)
     */
    colors: string[]
    /**
     * The color items is displayed in a grid layout with 6 columns as default. Change this to another number to
     * affect appearance.
     */
    columns: number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorPicker#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * The model field to render into each list item
     */
    displayField: string
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorPicker#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorPicker#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * Configure this as a function or the name of a function, which when passed a record in the
     * list, returns a CSS class name string to apply to its list item.
     * @param {Model} record The record
     * @returns {string}
     */
    getItemCls: ((record: Model) => string)|string
    /**
     * Configure this as a function or the name of a function, which when passed a record in the
     * list, returns a style string to apply to its list item.
     * @param {Model} record The record
     * @returns {string}
     */
    getItemStyle: ((record: Model) => string)|string
    /**
     * Template function which is passed a group record and the uppercased group field name. The text returned
     * will be rendered as the group header.
     * @param {Model} record The record
     * @param {string} groupName The current group name
     * @returns {string}
     */
    groupHeaderTpl: (record: Model, groupName: string) => string
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorPicker#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorPicker#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorPicker#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * Template function which, when passed a record, returns the textual HTML for that item. Defaults to a
     * function returning the value of the record´s [displayField](https://bryntum.com/products/taskboard/docs/api/Core/widget/List#config-displayField)
     * @param {Model} record The record
     * @returns {string}
     */
    itemTpl: (record: Model) => string
    /**
     * An array of Objects which are converted into records and used to create this
     * List's [store](https://bryntum.com/products/taskboard/docs/api/Core/widget/List#config-store)
     */
    items: object[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorPicker#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorPicker#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorPicker#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorPicker#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorPicker#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * Configure as `true` to allow multi select and add checkboxes to the items
     */
    multiSelect: boolean
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorPicker#config-owner)
     */
    owner: Widget
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorPicker#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorPicker#config-readOnly)
     */
    readOnly: boolean
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorPicker#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorPicker#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorPicker#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * Set to `true` to add a "Select all" item to the list to select/unselect all items at once.
     * Only applies when [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/List#config-multiSelect) mode is enabled.
     */
    selectAllItem: boolean|string
    /**
     * A [Collection](https://bryntum.com/products/taskboard/docs/api/Core/util/Collection), or Collection config object to use to contain this List's selected
     * records.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorPicker#config-selected)
     */
    selected: object[]|number[]|string[]|Collection|Partial<CollectionConfig>
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorPicker#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * A [Store](https://bryntum.com/products/taskboard/docs/api/Core/data/Store) which provides the records which map to List items. Each record is passed through the
     * [itemTpl](https://bryntum.com/products/taskboard/docs/api/Core/widget/List#config-itemTpl) to produce the DOM structure of the List. May be generated from an array of [items](#Core/widget/List#config-items).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorPicker#config-store)
     */
    store: object|object[]|Store
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/taskboard/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/taskboard/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorPicker#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorPicker#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)
     */
    title: string
    /**
     * Select/deselect all if `CMD`/`CTRL` is pressed when clicking
     */
    toggleAllIfCtrlPressed: boolean
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorPicker#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorPicker#config-ui)
     */
    ui: string|object
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorPicker#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorPicker#config-y)
     */
    y: number
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * User going to activate an item in the list either by pointer or keyboard.
     * The active record, list item index, and the triggering event are passed.
     * It is preventable by returning `false`
     * @param {object} event Event object
     * @param {List} event.source The List instance
     * @param {Model} event.record Activated record
     * @param {number} event.args List item index
     * @param {Event} event.event Triggering event
     */
    onBeforeItem: ((event: { source: List, record: Model, args: number, event: Event }) => boolean|void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorPicker#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * User activated an item in the list either by pointer or keyboard.
     * The active record, list item index, and the triggering event are passed.
     * @param {object} event Event object
     * @param {List} event.source The List instance
     * @param {Model} event.record Activated record
     * @param {number} event.index List item index
     * @param {Event} event.event Triggering event
     */
    onItem: ((event: { source: List, record: Model, index: number, event: Event }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorPicker#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Fired when selection changes
     * @param {object} event Event object
     * @param {List} event.source The List instance
     * @param {Model[]} event.selected An array of the currently selected records
     */
    onSelectionChange: ((event: { source: List, selected: Model[] }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
    /**
     * Group item expanded or collapsed
     * @param {object} event Event object
     * @param {Model} event.groupRecord Group record
     * @param {boolean} event.collapse Collapsed (true) or expanded (false)
     */
    onToggleGroup: ((event: { groupRecord: Model, collapse: boolean }) => void)|string
}

/**
 * A color picker that displays a list of available task colors which the user can select by using mouse or keyboard.
 * See [eventColor](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/TaskModel#field-eventColor) for default available colors.
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorPicker)
 */
export class TaskColorPicker extends ColorPicker {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskColorPicker#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<TaskColorPickerConfig>} config
     */
    constructor(config?: Partial<TaskColorPickerConfig>);
}

/**
 * Type with configuration options for [TaskEditor](https://bryntum.com/products/grid/docs/api/TaskBoard/widget/TaskEditor) class.
 */
type TaskEditorConfig = {
    type: 'taskboardtaskeditor'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * By default, a Popup is transient, and will [close](https://bryntum.com/products/taskboard/docs/api/Core/widget/Popup#function-close) when the user clicks or
     * taps outside its owned widgets and when focus moves outside its owned widgets.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-autoClose)
     */
    autoClose: boolean
    /**
     * Auto show flag for Popup.
     * If truthy then Popup is shown automatically upon hover.
     */
    autoShow: boolean
    /**
     * Update fields if the [record](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-record) changes
     */
    autoUpdateFields: boolean
    /**
     * By default the editor automatically updates the edited task when a field is changed. Set this to `false`
     * to show Save / Cancel buttons and take manual control of the updating.
     */
    autoUpdateRecord: boolean
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/taskboard/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-bbar)
     */
    bbar: (Partial<ContainerItemConfig>|string)[]|Partial<ToolbarConfig>
    /**
     * Custom CSS classes to add to the panel's body element.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-bodyCls)
     */
    bodyCls: string|object
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Center the editor in browser viewport space. Defaults to true for desktop browsers using a pointer device
     */
    centered: boolean
    /**
     * Shows a tool used to close the editor in the header.
     */
    closable: boolean
    /**
     * The action to take when calling the [close](https://bryntum.com/products/taskboard/docs/api/Core/widget/Popup#function-close) method.
     * By default, the popup is hidden.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-closeAction)
     */
    closeAction: 'hide'|'destroy'
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-cls)
     */
    cls: string|object
    /**
     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is
     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel#config-collapsible).
     */
    collapsed: boolean
    /**
     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel#config-collapsed).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-collapsible)
     */
    collapsible: boolean|Partial<PanelCollapserConfig>|Partial<PanelCollapserOverlayConfig>
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * A [query](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-defaultFocus)
     * @param {Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus: (widget: Widget) => boolean
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults: object
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * By default a Popup is focused when it is shown.
     * Configure this as `false` to prevent automatic focus on show.
     */
    focusOnToFront: boolean
    /**
     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,
     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-footer)
     */
    footer: {
        dock?: 'top'|'right'|'bottom'|'left'|'start'|'end'
        html?: string
        cls?: string
    }|string
    /**
     * DOM element to attach popup.
     */
    forElement: HTMLElement
    /**
     * A config [object](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-header)
     */
    header: string|boolean|PanelHeader
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-hideWhenEmpty)
     */
    hideWhenEmpty: boolean
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls: string
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-items)
     */
    items: Record<string, Partial<ContainerItemConfig>|Partial<MenuItemConfig>|boolean|null>|(Partial<ContainerItemConfig>|Partial<MenuItemConfig>|Widget)[]
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-layout)
     */
    layout: string|Partial<ContainerLayoutConfig>
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-layoutStyle)
     */
    layoutStyle: object
    /**
     * An array of [child item](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-lazyItems)
     */
    lazyItems: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * Show a tool in the header to maximize this popup
     */
    maximizable: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * Set to `true` to make this widget take all available space in the visible viewport.
     */
    maximized: boolean
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * Show an opaque mask below the editor when shown.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-modal)
     */
    modal: boolean
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * An object containing named config objects which may be referenced by name in any [items](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#config-items)
     * object. For example, a specialized [Menu](https://bryntum.com/products/taskboard/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-namedItems)
     */
    namedItems: Record<string, Partial<ContainerItemConfig>>
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-owner)
     */
    owner: Widget
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-readOnly)
     */
    readOnly: boolean
    /**
     * [Record](https://bryntum.com/products/taskboard/docs/api/Core/data/Model) whose values will be used to populate fields in the container.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-record)
     */
    record: Model
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * True to save and close the editor if ENTER is pressed.
     * (The save part only applies when configured with `autoUpdateRecord : false`)
     */
    saveAndCloseOnEnter: boolean
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Show popup when user clicks the element that it is anchored to. Cannot be combined with showOnHover
     */
    showOnClick: boolean
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/taskboard/docs/api/Core/mixin/State#config-stateProvider). If this config is
     * not assigned, and [stateful](https://bryntum.com/products/taskboard/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)
     * (if explicitly specified) will be used as the `stateId`.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-stateId)
     */
    stateId: string
    /**
     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/taskboard/docs/api/Core/mixin/State#property-state). By default, `state`
     * will be saved using the [default state provider](https://bryntum.com/products/taskboard/docs/api/Core/state/StateProvider#property-instance-static).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-stateProvider)
     */
    stateProvider: StateProvider
    /**
     * This value can be one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-stateful)
     */
    stateful: boolean|object|string[]
    /**
     * The events that, when fired by this component, should trigger it to save its state by calling
     * [saveState](https://bryntum.com/products/taskboard/docs/api/Core/mixin/State#function-saveState).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-statefulEvents)
     */
    statefulEvents: object|string[]
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping: boolean
    /**
     * An object containing widgets keyed by name. By default (when no `type` is given), strips are
     * [toolbars](https://bryntum.com/products/taskboard/docs/api/Core/widget/Toolbar). If the value assigned to a strip is an array, it is converted to
     * the toolbar's [items](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#config-items).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-strips)
     */
    strips: Record<string, Partial<ContainerItemConfig>>
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/taskboard/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/taskboard/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/taskboard/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-tbar)
     */
    tbar: (Partial<ContainerItemConfig>|string)[]|Partial<ToolbarConfig>
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * Specify `true` for a container used to show text markup. It will apply the CSS class `b-text-content`
     * which specifies a default max-width that makes long text more readable.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-textContent)
     */
    textContent: boolean
    /**
     * A title to display in the header. Causes creation and docking of a header
     * to the top if no header is configured.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-title)
     */
    title: string
    /**
     * The [tools](https://bryntum.com/products/taskboard/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each
     * property name is the reference by which an instantiated tool may be retrieved from the live
     * `[tools](https://bryntum.com/products/taskboard/docs/api/Core/widget/mixin/Toolable#property-tools)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-tools)
     */
    tools: Record<string, Partial<ToolConfig>>
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * By default, tabbing within a Popup is circular - that is it does not exit.
     * Configure this as `false` to allow tabbing out of the Popup.
     */
    trapFocus: boolean
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-ui)
     */
    ui: string|object
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#config-y)
     */
    y: number
    /**
     * Fires on the owning TaskBoard when user clicks 'Cancel'.
     * Returning `false` from a listener prevents canceling and keeps the editor open.
     * @param {object} event Event object
     * @param {TaskBoard} event.source The taskboard
     * @param {TaskEditor} event.editor The editor
     */
    onBeforeCancel: ((event: { source: TaskBoard, editor: TaskEditor }) => boolean|void)|string
    /**
     * Fired when the [close](https://bryntum.com/products/taskboard/docs/api/Core/widget/Popup#function-close) method is called and the popup is not hidden.
     * May be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Popup} event.source This Popup
     */
    onBeforeClose: ((event: { source: Popup }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Container} event.source The container
     * @param {Model} event.record The record
     */
    onBeforeSetRecord: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning TaskBoard when user clicks 'Cancel', after the editor closed.
     * @param {object} event Event object
     * @param {TaskBoard} event.source The taskboard
     * @param {TaskEditor} event.editor The editor
     */
    onCancel: ((event: { source: TaskBoard, editor: TaskEditor }) => boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Panel} event.source This Panel.
     */
    onCollapse: ((event: { source: Panel }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Panel} event.source This Panel.
     */
    onExpand: ((event: { source: Panel }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Tool} event.source This Panel.
     * @param {Tool} event.tool The tool which is being clicked.
     */
    onToolClick: ((event: { source: Tool, tool: Tool }) => void)|string
}

/**
 * Popup used to edit tasks. Normally displayed using the [TaskEdit feature](https://bryntum.com/products/taskboard/docs/api/TaskBoard/feature/TaskEdit).
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor)
 */
export class TaskEditor extends Popup {
    /**
     * Fires on the owning TaskBoard when user clicks 'Cancel'.
     * Returning `false` from a listener prevents canceling and keeps the editor open.
     * @param {object} event Event object
     * @param {TaskBoard} event.source The taskboard
     * @param {TaskEditor} event.editor The editor
     */
    onBeforeCancel: ((event: { source: TaskBoard, editor: TaskEditor }) => boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires on the owning TaskBoard when user clicks 'Cancel', after the editor closed.
     * @param {object} event Event object
     * @param {TaskBoard} event.source The taskboard
     * @param {TaskEditor} event.editor The editor
     */
    onCancel: ((event: { source: TaskBoard, editor: TaskEditor }) => boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskEditor#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<TaskEditorConfig>} config
     */
    constructor(config?: Partial<TaskEditorConfig>);
}

/**
 * Type with configuration options for [TaskFilterField](https://bryntum.com/products/grid/docs/api/TaskBoard/widget/TaskFilterField) class.
 */
type TaskFilterFieldConfig = ContainerItemConfig & {
    type: 'taskfilterfield'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * Sets the native `autocomplete` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)
     */
    autoComplete: string
    /**
     * Specify `true` to auto select field contents on focus
     */
    autoSelect: boolean
    /**
     * Initial text to show in badge.
     */
    badge: string
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * Show a trigger to clear field, and allow `SHIFT+BACKSPACE` key to clear field if this field is
     * not [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-readOnly). The trigger is available in the [triggers](#Core/widget/Field#property-triggers) object
     * under the name `clear`. May also be an object which configures the `clear`
     * [trigger](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#property-triggers).
     */
    clearable: boolean|Partial<FieldTriggerConfig>
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField#config-cls)
     */
    cls: string|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The config controls how the value of nested items are handled when a parent container gets or sets its
     * [values](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField#config-containValues)
     * @param {Field} field Field instance
     * @returns {boolean}
     */
    containValues: boolean|string|((field: Field) => boolean)
    /**
     * The configuration for additional items associated to this field. This is typically used to add contextual
     * fields related to a [checkbox](https://bryntum.com/products/taskboard/docs/api/Core/widget/Checkbox) or [radio button](#Core/widget/Radio). See
     * these classes for examples of nested fields.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField#config-container)
     */
    container: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Partial<FieldContainerConfig>|FieldContainer
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * Set to false to prevent user from editing the field. For TextFields it is basically the same as setting
     * [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-readOnly), but for PickerFields there is a distinction where it allows you to pick a value
     * but not to type one in the field.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField#config-editable)
     */
    editable: boolean
    /**
     * The model field name to filter by. Can optionally be replaced by [filterFunction](https://bryntum.com/products/taskboard/docs/api/Core/widget/FilterField#config-filterFunction)
     */
    field: string
    /**
     * Optional filter function to be called with record and value as parameters for store filtering.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField#config-filterFunction)
     * @param {Model} record Record for comparison
     * @param {string} value Value to compare with
     * @returns {boolean} Returns `true` if record matches comparison requirements
     */
    filterFunction: (record: Model, value: string) => boolean
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * Specify `false` to prevent field from being highlighted when on external value changes
     */
    highlightExternalChange: boolean
    /**
     * An optional string to display inside the input field as an overlay. This can be useful for displaying
     * a field's units.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField#config-hint)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hint: string|((data: { source: Field, value: any }) => string)
    /**
     * This config is similar to [hint](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-hint) except that this config is used to display HTML content.
     * Since this can allow malicious content to be executed, be sure not to include user-entered data or to
     * encode such data (see [encodeHtml](https://bryntum.com/products/taskboard/docs/api/Core/helper/StringHelper#function-encodeHtml-static)).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField#config-hintHtml)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hintHtml: string|((data: { source: Field, value: any }) => string)
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Set this config to `true` to always display items horizontally along with this field. This assigns an
     * [hbox](https://bryntum.com/products/taskboard/docs/api/Core/widget/layout/Box) as the [layout](#Core/widget/Container#config-layout) to the
     * [container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-container).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField#config-inline)
     */
    inline: boolean
    /**
     * Text alignment for the input field.
     */
    inputAlign: string
    /**
     * Sets custom attributes of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes)
     */
    inputAttributes: object
    /**
     * Sets the `type` attribute of the underlying input element (password, hidden, date, color, etc).
     */
    inputType: string
    /**
     * The width to apply to the `&lt;input&gt;` element. If a number is specified, `px` will be used.
     */
    inputWidth: string|number
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * The delay in milliseconds to wait after the last keystroke before triggering a change event.
     * Set to 0 to not trigger change events from keystrokes (listen for input event instead to have
     * immediate feedback, change will still be triggered on blur).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField#config-keyStrokeChangeDelay)
     */
    keyStrokeChangeDelay: number
    /**
     * Label, prepended to field
     */
    label: string
    /**
     * CSS class name or class names to add to any configured [label](https://bryntum.com/products/taskboard/docs/api/Core/widget/mixin/Labelable#config-label)
     */
    labelCls: string|object
    /**
     * Label position, either 'before' the field or 'above' the field
     */
    labelPosition: 'before'|'above'
    /**
     * The width to apply to the `&lt;label&gt;` element. If a number is specified, `px` will be used.
     */
    labelWidth: string|number
    /**
     * The labels to add either before or after the input field.
     * Each label may have the following properties:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField#config-labels)
     */
    labels: object[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The max number of characters for the input field
     */
    maxLength: number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The min number of characters for the input field
     */
    minLength: number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * Name of the field which is used as a key to get/set values from/to the field.
     * Used prior to [ref](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-ref) and [id](#Core/widget/Widget#config-id) in
     * [Container.values](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField#config-name)
     */
    name: string
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField#config-owner)
     */
    owner: Widget
    /**
     * Text to display in empty field.
     */
    placeholder: string
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Makes the field unmodifiable by user action. The input area is not editable, and triggers
     * are unresponsive.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField#config-readOnly)
     */
    readOnly: boolean
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to indicate that a `null` field value is to be marked as invalid.
     */
    required: boolean
    /**
     * If this field is not [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-readOnly), then setting this option means that pressing
     * the `ESCAPE` key after editing the field will revert the field to the value it had when
     * the user focused the field. If the field is *not* changed from when focused, the [clearable](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated.
     */
    revertOnEscape: boolean
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * Sets the native `spellcheck` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck)
     */
    spellCheck: boolean
    /**
     * The store to filter.
     */
    store: Store
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/taskboard/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/taskboard/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tab index of the input field
     */
    tabIndex: number
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * Auto detected when used within a TaskBoard. If you add the widget elsewhere, it will try to find an instance
     * of TaskBoard on page. If that fails you have to supply this config to connect it to a TaskBoard manually.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField#config-taskBoard)
     */
    taskBoard: TaskBoard
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)
     */
    title: string
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * The triggers to add either before or after the input field. Each property name is the reference by which
     * an instantiated Trigger Widget may be retrieved from the live `[triggers](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#property-triggers)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField#config-triggers)
     */
    triggers: Record<string, FieldTriggerConfig>
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField#config-ui)
     */
    ui: string|object
    /**
     * Set to `false` to not highlight a field as invalid while typing, to instead show it on ENTER key press
     * or similar.
     */
    validateOnInput: boolean
    /**
     * Default value
     */
    value: string
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField#config-y)
     */
    y: number
    /**
     * User performed default action (typed into this field).
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     * @param {string|number|boolean|any} event.value This field's value
     * @param {string|number|boolean|any} event.oldValue This field's previous value
     * @param {boolean} event.valid True if this field is in a valid state
     * @param {Event} event.event The triggering DOM event if any
     * @param {Model} event.record Selected record. Available for fields with records selection functionality
     * @param {Model[]} event.records Selected records as an array. Available for fields with records selection functionality
     * @param {boolean} event.userAction Triggered by user taking an action (`true`) or by setting a value (`false`)
     * @param {boolean} event.checked
     */
    onAction: ((event: { source: Field|any, value: string|number|boolean|any, oldValue: string|number|boolean|any, valid: boolean, event: Event, record: Model, records: Model[], userAction: boolean, checked: boolean }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when this field's value changes.
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     * @param {string|number|boolean|any} event.value This field's value
     * @param {string|number|boolean|any} event.oldValue This field's previous value
     * @param {boolean} event.valid True if this field is in a valid state
     * @param {Event} event.event The triggering DOM event if any
     * @param {boolean} event.userAction Triggered by user taking an action (`true`) or by setting a value (`false`)
     * @param {boolean} event.checked
     */
    onChange: ((event: { source: Field|any, value: string|number|boolean|any, oldValue: string|number|boolean|any, valid: boolean, event: Event, userAction: boolean, checked: boolean }) => void)|string
    /**
     * Fired when this field is [cleared](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#function-clear).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField#event-clear)
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     */
    onClear: ((event: { source: Field|any }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Fired when the user types into this field.
     * @param {object} event Event object
     * @param {Field|any} event.source This field
     * @param {string|number|boolean|any} event.value This field's value
     * @param {Event} event.event The triggering DOM event
     */
    onInput: ((event: { source: Field|any, value: string|number|boolean|any, event: Event }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
    /**
     * User clicked one of this field's [triggers](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#property-triggers)
     * @param {object} event Event object
     * @param {Field|any} event.source This field
     * @param {Widget} event.trigger The trigger activated by click or touch tap.
     */
    onTrigger: ((event: { source: Field|any, trigger: Widget }) => void)|string
}

/**
 * A field that filters the tasks of a linked [TaskBoard](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoard) when typing into it.
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField)
 */
export class TaskFilterField extends FilterField {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TaskFilterField#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<TaskFilterFieldConfig>} config
     */
    constructor(config?: Partial<TaskFilterFieldConfig>);
}

/**
 * Type with configuration options for [TodoListField](https://bryntum.com/products/grid/docs/api/TaskBoard/widget/TodoListField) class.
 */
type TodoListFieldConfig = InputFieldConfig & ContainerItemConfig & {
    type: 'todolistfield'|'todolist'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TodoListField#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TodoListField#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TodoListField#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TodoListField#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * Sets the native `autocomplete` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)
     */
    autoComplete: string
    /**
     * Specify `true` to auto select field contents on focus
     */
    autoSelect: boolean
    /**
     * Initial text to show in badge.
     */
    badge: string
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TodoListField#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TodoListField#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * Name of a property on a todo item to use for the checkbox. The property is expected to be a boolean.
     */
    checkedField: string
    /**
     * Show a trigger to clear field, and allow `SHIFT+BACKSPACE` key to clear field if this field is
     * not [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-readOnly). The trigger is available in the [triggers](#Core/widget/Field#property-triggers) object
     * under the name `clear`. May also be an object which configures the `clear`
     * [trigger](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#property-triggers).
     */
    clearable: boolean|Partial<FieldTriggerConfig>
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TodoListField#config-cls)
     */
    cls: string|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The config controls how the value of nested items are handled when a parent container gets or sets its
     * [values](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TodoListField#config-containValues)
     * @param {Field} field Field instance
     * @returns {boolean}
     */
    containValues: boolean|string|((field: Field) => boolean)
    /**
     * The configuration for additional items associated to this field. This is typically used to add contextual
     * fields related to a [checkbox](https://bryntum.com/products/taskboard/docs/api/Core/widget/Checkbox) or [radio button](#Core/widget/Radio). See
     * these classes for examples of nested fields.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TodoListField#config-container)
     */
    container: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Partial<FieldContainerConfig>|FieldContainer
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TodoListField#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TodoListField#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TodoListField#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * Set to false to prevent user from editing the field. For TextFields it is basically the same as setting
     * [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-readOnly), but for PickerFields there is a distinction where it allows you to pick a value
     * but not to type one in the field.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TodoListField#config-editable)
     */
    editable: boolean
    /**
     * Configure as `false` to hide the per item edit button and the add item button. Users can still check/uncheck
     * items.
     */
    editableItems: boolean
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TodoListField#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * Specify `false` to prevent field from being highlighted when on external value changes
     */
    highlightExternalChange: boolean
    /**
     * An optional string to display inside the input field as an overlay. This can be useful for displaying
     * a field's units.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TodoListField#config-hint)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hint: string|((data: { source: Field, value: any }) => string)
    /**
     * This config is similar to [hint](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-hint) except that this config is used to display HTML content.
     * Since this can allow malicious content to be executed, be sure not to include user-entered data or to
     * encode such data (see [encodeHtml](https://bryntum.com/products/taskboard/docs/api/Core/helper/StringHelper#function-encodeHtml-static)).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TodoListField#config-hintHtml)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hintHtml: string|((data: { source: Field, value: any }) => string)
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TodoListField#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TodoListField#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Set this config to `true` to always display items horizontally along with this field. This assigns an
     * [hbox](https://bryntum.com/products/taskboard/docs/api/Core/widget/layout/Box) as the [layout](#Core/widget/Container#config-layout) to the
     * [container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-container).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TodoListField#config-inline)
     */
    inline: boolean
    /**
     * Text alignment for the input field.
     */
    inputAlign: string
    /**
     * Sets custom attributes of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes)
     */
    inputAttributes: object
    /**
     * Sets the `type` attribute of the underlying input element (password, hidden, date, color, etc).
     */
    inputType: string
    /**
     * The width to apply to the `&lt;input&gt;` element. If a number is specified, `px` will be used.
     */
    inputWidth: string|number
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * The delay in milliseconds to wait after the last keystroke before triggering a change event.
     * Set to 0 to not trigger change events from keystrokes (listen for input event instead to have
     * immediate feedback, change will still be triggered on blur).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TodoListField#config-keyStrokeChangeDelay)
     */
    keyStrokeChangeDelay: number
    /**
     * Label, prepended to field
     */
    label: string
    /**
     * CSS class name or class names to add to any configured [label](https://bryntum.com/products/taskboard/docs/api/Core/widget/mixin/Labelable#config-label)
     */
    labelCls: string|object
    /**
     * Label position, either 'before' the field or 'above' the field
     */
    labelPosition: 'before'|'above'
    /**
     * The width to apply to the `&lt;label&gt;` element. If a number is specified, `px` will be used.
     */
    labelWidth: string|number
    /**
     * The labels to add either before or after the input field.
     * Each label may have the following properties:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TodoListField#config-labels)
     */
    labels: object[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TodoListField#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TodoListField#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TodoListField#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TodoListField#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TodoListField#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * Name of the field which is used as a key to get/set values from/to the field.
     * Used prior to [ref](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-ref) and [id](#Core/widget/Widget#config-id) in
     * [Container.values](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TodoListField#config-name)
     */
    name: string
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TodoListField#config-owner)
     */
    owner: Widget
    /**
     * Text to display in empty field.
     */
    placeholder: string
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TodoListField#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Makes the field unmodifiable by user action. The input area is not editable, and triggers
     * are unresponsive.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TodoListField#config-readOnly)
     */
    readOnly: boolean
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TodoListField#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to indicate that a `null` field value is to be marked as invalid.
     */
    required: boolean
    /**
     * If this field is not [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-readOnly), then setting this option means that pressing
     * the `ESCAPE` key after editing the field will revert the field to the value it had when
     * the user focused the field. If the field is *not* changed from when focused, the [clearable](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated.
     */
    revertOnEscape: boolean
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TodoListField#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TodoListField#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TodoListField#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * Sets the native `spellcheck` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck)
     */
    spellCheck: boolean
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/taskboard/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/taskboard/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TodoListField#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TodoListField#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * Name of a property on a todo item to display as its text.
     */
    textField: string
    /**
     * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)
     */
    title: string
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TodoListField#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * The triggers to add either before or after the input field. Each property name is the reference by which
     * an instantiated Trigger Widget may be retrieved from the live `[triggers](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#property-triggers)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TodoListField#config-triggers)
     */
    triggers: Record<string, FieldTriggerConfig>
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TodoListField#config-ui)
     */
    ui: string|object
    /**
     * Set to `false` to not highlight a field as invalid while typing, to instead show it on ENTER key press
     * or similar.
     */
    validateOnInput: boolean
    /**
     * Default value
     */
    value: string
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TodoListField#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TodoListField#config-y)
     */
    y: number
    /**
     * User performed default action (typed into this field).
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     * @param {string|number|boolean|any} event.value This field's value
     * @param {string|number|boolean|any} event.oldValue This field's previous value
     * @param {boolean} event.valid True if this field is in a valid state
     * @param {Event} event.event The triggering DOM event if any
     * @param {Model} event.record Selected record. Available for fields with records selection functionality
     * @param {Model[]} event.records Selected records as an array. Available for fields with records selection functionality
     * @param {boolean} event.userAction Triggered by user taking an action (`true`) or by setting a value (`false`)
     * @param {boolean} event.checked
     */
    onAction: ((event: { source: Field|any, value: string|number|boolean|any, oldValue: string|number|boolean|any, valid: boolean, event: Event, record: Model, records: Model[], userAction: boolean, checked: boolean }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TodoListField#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when this field's value changes.
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     * @param {string|number|boolean|any} event.value This field's value
     * @param {string|number|boolean|any} event.oldValue This field's previous value
     * @param {boolean} event.valid True if this field is in a valid state
     * @param {Event} event.event The triggering DOM event if any
     * @param {boolean} event.userAction Triggered by user taking an action (`true`) or by setting a value (`false`)
     * @param {boolean} event.checked
     */
    onChange: ((event: { source: Field|any, value: string|number|boolean|any, oldValue: string|number|boolean|any, valid: boolean, event: Event, userAction: boolean, checked: boolean }) => void)|string
    /**
     * Fired when this field is [cleared](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#function-clear).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TodoListField#event-clear)
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     */
    onClear: ((event: { source: Field|any }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Fired when the user types into this field.
     * @param {object} event Event object
     * @param {Field|any} event.source This field
     * @param {string|number|boolean|any} event.value This field's value
     * @param {Event} event.event The triggering DOM event
     */
    onInput: ((event: { source: Field|any, value: string|number|boolean|any, event: Event }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TodoListField#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
    /**
     * User clicked one of this field's [triggers](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#property-triggers)
     * @param {object} event Event object
     * @param {Field|any} event.source This field
     * @param {Widget} event.trigger The trigger activated by click or touch tap.
     */
    onTrigger: ((event: { source: Field|any, trigger: Widget }) => void)|string
}

/**
 * A field that displays, and also lets users edit, a list of todo items. Each item has a checkbox to mark if the item
 * is completed or not and a button to edit its text/remove it. Designed to be used in the task editor, to work in
 * tandem with the [TodoListItem](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/item/TodoListItem).
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TodoListField)
 */
export class TodoListField extends Field {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/TodoListField#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<TodoListFieldConfig>} config
     */
    constructor(config?: Partial<TodoListFieldConfig>);
}

/**
 * Type with configuration options for [UndoRedo](https://bryntum.com/products/grid/docs/api/TaskBoard/widget/UndoRedo) class.
 */
type UndoRedoConfig = ContainerItemConfig & {
    type: 'taskboardundoredo'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/UndoRedo#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/UndoRedo#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/UndoRedo#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/UndoRedo#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * Update assigned [record](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#config-record) automatically on field changes
     */
    autoUpdateRecord: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/UndoRedo#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/UndoRedo#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/UndoRedo#config-cls)
     */
    cls: string|object
    /**
     * Button color for the undo and redo buttons. See [color](https://bryntum.com/products/taskboard/docs/api/Core/widget/Button#config-color).
     */
    color: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/UndoRedo#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * A [query](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/UndoRedo#config-defaultFocus)
     * @param {Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus: (widget: Widget) => boolean
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults: object
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/UndoRedo#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/UndoRedo#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/UndoRedo#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/UndoRedo#config-hideWhenEmpty)
     */
    hideWhenEmpty: boolean
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/UndoRedo#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/UndoRedo#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls: string
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/UndoRedo#config-items)
     */
    items: Record<string, Partial<ContainerItemConfig>|Partial<MenuItemConfig>|boolean|null>|(Partial<ContainerItemConfig>|Partial<MenuItemConfig>|Widget)[]
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/UndoRedo#config-layout)
     */
    layout: string|Partial<ContainerLayoutConfig>
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/UndoRedo#config-layoutStyle)
     */
    layoutStyle: object
    /**
     * An array of [child item](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/UndoRedo#config-lazyItems)
     */
    lazyItems: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/UndoRedo#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/UndoRedo#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/UndoRedo#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/UndoRedo#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/UndoRedo#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * An object containing named config objects which may be referenced by name in any [items](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#config-items)
     * object. For example, a specialized [Menu](https://bryntum.com/products/taskboard/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/UndoRedo#config-namedItems)
     */
    namedItems: Record<string, Partial<ContainerItemConfig>>
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/UndoRedo#config-owner)
     */
    owner: Widget
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/UndoRedo#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/UndoRedo#config-readOnly)
     */
    readOnly: boolean
    /**
     * [Record](https://bryntum.com/products/taskboard/docs/api/Core/data/Model) whose values will be used to populate fields in the container.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/UndoRedo#config-record)
     */
    record: Model
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/UndoRedo#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/UndoRedo#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/UndoRedo#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/UndoRedo#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * Configure as `true` to show "0" badge on the undo and redo buttons when they have no actions
     * left to perform. By default when there are no actions, no badge is displayed.
     */
    showZeroActionBadge: boolean
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping: boolean
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/taskboard/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/taskboard/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/UndoRedo#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * Configure as `true` to show "Undo" and "Redo" as button texts. The buttons always have a tooltip
     * as a hint to the user as to their purpose.
     */
    text: boolean
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/UndoRedo#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * Specify `true` for a container used to show text markup. It will apply the CSS class `b-text-content`
     * which specifies a default max-width that makes long text more readable.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/UndoRedo#config-textContent)
     */
    textContent: boolean
    /**
     * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)
     */
    title: string
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/UndoRedo#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/UndoRedo#config-ui)
     */
    ui: string|object
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/UndoRedo#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/UndoRedo#config-y)
     */
    y: number
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Container} event.source The container
     * @param {Model} event.record The record
     */
    onBeforeSetRecord: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/UndoRedo#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/UndoRedo#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
}

/**
 * A widget encapsulating undo/redo functionality for the [project](https://bryntum.com/products/taskboard/docs/api/TaskBoard/model/ProjectModel) of a TaskBoard.
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/UndoRedo)
 */
export class UndoRedo extends UndoRedoBase {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/UndoRedo#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<UndoRedoConfig>} config
     */
    constructor(config?: Partial<UndoRedoConfig>);
}

/**
 * Type with configuration options for [ZoomSlider](https://bryntum.com/products/grid/docs/api/TaskBoard/widget/ZoomSlider) class.
 */
type ZoomSliderConfig = ContainerItemConfig & {
    type: 'zoomslider'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ZoomSlider#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ZoomSlider#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ZoomSlider#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ZoomSlider#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ZoomSlider#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ZoomSlider#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ZoomSlider#config-cls)
     */
    cls: string|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ZoomSlider#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ZoomSlider#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ZoomSlider#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ZoomSlider#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ZoomSlider#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ZoomSlider#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ZoomSlider#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ZoomSlider#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ZoomSlider#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * Maximum value
     */
    max: number
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ZoomSlider#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * Minimum value
     */
    min: number
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ZoomSlider#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ZoomSlider#config-owner)
     */
    owner: Widget
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ZoomSlider#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ZoomSlider#config-readOnly)
     */
    readOnly: boolean
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ZoomSlider#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ZoomSlider#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ZoomSlider#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ZoomSlider#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Show the slider value in a tooltip
     */
    showTooltip: boolean
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * Show value in label (appends in () if text is set)
     */
    showValue: boolean
    /**
     * Step size
     */
    step: number
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/taskboard/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/taskboard/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ZoomSlider#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * Auto detected when used within a TaskBoard. If you add the widget elsewhere, it will try to find an instance
     * of TaskBoard on page. If that fails you have to supply this config to connect it to a TaskBoard manually.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ZoomSlider#config-taskBoard)
     */
    taskBoard: TaskBoard
    /**
     * Slider label text
     */
    text: string
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ZoomSlider#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)
     */
    title: string
    /**
     * A config object for the tooltip to show while hovering the slider.
     */
    tooltip: Partial<TooltipConfig>
    /**
     * By default, the [change](https://bryntum.com/products/taskboard/docs/api/Core/widget/Slider#event-change) event is fired when a change gesture is completed, ie: on
     * the mouse up gesture of a drag.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ZoomSlider#config-triggerChangeOnInput)
     */
    triggerChangeOnInput: boolean
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ZoomSlider#config-ui)
     */
    ui: string|object
    /**
     * Unit to display next to the value, when configured with `showValue : true`
     */
    unit: string
    /**
     * Initial value
     */
    value: number
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ZoomSlider#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ZoomSlider#config-y)
     */
    y: number
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ZoomSlider#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired after the slider value changes (on mouse up following slider interaction).
     * @param {object} event Event object
     * @param {number} event.value The value
     * @param {boolean} event.userAction Triggered by user taking an action (`true`) or by setting a value (`false`)
     * @param {Slider} event.source The slider
     */
    onChange: ((event: { value: number, userAction: boolean, source: Slider }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Fired while slider thumb is being dragged.
     * @param {object} event Event object
     * @param {Slider} event.source The slider
     * @param {number} event.value The value
     */
    onInput: ((event: { source: Slider, value: number }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ZoomSlider#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
}

/**
 * A slider that controls the [tasksPerRow](https://bryntum.com/products/taskboard/docs/api/TaskBoard/view/TaskBoardBase#config-tasksPerRow) config of TaskBoard.
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ZoomSlider)
 */
export class ZoomSlider extends Slider {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ZoomSlider#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<ZoomSliderConfig>} config
     */
    constructor(config?: Partial<ZoomSliderConfig>);
}

/**
 * Type with configuration options for [ColorBoxCombo](https://bryntum.com/products/grid/docs/api/TaskBoard/widget/base/ColorBoxCombo) class.
 */
type ColorBoxComboConfig = {
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * By default PickerField's picker is transient, and will [hidePicker](https://bryntum.com/products/taskboard/docs/api/Core/widget/PickerField#function-hidePicker) when the user clicks or
     * taps outside or when focus moves outside picker.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-autoClose)
     * @deprecated This will be removed in 6.0
     */
    autoClose: boolean
    /**
     * Sets the native `autocomplete` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)
     */
    autoComplete: string
    /**
     * Configure as `true` to have the picker expand upon focus enter.
     */
    autoExpand: boolean
    /**
     * Specify `true` to auto select field contents on focus
     */
    autoSelect: boolean
    /**
     * Initial text to show in badge.
     */
    badge: string
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Configure as `true` to force case matching when filtering the dropdown list based upon the typed value.
     */
    caseSensitive: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * A config object to configure the [ChipView](https://bryntum.com/products/taskboard/docs/api/Core/widget/ChipView) to display the
     * selected value set when [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) is `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-chipView)
     */
    chipView: Partial<ChipViewConfig>
    /**
     * `true` to clear value typed to a multiselect combo when picker is collapsed
     */
    clearTextOnPickerHide: boolean
    /**
     * Show a trigger to clear field, and allow `SHIFT+BACKSPACE` key to clear field if this field is
     * not [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-readOnly). The trigger is available in the [triggers](#Core/widget/Field#property-triggers) object
     * under the name `clear`. May also be an object which configures the `clear`
     * [trigger](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#property-triggers).
     */
    clearable: boolean|Partial<FieldTriggerConfig>
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-cls)
     */
    cls: string|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The config controls how the value of nested items are handled when a parent container gets or sets its
     * [values](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-containValues)
     * @param {Field} field Field instance
     * @returns {boolean}
     */
    containValues: boolean|string|((field: Field) => boolean)
    /**
     * The configuration for additional items associated to this field. This is typically used to add contextual
     * fields related to a [checkbox](https://bryntum.com/products/taskboard/docs/api/Core/widget/Checkbox) or [radio button](#Core/widget/Radio). See
     * these classes for examples of nested fields.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-container)
     */
    container: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Partial<FieldContainerConfig>|FieldContainer
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * If configured as `true`, this means that when an unmatched string is typed into the
     * combo's input field, and `ENTER`, or the [multiValueSeparator](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiValueSeparator) is typed,
     * a new record will be created using the typed string as the [displayField](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-displayField).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-createOnUnmatched)
     * @param {string} name Record name
     * @param {Combo} combo Combo instance
     * @returns {Model} New record
     */
    createOnUnmatched: ((name: string, combo: Combo) => Model)|string|boolean
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Field used for item text when populating from store
     */
    displayField: string
    /**
     * Template function that can be used to customize the displayed value
     * @param {Model} record The record to provide a textual value for
     * @param {Combo} combo A reference to this Combo
     * @returns {string|void}
     */
    displayValueRenderer: (record: Model, combo: Combo) => string|void
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/taskboard/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * User can edit text in text field (otherwise only pick from attached picker)
     */
    editable: boolean
    /**
     * Text to display in the drop down when there are no items in the underlying store
     */
    emptyText: string
    /**
     * A function which creates an array of values for the {#config-filterParamName} to pass
     * any filters to the server upon load.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-encodeFilterParams)
     * @param {<Object>} filters filters
     * @returns {<Object>} array of values
     */
    encodeFilterParams: (filters: object[]) => object[]
    /**
     * If `false`, filtering will be triggered once you exceed [minChars](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-minChars). To filter only when
     * hitting Enter key, set this to `true`;
     */
    filterOnEnter: boolean
    /**
     * The name of an operator type as implemented in [operator](https://bryntum.com/products/taskboard/docs/api/Core/util/CollectionFilter#config-operator)
     * to use when filtering the dropdown list based upon the typed value.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-filterOperator)
     */
    filterOperator: '='|'!='|'>'|'>='|'<'|'<='|'*'|'startsWith'|'endsWith'|'isIncludedIn'
    /**
     * If the dropdown is to be populated with a filtered query to a remote server, specify the
     * name of the parameter to pass the typed string here. By default, the string is simply sent
     * as the value of the parameter. For special encoding, configure the combo with [encodeFilterParams](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-encodeFilterParams)
     */
    filterParamName: string
    /**
     * When [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) is `true`, you may configure `filterSelected` as
     * `true` to hide items in the dropdown when they are added to the selection.
     * It will appear as if the requested item has "moved" into the field's
     * [ChipView](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-chipView).
     */
    filterSelected: boolean
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * By default, the picker is hidden on selection in single select mode, and
     * remains to allow more selections when [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) is `true`.
     * Setting this to a `Boolean` value can override that default.
     */
    hidePickerOnSelect: boolean
    /**
     * Configure as `true` to hide the expand trigger. This is automatically set to `true` if
     * remote filtering is enabled by setting the [filterParamName](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-filterParamName) config.
     */
    hideTrigger: boolean
    /**
     * Specify `false` to prevent field from being highlighted when on external value changes
     */
    highlightExternalChange: boolean
    /**
     * An optional string to display inside the input field as an overlay. This can be useful for displaying
     * a field's units.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-hint)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hint: string|((data: { source: Field, value: any }) => string)
    /**
     * This config is similar to [hint](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-hint) except that this config is used to display HTML content.
     * Since this can allow malicious content to be executed, be sure not to include user-entered data or to
     * encode such data (see [encodeHtml](https://bryntum.com/products/taskboard/docs/api/Core/helper/StringHelper#function-encodeHtml-static)).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-hintHtml)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hintHtml: string|((data: { source: Field, value: any }) => string)
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Set this config to `true` to always display items horizontally along with this field. This assigns an
     * [hbox](https://bryntum.com/products/taskboard/docs/api/Core/widget/layout/Box) as the [layout](#Core/widget/Container#config-layout) to the
     * [container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-container).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-inline)
     */
    inline: boolean
    /**
     * Configure this as `true` to render the dropdown list as a permanently visible list
     * in the document flow immediately below the input area instead of as a popup.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-inlinePicker)
     */
    inlinePicker: boolean
    /**
     * Text alignment for the input field.
     */
    inputAlign: string
    /**
     * Sets custom attributes of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes)
     */
    inputAttributes: object
    /**
     * Sets the `type` attribute of the underlying input element (password, hidden, date, color, etc).
     */
    inputType: string
    /**
     * The width to apply to the `&lt;input&gt;` element. If a number is specified, `px` will be used.
     */
    inputWidth: string|number
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * Rows to display in the dropdown (list items).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-items)
     */
    items: object[]|string[]|object
    /**
     * The delay in milliseconds to wait after the last keystroke before triggering a change event.
     * Set to 0 to not trigger change events from keystrokes (listen for input event instead to have
     * immediate feedback, change will still be triggered on blur).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-keyStrokeChangeDelay)
     */
    keyStrokeChangeDelay: number
    /**
     * The delay in milliseconds to wait after the last keystroke before filtering the list.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-keyStrokeFilterDelay)
     */
    keyStrokeFilterDelay: number
    /**
     * Label, prepended to field
     */
    label: string
    /**
     * CSS class name or class names to add to any configured [label](https://bryntum.com/products/taskboard/docs/api/Core/widget/mixin/Labelable#config-label)
     */
    labelCls: string|object
    /**
     * Label position, either 'before' the field or 'above' the field
     */
    labelPosition: 'before'|'above'
    /**
     * The width to apply to the `&lt;label&gt;` element. If a number is specified, `px` will be used.
     */
    labelWidth: string|number
    /**
     * The labels to add either before or after the input field.
     * Each label may have the following properties:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-labels)
     */
    labels: object[]
    /**
     * CSS class to add to picker
     */
    listCls: string
    /**
     * Template string used to render the list items in the dropdown list
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-listItemTpl)
     * @param {Model} record The record representing the item being rendered
     * @returns {string|void}
     */
    listItemTpl: (record: Model) => string|void
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/taskboard/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The max number of characters for the input field
     */
    maxLength: number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * The minimum string length to trigger the filtering, only relevant when [editable](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-editable) is `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-minChars)
     */
    minChars: number
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The min number of characters for the input field
     */
    minLength: number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * Configure as `true` to allow selection of multiple values from the dropdown list.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-multiSelect)
     */
    multiSelect: boolean
    /**
     * A key value which, when typed in a [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) Combo, selects the
     * currently active item in the picker, and clears the input field ready for another
     * match to be typed.
     */
    multiValueSeparator: string
    /**
     * Name of the field which is used as a key to get/set values from/to the field.
     * Used prior to [ref](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-ref) and [id](#Core/widget/Widget#config-id) in
     * [Container.values](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-name)
     */
    name: string
    /**
     * This implies that the picker will display an anchor pointer, but also means that the picker will align closer
     * to the input field so that the pointer pierces the [pickerAlignElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-pickerAlignElement)
     */
    overlayAnchor: boolean
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-owner)
     */
    owner: Widget
    /**
     * Configuration object for the [picker](https://bryntum.com/products/taskboard/docs/api/Core/widget/List) on initialization. Returns the
     * [picker](https://bryntum.com/products/taskboard/docs/api/Core/widget/List) instance at runtime.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-picker)
     */
    picker: Partial<ListConfig>|List
    /**
     * The name of the element property to which the picker should size and align itself.
     */
    pickerAlignElement: string
    /**
     * Width of picker, defaults to this combo's [pickerAlignElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-pickerAlignElement) width
     */
    pickerWidth: number
    /**
     * Text to display in empty field.
     */
    placeholder: string
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Optionally a [Filter](https://bryntum.com/products/taskboard/docs/api/Core/util/CollectionFilter) config object which the combo should use for
     * filtering using the typed value.
     * This may use a `filterBy` property to test its `value` against any field in the passed record.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-primaryFilter)
     */
    primaryFilter: Partial<CollectionFilterConfig>
    /**
     * Makes the field unmodifiable by user action. The input area is not editable, and triggers
     * are unresponsive.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-readOnly)
     */
    readOnly: boolean
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to indicate that a `null` field value is to be marked as invalid.
     */
    required: boolean
    /**
     * If this field is not [readOnly](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-readOnly), then setting this option means that pressing
     * the `ESCAPE` key after editing the field will revert the field to the value it had when
     * the user focused the field. If the field is *not* changed from when focused, the [clearable](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated.
     */
    revertOnEscape: boolean
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * Sets the native `spellcheck` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck)
     */
    spellCheck: boolean
    /**
     * Store used to populate items. Also accepts a Store config object
     */
    store: Store|Partial<StoreConfig>
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/taskboard/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/taskboard/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tab index of the input field
     */
    tabIndex: number
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * Auto detected when used within a TaskBoard. If you add the widget elsewhere, it will try to find an instance
     * of TaskBoard on page. If that fails you have to supply this config to connect it to a TaskBoard manually.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-taskBoard)
     */
    taskBoard: TaskBoard
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)
     */
    title: string
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * How to query the store upon click of the expand trigger. Specify one of these values:
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-triggerAction)
     */
    triggerAction: 'all'|'last'|null
    /**
     * The triggers to add either before or after the input field. Each property name is the reference by which
     * an instantiated Trigger Widget may be retrieved from the live `[triggers](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#property-triggers)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-triggers)
     */
    triggers: Record<string, FieldTriggerConfig>
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-ui)
     */
    ui: string|object
    /**
     * `true` to cause the field to be in an invalid state while the typed filter string does not match a record in the store.
     */
    validateFilter: boolean
    /**
     * Set to `false` to not highlight a field as invalid while typing, to instead show it on ENTER key press
     * or similar.
     */
    validateOnInput: boolean
    /**
     * The initial value of this Combo box. In single select mode (default) it's a simple string value, for
     * [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) mode, it should be an array of record ids.
     */
    value: string|number|string[]|number[]
    /**
     * Field used for item value when populating from store. Setting this to `null` will
     * yield the selected record as the Combo's [value](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#property-value).
     */
    valueField: string|null
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/taskboard/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#config-y)
     */
    y: number
    /**
     * The default action was performed (an item in the list was selected)
     * @param {object} event Event object
     * @param {Combo} event.source The combo
     * @param {any} event.value The [value](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-valueField) of the selected record
     * @param {Model} event.record Selected record
     * @param {Model[]} event.records Selected records as an array if [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) is `true`
     * @param {boolean} event.userAction `true` if the value change is due to user interaction
     */
    onAction: ((event: { source: Combo, value: any, record: Model, records: Model[], userAction: boolean }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when this field's value changes.
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     * @param {string|number|boolean|any} event.value This field's value
     * @param {string|number|boolean|any} event.oldValue This field's previous value
     * @param {boolean} event.valid True if this field is in a valid state
     * @param {Event} event.event The triggering DOM event if any
     * @param {boolean} event.userAction Triggered by user taking an action (`true`) or by setting a value (`false`)
     * @param {boolean} event.checked
     */
    onChange: ((event: { source: Field|any, value: string|number|boolean|any, oldValue: string|number|boolean|any, valid: boolean, event: Event, userAction: boolean, checked: boolean }) => void)|string
    /**
     * Fired when this field is [cleared](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#function-clear).
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#event-clear)
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     */
    onClear: ((event: { source: Field|any }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * User typed into the field. Please note that the value attached to this event is the raw input field value and
     * not the combos value
     * @param {object} event Event object
     * @param {Combo} event.source The combo.
     * @param {string} event.value Raw input value
     * @param {Event} event.event The triggering DOM event if any.
     */
    onInput: ((event: { source: Combo, value: string, event: Event }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/taskboard/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * An item in the list was selected
     * @param {object} event Event object
     * @param {Combo} event.source The combo
     * @param {Model} event.record Selected record
     * @param {Model[]} event.records Selected records as an array if [multiSelect](https://bryntum.com/products/taskboard/docs/api/Core/widget/Combo#config-multiSelect) is `true`
     * @param {boolean} event.userAction `true` if the value change is due to user interaction
     */
    onSelect: ((event: { source: Combo, record: Model, records: Model[], userAction: boolean }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
    /**
     * User clicked one of this field's [triggers](https://bryntum.com/products/taskboard/docs/api/Core/widget/Field#property-triggers)
     * @param {object} event Event object
     * @param {Field|any} event.source This field
     * @param {Widget} event.trigger The trigger activated by click or touch tap.
     */
    onTrigger: ((event: { source: Field|any, trigger: Widget }) => void)|string
}

/**
 * Abstract base class with functionality shared between [ColumnCombo](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/ColumnCombo) and
 * [SwimlaneCombo](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/SwimlaneCombo).
 * ...
 * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo)
 */
export abstract class ColorBoxCombo extends Combo {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/base/ColorBoxCombo#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<ColorBoxComboConfig>} config
     */
    constructor(config?: Partial<ColorBoxComboConfig>);
}

/**
 * Type with configuration options for [TaskBoardLinked](https://bryntum.com/products/grid/docs/api/TaskBoard/widget/mixin/TaskBoardLinked) class.
 */
type TaskBoardLinkedClassConfig = {
    /**
     * Auto detected when used within a TaskBoard. If you add the widget elsewhere, it will try to find an instance
     * of TaskBoard on page. If that fails you have to supply this config to connect it to a TaskBoard manually.
     * ...
     * [View online docs...](https://bryntum.com/products/taskboard/docs/api/TaskBoard/widget/mixin/TaskBoardLinked#config-taskBoard)
     */
    taskBoard: TaskBoard
}

export class TaskBoardLinkedClass {
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<TaskBoardLinkedClassConfig>} config
     */
    constructor(config?: Partial<TaskBoardLinkedClassConfig>);
}

export const TaskBoardLinked : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & TaskBoardLinkedClass>
